

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Aug 04 19:52:36 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   116                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   117  0000                     
   118                           ; Version 1.45
   119                           ; Generated 16/11/2017 GMT
   120                           ; 
   121                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   122                           ; All rights reserved.
   123                           ; 
   124                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   125                           ; 
   126                           ; Redistribution and use in source and binary forms, with or without modification, are
   127                           ; permitted provided that the following conditions are met:
   128                           ; 
   129                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   130                           ;        conditions and the following disclaimer.
   131                           ; 
   132                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   133                           ;        of conditions and the following disclaimer in the documentation and/or other
   134                           ;        materials provided with the distribution.
   135                           ; 
   136                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   137                           ;        software without specific prior written permission.
   138                           ; 
   139                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   140                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   141                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   142                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   143                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   144                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   145                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   146                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   147                           ; 
   148                           ; 
   149                           ; Code-generator required, PIC18F452 Definitions
   150                           ; 
   151                           ; SFR Addresses
   152  0000                     
   153                           	psect	idataCOMRAM
   154  003FFE                     __pidataCOMRAM:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _bt_press
   158  003FFE  01                 	db	1
   159                           
   160                           ;initializer for _tempo_reenvio_SMS
   161  003FFF  05                 	db	5
   162                           
   163                           	psect	idataBANK0
   164  0074E9                     __pidataBANK0:
   165                           	opt stack 0
   166                           
   167                           ;initializer for _tempo_teste_bombas
   168  0074E9  012C               	dw	300
   169                           
   170                           ;initializer for _dtl_posicao
   171  0074EB  3C                 	db	60
   172                           
   173                           ;initializer for _status_estacionaria
   174  0074EC  01                 	db	1
   175                           
   176                           ;initializer for _status_principal
   177  0074ED  01                 	db	1
   178                           
   179                           ;initializer for _status_jockey
   180  0074EE  01                 	db	1
   181                           
   182                           ;initializer for _pressao
   183  0074EF  62                 	db	98
   184                           
   185                           ;initializer for _timerVerificarSinal
   186  0074F0  05                 	db	5
   187                           
   188                           ;initializer for _intensidadeSinal
   189  0074F1  20                 	db	32
   190                           
   191                           	psect	idataBANK1
   192  0074E5                     __pidataBANK1:
   193                           	opt stack 0
   194                           
   195                           ;initializer for intToFloatStr@F2544
   196  0074E5  20                 	db	32
   197  0074E6  20                 	db	32
   198  0074E7  20                 	db	32
   199  0074E8  20                 	db	32
   200                           
   201                           	psect	mediumconst
   202  007C06                     __pmediumconst:
   203                           	opt stack 0
   204  007C06  00                 	db	0
   205  007C07                     criarCaracteresCGRAM@F2961:
   206                           	opt stack 0
   207  007C07  00                 	db	0
   208  007C08  1F                 	db	31
   209  007C09  0E                 	db	14
   210  007C0A  04                 	db	4
   211  007C0B  04                 	db	4
   212  007C0C  04                 	db	4
   213  007C0D  04                 	db	4
   214  007C0E  04                 	db	4
   215  007C0F  00                 	db	0
   216  007C10  00                 	db	0
   217  007C11  00                 	db	0
   218  007C12  00                 	db	0
   219  007C13  00                 	db	0
   220  007C14  10                 	db	16
   221  007C15  10                 	db	16
   222  007C16  10                 	db	16
   223  007C17  00                 	db	0
   224  007C18  00                 	db	0
   225  007C19  00                 	db	0
   226  007C1A  04                 	db	4
   227  007C1B  04                 	db	4
   228  007C1C  14                 	db	20
   229  007C1D  14                 	db	20
   230  007C1E  14                 	db	20
   231  007C1F  00                 	db	0
   232  007C20  01                 	db	1
   233  007C21  01                 	db	1
   234  007C22  05                 	db	5
   235  007C23  05                 	db	5
   236  007C24  15                 	db	21
   237  007C25  15                 	db	21
   238  007C26  15                 	db	21
   239  007C27  0A                 	db	10
   240  007C28  0A                 	db	10
   241  007C29  1F                 	db	31
   242  007C2A  11                 	db	17
   243  007C2B  11                 	db	17
   244  007C2C  0E                 	db	14
   245  007C2D  04                 	db	4
   246  007C2E  04                 	db	4
   247  007C2F  00                 	db	0
   248  007C30  00                 	db	0
   249  007C31  00                 	db	0
   250  007C32  00                 	db	0
   251  007C33  00                 	db	0
   252  007C34  00                 	db	0
   253  007C35  00                 	db	0
   254  007C36  00                 	db	0
   255  007C37                     __end_ofcriarCaracteresCGRAM@F2961:
   256                           	opt stack 0
   257  007C37                     _dpowers:
   258                           	opt stack 0
   259  007C37  0001               	dw	1
   260  007C39  000A               	dw	10
   261  007C3B  0064               	dw	100
   262  007C3D  03E8               	dw	1000
   263  007C3F  2710               	dw	10000
   264  007C41                     __end_of_dpowers:
   265                           	opt stack 0
   266  0000                     _SSPBUF	set	4041
   267  0000                     _SSPSTAT	set	4039
   268  0000                     _SSPADD	set	4040
   269  0000                     _SSPCON2	set	4037
   270  0000                     _SSPCON1	set	4038
   271  0000                     _RCREG	set	4014
   272  0000                     _TMR0L	set	4054
   273  0000                     _TMR0H	set	4055
   274  0000                     _PORTCbits	set	3970
   275  0000                     _PORTDbits	set	3971
   276  0000                     _PORTBbits	set	3969
   277  0000                     _PORTEbits	set	3972
   278  0000                     _TXREG	set	4013
   279  0000                     _ADRESL	set	4035
   280  0000                     _ADRESH	set	4036
   281  0000                     _ADCON0bits	set	4034
   282  0000                     _TRISEbits	set	3990
   283  0000                     _TRISBbits	set	3987
   284  0000                     _PIE1bits	set	3997
   285  0000                     _PIR1bits	set	3998
   286  0000                     _INTCONbits	set	4082
   287  0000                     _SPBRG	set	4015
   288  0000                     _RCSTAbits	set	4011
   289  0000                     _TXSTAbits	set	4012
   290  0000                     _TRISCbits	set	3988
   291  0000                     _TRISDbits	set	3989
   292  0000                     _INTCON	set	4082
   293  0000                     _T0CON	set	4053
   294  0000                     _PORTAbits	set	3968
   295  0000                     _TRISAbits	set	3986
   296  0000                     _ADCON1	set	4033
   297  0000                     _ADCON0	set	4034
   298  0000                     _ACKEN	set	32300
   299  0000                     _ACKDT	set	32301
   300  0000                     _RCEN	set	32299
   301  0000                     _PEN	set	32298
   302  0000                     _RSEN	set	32297
   303  0000                     _SEN	set	32296
   304  0000                     _RCIF	set	31989
   305  0000                     _TMR0IF	set	32658
   306  007C41                     STR_12:
   307  007C41  54                 	db	84	;'T'
   308  007C42  45                 	db	69	;'E'
   309  007C43  53                 	db	83	;'S'
   310  007C44  54                 	db	84	;'T'
   311  007C45  45                 	db	69	;'E'
   312  007C46  20                 	db	32
   313  007C47  44                 	db	68	;'D'
   314  007C48  45                 	db	69	;'E'
   315  007C49  20                 	db	32
   316  007C4A  42                 	db	66	;'B'
   317  007C4B  4F                 	db	79	;'O'
   318  007C4C  4D                 	db	77	;'M'
   319  007C4D  42                 	db	66	;'B'
   320  007C4E  41                 	db	65	;'A'
   321  007C4F  53                 	db	83	;'S'
   322  007C50  20                 	db	32
   323  007C51  52                 	db	82	;'R'
   324  007C52  45                 	db	69	;'E'
   325  007C53  41                 	db	65	;'A'
   326  007C54  4C                 	db	76	;'L'
   327  007C55  49                 	db	73	;'I'
   328  007C56  5A                 	db	90	;'Z'
   329  007C57  41                 	db	65	;'A'
   330  007C58  44                 	db	68	;'D'
   331  007C59  4F                 	db	79	;'O'
   332  007C5A  0D                 	db	13
   333  007C5B  0A                 	db	10
   334  007C5C  45                 	db	69	;'E'
   335  007C5D  4D                 	db	77	;'M'
   336  007C5E  20                 	db	32
   337  007C5F  25                 	db	37
   338  007C60  30                 	db	48	;'0'
   339  007C61  32                 	db	50	;'2'
   340  007C62  64                 	db	100	;'d'
   341  007C63  3A                 	db	58	;':'
   342  007C64  25                 	db	37
   343  007C65  30                 	db	48	;'0'
   344  007C66  32                 	db	50	;'2'
   345  007C67  64                 	db	100	;'d'
   346  007C68  3A                 	db	58	;':'
   347  007C69  25                 	db	37
   348  007C6A  30                 	db	48	;'0'
   349  007C6B  32                 	db	50	;'2'
   350  007C6C  64                 	db	100	;'d'
   351  007C6D  20                 	db	32
   352  007C6E  25                 	db	37
   353  007C6F  30                 	db	48	;'0'
   354  007C70  32                 	db	50	;'2'
   355  007C71  64                 	db	100	;'d'
   356  007C72  2F                 	db	47
   357  007C73  25                 	db	37
   358  007C74  30                 	db	48	;'0'
   359  007C75  32                 	db	50	;'2'
   360  007C76  64                 	db	100	;'d'
   361  007C77  2F                 	db	47
   362  007C78  25                 	db	37
   363  007C79  30                 	db	48	;'0'
   364  007C7A  32                 	db	50	;'2'
   365  007C7B  64                 	db	100	;'d'
   366  007C7C  0D                 	db	13
   367  007C7D  0A                 	db	10
   368  007C7E  4A                 	db	74	;'J'
   369  007C7F  4F                 	db	79	;'O'
   370  007C80  43                 	db	67	;'C'
   371  007C81  4B                 	db	75	;'K'
   372  007C82  45                 	db	69	;'E'
   373  007C83  59                 	db	89	;'Y'
   374  007C84  3A                 	db	58	;':'
   375  007C85  20                 	db	32
   376  007C86  25                 	db	37
   377  007C87  73                 	db	115	;'s'
   378  007C88  0D                 	db	13
   379  007C89  0A                 	db	10
   380  007C8A  50                 	db	80	;'P'
   381  007C8B  52                 	db	82	;'R'
   382  007C8C  49                 	db	73	;'I'
   383  007C8D  4E                 	db	78	;'N'
   384  007C8E  43                 	db	67	;'C'
   385  007C8F  49                 	db	73	;'I'
   386  007C90  50                 	db	80	;'P'
   387  007C91  41                 	db	65	;'A'
   388  007C92  4C                 	db	76	;'L'
   389  007C93  3A                 	db	58	;':'
   390  007C94  20                 	db	32
   391  007C95  25                 	db	37
   392  007C96  73                 	db	115	;'s'
   393  007C97  0D                 	db	13
   394  007C98  0A                 	db	10
   395  007C99  43                 	db	67	;'C'
   396  007C9A  4F                 	db	79	;'O'
   397  007C9B  4D                 	db	77	;'M'
   398  007C9C  42                 	db	66	;'B'
   399  007C9D  55                 	db	85	;'U'
   400  007C9E  53                 	db	83	;'S'
   401  007C9F  54                 	db	84	;'T'
   402  007CA0  41                 	db	65	;'A'
   403  007CA1  4F                 	db	79	;'O'
   404  007CA2  3A                 	db	58	;':'
   405  007CA3  20                 	db	32
   406  007CA4  25                 	db	37
   407  007CA5  73                 	db	115	;'s'
   408  007CA6  0D                 	db	13
   409  007CA7  0A                 	db	10
   410  007CA8  00                 	db	0
   411  007CA9  44                 	db	68	;'D'
   412  007CAA  49                 	db	73	;'I'
   413  007CAB  53                 	db	83	;'S'
   414  007CAC  50                 	db	80	;'P'
   415  007CAD  41                 	db	65	;'A'
   416  007CAE  52                 	db	82	;'R'
   417  007CAF  4F                 	db	79	;'O'
   418  007CB0  20                 	db	32
   419  007CB1  41                 	db	65	;'A'
   420  007CB2  4C                 	db	76	;'L'
   421  007CB3  41                 	db	65	;'A'
   422  007CB4  52                 	db	82	;'R'
   423  007CB5  4D                 	db	77	;'M'
   424  007CB6  45                 	db	69	;'E'
   425  007CB7  20                 	db	32
   426  007CB8  44                 	db	68	;'D'
   427  007CB9  45                 	db	69	;'E'
   428  007CBA  20                 	db	32
   429  007CBB  49                 	db	73	;'I'
   430  007CBC  4E                 	db	78	;'N'
   431  007CBD  43                 	db	67	;'C'
   432  007CBE  45                 	db	69	;'E'
   433  007CBF  4E                 	db	78	;'N'
   434  007CC0  44                 	db	68	;'D'
   435  007CC1  49                 	db	73	;'I'
   436  007CC2  4F                 	db	79	;'O'
   437  007CC3  0D                 	db	13
   438  007CC4  0A                 	db	10
   439  007CC5  45                 	db	69	;'E'
   440  007CC6  4D                 	db	77	;'M'
   441  007CC7  20                 	db	32
   442  007CC8  25                 	db	37
   443  007CC9  30                 	db	48	;'0'
   444  007CCA  32                 	db	50	;'2'
   445  007CCB  64                 	db	100	;'d'
   446  007CCC  3A                 	db	58	;':'
   447  007CCD  25                 	db	37
   448  007CCE  30                 	db	48	;'0'
   449  007CCF  32                 	db	50	;'2'
   450  007CD0  64                 	db	100	;'d'
   451  007CD1  3A                 	db	58	;':'
   452  007CD2  25                 	db	37
   453  007CD3  30                 	db	48	;'0'
   454  007CD4  32                 	db	50	;'2'
   455  007CD5  64                 	db	100	;'d'
   456  007CD6  20                 	db	32
   457  007CD7  25                 	db	37
   458  007CD8  30                 	db	48	;'0'
   459  007CD9  32                 	db	50	;'2'
   460  007CDA  64                 	db	100	;'d'
   461  007CDB  2F                 	db	47
   462  007CDC  25                 	db	37
   463  007CDD  30                 	db	48	;'0'
   464  007CDE  32                 	db	50	;'2'
   465  007CDF  64                 	db	100	;'d'
   466  007CE0  2F                 	db	47
   467  007CE1  25                 	db	37
   468  007CE2  30                 	db	48	;'0'
   469  007CE3  32                 	db	50	;'2'
   470  007CE4  64                 	db	100	;'d'
   471  007CE5  0D                 	db	13
   472  007CE6  0A                 	db	10
   473  007CE7  00                 	db	0
   474  007CE8                     STR_54:
   475  007CE8  20                 	db	32
   476  007CE9  25                 	db	37
   477  007CEA  30                 	db	48	;'0'
   478  007CEB  32                 	db	50	;'2'
   479  007CEC  64                 	db	100	;'d'
   480  007CED  3A                 	db	58	;':'
   481  007CEE  25                 	db	37
   482  007CEF  30                 	db	48	;'0'
   483  007CF0  32                 	db	50	;'2'
   484  007CF1  64                 	db	100	;'d'
   485  007CF2  3A                 	db	58	;':'
   486  007CF3  25                 	db	37
   487  007CF4  30                 	db	48	;'0'
   488  007CF5  32                 	db	50	;'2'
   489  007CF6  64                 	db	100	;'d'
   490  007CF7  20                 	db	32
   491  007CF8  25                 	db	37
   492  007CF9  30                 	db	48	;'0'
   493  007CFA  32                 	db	50	;'2'
   494  007CFB  64                 	db	100	;'d'
   495  007CFC  2F                 	db	47
   496  007CFD  25                 	db	37
   497  007CFE  30                 	db	48	;'0'
   498  007CFF  32                 	db	50	;'2'
   499  007D00  64                 	db	100	;'d'
   500  007D01  2F                 	db	47
   501  007D02  25                 	db	37
   502  007D03  30                 	db	48	;'0'
   503  007D04  32                 	db	50	;'2'
   504  007D05  64                 	db	100	;'d'
   505  007D06  00                 	db	0
   506  007D07                     STR_62:
   507  007D07  44                 	db	68	;'D'
   508  007D08  61                 	db	97	;'a'
   509  007D09  74                 	db	116	;'t'
   510  007D0A  61                 	db	97	;'a'
   511  007D0B  3A                 	db	58	;':'
   512  007D0C  20                 	db	32
   513  007D0D  25                 	db	37
   514  007D0E  30                 	db	48	;'0'
   515  007D0F  32                 	db	50	;'2'
   516  007D10  64                 	db	100	;'d'
   517  007D11  2F                 	db	47
   518  007D12  25                 	db	37
   519  007D13  30                 	db	48	;'0'
   520  007D14  32                 	db	50	;'2'
   521  007D15  64                 	db	100	;'d'
   522  007D16  2F                 	db	47
   523  007D17  25                 	db	37
   524  007D18  30                 	db	48	;'0'
   525  007D19  32                 	db	50	;'2'
   526  007D1A  64                 	db	100	;'d'
   527  007D1B  20                 	db	32
   528  007D1C  25                 	db	37
   529  007D1D  30                 	db	48	;'0'
   530  007D1E  32                 	db	50	;'2'
   531  007D1F  64                 	db	100	;'d'
   532  007D20  3A                 	db	58	;':'
   533  007D21  25                 	db	37
   534  007D22  30                 	db	48	;'0'
   535  007D23  32                 	db	50	;'2'
   536  007D24  64                 	db	100	;'d'
   537  007D25  00                 	db	0
   538  007D26                     STR_59:
   539  007D26  23                 	db	35
   540  007D27  50                 	db	80	;'P'
   541  007D28  72                 	db	114	;'r'
   542  007D29  6F                 	db	111	;'o'
   543  007D2A  78                 	db	120	;'x'
   544  007D2B  69                 	db	105	;'i'
   545  007D2C  6D                 	db	109	;'m'
   546  007D2D  6F                 	db	111	;'o'
   547  007D2E  20                 	db	32
   548  007D2F  65                 	db	101	;'e'
   549  007D30  6D                 	db	109	;'m'
   550  007D31  20                 	db	32
   551  007D32  25                 	db	37
   552  007D33  32                 	db	50	;'2'
   553  007D34  64                 	db	100	;'d'
   554  007D35  20                 	db	32
   555  007D36  64                 	db	100	;'d'
   556  007D37  69                 	db	105	;'i'
   557  007D38  61                 	db	97	;'a'
   558  007D39  73                 	db	115	;'s'
   559  007D3A  00                 	db	0
   560  007D3B                     STR_53:
   561  007D3B  20                 	db	32
   562  007D3C  41                 	db	65	;'A'
   563  007D3D  4C                 	db	76	;'L'
   564  007D3E  45                 	db	69	;'E'
   565  007D3F  52                 	db	82	;'R'
   566  007D40  54                 	db	84	;'T'
   567  007D41  41                 	db	65	;'A'
   568  007D42  20                 	db	32
   569  007D43  44                 	db	68	;'D'
   570  007D44  45                 	db	69	;'E'
   571  007D45  20                 	db	32
   572  007D46  49                 	db	73	;'I'
   573  007D47  4E                 	db	78	;'N'
   574  007D48  43                 	db	67	;'C'
   575  007D49  45                 	db	69	;'E'
   576  007D4A  4E                 	db	78	;'N'
   577  007D4B  44                 	db	68	;'D'
   578  007D4C  49                 	db	73	;'I'
   579  007D4D  4F                 	db	79	;'O'
   580  007D4E  00                 	db	0
   581  007D4F                     STR_38:
   582  007D4F  20                 	db	32
   583  007D50  20                 	db	32
   584  007D51  20                 	db	32
   585  007D52  41                 	db	65	;'A'
   586  007D53  67                 	db	103	;'g'
   587  007D54  75                 	db	117	;'u'
   588  007D55  61                 	db	97	;'a'
   589  007D56  72                 	db	114	;'r'
   590  007D57  64                 	db	100	;'d'
   591  007D58  65                 	db	101	;'e'
   592  007D59  2E                 	db	46
   593  007D5A  2E                 	db	46
   594  007D5B  20                 	db	32
   595  007D5C  25                 	db	37
   596  007D5D  33                 	db	51	;'3'
   597  007D5E  64                 	db	100	;'d'
   598  007D5F  73                 	db	115	;'s'
   599  007D60  65                 	db	101	;'e'
   600  007D61  63                 	db	99	;'c'
   601  007D62  00                 	db	0
   602  007D63                     STR_60:
   603  007D63  49                 	db	73	;'I'
   604  007D64  4E                 	db	78	;'N'
   605  007D65  54                 	db	84	;'T'
   606  007D66  45                 	db	69	;'E'
   607  007D67  52                 	db	82	;'R'
   608  007D68  56                 	db	86	;'V'
   609  007D69  41                 	db	65	;'A'
   610  007D6A  4C                 	db	76	;'L'
   611  007D6B  4F                 	db	79	;'O'
   612  007D6C  3A                 	db	58	;':'
   613  007D6D  20                 	db	32
   614  007D6E  25                 	db	37
   615  007D6F  32                 	db	50	;'2'
   616  007D70  64                 	db	100	;'d'
   617  007D71  20                 	db	32
   618  007D72  64                 	db	100	;'d'
   619  007D73  69                 	db	105	;'i'
   620  007D74  61                 	db	97	;'a'
   621  007D75  73                 	db	115	;'s'
   622  007D76  00                 	db	0
   623  007D77                     STR_61:
   624  007D77  48                 	db	72	;'H'
   625  007D78  4F                 	db	79	;'O'
   626  007D79  52                 	db	82	;'R'
   627  007D7A  41                 	db	65	;'A'
   628  007D7B  52                 	db	82	;'R'
   629  007D7C  49                 	db	73	;'I'
   630  007D7D  4F                 	db	79	;'O'
   631  007D7E  3A                 	db	58	;':'
   632  007D7F  20                 	db	32
   633  007D80  25                 	db	37
   634  007D81  30                 	db	48	;'0'
   635  007D82  32                 	db	50	;'2'
   636  007D83  64                 	db	100	;'d'
   637  007D84  20                 	db	32
   638  007D85  68                 	db	104	;'h'
   639  007D86  6F                 	db	111	;'o'
   640  007D87  72                 	db	114	;'r'
   641  007D88  61                 	db	97	;'a'
   642  007D89  73                 	db	115	;'s'
   643  007D8A  00                 	db	0
   644  007D8B                     STR_74:
   645  007D8B  53                 	db	83	;'S'
   646  007D8C  69                 	db	105	;'i'
   647  007D8D  73                 	db	115	;'s'
   648  007D8E  74                 	db	116	;'t'
   649  007D8F  65                 	db	101	;'e'
   650  007D90  6D                 	db	109	;'m'
   651  007D91  61                 	db	97	;'a'
   652  007D92  73                 	db	115	;'s'
   653  007D93  20                 	db	32
   654  007D94  65                 	db	101	;'e'
   655  007D95  6D                 	db	109	;'m'
   656  007D96  62                 	db	98	;'b'
   657  007D97  61                 	db	97	;'a'
   658  007D98  72                 	db	114	;'r'
   659  007D99  63                 	db	99	;'c'
   660  007D9A  61                 	db	97	;'a'
   661  007D9B  64                 	db	100	;'d'
   662  007D9C  6F                 	db	111	;'o'
   663  007D9D  73                 	db	115	;'s'
   664  007D9E  00                 	db	0
   665  007D9F                     STR_40:
   666  007D9F  20                 	db	32
   667  007DA0  20                 	db	32
   668  007DA1  54                 	db	84	;'T'
   669  007DA2  45                 	db	69	;'E'
   670  007DA3  53                 	db	83	;'S'
   671  007DA4  54                 	db	84	;'T'
   672  007DA5  45                 	db	69	;'E'
   673  007DA6  20                 	db	32
   674  007DA7  43                 	db	67	;'C'
   675  007DA8  4F                 	db	79	;'O'
   676  007DA9  4E                 	db	78	;'N'
   677  007DAA  43                 	db	67	;'C'
   678  007DAB  4C                 	db	76	;'L'
   679  007DAC  55                 	db	85	;'U'
   680  007DAD  49                 	db	73	;'I'
   681  007DAE  44                 	db	68	;'D'
   682  007DAF  4F                 	db	79	;'O'
   683  007DB0  21                 	db	33
   684  007DB1  00                 	db	0
   685  007DB2                     STR_50:
   686  007DB2  2D                 	db	45
   687  007DB3  20                 	db	32
   688  007DB4  45                 	db	69	;'E'
   689  007DB5  52                 	db	82	;'R'
   690  007DB6  52                 	db	82	;'R'
   691  007DB7  4F                 	db	79	;'O'
   692  007DB8  20                 	db	32
   693  007DB9  20                 	db	32
   694  007DBA  54                 	db	84	;'T'
   695  007DBB  52                 	db	82	;'R'
   696  007DBC  41                 	db	65	;'A'
   697  007DBD  4E                 	db	78	;'N'
   698  007DBE  53                 	db	83	;'S'
   699  007DBF  44                 	db	68	;'D'
   700  007DC0  55                 	db	85	;'U'
   701  007DC1  54                 	db	84	;'T'
   702  007DC2  4F                 	db	79	;'O'
   703  007DC3  52                 	db	82	;'R'
   704  007DC4  00                 	db	0
   705  007DC5                     STR_88:
   706  007DC5  23                 	db	35
   707  007DC6  68                 	db	104	;'h'
   708  007DC7  6F                 	db	111	;'o'
   709  007DC8  72                 	db	114	;'r'
   710  007DC9  69                 	db	105	;'i'
   711  007DCA  6D                 	db	109	;'m'
   712  007DCB  65                 	db	101	;'e'
   713  007DCC  74                 	db	116	;'t'
   714  007DCD  72                 	db	114	;'r'
   715  007DCE  6F                 	db	111	;'o'
   716  007DCF  3A                 	db	58	;':'
   717  007DD0  25                 	db	37
   718  007DD1  35                 	db	53	;'5'
   719  007DD2  64                 	db	100	;'d'
   720  007DD3  20                 	db	32
   721  007DD4  6D                 	db	109	;'m'
   722  007DD5  69                 	db	105	;'i'
   723  007DD6  6E                 	db	110	;'n'
   724  007DD7  00                 	db	0
   725  007DD8                     STR_83:
   726  007DD8  43                 	db	67	;'C'
   727  007DD9  6F                 	db	111	;'o'
   728  007DDA  6E                 	db	110	;'n'
   729  007DDB  66                 	db	102	;'f'
   730  007DDC  69                 	db	105	;'i'
   731  007DDD  67                 	db	103	;'g'
   732  007DDE  75                 	db	117	;'u'
   733  007DDF  72                 	db	114	;'r'
   734  007DE0  61                 	db	97	;'a'
   735  007DE1  63                 	db	99	;'c'
   736  007DE2  61                 	db	97	;'a'
   737  007DE3  6F                 	db	111	;'o'
   738  007DE4  20                 	db	32
   739  007DE5  74                 	db	116	;'t'
   740  007DE6  65                 	db	101	;'e'
   741  007DE7  6D                 	db	109	;'m'
   742  007DE8  70                 	db	112	;'p'
   743  007DE9  6F                 	db	111	;'o'
   744  007DEA  00                 	db	0
   745  007DEB                     STR_52:
   746  007DEB  50                 	db	80	;'P'
   747  007DEC  72                 	db	114	;'r'
   748  007DED  65                 	db	101	;'e'
   749  007DEE  73                 	db	115	;'s'
   750  007DEF  73                 	db	115	;'s'
   751  007DF0  20                 	db	32
   752  007DF1  45                 	db	69	;'E'
   753  007DF2  53                 	db	83	;'S'
   754  007DF3  43                 	db	67	;'C'
   755  007DF4  20                 	db	32
   756  007DF5  70                 	db	112	;'p'
   757  007DF6  2F                 	db	47
   758  007DF7  20                 	db	32
   759  007DF8  52                 	db	82	;'R'
   760  007DF9  65                 	db	101	;'e'
   761  007DFA  73                 	db	115	;'s'
   762  007DFB  65                 	db	101	;'e'
   763  007DFC  74                 	db	116	;'t'
   764  007DFD  00                 	db	0
   765  007DFE                     STR_10:
   766  007DFE  41                 	db	65	;'A'
   767  007DFF  54                 	db	84	;'T'
   768  007E00  2B                 	db	43
   769  007E01  43                 	db	67	;'C'
   770  007E02  4D                 	db	77	;'M'
   771  007E03  47                 	db	71	;'G'
   772  007E04  53                 	db	83	;'S'
   773  007E05  3D                 	db	61	;'='
   774  007E06  22                 	db	34
   775  007E07  2B                 	db	43
   776  007E08  35                 	db	53	;'5'
   777  007E09  35                 	db	53	;'5'
   778  007E0A  25                 	db	37
   779  007E0B  73                 	db	115	;'s'
   780  007E0C  22                 	db	34
   781  007E0D  0D                 	db	13
   782  007E0E  0A                 	db	10
   783  007E0F  00                 	db	0
   784  007E10                     STR_99:
   785  007E10  50                 	db	80	;'P'
   786  007E11  41                 	db	65	;'A'
   787  007E12  52                 	db	82	;'R'
   788  007E13  54                 	db	84	;'T'
   789  007E14  49                 	db	73	;'I'
   790  007E15  44                 	db	68	;'D'
   791  007E16  41                 	db	65	;'A'
   792  007E17  20                 	db	32
   793  007E18  43                 	db	67	;'C'
   794  007E19  4F                 	db	79	;'O'
   795  007E1A  4D                 	db	77	;'M'
   796  007E1B  42                 	db	66	;'B'
   797  007E1C  55                 	db	85	;'U'
   798  007E1D  53                 	db	83	;'S'
   799  007E1E  54                 	db	84	;'T'
   800  007E1F  41                 	db	65	;'A'
   801  007E20  4F                 	db	79	;'O'
   802  007E21  00                 	db	0
   803  007E22                     STR_101:
   804  007E22  50                 	db	80	;'P'
   805  007E23  45                 	db	69	;'E'
   806  007E24  52                 	db	82	;'R'
   807  007E25  49                 	db	73	;'I'
   808  007E26  4F                 	db	79	;'O'
   809  007E27  44                 	db	68	;'D'
   810  007E28  4F                 	db	79	;'O'
   811  007E29  20                 	db	32
   812  007E2A  44                 	db	68	;'D'
   813  007E2B  45                 	db	69	;'E'
   814  007E2C  20                 	db	32
   815  007E2D  54                 	db	84	;'T'
   816  007E2E  45                 	db	69	;'E'
   817  007E2F  53                 	db	83	;'S'
   818  007E30  54                 	db	84	;'T'
   819  007E31  45                 	db	69	;'E'
   820  007E32  53                 	db	83	;'S'
   821  007E33  00                 	db	0
   822  007E34                     STR_75:
   823  007E34  20                 	db	32
   824  007E35  20                 	db	32
   825  007E36  20                 	db	32
   826  007E37  34                 	db	52	;'4'
   827  007E38  38                 	db	56	;'8'
   828  007E39  20                 	db	32
   829  007E3A  39                 	db	57	;'9'
   830  007E3B  39                 	db	57	;'9'
   831  007E3C  39                 	db	57	;'9'
   832  007E3D  30                 	db	48	;'0'
   833  007E3E  36                 	db	54	;'6'
   834  007E3F  2D                 	db	45
   835  007E40  35                 	db	53	;'5'
   836  007E41  36                 	db	54	;'6'
   837  007E42  35                 	db	53	;'5'
   838  007E43  31                 	db	49	;'1'
   839  007E44  00                 	db	0
   840  007E45                     STR_82:
   841  007E45  45                 	db	69	;'E'
   842  007E46  6E                 	db	110	;'n'
   843  007E47  76                 	db	118	;'v'
   844  007E48  69                 	db	105	;'i'
   845  007E49  61                 	db	97	;'a'
   846  007E4A  72                 	db	114	;'r'
   847  007E4B  20                 	db	32
   848  007E4C  73                 	db	115	;'s'
   849  007E4D  6D                 	db	109	;'m'
   850  007E4E  73                 	db	115	;'s'
   851  007E4F  20                 	db	32
   852  007E50  74                 	db	116	;'t'
   853  007E51  65                 	db	101	;'e'
   854  007E52  73                 	db	115	;'s'
   855  007E53  74                 	db	116	;'t'
   856  007E54  65                 	db	101	;'e'
   857  007E55  00                 	db	0
   858  007E56                     STR_98:
   859  007E56  50                 	db	80	;'P'
   860  007E57  52                 	db	82	;'R'
   861  007E58  45                 	db	69	;'E'
   862  007E59  53                 	db	83	;'S'
   863  007E5A  53                 	db	83	;'S'
   864  007E5B  41                 	db	65	;'A'
   865  007E5C  4F                 	db	79	;'O'
   866  007E5D  20                 	db	32
   867  007E5E  44                 	db	68	;'D'
   868  007E5F  41                 	db	65	;'A'
   869  007E60  20                 	db	32
   870  007E61  52                 	db	82	;'R'
   871  007E62  45                 	db	69	;'E'
   872  007E63  44                 	db	68	;'D'
   873  007E64  45                 	db	69	;'E'
   874  007E65  00                 	db	0
   875  007E66                     STR_39:
   876  007E66  20                 	db	32
   877  007E67  50                 	db	80	;'P'
   878  007E68  72                 	db	114	;'r'
   879  007E69  65                 	db	101	;'e'
   880  007E6A  73                 	db	115	;'s'
   881  007E6B  73                 	db	115	;'s'
   882  007E6C  61                 	db	97	;'a'
   883  007E6D  6F                 	db	111	;'o'
   884  007E6E  20                 	db	32
   885  007E6F  25                 	db	37
   886  007E70  73                 	db	115	;'s'
   887  007E71  20                 	db	32
   888  007E72  62                 	db	98	;'b'
   889  007E73  61                 	db	97	;'a'
   890  007E74  72                 	db	114	;'r'
   891  007E75  00                 	db	0
   892  007E76                     STR_44:
   893  007E76  20                 	db	32
   894  007E77  50                 	db	80	;'P'
   895  007E78  52                 	db	82	;'R'
   896  007E79  49                 	db	73	;'I'
   897  007E7A  4E                 	db	78	;'N'
   898  007E7B  43                 	db	67	;'C'
   899  007E7C  49                 	db	73	;'I'
   900  007E7D  50                 	db	80	;'P'
   901  007E7E  41                 	db	65	;'A'
   902  007E7F  4C                 	db	76	;'L'
   903  007E80  20                 	db	32
   904  007E81  3A                 	db	58	;':'
   905  007E82  20                 	db	32
   906  007E83  25                 	db	37
   907  007E84  73                 	db	115	;'s'
   908  007E85  00                 	db	0
   909  007E86                     STR_47:
   910  007E86  20                 	db	32
   911  007E87  43                 	db	67	;'C'
   912  007E88  4F                 	db	79	;'O'
   913  007E89  4D                 	db	77	;'M'
   914  007E8A  42                 	db	66	;'B'
   915  007E8B  55                 	db	85	;'U'
   916  007E8C  53                 	db	83	;'S'
   917  007E8D  54                 	db	84	;'T'
   918  007E8E  41                 	db	65	;'A'
   919  007E8F  4F                 	db	79	;'O'
   920  007E90  20                 	db	32
   921  007E91  3A                 	db	58	;':'
   922  007E92  20                 	db	32
   923  007E93  25                 	db	37
   924  007E94  73                 	db	115	;'s'
   925  007E95  00                 	db	0
   926  007E96                     STR_58:
   927  007E96  25                 	db	37
   928  007E97  30                 	db	48	;'0'
   929  007E98  32                 	db	50	;'2'
   930  007E99  64                 	db	100	;'d'
   931  007E9A  3A                 	db	58	;':'
   932  007E9B  25                 	db	37
   933  007E9C  30                 	db	48	;'0'
   934  007E9D  32                 	db	50	;'2'
   935  007E9E  64                 	db	100	;'d'
   936  007E9F  3A                 	db	58	;':'
   937  007EA0  25                 	db	37
   938  007EA1  30                 	db	48	;'0'
   939  007EA2  32                 	db	50	;'2'
   940  007EA3  64                 	db	100	;'d'
   941  007EA4  00                 	db	0
   942  007EA5                     STR_104:
   943  007EA5  49                 	db	73	;'I'
   944  007EA6  6E                 	db	110	;'n'
   945  007EA7  69                 	db	105	;'i'
   946  007EA8  63                 	db	99	;'c'
   947  007EA9  69                 	db	105	;'i'
   948  007EAA  61                 	db	97	;'a'
   949  007EAB  72                 	db	114	;'r'
   950  007EAC  20                 	db	32
   951  007EAD  54                 	db	84	;'T'
   952  007EAE  65                 	db	101	;'e'
   953  007EAF  73                 	db	115	;'s'
   954  007EB0  74                 	db	116	;'t'
   955  007EB1  65                 	db	101	;'e'
   956  007EB2  73                 	db	115	;'s'
   957  007EB3  00                 	db	0
   958  007EB4                     STR_84:
   959  007EB4  4D                 	db	77	;'M'
   960  007EB5  61                 	db	97	;'a'
   961  007EB6  78                 	db	120	;'x'
   962  007EB7  2E                 	db	46
   963  007EB8  20                 	db	32
   964  007EB9  50                 	db	80	;'P'
   965  007EBA  41                 	db	65	;'A'
   966  007EBB  52                 	db	82	;'R'
   967  007EBC  54                 	db	84	;'T'
   968  007EBD  49                 	db	73	;'I'
   969  007EBE  44                 	db	68	;'D'
   970  007EBF  41                 	db	65	;'A'
   971  007EC0  3A                 	db	58	;':'
   972  007EC1  00                 	db	0
   973  007EC2                     STR_67:
   974  007EC2  50                 	db	80	;'P'
   975  007EC3  72                 	db	114	;'r'
   976  007EC4  69                 	db	105	;'i'
   977  007EC5  6E                 	db	110	;'n'
   978  007EC6  63                 	db	99	;'c'
   979  007EC7  69                 	db	105	;'i'
   980  007EC8  70                 	db	112	;'p'
   981  007EC9  61                 	db	97	;'a'
   982  007ECA  6C                 	db	108	;'l'
   983  007ECB  3A                 	db	58	;':'
   984  007ECC  20                 	db	32
   985  007ECD  25                 	db	37
   986  007ECE  73                 	db	115	;'s'
   987  007ECF  00                 	db	0
   988  007ED0                     STR_70:
   989  007ED0  43                 	db	67	;'C'
   990  007ED1  6F                 	db	111	;'o'
   991  007ED2  6D                 	db	109	;'m'
   992  007ED3  62                 	db	98	;'b'
   993  007ED4  75                 	db	117	;'u'
   994  007ED5  73                 	db	115	;'s'
   995  007ED6  74                 	db	116	;'t'
   996  007ED7  61                 	db	97	;'a'
   997  007ED8  6F                 	db	111	;'o'
   998  007ED9  3A                 	db	58	;':'
   999  007EDA  20                 	db	32
  1000  007EDB  25                 	db	37
  1001  007EDC  73                 	db	115	;'s'
  1002  007EDD  00                 	db	0
  1003  007EDE                     STR_81:
  1004  007EDE  65                 	db	101	;'e'
  1005  007EDF  6E                 	db	110	;'n'
  1006  007EE0  76                 	db	118	;'v'
  1007  007EE1  69                 	db	105	;'i'
  1008  007EE2  61                 	db	97	;'a'
  1009  007EE3  6E                 	db	110	;'n'
  1010  007EE4  64                 	db	100	;'d'
  1011  007EE5  6F                 	db	111	;'o'
  1012  007EE6  2E                 	db	46
  1013  007EE7  2E                 	db	46
  1014  007EE8  2E                 	db	46
  1015  007EE9  20                 	db	32
  1016  007EEA  00                 	db	0
  1017  007EEB                     STR_8:
  1018  007EEB  41                 	db	65	;'A'
  1019  007EEC  54                 	db	84	;'T'
  1020  007EED  2B                 	db	43
  1021  007EEE  43                 	db	67	;'C'
  1022  007EEF  4D                 	db	77	;'M'
  1023  007EF0  47                 	db	71	;'G'
  1024  007EF1  46                 	db	70	;'F'
  1025  007EF2  3D                 	db	61	;'='
  1026  007EF3  31                 	db	49	;'1'
  1027  007EF4  0D                 	db	13
  1028  007EF5  0A                 	db	10
  1029  007EF6  00                 	db	0
  1030  007EF7                     STR_77:
  1031  007EF7  41                 	db	65	;'A'
  1032  007EF8  75                 	db	117	;'u'
  1033  007EF9  67                 	db	103	;'g'
  1034  007EFA  20                 	db	32
  1035  007EFB  30                 	db	48	;'0'
  1036  007EFC  34                 	db	52	;'4'
  1037  007EFD  20                 	db	32
  1038  007EFE  32                 	db	50	;'2'
  1039  007EFF  30                 	db	48	;'0'
  1040  007F00  31                 	db	49	;'1'
  1041  007F01  39                 	db	57	;'9'
  1042  007F02  00                 	db	0
  1043  007F03                     STR_86:
  1044  007F03  4D                 	db	77	;'M'
  1045  007F04  61                 	db	97	;'a'
  1046  007F05  78                 	db	120	;'x'
  1047  007F06  2E                 	db	46
  1048  007F07  20                 	db	32
  1049  007F08  54                 	db	84	;'T'
  1050  007F09  45                 	db	69	;'E'
  1051  007F0A  53                 	db	83	;'S'
  1052  007F0B  54                 	db	84	;'T'
  1053  007F0C  45                 	db	69	;'E'
  1054  007F0D  3A                 	db	58	;':'
  1055  007F0E  00                 	db	0
  1056  007F0F                     STR_103:
  1057  007F0F  49                 	db	73	;'I'
  1058  007F10  4E                 	db	78	;'N'
  1059  007F11  46                 	db	70	;'F'
  1060  007F12  4F                 	db	79	;'O'
  1061  007F13  20                 	db	32
  1062  007F14  56                 	db	86	;'V'
  1063  007F15  45                 	db	69	;'E'
  1064  007F16  52                 	db	82	;'R'
  1065  007F17  53                 	db	83	;'S'
  1066  007F18  41                 	db	65	;'A'
  1067  007F19  4F                 	db	79	;'O'
  1068  007F1A  00                 	db	0
  1069  007F1B                     STR_76:
  1070  007F1B  76                 	db	118	;'v'
  1071  007F1C  65                 	db	101	;'e'
  1072  007F1D  72                 	db	114	;'r'
  1073  007F1E  73                 	db	115	;'s'
  1074  007F1F  61                 	db	97	;'a'
  1075  007F20  6F                 	db	111	;'o'
  1076  007F21  20                 	db	32
  1077  007F22  2D                 	db	45
  1078  007F23  20                 	db	32
  1079  007F24  25                 	db	37
  1080  007F25  73                 	db	115	;'s'
  1081  007F26  00                 	db	0
  1082  007F27                     STR_41:
  1083  007F27  20                 	db	32
  1084  007F28  4A                 	db	74	;'J'
  1085  007F29  4F                 	db	79	;'O'
  1086  007F2A  4B                 	db	75	;'K'
  1087  007F2B  45                 	db	69	;'E'
  1088  007F2C  59                 	db	89	;'Y'
  1089  007F2D  20                 	db	32
  1090  007F2E  3A                 	db	58	;':'
  1091  007F2F  20                 	db	32
  1092  007F30  25                 	db	37
  1093  007F31  73                 	db	115	;'s'
  1094  007F32  00                 	db	0
  1095  007F33  41                 	db	65	;'A'
  1096  007F34  54                 	db	84	;'T'
  1097  007F35  44                 	db	68	;'D'
  1098  007F36  20                 	db	32
  1099  007F37  30                 	db	48	;'0'
  1100  007F38  25                 	db	37
  1101  007F39  73                 	db	115	;'s'
  1102  007F3A  3B                 	db	59	;';'
  1103  007F3B  0D                 	db	13
  1104  007F3C  0A                 	db	10
  1105  007F3D  00                 	db	0
  1106  007F3E  74                 	db	116	;'t'
  1107  007F3F  65                 	db	101	;'e'
  1108  007F40  74                 	db	116	;'t'
  1109  007F41  61                 	db	97	;'a'
  1110  007F42  70                 	db	112	;'p'
  1111  007F43  61                 	db	97	;'a'
  1112  007F44  20                 	db	32
  1113  007F45  25                 	db	37
  1114  007F46  64                 	db	100	;'d'
  1115  007F47  20                 	db	32
  1116  007F48  00                 	db	0
  1117  007F49                     STR_66:
  1118  007F49  23                 	db	35
  1119  007F4A  25                 	db	37
  1120  007F4B  30                 	db	48	;'0'
  1121  007F4C  32                 	db	50	;'2'
  1122  007F4D  64                 	db	100	;'d'
  1123  007F4E  2F                 	db	47
  1124  007F4F  25                 	db	37
  1125  007F50  30                 	db	48	;'0'
  1126  007F51  32                 	db	50	;'2'
  1127  007F52  64                 	db	100	;'d'
  1128  007F53  00                 	db	0
  1129  007F54                     STR_89:
  1130  007F54  47                 	db	71	;'G'
  1131  007F55  45                 	db	69	;'E'
  1132  007F56  52                 	db	82	;'R'
  1133  007F57  41                 	db	65	;'A'
  1134  007F58  4C                 	db	76	;'L'
  1135  007F59  20                 	db	32
  1136  007F5A  3A                 	db	58	;':'
  1137  007F5B  20                 	db	32
  1138  007F5C  25                 	db	37
  1139  007F5D  73                 	db	115	;'s'
  1140  007F5E  00                 	db	0
  1141  007F5F                     STR_97:
  1142  007F5F  44                 	db	68	;'D'
  1143  007F60  41                 	db	65	;'A'
  1144  007F61  54                 	db	84	;'T'
  1145  007F62  41                 	db	65	;'A'
  1146  007F63  2F                 	db	47
  1147  007F64  48                 	db	72	;'H'
  1148  007F65  4F                 	db	79	;'O'
  1149  007F66  52                 	db	82	;'R'
  1150  007F67  41                 	db	65	;'A'
  1151  007F68  00                 	db	0
  1152  007F69                     STR_102:
  1153  007F69  44                 	db	68	;'D'
  1154  007F6A  41                 	db	65	;'A'
  1155  007F6B  54                 	db	84	;'T'
  1156  007F6C  41                 	db	65	;'A'
  1157  007F6D  4C                 	db	76	;'L'
  1158  007F6E  4F                 	db	79	;'O'
  1159  007F6F  47                 	db	71	;'G'
  1160  007F70  45                 	db	69	;'E'
  1161  007F71  52                 	db	82	;'R'
  1162  007F72  00                 	db	0
  1163  007F73                     STR_100:
  1164  007F73  54                 	db	84	;'T'
  1165  007F74  45                 	db	69	;'E'
  1166  007F75  4C                 	db	76	;'L'
  1167  007F76  45                 	db	69	;'E'
  1168  007F77  46                 	db	70	;'F'
  1169  007F78  4F                 	db	79	;'O'
  1170  007F79  4E                 	db	78	;'N'
  1171  007F7A  45                 	db	69	;'E'
  1172  007F7B  53                 	db	83	;'S'
  1173  007F7C  00                 	db	0
  1174  007F7D  74                 	db	116	;'t'
  1175  007F7E  73                 	db	115	;'s'
  1176  007F7F  69                 	db	105	;'i'
  1177  007F80  6E                 	db	110	;'n'
  1178  007F81  61                 	db	97	;'a'
  1179  007F82  6C                 	db	108	;'l'
  1180  007F83  20                 	db	32
  1181  007F84  25                 	db	37
  1182  007F85  64                 	db	100	;'d'
  1183  007F86  00                 	db	0
  1184  007F87                     STR_63:
  1185  007F87  4A                 	db	74	;'J'
  1186  007F88  6F                 	db	111	;'o'
  1187  007F89  6B                 	db	107	;'k'
  1188  007F8A  65                 	db	101	;'e'
  1189  007F8B  79                 	db	121	;'y'
  1190  007F8C  3A                 	db	58	;':'
  1191  007F8D  20                 	db	32
  1192  007F8E  25                 	db	37
  1193  007F8F  73                 	db	115	;'s'
  1194  007F90  00                 	db	0
  1195  007F91                     STR_3:
  1196  007F91  41                 	db	65	;'A'
  1197  007F92  54                 	db	84	;'T'
  1198  007F93  2B                 	db	43
  1199  007F94  43                 	db	67	;'C'
  1200  007F95  53                 	db	83	;'S'
  1201  007F96  51                 	db	81	;'Q'
  1202  007F97  0D                 	db	13
  1203  007F98  0A                 	db	10
  1204  007F99  00                 	db	0
  1205  007F9A  65                 	db	101	;'e'
  1206  007F9B  74                 	db	116	;'t'
  1207  007F9C  61                 	db	97	;'a'
  1208  007F9D  70                 	db	112	;'p'
  1209  007F9E  61                 	db	97	;'a'
  1210  007F9F  20                 	db	32
  1211  007FA0  25                 	db	37
  1212  007FA1  64                 	db	100	;'d'
  1213  007FA2  00                 	db	0
  1214  007FA3                     STR_73:
  1215  007FA3  54                 	db	84	;'T'
  1216  007FA4  45                 	db	69	;'E'
  1217  007FA5  43                 	db	67	;'C'
  1218  007FA6  48                 	db	72	;'H'
  1219  007FA7  4E                 	db	78	;'N'
  1220  007FA8  4F                 	db	79	;'O'
  1221  007FA9  57                 	db	87	;'W'
  1222  007FAA  00                 	db	0
  1223  007FAB                     STR_105:
  1224  007FAB  28                 	db	40
  1225  007FAC  6E                 	db	110	;'n'
  1226  007FAD  75                 	db	117	;'u'
  1227  007FAE  6C                 	db	108	;'l'
  1228  007FAF  6C                 	db	108	;'l'
  1229  007FB0  29                 	db	41
  1230  007FB1  00                 	db	0
  1231  007FB2                     STR_23:
  1232  007FB2  41                 	db	65	;'A'
  1233  007FB3  54                 	db	84	;'T'
  1234  007FB4  48                 	db	72	;'H'
  1235  007FB5  30                 	db	48	;'0'
  1236  007FB6  0D                 	db	13
  1237  007FB7  0A                 	db	10
  1238  007FB8  00                 	db	0
  1239  007FB9                     STR_4:
  1240  007FB9  2B                 	db	43
  1241  007FBA  43                 	db	67	;'C'
  1242  007FBB  53                 	db	83	;'S'
  1243  007FBC  51                 	db	81	;'Q'
  1244  007FBD  3A                 	db	58	;':'
  1245  007FBE  20                 	db	32
  1246  007FBF  00                 	db	0
  1247  007FC0                     STR_78:
  1248  007FC0  54                 	db	84	;'T'
  1249  007FC1  31                 	db	49	;'1'
  1250  007FC2  3A                 	db	58	;':'
  1251  007FC3  20                 	db	32
  1252  007FC4  25                 	db	37
  1253  007FC5  73                 	db	115	;'s'
  1254  007FC6  00                 	db	0
  1255  007FC7                     STR_79:
  1256  007FC7  54                 	db	84	;'T'
  1257  007FC8  32                 	db	50	;'2'
  1258  007FC9  3A                 	db	58	;':'
  1259  007FCA  20                 	db	32
  1260  007FCB  25                 	db	37
  1261  007FCC  73                 	db	115	;'s'
  1262  007FCD  00                 	db	0
  1263  007FCE                     STR_57:
  1264  007FCE  48                 	db	72	;'H'
  1265  007FCF  4F                 	db	79	;'O'
  1266  007FD0  52                 	db	82	;'R'
  1267  007FD1  41                 	db	65	;'A'
  1268  007FD2  3A                 	db	58	;':'
  1269  007FD3  00                 	db	0
  1270  007FD4                     STR_55:
  1271  007FD4  44                 	db	68	;'D'
  1272  007FD5  41                 	db	65	;'A'
  1273  007FD6  54                 	db	84	;'T'
  1274  007FD7  41                 	db	65	;'A'
  1275  007FD8  3A                 	db	58	;':'
  1276  007FD9  00                 	db	0
  1277  007FDA                     STR_14:
  1278  007FDA  46                 	db	70	;'F'
  1279  007FDB  41                 	db	65	;'A'
  1280  007FDC  4C                 	db	76	;'L'
  1281  007FDD  48                 	db	72	;'H'
  1282  007FDE  41                 	db	65	;'A'
  1283  007FDF  00                 	db	0
  1284  007FE0                     STR_20:
  1285  007FE0  45                 	db	69	;'E'
  1286  007FE1  52                 	db	82	;'R'
  1287  007FE2  52                 	db	82	;'R'
  1288  007FE3  4F                 	db	79	;'O'
  1289  007FE4  52                 	db	82	;'R'
  1290  007FE5  00                 	db	0
  1291  007FE6                     STR_6:
  1292  007FE6  41                 	db	65	;'A'
  1293  007FE7  54                 	db	84	;'T'
  1294  007FE8  0D                 	db	13
  1295  007FE9  0A                 	db	10
  1296  007FEA  00                 	db	0
  1297  007FEB                     STR_43:
  1298  007FEB  45                 	db	69	;'E'
  1299  007FEC  52                 	db	82	;'R'
  1300  007FED  52                 	db	82	;'R'
  1301  007FEE  4F                 	db	79	;'O'
  1302  007FEF  00                 	db	0
  1303  007FF0                     STR_1:
  1304  007FF0  25                 	db	37
  1305  007FF1  73                 	db	115	;'s'
  1306  007FF2  25                 	db	37
  1307  007FF3  63                 	db	99	;'c'
  1308  007FF4  00                 	db	0
  1309  007FF5                     STR_85:
  1310  007FF5  25                 	db	37
  1311  007FF6  33                 	db	51	;'3'
  1312  007FF7  64                 	db	100	;'d'
  1313  007FF8  73                 	db	115	;'s'
  1314  007FF9  00                 	db	0
  1315  007FFA                     STR_7:
  1316  007FFA  4F                 	db	79	;'O'
  1317  007FFB  4B                 	db	75	;'K'
  1318  007FFC  00                 	db	0
  1319  007FFD                     STR_11:
  1320  007FFD  3E                 	db	62	;'>'
  1321  007FFE  00                 	db	0
  1322  0000                     
  1323                           ; #config settings
  1324  007FFF  00                 	db	0	; dummy byte at the end
  1325  0000                     
  1326                           	psect	cinit
  1327  0039D0                     __pcinit:
  1328                           	opt stack 0
  1329  0039D0                     start_initialization:
  1330                           	opt stack 0
  1331  0039D0                     __initialization:
  1332                           	opt stack 0
  1333                           
  1334                           ; Initialize objects allocated to BANK1 (4 bytes)
  1335                           ; load TBLPTR registers with __pidataBANK1
  1336  0039D0  0EE5               	movlw	low __pidataBANK1
  1337  0039D2  6EF6               	movwf	tblptrl,c
  1338  0039D4  0E74               	movlw	high __pidataBANK1
  1339  0039D6  6EF7               	movwf	tblptrh,c
  1340  0039D8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1341  0039DA  6EF8               	movwf	tblptru,c
  1342  0039DC  EE01  F0D0         	lfsr	0,__pdataBANK1
  1343  0039E0  EE10 F004          	lfsr	1,4
  1344  0039E4                     copy_data0:
  1345  0039E4  0009               	tblrd		*+
  1346  0039E6  CFF5 FFEE          	movff	tablat,postinc0
  1347  0039EA  50E5               	movf	postdec1,w,c
  1348  0039EC  50E1               	movf	fsr1l,w,c
  1349  0039EE  E1FA               	bnz	copy_data0
  1350                           
  1351                           ; Initialize objects allocated to BANK0 (9 bytes)
  1352                           ; load TBLPTR registers with __pidataBANK0
  1353  0039F0  0EE9               	movlw	low __pidataBANK0
  1354  0039F2  6EF6               	movwf	tblptrl,c
  1355  0039F4  0E74               	movlw	high __pidataBANK0
  1356  0039F6  6EF7               	movwf	tblptrh,c
  1357  0039F8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1358  0039FA  6EF8               	movwf	tblptru,c
  1359  0039FC  EE00  F0F7         	lfsr	0,__pdataBANK0
  1360  003A00  EE10 F009          	lfsr	1,9
  1361  003A04                     copy_data1:
  1362  003A04  0009               	tblrd		*+
  1363  003A06  CFF5 FFEE          	movff	tablat,postinc0
  1364  003A0A  50E5               	movf	postdec1,w,c
  1365  003A0C  50E1               	movf	fsr1l,w,c
  1366  003A0E  E1FA               	bnz	copy_data1
  1367                           
  1368                           ; Initialize objects allocated to COMRAM (2 bytes)
  1369                           ; load TBLPTR registers with __pidataCOMRAM
  1370  003A10  0EFE               	movlw	low __pidataCOMRAM
  1371  003A12  6EF6               	movwf	tblptrl,c
  1372  003A14  0E3F               	movlw	high __pidataCOMRAM
  1373  003A16  6EF7               	movwf	tblptrh,c
  1374  003A18  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1375  003A1A  6EF8               	movwf	tblptru,c
  1376  003A1C  0009               	tblrd		*+	;fetch initializer
  1377  003A1E  CFF5 F07A          	movff	tablat,__pdataCOMRAM
  1378  003A22  0009               	tblrd		*+	;fetch initializer
  1379  003A24  CFF5 F07B          	movff	tablat,__pdataCOMRAM+1
  1380                           
  1381                           ; Clear objects allocated to BANK1 (208 bytes)
  1382  003A28  EE01  F000         	lfsr	0,__pbssBANK1
  1383  003A2C  0ED0               	movlw	208
  1384  003A2E                     clear_0:
  1385  003A2E  6AEE               	clrf	postinc0,c
  1386  003A30  06E8               	decf	wreg,f,c
  1387  003A32  E1FD               	bnz	clear_0
  1388                           
  1389                           ; Clear objects allocated to BANK0 (35 bytes)
  1390  003A34  EE00  F0D4         	lfsr	0,__pbssBANK0
  1391  003A38  0E23               	movlw	35
  1392  003A3A                     clear_1:
  1393  003A3A  6AEE               	clrf	postinc0,c
  1394  003A3C  06E8               	decf	wreg,f,c
  1395  003A3E  E1FD               	bnz	clear_1
  1396                           
  1397                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1398  003A40  6A79               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1399                           
  1400                           ; Clear objects allocated to COMRAM (53 bytes)
  1401  003A42  EE00  F044         	lfsr	0,__pbssCOMRAM
  1402  003A46  0E35               	movlw	53
  1403  003A48                     clear_2:
  1404  003A48  6AEE               	clrf	postinc0,c
  1405  003A4A  06E8               	decf	wreg,f,c
  1406  003A4C  E1FD               	bnz	clear_2
  1407  003A4E                     end_of_initialization:
  1408                           	opt stack 0
  1409  003A4E                     __end_of__initialization:
  1410                           	opt stack 0
  1411  003A4E  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1412  003A50  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1413  003A52  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1414  003A54  6EF8               	movwf	tblptru,c
  1415  003A56  0100               	movlb	0
  1416  003A58  EF90  F004         	goto	_main	;jump to C main() function
  1417                           tblptru	equ	0xFF8
  1418                           tblptrh	equ	0xFF7
  1419                           tblptrl	equ	0xFF6
  1420                           tablat	equ	0xFF5
  1421                           postinc0	equ	0xFEE
  1422                           wreg	equ	0xFE8
  1423                           postdec1	equ	0xFE5
  1424                           fsr1l	equ	0xFE1
  1425                           
  1426                           	psect	bitbssCOMRAM
  1427  0003C8                     __pbitbssCOMRAM:
  1428                           	opt stack 0
  1429  0003C8                     _blinkk:
  1430                           	opt stack 0
  1431  0003C8                     	ds	1
  1432  0003C9                     _ajst_rtc:
  1433                           	opt stack 0
  1434  0003C9                     	ds	1
  1435                           tblptru	equ	0xFF8
  1436                           tblptrh	equ	0xFF7
  1437                           tblptrl	equ	0xFF6
  1438                           tablat	equ	0xFF5
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postdec1	equ	0xFE5
  1442                           fsr1l	equ	0xFE1
  1443                           
  1444                           	psect	bssCOMRAM
  1445  000044                     __pbssCOMRAM:
  1446                           	opt stack 0
  1447  000044                     _shift:
  1448                           	opt stack 0
  1449  000044                     	ds	8
  1450  00004C                     __tensao:
  1451                           	opt stack 0
  1452  00004C                     	ds	3
  1453  00004F                     _horimetro:
  1454                           	opt stack 0
  1455  00004F                     	ds	2
  1456  000051                     _etapaComunicacao:
  1457                           	opt stack 0
  1458  000051                     	ds	2
  1459  000053                     _dtl_carregar_log:
  1460                           	opt stack 0
  1461  000053                     	ds	1
  1462  000054                     _dtl_estacionaria:
  1463                           	opt stack 0
  1464  000054                     	ds	1
  1465  000055                     _dtl_principal:
  1466                           	opt stack 0
  1467  000055                     	ds	1
  1468  000056                     _dtl_jockey:
  1469                           	opt stack 0
  1470  000056                     	ds	1
  1471  000057                     _dtl_min:
  1472                           	opt stack 0
  1473  000057                     	ds	1
  1474  000058                     _dtl_hora:
  1475                           	opt stack 0
  1476  000058                     	ds	1
  1477  000059                     _dtl_ano:
  1478                           	opt stack 0
  1479  000059                     	ds	1
  1480  00005A                     _dtl_mes:
  1481                           	opt stack 0
  1482  00005A                     	ds	1
  1483  00005B                     _dtl_dia:
  1484                           	opt stack 0
  1485  00005B                     	ds	1
  1486  00005C                     __b_ok:
  1487                           	opt stack 0
  1488  00005C                     	ds	1
  1489  00005D                     _flag_b_ok:
  1490                           	opt stack 0
  1491  00005D                     	ds	1
  1492  00005E                     __b_mais:
  1493                           	opt stack 0
  1494  00005E                     	ds	1
  1495  00005F                     _flag_b_mais:
  1496                           	opt stack 0
  1497  00005F                     	ds	1
  1498  000060                     __b_menos:
  1499                           	opt stack 0
  1500  000060                     	ds	1
  1501  000061                     _flag_b_menos:
  1502                           	opt stack 0
  1503  000061                     	ds	1
  1504  000062                     __b_esc:
  1505                           	opt stack 0
  1506  000062                     	ds	1
  1507  000063                     _flag_b_esc:
  1508                           	opt stack 0
  1509  000063                     	ds	1
  1510  000064                     _cbf:
  1511                           	opt stack 0
  1512  000064                     	ds	1
  1513  000065                     _checar_serial:
  1514                           	opt stack 0
  1515  000065                     	ds	1
  1516  000066                     _str_recebido_ok:
  1517                           	opt stack 0
  1518  000066                     	ds	1
  1519  000067                     _str_posicao:
  1520                           	opt stack 0
  1521  000067                     	ds	1
  1522  000068                     _tela_menu_posi:
  1523                           	opt stack 0
  1524  000068                     	ds	1
  1525  000069                     _sub_menu_posi:
  1526                           	opt stack 0
  1527  000069                     	ds	1
  1528  00006A                     _timer_envio_sms:
  1529                           	opt stack 0
  1530  00006A                     	ds	1
  1531  00006B                     _teste_sms_run:
  1532                           	opt stack 0
  1533  00006B                     	ds	1
  1534  00006C                     _estagio_envio_SMS:
  1535                           	opt stack 0
  1536  00006C                     	ds	1
  1537  00006D                     _tempo_coun_estacionaria:
  1538                           	opt stack 0
  1539  00006D                     	ds	1
  1540  00006E                     _status_SIM800L:
  1541                           	opt stack 0
  1542  00006E                     	ds	1
  1543  00006F                     _intervalo_leitura_adc:
  1544                           	opt stack 0
  1545  00006F                     	ds	1
  1546  000070                     _qtd_leitura:
  1547                           	opt stack 0
  1548  000070                     	ds	1
  1549  000071                     _base_sec:
  1550                           	opt stack 0
  1551  000071                     	ds	1
  1552  000072                     _rtc:
  1553                           	opt stack 0
  1554  000072                     	ds	7
  1555                           tblptru	equ	0xFF8
  1556                           tblptrh	equ	0xFF7
  1557                           tblptrl	equ	0xFF6
  1558                           tablat	equ	0xFF5
  1559                           postinc0	equ	0xFEE
  1560                           wreg	equ	0xFE8
  1561                           postdec1	equ	0xFE5
  1562                           fsr1l	equ	0xFE1
  1563                           
  1564                           	psect	dataCOMRAM
  1565  00007A                     __pdataCOMRAM:
  1566                           	opt stack 0
  1567  00007A                     _bt_press:
  1568                           	opt stack 0
  1569  00007A                     	ds	1
  1570  00007B                     _tempo_reenvio_SMS:
  1571                           	opt stack 0
  1572  00007B                     	ds	1
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           postinc0	equ	0xFEE
  1578                           wreg	equ	0xFE8
  1579                           postdec1	equ	0xFE5
  1580                           fsr1l	equ	0xFE1
  1581                           
  1582                           	psect	bssBANK0
  1583  0000D4                     __pbssBANK0:
  1584                           	opt stack 0
  1585  0000D4                     _dtl_posi_visualizar:
  1586                           	opt stack 0
  1587  0000D4                     	ds	1
  1588  0000D5                     _totalLogs:
  1589                           	opt stack 0
  1590  0000D5                     	ds	1
  1591  0000D6                     _ajust_tel:
  1592                           	opt stack 0
  1593  0000D6                     	ds	1
  1594  0000D7                     _tel_posi:
  1595                           	opt stack 0
  1596  0000D7                     	ds	1
  1597  0000D8                     __menu_posi:
  1598                           	opt stack 0
  1599  0000D8                     	ds	1
  1600  0000D9                     _menu_posi:
  1601                           	opt stack 0
  1602  0000D9                     	ds	1
  1603  0000DA                     _option_posi:
  1604                           	opt stack 0
  1605  0000DA                     	ds	1
  1606  0000DB                     _incendio:
  1607                           	opt stack 0
  1608  0000DB                     	ds	1
  1609  0000DC                     _teste_run:
  1610                           	opt stack 0
  1611  0000DC                     	ds	1
  1612  0000DD                     _falha:
  1613                           	opt stack 0
  1614  0000DD                     	ds	1
  1615  0000DE                     _sp_estacionaria:
  1616                           	opt stack 0
  1617  0000DE                     	ds	1
  1618  0000DF                     _sp_principal:
  1619                           	opt stack 0
  1620  0000DF                     	ds	1
  1621  0000E0                     _sp_jockey:
  1622                           	opt stack 0
  1623  0000E0                     	ds	1
  1624  0000E1                     _sp_pressao_rede:
  1625                           	opt stack 0
  1626  0000E1                     	ds	1
  1627  0000E2                     _tel_selecionado:
  1628                           	opt stack 0
  1629  0000E2                     	ds	1
  1630  0000E3                     _tempo_corrido_teste_estacionaria:
  1631                           	opt stack 0
  1632  0000E3                     	ds	1
  1633  0000E4                     _tempo_limite_teste_estacionaria:
  1634                           	opt stack 0
  1635  0000E4                     	ds	1
  1636  0000E5                     _tempo_limite_partida:
  1637                           	opt stack 0
  1638  0000E5                     	ds	1
  1639  0000E6                     _tempo_partida:
  1640                           	opt stack 0
  1641  0000E6                     	ds	1
  1642  0000E7                     _estacionaria_Ligada:
  1643                           	opt stack 0
  1644  0000E7                     	ds	1
  1645  0000E8                     _tempo_limite_estacionaria:
  1646                           	opt stack 0
  1647  0000E8                     	ds	1
  1648  0000E9                     _horario_de_teste:
  1649                           	opt stack 0
  1650  0000E9                     	ds	1
  1651  0000EA                     _dias_restante_teste:
  1652                           	opt stack 0
  1653  0000EA                     	ds	1
  1654  0000EB                     _intervalo_teste_dia:
  1655                           	opt stack 0
  1656  0000EB                     	ds	1
  1657  0000EC                     __sec_aux:
  1658                           	opt stack 0
  1659  0000EC                     	ds	1
  1660  0000ED                     __sec_partida:
  1661                           	opt stack 0
  1662  0000ED                     	ds	1
  1663  0000EE                     __ano:
  1664                           	opt stack 0
  1665  0000EE                     	ds	1
  1666  0000EF                     __mes:
  1667                           	opt stack 0
  1668  0000EF                     	ds	1
  1669  0000F0                     __dia:
  1670                           	opt stack 0
  1671  0000F0                     	ds	1
  1672  0000F1                     __hor:
  1673                           	opt stack 0
  1674  0000F1                     	ds	1
  1675  0000F2                     __min:
  1676                           	opt stack 0
  1677  0000F2                     	ds	1
  1678  0000F3                     __sec:
  1679                           	opt stack 0
  1680  0000F3                     	ds	1
  1681  0000F4                     _gsmOcupado:
  1682                           	opt stack 0
  1683  0000F4                     	ds	1
  1684  0000F5                     _timerEtapaComunicacao:
  1685                           	opt stack 0
  1686  0000F5                     	ds	1
  1687  0000F6                     _telefoneSelecionado:
  1688                           	opt stack 0
  1689  0000F6                     	ds	1
  1690                           tblptru	equ	0xFF8
  1691                           tblptrh	equ	0xFF7
  1692                           tblptrl	equ	0xFF6
  1693                           tablat	equ	0xFF5
  1694                           postinc0	equ	0xFEE
  1695                           wreg	equ	0xFE8
  1696                           postdec1	equ	0xFE5
  1697                           fsr1l	equ	0xFE1
  1698                           
  1699                           	psect	dataBANK0
  1700  0000F7                     __pdataBANK0:
  1701                           	opt stack 0
  1702  0000F7                     _tempo_teste_bombas:
  1703                           	opt stack 0
  1704  0000F7                     	ds	2
  1705  0000F9                     _dtl_posicao:
  1706                           	opt stack 0
  1707  0000F9                     	ds	1
  1708  0000FA                     _status_estacionaria:
  1709                           	opt stack 0
  1710  0000FA                     	ds	1
  1711  0000FB                     _status_principal:
  1712                           	opt stack 0
  1713  0000FB                     	ds	1
  1714  0000FC                     _status_jockey:
  1715                           	opt stack 0
  1716  0000FC                     	ds	1
  1717  0000FD                     _pressao:
  1718                           	opt stack 0
  1719  0000FD                     	ds	1
  1720  0000FE                     _timerVerificarSinal:
  1721                           	opt stack 0
  1722  0000FE                     	ds	1
  1723  0000FF                     _intensidadeSinal:
  1724                           	opt stack 0
  1725  0000FF                     	ds	1
  1726                           tblptru	equ	0xFF8
  1727                           tblptrh	equ	0xFF7
  1728                           tblptrl	equ	0xFF6
  1729                           tablat	equ	0xFF5
  1730                           postinc0	equ	0xFEE
  1731                           wreg	equ	0xFE8
  1732                           postdec1	equ	0xFE5
  1733                           fsr1l	equ	0xFE1
  1734                           
  1735                           	psect	bssBANK1
  1736  000100                     __pbssBANK1:
  1737                           	opt stack 0
  1738  000100                     _str_recebida:
  1739                           	opt stack 0
  1740  000100                     	ds	20
  1741  000114                     _bufferSerial:
  1742                           	opt stack 0
  1743  000114                     	ds	60
  1744  000150                     _line4:
  1745                           	opt stack 0
  1746  000150                     	ds	21
  1747  000165                     _line3:
  1748                           	opt stack 0
  1749  000165                     	ds	21
  1750  00017A                     _line2:
  1751                           	opt stack 0
  1752  00017A                     	ds	21
  1753  00018F                     _line1:
  1754                           	opt stack 0
  1755  00018F                     	ds	21
  1756  0001A4                     _bufferAUX:
  1757                           	opt stack 0
  1758  0001A4                     	ds	20
  1759  0001B8                     _tel2:
  1760                           	opt stack 0
  1761  0001B8                     	ds	12
  1762  0001C4                     _tel1:
  1763                           	opt stack 0
  1764  0001C4                     	ds	12
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           postdec1	equ	0xFE5
  1772                           fsr1l	equ	0xFE1
  1773                           
  1774                           	psect	dataBANK1
  1775  0001D0                     __pdataBANK1:
  1776                           	opt stack 0
  1777  0001D0                     intToFloatStr@F2544:
  1778                           	opt stack 0
  1779  0001D0                     	ds	4
  1780                           tblptru	equ	0xFF8
  1781                           tblptrh	equ	0xFF7
  1782                           tblptrl	equ	0xFF6
  1783                           tablat	equ	0xFF5
  1784                           postinc0	equ	0xFEE
  1785                           wreg	equ	0xFE8
  1786                           postdec1	equ	0xFE5
  1787                           fsr1l	equ	0xFE1
  1788                           
  1789                           	psect	cstackBANK0
  1790  000080                     __pcstackBANK0:
  1791                           	opt stack 0
  1792  000080                     ??_isdigit:
  1793  000080                     ??_setShiftREG:
  1794  000080                     ??_I2C_Wait:
  1795  000080                     ?_strlen:
  1796                           	opt stack 0
  1797  000080                     ?_strchr:
  1798                           	opt stack 0
  1799  000080                     ?___wmul:
  1800                           	opt stack 0
  1801  000080                     ?___awdiv:
  1802                           	opt stack 0
  1803  000080                     ?___awmod:
  1804                           	opt stack 0
  1805  000080                     ?___lwdiv:
  1806                           	opt stack 0
  1807  000080                     ?___lldiv:
  1808                           	opt stack 0
  1809  000080                     putch@c:
  1810                           	opt stack 0
  1811  000080                     clearShiftREG@i:
  1812                           	opt stack 0
  1813  000080                     btPress@bt:
  1814                           	opt stack 0
  1815  000080                     Lcd_Port@a:
  1816                           	opt stack 0
  1817  000080                     BCDtoDEC@val:
  1818                           	opt stack 0
  1819  000080                     writeChar@hex:
  1820                           	opt stack 0
  1821  000080                     blink@line:
  1822                           	opt stack 0
  1823  000080                     delay@x:
  1824                           	opt stack 0
  1825  000080                     ___wmul@multiplier:
  1826                           	opt stack 0
  1827  000080                     ___awdiv@dividend:
  1828                           	opt stack 0
  1829  000080                     ___awmod@dividend:
  1830                           	opt stack 0
  1831  000080                     ___lwdiv@dividend:
  1832                           	opt stack 0
  1833  000080                     memset@p1:
  1834                           	opt stack 0
  1835  000080                     strlen@s:
  1836                           	opt stack 0
  1837  000080                     strchr@ptr:
  1838                           	opt stack 0
  1839  000080                     ___lldiv@dividend:
  1840                           	opt stack 0
  1841                           
  1842                           ; 4 bytes @ 0x0
  1843  000080                     	ds	1
  1844  000081                     ??_Lcd_Cmd:
  1845  000081                     ?_I2C_Read:
  1846                           	opt stack 0
  1847  000081                     setShiftREG@i:
  1848                           	opt stack 0
  1849  000081                     Lcd_Write_Char@tempp:
  1850                           	opt stack 0
  1851  000081                     _isdigit$1853:
  1852                           	opt stack 0
  1853  000081                     I2C_Read@a:
  1854                           	opt stack 0
  1855                           
  1856                           ; 2 bytes @ 0x1
  1857  000081                     	ds	1
  1858  000082                     ??_delay:
  1859  000082                     ??_strlen:
  1860  000082                     Lcd_Cmd@a:
  1861                           	opt stack 0
  1862  000082                     Lcd_Write_Char@y:
  1863                           	opt stack 0
  1864  000082                     blink@start:
  1865                           	opt stack 0
  1866  000082                     isdigit@c:
  1867                           	opt stack 0
  1868  000082                     ___wmul@multiplicand:
  1869                           	opt stack 0
  1870  000082                     ___awdiv@divisor:
  1871                           	opt stack 0
  1872  000082                     ___awmod@divisor:
  1873                           	opt stack 0
  1874  000082                     ___lwdiv@divisor:
  1875                           	opt stack 0
  1876  000082                     memset@c:
  1877                           	opt stack 0
  1878  000082                     strchr@chr:
  1879                           	opt stack 0
  1880                           
  1881                           ; 2 bytes @ 0x2
  1882  000082                     	ds	1
  1883  000083                     ??_Lcd_Init:
  1884  000083                     partidaBombaEstacionaria@acao:
  1885                           	opt stack 0
  1886  000083                     Lcd_Set_Cursor@b:
  1887                           	opt stack 0
  1888  000083                     Lcd_Write_Char@a:
  1889                           	opt stack 0
  1890  000083                     blink@end:
  1891                           	opt stack 0
  1892  000083                     I2C_Read@temp:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x3
  1896  000083                     	ds	1
  1897  000084                     ??_criarCaracteresCGRAM:
  1898  000084                     Lcd_Set_Cursor@a:
  1899                           	opt stack 0
  1900  000084                     blink@i:
  1901                           	opt stack 0
  1902  000084                     ___awdiv@counter:
  1903                           	opt stack 0
  1904  000084                     ___awmod@counter:
  1905                           	opt stack 0
  1906  000084                     Lcd_Write_String@a:
  1907                           	opt stack 0
  1908  000084                     ___wmul@product:
  1909                           	opt stack 0
  1910  000084                     ___lwdiv@quotient:
  1911                           	opt stack 0
  1912  000084                     memset@n:
  1913                           	opt stack 0
  1914  000084                     strlen@cp:
  1915                           	opt stack 0
  1916  000084                     ___lldiv@divisor:
  1917                           	opt stack 0
  1918                           
  1919                           ; 4 bytes @ 0x4
  1920  000084                     	ds	1
  1921  000085                     Lcd_Set_Cursor@z:
  1922                           	opt stack 0
  1923  000085                     ___awdiv@sign:
  1924                           	opt stack 0
  1925  000085                     ___awmod@sign:
  1926                           	opt stack 0
  1927                           
  1928                           ; 1 bytes @ 0x5
  1929  000085                     	ds	1
  1930  000086                     ?_strncmp:
  1931                           	opt stack 0
  1932  000086                     Lcd_Set_Cursor@y:
  1933                           	opt stack 0
  1934  000086                     Lcd_Write_String@i:
  1935                           	opt stack 0
  1936  000086                     ___lwdiv@counter:
  1937                           	opt stack 0
  1938  000086                     ___awdiv@quotient:
  1939                           	opt stack 0
  1940  000086                     memset@p:
  1941                           	opt stack 0
  1942  000086                     strncmp@s1:
  1943                           	opt stack 0
  1944                           
  1945                           ; 2 bytes @ 0x6
  1946  000086                     	ds	1
  1947  000087                     ?___lwmod:
  1948                           	opt stack 0
  1949  000087                     Lcd_Set_Cursor@temp:
  1950                           	opt stack 0
  1951  000087                     ___lwmod@dividend:
  1952                           	opt stack 0
  1953  000087                     criarCaracteresCGRAM@character:
  1954                           	opt stack 0
  1955                           
  1956                           ; 48 bytes @ 0x7
  1957  000087                     	ds	1
  1958  000088                     DECtoBCD@val:
  1959                           	opt stack 0
  1960  000088                     atualizarLCD@line1:
  1961                           	opt stack 0
  1962  000088                     strncmp@s2:
  1963                           	opt stack 0
  1964  000088                     ___lldiv@quotient:
  1965                           	opt stack 0
  1966                           
  1967                           ; 4 bytes @ 0x8
  1968  000088                     	ds	1
  1969  000089                     DECtoBCD@res:
  1970                           	opt stack 0
  1971  000089                     ___lwmod@divisor:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x9
  1975  000089                     	ds	1
  1976  00008A                     atualizarLCD@line2:
  1977                           	opt stack 0
  1978  00008A                     I2C_Write@d:
  1979                           	opt stack 0
  1980  00008A                     strncmp@len:
  1981                           	opt stack 0
  1982                           
  1983                           ; 2 bytes @ 0xA
  1984  00008A                     	ds	1
  1985  00008B                     ___lwmod@counter:
  1986                           	opt stack 0
  1987                           
  1988                           ; 1 bytes @ 0xB
  1989  00008B                     	ds	1
  1990  00008C                     ??_strncmp:
  1991  00008C                     ?__doprnt:
  1992                           	opt stack 0
  1993  00008C                     writeEEPROM_ext@data:
  1994                           	opt stack 0
  1995  00008C                     readEEPROM_ext@adress:
  1996                           	opt stack 0
  1997  00008C                     ___lldiv@counter:
  1998                           	opt stack 0
  1999  00008C                     setDS1307TimeDate@ptrToUserVal:
  2000                           	opt stack 0
  2001  00008C                     getDS1307TimeDate@ptrToUserVal:
  2002                           	opt stack 0
  2003  00008C                     atualizarLCD@line3:
  2004                           	opt stack 0
  2005  00008C                     __doprnt@pb:
  2006                           	opt stack 0
  2007                           
  2008                           ; 2 bytes @ 0xC
  2009  00008C                     	ds	1
  2010  00008D                     writeEEPROM_ext@adress:
  2011                           	opt stack 0
  2012  00008D                     readEEPROM_ext@data:
  2013                           	opt stack 0
  2014  00008D                     I2C_Master_Init@c:
  2015                           	opt stack 0
  2016                           
  2017                           ; 4 bytes @ 0xD
  2018  00008D                     	ds	1
  2019  00008E                     ??_setDS1307TimeDate:
  2020  00008E                     ??_salvarLOG:
  2021  00008E                     ?_readEEPROM16_ext:
  2022                           	opt stack 0
  2023  00008E                     atualizarLCD@line4:
  2024                           	opt stack 0
  2025  00008E                     __doprnt@f:
  2026                           	opt stack 0
  2027                           
  2028                           ; 2 bytes @ 0xE
  2029  00008E                     	ds	1
  2030  00008F                     ?_strstr:
  2031                           	opt stack 0
  2032  00008F                     salvarLOG@ultimoLogSalvo:
  2033                           	opt stack 0
  2034  00008F                     strstr@s1:
  2035                           	opt stack 0
  2036                           
  2037                           ; 2 bytes @ 0xF
  2038  00008F                     	ds	1
  2039  000090                     ??_readEEPROM16_ext:
  2040  000090                     atualizarLCD@i:
  2041                           	opt stack 0
  2042  000090                     __doprnt@ap:
  2043                           	opt stack 0
  2044                           
  2045                           ; 2 bytes @ 0x10
  2046  000090                     	ds	1
  2047  000091                     ??_I2C_Master_Init:
  2048  000091                     readEEPROM16_ext@data:
  2049                           	opt stack 0
  2050  000091                     strstr@s2:
  2051                           	opt stack 0
  2052                           
  2053                           ; 2 bytes @ 0x11
  2054  000091                     	ds	1
  2055  000092                     ??__doprnt:
  2056                           
  2057                           ; 1 bytes @ 0x12
  2058  000092                     	ds	1
  2059  000093                     readEEPROM16_ext@adress:
  2060                           	opt stack 0
  2061  000093                     aguardaBuffer@str:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x13
  2065  000093                     	ds	1
  2066  000094                     lerParametros@verifica_memoria_nova:
  2067                           	opt stack 0
  2068                           
  2069                           ; 1 bytes @ 0x14
  2070  000094                     	ds	1
  2071  000095                     lerParametros@i:
  2072                           	opt stack 0
  2073                           
  2074                           ; 1 bytes @ 0x15
  2075  000095                     	ds	1
  2076  000096                     __doprnt@prec:
  2077                           	opt stack 0
  2078                           
  2079                           ; 1 bytes @ 0x16
  2080  000096                     	ds	1
  2081  000097                     __doprnt@val:
  2082                           	opt stack 0
  2083                           
  2084                           ; 2 bytes @ 0x17
  2085  000097                     	ds	2
  2086  000099                     __doprnt@len:
  2087                           	opt stack 0
  2088                           
  2089                           ; 2 bytes @ 0x19
  2090  000099                     	ds	2
  2091  00009B                     __doprnt@flag:
  2092                           	opt stack 0
  2093                           
  2094                           ; 1 bytes @ 0x1B
  2095  00009B                     	ds	1
  2096  00009C                     __doprnt@cp:
  2097                           	opt stack 0
  2098                           
  2099                           ; 2 bytes @ 0x1C
  2100  00009C                     	ds	2
  2101  00009E                     __doprnt@width:
  2102                           	opt stack 0
  2103                           
  2104                           ; 2 bytes @ 0x1E
  2105  00009E                     	ds	2
  2106  0000A0                     __doprnt@c:
  2107                           	opt stack 0
  2108                           
  2109                           ; 1 bytes @ 0x20
  2110  0000A0                     	ds	1
  2111  0000A1                     ?_sprintf:
  2112                           	opt stack 0
  2113  0000A1                     ?_printf:
  2114                           	opt stack 0
  2115  0000A1                     printf@f:
  2116                           	opt stack 0
  2117  0000A1                     sprintf@wh:
  2118                           	opt stack 0
  2119                           
  2120                           ; 2 bytes @ 0x21
  2121  0000A1                     	ds	2
  2122  0000A3                     sprintf@f:
  2123                           	opt stack 0
  2124                           
  2125                           ; 2 bytes @ 0x23
  2126  0000A3                     	ds	14
  2127  0000B1                     sprintf@ap:
  2128                           	opt stack 0
  2129                           
  2130                           ; 2 bytes @ 0x31
  2131  0000B1                     	ds	2
  2132  0000B3                     sprintf@pb:
  2133                           	opt stack 0
  2134                           
  2135                           ; 4 bytes @ 0x33
  2136  0000B3                     	ds	2
  2137  0000B5                     printf@ap:
  2138                           	opt stack 0
  2139                           
  2140                           ; 2 bytes @ 0x35
  2141  0000B5                     	ds	2
  2142  0000B7                     ??_tela_testeBombas:
  2143  0000B7                     ??_dataLoger:
  2144  0000B7                     ?_intToFloatStr:
  2145                           	opt stack 0
  2146  0000B7                     ?_getSerial:
  2147                           	opt stack 0
  2148  0000B7                     getSerial@str:
  2149                           	opt stack 0
  2150  0000B7                     _criarCaracteresCGRAM$1380:
  2151                           	opt stack 0
  2152  0000B7                     printf@pb:
  2153                           	opt stack 0
  2154                           
  2155                           ; 4 bytes @ 0x37
  2156  0000B7                     	ds	2
  2157  0000B9                     getSerial@end:
  2158                           	opt stack 0
  2159  0000B9                     criarCaracteresCGRAM@k:
  2160                           	opt stack 0
  2161  0000B9                     intToFloatStr@valor:
  2162                           	opt stack 0
  2163                           
  2164                           ; 1 bytes @ 0x39
  2165  0000B9                     	ds	1
  2166  0000BA                     ??_getSerial:
  2167  0000BA                     criarCaracteresCGRAM@j:
  2168                           	opt stack 0
  2169  0000BA                     intToFloatStr@end:
  2170                           	opt stack 0
  2171                           
  2172                           ; 4 bytes @ 0x3A
  2173  0000BA                     	ds	1
  2174  0000BB                     ??_comunicarTeste:
  2175  0000BB                     criarCaracteresCGRAM@i:
  2176                           	opt stack 0
  2177                           
  2178                           ; 1 bytes @ 0x3B
  2179  0000BB                     	ds	1
  2180  0000BC                     getSerial@length:
  2181                           	opt stack 0
  2182  0000BC                     _dataLoger$1430:
  2183                           	opt stack 0
  2184                           
  2185                           ; 2 bytes @ 0x3C
  2186  0000BC                     	ds	1
  2187  0000BD                     _comunicarTeste$1201:
  2188                           	opt stack 0
  2189                           
  2190                           ; 2 bytes @ 0x3D
  2191  0000BD                     	ds	1
  2192  0000BE                     getSerial@i:
  2193                           	opt stack 0
  2194  0000BE                     _dataLoger$1436:
  2195                           	opt stack 0
  2196  0000BE                     intToFloatStr@conv:
  2197                           	opt stack 0
  2198                           
  2199                           ; 4 bytes @ 0x3E
  2200  0000BE                     	ds	1
  2201  0000BF                     getSerial@ret:
  2202                           	opt stack 0
  2203  0000BF                     _comunicarTeste$1213:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x3F
  2207  0000BF                     	ds	1
  2208  0000C0                     _dataLoger$1441:
  2209                           	opt stack 0
  2210                           
  2211                           ; 2 bytes @ 0x40
  2212  0000C0                     	ds	1
  2213  0000C1                     ?_atoi:
  2214                           	opt stack 0
  2215  0000C1                     _comunicarTeste$1214:
  2216                           	opt stack 0
  2217  0000C1                     atoi@s:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0x41
  2221  0000C1                     	ds	1
  2222  0000C2                     dataLoger@logs:
  2223                           	opt stack 0
  2224  0000C2                     intToFloatStr@pr:
  2225                           	opt stack 0
  2226                           
  2227                           ; 2 bytes @ 0x42
  2228  0000C2                     	ds	1
  2229  0000C3                     ??_atoi:
  2230  0000C3                     _comunicarTeste$1215:
  2231                           	opt stack 0
  2232                           
  2233                           ; 2 bytes @ 0x43
  2234  0000C3                     	ds	1
  2235  0000C4                     ??_acaoTesteBombas:
  2236  0000C4                     _telaPrincipal$2359:
  2237                           	opt stack 0
  2238  0000C4                     _ajusteSP_Bombas$2360:
  2239                           	opt stack 0
  2240                           
  2241                           ; 2 bytes @ 0x44
  2242  0000C4                     	ds	1
  2243  0000C5                     ??_configuraTelefones:
  2244  0000C5                     atoi@sign:
  2245                           	opt stack 0
  2246                           
  2247                           ; 1 bytes @ 0x45
  2248  0000C5                     	ds	1
  2249  0000C6                     atoi@a:
  2250                           	opt stack 0
  2251                           
  2252                           ; 2 bytes @ 0x46
  2253  0000C6                     	ds	1
  2254  0000C7                     _configuraTelefones$1456:
  2255                           	opt stack 0
  2256                           
  2257                           ; 2 bytes @ 0x47
  2258  0000C7                     	ds	1
  2259  0000C8                     ??_getSinalSIM800L:
  2260                           
  2261                           ; 1 bytes @ 0x48
  2262  0000C8                     	ds	1
  2263  0000C9                     configuraTelefones@i:
  2264                           	opt stack 0
  2265                           
  2266                           ; 1 bytes @ 0x49
  2267  0000C9                     	ds	1
  2268  0000CA                     getSinalSIM800L@sinal:
  2269                           	opt stack 0
  2270                           
  2271                           ; 2 bytes @ 0x4A
  2272  0000CA                     	ds	1
  2273  0000CB                     _acaoTesteBombas$2358:
  2274                           	opt stack 0
  2275                           
  2276                           ; 2 bytes @ 0x4B
  2277  0000CB                     	ds	2
  2278  0000CD                     _acaoTesteBombas$1316:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0x4D
  2282  0000CD                     	ds	2
  2283  0000CF                     _acaoTesteBombas$1321:
  2284                           	opt stack 0
  2285                           
  2286                           ; 2 bytes @ 0x4F
  2287  0000CF                     	ds	2
  2288  0000D1                     _acaoTesteBombas$1326:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x51
  2292  0000D1                     	ds	2
  2293  0000D3                     acaoTesteBombas@i:
  2294                           	opt stack 0
  2295                           
  2296                           ; 1 bytes @ 0x53
  2297  0000D3                     	ds	1
  2298  0000D4                     tblptru	equ	0xFF8
  2299                           tblptrh	equ	0xFF7
  2300                           tblptrl	equ	0xFF6
  2301                           tablat	equ	0xFF5
  2302                           postinc0	equ	0xFEE
  2303                           wreg	equ	0xFE8
  2304                           postdec1	equ	0xFE5
  2305                           fsr1l	equ	0xFE1
  2306                           
  2307                           ; 1 bytes @ 0x54
  2308                           
  2309                           	psect	cstackCOMRAM
  2310  000001                     __pcstackCOMRAM:
  2311                           	opt stack 0
  2312  000001                     ??i2_I2C_Wait:
  2313  000001                     ?_readADC:
  2314                           	opt stack 0
  2315  000001                     ?___ftpack:
  2316                           	opt stack 0
  2317  000001                     i2BCDtoDEC@val:
  2318                           	opt stack 0
  2319  000001                     i2delay@x:
  2320                           	opt stack 0
  2321  000001                     ___ftpack@arg:
  2322                           	opt stack 0
  2323  000001                     ___ftge@ff1:
  2324                           	opt stack 0
  2325                           
  2326                           ; 3 bytes @ 0x0
  2327  000001                     	ds	1
  2328  000002                     ?i2_I2C_Read:
  2329                           	opt stack 0
  2330  000002                     i2I2C_Write@d:
  2331                           	opt stack 0
  2332  000002                     i2I2C_Read@a:
  2333                           	opt stack 0
  2334                           
  2335                           ; 2 bytes @ 0x1
  2336  000002                     	ds	1
  2337  000003                     ??_readADC:
  2338  000003                     ??i2_delay:
  2339                           
  2340                           ; 1 bytes @ 0x2
  2341  000003                     	ds	1
  2342  000004                     ___ftpack@exp:
  2343                           	opt stack 0
  2344  000004                     i2writeEEPROM_ext@data:
  2345                           	opt stack 0
  2346  000004                     i2I2C_Read@temp:
  2347                           	opt stack 0
  2348  000004                     ___ftge@ff2:
  2349                           	opt stack 0
  2350                           
  2351                           ; 3 bytes @ 0x3
  2352  000004                     	ds	1
  2353  000005                     ___ftpack@sign:
  2354                           	opt stack 0
  2355  000005                     i2writeEEPROM_ext@adress:
  2356                           	opt stack 0
  2357                           
  2358                           ; 1 bytes @ 0x4
  2359  000005                     	ds	1
  2360  000006                     ??___ftpack:
  2361  000006                     writeEEPROM16_ext@data:
  2362                           	opt stack 0
  2363  000006                     i2getDS1307TimeDate@ptrToUserVal:
  2364                           	opt stack 0
  2365                           
  2366                           ; 2 bytes @ 0x5
  2367  000006                     	ds	1
  2368  000007                     ??___ftge:
  2369                           
  2370                           ; 1 bytes @ 0x6
  2371  000007                     	ds	1
  2372  000008                     writeEEPROM16_ext@adress:
  2373                           	opt stack 0
  2374                           
  2375                           ; 1 bytes @ 0x7
  2376  000008                     	ds	1
  2377  000009                     ?___lwtoft:
  2378                           	opt stack 0
  2379  000009                     _timer$1328:
  2380                           	opt stack 0
  2381  000009                     ___lwtoft@c:
  2382                           	opt stack 0
  2383                           
  2384                           ; 2 bytes @ 0x8
  2385  000009                     	ds	2
  2386  00000B                     _timer$1329:
  2387                           	opt stack 0
  2388                           
  2389                           ; 2 bytes @ 0xA
  2390  00000B                     	ds	1
  2391  00000C                     ?___ftmul:
  2392                           	opt stack 0
  2393  00000C                     ___ftmul@f1:
  2394                           	opt stack 0
  2395                           
  2396                           ; 3 bytes @ 0xB
  2397  00000C                     	ds	3
  2398  00000F                     ___ftmul@f2:
  2399                           	opt stack 0
  2400                           
  2401                           ; 3 bytes @ 0xE
  2402  00000F                     	ds	3
  2403  000012                     ??___ftmul:
  2404                           
  2405                           ; 1 bytes @ 0x11
  2406  000012                     	ds	3
  2407  000015                     ___ftmul@exp:
  2408                           	opt stack 0
  2409                           
  2410                           ; 1 bytes @ 0x14
  2411  000015                     	ds	1
  2412  000016                     ___ftmul@f3_as_product:
  2413                           	opt stack 0
  2414                           
  2415                           ; 3 bytes @ 0x15
  2416  000016                     	ds	3
  2417  000019                     ___ftmul@cntr:
  2418                           	opt stack 0
  2419                           
  2420                           ; 1 bytes @ 0x18
  2421  000019                     	ds	1
  2422  00001A                     ___ftmul@sign:
  2423                           	opt stack 0
  2424                           
  2425                           ; 1 bytes @ 0x19
  2426  00001A                     	ds	1
  2427  00001B                     ?___ftadd:
  2428                           	opt stack 0
  2429  00001B                     ?___ftdiv:
  2430                           	opt stack 0
  2431  00001B                     ?___fttol:
  2432                           	opt stack 0
  2433  00001B                     ___ftadd@f1:
  2434                           	opt stack 0
  2435  00001B                     ___ftdiv@f1:
  2436                           	opt stack 0
  2437  00001B                     ___fttol@f1:
  2438                           	opt stack 0
  2439                           
  2440                           ; 3 bytes @ 0x1A
  2441  00001B                     	ds	3
  2442  00001E                     ___ftadd@f2:
  2443                           	opt stack 0
  2444  00001E                     ___ftdiv@f2:
  2445                           	opt stack 0
  2446                           
  2447                           ; 3 bytes @ 0x1D
  2448  00001E                     	ds	1
  2449  00001F                     ??___fttol:
  2450                           
  2451                           ; 1 bytes @ 0x1E
  2452  00001F                     	ds	2
  2453  000021                     ??___ftadd:
  2454  000021                     ??___ftdiv:
  2455                           
  2456                           ; 1 bytes @ 0x20
  2457  000021                     	ds	3
  2458  000024                     ___ftadd@sign:
  2459                           	opt stack 0
  2460  000024                     ___ftdiv@cntr:
  2461                           	opt stack 0
  2462  000024                     ___fttol@sign1:
  2463                           	opt stack 0
  2464                           
  2465                           ; 1 bytes @ 0x23
  2466  000024                     	ds	1
  2467  000025                     ___ftadd@exp2:
  2468                           	opt stack 0
  2469  000025                     ___ftdiv@f3:
  2470                           	opt stack 0
  2471  000025                     ___fttol@lval:
  2472                           	opt stack 0
  2473                           
  2474                           ; 4 bytes @ 0x24
  2475  000025                     	ds	1
  2476  000026                     ___ftadd@exp1:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x25
  2480  000026                     	ds	2
  2481  000028                     ___ftdiv@exp:
  2482                           	opt stack 0
  2483                           
  2484                           ; 1 bytes @ 0x27
  2485  000028                     	ds	1
  2486  000029                     ___ftdiv@sign:
  2487                           	opt stack 0
  2488  000029                     ___fttol@exp1:
  2489                           	opt stack 0
  2490                           
  2491                           ; 1 bytes @ 0x28
  2492  000029                     	ds	1
  2493  00002A                     lerTransdutor@i:
  2494                           	opt stack 0
  2495                           
  2496                           ; 1 bytes @ 0x29
  2497  00002A                     	ds	1
  2498  00002B                     lerTransdutor@_pressao:
  2499                           	opt stack 0
  2500                           
  2501                           ; 3 bytes @ 0x2A
  2502  00002B                     	ds	3
  2503  00002E                     lerTransdutor@tensao:
  2504                           	opt stack 0
  2505                           
  2506                           ; 3 bytes @ 0x2D
  2507  00002E                     	ds	3
  2508  000031                     ??_TIMER:
  2509                           
  2510                           ; 1 bytes @ 0x30
  2511  000031                     	ds	18
  2512  000043                     TIMER@c:
  2513                           	opt stack 0
  2514                           
  2515                           ; 1 bytes @ 0x42
  2516  000043                     	ds	1
  2517                           tblptru	equ	0xFF8
  2518                           tblptrh	equ	0xFF7
  2519                           tblptrl	equ	0xFF6
  2520                           tablat	equ	0xFF5
  2521                           postinc0	equ	0xFEE
  2522                           wreg	equ	0xFE8
  2523                           postdec1	equ	0xFE5
  2524                           fsr1l	equ	0xFE1
  2525                           
  2526 ;;
  2527 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2528 ;;
  2529 ;; *************** function _main *****************
  2530 ;; Defined at:
  2531 ;;		line 73 in file "Main.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;		None
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2545 ;;      Params:         0       0       0       0       0       0       0
  2546 ;;      Locals:         0       0       0       0       0       0       0
  2547 ;;      Temps:          0       0       0       0       0       0       0
  2548 ;;      Totals:         0       0       0       0       0       0       0
  2549 ;;Total ram usage:        0 bytes
  2550 ;; Hardware stack levels required when called:   12
  2551 ;; This function calls:
  2552 ;;		_I2C_Master_Init
  2553 ;;		_Lcd_Clear
  2554 ;;		_Lcd_Init
  2555 ;;		_RTC_Init
  2556 ;;		_acaoBombas
  2557 ;;		_acaoTesteBomasProgramado
  2558 ;;		_acaoTesteBombas
  2559 ;;		_ajusteSP_Bombas
  2560 ;;		_atualizarLCD
  2561 ;;		_btPress
  2562 ;;		_configuraRegistradores
  2563 ;;		_configuraTelefones
  2564 ;;		_configurarEstacionaria
  2565 ;;		_criarCaracteresCGRAM
  2566 ;;		_dataLoger
  2567 ;;		_delay
  2568 ;;		_getDS1307TimeDate
  2569 ;;		_getSinalSIM800L
  2570 ;;		_informacoes
  2571 ;;		_lerParametros
  2572 ;;		_setShiftREG
  2573 ;;		_sprintf
  2574 ;;		_telaPrincipal
  2575 ;;		_tela_ajusteRTC
  2576 ;;		_tela_testeBombas
  2577 ;; This function is called by:
  2578 ;;		Startup code after reset
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           	psect	text0
  2583  000920                     __ptext0:
  2584                           	opt stack 0
  2585  000920                     _main:
  2586                           	opt stack 0
  2587  000920  FFFF               	dw	65535	; assembler added errata NOP
  2588                           
  2589                           ;Main.c: 75: configuraRegistradores();
  2590                           
  2591                           ;incstack = 0
  2592  000922  EC3B  F01F         	call	_configuraRegistradores	;wreg free
  2593                           
  2594                           ;Main.c: 76: I2C_Master_Init(100000);
  2595  000926  0EA0               	movlw	160
  2596  000928  0100               	movlb	0	; () banked
  2597  00092A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2598  00092C  0E86               	movlw	134
  2599  00092E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2600  000930  0E01               	movlw	1
  2601  000932  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2602  000934  0E00               	movlw	0
  2603  000936  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2604  000938  ECA8  F01E         	call	_I2C_Master_Init	;wreg free
  2605                           
  2606                           ;Main.c: 77: delay(200);
  2607  00093C  0E00               	movlw	0
  2608  00093E  0100               	movlb	0	; () banked
  2609  000940  6F81               	movwf	(delay@x+1)& (0+255),b
  2610  000942  0EC8               	movlw	200
  2611  000944  6F80               	movwf	delay@x& (0+255),b
  2612  000946  ECBC  F03B         	call	_delay	;wreg free
  2613                           
  2614                           ;Main.c: 78: RTC_Init();
  2615  00094A  EC0D  F03C         	call	_RTC_Init	;wreg free
  2616                           
  2617                           ;Main.c: 79: delay(100);
  2618  00094E  0E00               	movlw	0
  2619  000950  0100               	movlb	0	; () banked
  2620  000952  6F81               	movwf	(delay@x+1)& (0+255),b
  2621  000954  0E64               	movlw	100
  2622  000956  6F80               	movwf	delay@x& (0+255),b
  2623  000958  ECBC  F03B         	call	_delay	;wreg free
  2624                           
  2625                           ;Main.c: 80: getDS1307TimeDate(&rtc);
  2626  00095C  0E72               	movlw	low _rtc
  2627  00095E  0100               	movlb	0	; () banked
  2628  000960  6F8C               	movwf	getDS1307TimeDate@ptrToUserVal& (0+255),b
  2629  000962  0E00               	movlw	high _rtc
  2630  000964  6F8D               	movwf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  2631  000966  EC79  F013         	call	_getDS1307TimeDate	;wreg free
  2632                           
  2633                           ;Main.c: 81: Lcd_Init();
  2634  00096A  EC2E  F01D         	call	_Lcd_Init	;wreg free
  2635                           
  2636                           ;Main.c: 82: Lcd_Clear();
  2637  00096E  ECB2  F03A         	call	_Lcd_Clear	;wreg free
  2638                           
  2639                           ;Main.c: 83: criarCaracteresCGRAM();
  2640  000972  EC87  F019         	call	_criarCaracteresCGRAM	;wreg free
  2641                           
  2642                           ;Main.c: 84: delay(100);
  2643  000976  0E00               	movlw	0
  2644  000978  0100               	movlb	0	; () banked
  2645  00097A  6F81               	movwf	(delay@x+1)& (0+255),b
  2646  00097C  0E64               	movlw	100
  2647  00097E  6F80               	movwf	delay@x& (0+255),b
  2648  000980  ECBC  F03B         	call	_delay	;wreg free
  2649                           
  2650                           ;Main.c: 85: lerParametros();
  2651  000984  EC13  F014         	call	_lerParametros	;wreg free
  2652                           
  2653                           ;Main.c: 86: delay(50);
  2654  000988  0E00               	movlw	0
  2655  00098A  0100               	movlb	0	; () banked
  2656  00098C  6F81               	movwf	(delay@x+1)& (0+255),b
  2657  00098E  0E32               	movlw	50
  2658  000990  6F80               	movwf	delay@x& (0+255),b
  2659  000992  ECBC  F03B         	call	_delay	;wreg free
  2660  000996                     l894:
  2661  000996  FFFF               	dw	65535	; assembler added errata NOP
  2662  000998  0004               	clrwdt		;# 
  2663                           
  2664                           ;Main.c: 94: if (!PORTCbits.RC0) {
  2665  00099A  B082               	btfsc	3970,0,c	;volatile
  2666  00099C  D003               	goto	l895
  2667                           
  2668                           ;Main.c: 95: falha = 3;
  2669  00099E  0E03               	movlw	3
  2670  0009A0  0100               	movlb	0	; () banked
  2671  0009A2  6FDD               	movwf	_falha& (0+255),b
  2672  0009A4                     l895:
  2673  0009A4  FFFF               	dw	65535	; assembler added errata NOP
  2674                           
  2675                           ;Main.c: 96: }
  2676                           ;Main.c: 97: acaoBombas();
  2677                           
  2678                           ; BSR set to: 0
  2679  0009A6  EC10  F01B         	call	_acaoBombas	;wreg free
  2680                           
  2681                           ;Main.c: 98: acaoTesteBomasProgramado();
  2682  0009AA  ECBA  F03C         	call	_acaoTesteBomasProgramado	;wreg free
  2683                           
  2684                           ;Main.c: 99: setShiftREG();
  2685  0009AE  ECDF  F03D         	call	_setShiftREG	;wreg free
  2686                           
  2687                           ;Main.c: 100: getSinalSIM800L();
  2688  0009B2  EC20  F012         	call	_getSinalSIM800L	;wreg free
  2689                           
  2690                           ;Main.c: 102: switch (menu_posi) {
  2691  0009B6  D085               	goto	l896
  2692  0009B8  FFFF               	dw	65535	; assembler added errata NOP
  2693                           
  2694                           ;Main.c: 104: telaPrincipal();
  2695  0009BA  ECAF  F010         	call	_telaPrincipal	;wreg free
  2696                           
  2697                           ;Main.c: 106: break;
  2698  0009BE  D0A6               	goto	l898
  2699  0009C0  FFFF               	dw	65535	; assembler added errata NOP
  2700                           
  2701                           ;Main.c: 108: sprintf(&line1[1], "DATA/HORA");
  2702  0009C2  0E90               	movlw	low (_line1+1)
  2703  0009C4  0100               	movlb	0	; () banked
  2704  0009C6  6FA1               	movwf	sprintf@wh& (0+255),b
  2705  0009C8  0E01               	movlw	high (_line1+1)
  2706  0009CA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2707  0009CC  0E5F               	movlw	low STR_97
  2708  0009CE  6FA3               	movwf	sprintf@f& (0+255),b
  2709  0009D0  0E7F               	movlw	high STR_97
  2710  0009D2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2711  0009D4  ECBB  F03D         	call	_sprintf	;wreg free
  2712                           
  2713                           ;Main.c: 109: sprintf(&line2[1], "PRESSAO DA REDE");
  2714  0009D8  0E7B               	movlw	low (_line2+1)
  2715  0009DA  0100               	movlb	0	; () banked
  2716  0009DC  6FA1               	movwf	sprintf@wh& (0+255),b
  2717  0009DE  0E01               	movlw	high (_line2+1)
  2718  0009E0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2719  0009E2  0E56               	movlw	low STR_98
  2720  0009E4  6FA3               	movwf	sprintf@f& (0+255),b
  2721  0009E6  0E7E               	movlw	high STR_98
  2722  0009E8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2723  0009EA  ECBB  F03D         	call	_sprintf	;wreg free
  2724                           
  2725                           ;Main.c: 110: sprintf(&line3[1], "PARTIDA COMBUSTAO");
  2726  0009EE  0E66               	movlw	low (_line3+1)
  2727  0009F0  0100               	movlb	0	; () banked
  2728  0009F2  6FA1               	movwf	sprintf@wh& (0+255),b
  2729  0009F4  0E01               	movlw	high (_line3+1)
  2730  0009F6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2731  0009F8  0E10               	movlw	low STR_99
  2732  0009FA  6FA3               	movwf	sprintf@f& (0+255),b
  2733  0009FC  0E7E               	movlw	high STR_99
  2734  0009FE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2735  000A00  ECBB  F03D         	call	_sprintf	;wreg free
  2736                           
  2737                           ;Main.c: 111: sprintf(&line4[1], "TELEFONES");
  2738  000A04  0E51               	movlw	low (_line4+1)
  2739  000A06  0100               	movlb	0	; () banked
  2740  000A08  6FA1               	movwf	sprintf@wh& (0+255),b
  2741  000A0A  0E01               	movlw	high (_line4+1)
  2742  000A0C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2743  000A0E  0E73               	movlw	low STR_100
  2744  000A10  6FA3               	movwf	sprintf@f& (0+255),b
  2745  000A12  0E7F               	movlw	high STR_100
  2746  000A14  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2747  000A16  ECBB  F03D         	call	_sprintf	;wreg free
  2748                           
  2749                           ;Main.c: 112: break;
  2750  000A1A  D078               	goto	l898
  2751  000A1C  FFFF               	dw	65535	; assembler added errata NOP
  2752                           
  2753                           ;Main.c: 114: sprintf(&line1[1], "PERIODO DE TESTES");
  2754  000A1E  0E90               	movlw	low (_line1+1)
  2755  000A20  0100               	movlb	0	; () banked
  2756  000A22  6FA1               	movwf	sprintf@wh& (0+255),b
  2757  000A24  0E01               	movlw	high (_line1+1)
  2758  000A26  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2759  000A28  0E22               	movlw	low STR_101
  2760  000A2A  6FA3               	movwf	sprintf@f& (0+255),b
  2761  000A2C  0E7E               	movlw	high STR_101
  2762  000A2E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2763  000A30  ECBB  F03D         	call	_sprintf	;wreg free
  2764                           
  2765                           ;Main.c: 115: sprintf(&line2[1], "DATALOGER");
  2766  000A34  0E7B               	movlw	low (_line2+1)
  2767  000A36  0100               	movlb	0	; () banked
  2768  000A38  6FA1               	movwf	sprintf@wh& (0+255),b
  2769  000A3A  0E01               	movlw	high (_line2+1)
  2770  000A3C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2771  000A3E  0E69               	movlw	low STR_102
  2772  000A40  6FA3               	movwf	sprintf@f& (0+255),b
  2773  000A42  0E7F               	movlw	high STR_102
  2774  000A44  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2775  000A46  ECBB  F03D         	call	_sprintf	;wreg free
  2776                           
  2777                           ;Main.c: 116: sprintf(&line3[1], "INFO VERSAO");
  2778  000A4A  0E66               	movlw	low (_line3+1)
  2779  000A4C  0100               	movlb	0	; () banked
  2780  000A4E  6FA1               	movwf	sprintf@wh& (0+255),b
  2781  000A50  0E01               	movlw	high (_line3+1)
  2782  000A52  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2783  000A54  0E0F               	movlw	low STR_103
  2784  000A56  6FA3               	movwf	sprintf@f& (0+255),b
  2785  000A58  0E7F               	movlw	high STR_103
  2786  000A5A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2787  000A5C  ECBB  F03D         	call	_sprintf	;wreg free
  2788                           
  2789                           ;Main.c: 117: sprintf(&line4[1], "Iniciar Testes");
  2790  000A60  0E51               	movlw	low (_line4+1)
  2791  000A62  0100               	movlb	0	; () banked
  2792  000A64  6FA1               	movwf	sprintf@wh& (0+255),b
  2793  000A66  0E01               	movlw	high (_line4+1)
  2794  000A68  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2795  000A6A  0EA5               	movlw	low STR_104
  2796  000A6C  6FA3               	movwf	sprintf@f& (0+255),b
  2797  000A6E  0E7E               	movlw	high STR_104
  2798  000A70  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2799  000A72  ECBB  F03D         	call	_sprintf	;wreg free
  2800                           
  2801                           ;Main.c: 118: break;
  2802  000A76  D04A               	goto	l898
  2803  000A78  FFFF               	dw	65535	; assembler added errata NOP
  2804                           
  2805                           ;Main.c: 120: tela_ajusteRTC();
  2806  000A7A  ECA2  F00D         	call	_tela_ajusteRTC	;wreg free
  2807                           
  2808                           ;Main.c: 121: break;
  2809  000A7E  D046               	goto	l898
  2810  000A80  FFFF               	dw	65535	; assembler added errata NOP
  2811                           
  2812                           ;Main.c: 123: ajusteSP_Bombas();
  2813  000A82  EC2C  F00A         	call	_ajusteSP_Bombas	;wreg free
  2814                           
  2815                           ;Main.c: 124: break;
  2816  000A86  D042               	goto	l898
  2817  000A88  FFFF               	dw	65535	; assembler added errata NOP
  2818                           
  2819                           ;Main.c: 126: configurarEstacionaria();
  2820  000A8A  EC69  F011         	call	_configurarEstacionaria	;wreg free
  2821                           
  2822                           ;Main.c: 127: break;
  2823  000A8E  D03E               	goto	l898
  2824  000A90  FFFF               	dw	65535	; assembler added errata NOP
  2825                           
  2826                           ;Main.c: 129: configuraTelefones();
  2827  000A92  EC6A  F008         	call	_configuraTelefones	;wreg free
  2828                           
  2829                           ;Main.c: 130: break;
  2830  000A96  D03A               	goto	l898
  2831  000A98  FFFF               	dw	65535	; assembler added errata NOP
  2832                           
  2833                           ;Main.c: 132: tela_testeBombas();
  2834  000A9A  ECD4  F012         	call	_tela_testeBombas	;wreg free
  2835                           
  2836                           ;Main.c: 133: break;
  2837  000A9E  D036               	goto	l898
  2838  000AA0  FFFF               	dw	65535	; assembler added errata NOP
  2839                           
  2840                           ;Main.c: 135: dataLoger();
  2841  000AA2  EC7F  F00C         	call	_dataLoger	;wreg free
  2842                           
  2843                           ;Main.c: 136: break;
  2844  000AA6  D032               	goto	l898
  2845  000AA8  FFFF               	dw	65535	; assembler added errata NOP
  2846                           
  2847                           ;Main.c: 138: informacoes();
  2848  000AAA  EC34  F01E         	call	_informacoes	;wreg free
  2849                           
  2850                           ;Main.c: 139: break;
  2851  000AAE  D02E               	goto	l898
  2852  000AB0  FFFF               	dw	65535	; assembler added errata NOP
  2853                           
  2854                           ;Main.c: 141: acaoTesteBombas();
  2855  000AB2  EC7E  F006         	call	_acaoTesteBombas	;wreg free
  2856                           
  2857                           ;Main.c: 142: break;
  2858  000AB6  D02A               	goto	l898
  2859  000AB8  FFFF               	dw	65535	; assembler added errata NOP
  2860  000ABA  0E00               	movlw	0
  2861  000ABC  0100               	movlb	0	; () banked
  2862  000ABE  6FD9               	movwf	_menu_posi& (0+255),b
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;Main.c: 146: }
  2866                           
  2867                           ;Main.c: 145: break;
  2868  000AC0  D025               	goto	l898
  2869  000AC2                     l896:
  2870  000AC2  FFFF               	dw	65535	; assembler added errata NOP
  2871                           
  2872                           ; BSR set to: 0
  2873  000AC4  0100               	movlb	0	; () banked
  2874  000AC6  51D9               	movf	_menu_posi& (0+255),w,b
  2875                           
  2876                           ; Switch size 1, requested type "space"
  2877                           ; Number of cases is 11, Range of values is 0 to 28
  2878                           ; switch strategies available:
  2879                           ; Name         Instructions Cycles
  2880                           ; simple_byte           34    18 (average)
  2881                           ;	Chosen strategy is simple_byte
  2882  000AC8  0A00               	xorlw	0	; case 0
  2883  000ACA  B4D8               	btfsc	status,2,c
  2884  000ACC  D775               	goto	l897
  2885  000ACE  0A01               	xorlw	1	; case 1
  2886  000AD0  B4D8               	btfsc	status,2,c
  2887  000AD2  D776               	goto	l899
  2888  000AD4  0A03               	xorlw	3	; case 2
  2889  000AD6  B4D8               	btfsc	status,2,c
  2890  000AD8  D7A1               	goto	l900
  2891  000ADA  0A16               	xorlw	22	; case 20
  2892  000ADC  B4D8               	btfsc	status,2,c
  2893  000ADE  D7CC               	goto	l901
  2894  000AE0  0A01               	xorlw	1	; case 21
  2895  000AE2  B4D8               	btfsc	status,2,c
  2896  000AE4  D7CD               	goto	l902
  2897  000AE6  0A03               	xorlw	3	; case 22
  2898  000AE8  B4D8               	btfsc	status,2,c
  2899  000AEA  D7CE               	goto	l903
  2900  000AEC  0A01               	xorlw	1	; case 23
  2901  000AEE  B4D8               	btfsc	status,2,c
  2902  000AF0  D7CF               	goto	l904
  2903  000AF2  0A0F               	xorlw	15	; case 24
  2904  000AF4  B4D8               	btfsc	status,2,c
  2905  000AF6  D7D0               	goto	l905
  2906  000AF8  0A01               	xorlw	1	; case 25
  2907  000AFA  B4D8               	btfsc	status,2,c
  2908  000AFC  D7D1               	goto	l906
  2909  000AFE  0A02               	xorlw	2	; case 27
  2910  000B00  B4D8               	btfsc	status,2,c
  2911  000B02  D7D2               	goto	l907
  2912  000B04  0A07               	xorlw	7	; case 28
  2913  000B06  B4D8               	btfsc	status,2,c
  2914  000B08  D7D3               	goto	l908
  2915  000B0A  D7D6               	goto	l909
  2916  000B0C                     l898:
  2917  000B0C  FFFF               	dw	65535	; assembler added errata NOP
  2918                           
  2919                           ;Main.c: 148: if (menu_posi == 1 | menu_posi == 2) {
  2920                           
  2921                           ; BSR set to: 0
  2922  000B0E  0100               	movlb	0	; () banked
  2923  000B10  05D9               	decf	_menu_posi& (0+255),w,b
  2924  000B12  B4D8               	btfsc	status,2,c
  2925  000B14  D09A               	goto	l913
  2926                           
  2927                           ; BSR set to: 0
  2928  000B16  0E02               	movlw	2
  2929  000B18  19D9               	xorwf	_menu_posi& (0+255),w,b
  2930  000B1A  B4D8               	btfsc	status,2,c
  2931  000B1C  D096               	goto	l913
  2932  000B1E  D0D0               	goto	l937
  2933  000B20  FFFF               	dw	65535	; assembler added errata NOP
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;Main.c: 152: menu_posi = 1;
  2937                           
  2938                           ; BSR set to: 0
  2939  000B22  0E01               	movlw	1
  2940  000B24  6FD9               	movwf	_menu_posi& (0+255),b
  2941                           
  2942                           ;Main.c: 153: line1[0] = '>';
  2943  000B26  0E3E               	movlw	62
  2944  000B28  0101               	movlb	1	; () banked
  2945  000B2A  6F8F               	movwf	_line1& (0+255),b
  2946                           
  2947                           ; BSR set to: 1
  2948                           ;Main.c: 154: if (btPress(4)) {
  2949  000B2C  0E04               	movlw	4
  2950  000B2E  EC6E  F01E         	call	_btPress
  2951  000B32  0900               	iorlw	0
  2952  000B34  B4D8               	btfsc	status,2,c
  2953  000B36  D0A4               	goto	l916
  2954                           
  2955                           ;Main.c: 155: _menu_posi = menu_posi;
  2956  000B38  C0D9  F0D8         	movff	_menu_posi,__menu_posi
  2957                           
  2958                           ;Main.c: 156: menu_posi = 20;
  2959  000B3C  0E14               	movlw	20
  2960  000B3E  D065               	goto	L5
  2961  000B40  FFFF               	dw	65535	; assembler added errata NOP
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;Main.c: 160: menu_posi = 1;
  2965                           
  2966                           ; BSR set to: 0
  2967  000B42  0E01               	movlw	1
  2968  000B44  6FD9               	movwf	_menu_posi& (0+255),b
  2969                           
  2970                           ;Main.c: 161: line2[0] = '>';
  2971  000B46  0E3E               	movlw	62
  2972  000B48  0101               	movlb	1	; () banked
  2973  000B4A  6F7A               	movwf	_line2& (0+255),b
  2974                           
  2975                           ; BSR set to: 1
  2976                           ;Main.c: 162: if (btPress(4)) {
  2977  000B4C  0E04               	movlw	4
  2978  000B4E  EC6E  F01E         	call	_btPress
  2979  000B52  0900               	iorlw	0
  2980  000B54  B4D8               	btfsc	status,2,c
  2981  000B56  D094               	goto	l916
  2982                           
  2983                           ;Main.c: 163: _menu_posi = menu_posi;
  2984  000B58  C0D9  F0D8         	movff	_menu_posi,__menu_posi
  2985                           
  2986                           ;Main.c: 164: menu_posi = 21;
  2987  000B5C  0E15               	movlw	21
  2988  000B5E  D055               	goto	L5
  2989  000B60  FFFF               	dw	65535	; assembler added errata NOP
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;Main.c: 168: menu_posi = 1;
  2993                           
  2994                           ; BSR set to: 0
  2995  000B62  0E01               	movlw	1
  2996  000B64  6FD9               	movwf	_menu_posi& (0+255),b
  2997                           
  2998                           ;Main.c: 169: line3[0] = '>';
  2999  000B66  0E3E               	movlw	62
  3000  000B68  0101               	movlb	1	; () banked
  3001  000B6A  6F65               	movwf	_line3& (0+255),b
  3002                           
  3003                           ; BSR set to: 1
  3004                           ;Main.c: 170: if (btPress(4)) {
  3005  000B6C  0E04               	movlw	4
  3006  000B6E  EC6E  F01E         	call	_btPress
  3007  000B72  0900               	iorlw	0
  3008  000B74  B4D8               	btfsc	status,2,c
  3009  000B76  D084               	goto	l916
  3010                           
  3011                           ;Main.c: 171: _menu_posi = menu_posi;
  3012  000B78  C0D9  F0D8         	movff	_menu_posi,__menu_posi
  3013                           
  3014                           ;Main.c: 172: menu_posi = 22;
  3015  000B7C  0E16               	movlw	22
  3016  000B7E  D045               	goto	L5
  3017  000B80  FFFF               	dw	65535	; assembler added errata NOP
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;Main.c: 176: menu_posi = 1;
  3021                           
  3022                           ; BSR set to: 0
  3023  000B82  0E01               	movlw	1
  3024  000B84  6FD9               	movwf	_menu_posi& (0+255),b
  3025                           
  3026                           ;Main.c: 177: line4[0] = '>';
  3027  000B86  0E3E               	movlw	62
  3028  000B88  0101               	movlb	1	; () banked
  3029  000B8A  6F50               	movwf	_line4& (0+255),b
  3030                           
  3031                           ; BSR set to: 1
  3032                           ;Main.c: 178: if (btPress(4)) {
  3033  000B8C  0E04               	movlw	4
  3034  000B8E  EC6E  F01E         	call	_btPress
  3035  000B92  0900               	iorlw	0
  3036  000B94  B4D8               	btfsc	status,2,c
  3037  000B96  D074               	goto	l916
  3038                           
  3039                           ;Main.c: 179: _menu_posi = menu_posi;
  3040  000B98  C0D9  F0D8         	movff	_menu_posi,__menu_posi
  3041                           
  3042                           ;Main.c: 180: menu_posi = 23;
  3043  000B9C  0E17               	movlw	23
  3044  000B9E  D035               	goto	L5
  3045  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;Main.c: 184: menu_posi = 2;
  3049                           
  3050                           ; BSR set to: 0
  3051  000BA2  0E02               	movlw	2
  3052  000BA4  6FD9               	movwf	_menu_posi& (0+255),b
  3053                           
  3054                           ;Main.c: 185: line1[0] = '>';
  3055  000BA6  0E3E               	movlw	62
  3056  000BA8  0101               	movlb	1	; () banked
  3057  000BAA  6F8F               	movwf	_line1& (0+255),b
  3058                           
  3059                           ; BSR set to: 1
  3060                           ;Main.c: 186: if (btPress(4)) {
  3061  000BAC  0E04               	movlw	4
  3062  000BAE  EC6E  F01E         	call	_btPress
  3063  000BB2  0900               	iorlw	0
  3064  000BB4  B4D8               	btfsc	status,2,c
  3065  000BB6  D064               	goto	l916
  3066                           
  3067                           ;Main.c: 187: _menu_posi = menu_posi;
  3068  000BB8  C0D9  F0D8         	movff	_menu_posi,__menu_posi
  3069                           
  3070                           ;Main.c: 188: menu_posi = 24;
  3071  000BBC  0E18               	movlw	24
  3072  000BBE  D025               	goto	L5
  3073  000BC0  FFFF               	dw	65535	; assembler added errata NOP
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;Main.c: 192: line2[0] = '>';
  3077                           
  3078                           ; BSR set to: 0
  3079  000BC2  0E3E               	movlw	62
  3080  000BC4  0101               	movlb	1	; () banked
  3081  000BC6  6F7A               	movwf	_line2& (0+255),b
  3082                           
  3083                           ;Main.c: 193: menu_posi = 2;
  3084  000BC8  0E02               	movlw	2
  3085  000BCA  0100               	movlb	0	; () banked
  3086  000BCC  6FD9               	movwf	_menu_posi& (0+255),b
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;Main.c: 194: if (btPress(4)) {
  3090  000BCE  0E04               	movlw	4
  3091  000BD0  EC6E  F01E         	call	_btPress
  3092  000BD4  0900               	iorlw	0
  3093  000BD6  B4D8               	btfsc	status,2,c
  3094  000BD8  D053               	goto	l916
  3095                           
  3096                           ;Main.c: 195: _menu_posi = menu_posi;
  3097  000BDA  C0D9  F0D8         	movff	_menu_posi,__menu_posi
  3098                           
  3099                           ;Main.c: 196: menu_posi = 25;
  3100  000BDE  0E19               	movlw	25
  3101  000BE0  0100               	movlb	0	; () banked
  3102  000BE2  6FD9               	movwf	_menu_posi& (0+255),b
  3103                           
  3104                           ;Main.c: 197: dtl_carregar_log = 1;
  3105  000BE4  0E01               	movlw	1
  3106  000BE6  6E53               	movwf	_dtl_carregar_log,c
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;Main.c: 198: }
  3110                           ;Main.c: 199: break;
  3111  000BE8  D04B               	goto	l916
  3112  000BEA  FFFF               	dw	65535	; assembler added errata NOP
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;Main.c: 201: line3[0] = '>';
  3116                           
  3117                           ; BSR set to: 0
  3118  000BEC  0E3E               	movlw	62
  3119  000BEE  0101               	movlb	1	; () banked
  3120  000BF0  6F65               	movwf	_line3& (0+255),b
  3121                           
  3122                           ;Main.c: 202: menu_posi = 2;
  3123  000BF2  0E02               	movlw	2
  3124  000BF4  0100               	movlb	0	; () banked
  3125  000BF6  6FD9               	movwf	_menu_posi& (0+255),b
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;Main.c: 203: if (btPress(4)) {
  3129  000BF8  0E04               	movlw	4
  3130  000BFA  EC6E  F01E         	call	_btPress
  3131  000BFE  0900               	iorlw	0
  3132  000C00  B4D8               	btfsc	status,2,c
  3133  000C02  D03E               	goto	l916
  3134                           
  3135                           ;Main.c: 204: _menu_posi = menu_posi;
  3136  000C04  C0D9  F0D8         	movff	_menu_posi,__menu_posi
  3137                           
  3138                           ;Main.c: 205: menu_posi = 27;
  3139  000C08  0E1B               	movlw	27
  3140  000C0A                     L5:
  3141  000C0A  FFFF               	dw	65535	; assembler added errata NOP
  3142  000C0C  0100               	movlb	0	; () banked
  3143  000C0E  D01A               	goto	L6
  3144  000C10  FFFF               	dw	65535	; assembler added errata NOP
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;Main.c: 209: line4[0] = '>';
  3148                           
  3149                           ; BSR set to: 0
  3150  000C12  0E3E               	movlw	62
  3151  000C14  0101               	movlb	1	; () banked
  3152  000C16  6F50               	movwf	_line4& (0+255),b
  3153                           
  3154                           ;Main.c: 210: menu_posi = 2;
  3155  000C18  0E02               	movlw	2
  3156  000C1A  0100               	movlb	0	; () banked
  3157  000C1C  6FD9               	movwf	_menu_posi& (0+255),b
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;Main.c: 211: if (btPress(4)) {
  3161  000C1E  0E04               	movlw	4
  3162  000C20  EC6E  F01E         	call	_btPress
  3163  000C24  0900               	iorlw	0
  3164  000C26  B4D8               	btfsc	status,2,c
  3165  000C28  D02B               	goto	l916
  3166                           
  3167                           ;Main.c: 212: if (!incendio) {
  3168  000C2A  0100               	movlb	0	; () banked
  3169  000C2C  51DB               	movf	_incendio& (0+255),w,b
  3170  000C2E  A4D8               	btfss	status,2,c
  3171  000C30  D027               	goto	l916
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;Main.c: 213: menu_posi = 28;
  3175  000C32  0E1C               	movlw	28
  3176  000C34  6FD9               	movwf	_menu_posi& (0+255),b
  3177                           
  3178                           ;Main.c: 214: teste_run = 2;
  3179  000C36  0E02               	movlw	2
  3180  000C38  6FDC               	movwf	_teste_run& (0+255),b
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;Main.c: 215: }
  3184                           ;Main.c: 216: }
  3185                           ;Main.c: 217: break;
  3186                           
  3187                           ; BSR set to: 0
  3188  000C3A  D022               	goto	l916
  3189  000C3C  FFFF               	dw	65535	; assembler added errata NOP
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;Main.c: 219: sub_menu_posi = 1;
  3193                           
  3194                           ; BSR set to: 0
  3195  000C3E  0E01               	movlw	1
  3196  000C40  6E69               	movwf	_sub_menu_posi,c
  3197                           
  3198                           ;Main.c: 220: menu_posi = 1;
  3199  000C42  0E01               	movlw	1
  3200  000C44                     L6:
  3201  000C44  FFFF               	dw	65535	; assembler added errata NOP
  3202  000C46  6FD9               	movwf	_menu_posi& (0+255),b
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;Main.c: 222: }
  3206                           
  3207                           ;Main.c: 221: break;
  3208  000C48  D01B               	goto	l916
  3209  000C4A                     l913:
  3210  000C4A  FFFF               	dw	65535	; assembler added errata NOP
  3211                           
  3212                           ; BSR set to: 0
  3213                           
  3214                           ; BSR set to: 0
  3215  000C4C  5069               	movf	_sub_menu_posi,w,c
  3216                           
  3217                           ; Switch size 1, requested type "space"
  3218                           ; Number of cases is 8, Range of values is 1 to 8
  3219                           ; switch strategies available:
  3220                           ; Name         Instructions Cycles
  3221                           ; simple_byte           25    13 (average)
  3222                           ;	Chosen strategy is simple_byte
  3223  000C4E  0A01               	xorlw	1	; case 1
  3224  000C50  B4D8               	btfsc	status,2,c
  3225  000C52  D766               	goto	l914
  3226  000C54  0A03               	xorlw	3	; case 2
  3227  000C56  B4D8               	btfsc	status,2,c
  3228  000C58  D773               	goto	l917
  3229  000C5A  0A01               	xorlw	1	; case 3
  3230  000C5C  B4D8               	btfsc	status,2,c
  3231  000C5E  D780               	goto	l919
  3232  000C60  0A07               	xorlw	7	; case 4
  3233  000C62  B4D8               	btfsc	status,2,c
  3234  000C64  D78D               	goto	l921
  3235  000C66  0A01               	xorlw	1	; case 5
  3236  000C68  B4D8               	btfsc	status,2,c
  3237  000C6A  D79A               	goto	l923
  3238  000C6C  0A03               	xorlw	3	; case 6
  3239  000C6E  B4D8               	btfsc	status,2,c
  3240  000C70  D7A7               	goto	l925
  3241  000C72  0A01               	xorlw	1	; case 7
  3242  000C74  B4D8               	btfsc	status,2,c
  3243  000C76  D7B9               	goto	l927
  3244  000C78  0A0F               	xorlw	15	; case 8
  3245  000C7A  B4D8               	btfsc	status,2,c
  3246  000C7C  D7C9               	goto	l929
  3247  000C7E  D7DE               	goto	l932
  3248  000C80                     l916:
  3249  000C80  FFFF               	dw	65535	; assembler added errata NOP
  3250                           
  3251                           ;Main.c: 224: if (btPress(3)) {
  3252                           
  3253                           ; BSR set to: 0
  3254  000C82  0E03               	movlw	3
  3255  000C84  EC6E  F01E         	call	_btPress
  3256  000C88  0900               	iorlw	0
  3257  000C8A  B4D8               	btfsc	status,2,c
  3258  000C8C  D002               	goto	l933
  3259                           
  3260                           ;Main.c: 225: sub_menu_posi--;
  3261  000C8E  0669               	decf	_sub_menu_posi,f,c
  3262                           
  3263                           ;Main.c: 226: } else if (btPress(2)) {
  3264  000C90  D017               	goto	l937
  3265  000C92                     l933:
  3266  000C92  FFFF               	dw	65535	; assembler added errata NOP
  3267  000C94  0E02               	movlw	2
  3268  000C96  EC6E  F01E         	call	_btPress
  3269  000C9A  0900               	iorlw	0
  3270  000C9C  B4D8               	btfsc	status,2,c
  3271  000C9E  D002               	goto	l935
  3272                           
  3273                           ;Main.c: 227: sub_menu_posi++;
  3274  000CA0  2A69               	incf	_sub_menu_posi,f,c
  3275                           
  3276                           ;Main.c: 228: } else if (btPress(1)) {
  3277  000CA2  D00E               	goto	l937
  3278  000CA4                     l935:
  3279  000CA4  FFFF               	dw	65535	; assembler added errata NOP
  3280  000CA6  0E01               	movlw	1
  3281  000CA8  EC6E  F01E         	call	_btPress
  3282  000CAC  0900               	iorlw	0
  3283  000CAE  B4D8               	btfsc	status,2,c
  3284  000CB0  D007               	goto	l937
  3285                           
  3286                           ;Main.c: 229: menu_posi = 0;
  3287  000CB2  0E00               	movlw	0
  3288  000CB4  0100               	movlb	0	; () banked
  3289  000CB6  6FD9               	movwf	_menu_posi& (0+255),b
  3290                           
  3291                           ;Main.c: 230: option_posi = 0;
  3292  000CB8  0E00               	movlw	0
  3293  000CBA  6FDA               	movwf	_option_posi& (0+255),b
  3294                           
  3295                           ;Main.c: 231: sub_menu_posi = 1;
  3296  000CBC  0E01               	movlw	1
  3297  000CBE  6E69               	movwf	_sub_menu_posi,c
  3298  000CC0                     l937:
  3299  000CC0  FFFF               	dw	65535	; assembler added errata NOP
  3300                           
  3301                           ;Main.c: 232: }
  3302                           ;Main.c: 233: }
  3303                           ;Main.c: 235: if (menu_posi != 28) {
  3304                           
  3305                           ; BSR set to: 0
  3306                           
  3307                           ; BSR set to: 0
  3308                           
  3309                           ; BSR set to: 0
  3310                           
  3311                           ; BSR set to: 0
  3312  000CC2  0E1C               	movlw	28
  3313  000CC4  0100               	movlb	0	; () banked
  3314  000CC6  19D9               	xorwf	_menu_posi& (0+255),w,b
  3315  000CC8  B4D8               	btfsc	status,2,c
  3316  000CCA  D004               	goto	l938
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;Main.c: 236: teste_run = 0;
  3320  000CCC  0E00               	movlw	0
  3321  000CCE  6FDC               	movwf	_teste_run& (0+255),b
  3322                           
  3323                           ;Main.c: 237: shift[2] = 0;
  3324  000CD0  0E00               	movlw	0
  3325  000CD2  6E46               	movwf	_shift+2,c
  3326  000CD4                     l938:
  3327  000CD4  FFFF               	dw	65535	; assembler added errata NOP
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;Main.c: 238: }
  3331                           ;Main.c: 239: atualizarLCD(line1, line2, line3, line4);
  3332                           
  3333                           ; BSR set to: 0
  3334  000CD6  0E8F               	movlw	low _line1
  3335  000CD8  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3336  000CDA  0E01               	movlw	high _line1
  3337  000CDC  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3338  000CDE  0E7A               	movlw	low _line2
  3339  000CE0  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3340  000CE2  0E01               	movlw	high _line2
  3341  000CE4  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3342  000CE6  0E65               	movlw	low _line3
  3343  000CE8  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3344  000CEA  0E01               	movlw	high _line3
  3345  000CEC  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3346  000CEE  0E50               	movlw	low _line4
  3347  000CF0  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3348  000CF2  0E01               	movlw	high _line4
  3349  000CF4  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3350  000CF6  EC1E  F019         	call	_atualizarLCD	;wreg free
  3351  000CFA  D64D               	goto	l894
  3352  000CFC                     __end_of_main:
  3353                           	opt stack 0
  3354                           tblptru	equ	0xFF8
  3355                           tblptrh	equ	0xFF7
  3356                           tblptrl	equ	0xFF6
  3357                           tablat	equ	0xFF5
  3358                           postinc0	equ	0xFEE
  3359                           wreg	equ	0xFE8
  3360                           postdec1	equ	0xFE5
  3361                           fsr1l	equ	0xFE1
  3362                           status	equ	0xFD8
  3363                           
  3364 ;; *************** function _tela_testeBombas *****************
  3365 ;; Defined at:
  3366 ;;		line 8 in file "tela_TESTE_BOMBAS.h"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;		None
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;		None
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  1    wreg      void 
  3373 ;; Registers used:
  3374 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3380 ;;      Params:         0       0       0       0       0       0       0
  3381 ;;      Locals:         0       0       0       0       0       0       0
  3382 ;;      Temps:          0       2       0       0       0       0       0
  3383 ;;      Totals:         0       2       0       0       0       0       0
  3384 ;;Total ram usage:        2 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; Hardware stack levels required when called:    9
  3387 ;; This function calls:
  3388 ;;		_blink
  3389 ;;		_btPress
  3390 ;;		_sprintf
  3391 ;;		_writeEEPROM_ext
  3392 ;; This function is called by:
  3393 ;;		_main
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text1
  3398  0025A8                     __ptext1:
  3399                           	opt stack 0
  3400  0025A8                     _tela_testeBombas:
  3401                           	opt stack 0
  3402  0025A8  FFFF               	dw	65535	; assembler added errata NOP
  3403                           
  3404                           ;tela_TESTE_BOMBAS.h: 10: sprintf(line1, "#Proximo em %2d dias", (intervalo_teste_dia - 
      +                          dias_restante_teste));
  3405                           
  3406                           ;incstack = 0
  3407  0025AA  0E8F               	movlw	low _line1
  3408  0025AC  0100               	movlb	0	; () banked
  3409  0025AE  6FA1               	movwf	sprintf@wh& (0+255),b
  3410  0025B0  0E01               	movlw	high _line1
  3411  0025B2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3412  0025B4  0E26               	movlw	low STR_59
  3413  0025B6  6FA3               	movwf	sprintf@f& (0+255),b
  3414  0025B8  0E7D               	movlw	high STR_59
  3415  0025BA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3416  0025BC  51EA               	movf	_dias_restante_teste& (0+255),w,b
  3417  0025BE  6FB7               	movwf	??_tela_testeBombas& (0+255),b
  3418  0025C0  6BB8               	clrf	(??_tela_testeBombas+1)& (0+255),b
  3419  0025C2  1FB7               	comf	??_tela_testeBombas& (0+255),f,b
  3420  0025C4  1FB8               	comf	(??_tela_testeBombas+1)& (0+255),f,b
  3421  0025C6  4BB7               	infsnz	??_tela_testeBombas& (0+255),f,b
  3422  0025C8  2BB8               	incf	(??_tela_testeBombas+1)& (0+255),f,b
  3423  0025CA  51EB               	movf	_intervalo_teste_dia& (0+255),w,b
  3424  0025CC  25B7               	addwf	??_tela_testeBombas& (0+255),w,b
  3425  0025CE  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3426  0025D0  0E00               	movlw	0
  3427  0025D2  21B8               	addwfc	(??_tela_testeBombas+1)& (0+255),w,b
  3428  0025D4  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3429  0025D6  ECBB  F03D         	call	_sprintf	;wreg free
  3430                           
  3431                           ;tela_TESTE_BOMBAS.h: 11: sprintf(line2, "INTERVALO: %2d dias", intervalo_teste_dia);
  3432  0025DA  0E7A               	movlw	low _line2
  3433  0025DC  0100               	movlb	0	; () banked
  3434  0025DE  6FA1               	movwf	sprintf@wh& (0+255),b
  3435  0025E0  0E01               	movlw	high _line2
  3436  0025E2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3437  0025E4  0E63               	movlw	low STR_60
  3438  0025E6  6FA3               	movwf	sprintf@f& (0+255),b
  3439  0025E8  0E7D               	movlw	high STR_60
  3440  0025EA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3441  0025EC  C0EB  F0A5         	movff	_intervalo_teste_dia,?_sprintf+4
  3442  0025F0  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3443  0025F2  ECBB  F03D         	call	_sprintf	;wreg free
  3444                           
  3445                           ;tela_TESTE_BOMBAS.h: 12: sprintf(line3, "HORARIO: %02d horas", horario_de_teste);
  3446  0025F6  0E65               	movlw	low _line3
  3447  0025F8  0100               	movlb	0	; () banked
  3448  0025FA  6FA1               	movwf	sprintf@wh& (0+255),b
  3449  0025FC  0E01               	movlw	high _line3
  3450  0025FE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3451  002600  0E77               	movlw	low STR_61
  3452  002602  6FA3               	movwf	sprintf@f& (0+255),b
  3453  002604  0E7D               	movlw	high STR_61
  3454  002606  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3455  002608  C0E9  F0A5         	movff	_horario_de_teste,?_sprintf+4
  3456  00260C  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3457  00260E  ECBB  F03D         	call	_sprintf	;wreg free
  3458                           
  3459                           ;tela_TESTE_BOMBAS.h: 14: if (btPress(1)) {
  3460  002612  0E01               	movlw	1
  3461  002614  EC6E  F01E         	call	_btPress
  3462  002618  0900               	iorlw	0
  3463  00261A  B4D8               	btfsc	status,2,c
  3464  00261C  D00C               	goto	l730
  3465                           
  3466                           ;tela_TESTE_BOMBAS.h: 15: writeEEPROM_ext(6, intervalo_teste_dia);
  3467  00261E  C0EB  F08C         	movff	_intervalo_teste_dia,writeEEPROM_ext@data
  3468  002622  0E06               	movlw	6
  3469  002624  EC98  F03D         	call	_writeEEPROM_ext
  3470                           
  3471                           ;tela_TESTE_BOMBAS.h: 16: writeEEPROM_ext(11, horario_de_teste);
  3472  002628  C0E9  F08C         	movff	_horario_de_teste,writeEEPROM_ext@data
  3473  00262C  0E0B               	movlw	11
  3474  00262E  EC98  F03D         	call	_writeEEPROM_ext
  3475                           
  3476                           ;tela_TESTE_BOMBAS.h: 17: menu_posi = _menu_posi;
  3477  002632  C0D8  F0D9         	movff	__menu_posi,_menu_posi
  3478  002636                     l730:
  3479  002636  FFFF               	dw	65535	; assembler added errata NOP
  3480                           
  3481                           ;tela_TESTE_BOMBAS.h: 18: }
  3482                           ;tela_TESTE_BOMBAS.h: 19: if (btPress(4)) {
  3483  002638  0E04               	movlw	4
  3484  00263A  EC6E  F01E         	call	_btPress
  3485  00263E  0900               	iorlw	0
  3486  002640  B4D8               	btfsc	status,2,c
  3487  002642  D04A               	goto	l732
  3488                           
  3489                           ;tela_TESTE_BOMBAS.h: 20: option_posi++;
  3490  002644  0100               	movlb	0	; () banked
  3491  002646  2BDA               	incf	_option_posi& (0+255),f,b
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;tela_TESTE_BOMBAS.h: 21: }
  3495                           ;tela_TESTE_BOMBAS.h: 22: switch (option_posi) {
  3496  002648  D047               	goto	l732
  3497  00264A  FFFF               	dw	65535	; assembler added errata NOP
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;tela_TESTE_BOMBAS.h: 24: blink(line2, 11, 14);
  3501                           
  3502                           ; BSR set to: 0
  3503  00264C  0E7A               	movlw	low _line2
  3504  00264E  6F80               	movwf	blink@line& (0+255),b
  3505  002650  0E01               	movlw	high _line2
  3506  002652  6F81               	movwf	(blink@line+1)& (0+255),b
  3507  002654  0E0B               	movlw	11
  3508  002656  6F82               	movwf	blink@start& (0+255),b
  3509  002658  0E0E               	movlw	14
  3510  00265A  6F83               	movwf	blink@end& (0+255),b
  3511  00265C  ECD8  F03C         	call	_blink	;wreg free
  3512                           
  3513                           ;tela_TESTE_BOMBAS.h: 25: if (btPress(3)) {
  3514  002660  0E03               	movlw	3
  3515  002662  EC6E  F01E         	call	_btPress
  3516  002666  0900               	iorlw	0
  3517  002668  B4D8               	btfsc	status,2,c
  3518  00266A  D002               	goto	l734
  3519                           
  3520                           ;tela_TESTE_BOMBAS.h: 26: intervalo_teste_dia++;
  3521  00266C  0100               	movlb	0	; () banked
  3522  00266E  2BEB               	incf	_intervalo_teste_dia& (0+255),f,b
  3523  002670                     l734:
  3524  002670  FFFF               	dw	65535	; assembler added errata NOP
  3525                           
  3526                           ;tela_TESTE_BOMBAS.h: 27: }
  3527                           ;tela_TESTE_BOMBAS.h: 28: if (btPress(2)) {
  3528                           
  3529                           ; BSR set to: 0
  3530  002672  0E02               	movlw	2
  3531  002674  EC6E  F01E         	call	_btPress
  3532  002678  0900               	iorlw	0
  3533  00267A  B4D8               	btfsc	status,2,c
  3534  00267C  D037               	goto	l736
  3535                           
  3536                           ;tela_TESTE_BOMBAS.h: 29: intervalo_teste_dia--;
  3537  00267E  0100               	movlb	0	; () banked
  3538  002680  07EB               	decf	_intervalo_teste_dia& (0+255),f,b
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;tela_TESTE_BOMBAS.h: 30: }
  3542                           ;tela_TESTE_BOMBAS.h: 31: break;
  3543  002682  D034               	goto	l736
  3544  002684  FFFF               	dw	65535	; assembler added errata NOP
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;tela_TESTE_BOMBAS.h: 33: blink(line3, 9, 11);
  3548                           
  3549                           ; BSR set to: 0
  3550  002686  0E65               	movlw	low _line3
  3551  002688  6F80               	movwf	blink@line& (0+255),b
  3552  00268A  0E01               	movlw	high _line3
  3553  00268C  6F81               	movwf	(blink@line+1)& (0+255),b
  3554  00268E  0E09               	movlw	9
  3555  002690  6F82               	movwf	blink@start& (0+255),b
  3556  002692  0E0B               	movlw	11
  3557  002694  6F83               	movwf	blink@end& (0+255),b
  3558  002696  ECD8  F03C         	call	_blink	;wreg free
  3559                           
  3560                           ;tela_TESTE_BOMBAS.h: 34: if (btPress(3)) {
  3561  00269A  0E03               	movlw	3
  3562  00269C  EC6E  F01E         	call	_btPress
  3563  0026A0  0900               	iorlw	0
  3564  0026A2  B4D8               	btfsc	status,2,c
  3565  0026A4  D002               	goto	l738
  3566                           
  3567                           ;tela_TESTE_BOMBAS.h: 35: horario_de_teste++;
  3568  0026A6  0100               	movlb	0	; () banked
  3569  0026A8  2BE9               	incf	_horario_de_teste& (0+255),f,b
  3570  0026AA                     l738:
  3571  0026AA  FFFF               	dw	65535	; assembler added errata NOP
  3572                           
  3573                           ;tela_TESTE_BOMBAS.h: 36: }
  3574                           ;tela_TESTE_BOMBAS.h: 37: if (btPress(2)) {
  3575                           
  3576                           ; BSR set to: 0
  3577  0026AC  0E02               	movlw	2
  3578  0026AE  EC6E  F01E         	call	_btPress
  3579  0026B2  0900               	iorlw	0
  3580  0026B4  B4D8               	btfsc	status,2,c
  3581  0026B6  D002               	goto	l739
  3582                           
  3583                           ;tela_TESTE_BOMBAS.h: 38: horario_de_teste--;
  3584  0026B8  0100               	movlb	0	; () banked
  3585  0026BA  07E9               	decf	_horario_de_teste& (0+255),f,b
  3586  0026BC                     l739:
  3587  0026BC  FFFF               	dw	65535	; assembler added errata NOP
  3588                           
  3589                           ;tela_TESTE_BOMBAS.h: 39: }
  3590                           ;tela_TESTE_BOMBAS.h: 40: if (horario_de_teste > 23 || horario_de_teste < 0) {
  3591                           
  3592                           ; BSR set to: 0
  3593  0026BE  0E18               	movlw	24
  3594  0026C0  0100               	movlb	0	; () banked
  3595  0026C2  61E9               	cpfslt	_horario_de_teste& (0+255),b
  3596  0026C4  D001               	goto	l742
  3597  0026C6  D012               	goto	l736
  3598  0026C8                     l742:
  3599  0026C8  FFFF               	dw	65535	; assembler added errata NOP
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;tela_TESTE_BOMBAS.h: 41: horario_de_teste = 0;
  3603                           
  3604                           ; BSR set to: 0
  3605  0026CA  0E00               	movlw	0
  3606  0026CC  6FE9               	movwf	_horario_de_teste& (0+255),b
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;tela_TESTE_BOMBAS.h: 42: }
  3610                           ;tela_TESTE_BOMBAS.h: 43: break;
  3611  0026CE  D00E               	goto	l736
  3612  0026D0  FFFF               	dw	65535	; assembler added errata NOP
  3613                           
  3614                           ; BSR set to: 0
  3615                           
  3616                           ; BSR set to: 0
  3617  0026D2  0E00               	movlw	0
  3618  0026D4  6FDA               	movwf	_option_posi& (0+255),b
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;tela_TESTE_BOMBAS.h: 46: }
  3622                           
  3623                           ;tela_TESTE_BOMBAS.h: 45: break;
  3624  0026D6  D00A               	goto	l736
  3625  0026D8                     l732:
  3626  0026D8  FFFF               	dw	65535	; assembler added errata NOP
  3627                           
  3628                           ; BSR set to: 0
  3629  0026DA  0100               	movlb	0	; () banked
  3630  0026DC  51DA               	movf	_option_posi& (0+255),w,b
  3631                           
  3632                           ; Switch size 1, requested type "space"
  3633                           ; Number of cases is 2, Range of values is 0 to 1
  3634                           ; switch strategies available:
  3635                           ; Name         Instructions Cycles
  3636                           ; simple_byte            7     4 (average)
  3637                           ;	Chosen strategy is simple_byte
  3638  0026DE  0A00               	xorlw	0	; case 0
  3639  0026E0  B4D8               	btfsc	status,2,c
  3640  0026E2  D7B3               	goto	l733
  3641  0026E4  0A01               	xorlw	1	; case 1
  3642  0026E6  B4D8               	btfsc	status,2,c
  3643  0026E8  D7CD               	goto	l737
  3644  0026EA  D7F2               	goto	l743
  3645  0026EC                     l736:
  3646  0026EC  FFFF               	dw	65535	; assembler added errata NOP
  3647                           
  3648                           ; BSR set to: 0
  3649  0026EE  0012               	return		;funcret
  3650  0026F0  FFFF               	dw	65535	; errata NOP
  3651  0026F2                     __end_of_tela_testeBombas:
  3652                           	opt stack 0
  3653                           tblptru	equ	0xFF8
  3654                           tblptrh	equ	0xFF7
  3655                           tblptrl	equ	0xFF6
  3656                           tablat	equ	0xFF5
  3657                           postinc0	equ	0xFEE
  3658                           wreg	equ	0xFE8
  3659                           postdec1	equ	0xFE5
  3660                           fsr1l	equ	0xFE1
  3661                           status	equ	0xFD8
  3662                           
  3663 ;; *************** function _tela_ajusteRTC *****************
  3664 ;; Defined at:
  3665 ;;		line 11 in file "tela_RELOGIO.h"
  3666 ;; Parameters:    Size  Location     Type
  3667 ;;		None
  3668 ;; Auto vars:     Size  Location     Type
  3669 ;;		None
  3670 ;; Return value:  Size  Location     Type
  3671 ;;                  1    wreg      void 
  3672 ;; Registers used:
  3673 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3674 ;; Tracked objects:
  3675 ;;		On entry : 0/0
  3676 ;;		On exit  : 0/0
  3677 ;;		Unchanged: 0/0
  3678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3679 ;;      Params:         0       0       0       0       0       0       0
  3680 ;;      Locals:         0       0       0       0       0       0       0
  3681 ;;      Temps:          0       0       0       0       0       0       0
  3682 ;;      Totals:         0       0       0       0       0       0       0
  3683 ;;Total ram usage:        0 bytes
  3684 ;; Hardware stack levels used:    1
  3685 ;; Hardware stack levels required when called:    9
  3686 ;; This function calls:
  3687 ;;		_blink
  3688 ;;		_btPress
  3689 ;;		_setDS1307TimeDate
  3690 ;;		_sprintf
  3691 ;;		_validaRTC
  3692 ;; This function is called by:
  3693 ;;		_main
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           	psect	text2
  3698  001B44                     __ptext2:
  3699                           	opt stack 0
  3700  001B44                     _tela_ajusteRTC:
  3701                           	opt stack 0
  3702  001B44  FFFF               	dw	65535	; assembler added errata NOP
  3703                           
  3704                           ;tela_RELOGIO.h: 12: sprintf(line1, "DATA:");
  3705                           
  3706                           ;incstack = 0
  3707  001B46  0E8F               	movlw	low _line1
  3708  001B48  0100               	movlb	0	; () banked
  3709  001B4A  6FA1               	movwf	sprintf@wh& (0+255),b
  3710  001B4C  0E01               	movlw	high _line1
  3711  001B4E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3712  001B50  0ED4               	movlw	low STR_55
  3713  001B52  6FA3               	movwf	sprintf@f& (0+255),b
  3714  001B54  0E7F               	movlw	high STR_55
  3715  001B56  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3716  001B58  ECBB  F03D         	call	_sprintf	;wreg free
  3717                           
  3718                           ;tela_RELOGIO.h: 13: sprintf(line2, "%02d/%02d/%02d", rtc.date, rtc.month, rtc.year);
  3719  001B5C  0E7A               	movlw	low _line2
  3720  001B5E  0100               	movlb	0	; () banked
  3721  001B60  6FA1               	movwf	sprintf@wh& (0+255),b
  3722  001B62  0E01               	movlw	high _line2
  3723  001B64  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3724  001B66  0EF8               	movlw	low (STR_54+16)
  3725  001B68  6FA3               	movwf	sprintf@f& (0+255),b
  3726  001B6A  0E7C               	movlw	high (STR_54+16)
  3727  001B6C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3728  001B6E  C076  F0A5         	movff	_rtc+4,?_sprintf+4
  3729  001B72  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3730  001B74  C077  F0A7         	movff	_rtc+5,?_sprintf+6
  3731  001B78  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  3732  001B7A  C078  F0A9         	movff	_rtc+6,?_sprintf+8
  3733  001B7E  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  3734  001B80  ECBB  F03D         	call	_sprintf	;wreg free
  3735                           
  3736                           ;tela_RELOGIO.h: 14: sprintf(&line1[11], "HORA:");
  3737  001B84  0E9A               	movlw	low (_line1+11)
  3738  001B86  0100               	movlb	0	; () banked
  3739  001B88  6FA1               	movwf	sprintf@wh& (0+255),b
  3740  001B8A  0E01               	movlw	high (_line1+11)
  3741  001B8C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3742  001B8E  0ECE               	movlw	low STR_57
  3743  001B90  6FA3               	movwf	sprintf@f& (0+255),b
  3744  001B92  0E7F               	movlw	high STR_57
  3745  001B94  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3746  001B96  ECBB  F03D         	call	_sprintf	;wreg free
  3747                           
  3748                           ;tela_RELOGIO.h: 15: sprintf(&line2[11], "%02d:%02d:%02d", rtc.hour, rtc.min, rtc.sec);
  3749  001B9A  0E85               	movlw	low (_line2+11)
  3750  001B9C  0100               	movlb	0	; () banked
  3751  001B9E  6FA1               	movwf	sprintf@wh& (0+255),b
  3752  001BA0  0E01               	movlw	high (_line2+11)
  3753  001BA2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3754  001BA4  0E96               	movlw	low STR_58
  3755  001BA6  6FA3               	movwf	sprintf@f& (0+255),b
  3756  001BA8  0E7E               	movlw	high STR_58
  3757  001BAA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3758  001BAC  C075  F0A5         	movff	_rtc+3,?_sprintf+4
  3759  001BB0  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3760  001BB2  C074  F0A7         	movff	_rtc+2,?_sprintf+6
  3761  001BB6  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  3762  001BB8  C073  F0A9         	movff	_rtc+1,?_sprintf+8
  3763  001BBC  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  3764  001BBE  ECBB  F03D         	call	_sprintf	;wreg free
  3765                           
  3766                           ;tela_RELOGIO.h: 17: if (btPress(4)) {
  3767  001BC2  0E04               	movlw	4
  3768  001BC4  EC6E  F01E         	call	_btPress
  3769  001BC8  0900               	iorlw	0
  3770  001BCA  B4D8               	btfsc	status,2,c
  3771  001BCC  D003               	goto	l704
  3772                           
  3773                           ;tela_RELOGIO.h: 18: ajst_rtc = 1;
  3774  001BCE  8279               	bsf	_ajst_rtc/(0+8),_ajst_rtc& (0+7),c
  3775                           
  3776                           ;tela_RELOGIO.h: 19: option_posi++;
  3777  001BD0  0100               	movlb	0	; () banked
  3778  001BD2  2BDA               	incf	_option_posi& (0+255),f,b
  3779  001BD4                     l704:
  3780  001BD4  FFFF               	dw	65535	; assembler added errata NOP
  3781                           
  3782                           ;tela_RELOGIO.h: 20: }
  3783                           ;tela_RELOGIO.h: 21: if (btPress(1)) {
  3784                           
  3785                           ; BSR set to: 0
  3786  001BD6  0E01               	movlw	1
  3787  001BD8  EC6E  F01E         	call	_btPress
  3788  001BDC  0900               	iorlw	0
  3789  001BDE  B4D8               	btfsc	status,2,c
  3790  001BE0  D0AF               	goto	l706
  3791                           
  3792                           ;tela_RELOGIO.h: 22: ajst_rtc = 0;
  3793  001BE2  9279               	bcf	_ajst_rtc/(0+8),_ajst_rtc& (0+7),c
  3794                           
  3795                           ;tela_RELOGIO.h: 23: option_posi = 0;
  3796  001BE4  0E00               	movlw	0
  3797  001BE6  0100               	movlb	0	; () banked
  3798  001BE8  6FDA               	movwf	_option_posi& (0+255),b
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;tela_RELOGIO.h: 24: setDS1307TimeDate(&rtc);
  3802  001BEA  0E72               	movlw	low _rtc
  3803  001BEC  6F8C               	movwf	setDS1307TimeDate@ptrToUserVal& (0+255),b
  3804  001BEE  0E00               	movlw	high _rtc
  3805  001BF0  6F8D               	movwf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  3806  001BF2  ECBD  F015         	call	_setDS1307TimeDate	;wreg free
  3807                           
  3808                           ;tela_RELOGIO.h: 25: menu_posi = _menu_posi;
  3809  001BF6  C0D8  F0D9         	movff	__menu_posi,_menu_posi
  3810                           
  3811                           ;tela_RELOGIO.h: 26: _min++;
  3812  001BFA  0100               	movlb	0	; () banked
  3813  001BFC  2BF2               	incf	__min& (0+255),f,b
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;tela_RELOGIO.h: 27: }
  3817                           ;tela_RELOGIO.h: 28: switch (option_posi) {
  3818  001BFE  D0A0               	goto	l706
  3819  001C00  FFFF               	dw	65535	; assembler added errata NOP
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;tela_RELOGIO.h: 30: blink(line2, 1, 2);
  3823                           
  3824                           ; BSR set to: 0
  3825  001C02  0E7A               	movlw	low _line2
  3826  001C04  6F80               	movwf	blink@line& (0+255),b
  3827  001C06  0E01               	movlw	high _line2
  3828  001C08  6F81               	movwf	(blink@line+1)& (0+255),b
  3829  001C0A  0E01               	movlw	1
  3830  001C0C  6F82               	movwf	blink@start& (0+255),b
  3831  001C0E  0E02               	movlw	2
  3832  001C10  6F83               	movwf	blink@end& (0+255),b
  3833  001C12  ECD8  F03C         	call	_blink	;wreg free
  3834                           
  3835                           ;tela_RELOGIO.h: 31: if (btPress(3)) {
  3836  001C16  0E03               	movlw	3
  3837  001C18  EC6E  F01E         	call	_btPress
  3838  001C1C  0900               	iorlw	0
  3839  001C1E  A4D8               	btfss	status,2,c
  3840                           
  3841                           ;tela_RELOGIO.h: 32: rtc.date++;
  3842  001C20  2A76               	incf	_rtc+4,f,c
  3843                           
  3844                           ;tela_RELOGIO.h: 33: }
  3845                           ;tela_RELOGIO.h: 34: if (btPress(2)) {
  3846  001C22  0E02               	movlw	2
  3847  001C24  EC6E  F01E         	call	_btPress
  3848  001C28  0900               	iorlw	0
  3849  001C2A  B4D8               	btfsc	status,2,c
  3850  001C2C  D09F               	goto	l710
  3851                           
  3852                           ;tela_RELOGIO.h: 35: rtc.date--;
  3853  001C2E  0676               	decf	_rtc+4,f,c
  3854                           
  3855                           ;tela_RELOGIO.h: 36: }
  3856                           ;tela_RELOGIO.h: 37: break;
  3857  001C30  D09D               	goto	l710
  3858  001C32  FFFF               	dw	65535	; assembler added errata NOP
  3859                           
  3860                           ;tela_RELOGIO.h: 39: blink(line2, 4, 5);
  3861  001C34  0E7A               	movlw	low _line2
  3862  001C36  0100               	movlb	0	; () banked
  3863  001C38  6F80               	movwf	blink@line& (0+255),b
  3864  001C3A  0E01               	movlw	high _line2
  3865  001C3C  6F81               	movwf	(blink@line+1)& (0+255),b
  3866  001C3E  0E04               	movlw	4
  3867  001C40  6F82               	movwf	blink@start& (0+255),b
  3868  001C42  0E05               	movlw	5
  3869  001C44  6F83               	movwf	blink@end& (0+255),b
  3870  001C46  ECD8  F03C         	call	_blink	;wreg free
  3871                           
  3872                           ;tela_RELOGIO.h: 40: if (btPress(3)) {
  3873  001C4A  0E03               	movlw	3
  3874  001C4C  EC6E  F01E         	call	_btPress
  3875  001C50  0900               	iorlw	0
  3876  001C52  A4D8               	btfss	status,2,c
  3877                           
  3878                           ;tela_RELOGIO.h: 41: rtc.month++;
  3879  001C54  2A77               	incf	_rtc+5,f,c
  3880                           
  3881                           ;tela_RELOGIO.h: 42: }
  3882                           ;tela_RELOGIO.h: 43: if (btPress(2)) {
  3883  001C56  0E02               	movlw	2
  3884  001C58  EC6E  F01E         	call	_btPress
  3885  001C5C  0900               	iorlw	0
  3886  001C5E  B4D8               	btfsc	status,2,c
  3887  001C60  D085               	goto	l710
  3888                           
  3889                           ;tela_RELOGIO.h: 44: rtc.month--;
  3890  001C62  0677               	decf	_rtc+5,f,c
  3891                           
  3892                           ;tela_RELOGIO.h: 45: }
  3893                           ;tela_RELOGIO.h: 46: break;
  3894  001C64  D083               	goto	l710
  3895  001C66  FFFF               	dw	65535	; assembler added errata NOP
  3896                           
  3897                           ;tela_RELOGIO.h: 48: blink(line2, 7, 8);
  3898  001C68  0E7A               	movlw	low _line2
  3899  001C6A  0100               	movlb	0	; () banked
  3900  001C6C  6F80               	movwf	blink@line& (0+255),b
  3901  001C6E  0E01               	movlw	high _line2
  3902  001C70  6F81               	movwf	(blink@line+1)& (0+255),b
  3903  001C72  0E07               	movlw	7
  3904  001C74  6F82               	movwf	blink@start& (0+255),b
  3905  001C76  0E08               	movlw	8
  3906  001C78  6F83               	movwf	blink@end& (0+255),b
  3907  001C7A  ECD8  F03C         	call	_blink	;wreg free
  3908                           
  3909                           ;tela_RELOGIO.h: 49: if (btPress(3)) {
  3910  001C7E  0E03               	movlw	3
  3911  001C80  EC6E  F01E         	call	_btPress
  3912  001C84  0900               	iorlw	0
  3913  001C86  A4D8               	btfss	status,2,c
  3914                           
  3915                           ;tela_RELOGIO.h: 50: rtc.year++;
  3916  001C88  2A78               	incf	_rtc+6,f,c
  3917                           
  3918                           ;tela_RELOGIO.h: 51: }
  3919                           ;tela_RELOGIO.h: 52: if (btPress(2)) {
  3920  001C8A  0E02               	movlw	2
  3921  001C8C  EC6E  F01E         	call	_btPress
  3922  001C90  0900               	iorlw	0
  3923  001C92  B4D8               	btfsc	status,2,c
  3924  001C94  D06B               	goto	l710
  3925                           
  3926                           ;tela_RELOGIO.h: 53: rtc.year--;
  3927  001C96  0678               	decf	_rtc+6,f,c
  3928                           
  3929                           ;tela_RELOGIO.h: 54: }
  3930                           ;tela_RELOGIO.h: 55: break;
  3931  001C98  D069               	goto	l710
  3932  001C9A  FFFF               	dw	65535	; assembler added errata NOP
  3933                           
  3934                           ;tela_RELOGIO.h: 57: blink(line2, 12, 13);
  3935  001C9C  0E7A               	movlw	low _line2
  3936  001C9E  0100               	movlb	0	; () banked
  3937  001CA0  6F80               	movwf	blink@line& (0+255),b
  3938  001CA2  0E01               	movlw	high _line2
  3939  001CA4  6F81               	movwf	(blink@line+1)& (0+255),b
  3940  001CA6  0E0C               	movlw	12
  3941  001CA8  6F82               	movwf	blink@start& (0+255),b
  3942  001CAA  0E0D               	movlw	13
  3943  001CAC  6F83               	movwf	blink@end& (0+255),b
  3944  001CAE  ECD8  F03C         	call	_blink	;wreg free
  3945                           
  3946                           ;tela_RELOGIO.h: 58: if (btPress(3)) {
  3947  001CB2  0E03               	movlw	3
  3948  001CB4  EC6E  F01E         	call	_btPress
  3949  001CB8  0900               	iorlw	0
  3950  001CBA  A4D8               	btfss	status,2,c
  3951                           
  3952                           ;tela_RELOGIO.h: 59: rtc.hour++;
  3953  001CBC  2A75               	incf	_rtc+3,f,c
  3954                           
  3955                           ;tela_RELOGIO.h: 60: }
  3956                           ;tela_RELOGIO.h: 61: if (btPress(2)) {
  3957  001CBE  0E02               	movlw	2
  3958  001CC0  EC6E  F01E         	call	_btPress
  3959  001CC4  0900               	iorlw	0
  3960  001CC6  B4D8               	btfsc	status,2,c
  3961  001CC8  D051               	goto	l710
  3962                           
  3963                           ;tela_RELOGIO.h: 62: rtc.hour--;
  3964  001CCA  0675               	decf	_rtc+3,f,c
  3965                           
  3966                           ;tela_RELOGIO.h: 63: }
  3967                           ;tela_RELOGIO.h: 64: break;
  3968  001CCC  D04F               	goto	l710
  3969  001CCE  FFFF               	dw	65535	; assembler added errata NOP
  3970                           
  3971                           ;tela_RELOGIO.h: 66: blink(line2, 15, 16);
  3972  001CD0  0E7A               	movlw	low _line2
  3973  001CD2  0100               	movlb	0	; () banked
  3974  001CD4  6F80               	movwf	blink@line& (0+255),b
  3975  001CD6  0E01               	movlw	high _line2
  3976  001CD8  6F81               	movwf	(blink@line+1)& (0+255),b
  3977  001CDA  0E0F               	movlw	15
  3978  001CDC  6F82               	movwf	blink@start& (0+255),b
  3979  001CDE  0E10               	movlw	16
  3980  001CE0  6F83               	movwf	blink@end& (0+255),b
  3981  001CE2  ECD8  F03C         	call	_blink	;wreg free
  3982                           
  3983                           ;tela_RELOGIO.h: 67: if (btPress(3)) {
  3984  001CE6  0E03               	movlw	3
  3985  001CE8  EC6E  F01E         	call	_btPress
  3986  001CEC  0900               	iorlw	0
  3987  001CEE  A4D8               	btfss	status,2,c
  3988                           
  3989                           ;tela_RELOGIO.h: 68: rtc.min++;
  3990  001CF0  2A74               	incf	_rtc+2,f,c
  3991                           
  3992                           ;tela_RELOGIO.h: 69: }
  3993                           ;tela_RELOGIO.h: 70: if (btPress(2)) {
  3994  001CF2  0E02               	movlw	2
  3995  001CF4  EC6E  F01E         	call	_btPress
  3996  001CF8  0900               	iorlw	0
  3997  001CFA  B4D8               	btfsc	status,2,c
  3998  001CFC  D037               	goto	l710
  3999                           
  4000                           ;tela_RELOGIO.h: 71: rtc.min--;
  4001  001CFE  0674               	decf	_rtc+2,f,c
  4002                           
  4003                           ;tela_RELOGIO.h: 72: }
  4004                           ;tela_RELOGIO.h: 73: break;
  4005  001D00  D035               	goto	l710
  4006  001D02  FFFF               	dw	65535	; assembler added errata NOP
  4007                           
  4008                           ;tela_RELOGIO.h: 75: blink(line2, 18, 19);
  4009  001D04  0E7A               	movlw	low _line2
  4010  001D06  0100               	movlb	0	; () banked
  4011  001D08  6F80               	movwf	blink@line& (0+255),b
  4012  001D0A  0E01               	movlw	high _line2
  4013  001D0C  6F81               	movwf	(blink@line+1)& (0+255),b
  4014  001D0E  0E12               	movlw	18
  4015  001D10  6F82               	movwf	blink@start& (0+255),b
  4016  001D12  0E13               	movlw	19
  4017  001D14  6F83               	movwf	blink@end& (0+255),b
  4018  001D16  ECD8  F03C         	call	_blink	;wreg free
  4019                           
  4020                           ;tela_RELOGIO.h: 76: if (btPress(3)) {
  4021  001D1A  0E03               	movlw	3
  4022  001D1C  EC6E  F01E         	call	_btPress
  4023  001D20  0900               	iorlw	0
  4024  001D22  A4D8               	btfss	status,2,c
  4025                           
  4026                           ;tela_RELOGIO.h: 77: rtc.sec++;
  4027  001D24  2A73               	incf	_rtc+1,f,c
  4028                           
  4029                           ;tela_RELOGIO.h: 78: }
  4030                           ;tela_RELOGIO.h: 79: if (btPress(2)) {
  4031  001D26  0E02               	movlw	2
  4032  001D28  EC6E  F01E         	call	_btPress
  4033  001D2C  0900               	iorlw	0
  4034  001D2E  B4D8               	btfsc	status,2,c
  4035  001D30  D01D               	goto	l710
  4036                           
  4037                           ;tela_RELOGIO.h: 80: rtc.sec--;
  4038  001D32  0673               	decf	_rtc+1,f,c
  4039                           
  4040                           ;tela_RELOGIO.h: 81: }
  4041                           ;tela_RELOGIO.h: 82: break;
  4042  001D34  D01B               	goto	l710
  4043  001D36  FFFF               	dw	65535	; assembler added errata NOP
  4044  001D38  0E01               	movlw	1
  4045  001D3A  0100               	movlb	0	; () banked
  4046  001D3C  6FDA               	movwf	_option_posi& (0+255),b
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;tela_RELOGIO.h: 85: }
  4050                           
  4051                           ;tela_RELOGIO.h: 84: break;
  4052  001D3E  D016               	goto	l710
  4053  001D40                     l706:
  4054  001D40  FFFF               	dw	65535	; assembler added errata NOP
  4055                           
  4056                           ; BSR set to: 0
  4057  001D42  0100               	movlb	0	; () banked
  4058  001D44  51DA               	movf	_option_posi& (0+255),w,b
  4059                           
  4060                           ; Switch size 1, requested type "space"
  4061                           ; Number of cases is 6, Range of values is 1 to 6
  4062                           ; switch strategies available:
  4063                           ; Name         Instructions Cycles
  4064                           ; simple_byte           19    10 (average)
  4065                           ;	Chosen strategy is simple_byte
  4066  001D46  0A01               	xorlw	1	; case 1
  4067  001D48  B4D8               	btfsc	status,2,c
  4068  001D4A  D75A               	goto	l707
  4069  001D4C  0A03               	xorlw	3	; case 2
  4070  001D4E  B4D8               	btfsc	status,2,c
  4071  001D50  D770               	goto	l711
  4072  001D52  0A01               	xorlw	1	; case 3
  4073  001D54  B4D8               	btfsc	status,2,c
  4074  001D56  D787               	goto	l714
  4075  001D58  0A07               	xorlw	7	; case 4
  4076  001D5A  B4D8               	btfsc	status,2,c
  4077  001D5C  D79E               	goto	l717
  4078  001D5E  0A01               	xorlw	1	; case 5
  4079  001D60  B4D8               	btfsc	status,2,c
  4080  001D62  D7B5               	goto	l720
  4081  001D64  0A03               	xorlw	3	; case 6
  4082  001D66  B4D8               	btfsc	status,2,c
  4083  001D68  D7CC               	goto	l723
  4084  001D6A  D7E5               	goto	l726
  4085  001D6C                     l710:
  4086  001D6C  FFFF               	dw	65535	; assembler added errata NOP
  4087                           
  4088                           ;tela_RELOGIO.h: 86: validaRTC();
  4089                           
  4090                           ; BSR set to: 0
  4091  001D6E  ECBA  F01F         	call	_validaRTC	;wreg free
  4092  001D72  0012               	return		;funcret
  4093  001D74  FFFF               	dw	65535	; errata NOP
  4094  001D76                     __end_of_tela_ajusteRTC:
  4095                           	opt stack 0
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           postinc0	equ	0xFEE
  4101                           wreg	equ	0xFE8
  4102                           postdec1	equ	0xFE5
  4103                           fsr1l	equ	0xFE1
  4104                           status	equ	0xFD8
  4105                           
  4106 ;; *************** function _validaRTC *****************
  4107 ;; Defined at:
  4108 ;;		line 108 in file "ds1307.h"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;		None
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;		None
  4113 ;; Return value:  Size  Location     Type
  4114 ;;                  2  304[None  ] int 
  4115 ;; Registers used:
  4116 ;;		wreg, status,2, status,0
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4122 ;;      Params:         0       0       0       0       0       0       0
  4123 ;;      Locals:         0       0       0       0       0       0       0
  4124 ;;      Temps:          0       0       0       0       0       0       0
  4125 ;;      Totals:         0       0       0       0       0       0       0
  4126 ;;Total ram usage:        0 bytes
  4127 ;; Hardware stack levels used:    1
  4128 ;; Hardware stack levels required when called:    6
  4129 ;; This function calls:
  4130 ;;		Nothing
  4131 ;; This function is called by:
  4132 ;;		_tela_ajusteRTC
  4133 ;; This function uses a non-reentrant model
  4134 ;;
  4135                           
  4136                           	psect	text3
  4137  003F74                     __ptext3:
  4138                           	opt stack 0
  4139  003F74                     _validaRTC:
  4140                           	opt stack 0
  4141  003F74  FFFF               	dw	65535	; assembler added errata NOP
  4142                           
  4143                           ;ds1307.h: 109: if (rtc.date > 31) rtc.date = 0;
  4144                           
  4145                           ;incstack = 0
  4146  003F76  0E1F               	movlw	31
  4147  003F78  6476               	cpfsgt	_rtc+4,c
  4148  003F7A  D002               	goto	l305
  4149  003F7C  0E00               	movlw	0
  4150  003F7E  6E76               	movwf	_rtc+4,c
  4151  003F80                     l305:
  4152  003F80  FFFF               	dw	65535	; assembler added errata NOP
  4153                           
  4154                           ;ds1307.h: 110: if (rtc.hour > 23) rtc.hour = 0;
  4155  003F82  0E17               	movlw	23
  4156  003F84  6475               	cpfsgt	_rtc+3,c
  4157  003F86  D002               	goto	l306
  4158  003F88  0E00               	movlw	0
  4159  003F8A  6E75               	movwf	_rtc+3,c
  4160  003F8C                     l306:
  4161  003F8C  FFFF               	dw	65535	; assembler added errata NOP
  4162                           
  4163                           ;ds1307.h: 111: if (rtc.min > 59) rtc.min = 0;
  4164  003F8E  0E3B               	movlw	59
  4165  003F90  6474               	cpfsgt	_rtc+2,c
  4166  003F92  D002               	goto	l307
  4167  003F94  0E00               	movlw	0
  4168  003F96  6E74               	movwf	_rtc+2,c
  4169  003F98                     l307:
  4170  003F98  FFFF               	dw	65535	; assembler added errata NOP
  4171                           
  4172                           ;ds1307.h: 112: if (rtc.month > 12) rtc.month = 0;
  4173  003F9A  0E0C               	movlw	12
  4174  003F9C  6477               	cpfsgt	_rtc+5,c
  4175  003F9E  D002               	goto	l308
  4176  003FA0  0E00               	movlw	0
  4177  003FA2  6E77               	movwf	_rtc+5,c
  4178  003FA4                     l308:
  4179  003FA4  FFFF               	dw	65535	; assembler added errata NOP
  4180                           
  4181                           ;ds1307.h: 113: if (rtc.sec > 59) rtc.sec = 0;
  4182  003FA6  0E3B               	movlw	59
  4183  003FA8  6473               	cpfsgt	_rtc+1,c
  4184  003FAA  D002               	goto	l309
  4185  003FAC  0E00               	movlw	0
  4186  003FAE  6E73               	movwf	_rtc+1,c
  4187  003FB0                     l309:
  4188  003FB0  FFFF               	dw	65535	; assembler added errata NOP
  4189                           
  4190                           ;ds1307.h: 114: if (rtc.year > 99) rtc.year = 0;
  4191  003FB2  0E63               	movlw	99
  4192  003FB4  6478               	cpfsgt	_rtc+6,c
  4193  003FB6  D002               	goto	l310
  4194  003FB8  0E00               	movlw	0
  4195  003FBA  6E78               	movwf	_rtc+6,c
  4196  003FBC                     l310:
  4197  003FBC  FFFF               	dw	65535	; assembler added errata NOP
  4198  003FBE  0012               	return		;funcret
  4199  003FC0  FFFF               	dw	65535	; errata NOP
  4200  003FC2                     __end_of_validaRTC:
  4201                           	opt stack 0
  4202                           tblptru	equ	0xFF8
  4203                           tblptrh	equ	0xFF7
  4204                           tblptrl	equ	0xFF6
  4205                           tablat	equ	0xFF5
  4206                           postinc0	equ	0xFEE
  4207                           wreg	equ	0xFE8
  4208                           postdec1	equ	0xFE5
  4209                           fsr1l	equ	0xFE1
  4210                           status	equ	0xFD8
  4211                           
  4212 ;; *************** function _setDS1307TimeDate *****************
  4213 ;; Defined at:
  4214 ;;		line 36 in file "ds1307.h"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  4217 ;;		 -> rtc(7), 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;		None
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      void 
  4222 ;; Registers used:
  4223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4229 ;;      Params:         0       2       0       0       0       0       0
  4230 ;;      Locals:         0       0       0       0       0       0       0
  4231 ;;      Temps:          0       1       0       0       0       0       0
  4232 ;;      Totals:         0       3       0       0       0       0       0
  4233 ;;Total ram usage:        3 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    8
  4236 ;; This function calls:
  4237 ;;		_DECtoBCD
  4238 ;;		_I2C_Start
  4239 ;;		_I2C_Stop
  4240 ;;		_I2C_Write
  4241 ;; This function is called by:
  4242 ;;		_tela_ajusteRTC
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           	psect	text4
  4247  002B7A                     __ptext4:
  4248                           	opt stack 0
  4249  002B7A                     _setDS1307TimeDate:
  4250                           	opt stack 0
  4251  002B7A  FFFF               	dw	65535	; assembler added errata NOP
  4252                           
  4253                           ;ds1307.h: 38: I2C_Start();
  4254                           
  4255                           ;incstack = 0
  4256  002B7C  EC8B  F03A         	call	_I2C_Start	;wreg free
  4257                           
  4258                           ;ds1307.h: 39: I2C_Write(0xD0);
  4259  002B80  0E00               	movlw	0
  4260  002B82  0100               	movlb	0	; () banked
  4261  002B84  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4262  002B86  0ED0               	movlw	208
  4263  002B88  6F8A               	movwf	I2C_Write@d& (0+255),b
  4264  002B8A  ECA4  F03A         	call	_I2C_Write	;wreg free
  4265                           
  4266                           ;ds1307.h: 40: I2C_Write(0x00);
  4267  002B8E  0E00               	movlw	0
  4268  002B90  0100               	movlb	0	; () banked
  4269  002B92  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4270  002B94  0E00               	movlw	0
  4271  002B96  6F8A               	movwf	I2C_Write@d& (0+255),b
  4272  002B98  ECA4  F03A         	call	_I2C_Write	;wreg free
  4273                           
  4274                           ;ds1307.h: 41: I2C_Write(DECtoBCD(ptrToUserVal-> sec));
  4275  002B9C  0100               	movlb	0	; () banked
  4276  002B9E  EE20 F001          	lfsr	2,1
  4277  002BA2  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4278  002BA4  26D9               	addwf	fsr2l,f,c
  4279  002BA6  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4280  002BA8  22DA               	addwfc	fsr2h,f,c
  4281  002BAA  50DF               	movf	indf2,w,c
  4282  002BAC  EC55  F03D         	call	_DECtoBCD
  4283  002BB0  0100               	movlb	0	; () banked
  4284  002BB2  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4285  002BB4  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4286  002BB6  6F8A               	movwf	I2C_Write@d& (0+255),b
  4287  002BB8  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4288  002BBA  ECA4  F03A         	call	_I2C_Write	;wreg free
  4289                           
  4290                           ;ds1307.h: 42: I2C_Write(DECtoBCD(ptrToUserVal-> min));
  4291  002BBE  0100               	movlb	0	; () banked
  4292  002BC0  EE20 F002          	lfsr	2,2
  4293  002BC4  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4294  002BC6  26D9               	addwf	fsr2l,f,c
  4295  002BC8  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4296  002BCA  22DA               	addwfc	fsr2h,f,c
  4297  002BCC  50DF               	movf	indf2,w,c
  4298  002BCE  EC55  F03D         	call	_DECtoBCD
  4299  002BD2  0100               	movlb	0	; () banked
  4300  002BD4  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4301  002BD6  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4302  002BD8  6F8A               	movwf	I2C_Write@d& (0+255),b
  4303  002BDA  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4304  002BDC  ECA4  F03A         	call	_I2C_Write	;wreg free
  4305                           
  4306                           ;ds1307.h: 43: I2C_Write(DECtoBCD(ptrToUserVal-> hour));
  4307  002BE0  0100               	movlb	0	; () banked
  4308  002BE2  EE20 F003          	lfsr	2,3
  4309  002BE6  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4310  002BE8  26D9               	addwf	fsr2l,f,c
  4311  002BEA  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4312  002BEC  22DA               	addwfc	fsr2h,f,c
  4313  002BEE  50DF               	movf	indf2,w,c
  4314  002BF0  EC55  F03D         	call	_DECtoBCD
  4315  002BF4  0100               	movlb	0	; () banked
  4316  002BF6  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4317  002BF8  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4318  002BFA  6F8A               	movwf	I2C_Write@d& (0+255),b
  4319  002BFC  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4320  002BFE  ECA4  F03A         	call	_I2C_Write	;wreg free
  4321                           
  4322                           ;ds1307.h: 44: I2C_Write(DECtoBCD(ptrToUserVal-> day));
  4323  002C02  C08C  FFD9         	movff	setDS1307TimeDate@ptrToUserVal,fsr2l
  4324  002C06  C08D  FFDA         	movff	setDS1307TimeDate@ptrToUserVal+1,fsr2h
  4325  002C0A  50DF               	movf	indf2,w,c
  4326  002C0C  EC55  F03D         	call	_DECtoBCD
  4327  002C10  0100               	movlb	0	; () banked
  4328  002C12  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4329  002C14  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4330  002C16  6F8A               	movwf	I2C_Write@d& (0+255),b
  4331  002C18  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4332  002C1A  ECA4  F03A         	call	_I2C_Write	;wreg free
  4333                           
  4334                           ;ds1307.h: 45: I2C_Write(DECtoBCD(ptrToUserVal-> date));
  4335  002C1E  0100               	movlb	0	; () banked
  4336  002C20  EE20 F004          	lfsr	2,4
  4337  002C24  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4338  002C26  26D9               	addwf	fsr2l,f,c
  4339  002C28  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4340  002C2A  22DA               	addwfc	fsr2h,f,c
  4341  002C2C  50DF               	movf	indf2,w,c
  4342  002C2E  EC55  F03D         	call	_DECtoBCD
  4343  002C32  0100               	movlb	0	; () banked
  4344  002C34  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4345  002C36  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4346  002C38  6F8A               	movwf	I2C_Write@d& (0+255),b
  4347  002C3A  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4348  002C3C  ECA4  F03A         	call	_I2C_Write	;wreg free
  4349                           
  4350                           ;ds1307.h: 46: I2C_Write(DECtoBCD(ptrToUserVal-> month));
  4351  002C40  0100               	movlb	0	; () banked
  4352  002C42  EE20 F005          	lfsr	2,5
  4353  002C46  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4354  002C48  26D9               	addwf	fsr2l,f,c
  4355  002C4A  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4356  002C4C  22DA               	addwfc	fsr2h,f,c
  4357  002C4E  50DF               	movf	indf2,w,c
  4358  002C50  EC55  F03D         	call	_DECtoBCD
  4359  002C54  0100               	movlb	0	; () banked
  4360  002C56  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4361  002C58  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4362  002C5A  6F8A               	movwf	I2C_Write@d& (0+255),b
  4363  002C5C  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4364  002C5E  ECA4  F03A         	call	_I2C_Write	;wreg free
  4365                           
  4366                           ;ds1307.h: 47: I2C_Write(DECtoBCD(ptrToUserVal-> year));
  4367  002C62  0100               	movlb	0	; () banked
  4368  002C64  EE20 F006          	lfsr	2,6
  4369  002C68  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4370  002C6A  26D9               	addwf	fsr2l,f,c
  4371  002C6C  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4372  002C6E  22DA               	addwfc	fsr2h,f,c
  4373  002C70  50DF               	movf	indf2,w,c
  4374  002C72  EC55  F03D         	call	_DECtoBCD
  4375  002C76  0100               	movlb	0	; () banked
  4376  002C78  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4377  002C7A  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4378  002C7C  6F8A               	movwf	I2C_Write@d& (0+255),b
  4379  002C7E  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4380  002C80  ECA4  F03A         	call	_I2C_Write	;wreg free
  4381                           
  4382                           ;ds1307.h: 48: I2C_Stop();
  4383  002C84  EC91  F03A         	call	_I2C_Stop	;wreg free
  4384  002C88  0012               	return		;funcret
  4385  002C8A  FFFF               	dw	65535	; errata NOP
  4386  002C8C                     __end_of_setDS1307TimeDate:
  4387                           	opt stack 0
  4388                           tblptru	equ	0xFF8
  4389                           tblptrh	equ	0xFF7
  4390                           tblptrl	equ	0xFF6
  4391                           tablat	equ	0xFF5
  4392                           postinc0	equ	0xFEE
  4393                           wreg	equ	0xFE8
  4394                           postdec1	equ	0xFE5
  4395                           fsr1l	equ	0xFE1
  4396                           indf2	equ	0xFDF
  4397                           fsr2h	equ	0xFDA
  4398                           fsr2l	equ	0xFD9
  4399                           status	equ	0xFD8
  4400                           
  4401 ;; *************** function _DECtoBCD *****************
  4402 ;; Defined at:
  4403 ;;		line 25 in file "function.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;  val             1    wreg     unsigned char 
  4406 ;; Auto vars:     Size  Location     Type
  4407 ;;  val             1    8[BANK0 ] unsigned char 
  4408 ;;  res             1    9[BANK0 ] unsigned char 
  4409 ;; Return value:  Size  Location     Type
  4410 ;;                  1    wreg      unsigned char 
  4411 ;; Registers used:
  4412 ;;		wreg, status,2, status,0, cstack
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4418 ;;      Params:         0       0       0       0       0       0       0
  4419 ;;      Locals:         0       2       0       0       0       0       0
  4420 ;;      Temps:          0       0       0       0       0       0       0
  4421 ;;      Totals:         0       2       0       0       0       0       0
  4422 ;;Total ram usage:        2 bytes
  4423 ;; Hardware stack levels used:    1
  4424 ;; Hardware stack levels required when called:    7
  4425 ;; This function calls:
  4426 ;;		___awdiv
  4427 ;;		___awmod
  4428 ;; This function is called by:
  4429 ;;		_setDS1307TimeDate
  4430 ;;		_setDS1307Time
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           	psect	text5
  4435  007AAA                     __ptext5:
  4436                           	opt stack 0
  4437  007AAA                     _DECtoBCD:
  4438                           	opt stack 0
  4439  007AAA  FFFF               	dw	65535	; assembler added errata NOP
  4440                           
  4441                           ;incstack = 0
  4442                           ;DECtoBCD@val stored from wreg
  4443  007AAC  0100               	movlb	0	; () banked
  4444  007AAE  6F88               	movwf	DECtoBCD@val& (0+255),b
  4445                           
  4446                           ;function.c: 26: char res;
  4447                           ;function.c: 27: res = (val / 10) << 4;
  4448  007AB0  C088  F080         	movff	DECtoBCD@val,___awdiv@dividend
  4449  007AB4  0100               	movlb	0	; () banked
  4450  007AB6  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  4451  007AB8  0E00               	movlw	0
  4452  007ABA  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  4453  007ABC  0E0A               	movlw	10
  4454  007ABE  6F82               	movwf	___awdiv@divisor& (0+255),b
  4455  007AC0  EC06  F01C         	call	___awdiv	;wreg free
  4456  007AC4  0100               	movlb	0	; () banked
  4457  007AC6  3980               	swapf	?___awdiv& (0+255),w,b
  4458  007AC8  0BF0               	andlw	240
  4459  007ACA  6F89               	movwf	DECtoBCD@res& (0+255),b
  4460                           
  4461                           ;function.c: 28: res = res | (val % 10);
  4462  007ACC  C088  F080         	movff	DECtoBCD@val,___awmod@dividend
  4463  007AD0  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  4464  007AD2  0E00               	movlw	0
  4465  007AD4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4466  007AD6  0E0A               	movlw	10
  4467  007AD8  6F82               	movwf	___awmod@divisor& (0+255),b
  4468  007ADA  EC72  F01D         	call	___awmod	;wreg free
  4469  007ADE  0100               	movlb	0	; () banked
  4470  007AE0  5180               	movf	?___awmod& (0+255),w,b
  4471  007AE2  1189               	iorwf	DECtoBCD@res& (0+255),w,b
  4472  007AE4  6F89               	movwf	DECtoBCD@res& (0+255),b
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;function.c: 29: return res;
  4476  007AE6  5189               	movf	DECtoBCD@res& (0+255),w,b
  4477                           
  4478                           ; BSR set to: 0
  4479                           
  4480                           ; BSR set to: 0
  4481  007AE8  0012               	return		;funcret
  4482  007AEA  FFFF               	dw	65535	; errata NOP
  4483  007AEC                     __end_of_DECtoBCD:
  4484                           	opt stack 0
  4485                           tblptru	equ	0xFF8
  4486                           tblptrh	equ	0xFF7
  4487                           tblptrl	equ	0xFF6
  4488                           tablat	equ	0xFF5
  4489                           postinc0	equ	0xFEE
  4490                           wreg	equ	0xFE8
  4491                           postdec1	equ	0xFE5
  4492                           fsr1l	equ	0xFE1
  4493                           indf2	equ	0xFDF
  4494                           fsr2h	equ	0xFDA
  4495                           fsr2l	equ	0xFD9
  4496                           status	equ	0xFD8
  4497                           
  4498 ;; *************** function _telaPrincipal *****************
  4499 ;; Defined at:
  4500 ;;		line 10 in file "tela_PRINCIPAL.h"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;		None
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;		None
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  1    wreg      void 
  4507 ;; Registers used:
  4508 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4514 ;;      Params:         0       0       0       0       0       0       0
  4515 ;;      Locals:         0       2       0       0       0       0       0
  4516 ;;      Temps:          0       0       0       0       0       0       0
  4517 ;;      Totals:         0       2       0       0       0       0       0
  4518 ;;Total ram usage:        2 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:   10
  4521 ;; This function calls:
  4522 ;;		_blink
  4523 ;;		_btPress
  4524 ;;		_clearShiftREG
  4525 ;;		_intToFloatStr
  4526 ;;		_sprintf
  4527 ;; This function is called by:
  4528 ;;		_main
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           	psect	text6
  4533  00215E                     __ptext6:
  4534                           	opt stack 0
  4535  00215E                     _telaPrincipal:
  4536                           	opt stack 0
  4537  00215E  FFFF               	dw	65535	; assembler added errata NOP
  4538                           
  4539                           ;tela_PRINCIPAL.h: 12: line1[0] = 0x01;
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;incstack = 0
  4543  002160  0E01               	movlw	1
  4544  002162  0101               	movlb	1	; () banked
  4545  002164  6F8F               	movwf	_line1& (0+255),b
  4546                           
  4547                           ; BSR set to: 1
  4548                           ;tela_PRINCIPAL.h: 13: line1[1] = intensidadeSinal;
  4549  002166  C0FF  F190         	movff	_intensidadeSinal,_line1+1
  4550                           
  4551                           ;tela_PRINCIPAL.h: 14: line1[19] = 0x05;
  4552  00216A  0E05               	movlw	5
  4553  00216C  6FA2               	movwf	(_line1+19)& (0+255),b
  4554                           
  4555                           ; BSR set to: 1
  4556                           ;tela_PRINCIPAL.h: 16: if (!PORTCbits.RC0) {
  4557  00216E  B082               	btfsc	3970,0,c	;volatile
  4558  002170  D00B               	goto	l687
  4559                           
  4560                           ; BSR set to: 1
  4561                           ;tela_PRINCIPAL.h: 17: blink(line1, 19, 20);
  4562  002172  0E8F               	movlw	low _line1
  4563  002174  0100               	movlb	0	; () banked
  4564  002176  6F80               	movwf	blink@line& (0+255),b
  4565  002178  0E01               	movlw	high _line1
  4566  00217A  6F81               	movwf	(blink@line+1)& (0+255),b
  4567  00217C  0E13               	movlw	19
  4568  00217E  6F82               	movwf	blink@start& (0+255),b
  4569  002180  0E14               	movlw	20
  4570  002182  6F83               	movwf	blink@end& (0+255),b
  4571  002184  ECD8  F03C         	call	_blink	;wreg free
  4572  002188                     l687:
  4573  002188  FFFF               	dw	65535	; assembler added errata NOP
  4574                           
  4575                           ;tela_PRINCIPAL.h: 18: }
  4576                           ;tela_PRINCIPAL.h: 20: if (pressao == 99) {
  4577  00218A  0E63               	movlw	99
  4578  00218C  0100               	movlb	0	; () banked
  4579  00218E  19FD               	xorwf	_pressao& (0+255),w,b
  4580  002190  A4D8               	btfss	status,2,c
  4581  002192  D00D               	goto	l688
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;tela_PRINCIPAL.h: 21: sprintf(line2, "- ERRO  TRANSDUTOR");
  4585  002194  0E7A               	movlw	low _line2
  4586  002196  6FA1               	movwf	sprintf@wh& (0+255),b
  4587  002198  0E01               	movlw	high _line2
  4588  00219A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4589  00219C  0EB2               	movlw	low STR_50
  4590  00219E  6FA3               	movwf	sprintf@f& (0+255),b
  4591  0021A0  0E7D               	movlw	high STR_50
  4592  0021A2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4593  0021A4  ECBB  F03D         	call	_sprintf	;wreg free
  4594                           
  4595                           ;tela_PRINCIPAL.h: 22: clearShiftREG();
  4596  0021A8  ECD7  F03B         	call	_clearShiftREG	;wreg free
  4597                           
  4598                           ;tela_PRINCIPAL.h: 23: } else {
  4599  0021AC  D018               	goto	l689
  4600  0021AE                     l688:
  4601  0021AE  FFFF               	dw	65535	; assembler added errata NOP
  4602                           
  4603                           ;tela_PRINCIPAL.h: 24: sprintf(&line3[2], "Pressao %s bar", (intToFloatStr(pressao)));
  4604  0021B0  0100               	movlb	0	; () banked
  4605  0021B2  51FD               	movf	_pressao& (0+255),w,b
  4606  0021B4  ECB5  F01D         	call	_intToFloatStr
  4607  0021B8  C0B7  F0C4         	movff	?_intToFloatStr,_telaPrincipal$2359
  4608  0021BC  C0B8  F0C5         	movff	?_intToFloatStr+1,_telaPrincipal$2359+1
  4609                           
  4610                           ;tela_PRINCIPAL.h: 24: sprintf(&line3[2], "Pressao %s bar", (intToFloatStr(pressao)));
  4611  0021C0  0E67               	movlw	low (_line3+2)
  4612  0021C2  0100               	movlb	0	; () banked
  4613  0021C4  6FA1               	movwf	sprintf@wh& (0+255),b
  4614  0021C6  0E01               	movlw	high (_line3+2)
  4615  0021C8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4616  0021CA  0E67               	movlw	low (STR_39+1)
  4617  0021CC  6FA3               	movwf	sprintf@f& (0+255),b
  4618  0021CE  0E7E               	movlw	high (STR_39+1)
  4619  0021D0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4620  0021D2  C0C4  F0A5         	movff	_telaPrincipal$2359,?_sprintf+4
  4621  0021D6  C0C5  F0A6         	movff	_telaPrincipal$2359+1,?_sprintf+5
  4622  0021DA  ECBB  F03D         	call	_sprintf	;wreg free
  4623  0021DE                     l689:
  4624  0021DE  FFFF               	dw	65535	; assembler added errata NOP
  4625                           
  4626                           ;tela_PRINCIPAL.h: 25: }
  4627                           ;tela_PRINCIPAL.h: 27: if (status_estacionaria == 0) {
  4628  0021E0  0100               	movlb	0	; () banked
  4629  0021E2  51FA               	movf	_status_estacionaria& (0+255),w,b
  4630  0021E4  A4D8               	btfss	status,2,c
  4631  0021E6  D002               	goto	l690
  4632                           
  4633                           ; BSR set to: 0
  4634                           ;tela_PRINCIPAL.h: 28: falha = 1;
  4635  0021E8  0E01               	movlw	1
  4636  0021EA  D00C               	goto	L8
  4637  0021EC                     l690:
  4638  0021EC  FFFF               	dw	65535	; assembler added errata NOP
  4639                           
  4640                           ; BSR set to: 0
  4641                           
  4642                           ; BSR set to: 0
  4643  0021EE  0E0A               	movlw	10
  4644  0021F0  19FC               	xorwf	_status_jockey& (0+255),w,b
  4645  0021F2  A4D8               	btfss	status,2,c
  4646  0021F4  D002               	goto	l692
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;tela_PRINCIPAL.h: 30: falha = 6;
  4650  0021F6  0E06               	movlw	6
  4651  0021F8  D005               	goto	L8
  4652  0021FA                     l692:
  4653  0021FA  FFFF               	dw	65535	; assembler added errata NOP
  4654                           
  4655                           ; BSR set to: 0
  4656                           
  4657                           ; BSR set to: 0
  4658  0021FC  51FB               	movf	_status_principal& (0+255),w,b
  4659  0021FE  A4D8               	btfss	status,2,c
  4660  002200  D003               	goto	l694
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;tela_PRINCIPAL.h: 32: falha = 5;
  4664  002202  0E05               	movlw	5
  4665  002204                     L8:
  4666  002204  FFFF               	dw	65535	; assembler added errata NOP
  4667  002206  6FDD               	movwf	_falha& (0+255),b
  4668  002208                     l694:
  4669  002208  FFFF               	dw	65535	; assembler added errata NOP
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;tela_PRINCIPAL.h: 33: }
  4673                           ;tela_PRINCIPAL.h: 34: if (falha != 0 || incendio == 1) {
  4674                           
  4675                           ; BSR set to: 0
  4676                           
  4677                           ; BSR set to: 0
  4678  00220A  51DD               	movf	_falha& (0+255),w,b
  4679  00220C  A4D8               	btfss	status,2,c
  4680  00220E  D003               	goto	u7470
  4681                           
  4682                           ; BSR set to: 0
  4683  002210  05DB               	decf	_incendio& (0+255),w,b
  4684  002212  A4D8               	btfss	status,2,c
  4685  002214  D024               	goto	l698
  4686  002216                     u7470:
  4687  002216  FFFF               	dw	65535	; assembler added errata NOP
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;tela_PRINCIPAL.h: 35: sprintf(line4, "Press ESC p/ Reset");
  4691                           
  4692                           ; BSR set to: 0
  4693  002218  0E50               	movlw	low _line4
  4694  00221A  6FA1               	movwf	sprintf@wh& (0+255),b
  4695  00221C  0E01               	movlw	high _line4
  4696  00221E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4697  002220  0EEB               	movlw	low STR_52
  4698  002222  6FA3               	movwf	sprintf@f& (0+255),b
  4699  002224  0E7D               	movlw	high STR_52
  4700  002226  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4701  002228  ECBB  F03D         	call	_sprintf	;wreg free
  4702                           
  4703                           ;tela_PRINCIPAL.h: 36: if (btPress(1)) {
  4704  00222C  0E01               	movlw	1
  4705  00222E  EC6E  F01E         	call	_btPress
  4706  002232  0900               	iorlw	0
  4707  002234  B4D8               	btfsc	status,2,c
  4708  002236  D013               	goto	l698
  4709                           
  4710                           ;tela_PRINCIPAL.h: 37: incendio = 0;
  4711  002238  0E00               	movlw	0
  4712  00223A  0100               	movlb	0	; () banked
  4713  00223C  6FDB               	movwf	_incendio& (0+255),b
  4714                           
  4715                           ;tela_PRINCIPAL.h: 38: status_estacionaria = 1;
  4716  00223E  0E01               	movlw	1
  4717  002240  6FFA               	movwf	_status_estacionaria& (0+255),b
  4718                           
  4719                           ;tela_PRINCIPAL.h: 39: status_jockey = 1;
  4720  002242  0E01               	movlw	1
  4721  002244  6FFC               	movwf	_status_jockey& (0+255),b
  4722                           
  4723                           ;tela_PRINCIPAL.h: 40: status_principal = 1;
  4724  002246  0E01               	movlw	1
  4725  002248  6FFB               	movwf	_status_principal& (0+255),b
  4726                           
  4727                           ;tela_PRINCIPAL.h: 41: tempo_limite_partida = 0;
  4728  00224A  0E00               	movlw	0
  4729  00224C  6FE5               	movwf	_tempo_limite_partida& (0+255),b
  4730                           
  4731                           ;tela_PRINCIPAL.h: 42: tempo_reenvio_SMS = 0;
  4732  00224E  0E00               	movlw	0
  4733  002250  6E7B               	movwf	_tempo_reenvio_SMS,c
  4734                           
  4735                           ;tela_PRINCIPAL.h: 43: tempo_partida = 0;
  4736  002252  0E00               	movlw	0
  4737  002254  6FE6               	movwf	_tempo_partida& (0+255),b
  4738                           
  4739                           ;tela_PRINCIPAL.h: 44: falha = 0;
  4740  002256  0E00               	movlw	0
  4741  002258  6FDD               	movwf	_falha& (0+255),b
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;tela_PRINCIPAL.h: 45: clearShiftREG();
  4745  00225A  ECD7  F03B         	call	_clearShiftREG	;wreg free
  4746  00225E                     l698:
  4747  00225E  FFFF               	dw	65535	; assembler added errata NOP
  4748                           
  4749                           ;tela_PRINCIPAL.h: 46: }
  4750                           ;tela_PRINCIPAL.h: 47: }
  4751                           ;tela_PRINCIPAL.h: 48: if (incendio) {
  4752  002260  0100               	movlb	0	; () banked
  4753  002262  51DB               	movf	_incendio& (0+255),w,b
  4754  002264  B4D8               	btfsc	status,2,c
  4755  002266  D00A               	goto	l699
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;tela_PRINCIPAL.h: 49: sprintf(line3, " ALERTA DE INCENDIO");
  4759  002268  0E65               	movlw	low _line3
  4760  00226A  6FA1               	movwf	sprintf@wh& (0+255),b
  4761  00226C  0E01               	movlw	high _line3
  4762  00226E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4763  002270  0E3B               	movlw	low STR_53
  4764  002272  6FA3               	movwf	sprintf@f& (0+255),b
  4765  002274  0E7D               	movlw	high STR_53
  4766  002276  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4767  002278  ECBB  F03D         	call	_sprintf	;wreg free
  4768  00227C                     l699:
  4769  00227C  FFFF               	dw	65535	; assembler added errata NOP
  4770                           
  4771                           ;tela_PRINCIPAL.h: 50: }
  4772                           ;tela_PRINCIPAL.h: 52: sprintf(line4, " %02d:%02d:%02d %02d/%02d/%02d", _hor, _min, _sec
      +                          , _dia, _mes, _ano);
  4773  00227E  0E50               	movlw	low _line4
  4774  002280  0100               	movlb	0	; () banked
  4775  002282  6FA1               	movwf	sprintf@wh& (0+255),b
  4776  002284  0E01               	movlw	high _line4
  4777  002286  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4778  002288  0EE8               	movlw	low STR_54
  4779  00228A  6FA3               	movwf	sprintf@f& (0+255),b
  4780  00228C  0E7C               	movlw	high STR_54
  4781  00228E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4782  002290  C0F1  F0A5         	movff	__hor,?_sprintf+4
  4783  002294  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4784  002296  C0F2  F0A7         	movff	__min,?_sprintf+6
  4785  00229A  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4786  00229C  C0F3  F0A9         	movff	__sec,?_sprintf+8
  4787  0022A0  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4788  0022A2  C0F0  F0AB         	movff	__dia,?_sprintf+10
  4789  0022A6  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  4790  0022A8  C0EF  F0AD         	movff	__mes,?_sprintf+12
  4791  0022AC  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  4792  0022AE  C0EE  F0AF         	movff	__ano,?_sprintf+14
  4793  0022B2  6BB0               	clrf	(?_sprintf+15)& (0+255),b
  4794  0022B4  ECBB  F03D         	call	_sprintf	;wreg free
  4795                           
  4796                           ;tela_PRINCIPAL.h: 54: if (btPress(4)) {
  4797  0022B8  0E04               	movlw	4
  4798  0022BA  EC6E  F01E         	call	_btPress
  4799  0022BE  0900               	iorlw	0
  4800  0022C0  B4D8               	btfsc	status,2,c
  4801  0022C2  D004               	goto	l700
  4802                           
  4803                           ;tela_PRINCIPAL.h: 55: menu_posi++;
  4804  0022C4  0100               	movlb	0	; () banked
  4805  0022C6  2BD9               	incf	_menu_posi& (0+255),f,b
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;tela_PRINCIPAL.h: 56: sub_menu_posi = 1;
  4809  0022C8  0E01               	movlw	1
  4810  0022CA  6E69               	movwf	_sub_menu_posi,c
  4811  0022CC                     l700:
  4812  0022CC  FFFF               	dw	65535	; assembler added errata NOP
  4813                           
  4814                           ; BSR set to: 0
  4815  0022CE  0012               	return		;funcret
  4816  0022D0  FFFF               	dw	65535	; errata NOP
  4817  0022D2                     __end_of_telaPrincipal:
  4818                           	opt stack 0
  4819                           tblptru	equ	0xFF8
  4820                           tblptrh	equ	0xFF7
  4821                           tblptrl	equ	0xFF6
  4822                           tablat	equ	0xFF5
  4823                           postinc0	equ	0xFEE
  4824                           wreg	equ	0xFE8
  4825                           postdec1	equ	0xFE5
  4826                           fsr1l	equ	0xFE1
  4827                           indf2	equ	0xFDF
  4828                           fsr2h	equ	0xFDA
  4829                           fsr2l	equ	0xFD9
  4830                           status	equ	0xFD8
  4831                           
  4832 ;; *************** function _setShiftREG *****************
  4833 ;; Defined at:
  4834 ;;		line 37 in file "shift595.h"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;		None
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  i               1    1[BANK0 ] unsigned char 
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  1    wreg      void 
  4841 ;; Registers used:
  4842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4848 ;;      Params:         0       0       0       0       0       0       0
  4849 ;;      Locals:         0       1       0       0       0       0       0
  4850 ;;      Temps:          0       1       0       0       0       0       0
  4851 ;;      Totals:         0       2       0       0       0       0       0
  4852 ;;Total ram usage:        2 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; Hardware stack levels required when called:    6
  4855 ;; This function calls:
  4856 ;;		Nothing
  4857 ;; This function is called by:
  4858 ;;		_main
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text7
  4863  007BBE                     __ptext7:
  4864                           	opt stack 0
  4865  007BBE                     _setShiftREG:
  4866                           	opt stack 0
  4867  007BBE  FFFF               	dw	65535	; assembler added errata NOP
  4868                           
  4869                           ;shift595.h: 38: unsigned char i = 0;
  4870                           
  4871                           ;incstack = 0
  4872  007BC0  0E00               	movlw	0
  4873  007BC2  0100               	movlb	0	; () banked
  4874  007BC4  6F81               	movwf	setShiftREG@i& (0+255),b
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;shift595.h: 39: PORTEbits.RE1 = 0;
  4878  007BC6  9284               	bcf	3972,1,c	;volatile
  4879                           
  4880                           ;shift595.h: 40: for (i = 0; i < 8; i++) {
  4881  007BC8  0E00               	movlw	0
  4882  007BCA  6F81               	movwf	setShiftREG@i& (0+255),b
  4883  007BCC  D015               	goto	l6364
  4884  007BCE                     l461:
  4885  007BCE  FFFF               	dw	65535	; assembler added errata NOP
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;shift595.h: 41: PORTEbits.RE0 = 0;
  4889  007BD0  9084               	bcf	3972,0,c	;volatile
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;shift595.h: 42: PORTEbits.RE2 = shift[i];
  4893  007BD2  5181               	movf	setShiftREG@i& (0+255),w,b
  4894  007BD4  0D01               	mullw	1
  4895  007BD6  0E44               	movlw	low _shift
  4896  007BD8  24F3               	addwf	prodl,w,c
  4897  007BDA  6ED9               	movwf	fsr2l,c
  4898  007BDC  0E00               	movlw	high _shift
  4899  007BDE  20F4               	addwfc	prodh,w,c
  4900  007BE0  6EDA               	movwf	fsr2h,c
  4901  007BE2  50DF               	movf	indf2,w,c
  4902  007BE4  6F80               	movwf	??_setShiftREG& (0+255),b
  4903  007BE6  4780               	rlncf	??_setShiftREG& (0+255),f,b
  4904  007BE8  4780               	rlncf	??_setShiftREG& (0+255),f,b
  4905  007BEA  5084               	movf	3972,w,c	;volatile
  4906  007BEC  1980               	xorwf	??_setShiftREG& (0+255),w,b
  4907  007BEE  0BFB               	andlw	-5
  4908  007BF0  1980               	xorwf	??_setShiftREG& (0+255),w,b
  4909  007BF2  6E84               	movwf	3972,c	;volatile
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;shift595.h: 43: PORTEbits.RE0 = 1;
  4913  007BF4  8084               	bsf	3972,0,c	;volatile
  4914                           
  4915                           ; BSR set to: 0
  4916  007BF6  2B81               	incf	setShiftREG@i& (0+255),f,b
  4917  007BF8                     l6364:
  4918  007BF8  FFFF               	dw	65535	; assembler added errata NOP
  4919                           
  4920                           ; BSR set to: 0
  4921  007BFA  0E07               	movlw	7
  4922  007BFC  6581               	cpfsgt	setShiftREG@i& (0+255),b
  4923  007BFE  D7E7               	goto	l461
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;shift595.h: 44: }
  4927                           ;shift595.h: 45: PORTEbits.RE1 = 1;
  4928  007C00  8284               	bsf	3972,1,c	;volatile
  4929                           
  4930                           ; BSR set to: 0
  4931  007C02  0012               	return		;funcret
  4932  007C04  FFFF               	dw	65535	; errata NOP
  4933  007C06                     __end_of_setShiftREG:
  4934                           	opt stack 0
  4935                           tblptru	equ	0xFF8
  4936                           tblptrh	equ	0xFF7
  4937                           tblptrl	equ	0xFF6
  4938                           tablat	equ	0xFF5
  4939                           prodh	equ	0xFF4
  4940                           prodl	equ	0xFF3
  4941                           postinc0	equ	0xFEE
  4942                           wreg	equ	0xFE8
  4943                           postdec1	equ	0xFE5
  4944                           fsr1l	equ	0xFE1
  4945                           indf2	equ	0xFDF
  4946                           fsr2h	equ	0xFDA
  4947                           fsr2l	equ	0xFD9
  4948                           status	equ	0xFD8
  4949                           
  4950 ;; *************** function _lerParametros *****************
  4951 ;; Defined at:
  4952 ;;		line 9 in file "util.h"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;		None
  4955 ;; Auto vars:     Size  Location     Type
  4956 ;;  i               1   21[BANK0 ] unsigned char 
  4957 ;;  verifica_mem    1   20[BANK0 ] unsigned char 
  4958 ;; Return value:  Size  Location     Type
  4959 ;;                  1    wreg      void 
  4960 ;; Registers used:
  4961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4962 ;; Tracked objects:
  4963 ;;		On entry : 0/0
  4964 ;;		On exit  : 0/0
  4965 ;;		Unchanged: 0/0
  4966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4967 ;;      Params:         0       0       0       0       0       0       0
  4968 ;;      Locals:         0       2       0       0       0       0       0
  4969 ;;      Temps:          0       0       0       0       0       0       0
  4970 ;;      Totals:         0       2       0       0       0       0       0
  4971 ;;Total ram usage:        2 bytes
  4972 ;; Hardware stack levels used:    1
  4973 ;; Hardware stack levels required when called:   10
  4974 ;; This function calls:
  4975 ;;		_readEEPROM16_ext
  4976 ;;		_readEEPROM_ext
  4977 ;;		_writeEEPROM_ext
  4978 ;; This function is called by:
  4979 ;;		_main
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           	psect	text8
  4984  002826                     __ptext8:
  4985                           	opt stack 0
  4986  002826                     _lerParametros:
  4987                           	opt stack 0
  4988  002826  FFFF               	dw	65535	; assembler added errata NOP
  4989                           
  4990                           ;util.h: 10: char i = 0;
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;incstack = 0
  4994  002828  0E00               	movlw	0
  4995  00282A  0100               	movlb	0	; () banked
  4996  00282C  6F95               	movwf	lerParametros@i& (0+255),b
  4997                           
  4998                           ;util.h: 11: char verifica_memoria_nova = 0;
  4999  00282E  0E00               	movlw	0
  5000  002830  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  5001                           
  5002                           ; BSR set to: 0
  5003                           ;util.h: 12: verifica_memoria_nova = readEEPROM_ext(12);
  5004  002832  0E0C               	movlw	12
  5005  002834  EC66  F01F         	call	_readEEPROM_ext
  5006  002838  0100               	movlb	0	; () banked
  5007  00283A  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;util.h: 13: if (verifica_memoria_nova != 20) {
  5011  00283C  0E14               	movlw	20
  5012  00283E  1994               	xorwf	lerParametros@verifica_memoria_nova& (0+255),w,b
  5013  002840  B4D8               	btfsc	status,2,c
  5014  002842  D016               	goto	l613
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;util.h: 14: for (i = 0; i < 100; i++) {
  5018  002844  0E00               	movlw	0
  5019  002846  6F95               	movwf	lerParametros@i& (0+255),b
  5020  002848                     l6566:
  5021  002848  FFFF               	dw	65535	; assembler added errata NOP
  5022                           
  5023                           ; BSR set to: 0
  5024  00284A  0E63               	movlw	99
  5025  00284C  6595               	cpfsgt	lerParametros@i& (0+255),b
  5026  00284E  D001               	goto	l614
  5027  002850  D009               	goto	u7270
  5028  002852                     l614:
  5029  002852  FFFF               	dw	65535	; assembler added errata NOP
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;util.h: 15: writeEEPROM_ext(i, 0);
  5033                           
  5034                           ; BSR set to: 0
  5035  002854  0E00               	movlw	0
  5036  002856  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  5037  002858  5195               	movf	lerParametros@i& (0+255),w,b
  5038  00285A  EC98  F03D         	call	_writeEEPROM_ext
  5039  00285E  0100               	movlb	0	; () banked
  5040  002860  2B95               	incf	lerParametros@i& (0+255),f,b
  5041  002862  D7F2               	goto	l6566
  5042  002864                     u7270:
  5043  002864  FFFF               	dw	65535	; assembler added errata NOP
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;util.h: 16: }
  5047                           ;util.h: 17: writeEEPROM_ext(12, 20);
  5048                           
  5049                           ; BSR set to: 0
  5050  002866  0E14               	movlw	20
  5051  002868  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  5052  00286A  0E0C               	movlw	12
  5053  00286C  EC98  F03D         	call	_writeEEPROM_ext
  5054  002870                     l613:
  5055  002870  FFFF               	dw	65535	; assembler added errata NOP
  5056                           
  5057                           ;util.h: 18: }
  5058                           ;util.h: 20: sp_jockey = readEEPROM_ext(0);
  5059  002872  0E00               	movlw	0
  5060  002874  EC66  F01F         	call	_readEEPROM_ext
  5061  002878  0100               	movlb	0	; () banked
  5062  00287A  6FE0               	movwf	_sp_jockey& (0+255),b
  5063                           
  5064                           ;util.h: 21: sp_principal = readEEPROM_ext(1);
  5065  00287C  0E01               	movlw	1
  5066  00287E  EC66  F01F         	call	_readEEPROM_ext
  5067  002882  0100               	movlb	0	; () banked
  5068  002884  6FDF               	movwf	_sp_principal& (0+255),b
  5069                           
  5070                           ;util.h: 22: sp_estacionaria = readEEPROM_ext(2);
  5071  002886  0E02               	movlw	2
  5072  002888  EC66  F01F         	call	_readEEPROM_ext
  5073  00288C  0100               	movlb	0	; () banked
  5074  00288E  6FDE               	movwf	_sp_estacionaria& (0+255),b
  5075                           
  5076                           ;util.h: 23: horimetro = readEEPROM16_ext(8);
  5077  002890  0E08               	movlw	8
  5078  002892  EC29  F03C         	call	_readEEPROM16_ext
  5079  002896  C08E  F04F         	movff	?_readEEPROM16_ext,_horimetro
  5080  00289A  C08F  F050         	movff	?_readEEPROM16_ext+1,_horimetro+1
  5081                           
  5082                           ;util.h: 24: sp_pressao_rede = readEEPROM_ext(4);
  5083  00289E  0E04               	movlw	4
  5084  0028A0  EC66  F01F         	call	_readEEPROM_ext
  5085  0028A4  0100               	movlb	0	; () banked
  5086  0028A6  6FE1               	movwf	_sp_pressao_rede& (0+255),b
  5087                           
  5088                           ;util.h: 25: intervalo_teste_dia = readEEPROM_ext(6);
  5089  0028A8  0E06               	movlw	6
  5090  0028AA  EC66  F01F         	call	_readEEPROM_ext
  5091  0028AE  0100               	movlb	0	; () banked
  5092  0028B0  6FEB               	movwf	_intervalo_teste_dia& (0+255),b
  5093                           
  5094                           ;util.h: 26: tempo_limite_estacionaria = readEEPROM_ext(7);
  5095  0028B2  0E07               	movlw	7
  5096  0028B4  EC66  F01F         	call	_readEEPROM_ext
  5097  0028B8  0100               	movlb	0	; () banked
  5098  0028BA  6FE8               	movwf	_tempo_limite_estacionaria& (0+255),b
  5099                           
  5100                           ;util.h: 27: dias_restante_teste = readEEPROM_ext(10);
  5101  0028BC  0E0A               	movlw	10
  5102  0028BE  EC66  F01F         	call	_readEEPROM_ext
  5103  0028C2  0100               	movlb	0	; () banked
  5104  0028C4  6FEA               	movwf	_dias_restante_teste& (0+255),b
  5105                           
  5106                           ;util.h: 28: horario_de_teste = readEEPROM_ext(11);
  5107  0028C6  0E0B               	movlw	11
  5108  0028C8  EC66  F01F         	call	_readEEPROM_ext
  5109  0028CC  0100               	movlb	0	; () banked
  5110  0028CE  6FE9               	movwf	_horario_de_teste& (0+255),b
  5111                           
  5112                           ;util.h: 29: tempo_limite_teste_estacionaria = readEEPROM_ext(13);
  5113  0028D0  0E0D               	movlw	13
  5114  0028D2  EC66  F01F         	call	_readEEPROM_ext
  5115  0028D6  0100               	movlb	0	; () banked
  5116  0028D8  6FE4               	movwf	_tempo_limite_teste_estacionaria& (0+255),b
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;util.h: 32: for (i = 0; i < 11; i++) {
  5120  0028DA  0E00               	movlw	0
  5121  0028DC  6F95               	movwf	lerParametros@i& (0+255),b
  5122  0028DE                     l6580:
  5123  0028DE  FFFF               	dw	65535	; assembler added errata NOP
  5124                           
  5125                           ; BSR set to: 0
  5126  0028E0  0E0A               	movlw	10
  5127  0028E2  6595               	cpfsgt	lerParametros@i& (0+255),b
  5128  0028E4  D001               	goto	l616
  5129  0028E6  D011               	goto	u7290
  5130  0028E8                     l616:
  5131  0028E8  FFFF               	dw	65535	; assembler added errata NOP
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;util.h: 33: tel1[i] = readEEPROM_ext(20 + i);
  5135                           
  5136                           ; BSR set to: 0
  5137  0028EA  5195               	movf	lerParametros@i& (0+255),w,b
  5138  0028EC  0D01               	mullw	1
  5139  0028EE  0EC4               	movlw	low _tel1
  5140  0028F0  24F3               	addwf	prodl,w,c
  5141  0028F2  6ED9               	movwf	fsr2l,c
  5142  0028F4  0E01               	movlw	high _tel1
  5143  0028F6  20F4               	addwfc	prodh,w,c
  5144  0028F8  6EDA               	movwf	fsr2h,c
  5145  0028FA  5195               	movf	lerParametros@i& (0+255),w,b
  5146  0028FC  0F14               	addlw	20
  5147  0028FE  EC66  F01F         	call	_readEEPROM_ext
  5148  002902  6EDF               	movwf	indf2,c
  5149  002904  0100               	movlb	0	; () banked
  5150  002906  2B95               	incf	lerParametros@i& (0+255),f,b
  5151  002908  D7EA               	goto	l6580
  5152  00290A                     u7290:
  5153  00290A  FFFF               	dw	65535	; assembler added errata NOP
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;util.h: 34: }
  5157                           ;util.h: 35: for (i = 0; i < 11; i++) {
  5158                           
  5159                           ; BSR set to: 0
  5160  00290C  0E00               	movlw	0
  5161  00290E  6F95               	movwf	lerParametros@i& (0+255),b
  5162  002910                     l6592:
  5163  002910  FFFF               	dw	65535	; assembler added errata NOP
  5164                           
  5165                           ; BSR set to: 0
  5166  002912  0E0A               	movlw	10
  5167  002914  6595               	cpfsgt	lerParametros@i& (0+255),b
  5168  002916  D001               	goto	l618
  5169  002918  D011               	goto	u7310
  5170  00291A                     l618:
  5171  00291A  FFFF               	dw	65535	; assembler added errata NOP
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;util.h: 36: tel2[i] = readEEPROM_ext(40 + i);
  5175                           
  5176                           ; BSR set to: 0
  5177  00291C  5195               	movf	lerParametros@i& (0+255),w,b
  5178  00291E  0D01               	mullw	1
  5179  002920  0EB8               	movlw	low _tel2
  5180  002922  24F3               	addwf	prodl,w,c
  5181  002924  6ED9               	movwf	fsr2l,c
  5182  002926  0E01               	movlw	high _tel2
  5183  002928  20F4               	addwfc	prodh,w,c
  5184  00292A  6EDA               	movwf	fsr2h,c
  5185  00292C  5195               	movf	lerParametros@i& (0+255),w,b
  5186  00292E  0F28               	addlw	40
  5187  002930  EC66  F01F         	call	_readEEPROM_ext
  5188  002934  6EDF               	movwf	indf2,c
  5189  002936  0100               	movlb	0	; () banked
  5190  002938  2B95               	incf	lerParametros@i& (0+255),f,b
  5191  00293A  D7EA               	goto	l6592
  5192  00293C                     u7310:
  5193  00293C  FFFF               	dw	65535	; assembler added errata NOP
  5194                           
  5195                           ; BSR set to: 0
  5196                           
  5197                           ; BSR set to: 0
  5198  00293E  0012               	return		;funcret
  5199  002940  FFFF               	dw	65535	; errata NOP
  5200  002942                     __end_of_lerParametros:
  5201                           	opt stack 0
  5202                           tblptru	equ	0xFF8
  5203                           tblptrh	equ	0xFF7
  5204                           tblptrl	equ	0xFF6
  5205                           tablat	equ	0xFF5
  5206                           prodh	equ	0xFF4
  5207                           prodl	equ	0xFF3
  5208                           postinc0	equ	0xFEE
  5209                           wreg	equ	0xFE8
  5210                           postdec1	equ	0xFE5
  5211                           fsr1l	equ	0xFE1
  5212                           indf2	equ	0xFDF
  5213                           fsr2h	equ	0xFDA
  5214                           fsr2l	equ	0xFD9
  5215                           status	equ	0xFD8
  5216                           
  5217 ;; *************** function _readEEPROM16_ext *****************
  5218 ;; Defined at:
  5219 ;;		line 48 in file "eeprom.h"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;  adress          1    wreg     unsigned char 
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;  adress          1   19[BANK0 ] unsigned char 
  5224 ;;  data            2   17[BANK0 ] unsigned int 
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  2   14[BANK0 ] unsigned int 
  5227 ;; Registers used:
  5228 ;;		wreg, status,2, status,0, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : 0/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5234 ;;      Params:         0       2       0       0       0       0       0
  5235 ;;      Locals:         0       3       0       0       0       0       0
  5236 ;;      Temps:          0       1       0       0       0       0       0
  5237 ;;      Totals:         0       6       0       0       0       0       0
  5238 ;;Total ram usage:        6 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    9
  5241 ;; This function calls:
  5242 ;;		_readEEPROM_ext
  5243 ;; This function is called by:
  5244 ;;		_lerParametros
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248                           	psect	text9
  5249  007852                     __ptext9:
  5250                           	opt stack 0
  5251  007852                     _readEEPROM16_ext:
  5252                           	opt stack 0
  5253  007852  FFFF               	dw	65535	; assembler added errata NOP
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;incstack = 0
  5257                           ;readEEPROM16_ext@adress stored from wreg
  5258  007854  0100               	movlb	0	; () banked
  5259  007856  6F93               	movwf	readEEPROM16_ext@adress& (0+255),b
  5260                           
  5261                           ;eeprom.h: 49: unsigned int data;
  5262                           ;eeprom.h: 50: data = readEEPROM_ext(adress + 1);
  5263  007858  0100               	movlb	0	; () banked
  5264  00785A  2993               	incf	readEEPROM16_ext@adress& (0+255),w,b
  5265  00785C  EC66  F01F         	call	_readEEPROM_ext
  5266  007860  0100               	movlb	0	; () banked
  5267  007862  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  5268  007864  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  5269  007866  6F91               	movwf	readEEPROM16_ext@data& (0+255),b
  5270  007868  6B92               	clrf	(readEEPROM16_ext@data+1)& (0+255),b
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;eeprom.h: 51: data <<= 8;
  5274  00786A  5191               	movf	readEEPROM16_ext@data& (0+255),w,b
  5275  00786C  6F92               	movwf	(readEEPROM16_ext@data+1)& (0+255),b
  5276  00786E  6B91               	clrf	readEEPROM16_ext@data& (0+255),b
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;eeprom.h: 52: data |= readEEPROM_ext(adress);
  5280  007870  5193               	movf	readEEPROM16_ext@adress& (0+255),w,b
  5281  007872  EC66  F01F         	call	_readEEPROM_ext
  5282  007876  0100               	movlb	0	; () banked
  5283  007878  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  5284  00787A  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  5285  00787C  1391               	iorwf	readEEPROM16_ext@data& (0+255),f,b
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;eeprom.h: 53: return data;
  5289  00787E  C091  F08E         	movff	readEEPROM16_ext@data,?_readEEPROM16_ext
  5290  007882  C092  F08F         	movff	readEEPROM16_ext@data+1,?_readEEPROM16_ext+1
  5291                           
  5292                           ; BSR set to: 0
  5293                           
  5294                           ; BSR set to: 0
  5295  007886  0012               	return		;funcret
  5296  007888  FFFF               	dw	65535	; errata NOP
  5297  00788A                     __end_of_readEEPROM16_ext:
  5298                           	opt stack 0
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           prodh	equ	0xFF4
  5304                           prodl	equ	0xFF3
  5305                           postinc0	equ	0xFEE
  5306                           wreg	equ	0xFE8
  5307                           postdec1	equ	0xFE5
  5308                           fsr1l	equ	0xFE1
  5309                           indf2	equ	0xFDF
  5310                           fsr2h	equ	0xFDA
  5311                           fsr2l	equ	0xFD9
  5312                           status	equ	0xFD8
  5313                           
  5314 ;; *************** function _informacoes *****************
  5315 ;; Defined at:
  5316 ;;		line 7 in file "tela_INFORMACOES.h"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;		None
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;		None
  5321 ;; Return value:  Size  Location     Type
  5322 ;;                  1    wreg      void 
  5323 ;; Registers used:
  5324 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5330 ;;      Params:         0       0       0       0       0       0       0
  5331 ;;      Locals:         0       0       0       0       0       0       0
  5332 ;;      Temps:          0       0       0       0       0       0       0
  5333 ;;      Totals:         0       0       0       0       0       0       0
  5334 ;;Total ram usage:        0 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    9
  5337 ;; This function calls:
  5338 ;;		_btPress
  5339 ;;		_sprintf
  5340 ;; This function is called by:
  5341 ;;		_main
  5342 ;; This function uses a non-reentrant model
  5343 ;;
  5344                           
  5345                           	psect	text10
  5346  003C68                     __ptext10:
  5347                           	opt stack 0
  5348  003C68                     _informacoes:
  5349                           	opt stack 0
  5350  003C68  FFFF               	dw	65535	; assembler added errata NOP
  5351                           
  5352                           ;tela_INFORMACOES.h: 8: sprintf(line1, "TECHNOW");
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;incstack = 0
  5356  003C6A  0E8F               	movlw	low _line1
  5357  003C6C  0100               	movlb	0	; () banked
  5358  003C6E  6FA1               	movwf	sprintf@wh& (0+255),b
  5359  003C70  0E01               	movlw	high _line1
  5360  003C72  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5361  003C74  0EA3               	movlw	low STR_73
  5362  003C76  6FA3               	movwf	sprintf@f& (0+255),b
  5363  003C78  0E7F               	movlw	high STR_73
  5364  003C7A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5365  003C7C  ECBB  F03D         	call	_sprintf	;wreg free
  5366                           
  5367                           ;tela_INFORMACOES.h: 9: sprintf(line2, "Sistemas embarcados");
  5368  003C80  0E7A               	movlw	low _line2
  5369  003C82  0100               	movlb	0	; () banked
  5370  003C84  6FA1               	movwf	sprintf@wh& (0+255),b
  5371  003C86  0E01               	movlw	high _line2
  5372  003C88  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5373  003C8A  0E8B               	movlw	low STR_74
  5374  003C8C  6FA3               	movwf	sprintf@f& (0+255),b
  5375  003C8E  0E7D               	movlw	high STR_74
  5376  003C90  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5377  003C92  ECBB  F03D         	call	_sprintf	;wreg free
  5378                           
  5379                           ;tela_INFORMACOES.h: 10: sprintf(line3, "   48 99906-5651");
  5380  003C96  0E65               	movlw	low _line3
  5381  003C98  0100               	movlb	0	; () banked
  5382  003C9A  6FA1               	movwf	sprintf@wh& (0+255),b
  5383  003C9C  0E01               	movlw	high _line3
  5384  003C9E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5385  003CA0  0E34               	movlw	low STR_75
  5386  003CA2  6FA3               	movwf	sprintf@f& (0+255),b
  5387  003CA4  0E7E               	movlw	high STR_75
  5388  003CA6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5389  003CA8  ECBB  F03D         	call	_sprintf	;wreg free
  5390                           
  5391                           ;tela_INFORMACOES.h: 11: sprintf(line4, "versao - %s", "Aug 04 2019");
  5392  003CAC  0E50               	movlw	low _line4
  5393  003CAE  0100               	movlb	0	; () banked
  5394  003CB0  6FA1               	movwf	sprintf@wh& (0+255),b
  5395  003CB2  0E01               	movlw	high _line4
  5396  003CB4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5397  003CB6  0E1B               	movlw	low STR_76
  5398  003CB8  6FA3               	movwf	sprintf@f& (0+255),b
  5399  003CBA  0E7F               	movlw	high STR_76
  5400  003CBC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5401  003CBE  0EF7               	movlw	low STR_77
  5402  003CC0  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  5403  003CC2  0E7E               	movlw	high STR_77
  5404  003CC4  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  5405  003CC6  ECBB  F03D         	call	_sprintf	;wreg free
  5406                           
  5407                           ;tela_INFORMACOES.h: 12: if (btPress(1)) {
  5408  003CCA  0E01               	movlw	1
  5409  003CCC  EC6E  F01E         	call	_btPress
  5410  003CD0  0900               	iorlw	0
  5411  003CD2  A4D8               	btfss	status,2,c
  5412                           
  5413                           ;tela_INFORMACOES.h: 13: menu_posi = _menu_posi;
  5414  003CD4  C0D8  F0D9         	movff	__menu_posi,_menu_posi
  5415  003CD8  0012               	return		;funcret
  5416  003CDA  FFFF               	dw	65535	; errata NOP
  5417  003CDC                     __end_of_informacoes:
  5418                           	opt stack 0
  5419                           tblptru	equ	0xFF8
  5420                           tblptrh	equ	0xFF7
  5421                           tblptrl	equ	0xFF6
  5422                           tablat	equ	0xFF5
  5423                           prodh	equ	0xFF4
  5424                           prodl	equ	0xFF3
  5425                           postinc0	equ	0xFEE
  5426                           wreg	equ	0xFE8
  5427                           postdec1	equ	0xFE5
  5428                           fsr1l	equ	0xFE1
  5429                           indf2	equ	0xFDF
  5430                           fsr2h	equ	0xFDA
  5431                           fsr2l	equ	0xFD9
  5432                           status	equ	0xFD8
  5433                           
  5434 ;; *************** function _getSinalSIM800L *****************
  5435 ;; Defined at:
  5436 ;;		line 13 in file "comunicacao.h"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;		None
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;  sinal           2   74[BANK0 ] int 
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      void 
  5443 ;; Registers used:
  5444 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5450 ;;      Params:         0       0       0       0       0       0       0
  5451 ;;      Locals:         0       2       0       0       0       0       0
  5452 ;;      Temps:          0       2       0       0       0       0       0
  5453 ;;      Totals:         0       4       0       0       0       0       0
  5454 ;;Total ram usage:        4 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; Hardware stack levels required when called:   10
  5457 ;; This function calls:
  5458 ;;		_aguardaBuffer
  5459 ;;		_atoi
  5460 ;;		_getSerial
  5461 ;;		_limparBuffer
  5462 ;;		_printf
  5463 ;;		_writeChar
  5464 ;; This function is called by:
  5465 ;;		_main
  5466 ;; This function uses a non-reentrant model
  5467 ;;
  5468                           
  5469                           	psect	text11
  5470  002440                     __ptext11:
  5471                           	opt stack 0
  5472  002440                     _getSinalSIM800L:
  5473                           	opt stack 0
  5474  002440  FFFF               	dw	65535	; assembler added errata NOP
  5475                           
  5476                           ;comunicacao.h: 14: if (!timerVerificarSinal) {
  5477                           
  5478                           ;incstack = 0
  5479  002442  0100               	movlb	0	; () banked
  5480  002444  51FE               	movf	_timerVerificarSinal& (0+255),w,b
  5481  002446  A4D8               	btfss	status,2,c
  5482  002448  D0AC               	goto	l318
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;comunicacao.h: 15: if (!gsmOcupado) {
  5486  00244A  51F4               	movf	_gsmOcupado& (0+255),w,b
  5487  00244C  B4D8               	btfsc	status,2,c
  5488  00244E  D098               	goto	l316
  5489  002450  D0A8               	goto	l318
  5490  002452  FFFF               	dw	65535	; assembler added errata NOP
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;comunicacao.h: 18: limparBuffer();
  5494                           
  5495                           ; BSR set to: 0
  5496  002454  ECF2  F03B         	call	_limparBuffer	;wreg free
  5497                           
  5498                           ;comunicacao.h: 19: printf("AT+CSQ\r\n");
  5499  002458  0E91               	movlw	low STR_3
  5500  00245A  0100               	movlb	0	; () banked
  5501  00245C  6FA1               	movwf	printf@f& (0+255),b
  5502  00245E  0E7F               	movlw	high STR_3
  5503  002460  6FA2               	movwf	(printf@f+1)& (0+255),b
  5504  002462  ECE1  F01F         	call	_printf	;wreg free
  5505                           
  5506                           ;comunicacao.h: 20: timerEtapaComunicacao = 10;
  5507  002466  0E0A               	movlw	10
  5508  002468  0100               	movlb	0	; () banked
  5509  00246A  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  5510                           
  5511                           ; BSR set to: 0
  5512                           ;comunicacao.h: 21: etapaComunicacao = 1;
  5513  00246C  0E00               	movlw	0
  5514  00246E  6E52               	movwf	_etapaComunicacao+1,c
  5515  002470  0E01               	movlw	1
  5516  002472  D083               	goto	L9
  5517  002474  FFFF               	dw	65535	; assembler added errata NOP
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;comunicacao.h: 24: if (!timerEtapaComunicacao) {
  5521                           
  5522                           ; BSR set to: 0
  5523  002476  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  5524  002478  A4D8               	btfss	status,2,c
  5525  00247A  D00D               	goto	l320
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;comunicacao.h: 25: etapaComunicacao = 0;
  5529  00247C  0E00               	movlw	0
  5530  00247E  6E52               	movwf	_etapaComunicacao+1,c
  5531  002480  0E00               	movlw	0
  5532  002482  6E51               	movwf	_etapaComunicacao,c
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;comunicacao.h: 26: writeChar(0x1A);
  5536  002484  0E1A               	movlw	26
  5537  002486  6F80               	movwf	writeChar@hex& (0+255),b
  5538  002488  0E00               	movlw	0
  5539  00248A  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  5540  00248C  ECAB  F03A         	call	_writeChar	;wreg free
  5541                           
  5542                           ;comunicacao.h: 27: intensidadeSinal = 'x';
  5543  002490  0E78               	movlw	120
  5544  002492  0100               	movlb	0	; () banked
  5545  002494  6FFF               	movwf	_intensidadeSinal& (0+255),b
  5546  002496                     l320:
  5547  002496  FFFF               	dw	65535	; assembler added errata NOP
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;comunicacao.h: 28: }
  5551                           ;comunicacao.h: 29: if (aguardaBuffer("+CSQ: ")) {
  5552                           
  5553                           ; BSR set to: 0
  5554  002498  0EB9               	movlw	low STR_4
  5555  00249A  6F93               	movwf	aguardaBuffer@str& (0+255),b
  5556  00249C  0E7F               	movlw	high STR_4
  5557  00249E  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  5558  0024A0  ECF6  F03C         	call	_aguardaBuffer	;wreg free
  5559  0024A4  0900               	iorlw	0
  5560  0024A6  B4D8               	btfsc	status,2,c
  5561  0024A8  D07C               	goto	l318
  5562                           
  5563                           ;comunicacao.h: 30: int sinal = atoi(getSerial("+CSQ: ", ','));
  5564  0024AA  0EB9               	movlw	low STR_4
  5565  0024AC  0100               	movlb	0	; () banked
  5566  0024AE  6FB7               	movwf	getSerial@str& (0+255),b
  5567  0024B0  0E7F               	movlw	high STR_4
  5568  0024B2  6FB8               	movwf	(getSerial@str+1)& (0+255),b
  5569  0024B4  0E2C               	movlw	44
  5570  0024B6  6FB9               	movwf	getSerial@end& (0+255),b
  5571  0024B8  ECA1  F014         	call	_getSerial	;wreg free
  5572  0024BC  C0B7  F0C1         	movff	?_getSerial,atoi@s
  5573  0024C0  C0B8  F0C2         	movff	?_getSerial+1,atoi@s+1
  5574  0024C4  EC4B  F017         	call	_atoi	;wreg free
  5575  0024C8  C0C1  F0CA         	movff	?_atoi,getSinalSIM800L@sinal
  5576  0024CC  C0C2  F0CB         	movff	?_atoi+1,getSinalSIM800L@sinal+1
  5577                           
  5578                           ;comunicacao.h: 31: if (sinal < 10) {
  5579  0024D0  0100               	movlb	0	; () banked
  5580  0024D2  BFCB               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  5581  0024D4  D006               	goto	u6770
  5582  0024D6  51CB               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  5583  0024D8  E108               	bnz	l6322
  5584  0024DA  0E0A               	movlw	10
  5585  0024DC  5DCA               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  5586  0024DE  B0D8               	btfsc	status,0,c
  5587  0024E0  D003               	goto	l322
  5588  0024E2                     u6770:
  5589  0024E2  FFFF               	dw	65535	; assembler added errata NOP
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;comunicacao.h: 32: intensidadeSinal = ' ';
  5593  0024E4  0E20               	movlw	32
  5594  0024E6  D03B               	goto	L12
  5595  0024E8                     l322:
  5596  0024E8  FFFF               	dw	65535	; assembler added errata NOP
  5597  0024EA                     l6322:
  5598                           
  5599                           ; BSR set to: 0
  5600  0024EA  BFCB               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  5601  0024EC  D011               	goto	l324
  5602  0024EE  51CB               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  5603  0024F0  E104               	bnz	u6780
  5604  0024F2  0E0A               	movlw	10
  5605  0024F4  5DCA               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  5606  0024F6  A0D8               	btfss	status,0,c
  5607  0024F8  D00B               	goto	l324
  5608  0024FA                     u6780:
  5609                           
  5610                           ; BSR set to: 0
  5611  0024FA  BFCB               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  5612  0024FC  D006               	goto	u6790
  5613  0024FE  51CB               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  5614  002500  E108               	bnz	l6328
  5615  002502  0E0F               	movlw	15
  5616  002504  5DCA               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  5617  002506  B0D8               	btfsc	status,0,c
  5618  002508  D003               	goto	l324
  5619  00250A                     u6790:
  5620  00250A  FFFF               	dw	65535	; assembler added errata NOP
  5621                           
  5622                           ; BSR set to: 0
  5623                           ;comunicacao.h: 34: intensidadeSinal = 0x02;
  5624  00250C  0E02               	movlw	2
  5625  00250E  D027               	goto	L12
  5626  002510                     l324:
  5627  002510  FFFF               	dw	65535	; assembler added errata NOP
  5628  002512                     l6328:
  5629                           
  5630                           ; BSR set to: 0
  5631  002512  BFCB               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  5632  002514  D011               	goto	l326
  5633  002516  51CB               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  5634  002518  E104               	bnz	u6800
  5635  00251A  0E10               	movlw	16
  5636  00251C  5DCA               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  5637  00251E  A0D8               	btfss	status,0,c
  5638  002520  D00B               	goto	l326
  5639  002522                     u6800:
  5640                           
  5641                           ; BSR set to: 0
  5642  002522  BFCB               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  5643  002524  D006               	goto	u6810
  5644  002526  51CB               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  5645  002528  E108               	bnz	l6334
  5646  00252A  0E14               	movlw	20
  5647  00252C  5DCA               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  5648  00252E  B0D8               	btfsc	status,0,c
  5649  002530  D003               	goto	l326
  5650  002532                     u6810:
  5651  002532  FFFF               	dw	65535	; assembler added errata NOP
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;comunicacao.h: 36: intensidadeSinal = 0x03;
  5655  002534  0E03               	movlw	3
  5656  002536  D013               	goto	L12
  5657  002538                     l326:
  5658  002538  FFFF               	dw	65535	; assembler added errata NOP
  5659  00253A                     l6334:
  5660                           
  5661                           ; BSR set to: 0
  5662  00253A  BFCB               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  5663  00253C  D012               	goto	l328
  5664  00253E  51CB               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  5665  002540  E104               	bnz	u6820
  5666  002542  0E14               	movlw	20
  5667  002544  5DCA               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  5668  002546  A0D8               	btfss	status,0,c
  5669  002548  D00C               	goto	l328
  5670  00254A                     u6820:
  5671                           
  5672                           ; BSR set to: 0
  5673  00254A  BFCB               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  5674  00254C  D006               	goto	u6830
  5675  00254E  51CB               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  5676  002550  E109               	bnz	l323
  5677  002552  0E1F               	movlw	31
  5678  002554  5DCA               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  5679  002556  B0D8               	btfsc	status,0,c
  5680  002558  D004               	goto	l328
  5681  00255A                     u6830:
  5682  00255A  FFFF               	dw	65535	; assembler added errata NOP
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;comunicacao.h: 38: intensidadeSinal = 0x04;
  5686  00255C  0E04               	movlw	4
  5687  00255E                     L12:
  5688  00255E  FFFF               	dw	65535	; assembler added errata NOP
  5689  002560  6FFF               	movwf	_intensidadeSinal& (0+255),b
  5690  002562                     l328:
  5691  002562  FFFF               	dw	65535	; assembler added errata NOP
  5692  002564                     l323:
  5693                           
  5694                           ; BSR set to: 0
  5695                           ;comunicacao.h: 39: }
  5696                           ;comunicacao.h: 40: etapaComunicacao = 0;
  5697  002564  0E00               	movlw	0
  5698  002566  6E52               	movwf	_etapaComunicacao+1,c
  5699  002568  0E00               	movlw	0
  5700  00256A  6E51               	movwf	_etapaComunicacao,c
  5701                           
  5702                           ;comunicacao.h: 41: timerVerificarSinal = 15;
  5703  00256C  0E0F               	movlw	15
  5704  00256E  6FFE               	movwf	_timerVerificarSinal& (0+255),b
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;comunicacao.h: 42: }
  5708                           ;comunicacao.h: 43: break;
  5709  002570  D018               	goto	l318
  5710  002572  FFFF               	dw	65535	; assembler added errata NOP
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;comunicacao.h: 45: etapaComunicacao = 0;
  5714                           
  5715                           ; BSR set to: 0
  5716  002574  0E00               	movlw	0
  5717  002576  6E52               	movwf	_etapaComunicacao+1,c
  5718  002578  0E00               	movlw	0
  5719  00257A                     L9:
  5720  00257A  FFFF               	dw	65535	; assembler added errata NOP
  5721  00257C  6E51               	movwf	_etapaComunicacao,c
  5722                           
  5723                           ;comunicacao.h: 46: }
  5724  00257E  D011               	goto	l318
  5725  002580                     l316:
  5726  002580  FFFF               	dw	65535	; assembler added errata NOP
  5727                           
  5728                           ; BSR set to: 0
  5729                           
  5730                           ; BSR set to: 0
  5731  002582  C051  F0C8         	movff	_etapaComunicacao,??_getSinalSIM800L
  5732  002586  C052  F0C9         	movff	_etapaComunicacao+1,??_getSinalSIM800L+1
  5733                           
  5734                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5735                           ; Switch size 1, requested type "space"
  5736                           ; Number of cases is 1, Range of values is 0 to 0
  5737                           ; switch strategies available:
  5738                           ; Name         Instructions Cycles
  5739                           ; simple_byte            4     3 (average)
  5740                           ;	Chosen strategy is simple_byte
  5741  00258A  51C9               	movf	(??_getSinalSIM800L+1)& (0+255),w,b
  5742  00258C  0A00               	xorlw	0	; case 0
  5743  00258E  A4D8               	btfss	status,2,c
  5744  002590  D7F0               	goto	l329
  5745                           
  5746                           ; BSR set to: 0
  5747                           ; Switch size 1, requested type "space"
  5748                           ; Number of cases is 2, Range of values is 0 to 1
  5749                           ; switch strategies available:
  5750                           ; Name         Instructions Cycles
  5751                           ; simple_byte            7     4 (average)
  5752                           ;	Chosen strategy is simple_byte
  5753  002592  51C8               	movf	??_getSinalSIM800L& (0+255),w,b
  5754  002594  0A00               	xorlw	0	; case 0
  5755  002596  B4D8               	btfsc	status,2,c
  5756  002598  D75C               	goto	l317
  5757  00259A  0A01               	xorlw	1	; case 1
  5758  00259C  B4D8               	btfsc	status,2,c
  5759  00259E  D76A               	goto	l319
  5760  0025A0  D7E8               	goto	l329
  5761  0025A2                     l318:
  5762  0025A2  FFFF               	dw	65535	; assembler added errata NOP
  5763                           
  5764                           ; BSR set to: 0
  5765                           
  5766                           ; BSR set to: 0
  5767                           
  5768                           ; BSR set to: 0
  5769  0025A4  0012               	return		;funcret
  5770  0025A6  FFFF               	dw	65535	; errata NOP
  5771  0025A8                     __end_of_getSinalSIM800L:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           postinc0	equ	0xFEE
  5780                           wreg	equ	0xFE8
  5781                           postdec1	equ	0xFE5
  5782                           fsr1l	equ	0xFE1
  5783                           indf2	equ	0xFDF
  5784                           fsr2h	equ	0xFDA
  5785                           fsr2l	equ	0xFD9
  5786                           status	equ	0xFD8
  5787                           
  5788 ;; *************** function _getSerial *****************
  5789 ;; Defined at:
  5790 ;;		line 40 in file "serial.h"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;  str             2   55[BANK0 ] PTR unsigned char 
  5793 ;;		 -> STR_5(7), 
  5794 ;;  end             1   57[BANK0 ] unsigned char 
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;  i               1   62[BANK0 ] unsigned char 
  5797 ;;  ret             2   63[BANK0 ] PTR unsigned char 
  5798 ;;		 -> NULL(0), bufferSerial(60), 
  5799 ;;  length          2   60[BANK0 ] unsigned int 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  2   55[BANK0 ] PTR unsigned char 
  5802 ;; Registers used:
  5803 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5809 ;;      Params:         0       3       0       0       0       0       0
  5810 ;;      Locals:         0       5       0       0       0       0       0
  5811 ;;      Temps:          0       2       0       0       0       0       0
  5812 ;;      Totals:         0      10       0       0       0       0       0
  5813 ;;Total ram usage:       10 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    9
  5816 ;; This function calls:
  5817 ;;		_memset
  5818 ;;		_sprintf
  5819 ;;		_strlen
  5820 ;;		_strstr
  5821 ;; This function is called by:
  5822 ;;		_getSinalSIM800L
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	text12
  5827  002942                     __ptext12:
  5828                           	opt stack 0
  5829  002942                     _getSerial:
  5830                           	opt stack 0
  5831  002942  FFFF               	dw	65535	; assembler added errata NOP
  5832                           
  5833                           ;serial.h: 41: memset(bufferAUX, 0, sizeof (bufferAUX));
  5834                           
  5835                           ;incstack = 0
  5836  002944  0EA4               	movlw	low _bufferAUX
  5837  002946  0100               	movlb	0	; () banked
  5838  002948  6F80               	movwf	memset@p1& (0+255),b
  5839  00294A  0E01               	movlw	high _bufferAUX
  5840  00294C  6F81               	movwf	(memset@p1+1)& (0+255),b
  5841  00294E  0E00               	movlw	0
  5842  002950  6F83               	movwf	(memset@c+1)& (0+255),b
  5843  002952  0E00               	movlw	0
  5844  002954  6F82               	movwf	memset@c& (0+255),b
  5845  002956  0E00               	movlw	0
  5846  002958  6F85               	movwf	(memset@n+1)& (0+255),b
  5847  00295A  0E14               	movlw	20
  5848  00295C  6F84               	movwf	memset@n& (0+255),b
  5849  00295E  EC7F  F03C         	call	_memset	;wreg free
  5850                           
  5851                           ;serial.h: 42: unsigned int length = strlen(str);
  5852  002962  C0B7  F080         	movff	getSerial@str,strlen@s
  5853  002966  C0B8  F081         	movff	getSerial@str+1,strlen@s+1
  5854  00296A  EC0B  F01F         	call	_strlen	;wreg free
  5855  00296E  C080  F0BC         	movff	?_strlen,getSerial@length
  5856  002972  C081  F0BD         	movff	?_strlen+1,getSerial@length+1
  5857                           
  5858                           ;serial.h: 43: char* ret;
  5859                           ;serial.h: 44: ret = strstr(bufferSerial, str);
  5860  002976  0E14               	movlw	low _bufferSerial
  5861  002978  0100               	movlb	0	; () banked
  5862  00297A  6F8F               	movwf	strstr@s1& (0+255),b
  5863  00297C  0E01               	movlw	high _bufferSerial
  5864  00297E  6F90               	movwf	(strstr@s1+1)& (0+255),b
  5865  002980  C0B7  F091         	movff	getSerial@str,strstr@s2
  5866  002984  C0B8  F092         	movff	getSerial@str+1,strstr@s2+1
  5867  002988  EC53  F01C         	call	_strstr	;wreg free
  5868  00298C  C08F  F0BF         	movff	?_strstr,getSerial@ret
  5869  002990  C090  F0C0         	movff	?_strstr+1,getSerial@ret+1
  5870                           
  5871                           ;serial.h: 45: if (ret) {
  5872  002994  0100               	movlb	0	; () banked
  5873  002996  51BF               	movf	getSerial@ret& (0+255),w,b
  5874  002998  11C0               	iorwf	(getSerial@ret+1)& (0+255),w,b
  5875  00299A  B4D8               	btfsc	status,2,c
  5876  00299C  D058               	goto	u5680
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;serial.h: 46: unsigned char i = 0;
  5880  00299E  0E00               	movlw	0
  5881  0029A0  6FBE               	movwf	getSerial@i& (0+255),b
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;serial.h: 47: for (i = length; i < strlen(ret); i++) {
  5885  0029A2  C0BC  F0BE         	movff	getSerial@length,getSerial@i
  5886  0029A6  D042               	goto	l281
  5887  0029A8  FFFF               	dw	65535	; assembler added errata NOP
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;serial.h: 48: if (ret[i] == end) {
  5891                           
  5892                           ; BSR set to: 0
  5893  0029AA  51BE               	movf	getSerial@i& (0+255),w,b
  5894  0029AC  0D01               	mullw	1
  5895  0029AE  50F3               	movf	prodl,w,c
  5896  0029B0  25BF               	addwf	getSerial@ret& (0+255),w,b
  5897  0029B2  6ED9               	movwf	fsr2l,c
  5898  0029B4  50F4               	movf	prodh,w,c
  5899  0029B6  21C0               	addwfc	(getSerial@ret+1)& (0+255),w,b
  5900  0029B8  6EDA               	movwf	fsr2h,c
  5901  0029BA  51B9               	movf	getSerial@end& (0+255),w,b
  5902  0029BC  18DE               	xorwf	postinc2,w,c
  5903  0029BE  A4D8               	btfss	status,2,c
  5904  0029C0  D017               	goto	l283
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;serial.h: 49: sprintf(bufferAUX, "%s%c", bufferAUX, '\0');
  5908  0029C2  0EA4               	movlw	low _bufferAUX
  5909  0029C4  6FA1               	movwf	sprintf@wh& (0+255),b
  5910  0029C6  0E01               	movlw	high _bufferAUX
  5911  0029C8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5912  0029CA  0EF0               	movlw	low STR_1
  5913  0029CC  6FA3               	movwf	sprintf@f& (0+255),b
  5914  0029CE  0E7F               	movlw	high STR_1
  5915  0029D0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5916  0029D2  0EA4               	movlw	low _bufferAUX
  5917  0029D4  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  5918  0029D6  0E01               	movlw	high _bufferAUX
  5919  0029D8  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  5920  0029DA  0E00               	movlw	0
  5921  0029DC  6FA8               	movwf	(?_sprintf+7)& (0+255),b
  5922  0029DE  0E00               	movlw	0
  5923  0029E0  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  5924  0029E2  ECBB  F03D         	call	_sprintf	;wreg free
  5925                           
  5926                           ;serial.h: 50: return bufferAUX;
  5927  0029E6  0EA4               	movlw	low _bufferAUX
  5928  0029E8  0100               	movlb	0	; () banked
  5929  0029EA  6FB7               	movwf	?_getSerial& (0+255),b
  5930  0029EC  0E01               	movlw	high _bufferAUX
  5931  0029EE  D033               	goto	L13
  5932  0029F0                     l283:
  5933  0029F0  FFFF               	dw	65535	; assembler added errata NOP
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;serial.h: 51: }
  5937                           ;serial.h: 52: sprintf(bufferAUX, "%s%c", bufferAUX, ret[i]);
  5938                           
  5939                           ; BSR set to: 0
  5940  0029F2  0EA4               	movlw	low _bufferAUX
  5941  0029F4  6FA1               	movwf	sprintf@wh& (0+255),b
  5942  0029F6  0E01               	movlw	high _bufferAUX
  5943  0029F8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5944  0029FA  0EF0               	movlw	low STR_1
  5945  0029FC  6FA3               	movwf	sprintf@f& (0+255),b
  5946  0029FE  0E7F               	movlw	high STR_1
  5947  002A00  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5948  002A02  0EA4               	movlw	low _bufferAUX
  5949  002A04  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  5950  002A06  0E01               	movlw	high _bufferAUX
  5951  002A08  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  5952  002A0A  51BE               	movf	getSerial@i& (0+255),w,b
  5953  002A0C  0D01               	mullw	1
  5954  002A0E  50F3               	movf	prodl,w,c
  5955  002A10  25BF               	addwf	getSerial@ret& (0+255),w,b
  5956  002A12  6ED9               	movwf	fsr2l,c
  5957  002A14  50F4               	movf	prodh,w,c
  5958  002A16  21C0               	addwfc	(getSerial@ret+1)& (0+255),w,b
  5959  002A18  6EDA               	movwf	fsr2h,c
  5960  002A1A  50DF               	movf	indf2,w,c
  5961  002A1C  6FBA               	movwf	??_getSerial& (0+255),b
  5962  002A1E  51BA               	movf	??_getSerial& (0+255),w,b
  5963  002A20  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  5964  002A22  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  5965  002A24  ECBB  F03D         	call	_sprintf	;wreg free
  5966  002A28  0100               	movlb	0	; () banked
  5967  002A2A  2BBE               	incf	getSerial@i& (0+255),f,b
  5968  002A2C                     l281:
  5969  002A2C  FFFF               	dw	65535	; assembler added errata NOP
  5970                           
  5971                           ; BSR set to: 0
  5972                           
  5973                           ; BSR set to: 0
  5974  002A2E  C0BF  F080         	movff	getSerial@ret,strlen@s
  5975  002A32  C0C0  F081         	movff	getSerial@ret+1,strlen@s+1
  5976  002A36  EC0B  F01F         	call	_strlen	;wreg free
  5977  002A3A  0100               	movlb	0	; () banked
  5978  002A3C  51BE               	movf	getSerial@i& (0+255),w,b
  5979  002A3E  6FBA               	movwf	??_getSerial& (0+255),b
  5980  002A40  6BBB               	clrf	(??_getSerial+1)& (0+255),b
  5981  002A42  5180               	movf	?_strlen& (0+255),w,b
  5982  002A44  5DBA               	subwf	??_getSerial& (0+255),w,b
  5983  002A46  5181               	movf	(?_strlen+1)& (0+255),w,b
  5984  002A48  59BB               	subwfb	(??_getSerial+1)& (0+255),w,b
  5985  002A4A  A0D8               	btfss	status,0,c
  5986  002A4C  D7AD               	goto	l282
  5987  002A4E                     u5680:
  5988  002A4E  FFFF               	dw	65535	; assembler added errata NOP
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;serial.h: 53: }
  5992                           ;serial.h: 54: }
  5993                           ;serial.h: 55: return 0;
  5994                           
  5995                           ; BSR set to: 0
  5996                           
  5997                           ; BSR set to: 0
  5998  002A50  0E00               	movlw	0
  5999  002A52  6FB7               	movwf	?_getSerial& (0+255),b
  6000  002A54  0E00               	movlw	0
  6001  002A56                     L13:
  6002  002A56  FFFF               	dw	65535	; assembler added errata NOP
  6003  002A58  6FB8               	movwf	(?_getSerial+1)& (0+255),b
  6004                           
  6005                           ; BSR set to: 0
  6006                           
  6007                           ; BSR set to: 0
  6008  002A5A  0012               	return		;funcret
  6009  002A5C  FFFF               	dw	65535	; errata NOP
  6010  002A5E                     __end_of_getSerial:
  6011                           	opt stack 0
  6012                           tblptru	equ	0xFF8
  6013                           tblptrh	equ	0xFF7
  6014                           tblptrl	equ	0xFF6
  6015                           tablat	equ	0xFF5
  6016                           prodh	equ	0xFF4
  6017                           prodl	equ	0xFF3
  6018                           postinc0	equ	0xFEE
  6019                           wreg	equ	0xFE8
  6020                           postdec1	equ	0xFE5
  6021                           fsr1l	equ	0xFE1
  6022                           indf2	equ	0xFDF
  6023                           postinc2	equ	0xFDE
  6024                           fsr2h	equ	0xFDA
  6025                           fsr2l	equ	0xFD9
  6026                           status	equ	0xFD8
  6027                           
  6028 ;; *************** function _atoi *****************
  6029 ;; Defined at:
  6030 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  6031 ;; Parameters:    Size  Location     Type
  6032 ;;  s               2   65[BANK0 ] PTR const unsigned char 
  6033 ;;		 -> bufferAUX(20), NULL(0), 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;  a               2   70[BANK0 ] int 
  6036 ;;  sign            1   69[BANK0 ] unsigned char 
  6037 ;; Return value:  Size  Location     Type
  6038 ;;                  2   65[BANK0 ] int 
  6039 ;; Registers used:
  6040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6041 ;; Tracked objects:
  6042 ;;		On entry : 0/0
  6043 ;;		On exit  : 0/0
  6044 ;;		Unchanged: 0/0
  6045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6046 ;;      Params:         0       2       0       0       0       0       0
  6047 ;;      Locals:         0       3       0       0       0       0       0
  6048 ;;      Temps:          0       2       0       0       0       0       0
  6049 ;;      Totals:         0       7       0       0       0       0       0
  6050 ;;Total ram usage:        7 bytes
  6051 ;; Hardware stack levels used:    1
  6052 ;; Hardware stack levels required when called:    7
  6053 ;; This function calls:
  6054 ;;		___wmul
  6055 ;;		_isdigit
  6056 ;; This function is called by:
  6057 ;;		_getSinalSIM800L
  6058 ;; This function uses a non-reentrant model
  6059 ;;
  6060                           
  6061                           	psect	text13
  6062  002E96                     __ptext13:
  6063                           	opt stack 0
  6064  002E96                     _atoi:
  6065                           	opt stack 0
  6066  002E96  FFFF               	dw	65535	; assembler added errata NOP
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;incstack = 0
  6070  002E98  D004               	goto	l1260
  6071  002E9A  FFFF               	dw	65535	; assembler added errata NOP
  6072  002E9C  0100               	movlb	0	; () banked
  6073  002E9E  4BC1               	infsnz	atoi@s& (0+255),f,b
  6074  002EA0  2BC2               	incf	(atoi@s+1)& (0+255),f,b
  6075  002EA2                     l1260:
  6076  002EA2  FFFF               	dw	65535	; assembler added errata NOP
  6077                           
  6078                           ; BSR set to: 0
  6079  002EA4  C0C1  FFD9         	movff	atoi@s,fsr2l
  6080  002EA8  C0C2  FFDA         	movff	atoi@s+1,fsr2h
  6081  002EAC  0E20               	movlw	32
  6082  002EAE  18DE               	xorwf	postinc2,w,c
  6083  002EB0  B4D8               	btfsc	status,2,c
  6084  002EB2  D7F3               	goto	l1261
  6085  002EB4  C0C1  FFD9         	movff	atoi@s,fsr2l
  6086  002EB8  C0C2  FFDA         	movff	atoi@s+1,fsr2h
  6087  002EBC  0E09               	movlw	9
  6088  002EBE  18DE               	xorwf	postinc2,w,c
  6089  002EC0  B4D8               	btfsc	status,2,c
  6090  002EC2  D7EB               	goto	l1261
  6091  002EC4  0E00               	movlw	0
  6092  002EC6  0100               	movlb	0	; () banked
  6093  002EC8  6FC7               	movwf	(atoi@a+1)& (0+255),b
  6094  002ECA  0E00               	movlw	0
  6095  002ECC  6FC6               	movwf	atoi@a& (0+255),b
  6096  002ECE  0E00               	movlw	0
  6097  002ED0  6FC5               	movwf	atoi@sign& (0+255),b
  6098                           
  6099                           ; BSR set to: 0
  6100  002ED2  C0C1  FFD9         	movff	atoi@s,fsr2l
  6101  002ED6  C0C2  FFDA         	movff	atoi@s+1,fsr2h
  6102  002EDA  0E2D               	movlw	45
  6103  002EDC  18DE               	xorwf	postinc2,w,c
  6104  002EDE  A4D8               	btfss	status,2,c
  6105  002EE0  D002               	goto	l1263
  6106                           
  6107                           ; BSR set to: 0
  6108  002EE2  2BC5               	incf	atoi@sign& (0+255),f,b
  6109  002EE4  D028               	goto	l5582
  6110  002EE6                     l1263:
  6111  002EE6  FFFF               	dw	65535	; assembler added errata NOP
  6112                           
  6113                           ; BSR set to: 0
  6114                           
  6115                           ; BSR set to: 0
  6116  002EE8  C0C1  FFD9         	movff	atoi@s,fsr2l
  6117  002EEC  C0C2  FFDA         	movff	atoi@s+1,fsr2h
  6118  002EF0  0E2B               	movlw	43
  6119  002EF2  18DE               	xorwf	postinc2,w,c
  6120  002EF4  A4D8               	btfss	status,2,c
  6121  002EF6  D022               	goto	l1266
  6122  002EF8  D01E               	goto	l5582
  6123  002EFA  FFFF               	dw	65535	; assembler added errata NOP
  6124                           
  6125                           ; BSR set to: 0
  6126  002EFC  C0C6  F080         	movff	atoi@a,___wmul@multiplier
  6127  002F00  C0C7  F081         	movff	atoi@a+1,___wmul@multiplier+1
  6128  002F04  0E00               	movlw	0
  6129  002F06  0100               	movlb	0	; () banked
  6130  002F08  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6131  002F0A  0E0A               	movlw	10
  6132  002F0C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6133  002F0E  EC59  F03B         	call	___wmul	;wreg free
  6134  002F12  C0C1  FFD9         	movff	atoi@s,fsr2l
  6135  002F16  C0C2  FFDA         	movff	atoi@s+1,fsr2h
  6136  002F1A  50DF               	movf	indf2,w,c
  6137  002F1C  0100               	movlb	0	; () banked
  6138  002F1E  6FC3               	movwf	??_atoi& (0+255),b
  6139  002F20  6BC4               	clrf	(??_atoi+1)& (0+255),b
  6140  002F22  5180               	movf	?___wmul& (0+255),w,b
  6141  002F24  27C3               	addwf	??_atoi& (0+255),f,b
  6142  002F26  5181               	movf	(?___wmul+1)& (0+255),w,b
  6143  002F28  23C4               	addwfc	(??_atoi+1)& (0+255),f,b
  6144  002F2A  0ED0               	movlw	208
  6145  002F2C  25C3               	addwf	??_atoi& (0+255),w,b
  6146  002F2E  6FC6               	movwf	atoi@a& (0+255),b
  6147  002F30  0EFF               	movlw	255
  6148  002F32  21C4               	addwfc	(??_atoi+1)& (0+255),w,b
  6149  002F34  6FC7               	movwf	(atoi@a+1)& (0+255),b
  6150  002F36                     l5582:
  6151  002F36  FFFF               	dw	65535	; assembler added errata NOP
  6152                           
  6153                           ; BSR set to: 0
  6154  002F38  4BC1               	infsnz	atoi@s& (0+255),f,b
  6155  002F3A  2BC2               	incf	(atoi@s+1)& (0+255),f,b
  6156  002F3C                     l1266:
  6157  002F3C  FFFF               	dw	65535	; assembler added errata NOP
  6158                           
  6159                           ; BSR set to: 0
  6160                           
  6161                           ; BSR set to: 0
  6162  002F3E  C0C1  FFD9         	movff	atoi@s,fsr2l
  6163  002F42  C0C2  FFDA         	movff	atoi@s+1,fsr2h
  6164  002F46  50DF               	movf	indf2,w,c
  6165  002F48  EC2F  F03B         	call	_isdigit
  6166  002F4C  B0D8               	btfsc	status,0,c
  6167  002F4E  D7D5               	goto	l1267
  6168  002F50  0100               	movlb	0	; () banked
  6169  002F52  51C5               	movf	atoi@sign& (0+255),w,b
  6170  002F54  B4D8               	btfsc	status,2,c
  6171  002F56  D00D               	goto	l1269
  6172                           
  6173                           ; BSR set to: 0
  6174  002F58  C0C6  F0C3         	movff	atoi@a,??_atoi
  6175  002F5C  C0C7  F0C4         	movff	atoi@a+1,??_atoi+1
  6176  002F60  1FC3               	comf	??_atoi& (0+255),f,b
  6177  002F62  1FC4               	comf	(??_atoi+1)& (0+255),f,b
  6178  002F64  4BC3               	infsnz	??_atoi& (0+255),f,b
  6179  002F66  2BC4               	incf	(??_atoi+1)& (0+255),f,b
  6180  002F68  C0C3  F0C1         	movff	??_atoi,?_atoi
  6181  002F6C  C0C4  F0C2         	movff	??_atoi+1,?_atoi+1
  6182  002F70  D005               	goto	l1270
  6183  002F72                     l1269:
  6184  002F72  FFFF               	dw	65535	; assembler added errata NOP
  6185                           
  6186                           ; BSR set to: 0
  6187  002F74  C0C6  F0C1         	movff	atoi@a,?_atoi
  6188  002F78  C0C7  F0C2         	movff	atoi@a+1,?_atoi+1
  6189  002F7C                     l1270:
  6190  002F7C  FFFF               	dw	65535	; assembler added errata NOP
  6191                           
  6192                           ; BSR set to: 0
  6193  002F7E  0012               	return		;funcret
  6194  002F80  FFFF               	dw	65535	; errata NOP
  6195  002F82                     __end_of_atoi:
  6196                           	opt stack 0
  6197                           tblptru	equ	0xFF8
  6198                           tblptrh	equ	0xFF7
  6199                           tblptrl	equ	0xFF6
  6200                           tablat	equ	0xFF5
  6201                           prodh	equ	0xFF4
  6202                           prodl	equ	0xFF3
  6203                           postinc0	equ	0xFEE
  6204                           wreg	equ	0xFE8
  6205                           postdec1	equ	0xFE5
  6206                           fsr1l	equ	0xFE1
  6207                           indf2	equ	0xFDF
  6208                           postinc2	equ	0xFDE
  6209                           fsr2h	equ	0xFDA
  6210                           fsr2l	equ	0xFD9
  6211                           status	equ	0xFD8
  6212                           
  6213 ;; *************** function _getDS1307TimeDate *****************
  6214 ;; Defined at:
  6215 ;;		line 52 in file "ds1307.h"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  6218 ;;		 -> rtc(7), 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;		None
  6221 ;; Return value:  Size  Location     Type
  6222 ;;                  1    wreg      void 
  6223 ;; Registers used:
  6224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6225 ;; Tracked objects:
  6226 ;;		On entry : 0/0
  6227 ;;		On exit  : 0/0
  6228 ;;		Unchanged: 0/0
  6229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6230 ;;      Params:         0       2       0       0       0       0       0
  6231 ;;      Locals:         0       0       0       0       0       0       0
  6232 ;;      Temps:          0       0       0       0       0       0       0
  6233 ;;      Totals:         0       2       0       0       0       0       0
  6234 ;;Total ram usage:        2 bytes
  6235 ;; Hardware stack levels used:    1
  6236 ;; Hardware stack levels required when called:    8
  6237 ;; This function calls:
  6238 ;;		_BCDtoDEC
  6239 ;;		_I2C_Read
  6240 ;;		_I2C_Restart
  6241 ;;		_I2C_Start
  6242 ;;		_I2C_Stop
  6243 ;;		_I2C_Write
  6244 ;; This function is called by:
  6245 ;;		_main
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           	psect	text14
  6250  0026F2                     __ptext14:
  6251                           	opt stack 0
  6252  0026F2                     _getDS1307TimeDate:
  6253                           	opt stack 0
  6254  0026F2  FFFF               	dw	65535	; assembler added errata NOP
  6255                           
  6256                           ;ds1307.h: 54: I2C_Start();
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;incstack = 0
  6260  0026F4  EC8B  F03A         	call	_I2C_Start	;wreg free
  6261                           
  6262                           ;ds1307.h: 55: I2C_Write(0xD0);
  6263  0026F8  0E00               	movlw	0
  6264  0026FA  0100               	movlb	0	; () banked
  6265  0026FC  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  6266  0026FE  0ED0               	movlw	208
  6267  002700  6F8A               	movwf	I2C_Write@d& (0+255),b
  6268  002702  ECA4  F03A         	call	_I2C_Write	;wreg free
  6269                           
  6270                           ;ds1307.h: 56: I2C_Write(0x00);
  6271  002706  0E00               	movlw	0
  6272  002708  0100               	movlb	0	; () banked
  6273  00270A  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  6274  00270C  0E00               	movlw	0
  6275  00270E  6F8A               	movwf	I2C_Write@d& (0+255),b
  6276  002710  ECA4  F03A         	call	_I2C_Write	;wreg free
  6277                           
  6278                           ;ds1307.h: 57: I2C_Restart();
  6279  002714  EC97  F03A         	call	_I2C_Restart	;wreg free
  6280                           
  6281                           ;ds1307.h: 58: I2C_Write(0xD1);
  6282  002718  0E00               	movlw	0
  6283  00271A  0100               	movlb	0	; () banked
  6284  00271C  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  6285  00271E  0ED1               	movlw	209
  6286  002720  6F8A               	movwf	I2C_Write@d& (0+255),b
  6287  002722  ECA4  F03A         	call	_I2C_Write	;wreg free
  6288                           
  6289                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
  6290  002726  0100               	movlb	0	; () banked
  6291  002728  EE20 F001          	lfsr	2,1
  6292  00272C  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6293  00272E  26D9               	addwf	fsr2l,f,c
  6294  002730  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6295  002732  22DA               	addwfc	fsr2h,f,c
  6296  002734  0E00               	movlw	0
  6297  002736  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6298  002738  0E01               	movlw	1
  6299  00273A  6F81               	movwf	I2C_Read@a& (0+255),b
  6300  00273C  EC45  F03C         	call	_I2C_Read	;wreg free
  6301  002740  0100               	movlb	0	; () banked
  6302  002742  5181               	movf	?_I2C_Read& (0+255),w,b
  6303  002744  ECE9  F03A         	call	_BCDtoDEC
  6304  002748  6EDF               	movwf	indf2,c
  6305                           
  6306                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
  6307  00274A  0100               	movlb	0	; () banked
  6308  00274C  EE20 F002          	lfsr	2,2
  6309  002750  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6310  002752  26D9               	addwf	fsr2l,f,c
  6311  002754  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6312  002756  22DA               	addwfc	fsr2h,f,c
  6313  002758  0E00               	movlw	0
  6314  00275A  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6315  00275C  0E01               	movlw	1
  6316  00275E  6F81               	movwf	I2C_Read@a& (0+255),b
  6317  002760  EC45  F03C         	call	_I2C_Read	;wreg free
  6318  002764  0100               	movlb	0	; () banked
  6319  002766  5181               	movf	?_I2C_Read& (0+255),w,b
  6320  002768  ECE9  F03A         	call	_BCDtoDEC
  6321  00276C  6EDF               	movwf	indf2,c
  6322                           
  6323                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
  6324  00276E  0100               	movlb	0	; () banked
  6325  002770  EE20 F003          	lfsr	2,3
  6326  002774  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6327  002776  26D9               	addwf	fsr2l,f,c
  6328  002778  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6329  00277A  22DA               	addwfc	fsr2h,f,c
  6330  00277C  0E00               	movlw	0
  6331  00277E  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6332  002780  0E01               	movlw	1
  6333  002782  6F81               	movwf	I2C_Read@a& (0+255),b
  6334  002784  EC45  F03C         	call	_I2C_Read	;wreg free
  6335  002788  0100               	movlb	0	; () banked
  6336  00278A  5181               	movf	?_I2C_Read& (0+255),w,b
  6337  00278C  ECE9  F03A         	call	_BCDtoDEC
  6338  002790  6EDF               	movwf	indf2,c
  6339                           
  6340                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
  6341  002792  0E00               	movlw	0
  6342  002794  0100               	movlb	0	; () banked
  6343  002796  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6344  002798  0E01               	movlw	1
  6345  00279A  6F81               	movwf	I2C_Read@a& (0+255),b
  6346  00279C  EC45  F03C         	call	_I2C_Read	;wreg free
  6347  0027A0  0100               	movlb	0	; () banked
  6348  0027A2  5181               	movf	?_I2C_Read& (0+255),w,b
  6349  0027A4  ECE9  F03A         	call	_BCDtoDEC
  6350  0027A8  C08C  FFD9         	movff	getDS1307TimeDate@ptrToUserVal,fsr2l
  6351  0027AC  C08D  FFDA         	movff	getDS1307TimeDate@ptrToUserVal+1,fsr2h
  6352  0027B0  6EDF               	movwf	indf2,c
  6353                           
  6354                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
  6355  0027B2  0100               	movlb	0	; () banked
  6356  0027B4  EE20 F004          	lfsr	2,4
  6357  0027B8  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6358  0027BA  26D9               	addwf	fsr2l,f,c
  6359  0027BC  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6360  0027BE  22DA               	addwfc	fsr2h,f,c
  6361  0027C0  0E00               	movlw	0
  6362  0027C2  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6363  0027C4  0E01               	movlw	1
  6364  0027C6  6F81               	movwf	I2C_Read@a& (0+255),b
  6365  0027C8  EC45  F03C         	call	_I2C_Read	;wreg free
  6366  0027CC  0100               	movlb	0	; () banked
  6367  0027CE  5181               	movf	?_I2C_Read& (0+255),w,b
  6368  0027D0  ECE9  F03A         	call	_BCDtoDEC
  6369  0027D4  6EDF               	movwf	indf2,c
  6370                           
  6371                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
  6372  0027D6  0100               	movlb	0	; () banked
  6373  0027D8  EE20 F005          	lfsr	2,5
  6374  0027DC  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6375  0027DE  26D9               	addwf	fsr2l,f,c
  6376  0027E0  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6377  0027E2  22DA               	addwfc	fsr2h,f,c
  6378  0027E4  0E00               	movlw	0
  6379  0027E6  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6380  0027E8  0E01               	movlw	1
  6381  0027EA  6F81               	movwf	I2C_Read@a& (0+255),b
  6382  0027EC  EC45  F03C         	call	_I2C_Read	;wreg free
  6383  0027F0  0100               	movlb	0	; () banked
  6384  0027F2  5181               	movf	?_I2C_Read& (0+255),w,b
  6385  0027F4  ECE9  F03A         	call	_BCDtoDEC
  6386  0027F8  6EDF               	movwf	indf2,c
  6387                           
  6388                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
  6389  0027FA  0100               	movlb	0	; () banked
  6390  0027FC  EE20 F006          	lfsr	2,6
  6391  002800  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6392  002802  26D9               	addwf	fsr2l,f,c
  6393  002804  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6394  002806  22DA               	addwfc	fsr2h,f,c
  6395  002808  0E00               	movlw	0
  6396  00280A  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6397  00280C  0E00               	movlw	0
  6398  00280E  6F81               	movwf	I2C_Read@a& (0+255),b
  6399  002810  EC45  F03C         	call	_I2C_Read	;wreg free
  6400  002814  0100               	movlb	0	; () banked
  6401  002816  5181               	movf	?_I2C_Read& (0+255),w,b
  6402  002818  ECE9  F03A         	call	_BCDtoDEC
  6403  00281C  6EDF               	movwf	indf2,c
  6404                           
  6405                           ;ds1307.h: 66: I2C_Stop();
  6406  00281E  EC91  F03A         	call	_I2C_Stop	;wreg free
  6407  002822  0012               	return		;funcret
  6408  002824  FFFF               	dw	65535	; errata NOP
  6409  002826                     __end_of_getDS1307TimeDate:
  6410                           	opt stack 0
  6411                           tblptru	equ	0xFF8
  6412                           tblptrh	equ	0xFF7
  6413                           tblptrl	equ	0xFF6
  6414                           tablat	equ	0xFF5
  6415                           prodh	equ	0xFF4
  6416                           prodl	equ	0xFF3
  6417                           postinc0	equ	0xFEE
  6418                           wreg	equ	0xFE8
  6419                           postdec1	equ	0xFE5
  6420                           fsr1l	equ	0xFE1
  6421                           indf2	equ	0xFDF
  6422                           postinc2	equ	0xFDE
  6423                           fsr2h	equ	0xFDA
  6424                           fsr2l	equ	0xFD9
  6425                           status	equ	0xFD8
  6426                           
  6427 ;; *************** function _BCDtoDEC *****************
  6428 ;; Defined at:
  6429 ;;		line 34 in file "function.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;  val             1    wreg     unsigned char 
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;  val             1    0[BANK0 ] unsigned char 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      unsigned char 
  6436 ;; Registers used:
  6437 ;;		wreg, status,2, status,0, prodl, prodh
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6443 ;;      Params:         0       0       0       0       0       0       0
  6444 ;;      Locals:         0       1       0       0       0       0       0
  6445 ;;      Temps:          0       0       0       0       0       0       0
  6446 ;;      Totals:         0       1       0       0       0       0       0
  6447 ;;Total ram usage:        1 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    6
  6450 ;; This function calls:
  6451 ;;		Nothing
  6452 ;; This function is called by:
  6453 ;;		_getDS1307TimeDate
  6454 ;;		_getDS1307Time
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text15
  6459  0075D2                     __ptext15:
  6460                           	opt stack 0
  6461  0075D2                     _BCDtoDEC:
  6462                           	opt stack 0
  6463  0075D2  FFFF               	dw	65535	; assembler added errata NOP
  6464                           
  6465                           ;incstack = 0
  6466                           ;BCDtoDEC@val stored from wreg
  6467  0075D4  0100               	movlb	0	; () banked
  6468  0075D6  6F80               	movwf	BCDtoDEC@val& (0+255),b
  6469                           
  6470                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
  6471  0075D8  0100               	movlb	0	; () banked
  6472  0075DA  3980               	swapf	BCDtoDEC@val& (0+255),w,b
  6473  0075DC  0B0F               	andlw	15
  6474  0075DE  0B0F               	andlw	15
  6475  0075E0  0D0A               	mullw	10
  6476  0075E2  5180               	movf	BCDtoDEC@val& (0+255),w,b
  6477  0075E4  0B0F               	andlw	15
  6478  0075E6  24F3               	addwf	prodl,w,c
  6479                           
  6480                           ; BSR set to: 0
  6481                           
  6482                           ; BSR set to: 0
  6483  0075E8  0012               	return		;funcret
  6484  0075EA  FFFF               	dw	65535	; errata NOP
  6485  0075EC                     __end_of_BCDtoDEC:
  6486                           	opt stack 0
  6487                           tblptru	equ	0xFF8
  6488                           tblptrh	equ	0xFF7
  6489                           tblptrl	equ	0xFF6
  6490                           tablat	equ	0xFF5
  6491                           prodh	equ	0xFF4
  6492                           prodl	equ	0xFF3
  6493                           postinc0	equ	0xFEE
  6494                           wreg	equ	0xFE8
  6495                           postdec1	equ	0xFE5
  6496                           fsr1l	equ	0xFE1
  6497                           indf2	equ	0xFDF
  6498                           postinc2	equ	0xFDE
  6499                           fsr2h	equ	0xFDA
  6500                           fsr2l	equ	0xFD9
  6501                           status	equ	0xFD8
  6502                           
  6503 ;; *************** function _dataLoger *****************
  6504 ;; Defined at:
  6505 ;;		line 12 in file "tela_DATALOGER.h"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;		None
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  logs            1   66[BANK0 ] unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  1    wreg      void 
  6512 ;; Registers used:
  6513 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6519 ;;      Params:         0       0       0       0       0       0       0
  6520 ;;      Locals:         0       7       0       0       0       0       0
  6521 ;;      Temps:          0       5       0       0       0       0       0
  6522 ;;      Totals:         0      12       0       0       0       0       0
  6523 ;;Total ram usage:       12 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:   10
  6526 ;; This function calls:
  6527 ;;		___awdiv
  6528 ;;		_btPress
  6529 ;;		_readEEPROM_ext
  6530 ;;		_salvarLOG
  6531 ;;		_sprintf
  6532 ;; This function is called by:
  6533 ;;		_main
  6534 ;; This function uses a non-reentrant model
  6535 ;;
  6536                           
  6537                           	psect	text16
  6538  0018FE                     __ptext16:
  6539                           	opt stack 0
  6540  0018FE                     _dataLoger:
  6541                           	opt stack 0
  6542  0018FE  FFFF               	dw	65535	; assembler added errata NOP
  6543                           
  6544                           ;tela_DATALOGER.h: 13: sprintf(line1, "Data: %02d/%02d/%02d %02d:%02d", dtl_dia, dtl_mes
      +                          , dtl_ano, dtl_hora, dtl_min);
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;incstack = 0
  6548  001900  0E8F               	movlw	low _line1
  6549  001902  0100               	movlb	0	; () banked
  6550  001904  6FA1               	movwf	sprintf@wh& (0+255),b
  6551  001906  0E01               	movlw	high _line1
  6552  001908  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6553  00190A  0E07               	movlw	low STR_62
  6554  00190C  6FA3               	movwf	sprintf@f& (0+255),b
  6555  00190E  0E7D               	movlw	high STR_62
  6556  001910  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6557  001912  C05B  F0A5         	movff	_dtl_dia,?_sprintf+4
  6558  001916  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  6559  001918  C05A  F0A7         	movff	_dtl_mes,?_sprintf+6
  6560  00191C  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  6561  00191E  C059  F0A9         	movff	_dtl_ano,?_sprintf+8
  6562  001922  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  6563  001924  C058  F0AB         	movff	_dtl_hora,?_sprintf+10
  6564  001928  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  6565  00192A  C057  F0AD         	movff	_dtl_min,?_sprintf+12
  6566  00192E  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  6567  001930  ECBB  F03D         	call	_sprintf	;wreg free
  6568                           
  6569                           ;tela_DATALOGER.h: 14: sprintf(line2, "Jokey: %s", dtl_jockey == 1 ? "OK" : "ERRO");
  6570  001934  0456               	decf	_dtl_jockey,w,c
  6571  001936  B4D8               	btfsc	status,2,c
  6572  001938  D005               	goto	l772
  6573  00193A  0EEB               	movlw	low STR_43
  6574  00193C  0100               	movlb	0	; () banked
  6575  00193E  6FBC               	movwf	_dataLoger$1430& (0+255),b
  6576  001940  0E7F               	movlw	high STR_43
  6577  001942  D005               	goto	L14
  6578  001944                     l772:
  6579  001944  FFFF               	dw	65535	; assembler added errata NOP
  6580                           
  6581                           ; BSR set to: 0
  6582  001946  0EFA               	movlw	low STR_7
  6583  001948  0100               	movlb	0	; () banked
  6584  00194A  6FBC               	movwf	_dataLoger$1430& (0+255),b
  6585  00194C  0E7F               	movlw	high STR_7
  6586  00194E                     L14:
  6587  00194E  FFFF               	dw	65535	; assembler added errata NOP
  6588  001950  6FBD               	movwf	(_dataLoger$1430+1)& (0+255),b
  6589                           
  6590                           ; BSR set to: 0
  6591                           
  6592                           ; BSR set to: 0
  6593  001952  0E7A               	movlw	low _line2
  6594  001954  6FA1               	movwf	sprintf@wh& (0+255),b
  6595  001956  0E01               	movlw	high _line2
  6596  001958  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6597  00195A  0E87               	movlw	low STR_63
  6598  00195C  6FA3               	movwf	sprintf@f& (0+255),b
  6599  00195E  0E7F               	movlw	high STR_63
  6600  001960  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6601  001962  C0BC  F0A5         	movff	_dataLoger$1430,?_sprintf+4
  6602  001966  C0BD  F0A6         	movff	_dataLoger$1430+1,?_sprintf+5
  6603  00196A  ECBB  F03D         	call	_sprintf	;wreg free
  6604                           
  6605                           ;tela_DATALOGER.h: 15: sprintf(&line2[14], "#%02d/%02d", (dtl_posi_visualizar + 1), tota
      +                          lLogs);
  6606  00196E  0E88               	movlw	low (_line2+14)
  6607  001970  0100               	movlb	0	; () banked
  6608  001972  6FA1               	movwf	sprintf@wh& (0+255),b
  6609  001974  0E01               	movlw	high (_line2+14)
  6610  001976  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6611  001978  0E49               	movlw	low STR_66
  6612  00197A  6FA3               	movwf	sprintf@f& (0+255),b
  6613  00197C  0E7F               	movlw	high STR_66
  6614  00197E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6615  001980  0E01               	movlw	1
  6616  001982  25D4               	addwf	_dtl_posi_visualizar& (0+255),w,b
  6617  001984  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6618  001986  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  6619  001988  0E00               	movlw	0
  6620  00198A  23A6               	addwfc	(?_sprintf+5)& (0+255),f,b
  6621  00198C  C0D5  F0A7         	movff	_totalLogs,?_sprintf+6
  6622  001990  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  6623  001992  ECBB  F03D         	call	_sprintf	;wreg free
  6624                           
  6625                           ;tela_DATALOGER.h: 16: sprintf(line3, "Principal: %s", dtl_principal == 1 ? "OK" : "ERRO
      +                          ");
  6626  001996  0455               	decf	_dtl_principal,w,c
  6627  001998  B4D8               	btfsc	status,2,c
  6628  00199A  D005               	goto	l776
  6629  00199C  0EEB               	movlw	low STR_43
  6630  00199E  0100               	movlb	0	; () banked
  6631  0019A0  6FBE               	movwf	_dataLoger$1436& (0+255),b
  6632  0019A2  0E7F               	movlw	high STR_43
  6633  0019A4  D005               	goto	L15
  6634  0019A6                     l776:
  6635  0019A6  FFFF               	dw	65535	; assembler added errata NOP
  6636                           
  6637                           ; BSR set to: 0
  6638  0019A8  0EFA               	movlw	low STR_7
  6639  0019AA  0100               	movlb	0	; () banked
  6640  0019AC  6FBE               	movwf	_dataLoger$1436& (0+255),b
  6641  0019AE  0E7F               	movlw	high STR_7
  6642  0019B0                     L15:
  6643  0019B0  FFFF               	dw	65535	; assembler added errata NOP
  6644  0019B2  6FBF               	movwf	(_dataLoger$1436+1)& (0+255),b
  6645                           
  6646                           ; BSR set to: 0
  6647                           
  6648                           ; BSR set to: 0
  6649  0019B4  0E65               	movlw	low _line3
  6650  0019B6  6FA1               	movwf	sprintf@wh& (0+255),b
  6651  0019B8  0E01               	movlw	high _line3
  6652  0019BA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6653  0019BC  0EC2               	movlw	low STR_67
  6654  0019BE  6FA3               	movwf	sprintf@f& (0+255),b
  6655  0019C0  0E7E               	movlw	high STR_67
  6656  0019C2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6657  0019C4  C0BE  F0A5         	movff	_dataLoger$1436,?_sprintf+4
  6658  0019C8  C0BF  F0A6         	movff	_dataLoger$1436+1,?_sprintf+5
  6659  0019CC  ECBB  F03D         	call	_sprintf	;wreg free
  6660                           
  6661                           ;tela_DATALOGER.h: 17: sprintf(line4, "Combustao: %s", dtl_estacionaria == 1 ? "OK" : "E
      +                          RRO");
  6662  0019D0  0454               	decf	_dtl_estacionaria,w,c
  6663  0019D2  B4D8               	btfsc	status,2,c
  6664  0019D4  D005               	goto	l780
  6665  0019D6  0EEB               	movlw	low STR_43
  6666  0019D8  0100               	movlb	0	; () banked
  6667  0019DA  6FC0               	movwf	_dataLoger$1441& (0+255),b
  6668  0019DC  0E7F               	movlw	high STR_43
  6669  0019DE  D005               	goto	L16
  6670  0019E0                     l780:
  6671  0019E0  FFFF               	dw	65535	; assembler added errata NOP
  6672                           
  6673                           ; BSR set to: 0
  6674  0019E2  0EFA               	movlw	low STR_7
  6675  0019E4  0100               	movlb	0	; () banked
  6676  0019E6  6FC0               	movwf	_dataLoger$1441& (0+255),b
  6677  0019E8  0E7F               	movlw	high STR_7
  6678  0019EA                     L16:
  6679  0019EA  FFFF               	dw	65535	; assembler added errata NOP
  6680  0019EC  6FC1               	movwf	(_dataLoger$1441+1)& (0+255),b
  6681                           
  6682                           ; BSR set to: 0
  6683                           
  6684                           ; BSR set to: 0
  6685  0019EE  0E50               	movlw	low _line4
  6686  0019F0  6FA1               	movwf	sprintf@wh& (0+255),b
  6687  0019F2  0E01               	movlw	high _line4
  6688  0019F4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6689  0019F6  0ED0               	movlw	low STR_70
  6690  0019F8  6FA3               	movwf	sprintf@f& (0+255),b
  6691  0019FA  0E7E               	movlw	high STR_70
  6692  0019FC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6693  0019FE  C0C0  F0A5         	movff	_dataLoger$1441,?_sprintf+4
  6694  001A02  C0C1  F0A6         	movff	_dataLoger$1441+1,?_sprintf+5
  6695  001A06  ECBB  F03D         	call	_sprintf	;wreg free
  6696                           
  6697                           ;tela_DATALOGER.h: 19: if (btPress(1)) {
  6698  001A0A  0E01               	movlw	1
  6699  001A0C  EC6E  F01E         	call	_btPress
  6700  001A10  0900               	iorlw	0
  6701  001A12  B4D8               	btfsc	status,2,c
  6702  001A14  D005               	goto	l783
  6703                           
  6704                           ;tela_DATALOGER.h: 20: option_posi = 0;
  6705  001A16  0E00               	movlw	0
  6706  001A18  0100               	movlb	0	; () banked
  6707  001A1A  6FDA               	movwf	_option_posi& (0+255),b
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;tela_DATALOGER.h: 21: menu_posi = _menu_posi;
  6711  001A1C  C0D8  F0D9         	movff	__menu_posi,_menu_posi
  6712  001A20                     l783:
  6713  001A20  FFFF               	dw	65535	; assembler added errata NOP
  6714                           
  6715                           ;tela_DATALOGER.h: 22: }
  6716                           ;tela_DATALOGER.h: 23: if (btPress(4)) {
  6717                           
  6718                           ; BSR set to: 0
  6719  001A22  0E04               	movlw	4
  6720  001A24  EC6E  F01E         	call	_btPress
  6721  001A28  0900               	iorlw	0
  6722  001A2A  A4D8               	btfss	status,2,c
  6723                           
  6724                           ;tela_DATALOGER.h: 25: salvarLOG();
  6725  001A2C  EC4C  F01A         	call	_salvarLOG	;wreg free
  6726                           
  6727                           ;tela_DATALOGER.h: 27: }
  6728                           ;tela_DATALOGER.h: 28: if (btPress(2)) {
  6729  001A30  0E02               	movlw	2
  6730  001A32  EC6E  F01E         	call	_btPress
  6731  001A36  0900               	iorlw	0
  6732  001A38  B4D8               	btfsc	status,2,c
  6733  001A3A  D00B               	goto	l785
  6734                           
  6735                           ;tela_DATALOGER.h: 29: dtl_posicao -= 8;
  6736  001A3C  0E08               	movlw	8
  6737  001A3E  0100               	movlb	0	; () banked
  6738  001A40  5FF9               	subwf	_dtl_posicao& (0+255),f,b
  6739                           
  6740                           ;tela_DATALOGER.h: 30: if (dtl_posicao < 60) {
  6741  001A42  0E3C               	movlw	60
  6742  001A44  61F9               	cpfslt	_dtl_posicao& (0+255),b
  6743  001A46  D002               	goto	l786
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;tela_DATALOGER.h: 31: dtl_posicao = 60;
  6747  001A48  0E3C               	movlw	60
  6748  001A4A  6FF9               	movwf	_dtl_posicao& (0+255),b
  6749  001A4C                     l786:
  6750  001A4C  FFFF               	dw	65535	; assembler added errata NOP
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;tela_DATALOGER.h: 32: }
  6754                           ;tela_DATALOGER.h: 33: dtl_carregar_log = 1;
  6755  001A4E  0E01               	movlw	1
  6756  001A50  6E53               	movwf	_dtl_carregar_log,c
  6757  001A52                     l785:
  6758  001A52  FFFF               	dw	65535	; assembler added errata NOP
  6759                           
  6760                           ;tela_DATALOGER.h: 34: }
  6761                           ;tela_DATALOGER.h: 35: if (btPress(3)) {
  6762                           
  6763                           ; BSR set to: 0
  6764  001A54  0E03               	movlw	3
  6765  001A56  EC6E  F01E         	call	_btPress
  6766  001A5A  0900               	iorlw	0
  6767  001A5C  B4D8               	btfsc	status,2,c
  6768  001A5E  D019               	goto	l787
  6769                           
  6770                           ;tela_DATALOGER.h: 36: if ((dtl_posi_visualizar + 1) >= totalLogs) {
  6771  001A60  0100               	movlb	0	; () banked
  6772  001A62  51D5               	movf	_totalLogs& (0+255),w,b
  6773  001A64  6FB7               	movwf	??_dataLoger& (0+255),b
  6774  001A66  6BB8               	clrf	(??_dataLoger+1)& (0+255),b
  6775  001A68  51D4               	movf	_dtl_posi_visualizar& (0+255),w,b
  6776  001A6A  6FB9               	movwf	(??_dataLoger+2)& (0+255),b
  6777  001A6C  6BBA               	clrf	(??_dataLoger+3)& (0+255),b
  6778  001A6E  0E01               	movlw	1
  6779  001A70  27B9               	addwf	(??_dataLoger+2)& (0+255),f,b
  6780  001A72  0E00               	movlw	0
  6781  001A74  23BA               	addwfc	(??_dataLoger+3)& (0+255),f,b
  6782  001A76  51B7               	movf	??_dataLoger& (0+255),w,b
  6783  001A78  5DB9               	subwf	(??_dataLoger+2)& (0+255),w,b
  6784  001A7A  51BA               	movf	(??_dataLoger+3)& (0+255),w,b
  6785  001A7C  0A80               	xorlw	128
  6786  001A7E  6FBB               	movwf	(??_dataLoger+4)& (0+255),b
  6787  001A80  51B8               	movf	(??_dataLoger+1)& (0+255),w,b
  6788  001A82  0A80               	xorlw	128
  6789  001A84  59BB               	subwfb	(??_dataLoger+4)& (0+255),w,b
  6790  001A86  B0D8               	btfsc	status,0,c
  6791  001A88  D05A               	goto	l790
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;tela_DATALOGER.h: 38: }
  6795                           ;tela_DATALOGER.h: 39: dtl_posicao += 8;
  6796                           
  6797                           ; BSR set to: 0
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;tela_DATALOGER.h: 37: return;
  6801  001A8A  0E08               	movlw	8
  6802  001A8C  27F9               	addwf	_dtl_posicao& (0+255),f,b
  6803                           
  6804                           ; BSR set to: 0
  6805                           ;tela_DATALOGER.h: 40: dtl_carregar_log = 1;
  6806  001A8E  0E01               	movlw	1
  6807  001A90  6E53               	movwf	_dtl_carregar_log,c
  6808  001A92                     l787:
  6809  001A92  FFFF               	dw	65535	; assembler added errata NOP
  6810                           
  6811                           ;tela_DATALOGER.h: 41: }
  6812                           ;tela_DATALOGER.h: 43: if (dtl_carregar_log == 1) {
  6813                           
  6814                           ; BSR set to: 0
  6815  001A94  0453               	decf	_dtl_carregar_log,w,c
  6816  001A96  A4D8               	btfss	status,2,c
  6817  001A98  D052               	goto	l790
  6818                           
  6819                           ;tela_DATALOGER.h: 44: char logs = readEEPROM_ext(14);
  6820  001A9A  0E0E               	movlw	14
  6821  001A9C  EC66  F01F         	call	_readEEPROM_ext
  6822  001AA0  0100               	movlb	0	; () banked
  6823  001AA2  6FC2               	movwf	dataLoger@logs& (0+255),b
  6824                           
  6825                           ;tela_DATALOGER.h: 45: totalLogs = (logs - 60) / 8;
  6826  001AA4  0EC4               	movlw	196
  6827  001AA6  25C2               	addwf	dataLoger@logs& (0+255),w,b
  6828  001AA8  6F80               	movwf	___awdiv@dividend& (0+255),b
  6829  001AAA  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  6830  001AAC  0EFF               	movlw	255
  6831  001AAE  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  6832  001AB0  0E00               	movlw	0
  6833  001AB2  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  6834  001AB4  0E08               	movlw	8
  6835  001AB6  6F82               	movwf	___awdiv@divisor& (0+255),b
  6836  001AB8  EC06  F01C         	call	___awdiv	;wreg free
  6837  001ABC  0100               	movlb	0	; () banked
  6838  001ABE  5180               	movf	?___awdiv& (0+255),w,b
  6839  001AC0  6FD5               	movwf	_totalLogs& (0+255),b
  6840                           
  6841                           ;tela_DATALOGER.h: 47: dtl_posi_visualizar = (dtl_posicao - 60) / 8;
  6842  001AC2  0EC4               	movlw	196
  6843  001AC4  25F9               	addwf	_dtl_posicao& (0+255),w,b
  6844  001AC6  6F80               	movwf	___awdiv@dividend& (0+255),b
  6845  001AC8  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  6846  001ACA  0EFF               	movlw	255
  6847  001ACC  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  6848  001ACE  0E00               	movlw	0
  6849  001AD0  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  6850  001AD2  0E08               	movlw	8
  6851  001AD4  6F82               	movwf	___awdiv@divisor& (0+255),b
  6852  001AD6  EC06  F01C         	call	___awdiv	;wreg free
  6853  001ADA  0100               	movlb	0	; () banked
  6854  001ADC  5180               	movf	?___awdiv& (0+255),w,b
  6855  001ADE  6FD4               	movwf	_dtl_posi_visualizar& (0+255),b
  6856                           
  6857                           ;tela_DATALOGER.h: 49: dtl_dia = readEEPROM_ext(dtl_posicao);
  6858  001AE0  51F9               	movf	_dtl_posicao& (0+255),w,b
  6859  001AE2  EC66  F01F         	call	_readEEPROM_ext
  6860  001AE6  6E5B               	movwf	_dtl_dia,c
  6861                           
  6862                           ;tela_DATALOGER.h: 50: dtl_mes = readEEPROM_ext((dtl_posicao + 1));
  6863  001AE8  0100               	movlb	0	; () banked
  6864  001AEA  29F9               	incf	_dtl_posicao& (0+255),w,b
  6865  001AEC  EC66  F01F         	call	_readEEPROM_ext
  6866  001AF0  6E5A               	movwf	_dtl_mes,c
  6867                           
  6868                           ;tela_DATALOGER.h: 51: dtl_ano = readEEPROM_ext((dtl_posicao + 2));
  6869  001AF2  0100               	movlb	0	; () banked
  6870  001AF4  51F9               	movf	_dtl_posicao& (0+255),w,b
  6871  001AF6  0F02               	addlw	2
  6872  001AF8  EC66  F01F         	call	_readEEPROM_ext
  6873  001AFC  6E59               	movwf	_dtl_ano,c
  6874                           
  6875                           ;tela_DATALOGER.h: 52: dtl_hora = readEEPROM_ext((dtl_posicao + 3));
  6876  001AFE  0100               	movlb	0	; () banked
  6877  001B00  51F9               	movf	_dtl_posicao& (0+255),w,b
  6878  001B02  0F03               	addlw	3
  6879  001B04  EC66  F01F         	call	_readEEPROM_ext
  6880  001B08  6E58               	movwf	_dtl_hora,c
  6881                           
  6882                           ;tela_DATALOGER.h: 53: dtl_min = readEEPROM_ext((dtl_posicao + 4));
  6883  001B0A  0100               	movlb	0	; () banked
  6884  001B0C  51F9               	movf	_dtl_posicao& (0+255),w,b
  6885  001B0E  0F04               	addlw	4
  6886  001B10  EC66  F01F         	call	_readEEPROM_ext
  6887  001B14  6E57               	movwf	_dtl_min,c
  6888                           
  6889                           ;tela_DATALOGER.h: 54: dtl_jockey = readEEPROM_ext((dtl_posicao + 5));
  6890  001B16  0100               	movlb	0	; () banked
  6891  001B18  51F9               	movf	_dtl_posicao& (0+255),w,b
  6892  001B1A  0F05               	addlw	5
  6893  001B1C  EC66  F01F         	call	_readEEPROM_ext
  6894  001B20  6E56               	movwf	_dtl_jockey,c
  6895                           
  6896                           ;tela_DATALOGER.h: 55: dtl_principal = readEEPROM_ext((dtl_posicao + 6));
  6897  001B22  0100               	movlb	0	; () banked
  6898  001B24  51F9               	movf	_dtl_posicao& (0+255),w,b
  6899  001B26  0F06               	addlw	6
  6900  001B28  EC66  F01F         	call	_readEEPROM_ext
  6901  001B2C  6E55               	movwf	_dtl_principal,c
  6902                           
  6903                           ;tela_DATALOGER.h: 56: dtl_estacionaria = readEEPROM_ext((dtl_posicao + 7));
  6904  001B2E  0100               	movlb	0	; () banked
  6905  001B30  51F9               	movf	_dtl_posicao& (0+255),w,b
  6906  001B32  0F07               	addlw	7
  6907  001B34  EC66  F01F         	call	_readEEPROM_ext
  6908  001B38  6E54               	movwf	_dtl_estacionaria,c
  6909                           
  6910                           ;tela_DATALOGER.h: 57: dtl_carregar_log = 0;
  6911  001B3A  0E00               	movlw	0
  6912  001B3C  6E53               	movwf	_dtl_carregar_log,c
  6913  001B3E                     l790:
  6914  001B3E  FFFF               	dw	65535	; assembler added errata NOP
  6915  001B40  0012               	return		;funcret
  6916  001B42  FFFF               	dw	65535	; errata NOP
  6917  001B44                     __end_of_dataLoger:
  6918                           	opt stack 0
  6919                           tblptru	equ	0xFF8
  6920                           tblptrh	equ	0xFF7
  6921                           tblptrl	equ	0xFF6
  6922                           tablat	equ	0xFF5
  6923                           prodh	equ	0xFF4
  6924                           prodl	equ	0xFF3
  6925                           postinc0	equ	0xFEE
  6926                           wreg	equ	0xFE8
  6927                           postdec1	equ	0xFE5
  6928                           fsr1l	equ	0xFE1
  6929                           indf2	equ	0xFDF
  6930                           postinc2	equ	0xFDE
  6931                           fsr2h	equ	0xFDA
  6932                           fsr2l	equ	0xFD9
  6933                           status	equ	0xFD8
  6934                           
  6935 ;; *************** function _criarCaracteresCGRAM *****************
  6936 ;; Defined at:
  6937 ;;		line 152 in file "lcd.h"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;		None
  6940 ;; Auto vars:     Size  Location     Type
  6941 ;;  character      48    7[BANK0 ] const unsigned char [8][
  6942 ;;  i               1   59[BANK0 ] unsigned char 
  6943 ;;  j               1   58[BANK0 ] unsigned char 
  6944 ;;  k               1   57[BANK0 ] unsigned char 
  6945 ;; Return value:  Size  Location     Type
  6946 ;;                  1    wreg      void 
  6947 ;; Registers used:
  6948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6954 ;;      Params:         0       0       0       0       0       0       0
  6955 ;;      Locals:         0      53       0       0       0       0       0
  6956 ;;      Temps:          0       3       0       0       0       0       0
  6957 ;;      Totals:         0      56       0       0       0       0       0
  6958 ;;Total ram usage:       56 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:    8
  6961 ;; This function calls:
  6962 ;;		_Lcd_Cmd
  6963 ;;		_Lcd_Write_Char
  6964 ;; This function is called by:
  6965 ;;		_main
  6966 ;; This function uses a non-reentrant model
  6967 ;;
  6968                           
  6969                           	psect	text17
  6970  00330E                     __ptext17:
  6971                           	opt stack 0
  6972  00330E                     _criarCaracteresCGRAM:
  6973                           	opt stack 0
  6974  00330E  FFFF               	dw	65535	; assembler added errata NOP
  6975                           
  6976                           ;lcd.h: 153: const char character[6][8] = {
  6977                           ;lcd.h: 154: 0x00, 0x1F, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04,
  6978                           ;lcd.h: 155: 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10,
  6979                           ;lcd.h: 156: 0x00, 0x00, 0x00, 0x04, 0x04, 0x14, 0x14, 0x14,
  6980                           ;lcd.h: 157: 0x00, 0x01, 0x01, 0x05, 0x05, 0x15, 0x15, 0x15,
  6981                           ;lcd.h: 158: 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04,
  6982                           ;lcd.h: 159: };
  6983                           
  6984                           ;incstack = 0
  6985  003310  0E07               	movlw	low criarCaracteresCGRAM@F2961
  6986  003312  6EF6               	movwf	tblptrl,c
  6987  003314                     	if	1	;There is more than 1 active tblptr byte
  6988  003314  0E7C               	movlw	high criarCaracteresCGRAM@F2961
  6989  003316  6EF7               	movwf	tblptrh,c
  6990  003318                     	endif
  6991  003318                     	if	0	;There are less than 3 active tblptr bytes
  6992  003318                     	endif
  6993  003318  EE20  F087         	lfsr	2,criarCaracteresCGRAM@character
  6994  00331C  0E2F               	movlw	47
  6995  00331E                     u7340:
  6996  00331E  0009               	tblrd		*+
  6997  003320  FFFF               	dw	65535	; errata NOP
  6998  003322  CFF5 FFDE          	movff	tablat,postinc2
  6999  003326  06E8               	decf	wreg,f,c
  7000  003328  E2FA               	bc	u7340
  7001                           
  7002                           ;lcd.h: 160: Lcd_Cmd(0b0100);
  7003  00332A  0E04               	movlw	4
  7004  00332C  EC43  F03B         	call	_Lcd_Cmd
  7005                           
  7006                           ;lcd.h: 161: Lcd_Cmd(0b0000);
  7007  003330  0E00               	movlw	0
  7008  003332  EC43  F03B         	call	_Lcd_Cmd
  7009                           
  7010                           ;lcd.h: 162: _delay((unsigned long)((100)*(8000000/4000000.0)));
  7011  003336  0E32               	movlw	50
  7012  003338                     u8777:
  7013  003338  FFFF               	dw	65535	; errata NOP
  7014  00333A  2EE8               	decfsz	wreg,f,c
  7015  00333C  D7FD               	bra	u8777
  7016                           
  7017                           ;lcd.h: 163: char i = 0, j = 0, k = 0;
  7018  00333E  0E00               	movlw	0
  7019  003340  0100               	movlb	0	; () banked
  7020  003342  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7021                           
  7022                           ; BSR set to: 0
  7023  003344  0E00               	movlw	0
  7024  003346  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  7025                           
  7026                           ; BSR set to: 0
  7027  003348  0E00               	movlw	0
  7028  00334A  6FB9               	movwf	criarCaracteresCGRAM@k& (0+255),b
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;lcd.h: 164: for (i = 0; i < 5; i++) {
  7032  00334C  0E00               	movlw	0
  7033  00334E  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7034  003350                     l6674:
  7035  003350  FFFF               	dw	65535	; assembler added errata NOP
  7036                           
  7037                           ; BSR set to: 0
  7038  003352  0E04               	movlw	4
  7039  003354  65BB               	cpfsgt	criarCaracteresCGRAM@i& (0+255),b
  7040  003356  D001               	goto	l668
  7041  003358  D03A               	goto	u7400
  7042  00335A                     l668:
  7043  00335A  FFFF               	dw	65535	; assembler added errata NOP
  7044                           
  7045                           ; BSR set to: 0
  7046                           ;lcd.h: 165: if (k == 1) i = 0;
  7047                           
  7048                           ; BSR set to: 0
  7049  00335C  05B9               	decf	criarCaracteresCGRAM@k& (0+255),w,b
  7050  00335E  A4D8               	btfss	status,2,c
  7051  003360  D002               	goto	l670
  7052                           
  7053                           ; BSR set to: 0
  7054  003362  0E00               	movlw	0
  7055  003364  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7056  003366                     l670:
  7057  003366  FFFF               	dw	65535	; assembler added errata NOP
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;lcd.h: 166: for (j = 0; j < 8; j++) {
  7061  003368  0E00               	movlw	0
  7062  00336A  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  7063  00336C                     l6682:
  7064  00336C  FFFF               	dw	65535	; assembler added errata NOP
  7065                           
  7066                           ; BSR set to: 0
  7067  00336E  0E07               	movlw	7
  7068  003370  65BA               	cpfsgt	criarCaracteresCGRAM@j& (0+255),b
  7069  003372  D001               	goto	l671
  7070  003374  D028               	goto	u7390
  7071  003376                     l671:
  7072  003376  FFFF               	dw	65535	; assembler added errata NOP
  7073                           
  7074                           ; BSR set to: 0
  7075                           ;lcd.h: 167: Lcd_Write_Char((k) ? character[i][j] : 0);
  7076                           
  7077                           ; BSR set to: 0
  7078  003378  51B9               	movf	criarCaracteresCGRAM@k& (0+255),w,b
  7079  00337A  A4D8               	btfss	status,2,c
  7080  00337C  D005               	goto	l674
  7081                           
  7082                           ; BSR set to: 0
  7083  00337E  0E00               	movlw	0
  7084  003380  6FB8               	movwf	(_criarCaracteresCGRAM$1380+1)& (0+255),b
  7085  003382  0E00               	movlw	0
  7086  003384  6FB7               	movwf	_criarCaracteresCGRAM$1380& (0+255),b
  7087  003386  D018               	goto	l676
  7088  003388                     l674:
  7089  003388  FFFF               	dw	65535	; assembler added errata NOP
  7090                           
  7091                           ; BSR set to: 0
  7092                           
  7093                           ; BSR set to: 0
  7094  00338A  51BB               	movf	criarCaracteresCGRAM@i& (0+255),w,b
  7095  00338C  0D08               	mullw	8
  7096  00338E  0E87               	movlw	low criarCaracteresCGRAM@character
  7097  003390  6F84               	movwf	??_criarCaracteresCGRAM& (0+255),b
  7098  003392  0E00               	movlw	high criarCaracteresCGRAM@character
  7099  003394  6F85               	movwf	(??_criarCaracteresCGRAM+1)& (0+255),b
  7100  003396  50F3               	movf	prodl,w,c
  7101  003398  2784               	addwf	??_criarCaracteresCGRAM& (0+255),f,b
  7102  00339A  50F4               	movf	prodh,w,c
  7103  00339C  2385               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),f,b
  7104  00339E  51BA               	movf	criarCaracteresCGRAM@j& (0+255),w,b
  7105  0033A0  0D01               	mullw	1
  7106  0033A2  50F3               	movf	prodl,w,c
  7107  0033A4  2584               	addwf	??_criarCaracteresCGRAM& (0+255),w,b
  7108  0033A6  6ED9               	movwf	fsr2l,c
  7109  0033A8  50F4               	movf	prodh,w,c
  7110  0033AA  2185               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),w,b
  7111  0033AC  6EDA               	movwf	fsr2h,c
  7112  0033AE  50DF               	movf	indf2,w,c
  7113  0033B0  6F86               	movwf	(??_criarCaracteresCGRAM+2)& (0+255),b
  7114  0033B2  5186               	movf	(??_criarCaracteresCGRAM+2)& (0+255),w,b
  7115  0033B4  6FB7               	movwf	_criarCaracteresCGRAM$1380& (0+255),b
  7116  0033B6  6BB8               	clrf	(_criarCaracteresCGRAM$1380+1)& (0+255),b
  7117  0033B8                     l676:
  7118  0033B8  FFFF               	dw	65535	; assembler added errata NOP
  7119                           
  7120                           ; BSR set to: 0
  7121                           
  7122                           ; BSR set to: 0
  7123  0033BA  51B7               	movf	_criarCaracteresCGRAM$1380& (0+255),w,b
  7124  0033BC  EC34  F03D         	call	_Lcd_Write_Char
  7125  0033C0  0100               	movlb	0	; () banked
  7126  0033C2  2BBA               	incf	criarCaracteresCGRAM@j& (0+255),f,b
  7127  0033C4  D7D3               	goto	l6682
  7128  0033C6                     u7390:
  7129  0033C6  FFFF               	dw	65535	; assembler added errata NOP
  7130                           
  7131                           ; BSR set to: 0
  7132                           ;lcd.h: 168: }
  7133                           ;lcd.h: 169: k++;
  7134                           
  7135                           ; BSR set to: 0
  7136  0033C8  2BB9               	incf	criarCaracteresCGRAM@k& (0+255),f,b
  7137  0033CA  2BBB               	incf	criarCaracteresCGRAM@i& (0+255),f,b
  7138  0033CC  D7C1               	goto	l6674
  7139  0033CE                     u7400:
  7140  0033CE  FFFF               	dw	65535	; assembler added errata NOP
  7141                           
  7142                           ; BSR set to: 0
  7143                           
  7144                           ; BSR set to: 0
  7145  0033D0  0012               	return		;funcret
  7146  0033D2  FFFF               	dw	65535	; errata NOP
  7147  0033D4                     __end_of_criarCaracteresCGRAM:
  7148                           	opt stack 0
  7149                           tblptru	equ	0xFF8
  7150                           tblptrh	equ	0xFF7
  7151                           tblptrl	equ	0xFF6
  7152                           tablat	equ	0xFF5
  7153                           prodh	equ	0xFF4
  7154                           prodl	equ	0xFF3
  7155                           postinc0	equ	0xFEE
  7156                           wreg	equ	0xFE8
  7157                           postdec1	equ	0xFE5
  7158                           fsr1l	equ	0xFE1
  7159                           indf2	equ	0xFDF
  7160                           postinc2	equ	0xFDE
  7161                           fsr2h	equ	0xFDA
  7162                           fsr2l	equ	0xFD9
  7163                           status	equ	0xFD8
  7164                           
  7165 ;; *************** function _configurarEstacionaria *****************
  7166 ;; Defined at:
  7167 ;;		line 7 in file "tela_ESTACIONARIA.h"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;		None
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;		None
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  1    wreg      void 
  7174 ;; Registers used:
  7175 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7181 ;;      Params:         0       0       0       0       0       0       0
  7182 ;;      Locals:         0       0       0       0       0       0       0
  7183 ;;      Temps:          0       0       0       0       0       0       0
  7184 ;;      Totals:         0       0       0       0       0       0       0
  7185 ;;Total ram usage:        0 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    9
  7188 ;; This function calls:
  7189 ;;		_blink
  7190 ;;		_btPress
  7191 ;;		_sprintf
  7192 ;;		_writeEEPROM_ext
  7193 ;; This function is called by:
  7194 ;;		_main
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           	psect	text18
  7199  0022D2                     __ptext18:
  7200                           	opt stack 0
  7201  0022D2                     _configurarEstacionaria:
  7202                           	opt stack 0
  7203  0022D2  FFFF               	dw	65535	; assembler added errata NOP
  7204                           
  7205                           ;tela_ESTACIONARIA.h: 9: sprintf(line1, "Configuracao tempo");
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;incstack = 0
  7209  0022D4  0E8F               	movlw	low _line1
  7210  0022D6  0100               	movlb	0	; () banked
  7211  0022D8  6FA1               	movwf	sprintf@wh& (0+255),b
  7212  0022DA  0E01               	movlw	high _line1
  7213  0022DC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7214  0022DE  0ED8               	movlw	low STR_83
  7215  0022E0  6FA3               	movwf	sprintf@f& (0+255),b
  7216  0022E2  0E7D               	movlw	high STR_83
  7217  0022E4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7218  0022E6  ECBB  F03D         	call	_sprintf	;wreg free
  7219                           
  7220                           ;tela_ESTACIONARIA.h: 10: sprintf(line2, "Max. PARTIDA:");
  7221  0022EA  0E7A               	movlw	low _line2
  7222  0022EC  0100               	movlb	0	; () banked
  7223  0022EE  6FA1               	movwf	sprintf@wh& (0+255),b
  7224  0022F0  0E01               	movlw	high _line2
  7225  0022F2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7226  0022F4  0EB4               	movlw	low STR_84
  7227  0022F6  6FA3               	movwf	sprintf@f& (0+255),b
  7228  0022F8  0E7E               	movlw	high STR_84
  7229  0022FA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7230  0022FC  ECBB  F03D         	call	_sprintf	;wreg free
  7231                           
  7232                           ;tela_ESTACIONARIA.h: 11: sprintf(&line2[16], "%3ds", tempo_limite_estacionaria);
  7233  002300  0E8A               	movlw	low (_line2+16)
  7234  002302  0100               	movlb	0	; () banked
  7235  002304  6FA1               	movwf	sprintf@wh& (0+255),b
  7236  002306  0E01               	movlw	high (_line2+16)
  7237  002308  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7238  00230A  0EF5               	movlw	low STR_85
  7239  00230C  6FA3               	movwf	sprintf@f& (0+255),b
  7240  00230E  0E7F               	movlw	high STR_85
  7241  002310  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7242  002312  C0E8  F0A5         	movff	_tempo_limite_estacionaria,?_sprintf+4
  7243  002316  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7244  002318  ECBB  F03D         	call	_sprintf	;wreg free
  7245                           
  7246                           ;tela_ESTACIONARIA.h: 12: sprintf(line3, "Max. TESTE:");
  7247  00231C  0E65               	movlw	low _line3
  7248  00231E  0100               	movlb	0	; () banked
  7249  002320  6FA1               	movwf	sprintf@wh& (0+255),b
  7250  002322  0E01               	movlw	high _line3
  7251  002324  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7252  002326  0E03               	movlw	low STR_86
  7253  002328  6FA3               	movwf	sprintf@f& (0+255),b
  7254  00232A  0E7F               	movlw	high STR_86
  7255  00232C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7256  00232E  ECBB  F03D         	call	_sprintf	;wreg free
  7257                           
  7258                           ;tela_ESTACIONARIA.h: 13: sprintf(&line3[16], "%3ds", tempo_limite_teste_estacionaria);
  7259  002332  0E75               	movlw	low (_line3+16)
  7260  002334  0100               	movlb	0	; () banked
  7261  002336  6FA1               	movwf	sprintf@wh& (0+255),b
  7262  002338  0E01               	movlw	high (_line3+16)
  7263  00233A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7264  00233C  0EF5               	movlw	low STR_85
  7265  00233E  6FA3               	movwf	sprintf@f& (0+255),b
  7266  002340  0E7F               	movlw	high STR_85
  7267  002342  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7268  002344  C0E4  F0A5         	movff	_tempo_limite_teste_estacionaria,?_sprintf+4
  7269  002348  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7270  00234A  ECBB  F03D         	call	_sprintf	;wreg free
  7271                           
  7272                           ;tela_ESTACIONARIA.h: 14: sprintf(line4, "#horimetro:%5d min", horimetro);
  7273  00234E  0E50               	movlw	low _line4
  7274  002350  0100               	movlb	0	; () banked
  7275  002352  6FA1               	movwf	sprintf@wh& (0+255),b
  7276  002354  0E01               	movlw	high _line4
  7277  002356  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7278  002358  0EC5               	movlw	low STR_88
  7279  00235A  6FA3               	movwf	sprintf@f& (0+255),b
  7280  00235C  0E7D               	movlw	high STR_88
  7281  00235E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7282  002360  C04F  F0A5         	movff	_horimetro,?_sprintf+4
  7283  002364  C050  F0A6         	movff	_horimetro+1,?_sprintf+5
  7284  002368  ECBB  F03D         	call	_sprintf	;wreg free
  7285                           
  7286                           ;tela_ESTACIONARIA.h: 16: if (btPress(4)) {
  7287  00236C  0E04               	movlw	4
  7288  00236E  EC6E  F01E         	call	_btPress
  7289  002372  0900               	iorlw	0
  7290  002374  B4D8               	btfsc	status,2,c
  7291  002376  D002               	goto	l840
  7292                           
  7293                           ;tela_ESTACIONARIA.h: 17: option_posi++;
  7294  002378  0100               	movlb	0	; () banked
  7295  00237A  2BDA               	incf	_option_posi& (0+255),f,b
  7296  00237C                     l840:
  7297  00237C  FFFF               	dw	65535	; assembler added errata NOP
  7298                           
  7299                           ;tela_ESTACIONARIA.h: 18: }
  7300                           ;tela_ESTACIONARIA.h: 19: if (btPress(1)) {
  7301                           
  7302                           ; BSR set to: 0
  7303  00237E  0E01               	movlw	1
  7304  002380  EC6E  F01E         	call	_btPress
  7305  002384  0900               	iorlw	0
  7306  002386  B4D8               	btfsc	status,2,c
  7307  002388  D04E               	goto	l842
  7308                           
  7309                           ;tela_ESTACIONARIA.h: 20: writeEEPROM_ext(7, tempo_limite_estacionaria);
  7310  00238A  C0E8  F08C         	movff	_tempo_limite_estacionaria,writeEEPROM_ext@data
  7311  00238E  0E07               	movlw	7
  7312  002390  EC98  F03D         	call	_writeEEPROM_ext
  7313                           
  7314                           ;tela_ESTACIONARIA.h: 21: writeEEPROM_ext(13, tempo_limite_teste_estacionaria);
  7315  002394  C0E4  F08C         	movff	_tempo_limite_teste_estacionaria,writeEEPROM_ext@data
  7316  002398  0E0D               	movlw	13
  7317  00239A  EC98  F03D         	call	_writeEEPROM_ext
  7318                           
  7319                           ;tela_ESTACIONARIA.h: 22: option_posi = 0;
  7320  00239E  0E00               	movlw	0
  7321  0023A0  0100               	movlb	0	; () banked
  7322  0023A2  6FDA               	movwf	_option_posi& (0+255),b
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;tela_ESTACIONARIA.h: 23: menu_posi = _menu_posi;
  7326  0023A4  C0D8  F0D9         	movff	__menu_posi,_menu_posi
  7327                           
  7328                           ; BSR set to: 0
  7329                           ;tela_ESTACIONARIA.h: 24: }
  7330                           ;tela_ESTACIONARIA.h: 25: switch (option_posi) {
  7331  0023A8  D03E               	goto	l842
  7332  0023AA  FFFF               	dw	65535	; assembler added errata NOP
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;tela_ESTACIONARIA.h: 27: blink(line2, 16,20 );
  7336                           
  7337                           ; BSR set to: 0
  7338  0023AC  0E7A               	movlw	low _line2
  7339  0023AE  6F80               	movwf	blink@line& (0+255),b
  7340  0023B0  0E01               	movlw	high _line2
  7341  0023B2  6F81               	movwf	(blink@line+1)& (0+255),b
  7342  0023B4  0E10               	movlw	16
  7343  0023B6  6F82               	movwf	blink@start& (0+255),b
  7344  0023B8  0E14               	movlw	20
  7345  0023BA  6F83               	movwf	blink@end& (0+255),b
  7346  0023BC  ECD8  F03C         	call	_blink	;wreg free
  7347                           
  7348                           ;tela_ESTACIONARIA.h: 28: if (btPress(3)) {
  7349  0023C0  0E03               	movlw	3
  7350  0023C2  EC6E  F01E         	call	_btPress
  7351  0023C6  0900               	iorlw	0
  7352  0023C8  B4D8               	btfsc	status,2,c
  7353  0023CA  D002               	goto	l844
  7354                           
  7355                           ;tela_ESTACIONARIA.h: 29: tempo_limite_estacionaria++;
  7356  0023CC  0100               	movlb	0	; () banked
  7357  0023CE  2BE8               	incf	_tempo_limite_estacionaria& (0+255),f,b
  7358  0023D0                     l844:
  7359  0023D0  FFFF               	dw	65535	; assembler added errata NOP
  7360                           
  7361                           ;tela_ESTACIONARIA.h: 30: }
  7362                           ;tela_ESTACIONARIA.h: 31: if (btPress(2)) {
  7363                           
  7364                           ; BSR set to: 0
  7365  0023D2  0E02               	movlw	2
  7366  0023D4  EC6E  F01E         	call	_btPress
  7367  0023D8  0900               	iorlw	0
  7368  0023DA  B4D8               	btfsc	status,2,c
  7369  0023DC  D02E               	goto	l846
  7370                           
  7371                           ;tela_ESTACIONARIA.h: 32: tempo_limite_estacionaria--;
  7372  0023DE  0100               	movlb	0	; () banked
  7373  0023E0  07E8               	decf	_tempo_limite_estacionaria& (0+255),f,b
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;tela_ESTACIONARIA.h: 33: }
  7377                           ;tela_ESTACIONARIA.h: 34: break;
  7378  0023E2  D02B               	goto	l846
  7379  0023E4  FFFF               	dw	65535	; assembler added errata NOP
  7380                           
  7381                           ; BSR set to: 0
  7382                           ;tela_ESTACIONARIA.h: 36: blink(line3, 16,20 );
  7383                           
  7384                           ; BSR set to: 0
  7385  0023E6  0E65               	movlw	low _line3
  7386  0023E8  6F80               	movwf	blink@line& (0+255),b
  7387  0023EA  0E01               	movlw	high _line3
  7388  0023EC  6F81               	movwf	(blink@line+1)& (0+255),b
  7389  0023EE  0E10               	movlw	16
  7390  0023F0  6F82               	movwf	blink@start& (0+255),b
  7391  0023F2  0E14               	movlw	20
  7392  0023F4  6F83               	movwf	blink@end& (0+255),b
  7393  0023F6  ECD8  F03C         	call	_blink	;wreg free
  7394                           
  7395                           ;tela_ESTACIONARIA.h: 37: if (btPress(3)) {
  7396  0023FA  0E03               	movlw	3
  7397  0023FC  EC6E  F01E         	call	_btPress
  7398  002400  0900               	iorlw	0
  7399  002402  B4D8               	btfsc	status,2,c
  7400  002404  D002               	goto	l848
  7401                           
  7402                           ;tela_ESTACIONARIA.h: 38: tempo_limite_teste_estacionaria++;
  7403  002406  0100               	movlb	0	; () banked
  7404  002408  2BE4               	incf	_tempo_limite_teste_estacionaria& (0+255),f,b
  7405  00240A                     l848:
  7406  00240A  FFFF               	dw	65535	; assembler added errata NOP
  7407                           
  7408                           ;tela_ESTACIONARIA.h: 39: }
  7409                           ;tela_ESTACIONARIA.h: 40: if (btPress(2)) {
  7410                           
  7411                           ; BSR set to: 0
  7412  00240C  0E02               	movlw	2
  7413  00240E  EC6E  F01E         	call	_btPress
  7414  002412  0900               	iorlw	0
  7415  002414  B4D8               	btfsc	status,2,c
  7416  002416  D011               	goto	l846
  7417                           
  7418                           ;tela_ESTACIONARIA.h: 41: tempo_limite_teste_estacionaria--;
  7419  002418  0100               	movlb	0	; () banked
  7420  00241A  07E4               	decf	_tempo_limite_teste_estacionaria& (0+255),f,b
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;tela_ESTACIONARIA.h: 42: }
  7424                           ;tela_ESTACIONARIA.h: 43: break;
  7425  00241C  D00E               	goto	l846
  7426  00241E  FFFF               	dw	65535	; assembler added errata NOP
  7427                           
  7428                           ; BSR set to: 0
  7429                           
  7430                           ; BSR set to: 0
  7431  002420  0E00               	movlw	0
  7432  002422  6FDA               	movwf	_option_posi& (0+255),b
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;tela_ESTACIONARIA.h: 46: }
  7436                           
  7437                           ;tela_ESTACIONARIA.h: 45: break;
  7438  002424  D00A               	goto	l846
  7439  002426                     l842:
  7440  002426  FFFF               	dw	65535	; assembler added errata NOP
  7441                           
  7442                           ; BSR set to: 0
  7443  002428  0100               	movlb	0	; () banked
  7444  00242A  51DA               	movf	_option_posi& (0+255),w,b
  7445                           
  7446                           ; Switch size 1, requested type "space"
  7447                           ; Number of cases is 2, Range of values is 0 to 1
  7448                           ; switch strategies available:
  7449                           ; Name         Instructions Cycles
  7450                           ; simple_byte            7     4 (average)
  7451                           ;	Chosen strategy is simple_byte
  7452  00242C  0A00               	xorlw	0	; case 0
  7453  00242E  B4D8               	btfsc	status,2,c
  7454  002430  D7BC               	goto	l843
  7455  002432  0A01               	xorlw	1	; case 1
  7456  002434  B4D8               	btfsc	status,2,c
  7457  002436  D7D6               	goto	l847
  7458  002438  D7F2               	goto	l850
  7459  00243A                     l846:
  7460  00243A  FFFF               	dw	65535	; assembler added errata NOP
  7461                           
  7462                           ; BSR set to: 0
  7463  00243C  0012               	return		;funcret
  7464  00243E  FFFF               	dw	65535	; errata NOP
  7465  002440                     __end_of_configurarEstacionaria:
  7466                           	opt stack 0
  7467                           tblptru	equ	0xFF8
  7468                           tblptrh	equ	0xFF7
  7469                           tblptrl	equ	0xFF6
  7470                           tablat	equ	0xFF5
  7471                           prodh	equ	0xFF4
  7472                           prodl	equ	0xFF3
  7473                           postinc0	equ	0xFEE
  7474                           wreg	equ	0xFE8
  7475                           postdec1	equ	0xFE5
  7476                           fsr1l	equ	0xFE1
  7477                           indf2	equ	0xFDF
  7478                           postinc2	equ	0xFDE
  7479                           fsr2h	equ	0xFDA
  7480                           fsr2l	equ	0xFD9
  7481                           status	equ	0xFD8
  7482                           
  7483 ;; *************** function _configuraTelefones *****************
  7484 ;; Defined at:
  7485 ;;		line 9 in file "tela_TELEFONES.h"
  7486 ;; Parameters:    Size  Location     Type
  7487 ;;		None
  7488 ;; Auto vars:     Size  Location     Type
  7489 ;;  i               1   73[BANK0 ] unsigned char 
  7490 ;; Return value:  Size  Location     Type
  7491 ;;                  1    wreg      void 
  7492 ;; Registers used:
  7493 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7494 ;; Tracked objects:
  7495 ;;		On entry : 0/0
  7496 ;;		On exit  : 0/0
  7497 ;;		Unchanged: 0/0
  7498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7499 ;;      Params:         0       0       0       0       0       0       0
  7500 ;;      Locals:         0       3       0       0       0       0       0
  7501 ;;      Temps:          0       2       0       0       0       0       0
  7502 ;;      Totals:         0       5       0       0       0       0       0
  7503 ;;Total ram usage:        5 bytes
  7504 ;; Hardware stack levels used:    1
  7505 ;; Hardware stack levels required when called:   10
  7506 ;; This function calls:
  7507 ;;		_blink
  7508 ;;		_btPress
  7509 ;;		_comunicarTeste
  7510 ;;		_sprintf
  7511 ;;		_writeEEPROM_ext
  7512 ;; This function is called by:
  7513 ;;		_main
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           	psect	text19
  7518  0010D4                     __ptext19:
  7519                           	opt stack 0
  7520  0010D4                     _configuraTelefones:
  7521                           	opt stack 0
  7522  0010D4  FFFF               	dw	65535	; assembler added errata NOP
  7523                           
  7524                           ;tela_TELEFONES.h: 10: sprintf(&line1[1], "T1: %s", tel1);
  7525                           
  7526                           ;incstack = 0
  7527  0010D6  0E90               	movlw	low (_line1+1)
  7528  0010D8  0100               	movlb	0	; () banked
  7529  0010DA  6FA1               	movwf	sprintf@wh& (0+255),b
  7530  0010DC  0E01               	movlw	high (_line1+1)
  7531  0010DE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7532  0010E0  0EC0               	movlw	low STR_78
  7533  0010E2  6FA3               	movwf	sprintf@f& (0+255),b
  7534  0010E4  0E7F               	movlw	high STR_78
  7535  0010E6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7536  0010E8  0EC4               	movlw	low _tel1
  7537  0010EA  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  7538  0010EC  0E01               	movlw	high _tel1
  7539  0010EE  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  7540  0010F0  ECBB  F03D         	call	_sprintf	;wreg free
  7541                           
  7542                           ;tela_TELEFONES.h: 11: sprintf(&line2[1], "T2: %s", tel2);
  7543  0010F4  0E7B               	movlw	low (_line2+1)
  7544  0010F6  0100               	movlb	0	; () banked
  7545  0010F8  6FA1               	movwf	sprintf@wh& (0+255),b
  7546  0010FA  0E01               	movlw	high (_line2+1)
  7547  0010FC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7548  0010FE  0EC7               	movlw	low STR_79
  7549  001100  6FA3               	movwf	sprintf@f& (0+255),b
  7550  001102  0E7F               	movlw	high STR_79
  7551  001104  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7552  001106  0EB8               	movlw	low _tel2
  7553  001108  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  7554  00110A  0E01               	movlw	high _tel2
  7555  00110C  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  7556  00110E  ECBB  F03D         	call	_sprintf	;wreg free
  7557                           
  7558                           ;tela_TELEFONES.h: 12: sprintf(&line3[1], "%s", gsmOcupado ? "enviando... " : "Enviar sm
      +                          s teste");
  7559  001112  0100               	movlb	0	; () banked
  7560  001114  51F4               	movf	_gsmOcupado& (0+255),w,b
  7561  001116  A4D8               	btfss	status,2,c
  7562  001118  D004               	goto	l798
  7563                           
  7564                           ; BSR set to: 0
  7565  00111A  0E45               	movlw	low STR_82
  7566  00111C  6FC7               	movwf	_configuraTelefones$1456& (0+255),b
  7567  00111E  0E7E               	movlw	high STR_82
  7568  001120  D004               	goto	L17
  7569  001122                     l798:
  7570  001122  FFFF               	dw	65535	; assembler added errata NOP
  7571                           
  7572                           ; BSR set to: 0
  7573                           
  7574                           ; BSR set to: 0
  7575  001124  0EDE               	movlw	low STR_81
  7576  001126  6FC7               	movwf	_configuraTelefones$1456& (0+255),b
  7577  001128  0E7E               	movlw	high STR_81
  7578  00112A                     L17:
  7579  00112A  FFFF               	dw	65535	; assembler added errata NOP
  7580  00112C  6FC8               	movwf	(_configuraTelefones$1456+1)& (0+255),b
  7581                           
  7582                           ; BSR set to: 0
  7583                           
  7584                           ; BSR set to: 0
  7585  00112E  0E66               	movlw	low (_line3+1)
  7586  001130  6FA1               	movwf	sprintf@wh& (0+255),b
  7587  001132  0E01               	movlw	high (_line3+1)
  7588  001134  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7589  001136  0E24               	movlw	low (STR_76+9)
  7590  001138  6FA3               	movwf	sprintf@f& (0+255),b
  7591  00113A  0E7F               	movlw	high (STR_76+9)
  7592  00113C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7593  00113E  C0C7  F0A5         	movff	_configuraTelefones$1456,?_sprintf+4
  7594  001142  C0C8  F0A6         	movff	_configuraTelefones$1456+1,?_sprintf+5
  7595  001146  ECBB  F03D         	call	_sprintf	;wreg free
  7596                           
  7597                           ;tela_TELEFONES.h: 14: if (ajust_tel == 0) {
  7598  00114A  0100               	movlb	0	; () banked
  7599  00114C  51D6               	movf	_ajust_tel& (0+255),w,b
  7600  00114E  A4D8               	btfss	status,2,c
  7601  001150  D052               	goto	l806
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;tela_TELEFONES.h: 15: if (btPress(3)) {
  7605  001152  0E03               	movlw	3
  7606  001154  EC6E  F01E         	call	_btPress
  7607  001158  0900               	iorlw	0
  7608  00115A  B4D8               	btfsc	status,2,c
  7609  00115C  D003               	goto	l802
  7610                           
  7611                           ;tela_TELEFONES.h: 16: option_posi--;
  7612  00115E  0100               	movlb	0	; () banked
  7613  001160  07DA               	decf	_option_posi& (0+255),f,b
  7614                           
  7615                           ;tela_TELEFONES.h: 17: } else if (btPress(2)) {
  7616  001162  D049               	goto	l806
  7617  001164                     l802:
  7618  001164  FFFF               	dw	65535	; assembler added errata NOP
  7619                           
  7620                           ; BSR set to: 0
  7621  001166  0E02               	movlw	2
  7622  001168  EC6E  F01E         	call	_btPress
  7623  00116C  0900               	iorlw	0
  7624  00116E  B4D8               	btfsc	status,2,c
  7625  001170  D003               	goto	l804
  7626                           
  7627                           ;tela_TELEFONES.h: 18: option_posi++;
  7628  001172  0100               	movlb	0	; () banked
  7629  001174  2BDA               	incf	_option_posi& (0+255),f,b
  7630                           
  7631                           ;tela_TELEFONES.h: 19: } else if (btPress(1)) {
  7632  001176  D03F               	goto	l806
  7633  001178                     l804:
  7634  001178  FFFF               	dw	65535	; assembler added errata NOP
  7635                           
  7636                           ; BSR set to: 0
  7637  00117A  0E01               	movlw	1
  7638  00117C  EC6E  F01E         	call	_btPress
  7639  001180  0900               	iorlw	0
  7640  001182  B4D8               	btfsc	status,2,c
  7641  001184  D038               	goto	l806
  7642                           
  7643                           ;tela_TELEFONES.h: 20: gsmOcupado = 0;
  7644  001186  0E00               	movlw	0
  7645  001188  0100               	movlb	0	; () banked
  7646  00118A  6FF4               	movwf	_gsmOcupado& (0+255),b
  7647                           
  7648                           ;tela_TELEFONES.h: 21: tempo_reenvio_SMS = 5;
  7649  00118C  0E05               	movlw	5
  7650  00118E  6E7B               	movwf	_tempo_reenvio_SMS,c
  7651                           
  7652                           ;tela_TELEFONES.h: 22: option_posi = 0;
  7653  001190  0E00               	movlw	0
  7654  001192  6FDA               	movwf	_option_posi& (0+255),b
  7655                           
  7656                           ;tela_TELEFONES.h: 23: tel_posi = 0;
  7657  001194  0E00               	movlw	0
  7658  001196  6FD7               	movwf	_tel_posi& (0+255),b
  7659                           
  7660                           ;tela_TELEFONES.h: 24: ajust_tel = 0;
  7661  001198  0E00               	movlw	0
  7662  00119A  6FD6               	movwf	_ajust_tel& (0+255),b
  7663                           
  7664                           ;tela_TELEFONES.h: 25: char i = 0;
  7665  00119C  0E00               	movlw	0
  7666  00119E  6FC9               	movwf	configuraTelefones@i& (0+255),b
  7667                           
  7668                           ;tela_TELEFONES.h: 26: for (i = 0; i < 11; i++) {
  7669  0011A0  0E00               	movlw	0
  7670  0011A2  6FC9               	movwf	configuraTelefones@i& (0+255),b
  7671  0011A4                     l6966:
  7672  0011A4  FFFF               	dw	65535	; assembler added errata NOP
  7673                           
  7674                           ; BSR set to: 0
  7675  0011A6  0E0A               	movlw	10
  7676  0011A8  65C9               	cpfsgt	configuraTelefones@i& (0+255),b
  7677  0011AA  D001               	goto	l807
  7678  0011AC  D021               	goto	u7890
  7679  0011AE                     l807:
  7680  0011AE  FFFF               	dw	65535	; assembler added errata NOP
  7681                           
  7682                           ; BSR set to: 0
  7683                           ;tela_TELEFONES.h: 27: writeEEPROM_ext((20 + i), tel1[i]);
  7684                           
  7685                           ; BSR set to: 0
  7686  0011B0  51C9               	movf	configuraTelefones@i& (0+255),w,b
  7687  0011B2  0D01               	mullw	1
  7688  0011B4  0EC4               	movlw	low _tel1
  7689  0011B6  24F3               	addwf	prodl,w,c
  7690  0011B8  6ED9               	movwf	fsr2l,c
  7691  0011BA  0E01               	movlw	high _tel1
  7692  0011BC  20F4               	addwfc	prodh,w,c
  7693  0011BE  6EDA               	movwf	fsr2h,c
  7694  0011C0  50DF               	movf	indf2,w,c
  7695  0011C2  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  7696  0011C4  51C9               	movf	configuraTelefones@i& (0+255),w,b
  7697  0011C6  0F14               	addlw	20
  7698  0011C8  EC98  F03D         	call	_writeEEPROM_ext
  7699                           
  7700                           ;tela_TELEFONES.h: 28: writeEEPROM_ext((40 + i), tel2[i]);
  7701  0011CC  0100               	movlb	0	; () banked
  7702  0011CE  51C9               	movf	configuraTelefones@i& (0+255),w,b
  7703  0011D0  0D01               	mullw	1
  7704  0011D2  0EB8               	movlw	low _tel2
  7705  0011D4  24F3               	addwf	prodl,w,c
  7706  0011D6  6ED9               	movwf	fsr2l,c
  7707  0011D8  0E01               	movlw	high _tel2
  7708  0011DA  20F4               	addwfc	prodh,w,c
  7709  0011DC  6EDA               	movwf	fsr2h,c
  7710  0011DE  50DF               	movf	indf2,w,c
  7711  0011E0  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  7712  0011E2  51C9               	movf	configuraTelefones@i& (0+255),w,b
  7713  0011E4  0F28               	addlw	40
  7714  0011E6  EC98  F03D         	call	_writeEEPROM_ext
  7715  0011EA  0100               	movlb	0	; () banked
  7716  0011EC  2BC9               	incf	configuraTelefones@i& (0+255),f,b
  7717  0011EE  D7DA               	goto	l6966
  7718  0011F0                     u7890:
  7719  0011F0  FFFF               	dw	65535	; assembler added errata NOP
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;tela_TELEFONES.h: 29: }
  7723                           ;tela_TELEFONES.h: 30: menu_posi = _menu_posi;
  7724  0011F2  C0D8  F0D9         	movff	__menu_posi,_menu_posi
  7725  0011F6                     l806:
  7726  0011F6  FFFF               	dw	65535	; assembler added errata NOP
  7727                           
  7728                           ;tela_TELEFONES.h: 31: }
  7729                           ;tela_TELEFONES.h: 32: }
  7730                           ;tela_TELEFONES.h: 33: if (ajust_tel == 1) {
  7731                           
  7732                           ; BSR set to: 0
  7733                           
  7734                           ; BSR set to: 0
  7735                           
  7736                           ; BSR set to: 0
  7737                           
  7738                           ; BSR set to: 0
  7739  0011F8  0100               	movlb	0	; () banked
  7740  0011FA  05D6               	decf	_ajust_tel& (0+255),w,b
  7741  0011FC  A4D8               	btfss	status,2,c
  7742  0011FE  D117               	goto	l813
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;tela_TELEFONES.h: 34: if (btPress(4)) {
  7746  001200  0E04               	movlw	4
  7747  001202  EC6E  F01E         	call	_btPress
  7748  001206  0900               	iorlw	0
  7749  001208  B4D8               	btfsc	status,2,c
  7750  00120A  D003               	goto	l810
  7751                           
  7752                           ;tela_TELEFONES.h: 35: tel_posi++;
  7753  00120C  0100               	movlb	0	; () banked
  7754  00120E  2BD7               	incf	_tel_posi& (0+255),f,b
  7755                           
  7756                           ;tela_TELEFONES.h: 36: } else if (btPress(1)) {
  7757  001210  D10E               	goto	l813
  7758  001212                     l810:
  7759  001212  FFFF               	dw	65535	; assembler added errata NOP
  7760                           
  7761                           ; BSR set to: 0
  7762  001214  0E01               	movlw	1
  7763  001216  EC6E  F01E         	call	_btPress
  7764  00121A  0900               	iorlw	0
  7765  00121C  B4D8               	btfsc	status,2,c
  7766  00121E  D107               	goto	l813
  7767                           
  7768                           ;tela_TELEFONES.h: 37: tel_posi = 0;
  7769  001220  0E00               	movlw	0
  7770  001222  0100               	movlb	0	; () banked
  7771  001224  6FD7               	movwf	_tel_posi& (0+255),b
  7772                           
  7773                           ;tela_TELEFONES.h: 38: ajust_tel = 0;
  7774  001226  0E00               	movlw	0
  7775  001228  6FD6               	movwf	_ajust_tel& (0+255),b
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;tela_TELEFONES.h: 39: }
  7779                           ;tela_TELEFONES.h: 40: }
  7780                           ;tela_TELEFONES.h: 42: switch (option_posi) {
  7781                           
  7782                           ; BSR set to: 0
  7783                           
  7784                           ; BSR set to: 0
  7785  00122A  D101               	goto	l813
  7786  00122C  FFFF               	dw	65535	; assembler added errata NOP
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;tela_TELEFONES.h: 44: line1[0] = '>';
  7790                           
  7791                           ; BSR set to: 0
  7792  00122E  0E3E               	movlw	62
  7793  001230  0101               	movlb	1	; () banked
  7794  001232  6F8F               	movwf	_line1& (0+255),b
  7795                           
  7796                           ; BSR set to: 1
  7797                           ;tela_TELEFONES.h: 45: if (btPress(4)) {
  7798  001234  0E04               	movlw	4
  7799  001236  EC6E  F01E         	call	_btPress
  7800  00123A  0900               	iorlw	0
  7801  00123C  B4D8               	btfsc	status,2,c
  7802  00123E  D003               	goto	l815
  7803                           
  7804                           ;tela_TELEFONES.h: 46: ajust_tel = 1;
  7805  001240  0E01               	movlw	1
  7806  001242  0100               	movlb	0	; () banked
  7807  001244  6FD6               	movwf	_ajust_tel& (0+255),b
  7808  001246                     l815:
  7809  001246  FFFF               	dw	65535	; assembler added errata NOP
  7810                           
  7811                           ;tela_TELEFONES.h: 47: }
  7812                           ;tela_TELEFONES.h: 48: if (ajust_tel) {
  7813  001248  0100               	movlb	0	; () banked
  7814  00124A  51D6               	movf	_ajust_tel& (0+255),w,b
  7815  00124C  B4D8               	btfsc	status,2,c
  7816  00124E  D0FC               	goto	l823
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;tela_TELEFONES.h: 49: blink(line1, (tel_posi + 6), (tel_posi + 6));
  7820  001250  0E8F               	movlw	low _line1
  7821  001252  6F80               	movwf	blink@line& (0+255),b
  7822  001254  0E01               	movlw	high _line1
  7823  001256  6F81               	movwf	(blink@line+1)& (0+255),b
  7824  001258  51D7               	movf	_tel_posi& (0+255),w,b
  7825  00125A  0F06               	addlw	6
  7826  00125C  6F82               	movwf	blink@start& (0+255),b
  7827  00125E  51D7               	movf	_tel_posi& (0+255),w,b
  7828  001260  0F06               	addlw	6
  7829  001262  6F83               	movwf	blink@end& (0+255),b
  7830  001264  ECD8  F03C         	call	_blink	;wreg free
  7831                           
  7832                           ;tela_TELEFONES.h: 50: if ((tel_posi + 2) > sizeof (tel1)) {
  7833  001268  0100               	movlb	0	; () banked
  7834  00126A  51D7               	movf	_tel_posi& (0+255),w,b
  7835  00126C  6FC5               	movwf	??_configuraTelefones& (0+255),b
  7836  00126E  6BC6               	clrf	(??_configuraTelefones+1)& (0+255),b
  7837  001270  0E02               	movlw	2
  7838  001272  27C5               	addwf	??_configuraTelefones& (0+255),f,b
  7839  001274  0E00               	movlw	0
  7840  001276  23C6               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  7841  001278  51C6               	movf	(??_configuraTelefones+1)& (0+255),w,b
  7842  00127A  E104               	bnz	u7950
  7843  00127C  0E0D               	movlw	13
  7844  00127E  5DC5               	subwf	??_configuraTelefones& (0+255),w,b
  7845  001280  A0D8               	btfss	status,0,c
  7846  001282  D004               	goto	l817
  7847  001284                     u7950:
  7848                           
  7849                           ; BSR set to: 0
  7850                           ;tela_TELEFONES.h: 51: tel_posi = 0;
  7851  001284  0E00               	movlw	0
  7852  001286  6FD7               	movwf	_tel_posi& (0+255),b
  7853                           
  7854                           ;tela_TELEFONES.h: 52: ajust_tel = 0;
  7855  001288  0E00               	movlw	0
  7856  00128A  6FD6               	movwf	_ajust_tel& (0+255),b
  7857  00128C                     l817:
  7858  00128C  FFFF               	dw	65535	; assembler added errata NOP
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;tela_TELEFONES.h: 53: }
  7862                           ;tela_TELEFONES.h: 54: if (btPress(3)) {
  7863                           
  7864                           ; BSR set to: 0
  7865  00128E  0E03               	movlw	3
  7866  001290  EC6E  F01E         	call	_btPress
  7867  001294  0900               	iorlw	0
  7868  001296  B4D8               	btfsc	status,2,c
  7869  001298  D00A               	goto	l818
  7870                           
  7871                           ;tela_TELEFONES.h: 55: tel1[tel_posi]++;
  7872  00129A  0100               	movlb	0	; () banked
  7873  00129C  51D7               	movf	_tel_posi& (0+255),w,b
  7874  00129E  0D01               	mullw	1
  7875  0012A0  0EC4               	movlw	low _tel1
  7876  0012A2  24F3               	addwf	prodl,w,c
  7877  0012A4  6ED9               	movwf	fsr2l,c
  7878  0012A6  0E01               	movlw	high _tel1
  7879  0012A8  20F4               	addwfc	prodh,w,c
  7880  0012AA  6EDA               	movwf	fsr2h,c
  7881  0012AC  2ADF               	incf	indf2,f,c
  7882  0012AE                     l818:
  7883  0012AE  FFFF               	dw	65535	; assembler added errata NOP
  7884                           
  7885                           ;tela_TELEFONES.h: 56: }
  7886                           ;tela_TELEFONES.h: 57: if (btPress(2)) {
  7887                           
  7888                           ; BSR set to: 0
  7889  0012B0  0E02               	movlw	2
  7890  0012B2  EC6E  F01E         	call	_btPress
  7891  0012B6  0900               	iorlw	0
  7892  0012B8  B4D8               	btfsc	status,2,c
  7893  0012BA  D00A               	goto	l819
  7894                           
  7895                           ;tela_TELEFONES.h: 58: tel1[tel_posi]--;
  7896  0012BC  0100               	movlb	0	; () banked
  7897  0012BE  51D7               	movf	_tel_posi& (0+255),w,b
  7898  0012C0  0D01               	mullw	1
  7899  0012C2  0EC4               	movlw	low _tel1
  7900  0012C4  24F3               	addwf	prodl,w,c
  7901  0012C6  6ED9               	movwf	fsr2l,c
  7902  0012C8  0E01               	movlw	high _tel1
  7903  0012CA  20F4               	addwfc	prodh,w,c
  7904  0012CC  6EDA               	movwf	fsr2h,c
  7905  0012CE  06DF               	decf	indf2,f,c
  7906  0012D0                     l819:
  7907  0012D0  FFFF               	dw	65535	; assembler added errata NOP
  7908                           
  7909                           ;tela_TELEFONES.h: 59: }
  7910                           ;tela_TELEFONES.h: 60: if ((tel1[tel_posi] > 57) | (tel1[tel_posi] < 48)) {
  7911  0012D2  0100               	movlb	0	; () banked
  7912  0012D4  51D7               	movf	_tel_posi& (0+255),w,b
  7913  0012D6  0D01               	mullw	1
  7914  0012D8  0EC4               	movlw	low _tel1
  7915  0012DA  24F3               	addwf	prodl,w,c
  7916  0012DC  6ED9               	movwf	fsr2l,c
  7917  0012DE  0E01               	movlw	high _tel1
  7918  0012E0  20F4               	addwfc	prodh,w,c
  7919  0012E2  6EDA               	movwf	fsr2h,c
  7920  0012E4  0E3A               	movlw	58
  7921  0012E6  60DF               	cpfslt	indf2,c
  7922  0012E8  D00B               	goto	u7990
  7923                           
  7924                           ; BSR set to: 0
  7925  0012EA  51D7               	movf	_tel_posi& (0+255),w,b
  7926  0012EC  0D01               	mullw	1
  7927  0012EE  0EC4               	movlw	low _tel1
  7928  0012F0  24F3               	addwf	prodl,w,c
  7929  0012F2  6ED9               	movwf	fsr2l,c
  7930  0012F4  0E01               	movlw	high _tel1
  7931  0012F6  20F4               	addwfc	prodh,w,c
  7932  0012F8  6EDA               	movwf	fsr2h,c
  7933  0012FA  0E30               	movlw	48
  7934  0012FC  60DF               	cpfslt	indf2,c
  7935  0012FE  D0A4               	goto	l823
  7936  001300                     u7990:
  7937  001300  FFFF               	dw	65535	; assembler added errata NOP
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;tela_TELEFONES.h: 61: tel1[tel_posi] = 48;
  7941                           
  7942                           ; BSR set to: 0
  7943  001302  51D7               	movf	_tel_posi& (0+255),w,b
  7944  001304  0D01               	mullw	1
  7945  001306  0EC4               	movlw	low _tel1
  7946  001308  24F3               	addwf	prodl,w,c
  7947  00130A  6ED9               	movwf	fsr2l,c
  7948  00130C  0E01               	movlw	high _tel1
  7949  00130E  D071               	goto	L18
  7950  001310  FFFF               	dw	65535	; assembler added errata NOP
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;tela_TELEFONES.h: 66: line2[0] = '>';
  7954                           
  7955                           ; BSR set to: 0
  7956  001312  0E3E               	movlw	62
  7957  001314  0101               	movlb	1	; () banked
  7958  001316  6F7A               	movwf	_line2& (0+255),b
  7959                           
  7960                           ; BSR set to: 1
  7961                           ;tela_TELEFONES.h: 67: if (btPress(4)) {
  7962  001318  0E04               	movlw	4
  7963  00131A  EC6E  F01E         	call	_btPress
  7964  00131E  0900               	iorlw	0
  7965  001320  B4D8               	btfsc	status,2,c
  7966  001322  D003               	goto	l825
  7967                           
  7968                           ;tela_TELEFONES.h: 68: ajust_tel = 1;
  7969  001324  0E01               	movlw	1
  7970  001326  0100               	movlb	0	; () banked
  7971  001328  6FD6               	movwf	_ajust_tel& (0+255),b
  7972  00132A                     l825:
  7973  00132A  FFFF               	dw	65535	; assembler added errata NOP
  7974                           
  7975                           ;tela_TELEFONES.h: 69: }
  7976                           ;tela_TELEFONES.h: 70: if (ajust_tel) {
  7977  00132C  0100               	movlb	0	; () banked
  7978  00132E  51D6               	movf	_ajust_tel& (0+255),w,b
  7979  001330  B4D8               	btfsc	status,2,c
  7980  001332  D08A               	goto	l823
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;tela_TELEFONES.h: 71: blink(line2, (tel_posi + 6), (tel_posi + 6));
  7984  001334  0E7A               	movlw	low _line2
  7985  001336  6F80               	movwf	blink@line& (0+255),b
  7986  001338  0E01               	movlw	high _line2
  7987  00133A  6F81               	movwf	(blink@line+1)& (0+255),b
  7988  00133C  51D7               	movf	_tel_posi& (0+255),w,b
  7989  00133E  0F06               	addlw	6
  7990  001340  6F82               	movwf	blink@start& (0+255),b
  7991  001342  51D7               	movf	_tel_posi& (0+255),w,b
  7992  001344  0F06               	addlw	6
  7993  001346  6F83               	movwf	blink@end& (0+255),b
  7994  001348  ECD8  F03C         	call	_blink	;wreg free
  7995                           
  7996                           ;tela_TELEFONES.h: 72: if ((tel_posi + 2) > sizeof (tel2)) {
  7997  00134C  0100               	movlb	0	; () banked
  7998  00134E  51D7               	movf	_tel_posi& (0+255),w,b
  7999  001350  6FC5               	movwf	??_configuraTelefones& (0+255),b
  8000  001352  6BC6               	clrf	(??_configuraTelefones+1)& (0+255),b
  8001  001354  0E02               	movlw	2
  8002  001356  27C5               	addwf	??_configuraTelefones& (0+255),f,b
  8003  001358  0E00               	movlw	0
  8004  00135A  23C6               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8005  00135C  51C6               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8006  00135E  E104               	bnz	u8020
  8007  001360  0E0D               	movlw	13
  8008  001362  5DC5               	subwf	??_configuraTelefones& (0+255),w,b
  8009  001364  A0D8               	btfss	status,0,c
  8010  001366  D004               	goto	l827
  8011  001368                     u8020:
  8012                           
  8013                           ; BSR set to: 0
  8014                           ;tela_TELEFONES.h: 73: tel_posi = 0;
  8015  001368  0E00               	movlw	0
  8016  00136A  6FD7               	movwf	_tel_posi& (0+255),b
  8017                           
  8018                           ;tela_TELEFONES.h: 74: ajust_tel = 0;
  8019  00136C  0E00               	movlw	0
  8020  00136E  6FD6               	movwf	_ajust_tel& (0+255),b
  8021  001370                     l827:
  8022  001370  FFFF               	dw	65535	; assembler added errata NOP
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;tela_TELEFONES.h: 75: }
  8026                           ;tela_TELEFONES.h: 76: if (btPress(3)) {
  8027                           
  8028                           ; BSR set to: 0
  8029  001372  0E03               	movlw	3
  8030  001374  EC6E  F01E         	call	_btPress
  8031  001378  0900               	iorlw	0
  8032  00137A  B4D8               	btfsc	status,2,c
  8033  00137C  D00A               	goto	l828
  8034                           
  8035                           ;tela_TELEFONES.h: 77: tel2[tel_posi]++;
  8036  00137E  0100               	movlb	0	; () banked
  8037  001380  51D7               	movf	_tel_posi& (0+255),w,b
  8038  001382  0D01               	mullw	1
  8039  001384  0EB8               	movlw	low _tel2
  8040  001386  24F3               	addwf	prodl,w,c
  8041  001388  6ED9               	movwf	fsr2l,c
  8042  00138A  0E01               	movlw	high _tel2
  8043  00138C  20F4               	addwfc	prodh,w,c
  8044  00138E  6EDA               	movwf	fsr2h,c
  8045  001390  2ADF               	incf	indf2,f,c
  8046  001392                     l828:
  8047  001392  FFFF               	dw	65535	; assembler added errata NOP
  8048                           
  8049                           ;tela_TELEFONES.h: 78: }
  8050                           ;tela_TELEFONES.h: 79: if (btPress(2)) {
  8051                           
  8052                           ; BSR set to: 0
  8053  001394  0E02               	movlw	2
  8054  001396  EC6E  F01E         	call	_btPress
  8055  00139A  0900               	iorlw	0
  8056  00139C  B4D8               	btfsc	status,2,c
  8057  00139E  D00A               	goto	l829
  8058                           
  8059                           ;tela_TELEFONES.h: 80: tel2[tel_posi]--;
  8060  0013A0  0100               	movlb	0	; () banked
  8061  0013A2  51D7               	movf	_tel_posi& (0+255),w,b
  8062  0013A4  0D01               	mullw	1
  8063  0013A6  0EB8               	movlw	low _tel2
  8064  0013A8  24F3               	addwf	prodl,w,c
  8065  0013AA  6ED9               	movwf	fsr2l,c
  8066  0013AC  0E01               	movlw	high _tel2
  8067  0013AE  20F4               	addwfc	prodh,w,c
  8068  0013B0  6EDA               	movwf	fsr2h,c
  8069  0013B2  06DF               	decf	indf2,f,c
  8070  0013B4                     l829:
  8071  0013B4  FFFF               	dw	65535	; assembler added errata NOP
  8072                           
  8073                           ;tela_TELEFONES.h: 81: }
  8074                           ;tela_TELEFONES.h: 82: if ((tel2[tel_posi] > 57) | (tel2[tel_posi] < 48)) {
  8075  0013B6  0100               	movlb	0	; () banked
  8076  0013B8  51D7               	movf	_tel_posi& (0+255),w,b
  8077  0013BA  0D01               	mullw	1
  8078  0013BC  0EB8               	movlw	low _tel2
  8079  0013BE  24F3               	addwf	prodl,w,c
  8080  0013C0  6ED9               	movwf	fsr2l,c
  8081  0013C2  0E01               	movlw	high _tel2
  8082  0013C4  20F4               	addwfc	prodh,w,c
  8083  0013C6  6EDA               	movwf	fsr2h,c
  8084  0013C8  0E3A               	movlw	58
  8085  0013CA  60DF               	cpfslt	indf2,c
  8086  0013CC  D00B               	goto	u8060
  8087                           
  8088                           ; BSR set to: 0
  8089  0013CE  51D7               	movf	_tel_posi& (0+255),w,b
  8090  0013D0  0D01               	mullw	1
  8091  0013D2  0EB8               	movlw	low _tel2
  8092  0013D4  24F3               	addwf	prodl,w,c
  8093  0013D6  6ED9               	movwf	fsr2l,c
  8094  0013D8  0E01               	movlw	high _tel2
  8095  0013DA  20F4               	addwfc	prodh,w,c
  8096  0013DC  6EDA               	movwf	fsr2h,c
  8097  0013DE  0E30               	movlw	48
  8098  0013E0  60DF               	cpfslt	indf2,c
  8099  0013E2  D032               	goto	l823
  8100  0013E4                     u8060:
  8101  0013E4  FFFF               	dw	65535	; assembler added errata NOP
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;tela_TELEFONES.h: 83: tel2[tel_posi] = 48;
  8105                           
  8106                           ; BSR set to: 0
  8107  0013E6  51D7               	movf	_tel_posi& (0+255),w,b
  8108  0013E8  0D01               	mullw	1
  8109  0013EA  0EB8               	movlw	low _tel2
  8110  0013EC  24F3               	addwf	prodl,w,c
  8111  0013EE  6ED9               	movwf	fsr2l,c
  8112  0013F0  0E01               	movlw	high _tel2
  8113  0013F2                     L18:
  8114  0013F2  FFFF               	dw	65535	; assembler added errata NOP
  8115  0013F4  20F4               	addwfc	prodh,w,c
  8116  0013F6  6EDA               	movwf	fsr2h,c
  8117  0013F8  0E30               	movlw	48
  8118  0013FA  6EDF               	movwf	indf2,c
  8119                           
  8120                           ; BSR set to: 0
  8121                           ;tela_TELEFONES.h: 84: }
  8122                           ;tela_TELEFONES.h: 85: }
  8123                           ;tela_TELEFONES.h: 86: break;
  8124                           
  8125                           ; BSR set to: 0
  8126  0013FC  D025               	goto	l823
  8127  0013FE  FFFF               	dw	65535	; assembler added errata NOP
  8128                           
  8129                           ; BSR set to: 0
  8130                           ;tela_TELEFONES.h: 88: line3[0] = '>';
  8131                           
  8132                           ; BSR set to: 0
  8133  001400  0E3E               	movlw	62
  8134  001402  0101               	movlb	1	; () banked
  8135  001404  6F65               	movwf	_line3& (0+255),b
  8136                           
  8137                           ; BSR set to: 1
  8138                           ;tela_TELEFONES.h: 89: if (btPress(4) && intensidadeSinal != 'x') {
  8139  001406  0E04               	movlw	4
  8140  001408  EC6E  F01E         	call	_btPress
  8141  00140C  0900               	iorlw	0
  8142  00140E  B4D8               	btfsc	status,2,c
  8143  001410  D01B               	goto	l823
  8144  001412  0E78               	movlw	120
  8145  001414  0100               	movlb	0	; () banked
  8146  001416  19FF               	xorwf	_intensidadeSinal& (0+255),w,b
  8147  001418  B4D8               	btfsc	status,2,c
  8148  00141A  D016               	goto	l823
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;tela_TELEFONES.h: 90: gsmOcupado = 1;
  8152  00141C  0E01               	movlw	1
  8153  00141E  6FF4               	movwf	_gsmOcupado& (0+255),b
  8154                           
  8155                           ;tela_TELEFONES.h: 91: telefoneSelecionado = 0;
  8156  001420  0E00               	movlw	0
  8157  001422  6FF6               	movwf	_telefoneSelecionado& (0+255),b
  8158                           
  8159                           ; BSR set to: 0
  8160                           ;tela_TELEFONES.h: 92: }
  8161                           ;tela_TELEFONES.h: 93: break;
  8162  001424  D011               	goto	l823
  8163  001426  FFFF               	dw	65535	; assembler added errata NOP
  8164                           
  8165                           ; BSR set to: 0
  8166                           
  8167                           ; BSR set to: 0
  8168  001428  0E00               	movlw	0
  8169  00142A  6FDA               	movwf	_option_posi& (0+255),b
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;tela_TELEFONES.h: 97: }
  8173                           
  8174                           ;tela_TELEFONES.h: 96: break;
  8175  00142C  D00D               	goto	l823
  8176  00142E                     l813:
  8177  00142E  FFFF               	dw	65535	; assembler added errata NOP
  8178                           
  8179                           ; BSR set to: 0
  8180  001430  0100               	movlb	0	; () banked
  8181  001432  51DA               	movf	_option_posi& (0+255),w,b
  8182                           
  8183                           ; Switch size 1, requested type "space"
  8184                           ; Number of cases is 3, Range of values is 0 to 2
  8185                           ; switch strategies available:
  8186                           ; Name         Instructions Cycles
  8187                           ; simple_byte           10     6 (average)
  8188                           ;	Chosen strategy is simple_byte
  8189  001434  0A00               	xorlw	0	; case 0
  8190  001436  B4D8               	btfsc	status,2,c
  8191  001438  D6F9               	goto	l814
  8192  00143A  0A01               	xorlw	1	; case 1
  8193  00143C  B4D8               	btfsc	status,2,c
  8194  00143E  D768               	goto	l824
  8195  001440  0A03               	xorlw	3	; case 2
  8196  001442  B4D8               	btfsc	status,2,c
  8197  001444  D7DC               	goto	l833
  8198  001446  D7EF               	goto	l835
  8199  001448                     l823:
  8200  001448  FFFF               	dw	65535	; assembler added errata NOP
  8201                           
  8202                           ;tela_TELEFONES.h: 98: if (gsmOcupado) {
  8203                           
  8204                           ; BSR set to: 0
  8205  00144A  0100               	movlb	0	; () banked
  8206  00144C  51F4               	movf	_gsmOcupado& (0+255),w,b
  8207  00144E  A4D8               	btfss	status,2,c
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;tela_TELEFONES.h: 99: comunicarTeste();
  8211  001450  EC59  F00B         	call	_comunicarTeste	;wreg free
  8212  001454  0012               	return		;funcret
  8213  001456  FFFF               	dw	65535	; errata NOP
  8214  001458                     __end_of_configuraTelefones:
  8215                           	opt stack 0
  8216                           tblptru	equ	0xFF8
  8217                           tblptrh	equ	0xFF7
  8218                           tblptrl	equ	0xFF6
  8219                           tablat	equ	0xFF5
  8220                           prodh	equ	0xFF4
  8221                           prodl	equ	0xFF3
  8222                           postinc0	equ	0xFEE
  8223                           wreg	equ	0xFE8
  8224                           postdec1	equ	0xFE5
  8225                           fsr1l	equ	0xFE1
  8226                           indf2	equ	0xFDF
  8227                           postinc2	equ	0xFDE
  8228                           fsr2h	equ	0xFDA
  8229                           fsr2l	equ	0xFD9
  8230                           status	equ	0xFD8
  8231                           
  8232 ;; *************** function _comunicarTeste *****************
  8233 ;; Defined at:
  8234 ;;		line 51 in file "comunicacao.h"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;		None
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;		None
  8239 ;; Return value:  Size  Location     Type
  8240 ;;                  1    wreg      void 
  8241 ;; Registers used:
  8242 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8243 ;; Tracked objects:
  8244 ;;		On entry : 0/0
  8245 ;;		On exit  : 0/0
  8246 ;;		Unchanged: 0/0
  8247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8248 ;;      Params:         0       0       0       0       0       0       0
  8249 ;;      Locals:         0       8       0       0       0       0       0
  8250 ;;      Temps:          0       2       0       0       0       0       0
  8251 ;;      Totals:         0      10       0       0       0       0       0
  8252 ;;Total ram usage:       10 bytes
  8253 ;; Hardware stack levels used:    1
  8254 ;; Hardware stack levels required when called:    9
  8255 ;; This function calls:
  8256 ;;		_aguardaBuffer
  8257 ;;		_delay
  8258 ;;		_limparBuffer
  8259 ;;		_printf
  8260 ;;		_writeChar
  8261 ;; This function is called by:
  8262 ;;		_configuraTelefones
  8263 ;; This function uses a non-reentrant model
  8264 ;;
  8265                           
  8266                           	psect	text20
  8267  0016B2                     __ptext20:
  8268                           	opt stack 0
  8269  0016B2                     _comunicarTeste:
  8270                           	opt stack 0
  8271  0016B2  FFFF               	dw	65535	; assembler added errata NOP
  8272                           
  8273                           ;comunicacao.h: 52: switch (etapaComunicacao) {
  8274                           
  8275                           ;incstack = 0
  8276  0016B4  D106               	goto	l333
  8277  0016B6  FFFF               	dw	65535	; assembler added errata NOP
  8278                           
  8279                           ;comunicacao.h: 54: limparBuffer();
  8280  0016B8  ECF2  F03B         	call	_limparBuffer	;wreg free
  8281                           
  8282                           ;comunicacao.h: 55: printf("AT\r\n");
  8283  0016BC  0EE6               	movlw	low STR_6
  8284  0016BE  0100               	movlb	0	; () banked
  8285  0016C0  6FA1               	movwf	printf@f& (0+255),b
  8286  0016C2  0E7F               	movlw	high STR_6
  8287  0016C4  6FA2               	movwf	(printf@f+1)& (0+255),b
  8288  0016C6  ECE1  F01F         	call	_printf	;wreg free
  8289                           
  8290                           ;comunicacao.h: 56: etapaComunicacao++;
  8291  0016CA  4A51               	infsnz	_etapaComunicacao,f,c
  8292  0016CC  2A52               	incf	_etapaComunicacao+1,f,c
  8293                           
  8294                           ;comunicacao.h: 57: timerEtapaComunicacao = 5;
  8295  0016CE  0E05               	movlw	5
  8296  0016D0  0100               	movlb	0	; () banked
  8297  0016D2  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  8298                           
  8299                           ;comunicacao.h: 58: break;
  8300  0016D4  D111               	goto	l335
  8301  0016D6  FFFF               	dw	65535	; assembler added errata NOP
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;comunicacao.h: 60: if (aguardaBuffer("OK")) {
  8305                           
  8306                           ; BSR set to: 0
  8307  0016D8  0EFA               	movlw	low STR_7
  8308  0016DA  6F93               	movwf	aguardaBuffer@str& (0+255),b
  8309  0016DC  0E7F               	movlw	high STR_7
  8310  0016DE  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  8311  0016E0  ECF6  F03C         	call	_aguardaBuffer	;wreg free
  8312  0016E4  0900               	iorlw	0
  8313  0016E6  B4D8               	btfsc	status,2,c
  8314  0016E8  D00E               	goto	l337
  8315                           
  8316                           ;comunicacao.h: 61: limparBuffer();
  8317  0016EA  ECF2  F03B         	call	_limparBuffer	;wreg free
  8318                           
  8319                           ;comunicacao.h: 62: printf("AT+CMGF=1\r\n");
  8320  0016EE  0EEB               	movlw	low STR_8
  8321  0016F0  0100               	movlb	0	; () banked
  8322  0016F2  6FA1               	movwf	printf@f& (0+255),b
  8323  0016F4  0E7E               	movlw	high STR_8
  8324  0016F6  6FA2               	movwf	(printf@f+1)& (0+255),b
  8325  0016F8  ECE1  F01F         	call	_printf	;wreg free
  8326                           
  8327                           ;comunicacao.h: 63: etapaComunicacao++;
  8328  0016FC  4A51               	infsnz	_etapaComunicacao,f,c
  8329  0016FE  2A52               	incf	_etapaComunicacao+1,f,c
  8330                           
  8331                           ;comunicacao.h: 64: timerEtapaComunicacao = 5;
  8332  001700  0E05               	movlw	5
  8333  001702  0100               	movlb	0	; () banked
  8334  001704  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  8335  001706                     l337:
  8336  001706  FFFF               	dw	65535	; assembler added errata NOP
  8337                           
  8338                           ;comunicacao.h: 65: }
  8339                           ;comunicacao.h: 66: if (!timerEtapaComunicacao) {
  8340                           
  8341                           ; BSR set to: 0
  8342  001708  0100               	movlb	0	; () banked
  8343  00170A  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  8344  00170C  A4D8               	btfss	status,2,c
  8345  00170E  D0F4               	goto	l335
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;comunicacao.h: 67: etapaComunicacao = 0;
  8349  001710  0E00               	movlw	0
  8350  001712  6E52               	movwf	_etapaComunicacao+1,c
  8351  001714  0E00               	movlw	0
  8352  001716  6E51               	movwf	_etapaComunicacao,c
  8353                           
  8354                           ; BSR set to: 0
  8355                           ;comunicacao.h: 68: writeChar(0x1A);
  8356  001718  0E1A               	movlw	26
  8357  00171A  6F80               	movwf	writeChar@hex& (0+255),b
  8358  00171C  0E00               	movlw	0
  8359  00171E  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  8360  001720  ECAB  F03A         	call	_writeChar	;wreg free
  8361                           
  8362                           ;comunicacao.h: 69: }
  8363                           ;comunicacao.h: 70: break;
  8364  001724  D0E9               	goto	l335
  8365  001726  FFFF               	dw	65535	; assembler added errata NOP
  8366                           
  8367                           ;comunicacao.h: 72: if (aguardaBuffer("OK")) {
  8368  001728  0EFA               	movlw	low STR_7
  8369  00172A  0100               	movlb	0	; () banked
  8370  00172C  6F93               	movwf	aguardaBuffer@str& (0+255),b
  8371  00172E  0E7F               	movlw	high STR_7
  8372  001730  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  8373  001732  ECF6  F03C         	call	_aguardaBuffer	;wreg free
  8374  001736  0900               	iorlw	0
  8375  001738  B4D8               	btfsc	status,2,c
  8376  00173A  D020               	goto	l340
  8377                           
  8378                           ;comunicacao.h: 73: limparBuffer();
  8379  00173C  ECF2  F03B         	call	_limparBuffer	;wreg free
  8380                           
  8381                           ;comunicacao.h: 74: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : te
      +                          l2);
  8382  001740  0100               	movlb	0	; () banked
  8383  001742  51F6               	movf	_telefoneSelecionado& (0+255),w,b
  8384  001744  B4D8               	btfsc	status,2,c
  8385  001746  D004               	goto	l342
  8386                           
  8387                           ; BSR set to: 0
  8388  001748  0EB8               	movlw	low _tel2
  8389  00174A  6FBD               	movwf	_comunicarTeste$1201& (0+255),b
  8390  00174C  0E01               	movlw	high _tel2
  8391  00174E  D004               	goto	L21
  8392  001750                     l342:
  8393  001750  FFFF               	dw	65535	; assembler added errata NOP
  8394                           
  8395                           ; BSR set to: 0
  8396                           
  8397                           ; BSR set to: 0
  8398  001752  0EC4               	movlw	low _tel1
  8399  001754  6FBD               	movwf	_comunicarTeste$1201& (0+255),b
  8400  001756  0E01               	movlw	high _tel1
  8401  001758                     L21:
  8402  001758  FFFF               	dw	65535	; assembler added errata NOP
  8403  00175A  6FBE               	movwf	(_comunicarTeste$1201+1)& (0+255),b
  8404                           
  8405                           ; BSR set to: 0
  8406                           
  8407                           ; BSR set to: 0
  8408  00175C  0EFE               	movlw	low STR_10
  8409  00175E  6FA1               	movwf	printf@f& (0+255),b
  8410  001760  0E7D               	movlw	high STR_10
  8411  001762  6FA2               	movwf	(printf@f+1)& (0+255),b
  8412  001764  C0BD  F0A3         	movff	_comunicarTeste$1201,?_printf+2
  8413  001768  C0BE  F0A4         	movff	_comunicarTeste$1201+1,?_printf+3
  8414  00176C  ECE1  F01F         	call	_printf	;wreg free
  8415                           
  8416                           ;comunicacao.h: 75: timerEtapaComunicacao = 5;
  8417  001770  0E05               	movlw	5
  8418  001772  0100               	movlb	0	; () banked
  8419  001774  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  8420                           
  8421                           ; BSR set to: 0
  8422                           ;comunicacao.h: 76: etapaComunicacao++;
  8423  001776  4A51               	infsnz	_etapaComunicacao,f,c
  8424  001778  2A52               	incf	_etapaComunicacao+1,f,c
  8425                           
  8426                           ;comunicacao.h: 77: break;
  8427  00177A  D0BE               	goto	l335
  8428  00177C                     l340:
  8429  00177C  FFFF               	dw	65535	; assembler added errata NOP
  8430                           
  8431                           ;comunicacao.h: 78: }
  8432                           ;comunicacao.h: 79: if (!timerEtapaComunicacao) {
  8433                           
  8434                           ; BSR set to: 0
  8435  00177E  0100               	movlb	0	; () banked
  8436  001780  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  8437  001782  A4D8               	btfss	status,2,c
  8438  001784  D0B9               	goto	l335
  8439  001786  D097               	goto	l367
  8440  001788  FFFF               	dw	65535	; assembler added errata NOP
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;comunicacao.h: 84: if (aguardaBuffer(">")) {
  8444                           
  8445                           ; BSR set to: 0
  8446  00178A  0EFD               	movlw	low STR_11
  8447  00178C  6F93               	movwf	aguardaBuffer@str& (0+255),b
  8448  00178E  0E7F               	movlw	high STR_11
  8449  001790  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  8450  001792  ECF6  F03C         	call	_aguardaBuffer	;wreg free
  8451  001796  0900               	iorlw	0
  8452  001798  B4D8               	btfsc	status,2,c
  8453  00179A  D7F0               	goto	l340
  8454                           
  8455                           ;comunicacao.h: 85: limparBuffer();
  8456  00179C  ECF2  F03B         	call	_limparBuffer	;wreg free
  8457                           
  8458                           ;comunicacao.h: 86: printf("TESTE DE BOMBAS REALIZADO\r\nEM %02d:%02d:%02d %02d/%02d/%02
      +                          d\r\nJOCKEY: %s\r\nPRINCIPAL: %s\r\nCOMBUSTAO: %s\r\n",
  8459                           ;comunicacao.h: 87: _hor, _min, _sec, _dia, _mes, _ano, status_jockey == 1 ? "OK" : "FAL
      +                          HA", status_principal == 1 ? "OK" : "FALHA", status_estacionaria == 1 ? "OK" : "FALHA");
  8460  0017A0  0100               	movlb	0	; () banked
  8461  0017A2  05FA               	decf	_status_estacionaria& (0+255),w,b
  8462  0017A4  B4D8               	btfsc	status,2,c
  8463  0017A6  D004               	goto	l349
  8464                           
  8465                           ; BSR set to: 0
  8466  0017A8  0EDA               	movlw	low STR_14
  8467  0017AA  6FBF               	movwf	_comunicarTeste$1213& (0+255),b
  8468  0017AC  0E7F               	movlw	high STR_14
  8469  0017AE  D004               	goto	L19
  8470  0017B0                     l349:
  8471  0017B0  FFFF               	dw	65535	; assembler added errata NOP
  8472                           
  8473                           ; BSR set to: 0
  8474                           
  8475                           ; BSR set to: 0
  8476  0017B2  0EFA               	movlw	low STR_7
  8477  0017B4  6FBF               	movwf	_comunicarTeste$1213& (0+255),b
  8478  0017B6  0E7F               	movlw	high STR_7
  8479  0017B8                     L19:
  8480  0017B8  FFFF               	dw	65535	; assembler added errata NOP
  8481  0017BA  6FC0               	movwf	(_comunicarTeste$1213+1)& (0+255),b
  8482                           
  8483                           ; BSR set to: 0
  8484  0017BC  05FB               	decf	_status_principal& (0+255),w,b
  8485  0017BE  B4D8               	btfsc	status,2,c
  8486  0017C0  D004               	goto	l353
  8487                           
  8488                           ; BSR set to: 0
  8489  0017C2  0EDA               	movlw	low STR_14
  8490  0017C4  6FC1               	movwf	_comunicarTeste$1214& (0+255),b
  8491  0017C6  0E7F               	movlw	high STR_14
  8492  0017C8  D004               	goto	L20
  8493  0017CA                     l353:
  8494  0017CA  FFFF               	dw	65535	; assembler added errata NOP
  8495                           
  8496                           ; BSR set to: 0
  8497                           
  8498                           ; BSR set to: 0
  8499  0017CC  0EFA               	movlw	low STR_7
  8500  0017CE  6FC1               	movwf	_comunicarTeste$1214& (0+255),b
  8501  0017D0  0E7F               	movlw	high STR_7
  8502  0017D2                     L20:
  8503  0017D2  FFFF               	dw	65535	; assembler added errata NOP
  8504  0017D4  6FC2               	movwf	(_comunicarTeste$1214+1)& (0+255),b
  8505                           
  8506                           ; BSR set to: 0
  8507  0017D6  05FC               	decf	_status_jockey& (0+255),w,b
  8508  0017D8  B4D8               	btfsc	status,2,c
  8509  0017DA  D004               	goto	l357
  8510                           
  8511                           ; BSR set to: 0
  8512  0017DC  0EDA               	movlw	low STR_14
  8513  0017DE  6FC3               	movwf	_comunicarTeste$1215& (0+255),b
  8514  0017E0  0E7F               	movlw	high STR_14
  8515  0017E2  D004               	goto	L22
  8516  0017E4                     l357:
  8517  0017E4  FFFF               	dw	65535	; assembler added errata NOP
  8518                           
  8519                           ; BSR set to: 0
  8520                           
  8521                           ; BSR set to: 0
  8522  0017E6  0EFA               	movlw	low STR_7
  8523  0017E8  6FC3               	movwf	_comunicarTeste$1215& (0+255),b
  8524  0017EA  0E7F               	movlw	high STR_7
  8525  0017EC                     L22:
  8526  0017EC  FFFF               	dw	65535	; assembler added errata NOP
  8527  0017EE  6FC4               	movwf	(_comunicarTeste$1215+1)& (0+255),b
  8528                           
  8529                           ; BSR set to: 0
  8530                           
  8531                           ; BSR set to: 0
  8532  0017F0  0E41               	movlw	low STR_12
  8533  0017F2  6FA1               	movwf	printf@f& (0+255),b
  8534  0017F4  0E7C               	movlw	high STR_12
  8535  0017F6  6FA2               	movwf	(printf@f+1)& (0+255),b
  8536  0017F8  C0F1  F0A3         	movff	__hor,?_printf+2
  8537  0017FC  6BA4               	clrf	(?_printf+3)& (0+255),b
  8538  0017FE  C0F2  F0A5         	movff	__min,?_printf+4
  8539  001802  6BA6               	clrf	(?_printf+5)& (0+255),b
  8540  001804  C0F3  F0A7         	movff	__sec,?_printf+6
  8541  001808  6BA8               	clrf	(?_printf+7)& (0+255),b
  8542  00180A  C0F0  F0A9         	movff	__dia,?_printf+8
  8543  00180E  6BAA               	clrf	(?_printf+9)& (0+255),b
  8544  001810  C0EF  F0AB         	movff	__mes,?_printf+10
  8545  001814  6BAC               	clrf	(?_printf+11)& (0+255),b
  8546  001816  C0EE  F0AD         	movff	__ano,?_printf+12
  8547  00181A  6BAE               	clrf	(?_printf+13)& (0+255),b
  8548  00181C  C0C3  F0AF         	movff	_comunicarTeste$1215,?_printf+14
  8549  001820  C0C4  F0B0         	movff	_comunicarTeste$1215+1,?_printf+15
  8550  001824  C0C1  F0B1         	movff	_comunicarTeste$1214,?_printf+16
  8551  001828  C0C2  F0B2         	movff	_comunicarTeste$1214+1,?_printf+17
  8552  00182C  C0BF  F0B3         	movff	_comunicarTeste$1213,?_printf+18
  8553  001830  C0C0  F0B4         	movff	_comunicarTeste$1213+1,?_printf+19
  8554  001834  ECE1  F01F         	call	_printf	;wreg free
  8555                           
  8556                           ;comunicacao.h: 88: delay(200);
  8557  001838  0E00               	movlw	0
  8558  00183A  0100               	movlb	0	; () banked
  8559  00183C  6F81               	movwf	(delay@x+1)& (0+255),b
  8560  00183E  0EC8               	movlw	200
  8561  001840  6F80               	movwf	delay@x& (0+255),b
  8562  001842  ECBC  F03B         	call	_delay	;wreg free
  8563                           
  8564                           ;comunicacao.h: 89: writeChar(0x1A);
  8565  001846  0E1A               	movlw	26
  8566  001848  0100               	movlb	0	; () banked
  8567  00184A  6F80               	movwf	writeChar@hex& (0+255),b
  8568  00184C  0E00               	movlw	0
  8569  00184E  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  8570  001850  ECAB  F03A         	call	_writeChar	;wreg free
  8571                           
  8572                           ;comunicacao.h: 90: etapaComunicacao++;
  8573  001854  4A51               	infsnz	_etapaComunicacao,f,c
  8574  001856  2A52               	incf	_etapaComunicacao+1,f,c
  8575                           
  8576                           ;comunicacao.h: 91: timerEtapaComunicacao = 30;
  8577  001858  0E1E               	movlw	30
  8578  00185A  0100               	movlb	0	; () banked
  8579  00185C  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  8580                           
  8581                           ; BSR set to: 0
  8582  00185E  D78E               	goto	l340
  8583  001860  FFFF               	dw	65535	; assembler added errata NOP
  8584                           
  8585                           ; BSR set to: 0
  8586                           ;comunicacao.h: 98: if (aguardaBuffer("OK")) {
  8587                           
  8588                           ; BSR set to: 0
  8589  001862  0EFA               	movlw	low STR_7
  8590  001864  6F93               	movwf	aguardaBuffer@str& (0+255),b
  8591  001866  0E7F               	movlw	high STR_7
  8592  001868  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  8593  00186A  ECF6  F03C         	call	_aguardaBuffer	;wreg free
  8594  00186E  0900               	iorlw	0
  8595  001870  B4D8               	btfsc	status,2,c
  8596  001872  D011               	goto	l362
  8597                           
  8598                           ;comunicacao.h: 99: if (telefoneSelecionado == 0) {
  8599  001874  0100               	movlb	0	; () banked
  8600  001876  51F6               	movf	_telefoneSelecionado& (0+255),w,b
  8601  001878  A4D8               	btfss	status,2,c
  8602  00187A  D003               	goto	l363
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;comunicacao.h: 100: telefoneSelecionado = 1;
  8606  00187C  0E01               	movlw	1
  8607  00187E  6FF6               	movwf	_telefoneSelecionado& (0+255),b
  8608                           
  8609                           ;comunicacao.h: 101: } else {
  8610  001880  D005               	goto	l364
  8611  001882                     l363:
  8612  001882  FFFF               	dw	65535	; assembler added errata NOP
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;comunicacao.h: 102: telefoneSelecionado = 0;
  8616                           
  8617                           ; BSR set to: 0
  8618  001884  0E00               	movlw	0
  8619  001886  6FF6               	movwf	_telefoneSelecionado& (0+255),b
  8620                           
  8621                           ;comunicacao.h: 103: gsmOcupado = 0;
  8622  001888  0E00               	movlw	0
  8623  00188A  6FF4               	movwf	_gsmOcupado& (0+255),b
  8624  00188C                     l364:
  8625  00188C  FFFF               	dw	65535	; assembler added errata NOP
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;comunicacao.h: 104: }
  8629                           ;comunicacao.h: 105: etapaComunicacao = 0;
  8630  00188E  0E00               	movlw	0
  8631  001890  6E52               	movwf	_etapaComunicacao+1,c
  8632  001892  0E00               	movlw	0
  8633  001894  6E51               	movwf	_etapaComunicacao,c
  8634  001896                     l362:
  8635  001896  FFFF               	dw	65535	; assembler added errata NOP
  8636                           
  8637                           ;comunicacao.h: 106: }
  8638                           ;comunicacao.h: 107: if (aguardaBuffer("ERROR")) {
  8639                           
  8640                           ; BSR set to: 0
  8641  001898  0EE0               	movlw	low STR_20
  8642  00189A  0100               	movlb	0	; () banked
  8643  00189C  6F93               	movwf	aguardaBuffer@str& (0+255),b
  8644  00189E  0E7F               	movlw	high STR_20
  8645  0018A0  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  8646  0018A2  ECF6  F03C         	call	_aguardaBuffer	;wreg free
  8647  0018A6  0900               	iorlw	0
  8648  0018A8  B4D8               	btfsc	status,2,c
  8649  0018AA  D768               	goto	l340
  8650                           
  8651                           ;comunicacao.h: 108: etapaComunicacao = 0;
  8652  0018AC  0E00               	movlw	0
  8653  0018AE  6E52               	movwf	_etapaComunicacao+1,c
  8654  0018B0  0E00               	movlw	0
  8655  0018B2  6E51               	movwf	_etapaComunicacao,c
  8656  0018B4  D763               	goto	l340
  8657  0018B6                     l367:
  8658  0018B6  FFFF               	dw	65535	; assembler added errata NOP
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;comunicacao.h: 115: etapaComunicacao = 0;
  8662                           
  8663                           ; BSR set to: 0
  8664  0018B8  0E00               	movlw	0
  8665  0018BA  6E52               	movwf	_etapaComunicacao+1,c
  8666  0018BC  0E00               	movlw	0
  8667  0018BE  6E51               	movwf	_etapaComunicacao,c
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;comunicacao.h: 118: }
  8671                           
  8672                           ;comunicacao.h: 116: break;
  8673  0018C0  D01B               	goto	l335
  8674  0018C2                     l333:
  8675  0018C2  FFFF               	dw	65535	; assembler added errata NOP
  8676                           
  8677                           ; BSR set to: 0
  8678  0018C4  C051  F0BB         	movff	_etapaComunicacao,??_comunicarTeste
  8679  0018C8  C052  F0BC         	movff	_etapaComunicacao+1,??_comunicarTeste+1
  8680                           
  8681                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8682                           ; Switch size 1, requested type "space"
  8683                           ; Number of cases is 1, Range of values is 0 to 0
  8684                           ; switch strategies available:
  8685                           ; Name         Instructions Cycles
  8686                           ; simple_byte            4     3 (average)
  8687                           ;	Chosen strategy is simple_byte
  8688  0018CC  0100               	movlb	0	; () banked
  8689  0018CE  51BC               	movf	(??_comunicarTeste+1)& (0+255),w,b
  8690  0018D0  0A00               	xorlw	0	; case 0
  8691  0018D2  A4D8               	btfss	status,2,c
  8692  0018D4  D7F0               	goto	l367
  8693                           
  8694                           ; BSR set to: 0
  8695                           ; Switch size 1, requested type "space"
  8696                           ; Number of cases is 5, Range of values is 0 to 4
  8697                           ; switch strategies available:
  8698                           ; Name         Instructions Cycles
  8699                           ; simple_byte           16     9 (average)
  8700                           ;	Chosen strategy is simple_byte
  8701  0018D6  51BB               	movf	??_comunicarTeste& (0+255),w,b
  8702  0018D8  0A00               	xorlw	0	; case 0
  8703  0018DA  B4D8               	btfsc	status,2,c
  8704  0018DC  D6EC               	goto	l334
  8705  0018DE  0A01               	xorlw	1	; case 1
  8706  0018E0  B4D8               	btfsc	status,2,c
  8707  0018E2  D6F9               	goto	l336
  8708  0018E4  0A03               	xorlw	3	; case 2
  8709  0018E6  B4D8               	btfsc	status,2,c
  8710  0018E8  D71E               	goto	l339
  8711  0018EA  0A01               	xorlw	1	; case 3
  8712  0018EC  B4D8               	btfsc	status,2,c
  8713  0018EE  D74C               	goto	l346
  8714  0018F0  0A07               	xorlw	7	; case 4
  8715  0018F2  B4D8               	btfsc	status,2,c
  8716  0018F4  D7B5               	goto	l361
  8717  0018F6  D7DF               	goto	l367
  8718  0018F8                     l335:
  8719  0018F8  FFFF               	dw	65535	; assembler added errata NOP
  8720                           
  8721                           ; BSR set to: 0
  8722  0018FA  0012               	return		;funcret
  8723  0018FC  FFFF               	dw	65535	; errata NOP
  8724  0018FE                     __end_of_comunicarTeste:
  8725                           	opt stack 0
  8726                           tblptru	equ	0xFF8
  8727                           tblptrh	equ	0xFF7
  8728                           tblptrl	equ	0xFF6
  8729                           tablat	equ	0xFF5
  8730                           prodh	equ	0xFF4
  8731                           prodl	equ	0xFF3
  8732                           postinc0	equ	0xFEE
  8733                           wreg	equ	0xFE8
  8734                           postdec1	equ	0xFE5
  8735                           fsr1l	equ	0xFE1
  8736                           indf2	equ	0xFDF
  8737                           postinc2	equ	0xFDE
  8738                           fsr2h	equ	0xFDA
  8739                           fsr2l	equ	0xFD9
  8740                           status	equ	0xFD8
  8741                           
  8742 ;; *************** function _writeChar *****************
  8743 ;; Defined at:
  8744 ;;		line 21 in file "serial.h"
  8745 ;; Parameters:    Size  Location     Type
  8746 ;;  hex             2    0[BANK0 ] PTR unsigned char 
  8747 ;;		 -> RAM(1535), 
  8748 ;; Auto vars:     Size  Location     Type
  8749 ;;		None
  8750 ;; Return value:  Size  Location     Type
  8751 ;;                  1    wreg      void 
  8752 ;; Registers used:
  8753 ;;		None
  8754 ;; Tracked objects:
  8755 ;;		On entry : 0/0
  8756 ;;		On exit  : 0/0
  8757 ;;		Unchanged: 0/0
  8758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8759 ;;      Params:         0       2       0       0       0       0       0
  8760 ;;      Locals:         0       0       0       0       0       0       0
  8761 ;;      Temps:          0       0       0       0       0       0       0
  8762 ;;      Totals:         0       2       0       0       0       0       0
  8763 ;;Total ram usage:        2 bytes
  8764 ;; Hardware stack levels used:    1
  8765 ;; Hardware stack levels required when called:    6
  8766 ;; This function calls:
  8767 ;;		Nothing
  8768 ;; This function is called by:
  8769 ;;		_getSinalSIM800L
  8770 ;;		_comunicarTeste
  8771 ;; This function uses a non-reentrant model
  8772 ;;
  8773                           
  8774                           	psect	text21
  8775  007556                     __ptext21:
  8776                           	opt stack 0
  8777  007556                     _writeChar:
  8778                           	opt stack 0
  8779  007556  FFFF               	dw	65535	; assembler added errata NOP
  8780                           
  8781                           ;serial.h: 22: while (!TXSTAbits.TRMT);
  8782                           
  8783                           ;incstack = 0
  8784  007558  A2AC               	btfss	4012,1,c	;volatile
  8785  00755A  D7FD               	goto	_writeChar
  8786                           
  8787                           ;serial.h: 23: TXREG = hex;
  8788  00755C  C080  FFAD         	movff	writeChar@hex,4013	;volatile
  8789  007560  0012               	return		;funcret
  8790  007562  FFFF               	dw	65535	; errata NOP
  8791  007564                     __end_of_writeChar:
  8792                           	opt stack 0
  8793                           tblptru	equ	0xFF8
  8794                           tblptrh	equ	0xFF7
  8795                           tblptrl	equ	0xFF6
  8796                           tablat	equ	0xFF5
  8797                           prodh	equ	0xFF4
  8798                           prodl	equ	0xFF3
  8799                           postinc0	equ	0xFEE
  8800                           wreg	equ	0xFE8
  8801                           postdec1	equ	0xFE5
  8802                           fsr1l	equ	0xFE1
  8803                           indf2	equ	0xFDF
  8804                           postinc2	equ	0xFDE
  8805                           fsr2h	equ	0xFDA
  8806                           fsr2l	equ	0xFD9
  8807                           status	equ	0xFD8
  8808                           
  8809 ;; *************** function _printf *****************
  8810 ;; Defined at:
  8811 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;  f               2   33[BANK0 ] PTR const unsigned char 
  8814 ;;		 -> STR_37(7), STR_36(11), STR_29(104), STR_28(63), 
  8815 ;;		 -> STR_26(18), STR_24(12), STR_23(7), STR_21(5), 
  8816 ;;		 -> STR_12(104), STR_10(18), STR_8(12), STR_6(5), 
  8817 ;;		 -> STR_3(9), 
  8818 ;; Auto vars:     Size  Location     Type
  8819 ;;  pb              4   55[BANK0 ] struct __prbuf
  8820 ;;  ap              2   53[BANK0 ] PTR void [1]
  8821 ;;		 -> ?_sprintf(2), ?_printf(2), 
  8822 ;; Return value:  Size  Location     Type
  8823 ;;                  2   33[BANK0 ] int 
  8824 ;; Registers used:
  8825 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8826 ;; Tracked objects:
  8827 ;;		On entry : 0/0
  8828 ;;		On exit  : 0/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8831 ;;      Params:         0      20       0       0       0       0       0
  8832 ;;      Locals:         0       6       0       0       0       0       0
  8833 ;;      Temps:          0       0       0       0       0       0       0
  8834 ;;      Totals:         0      26       0       0       0       0       0
  8835 ;;Total ram usage:       26 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    8
  8838 ;; This function calls:
  8839 ;;		__doprnt
  8840 ;; This function is called by:
  8841 ;;		_getSinalSIM800L
  8842 ;;		_comunicarTeste
  8843 ;;		_enviaSMS
  8844 ;; This function uses a non-reentrant model
  8845 ;;
  8846                           
  8847                           	psect	text22
  8848  003FC2                     __ptext22:
  8849                           	opt stack 0
  8850  003FC2                     _printf:
  8851                           	opt stack 0
  8852  003FC2  FFFF               	dw	65535	; assembler added errata NOP
  8853                           
  8854                           ;incstack = 0
  8855  003FC4  0E00               	movlw	0
  8856  003FC6  0100               	movlb	0	; () banked
  8857  003FC8  6FB7               	movwf	printf@pb& (0+255),b
  8858  003FCA  0E00               	movlw	0
  8859  003FCC  6FB8               	movwf	(printf@pb+1)& (0+255),b
  8860  003FCE  0E76               	movlw	low _putch
  8861  003FD0  6FB9               	movwf	(printf@pb+2)& (0+255),b
  8862  003FD2  0E75               	movlw	high _putch
  8863  003FD4  6FBA               	movwf	(printf@pb+3)& (0+255),b
  8864  003FD6  0EA3               	movlw	low (?_printf+2)
  8865  003FD8  6FB5               	movwf	printf@ap& (0+255),b
  8866  003FDA  0E00               	movlw	high (?_printf+2)
  8867  003FDC  6FB6               	movwf	(printf@ap+1)& (0+255),b
  8868                           
  8869                           ; BSR set to: 0
  8870                           ;	Return value of _printf is never used
  8871  003FDE  0EB7               	movlw	low printf@pb
  8872  003FE0  6F8C               	movwf	__doprnt@pb& (0+255),b
  8873  003FE2  0E00               	movlw	high printf@pb
  8874  003FE4  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  8875  003FE6  C0A1  F08E         	movff	printf@f,__doprnt@f
  8876  003FEA  C0A2  F08F         	movff	printf@f+1,__doprnt@f+1
  8877  003FEE  0EB5               	movlw	low printf@ap
  8878  003FF0  6F90               	movwf	__doprnt@ap& (0+255),b
  8879  003FF2  0E00               	movlw	high printf@ap
  8880  003FF4  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  8881  003FF6  EC91  F000         	call	__doprnt	;wreg free
  8882  003FFA  0012               	return		;funcret
  8883  003FFC  FFFF               	dw	65535	; errata NOP
  8884  003FFE                     __end_of_printf:
  8885                           	opt stack 0
  8886                           tblptru	equ	0xFF8
  8887                           tblptrh	equ	0xFF7
  8888                           tblptrl	equ	0xFF6
  8889                           tablat	equ	0xFF5
  8890                           prodh	equ	0xFF4
  8891                           prodl	equ	0xFF3
  8892                           postinc0	equ	0xFEE
  8893                           wreg	equ	0xFE8
  8894                           postdec1	equ	0xFE5
  8895                           fsr1l	equ	0xFE1
  8896                           indf2	equ	0xFDF
  8897                           postinc2	equ	0xFDE
  8898                           fsr2h	equ	0xFDA
  8899                           fsr2l	equ	0xFD9
  8900                           status	equ	0xFD8
  8901                           
  8902 ;; *************** function _limparBuffer *****************
  8903 ;; Defined at:
  8904 ;;		line 34 in file "serial.h"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;		None
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;		None
  8909 ;; Return value:  Size  Location     Type
  8910 ;;                  1    wreg      void 
  8911 ;; Registers used:
  8912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8913 ;; Tracked objects:
  8914 ;;		On entry : 0/0
  8915 ;;		On exit  : 0/0
  8916 ;;		Unchanged: 0/0
  8917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8918 ;;      Params:         0       0       0       0       0       0       0
  8919 ;;      Locals:         0       0       0       0       0       0       0
  8920 ;;      Temps:          0       0       0       0       0       0       0
  8921 ;;      Totals:         0       0       0       0       0       0       0
  8922 ;;Total ram usage:        0 bytes
  8923 ;; Hardware stack levels used:    1
  8924 ;; Hardware stack levels required when called:    7
  8925 ;; This function calls:
  8926 ;;		_delay
  8927 ;;		_memset
  8928 ;; This function is called by:
  8929 ;;		_getSinalSIM800L
  8930 ;;		_comunicarTeste
  8931 ;;		_enviaSMS
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           	psect	text23
  8936  0077E4                     __ptext23:
  8937                           	opt stack 0
  8938  0077E4                     _limparBuffer:
  8939                           	opt stack 0
  8940  0077E4  FFFF               	dw	65535	; assembler added errata NOP
  8941                           
  8942                           ;serial.h: 35: cbf = 0;
  8943                           
  8944                           ;incstack = 0
  8945  0077E6  0E00               	movlw	0
  8946  0077E8  6E64               	movwf	_cbf,c
  8947                           
  8948                           ;serial.h: 36: memset(bufferSerial, 0, sizeof (bufferSerial));
  8949  0077EA  0E14               	movlw	low _bufferSerial
  8950  0077EC  0100               	movlb	0	; () banked
  8951  0077EE  6F80               	movwf	memset@p1& (0+255),b
  8952  0077F0  0E01               	movlw	high _bufferSerial
  8953  0077F2  6F81               	movwf	(memset@p1+1)& (0+255),b
  8954  0077F4  0E00               	movlw	0
  8955  0077F6  6F83               	movwf	(memset@c+1)& (0+255),b
  8956  0077F8  0E00               	movlw	0
  8957  0077FA  6F82               	movwf	memset@c& (0+255),b
  8958  0077FC  0E00               	movlw	0
  8959  0077FE  6F85               	movwf	(memset@n+1)& (0+255),b
  8960  007800  0E3C               	movlw	60
  8961  007802  6F84               	movwf	memset@n& (0+255),b
  8962  007804  EC7F  F03C         	call	_memset	;wreg free
  8963                           
  8964                           ;serial.h: 37: delay(150);
  8965  007808  0E00               	movlw	0
  8966  00780A  0100               	movlb	0	; () banked
  8967  00780C  6F81               	movwf	(delay@x+1)& (0+255),b
  8968  00780E  0E96               	movlw	150
  8969  007810  6F80               	movwf	delay@x& (0+255),b
  8970  007812  ECBC  F03B         	call	_delay	;wreg free
  8971  007816  0012               	return		;funcret
  8972  007818  FFFF               	dw	65535	; errata NOP
  8973  00781A                     __end_of_limparBuffer:
  8974                           	opt stack 0
  8975                           tblptru	equ	0xFF8
  8976                           tblptrh	equ	0xFF7
  8977                           tblptrl	equ	0xFF6
  8978                           tablat	equ	0xFF5
  8979                           prodh	equ	0xFF4
  8980                           prodl	equ	0xFF3
  8981                           postinc0	equ	0xFEE
  8982                           wreg	equ	0xFE8
  8983                           postdec1	equ	0xFE5
  8984                           fsr1l	equ	0xFE1
  8985                           indf2	equ	0xFDF
  8986                           postinc2	equ	0xFDE
  8987                           fsr2h	equ	0xFDA
  8988                           fsr2l	equ	0xFD9
  8989                           status	equ	0xFD8
  8990                           
  8991 ;; *************** function _memset *****************
  8992 ;; Defined at:
  8993 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  8994 ;; Parameters:    Size  Location     Type
  8995 ;;  p1              2    0[BANK0 ] PTR void 
  8996 ;;		 -> bufferAUX(20), bufferSerial(60), 
  8997 ;;  c               2    2[BANK0 ] int 
  8998 ;;  n               2    4[BANK0 ] unsigned int 
  8999 ;; Auto vars:     Size  Location     Type
  9000 ;;  p               2    6[BANK0 ] PTR unsigned char 
  9001 ;;		 -> bufferAUX(20), bufferSerial(60), 
  9002 ;; Return value:  Size  Location     Type
  9003 ;;                  2    0[BANK0 ] PTR void 
  9004 ;; Registers used:
  9005 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9006 ;; Tracked objects:
  9007 ;;		On entry : 0/0
  9008 ;;		On exit  : 0/0
  9009 ;;		Unchanged: 0/0
  9010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9011 ;;      Params:         0       6       0       0       0       0       0
  9012 ;;      Locals:         0       2       0       0       0       0       0
  9013 ;;      Temps:          0       0       0       0       0       0       0
  9014 ;;      Totals:         0       8       0       0       0       0       0
  9015 ;;Total ram usage:        8 bytes
  9016 ;; Hardware stack levels used:    1
  9017 ;; Hardware stack levels required when called:    6
  9018 ;; This function calls:
  9019 ;;		Nothing
  9020 ;; This function is called by:
  9021 ;;		_limparBuffer
  9022 ;;		_getSerial
  9023 ;; This function uses a non-reentrant model
  9024 ;;
  9025                           
  9026                           	psect	text24
  9027  0078FE                     __ptext24:
  9028                           	opt stack 0
  9029  0078FE                     _memset:
  9030                           	opt stack 0
  9031  0078FE  FFFF               	dw	65535	; assembler added errata NOP
  9032                           
  9033                           ;incstack = 0
  9034  007900  C080  F086         	movff	memset@p1,memset@p
  9035  007904  C081  F087         	movff	memset@p1+1,memset@p+1
  9036  007908  D00A               	goto	l1544
  9037  00790A  FFFF               	dw	65535	; assembler added errata NOP
  9038  00790C                     l5054:
  9039  00790C  C086  FFD9         	movff	memset@p,fsr2l
  9040  007910  C087  FFDA         	movff	memset@p+1,fsr2h
  9041  007914  C082  FFDF         	movff	memset@c,indf2
  9042  007918  0100               	movlb	0	; () banked
  9043  00791A  4B86               	infsnz	memset@p& (0+255),f,b
  9044  00791C  2B87               	incf	(memset@p+1)& (0+255),f,b
  9045  00791E                     l1544:
  9046  00791E  FFFF               	dw	65535	; assembler added errata NOP
  9047                           
  9048                           ; BSR set to: 0
  9049  007920  0100               	movlb	0	; () banked
  9050  007922  0784               	decf	memset@n& (0+255),f,b
  9051  007924  A0D8               	btfss	status,0,c
  9052  007926  0785               	decf	(memset@n+1)& (0+255),f,b
  9053  007928  2984               	incf	memset@n& (0+255),w,b
  9054  00792A  E1F0               	bnz	l5054
  9055  00792C  2985               	incf	(memset@n+1)& (0+255),w,b
  9056  00792E  B4D8               	btfsc	status,2,c
  9057                           
  9058                           ; BSR set to: 0
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;	Return value of _memset is never used
  9062  007930  0012               	return		;funcret
  9063  007932  FFFF               	dw	65535	; assembler added errata NOP
  9064  007934  D7EA               	goto	l1545
  9065  007936  FFFF               	dw	65535	; errata NOP
  9066  007938                     __end_of_memset:
  9067                           	opt stack 0
  9068                           tblptru	equ	0xFF8
  9069                           tblptrh	equ	0xFF7
  9070                           tblptrl	equ	0xFF6
  9071                           tablat	equ	0xFF5
  9072                           prodh	equ	0xFF4
  9073                           prodl	equ	0xFF3
  9074                           postinc0	equ	0xFEE
  9075                           wreg	equ	0xFE8
  9076                           postdec1	equ	0xFE5
  9077                           fsr1l	equ	0xFE1
  9078                           indf2	equ	0xFDF
  9079                           postinc2	equ	0xFDE
  9080                           fsr2h	equ	0xFDA
  9081                           fsr2l	equ	0xFD9
  9082                           status	equ	0xFD8
  9083                           
  9084 ;; *************** function _aguardaBuffer *****************
  9085 ;; Defined at:
  9086 ;;		line 26 in file "serial.h"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;  str             2   19[BANK0 ] PTR unsigned char 
  9089 ;;		 -> STR_27(2), STR_25(3), STR_22(3), STR_20(6), 
  9090 ;;		 -> STR_19(3), STR_11(2), STR_9(3), STR_7(3), 
  9091 ;;		 -> STR_4(7), 
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;		None
  9094 ;; Return value:  Size  Location     Type
  9095 ;;                  1    wreg      unsigned char 
  9096 ;; Registers used:
  9097 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9098 ;; Tracked objects:
  9099 ;;		On entry : 0/0
  9100 ;;		On exit  : 0/0
  9101 ;;		Unchanged: 0/0
  9102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9103 ;;      Params:         0       2       0       0       0       0       0
  9104 ;;      Locals:         0       0       0       0       0       0       0
  9105 ;;      Temps:          0       0       0       0       0       0       0
  9106 ;;      Totals:         0       2       0       0       0       0       0
  9107 ;;Total ram usage:        2 bytes
  9108 ;; Hardware stack levels used:    1
  9109 ;; Hardware stack levels required when called:    8
  9110 ;; This function calls:
  9111 ;;		_delay
  9112 ;;		_strstr
  9113 ;; This function is called by:
  9114 ;;		_getSinalSIM800L
  9115 ;;		_comunicarTeste
  9116 ;;		_enviaSMS
  9117 ;; This function uses a non-reentrant model
  9118 ;;
  9119                           
  9120                           	psect	text25
  9121  0079EC                     __ptext25:
  9122                           	opt stack 0
  9123  0079EC                     _aguardaBuffer:
  9124                           	opt stack 0
  9125  0079EC  FFFF               	dw	65535	; assembler added errata NOP
  9126                           
  9127                           ;serial.h: 27: if (strstr(bufferSerial, str) != (0)) {
  9128                           
  9129                           ; BSR set to: 0
  9130                           ;incstack = 0
  9131  0079EE  0E14               	movlw	low _bufferSerial
  9132  0079F0  0100               	movlb	0	; () banked
  9133  0079F2  6F8F               	movwf	strstr@s1& (0+255),b
  9134  0079F4  0E01               	movlw	high _bufferSerial
  9135  0079F6  6F90               	movwf	(strstr@s1+1)& (0+255),b
  9136  0079F8  C093  F091         	movff	aguardaBuffer@str,strstr@s2
  9137  0079FC  C094  F092         	movff	aguardaBuffer@str+1,strstr@s2+1
  9138  007A00  EC53  F01C         	call	_strstr	;wreg free
  9139  007A04  0100               	movlb	0	; () banked
  9140  007A06  518F               	movf	?_strstr& (0+255),w,b
  9141  007A08  1190               	iorwf	(?_strstr+1)& (0+255),w,b
  9142  007A0A  B4D8               	btfsc	status,2,c
  9143  007A0C  D008               	goto	l273
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;serial.h: 28: delay(150);
  9147  007A0E  0E00               	movlw	0
  9148  007A10  6F81               	movwf	(delay@x+1)& (0+255),b
  9149  007A12  0E96               	movlw	150
  9150  007A14  6F80               	movwf	delay@x& (0+255),b
  9151  007A16  ECBC  F03B         	call	_delay	;wreg free
  9152                           
  9153                           ;serial.h: 29: return 1;
  9154  007A1A  0E01               	movlw	1
  9155  007A1C  D002               	goto	l5202
  9156  007A1E                     l273:
  9157  007A1E  FFFF               	dw	65535	; assembler added errata NOP
  9158                           
  9159                           ;serial.h: 30: }
  9160                           ;serial.h: 31: return 0;
  9161  007A20  0E00               	movlw	0
  9162  007A22                     l5202:
  9163  007A22  FFFF               	dw	65535	; assembler added errata NOP
  9164  007A24  0012               	return		;funcret
  9165  007A26  FFFF               	dw	65535	; errata NOP
  9166  007A28                     __end_of_aguardaBuffer:
  9167                           	opt stack 0
  9168                           tblptru	equ	0xFF8
  9169                           tblptrh	equ	0xFF7
  9170                           tblptrl	equ	0xFF6
  9171                           tablat	equ	0xFF5
  9172                           prodh	equ	0xFF4
  9173                           prodl	equ	0xFF3
  9174                           postinc0	equ	0xFEE
  9175                           wreg	equ	0xFE8
  9176                           postdec1	equ	0xFE5
  9177                           fsr1l	equ	0xFE1
  9178                           indf2	equ	0xFDF
  9179                           postinc2	equ	0xFDE
  9180                           fsr2h	equ	0xFDA
  9181                           fsr2l	equ	0xFD9
  9182                           status	equ	0xFD8
  9183                           
  9184 ;; *************** function _strstr *****************
  9185 ;; Defined at:
  9186 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strstr.c"
  9187 ;; Parameters:    Size  Location     Type
  9188 ;;  s1              2   15[BANK0 ] PTR const unsigned char 
  9189 ;;		 -> NULL(0), bufferSerial(60), 
  9190 ;;  s2              2   17[BANK0 ] PTR const unsigned char 
  9191 ;;		 -> STR_27(2), STR_25(3), STR_22(3), STR_20(6), 
  9192 ;;		 -> STR_19(3), STR_11(2), STR_9(3), STR_7(3), 
  9193 ;;		 -> STR_5(7), STR_4(7), 
  9194 ;; Auto vars:     Size  Location     Type
  9195 ;;		None
  9196 ;; Return value:  Size  Location     Type
  9197 ;;                  2   15[BANK0 ] PTR unsigned char 
  9198 ;; Registers used:
  9199 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9200 ;; Tracked objects:
  9201 ;;		On entry : 0/0
  9202 ;;		On exit  : 0/0
  9203 ;;		Unchanged: 0/0
  9204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9205 ;;      Params:         0       4       0       0       0       0       0
  9206 ;;      Locals:         0       0       0       0       0       0       0
  9207 ;;      Temps:          0       0       0       0       0       0       0
  9208 ;;      Totals:         0       4       0       0       0       0       0
  9209 ;;Total ram usage:        4 bytes
  9210 ;; Hardware stack levels used:    1
  9211 ;; Hardware stack levels required when called:    7
  9212 ;; This function calls:
  9213 ;;		_strchr
  9214 ;;		_strlen
  9215 ;;		_strncmp
  9216 ;; This function is called by:
  9217 ;;		_aguardaBuffer
  9218 ;;		_getSerial
  9219 ;; This function uses a non-reentrant model
  9220 ;;
  9221                           
  9222                           	psect	text26
  9223  0038A6                     __ptext26:
  9224                           	opt stack 0
  9225  0038A6                     _strstr:
  9226                           	opt stack 0
  9227  0038A6  FFFF               	dw	65535	; assembler added errata NOP
  9228                           
  9229                           ;incstack = 0
  9230  0038A8  D035               	goto	l1698
  9231  0038AA  FFFF               	dw	65535	; assembler added errata NOP
  9232  0038AC  C08F  F086         	movff	strstr@s1,strncmp@s1
  9233  0038B0  C090  F087         	movff	strstr@s1+1,strncmp@s1+1
  9234  0038B4  C091  F088         	movff	strstr@s2,strncmp@s2
  9235  0038B8  C092  F089         	movff	strstr@s2+1,strncmp@s2+1
  9236  0038BC  C091  F080         	movff	strstr@s2,strlen@s
  9237  0038C0  C092  F081         	movff	strstr@s2+1,strlen@s+1
  9238  0038C4  EC0B  F01F         	call	_strlen	;wreg free
  9239  0038C8  C080  F08A         	movff	?_strlen,strncmp@len
  9240  0038CC  C081  F08B         	movff	?_strlen+1,strncmp@len+1
  9241  0038D0  ECB9  F01B         	call	_strncmp	;wreg free
  9242  0038D4  0100               	movlb	0	; () banked
  9243  0038D6  5186               	movf	?_strncmp& (0+255),w,b
  9244  0038D8  1187               	iorwf	(?_strncmp+1)& (0+255),w,b
  9245  0038DA  A4D8               	btfss	status,2,c
  9246  0038DC  D005               	goto	l1700
  9247                           
  9248                           ; BSR set to: 0
  9249  0038DE  C08F  F08F         	movff	strstr@s1,?_strstr
  9250  0038E2  C090  F090         	movff	strstr@s1+1,?_strstr+1
  9251                           
  9252                           ; BSR set to: 0
  9253  0038E6  D028               	goto	l5050
  9254  0038E8                     l1700:
  9255  0038E8  FFFF               	dw	65535	; assembler added errata NOP
  9256                           
  9257                           ; BSR set to: 0
  9258                           
  9259                           ; BSR set to: 0
  9260  0038EA  0E01               	movlw	1
  9261  0038EC  258F               	addwf	strstr@s1& (0+255),w,b
  9262  0038EE  6F80               	movwf	strchr@ptr& (0+255),b
  9263  0038F0  0E00               	movlw	0
  9264  0038F2  2190               	addwfc	(strstr@s1+1)& (0+255),w,b
  9265  0038F4  6F81               	movwf	(strchr@ptr+1)& (0+255),b
  9266  0038F6  C091  FFF6         	movff	strstr@s2,tblptrl
  9267  0038FA  C092  FFF7         	movff	strstr@s2+1,tblptrh
  9268  0038FE                     	if	0	;tblptru may be non-zero
  9269  0038FE                     	endif
  9270  0038FE                     	if	0	;tblptru may be non-zero
  9271  0038FE                     	endif
  9272  0038FE  0008               	tblrd		*
  9273  003900  FFFF               	dw	65535	; errata NOP
  9274  003902  50F5               	movf	tablat,w,c
  9275  003904  6F82               	movwf	strchr@chr& (0+255),b
  9276  003906  6B83               	clrf	(strchr@chr+1)& (0+255),b
  9277  003908  EC14  F03D         	call	_strchr	;wreg free
  9278  00390C  C080  F08F         	movff	?_strchr,strstr@s1
  9279  003910  C081  F090         	movff	?_strchr+1,strstr@s1+1
  9280  003914                     l1698:
  9281  003914  FFFF               	dw	65535	; assembler added errata NOP
  9282  003916  0100               	movlb	0	; () banked
  9283  003918  518F               	movf	strstr@s1& (0+255),w,b
  9284  00391A  1190               	iorwf	(strstr@s1+1)& (0+255),w,b
  9285  00391C  B4D8               	btfsc	status,2,c
  9286  00391E  D007               	goto	u5130
  9287                           
  9288                           ; BSR set to: 0
  9289  003920  C08F  FFD9         	movff	strstr@s1,fsr2l
  9290  003924  C090  FFDA         	movff	strstr@s1+1,fsr2h
  9291  003928  50DF               	movf	indf2,w,c
  9292  00392A  A4D8               	btfss	status,2,c
  9293  00392C  D7BE               	goto	l1699
  9294  00392E                     u5130:
  9295  00392E  FFFF               	dw	65535	; assembler added errata NOP
  9296                           
  9297                           ; BSR set to: 0
  9298                           
  9299                           ; BSR set to: 0
  9300                           
  9301                           ; BSR set to: 0
  9302  003930  0E00               	movlw	0
  9303  003932  6F8F               	movwf	?_strstr& (0+255),b
  9304  003934  0E00               	movlw	0
  9305  003936  6F90               	movwf	(?_strstr+1)& (0+255),b
  9306  003938                     l5050:
  9307  003938  FFFF               	dw	65535	; assembler added errata NOP
  9308                           
  9309                           ; BSR set to: 0
  9310                           
  9311                           ; BSR set to: 0
  9312  00393A  0012               	return		;funcret
  9313  00393C  FFFF               	dw	65535	; errata NOP
  9314  00393E                     __end_of_strstr:
  9315                           	opt stack 0
  9316                           tblptru	equ	0xFF8
  9317                           tblptrh	equ	0xFF7
  9318                           tblptrl	equ	0xFF6
  9319                           tablat	equ	0xFF5
  9320                           prodh	equ	0xFF4
  9321                           prodl	equ	0xFF3
  9322                           postinc0	equ	0xFEE
  9323                           wreg	equ	0xFE8
  9324                           postdec1	equ	0xFE5
  9325                           fsr1l	equ	0xFE1
  9326                           indf2	equ	0xFDF
  9327                           postinc2	equ	0xFDE
  9328                           fsr2h	equ	0xFDA
  9329                           fsr2l	equ	0xFD9
  9330                           status	equ	0xFD8
  9331                           
  9332 ;; *************** function _strncmp *****************
  9333 ;; Defined at:
  9334 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncmp.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
  9337 ;;		 -> NULL(0), bufferSerial(60), 
  9338 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
  9339 ;;		 -> STR_27(2), STR_25(3), STR_22(3), STR_20(6), 
  9340 ;;		 -> STR_19(3), STR_11(2), STR_9(3), STR_7(3), 
  9341 ;;		 -> STR_5(7), STR_4(7), 
  9342 ;;  len             2   10[BANK0 ] unsigned int 
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;		None
  9345 ;; Return value:  Size  Location     Type
  9346 ;;                  2    6[BANK0 ] int 
  9347 ;; Registers used:
  9348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9354 ;;      Params:         0       6       0       0       0       0       0
  9355 ;;      Locals:         0       0       0       0       0       0       0
  9356 ;;      Temps:          0       3       0       0       0       0       0
  9357 ;;      Totals:         0       9       0       0       0       0       0
  9358 ;;Total ram usage:        9 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    6
  9361 ;; This function calls:
  9362 ;;		Nothing
  9363 ;; This function is called by:
  9364 ;;		_strstr
  9365 ;; This function uses a non-reentrant model
  9366 ;;
  9367                           
  9368                           	psect	text27
  9369  003772                     __ptext27:
  9370                           	opt stack 0
  9371  003772                     _strncmp:
  9372                           	opt stack 0
  9373  003772  FFFF               	dw	65535	; assembler added errata NOP
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;incstack = 0
  9377  003774  D03A               	goto	l1732
  9378  003776  FFFF               	dw	65535	; assembler added errata NOP
  9379  003778                     l5002:
  9380  003778  C086  FFD9         	movff	strncmp@s1,fsr2l
  9381  00377C  C087  FFDA         	movff	strncmp@s1+1,fsr2h
  9382  003780  50DF               	movf	indf2,w,c
  9383  003782  B4D8               	btfsc	status,2,c
  9384  003784  D011               	goto	u5050
  9385  003786  C086  FFD9         	movff	strncmp@s1,fsr2l
  9386  00378A  C087  FFDA         	movff	strncmp@s1+1,fsr2h
  9387  00378E  50DF               	movf	indf2,w,c
  9388  003790  0100               	movlb	0	; () banked
  9389  003792  6F8C               	movwf	??_strncmp& (0+255),b
  9390  003794  C088  FFF6         	movff	strncmp@s2,tblptrl
  9391  003798  C089  FFF7         	movff	strncmp@s2+1,tblptrh
  9392  00379C                     	if	0	;tblptru may be non-zero
  9393  00379C                     	endif
  9394  00379C                     	if	0	;tblptru may be non-zero
  9395  00379C                     	endif
  9396  00379C  0008               	tblrd		*
  9397  00379E  FFFF               	dw	65535	; errata NOP
  9398  0037A0  50F5               	movf	tablat,w,c
  9399  0037A2  198C               	xorwf	??_strncmp& (0+255),w,b
  9400  0037A4  B4D8               	btfsc	status,2,c
  9401  0037A6  D01C               	goto	l1734
  9402  0037A8                     u5050:
  9403  0037A8  FFFF               	dw	65535	; assembler added errata NOP
  9404                           
  9405                           ; BSR set to: 0
  9406  0037AA  C088  FFF6         	movff	strncmp@s2,tblptrl
  9407  0037AE  C089  FFF7         	movff	strncmp@s2+1,tblptrh
  9408  0037B2                     	if	0	;tblptru may be non-zero
  9409  0037B2                     	endif
  9410  0037B2                     	if	0	;tblptru may be non-zero
  9411  0037B2                     	endif
  9412  0037B2  0008               	tblrd		*
  9413  0037B4  FFFF               	dw	65535	; errata NOP
  9414  0037B6  50F5               	movf	tablat,w,c
  9415  0037B8  0100               	movlb	0	; () banked
  9416  0037BA  6F8C               	movwf	??_strncmp& (0+255),b
  9417  0037BC  6B8D               	clrf	(??_strncmp+1)& (0+255),b
  9418  0037BE  1F8C               	comf	??_strncmp& (0+255),f,b
  9419  0037C0  1F8D               	comf	(??_strncmp+1)& (0+255),f,b
  9420  0037C2  4B8C               	infsnz	??_strncmp& (0+255),f,b
  9421  0037C4  2B8D               	incf	(??_strncmp+1)& (0+255),f,b
  9422  0037C6  C086  FFD9         	movff	strncmp@s1,fsr2l
  9423  0037CA  C087  FFDA         	movff	strncmp@s1+1,fsr2h
  9424  0037CE  50DF               	movf	indf2,w,c
  9425  0037D0  6F8E               	movwf	(??_strncmp+2)& (0+255),b
  9426  0037D2  518E               	movf	(??_strncmp+2)& (0+255),w,b
  9427  0037D4  258C               	addwf	??_strncmp& (0+255),w,b
  9428  0037D6  6F86               	movwf	?_strncmp& (0+255),b
  9429  0037D8  0E00               	movlw	0
  9430  0037DA  218D               	addwfc	(??_strncmp+1)& (0+255),w,b
  9431  0037DC  6F87               	movwf	(?_strncmp+1)& (0+255),b
  9432                           
  9433                           ; BSR set to: 0
  9434  0037DE  D013               	goto	l5016
  9435  0037E0                     l1734:
  9436  0037E0  FFFF               	dw	65535	; assembler added errata NOP
  9437                           
  9438                           ; BSR set to: 0
  9439                           
  9440                           ; BSR set to: 0
  9441  0037E2  4B86               	infsnz	strncmp@s1& (0+255),f,b
  9442  0037E4  2B87               	incf	(strncmp@s1+1)& (0+255),f,b
  9443  0037E6  4B88               	infsnz	strncmp@s2& (0+255),f,b
  9444  0037E8  2B89               	incf	(strncmp@s2+1)& (0+255),f,b
  9445  0037EA                     l1732:
  9446  0037EA  FFFF               	dw	65535	; assembler added errata NOP
  9447                           
  9448                           ; BSR set to: 0
  9449  0037EC  0100               	movlb	0	; () banked
  9450  0037EE  078A               	decf	strncmp@len& (0+255),f,b
  9451  0037F0  A0D8               	btfss	status,0,c
  9452  0037F2  078B               	decf	(strncmp@len+1)& (0+255),f,b
  9453  0037F4  298A               	incf	strncmp@len& (0+255),w,b
  9454  0037F6  E1C0               	bnz	l5002
  9455  0037F8  298B               	incf	(strncmp@len+1)& (0+255),w,b
  9456  0037FA  A4D8               	btfss	status,2,c
  9457  0037FC  D7BC               	goto	l1733
  9458                           
  9459                           ; BSR set to: 0
  9460                           
  9461                           ; BSR set to: 0
  9462  0037FE  0E00               	movlw	0
  9463  003800  6F87               	movwf	(?_strncmp+1)& (0+255),b
  9464  003802  0E00               	movlw	0
  9465  003804  6F86               	movwf	?_strncmp& (0+255),b
  9466  003806                     l5016:
  9467  003806  FFFF               	dw	65535	; assembler added errata NOP
  9468                           
  9469                           ; BSR set to: 0
  9470                           
  9471                           ; BSR set to: 0
  9472  003808  0012               	return		;funcret
  9473  00380A  FFFF               	dw	65535	; errata NOP
  9474  00380C                     __end_of_strncmp:
  9475                           	opt stack 0
  9476                           tblptru	equ	0xFF8
  9477                           tblptrh	equ	0xFF7
  9478                           tblptrl	equ	0xFF6
  9479                           tablat	equ	0xFF5
  9480                           prodh	equ	0xFF4
  9481                           prodl	equ	0xFF3
  9482                           postinc0	equ	0xFEE
  9483                           wreg	equ	0xFE8
  9484                           postdec1	equ	0xFE5
  9485                           fsr1l	equ	0xFE1
  9486                           indf2	equ	0xFDF
  9487                           postinc2	equ	0xFDE
  9488                           fsr2h	equ	0xFDA
  9489                           fsr2l	equ	0xFD9
  9490                           status	equ	0xFD8
  9491                           
  9492 ;; *************** function _strlen *****************
  9493 ;; Defined at:
  9494 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  9495 ;; Parameters:    Size  Location     Type
  9496 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  9497 ;;		 -> STR_27(2), STR_25(3), STR_22(3), STR_20(6), 
  9498 ;;		 -> STR_19(3), STR_11(2), STR_9(3), STR_7(3), 
  9499 ;;		 -> STR_5(7), STR_4(7), NULL(0), bufferSerial(60), 
  9500 ;; Auto vars:     Size  Location     Type
  9501 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  9502 ;;		 -> STR_27(2), STR_25(3), STR_22(3), STR_20(6), 
  9503 ;;		 -> STR_19(3), STR_11(2), STR_9(3), STR_7(3), 
  9504 ;;		 -> STR_5(7), STR_4(7), NULL(0), bufferSerial(60), 
  9505 ;; Return value:  Size  Location     Type
  9506 ;;                  2    0[BANK0 ] unsigned int 
  9507 ;; Registers used:
  9508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  9509 ;; Tracked objects:
  9510 ;;		On entry : 0/0
  9511 ;;		On exit  : 0/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9514 ;;      Params:         0       2       0       0       0       0       0
  9515 ;;      Locals:         0       2       0       0       0       0       0
  9516 ;;      Temps:          0       2       0       0       0       0       0
  9517 ;;      Totals:         0       6       0       0       0       0       0
  9518 ;;Total ram usage:        6 bytes
  9519 ;; Hardware stack levels used:    1
  9520 ;; Hardware stack levels required when called:    6
  9521 ;; This function calls:
  9522 ;;		Nothing
  9523 ;; This function is called by:
  9524 ;;		_getSerial
  9525 ;;		_strstr
  9526 ;; This function uses a non-reentrant model
  9527 ;;
  9528                           
  9529                           	psect	text28
  9530  003E16                     __ptext28:
  9531                           	opt stack 0
  9532  003E16                     _strlen:
  9533                           	opt stack 0
  9534  003E16  FFFF               	dw	65535	; assembler added errata NOP
  9535                           
  9536                           ; BSR set to: 0
  9537                           ;incstack = 0
  9538  003E18  C080  F084         	movff	strlen@s,strlen@cp
  9539  003E1C  C081  F085         	movff	strlen@s+1,strlen@cp+1
  9540  003E20  D004               	goto	l1686
  9541  003E22  FFFF               	dw	65535	; assembler added errata NOP
  9542  003E24  0100               	movlb	0	; () banked
  9543  003E26  4B84               	infsnz	strlen@cp& (0+255),f,b
  9544  003E28  2B85               	incf	(strlen@cp+1)& (0+255),f,b
  9545  003E2A                     l1686:
  9546  003E2A  FFFF               	dw	65535	; assembler added errata NOP
  9547                           
  9548                           ; BSR set to: 0
  9549  003E2C  C084  FFF6         	movff	strlen@cp,tblptrl
  9550  003E30  C085  FFF7         	movff	strlen@cp+1,tblptrh
  9551  003E34  6AF8               	clrf	tblptru,c
  9552  003E36  0E05               	movlw	(high __ramtop+-1)
  9553  003E38  64F7               	cpfsgt	tblptrh,c
  9554  003E3A  D004               	bra	u4517
  9555  003E3C  0008               	tblrd		*
  9556  003E3E  FFFF               	dw	65535	; errata NOP
  9557  003E40  50F5               	movf	tablat,w,c
  9558  003E42  D005               	bra	u4510
  9559  003E44                     u4517:
  9560  003E44  CFF6 FFE9          	movff	tblptrl,fsr0l
  9561  003E48  CFF7 FFEA          	movff	tblptrh,fsr0h
  9562  003E4C  50EF               	movf	indf0,w,c
  9563  003E4E                     u4510:
  9564  003E4E  0900               	iorlw	0
  9565  003E50  A4D8               	btfss	status,2,c
  9566  003E52  D7E7               	goto	l1687
  9567  003E54  C080  F082         	movff	strlen@s,??_strlen
  9568  003E58  C081  F083         	movff	strlen@s+1,??_strlen+1
  9569  003E5C  0100               	movlb	0	; () banked
  9570  003E5E  1F82               	comf	??_strlen& (0+255),f,b
  9571  003E60  1F83               	comf	(??_strlen+1)& (0+255),f,b
  9572  003E62  4B82               	infsnz	??_strlen& (0+255),f,b
  9573  003E64  2B83               	incf	(??_strlen+1)& (0+255),f,b
  9574  003E66  5184               	movf	strlen@cp& (0+255),w,b
  9575  003E68  2582               	addwf	??_strlen& (0+255),w,b
  9576  003E6A  6F80               	movwf	?_strlen& (0+255),b
  9577  003E6C  5185               	movf	(strlen@cp+1)& (0+255),w,b
  9578  003E6E  2183               	addwfc	(??_strlen+1)& (0+255),w,b
  9579  003E70  6F81               	movwf	(?_strlen+1)& (0+255),b
  9580                           
  9581                           ; BSR set to: 0
  9582                           
  9583                           ; BSR set to: 0
  9584  003E72  0012               	return		;funcret
  9585  003E74  FFFF               	dw	65535	; errata NOP
  9586  003E76                     __end_of_strlen:
  9587                           	opt stack 0
  9588                           tblptru	equ	0xFF8
  9589                           tblptrh	equ	0xFF7
  9590                           tblptrl	equ	0xFF6
  9591                           tablat	equ	0xFF5
  9592                           prodh	equ	0xFF4
  9593                           prodl	equ	0xFF3
  9594                           indf0	equ	0xFEF
  9595                           postinc0	equ	0xFEE
  9596                           fsr0h	equ	0xFEA
  9597                           fsr0l	equ	0xFE9
  9598                           wreg	equ	0xFE8
  9599                           postdec1	equ	0xFE5
  9600                           fsr1l	equ	0xFE1
  9601                           indf2	equ	0xFDF
  9602                           postinc2	equ	0xFDE
  9603                           fsr2h	equ	0xFDA
  9604                           fsr2l	equ	0xFD9
  9605                           status	equ	0xFD8
  9606                           
  9607 ;; *************** function _strchr *****************
  9608 ;; Defined at:
  9609 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
  9612 ;;		 -> NULL(0), bufferSerial(60), 
  9613 ;;  chr             2    2[BANK0 ] int 
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;		None
  9616 ;; Return value:  Size  Location     Type
  9617 ;;                  2    0[BANK0 ] PTR unsigned char 
  9618 ;; Registers used:
  9619 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9620 ;; Tracked objects:
  9621 ;;		On entry : 0/0
  9622 ;;		On exit  : 0/0
  9623 ;;		Unchanged: 0/0
  9624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9625 ;;      Params:         0       4       0       0       0       0       0
  9626 ;;      Locals:         0       0       0       0       0       0       0
  9627 ;;      Temps:          0       1       0       0       0       0       0
  9628 ;;      Totals:         0       5       0       0       0       0       0
  9629 ;;Total ram usage:        5 bytes
  9630 ;; Hardware stack levels used:    1
  9631 ;; Hardware stack levels required when called:    6
  9632 ;; This function calls:
  9633 ;;		Nothing
  9634 ;; This function is called by:
  9635 ;;		_strstr
  9636 ;; This function uses a non-reentrant model
  9637 ;;
  9638                           
  9639                           	psect	text29
  9640  007A28                     __ptext29:
  9641                           	opt stack 0
  9642  007A28                     _strchr:
  9643                           	opt stack 0
  9644  007A28  FFFF               	dw	65535	; assembler added errata NOP
  9645                           
  9646                           ; BSR set to: 0
  9647                           ;incstack = 0
  9648  007A2A  C080  FFD9         	movff	strchr@ptr,fsr2l
  9649  007A2E  C081  FFDA         	movff	strchr@ptr+1,fsr2h
  9650  007A32  0100               	movlb	0	; () banked
  9651  007A34  5182               	movf	strchr@chr& (0+255),w,b
  9652  007A36  18DE               	xorwf	postinc2,w,c
  9653  007A38  A4D8               	btfss	status,2,c
  9654  007A3A  D005               	goto	l1727
  9655                           
  9656                           ; BSR set to: 0
  9657  007A3C  C080  F080         	movff	strchr@ptr,?_strchr
  9658  007A40  C081  F081         	movff	strchr@ptr+1,?_strchr+1
  9659                           
  9660                           ; BSR set to: 0
  9661  007A44  D00E               	goto	l5028
  9662  007A46                     l1727:
  9663  007A46  FFFF               	dw	65535	; assembler added errata NOP
  9664                           
  9665                           ; BSR set to: 0
  9666                           
  9667                           ; BSR set to: 0
  9668  007A48  C080  FFD9         	movff	strchr@ptr,fsr2l
  9669  007A4C  C081  FFDA         	movff	strchr@ptr+1,fsr2h
  9670  007A50  4B80               	infsnz	strchr@ptr& (0+255),f,b
  9671  007A52  2B81               	incf	(strchr@ptr+1)& (0+255),f,b
  9672  007A54  50DF               	movf	indf2,w,c
  9673  007A56  A4D8               	btfss	status,2,c
  9674  007A58  D7E7               	goto	_strchr
  9675                           
  9676                           ; BSR set to: 0
  9677                           
  9678                           ; BSR set to: 0
  9679  007A5A  0E00               	movlw	0
  9680  007A5C  6F80               	movwf	?_strchr& (0+255),b
  9681  007A5E  0E00               	movlw	0
  9682  007A60  6F81               	movwf	(?_strchr+1)& (0+255),b
  9683  007A62                     l5028:
  9684  007A62  FFFF               	dw	65535	; assembler added errata NOP
  9685                           
  9686                           ; BSR set to: 0
  9687                           
  9688                           ; BSR set to: 0
  9689  007A64  0012               	return		;funcret
  9690  007A66  FFFF               	dw	65535	; errata NOP
  9691  007A68                     __end_of_strchr:
  9692                           	opt stack 0
  9693                           tblptru	equ	0xFF8
  9694                           tblptrh	equ	0xFF7
  9695                           tblptrl	equ	0xFF6
  9696                           tablat	equ	0xFF5
  9697                           prodh	equ	0xFF4
  9698                           prodl	equ	0xFF3
  9699                           indf0	equ	0xFEF
  9700                           postinc0	equ	0xFEE
  9701                           fsr0h	equ	0xFEA
  9702                           fsr0l	equ	0xFE9
  9703                           wreg	equ	0xFE8
  9704                           postdec1	equ	0xFE5
  9705                           fsr1l	equ	0xFE1
  9706                           indf2	equ	0xFDF
  9707                           postinc2	equ	0xFDE
  9708                           fsr2h	equ	0xFDA
  9709                           fsr2l	equ	0xFD9
  9710                           status	equ	0xFD8
  9711                           
  9712 ;; *************** function _configuraRegistradores *****************
  9713 ;; Defined at:
  9714 ;;		line 7 in file "registradores.h"
  9715 ;; Parameters:    Size  Location     Type
  9716 ;;		None
  9717 ;; Auto vars:     Size  Location     Type
  9718 ;;		None
  9719 ;; Return value:  Size  Location     Type
  9720 ;;                  1    wreg      void 
  9721 ;; Registers used:
  9722 ;;		wreg, status,2
  9723 ;; Tracked objects:
  9724 ;;		On entry : 0/0
  9725 ;;		On exit  : 0/0
  9726 ;;		Unchanged: 0/0
  9727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9728 ;;      Params:         0       0       0       0       0       0       0
  9729 ;;      Locals:         0       0       0       0       0       0       0
  9730 ;;      Temps:          0       0       0       0       0       0       0
  9731 ;;      Totals:         0       0       0       0       0       0       0
  9732 ;;Total ram usage:        0 bytes
  9733 ;; Hardware stack levels used:    1
  9734 ;; Hardware stack levels required when called:    6
  9735 ;; This function calls:
  9736 ;;		Nothing
  9737 ;; This function is called by:
  9738 ;;		_main
  9739 ;; This function uses a non-reentrant model
  9740 ;;
  9741                           
  9742                           	psect	text30
  9743  003E76                     __ptext30:
  9744                           	opt stack 0
  9745  003E76                     _configuraRegistradores:
  9746                           	opt stack 0
  9747  003E76  FFFF               	dw	65535	; assembler added errata NOP
  9748                           
  9749                           ;registradores.h: 9: ADCON0 = 0b10000001;
  9750                           
  9751                           ; BSR set to: 0
  9752                           ;incstack = 0
  9753  003E78  0E81               	movlw	129
  9754  003E7A  6EC2               	movwf	4034,c	;volatile
  9755                           
  9756                           ;registradores.h: 10: ADCON1 = 0b11001110;
  9757  003E7C  0ECE               	movlw	206
  9758  003E7E  6EC1               	movwf	4033,c	;volatile
  9759                           
  9760                           ;registradores.h: 11: TRISAbits.RA0 = 1;
  9761  003E80  8092               	bsf	3986,0,c	;volatile
  9762                           
  9763                           ;registradores.h: 12: PORTAbits.AN0 = 0;
  9764  003E82  9080               	bcf	3968,0,c	;volatile
  9765                           
  9766                           ;registradores.h: 15: T0CON = 0x81;
  9767  003E84  0E81               	movlw	129
  9768  003E86  6ED5               	movwf	4053,c	;volatile
  9769                           
  9770                           ;registradores.h: 16: INTCON = 0xE4;
  9771  003E88  0EE4               	movlw	228
  9772  003E8A  6EF2               	movwf	intcon,c	;volatile
  9773                           
  9774                           ;registradores.h: 19: TRISDbits.RD5 = 0;
  9775  003E8C  9A95               	bcf	3989,5,c	;volatile
  9776                           
  9777                           ;registradores.h: 20: TRISDbits.RD4 = 0;
  9778  003E8E  9895               	bcf	3989,4,c	;volatile
  9779                           
  9780                           ;registradores.h: 21: TRISDbits.RD3 = 0;
  9781  003E90  9695               	bcf	3989,3,c	;volatile
  9782                           
  9783                           ;registradores.h: 22: TRISDbits.RD2 = 0;
  9784  003E92  9495               	bcf	3989,2,c	;volatile
  9785                           
  9786                           ;registradores.h: 23: TRISDbits.RD1 = 0;
  9787  003E94  9295               	bcf	3989,1,c	;volatile
  9788                           
  9789                           ;registradores.h: 24: TRISDbits.RD0 = 0;
  9790  003E96  9095               	bcf	3989,0,c	;volatile
  9791                           
  9792                           ;registradores.h: 27: TRISCbits.TRISC6 = 0;
  9793  003E98  9C94               	bcf	3988,6,c	;volatile
  9794                           
  9795                           ;registradores.h: 28: TRISCbits.TRISC7 = 1;
  9796  003E9A  8E94               	bsf	3988,7,c	;volatile
  9797                           
  9798                           ;registradores.h: 29: TXSTAbits.TXEN = 1;
  9799  003E9C  8AAC               	bsf	4012,5,c	;volatile
  9800                           
  9801                           ;registradores.h: 30: TXSTAbits.BRGH = 1;
  9802  003E9E  84AC               	bsf	4012,2,c	;volatile
  9803                           
  9804                           ;registradores.h: 31: TXSTAbits.SYNC = 0;
  9805  003EA0  98AC               	bcf	4012,4,c	;volatile
  9806                           
  9807                           ;registradores.h: 32: RCSTAbits.SPEN = 1;
  9808  003EA2  8EAB               	bsf	4011,7,c	;volatile
  9809                           
  9810                           ;registradores.h: 33: RCSTAbits.CREN = 1;
  9811  003EA4  88AB               	bsf	4011,4,c	;volatile
  9812                           
  9813                           ;registradores.h: 36: SPBRG = 25;
  9814  003EA6  0E19               	movlw	25
  9815  003EA8  6EAF               	movwf	4015,c	;volatile
  9816                           
  9817                           ;registradores.h: 37: INTCONbits.GIE = 1;
  9818  003EAA  8EF2               	bsf	intcon,7,c	;volatile
  9819                           
  9820                           ;registradores.h: 38: INTCONbits.PEIE = 1;
  9821  003EAC  8CF2               	bsf	intcon,6,c	;volatile
  9822                           
  9823                           ;registradores.h: 39: PIR1bits.RCIF = 0;
  9824  003EAE  9A9E               	bcf	3998,5,c	;volatile
  9825                           
  9826                           ;registradores.h: 40: PIE1bits.RCIE = 1;
  9827  003EB0  8A9D               	bsf	3997,5,c	;volatile
  9828                           
  9829                           ;registradores.h: 43: INTCONbits.RBIE = 0;
  9830  003EB2  96F2               	bcf	intcon,3,c	;volatile
  9831                           
  9832                           ;registradores.h: 44: TRISAbits.RA2 = 1;
  9833  003EB4  8492               	bsf	3986,2,c	;volatile
  9834                           
  9835                           ;registradores.h: 45: TRISAbits.RA5 = 1;
  9836  003EB6  8A92               	bsf	3986,5,c	;volatile
  9837                           
  9838                           ;registradores.h: 46: TRISCbits.RC0 = 1;
  9839  003EB8  8094               	bsf	3988,0,c	;volatile
  9840                           
  9841                           ;registradores.h: 49: TRISBbits.RB2 = 1;
  9842  003EBA  8493               	bsf	3987,2,c	;volatile
  9843                           
  9844                           ;registradores.h: 50: TRISBbits.RB3 = 1;
  9845  003EBC  8693               	bsf	3987,3,c	;volatile
  9846                           
  9847                           ;registradores.h: 51: TRISBbits.RB4 = 1;
  9848  003EBE  8893               	bsf	3987,4,c	;volatile
  9849                           
  9850                           ;registradores.h: 52: TRISBbits.RB5 = 1;
  9851  003EC0  8A93               	bsf	3987,5,c	;volatile
  9852                           
  9853                           ;registradores.h: 55: TRISEbits.RE0 = 0;
  9854  003EC2  9096               	bcf	3990,0,c	;volatile
  9855                           
  9856                           ;registradores.h: 56: TRISEbits.RE1 = 0;
  9857  003EC4  9296               	bcf	3990,1,c	;volatile
  9858                           
  9859                           ;registradores.h: 57: TRISEbits.RE2 = 0;
  9860  003EC6  9496               	bcf	3990,2,c	;volatile
  9861  003EC8  0012               	return		;funcret
  9862  003ECA  FFFF               	dw	65535	; errata NOP
  9863  003ECC                     __end_of_configuraRegistradores:
  9864                           	opt stack 0
  9865                           tblptru	equ	0xFF8
  9866                           tblptrh	equ	0xFF7
  9867                           tblptrl	equ	0xFF6
  9868                           tablat	equ	0xFF5
  9869                           prodh	equ	0xFF4
  9870                           prodl	equ	0xFF3
  9871                           intcon	equ	0xFF2
  9872                           indf0	equ	0xFEF
  9873                           postinc0	equ	0xFEE
  9874                           fsr0h	equ	0xFEA
  9875                           fsr0l	equ	0xFE9
  9876                           wreg	equ	0xFE8
  9877                           postdec1	equ	0xFE5
  9878                           fsr1l	equ	0xFE1
  9879                           indf2	equ	0xFDF
  9880                           postinc2	equ	0xFDE
  9881                           fsr2h	equ	0xFDA
  9882                           fsr2l	equ	0xFD9
  9883                           status	equ	0xFD8
  9884                           
  9885 ;; *************** function _atualizarLCD *****************
  9886 ;; Defined at:
  9887 ;;		line 132 in file "lcd.h"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;  line1           2    8[BANK0 ] PTR unsigned char 
  9890 ;;		 -> line1(21), 
  9891 ;;  line2           2   10[BANK0 ] PTR unsigned char 
  9892 ;;		 -> line2(21), 
  9893 ;;  line3           2   12[BANK0 ] PTR unsigned char 
  9894 ;;		 -> line3(21), 
  9895 ;;  line4           2   14[BANK0 ] PTR unsigned char 
  9896 ;;		 -> line4(21), 
  9897 ;; Auto vars:     Size  Location     Type
  9898 ;;  i               1   16[BANK0 ] unsigned char 
  9899 ;; Return value:  Size  Location     Type
  9900 ;;                  1    wreg      void 
  9901 ;; Registers used:
  9902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9903 ;; Tracked objects:
  9904 ;;		On entry : 0/0
  9905 ;;		On exit  : 0/0
  9906 ;;		Unchanged: 0/0
  9907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9908 ;;      Params:         0       8       0       0       0       0       0
  9909 ;;      Locals:         0       1       0       0       0       0       0
  9910 ;;      Temps:          0       0       0       0       0       0       0
  9911 ;;      Totals:         0       9       0       0       0       0       0
  9912 ;;Total ram usage:        9 bytes
  9913 ;; Hardware stack levels used:    1
  9914 ;; Hardware stack levels required when called:    9
  9915 ;; This function calls:
  9916 ;;		_Lcd_Set_Cursor
  9917 ;;		_Lcd_Write_String
  9918 ;; This function is called by:
  9919 ;;		_main
  9920 ;; This function uses a non-reentrant model
  9921 ;;
  9922                           
  9923                           	psect	text31
  9924  00323C                     __ptext31:
  9925                           	opt stack 0
  9926  00323C                     _atualizarLCD:
  9927                           	opt stack 0
  9928  00323C  FFFF               	dw	65535	; assembler added errata NOP
  9929                           
  9930                           ;lcd.h: 134: Lcd_Set_Cursor(1, 1);
  9931                           
  9932                           ;incstack = 0
  9933  00323E  0E01               	movlw	1
  9934  003240  0100               	movlb	0	; () banked
  9935  003242  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9936  003244  0E01               	movlw	1
  9937  003246  ECEA  F019         	call	_Lcd_Set_Cursor
  9938                           
  9939                           ;lcd.h: 135: Lcd_Write_String(line1);
  9940  00324A  C088  F084         	movff	atualizarLCD@line1,Lcd_Write_String@a
  9941  00324E  C089  F085         	movff	atualizarLCD@line1+1,Lcd_Write_String@a+1
  9942  003252  EC62  F03C         	call	_Lcd_Write_String	;wreg free
  9943                           
  9944                           ;lcd.h: 136: Lcd_Set_Cursor(2, 1);
  9945  003256  0E01               	movlw	1
  9946  003258  0100               	movlb	0	; () banked
  9947  00325A  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9948  00325C  0E02               	movlw	2
  9949  00325E  ECEA  F019         	call	_Lcd_Set_Cursor
  9950                           
  9951                           ;lcd.h: 137: Lcd_Write_String(line2);
  9952  003262  C08A  F084         	movff	atualizarLCD@line2,Lcd_Write_String@a
  9953  003266  C08B  F085         	movff	atualizarLCD@line2+1,Lcd_Write_String@a+1
  9954  00326A  EC62  F03C         	call	_Lcd_Write_String	;wreg free
  9955                           
  9956                           ;lcd.h: 138: Lcd_Set_Cursor(3, 0);
  9957  00326E  0E00               	movlw	0
  9958  003270  0100               	movlb	0	; () banked
  9959  003272  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9960  003274  0E03               	movlw	3
  9961  003276  ECEA  F019         	call	_Lcd_Set_Cursor
  9962                           
  9963                           ;lcd.h: 139: Lcd_Write_String(line3);
  9964  00327A  C08C  F084         	movff	atualizarLCD@line3,Lcd_Write_String@a
  9965  00327E  C08D  F085         	movff	atualizarLCD@line3+1,Lcd_Write_String@a+1
  9966  003282  EC62  F03C         	call	_Lcd_Write_String	;wreg free
  9967                           
  9968                           ;lcd.h: 140: Lcd_Set_Cursor(4, 0);
  9969  003286  0E00               	movlw	0
  9970  003288  0100               	movlb	0	; () banked
  9971  00328A  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9972  00328C  0E04               	movlw	4
  9973  00328E  ECEA  F019         	call	_Lcd_Set_Cursor
  9974                           
  9975                           ;lcd.h: 141: Lcd_Write_String(line4);
  9976  003292  C08E  F084         	movff	atualizarLCD@line4,Lcd_Write_String@a
  9977  003296  C08F  F085         	movff	atualizarLCD@line4+1,Lcd_Write_String@a+1
  9978  00329A  EC62  F03C         	call	_Lcd_Write_String	;wreg free
  9979                           
  9980                           ;lcd.h: 143: char i = 0;
  9981  00329E  0E00               	movlw	0
  9982  0032A0  0100               	movlb	0	; () banked
  9983  0032A2  6F90               	movwf	atualizarLCD@i& (0+255),b
  9984                           
  9985                           ; BSR set to: 0
  9986                           ;lcd.h: 144: for (i = 0; i < 20; i++) {
  9987  0032A4  0E00               	movlw	0
  9988  0032A6  6F90               	movwf	atualizarLCD@i& (0+255),b
  9989  0032A8                     l6648:
  9990  0032A8  FFFF               	dw	65535	; assembler added errata NOP
  9991                           
  9992                           ; BSR set to: 0
  9993  0032AA  0E13               	movlw	19
  9994  0032AC  6590               	cpfsgt	atualizarLCD@i& (0+255),b
  9995  0032AE  D001               	goto	l661
  9996  0032B0  D02B               	goto	u7330
  9997  0032B2                     l661:
  9998  0032B2  FFFF               	dw	65535	; assembler added errata NOP
  9999                           
 10000                           ; BSR set to: 0
 10001                           ;lcd.h: 145: line1[i] = ' ';
 10002                           
 10003                           ; BSR set to: 0
 10004  0032B4  5190               	movf	atualizarLCD@i& (0+255),w,b
 10005  0032B6  0D01               	mullw	1
 10006  0032B8  50F3               	movf	prodl,w,c
 10007  0032BA  2588               	addwf	atualizarLCD@line1& (0+255),w,b
 10008  0032BC  6ED9               	movwf	fsr2l,c
 10009  0032BE  50F4               	movf	prodh,w,c
 10010  0032C0  2189               	addwfc	(atualizarLCD@line1+1)& (0+255),w,b
 10011  0032C2  6EDA               	movwf	fsr2h,c
 10012  0032C4  0E20               	movlw	32
 10013  0032C6  6EDF               	movwf	indf2,c
 10014                           
 10015                           ;lcd.h: 146: line2[i] = ' ';
 10016  0032C8  5190               	movf	atualizarLCD@i& (0+255),w,b
 10017  0032CA  0D01               	mullw	1
 10018  0032CC  50F3               	movf	prodl,w,c
 10019  0032CE  258A               	addwf	atualizarLCD@line2& (0+255),w,b
 10020  0032D0  6ED9               	movwf	fsr2l,c
 10021  0032D2  50F4               	movf	prodh,w,c
 10022  0032D4  218B               	addwfc	(atualizarLCD@line2+1)& (0+255),w,b
 10023  0032D6  6EDA               	movwf	fsr2h,c
 10024  0032D8  0E20               	movlw	32
 10025  0032DA  6EDF               	movwf	indf2,c
 10026                           
 10027                           ;lcd.h: 147: line3[i] = ' ';
 10028  0032DC  5190               	movf	atualizarLCD@i& (0+255),w,b
 10029  0032DE  0D01               	mullw	1
 10030  0032E0  50F3               	movf	prodl,w,c
 10031  0032E2  258C               	addwf	atualizarLCD@line3& (0+255),w,b
 10032  0032E4  6ED9               	movwf	fsr2l,c
 10033  0032E6  50F4               	movf	prodh,w,c
 10034  0032E8  218D               	addwfc	(atualizarLCD@line3+1)& (0+255),w,b
 10035  0032EA  6EDA               	movwf	fsr2h,c
 10036  0032EC  0E20               	movlw	32
 10037  0032EE  6EDF               	movwf	indf2,c
 10038                           
 10039                           ;lcd.h: 148: line4[i] = ' ';
 10040  0032F0  5190               	movf	atualizarLCD@i& (0+255),w,b
 10041  0032F2  0D01               	mullw	1
 10042  0032F4  50F3               	movf	prodl,w,c
 10043  0032F6  258E               	addwf	atualizarLCD@line4& (0+255),w,b
 10044  0032F8  6ED9               	movwf	fsr2l,c
 10045  0032FA  50F4               	movf	prodh,w,c
 10046  0032FC  218F               	addwfc	(atualizarLCD@line4+1)& (0+255),w,b
 10047  0032FE  6EDA               	movwf	fsr2h,c
 10048  003300  0E20               	movlw	32
 10049  003302  6EDF               	movwf	indf2,c
 10050                           
 10051                           ; BSR set to: 0
 10052  003304  2B90               	incf	atualizarLCD@i& (0+255),f,b
 10053  003306  D7D0               	goto	l6648
 10054  003308                     u7330:
 10055  003308  FFFF               	dw	65535	; assembler added errata NOP
 10056                           
 10057                           ; BSR set to: 0
 10058                           
 10059                           ; BSR set to: 0
 10060  00330A  0012               	return		;funcret
 10061  00330C  FFFF               	dw	65535	; errata NOP
 10062  00330E                     __end_of_atualizarLCD:
 10063                           	opt stack 0
 10064                           tblptru	equ	0xFF8
 10065                           tblptrh	equ	0xFF7
 10066                           tblptrl	equ	0xFF6
 10067                           tablat	equ	0xFF5
 10068                           prodh	equ	0xFF4
 10069                           prodl	equ	0xFF3
 10070                           intcon	equ	0xFF2
 10071                           indf0	equ	0xFEF
 10072                           postinc0	equ	0xFEE
 10073                           fsr0h	equ	0xFEA
 10074                           fsr0l	equ	0xFE9
 10075                           wreg	equ	0xFE8
 10076                           postdec1	equ	0xFE5
 10077                           fsr1l	equ	0xFE1
 10078                           indf2	equ	0xFDF
 10079                           postinc2	equ	0xFDE
 10080                           fsr2h	equ	0xFDA
 10081                           fsr2l	equ	0xFD9
 10082                           status	equ	0xFD8
 10083                           
 10084 ;; *************** function _Lcd_Write_String *****************
 10085 ;; Defined at:
 10086 ;;		line 123 in file "lcd.h"
 10087 ;; Parameters:    Size  Location     Type
 10088 ;;  a               2    4[BANK0 ] PTR unsigned char 
 10089 ;;		 -> line4(21), line3(21), line2(21), line1(21), 
 10090 ;; Auto vars:     Size  Location     Type
 10091 ;;  i               1    6[BANK0 ] unsigned char 
 10092 ;; Return value:  Size  Location     Type
 10093 ;;                  1    wreg      void 
 10094 ;; Registers used:
 10095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10096 ;; Tracked objects:
 10097 ;;		On entry : 0/0
 10098 ;;		On exit  : 0/0
 10099 ;;		Unchanged: 0/0
 10100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10101 ;;      Params:         0       2       0       0       0       0       0
 10102 ;;      Locals:         0       1       0       0       0       0       0
 10103 ;;      Temps:          0       0       0       0       0       0       0
 10104 ;;      Totals:         0       3       0       0       0       0       0
 10105 ;;Total ram usage:        3 bytes
 10106 ;; Hardware stack levels used:    1
 10107 ;; Hardware stack levels required when called:    8
 10108 ;; This function calls:
 10109 ;;		_Lcd_Write_Char
 10110 ;; This function is called by:
 10111 ;;		_atualizarLCD
 10112 ;; This function uses a non-reentrant model
 10113 ;;
 10114                           
 10115                           	psect	text32
 10116  0078C4                     __ptext32:
 10117                           	opt stack 0
 10118  0078C4                     _Lcd_Write_String:
 10119                           	opt stack 0
 10120  0078C4  FFFF               	dw	65535	; assembler added errata NOP
 10121                           
 10122                           ;lcd.h: 124: unsigned char i = 0;
 10123                           
 10124                           ; BSR set to: 0
 10125                           ;incstack = 0
 10126  0078C6  0E00               	movlw	0
 10127  0078C8  0100               	movlb	0	; () banked
 10128  0078CA  6F86               	movwf	Lcd_Write_String@i& (0+255),b
 10129                           
 10130                           ;lcd.h: 126: for (i = 0; i < 20; i++) {
 10131  0078CC  0E00               	movlw	0
 10132  0078CE  6F86               	movwf	Lcd_Write_String@i& (0+255),b
 10133  0078D0                     l5878:
 10134  0078D0  FFFF               	dw	65535	; assembler added errata NOP
 10135                           
 10136                           ; BSR set to: 0
 10137  0078D2  0E13               	movlw	19
 10138  0078D4  6586               	cpfsgt	Lcd_Write_String@i& (0+255),b
 10139  0078D6  D001               	goto	l656
 10140  0078D8  D00F               	goto	u6180
 10141  0078DA                     l656:
 10142  0078DA  FFFF               	dw	65535	; assembler added errata NOP
 10143                           
 10144                           ; BSR set to: 0
 10145                           ;lcd.h: 127: Lcd_Write_Char(a[i]);
 10146                           
 10147                           ; BSR set to: 0
 10148  0078DC  5186               	movf	Lcd_Write_String@i& (0+255),w,b
 10149  0078DE  0D01               	mullw	1
 10150  0078E0  50F3               	movf	prodl,w,c
 10151  0078E2  2584               	addwf	Lcd_Write_String@a& (0+255),w,b
 10152  0078E4  6ED9               	movwf	fsr2l,c
 10153  0078E6  50F4               	movf	prodh,w,c
 10154  0078E8  2185               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
 10155  0078EA  6EDA               	movwf	fsr2h,c
 10156  0078EC  50DF               	movf	indf2,w,c
 10157  0078EE  EC34  F03D         	call	_Lcd_Write_Char
 10158  0078F2  0100               	movlb	0	; () banked
 10159  0078F4  2B86               	incf	Lcd_Write_String@i& (0+255),f,b
 10160  0078F6  D7EC               	goto	l5878
 10161  0078F8                     u6180:
 10162  0078F8  FFFF               	dw	65535	; assembler added errata NOP
 10163                           
 10164                           ; BSR set to: 0
 10165                           
 10166                           ; BSR set to: 0
 10167  0078FA  0012               	return		;funcret
 10168  0078FC  FFFF               	dw	65535	; errata NOP
 10169  0078FE                     __end_of_Lcd_Write_String:
 10170                           	opt stack 0
 10171                           tblptru	equ	0xFF8
 10172                           tblptrh	equ	0xFF7
 10173                           tblptrl	equ	0xFF6
 10174                           tablat	equ	0xFF5
 10175                           prodh	equ	0xFF4
 10176                           prodl	equ	0xFF3
 10177                           intcon	equ	0xFF2
 10178                           indf0	equ	0xFEF
 10179                           postinc0	equ	0xFEE
 10180                           fsr0h	equ	0xFEA
 10181                           fsr0l	equ	0xFE9
 10182                           wreg	equ	0xFE8
 10183                           postdec1	equ	0xFE5
 10184                           fsr1l	equ	0xFE1
 10185                           indf2	equ	0xFDF
 10186                           postinc2	equ	0xFDE
 10187                           fsr2h	equ	0xFDA
 10188                           fsr2l	equ	0xFD9
 10189                           status	equ	0xFD8
 10190                           
 10191 ;; *************** function _Lcd_Write_Char *****************
 10192 ;; Defined at:
 10193 ;;		line 108 in file "lcd.h"
 10194 ;; Parameters:    Size  Location     Type
 10195 ;;  a               1    wreg     unsigned char 
 10196 ;; Auto vars:     Size  Location     Type
 10197 ;;  a               1    3[BANK0 ] unsigned char 
 10198 ;;  y               1    2[BANK0 ] unsigned char 
 10199 ;;  tempp           1    1[BANK0 ] unsigned char 
 10200 ;; Return value:  Size  Location     Type
 10201 ;;                  1    wreg      void 
 10202 ;; Registers used:
 10203 ;;		wreg, status,2, status,0, cstack
 10204 ;; Tracked objects:
 10205 ;;		On entry : 0/0
 10206 ;;		On exit  : 0/0
 10207 ;;		Unchanged: 0/0
 10208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10209 ;;      Params:         0       0       0       0       0       0       0
 10210 ;;      Locals:         0       3       0       0       0       0       0
 10211 ;;      Temps:          0       0       0       0       0       0       0
 10212 ;;      Totals:         0       3       0       0       0       0       0
 10213 ;;Total ram usage:        3 bytes
 10214 ;; Hardware stack levels used:    1
 10215 ;; Hardware stack levels required when called:    7
 10216 ;; This function calls:
 10217 ;;		_Lcd_Port
 10218 ;; This function is called by:
 10219 ;;		_Lcd_Write_String
 10220 ;;		_criarCaracteresCGRAM
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224                           	psect	text33
 10225  007A68                     __ptext33:
 10226                           	opt stack 0
 10227  007A68                     _Lcd_Write_Char:
 10228                           	opt stack 0
 10229  007A68  FFFF               	dw	65535	; assembler added errata NOP
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;incstack = 0
 10233                           ;Lcd_Write_Char@a stored from wreg
 10234  007A6A  0100               	movlb	0	; () banked
 10235  007A6C  6F83               	movwf	Lcd_Write_Char@a& (0+255),b
 10236                           
 10237                           ;lcd.h: 109: char tempp, y;
 10238                           ;lcd.h: 110: tempp = a & 0x0F;
 10239  007A6E  0100               	movlb	0	; () banked
 10240  007A70  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 10241  007A72  0B0F               	andlw	15
 10242  007A74  6F81               	movwf	Lcd_Write_Char@tempp& (0+255),b
 10243                           
 10244                           ;lcd.h: 111: y = a & 0xF0;
 10245  007A76  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 10246  007A78  0BF0               	andlw	240
 10247  007A7A  6F82               	movwf	Lcd_Write_Char@y& (0+255),b
 10248                           
 10249                           ; BSR set to: 0
 10250                           ;lcd.h: 112: PORTDbits.RD1 = 1;
 10251  007A7C  8283               	bsf	3971,1,c	;volatile
 10252                           
 10253                           ; BSR set to: 0
 10254                           ;lcd.h: 113: Lcd_Port(y >> 4);
 10255  007A7E  3982               	swapf	Lcd_Write_Char@y& (0+255),w,b
 10256  007A80  0B0F               	andlw	15
 10257  007A82  EC76  F03D         	call	_Lcd_Port
 10258                           
 10259                           ;lcd.h: 114: PORTDbits.RD0 = 1;
 10260  007A86  8083               	bsf	3971,0,c	;volatile
 10261                           
 10262                           ;lcd.h: 115: _delay((unsigned long)((150)*(8000000/4000000.0)));
 10263  007A88  0E4B               	movlw	75
 10264  007A8A                     u8787:
 10265  007A8A  FFFF               	dw	65535	; errata NOP
 10266  007A8C  2EE8               	decfsz	wreg,f,c
 10267  007A8E  D7FD               	bra	u8787
 10268                           
 10269                           ;lcd.h: 116: PORTDbits.RD0 = 0;
 10270  007A90  9083               	bcf	3971,0,c	;volatile
 10271                           
 10272                           ;lcd.h: 117: Lcd_Port(tempp);
 10273  007A92  0100               	movlb	0	; () banked
 10274  007A94  5181               	movf	Lcd_Write_Char@tempp& (0+255),w,b
 10275  007A96  EC76  F03D         	call	_Lcd_Port
 10276                           
 10277                           ;lcd.h: 118: PORTDbits.RD0 = 1;
 10278  007A9A  8083               	bsf	3971,0,c	;volatile
 10279                           
 10280                           ;lcd.h: 119: _delay((unsigned long)((150)*(8000000/4000000.0)));
 10281  007A9C  0E4B               	movlw	75
 10282  007A9E                     u8797:
 10283  007A9E  FFFF               	dw	65535	; errata NOP
 10284  007AA0  2EE8               	decfsz	wreg,f,c
 10285  007AA2  D7FD               	bra	u8797
 10286                           
 10287                           ;lcd.h: 120: PORTDbits.RD0 = 0;
 10288  007AA4  9083               	bcf	3971,0,c	;volatile
 10289  007AA6  0012               	return		;funcret
 10290  007AA8  FFFF               	dw	65535	; errata NOP
 10291  007AAA                     __end_of_Lcd_Write_Char:
 10292                           	opt stack 0
 10293                           tblptru	equ	0xFF8
 10294                           tblptrh	equ	0xFF7
 10295                           tblptrl	equ	0xFF6
 10296                           tablat	equ	0xFF5
 10297                           prodh	equ	0xFF4
 10298                           prodl	equ	0xFF3
 10299                           intcon	equ	0xFF2
 10300                           indf0	equ	0xFEF
 10301                           postinc0	equ	0xFEE
 10302                           fsr0h	equ	0xFEA
 10303                           fsr0l	equ	0xFE9
 10304                           wreg	equ	0xFE8
 10305                           postdec1	equ	0xFE5
 10306                           fsr1l	equ	0xFE1
 10307                           indf2	equ	0xFDF
 10308                           postinc2	equ	0xFDE
 10309                           fsr2h	equ	0xFDA
 10310                           fsr2l	equ	0xFD9
 10311                           status	equ	0xFD8
 10312                           
 10313 ;; *************** function _Lcd_Set_Cursor *****************
 10314 ;; Defined at:
 10315 ;;		line 73 in file "lcd.h"
 10316 ;; Parameters:    Size  Location     Type
 10317 ;;  a               1    wreg     unsigned char 
 10318 ;;  b               1    3[BANK0 ] unsigned char 
 10319 ;; Auto vars:     Size  Location     Type
 10320 ;;  a               1    4[BANK0 ] unsigned char 
 10321 ;;  temp            1    7[BANK0 ] unsigned char 
 10322 ;;  y               1    6[BANK0 ] unsigned char 
 10323 ;;  z               1    5[BANK0 ] unsigned char 
 10324 ;; Return value:  Size  Location     Type
 10325 ;;                  1    wreg      void 
 10326 ;; Registers used:
 10327 ;;		wreg, status,2, status,0, cstack
 10328 ;; Tracked objects:
 10329 ;;		On entry : 0/0
 10330 ;;		On exit  : 0/0
 10331 ;;		Unchanged: 0/0
 10332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10333 ;;      Params:         0       1       0       0       0       0       0
 10334 ;;      Locals:         0       4       0       0       0       0       0
 10335 ;;      Temps:          0       0       0       0       0       0       0
 10336 ;;      Totals:         0       5       0       0       0       0       0
 10337 ;;Total ram usage:        5 bytes
 10338 ;; Hardware stack levels used:    1
 10339 ;; Hardware stack levels required when called:    8
 10340 ;; This function calls:
 10341 ;;		_Lcd_Cmd
 10342 ;; This function is called by:
 10343 ;;		_atualizarLCD
 10344 ;; This function uses a non-reentrant model
 10345 ;;
 10346                           
 10347                           	psect	text34
 10348  0033D4                     __ptext34:
 10349                           	opt stack 0
 10350  0033D4                     _Lcd_Set_Cursor:
 10351                           	opt stack 0
 10352  0033D4  FFFF               	dw	65535	; assembler added errata NOP
 10353                           
 10354                           ;incstack = 0
 10355                           ;Lcd_Set_Cursor@a stored from wreg
 10356  0033D6  0100               	movlb	0	; () banked
 10357  0033D8  6F84               	movwf	Lcd_Set_Cursor@a& (0+255),b
 10358                           
 10359                           ;lcd.h: 74: char temp, z, y;
 10360                           ;lcd.h: 75: switch (a) {
 10361  0033DA  D04C               	goto	l643
 10362  0033DC  FFFF               	dw	65535	; assembler added errata NOP
 10363                           
 10364                           ;lcd.h: 77: temp = 0x80 + b - 1;
 10365  0033DE  0100               	movlb	0	; () banked
 10366  0033E0  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10367  0033E2  0F7F               	addlw	127
 10368  0033E4  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10369                           
 10370                           ;lcd.h: 78: z = temp >> 4;
 10371  0033E6  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10372  0033E8  0B0F               	andlw	15
 10373  0033EA  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10374                           
 10375                           ;lcd.h: 79: y = temp & 0x0F;
 10376  0033EC  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10377  0033EE  0B0F               	andlw	15
 10378  0033F0  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10379                           
 10380                           ; BSR set to: 0
 10381                           ;lcd.h: 80: Lcd_Cmd(z);
 10382  0033F2  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10383  0033F4  EC43  F03B         	call	_Lcd_Cmd
 10384                           
 10385                           ;lcd.h: 81: Lcd_Cmd(y);
 10386  0033F8  0100               	movlb	0	; () banked
 10387  0033FA  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10388  0033FC  EC43  F03B         	call	_Lcd_Cmd
 10389                           
 10390                           ;lcd.h: 82: break;
 10391  003400  D048               	goto	l645
 10392  003402  FFFF               	dw	65535	; assembler added errata NOP
 10393                           
 10394                           ;lcd.h: 84: temp = 0xC0 + b - 1;
 10395  003404  0100               	movlb	0	; () banked
 10396  003406  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10397  003408  0FBF               	addlw	191
 10398  00340A  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10399                           
 10400                           ;lcd.h: 85: z = temp >> 4;
 10401  00340C  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10402  00340E  0B0F               	andlw	15
 10403  003410  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10404                           
 10405                           ;lcd.h: 86: y = temp & 0x0F;
 10406  003412  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10407  003414  0B0F               	andlw	15
 10408  003416  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10409                           
 10410                           ; BSR set to: 0
 10411                           ;lcd.h: 87: Lcd_Cmd(z);
 10412  003418  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10413  00341A  EC43  F03B         	call	_Lcd_Cmd
 10414                           
 10415                           ;lcd.h: 88: Lcd_Cmd(y);
 10416  00341E  0100               	movlb	0	; () banked
 10417  003420  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10418  003422  EC43  F03B         	call	_Lcd_Cmd
 10419                           
 10420                           ;lcd.h: 89: break;
 10421  003426  D035               	goto	l645
 10422  003428  FFFF               	dw	65535	; assembler added errata NOP
 10423                           
 10424                           ;lcd.h: 91: temp = 0x94 + b;
 10425  00342A  0100               	movlb	0	; () banked
 10426  00342C  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10427  00342E  0F94               	addlw	148
 10428  003430  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10429                           
 10430                           ;lcd.h: 92: z = temp >> 4;
 10431  003432  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10432  003434  0B0F               	andlw	15
 10433  003436  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10434                           
 10435                           ;lcd.h: 93: y = temp & 0x0F;
 10436  003438  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10437  00343A  0B0F               	andlw	15
 10438  00343C  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10439                           
 10440                           ; BSR set to: 0
 10441                           ;lcd.h: 94: Lcd_Cmd(z);
 10442  00343E  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10443  003440  EC43  F03B         	call	_Lcd_Cmd
 10444                           
 10445                           ;lcd.h: 95: Lcd_Cmd(y);
 10446  003444  0100               	movlb	0	; () banked
 10447  003446  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10448  003448  EC43  F03B         	call	_Lcd_Cmd
 10449                           
 10450                           ;lcd.h: 96: break;
 10451  00344C  D022               	goto	l645
 10452  00344E  FFFF               	dw	65535	; assembler added errata NOP
 10453                           
 10454                           ;lcd.h: 98: temp = 0xD4 + b;
 10455  003450  0100               	movlb	0	; () banked
 10456  003452  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10457  003454  0FD4               	addlw	212
 10458  003456  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10459                           
 10460                           ;lcd.h: 99: z = temp >> 4;
 10461  003458  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10462  00345A  0B0F               	andlw	15
 10463  00345C  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10464                           
 10465                           ;lcd.h: 100: y = temp & 0x0F;
 10466  00345E  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10467  003460  0B0F               	andlw	15
 10468  003462  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10469                           
 10470                           ; BSR set to: 0
 10471                           ;lcd.h: 101: Lcd_Cmd(z);
 10472  003464  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10473  003466  EC43  F03B         	call	_Lcd_Cmd
 10474                           
 10475                           ;lcd.h: 102: Lcd_Cmd(y);
 10476  00346A  0100               	movlb	0	; () banked
 10477  00346C  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10478  00346E  EC43  F03B         	call	_Lcd_Cmd
 10479                           
 10480                           ;lcd.h: 105: }
 10481                           
 10482                           ;lcd.h: 104: default:return;
 10483                           
 10484                           ;lcd.h: 103: break;
 10485  003472  D00F               	goto	l645
 10486  003474                     l643:
 10487  003474  FFFF               	dw	65535	; assembler added errata NOP
 10488  003476  0100               	movlb	0	; () banked
 10489  003478  5184               	movf	Lcd_Set_Cursor@a& (0+255),w,b
 10490                           
 10491                           ; Switch size 1, requested type "space"
 10492                           ; Number of cases is 4, Range of values is 1 to 4
 10493                           ; switch strategies available:
 10494                           ; Name         Instructions Cycles
 10495                           ; simple_byte           13     7 (average)
 10496                           ;	Chosen strategy is simple_byte
 10497  00347A  0A01               	xorlw	1	; case 1
 10498  00347C  B4D8               	btfsc	status,2,c
 10499  00347E  D7AE               	goto	l644
 10500  003480  0A03               	xorlw	3	; case 2
 10501  003482  B4D8               	btfsc	status,2,c
 10502  003484  D7BE               	goto	l646
 10503  003486  0A01               	xorlw	1	; case 3
 10504  003488  B4D8               	btfsc	status,2,c
 10505  00348A  D7CE               	goto	l647
 10506  00348C  0A07               	xorlw	7	; case 4
 10507  00348E  B4D8               	btfsc	status,2,c
 10508  003490  D7DE               	goto	l648
 10509  003492                     l645:
 10510  003492  FFFF               	dw	65535	; assembler added errata NOP
 10511                           
 10512                           ; BSR set to: 0
 10513  003494  0012               	return		;funcret
 10514  003496  FFFF               	dw	65535	; errata NOP
 10515  003498                     __end_of_Lcd_Set_Cursor:
 10516                           	opt stack 0
 10517                           tblptru	equ	0xFF8
 10518                           tblptrh	equ	0xFF7
 10519                           tblptrl	equ	0xFF6
 10520                           tablat	equ	0xFF5
 10521                           prodh	equ	0xFF4
 10522                           prodl	equ	0xFF3
 10523                           intcon	equ	0xFF2
 10524                           indf0	equ	0xFEF
 10525                           postinc0	equ	0xFEE
 10526                           fsr0h	equ	0xFEA
 10527                           fsr0l	equ	0xFE9
 10528                           wreg	equ	0xFE8
 10529                           postdec1	equ	0xFE5
 10530                           fsr1l	equ	0xFE1
 10531                           indf2	equ	0xFDF
 10532                           postinc2	equ	0xFDE
 10533                           fsr2h	equ	0xFDA
 10534                           fsr2l	equ	0xFD9
 10535                           status	equ	0xFD8
 10536                           
 10537 ;; *************** function _ajusteSP_Bombas *****************
 10538 ;; Defined at:
 10539 ;;		line 7 in file "tela_CONFIG_PRESSAO.h"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;		None
 10542 ;; Auto vars:     Size  Location     Type
 10543 ;;		None
 10544 ;; Return value:  Size  Location     Type
 10545 ;;                  1    wreg      void 
 10546 ;; Registers used:
 10547 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10548 ;; Tracked objects:
 10549 ;;		On entry : 0/0
 10550 ;;		On exit  : 0/0
 10551 ;;		Unchanged: 0/0
 10552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10553 ;;      Params:         0       0       0       0       0       0       0
 10554 ;;      Locals:         0       2       0       0       0       0       0
 10555 ;;      Temps:          0       0       0       0       0       0       0
 10556 ;;      Totals:         0       2       0       0       0       0       0
 10557 ;;Total ram usage:        2 bytes
 10558 ;; Hardware stack levels used:    1
 10559 ;; Hardware stack levels required when called:   10
 10560 ;; This function calls:
 10561 ;;		_blink
 10562 ;;		_btPress
 10563 ;;		_intToFloatStr
 10564 ;;		_sprintf
 10565 ;;		_writeEEPROM_ext
 10566 ;; This function is called by:
 10567 ;;		_main
 10568 ;; This function uses a non-reentrant model
 10569 ;;
 10570                           
 10571                           	psect	text35
 10572  001458                     __ptext35:
 10573                           	opt stack 0
 10574  001458                     _ajusteSP_Bombas:
 10575                           	opt stack 0
 10576  001458  FFFF               	dw	65535	; assembler added errata NOP
 10577                           
 10578                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10579                           
 10580                           ;incstack = 0
 10581  00145A  0100               	movlb	0	; () banked
 10582  00145C  51E1               	movf	_sp_pressao_rede& (0+255),w,b
 10583  00145E  ECB5  F01D         	call	_intToFloatStr
 10584  001462  C0B7  F0C4         	movff	?_intToFloatStr,_ajusteSP_Bombas$2360
 10585  001466  C0B8  F0C5         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2360+1
 10586                           
 10587                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10588  00146A  0E8F               	movlw	low _line1
 10589  00146C  0100               	movlb	0	; () banked
 10590  00146E  6FA1               	movwf	sprintf@wh& (0+255),b
 10591  001470  0E01               	movlw	high _line1
 10592  001472  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10593  001474  0E54               	movlw	low STR_89
 10594  001476  6FA3               	movwf	sprintf@f& (0+255),b
 10595  001478  0E7F               	movlw	high STR_89
 10596  00147A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10597  00147C  C0C4  F0A5         	movff	_ajusteSP_Bombas$2360,?_sprintf+4
 10598  001480  C0C5  F0A6         	movff	_ajusteSP_Bombas$2360+1,?_sprintf+5
 10599  001484  ECBB  F03D         	call	_sprintf	;wreg free
 10600                           
 10601                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10602  001488  0100               	movlb	0	; () banked
 10603  00148A  51E0               	movf	_sp_jockey& (0+255),w,b
 10604  00148C  ECB5  F01D         	call	_intToFloatStr
 10605  001490  C0B7  F0C4         	movff	?_intToFloatStr,_ajusteSP_Bombas$2360
 10606  001494  C0B8  F0C5         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2360+1
 10607                           
 10608                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10609  001498  0E7A               	movlw	low _line2
 10610  00149A  0100               	movlb	0	; () banked
 10611  00149C  6FA1               	movwf	sprintf@wh& (0+255),b
 10612  00149E  0E01               	movlw	high _line2
 10613  0014A0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10614  0014A2  0E28               	movlw	low (STR_41+1)
 10615  0014A4  6FA3               	movwf	sprintf@f& (0+255),b
 10616  0014A6  0E7F               	movlw	high (STR_41+1)
 10617  0014A8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10618  0014AA  C0C4  F0A5         	movff	_ajusteSP_Bombas$2360,?_sprintf+4
 10619  0014AE  C0C5  F0A6         	movff	_ajusteSP_Bombas$2360+1,?_sprintf+5
 10620  0014B2  ECBB  F03D         	call	_sprintf	;wreg free
 10621                           
 10622                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10623  0014B6  0100               	movlb	0	; () banked
 10624  0014B8  51DF               	movf	_sp_principal& (0+255),w,b
 10625  0014BA  ECB5  F01D         	call	_intToFloatStr
 10626  0014BE  C0B7  F0C4         	movff	?_intToFloatStr,_ajusteSP_Bombas$2360
 10627  0014C2  C0B8  F0C5         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2360+1
 10628                           
 10629                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10630  0014C6  0E65               	movlw	low _line3
 10631  0014C8  0100               	movlb	0	; () banked
 10632  0014CA  6FA1               	movwf	sprintf@wh& (0+255),b
 10633  0014CC  0E01               	movlw	high _line3
 10634  0014CE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10635  0014D0  0E77               	movlw	low (STR_44+1)
 10636  0014D2  6FA3               	movwf	sprintf@f& (0+255),b
 10637  0014D4  0E7E               	movlw	high (STR_44+1)
 10638  0014D6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10639  0014D8  C0C4  F0A5         	movff	_ajusteSP_Bombas$2360,?_sprintf+4
 10640  0014DC  C0C5  F0A6         	movff	_ajusteSP_Bombas$2360+1,?_sprintf+5
 10641  0014E0  ECBB  F03D         	call	_sprintf	;wreg free
 10642                           
 10643                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10644  0014E4  0100               	movlb	0	; () banked
 10645  0014E6  51DE               	movf	_sp_estacionaria& (0+255),w,b
 10646  0014E8  ECB5  F01D         	call	_intToFloatStr
 10647  0014EC  C0B7  F0C4         	movff	?_intToFloatStr,_ajusteSP_Bombas$2360
 10648  0014F0  C0B8  F0C5         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2360+1
 10649                           
 10650                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10651  0014F4  0E50               	movlw	low _line4
 10652  0014F6  0100               	movlb	0	; () banked
 10653  0014F8  6FA1               	movwf	sprintf@wh& (0+255),b
 10654  0014FA  0E01               	movlw	high _line4
 10655  0014FC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10656  0014FE  0E87               	movlw	low (STR_47+1)
 10657  001500  6FA3               	movwf	sprintf@f& (0+255),b
 10658  001502  0E7E               	movlw	high (STR_47+1)
 10659  001504  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10660  001506  C0C4  F0A5         	movff	_ajusteSP_Bombas$2360,?_sprintf+4
 10661  00150A  C0C5  F0A6         	movff	_ajusteSP_Bombas$2360+1,?_sprintf+5
 10662  00150E  ECBB  F03D         	call	_sprintf	;wreg free
 10663                           
 10664                           ;tela_CONFIG_PRESSAO.h: 14: if (btPress(1)) {
 10665  001512  0E01               	movlw	1
 10666  001514  EC6E  F01E         	call	_btPress
 10667  001518  0900               	iorlw	0
 10668  00151A  B4D8               	btfsc	status,2,c
 10669  00151C  D019               	goto	l854
 10670                           
 10671                           ;tela_CONFIG_PRESSAO.h: 15: writeEEPROM_ext(0, sp_jockey);
 10672  00151E  C0E0  F08C         	movff	_sp_jockey,writeEEPROM_ext@data
 10673  001522  0E00               	movlw	0
 10674  001524  EC98  F03D         	call	_writeEEPROM_ext
 10675                           
 10676                           ;tela_CONFIG_PRESSAO.h: 16: writeEEPROM_ext(1, sp_principal);
 10677  001528  C0DF  F08C         	movff	_sp_principal,writeEEPROM_ext@data
 10678  00152C  0E01               	movlw	1
 10679  00152E  EC98  F03D         	call	_writeEEPROM_ext
 10680                           
 10681                           ;tela_CONFIG_PRESSAO.h: 17: writeEEPROM_ext(2, sp_estacionaria);
 10682  001532  C0DE  F08C         	movff	_sp_estacionaria,writeEEPROM_ext@data
 10683  001536  0E02               	movlw	2
 10684  001538  EC98  F03D         	call	_writeEEPROM_ext
 10685                           
 10686                           ;tela_CONFIG_PRESSAO.h: 18: writeEEPROM_ext(4, sp_pressao_rede);
 10687  00153C  C0E1  F08C         	movff	_sp_pressao_rede,writeEEPROM_ext@data
 10688  001540  0E04               	movlw	4
 10689  001542  EC98  F03D         	call	_writeEEPROM_ext
 10690                           
 10691                           ;tela_CONFIG_PRESSAO.h: 19: option_posi = 0;
 10692  001546  0E00               	movlw	0
 10693  001548  0100               	movlb	0	; () banked
 10694  00154A  6FDA               	movwf	_option_posi& (0+255),b
 10695                           
 10696                           ; BSR set to: 0
 10697                           ;tela_CONFIG_PRESSAO.h: 20: menu_posi = _menu_posi;
 10698  00154C  C0D8  F0D9         	movff	__menu_posi,_menu_posi
 10699  001550                     l854:
 10700  001550  FFFF               	dw	65535	; assembler added errata NOP
 10701                           
 10702                           ;tela_CONFIG_PRESSAO.h: 21: }
 10703                           ;tela_CONFIG_PRESSAO.h: 23: if (btPress(4)) {
 10704                           
 10705                           ; BSR set to: 0
 10706  001552  0E04               	movlw	4
 10707  001554  EC6E  F01E         	call	_btPress
 10708  001558  0900               	iorlw	0
 10709  00155A  B4D8               	btfsc	status,2,c
 10710  00155C  D097               	goto	l856
 10711                           
 10712                           ;tela_CONFIG_PRESSAO.h: 24: option_posi++;
 10713  00155E  0100               	movlb	0	; () banked
 10714  001560  2BDA               	incf	_option_posi& (0+255),f,b
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;tela_CONFIG_PRESSAO.h: 25: }
 10718                           ;tela_CONFIG_PRESSAO.h: 27: switch (option_posi) {
 10719  001562  D094               	goto	l856
 10720  001564  FFFF               	dw	65535	; assembler added errata NOP
 10721                           
 10722                           ; BSR set to: 0
 10723                           ;tela_CONFIG_PRESSAO.h: 29: blink(line1, 8, 15);
 10724                           
 10725                           ; BSR set to: 0
 10726  001566  0E8F               	movlw	low _line1
 10727  001568  6F80               	movwf	blink@line& (0+255),b
 10728  00156A  0E01               	movlw	high _line1
 10729  00156C  6F81               	movwf	(blink@line+1)& (0+255),b
 10730  00156E  0E08               	movlw	8
 10731  001570  6F82               	movwf	blink@start& (0+255),b
 10732  001572  0E0F               	movlw	15
 10733  001574  6F83               	movwf	blink@end& (0+255),b
 10734  001576  ECD8  F03C         	call	_blink	;wreg free
 10735                           
 10736                           ;tela_CONFIG_PRESSAO.h: 30: if (btPress(3)) {
 10737  00157A  0E03               	movlw	3
 10738  00157C  EC6E  F01E         	call	_btPress
 10739  001580  0900               	iorlw	0
 10740  001582  B4D8               	btfsc	status,2,c
 10741  001584  D002               	goto	l858
 10742                           
 10743                           ;tela_CONFIG_PRESSAO.h: 31: sp_pressao_rede++;
 10744  001586  0100               	movlb	0	; () banked
 10745  001588  2BE1               	incf	_sp_pressao_rede& (0+255),f,b
 10746  00158A                     l858:
 10747  00158A  FFFF               	dw	65535	; assembler added errata NOP
 10748                           
 10749                           ;tela_CONFIG_PRESSAO.h: 32: }
 10750                           ;tela_CONFIG_PRESSAO.h: 33: if (btPress(2)) {
 10751                           
 10752                           ; BSR set to: 0
 10753  00158C  0E02               	movlw	2
 10754  00158E  EC6E  F01E         	call	_btPress
 10755  001592  0900               	iorlw	0
 10756  001594  B4D8               	btfsc	status,2,c
 10757  001596  D002               	goto	l859
 10758                           
 10759                           ;tela_CONFIG_PRESSAO.h: 34: sp_pressao_rede--;
 10760  001598  0100               	movlb	0	; () banked
 10761  00159A  07E1               	decf	_sp_pressao_rede& (0+255),f,b
 10762  00159C                     l859:
 10763  00159C  FFFF               	dw	65535	; assembler added errata NOP
 10764                           
 10765                           ;tela_CONFIG_PRESSAO.h: 35: }
 10766                           ;tela_CONFIG_PRESSAO.h: 36: if (sp_pressao_rede > 99) {
 10767                           
 10768                           ; BSR set to: 0
 10769  00159E  0E63               	movlw	99
 10770  0015A0  0100               	movlb	0	; () banked
 10771  0015A2  65E1               	cpfsgt	_sp_pressao_rede& (0+255),b
 10772  0015A4  D083               	goto	l861
 10773                           
 10774                           ; BSR set to: 0
 10775                           ;tela_CONFIG_PRESSAO.h: 37: sp_pressao_rede = 0;
 10776  0015A6  0E00               	movlw	0
 10777  0015A8  6FE1               	movwf	_sp_pressao_rede& (0+255),b
 10778                           
 10779                           ; BSR set to: 0
 10780                           ;tela_CONFIG_PRESSAO.h: 38: }
 10781                           ;tela_CONFIG_PRESSAO.h: 39: break;
 10782  0015AA  D080               	goto	l861
 10783  0015AC  FFFF               	dw	65535	; assembler added errata NOP
 10784                           
 10785                           ; BSR set to: 0
 10786                           ;tela_CONFIG_PRESSAO.h: 41: blink(line2, 8, 15);
 10787                           
 10788                           ; BSR set to: 0
 10789  0015AE  0E7A               	movlw	low _line2
 10790  0015B0  6F80               	movwf	blink@line& (0+255),b
 10791  0015B2  0E01               	movlw	high _line2
 10792  0015B4  6F81               	movwf	(blink@line+1)& (0+255),b
 10793  0015B6  0E08               	movlw	8
 10794  0015B8  6F82               	movwf	blink@start& (0+255),b
 10795  0015BA  0E0F               	movlw	15
 10796  0015BC  6F83               	movwf	blink@end& (0+255),b
 10797  0015BE  ECD8  F03C         	call	_blink	;wreg free
 10798                           
 10799                           ;tela_CONFIG_PRESSAO.h: 42: if (btPress(3)) {
 10800  0015C2  0E03               	movlw	3
 10801  0015C4  EC6E  F01E         	call	_btPress
 10802  0015C8  0900               	iorlw	0
 10803  0015CA  B4D8               	btfsc	status,2,c
 10804  0015CC  D002               	goto	l863
 10805                           
 10806                           ;tela_CONFIG_PRESSAO.h: 43: sp_jockey++;
 10807  0015CE  0100               	movlb	0	; () banked
 10808  0015D0  2BE0               	incf	_sp_jockey& (0+255),f,b
 10809  0015D2                     l863:
 10810  0015D2  FFFF               	dw	65535	; assembler added errata NOP
 10811                           
 10812                           ;tela_CONFIG_PRESSAO.h: 44: }
 10813                           ;tela_CONFIG_PRESSAO.h: 45: if (btPress(2)) {
 10814                           
 10815                           ; BSR set to: 0
 10816  0015D4  0E02               	movlw	2
 10817  0015D6  EC6E  F01E         	call	_btPress
 10818  0015DA  0900               	iorlw	0
 10819  0015DC  B4D8               	btfsc	status,2,c
 10820  0015DE  D002               	goto	l864
 10821                           
 10822                           ;tela_CONFIG_PRESSAO.h: 46: sp_jockey--;
 10823  0015E0  0100               	movlb	0	; () banked
 10824  0015E2  07E0               	decf	_sp_jockey& (0+255),f,b
 10825  0015E4                     l864:
 10826  0015E4  FFFF               	dw	65535	; assembler added errata NOP
 10827                           
 10828                           ;tela_CONFIG_PRESSAO.h: 47: }
 10829                           ;tela_CONFIG_PRESSAO.h: 48: if (sp_jockey > 99) {
 10830                           
 10831                           ; BSR set to: 0
 10832  0015E6  0E63               	movlw	99
 10833  0015E8  0100               	movlb	0	; () banked
 10834  0015EA  65E0               	cpfsgt	_sp_jockey& (0+255),b
 10835  0015EC  D05F               	goto	l861
 10836                           
 10837                           ; BSR set to: 0
 10838                           ;tela_CONFIG_PRESSAO.h: 49: sp_jockey = 0;
 10839  0015EE  0E00               	movlw	0
 10840  0015F0  6FE0               	movwf	_sp_jockey& (0+255),b
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;tela_CONFIG_PRESSAO.h: 50: }
 10844                           ;tela_CONFIG_PRESSAO.h: 51: break;
 10845  0015F2  D05C               	goto	l861
 10846  0015F4  FFFF               	dw	65535	; assembler added errata NOP
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;tela_CONFIG_PRESSAO.h: 53: blink(line3, 12, 18);
 10850                           
 10851                           ; BSR set to: 0
 10852  0015F6  0E65               	movlw	low _line3
 10853  0015F8  6F80               	movwf	blink@line& (0+255),b
 10854  0015FA  0E01               	movlw	high _line3
 10855  0015FC  6F81               	movwf	(blink@line+1)& (0+255),b
 10856  0015FE  0E0C               	movlw	12
 10857  001600  6F82               	movwf	blink@start& (0+255),b
 10858  001602  0E12               	movlw	18
 10859  001604  6F83               	movwf	blink@end& (0+255),b
 10860  001606  ECD8  F03C         	call	_blink	;wreg free
 10861                           
 10862                           ;tela_CONFIG_PRESSAO.h: 54: if (btPress(3)) {
 10863  00160A  0E03               	movlw	3
 10864  00160C  EC6E  F01E         	call	_btPress
 10865  001610  0900               	iorlw	0
 10866  001612  B4D8               	btfsc	status,2,c
 10867  001614  D002               	goto	l867
 10868                           
 10869                           ;tela_CONFIG_PRESSAO.h: 55: sp_principal++;
 10870  001616  0100               	movlb	0	; () banked
 10871  001618  2BDF               	incf	_sp_principal& (0+255),f,b
 10872  00161A                     l867:
 10873  00161A  FFFF               	dw	65535	; assembler added errata NOP
 10874                           
 10875                           ;tela_CONFIG_PRESSAO.h: 56: }
 10876                           ;tela_CONFIG_PRESSAO.h: 57: if (btPress(2)) {
 10877                           
 10878                           ; BSR set to: 0
 10879  00161C  0E02               	movlw	2
 10880  00161E  EC6E  F01E         	call	_btPress
 10881  001622  0900               	iorlw	0
 10882  001624  B4D8               	btfsc	status,2,c
 10883  001626  D002               	goto	l868
 10884                           
 10885                           ;tela_CONFIG_PRESSAO.h: 58: sp_principal--;
 10886  001628  0100               	movlb	0	; () banked
 10887  00162A  07DF               	decf	_sp_principal& (0+255),f,b
 10888  00162C                     l868:
 10889  00162C  FFFF               	dw	65535	; assembler added errata NOP
 10890                           
 10891                           ;tela_CONFIG_PRESSAO.h: 59: }
 10892                           ;tela_CONFIG_PRESSAO.h: 60: if (sp_principal > 99) {
 10893                           
 10894                           ; BSR set to: 0
 10895  00162E  0E63               	movlw	99
 10896  001630  0100               	movlb	0	; () banked
 10897  001632  65DF               	cpfsgt	_sp_principal& (0+255),b
 10898  001634  D03B               	goto	l861
 10899                           
 10900                           ; BSR set to: 0
 10901                           ;tela_CONFIG_PRESSAO.h: 61: sp_principal = 0;
 10902  001636  0E00               	movlw	0
 10903  001638  6FDF               	movwf	_sp_principal& (0+255),b
 10904                           
 10905                           ; BSR set to: 0
 10906                           ;tela_CONFIG_PRESSAO.h: 62: }
 10907                           ;tela_CONFIG_PRESSAO.h: 63: break;
 10908  00163A  D038               	goto	l861
 10909  00163C  FFFF               	dw	65535	; assembler added errata NOP
 10910                           
 10911                           ; BSR set to: 0
 10912                           ;tela_CONFIG_PRESSAO.h: 65: blink(line4, 12, 18);
 10913                           
 10914                           ; BSR set to: 0
 10915  00163E  0E50               	movlw	low _line4
 10916  001640  6F80               	movwf	blink@line& (0+255),b
 10917  001642  0E01               	movlw	high _line4
 10918  001644  6F81               	movwf	(blink@line+1)& (0+255),b
 10919  001646  0E0C               	movlw	12
 10920  001648  6F82               	movwf	blink@start& (0+255),b
 10921  00164A  0E12               	movlw	18
 10922  00164C  6F83               	movwf	blink@end& (0+255),b
 10923  00164E  ECD8  F03C         	call	_blink	;wreg free
 10924                           
 10925                           ;tela_CONFIG_PRESSAO.h: 66: if (btPress(3)) {
 10926  001652  0E03               	movlw	3
 10927  001654  EC6E  F01E         	call	_btPress
 10928  001658  0900               	iorlw	0
 10929  00165A  B4D8               	btfsc	status,2,c
 10930  00165C  D002               	goto	l871
 10931                           
 10932                           ;tela_CONFIG_PRESSAO.h: 67: sp_estacionaria++;
 10933  00165E  0100               	movlb	0	; () banked
 10934  001660  2BDE               	incf	_sp_estacionaria& (0+255),f,b
 10935  001662                     l871:
 10936  001662  FFFF               	dw	65535	; assembler added errata NOP
 10937                           
 10938                           ;tela_CONFIG_PRESSAO.h: 68: }
 10939                           ;tela_CONFIG_PRESSAO.h: 69: if (btPress(2)) {
 10940                           
 10941                           ; BSR set to: 0
 10942  001664  0E02               	movlw	2
 10943  001666  EC6E  F01E         	call	_btPress
 10944  00166A  0900               	iorlw	0
 10945  00166C  B4D8               	btfsc	status,2,c
 10946  00166E  D002               	goto	l872
 10947                           
 10948                           ;tela_CONFIG_PRESSAO.h: 70: sp_estacionaria--;
 10949  001670  0100               	movlb	0	; () banked
 10950  001672  07DE               	decf	_sp_estacionaria& (0+255),f,b
 10951  001674                     l872:
 10952  001674  FFFF               	dw	65535	; assembler added errata NOP
 10953                           
 10954                           ;tela_CONFIG_PRESSAO.h: 71: }
 10955                           ;tela_CONFIG_PRESSAO.h: 72: if (sp_estacionaria > 99) {
 10956                           
 10957                           ; BSR set to: 0
 10958  001676  0E63               	movlw	99
 10959  001678  0100               	movlb	0	; () banked
 10960  00167A  65DE               	cpfsgt	_sp_estacionaria& (0+255),b
 10961  00167C  D017               	goto	l861
 10962                           
 10963                           ; BSR set to: 0
 10964                           ;tela_CONFIG_PRESSAO.h: 73: sp_estacionaria = 0;
 10965  00167E  0E00               	movlw	0
 10966  001680  6FDE               	movwf	_sp_estacionaria& (0+255),b
 10967                           
 10968                           ; BSR set to: 0
 10969                           ;tela_CONFIG_PRESSAO.h: 74: }
 10970                           ;tela_CONFIG_PRESSAO.h: 75: break;
 10971  001682  D014               	goto	l861
 10972  001684  FFFF               	dw	65535	; assembler added errata NOP
 10973                           
 10974                           ; BSR set to: 0
 10975                           
 10976                           ; BSR set to: 0
 10977  001686  0E00               	movlw	0
 10978  001688  6FDA               	movwf	_option_posi& (0+255),b
 10979                           
 10980                           ; BSR set to: 0
 10981                           ;tela_CONFIG_PRESSAO.h: 78: }
 10982                           
 10983                           ;tela_CONFIG_PRESSAO.h: 77: break;
 10984  00168A  D010               	goto	l861
 10985  00168C                     l856:
 10986  00168C  FFFF               	dw	65535	; assembler added errata NOP
 10987                           
 10988                           ; BSR set to: 0
 10989  00168E  0100               	movlb	0	; () banked
 10990  001690  51DA               	movf	_option_posi& (0+255),w,b
 10991                           
 10992                           ; Switch size 1, requested type "space"
 10993                           ; Number of cases is 4, Range of values is 0 to 3
 10994                           ; switch strategies available:
 10995                           ; Name         Instructions Cycles
 10996                           ; simple_byte           13     7 (average)
 10997                           ;	Chosen strategy is simple_byte
 10998  001692  0A00               	xorlw	0	; case 0
 10999  001694  B4D8               	btfsc	status,2,c
 11000  001696  D766               	goto	l857
 11001  001698  0A01               	xorlw	1	; case 1
 11002  00169A  B4D8               	btfsc	status,2,c
 11003  00169C  D787               	goto	l862
 11004  00169E  0A03               	xorlw	3	; case 2
 11005  0016A0  B4D8               	btfsc	status,2,c
 11006  0016A2  D7A8               	goto	l866
 11007  0016A4  0A01               	xorlw	1	; case 3
 11008  0016A6  B4D8               	btfsc	status,2,c
 11009  0016A8  D7C9               	goto	l870
 11010  0016AA  D7EC               	goto	l874
 11011  0016AC                     l861:
 11012  0016AC  FFFF               	dw	65535	; assembler added errata NOP
 11013                           
 11014                           ; BSR set to: 0
 11015                           
 11016                           ; BSR set to: 0
 11017  0016AE  0012               	return		;funcret
 11018  0016B0  FFFF               	dw	65535	; errata NOP
 11019  0016B2                     __end_of_ajusteSP_Bombas:
 11020                           	opt stack 0
 11021                           tblptru	equ	0xFF8
 11022                           tblptrh	equ	0xFF7
 11023                           tblptrl	equ	0xFF6
 11024                           tablat	equ	0xFF5
 11025                           prodh	equ	0xFF4
 11026                           prodl	equ	0xFF3
 11027                           intcon	equ	0xFF2
 11028                           indf0	equ	0xFEF
 11029                           postinc0	equ	0xFEE
 11030                           fsr0h	equ	0xFEA
 11031                           fsr0l	equ	0xFE9
 11032                           wreg	equ	0xFE8
 11033                           postdec1	equ	0xFE5
 11034                           fsr1l	equ	0xFE1
 11035                           indf2	equ	0xFDF
 11036                           postinc2	equ	0xFDE
 11037                           fsr2h	equ	0xFDA
 11038                           fsr2l	equ	0xFD9
 11039                           status	equ	0xFD8
 11040                           
 11041 ;; *************** function _blink *****************
 11042 ;; Defined at:
 11043 ;;		line 173 in file "lcd.h"
 11044 ;; Parameters:    Size  Location     Type
 11045 ;;  line            2    0[BANK0 ] PTR unsigned char 
 11046 ;;		 -> line4(21), line3(21), line2(21), line1(21), 
 11047 ;;  start           1    2[BANK0 ] unsigned char 
 11048 ;;  end             1    3[BANK0 ] unsigned char 
 11049 ;; Auto vars:     Size  Location     Type
 11050 ;;  i               1    4[BANK0 ] unsigned char 
 11051 ;; Return value:  Size  Location     Type
 11052 ;;                  1    wreg      void 
 11053 ;; Registers used:
 11054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11055 ;; Tracked objects:
 11056 ;;		On entry : 0/0
 11057 ;;		On exit  : 0/0
 11058 ;;		Unchanged: 0/0
 11059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11060 ;;      Params:         0       4       0       0       0       0       0
 11061 ;;      Locals:         0       1       0       0       0       0       0
 11062 ;;      Temps:          0       0       0       0       0       0       0
 11063 ;;      Totals:         0       5       0       0       0       0       0
 11064 ;;Total ram usage:        5 bytes
 11065 ;; Hardware stack levels used:    1
 11066 ;; Hardware stack levels required when called:    6
 11067 ;; This function calls:
 11068 ;;		Nothing
 11069 ;; This function is called by:
 11070 ;;		_telaPrincipal
 11071 ;;		_tela_ajusteRTC
 11072 ;;		_tela_testeBombas
 11073 ;;		_configuraTelefones
 11074 ;;		_configurarEstacionaria
 11075 ;;		_ajusteSP_Bombas
 11076 ;; This function uses a non-reentrant model
 11077 ;;
 11078                           
 11079                           	psect	text36
 11080  0079B0                     __ptext36:
 11081                           	opt stack 0
 11082  0079B0                     _blink:
 11083                           	opt stack 0
 11084  0079B0  FFFF               	dw	65535	; assembler added errata NOP
 11085                           
 11086                           ;lcd.h: 174: if (blinkk) {
 11087                           
 11088                           ; BSR set to: 0
 11089                           ;incstack = 0
 11090  0079B2  A079               	btfss	_blinkk/(0+8),_blinkk& (0+7),c
 11091  0079B4  D018               	goto	u6200
 11092                           
 11093                           ;lcd.h: 175: char i = 0;
 11094  0079B6  0E00               	movlw	0
 11095  0079B8  0100               	movlb	0	; () banked
 11096  0079BA  6F84               	movwf	blink@i& (0+255),b
 11097                           
 11098                           ; BSR set to: 0
 11099                           ;lcd.h: 176: for (i = (--start); i < end; i++) {
 11100  0079BC  0782               	decf	blink@start& (0+255),f,b
 11101  0079BE  C082  F084         	movff	blink@start,blink@i
 11102  0079C2  D00C               	goto	l681
 11103  0079C4  FFFF               	dw	65535	; assembler added errata NOP
 11104                           
 11105                           ; BSR set to: 0
 11106                           ;lcd.h: 177: line[i] = ' ';
 11107                           
 11108                           ; BSR set to: 0
 11109  0079C6  5184               	movf	blink@i& (0+255),w,b
 11110  0079C8  0D01               	mullw	1
 11111  0079CA  50F3               	movf	prodl,w,c
 11112  0079CC  2580               	addwf	blink@line& (0+255),w,b
 11113  0079CE  6ED9               	movwf	fsr2l,c
 11114  0079D0  50F4               	movf	prodh,w,c
 11115  0079D2  2181               	addwfc	(blink@line+1)& (0+255),w,b
 11116  0079D4  6EDA               	movwf	fsr2h,c
 11117  0079D6  0E20               	movlw	32
 11118  0079D8  6EDF               	movwf	indf2,c
 11119                           
 11120                           ; BSR set to: 0
 11121  0079DA  2B84               	incf	blink@i& (0+255),f,b
 11122  0079DC                     l681:
 11123  0079DC  FFFF               	dw	65535	; assembler added errata NOP
 11124                           
 11125                           ; BSR set to: 0
 11126                           
 11127                           ; BSR set to: 0
 11128  0079DE  5183               	movf	blink@end& (0+255),w,b
 11129  0079E0  5D84               	subwf	blink@i& (0+255),w,b
 11130  0079E2  A0D8               	btfss	status,0,c
 11131  0079E4  D7EF               	goto	l682
 11132  0079E6                     u6200:
 11133  0079E6  FFFF               	dw	65535	; assembler added errata NOP
 11134                           
 11135                           ; BSR set to: 0
 11136                           
 11137                           ; BSR set to: 0
 11138  0079E8  0012               	return		;funcret
 11139  0079EA  FFFF               	dw	65535	; errata NOP
 11140  0079EC                     __end_of_blink:
 11141                           	opt stack 0
 11142                           tblptru	equ	0xFF8
 11143                           tblptrh	equ	0xFF7
 11144                           tblptrl	equ	0xFF6
 11145                           tablat	equ	0xFF5
 11146                           prodh	equ	0xFF4
 11147                           prodl	equ	0xFF3
 11148                           intcon	equ	0xFF2
 11149                           indf0	equ	0xFEF
 11150                           postinc0	equ	0xFEE
 11151                           fsr0h	equ	0xFEA
 11152                           fsr0l	equ	0xFE9
 11153                           wreg	equ	0xFE8
 11154                           postdec1	equ	0xFE5
 11155                           fsr1l	equ	0xFE1
 11156                           indf2	equ	0xFDF
 11157                           postinc2	equ	0xFDE
 11158                           fsr2h	equ	0xFDA
 11159                           fsr2l	equ	0xFD9
 11160                           status	equ	0xFD8
 11161                           
 11162 ;; *************** function _acaoTesteBomasProgramado *****************
 11163 ;; Defined at:
 11164 ;;		line 112 in file "controle.h"
 11165 ;; Parameters:    Size  Location     Type
 11166 ;;		None
 11167 ;; Auto vars:     Size  Location     Type
 11168 ;;		None
 11169 ;; Return value:  Size  Location     Type
 11170 ;;                  1    wreg      void 
 11171 ;; Registers used:
 11172 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11173 ;; Tracked objects:
 11174 ;;		On entry : 0/0
 11175 ;;		On exit  : 0/0
 11176 ;;		Unchanged: 0/0
 11177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11178 ;;      Params:         0       0       0       0       0       0       0
 11179 ;;      Locals:         0       0       0       0       0       0       0
 11180 ;;      Temps:          0       0       0       0       0       0       0
 11181 ;;      Totals:         0       0       0       0       0       0       0
 11182 ;;Total ram usage:        0 bytes
 11183 ;; Hardware stack levels used:    1
 11184 ;; Hardware stack levels required when called:   11
 11185 ;; This function calls:
 11186 ;;		_acaoTesteBombas
 11187 ;;		_writeEEPROM_ext
 11188 ;; This function is called by:
 11189 ;;		_main
 11190 ;; This function uses a non-reentrant model
 11191 ;;
 11192                           
 11193                           	psect	text37
 11194  007974                     __ptext37:
 11195                           	opt stack 0
 11196  007974                     _acaoTesteBomasProgramado:
 11197                           	opt stack 0
 11198  007974  FFFF               	dw	65535	; assembler added errata NOP
 11199                           
 11200                           ;controle.h: 113: if (dias_restante_teste >= intervalo_teste_dia && intervalo_teste_dia 
      +                          != 0) {
 11201                           
 11202                           ;incstack = 0
 11203  007976  0100               	movlb	0	; () banked
 11204  007978  51EB               	movf	_intervalo_teste_dia& (0+255),w,b
 11205  00797A  5DEA               	subwf	_dias_restante_teste& (0+255),w,b
 11206  00797C  A0D8               	btfss	status,0,c
 11207  00797E  D015               	goto	l539
 11208                           
 11209                           ; BSR set to: 0
 11210  007980  51EB               	movf	_intervalo_teste_dia& (0+255),w,b
 11211  007982  B4D8               	btfsc	status,2,c
 11212  007984  D012               	goto	l539
 11213                           
 11214                           ; BSR set to: 0
 11215                           ;controle.h: 114: if (_hor == horario_de_teste) {
 11216  007986  51E9               	movf	_horario_de_teste& (0+255),w,b
 11217  007988  19F1               	xorwf	__hor& (0+255),w,b
 11218  00798A  A4D8               	btfss	status,2,c
 11219  00798C  D00E               	goto	l539
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;controle.h: 115: dias_restante_teste = 0;
 11223  00798E  0E00               	movlw	0
 11224  007990  6FEA               	movwf	_dias_restante_teste& (0+255),b
 11225                           
 11226                           ; BSR set to: 0
 11227                           ;controle.h: 116: writeEEPROM_ext(10, dias_restante_teste);
 11228  007992  C0EA  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
 11229  007996  0E0A               	movlw	10
 11230  007998  EC98  F03D         	call	_writeEEPROM_ext
 11231                           
 11232                           ;controle.h: 117: teste_run = 2;
 11233  00799C  0E02               	movlw	2
 11234  00799E  0100               	movlb	0	; () banked
 11235  0079A0  6FDC               	movwf	_teste_run& (0+255),b
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;controle.h: 118: menu_posi = 28;
 11239  0079A2  0E1C               	movlw	28
 11240  0079A4  6FD9               	movwf	_menu_posi& (0+255),b
 11241                           
 11242                           ; BSR set to: 0
 11243                           ;controle.h: 119: acaoTesteBombas();
 11244  0079A6  EC7E  F006         	call	_acaoTesteBombas	;wreg free
 11245  0079AA                     l539:
 11246  0079AA  FFFF               	dw	65535	; assembler added errata NOP
 11247  0079AC  0012               	return		;funcret
 11248  0079AE  FFFF               	dw	65535	; errata NOP
 11249  0079B0                     __end_of_acaoTesteBomasProgramado:
 11250                           	opt stack 0
 11251                           tblptru	equ	0xFF8
 11252                           tblptrh	equ	0xFF7
 11253                           tblptrl	equ	0xFF6
 11254                           tablat	equ	0xFF5
 11255                           prodh	equ	0xFF4
 11256                           prodl	equ	0xFF3
 11257                           intcon	equ	0xFF2
 11258                           indf0	equ	0xFEF
 11259                           postinc0	equ	0xFEE
 11260                           fsr0h	equ	0xFEA
 11261                           fsr0l	equ	0xFE9
 11262                           wreg	equ	0xFE8
 11263                           postdec1	equ	0xFE5
 11264                           fsr1l	equ	0xFE1
 11265                           indf2	equ	0xFDF
 11266                           postinc2	equ	0xFDE
 11267                           fsr2h	equ	0xFDA
 11268                           fsr2l	equ	0xFD9
 11269                           status	equ	0xFD8
 11270                           
 11271 ;; *************** function _acaoTesteBombas *****************
 11272 ;; Defined at:
 11273 ;;		line 124 in file "controle.h"
 11274 ;; Parameters:    Size  Location     Type
 11275 ;;		None
 11276 ;; Auto vars:     Size  Location     Type
 11277 ;;  i               1   83[BANK0 ] unsigned char 
 11278 ;; Return value:  Size  Location     Type
 11279 ;;                  1    wreg      void 
 11280 ;; Registers used:
 11281 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11282 ;; Tracked objects:
 11283 ;;		On entry : 0/0
 11284 ;;		On exit  : 0/0
 11285 ;;		Unchanged: 0/0
 11286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11287 ;;      Params:         0       0       0       0       0       0       0
 11288 ;;      Locals:         0       9       0       0       0       0       0
 11289 ;;      Temps:          0       7       0       0       0       0       0
 11290 ;;      Totals:         0      16       0       0       0       0       0
 11291 ;;Total ram usage:       16 bytes
 11292 ;; Hardware stack levels used:    1
 11293 ;; Hardware stack levels required when called:   10
 11294 ;; This function calls:
 11295 ;;		_btPress
 11296 ;;		_clearShiftREG
 11297 ;;		_intToFloatStr
 11298 ;;		_partidaBombaEstacionaria
 11299 ;;		_salvarLOG
 11300 ;;		_sprintf
 11301 ;;		_writeEEPROM_ext
 11302 ;; This function is called by:
 11303 ;;		_acaoTesteBomasProgramado
 11304 ;;		_main
 11305 ;; This function uses a non-reentrant model
 11306 ;;
 11307                           
 11308                           	psect	text38
 11309  000CFC                     __ptext38:
 11310                           	opt stack 0
 11311  000CFC                     _acaoTesteBombas:
 11312                           	opt stack 0
 11313  000CFC  FFFF               	dw	65535	; assembler added errata NOP
 11314                           
 11315                           ;controle.h: 125: if (btPress(1)) {
 11316                           
 11317                           ;incstack = 0
 11318  000CFE  0E01               	movlw	1
 11319  000D00  EC6E  F01E         	call	_btPress
 11320  000D04  0900               	iorlw	0
 11321  000D06  B4D8               	btfsc	status,2,c
 11322  000D08  D01F               	goto	u5970
 11323                           
 11324                           ;controle.h: 126: teste_run = 0;
 11325  000D0A  0E00               	movlw	0
 11326  000D0C  0100               	movlb	0	; () banked
 11327  000D0E  6FDC               	movwf	_teste_run& (0+255),b
 11328                           
 11329                           ;controle.h: 127: tempo_teste_bombas = 300;
 11330  000D10  0E01               	movlw	1
 11331  000D12  6FF8               	movwf	(_tempo_teste_bombas+1)& (0+255),b
 11332  000D14  0E2C               	movlw	44
 11333  000D16  6FF7               	movwf	_tempo_teste_bombas& (0+255),b
 11334                           
 11335                           ; BSR set to: 0
 11336                           ;controle.h: 128: menu_posi = _menu_posi;
 11337  000D18  C0D8  F0D9         	movff	__menu_posi,_menu_posi
 11338                           
 11339                           ;controle.h: 129: char i = 0;
 11340  000D1C  0E00               	movlw	0
 11341  000D1E  6FD3               	movwf	acaoTesteBombas@i& (0+255),b
 11342                           
 11343                           ;controle.h: 130: for (i = 0; i < 8; i++) {
 11344  000D20  0E00               	movlw	0
 11345  000D22  6FD3               	movwf	acaoTesteBombas@i& (0+255),b
 11346  000D24                     l5716:
 11347  000D24  FFFF               	dw	65535	; assembler added errata NOP
 11348                           
 11349                           ; BSR set to: 0
 11350  000D26  0E07               	movlw	7
 11351  000D28  65D3               	cpfsgt	acaoTesteBombas@i& (0+255),b
 11352  000D2A  D001               	goto	l544
 11353  000D2C  D00D               	goto	u5970
 11354  000D2E                     l544:
 11355  000D2E  FFFF               	dw	65535	; assembler added errata NOP
 11356                           
 11357                           ; BSR set to: 0
 11358                           ;controle.h: 131: shift[i] = 0;
 11359                           
 11360                           ; BSR set to: 0
 11361  000D30  51D3               	movf	acaoTesteBombas@i& (0+255),w,b
 11362  000D32  0D01               	mullw	1
 11363  000D34  0E44               	movlw	low _shift
 11364  000D36  24F3               	addwf	prodl,w,c
 11365  000D38  6ED9               	movwf	fsr2l,c
 11366  000D3A  0E00               	movlw	high _shift
 11367  000D3C  20F4               	addwfc	prodh,w,c
 11368  000D3E  6EDA               	movwf	fsr2h,c
 11369  000D40  0E00               	movlw	0
 11370  000D42  6EDF               	movwf	indf2,c
 11371                           
 11372                           ; BSR set to: 0
 11373  000D44  2BD3               	incf	acaoTesteBombas@i& (0+255),f,b
 11374  000D46  D7EE               	goto	l5716
 11375  000D48                     u5970:
 11376  000D48  FFFF               	dw	65535	; assembler added errata NOP
 11377                           
 11378                           ;controle.h: 132: }
 11379                           ;controle.h: 133: }
 11380                           ;controle.h: 134: if (_sec_aux != _sec) {
 11381                           
 11382                           ; BSR set to: 0
 11383                           
 11384                           ; BSR set to: 0
 11385  000D4A  0100               	movlb	0	; () banked
 11386  000D4C  51F3               	movf	__sec& (0+255),w,b
 11387  000D4E  19EC               	xorwf	__sec_aux& (0+255),w,b
 11388  000D50  B4D8               	btfsc	status,2,c
 11389  000D52  D02A               	goto	l551
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;controle.h: 135: _sec_aux = _sec;
 11393  000D54  C0F3  F0EC         	movff	__sec,__sec_aux
 11394                           
 11395                           ; BSR set to: 0
 11396                           ;controle.h: 136: tempo_teste_bombas--;
 11397  000D58  07F7               	decf	_tempo_teste_bombas& (0+255),f,b
 11398  000D5A  A0D8               	btfss	status,0,c
 11399  000D5C  07F8               	decf	(_tempo_teste_bombas+1)& (0+255),f,b
 11400                           
 11401                           ; BSR set to: 0
 11402                           ;controle.h: 137: if (tempo_teste_bombas == 250) {
 11403  000D5E  0EFA               	movlw	250
 11404  000D60  19F7               	xorwf	_tempo_teste_bombas& (0+255),w,b
 11405  000D62  11F8               	iorwf	(_tempo_teste_bombas+1)& (0+255),w,b
 11406  000D64  A4D8               	btfss	status,2,c
 11407  000D66  D007               	goto	l547
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;controle.h: 138: teste_run = 5;
 11411  000D68  0E05               	movlw	5
 11412  000D6A  6FDC               	movwf	_teste_run& (0+255),b
 11413                           
 11414                           ;controle.h: 139: status_jockey = 0;
 11415  000D6C  0E00               	movlw	0
 11416  000D6E  6FFC               	movwf	_status_jockey& (0+255),b
 11417                           
 11418                           ;controle.h: 140: shift[6] = 0;
 11419  000D70  0E00               	movlw	0
 11420  000D72  6E4A               	movwf	_shift+6,c
 11421                           
 11422                           ;controle.h: 141: } else if (tempo_teste_bombas == 170) {
 11423  000D74  D019               	goto	l551
 11424  000D76                     l547:
 11425  000D76  FFFF               	dw	65535	; assembler added errata NOP
 11426                           
 11427                           ; BSR set to: 0
 11428                           
 11429                           ; BSR set to: 0
 11430  000D78  0EAA               	movlw	170
 11431  000D7A  19F7               	xorwf	_tempo_teste_bombas& (0+255),w,b
 11432  000D7C  11F8               	iorwf	(_tempo_teste_bombas+1)& (0+255),w,b
 11433  000D7E  A4D8               	btfss	status,2,c
 11434  000D80  D007               	goto	l549
 11435                           
 11436                           ; BSR set to: 0
 11437                           ;controle.h: 142: teste_run = 8;
 11438  000D82  0E08               	movlw	8
 11439  000D84  6FDC               	movwf	_teste_run& (0+255),b
 11440                           
 11441                           ;controle.h: 143: status_principal = 0;
 11442  000D86  0E00               	movlw	0
 11443  000D88  6FFB               	movwf	_status_principal& (0+255),b
 11444                           
 11445                           ;controle.h: 144: shift[5] = 0;
 11446  000D8A  0E00               	movlw	0
 11447  000D8C  6E49               	movwf	_shift+5,c
 11448                           
 11449                           ;controle.h: 145: } else if (tempo_teste_bombas == 1) {
 11450  000D8E  D00C               	goto	l551
 11451  000D90                     l549:
 11452  000D90  FFFF               	dw	65535	; assembler added errata NOP
 11453                           
 11454                           ; BSR set to: 0
 11455                           
 11456                           ; BSR set to: 0
 11457  000D92  05F7               	decf	_tempo_teste_bombas& (0+255),w,b
 11458  000D94  11F8               	iorwf	(_tempo_teste_bombas+1)& (0+255),w,b
 11459  000D96  A4D8               	btfss	status,2,c
 11460  000D98  D007               	goto	l551
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;controle.h: 146: teste_run = 12;
 11464  000D9A  0E0C               	movlw	12
 11465  000D9C  6FDC               	movwf	_teste_run& (0+255),b
 11466                           
 11467                           ;controle.h: 147: status_estacionaria = 0;
 11468  000D9E  0E00               	movlw	0
 11469  000DA0  6FFA               	movwf	_status_estacionaria& (0+255),b
 11470                           
 11471                           ; BSR set to: 0
 11472                           ;controle.h: 148: partidaBombaEstacionaria(0);
 11473  000DA2  0E00               	movlw	0
 11474  000DA4  ECC1  F017         	call	_partidaBombaEstacionaria
 11475  000DA8                     l551:
 11476  000DA8  FFFF               	dw	65535	; assembler added errata NOP
 11477                           
 11478                           ;controle.h: 149: }
 11479                           ;controle.h: 150: }
 11480                           ;controle.h: 151: if (teste_run < 12) {
 11481  000DAA  0E0C               	movlw	12
 11482  000DAC  0100               	movlb	0	; () banked
 11483  000DAE  61DC               	cpfslt	_teste_run& (0+255),b
 11484  000DB0  D169               	goto	l553
 11485                           
 11486                           ; BSR set to: 0
 11487                           ;controle.h: 152: sprintf(line1, "   Aguarde.. %3dsec", tempo_teste_bombas);
 11488  000DB2  0E8F               	movlw	low _line1
 11489  000DB4  6FA1               	movwf	sprintf@wh& (0+255),b
 11490  000DB6  0E01               	movlw	high _line1
 11491  000DB8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11492  000DBA  0E4F               	movlw	low STR_38
 11493  000DBC  6FA3               	movwf	sprintf@f& (0+255),b
 11494  000DBE  0E7D               	movlw	high STR_38
 11495  000DC0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11496  000DC2  C0F7  F0A5         	movff	_tempo_teste_bombas,?_sprintf+4
 11497  000DC6  C0F8  F0A6         	movff	_tempo_teste_bombas+1,?_sprintf+5
 11498  000DCA  ECBB  F03D         	call	_sprintf	;wreg free
 11499                           
 11500                           ;controle.h: 153: sprintf(line2, " Pressao %s bar", intToFloatStr(pressao));
 11501  000DCE  0100               	movlb	0	; () banked
 11502  000DD0  51FD               	movf	_pressao& (0+255),w,b
 11503  000DD2  ECB5  F01D         	call	_intToFloatStr
 11504  000DD6  C0B7  F0CB         	movff	?_intToFloatStr,_acaoTesteBombas$2358
 11505  000DDA  C0B8  F0CC         	movff	?_intToFloatStr+1,_acaoTesteBombas$2358+1
 11506                           
 11507                           ;controle.h: 153: sprintf(line2, " Pressao %s bar", intToFloatStr(pressao));
 11508  000DDE  0E7A               	movlw	low _line2
 11509  000DE0  0100               	movlb	0	; () banked
 11510  000DE2  6FA1               	movwf	sprintf@wh& (0+255),b
 11511  000DE4  0E01               	movlw	high _line2
 11512  000DE6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11513  000DE8  0E66               	movlw	low STR_39
 11514  000DEA  6FA3               	movwf	sprintf@f& (0+255),b
 11515  000DEC  0E7E               	movlw	high STR_39
 11516  000DEE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11517  000DF0  C0CB  F0A5         	movff	_acaoTesteBombas$2358,?_sprintf+4
 11518  000DF4  C0CC  F0A6         	movff	_acaoTesteBombas$2358+1,?_sprintf+5
 11519  000DF8  ECBB  F03D         	call	_sprintf	;wreg free
 11520                           
 11521                           ;controle.h: 154: }
 11522                           ;controle.h: 155: switch (teste_run) {
 11523  000DFC  D143               	goto	l553
 11524  000DFE  FFFF               	dw	65535	; assembler added errata NOP
 11525                           
 11526                           ;controle.h: 157: dias_restante_teste = 0;
 11527  000E00  0E00               	movlw	0
 11528  000E02  0100               	movlb	0	; () banked
 11529  000E04  6FEA               	movwf	_dias_restante_teste& (0+255),b
 11530                           
 11531                           ; BSR set to: 0
 11532                           ;controle.h: 158: writeEEPROM_ext(10, dias_restante_teste);
 11533  000E06  C0EA  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
 11534  000E0A  0E0A               	movlw	10
 11535  000E0C  EC98  F03D         	call	_writeEEPROM_ext
 11536                           
 11537                           ;controle.h: 159: shift[2] = 1;
 11538  000E10  0E01               	movlw	1
 11539  000E12  6E46               	movwf	_shift+2,c
 11540                           
 11541                           ;controle.h: 160: teste_run = 3;
 11542  000E14  0E03               	movlw	3
 11543  000E16  0100               	movlb	0	; () banked
 11544  000E18  D082               	goto	L29
 11545  000E1A  FFFF               	dw	65535	; assembler added errata NOP
 11546                           
 11547                           ; BSR set to: 0
 11548                           ;controle.h: 163: if (pressao <= (sp_pressao_rede - 10)) {
 11549                           
 11550                           ; BSR set to: 0
 11551  000E1C  51FD               	movf	_pressao& (0+255),w,b
 11552  000E1E  6FC4               	movwf	??_acaoTesteBombas& (0+255),b
 11553  000E20  6BC5               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11554  000E22  0EF6               	movlw	246
 11555  000E24  6FC6               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11556  000E26  0EFF               	movlw	255
 11557  000E28  6FC7               	movwf	(??_acaoTesteBombas+3)& (0+255),b
 11558  000E2A  51E1               	movf	_sp_pressao_rede& (0+255),w,b
 11559  000E2C  6FC8               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11560  000E2E  6BC9               	clrf	(??_acaoTesteBombas+5)& (0+255),b
 11561  000E30  51C6               	movf	(??_acaoTesteBombas+2)& (0+255),w,b
 11562  000E32  27C8               	addwf	(??_acaoTesteBombas+4)& (0+255),f,b
 11563  000E34  51C7               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11564  000E36  23C9               	addwfc	(??_acaoTesteBombas+5)& (0+255),f,b
 11565  000E38  51C4               	movf	??_acaoTesteBombas& (0+255),w,b
 11566  000E3A  5DC8               	subwf	(??_acaoTesteBombas+4)& (0+255),w,b
 11567  000E3C  51C9               	movf	(??_acaoTesteBombas+5)& (0+255),w,b
 11568  000E3E  0A80               	xorlw	128
 11569  000E40  6FCA               	movwf	(??_acaoTesteBombas+6)& (0+255),b
 11570  000E42  51C5               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11571  000E44  0A80               	xorlw	128
 11572  000E46  59CA               	subwfb	(??_acaoTesteBombas+6)& (0+255),w,b
 11573  000E48  A0D8               	btfss	status,0,c
 11574  000E4A  D141               	goto	l555
 11575                           
 11576                           ; BSR set to: 0
 11577                           ;controle.h: 164: shift[2] = 0;
 11578  000E4C  0E00               	movlw	0
 11579  000E4E  6E46               	movwf	_shift+2,c
 11580                           
 11581                           ;controle.h: 165: shift[6] = 1;
 11582  000E50  0E01               	movlw	1
 11583  000E52  6E4A               	movwf	_shift+6,c
 11584                           
 11585                           ;controle.h: 166: teste_run = 4;
 11586  000E54  0E04               	movlw	4
 11587  000E56  D063               	goto	L29
 11588  000E58  FFFF               	dw	65535	; assembler added errata NOP
 11589                           
 11590                           ; BSR set to: 0
 11591                           ;controle.h: 170: if (pressao >= sp_pressao_rede) {
 11592                           
 11593                           ; BSR set to: 0
 11594  000E5A  51E1               	movf	_sp_pressao_rede& (0+255),w,b
 11595  000E5C  5DFD               	subwf	_pressao& (0+255),w,b
 11596  000E5E  A0D8               	btfss	status,0,c
 11597  000E60  D136               	goto	l555
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;controle.h: 171: shift[6] = 0;
 11601  000E62  0E00               	movlw	0
 11602  000E64  6E4A               	movwf	_shift+6,c
 11603                           
 11604                           ;controle.h: 172: status_jockey = 1;
 11605  000E66  0E01               	movlw	1
 11606  000E68  6FFC               	movwf	_status_jockey& (0+255),b
 11607                           
 11608                           ;controle.h: 173: teste_run = 5;
 11609  000E6A  0E05               	movlw	5
 11610  000E6C  6FDC               	movwf	_teste_run& (0+255),b
 11611                           
 11612                           ;controle.h: 174: tempo_teste_bombas = 249;
 11613  000E6E  0E00               	movlw	0
 11614  000E70  6FF8               	movwf	(_tempo_teste_bombas+1)& (0+255),b
 11615  000E72  0EF9               	movlw	249
 11616  000E74  D08B               	goto	L28
 11617  000E76  FFFF               	dw	65535	; assembler added errata NOP
 11618                           
 11619                           ; BSR set to: 0
 11620                           ;controle.h: 178: shift[2] = 1;
 11621                           
 11622                           ; BSR set to: 0
 11623  000E78  0E01               	movlw	1
 11624  000E7A  6E46               	movwf	_shift+2,c
 11625                           
 11626                           ;controle.h: 179: teste_run = 6;
 11627  000E7C  0E06               	movlw	6
 11628  000E7E  D04F               	goto	L29
 11629  000E80  FFFF               	dw	65535	; assembler added errata NOP
 11630                           
 11631                           ; BSR set to: 0
 11632                           ;controle.h: 182: if (pressao <= (sp_pressao_rede - 10)) {
 11633                           
 11634                           ; BSR set to: 0
 11635  000E82  51FD               	movf	_pressao& (0+255),w,b
 11636  000E84  6FC4               	movwf	??_acaoTesteBombas& (0+255),b
 11637  000E86  6BC5               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11638  000E88  0EF6               	movlw	246
 11639  000E8A  6FC6               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11640  000E8C  0EFF               	movlw	255
 11641  000E8E  6FC7               	movwf	(??_acaoTesteBombas+3)& (0+255),b
 11642  000E90  51E1               	movf	_sp_pressao_rede& (0+255),w,b
 11643  000E92  6FC8               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11644  000E94  6BC9               	clrf	(??_acaoTesteBombas+5)& (0+255),b
 11645  000E96  51C6               	movf	(??_acaoTesteBombas+2)& (0+255),w,b
 11646  000E98  27C8               	addwf	(??_acaoTesteBombas+4)& (0+255),f,b
 11647  000E9A  51C7               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11648  000E9C  23C9               	addwfc	(??_acaoTesteBombas+5)& (0+255),f,b
 11649  000E9E  51C4               	movf	??_acaoTesteBombas& (0+255),w,b
 11650  000EA0  5DC8               	subwf	(??_acaoTesteBombas+4)& (0+255),w,b
 11651  000EA2  51C9               	movf	(??_acaoTesteBombas+5)& (0+255),w,b
 11652  000EA4  0A80               	xorlw	128
 11653  000EA6  6FCA               	movwf	(??_acaoTesteBombas+6)& (0+255),b
 11654  000EA8  51C5               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11655  000EAA  0A80               	xorlw	128
 11656  000EAC  59CA               	subwfb	(??_acaoTesteBombas+6)& (0+255),w,b
 11657  000EAE  A0D8               	btfss	status,0,c
 11658  000EB0  D10E               	goto	l555
 11659                           
 11660                           ; BSR set to: 0
 11661                           ;controle.h: 183: shift[5] = 1;
 11662  000EB2  0E01               	movlw	1
 11663  000EB4  6E49               	movwf	_shift+5,c
 11664                           
 11665                           ;controle.h: 184: shift[2] = 0;
 11666  000EB6  0E00               	movlw	0
 11667  000EB8  6E46               	movwf	_shift+2,c
 11668                           
 11669                           ;controle.h: 185: teste_run = 7;
 11670  000EBA  0E07               	movlw	7
 11671  000EBC  D030               	goto	L29
 11672  000EBE  FFFF               	dw	65535	; assembler added errata NOP
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;controle.h: 189: if (pressao >= sp_pressao_rede) {
 11676                           
 11677                           ; BSR set to: 0
 11678  000EC0  51E1               	movf	_sp_pressao_rede& (0+255),w,b
 11679  000EC2  5DFD               	subwf	_pressao& (0+255),w,b
 11680  000EC4  A0D8               	btfss	status,0,c
 11681  000EC6  D103               	goto	l555
 11682                           
 11683                           ; BSR set to: 0
 11684                           ;controle.h: 190: shift[5] = 0;
 11685  000EC8  0E00               	movlw	0
 11686  000ECA  6E49               	movwf	_shift+5,c
 11687                           
 11688                           ;controle.h: 191: status_principal = 1;
 11689  000ECC  0E01               	movlw	1
 11690  000ECE  6FFB               	movwf	_status_principal& (0+255),b
 11691                           
 11692                           ;controle.h: 192: teste_run = 8;
 11693  000ED0  0E08               	movlw	8
 11694  000ED2  6FDC               	movwf	_teste_run& (0+255),b
 11695                           
 11696                           ;controle.h: 193: tempo_teste_bombas = 169;
 11697  000ED4  0E00               	movlw	0
 11698  000ED6  6FF8               	movwf	(_tempo_teste_bombas+1)& (0+255),b
 11699  000ED8  0EA9               	movlw	169
 11700  000EDA  D058               	goto	L28
 11701  000EDC  FFFF               	dw	65535	; assembler added errata NOP
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;controle.h: 197: shift[2] = 1;
 11705                           
 11706                           ; BSR set to: 0
 11707  000EDE  0E01               	movlw	1
 11708  000EE0  6E46               	movwf	_shift+2,c
 11709                           
 11710                           ;controle.h: 198: teste_run = 9;
 11711  000EE2  0E09               	movlw	9
 11712  000EE4  D01C               	goto	L29
 11713  000EE6  FFFF               	dw	65535	; assembler added errata NOP
 11714                           
 11715                           ; BSR set to: 0
 11716                           ;controle.h: 201: if (pressao <= (sp_pressao_rede - 10)) {
 11717                           
 11718                           ; BSR set to: 0
 11719  000EE8  51FD               	movf	_pressao& (0+255),w,b
 11720  000EEA  6FC4               	movwf	??_acaoTesteBombas& (0+255),b
 11721  000EEC  6BC5               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11722  000EEE  0EF6               	movlw	246
 11723  000EF0  6FC6               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11724  000EF2  0EFF               	movlw	255
 11725  000EF4  6FC7               	movwf	(??_acaoTesteBombas+3)& (0+255),b
 11726  000EF6  51E1               	movf	_sp_pressao_rede& (0+255),w,b
 11727  000EF8  6FC8               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11728  000EFA  6BC9               	clrf	(??_acaoTesteBombas+5)& (0+255),b
 11729  000EFC  51C6               	movf	(??_acaoTesteBombas+2)& (0+255),w,b
 11730  000EFE  27C8               	addwf	(??_acaoTesteBombas+4)& (0+255),f,b
 11731  000F00  51C7               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11732  000F02  23C9               	addwfc	(??_acaoTesteBombas+5)& (0+255),f,b
 11733  000F04  51C4               	movf	??_acaoTesteBombas& (0+255),w,b
 11734  000F06  5DC8               	subwf	(??_acaoTesteBombas+4)& (0+255),w,b
 11735  000F08  51C9               	movf	(??_acaoTesteBombas+5)& (0+255),w,b
 11736  000F0A  0A80               	xorlw	128
 11737  000F0C  6FCA               	movwf	(??_acaoTesteBombas+6)& (0+255),b
 11738  000F0E  51C5               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11739  000F10  0A80               	xorlw	128
 11740  000F12  59CA               	subwfb	(??_acaoTesteBombas+6)& (0+255),w,b
 11741  000F14  A0D8               	btfss	status,0,c
 11742  000F16  D0DB               	goto	l555
 11743                           
 11744                           ; BSR set to: 0
 11745                           ;controle.h: 202: shift[2] = 0;
 11746  000F18  0E00               	movlw	0
 11747  000F1A  6E46               	movwf	_shift+2,c
 11748                           
 11749                           ;controle.h: 203: teste_run = 10;
 11750  000F1C  0E0A               	movlw	10
 11751  000F1E                     L29:
 11752  000F1E  FFFF               	dw	65535	; assembler added errata NOP
 11753  000F20  6FDC               	movwf	_teste_run& (0+255),b
 11754                           
 11755                           ; BSR set to: 0
 11756                           ;controle.h: 204: }
 11757                           ;controle.h: 205: break;
 11758  000F22  D0D5               	goto	l555
 11759  000F24  FFFF               	dw	65535	; assembler added errata NOP
 11760                           
 11761                           ; BSR set to: 0
 11762                           ;controle.h: 207: partidaBombaEstacionaria(1);
 11763                           
 11764                           ; BSR set to: 0
 11765  000F26  0E01               	movlw	1
 11766  000F28  ECC1  F017         	call	_partidaBombaEstacionaria
 11767                           
 11768                           ;controle.h: 208: if ((tempo_coun_estacionaria != _sec) && estacionaria_Ligada == 1) {
 11769  000F2C  0100               	movlb	0	; () banked
 11770  000F2E  51F3               	movf	__sec& (0+255),w,b
 11771  000F30  186D               	xorwf	_tempo_coun_estacionaria,w,c
 11772  000F32  B4D8               	btfsc	status,2,c
 11773  000F34  D006               	goto	l569
 11774                           
 11775                           ; BSR set to: 0
 11776  000F36  05E7               	decf	_estacionaria_Ligada& (0+255),w,b
 11777  000F38  A4D8               	btfss	status,2,c
 11778  000F3A  D003               	goto	l569
 11779                           
 11780                           ; BSR set to: 0
 11781                           ;controle.h: 209: tempo_coun_estacionaria = _sec;
 11782  000F3C  C0F3  F06D         	movff	__sec,_tempo_coun_estacionaria
 11783                           
 11784                           ; BSR set to: 0
 11785                           ;controle.h: 210: tempo_corrido_teste_estacionaria++;
 11786  000F40  2BE3               	incf	_tempo_corrido_teste_estacionaria& (0+255),f,b
 11787  000F42                     l569:
 11788  000F42  FFFF               	dw	65535	; assembler added errata NOP
 11789                           
 11790                           ; BSR set to: 0
 11791                           ;controle.h: 211: }
 11792                           ;controle.h: 212: if (tempo_corrido_teste_estacionaria >= tempo_limite_teste_estacionari
      +                          a) {
 11793                           
 11794                           ; BSR set to: 0
 11795  000F44  51E4               	movf	_tempo_limite_teste_estacionaria& (0+255),w,b
 11796  000F46  5DE3               	subwf	_tempo_corrido_teste_estacionaria& (0+255),w,b
 11797  000F48  A0D8               	btfss	status,0,c
 11798  000F4A  D006               	goto	l570
 11799                           
 11800                           ; BSR set to: 0
 11801                           ;controle.h: 213: status_estacionaria = 1;
 11802  000F4C  0E01               	movlw	1
 11803  000F4E  6FFA               	movwf	_status_estacionaria& (0+255),b
 11804                           
 11805                           ;controle.h: 214: tempo_corrido_teste_estacionaria = 0;
 11806  000F50  0E00               	movlw	0
 11807  000F52  6FE3               	movwf	_tempo_corrido_teste_estacionaria& (0+255),b
 11808                           
 11809                           ;controle.h: 215: teste_run = 11;
 11810  000F54  0E0B               	movlw	11
 11811  000F56  6FDC               	movwf	_teste_run& (0+255),b
 11812  000F58                     l570:
 11813  000F58  FFFF               	dw	65535	; assembler added errata NOP
 11814                           
 11815                           ; BSR set to: 0
 11816                           ;controle.h: 216: }
 11817                           ;controle.h: 217: if (status_estacionaria == 0 || falha == 1) {
 11818  000F5A  51FA               	movf	_status_estacionaria& (0+255),w,b
 11819  000F5C  B4D8               	btfsc	status,2,c
 11820  000F5E  D003               	goto	u6120
 11821                           
 11822                           ; BSR set to: 0
 11823  000F60  05DD               	decf	_falha& (0+255),w,b
 11824  000F62  A4D8               	btfss	status,2,c
 11825  000F64  D0B4               	goto	l555
 11826  000F66                     u6120:
 11827  000F66  FFFF               	dw	65535	; assembler added errata NOP
 11828                           
 11829                           ; BSR set to: 0
 11830                           ;controle.h: 218: teste_run = 11;
 11831                           
 11832                           ; BSR set to: 0
 11833  000F68  0E0B               	movlw	11
 11834  000F6A  6FDC               	movwf	_teste_run& (0+255),b
 11835                           
 11836                           ;controle.h: 219: status_estacionaria = 0;
 11837  000F6C  0E00               	movlw	0
 11838  000F6E  6FFA               	movwf	_status_estacionaria& (0+255),b
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;controle.h: 220: }
 11842                           ;controle.h: 221: break;
 11843  000F70  D0AE               	goto	l555
 11844  000F72  FFFF               	dw	65535	; assembler added errata NOP
 11845                           
 11846                           ; BSR set to: 0
 11847                           ;controle.h: 223: salvarLOG();
 11848                           
 11849                           ; BSR set to: 0
 11850  000F74  EC4C  F01A         	call	_salvarLOG	;wreg free
 11851                           
 11852                           ;controle.h: 224: clearShiftREG();
 11853  000F78  ECD7  F03B         	call	_clearShiftREG	;wreg free
 11854                           
 11855                           ;controle.h: 225: bt_press = 1;
 11856  000F7C  0E01               	movlw	1
 11857  000F7E  6E7A               	movwf	_bt_press,c
 11858                           
 11859                           ;controle.h: 226: teste_run = 12;
 11860  000F80  0E0C               	movlw	12
 11861  000F82  0100               	movlb	0	; () banked
 11862  000F84  6FDC               	movwf	_teste_run& (0+255),b
 11863                           
 11864                           ; BSR set to: 0
 11865                           ;controle.h: 227: tempo_teste_bombas = 1;
 11866  000F86  0E00               	movlw	0
 11867  000F88  6FF8               	movwf	(_tempo_teste_bombas+1)& (0+255),b
 11868  000F8A  0E01               	movlw	1
 11869  000F8C                     L28:
 11870  000F8C  FFFF               	dw	65535	; assembler added errata NOP
 11871  000F8E  6FF7               	movwf	_tempo_teste_bombas& (0+255),b
 11872                           
 11873                           ;controle.h: 228: break;
 11874  000F90  D09E               	goto	l555
 11875  000F92  FFFF               	dw	65535	; assembler added errata NOP
 11876                           
 11877                           ; BSR set to: 0
 11878                           ;controle.h: 230: sprintf(line1, "  TESTE CONCLUIDO!");
 11879                           
 11880                           ; BSR set to: 0
 11881  000F94  0E8F               	movlw	low _line1
 11882  000F96  6FA1               	movwf	sprintf@wh& (0+255),b
 11883  000F98  0E01               	movlw	high _line1
 11884  000F9A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11885  000F9C  0E9F               	movlw	low STR_40
 11886  000F9E  6FA3               	movwf	sprintf@f& (0+255),b
 11887  000FA0  0E7D               	movlw	high STR_40
 11888  000FA2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11889  000FA4  ECBB  F03D         	call	_sprintf	;wreg free
 11890                           
 11891                           ;controle.h: 231: sprintf(line2, " JOKEY : %s", status_jockey == 1 ? "OK" : "ERRO");
 11892  000FA8  0100               	movlb	0	; () banked
 11893  000FAA  05FC               	decf	_status_jockey& (0+255),w,b
 11894  000FAC  B4D8               	btfsc	status,2,c
 11895  000FAE  D004               	goto	l577
 11896                           
 11897                           ; BSR set to: 0
 11898  000FB0  0EEB               	movlw	low STR_43
 11899  000FB2  6FCD               	movwf	_acaoTesteBombas$1316& (0+255),b
 11900  000FB4  0E7F               	movlw	high STR_43
 11901  000FB6  D004               	goto	L30
 11902  000FB8                     l577:
 11903  000FB8  FFFF               	dw	65535	; assembler added errata NOP
 11904                           
 11905                           ; BSR set to: 0
 11906                           
 11907                           ; BSR set to: 0
 11908  000FBA  0EFA               	movlw	low STR_7
 11909  000FBC  6FCD               	movwf	_acaoTesteBombas$1316& (0+255),b
 11910  000FBE  0E7F               	movlw	high STR_7
 11911  000FC0                     L30:
 11912  000FC0  FFFF               	dw	65535	; assembler added errata NOP
 11913  000FC2  6FCE               	movwf	(_acaoTesteBombas$1316+1)& (0+255),b
 11914                           
 11915                           ; BSR set to: 0
 11916                           
 11917                           ; BSR set to: 0
 11918  000FC4  0E7A               	movlw	low _line2
 11919  000FC6  6FA1               	movwf	sprintf@wh& (0+255),b
 11920  000FC8  0E01               	movlw	high _line2
 11921  000FCA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11922  000FCC  0E27               	movlw	low STR_41
 11923  000FCE  6FA3               	movwf	sprintf@f& (0+255),b
 11924  000FD0  0E7F               	movlw	high STR_41
 11925  000FD2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11926  000FD4  C0CD  F0A5         	movff	_acaoTesteBombas$1316,?_sprintf+4
 11927  000FD8  C0CE  F0A6         	movff	_acaoTesteBombas$1316+1,?_sprintf+5
 11928  000FDC  ECBB  F03D         	call	_sprintf	;wreg free
 11929                           
 11930                           ;controle.h: 232: sprintf(line3, " PRINCIPAL : %s", status_principal == 1 ? "OK" : "ERRO
      +                          ");
 11931  000FE0  0100               	movlb	0	; () banked
 11932  000FE2  05FB               	decf	_status_principal& (0+255),w,b
 11933  000FE4  B4D8               	btfsc	status,2,c
 11934  000FE6  D004               	goto	l581
 11935                           
 11936                           ; BSR set to: 0
 11937  000FE8  0EEB               	movlw	low STR_43
 11938  000FEA  6FCF               	movwf	_acaoTesteBombas$1321& (0+255),b
 11939  000FEC  0E7F               	movlw	high STR_43
 11940  000FEE  D004               	goto	L31
 11941  000FF0                     l581:
 11942  000FF0  FFFF               	dw	65535	; assembler added errata NOP
 11943                           
 11944                           ; BSR set to: 0
 11945                           
 11946                           ; BSR set to: 0
 11947  000FF2  0EFA               	movlw	low STR_7
 11948  000FF4  6FCF               	movwf	_acaoTesteBombas$1321& (0+255),b
 11949  000FF6  0E7F               	movlw	high STR_7
 11950  000FF8                     L31:
 11951  000FF8  FFFF               	dw	65535	; assembler added errata NOP
 11952  000FFA  6FD0               	movwf	(_acaoTesteBombas$1321+1)& (0+255),b
 11953                           
 11954                           ; BSR set to: 0
 11955                           
 11956                           ; BSR set to: 0
 11957  000FFC  0E65               	movlw	low _line3
 11958  000FFE  6FA1               	movwf	sprintf@wh& (0+255),b
 11959  001000  0E01               	movlw	high _line3
 11960  001002  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11961  001004  0E76               	movlw	low STR_44
 11962  001006  6FA3               	movwf	sprintf@f& (0+255),b
 11963  001008  0E7E               	movlw	high STR_44
 11964  00100A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11965  00100C  C0CF  F0A5         	movff	_acaoTesteBombas$1321,?_sprintf+4
 11966  001010  C0D0  F0A6         	movff	_acaoTesteBombas$1321+1,?_sprintf+5
 11967  001014  ECBB  F03D         	call	_sprintf	;wreg free
 11968                           
 11969                           ;controle.h: 233: sprintf(line4, " COMBUSTAO : %s", status_estacionaria == 1 ? "OK" : "E
      +                          RRO");
 11970  001018  0100               	movlb	0	; () banked
 11971  00101A  05FA               	decf	_status_estacionaria& (0+255),w,b
 11972  00101C  B4D8               	btfsc	status,2,c
 11973  00101E  D004               	goto	l585
 11974                           
 11975                           ; BSR set to: 0
 11976  001020  0EEB               	movlw	low STR_43
 11977  001022  6FD1               	movwf	_acaoTesteBombas$1326& (0+255),b
 11978  001024  0E7F               	movlw	high STR_43
 11979  001026  D004               	goto	L32
 11980  001028                     l585:
 11981  001028  FFFF               	dw	65535	; assembler added errata NOP
 11982                           
 11983                           ; BSR set to: 0
 11984                           
 11985                           ; BSR set to: 0
 11986  00102A  0EFA               	movlw	low STR_7
 11987  00102C  6FD1               	movwf	_acaoTesteBombas$1326& (0+255),b
 11988  00102E  0E7F               	movlw	high STR_7
 11989  001030                     L32:
 11990  001030  FFFF               	dw	65535	; assembler added errata NOP
 11991  001032  6FD2               	movwf	(_acaoTesteBombas$1326+1)& (0+255),b
 11992                           
 11993                           ; BSR set to: 0
 11994                           
 11995                           ; BSR set to: 0
 11996  001034  0E50               	movlw	low _line4
 11997  001036  6FA1               	movwf	sprintf@wh& (0+255),b
 11998  001038  0E01               	movlw	high _line4
 11999  00103A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12000  00103C  0E86               	movlw	low STR_47
 12001  00103E  6FA3               	movwf	sprintf@f& (0+255),b
 12002  001040  0E7E               	movlw	high STR_47
 12003  001042  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12004  001044  C0D1  F0A5         	movff	_acaoTesteBombas$1326,?_sprintf+4
 12005  001048  C0D2  F0A6         	movff	_acaoTesteBombas$1326+1,?_sprintf+5
 12006  00104C  ECBB  F03D         	call	_sprintf	;wreg free
 12007                           
 12008                           ;controle.h: 235: if (tempo_teste_bombas <= -50) {
 12009  001050  0100               	movlb	0	; () banked
 12010  001052  AFF8               	btfss	(_tempo_teste_bombas+1)& (0+255),7,b
 12011  001054  D03C               	goto	l555
 12012  001056  0ECF               	movlw	207
 12013  001058  5DF7               	subwf	_tempo_teste_bombas& (0+255),w,b
 12014  00105A  0EFF               	movlw	255
 12015  00105C  59F8               	subwfb	(_tempo_teste_bombas+1)& (0+255),w,b
 12016  00105E  B0D8               	btfsc	status,0,c
 12017  001060  D036               	goto	l555
 12018                           
 12019                           ; BSR set to: 0
 12020                           ;controle.h: 236: tempo_teste_bombas = 300;
 12021  001062  0E01               	movlw	1
 12022  001064  6FF8               	movwf	(_tempo_teste_bombas+1)& (0+255),b
 12023  001066  0E2C               	movlw	44
 12024  001068  6FF7               	movwf	_tempo_teste_bombas& (0+255),b
 12025                           
 12026                           ;controle.h: 237: menu_posi = 0;
 12027  00106A  0E00               	movlw	0
 12028  00106C  6FD9               	movwf	_menu_posi& (0+255),b
 12029                           
 12030                           ;controle.h: 238: teste_run = 0;
 12031  00106E  0E00               	movlw	0
 12032  001070  6FDC               	movwf	_teste_run& (0+255),b
 12033                           
 12034                           ;controle.h: 239: bt_press = 1;
 12035  001072  0E01               	movlw	1
 12036  001074  6E7A               	movwf	_bt_press,c
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;controle.h: 240: }
 12040                           ;controle.h: 241: break;
 12041  001076  D02B               	goto	l555
 12042  001078  FFFF               	dw	65535	; assembler added errata NOP
 12043                           
 12044                           ; BSR set to: 0
 12045                           ;controle.h: 243: teste_run = 0;
 12046                           
 12047                           ; BSR set to: 0
 12048  00107A  0E00               	movlw	0
 12049  00107C  6FDC               	movwf	_teste_run& (0+255),b
 12050                           
 12051                           ;controle.h: 244: menu_posi = 0;
 12052  00107E  0E00               	movlw	0
 12053  001080  6FD9               	movwf	_menu_posi& (0+255),b
 12054                           
 12055                           ; BSR set to: 0
 12056                           ;controle.h: 246: }
 12057                           
 12058                           ;controle.h: 245: break;
 12059  001082  D025               	goto	l555
 12060  001084                     l553:
 12061  001084  FFFF               	dw	65535	; assembler added errata NOP
 12062                           
 12063                           ; BSR set to: 0
 12064  001086  0100               	movlb	0	; () banked
 12065  001088  51DC               	movf	_teste_run& (0+255),w,b
 12066                           
 12067                           ; Switch size 1, requested type "space"
 12068                           ; Number of cases is 11, Range of values is 2 to 12
 12069                           ; switch strategies available:
 12070                           ; Name         Instructions Cycles
 12071                           ; simple_byte           34    18 (average)
 12072                           ;	Chosen strategy is simple_byte
 12073  00108A  0A02               	xorlw	2	; case 2
 12074  00108C  B4D8               	btfsc	status,2,c
 12075  00108E  D6B7               	goto	l554
 12076  001090  0A01               	xorlw	1	; case 3
 12077  001092  B4D8               	btfsc	status,2,c
 12078  001094  D6C2               	goto	l556
 12079  001096  0A07               	xorlw	7	; case 4
 12080  001098  B4D8               	btfsc	status,2,c
 12081  00109A  D6DE               	goto	l558
 12082  00109C  0A01               	xorlw	1	; case 5
 12083  00109E  B4D8               	btfsc	status,2,c
 12084  0010A0  D6EA               	goto	l560
 12085  0010A2  0A03               	xorlw	3	; case 6
 12086  0010A4  B4D8               	btfsc	status,2,c
 12087  0010A6  D6EC               	goto	l561
 12088  0010A8  0A01               	xorlw	1	; case 7
 12089  0010AA  B4D8               	btfsc	status,2,c
 12090  0010AC  D708               	goto	l563
 12091  0010AE  0A0F               	xorlw	15	; case 8
 12092  0010B0  B4D8               	btfsc	status,2,c
 12093  0010B2  D714               	goto	l565
 12094  0010B4  0A01               	xorlw	1	; case 9
 12095  0010B6  B4D8               	btfsc	status,2,c
 12096  0010B8  D716               	goto	l566
 12097  0010BA  0A03               	xorlw	3	; case 10
 12098  0010BC  B4D8               	btfsc	status,2,c
 12099  0010BE  D732               	goto	l568
 12100  0010C0  0A01               	xorlw	1	; case 11
 12101  0010C2  B4D8               	btfsc	status,2,c
 12102  0010C4  D756               	goto	l574
 12103  0010C6  0A07               	xorlw	7	; case 12
 12104  0010C8  B4D8               	btfsc	status,2,c
 12105  0010CA  D763               	goto	l575
 12106  0010CC  D7D5               	goto	l589
 12107  0010CE                     l555:
 12108  0010CE  FFFF               	dw	65535	; assembler added errata NOP
 12109                           
 12110                           ; BSR set to: 0
 12111                           
 12112                           ; BSR set to: 0
 12113  0010D0  0012               	return		;funcret
 12114  0010D2  FFFF               	dw	65535	; errata NOP
 12115  0010D4                     __end_of_acaoTesteBombas:
 12116                           	opt stack 0
 12117                           tblptru	equ	0xFF8
 12118                           tblptrh	equ	0xFF7
 12119                           tblptrl	equ	0xFF6
 12120                           tablat	equ	0xFF5
 12121                           prodh	equ	0xFF4
 12122                           prodl	equ	0xFF3
 12123                           intcon	equ	0xFF2
 12124                           indf0	equ	0xFEF
 12125                           postinc0	equ	0xFEE
 12126                           fsr0h	equ	0xFEA
 12127                           fsr0l	equ	0xFE9
 12128                           wreg	equ	0xFE8
 12129                           postdec1	equ	0xFE5
 12130                           fsr1l	equ	0xFE1
 12131                           indf2	equ	0xFDF
 12132                           postinc2	equ	0xFDE
 12133                           fsr2h	equ	0xFDA
 12134                           fsr2l	equ	0xFD9
 12135                           status	equ	0xFD8
 12136                           
 12137 ;; *************** function _salvarLOG *****************
 12138 ;; Defined at:
 12139 ;;		line 9 in file "logs.h"
 12140 ;; Parameters:    Size  Location     Type
 12141 ;;		None
 12142 ;; Auto vars:     Size  Location     Type
 12143 ;;  ultimoLogSal    2   15[BANK0 ] unsigned int 
 12144 ;; Return value:  Size  Location     Type
 12145 ;;                  1    wreg      void 
 12146 ;; Registers used:
 12147 ;;		wreg, status,2, status,0, cstack
 12148 ;; Tracked objects:
 12149 ;;		On entry : 0/0
 12150 ;;		On exit  : 0/0
 12151 ;;		Unchanged: 0/0
 12152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12153 ;;      Params:         0       0       0       0       0       0       0
 12154 ;;      Locals:         0       2       0       0       0       0       0
 12155 ;;      Temps:          0       1       0       0       0       0       0
 12156 ;;      Totals:         0       3       0       0       0       0       0
 12157 ;;Total ram usage:        3 bytes
 12158 ;; Hardware stack levels used:    1
 12159 ;; Hardware stack levels required when called:    9
 12160 ;; This function calls:
 12161 ;;		_readEEPROM_ext
 12162 ;;		_writeEEPROM_ext
 12163 ;; This function is called by:
 12164 ;;		_acaoTesteBombas
 12165 ;;		_dataLoger
 12166 ;; This function uses a non-reentrant model
 12167 ;;
 12168                           
 12169                           	psect	text39
 12170  003498                     __ptext39:
 12171                           	opt stack 0
 12172  003498                     _salvarLOG:
 12173                           	opt stack 0
 12174  003498  FFFF               	dw	65535	; assembler added errata NOP
 12175                           
 12176                           ;logs.h: 10: unsigned int ultimoLogSalvo = readEEPROM_ext(14);
 12177                           
 12178                           ; BSR set to: 0
 12179                           ;incstack = 0
 12180  00349A  0E0E               	movlw	14
 12181  00349C  EC66  F01F         	call	_readEEPROM_ext
 12182  0034A0  0100               	movlb	0	; () banked
 12183  0034A2  6F8E               	movwf	??_salvarLOG& (0+255),b
 12184  0034A4  518E               	movf	??_salvarLOG& (0+255),w,b
 12185  0034A6  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 12186  0034A8  6B90               	clrf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 12187                           
 12188                           ; BSR set to: 0
 12189                           ;logs.h: 11: if (ultimoLogSalvo < 60 || ultimoLogSalvo > 250) {
 12190  0034AA  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 12191  0034AC  E104               	bnz	u5340
 12192  0034AE  0E3C               	movlw	60
 12193  0034B0  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12194  0034B2  A0D8               	btfss	status,0,c
 12195  0034B4  D006               	goto	u5350
 12196  0034B6                     u5340:
 12197                           
 12198                           ; BSR set to: 0
 12199  0034B6  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 12200  0034B8  E105               	bnz	l5228
 12201  0034BA  0EFB               	movlw	251
 12202  0034BC  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12203  0034BE  A0D8               	btfss	status,0,c
 12204  0034C0  D005               	goto	l443
 12205  0034C2                     u5350:
 12206  0034C2  FFFF               	dw	65535	; assembler added errata NOP
 12207  0034C4                     l5228:
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;logs.h: 12: ultimoLogSalvo = 60;
 12211  0034C4  0E00               	movlw	0
 12212  0034C6  6F90               	movwf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 12213  0034C8  0E3C               	movlw	60
 12214  0034CA  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 12215  0034CC                     l443:
 12216  0034CC  FFFF               	dw	65535	; assembler added errata NOP
 12217                           
 12218                           ; BSR set to: 0
 12219                           ;logs.h: 13: }
 12220                           ;logs.h: 14: writeEEPROM_ext(ultimoLogSalvo, _dia);
 12221                           
 12222                           ; BSR set to: 0
 12223  0034CE  C0F0  F08C         	movff	__dia,writeEEPROM_ext@data
 12224  0034D2  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12225  0034D4  EC98  F03D         	call	_writeEEPROM_ext
 12226                           
 12227                           ;logs.h: 15: writeEEPROM_ext(++ultimoLogSalvo, _mes);
 12228  0034D8  C0EF  F08C         	movff	__mes,writeEEPROM_ext@data
 12229  0034DC  0100               	movlb	0	; () banked
 12230  0034DE  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12231  0034E0  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12232  0034E2  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12233  0034E4  EC98  F03D         	call	_writeEEPROM_ext
 12234                           
 12235                           ;logs.h: 16: writeEEPROM_ext(++ultimoLogSalvo, _ano);
 12236  0034E8  C0EE  F08C         	movff	__ano,writeEEPROM_ext@data
 12237  0034EC  0100               	movlb	0	; () banked
 12238  0034EE  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12239  0034F0  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12240  0034F2  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12241  0034F4  EC98  F03D         	call	_writeEEPROM_ext
 12242                           
 12243                           ;logs.h: 17: writeEEPROM_ext(++ultimoLogSalvo, _hor);
 12244  0034F8  C0F1  F08C         	movff	__hor,writeEEPROM_ext@data
 12245  0034FC  0100               	movlb	0	; () banked
 12246  0034FE  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12247  003500  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12248  003502  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12249  003504  EC98  F03D         	call	_writeEEPROM_ext
 12250                           
 12251                           ;logs.h: 18: writeEEPROM_ext(++ultimoLogSalvo, _min);
 12252  003508  C0F2  F08C         	movff	__min,writeEEPROM_ext@data
 12253  00350C  0100               	movlb	0	; () banked
 12254  00350E  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12255  003510  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12256  003512  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12257  003514  EC98  F03D         	call	_writeEEPROM_ext
 12258                           
 12259                           ;logs.h: 19: writeEEPROM_ext(++ultimoLogSalvo, status_jockey);
 12260  003518  C0FC  F08C         	movff	_status_jockey,writeEEPROM_ext@data
 12261  00351C  0100               	movlb	0	; () banked
 12262  00351E  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12263  003520  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12264  003522  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12265  003524  EC98  F03D         	call	_writeEEPROM_ext
 12266                           
 12267                           ;logs.h: 20: writeEEPROM_ext(++ultimoLogSalvo, status_principal);
 12268  003528  C0FB  F08C         	movff	_status_principal,writeEEPROM_ext@data
 12269  00352C  0100               	movlb	0	; () banked
 12270  00352E  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12271  003530  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12272  003532  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12273  003534  EC98  F03D         	call	_writeEEPROM_ext
 12274                           
 12275                           ;logs.h: 21: writeEEPROM_ext(++ultimoLogSalvo, status_estacionaria);
 12276  003538  C0FA  F08C         	movff	_status_estacionaria,writeEEPROM_ext@data
 12277  00353C  0100               	movlb	0	; () banked
 12278  00353E  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12279  003540  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12280  003542  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12281  003544  EC98  F03D         	call	_writeEEPROM_ext
 12282                           
 12283                           ;logs.h: 23: writeEEPROM_ext(14, ++ultimoLogSalvo);
 12284  003548  0100               	movlb	0	; () banked
 12285  00354A  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12286  00354C  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12287  00354E  C08F  F08C         	movff	salvarLOG@ultimoLogSalvo,writeEEPROM_ext@data
 12288  003552  0E0E               	movlw	14
 12289  003554  EC98  F03D         	call	_writeEEPROM_ext
 12290  003558  0012               	return		;funcret
 12291  00355A  FFFF               	dw	65535	; errata NOP
 12292  00355C                     __end_of_salvarLOG:
 12293                           	opt stack 0
 12294                           tblptru	equ	0xFF8
 12295                           tblptrh	equ	0xFF7
 12296                           tblptrl	equ	0xFF6
 12297                           tablat	equ	0xFF5
 12298                           prodh	equ	0xFF4
 12299                           prodl	equ	0xFF3
 12300                           intcon	equ	0xFF2
 12301                           indf0	equ	0xFEF
 12302                           postinc0	equ	0xFEE
 12303                           fsr0h	equ	0xFEA
 12304                           fsr0l	equ	0xFE9
 12305                           wreg	equ	0xFE8
 12306                           postdec1	equ	0xFE5
 12307                           fsr1l	equ	0xFE1
 12308                           indf2	equ	0xFDF
 12309                           postinc2	equ	0xFDE
 12310                           fsr2h	equ	0xFDA
 12311                           fsr2l	equ	0xFD9
 12312                           status	equ	0xFD8
 12313                           
 12314 ;; *************** function _writeEEPROM_ext *****************
 12315 ;; Defined at:
 12316 ;;		line 13 in file "eeprom.h"
 12317 ;; Parameters:    Size  Location     Type
 12318 ;;  adress          1    wreg     unsigned char 
 12319 ;;  data            1   12[BANK0 ] unsigned char 
 12320 ;; Auto vars:     Size  Location     Type
 12321 ;;  adress          1   13[BANK0 ] unsigned char 
 12322 ;; Return value:  Size  Location     Type
 12323 ;;                  1    wreg      void 
 12324 ;; Registers used:
 12325 ;;		wreg, status,2, status,0, cstack
 12326 ;; Tracked objects:
 12327 ;;		On entry : 0/0
 12328 ;;		On exit  : 0/0
 12329 ;;		Unchanged: 0/0
 12330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12331 ;;      Params:         0       1       0       0       0       0       0
 12332 ;;      Locals:         0       1       0       0       0       0       0
 12333 ;;      Temps:          0       0       0       0       0       0       0
 12334 ;;      Totals:         0       2       0       0       0       0       0
 12335 ;;Total ram usage:        2 bytes
 12336 ;; Hardware stack levels used:    1
 12337 ;; Hardware stack levels required when called:    8
 12338 ;; This function calls:
 12339 ;;		_I2C_Start
 12340 ;;		_I2C_Stop
 12341 ;;		_I2C_Write
 12342 ;;		_delay
 12343 ;; This function is called by:
 12344 ;;		_salvarLOG
 12345 ;;		_acaoTesteBomasProgramado
 12346 ;;		_acaoTesteBombas
 12347 ;;		_lerParametros
 12348 ;;		_tela_testeBombas
 12349 ;;		_configuraTelefones
 12350 ;;		_configurarEstacionaria
 12351 ;;		_ajusteSP_Bombas
 12352 ;;		_apagarLOGS
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356                           	psect	text40
 12357  007B30                     __ptext40:
 12358                           	opt stack 0
 12359  007B30                     _writeEEPROM_ext:
 12360                           	opt stack 0
 12361  007B30  FFFF               	dw	65535	; assembler added errata NOP
 12362                           
 12363                           ;incstack = 0
 12364                           ;writeEEPROM_ext@adress stored from wreg
 12365  007B32  0100               	movlb	0	; () banked
 12366  007B34  6F8D               	movwf	writeEEPROM_ext@adress& (0+255),b
 12367                           
 12368                           ;eeprom.h: 15: I2C_Start();
 12369  007B36  EC8B  F03A         	call	_I2C_Start	;wreg free
 12370                           
 12371                           ;eeprom.h: 16: I2C_Write(0xA0);
 12372  007B3A  0E00               	movlw	0
 12373  007B3C  0100               	movlb	0	; () banked
 12374  007B3E  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12375  007B40  0EA0               	movlw	160
 12376  007B42  6F8A               	movwf	I2C_Write@d& (0+255),b
 12377  007B44  ECA4  F03A         	call	_I2C_Write	;wreg free
 12378                           
 12379                           ;eeprom.h: 18: I2C_Write(adress);
 12380  007B48  C08D  F08A         	movff	writeEEPROM_ext@adress,I2C_Write@d
 12381  007B4C  0100               	movlb	0	; () banked
 12382  007B4E  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12383  007B50  ECA4  F03A         	call	_I2C_Write	;wreg free
 12384                           
 12385                           ;eeprom.h: 19: I2C_Write(data);
 12386  007B54  C08C  F08A         	movff	writeEEPROM_ext@data,I2C_Write@d
 12387  007B58  0100               	movlb	0	; () banked
 12388  007B5A  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12389  007B5C  ECA4  F03A         	call	_I2C_Write	;wreg free
 12390                           
 12391                           ;eeprom.h: 20: I2C_Stop();
 12392  007B60  EC91  F03A         	call	_I2C_Stop	;wreg free
 12393                           
 12394                           ;eeprom.h: 21: delay(15);
 12395  007B64  0E00               	movlw	0
 12396  007B66  0100               	movlb	0	; () banked
 12397  007B68  6F81               	movwf	(delay@x+1)& (0+255),b
 12398  007B6A  0E0F               	movlw	15
 12399  007B6C  6F80               	movwf	delay@x& (0+255),b
 12400  007B6E  ECBC  F03B         	call	_delay	;wreg free
 12401  007B72  0012               	return		;funcret
 12402  007B74  FFFF               	dw	65535	; errata NOP
 12403  007B76                     __end_of_writeEEPROM_ext:
 12404                           	opt stack 0
 12405                           tblptru	equ	0xFF8
 12406                           tblptrh	equ	0xFF7
 12407                           tblptrl	equ	0xFF6
 12408                           tablat	equ	0xFF5
 12409                           prodh	equ	0xFF4
 12410                           prodl	equ	0xFF3
 12411                           intcon	equ	0xFF2
 12412                           indf0	equ	0xFEF
 12413                           postinc0	equ	0xFEE
 12414                           fsr0h	equ	0xFEA
 12415                           fsr0l	equ	0xFE9
 12416                           wreg	equ	0xFE8
 12417                           postdec1	equ	0xFE5
 12418                           fsr1l	equ	0xFE1
 12419                           indf2	equ	0xFDF
 12420                           postinc2	equ	0xFDE
 12421                           fsr2h	equ	0xFDA
 12422                           fsr2l	equ	0xFD9
 12423                           status	equ	0xFD8
 12424                           
 12425 ;; *************** function _readEEPROM_ext *****************
 12426 ;; Defined at:
 12427 ;;		line 26 in file "eeprom.h"
 12428 ;; Parameters:    Size  Location     Type
 12429 ;;  adress          1    wreg     unsigned char 
 12430 ;; Auto vars:     Size  Location     Type
 12431 ;;  adress          1   12[BANK0 ] unsigned char 
 12432 ;;  data            1   13[BANK0 ] unsigned char 
 12433 ;; Return value:  Size  Location     Type
 12434 ;;                  1    wreg      unsigned char 
 12435 ;; Registers used:
 12436 ;;		wreg, status,2, status,0, cstack
 12437 ;; Tracked objects:
 12438 ;;		On entry : 0/0
 12439 ;;		On exit  : 0/0
 12440 ;;		Unchanged: 0/0
 12441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12442 ;;      Params:         0       0       0       0       0       0       0
 12443 ;;      Locals:         0       2       0       0       0       0       0
 12444 ;;      Temps:          0       0       0       0       0       0       0
 12445 ;;      Totals:         0       2       0       0       0       0       0
 12446 ;;Total ram usage:        2 bytes
 12447 ;; Hardware stack levels used:    1
 12448 ;; Hardware stack levels required when called:    8
 12449 ;; This function calls:
 12450 ;;		_I2C_Read
 12451 ;;		_I2C_Restart
 12452 ;;		_I2C_Start
 12453 ;;		_I2C_Stop
 12454 ;;		_I2C_Write
 12455 ;; This function is called by:
 12456 ;;		_readEEPROM16_ext
 12457 ;;		_salvarLOG
 12458 ;;		_lerParametros
 12459 ;;		_dataLoger
 12460 ;; This function uses a non-reentrant model
 12461 ;;
 12462                           
 12463                           	psect	text41
 12464  003ECC                     __ptext41:
 12465                           	opt stack 0
 12466  003ECC                     _readEEPROM_ext:
 12467                           	opt stack 0
 12468  003ECC  FFFF               	dw	65535	; assembler added errata NOP
 12469                           
 12470                           ;incstack = 0
 12471                           ;readEEPROM_ext@adress stored from wreg
 12472  003ECE  0100               	movlb	0	; () banked
 12473  003ED0  6F8C               	movwf	readEEPROM_ext@adress& (0+255),b
 12474                           
 12475                           ;eeprom.h: 27: I2C_Start();
 12476  003ED2  EC8B  F03A         	call	_I2C_Start	;wreg free
 12477                           
 12478                           ;eeprom.h: 28: I2C_Write(0xA0);
 12479  003ED6  0E00               	movlw	0
 12480  003ED8  0100               	movlb	0	; () banked
 12481  003EDA  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12482  003EDC  0EA0               	movlw	160
 12483  003EDE  6F8A               	movwf	I2C_Write@d& (0+255),b
 12484  003EE0  ECA4  F03A         	call	_I2C_Write	;wreg free
 12485                           
 12486                           ;eeprom.h: 30: I2C_Write(adress);
 12487  003EE4  C08C  F08A         	movff	readEEPROM_ext@adress,I2C_Write@d
 12488  003EE8  0100               	movlb	0	; () banked
 12489  003EEA  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12490  003EEC  ECA4  F03A         	call	_I2C_Write	;wreg free
 12491                           
 12492                           ;eeprom.h: 31: I2C_Restart();
 12493  003EF0  EC97  F03A         	call	_I2C_Restart	;wreg free
 12494                           
 12495                           ;eeprom.h: 32: I2C_Write(0xA1);
 12496  003EF4  0E00               	movlw	0
 12497  003EF6  0100               	movlb	0	; () banked
 12498  003EF8  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12499  003EFA  0EA1               	movlw	161
 12500  003EFC  6F8A               	movwf	I2C_Write@d& (0+255),b
 12501  003EFE  ECA4  F03A         	call	_I2C_Write	;wreg free
 12502                           
 12503                           ;eeprom.h: 33: unsigned char data = I2C_Read(0);
 12504  003F02  0E00               	movlw	0
 12505  003F04  0100               	movlb	0	; () banked
 12506  003F06  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
 12507  003F08  0E00               	movlw	0
 12508  003F0A  6F81               	movwf	I2C_Read@a& (0+255),b
 12509  003F0C  EC45  F03C         	call	_I2C_Read	;wreg free
 12510  003F10  0100               	movlb	0	; () banked
 12511  003F12  5181               	movf	?_I2C_Read& (0+255),w,b
 12512  003F14  6F8D               	movwf	readEEPROM_ext@data& (0+255),b
 12513                           
 12514                           ;eeprom.h: 34: I2C_Stop();
 12515  003F16  EC91  F03A         	call	_I2C_Stop	;wreg free
 12516                           
 12517                           ;eeprom.h: 35: return data;
 12518  003F1A  0100               	movlb	0	; () banked
 12519  003F1C  518D               	movf	readEEPROM_ext@data& (0+255),w,b
 12520                           
 12521                           ; BSR set to: 0
 12522                           
 12523                           ; BSR set to: 0
 12524  003F1E  0012               	return		;funcret
 12525  003F20  FFFF               	dw	65535	; errata NOP
 12526  003F22                     __end_of_readEEPROM_ext:
 12527                           	opt stack 0
 12528                           tblptru	equ	0xFF8
 12529                           tblptrh	equ	0xFF7
 12530                           tblptrl	equ	0xFF6
 12531                           tablat	equ	0xFF5
 12532                           prodh	equ	0xFF4
 12533                           prodl	equ	0xFF3
 12534                           intcon	equ	0xFF2
 12535                           indf0	equ	0xFEF
 12536                           postinc0	equ	0xFEE
 12537                           fsr0h	equ	0xFEA
 12538                           fsr0l	equ	0xFE9
 12539                           wreg	equ	0xFE8
 12540                           postdec1	equ	0xFE5
 12541                           fsr1l	equ	0xFE1
 12542                           indf2	equ	0xFDF
 12543                           postinc2	equ	0xFDE
 12544                           fsr2h	equ	0xFDA
 12545                           fsr2l	equ	0xFD9
 12546                           status	equ	0xFD8
 12547                           
 12548 ;; *************** function _I2C_Restart *****************
 12549 ;; Defined at:
 12550 ;;		line 31 in file "I2C.c"
 12551 ;; Parameters:    Size  Location     Type
 12552 ;;		None
 12553 ;; Auto vars:     Size  Location     Type
 12554 ;;		None
 12555 ;; Return value:  Size  Location     Type
 12556 ;;                  1    wreg      void 
 12557 ;; Registers used:
 12558 ;;		wreg, status,2, status,0, cstack
 12559 ;; Tracked objects:
 12560 ;;		On entry : 0/0
 12561 ;;		On exit  : 0/0
 12562 ;;		Unchanged: 0/0
 12563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12564 ;;      Params:         0       0       0       0       0       0       0
 12565 ;;      Locals:         0       0       0       0       0       0       0
 12566 ;;      Temps:          0       0       0       0       0       0       0
 12567 ;;      Totals:         0       0       0       0       0       0       0
 12568 ;;Total ram usage:        0 bytes
 12569 ;; Hardware stack levels used:    1
 12570 ;; Hardware stack levels required when called:    7
 12571 ;; This function calls:
 12572 ;;		_I2C_Wait
 12573 ;; This function is called by:
 12574 ;;		_getDS1307TimeDate
 12575 ;;		_readEEPROM_ext
 12576 ;;		_getDS1307Time
 12577 ;; This function uses a non-reentrant model
 12578 ;;
 12579                           
 12580                           	psect	text42
 12581  00752E                     __ptext42:
 12582                           	opt stack 0
 12583  00752E                     _I2C_Restart:
 12584                           	opt stack 0
 12585  00752E  FFFF               	dw	65535	; assembler added errata NOP
 12586                           
 12587                           ;I2C.c: 32: I2C_Wait();
 12588                           
 12589                           ; BSR set to: 0
 12590                           ;incstack = 0
 12591  007530  ECDC  F03A         	call	_I2C_Wait	;wreg free
 12592                           
 12593                           ;I2C.c: 33: RSEN = 1;
 12594  007534  82C5               	bsf	4037,1,c	;volatile
 12595  007536  0012               	return		;funcret
 12596  007538  FFFF               	dw	65535	; errata NOP
 12597  00753A                     __end_of_I2C_Restart:
 12598                           	opt stack 0
 12599                           tblptru	equ	0xFF8
 12600                           tblptrh	equ	0xFF7
 12601                           tblptrl	equ	0xFF6
 12602                           tablat	equ	0xFF5
 12603                           prodh	equ	0xFF4
 12604                           prodl	equ	0xFF3
 12605                           intcon	equ	0xFF2
 12606                           indf0	equ	0xFEF
 12607                           postinc0	equ	0xFEE
 12608                           fsr0h	equ	0xFEA
 12609                           fsr0l	equ	0xFE9
 12610                           wreg	equ	0xFE8
 12611                           postdec1	equ	0xFE5
 12612                           fsr1l	equ	0xFE1
 12613                           indf2	equ	0xFDF
 12614                           postinc2	equ	0xFDE
 12615                           fsr2h	equ	0xFDA
 12616                           fsr2l	equ	0xFD9
 12617                           status	equ	0xFD8
 12618                           
 12619 ;; *************** function _I2C_Read *****************
 12620 ;; Defined at:
 12621 ;;		line 47 in file "I2C.c"
 12622 ;; Parameters:    Size  Location     Type
 12623 ;;  a               2    1[BANK0 ] unsigned short 
 12624 ;; Auto vars:     Size  Location     Type
 12625 ;;  temp            2    3[BANK0 ] unsigned short 
 12626 ;; Return value:  Size  Location     Type
 12627 ;;                  2    1[BANK0 ] unsigned short 
 12628 ;; Registers used:
 12629 ;;		wreg, status,2, status,0, cstack
 12630 ;; Tracked objects:
 12631 ;;		On entry : 0/0
 12632 ;;		On exit  : 0/0
 12633 ;;		Unchanged: 0/0
 12634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12635 ;;      Params:         0       2       0       0       0       0       0
 12636 ;;      Locals:         0       2       0       0       0       0       0
 12637 ;;      Temps:          0       0       0       0       0       0       0
 12638 ;;      Totals:         0       4       0       0       0       0       0
 12639 ;;Total ram usage:        4 bytes
 12640 ;; Hardware stack levels used:    1
 12641 ;; Hardware stack levels required when called:    7
 12642 ;; This function calls:
 12643 ;;		_I2C_Wait
 12644 ;; This function is called by:
 12645 ;;		_getDS1307TimeDate
 12646 ;;		_readEEPROM_ext
 12647 ;;		_getDS1307Time
 12648 ;; This function uses a non-reentrant model
 12649 ;;
 12650                           
 12651                           	psect	text43
 12652  00788A                     __ptext43:
 12653                           	opt stack 0
 12654  00788A                     _I2C_Read:
 12655                           	opt stack 0
 12656  00788A  FFFF               	dw	65535	; assembler added errata NOP
 12657                           
 12658                           ;I2C.c: 48: unsigned short temp;
 12659                           ;I2C.c: 49: I2C_Wait();
 12660                           
 12661                           ;incstack = 0
 12662  00788C  ECDC  F03A         	call	_I2C_Wait	;wreg free
 12663                           
 12664                           ;I2C.c: 50: RCEN = 1;
 12665  007890  86C5               	bsf	4037,3,c	;volatile
 12666                           
 12667                           ;I2C.c: 51: I2C_Wait();
 12668  007892  ECDC  F03A         	call	_I2C_Wait	;wreg free
 12669                           
 12670                           ;I2C.c: 52: temp = SSPBUF;
 12671  007896  CFC9 F083          	movff	4041,I2C_Read@temp	;volatile
 12672  00789A  0100               	movlb	0	; () banked
 12673  00789C  6B84               	clrf	(I2C_Read@temp+1)& (0+255),b
 12674                           
 12675                           ;I2C.c: 53: I2C_Wait();
 12676  00789E  ECDC  F03A         	call	_I2C_Wait	;wreg free
 12677                           
 12678                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 12679  0078A2  0100               	movlb	0	; () banked
 12680  0078A4  5181               	movf	I2C_Read@a& (0+255),w,b
 12681  0078A6  1182               	iorwf	(I2C_Read@a+1)& (0+255),w,b
 12682  0078A8  A4D8               	btfss	status,2,c
 12683  0078AA  D002               	goto	u4530
 12684  0078AC  8AC5               	bsf	4037,5,c	;volatile
 12685  0078AE  D002               	goto	u4545
 12686  0078B0                     u4530:
 12687  0078B0  FFFF               	dw	65535	; assembler added errata NOP
 12688  0078B2  9AC5               	bcf	4037,5,c	;volatile
 12689  0078B4                     u4545:
 12690  0078B4  FFFF               	dw	65535	; assembler added errata NOP
 12691                           
 12692                           ;I2C.c: 55: ACKEN = 1;
 12693  0078B6  88C5               	bsf	4037,4,c	;volatile
 12694                           
 12695                           ;I2C.c: 56: return temp;
 12696  0078B8  C083  F081         	movff	I2C_Read@temp,?_I2C_Read
 12697  0078BC  C084  F082         	movff	I2C_Read@temp+1,?_I2C_Read+1
 12698  0078C0  0012               	return		;funcret
 12699  0078C2  FFFF               	dw	65535	; errata NOP
 12700  0078C4                     __end_of_I2C_Read:
 12701                           	opt stack 0
 12702                           tblptru	equ	0xFF8
 12703                           tblptrh	equ	0xFF7
 12704                           tblptrl	equ	0xFF6
 12705                           tablat	equ	0xFF5
 12706                           prodh	equ	0xFF4
 12707                           prodl	equ	0xFF3
 12708                           intcon	equ	0xFF2
 12709                           indf0	equ	0xFEF
 12710                           postinc0	equ	0xFEE
 12711                           fsr0h	equ	0xFEA
 12712                           fsr0l	equ	0xFE9
 12713                           wreg	equ	0xFE8
 12714                           postdec1	equ	0xFE5
 12715                           fsr1l	equ	0xFE1
 12716                           indf2	equ	0xFDF
 12717                           postinc2	equ	0xFDE
 12718                           fsr2h	equ	0xFDA
 12719                           fsr2l	equ	0xFD9
 12720                           status	equ	0xFD8
 12721                           
 12722 ;; *************** function _intToFloatStr *****************
 12723 ;; Defined at:
 12724 ;;		line 48 in file "function.c"
 12725 ;; Parameters:    Size  Location     Type
 12726 ;;  valor           1    wreg     unsigned char 
 12727 ;; Auto vars:     Size  Location     Type
 12728 ;;  valor           1   57[BANK0 ] unsigned char 
 12729 ;;  conv            4   62[BANK0 ] unsigned char [4]
 12730 ;;  end             4   58[BANK0 ] unsigned char [4]
 12731 ;;  pr              2   66[BANK0 ] int 
 12732 ;; Return value:  Size  Location     Type
 12733 ;;                  2   55[BANK0 ] PTR unsigned char 
 12734 ;; Registers used:
 12735 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12736 ;; Tracked objects:
 12737 ;;		On entry : 0/0
 12738 ;;		On exit  : 0/0
 12739 ;;		Unchanged: 0/0
 12740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12741 ;;      Params:         0       2       0       0       0       0       0
 12742 ;;      Locals:         0      11       0       0       0       0       0
 12743 ;;      Temps:          0       0       0       0       0       0       0
 12744 ;;      Totals:         0      13       0       0       0       0       0
 12745 ;;Total ram usage:       13 bytes
 12746 ;; Hardware stack levels used:    1
 12747 ;; Hardware stack levels required when called:    9
 12748 ;; This function calls:
 12749 ;;		___awdiv
 12750 ;;		___awmod
 12751 ;;		_sprintf
 12752 ;; This function is called by:
 12753 ;;		_acaoTesteBombas
 12754 ;;		_telaPrincipal
 12755 ;;		_ajusteSP_Bombas
 12756 ;; This function uses a non-reentrant model
 12757 ;;
 12758                           
 12759                           	psect	text44
 12760  003B6A                     __ptext44:
 12761                           	opt stack 0
 12762  003B6A                     _intToFloatStr:
 12763                           	opt stack 0
 12764  003B6A  FFFF               	dw	65535	; assembler added errata NOP
 12765                           
 12766                           ;incstack = 0
 12767                           ;intToFloatStr@valor stored from wreg
 12768  003B6C  0100               	movlb	0	; () banked
 12769  003B6E  6FB9               	movwf	intToFloatStr@valor& (0+255),b
 12770                           
 12771                           ;function.c: 49: int pr = valor;
 12772  003B70  C0B9  F0C2         	movff	intToFloatStr@valor,intToFloatStr@pr
 12773  003B74  0100               	movlb	0	; () banked
 12774  003B76  6BC3               	clrf	(intToFloatStr@pr+1)& (0+255),b
 12775                           
 12776                           ; BSR set to: 0
 12777                           ;function.c: 50: unsigned char conv[4] = {' ', ' ', ' ', ' '};
 12778  003B78  C1D0  F0BE         	movff	intToFloatStr@F2544,intToFloatStr@conv
 12779  003B7C  C1D1  F0BF         	movff	intToFloatStr@F2544+1,intToFloatStr@conv+1
 12780  003B80  C1D2  F0C0         	movff	intToFloatStr@F2544+2,intToFloatStr@conv+2
 12781  003B84  C1D3  F0C1         	movff	intToFloatStr@F2544+3,intToFloatStr@conv+3
 12782                           
 12783                           ; BSR set to: 0
 12784                           ;function.c: 51: conv[0] = (char) ((pr / 10) + 48);
 12785  003B88  C0C2  F080         	movff	intToFloatStr@pr,___awdiv@dividend
 12786  003B8C  C0C3  F081         	movff	intToFloatStr@pr+1,___awdiv@dividend+1
 12787  003B90  0E00               	movlw	0
 12788  003B92  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
 12789  003B94  0E0A               	movlw	10
 12790  003B96  6F82               	movwf	___awdiv@divisor& (0+255),b
 12791  003B98  EC06  F01C         	call	___awdiv	;wreg free
 12792  003B9C  0100               	movlb	0	; () banked
 12793  003B9E  5180               	movf	?___awdiv& (0+255),w,b
 12794  003BA0  0F30               	addlw	48
 12795  003BA2  6FBE               	movwf	intToFloatStr@conv& (0+255),b
 12796                           
 12797                           ; BSR set to: 0
 12798                           ;function.c: 52: conv[1] = (char) '.';
 12799  003BA4  0E2E               	movlw	46
 12800  003BA6  6FBF               	movwf	(intToFloatStr@conv+1)& (0+255),b
 12801                           
 12802                           ; BSR set to: 0
 12803                           ;function.c: 53: conv[2] = (char) ((pr % 10) + 48);
 12804  003BA8  C0C2  F080         	movff	intToFloatStr@pr,___awmod@dividend
 12805  003BAC  C0C3  F081         	movff	intToFloatStr@pr+1,___awmod@dividend+1
 12806  003BB0  0E00               	movlw	0
 12807  003BB2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 12808  003BB4  0E0A               	movlw	10
 12809  003BB6  6F82               	movwf	___awmod@divisor& (0+255),b
 12810  003BB8  EC72  F01D         	call	___awmod	;wreg free
 12811  003BBC  0100               	movlb	0	; () banked
 12812  003BBE  5180               	movf	?___awmod& (0+255),w,b
 12813  003BC0  0F30               	addlw	48
 12814  003BC2  6FC0               	movwf	(intToFloatStr@conv+2)& (0+255),b
 12815                           
 12816                           ; BSR set to: 0
 12817                           ;function.c: 54: conv[3] = '\0';
 12818  003BC4  0E00               	movlw	0
 12819  003BC6  6FC1               	movwf	(intToFloatStr@conv+3)& (0+255),b
 12820                           
 12821                           ; BSR set to: 0
 12822                           ;function.c: 55: char end[4];
 12823                           ;function.c: 56: sprintf(end,conv);
 12824  003BC8  0EBA               	movlw	low intToFloatStr@end
 12825  003BCA  6FA1               	movwf	sprintf@wh& (0+255),b
 12826  003BCC  0E00               	movlw	high intToFloatStr@end
 12827  003BCE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12828  003BD0  0EBE               	movlw	low intToFloatStr@conv
 12829  003BD2  6FA3               	movwf	sprintf@f& (0+255),b
 12830  003BD4  0E00               	movlw	high intToFloatStr@conv
 12831  003BD6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12832  003BD8  ECBB  F03D         	call	_sprintf	;wreg free
 12833                           
 12834                           ;function.c: 57: return end;
 12835  003BDC  0EBA               	movlw	low intToFloatStr@end
 12836  003BDE  0100               	movlb	0	; () banked
 12837  003BE0  6FB7               	movwf	?_intToFloatStr& (0+255),b
 12838  003BE2  0E00               	movlw	high intToFloatStr@end
 12839  003BE4  6FB8               	movwf	(?_intToFloatStr+1)& (0+255),b
 12840                           
 12841                           ; BSR set to: 0
 12842                           
 12843                           ; BSR set to: 0
 12844  003BE6  0012               	return		;funcret
 12845  003BE8  FFFF               	dw	65535	; errata NOP
 12846  003BEA                     __end_of_intToFloatStr:
 12847                           	opt stack 0
 12848                           tblptru	equ	0xFF8
 12849                           tblptrh	equ	0xFF7
 12850                           tblptrl	equ	0xFF6
 12851                           tablat	equ	0xFF5
 12852                           prodh	equ	0xFF4
 12853                           prodl	equ	0xFF3
 12854                           intcon	equ	0xFF2
 12855                           indf0	equ	0xFEF
 12856                           postinc0	equ	0xFEE
 12857                           fsr0h	equ	0xFEA
 12858                           fsr0l	equ	0xFE9
 12859                           wreg	equ	0xFE8
 12860                           postdec1	equ	0xFE5
 12861                           fsr1l	equ	0xFE1
 12862                           indf2	equ	0xFDF
 12863                           postinc2	equ	0xFDE
 12864                           fsr2h	equ	0xFDA
 12865                           fsr2l	equ	0xFD9
 12866                           status	equ	0xFD8
 12867                           
 12868 ;; *************** function _sprintf *****************
 12869 ;; Defined at:
 12870 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
 12871 ;; Parameters:    Size  Location     Type
 12872 ;;  wh              2   33[BANK0 ] PTR unsigned char 
 12873 ;;		 -> intToFloatStr@end(4), line4(21), line3(21), line2(21), 
 12874 ;;		 -> line1(21), bufferAUX(20), 
 12875 ;;  f               2   35[BANK0 ] PTR const unsigned char 
 12876 ;;		 -> intToFloatStr@conv(4), STR_104(15), STR_103(12), STR_102(10), 
 12877 ;;		 -> STR_101(18), STR_100(10), STR_99(18), STR_98(16), 
 12878 ;;		 -> STR_97(10), STR_96(10), STR_95(11), STR_94(9), 
 12879 ;;		 -> STR_93(3), STR_92(15), STR_91(15), STR_90(11), 
 12880 ;;		 -> STR_89(11), STR_88(19), STR_87(5), STR_86(12), 
 12881 ;;		 -> STR_85(5), STR_84(14), STR_83(19), STR_80(3), 
 12882 ;;		 -> STR_79(7), STR_78(7), STR_76(12), STR_75(17), 
 12883 ;;		 -> STR_74(20), STR_73(8), STR_70(14), STR_67(14), 
 12884 ;;		 -> STR_66(11), STR_63(10), STR_62(31), STR_61(20), 
 12885 ;;		 -> STR_60(20), STR_59(21), STR_58(15), STR_57(6), 
 12886 ;;		 -> STR_56(15), STR_55(6), STR_54(31), STR_53(20), 
 12887 ;;		 -> STR_52(19), STR_51(15), STR_50(19), STR_47(16), 
 12888 ;;		 -> STR_44(16), STR_41(12), STR_40(19), STR_39(16), 
 12889 ;;		 -> STR_38(20), STR_2(5), STR_1(5), 
 12890 ;; Auto vars:     Size  Location     Type
 12891 ;;  pb              4   51[BANK0 ] struct __prbuf
 12892 ;;  ap              2   49[BANK0 ] PTR void [1]
 12893 ;;		 -> ?_sprintf(2), ?_printf(2), 
 12894 ;; Return value:  Size  Location     Type
 12895 ;;                  2   33[BANK0 ] int 
 12896 ;; Registers used:
 12897 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12898 ;; Tracked objects:
 12899 ;;		On entry : 0/0
 12900 ;;		On exit  : 0/0
 12901 ;;		Unchanged: 0/0
 12902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12903 ;;      Params:         0      16       0       0       0       0       0
 12904 ;;      Locals:         0       6       0       0       0       0       0
 12905 ;;      Temps:          0       0       0       0       0       0       0
 12906 ;;      Totals:         0      22       0       0       0       0       0
 12907 ;;Total ram usage:       22 bytes
 12908 ;; Hardware stack levels used:    1
 12909 ;; Hardware stack levels required when called:    8
 12910 ;; This function calls:
 12911 ;;		__doprnt
 12912 ;; This function is called by:
 12913 ;;		_getSerial
 12914 ;;		_acaoTesteBombas
 12915 ;;		_telaPrincipal
 12916 ;;		_tela_ajusteRTC
 12917 ;;		_tela_testeBombas
 12918 ;;		_dataLoger
 12919 ;;		_informacoes
 12920 ;;		_configuraTelefones
 12921 ;;		_configurarEstacionaria
 12922 ;;		_ajusteSP_Bombas
 12923 ;;		_main
 12924 ;;		_intToFloatStr
 12925 ;;		_telaTeste
 12926 ;; This function uses a non-reentrant model
 12927 ;;
 12928                           
 12929                           	psect	text45
 12930  007B76                     __ptext45:
 12931                           	opt stack 0
 12932  007B76                     _sprintf:
 12933                           	opt stack 0
 12934  007B76  FFFF               	dw	65535	; assembler added errata NOP
 12935                           
 12936                           ; BSR set to: 0
 12937                           ;incstack = 0
 12938  007B78  C0A1  F0B3         	movff	sprintf@wh,sprintf@pb
 12939  007B7C  C0A2  F0B4         	movff	sprintf@wh+1,sprintf@pb+1
 12940  007B80  0E00               	movlw	0
 12941  007B82  0100               	movlb	0	; () banked
 12942  007B84  6FB5               	movwf	(sprintf@pb+2)& (0+255),b
 12943  007B86  0E00               	movlw	0
 12944  007B88  6FB6               	movwf	(sprintf@pb+3)& (0+255),b
 12945  007B8A  0EA5               	movlw	low (?_sprintf+4)
 12946  007B8C  6FB1               	movwf	sprintf@ap& (0+255),b
 12947  007B8E  0E00               	movlw	high (?_sprintf+4)
 12948  007B90  6FB2               	movwf	(sprintf@ap+1)& (0+255),b
 12949                           
 12950                           ; BSR set to: 0
 12951  007B92  0EB3               	movlw	low sprintf@pb
 12952  007B94  6F8C               	movwf	__doprnt@pb& (0+255),b
 12953  007B96  0E00               	movlw	high sprintf@pb
 12954  007B98  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 12955  007B9A  C0A3  F08E         	movff	sprintf@f,__doprnt@f
 12956  007B9E  C0A4  F08F         	movff	sprintf@f+1,__doprnt@f+1
 12957  007BA2  0EB1               	movlw	low sprintf@ap
 12958  007BA4  6F90               	movwf	__doprnt@ap& (0+255),b
 12959  007BA6  0E00               	movlw	high sprintf@ap
 12960  007BA8  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 12961  007BAA  EC91  F000         	call	__doprnt	;wreg free
 12962  007BAE  C0B3  FFD9         	movff	sprintf@pb,fsr2l
 12963  007BB2  C0B4  FFDA         	movff	sprintf@pb+1,fsr2h
 12964  007BB6  0E00               	movlw	0
 12965  007BB8  6EDF               	movwf	indf2,c
 12966                           
 12967                           ;	Return value of _sprintf is never used
 12968  007BBA  0012               	return		;funcret
 12969  007BBC  FFFF               	dw	65535	; errata NOP
 12970  007BBE                     __end_of_sprintf:
 12971                           	opt stack 0
 12972                           tblptru	equ	0xFF8
 12973                           tblptrh	equ	0xFF7
 12974                           tblptrl	equ	0xFF6
 12975                           tablat	equ	0xFF5
 12976                           prodh	equ	0xFF4
 12977                           prodl	equ	0xFF3
 12978                           intcon	equ	0xFF2
 12979                           indf0	equ	0xFEF
 12980                           postinc0	equ	0xFEE
 12981                           fsr0h	equ	0xFEA
 12982                           fsr0l	equ	0xFE9
 12983                           wreg	equ	0xFE8
 12984                           postdec1	equ	0xFE5
 12985                           fsr1l	equ	0xFE1
 12986                           indf2	equ	0xFDF
 12987                           postinc2	equ	0xFDE
 12988                           fsr2h	equ	0xFDA
 12989                           fsr2l	equ	0xFD9
 12990                           status	equ	0xFD8
 12991                           
 12992 ;; *************** function __doprnt *****************
 12993 ;; Defined at:
 12994 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 12995 ;; Parameters:    Size  Location     Type
 12996 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
 12997 ;;		 -> sprintf@pb(4), printf@pb(4), 
 12998 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 12999 ;;		 -> intToFloatStr@conv(4), STR_104(15), STR_103(12), STR_102(10), 
 13000 ;;		 -> STR_101(18), STR_100(10), STR_99(18), STR_98(16), 
 13001 ;;		 -> STR_97(10), STR_96(10), STR_95(11), STR_94(9), 
 13002 ;;		 -> STR_93(3), STR_92(15), STR_91(15), STR_90(11), 
 13003 ;;		 -> STR_89(11), STR_88(19), STR_87(5), STR_86(12), 
 13004 ;;		 -> STR_85(5), STR_84(14), STR_83(19), STR_80(3), 
 13005 ;;		 -> STR_79(7), STR_78(7), STR_76(12), STR_75(17), 
 13006 ;;		 -> STR_74(20), STR_73(8), STR_70(14), STR_67(14), 
 13007 ;;		 -> STR_66(11), STR_63(10), STR_62(31), STR_61(20), 
 13008 ;;		 -> STR_60(20), STR_59(21), STR_58(15), STR_57(6), 
 13009 ;;		 -> STR_56(15), STR_55(6), STR_54(31), STR_53(20), 
 13010 ;;		 -> STR_52(19), STR_51(15), STR_50(19), STR_47(16), 
 13011 ;;		 -> STR_44(16), STR_41(12), STR_40(19), STR_39(16), 
 13012 ;;		 -> STR_38(20), STR_37(7), STR_36(11), STR_29(104), 
 13013 ;;		 -> STR_28(63), STR_26(18), STR_24(12), STR_23(7), 
 13014 ;;		 -> STR_21(5), STR_12(104), STR_10(18), STR_8(12), 
 13015 ;;		 -> STR_6(5), STR_3(9), STR_2(5), STR_1(5), 
 13016 ;;  ap              2   16[BANK0 ] PTR PTR void 
 13017 ;;		 -> sprintf@ap(2), printf@ap(2), 
 13018 ;; Auto vars:     Size  Location     Type
 13019 ;;  tmpval          4    0        struct .
 13020 ;;  width           2   30[BANK0 ] int 
 13021 ;;  cp              2   28[BANK0 ] PTR const unsigned char 
 13022 ;;		 -> ?_sprintf(2), ?_printf(2), STR_105(7), _doprnt@c(1), 
 13023 ;;		 -> intToFloatStr@end(4), STR_82(17), STR_81(13), STR_77(12), 
 13024 ;;		 -> STR_72(5), STR_71(3), STR_69(5), STR_68(3), 
 13025 ;;		 -> STR_65(5), STR_64(3), STR_49(5), STR_48(3), 
 13026 ;;		 -> line4(21), STR_46(5), STR_45(3), line3(21), 
 13027 ;;		 -> STR_43(5), STR_42(3), line2(21), line1(21), 
 13028 ;;		 -> STR_35(6), STR_34(3), STR_33(6), STR_32(3), 
 13029 ;;		 -> STR_31(6), STR_30(3), STR_18(6), STR_17(3), 
 13030 ;;		 -> STR_16(6), STR_15(3), STR_14(6), STR_13(3), 
 13031 ;;		 -> tel2(12), tel1(12), bufferAUX(20), NULL(0), 
 13032 ;;		 -> bufferSerial(60), 
 13033 ;;  len             2   25[BANK0 ] unsigned int 
 13034 ;;  val             2   23[BANK0 ] unsigned int 
 13035 ;;  c               1   32[BANK0 ] char 
 13036 ;;  flag            1   27[BANK0 ] unsigned char 
 13037 ;;  prec            1   22[BANK0 ] char 
 13038 ;; Return value:  Size  Location     Type
 13039 ;;                  2   12[BANK0 ] int 
 13040 ;; Registers used:
 13041 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13042 ;; Tracked objects:
 13043 ;;		On entry : 0/0
 13044 ;;		On exit  : 0/0
 13045 ;;		Unchanged: 0/0
 13046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13047 ;;      Params:         0       6       0       0       0       0       0
 13048 ;;      Locals:         0      11       0       0       0       0       0
 13049 ;;      Temps:          0       4       0       0       0       0       0
 13050 ;;      Totals:         0      21       0       0       0       0       0
 13051 ;;Total ram usage:       21 bytes
 13052 ;; Hardware stack levels used:    1
 13053 ;; Hardware stack levels required when called:    7
 13054 ;; This function calls:
 13055 ;;		Absolute function
 13056 ;;		___lwdiv
 13057 ;;		___lwmod
 13058 ;;		___wmul
 13059 ;;		_isdigit
 13060 ;;		_putch
 13061 ;; This function is called by:
 13062 ;;		_printf
 13063 ;;		_sprintf
 13064 ;; This function uses a non-reentrant model
 13065 ;;
 13066                           
 13067                           	psect	text46
 13068  000122                     __ptext46:
 13069                           	opt stack 0
 13070  000122                     __doprnt:
 13071                           	opt stack 0
 13072  000122  FFFF               	dw	65535	; assembler added errata NOP
 13073                           
 13074                           ;doprnt.c: 499: signed char c;
 13075                           ;doprnt.c: 501: int width;
 13076                           ;doprnt.c: 506: signed char prec;
 13077                           ;doprnt.c: 508: unsigned char flag;
 13078                           ;doprnt.c: 523: union {
 13079                           ;doprnt.c: 524: unsigned long vd;
 13080                           ;doprnt.c: 525: double integ;
 13081                           ;doprnt.c: 526: } tmpval;
 13082                           ;doprnt.c: 528: unsigned int val;
 13083                           ;doprnt.c: 529: unsigned len;
 13084                           ;doprnt.c: 530: const char * cp;
 13085                           ;doprnt.c: 536: while(c = *f++) {
 13086                           
 13087                           ;incstack = 0
 13088  000124  D3D7               	goto	u5010
 13089  000126  FFFF               	dw	65535	; assembler added errata NOP
 13090                           
 13091                           ;doprnt.c: 538: if(c != '%')
 13092  000128  0E25               	movlw	37
 13093  00012A  0100               	movlb	0	; () banked
 13094  00012C  19A0               	xorwf	__doprnt@c& (0+255),w,b
 13095  00012E  B4D8               	btfsc	status,2,c
 13096  000130  D037               	goto	l1027
 13097                           
 13098                           ; BSR set to: 0
 13099                           ;doprnt.c: 540: {
 13100                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 13101  000132  EE20 F002          	lfsr	2,2
 13102  000136  518C               	movf	__doprnt@pb& (0+255),w,b
 13103  000138  26D9               	addwf	fsr2l,f,c
 13104  00013A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13105  00013C  22DA               	addwfc	fsr2h,f,c
 13106  00013E  50DE               	movf	postinc2,w,c
 13107  000140  10DE               	iorwf	postinc2,w,c
 13108  000142  B4D8               	btfsc	status,2,c
 13109  000144  D016               	goto	l1028
 13110                           
 13111                           ; BSR set to: 0
 13112  000146  EE20 F002          	lfsr	2,2
 13113  00014A  518C               	movf	__doprnt@pb& (0+255),w,b
 13114  00014C  26D9               	addwf	fsr2l,f,c
 13115  00014E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13116  000150  22DA               	addwfc	fsr2h,f,c
 13117  000152  D801               	call	u4578
 13118  000154  D3BF               	goto	u5010
 13119  000156                     u4578:
 13120  000156  FFFF               	dw	65535	; assembler added errata NOP
 13121  000158  0005               	push	
 13122  00015A  6EFA               	movwf	pclath,c
 13123  00015C  50DE               	movf	postinc2,w,c
 13124  00015E  6EFD               	movwf	tosl,c
 13125  000160  50DE               	movf	postinc2,w,c
 13126  000162  6EFE               	movwf	tosh,c
 13127  000164  50F8               	movf	tblptru,w,c
 13128  000166  6EFF               	movwf	tosu,c
 13129  000168  50FA               	movf	pclath,w,c
 13130  00016A  51A0               	movf	__doprnt@c& (0+255),w,b
 13131  00016C  0012               	return		;indir
 13132  00016E  FFFF               	dw	65535	; errata NOP
 13133  000170  D3B1               	goto	u5010
 13134  000172                     l1028:
 13135  000172  FFFF               	dw	65535	; assembler added errata NOP
 13136  000174  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13137  000178  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13138  00017C  CFDE F092          	movff	postinc2,??__doprnt
 13139  000180  CFDD F093          	movff	postdec2,??__doprnt+1
 13140  000184  C092  FFD9         	movff	??__doprnt,fsr2l
 13141  000188  C093  FFDA         	movff	??__doprnt+1,fsr2h
 13142  00018C  C0A0  FFDF         	movff	__doprnt@c,indf2
 13143  000190  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13144  000194  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13145  000198  2ADE               	incf	postinc2,f,c
 13146  00019A  0E00               	movlw	0
 13147  00019C  22DD               	addwfc	postdec2,f,c
 13148                           
 13149                           ;doprnt.c: 542: continue;
 13150  00019E  D39A               	goto	u5010
 13151  0001A0                     l1027:
 13152  0001A0  FFFF               	dw	65535	; assembler added errata NOP
 13153                           
 13154                           ;doprnt.c: 543: }
 13155                           ;doprnt.c: 546: width = 0;
 13156  0001A2  0E00               	movlw	0
 13157  0001A4  0100               	movlb	0	; () banked
 13158  0001A6  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 13159  0001A8  0E00               	movlw	0
 13160  0001AA  6F9E               	movwf	__doprnt@width& (0+255),b
 13161                           
 13162                           ;doprnt.c: 548: flag = 0;
 13163  0001AC  0E00               	movlw	0
 13164  0001AE  6F9B               	movwf	__doprnt@flag& (0+255),b
 13165                           
 13166                           ; BSR set to: 0
 13167                           ;doprnt.c: 551: switch(*f) {
 13168                           
 13169                           ;doprnt.c: 550: for(;;) {
 13170  0001B0  D005               	goto	l1031
 13171  0001B2  FFFF               	dw	65535	; assembler added errata NOP
 13172                           
 13173                           ;doprnt.c: 580: flag |= 0x04;
 13174                           
 13175                           ; BSR set to: 0
 13176  0001B4  0100               	movlb	0	; () banked
 13177  0001B6  859B               	bsf	__doprnt@flag& (0+255),2,b
 13178                           
 13179                           ;doprnt.c: 581: f++;
 13180  0001B8  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 13181  0001BA  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 13182  0001BC                     l1031:
 13183  0001BC  FFFF               	dw	65535	; assembler added errata NOP
 13184                           
 13185                           ; BSR set to: 0
 13186  0001BE  C08E  FFF6         	movff	__doprnt@f,tblptrl
 13187  0001C2  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 13188  0001C6  6AF8               	clrf	tblptru,c
 13189  0001C8  0E05               	movlw	(high __ramtop+-1)
 13190  0001CA  64F7               	cpfsgt	tblptrh,c
 13191  0001CC  D004               	bra	u4587
 13192  0001CE  0008               	tblrd		*
 13193  0001D0  FFFF               	dw	65535	; errata NOP
 13194  0001D2  50F5               	movf	tablat,w,c
 13195  0001D4  D005               	bra	u4580
 13196  0001D6                     u4587:
 13197  0001D6  CFF6 FFE9          	movff	tblptrl,fsr0l
 13198  0001DA  CFF7 FFEA          	movff	tblptrh,fsr0h
 13199  0001DE  50EF               	movf	indf0,w,c
 13200  0001E0                     u4580:
 13201                           
 13202                           ; Switch size 1, requested type "space"
 13203                           ; Number of cases is 1, Range of values is 48 to 48
 13204                           ; switch strategies available:
 13205                           ; Name         Instructions Cycles
 13206                           ; simple_byte            4     3 (average)
 13207                           ;	Chosen strategy is simple_byte
 13208  0001E0  0A30               	xorlw	48	; case 48
 13209  0001E2  B4D8               	btfsc	status,2,c
 13210  0001E4  D7E6               	goto	l1032
 13211                           
 13212                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13213                           
 13214                           ;doprnt.c: 586: }
 13215                           
 13216                           ;doprnt.c: 585: break;
 13217  0001E6  C08E  FFF6         	movff	__doprnt@f,tblptrl
 13218  0001EA  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 13219  0001EE  6AF8               	clrf	tblptru,c
 13220  0001F0  0E05               	movlw	(high __ramtop+-1)
 13221  0001F2  64F7               	cpfsgt	tblptrh,c
 13222  0001F4  D004               	bra	u4597
 13223  0001F6  0008               	tblrd		*
 13224  0001F8  FFFF               	dw	65535	; errata NOP
 13225  0001FA  50F5               	movf	tablat,w,c
 13226  0001FC  D005               	bra	u4590
 13227  0001FE                     u4597:
 13228  0001FE  CFF6 FFE9          	movff	tblptrl,fsr0l
 13229  000202  CFF7 FFEA          	movff	tblptrh,fsr0h
 13230  000206  50EF               	movf	indf0,w,c
 13231  000208                     u4590:
 13232  000208  EC2F  F03B         	call	_isdigit
 13233  00020C  A0D8               	btfss	status,0,c
 13234  00020E  D16B               	goto	l1039
 13235                           
 13236                           ;doprnt.c: 598: width = 0;
 13237  000210  0E00               	movlw	0
 13238  000212  0100               	movlb	0	; () banked
 13239  000214  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 13240  000216  0E00               	movlw	0
 13241  000218  6F9E               	movwf	__doprnt@width& (0+255),b
 13242  00021A  FFFF               	dw	65535	; assembler added errata NOP
 13243                           
 13244                           ;doprnt.c: 600: width *= 10;
 13245                           
 13246                           ; BSR set to: 0
 13247  00021C  C09E  F080         	movff	__doprnt@width,___wmul@multiplier
 13248  000220  C09F  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
 13249  000224  0E00               	movlw	0
 13250  000226  0100               	movlb	0	; () banked
 13251  000228  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13252  00022A  0E0A               	movlw	10
 13253  00022C  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13254  00022E  EC59  F03B         	call	___wmul	;wreg free
 13255  000232  C080  F09E         	movff	?___wmul,__doprnt@width
 13256  000236  C081  F09F         	movff	?___wmul+1,__doprnt@width+1
 13257                           
 13258                           ;doprnt.c: 601: width += *f++ - '0';
 13259  00023A  0ED0               	movlw	208
 13260  00023C  0100               	movlb	0	; () banked
 13261  00023E  6F92               	movwf	??__doprnt& (0+255),b
 13262  000240  0EFF               	movlw	255
 13263  000242  6F93               	movwf	(??__doprnt+1)& (0+255),b
 13264  000244  C08E  FFF6         	movff	__doprnt@f,tblptrl
 13265  000248  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 13266  00024C  6AF8               	clrf	tblptru,c
 13267  00024E  0E05               	movlw	(high __ramtop+-1)
 13268  000250  64F7               	cpfsgt	tblptrh,c
 13269  000252  D004               	bra	u4617
 13270  000254  0008               	tblrd		*
 13271  000256  FFFF               	dw	65535	; errata NOP
 13272  000258  50F5               	movf	tablat,w,c
 13273  00025A  D005               	bra	u4610
 13274  00025C                     u4617:
 13275  00025C  CFF6 FFE9          	movff	tblptrl,fsr0l
 13276  000260  CFF7 FFEA          	movff	tblptrh,fsr0h
 13277  000264  50EF               	movf	indf0,w,c
 13278  000266                     u4610:
 13279  000266  0100               	movlb	0	; () banked
 13280  000268  6F94               	movwf	(??__doprnt+2)& (0+255),b
 13281  00026A  6B95               	clrf	(??__doprnt+3)& (0+255),b
 13282  00026C  5192               	movf	??__doprnt& (0+255),w,b
 13283  00026E  2794               	addwf	(??__doprnt+2)& (0+255),f,b
 13284  000270  5193               	movf	(??__doprnt+1)& (0+255),w,b
 13285  000272  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
 13286  000274  5194               	movf	(??__doprnt+2)& (0+255),w,b
 13287  000276  279E               	addwf	__doprnt@width& (0+255),f,b
 13288  000278  5195               	movf	(??__doprnt+3)& (0+255),w,b
 13289  00027A  239F               	addwfc	(__doprnt@width+1)& (0+255),f,b
 13290                           
 13291                           ; BSR set to: 0
 13292  00027C  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 13293  00027E  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 13294                           
 13295                           ; BSR set to: 0
 13296                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13297  000280  C08E  FFF6         	movff	__doprnt@f,tblptrl
 13298  000284  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 13299  000288  6AF8               	clrf	tblptru,c
 13300  00028A  0E05               	movlw	(high __ramtop+-1)
 13301  00028C  64F7               	cpfsgt	tblptrh,c
 13302  00028E  D004               	bra	u4627
 13303  000290  0008               	tblrd		*
 13304  000292  FFFF               	dw	65535	; errata NOP
 13305  000294  50F5               	movf	tablat,w,c
 13306  000296  D005               	bra	u4620
 13307  000298                     u4627:
 13308  000298  CFF6 FFE9          	movff	tblptrl,fsr0l
 13309  00029C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13310  0002A0  50EF               	movf	indf0,w,c
 13311  0002A2                     u4620:
 13312  0002A2  EC2F  F03B         	call	_isdigit
 13313  0002A6  A0D8               	btfss	status,0,c
 13314  0002A8  D11E               	goto	l1039
 13315  0002AA  D7B7               	goto	l1037
 13316  0002AC  FFFF               	dw	65535	; assembler added errata NOP
 13317                           
 13318                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13319  0002AE  C090  FFD9         	movff	__doprnt@ap,fsr2l
 13320  0002B2  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 13321  0002B6  CFDF F092          	movff	indf2,??__doprnt
 13322  0002BA  0E02               	movlw	2
 13323  0002BC  26DE               	addwf	postinc2,f,c
 13324  0002BE  CFDF F093          	movff	indf2,??__doprnt+1
 13325  0002C2  0E00               	movlw	0
 13326  0002C4  22DD               	addwfc	postdec2,f,c
 13327  0002C6  C092  FFD9         	movff	??__doprnt,fsr2l
 13328  0002CA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 13329  0002CE  CFDE F09C          	movff	postinc2,__doprnt@cp
 13330  0002D2  CFDD F09D          	movff	postdec2,__doprnt@cp+1
 13331                           
 13332                           ;doprnt.c: 740: if(!cp)
 13333  0002D6  0100               	movlb	0	; () banked
 13334  0002D8  519C               	movf	__doprnt@cp& (0+255),w,b
 13335  0002DA  119D               	iorwf	(__doprnt@cp+1)& (0+255),w,b
 13336  0002DC  A4D8               	btfss	status,2,c
 13337  0002DE  D004               	goto	l1046
 13338                           
 13339                           ; BSR set to: 0
 13340                           ;doprnt.c: 741: cp = "(null)";
 13341  0002E0  0EAB               	movlw	low STR_105
 13342  0002E2  6F9C               	movwf	__doprnt@cp& (0+255),b
 13343  0002E4  0E7F               	movlw	high STR_105
 13344  0002E6  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 13345  0002E8                     l1046:
 13346  0002E8  FFFF               	dw	65535	; assembler added errata NOP
 13347                           
 13348                           ; BSR set to: 0
 13349                           ;doprnt.c: 745: len = 0;
 13350                           
 13351                           ; BSR set to: 0
 13352  0002EA  0E00               	movlw	0
 13353  0002EC  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 13354  0002EE  0E00               	movlw	0
 13355  0002F0  6F99               	movwf	__doprnt@len& (0+255),b
 13356                           
 13357                           ;doprnt.c: 746: while(cp[len])
 13358  0002F2  D004               	goto	l1047
 13359  0002F4  FFFF               	dw	65535	; assembler added errata NOP
 13360                           
 13361                           ;doprnt.c: 747: len++;
 13362                           
 13363                           ; BSR set to: 0
 13364  0002F6  0100               	movlb	0	; () banked
 13365  0002F8  4B99               	infsnz	__doprnt@len& (0+255),f,b
 13366  0002FA  2B9A               	incf	(__doprnt@len+1)& (0+255),f,b
 13367  0002FC                     l1047:
 13368  0002FC  FFFF               	dw	65535	; assembler added errata NOP
 13369                           
 13370                           ; BSR set to: 0
 13371                           
 13372                           ; BSR set to: 0
 13373  0002FE  5199               	movf	__doprnt@len& (0+255),w,b
 13374  000300  259C               	addwf	__doprnt@cp& (0+255),w,b
 13375  000302  6F92               	movwf	??__doprnt& (0+255),b
 13376  000304  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 13377  000306  219D               	addwfc	(__doprnt@cp+1)& (0+255),w,b
 13378  000308  6F93               	movwf	(??__doprnt+1)& (0+255),b
 13379  00030A  C092  FFF6         	movff	??__doprnt,tblptrl
 13380  00030E  C093  FFF7         	movff	??__doprnt+1,tblptrh
 13381  000312  6AF8               	clrf	tblptru,c
 13382  000314  0E05               	movlw	(high __ramtop+-1)
 13383  000316  64F7               	cpfsgt	tblptrh,c
 13384  000318  D004               	bra	u4657
 13385  00031A  0008               	tblrd		*
 13386  00031C  FFFF               	dw	65535	; errata NOP
 13387  00031E  50F5               	movf	tablat,w,c
 13388  000320  D005               	bra	u4650
 13389  000322                     u4657:
 13390  000322  CFF6 FFE9          	movff	tblptrl,fsr0l
 13391  000326  CFF7 FFEA          	movff	tblptrh,fsr0h
 13392  00032A  50EF               	movf	indf0,w,c
 13393  00032C                     u4650:
 13394  00032C  0900               	iorlw	0
 13395  00032E  A4D8               	btfss	status,2,c
 13396  000330  D7E1               	goto	l1048
 13397  000332                     u4660:
 13398  000332  FFFF               	dw	65535	; assembler added errata NOP
 13399                           
 13400                           ;doprnt.c: 757: if(width > len)
 13401                           
 13402                           ;doprnt.c: 750: dostring:
 13403  000334  0100               	movlb	0	; () banked
 13404  000336  519E               	movf	__doprnt@width& (0+255),w,b
 13405  000338  5D99               	subwf	__doprnt@len& (0+255),w,b
 13406  00033A  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 13407  00033C  599A               	subwfb	(__doprnt@len+1)& (0+255),w,b
 13408  00033E  B0D8               	btfsc	status,0,c
 13409  000340  D005               	goto	l1051
 13410                           
 13411                           ; BSR set to: 0
 13412                           ;doprnt.c: 758: width -= len;
 13413  000342  5199               	movf	__doprnt@len& (0+255),w,b
 13414  000344  5F9E               	subwf	__doprnt@width& (0+255),f,b
 13415  000346  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 13416  000348  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 13417  00034A  D03D               	goto	l1056
 13418  00034C                     l1051:
 13419  00034C  FFFF               	dw	65535	; assembler added errata NOP
 13420                           
 13421                           ; BSR set to: 0
 13422                           ;doprnt.c: 759: else
 13423                           ;doprnt.c: 760: width = 0;
 13424                           
 13425                           ; BSR set to: 0
 13426  00034E  0E00               	movlw	0
 13427  000350  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 13428  000352  0E00               	movlw	0
 13429  000354  6F9E               	movwf	__doprnt@width& (0+255),b
 13430                           
 13431                           ; BSR set to: 0
 13432                           ;doprnt.c: 764: while(width--)
 13433  000356  D037               	goto	l1056
 13434  000358  FFFF               	dw	65535	; assembler added errata NOP
 13435  00035A                     l4866:
 13436                           
 13437                           ; BSR set to: 0
 13438                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 13439  00035A  EE20 F002          	lfsr	2,2
 13440  00035E  518C               	movf	__doprnt@pb& (0+255),w,b
 13441  000360  26D9               	addwf	fsr2l,f,c
 13442  000362  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13443  000364  22DA               	addwfc	fsr2h,f,c
 13444  000366  50DE               	movf	postinc2,w,c
 13445  000368  10DE               	iorwf	postinc2,w,c
 13446  00036A  B4D8               	btfsc	status,2,c
 13447  00036C  D016               	goto	l1055
 13448                           
 13449                           ; BSR set to: 0
 13450  00036E  EE20 F002          	lfsr	2,2
 13451  000372  518C               	movf	__doprnt@pb& (0+255),w,b
 13452  000374  26D9               	addwf	fsr2l,f,c
 13453  000376  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13454  000378  22DA               	addwfc	fsr2h,f,c
 13455  00037A  D801               	call	u4698
 13456  00037C  D024               	goto	l1056
 13457  00037E                     u4698:
 13458  00037E  FFFF               	dw	65535	; assembler added errata NOP
 13459  000380  0005               	push	
 13460  000382  6EFA               	movwf	pclath,c
 13461  000384  50DE               	movf	postinc2,w,c
 13462  000386  6EFD               	movwf	tosl,c
 13463  000388  50DE               	movf	postinc2,w,c
 13464  00038A  6EFE               	movwf	tosh,c
 13465  00038C  50F8               	movf	tblptru,w,c
 13466  00038E  6EFF               	movwf	tosu,c
 13467  000390  50FA               	movf	pclath,w,c
 13468  000392  0E20               	movlw	32
 13469  000394  0012               	return		;indir
 13470  000396  FFFF               	dw	65535	; errata NOP
 13471  000398  D016               	goto	l1056
 13472  00039A                     l1055:
 13473  00039A  FFFF               	dw	65535	; assembler added errata NOP
 13474  00039C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13475  0003A0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13476  0003A4  CFDE F092          	movff	postinc2,??__doprnt
 13477  0003A8  CFDD F093          	movff	postdec2,??__doprnt+1
 13478  0003AC  C092  FFD9         	movff	??__doprnt,fsr2l
 13479  0003B0  C093  FFDA         	movff	??__doprnt+1,fsr2h
 13480  0003B4  0E20               	movlw	32
 13481  0003B6  6EDF               	movwf	indf2,c
 13482  0003B8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13483  0003BC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13484  0003C0  2ADE               	incf	postinc2,f,c
 13485  0003C2  0E00               	movlw	0
 13486  0003C4  22DD               	addwfc	postdec2,f,c
 13487  0003C6                     l1056:
 13488  0003C6  FFFF               	dw	65535	; assembler added errata NOP
 13489  0003C8  0100               	movlb	0	; () banked
 13490  0003CA  079E               	decf	__doprnt@width& (0+255),f,b
 13491  0003CC  A0D8               	btfss	status,0,c
 13492  0003CE  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 13493  0003D0  299E               	incf	__doprnt@width& (0+255),w,b
 13494  0003D2  E1C3               	bnz	l4866
 13495  0003D4  299F               	incf	(__doprnt@width+1)& (0+255),w,b
 13496  0003D6  B4D8               	btfsc	status,2,c
 13497  0003D8  D05F               	goto	l1061
 13498  0003DA  D7BE               	goto	l1054
 13499  0003DC  FFFF               	dw	65535	; assembler added errata NOP
 13500  0003DE                     l4876:
 13501                           
 13502                           ; BSR set to: 0
 13503                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 13504  0003DE  EE20 F002          	lfsr	2,2
 13505  0003E2  518C               	movf	__doprnt@pb& (0+255),w,b
 13506  0003E4  26D9               	addwf	fsr2l,f,c
 13507  0003E6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13508  0003E8  22DA               	addwfc	fsr2h,f,c
 13509  0003EA  50DE               	movf	postinc2,w,c
 13510  0003EC  10DE               	iorwf	postinc2,w,c
 13511  0003EE  B4D8               	btfsc	status,2,c
 13512  0003F0  D02A               	goto	l1060
 13513                           
 13514                           ; BSR set to: 0
 13515  0003F2  EE20 F002          	lfsr	2,2
 13516  0003F6  518C               	movf	__doprnt@pb& (0+255),w,b
 13517  0003F8  26D9               	addwf	fsr2l,f,c
 13518  0003FA  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13519  0003FC  22DA               	addwfc	fsr2h,f,c
 13520  0003FE  D801               	call	u4728
 13521  000400  D01D               	goto	u4729
 13522  000402                     u4728:
 13523  000402  FFFF               	dw	65535	; assembler added errata NOP
 13524  000404  0005               	push	
 13525  000406  6EFA               	movwf	pclath,c
 13526  000408  50DE               	movf	postinc2,w,c
 13527  00040A  6EFD               	movwf	tosl,c
 13528  00040C  50DE               	movf	postinc2,w,c
 13529  00040E  6EFE               	movwf	tosh,c
 13530  000410  50F8               	movf	tblptru,w,c
 13531  000412  6EFF               	movwf	tosu,c
 13532  000414  50FA               	movf	pclath,w,c
 13533  000416  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 13534  00041A  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 13535  00041E  6AF8               	clrf	tblptru,c
 13536  000420  0E05               	movlw	(high __ramtop+-1)
 13537  000422  64F7               	cpfsgt	tblptrh,c
 13538  000424  D004               	bra	u4737
 13539  000426  0008               	tblrd		*
 13540  000428  FFFF               	dw	65535	; errata NOP
 13541  00042A  50F5               	movf	tablat,w,c
 13542  00042C  D005               	bra	u4730
 13543  00042E                     u4737:
 13544  00042E  CFF6 FFE9          	movff	tblptrl,fsr0l
 13545  000432  CFF7 FFEA          	movff	tblptrh,fsr0h
 13546  000436  50EF               	movf	indf0,w,c
 13547  000438                     u4730:
 13548  000438  0012               	return		;indir
 13549  00043A  FFFF               	dw	65535	; errata NOP
 13550  00043C                     u4729:
 13551  00043C  FFFF               	dw	65535	; assembler added errata NOP
 13552  00043E  0100               	movlb	0	; () banked
 13553  000440  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 13554  000442  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 13555  000444  D029               	goto	l1061
 13556  000446                     l1060:
 13557  000446  FFFF               	dw	65535	; assembler added errata NOP
 13558                           
 13559                           ; BSR set to: 0
 13560                           
 13561                           ; BSR set to: 0
 13562  000448  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 13563  00044C  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 13564  000450  6AF8               	clrf	tblptru,c
 13565  000452  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13566  000456  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13567  00045A  CFDE F092          	movff	postinc2,??__doprnt
 13568  00045E  CFDD F093          	movff	postdec2,??__doprnt+1
 13569  000462  C092  FFD9         	movff	??__doprnt,fsr2l
 13570  000466  C093  FFDA         	movff	??__doprnt+1,fsr2h
 13571  00046A  0E05               	movlw	(high __ramtop+-1)
 13572  00046C  64F7               	cpfsgt	tblptrh,c
 13573  00046E  D004               	bra	u4747
 13574  000470  0008               	tblrd		*
 13575  000472  FFFF               	dw	65535	; errata NOP
 13576  000474  50F5               	movf	tablat,w,c
 13577  000476  D005               	bra	u4740
 13578  000478                     u4747:
 13579  000478  CFF6 FFE9          	movff	tblptrl,fsr0l
 13580  00047C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13581  000480  50EF               	movf	indf0,w,c
 13582  000482                     u4740:
 13583  000482  6EDF               	movwf	indf2,c
 13584  000484  0100               	movlb	0	; () banked
 13585  000486  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 13586  000488  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 13587                           
 13588                           ; BSR set to: 0
 13589  00048A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13590  00048E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13591  000492  2ADE               	incf	postinc2,f,c
 13592  000494  0E00               	movlw	0
 13593  000496  22DD               	addwfc	postdec2,f,c
 13594  000498                     l1061:
 13595  000498  FFFF               	dw	65535	; assembler added errata NOP
 13596                           
 13597                           ; BSR set to: 0
 13598                           
 13599                           ; BSR set to: 0
 13600                           
 13601                           ; BSR set to: 0
 13602  00049A  0799               	decf	__doprnt@len& (0+255),f,b
 13603  00049C  A0D8               	btfss	status,0,c
 13604  00049E  079A               	decf	(__doprnt@len+1)& (0+255),f,b
 13605  0004A0  2999               	incf	__doprnt@len& (0+255),w,b
 13606  0004A2  E19D               	bnz	l4876
 13607  0004A4  299A               	incf	(__doprnt@len+1)& (0+255),w,b
 13608  0004A6  B4D8               	btfsc	status,2,c
 13609  0004A8  D215               	goto	u5010
 13610  0004AA  D798               	goto	l1059
 13611  0004AC  FFFF               	dw	65535	; assembler added errata NOP
 13612                           
 13613                           ; BSR set to: 0
 13614                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 13615                           
 13616                           ; BSR set to: 0
 13617  0004AE  C090  FFD9         	movff	__doprnt@ap,fsr2l
 13618  0004B2  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 13619  0004B6  CFDF F092          	movff	indf2,??__doprnt
 13620  0004BA  0E02               	movlw	2
 13621  0004BC  26DE               	addwf	postinc2,f,c
 13622  0004BE  CFDF F093          	movff	indf2,??__doprnt+1
 13623  0004C2  0E00               	movlw	0
 13624  0004C4  22DD               	addwfc	postdec2,f,c
 13625  0004C6  C092  FFD9         	movff	??__doprnt,fsr2l
 13626  0004CA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 13627  0004CE  50DF               	movf	indf2,w,c
 13628  0004D0  6FA0               	movwf	__doprnt@c& (0+255),b
 13629  0004D2  FFFF               	dw	65535	; assembler added errata NOP
 13630                           
 13631                           ; BSR set to: 0
 13632                           ;doprnt.c: 805: cp = (char *)&c;
 13633                           
 13634                           ; BSR set to: 0
 13635  0004D4  0EA0               	movlw	low __doprnt@c
 13636  0004D6  6F9C               	movwf	__doprnt@cp& (0+255),b
 13637  0004D8  0E00               	movlw	high __doprnt@c
 13638  0004DA  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;doprnt.c: 806: len = 1;
 13642  0004DC  0E00               	movlw	0
 13643  0004DE  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 13644  0004E0  0E01               	movlw	1
 13645  0004E2  6F99               	movwf	__doprnt@len& (0+255),b
 13646                           
 13647                           ;doprnt.c: 807: goto dostring;
 13648  0004E4  D726               	goto	u4660
 13649  0004E6                     l1039:
 13650  0004E6  FFFF               	dw	65535	; assembler added errata NOP
 13651                           
 13652                           ; BSR set to: 0
 13653  0004E8  0100               	movlb	0	; () banked
 13654  0004EA  518E               	movf	__doprnt@f& (0+255),w,b
 13655  0004EC  6F92               	movwf	??__doprnt& (0+255),b
 13656  0004EE  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 13657  0004F0  6F93               	movwf	(??__doprnt+1)& (0+255),b
 13658  0004F2  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 13659  0004F4  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 13660  0004F6  C092  FFF6         	movff	??__doprnt,tblptrl
 13661  0004FA  C093  FFF7         	movff	??__doprnt+1,tblptrh
 13662  0004FE  6AF8               	clrf	tblptru,c
 13663  000500  0E05               	movlw	(high __ramtop+-1)
 13664  000502  64F7               	cpfsgt	tblptrh,c
 13665  000504  D004               	bra	u4767
 13666  000506  0008               	tblrd		*
 13667  000508  FFFF               	dw	65535	; errata NOP
 13668  00050A  50F5               	movf	tablat,w,c
 13669  00050C  D005               	bra	u4760
 13670  00050E                     u4767:
 13671  00050E  CFF6 FFE9          	movff	tblptrl,fsr0l
 13672  000512  CFF7 FFEA          	movff	tblptrh,fsr0h
 13673  000516  50EF               	movf	indf0,w,c
 13674  000518                     u4760:
 13675  000518  0100               	movlb	0	; () banked
 13676  00051A  6FA0               	movwf	__doprnt@c& (0+255),b
 13677  00051C  51A0               	movf	__doprnt@c& (0+255),w,b
 13678                           
 13679                           ; Switch size 1, requested type "space"
 13680                           ; Number of cases is 5, Range of values is 0 to 115
 13681                           ; switch strategies available:
 13682                           ; Name         Instructions Cycles
 13683                           ; simple_byte           16     9 (average)
 13684                           ;	Chosen strategy is simple_byte
 13685  00051E  0A00               	xorlw	0	; case 0
 13686  000520  B4D8               	btfsc	status,2,c
 13687  000522  D1F6               	goto	u5030
 13688  000524  0A63               	xorlw	99	; case 99
 13689  000526  B4D8               	btfsc	status,2,c
 13690  000528  D7C1               	goto	l1063
 13691  00052A  0A07               	xorlw	7	; case 100
 13692  00052C  B4D8               	btfsc	status,2,c
 13693  00052E  D007               	goto	l1044
 13694  000530  0A0D               	xorlw	13	; case 105
 13695  000532  B4D8               	btfsc	status,2,c
 13696  000534  D004               	goto	l1044
 13697  000536  0A1A               	xorlw	26	; case 115
 13698  000538  B4D8               	btfsc	status,2,c
 13699  00053A  D6B8               	goto	l1045
 13700  00053C  D7CA               	goto	l1064
 13701  00053E                     l1044:
 13702  00053E  FFFF               	dw	65535	; assembler added errata NOP
 13703                           
 13704                           ;doprnt.c: 1253: {
 13705                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13706                           
 13707                           ; BSR set to: 0
 13708  000540  C090  FFD9         	movff	__doprnt@ap,fsr2l
 13709  000544  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 13710  000548  CFDF F092          	movff	indf2,??__doprnt
 13711  00054C  0E02               	movlw	2
 13712  00054E  26DE               	addwf	postinc2,f,c
 13713  000550  CFDF F093          	movff	indf2,??__doprnt+1
 13714  000554  0E00               	movlw	0
 13715  000556  22DD               	addwfc	postdec2,f,c
 13716  000558  C092  FFD9         	movff	??__doprnt,fsr2l
 13717  00055C  C093  FFDA         	movff	??__doprnt+1,fsr2h
 13718  000560  CFDE F097          	movff	postinc2,__doprnt@val
 13719  000564  CFDD F098          	movff	postdec2,__doprnt@val+1
 13720                           
 13721                           ;doprnt.c: 1261: if((int)val < 0) {
 13722  000568  0100               	movlb	0	; () banked
 13723  00056A  AF98               	btfss	(__doprnt@val+1)& (0+255),7,b
 13724  00056C  D006               	goto	l1065
 13725                           
 13726                           ; BSR set to: 0
 13727                           ;doprnt.c: 1262: flag |= 0x03;
 13728  00056E  0E03               	movlw	3
 13729  000570  139B               	iorwf	__doprnt@flag& (0+255),f,b
 13730                           
 13731                           ; BSR set to: 0
 13732                           ;doprnt.c: 1263: val = -val;
 13733  000572  6D97               	negf	__doprnt@val& (0+255),b
 13734  000574  1F98               	comf	(__doprnt@val+1)& (0+255),f,b
 13735  000576  B0D8               	btfsc	status,0,c
 13736  000578  2B98               	incf	(__doprnt@val+1)& (0+255),f,b
 13737  00057A                     l1065:
 13738  00057A  FFFF               	dw	65535	; assembler added errata NOP
 13739                           
 13740                           ; BSR set to: 0
 13741                           ;doprnt.c: 1264: }
 13742                           ;doprnt.c: 1266: }
 13743                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13744                           
 13745                           ; BSR set to: 0
 13746  00057C  0E01               	movlw	1
 13747  00057E  6FA0               	movwf	__doprnt@c& (0+255),b
 13748  000580                     l4910:
 13749  000580  FFFF               	dw	65535	; assembler added errata NOP
 13750                           
 13751                           ; BSR set to: 0
 13752  000582  0E05               	movlw	5
 13753  000584  19A0               	xorwf	__doprnt@c& (0+255),w,b
 13754  000586  B4D8               	btfsc	status,2,c
 13755  000588  D014               	goto	u4800
 13756                           
 13757                           ; BSR set to: 0
 13758                           ;doprnt.c: 1306: if(val < dpowers[c])
 13759                           
 13760                           ; BSR set to: 0
 13761                           
 13762                           ; BSR set to: 0
 13763  00058A  51A0               	movf	__doprnt@c& (0+255),w,b
 13764  00058C  0D02               	mullw	2
 13765  00058E  0E37               	movlw	low _dpowers
 13766  000590  24F3               	addwf	prodl,w,c
 13767  000592  6EF6               	movwf	tblptrl,c
 13768  000594  0E7C               	movlw	high _dpowers
 13769  000596  20F4               	addwfc	prodh,w,c
 13770  000598  6EF7               	movwf	tblptrh,c
 13771  00059A                     	if	0	;There are less than 3 active tblptr bytes
 13772  00059A                     	endif
 13773  00059A  0009               	tblrd		*+
 13774  00059C  FFFF               	dw	65535	; errata NOP
 13775  00059E  50F5               	movf	tablat,w,c
 13776  0005A0  5D97               	subwf	__doprnt@val& (0+255),w,b
 13777  0005A2  0009               	tblrd		*+
 13778  0005A4  FFFF               	dw	65535	; errata NOP
 13779  0005A6  50F5               	movf	tablat,w,c
 13780  0005A8  5998               	subwfb	(__doprnt@val+1)& (0+255),w,b
 13781  0005AA  A0D8               	btfss	status,0,c
 13782  0005AC  D002               	goto	u4800
 13783                           
 13784                           ; BSR set to: 0
 13785                           
 13786                           ; BSR set to: 0
 13787                           
 13788                           ; BSR set to: 0
 13789                           ;doprnt.c: 1307: break;
 13790  0005AE  2BA0               	incf	__doprnt@c& (0+255),f,b
 13791  0005B0  D7E7               	goto	l4910
 13792  0005B2                     u4800:
 13793  0005B2  FFFF               	dw	65535	; assembler added errata NOP
 13794                           
 13795                           ; BSR set to: 0
 13796                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13797                           
 13798                           ; BSR set to: 0
 13799  0005B4  519E               	movf	__doprnt@width& (0+255),w,b
 13800  0005B6  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 13801  0005B8  B4D8               	btfsc	status,2,c
 13802  0005BA  D009               	goto	l1069
 13803                           
 13804                           ; BSR set to: 0
 13805  0005BC  C09B  F092         	movff	__doprnt@flag,??__doprnt
 13806  0005C0  0E03               	movlw	3
 13807  0005C2  1792               	andwf	??__doprnt& (0+255),f,b
 13808  0005C4  B4D8               	btfsc	status,2,c
 13809  0005C6  D003               	goto	l1069
 13810                           
 13811                           ; BSR set to: 0
 13812                           ;doprnt.c: 1346: width--;
 13813  0005C8  079E               	decf	__doprnt@width& (0+255),f,b
 13814  0005CA  A0D8               	btfss	status,0,c
 13815  0005CC  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 13816  0005CE                     l1069:
 13817  0005CE  FFFF               	dw	65535	; assembler added errata NOP
 13818                           
 13819                           ; BSR set to: 0
 13820                           ;doprnt.c: 1381: if(width > c)
 13821                           
 13822                           ; BSR set to: 0
 13823  0005D0  0E80               	movlw	128
 13824  0005D2  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 13825  0005D4  0E7F               	movlw	127
 13826  0005D6  6F92               	movwf	??__doprnt& (0+255),b
 13827  0005D8  519E               	movf	__doprnt@width& (0+255),w,b
 13828  0005DA  5DA0               	subwf	__doprnt@c& (0+255),w,b
 13829  0005DC  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 13830  0005DE  0A80               	xorlw	128
 13831  0005E0  5992               	subwfb	??__doprnt& (0+255),w,b
 13832  0005E2  B0D8               	btfsc	status,0,c
 13833  0005E4  D007               	goto	l1070
 13834                           
 13835                           ; BSR set to: 0
 13836                           ;doprnt.c: 1382: width -= c;
 13837  0005E6  51A0               	movf	__doprnt@c& (0+255),w,b
 13838  0005E8  5F9E               	subwf	__doprnt@width& (0+255),f,b
 13839  0005EA  0E00               	movlw	0
 13840  0005EC  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 13841  0005EE  0EFF               	movlw	255
 13842  0005F0  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 13843  0005F2  D005               	goto	l1071
 13844  0005F4                     l1070:
 13845  0005F4  FFFF               	dw	65535	; assembler added errata NOP
 13846                           
 13847                           ; BSR set to: 0
 13848                           ;doprnt.c: 1383: else
 13849                           ;doprnt.c: 1384: width = 0;
 13850                           
 13851                           ; BSR set to: 0
 13852  0005F6  0E00               	movlw	0
 13853  0005F8  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 13854  0005FA  0E00               	movlw	0
 13855  0005FC  6F9E               	movwf	__doprnt@width& (0+255),b
 13856  0005FE                     l1071:
 13857  0005FE  FFFF               	dw	65535	; assembler added errata NOP
 13858                           
 13859                           ; BSR set to: 0
 13860                           ;doprnt.c: 1387: if(flag & 0x04) {
 13861                           
 13862                           ; BSR set to: 0
 13863  000600  A59B               	btfss	__doprnt@flag& (0+255),2,b
 13864  000602  D07F               	goto	l1072
 13865                           
 13866                           ; BSR set to: 0
 13867                           ;doprnt.c: 1392: if(flag & 0x03)
 13868  000604  C09B  F092         	movff	__doprnt@flag,??__doprnt
 13869  000608  0E03               	movlw	3
 13870  00060A  1792               	andwf	??__doprnt& (0+255),f,b
 13871  00060C  B4D8               	btfsc	status,2,c
 13872  00060E  D036               	goto	l1075
 13873                           
 13874                           ; BSR set to: 0
 13875                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 13876  000610  EE20 F002          	lfsr	2,2
 13877  000614  518C               	movf	__doprnt@pb& (0+255),w,b
 13878  000616  26D9               	addwf	fsr2l,f,c
 13879  000618  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13880  00061A  22DA               	addwfc	fsr2h,f,c
 13881  00061C  50DE               	movf	postinc2,w,c
 13882  00061E  10DE               	iorwf	postinc2,w,c
 13883  000620  B4D8               	btfsc	status,2,c
 13884  000622  D016               	goto	l1074
 13885                           
 13886                           ; BSR set to: 0
 13887  000624  EE20 F002          	lfsr	2,2
 13888  000628  518C               	movf	__doprnt@pb& (0+255),w,b
 13889  00062A  26D9               	addwf	fsr2l,f,c
 13890  00062C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13891  00062E  22DA               	addwfc	fsr2h,f,c
 13892  000630  D801               	call	u4878
 13893  000632  D024               	goto	l1075
 13894  000634                     u4878:
 13895  000634  FFFF               	dw	65535	; assembler added errata NOP
 13896  000636  0005               	push	
 13897  000638  6EFA               	movwf	pclath,c
 13898  00063A  50DE               	movf	postinc2,w,c
 13899  00063C  6EFD               	movwf	tosl,c
 13900  00063E  50DE               	movf	postinc2,w,c
 13901  000640  6EFE               	movwf	tosh,c
 13902  000642  50F8               	movf	tblptru,w,c
 13903  000644  6EFF               	movwf	tosu,c
 13904  000646  50FA               	movf	pclath,w,c
 13905  000648  0E2D               	movlw	45
 13906  00064A  0012               	return		;indir
 13907  00064C  FFFF               	dw	65535	; errata NOP
 13908  00064E  D016               	goto	l1075
 13909  000650                     l1074:
 13910  000650  FFFF               	dw	65535	; assembler added errata NOP
 13911  000652  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13912  000656  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13913  00065A  CFDE F092          	movff	postinc2,??__doprnt
 13914  00065E  CFDD F093          	movff	postdec2,??__doprnt+1
 13915  000662  C092  FFD9         	movff	??__doprnt,fsr2l
 13916  000666  C093  FFDA         	movff	??__doprnt+1,fsr2h
 13917  00066A  0E2D               	movlw	45
 13918  00066C  6EDF               	movwf	indf2,c
 13919  00066E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13920  000672  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13921  000676  2ADE               	incf	postinc2,f,c
 13922  000678  0E00               	movlw	0
 13923  00067A  22DD               	addwfc	postdec2,f,c
 13924  00067C                     l1075:
 13925  00067C  FFFF               	dw	65535	; assembler added errata NOP
 13926                           
 13927                           ;doprnt.c: 1415: if(width)
 13928  00067E  0100               	movlb	0	; () banked
 13929  000680  FFFF               	dw	65535	; assembler added errata NOP
 13930  000682  519E               	movf	__doprnt@width& (0+255),w,b
 13931  000684  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 13932  000686  B4D8               	btfsc	status,2,c
 13933  000688  D0BE               	goto	l1089
 13934                           
 13935                           ; BSR set to: 0
 13936                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 13937                           
 13938                           ; BSR set to: 0
 13939                           
 13940                           ;doprnt.c: 1416: do
 13941  00068A  EE20 F002          	lfsr	2,2
 13942  00068E  518C               	movf	__doprnt@pb& (0+255),w,b
 13943  000690  26D9               	addwf	fsr2l,f,c
 13944  000692  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13945  000694  22DA               	addwfc	fsr2h,f,c
 13946  000696  50DE               	movf	postinc2,w,c
 13947  000698  10DE               	iorwf	postinc2,w,c
 13948  00069A  B4D8               	btfsc	status,2,c
 13949  00069C  D016               	goto	l1078
 13950                           
 13951                           ; BSR set to: 0
 13952  00069E  EE20 F002          	lfsr	2,2
 13953  0006A2  518C               	movf	__doprnt@pb& (0+255),w,b
 13954  0006A4  26D9               	addwf	fsr2l,f,c
 13955  0006A6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13956  0006A8  22DA               	addwfc	fsr2h,f,c
 13957  0006AA  D801               	call	u4908
 13958  0006AC  D024               	goto	l1079
 13959  0006AE                     u4908:
 13960  0006AE  FFFF               	dw	65535	; assembler added errata NOP
 13961  0006B0  0005               	push	
 13962  0006B2  6EFA               	movwf	pclath,c
 13963  0006B4  50DE               	movf	postinc2,w,c
 13964  0006B6  6EFD               	movwf	tosl,c
 13965  0006B8  50DE               	movf	postinc2,w,c
 13966  0006BA  6EFE               	movwf	tosh,c
 13967  0006BC  50F8               	movf	tblptru,w,c
 13968  0006BE  6EFF               	movwf	tosu,c
 13969  0006C0  50FA               	movf	pclath,w,c
 13970  0006C2  0E30               	movlw	48
 13971  0006C4  0012               	return		;indir
 13972  0006C6  FFFF               	dw	65535	; errata NOP
 13973  0006C8  D016               	goto	l1079
 13974  0006CA                     l1078:
 13975  0006CA  FFFF               	dw	65535	; assembler added errata NOP
 13976  0006CC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13977  0006D0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13978  0006D4  CFDE F092          	movff	postinc2,??__doprnt
 13979  0006D8  CFDD F093          	movff	postdec2,??__doprnt+1
 13980  0006DC  C092  FFD9         	movff	??__doprnt,fsr2l
 13981  0006E0  C093  FFDA         	movff	??__doprnt+1,fsr2h
 13982  0006E4  0E30               	movlw	48
 13983  0006E6  6EDF               	movwf	indf2,c
 13984  0006E8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13985  0006EC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13986  0006F0  2ADE               	incf	postinc2,f,c
 13987  0006F2  0E00               	movlw	0
 13988  0006F4  22DD               	addwfc	postdec2,f,c
 13989  0006F6                     l1079:
 13990  0006F6  FFFF               	dw	65535	; assembler added errata NOP
 13991                           
 13992                           ;doprnt.c: 1418: while(--width);
 13993  0006F8  0100               	movlb	0	; () banked
 13994  0006FA  079E               	decf	__doprnt@width& (0+255),f,b
 13995  0006FC  A0D8               	btfss	status,0,c
 13996  0006FE  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 13997  000700  D7BF               	goto	L39
 13998  000702                     l1072:
 13999  000702  FFFF               	dw	65535	; assembler added errata NOP
 14000                           
 14001                           ; BSR set to: 0
 14002                           ;doprnt.c: 1422: {
 14003                           ;doprnt.c: 1424: if(width
 14004                           ;doprnt.c: 1428: )
 14005                           
 14006                           ; BSR set to: 0
 14007  000704  519E               	movf	__doprnt@width& (0+255),w,b
 14008  000706  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 14009  000708  B4D8               	btfsc	status,2,c
 14010  00070A  D040               	goto	u4950
 14011  00070C                     u4920:
 14012  00070C  FFFF               	dw	65535	; assembler added errata NOP
 14013                           
 14014                           ; BSR set to: 0
 14015                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 14016                           
 14017                           ; BSR set to: 0
 14018                           
 14019                           ;doprnt.c: 1429: do
 14020  00070E  EE20 F002          	lfsr	2,2
 14021  000712  518C               	movf	__doprnt@pb& (0+255),w,b
 14022  000714  26D9               	addwf	fsr2l,f,c
 14023  000716  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 14024  000718  22DA               	addwfc	fsr2h,f,c
 14025  00071A  50DE               	movf	postinc2,w,c
 14026  00071C  10DE               	iorwf	postinc2,w,c
 14027  00071E  B4D8               	btfsc	status,2,c
 14028  000720  D016               	goto	l1084
 14029                           
 14030                           ; BSR set to: 0
 14031  000722  EE20 F002          	lfsr	2,2
 14032  000726  518C               	movf	__doprnt@pb& (0+255),w,b
 14033  000728  26D9               	addwf	fsr2l,f,c
 14034  00072A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 14035  00072C  22DA               	addwfc	fsr2h,f,c
 14036  00072E  D801               	call	u4948
 14037  000730  D024               	goto	l1085
 14038  000732                     u4948:
 14039  000732  FFFF               	dw	65535	; assembler added errata NOP
 14040  000734  0005               	push	
 14041  000736  6EFA               	movwf	pclath,c
 14042  000738  50DE               	movf	postinc2,w,c
 14043  00073A  6EFD               	movwf	tosl,c
 14044  00073C  50DE               	movf	postinc2,w,c
 14045  00073E  6EFE               	movwf	tosh,c
 14046  000740  50F8               	movf	tblptru,w,c
 14047  000742  6EFF               	movwf	tosu,c
 14048  000744  50FA               	movf	pclath,w,c
 14049  000746  0E20               	movlw	32
 14050  000748  0012               	return		;indir
 14051  00074A  FFFF               	dw	65535	; errata NOP
 14052  00074C  D016               	goto	l1085
 14053  00074E                     l1084:
 14054  00074E  FFFF               	dw	65535	; assembler added errata NOP
 14055  000750  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 14056  000754  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 14057  000758  CFDE F092          	movff	postinc2,??__doprnt
 14058  00075C  CFDD F093          	movff	postdec2,??__doprnt+1
 14059  000760  C092  FFD9         	movff	??__doprnt,fsr2l
 14060  000764  C093  FFDA         	movff	??__doprnt+1,fsr2h
 14061  000768  0E20               	movlw	32
 14062  00076A  6EDF               	movwf	indf2,c
 14063  00076C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 14064  000770  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 14065  000774  2ADE               	incf	postinc2,f,c
 14066  000776  0E00               	movlw	0
 14067  000778  22DD               	addwfc	postdec2,f,c
 14068  00077A                     l1085:
 14069  00077A  FFFF               	dw	65535	; assembler added errata NOP
 14070                           
 14071                           ;doprnt.c: 1431: while(--width);
 14072  00077C  0100               	movlb	0	; () banked
 14073  00077E  079E               	decf	__doprnt@width& (0+255),f,b
 14074  000780  A0D8               	btfss	status,0,c
 14075  000782  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 14076  000784  519E               	movf	__doprnt@width& (0+255),w,b
 14077  000786  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 14078  000788  A4D8               	btfss	status,2,c
 14079  00078A  D7C0               	goto	u4920
 14080  00078C                     u4950:
 14081  00078C  FFFF               	dw	65535	; assembler added errata NOP
 14082                           
 14083                           ; BSR set to: 0
 14084                           ;doprnt.c: 1438: if(flag & 0x03)
 14085                           
 14086                           ; BSR set to: 0
 14087                           
 14088                           ; BSR set to: 0
 14089  00078E  C09B  F092         	movff	__doprnt@flag,??__doprnt
 14090  000792  0E03               	movlw	3
 14091  000794  1792               	andwf	??__doprnt& (0+255),f,b
 14092  000796  B4D8               	btfsc	status,2,c
 14093  000798  D036               	goto	l1089
 14094                           
 14095                           ; BSR set to: 0
 14096                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 14097  00079A  EE20 F002          	lfsr	2,2
 14098  00079E  518C               	movf	__doprnt@pb& (0+255),w,b
 14099  0007A0  26D9               	addwf	fsr2l,f,c
 14100  0007A2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 14101  0007A4  22DA               	addwfc	fsr2h,f,c
 14102  0007A6  50DE               	movf	postinc2,w,c
 14103  0007A8  10DE               	iorwf	postinc2,w,c
 14104  0007AA  B4D8               	btfsc	status,2,c
 14105  0007AC  D016               	goto	l1088
 14106                           
 14107                           ; BSR set to: 0
 14108  0007AE  EE20 F002          	lfsr	2,2
 14109  0007B2  518C               	movf	__doprnt@pb& (0+255),w,b
 14110  0007B4  26D9               	addwf	fsr2l,f,c
 14111  0007B6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 14112  0007B8  22DA               	addwfc	fsr2h,f,c
 14113  0007BA  D801               	call	u4988
 14114  0007BC  D024               	goto	l1089
 14115  0007BE                     u4988:
 14116  0007BE  FFFF               	dw	65535	; assembler added errata NOP
 14117  0007C0  0005               	push	
 14118  0007C2  6EFA               	movwf	pclath,c
 14119  0007C4  50DE               	movf	postinc2,w,c
 14120  0007C6  6EFD               	movwf	tosl,c
 14121  0007C8  50DE               	movf	postinc2,w,c
 14122  0007CA  6EFE               	movwf	tosh,c
 14123  0007CC  50F8               	movf	tblptru,w,c
 14124  0007CE  6EFF               	movwf	tosu,c
 14125  0007D0  50FA               	movf	pclath,w,c
 14126  0007D2  0E2D               	movlw	45
 14127  0007D4  0012               	return		;indir
 14128  0007D6  FFFF               	dw	65535	; errata NOP
 14129  0007D8  D016               	goto	l1089
 14130  0007DA                     l1088:
 14131  0007DA  FFFF               	dw	65535	; assembler added errata NOP
 14132  0007DC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 14133  0007E0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 14134  0007E4  CFDE F092          	movff	postinc2,??__doprnt
 14135  0007E8  CFDD F093          	movff	postdec2,??__doprnt+1
 14136  0007EC  C092  FFD9         	movff	??__doprnt,fsr2l
 14137  0007F0  C093  FFDA         	movff	??__doprnt+1,fsr2h
 14138  0007F4  0E2D               	movlw	45
 14139  0007F6  6EDF               	movwf	indf2,c
 14140  0007F8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 14141  0007FC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 14142  000800  2ADE               	incf	postinc2,f,c
 14143  000802  0E00               	movlw	0
 14144  000804  22DD               	addwfc	postdec2,f,c
 14145  000806                     l1089:
 14146  000806  FFFF               	dw	65535	; assembler added errata NOP
 14147                           
 14148                           ;doprnt.c: 1469: }
 14149                           ;doprnt.c: 1472: prec = c;
 14150  000808  C0A0  F096         	movff	__doprnt@c,__doprnt@prec
 14151                           
 14152                           ;doprnt.c: 1474: while(prec--) {
 14153  00080C  D05D               	goto	l1093
 14154  00080E  FFFF               	dw	65535	; assembler added errata NOP
 14155                           
 14156                           ;doprnt.c: 1478: {
 14157                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14158  000810  0100               	movlb	0	; () banked
 14159  000812  5196               	movf	__doprnt@prec& (0+255),w,b
 14160  000814  0D02               	mullw	2
 14161  000816  0E37               	movlw	low _dpowers
 14162  000818  24F3               	addwf	prodl,w,c
 14163  00081A  6EF6               	movwf	tblptrl,c
 14164  00081C  0E7C               	movlw	high _dpowers
 14165  00081E  20F4               	addwfc	prodh,w,c
 14166  000820  6EF7               	movwf	tblptrh,c
 14167  000822                     	if	0	;There are less than 3 active tblptr bytes
 14168  000822                     	endif
 14169  000822  0009               	tblrd		*+
 14170  000824  FFFF               	dw	65535	; errata NOP
 14171  000826  CFF5 F082          	movff	tablat,___lwdiv@divisor
 14172  00082A  000A               	tblrd		*-
 14173  00082C  FFFF               	dw	65535	; errata NOP
 14174  00082E  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 14175  000832  C097  F080         	movff	__doprnt@val,___lwdiv@dividend
 14176  000836  C098  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
 14177  00083A  ECDA  F01E         	call	___lwdiv
 14178  00083E  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 14179  000842  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 14180  000846  0E00               	movlw	0
 14181  000848  0100               	movlb	0	; () banked
 14182  00084A  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 14183  00084C  0E0A               	movlw	10
 14184  00084E  6F89               	movwf	___lwmod@divisor& (0+255),b
 14185  000850  EC91  F01F         	call	___lwmod	;wreg free
 14186  000854  0100               	movlb	0	; () banked
 14187  000856  5187               	movf	?___lwmod& (0+255),w,b
 14188  000858  0F30               	addlw	48
 14189  00085A  6FA0               	movwf	__doprnt@c& (0+255),b
 14190                           
 14191                           ; BSR set to: 0
 14192                           ;doprnt.c: 1523: }
 14193                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 14194  00085C  EE20 F002          	lfsr	2,2
 14195  000860  518C               	movf	__doprnt@pb& (0+255),w,b
 14196  000862  26D9               	addwf	fsr2l,f,c
 14197  000864  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 14198  000866  22DA               	addwfc	fsr2h,f,c
 14199  000868  50DE               	movf	postinc2,w,c
 14200  00086A  10DE               	iorwf	postinc2,w,c
 14201  00086C  B4D8               	btfsc	status,2,c
 14202  00086E  D016               	goto	l1092
 14203                           
 14204                           ; BSR set to: 0
 14205  000870  EE20 F002          	lfsr	2,2
 14206  000874  518C               	movf	__doprnt@pb& (0+255),w,b
 14207  000876  26D9               	addwf	fsr2l,f,c
 14208  000878  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 14209  00087A  22DA               	addwfc	fsr2h,f,c
 14210  00087C  D801               	call	u5008
 14211  00087E  D024               	goto	l1093
 14212  000880                     u5008:
 14213  000880  FFFF               	dw	65535	; assembler added errata NOP
 14214  000882  0005               	push	
 14215  000884  6EFA               	movwf	pclath,c
 14216  000886  50DE               	movf	postinc2,w,c
 14217  000888  6EFD               	movwf	tosl,c
 14218  00088A  50DE               	movf	postinc2,w,c
 14219  00088C  6EFE               	movwf	tosh,c
 14220  00088E  50F8               	movf	tblptru,w,c
 14221  000890  6EFF               	movwf	tosu,c
 14222  000892  50FA               	movf	pclath,w,c
 14223  000894  51A0               	movf	__doprnt@c& (0+255),w,b
 14224  000896  0012               	return		;indir
 14225  000898  FFFF               	dw	65535	; errata NOP
 14226  00089A  D016               	goto	l1093
 14227  00089C                     l1092:
 14228  00089C  FFFF               	dw	65535	; assembler added errata NOP
 14229  00089E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 14230  0008A2  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 14231  0008A6  CFDE F092          	movff	postinc2,??__doprnt
 14232  0008AA  CFDD F093          	movff	postdec2,??__doprnt+1
 14233  0008AE  C092  FFD9         	movff	??__doprnt,fsr2l
 14234  0008B2  C093  FFDA         	movff	??__doprnt+1,fsr2h
 14235  0008B6  C0A0  FFDF         	movff	__doprnt@c,indf2
 14236  0008BA  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 14237  0008BE  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 14238  0008C2  2ADE               	incf	postinc2,f,c
 14239  0008C4  0E00               	movlw	0
 14240  0008C6  22DD               	addwfc	postdec2,f,c
 14241  0008C8                     l1093:
 14242  0008C8  FFFF               	dw	65535	; assembler added errata NOP
 14243  0008CA  0100               	movlb	0	; () banked
 14244  0008CC  0796               	decf	__doprnt@prec& (0+255),f,b
 14245  0008CE  2996               	incf	__doprnt@prec& (0+255),w,b
 14246  0008D0  A4D8               	btfss	status,2,c
 14247  0008D2  D79D               	goto	l1091
 14248  0008D4                     u5010:
 14249  0008D4  FFFF               	dw	65535	; assembler added errata NOP
 14250                           
 14251                           ; BSR set to: 0
 14252                           
 14253                           ; BSR set to: 0
 14254  0008D6  0100               	movlb	0	; () banked
 14255  0008D8  518E               	movf	__doprnt@f& (0+255),w,b
 14256  0008DA  6F92               	movwf	??__doprnt& (0+255),b
 14257  0008DC  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 14258  0008DE  6F93               	movwf	(??__doprnt+1)& (0+255),b
 14259  0008E0  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 14260  0008E2  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 14261  0008E4  C092  FFF6         	movff	??__doprnt,tblptrl
 14262  0008E8  C093  FFF7         	movff	??__doprnt+1,tblptrh
 14263  0008EC  6AF8               	clrf	tblptru,c
 14264  0008EE  0E05               	movlw	(high __ramtop+-1)
 14265  0008F0  64F7               	cpfsgt	tblptrh,c
 14266  0008F2  D004               	bra	u5027
 14267  0008F4  0008               	tblrd		*
 14268  0008F6  FFFF               	dw	65535	; errata NOP
 14269  0008F8  50F5               	movf	tablat,w,c
 14270  0008FA  D005               	bra	u5020
 14271  0008FC                     u5027:
 14272  0008FC  CFF6 FFE9          	movff	tblptrl,fsr0l
 14273  000900  CFF7 FFEA          	movff	tblptrh,fsr0h
 14274  000904  50EF               	movf	indf0,w,c
 14275  000906                     u5020:
 14276  000906  0100               	movlb	0	; () banked
 14277  000908  6FA0               	movwf	__doprnt@c& (0+255),b
 14278  00090A  51A0               	movf	__doprnt@c& (0+255),w,b
 14279  00090C  A4D8               	btfss	status,2,c
 14280  00090E  D40B               	goto	l1026
 14281  000910                     u5030:
 14282  000910  FFFF               	dw	65535	; assembler added errata NOP
 14283                           
 14284                           ;doprnt.c: 1540: return 0;
 14285                           
 14286                           ; BSR set to: 0
 14287                           
 14288                           ;doprnt.c: 1525: }
 14289                           ;doprnt.c: 1533: }
 14290                           ;doprnt.c: 1535: alldone:
 14291                           
 14292                           ; BSR set to: 0
 14293  000912  0E00               	movlw	0
 14294  000914  0100               	movlb	0	; () banked
 14295  000916  6F8D               	movwf	(?__doprnt+1)& (0+255),b
 14296  000918  0E00               	movlw	0
 14297  00091A  6F8C               	movwf	?__doprnt& (0+255),b
 14298                           
 14299                           ; BSR set to: 0
 14300                           
 14301                           ; BSR set to: 0
 14302  00091C  0012               	return		;funcret
 14303  00091E  FFFF               	dw	65535	; errata NOP
 14304  000920                     __end_of__doprnt:
 14305                           	opt stack 0
 14306                           tosu	equ	0xFFF
 14307                           tosh	equ	0xFFE
 14308                           tosl	equ	0xFFD
 14309                           pclath	equ	0xFFA
 14310                           tblptru	equ	0xFF8
 14311                           tblptrh	equ	0xFF7
 14312                           tblptrl	equ	0xFF6
 14313                           tablat	equ	0xFF5
 14314                           prodh	equ	0xFF4
 14315                           prodl	equ	0xFF3
 14316                           intcon	equ	0xFF2
 14317                           indf0	equ	0xFEF
 14318                           postinc0	equ	0xFEE
 14319                           fsr0h	equ	0xFEA
 14320                           fsr0l	equ	0xFE9
 14321                           wreg	equ	0xFE8
 14322                           postdec1	equ	0xFE5
 14323                           fsr1l	equ	0xFE1
 14324                           indf2	equ	0xFDF
 14325                           postinc2	equ	0xFDE
 14326                           postdec2	equ	0xFDD
 14327                           fsr2h	equ	0xFDA
 14328                           fsr2l	equ	0xFD9
 14329                           status	equ	0xFD8
 14330                           
 14331 ;; *************** function _putch *****************
 14332 ;; Defined at:
 14333 ;;		line 16 in file "serial.h"
 14334 ;; Parameters:    Size  Location     Type
 14335 ;;  c               1    wreg     unsigned char 
 14336 ;; Auto vars:     Size  Location     Type
 14337 ;;  c               1    0[BANK0 ] unsigned char 
 14338 ;; Return value:  Size  Location     Type
 14339 ;;                  1    wreg      void 
 14340 ;; Registers used:
 14341 ;;		wreg
 14342 ;; Tracked objects:
 14343 ;;		On entry : 0/0
 14344 ;;		On exit  : 0/0
 14345 ;;		Unchanged: 0/0
 14346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14347 ;;      Params:         0       0       0       0       0       0       0
 14348 ;;      Locals:         0       1       0       0       0       0       0
 14349 ;;      Temps:          0       0       0       0       0       0       0
 14350 ;;      Totals:         0       1       0       0       0       0       0
 14351 ;;Total ram usage:        1 bytes
 14352 ;; Hardware stack levels used:    1
 14353 ;; Hardware stack levels required when called:    6
 14354 ;; This function calls:
 14355 ;;		Nothing
 14356 ;; This function is called by:
 14357 ;;		_printf
 14358 ;;		__doprnt
 14359 ;; This function uses a non-reentrant model
 14360 ;;
 14361                           
 14362                           	psect	text47
 14363  007576                     __ptext47:
 14364                           	opt stack 0
 14365  007576                     _putch:
 14366                           	opt stack 0
 14367  007576  FFFF               	dw	65535	; assembler added errata NOP
 14368                           
 14369                           ; BSR set to: 0
 14370                           ;incstack = 0
 14371                           ;putch@c stored from wreg
 14372  007578  0100               	movlb	0	; () banked
 14373  00757A  6F80               	movwf	putch@c& (0+255),b
 14374  00757C  FFFF               	dw	65535	; assembler added errata NOP
 14375                           
 14376                           ;serial.h: 17: while (!TXSTAbits.TRMT);
 14377  00757E  A2AC               	btfss	4012,1,c	;volatile
 14378  007580  D7FD               	goto	l4706
 14379                           
 14380                           ;serial.h: 18: TXREG = c;
 14381  007582  C080  FFAD         	movff	putch@c,4013	;volatile
 14382  007586  0012               	return		;funcret
 14383  007588  FFFF               	dw	65535	; errata NOP
 14384  00758A                     __end_of_putch:
 14385                           	opt stack 0
 14386                           tosu	equ	0xFFF
 14387                           tosh	equ	0xFFE
 14388                           tosl	equ	0xFFD
 14389                           pclath	equ	0xFFA
 14390                           tblptru	equ	0xFF8
 14391                           tblptrh	equ	0xFF7
 14392                           tblptrl	equ	0xFF6
 14393                           tablat	equ	0xFF5
 14394                           prodh	equ	0xFF4
 14395                           prodl	equ	0xFF3
 14396                           intcon	equ	0xFF2
 14397                           indf0	equ	0xFEF
 14398                           postinc0	equ	0xFEE
 14399                           fsr0h	equ	0xFEA
 14400                           fsr0l	equ	0xFE9
 14401                           wreg	equ	0xFE8
 14402                           postdec1	equ	0xFE5
 14403                           fsr1l	equ	0xFE1
 14404                           indf2	equ	0xFDF
 14405                           postinc2	equ	0xFDE
 14406                           postdec2	equ	0xFDD
 14407                           fsr2h	equ	0xFDA
 14408                           fsr2l	equ	0xFD9
 14409                           status	equ	0xFD8
 14410                           
 14411 ;; *************** function _isdigit *****************
 14412 ;; Defined at:
 14413 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 14414 ;; Parameters:    Size  Location     Type
 14415 ;;  c               1    wreg     unsigned char 
 14416 ;; Auto vars:     Size  Location     Type
 14417 ;;  c               1    2[BANK0 ] unsigned char 
 14418 ;; Return value:  Size  Location     Type
 14419 ;;		None               void
 14420 ;; Registers used:
 14421 ;;		wreg, status,2, status,0
 14422 ;; Tracked objects:
 14423 ;;		On entry : 0/0
 14424 ;;		On exit  : 0/0
 14425 ;;		Unchanged: 0/0
 14426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14427 ;;      Params:         0       0       0       0       0       0       0
 14428 ;;      Locals:         0       2       0       0       0       0       0
 14429 ;;      Temps:          0       1       0       0       0       0       0
 14430 ;;      Totals:         0       3       0       0       0       0       0
 14431 ;;Total ram usage:        3 bytes
 14432 ;; Hardware stack levels used:    1
 14433 ;; Hardware stack levels required when called:    6
 14434 ;; This function calls:
 14435 ;;		Nothing
 14436 ;; This function is called by:
 14437 ;;		__doprnt
 14438 ;;		_atoi
 14439 ;; This function uses a non-reentrant model
 14440 ;;
 14441                           
 14442                           	psect	text48
 14443  00765E                     __ptext48:
 14444                           	opt stack 0
 14445  00765E                     _isdigit:
 14446                           	opt stack 0
 14447  00765E  FFFF               	dw	65535	; assembler added errata NOP
 14448                           
 14449                           ;incstack = 0
 14450                           ;isdigit@c stored from wreg
 14451  007660  0100               	movlb	0	; () banked
 14452  007662  6F82               	movwf	isdigit@c& (0+255),b
 14453  007664  0E00               	movlw	0
 14454  007666  0100               	movlb	0	; () banked
 14455  007668  6F81               	movwf	_isdigit$1853& (0+255),b
 14456                           
 14457                           ; BSR set to: 0
 14458  00766A  0E3A               	movlw	58
 14459  00766C  6182               	cpfslt	isdigit@c& (0+255),b
 14460  00766E  D005               	goto	l1441
 14461                           
 14462                           ; BSR set to: 0
 14463  007670  0E2F               	movlw	47
 14464  007672  6582               	cpfsgt	isdigit@c& (0+255),b
 14465  007674  D002               	goto	l1441
 14466                           
 14467                           ; BSR set to: 0
 14468  007676  0E01               	movlw	1
 14469  007678  6F81               	movwf	_isdigit$1853& (0+255),b
 14470  00767A                     l1441:
 14471  00767A  FFFF               	dw	65535	; assembler added errata NOP
 14472                           
 14473                           ; BSR set to: 0
 14474                           
 14475                           ; BSR set to: 0
 14476  00767C  C081  F080         	movff	_isdigit$1853,??_isdigit
 14477  007680  3180               	rrcf	??_isdigit& (0+255),w,b
 14478                           
 14479                           ; BSR set to: 0
 14480                           
 14481                           ; BSR set to: 0
 14482  007682  0012               	return		;funcret
 14483  007684  FFFF               	dw	65535	; errata NOP
 14484  007686                     __end_of_isdigit:
 14485                           	opt stack 0
 14486                           tosu	equ	0xFFF
 14487                           tosh	equ	0xFFE
 14488                           tosl	equ	0xFFD
 14489                           pclath	equ	0xFFA
 14490                           tblptru	equ	0xFF8
 14491                           tblptrh	equ	0xFF7
 14492                           tblptrl	equ	0xFF6
 14493                           tablat	equ	0xFF5
 14494                           prodh	equ	0xFF4
 14495                           prodl	equ	0xFF3
 14496                           intcon	equ	0xFF2
 14497                           indf0	equ	0xFEF
 14498                           postinc0	equ	0xFEE
 14499                           fsr0h	equ	0xFEA
 14500                           fsr0l	equ	0xFE9
 14501                           wreg	equ	0xFE8
 14502                           postdec1	equ	0xFE5
 14503                           fsr1l	equ	0xFE1
 14504                           indf2	equ	0xFDF
 14505                           postinc2	equ	0xFDE
 14506                           postdec2	equ	0xFDD
 14507                           fsr2h	equ	0xFDA
 14508                           fsr2l	equ	0xFD9
 14509                           status	equ	0xFD8
 14510                           
 14511 ;; *************** function ___wmul *****************
 14512 ;; Defined at:
 14513 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14514 ;; Parameters:    Size  Location     Type
 14515 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14516 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14517 ;; Auto vars:     Size  Location     Type
 14518 ;;  product         2    4[BANK0 ] unsigned int 
 14519 ;; Return value:  Size  Location     Type
 14520 ;;                  2    0[BANK0 ] unsigned int 
 14521 ;; Registers used:
 14522 ;;		wreg, status,2, status,0, prodl, prodh
 14523 ;; Tracked objects:
 14524 ;;		On entry : 0/0
 14525 ;;		On exit  : 0/0
 14526 ;;		Unchanged: 0/0
 14527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14528 ;;      Params:         0       4       0       0       0       0       0
 14529 ;;      Locals:         0       2       0       0       0       0       0
 14530 ;;      Temps:          0       0       0       0       0       0       0
 14531 ;;      Totals:         0       6       0       0       0       0       0
 14532 ;;Total ram usage:        6 bytes
 14533 ;; Hardware stack levels used:    1
 14534 ;; Hardware stack levels required when called:    6
 14535 ;; This function calls:
 14536 ;;		Nothing
 14537 ;; This function is called by:
 14538 ;;		__doprnt
 14539 ;;		_atoi
 14540 ;; This function uses a non-reentrant model
 14541 ;;
 14542                           
 14543                           	psect	text49
 14544  0076B2                     __ptext49:
 14545                           	opt stack 0
 14546  0076B2                     ___wmul:
 14547                           	opt stack 0
 14548  0076B2  FFFF               	dw	65535	; assembler added errata NOP
 14549                           
 14550                           ; BSR set to: 0
 14551                           ;incstack = 0
 14552  0076B4  0100               	movlb	0	; () banked
 14553  0076B6  5180               	movf	___wmul@multiplier& (0+255),w,b
 14554  0076B8  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14555  0076BA  CFF3 F084          	movff	prodl,___wmul@product
 14556  0076BE  CFF4 F085          	movff	prodh,___wmul@product+1
 14557  0076C2  5180               	movf	___wmul@multiplier& (0+255),w,b
 14558  0076C4  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14559  0076C6  50F3               	movf	prodl,w,c
 14560  0076C8  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14561  0076CA  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14562  0076CC  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14563  0076CE  50F3               	movf	prodl,w,c
 14564  0076D0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14565                           
 14566                           ; BSR set to: 0
 14567  0076D2  C084  F080         	movff	___wmul@product,?___wmul
 14568  0076D6  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14569                           
 14570                           ; BSR set to: 0
 14571                           
 14572                           ; BSR set to: 0
 14573  0076DA  0012               	return		;funcret
 14574  0076DC  FFFF               	dw	65535	; errata NOP
 14575  0076DE                     __end_of___wmul:
 14576                           	opt stack 0
 14577                           tosu	equ	0xFFF
 14578                           tosh	equ	0xFFE
 14579                           tosl	equ	0xFFD
 14580                           pclath	equ	0xFFA
 14581                           tblptru	equ	0xFF8
 14582                           tblptrh	equ	0xFF7
 14583                           tblptrl	equ	0xFF6
 14584                           tablat	equ	0xFF5
 14585                           prodh	equ	0xFF4
 14586                           prodl	equ	0xFF3
 14587                           intcon	equ	0xFF2
 14588                           indf0	equ	0xFEF
 14589                           postinc0	equ	0xFEE
 14590                           fsr0h	equ	0xFEA
 14591                           fsr0l	equ	0xFE9
 14592                           wreg	equ	0xFE8
 14593                           postdec1	equ	0xFE5
 14594                           fsr1l	equ	0xFE1
 14595                           indf2	equ	0xFDF
 14596                           postinc2	equ	0xFDE
 14597                           postdec2	equ	0xFDD
 14598                           fsr2h	equ	0xFDA
 14599                           fsr2l	equ	0xFD9
 14600                           status	equ	0xFD8
 14601                           
 14602 ;; *************** function ___lwmod *****************
 14603 ;; Defined at:
 14604 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 14605 ;; Parameters:    Size  Location     Type
 14606 ;;  dividend        2    7[BANK0 ] unsigned int 
 14607 ;;  divisor         2    9[BANK0 ] unsigned int 
 14608 ;; Auto vars:     Size  Location     Type
 14609 ;;  counter         1   11[BANK0 ] unsigned char 
 14610 ;; Return value:  Size  Location     Type
 14611 ;;                  2    7[BANK0 ] unsigned int 
 14612 ;; Registers used:
 14613 ;;		wreg, status,2, status,0
 14614 ;; Tracked objects:
 14615 ;;		On entry : 0/0
 14616 ;;		On exit  : 0/0
 14617 ;;		Unchanged: 0/0
 14618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14619 ;;      Params:         0       4       0       0       0       0       0
 14620 ;;      Locals:         0       1       0       0       0       0       0
 14621 ;;      Temps:          0       0       0       0       0       0       0
 14622 ;;      Totals:         0       5       0       0       0       0       0
 14623 ;;Total ram usage:        5 bytes
 14624 ;; Hardware stack levels used:    1
 14625 ;; Hardware stack levels required when called:    6
 14626 ;; This function calls:
 14627 ;;		Nothing
 14628 ;; This function is called by:
 14629 ;;		__doprnt
 14630 ;; This function uses a non-reentrant model
 14631 ;;
 14632                           
 14633                           	psect	text50
 14634  003F22                     __ptext50:
 14635                           	opt stack 0
 14636  003F22                     ___lwmod:
 14637                           	opt stack 0
 14638  003F22  FFFF               	dw	65535	; assembler added errata NOP
 14639                           
 14640                           ; BSR set to: 0
 14641                           ;incstack = 0
 14642  003F24  0100               	movlb	0	; () banked
 14643  003F26  5189               	movf	___lwmod@divisor& (0+255),w,b
 14644  003F28  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14645  003F2A  B4D8               	btfsc	status,2,c
 14646  003F2C  D01C               	goto	l1535
 14647                           
 14648                           ; BSR set to: 0
 14649  003F2E  0E01               	movlw	1
 14650  003F30  6F8B               	movwf	___lwmod@counter& (0+255),b
 14651  003F32  D005               	goto	l1530
 14652  003F34  FFFF               	dw	65535	; assembler added errata NOP
 14653                           
 14654                           ; BSR set to: 0
 14655                           
 14656                           ; BSR set to: 0
 14657  003F36  90D8               	bcf	status,0,c
 14658  003F38  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14659  003F3A  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14660  003F3C  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14661  003F3E                     l1530:
 14662  003F3E  FFFF               	dw	65535	; assembler added errata NOP
 14663                           
 14664                           ; BSR set to: 0
 14665                           
 14666                           ; BSR set to: 0
 14667  003F40  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14668  003F42  D7F8               	goto	l1531
 14669  003F44                     u4480:
 14670  003F44  FFFF               	dw	65535	; assembler added errata NOP
 14671                           
 14672                           ; BSR set to: 0
 14673                           
 14674                           ; BSR set to: 0
 14675                           
 14676                           ; BSR set to: 0
 14677  003F46  5189               	movf	___lwmod@divisor& (0+255),w,b
 14678  003F48  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14679  003F4A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14680  003F4C  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14681  003F4E  A0D8               	btfss	status,0,c
 14682  003F50  D004               	goto	l1534
 14683                           
 14684                           ; BSR set to: 0
 14685  003F52  5189               	movf	___lwmod@divisor& (0+255),w,b
 14686  003F54  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14687  003F56  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14688  003F58  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14689  003F5A                     l1534:
 14690  003F5A  FFFF               	dw	65535	; assembler added errata NOP
 14691                           
 14692                           ; BSR set to: 0
 14693                           
 14694                           ; BSR set to: 0
 14695  003F5C  90D8               	bcf	status,0,c
 14696  003F5E  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14697  003F60  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14698                           
 14699                           ; BSR set to: 0
 14700  003F62  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14701  003F64  D7EF               	goto	u4480
 14702  003F66                     l1535:
 14703  003F66  FFFF               	dw	65535	; assembler added errata NOP
 14704                           
 14705                           ; BSR set to: 0
 14706                           
 14707                           ; BSR set to: 0
 14708  003F68  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14709  003F6C  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14710                           
 14711                           ; BSR set to: 0
 14712  003F70  0012               	return		;funcret
 14713  003F72  FFFF               	dw	65535	; errata NOP
 14714  003F74                     __end_of___lwmod:
 14715                           	opt stack 0
 14716                           tosu	equ	0xFFF
 14717                           tosh	equ	0xFFE
 14718                           tosl	equ	0xFFD
 14719                           pclath	equ	0xFFA
 14720                           tblptru	equ	0xFF8
 14721                           tblptrh	equ	0xFF7
 14722                           tblptrl	equ	0xFF6
 14723                           tablat	equ	0xFF5
 14724                           prodh	equ	0xFF4
 14725                           prodl	equ	0xFF3
 14726                           intcon	equ	0xFF2
 14727                           indf0	equ	0xFEF
 14728                           postinc0	equ	0xFEE
 14729                           fsr0h	equ	0xFEA
 14730                           fsr0l	equ	0xFE9
 14731                           wreg	equ	0xFE8
 14732                           postdec1	equ	0xFE5
 14733                           fsr1l	equ	0xFE1
 14734                           indf2	equ	0xFDF
 14735                           postinc2	equ	0xFDE
 14736                           postdec2	equ	0xFDD
 14737                           fsr2h	equ	0xFDA
 14738                           fsr2l	equ	0xFD9
 14739                           status	equ	0xFD8
 14740                           
 14741 ;; *************** function ___lwdiv *****************
 14742 ;; Defined at:
 14743 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 14744 ;; Parameters:    Size  Location     Type
 14745 ;;  dividend        2    0[BANK0 ] unsigned int 
 14746 ;;  divisor         2    2[BANK0 ] unsigned int 
 14747 ;; Auto vars:     Size  Location     Type
 14748 ;;  quotient        2    4[BANK0 ] unsigned int 
 14749 ;;  counter         1    6[BANK0 ] unsigned char 
 14750 ;; Return value:  Size  Location     Type
 14751 ;;                  2    0[BANK0 ] unsigned int 
 14752 ;; Registers used:
 14753 ;;		wreg, status,2, status,0
 14754 ;; Tracked objects:
 14755 ;;		On entry : 0/0
 14756 ;;		On exit  : 0/0
 14757 ;;		Unchanged: 0/0
 14758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14759 ;;      Params:         0       4       0       0       0       0       0
 14760 ;;      Locals:         0       3       0       0       0       0       0
 14761 ;;      Temps:          0       0       0       0       0       0       0
 14762 ;;      Totals:         0       7       0       0       0       0       0
 14763 ;;Total ram usage:        7 bytes
 14764 ;; Hardware stack levels used:    1
 14765 ;; Hardware stack levels required when called:    6
 14766 ;; This function calls:
 14767 ;;		Nothing
 14768 ;; This function is called by:
 14769 ;;		__doprnt
 14770 ;; This function uses a non-reentrant model
 14771 ;;
 14772                           
 14773                           	psect	text51
 14774  003DB4                     __ptext51:
 14775                           	opt stack 0
 14776  003DB4                     ___lwdiv:
 14777                           	opt stack 0
 14778  003DB4  FFFF               	dw	65535	; assembler added errata NOP
 14779                           
 14780                           ; BSR set to: 0
 14781                           ;incstack = 0
 14782  003DB6  0E00               	movlw	0
 14783  003DB8  0100               	movlb	0	; () banked
 14784  003DBA  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14785  003DBC  0E00               	movlw	0
 14786  003DBE  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14787                           
 14788                           ; BSR set to: 0
 14789  003DC0  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14790  003DC2  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14791  003DC4  B4D8               	btfsc	status,2,c
 14792  003DC6  D020               	goto	l1525
 14793                           
 14794                           ; BSR set to: 0
 14795  003DC8  0E01               	movlw	1
 14796  003DCA  6F86               	movwf	___lwdiv@counter& (0+255),b
 14797  003DCC  D005               	goto	l1520
 14798  003DCE  FFFF               	dw	65535	; assembler added errata NOP
 14799                           
 14800                           ; BSR set to: 0
 14801                           
 14802                           ; BSR set to: 0
 14803  003DD0  90D8               	bcf	status,0,c
 14804  003DD2  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14805  003DD4  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14806  003DD6  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14807  003DD8                     l1520:
 14808  003DD8  FFFF               	dw	65535	; assembler added errata NOP
 14809                           
 14810                           ; BSR set to: 0
 14811                           
 14812                           ; BSR set to: 0
 14813  003DDA  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14814  003DDC  D7F8               	goto	l1521
 14815  003DDE                     u4450:
 14816  003DDE  FFFF               	dw	65535	; assembler added errata NOP
 14817                           
 14818                           ; BSR set to: 0
 14819                           
 14820                           ; BSR set to: 0
 14821                           
 14822                           ; BSR set to: 0
 14823  003DE0  90D8               	bcf	status,0,c
 14824  003DE2  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14825  003DE4  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14826                           
 14827                           ; BSR set to: 0
 14828  003DE6  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14829  003DE8  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14830  003DEA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14831  003DEC  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14832  003DEE  A0D8               	btfss	status,0,c
 14833  003DF0  D005               	goto	l1524
 14834                           
 14835                           ; BSR set to: 0
 14836  003DF2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14837  003DF4  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14838  003DF6  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14839  003DF8  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14840                           
 14841                           ; BSR set to: 0
 14842  003DFA  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14843  003DFC                     l1524:
 14844  003DFC  FFFF               	dw	65535	; assembler added errata NOP
 14845                           
 14846                           ; BSR set to: 0
 14847                           
 14848                           ; BSR set to: 0
 14849  003DFE  90D8               	bcf	status,0,c
 14850  003E00  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14851  003E02  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14852                           
 14853                           ; BSR set to: 0
 14854  003E04  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14855  003E06  D7EB               	goto	u4450
 14856  003E08                     l1525:
 14857  003E08  FFFF               	dw	65535	; assembler added errata NOP
 14858                           
 14859                           ; BSR set to: 0
 14860                           
 14861                           ; BSR set to: 0
 14862  003E0A  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14863  003E0E  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14864                           
 14865                           ; BSR set to: 0
 14866  003E12  0012               	return		;funcret
 14867  003E14  FFFF               	dw	65535	; errata NOP
 14868  003E16                     __end_of___lwdiv:
 14869                           	opt stack 0
 14870                           tosu	equ	0xFFF
 14871                           tosh	equ	0xFFE
 14872                           tosl	equ	0xFFD
 14873                           pclath	equ	0xFFA
 14874                           tblptru	equ	0xFF8
 14875                           tblptrh	equ	0xFF7
 14876                           tblptrl	equ	0xFF6
 14877                           tablat	equ	0xFF5
 14878                           prodh	equ	0xFF4
 14879                           prodl	equ	0xFF3
 14880                           intcon	equ	0xFF2
 14881                           indf0	equ	0xFEF
 14882                           postinc0	equ	0xFEE
 14883                           fsr0h	equ	0xFEA
 14884                           fsr0l	equ	0xFE9
 14885                           wreg	equ	0xFE8
 14886                           postdec1	equ	0xFE5
 14887                           fsr1l	equ	0xFE1
 14888                           indf2	equ	0xFDF
 14889                           postinc2	equ	0xFDE
 14890                           postdec2	equ	0xFDD
 14891                           fsr2h	equ	0xFDA
 14892                           fsr2l	equ	0xFD9
 14893                           status	equ	0xFD8
 14894                           
 14895 ;; *************** function ___awmod *****************
 14896 ;; Defined at:
 14897 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 14898 ;; Parameters:    Size  Location     Type
 14899 ;;  dividend        2    0[BANK0 ] int 
 14900 ;;  divisor         2    2[BANK0 ] int 
 14901 ;; Auto vars:     Size  Location     Type
 14902 ;;  sign            1    5[BANK0 ] unsigned char 
 14903 ;;  counter         1    4[BANK0 ] unsigned char 
 14904 ;; Return value:  Size  Location     Type
 14905 ;;                  2    0[BANK0 ] int 
 14906 ;; Registers used:
 14907 ;;		wreg, status,2, status,0
 14908 ;; Tracked objects:
 14909 ;;		On entry : 0/0
 14910 ;;		On exit  : 0/0
 14911 ;;		Unchanged: 0/0
 14912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14913 ;;      Params:         0       4       0       0       0       0       0
 14914 ;;      Locals:         0       2       0       0       0       0       0
 14915 ;;      Temps:          0       0       0       0       0       0       0
 14916 ;;      Totals:         0       6       0       0       0       0       0
 14917 ;;Total ram usage:        6 bytes
 14918 ;; Hardware stack levels used:    1
 14919 ;; Hardware stack levels required when called:    6
 14920 ;; This function calls:
 14921 ;;		Nothing
 14922 ;; This function is called by:
 14923 ;;		_DECtoBCD
 14924 ;;		_intToFloatStr
 14925 ;;		_DECtoHEX
 14926 ;; This function uses a non-reentrant model
 14927 ;;
 14928                           
 14929                           	psect	text52
 14930  003AE4                     __ptext52:
 14931                           	opt stack 0
 14932  003AE4                     ___awmod:
 14933                           	opt stack 0
 14934  003AE4  FFFF               	dw	65535	; assembler added errata NOP
 14935                           
 14936                           ; BSR set to: 0
 14937                           ;incstack = 0
 14938  003AE6  0E00               	movlw	0
 14939  003AE8  0100               	movlb	0	; () banked
 14940  003AEA  6F85               	movwf	___awmod@sign& (0+255),b
 14941                           
 14942                           ; BSR set to: 0
 14943  003AEC  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 14944  003AEE  D006               	goto	l1292
 14945                           
 14946                           ; BSR set to: 0
 14947  003AF0  6D80               	negf	___awmod@dividend& (0+255),b
 14948  003AF2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 14949  003AF4  B0D8               	btfsc	status,0,c
 14950  003AF6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 14951                           
 14952                           ; BSR set to: 0
 14953  003AF8  0E01               	movlw	1
 14954  003AFA  6F85               	movwf	___awmod@sign& (0+255),b
 14955  003AFC                     l1292:
 14956  003AFC  FFFF               	dw	65535	; assembler added errata NOP
 14957                           
 14958                           ; BSR set to: 0
 14959                           
 14960                           ; BSR set to: 0
 14961  003AFE  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 14962  003B00  D004               	goto	l1293
 14963                           
 14964                           ; BSR set to: 0
 14965  003B02  6D82               	negf	___awmod@divisor& (0+255),b
 14966  003B04  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 14967  003B06  B0D8               	btfsc	status,0,c
 14968  003B08  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 14969  003B0A                     l1293:
 14970  003B0A  FFFF               	dw	65535	; assembler added errata NOP
 14971                           
 14972                           ; BSR set to: 0
 14973                           
 14974                           ; BSR set to: 0
 14975  003B0C  5182               	movf	___awmod@divisor& (0+255),w,b
 14976  003B0E  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 14977  003B10  B4D8               	btfsc	status,2,c
 14978  003B12  D01C               	goto	l1300
 14979                           
 14980                           ; BSR set to: 0
 14981  003B14  0E01               	movlw	1
 14982  003B16  6F84               	movwf	___awmod@counter& (0+255),b
 14983  003B18  D005               	goto	l1295
 14984  003B1A  FFFF               	dw	65535	; assembler added errata NOP
 14985                           
 14986                           ; BSR set to: 0
 14987                           
 14988                           ; BSR set to: 0
 14989  003B1C  90D8               	bcf	status,0,c
 14990  003B1E  3782               	rlcf	___awmod@divisor& (0+255),f,b
 14991  003B20  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 14992  003B22  2B84               	incf	___awmod@counter& (0+255),f,b
 14993  003B24                     l1295:
 14994  003B24  FFFF               	dw	65535	; assembler added errata NOP
 14995                           
 14996                           ; BSR set to: 0
 14997                           
 14998                           ; BSR set to: 0
 14999  003B26  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 15000  003B28  D7F8               	goto	l1296
 15001  003B2A                     u5280:
 15002  003B2A  FFFF               	dw	65535	; assembler added errata NOP
 15003                           
 15004                           ; BSR set to: 0
 15005                           
 15006                           ; BSR set to: 0
 15007                           
 15008                           ; BSR set to: 0
 15009  003B2C  5182               	movf	___awmod@divisor& (0+255),w,b
 15010  003B2E  5D80               	subwf	___awmod@dividend& (0+255),w,b
 15011  003B30  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 15012  003B32  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 15013  003B34  A0D8               	btfss	status,0,c
 15014  003B36  D004               	goto	l1299
 15015                           
 15016                           ; BSR set to: 0
 15017  003B38  5182               	movf	___awmod@divisor& (0+255),w,b
 15018  003B3A  5F80               	subwf	___awmod@dividend& (0+255),f,b
 15019  003B3C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 15020  003B3E  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 15021  003B40                     l1299:
 15022  003B40  FFFF               	dw	65535	; assembler added errata NOP
 15023                           
 15024                           ; BSR set to: 0
 15025                           
 15026                           ; BSR set to: 0
 15027  003B42  90D8               	bcf	status,0,c
 15028  003B44  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 15029  003B46  3382               	rrcf	___awmod@divisor& (0+255),f,b
 15030                           
 15031                           ; BSR set to: 0
 15032  003B48  2F84               	decfsz	___awmod@counter& (0+255),f,b
 15033  003B4A  D7EF               	goto	u5280
 15034  003B4C                     l1300:
 15035  003B4C  FFFF               	dw	65535	; assembler added errata NOP
 15036                           
 15037                           ; BSR set to: 0
 15038                           
 15039                           ; BSR set to: 0
 15040                           
 15041                           ; BSR set to: 0
 15042  003B4E  5185               	movf	___awmod@sign& (0+255),w,b
 15043  003B50  B4D8               	btfsc	status,2,c
 15044  003B52  D004               	goto	l1301
 15045                           
 15046                           ; BSR set to: 0
 15047  003B54  6D80               	negf	___awmod@dividend& (0+255),b
 15048  003B56  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 15049  003B58  B0D8               	btfsc	status,0,c
 15050  003B5A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 15051  003B5C                     l1301:
 15052  003B5C  FFFF               	dw	65535	; assembler added errata NOP
 15053                           
 15054                           ; BSR set to: 0
 15055                           
 15056                           ; BSR set to: 0
 15057  003B5E  C080  F080         	movff	___awmod@dividend,?___awmod
 15058  003B62  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 15059                           
 15060                           ; BSR set to: 0
 15061                           
 15062                           ; BSR set to: 0
 15063  003B66  0012               	return		;funcret
 15064  003B68  FFFF               	dw	65535	; errata NOP
 15065  003B6A                     __end_of___awmod:
 15066                           	opt stack 0
 15067                           tosu	equ	0xFFF
 15068                           tosh	equ	0xFFE
 15069                           tosl	equ	0xFFD
 15070                           pclath	equ	0xFFA
 15071                           tblptru	equ	0xFF8
 15072                           tblptrh	equ	0xFF7
 15073                           tblptrl	equ	0xFF6
 15074                           tablat	equ	0xFF5
 15075                           prodh	equ	0xFF4
 15076                           prodl	equ	0xFF3
 15077                           intcon	equ	0xFF2
 15078                           indf0	equ	0xFEF
 15079                           postinc0	equ	0xFEE
 15080                           fsr0h	equ	0xFEA
 15081                           fsr0l	equ	0xFE9
 15082                           wreg	equ	0xFE8
 15083                           postdec1	equ	0xFE5
 15084                           fsr1l	equ	0xFE1
 15085                           indf2	equ	0xFDF
 15086                           postinc2	equ	0xFDE
 15087                           postdec2	equ	0xFDD
 15088                           fsr2h	equ	0xFDA
 15089                           fsr2l	equ	0xFD9
 15090                           status	equ	0xFD8
 15091                           
 15092 ;; *************** function ___awdiv *****************
 15093 ;; Defined at:
 15094 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 15095 ;; Parameters:    Size  Location     Type
 15096 ;;  dividend        2    0[BANK0 ] int 
 15097 ;;  divisor         2    2[BANK0 ] int 
 15098 ;; Auto vars:     Size  Location     Type
 15099 ;;  quotient        2    6[BANK0 ] int 
 15100 ;;  sign            1    5[BANK0 ] unsigned char 
 15101 ;;  counter         1    4[BANK0 ] unsigned char 
 15102 ;; Return value:  Size  Location     Type
 15103 ;;                  2    0[BANK0 ] int 
 15104 ;; Registers used:
 15105 ;;		wreg, status,2, status,0
 15106 ;; Tracked objects:
 15107 ;;		On entry : 0/0
 15108 ;;		On exit  : 0/0
 15109 ;;		Unchanged: 0/0
 15110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15111 ;;      Params:         0       4       0       0       0       0       0
 15112 ;;      Locals:         0       4       0       0       0       0       0
 15113 ;;      Temps:          0       0       0       0       0       0       0
 15114 ;;      Totals:         0       8       0       0       0       0       0
 15115 ;;Total ram usage:        8 bytes
 15116 ;; Hardware stack levels used:    1
 15117 ;; Hardware stack levels required when called:    6
 15118 ;; This function calls:
 15119 ;;		Nothing
 15120 ;; This function is called by:
 15121 ;;		_dataLoger
 15122 ;;		_DECtoBCD
 15123 ;;		_intToFloatStr
 15124 ;;		_DECtoHEX
 15125 ;; This function uses a non-reentrant model
 15126 ;;
 15127                           
 15128                           	psect	text53
 15129  00380C                     __ptext53:
 15130                           	opt stack 0
 15131  00380C                     ___awdiv:
 15132                           	opt stack 0
 15133  00380C  FFFF               	dw	65535	; assembler added errata NOP
 15134                           
 15135                           ; BSR set to: 0
 15136                           ;incstack = 0
 15137  00380E  0E00               	movlw	0
 15138  003810  0100               	movlb	0	; () banked
 15139  003812  6F85               	movwf	___awdiv@sign& (0+255),b
 15140                           
 15141                           ; BSR set to: 0
 15142  003814  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 15143  003816  D006               	goto	l1279
 15144                           
 15145                           ; BSR set to: 0
 15146  003818  6D82               	negf	___awdiv@divisor& (0+255),b
 15147  00381A  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
 15148  00381C  B0D8               	btfsc	status,0,c
 15149  00381E  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
 15150                           
 15151                           ; BSR set to: 0
 15152  003820  0E01               	movlw	1
 15153  003822  6F85               	movwf	___awdiv@sign& (0+255),b
 15154  003824                     l1279:
 15155  003824  FFFF               	dw	65535	; assembler added errata NOP
 15156                           
 15157                           ; BSR set to: 0
 15158                           
 15159                           ; BSR set to: 0
 15160  003826  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 15161  003828  D006               	goto	l1280
 15162                           
 15163                           ; BSR set to: 0
 15164  00382A  6D80               	negf	___awdiv@dividend& (0+255),b
 15165  00382C  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
 15166  00382E  B0D8               	btfsc	status,0,c
 15167  003830  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
 15168                           
 15169                           ; BSR set to: 0
 15170  003832  0E01               	movlw	1
 15171  003834  1B85               	xorwf	___awdiv@sign& (0+255),f,b
 15172  003836                     l1280:
 15173  003836  FFFF               	dw	65535	; assembler added errata NOP
 15174                           
 15175                           ; BSR set to: 0
 15176                           
 15177                           ; BSR set to: 0
 15178  003838  0E00               	movlw	0
 15179  00383A  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
 15180  00383C  0E00               	movlw	0
 15181  00383E  6F86               	movwf	___awdiv@quotient& (0+255),b
 15182                           
 15183                           ; BSR set to: 0
 15184  003840  5182               	movf	___awdiv@divisor& (0+255),w,b
 15185  003842  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 15186  003844  B4D8               	btfsc	status,2,c
 15187  003846  D020               	goto	l1287
 15188                           
 15189                           ; BSR set to: 0
 15190  003848  0E01               	movlw	1
 15191  00384A  6F84               	movwf	___awdiv@counter& (0+255),b
 15192  00384C  D005               	goto	l1282
 15193  00384E  FFFF               	dw	65535	; assembler added errata NOP
 15194                           
 15195                           ; BSR set to: 0
 15196                           
 15197                           ; BSR set to: 0
 15198  003850  90D8               	bcf	status,0,c
 15199  003852  3782               	rlcf	___awdiv@divisor& (0+255),f,b
 15200  003854  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 15201  003856  2B84               	incf	___awdiv@counter& (0+255),f,b
 15202  003858                     l1282:
 15203  003858  FFFF               	dw	65535	; assembler added errata NOP
 15204                           
 15205                           ; BSR set to: 0
 15206                           
 15207                           ; BSR set to: 0
 15208  00385A  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 15209  00385C  D7F8               	goto	l1283
 15210  00385E                     u5220:
 15211  00385E  FFFF               	dw	65535	; assembler added errata NOP
 15212                           
 15213                           ; BSR set to: 0
 15214                           
 15215                           ; BSR set to: 0
 15216                           
 15217                           ; BSR set to: 0
 15218  003860  90D8               	bcf	status,0,c
 15219  003862  3786               	rlcf	___awdiv@quotient& (0+255),f,b
 15220  003864  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 15221                           
 15222                           ; BSR set to: 0
 15223  003866  5182               	movf	___awdiv@divisor& (0+255),w,b
 15224  003868  5D80               	subwf	___awdiv@dividend& (0+255),w,b
 15225  00386A  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 15226  00386C  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 15227  00386E  A0D8               	btfss	status,0,c
 15228  003870  D005               	goto	l1286
 15229                           
 15230                           ; BSR set to: 0
 15231  003872  5182               	movf	___awdiv@divisor& (0+255),w,b
 15232  003874  5F80               	subwf	___awdiv@dividend& (0+255),f,b
 15233  003876  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 15234  003878  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 15235                           
 15236                           ; BSR set to: 0
 15237  00387A  8186               	bsf	___awdiv@quotient& (0+255),0,b
 15238  00387C                     l1286:
 15239  00387C  FFFF               	dw	65535	; assembler added errata NOP
 15240                           
 15241                           ; BSR set to: 0
 15242                           
 15243                           ; BSR set to: 0
 15244  00387E  90D8               	bcf	status,0,c
 15245  003880  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 15246  003882  3382               	rrcf	___awdiv@divisor& (0+255),f,b
 15247                           
 15248                           ; BSR set to: 0
 15249  003884  2F84               	decfsz	___awdiv@counter& (0+255),f,b
 15250  003886  D7EB               	goto	u5220
 15251  003888                     l1287:
 15252  003888  FFFF               	dw	65535	; assembler added errata NOP
 15253                           
 15254                           ; BSR set to: 0
 15255                           
 15256                           ; BSR set to: 0
 15257                           
 15258                           ; BSR set to: 0
 15259  00388A  5185               	movf	___awdiv@sign& (0+255),w,b
 15260  00388C  B4D8               	btfsc	status,2,c
 15261  00388E  D004               	goto	l1288
 15262                           
 15263                           ; BSR set to: 0
 15264  003890  6D86               	negf	___awdiv@quotient& (0+255),b
 15265  003892  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
 15266  003894  B0D8               	btfsc	status,0,c
 15267  003896  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
 15268  003898                     l1288:
 15269  003898  FFFF               	dw	65535	; assembler added errata NOP
 15270                           
 15271                           ; BSR set to: 0
 15272                           
 15273                           ; BSR set to: 0
 15274  00389A  C086  F080         	movff	___awdiv@quotient,?___awdiv
 15275  00389E  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
 15276                           
 15277                           ; BSR set to: 0
 15278                           
 15279                           ; BSR set to: 0
 15280  0038A2  0012               	return		;funcret
 15281  0038A4  FFFF               	dw	65535	; errata NOP
 15282  0038A6                     __end_of___awdiv:
 15283                           	opt stack 0
 15284                           tosu	equ	0xFFF
 15285                           tosh	equ	0xFFE
 15286                           tosl	equ	0xFFD
 15287                           pclath	equ	0xFFA
 15288                           tblptru	equ	0xFF8
 15289                           tblptrh	equ	0xFF7
 15290                           tblptrl	equ	0xFF6
 15291                           tablat	equ	0xFF5
 15292                           prodh	equ	0xFF4
 15293                           prodl	equ	0xFF3
 15294                           intcon	equ	0xFF2
 15295                           indf0	equ	0xFEF
 15296                           postinc0	equ	0xFEE
 15297                           fsr0h	equ	0xFEA
 15298                           fsr0l	equ	0xFE9
 15299                           wreg	equ	0xFE8
 15300                           postdec1	equ	0xFE5
 15301                           fsr1l	equ	0xFE1
 15302                           indf2	equ	0xFDF
 15303                           postinc2	equ	0xFDE
 15304                           postdec2	equ	0xFDD
 15305                           fsr2h	equ	0xFDA
 15306                           fsr2l	equ	0xFD9
 15307                           status	equ	0xFD8
 15308                           
 15309 ;; *************** function _clearShiftREG *****************
 15310 ;; Defined at:
 15311 ;;		line 30 in file "shift595.h"
 15312 ;; Parameters:    Size  Location     Type
 15313 ;;		None
 15314 ;; Auto vars:     Size  Location     Type
 15315 ;;  i               1    0[BANK0 ] unsigned char 
 15316 ;; Return value:  Size  Location     Type
 15317 ;;                  1    wreg      void 
 15318 ;; Registers used:
 15319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15320 ;; Tracked objects:
 15321 ;;		On entry : 0/0
 15322 ;;		On exit  : 0/0
 15323 ;;		Unchanged: 0/0
 15324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15325 ;;      Params:         0       0       0       0       0       0       0
 15326 ;;      Locals:         0       1       0       0       0       0       0
 15327 ;;      Temps:          0       0       0       0       0       0       0
 15328 ;;      Totals:         0       1       0       0       0       0       0
 15329 ;;Total ram usage:        1 bytes
 15330 ;; Hardware stack levels used:    1
 15331 ;; Hardware stack levels required when called:    6
 15332 ;; This function calls:
 15333 ;;		Nothing
 15334 ;; This function is called by:
 15335 ;;		_acaoTesteBombas
 15336 ;;		_telaPrincipal
 15337 ;; This function uses a non-reentrant model
 15338 ;;
 15339                           
 15340                           	psect	text54
 15341  0077AE                     __ptext54:
 15342                           	opt stack 0
 15343  0077AE                     _clearShiftREG:
 15344                           	opt stack 0
 15345  0077AE  FFFF               	dw	65535	; assembler added errata NOP
 15346                           
 15347                           ;shift595.h: 31: char i = 0;
 15348                           
 15349                           ; BSR set to: 0
 15350                           ;incstack = 0
 15351  0077B0  0E00               	movlw	0
 15352  0077B2  0100               	movlb	0	; () banked
 15353  0077B4  6F80               	movwf	clearShiftREG@i& (0+255),b
 15354                           
 15355                           ;shift595.h: 32: for (i = 0; i < 8; i++) {
 15356  0077B6  0E00               	movlw	0
 15357  0077B8  6F80               	movwf	clearShiftREG@i& (0+255),b
 15358  0077BA                     l5250:
 15359  0077BA  FFFF               	dw	65535	; assembler added errata NOP
 15360                           
 15361                           ; BSR set to: 0
 15362  0077BC  0E07               	movlw	7
 15363  0077BE  6580               	cpfsgt	clearShiftREG@i& (0+255),b
 15364  0077C0  D001               	goto	l456
 15365  0077C2  D00D               	goto	u5370
 15366  0077C4                     l456:
 15367  0077C4  FFFF               	dw	65535	; assembler added errata NOP
 15368                           
 15369                           ; BSR set to: 0
 15370                           ;shift595.h: 33: shift[i] = 0;
 15371                           
 15372                           ; BSR set to: 0
 15373  0077C6  5180               	movf	clearShiftREG@i& (0+255),w,b
 15374  0077C8  0D01               	mullw	1
 15375  0077CA  0E44               	movlw	low _shift
 15376  0077CC  24F3               	addwf	prodl,w,c
 15377  0077CE  6ED9               	movwf	fsr2l,c
 15378  0077D0  0E00               	movlw	high _shift
 15379  0077D2  20F4               	addwfc	prodh,w,c
 15380  0077D4  6EDA               	movwf	fsr2h,c
 15381  0077D6  0E00               	movlw	0
 15382  0077D8  6EDF               	movwf	indf2,c
 15383                           
 15384                           ; BSR set to: 0
 15385  0077DA  2B80               	incf	clearShiftREG@i& (0+255),f,b
 15386  0077DC  D7EE               	goto	l5250
 15387  0077DE                     u5370:
 15388  0077DE  FFFF               	dw	65535	; assembler added errata NOP
 15389                           
 15390                           ; BSR set to: 0
 15391                           
 15392                           ; BSR set to: 0
 15393  0077E0  0012               	return		;funcret
 15394  0077E2  FFFF               	dw	65535	; errata NOP
 15395  0077E4                     __end_of_clearShiftREG:
 15396                           	opt stack 0
 15397                           tosu	equ	0xFFF
 15398                           tosh	equ	0xFFE
 15399                           tosl	equ	0xFFD
 15400                           pclath	equ	0xFFA
 15401                           tblptru	equ	0xFF8
 15402                           tblptrh	equ	0xFF7
 15403                           tblptrl	equ	0xFF6
 15404                           tablat	equ	0xFF5
 15405                           prodh	equ	0xFF4
 15406                           prodl	equ	0xFF3
 15407                           intcon	equ	0xFF2
 15408                           indf0	equ	0xFEF
 15409                           postinc0	equ	0xFEE
 15410                           fsr0h	equ	0xFEA
 15411                           fsr0l	equ	0xFE9
 15412                           wreg	equ	0xFE8
 15413                           postdec1	equ	0xFE5
 15414                           fsr1l	equ	0xFE1
 15415                           indf2	equ	0xFDF
 15416                           postinc2	equ	0xFDE
 15417                           postdec2	equ	0xFDD
 15418                           fsr2h	equ	0xFDA
 15419                           fsr2l	equ	0xFD9
 15420                           status	equ	0xFD8
 15421                           
 15422 ;; *************** function _btPress *****************
 15423 ;; Defined at:
 15424 ;;		line 59 in file "teclado.h"
 15425 ;; Parameters:    Size  Location     Type
 15426 ;;  bt              1    wreg     unsigned char 
 15427 ;; Auto vars:     Size  Location     Type
 15428 ;;  bt              1    0[BANK0 ] unsigned char 
 15429 ;; Return value:  Size  Location     Type
 15430 ;;                  1    wreg      unsigned char 
 15431 ;; Registers used:
 15432 ;;		wreg, status,2, status,0
 15433 ;; Tracked objects:
 15434 ;;		On entry : 0/0
 15435 ;;		On exit  : 0/0
 15436 ;;		Unchanged: 0/0
 15437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15438 ;;      Params:         0       0       0       0       0       0       0
 15439 ;;      Locals:         0       1       0       0       0       0       0
 15440 ;;      Temps:          0       0       0       0       0       0       0
 15441 ;;      Totals:         0       1       0       0       0       0       0
 15442 ;;Total ram usage:        1 bytes
 15443 ;; Hardware stack levels used:    1
 15444 ;; Hardware stack levels required when called:    6
 15445 ;; This function calls:
 15446 ;;		Nothing
 15447 ;; This function is called by:
 15448 ;;		_acaoTesteBombas
 15449 ;;		_telaPrincipal
 15450 ;;		_tela_ajusteRTC
 15451 ;;		_tela_testeBombas
 15452 ;;		_dataLoger
 15453 ;;		_informacoes
 15454 ;;		_configuraTelefones
 15455 ;;		_configurarEstacionaria
 15456 ;;		_ajusteSP_Bombas
 15457 ;;		_main
 15458 ;; This function uses a non-reentrant model
 15459 ;;
 15460                           
 15461                           	psect	text55
 15462  003CDC                     __ptext55:
 15463                           	opt stack 0
 15464  003CDC                     _btPress:
 15465                           	opt stack 0
 15466  003CDC  FFFF               	dw	65535	; assembler added errata NOP
 15467                           
 15468                           ; BSR set to: 0
 15469                           ;incstack = 0
 15470                           ;btPress@bt stored from wreg
 15471  003CDE  0100               	movlb	0	; () banked
 15472  003CE0  6F80               	movwf	btPress@bt& (0+255),b
 15473                           
 15474                           ;teclado.h: 60: switch (bt) {
 15475  003CE2  D023               	goto	l495
 15476  003CE4  FFFF               	dw	65535	; assembler added errata NOP
 15477  003CE6  5062               	movf	__b_esc,w,c
 15478  003CE8  B4D8               	btfsc	status,2,c
 15479  003CEA  D01C               	goto	l504
 15480                           
 15481                           ;teclado.h: 62: _b_esc = 0;
 15482  003CEC  0E00               	movlw	0
 15483  003CEE  6E62               	movwf	__b_esc,c
 15484  003CF0  D014               	goto	L35
 15485  003CF2  FFFF               	dw	65535	; assembler added errata NOP
 15486  003CF4  505E               	movf	__b_mais,w,c
 15487  003CF6  B4D8               	btfsc	status,2,c
 15488  003CF8  D015               	goto	l504
 15489                           
 15490                           ;teclado.h: 68: _b_mais = 0;
 15491  003CFA  0E00               	movlw	0
 15492  003CFC  6E5E               	movwf	__b_mais,c
 15493  003CFE  D00D               	goto	L35
 15494  003D00  FFFF               	dw	65535	; assembler added errata NOP
 15495  003D02  5060               	movf	__b_menos,w,c
 15496  003D04  B4D8               	btfsc	status,2,c
 15497  003D06  D00E               	goto	l504
 15498                           
 15499                           ;teclado.h: 74: _b_menos = 0;
 15500  003D08  0E00               	movlw	0
 15501  003D0A  6E60               	movwf	__b_menos,c
 15502  003D0C  D006               	goto	L35
 15503  003D0E  FFFF               	dw	65535	; assembler added errata NOP
 15504  003D10  505C               	movf	__b_ok,w,c
 15505  003D12  B4D8               	btfsc	status,2,c
 15506  003D14  D007               	goto	l504
 15507                           
 15508                           ;teclado.h: 80: _b_ok = 0;
 15509  003D16  0E00               	movlw	0
 15510  003D18  6E5C               	movwf	__b_ok,c
 15511  003D1A                     L35:
 15512  003D1A  FFFF               	dw	65535	; assembler added errata NOP
 15513                           
 15514                           ;teclado.h: 81: bt_press = 1;
 15515  003D1C  0E01               	movlw	1
 15516  003D1E  6E7A               	movwf	_bt_press,c
 15517                           
 15518                           ;teclado.h: 82: return 1;
 15519  003D20  0E01               	movlw	1
 15520  003D22  D013               	goto	l506
 15521  003D24                     l504:
 15522  003D24  FFFF               	dw	65535	; assembler added errata NOP
 15523                           
 15524                           ;teclado.h: 85: default: return 0;
 15525                           
 15526                           ;teclado.h: 83: }
 15527                           ;teclado.h: 84: return 0;
 15528  003D26  0E00               	movlw	0
 15529                           
 15530                           ;teclado.h: 86: }
 15531  003D28  D010               	goto	l506
 15532  003D2A                     l495:
 15533  003D2A  FFFF               	dw	65535	; assembler added errata NOP
 15534  003D2C  0100               	movlb	0	; () banked
 15535  003D2E  5180               	movf	btPress@bt& (0+255),w,b
 15536                           
 15537                           ; Switch size 1, requested type "space"
 15538                           ; Number of cases is 4, Range of values is 1 to 4
 15539                           ; switch strategies available:
 15540                           ; Name         Instructions Cycles
 15541                           ; simple_byte           13     7 (average)
 15542                           ;	Chosen strategy is simple_byte
 15543  003D30  0A01               	xorlw	1	; case 1
 15544  003D32  B4D8               	btfsc	status,2,c
 15545  003D34  D7D7               	goto	l496
 15546  003D36  0A03               	xorlw	3	; case 2
 15547  003D38  B4D8               	btfsc	status,2,c
 15548  003D3A  D7E2               	goto	l501
 15549  003D3C  0A01               	xorlw	1	; case 3
 15550  003D3E  B4D8               	btfsc	status,2,c
 15551  003D40  D7D8               	goto	l499
 15552  003D42  0A07               	xorlw	7	; case 4
 15553  003D44  B4D8               	btfsc	status,2,c
 15554  003D46  D7E3               	goto	l503
 15555  003D48  D7ED               	goto	l504
 15556  003D4A                     l506:
 15557  003D4A  FFFF               	dw	65535	; assembler added errata NOP
 15558                           
 15559                           ; BSR set to: 0
 15560  003D4C  0012               	return		;funcret
 15561  003D4E  FFFF               	dw	65535	; errata NOP
 15562  003D50                     __end_of_btPress:
 15563                           	opt stack 0
 15564                           tosu	equ	0xFFF
 15565                           tosh	equ	0xFFE
 15566                           tosl	equ	0xFFD
 15567                           pclath	equ	0xFFA
 15568                           tblptru	equ	0xFF8
 15569                           tblptrh	equ	0xFF7
 15570                           tblptrl	equ	0xFF6
 15571                           tablat	equ	0xFF5
 15572                           prodh	equ	0xFF4
 15573                           prodl	equ	0xFF3
 15574                           intcon	equ	0xFF2
 15575                           indf0	equ	0xFEF
 15576                           postinc0	equ	0xFEE
 15577                           fsr0h	equ	0xFEA
 15578                           fsr0l	equ	0xFE9
 15579                           wreg	equ	0xFE8
 15580                           postdec1	equ	0xFE5
 15581                           fsr1l	equ	0xFE1
 15582                           indf2	equ	0xFDF
 15583                           postinc2	equ	0xFDE
 15584                           postdec2	equ	0xFDD
 15585                           fsr2h	equ	0xFDA
 15586                           fsr2l	equ	0xFD9
 15587                           status	equ	0xFD8
 15588                           
 15589 ;; *************** function _acaoBombas *****************
 15590 ;; Defined at:
 15591 ;;		line 16 in file "controle.h"
 15592 ;; Parameters:    Size  Location     Type
 15593 ;;		None
 15594 ;; Auto vars:     Size  Location     Type
 15595 ;;		None
 15596 ;; Return value:  Size  Location     Type
 15597 ;;                  1    wreg      void 
 15598 ;; Registers used:
 15599 ;;		wreg, status,2, status,0, cstack
 15600 ;; Tracked objects:
 15601 ;;		On entry : 0/0
 15602 ;;		On exit  : 0/0
 15603 ;;		Unchanged: 0/0
 15604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15605 ;;      Params:         0       0       0       0       0       0       0
 15606 ;;      Locals:         0       0       0       0       0       0       0
 15607 ;;      Temps:          0       0       0       0       0       0       0
 15608 ;;      Totals:         0       0       0       0       0       0       0
 15609 ;;Total ram usage:        0 bytes
 15610 ;; Hardware stack levels used:    1
 15611 ;; Hardware stack levels required when called:    8
 15612 ;; This function calls:
 15613 ;;		_partidaBombaEstacionaria
 15614 ;; This function is called by:
 15615 ;;		_main
 15616 ;; This function uses a non-reentrant model
 15617 ;;
 15618                           
 15619                           	psect	text56
 15620  003620                     __ptext56:
 15621                           	opt stack 0
 15622  003620                     _acaoBombas:
 15623                           	opt stack 0
 15624  003620  FFFF               	dw	65535	; assembler added errata NOP
 15625                           
 15626                           ;controle.h: 17: if (pressao >= sp_pressao_rede && incendio != 1 && teste_run == 0) {
 15627                           
 15628                           ;incstack = 0
 15629  003622  0100               	movlb	0	; () banked
 15630  003624  51E1               	movf	_sp_pressao_rede& (0+255),w,b
 15631  003626  5DFD               	subwf	_pressao& (0+255),w,b
 15632  003628  A0D8               	btfss	status,0,c
 15633  00362A  D00F               	goto	l509
 15634                           
 15635                           ; BSR set to: 0
 15636  00362C  05DB               	decf	_incendio& (0+255),w,b
 15637  00362E  B4D8               	btfsc	status,2,c
 15638  003630  D00C               	goto	l509
 15639                           
 15640                           ; BSR set to: 0
 15641  003632  51DC               	movf	_teste_run& (0+255),w,b
 15642  003634  A4D8               	btfss	status,2,c
 15643  003636  D009               	goto	l509
 15644                           
 15645                           ; BSR set to: 0
 15646                           ;controle.h: 18: shift[6] = 0;
 15647  003638  0E00               	movlw	0
 15648  00363A  6E4A               	movwf	_shift+6,c
 15649                           
 15650                           ;controle.h: 19: shift[5] = 0;
 15651  00363C  0E00               	movlw	0
 15652  00363E  6E49               	movwf	_shift+5,c
 15653                           
 15654                           ; BSR set to: 0
 15655                           ;controle.h: 20: partidaBombaEstacionaria(0);
 15656  003640  0E00               	movlw	0
 15657  003642  ECC1  F017         	call	_partidaBombaEstacionaria
 15658                           
 15659                           ;controle.h: 21: shift[1] = 0;
 15660  003646  0E00               	movlw	0
 15661  003648  D03B               	goto	L36
 15662  00364A                     l509:
 15663  00364A  FFFF               	dw	65535	; assembler added errata NOP
 15664                           
 15665                           ;controle.h: 23: }
 15666                           ;controle.h: 24: if (teste_run == 0) {
 15667  00364C  0100               	movlb	0	; () banked
 15668  00364E  51DC               	movf	_teste_run& (0+255),w,b
 15669  003650  A4D8               	btfss	status,2,c
 15670  003652  D03E               	goto	l518
 15671                           
 15672                           ; BSR set to: 0
 15673                           ;controle.h: 25: shift[2] = 0;
 15674  003654  0E00               	movlw	0
 15675  003656  6E46               	movwf	_shift+2,c
 15676                           
 15677                           ; BSR set to: 0
 15678                           ;controle.h: 26: if (pressao <= sp_jockey) {
 15679  003658  51FD               	movf	_pressao& (0+255),w,b
 15680  00365A  5DE0               	subwf	_sp_jockey& (0+255),w,b
 15681  00365C  A0D8               	btfss	status,0,c
 15682  00365E  D002               	goto	l512
 15683                           
 15684                           ; BSR set to: 0
 15685                           ;controle.h: 27: shift[6] = 1;
 15686  003660  0E01               	movlw	1
 15687  003662  6E4A               	movwf	_shift+6,c
 15688  003664                     l512:
 15689  003664  FFFF               	dw	65535	; assembler added errata NOP
 15690                           
 15691                           ; BSR set to: 0
 15692                           ;controle.h: 28: }
 15693                           ;controle.h: 29: if (pressao >= sp_pressao_rede) {
 15694                           
 15695                           ; BSR set to: 0
 15696  003666  51E1               	movf	_sp_pressao_rede& (0+255),w,b
 15697  003668  5DFD               	subwf	_pressao& (0+255),w,b
 15698  00366A  A0D8               	btfss	status,0,c
 15699  00366C  D002               	goto	l513
 15700                           
 15701                           ; BSR set to: 0
 15702                           ;controle.h: 30: shift[6] = 0;
 15703  00366E  0E00               	movlw	0
 15704  003670  6E4A               	movwf	_shift+6,c
 15705  003672                     l513:
 15706  003672  FFFF               	dw	65535	; assembler added errata NOP
 15707                           
 15708                           ; BSR set to: 0
 15709                           ;controle.h: 31: }
 15710                           ;controle.h: 32: if (pressao >= sp_pressao_rede && incendio == 0) {
 15711                           
 15712                           ; BSR set to: 0
 15713  003674  51E1               	movf	_sp_pressao_rede& (0+255),w,b
 15714  003676  5DFD               	subwf	_pressao& (0+255),w,b
 15715  003678  A0D8               	btfss	status,0,c
 15716  00367A  D008               	goto	l514
 15717                           
 15718                           ; BSR set to: 0
 15719  00367C  51DB               	movf	_incendio& (0+255),w,b
 15720  00367E  A4D8               	btfss	status,2,c
 15721  003680  D005               	goto	l514
 15722                           
 15723                           ; BSR set to: 0
 15724                           ;controle.h: 33: shift[5] = 0;
 15725  003682  0E00               	movlw	0
 15726  003684  6E49               	movwf	_shift+5,c
 15727                           
 15728                           ; BSR set to: 0
 15729                           ;controle.h: 34: partidaBombaEstacionaria(0);
 15730  003686  0E00               	movlw	0
 15731  003688  ECC1  F017         	call	_partidaBombaEstacionaria
 15732  00368C                     l514:
 15733  00368C  FFFF               	dw	65535	; assembler added errata NOP
 15734                           
 15735                           ;controle.h: 35: }
 15736                           ;controle.h: 36: if (pressao <= sp_principal) {
 15737  00368E  0100               	movlb	0	; () banked
 15738  003690  51FD               	movf	_pressao& (0+255),w,b
 15739  003692  5DDF               	subwf	_sp_principal& (0+255),w,b
 15740  003694  A0D8               	btfss	status,0,c
 15741  003696  D004               	goto	l515
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;controle.h: 37: incendio = 1;
 15745  003698  0E01               	movlw	1
 15746  00369A  6FDB               	movwf	_incendio& (0+255),b
 15747                           
 15748                           ;controle.h: 38: shift[5] = 1;
 15749  00369C  0E01               	movlw	1
 15750  00369E  6E49               	movwf	_shift+5,c
 15751  0036A0                     l515:
 15752  0036A0  FFFF               	dw	65535	; assembler added errata NOP
 15753                           
 15754                           ; BSR set to: 0
 15755                           ;controle.h: 39: }
 15756                           ;controle.h: 40: if (pressao <= sp_estacionaria) {
 15757                           
 15758                           ; BSR set to: 0
 15759  0036A2  51FD               	movf	_pressao& (0+255),w,b
 15760  0036A4  5DDE               	subwf	_sp_estacionaria& (0+255),w,b
 15761  0036A6  A0D8               	btfss	status,0,c
 15762  0036A8  D005               	goto	l516
 15763                           
 15764                           ; BSR set to: 0
 15765                           ;controle.h: 41: incendio = 1;
 15766  0036AA  0E01               	movlw	1
 15767  0036AC  6FDB               	movwf	_incendio& (0+255),b
 15768                           
 15769                           ; BSR set to: 0
 15770                           ;controle.h: 42: partidaBombaEstacionaria(1);
 15771  0036AE  0E01               	movlw	1
 15772  0036B0  ECC1  F017         	call	_partidaBombaEstacionaria
 15773  0036B4                     l516:
 15774  0036B4  FFFF               	dw	65535	; assembler added errata NOP
 15775                           
 15776                           ;controle.h: 43: }
 15777                           ;controle.h: 44: if (incendio) {
 15778  0036B6  0100               	movlb	0	; () banked
 15779  0036B8  51DB               	movf	_incendio& (0+255),w,b
 15780  0036BA  B4D8               	btfsc	status,2,c
 15781  0036BC  D004               	goto	l517
 15782                           
 15783                           ; BSR set to: 0
 15784                           ;controle.h: 46: shift[1] = 1;
 15785  0036BE  0E01               	movlw	1
 15786  0036C0                     L36:
 15787  0036C0  FFFF               	dw	65535	; assembler added errata NOP
 15788  0036C2  6E45               	movwf	_shift+1,c
 15789                           
 15790                           ;controle.h: 47: } else {
 15791  0036C4  D005               	goto	l518
 15792  0036C6                     l517:
 15793  0036C6  FFFF               	dw	65535	; assembler added errata NOP
 15794                           
 15795                           ; BSR set to: 0
 15796                           ;controle.h: 48: estagio_envio_SMS = 0;
 15797                           
 15798                           ; BSR set to: 0
 15799  0036C8  0E00               	movlw	0
 15800  0036CA  6E6C               	movwf	_estagio_envio_SMS,c
 15801                           
 15802                           ;controle.h: 49: tempo_reenvio_SMS = 2;
 15803  0036CC  0E02               	movlw	2
 15804  0036CE  6E7B               	movwf	_tempo_reenvio_SMS,c
 15805  0036D0                     l518:
 15806  0036D0  FFFF               	dw	65535	; assembler added errata NOP
 15807                           
 15808                           ; BSR set to: 0
 15809                           
 15810                           ; BSR set to: 0
 15811  0036D2  0012               	return		;funcret
 15812  0036D4  FFFF               	dw	65535	; errata NOP
 15813  0036D6                     __end_of_acaoBombas:
 15814                           	opt stack 0
 15815                           tosu	equ	0xFFF
 15816                           tosh	equ	0xFFE
 15817                           tosl	equ	0xFFD
 15818                           pclath	equ	0xFFA
 15819                           tblptru	equ	0xFF8
 15820                           tblptrh	equ	0xFF7
 15821                           tblptrl	equ	0xFF6
 15822                           tablat	equ	0xFF5
 15823                           prodh	equ	0xFF4
 15824                           prodl	equ	0xFF3
 15825                           intcon	equ	0xFF2
 15826                           indf0	equ	0xFEF
 15827                           postinc0	equ	0xFEE
 15828                           fsr0h	equ	0xFEA
 15829                           fsr0l	equ	0xFE9
 15830                           wreg	equ	0xFE8
 15831                           postdec1	equ	0xFE5
 15832                           fsr1l	equ	0xFE1
 15833                           indf2	equ	0xFDF
 15834                           postinc2	equ	0xFDE
 15835                           postdec2	equ	0xFDD
 15836                           fsr2h	equ	0xFDA
 15837                           fsr2l	equ	0xFD9
 15838                           status	equ	0xFD8
 15839                           
 15840 ;; *************** function _partidaBombaEstacionaria *****************
 15841 ;; Defined at:
 15842 ;;		line 54 in file "controle.h"
 15843 ;; Parameters:    Size  Location     Type
 15844 ;;  acao            1    wreg     unsigned char 
 15845 ;; Auto vars:     Size  Location     Type
 15846 ;;  acao            1    3[BANK0 ] unsigned char 
 15847 ;; Return value:  Size  Location     Type
 15848 ;;                  1    wreg      void 
 15849 ;; Registers used:
 15850 ;;		wreg, status,2, status,0, cstack
 15851 ;; Tracked objects:
 15852 ;;		On entry : 0/0
 15853 ;;		On exit  : 0/0
 15854 ;;		Unchanged: 0/0
 15855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15856 ;;      Params:         0       0       0       0       0       0       0
 15857 ;;      Locals:         0       1       0       0       0       0       0
 15858 ;;      Temps:          0       0       0       0       0       0       0
 15859 ;;      Totals:         0       1       0       0       0       0       0
 15860 ;;Total ram usage:        1 bytes
 15861 ;; Hardware stack levels used:    1
 15862 ;; Hardware stack levels required when called:    7
 15863 ;; This function calls:
 15864 ;;		_delay
 15865 ;; This function is called by:
 15866 ;;		_acaoBombas
 15867 ;;		_acaoTesteBombas
 15868 ;; This function uses a non-reentrant model
 15869 ;;
 15870                           
 15871                           	psect	text57
 15872  002F82                     __ptext57:
 15873                           	opt stack 0
 15874  002F82                     _partidaBombaEstacionaria:
 15875                           	opt stack 0
 15876  002F82  FFFF               	dw	65535	; assembler added errata NOP
 15877                           
 15878                           ;incstack = 0
 15879                           ;partidaBombaEstacionaria@acao stored from wreg
 15880  002F84  0100               	movlb	0	; () banked
 15881  002F86  6F83               	movwf	partidaBombaEstacionaria@acao& (0+255),b
 15882                           
 15883                           ;controle.h: 55: if (acao == 1 && estacionaria_Ligada == 0) {
 15884  002F88  0100               	movlb	0	; () banked
 15885  002F8A  0583               	decf	partidaBombaEstacionaria@acao& (0+255),w,b
 15886  002F8C  A4D8               	btfss	status,2,c
 15887  002F8E  D01A               	goto	l523
 15888                           
 15889                           ; BSR set to: 0
 15890  002F90  51E7               	movf	_estacionaria_Ligada& (0+255),w,b
 15891  002F92  A4D8               	btfss	status,2,c
 15892  002F94  D017               	goto	l523
 15893                           
 15894                           ; BSR set to: 0
 15895                           ;controle.h: 56: if (_sec_partida != _sec) {
 15896  002F96  51F3               	movf	__sec& (0+255),w,b
 15897  002F98  19ED               	xorwf	__sec_partida& (0+255),w,b
 15898  002F9A  B4D8               	btfsc	status,2,c
 15899  002F9C  D013               	goto	l523
 15900                           
 15901                           ; BSR set to: 0
 15902                           ;controle.h: 57: _sec_partida = _sec;
 15903  002F9E  C0F3  F0ED         	movff	__sec,__sec_partida
 15904                           
 15905                           ; BSR set to: 0
 15906                           ;controle.h: 58: tempo_limite_partida++;
 15907  002FA2  2BE5               	incf	_tempo_limite_partida& (0+255),f,b
 15908                           
 15909                           ;controle.h: 59: tempo_partida++;
 15910  002FA4  2BE6               	incf	_tempo_partida& (0+255),f,b
 15911                           
 15912                           ; BSR set to: 0
 15913                           ;controle.h: 60: if (!PORTAbits.RA5) {
 15914  002FA6  BA80               	btfsc	3968,5,c	;volatile
 15915  002FA8  D00D               	goto	l523
 15916                           
 15917                           ; BSR set to: 0
 15918                           ;controle.h: 61: delay(700);
 15919  002FAA  0E02               	movlw	2
 15920  002FAC  6F81               	movwf	(delay@x+1)& (0+255),b
 15921  002FAE  0EBC               	movlw	188
 15922  002FB0  6F80               	movwf	delay@x& (0+255),b
 15923  002FB2  ECBC  F03B         	call	_delay	;wreg free
 15924                           
 15925                           ;controle.h: 62: estacionaria_Ligada = 1;
 15926  002FB6  0E01               	movlw	1
 15927  002FB8  0100               	movlb	0	; () banked
 15928  002FBA  6FE7               	movwf	_estacionaria_Ligada& (0+255),b
 15929                           
 15930                           ; BSR set to: 0
 15931                           ;controle.h: 63: tempo_partida = 0;
 15932  002FBC  0E00               	movlw	0
 15933  002FBE  6FE6               	movwf	_tempo_partida& (0+255),b
 15934                           
 15935                           ; BSR set to: 0
 15936                           ;controle.h: 64: shift[4] = 0;
 15937  002FC0  0E00               	movlw	0
 15938  002FC2  6E48               	movwf	_shift+4,c
 15939  002FC4                     l523:
 15940  002FC4  FFFF               	dw	65535	; assembler added errata NOP
 15941                           
 15942                           ; BSR set to: 0
 15943                           ;controle.h: 65: }
 15944                           ;controle.h: 66: }
 15945                           ;controle.h: 67: }
 15946                           ;controle.h: 68: if (estacionaria_Ligada == 0 && status_estacionaria == 1) {
 15947                           
 15948                           ; BSR set to: 0
 15949                           
 15950                           ; BSR set to: 0
 15951                           
 15952                           ; BSR set to: 0
 15953  002FC6  51E7               	movf	_estacionaria_Ligada& (0+255),w,b
 15954  002FC8  A4D8               	btfss	status,2,c
 15955  002FCA  D015               	goto	l528
 15956                           
 15957                           ; BSR set to: 0
 15958  002FCC  05FA               	decf	_status_estacionaria& (0+255),w,b
 15959  002FCE  A4D8               	btfss	status,2,c
 15960  002FD0  D012               	goto	l528
 15961                           
 15962                           ; BSR set to: 0
 15963                           ;controle.h: 69: shift[3] = 1;
 15964  002FD2  0E01               	movlw	1
 15965  002FD4  6E47               	movwf	_shift+3,c
 15966                           
 15967                           ; BSR set to: 0
 15968                           ;controle.h: 70: if (tempo_partida <= 7) {
 15969  002FD6  0E08               	movlw	8
 15970  002FD8  61E6               	cpfslt	_tempo_partida& (0+255),b
 15971  002FDA  D002               	goto	l525
 15972                           
 15973                           ; BSR set to: 0
 15974                           ;controle.h: 71: shift[4] = 1;
 15975  002FDC  0E01               	movlw	1
 15976  002FDE  D005               	goto	L37
 15977  002FE0                     l525:
 15978  002FE0  FFFF               	dw	65535	; assembler added errata NOP
 15979                           
 15980                           ; BSR set to: 0
 15981                           
 15982                           ; BSR set to: 0
 15983  002FE2  0E0D               	movlw	13
 15984  002FE4  61E6               	cpfslt	_tempo_partida& (0+255),b
 15985  002FE6  D004               	goto	l527
 15986                           
 15987                           ; BSR set to: 0
 15988                           ;controle.h: 73: shift[4] = 0;
 15989  002FE8  0E00               	movlw	0
 15990  002FEA                     L37:
 15991  002FEA  FFFF               	dw	65535	; assembler added errata NOP
 15992  002FEC  6E48               	movwf	_shift+4,c
 15993                           
 15994                           ;controle.h: 74: } else {
 15995  002FEE  D003               	goto	l528
 15996  002FF0                     l527:
 15997  002FF0  FFFF               	dw	65535	; assembler added errata NOP
 15998                           
 15999                           ; BSR set to: 0
 16000                           ;controle.h: 75: tempo_partida = 0;
 16001                           
 16002                           ; BSR set to: 0
 16003  002FF2  0E00               	movlw	0
 16004  002FF4  6FE6               	movwf	_tempo_partida& (0+255),b
 16005  002FF6                     l528:
 16006  002FF6  FFFF               	dw	65535	; assembler added errata NOP
 16007                           
 16008                           ; BSR set to: 0
 16009                           ;controle.h: 76: }
 16010                           ;controle.h: 77: }
 16011                           ;controle.h: 78: if (tempo_limite_partida > tempo_limite_estacionaria) {
 16012                           
 16013                           ; BSR set to: 0
 16014                           
 16015                           ; BSR set to: 0
 16016                           
 16017                           ; BSR set to: 0
 16018  002FF8  51E5               	movf	_tempo_limite_partida& (0+255),w,b
 16019  002FFA  5DE8               	subwf	_tempo_limite_estacionaria& (0+255),w,b
 16020  002FFC  B0D8               	btfsc	status,0,c
 16021  002FFE  D00C               	goto	l529
 16022                           
 16023                           ; BSR set to: 0
 16024                           ;controle.h: 79: tempo_limite_partida = 0;
 16025  003000  0E00               	movlw	0
 16026  003002  6FE5               	movwf	_tempo_limite_partida& (0+255),b
 16027                           
 16028                           ;controle.h: 80: falha = 1;
 16029  003004  0E01               	movlw	1
 16030  003006  6FDD               	movwf	_falha& (0+255),b
 16031                           
 16032                           ;controle.h: 81: status_estacionaria = 0;
 16033  003008  0E00               	movlw	0
 16034  00300A  6FFA               	movwf	_status_estacionaria& (0+255),b
 16035                           
 16036                           ;controle.h: 82: estacionaria_Ligada = 0;
 16037  00300C  0E00               	movlw	0
 16038  00300E  6FE7               	movwf	_estacionaria_Ligada& (0+255),b
 16039                           
 16040                           ;controle.h: 83: shift[3] = 0;
 16041  003010  0E00               	movlw	0
 16042  003012  6E47               	movwf	_shift+3,c
 16043                           
 16044                           ;controle.h: 84: shift[4] = 0;
 16045  003014  0E00               	movlw	0
 16046  003016  6E48               	movwf	_shift+4,c
 16047  003018                     l529:
 16048  003018  FFFF               	dw	65535	; assembler added errata NOP
 16049                           
 16050                           ; BSR set to: 0
 16051                           ;controle.h: 85: }
 16052                           ;controle.h: 88: if (acao == 0) {
 16053  00301A  5183               	movf	partidaBombaEstacionaria@acao& (0+255),w,b
 16054  00301C  A4D8               	btfss	status,2,c
 16055  00301E  D00A               	goto	l530
 16056                           
 16057                           ; BSR set to: 0
 16058                           ;controle.h: 89: estacionaria_Ligada = 0;
 16059  003020  0E00               	movlw	0
 16060  003022  6FE7               	movwf	_estacionaria_Ligada& (0+255),b
 16061                           
 16062                           ;controle.h: 90: shift[4] = 0;
 16063  003024  0E00               	movlw	0
 16064  003026  6E48               	movwf	_shift+4,c
 16065                           
 16066                           ;controle.h: 91: shift[3] = 0;
 16067  003028  0E00               	movlw	0
 16068  00302A  6E47               	movwf	_shift+3,c
 16069                           
 16070                           ;controle.h: 92: tempo_partida = 0;
 16071  00302C  0E00               	movlw	0
 16072  00302E  6FE6               	movwf	_tempo_partida& (0+255),b
 16073                           
 16074                           ;controle.h: 93: tempo_limite_partida = 0;
 16075  003030  0E00               	movlw	0
 16076  003032  6FE5               	movwf	_tempo_limite_partida& (0+255),b
 16077  003034                     l530:
 16078  003034  FFFF               	dw	65535	; assembler added errata NOP
 16079                           
 16080                           ; BSR set to: 0
 16081                           ;controle.h: 94: }
 16082                           ;controle.h: 96: if (status_estacionaria == 0) {
 16083  003036  51FA               	movf	_status_estacionaria& (0+255),w,b
 16084  003038  A4D8               	btfss	status,2,c
 16085  00303A  D008               	goto	l531
 16086                           
 16087                           ; BSR set to: 0
 16088                           ;controle.h: 97: shift[3] = 0;
 16089  00303C  0E00               	movlw	0
 16090  00303E  6E47               	movwf	_shift+3,c
 16091                           
 16092                           ;controle.h: 98: shift[4] = 0;
 16093  003040  0E00               	movlw	0
 16094  003042  6E48               	movwf	_shift+4,c
 16095                           
 16096                           ;controle.h: 99: falha = 1;
 16097  003044  0E01               	movlw	1
 16098  003046  6FDD               	movwf	_falha& (0+255),b
 16099                           
 16100                           ;controle.h: 100: tempo_partida = 0;
 16101  003048  0E00               	movlw	0
 16102  00304A  6FE6               	movwf	_tempo_partida& (0+255),b
 16103  00304C                     l531:
 16104  00304C  FFFF               	dw	65535	; assembler added errata NOP
 16105                           
 16106                           ; BSR set to: 0
 16107                           ;controle.h: 101: }
 16108                           ;controle.h: 102: if (estacionaria_Ligada == 1) {
 16109                           
 16110                           ; BSR set to: 0
 16111  00304E  05E7               	decf	_estacionaria_Ligada& (0+255),w,b
 16112  003050  A4D8               	btfss	status,2,c
 16113  003052  D00A               	goto	l534
 16114                           
 16115                           ; BSR set to: 0
 16116                           ;controle.h: 103: if (!PORTAbits.RA5) {
 16117  003054  BA80               	btfsc	3968,5,c	;volatile
 16118  003056  D005               	goto	l533
 16119                           
 16120                           ; BSR set to: 0
 16121                           ;controle.h: 104: shift[4] = 0;
 16122  003058  0E00               	movlw	0
 16123  00305A  6E48               	movwf	_shift+4,c
 16124                           
 16125                           ;controle.h: 105: tempo_limite_partida = 0;
 16126  00305C  0E00               	movlw	0
 16127  00305E  6FE5               	movwf	_tempo_limite_partida& (0+255),b
 16128                           
 16129                           ;controle.h: 106: } else {
 16130  003060  D003               	goto	l534
 16131  003062                     l533:
 16132  003062  FFFF               	dw	65535	; assembler added errata NOP
 16133                           
 16134                           ; BSR set to: 0
 16135                           ;controle.h: 107: estacionaria_Ligada = 0;
 16136                           
 16137                           ; BSR set to: 0
 16138  003064  0E00               	movlw	0
 16139  003066  6FE7               	movwf	_estacionaria_Ligada& (0+255),b
 16140  003068                     l534:
 16141  003068  FFFF               	dw	65535	; assembler added errata NOP
 16142                           
 16143                           ; BSR set to: 0
 16144                           
 16145                           ; BSR set to: 0
 16146                           
 16147                           ; BSR set to: 0
 16148  00306A  0012               	return		;funcret
 16149  00306C  FFFF               	dw	65535	; errata NOP
 16150  00306E                     __end_of_partidaBombaEstacionaria:
 16151                           	opt stack 0
 16152                           tosu	equ	0xFFF
 16153                           tosh	equ	0xFFE
 16154                           tosl	equ	0xFFD
 16155                           pclath	equ	0xFFA
 16156                           tblptru	equ	0xFF8
 16157                           tblptrh	equ	0xFF7
 16158                           tblptrl	equ	0xFF6
 16159                           tablat	equ	0xFF5
 16160                           prodh	equ	0xFF4
 16161                           prodl	equ	0xFF3
 16162                           intcon	equ	0xFF2
 16163                           indf0	equ	0xFEF
 16164                           postinc0	equ	0xFEE
 16165                           fsr0h	equ	0xFEA
 16166                           fsr0l	equ	0xFE9
 16167                           wreg	equ	0xFE8
 16168                           postdec1	equ	0xFE5
 16169                           fsr1l	equ	0xFE1
 16170                           indf2	equ	0xFDF
 16171                           postinc2	equ	0xFDE
 16172                           postdec2	equ	0xFDD
 16173                           fsr2h	equ	0xFDA
 16174                           fsr2l	equ	0xFD9
 16175                           status	equ	0xFD8
 16176                           
 16177 ;; *************** function _delay *****************
 16178 ;; Defined at:
 16179 ;;		line 16 in file "function.c"
 16180 ;; Parameters:    Size  Location     Type
 16181 ;;  x               2    0[BANK0 ] int 
 16182 ;; Auto vars:     Size  Location     Type
 16183 ;;		None
 16184 ;; Return value:  Size  Location     Type
 16185 ;;                  1    wreg      void 
 16186 ;; Registers used:
 16187 ;;		wreg, status,2, status,0
 16188 ;; Tracked objects:
 16189 ;;		On entry : 0/0
 16190 ;;		On exit  : 0/0
 16191 ;;		Unchanged: 0/0
 16192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16193 ;;      Params:         0       2       0       0       0       0       0
 16194 ;;      Locals:         0       0       0       0       0       0       0
 16195 ;;      Temps:          0       1       0       0       0       0       0
 16196 ;;      Totals:         0       3       0       0       0       0       0
 16197 ;;Total ram usage:        3 bytes
 16198 ;; Hardware stack levels used:    1
 16199 ;; Hardware stack levels required when called:    6
 16200 ;; This function calls:
 16201 ;;		Nothing
 16202 ;; This function is called by:
 16203 ;;		_aguardaBuffer
 16204 ;;		_limparBuffer
 16205 ;;		_comunicarTeste
 16206 ;;		_writeEEPROM_ext
 16207 ;;		_partidaBombaEstacionaria
 16208 ;;		_main
 16209 ;;		_enviaSMS
 16210 ;; This function uses a non-reentrant model
 16211 ;;
 16212                           
 16213                           	psect	text58
 16214  007778                     __ptext58:
 16215                           	opt stack 0
 16216  007778                     _delay:
 16217                           	opt stack 0
 16218  007778  FFFF               	dw	65535	; assembler added errata NOP
 16219                           
 16220                           ;function.c: 17: while (x--) {
 16221                           
 16222                           ; BSR set to: 0
 16223                           ;incstack = 0
 16224  00777A  D00C               	goto	l996
 16225  00777C  FFFF               	dw	65535	; assembler added errata NOP
 16226  00777E                     l4772:
 16227                           
 16228                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 16229  00777E  0E02               	movlw	2
 16230  007780  0100               	movlb	0	; () banked
 16231  007782  6F82               	movwf	??_delay& (0+255),b
 16232  007784  0EF2               	movlw	242
 16233  007786                     u8807:
 16234  007786  FFFF               	dw	65535	; errata NOP
 16235  007788  2EE8               	decfsz	wreg,f,c
 16236  00778A  D7FD               	bra	u8807
 16237  00778C  2F82               	decfsz	??_delay& (0+255),f,b
 16238  00778E  D7FB               	bra	u8807
 16239  007790  F000               	nop	
 16240  007792  0004               	clrwdt		;# 
 16241  007794                     l996:
 16242  007794  FFFF               	dw	65535	; assembler added errata NOP
 16243  007796  0100               	movlb	0	; () banked
 16244  007798  0780               	decf	delay@x& (0+255),f,b
 16245  00779A  A0D8               	btfss	status,0,c
 16246  00779C  0781               	decf	(delay@x+1)& (0+255),f,b
 16247  00779E  2980               	incf	delay@x& (0+255),w,b
 16248  0077A0  E1EE               	bnz	l4772
 16249  0077A2  2981               	incf	(delay@x+1)& (0+255),w,b
 16250  0077A4  B4D8               	btfsc	status,2,c
 16251                           
 16252                           ; BSR set to: 0
 16253                           
 16254                           ; BSR set to: 0
 16255  0077A6  0012               	return		;funcret
 16256  0077A8  FFFF               	dw	65535	; assembler added errata NOP
 16257  0077AA  D7E8               	goto	l997
 16258  0077AC  FFFF               	dw	65535	; errata NOP
 16259  0077AE                     __end_of_delay:
 16260                           	opt stack 0
 16261                           tosu	equ	0xFFF
 16262                           tosh	equ	0xFFE
 16263                           tosl	equ	0xFFD
 16264                           pclath	equ	0xFFA
 16265                           tblptru	equ	0xFF8
 16266                           tblptrh	equ	0xFF7
 16267                           tblptrl	equ	0xFF6
 16268                           tablat	equ	0xFF5
 16269                           prodh	equ	0xFF4
 16270                           prodl	equ	0xFF3
 16271                           intcon	equ	0xFF2
 16272                           indf0	equ	0xFEF
 16273                           postinc0	equ	0xFEE
 16274                           fsr0h	equ	0xFEA
 16275                           fsr0l	equ	0xFE9
 16276                           wreg	equ	0xFE8
 16277                           postdec1	equ	0xFE5
 16278                           fsr1l	equ	0xFE1
 16279                           indf2	equ	0xFDF
 16280                           postinc2	equ	0xFDE
 16281                           postdec2	equ	0xFDD
 16282                           fsr2h	equ	0xFDA
 16283                           fsr2l	equ	0xFD9
 16284                           status	equ	0xFD8
 16285                           
 16286 ;; *************** function _RTC_Init *****************
 16287 ;; Defined at:
 16288 ;;		line 98 in file "ds1307.h"
 16289 ;; Parameters:    Size  Location     Type
 16290 ;;		None
 16291 ;; Auto vars:     Size  Location     Type
 16292 ;;		None
 16293 ;; Return value:  Size  Location     Type
 16294 ;;                  1    wreg      void 
 16295 ;; Registers used:
 16296 ;;		wreg, status,2, status,0, cstack
 16297 ;; Tracked objects:
 16298 ;;		On entry : 0/0
 16299 ;;		On exit  : 0/0
 16300 ;;		Unchanged: 0/0
 16301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16302 ;;      Params:         0       0       0       0       0       0       0
 16303 ;;      Locals:         0       0       0       0       0       0       0
 16304 ;;      Temps:          0       0       0       0       0       0       0
 16305 ;;      Totals:         0       0       0       0       0       0       0
 16306 ;;Total ram usage:        0 bytes
 16307 ;; Hardware stack levels used:    1
 16308 ;; Hardware stack levels required when called:    8
 16309 ;; This function calls:
 16310 ;;		_I2C_Start
 16311 ;;		_I2C_Stop
 16312 ;;		_I2C_Write
 16313 ;; This function is called by:
 16314 ;;		_main
 16315 ;; This function uses a non-reentrant model
 16316 ;;
 16317                           
 16318                           	psect	text59
 16319  00781A                     __ptext59:
 16320                           	opt stack 0
 16321  00781A                     _RTC_Init:
 16322                           	opt stack 0
 16323  00781A  FFFF               	dw	65535	; assembler added errata NOP
 16324                           
 16325                           ;ds1307.h: 100: I2C_Start();
 16326                           
 16327                           ; BSR set to: 0
 16328                           ;incstack = 0
 16329  00781C  EC8B  F03A         	call	_I2C_Start	;wreg free
 16330                           
 16331                           ;ds1307.h: 101: I2C_Write(0xD0);
 16332  007820  0E00               	movlw	0
 16333  007822  0100               	movlb	0	; () banked
 16334  007824  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 16335  007826  0ED0               	movlw	208
 16336  007828  6F8A               	movwf	I2C_Write@d& (0+255),b
 16337  00782A  ECA4  F03A         	call	_I2C_Write	;wreg free
 16338                           
 16339                           ;ds1307.h: 102: I2C_Write(0x07);
 16340  00782E  0E00               	movlw	0
 16341  007830  0100               	movlb	0	; () banked
 16342  007832  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 16343  007834  0E07               	movlw	7
 16344  007836  6F8A               	movwf	I2C_Write@d& (0+255),b
 16345  007838  ECA4  F03A         	call	_I2C_Write	;wreg free
 16346                           
 16347                           ;ds1307.h: 103: I2C_Write(0x00);
 16348  00783C  0E00               	movlw	0
 16349  00783E  0100               	movlb	0	; () banked
 16350  007840  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 16351  007842  0E00               	movlw	0
 16352  007844  6F8A               	movwf	I2C_Write@d& (0+255),b
 16353  007846  ECA4  F03A         	call	_I2C_Write	;wreg free
 16354                           
 16355                           ;ds1307.h: 104: I2C_Stop();
 16356  00784A  EC91  F03A         	call	_I2C_Stop	;wreg free
 16357  00784E  0012               	return		;funcret
 16358  007850  FFFF               	dw	65535	; errata NOP
 16359  007852                     __end_of_RTC_Init:
 16360                           	opt stack 0
 16361                           tosu	equ	0xFFF
 16362                           tosh	equ	0xFFE
 16363                           tosl	equ	0xFFD
 16364                           pclath	equ	0xFFA
 16365                           tblptru	equ	0xFF8
 16366                           tblptrh	equ	0xFF7
 16367                           tblptrl	equ	0xFF6
 16368                           tablat	equ	0xFF5
 16369                           prodh	equ	0xFF4
 16370                           prodl	equ	0xFF3
 16371                           intcon	equ	0xFF2
 16372                           indf0	equ	0xFEF
 16373                           postinc0	equ	0xFEE
 16374                           fsr0h	equ	0xFEA
 16375                           fsr0l	equ	0xFE9
 16376                           wreg	equ	0xFE8
 16377                           postdec1	equ	0xFE5
 16378                           fsr1l	equ	0xFE1
 16379                           indf2	equ	0xFDF
 16380                           postinc2	equ	0xFDE
 16381                           postdec2	equ	0xFDD
 16382                           fsr2h	equ	0xFDA
 16383                           fsr2l	equ	0xFD9
 16384                           status	equ	0xFD8
 16385                           
 16386 ;; *************** function _I2C_Write *****************
 16387 ;; Defined at:
 16388 ;;		line 42 in file "I2C.c"
 16389 ;; Parameters:    Size  Location     Type
 16390 ;;  d               2   10[BANK0 ] unsigned int 
 16391 ;; Auto vars:     Size  Location     Type
 16392 ;;		None
 16393 ;; Return value:  Size  Location     Type
 16394 ;;                  1    wreg      void 
 16395 ;; Registers used:
 16396 ;;		wreg, status,2, status,0, cstack
 16397 ;; Tracked objects:
 16398 ;;		On entry : 0/0
 16399 ;;		On exit  : 0/0
 16400 ;;		Unchanged: 0/0
 16401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16402 ;;      Params:         0       2       0       0       0       0       0
 16403 ;;      Locals:         0       0       0       0       0       0       0
 16404 ;;      Temps:          0       0       0       0       0       0       0
 16405 ;;      Totals:         0       2       0       0       0       0       0
 16406 ;;Total ram usage:        2 bytes
 16407 ;; Hardware stack levels used:    1
 16408 ;; Hardware stack levels required when called:    7
 16409 ;; This function calls:
 16410 ;;		_I2C_Wait
 16411 ;; This function is called by:
 16412 ;;		_setDS1307TimeDate
 16413 ;;		_getDS1307TimeDate
 16414 ;;		_RTC_Init
 16415 ;;		_writeEEPROM_ext
 16416 ;;		_readEEPROM_ext
 16417 ;;		_getDS1307Time
 16418 ;;		_setDS1307Time
 16419 ;; This function uses a non-reentrant model
 16420 ;;
 16421                           
 16422                           	psect	text60
 16423  007548                     __ptext60:
 16424                           	opt stack 0
 16425  007548                     _I2C_Write:
 16426                           	opt stack 0
 16427  007548  FFFF               	dw	65535	; assembler added errata NOP
 16428                           
 16429                           ;I2C.c: 43: I2C_Wait();
 16430                           
 16431                           ;incstack = 0
 16432  00754A  ECDC  F03A         	call	_I2C_Wait	;wreg free
 16433                           
 16434                           ;I2C.c: 44: SSPBUF = d;
 16435  00754E  C08A  FFC9         	movff	I2C_Write@d,4041	;volatile
 16436  007552  0012               	return		;funcret
 16437  007554  FFFF               	dw	65535	; errata NOP
 16438  007556                     __end_of_I2C_Write:
 16439                           	opt stack 0
 16440                           tosu	equ	0xFFF
 16441                           tosh	equ	0xFFE
 16442                           tosl	equ	0xFFD
 16443                           pclath	equ	0xFFA
 16444                           tblptru	equ	0xFF8
 16445                           tblptrh	equ	0xFF7
 16446                           tblptrl	equ	0xFF6
 16447                           tablat	equ	0xFF5
 16448                           prodh	equ	0xFF4
 16449                           prodl	equ	0xFF3
 16450                           intcon	equ	0xFF2
 16451                           indf0	equ	0xFEF
 16452                           postinc0	equ	0xFEE
 16453                           fsr0h	equ	0xFEA
 16454                           fsr0l	equ	0xFE9
 16455                           wreg	equ	0xFE8
 16456                           postdec1	equ	0xFE5
 16457                           fsr1l	equ	0xFE1
 16458                           indf2	equ	0xFDF
 16459                           postinc2	equ	0xFDE
 16460                           postdec2	equ	0xFDD
 16461                           fsr2h	equ	0xFDA
 16462                           fsr2l	equ	0xFD9
 16463                           status	equ	0xFD8
 16464                           
 16465 ;; *************** function _I2C_Stop *****************
 16466 ;; Defined at:
 16467 ;;		line 36 in file "I2C.c"
 16468 ;; Parameters:    Size  Location     Type
 16469 ;;		None
 16470 ;; Auto vars:     Size  Location     Type
 16471 ;;		None
 16472 ;; Return value:  Size  Location     Type
 16473 ;;                  1    wreg      void 
 16474 ;; Registers used:
 16475 ;;		wreg, status,2, status,0, cstack
 16476 ;; Tracked objects:
 16477 ;;		On entry : 0/0
 16478 ;;		On exit  : 0/0
 16479 ;;		Unchanged: 0/0
 16480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16481 ;;      Params:         0       0       0       0       0       0       0
 16482 ;;      Locals:         0       0       0       0       0       0       0
 16483 ;;      Temps:          0       0       0       0       0       0       0
 16484 ;;      Totals:         0       0       0       0       0       0       0
 16485 ;;Total ram usage:        0 bytes
 16486 ;; Hardware stack levels used:    1
 16487 ;; Hardware stack levels required when called:    7
 16488 ;; This function calls:
 16489 ;;		_I2C_Wait
 16490 ;; This function is called by:
 16491 ;;		_setDS1307TimeDate
 16492 ;;		_getDS1307TimeDate
 16493 ;;		_RTC_Init
 16494 ;;		_writeEEPROM_ext
 16495 ;;		_readEEPROM_ext
 16496 ;;		_getDS1307Time
 16497 ;;		_setDS1307Time
 16498 ;; This function uses a non-reentrant model
 16499 ;;
 16500                           
 16501                           	psect	text61
 16502  007522                     __ptext61:
 16503                           	opt stack 0
 16504  007522                     _I2C_Stop:
 16505                           	opt stack 0
 16506  007522  FFFF               	dw	65535	; assembler added errata NOP
 16507                           
 16508                           ;I2C.c: 37: I2C_Wait();
 16509                           
 16510                           ;incstack = 0
 16511  007524  ECDC  F03A         	call	_I2C_Wait	;wreg free
 16512                           
 16513                           ;I2C.c: 38: PEN = 1;
 16514  007528  84C5               	bsf	4037,2,c	;volatile
 16515  00752A  0012               	return		;funcret
 16516  00752C  FFFF               	dw	65535	; errata NOP
 16517  00752E                     __end_of_I2C_Stop:
 16518                           	opt stack 0
 16519                           tosu	equ	0xFFF
 16520                           tosh	equ	0xFFE
 16521                           tosl	equ	0xFFD
 16522                           pclath	equ	0xFFA
 16523                           tblptru	equ	0xFF8
 16524                           tblptrh	equ	0xFF7
 16525                           tblptrl	equ	0xFF6
 16526                           tablat	equ	0xFF5
 16527                           prodh	equ	0xFF4
 16528                           prodl	equ	0xFF3
 16529                           intcon	equ	0xFF2
 16530                           indf0	equ	0xFEF
 16531                           postinc0	equ	0xFEE
 16532                           fsr0h	equ	0xFEA
 16533                           fsr0l	equ	0xFE9
 16534                           wreg	equ	0xFE8
 16535                           postdec1	equ	0xFE5
 16536                           fsr1l	equ	0xFE1
 16537                           indf2	equ	0xFDF
 16538                           postinc2	equ	0xFDE
 16539                           postdec2	equ	0xFDD
 16540                           fsr2h	equ	0xFDA
 16541                           fsr2l	equ	0xFD9
 16542                           status	equ	0xFD8
 16543                           
 16544 ;; *************** function _I2C_Start *****************
 16545 ;; Defined at:
 16546 ;;		line 26 in file "I2C.c"
 16547 ;; Parameters:    Size  Location     Type
 16548 ;;		None
 16549 ;; Auto vars:     Size  Location     Type
 16550 ;;		None
 16551 ;; Return value:  Size  Location     Type
 16552 ;;                  1    wreg      void 
 16553 ;; Registers used:
 16554 ;;		wreg, status,2, status,0, cstack
 16555 ;; Tracked objects:
 16556 ;;		On entry : 0/0
 16557 ;;		On exit  : 0/0
 16558 ;;		Unchanged: 0/0
 16559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16560 ;;      Params:         0       0       0       0       0       0       0
 16561 ;;      Locals:         0       0       0       0       0       0       0
 16562 ;;      Temps:          0       0       0       0       0       0       0
 16563 ;;      Totals:         0       0       0       0       0       0       0
 16564 ;;Total ram usage:        0 bytes
 16565 ;; Hardware stack levels used:    1
 16566 ;; Hardware stack levels required when called:    7
 16567 ;; This function calls:
 16568 ;;		_I2C_Wait
 16569 ;; This function is called by:
 16570 ;;		_setDS1307TimeDate
 16571 ;;		_getDS1307TimeDate
 16572 ;;		_RTC_Init
 16573 ;;		_writeEEPROM_ext
 16574 ;;		_readEEPROM_ext
 16575 ;;		_getDS1307Time
 16576 ;;		_setDS1307Time
 16577 ;; This function uses a non-reentrant model
 16578 ;;
 16579                           
 16580                           	psect	text62
 16581  007516                     __ptext62:
 16582                           	opt stack 0
 16583  007516                     _I2C_Start:
 16584                           	opt stack 0
 16585  007516  FFFF               	dw	65535	; assembler added errata NOP
 16586                           
 16587                           ;I2C.c: 27: I2C_Wait();
 16588                           
 16589                           ;incstack = 0
 16590  007518  ECDC  F03A         	call	_I2C_Wait	;wreg free
 16591                           
 16592                           ;I2C.c: 28: SEN = 1;
 16593  00751C  80C5               	bsf	4037,0,c	;volatile
 16594  00751E  0012               	return		;funcret
 16595  007520  FFFF               	dw	65535	; errata NOP
 16596  007522                     __end_of_I2C_Start:
 16597                           	opt stack 0
 16598                           tosu	equ	0xFFF
 16599                           tosh	equ	0xFFE
 16600                           tosl	equ	0xFFD
 16601                           pclath	equ	0xFFA
 16602                           tblptru	equ	0xFF8
 16603                           tblptrh	equ	0xFF7
 16604                           tblptrl	equ	0xFF6
 16605                           tablat	equ	0xFF5
 16606                           prodh	equ	0xFF4
 16607                           prodl	equ	0xFF3
 16608                           intcon	equ	0xFF2
 16609                           indf0	equ	0xFEF
 16610                           postinc0	equ	0xFEE
 16611                           fsr0h	equ	0xFEA
 16612                           fsr0l	equ	0xFE9
 16613                           wreg	equ	0xFE8
 16614                           postdec1	equ	0xFE5
 16615                           fsr1l	equ	0xFE1
 16616                           indf2	equ	0xFDF
 16617                           postinc2	equ	0xFDE
 16618                           postdec2	equ	0xFDD
 16619                           fsr2h	equ	0xFDA
 16620                           fsr2l	equ	0xFD9
 16621                           status	equ	0xFD8
 16622                           
 16623 ;; *************** function _I2C_Wait *****************
 16624 ;; Defined at:
 16625 ;;		line 22 in file "I2C.c"
 16626 ;; Parameters:    Size  Location     Type
 16627 ;;		None
 16628 ;; Auto vars:     Size  Location     Type
 16629 ;;		None
 16630 ;; Return value:  Size  Location     Type
 16631 ;;                  1    wreg      void 
 16632 ;; Registers used:
 16633 ;;		wreg, status,2, status,0
 16634 ;; Tracked objects:
 16635 ;;		On entry : 0/0
 16636 ;;		On exit  : 0/0
 16637 ;;		Unchanged: 0/0
 16638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16639 ;;      Params:         0       0       0       0       0       0       0
 16640 ;;      Locals:         0       0       0       0       0       0       0
 16641 ;;      Temps:          0       1       0       0       0       0       0
 16642 ;;      Totals:         0       1       0       0       0       0       0
 16643 ;;Total ram usage:        1 bytes
 16644 ;; Hardware stack levels used:    1
 16645 ;; Hardware stack levels required when called:    6
 16646 ;; This function calls:
 16647 ;;		Nothing
 16648 ;; This function is called by:
 16649 ;;		_I2C_Start
 16650 ;;		_I2C_Restart
 16651 ;;		_I2C_Stop
 16652 ;;		_I2C_Write
 16653 ;;		_I2C_Read
 16654 ;; This function uses a non-reentrant model
 16655 ;;
 16656                           
 16657                           	psect	text63
 16658  0075B8                     __ptext63:
 16659                           	opt stack 0
 16660  0075B8                     _I2C_Wait:
 16661                           	opt stack 0
 16662  0075B8  FFFF               	dw	65535	; assembler added errata NOP
 16663                           
 16664                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 16665                           
 16666                           ;incstack = 0
 16667  0075BA  B4C7               	btfsc	4039,2,c	;volatile
 16668  0075BC  D7FD               	goto	_I2C_Wait
 16669  0075BE  CFC5 F080          	movff	4037,??_I2C_Wait	;volatile
 16670  0075C2  0E1F               	movlw	31
 16671  0075C4  0100               	movlb	0	; () banked
 16672  0075C6  1780               	andwf	??_I2C_Wait& (0+255),f,b
 16673  0075C8  B4D8               	btfsc	status,2,c
 16674                           
 16675                           ; BSR set to: 0
 16676                           
 16677                           ; BSR set to: 0
 16678  0075CA  0012               	return		;funcret
 16679  0075CC  FFFF               	dw	65535	; assembler added errata NOP
 16680  0075CE  D7F4               	goto	_I2C_Wait
 16681  0075D0  FFFF               	dw	65535	; errata NOP
 16682  0075D2                     __end_of_I2C_Wait:
 16683                           	opt stack 0
 16684                           tosu	equ	0xFFF
 16685                           tosh	equ	0xFFE
 16686                           tosl	equ	0xFFD
 16687                           pclath	equ	0xFFA
 16688                           tblptru	equ	0xFF8
 16689                           tblptrh	equ	0xFF7
 16690                           tblptrl	equ	0xFF6
 16691                           tablat	equ	0xFF5
 16692                           prodh	equ	0xFF4
 16693                           prodl	equ	0xFF3
 16694                           intcon	equ	0xFF2
 16695                           indf0	equ	0xFEF
 16696                           postinc0	equ	0xFEE
 16697                           fsr0h	equ	0xFEA
 16698                           fsr0l	equ	0xFE9
 16699                           wreg	equ	0xFE8
 16700                           postdec1	equ	0xFE5
 16701                           fsr1l	equ	0xFE1
 16702                           indf2	equ	0xFDF
 16703                           postinc2	equ	0xFDE
 16704                           postdec2	equ	0xFDD
 16705                           fsr2h	equ	0xFDA
 16706                           fsr2l	equ	0xFD9
 16707                           status	equ	0xFD8
 16708                           
 16709 ;; *************** function _Lcd_Init *****************
 16710 ;; Defined at:
 16711 ;;		line 12 in file "lcd.h"
 16712 ;; Parameters:    Size  Location     Type
 16713 ;;		None
 16714 ;; Auto vars:     Size  Location     Type
 16715 ;;		None
 16716 ;; Return value:  Size  Location     Type
 16717 ;;                  1    wreg      void 
 16718 ;; Registers used:
 16719 ;;		wreg, status,2, cstack
 16720 ;; Tracked objects:
 16721 ;;		On entry : 0/0
 16722 ;;		On exit  : 0/0
 16723 ;;		Unchanged: 0/0
 16724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16725 ;;      Params:         0       0       0       0       0       0       0
 16726 ;;      Locals:         0       0       0       0       0       0       0
 16727 ;;      Temps:          0       1       0       0       0       0       0
 16728 ;;      Totals:         0       1       0       0       0       0       0
 16729 ;;Total ram usage:        1 bytes
 16730 ;; Hardware stack levels used:    1
 16731 ;; Hardware stack levels required when called:    8
 16732 ;; This function calls:
 16733 ;;		_Lcd_Cmd
 16734 ;;		_Lcd_Port
 16735 ;; This function is called by:
 16736 ;;		_main
 16737 ;; This function uses a non-reentrant model
 16738 ;;
 16739                           
 16740                           	psect	text64
 16741  003A5C                     __ptext64:
 16742                           	opt stack 0
 16743  003A5C                     _Lcd_Init:
 16744                           	opt stack 0
 16745  003A5C  FFFF               	dw	65535	; assembler added errata NOP
 16746                           
 16747                           ;lcd.h: 21: Lcd_Port(0x00);
 16748                           
 16749                           ; BSR set to: 0
 16750                           ;incstack = 0
 16751  003A5E  0E00               	movlw	0
 16752  003A60  EC76  F03D         	call	_Lcd_Port
 16753                           
 16754                           ;lcd.h: 22: _delay((unsigned long)((30)*(8000000/4000.0)));
 16755  003A64  0E3B               	movlw	59
 16756  003A66  0100               	movlb	0	; () banked
 16757  003A68  6F83               	movwf	??_Lcd_Init& (0+255),b
 16758  003A6A  0E79               	movlw	121
 16759  003A6C                     u8817:
 16760  003A6C  FFFF               	dw	65535	; errata NOP
 16761  003A6E  2EE8               	decfsz	wreg,f,c
 16762  003A70  D7FD               	bra	u8817
 16763  003A72  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 16764  003A74  D7FB               	bra	u8817
 16765  003A76  D000               	nop2	
 16766  003A78  F000               	nop	
 16767                           
 16768                           ;lcd.h: 23: Lcd_Cmd(0x03);
 16769  003A7A  0E03               	movlw	3
 16770  003A7C  EC43  F03B         	call	_Lcd_Cmd
 16771                           
 16772                           ;lcd.h: 24: _delay((unsigned long)((15)*(8000000/4000.0)));
 16773  003A80  0E1E               	movlw	30
 16774  003A82  0100               	movlb	0	; () banked
 16775  003A84  6F83               	movwf	??_Lcd_Init& (0+255),b
 16776  003A86  0E3C               	movlw	60
 16777  003A88                     u8827:
 16778  003A88  FFFF               	dw	65535	; errata NOP
 16779  003A8A  2EE8               	decfsz	wreg,f,c
 16780  003A8C  D7FD               	bra	u8827
 16781  003A8E  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 16782  003A90  D7FB               	bra	u8827
 16783  003A92  F000               	nop	
 16784                           
 16785                           ;lcd.h: 25: Lcd_Cmd(0x03);
 16786  003A94  0E03               	movlw	3
 16787  003A96  EC43  F03B         	call	_Lcd_Cmd
 16788                           
 16789                           ;lcd.h: 26: _delay((unsigned long)((20)*(8000000/4000.0)));
 16790  003A9A  0E27               	movlw	39
 16791  003A9C  0100               	movlb	0	; () banked
 16792  003A9E  6F83               	movwf	??_Lcd_Init& (0+255),b
 16793  003AA0  0EFB               	movlw	251
 16794  003AA2                     u8837:
 16795  003AA2  FFFF               	dw	65535	; errata NOP
 16796  003AA4  2EE8               	decfsz	wreg,f,c
 16797  003AA6  D7FD               	bra	u8837
 16798  003AA8  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 16799  003AAA  D7FB               	bra	u8837
 16800  003AAC  D000               	nop2	
 16801  003AAE  F000               	nop	
 16802                           
 16803                           ;lcd.h: 27: Lcd_Cmd(0x03);
 16804  003AB0  0E03               	movlw	3
 16805  003AB2  EC43  F03B         	call	_Lcd_Cmd
 16806                           
 16807                           ;lcd.h: 29: Lcd_Cmd(0x02);
 16808  003AB6  0E02               	movlw	2
 16809  003AB8  EC43  F03B         	call	_Lcd_Cmd
 16810                           
 16811                           ;lcd.h: 30: Lcd_Cmd(0x02);
 16812  003ABC  0E02               	movlw	2
 16813  003ABE  EC43  F03B         	call	_Lcd_Cmd
 16814                           
 16815                           ;lcd.h: 31: Lcd_Cmd(0x08);
 16816  003AC2  0E08               	movlw	8
 16817  003AC4  EC43  F03B         	call	_Lcd_Cmd
 16818                           
 16819                           ;lcd.h: 32: Lcd_Cmd(0x00);
 16820  003AC8  0E00               	movlw	0
 16821  003ACA  EC43  F03B         	call	_Lcd_Cmd
 16822                           
 16823                           ;lcd.h: 33: Lcd_Cmd(0x0C);
 16824  003ACE  0E0C               	movlw	12
 16825  003AD0  EC43  F03B         	call	_Lcd_Cmd
 16826                           
 16827                           ;lcd.h: 34: Lcd_Cmd(0x00);
 16828  003AD4  0E00               	movlw	0
 16829  003AD6  EC43  F03B         	call	_Lcd_Cmd
 16830                           
 16831                           ;lcd.h: 35: Lcd_Cmd(0x06);
 16832  003ADA  0E06               	movlw	6
 16833  003ADC  EC43  F03B         	call	_Lcd_Cmd
 16834  003AE0  0012               	return		;funcret
 16835  003AE2  FFFF               	dw	65535	; errata NOP
 16836  003AE4                     __end_of_Lcd_Init:
 16837                           	opt stack 0
 16838                           tosu	equ	0xFFF
 16839                           tosh	equ	0xFFE
 16840                           tosl	equ	0xFFD
 16841                           pclath	equ	0xFFA
 16842                           tblptru	equ	0xFF8
 16843                           tblptrh	equ	0xFF7
 16844                           tblptrl	equ	0xFF6
 16845                           tablat	equ	0xFF5
 16846                           prodh	equ	0xFF4
 16847                           prodl	equ	0xFF3
 16848                           intcon	equ	0xFF2
 16849                           indf0	equ	0xFEF
 16850                           postinc0	equ	0xFEE
 16851                           fsr0h	equ	0xFEA
 16852                           fsr0l	equ	0xFE9
 16853                           wreg	equ	0xFE8
 16854                           postdec1	equ	0xFE5
 16855                           fsr1l	equ	0xFE1
 16856                           indf2	equ	0xFDF
 16857                           postinc2	equ	0xFDE
 16858                           postdec2	equ	0xFDD
 16859                           fsr2h	equ	0xFDA
 16860                           fsr2l	equ	0xFD9
 16861                           status	equ	0xFD8
 16862                           
 16863 ;; *************** function _Lcd_Clear *****************
 16864 ;; Defined at:
 16865 ;;		line 68 in file "lcd.h"
 16866 ;; Parameters:    Size  Location     Type
 16867 ;;		None
 16868 ;; Auto vars:     Size  Location     Type
 16869 ;;		None
 16870 ;; Return value:  Size  Location     Type
 16871 ;;                  1    wreg      void 
 16872 ;; Registers used:
 16873 ;;		wreg, status,2, cstack
 16874 ;; Tracked objects:
 16875 ;;		On entry : 0/0
 16876 ;;		On exit  : 0/0
 16877 ;;		Unchanged: 0/0
 16878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16879 ;;      Params:         0       0       0       0       0       0       0
 16880 ;;      Locals:         0       0       0       0       0       0       0
 16881 ;;      Temps:          0       0       0       0       0       0       0
 16882 ;;      Totals:         0       0       0       0       0       0       0
 16883 ;;Total ram usage:        0 bytes
 16884 ;; Hardware stack levels used:    1
 16885 ;; Hardware stack levels required when called:    8
 16886 ;; This function calls:
 16887 ;;		_Lcd_Cmd
 16888 ;; This function is called by:
 16889 ;;		_main
 16890 ;; This function uses a non-reentrant model
 16891 ;;
 16892                           
 16893                           	psect	text65
 16894  007564                     __ptext65:
 16895                           	opt stack 0
 16896  007564                     _Lcd_Clear:
 16897                           	opt stack 0
 16898  007564  FFFF               	dw	65535	; assembler added errata NOP
 16899                           
 16900                           ;lcd.h: 69: Lcd_Cmd(0);
 16901                           
 16902                           ;incstack = 0
 16903  007566  0E00               	movlw	0
 16904  007568  EC43  F03B         	call	_Lcd_Cmd
 16905                           
 16906                           ;lcd.h: 70: Lcd_Cmd(1);
 16907  00756C  0E01               	movlw	1
 16908  00756E  EC43  F03B         	call	_Lcd_Cmd
 16909  007572  0012               	return		;funcret
 16910  007574  FFFF               	dw	65535	; errata NOP
 16911  007576                     __end_of_Lcd_Clear:
 16912                           	opt stack 0
 16913                           tosu	equ	0xFFF
 16914                           tosh	equ	0xFFE
 16915                           tosl	equ	0xFFD
 16916                           pclath	equ	0xFFA
 16917                           tblptru	equ	0xFF8
 16918                           tblptrh	equ	0xFF7
 16919                           tblptrl	equ	0xFF6
 16920                           tablat	equ	0xFF5
 16921                           prodh	equ	0xFF4
 16922                           prodl	equ	0xFF3
 16923                           intcon	equ	0xFF2
 16924                           indf0	equ	0xFEF
 16925                           postinc0	equ	0xFEE
 16926                           fsr0h	equ	0xFEA
 16927                           fsr0l	equ	0xFE9
 16928                           wreg	equ	0xFE8
 16929                           postdec1	equ	0xFE5
 16930                           fsr1l	equ	0xFE1
 16931                           indf2	equ	0xFDF
 16932                           postinc2	equ	0xFDE
 16933                           postdec2	equ	0xFDD
 16934                           fsr2h	equ	0xFDA
 16935                           fsr2l	equ	0xFD9
 16936                           status	equ	0xFD8
 16937                           
 16938 ;; *************** function _Lcd_Cmd *****************
 16939 ;; Defined at:
 16940 ;;		line 60 in file "lcd.h"
 16941 ;; Parameters:    Size  Location     Type
 16942 ;;  a               1    wreg     unsigned char 
 16943 ;; Auto vars:     Size  Location     Type
 16944 ;;  a               1    2[BANK0 ] unsigned char 
 16945 ;; Return value:  Size  Location     Type
 16946 ;;                  1    wreg      void 
 16947 ;; Registers used:
 16948 ;;		wreg, status,2, cstack
 16949 ;; Tracked objects:
 16950 ;;		On entry : 0/0
 16951 ;;		On exit  : 0/0
 16952 ;;		Unchanged: 0/0
 16953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16954 ;;      Params:         0       0       0       0       0       0       0
 16955 ;;      Locals:         0       1       0       0       0       0       0
 16956 ;;      Temps:          0       1       0       0       0       0       0
 16957 ;;      Totals:         0       2       0       0       0       0       0
 16958 ;;Total ram usage:        2 bytes
 16959 ;; Hardware stack levels used:    1
 16960 ;; Hardware stack levels required when called:    7
 16961 ;; This function calls:
 16962 ;;		_Lcd_Port
 16963 ;; This function is called by:
 16964 ;;		_Lcd_Init
 16965 ;;		_Lcd_Clear
 16966 ;;		_Lcd_Set_Cursor
 16967 ;;		_criarCaracteresCGRAM
 16968 ;; This function uses a non-reentrant model
 16969 ;;
 16970                           
 16971                           	psect	text66
 16972  007686                     __ptext66:
 16973                           	opt stack 0
 16974  007686                     _Lcd_Cmd:
 16975                           	opt stack 0
 16976  007686  FFFF               	dw	65535	; assembler added errata NOP
 16977                           
 16978                           ;incstack = 0
 16979                           ;Lcd_Cmd@a stored from wreg
 16980  007688  0100               	movlb	0	; () banked
 16981  00768A  6F82               	movwf	Lcd_Cmd@a& (0+255),b
 16982                           
 16983                           ;lcd.h: 61: PORTDbits.RD1 = 0;
 16984  00768C  9283               	bcf	3971,1,c	;volatile
 16985                           
 16986                           ;lcd.h: 62: Lcd_Port(a);
 16987  00768E  0100               	movlb	0	; () banked
 16988  007690  5182               	movf	Lcd_Cmd@a& (0+255),w,b
 16989  007692  EC76  F03D         	call	_Lcd_Port
 16990                           
 16991                           ;lcd.h: 63: PORTDbits.RD0 = 1;
 16992  007696  8083               	bsf	3971,0,c	;volatile
 16993                           
 16994                           ;lcd.h: 64: _delay((unsigned long)((15)*(8000000/4000.0)));
 16995  007698  0E1E               	movlw	30
 16996  00769A  0100               	movlb	0	; () banked
 16997  00769C  6F81               	movwf	??_Lcd_Cmd& (0+255),b
 16998  00769E  0E3C               	movlw	60
 16999  0076A0                     u8847:
 17000  0076A0  FFFF               	dw	65535	; errata NOP
 17001  0076A2  2EE8               	decfsz	wreg,f,c
 17002  0076A4  D7FD               	bra	u8847
 17003  0076A6  2F81               	decfsz	??_Lcd_Cmd& (0+255),f,b
 17004  0076A8  D7FB               	bra	u8847
 17005  0076AA  F000               	nop	
 17006                           
 17007                           ;lcd.h: 65: PORTDbits.RD0 = 0;
 17008  0076AC  9083               	bcf	3971,0,c	;volatile
 17009  0076AE  0012               	return		;funcret
 17010  0076B0  FFFF               	dw	65535	; errata NOP
 17011  0076B2                     __end_of_Lcd_Cmd:
 17012                           	opt stack 0
 17013                           tosu	equ	0xFFF
 17014                           tosh	equ	0xFFE
 17015                           tosl	equ	0xFFD
 17016                           pclath	equ	0xFFA
 17017                           tblptru	equ	0xFF8
 17018                           tblptrh	equ	0xFF7
 17019                           tblptrl	equ	0xFF6
 17020                           tablat	equ	0xFF5
 17021                           prodh	equ	0xFF4
 17022                           prodl	equ	0xFF3
 17023                           intcon	equ	0xFF2
 17024                           indf0	equ	0xFEF
 17025                           postinc0	equ	0xFEE
 17026                           fsr0h	equ	0xFEA
 17027                           fsr0l	equ	0xFE9
 17028                           wreg	equ	0xFE8
 17029                           postdec1	equ	0xFE5
 17030                           fsr1l	equ	0xFE1
 17031                           indf2	equ	0xFDF
 17032                           postinc2	equ	0xFDE
 17033                           postdec2	equ	0xFDD
 17034                           fsr2h	equ	0xFDA
 17035                           fsr2l	equ	0xFD9
 17036                           status	equ	0xFD8
 17037                           
 17038 ;; *************** function _Lcd_Port *****************
 17039 ;; Defined at:
 17040 ;;		line 38 in file "lcd.h"
 17041 ;; Parameters:    Size  Location     Type
 17042 ;;  a               1    wreg     unsigned char 
 17043 ;; Auto vars:     Size  Location     Type
 17044 ;;  a               1    0[BANK0 ] unsigned char 
 17045 ;; Return value:  Size  Location     Type
 17046 ;;                  1    wreg      void 
 17047 ;; Registers used:
 17048 ;;		wreg
 17049 ;; Tracked objects:
 17050 ;;		On entry : 0/0
 17051 ;;		On exit  : 0/0
 17052 ;;		Unchanged: 0/0
 17053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17054 ;;      Params:         0       0       0       0       0       0       0
 17055 ;;      Locals:         0       1       0       0       0       0       0
 17056 ;;      Temps:          0       0       0       0       0       0       0
 17057 ;;      Totals:         0       1       0       0       0       0       0
 17058 ;;Total ram usage:        1 bytes
 17059 ;; Hardware stack levels used:    1
 17060 ;; Hardware stack levels required when called:    6
 17061 ;; This function calls:
 17062 ;;		Nothing
 17063 ;; This function is called by:
 17064 ;;		_Lcd_Init
 17065 ;;		_Lcd_Cmd
 17066 ;;		_Lcd_Write_Char
 17067 ;; This function uses a non-reentrant model
 17068 ;;
 17069                           
 17070                           	psect	text67
 17071  007AEC                     __ptext67:
 17072                           	opt stack 0
 17073  007AEC                     _Lcd_Port:
 17074                           	opt stack 0
 17075  007AEC  FFFF               	dw	65535	; assembler added errata NOP
 17076                           
 17077                           ;incstack = 0
 17078                           ;Lcd_Port@a stored from wreg
 17079  007AEE  0100               	movlb	0	; () banked
 17080  007AF0  6F80               	movwf	Lcd_Port@a& (0+255),b
 17081                           
 17082                           ;lcd.h: 39: if (a & 1)
 17083  007AF2  0100               	movlb	0	; () banked
 17084  007AF4  A180               	btfss	Lcd_Port@a& (0+255),0,b
 17085  007AF6  D002               	goto	l626
 17086                           
 17087                           ; BSR set to: 0
 17088                           ;lcd.h: 40: PORTDbits.RD2 = 1;
 17089  007AF8  8483               	bsf	3971,2,c	;volatile
 17090  007AFA  D002               	goto	l627
 17091  007AFC                     l626:
 17092  007AFC  FFFF               	dw	65535	; assembler added errata NOP
 17093                           
 17094                           ; BSR set to: 0
 17095                           ;lcd.h: 41: else
 17096                           ;lcd.h: 42: PORTDbits.RD2 = 0;
 17097  007AFE  9483               	bcf	3971,2,c	;volatile
 17098  007B00                     l627:
 17099  007B00  FFFF               	dw	65535	; assembler added errata NOP
 17100                           
 17101                           ; BSR set to: 0
 17102                           ;lcd.h: 44: if (a & 2)
 17103                           
 17104                           ; BSR set to: 0
 17105  007B02  A380               	btfss	Lcd_Port@a& (0+255),1,b
 17106  007B04  D002               	goto	l628
 17107                           
 17108                           ; BSR set to: 0
 17109                           ;lcd.h: 45: PORTDbits.RD3 = 1;
 17110  007B06  8683               	bsf	3971,3,c	;volatile
 17111  007B08  D002               	goto	l629
 17112  007B0A                     l628:
 17113  007B0A  FFFF               	dw	65535	; assembler added errata NOP
 17114                           
 17115                           ; BSR set to: 0
 17116                           ;lcd.h: 46: else
 17117                           ;lcd.h: 47: PORTDbits.RD3 = 0;
 17118  007B0C  9683               	bcf	3971,3,c	;volatile
 17119  007B0E                     l629:
 17120  007B0E  FFFF               	dw	65535	; assembler added errata NOP
 17121                           
 17122                           ; BSR set to: 0
 17123                           ;lcd.h: 49: if (a & 4)
 17124                           
 17125                           ; BSR set to: 0
 17126  007B10  A580               	btfss	Lcd_Port@a& (0+255),2,b
 17127  007B12  D002               	goto	l630
 17128                           
 17129                           ; BSR set to: 0
 17130                           ;lcd.h: 50: PORTDbits.RD4 = 1;
 17131  007B14  8883               	bsf	3971,4,c	;volatile
 17132  007B16  D002               	goto	l631
 17133  007B18                     l630:
 17134  007B18  FFFF               	dw	65535	; assembler added errata NOP
 17135                           
 17136                           ; BSR set to: 0
 17137                           ;lcd.h: 51: else
 17138                           ;lcd.h: 52: PORTDbits.RD4 = 0;
 17139  007B1A  9883               	bcf	3971,4,c	;volatile
 17140  007B1C                     l631:
 17141  007B1C  FFFF               	dw	65535	; assembler added errata NOP
 17142                           
 17143                           ; BSR set to: 0
 17144                           ;lcd.h: 54: if (a & 8)
 17145                           
 17146                           ; BSR set to: 0
 17147  007B1E  A780               	btfss	Lcd_Port@a& (0+255),3,b
 17148  007B20  D002               	goto	l632
 17149                           
 17150                           ; BSR set to: 0
 17151                           ;lcd.h: 55: PORTDbits.RD5 = 1;
 17152  007B22  8A83               	bsf	3971,5,c	;volatile
 17153  007B24  D002               	goto	l633
 17154  007B26                     l632:
 17155  007B26  FFFF               	dw	65535	; assembler added errata NOP
 17156                           
 17157                           ; BSR set to: 0
 17158                           ;lcd.h: 56: else
 17159                           ;lcd.h: 57: PORTDbits.RD5 = 0;
 17160  007B28  9A83               	bcf	3971,5,c	;volatile
 17161  007B2A                     l633:
 17162  007B2A  FFFF               	dw	65535	; assembler added errata NOP
 17163                           
 17164                           ; BSR set to: 0
 17165                           
 17166                           ; BSR set to: 0
 17167  007B2C  0012               	return		;funcret
 17168  007B2E  FFFF               	dw	65535	; errata NOP
 17169  007B30                     __end_of_Lcd_Port:
 17170                           	opt stack 0
 17171                           tosu	equ	0xFFF
 17172                           tosh	equ	0xFFE
 17173                           tosl	equ	0xFFD
 17174                           pclath	equ	0xFFA
 17175                           tblptru	equ	0xFF8
 17176                           tblptrh	equ	0xFF7
 17177                           tblptrl	equ	0xFF6
 17178                           tablat	equ	0xFF5
 17179                           prodh	equ	0xFF4
 17180                           prodl	equ	0xFF3
 17181                           intcon	equ	0xFF2
 17182                           indf0	equ	0xFEF
 17183                           postinc0	equ	0xFEE
 17184                           fsr0h	equ	0xFEA
 17185                           fsr0l	equ	0xFE9
 17186                           wreg	equ	0xFE8
 17187                           postdec1	equ	0xFE5
 17188                           fsr1l	equ	0xFE1
 17189                           indf2	equ	0xFDF
 17190                           postinc2	equ	0xFDE
 17191                           postdec2	equ	0xFDD
 17192                           fsr2h	equ	0xFDA
 17193                           fsr2l	equ	0xFD9
 17194                           status	equ	0xFD8
 17195                           
 17196 ;; *************** function _I2C_Master_Init *****************
 17197 ;; Defined at:
 17198 ;;		line 13 in file "I2C.c"
 17199 ;; Parameters:    Size  Location     Type
 17200 ;;  c               4   13[BANK0 ] const unsigned long 
 17201 ;; Auto vars:     Size  Location     Type
 17202 ;;		None
 17203 ;; Return value:  Size  Location     Type
 17204 ;;                  1    wreg      void 
 17205 ;; Registers used:
 17206 ;;		wreg, status,2, status,0, cstack
 17207 ;; Tracked objects:
 17208 ;;		On entry : 0/0
 17209 ;;		On exit  : 0/0
 17210 ;;		Unchanged: 0/0
 17211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17212 ;;      Params:         0       4       0       0       0       0       0
 17213 ;;      Locals:         0       0       0       0       0       0       0
 17214 ;;      Temps:          0       4       0       0       0       0       0
 17215 ;;      Totals:         0       8       0       0       0       0       0
 17216 ;;Total ram usage:        8 bytes
 17217 ;; Hardware stack levels used:    1
 17218 ;; Hardware stack levels required when called:    7
 17219 ;; This function calls:
 17220 ;;		___lldiv
 17221 ;; This function is called by:
 17222 ;;		_main
 17223 ;; This function uses a non-reentrant model
 17224 ;;
 17225                           
 17226                           	psect	text68
 17227  003D50                     __ptext68:
 17228                           	opt stack 0
 17229  003D50                     _I2C_Master_Init:
 17230                           	opt stack 0
 17231  003D50  FFFF               	dw	65535	; assembler added errata NOP
 17232                           
 17233                           ;I2C.c: 14: SSPCON1 = 0b00101000;
 17234                           
 17235                           ; BSR set to: 0
 17236                           ;incstack = 0
 17237  003D52  0E28               	movlw	40
 17238  003D54  6EC6               	movwf	4038,c	;volatile
 17239                           
 17240                           ;I2C.c: 15: SSPCON2 = 0;
 17241  003D56  0E00               	movlw	0
 17242  003D58  6EC5               	movwf	4037,c	;volatile
 17243                           
 17244                           ;I2C.c: 16: SSPADD = (8000000 / (4 * c)) - 1;
 17245  003D5A  0E00               	movlw	0
 17246  003D5C  0100               	movlb	0	; () banked
 17247  003D5E  6F80               	movwf	___lldiv@dividend& (0+255),b
 17248  003D60  0E12               	movlw	18
 17249  003D62  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 17250  003D64  0E7A               	movlw	122
 17251  003D66  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 17252  003D68  0E00               	movlw	0
 17253  003D6A  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 17254  003D6C  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 17255  003D70  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 17256  003D74  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 17257  003D78  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 17258  003D7C  0E02               	movlw	2
 17259  003D7E                     u8305:
 17260  003D7E  FFFF               	dw	65535	; assembler added errata NOP
 17261  003D80  90D8               	bcf	status,0,c
 17262  003D82  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 17263  003D84  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 17264  003D86  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 17265  003D88  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 17266  003D8A  2EE8               	decfsz	wreg,f,c
 17267  003D8C  D7F8               	goto	u8305
 17268  003D8E  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 17269  003D92  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 17270  003D96  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 17271  003D9A  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 17272  003D9E  EC9F  F01C         	call	___lldiv	;wreg free
 17273  003DA2  0100               	movlb	0	; () banked
 17274  003DA4  0580               	decf	?___lldiv& (0+255),w,b
 17275  003DA6  6EC8               	movwf	4040,c	;volatile
 17276                           
 17277                           ; BSR set to: 0
 17278                           ;I2C.c: 17: SSPSTAT = 0;
 17279  003DA8  0E00               	movlw	0
 17280  003DAA  6EC7               	movwf	4039,c	;volatile
 17281                           
 17282                           ; BSR set to: 0
 17283                           ;I2C.c: 18: TRISCbits.RC3 = 1;
 17284  003DAC  8694               	bsf	3988,3,c	;volatile
 17285                           
 17286                           ; BSR set to: 0
 17287                           ;I2C.c: 19: TRISCbits.RC4 = 1;
 17288  003DAE  8894               	bsf	3988,4,c	;volatile
 17289                           
 17290                           ; BSR set to: 0
 17291  003DB0  0012               	return		;funcret
 17292  003DB2  FFFF               	dw	65535	; errata NOP
 17293  003DB4                     __end_of_I2C_Master_Init:
 17294                           	opt stack 0
 17295                           tosu	equ	0xFFF
 17296                           tosh	equ	0xFFE
 17297                           tosl	equ	0xFFD
 17298                           pclath	equ	0xFFA
 17299                           tblptru	equ	0xFF8
 17300                           tblptrh	equ	0xFF7
 17301                           tblptrl	equ	0xFF6
 17302                           tablat	equ	0xFF5
 17303                           prodh	equ	0xFF4
 17304                           prodl	equ	0xFF3
 17305                           intcon	equ	0xFF2
 17306                           indf0	equ	0xFEF
 17307                           postinc0	equ	0xFEE
 17308                           fsr0h	equ	0xFEA
 17309                           fsr0l	equ	0xFE9
 17310                           wreg	equ	0xFE8
 17311                           postdec1	equ	0xFE5
 17312                           fsr1l	equ	0xFE1
 17313                           indf2	equ	0xFDF
 17314                           postinc2	equ	0xFDE
 17315                           postdec2	equ	0xFDD
 17316                           fsr2h	equ	0xFDA
 17317                           fsr2l	equ	0xFD9
 17318                           status	equ	0xFD8
 17319                           
 17320 ;; *************** function ___lldiv *****************
 17321 ;; Defined at:
 17322 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 17323 ;; Parameters:    Size  Location     Type
 17324 ;;  dividend        4    0[BANK0 ] unsigned long 
 17325 ;;  divisor         4    4[BANK0 ] unsigned long 
 17326 ;; Auto vars:     Size  Location     Type
 17327 ;;  quotient        4    8[BANK0 ] unsigned long 
 17328 ;;  counter         1   12[BANK0 ] unsigned char 
 17329 ;; Return value:  Size  Location     Type
 17330 ;;                  4    0[BANK0 ] unsigned long 
 17331 ;; Registers used:
 17332 ;;		wreg, status,2, status,0
 17333 ;; Tracked objects:
 17334 ;;		On entry : 0/0
 17335 ;;		On exit  : 0/0
 17336 ;;		Unchanged: 0/0
 17337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17338 ;;      Params:         0       8       0       0       0       0       0
 17339 ;;      Locals:         0       5       0       0       0       0       0
 17340 ;;      Temps:          0       0       0       0       0       0       0
 17341 ;;      Totals:         0      13       0       0       0       0       0
 17342 ;;Total ram usage:       13 bytes
 17343 ;; Hardware stack levels used:    1
 17344 ;; Hardware stack levels required when called:    6
 17345 ;; This function calls:
 17346 ;;		Nothing
 17347 ;; This function is called by:
 17348 ;;		_I2C_Master_Init
 17349 ;; This function uses a non-reentrant model
 17350 ;;
 17351                           
 17352                           	psect	text69
 17353  00393E                     __ptext69:
 17354                           	opt stack 0
 17355  00393E                     ___lldiv:
 17356                           	opt stack 0
 17357  00393E  FFFF               	dw	65535	; assembler added errata NOP
 17358                           
 17359                           ; BSR set to: 0
 17360                           ;incstack = 0
 17361  003940  0E00               	movlw	0
 17362  003942  0100               	movlb	0	; () banked
 17363  003944  6F88               	movwf	___lldiv@quotient& (0+255),b
 17364  003946  0E00               	movlw	0
 17365  003948  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 17366  00394A  0E00               	movlw	0
 17367  00394C  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 17368  00394E  0E00               	movlw	0
 17369  003950  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 17370                           
 17371                           ; BSR set to: 0
 17372  003952  5184               	movf	___lldiv@divisor& (0+255),w,b
 17373  003954  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 17374  003956  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 17375  003958  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 17376  00395A  B4D8               	btfsc	status,2,c
 17377  00395C  D02E               	goto	l1472
 17378                           
 17379                           ; BSR set to: 0
 17380  00395E  0E01               	movlw	1
 17381  003960  6F8C               	movwf	___lldiv@counter& (0+255),b
 17382  003962  D007               	goto	l1467
 17383  003964  FFFF               	dw	65535	; assembler added errata NOP
 17384                           
 17385                           ; BSR set to: 0
 17386                           
 17387                           ; BSR set to: 0
 17388  003966  90D8               	bcf	status,0,c
 17389  003968  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 17390  00396A  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 17391  00396C  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 17392  00396E  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 17393  003970  2B8C               	incf	___lldiv@counter& (0+255),f,b
 17394  003972                     l1467:
 17395  003972  FFFF               	dw	65535	; assembler added errata NOP
 17396                           
 17397                           ; BSR set to: 0
 17398                           
 17399                           ; BSR set to: 0
 17400  003974  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 17401  003976  D7F6               	goto	l1468
 17402  003978                     u6650:
 17403  003978  FFFF               	dw	65535	; assembler added errata NOP
 17404                           
 17405                           ; BSR set to: 0
 17406                           
 17407                           ; BSR set to: 0
 17408                           
 17409                           ; BSR set to: 0
 17410  00397A  90D8               	bcf	status,0,c
 17411  00397C  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 17412  00397E  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 17413  003980  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 17414  003982  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 17415                           
 17416                           ; BSR set to: 0
 17417  003984  5184               	movf	___lldiv@divisor& (0+255),w,b
 17418  003986  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 17419  003988  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 17420  00398A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 17421  00398C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 17422  00398E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 17423  003990  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 17424  003992  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 17425  003994  A0D8               	btfss	status,0,c
 17426  003996  D009               	goto	l1471
 17427                           
 17428                           ; BSR set to: 0
 17429  003998  5184               	movf	___lldiv@divisor& (0+255),w,b
 17430  00399A  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 17431  00399C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 17432  00399E  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 17433  0039A0  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 17434  0039A2  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 17435  0039A4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 17436  0039A6  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 17437                           
 17438                           ; BSR set to: 0
 17439  0039A8  8188               	bsf	___lldiv@quotient& (0+255),0,b
 17440  0039AA                     l1471:
 17441  0039AA  FFFF               	dw	65535	; assembler added errata NOP
 17442                           
 17443                           ; BSR set to: 0
 17444                           
 17445                           ; BSR set to: 0
 17446  0039AC  90D8               	bcf	status,0,c
 17447  0039AE  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 17448  0039B0  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 17449  0039B2  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 17450  0039B4  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 17451                           
 17452                           ; BSR set to: 0
 17453  0039B6  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 17454  0039B8  D7DF               	goto	u6650
 17455  0039BA                     l1472:
 17456  0039BA  FFFF               	dw	65535	; assembler added errata NOP
 17457                           
 17458                           ; BSR set to: 0
 17459                           
 17460                           ; BSR set to: 0
 17461  0039BC  C088  F080         	movff	___lldiv@quotient,?___lldiv
 17462  0039C0  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 17463  0039C4  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 17464  0039C8  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 17465                           
 17466                           ; BSR set to: 0
 17467  0039CC  0012               	return		;funcret
 17468  0039CE  FFFF               	dw	65535	; errata NOP
 17469  0039D0                     __end_of___lldiv:
 17470                           	opt stack 0
 17471                           tosu	equ	0xFFF
 17472                           tosh	equ	0xFFE
 17473                           tosl	equ	0xFFD
 17474                           pclath	equ	0xFFA
 17475                           tblptru	equ	0xFF8
 17476                           tblptrh	equ	0xFF7
 17477                           tblptrl	equ	0xFF6
 17478                           tablat	equ	0xFF5
 17479                           prodh	equ	0xFF4
 17480                           prodl	equ	0xFF3
 17481                           intcon	equ	0xFF2
 17482                           indf0	equ	0xFEF
 17483                           postinc0	equ	0xFEE
 17484                           fsr0h	equ	0xFEA
 17485                           fsr0l	equ	0xFE9
 17486                           wreg	equ	0xFE8
 17487                           postdec1	equ	0xFE5
 17488                           fsr1l	equ	0xFE1
 17489                           indf2	equ	0xFDF
 17490                           postinc2	equ	0xFDE
 17491                           postdec2	equ	0xFDD
 17492                           fsr2h	equ	0xFDA
 17493                           fsr2l	equ	0xFD9
 17494                           status	equ	0xFD8
 17495                           
 17496 ;; *************** function _TIMER *****************
 17497 ;; Defined at:
 17498 ;;		line 42 in file "Main.c"
 17499 ;; Parameters:    Size  Location     Type
 17500 ;;		None
 17501 ;; Auto vars:     Size  Location     Type
 17502 ;;  c               1   66[COMRAM] unsigned char 
 17503 ;; Return value:  Size  Location     Type
 17504 ;;                  1    wreg      void 
 17505 ;; Registers used:
 17506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17507 ;; Tracked objects:
 17508 ;;		On entry : 0/0
 17509 ;;		On exit  : 0/0
 17510 ;;		Unchanged: 0/0
 17511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17512 ;;      Params:         0       0       0       0       0       0       0
 17513 ;;      Locals:         1       0       0       0       0       0       0
 17514 ;;      Temps:         18       0       0       0       0       0       0
 17515 ;;      Totals:        19       0       0       0       0       0       0
 17516 ;;Total ram usage:       19 bytes
 17517 ;; Hardware stack levels used:    1
 17518 ;; Hardware stack levels required when called:    5
 17519 ;; This function calls:
 17520 ;;		_lerTransdutor
 17521 ;;		_readButtons
 17522 ;;		_timer
 17523 ;; This function is called by:
 17524 ;;		Interrupt level 2
 17525 ;; This function uses a non-reentrant model
 17526 ;;
 17527                           
 17528                           	psect	intcode
 17529  000008                     __pintcode:
 17530                           	opt stack 0
 17531  000008                     _TIMER:
 17532                           	opt stack 0
 17533  000008  FFFF               	dw	65535	; assembler added errata NOP
 17534                           
 17535                           ; BSR set to: 0
 17536                           ;incstack = 0
 17537  00000A  827C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17538  00000C  CFFA F031          	movff	pclath,??_TIMER
 17539  000010  CFFB F032          	movff	pclatu,??_TIMER+1
 17540  000014  CFE9 F033          	movff	fsr0l,??_TIMER+2
 17541  000018  CFEA F034          	movff	fsr0h,??_TIMER+3
 17542  00001C  CFE1 F035          	movff	fsr1l,??_TIMER+4
 17543  000020  CFE2 F036          	movff	fsr1h,??_TIMER+5
 17544  000024  CFD9 F037          	movff	fsr2l,??_TIMER+6
 17545  000028  CFDA F038          	movff	fsr2h,??_TIMER+7
 17546  00002C  CFF3 F039          	movff	prodl,??_TIMER+8
 17547  000030  CFF4 F03A          	movff	prodh,??_TIMER+9
 17548  000034  CFF6 F03B          	movff	tblptrl,??_TIMER+10
 17549  000038  CFF7 F03C          	movff	tblptrh,??_TIMER+11
 17550  00003C  CFF8 F03D          	movff	tblptru,??_TIMER+12
 17551  000040  CFF5 F03E          	movff	tablat,??_TIMER+13
 17552  000044  C07C  F03F         	movff	btemp,??_TIMER+14
 17553  000048  C07D  F040         	movff	btemp+1,??_TIMER+15
 17554  00004C  C07E  F041         	movff	btemp+2,??_TIMER+16
 17555  000050  C07F  F042         	movff	btemp+3,??_TIMER+17
 17556                           
 17557                           ;Main.c: 43: if (TMR0IF) {
 17558  000054  A4F2               	btfss	intcon,2,c	;volatile
 17559  000056  D01D               	goto	i2l885
 17560                           
 17561                           ;Main.c: 44: TMR0IF = 0x00;
 17562  000058  94F2               	bcf	intcon,2,c	;volatile
 17563                           
 17564                           ;Main.c: 45: TMR0H = 0x3C;
 17565  00005A  0E3C               	movlw	60
 17566  00005C  6ED7               	movwf	4055,c	;volatile
 17567                           
 17568                           ;Main.c: 46: TMR0L = 0xB0;
 17569  00005E  0EB0               	movlw	176
 17570  000060  6ED6               	movwf	4054,c	;volatile
 17571                           
 17572                           ;Main.c: 48: blinkk = ~blinkk;
 17573  000062  B079               	btfsc	_blinkk/(0+8),_blinkk& (0+7),c
 17574  000064  D002               	goto	i2u853_40
 17575  000066  8079               	bsf	_blinkk/(0+8),_blinkk& (0+7),c
 17576  000068  D002               	goto	i2u854_45
 17577  00006A                     i2u853_40:
 17578  00006A  FFFF               	dw	65535	; assembler added errata NOP
 17579  00006C  9079               	bcf	_blinkk/(0+8),_blinkk& (0+7),c
 17580  00006E                     i2u854_45:
 17581  00006E  FFFF               	dw	65535	; assembler added errata NOP
 17582                           
 17583                           ;Main.c: 49: base_sec++;
 17584  000070  2A71               	incf	_base_sec,f,c
 17585                           
 17586                           ;Main.c: 50: intervalo_leitura_adc++;
 17587  000072  2A6F               	incf	_intervalo_leitura_adc,f,c
 17588                           
 17589                           ;Main.c: 52: lerTransdutor();
 17590  000074  ECBB  F00E         	call	_lerTransdutor	;wreg free
 17591                           
 17592                           ;Main.c: 53: readButtons();
 17593  000078  ECF5  F01D         	call	_readButtons	;wreg free
 17594                           
 17595                           ;Main.c: 55: if (base_sec > 9) {
 17596  00007C  0E09               	movlw	9
 17597  00007E  6471               	cpfsgt	_base_sec,c
 17598  000080  D008               	goto	i2l885
 17599                           
 17600                           ;Main.c: 56: base_sec = 0;
 17601  000082  0E00               	movlw	0
 17602  000084  6E71               	movwf	_base_sec,c
 17603                           
 17604                           ;Main.c: 57: timer();
 17605  000086  EC2F  F015         	call	_timer	;wreg free
 17606                           
 17607                           ;Main.c: 58: if (RCSTAbits.OERR) {
 17608  00008A  A2AB               	btfss	4011,1,c	;volatile
 17609  00008C  D002               	goto	i2l885
 17610                           
 17611                           ;Main.c: 59: RCSTAbits.CREN = 0;
 17612  00008E  98AB               	bcf	4011,4,c	;volatile
 17613                           
 17614                           ;Main.c: 60: RCSTAbits.CREN = 1;
 17615  000090  88AB               	bsf	4011,4,c	;volatile
 17616  000092                     i2l885:
 17617  000092  FFFF               	dw	65535	; assembler added errata NOP
 17618                           
 17619                           ;Main.c: 61: }
 17620                           ;Main.c: 62: }
 17621                           ;Main.c: 63: }
 17622                           ;Main.c: 64: if (RCIF) {
 17623  000094  AA9E               	btfss	3998,5,c	;volatile
 17624  000096  D01B               	goto	i2l888
 17625                           
 17626                           ;Main.c: 65: char c = RCREG;
 17627  000098  CFAE F043          	movff	4014,TIMER@c	;volatile
 17628                           
 17629                           ;Main.c: 66: if (c != '\n' && c != '\r') {
 17630  00009C  0E0A               	movlw	10
 17631  00009E  1843               	xorwf	TIMER@c,w,c
 17632  0000A0  B4D8               	btfsc	status,2,c
 17633  0000A2  D00F               	goto	i2l887
 17634  0000A4  0E0D               	movlw	13
 17635  0000A6  1843               	xorwf	TIMER@c,w,c
 17636  0000A8  B4D8               	btfsc	status,2,c
 17637  0000AA  D00B               	goto	i2l887
 17638                           
 17639                           ;Main.c: 67: bufferSerial[cbf++] = c;
 17640  0000AC  5064               	movf	_cbf,w,c
 17641  0000AE  0D01               	mullw	1
 17642  0000B0  0E14               	movlw	low _bufferSerial
 17643  0000B2  24F3               	addwf	prodl,w,c
 17644  0000B4  6ED9               	movwf	fsr2l,c
 17645  0000B6  0E01               	movlw	high _bufferSerial
 17646  0000B8  20F4               	addwfc	prodh,w,c
 17647  0000BA  6EDA               	movwf	fsr2h,c
 17648  0000BC  C043  FFDF         	movff	TIMER@c,indf2
 17649  0000C0  2A64               	incf	_cbf,f,c
 17650  0000C2                     i2l887:
 17651  0000C2  FFFF               	dw	65535	; assembler added errata NOP
 17652                           
 17653                           ;Main.c: 68: }
 17654                           ;Main.c: 69: if (cbf >= 60) cbf = 0;
 17655  0000C4  0E3B               	movlw	59
 17656  0000C6  6464               	cpfsgt	_cbf,c
 17657  0000C8  D002               	goto	i2l888
 17658  0000CA  0E00               	movlw	0
 17659  0000CC  6E64               	movwf	_cbf,c
 17660  0000CE                     i2l888:
 17661  0000CE  FFFF               	dw	65535	; assembler added errata NOP
 17662  0000D0  C042  F07F         	movff	??_TIMER+17,btemp+3
 17663  0000D4  C041  F07E         	movff	??_TIMER+16,btemp+2
 17664  0000D8  C040  F07D         	movff	??_TIMER+15,btemp+1
 17665  0000DC  C03F  F07C         	movff	??_TIMER+14,btemp
 17666  0000E0  C03E  FFF5         	movff	??_TIMER+13,tablat
 17667  0000E4  C03D  FFF8         	movff	??_TIMER+12,tblptru
 17668  0000E8  C03C  FFF7         	movff	??_TIMER+11,tblptrh
 17669  0000EC  C03B  FFF6         	movff	??_TIMER+10,tblptrl
 17670  0000F0  C03A  FFF4         	movff	??_TIMER+9,prodh
 17671  0000F4  C039  FFF3         	movff	??_TIMER+8,prodl
 17672  0000F8  C038  FFDA         	movff	??_TIMER+7,fsr2h
 17673  0000FC  C037  FFD9         	movff	??_TIMER+6,fsr2l
 17674  000100  C036  FFE2         	movff	??_TIMER+5,fsr1h
 17675  000104  C035  FFE1         	movff	??_TIMER+4,fsr1l
 17676  000108  C034  FFEA         	movff	??_TIMER+3,fsr0h
 17677  00010C  C033  FFE9         	movff	??_TIMER+2,fsr0l
 17678  000110  C032  FFFB         	movff	??_TIMER+1,pclatu
 17679  000114  C031  FFFA         	movff	??_TIMER,pclath
 17680  000118  927C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17681  00011A  0011               	retfie		f
 17682  00011C  FFFF               	dw	65535	; errata NOP
 17683  00011E                     __end_of_TIMER:
 17684                           	opt stack 0
 17685                           tosu	equ	0xFFF
 17686                           tosh	equ	0xFFE
 17687                           tosl	equ	0xFFD
 17688                           pclatu	equ	0xFFB
 17689                           pclath	equ	0xFFA
 17690                           tblptru	equ	0xFF8
 17691                           tblptrh	equ	0xFF7
 17692                           tblptrl	equ	0xFF6
 17693                           tablat	equ	0xFF5
 17694                           prodh	equ	0xFF4
 17695                           prodl	equ	0xFF3
 17696                           intcon	equ	0xFF2
 17697                           indf0	equ	0xFEF
 17698                           postinc0	equ	0xFEE
 17699                           fsr0h	equ	0xFEA
 17700                           fsr0l	equ	0xFE9
 17701                           wreg	equ	0xFE8
 17702                           postdec1	equ	0xFE5
 17703                           fsr1h	equ	0xFE2
 17704                           fsr1l	equ	0xFE1
 17705                           indf2	equ	0xFDF
 17706                           postinc2	equ	0xFDE
 17707                           postdec2	equ	0xFDD
 17708                           fsr2h	equ	0xFDA
 17709                           fsr2l	equ	0xFD9
 17710                           status	equ	0xFD8
 17711                           
 17712 ;; *************** function _timer *****************
 17713 ;; Defined at:
 17714 ;;		line 9 in file "temporizador.h"
 17715 ;; Parameters:    Size  Location     Type
 17716 ;;		None
 17717 ;; Auto vars:     Size  Location     Type
 17718 ;;		None
 17719 ;; Return value:  Size  Location     Type
 17720 ;;                  1    wreg      void 
 17721 ;; Registers used:
 17722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17723 ;; Tracked objects:
 17724 ;;		On entry : 0/0
 17725 ;;		On exit  : 0/0
 17726 ;;		Unchanged: 0/0
 17727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17728 ;;      Params:         0       0       0       0       0       0       0
 17729 ;;      Locals:         4       0       0       0       0       0       0
 17730 ;;      Temps:          0       0       0       0       0       0       0
 17731 ;;      Totals:         4       0       0       0       0       0       0
 17732 ;;Total ram usage:        4 bytes
 17733 ;; Hardware stack levels used:    1
 17734 ;; Hardware stack levels required when called:    4
 17735 ;; This function calls:
 17736 ;;		_writeEEPROM16_ext
 17737 ;;		i2_RTC_Init
 17738 ;;		i2_getDS1307TimeDate
 17739 ;;		i2_writeEEPROM_ext
 17740 ;; This function is called by:
 17741 ;;		_TIMER
 17742 ;; This function uses a non-reentrant model
 17743 ;;
 17744                           
 17745                           	psect	text71
 17746  002A5E                     __ptext71:
 17747                           	opt stack 0
 17748  002A5E                     _timer:
 17749                           	opt stack 0
 17750  002A5E  FFFF               	dw	65535	; assembler added errata NOP
 17751                           
 17752                           ;temporizador.h: 11: timerVerificarSinal = (timerVerificarSinal <= 0 ? 0 : --timerVerifi
      +                          carSinal);
 17753                           
 17754                           ;incstack = 0
 17755  002A60  0100               	movlb	0	; () banked
 17756  002A62  51FE               	movf	_timerVerificarSinal& (0+255),w,b
 17757  002A64  B4D8               	btfsc	status,2,c
 17758  002A66  D005               	goto	i2l594
 17759                           
 17760                           ; BSR set to: 0
 17761  002A68  07FE               	decf	_timerVerificarSinal& (0+255),f,b
 17762  002A6A  C0FE  F009         	movff	_timerVerificarSinal,_timer$1328
 17763  002A6E  6A0A               	clrf	_timer$1328+1,c
 17764  002A70  D005               	goto	i2l596
 17765  002A72                     i2l594:
 17766  002A72  FFFF               	dw	65535	; assembler added errata NOP
 17767                           
 17768                           ; BSR set to: 0
 17769                           
 17770                           ; BSR set to: 0
 17771  002A74  0E00               	movlw	0
 17772  002A76  6E0A               	movwf	_timer$1328+1,c
 17773  002A78  0E00               	movlw	0
 17774  002A7A  6E09               	movwf	_timer$1328,c
 17775  002A7C                     i2l596:
 17776  002A7C  FFFF               	dw	65535	; assembler added errata NOP
 17777                           
 17778                           ; BSR set to: 0
 17779                           
 17780                           ; BSR set to: 0
 17781  002A7E  C009  F0FE         	movff	_timer$1328,_timerVerificarSinal
 17782                           
 17783                           ;temporizador.h: 12: timerEtapaComunicacao = (timerEtapaComunicacao <= 0 ? 0 : --timerEt
      +                          apaComunicacao);
 17784  002A82  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 17785  002A84  B4D8               	btfsc	status,2,c
 17786  002A86  D005               	goto	i2l598
 17787                           
 17788                           ; BSR set to: 0
 17789  002A88  07F5               	decf	_timerEtapaComunicacao& (0+255),f,b
 17790  002A8A  C0F5  F00B         	movff	_timerEtapaComunicacao,_timer$1329
 17791  002A8E  6A0C               	clrf	_timer$1329+1,c
 17792  002A90  D005               	goto	i2l600
 17793  002A92                     i2l598:
 17794  002A92  FFFF               	dw	65535	; assembler added errata NOP
 17795                           
 17796                           ; BSR set to: 0
 17797                           
 17798                           ; BSR set to: 0
 17799  002A94  0E00               	movlw	0
 17800  002A96  6E0C               	movwf	_timer$1329+1,c
 17801  002A98  0E00               	movlw	0
 17802  002A9A  6E0B               	movwf	_timer$1329,c
 17803  002A9C                     i2l600:
 17804  002A9C  FFFF               	dw	65535	; assembler added errata NOP
 17805                           
 17806                           ; BSR set to: 0
 17807                           
 17808                           ; BSR set to: 0
 17809  002A9E  C00B  F0F5         	movff	_timer$1329,_timerEtapaComunicacao
 17810                           
 17811                           ; BSR set to: 0
 17812                           ;temporizador.h: 14: if (ajst_rtc) {
 17813  002AA2  B279               	btfsc	_ajst_rtc/(0+8),_ajst_rtc& (0+7),c
 17814  002AA4  D067               	goto	i2l607
 17815                           
 17816                           ; BSR set to: 0
 17817                           ;temporizador.h: 16: }
 17818                           ;temporizador.h: 17: timer_envio_sms++;
 17819                           
 17820                           ; BSR set to: 0
 17821                           
 17822                           ; BSR set to: 0
 17823                           ;temporizador.h: 15: return;
 17824  002AA6  2A6A               	incf	_timer_envio_sms,f,c
 17825                           
 17826                           ; BSR set to: 0
 17827                           ;temporizador.h: 18: if (timer_envio_sms > 100) {
 17828  002AA8  0E64               	movlw	100
 17829  002AAA  646A               	cpfsgt	_timer_envio_sms,c
 17830  002AAC  D002               	goto	i2l603
 17831                           
 17832                           ; BSR set to: 0
 17833                           ;temporizador.h: 19: timer_envio_sms = 100;
 17834  002AAE  0E64               	movlw	100
 17835  002AB0  6E6A               	movwf	_timer_envio_sms,c
 17836  002AB2                     i2l603:
 17837  002AB2  FFFF               	dw	65535	; assembler added errata NOP
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;temporizador.h: 20: }
 17841                           ;temporizador.h: 21: _sec++;
 17842                           
 17843                           ; BSR set to: 0
 17844  002AB4  2BF3               	incf	__sec& (0+255),f,b
 17845                           
 17846                           ; BSR set to: 0
 17847                           ;temporizador.h: 22: if (_sec > 59) {
 17848  002AB6  0E3B               	movlw	59
 17849  002AB8  65F3               	cpfsgt	__sec& (0+255),b
 17850  002ABA  D014               	goto	i2l606
 17851                           
 17852                           ; BSR set to: 0
 17853                           ;temporizador.h: 23: _sec = 0;
 17854  002ABC  0E00               	movlw	0
 17855  002ABE  6FF3               	movwf	__sec& (0+255),b
 17856                           
 17857                           ; BSR set to: 0
 17858                           ;temporizador.h: 24: _min++;
 17859  002AC0  2BF2               	incf	__min& (0+255),f,b
 17860                           
 17861                           ; BSR set to: 0
 17862                           ;temporizador.h: 25: if (_min > 59) {
 17863  002AC2  0E3B               	movlw	59
 17864  002AC4  65F2               	cpfsgt	__min& (0+255),b
 17865  002AC6  D00E               	goto	i2l606
 17866                           
 17867                           ; BSR set to: 0
 17868                           ;temporizador.h: 26: _min = 0;
 17869  002AC8  0E00               	movlw	0
 17870  002ACA  6FF2               	movwf	__min& (0+255),b
 17871                           
 17872                           ; BSR set to: 0
 17873                           ;temporizador.h: 27: _hor++;
 17874  002ACC  2BF1               	incf	__hor& (0+255),f,b
 17875                           
 17876                           ; BSR set to: 0
 17877                           ;temporizador.h: 28: if (_hor > 23) {
 17878  002ACE  0E17               	movlw	23
 17879  002AD0  65F1               	cpfsgt	__hor& (0+255),b
 17880  002AD2  D008               	goto	i2l606
 17881                           
 17882                           ; BSR set to: 0
 17883                           ;temporizador.h: 29: _hor = 0;
 17884  002AD4  0E00               	movlw	0
 17885  002AD6  6FF1               	movwf	__hor& (0+255),b
 17886                           
 17887                           ; BSR set to: 0
 17888                           ;temporizador.h: 30: dias_restante_teste++;
 17889  002AD8  2BEA               	incf	_dias_restante_teste& (0+255),f,b
 17890                           
 17891                           ; BSR set to: 0
 17892                           ;temporizador.h: 31: writeEEPROM_ext(10, dias_restante_teste);
 17893  002ADA  C0EA  F004         	movff	_dias_restante_teste,i2writeEEPROM_ext@data
 17894  002ADE  0E0A               	movlw	10
 17895  002AE0  EC9C  F03C         	call	i2_writeEEPROM_ext
 17896  002AE4                     i2l606:
 17897  002AE4  FFFF               	dw	65535	; assembler added errata NOP
 17898                           
 17899                           ;temporizador.h: 32: }
 17900                           ;temporizador.h: 33: }
 17901                           ;temporizador.h: 34: }
 17902                           ;temporizador.h: 36: if (rtc.min != _min) {
 17903  002AE6  0100               	movlb	0	; () banked
 17904  002AE8  51F2               	movf	__min& (0+255),w,b
 17905  002AEA  1874               	xorwf	_rtc+2,w,c
 17906  002AEC  B4D8               	btfsc	status,2,c
 17907  002AEE  D042               	goto	i2l607
 17908                           
 17909                           ; BSR set to: 0
 17910                           ;temporizador.h: 38: if (estacionaria_Ligada) {
 17911  002AF0  51E7               	movf	_estacionaria_Ligada& (0+255),w,b
 17912  002AF2  B4D8               	btfsc	status,2,c
 17913  002AF4  D009               	goto	i2l608
 17914                           
 17915                           ; BSR set to: 0
 17916                           ;temporizador.h: 39: horimetro++;
 17917  002AF6  4A4F               	infsnz	_horimetro,f,c
 17918  002AF8  2A50               	incf	_horimetro+1,f,c
 17919                           
 17920                           ; BSR set to: 0
 17921                           ;temporizador.h: 40: writeEEPROM16_ext(8, horimetro);
 17922  002AFA  C04F  F006         	movff	_horimetro,writeEEPROM16_ext@data
 17923  002AFE  C050  F007         	movff	_horimetro+1,writeEEPROM16_ext@data+1
 17924  002B02  0E08               	movlw	8
 17925  002B04  ECF6  F03A         	call	_writeEEPROM16_ext
 17926  002B08                     i2l608:
 17927  002B08  FFFF               	dw	65535	; assembler added errata NOP
 17928                           
 17929                           ;temporizador.h: 41: }
 17930                           ;temporizador.h: 42: tempo_reenvio_SMS++;
 17931  002B0A  2A7B               	incf	_tempo_reenvio_SMS,f,c
 17932                           
 17933                           ;temporizador.h: 43: if (tempo_reenvio_SMS >= 7) {
 17934  002B0C  0E06               	movlw	6
 17935  002B0E  647B               	cpfsgt	_tempo_reenvio_SMS,c
 17936  002B10  D002               	goto	i2l609
 17937                           
 17938                           ;temporizador.h: 44: tempo_reenvio_SMS = 6;
 17939  002B12  0E06               	movlw	6
 17940  002B14  6E7B               	movwf	_tempo_reenvio_SMS,c
 17941  002B16                     i2l609:
 17942  002B16  FFFF               	dw	65535	; assembler added errata NOP
 17943                           
 17944                           ;temporizador.h: 45: }
 17945                           ;temporizador.h: 47: getDS1307TimeDate(&rtc);
 17946  002B18  0E72               	movlw	low _rtc
 17947  002B1A  6E06               	movwf	i2getDS1307TimeDate@ptrToUserVal,c
 17948  002B1C  0E00               	movlw	high _rtc
 17949  002B1E  6E07               	movwf	i2getDS1307TimeDate@ptrToUserVal+1,c
 17950  002B20  EC46  F016         	call	i2_getDS1307TimeDate	;wreg free
 17951                           
 17952                           ;temporizador.h: 48: if ((rtc.sec > 60) && (rtc.min > 60) && (rtc.hour > 24)) {
 17953  002B24  0E3C               	movlw	60
 17954  002B26  6473               	cpfsgt	_rtc+1,c
 17955  002B28  D018               	goto	i2l610
 17956  002B2A  0E3C               	movlw	60
 17957  002B2C  6474               	cpfsgt	_rtc+2,c
 17958  002B2E  D015               	goto	i2l610
 17959  002B30  0E18               	movlw	24
 17960  002B32  6475               	cpfsgt	_rtc+3,c
 17961  002B34  D012               	goto	i2l610
 17962                           
 17963                           ;temporizador.h: 50: falha = 2;
 17964  002B36  0E02               	movlw	2
 17965  002B38  0100               	movlb	0	; () banked
 17966  002B3A  6FDD               	movwf	_falha& (0+255),b
 17967                           
 17968                           ; BSR set to: 0
 17969                           ;temporizador.h: 51: RTC_Init();
 17970  002B3C  EC88  F03B         	call	i2_RTC_Init	;wreg free
 17971                           
 17972                           ;temporizador.h: 52: rtc.sec = _sec;
 17973  002B40  C0F3  F073         	movff	__sec,_rtc+1
 17974                           
 17975                           ;temporizador.h: 53: rtc.min = _min;
 17976  002B44  C0F2  F074         	movff	__min,_rtc+2
 17977                           
 17978                           ;temporizador.h: 54: rtc.hour = _hor;
 17979  002B48  C0F1  F075         	movff	__hor,_rtc+3
 17980                           
 17981                           ;temporizador.h: 55: rtc.date = _dia;
 17982  002B4C  C0F0  F076         	movff	__dia,_rtc+4
 17983                           
 17984                           ;temporizador.h: 56: rtc.month = _mes;
 17985  002B50  C0EF  F077         	movff	__mes,_rtc+5
 17986                           
 17987                           ;temporizador.h: 57: rtc.year = _ano;
 17988  002B54  C0EE  F078         	movff	__ano,_rtc+6
 17989                           
 17990                           ;temporizador.h: 58: return;
 17991  002B58  D00D               	goto	i2l607
 17992  002B5A                     i2l610:
 17993  002B5A  FFFF               	dw	65535	; assembler added errata NOP
 17994                           
 17995                           ;temporizador.h: 59: }
 17996                           ;temporizador.h: 60: _sec = rtc.sec;
 17997  002B5C  C073  F0F3         	movff	_rtc+1,__sec
 17998                           
 17999                           ;temporizador.h: 61: _min = rtc.min;
 18000  002B60  C074  F0F2         	movff	_rtc+2,__min
 18001                           
 18002                           ;temporizador.h: 62: _hor = rtc.hour;
 18003  002B64  C075  F0F1         	movff	_rtc+3,__hor
 18004                           
 18005                           ;temporizador.h: 63: _dia = rtc.date;
 18006  002B68  C076  F0F0         	movff	_rtc+4,__dia
 18007                           
 18008                           ;temporizador.h: 64: _mes = rtc.month;
 18009  002B6C  C077  F0EF         	movff	_rtc+5,__mes
 18010                           
 18011                           ;temporizador.h: 65: _ano = rtc.year;
 18012  002B70  C078  F0EE         	movff	_rtc+6,__ano
 18013  002B74                     i2l607:
 18014  002B74  FFFF               	dw	65535	; assembler added errata NOP
 18015  002B76  0012               	return		;funcret
 18016  002B78  FFFF               	dw	65535	; errata NOP
 18017  002B7A                     __end_of_timer:
 18018                           	opt stack 0
 18019                           tosu	equ	0xFFF
 18020                           tosh	equ	0xFFE
 18021                           tosl	equ	0xFFD
 18022                           pclatu	equ	0xFFB
 18023                           pclath	equ	0xFFA
 18024                           tblptru	equ	0xFF8
 18025                           tblptrh	equ	0xFF7
 18026                           tblptrl	equ	0xFF6
 18027                           tablat	equ	0xFF5
 18028                           prodh	equ	0xFF4
 18029                           prodl	equ	0xFF3
 18030                           intcon	equ	0xFF2
 18031                           indf0	equ	0xFEF
 18032                           postinc0	equ	0xFEE
 18033                           fsr0h	equ	0xFEA
 18034                           fsr0l	equ	0xFE9
 18035                           wreg	equ	0xFE8
 18036                           postdec1	equ	0xFE5
 18037                           fsr1h	equ	0xFE2
 18038                           fsr1l	equ	0xFE1
 18039                           indf2	equ	0xFDF
 18040                           postinc2	equ	0xFDE
 18041                           postdec2	equ	0xFDD
 18042                           fsr2h	equ	0xFDA
 18043                           fsr2l	equ	0xFD9
 18044                           status	equ	0xFD8
 18045                           
 18046 ;; *************** function i2_getDS1307TimeDate *****************
 18047 ;; Defined at:
 18048 ;;		line 52 in file "ds1307.h"
 18049 ;; Parameters:    Size  Location     Type
 18050 ;;  ptrToUserVal    2    5[COMRAM] PTR struct .
 18051 ;;		 -> rtc(7), 
 18052 ;; Auto vars:     Size  Location     Type
 18053 ;;		None
 18054 ;; Return value:  Size  Location     Type
 18055 ;;                  1    wreg      void 
 18056 ;; Registers used:
 18057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18058 ;; Tracked objects:
 18059 ;;		On entry : 0/0
 18060 ;;		On exit  : 0/0
 18061 ;;		Unchanged: 0/0
 18062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18063 ;;      Params:         2       0       0       0       0       0       0
 18064 ;;      Locals:         0       0       0       0       0       0       0
 18065 ;;      Temps:          0       0       0       0       0       0       0
 18066 ;;      Totals:         2       0       0       0       0       0       0
 18067 ;;Total ram usage:        2 bytes
 18068 ;; Hardware stack levels used:    1
 18069 ;; Hardware stack levels required when called:    2
 18070 ;; This function calls:
 18071 ;;		i2_BCDtoDEC
 18072 ;;		i2_I2C_Read
 18073 ;;		i2_I2C_Restart
 18074 ;;		i2_I2C_Start
 18075 ;;		i2_I2C_Stop
 18076 ;;		i2_I2C_Write
 18077 ;; This function is called by:
 18078 ;;		_timer
 18079 ;; This function uses a non-reentrant model
 18080 ;;
 18081                           
 18082                           	psect	text72
 18083  002C8C                     __ptext72:
 18084                           	opt stack 0
 18085  002C8C                     i2_getDS1307TimeDate:
 18086                           	opt stack 0
 18087  002C8C  FFFF               	dw	65535	; assembler added errata NOP
 18088                           
 18089                           ;ds1307.h: 54: I2C_Start();
 18090                           
 18091                           ;incstack = 0
 18092  002C8E  EC79  F03A         	call	i2_I2C_Start	;wreg free
 18093                           
 18094                           ;ds1307.h: 55: I2C_Write(0xD0);
 18095  002C92  0E00               	movlw	0
 18096  002C94  6E03               	movwf	i2I2C_Write@d+1,c
 18097  002C96  0ED0               	movlw	208
 18098  002C98  6E02               	movwf	i2I2C_Write@d,c
 18099  002C9A  EC9D  F03A         	call	i2_I2C_Write	;wreg free
 18100                           
 18101                           ;ds1307.h: 56: I2C_Write(0x00);
 18102  002C9E  0E00               	movlw	0
 18103  002CA0  6E03               	movwf	i2I2C_Write@d+1,c
 18104  002CA2  0E00               	movlw	0
 18105  002CA4  6E02               	movwf	i2I2C_Write@d,c
 18106  002CA6  EC9D  F03A         	call	i2_I2C_Write	;wreg free
 18107                           
 18108                           ;ds1307.h: 57: I2C_Restart();
 18109  002CAA  EC85  F03A         	call	i2_I2C_Restart	;wreg free
 18110                           
 18111                           ;ds1307.h: 58: I2C_Write(0xD1);
 18112  002CAE  0E00               	movlw	0
 18113  002CB0  6E03               	movwf	i2I2C_Write@d+1,c
 18114  002CB2  0ED1               	movlw	209
 18115  002CB4  6E02               	movwf	i2I2C_Write@d,c
 18116  002CB6  EC9D  F03A         	call	i2_I2C_Write	;wreg free
 18117                           
 18118                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
 18119  002CBA  EE20 F001          	lfsr	2,1
 18120  002CBE  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 18121  002CC0  26D9               	addwf	fsr2l,f,c
 18122  002CC2  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 18123  002CC4  22DA               	addwfc	fsr2h,f,c
 18124  002CC6  0E00               	movlw	0
 18125  002CC8  6E03               	movwf	i2I2C_Read@a+1,c
 18126  002CCA  0E01               	movlw	1
 18127  002CCC  6E02               	movwf	i2I2C_Read@a,c
 18128  002CCE  ECA1  F03B         	call	i2_I2C_Read	;wreg free
 18129  002CD2  5002               	movf	?i2_I2C_Read,w,c
 18130  002CD4  ECC5  F03A         	call	i2_BCDtoDEC
 18131  002CD8  6EDF               	movwf	indf2,c
 18132                           
 18133                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
 18134  002CDA  EE20 F002          	lfsr	2,2
 18135  002CDE  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 18136  002CE0  26D9               	addwf	fsr2l,f,c
 18137  002CE2  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 18138  002CE4  22DA               	addwfc	fsr2h,f,c
 18139  002CE6  0E00               	movlw	0
 18140  002CE8  6E03               	movwf	i2I2C_Read@a+1,c
 18141  002CEA  0E01               	movlw	1
 18142  002CEC  6E02               	movwf	i2I2C_Read@a,c
 18143  002CEE  ECA1  F03B         	call	i2_I2C_Read	;wreg free
 18144  002CF2  5002               	movf	?i2_I2C_Read,w,c
 18145  002CF4  ECC5  F03A         	call	i2_BCDtoDEC
 18146  002CF8  6EDF               	movwf	indf2,c
 18147                           
 18148                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
 18149  002CFA  EE20 F003          	lfsr	2,3
 18150  002CFE  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 18151  002D00  26D9               	addwf	fsr2l,f,c
 18152  002D02  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 18153  002D04  22DA               	addwfc	fsr2h,f,c
 18154  002D06  0E00               	movlw	0
 18155  002D08  6E03               	movwf	i2I2C_Read@a+1,c
 18156  002D0A  0E01               	movlw	1
 18157  002D0C  6E02               	movwf	i2I2C_Read@a,c
 18158  002D0E  ECA1  F03B         	call	i2_I2C_Read	;wreg free
 18159  002D12  5002               	movf	?i2_I2C_Read,w,c
 18160  002D14  ECC5  F03A         	call	i2_BCDtoDEC
 18161  002D18  6EDF               	movwf	indf2,c
 18162                           
 18163                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
 18164  002D1A  0E00               	movlw	0
 18165  002D1C  6E03               	movwf	i2I2C_Read@a+1,c
 18166  002D1E  0E01               	movlw	1
 18167  002D20  6E02               	movwf	i2I2C_Read@a,c
 18168  002D22  ECA1  F03B         	call	i2_I2C_Read	;wreg free
 18169  002D26  5002               	movf	?i2_I2C_Read,w,c
 18170  002D28  ECC5  F03A         	call	i2_BCDtoDEC
 18171  002D2C  C006  FFD9         	movff	i2getDS1307TimeDate@ptrToUserVal,fsr2l
 18172  002D30  C007  FFDA         	movff	i2getDS1307TimeDate@ptrToUserVal+1,fsr2h
 18173  002D34  6EDF               	movwf	indf2,c
 18174                           
 18175                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
 18176  002D36  EE20 F004          	lfsr	2,4
 18177  002D3A  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 18178  002D3C  26D9               	addwf	fsr2l,f,c
 18179  002D3E  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 18180  002D40  22DA               	addwfc	fsr2h,f,c
 18181  002D42  0E00               	movlw	0
 18182  002D44  6E03               	movwf	i2I2C_Read@a+1,c
 18183  002D46  0E01               	movlw	1
 18184  002D48  6E02               	movwf	i2I2C_Read@a,c
 18185  002D4A  ECA1  F03B         	call	i2_I2C_Read	;wreg free
 18186  002D4E  5002               	movf	?i2_I2C_Read,w,c
 18187  002D50  ECC5  F03A         	call	i2_BCDtoDEC
 18188  002D54  6EDF               	movwf	indf2,c
 18189                           
 18190                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
 18191  002D56  EE20 F005          	lfsr	2,5
 18192  002D5A  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 18193  002D5C  26D9               	addwf	fsr2l,f,c
 18194  002D5E  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 18195  002D60  22DA               	addwfc	fsr2h,f,c
 18196  002D62  0E00               	movlw	0
 18197  002D64  6E03               	movwf	i2I2C_Read@a+1,c
 18198  002D66  0E01               	movlw	1
 18199  002D68  6E02               	movwf	i2I2C_Read@a,c
 18200  002D6A  ECA1  F03B         	call	i2_I2C_Read	;wreg free
 18201  002D6E  5002               	movf	?i2_I2C_Read,w,c
 18202  002D70  ECC5  F03A         	call	i2_BCDtoDEC
 18203  002D74  6EDF               	movwf	indf2,c
 18204                           
 18205                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
 18206  002D76  EE20 F006          	lfsr	2,6
 18207  002D7A  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 18208  002D7C  26D9               	addwf	fsr2l,f,c
 18209  002D7E  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 18210  002D80  22DA               	addwfc	fsr2h,f,c
 18211  002D82  0E00               	movlw	0
 18212  002D84  6E03               	movwf	i2I2C_Read@a+1,c
 18213  002D86  0E00               	movlw	0
 18214  002D88  6E02               	movwf	i2I2C_Read@a,c
 18215  002D8A  ECA1  F03B         	call	i2_I2C_Read	;wreg free
 18216  002D8E  5002               	movf	?i2_I2C_Read,w,c
 18217  002D90  ECC5  F03A         	call	i2_BCDtoDEC
 18218  002D94  6EDF               	movwf	indf2,c
 18219                           
 18220                           ;ds1307.h: 66: I2C_Stop();
 18221  002D96  EC7F  F03A         	call	i2_I2C_Stop	;wreg free
 18222  002D9A  0012               	return		;funcret
 18223  002D9C  FFFF               	dw	65535	; errata NOP
 18224  002D9E                     __end_ofi2_getDS1307TimeDate:
 18225                           	opt stack 0
 18226                           tosu	equ	0xFFF
 18227                           tosh	equ	0xFFE
 18228                           tosl	equ	0xFFD
 18229                           pclatu	equ	0xFFB
 18230                           pclath	equ	0xFFA
 18231                           tblptru	equ	0xFF8
 18232                           tblptrh	equ	0xFF7
 18233                           tblptrl	equ	0xFF6
 18234                           tablat	equ	0xFF5
 18235                           prodh	equ	0xFF4
 18236                           prodl	equ	0xFF3
 18237                           intcon	equ	0xFF2
 18238                           indf0	equ	0xFEF
 18239                           postinc0	equ	0xFEE
 18240                           fsr0h	equ	0xFEA
 18241                           fsr0l	equ	0xFE9
 18242                           wreg	equ	0xFE8
 18243                           postdec1	equ	0xFE5
 18244                           fsr1h	equ	0xFE2
 18245                           fsr1l	equ	0xFE1
 18246                           indf2	equ	0xFDF
 18247                           postinc2	equ	0xFDE
 18248                           postdec2	equ	0xFDD
 18249                           fsr2h	equ	0xFDA
 18250                           fsr2l	equ	0xFD9
 18251                           status	equ	0xFD8
 18252                           
 18253 ;; *************** function i2_I2C_Restart *****************
 18254 ;; Defined at:
 18255 ;;		line 31 in file "I2C.c"
 18256 ;; Parameters:    Size  Location     Type
 18257 ;;		None
 18258 ;; Auto vars:     Size  Location     Type
 18259 ;;		None
 18260 ;; Return value:  Size  Location     Type
 18261 ;;                  1    wreg      void 
 18262 ;; Registers used:
 18263 ;;		wreg, status,2, status,0, cstack
 18264 ;; Tracked objects:
 18265 ;;		On entry : 0/0
 18266 ;;		On exit  : 0/0
 18267 ;;		Unchanged: 0/0
 18268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18269 ;;      Params:         0       0       0       0       0       0       0
 18270 ;;      Locals:         0       0       0       0       0       0       0
 18271 ;;      Temps:          0       0       0       0       0       0       0
 18272 ;;      Totals:         0       0       0       0       0       0       0
 18273 ;;Total ram usage:        0 bytes
 18274 ;; Hardware stack levels used:    1
 18275 ;; Hardware stack levels required when called:    1
 18276 ;; This function calls:
 18277 ;;		i2_I2C_Wait
 18278 ;; This function is called by:
 18279 ;;		i2_getDS1307TimeDate
 18280 ;; This function uses a non-reentrant model
 18281 ;;
 18282                           
 18283                           	psect	text73
 18284  00750A                     __ptext73:
 18285                           	opt stack 0
 18286  00750A                     i2_I2C_Restart:
 18287                           	opt stack 0
 18288  00750A  FFFF               	dw	65535	; assembler added errata NOP
 18289                           
 18290                           ;I2C.c: 32: I2C_Wait();
 18291                           
 18292                           ;incstack = 0
 18293  00750C  ECD0  F03A         	call	i2_I2C_Wait	;wreg free
 18294                           
 18295                           ;I2C.c: 33: RSEN = 1;
 18296  007510  82C5               	bsf	4037,1,c	;volatile
 18297  007512  0012               	return		;funcret
 18298  007514  FFFF               	dw	65535	; errata NOP
 18299  007516                     __end_ofi2_I2C_Restart:
 18300                           	opt stack 0
 18301                           tosu	equ	0xFFF
 18302                           tosh	equ	0xFFE
 18303                           tosl	equ	0xFFD
 18304                           pclatu	equ	0xFFB
 18305                           pclath	equ	0xFFA
 18306                           tblptru	equ	0xFF8
 18307                           tblptrh	equ	0xFF7
 18308                           tblptrl	equ	0xFF6
 18309                           tablat	equ	0xFF5
 18310                           prodh	equ	0xFF4
 18311                           prodl	equ	0xFF3
 18312                           intcon	equ	0xFF2
 18313                           indf0	equ	0xFEF
 18314                           postinc0	equ	0xFEE
 18315                           fsr0h	equ	0xFEA
 18316                           fsr0l	equ	0xFE9
 18317                           wreg	equ	0xFE8
 18318                           postdec1	equ	0xFE5
 18319                           fsr1h	equ	0xFE2
 18320                           fsr1l	equ	0xFE1
 18321                           indf2	equ	0xFDF
 18322                           postinc2	equ	0xFDE
 18323                           postdec2	equ	0xFDD
 18324                           fsr2h	equ	0xFDA
 18325                           fsr2l	equ	0xFD9
 18326                           status	equ	0xFD8
 18327                           
 18328 ;; *************** function i2_I2C_Read *****************
 18329 ;; Defined at:
 18330 ;;		line 47 in file "I2C.c"
 18331 ;; Parameters:    Size  Location     Type
 18332 ;;  a               2    1[COMRAM] unsigned short 
 18333 ;; Auto vars:     Size  Location     Type
 18334 ;;  I2C_Read        2    3[COMRAM] unsigned short 
 18335 ;; Return value:  Size  Location     Type
 18336 ;;                  2    1[COMRAM] unsigned short 
 18337 ;; Registers used:
 18338 ;;		wreg, status,2, status,0, cstack
 18339 ;; Tracked objects:
 18340 ;;		On entry : 0/0
 18341 ;;		On exit  : 0/0
 18342 ;;		Unchanged: 0/0
 18343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18344 ;;      Params:         2       0       0       0       0       0       0
 18345 ;;      Locals:         2       0       0       0       0       0       0
 18346 ;;      Temps:          0       0       0       0       0       0       0
 18347 ;;      Totals:         4       0       0       0       0       0       0
 18348 ;;Total ram usage:        4 bytes
 18349 ;; Hardware stack levels used:    1
 18350 ;; Hardware stack levels required when called:    1
 18351 ;; This function calls:
 18352 ;;		i2_I2C_Wait
 18353 ;; This function is called by:
 18354 ;;		i2_getDS1307TimeDate
 18355 ;; This function uses a non-reentrant model
 18356 ;;
 18357                           
 18358                           	psect	text74
 18359  007742                     __ptext74:
 18360                           	opt stack 0
 18361  007742                     i2_I2C_Read:
 18362                           	opt stack 0
 18363  007742  FFFF               	dw	65535	; assembler added errata NOP
 18364                           
 18365                           ;I2C.c: 48: unsigned short temp;
 18366                           ;I2C.c: 49: I2C_Wait();
 18367                           
 18368                           ;incstack = 0
 18369  007744  ECD0  F03A         	call	i2_I2C_Wait	;wreg free
 18370                           
 18371                           ;I2C.c: 50: RCEN = 1;
 18372  007748  86C5               	bsf	4037,3,c	;volatile
 18373                           
 18374                           ;I2C.c: 51: I2C_Wait();
 18375  00774A  ECD0  F03A         	call	i2_I2C_Wait	;wreg free
 18376                           
 18377                           ;I2C.c: 52: temp = SSPBUF;
 18378  00774E  CFC9 F004          	movff	4041,i2I2C_Read@temp	;volatile
 18379  007752  6A05               	clrf	i2I2C_Read@temp+1,c
 18380                           
 18381                           ;I2C.c: 53: I2C_Wait();
 18382  007754  ECD0  F03A         	call	i2_I2C_Wait	;wreg free
 18383                           
 18384                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 18385  007758  5002               	movf	i2I2C_Read@a,w,c
 18386  00775A  1003               	iorwf	i2I2C_Read@a+1,w,c
 18387  00775C  A4D8               	btfss	status,2,c
 18388  00775E  D002               	goto	i2u563_40
 18389  007760  8AC5               	bsf	4037,5,c	;volatile
 18390  007762  D002               	goto	i2u564_45
 18391  007764                     i2u563_40:
 18392  007764  FFFF               	dw	65535	; assembler added errata NOP
 18393  007766  9AC5               	bcf	4037,5,c	;volatile
 18394  007768                     i2u564_45:
 18395  007768  FFFF               	dw	65535	; assembler added errata NOP
 18396                           
 18397                           ;I2C.c: 55: ACKEN = 1;
 18398  00776A  88C5               	bsf	4037,4,c	;volatile
 18399                           
 18400                           ;I2C.c: 56: return temp;
 18401  00776C  C004  F002         	movff	i2I2C_Read@temp,?i2_I2C_Read
 18402  007770  C005  F003         	movff	i2I2C_Read@temp+1,?i2_I2C_Read+1
 18403  007774  0012               	return		;funcret
 18404  007776  FFFF               	dw	65535	; errata NOP
 18405  007778                     __end_ofi2_I2C_Read:
 18406                           	opt stack 0
 18407                           tosu	equ	0xFFF
 18408                           tosh	equ	0xFFE
 18409                           tosl	equ	0xFFD
 18410                           pclatu	equ	0xFFB
 18411                           pclath	equ	0xFFA
 18412                           tblptru	equ	0xFF8
 18413                           tblptrh	equ	0xFF7
 18414                           tblptrl	equ	0xFF6
 18415                           tablat	equ	0xFF5
 18416                           prodh	equ	0xFF4
 18417                           prodl	equ	0xFF3
 18418                           intcon	equ	0xFF2
 18419                           indf0	equ	0xFEF
 18420                           postinc0	equ	0xFEE
 18421                           fsr0h	equ	0xFEA
 18422                           fsr0l	equ	0xFE9
 18423                           wreg	equ	0xFE8
 18424                           postdec1	equ	0xFE5
 18425                           fsr1h	equ	0xFE2
 18426                           fsr1l	equ	0xFE1
 18427                           indf2	equ	0xFDF
 18428                           postinc2	equ	0xFDE
 18429                           postdec2	equ	0xFDD
 18430                           fsr2h	equ	0xFDA
 18431                           fsr2l	equ	0xFD9
 18432                           status	equ	0xFD8
 18433                           
 18434 ;; *************** function i2_BCDtoDEC *****************
 18435 ;; Defined at:
 18436 ;;		line 34 in file "function.c"
 18437 ;; Parameters:    Size  Location     Type
 18438 ;;  val             1    wreg     unsigned char 
 18439 ;; Auto vars:     Size  Location     Type
 18440 ;;  val             1    0[COMRAM] unsigned char 
 18441 ;; Return value:  Size  Location     Type
 18442 ;;                  1    wreg      unsigned char 
 18443 ;; Registers used:
 18444 ;;		wreg, status,2, status,0, prodl, prodh
 18445 ;; Tracked objects:
 18446 ;;		On entry : 0/0
 18447 ;;		On exit  : 0/0
 18448 ;;		Unchanged: 0/0
 18449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18450 ;;      Params:         0       0       0       0       0       0       0
 18451 ;;      Locals:         1       0       0       0       0       0       0
 18452 ;;      Temps:          0       0       0       0       0       0       0
 18453 ;;      Totals:         1       0       0       0       0       0       0
 18454 ;;Total ram usage:        1 bytes
 18455 ;; Hardware stack levels used:    1
 18456 ;; This function calls:
 18457 ;;		Nothing
 18458 ;; This function is called by:
 18459 ;;		i2_getDS1307TimeDate
 18460 ;; This function uses a non-reentrant model
 18461 ;;
 18462                           
 18463                           	psect	text75
 18464  00758A                     __ptext75:
 18465                           	opt stack 0
 18466  00758A                     i2_BCDtoDEC:
 18467                           	opt stack 0
 18468  00758A  FFFF               	dw	65535	; assembler added errata NOP
 18469                           
 18470                           ;incstack = 0
 18471                           ;i2BCDtoDEC@val stored from wreg
 18472  00758C  6E01               	movwf	i2BCDtoDEC@val,c
 18473                           
 18474                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
 18475  00758E  3801               	swapf	i2BCDtoDEC@val,w,c
 18476  007590  0B0F               	andlw	15
 18477  007592  0B0F               	andlw	15
 18478  007594  0D0A               	mullw	10
 18479  007596  5001               	movf	i2BCDtoDEC@val,w,c
 18480  007598  0B0F               	andlw	15
 18481  00759A  24F3               	addwf	prodl,w,c
 18482  00759C  0012               	return		;funcret
 18483  00759E  FFFF               	dw	65535	; errata NOP
 18484  0075A0                     __end_ofi2_BCDtoDEC:
 18485                           	opt stack 0
 18486                           tosu	equ	0xFFF
 18487                           tosh	equ	0xFFE
 18488                           tosl	equ	0xFFD
 18489                           pclatu	equ	0xFFB
 18490                           pclath	equ	0xFFA
 18491                           tblptru	equ	0xFF8
 18492                           tblptrh	equ	0xFF7
 18493                           tblptrl	equ	0xFF6
 18494                           tablat	equ	0xFF5
 18495                           prodh	equ	0xFF4
 18496                           prodl	equ	0xFF3
 18497                           intcon	equ	0xFF2
 18498                           indf0	equ	0xFEF
 18499                           postinc0	equ	0xFEE
 18500                           fsr0h	equ	0xFEA
 18501                           fsr0l	equ	0xFE9
 18502                           wreg	equ	0xFE8
 18503                           postdec1	equ	0xFE5
 18504                           fsr1h	equ	0xFE2
 18505                           fsr1l	equ	0xFE1
 18506                           indf2	equ	0xFDF
 18507                           postinc2	equ	0xFDE
 18508                           postdec2	equ	0xFDD
 18509                           fsr2h	equ	0xFDA
 18510                           fsr2l	equ	0xFD9
 18511                           status	equ	0xFD8
 18512                           
 18513 ;; *************** function i2_RTC_Init *****************
 18514 ;; Defined at:
 18515 ;;		line 98 in file "ds1307.h"
 18516 ;; Parameters:    Size  Location     Type
 18517 ;;		None
 18518 ;; Auto vars:     Size  Location     Type
 18519 ;;		None
 18520 ;; Return value:  Size  Location     Type
 18521 ;;                  1    wreg      void 
 18522 ;; Registers used:
 18523 ;;		wreg, status,2, status,0, cstack
 18524 ;; Tracked objects:
 18525 ;;		On entry : 0/0
 18526 ;;		On exit  : 0/0
 18527 ;;		Unchanged: 0/0
 18528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18529 ;;      Params:         0       0       0       0       0       0       0
 18530 ;;      Locals:         0       0       0       0       0       0       0
 18531 ;;      Temps:          0       0       0       0       0       0       0
 18532 ;;      Totals:         0       0       0       0       0       0       0
 18533 ;;Total ram usage:        0 bytes
 18534 ;; Hardware stack levels used:    1
 18535 ;; Hardware stack levels required when called:    2
 18536 ;; This function calls:
 18537 ;;		i2_I2C_Start
 18538 ;;		i2_I2C_Stop
 18539 ;;		i2_I2C_Write
 18540 ;; This function is called by:
 18541 ;;		_timer
 18542 ;; This function uses a non-reentrant model
 18543 ;;
 18544                           
 18545                           	psect	text76
 18546  007710                     __ptext76:
 18547                           	opt stack 0
 18548  007710                     i2_RTC_Init:
 18549                           	opt stack 0
 18550  007710  FFFF               	dw	65535	; assembler added errata NOP
 18551                           
 18552                           ;ds1307.h: 100: I2C_Start();
 18553                           
 18554                           ;incstack = 0
 18555  007712  EC79  F03A         	call	i2_I2C_Start	;wreg free
 18556                           
 18557                           ;ds1307.h: 101: I2C_Write(0xD0);
 18558  007716  0E00               	movlw	0
 18559  007718  6E03               	movwf	i2I2C_Write@d+1,c
 18560  00771A  0ED0               	movlw	208
 18561  00771C  6E02               	movwf	i2I2C_Write@d,c
 18562  00771E  EC9D  F03A         	call	i2_I2C_Write	;wreg free
 18563                           
 18564                           ;ds1307.h: 102: I2C_Write(0x07);
 18565  007722  0E00               	movlw	0
 18566  007724  6E03               	movwf	i2I2C_Write@d+1,c
 18567  007726  0E07               	movlw	7
 18568  007728  6E02               	movwf	i2I2C_Write@d,c
 18569  00772A  EC9D  F03A         	call	i2_I2C_Write	;wreg free
 18570                           
 18571                           ;ds1307.h: 103: I2C_Write(0x00);
 18572  00772E  0E00               	movlw	0
 18573  007730  6E03               	movwf	i2I2C_Write@d+1,c
 18574  007732  0E00               	movlw	0
 18575  007734  6E02               	movwf	i2I2C_Write@d,c
 18576  007736  EC9D  F03A         	call	i2_I2C_Write	;wreg free
 18577                           
 18578                           ;ds1307.h: 104: I2C_Stop();
 18579  00773A  EC7F  F03A         	call	i2_I2C_Stop	;wreg free
 18580  00773E  0012               	return		;funcret
 18581  007740  FFFF               	dw	65535	; errata NOP
 18582  007742                     __end_ofi2_RTC_Init:
 18583                           	opt stack 0
 18584                           tosu	equ	0xFFF
 18585                           tosh	equ	0xFFE
 18586                           tosl	equ	0xFFD
 18587                           pclatu	equ	0xFFB
 18588                           pclath	equ	0xFFA
 18589                           tblptru	equ	0xFF8
 18590                           tblptrh	equ	0xFF7
 18591                           tblptrl	equ	0xFF6
 18592                           tablat	equ	0xFF5
 18593                           prodh	equ	0xFF4
 18594                           prodl	equ	0xFF3
 18595                           intcon	equ	0xFF2
 18596                           indf0	equ	0xFEF
 18597                           postinc0	equ	0xFEE
 18598                           fsr0h	equ	0xFEA
 18599                           fsr0l	equ	0xFE9
 18600                           wreg	equ	0xFE8
 18601                           postdec1	equ	0xFE5
 18602                           fsr1h	equ	0xFE2
 18603                           fsr1l	equ	0xFE1
 18604                           indf2	equ	0xFDF
 18605                           postinc2	equ	0xFDE
 18606                           postdec2	equ	0xFDD
 18607                           fsr2h	equ	0xFDA
 18608                           fsr2l	equ	0xFD9
 18609                           status	equ	0xFD8
 18610                           
 18611 ;; *************** function _writeEEPROM16_ext *****************
 18612 ;; Defined at:
 18613 ;;		line 40 in file "eeprom.h"
 18614 ;; Parameters:    Size  Location     Type
 18615 ;;  adress          1    wreg     unsigned char 
 18616 ;;  data            2    5[COMRAM] unsigned int 
 18617 ;; Auto vars:     Size  Location     Type
 18618 ;;  adress          1    7[COMRAM] unsigned char 
 18619 ;; Return value:  Size  Location     Type
 18620 ;;                  1    wreg      void 
 18621 ;; Registers used:
 18622 ;;		wreg, status,2, status,0, cstack
 18623 ;; Tracked objects:
 18624 ;;		On entry : 0/0
 18625 ;;		On exit  : 0/0
 18626 ;;		Unchanged: 0/0
 18627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18628 ;;      Params:         2       0       0       0       0       0       0
 18629 ;;      Locals:         1       0       0       0       0       0       0
 18630 ;;      Temps:          0       0       0       0       0       0       0
 18631 ;;      Totals:         3       0       0       0       0       0       0
 18632 ;;Total ram usage:        3 bytes
 18633 ;; Hardware stack levels used:    1
 18634 ;; Hardware stack levels required when called:    3
 18635 ;; This function calls:
 18636 ;;		i2_writeEEPROM_ext
 18637 ;; This function is called by:
 18638 ;;		_timer
 18639 ;; This function uses a non-reentrant model
 18640 ;;
 18641                           
 18642                           	psect	text77
 18643  0075EC                     __ptext77:
 18644                           	opt stack 0
 18645  0075EC                     _writeEEPROM16_ext:
 18646                           	opt stack 0
 18647  0075EC  FFFF               	dw	65535	; assembler added errata NOP
 18648                           
 18649                           ;incstack = 0
 18650                           ;writeEEPROM16_ext@adress stored from wreg
 18651  0075EE  6E08               	movwf	writeEEPROM16_ext@adress,c
 18652                           
 18653                           ;eeprom.h: 41: writeEEPROM_ext(adress, data);
 18654  0075F0  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 18655  0075F4  5008               	movf	writeEEPROM16_ext@adress,w,c
 18656  0075F6  EC9C  F03C         	call	i2_writeEEPROM_ext
 18657                           
 18658                           ;eeprom.h: 42: data>> = 8;
 18659  0075FA  5007               	movf	writeEEPROM16_ext@data+1,w,c
 18660  0075FC  6E06               	movwf	writeEEPROM16_ext@data,c
 18661  0075FE  6A07               	clrf	writeEEPROM16_ext@data+1,c
 18662                           
 18663                           ;eeprom.h: 43: writeEEPROM_ext(adress + 1, data);
 18664  007600  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 18665  007604  2808               	incf	writeEEPROM16_ext@adress,w,c
 18666  007606  EC9C  F03C         	call	i2_writeEEPROM_ext
 18667  00760A  0012               	return		;funcret
 18668  00760C  FFFF               	dw	65535	; errata NOP
 18669  00760E                     __end_of_writeEEPROM16_ext:
 18670                           	opt stack 0
 18671                           tosu	equ	0xFFF
 18672                           tosh	equ	0xFFE
 18673                           tosl	equ	0xFFD
 18674                           pclatu	equ	0xFFB
 18675                           pclath	equ	0xFFA
 18676                           tblptru	equ	0xFF8
 18677                           tblptrh	equ	0xFF7
 18678                           tblptrl	equ	0xFF6
 18679                           tablat	equ	0xFF5
 18680                           prodh	equ	0xFF4
 18681                           prodl	equ	0xFF3
 18682                           intcon	equ	0xFF2
 18683                           indf0	equ	0xFEF
 18684                           postinc0	equ	0xFEE
 18685                           fsr0h	equ	0xFEA
 18686                           fsr0l	equ	0xFE9
 18687                           wreg	equ	0xFE8
 18688                           postdec1	equ	0xFE5
 18689                           fsr1h	equ	0xFE2
 18690                           fsr1l	equ	0xFE1
 18691                           indf2	equ	0xFDF
 18692                           postinc2	equ	0xFDE
 18693                           postdec2	equ	0xFDD
 18694                           fsr2h	equ	0xFDA
 18695                           fsr2l	equ	0xFD9
 18696                           status	equ	0xFD8
 18697                           
 18698 ;; *************** function i2_writeEEPROM_ext *****************
 18699 ;; Defined at:
 18700 ;;		line 13 in file "eeprom.h"
 18701 ;; Parameters:    Size  Location     Type
 18702 ;;  adress          1    wreg     unsigned char 
 18703 ;;  data            1    3[COMRAM] unsigned char 
 18704 ;; Auto vars:     Size  Location     Type
 18705 ;;  adress          1    4[COMRAM] unsigned char 
 18706 ;; Return value:  Size  Location     Type
 18707 ;;                  1    wreg      void 
 18708 ;; Registers used:
 18709 ;;		wreg, status,2, status,0, cstack
 18710 ;; Tracked objects:
 18711 ;;		On entry : 0/0
 18712 ;;		On exit  : 0/0
 18713 ;;		Unchanged: 0/0
 18714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18715 ;;      Params:         1       0       0       0       0       0       0
 18716 ;;      Locals:         1       0       0       0       0       0       0
 18717 ;;      Temps:          0       0       0       0       0       0       0
 18718 ;;      Totals:         2       0       0       0       0       0       0
 18719 ;;Total ram usage:        2 bytes
 18720 ;; Hardware stack levels used:    1
 18721 ;; Hardware stack levels required when called:    2
 18722 ;; This function calls:
 18723 ;;		i2_I2C_Start
 18724 ;;		i2_I2C_Stop
 18725 ;;		i2_I2C_Write
 18726 ;;		i2_delay
 18727 ;; This function is called by:
 18728 ;;		_writeEEPROM16_ext
 18729 ;;		_timer
 18730 ;; This function uses a non-reentrant model
 18731 ;;
 18732                           
 18733                           	psect	text78
 18734  007938                     __ptext78:
 18735                           	opt stack 0
 18736  007938                     i2_writeEEPROM_ext:
 18737                           	opt stack 0
 18738  007938  FFFF               	dw	65535	; assembler added errata NOP
 18739                           
 18740                           ;incstack = 0
 18741                           ;i2writeEEPROM_ext@adress stored from wreg
 18742  00793A  6E05               	movwf	i2writeEEPROM_ext@adress,c
 18743                           
 18744                           ;eeprom.h: 15: I2C_Start();
 18745  00793C  EC79  F03A         	call	i2_I2C_Start	;wreg free
 18746                           
 18747                           ;eeprom.h: 16: I2C_Write(0xA0);
 18748  007940  0E00               	movlw	0
 18749  007942  6E03               	movwf	i2I2C_Write@d+1,c
 18750  007944  0EA0               	movlw	160
 18751  007946  6E02               	movwf	i2I2C_Write@d,c
 18752  007948  EC9D  F03A         	call	i2_I2C_Write	;wreg free
 18753                           
 18754                           ;eeprom.h: 18: I2C_Write(adress);
 18755  00794C  C005  F002         	movff	i2writeEEPROM_ext@adress,i2I2C_Write@d
 18756  007950  6A03               	clrf	i2I2C_Write@d+1,c
 18757  007952  EC9D  F03A         	call	i2_I2C_Write	;wreg free
 18758                           
 18759                           ;eeprom.h: 19: I2C_Write(data);
 18760  007956  C004  F002         	movff	i2writeEEPROM_ext@data,i2I2C_Write@d
 18761  00795A  6A03               	clrf	i2I2C_Write@d+1,c
 18762  00795C  EC9D  F03A         	call	i2_I2C_Write	;wreg free
 18763                           
 18764                           ;eeprom.h: 20: I2C_Stop();
 18765  007960  EC7F  F03A         	call	i2_I2C_Stop	;wreg free
 18766                           
 18767                           ;eeprom.h: 21: delay(15);
 18768  007964  0E00               	movlw	0
 18769  007966  6E02               	movwf	i2delay@x+1,c
 18770  007968  0E0F               	movlw	15
 18771  00796A  6E01               	movwf	i2delay@x,c
 18772  00796C  EC6F  F03B         	call	i2_delay	;wreg free
 18773  007970  0012               	return		;funcret
 18774  007972  FFFF               	dw	65535	; errata NOP
 18775  007974                     __end_ofi2_writeEEPROM_ext:
 18776                           	opt stack 0
 18777                           tosu	equ	0xFFF
 18778                           tosh	equ	0xFFE
 18779                           tosl	equ	0xFFD
 18780                           pclatu	equ	0xFFB
 18781                           pclath	equ	0xFFA
 18782                           tblptru	equ	0xFF8
 18783                           tblptrh	equ	0xFF7
 18784                           tblptrl	equ	0xFF6
 18785                           tablat	equ	0xFF5
 18786                           prodh	equ	0xFF4
 18787                           prodl	equ	0xFF3
 18788                           intcon	equ	0xFF2
 18789                           indf0	equ	0xFEF
 18790                           postinc0	equ	0xFEE
 18791                           fsr0h	equ	0xFEA
 18792                           fsr0l	equ	0xFE9
 18793                           wreg	equ	0xFE8
 18794                           postdec1	equ	0xFE5
 18795                           fsr1h	equ	0xFE2
 18796                           fsr1l	equ	0xFE1
 18797                           indf2	equ	0xFDF
 18798                           postinc2	equ	0xFDE
 18799                           postdec2	equ	0xFDD
 18800                           fsr2h	equ	0xFDA
 18801                           fsr2l	equ	0xFD9
 18802                           status	equ	0xFD8
 18803                           
 18804 ;; *************** function i2_delay *****************
 18805 ;; Defined at:
 18806 ;;		line 16 in file "function.c"
 18807 ;; Parameters:    Size  Location     Type
 18808 ;;  x               2    0[COMRAM] int 
 18809 ;; Auto vars:     Size  Location     Type
 18810 ;;		None
 18811 ;; Return value:  Size  Location     Type
 18812 ;;                  1    wreg      void 
 18813 ;; Registers used:
 18814 ;;		wreg, status,2, status,0
 18815 ;; Tracked objects:
 18816 ;;		On entry : 0/0
 18817 ;;		On exit  : 0/0
 18818 ;;		Unchanged: 0/0
 18819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18820 ;;      Params:         2       0       0       0       0       0       0
 18821 ;;      Locals:         0       0       0       0       0       0       0
 18822 ;;      Temps:          1       0       0       0       0       0       0
 18823 ;;      Totals:         3       0       0       0       0       0       0
 18824 ;;Total ram usage:        3 bytes
 18825 ;; Hardware stack levels used:    1
 18826 ;; This function calls:
 18827 ;;		Nothing
 18828 ;; This function is called by:
 18829 ;;		i2_writeEEPROM_ext
 18830 ;; This function uses a non-reentrant model
 18831 ;;
 18832                           
 18833                           	psect	text79
 18834  0076DE                     __ptext79:
 18835                           	opt stack 0
 18836  0076DE                     i2_delay:
 18837                           	opt stack 0
 18838  0076DE  FFFF               	dw	65535	; assembler added errata NOP
 18839                           
 18840                           ;function.c: 17: while (x--) {
 18841                           
 18842                           ;incstack = 0
 18843  0076E0  D00B               	goto	i2l996
 18844  0076E2  FFFF               	dw	65535	; assembler added errata NOP
 18845  0076E4                     i2l5186:
 18846                           
 18847                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 18848  0076E4  0E02               	movlw	2
 18849  0076E6  6E03               	movwf	??i2_delay& (0+255),c
 18850  0076E8  0EF2               	movlw	242
 18851  0076EA                     i2u885_47:
 18852  0076EA  FFFF               	dw	65535	; errata NOP
 18853  0076EC  2EE8               	decfsz	wreg,f,c
 18854  0076EE  D7FD               	bra	i2u885_47
 18855  0076F0  2E03               	decfsz	??i2_delay& (0+255),f,c
 18856  0076F2  D7FB               	bra	i2u885_47
 18857  0076F4  D000               	nop2	
 18858  0076F6  0004               	clrwdt		;# 
 18859  0076F8                     i2l996:
 18860  0076F8  FFFF               	dw	65535	; assembler added errata NOP
 18861  0076FA  0601               	decf	i2delay@x,f,c
 18862  0076FC  A0D8               	btfss	status,0,c
 18863  0076FE  0602               	decf	i2delay@x+1,f,c
 18864  007700  2801               	incf	i2delay@x,w,c
 18865  007702  E1F0               	bnz	i2l5186
 18866  007704  2802               	incf	i2delay@x+1,w,c
 18867  007706  B4D8               	btfsc	status,2,c
 18868  007708  0012               	return		;funcret
 18869  00770A  FFFF               	dw	65535	; assembler added errata NOP
 18870  00770C  D7EA               	goto	i2l997
 18871  00770E  FFFF               	dw	65535	; errata NOP
 18872  007710                     __end_ofi2_delay:
 18873                           	opt stack 0
 18874                           tosu	equ	0xFFF
 18875                           tosh	equ	0xFFE
 18876                           tosl	equ	0xFFD
 18877                           pclatu	equ	0xFFB
 18878                           pclath	equ	0xFFA
 18879                           tblptru	equ	0xFF8
 18880                           tblptrh	equ	0xFF7
 18881                           tblptrl	equ	0xFF6
 18882                           tablat	equ	0xFF5
 18883                           prodh	equ	0xFF4
 18884                           prodl	equ	0xFF3
 18885                           intcon	equ	0xFF2
 18886                           indf0	equ	0xFEF
 18887                           postinc0	equ	0xFEE
 18888                           fsr0h	equ	0xFEA
 18889                           fsr0l	equ	0xFE9
 18890                           wreg	equ	0xFE8
 18891                           postdec1	equ	0xFE5
 18892                           fsr1h	equ	0xFE2
 18893                           fsr1l	equ	0xFE1
 18894                           indf2	equ	0xFDF
 18895                           postinc2	equ	0xFDE
 18896                           postdec2	equ	0xFDD
 18897                           fsr2h	equ	0xFDA
 18898                           fsr2l	equ	0xFD9
 18899                           status	equ	0xFD8
 18900                           
 18901 ;; *************** function i2_I2C_Write *****************
 18902 ;; Defined at:
 18903 ;;		line 42 in file "I2C.c"
 18904 ;; Parameters:    Size  Location     Type
 18905 ;;  d               2    1[COMRAM] unsigned int 
 18906 ;; Auto vars:     Size  Location     Type
 18907 ;;		None
 18908 ;; Return value:  Size  Location     Type
 18909 ;;                  1    wreg      void 
 18910 ;; Registers used:
 18911 ;;		wreg, status,2, status,0, cstack
 18912 ;; Tracked objects:
 18913 ;;		On entry : 0/0
 18914 ;;		On exit  : 0/0
 18915 ;;		Unchanged: 0/0
 18916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18917 ;;      Params:         2       0       0       0       0       0       0
 18918 ;;      Locals:         0       0       0       0       0       0       0
 18919 ;;      Temps:          0       0       0       0       0       0       0
 18920 ;;      Totals:         2       0       0       0       0       0       0
 18921 ;;Total ram usage:        2 bytes
 18922 ;; Hardware stack levels used:    1
 18923 ;; Hardware stack levels required when called:    1
 18924 ;; This function calls:
 18925 ;;		i2_I2C_Wait
 18926 ;; This function is called by:
 18927 ;;		i2_getDS1307TimeDate
 18928 ;;		i2_RTC_Init
 18929 ;;		i2_writeEEPROM_ext
 18930 ;; This function uses a non-reentrant model
 18931 ;;
 18932                           
 18933                           	psect	text80
 18934  00753A                     __ptext80:
 18935                           	opt stack 0
 18936  00753A                     i2_I2C_Write:
 18937                           	opt stack 0
 18938  00753A  FFFF               	dw	65535	; assembler added errata NOP
 18939                           
 18940                           ;I2C.c: 43: I2C_Wait();
 18941                           
 18942                           ;incstack = 0
 18943  00753C  ECD0  F03A         	call	i2_I2C_Wait	;wreg free
 18944                           
 18945                           ;I2C.c: 44: SSPBUF = d;
 18946  007540  C002  FFC9         	movff	i2I2C_Write@d,4041	;volatile
 18947  007544  0012               	return		;funcret
 18948  007546  FFFF               	dw	65535	; errata NOP
 18949  007548                     __end_ofi2_I2C_Write:
 18950                           	opt stack 0
 18951                           tosu	equ	0xFFF
 18952                           tosh	equ	0xFFE
 18953                           tosl	equ	0xFFD
 18954                           pclatu	equ	0xFFB
 18955                           pclath	equ	0xFFA
 18956                           tblptru	equ	0xFF8
 18957                           tblptrh	equ	0xFF7
 18958                           tblptrl	equ	0xFF6
 18959                           tablat	equ	0xFF5
 18960                           prodh	equ	0xFF4
 18961                           prodl	equ	0xFF3
 18962                           intcon	equ	0xFF2
 18963                           indf0	equ	0xFEF
 18964                           postinc0	equ	0xFEE
 18965                           fsr0h	equ	0xFEA
 18966                           fsr0l	equ	0xFE9
 18967                           wreg	equ	0xFE8
 18968                           postdec1	equ	0xFE5
 18969                           fsr1h	equ	0xFE2
 18970                           fsr1l	equ	0xFE1
 18971                           indf2	equ	0xFDF
 18972                           postinc2	equ	0xFDE
 18973                           postdec2	equ	0xFDD
 18974                           fsr2h	equ	0xFDA
 18975                           fsr2l	equ	0xFD9
 18976                           status	equ	0xFD8
 18977                           
 18978 ;; *************** function i2_I2C_Stop *****************
 18979 ;; Defined at:
 18980 ;;		line 36 in file "I2C.c"
 18981 ;; Parameters:    Size  Location     Type
 18982 ;;		None
 18983 ;; Auto vars:     Size  Location     Type
 18984 ;;		None
 18985 ;; Return value:  Size  Location     Type
 18986 ;;                  1    wreg      void 
 18987 ;; Registers used:
 18988 ;;		wreg, status,2, status,0, cstack
 18989 ;; Tracked objects:
 18990 ;;		On entry : 0/0
 18991 ;;		On exit  : 0/0
 18992 ;;		Unchanged: 0/0
 18993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18994 ;;      Params:         0       0       0       0       0       0       0
 18995 ;;      Locals:         0       0       0       0       0       0       0
 18996 ;;      Temps:          0       0       0       0       0       0       0
 18997 ;;      Totals:         0       0       0       0       0       0       0
 18998 ;;Total ram usage:        0 bytes
 18999 ;; Hardware stack levels used:    1
 19000 ;; Hardware stack levels required when called:    1
 19001 ;; This function calls:
 19002 ;;		i2_I2C_Wait
 19003 ;; This function is called by:
 19004 ;;		i2_getDS1307TimeDate
 19005 ;;		i2_RTC_Init
 19006 ;;		i2_writeEEPROM_ext
 19007 ;; This function uses a non-reentrant model
 19008 ;;
 19009                           
 19010                           	psect	text81
 19011  0074FE                     __ptext81:
 19012                           	opt stack 0
 19013  0074FE                     i2_I2C_Stop:
 19014                           	opt stack 0
 19015  0074FE  FFFF               	dw	65535	; assembler added errata NOP
 19016                           
 19017                           ;I2C.c: 37: I2C_Wait();
 19018                           
 19019                           ;incstack = 0
 19020  007500  ECD0  F03A         	call	i2_I2C_Wait	;wreg free
 19021                           
 19022                           ;I2C.c: 38: PEN = 1;
 19023  007504  84C5               	bsf	4037,2,c	;volatile
 19024  007506  0012               	return		;funcret
 19025  007508  FFFF               	dw	65535	; errata NOP
 19026  00750A                     __end_ofi2_I2C_Stop:
 19027                           	opt stack 0
 19028                           tosu	equ	0xFFF
 19029                           tosh	equ	0xFFE
 19030                           tosl	equ	0xFFD
 19031                           pclatu	equ	0xFFB
 19032                           pclath	equ	0xFFA
 19033                           tblptru	equ	0xFF8
 19034                           tblptrh	equ	0xFF7
 19035                           tblptrl	equ	0xFF6
 19036                           tablat	equ	0xFF5
 19037                           prodh	equ	0xFF4
 19038                           prodl	equ	0xFF3
 19039                           intcon	equ	0xFF2
 19040                           indf0	equ	0xFEF
 19041                           postinc0	equ	0xFEE
 19042                           fsr0h	equ	0xFEA
 19043                           fsr0l	equ	0xFE9
 19044                           wreg	equ	0xFE8
 19045                           postdec1	equ	0xFE5
 19046                           fsr1h	equ	0xFE2
 19047                           fsr1l	equ	0xFE1
 19048                           indf2	equ	0xFDF
 19049                           postinc2	equ	0xFDE
 19050                           postdec2	equ	0xFDD
 19051                           fsr2h	equ	0xFDA
 19052                           fsr2l	equ	0xFD9
 19053                           status	equ	0xFD8
 19054                           
 19055 ;; *************** function i2_I2C_Start *****************
 19056 ;; Defined at:
 19057 ;;		line 26 in file "I2C.c"
 19058 ;; Parameters:    Size  Location     Type
 19059 ;;		None
 19060 ;; Auto vars:     Size  Location     Type
 19061 ;;		None
 19062 ;; Return value:  Size  Location     Type
 19063 ;;                  1    wreg      void 
 19064 ;; Registers used:
 19065 ;;		wreg, status,2, status,0, cstack
 19066 ;; Tracked objects:
 19067 ;;		On entry : 0/0
 19068 ;;		On exit  : 0/0
 19069 ;;		Unchanged: 0/0
 19070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19071 ;;      Params:         0       0       0       0       0       0       0
 19072 ;;      Locals:         0       0       0       0       0       0       0
 19073 ;;      Temps:          0       0       0       0       0       0       0
 19074 ;;      Totals:         0       0       0       0       0       0       0
 19075 ;;Total ram usage:        0 bytes
 19076 ;; Hardware stack levels used:    1
 19077 ;; Hardware stack levels required when called:    1
 19078 ;; This function calls:
 19079 ;;		i2_I2C_Wait
 19080 ;; This function is called by:
 19081 ;;		i2_getDS1307TimeDate
 19082 ;;		i2_RTC_Init
 19083 ;;		i2_writeEEPROM_ext
 19084 ;; This function uses a non-reentrant model
 19085 ;;
 19086                           
 19087                           	psect	text82
 19088  0074F2                     __ptext82:
 19089                           	opt stack 0
 19090  0074F2                     i2_I2C_Start:
 19091                           	opt stack 0
 19092  0074F2  FFFF               	dw	65535	; assembler added errata NOP
 19093                           
 19094                           ;I2C.c: 27: I2C_Wait();
 19095                           
 19096                           ;incstack = 0
 19097  0074F4  ECD0  F03A         	call	i2_I2C_Wait	;wreg free
 19098                           
 19099                           ;I2C.c: 28: SEN = 1;
 19100  0074F8  80C5               	bsf	4037,0,c	;volatile
 19101  0074FA  0012               	return		;funcret
 19102  0074FC  FFFF               	dw	65535	; errata NOP
 19103  0074FE                     __end_ofi2_I2C_Start:
 19104                           	opt stack 0
 19105                           tosu	equ	0xFFF
 19106                           tosh	equ	0xFFE
 19107                           tosl	equ	0xFFD
 19108                           pclatu	equ	0xFFB
 19109                           pclath	equ	0xFFA
 19110                           tblptru	equ	0xFF8
 19111                           tblptrh	equ	0xFF7
 19112                           tblptrl	equ	0xFF6
 19113                           tablat	equ	0xFF5
 19114                           prodh	equ	0xFF4
 19115                           prodl	equ	0xFF3
 19116                           intcon	equ	0xFF2
 19117                           indf0	equ	0xFEF
 19118                           postinc0	equ	0xFEE
 19119                           fsr0h	equ	0xFEA
 19120                           fsr0l	equ	0xFE9
 19121                           wreg	equ	0xFE8
 19122                           postdec1	equ	0xFE5
 19123                           fsr1h	equ	0xFE2
 19124                           fsr1l	equ	0xFE1
 19125                           indf2	equ	0xFDF
 19126                           postinc2	equ	0xFDE
 19127                           postdec2	equ	0xFDD
 19128                           fsr2h	equ	0xFDA
 19129                           fsr2l	equ	0xFD9
 19130                           status	equ	0xFD8
 19131                           
 19132 ;; *************** function i2_I2C_Wait *****************
 19133 ;; Defined at:
 19134 ;;		line 22 in file "I2C.c"
 19135 ;; Parameters:    Size  Location     Type
 19136 ;;		None
 19137 ;; Auto vars:     Size  Location     Type
 19138 ;;		None
 19139 ;; Return value:  Size  Location     Type
 19140 ;;                  1    wreg      void 
 19141 ;; Registers used:
 19142 ;;		wreg, status,2, status,0
 19143 ;; Tracked objects:
 19144 ;;		On entry : 0/0
 19145 ;;		On exit  : 0/0
 19146 ;;		Unchanged: 0/0
 19147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19148 ;;      Params:         0       0       0       0       0       0       0
 19149 ;;      Locals:         0       0       0       0       0       0       0
 19150 ;;      Temps:          1       0       0       0       0       0       0
 19151 ;;      Totals:         1       0       0       0       0       0       0
 19152 ;;Total ram usage:        1 bytes
 19153 ;; Hardware stack levels used:    1
 19154 ;; This function calls:
 19155 ;;		Nothing
 19156 ;; This function is called by:
 19157 ;;		i2_I2C_Start
 19158 ;;		i2_I2C_Restart
 19159 ;;		i2_I2C_Stop
 19160 ;;		i2_I2C_Write
 19161 ;;		i2_I2C_Read
 19162 ;; This function uses a non-reentrant model
 19163 ;;
 19164                           
 19165                           	psect	text83
 19166  0075A0                     __ptext83:
 19167                           	opt stack 0
 19168  0075A0                     i2_I2C_Wait:
 19169                           	opt stack 0
 19170  0075A0  FFFF               	dw	65535	; assembler added errata NOP
 19171                           
 19172                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 19173                           
 19174                           ;incstack = 0
 19175  0075A2  B4C7               	btfsc	4039,2,c	;volatile
 19176  0075A4  D7FD               	goto	i2_I2C_Wait
 19177  0075A6  CFC5 F001          	movff	4037,??i2_I2C_Wait	;volatile
 19178  0075AA  0E1F               	movlw	31
 19179  0075AC  1601               	andwf	??i2_I2C_Wait,f,c
 19180  0075AE  B4D8               	btfsc	status,2,c
 19181  0075B0  0012               	return		;funcret
 19182  0075B2  FFFF               	dw	65535	; assembler added errata NOP
 19183  0075B4  D7F5               	goto	i2_I2C_Wait
 19184  0075B6  FFFF               	dw	65535	; errata NOP
 19185  0075B8                     __end_ofi2_I2C_Wait:
 19186                           	opt stack 0
 19187                           tosu	equ	0xFFF
 19188                           tosh	equ	0xFFE
 19189                           tosl	equ	0xFFD
 19190                           pclatu	equ	0xFFB
 19191                           pclath	equ	0xFFA
 19192                           tblptru	equ	0xFF8
 19193                           tblptrh	equ	0xFF7
 19194                           tblptrl	equ	0xFF6
 19195                           tablat	equ	0xFF5
 19196                           prodh	equ	0xFF4
 19197                           prodl	equ	0xFF3
 19198                           intcon	equ	0xFF2
 19199                           indf0	equ	0xFEF
 19200                           postinc0	equ	0xFEE
 19201                           fsr0h	equ	0xFEA
 19202                           fsr0l	equ	0xFE9
 19203                           wreg	equ	0xFE8
 19204                           postdec1	equ	0xFE5
 19205                           fsr1h	equ	0xFE2
 19206                           fsr1l	equ	0xFE1
 19207                           indf2	equ	0xFDF
 19208                           postinc2	equ	0xFDE
 19209                           postdec2	equ	0xFDD
 19210                           fsr2h	equ	0xFDA
 19211                           fsr2l	equ	0xFD9
 19212                           status	equ	0xFD8
 19213                           
 19214 ;; *************** function _readButtons *****************
 19215 ;; Defined at:
 19216 ;;		line 25 in file "teclado.h"
 19217 ;; Parameters:    Size  Location     Type
 19218 ;;		None
 19219 ;; Auto vars:     Size  Location     Type
 19220 ;;		None
 19221 ;; Return value:  Size  Location     Type
 19222 ;;                  1    wreg      void 
 19223 ;; Registers used:
 19224 ;;		wreg, status,2
 19225 ;; Tracked objects:
 19226 ;;		On entry : 0/0
 19227 ;;		On exit  : 0/0
 19228 ;;		Unchanged: 0/0
 19229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19230 ;;      Params:         0       0       0       0       0       0       0
 19231 ;;      Locals:         0       0       0       0       0       0       0
 19232 ;;      Temps:          0       0       0       0       0       0       0
 19233 ;;      Totals:         0       0       0       0       0       0       0
 19234 ;;Total ram usage:        0 bytes
 19235 ;; Hardware stack levels used:    1
 19236 ;; This function calls:
 19237 ;;		Nothing
 19238 ;; This function is called by:
 19239 ;;		_TIMER
 19240 ;; This function uses a non-reentrant model
 19241 ;;
 19242                           
 19243                           	psect	text84
 19244  003BEA                     __ptext84:
 19245                           	opt stack 0
 19246  003BEA                     _readButtons:
 19247                           	opt stack 0
 19248  003BEA  FFFF               	dw	65535	; assembler added errata NOP
 19249                           
 19250                           ;teclado.h: 26: if (!PORTBbits.RB2) {
 19251                           
 19252                           ;incstack = 0
 19253  003BEC  B481               	btfsc	3969,2,c	;volatile
 19254  003BEE  D002               	goto	i2l484
 19255                           
 19256                           ;teclado.h: 27: flag_b_esc = 1;
 19257  003BF0  0E01               	movlw	1
 19258  003BF2  6E63               	movwf	_flag_b_esc,c
 19259  003BF4                     i2l484:
 19260  003BF4  FFFF               	dw	65535	; assembler added errata NOP
 19261                           
 19262                           ;teclado.h: 28: }
 19263                           ;teclado.h: 29: if (PORTBbits.RB2 && flag_b_esc) {
 19264  003BF6  A481               	btfss	3969,2,c	;volatile
 19265  003BF8  D007               	goto	i2l485
 19266  003BFA  5063               	movf	_flag_b_esc,w,c
 19267  003BFC  B4D8               	btfsc	status,2,c
 19268  003BFE  D004               	goto	i2l485
 19269                           
 19270                           ;teclado.h: 30: _b_esc = 1;
 19271  003C00  0E01               	movlw	1
 19272  003C02  6E62               	movwf	__b_esc,c
 19273                           
 19274                           ;teclado.h: 31: flag_b_esc = 0;
 19275  003C04  0E00               	movlw	0
 19276  003C06  6E63               	movwf	_flag_b_esc,c
 19277  003C08                     i2l485:
 19278  003C08  FFFF               	dw	65535	; assembler added errata NOP
 19279                           
 19280                           ;teclado.h: 32: }
 19281                           ;teclado.h: 34: if (!PORTBbits.RB4) {
 19282  003C0A  B881               	btfsc	3969,4,c	;volatile
 19283  003C0C  D002               	goto	i2l486
 19284                           
 19285                           ;teclado.h: 35: flag_b_menos = 1;
 19286  003C0E  0E01               	movlw	1
 19287  003C10  6E61               	movwf	_flag_b_menos,c
 19288  003C12                     i2l486:
 19289  003C12  FFFF               	dw	65535	; assembler added errata NOP
 19290                           
 19291                           ;teclado.h: 36: }
 19292                           ;teclado.h: 37: if (PORTBbits.RB4 && flag_b_menos) {
 19293  003C14  A881               	btfss	3969,4,c	;volatile
 19294  003C16  D007               	goto	i2l487
 19295  003C18  5061               	movf	_flag_b_menos,w,c
 19296  003C1A  B4D8               	btfsc	status,2,c
 19297  003C1C  D004               	goto	i2l487
 19298                           
 19299                           ;teclado.h: 38: _b_menos = 1;
 19300  003C1E  0E01               	movlw	1
 19301  003C20  6E60               	movwf	__b_menos,c
 19302                           
 19303                           ;teclado.h: 39: flag_b_menos = 0;
 19304  003C22  0E00               	movlw	0
 19305  003C24  6E61               	movwf	_flag_b_menos,c
 19306  003C26                     i2l487:
 19307  003C26  FFFF               	dw	65535	; assembler added errata NOP
 19308                           
 19309                           ;teclado.h: 40: }
 19310                           ;teclado.h: 42: if (!PORTBbits.RB5) {
 19311  003C28  BA81               	btfsc	3969,5,c	;volatile
 19312  003C2A  D002               	goto	i2l488
 19313                           
 19314                           ;teclado.h: 43: flag_b_mais = 1;
 19315  003C2C  0E01               	movlw	1
 19316  003C2E  6E5F               	movwf	_flag_b_mais,c
 19317  003C30                     i2l488:
 19318  003C30  FFFF               	dw	65535	; assembler added errata NOP
 19319                           
 19320                           ;teclado.h: 44: }
 19321                           ;teclado.h: 45: if (PORTBbits.RB5 && flag_b_mais) {
 19322  003C32  AA81               	btfss	3969,5,c	;volatile
 19323  003C34  D007               	goto	i2l489
 19324  003C36  505F               	movf	_flag_b_mais,w,c
 19325  003C38  B4D8               	btfsc	status,2,c
 19326  003C3A  D004               	goto	i2l489
 19327                           
 19328                           ;teclado.h: 46: _b_mais = 1;
 19329  003C3C  0E01               	movlw	1
 19330  003C3E  6E5E               	movwf	__b_mais,c
 19331                           
 19332                           ;teclado.h: 47: flag_b_mais = 0;
 19333  003C40  0E00               	movlw	0
 19334  003C42  6E5F               	movwf	_flag_b_mais,c
 19335  003C44                     i2l489:
 19336  003C44  FFFF               	dw	65535	; assembler added errata NOP
 19337                           
 19338                           ;teclado.h: 48: }
 19339                           ;teclado.h: 50: if (!PORTBbits.RB3) {
 19340  003C46  B681               	btfsc	3969,3,c	;volatile
 19341  003C48  D002               	goto	i2l490
 19342                           
 19343                           ;teclado.h: 51: flag_b_ok = 1;
 19344  003C4A  0E01               	movlw	1
 19345  003C4C  6E5D               	movwf	_flag_b_ok,c
 19346  003C4E                     i2l490:
 19347  003C4E  FFFF               	dw	65535	; assembler added errata NOP
 19348                           
 19349                           ;teclado.h: 52: }
 19350                           ;teclado.h: 53: if (PORTBbits.RB3 && flag_b_ok) {
 19351  003C50  A681               	btfss	3969,3,c	;volatile
 19352  003C52  D007               	goto	i2l491
 19353  003C54  505D               	movf	_flag_b_ok,w,c
 19354  003C56  B4D8               	btfsc	status,2,c
 19355  003C58  D004               	goto	i2l491
 19356                           
 19357                           ;teclado.h: 54: _b_ok = 1;
 19358  003C5A  0E01               	movlw	1
 19359  003C5C  6E5C               	movwf	__b_ok,c
 19360                           
 19361                           ;teclado.h: 55: flag_b_ok = 0;
 19362  003C5E  0E00               	movlw	0
 19363  003C60  6E5D               	movwf	_flag_b_ok,c
 19364  003C62                     i2l491:
 19365  003C62  FFFF               	dw	65535	; assembler added errata NOP
 19366  003C64  0012               	return		;funcret
 19367  003C66  FFFF               	dw	65535	; errata NOP
 19368  003C68                     __end_of_readButtons:
 19369                           	opt stack 0
 19370                           tosu	equ	0xFFF
 19371                           tosh	equ	0xFFE
 19372                           tosl	equ	0xFFD
 19373                           pclatu	equ	0xFFB
 19374                           pclath	equ	0xFFA
 19375                           tblptru	equ	0xFF8
 19376                           tblptrh	equ	0xFF7
 19377                           tblptrl	equ	0xFF6
 19378                           tablat	equ	0xFF5
 19379                           prodh	equ	0xFF4
 19380                           prodl	equ	0xFF3
 19381                           intcon	equ	0xFF2
 19382                           indf0	equ	0xFEF
 19383                           postinc0	equ	0xFEE
 19384                           fsr0h	equ	0xFEA
 19385                           fsr0l	equ	0xFE9
 19386                           wreg	equ	0xFE8
 19387                           postdec1	equ	0xFE5
 19388                           fsr1h	equ	0xFE2
 19389                           fsr1l	equ	0xFE1
 19390                           indf2	equ	0xFDF
 19391                           postinc2	equ	0xFDE
 19392                           postdec2	equ	0xFDD
 19393                           fsr2h	equ	0xFDA
 19394                           fsr2l	equ	0xFD9
 19395                           status	equ	0xFD8
 19396                           
 19397 ;; *************** function _lerTransdutor *****************
 19398 ;; Defined at:
 19399 ;;		line 7 in file "transdutor.h"
 19400 ;; Parameters:    Size  Location     Type
 19401 ;;		None
 19402 ;; Auto vars:     Size  Location     Type
 19403 ;;  tensao          3   45[COMRAM] float 
 19404 ;;  _pressao        3   42[COMRAM] float 
 19405 ;;  i               1   41[COMRAM] unsigned char 
 19406 ;; Return value:  Size  Location     Type
 19407 ;;                  1    wreg      void 
 19408 ;; Registers used:
 19409 ;;		wreg, status,2, status,0, cstack
 19410 ;; Tracked objects:
 19411 ;;		On entry : 0/0
 19412 ;;		On exit  : 0/0
 19413 ;;		Unchanged: 0/0
 19414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19415 ;;      Params:         0       0       0       0       0       0       0
 19416 ;;      Locals:         7       0       0       0       0       0       0
 19417 ;;      Temps:          0       0       0       0       0       0       0
 19418 ;;      Totals:         7       0       0       0       0       0       0
 19419 ;;Total ram usage:        7 bytes
 19420 ;; Hardware stack levels used:    1
 19421 ;; Hardware stack levels required when called:    2
 19422 ;; This function calls:
 19423 ;;		___ftadd
 19424 ;;		___ftdiv
 19425 ;;		___ftge
 19426 ;;		___ftmul
 19427 ;;		___fttol
 19428 ;;		___lwtoft
 19429 ;;		_readADC
 19430 ;; This function is called by:
 19431 ;;		_TIMER
 19432 ;; This function uses a non-reentrant model
 19433 ;;
 19434                           
 19435                           	psect	text85
 19436  001D76                     __ptext85:
 19437                           	opt stack 0
 19438  001D76                     _lerTransdutor:
 19439                           	opt stack 0
 19440  001D76  FFFF               	dw	65535	; assembler added errata NOP
 19441                           
 19442                           ;transdutor.h: 8: char i = 0;
 19443                           
 19444                           ;incstack = 0
 19445  001D78  0E00               	movlw	0
 19446  001D7A  6E2A               	movwf	lerTransdutor@i,c
 19447                           
 19448                           ;transdutor.h: 9: float tensao = 0, _pressao = 0;
 19449  001D7C  0E00               	movlw	0
 19450  001D7E  6E2E               	movwf	lerTransdutor@tensao,c
 19451  001D80  0E00               	movlw	0
 19452  001D82  6E2F               	movwf	lerTransdutor@tensao+1,c
 19453  001D84  0E00               	movlw	0
 19454  001D86  6E30               	movwf	lerTransdutor@tensao+2,c
 19455  001D88  0E00               	movlw	0
 19456  001D8A  6E2B               	movwf	lerTransdutor@_pressao,c
 19457  001D8C  0E00               	movlw	0
 19458  001D8E  6E2C               	movwf	lerTransdutor@_pressao+1,c
 19459  001D90  0E00               	movlw	0
 19460  001D92  6E2D               	movwf	lerTransdutor@_pressao+2,c
 19461                           
 19462                           ;transdutor.h: 10: for (i = 0; i < 9; i++) {
 19463  001D94  0E00               	movlw	0
 19464  001D96  6E2A               	movwf	lerTransdutor@i,c
 19465  001D98                     i2l6238:
 19466  001D98  FFFF               	dw	65535	; assembler added errata NOP
 19467  001D9A  0E08               	movlw	8
 19468  001D9C  642A               	cpfsgt	lerTransdutor@i,c
 19469  001D9E  D001               	goto	i2l244
 19470  001DA0  D02D               	goto	i2u668_40
 19471  001DA2                     i2l244:
 19472  001DA2  FFFF               	dw	65535	; assembler added errata NOP
 19473                           
 19474                           ;transdutor.h: 11: tensao += readADC()*0.004887586;
 19475  001DA4  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 19476  001DA8  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 19477  001DAC  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 19478  001DB0  0E28               	movlw	40
 19479  001DB2  6E0F               	movwf	___ftmul@f2,c
 19480  001DB4  0EA0               	movlw	160
 19481  001DB6  6E10               	movwf	___ftmul@f2+1,c
 19482  001DB8  0E3B               	movlw	59
 19483  001DBA  6E11               	movwf	___ftmul@f2+2,c
 19484  001DBC  EC1B  F03B         	call	_readADC	;wreg free
 19485  001DC0  C001  F009         	movff	?_readADC,___lwtoft@c
 19486  001DC4  C002  F00A         	movff	?_readADC+1,___lwtoft@c+1
 19487  001DC8  EC07  F03B         	call	___lwtoft	;wreg free
 19488  001DCC  C009  F00C         	movff	?___lwtoft,___ftmul@f1
 19489  001DD0  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
 19490  001DD4  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
 19491  001DD8  ECCF  F016         	call	___ftmul	;wreg free
 19492  001DDC  C00C  F01E         	movff	?___ftmul,___ftadd@f2
 19493  001DE0  C00D  F01F         	movff	?___ftmul+1,___ftadd@f2+1
 19494  001DE4  C00E  F020         	movff	?___ftmul+2,___ftadd@f2+2
 19495  001DE8  ECC7  F00F         	call	___ftadd	;wreg free
 19496  001DEC  C01B  F02E         	movff	?___ftadd,lerTransdutor@tensao
 19497  001DF0  C01C  F02F         	movff	?___ftadd+1,lerTransdutor@tensao+1
 19498  001DF4  C01D  F030         	movff	?___ftadd+2,lerTransdutor@tensao+2
 19499  001DF8  2A2A               	incf	lerTransdutor@i,f,c
 19500  001DFA  D7CE               	goto	i2l6238
 19501  001DFC                     i2u668_40:
 19502  001DFC  FFFF               	dw	65535	; assembler added errata NOP
 19503                           
 19504                           ;transdutor.h: 12: }
 19505                           ;transdutor.h: 13: tensao = tensao / 10;
 19506  001DFE  C02E  F01B         	movff	lerTransdutor@tensao,___ftdiv@f1
 19507  001E02  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftdiv@f1+1
 19508  001E06  C030  F01D         	movff	lerTransdutor@tensao+2,___ftdiv@f1+2
 19509  001E0A  0E00               	movlw	0
 19510  001E0C  6E1E               	movwf	___ftdiv@f2,c
 19511  001E0E  0E20               	movlw	32
 19512  001E10  6E1F               	movwf	___ftdiv@f2+1,c
 19513  001E12  0E41               	movlw	65
 19514  001E14  6E20               	movwf	___ftdiv@f2+2,c
 19515  001E16  ECAB  F018         	call	___ftdiv	;wreg free
 19516  001E1A  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 19517  001E1E  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 19518  001E22  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 19519                           
 19520                           ;transdutor.h: 14: _tensao += (float) tensao;
 19521  001E26  C04C  F01B         	movff	__tensao,___ftadd@f1
 19522  001E2A  C04D  F01C         	movff	__tensao+1,___ftadd@f1+1
 19523  001E2E  C04E  F01D         	movff	__tensao+2,___ftadd@f1+2
 19524  001E32  C02E  F01E         	movff	lerTransdutor@tensao,___ftadd@f2
 19525  001E36  C02F  F01F         	movff	lerTransdutor@tensao+1,___ftadd@f2+1
 19526  001E3A  C030  F020         	movff	lerTransdutor@tensao+2,___ftadd@f2+2
 19527  001E3E  ECC7  F00F         	call	___ftadd	;wreg free
 19528  001E42  C01B  F04C         	movff	?___ftadd,__tensao
 19529  001E46  C01C  F04D         	movff	?___ftadd+1,__tensao+1
 19530  001E4A  C01D  F04E         	movff	?___ftadd+2,__tensao+2
 19531                           
 19532                           ;transdutor.h: 15: qtd_leitura++;
 19533  001E4E  2A70               	incf	_qtd_leitura,f,c
 19534                           
 19535                           ;transdutor.h: 17: if ((tensao < 0.4) || (tensao > 4.5)) {
 19536  001E50  C02E  F001         	movff	lerTransdutor@tensao,___ftge@ff1
 19537  001E54  C02F  F002         	movff	lerTransdutor@tensao+1,___ftge@ff1+1
 19538  001E58  C030  F003         	movff	lerTransdutor@tensao+2,___ftge@ff1+2
 19539  001E5C  0ECD               	movlw	205
 19540  001E5E  6E04               	movwf	___ftge@ff2,c
 19541  001E60  0ECC               	movlw	204
 19542  001E62  6E05               	movwf	___ftge@ff2+1,c
 19543  001E64  0E3E               	movlw	62
 19544  001E66  6E06               	movwf	___ftge@ff2+2,c
 19545  001E68  EC6B  F01B         	call	___ftge	;wreg free
 19546  001E6C  A0D8               	btfss	status,0,c
 19547  001E6E  D010               	goto	i2u670_40
 19548  001E70  0E00               	movlw	0
 19549  001E72  6E01               	movwf	___ftge@ff1,c
 19550  001E74  0E90               	movlw	144
 19551  001E76  6E02               	movwf	___ftge@ff1+1,c
 19552  001E78  0E40               	movlw	64
 19553  001E7A  6E03               	movwf	___ftge@ff1+2,c
 19554  001E7C  C02E  F004         	movff	lerTransdutor@tensao,___ftge@ff2
 19555  001E80  C02F  F005         	movff	lerTransdutor@tensao+1,___ftge@ff2+1
 19556  001E84  C030  F006         	movff	lerTransdutor@tensao+2,___ftge@ff2+2
 19557  001E88  EC6B  F01B         	call	___ftge	;wreg free
 19558  001E8C  B0D8               	btfsc	status,0,c
 19559  001E8E  D003               	goto	i2l246
 19560  001E90                     i2u670_40:
 19561  001E90  FFFF               	dw	65535	; assembler added errata NOP
 19562                           
 19563                           ;transdutor.h: 18: pressao = 99;
 19564  001E92  0E63               	movlw	99
 19565  001E94  D076               	goto	L38
 19566  001E96                     i2l246:
 19567  001E96  FFFF               	dw	65535	; assembler added errata NOP
 19568                           
 19569                           ; BSR set to: 0
 19570  001E98  0E05               	movlw	5
 19571  001E9A  6470               	cpfsgt	_qtd_leitura,c
 19572  001E9C  D075               	goto	i2l250
 19573                           
 19574                           ;transdutor.h: 20: qtd_leitura = 0;
 19575  001E9E  0E00               	movlw	0
 19576  001EA0  6E70               	movwf	_qtd_leitura,c
 19577                           
 19578                           ;transdutor.h: 21: tensao = (float) (_tensao / 6);
 19579  001EA2  C04C  F01B         	movff	__tensao,___ftdiv@f1
 19580  001EA6  C04D  F01C         	movff	__tensao+1,___ftdiv@f1+1
 19581  001EAA  C04E  F01D         	movff	__tensao+2,___ftdiv@f1+2
 19582  001EAE  0E00               	movlw	0
 19583  001EB0  6E1E               	movwf	___ftdiv@f2,c
 19584  001EB2  0EC0               	movlw	192
 19585  001EB4  6E1F               	movwf	___ftdiv@f2+1,c
 19586  001EB6  0E40               	movlw	64
 19587  001EB8  6E20               	movwf	___ftdiv@f2+2,c
 19588  001EBA  ECAB  F018         	call	___ftdiv	;wreg free
 19589  001EBE  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 19590  001EC2  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 19591  001EC6  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 19592                           
 19593                           ;transdutor.h: 22: _tensao = 0;
 19594  001ECA  0E00               	movlw	0
 19595  001ECC  6E4C               	movwf	__tensao,c
 19596  001ECE  0E00               	movlw	0
 19597  001ED0  6E4D               	movwf	__tensao+1,c
 19598  001ED2  0E00               	movlw	0
 19599  001ED4  6E4E               	movwf	__tensao+2,c
 19600                           
 19601                           ;transdutor.h: 23: _pressao = tensao - 0.5;
 19602  001ED6  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 19603  001EDA  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 19604  001EDE  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 19605  001EE2  0E00               	movlw	0
 19606  001EE4  6E1E               	movwf	___ftadd@f2,c
 19607  001EE6  0E00               	movlw	0
 19608  001EE8  6E1F               	movwf	___ftadd@f2+1,c
 19609  001EEA  0EBF               	movlw	191
 19610  001EEC  6E20               	movwf	___ftadd@f2+2,c
 19611  001EEE  ECC7  F00F         	call	___ftadd	;wreg free
 19612  001EF2  C01B  F02B         	movff	?___ftadd,lerTransdutor@_pressao
 19613  001EF6  C01C  F02C         	movff	?___ftadd+1,lerTransdutor@_pressao+1
 19614  001EFA  C01D  F02D         	movff	?___ftadd+2,lerTransdutor@_pressao+2
 19615                           
 19616                           ;transdutor.h: 24: _pressao = _pressao * 10 / 4;
 19617  001EFE  0E00               	movlw	0
 19618  001F00  6E0F               	movwf	___ftmul@f2,c
 19619  001F02  0E20               	movlw	32
 19620  001F04  6E10               	movwf	___ftmul@f2+1,c
 19621  001F06  0E41               	movlw	65
 19622  001F08  6E11               	movwf	___ftmul@f2+2,c
 19623  001F0A  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 19624  001F0E  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 19625  001F12  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 19626  001F16  ECCF  F016         	call	___ftmul	;wreg free
 19627  001F1A  C00C  F01B         	movff	?___ftmul,___ftdiv@f1
 19628  001F1E  C00D  F01C         	movff	?___ftmul+1,___ftdiv@f1+1
 19629  001F22  C00E  F01D         	movff	?___ftmul+2,___ftdiv@f1+2
 19630  001F26  0E00               	movlw	0
 19631  001F28  6E1E               	movwf	___ftdiv@f2,c
 19632  001F2A  0E80               	movlw	128
 19633  001F2C  6E1F               	movwf	___ftdiv@f2+1,c
 19634  001F2E  0E40               	movlw	64
 19635  001F30  6E20               	movwf	___ftdiv@f2+2,c
 19636  001F32  ECAB  F018         	call	___ftdiv	;wreg free
 19637  001F36  C01B  F02B         	movff	?___ftdiv,lerTransdutor@_pressao
 19638  001F3A  C01C  F02C         	movff	?___ftdiv+1,lerTransdutor@_pressao+1
 19639  001F3E  C01D  F02D         	movff	?___ftdiv+2,lerTransdutor@_pressao+2
 19640                           
 19641                           ;transdutor.h: 25: if (_pressao < 0) {
 19642  001F42  AE2D               	btfss	lerTransdutor@_pressao+2,7,c
 19643  001F44  D006               	goto	i2l251
 19644                           
 19645                           ;transdutor.h: 26: _pressao = 0;
 19646  001F46  0E00               	movlw	0
 19647  001F48  6E2B               	movwf	lerTransdutor@_pressao,c
 19648  001F4A  0E00               	movlw	0
 19649  001F4C  6E2C               	movwf	lerTransdutor@_pressao+1,c
 19650  001F4E  0E00               	movlw	0
 19651  001F50  6E2D               	movwf	lerTransdutor@_pressao+2,c
 19652  001F52                     i2l251:
 19653  001F52  FFFF               	dw	65535	; assembler added errata NOP
 19654                           
 19655                           ;transdutor.h: 27: }
 19656                           ;transdutor.h: 28: pressao = _pressao * 10;
 19657  001F54  0E00               	movlw	0
 19658  001F56  6E0F               	movwf	___ftmul@f2,c
 19659  001F58  0E20               	movlw	32
 19660  001F5A  6E10               	movwf	___ftmul@f2+1,c
 19661  001F5C  0E41               	movlw	65
 19662  001F5E  6E11               	movwf	___ftmul@f2+2,c
 19663  001F60  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 19664  001F64  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 19665  001F68  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 19666  001F6C  ECCF  F016         	call	___ftmul	;wreg free
 19667  001F70  C00C  F01B         	movff	?___ftmul,___fttol@f1
 19668  001F74  C00D  F01C         	movff	?___ftmul+1,___fttol@f1+1
 19669  001F78  C00E  F01D         	movff	?___ftmul+2,___fttol@f1+2
 19670  001F7C  EC37  F018         	call	___fttol	;wreg free
 19671  001F80  501B               	movf	?___fttol,w,c
 19672  001F82                     L38:
 19673  001F82  FFFF               	dw	65535	; assembler added errata NOP
 19674  001F84  0100               	movlb	0	; () banked
 19675  001F86  6FFD               	movwf	_pressao& (0+255),b
 19676  001F88                     i2l250:
 19677  001F88  FFFF               	dw	65535	; assembler added errata NOP
 19678                           
 19679                           ; BSR set to: 0
 19680                           
 19681                           ; BSR set to: 0
 19682  001F8A  0012               	return		;funcret
 19683  001F8C  FFFF               	dw	65535	; errata NOP
 19684  001F8E                     __end_of_lerTransdutor:
 19685                           	opt stack 0
 19686                           tosu	equ	0xFFF
 19687                           tosh	equ	0xFFE
 19688                           tosl	equ	0xFFD
 19689                           pclatu	equ	0xFFB
 19690                           pclath	equ	0xFFA
 19691                           tblptru	equ	0xFF8
 19692                           tblptrh	equ	0xFF7
 19693                           tblptrl	equ	0xFF6
 19694                           tablat	equ	0xFF5
 19695                           prodh	equ	0xFF4
 19696                           prodl	equ	0xFF3
 19697                           intcon	equ	0xFF2
 19698                           indf0	equ	0xFEF
 19699                           postinc0	equ	0xFEE
 19700                           fsr0h	equ	0xFEA
 19701                           fsr0l	equ	0xFE9
 19702                           wreg	equ	0xFE8
 19703                           postdec1	equ	0xFE5
 19704                           fsr1h	equ	0xFE2
 19705                           fsr1l	equ	0xFE1
 19706                           indf2	equ	0xFDF
 19707                           postinc2	equ	0xFDE
 19708                           postdec2	equ	0xFDD
 19709                           fsr2h	equ	0xFDA
 19710                           fsr2l	equ	0xFD9
 19711                           status	equ	0xFD8
 19712                           
 19713 ;; *************** function _readADC *****************
 19714 ;; Defined at:
 19715 ;;		line 8 in file "adc.h"
 19716 ;; Parameters:    Size  Location     Type
 19717 ;;		None
 19718 ;; Auto vars:     Size  Location     Type
 19719 ;;		None
 19720 ;; Return value:  Size  Location     Type
 19721 ;;                  2    0[COMRAM] unsigned int 
 19722 ;; Registers used:
 19723 ;;		wreg, status,2, status,0
 19724 ;; Tracked objects:
 19725 ;;		On entry : 0/0
 19726 ;;		On exit  : 0/0
 19727 ;;		Unchanged: 0/0
 19728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19729 ;;      Params:         2       0       0       0       0       0       0
 19730 ;;      Locals:         0       0       0       0       0       0       0
 19731 ;;      Temps:          2       0       0       0       0       0       0
 19732 ;;      Totals:         4       0       0       0       0       0       0
 19733 ;;Total ram usage:        4 bytes
 19734 ;; Hardware stack levels used:    1
 19735 ;; This function calls:
 19736 ;;		Nothing
 19737 ;; This function is called by:
 19738 ;;		_lerTransdutor
 19739 ;; This function uses a non-reentrant model
 19740 ;;
 19741                           
 19742                           	psect	text86
 19743  007636                     __ptext86:
 19744                           	opt stack 0
 19745  007636                     _readADC:
 19746                           	opt stack 0
 19747  007636  FFFF               	dw	65535	; assembler added errata NOP
 19748                           
 19749                           ;adc.h: 9: ADCON0bits.GO = 1;
 19750                           
 19751                           ;incstack = 0
 19752  007638  84C2               	bsf	4034,2,c	;volatile
 19753                           
 19754                           ;adc.h: 10: _delay((unsigned long)((50)*(8000000/4000000.0)));
 19755  00763A  0E19               	movlw	25
 19756  00763C                     i2u886_47:
 19757  00763C  FFFF               	dw	65535	; errata NOP
 19758  00763E  2EE8               	decfsz	wreg,f,c
 19759  007640  D7FD               	bra	i2u886_47
 19760  007642  FFFF               	dw	65535	; assembler added errata NOP
 19761  007644  A4C2               	btfss	4034,2,c	;volatile
 19762  007646  D7FD               	goto	i2l239
 19763                           
 19764                           ;adc.h: 12: }
 19765                           ;adc.h: 13: return((ADRESH<<8)+ ADRESL);
 19766  007648  50C4               	movf	4036,w,c	;volatile
 19767  00764A  6E04               	movwf	(??_readADC+1)& (0+255),c
 19768  00764C  6A03               	clrf	??_readADC& (0+255),c
 19769  00764E  50C3               	movf	4035,w,c	;volatile
 19770  007650  2403               	addwf	??_readADC,w,c
 19771  007652  6E01               	movwf	?_readADC,c
 19772  007654  0E00               	movlw	0
 19773  007656  2004               	addwfc	??_readADC+1,w,c
 19774  007658  6E02               	movwf	?_readADC+1,c
 19775  00765A  0012               	return		;funcret
 19776  00765C  FFFF               	dw	65535	; errata NOP
 19777  00765E                     __end_of_readADC:
 19778                           	opt stack 0
 19779                           tosu	equ	0xFFF
 19780                           tosh	equ	0xFFE
 19781                           tosl	equ	0xFFD
 19782                           pclatu	equ	0xFFB
 19783                           pclath	equ	0xFFA
 19784                           tblptru	equ	0xFF8
 19785                           tblptrh	equ	0xFF7
 19786                           tblptrl	equ	0xFF6
 19787                           tablat	equ	0xFF5
 19788                           prodh	equ	0xFF4
 19789                           prodl	equ	0xFF3
 19790                           intcon	equ	0xFF2
 19791                           indf0	equ	0xFEF
 19792                           postinc0	equ	0xFEE
 19793                           fsr0h	equ	0xFEA
 19794                           fsr0l	equ	0xFE9
 19795                           wreg	equ	0xFE8
 19796                           postdec1	equ	0xFE5
 19797                           fsr1h	equ	0xFE2
 19798                           fsr1l	equ	0xFE1
 19799                           indf2	equ	0xFDF
 19800                           postinc2	equ	0xFDE
 19801                           postdec2	equ	0xFDD
 19802                           fsr2h	equ	0xFDA
 19803                           fsr2l	equ	0xFD9
 19804                           status	equ	0xFD8
 19805                           
 19806 ;; *************** function ___lwtoft *****************
 19807 ;; Defined at:
 19808 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 19809 ;; Parameters:    Size  Location     Type
 19810 ;;  c               2    8[COMRAM] unsigned int 
 19811 ;; Auto vars:     Size  Location     Type
 19812 ;;		None
 19813 ;; Return value:  Size  Location     Type
 19814 ;;                  3    8[COMRAM] float 
 19815 ;; Registers used:
 19816 ;;		wreg, status,2, status,0, cstack
 19817 ;; Tracked objects:
 19818 ;;		On entry : 0/0
 19819 ;;		On exit  : 0/0
 19820 ;;		Unchanged: 0/0
 19821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19822 ;;      Params:         3       0       0       0       0       0       0
 19823 ;;      Locals:         0       0       0       0       0       0       0
 19824 ;;      Temps:          0       0       0       0       0       0       0
 19825 ;;      Totals:         3       0       0       0       0       0       0
 19826 ;;Total ram usage:        3 bytes
 19827 ;; Hardware stack levels used:    1
 19828 ;; Hardware stack levels required when called:    1
 19829 ;; This function calls:
 19830 ;;		___ftpack
 19831 ;; This function is called by:
 19832 ;;		_lerTransdutor
 19833 ;; This function uses a non-reentrant model
 19834 ;;
 19835                           
 19836                           	psect	text87
 19837  00760E                     __ptext87:
 19838                           	opt stack 0
 19839  00760E                     ___lwtoft:
 19840                           	opt stack 0
 19841  00760E  FFFF               	dw	65535	; assembler added errata NOP
 19842                           
 19843                           ;incstack = 0
 19844  007610  C009  F001         	movff	___lwtoft@c,___ftpack@arg
 19845  007614  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 19846  007618  6A03               	clrf	___ftpack@arg+2,c
 19847  00761A  0E8E               	movlw	142
 19848  00761C  6E04               	movwf	___ftpack@exp,c
 19849  00761E  0E00               	movlw	0
 19850  007620  6E05               	movwf	___ftpack@sign,c
 19851  007622  ECAE  F01A         	call	___ftpack	;wreg free
 19852  007626  C001  F009         	movff	?___ftpack,?___lwtoft
 19853  00762A  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
 19854  00762E  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
 19855  007632  0012               	return		;funcret
 19856  007634  FFFF               	dw	65535	; errata NOP
 19857  007636                     __end_of___lwtoft:
 19858                           	opt stack 0
 19859                           tosu	equ	0xFFF
 19860                           tosh	equ	0xFFE
 19861                           tosl	equ	0xFFD
 19862                           pclatu	equ	0xFFB
 19863                           pclath	equ	0xFFA
 19864                           tblptru	equ	0xFF8
 19865                           tblptrh	equ	0xFF7
 19866                           tblptrl	equ	0xFF6
 19867                           tablat	equ	0xFF5
 19868                           prodh	equ	0xFF4
 19869                           prodl	equ	0xFF3
 19870                           intcon	equ	0xFF2
 19871                           indf0	equ	0xFEF
 19872                           postinc0	equ	0xFEE
 19873                           fsr0h	equ	0xFEA
 19874                           fsr0l	equ	0xFE9
 19875                           wreg	equ	0xFE8
 19876                           postdec1	equ	0xFE5
 19877                           fsr1h	equ	0xFE2
 19878                           fsr1l	equ	0xFE1
 19879                           indf2	equ	0xFDF
 19880                           postinc2	equ	0xFDE
 19881                           postdec2	equ	0xFDD
 19882                           fsr2h	equ	0xFDA
 19883                           fsr2l	equ	0xFD9
 19884                           status	equ	0xFD8
 19885                           
 19886 ;; *************** function ___fttol *****************
 19887 ;; Defined at:
 19888 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 19889 ;; Parameters:    Size  Location     Type
 19890 ;;  f1              3   26[COMRAM] float 
 19891 ;; Auto vars:     Size  Location     Type
 19892 ;;  lval            4   36[COMRAM] unsigned long 
 19893 ;;  exp1            1   40[COMRAM] unsigned char 
 19894 ;;  sign1           1   35[COMRAM] unsigned char 
 19895 ;; Return value:  Size  Location     Type
 19896 ;;                  4   26[COMRAM] long 
 19897 ;; Registers used:
 19898 ;;		wreg, status,2, status,0
 19899 ;; Tracked objects:
 19900 ;;		On entry : 0/0
 19901 ;;		On exit  : 0/0
 19902 ;;		Unchanged: 0/0
 19903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19904 ;;      Params:         4       0       0       0       0       0       0
 19905 ;;      Locals:         6       0       0       0       0       0       0
 19906 ;;      Temps:          5       0       0       0       0       0       0
 19907 ;;      Totals:        15       0       0       0       0       0       0
 19908 ;;Total ram usage:       15 bytes
 19909 ;; Hardware stack levels used:    1
 19910 ;; This function calls:
 19911 ;;		Nothing
 19912 ;; This function is called by:
 19913 ;;		_lerTransdutor
 19914 ;; This function uses a non-reentrant model
 19915 ;;
 19916                           
 19917                           	psect	text88
 19918  00306E                     __ptext88:
 19919                           	opt stack 0
 19920  00306E                     ___fttol:
 19921                           	opt stack 0
 19922  00306E  FFFF               	dw	65535	; assembler added errata NOP
 19923                           
 19924                           ;incstack = 0
 19925  003070  C01D  F01F         	movff	___fttol@f1+2,??___fttol
 19926  003074  6A20               	clrf	(??___fttol+1)& (0+255),c
 19927  003076  6A21               	clrf	(??___fttol+2)& (0+255),c
 19928  003078  341C               	rlcf	___fttol@f1+1,w,c
 19929  00307A  361F               	rlcf	??___fttol& (0+255),f,c
 19930  00307C  E301               	bnc	u656_41
 19931  00307E  8020               	bsf	(??___fttol+1)& (0+255),0,c
 19932  003080                     u656_41:
 19933  003080  501F               	movf	??___fttol,w,c
 19934  003082  6E29               	movwf	___fttol@exp1,c
 19935  003084  5029               	movf	___fttol@exp1,w,c
 19936  003086  B4D8               	btfsc	status,2,c
 19937  003088  D039               	goto	i2u661_40
 19938  00308A  0E17               	movlw	23
 19939  00308C  6E1F               	movwf	??___fttol& (0+255),c
 19940  00308E  C01B  F020         	movff	___fttol@f1,??___fttol+1
 19941  003092  C01C  F021         	movff	___fttol@f1+1,??___fttol+2
 19942  003096  C01D  F022         	movff	___fttol@f1+2,??___fttol+3
 19943  00309A  281F               	incf	??___fttol,w,c
 19944  00309C  6E23               	movwf	(??___fttol+4)& (0+255),c
 19945  00309E  D005               	goto	i2u658_40
 19946  0030A0                     i2u658_45:
 19947  0030A0  FFFF               	dw	65535	; assembler added errata NOP
 19948  0030A2  90D8               	bcf	status,0,c
 19949  0030A4  3222               	rrcf	??___fttol+3,f,c
 19950  0030A6  3221               	rrcf	??___fttol+2,f,c
 19951  0030A8  3220               	rrcf	??___fttol+1,f,c
 19952  0030AA                     i2u658_40:
 19953  0030AA  FFFF               	dw	65535	; assembler added errata NOP
 19954  0030AC  2E23               	decfsz	(??___fttol+4)& (0+255),f,c
 19955  0030AE  D7F8               	goto	i2u658_45
 19956  0030B0  5020               	movf	??___fttol+1,w,c
 19957  0030B2  6E24               	movwf	___fttol@sign1,c
 19958  0030B4  8E1C               	bsf	___fttol@f1+1,7,c
 19959  0030B6  0EFF               	movlw	255
 19960  0030B8  161B               	andwf	___fttol@f1,f,c
 19961  0030BA  0EFF               	movlw	255
 19962  0030BC  161C               	andwf	___fttol@f1+1,f,c
 19963  0030BE  0E00               	movlw	0
 19964  0030C0  161D               	andwf	___fttol@f1+2,f,c
 19965  0030C2  501B               	movf	___fttol@f1,w,c
 19966  0030C4  6E25               	movwf	___fttol@lval,c
 19967  0030C6  501C               	movf	___fttol@f1+1,w,c
 19968  0030C8  6E26               	movwf	___fttol@lval+1,c
 19969  0030CA  501D               	movf	___fttol@f1+2,w,c
 19970  0030CC  6E27               	movwf	___fttol@lval+2,c
 19971  0030CE  6A28               	clrf	___fttol@lval+3,c
 19972  0030D0  0E8E               	movlw	142
 19973  0030D2  5E29               	subwf	___fttol@exp1,f,c
 19974  0030D4  AE29               	btfss	___fttol@exp1,7,c
 19975  0030D6  D00E               	goto	i2l1428
 19976  0030D8  5029               	movf	___fttol@exp1,w,c
 19977  0030DA  0A80               	xorlw	128
 19978  0030DC  0F8F               	addlw	143
 19979  0030DE  A0D8               	btfss	status,0,c
 19980  0030E0  D00D               	goto	i2u661_40
 19981  0030E2  FFFF               	dw	65535	; assembler added errata NOP
 19982  0030E4  90D8               	bcf	status,0,c
 19983  0030E6  3228               	rrcf	___fttol@lval+3,f,c
 19984  0030E8  3227               	rrcf	___fttol@lval+2,f,c
 19985  0030EA  3226               	rrcf	___fttol@lval+1,f,c
 19986  0030EC  3225               	rrcf	___fttol@lval,f,c
 19987  0030EE  3E29               	incfsz	___fttol@exp1,f,c
 19988  0030F0  D7F8               	goto	i2l1429
 19989  0030F2  D019               	goto	i2u662_40
 19990  0030F4                     i2l1428:
 19991  0030F4  FFFF               	dw	65535	; assembler added errata NOP
 19992  0030F6  0E17               	movlw	23
 19993  0030F8  6429               	cpfsgt	___fttol@exp1,c
 19994  0030FA  D011               	goto	i2l1434
 19995  0030FC                     i2u661_40:
 19996  0030FC  FFFF               	dw	65535	; assembler added errata NOP
 19997  0030FE  0E00               	movlw	0
 19998  003100  6E1B               	movwf	?___fttol,c
 19999  003102  0E00               	movlw	0
 20000  003104  6E1C               	movwf	?___fttol+1,c
 20001  003106  0E00               	movlw	0
 20002  003108  6E1D               	movwf	?___fttol+2,c
 20003  00310A  0E00               	movlw	0
 20004  00310C  6E1E               	movwf	?___fttol+3,c
 20005  00310E  D020               	goto	i2l6126
 20006  003110  FFFF               	dw	65535	; assembler added errata NOP
 20007  003112  90D8               	bcf	status,0,c
 20008  003114  3625               	rlcf	___fttol@lval,f,c
 20009  003116  3626               	rlcf	___fttol@lval+1,f,c
 20010  003118  3627               	rlcf	___fttol@lval+2,f,c
 20011  00311A  3628               	rlcf	___fttol@lval+3,f,c
 20012  00311C  0629               	decf	___fttol@exp1,f,c
 20013  00311E                     i2l1434:
 20014  00311E  FFFF               	dw	65535	; assembler added errata NOP
 20015  003120  5029               	movf	___fttol@exp1,w,c
 20016  003122  A4D8               	btfss	status,2,c
 20017  003124  D7F5               	goto	i2l1435
 20018  003126                     i2u662_40:
 20019  003126  FFFF               	dw	65535	; assembler added errata NOP
 20020  003128  5024               	movf	___fttol@sign1,w,c
 20021  00312A  B4D8               	btfsc	status,2,c
 20022  00312C  D008               	goto	i2l1437
 20023  00312E  1E28               	comf	___fttol@lval+3,f,c
 20024  003130  1E27               	comf	___fttol@lval+2,f,c
 20025  003132  1E26               	comf	___fttol@lval+1,f,c
 20026  003134  6C25               	negf	___fttol@lval,c
 20027  003136  0E00               	movlw	0
 20028  003138  2226               	addwfc	___fttol@lval+1,f,c
 20029  00313A  2227               	addwfc	___fttol@lval+2,f,c
 20030  00313C  2228               	addwfc	___fttol@lval+3,f,c
 20031  00313E                     i2l1437:
 20032  00313E  FFFF               	dw	65535	; assembler added errata NOP
 20033  003140  C025  F01B         	movff	___fttol@lval,?___fttol
 20034  003144  C026  F01C         	movff	___fttol@lval+1,?___fttol+1
 20035  003148  C027  F01D         	movff	___fttol@lval+2,?___fttol+2
 20036  00314C  C028  F01E         	movff	___fttol@lval+3,?___fttol+3
 20037  003150                     i2l6126:
 20038  003150  FFFF               	dw	65535	; assembler added errata NOP
 20039  003152  0012               	return		;funcret
 20040  003154  FFFF               	dw	65535	; errata NOP
 20041  003156                     __end_of___fttol:
 20042                           	opt stack 0
 20043                           tosu	equ	0xFFF
 20044                           tosh	equ	0xFFE
 20045                           tosl	equ	0xFFD
 20046                           pclatu	equ	0xFFB
 20047                           pclath	equ	0xFFA
 20048                           tblptru	equ	0xFF8
 20049                           tblptrh	equ	0xFF7
 20050                           tblptrl	equ	0xFF6
 20051                           tablat	equ	0xFF5
 20052                           prodh	equ	0xFF4
 20053                           prodl	equ	0xFF3
 20054                           intcon	equ	0xFF2
 20055                           indf0	equ	0xFEF
 20056                           postinc0	equ	0xFEE
 20057                           fsr0h	equ	0xFEA
 20058                           fsr0l	equ	0xFE9
 20059                           wreg	equ	0xFE8
 20060                           postdec1	equ	0xFE5
 20061                           fsr1h	equ	0xFE2
 20062                           fsr1l	equ	0xFE1
 20063                           indf2	equ	0xFDF
 20064                           postinc2	equ	0xFDE
 20065                           postdec2	equ	0xFDD
 20066                           fsr2h	equ	0xFDA
 20067                           fsr2l	equ	0xFD9
 20068                           status	equ	0xFD8
 20069                           
 20070 ;; *************** function ___ftmul *****************
 20071 ;; Defined at:
 20072 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 20073 ;; Parameters:    Size  Location     Type
 20074 ;;  f1              3   11[COMRAM] float 
 20075 ;;  f2              3   14[COMRAM] float 
 20076 ;; Auto vars:     Size  Location     Type
 20077 ;;  f3_as_produc    3   21[COMRAM] unsigned um
 20078 ;;  sign            1   25[COMRAM] unsigned char 
 20079 ;;  cntr            1   24[COMRAM] unsigned char 
 20080 ;;  exp             1   20[COMRAM] unsigned char 
 20081 ;; Return value:  Size  Location     Type
 20082 ;;                  3   11[COMRAM] float 
 20083 ;; Registers used:
 20084 ;;		wreg, status,2, status,0, cstack
 20085 ;; Tracked objects:
 20086 ;;		On entry : 0/0
 20087 ;;		On exit  : 0/0
 20088 ;;		Unchanged: 0/0
 20089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20090 ;;      Params:         6       0       0       0       0       0       0
 20091 ;;      Locals:         6       0       0       0       0       0       0
 20092 ;;      Temps:          3       0       0       0       0       0       0
 20093 ;;      Totals:        15       0       0       0       0       0       0
 20094 ;;Total ram usage:       15 bytes
 20095 ;; Hardware stack levels used:    1
 20096 ;; Hardware stack levels required when called:    1
 20097 ;; This function calls:
 20098 ;;		___ftpack
 20099 ;; This function is called by:
 20100 ;;		_lerTransdutor
 20101 ;;		_map
 20102 ;; This function uses a non-reentrant model
 20103 ;;
 20104                           
 20105                           	psect	text89
 20106  002D9E                     __ptext89:
 20107                           	opt stack 0
 20108  002D9E                     ___ftmul:
 20109                           	opt stack 0
 20110  002D9E  FFFF               	dw	65535	; assembler added errata NOP
 20111                           
 20112                           ;incstack = 0
 20113  002DA0  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
 20114  002DA4  6A13               	clrf	(??___ftmul+1)& (0+255),c
 20115  002DA6  6A14               	clrf	(??___ftmul+2)& (0+255),c
 20116  002DA8  340D               	rlcf	___ftmul@f1+1,w,c
 20117  002DAA  3612               	rlcf	??___ftmul& (0+255),f,c
 20118  002DAC  E301               	bnc	u647_41
 20119  002DAE  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 20120  002DB0                     u647_41:
 20121  002DB0  5012               	movf	??___ftmul,w,c
 20122  002DB2  6E15               	movwf	___ftmul@exp,c
 20123  002DB4  5015               	movf	___ftmul@exp,w,c
 20124  002DB6  B4D8               	btfsc	status,2,c
 20125  002DB8  D00D               	goto	i2u650_40
 20126  002DBA  C011  F012         	movff	___ftmul@f2+2,??___ftmul
 20127  002DBE  6A13               	clrf	(??___ftmul+1)& (0+255),c
 20128  002DC0  6A14               	clrf	(??___ftmul+2)& (0+255),c
 20129  002DC2  3410               	rlcf	___ftmul@f2+1,w,c
 20130  002DC4  3612               	rlcf	??___ftmul& (0+255),f,c
 20131  002DC6  E301               	bnc	u649_41
 20132  002DC8  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 20133  002DCA                     u649_41:
 20134  002DCA  5012               	movf	??___ftmul,w,c
 20135  002DCC  6E1A               	movwf	___ftmul@sign,c
 20136  002DCE  501A               	movf	___ftmul@sign,w,c
 20137  002DD0  A4D8               	btfss	status,2,c
 20138  002DD2  D008               	goto	i2l1407
 20139  002DD4                     i2u650_40:
 20140  002DD4  FFFF               	dw	65535	; assembler added errata NOP
 20141  002DD6  0E00               	movlw	0
 20142  002DD8  6E0C               	movwf	?___ftmul,c
 20143  002DDA  0E00               	movlw	0
 20144  002DDC  6E0D               	movwf	?___ftmul+1,c
 20145  002DDE  0E00               	movlw	0
 20146  002DE0  6E0E               	movwf	?___ftmul+2,c
 20147  002DE2  D056               	goto	i2l6062
 20148  002DE4                     i2l1407:
 20149  002DE4  FFFF               	dw	65535	; assembler added errata NOP
 20150  002DE6  501A               	movf	___ftmul@sign,w,c
 20151  002DE8  0F7B               	addlw	123
 20152  002DEA  2615               	addwf	___ftmul@exp,f,c
 20153  002DEC  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
 20154  002DF0  5011               	movf	___ftmul@f2+2,w,c
 20155  002DF2  1A1A               	xorwf	___ftmul@sign,f,c
 20156  002DF4  0E80               	movlw	128
 20157  002DF6  161A               	andwf	___ftmul@sign,f,c
 20158  002DF8  8E0D               	bsf	___ftmul@f1+1,7,c
 20159  002DFA  8E10               	bsf	___ftmul@f2+1,7,c
 20160  002DFC  0EFF               	movlw	255
 20161  002DFE  160F               	andwf	___ftmul@f2,f,c
 20162  002E00  0EFF               	movlw	255
 20163  002E02  1610               	andwf	___ftmul@f2+1,f,c
 20164  002E04  0E00               	movlw	0
 20165  002E06  1611               	andwf	___ftmul@f2+2,f,c
 20166  002E08  0E00               	movlw	0
 20167  002E0A  6E16               	movwf	___ftmul@f3_as_product,c
 20168  002E0C  0E00               	movlw	0
 20169  002E0E  6E17               	movwf	___ftmul@f3_as_product+1,c
 20170  002E10  0E00               	movlw	0
 20171  002E12  6E18               	movwf	___ftmul@f3_as_product+2,c
 20172  002E14  0E07               	movlw	7
 20173  002E16  6E19               	movwf	___ftmul@cntr,c
 20174  002E18  FFFF               	dw	65535	; assembler added errata NOP
 20175  002E1A  A00C               	btfss	___ftmul@f1,0,c
 20176  002E1C  D006               	goto	i2l1409
 20177  002E1E  500F               	movf	___ftmul@f2,w,c
 20178  002E20  2616               	addwf	___ftmul@f3_as_product,f,c
 20179  002E22  5010               	movf	___ftmul@f2+1,w,c
 20180  002E24  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 20181  002E26  5011               	movf	___ftmul@f2+2,w,c
 20182  002E28  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 20183  002E2A                     i2l1409:
 20184  002E2A  FFFF               	dw	65535	; assembler added errata NOP
 20185  002E2C  90D8               	bcf	status,0,c
 20186  002E2E  320E               	rrcf	___ftmul@f1+2,f,c
 20187  002E30  320D               	rrcf	___ftmul@f1+1,f,c
 20188  002E32  320C               	rrcf	___ftmul@f1,f,c
 20189  002E34  90D8               	bcf	status,0,c
 20190  002E36  360F               	rlcf	___ftmul@f2,f,c
 20191  002E38  3610               	rlcf	___ftmul@f2+1,f,c
 20192  002E3A  3611               	rlcf	___ftmul@f2+2,f,c
 20193  002E3C  2E19               	decfsz	___ftmul@cntr,f,c
 20194  002E3E  D7EC               	goto	i2l1408
 20195  002E40  0E09               	movlw	9
 20196  002E42  6E19               	movwf	___ftmul@cntr,c
 20197  002E44  FFFF               	dw	65535	; assembler added errata NOP
 20198  002E46  A00C               	btfss	___ftmul@f1,0,c
 20199  002E48  D006               	goto	i2l1412
 20200  002E4A  500F               	movf	___ftmul@f2,w,c
 20201  002E4C  2616               	addwf	___ftmul@f3_as_product,f,c
 20202  002E4E  5010               	movf	___ftmul@f2+1,w,c
 20203  002E50  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 20204  002E52  5011               	movf	___ftmul@f2+2,w,c
 20205  002E54  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 20206  002E56                     i2l1412:
 20207  002E56  FFFF               	dw	65535	; assembler added errata NOP
 20208  002E58  90D8               	bcf	status,0,c
 20209  002E5A  320E               	rrcf	___ftmul@f1+2,f,c
 20210  002E5C  320D               	rrcf	___ftmul@f1+1,f,c
 20211  002E5E  320C               	rrcf	___ftmul@f1,f,c
 20212  002E60  90D8               	bcf	status,0,c
 20213  002E62  3218               	rrcf	___ftmul@f3_as_product+2,f,c
 20214  002E64  3217               	rrcf	___ftmul@f3_as_product+1,f,c
 20215  002E66  3216               	rrcf	___ftmul@f3_as_product,f,c
 20216  002E68  2E19               	decfsz	___ftmul@cntr,f,c
 20217  002E6A  D7EC               	goto	i2l1411
 20218  002E6C  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 20219  002E70  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 20220  002E74  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 20221  002E78  C015  F004         	movff	___ftmul@exp,___ftpack@exp
 20222  002E7C  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
 20223  002E80  ECAE  F01A         	call	___ftpack	;wreg free
 20224  002E84  C001  F00C         	movff	?___ftpack,?___ftmul
 20225  002E88  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
 20226  002E8C  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
 20227  002E90                     i2l6062:
 20228  002E90  FFFF               	dw	65535	; assembler added errata NOP
 20229  002E92  0012               	return		;funcret
 20230  002E94  FFFF               	dw	65535	; errata NOP
 20231  002E96                     __end_of___ftmul:
 20232                           	opt stack 0
 20233                           tosu	equ	0xFFF
 20234                           tosh	equ	0xFFE
 20235                           tosl	equ	0xFFD
 20236                           pclatu	equ	0xFFB
 20237                           pclath	equ	0xFFA
 20238                           tblptru	equ	0xFF8
 20239                           tblptrh	equ	0xFF7
 20240                           tblptrl	equ	0xFF6
 20241                           tablat	equ	0xFF5
 20242                           prodh	equ	0xFF4
 20243                           prodl	equ	0xFF3
 20244                           intcon	equ	0xFF2
 20245                           indf0	equ	0xFEF
 20246                           postinc0	equ	0xFEE
 20247                           fsr0h	equ	0xFEA
 20248                           fsr0l	equ	0xFE9
 20249                           wreg	equ	0xFE8
 20250                           postdec1	equ	0xFE5
 20251                           fsr1h	equ	0xFE2
 20252                           fsr1l	equ	0xFE1
 20253                           indf2	equ	0xFDF
 20254                           postinc2	equ	0xFDE
 20255                           postdec2	equ	0xFDD
 20256                           fsr2h	equ	0xFDA
 20257                           fsr2l	equ	0xFD9
 20258                           status	equ	0xFD8
 20259                           
 20260 ;; *************** function ___ftge *****************
 20261 ;; Defined at:
 20262 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 20263 ;; Parameters:    Size  Location     Type
 20264 ;;  ff1             3    0[COMRAM] float 
 20265 ;;  ff2             3    3[COMRAM] float 
 20266 ;; Auto vars:     Size  Location     Type
 20267 ;;		None
 20268 ;; Return value:  Size  Location     Type
 20269 ;;		None               void
 20270 ;; Registers used:
 20271 ;;		wreg, status,2, status,0
 20272 ;; Tracked objects:
 20273 ;;		On entry : 0/0
 20274 ;;		On exit  : 0/0
 20275 ;;		Unchanged: 0/0
 20276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20277 ;;      Params:         6       0       0       0       0       0       0
 20278 ;;      Locals:         0       0       0       0       0       0       0
 20279 ;;      Temps:          3       0       0       0       0       0       0
 20280 ;;      Totals:         9       0       0       0       0       0       0
 20281 ;;Total ram usage:        9 bytes
 20282 ;; Hardware stack levels used:    1
 20283 ;; This function calls:
 20284 ;;		Nothing
 20285 ;; This function is called by:
 20286 ;;		_lerTransdutor
 20287 ;; This function uses a non-reentrant model
 20288 ;;
 20289                           
 20290                           	psect	text90
 20291  0036D6                     __ptext90:
 20292                           	opt stack 0
 20293  0036D6                     ___ftge:
 20294                           	opt stack 0
 20295  0036D6  FFFF               	dw	65535	; assembler added errata NOP
 20296                           
 20297                           ;incstack = 0
 20298  0036D8  AE03               	btfss	___ftge@ff1+2,7,c
 20299  0036DA  D016               	goto	i2l1398
 20300  0036DC  C001  F007         	movff	___ftge@ff1,??___ftge
 20301  0036E0  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 20302  0036E4  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 20303  0036E8  1E07               	comf	??___ftge,f,c
 20304  0036EA  1E08               	comf	??___ftge+1,f,c
 20305  0036EC  1E09               	comf	??___ftge+2,f,c
 20306  0036EE  2A07               	incf	??___ftge,f,c
 20307  0036F0  0E00               	movlw	0
 20308  0036F2  2208               	addwfc	??___ftge+1,f,c
 20309  0036F4  2209               	addwfc	??___ftge+2,f,c
 20310  0036F6  0E00               	movlw	0
 20311  0036F8  2407               	addwf	??___ftge,w,c
 20312  0036FA  6E01               	movwf	___ftge@ff1,c
 20313  0036FC  0E00               	movlw	0
 20314  0036FE  2008               	addwfc	??___ftge+1,w,c
 20315  003700  6E02               	movwf	___ftge@ff1+1,c
 20316  003702  0E80               	movlw	128
 20317  003704  2009               	addwfc	??___ftge+2,w,c
 20318  003706  6E03               	movwf	___ftge@ff1+2,c
 20319  003708                     i2l1398:
 20320  003708  FFFF               	dw	65535	; assembler added errata NOP
 20321  00370A  AE06               	btfss	___ftge@ff2+2,7,c
 20322  00370C  D016               	goto	i2l1399
 20323  00370E  C004  F007         	movff	___ftge@ff2,??___ftge
 20324  003712  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 20325  003716  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 20326  00371A  1E07               	comf	??___ftge,f,c
 20327  00371C  1E08               	comf	??___ftge+1,f,c
 20328  00371E  1E09               	comf	??___ftge+2,f,c
 20329  003720  2A07               	incf	??___ftge,f,c
 20330  003722  0E00               	movlw	0
 20331  003724  2208               	addwfc	??___ftge+1,f,c
 20332  003726  2209               	addwfc	??___ftge+2,f,c
 20333  003728  0E00               	movlw	0
 20334  00372A  2407               	addwf	??___ftge,w,c
 20335  00372C  6E04               	movwf	___ftge@ff2,c
 20336  00372E  0E00               	movlw	0
 20337  003730  2008               	addwfc	??___ftge+1,w,c
 20338  003732  6E05               	movwf	___ftge@ff2+1,c
 20339  003734  0E80               	movlw	128
 20340  003736  2009               	addwfc	??___ftge+2,w,c
 20341  003738  6E06               	movwf	___ftge@ff2+2,c
 20342  00373A                     i2l1399:
 20343  00373A  FFFF               	dw	65535	; assembler added errata NOP
 20344  00373C  0E00               	movlw	0
 20345  00373E  1A01               	xorwf	___ftge@ff1,f,c
 20346  003740  0E00               	movlw	0
 20347  003742  1A02               	xorwf	___ftge@ff1+1,f,c
 20348  003744  0E80               	movlw	128
 20349  003746  1A03               	xorwf	___ftge@ff1+2,f,c
 20350  003748  0E00               	movlw	0
 20351  00374A  1A04               	xorwf	___ftge@ff2,f,c
 20352  00374C  0E00               	movlw	0
 20353  00374E  1A05               	xorwf	___ftge@ff2+1,f,c
 20354  003750  0E80               	movlw	128
 20355  003752  1A06               	xorwf	___ftge@ff2+2,f,c
 20356  003754  5004               	movf	___ftge@ff2,w,c
 20357  003756  5C01               	subwf	___ftge@ff1,w,c
 20358  003758  5005               	movf	___ftge@ff2+1,w,c
 20359  00375A  5802               	subwfb	___ftge@ff1+1,w,c
 20360  00375C  5006               	movf	___ftge@ff2+2,w,c
 20361  00375E  5803               	subwfb	___ftge@ff1+2,w,c
 20362  003760  B0D8               	btfsc	status,0,c
 20363  003762  D002               	goto	i2l4702
 20364  003764  90D8               	bcf	status,0,c
 20365  003766  D002               	goto	i2l4704
 20366  003768                     i2l4702:
 20367  003768  FFFF               	dw	65535	; assembler added errata NOP
 20368  00376A  80D8               	bsf	status,0,c
 20369  00376C                     i2l4704:
 20370  00376C  FFFF               	dw	65535	; assembler added errata NOP
 20371  00376E  0012               	return		;funcret
 20372  003770  FFFF               	dw	65535	; errata NOP
 20373  003772                     __end_of___ftge:
 20374                           	opt stack 0
 20375                           tosu	equ	0xFFF
 20376                           tosh	equ	0xFFE
 20377                           tosl	equ	0xFFD
 20378                           pclatu	equ	0xFFB
 20379                           pclath	equ	0xFFA
 20380                           tblptru	equ	0xFF8
 20381                           tblptrh	equ	0xFF7
 20382                           tblptrl	equ	0xFF6
 20383                           tablat	equ	0xFF5
 20384                           prodh	equ	0xFF4
 20385                           prodl	equ	0xFF3
 20386                           intcon	equ	0xFF2
 20387                           indf0	equ	0xFEF
 20388                           postinc0	equ	0xFEE
 20389                           fsr0h	equ	0xFEA
 20390                           fsr0l	equ	0xFE9
 20391                           wreg	equ	0xFE8
 20392                           postdec1	equ	0xFE5
 20393                           fsr1h	equ	0xFE2
 20394                           fsr1l	equ	0xFE1
 20395                           indf2	equ	0xFDF
 20396                           postinc2	equ	0xFDE
 20397                           postdec2	equ	0xFDD
 20398                           fsr2h	equ	0xFDA
 20399                           fsr2l	equ	0xFD9
 20400                           status	equ	0xFD8
 20401                           
 20402 ;; *************** function ___ftdiv *****************
 20403 ;; Defined at:
 20404 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 20405 ;; Parameters:    Size  Location     Type
 20406 ;;  f1              3   26[COMRAM] float 
 20407 ;;  f2              3   29[COMRAM] float 
 20408 ;; Auto vars:     Size  Location     Type
 20409 ;;  f3              3   36[COMRAM] float 
 20410 ;;  sign            1   40[COMRAM] unsigned char 
 20411 ;;  exp             1   39[COMRAM] unsigned char 
 20412 ;;  cntr            1   35[COMRAM] unsigned char 
 20413 ;; Return value:  Size  Location     Type
 20414 ;;                  3   26[COMRAM] float 
 20415 ;; Registers used:
 20416 ;;		wreg, status,2, status,0, cstack
 20417 ;; Tracked objects:
 20418 ;;		On entry : 0/0
 20419 ;;		On exit  : 0/0
 20420 ;;		Unchanged: 0/0
 20421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20422 ;;      Params:         6       0       0       0       0       0       0
 20423 ;;      Locals:         6       0       0       0       0       0       0
 20424 ;;      Temps:          3       0       0       0       0       0       0
 20425 ;;      Totals:        15       0       0       0       0       0       0
 20426 ;;Total ram usage:       15 bytes
 20427 ;; Hardware stack levels used:    1
 20428 ;; Hardware stack levels required when called:    1
 20429 ;; This function calls:
 20430 ;;		___ftpack
 20431 ;; This function is called by:
 20432 ;;		_lerTransdutor
 20433 ;;		_map
 20434 ;; This function uses a non-reentrant model
 20435 ;;
 20436                           
 20437                           	psect	text91
 20438  003156                     __ptext91:
 20439                           	opt stack 0
 20440  003156                     ___ftdiv:
 20441                           	opt stack 0
 20442  003156  FFFF               	dw	65535	; assembler added errata NOP
 20443                           
 20444                           ;incstack = 0
 20445  003158  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
 20446  00315C  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 20447  00315E  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 20448  003160  341C               	rlcf	___ftdiv@f1+1,w,c
 20449  003162  3621               	rlcf	??___ftdiv& (0+255),f,c
 20450  003164  E301               	bnc	u642_41
 20451  003166  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 20452  003168                     u642_41:
 20453  003168  5021               	movf	??___ftdiv,w,c
 20454  00316A  6E28               	movwf	___ftdiv@exp,c
 20455  00316C  5028               	movf	___ftdiv@exp,w,c
 20456  00316E  B4D8               	btfsc	status,2,c
 20457  003170  D00D               	goto	i2u645_40
 20458  003172  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
 20459  003176  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 20460  003178  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 20461  00317A  341F               	rlcf	___ftdiv@f2+1,w,c
 20462  00317C  3621               	rlcf	??___ftdiv& (0+255),f,c
 20463  00317E  E301               	bnc	u644_41
 20464  003180  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 20465  003182                     u644_41:
 20466  003182  5021               	movf	??___ftdiv,w,c
 20467  003184  6E29               	movwf	___ftdiv@sign,c
 20468  003186  5029               	movf	___ftdiv@sign,w,c
 20469  003188  A4D8               	btfss	status,2,c
 20470  00318A  D008               	goto	i2l1392
 20471  00318C                     i2u645_40:
 20472  00318C  FFFF               	dw	65535	; assembler added errata NOP
 20473  00318E  0E00               	movlw	0
 20474  003190  6E1B               	movwf	?___ftdiv,c
 20475  003192  0E00               	movlw	0
 20476  003194  6E1C               	movwf	?___ftdiv+1,c
 20477  003196  0E00               	movlw	0
 20478  003198  6E1D               	movwf	?___ftdiv+2,c
 20479  00319A  D04D               	goto	i2l6014
 20480  00319C                     i2l1392:
 20481  00319C  FFFF               	dw	65535	; assembler added errata NOP
 20482  00319E  0E00               	movlw	0
 20483  0031A0  6E25               	movwf	___ftdiv@f3,c
 20484  0031A2  0E00               	movlw	0
 20485  0031A4  6E26               	movwf	___ftdiv@f3+1,c
 20486  0031A6  0E00               	movlw	0
 20487  0031A8  6E27               	movwf	___ftdiv@f3+2,c
 20488  0031AA  5029               	movf	___ftdiv@sign,w,c
 20489  0031AC  0F89               	addlw	137
 20490  0031AE  5E28               	subwf	___ftdiv@exp,f,c
 20491  0031B0  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
 20492  0031B4  5020               	movf	___ftdiv@f2+2,w,c
 20493  0031B6  1A29               	xorwf	___ftdiv@sign,f,c
 20494  0031B8  0E80               	movlw	128
 20495  0031BA  1629               	andwf	___ftdiv@sign,f,c
 20496  0031BC  8E1C               	bsf	___ftdiv@f1+1,7,c
 20497  0031BE  0EFF               	movlw	255
 20498  0031C0  161B               	andwf	___ftdiv@f1,f,c
 20499  0031C2  0EFF               	movlw	255
 20500  0031C4  161C               	andwf	___ftdiv@f1+1,f,c
 20501  0031C6  0E00               	movlw	0
 20502  0031C8  161D               	andwf	___ftdiv@f1+2,f,c
 20503  0031CA  8E1F               	bsf	___ftdiv@f2+1,7,c
 20504  0031CC  0EFF               	movlw	255
 20505  0031CE  161E               	andwf	___ftdiv@f2,f,c
 20506  0031D0  0EFF               	movlw	255
 20507  0031D2  161F               	andwf	___ftdiv@f2+1,f,c
 20508  0031D4  0E00               	movlw	0
 20509  0031D6  1620               	andwf	___ftdiv@f2+2,f,c
 20510  0031D8  0E18               	movlw	24
 20511  0031DA  6E24               	movwf	___ftdiv@cntr,c
 20512  0031DC  FFFF               	dw	65535	; assembler added errata NOP
 20513  0031DE  90D8               	bcf	status,0,c
 20514  0031E0  3625               	rlcf	___ftdiv@f3,f,c
 20515  0031E2  3626               	rlcf	___ftdiv@f3+1,f,c
 20516  0031E4  3627               	rlcf	___ftdiv@f3+2,f,c
 20517  0031E6  501E               	movf	___ftdiv@f2,w,c
 20518  0031E8  5C1B               	subwf	___ftdiv@f1,w,c
 20519  0031EA  501F               	movf	___ftdiv@f2+1,w,c
 20520  0031EC  581C               	subwfb	___ftdiv@f1+1,w,c
 20521  0031EE  5020               	movf	___ftdiv@f2+2,w,c
 20522  0031F0  581D               	subwfb	___ftdiv@f1+2,w,c
 20523  0031F2  A0D8               	btfss	status,0,c
 20524  0031F4  D007               	goto	i2l1394
 20525  0031F6  501E               	movf	___ftdiv@f2,w,c
 20526  0031F8  5E1B               	subwf	___ftdiv@f1,f,c
 20527  0031FA  501F               	movf	___ftdiv@f2+1,w,c
 20528  0031FC  5A1C               	subwfb	___ftdiv@f1+1,f,c
 20529  0031FE  5020               	movf	___ftdiv@f2+2,w,c
 20530  003200  5A1D               	subwfb	___ftdiv@f1+2,f,c
 20531  003202  8025               	bsf	___ftdiv@f3,0,c
 20532  003204                     i2l1394:
 20533  003204  FFFF               	dw	65535	; assembler added errata NOP
 20534  003206  90D8               	bcf	status,0,c
 20535  003208  361B               	rlcf	___ftdiv@f1,f,c
 20536  00320A  361C               	rlcf	___ftdiv@f1+1,f,c
 20537  00320C  361D               	rlcf	___ftdiv@f1+2,f,c
 20538  00320E  2E24               	decfsz	___ftdiv@cntr,f,c
 20539  003210  D7E5               	goto	i2l1393
 20540  003212  C025  F001         	movff	___ftdiv@f3,___ftpack@arg
 20541  003216  C026  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 20542  00321A  C027  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 20543  00321E  C028  F004         	movff	___ftdiv@exp,___ftpack@exp
 20544  003222  C029  F005         	movff	___ftdiv@sign,___ftpack@sign
 20545  003226  ECAE  F01A         	call	___ftpack	;wreg free
 20546  00322A  C001  F01B         	movff	?___ftpack,?___ftdiv
 20547  00322E  C002  F01C         	movff	?___ftpack+1,?___ftdiv+1
 20548  003232  C003  F01D         	movff	?___ftpack+2,?___ftdiv+2
 20549  003236                     i2l6014:
 20550  003236  FFFF               	dw	65535	; assembler added errata NOP
 20551  003238  0012               	return		;funcret
 20552  00323A  FFFF               	dw	65535	; errata NOP
 20553  00323C                     __end_of___ftdiv:
 20554                           	opt stack 0
 20555                           tosu	equ	0xFFF
 20556                           tosh	equ	0xFFE
 20557                           tosl	equ	0xFFD
 20558                           pclatu	equ	0xFFB
 20559                           pclath	equ	0xFFA
 20560                           tblptru	equ	0xFF8
 20561                           tblptrh	equ	0xFF7
 20562                           tblptrl	equ	0xFF6
 20563                           tablat	equ	0xFF5
 20564                           prodh	equ	0xFF4
 20565                           prodl	equ	0xFF3
 20566                           intcon	equ	0xFF2
 20567                           indf0	equ	0xFEF
 20568                           postinc0	equ	0xFEE
 20569                           fsr0h	equ	0xFEA
 20570                           fsr0l	equ	0xFE9
 20571                           wreg	equ	0xFE8
 20572                           postdec1	equ	0xFE5
 20573                           fsr1h	equ	0xFE2
 20574                           fsr1l	equ	0xFE1
 20575                           indf2	equ	0xFDF
 20576                           postinc2	equ	0xFDE
 20577                           postdec2	equ	0xFDD
 20578                           fsr2h	equ	0xFDA
 20579                           fsr2l	equ	0xFD9
 20580                           status	equ	0xFD8
 20581                           
 20582 ;; *************** function ___ftadd *****************
 20583 ;; Defined at:
 20584 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 20585 ;; Parameters:    Size  Location     Type
 20586 ;;  f1              3   26[COMRAM] float 
 20587 ;;  f2              3   29[COMRAM] float 
 20588 ;; Auto vars:     Size  Location     Type
 20589 ;;  exp1            1   37[COMRAM] unsigned char 
 20590 ;;  exp2            1   36[COMRAM] unsigned char 
 20591 ;;  sign            1   35[COMRAM] unsigned char 
 20592 ;; Return value:  Size  Location     Type
 20593 ;;                  3   26[COMRAM] float 
 20594 ;; Registers used:
 20595 ;;		wreg, status,2, status,0, cstack
 20596 ;; Tracked objects:
 20597 ;;		On entry : 0/0
 20598 ;;		On exit  : 0/0
 20599 ;;		Unchanged: 0/0
 20600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20601 ;;      Params:         6       0       0       0       0       0       0
 20602 ;;      Locals:         3       0       0       0       0       0       0
 20603 ;;      Temps:          3       0       0       0       0       0       0
 20604 ;;      Totals:        12       0       0       0       0       0       0
 20605 ;;Total ram usage:       12 bytes
 20606 ;; Hardware stack levels used:    1
 20607 ;; Hardware stack levels required when called:    1
 20608 ;; This function calls:
 20609 ;;		___ftpack
 20610 ;; This function is called by:
 20611 ;;		_lerTransdutor
 20612 ;;		_map
 20613 ;; This function uses a non-reentrant model
 20614 ;;
 20615                           
 20616                           	psect	text92
 20617  001F8E                     __ptext92:
 20618                           	opt stack 0
 20619  001F8E                     ___ftadd:
 20620                           	opt stack 0
 20621  001F8E  FFFF               	dw	65535	; assembler added errata NOP
 20622                           
 20623                           ;incstack = 0
 20624  001F90  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
 20625  001F94  6A22               	clrf	(??___ftadd+1)& (0+255),c
 20626  001F96  6A23               	clrf	(??___ftadd+2)& (0+255),c
 20627  001F98  341C               	rlcf	___ftadd@f1+1,w,c
 20628  001F9A  3621               	rlcf	??___ftadd& (0+255),f,c
 20629  001F9C  E301               	bnc	u621_41
 20630  001F9E  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 20631  001FA0                     u621_41:
 20632  001FA0  5021               	movf	??___ftadd,w,c
 20633  001FA2  6E26               	movwf	___ftadd@exp1,c
 20634  001FA4  C020  F021         	movff	___ftadd@f2+2,??___ftadd
 20635  001FA8  6A22               	clrf	(??___ftadd+1)& (0+255),c
 20636  001FAA  6A23               	clrf	(??___ftadd+2)& (0+255),c
 20637  001FAC  341F               	rlcf	___ftadd@f2+1,w,c
 20638  001FAE  3621               	rlcf	??___ftadd& (0+255),f,c
 20639  001FB0  E301               	bnc	u622_41
 20640  001FB2  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 20641  001FB4                     u622_41:
 20642  001FB4  5021               	movf	??___ftadd,w,c
 20643  001FB6  6E25               	movwf	___ftadd@exp2,c
 20644  001FB8  5026               	movf	___ftadd@exp1,w,c
 20645  001FBA  B4D8               	btfsc	status,2,c
 20646  001FBC  D00B               	goto	i2u625_40
 20647  001FBE  5025               	movf	___ftadd@exp2,w,c
 20648  001FC0  5C26               	subwf	___ftadd@exp1,w,c
 20649  001FC2  B0D8               	btfsc	status,0,c
 20650  001FC4  D00F               	goto	i2l1357
 20651  001FC6  5026               	movf	___ftadd@exp1,w,c
 20652  001FC8  0800               	sublw	0
 20653  001FCA  2425               	addwf	___ftadd@exp2,w,c
 20654  001FCC  6E21               	movwf	??___ftadd& (0+255),c
 20655  001FCE  0E18               	movlw	24
 20656  001FD0  6421               	cpfsgt	??___ftadd,c
 20657  001FD2  D008               	goto	i2l1357
 20658  001FD4                     i2u625_40:
 20659  001FD4  FFFF               	dw	65535	; assembler added errata NOP
 20660  001FD6  C01E  F01B         	movff	___ftadd@f2,?___ftadd
 20661  001FDA  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
 20662  001FDE  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
 20663  001FE2  D0BA               	goto	i2l5968
 20664  001FE4                     i2l1357:
 20665  001FE4  FFFF               	dw	65535	; assembler added errata NOP
 20666  001FE6  5025               	movf	___ftadd@exp2,w,c
 20667  001FE8  B4D8               	btfsc	status,2,c
 20668  001FEA  D00B               	goto	i2u628_40
 20669  001FEC  5026               	movf	___ftadd@exp1,w,c
 20670  001FEE  5C25               	subwf	___ftadd@exp2,w,c
 20671  001FF0  B0D8               	btfsc	status,0,c
 20672  001FF2  D00F               	goto	i2l1361
 20673  001FF4  5025               	movf	___ftadd@exp2,w,c
 20674  001FF6  0800               	sublw	0
 20675  001FF8  2426               	addwf	___ftadd@exp1,w,c
 20676  001FFA  6E21               	movwf	??___ftadd& (0+255),c
 20677  001FFC  0E18               	movlw	24
 20678  001FFE  6421               	cpfsgt	??___ftadd,c
 20679  002000  D008               	goto	i2l1361
 20680  002002                     i2u628_40:
 20681  002002  FFFF               	dw	65535	; assembler added errata NOP
 20682  002004  C01B  F01B         	movff	___ftadd@f1,?___ftadd
 20683  002008  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
 20684  00200C  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
 20685  002010  D0A3               	goto	i2l5968
 20686  002012                     i2l1361:
 20687  002012  FFFF               	dw	65535	; assembler added errata NOP
 20688  002014  0E06               	movlw	6
 20689  002016  6E24               	movwf	___ftadd@sign,c
 20690  002018  BE1D               	btfsc	___ftadd@f1+2,7,c
 20691  00201A  8E24               	bsf	___ftadd@sign,7,c
 20692  00201C  BE20               	btfsc	___ftadd@f2+2,7,c
 20693  00201E  8C24               	bsf	___ftadd@sign,6,c
 20694  002020  8E1C               	bsf	___ftadd@f1+1,7,c
 20695  002022  0EFF               	movlw	255
 20696  002024  161B               	andwf	___ftadd@f1,f,c
 20697  002026  0EFF               	movlw	255
 20698  002028  161C               	andwf	___ftadd@f1+1,f,c
 20699  00202A  0E00               	movlw	0
 20700  00202C  161D               	andwf	___ftadd@f1+2,f,c
 20701  00202E  8E1F               	bsf	___ftadd@f2+1,7,c
 20702  002030  0EFF               	movlw	255
 20703  002032  161E               	andwf	___ftadd@f2,f,c
 20704  002034  0EFF               	movlw	255
 20705  002036  161F               	andwf	___ftadd@f2+1,f,c
 20706  002038  0E00               	movlw	0
 20707  00203A  1620               	andwf	___ftadd@f2+2,f,c
 20708  00203C  5025               	movf	___ftadd@exp2,w,c
 20709  00203E  5C26               	subwf	___ftadd@exp1,w,c
 20710  002040  B0D8               	btfsc	status,0,c
 20711  002042  D01E               	goto	i2l1366
 20712  002044                     i2u631_40:
 20713  002044  FFFF               	dw	65535	; assembler added errata NOP
 20714  002046  90D8               	bcf	status,0,c
 20715  002048  361E               	rlcf	___ftadd@f2,f,c
 20716  00204A  361F               	rlcf	___ftadd@f2+1,f,c
 20717  00204C  3620               	rlcf	___ftadd@f2+2,f,c
 20718  00204E  0625               	decf	___ftadd@exp2,f,c
 20719  002050  5026               	movf	___ftadd@exp1,w,c
 20720  002052  1825               	xorwf	___ftadd@exp2,w,c
 20721  002054  B4D8               	btfsc	status,2,c
 20722  002056  D00E               	goto	i2l1371
 20723  002058  0624               	decf	___ftadd@sign,f,c
 20724  00205A  C024  F021         	movff	___ftadd@sign,??___ftadd
 20725  00205E  0E07               	movlw	7
 20726  002060  1621               	andwf	??___ftadd,f,c
 20727  002062  B4D8               	btfsc	status,2,c
 20728  002064  D007               	goto	i2l1371
 20729  002066  D7EE               	goto	i2u631_40
 20730  002068  FFFF               	dw	65535	; assembler added errata NOP
 20731  00206A  90D8               	bcf	status,0,c
 20732  00206C  321D               	rrcf	___ftadd@f1+2,f,c
 20733  00206E  321C               	rrcf	___ftadd@f1+1,f,c
 20734  002070  321B               	rrcf	___ftadd@f1,f,c
 20735  002072  2A26               	incf	___ftadd@exp1,f,c
 20736  002074                     i2l1371:
 20737  002074  FFFF               	dw	65535	; assembler added errata NOP
 20738  002076  5025               	movf	___ftadd@exp2,w,c
 20739  002078  1826               	xorwf	___ftadd@exp1,w,c
 20740  00207A  B4D8               	btfsc	status,2,c
 20741  00207C  D023               	goto	i2u638_40
 20742  00207E  D7F4               	goto	i2l1372
 20743  002080                     i2l1366:
 20744  002080  FFFF               	dw	65535	; assembler added errata NOP
 20745  002082  5026               	movf	___ftadd@exp1,w,c
 20746  002084  5C25               	subwf	___ftadd@exp2,w,c
 20747  002086  B0D8               	btfsc	status,0,c
 20748  002088  D01D               	goto	i2u638_40
 20749  00208A                     i2u635_40:
 20750  00208A  FFFF               	dw	65535	; assembler added errata NOP
 20751  00208C  90D8               	bcf	status,0,c
 20752  00208E  361B               	rlcf	___ftadd@f1,f,c
 20753  002090  361C               	rlcf	___ftadd@f1+1,f,c
 20754  002092  361D               	rlcf	___ftadd@f1+2,f,c
 20755  002094  0626               	decf	___ftadd@exp1,f,c
 20756  002096  5026               	movf	___ftadd@exp1,w,c
 20757  002098  1825               	xorwf	___ftadd@exp2,w,c
 20758  00209A  B4D8               	btfsc	status,2,c
 20759  00209C  D00E               	goto	i2l1380
 20760  00209E  0624               	decf	___ftadd@sign,f,c
 20761  0020A0  C024  F021         	movff	___ftadd@sign,??___ftadd
 20762  0020A4  0E07               	movlw	7
 20763  0020A6  1621               	andwf	??___ftadd,f,c
 20764  0020A8  B4D8               	btfsc	status,2,c
 20765  0020AA  D007               	goto	i2l1380
 20766  0020AC  D7EE               	goto	i2u635_40
 20767  0020AE  FFFF               	dw	65535	; assembler added errata NOP
 20768  0020B0  90D8               	bcf	status,0,c
 20769  0020B2  3220               	rrcf	___ftadd@f2+2,f,c
 20770  0020B4  321F               	rrcf	___ftadd@f2+1,f,c
 20771  0020B6  321E               	rrcf	___ftadd@f2,f,c
 20772  0020B8  2A25               	incf	___ftadd@exp2,f,c
 20773  0020BA                     i2l1380:
 20774  0020BA  FFFF               	dw	65535	; assembler added errata NOP
 20775  0020BC  5025               	movf	___ftadd@exp2,w,c
 20776  0020BE  1826               	xorwf	___ftadd@exp1,w,c
 20777  0020C0  A4D8               	btfss	status,2,c
 20778  0020C2  D7F5               	goto	i2l1381
 20779  0020C4                     i2u638_40:
 20780  0020C4  FFFF               	dw	65535	; assembler added errata NOP
 20781  0020C6  AE24               	btfss	___ftadd@sign,7,c
 20782  0020C8  D00C               	goto	i2l1383
 20783  0020CA  0EFF               	movlw	255
 20784  0020CC  1A1B               	xorwf	___ftadd@f1,f,c
 20785  0020CE  0EFF               	movlw	255
 20786  0020D0  1A1C               	xorwf	___ftadd@f1+1,f,c
 20787  0020D2  0EFF               	movlw	255
 20788  0020D4  1A1D               	xorwf	___ftadd@f1+2,f,c
 20789  0020D6  0E01               	movlw	1
 20790  0020D8  261B               	addwf	___ftadd@f1,f,c
 20791  0020DA  0E00               	movlw	0
 20792  0020DC  221C               	addwfc	___ftadd@f1+1,f,c
 20793  0020DE  0E00               	movlw	0
 20794  0020E0  221D               	addwfc	___ftadd@f1+2,f,c
 20795  0020E2                     i2l1383:
 20796  0020E2  FFFF               	dw	65535	; assembler added errata NOP
 20797  0020E4  AC24               	btfss	___ftadd@sign,6,c
 20798  0020E6  D00C               	goto	i2l1384
 20799  0020E8  0EFF               	movlw	255
 20800  0020EA  1A1E               	xorwf	___ftadd@f2,f,c
 20801  0020EC  0EFF               	movlw	255
 20802  0020EE  1A1F               	xorwf	___ftadd@f2+1,f,c
 20803  0020F0  0EFF               	movlw	255
 20804  0020F2  1A20               	xorwf	___ftadd@f2+2,f,c
 20805  0020F4  0E01               	movlw	1
 20806  0020F6  261E               	addwf	___ftadd@f2,f,c
 20807  0020F8  0E00               	movlw	0
 20808  0020FA  221F               	addwfc	___ftadd@f2+1,f,c
 20809  0020FC  0E00               	movlw	0
 20810  0020FE  2220               	addwfc	___ftadd@f2+2,f,c
 20811  002100                     i2l1384:
 20812  002100  FFFF               	dw	65535	; assembler added errata NOP
 20813  002102  0E00               	movlw	0
 20814  002104  6E24               	movwf	___ftadd@sign,c
 20815  002106  501B               	movf	___ftadd@f1,w,c
 20816  002108  261E               	addwf	___ftadd@f2,f,c
 20817  00210A  501C               	movf	___ftadd@f1+1,w,c
 20818  00210C  221F               	addwfc	___ftadd@f2+1,f,c
 20819  00210E  501D               	movf	___ftadd@f1+2,w,c
 20820  002110  2220               	addwfc	___ftadd@f2+2,f,c
 20821  002112  AE20               	btfss	___ftadd@f2+2,7,c
 20822  002114  D00E               	goto	i2l1385
 20823  002116  0EFF               	movlw	255
 20824  002118  1A1E               	xorwf	___ftadd@f2,f,c
 20825  00211A  0EFF               	movlw	255
 20826  00211C  1A1F               	xorwf	___ftadd@f2+1,f,c
 20827  00211E  0EFF               	movlw	255
 20828  002120  1A20               	xorwf	___ftadd@f2+2,f,c
 20829  002122  0E01               	movlw	1
 20830  002124  261E               	addwf	___ftadd@f2,f,c
 20831  002126  0E00               	movlw	0
 20832  002128  221F               	addwfc	___ftadd@f2+1,f,c
 20833  00212A  0E00               	movlw	0
 20834  00212C  2220               	addwfc	___ftadd@f2+2,f,c
 20835  00212E  0E01               	movlw	1
 20836  002130  6E24               	movwf	___ftadd@sign,c
 20837  002132                     i2l1385:
 20838  002132  FFFF               	dw	65535	; assembler added errata NOP
 20839  002134  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
 20840  002138  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 20841  00213C  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 20842  002140  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
 20843  002144  C024  F005         	movff	___ftadd@sign,___ftpack@sign
 20844  002148  ECAE  F01A         	call	___ftpack	;wreg free
 20845  00214C  C001  F01B         	movff	?___ftpack,?___ftadd
 20846  002150  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
 20847  002154  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
 20848  002158                     i2l5968:
 20849  002158  FFFF               	dw	65535	; assembler added errata NOP
 20850  00215A  0012               	return		;funcret
 20851  00215C  FFFF               	dw	65535	; errata NOP
 20852  00215E                     __end_of___ftadd:
 20853                           	opt stack 0
 20854                           tosu	equ	0xFFF
 20855                           tosh	equ	0xFFE
 20856                           tosl	equ	0xFFD
 20857                           pclatu	equ	0xFFB
 20858                           pclath	equ	0xFFA
 20859                           tblptru	equ	0xFF8
 20860                           tblptrh	equ	0xFF7
 20861                           tblptrl	equ	0xFF6
 20862                           tablat	equ	0xFF5
 20863                           prodh	equ	0xFF4
 20864                           prodl	equ	0xFF3
 20865                           intcon	equ	0xFF2
 20866                           indf0	equ	0xFEF
 20867                           postinc0	equ	0xFEE
 20868                           fsr0h	equ	0xFEA
 20869                           fsr0l	equ	0xFE9
 20870                           wreg	equ	0xFE8
 20871                           postdec1	equ	0xFE5
 20872                           fsr1h	equ	0xFE2
 20873                           fsr1l	equ	0xFE1
 20874                           indf2	equ	0xFDF
 20875                           postinc2	equ	0xFDE
 20876                           postdec2	equ	0xFDD
 20877                           fsr2h	equ	0xFDA
 20878                           fsr2l	equ	0xFD9
 20879                           status	equ	0xFD8
 20880                           
 20881 ;; *************** function ___ftpack *****************
 20882 ;; Defined at:
 20883 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 20884 ;; Parameters:    Size  Location     Type
 20885 ;;  arg             3    0[COMRAM] unsigned um
 20886 ;;  exp             1    3[COMRAM] unsigned char 
 20887 ;;  sign            1    4[COMRAM] unsigned char 
 20888 ;; Auto vars:     Size  Location     Type
 20889 ;;		None
 20890 ;; Return value:  Size  Location     Type
 20891 ;;                  3    0[COMRAM] float 
 20892 ;; Registers used:
 20893 ;;		wreg, status,2, status,0
 20894 ;; Tracked objects:
 20895 ;;		On entry : 0/0
 20896 ;;		On exit  : 0/0
 20897 ;;		Unchanged: 0/0
 20898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20899 ;;      Params:         5       0       0       0       0       0       0
 20900 ;;      Locals:         0       0       0       0       0       0       0
 20901 ;;      Temps:          3       0       0       0       0       0       0
 20902 ;;      Totals:         8       0       0       0       0       0       0
 20903 ;;Total ram usage:        8 bytes
 20904 ;; Hardware stack levels used:    1
 20905 ;; This function calls:
 20906 ;;		Nothing
 20907 ;; This function is called by:
 20908 ;;		___ftadd
 20909 ;;		___ftdiv
 20910 ;;		___ftmul
 20911 ;;		___lwtoft
 20912 ;; This function uses a non-reentrant model
 20913 ;;
 20914                           
 20915                           	psect	text93
 20916  00355C                     __ptext93:
 20917                           	opt stack 0
 20918  00355C                     ___ftpack:
 20919                           	opt stack 0
 20920  00355C  FFFF               	dw	65535	; assembler added errata NOP
 20921                           
 20922                           ;incstack = 0
 20923  00355E  5004               	movf	___ftpack@exp,w,c
 20924  003560  B4D8               	btfsc	status,2,c
 20925  003562  D005               	goto	i2u556_40
 20926  003564  5001               	movf	___ftpack@arg,w,c
 20927  003566  1002               	iorwf	___ftpack@arg+1,w,c
 20928  003568  1003               	iorwf	___ftpack@arg+2,w,c
 20929  00356A  A4D8               	btfss	status,2,c
 20930  00356C  D00E               	goto	i2l1326
 20931  00356E                     i2u556_40:
 20932  00356E  FFFF               	dw	65535	; assembler added errata NOP
 20933  003570  0E00               	movlw	0
 20934  003572  6E01               	movwf	?___ftpack,c
 20935  003574  0E00               	movlw	0
 20936  003576  6E02               	movwf	?___ftpack+1,c
 20937  003578  0E00               	movlw	0
 20938  00357A  6E03               	movwf	?___ftpack+2,c
 20939  00357C  D04E               	goto	i2l5452
 20940  00357E  FFFF               	dw	65535	; assembler added errata NOP
 20941  003580  2A04               	incf	___ftpack@exp,f,c
 20942  003582  90D8               	bcf	status,0,c
 20943  003584  3203               	rrcf	___ftpack@arg+2,f,c
 20944  003586  3202               	rrcf	___ftpack@arg+1,f,c
 20945  003588  3201               	rrcf	___ftpack@arg,f,c
 20946  00358A                     i2l1326:
 20947  00358A  FFFF               	dw	65535	; assembler added errata NOP
 20948  00358C  0E00               	movlw	0
 20949  00358E  1401               	andwf	___ftpack@arg,w,c
 20950  003590  6E06               	movwf	??___ftpack& (0+255),c
 20951  003592  0E00               	movlw	0
 20952  003594  1402               	andwf	___ftpack@arg+1,w,c
 20953  003596  6E07               	movwf	(??___ftpack+1)& (0+255),c
 20954  003598  0EFE               	movlw	254
 20955  00359A  1403               	andwf	___ftpack@arg+2,w,c
 20956  00359C  6E08               	movwf	(??___ftpack+2)& (0+255),c
 20957  00359E  5006               	movf	??___ftpack,w,c
 20958  0035A0  1007               	iorwf	??___ftpack+1,w,c
 20959  0035A2  1008               	iorwf	??___ftpack+2,w,c
 20960  0035A4  B4D8               	btfsc	status,2,c
 20961  0035A6  D00D               	goto	i2l1329
 20962  0035A8  D7EA               	goto	i2l1327
 20963  0035AA  FFFF               	dw	65535	; assembler added errata NOP
 20964  0035AC  2A04               	incf	___ftpack@exp,f,c
 20965  0035AE  0E01               	movlw	1
 20966  0035B0  2601               	addwf	___ftpack@arg,f,c
 20967  0035B2  0E00               	movlw	0
 20968  0035B4  2202               	addwfc	___ftpack@arg+1,f,c
 20969  0035B6  0E00               	movlw	0
 20970  0035B8  2203               	addwfc	___ftpack@arg+2,f,c
 20971  0035BA  90D8               	bcf	status,0,c
 20972  0035BC  3203               	rrcf	___ftpack@arg+2,f,c
 20973  0035BE  3202               	rrcf	___ftpack@arg+1,f,c
 20974  0035C0  3201               	rrcf	___ftpack@arg,f,c
 20975  0035C2                     i2l1329:
 20976  0035C2  FFFF               	dw	65535	; assembler added errata NOP
 20977  0035C4  0E00               	movlw	0
 20978  0035C6  1401               	andwf	___ftpack@arg,w,c
 20979  0035C8  6E06               	movwf	??___ftpack& (0+255),c
 20980  0035CA  0E00               	movlw	0
 20981  0035CC  1402               	andwf	___ftpack@arg+1,w,c
 20982  0035CE  6E07               	movwf	(??___ftpack+1)& (0+255),c
 20983  0035D0  0EFF               	movlw	255
 20984  0035D2  1403               	andwf	___ftpack@arg+2,w,c
 20985  0035D4  6E08               	movwf	(??___ftpack+2)& (0+255),c
 20986  0035D6  5006               	movf	??___ftpack,w,c
 20987  0035D8  1007               	iorwf	??___ftpack+1,w,c
 20988  0035DA  1008               	iorwf	??___ftpack+2,w,c
 20989  0035DC  B4D8               	btfsc	status,2,c
 20990  0035DE  D007               	goto	i2l1332
 20991  0035E0  D7E4               	goto	i2l1330
 20992  0035E2  FFFF               	dw	65535	; assembler added errata NOP
 20993  0035E4  0604               	decf	___ftpack@exp,f,c
 20994  0035E6  90D8               	bcf	status,0,c
 20995  0035E8  3601               	rlcf	___ftpack@arg,f,c
 20996  0035EA  3602               	rlcf	___ftpack@arg+1,f,c
 20997  0035EC  3603               	rlcf	___ftpack@arg+2,f,c
 20998  0035EE                     i2l1332:
 20999  0035EE  FFFF               	dw	65535	; assembler added errata NOP
 21000  0035F0  BE02               	btfsc	___ftpack@arg+1,7,c
 21001  0035F2  D003               	goto	i2u560_40
 21002  0035F4  0E02               	movlw	2
 21003  0035F6  6004               	cpfslt	___ftpack@exp,c
 21004  0035F8  D7F4               	goto	i2l1333
 21005  0035FA                     i2u560_40:
 21006  0035FA  FFFF               	dw	65535	; assembler added errata NOP
 21007  0035FC  A004               	btfss	___ftpack@exp,0,c
 21008  0035FE  9E02               	bcf	___ftpack@arg+1,7,c
 21009  003600  90D8               	bcf	status,0,c
 21010  003602  3204               	rrcf	___ftpack@exp,f,c
 21011  003604  5004               	movf	___ftpack@exp,w,c
 21012  003606  1203               	iorwf	___ftpack@arg+2,f,c
 21013  003608  5005               	movf	___ftpack@sign,w,c
 21014  00360A  A4D8               	btfss	status,2,c
 21015  00360C  8E03               	bsf	___ftpack@arg+2,7,c
 21016  00360E  C001  F001         	movff	___ftpack@arg,?___ftpack
 21017  003612  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 21018  003616  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 21019  00361A                     i2l5452:
 21020  00361A  FFFF               	dw	65535	; assembler added errata NOP
 21021  00361C  0012               	return		;funcret
 21022  00361E  FFFF               	dw	65535	; errata NOP
 21023  003620                     __end_of___ftpack:
 21024                           	opt stack 0
 21025                           tosu	equ	0xFFF
 21026                           tosh	equ	0xFFE
 21027                           tosl	equ	0xFFD
 21028                           pclatu	equ	0xFFB
 21029                           pclath	equ	0xFFA
 21030                           tblptru	equ	0xFF8
 21031                           tblptrh	equ	0xFF7
 21032                           tblptrl	equ	0xFF6
 21033                           tablat	equ	0xFF5
 21034                           prodh	equ	0xFF4
 21035                           prodl	equ	0xFF3
 21036                           intcon	equ	0xFF2
 21037                           indf0	equ	0xFEF
 21038                           postinc0	equ	0xFEE
 21039                           fsr0h	equ	0xFEA
 21040                           fsr0l	equ	0xFE9
 21041                           wreg	equ	0xFE8
 21042                           postdec1	equ	0xFE5
 21043                           fsr1h	equ	0xFE2
 21044                           fsr1l	equ	0xFE1
 21045                           indf2	equ	0xFDF
 21046                           postinc2	equ	0xFDE
 21047                           postdec2	equ	0xFDD
 21048                           fsr2h	equ	0xFDA
 21049                           fsr2l	equ	0xFD9
 21050                           status	equ	0xFD8
 21051                           tosu	equ	0xFFF
 21052                           tosh	equ	0xFFE
 21053                           tosl	equ	0xFFD
 21054                           pclatu	equ	0xFFB
 21055                           pclath	equ	0xFFA
 21056                           tblptru	equ	0xFF8
 21057                           tblptrh	equ	0xFF7
 21058                           tblptrl	equ	0xFF6
 21059                           tablat	equ	0xFF5
 21060                           prodh	equ	0xFF4
 21061                           prodl	equ	0xFF3
 21062                           intcon	equ	0xFF2
 21063                           indf0	equ	0xFEF
 21064                           postinc0	equ	0xFEE
 21065                           fsr0h	equ	0xFEA
 21066                           fsr0l	equ	0xFE9
 21067                           wreg	equ	0xFE8
 21068                           postdec1	equ	0xFE5
 21069                           fsr1h	equ	0xFE2
 21070                           fsr1l	equ	0xFE1
 21071                           indf2	equ	0xFDF
 21072                           postinc2	equ	0xFDE
 21073                           postdec2	equ	0xFDD
 21074                           fsr2h	equ	0xFDA
 21075                           fsr2l	equ	0xFD9
 21076                           status	equ	0xFD8
 21077                           
 21078                           	psect	text94
 21079  000000                     __ptext94:
 21080                           	opt stack 0
 21081                           tosu	equ	0xFFF
 21082                           tosh	equ	0xFFE
 21083                           tosl	equ	0xFFD
 21084                           pclatu	equ	0xFFB
 21085                           pclath	equ	0xFFA
 21086                           tblptru	equ	0xFF8
 21087                           tblptrh	equ	0xFF7
 21088                           tblptrl	equ	0xFF6
 21089                           tablat	equ	0xFF5
 21090                           prodh	equ	0xFF4
 21091                           prodl	equ	0xFF3
 21092                           intcon	equ	0xFF2
 21093                           indf0	equ	0xFEF
 21094                           postinc0	equ	0xFEE
 21095                           fsr0h	equ	0xFEA
 21096                           fsr0l	equ	0xFE9
 21097                           wreg	equ	0xFE8
 21098                           postdec1	equ	0xFE5
 21099                           fsr1h	equ	0xFE2
 21100                           fsr1l	equ	0xFE1
 21101                           indf2	equ	0xFDF
 21102                           postinc2	equ	0xFDE
 21103                           postdec2	equ	0xFDD
 21104                           fsr2h	equ	0xFDA
 21105                           fsr2l	equ	0xFD9
 21106                           status	equ	0xFD8
 21107                           
 21108                           	psect	rparam
 21109  0000                     tosu	equ	0xFFF
 21110                           tosh	equ	0xFFE
 21111                           tosl	equ	0xFFD
 21112                           pclatu	equ	0xFFB
 21113                           pclath	equ	0xFFA
 21114                           tblptru	equ	0xFF8
 21115                           tblptrh	equ	0xFF7
 21116                           tblptrl	equ	0xFF6
 21117                           tablat	equ	0xFF5
 21118                           prodh	equ	0xFF4
 21119                           prodl	equ	0xFF3
 21120                           intcon	equ	0xFF2
 21121                           indf0	equ	0xFEF
 21122                           postinc0	equ	0xFEE
 21123                           fsr0h	equ	0xFEA
 21124                           fsr0l	equ	0xFE9
 21125                           wreg	equ	0xFE8
 21126                           postdec1	equ	0xFE5
 21127                           fsr1h	equ	0xFE2
 21128                           fsr1l	equ	0xFE1
 21129                           indf2	equ	0xFDF
 21130                           postinc2	equ	0xFDE
 21131                           postdec2	equ	0xFDD
 21132                           fsr2h	equ	0xFDA
 21133                           fsr2l	equ	0xFD9
 21134                           status	equ	0xFD8
 21135                           
 21136                           	psect	temp
 21137  00007C                     btemp:
 21138                           	opt stack 0
 21139  00007C                     	ds	1
 21140  0000                     int$flags	set	btemp
 21141  0000                     wtemp6	set	btemp+1
 21142                           tosu	equ	0xFFF
 21143                           tosh	equ	0xFFE
 21144                           tosl	equ	0xFFD
 21145                           pclatu	equ	0xFFB
 21146                           pclath	equ	0xFFA
 21147                           tblptru	equ	0xFF8
 21148                           tblptrh	equ	0xFF7
 21149                           tblptrl	equ	0xFF6
 21150                           tablat	equ	0xFF5
 21151                           prodh	equ	0xFF4
 21152                           prodl	equ	0xFF3
 21153                           intcon	equ	0xFF2
 21154                           indf0	equ	0xFEF
 21155                           postinc0	equ	0xFEE
 21156                           fsr0h	equ	0xFEA
 21157                           fsr0l	equ	0xFE9
 21158                           wreg	equ	0xFE8
 21159                           postdec1	equ	0xFE5
 21160                           fsr1h	equ	0xFE2
 21161                           fsr1l	equ	0xFE1
 21162                           indf2	equ	0xFDF
 21163                           postinc2	equ	0xFDE
 21164                           postdec2	equ	0xFDD
 21165                           fsr2h	equ	0xFDA
 21166                           fsr2l	equ	0xFD9
 21167                           status	equ	0xFD8


Data Sizes:
    Strings     958
    Constant    58
    Data        15
    BSS         296
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     67     123
    BANK0           128     84     128
    BANK1           256      0     212
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ajusteSP_Bombas$2360	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    telaPrincipal$2359	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    acaoTesteBombas$2358	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_27(CODE[2]), STR_25(CODE[3]), STR_22(CODE[3]), STR_20(CODE[6]), 
		 -> STR_19(CODE[3]), STR_11(CODE[2]), STR_9(CODE[3]), STR_7(CODE[3]), 
		 -> STR_5(CODE[7]), STR_4(CODE[7]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_27(CODE[2]), STR_25(CODE[3]), STR_22(CODE[3]), STR_20(CODE[6]), 
		 -> STR_19(CODE[3]), STR_11(CODE[2]), STR_9(CODE[3]), STR_7(CODE[3]), 
		 -> STR_5(CODE[7]), STR_4(CODE[7]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_27(CODE[2]), STR_25(CODE[3]), STR_22(CODE[3]), STR_20(CODE[6]), 
		 -> STR_19(CODE[3]), STR_11(CODE[2]), STR_9(CODE[3]), STR_7(CODE[3]), 
		 -> STR_5(CODE[7]), STR_4(CODE[7]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_27(CODE[2]), STR_25(CODE[3]), STR_22(CODE[3]), STR_20(CODE[6]), 
		 -> STR_19(CODE[3]), STR_11(CODE[2]), STR_9(CODE[3]), STR_7(CODE[3]), 
		 -> STR_5(CODE[7]), STR_4(CODE[7]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> intToFloatStr@conv(BANK0[4]), STR_104(CODE[15]), STR_103(CODE[12]), STR_102(CODE[10]), 
		 -> STR_101(CODE[18]), STR_100(CODE[10]), STR_99(CODE[18]), STR_98(CODE[16]), 
		 -> STR_97(CODE[10]), STR_96(CODE[10]), STR_95(CODE[11]), STR_94(CODE[9]), 
		 -> STR_93(CODE[3]), STR_92(CODE[15]), STR_91(CODE[15]), STR_90(CODE[11]), 
		 -> STR_89(CODE[11]), STR_88(CODE[19]), STR_87(CODE[5]), STR_86(CODE[12]), 
		 -> STR_85(CODE[5]), STR_84(CODE[14]), STR_83(CODE[19]), STR_80(CODE[3]), 
		 -> STR_79(CODE[7]), STR_78(CODE[7]), STR_76(CODE[12]), STR_75(CODE[17]), 
		 -> STR_74(CODE[20]), STR_73(CODE[8]), STR_70(CODE[14]), STR_67(CODE[14]), 
		 -> STR_66(CODE[11]), STR_63(CODE[10]), STR_62(CODE[31]), STR_61(CODE[20]), 
		 -> STR_60(CODE[20]), STR_59(CODE[21]), STR_58(CODE[15]), STR_57(CODE[6]), 
		 -> STR_56(CODE[15]), STR_55(CODE[6]), STR_54(CODE[31]), STR_53(CODE[20]), 
		 -> STR_52(CODE[19]), STR_51(CODE[15]), STR_50(CODE[19]), STR_47(CODE[16]), 
		 -> STR_44(CODE[16]), STR_41(CODE[12]), STR_40(CODE[19]), STR_39(CODE[16]), 
		 -> STR_38(CODE[20]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), 
		 -> line1(BANK1[21]), bufferAUX(BANK1[20]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), 
		 -> line1(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 104
		 -> STR_37(CODE[7]), STR_36(CODE[11]), STR_29(CODE[104]), STR_28(CODE[63]), 
		 -> STR_26(CODE[18]), STR_24(CODE[12]), STR_23(CODE[7]), STR_21(CODE[5]), 
		 -> STR_12(CODE[104]), STR_10(CODE[18]), STR_8(CODE[12]), STR_6(CODE[5]), 
		 -> STR_3(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), 
		 -> line1(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    memset@p	PTR unsigned char  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), STR_105(CODE[7]), _doprnt@c(BANK0[1]), 
		 -> intToFloatStr@end(BANK0[4]), STR_82(CODE[17]), STR_81(CODE[13]), STR_77(CODE[12]), 
		 -> STR_72(CODE[5]), STR_71(CODE[3]), STR_69(CODE[5]), STR_68(CODE[3]), 
		 -> STR_65(CODE[5]), STR_64(CODE[3]), STR_49(CODE[5]), STR_48(CODE[3]), 
		 -> line4(BANK1[21]), STR_46(CODE[5]), STR_45(CODE[3]), line3(BANK1[21]), 
		 -> STR_43(CODE[5]), STR_42(CODE[3]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> STR_35(CODE[6]), STR_34(CODE[3]), STR_33(CODE[6]), STR_32(CODE[3]), 
		 -> STR_31(CODE[6]), STR_30(CODE[3]), STR_18(CODE[6]), STR_17(CODE[3]), 
		 -> STR_16(CODE[6]), STR_15(CODE[3]), STR_14(CODE[6]), STR_13(CODE[3]), 
		 -> tel2(BANK1[12]), tel1(BANK1[12]), bufferAUX(BANK1[20]), NULL(NULL[0]), 
		 -> bufferSerial(BANK1[60]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 104
		 -> intToFloatStr@conv(BANK0[4]), STR_104(CODE[15]), STR_103(CODE[12]), STR_102(CODE[10]), 
		 -> STR_101(CODE[18]), STR_100(CODE[10]), STR_99(CODE[18]), STR_98(CODE[16]), 
		 -> STR_97(CODE[10]), STR_96(CODE[10]), STR_95(CODE[11]), STR_94(CODE[9]), 
		 -> STR_93(CODE[3]), STR_92(CODE[15]), STR_91(CODE[15]), STR_90(CODE[11]), 
		 -> STR_89(CODE[11]), STR_88(CODE[19]), STR_87(CODE[5]), STR_86(CODE[12]), 
		 -> STR_85(CODE[5]), STR_84(CODE[14]), STR_83(CODE[19]), STR_80(CODE[3]), 
		 -> STR_79(CODE[7]), STR_78(CODE[7]), STR_76(CODE[12]), STR_75(CODE[17]), 
		 -> STR_74(CODE[20]), STR_73(CODE[8]), STR_70(CODE[14]), STR_67(CODE[14]), 
		 -> STR_66(CODE[11]), STR_63(CODE[10]), STR_62(CODE[31]), STR_61(CODE[20]), 
		 -> STR_60(CODE[20]), STR_59(CODE[21]), STR_58(CODE[15]), STR_57(CODE[6]), 
		 -> STR_56(CODE[15]), STR_55(CODE[6]), STR_54(CODE[31]), STR_53(CODE[20]), 
		 -> STR_52(CODE[19]), STR_51(CODE[15]), STR_50(CODE[19]), STR_47(CODE[16]), 
		 -> STR_44(CODE[16]), STR_41(CODE[12]), STR_40(CODE[19]), STR_39(CODE[16]), 
		 -> STR_38(CODE[20]), STR_37(CODE[7]), STR_36(CODE[11]), STR_29(CODE[104]), 
		 -> STR_28(CODE[63]), STR_26(CODE[18]), STR_24(CODE[12]), STR_23(CODE[7]), 
		 -> STR_21(CODE[5]), STR_12(CODE[104]), STR_10(CODE[18]), STR_8(CODE[12]), 
		 -> STR_6(CODE[5]), STR_3(CODE[9]), STR_2(CODE[5]), STR_1(CODE[5]), 

    S1591__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1591__prbuf$ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), 
		 -> line1(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), 
		 -> line1(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    configuraTelefones$1456	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_82(CODE[17]), STR_81(CODE[13]), 

    dataLoger$1441	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_72(CODE[5]), STR_71(CODE[3]), 

    dataLoger$1436	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_69(CODE[5]), STR_68(CODE[3]), 

    dataLoger$1430	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_65(CODE[5]), STR_64(CODE[3]), 

    blink@line	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 

    atualizarLCD@line4	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), 

    atualizarLCD@line3	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), 

    atualizarLCD@line2	PTR unsigned char  size(2) Largest target is 21
		 -> line2(BANK1[21]), 

    atualizarLCD@line1	PTR unsigned char  size(2) Largest target is 21
		 -> line1(BANK1[21]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 

    acaoTesteBombas$1326	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_49(CODE[5]), STR_48(CODE[3]), 

    acaoTesteBombas$1321	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_46(CODE[5]), STR_45(CODE[3]), 

    acaoTesteBombas$1316	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_43(CODE[5]), STR_42(CODE[3]), 

    sp__intToFloatStr	PTR unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    comunicarTeste$1215	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_14(CODE[6]), STR_13(CODE[3]), 

    comunicarTeste$1214	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_16(CODE[6]), STR_15(CODE[3]), 

    comunicarTeste$1213	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_18(CODE[6]), STR_17(CODE[3]), 

    comunicarTeste$1201	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    getDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    setDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    sp__getSerial	PTR unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    getSerial@ret	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    getSerial@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_5(CODE[7]), 

    sp__memset	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    aguardaBuffer@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_27(CODE[2]), STR_25(CODE[3]), STR_22(CODE[3]), STR_20(CODE[6]), 
		 -> STR_19(CODE[3]), STR_11(CODE[2]), STR_9(CODE[3]), STR_7(CODE[3]), 
		 -> STR_4(CODE[7]), 

    writeChar@hex	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TIMER in COMRAM

    _TIMER->_lerTransdutor
    _timer->_writeEEPROM16_ext
    i2_getDS1307TimeDate->i2_I2C_Read
    i2_I2C_Restart->i2_I2C_Wait
    i2_I2C_Read->i2_I2C_Wait
    i2_RTC_Init->i2_I2C_Write
    _writeEEPROM16_ext->i2_writeEEPROM_ext
    i2_writeEEPROM_ext->i2_I2C_Write
    i2_writeEEPROM_ext->i2_delay
    i2_I2C_Write->i2_I2C_Wait
    i2_I2C_Stop->i2_I2C_Wait
    i2_I2C_Start->i2_I2C_Wait
    _lerTransdutor->___ftdiv
    _lerTransdutor->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftmul

Critical Paths under _main in BANK0

    _main->_acaoTesteBombas
    _tela_testeBombas->_sprintf
    _tela_ajusteRTC->_sprintf
    _setDS1307TimeDate->_I2C_Write
    _DECtoBCD->___awdiv
    _telaPrincipal->_intToFloatStr
    _lerParametros->_readEEPROM16_ext
    _readEEPROM16_ext->_readEEPROM_ext
    _informacoes->_sprintf
    _getSinalSIM800L->_atoi
    _getSerial->_sprintf
    _atoi->_getSerial
    _getDS1307TimeDate->_I2C_Write
    _dataLoger->_sprintf
    _criarCaracteresCGRAM->_Lcd_Write_Char
    _configurarEstacionaria->_sprintf
    _configuraTelefones->_comunicarTeste
    _comunicarTeste->_printf
    _printf->__doprnt
    _limparBuffer->_memset
    _aguardaBuffer->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _atualizarLCD->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _ajusteSP_Bombas->_intToFloatStr
    _acaoTesteBomasProgramado->_acaoTesteBombas
    _acaoTesteBombas->_intToFloatStr
    _salvarLOG->_readEEPROM_ext
    _salvarLOG->_writeEEPROM_ext
    _writeEEPROM_ext->_I2C_Write
    _readEEPROM_ext->_I2C_Write
    _I2C_Restart->_I2C_Wait
    _I2C_Read->_I2C_Wait
    _intToFloatStr->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _acaoBombas->_partidaBombaEstacionaria
    _partidaBombaEstacionaria->_delay
    _RTC_Init->_I2C_Write
    _I2C_Write->_DECtoBCD
    _I2C_Stop->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _I2C_Master_Init->___lldiv

Critical Paths under _TIMER in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TIMER in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TIMER in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TIMER in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TIMER in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TIMER in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  345961
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                           _RTC_Init
                         _acaoBombas
           _acaoTesteBomasProgramado
                    _acaoTesteBombas
                    _ajusteSP_Bombas
                       _atualizarLCD
                            _btPress
             _configuraRegistradores
                 _configuraTelefones
             _configurarEstacionaria
               _criarCaracteresCGRAM
                          _dataLoger
                              _delay
                  _getDS1307TimeDate
                    _getSinalSIM800L
                        _informacoes
                      _lerParametros
                        _setShiftREG
                            _sprintf
                      _telaPrincipal
                     _tela_ajusteRTC
                   _tela_testeBombas
 ---------------------------------------------------------------------------------
 (1) _tela_testeBombas                                     2     2      0   21323
                                             55 BANK0      2     2      0
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_ajusteRTC                                       0     0      0   20351
                              _blink
                            _btPress
                  _setDS1307TimeDate
                            _sprintf
                          _validaRTC
 ---------------------------------------------------------------------------------
 (2) _validaRTC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setDS1307TimeDate                                    3     1      2    4358
                                             12 BANK0      3     1      2
                           _DECtoBCD
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DECtoBCD                                             2     2      0    1902
                                              8 BANK0      2     2      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _telaPrincipal                                        2     2      0   30114
                                             68 BANK0      2     2      0
                              _blink
                            _btPress
                      _clearShiftREG
                      _intToFloatStr
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _setShiftREG                                          2     2      0      69
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _lerParametros                                        2     2      0   11976
                                             20 BANK0      2     2      0
                   _readEEPROM16_ext
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _readEEPROM16_ext                                     6     4      2    3221
                                             14 BANK0      6     4      2
                     _readEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _informacoes                                          0     0      0   12004
                            _btPress
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _getSinalSIM800L                                      4     4      0   25125
                                             72 BANK0      4     4      0
                      _aguardaBuffer
                               _atoi
                          _getSerial
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _getSerial                                           10     7      3   14652
                                             55 BANK0     10     7      3
                             _memset
                            _sprintf
                             _strlen
                             _strstr
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     835
                                             65 BANK0      7     5      2
                             ___wmul
                          _getSerial (ARG)
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _getDS1307TimeDate                                    2     0      2    3431
                                             12 BANK0      2     0      2
                           _BCDtoDEC
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _BCDtoDEC                                             1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _dataLoger                                           12    12      0   25037
                                             55 BANK0     12    12      0
                            ___awdiv
                            _btPress
                     _readEEPROM_ext
                          _salvarLOG
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _criarCaracteresCGRAM                                56    56      0     521
                                              4 BANK0     56    56      0
                            _Lcd_Cmd
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _configurarEstacionaria                               0     0      0   21323
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _configuraTelefones                                   5     5      0   32071
                                             69 BANK0      5     5      0
                              _blink
                            _btPress
                     _comunicarTeste
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _comunicarTeste                                      10    10      0   10589
                                             59 BANK0     10    10      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeChar                                            2     0      2     250
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              26     6     20    4554
                                             33 BANK0     26     6     20
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) _limparBuffer                                         0     0      0    1562
                              _delay
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     552
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _aguardaBuffer                                        2     0      2    3117
                                             19 BANK0      2     0      2
                              _delay
                             _strstr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    1401
                                             15 BANK0      4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     362
                                              6 BANK0      9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               5     1      4     240
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _configuraRegistradores                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _atualizarLCD                                         9     1      8    2076
                                              8 BANK0      9     1      8
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     3     1      2     573
                                              4 BANK0      3     1      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     888
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _ajusteSP_Bombas                                      2     2      0   35444
                                             68 BANK0      2     2      0
                              _blink
                            _btPress
                      _intToFloatStr
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _blink                                                5     1      4    3989
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _acaoTesteBomasProgramado                             0     0      0   46706
                    _acaoTesteBombas
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _acaoTesteBombas                                     16    16      0   41376
                                             68 BANK0     16    16      0
                            _btPress
                      _clearShiftREG
                      _intToFloatStr
           _partidaBombaEstacionaria
                          _salvarLOG
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _salvarLOG                                            3     3      0    8726
                                             14 BANK0      3     3      0
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM_ext                                      2     1      1    5330
                                             12 BANK0      2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _readEEPROM_ext                                       2     2      0    3152
                                             12 BANK0      2     2      0
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Restart                                          0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             4     2      2     881
                                              1 BANK0      4     2      2
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _intToFloatStr                                       13    11      2   14029
                                             55 BANK0     13    11      2
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22     6     16   11982
                                             33 BANK0     22     6     16
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             25    19      6    3428
                                             12 BANK0     21    15      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     752
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1060
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _clearShiftREG                                        1     1      0      69
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _btPress                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _acaoBombas                                           0     0      0    1054
           _partidaBombaEstacionaria
 ---------------------------------------------------------------------------------
 (2) _partidaBombaEstacionaria                             1     1      0    1054
                                              3 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                3     1      2    1010
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0    2226
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            2     0      2    2226
                                             10 BANK0      2     0      2
                           _DECtoBCD (ARG)
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Wait                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TIMER                                               19    19      0   17308
                                             48 COMRAM    19    19      0
                      _lerTransdutor
                        _readButtons
                              _timer
 ---------------------------------------------------------------------------------
 (8) _timer                                                4     4      0    2028
                                              8 COMRAM     4     4      0
                  _writeEEPROM16_ext
                         i2_RTC_Init
                i2_getDS1307TimeDate
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (9) i2_getDS1307TimeDate                                  2     0      2     707
                                              5 COMRAM     2     0      2
                         i2_BCDtoDEC
                         i2_I2C_Read
                      i2_I2C_Restart
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Restart                                       0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Read                                          4     2      2     227
                                              1 COMRAM     4     2      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_BCDtoDEC                                          1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_RTC_Init                                           0     0      0     256
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (9) _writeEEPROM16_ext                                    3     1      2     591
                                              5 COMRAM     3     1      2
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (9) i2_writeEEPROM_ext                                    2     1      1     426
                                              3 COMRAM     2     1      1
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
                            i2_delay
 ---------------------------------------------------------------------------------
 (10) i2_delay                                             3     1      2      48
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Write                                         2     0      2     256
                                              1 COMRAM     2     0      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Stop                                          0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Start                                         0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Wait                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _readButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _lerTransdutor                                        7     7      0   15213
                                             41 COMRAM     7     7      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
                            _readADC
 ---------------------------------------------------------------------------------
 (9) _readADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) ___lwtoft                                             3     0      3    2564
                                              8 COMRAM     3     0      3
                           ___ftpack
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             15    11      4     328
                                             26 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    3526
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    3480
                                             26 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             12     6      6    4622
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _RTC_Init
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _acaoBombas
     _partidaBombaEstacionaria
       _delay
   _acaoTesteBomasProgramado
     _acaoTesteBombas
       _btPress
       _clearShiftREG
       _intToFloatStr
         ___awdiv
         ___awmod
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
       _partidaBombaEstacionaria
         _delay
       _salvarLOG
         _readEEPROM_ext
           _I2C_Read
             _I2C_Wait
           _I2C_Restart
             _I2C_Wait
           _I2C_Start
             _I2C_Wait
           _I2C_Stop
             _I2C_Wait
           _I2C_Write
             _DECtoBCD (ARG)
               ___awdiv
               ___awmod
             _I2C_Wait (ARG)
         _writeEEPROM_ext
           _I2C_Start
             _I2C_Wait
           _I2C_Stop
             _I2C_Wait
           _I2C_Write
             _DECtoBCD (ARG)
               ___awdiv
               ___awmod
             _I2C_Wait (ARG)
           _delay
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeEEPROM_ext
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
         _delay
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _acaoTesteBombas
     _btPress
     _clearShiftREG
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _partidaBombaEstacionaria
       _delay
     _salvarLOG
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
       _writeEEPROM_ext
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
         _delay
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _ajusteSP_Bombas
     _blink
     _btPress
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _atualizarLCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _btPress
   _configuraRegistradores
   _configuraTelefones
     _blink
     _btPress
     _comunicarTeste
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _configurarEstacionaria
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _criarCaracteresCGRAM
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _dataLoger
     ___awdiv
     _btPress
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _salvarLOG
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
       _writeEEPROM_ext
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
         _delay
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _delay
   _getDS1307TimeDate
     _BCDtoDEC
     _I2C_Read
       _I2C_Wait
     _I2C_Restart
       _I2C_Wait
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _getSinalSIM800L
     _aguardaBuffer
       _delay
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _atoi
       ___wmul
       _getSerial (ARG)
         _memset
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
         _strlen
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _isdigit (ARG)
     _getSerial
       _memset
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _strlen
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _limparBuffer
       _delay
       _memset
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeChar
   _informacoes
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _lerParametros
     _readEEPROM16_ext
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _setShiftREG
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       ___wmul *
       _isdigit *
       _putch *
   _telaPrincipal
     _blink
     _btPress
     _clearShiftREG
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _tela_ajusteRTC
     _blink
     _btPress
     _setDS1307TimeDate
       _DECtoBCD
         ___awdiv
         ___awmod
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _validaRTC
   _tela_testeBombas
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay

 _TIMER (ROOT)
   _lerTransdutor
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
     ___lwtoft
       ___ftpack
       _readADC (ARG)
     _readADC
   _readButtons
   _timer
     _writeEEPROM16_ext
       i2_writeEEPROM_ext
         i2_I2C_Start
           i2_I2C_Wait
         i2_I2C_Stop
           i2_I2C_Wait
         i2_I2C_Write
           i2_I2C_Wait
         i2_delay
     i2_RTC_Init
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_getDS1307TimeDate
       i2_BCDtoDEC
       i2_I2C_Read
         i2_I2C_Wait
       i2_I2C_Restart
         i2_I2C_Wait
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_writeEEPROM_ext
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
       i2_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D4       7       82.8%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      80       5      100.0%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     43      7B       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CF      15        0.0%
DATA                 0      0     1CF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Aug 04 19:52:36 2019

                                                 __size_of_readEEPROM_ext 0056  
                                                             __CFG_CP0$ON 000000  
                                                             __CFG_CP1$ON 000000  
                                                             __CFG_CP2$ON 000000  
                                                             __CFG_CP3$ON 000000  
                                                      __size_of_I2C_Start 000C  
                                                      __size_of_I2C_Write 000E  
                                                __end_of_readEEPROM16_ext 788A  
                                                             __CFG_CPD$ON 000000  
                                                            ___awdiv@sign 0085  
                                                             __CFG_BOR$ON 000000  
                                                     ___wmul@multiplicand 0082  
                                          __end_of_configurarEstacionaria 2440  
                                        __end_of_partidaBombaEstacionaria 306E  
                                                             __CFG_OSC$HS 000000  
                                                            ___ftadd@exp1 0026  
                                                            ___ftadd@exp2 0025  
                                                            ___ftadd@sign 0024  
                                                             __CFG_WDT$ON 000000  
                                                                     l310 3FBC  
                                                                     l320 2496  
                                                                     l305 3F80  
                                                                     l322 24E8  
                                                                     l306 3F8C  
                                                                     l323 2564  
                                                                     l307 3F98  
                                                                     l340 177C  
                                                                     l316 2580  
                                                                     l324 2510  
                                                                     l308 3FA4  
                                                                     l501 3D00  
                                                                     l333 18C2  
                                                                     l317 2452  
                                                                     l309 3FB0  
                                                                     l342 1750  
                                                                     l334 16B6  
                                                                     l318 25A2  
                                                                     l326 2538  
                                                                     l503 3D0E  
                                                                     l335 18F8  
                                                                     l319 2474  
                                                                     l512 3664  
                                                                     l504 3D24  
                                                                     l336 16D6  
                                                                     l328 2562  
                                                                     l513 3672  
                                                                     l273 7A1E  
                                                                     l361 1860  
                                                                     l353 17CA  
                                                                     l337 1706  
                                                                     l281 2A2C  
                                                                     l329 2572  
                                                                     l530 3034  
                                                                     l514 368C  
                                                                     l506 3D4A  
                                                                     l362 1896  
                                                                     l346 1788  
                                                                     l282 29A8  
                                                                     l531 304C  
                                                                     l523 2FC4  
                                                                     l515 36A0  
                                                                     l443 34CC  
                                                                     l363 1882  
                                                                     l339 1726  
                                                                     l283 29F0  
                                                                     l516 36B4  
                                                                     l364 188C  
                                                                     l700 22CC  
                                                                     l533 3062  
                                                                     l525 2FE0  
                                                                     l517 36C6  
                                                                     l509 364A  
                                                                     l357 17E4  
                                                                     l349 17B0  
                                                                     l613 2870  
                                                                     l461 7BCE  
                                                                     l630 7B18  
                                                                     l534 3068  
                                                                     l518 36D0  
                                                                     l614 2852  
                                                                     l710 1D6C  
                                                                     l631 7B1C  
                                                                     l527 2FF0  
                                                                     l551 0DA8  
                                                                     l367 18B6  
                                                                     l711 1C32  
                                                                     l632 7B26  
                                                                     l528 2FF6  
                                                                     l456 77C4  
                                                                     l560 0E76  
                                                                     l544 0D2E  
                                                                     l616 28E8  
                                                                     l720 1CCE  
                                                                     l704 1BD4  
                                                                     l633 7B2A  
                                                                     l529 3018  
                                                                     l553 1084  
                                                                     l561 0E80  
                                                                     l626 7AFC  
                                                                     l570 0F58  
                                                                     l554 0DFE  
                                                                     l810 1212  
                                                                     l802 1164  
                                                                     l618 291A  
                                                                     l706 1D40  
                                                                     l714 1C66  
                                                                     l730 2636  
                                                                     l627 7B00  
                                                                     l555 10CE  
                                                                     l563 0EBE  
                                                                     l547 0D76  
                                                                     l539 79AA  
                                                                     l643 3474  
                                                                     l723 1D02  
                                                                     l707 1C00  
                                                                     l628 7B0A  
                                                                     l556 0E1A  
                                                                     l644 33DC  
                                                                     l804 1178  
                                                                     l732 26D8  
                                                                     l900 0A1C  
                                                                     l629 7B0E  
                                                                     l581 0FF0  
                                                                     l565 0EDC  
                                                                     l549 0D90  
                                                                     l645 3492  
                                                                     l661 32B2  
                                                                     l813 142E  
                                                                     l717 1C9A  
                                                                     l733 264A  
                                                                     l901 0A78  
                                                                     l574 0F72  
                                                                     l566 0EE6  
                                                                     l558 0E58  
                                                                     l646 3402  
                                                                     l814 122C  
                                                                     l806 11F6  
                                                                     l670 3366  
                                                                     l726 1D36  
                                                                     l742 26C8  
                                                                     l734 2670  
                                                                     l902 0A80  
                                                                     l495 3D2A  
                                                                     l575 0F92  
                                                                     l647 3428  
                                                                     l823 1448  
                                                                     l815 1246  
                                                                     l807 11AE  
                                                                     l671 3376  
                                                                     l743 26D0  
                                                                     l903 0A88  
                                                                     l496 3CE4  
                                                                     l568 0F24  
                                                                     l648 344E  
                                                                     l656 78DA  
                                                                     l824 1310  
                                                                     l840 237C  
                                                                     l736 26EC  
                                                                     l904 0A90  
                                                                     l585 1028  
                                                                     l577 0FB8  
                                                                     l569 0F42  
                                                                     l681 79DC  
                                                                     l833 13FE  
                                                                     l825 132A  
                                                                     l817 128C  
                                                                     l737 2684  
                                                                     l913 0C4A  
                                                                     l921 0B80  
                                                                     l905 0A98  
                                                                     l682 79C4  
                                                                     l818 12AE  
                                                                     l842 2426  
                                                                     l850 241E  
                                                                     l674 3388  
                                                                     l690 21EC  
                                                                     l738 26AA  
                                                                     l914 0B20  
                                                                     l906 0AA0  
                                                                     l499 3CF2  
                                                                     l835 1426  
                                                                     l827 1370  
                                                                     l819 12D0  
                                                                     l843 23AA  
                                                                     l739 26BC  
                                                                     l923 0BA0  
                                                                     l907 0AA8  
                                                                     l828 1392  
                                                                     l844 23D0  
                                                                     l676 33B8  
                                                                     l668 335A  
                                                                     l780 19E0  
                                                                     l772 1944  
                                                                     l692 21FA  
                                                                     l916 0C80  
                                                                     l932 0C3C  
                                                                     l908 0AB0  
                                                                     l589 1078  
                                                                     l861 16AC  
                                                                     l829 13B4  
                                                                     l933 0C92  
                                                                     l925 0BC0  
                                                                     l917 0B40  
                                                                     l909 0AB8  
                                                                     l870 163C  
                                                                     l862 15AC  
                                                                     l854 1550  
                                                                     l846 243A  
                                                                     l790 1B3E  
                                                                     l694 2208  
                                                                     l871 1662  
                                                                     l863 15D2  
                                                                     l847 23E4  
                                                                     l783 1A20  
                                                                     l687 2188  
                                                                     l935 0CA4  
                                                                     l927 0BEA  
                                                                     l919 0B60  
                                                                     l856 168C  
                                                                     l872 1674  
                                                                     l864 15E4  
                                                                     l848 240A  
                                                                     l776 19A6  
                                                                     l688 21AE  
                                                                     l857 1564  
                                                                     l785 1A52  
                                                                     l689 21DE  
                                                                     l937 0CC0  
                                                                     l929 0C10  
                                                                     l874 1684  
                                                                     l866 15F4  
                                                                     l858 158A  
                                                                     l786 1A4C  
                                                                     l698 225E  
                                                                     l938 0CD4  
                                                                     l867 161A  
                                                                     l859 159C  
                                                                     l787 1A92  
                                                                     l699 227C  
                                                                     l868 162C  
                                                                     l798 1122  
                                                                     l894 0996  
                                                                     l895 09A4  
                                                                     l896 0AC2  
                                                                     l897 09B8  
                                                                     l898 0B0C  
                                                                     l899 09C0  
                                                                     l996 7794  
                                                                     l997 777C  
                                                            __CFG_CPB$OFF 000000  
                                                                     _PEN 007E2A  
                                                                     _SEN 007E28  
                                                   _intervalo_leitura_adc 006F  
                                                                     _cbf 0064  
                                                                     _rtc 0072  
                                                             ?i2_I2C_Read 0002  
                                                            __CFG_BORV$20 000000  
                                                            ___awmod@sign 0085  
                                                             ?i2_I2C_Wait 0001  
                                                             ?i2_I2C_Stop 0001  
                                                                     prod 000FF3  
                                                                     tosl 000FFD  
                                                                     wreg 000FE8  
                                                    __size_of_I2C_Restart 000C  
                                                             ?i2_BCDtoDEC 0001  
                                                __size_of_ajusteSP_Bombas 025A  
                                                            __CFG_LVP$OFF 000000  
                                                            ___ftdiv@cntr 0024  
                                                            ___ftdiv@sign 0029  
                                                                    l1031 01BC  
                                                                    l1032 01B2  
                                                                    l1026 0126  
                                                                    l1051 034C  
                                                                    l1027 01A0  
                                                                    l1300 3B4C  
                                                                    l1044 053E  
                                                                    l1060 0446  
                                                                    l1028 0172  
                                                                    l1301 3B5C  
                                                                    l1061 0498  
                                                                    l1045 02AC  
                                                                    l1037 021A  
                                                                    l1070 05F4  
                                                                    l1054 0358  
                                                                    l1046 02E8  
                                                                    l1071 05FE  
                                                                    l1039 04E6  
                                                                    l1063 04AC  
                                                                    l1055 039A  
                                                                    l1047 02FC  
                                                                    l1072 0702  
                                                                    l1064 04D2  
                                                                    l1056 03C6  
                                                                    l1048 02F4  
                                                                    l1065 057A  
                                                                    l1074 0650  
                                                                    l1091 080E  
                                                                    l1075 067C  
                                                                    l1059 03DC  
                                                                    l1092 089C  
                                                                    l1084 074E  
                                                                    l1260 2EA2  
                                                                    l1093 08C8  
                                                                    l1085 077A  
                                                                    l1069 05CE  
                                                                    l1261 2E9A  
                                                                    l1078 06CA  
                                                                    l1270 2F7C  
                                                                    l1079 06F6  
                                                                    l1263 2EE6  
                                                                    l1280 3836  
                                                                    l1520 3DD8  
                                                                    l1088 07DA  
                                                                    l1521 3DCE  
                                                                    l1441 767A  
                                                                    l1089 0806  
                                                                    l1282 3858  
                                                                    l1530 3F3E  
                                                                    l1266 2F3C  
                                                                    l1283 384E  
                                                                    l1531 3F34  
                                                                    l1267 2EFA  
                                                                    l1292 3AFC  
                                                                    l1524 3DFC  
                                                                    l1700 38E8  
                                                                    l1293 3B0A  
                                                                    l1525 3E08  
                                                                    l1269 2F72  
                                                                    l1286 387C  
                                                                    l1534 3F5A  
                                                                    l1471 39AA  
                                                                    l1287 3888  
                                                                    l1279 3824  
                                                                    l1295 3B24  
                                                                    l1535 3F66  
                                                                    l1472 39BA  
                                                                    l1288 3898  
                                                                    l1296 3B1A  
                                                                    l1544 791E  
                                                                    l1545 790A  
                                                                    l5002 3778  
                                                                    l1467 3972  
                                                                    l1299 3B40  
                                                                    l1468 3964  
                                                                    l1732 37EA  
                                                                    l1733 3776  
                                                                    l1734 37E0  
                                                                    l1727 7A46  
                                                                    l5016 3806  
                                                                    l5050 3938  
                                                                    l5202 7A22  
                                                                    l5028 7A62  
                                                                    l1686 3E2A  
                                                                    l5054 790C  
                                                                    l1687 3E22  
                                                                    l5250 77BA  
                                                                    l1698 3914  
                                                                    l1699 38AA  
                                                                    l5228 34C4  
                                                                    l4706 757C  
                                                                    l6322 24EA  
                                                                    l4910 0580  
                                                                    l6334 253A  
                                                                    l6328 2512  
                                                                    l4772 777E  
                                                                    l5716 0D24  
                                                                    l6364 7BF8  
                                                                    l5582 2F36  
                                                                    l4866 035A  
                                                                    l4876 03DE  
                                                                    l6580 28DE  
                                                                    l6566 2848  
                                                                    l6648 32A8  
                                                                    l6592 2910  
                                                                    l6682 336C  
                                                                    l6674 3350  
                                                                    l5878 78D0  
                                                                    l6966 11A4  
                                                                    STR_1 7FF0  
                                                                    STR_2 7FF0  
                                                                    STR_3 7F91  
                                                                    STR_4 7FB9  
                                                                    STR_5 7FB9  
                                                                    STR_6 7FE6  
                                                                    STR_7 7FFA  
                                                                    STR_8 7EEB  
                                                                    STR_9 7FFA  
                                                                    u5010 08D4  
                                                                    u5020 0906  
                                                                    u5030 0910  
                                                                    u5008 0880  
                                                                    u5050 37A8  
                                                                    u5130 392E  
                                                                    u5027 08FC  
                                                                    u5220 385E  
                                                                    u4510 3E4E  
                                                                    u6120 0F66  
                                                                    u6200 79E6  
                                                                    u4450 3DDE  
                                                                    u4610 0266  
                                                                    u4530 78B0  
                                                                    u4620 02A2  
                                                                    u5340 34B6  
                                                                    u4517 3E44  
                                                                    u5350 34C2  
                                                                    u5280 3B2A  
                                                                    u4480 3F44  
                                                                    u4800 05B2  
                                                                    u4617 025C  
                                                                    u4545 78B4  
                                                                    u5370 77DE  
                                                                    u4730 0438  
                                                                    u4650 032C  
                                                                    u4627 0298  
                                                                    u4740 0482  
                                                                    u4660 0332  
                                                                    u4580 01E0  
                                                                    u6180 78F8  
                                                                    u8020 1368  
                                                                    _RCIF 007CF5  
                                                                    _RCEN 007E2B  
                                                                    u4590 0208  
                                                                    u7310 293C  
                                                                    u4920 070C  
                                                                    u4760 0518  
                                                                    u4728 0402  
                                                                    u7400 33CE  
                                                                    u4737 042E  
                                                                    u4729 043C  
                                                                    u4657 0322  
                                                                    u4578 0156  
                                                                    u7330 3308  
                                                                    u4747 0478  
                                                                    u4587 01D6  
                                                                    u4908 06AE  
                                                                    u8060 13E4  
                                                                    u7340 331E  
                                                                    u4597 01FE  
                                                                    u4950 078C  
                                                                    u7270 2864  
                                                                    u4767 050E  
                                                                    u5680 2A4E  
                                                                    u6800 2522  
                                                                    u8305 3D7E  
                                                                    u6650 3978  
                                                                    u4698 037E  
                                                                    u6810 2532  
                                                                    u7290 290A  
                                                                    u4948 0732  
                                                                    u6820 254A  
                                                                    u4878 0634  
                                                                    u7390 33C6  
                                                                    u6830 255A  
                                                                    u7470 2216  
                                                                    u5970 0D48  
                                                                    u6770 24E2  
                                                                    u4988 07BE  
                                                                    u6780 24FA  
                                                                    u6790 250A  
                                                                    u7950 1284  
                                                                    u8807 7786  
                                                                    u8817 3A6C  
                                                                    u7890 11F0  
                                                                    u8827 3A88  
                                                                    u8837 3AA2  
                                                                    u7990 1300  
                                                                    u8847 76A0  
                                                                    u8777 3338  
                                                                    u8787 7A8A  
                                                                    u8797 7A9E  
                                                                    _RSEN 007E29  
                                                            __CFG_WRT0$ON 000000  
                                                            __CFG_WRT1$ON 000000  
                                                            __CFG_WRT2$ON 000000  
                                                            __CFG_WRT3$ON 000000  
                                                   writeEEPROM16_ext@data 0006  
                                                            __CFG_STVR$ON 000000  
                                                                    __dia 00F0  
                                                                    __ano 00EE  
                                                                    __hor 00F1  
                                                                    __mes 00EF  
                                                                    __min 00F2  
                                                       ?_Lcd_Write_String 0084  
                                                                    __sec 00F3  
                                                           __CFG_EBTRB$ON 000000  
                                                                    _atoi 2E96  
                                                                    _main 0920  
                                             __end_ofi2_getDS1307TimeDate 2D9E  
                                                                    _tel1 01C4  
                                                                    _tel2 01B8  
                                                            ___ftpack@arg 0001  
                                                            ___ftpack@exp 0004  
                                                        __end_of_I2C_Read 78C4  
                                              __end_of_configuraTelefones 1458  
                                                                    fsr0h 000FEA  
                                                                    fsr1h 000FE2  
                                                                    indf0 000FEF  
                                                                    fsr2h 000FDA  
                                                                    fsr0l 000FE9  
                                                                    indf2 000FDF  
                                                                    fsr1l 000FE1  
                                                                    fsr2l 000FD9  
                                                                    btemp 007C  
                                                        __end_of_I2C_Wait 75D2  
                                                        __end_of_I2C_Stop 752E  
                                                 __size_of_tela_ajusteRTC 0232  
                                                        _etapaComunicacao 0051  
                                                            ?i2_I2C_Start 0001  
                                                                    prodh 000FF4  
                                                                    prodl 000FF3  
                                                            ?i2_I2C_Write 0002  
                                                         __end_ofi2_delay 7710  
                                                                    start 011E  
                                                      ??_Lcd_Write_String 0086  
                                                  __size_of_lerTransdutor 0218  
                                                             _str_posicao 0067  
                                            partidaBombaEstacionaria@acao 0083  
                                                        __end_of_BCDtoDEC 75EC  
                                                         __end_of_Lcd_Cmd 76B2  
                                                  __size_ofi2_I2C_Restart 000C  
                                                          clearShiftREG@i 0080  
                                                           ?_atualizarLCD 0088  
                                                            ___ftmul@cntr 0019  
                                                            ___param_bank 000000  
                                                            ___ftmul@sign 001A  
                                                        __end_of_DECtoBCD 7AEC  
                                               __size_of_tela_testeBombas 014A  
                                                     _timerVerificarSinal 00FE  
                                                           _lerParametros 2826  
                                                            ___fttol@exp1 0029  
                                                            ___fttol@lval 0025  
                                                        ?_I2C_Master_Init 008D  
                                                            ?_readButtons 0001  
                                                           __CFG_OSCS$OFF 000000  
                                                 _configuraTelefones$1456 00C7  
                                                             ?i2_RTC_Init 0001  
                                                                   ?_atoi 00C1  
                                                                   ?_main 0001  
                                                                   _ACKEN 007E2C  
                                                                   _ACKDT 007E2D  
                                                         __end_of___awdiv 38A6  
                                                         __end_of___ftadd 215E  
                                                                   STR_10 7DFE  
                                                                   STR_11 7FFD  
                                                                   STR_20 7FE0  
                                                                   STR_12 7C41  
                                                                   STR_13 7FFA  
                                                                   STR_14 7FDA  
                                                                   STR_15 7FFA  
                                                                   STR_23 7FB2  
                                                                   STR_16 7FDA  
                                                                   STR_40 7D9F  
                                                                   STR_17 7FFA  
                                                                   STR_41 7F27  
                                                                   STR_18 7FDA  
                                                                   STR_42 7FFA  
                                                                   STR_50 7DB2  
                                                                   STR_19 7FFA  
                                                                   STR_51 7E67  
                                                                   STR_43 7FEB  
                                                                   STR_36 7F33  
                                                                   STR_44 7E76  
                                                                   STR_52 7DEB  
                                                                   STR_60 7D63  
                                                                   STR_28 7CA9  
                                                         __end_of___awmod 3B6A  
                                                                   STR_45 7FFA  
                                                                   STR_61 7D77  
                                                                   STR_53 7D3B  
                                                                   STR_46 7FEB  
                                                                   STR_70 7ED0  
                                                                   STR_38 7D4F  
                                                                   STR_62 7D07  
                                                                   STR_54 7CE8  
                                                                   STR_71 7FFA  
                                                                   STR_55 7FD4  
                                                                   STR_63 7F87  
                                                                   STR_47 7E86  
                                                                   STR_39 7E66  
                                                                   STR_64 7FFA  
                                                                   STR_48 7FFA  
                                                                   STR_72 7FEB  
                                                                   STR_56 7CF8  
                                                                   STR_80 7F24  
                                                                   STR_65 7FEB  
                                                                   STR_49 7FEB  
                                                                   STR_57 7FCE  
                                                                   STR_73 7FA3  
                                                                   STR_81 7EDE  
                                                                   STR_90 7F28  
                                                                   STR_66 7F49  
                                                                   STR_58 7E96  
                                                                   STR_82 7E45  
                                                                   STR_74 7D8B  
                                                                   STR_91 7E77  
                                                                   STR_67 7EC2  
                                                                   STR_75 7E34  
                                                                   STR_83 7DD8  
                                                                   STR_59 7D26  
                                                                   STR_68 7FFA  
                                                                   STR_92 7E87  
                                                                   STR_76 7F1B  
                                                                   STR_84 7EB4  
                                                                   STR_69 7FEB  
                                                                   STR_85 7FF5  
                                                                   STR_77 7EF7  
                                                                   STR_78 7FC0  
                                                                   STR_94 7F9A  
                                                                   STR_86 7F03  
                                                                   STR_87 7FF5  
                                                                   STR_79 7FC7  
                                                                   STR_95 7F3E  
                                                                   STR_96 7F7D  
                                                                   STR_88 7DC5  
                                                                   STR_97 7F5F  
                                                                   STR_89 7F54  
                                                                   STR_98 7E56  
                                                                   STR_99 7E10  
                                                         __end_of___ftdiv 323C  
                                                            ?_informacoes 0001  
                                                         __end_of___lldiv 39D0  
                                                         __end_of___ftmul 2E96  
                                                                   _T0CON 000FD5  
                                                         ___awdiv@divisor 0082  
                                                         __end_of___fttol 3156  
                                                         __end_of___lwdiv 3E16  
                                                         __end_of___lwmod 3F74  
                                                                   i2l250 1F88  
                                                                   i2l251 1F52  
                                                                   i2l244 1DA2  
                                                                   i2l246 1E96  
                                                                   i2l239 7642  
                                                                   i2l600 2A9C  
                                                                   i2l610 2B5A  
                                                                   i2l603 2AB2  
                                                                   i2l606 2AE4  
                                                                   i2l607 2B74  
                                                                   i2l608 2B08  
                                                                   i2l609 2B16  
                                                                   i2l490 3C4E  
                                                                   i2l491 3C62  
                                                                   i2l484 3BF4  
                                                                   i2l485 3C08  
                                                                   i2l486 3C12  
                                                                   i2l487 3C26  
                                                                   i2l488 3C30  
                                                                   i2l489 3C44  
                                                                   i2l594 2A72  
                                                                   i2l596 2A7C  
                                                                   i2l598 2A92  
                                                         ___awdiv@counter 0084  
                                                                   i2l885 0092  
                                                                   i2l887 00C2  
                                                                   i2l888 00CE  
                                                                   i2l996 76F8  
                                                                   i2l997 76E2  
                                                                   _RCREG 000FAE  
                                                                   _TMR0H 000FD7  
                                                                   _TIMER 0008  
                                                                   _TMR0L 000FD6  
                                                                   _SPBRG 000FAF  
                                                         __end_of__doprnt 0920  
                                                 __size_of_Lcd_Set_Cursor 00C4  
                                                                   _TXREG 000FAD  
                                                         _writeEEPROM_ext 7B30  
                                                           __CFG_PWRT$OFF 000000  
                                                         __end_of_btPress 3D50  
                                                          __CFG_EBTR0$OFF 000000  
                                                          __CFG_EBTR1$OFF 000000  
                                                          __CFG_EBTR2$OFF 000000  
                                                          __CFG_EBTR3$OFF 000000  
                                                           __CFG_WRTB$OFF 000000  
                                                                   __b_ok 005C  
                                                           __CFG_WRTC$OFF 000000  
                                                           __CFG_WRTD$OFF 000000  
                                                         __end_of_readADC 765E  
                                                                   _falha 00DD  
                                                                   _delay 7778  
                                                                   _blink 79B0  
                                                         __end_of_dpowers 7C41  
                                                                   _line1 018F  
                                                                   _line2 017A  
                                                                   _line3 0165  
                                                                   _line4 0150  
                                                         __end_of_isdigit 7686  
                                                  ??_criarCaracteresCGRAM 0084  
                                                                   _shift 0044  
                                                           ___ftpack@sign 0005  
                                                                   _timer 2A5E  
                                                                   atoi@a 00C6  
                                                        __end_of_RTC_Init 7852  
                                                                   atoi@s 00C1  
                                                                   _putch 7576  
                                                            _str_recebida 0100  
                                                       __end_of_I2C_Start 7522  
                                                          __pbitbssCOMRAM 03C8  
                                                       __end_of_I2C_Write 7556  
                                                                   pclath 000FFA  
                                                                   tablat 000FF5  
                                                  __size_of_intToFloatStr 0080  
                                                                   status 000FD8  
                                                   __end_of_telaPrincipal 22D2  
                                                                   wtemp6 007D  
                                                         __end_of_sprintf 7BBE  
                                                          _comunicarTeste 16B2  
                                                         __end_of_strncmp 380C  
                                                   i2writeEEPROM_ext@data 0004  
                                                        __end_of_Lcd_Init 3AE4  
                                                          ??_atualizarLCD 0090  
                                              __size_of_getDS1307TimeDate 0134  
                                              __size_of_setDS1307TimeDate 0112  
                                                        __end_of_Lcd_Port 7B30  
                                                     __size_ofi2_I2C_Read 0036  
                                                     __size_ofi2_I2C_Wait 0018  
                                                         __initialization 39D0  
                                                           _dtl_principal 0055  
                                                     __size_ofi2_I2C_Stop 000C  
                                                          ?_lerParametros 0001  
                                                            __end_of_atoi 2F82  
                                                            __end_of_main 0CFC  
                                                   __end_of_aguardaBuffer 7A28  
                                                     __size_ofi2_BCDtoDEC 0016  
                                                     _estacionaria_Ligada 00E7  
                                                                  ??_atoi 00C3  
                                                                  ??_main 00D4  
                                                           ___fttol@sign1 0024  
                                                            i2I2C_Write@d 0002  
                                                           _status_jockey 00FC  
                                      lerParametros@verifica_memoria_nova 0094  
                                                      __size_of_Lcd_Clear 0012  
                                              ??_acaoTesteBomasProgramado 00D4  
                                                           __activetblptr 000002  
                                                                  ?_TIMER 0001  
                                                           _lerTransdutor 1D76  
                                                   __end_of_clearShiftREG 77E4  
                                                           i2_I2C_Restart 750A  
                                                    _tempo_limite_partida 00E5  
                                                               I2C_Read@a 0081  
                                                                  TIMER@c 0043  
                                                            ?_setShiftREG 0001  
                                                         __CFG_CCP2MUX$ON 000000  
                                                      readEEPROM_ext@data 008D  
                                                                  ?_delay 0080  
                                                                  ?_blink 0080  
                                                                  _ADCON0 000FC2  
                                                                  _ADCON1 000FC1  
                                                                  STR_100 7F73  
                                                                  STR_101 7E22  
                                                                  STR_102 7F69  
                                                                  STR_103 7F0F  
                                                                  STR_104 7EA5  
                                                                  STR_105 7FAB  
                                                                  _ADRESH 000FC4  
                                                                  _ADRESL 000FC3  
                                                        ___awdiv@dividend 0080  
                                                                  ?_timer 0001  
                                                                  ?_putch 0001  
                                                        __end_of___ftpack 3620  
                                                          lerTransdutor@i 002A  
                                                               ??i2_delay 0003  
                                                  __end_of_comunicarTeste 18FE  
                                                                  i2l1330 35AA  
                                                                  i2l1411 2E44  
                                                                  i2l1332 35EE  
                                                                  i2l1412 2E56  
                                                                  i2l1333 35E2  
                                                                  i2l1326 358A  
                                                                  i2l1327 357E  
                                                                  i2l1407 2DE4  
                                                                  i2l1408 2E18  
                                                                  i2l1329 35C2  
                                                                  i2l1361 2012  
                                                                  i2l1409 2E2A  
                                                                  i2l1434 311E  
                                                                  i2l1371 2074  
                                                                  i2l1435 3110  
                                                                  i2l1380 20BA  
                                                                  i2l1372 2068  
                                                                  i2l1428 30F4  
                                                                  i2l1381 20AE  
                                                                  i2l1357 1FE4  
                                                                  i2l1437 313E  
                                                                  i2l1429 30E2  
                                                                  i2l1366 2080  
                                                                  i2l1383 20E2  
                                                                  i2l1384 2100  
                                                                  i2l1392 319C  
                                                                  i2l1385 2132  
                                                                  i2l1393 31DC  
                                                                  i2l1394 3204  
                                                                  i2l1398 3708  
                                                                  i2l1399 373A  
                                                                  i2l6014 3236  
                                                                  i2l4702 3768  
                                                                  i2l6062 2E90  
                                                                  i2l6126 3150  
                                                                  i2l4704 376C  
                                                                  i2l5186 76E4  
                                                                  i2l5452 361A  
                                                                  i2l6238 1D98  
                                                                  _INTCON 000FF2  
                                                                  i2l5968 2158  
                                                        __end_of___lwtoft 7636  
                                                                  u621_41 1FA0  
                                                                  u622_41 1FB4  
                                                                  u642_41 3168  
                                                                  u644_41 3182  
                                                                  u647_41 2DB0  
                                                                  u656_41 3080  
                                                               ??_Lcd_Cmd 0081  
                                                                  u649_41 2DCA  
                                                                  _TMR0IF 007F92  
                                                          __CFG_WDTPS$128 000000  
                                       __size_of_partidaBombaEstacionaria 00EC  
                                                 __size_of_Lcd_Write_Char 0042  
                                                                  _SSPADD 000FC8  
                                                                  _SSPBUF 000FC9  
                                               ?_partidaBombaEstacionaria 0001  
                                                     __size_ofi2_RTC_Init 0032  
                                                       ??_ajusteSP_Bombas 00C4  
                                                 writeEEPROM16_ext@adress 0008  
                                                     _dias_restante_teste 00EA  
                                                ??_configuraRegistradores 0080  
                                                                  __b_esc 0062  
                                                                  ___ftge 36D6  
                                                          _readEEPROM_ext 3ECC  
                                                                  ___wmul 76B2  
                                                               ??___awdiv 0084  
                                                               ??___ftadd 0021  
                                                               ??___awmod 0084  
                                                               ??___ftdiv 0021  
                                                         _getSinalSIM800L 2440  
                                                               ??___lldiv 0088  
                                                               ??___ftmul 0012  
                                                               ??___fttol 001F  
                                                                  _blinkk 03C8  
                                                               ??___lwdiv 0084  
                                                               ??___lwmod 008B  
                                                       _estagio_envio_SMS 006C  
                                                 __end_of_writeEEPROM_ext 7B76  
                                                           ?_limparBuffer 0001  
                                                               ??__doprnt 0092  
                                                                  _memset 78FE  
                                                                  delay@x 0080  
                                                                  clear_0 3A2E  
                                                                  clear_1 3A3A  
                                                                  clear_2 3A48  
                                                        ___awdiv@quotient 0086  
                                                                  blink@i 0084  
                                                         ___awmod@divisor 0082  
                                                               ??_btPress 0080  
                                                           _intToFloatStr 3B6A  
                                                            __doprnt@flag 009B  
                                                         ___awmod@counter 0084  
                                           setDS1307TimeDate@ptrToUserVal 008C  
                                                                  _printf 3FC2  
                                                            __doprnt@prec 0096  
                                                                  _strchr 7A28  
                                                                  _strlen 3E16  
                                                                  _strstr 38A6  
                                                          ?_lerTransdutor 0001  
                                                   ___ftmul@f3_as_product 0016  
                                                           dataLoger@logs 00C2  
                                                               ??_readADC 0003  
                                                            __pdataCOMRAM 007A  
                                                               ??_isdigit 0080  
                                                          ?i2_I2C_Restart 0001  
                                                               ?_I2C_Read 0081  
                                                               ?_I2C_Wait 0001  
                                                               ?_I2C_Stop 0001  
                                                            __mediumconst 7C06  
                                                                  tblptrh 000FF7  
                                                                  tblptrl 000FF6  
                                                                  tblptru 000FF8  
                                                                  putch@c 0080  
                                                               ?_BCDtoDEC 0001  
                                                               ??_sprintf 00B1  
                                                               ??_strncmp 008C  
                                                               ?_DECtoBCD 0001  
                                                         Lcd_Set_Cursor@a 0084  
                                                         Lcd_Set_Cursor@b 0083  
                                                         Lcd_Set_Cursor@y 0086  
                                                         Lcd_Set_Cursor@z 0085  
                                                          _status_SIM800L 006E  
                                                         ?_comunicarTeste 0001  
                                                              __accesstop 0080  
                                                 __end_of__initialization 3A4E  
                                                              ___ftadd@f1 001B  
                                                              ___ftadd@f2 001E  
                                                          _tela_ajusteRTC 1B44  
                                                              ___ftge@ff1 0001  
                                                              ___ftge@ff2 0004  
                                                       __end_of_Lcd_Clear 7576  
                                                           ___rparam_used 000001  
                                                              ___ftdiv@f1 001B  
                                                              ___ftdiv@f2 001E  
                                                              ___ftdiv@f3 0025  
                                                         ??_lerParametros 0094  
                                                           __end_of_TIMER 011E  
                                                              _acaoBombas 3620  
                                                  __end_of_readEEPROM_ext 3F22  
                                                     _telefoneSelecionado 00F6  
                                                              ___ftmul@f1 000C  
                                                              ___ftmul@f2 000F  
                                                    __size_ofi2_I2C_Start 000C  
                                                              ___fttol@f1 001B  
                                                    __size_ofi2_I2C_Write 000E  
                                                        _tela_testeBombas 25A8  
                                                          __pcstackCOMRAM 0001  
                                                        _status_principal 00FB  
                                                            __pidataBANK0 74E9  
                                                            __pidataBANK1 74E5  
                                                      __size_of_dataLoger 0246  
                                                           __end_of_delay 77AE  
                                                           __end_of_blink 79EC  
                                                          ??_limparBuffer 0088  
                                                __size_of_acaoTesteBombas 03D8  
                                                           __end_of_timer 2B7A  
                                                           __end_of_putch 758A  
                                                          ?_intToFloatStr 00B7  
                                                       ?_readEEPROM16_ext 008E  
                                                               ?_RTC_Init 0001  
                                                       intToFloatStr@conv 00BE  
                                                              ___lwtoft@c 0009  
                                                          _tela_menu_posi 0068  
                                                      ??_readEEPROM16_ext 0090  
                                                    __size_of_readButtons 007E  
                                                          _Lcd_Set_Cursor 33D4  
                                                                 ??_TIMER 0031  
                                                            ??i2_I2C_Read 0004  
                                                              ??_I2C_Read 0083  
                                                            ??i2_I2C_Wait 0001  
                                                      __size_of_getSerial 011C  
                                                              ??_I2C_Wait 0080  
                                                            ??i2_I2C_Stop 0002  
                                                              ??_I2C_Stop 0081  
                                                    __size_of_informacoes 0074  
                                                            __sec_partida 00ED  
                                                    __end_of_atualizarLCD 330E  
                                                            ??i2_BCDtoDEC 0001  
                                                               ?_Lcd_Init 0001  
                                                              ??_BCDtoDEC 0080  
                                                                 ??_delay 0082  
                                                               ?_Lcd_Port 0001  
                                                              __doprnt@ap 0090  
                                                                 ??_blink 0084  
                                                              __doprnt@cp 009C  
                                                              __doprnt@pb 008C  
                                                   writeEEPROM_ext@adress 008D  
                                                              ??_DECtoBCD 0088  
                                                                 ??_timer 0009  
                                                                 ??_putch 0080  
                                                              __pbssBANK0 00D4  
                                                              __pbssBANK1 0100  
                                                  __end_of_tela_ajusteRTC 1D76  
                                                       _tempo_reenvio_SMS 007B  
                                                              __menu_posi 00D8  
                                                 __end_of_getSinalSIM800L 25A8  
                                                     writeEEPROM_ext@data 008C  
                                                         ?_readEEPROM_ext 0001  
                                                      __end_ofi2_I2C_Read 7778  
                                                            I2C_Read@temp 0083  
                                                      __end_ofi2_I2C_Wait 75B8  
                                                                 ?___ftge 0001  
                                                      __end_ofi2_I2C_Stop 750A  
                                         __size_of_configuraRegistradores 0056  
                                                                 ?___wmul 0080  
                                                       _writeEEPROM16_ext 75EC  
                                                      __size_of_salvarLOG 00C4  
                                                      __end_ofi2_BCDtoDEC 75A0  
                                                              _flag_b_esc 0063  
                                                                 ?_memset 0080  
                                                      _configuraTelefones 10D4  
                                                        ?_writeEEPROM_ext 008C  
                                                      __size_of_validaRTC 004E  
                                                            ??i2_RTC_Init 0004  
                                                         ??_lerTransdutor 002A  
                                                              ??_RTC_Init 008C  
                                               __size_of_Lcd_Write_String 003A  
                                                      ?_writeEEPROM16_ext 0006  
                                                               ?___ftpack 0001  
                                                  __end_of_Lcd_Set_Cursor 3498  
                                           criarCaracteresCGRAM@character 0087  
                                                              I2C_Write@d 008A  
                                                                 ?_printf 00A1  
                                        __end_of_acaoTesteBomasProgramado 79B0  
                                                         ??i2_I2C_Restart 0002  
                                                                 ?_strchr 0080  
                                                                 ?_strlen 0080  
                                                               ?___lwtoft 0009  
                                                                 ?_strstr 008F  
                                                           ??_I2C_Restart 0081  
                                                     ?_configuraTelefones 0001  
                                                     ??_writeEEPROM16_ext 0008  
                                                              ??_Lcd_Init 0083  
                                                              ??_Lcd_Port 0080  
                                                                 _SSPCON1 000FC6  
                                                                 _SSPCON2 000FC5  
                                                       __end_of_dataLoger 1B44  
                                                                 _SSPSTAT 000FC7  
                                                    __size_of_setShiftREG 0048  
                                                                 i2_delay 76DE  
                                                         ?_tela_ajusteRTC 0001  
                                                            _flag_b_menos 0061  
                                                          _Lcd_Write_Char 7A68  
                                                                 _Lcd_Cmd 7686  
                                                              _dtl_jockey 0056  
                                                      __size_of_writeChar 000E  
                                                      __end_ofi2_RTC_Init 7742  
                                                               _I2C_Start 7516  
                                                              _gsmOcupado 00F4  
                                                               _I2C_Write 7548  
                                                    ??_configuraTelefones 00C5  
                                                             ?_acaoBombas 0001  
                                                       __end_of_getSerial 2A5E  
                                                                 __Hparam 0000  
                                                                 __Lparam 0000  
                                               __end_of_writeEEPROM16_ext 760E  
                                                         _sp_estacionaria 00DE  
                                            __size_ofi2_getDS1307TimeDate 0112  
                                                         __size_of___ftge 009C  
                                                                 __b_mais 005E  
                                                         ??_intToFloatStr 00B9  
                                                                 ___awdiv 380C  
                                                                 ___ftadd 1F8E  
                                                                 ___awmod 3AE4  
                                                                 ___ftdiv 3156  
                                                                 ___lldiv 393E  
                                                         __size_of___wmul 002C  
                                                                 ___ftmul 2D9E  
                                                                 ___fttol 306E  
                                                                 ___lwdiv 3DB4  
                                                                 ___lwmod 3F22  
                                                           atualizarLCD@i 0090  
                                                                 __doprnt 0122  
                                                                 __pcinit 39D0  
                                                              ??___ftpack 0006  
                                                         __size_of_memset 003A  
                                                                 _btPress 3CDC  
                                                                 __ramtop 0600  
                                                         ?_Lcd_Set_Cursor 0083  
                                                                 __tensao 004C  
                                                                 __ptext0 0920  
                                                                 __ptext1 25A8  
                                                                 __ptext2 1B44  
                                                                 __ptext3 3F74  
                                                                 __ptext4 2B7A  
                                                                 __ptext5 7AAA  
                                                                 __ptext6 215E  
                                                                 __ptext7 7BBE  
                                                                 __ptext8 2826  
                                                                 __ptext9 7852  
                                               criarCaracteresCGRAM@F2961 7C07  
                                                         __size_of_printf 003C  
                                                              ??___lwtoft 000C  
                                                                 _dtl_dia 005B  
                                                                 _dtl_ano 0059  
                                                         __size_of_strchr 0040  
                                                                 _readADC 7636  
                                                         __size_of_strlen 0060  
                                                                 _dtl_mes 005A  
                                                                 _dtl_min 0057  
                                                           i2BCDtoDEC@val 0001  
                                                         __size_of_strstr 0098  
                                                                 _dpowers 7C37  
                                                    readEEPROM16_ext@data 0091  
                                                                 _isdigit 765E  
                                                       ??_acaoTesteBombas 00C4  
                                                        ___awmod@dividend 0080  
                                                         _ajusteSP_Bombas 1458  
                                                __size_of_I2C_Master_Init 0064  
                                                        _dtl_carregar_log 0053  
                                                  _configuraRegistradores 3E76  
                                                                 _pressao 00FD  
                                                                 _sprintf 7B76  
                                                           __doprnt@width 009E  
                                                     __end_of_I2C_Restart 753A  
                                                  __end_of_Lcd_Write_Char 7AAA  
                                                                 _strncmp 3772  
                                                    end_of_initialization 3A4E  
                                                       __end_of_salvarLOG 355C  
                                                    __end_of_limparBuffer 781A  
                                           __size_of_criarCaracteresCGRAM 00C6  
                                                       __end_of_validaRTC 3FC2  
                                                                 memset@c 0082  
                                                                 memset@n 0084  
                                                                 memset@p 0086  
                                                           __Lmediumconst 7C06  
                                                              _timer$1328 0009  
                                                              _timer$1329 000B  
                                                              blink@start 0082  
                                                              ?_I2C_Start 0001  
                                                              ?_I2C_Write 008A  
                                                            writeChar@hex 0080  
                                                            _bufferSerial 0114  
                                                        ?_getSinalSIM800L 0001  
                                                    _acaoTesteBombas$1321 00CF  
                                                    _acaoTesteBombas$1316 00CD  
                                                    _acaoTesteBombas$1326 00D1  
                                                    _acaoTesteBombas$2358 00CB  
                                                         ___lldiv@divisor 0084  
                                                         ___lldiv@counter 008C  
                                                ??_configurarEstacionaria 00B7  
                                                               _RCSTAbits 000FAB  
                                                                 printf@f 00A1  
                                                        I2C_Master_Init@c 008D  
                                                                 postdec1 000FE5  
                                                                 postdec2 000FDD  
                                                                 postinc0 000FEE  
                                                                 postinc2 000FDE  
                                                               Lcd_Port@a 0080  
                                                                 strlen@s 0080  
                                                              getSerial@i 00BE  
                                                               _PORTAbits 000F80  
                                                               _PORTBbits 000F81  
                                                               _PORTCbits 000F82  
                                                               _PORTDbits 000F83  
                                                   __size_of_atualizarLCD 00D2  
                                                               _PORTEbits 000F84  
                                                       __end_of_writeChar 7564  
                                                  __size_of_telaPrincipal 0174  
                                                               _TRISAbits 000F92  
                                                               _TRISBbits 000F93  
                                                               _TRISCbits 000F94  
                                                        ??_comunicarTeste 00BB  
                                                               _TRISDbits 000F95  
                                                               _TRISEbits 000F96  
                                                 i2writeEEPROM_ext@adress 0005  
                                                     __size_of_acaoBombas 00B6  
                                                __end_of_tela_testeBombas 26F2  
                                                       __size_of_I2C_Read 003A  
                                                       __size_of_I2C_Wait 001A  
                                                       __size_of_I2C_Stop 000C  
                                                           _checar_serial 0065  
                                                         ?_Lcd_Write_Char 0001  
                                                       Lcd_Write_String@a 0084  
                                                       Lcd_Write_String@i 0086  
                                                  __size_of_aguardaBuffer 003C  
                                                       __size_of_BCDtoDEC 001A  
                                                       __size_of_DECtoBCD 0042  
                                       __size_of_acaoTesteBomasProgramado 003C  
                                                             ___ftdiv@exp 0028  
                                               ?_acaoTesteBomasProgramado 0001  
                                                               _TXSTAbits 000FAC  
                                                         _timer_envio_sms 006A  
                                              __size_of_writeEEPROM16_ext 0022  
                                                  __size_of_clearShiftREG 0036  
                                                        _intensidadeSinal 00FF  
                                                             ___ftmul@exp 0015  
                                                         getSerial@length 00BC  
                                                            _atualizarLCD 323C  
                                                               _Lcd_Clear 7564  
                                                          __end_of___ftge 3772  
                                                          i2I2C_Read@temp 0004  
                                                          __end_of___wmul 76DE  
                                                      intToFloatStr@F2544 01D0  
                                                        _Lcd_Write_String 78C4  
                                                           __pidataCOMRAM 3FFE  
                                                 __end_of_ajusteSP_Bombas 16B2  
                                                          __end_of_memset 7938  
                                                 salvarLOG@ultimoLogSalvo 008F  
                                                          __end_of_printf 3FFE  
                                                       __size_of_RTC_Init 0038  
                                                             _I2C_Restart 752E  
                                                          __end_of_strchr 7A68  
                                                          __end_of_strlen 3E76  
                                                          __end_of_strstr 393E  
                                                     start_initialization 39D0  
                                                             i2I2C_Read@a 0002  
                                                      intToFloatStr@valor 00B9  
                                                _partidaBombaEstacionaria 2F82  
                                               __size_of_readEEPROM16_ext 0038  
                                                       __size_of_Lcd_Init 0088  
                                                       __size_of_Lcd_Port 0044  
                                                        ??_readEEPROM_ext 008C  
                                                       ??_I2C_Master_Init 0091  
                                                 _tempo_coun_estacionaria 006D  
                                                       atualizarLCD@line1 0088  
                                                       atualizarLCD@line2 008A  
                                                       atualizarLCD@line3 008C  
                                                       atualizarLCD@line4 008E  
                                                           ??i2_I2C_Start 0002  
                                                             ??_I2C_Start 0081  
                                                           ??i2_I2C_Write 0004  
                                                           _telaPrincipal 215E  
                                                             ??_I2C_Write 008C  
                                                   __end_of_lerParametros 2942  
                                                              ?_Lcd_Clear 0001  
                                                                ??___ftge 0007  
                                         __size_of_configurarEstacionaria 016E  
                                                                ??___wmul 0084  
                                                             __doprnt@len 0099  
                                                             __doprnt@val 0097  
                                                             __pdataBANK0 00F7  
                                                             __pdataBANK1 01D0  
                                                           _aguardaBuffer 79EC  
                                                           ??_readButtons 0001  
                                                         Lcd_Write_Char@a 0083  
                                                                ??_memset 0086  
                                                         Lcd_Write_Char@y 0082  
                                                                ??_printf 00B5  
                                                           ??_informacoes 00B7  
                                                                ??_strchr 0084  
                                                                ??_strlen 0082  
                                                                ??_strstr 0093  
                                                       __size_of___ftpack 00C4  
                                                             __pbssCOMRAM 0044  
                                                       __size_of___lwtoft 0028  
                                                           _clearShiftREG 77AE  
                                                           __pcstackBANK0 0080  
                                                   __size_of_limparBuffer 0036  
                                                        ??_tela_ajusteRTC 00B7  
                                                   lerTransdutor@_pressao 002B  
                                                     i2_getDS1307TimeDate 2C8C  
                                                            _isdigit$1853 0081  
                                                        intToFloatStr@end 00BA  
                                                                ?i2_delay 0001  
                                                                ?_Lcd_Cmd 0001  
                                                               __doprnt@c 00A0  
                                                               __doprnt@f 008E  
                                                          ?_telaPrincipal 0001  
                                                               _dataLoger 18FE  
                                                            ??_acaoBombas 0084  
                                                        ___lwdiv@dividend 0080  
                                                     lerTransdutor@tensao 002E  
                                                        ??_Lcd_Set_Cursor 0084  
                                                               __pintcode 0008  
                                                    ?i2_getDS1307TimeDate 0006  
                                                           __pmediumconst 7C06  
                                                         _acaoTesteBombas 0CFC  
                                                               _flag_b_ok 005D  
                                                     configuraTelefones@i 00C9  
                                                                ?___awdiv 0080  
                                                                ?___ftadd 001B  
                                                                ?___awmod 0080  
                                                          ?_aguardaBuffer 0093  
                                                                ?___ftdiv 001B  
                                                     __end_ofi2_I2C_Start 74FE  
                                                                ?___lldiv 0080  
                                                                ?___ftmul 000C  
                                                                ?___fttol 001B  
                                                     __end_ofi2_I2C_Write 7548  
                                                               _getSerial 2942  
                                                   _timerEtapaComunicacao 00F5  
                                                                ?___lwdiv 0080  
                                                                ?___lwmod 0087  
                                                                ?__doprnt 008C  
                                                               _bufferAUX 01A4  
                                                               _ajust_tel 00D6  
                                                            _limparBuffer 77E4  
                                                    readEEPROM_ext@adress 008C  
                                                                ?_btPress 0001  
                                                        ?_ajusteSP_Bombas 0001  
                                                   __end_of_lerTransdutor 1F8E  
                                                                ?_readADC 0001  
                                                             _flag_b_mais 005F  
                                                 ?_configuraRegistradores 0001  
                                                   __end_ofi2_I2C_Restart 7516  
                                                          __size_of_TIMER 0116  
                                                                ?_isdigit 0001  
                                                                _I2C_Read 788A  
                                                          ?_clearShiftREG 0001  
                                                                _I2C_Wait 75B8  
                                                                _I2C_Stop 7522  
                                                     __end_of_readButtons 3C68  
                                                           ??_setShiftREG 0080  
                                                __size_of_writeEEPROM_ext 0046  
                                                  _configurarEstacionaria 22D2  
                                                  readEEPROM16_ext@adress 0093  
                                                                _BCDtoDEC 75D2  
                                                      __end_of_acaoBombas 36D6  
                                                     __end_of_informacoes 3CDC  
                                                        ___lwdiv@quotient 0084  
                                                          __size_of_delay 0036  
                                                          __size_of_blink 003C  
                                                                ?_sprintf 00A1  
                                                                ?_strncmp 0086  
                                                                _DECtoBCD 7AAA  
                                                          __size_of_timer 011C  
                                                          __size_of_putch 0014  
                                                               _menu_posi 00D9  
                                                               _horimetro 004F  
                                       __end_ofcriarCaracteresCGRAM@F2961 7C37  
                                                          ___wmul@product 0084  
                                                               btPress@bt 0080  
                                                              ?_dataLoger 0001  
                                                               _salvarLOG 3498  
                                                                _PIE1bits 000F9D  
                                                               blink@line 0080  
                                                         _sp_pressao_rede 00E1  
                                                               _validaRTC 3F74  
                                                        _horario_de_teste 00E9  
                                             __size_of_configuraTelefones 0384  
                                                                Lcd_Cmd@a 0082  
                                                                _PIR1bits 000F9E  
                                                                i2u631_40 2044  
                                                                i2u560_40 35FA  
                                                                i2u625_40 1FD4  
                                                                i2u650_40 2DD4  
                                                                i2u635_40 208A  
                                                                i2u563_40 7764  
                                                                i2u556_40 356E  
                                                                i2u628_40 2002  
                                                                i2u564_45 7768  
                                                                i2u645_40 318C  
                                                                i2u661_40 30FC  
                                                                i2u638_40 20C4  
                                                                i2u662_40 3126  
                                                                i2u670_40 1E90  
                                                                i2u658_40 30AA  
                                                                i2u658_45 30A0  
                                                   ??i2_getDS1307TimeDate 0008  
                                                                i2u668_40 1DFC  
                                                                i2u853_40 006A  
                                                                i2u854_45 006E  
                                                                i2u885_47 76EA  
                                                             ??_Lcd_Clear 0083  
                                                                i2u886_47 763C  
                                        _tempo_corrido_teste_estacionaria 00E3  
                                                               _sp_jockey 00E0  
                                                     _dtl_posi_visualizar 00D4  
                                                              ?_getSerial 00B7  
                                                            setShiftREG@i 0081  
                                            __end_of_criarCaracteresCGRAM 33D4  
                                                               _teste_run 00DC  
                                                   __end_of_intToFloatStr 3BEA  
                                                                _RTC_Init 781A  
                                          __end_of_configuraRegistradores 3ECC  
                                                              _ADCON0bits 000FC2  
                                                       ___wmul@multiplier 0080  
                                                               _totalLogs 00D5  
                                                        _dtl_estacionaria 0054  
                                                        ??_Lcd_Write_Char 0081  
                                                                i2delay@x 0001  
                                               _tempo_limite_estacionaria 00E8  
                                                                _Lcd_Init 3A5C  
                                                       i2_writeEEPROM_ext 7938  
                                                               _writeChar 7556  
                                                                _Lcd_Port 7AEC  
                                                       ?_tela_testeBombas 0001  
                                                         _tel_selecionado 00E2  
                                                               copy_data0 39E4  
                                                               copy_data1 3A04  
                                                        _readEEPROM16_ext 7852  
                                                      ?i2_writeEEPROM_ext 0004  
                                                         ??_telaPrincipal 00C4  
                                                      ??_tela_testeBombas 00B7  
                                                __end_of_Lcd_Write_String 78FE  
                                                             _dtl_posicao 00F9  
                                                        __size_ofi2_delay 0032  
                                                     __end_of_setShiftREG 7C06  
                                                 __end_of_acaoTesteBombas 10D4  
                                                        __size_of_Lcd_Cmd 002C  
                                                              ?_salvarLOG 0001  
                                                             i2_I2C_Start 74F2  
                                                             i2_I2C_Write 753A  
                                                     ??i2_writeEEPROM_ext 0005  
                                                     _intervalo_teste_dia 00EB  
                                                              ?_validaRTC 0001  
                                                                __Hrparam 0000  
                                                         ??_aguardaBuffer 0095  
                                                                __Lrparam 0000  
                                                   criarCaracteresCGRAM@i 00BB  
                                                   criarCaracteresCGRAM@j 00BA  
                                                   criarCaracteresCGRAM@k 00B9  
                                                      _tempo_teste_bombas 00F7  
                                                        __size_of___awdiv 009A  
                                                        __size_of___ftadd 01D0  
                                                        __size_of___awmod 0086  
                                                        __size_of___ftdiv 00E6  
                                                __size_of_getSinalSIM800L 0168  
                                                        __size_of___lldiv 0092  
                                                        __size_of___ftmul 00F8  
                                                        __size_of___fttol 00E8  
                                                                __b_menos 0060  
                                                        __size_of___lwdiv 0062  
                                                        __size_of___lwmod 0052  
                                                             _readButtons 3BEA  
                                                                ___ftpack 355C  
                                                        __size_of__doprnt 07FE  
                                                             BCDtoDEC@val 0080  
                                                     Lcd_Write_Char@tempp 0081  
                                                         ??_clearShiftREG 0080  
                                                        __size_of_btPress 0074  
                                              ??_partidaBombaEstacionaria 0083  
                                                         intToFloatStr@pr 00C2  
                                                                ___lwtoft 760E  
                                                             _informacoes 3C68  
                                                    _ajusteSP_Bombas$2360 00C4  
                                                            ?_I2C_Restart 0001  
                                                                _base_sec 0071  
                                                         _I2C_Master_Init 3D50  
                                                        __size_of_readADC 0028  
                                               __end_ofi2_writeEEPROM_ext 7974  
                                                          lerParametros@i 0095  
                                                                __sec_aux 00EC  
                                                           _tempo_partida 00E6  
                                                        __size_of_isdigit 0028  
                                                         ___lwdiv@divisor 0082  
                                                         ___lwdiv@counter 0086  
                                                              ?_writeChar 0080  
                                                                __ptext10 3C68  
                                                                __ptext11 2440  
                                                                __ptext20 16B2  
                                                                __ptext12 2942  
                                                                __ptext21 7556  
                                                                __ptext13 2E96  
                                                                __ptext30 3E76  
                                                                __ptext22 3FC2  
                                                                __ptext14 26F2  
                                                                __ptext31 323C  
                                                                __ptext23 77E4  
                                                                __ptext15 75D2  
                                                                __ptext40 7B30  
                                                                __ptext32 78C4  
                                                                __ptext24 78FE  
                                                                __ptext16 18FE  
                                                                __ptext41 3ECC  
                                                                __ptext33 7A68  
                                                                __ptext25 79EC  
                                                                __ptext17 330E  
                                                                __ptext50 3F22  
                                                                __ptext42 752E  
                                                                __ptext34 33D4  
                                                                __ptext26 38A6  
                                                                __ptext18 22D2  
                                                                __ptext51 3DB4  
                                                                __ptext43 788A  
                                                                __ptext35 1458  
                                                                __ptext27 3772  
                                                                __ptext19 10D4  
                                                                __ptext60 7548  
                                                                __ptext52 3AE4  
                                                                __ptext44 3B6A  
                                                                __ptext36 79B0  
                                                                __ptext28 3E16  
                                                                __ptext61 7522  
                                                                __ptext53 380C  
                                                                __ptext45 7B76  
                                                                __ptext37 7974  
                                                                __ptext29 7A28  
                                                                __ptext62 7516  
                                                                __ptext54 77AE  
                                                                __ptext46 0122  
                                                                __ptext38 0CFC  
                                                                __ptext71 2A5E  
                                                                __ptext63 75B8  
                                                                __ptext55 3CDC  
                                                                __ptext47 7576  
                                                                __ptext39 3498  
                                                                __ptext80 753A  
                                                                __ptext72 2C8C  
                                                                __ptext64 3A5C  
                                                                __ptext56 3620  
                                                                __ptext48 765E  
                                                                __ptext81 74FE  
                                                                __ptext73 750A  
                                                                __ptext65 7564  
                                                                __ptext57 2F82  
                                                                __ptext49 76B2  
                                                                __ptext90 36D6  
                                                                __ptext82 74F2  
                                                                __ptext74 7742  
                                                                __ptext66 7686  
                                                                __ptext58 7778  
                                                                __ptext91 3156  
                                                                __ptext83 75A0  
                                                                __ptext75 758A  
                                                                __ptext67 7AEC  
                                                                __ptext59 781A  
                                                                __ptext92 1F8E  
                                                                __ptext84 3BEA  
                                                                __ptext76 7710  
                                                                __ptext68 3D50  
                                                                __ptext93 355C  
                                                                __ptext85 1D76  
                                                                __ptext77 75EC  
                                                                __ptext69 393E  
                                                                __ptext94 0000  
                                                                __ptext86 7636  
                                                                __ptext78 7938  
                                                                __ptext87 760E  
                                                                __ptext79 76DE  
                                                                __ptext88 306E  
                                                                __ptext89 2D9E  
                                                                _ajst_rtc 03C9  
                                                                _bt_press 007A  
                                                        __size_of_sprintf 0048  
                                                        acaoTesteBombas@i 00D3  
                                                    getSinalSIM800L@sinal 00CA  
                                                                _dtl_hora 0058  
                                                        __size_of_strncmp 009A  
                                                                _incendio 00DB  
                                                     _comunicarTeste$1201 00BD  
                                                     _comunicarTeste$1213 00BF  
                                                     _comunicarTeste$1214 00C1  
                                                     _comunicarTeste$1215 00C3  
                                                       ??_writeEEPROM_ext 008D  
                                                           __size_of_atoi 00EC  
                                                           __size_of_main 03DC  
                                                             ??_dataLoger 00B7  
                                                     _status_estacionaria 00FA  
                                                              strncmp@len 008A  
                                                                blink@end 0083  
                                                                _tel_posi 00D7  
                                               _criarCaracteresCGRAM$1380 00B7  
                                                                int$flags 007C  
                                                                atoi@sign 00C5  
                                                             ??_getSerial 00BA  
                                                         _str_recebido_ok 0066  
                                                      _telaPrincipal$2359 00C4  
                                                              _INTCONbits 000FF2  
                                                              i2_I2C_Read 7742  
                                                              i2_I2C_Wait 75A0  
                                                              i2_I2C_Stop 74FE  
                                                             _setShiftREG 7BBE  
                                                                isdigit@c 0082  
                                                                memset@p1 0080  
                                                              i2_BCDtoDEC 758A  
                                                             DECtoBCD@res 0089  
                                                             DECtoBCD@val 0088  
                                                _acaoTesteBomasProgramado 7974  
                                                                intlevel2 0006  
                                                               sprintf@ap 00B1  
                                                               sprintf@pb 00B3  
                                                               sprintf@wh 00A1  
                                                    _criarCaracteresCGRAM 330E  
                                                               strchr@chr 0082  
                                                        ___lwmod@dividend 0087  
                                                               strchr@ptr 0080  
                                                        ___lldiv@dividend 0080  
                                         i2getDS1307TimeDate@ptrToUserVal 0006  
                                           getDS1307TimeDate@ptrToUserVal 008C  
                                                             ??_salvarLOG 008E  
                                                        ?_acaoTesteBombas 0001  
                                                 __size_of_comunicarTeste 024C  
                                                             ??_validaRTC 0080  
                                                               strncmp@s1 0086  
                                                               strncmp@s2 0088  
                                                          _dataLoger$1430 00BC  
                                                          _dataLoger$1441 00C0  
                                                          _dataLoger$1436 00BE  
                                                           _teste_sms_run 006B  
                                                        aguardaBuffer@str 0093  
                                                       _getDS1307TimeDate 26F2  
                                                       _setDS1307TimeDate 2B7A  
                                                                printf@ap 00B5  
                                                                printf@pb 00B7  
                                                            getSerial@end 00B9  
                                                            getSerial@ret 00BF  
                                                            getSerial@str 00B7  
                                                 __end_of_I2C_Master_Init 3DB4  
                                                      ?_getDS1307TimeDate 008C  
                                                      ?_setDS1307TimeDate 008C  
                                                      Lcd_Set_Cursor@temp 0087  
                                                              i2_RTC_Init 7710  
                                                                sprintf@f 00A3  
                                                 ?_configurarEstacionaria 0001  
                                                        ___lldiv@quotient 0088  
                                                             _qtd_leitura 0070  
                                                         ___lwmod@divisor 0089  
                                              __size_ofi2_writeEEPROM_ext 003C  
                                                                strlen@cp 0084  
                                                         ___lwmod@counter 008B  
                                                     ??_getDS1307TimeDate 008E  
                                                     ??_setDS1307TimeDate 008E  
                                                       ??_getSinalSIM800L 00C8  
                                                            _sp_principal 00DF  
                                                                strstr@s1 008F  
                                                                strstr@s2 0091  
                                                             ??_writeChar 0082  
                                                  __size_of_lerParametros 011C  
                                                   ?_criarCaracteresCGRAM 0001  
                                                           _sub_menu_posi 0069  
                                                             _option_posi 00DA  
                                         _tempo_limite_teste_estacionaria 00E4  
                                               __end_of_getDS1307TimeDate 2826  
                                               __end_of_setDS1307TimeDate 2C8C  
