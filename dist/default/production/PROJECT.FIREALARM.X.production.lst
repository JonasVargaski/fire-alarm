

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Aug 04 00:26:10 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	text90,global,reloc=2,class=CODE,delta=1
   108                           	psect	text91,global,reloc=2,class=CODE,delta=1
   109                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   117                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.45
   122                           ; Generated 16/11/2017 GMT
   123                           ; 
   124                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F452 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataCOMRAM
   157  007036                     __pidataCOMRAM:
   158                           	opt stack 0
   159                           
   160                           ;initializer for intToFloatStr@F2544
   161  007036  20                 	db	32
   162  007037  20                 	db	32
   163  007038  20                 	db	32
   164  007039  20                 	db	32
   165                           
   166                           ;initializer for _bt_press
   167  00703A  01                 	db	1
   168                           
   169                           ;initializer for _tempo_reenvio_SMS
   170  00703B  05                 	db	5
   171                           
   172                           	psect	idataBANK0
   173  007030                     __pidataBANK0:
   174                           	opt stack 0
   175                           
   176                           ;initializer for _tempo_teste_bombas
   177  007030  012C               	dw	300
   178                           
   179                           ;initializer for _status_estacionaria
   180  007032  01                 	db	1
   181                           
   182                           ;initializer for _status_principal
   183  007033  01                 	db	1
   184                           
   185                           ;initializer for _status_jockey
   186  007034  01                 	db	1
   187                           
   188                           ;initializer for _pressao
   189  007035  62                 	db	98
   190                           
   191                           	psect	mediumconst
   192  007BB8                     __pmediumconst:
   193                           	opt stack 0
   194  007BB8  00                 	db	0
   195  007BB9                     criarCaracteresCGRAM@F2839:
   196                           	opt stack 0
   197  007BB9  00                 	db	0
   198  007BBA  1F                 	db	31
   199  007BBB  15                 	db	21
   200  007BBC  15                 	db	21
   201  007BBD  0E                 	db	14
   202  007BBE  04                 	db	4
   203  007BBF  04                 	db	4
   204  007BC0  04                 	db	4
   205  007BC1  00                 	db	0
   206  007BC2  00                 	db	0
   207  007BC3  00                 	db	0
   208  007BC4  00                 	db	0
   209  007BC5  00                 	db	0
   210  007BC6  10                 	db	16
   211  007BC7  10                 	db	16
   212  007BC8  10                 	db	16
   213  007BC9  00                 	db	0
   214  007BCA  00                 	db	0
   215  007BCB  00                 	db	0
   216  007BCC  04                 	db	4
   217  007BCD  04                 	db	4
   218  007BCE  14                 	db	20
   219  007BCF  14                 	db	20
   220  007BD0  14                 	db	20
   221  007BD1  00                 	db	0
   222  007BD2  01                 	db	1
   223  007BD3  01                 	db	1
   224  007BD4  05                 	db	5
   225  007BD5  05                 	db	5
   226  007BD6  15                 	db	21
   227  007BD7  15                 	db	21
   228  007BD8  15                 	db	21
   229  007BD9                     __end_ofcriarCaracteresCGRAM@F2839:
   230                           	opt stack 0
   231  007BD9                     _dpowers:
   232                           	opt stack 0
   233  007BD9  0001               	dw	1
   234  007BDB  000A               	dw	10
   235  007BDD  0064               	dw	100
   236  007BDF  03E8               	dw	1000
   237  007BE1  2710               	dw	10000
   238  007BE3                     __end_of_dpowers:
   239                           	opt stack 0
   240  0000                     _SSPBUF	set	4041
   241  0000                     _SSPSTAT	set	4039
   242  0000                     _SSPADD	set	4040
   243  0000                     _SSPCON2	set	4037
   244  0000                     _SSPCON1	set	4038
   245  0000                     _PORTCbits	set	3970
   246  0000                     _RCREG	set	4014
   247  0000                     _TMR0L	set	4054
   248  0000                     _TMR0H	set	4055
   249  0000                     _PORTDbits	set	3971
   250  0000                     _PORTBbits	set	3969
   251  0000                     _PORTEbits	set	3972
   252  0000                     _TXREG	set	4013
   253  0000                     _ADRESL	set	4035
   254  0000                     _ADRESH	set	4036
   255  0000                     _ADCON0bits	set	4034
   256  0000                     _TRISEbits	set	3990
   257  0000                     _TRISBbits	set	3987
   258  0000                     _PIE1bits	set	3997
   259  0000                     _PIR1bits	set	3998
   260  0000                     _INTCONbits	set	4082
   261  0000                     _TRISCbits	set	3988
   262  0000                     _SPBRG	set	4015
   263  0000                     _RCSTAbits	set	4011
   264  0000                     _TXSTAbits	set	4012
   265  0000                     _TRISDbits	set	3989
   266  0000                     _INTCON	set	4082
   267  0000                     _T0CON	set	4053
   268  0000                     _PORTAbits	set	3968
   269  0000                     _TRISAbits	set	3986
   270  0000                     _ADCON1	set	4033
   271  0000                     _ADCON0	set	4034
   272  0000                     _ACKEN	set	32300
   273  0000                     _ACKDT	set	32301
   274  0000                     _RCEN	set	32299
   275  0000                     _PEN	set	32298
   276  0000                     _RSEN	set	32297
   277  0000                     _SEN	set	32296
   278  0000                     _RCIF	set	31989
   279  0000                     _TMR0IF	set	32658
   280  007BE3  54                 	db	84	;'T'
   281  007BE4  45                 	db	69	;'E'
   282  007BE5  53                 	db	83	;'S'
   283  007BE6  54                 	db	84	;'T'
   284  007BE7  45                 	db	69	;'E'
   285  007BE8  20                 	db	32
   286  007BE9  44                 	db	68	;'D'
   287  007BEA  45                 	db	69	;'E'
   288  007BEB  20                 	db	32
   289  007BEC  42                 	db	66	;'B'
   290  007BED  4F                 	db	79	;'O'
   291  007BEE  4D                 	db	77	;'M'
   292  007BEF  42                 	db	66	;'B'
   293  007BF0  41                 	db	65	;'A'
   294  007BF1  53                 	db	83	;'S'
   295  007BF2  20                 	db	32
   296  007BF3  52                 	db	82	;'R'
   297  007BF4  45                 	db	69	;'E'
   298  007BF5  41                 	db	65	;'A'
   299  007BF6  4C                 	db	76	;'L'
   300  007BF7  49                 	db	73	;'I'
   301  007BF8  5A                 	db	90	;'Z'
   302  007BF9  41                 	db	65	;'A'
   303  007BFA  44                 	db	68	;'D'
   304  007BFB  4F                 	db	79	;'O'
   305  007BFC  0D                 	db	13
   306  007BFD  0A                 	db	10
   307  007BFE  45                 	db	69	;'E'
   308  007BFF  4D                 	db	77	;'M'
   309  007C00  20                 	db	32
   310  007C01  25                 	db	37
   311  007C02  30                 	db	48	;'0'
   312  007C03  32                 	db	50	;'2'
   313  007C04  64                 	db	100	;'d'
   314  007C05  3A                 	db	58	;':'
   315  007C06  25                 	db	37
   316  007C07  30                 	db	48	;'0'
   317  007C08  32                 	db	50	;'2'
   318  007C09  64                 	db	100	;'d'
   319  007C0A  3A                 	db	58	;':'
   320  007C0B  25                 	db	37
   321  007C0C  30                 	db	48	;'0'
   322  007C0D  32                 	db	50	;'2'
   323  007C0E  64                 	db	100	;'d'
   324  007C0F  20                 	db	32
   325  007C10  25                 	db	37
   326  007C11  30                 	db	48	;'0'
   327  007C12  32                 	db	50	;'2'
   328  007C13  64                 	db	100	;'d'
   329  007C14  2F                 	db	47
   330  007C15  25                 	db	37
   331  007C16  30                 	db	48	;'0'
   332  007C17  32                 	db	50	;'2'
   333  007C18  64                 	db	100	;'d'
   334  007C19  2F                 	db	47
   335  007C1A  25                 	db	37
   336  007C1B  30                 	db	48	;'0'
   337  007C1C  32                 	db	50	;'2'
   338  007C1D  64                 	db	100	;'d'
   339  007C1E  0D                 	db	13
   340  007C1F  0A                 	db	10
   341  007C20  4A                 	db	74	;'J'
   342  007C21  4F                 	db	79	;'O'
   343  007C22  43                 	db	67	;'C'
   344  007C23  4B                 	db	75	;'K'
   345  007C24  45                 	db	69	;'E'
   346  007C25  59                 	db	89	;'Y'
   347  007C26  3A                 	db	58	;':'
   348  007C27  20                 	db	32
   349  007C28  25                 	db	37
   350  007C29  73                 	db	115	;'s'
   351  007C2A  0D                 	db	13
   352  007C2B  0A                 	db	10
   353  007C2C  50                 	db	80	;'P'
   354  007C2D  52                 	db	82	;'R'
   355  007C2E  49                 	db	73	;'I'
   356  007C2F  4E                 	db	78	;'N'
   357  007C30  43                 	db	67	;'C'
   358  007C31  49                 	db	73	;'I'
   359  007C32  50                 	db	80	;'P'
   360  007C33  41                 	db	65	;'A'
   361  007C34  4C                 	db	76	;'L'
   362  007C35  3A                 	db	58	;':'
   363  007C36  20                 	db	32
   364  007C37  25                 	db	37
   365  007C38  73                 	db	115	;'s'
   366  007C39  0D                 	db	13
   367  007C3A  0A                 	db	10
   368  007C3B  43                 	db	67	;'C'
   369  007C3C  4F                 	db	79	;'O'
   370  007C3D  4D                 	db	77	;'M'
   371  007C3E  42                 	db	66	;'B'
   372  007C3F  55                 	db	85	;'U'
   373  007C40  53                 	db	83	;'S'
   374  007C41  54                 	db	84	;'T'
   375  007C42  41                 	db	65	;'A'
   376  007C43  4F                 	db	79	;'O'
   377  007C44  3A                 	db	58	;':'
   378  007C45  20                 	db	32
   379  007C46  25                 	db	37
   380  007C47  73                 	db	115	;'s'
   381  007C48  0D                 	db	13
   382  007C49  0A                 	db	10
   383  007C4A  00                 	db	0
   384  007C4B  44                 	db	68	;'D'
   385  007C4C  49                 	db	73	;'I'
   386  007C4D  53                 	db	83	;'S'
   387  007C4E  50                 	db	80	;'P'
   388  007C4F  41                 	db	65	;'A'
   389  007C50  52                 	db	82	;'R'
   390  007C51  4F                 	db	79	;'O'
   391  007C52  20                 	db	32
   392  007C53  41                 	db	65	;'A'
   393  007C54  4C                 	db	76	;'L'
   394  007C55  41                 	db	65	;'A'
   395  007C56  52                 	db	82	;'R'
   396  007C57  4D                 	db	77	;'M'
   397  007C58  45                 	db	69	;'E'
   398  007C59  20                 	db	32
   399  007C5A  44                 	db	68	;'D'
   400  007C5B  45                 	db	69	;'E'
   401  007C5C  20                 	db	32
   402  007C5D  49                 	db	73	;'I'
   403  007C5E  4E                 	db	78	;'N'
   404  007C5F  43                 	db	67	;'C'
   405  007C60  45                 	db	69	;'E'
   406  007C61  4E                 	db	78	;'N'
   407  007C62  44                 	db	68	;'D'
   408  007C63  49                 	db	73	;'I'
   409  007C64  4F                 	db	79	;'O'
   410  007C65  0D                 	db	13
   411  007C66  0A                 	db	10
   412  007C67  45                 	db	69	;'E'
   413  007C68  4D                 	db	77	;'M'
   414  007C69  20                 	db	32
   415  007C6A  25                 	db	37
   416  007C6B  30                 	db	48	;'0'
   417  007C6C  32                 	db	50	;'2'
   418  007C6D  64                 	db	100	;'d'
   419  007C6E  3A                 	db	58	;':'
   420  007C6F  25                 	db	37
   421  007C70  30                 	db	48	;'0'
   422  007C71  32                 	db	50	;'2'
   423  007C72  64                 	db	100	;'d'
   424  007C73  3A                 	db	58	;':'
   425  007C74  25                 	db	37
   426  007C75  30                 	db	48	;'0'
   427  007C76  32                 	db	50	;'2'
   428  007C77  64                 	db	100	;'d'
   429  007C78  20                 	db	32
   430  007C79  25                 	db	37
   431  007C7A  30                 	db	48	;'0'
   432  007C7B  32                 	db	50	;'2'
   433  007C7C  64                 	db	100	;'d'
   434  007C7D  2F                 	db	47
   435  007C7E  25                 	db	37
   436  007C7F  30                 	db	48	;'0'
   437  007C80  32                 	db	50	;'2'
   438  007C81  64                 	db	100	;'d'
   439  007C82  2F                 	db	47
   440  007C83  25                 	db	37
   441  007C84  30                 	db	48	;'0'
   442  007C85  32                 	db	50	;'2'
   443  007C86  64                 	db	100	;'d'
   444  007C87  0D                 	db	13
   445  007C88  0A                 	db	10
   446  007C89  00                 	db	0
   447  007C8A  20                 	db	32
   448  007C8B  25                 	db	37
   449  007C8C  30                 	db	48	;'0'
   450  007C8D  32                 	db	50	;'2'
   451  007C8E  64                 	db	100	;'d'
   452  007C8F  3A                 	db	58	;':'
   453  007C90  25                 	db	37
   454  007C91  30                 	db	48	;'0'
   455  007C92  32                 	db	50	;'2'
   456  007C93  64                 	db	100	;'d'
   457  007C94  3A                 	db	58	;':'
   458  007C95  25                 	db	37
   459  007C96  30                 	db	48	;'0'
   460  007C97  32                 	db	50	;'2'
   461  007C98  64                 	db	100	;'d'
   462  007C99  20                 	db	32
   463  007C9A  25                 	db	37
   464  007C9B  30                 	db	48	;'0'
   465  007C9C  32                 	db	50	;'2'
   466  007C9D  64                 	db	100	;'d'
   467  007C9E  2F                 	db	47
   468  007C9F  25                 	db	37
   469  007CA0  30                 	db	48	;'0'
   470  007CA1  32                 	db	50	;'2'
   471  007CA2  64                 	db	100	;'d'
   472  007CA3  2F                 	db	47
   473  007CA4  25                 	db	37
   474  007CA5  30                 	db	48	;'0'
   475  007CA6  32                 	db	50	;'2'
   476  007CA7  64                 	db	100	;'d'
   477  007CA8  00                 	db	0
   478  007CA9                     STR_52:
   479  007CA9  23                 	db	35
   480  007CAA  25                 	db	37
   481  007CAB  64                 	db	100	;'d'
   482  007CAC  20                 	db	32
   483  007CAD  44                 	db	68	;'D'
   484  007CAE  41                 	db	65	;'A'
   485  007CAF  54                 	db	84	;'T'
   486  007CB0  41                 	db	65	;'A'
   487  007CB1  3A                 	db	58	;':'
   488  007CB2  20                 	db	32
   489  007CB3  25                 	db	37
   490  007CB4  30                 	db	48	;'0'
   491  007CB5  32                 	db	50	;'2'
   492  007CB6  64                 	db	100	;'d'
   493  007CB7  2F                 	db	47
   494  007CB8  25                 	db	37
   495  007CB9  30                 	db	48	;'0'
   496  007CBA  32                 	db	50	;'2'
   497  007CBB  64                 	db	100	;'d'
   498  007CBC  2F                 	db	47
   499  007CBD  25                 	db	37
   500  007CBE  30                 	db	48	;'0'
   501  007CBF  32                 	db	50	;'2'
   502  007CC0  64                 	db	100	;'d'
   503  007CC1  00                 	db	0
   504  007CC2                     STR_49:
   505  007CC2  23                 	db	35
   506  007CC3  50                 	db	80	;'P'
   507  007CC4  72                 	db	114	;'r'
   508  007CC5  6F                 	db	111	;'o'
   509  007CC6  78                 	db	120	;'x'
   510  007CC7  69                 	db	105	;'i'
   511  007CC8  6D                 	db	109	;'m'
   512  007CC9  6F                 	db	111	;'o'
   513  007CCA  20                 	db	32
   514  007CCB  65                 	db	101	;'e'
   515  007CCC  6D                 	db	109	;'m'
   516  007CCD  20                 	db	32
   517  007CCE  25                 	db	37
   518  007CCF  32                 	db	50	;'2'
   519  007CD0  64                 	db	100	;'d'
   520  007CD1  20                 	db	32
   521  007CD2  64                 	db	100	;'d'
   522  007CD3  69                 	db	105	;'i'
   523  007CD4  61                 	db	97	;'a'
   524  007CD5  73                 	db	115	;'s'
   525  007CD6  00                 	db	0
   526  007CD7  2D                 	db	45
   527  007CD8  20                 	db	32
   528  007CD9  45                 	db	69	;'E'
   529  007CDA  52                 	db	82	;'R'
   530  007CDB  52                 	db	82	;'R'
   531  007CDC  4F                 	db	79	;'O'
   532  007CDD  20                 	db	32
   533  007CDE  20                 	db	32
   534  007CDF  54                 	db	84	;'T'
   535  007CE0  52                 	db	82	;'R'
   536  007CE1  41                 	db	65	;'A'
   537  007CE2  4E                 	db	78	;'N'
   538  007CE3  53                 	db	83	;'S'
   539  007CE4  44                 	db	68	;'D'
   540  007CE5  55                 	db	85	;'U'
   541  007CE6  54                 	db	84	;'T'
   542  007CE7  4F                 	db	79	;'O'
   543  007CE8  52                 	db	82	;'R'
   544  007CE9  20                 	db	32
   545  007CEA  00                 	db	0
   546  007CEB  20                 	db	32
   547  007CEC  41                 	db	65	;'A'
   548  007CED  4C                 	db	76	;'L'
   549  007CEE  45                 	db	69	;'E'
   550  007CEF  52                 	db	82	;'R'
   551  007CF0  54                 	db	84	;'T'
   552  007CF1  41                 	db	65	;'A'
   553  007CF2  20                 	db	32
   554  007CF3  44                 	db	68	;'D'
   555  007CF4  45                 	db	69	;'E'
   556  007CF5  20                 	db	32
   557  007CF6  49                 	db	73	;'I'
   558  007CF7  4E                 	db	78	;'N'
   559  007CF8  43                 	db	67	;'C'
   560  007CF9  45                 	db	69	;'E'
   561  007CFA  4E                 	db	78	;'N'
   562  007CFB  44                 	db	68	;'D'
   563  007CFC  49                 	db	73	;'I'
   564  007CFD  4F                 	db	79	;'O'
   565  007CFE  00                 	db	0
   566  007CFF                     STR_21:
   567  007CFF  20                 	db	32
   568  007D00  20                 	db	32
   569  007D01  20                 	db	32
   570  007D02  41                 	db	65	;'A'
   571  007D03  67                 	db	103	;'g'
   572  007D04  75                 	db	117	;'u'
   573  007D05  61                 	db	97	;'a'
   574  007D06  72                 	db	114	;'r'
   575  007D07  64                 	db	100	;'d'
   576  007D08  65                 	db	101	;'e'
   577  007D09  2E                 	db	46
   578  007D0A  2E                 	db	46
   579  007D0B  20                 	db	32
   580  007D0C  25                 	db	37
   581  007D0D  33                 	db	51	;'3'
   582  007D0E  64                 	db	100	;'d'
   583  007D0F  73                 	db	115	;'s'
   584  007D10  65                 	db	101	;'e'
   585  007D11  63                 	db	99	;'c'
   586  007D12  00                 	db	0
   587  007D13                     STR_50:
   588  007D13  49                 	db	73	;'I'
   589  007D14  4E                 	db	78	;'N'
   590  007D15  54                 	db	84	;'T'
   591  007D16  45                 	db	69	;'E'
   592  007D17  52                 	db	82	;'R'
   593  007D18  56                 	db	86	;'V'
   594  007D19  41                 	db	65	;'A'
   595  007D1A  4C                 	db	76	;'L'
   596  007D1B  4F                 	db	79	;'O'
   597  007D1C  3A                 	db	58	;':'
   598  007D1D  20                 	db	32
   599  007D1E  25                 	db	37
   600  007D1F  32                 	db	50	;'2'
   601  007D20  64                 	db	100	;'d'
   602  007D21  20                 	db	32
   603  007D22  64                 	db	100	;'d'
   604  007D23  69                 	db	105	;'i'
   605  007D24  61                 	db	97	;'a'
   606  007D25  73                 	db	115	;'s'
   607  007D26  00                 	db	0
   608  007D27                     STR_51:
   609  007D27  48                 	db	72	;'H'
   610  007D28  4F                 	db	79	;'O'
   611  007D29  52                 	db	82	;'R'
   612  007D2A  41                 	db	65	;'A'
   613  007D2B  52                 	db	82	;'R'
   614  007D2C  49                 	db	73	;'I'
   615  007D2D  4F                 	db	79	;'O'
   616  007D2E  3A                 	db	58	;':'
   617  007D2F  20                 	db	32
   618  007D30  25                 	db	37
   619  007D31  30                 	db	48	;'0'
   620  007D32  32                 	db	50	;'2'
   621  007D33  64                 	db	100	;'d'
   622  007D34  20                 	db	32
   623  007D35  68                 	db	104	;'h'
   624  007D36  6F                 	db	111	;'o'
   625  007D37  72                 	db	114	;'r'
   626  007D38  61                 	db	97	;'a'
   627  007D39  73                 	db	115	;'s'
   628  007D3A  00                 	db	0
   629  007D3B                     STR_23:
   630  007D3B  20                 	db	32
   631  007D3C  20                 	db	32
   632  007D3D  54                 	db	84	;'T'
   633  007D3E  45                 	db	69	;'E'
   634  007D3F  53                 	db	83	;'S'
   635  007D40  54                 	db	84	;'T'
   636  007D41  45                 	db	69	;'E'
   637  007D42  20                 	db	32
   638  007D43  43                 	db	67	;'C'
   639  007D44  4F                 	db	79	;'O'
   640  007D45  4E                 	db	78	;'N'
   641  007D46  43                 	db	67	;'C'
   642  007D47  4C                 	db	76	;'L'
   643  007D48  55                 	db	85	;'U'
   644  007D49  49                 	db	73	;'I'
   645  007D4A  44                 	db	68	;'D'
   646  007D4B  4F                 	db	79	;'O'
   647  007D4C  21                 	db	33
   648  007D4D  00                 	db	0
   649  007D4E                     STR_62:
   650  007D4E  20                 	db	32
   651  007D4F  20                 	db	32
   652  007D50  43                 	db	67	;'C'
   653  007D51  4F                 	db	79	;'O'
   654  007D52  4E                 	db	78	;'N'
   655  007D53  54                 	db	84	;'T'
   656  007D54  52                 	db	82	;'R'
   657  007D55  41                 	db	65	;'A'
   658  007D56  20                 	db	32
   659  007D57  46                 	db	70	;'F'
   660  007D58  4F                 	db	79	;'O'
   661  007D59  47                 	db	71	;'G'
   662  007D5A  4F                 	db	79	;'O'
   663  007D5B  20                 	db	32
   664  007D5C  4A                 	db	74	;'J'
   665  007D5D  55                 	db	85	;'U'
   666  007D5E  4E                 	db	78	;'N'
   667  007D5F  47                 	db	71	;'G'
   668  007D60  00                 	db	0
   669  007D61  20                 	db	32
   670  007D62  20                 	db	32
   671  007D63  50                 	db	80	;'P'
   672  007D64  72                 	db	114	;'r'
   673  007D65  65                 	db	101	;'e'
   674  007D66  73                 	db	115	;'s'
   675  007D67  73                 	db	115	;'s'
   676  007D68  20                 	db	32
   677  007D69  4F                 	db	79	;'O'
   678  007D6A  4B                 	db	75	;'K'
   679  007D6B  20                 	db	32
   680  007D6C  70                 	db	112	;'p'
   681  007D6D  2F                 	db	47
   682  007D6E  20                 	db	32
   683  007D6F  4D                 	db	77	;'M'
   684  007D70  45                 	db	69	;'E'
   685  007D71  4E                 	db	78	;'N'
   686  007D72  55                 	db	85	;'U'
   687  007D73  00                 	db	0
   688  007D74                     STR_79:
   689  007D74  23                 	db	35
   690  007D75  68                 	db	104	;'h'
   691  007D76  6F                 	db	111	;'o'
   692  007D77  72                 	db	114	;'r'
   693  007D78  69                 	db	105	;'i'
   694  007D79  6D                 	db	109	;'m'
   695  007D7A  65                 	db	101	;'e'
   696  007D7B  74                 	db	116	;'t'
   697  007D7C  72                 	db	114	;'r'
   698  007D7D  6F                 	db	111	;'o'
   699  007D7E  3A                 	db	58	;':'
   700  007D7F  25                 	db	37
   701  007D80  35                 	db	53	;'5'
   702  007D81  64                 	db	100	;'d'
   703  007D82  20                 	db	32
   704  007D83  6D                 	db	109	;'m'
   705  007D84  69                 	db	105	;'i'
   706  007D85  6E                 	db	110	;'n'
   707  007D86  00                 	db	0
   708  007D87                     STR_74:
   709  007D87  43                 	db	67	;'C'
   710  007D88  6F                 	db	111	;'o'
   711  007D89  6E                 	db	110	;'n'
   712  007D8A  66                 	db	102	;'f'
   713  007D8B  69                 	db	105	;'i'
   714  007D8C  67                 	db	103	;'g'
   715  007D8D  75                 	db	117	;'u'
   716  007D8E  72                 	db	114	;'r'
   717  007D8F  61                 	db	97	;'a'
   718  007D90  63                 	db	99	;'c'
   719  007D91  61                 	db	97	;'a'
   720  007D92  6F                 	db	111	;'o'
   721  007D93  20                 	db	32
   722  007D94  74                 	db	116	;'t'
   723  007D95  65                 	db	101	;'e'
   724  007D96  6D                 	db	109	;'m'
   725  007D97  70                 	db	112	;'p'
   726  007D98  6F                 	db	111	;'o'
   727  007D99  00                 	db	0
   728  007D9A  50                 	db	80	;'P'
   729  007D9B  72                 	db	114	;'r'
   730  007D9C  65                 	db	101	;'e'
   731  007D9D  73                 	db	115	;'s'
   732  007D9E  73                 	db	115	;'s'
   733  007D9F  20                 	db	32
   734  007DA0  45                 	db	69	;'E'
   735  007DA1  53                 	db	83	;'S'
   736  007DA2  43                 	db	67	;'C'
   737  007DA3  20                 	db	32
   738  007DA4  70                 	db	112	;'p'
   739  007DA5  2F                 	db	47
   740  007DA6  20                 	db	32
   741  007DA7  52                 	db	82	;'R'
   742  007DA8  65                 	db	101	;'e'
   743  007DA9  73                 	db	115	;'s'
   744  007DAA  65                 	db	101	;'e'
   745  007DAB  74                 	db	116	;'t'
   746  007DAC  00                 	db	0
   747  007DAD  41                 	db	65	;'A'
   748  007DAE  54                 	db	84	;'T'
   749  007DAF  2B                 	db	43
   750  007DB0  43                 	db	67	;'C'
   751  007DB1  4D                 	db	77	;'M'
   752  007DB2  47                 	db	71	;'G'
   753  007DB3  53                 	db	83	;'S'
   754  007DB4  3D                 	db	61	;'='
   755  007DB5  22                 	db	34
   756  007DB6  2B                 	db	43
   757  007DB7  35                 	db	53	;'5'
   758  007DB8  35                 	db	53	;'5'
   759  007DB9  25                 	db	37
   760  007DBA  73                 	db	115	;'s'
   761  007DBB  22                 	db	34
   762  007DBC  0D                 	db	13
   763  007DBD  0A                 	db	10
   764  007DBE  00                 	db	0
   765  007DBF                     STR_69:
   766  007DBF  45                 	db	69	;'E'
   767  007DC0  4E                 	db	78	;'N'
   768  007DC1  56                 	db	86	;'V'
   769  007DC2  49                 	db	73	;'I'
   770  007DC3  41                 	db	65	;'A'
   771  007DC4  4E                 	db	78	;'N'
   772  007DC5  44                 	db	68	;'D'
   773  007DC6  4F                 	db	79	;'O'
   774  007DC7  20                 	db	32
   775  007DC8  53                 	db	83	;'S'
   776  007DC9  4D                 	db	77	;'M'
   777  007DCA  53                 	db	83	;'S'
   778  007DCB  2E                 	db	46
   779  007DCC  2E                 	db	46
   780  007DCD  2E                 	db	46
   781  007DCE  20                 	db	32
   782  007DCF  00                 	db	0
   783  007DD0  46                 	db	70	;'F'
   784  007DD1  41                 	db	65	;'A'
   785  007DD2  4C                 	db	76	;'L'
   786  007DD3  48                 	db	72	;'H'
   787  007DD4  41                 	db	65	;'A'
   788  007DD5  20                 	db	32
   789  007DD6  50                 	db	80	;'P'
   790  007DD7  52                 	db	82	;'R'
   791  007DD8  49                 	db	73	;'I'
   792  007DD9  4E                 	db	78	;'N'
   793  007DDA  43                 	db	67	;'C'
   794  007DDB  49                 	db	73	;'I'
   795  007DDC  50                 	db	80	;'P'
   796  007DDD  41                 	db	65	;'A'
   797  007DDE  4C                 	db	76	;'L'
   798  007DDF  20                 	db	32
   799  007DE0  00                 	db	0
   800  007DE1  46                 	db	70	;'F'
   801  007DE2  41                 	db	65	;'A'
   802  007DE3  4C                 	db	76	;'L'
   803  007DE4  48                 	db	72	;'H'
   804  007DE5  41                 	db	65	;'A'
   805  007DE6  20                 	db	32
   806  007DE7  43                 	db	67	;'C'
   807  007DE8  4F                 	db	79	;'O'
   808  007DE9  4D                 	db	77	;'M'
   809  007DEA  42                 	db	66	;'B'
   810  007DEB  55                 	db	85	;'U'
   811  007DEC  53                 	db	83	;'S'
   812  007DED  54                 	db	84	;'T'
   813  007DEE  41                 	db	65	;'A'
   814  007DEF  4F                 	db	79	;'O'
   815  007DF0  20                 	db	32
   816  007DF1  00                 	db	0
   817  007DF2                     STR_63:
   818  007DF2  20                 	db	32
   819  007DF3  20                 	db	32
   820  007DF4  20                 	db	32
   821  007DF5  20                 	db	32
   822  007DF6  34                 	db	52	;'4'
   823  007DF7  38                 	db	56	;'8'
   824  007DF8  20                 	db	32
   825  007DF9  33                 	db	51	;'3'
   826  007DFA  34                 	db	52	;'4'
   827  007DFB  36                 	db	54	;'6'
   828  007DFC  36                 	db	54	;'6'
   829  007DFD  2D                 	db	45
   830  007DFE  32                 	db	50	;'2'
   831  007DFF  38                 	db	56	;'8'
   832  007E00  37                 	db	55	;'7'
   833  007E01  35                 	db	53	;'5'
   834  007E02  00                 	db	0
   835  007E03                     STR_70:
   836  007E03  45                 	db	69	;'E'
   837  007E04  4E                 	db	78	;'N'
   838  007E05  56                 	db	86	;'V'
   839  007E06  49                 	db	73	;'I'
   840  007E07  41                 	db	65	;'A'
   841  007E08  52                 	db	82	;'R'
   842  007E09  20                 	db	32
   843  007E0A  53                 	db	83	;'S'
   844  007E0B  4D                 	db	77	;'M'
   845  007E0C  53                 	db	83	;'S'
   846  007E0D  20                 	db	32
   847  007E0E  54                 	db	84	;'T'
   848  007E0F  45                 	db	69	;'E'
   849  007E10  53                 	db	83	;'S'
   850  007E11  54                 	db	84	;'T'
   851  007E12  45                 	db	69	;'E'
   852  007E13  00                 	db	0
   853  007E14                     STR_91:
   854  007E14  41                 	db	65	;'A'
   855  007E15  4A                 	db	74	;'J'
   856  007E16  55                 	db	85	;'U'
   857  007E17  53                 	db	83	;'S'
   858  007E18  54                 	db	84	;'T'
   859  007E19  45                 	db	69	;'E'
   860  007E1A  20                 	db	32
   861  007E1B  43                 	db	67	;'C'
   862  007E1C  4F                 	db	79	;'O'
   863  007E1D  4D                 	db	77	;'M'
   864  007E1E  42                 	db	66	;'B'
   865  007E1F  55                 	db	85	;'U'
   866  007E20  53                 	db	83	;'S'
   867  007E21  54                 	db	84	;'T'
   868  007E22  41                 	db	65	;'A'
   869  007E23  4F                 	db	79	;'O'
   870  007E24  00                 	db	0
   871  007E25  46                 	db	70	;'F'
   872  007E26  41                 	db	65	;'A'
   873  007E27  4C                 	db	76	;'L'
   874  007E28  48                 	db	72	;'H'
   875  007E29  41                 	db	65	;'A'
   876  007E2A  20                 	db	32
   877  007E2B  45                 	db	69	;'E'
   878  007E2C  4C                 	db	76	;'L'
   879  007E2D  45                 	db	69	;'E'
   880  007E2E  54                 	db	84	;'T'
   881  007E2F  52                 	db	82	;'R'
   882  007E30  49                 	db	73	;'I'
   883  007E31  43                 	db	67	;'C'
   884  007E32  41                 	db	65	;'A'
   885  007E33  20                 	db	32
   886  007E34  00                 	db	0
   887  007E35                     STR_56:
   888  007E35  50                 	db	80	;'P'
   889  007E36  52                 	db	82	;'R'
   890  007E37  49                 	db	73	;'I'
   891  007E38  4E                 	db	78	;'N'
   892  007E39  43                 	db	67	;'C'
   893  007E3A  49                 	db	73	;'I'
   894  007E3B  50                 	db	80	;'P'
   895  007E3C  41                 	db	65	;'A'
   896  007E3D  4C                 	db	76	;'L'
   897  007E3E  20                 	db	32
   898  007E3F  2D                 	db	45
   899  007E40  20                 	db	32
   900  007E41  25                 	db	37
   901  007E42  73                 	db	115	;'s'
   902  007E43  20                 	db	32
   903  007E44  00                 	db	0
   904  007E45                     STR_59:
   905  007E45  43                 	db	67	;'C'
   906  007E46  4F                 	db	79	;'O'
   907  007E47  4D                 	db	77	;'M'
   908  007E48  42                 	db	66	;'B'
   909  007E49  55                 	db	85	;'U'
   910  007E4A  53                 	db	83	;'S'
   911  007E4B  54                 	db	84	;'T'
   912  007E4C  41                 	db	65	;'A'
   913  007E4D  4F                 	db	79	;'O'
   914  007E4E  20                 	db	32
   915  007E4F  2D                 	db	45
   916  007E50  20                 	db	32
   917  007E51  25                 	db	37
   918  007E52  73                 	db	115	;'s'
   919  007E53  20                 	db	32
   920  007E54  00                 	db	0
   921  007E55                     STR_35:
   922  007E55  20                 	db	32
   923  007E56  20                 	db	32
   924  007E57  20                 	db	32
   925  007E58  20                 	db	32
   926  007E59  20                 	db	32
   927  007E5A  53                 	db	83	;'S'
   928  007E5B  49                 	db	73	;'I'
   929  007E5C  53                 	db	83	;'S'
   930  007E5D  54                 	db	84	;'T'
   931  007E5E  45                 	db	69	;'E'
   932  007E5F  4D                 	db	77	;'M'
   933  007E60  41                 	db	65	;'A'
   934  007E61  20                 	db	32
   935  007E62  4F                 	db	79	;'O'
   936  007E63  4B                 	db	75	;'K'
   937  007E64  00                 	db	0
   938  007E65                     STR_22:
   939  007E65  20                 	db	32
   940  007E66  50                 	db	80	;'P'
   941  007E67  72                 	db	114	;'r'
   942  007E68  65                 	db	101	;'e'
   943  007E69  73                 	db	115	;'s'
   944  007E6A  73                 	db	115	;'s'
   945  007E6B  61                 	db	97	;'a'
   946  007E6C  6F                 	db	111	;'o'
   947  007E6D  20                 	db	32
   948  007E6E  25                 	db	37
   949  007E6F  73                 	db	115	;'s'
   950  007E70  20                 	db	32
   951  007E71  62                 	db	98	;'b'
   952  007E72  61                 	db	97	;'a'
   953  007E73  72                 	db	114	;'r'
   954  007E74  00                 	db	0
   955  007E75                     STR_27:
   956  007E75  20                 	db	32
   957  007E76  50                 	db	80	;'P'
   958  007E77  52                 	db	82	;'R'
   959  007E78  49                 	db	73	;'I'
   960  007E79  4E                 	db	78	;'N'
   961  007E7A  43                 	db	67	;'C'
   962  007E7B  49                 	db	73	;'I'
   963  007E7C  50                 	db	80	;'P'
   964  007E7D  41                 	db	65	;'A'
   965  007E7E  4C                 	db	76	;'L'
   966  007E7F  20                 	db	32
   967  007E80  3A                 	db	58	;':'
   968  007E81  20                 	db	32
   969  007E82  25                 	db	37
   970  007E83  73                 	db	115	;'s'
   971  007E84  00                 	db	0
   972  007E85                     STR_30:
   973  007E85  20                 	db	32
   974  007E86  43                 	db	67	;'C'
   975  007E87  4F                 	db	79	;'O'
   976  007E88  4D                 	db	77	;'M'
   977  007E89  42                 	db	66	;'B'
   978  007E8A  55                 	db	85	;'U'
   979  007E8B  53                 	db	83	;'S'
   980  007E8C  54                 	db	84	;'T'
   981  007E8D  41                 	db	65	;'A'
   982  007E8E  4F                 	db	79	;'O'
   983  007E8F  20                 	db	32
   984  007E90  3A                 	db	58	;':'
   985  007E91  20                 	db	32
   986  007E92  25                 	db	37
   987  007E93  73                 	db	115	;'s'
   988  007E94  00                 	db	0
   989  007E95  46                 	db	70	;'F'
   990  007E96  41                 	db	65	;'A'
   991  007E97  4C                 	db	76	;'L'
   992  007E98  48                 	db	72	;'H'
   993  007E99  41                 	db	65	;'A'
   994  007E9A  20                 	db	32
   995  007E9B  52                 	db	82	;'R'
   996  007E9C  45                 	db	69	;'E'
   997  007E9D  4C                 	db	76	;'L'
   998  007E9E  4F                 	db	79	;'O'
   999  007E9F  47                 	db	71	;'G'
  1000  007EA0  49                 	db	73	;'I'
  1001  007EA1  4F                 	db	79	;'O'
  1002  007EA2  20                 	db	32
  1003  007EA3  00                 	db	0
  1004  007EA4                     STR_90:
  1005  007EA4  41                 	db	65	;'A'
  1006  007EA5  4A                 	db	74	;'J'
  1007  007EA6  55                 	db	85	;'U'
  1008  007EA7  53                 	db	83	;'S'
  1009  007EA8  54                 	db	84	;'T'
  1010  007EA9  45                 	db	69	;'E'
  1011  007EAA  20                 	db	32
  1012  007EAB  50                 	db	80	;'P'
  1013  007EAC  52                 	db	82	;'R'
  1014  007EAD  45                 	db	69	;'E'
  1015  007EAE  53                 	db	83	;'S'
  1016  007EAF  53                 	db	83	;'S'
  1017  007EB0  41                 	db	65	;'A'
  1018  007EB1  4F                 	db	79	;'O'
  1019  007EB2  00                 	db	0
  1020  007EB3                     STR_96:
  1021  007EB3  49                 	db	73	;'I'
  1022  007EB4  4E                 	db	78	;'N'
  1023  007EB5  49                 	db	73	;'I'
  1024  007EB6  43                 	db	67	;'C'
  1025  007EB7  49                 	db	73	;'I'
  1026  007EB8  41                 	db	65	;'A'
  1027  007EB9  52                 	db	82	;'R'
  1028  007EBA  20                 	db	32
  1029  007EBB  54                 	db	84	;'T'
  1030  007EBC  45                 	db	69	;'E'
  1031  007EBD  53                 	db	83	;'S'
  1032  007EBE  54                 	db	84	;'T'
  1033  007EBF  45                 	db	69	;'E'
  1034  007EC0  53                 	db	83	;'S'
  1035  007EC1  00                 	db	0
  1036  007EC2                     STR_48:
  1037  007EC2  25                 	db	37
  1038  007EC3  30                 	db	48	;'0'
  1039  007EC4  32                 	db	50	;'2'
  1040  007EC5  64                 	db	100	;'d'
  1041  007EC6  3A                 	db	58	;':'
  1042  007EC7  25                 	db	37
  1043  007EC8  30                 	db	48	;'0'
  1044  007EC9  32                 	db	50	;'2'
  1045  007ECA  64                 	db	100	;'d'
  1046  007ECB  3A                 	db	58	;':'
  1047  007ECC  25                 	db	37
  1048  007ECD  30                 	db	48	;'0'
  1049  007ECE  32                 	db	50	;'2'
  1050  007ECF  64                 	db	100	;'d'
  1051  007ED0  00                 	db	0
  1052  007ED1  46                 	db	70	;'F'
  1053  007ED2  41                 	db	65	;'A'
  1054  007ED3  4C                 	db	76	;'L'
  1055  007ED4  48                 	db	72	;'H'
  1056  007ED5  41                 	db	65	;'A'
  1057  007ED6  20                 	db	32
  1058  007ED7  4A                 	db	74	;'J'
  1059  007ED8  4F                 	db	79	;'O'
  1060  007ED9  43                 	db	67	;'C'
  1061  007EDA  4B                 	db	75	;'K'
  1062  007EDB  45                 	db	69	;'E'
  1063  007EDC  59                 	db	89	;'Y'
  1064  007EDD  20                 	db	32
  1065  007EDE  00                 	db	0
  1066  007EDF                     STR_75:
  1067  007EDF  4D                 	db	77	;'M'
  1068  007EE0  61                 	db	97	;'a'
  1069  007EE1  78                 	db	120	;'x'
  1070  007EE2  2E                 	db	46
  1071  007EE3  20                 	db	32
  1072  007EE4  50                 	db	80	;'P'
  1073  007EE5  41                 	db	65	;'A'
  1074  007EE6  52                 	db	82	;'R'
  1075  007EE7  54                 	db	84	;'T'
  1076  007EE8  49                 	db	73	;'I'
  1077  007EE9  44                 	db	68	;'D'
  1078  007EEA  41                 	db	65	;'A'
  1079  007EEB  3A                 	db	58	;':'
  1080  007EEC  00                 	db	0
  1081  007EED                     STR_92:
  1082  007EED  54                 	db	84	;'T'
  1083  007EEE  45                 	db	69	;'E'
  1084  007EEF  4C                 	db	76	;'L'
  1085  007EF0  2F                 	db	47
  1086  007EF1  44                 	db	68	;'D'
  1087  007EF2  49                 	db	73	;'I'
  1088  007EF3  53                 	db	83	;'S'
  1089  007EF4  43                 	db	67	;'C'
  1090  007EF5  41                 	db	65	;'A'
  1091  007EF6  44                 	db	68	;'D'
  1092  007EF7  4F                 	db	79	;'O'
  1093  007EF8  52                 	db	82	;'R'
  1094  007EF9  41                 	db	65	;'A'
  1095  007EFA  00                 	db	0
  1096  007EFB                     STR_89:
  1097  007EFB  52                 	db	82	;'R'
  1098  007EFC  45                 	db	69	;'E'
  1099  007EFD  4C                 	db	76	;'L'
  1100  007EFE  4F                 	db	79	;'O'
  1101  007EFF  47                 	db	71	;'G'
  1102  007F00  49                 	db	73	;'I'
  1103  007F01  4F                 	db	79	;'O'
  1104  007F02  2F                 	db	47
  1105  007F03  44                 	db	68	;'D'
  1106  007F04  41                 	db	65	;'A'
  1107  007F05  54                 	db	84	;'T'
  1108  007F06  41                 	db	65	;'A'
  1109  007F07  00                 	db	0
  1110  007F08                     STR_93:
  1111  007F08  54                 	db	84	;'T'
  1112  007F09  45                 	db	69	;'E'
  1113  007F0A  53                 	db	83	;'S'
  1114  007F0B  54                 	db	84	;'T'
  1115  007F0C  45                 	db	69	;'E'
  1116  007F0D  20                 	db	32
  1117  007F0E  42                 	db	66	;'B'
  1118  007F0F  4F                 	db	79	;'O'
  1119  007F10  4D                 	db	77	;'M'
  1120  007F11  42                 	db	66	;'B'
  1121  007F12  41                 	db	65	;'A'
  1122  007F13  53                 	db	83	;'S'
  1123  007F14  00                 	db	0
  1124  007F15  41                 	db	65	;'A'
  1125  007F16  54                 	db	84	;'T'
  1126  007F17  2B                 	db	43
  1127  007F18  43                 	db	67	;'C'
  1128  007F19  4D                 	db	77	;'M'
  1129  007F1A  47                 	db	71	;'G'
  1130  007F1B  46                 	db	70	;'F'
  1131  007F1C  3D                 	db	61	;'='
  1132  007F1D  31                 	db	49	;'1'
  1133  007F1E  0D                 	db	13
  1134  007F1F  0A                 	db	10
  1135  007F20  00                 	db	0
  1136  007F21                     STR_53:
  1137  007F21  4A                 	db	74	;'J'
  1138  007F22  4F                 	db	79	;'O'
  1139  007F23  4B                 	db	75	;'K'
  1140  007F24  45                 	db	69	;'E'
  1141  007F25  59                 	db	89	;'Y'
  1142  007F26  20                 	db	32
  1143  007F27  2D                 	db	45
  1144  007F28  20                 	db	32
  1145  007F29  25                 	db	37
  1146  007F2A  73                 	db	115	;'s'
  1147  007F2B  20                 	db	32
  1148  007F2C  00                 	db	0
  1149  007F2D                     STR_65:
  1150  007F2D  41                 	db	65	;'A'
  1151  007F2E  75                 	db	117	;'u'
  1152  007F2F  67                 	db	103	;'g'
  1153  007F30  20                 	db	32
  1154  007F31  30                 	db	48	;'0'
  1155  007F32  34                 	db	52	;'4'
  1156  007F33  20                 	db	32
  1157  007F34  32                 	db	50	;'2'
  1158  007F35  30                 	db	48	;'0'
  1159  007F36  31                 	db	49	;'1'
  1160  007F37  39                 	db	57	;'9'
  1161  007F38  00                 	db	0
  1162  007F39                     STR_77:
  1163  007F39  4D                 	db	77	;'M'
  1164  007F3A  61                 	db	97	;'a'
  1165  007F3B  78                 	db	120	;'x'
  1166  007F3C  2E                 	db	46
  1167  007F3D  20                 	db	32
  1168  007F3E  54                 	db	84	;'T'
  1169  007F3F  45                 	db	69	;'E'
  1170  007F40  53                 	db	83	;'S'
  1171  007F41  54                 	db	84	;'T'
  1172  007F42  45                 	db	69	;'E'
  1173  007F43  3A                 	db	58	;':'
  1174  007F44  00                 	db	0
  1175  007F45                     STR_95:
  1176  007F45  49                 	db	73	;'I'
  1177  007F46  4E                 	db	78	;'N'
  1178  007F47  46                 	db	70	;'F'
  1179  007F48  4F                 	db	79	;'O'
  1180  007F49  20                 	db	32
  1181  007F4A  56                 	db	86	;'V'
  1182  007F4B  45                 	db	69	;'E'
  1183  007F4C  52                 	db	82	;'R'
  1184  007F4D  53                 	db	83	;'S'
  1185  007F4E  41                 	db	65	;'A'
  1186  007F4F  4F                 	db	79	;'O'
  1187  007F50  00                 	db	0
  1188  007F51                     STR_64:
  1189  007F51  76                 	db	118	;'v'
  1190  007F52  65                 	db	101	;'e'
  1191  007F53  72                 	db	114	;'r'
  1192  007F54  73                 	db	115	;'s'
  1193  007F55  61                 	db	97	;'a'
  1194  007F56  6F                 	db	111	;'o'
  1195  007F57  20                 	db	32
  1196  007F58  2D                 	db	45
  1197  007F59  20                 	db	32
  1198  007F5A  25                 	db	37
  1199  007F5B  73                 	db	115	;'s'
  1200  007F5C  00                 	db	0
  1201  007F5D                     STR_24:
  1202  007F5D  20                 	db	32
  1203  007F5E  4A                 	db	74	;'J'
  1204  007F5F  4F                 	db	79	;'O'
  1205  007F60  4B                 	db	75	;'K'
  1206  007F61  45                 	db	69	;'E'
  1207  007F62  59                 	db	89	;'Y'
  1208  007F63  20                 	db	32
  1209  007F64  3A                 	db	58	;':'
  1210  007F65  20                 	db	32
  1211  007F66  25                 	db	37
  1212  007F67  73                 	db	115	;'s'
  1213  007F68  00                 	db	0
  1214  007F69  41                 	db	65	;'A'
  1215  007F6A  54                 	db	84	;'T'
  1216  007F6B  44                 	db	68	;'D'
  1217  007F6C  20                 	db	32
  1218  007F6D  30                 	db	48	;'0'
  1219  007F6E  25                 	db	37
  1220  007F6F  73                 	db	115	;'s'
  1221  007F70  3B                 	db	59	;';'
  1222  007F71  0D                 	db	13
  1223  007F72  0A                 	db	10
  1224  007F73  00                 	db	0
  1225  007F74                     STR_84:
  1226  007F74  54                 	db	84	;'T'
  1227  007F75  45                 	db	69	;'E'
  1228  007F76  4C                 	db	76	;'L'
  1229  007F77  41                 	db	65	;'A'
  1230  007F78  20                 	db	32
  1231  007F79  54                 	db	84	;'T'
  1232  007F7A  45                 	db	69	;'E'
  1233  007F7B  53                 	db	83	;'S'
  1234  007F7C  54                 	db	84	;'T'
  1235  007F7D  45                 	db	69	;'E'
  1236  007F7E  00                 	db	0
  1237  007F7F                     STR_80:
  1238  007F7F  47                 	db	71	;'G'
  1239  007F80  45                 	db	69	;'E'
  1240  007F81  52                 	db	82	;'R'
  1241  007F82  41                 	db	65	;'A'
  1242  007F83  4C                 	db	76	;'L'
  1243  007F84  20                 	db	32
  1244  007F85  3A                 	db	58	;':'
  1245  007F86  20                 	db	32
  1246  007F87  25                 	db	37
  1247  007F88  73                 	db	115	;'s'
  1248  007F89  00                 	db	0
  1249  007F8A                     STR_94:
  1250  007F8A  44                 	db	68	;'D'
  1251  007F8B  41                 	db	65	;'A'
  1252  007F8C  54                 	db	84	;'T'
  1253  007F8D  41                 	db	65	;'A'
  1254  007F8E  4C                 	db	76	;'L'
  1255  007F8F  4F                 	db	79	;'O'
  1256  007F90  47                 	db	71	;'G'
  1257  007F91  45                 	db	69	;'E'
  1258  007F92  52                 	db	82	;'R'
  1259  007F93  00                 	db	0
  1260  007F94                     STR_88:
  1261  007F94  53                 	db	83	;'S'
  1262  007F95  69                 	db	105	;'i'
  1263  007F96  6E                 	db	110	;'n'
  1264  007F97  61                 	db	97	;'a'
  1265  007F98  6C                 	db	108	;'l'
  1266  007F99  3A                 	db	58	;':'
  1267  007F9A  20                 	db	32
  1268  007F9B  25                 	db	37
  1269  007F9C  64                 	db	100	;'d'
  1270  007F9D  00                 	db	0
  1271  007F9E                     STR_85:
  1272  007F9E  41                 	db	65	;'A'
  1273  007F9F  54                 	db	84	;'T'
  1274  007FA0  2B                 	db	43
  1275  007FA1  43                 	db	67	;'C'
  1276  007FA2  53                 	db	83	;'S'
  1277  007FA3  51                 	db	81	;'Q'
  1278  007FA4  0D                 	db	13
  1279  007FA5  0A                 	db	10
  1280  007FA6  00                 	db	0
  1281  007FA7                     STR_71:
  1282  007FA7  47                 	db	71	;'G'
  1283  007FA8  53                 	db	83	;'S'
  1284  007FA9  4D                 	db	77	;'M'
  1285  007FAA  3A                 	db	58	;':'
  1286  007FAB  20                 	db	32
  1287  007FAC  25                 	db	37
  1288  007FAD  73                 	db	115	;'s'
  1289  007FAE  00                 	db	0
  1290  007FAF                     STR_97:
  1291  007FAF  28                 	db	40
  1292  007FB0  6E                 	db	110	;'n'
  1293  007FB1  75                 	db	117	;'u'
  1294  007FB2  6C                 	db	108	;'l'
  1295  007FB3  6C                 	db	108	;'l'
  1296  007FB4  29                 	db	41
  1297  007FB5  00                 	db	0
  1298  007FB6                     STR_6:
  1299  007FB6  41                 	db	65	;'A'
  1300  007FB7  54                 	db	84	;'T'
  1301  007FB8  48                 	db	72	;'H'
  1302  007FB9  30                 	db	48	;'0'
  1303  007FBA  0D                 	db	13
  1304  007FBB  0A                 	db	10
  1305  007FBC  00                 	db	0
  1306  007FBD                     STR_86:
  1307  007FBD  2B                 	db	43
  1308  007FBE  43                 	db	67	;'C'
  1309  007FBF  53                 	db	83	;'S'
  1310  007FC0  51                 	db	81	;'Q'
  1311  007FC1  3A                 	db	58	;':'
  1312  007FC2  20                 	db	32
  1313  007FC3  00                 	db	0
  1314  007FC4                     STR_66:
  1315  007FC4  54                 	db	84	;'T'
  1316  007FC5  31                 	db	49	;'1'
  1317  007FC6  3A                 	db	58	;':'
  1318  007FC7  20                 	db	32
  1319  007FC8  25                 	db	37
  1320  007FC9  73                 	db	115	;'s'
  1321  007FCA  00                 	db	0
  1322  007FCB                     STR_67:
  1323  007FCB  54                 	db	84	;'T'
  1324  007FCC  32                 	db	50	;'2'
  1325  007FCD  3A                 	db	58	;':'
  1326  007FCE  20                 	db	32
  1327  007FCF  25                 	db	37
  1328  007FD0  73                 	db	115	;'s'
  1329  007FD1  00                 	db	0
  1330  007FD2                     STR_47:
  1331  007FD2  48                 	db	72	;'H'
  1332  007FD3  4F                 	db	79	;'O'
  1333  007FD4  52                 	db	82	;'R'
  1334  007FD5  41                 	db	65	;'A'
  1335  007FD6  3A                 	db	58	;':'
  1336  007FD7  00                 	db	0
  1337  007FD8                     STR_45:
  1338  007FD8  44                 	db	68	;'D'
  1339  007FD9  41                 	db	65	;'A'
  1340  007FDA  54                 	db	84	;'T'
  1341  007FDB  41                 	db	65	;'A'
  1342  007FDC  3A                 	db	58	;':'
  1343  007FDD  00                 	db	0
  1344  007FDE                     STR_14:
  1345  007FDE  46                 	db	70	;'F'
  1346  007FDF  41                 	db	65	;'A'
  1347  007FE0  4C                 	db	76	;'L'
  1348  007FE1  48                 	db	72	;'H'
  1349  007FE2  41                 	db	65	;'A'
  1350  007FE3  00                 	db	0
  1351  007FE4  41                 	db	65	;'A'
  1352  007FE5  54                 	db	84	;'T'
  1353  007FE6  0D                 	db	13
  1354  007FE7  0A                 	db	10
  1355  007FE8  00                 	db	0
  1356  007FE9                     STR_72:
  1357  007FE9  4F                 	db	79	;'O'
  1358  007FEA  4B                 	db	75	;'K'
  1359  007FEB  20                 	db	32
  1360  007FEC  20                 	db	32
  1361  007FED  00                 	db	0
  1362  007FEE                     STR_26:
  1363  007FEE  45                 	db	69	;'E'
  1364  007FEF  52                 	db	82	;'R'
  1365  007FF0  52                 	db	82	;'R'
  1366  007FF1  4F                 	db	79	;'O'
  1367  007FF2  00                 	db	0
  1368  007FF3                     STR_1:
  1369  007FF3  25                 	db	37
  1370  007FF4  73                 	db	115	;'s'
  1371  007FF5  25                 	db	37
  1372  007FF6  63                 	db	99	;'c'
  1373  007FF7  00                 	db	0
  1374  007FF8                     STR_76:
  1375  007FF8  25                 	db	37
  1376  007FF9  33                 	db	51	;'3'
  1377  007FFA  64                 	db	100	;'d'
  1378  007FFB  73                 	db	115	;'s'
  1379  007FFC  00                 	db	0
  1380  007FFD  3E                 	db	62	;'>'
  1381  007FFE  00                 	db	0
  1382  0000                     
  1383                           ; #config settings
  1384  007FFF  00                 	db	0	; dummy byte at the end
  1385  0000                     
  1386                           	psect	cinit
  1387  003F18                     __pcinit:
  1388                           	opt stack 0
  1389  003F18                     start_initialization:
  1390                           	opt stack 0
  1391  003F18                     __initialization:
  1392                           	opt stack 0
  1393                           
  1394                           ; Initialize objects allocated to BANK0 (6 bytes)
  1395                           ; load TBLPTR registers with __pidataBANK0
  1396  003F18  0E30               	movlw	low __pidataBANK0
  1397  003F1A  6EF6               	movwf	tblptrl,c
  1398  003F1C  0E70               	movlw	high __pidataBANK0
  1399  003F1E  6EF7               	movwf	tblptrh,c
  1400  003F20  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1401  003F22  6EF8               	movwf	tblptru,c
  1402  003F24  EE00  F0FA         	lfsr	0,__pdataBANK0
  1403  003F28  EE10 F006          	lfsr	1,6
  1404  003F2C                     copy_data0:
  1405  003F2C  0009               	tblrd		*+
  1406  003F2E  CFF5 FFEE          	movff	tablat,postinc0
  1407  003F32  50E5               	movf	postdec1,w,c
  1408  003F34  50E1               	movf	fsr1l,w,c
  1409  003F36  E1FA               	bnz	copy_data0
  1410                           
  1411                           ; Initialize objects allocated to COMRAM (6 bytes)
  1412                           ; load TBLPTR registers with __pidataCOMRAM
  1413  003F38  0E36               	movlw	low __pidataCOMRAM
  1414  003F3A  6EF6               	movwf	tblptrl,c
  1415  003F3C  0E70               	movlw	high __pidataCOMRAM
  1416  003F3E  6EF7               	movwf	tblptrh,c
  1417  003F40  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1418  003F42  6EF8               	movwf	tblptru,c
  1419  003F44  EE00  F06D         	lfsr	0,__pdataCOMRAM
  1420  003F48  EE10 F006          	lfsr	1,6
  1421  003F4C                     copy_data1:
  1422  003F4C  0009               	tblrd		*+
  1423  003F4E  CFF5 FFEE          	movff	tablat,postinc0
  1424  003F52  50E5               	movf	postdec1,w,c
  1425  003F54  50E1               	movf	fsr1l,w,c
  1426  003F56  E1FA               	bnz	copy_data1
  1427                           
  1428                           ; Clear objects allocated to BANK1 (228 bytes)
  1429  003F58  EE01  F000         	lfsr	0,__pbssBANK1
  1430  003F5C  0EE4               	movlw	228
  1431  003F5E                     clear_0:
  1432  003F5E  6AEE               	clrf	postinc0,c
  1433  003F60  06E8               	decf	wreg,f,c
  1434  003F62  E1FD               	bnz	clear_0
  1435                           
  1436                           ; Clear objects allocated to BANK0 (38 bytes)
  1437  003F64  EE00  F0D4         	lfsr	0,__pbssBANK0
  1438  003F68  0E26               	movlw	38
  1439  003F6A                     clear_1:
  1440  003F6A  6AEE               	clrf	postinc0,c
  1441  003F6C  06E8               	decf	wreg,f,c
  1442  003F6E  E1FD               	bnz	clear_1
  1443                           
  1444                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1445  003F70  6A73               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1446                           
  1447                           ; Clear objects allocated to COMRAM (41 bytes)
  1448  003F72  EE00  F044         	lfsr	0,__pbssCOMRAM
  1449  003F76  0E29               	movlw	41
  1450  003F78                     clear_2:
  1451  003F78  6AEE               	clrf	postinc0,c
  1452  003F7A  06E8               	decf	wreg,f,c
  1453  003F7C  E1FD               	bnz	clear_2
  1454  003F7E                     end_of_initialization:
  1455                           	opt stack 0
  1456  003F7E                     __end_of__initialization:
  1457                           	opt stack 0
  1458  003F7E  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1459  003F80  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1460  003F82  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1461  003F84  6EF8               	movwf	tblptru,c
  1462  003F86  0100               	movlb	0
  1463  003F88  EF57  F008         	goto	_main	;jump to C main() function
  1464                           tblptru	equ	0xFF8
  1465                           tblptrh	equ	0xFF7
  1466                           tblptrl	equ	0xFF6
  1467                           tablat	equ	0xFF5
  1468                           postinc0	equ	0xFEE
  1469                           wreg	equ	0xFE8
  1470                           postdec1	equ	0xFE5
  1471                           fsr1l	equ	0xFE1
  1472                           
  1473                           	psect	bitbssCOMRAM
  1474  000398                     __pbitbssCOMRAM:
  1475                           	opt stack 0
  1476  000398                     _blinkk:
  1477                           	opt stack 0
  1478  000398                     	ds	1
  1479  000399                     _ajst_rtc:
  1480                           	opt stack 0
  1481  000399                     	ds	1
  1482                           tblptru	equ	0xFF8
  1483                           tblptrh	equ	0xFF7
  1484                           tblptrl	equ	0xFF6
  1485                           tablat	equ	0xFF5
  1486                           postinc0	equ	0xFEE
  1487                           wreg	equ	0xFE8
  1488                           postdec1	equ	0xFE5
  1489                           fsr1l	equ	0xFE1
  1490                           
  1491                           	psect	bssCOMRAM
  1492  000044                     __pbssCOMRAM:
  1493                           	opt stack 0
  1494  000044                     _shift:
  1495                           	opt stack 0
  1496  000044                     	ds	8
  1497  00004C                     __tensao:
  1498                           	opt stack 0
  1499  00004C                     	ds	3
  1500  00004F                     _horimetro:
  1501                           	opt stack 0
  1502  00004F                     	ds	2
  1503  000051                     __b_ok:
  1504                           	opt stack 0
  1505  000051                     	ds	1
  1506  000052                     _flag_b_ok:
  1507                           	opt stack 0
  1508  000052                     	ds	1
  1509  000053                     __b_mais:
  1510                           	opt stack 0
  1511  000053                     	ds	1
  1512  000054                     _flag_b_mais:
  1513                           	opt stack 0
  1514  000054                     	ds	1
  1515  000055                     __b_menos:
  1516                           	opt stack 0
  1517  000055                     	ds	1
  1518  000056                     _flag_b_menos:
  1519                           	opt stack 0
  1520  000056                     	ds	1
  1521  000057                     __b_esc:
  1522                           	opt stack 0
  1523  000057                     	ds	1
  1524  000058                     _flag_b_esc:
  1525                           	opt stack 0
  1526  000058                     	ds	1
  1527  000059                     _checar_serial:
  1528                           	opt stack 0
  1529  000059                     	ds	1
  1530  00005A                     _str_recebido_ok:
  1531                           	opt stack 0
  1532  00005A                     	ds	1
  1533  00005B                     _str_posicao:
  1534                           	opt stack 0
  1535  00005B                     	ds	1
  1536  00005C                     _tela_menu_posi:
  1537                           	opt stack 0
  1538  00005C                     	ds	1
  1539  00005D                     _sub_menu_posi:
  1540                           	opt stack 0
  1541  00005D                     	ds	1
  1542  00005E                     _dtl_visualiza_log:
  1543                           	opt stack 0
  1544  00005E                     	ds	1
  1545  00005F                     _dtl_estacionaria:
  1546                           	opt stack 0
  1547  00005F                     	ds	1
  1548  000060                     _dtl_principal:
  1549                           	opt stack 0
  1550  000060                     	ds	1
  1551  000061                     _timer_envio_sms:
  1552                           	opt stack 0
  1553  000061                     	ds	1
  1554  000062                     _intervalo_leitura_adc:
  1555                           	opt stack 0
  1556  000062                     	ds	1
  1557  000063                     _qtd_leitura:
  1558                           	opt stack 0
  1559  000063                     	ds	1
  1560  000064                     __min:
  1561                           	opt stack 0
  1562  000064                     	ds	1
  1563  000065                     _base_sec:
  1564                           	opt stack 0
  1565  000065                     	ds	1
  1566  000066                     _rtc:
  1567                           	opt stack 0
  1568  000066                     	ds	7
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           postdec1	equ	0xFE5
  1576                           fsr1l	equ	0xFE1
  1577                           
  1578                           	psect	dataCOMRAM
  1579  00006D                     __pdataCOMRAM:
  1580                           	opt stack 0
  1581  00006D                     intToFloatStr@F2544:
  1582                           	opt stack 0
  1583  00006D                     	ds	4
  1584  000071                     _bt_press:
  1585                           	opt stack 0
  1586  000071                     	ds	1
  1587  000072                     _tempo_reenvio_SMS:
  1588                           	opt stack 0
  1589  000072                     	ds	1
  1590                           tblptru	equ	0xFF8
  1591                           tblptrh	equ	0xFF7
  1592                           tblptrl	equ	0xFF6
  1593                           tablat	equ	0xFF5
  1594                           postinc0	equ	0xFEE
  1595                           wreg	equ	0xFE8
  1596                           postdec1	equ	0xFE5
  1597                           fsr1l	equ	0xFE1
  1598                           
  1599                           	psect	bssBANK0
  1600  0000D4                     __pbssBANK0:
  1601                           	opt stack 0
  1602  0000D4                     _ajust_tel:
  1603                           	opt stack 0
  1604  0000D4                     	ds	1
  1605  0000D5                     _tel_posi:
  1606                           	opt stack 0
  1607  0000D5                     	ds	1
  1608  0000D6                     __menu_posi:
  1609                           	opt stack 0
  1610  0000D6                     	ds	1
  1611  0000D7                     _menu_posi:
  1612                           	opt stack 0
  1613  0000D7                     	ds	1
  1614  0000D8                     _option_posi:
  1615                           	opt stack 0
  1616  0000D8                     	ds	1
  1617  0000D9                     _incendio:
  1618                           	opt stack 0
  1619  0000D9                     	ds	1
  1620  0000DA                     _teste_run:
  1621                           	opt stack 0
  1622  0000DA                     	ds	1
  1623  0000DB                     _falha:
  1624                           	opt stack 0
  1625  0000DB                     	ds	1
  1626  0000DC                     _sp_estacionaria:
  1627                           	opt stack 0
  1628  0000DC                     	ds	1
  1629  0000DD                     _sp_principal:
  1630                           	opt stack 0
  1631  0000DD                     	ds	1
  1632  0000DE                     _sp_jockey:
  1633                           	opt stack 0
  1634  0000DE                     	ds	1
  1635  0000DF                     _sp_pressao_rede:
  1636                           	opt stack 0
  1637  0000DF                     	ds	1
  1638  0000E0                     _dtl_jockey:
  1639                           	opt stack 0
  1640  0000E0                     	ds	1
  1641  0000E1                     _dtl_ano:
  1642                           	opt stack 0
  1643  0000E1                     	ds	1
  1644  0000E2                     _dtl_mes:
  1645                           	opt stack 0
  1646  0000E2                     	ds	1
  1647  0000E3                     _dtl_dia:
  1648                           	opt stack 0
  1649  0000E3                     	ds	1
  1650  0000E4                     _dtl_pos:
  1651                           	opt stack 0
  1652  0000E4                     	ds	1
  1653  0000E5                     _teste_sms_run:
  1654                           	opt stack 0
  1655  0000E5                     	ds	1
  1656  0000E6                     _tel_selecionado:
  1657                           	opt stack 0
  1658  0000E6                     	ds	1
  1659  0000E7                     _estagio_envio_SMS:
  1660                           	opt stack 0
  1661  0000E7                     	ds	1
  1662  0000E8                     _tempo_coun_estacionaria:
  1663                           	opt stack 0
  1664  0000E8                     	ds	1
  1665  0000E9                     _tempo_corrido_teste_estacionaria:
  1666                           	opt stack 0
  1667  0000E9                     	ds	1
  1668  0000EA                     _tempo_limite_teste_estacionaria:
  1669                           	opt stack 0
  1670  0000EA                     	ds	1
  1671  0000EB                     _tempo_limite_partida:
  1672                           	opt stack 0
  1673  0000EB                     	ds	1
  1674  0000EC                     _tempo_partida:
  1675                           	opt stack 0
  1676  0000EC                     	ds	1
  1677  0000ED                     _estacionaria_Ligada:
  1678                           	opt stack 0
  1679  0000ED                     	ds	1
  1680  0000EE                     _tempo_limite_estacionaria:
  1681                           	opt stack 0
  1682  0000EE                     	ds	1
  1683  0000EF                     _status_SIM800L:
  1684                           	opt stack 0
  1685  0000EF                     	ds	1
  1686  0000F0                     _horario_de_teste:
  1687                           	opt stack 0
  1688  0000F0                     	ds	1
  1689  0000F1                     _dias_restante_teste:
  1690                           	opt stack 0
  1691  0000F1                     	ds	1
  1692  0000F2                     _intervalo_teste_dia:
  1693                           	opt stack 0
  1694  0000F2                     	ds	1
  1695  0000F3                     __sec_aux:
  1696                           	opt stack 0
  1697  0000F3                     	ds	1
  1698  0000F4                     __sec_partida:
  1699                           	opt stack 0
  1700  0000F4                     	ds	1
  1701  0000F5                     __ano:
  1702                           	opt stack 0
  1703  0000F5                     	ds	1
  1704  0000F6                     __mes:
  1705                           	opt stack 0
  1706  0000F6                     	ds	1
  1707  0000F7                     __dia:
  1708                           	opt stack 0
  1709  0000F7                     	ds	1
  1710  0000F8                     __hor:
  1711                           	opt stack 0
  1712  0000F8                     	ds	1
  1713  0000F9                     __sec:
  1714                           	opt stack 0
  1715  0000F9                     	ds	1
  1716                           tblptru	equ	0xFF8
  1717                           tblptrh	equ	0xFF7
  1718                           tblptrl	equ	0xFF6
  1719                           tablat	equ	0xFF5
  1720                           postinc0	equ	0xFEE
  1721                           wreg	equ	0xFE8
  1722                           postdec1	equ	0xFE5
  1723                           fsr1l	equ	0xFE1
  1724                           
  1725                           	psect	dataBANK0
  1726  0000FA                     __pdataBANK0:
  1727                           	opt stack 0
  1728  0000FA                     _tempo_teste_bombas:
  1729                           	opt stack 0
  1730  0000FA                     	ds	2
  1731  0000FC                     _status_estacionaria:
  1732                           	opt stack 0
  1733  0000FC                     	ds	1
  1734  0000FD                     _status_principal:
  1735                           	opt stack 0
  1736  0000FD                     	ds	1
  1737  0000FE                     _status_jockey:
  1738                           	opt stack 0
  1739  0000FE                     	ds	1
  1740  0000FF                     _pressao:
  1741                           	opt stack 0
  1742  0000FF                     	ds	1
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           postdec1	equ	0xFE5
  1750                           fsr1l	equ	0xFE1
  1751                           
  1752                           	psect	bssBANK1
  1753  000100                     __pbssBANK1:
  1754                           	opt stack 0
  1755  000100                     _str_recebida:
  1756                           	opt stack 0
  1757  000100                     	ds	20
  1758  000114                     _bufferSerial:
  1759                           	opt stack 0
  1760  000114                     	ds	80
  1761  000164                     _line4:
  1762                           	opt stack 0
  1763  000164                     	ds	21
  1764  000179                     _line3:
  1765                           	opt stack 0
  1766  000179                     	ds	21
  1767  00018E                     _line2:
  1768                           	opt stack 0
  1769  00018E                     	ds	21
  1770  0001A3                     _line1:
  1771                           	opt stack 0
  1772  0001A3                     	ds	21
  1773  0001B8                     _bufferAUX:
  1774                           	opt stack 0
  1775  0001B8                     	ds	20
  1776  0001CC                     _tel2:
  1777                           	opt stack 0
  1778  0001CC                     	ds	12
  1779  0001D8                     _tel1:
  1780                           	opt stack 0
  1781  0001D8                     	ds	12
  1782                           tblptru	equ	0xFF8
  1783                           tblptrh	equ	0xFF7
  1784                           tblptrl	equ	0xFF6
  1785                           tablat	equ	0xFF5
  1786                           postinc0	equ	0xFEE
  1787                           wreg	equ	0xFE8
  1788                           postdec1	equ	0xFE5
  1789                           fsr1l	equ	0xFE1
  1790                           
  1791                           	psect	cstackBANK0
  1792  000080                     __pcstackBANK0:
  1793                           	opt stack 0
  1794  000080                     ??_isdigit:
  1795  000080                     ??_setShiftREG:
  1796  000080                     ??_I2C_Wait:
  1797  000080                     ?_strlen:
  1798                           	opt stack 0
  1799  000080                     ?_strchr:
  1800                           	opt stack 0
  1801  000080                     ?___wmul:
  1802                           	opt stack 0
  1803  000080                     ?___awdiv:
  1804                           	opt stack 0
  1805  000080                     ?___awmod:
  1806                           	opt stack 0
  1807  000080                     ?___lwdiv:
  1808                           	opt stack 0
  1809  000080                     ?___lldiv:
  1810                           	opt stack 0
  1811  000080                     putch@c:
  1812                           	opt stack 0
  1813  000080                     clearShiftREG@i:
  1814                           	opt stack 0
  1815  000080                     btPress@bt:
  1816                           	opt stack 0
  1817  000080                     Lcd_Port@a:
  1818                           	opt stack 0
  1819  000080                     BCDtoDEC@val:
  1820                           	opt stack 0
  1821  000080                     blink@line:
  1822                           	opt stack 0
  1823  000080                     delay@x:
  1824                           	opt stack 0
  1825  000080                     ___wmul@multiplier:
  1826                           	opt stack 0
  1827  000080                     ___awdiv@dividend:
  1828                           	opt stack 0
  1829  000080                     ___awmod@dividend:
  1830                           	opt stack 0
  1831  000080                     ___lwdiv@dividend:
  1832                           	opt stack 0
  1833  000080                     memset@p1:
  1834                           	opt stack 0
  1835  000080                     strlen@s:
  1836                           	opt stack 0
  1837  000080                     strchr@ptr:
  1838                           	opt stack 0
  1839  000080                     ___lldiv@dividend:
  1840                           	opt stack 0
  1841                           
  1842                           ; 4 bytes @ 0x0
  1843  000080                     	ds	1
  1844  000081                     ??_Lcd_Cmd:
  1845  000081                     ?_I2C_Read:
  1846                           	opt stack 0
  1847  000081                     setShiftREG@i:
  1848                           	opt stack 0
  1849  000081                     Lcd_Write_Char@tempp:
  1850                           	opt stack 0
  1851  000081                     _isdigit$1821:
  1852                           	opt stack 0
  1853  000081                     I2C_Read@a:
  1854                           	opt stack 0
  1855                           
  1856                           ; 2 bytes @ 0x1
  1857  000081                     	ds	1
  1858  000082                     ??_strlen:
  1859  000082                     ??_delay:
  1860  000082                     Lcd_Cmd@a:
  1861                           	opt stack 0
  1862  000082                     Lcd_Write_Char@y:
  1863                           	opt stack 0
  1864  000082                     blink@start:
  1865                           	opt stack 0
  1866  000082                     isdigit@c:
  1867                           	opt stack 0
  1868  000082                     ___wmul@multiplicand:
  1869                           	opt stack 0
  1870  000082                     ___awdiv@divisor:
  1871                           	opt stack 0
  1872  000082                     ___awmod@divisor:
  1873                           	opt stack 0
  1874  000082                     ___lwdiv@divisor:
  1875                           	opt stack 0
  1876  000082                     memset@c:
  1877                           	opt stack 0
  1878  000082                     strchr@chr:
  1879                           	opt stack 0
  1880                           
  1881                           ; 2 bytes @ 0x2
  1882  000082                     	ds	1
  1883  000083                     ??_Lcd_Init:
  1884  000083                     partidaBombaEstacionaria@acao:
  1885                           	opt stack 0
  1886  000083                     Lcd_Set_Cursor@b:
  1887                           	opt stack 0
  1888  000083                     Lcd_Write_Char@a:
  1889                           	opt stack 0
  1890  000083                     blink@end:
  1891                           	opt stack 0
  1892  000083                     I2C_Read@temp:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x3
  1896  000083                     	ds	1
  1897  000084                     ??_criarCaracteresCGRAM:
  1898  000084                     Lcd_Set_Cursor@a:
  1899                           	opt stack 0
  1900  000084                     blink@i:
  1901                           	opt stack 0
  1902  000084                     ___awdiv@counter:
  1903                           	opt stack 0
  1904  000084                     ___awmod@counter:
  1905                           	opt stack 0
  1906  000084                     Lcd_Write_String@a:
  1907                           	opt stack 0
  1908  000084                     ___wmul@product:
  1909                           	opt stack 0
  1910  000084                     ___lwdiv@quotient:
  1911                           	opt stack 0
  1912  000084                     memset@n:
  1913                           	opt stack 0
  1914  000084                     strlen@cp:
  1915                           	opt stack 0
  1916  000084                     ___lldiv@divisor:
  1917                           	opt stack 0
  1918                           
  1919                           ; 4 bytes @ 0x4
  1920  000084                     	ds	1
  1921  000085                     Lcd_Set_Cursor@z:
  1922                           	opt stack 0
  1923  000085                     ___awdiv@sign:
  1924                           	opt stack 0
  1925  000085                     ___awmod@sign:
  1926                           	opt stack 0
  1927                           
  1928                           ; 1 bytes @ 0x5
  1929  000085                     	ds	1
  1930  000086                     ?_strncmp:
  1931                           	opt stack 0
  1932  000086                     Lcd_Set_Cursor@y:
  1933                           	opt stack 0
  1934  000086                     Lcd_Write_String@i:
  1935                           	opt stack 0
  1936  000086                     ___lwdiv@counter:
  1937                           	opt stack 0
  1938  000086                     ___awdiv@quotient:
  1939                           	opt stack 0
  1940  000086                     memset@p:
  1941                           	opt stack 0
  1942  000086                     strncmp@s1:
  1943                           	opt stack 0
  1944                           
  1945                           ; 2 bytes @ 0x6
  1946  000086                     	ds	1
  1947  000087                     ?___lwmod:
  1948                           	opt stack 0
  1949  000087                     Lcd_Set_Cursor@temp:
  1950                           	opt stack 0
  1951  000087                     ___lwmod@dividend:
  1952                           	opt stack 0
  1953  000087                     criarCaracteresCGRAM@character:
  1954                           	opt stack 0
  1955                           
  1956                           ; 32 bytes @ 0x7
  1957  000087                     	ds	1
  1958  000088                     DECtoBCD@val:
  1959                           	opt stack 0
  1960  000088                     atualizarLCD@line1:
  1961                           	opt stack 0
  1962  000088                     strncmp@s2:
  1963                           	opt stack 0
  1964  000088                     ___lldiv@quotient:
  1965                           	opt stack 0
  1966                           
  1967                           ; 4 bytes @ 0x8
  1968  000088                     	ds	1
  1969  000089                     DECtoBCD@res:
  1970                           	opt stack 0
  1971  000089                     ___lwmod@divisor:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x9
  1975  000089                     	ds	1
  1976  00008A                     atualizarLCD@line2:
  1977                           	opt stack 0
  1978  00008A                     I2C_Write@d:
  1979                           	opt stack 0
  1980  00008A                     strncmp@len:
  1981                           	opt stack 0
  1982                           
  1983                           ; 2 bytes @ 0xA
  1984  00008A                     	ds	1
  1985  00008B                     ___lwmod@counter:
  1986                           	opt stack 0
  1987                           
  1988                           ; 1 bytes @ 0xB
  1989  00008B                     	ds	1
  1990  00008C                     ??_strncmp:
  1991  00008C                     ?__doprnt:
  1992                           	opt stack 0
  1993  00008C                     writeEEPROM_ext@data:
  1994                           	opt stack 0
  1995  00008C                     readEEPROM_ext@adress:
  1996                           	opt stack 0
  1997  00008C                     ___lldiv@counter:
  1998                           	opt stack 0
  1999  00008C                     setDS1307TimeDate@ptrToUserVal:
  2000                           	opt stack 0
  2001  00008C                     getDS1307TimeDate@ptrToUserVal:
  2002                           	opt stack 0
  2003  00008C                     atualizarLCD@line3:
  2004                           	opt stack 0
  2005  00008C                     __doprnt@pb:
  2006                           	opt stack 0
  2007                           
  2008                           ; 2 bytes @ 0xC
  2009  00008C                     	ds	1
  2010  00008D                     writeEEPROM_ext@adress:
  2011                           	opt stack 0
  2012  00008D                     readEEPROM_ext@data:
  2013                           	opt stack 0
  2014  00008D                     I2C_Master_Init@c:
  2015                           	opt stack 0
  2016                           
  2017                           ; 4 bytes @ 0xD
  2018  00008D                     	ds	1
  2019  00008E                     ??_setDS1307TimeDate:
  2020  00008E                     ?_readEEPROM16_ext:
  2021                           	opt stack 0
  2022  00008E                     salvarLOG@dtl_ultimo_registro:
  2023                           	opt stack 0
  2024  00008E                     atualizarLCD@line4:
  2025                           	opt stack 0
  2026  00008E                     __doprnt@f:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0xE
  2030  00008E                     	ds	1
  2031  00008F                     ?_strstr:
  2032                           	opt stack 0
  2033  00008F                     strstr@s1:
  2034                           	opt stack 0
  2035                           
  2036                           ; 2 bytes @ 0xF
  2037  00008F                     	ds	1
  2038  000090                     ??_readEEPROM16_ext:
  2039  000090                     atualizarLCD@i:
  2040                           	opt stack 0
  2041  000090                     __doprnt@ap:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x10
  2045  000090                     	ds	1
  2046  000091                     ??_I2C_Master_Init:
  2047  000091                     readEEPROM16_ext@data:
  2048                           	opt stack 0
  2049  000091                     strstr@s2:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x11
  2053  000091                     	ds	1
  2054  000092                     ??__doprnt:
  2055                           
  2056                           ; 1 bytes @ 0x12
  2057  000092                     	ds	1
  2058  000093                     readEEPROM16_ext@adress:
  2059                           	opt stack 0
  2060  000093                     aguardaBuffer@str:
  2061                           	opt stack 0
  2062                           
  2063                           ; 2 bytes @ 0x13
  2064  000093                     	ds	1
  2065  000094                     lerParametros@verifica_memoria_nova:
  2066                           	opt stack 0
  2067                           
  2068                           ; 1 bytes @ 0x14
  2069  000094                     	ds	1
  2070  000095                     lerParametros@i:
  2071                           	opt stack 0
  2072                           
  2073                           ; 1 bytes @ 0x15
  2074  000095                     	ds	1
  2075  000096                     __doprnt@prec:
  2076                           	opt stack 0
  2077                           
  2078                           ; 1 bytes @ 0x16
  2079  000096                     	ds	1
  2080  000097                     __doprnt@val:
  2081                           	opt stack 0
  2082                           
  2083                           ; 2 bytes @ 0x17
  2084  000097                     	ds	2
  2085  000099                     __doprnt@len:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x19
  2089  000099                     	ds	2
  2090  00009B                     __doprnt@flag:
  2091                           	opt stack 0
  2092                           
  2093                           ; 1 bytes @ 0x1B
  2094  00009B                     	ds	1
  2095  00009C                     __doprnt@cp:
  2096                           	opt stack 0
  2097                           
  2098                           ; 2 bytes @ 0x1C
  2099  00009C                     	ds	2
  2100  00009E                     __doprnt@width:
  2101                           	opt stack 0
  2102                           
  2103                           ; 2 bytes @ 0x1E
  2104  00009E                     	ds	2
  2105  0000A0                     __doprnt@c:
  2106                           	opt stack 0
  2107                           
  2108                           ; 1 bytes @ 0x20
  2109  0000A0                     	ds	1
  2110  0000A1                     ?_sprintf:
  2111                           	opt stack 0
  2112  0000A1                     ?_printf:
  2113                           	opt stack 0
  2114  0000A1                     printf@f:
  2115                           	opt stack 0
  2116  0000A1                     sprintf@wh:
  2117                           	opt stack 0
  2118                           
  2119                           ; 2 bytes @ 0x21
  2120  0000A1                     	ds	2
  2121  0000A3                     sprintf@f:
  2122                           	opt stack 0
  2123                           
  2124                           ; 2 bytes @ 0x23
  2125  0000A3                     	ds	4
  2126  0000A7                     _criarCaracteresCGRAM$1349:
  2127                           	opt stack 0
  2128                           
  2129                           ; 2 bytes @ 0x27
  2130  0000A7                     	ds	2
  2131  0000A9                     criarCaracteresCGRAM@k:
  2132                           	opt stack 0
  2133                           
  2134                           ; 1 bytes @ 0x29
  2135  0000A9                     	ds	1
  2136  0000AA                     criarCaracteresCGRAM@j:
  2137                           	opt stack 0
  2138                           
  2139                           ; 1 bytes @ 0x2A
  2140  0000AA                     	ds	1
  2141  0000AB                     criarCaracteresCGRAM@i:
  2142                           	opt stack 0
  2143                           
  2144                           ; 1 bytes @ 0x2B
  2145  0000AB                     	ds	6
  2146  0000B1                     sprintf@ap:
  2147                           	opt stack 0
  2148                           
  2149                           ; 2 bytes @ 0x31
  2150  0000B1                     	ds	2
  2151  0000B3                     sprintf@pb:
  2152                           	opt stack 0
  2153                           
  2154                           ; 4 bytes @ 0x33
  2155  0000B3                     	ds	2
  2156  0000B5                     printf@ap:
  2157                           	opt stack 0
  2158                           
  2159                           ; 2 bytes @ 0x35
  2160  0000B5                     	ds	2
  2161  0000B7                     ??_tela_testeBombas:
  2162  0000B7                     ??_configuraTelefones:
  2163  0000B7                     ?_intToFloatStr:
  2164                           	opt stack 0
  2165  0000B7                     ?_getSerial:
  2166                           	opt stack 0
  2167  0000B7                     getSerial@str:
  2168                           	opt stack 0
  2169  0000B7                     _dataLoger$1386:
  2170                           	opt stack 0
  2171  0000B7                     printf@pb:
  2172                           	opt stack 0
  2173                           
  2174                           ; 4 bytes @ 0x37
  2175  0000B7                     	ds	2
  2176  0000B9                     getSerial@end:
  2177                           	opt stack 0
  2178  0000B9                     intToFloatStr@valor:
  2179                           	opt stack 0
  2180  0000B9                     _dataLoger$1391:
  2181                           	opt stack 0
  2182  0000B9                     _configuraTelefones$1409:
  2183                           	opt stack 0
  2184                           
  2185                           ; 2 bytes @ 0x39
  2186  0000B9                     	ds	1
  2187  0000BA                     ??_getSerial:
  2188  0000BA                     intToFloatStr@pr:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x3A
  2192  0000BA                     	ds	1
  2193  0000BB                     _dataLoger$1396:
  2194                           	opt stack 0
  2195  0000BB                     _configuraTelefones$1414:
  2196                           	opt stack 0
  2197                           
  2198                           ; 2 bytes @ 0x3B
  2199  0000BB                     	ds	1
  2200  0000BC                     getSerial@length:
  2201                           	opt stack 0
  2202  0000BC                     intToFloatStr@conv:
  2203                           	opt stack 0
  2204                           
  2205                           ; 4 bytes @ 0x3C
  2206  0000BC                     	ds	1
  2207  0000BD                     configuraTelefones@i:
  2208                           	opt stack 0
  2209                           
  2210                           ; 1 bytes @ 0x3D
  2211  0000BD                     	ds	1
  2212  0000BE                     getSerial@i:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x3E
  2216  0000BE                     	ds	1
  2217  0000BF                     getSerial@ret:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0x3F
  2221  0000BF                     	ds	1
  2222  0000C0                     intToFloatStr@end:
  2223                           	opt stack 0
  2224                           
  2225                           ; 4 bytes @ 0x40
  2226  0000C0                     	ds	1
  2227  0000C1                     ?_atoi:
  2228                           	opt stack 0
  2229  0000C1                     atoi@s:
  2230                           	opt stack 0
  2231                           
  2232                           ; 2 bytes @ 0x41
  2233  0000C1                     	ds	2
  2234  0000C3                     ??_atoi:
  2235                           
  2236                           ; 1 bytes @ 0x43
  2237  0000C3                     	ds	1
  2238  0000C4                     ??_acaoTesteBombas:
  2239  0000C4                     _ajusteSP_Bombas$2320:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0x44
  2243  0000C4                     	ds	1
  2244  0000C5                     atoi@sign:
  2245                           	opt stack 0
  2246                           
  2247                           ; 1 bytes @ 0x45
  2248  0000C5                     	ds	1
  2249  0000C6                     atoi@a:
  2250                           	opt stack 0
  2251                           
  2252                           ; 2 bytes @ 0x46
  2253  0000C6                     	ds	2
  2254  0000C8                     telaTeste@sinal:
  2255                           	opt stack 0
  2256                           
  2257                           ; 2 bytes @ 0x48
  2258  0000C8                     	ds	3
  2259  0000CB                     _acaoTesteBombas$2319:
  2260                           	opt stack 0
  2261                           
  2262                           ; 2 bytes @ 0x4B
  2263  0000CB                     	ds	2
  2264  0000CD                     _acaoTesteBombas$1241:
  2265                           	opt stack 0
  2266                           
  2267                           ; 2 bytes @ 0x4D
  2268  0000CD                     	ds	2
  2269  0000CF                     _acaoTesteBombas$1246:
  2270                           	opt stack 0
  2271                           
  2272                           ; 2 bytes @ 0x4F
  2273  0000CF                     	ds	2
  2274  0000D1                     _acaoTesteBombas$1251:
  2275                           	opt stack 0
  2276                           
  2277                           ; 2 bytes @ 0x51
  2278  0000D1                     	ds	2
  2279  0000D3                     acaoTesteBombas@i:
  2280                           	opt stack 0
  2281                           
  2282                           ; 1 bytes @ 0x53
  2283  0000D3                     	ds	1
  2284  0000D4                     tblptru	equ	0xFF8
  2285                           tblptrh	equ	0xFF7
  2286                           tblptrl	equ	0xFF6
  2287                           tablat	equ	0xFF5
  2288                           postinc0	equ	0xFEE
  2289                           wreg	equ	0xFE8
  2290                           postdec1	equ	0xFE5
  2291                           fsr1l	equ	0xFE1
  2292                           
  2293                           ; 1 bytes @ 0x54
  2294                           
  2295                           	psect	cstackCOMRAM
  2296  000001                     __pcstackCOMRAM:
  2297                           	opt stack 0
  2298  000001                     ??i2_I2C_Wait:
  2299  000001                     ??i2_isdigit:
  2300  000001                     ?_readADC:
  2301                           	opt stack 0
  2302  000001                     ?i2___wmul:
  2303                           	opt stack 0
  2304  000001                     ?i2___lwdiv:
  2305                           	opt stack 0
  2306  000001                     ?___ftpack:
  2307                           	opt stack 0
  2308  000001                     i2putch@c:
  2309                           	opt stack 0
  2310  000001                     i2BCDtoDEC@val:
  2311                           	opt stack 0
  2312  000001                     i2delay@x:
  2313                           	opt stack 0
  2314  000001                     i2___wmul@multiplier:
  2315                           	opt stack 0
  2316  000001                     i2___lwdiv@dividend:
  2317                           	opt stack 0
  2318  000001                     ___ftpack@arg:
  2319                           	opt stack 0
  2320  000001                     ___ftge@ff1:
  2321                           	opt stack 0
  2322                           
  2323                           ; 3 bytes @ 0x0
  2324  000001                     	ds	1
  2325  000002                     ?i2_I2C_Read:
  2326                           	opt stack 0
  2327  000002                     i2_isdigit$1821:
  2328                           	opt stack 0
  2329  000002                     i2I2C_Write@d:
  2330                           	opt stack 0
  2331  000002                     i2I2C_Read@a:
  2332                           	opt stack 0
  2333                           
  2334                           ; 2 bytes @ 0x1
  2335  000002                     	ds	1
  2336  000003                     ??_readADC:
  2337  000003                     ??i2_delay:
  2338  000003                     i2isdigit@c:
  2339                           	opt stack 0
  2340  000003                     i2___wmul@multiplicand:
  2341                           	opt stack 0
  2342  000003                     i2___lwdiv@divisor:
  2343                           	opt stack 0
  2344                           
  2345                           ; 2 bytes @ 0x2
  2346  000003                     	ds	1
  2347  000004                     ___ftpack@exp:
  2348                           	opt stack 0
  2349  000004                     i2writeEEPROM_ext@data:
  2350                           	opt stack 0
  2351  000004                     i2I2C_Read@temp:
  2352                           	opt stack 0
  2353  000004                     ___ftge@ff2:
  2354                           	opt stack 0
  2355                           
  2356                           ; 3 bytes @ 0x3
  2357  000004                     	ds	1
  2358  000005                     ___ftpack@sign:
  2359                           	opt stack 0
  2360  000005                     i2writeEEPROM_ext@adress:
  2361                           	opt stack 0
  2362  000005                     i2___wmul@product:
  2363                           	opt stack 0
  2364  000005                     i2___lwdiv@quotient:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x4
  2368  000005                     	ds	1
  2369  000006                     ??___ftpack:
  2370  000006                     writeEEPROM16_ext@data:
  2371                           	opt stack 0
  2372  000006                     i2getDS1307TimeDate@ptrToUserVal:
  2373                           	opt stack 0
  2374                           
  2375                           ; 2 bytes @ 0x5
  2376  000006                     	ds	1
  2377  000007                     ??___ftge:
  2378  000007                     i2___lwdiv@counter:
  2379                           	opt stack 0
  2380                           
  2381                           ; 1 bytes @ 0x6
  2382  000007                     	ds	1
  2383  000008                     ?i2___lwmod:
  2384                           	opt stack 0
  2385  000008                     writeEEPROM16_ext@adress:
  2386                           	opt stack 0
  2387  000008                     i2___lwmod@dividend:
  2388                           	opt stack 0
  2389                           
  2390                           ; 2 bytes @ 0x7
  2391  000008                     	ds	1
  2392  000009                     ?___lwtoft:
  2393                           	opt stack 0
  2394  000009                     ___lwtoft@c:
  2395                           	opt stack 0
  2396                           
  2397                           ; 2 bytes @ 0x8
  2398  000009                     	ds	1
  2399  00000A                     i2___lwmod@divisor:
  2400                           	opt stack 0
  2401                           
  2402                           ; 2 bytes @ 0x9
  2403  00000A                     	ds	2
  2404  00000C                     ?___ftmul:
  2405                           	opt stack 0
  2406  00000C                     i2___lwmod@counter:
  2407                           	opt stack 0
  2408  00000C                     ___ftmul@f1:
  2409                           	opt stack 0
  2410                           
  2411                           ; 3 bytes @ 0xB
  2412  00000C                     	ds	1
  2413  00000D                     i2__doprnt@pb:
  2414                           	opt stack 0
  2415                           
  2416                           ; 2 bytes @ 0xC
  2417  00000D                     	ds	2
  2418  00000F                     i2__doprnt@f:
  2419                           	opt stack 0
  2420  00000F                     ___ftmul@f2:
  2421                           	opt stack 0
  2422                           
  2423                           ; 3 bytes @ 0xE
  2424  00000F                     	ds	2
  2425  000011                     i2__doprnt@ap:
  2426                           	opt stack 0
  2427                           
  2428                           ; 2 bytes @ 0x10
  2429  000011                     	ds	1
  2430  000012                     ??___ftmul:
  2431                           
  2432                           ; 1 bytes @ 0x11
  2433  000012                     	ds	1
  2434  000013                     ??i2__doprnt:
  2435                           
  2436                           ; 1 bytes @ 0x12
  2437  000013                     	ds	2
  2438  000015                     ___ftmul@exp:
  2439                           	opt stack 0
  2440                           
  2441                           ; 1 bytes @ 0x14
  2442  000015                     	ds	1
  2443  000016                     ___ftmul@f3_as_product:
  2444                           	opt stack 0
  2445                           
  2446                           ; 3 bytes @ 0x15
  2447  000016                     	ds	1
  2448  000017                     i2__doprnt@prec:
  2449                           	opt stack 0
  2450                           
  2451                           ; 1 bytes @ 0x16
  2452  000017                     	ds	1
  2453  000018                     i2__doprnt@val:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0x17
  2457  000018                     	ds	1
  2458  000019                     ___ftmul@cntr:
  2459                           	opt stack 0
  2460                           
  2461                           ; 1 bytes @ 0x18
  2462  000019                     	ds	1
  2463  00001A                     ___ftmul@sign:
  2464                           	opt stack 0
  2465  00001A                     i2__doprnt@len:
  2466                           	opt stack 0
  2467                           
  2468                           ; 2 bytes @ 0x19
  2469  00001A                     	ds	1
  2470  00001B                     ?___ftadd:
  2471                           	opt stack 0
  2472  00001B                     ?___ftdiv:
  2473                           	opt stack 0
  2474  00001B                     ?___fttol:
  2475                           	opt stack 0
  2476  00001B                     ___ftadd@f1:
  2477                           	opt stack 0
  2478  00001B                     ___ftdiv@f1:
  2479                           	opt stack 0
  2480  00001B                     ___fttol@f1:
  2481                           	opt stack 0
  2482                           
  2483                           ; 3 bytes @ 0x1A
  2484  00001B                     	ds	1
  2485  00001C                     i2__doprnt@flag:
  2486                           	opt stack 0
  2487                           
  2488                           ; 1 bytes @ 0x1B
  2489  00001C                     	ds	1
  2490  00001D                     i2__doprnt@cp:
  2491                           	opt stack 0
  2492                           
  2493                           ; 2 bytes @ 0x1C
  2494  00001D                     	ds	1
  2495  00001E                     ___ftadd@f2:
  2496                           	opt stack 0
  2497  00001E                     ___ftdiv@f2:
  2498                           	opt stack 0
  2499                           
  2500                           ; 3 bytes @ 0x1D
  2501  00001E                     	ds	1
  2502  00001F                     ??___fttol:
  2503  00001F                     i2__doprnt@width:
  2504                           	opt stack 0
  2505                           
  2506                           ; 2 bytes @ 0x1E
  2507  00001F                     	ds	2
  2508  000021                     ??___ftadd:
  2509  000021                     ??___ftdiv:
  2510  000021                     i2__doprnt@c:
  2511                           	opt stack 0
  2512                           
  2513                           ; 1 bytes @ 0x20
  2514  000021                     	ds	1
  2515  000022                     ?i2_sprintf:
  2516                           	opt stack 0
  2517  000022                     i2sprintf@wh:
  2518                           	opt stack 0
  2519                           
  2520                           ; 2 bytes @ 0x21
  2521  000022                     	ds	2
  2522  000024                     ___ftadd@sign:
  2523                           	opt stack 0
  2524  000024                     ___ftdiv@cntr:
  2525                           	opt stack 0
  2526  000024                     ___fttol@sign1:
  2527                           	opt stack 0
  2528  000024                     i2sprintf@f:
  2529                           	opt stack 0
  2530                           
  2531                           ; 2 bytes @ 0x23
  2532  000024                     	ds	1
  2533  000025                     ___ftadd@exp2:
  2534                           	opt stack 0
  2535  000025                     ___ftdiv@f3:
  2536                           	opt stack 0
  2537  000025                     ___fttol@lval:
  2538                           	opt stack 0
  2539                           
  2540                           ; 4 bytes @ 0x24
  2541  000025                     	ds	1
  2542  000026                     ___ftadd@exp1:
  2543                           	opt stack 0
  2544                           
  2545                           ; 1 bytes @ 0x25
  2546  000026                     	ds	2
  2547  000028                     ___ftdiv@exp:
  2548                           	opt stack 0
  2549                           
  2550                           ; 1 bytes @ 0x27
  2551  000028                     	ds	1
  2552  000029                     ___ftdiv@sign:
  2553                           	opt stack 0
  2554  000029                     ___fttol@exp1:
  2555                           	opt stack 0
  2556                           
  2557                           ; 1 bytes @ 0x28
  2558  000029                     	ds	1
  2559  00002A                     lerTransdutor@i:
  2560                           	opt stack 0
  2561  00002A                     i2sprintf@ap:
  2562                           	opt stack 0
  2563                           
  2564                           ; 2 bytes @ 0x29
  2565  00002A                     	ds	1
  2566  00002B                     lerTransdutor@_pressao:
  2567                           	opt stack 0
  2568                           
  2569                           ; 3 bytes @ 0x2A
  2570  00002B                     	ds	1
  2571  00002C                     i2sprintf@pb:
  2572                           	opt stack 0
  2573                           
  2574                           ; 4 bytes @ 0x2B
  2575  00002C                     	ds	2
  2576  00002E                     lerTransdutor@tensao:
  2577                           	opt stack 0
  2578                           
  2579                           ; 3 bytes @ 0x2D
  2580  00002E                     	ds	2
  2581  000030                     tratarSerial@c:
  2582                           	opt stack 0
  2583                           
  2584                           ; 2 bytes @ 0x2F
  2585  000030                     	ds	2
  2586  000032                     ??_TIMER0:
  2587                           
  2588                           ; 1 bytes @ 0x31
  2589  000032                     	ds	18
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           postinc0	equ	0xFEE
  2595                           wreg	equ	0xFE8
  2596                           postdec1	equ	0xFE5
  2597                           fsr1l	equ	0xFE1
  2598                           
  2599 ;;
  2600 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2601 ;;
  2602 ;; *************** function _main *****************
  2603 ;; Defined at:
  2604 ;;		line 70 in file "Main.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;		None
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;		None
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      void 
  2611 ;; Registers used:
  2612 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2618 ;;      Params:         0       0       0       0       0       0       0
  2619 ;;      Locals:         0       0       0       0       0       0       0
  2620 ;;      Temps:          0       0       0       0       0       0       0
  2621 ;;      Totals:         0       0       0       0       0       0       0
  2622 ;;Total ram usage:        0 bytes
  2623 ;; Hardware stack levels required when called:   12
  2624 ;; This function calls:
  2625 ;;		_I2C_Master_Init
  2626 ;;		_Lcd_Clear
  2627 ;;		_Lcd_Init
  2628 ;;		_RTC_Init
  2629 ;;		_acaoBombas
  2630 ;;		_acaoTesteBomasProgramado
  2631 ;;		_acaoTesteBombas
  2632 ;;		_ajusteSP_Bombas
  2633 ;;		_atualizarLCD
  2634 ;;		_btPress
  2635 ;;		_configuraRegistradores
  2636 ;;		_configuraTelefones
  2637 ;;		_configurarEstacionaria
  2638 ;;		_criarCaracteresCGRAM
  2639 ;;		_dataLoger
  2640 ;;		_delay
  2641 ;;		_getDS1307TimeDate
  2642 ;;		_informacoes
  2643 ;;		_lerParametros
  2644 ;;		_setShiftREG
  2645 ;;		_sprintf
  2646 ;;		_telaTeste
  2647 ;;		_tela_ajusteRTC
  2648 ;;		_tela_testeBombas
  2649 ;; This function is called by:
  2650 ;;		Startup code after reset
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text0
  2655  0010AE                     __ptext0:
  2656                           	opt stack 0
  2657  0010AE                     _main:
  2658                           	opt stack 0
  2659  0010AE  FFFF               	dw	65535	; assembler added errata NOP
  2660                           
  2661                           ;Main.c: 72: configuraRegistradores();
  2662                           
  2663                           ;incstack = 0
  2664  0010B0  ECBF  F03C         	call	_configuraRegistradores	;wreg free
  2665                           
  2666                           ;Main.c: 73: I2C_Master_Init(100000);
  2667  0010B4  0EA0               	movlw	160
  2668  0010B6  0100               	movlb	0	; () banked
  2669  0010B8  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2670  0010BA  0E86               	movlw	134
  2671  0010BC  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2672  0010BE  0E01               	movlw	1
  2673  0010C0  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2674  0010C2  0E00               	movlw	0
  2675  0010C4  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2676  0010C6  ECAA  F03D         	call	_I2C_Master_Init	;wreg free
  2677                           
  2678                           ;Main.c: 74: delay(200);
  2679  0010CA  0E00               	movlw	0
  2680  0010CC  0100               	movlb	0	; () banked
  2681  0010CE  6F81               	movwf	(delay@x+1)& (0+255),b
  2682  0010D0  0EC8               	movlw	200
  2683  0010D2  6F80               	movwf	delay@x& (0+255),b
  2684  0010D4  ECCD  F039         	call	_delay	;wreg free
  2685                           
  2686                           ;Main.c: 75: RTC_Init();
  2687  0010D8  EC03  F03A         	call	_RTC_Init	;wreg free
  2688                           
  2689                           ;Main.c: 76: delay(100);
  2690  0010DC  0E00               	movlw	0
  2691  0010DE  0100               	movlb	0	; () banked
  2692  0010E0  6F81               	movwf	(delay@x+1)& (0+255),b
  2693  0010E2  0E64               	movlw	100
  2694  0010E4  6F80               	movwf	delay@x& (0+255),b
  2695  0010E6  ECCD  F039         	call	_delay	;wreg free
  2696                           
  2697                           ;Main.c: 77: getDS1307TimeDate(&rtc);
  2698  0010EA  0E66               	movlw	low _rtc
  2699  0010EC  0100               	movlb	0	; () banked
  2700  0010EE  6F8C               	movwf	getDS1307TimeDate@ptrToUserVal& (0+255),b
  2701  0010F0  0E00               	movlw	high _rtc
  2702  0010F2  6F8D               	movwf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  2703  0010F4  ECB6  F014         	call	_getDS1307TimeDate	;wreg free
  2704                           
  2705                           ;Main.c: 78: Lcd_Init();
  2706  0010F8  EC86  F01E         	call	_Lcd_Init	;wreg free
  2707                           
  2708                           ;Main.c: 79: Lcd_Clear();
  2709  0010FC  EC59  F038         	call	_Lcd_Clear	;wreg free
  2710                           
  2711                           ;Main.c: 80: criarCaracteresCGRAM();
  2712  001100  EC35  F01B         	call	_criarCaracteresCGRAM	;wreg free
  2713                           
  2714                           ;Main.c: 81: delay(100);
  2715  001104  0E00               	movlw	0
  2716  001106  0100               	movlb	0	; () banked
  2717  001108  6F81               	movwf	(delay@x+1)& (0+255),b
  2718  00110A  0E64               	movlw	100
  2719  00110C  6F80               	movwf	delay@x& (0+255),b
  2720  00110E  ECCD  F039         	call	_delay	;wreg free
  2721                           
  2722                           ;Main.c: 82: lerParametros();
  2723  001112  EC6F  F016         	call	_lerParametros	;wreg free
  2724                           
  2725                           ;Main.c: 83: delay(50);
  2726  001116  0E00               	movlw	0
  2727  001118  0100               	movlb	0	; () banked
  2728  00111A  6F81               	movwf	(delay@x+1)& (0+255),b
  2729  00111C  0E32               	movlw	50
  2730  00111E  6F80               	movwf	delay@x& (0+255),b
  2731  001120  ECCD  F039         	call	_delay	;wreg free
  2732  001124                     l821:
  2733  001124  FFFF               	dw	65535	; assembler added errata NOP
  2734  001126  0004               	clrwdt		;# 
  2735                           
  2736                           ;Main.c: 90: if (!PORTCbits.RC0) {
  2737  001128  B082               	btfsc	3970,0,c	;volatile
  2738  00112A  D003               	goto	l822
  2739                           
  2740                           ;Main.c: 91: falha = 3;
  2741  00112C  0E03               	movlw	3
  2742  00112E  0100               	movlb	0	; () banked
  2743  001130  6FDB               	movwf	_falha& (0+255),b
  2744  001132                     l822:
  2745  001132  FFFF               	dw	65535	; assembler added errata NOP
  2746                           
  2747                           ;Main.c: 92: }
  2748                           ;Main.c: 93: acaoBombas();
  2749                           
  2750                           ; BSR set to: 0
  2751  001134  EC5C  F01C         	call	_acaoBombas	;wreg free
  2752                           
  2753                           ;Main.c: 94: acaoTesteBomasProgramado();
  2754  001138  ECB0  F03A         	call	_acaoTesteBomasProgramado	;wreg free
  2755                           
  2756                           ;Main.c: 95: setShiftREG();
  2757  00113C  ECF8  F03B         	call	_setShiftREG	;wreg free
  2758                           
  2759                           ;Main.c: 97: switch (menu_posi) {
  2760  001140  D085               	goto	l823
  2761  001142  FFFF               	dw	65535	; assembler added errata NOP
  2762                           
  2763                           ;Main.c: 100: telaTeste();
  2764  001144  ECB7  F01C         	call	_telaTeste	;wreg free
  2765                           
  2766                           ;Main.c: 101: break;
  2767  001148  D0A6               	goto	l825
  2768  00114A  FFFF               	dw	65535	; assembler added errata NOP
  2769                           
  2770                           ;Main.c: 103: sprintf(&line1[1], "RELOGIO/DATA");
  2771  00114C  0EA4               	movlw	low (_line1+1)
  2772  00114E  0100               	movlb	0	; () banked
  2773  001150  6FA1               	movwf	sprintf@wh& (0+255),b
  2774  001152  0E01               	movlw	high (_line1+1)
  2775  001154  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2776  001156  0EFB               	movlw	low STR_89
  2777  001158  6FA3               	movwf	sprintf@f& (0+255),b
  2778  00115A  0E7E               	movlw	high STR_89
  2779  00115C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2780  00115E  ECD4  F03B         	call	_sprintf	;wreg free
  2781                           
  2782                           ;Main.c: 104: sprintf(&line2[1], "AJUSTE PRESSAO");
  2783  001162  0E8F               	movlw	low (_line2+1)
  2784  001164  0100               	movlb	0	; () banked
  2785  001166  6FA1               	movwf	sprintf@wh& (0+255),b
  2786  001168  0E01               	movlw	high (_line2+1)
  2787  00116A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2788  00116C  0EA4               	movlw	low STR_90
  2789  00116E  6FA3               	movwf	sprintf@f& (0+255),b
  2790  001170  0E7E               	movlw	high STR_90
  2791  001172  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2792  001174  ECD4  F03B         	call	_sprintf	;wreg free
  2793                           
  2794                           ;Main.c: 105: sprintf(&line3[1], "AJUSTE COMBUSTAO");
  2795  001178  0E7A               	movlw	low (_line3+1)
  2796  00117A  0100               	movlb	0	; () banked
  2797  00117C  6FA1               	movwf	sprintf@wh& (0+255),b
  2798  00117E  0E01               	movlw	high (_line3+1)
  2799  001180  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2800  001182  0E14               	movlw	low STR_91
  2801  001184  6FA3               	movwf	sprintf@f& (0+255),b
  2802  001186  0E7E               	movlw	high STR_91
  2803  001188  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2804  00118A  ECD4  F03B         	call	_sprintf	;wreg free
  2805                           
  2806                           ;Main.c: 106: sprintf(&line4[1], "TEL/DISCADORA");
  2807  00118E  0E65               	movlw	low (_line4+1)
  2808  001190  0100               	movlb	0	; () banked
  2809  001192  6FA1               	movwf	sprintf@wh& (0+255),b
  2810  001194  0E01               	movlw	high (_line4+1)
  2811  001196  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2812  001198  0EED               	movlw	low STR_92
  2813  00119A  6FA3               	movwf	sprintf@f& (0+255),b
  2814  00119C  0E7E               	movlw	high STR_92
  2815  00119E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2816  0011A0  ECD4  F03B         	call	_sprintf	;wreg free
  2817                           
  2818                           ;Main.c: 107: break;
  2819  0011A4  D078               	goto	l825
  2820  0011A6  FFFF               	dw	65535	; assembler added errata NOP
  2821                           
  2822                           ;Main.c: 109: sprintf(&line1[1], "TESTE BOMBAS");
  2823  0011A8  0EA4               	movlw	low (_line1+1)
  2824  0011AA  0100               	movlb	0	; () banked
  2825  0011AC  6FA1               	movwf	sprintf@wh& (0+255),b
  2826  0011AE  0E01               	movlw	high (_line1+1)
  2827  0011B0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2828  0011B2  0E08               	movlw	low STR_93
  2829  0011B4  6FA3               	movwf	sprintf@f& (0+255),b
  2830  0011B6  0E7F               	movlw	high STR_93
  2831  0011B8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2832  0011BA  ECD4  F03B         	call	_sprintf	;wreg free
  2833                           
  2834                           ;Main.c: 110: sprintf(&line2[1], "DATALOGER");
  2835  0011BE  0E8F               	movlw	low (_line2+1)
  2836  0011C0  0100               	movlb	0	; () banked
  2837  0011C2  6FA1               	movwf	sprintf@wh& (0+255),b
  2838  0011C4  0E01               	movlw	high (_line2+1)
  2839  0011C6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2840  0011C8  0E8A               	movlw	low STR_94
  2841  0011CA  6FA3               	movwf	sprintf@f& (0+255),b
  2842  0011CC  0E7F               	movlw	high STR_94
  2843  0011CE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2844  0011D0  ECD4  F03B         	call	_sprintf	;wreg free
  2845                           
  2846                           ;Main.c: 111: sprintf(&line3[1], "INFO VERSAO");
  2847  0011D4  0E7A               	movlw	low (_line3+1)
  2848  0011D6  0100               	movlb	0	; () banked
  2849  0011D8  6FA1               	movwf	sprintf@wh& (0+255),b
  2850  0011DA  0E01               	movlw	high (_line3+1)
  2851  0011DC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2852  0011DE  0E45               	movlw	low STR_95
  2853  0011E0  6FA3               	movwf	sprintf@f& (0+255),b
  2854  0011E2  0E7F               	movlw	high STR_95
  2855  0011E4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2856  0011E6  ECD4  F03B         	call	_sprintf	;wreg free
  2857                           
  2858                           ;Main.c: 112: sprintf(&line4[1], "INICIAR TESTES");
  2859  0011EA  0E65               	movlw	low (_line4+1)
  2860  0011EC  0100               	movlb	0	; () banked
  2861  0011EE  6FA1               	movwf	sprintf@wh& (0+255),b
  2862  0011F0  0E01               	movlw	high (_line4+1)
  2863  0011F2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2864  0011F4  0EB3               	movlw	low STR_96
  2865  0011F6  6FA3               	movwf	sprintf@f& (0+255),b
  2866  0011F8  0E7E               	movlw	high STR_96
  2867  0011FA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2868  0011FC  ECD4  F03B         	call	_sprintf	;wreg free
  2869                           
  2870                           ;Main.c: 113: break;
  2871  001200  D04A               	goto	l825
  2872  001202  FFFF               	dw	65535	; assembler added errata NOP
  2873                           
  2874                           ;Main.c: 115: tela_ajusteRTC();
  2875  001204  EC45  F00F         	call	_tela_ajusteRTC	;wreg free
  2876                           
  2877                           ;Main.c: 116: break;
  2878  001208  D046               	goto	l825
  2879  00120A  FFFF               	dw	65535	; assembler added errata NOP
  2880                           
  2881                           ;Main.c: 118: ajusteSP_Bombas();
  2882  00120C  EC18  F00E         	call	_ajusteSP_Bombas	;wreg free
  2883                           
  2884                           ;Main.c: 119: break;
  2885  001210  D042               	goto	l825
  2886  001212  FFFF               	dw	65535	; assembler added errata NOP
  2887                           
  2888                           ;Main.c: 121: configurarEstacionaria();
  2889  001214  EC5A  F013         	call	_configurarEstacionaria	;wreg free
  2890                           
  2891                           ;Main.c: 122: break;
  2892  001218  D03E               	goto	l825
  2893  00121A  FFFF               	dw	65535	; assembler added errata NOP
  2894                           
  2895                           ;Main.c: 124: configuraTelefones();
  2896  00121C  EC2F  F00C         	call	_configuraTelefones	;wreg free
  2897                           
  2898                           ;Main.c: 125: break;
  2899  001220  D03A               	goto	l825
  2900  001222  FFFF               	dw	65535	; assembler added errata NOP
  2901                           
  2902                           ;Main.c: 127: tela_testeBombas();
  2903  001224  EC11  F014         	call	_tela_testeBombas	;wreg free
  2904                           
  2905                           ;Main.c: 128: break;
  2906  001228  D036               	goto	l825
  2907  00122A  FFFF               	dw	65535	; assembler added errata NOP
  2908                           
  2909                           ;Main.c: 130: dataLoger();
  2910  00122C  EC6A  F011         	call	_dataLoger	;wreg free
  2911                           
  2912                           ;Main.c: 131: break;
  2913  001230  D032               	goto	l825
  2914  001232  FFFF               	dw	65535	; assembler added errata NOP
  2915                           
  2916                           ;Main.c: 133: informacoes();
  2917  001234  ECEA  F03C         	call	_informacoes	;wreg free
  2918                           
  2919                           ;Main.c: 134: break;
  2920  001238  D02E               	goto	l825
  2921  00123A  FFFF               	dw	65535	; assembler added errata NOP
  2922                           
  2923                           ;Main.c: 136: acaoTesteBombas();
  2924  00123C  EC43  F00A         	call	_acaoTesteBombas	;wreg free
  2925                           
  2926                           ;Main.c: 137: break;
  2927  001240  D02A               	goto	l825
  2928  001242  FFFF               	dw	65535	; assembler added errata NOP
  2929  001244  0E00               	movlw	0
  2930  001246  0100               	movlb	0	; () banked
  2931  001248  6FD7               	movwf	_menu_posi& (0+255),b
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;Main.c: 141: }
  2935                           
  2936                           ;Main.c: 140: break;
  2937  00124A  D025               	goto	l825
  2938  00124C                     l823:
  2939  00124C  FFFF               	dw	65535	; assembler added errata NOP
  2940                           
  2941                           ; BSR set to: 0
  2942  00124E  0100               	movlb	0	; () banked
  2943  001250  51D7               	movf	_menu_posi& (0+255),w,b
  2944                           
  2945                           ; Switch size 1, requested type "space"
  2946                           ; Number of cases is 11, Range of values is 0 to 28
  2947                           ; switch strategies available:
  2948                           ; Name         Instructions Cycles
  2949                           ; simple_byte           34    18 (average)
  2950                           ;	Chosen strategy is simple_byte
  2951  001252  0A00               	xorlw	0	; case 0
  2952  001254  B4D8               	btfsc	status,2,c
  2953  001256  D775               	goto	l824
  2954  001258  0A01               	xorlw	1	; case 1
  2955  00125A  B4D8               	btfsc	status,2,c
  2956  00125C  D776               	goto	l826
  2957  00125E  0A03               	xorlw	3	; case 2
  2958  001260  B4D8               	btfsc	status,2,c
  2959  001262  D7A1               	goto	l827
  2960  001264  0A16               	xorlw	22	; case 20
  2961  001266  B4D8               	btfsc	status,2,c
  2962  001268  D7CC               	goto	l828
  2963  00126A  0A01               	xorlw	1	; case 21
  2964  00126C  B4D8               	btfsc	status,2,c
  2965  00126E  D7CD               	goto	l829
  2966  001270  0A03               	xorlw	3	; case 22
  2967  001272  B4D8               	btfsc	status,2,c
  2968  001274  D7CE               	goto	l830
  2969  001276  0A01               	xorlw	1	; case 23
  2970  001278  B4D8               	btfsc	status,2,c
  2971  00127A  D7CF               	goto	l831
  2972  00127C  0A0F               	xorlw	15	; case 24
  2973  00127E  B4D8               	btfsc	status,2,c
  2974  001280  D7D0               	goto	l832
  2975  001282  0A01               	xorlw	1	; case 25
  2976  001284  B4D8               	btfsc	status,2,c
  2977  001286  D7D1               	goto	l833
  2978  001288  0A02               	xorlw	2	; case 27
  2979  00128A  B4D8               	btfsc	status,2,c
  2980  00128C  D7D2               	goto	l834
  2981  00128E  0A07               	xorlw	7	; case 28
  2982  001290  B4D8               	btfsc	status,2,c
  2983  001292  D7D3               	goto	l835
  2984  001294  D7D6               	goto	l836
  2985  001296                     l825:
  2986  001296  FFFF               	dw	65535	; assembler added errata NOP
  2987                           
  2988                           ;Main.c: 143: if (menu_posi == 1 | menu_posi == 2) {
  2989                           
  2990                           ; BSR set to: 0
  2991  001298  0100               	movlb	0	; () banked
  2992  00129A  05D7               	decf	_menu_posi& (0+255),w,b
  2993  00129C  B4D8               	btfsc	status,2,c
  2994  00129E  D09A               	goto	l840
  2995                           
  2996                           ; BSR set to: 0
  2997  0012A0  0E02               	movlw	2
  2998  0012A2  19D7               	xorwf	_menu_posi& (0+255),w,b
  2999  0012A4  B4D8               	btfsc	status,2,c
  3000  0012A6  D096               	goto	l840
  3001  0012A8  D0D0               	goto	l864
  3002  0012AA  FFFF               	dw	65535	; assembler added errata NOP
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;Main.c: 147: menu_posi = 1;
  3006                           
  3007                           ; BSR set to: 0
  3008  0012AC  0E01               	movlw	1
  3009  0012AE  6FD7               	movwf	_menu_posi& (0+255),b
  3010                           
  3011                           ;Main.c: 148: line1[0] = '>';
  3012  0012B0  0E3E               	movlw	62
  3013  0012B2  0101               	movlb	1	; () banked
  3014  0012B4  6FA3               	movwf	_line1& (0+255),b
  3015                           
  3016                           ; BSR set to: 1
  3017                           ;Main.c: 149: if (btPress(4)) {
  3018  0012B6  0E04               	movlw	4
  3019  0012B8  ECC6  F01F         	call	_btPress
  3020  0012BC  0900               	iorlw	0
  3021  0012BE  B4D8               	btfsc	status,2,c
  3022  0012C0  D0A4               	goto	l843
  3023                           
  3024                           ;Main.c: 150: _menu_posi = menu_posi;
  3025  0012C2  C0D7  F0D6         	movff	_menu_posi,__menu_posi
  3026                           
  3027                           ;Main.c: 151: menu_posi = 20;
  3028  0012C6  0E14               	movlw	20
  3029  0012C8  D065               	goto	L5
  3030  0012CA  FFFF               	dw	65535	; assembler added errata NOP
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;Main.c: 155: menu_posi = 1;
  3034                           
  3035                           ; BSR set to: 0
  3036  0012CC  0E01               	movlw	1
  3037  0012CE  6FD7               	movwf	_menu_posi& (0+255),b
  3038                           
  3039                           ;Main.c: 156: line2[0] = '>';
  3040  0012D0  0E3E               	movlw	62
  3041  0012D2  0101               	movlb	1	; () banked
  3042  0012D4  6F8E               	movwf	_line2& (0+255),b
  3043                           
  3044                           ; BSR set to: 1
  3045                           ;Main.c: 157: if (btPress(4)) {
  3046  0012D6  0E04               	movlw	4
  3047  0012D8  ECC6  F01F         	call	_btPress
  3048  0012DC  0900               	iorlw	0
  3049  0012DE  B4D8               	btfsc	status,2,c
  3050  0012E0  D094               	goto	l843
  3051                           
  3052                           ;Main.c: 158: _menu_posi = menu_posi;
  3053  0012E2  C0D7  F0D6         	movff	_menu_posi,__menu_posi
  3054                           
  3055                           ;Main.c: 159: menu_posi = 21;
  3056  0012E6  0E15               	movlw	21
  3057  0012E8  D055               	goto	L5
  3058  0012EA  FFFF               	dw	65535	; assembler added errata NOP
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;Main.c: 163: menu_posi = 1;
  3062                           
  3063                           ; BSR set to: 0
  3064  0012EC  0E01               	movlw	1
  3065  0012EE  6FD7               	movwf	_menu_posi& (0+255),b
  3066                           
  3067                           ;Main.c: 164: line3[0] = '>';
  3068  0012F0  0E3E               	movlw	62
  3069  0012F2  0101               	movlb	1	; () banked
  3070  0012F4  6F79               	movwf	_line3& (0+255),b
  3071                           
  3072                           ; BSR set to: 1
  3073                           ;Main.c: 165: if (btPress(4)) {
  3074  0012F6  0E04               	movlw	4
  3075  0012F8  ECC6  F01F         	call	_btPress
  3076  0012FC  0900               	iorlw	0
  3077  0012FE  B4D8               	btfsc	status,2,c
  3078  001300  D084               	goto	l843
  3079                           
  3080                           ;Main.c: 166: _menu_posi = menu_posi;
  3081  001302  C0D7  F0D6         	movff	_menu_posi,__menu_posi
  3082                           
  3083                           ;Main.c: 167: menu_posi = 22;
  3084  001306  0E16               	movlw	22
  3085  001308  D045               	goto	L5
  3086  00130A  FFFF               	dw	65535	; assembler added errata NOP
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;Main.c: 171: menu_posi = 1;
  3090                           
  3091                           ; BSR set to: 0
  3092  00130C  0E01               	movlw	1
  3093  00130E  6FD7               	movwf	_menu_posi& (0+255),b
  3094                           
  3095                           ;Main.c: 172: line4[0] = '>';
  3096  001310  0E3E               	movlw	62
  3097  001312  0101               	movlb	1	; () banked
  3098  001314  6F64               	movwf	_line4& (0+255),b
  3099                           
  3100                           ; BSR set to: 1
  3101                           ;Main.c: 173: if (btPress(4)) {
  3102  001316  0E04               	movlw	4
  3103  001318  ECC6  F01F         	call	_btPress
  3104  00131C  0900               	iorlw	0
  3105  00131E  B4D8               	btfsc	status,2,c
  3106  001320  D074               	goto	l843
  3107                           
  3108                           ;Main.c: 174: _menu_posi = menu_posi;
  3109  001322  C0D7  F0D6         	movff	_menu_posi,__menu_posi
  3110                           
  3111                           ;Main.c: 175: menu_posi = 23;
  3112  001326  0E17               	movlw	23
  3113  001328  D035               	goto	L5
  3114  00132A  FFFF               	dw	65535	; assembler added errata NOP
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;Main.c: 179: menu_posi = 2;
  3118                           
  3119                           ; BSR set to: 0
  3120  00132C  0E02               	movlw	2
  3121  00132E  6FD7               	movwf	_menu_posi& (0+255),b
  3122                           
  3123                           ;Main.c: 180: line1[0] = '>';
  3124  001330  0E3E               	movlw	62
  3125  001332  0101               	movlb	1	; () banked
  3126  001334  6FA3               	movwf	_line1& (0+255),b
  3127                           
  3128                           ; BSR set to: 1
  3129                           ;Main.c: 181: if (btPress(4)) {
  3130  001336  0E04               	movlw	4
  3131  001338  ECC6  F01F         	call	_btPress
  3132  00133C  0900               	iorlw	0
  3133  00133E  B4D8               	btfsc	status,2,c
  3134  001340  D064               	goto	l843
  3135                           
  3136                           ;Main.c: 182: _menu_posi = menu_posi;
  3137  001342  C0D7  F0D6         	movff	_menu_posi,__menu_posi
  3138                           
  3139                           ;Main.c: 183: menu_posi = 24;
  3140  001346  0E18               	movlw	24
  3141  001348  D025               	goto	L5
  3142  00134A  FFFF               	dw	65535	; assembler added errata NOP
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;Main.c: 187: line2[0] = '>';
  3146                           
  3147                           ; BSR set to: 0
  3148  00134C  0E3E               	movlw	62
  3149  00134E  0101               	movlb	1	; () banked
  3150  001350  6F8E               	movwf	_line2& (0+255),b
  3151                           
  3152                           ;Main.c: 188: menu_posi = 2;
  3153  001352  0E02               	movlw	2
  3154  001354  0100               	movlb	0	; () banked
  3155  001356  6FD7               	movwf	_menu_posi& (0+255),b
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;Main.c: 189: if (btPress(4)) {
  3159  001358  0E04               	movlw	4
  3160  00135A  ECC6  F01F         	call	_btPress
  3161  00135E  0900               	iorlw	0
  3162  001360  B4D8               	btfsc	status,2,c
  3163  001362  D053               	goto	l843
  3164                           
  3165                           ;Main.c: 190: _menu_posi = menu_posi;
  3166  001364  C0D7  F0D6         	movff	_menu_posi,__menu_posi
  3167                           
  3168                           ;Main.c: 191: menu_posi = 25;
  3169  001368  0E19               	movlw	25
  3170  00136A  0100               	movlb	0	; () banked
  3171  00136C  6FD7               	movwf	_menu_posi& (0+255),b
  3172                           
  3173                           ;Main.c: 192: dtl_visualiza_log = 1;
  3174  00136E  0E01               	movlw	1
  3175  001370  6E5E               	movwf	_dtl_visualiza_log,c
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;Main.c: 193: }
  3179                           ;Main.c: 194: break;
  3180  001372  D04B               	goto	l843
  3181  001374  FFFF               	dw	65535	; assembler added errata NOP
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;Main.c: 196: line3[0] = '>';
  3185                           
  3186                           ; BSR set to: 0
  3187  001376  0E3E               	movlw	62
  3188  001378  0101               	movlb	1	; () banked
  3189  00137A  6F79               	movwf	_line3& (0+255),b
  3190                           
  3191                           ;Main.c: 197: menu_posi = 2;
  3192  00137C  0E02               	movlw	2
  3193  00137E  0100               	movlb	0	; () banked
  3194  001380  6FD7               	movwf	_menu_posi& (0+255),b
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;Main.c: 198: if (btPress(4)) {
  3198  001382  0E04               	movlw	4
  3199  001384  ECC6  F01F         	call	_btPress
  3200  001388  0900               	iorlw	0
  3201  00138A  B4D8               	btfsc	status,2,c
  3202  00138C  D03E               	goto	l843
  3203                           
  3204                           ;Main.c: 199: _menu_posi = menu_posi;
  3205  00138E  C0D7  F0D6         	movff	_menu_posi,__menu_posi
  3206                           
  3207                           ;Main.c: 200: menu_posi = 27;
  3208  001392  0E1B               	movlw	27
  3209  001394                     L5:
  3210  001394  FFFF               	dw	65535	; assembler added errata NOP
  3211  001396  0100               	movlb	0	; () banked
  3212  001398  D01A               	goto	L6
  3213  00139A  FFFF               	dw	65535	; assembler added errata NOP
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;Main.c: 204: line4[0] = '>';
  3217                           
  3218                           ; BSR set to: 0
  3219  00139C  0E3E               	movlw	62
  3220  00139E  0101               	movlb	1	; () banked
  3221  0013A0  6F64               	movwf	_line4& (0+255),b
  3222                           
  3223                           ;Main.c: 205: menu_posi = 2;
  3224  0013A2  0E02               	movlw	2
  3225  0013A4  0100               	movlb	0	; () banked
  3226  0013A6  6FD7               	movwf	_menu_posi& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;Main.c: 206: if (btPress(4)) {
  3230  0013A8  0E04               	movlw	4
  3231  0013AA  ECC6  F01F         	call	_btPress
  3232  0013AE  0900               	iorlw	0
  3233  0013B0  B4D8               	btfsc	status,2,c
  3234  0013B2  D02B               	goto	l843
  3235                           
  3236                           ;Main.c: 207: if (!incendio) {
  3237  0013B4  0100               	movlb	0	; () banked
  3238  0013B6  51D9               	movf	_incendio& (0+255),w,b
  3239  0013B8  A4D8               	btfss	status,2,c
  3240  0013BA  D027               	goto	l843
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;Main.c: 208: menu_posi = 28;
  3244  0013BC  0E1C               	movlw	28
  3245  0013BE  6FD7               	movwf	_menu_posi& (0+255),b
  3246                           
  3247                           ;Main.c: 209: teste_run = 2;
  3248  0013C0  0E02               	movlw	2
  3249  0013C2  6FDA               	movwf	_teste_run& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;Main.c: 210: }
  3253                           ;Main.c: 211: }
  3254                           ;Main.c: 212: break;
  3255                           
  3256                           ; BSR set to: 0
  3257  0013C4  D022               	goto	l843
  3258  0013C6  FFFF               	dw	65535	; assembler added errata NOP
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;Main.c: 214: sub_menu_posi = 1;
  3262                           
  3263                           ; BSR set to: 0
  3264  0013C8  0E01               	movlw	1
  3265  0013CA  6E5D               	movwf	_sub_menu_posi,c
  3266                           
  3267                           ;Main.c: 215: menu_posi = 1;
  3268  0013CC  0E01               	movlw	1
  3269  0013CE                     L6:
  3270  0013CE  FFFF               	dw	65535	; assembler added errata NOP
  3271  0013D0  6FD7               	movwf	_menu_posi& (0+255),b
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;Main.c: 217: }
  3275                           
  3276                           ;Main.c: 216: break;
  3277  0013D2  D01B               	goto	l843
  3278  0013D4                     l840:
  3279  0013D4  FFFF               	dw	65535	; assembler added errata NOP
  3280                           
  3281                           ; BSR set to: 0
  3282                           
  3283                           ; BSR set to: 0
  3284  0013D6  505D               	movf	_sub_menu_posi,w,c
  3285                           
  3286                           ; Switch size 1, requested type "space"
  3287                           ; Number of cases is 8, Range of values is 1 to 8
  3288                           ; switch strategies available:
  3289                           ; Name         Instructions Cycles
  3290                           ; simple_byte           25    13 (average)
  3291                           ;	Chosen strategy is simple_byte
  3292  0013D8  0A01               	xorlw	1	; case 1
  3293  0013DA  B4D8               	btfsc	status,2,c
  3294  0013DC  D766               	goto	l841
  3295  0013DE  0A03               	xorlw	3	; case 2
  3296  0013E0  B4D8               	btfsc	status,2,c
  3297  0013E2  D773               	goto	l844
  3298  0013E4  0A01               	xorlw	1	; case 3
  3299  0013E6  B4D8               	btfsc	status,2,c
  3300  0013E8  D780               	goto	l846
  3301  0013EA  0A07               	xorlw	7	; case 4
  3302  0013EC  B4D8               	btfsc	status,2,c
  3303  0013EE  D78D               	goto	l848
  3304  0013F0  0A01               	xorlw	1	; case 5
  3305  0013F2  B4D8               	btfsc	status,2,c
  3306  0013F4  D79A               	goto	l850
  3307  0013F6  0A03               	xorlw	3	; case 6
  3308  0013F8  B4D8               	btfsc	status,2,c
  3309  0013FA  D7A7               	goto	l852
  3310  0013FC  0A01               	xorlw	1	; case 7
  3311  0013FE  B4D8               	btfsc	status,2,c
  3312  001400  D7B9               	goto	l854
  3313  001402  0A0F               	xorlw	15	; case 8
  3314  001404  B4D8               	btfsc	status,2,c
  3315  001406  D7C9               	goto	l856
  3316  001408  D7DE               	goto	l859
  3317  00140A                     l843:
  3318  00140A  FFFF               	dw	65535	; assembler added errata NOP
  3319                           
  3320                           ;Main.c: 219: if (btPress(3)) {
  3321                           
  3322                           ; BSR set to: 0
  3323  00140C  0E03               	movlw	3
  3324  00140E  ECC6  F01F         	call	_btPress
  3325  001412  0900               	iorlw	0
  3326  001414  B4D8               	btfsc	status,2,c
  3327  001416  D002               	goto	l860
  3328                           
  3329                           ;Main.c: 220: sub_menu_posi--;
  3330  001418  065D               	decf	_sub_menu_posi,f,c
  3331                           
  3332                           ;Main.c: 221: } else if (btPress(2)) {
  3333  00141A  D017               	goto	l864
  3334  00141C                     l860:
  3335  00141C  FFFF               	dw	65535	; assembler added errata NOP
  3336  00141E  0E02               	movlw	2
  3337  001420  ECC6  F01F         	call	_btPress
  3338  001424  0900               	iorlw	0
  3339  001426  B4D8               	btfsc	status,2,c
  3340  001428  D002               	goto	l862
  3341                           
  3342                           ;Main.c: 222: sub_menu_posi++;
  3343  00142A  2A5D               	incf	_sub_menu_posi,f,c
  3344                           
  3345                           ;Main.c: 223: } else if (btPress(1)) {
  3346  00142C  D00E               	goto	l864
  3347  00142E                     l862:
  3348  00142E  FFFF               	dw	65535	; assembler added errata NOP
  3349  001430  0E01               	movlw	1
  3350  001432  ECC6  F01F         	call	_btPress
  3351  001436  0900               	iorlw	0
  3352  001438  B4D8               	btfsc	status,2,c
  3353  00143A  D007               	goto	l864
  3354                           
  3355                           ;Main.c: 224: menu_posi = 0;
  3356  00143C  0E00               	movlw	0
  3357  00143E  0100               	movlb	0	; () banked
  3358  001440  6FD7               	movwf	_menu_posi& (0+255),b
  3359                           
  3360                           ;Main.c: 225: option_posi = 0;
  3361  001442  0E00               	movlw	0
  3362  001444  6FD8               	movwf	_option_posi& (0+255),b
  3363                           
  3364                           ;Main.c: 226: sub_menu_posi = 1;
  3365  001446  0E01               	movlw	1
  3366  001448  6E5D               	movwf	_sub_menu_posi,c
  3367  00144A                     l864:
  3368  00144A  FFFF               	dw	65535	; assembler added errata NOP
  3369                           
  3370                           ;Main.c: 227: }
  3371                           ;Main.c: 228: }
  3372                           ;Main.c: 230: if (menu_posi != 28) {
  3373                           
  3374                           ; BSR set to: 0
  3375                           
  3376                           ; BSR set to: 0
  3377                           
  3378                           ; BSR set to: 0
  3379                           
  3380                           ; BSR set to: 0
  3381  00144C  0E1C               	movlw	28
  3382  00144E  0100               	movlb	0	; () banked
  3383  001450  19D7               	xorwf	_menu_posi& (0+255),w,b
  3384  001452  B4D8               	btfsc	status,2,c
  3385  001454  D004               	goto	l865
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;Main.c: 231: teste_run = 0;
  3389  001456  0E00               	movlw	0
  3390  001458  6FDA               	movwf	_teste_run& (0+255),b
  3391                           
  3392                           ;Main.c: 232: shift[2] = 0;
  3393  00145A  0E00               	movlw	0
  3394  00145C  6E46               	movwf	_shift+2,c
  3395  00145E                     l865:
  3396  00145E  FFFF               	dw	65535	; assembler added errata NOP
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;Main.c: 233: }
  3400                           ;Main.c: 234: atualizarLCD(line1, line2, line3, line4);
  3401                           
  3402                           ; BSR set to: 0
  3403  001460  0EA3               	movlw	low _line1
  3404  001462  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3405  001464  0E01               	movlw	high _line1
  3406  001466  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3407  001468  0E8E               	movlw	low _line2
  3408  00146A  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3409  00146C  0E01               	movlw	high _line2
  3410  00146E  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3411  001470  0E79               	movlw	low _line3
  3412  001472  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3413  001474  0E01               	movlw	high _line3
  3414  001476  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3415  001478  0E64               	movlw	low _line4
  3416  00147A  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3417  00147C  0E01               	movlw	high _line4
  3418  00147E  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3419  001480  ECCC  F01A         	call	_atualizarLCD	;wreg free
  3420  001484  D64F               	goto	l821
  3421  001486                     __end_of_main:
  3422                           	opt stack 0
  3423                           tblptru	equ	0xFF8
  3424                           tblptrh	equ	0xFF7
  3425                           tblptrl	equ	0xFF6
  3426                           tablat	equ	0xFF5
  3427                           postinc0	equ	0xFEE
  3428                           wreg	equ	0xFE8
  3429                           postdec1	equ	0xFE5
  3430                           fsr1l	equ	0xFE1
  3431                           status	equ	0xFD8
  3432                           
  3433 ;; *************** function _tela_testeBombas *****************
  3434 ;; Defined at:
  3435 ;;		line 8 in file "tela_TESTE_BOMBAS.h"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;		None
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;		None
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  1    wreg      void 
  3442 ;; Registers used:
  3443 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3449 ;;      Params:         0       0       0       0       0       0       0
  3450 ;;      Locals:         0       0       0       0       0       0       0
  3451 ;;      Temps:          0       2       0       0       0       0       0
  3452 ;;      Totals:         0       2       0       0       0       0       0
  3453 ;;Total ram usage:        2 bytes
  3454 ;; Hardware stack levels used:    1
  3455 ;; Hardware stack levels required when called:    9
  3456 ;; This function calls:
  3457 ;;		_blink
  3458 ;;		_btPress
  3459 ;;		_sprintf
  3460 ;;		_writeEEPROM_ext
  3461 ;; This function is called by:
  3462 ;;		_main
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           	psect	text1
  3467  002822                     __ptext1:
  3468                           	opt stack 0
  3469  002822                     _tela_testeBombas:
  3470                           	opt stack 0
  3471  002822  FFFF               	dw	65535	; assembler added errata NOP
  3472                           
  3473                           ;tela_TESTE_BOMBAS.h: 10: sprintf(line1, "#Proximo em %2d dias", (intervalo_teste_dia - 
      +                          dias_restante_teste));
  3474                           
  3475                           ;incstack = 0
  3476  002824  0EA3               	movlw	low _line1
  3477  002826  0100               	movlb	0	; () banked
  3478  002828  6FA1               	movwf	sprintf@wh& (0+255),b
  3479  00282A  0E01               	movlw	high _line1
  3480  00282C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3481  00282E  0EC2               	movlw	low STR_49
  3482  002830  6FA3               	movwf	sprintf@f& (0+255),b
  3483  002832  0E7C               	movlw	high STR_49
  3484  002834  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3485  002836  51F1               	movf	_dias_restante_teste& (0+255),w,b
  3486  002838  6FB7               	movwf	??_tela_testeBombas& (0+255),b
  3487  00283A  6BB8               	clrf	(??_tela_testeBombas+1)& (0+255),b
  3488  00283C  1FB7               	comf	??_tela_testeBombas& (0+255),f,b
  3489  00283E  1FB8               	comf	(??_tela_testeBombas+1)& (0+255),f,b
  3490  002840  4BB7               	infsnz	??_tela_testeBombas& (0+255),f,b
  3491  002842  2BB8               	incf	(??_tela_testeBombas+1)& (0+255),f,b
  3492  002844  51F2               	movf	_intervalo_teste_dia& (0+255),w,b
  3493  002846  25B7               	addwf	??_tela_testeBombas& (0+255),w,b
  3494  002848  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3495  00284A  0E00               	movlw	0
  3496  00284C  21B8               	addwfc	(??_tela_testeBombas+1)& (0+255),w,b
  3497  00284E  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3498  002850  ECD4  F03B         	call	_sprintf	;wreg free
  3499                           
  3500                           ;tela_TESTE_BOMBAS.h: 11: sprintf(line2, "INTERVALO: %2d dias", intervalo_teste_dia);
  3501  002854  0E8E               	movlw	low _line2
  3502  002856  0100               	movlb	0	; () banked
  3503  002858  6FA1               	movwf	sprintf@wh& (0+255),b
  3504  00285A  0E01               	movlw	high _line2
  3505  00285C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3506  00285E  0E13               	movlw	low STR_50
  3507  002860  6FA3               	movwf	sprintf@f& (0+255),b
  3508  002862  0E7D               	movlw	high STR_50
  3509  002864  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3510  002866  C0F2  F0A5         	movff	_intervalo_teste_dia,?_sprintf+4
  3511  00286A  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3512  00286C  ECD4  F03B         	call	_sprintf	;wreg free
  3513                           
  3514                           ;tela_TESTE_BOMBAS.h: 12: sprintf(line3, "HORARIO: %02d horas", horario_de_teste);
  3515  002870  0E79               	movlw	low _line3
  3516  002872  0100               	movlb	0	; () banked
  3517  002874  6FA1               	movwf	sprintf@wh& (0+255),b
  3518  002876  0E01               	movlw	high _line3
  3519  002878  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3520  00287A  0E27               	movlw	low STR_51
  3521  00287C  6FA3               	movwf	sprintf@f& (0+255),b
  3522  00287E  0E7D               	movlw	high STR_51
  3523  002880  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3524  002882  C0F0  F0A5         	movff	_horario_de_teste,?_sprintf+4
  3525  002886  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3526  002888  ECD4  F03B         	call	_sprintf	;wreg free
  3527                           
  3528                           ;tela_TESTE_BOMBAS.h: 14: if (btPress(1)) {
  3529  00288C  0E01               	movlw	1
  3530  00288E  ECC6  F01F         	call	_btPress
  3531  002892  0900               	iorlw	0
  3532  002894  B4D8               	btfsc	status,2,c
  3533  002896  D00C               	goto	l674
  3534                           
  3535                           ;tela_TESTE_BOMBAS.h: 15: writeEEPROM_ext(6, intervalo_teste_dia);
  3536  002898  C0F2  F08C         	movff	_intervalo_teste_dia,writeEEPROM_ext@data
  3537  00289C  0E06               	movlw	6
  3538  00289E  ECB1  F03B         	call	_writeEEPROM_ext
  3539                           
  3540                           ;tela_TESTE_BOMBAS.h: 16: writeEEPROM_ext(11, horario_de_teste);
  3541  0028A2  C0F0  F08C         	movff	_horario_de_teste,writeEEPROM_ext@data
  3542  0028A6  0E0B               	movlw	11
  3543  0028A8  ECB1  F03B         	call	_writeEEPROM_ext
  3544                           
  3545                           ;tela_TESTE_BOMBAS.h: 17: menu_posi = _menu_posi;
  3546  0028AC  C0D6  F0D7         	movff	__menu_posi,_menu_posi
  3547  0028B0                     l674:
  3548  0028B0  FFFF               	dw	65535	; assembler added errata NOP
  3549                           
  3550                           ;tela_TESTE_BOMBAS.h: 18: }
  3551                           ;tela_TESTE_BOMBAS.h: 19: if (btPress(4)) {
  3552  0028B2  0E04               	movlw	4
  3553  0028B4  ECC6  F01F         	call	_btPress
  3554  0028B8  0900               	iorlw	0
  3555  0028BA  B4D8               	btfsc	status,2,c
  3556  0028BC  D04A               	goto	l676
  3557                           
  3558                           ;tela_TESTE_BOMBAS.h: 20: option_posi++;
  3559  0028BE  0100               	movlb	0	; () banked
  3560  0028C0  2BD8               	incf	_option_posi& (0+255),f,b
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;tela_TESTE_BOMBAS.h: 21: }
  3564                           ;tela_TESTE_BOMBAS.h: 22: switch (option_posi) {
  3565  0028C2  D047               	goto	l676
  3566  0028C4  FFFF               	dw	65535	; assembler added errata NOP
  3567                           
  3568                           ; BSR set to: 0
  3569                           ;tela_TESTE_BOMBAS.h: 24: blink(line2, 11, 14);
  3570                           
  3571                           ; BSR set to: 0
  3572  0028C6  0E8E               	movlw	low _line2
  3573  0028C8  6F80               	movwf	blink@line& (0+255),b
  3574  0028CA  0E01               	movlw	high _line2
  3575  0028CC  6F81               	movwf	(blink@line+1)& (0+255),b
  3576  0028CE  0E0B               	movlw	11
  3577  0028D0  6F82               	movwf	blink@start& (0+255),b
  3578  0028D2  0E0E               	movlw	14
  3579  0028D4  6F83               	movwf	blink@end& (0+255),b
  3580  0028D6  ECCE  F03A         	call	_blink	;wreg free
  3581                           
  3582                           ;tela_TESTE_BOMBAS.h: 25: if (btPress(3)) {
  3583  0028DA  0E03               	movlw	3
  3584  0028DC  ECC6  F01F         	call	_btPress
  3585  0028E0  0900               	iorlw	0
  3586  0028E2  B4D8               	btfsc	status,2,c
  3587  0028E4  D002               	goto	l678
  3588                           
  3589                           ;tela_TESTE_BOMBAS.h: 26: intervalo_teste_dia++;
  3590  0028E6  0100               	movlb	0	; () banked
  3591  0028E8  2BF2               	incf	_intervalo_teste_dia& (0+255),f,b
  3592  0028EA                     l678:
  3593  0028EA  FFFF               	dw	65535	; assembler added errata NOP
  3594                           
  3595                           ;tela_TESTE_BOMBAS.h: 27: }
  3596                           ;tela_TESTE_BOMBAS.h: 28: if (btPress(2)) {
  3597                           
  3598                           ; BSR set to: 0
  3599  0028EC  0E02               	movlw	2
  3600  0028EE  ECC6  F01F         	call	_btPress
  3601  0028F2  0900               	iorlw	0
  3602  0028F4  B4D8               	btfsc	status,2,c
  3603  0028F6  D037               	goto	l680
  3604                           
  3605                           ;tela_TESTE_BOMBAS.h: 29: intervalo_teste_dia--;
  3606  0028F8  0100               	movlb	0	; () banked
  3607  0028FA  07F2               	decf	_intervalo_teste_dia& (0+255),f,b
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;tela_TESTE_BOMBAS.h: 30: }
  3611                           ;tela_TESTE_BOMBAS.h: 31: break;
  3612  0028FC  D034               	goto	l680
  3613  0028FE  FFFF               	dw	65535	; assembler added errata NOP
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;tela_TESTE_BOMBAS.h: 33: blink(line3, 9, 11);
  3617                           
  3618                           ; BSR set to: 0
  3619  002900  0E79               	movlw	low _line3
  3620  002902  6F80               	movwf	blink@line& (0+255),b
  3621  002904  0E01               	movlw	high _line3
  3622  002906  6F81               	movwf	(blink@line+1)& (0+255),b
  3623  002908  0E09               	movlw	9
  3624  00290A  6F82               	movwf	blink@start& (0+255),b
  3625  00290C  0E0B               	movlw	11
  3626  00290E  6F83               	movwf	blink@end& (0+255),b
  3627  002910  ECCE  F03A         	call	_blink	;wreg free
  3628                           
  3629                           ;tela_TESTE_BOMBAS.h: 34: if (btPress(3)) {
  3630  002914  0E03               	movlw	3
  3631  002916  ECC6  F01F         	call	_btPress
  3632  00291A  0900               	iorlw	0
  3633  00291C  B4D8               	btfsc	status,2,c
  3634  00291E  D002               	goto	l682
  3635                           
  3636                           ;tela_TESTE_BOMBAS.h: 35: horario_de_teste++;
  3637  002920  0100               	movlb	0	; () banked
  3638  002922  2BF0               	incf	_horario_de_teste& (0+255),f,b
  3639  002924                     l682:
  3640  002924  FFFF               	dw	65535	; assembler added errata NOP
  3641                           
  3642                           ;tela_TESTE_BOMBAS.h: 36: }
  3643                           ;tela_TESTE_BOMBAS.h: 37: if (btPress(2)) {
  3644                           
  3645                           ; BSR set to: 0
  3646  002926  0E02               	movlw	2
  3647  002928  ECC6  F01F         	call	_btPress
  3648  00292C  0900               	iorlw	0
  3649  00292E  B4D8               	btfsc	status,2,c
  3650  002930  D002               	goto	l683
  3651                           
  3652                           ;tela_TESTE_BOMBAS.h: 38: horario_de_teste--;
  3653  002932  0100               	movlb	0	; () banked
  3654  002934  07F0               	decf	_horario_de_teste& (0+255),f,b
  3655  002936                     l683:
  3656  002936  FFFF               	dw	65535	; assembler added errata NOP
  3657                           
  3658                           ;tela_TESTE_BOMBAS.h: 39: }
  3659                           ;tela_TESTE_BOMBAS.h: 40: if (horario_de_teste > 23 || horario_de_teste < 0) {
  3660                           
  3661                           ; BSR set to: 0
  3662  002938  0E18               	movlw	24
  3663  00293A  0100               	movlb	0	; () banked
  3664  00293C  61F0               	cpfslt	_horario_de_teste& (0+255),b
  3665  00293E  D001               	goto	l686
  3666  002940  D012               	goto	l680
  3667  002942                     l686:
  3668  002942  FFFF               	dw	65535	; assembler added errata NOP
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;tela_TESTE_BOMBAS.h: 41: horario_de_teste = 0;
  3672                           
  3673                           ; BSR set to: 0
  3674  002944  0E00               	movlw	0
  3675  002946  6FF0               	movwf	_horario_de_teste& (0+255),b
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;tela_TESTE_BOMBAS.h: 42: }
  3679                           ;tela_TESTE_BOMBAS.h: 43: break;
  3680  002948  D00E               	goto	l680
  3681  00294A  FFFF               	dw	65535	; assembler added errata NOP
  3682                           
  3683                           ; BSR set to: 0
  3684                           
  3685                           ; BSR set to: 0
  3686  00294C  0E00               	movlw	0
  3687  00294E  6FD8               	movwf	_option_posi& (0+255),b
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;tela_TESTE_BOMBAS.h: 46: }
  3691                           
  3692                           ;tela_TESTE_BOMBAS.h: 45: break;
  3693  002950  D00A               	goto	l680
  3694  002952                     l676:
  3695  002952  FFFF               	dw	65535	; assembler added errata NOP
  3696                           
  3697                           ; BSR set to: 0
  3698  002954  0100               	movlb	0	; () banked
  3699  002956  51D8               	movf	_option_posi& (0+255),w,b
  3700                           
  3701                           ; Switch size 1, requested type "space"
  3702                           ; Number of cases is 2, Range of values is 0 to 1
  3703                           ; switch strategies available:
  3704                           ; Name         Instructions Cycles
  3705                           ; simple_byte            7     4 (average)
  3706                           ;	Chosen strategy is simple_byte
  3707  002958  0A00               	xorlw	0	; case 0
  3708  00295A  B4D8               	btfsc	status,2,c
  3709  00295C  D7B3               	goto	l677
  3710  00295E  0A01               	xorlw	1	; case 1
  3711  002960  B4D8               	btfsc	status,2,c
  3712  002962  D7CD               	goto	l681
  3713  002964  D7F2               	goto	l687
  3714  002966                     l680:
  3715  002966  FFFF               	dw	65535	; assembler added errata NOP
  3716                           
  3717                           ; BSR set to: 0
  3718  002968  0012               	return		;funcret
  3719  00296A  FFFF               	dw	65535	; errata NOP
  3720  00296C                     __end_of_tela_testeBombas:
  3721                           	opt stack 0
  3722                           tblptru	equ	0xFF8
  3723                           tblptrh	equ	0xFF7
  3724                           tblptrl	equ	0xFF6
  3725                           tablat	equ	0xFF5
  3726                           postinc0	equ	0xFEE
  3727                           wreg	equ	0xFE8
  3728                           postdec1	equ	0xFE5
  3729                           fsr1l	equ	0xFE1
  3730                           status	equ	0xFD8
  3731                           
  3732 ;; *************** function _tela_ajusteRTC *****************
  3733 ;; Defined at:
  3734 ;;		line 11 in file "tela_RELOGIO.h"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;		None
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;		None
  3739 ;; Return value:  Size  Location     Type
  3740 ;;                  1    wreg      void 
  3741 ;; Registers used:
  3742 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3748 ;;      Params:         0       0       0       0       0       0       0
  3749 ;;      Locals:         0       0       0       0       0       0       0
  3750 ;;      Temps:          0       0       0       0       0       0       0
  3751 ;;      Totals:         0       0       0       0       0       0       0
  3752 ;;Total ram usage:        0 bytes
  3753 ;; Hardware stack levels used:    1
  3754 ;; Hardware stack levels required when called:    9
  3755 ;; This function calls:
  3756 ;;		_blink
  3757 ;;		_btPress
  3758 ;;		_setDS1307TimeDate
  3759 ;;		_sprintf
  3760 ;;		_validaRTC
  3761 ;; This function is called by:
  3762 ;;		_main
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           	psect	text2
  3767  001E8A                     __ptext2:
  3768                           	opt stack 0
  3769  001E8A                     _tela_ajusteRTC:
  3770                           	opt stack 0
  3771  001E8A  FFFF               	dw	65535	; assembler added errata NOP
  3772                           
  3773                           ;tela_RELOGIO.h: 12: sprintf(line1, "DATA:");
  3774                           
  3775                           ;incstack = 0
  3776  001E8C  0EA3               	movlw	low _line1
  3777  001E8E  0100               	movlb	0	; () banked
  3778  001E90  6FA1               	movwf	sprintf@wh& (0+255),b
  3779  001E92  0E01               	movlw	high _line1
  3780  001E94  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3781  001E96  0ED8               	movlw	low STR_45
  3782  001E98  6FA3               	movwf	sprintf@f& (0+255),b
  3783  001E9A  0E7F               	movlw	high STR_45
  3784  001E9C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3785  001E9E  ECD4  F03B         	call	_sprintf	;wreg free
  3786                           
  3787                           ;tela_RELOGIO.h: 13: sprintf(line2, "%02d/%02d/%02d", rtc.date, rtc.month, rtc.year);
  3788  001EA2  0E8E               	movlw	low _line2
  3789  001EA4  0100               	movlb	0	; () banked
  3790  001EA6  6FA1               	movwf	sprintf@wh& (0+255),b
  3791  001EA8  0E01               	movlw	high _line2
  3792  001EAA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3793  001EAC  0EB3               	movlw	low (STR_52+10)
  3794  001EAE  6FA3               	movwf	sprintf@f& (0+255),b
  3795  001EB0  0E7C               	movlw	high (STR_52+10)
  3796  001EB2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3797  001EB4  C06A  F0A5         	movff	_rtc+4,?_sprintf+4
  3798  001EB8  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3799  001EBA  C06B  F0A7         	movff	_rtc+5,?_sprintf+6
  3800  001EBE  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  3801  001EC0  C06C  F0A9         	movff	_rtc+6,?_sprintf+8
  3802  001EC4  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  3803  001EC6  ECD4  F03B         	call	_sprintf	;wreg free
  3804                           
  3805                           ;tela_RELOGIO.h: 14: sprintf(&line1[11], "HORA:");
  3806  001ECA  0EAE               	movlw	low (_line1+11)
  3807  001ECC  0100               	movlb	0	; () banked
  3808  001ECE  6FA1               	movwf	sprintf@wh& (0+255),b
  3809  001ED0  0E01               	movlw	high (_line1+11)
  3810  001ED2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3811  001ED4  0ED2               	movlw	low STR_47
  3812  001ED6  6FA3               	movwf	sprintf@f& (0+255),b
  3813  001ED8  0E7F               	movlw	high STR_47
  3814  001EDA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3815  001EDC  ECD4  F03B         	call	_sprintf	;wreg free
  3816                           
  3817                           ;tela_RELOGIO.h: 15: sprintf(&line2[11], "%02d:%02d:%02d", rtc.hour, rtc.min, rtc.sec);
  3818  001EE0  0E99               	movlw	low (_line2+11)
  3819  001EE2  0100               	movlb	0	; () banked
  3820  001EE4  6FA1               	movwf	sprintf@wh& (0+255),b
  3821  001EE6  0E01               	movlw	high (_line2+11)
  3822  001EE8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3823  001EEA  0EC2               	movlw	low STR_48
  3824  001EEC  6FA3               	movwf	sprintf@f& (0+255),b
  3825  001EEE  0E7E               	movlw	high STR_48
  3826  001EF0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3827  001EF2  C069  F0A5         	movff	_rtc+3,?_sprintf+4
  3828  001EF6  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3829  001EF8  C068  F0A7         	movff	_rtc+2,?_sprintf+6
  3830  001EFC  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  3831  001EFE  C067  F0A9         	movff	_rtc+1,?_sprintf+8
  3832  001F02  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  3833  001F04  ECD4  F03B         	call	_sprintf	;wreg free
  3834                           
  3835                           ;tela_RELOGIO.h: 17: if (btPress(4)) {
  3836  001F08  0E04               	movlw	4
  3837  001F0A  ECC6  F01F         	call	_btPress
  3838  001F0E  0900               	iorlw	0
  3839  001F10  B4D8               	btfsc	status,2,c
  3840  001F12  D003               	goto	l648
  3841                           
  3842                           ;tela_RELOGIO.h: 18: ajst_rtc = 1;
  3843  001F14  8273               	bsf	_ajst_rtc/(0+8),_ajst_rtc& (0+7),c
  3844                           
  3845                           ;tela_RELOGIO.h: 19: option_posi++;
  3846  001F16  0100               	movlb	0	; () banked
  3847  001F18  2BD8               	incf	_option_posi& (0+255),f,b
  3848  001F1A                     l648:
  3849  001F1A  FFFF               	dw	65535	; assembler added errata NOP
  3850                           
  3851                           ;tela_RELOGIO.h: 20: }
  3852                           ;tela_RELOGIO.h: 21: if (btPress(1)) {
  3853                           
  3854                           ; BSR set to: 0
  3855  001F1C  0E01               	movlw	1
  3856  001F1E  ECC6  F01F         	call	_btPress
  3857  001F22  0900               	iorlw	0
  3858  001F24  B4D8               	btfsc	status,2,c
  3859  001F26  D0AF               	goto	l650
  3860                           
  3861                           ;tela_RELOGIO.h: 22: ajst_rtc = 0;
  3862  001F28  9273               	bcf	_ajst_rtc/(0+8),_ajst_rtc& (0+7),c
  3863                           
  3864                           ;tela_RELOGIO.h: 23: option_posi = 0;
  3865  001F2A  0E00               	movlw	0
  3866  001F2C  0100               	movlb	0	; () banked
  3867  001F2E  6FD8               	movwf	_option_posi& (0+255),b
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;tela_RELOGIO.h: 24: setDS1307TimeDate(&rtc);
  3871  001F30  0E66               	movlw	low _rtc
  3872  001F32  6F8C               	movwf	setDS1307TimeDate@ptrToUserVal& (0+255),b
  3873  001F34  0E00               	movlw	high _rtc
  3874  001F36  6F8D               	movwf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  3875  001F38  ECFD  F016         	call	_setDS1307TimeDate	;wreg free
  3876                           
  3877                           ;tela_RELOGIO.h: 25: menu_posi = _menu_posi;
  3878  001F3C  C0D6  F0D7         	movff	__menu_posi,_menu_posi
  3879                           
  3880                           ;tela_RELOGIO.h: 26: _min++;
  3881  001F40  2A64               	incf	__min,f,c
  3882                           
  3883                           ;tela_RELOGIO.h: 27: }
  3884                           ;tela_RELOGIO.h: 28: switch (option_posi) {
  3885  001F42  D0A1               	goto	l650
  3886  001F44  FFFF               	dw	65535	; assembler added errata NOP
  3887                           
  3888                           ;tela_RELOGIO.h: 30: blink(line2, 1, 2);
  3889  001F46  0E8E               	movlw	low _line2
  3890  001F48  0100               	movlb	0	; () banked
  3891  001F4A  6F80               	movwf	blink@line& (0+255),b
  3892  001F4C  0E01               	movlw	high _line2
  3893  001F4E  6F81               	movwf	(blink@line+1)& (0+255),b
  3894  001F50  0E01               	movlw	1
  3895  001F52  6F82               	movwf	blink@start& (0+255),b
  3896  001F54  0E02               	movlw	2
  3897  001F56  6F83               	movwf	blink@end& (0+255),b
  3898  001F58  ECCE  F03A         	call	_blink	;wreg free
  3899                           
  3900                           ;tela_RELOGIO.h: 31: if (btPress(3)) {
  3901  001F5C  0E03               	movlw	3
  3902  001F5E  ECC6  F01F         	call	_btPress
  3903  001F62  0900               	iorlw	0
  3904  001F64  A4D8               	btfss	status,2,c
  3905                           
  3906                           ;tela_RELOGIO.h: 32: rtc.date++;
  3907  001F66  2A6A               	incf	_rtc+4,f,c
  3908                           
  3909                           ;tela_RELOGIO.h: 33: }
  3910                           ;tela_RELOGIO.h: 34: if (btPress(2)) {
  3911  001F68  0E02               	movlw	2
  3912  001F6A  ECC6  F01F         	call	_btPress
  3913  001F6E  0900               	iorlw	0
  3914  001F70  B4D8               	btfsc	status,2,c
  3915  001F72  D09F               	goto	l654
  3916                           
  3917                           ;tela_RELOGIO.h: 35: rtc.date--;
  3918  001F74  066A               	decf	_rtc+4,f,c
  3919                           
  3920                           ;tela_RELOGIO.h: 36: }
  3921                           ;tela_RELOGIO.h: 37: break;
  3922  001F76  D09D               	goto	l654
  3923  001F78  FFFF               	dw	65535	; assembler added errata NOP
  3924                           
  3925                           ;tela_RELOGIO.h: 39: blink(line2, 4, 5);
  3926  001F7A  0E8E               	movlw	low _line2
  3927  001F7C  0100               	movlb	0	; () banked
  3928  001F7E  6F80               	movwf	blink@line& (0+255),b
  3929  001F80  0E01               	movlw	high _line2
  3930  001F82  6F81               	movwf	(blink@line+1)& (0+255),b
  3931  001F84  0E04               	movlw	4
  3932  001F86  6F82               	movwf	blink@start& (0+255),b
  3933  001F88  0E05               	movlw	5
  3934  001F8A  6F83               	movwf	blink@end& (0+255),b
  3935  001F8C  ECCE  F03A         	call	_blink	;wreg free
  3936                           
  3937                           ;tela_RELOGIO.h: 40: if (btPress(3)) {
  3938  001F90  0E03               	movlw	3
  3939  001F92  ECC6  F01F         	call	_btPress
  3940  001F96  0900               	iorlw	0
  3941  001F98  A4D8               	btfss	status,2,c
  3942                           
  3943                           ;tela_RELOGIO.h: 41: rtc.month++;
  3944  001F9A  2A6B               	incf	_rtc+5,f,c
  3945                           
  3946                           ;tela_RELOGIO.h: 42: }
  3947                           ;tela_RELOGIO.h: 43: if (btPress(2)) {
  3948  001F9C  0E02               	movlw	2
  3949  001F9E  ECC6  F01F         	call	_btPress
  3950  001FA2  0900               	iorlw	0
  3951  001FA4  B4D8               	btfsc	status,2,c
  3952  001FA6  D085               	goto	l654
  3953                           
  3954                           ;tela_RELOGIO.h: 44: rtc.month--;
  3955  001FA8  066B               	decf	_rtc+5,f,c
  3956                           
  3957                           ;tela_RELOGIO.h: 45: }
  3958                           ;tela_RELOGIO.h: 46: break;
  3959  001FAA  D083               	goto	l654
  3960  001FAC  FFFF               	dw	65535	; assembler added errata NOP
  3961                           
  3962                           ;tela_RELOGIO.h: 48: blink(line2, 7, 8);
  3963  001FAE  0E8E               	movlw	low _line2
  3964  001FB0  0100               	movlb	0	; () banked
  3965  001FB2  6F80               	movwf	blink@line& (0+255),b
  3966  001FB4  0E01               	movlw	high _line2
  3967  001FB6  6F81               	movwf	(blink@line+1)& (0+255),b
  3968  001FB8  0E07               	movlw	7
  3969  001FBA  6F82               	movwf	blink@start& (0+255),b
  3970  001FBC  0E08               	movlw	8
  3971  001FBE  6F83               	movwf	blink@end& (0+255),b
  3972  001FC0  ECCE  F03A         	call	_blink	;wreg free
  3973                           
  3974                           ;tela_RELOGIO.h: 49: if (btPress(3)) {
  3975  001FC4  0E03               	movlw	3
  3976  001FC6  ECC6  F01F         	call	_btPress
  3977  001FCA  0900               	iorlw	0
  3978  001FCC  A4D8               	btfss	status,2,c
  3979                           
  3980                           ;tela_RELOGIO.h: 50: rtc.year++;
  3981  001FCE  2A6C               	incf	_rtc+6,f,c
  3982                           
  3983                           ;tela_RELOGIO.h: 51: }
  3984                           ;tela_RELOGIO.h: 52: if (btPress(2)) {
  3985  001FD0  0E02               	movlw	2
  3986  001FD2  ECC6  F01F         	call	_btPress
  3987  001FD6  0900               	iorlw	0
  3988  001FD8  B4D8               	btfsc	status,2,c
  3989  001FDA  D06B               	goto	l654
  3990                           
  3991                           ;tela_RELOGIO.h: 53: rtc.year--;
  3992  001FDC  066C               	decf	_rtc+6,f,c
  3993                           
  3994                           ;tela_RELOGIO.h: 54: }
  3995                           ;tela_RELOGIO.h: 55: break;
  3996  001FDE  D069               	goto	l654
  3997  001FE0  FFFF               	dw	65535	; assembler added errata NOP
  3998                           
  3999                           ;tela_RELOGIO.h: 57: blink(line2, 12, 13);
  4000  001FE2  0E8E               	movlw	low _line2
  4001  001FE4  0100               	movlb	0	; () banked
  4002  001FE6  6F80               	movwf	blink@line& (0+255),b
  4003  001FE8  0E01               	movlw	high _line2
  4004  001FEA  6F81               	movwf	(blink@line+1)& (0+255),b
  4005  001FEC  0E0C               	movlw	12
  4006  001FEE  6F82               	movwf	blink@start& (0+255),b
  4007  001FF0  0E0D               	movlw	13
  4008  001FF2  6F83               	movwf	blink@end& (0+255),b
  4009  001FF4  ECCE  F03A         	call	_blink	;wreg free
  4010                           
  4011                           ;tela_RELOGIO.h: 58: if (btPress(3)) {
  4012  001FF8  0E03               	movlw	3
  4013  001FFA  ECC6  F01F         	call	_btPress
  4014  001FFE  0900               	iorlw	0
  4015  002000  A4D8               	btfss	status,2,c
  4016                           
  4017                           ;tela_RELOGIO.h: 59: rtc.hour++;
  4018  002002  2A69               	incf	_rtc+3,f,c
  4019                           
  4020                           ;tela_RELOGIO.h: 60: }
  4021                           ;tela_RELOGIO.h: 61: if (btPress(2)) {
  4022  002004  0E02               	movlw	2
  4023  002006  ECC6  F01F         	call	_btPress
  4024  00200A  0900               	iorlw	0
  4025  00200C  B4D8               	btfsc	status,2,c
  4026  00200E  D051               	goto	l654
  4027                           
  4028                           ;tela_RELOGIO.h: 62: rtc.hour--;
  4029  002010  0669               	decf	_rtc+3,f,c
  4030                           
  4031                           ;tela_RELOGIO.h: 63: }
  4032                           ;tela_RELOGIO.h: 64: break;
  4033  002012  D04F               	goto	l654
  4034  002014  FFFF               	dw	65535	; assembler added errata NOP
  4035                           
  4036                           ;tela_RELOGIO.h: 66: blink(line2, 15, 16);
  4037  002016  0E8E               	movlw	low _line2
  4038  002018  0100               	movlb	0	; () banked
  4039  00201A  6F80               	movwf	blink@line& (0+255),b
  4040  00201C  0E01               	movlw	high _line2
  4041  00201E  6F81               	movwf	(blink@line+1)& (0+255),b
  4042  002020  0E0F               	movlw	15
  4043  002022  6F82               	movwf	blink@start& (0+255),b
  4044  002024  0E10               	movlw	16
  4045  002026  6F83               	movwf	blink@end& (0+255),b
  4046  002028  ECCE  F03A         	call	_blink	;wreg free
  4047                           
  4048                           ;tela_RELOGIO.h: 67: if (btPress(3)) {
  4049  00202C  0E03               	movlw	3
  4050  00202E  ECC6  F01F         	call	_btPress
  4051  002032  0900               	iorlw	0
  4052  002034  A4D8               	btfss	status,2,c
  4053                           
  4054                           ;tela_RELOGIO.h: 68: rtc.min++;
  4055  002036  2A68               	incf	_rtc+2,f,c
  4056                           
  4057                           ;tela_RELOGIO.h: 69: }
  4058                           ;tela_RELOGIO.h: 70: if (btPress(2)) {
  4059  002038  0E02               	movlw	2
  4060  00203A  ECC6  F01F         	call	_btPress
  4061  00203E  0900               	iorlw	0
  4062  002040  B4D8               	btfsc	status,2,c
  4063  002042  D037               	goto	l654
  4064                           
  4065                           ;tela_RELOGIO.h: 71: rtc.min--;
  4066  002044  0668               	decf	_rtc+2,f,c
  4067                           
  4068                           ;tela_RELOGIO.h: 72: }
  4069                           ;tela_RELOGIO.h: 73: break;
  4070  002046  D035               	goto	l654
  4071  002048  FFFF               	dw	65535	; assembler added errata NOP
  4072                           
  4073                           ;tela_RELOGIO.h: 75: blink(line2, 18, 19);
  4074  00204A  0E8E               	movlw	low _line2
  4075  00204C  0100               	movlb	0	; () banked
  4076  00204E  6F80               	movwf	blink@line& (0+255),b
  4077  002050  0E01               	movlw	high _line2
  4078  002052  6F81               	movwf	(blink@line+1)& (0+255),b
  4079  002054  0E12               	movlw	18
  4080  002056  6F82               	movwf	blink@start& (0+255),b
  4081  002058  0E13               	movlw	19
  4082  00205A  6F83               	movwf	blink@end& (0+255),b
  4083  00205C  ECCE  F03A         	call	_blink	;wreg free
  4084                           
  4085                           ;tela_RELOGIO.h: 76: if (btPress(3)) {
  4086  002060  0E03               	movlw	3
  4087  002062  ECC6  F01F         	call	_btPress
  4088  002066  0900               	iorlw	0
  4089  002068  A4D8               	btfss	status,2,c
  4090                           
  4091                           ;tela_RELOGIO.h: 77: rtc.sec++;
  4092  00206A  2A67               	incf	_rtc+1,f,c
  4093                           
  4094                           ;tela_RELOGIO.h: 78: }
  4095                           ;tela_RELOGIO.h: 79: if (btPress(2)) {
  4096  00206C  0E02               	movlw	2
  4097  00206E  ECC6  F01F         	call	_btPress
  4098  002072  0900               	iorlw	0
  4099  002074  B4D8               	btfsc	status,2,c
  4100  002076  D01D               	goto	l654
  4101                           
  4102                           ;tela_RELOGIO.h: 80: rtc.sec--;
  4103  002078  0667               	decf	_rtc+1,f,c
  4104                           
  4105                           ;tela_RELOGIO.h: 81: }
  4106                           ;tela_RELOGIO.h: 82: break;
  4107  00207A  D01B               	goto	l654
  4108  00207C  FFFF               	dw	65535	; assembler added errata NOP
  4109  00207E  0E01               	movlw	1
  4110  002080  0100               	movlb	0	; () banked
  4111  002082  6FD8               	movwf	_option_posi& (0+255),b
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;tela_RELOGIO.h: 85: }
  4115                           
  4116                           ;tela_RELOGIO.h: 84: break;
  4117  002084  D016               	goto	l654
  4118  002086                     l650:
  4119  002086  FFFF               	dw	65535	; assembler added errata NOP
  4120                           
  4121                           ; BSR set to: 0
  4122  002088  0100               	movlb	0	; () banked
  4123  00208A  51D8               	movf	_option_posi& (0+255),w,b
  4124                           
  4125                           ; Switch size 1, requested type "space"
  4126                           ; Number of cases is 6, Range of values is 1 to 6
  4127                           ; switch strategies available:
  4128                           ; Name         Instructions Cycles
  4129                           ; simple_byte           19    10 (average)
  4130                           ;	Chosen strategy is simple_byte
  4131  00208C  0A01               	xorlw	1	; case 1
  4132  00208E  B4D8               	btfsc	status,2,c
  4133  002090  D759               	goto	l651
  4134  002092  0A03               	xorlw	3	; case 2
  4135  002094  B4D8               	btfsc	status,2,c
  4136  002096  D770               	goto	l655
  4137  002098  0A01               	xorlw	1	; case 3
  4138  00209A  B4D8               	btfsc	status,2,c
  4139  00209C  D787               	goto	l658
  4140  00209E  0A07               	xorlw	7	; case 4
  4141  0020A0  B4D8               	btfsc	status,2,c
  4142  0020A2  D79E               	goto	l661
  4143  0020A4  0A01               	xorlw	1	; case 5
  4144  0020A6  B4D8               	btfsc	status,2,c
  4145  0020A8  D7B5               	goto	l664
  4146  0020AA  0A03               	xorlw	3	; case 6
  4147  0020AC  B4D8               	btfsc	status,2,c
  4148  0020AE  D7CC               	goto	l667
  4149  0020B0  D7E5               	goto	l670
  4150  0020B2                     l654:
  4151  0020B2  FFFF               	dw	65535	; assembler added errata NOP
  4152                           
  4153                           ;tela_RELOGIO.h: 86: validaRTC();
  4154                           
  4155                           ; BSR set to: 0
  4156  0020B4  EC1C  F03C         	call	_validaRTC	;wreg free
  4157  0020B8  0012               	return		;funcret
  4158  0020BA  FFFF               	dw	65535	; errata NOP
  4159  0020BC                     __end_of_tela_ajusteRTC:
  4160                           	opt stack 0
  4161                           tblptru	equ	0xFF8
  4162                           tblptrh	equ	0xFF7
  4163                           tblptrl	equ	0xFF6
  4164                           tablat	equ	0xFF5
  4165                           postinc0	equ	0xFEE
  4166                           wreg	equ	0xFE8
  4167                           postdec1	equ	0xFE5
  4168                           fsr1l	equ	0xFE1
  4169                           status	equ	0xFD8
  4170                           
  4171 ;; *************** function _validaRTC *****************
  4172 ;; Defined at:
  4173 ;;		line 108 in file "ds1307.h"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;		None
  4176 ;; Auto vars:     Size  Location     Type
  4177 ;;		None
  4178 ;; Return value:  Size  Location     Type
  4179 ;;                  2  524[None  ] int 
  4180 ;; Registers used:
  4181 ;;		wreg, status,2, status,0
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4187 ;;      Params:         0       0       0       0       0       0       0
  4188 ;;      Locals:         0       0       0       0       0       0       0
  4189 ;;      Temps:          0       0       0       0       0       0       0
  4190 ;;      Totals:         0       0       0       0       0       0       0
  4191 ;;Total ram usage:        0 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:    6
  4194 ;; This function calls:
  4195 ;;		Nothing
  4196 ;; This function is called by:
  4197 ;;		_tela_ajusteRTC
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text3
  4202  007838                     __ptext3:
  4203                           	opt stack 0
  4204  007838                     _validaRTC:
  4205                           	opt stack 0
  4206  007838  FFFF               	dw	65535	; assembler added errata NOP
  4207                           
  4208                           ;ds1307.h: 109: if (rtc.date > 31) rtc.date = 0;
  4209                           
  4210                           ;incstack = 0
  4211  00783A  0E1F               	movlw	31
  4212  00783C  646A               	cpfsgt	_rtc+4,c
  4213  00783E  D002               	goto	l525
  4214  007840  0E00               	movlw	0
  4215  007842  6E6A               	movwf	_rtc+4,c
  4216  007844                     l525:
  4217  007844  FFFF               	dw	65535	; assembler added errata NOP
  4218                           
  4219                           ;ds1307.h: 110: if (rtc.hour > 23) rtc.hour = 0;
  4220  007846  0E17               	movlw	23
  4221  007848  6469               	cpfsgt	_rtc+3,c
  4222  00784A  D002               	goto	l526
  4223  00784C  0E00               	movlw	0
  4224  00784E  6E69               	movwf	_rtc+3,c
  4225  007850                     l526:
  4226  007850  FFFF               	dw	65535	; assembler added errata NOP
  4227                           
  4228                           ;ds1307.h: 111: if (rtc.min > 59) rtc.min = 0;
  4229  007852  0E3B               	movlw	59
  4230  007854  6468               	cpfsgt	_rtc+2,c
  4231  007856  D002               	goto	l527
  4232  007858  0E00               	movlw	0
  4233  00785A  6E68               	movwf	_rtc+2,c
  4234  00785C                     l527:
  4235  00785C  FFFF               	dw	65535	; assembler added errata NOP
  4236                           
  4237                           ;ds1307.h: 112: if (rtc.month > 12) rtc.month = 0;
  4238  00785E  0E0C               	movlw	12
  4239  007860  646B               	cpfsgt	_rtc+5,c
  4240  007862  D002               	goto	l528
  4241  007864  0E00               	movlw	0
  4242  007866  6E6B               	movwf	_rtc+5,c
  4243  007868                     l528:
  4244  007868  FFFF               	dw	65535	; assembler added errata NOP
  4245                           
  4246                           ;ds1307.h: 113: if (rtc.sec > 59) rtc.sec = 0;
  4247  00786A  0E3B               	movlw	59
  4248  00786C  6467               	cpfsgt	_rtc+1,c
  4249  00786E  D002               	goto	l529
  4250  007870  0E00               	movlw	0
  4251  007872  6E67               	movwf	_rtc+1,c
  4252  007874                     l529:
  4253  007874  FFFF               	dw	65535	; assembler added errata NOP
  4254                           
  4255                           ;ds1307.h: 114: if (rtc.year > 99) rtc.year = 0;
  4256  007876  0E63               	movlw	99
  4257  007878  646C               	cpfsgt	_rtc+6,c
  4258  00787A  D002               	goto	l530
  4259  00787C  0E00               	movlw	0
  4260  00787E  6E6C               	movwf	_rtc+6,c
  4261  007880                     l530:
  4262  007880  FFFF               	dw	65535	; assembler added errata NOP
  4263  007882  0012               	return		;funcret
  4264  007884  FFFF               	dw	65535	; errata NOP
  4265  007886                     __end_of_validaRTC:
  4266                           	opt stack 0
  4267                           tblptru	equ	0xFF8
  4268                           tblptrh	equ	0xFF7
  4269                           tblptrl	equ	0xFF6
  4270                           tablat	equ	0xFF5
  4271                           postinc0	equ	0xFEE
  4272                           wreg	equ	0xFE8
  4273                           postdec1	equ	0xFE5
  4274                           fsr1l	equ	0xFE1
  4275                           status	equ	0xFD8
  4276                           
  4277 ;; *************** function _setDS1307TimeDate *****************
  4278 ;; Defined at:
  4279 ;;		line 36 in file "ds1307.h"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  4282 ;;		 -> rtc(7), 
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;		None
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  1    wreg      void 
  4287 ;; Registers used:
  4288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4294 ;;      Params:         0       2       0       0       0       0       0
  4295 ;;      Locals:         0       0       0       0       0       0       0
  4296 ;;      Temps:          0       1       0       0       0       0       0
  4297 ;;      Totals:         0       3       0       0       0       0       0
  4298 ;;Total ram usage:        3 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:    8
  4301 ;; This function calls:
  4302 ;;		_DECtoBCD
  4303 ;;		_I2C_Start
  4304 ;;		_I2C_Stop
  4305 ;;		_I2C_Write
  4306 ;; This function is called by:
  4307 ;;		_tela_ajusteRTC
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text4
  4312  002DFA                     __ptext4:
  4313                           	opt stack 0
  4314  002DFA                     _setDS1307TimeDate:
  4315                           	opt stack 0
  4316  002DFA  FFFF               	dw	65535	; assembler added errata NOP
  4317                           
  4318                           ;ds1307.h: 38: I2C_Start();
  4319                           
  4320                           ;incstack = 0
  4321  002DFC  EC30  F038         	call	_I2C_Start	;wreg free
  4322                           
  4323                           ;ds1307.h: 39: I2C_Write(0xD0);
  4324  002E00  0E00               	movlw	0
  4325  002E02  0100               	movlb	0	; () banked
  4326  002E04  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4327  002E06  0ED0               	movlw	208
  4328  002E08  6F8A               	movwf	I2C_Write@d& (0+255),b
  4329  002E0A  EC49  F038         	call	_I2C_Write	;wreg free
  4330                           
  4331                           ;ds1307.h: 40: I2C_Write(0x00);
  4332  002E0E  0E00               	movlw	0
  4333  002E10  0100               	movlb	0	; () banked
  4334  002E12  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4335  002E14  0E00               	movlw	0
  4336  002E16  6F8A               	movwf	I2C_Write@d& (0+255),b
  4337  002E18  EC49  F038         	call	_I2C_Write	;wreg free
  4338                           
  4339                           ;ds1307.h: 41: I2C_Write(DECtoBCD(ptrToUserVal-> sec));
  4340  002E1C  0100               	movlb	0	; () banked
  4341  002E1E  EE20 F001          	lfsr	2,1
  4342  002E22  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4343  002E24  26D9               	addwf	fsr2l,f,c
  4344  002E26  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4345  002E28  22DA               	addwfc	fsr2h,f,c
  4346  002E2A  50DF               	movf	indf2,w,c
  4347  002E2C  EC4B  F03B         	call	_DECtoBCD
  4348  002E30  0100               	movlb	0	; () banked
  4349  002E32  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4350  002E34  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4351  002E36  6F8A               	movwf	I2C_Write@d& (0+255),b
  4352  002E38  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4353  002E3A  EC49  F038         	call	_I2C_Write	;wreg free
  4354                           
  4355                           ;ds1307.h: 42: I2C_Write(DECtoBCD(ptrToUserVal-> min));
  4356  002E3E  0100               	movlb	0	; () banked
  4357  002E40  EE20 F002          	lfsr	2,2
  4358  002E44  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4359  002E46  26D9               	addwf	fsr2l,f,c
  4360  002E48  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4361  002E4A  22DA               	addwfc	fsr2h,f,c
  4362  002E4C  50DF               	movf	indf2,w,c
  4363  002E4E  EC4B  F03B         	call	_DECtoBCD
  4364  002E52  0100               	movlb	0	; () banked
  4365  002E54  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4366  002E56  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4367  002E58  6F8A               	movwf	I2C_Write@d& (0+255),b
  4368  002E5A  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4369  002E5C  EC49  F038         	call	_I2C_Write	;wreg free
  4370                           
  4371                           ;ds1307.h: 43: I2C_Write(DECtoBCD(ptrToUserVal-> hour));
  4372  002E60  0100               	movlb	0	; () banked
  4373  002E62  EE20 F003          	lfsr	2,3
  4374  002E66  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4375  002E68  26D9               	addwf	fsr2l,f,c
  4376  002E6A  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4377  002E6C  22DA               	addwfc	fsr2h,f,c
  4378  002E6E  50DF               	movf	indf2,w,c
  4379  002E70  EC4B  F03B         	call	_DECtoBCD
  4380  002E74  0100               	movlb	0	; () banked
  4381  002E76  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4382  002E78  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4383  002E7A  6F8A               	movwf	I2C_Write@d& (0+255),b
  4384  002E7C  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4385  002E7E  EC49  F038         	call	_I2C_Write	;wreg free
  4386                           
  4387                           ;ds1307.h: 44: I2C_Write(DECtoBCD(ptrToUserVal-> day));
  4388  002E82  C08C  FFD9         	movff	setDS1307TimeDate@ptrToUserVal,fsr2l
  4389  002E86  C08D  FFDA         	movff	setDS1307TimeDate@ptrToUserVal+1,fsr2h
  4390  002E8A  50DF               	movf	indf2,w,c
  4391  002E8C  EC4B  F03B         	call	_DECtoBCD
  4392  002E90  0100               	movlb	0	; () banked
  4393  002E92  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4394  002E94  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4395  002E96  6F8A               	movwf	I2C_Write@d& (0+255),b
  4396  002E98  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4397  002E9A  EC49  F038         	call	_I2C_Write	;wreg free
  4398                           
  4399                           ;ds1307.h: 45: I2C_Write(DECtoBCD(ptrToUserVal-> date));
  4400  002E9E  0100               	movlb	0	; () banked
  4401  002EA0  EE20 F004          	lfsr	2,4
  4402  002EA4  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4403  002EA6  26D9               	addwf	fsr2l,f,c
  4404  002EA8  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4405  002EAA  22DA               	addwfc	fsr2h,f,c
  4406  002EAC  50DF               	movf	indf2,w,c
  4407  002EAE  EC4B  F03B         	call	_DECtoBCD
  4408  002EB2  0100               	movlb	0	; () banked
  4409  002EB4  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4410  002EB6  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4411  002EB8  6F8A               	movwf	I2C_Write@d& (0+255),b
  4412  002EBA  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4413  002EBC  EC49  F038         	call	_I2C_Write	;wreg free
  4414                           
  4415                           ;ds1307.h: 46: I2C_Write(DECtoBCD(ptrToUserVal-> month));
  4416  002EC0  0100               	movlb	0	; () banked
  4417  002EC2  EE20 F005          	lfsr	2,5
  4418  002EC6  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4419  002EC8  26D9               	addwf	fsr2l,f,c
  4420  002ECA  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4421  002ECC  22DA               	addwfc	fsr2h,f,c
  4422  002ECE  50DF               	movf	indf2,w,c
  4423  002ED0  EC4B  F03B         	call	_DECtoBCD
  4424  002ED4  0100               	movlb	0	; () banked
  4425  002ED6  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4426  002ED8  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4427  002EDA  6F8A               	movwf	I2C_Write@d& (0+255),b
  4428  002EDC  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4429  002EDE  EC49  F038         	call	_I2C_Write	;wreg free
  4430                           
  4431                           ;ds1307.h: 47: I2C_Write(DECtoBCD(ptrToUserVal-> year));
  4432  002EE2  0100               	movlb	0	; () banked
  4433  002EE4  EE20 F006          	lfsr	2,6
  4434  002EE8  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4435  002EEA  26D9               	addwf	fsr2l,f,c
  4436  002EEC  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4437  002EEE  22DA               	addwfc	fsr2h,f,c
  4438  002EF0  50DF               	movf	indf2,w,c
  4439  002EF2  EC4B  F03B         	call	_DECtoBCD
  4440  002EF6  0100               	movlb	0	; () banked
  4441  002EF8  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4442  002EFA  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4443  002EFC  6F8A               	movwf	I2C_Write@d& (0+255),b
  4444  002EFE  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4445  002F00  EC49  F038         	call	_I2C_Write	;wreg free
  4446                           
  4447                           ;ds1307.h: 48: I2C_Stop();
  4448  002F04  EC36  F038         	call	_I2C_Stop	;wreg free
  4449  002F08  0012               	return		;funcret
  4450  002F0A  FFFF               	dw	65535	; errata NOP
  4451  002F0C                     __end_of_setDS1307TimeDate:
  4452                           	opt stack 0
  4453                           tblptru	equ	0xFF8
  4454                           tblptrh	equ	0xFF7
  4455                           tblptrl	equ	0xFF6
  4456                           tablat	equ	0xFF5
  4457                           postinc0	equ	0xFEE
  4458                           wreg	equ	0xFE8
  4459                           postdec1	equ	0xFE5
  4460                           fsr1l	equ	0xFE1
  4461                           indf2	equ	0xFDF
  4462                           fsr2h	equ	0xFDA
  4463                           fsr2l	equ	0xFD9
  4464                           status	equ	0xFD8
  4465                           
  4466 ;; *************** function _DECtoBCD *****************
  4467 ;; Defined at:
  4468 ;;		line 25 in file "function.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;  val             1    wreg     unsigned char 
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;  val             1    8[BANK0 ] unsigned char 
  4473 ;;  res             1    9[BANK0 ] unsigned char 
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      unsigned char 
  4476 ;; Registers used:
  4477 ;;		wreg, status,2, status,0, cstack
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4483 ;;      Params:         0       0       0       0       0       0       0
  4484 ;;      Locals:         0       2       0       0       0       0       0
  4485 ;;      Temps:          0       0       0       0       0       0       0
  4486 ;;      Totals:         0       2       0       0       0       0       0
  4487 ;;Total ram usage:        2 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    7
  4490 ;; This function calls:
  4491 ;;		___awdiv
  4492 ;;		___awmod
  4493 ;; This function is called by:
  4494 ;;		_setDS1307TimeDate
  4495 ;;		_setDS1307Time
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           	psect	text5
  4500  007696                     __ptext5:
  4501                           	opt stack 0
  4502  007696                     _DECtoBCD:
  4503                           	opt stack 0
  4504  007696  FFFF               	dw	65535	; assembler added errata NOP
  4505                           
  4506                           ;incstack = 0
  4507                           ;DECtoBCD@val stored from wreg
  4508  007698  0100               	movlb	0	; () banked
  4509  00769A  6F88               	movwf	DECtoBCD@val& (0+255),b
  4510                           
  4511                           ;function.c: 26: char res;
  4512                           ;function.c: 27: res = (val / 10) << 4;
  4513  00769C  C088  F080         	movff	DECtoBCD@val,___awdiv@dividend
  4514  0076A0  0100               	movlb	0	; () banked
  4515  0076A2  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  4516  0076A4  0E00               	movlw	0
  4517  0076A6  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  4518  0076A8  0E0A               	movlw	10
  4519  0076AA  6F82               	movwf	___awdiv@divisor& (0+255),b
  4520  0076AC  ECA4  F01D         	call	___awdiv	;wreg free
  4521  0076B0  0100               	movlb	0	; () banked
  4522  0076B2  3980               	swapf	?___awdiv& (0+255),w,b
  4523  0076B4  0BF0               	andlw	240
  4524  0076B6  6F89               	movwf	DECtoBCD@res& (0+255),b
  4525                           
  4526                           ;function.c: 28: res = res | (val % 10);
  4527  0076B8  C088  F080         	movff	DECtoBCD@val,___awmod@dividend
  4528  0076BC  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  4529  0076BE  0E00               	movlw	0
  4530  0076C0  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4531  0076C2  0E0A               	movlw	10
  4532  0076C4  6F82               	movwf	___awmod@divisor& (0+255),b
  4533  0076C6  ECCA  F01E         	call	___awmod	;wreg free
  4534  0076CA  0100               	movlb	0	; () banked
  4535  0076CC  5180               	movf	?___awmod& (0+255),w,b
  4536  0076CE  1189               	iorwf	DECtoBCD@res& (0+255),w,b
  4537  0076D0  6F89               	movwf	DECtoBCD@res& (0+255),b
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;function.c: 29: return res;
  4541  0076D2  5189               	movf	DECtoBCD@res& (0+255),w,b
  4542                           
  4543                           ; BSR set to: 0
  4544                           
  4545                           ; BSR set to: 0
  4546  0076D4  0012               	return		;funcret
  4547  0076D6  FFFF               	dw	65535	; errata NOP
  4548  0076D8                     __end_of_DECtoBCD:
  4549                           	opt stack 0
  4550                           tblptru	equ	0xFF8
  4551                           tblptrh	equ	0xFF7
  4552                           tblptrl	equ	0xFF6
  4553                           tablat	equ	0xFF5
  4554                           postinc0	equ	0xFEE
  4555                           wreg	equ	0xFE8
  4556                           postdec1	equ	0xFE5
  4557                           fsr1l	equ	0xFE1
  4558                           indf2	equ	0xFDF
  4559                           fsr2h	equ	0xFDA
  4560                           fsr2l	equ	0xFD9
  4561                           status	equ	0xFD8
  4562                           
  4563 ;; *************** function _telaTeste *****************
  4564 ;; Defined at:
  4565 ;;		line 10 in file "tela_TESTE.h"
  4566 ;; Parameters:    Size  Location     Type
  4567 ;;		None
  4568 ;; Auto vars:     Size  Location     Type
  4569 ;;  sinal           2   72[BANK0 ] int 
  4570 ;; Return value:  Size  Location     Type
  4571 ;;                  1    wreg      void 
  4572 ;; Registers used:
  4573 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4574 ;; Tracked objects:
  4575 ;;		On entry : 0/0
  4576 ;;		On exit  : 0/0
  4577 ;;		Unchanged: 0/0
  4578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4579 ;;      Params:         0       0       0       0       0       0       0
  4580 ;;      Locals:         0       2       0       0       0       0       0
  4581 ;;      Temps:          0       0       0       0       0       0       0
  4582 ;;      Totals:         0       2       0       0       0       0       0
  4583 ;;Total ram usage:        2 bytes
  4584 ;; Hardware stack levels used:    1
  4585 ;; Hardware stack levels required when called:   10
  4586 ;; This function calls:
  4587 ;;		_aguardaBuffer
  4588 ;;		_atoi
  4589 ;;		_delay
  4590 ;;		_getSerial
  4591 ;;		_limparBuffer
  4592 ;;		_printf
  4593 ;;		_sprintf
  4594 ;; This function is called by:
  4595 ;;		_main
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           	psect	text6
  4600  00396E                     __ptext6:
  4601                           	opt stack 0
  4602  00396E                     _telaTeste:
  4603                           	opt stack 0
  4604  00396E  FFFF               	dw	65535	; assembler added errata NOP
  4605                           
  4606                           ;tela_TESTE.h: 11: sprintf(line1, "TELA TESTE");
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;incstack = 0
  4610  003970  0EA3               	movlw	low _line1
  4611  003972  0100               	movlb	0	; () banked
  4612  003974  6FA1               	movwf	sprintf@wh& (0+255),b
  4613  003976  0E01               	movlw	high _line1
  4614  003978  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4615  00397A  0E74               	movlw	low STR_84
  4616  00397C  6FA3               	movwf	sprintf@f& (0+255),b
  4617  00397E  0E7F               	movlw	high STR_84
  4618  003980  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4619  003982  ECD4  F03B         	call	_sprintf	;wreg free
  4620                           
  4621                           ;tela_TESTE.h: 12: delay(4000);
  4622  003986  0E0F               	movlw	15
  4623  003988  0100               	movlb	0	; () banked
  4624  00398A  6F81               	movwf	(delay@x+1)& (0+255),b
  4625  00398C  0EA0               	movlw	160
  4626  00398E  6F80               	movwf	delay@x& (0+255),b
  4627  003990  ECCD  F039         	call	_delay	;wreg free
  4628                           
  4629                           ;tela_TESTE.h: 13: printf("AT+CSQ\r\n");
  4630  003994  0E9E               	movlw	low STR_85
  4631  003996  0100               	movlb	0	; () banked
  4632  003998  6FA1               	movwf	printf@f& (0+255),b
  4633  00399A  0E7F               	movlw	high STR_85
  4634  00399C  6FA2               	movwf	(printf@f+1)& (0+255),b
  4635  00399E  ECEC  F03A         	call	_printf	;wreg free
  4636                           
  4637                           ;tela_TESTE.h: 14: delay(100);
  4638  0039A2  0E00               	movlw	0
  4639  0039A4  0100               	movlb	0	; () banked
  4640  0039A6  6F81               	movwf	(delay@x+1)& (0+255),b
  4641  0039A8  0E64               	movlw	100
  4642  0039AA  6F80               	movwf	delay@x& (0+255),b
  4643  0039AC  ECCD  F039         	call	_delay	;wreg free
  4644                           
  4645                           ;tela_TESTE.h: 16: if (aguardaBuffer("+CSQ: ")) {
  4646  0039B0  0EBD               	movlw	low STR_86
  4647  0039B2  0100               	movlb	0	; () banked
  4648  0039B4  6F93               	movwf	aguardaBuffer@str& (0+255),b
  4649  0039B6  0E7F               	movlw	high STR_86
  4650  0039B8  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  4651  0039BA  EC68  F039         	call	_aguardaBuffer	;wreg free
  4652  0039BE  0900               	iorlw	0
  4653  0039C0  B4D8               	btfsc	status,2,c
  4654  0039C2  D024               	goto	l807
  4655                           
  4656                           ;tela_TESTE.h: 17: int sinal = atoi(getSerial("+CSQ: ", ','));
  4657  0039C4  0EBD               	movlw	low STR_86
  4658  0039C6  0100               	movlb	0	; () banked
  4659  0039C8  6FB7               	movwf	getSerial@str& (0+255),b
  4660  0039CA  0E7F               	movlw	high STR_86
  4661  0039CC  6FB8               	movwf	(getSerial@str+1)& (0+255),b
  4662  0039CE  0E2C               	movlw	44
  4663  0039D0  6FB9               	movwf	getSerial@end& (0+255),b
  4664  0039D2  ECE1  F015         	call	_getSerial	;wreg free
  4665  0039D6  C0B7  F0C1         	movff	?_getSerial,atoi@s
  4666  0039DA  C0B8  F0C2         	movff	?_getSerial+1,atoi@s+1
  4667  0039DE  EC8B  F018         	call	_atoi	;wreg free
  4668  0039E2  C0C1  F0C8         	movff	?_atoi,telaTeste@sinal
  4669  0039E6  C0C2  F0C9         	movff	?_atoi+1,telaTeste@sinal+1
  4670                           
  4671                           ;tela_TESTE.h: 25: sprintf(line3, "Sinal: %d", sinal);
  4672  0039EA  0E79               	movlw	low _line3
  4673  0039EC  0100               	movlb	0	; () banked
  4674  0039EE  6FA1               	movwf	sprintf@wh& (0+255),b
  4675  0039F0  0E01               	movlw	high _line3
  4676  0039F2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4677  0039F4  0E94               	movlw	low STR_88
  4678  0039F6  6FA3               	movwf	sprintf@f& (0+255),b
  4679  0039F8  0E7F               	movlw	high STR_88
  4680  0039FA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4681  0039FC  C0C8  F0A5         	movff	telaTeste@sinal,?_sprintf+4
  4682  003A00  C0C9  F0A6         	movff	telaTeste@sinal+1,?_sprintf+5
  4683  003A04  ECD4  F03B         	call	_sprintf	;wreg free
  4684                           
  4685                           ;tela_TESTE.h: 26: limparBuffer();
  4686  003A08  ECC4  F038         	call	_limparBuffer	;wreg free
  4687  003A0C                     l807:
  4688  003A0C  FFFF               	dw	65535	; assembler added errata NOP
  4689  003A0E  0012               	return		;funcret
  4690  003A10  FFFF               	dw	65535	; errata NOP
  4691  003A12                     __end_of_telaTeste:
  4692                           	opt stack 0
  4693                           tblptru	equ	0xFF8
  4694                           tblptrh	equ	0xFF7
  4695                           tblptrl	equ	0xFF6
  4696                           tablat	equ	0xFF5
  4697                           postinc0	equ	0xFEE
  4698                           wreg	equ	0xFE8
  4699                           postdec1	equ	0xFE5
  4700                           fsr1l	equ	0xFE1
  4701                           indf2	equ	0xFDF
  4702                           fsr2h	equ	0xFDA
  4703                           fsr2l	equ	0xFD9
  4704                           status	equ	0xFD8
  4705                           
  4706 ;; *************** function _printf *****************
  4707 ;; Defined at:
  4708 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  f               2   33[BANK0 ] PTR const unsigned char 
  4711 ;;		 -> STR_85(9), STR_20(7), STR_19(11), STR_12(104), 
  4712 ;;		 -> STR_11(63), STR_9(18), STR_7(12), STR_6(7), 
  4713 ;;		 -> STR_4(5), 
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  pb              4   55[BANK0 ] struct __prbuf
  4716 ;;  ap              2   53[BANK0 ] PTR void [1]
  4717 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  2   33[BANK0 ] int 
  4720 ;; Registers used:
  4721 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4727 ;;      Params:         0      20       0       0       0       0       0
  4728 ;;      Locals:         0       6       0       0       0       0       0
  4729 ;;      Temps:          0       0       0       0       0       0       0
  4730 ;;      Totals:         0      26       0       0       0       0       0
  4731 ;;Total ram usage:       26 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    8
  4734 ;; This function calls:
  4735 ;;		__doprnt
  4736 ;; This function is called by:
  4737 ;;		_telaTeste
  4738 ;;		_enviaSMS
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           	psect	text7
  4743  0075D8                     __ptext7:
  4744                           	opt stack 0
  4745  0075D8                     _printf:
  4746                           	opt stack 0
  4747  0075D8  FFFF               	dw	65535	; assembler added errata NOP
  4748                           
  4749                           ;incstack = 0
  4750  0075DA  0E00               	movlw	0
  4751  0075DC  0100               	movlb	0	; () banked
  4752  0075DE  6FB7               	movwf	printf@pb& (0+255),b
  4753  0075E0  0E00               	movlw	0
  4754  0075E2  6FB8               	movwf	(printf@pb+1)& (0+255),b
  4755  0075E4  0E26               	movlw	low _putch
  4756  0075E6  6FB9               	movwf	(printf@pb+2)& (0+255),b
  4757  0075E8  0E71               	movlw	high _putch
  4758  0075EA  6FBA               	movwf	(printf@pb+3)& (0+255),b
  4759  0075EC  0EA3               	movlw	low (?_printf+2)
  4760  0075EE  6FB5               	movwf	printf@ap& (0+255),b
  4761  0075F0  0E00               	movlw	high (?_printf+2)
  4762  0075F2  6FB6               	movwf	(printf@ap+1)& (0+255),b
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;	Return value of _printf is never used
  4766  0075F4  0EB7               	movlw	low printf@pb
  4767  0075F6  6F8C               	movwf	__doprnt@pb& (0+255),b
  4768  0075F8  0E00               	movlw	high printf@pb
  4769  0075FA  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  4770  0075FC  C0A1  F08E         	movff	printf@f,__doprnt@f
  4771  007600  C0A2  F08F         	movff	printf@f+1,__doprnt@f+1
  4772  007604  0EB5               	movlw	low printf@ap
  4773  007606  6F90               	movwf	__doprnt@ap& (0+255),b
  4774  007608  0E00               	movlw	high printf@ap
  4775  00760A  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  4776  00760C  EC78  F000         	call	__doprnt	;wreg free
  4777  007610  0012               	return		;funcret
  4778  007612  FFFF               	dw	65535	; errata NOP
  4779  007614                     __end_of_printf:
  4780                           	opt stack 0
  4781                           tblptru	equ	0xFF8
  4782                           tblptrh	equ	0xFF7
  4783                           tblptrl	equ	0xFF6
  4784                           tablat	equ	0xFF5
  4785                           postinc0	equ	0xFEE
  4786                           wreg	equ	0xFE8
  4787                           postdec1	equ	0xFE5
  4788                           fsr1l	equ	0xFE1
  4789                           indf2	equ	0xFDF
  4790                           fsr2h	equ	0xFDA
  4791                           fsr2l	equ	0xFD9
  4792                           status	equ	0xFD8
  4793                           
  4794 ;; *************** function _limparBuffer *****************
  4795 ;; Defined at:
  4796 ;;		line 23 in file "serial.h"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;		None
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;		None
  4801 ;; Return value:  Size  Location     Type
  4802 ;;                  1    wreg      void 
  4803 ;; Registers used:
  4804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4805 ;; Tracked objects:
  4806 ;;		On entry : 0/0
  4807 ;;		On exit  : 0/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4810 ;;      Params:         0       0       0       0       0       0       0
  4811 ;;      Locals:         0       0       0       0       0       0       0
  4812 ;;      Temps:          0       0       0       0       0       0       0
  4813 ;;      Totals:         0       0       0       0       0       0       0
  4814 ;;Total ram usage:        0 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    7
  4817 ;; This function calls:
  4818 ;;		_memset
  4819 ;; This function is called by:
  4820 ;;		_telaTeste
  4821 ;; This function uses a non-reentrant model
  4822 ;;
  4823                           
  4824                           	psect	text8
  4825  007188                     __ptext8:
  4826                           	opt stack 0
  4827  007188                     _limparBuffer:
  4828                           	opt stack 0
  4829  007188  FFFF               	dw	65535	; assembler added errata NOP
  4830                           
  4831                           ;serial.h: 24: memset(bufferSerial, 0, sizeof (bufferSerial));
  4832                           
  4833                           ;incstack = 0
  4834  00718A  0E14               	movlw	low _bufferSerial
  4835  00718C  0100               	movlb	0	; () banked
  4836  00718E  6F80               	movwf	memset@p1& (0+255),b
  4837  007190  0E01               	movlw	high _bufferSerial
  4838  007192  6F81               	movwf	(memset@p1+1)& (0+255),b
  4839  007194  0E00               	movlw	0
  4840  007196  6F83               	movwf	(memset@c+1)& (0+255),b
  4841  007198  0E00               	movlw	0
  4842  00719A  6F82               	movwf	memset@c& (0+255),b
  4843  00719C  0E00               	movlw	0
  4844  00719E  6F85               	movwf	(memset@n+1)& (0+255),b
  4845  0071A0  0E50               	movlw	80
  4846  0071A2  6F84               	movwf	memset@n& (0+255),b
  4847  0071A4  EC75  F03A         	call	_memset	;wreg free
  4848  0071A8  0012               	return		;funcret
  4849  0071AA  FFFF               	dw	65535	; errata NOP
  4850  0071AC                     __end_of_limparBuffer:
  4851                           	opt stack 0
  4852                           tblptru	equ	0xFF8
  4853                           tblptrh	equ	0xFF7
  4854                           tblptrl	equ	0xFF6
  4855                           tablat	equ	0xFF5
  4856                           postinc0	equ	0xFEE
  4857                           wreg	equ	0xFE8
  4858                           postdec1	equ	0xFE5
  4859                           fsr1l	equ	0xFE1
  4860                           indf2	equ	0xFDF
  4861                           fsr2h	equ	0xFDA
  4862                           fsr2l	equ	0xFD9
  4863                           status	equ	0xFD8
  4864                           
  4865 ;; *************** function _getSerial *****************
  4866 ;; Defined at:
  4867 ;;		line 31 in file "serial.h"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  str             2   55[BANK0 ] PTR unsigned char 
  4870 ;;		 -> STR_87(7), 
  4871 ;;  end             1   57[BANK0 ] unsigned char 
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;  i               1   62[BANK0 ] unsigned char 
  4874 ;;  ret             2   63[BANK0 ] PTR unsigned char 
  4875 ;;		 -> NULL(0), bufferSerial(80), 
  4876 ;;  length          2   60[BANK0 ] unsigned int 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  2   55[BANK0 ] PTR unsigned char 
  4879 ;; Registers used:
  4880 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4886 ;;      Params:         0       3       0       0       0       0       0
  4887 ;;      Locals:         0       5       0       0       0       0       0
  4888 ;;      Temps:          0       2       0       0       0       0       0
  4889 ;;      Totals:         0      10       0       0       0       0       0
  4890 ;;Total ram usage:       10 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; Hardware stack levels required when called:    9
  4893 ;; This function calls:
  4894 ;;		_memset
  4895 ;;		_sprintf
  4896 ;;		_strlen
  4897 ;;		_strstr
  4898 ;; This function is called by:
  4899 ;;		_telaTeste
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           	psect	text9
  4904  002BC2                     __ptext9:
  4905                           	opt stack 0
  4906  002BC2                     _getSerial:
  4907                           	opt stack 0
  4908  002BC2  FFFF               	dw	65535	; assembler added errata NOP
  4909                           
  4910                           ;serial.h: 32: memset(bufferAUX, 0, sizeof (bufferAUX));
  4911                           
  4912                           ;incstack = 0
  4913  002BC4  0EB8               	movlw	low _bufferAUX
  4914  002BC6  0100               	movlb	0	; () banked
  4915  002BC8  6F80               	movwf	memset@p1& (0+255),b
  4916  002BCA  0E01               	movlw	high _bufferAUX
  4917  002BCC  6F81               	movwf	(memset@p1+1)& (0+255),b
  4918  002BCE  0E00               	movlw	0
  4919  002BD0  6F83               	movwf	(memset@c+1)& (0+255),b
  4920  002BD2  0E00               	movlw	0
  4921  002BD4  6F82               	movwf	memset@c& (0+255),b
  4922  002BD6  0E00               	movlw	0
  4923  002BD8  6F85               	movwf	(memset@n+1)& (0+255),b
  4924  002BDA  0E14               	movlw	20
  4925  002BDC  6F84               	movwf	memset@n& (0+255),b
  4926  002BDE  EC75  F03A         	call	_memset	;wreg free
  4927                           
  4928                           ;serial.h: 33: unsigned int length = strlen(str);
  4929  002BE2  C0B7  F080         	movff	getSerial@str,strlen@s
  4930  002BE6  C0B8  F081         	movff	getSerial@str+1,strlen@s+1
  4931  002BEA  EC49  F03D         	call	_strlen	;wreg free
  4932  002BEE  C080  F0BC         	movff	?_strlen,getSerial@length
  4933  002BF2  C081  F0BD         	movff	?_strlen+1,getSerial@length+1
  4934                           
  4935                           ;serial.h: 34: char* ret;
  4936                           ;serial.h: 35: ret = strstr(bufferSerial, str);
  4937  002BF6  0E14               	movlw	low _bufferSerial
  4938  002BF8  0100               	movlb	0	; () banked
  4939  002BFA  6F8F               	movwf	strstr@s1& (0+255),b
  4940  002BFC  0E01               	movlw	high _bufferSerial
  4941  002BFE  6F90               	movwf	(strstr@s1+1)& (0+255),b
  4942  002C00  C0B7  F091         	movff	getSerial@str,strstr@s2
  4943  002C04  C0B8  F092         	movff	getSerial@str+1,strstr@s2+1
  4944  002C08  ECF1  F01D         	call	_strstr	;wreg free
  4945  002C0C  C08F  F0BF         	movff	?_strstr,getSerial@ret
  4946  002C10  C090  F0C0         	movff	?_strstr+1,getSerial@ret+1
  4947                           
  4948                           ;serial.h: 36: if (ret) {
  4949  002C14  0100               	movlb	0	; () banked
  4950  002C16  51BF               	movf	getSerial@ret& (0+255),w,b
  4951  002C18  11C0               	iorwf	(getSerial@ret+1)& (0+255),w,b
  4952  002C1A  B4D8               	btfsc	status,2,c
  4953  002C1C  D058               	goto	u17660
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;serial.h: 37: unsigned char i = 0;
  4957  002C1E  0E00               	movlw	0
  4958  002C20  6FBE               	movwf	getSerial@i& (0+255),b
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;serial.h: 38: for (i = length; i < strlen(ret); i++) {
  4962  002C22  C0BC  F0BE         	movff	getSerial@length,getSerial@i
  4963  002C26  D042               	goto	l281
  4964  002C28  FFFF               	dw	65535	; assembler added errata NOP
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;serial.h: 39: if (ret[i] == end) {
  4968                           
  4969                           ; BSR set to: 0
  4970  002C2A  51BE               	movf	getSerial@i& (0+255),w,b
  4971  002C2C  0D01               	mullw	1
  4972  002C2E  50F3               	movf	prodl,w,c
  4973  002C30  25BF               	addwf	getSerial@ret& (0+255),w,b
  4974  002C32  6ED9               	movwf	fsr2l,c
  4975  002C34  50F4               	movf	prodh,w,c
  4976  002C36  21C0               	addwfc	(getSerial@ret+1)& (0+255),w,b
  4977  002C38  6EDA               	movwf	fsr2h,c
  4978  002C3A  51B9               	movf	getSerial@end& (0+255),w,b
  4979  002C3C  18DE               	xorwf	postinc2,w,c
  4980  002C3E  A4D8               	btfss	status,2,c
  4981  002C40  D017               	goto	l283
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;serial.h: 40: sprintf(bufferAUX, "%s%c", bufferAUX, '\0');
  4985  002C42  0EB8               	movlw	low _bufferAUX
  4986  002C44  6FA1               	movwf	sprintf@wh& (0+255),b
  4987  002C46  0E01               	movlw	high _bufferAUX
  4988  002C48  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4989  002C4A  0EF3               	movlw	low STR_1
  4990  002C4C  6FA3               	movwf	sprintf@f& (0+255),b
  4991  002C4E  0E7F               	movlw	high STR_1
  4992  002C50  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4993  002C52  0EB8               	movlw	low _bufferAUX
  4994  002C54  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  4995  002C56  0E01               	movlw	high _bufferAUX
  4996  002C58  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  4997  002C5A  0E00               	movlw	0
  4998  002C5C  6FA8               	movwf	(?_sprintf+7)& (0+255),b
  4999  002C5E  0E00               	movlw	0
  5000  002C60  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  5001  002C62  ECD4  F03B         	call	_sprintf	;wreg free
  5002                           
  5003                           ;serial.h: 41: return bufferAUX;
  5004  002C66  0EB8               	movlw	low _bufferAUX
  5005  002C68  0100               	movlb	0	; () banked
  5006  002C6A  6FB7               	movwf	?_getSerial& (0+255),b
  5007  002C6C  0E01               	movlw	high _bufferAUX
  5008  002C6E  D033               	goto	L7
  5009  002C70                     l283:
  5010  002C70  FFFF               	dw	65535	; assembler added errata NOP
  5011                           
  5012                           ; BSR set to: 0
  5013                           ;serial.h: 42: }
  5014                           ;serial.h: 43: sprintf(bufferAUX, "%s%c", bufferAUX, ret[i]);
  5015                           
  5016                           ; BSR set to: 0
  5017  002C72  0EB8               	movlw	low _bufferAUX
  5018  002C74  6FA1               	movwf	sprintf@wh& (0+255),b
  5019  002C76  0E01               	movlw	high _bufferAUX
  5020  002C78  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5021  002C7A  0EF3               	movlw	low STR_1
  5022  002C7C  6FA3               	movwf	sprintf@f& (0+255),b
  5023  002C7E  0E7F               	movlw	high STR_1
  5024  002C80  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5025  002C82  0EB8               	movlw	low _bufferAUX
  5026  002C84  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  5027  002C86  0E01               	movlw	high _bufferAUX
  5028  002C88  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  5029  002C8A  51BE               	movf	getSerial@i& (0+255),w,b
  5030  002C8C  0D01               	mullw	1
  5031  002C8E  50F3               	movf	prodl,w,c
  5032  002C90  25BF               	addwf	getSerial@ret& (0+255),w,b
  5033  002C92  6ED9               	movwf	fsr2l,c
  5034  002C94  50F4               	movf	prodh,w,c
  5035  002C96  21C0               	addwfc	(getSerial@ret+1)& (0+255),w,b
  5036  002C98  6EDA               	movwf	fsr2h,c
  5037  002C9A  50DF               	movf	indf2,w,c
  5038  002C9C  6FBA               	movwf	??_getSerial& (0+255),b
  5039  002C9E  51BA               	movf	??_getSerial& (0+255),w,b
  5040  002CA0  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  5041  002CA2  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  5042  002CA4  ECD4  F03B         	call	_sprintf	;wreg free
  5043  002CA8  0100               	movlb	0	; () banked
  5044  002CAA  2BBE               	incf	getSerial@i& (0+255),f,b
  5045  002CAC                     l281:
  5046  002CAC  FFFF               	dw	65535	; assembler added errata NOP
  5047                           
  5048                           ; BSR set to: 0
  5049                           
  5050                           ; BSR set to: 0
  5051  002CAE  C0BF  F080         	movff	getSerial@ret,strlen@s
  5052  002CB2  C0C0  F081         	movff	getSerial@ret+1,strlen@s+1
  5053  002CB6  EC49  F03D         	call	_strlen	;wreg free
  5054  002CBA  0100               	movlb	0	; () banked
  5055  002CBC  51BE               	movf	getSerial@i& (0+255),w,b
  5056  002CBE  6FBA               	movwf	??_getSerial& (0+255),b
  5057  002CC0  6BBB               	clrf	(??_getSerial+1)& (0+255),b
  5058  002CC2  5180               	movf	?_strlen& (0+255),w,b
  5059  002CC4  5DBA               	subwf	??_getSerial& (0+255),w,b
  5060  002CC6  5181               	movf	(?_strlen+1)& (0+255),w,b
  5061  002CC8  59BB               	subwfb	(??_getSerial+1)& (0+255),w,b
  5062  002CCA  A0D8               	btfss	status,0,c
  5063  002CCC  D7AD               	goto	l282
  5064  002CCE                     u17660:
  5065  002CCE  FFFF               	dw	65535	; assembler added errata NOP
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;serial.h: 44: }
  5069                           ;serial.h: 45: }
  5070                           ;serial.h: 46: return 0;
  5071                           
  5072                           ; BSR set to: 0
  5073                           
  5074                           ; BSR set to: 0
  5075  002CD0  0E00               	movlw	0
  5076  002CD2  6FB7               	movwf	?_getSerial& (0+255),b
  5077  002CD4  0E00               	movlw	0
  5078  002CD6                     L7:
  5079  002CD6  FFFF               	dw	65535	; assembler added errata NOP
  5080  002CD8  6FB8               	movwf	(?_getSerial+1)& (0+255),b
  5081                           
  5082                           ; BSR set to: 0
  5083                           
  5084                           ; BSR set to: 0
  5085  002CDA  0012               	return		;funcret
  5086  002CDC  FFFF               	dw	65535	; errata NOP
  5087  002CDE                     __end_of_getSerial:
  5088                           	opt stack 0
  5089                           tblptru	equ	0xFF8
  5090                           tblptrh	equ	0xFF7
  5091                           tblptrl	equ	0xFF6
  5092                           tablat	equ	0xFF5
  5093                           prodh	equ	0xFF4
  5094                           prodl	equ	0xFF3
  5095                           postinc0	equ	0xFEE
  5096                           wreg	equ	0xFE8
  5097                           postdec1	equ	0xFE5
  5098                           fsr1l	equ	0xFE1
  5099                           indf2	equ	0xFDF
  5100                           postinc2	equ	0xFDE
  5101                           fsr2h	equ	0xFDA
  5102                           fsr2l	equ	0xFD9
  5103                           status	equ	0xFD8
  5104                           
  5105 ;; *************** function _memset *****************
  5106 ;; Defined at:
  5107 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  5108 ;; Parameters:    Size  Location     Type
  5109 ;;  p1              2    0[BANK0 ] PTR void 
  5110 ;;		 -> bufferAUX(20), bufferSerial(80), 
  5111 ;;  c               2    2[BANK0 ] int 
  5112 ;;  n               2    4[BANK0 ] unsigned int 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;  p               2    6[BANK0 ] PTR unsigned char 
  5115 ;;		 -> bufferAUX(20), bufferSerial(80), 
  5116 ;; Return value:  Size  Location     Type
  5117 ;;                  2    0[BANK0 ] PTR void 
  5118 ;; Registers used:
  5119 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 0/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5125 ;;      Params:         0       6       0       0       0       0       0
  5126 ;;      Locals:         0       2       0       0       0       0       0
  5127 ;;      Temps:          0       0       0       0       0       0       0
  5128 ;;      Totals:         0       8       0       0       0       0       0
  5129 ;;Total ram usage:        8 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:    6
  5132 ;; This function calls:
  5133 ;;		Nothing
  5134 ;; This function is called by:
  5135 ;;		_limparBuffer
  5136 ;;		_getSerial
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           	psect	text10
  5141  0074EA                     __ptext10:
  5142                           	opt stack 0
  5143  0074EA                     _memset:
  5144                           	opt stack 0
  5145  0074EA  FFFF               	dw	65535	; assembler added errata NOP
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;incstack = 0
  5149  0074EC  C080  F086         	movff	memset@p1,memset@p
  5150  0074F0  C081  F087         	movff	memset@p1+1,memset@p+1
  5151  0074F4  D00A               	goto	l1471
  5152  0074F6  FFFF               	dw	65535	; assembler added errata NOP
  5153  0074F8                     l5181:
  5154  0074F8  C086  FFD9         	movff	memset@p,fsr2l
  5155  0074FC  C087  FFDA         	movff	memset@p+1,fsr2h
  5156  007500  C082  FFDF         	movff	memset@c,indf2
  5157  007504  0100               	movlb	0	; () banked
  5158  007506  4B86               	infsnz	memset@p& (0+255),f,b
  5159  007508  2B87               	incf	(memset@p+1)& (0+255),f,b
  5160  00750A                     l1471:
  5161  00750A  FFFF               	dw	65535	; assembler added errata NOP
  5162                           
  5163                           ; BSR set to: 0
  5164  00750C  0100               	movlb	0	; () banked
  5165  00750E  0784               	decf	memset@n& (0+255),f,b
  5166  007510  A0D8               	btfss	status,0,c
  5167  007512  0785               	decf	(memset@n+1)& (0+255),f,b
  5168  007514  2984               	incf	memset@n& (0+255),w,b
  5169  007516  E1F0               	bnz	l5181
  5170  007518  2985               	incf	(memset@n+1)& (0+255),w,b
  5171  00751A  B4D8               	btfsc	status,2,c
  5172                           
  5173                           ; BSR set to: 0
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;	Return value of _memset is never used
  5177  00751C  0012               	return		;funcret
  5178  00751E  FFFF               	dw	65535	; assembler added errata NOP
  5179  007520  D7EA               	goto	l1472
  5180  007522  FFFF               	dw	65535	; errata NOP
  5181  007524                     __end_of_memset:
  5182                           	opt stack 0
  5183                           tblptru	equ	0xFF8
  5184                           tblptrh	equ	0xFF7
  5185                           tblptrl	equ	0xFF6
  5186                           tablat	equ	0xFF5
  5187                           prodh	equ	0xFF4
  5188                           prodl	equ	0xFF3
  5189                           postinc0	equ	0xFEE
  5190                           wreg	equ	0xFE8
  5191                           postdec1	equ	0xFE5
  5192                           fsr1l	equ	0xFE1
  5193                           indf2	equ	0xFDF
  5194                           postinc2	equ	0xFDE
  5195                           fsr2h	equ	0xFDA
  5196                           fsr2l	equ	0xFD9
  5197                           status	equ	0xFD8
  5198                           
  5199 ;; *************** function _atoi *****************
  5200 ;; Defined at:
  5201 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;  s               2   65[BANK0 ] PTR const unsigned char 
  5204 ;;		 -> bufferAUX(20), NULL(0), 
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;  a               2   70[BANK0 ] int 
  5207 ;;  sign            1   69[BANK0 ] unsigned char 
  5208 ;; Return value:  Size  Location     Type
  5209 ;;                  2   65[BANK0 ] int 
  5210 ;; Registers used:
  5211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5212 ;; Tracked objects:
  5213 ;;		On entry : 0/0
  5214 ;;		On exit  : 0/0
  5215 ;;		Unchanged: 0/0
  5216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5217 ;;      Params:         0       2       0       0       0       0       0
  5218 ;;      Locals:         0       3       0       0       0       0       0
  5219 ;;      Temps:          0       2       0       0       0       0       0
  5220 ;;      Totals:         0       7       0       0       0       0       0
  5221 ;;Total ram usage:        7 bytes
  5222 ;; Hardware stack levels used:    1
  5223 ;; Hardware stack levels required when called:    7
  5224 ;; This function calls:
  5225 ;;		___wmul
  5226 ;;		_isdigit
  5227 ;; This function is called by:
  5228 ;;		_telaTeste
  5229 ;; This function uses a non-reentrant model
  5230 ;;
  5231                           
  5232                           	psect	text11
  5233  003116                     __ptext11:
  5234                           	opt stack 0
  5235  003116                     _atoi:
  5236                           	opt stack 0
  5237  003116  FFFF               	dw	65535	; assembler added errata NOP
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;incstack = 0
  5241  003118  D004               	goto	l1187
  5242  00311A  FFFF               	dw	65535	; assembler added errata NOP
  5243  00311C  0100               	movlb	0	; () banked
  5244  00311E  4BC1               	infsnz	atoi@s& (0+255),f,b
  5245  003120  2BC2               	incf	(atoi@s+1)& (0+255),f,b
  5246  003122                     l1187:
  5247  003122  FFFF               	dw	65535	; assembler added errata NOP
  5248                           
  5249                           ; BSR set to: 0
  5250  003124  C0C1  FFD9         	movff	atoi@s,fsr2l
  5251  003128  C0C2  FFDA         	movff	atoi@s+1,fsr2h
  5252  00312C  0E20               	movlw	32
  5253  00312E  18DE               	xorwf	postinc2,w,c
  5254  003130  B4D8               	btfsc	status,2,c
  5255  003132  D7F3               	goto	l1188
  5256  003134  C0C1  FFD9         	movff	atoi@s,fsr2l
  5257  003138  C0C2  FFDA         	movff	atoi@s+1,fsr2h
  5258  00313C  0E09               	movlw	9
  5259  00313E  18DE               	xorwf	postinc2,w,c
  5260  003140  B4D8               	btfsc	status,2,c
  5261  003142  D7EB               	goto	l1188
  5262  003144  0E00               	movlw	0
  5263  003146  0100               	movlb	0	; () banked
  5264  003148  6FC7               	movwf	(atoi@a+1)& (0+255),b
  5265  00314A  0E00               	movlw	0
  5266  00314C  6FC6               	movwf	atoi@a& (0+255),b
  5267  00314E  0E00               	movlw	0
  5268  003150  6FC5               	movwf	atoi@sign& (0+255),b
  5269                           
  5270                           ; BSR set to: 0
  5271  003152  C0C1  FFD9         	movff	atoi@s,fsr2l
  5272  003156  C0C2  FFDA         	movff	atoi@s+1,fsr2h
  5273  00315A  0E2D               	movlw	45
  5274  00315C  18DE               	xorwf	postinc2,w,c
  5275  00315E  A4D8               	btfss	status,2,c
  5276  003160  D002               	goto	l1190
  5277                           
  5278                           ; BSR set to: 0
  5279  003162  2BC5               	incf	atoi@sign& (0+255),f,b
  5280  003164  D028               	goto	l5939
  5281  003166                     l1190:
  5282  003166  FFFF               	dw	65535	; assembler added errata NOP
  5283                           
  5284                           ; BSR set to: 0
  5285                           
  5286                           ; BSR set to: 0
  5287  003168  C0C1  FFD9         	movff	atoi@s,fsr2l
  5288  00316C  C0C2  FFDA         	movff	atoi@s+1,fsr2h
  5289  003170  0E2B               	movlw	43
  5290  003172  18DE               	xorwf	postinc2,w,c
  5291  003174  A4D8               	btfss	status,2,c
  5292  003176  D022               	goto	l1193
  5293  003178  D01E               	goto	l5939
  5294  00317A  FFFF               	dw	65535	; assembler added errata NOP
  5295                           
  5296                           ; BSR set to: 0
  5297  00317C  C0C6  F080         	movff	atoi@a,___wmul@multiplier
  5298  003180  C0C7  F081         	movff	atoi@a+1,___wmul@multiplier+1
  5299  003184  0E00               	movlw	0
  5300  003186  0100               	movlb	0	; () banked
  5301  003188  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5302  00318A  0E0A               	movlw	10
  5303  00318C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5304  00318E  EC52  F039         	call	___wmul	;wreg free
  5305  003192  C0C1  FFD9         	movff	atoi@s,fsr2l
  5306  003196  C0C2  FFDA         	movff	atoi@s+1,fsr2h
  5307  00319A  50DF               	movf	indf2,w,c
  5308  00319C  0100               	movlb	0	; () banked
  5309  00319E  6FC3               	movwf	??_atoi& (0+255),b
  5310  0031A0  6BC4               	clrf	(??_atoi+1)& (0+255),b
  5311  0031A2  5180               	movf	?___wmul& (0+255),w,b
  5312  0031A4  27C3               	addwf	??_atoi& (0+255),f,b
  5313  0031A6  5181               	movf	(?___wmul+1)& (0+255),w,b
  5314  0031A8  23C4               	addwfc	(??_atoi+1)& (0+255),f,b
  5315  0031AA  0ED0               	movlw	208
  5316  0031AC  25C3               	addwf	??_atoi& (0+255),w,b
  5317  0031AE  6FC6               	movwf	atoi@a& (0+255),b
  5318  0031B0  0EFF               	movlw	255
  5319  0031B2  21C4               	addwfc	(??_atoi+1)& (0+255),w,b
  5320  0031B4  6FC7               	movwf	(atoi@a+1)& (0+255),b
  5321  0031B6                     l5939:
  5322  0031B6  FFFF               	dw	65535	; assembler added errata NOP
  5323                           
  5324                           ; BSR set to: 0
  5325  0031B8  4BC1               	infsnz	atoi@s& (0+255),f,b
  5326  0031BA  2BC2               	incf	(atoi@s+1)& (0+255),f,b
  5327  0031BC                     l1193:
  5328  0031BC  FFFF               	dw	65535	; assembler added errata NOP
  5329                           
  5330                           ; BSR set to: 0
  5331                           
  5332                           ; BSR set to: 0
  5333  0031BE  C0C1  FFD9         	movff	atoi@s,fsr2l
  5334  0031C2  C0C2  FFDA         	movff	atoi@s+1,fsr2h
  5335  0031C6  50DF               	movf	indf2,w,c
  5336  0031C8  ECFE  F038         	call	_isdigit
  5337  0031CC  B0D8               	btfsc	status,0,c
  5338  0031CE  D7D5               	goto	l1194
  5339  0031D0  0100               	movlb	0	; () banked
  5340  0031D2  51C5               	movf	atoi@sign& (0+255),w,b
  5341  0031D4  B4D8               	btfsc	status,2,c
  5342  0031D6  D00D               	goto	l1196
  5343                           
  5344                           ; BSR set to: 0
  5345  0031D8  C0C6  F0C3         	movff	atoi@a,??_atoi
  5346  0031DC  C0C7  F0C4         	movff	atoi@a+1,??_atoi+1
  5347  0031E0  1FC3               	comf	??_atoi& (0+255),f,b
  5348  0031E2  1FC4               	comf	(??_atoi+1)& (0+255),f,b
  5349  0031E4  4BC3               	infsnz	??_atoi& (0+255),f,b
  5350  0031E6  2BC4               	incf	(??_atoi+1)& (0+255),f,b
  5351  0031E8  C0C3  F0C1         	movff	??_atoi,?_atoi
  5352  0031EC  C0C4  F0C2         	movff	??_atoi+1,?_atoi+1
  5353  0031F0  D005               	goto	l1197
  5354  0031F2                     l1196:
  5355  0031F2  FFFF               	dw	65535	; assembler added errata NOP
  5356                           
  5357                           ; BSR set to: 0
  5358  0031F4  C0C6  F0C1         	movff	atoi@a,?_atoi
  5359  0031F8  C0C7  F0C2         	movff	atoi@a+1,?_atoi+1
  5360  0031FC                     l1197:
  5361  0031FC  FFFF               	dw	65535	; assembler added errata NOP
  5362                           
  5363                           ; BSR set to: 0
  5364  0031FE  0012               	return		;funcret
  5365  003200  FFFF               	dw	65535	; errata NOP
  5366  003202                     __end_of_atoi:
  5367                           	opt stack 0
  5368                           tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           prodh	equ	0xFF4
  5373                           prodl	equ	0xFF3
  5374                           postinc0	equ	0xFEE
  5375                           wreg	equ	0xFE8
  5376                           postdec1	equ	0xFE5
  5377                           fsr1l	equ	0xFE1
  5378                           indf2	equ	0xFDF
  5379                           postinc2	equ	0xFDE
  5380                           fsr2h	equ	0xFDA
  5381                           fsr2l	equ	0xFD9
  5382                           status	equ	0xFD8
  5383                           
  5384 ;; *************** function _aguardaBuffer *****************
  5385 ;; Defined at:
  5386 ;;		line 19 in file "serial.h"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  str             2   19[BANK0 ] PTR unsigned char 
  5389 ;;		 -> STR_86(7), 
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;		None
  5392 ;; Return value:  Size  Location     Type
  5393 ;;                  1    wreg      unsigned char 
  5394 ;; Registers used:
  5395 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5396 ;; Tracked objects:
  5397 ;;		On entry : 0/0
  5398 ;;		On exit  : 0/0
  5399 ;;		Unchanged: 0/0
  5400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5401 ;;      Params:         0       2       0       0       0       0       0
  5402 ;;      Locals:         0       0       0       0       0       0       0
  5403 ;;      Temps:          0       0       0       0       0       0       0
  5404 ;;      Totals:         0       2       0       0       0       0       0
  5405 ;;Total ram usage:        2 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; Hardware stack levels required when called:    8
  5408 ;; This function calls:
  5409 ;;		_strstr
  5410 ;; This function is called by:
  5411 ;;		_telaTeste
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           	psect	text12
  5416  0072D0                     __ptext12:
  5417                           	opt stack 0
  5418  0072D0                     _aguardaBuffer:
  5419                           	opt stack 0
  5420  0072D0  FFFF               	dw	65535	; assembler added errata NOP
  5421                           
  5422                           ;serial.h: 20: return strstr(bufferSerial, str) != (0);
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;incstack = 0
  5426  0072D2  0E14               	movlw	low _bufferSerial
  5427  0072D4  0100               	movlb	0	; () banked
  5428  0072D6  6F8F               	movwf	strstr@s1& (0+255),b
  5429  0072D8  0E01               	movlw	high _bufferSerial
  5430  0072DA  6F90               	movwf	(strstr@s1+1)& (0+255),b
  5431  0072DC  C093  F091         	movff	aguardaBuffer@str,strstr@s2
  5432  0072E0  C094  F092         	movff	aguardaBuffer@str+1,strstr@s2+1
  5433  0072E4  ECF1  F01D         	call	_strstr	;wreg free
  5434  0072E8  0100               	movlb	0	; () banked
  5435  0072EA  518F               	movf	?_strstr& (0+255),w,b
  5436  0072EC  1190               	iorwf	(?_strstr+1)& (0+255),w,b
  5437  0072EE  B4D8               	btfsc	status,2,c
  5438  0072F0  D002               	goto	u6410
  5439  0072F2  0E01               	movlw	1
  5440  0072F4  D002               	goto	u6420
  5441  0072F6                     u6410:
  5442  0072F6  FFFF               	dw	65535	; assembler added errata NOP
  5443  0072F8  0E00               	movlw	0
  5444  0072FA                     u6420:
  5445  0072FA  FFFF               	dw	65535	; assembler added errata NOP
  5446                           
  5447                           ; BSR set to: 0
  5448                           
  5449                           ; BSR set to: 0
  5450  0072FC  0012               	return		;funcret
  5451  0072FE  FFFF               	dw	65535	; errata NOP
  5452  007300                     __end_of_aguardaBuffer:
  5453                           	opt stack 0
  5454                           tblptru	equ	0xFF8
  5455                           tblptrh	equ	0xFF7
  5456                           tblptrl	equ	0xFF6
  5457                           tablat	equ	0xFF5
  5458                           prodh	equ	0xFF4
  5459                           prodl	equ	0xFF3
  5460                           postinc0	equ	0xFEE
  5461                           wreg	equ	0xFE8
  5462                           postdec1	equ	0xFE5
  5463                           fsr1l	equ	0xFE1
  5464                           indf2	equ	0xFDF
  5465                           postinc2	equ	0xFDE
  5466                           fsr2h	equ	0xFDA
  5467                           fsr2l	equ	0xFD9
  5468                           status	equ	0xFD8
  5469                           
  5470 ;; *************** function _strstr *****************
  5471 ;; Defined at:
  5472 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strstr.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;  s1              2   15[BANK0 ] PTR const unsigned char 
  5475 ;;		 -> NULL(0), bufferSerial(80), 
  5476 ;;  s2              2   17[BANK0 ] PTR const unsigned char 
  5477 ;;		 -> STR_87(7), STR_86(7), 
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;		None
  5480 ;; Return value:  Size  Location     Type
  5481 ;;                  2   15[BANK0 ] PTR unsigned char 
  5482 ;; Registers used:
  5483 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5489 ;;      Params:         0       4       0       0       0       0       0
  5490 ;;      Locals:         0       0       0       0       0       0       0
  5491 ;;      Temps:          0       0       0       0       0       0       0
  5492 ;;      Totals:         0       4       0       0       0       0       0
  5493 ;;Total ram usage:        4 bytes
  5494 ;; Hardware stack levels used:    1
  5495 ;; Hardware stack levels required when called:    7
  5496 ;; This function calls:
  5497 ;;		_strchr
  5498 ;;		_strlen
  5499 ;;		_strncmp
  5500 ;; This function is called by:
  5501 ;;		_aguardaBuffer
  5502 ;;		_getSerial
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text13
  5507  003BE2                     __ptext13:
  5508                           	opt stack 0
  5509  003BE2                     _strstr:
  5510                           	opt stack 0
  5511  003BE2  FFFF               	dw	65535	; assembler added errata NOP
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;incstack = 0
  5515  003BE4  D035               	goto	l1625
  5516  003BE6  FFFF               	dw	65535	; assembler added errata NOP
  5517  003BE8  C08F  F086         	movff	strstr@s1,strncmp@s1
  5518  003BEC  C090  F087         	movff	strstr@s1+1,strncmp@s1+1
  5519  003BF0  C091  F088         	movff	strstr@s2,strncmp@s2
  5520  003BF4  C092  F089         	movff	strstr@s2+1,strncmp@s2+1
  5521  003BF8  C091  F080         	movff	strstr@s2,strlen@s
  5522  003BFC  C092  F081         	movff	strstr@s2+1,strlen@s+1
  5523  003C00  EC49  F03D         	call	_strlen	;wreg free
  5524  003C04  C080  F08A         	movff	?_strlen,strncmp@len
  5525  003C08  C081  F08B         	movff	?_strlen+1,strncmp@len+1
  5526  003C0C  EC57  F01D         	call	_strncmp	;wreg free
  5527  003C10  0100               	movlb	0	; () banked
  5528  003C12  5186               	movf	?_strncmp& (0+255),w,b
  5529  003C14  1187               	iorwf	(?_strncmp+1)& (0+255),w,b
  5530  003C16  A4D8               	btfss	status,2,c
  5531  003C18  D005               	goto	l1627
  5532                           
  5533                           ; BSR set to: 0
  5534  003C1A  C08F  F08F         	movff	strstr@s1,?_strstr
  5535  003C1E  C090  F090         	movff	strstr@s1+1,?_strstr+1
  5536                           
  5537                           ; BSR set to: 0
  5538  003C22  D028               	goto	l5177
  5539  003C24                     l1627:
  5540  003C24  FFFF               	dw	65535	; assembler added errata NOP
  5541                           
  5542                           ; BSR set to: 0
  5543                           
  5544                           ; BSR set to: 0
  5545  003C26  0E01               	movlw	1
  5546  003C28  258F               	addwf	strstr@s1& (0+255),w,b
  5547  003C2A  6F80               	movwf	strchr@ptr& (0+255),b
  5548  003C2C  0E00               	movlw	0
  5549  003C2E  2190               	addwfc	(strstr@s1+1)& (0+255),w,b
  5550  003C30  6F81               	movwf	(strchr@ptr+1)& (0+255),b
  5551  003C32  C091  FFF6         	movff	strstr@s2,tblptrl
  5552  003C36  C092  FFF7         	movff	strstr@s2+1,tblptrh
  5553  003C3A                     	if	0	;tblptru may be non-zero
  5554  003C3A                     	endif
  5555  003C3A                     	if	0	;tblptru may be non-zero
  5556  003C3A                     	endif
  5557  003C3A  0008               	tblrd		*
  5558  003C3C  FFFF               	dw	65535	; errata NOP
  5559  003C3E  50F5               	movf	tablat,w,c
  5560  003C40  6F82               	movwf	strchr@chr& (0+255),b
  5561  003C42  6B83               	clrf	(strchr@chr+1)& (0+255),b
  5562  003C44  EC0A  F03B         	call	_strchr	;wreg free
  5563  003C48  C080  F08F         	movff	?_strchr,strstr@s1
  5564  003C4C  C081  F090         	movff	?_strchr+1,strstr@s1+1
  5565  003C50                     l1625:
  5566  003C50  FFFF               	dw	65535	; assembler added errata NOP
  5567  003C52  0100               	movlb	0	; () banked
  5568  003C54  518F               	movf	strstr@s1& (0+255),w,b
  5569  003C56  1190               	iorwf	(strstr@s1+1)& (0+255),w,b
  5570  003C58  B4D8               	btfsc	status,2,c
  5571  003C5A  D007               	goto	u5600
  5572                           
  5573                           ; BSR set to: 0
  5574  003C5C  C08F  FFD9         	movff	strstr@s1,fsr2l
  5575  003C60  C090  FFDA         	movff	strstr@s1+1,fsr2h
  5576  003C64  50DF               	movf	indf2,w,c
  5577  003C66  A4D8               	btfss	status,2,c
  5578  003C68  D7BE               	goto	l1626
  5579  003C6A                     u5600:
  5580  003C6A  FFFF               	dw	65535	; assembler added errata NOP
  5581                           
  5582                           ; BSR set to: 0
  5583                           
  5584                           ; BSR set to: 0
  5585                           
  5586                           ; BSR set to: 0
  5587  003C6C  0E00               	movlw	0
  5588  003C6E  6F8F               	movwf	?_strstr& (0+255),b
  5589  003C70  0E00               	movlw	0
  5590  003C72  6F90               	movwf	(?_strstr+1)& (0+255),b
  5591  003C74                     l5177:
  5592  003C74  FFFF               	dw	65535	; assembler added errata NOP
  5593                           
  5594                           ; BSR set to: 0
  5595                           
  5596                           ; BSR set to: 0
  5597  003C76  0012               	return		;funcret
  5598  003C78  FFFF               	dw	65535	; errata NOP
  5599  003C7A                     __end_of_strstr:
  5600                           	opt stack 0
  5601                           tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           prodh	equ	0xFF4
  5606                           prodl	equ	0xFF3
  5607                           postinc0	equ	0xFEE
  5608                           wreg	equ	0xFE8
  5609                           postdec1	equ	0xFE5
  5610                           fsr1l	equ	0xFE1
  5611                           indf2	equ	0xFDF
  5612                           postinc2	equ	0xFDE
  5613                           fsr2h	equ	0xFDA
  5614                           fsr2l	equ	0xFD9
  5615                           status	equ	0xFD8
  5616                           
  5617 ;; *************** function _strncmp *****************
  5618 ;; Defined at:
  5619 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncmp.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
  5622 ;;		 -> NULL(0), bufferSerial(80), 
  5623 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
  5624 ;;		 -> STR_87(7), STR_86(7), 
  5625 ;;  len             2   10[BANK0 ] unsigned int 
  5626 ;; Auto vars:     Size  Location     Type
  5627 ;;		None
  5628 ;; Return value:  Size  Location     Type
  5629 ;;                  2    6[BANK0 ] int 
  5630 ;; Registers used:
  5631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5632 ;; Tracked objects:
  5633 ;;		On entry : 0/0
  5634 ;;		On exit  : 0/0
  5635 ;;		Unchanged: 0/0
  5636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5637 ;;      Params:         0       6       0       0       0       0       0
  5638 ;;      Locals:         0       0       0       0       0       0       0
  5639 ;;      Temps:          0       3       0       0       0       0       0
  5640 ;;      Totals:         0       9       0       0       0       0       0
  5641 ;;Total ram usage:        9 bytes
  5642 ;; Hardware stack levels used:    1
  5643 ;; Hardware stack levels required when called:    6
  5644 ;; This function calls:
  5645 ;;		Nothing
  5646 ;; This function is called by:
  5647 ;;		_strstr
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           	psect	text14
  5652  003AAE                     __ptext14:
  5653                           	opt stack 0
  5654  003AAE                     _strncmp:
  5655                           	opt stack 0
  5656  003AAE  FFFF               	dw	65535	; assembler added errata NOP
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;incstack = 0
  5660  003AB0  D03A               	goto	l1659
  5661  003AB2  FFFF               	dw	65535	; assembler added errata NOP
  5662  003AB4                     l5055:
  5663  003AB4  C086  FFD9         	movff	strncmp@s1,fsr2l
  5664  003AB8  C087  FFDA         	movff	strncmp@s1+1,fsr2h
  5665  003ABC  50DF               	movf	indf2,w,c
  5666  003ABE  B4D8               	btfsc	status,2,c
  5667  003AC0  D011               	goto	u5440
  5668  003AC2  C086  FFD9         	movff	strncmp@s1,fsr2l
  5669  003AC6  C087  FFDA         	movff	strncmp@s1+1,fsr2h
  5670  003ACA  50DF               	movf	indf2,w,c
  5671  003ACC  0100               	movlb	0	; () banked
  5672  003ACE  6F8C               	movwf	??_strncmp& (0+255),b
  5673  003AD0  C088  FFF6         	movff	strncmp@s2,tblptrl
  5674  003AD4  C089  FFF7         	movff	strncmp@s2+1,tblptrh
  5675  003AD8                     	if	0	;tblptru may be non-zero
  5676  003AD8                     	endif
  5677  003AD8                     	if	0	;tblptru may be non-zero
  5678  003AD8                     	endif
  5679  003AD8  0008               	tblrd		*
  5680  003ADA  FFFF               	dw	65535	; errata NOP
  5681  003ADC  50F5               	movf	tablat,w,c
  5682  003ADE  198C               	xorwf	??_strncmp& (0+255),w,b
  5683  003AE0  B4D8               	btfsc	status,2,c
  5684  003AE2  D01C               	goto	l1661
  5685  003AE4                     u5440:
  5686  003AE4  FFFF               	dw	65535	; assembler added errata NOP
  5687                           
  5688                           ; BSR set to: 0
  5689  003AE6  C088  FFF6         	movff	strncmp@s2,tblptrl
  5690  003AEA  C089  FFF7         	movff	strncmp@s2+1,tblptrh
  5691  003AEE                     	if	0	;tblptru may be non-zero
  5692  003AEE                     	endif
  5693  003AEE                     	if	0	;tblptru may be non-zero
  5694  003AEE                     	endif
  5695  003AEE  0008               	tblrd		*
  5696  003AF0  FFFF               	dw	65535	; errata NOP
  5697  003AF2  50F5               	movf	tablat,w,c
  5698  003AF4  0100               	movlb	0	; () banked
  5699  003AF6  6F8C               	movwf	??_strncmp& (0+255),b
  5700  003AF8  6B8D               	clrf	(??_strncmp+1)& (0+255),b
  5701  003AFA  1F8C               	comf	??_strncmp& (0+255),f,b
  5702  003AFC  1F8D               	comf	(??_strncmp+1)& (0+255),f,b
  5703  003AFE  4B8C               	infsnz	??_strncmp& (0+255),f,b
  5704  003B00  2B8D               	incf	(??_strncmp+1)& (0+255),f,b
  5705  003B02  C086  FFD9         	movff	strncmp@s1,fsr2l
  5706  003B06  C087  FFDA         	movff	strncmp@s1+1,fsr2h
  5707  003B0A  50DF               	movf	indf2,w,c
  5708  003B0C  6F8E               	movwf	(??_strncmp+2)& (0+255),b
  5709  003B0E  518E               	movf	(??_strncmp+2)& (0+255),w,b
  5710  003B10  258C               	addwf	??_strncmp& (0+255),w,b
  5711  003B12  6F86               	movwf	?_strncmp& (0+255),b
  5712  003B14  0E00               	movlw	0
  5713  003B16  218D               	addwfc	(??_strncmp+1)& (0+255),w,b
  5714  003B18  6F87               	movwf	(?_strncmp+1)& (0+255),b
  5715                           
  5716                           ; BSR set to: 0
  5717  003B1A  D013               	goto	l5069
  5718  003B1C                     l1661:
  5719  003B1C  FFFF               	dw	65535	; assembler added errata NOP
  5720                           
  5721                           ; BSR set to: 0
  5722                           
  5723                           ; BSR set to: 0
  5724  003B1E  4B86               	infsnz	strncmp@s1& (0+255),f,b
  5725  003B20  2B87               	incf	(strncmp@s1+1)& (0+255),f,b
  5726  003B22  4B88               	infsnz	strncmp@s2& (0+255),f,b
  5727  003B24  2B89               	incf	(strncmp@s2+1)& (0+255),f,b
  5728  003B26                     l1659:
  5729  003B26  FFFF               	dw	65535	; assembler added errata NOP
  5730                           
  5731                           ; BSR set to: 0
  5732  003B28  0100               	movlb	0	; () banked
  5733  003B2A  078A               	decf	strncmp@len& (0+255),f,b
  5734  003B2C  A0D8               	btfss	status,0,c
  5735  003B2E  078B               	decf	(strncmp@len+1)& (0+255),f,b
  5736  003B30  298A               	incf	strncmp@len& (0+255),w,b
  5737  003B32  E1C0               	bnz	l5055
  5738  003B34  298B               	incf	(strncmp@len+1)& (0+255),w,b
  5739  003B36  A4D8               	btfss	status,2,c
  5740  003B38  D7BC               	goto	l1660
  5741                           
  5742                           ; BSR set to: 0
  5743                           
  5744                           ; BSR set to: 0
  5745  003B3A  0E00               	movlw	0
  5746  003B3C  6F87               	movwf	(?_strncmp+1)& (0+255),b
  5747  003B3E  0E00               	movlw	0
  5748  003B40  6F86               	movwf	?_strncmp& (0+255),b
  5749  003B42                     l5069:
  5750  003B42  FFFF               	dw	65535	; assembler added errata NOP
  5751                           
  5752                           ; BSR set to: 0
  5753                           
  5754                           ; BSR set to: 0
  5755  003B44  0012               	return		;funcret
  5756  003B46  FFFF               	dw	65535	; errata NOP
  5757  003B48                     __end_of_strncmp:
  5758                           	opt stack 0
  5759                           tblptru	equ	0xFF8
  5760                           tblptrh	equ	0xFF7
  5761                           tblptrl	equ	0xFF6
  5762                           tablat	equ	0xFF5
  5763                           prodh	equ	0xFF4
  5764                           prodl	equ	0xFF3
  5765                           postinc0	equ	0xFEE
  5766                           wreg	equ	0xFE8
  5767                           postdec1	equ	0xFE5
  5768                           fsr1l	equ	0xFE1
  5769                           indf2	equ	0xFDF
  5770                           postinc2	equ	0xFDE
  5771                           fsr2h	equ	0xFDA
  5772                           fsr2l	equ	0xFD9
  5773                           status	equ	0xFD8
  5774                           
  5775 ;; *************** function _strlen *****************
  5776 ;; Defined at:
  5777 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  5778 ;; Parameters:    Size  Location     Type
  5779 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  5780 ;;		 -> STR_87(7), STR_86(7), NULL(0), bufferSerial(80), 
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  5783 ;;		 -> STR_87(7), STR_86(7), NULL(0), bufferSerial(80), 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  2    0[BANK0 ] unsigned int 
  5786 ;; Registers used:
  5787 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5793 ;;      Params:         0       2       0       0       0       0       0
  5794 ;;      Locals:         0       2       0       0       0       0       0
  5795 ;;      Temps:          0       2       0       0       0       0       0
  5796 ;;      Totals:         0       6       0       0       0       0       0
  5797 ;;Total ram usage:        6 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:    6
  5800 ;; This function calls:
  5801 ;;		Nothing
  5802 ;; This function is called by:
  5803 ;;		_getSerial
  5804 ;;		_strstr
  5805 ;; This function uses a non-reentrant model
  5806 ;;
  5807                           
  5808                           	psect	text15
  5809  007A92                     __ptext15:
  5810                           	opt stack 0
  5811  007A92                     _strlen:
  5812                           	opt stack 0
  5813  007A92  FFFF               	dw	65535	; assembler added errata NOP
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;incstack = 0
  5817  007A94  C080  F084         	movff	strlen@s,strlen@cp
  5818  007A98  C081  F085         	movff	strlen@s+1,strlen@cp+1
  5819  007A9C  D004               	goto	l1613
  5820  007A9E  FFFF               	dw	65535	; assembler added errata NOP
  5821  007AA0  0100               	movlb	0	; () banked
  5822  007AA2  4B84               	infsnz	strlen@cp& (0+255),f,b
  5823  007AA4  2B85               	incf	(strlen@cp+1)& (0+255),f,b
  5824  007AA6                     l1613:
  5825  007AA6  FFFF               	dw	65535	; assembler added errata NOP
  5826                           
  5827                           ; BSR set to: 0
  5828  007AA8  C084  FFF6         	movff	strlen@cp,tblptrl
  5829  007AAC  C085  FFF7         	movff	strlen@cp+1,tblptrh
  5830  007AB0  6AF8               	clrf	tblptru,c
  5831  007AB2  0E05               	movlw	(high __ramtop+-1)
  5832  007AB4  64F7               	cpfsgt	tblptrh,c
  5833  007AB6  D004               	bra	u5257
  5834  007AB8  0008               	tblrd		*
  5835  007ABA  FFFF               	dw	65535	; errata NOP
  5836  007ABC  50F5               	movf	tablat,w,c
  5837  007ABE  D005               	bra	u5250
  5838  007AC0                     u5257:
  5839  007AC0  CFF6 FFE9          	movff	tblptrl,fsr0l
  5840  007AC4  CFF7 FFEA          	movff	tblptrh,fsr0h
  5841  007AC8  50EF               	movf	indf0,w,c
  5842  007ACA                     u5250:
  5843  007ACA  0900               	iorlw	0
  5844  007ACC  A4D8               	btfss	status,2,c
  5845  007ACE  D7E7               	goto	l1614
  5846  007AD0  C080  F082         	movff	strlen@s,??_strlen
  5847  007AD4  C081  F083         	movff	strlen@s+1,??_strlen+1
  5848  007AD8  0100               	movlb	0	; () banked
  5849  007ADA  1F82               	comf	??_strlen& (0+255),f,b
  5850  007ADC  1F83               	comf	(??_strlen+1)& (0+255),f,b
  5851  007ADE  4B82               	infsnz	??_strlen& (0+255),f,b
  5852  007AE0  2B83               	incf	(??_strlen+1)& (0+255),f,b
  5853  007AE2  5184               	movf	strlen@cp& (0+255),w,b
  5854  007AE4  2582               	addwf	??_strlen& (0+255),w,b
  5855  007AE6  6F80               	movwf	?_strlen& (0+255),b
  5856  007AE8  5185               	movf	(strlen@cp+1)& (0+255),w,b
  5857  007AEA  2183               	addwfc	(??_strlen+1)& (0+255),w,b
  5858  007AEC  6F81               	movwf	(?_strlen+1)& (0+255),b
  5859                           
  5860                           ; BSR set to: 0
  5861                           
  5862                           ; BSR set to: 0
  5863  007AEE  0012               	return		;funcret
  5864  007AF0  FFFF               	dw	65535	; errata NOP
  5865  007AF2                     __end_of_strlen:
  5866                           	opt stack 0
  5867                           tblptru	equ	0xFF8
  5868                           tblptrh	equ	0xFF7
  5869                           tblptrl	equ	0xFF6
  5870                           tablat	equ	0xFF5
  5871                           prodh	equ	0xFF4
  5872                           prodl	equ	0xFF3
  5873                           indf0	equ	0xFEF
  5874                           postinc0	equ	0xFEE
  5875                           fsr0h	equ	0xFEA
  5876                           fsr0l	equ	0xFE9
  5877                           wreg	equ	0xFE8
  5878                           postdec1	equ	0xFE5
  5879                           fsr1l	equ	0xFE1
  5880                           indf2	equ	0xFDF
  5881                           postinc2	equ	0xFDE
  5882                           fsr2h	equ	0xFDA
  5883                           fsr2l	equ	0xFD9
  5884                           status	equ	0xFD8
  5885                           
  5886 ;; *************** function _strchr *****************
  5887 ;; Defined at:
  5888 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
  5891 ;;		 -> NULL(0), bufferSerial(80), 
  5892 ;;  chr             2    2[BANK0 ] int 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;		None
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  2    0[BANK0 ] PTR unsigned char 
  5897 ;; Registers used:
  5898 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5904 ;;      Params:         0       4       0       0       0       0       0
  5905 ;;      Locals:         0       0       0       0       0       0       0
  5906 ;;      Temps:          0       1       0       0       0       0       0
  5907 ;;      Totals:         0       5       0       0       0       0       0
  5908 ;;Total ram usage:        5 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    6
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_strstr
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text16
  5919  007614                     __ptext16:
  5920                           	opt stack 0
  5921  007614                     _strchr:
  5922                           	opt stack 0
  5923  007614  FFFF               	dw	65535	; assembler added errata NOP
  5924                           
  5925                           ; BSR set to: 0
  5926                           ;incstack = 0
  5927  007616  C080  FFD9         	movff	strchr@ptr,fsr2l
  5928  00761A  C081  FFDA         	movff	strchr@ptr+1,fsr2h
  5929  00761E  0100               	movlb	0	; () banked
  5930  007620  5182               	movf	strchr@chr& (0+255),w,b
  5931  007622  18DE               	xorwf	postinc2,w,c
  5932  007624  A4D8               	btfss	status,2,c
  5933  007626  D005               	goto	l1654
  5934                           
  5935                           ; BSR set to: 0
  5936  007628  C080  F080         	movff	strchr@ptr,?_strchr
  5937  00762C  C081  F081         	movff	strchr@ptr+1,?_strchr+1
  5938                           
  5939                           ; BSR set to: 0
  5940  007630  D00E               	goto	l5081
  5941  007632                     l1654:
  5942  007632  FFFF               	dw	65535	; assembler added errata NOP
  5943                           
  5944                           ; BSR set to: 0
  5945                           
  5946                           ; BSR set to: 0
  5947  007634  C080  FFD9         	movff	strchr@ptr,fsr2l
  5948  007638  C081  FFDA         	movff	strchr@ptr+1,fsr2h
  5949  00763C  4B80               	infsnz	strchr@ptr& (0+255),f,b
  5950  00763E  2B81               	incf	(strchr@ptr+1)& (0+255),f,b
  5951  007640  50DF               	movf	indf2,w,c
  5952  007642  A4D8               	btfss	status,2,c
  5953  007644  D7E7               	goto	_strchr
  5954                           
  5955                           ; BSR set to: 0
  5956                           
  5957                           ; BSR set to: 0
  5958  007646  0E00               	movlw	0
  5959  007648  6F80               	movwf	?_strchr& (0+255),b
  5960  00764A  0E00               	movlw	0
  5961  00764C  6F81               	movwf	(?_strchr+1)& (0+255),b
  5962  00764E                     l5081:
  5963  00764E  FFFF               	dw	65535	; assembler added errata NOP
  5964                           
  5965                           ; BSR set to: 0
  5966                           
  5967                           ; BSR set to: 0
  5968  007650  0012               	return		;funcret
  5969  007652  FFFF               	dw	65535	; errata NOP
  5970  007654                     __end_of_strchr:
  5971                           	opt stack 0
  5972                           tblptru	equ	0xFF8
  5973                           tblptrh	equ	0xFF7
  5974                           tblptrl	equ	0xFF6
  5975                           tablat	equ	0xFF5
  5976                           prodh	equ	0xFF4
  5977                           prodl	equ	0xFF3
  5978                           indf0	equ	0xFEF
  5979                           postinc0	equ	0xFEE
  5980                           fsr0h	equ	0xFEA
  5981                           fsr0l	equ	0xFE9
  5982                           wreg	equ	0xFE8
  5983                           postdec1	equ	0xFE5
  5984                           fsr1l	equ	0xFE1
  5985                           indf2	equ	0xFDF
  5986                           postinc2	equ	0xFDE
  5987                           fsr2h	equ	0xFDA
  5988                           fsr2l	equ	0xFD9
  5989                           status	equ	0xFD8
  5990                           
  5991 ;; *************** function _setShiftREG *****************
  5992 ;; Defined at:
  5993 ;;		line 37 in file "shift595.h"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;  i               1    1[BANK0 ] unsigned char 
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  1    wreg      void 
  6000 ;; Registers used:
  6001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6007 ;;      Params:         0       0       0       0       0       0       0
  6008 ;;      Locals:         0       1       0       0       0       0       0
  6009 ;;      Temps:          0       1       0       0       0       0       0
  6010 ;;      Totals:         0       2       0       0       0       0       0
  6011 ;;Total ram usage:        2 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    6
  6014 ;; This function calls:
  6015 ;;		Nothing
  6016 ;; This function is called by:
  6017 ;;		_main
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           	psect	text17
  6022  0077F0                     __ptext17:
  6023                           	opt stack 0
  6024  0077F0                     _setShiftREG:
  6025                           	opt stack 0
  6026  0077F0  FFFF               	dw	65535	; assembler added errata NOP
  6027                           
  6028                           ;shift595.h: 38: unsigned char i = 0;
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;incstack = 0
  6032  0077F2  0E00               	movlw	0
  6033  0077F4  0100               	movlb	0	; () banked
  6034  0077F6  6F81               	movwf	setShiftREG@i& (0+255),b
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;shift595.h: 39: PORTEbits.RE1 = 0;
  6038  0077F8  9284               	bcf	3972,1,c	;volatile
  6039                           
  6040                           ;shift595.h: 40: for (i = 0; i < 8; i++) {
  6041  0077FA  0E00               	movlw	0
  6042  0077FC  6F81               	movwf	setShiftREG@i& (0+255),b
  6043  0077FE  D015               	goto	l6343
  6044  007800                     l376:
  6045  007800  FFFF               	dw	65535	; assembler added errata NOP
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;shift595.h: 41: PORTEbits.RE0 = 0;
  6049  007802  9084               	bcf	3972,0,c	;volatile
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;shift595.h: 42: PORTEbits.RE2 = shift[i];
  6053  007804  5181               	movf	setShiftREG@i& (0+255),w,b
  6054  007806  0D01               	mullw	1
  6055  007808  0E44               	movlw	low _shift
  6056  00780A  24F3               	addwf	prodl,w,c
  6057  00780C  6ED9               	movwf	fsr2l,c
  6058  00780E  0E00               	movlw	high _shift
  6059  007810  20F4               	addwfc	prodh,w,c
  6060  007812  6EDA               	movwf	fsr2h,c
  6061  007814  50DF               	movf	indf2,w,c
  6062  007816  6F80               	movwf	??_setShiftREG& (0+255),b
  6063  007818  4780               	rlncf	??_setShiftREG& (0+255),f,b
  6064  00781A  4780               	rlncf	??_setShiftREG& (0+255),f,b
  6065  00781C  5084               	movf	3972,w,c	;volatile
  6066  00781E  1980               	xorwf	??_setShiftREG& (0+255),w,b
  6067  007820  0BFB               	andlw	-5
  6068  007822  1980               	xorwf	??_setShiftREG& (0+255),w,b
  6069  007824  6E84               	movwf	3972,c	;volatile
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;shift595.h: 43: PORTEbits.RE0 = 1;
  6073  007826  8084               	bsf	3972,0,c	;volatile
  6074                           
  6075                           ; BSR set to: 0
  6076  007828  2B81               	incf	setShiftREG@i& (0+255),f,b
  6077  00782A                     l6343:
  6078  00782A  FFFF               	dw	65535	; assembler added errata NOP
  6079                           
  6080                           ; BSR set to: 0
  6081  00782C  0E07               	movlw	7
  6082  00782E  6581               	cpfsgt	setShiftREG@i& (0+255),b
  6083  007830  D7E7               	goto	l376
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;shift595.h: 44: }
  6087                           ;shift595.h: 45: PORTEbits.RE1 = 1;
  6088  007832  8284               	bsf	3972,1,c	;volatile
  6089                           
  6090                           ; BSR set to: 0
  6091  007834  0012               	return		;funcret
  6092  007836  FFFF               	dw	65535	; errata NOP
  6093  007838                     __end_of_setShiftREG:
  6094                           	opt stack 0
  6095                           tblptru	equ	0xFF8
  6096                           tblptrh	equ	0xFF7
  6097                           tblptrl	equ	0xFF6
  6098                           tablat	equ	0xFF5
  6099                           prodh	equ	0xFF4
  6100                           prodl	equ	0xFF3
  6101                           indf0	equ	0xFEF
  6102                           postinc0	equ	0xFEE
  6103                           fsr0h	equ	0xFEA
  6104                           fsr0l	equ	0xFE9
  6105                           wreg	equ	0xFE8
  6106                           postdec1	equ	0xFE5
  6107                           fsr1l	equ	0xFE1
  6108                           indf2	equ	0xFDF
  6109                           postinc2	equ	0xFDE
  6110                           fsr2h	equ	0xFDA
  6111                           fsr2l	equ	0xFD9
  6112                           status	equ	0xFD8
  6113                           
  6114 ;; *************** function _lerParametros *****************
  6115 ;; Defined at:
  6116 ;;		line 8 in file "util.h"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;		None
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;  i               1   21[BANK0 ] unsigned char 
  6121 ;;  verifica_mem    1   20[BANK0 ] unsigned char 
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6131 ;;      Params:         0       0       0       0       0       0       0
  6132 ;;      Locals:         0       2       0       0       0       0       0
  6133 ;;      Temps:          0       0       0       0       0       0       0
  6134 ;;      Totals:         0       2       0       0       0       0       0
  6135 ;;Total ram usage:        2 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:   10
  6138 ;; This function calls:
  6139 ;;		_readEEPROM16_ext
  6140 ;;		_readEEPROM_ext
  6141 ;;		_writeEEPROM_ext
  6142 ;; This function is called by:
  6143 ;;		_main
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           	psect	text18
  6148  002CDE                     __ptext18:
  6149                           	opt stack 0
  6150  002CDE                     _lerParametros:
  6151                           	opt stack 0
  6152  002CDE  FFFF               	dw	65535	; assembler added errata NOP
  6153                           
  6154                           ;util.h: 9: char i = 0;
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;incstack = 0
  6158  002CE0  0E00               	movlw	0
  6159  002CE2  0100               	movlb	0	; () banked
  6160  002CE4  6F95               	movwf	lerParametros@i& (0+255),b
  6161                           
  6162                           ;util.h: 10: char verifica_memoria_nova = 0;
  6163  002CE6  0E00               	movlw	0
  6164  002CE8  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;util.h: 11: verifica_memoria_nova = readEEPROM_ext(12);
  6168  002CEA  0E0C               	movlw	12
  6169  002CEC  EC94  F03C         	call	_readEEPROM_ext
  6170  002CF0  0100               	movlb	0	; () banked
  6171  002CF2  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;util.h: 12: if (verifica_memoria_nova != 20) {
  6175  002CF4  0E14               	movlw	20
  6176  002CF6  1994               	xorwf	lerParametros@verifica_memoria_nova& (0+255),w,b
  6177  002CF8  B4D8               	btfsc	status,2,c
  6178  002CFA  D016               	goto	l546
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;util.h: 13: for (i = 0; i < 100; i++) {
  6182  002CFC  0E00               	movlw	0
  6183  002CFE  6F95               	movwf	lerParametros@i& (0+255),b
  6184  002D00                     l6511:
  6185  002D00  FFFF               	dw	65535	; assembler added errata NOP
  6186                           
  6187                           ; BSR set to: 0
  6188  002D02  0E63               	movlw	99
  6189  002D04  6595               	cpfsgt	lerParametros@i& (0+255),b
  6190  002D06  D001               	goto	l547
  6191  002D08  D009               	goto	u7650
  6192  002D0A                     l547:
  6193  002D0A  FFFF               	dw	65535	; assembler added errata NOP
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;util.h: 14: writeEEPROM_ext(i, 0);
  6197                           
  6198                           ; BSR set to: 0
  6199  002D0C  0E00               	movlw	0
  6200  002D0E  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  6201  002D10  5195               	movf	lerParametros@i& (0+255),w,b
  6202  002D12  ECB1  F03B         	call	_writeEEPROM_ext
  6203  002D16  0100               	movlb	0	; () banked
  6204  002D18  2B95               	incf	lerParametros@i& (0+255),f,b
  6205  002D1A  D7F2               	goto	l6511
  6206  002D1C                     u7650:
  6207  002D1C  FFFF               	dw	65535	; assembler added errata NOP
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;util.h: 15: }
  6211                           ;util.h: 16: writeEEPROM_ext(12, 20);
  6212                           
  6213                           ; BSR set to: 0
  6214  002D1E  0E14               	movlw	20
  6215  002D20  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  6216  002D22  0E0C               	movlw	12
  6217  002D24  ECB1  F03B         	call	_writeEEPROM_ext
  6218  002D28                     l546:
  6219  002D28  FFFF               	dw	65535	; assembler added errata NOP
  6220                           
  6221                           ;util.h: 17: }
  6222                           ;util.h: 19: sp_jockey = readEEPROM_ext(0);
  6223  002D2A  0E00               	movlw	0
  6224  002D2C  EC94  F03C         	call	_readEEPROM_ext
  6225  002D30  0100               	movlb	0	; () banked
  6226  002D32  6FDE               	movwf	_sp_jockey& (0+255),b
  6227                           
  6228                           ;util.h: 20: sp_principal = readEEPROM_ext(1);
  6229  002D34  0E01               	movlw	1
  6230  002D36  EC94  F03C         	call	_readEEPROM_ext
  6231  002D3A  0100               	movlb	0	; () banked
  6232  002D3C  6FDD               	movwf	_sp_principal& (0+255),b
  6233                           
  6234                           ;util.h: 21: sp_estacionaria = readEEPROM_ext(2);
  6235  002D3E  0E02               	movlw	2
  6236  002D40  EC94  F03C         	call	_readEEPROM_ext
  6237  002D44  0100               	movlb	0	; () banked
  6238  002D46  6FDC               	movwf	_sp_estacionaria& (0+255),b
  6239                           
  6240                           ;util.h: 22: horimetro = readEEPROM16_ext(8);
  6241  002D48  0E08               	movlw	8
  6242  002D4A  EC1F  F03A         	call	_readEEPROM16_ext
  6243  002D4E  C08E  F04F         	movff	?_readEEPROM16_ext,_horimetro
  6244  002D52  C08F  F050         	movff	?_readEEPROM16_ext+1,_horimetro+1
  6245                           
  6246                           ;util.h: 23: sp_pressao_rede = readEEPROM_ext(4);
  6247  002D56  0E04               	movlw	4
  6248  002D58  EC94  F03C         	call	_readEEPROM_ext
  6249  002D5C  0100               	movlb	0	; () banked
  6250  002D5E  6FDF               	movwf	_sp_pressao_rede& (0+255),b
  6251                           
  6252                           ;util.h: 24: intervalo_teste_dia = readEEPROM_ext(6);
  6253  002D60  0E06               	movlw	6
  6254  002D62  EC94  F03C         	call	_readEEPROM_ext
  6255  002D66  0100               	movlb	0	; () banked
  6256  002D68  6FF2               	movwf	_intervalo_teste_dia& (0+255),b
  6257                           
  6258                           ;util.h: 25: tempo_limite_estacionaria = readEEPROM_ext(7);
  6259  002D6A  0E07               	movlw	7
  6260  002D6C  EC94  F03C         	call	_readEEPROM_ext
  6261  002D70  0100               	movlb	0	; () banked
  6262  002D72  6FEE               	movwf	_tempo_limite_estacionaria& (0+255),b
  6263                           
  6264                           ;util.h: 26: dias_restante_teste = readEEPROM_ext(10);
  6265  002D74  0E0A               	movlw	10
  6266  002D76  EC94  F03C         	call	_readEEPROM_ext
  6267  002D7A  0100               	movlb	0	; () banked
  6268  002D7C  6FF1               	movwf	_dias_restante_teste& (0+255),b
  6269                           
  6270                           ;util.h: 27: horario_de_teste = readEEPROM_ext(11);
  6271  002D7E  0E0B               	movlw	11
  6272  002D80  EC94  F03C         	call	_readEEPROM_ext
  6273  002D84  0100               	movlb	0	; () banked
  6274  002D86  6FF0               	movwf	_horario_de_teste& (0+255),b
  6275                           
  6276                           ;util.h: 28: tempo_limite_teste_estacionaria = readEEPROM_ext(13);
  6277  002D88  0E0D               	movlw	13
  6278  002D8A  EC94  F03C         	call	_readEEPROM_ext
  6279  002D8E  0100               	movlb	0	; () banked
  6280  002D90  6FEA               	movwf	_tempo_limite_teste_estacionaria& (0+255),b
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;util.h: 31: for (i = 0; i < 11; i++) {
  6284  002D92  0E00               	movlw	0
  6285  002D94  6F95               	movwf	lerParametros@i& (0+255),b
  6286  002D96                     l6525:
  6287  002D96  FFFF               	dw	65535	; assembler added errata NOP
  6288                           
  6289                           ; BSR set to: 0
  6290  002D98  0E0A               	movlw	10
  6291  002D9A  6595               	cpfsgt	lerParametros@i& (0+255),b
  6292  002D9C  D001               	goto	l549
  6293  002D9E  D011               	goto	u7670
  6294  002DA0                     l549:
  6295  002DA0  FFFF               	dw	65535	; assembler added errata NOP
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;util.h: 32: tel1[i] = readEEPROM_ext(20 + i);
  6299                           
  6300                           ; BSR set to: 0
  6301  002DA2  5195               	movf	lerParametros@i& (0+255),w,b
  6302  002DA4  0D01               	mullw	1
  6303  002DA6  0ED8               	movlw	low _tel1
  6304  002DA8  24F3               	addwf	prodl,w,c
  6305  002DAA  6ED9               	movwf	fsr2l,c
  6306  002DAC  0E01               	movlw	high _tel1
  6307  002DAE  20F4               	addwfc	prodh,w,c
  6308  002DB0  6EDA               	movwf	fsr2h,c
  6309  002DB2  5195               	movf	lerParametros@i& (0+255),w,b
  6310  002DB4  0F14               	addlw	20
  6311  002DB6  EC94  F03C         	call	_readEEPROM_ext
  6312  002DBA  6EDF               	movwf	indf2,c
  6313  002DBC  0100               	movlb	0	; () banked
  6314  002DBE  2B95               	incf	lerParametros@i& (0+255),f,b
  6315  002DC0  D7EA               	goto	l6525
  6316  002DC2                     u7670:
  6317  002DC2  FFFF               	dw	65535	; assembler added errata NOP
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;util.h: 33: }
  6321                           ;util.h: 34: for (i = 0; i < 11; i++) {
  6322                           
  6323                           ; BSR set to: 0
  6324  002DC4  0E00               	movlw	0
  6325  002DC6  6F95               	movwf	lerParametros@i& (0+255),b
  6326  002DC8                     l6537:
  6327  002DC8  FFFF               	dw	65535	; assembler added errata NOP
  6328                           
  6329                           ; BSR set to: 0
  6330  002DCA  0E0A               	movlw	10
  6331  002DCC  6595               	cpfsgt	lerParametros@i& (0+255),b
  6332  002DCE  D001               	goto	l551
  6333  002DD0  D011               	goto	u7690
  6334  002DD2                     l551:
  6335  002DD2  FFFF               	dw	65535	; assembler added errata NOP
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;util.h: 35: tel2[i] = readEEPROM_ext(40 + i);
  6339                           
  6340                           ; BSR set to: 0
  6341  002DD4  5195               	movf	lerParametros@i& (0+255),w,b
  6342  002DD6  0D01               	mullw	1
  6343  002DD8  0ECC               	movlw	low _tel2
  6344  002DDA  24F3               	addwf	prodl,w,c
  6345  002DDC  6ED9               	movwf	fsr2l,c
  6346  002DDE  0E01               	movlw	high _tel2
  6347  002DE0  20F4               	addwfc	prodh,w,c
  6348  002DE2  6EDA               	movwf	fsr2h,c
  6349  002DE4  5195               	movf	lerParametros@i& (0+255),w,b
  6350  002DE6  0F28               	addlw	40
  6351  002DE8  EC94  F03C         	call	_readEEPROM_ext
  6352  002DEC  6EDF               	movwf	indf2,c
  6353  002DEE  0100               	movlb	0	; () banked
  6354  002DF0  2B95               	incf	lerParametros@i& (0+255),f,b
  6355  002DF2  D7EA               	goto	l6537
  6356  002DF4                     u7690:
  6357  002DF4  FFFF               	dw	65535	; assembler added errata NOP
  6358                           
  6359                           ; BSR set to: 0
  6360                           
  6361                           ; BSR set to: 0
  6362  002DF6  0012               	return		;funcret
  6363  002DF8  FFFF               	dw	65535	; errata NOP
  6364  002DFA                     __end_of_lerParametros:
  6365                           	opt stack 0
  6366                           tblptru	equ	0xFF8
  6367                           tblptrh	equ	0xFF7
  6368                           tblptrl	equ	0xFF6
  6369                           tablat	equ	0xFF5
  6370                           prodh	equ	0xFF4
  6371                           prodl	equ	0xFF3
  6372                           indf0	equ	0xFEF
  6373                           postinc0	equ	0xFEE
  6374                           fsr0h	equ	0xFEA
  6375                           fsr0l	equ	0xFE9
  6376                           wreg	equ	0xFE8
  6377                           postdec1	equ	0xFE5
  6378                           fsr1l	equ	0xFE1
  6379                           indf2	equ	0xFDF
  6380                           postinc2	equ	0xFDE
  6381                           fsr2h	equ	0xFDA
  6382                           fsr2l	equ	0xFD9
  6383                           status	equ	0xFD8
  6384                           
  6385 ;; *************** function _readEEPROM16_ext *****************
  6386 ;; Defined at:
  6387 ;;		line 48 in file "eeprom.h"
  6388 ;; Parameters:    Size  Location     Type
  6389 ;;  adress          1    wreg     unsigned char 
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;  adress          1   19[BANK0 ] unsigned char 
  6392 ;;  data            2   17[BANK0 ] unsigned int 
  6393 ;; Return value:  Size  Location     Type
  6394 ;;                  2   14[BANK0 ] unsigned int 
  6395 ;; Registers used:
  6396 ;;		wreg, status,2, status,0, cstack
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6402 ;;      Params:         0       2       0       0       0       0       0
  6403 ;;      Locals:         0       3       0       0       0       0       0
  6404 ;;      Temps:          0       1       0       0       0       0       0
  6405 ;;      Totals:         0       6       0       0       0       0       0
  6406 ;;Total ram usage:        6 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:    9
  6409 ;; This function calls:
  6410 ;;		_readEEPROM_ext
  6411 ;; This function is called by:
  6412 ;;		_lerParametros
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           	psect	text19
  6417  00743E                     __ptext19:
  6418                           	opt stack 0
  6419  00743E                     _readEEPROM16_ext:
  6420                           	opt stack 0
  6421  00743E  FFFF               	dw	65535	; assembler added errata NOP
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;incstack = 0
  6425                           ;readEEPROM16_ext@adress stored from wreg
  6426  007440  0100               	movlb	0	; () banked
  6427  007442  6F93               	movwf	readEEPROM16_ext@adress& (0+255),b
  6428                           
  6429                           ;eeprom.h: 49: unsigned int data;
  6430                           ;eeprom.h: 50: data = readEEPROM_ext(adress + 1);
  6431  007444  0100               	movlb	0	; () banked
  6432  007446  2993               	incf	readEEPROM16_ext@adress& (0+255),w,b
  6433  007448  EC94  F03C         	call	_readEEPROM_ext
  6434  00744C  0100               	movlb	0	; () banked
  6435  00744E  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  6436  007450  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  6437  007452  6F91               	movwf	readEEPROM16_ext@data& (0+255),b
  6438  007454  6B92               	clrf	(readEEPROM16_ext@data+1)& (0+255),b
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;eeprom.h: 51: data <<= 8;
  6442  007456  5191               	movf	readEEPROM16_ext@data& (0+255),w,b
  6443  007458  6F92               	movwf	(readEEPROM16_ext@data+1)& (0+255),b
  6444  00745A  6B91               	clrf	readEEPROM16_ext@data& (0+255),b
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;eeprom.h: 52: data |= readEEPROM_ext(adress);
  6448  00745C  5193               	movf	readEEPROM16_ext@adress& (0+255),w,b
  6449  00745E  EC94  F03C         	call	_readEEPROM_ext
  6450  007462  0100               	movlb	0	; () banked
  6451  007464  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  6452  007466  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  6453  007468  1391               	iorwf	readEEPROM16_ext@data& (0+255),f,b
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;eeprom.h: 53: return data;
  6457  00746A  C091  F08E         	movff	readEEPROM16_ext@data,?_readEEPROM16_ext
  6458  00746E  C092  F08F         	movff	readEEPROM16_ext@data+1,?_readEEPROM16_ext+1
  6459                           
  6460                           ; BSR set to: 0
  6461                           
  6462                           ; BSR set to: 0
  6463  007472  0012               	return		;funcret
  6464  007474  FFFF               	dw	65535	; errata NOP
  6465  007476                     __end_of_readEEPROM16_ext:
  6466                           	opt stack 0
  6467                           tblptru	equ	0xFF8
  6468                           tblptrh	equ	0xFF7
  6469                           tblptrl	equ	0xFF6
  6470                           tablat	equ	0xFF5
  6471                           prodh	equ	0xFF4
  6472                           prodl	equ	0xFF3
  6473                           indf0	equ	0xFEF
  6474                           postinc0	equ	0xFEE
  6475                           fsr0h	equ	0xFEA
  6476                           fsr0l	equ	0xFE9
  6477                           wreg	equ	0xFE8
  6478                           postdec1	equ	0xFE5
  6479                           fsr1l	equ	0xFE1
  6480                           indf2	equ	0xFDF
  6481                           postinc2	equ	0xFDE
  6482                           fsr2h	equ	0xFDA
  6483                           fsr2l	equ	0xFD9
  6484                           status	equ	0xFD8
  6485                           
  6486 ;; *************** function _informacoes *****************
  6487 ;; Defined at:
  6488 ;;		line 8 in file "tela_INFORMACOES.h"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;		None
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;		None
  6493 ;; Return value:  Size  Location     Type
  6494 ;;                  1    wreg      void 
  6495 ;; Registers used:
  6496 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6497 ;; Tracked objects:
  6498 ;;		On entry : 0/0
  6499 ;;		On exit  : 0/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6502 ;;      Params:         0       0       0       0       0       0       0
  6503 ;;      Locals:         0       0       0       0       0       0       0
  6504 ;;      Temps:          0       0       0       0       0       0       0
  6505 ;;      Totals:         0       0       0       0       0       0       0
  6506 ;;Total ram usage:        0 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; Hardware stack levels required when called:    9
  6509 ;; This function calls:
  6510 ;;		_btPress
  6511 ;;		_sprintf
  6512 ;; This function is called by:
  6513 ;;		_main
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           	psect	text20
  6518  0079D4                     __ptext20:
  6519                           	opt stack 0
  6520  0079D4                     _informacoes:
  6521                           	opt stack 0
  6522  0079D4  FFFF               	dw	65535	; assembler added errata NOP
  6523                           
  6524                           ;tela_INFORMACOES.h: 9: sprintf(line1, "  CONTRA FOGO JUNG");
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;incstack = 0
  6528  0079D6  0EA3               	movlw	low _line1
  6529  0079D8  0100               	movlb	0	; () banked
  6530  0079DA  6FA1               	movwf	sprintf@wh& (0+255),b
  6531  0079DC  0E01               	movlw	high _line1
  6532  0079DE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6533  0079E0  0E4E               	movlw	low STR_62
  6534  0079E2  6FA3               	movwf	sprintf@f& (0+255),b
  6535  0079E4  0E7D               	movlw	high STR_62
  6536  0079E6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6537  0079E8  ECD4  F03B         	call	_sprintf	;wreg free
  6538                           
  6539                           ;tela_INFORMACOES.h: 10: sprintf(line2, "    48 3466-2875");
  6540  0079EC  0E8E               	movlw	low _line2
  6541  0079EE  0100               	movlb	0	; () banked
  6542  0079F0  6FA1               	movwf	sprintf@wh& (0+255),b
  6543  0079F2  0E01               	movlw	high _line2
  6544  0079F4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6545  0079F6  0EF2               	movlw	low STR_63
  6546  0079F8  6FA3               	movwf	sprintf@f& (0+255),b
  6547  0079FA  0E7D               	movlw	high STR_63
  6548  0079FC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6549  0079FE  ECD4  F03B         	call	_sprintf	;wreg free
  6550                           
  6551                           ;tela_INFORMACOES.h: 12: sprintf(line4, "versao - %s", "Aug 04 2019");
  6552  007A02  0E64               	movlw	low _line4
  6553  007A04  0100               	movlb	0	; () banked
  6554  007A06  6FA1               	movwf	sprintf@wh& (0+255),b
  6555  007A08  0E01               	movlw	high _line4
  6556  007A0A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6557  007A0C  0E51               	movlw	low STR_64
  6558  007A0E  6FA3               	movwf	sprintf@f& (0+255),b
  6559  007A10  0E7F               	movlw	high STR_64
  6560  007A12  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6561  007A14  0E2D               	movlw	low STR_65
  6562  007A16  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6563  007A18  0E7F               	movlw	high STR_65
  6564  007A1A  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6565  007A1C  ECD4  F03B         	call	_sprintf	;wreg free
  6566                           
  6567                           ;tela_INFORMACOES.h: 13: if (btPress(1)) {
  6568  007A20  0E01               	movlw	1
  6569  007A22  ECC6  F01F         	call	_btPress
  6570  007A26  0900               	iorlw	0
  6571  007A28  A4D8               	btfss	status,2,c
  6572                           
  6573                           ;tela_INFORMACOES.h: 14: menu_posi = _menu_posi;
  6574  007A2A  C0D6  F0D7         	movff	__menu_posi,_menu_posi
  6575  007A2E  0012               	return		;funcret
  6576  007A30  FFFF               	dw	65535	; errata NOP
  6577  007A32                     __end_of_informacoes:
  6578                           	opt stack 0
  6579                           tblptru	equ	0xFF8
  6580                           tblptrh	equ	0xFF7
  6581                           tblptrl	equ	0xFF6
  6582                           tablat	equ	0xFF5
  6583                           prodh	equ	0xFF4
  6584                           prodl	equ	0xFF3
  6585                           indf0	equ	0xFEF
  6586                           postinc0	equ	0xFEE
  6587                           fsr0h	equ	0xFEA
  6588                           fsr0l	equ	0xFE9
  6589                           wreg	equ	0xFE8
  6590                           postdec1	equ	0xFE5
  6591                           fsr1l	equ	0xFE1
  6592                           indf2	equ	0xFDF
  6593                           postinc2	equ	0xFDE
  6594                           fsr2h	equ	0xFDA
  6595                           fsr2l	equ	0xFD9
  6596                           status	equ	0xFD8
  6597                           
  6598 ;; *************** function _getDS1307TimeDate *****************
  6599 ;; Defined at:
  6600 ;;		line 52 in file "ds1307.h"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  6603 ;;		 -> rtc(7), 
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;		None
  6606 ;; Return value:  Size  Location     Type
  6607 ;;                  1    wreg      void 
  6608 ;; Registers used:
  6609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6615 ;;      Params:         0       2       0       0       0       0       0
  6616 ;;      Locals:         0       0       0       0       0       0       0
  6617 ;;      Temps:          0       0       0       0       0       0       0
  6618 ;;      Totals:         0       2       0       0       0       0       0
  6619 ;;Total ram usage:        2 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    8
  6622 ;; This function calls:
  6623 ;;		_BCDtoDEC
  6624 ;;		_I2C_Read
  6625 ;;		_I2C_Restart
  6626 ;;		_I2C_Start
  6627 ;;		_I2C_Stop
  6628 ;;		_I2C_Write
  6629 ;; This function is called by:
  6630 ;;		_main
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           	psect	text21
  6635  00296C                     __ptext21:
  6636                           	opt stack 0
  6637  00296C                     _getDS1307TimeDate:
  6638                           	opt stack 0
  6639  00296C  FFFF               	dw	65535	; assembler added errata NOP
  6640                           
  6641                           ;ds1307.h: 54: I2C_Start();
  6642                           
  6643                           ;incstack = 0
  6644  00296E  EC30  F038         	call	_I2C_Start	;wreg free
  6645                           
  6646                           ;ds1307.h: 55: I2C_Write(0xD0);
  6647  002972  0E00               	movlw	0
  6648  002974  0100               	movlb	0	; () banked
  6649  002976  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  6650  002978  0ED0               	movlw	208
  6651  00297A  6F8A               	movwf	I2C_Write@d& (0+255),b
  6652  00297C  EC49  F038         	call	_I2C_Write	;wreg free
  6653                           
  6654                           ;ds1307.h: 56: I2C_Write(0x00);
  6655  002980  0E00               	movlw	0
  6656  002982  0100               	movlb	0	; () banked
  6657  002984  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  6658  002986  0E00               	movlw	0
  6659  002988  6F8A               	movwf	I2C_Write@d& (0+255),b
  6660  00298A  EC49  F038         	call	_I2C_Write	;wreg free
  6661                           
  6662                           ;ds1307.h: 57: I2C_Restart();
  6663  00298E  EC3C  F038         	call	_I2C_Restart	;wreg free
  6664                           
  6665                           ;ds1307.h: 58: I2C_Write(0xD1);
  6666  002992  0E00               	movlw	0
  6667  002994  0100               	movlb	0	; () banked
  6668  002996  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  6669  002998  0ED1               	movlw	209
  6670  00299A  6F8A               	movwf	I2C_Write@d& (0+255),b
  6671  00299C  EC49  F038         	call	_I2C_Write	;wreg free
  6672                           
  6673                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
  6674  0029A0  0100               	movlb	0	; () banked
  6675  0029A2  EE20 F001          	lfsr	2,1
  6676  0029A6  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6677  0029A8  26D9               	addwf	fsr2l,f,c
  6678  0029AA  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6679  0029AC  22DA               	addwfc	fsr2h,f,c
  6680  0029AE  0E00               	movlw	0
  6681  0029B0  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6682  0029B2  0E01               	movlw	1
  6683  0029B4  6F81               	movwf	I2C_Read@a& (0+255),b
  6684  0029B6  EC3B  F03A         	call	_I2C_Read	;wreg free
  6685  0029BA  0100               	movlb	0	; () banked
  6686  0029BC  5181               	movf	?_I2C_Read& (0+255),w,b
  6687  0029BE  EC86  F038         	call	_BCDtoDEC
  6688  0029C2  6EDF               	movwf	indf2,c
  6689                           
  6690                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
  6691  0029C4  0100               	movlb	0	; () banked
  6692  0029C6  EE20 F002          	lfsr	2,2
  6693  0029CA  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6694  0029CC  26D9               	addwf	fsr2l,f,c
  6695  0029CE  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6696  0029D0  22DA               	addwfc	fsr2h,f,c
  6697  0029D2  0E00               	movlw	0
  6698  0029D4  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6699  0029D6  0E01               	movlw	1
  6700  0029D8  6F81               	movwf	I2C_Read@a& (0+255),b
  6701  0029DA  EC3B  F03A         	call	_I2C_Read	;wreg free
  6702  0029DE  0100               	movlb	0	; () banked
  6703  0029E0  5181               	movf	?_I2C_Read& (0+255),w,b
  6704  0029E2  EC86  F038         	call	_BCDtoDEC
  6705  0029E6  6EDF               	movwf	indf2,c
  6706                           
  6707                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
  6708  0029E8  0100               	movlb	0	; () banked
  6709  0029EA  EE20 F003          	lfsr	2,3
  6710  0029EE  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6711  0029F0  26D9               	addwf	fsr2l,f,c
  6712  0029F2  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6713  0029F4  22DA               	addwfc	fsr2h,f,c
  6714  0029F6  0E00               	movlw	0
  6715  0029F8  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6716  0029FA  0E01               	movlw	1
  6717  0029FC  6F81               	movwf	I2C_Read@a& (0+255),b
  6718  0029FE  EC3B  F03A         	call	_I2C_Read	;wreg free
  6719  002A02  0100               	movlb	0	; () banked
  6720  002A04  5181               	movf	?_I2C_Read& (0+255),w,b
  6721  002A06  EC86  F038         	call	_BCDtoDEC
  6722  002A0A  6EDF               	movwf	indf2,c
  6723                           
  6724                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
  6725  002A0C  0E00               	movlw	0
  6726  002A0E  0100               	movlb	0	; () banked
  6727  002A10  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6728  002A12  0E01               	movlw	1
  6729  002A14  6F81               	movwf	I2C_Read@a& (0+255),b
  6730  002A16  EC3B  F03A         	call	_I2C_Read	;wreg free
  6731  002A1A  0100               	movlb	0	; () banked
  6732  002A1C  5181               	movf	?_I2C_Read& (0+255),w,b
  6733  002A1E  EC86  F038         	call	_BCDtoDEC
  6734  002A22  C08C  FFD9         	movff	getDS1307TimeDate@ptrToUserVal,fsr2l
  6735  002A26  C08D  FFDA         	movff	getDS1307TimeDate@ptrToUserVal+1,fsr2h
  6736  002A2A  6EDF               	movwf	indf2,c
  6737                           
  6738                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
  6739  002A2C  0100               	movlb	0	; () banked
  6740  002A2E  EE20 F004          	lfsr	2,4
  6741  002A32  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6742  002A34  26D9               	addwf	fsr2l,f,c
  6743  002A36  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6744  002A38  22DA               	addwfc	fsr2h,f,c
  6745  002A3A  0E00               	movlw	0
  6746  002A3C  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6747  002A3E  0E01               	movlw	1
  6748  002A40  6F81               	movwf	I2C_Read@a& (0+255),b
  6749  002A42  EC3B  F03A         	call	_I2C_Read	;wreg free
  6750  002A46  0100               	movlb	0	; () banked
  6751  002A48  5181               	movf	?_I2C_Read& (0+255),w,b
  6752  002A4A  EC86  F038         	call	_BCDtoDEC
  6753  002A4E  6EDF               	movwf	indf2,c
  6754                           
  6755                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
  6756  002A50  0100               	movlb	0	; () banked
  6757  002A52  EE20 F005          	lfsr	2,5
  6758  002A56  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6759  002A58  26D9               	addwf	fsr2l,f,c
  6760  002A5A  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6761  002A5C  22DA               	addwfc	fsr2h,f,c
  6762  002A5E  0E00               	movlw	0
  6763  002A60  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6764  002A62  0E01               	movlw	1
  6765  002A64  6F81               	movwf	I2C_Read@a& (0+255),b
  6766  002A66  EC3B  F03A         	call	_I2C_Read	;wreg free
  6767  002A6A  0100               	movlb	0	; () banked
  6768  002A6C  5181               	movf	?_I2C_Read& (0+255),w,b
  6769  002A6E  EC86  F038         	call	_BCDtoDEC
  6770  002A72  6EDF               	movwf	indf2,c
  6771                           
  6772                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
  6773  002A74  0100               	movlb	0	; () banked
  6774  002A76  EE20 F006          	lfsr	2,6
  6775  002A7A  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6776  002A7C  26D9               	addwf	fsr2l,f,c
  6777  002A7E  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6778  002A80  22DA               	addwfc	fsr2h,f,c
  6779  002A82  0E00               	movlw	0
  6780  002A84  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6781  002A86  0E00               	movlw	0
  6782  002A88  6F81               	movwf	I2C_Read@a& (0+255),b
  6783  002A8A  EC3B  F03A         	call	_I2C_Read	;wreg free
  6784  002A8E  0100               	movlb	0	; () banked
  6785  002A90  5181               	movf	?_I2C_Read& (0+255),w,b
  6786  002A92  EC86  F038         	call	_BCDtoDEC
  6787  002A96  6EDF               	movwf	indf2,c
  6788                           
  6789                           ;ds1307.h: 66: I2C_Stop();
  6790  002A98  EC36  F038         	call	_I2C_Stop	;wreg free
  6791  002A9C  0012               	return		;funcret
  6792  002A9E  FFFF               	dw	65535	; errata NOP
  6793  002AA0                     __end_of_getDS1307TimeDate:
  6794                           	opt stack 0
  6795                           tblptru	equ	0xFF8
  6796                           tblptrh	equ	0xFF7
  6797                           tblptrl	equ	0xFF6
  6798                           tablat	equ	0xFF5
  6799                           prodh	equ	0xFF4
  6800                           prodl	equ	0xFF3
  6801                           indf0	equ	0xFEF
  6802                           postinc0	equ	0xFEE
  6803                           fsr0h	equ	0xFEA
  6804                           fsr0l	equ	0xFE9
  6805                           wreg	equ	0xFE8
  6806                           postdec1	equ	0xFE5
  6807                           fsr1l	equ	0xFE1
  6808                           indf2	equ	0xFDF
  6809                           postinc2	equ	0xFDE
  6810                           fsr2h	equ	0xFDA
  6811                           fsr2l	equ	0xFD9
  6812                           status	equ	0xFD8
  6813                           
  6814 ;; *************** function _BCDtoDEC *****************
  6815 ;; Defined at:
  6816 ;;		line 34 in file "function.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;  val             1    wreg     unsigned char 
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;  val             1    0[BANK0 ] unsigned char 
  6821 ;; Return value:  Size  Location     Type
  6822 ;;                  1    wreg      unsigned char 
  6823 ;; Registers used:
  6824 ;;		wreg, status,2, status,0, prodl, prodh
  6825 ;; Tracked objects:
  6826 ;;		On entry : 0/0
  6827 ;;		On exit  : 0/0
  6828 ;;		Unchanged: 0/0
  6829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6830 ;;      Params:         0       0       0       0       0       0       0
  6831 ;;      Locals:         0       1       0       0       0       0       0
  6832 ;;      Temps:          0       0       0       0       0       0       0
  6833 ;;      Totals:         0       1       0       0       0       0       0
  6834 ;;Total ram usage:        1 bytes
  6835 ;; Hardware stack levels used:    1
  6836 ;; Hardware stack levels required when called:    6
  6837 ;; This function calls:
  6838 ;;		Nothing
  6839 ;; This function is called by:
  6840 ;;		_getDS1307TimeDate
  6841 ;;		_getDS1307Time
  6842 ;; This function uses a non-reentrant model
  6843 ;;
  6844                           
  6845                           	psect	text22
  6846  00710C                     __ptext22:
  6847                           	opt stack 0
  6848  00710C                     _BCDtoDEC:
  6849                           	opt stack 0
  6850  00710C  FFFF               	dw	65535	; assembler added errata NOP
  6851                           
  6852                           ;incstack = 0
  6853                           ;BCDtoDEC@val stored from wreg
  6854  00710E  0100               	movlb	0	; () banked
  6855  007110  6F80               	movwf	BCDtoDEC@val& (0+255),b
  6856                           
  6857                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
  6858  007112  0100               	movlb	0	; () banked
  6859  007114  3980               	swapf	BCDtoDEC@val& (0+255),w,b
  6860  007116  0B0F               	andlw	15
  6861  007118  0B0F               	andlw	15
  6862  00711A  0D0A               	mullw	10
  6863  00711C  5180               	movf	BCDtoDEC@val& (0+255),w,b
  6864  00711E  0B0F               	andlw	15
  6865  007120  24F3               	addwf	prodl,w,c
  6866                           
  6867                           ; BSR set to: 0
  6868                           
  6869                           ; BSR set to: 0
  6870  007122  0012               	return		;funcret
  6871  007124  FFFF               	dw	65535	; errata NOP
  6872  007126                     __end_of_BCDtoDEC:
  6873                           	opt stack 0
  6874                           tblptru	equ	0xFF8
  6875                           tblptrh	equ	0xFF7
  6876                           tblptrl	equ	0xFF6
  6877                           tablat	equ	0xFF5
  6878                           prodh	equ	0xFF4
  6879                           prodl	equ	0xFF3
  6880                           indf0	equ	0xFEF
  6881                           postinc0	equ	0xFEE
  6882                           fsr0h	equ	0xFEA
  6883                           fsr0l	equ	0xFE9
  6884                           wreg	equ	0xFE8
  6885                           postdec1	equ	0xFE5
  6886                           fsr1l	equ	0xFE1
  6887                           indf2	equ	0xFDF
  6888                           postinc2	equ	0xFDE
  6889                           fsr2h	equ	0xFDA
  6890                           fsr2l	equ	0xFD9
  6891                           status	equ	0xFD8
  6892                           
  6893 ;; *************** function _dataLoger *****************
  6894 ;; Defined at:
  6895 ;;		line 7 in file "tela_DATALOGER.h"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;		None
  6898 ;; Auto vars:     Size  Location     Type
  6899 ;;		None
  6900 ;; Return value:  Size  Location     Type
  6901 ;;                  1    wreg      void 
  6902 ;; Registers used:
  6903 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6904 ;; Tracked objects:
  6905 ;;		On entry : 0/0
  6906 ;;		On exit  : 0/0
  6907 ;;		Unchanged: 0/0
  6908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6909 ;;      Params:         0       0       0       0       0       0       0
  6910 ;;      Locals:         0       6       0       0       0       0       0
  6911 ;;      Temps:          0       0       0       0       0       0       0
  6912 ;;      Totals:         0       6       0       0       0       0       0
  6913 ;;Total ram usage:        6 bytes
  6914 ;; Hardware stack levels used:    1
  6915 ;; Hardware stack levels required when called:    9
  6916 ;; This function calls:
  6917 ;;		_btPress
  6918 ;;		_readEEPROM_ext
  6919 ;;		_sprintf
  6920 ;; This function is called by:
  6921 ;;		_main
  6922 ;; This function uses a non-reentrant model
  6923 ;;
  6924                           
  6925                           	psect	text23
  6926  0022D4                     __ptext23:
  6927                           	opt stack 0
  6928  0022D4                     _dataLoger:
  6929                           	opt stack 0
  6930  0022D4  FFFF               	dw	65535	; assembler added errata NOP
  6931                           
  6932                           ;tela_DATALOGER.h: 8: sprintf(line1, "#%d DATA: %02d/%02d/%02d", dtl_pos, dtl_dia, dtl_m
      +                          es, dtl_ano);
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;incstack = 0
  6936  0022D6  0EA3               	movlw	low _line1
  6937  0022D8  0100               	movlb	0	; () banked
  6938  0022DA  6FA1               	movwf	sprintf@wh& (0+255),b
  6939  0022DC  0E01               	movlw	high _line1
  6940  0022DE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6941  0022E0  0EA9               	movlw	low STR_52
  6942  0022E2  6FA3               	movwf	sprintf@f& (0+255),b
  6943  0022E4  0E7C               	movlw	high STR_52
  6944  0022E6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6945  0022E8  C0E4  F0A5         	movff	_dtl_pos,?_sprintf+4
  6946  0022EC  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  6947  0022EE  C0E3  F0A7         	movff	_dtl_dia,?_sprintf+6
  6948  0022F2  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  6949  0022F4  C0E2  F0A9         	movff	_dtl_mes,?_sprintf+8
  6950  0022F8  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  6951  0022FA  C0E1  F0AB         	movff	_dtl_ano,?_sprintf+10
  6952  0022FE  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  6953  002300  ECD4  F03B         	call	_sprintf	;wreg free
  6954                           
  6955                           ;tela_DATALOGER.h: 9: sprintf(line2, "JOKEY - %s ", dtl_jockey == 1 ? "OK" : "ERRO");
  6956  002304  0100               	movlb	0	; () banked
  6957  002306  05E0               	decf	_dtl_jockey& (0+255),w,b
  6958  002308  B4D8               	btfsc	status,2,c
  6959  00230A  D004               	goto	l692
  6960                           
  6961                           ; BSR set to: 0
  6962  00230C  0EEE               	movlw	low STR_26
  6963  00230E  6FB7               	movwf	_dataLoger$1386& (0+255),b
  6964  002310  0E7F               	movlw	high STR_26
  6965  002312  D004               	goto	L8
  6966  002314                     l692:
  6967  002314  FFFF               	dw	65535	; assembler added errata NOP
  6968                           
  6969                           ; BSR set to: 0
  6970                           
  6971                           ; BSR set to: 0
  6972  002316  0E62               	movlw	low (STR_35+13)
  6973  002318  6FB7               	movwf	_dataLoger$1386& (0+255),b
  6974  00231A  0E7E               	movlw	high (STR_35+13)
  6975  00231C                     L8:
  6976  00231C  FFFF               	dw	65535	; assembler added errata NOP
  6977  00231E  6FB8               	movwf	(_dataLoger$1386+1)& (0+255),b
  6978                           
  6979                           ; BSR set to: 0
  6980                           
  6981                           ; BSR set to: 0
  6982  002320  0E8E               	movlw	low _line2
  6983  002322  6FA1               	movwf	sprintf@wh& (0+255),b
  6984  002324  0E01               	movlw	high _line2
  6985  002326  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6986  002328  0E21               	movlw	low STR_53
  6987  00232A  6FA3               	movwf	sprintf@f& (0+255),b
  6988  00232C  0E7F               	movlw	high STR_53
  6989  00232E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6990  002330  C0B7  F0A5         	movff	_dataLoger$1386,?_sprintf+4
  6991  002334  C0B8  F0A6         	movff	_dataLoger$1386+1,?_sprintf+5
  6992  002338  ECD4  F03B         	call	_sprintf	;wreg free
  6993                           
  6994                           ;tela_DATALOGER.h: 10: sprintf(line3, "PRINCIPAL - %s ", dtl_principal == 1 ? "OK" : "ER
      +                          RO");
  6995  00233C  0460               	decf	_dtl_principal,w,c
  6996  00233E  B4D8               	btfsc	status,2,c
  6997  002340  D005               	goto	l696
  6998  002342  0EEE               	movlw	low STR_26
  6999  002344  0100               	movlb	0	; () banked
  7000  002346  6FB9               	movwf	_dataLoger$1391& (0+255),b
  7001  002348  0E7F               	movlw	high STR_26
  7002  00234A  D005               	goto	L9
  7003  00234C                     l696:
  7004  00234C  FFFF               	dw	65535	; assembler added errata NOP
  7005                           
  7006                           ; BSR set to: 0
  7007  00234E  0E62               	movlw	low (STR_35+13)
  7008  002350  0100               	movlb	0	; () banked
  7009  002352  6FB9               	movwf	_dataLoger$1391& (0+255),b
  7010  002354  0E7E               	movlw	high (STR_35+13)
  7011  002356                     L9:
  7012  002356  FFFF               	dw	65535	; assembler added errata NOP
  7013  002358  6FBA               	movwf	(_dataLoger$1391+1)& (0+255),b
  7014                           
  7015                           ; BSR set to: 0
  7016                           
  7017                           ; BSR set to: 0
  7018  00235A  0E79               	movlw	low _line3
  7019  00235C  6FA1               	movwf	sprintf@wh& (0+255),b
  7020  00235E  0E01               	movlw	high _line3
  7021  002360  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7022  002362  0E35               	movlw	low STR_56
  7023  002364  6FA3               	movwf	sprintf@f& (0+255),b
  7024  002366  0E7E               	movlw	high STR_56
  7025  002368  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7026  00236A  C0B9  F0A5         	movff	_dataLoger$1391,?_sprintf+4
  7027  00236E  C0BA  F0A6         	movff	_dataLoger$1391+1,?_sprintf+5
  7028  002372  ECD4  F03B         	call	_sprintf	;wreg free
  7029                           
  7030                           ;tela_DATALOGER.h: 11: sprintf(line4, "COMBUSTAO - %s ", dtl_estacionaria == 1 ? "OK" : 
      +                          "ERRO");
  7031  002376  045F               	decf	_dtl_estacionaria,w,c
  7032  002378  B4D8               	btfsc	status,2,c
  7033  00237A  D005               	goto	l700
  7034  00237C  0EEE               	movlw	low STR_26
  7035  00237E  0100               	movlb	0	; () banked
  7036  002380  6FBB               	movwf	_dataLoger$1396& (0+255),b
  7037  002382  0E7F               	movlw	high STR_26
  7038  002384  D005               	goto	L10
  7039  002386                     l700:
  7040  002386  FFFF               	dw	65535	; assembler added errata NOP
  7041                           
  7042                           ; BSR set to: 0
  7043  002388  0E62               	movlw	low (STR_35+13)
  7044  00238A  0100               	movlb	0	; () banked
  7045  00238C  6FBB               	movwf	_dataLoger$1396& (0+255),b
  7046  00238E  0E7E               	movlw	high (STR_35+13)
  7047  002390                     L10:
  7048  002390  FFFF               	dw	65535	; assembler added errata NOP
  7049  002392  6FBC               	movwf	(_dataLoger$1396+1)& (0+255),b
  7050                           
  7051                           ; BSR set to: 0
  7052                           
  7053                           ; BSR set to: 0
  7054  002394  0E64               	movlw	low _line4
  7055  002396  6FA1               	movwf	sprintf@wh& (0+255),b
  7056  002398  0E01               	movlw	high _line4
  7057  00239A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7058  00239C  0E45               	movlw	low STR_59
  7059  00239E  6FA3               	movwf	sprintf@f& (0+255),b
  7060  0023A0  0E7E               	movlw	high STR_59
  7061  0023A2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7062  0023A4  C0BB  F0A5         	movff	_dataLoger$1396,?_sprintf+4
  7063  0023A8  C0BC  F0A6         	movff	_dataLoger$1396+1,?_sprintf+5
  7064  0023AC  ECD4  F03B         	call	_sprintf	;wreg free
  7065                           
  7066                           ;tela_DATALOGER.h: 13: if (btPress(1)) {
  7067  0023B0  0E01               	movlw	1
  7068  0023B2  ECC6  F01F         	call	_btPress
  7069  0023B6  0900               	iorlw	0
  7070  0023B8  B4D8               	btfsc	status,2,c
  7071  0023BA  D005               	goto	l703
  7072                           
  7073                           ;tela_DATALOGER.h: 14: option_posi = 0;
  7074  0023BC  0E00               	movlw	0
  7075  0023BE  0100               	movlb	0	; () banked
  7076  0023C0  6FD8               	movwf	_option_posi& (0+255),b
  7077                           
  7078                           ; BSR set to: 0
  7079                           ;tela_DATALOGER.h: 15: menu_posi = _menu_posi;
  7080  0023C2  C0D6  F0D7         	movff	__menu_posi,_menu_posi
  7081  0023C6                     l703:
  7082  0023C6  FFFF               	dw	65535	; assembler added errata NOP
  7083                           
  7084                           ;tela_DATALOGER.h: 16: }
  7085                           ;tela_DATALOGER.h: 17: if (btPress(2)) {
  7086                           
  7087                           ; BSR set to: 0
  7088  0023C8  0E02               	movlw	2
  7089  0023CA  ECC6  F01F         	call	_btPress
  7090  0023CE  0900               	iorlw	0
  7091  0023D0  B4D8               	btfsc	status,2,c
  7092  0023D2  D004               	goto	l704
  7093                           
  7094                           ;tela_DATALOGER.h: 18: dtl_pos--;
  7095  0023D4  0100               	movlb	0	; () banked
  7096  0023D6  07E4               	decf	_dtl_pos& (0+255),f,b
  7097                           
  7098                           ; BSR set to: 0
  7099                           ;tela_DATALOGER.h: 19: dtl_visualiza_log = 1;
  7100  0023D8  0E01               	movlw	1
  7101  0023DA  6E5E               	movwf	_dtl_visualiza_log,c
  7102  0023DC                     l704:
  7103  0023DC  FFFF               	dw	65535	; assembler added errata NOP
  7104                           
  7105                           ;tela_DATALOGER.h: 20: }
  7106                           ;tela_DATALOGER.h: 21: if (btPress(3)) {
  7107                           
  7108                           ; BSR set to: 0
  7109  0023DE  0E03               	movlw	3
  7110  0023E0  ECC6  F01F         	call	_btPress
  7111  0023E4  0900               	iorlw	0
  7112  0023E6  B4D8               	btfsc	status,2,c
  7113  0023E8  D004               	goto	l705
  7114                           
  7115                           ;tela_DATALOGER.h: 22: dtl_pos++;
  7116  0023EA  0100               	movlb	0	; () banked
  7117  0023EC  2BE4               	incf	_dtl_pos& (0+255),f,b
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;tela_DATALOGER.h: 23: dtl_visualiza_log = 1;
  7121  0023EE  0E01               	movlw	1
  7122  0023F0  6E5E               	movwf	_dtl_visualiza_log,c
  7123  0023F2                     l705:
  7124  0023F2  FFFF               	dw	65535	; assembler added errata NOP
  7125                           
  7126                           ;tela_DATALOGER.h: 24: }
  7127                           ;tela_DATALOGER.h: 25: if (dtl_visualiza_log == 1) {
  7128                           
  7129                           ; BSR set to: 0
  7130  0023F4  045E               	decf	_dtl_visualiza_log,w,c
  7131  0023F6  B4D8               	btfsc	status,2,c
  7132  0023F8  D065               	goto	l707
  7133  0023FA  D071               	goto	l709
  7134  0023FC  FFFF               	dw	65535	; assembler added errata NOP
  7135                           
  7136                           ;tela_DATALOGER.h: 28: dtl_dia = readEEPROM_ext(60);
  7137  0023FE  0E3C               	movlw	60
  7138  002400  EC94  F03C         	call	_readEEPROM_ext
  7139  002404  0100               	movlb	0	; () banked
  7140  002406  6FE3               	movwf	_dtl_dia& (0+255),b
  7141                           
  7142                           ;tela_DATALOGER.h: 29: dtl_mes = readEEPROM_ext(61);
  7143  002408  0E3D               	movlw	61
  7144  00240A  EC94  F03C         	call	_readEEPROM_ext
  7145  00240E  0100               	movlb	0	; () banked
  7146  002410  6FE2               	movwf	_dtl_mes& (0+255),b
  7147                           
  7148                           ;tela_DATALOGER.h: 30: dtl_ano = readEEPROM_ext(62);
  7149  002412  0E3E               	movlw	62
  7150  002414  EC94  F03C         	call	_readEEPROM_ext
  7151  002418  0100               	movlb	0	; () banked
  7152  00241A  6FE1               	movwf	_dtl_ano& (0+255),b
  7153                           
  7154                           ;tela_DATALOGER.h: 31: dtl_jockey = readEEPROM_ext(63);
  7155  00241C  0E3F               	movlw	63
  7156  00241E  EC94  F03C         	call	_readEEPROM_ext
  7157  002422  0100               	movlb	0	; () banked
  7158  002424  6FE0               	movwf	_dtl_jockey& (0+255),b
  7159                           
  7160                           ;tela_DATALOGER.h: 32: dtl_principal = readEEPROM_ext(64);
  7161  002426  0E40               	movlw	64
  7162  002428  EC94  F03C         	call	_readEEPROM_ext
  7163  00242C  6E60               	movwf	_dtl_principal,c
  7164                           
  7165                           ;tela_DATALOGER.h: 33: dtl_estacionaria = readEEPROM_ext(65);
  7166  00242E  0E41               	movlw	65
  7167  002430  EC94  F03C         	call	_readEEPROM_ext
  7168  002434  D03E               	goto	L13
  7169  002436                     l12499:
  7170  002436  FFFF               	dw	65535	; assembler added errata NOP
  7171                           
  7172                           ;tela_DATALOGER.h: 34: dtl_visualiza_log = 0;
  7173  002438  0E00               	movlw	0
  7174  00243A  FFFF               	dw	65535	; assembler added errata NOP
  7175  00243C  6E5E               	movwf	_dtl_visualiza_log,c
  7176                           
  7177                           ;tela_DATALOGER.h: 35: break;
  7178  00243E  D04F               	goto	l709
  7179  002440  FFFF               	dw	65535	; assembler added errata NOP
  7180                           
  7181                           ;tela_DATALOGER.h: 37: dtl_dia = readEEPROM_ext(66);
  7182  002442  0E42               	movlw	66
  7183  002444  EC94  F03C         	call	_readEEPROM_ext
  7184  002448  0100               	movlb	0	; () banked
  7185  00244A  6FE3               	movwf	_dtl_dia& (0+255),b
  7186                           
  7187                           ;tela_DATALOGER.h: 38: dtl_mes = readEEPROM_ext(67);
  7188  00244C  0E43               	movlw	67
  7189  00244E  EC94  F03C         	call	_readEEPROM_ext
  7190  002452  0100               	movlb	0	; () banked
  7191  002454  6FE2               	movwf	_dtl_mes& (0+255),b
  7192                           
  7193                           ;tela_DATALOGER.h: 39: dtl_ano = readEEPROM_ext(68);
  7194  002456  0E44               	movlw	68
  7195  002458  EC94  F03C         	call	_readEEPROM_ext
  7196  00245C  0100               	movlb	0	; () banked
  7197  00245E  6FE1               	movwf	_dtl_ano& (0+255),b
  7198                           
  7199                           ;tela_DATALOGER.h: 40: dtl_jockey = readEEPROM_ext(69);
  7200  002460  0E45               	movlw	69
  7201  002462  EC94  F03C         	call	_readEEPROM_ext
  7202  002466  0100               	movlb	0	; () banked
  7203  002468  6FE0               	movwf	_dtl_jockey& (0+255),b
  7204                           
  7205                           ;tela_DATALOGER.h: 41: dtl_principal = readEEPROM_ext(70);
  7206  00246A  0E46               	movlw	70
  7207  00246C  EC94  F03C         	call	_readEEPROM_ext
  7208  002470  6E60               	movwf	_dtl_principal,c
  7209                           
  7210                           ;tela_DATALOGER.h: 42: dtl_estacionaria = readEEPROM_ext(71);
  7211  002472  0E47               	movlw	71
  7212  002474  EC94  F03C         	call	_readEEPROM_ext
  7213  002478  D01C               	goto	L13
  7214  00247A  FFFF               	dw	65535	; assembler added errata NOP
  7215                           
  7216                           ;tela_DATALOGER.h: 46: dtl_dia = readEEPROM_ext(72);
  7217  00247C  0E48               	movlw	72
  7218  00247E  EC94  F03C         	call	_readEEPROM_ext
  7219  002482  0100               	movlb	0	; () banked
  7220  002484  6FE3               	movwf	_dtl_dia& (0+255),b
  7221                           
  7222                           ;tela_DATALOGER.h: 47: dtl_mes = readEEPROM_ext(73);
  7223  002486  0E49               	movlw	73
  7224  002488  EC94  F03C         	call	_readEEPROM_ext
  7225  00248C  0100               	movlb	0	; () banked
  7226  00248E  6FE2               	movwf	_dtl_mes& (0+255),b
  7227                           
  7228                           ;tela_DATALOGER.h: 48: dtl_ano = readEEPROM_ext(74);
  7229  002490  0E4A               	movlw	74
  7230  002492  EC94  F03C         	call	_readEEPROM_ext
  7231  002496  0100               	movlb	0	; () banked
  7232  002498  6FE1               	movwf	_dtl_ano& (0+255),b
  7233                           
  7234                           ;tela_DATALOGER.h: 49: dtl_jockey = readEEPROM_ext(75);
  7235  00249A  0E4B               	movlw	75
  7236  00249C  EC94  F03C         	call	_readEEPROM_ext
  7237  0024A0  0100               	movlb	0	; () banked
  7238  0024A2  6FE0               	movwf	_dtl_jockey& (0+255),b
  7239                           
  7240                           ;tela_DATALOGER.h: 50: dtl_principal = readEEPROM_ext(76);
  7241  0024A4  0E4C               	movlw	76
  7242  0024A6  EC94  F03C         	call	_readEEPROM_ext
  7243  0024AA  6E60               	movwf	_dtl_principal,c
  7244                           
  7245                           ;tela_DATALOGER.h: 51: dtl_estacionaria = readEEPROM_ext(77);
  7246  0024AC  0E4D               	movlw	77
  7247  0024AE  EC94  F03C         	call	_readEEPROM_ext
  7248  0024B2                     L13:
  7249  0024B2  FFFF               	dw	65535	; assembler added errata NOP
  7250  0024B4  6E5F               	movwf	_dtl_estacionaria,c
  7251  0024B6  D7BF               	goto	l12499
  7252  0024B8  FFFF               	dw	65535	; assembler added errata NOP
  7253  0024BA  0E00               	movlw	0
  7254  0024BC  0100               	movlb	0	; () banked
  7255  0024BE  6FE4               	movwf	_dtl_pos& (0+255),b
  7256                           
  7257                           ;tela_DATALOGER.h: 55: dtl_visualiza_log = 1;
  7258  0024C0  0E01               	movlw	1
  7259  0024C2  D7BB               	goto	L12
  7260  0024C4                     l707:
  7261  0024C4  FFFF               	dw	65535	; assembler added errata NOP
  7262                           
  7263                           ; BSR set to: 0
  7264  0024C6  0100               	movlb	0	; () banked
  7265  0024C8  51E4               	movf	_dtl_pos& (0+255),w,b
  7266                           
  7267                           ; Switch size 1, requested type "space"
  7268                           ; Number of cases is 3, Range of values is 0 to 2
  7269                           ; switch strategies available:
  7270                           ; Name         Instructions Cycles
  7271                           ; simple_byte           10     6 (average)
  7272                           ;	Chosen strategy is simple_byte
  7273  0024CA  0A00               	xorlw	0	; case 0
  7274  0024CC  B4D8               	btfsc	status,2,c
  7275  0024CE  D796               	goto	l708
  7276  0024D0  0A01               	xorlw	1	; case 1
  7277  0024D2  B4D8               	btfsc	status,2,c
  7278  0024D4  D7B5               	goto	l710
  7279  0024D6  0A03               	xorlw	3	; case 2
  7280  0024D8  B4D8               	btfsc	status,2,c
  7281  0024DA  D7CF               	goto	l711
  7282  0024DC  D7ED               	goto	l712
  7283  0024DE                     l709:
  7284  0024DE  FFFF               	dw	65535	; assembler added errata NOP
  7285                           
  7286                           ; BSR set to: 0
  7287                           
  7288                           ; BSR set to: 0
  7289  0024E0  0012               	return		;funcret
  7290  0024E2  FFFF               	dw	65535	; errata NOP
  7291  0024E4                     __end_of_dataLoger:
  7292                           	opt stack 0
  7293                           tblptru	equ	0xFF8
  7294                           tblptrh	equ	0xFF7
  7295                           tblptrl	equ	0xFF6
  7296                           tablat	equ	0xFF5
  7297                           prodh	equ	0xFF4
  7298                           prodl	equ	0xFF3
  7299                           indf0	equ	0xFEF
  7300                           postinc0	equ	0xFEE
  7301                           fsr0h	equ	0xFEA
  7302                           fsr0l	equ	0xFE9
  7303                           wreg	equ	0xFE8
  7304                           postdec1	equ	0xFE5
  7305                           fsr1l	equ	0xFE1
  7306                           indf2	equ	0xFDF
  7307                           postinc2	equ	0xFDE
  7308                           fsr2h	equ	0xFDA
  7309                           fsr2l	equ	0xFD9
  7310                           status	equ	0xFD8
  7311                           
  7312 ;; *************** function _criarCaracteresCGRAM *****************
  7313 ;; Defined at:
  7314 ;;		line 152 in file "lcd.h"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;		None
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;  character      32    7[BANK0 ] const unsigned char [8][
  7319 ;;  i               1   43[BANK0 ] unsigned char 
  7320 ;;  j               1   42[BANK0 ] unsigned char 
  7321 ;;  k               1   41[BANK0 ] unsigned char 
  7322 ;; Return value:  Size  Location     Type
  7323 ;;                  1    wreg      void 
  7324 ;; Registers used:
  7325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7326 ;; Tracked objects:
  7327 ;;		On entry : 0/0
  7328 ;;		On exit  : 0/0
  7329 ;;		Unchanged: 0/0
  7330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7331 ;;      Params:         0       0       0       0       0       0       0
  7332 ;;      Locals:         0      37       0       0       0       0       0
  7333 ;;      Temps:          0       3       0       0       0       0       0
  7334 ;;      Totals:         0      40       0       0       0       0       0
  7335 ;;Total ram usage:       40 bytes
  7336 ;; Hardware stack levels used:    1
  7337 ;; Hardware stack levels required when called:    8
  7338 ;; This function calls:
  7339 ;;		_Lcd_Cmd
  7340 ;;		_Lcd_Write_Char
  7341 ;; This function is called by:
  7342 ;;		_main
  7343 ;; This function uses a non-reentrant model
  7344 ;;
  7345                           
  7346                           	psect	text24
  7347  00366A                     __ptext24:
  7348                           	opt stack 0
  7349  00366A                     _criarCaracteresCGRAM:
  7350                           	opt stack 0
  7351  00366A  FFFF               	dw	65535	; assembler added errata NOP
  7352                           
  7353                           ;lcd.h: 153: const char character[4][8] = {
  7354                           ;lcd.h: 154: 0x00, 0x1F, 0x15, 0x15, 0x0E, 0x04, 0x04, 0x04,
  7355                           ;lcd.h: 155: 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10,
  7356                           ;lcd.h: 156: 0x00, 0x00, 0x00, 0x04, 0x04, 0x14, 0x14, 0x14,
  7357                           ;lcd.h: 157: 0x00, 0x01, 0x01, 0x05, 0x05, 0x15, 0x15, 0x15,
  7358                           ;lcd.h: 158: };
  7359                           
  7360                           ;incstack = 0
  7361  00366C  0EB9               	movlw	low criarCaracteresCGRAM@F2839
  7362  00366E  6EF6               	movwf	tblptrl,c
  7363  003670                     	if	1	;There is more than 1 active tblptr byte
  7364  003670  0E7B               	movlw	high criarCaracteresCGRAM@F2839
  7365  003672  6EF7               	movwf	tblptrh,c
  7366  003674                     	endif
  7367  003674                     	if	0	;There are less than 3 active tblptr bytes
  7368  003674                     	endif
  7369  003674  EE20  F087         	lfsr	2,criarCaracteresCGRAM@character
  7370  003678  0E1F               	movlw	31
  7371  00367A                     u7720:
  7372  00367A  0009               	tblrd		*+
  7373  00367C  FFFF               	dw	65535	; errata NOP
  7374  00367E  CFF5 FFDE          	movff	tablat,postinc2
  7375  003682  06E8               	decf	wreg,f,c
  7376  003684  E2FA               	bc	u7720
  7377                           
  7378                           ;lcd.h: 159: Lcd_Cmd(0b0100);
  7379  003686  0E04               	movlw	4
  7380  003688  EC3C  F039         	call	_Lcd_Cmd
  7381                           
  7382                           ;lcd.h: 160: Lcd_Cmd(0b0000);
  7383  00368C  0E00               	movlw	0
  7384  00368E  EC3C  F039         	call	_Lcd_Cmd
  7385                           
  7386                           ;lcd.h: 161: _delay((unsigned long)((100)*(8000000/4000000.0)));
  7387  003692  0E32               	movlw	50
  7388  003694                     u19197:
  7389  003694  FFFF               	dw	65535	; errata NOP
  7390  003696  2EE8               	decfsz	wreg,f,c
  7391  003698  D7FD               	bra	u19197
  7392                           
  7393                           ;lcd.h: 162: char i = 0, j = 0, k = 0;
  7394  00369A  0E00               	movlw	0
  7395  00369C  0100               	movlb	0	; () banked
  7396  00369E  6FAB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7397                           
  7398                           ; BSR set to: 0
  7399  0036A0  0E00               	movlw	0
  7400  0036A2  6FAA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  7401                           
  7402                           ; BSR set to: 0
  7403  0036A4  0E00               	movlw	0
  7404  0036A6  6FA9               	movwf	criarCaracteresCGRAM@k& (0+255),b
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;lcd.h: 163: for (i = 0; i < 5; i++) {
  7408  0036A8  0E00               	movlw	0
  7409  0036AA  6FAB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7410  0036AC                     l6619:
  7411  0036AC  FFFF               	dw	65535	; assembler added errata NOP
  7412                           
  7413                           ; BSR set to: 0
  7414  0036AE  0E04               	movlw	4
  7415  0036B0  65AB               	cpfsgt	criarCaracteresCGRAM@i& (0+255),b
  7416  0036B2  D001               	goto	l601
  7417  0036B4  D03A               	goto	u7780
  7418  0036B6                     l601:
  7419  0036B6  FFFF               	dw	65535	; assembler added errata NOP
  7420                           
  7421                           ; BSR set to: 0
  7422                           ;lcd.h: 164: if (k == 1) i = 0;
  7423                           
  7424                           ; BSR set to: 0
  7425  0036B8  05A9               	decf	criarCaracteresCGRAM@k& (0+255),w,b
  7426  0036BA  A4D8               	btfss	status,2,c
  7427  0036BC  D002               	goto	l603
  7428                           
  7429                           ; BSR set to: 0
  7430  0036BE  0E00               	movlw	0
  7431  0036C0  6FAB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7432  0036C2                     l603:
  7433  0036C2  FFFF               	dw	65535	; assembler added errata NOP
  7434                           
  7435                           ; BSR set to: 0
  7436                           ;lcd.h: 165: for (j = 0; j < 8; j++) {
  7437  0036C4  0E00               	movlw	0
  7438  0036C6  6FAA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  7439  0036C8                     l6627:
  7440  0036C8  FFFF               	dw	65535	; assembler added errata NOP
  7441                           
  7442                           ; BSR set to: 0
  7443  0036CA  0E07               	movlw	7
  7444  0036CC  65AA               	cpfsgt	criarCaracteresCGRAM@j& (0+255),b
  7445  0036CE  D001               	goto	l604
  7446  0036D0  D028               	goto	u7770
  7447  0036D2                     l604:
  7448  0036D2  FFFF               	dw	65535	; assembler added errata NOP
  7449                           
  7450                           ; BSR set to: 0
  7451                           ;lcd.h: 166: Lcd_Write_Char((k) ? character[i][j] : 0);
  7452                           
  7453                           ; BSR set to: 0
  7454  0036D4  51A9               	movf	criarCaracteresCGRAM@k& (0+255),w,b
  7455  0036D6  A4D8               	btfss	status,2,c
  7456  0036D8  D005               	goto	l607
  7457                           
  7458                           ; BSR set to: 0
  7459  0036DA  0E00               	movlw	0
  7460  0036DC  6FA8               	movwf	(_criarCaracteresCGRAM$1349+1)& (0+255),b
  7461  0036DE  0E00               	movlw	0
  7462  0036E0  6FA7               	movwf	_criarCaracteresCGRAM$1349& (0+255),b
  7463  0036E2  D018               	goto	l609
  7464  0036E4                     l607:
  7465  0036E4  FFFF               	dw	65535	; assembler added errata NOP
  7466                           
  7467                           ; BSR set to: 0
  7468                           
  7469                           ; BSR set to: 0
  7470  0036E6  51AB               	movf	criarCaracteresCGRAM@i& (0+255),w,b
  7471  0036E8  0D08               	mullw	8
  7472  0036EA  0E87               	movlw	low criarCaracteresCGRAM@character
  7473  0036EC  6F84               	movwf	??_criarCaracteresCGRAM& (0+255),b
  7474  0036EE  0E00               	movlw	high criarCaracteresCGRAM@character
  7475  0036F0  6F85               	movwf	(??_criarCaracteresCGRAM+1)& (0+255),b
  7476  0036F2  50F3               	movf	prodl,w,c
  7477  0036F4  2784               	addwf	??_criarCaracteresCGRAM& (0+255),f,b
  7478  0036F6  50F4               	movf	prodh,w,c
  7479  0036F8  2385               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),f,b
  7480  0036FA  51AA               	movf	criarCaracteresCGRAM@j& (0+255),w,b
  7481  0036FC  0D01               	mullw	1
  7482  0036FE  50F3               	movf	prodl,w,c
  7483  003700  2584               	addwf	??_criarCaracteresCGRAM& (0+255),w,b
  7484  003702  6ED9               	movwf	fsr2l,c
  7485  003704  50F4               	movf	prodh,w,c
  7486  003706  2185               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),w,b
  7487  003708  6EDA               	movwf	fsr2h,c
  7488  00370A  50DF               	movf	indf2,w,c
  7489  00370C  6F86               	movwf	(??_criarCaracteresCGRAM+2)& (0+255),b
  7490  00370E  5186               	movf	(??_criarCaracteresCGRAM+2)& (0+255),w,b
  7491  003710  6FA7               	movwf	_criarCaracteresCGRAM$1349& (0+255),b
  7492  003712  6BA8               	clrf	(_criarCaracteresCGRAM$1349+1)& (0+255),b
  7493  003714                     l609:
  7494  003714  FFFF               	dw	65535	; assembler added errata NOP
  7495                           
  7496                           ; BSR set to: 0
  7497                           
  7498                           ; BSR set to: 0
  7499  003716  51A7               	movf	_criarCaracteresCGRAM$1349& (0+255),w,b
  7500  003718  EC2A  F03B         	call	_Lcd_Write_Char
  7501  00371C  0100               	movlb	0	; () banked
  7502  00371E  2BAA               	incf	criarCaracteresCGRAM@j& (0+255),f,b
  7503  003720  D7D3               	goto	l6627
  7504  003722                     u7770:
  7505  003722  FFFF               	dw	65535	; assembler added errata NOP
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;lcd.h: 167: }
  7509                           ;lcd.h: 168: k++;
  7510                           
  7511                           ; BSR set to: 0
  7512  003724  2BA9               	incf	criarCaracteresCGRAM@k& (0+255),f,b
  7513  003726  2BAB               	incf	criarCaracteresCGRAM@i& (0+255),f,b
  7514  003728  D7C1               	goto	l6619
  7515  00372A                     u7780:
  7516  00372A  FFFF               	dw	65535	; assembler added errata NOP
  7517                           
  7518                           ; BSR set to: 0
  7519                           
  7520                           ; BSR set to: 0
  7521  00372C  0012               	return		;funcret
  7522  00372E  FFFF               	dw	65535	; errata NOP
  7523  003730                     __end_of_criarCaracteresCGRAM:
  7524                           	opt stack 0
  7525                           tblptru	equ	0xFF8
  7526                           tblptrh	equ	0xFF7
  7527                           tblptrl	equ	0xFF6
  7528                           tablat	equ	0xFF5
  7529                           prodh	equ	0xFF4
  7530                           prodl	equ	0xFF3
  7531                           indf0	equ	0xFEF
  7532                           postinc0	equ	0xFEE
  7533                           fsr0h	equ	0xFEA
  7534                           fsr0l	equ	0xFE9
  7535                           wreg	equ	0xFE8
  7536                           postdec1	equ	0xFE5
  7537                           fsr1l	equ	0xFE1
  7538                           indf2	equ	0xFDF
  7539                           postinc2	equ	0xFDE
  7540                           fsr2h	equ	0xFDA
  7541                           fsr2l	equ	0xFD9
  7542                           status	equ	0xFD8
  7543                           
  7544 ;; *************** function _configurarEstacionaria *****************
  7545 ;; Defined at:
  7546 ;;		line 7 in file "tela_ESTACIONARIA.h"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;		None
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;		None
  7551 ;; Return value:  Size  Location     Type
  7552 ;;                  1    wreg      void 
  7553 ;; Registers used:
  7554 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7560 ;;      Params:         0       0       0       0       0       0       0
  7561 ;;      Locals:         0       0       0       0       0       0       0
  7562 ;;      Temps:          0       0       0       0       0       0       0
  7563 ;;      Totals:         0       0       0       0       0       0       0
  7564 ;;Total ram usage:        0 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    9
  7567 ;; This function calls:
  7568 ;;		_blink
  7569 ;;		_btPress
  7570 ;;		_sprintf
  7571 ;;		_writeEEPROM_ext
  7572 ;; This function is called by:
  7573 ;;		_main
  7574 ;; This function uses a non-reentrant model
  7575 ;;
  7576                           
  7577                           	psect	text25
  7578  0026B4                     __ptext25:
  7579                           	opt stack 0
  7580  0026B4                     _configurarEstacionaria:
  7581                           	opt stack 0
  7582  0026B4  FFFF               	dw	65535	; assembler added errata NOP
  7583                           
  7584                           ;tela_ESTACIONARIA.h: 9: sprintf(line1, "Configuracao tempo");
  7585                           
  7586                           ; BSR set to: 0
  7587                           ;incstack = 0
  7588  0026B6  0EA3               	movlw	low _line1
  7589  0026B8  0100               	movlb	0	; () banked
  7590  0026BA  6FA1               	movwf	sprintf@wh& (0+255),b
  7591  0026BC  0E01               	movlw	high _line1
  7592  0026BE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7593  0026C0  0E87               	movlw	low STR_74
  7594  0026C2  6FA3               	movwf	sprintf@f& (0+255),b
  7595  0026C4  0E7D               	movlw	high STR_74
  7596  0026C6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7597  0026C8  ECD4  F03B         	call	_sprintf	;wreg free
  7598                           
  7599                           ;tela_ESTACIONARIA.h: 10: sprintf(line2, "Max. PARTIDA:");
  7600  0026CC  0E8E               	movlw	low _line2
  7601  0026CE  0100               	movlb	0	; () banked
  7602  0026D0  6FA1               	movwf	sprintf@wh& (0+255),b
  7603  0026D2  0E01               	movlw	high _line2
  7604  0026D4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7605  0026D6  0EDF               	movlw	low STR_75
  7606  0026D8  6FA3               	movwf	sprintf@f& (0+255),b
  7607  0026DA  0E7E               	movlw	high STR_75
  7608  0026DC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7609  0026DE  ECD4  F03B         	call	_sprintf	;wreg free
  7610                           
  7611                           ;tela_ESTACIONARIA.h: 11: sprintf(&line2[16], "%3ds", tempo_limite_estacionaria);
  7612  0026E2  0E9E               	movlw	low (_line2+16)
  7613  0026E4  0100               	movlb	0	; () banked
  7614  0026E6  6FA1               	movwf	sprintf@wh& (0+255),b
  7615  0026E8  0E01               	movlw	high (_line2+16)
  7616  0026EA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7617  0026EC  0EF8               	movlw	low STR_76
  7618  0026EE  6FA3               	movwf	sprintf@f& (0+255),b
  7619  0026F0  0E7F               	movlw	high STR_76
  7620  0026F2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7621  0026F4  C0EE  F0A5         	movff	_tempo_limite_estacionaria,?_sprintf+4
  7622  0026F8  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7623  0026FA  ECD4  F03B         	call	_sprintf	;wreg free
  7624                           
  7625                           ;tela_ESTACIONARIA.h: 12: sprintf(line3, "Max. TESTE:");
  7626  0026FE  0E79               	movlw	low _line3
  7627  002700  0100               	movlb	0	; () banked
  7628  002702  6FA1               	movwf	sprintf@wh& (0+255),b
  7629  002704  0E01               	movlw	high _line3
  7630  002706  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7631  002708  0E39               	movlw	low STR_77
  7632  00270A  6FA3               	movwf	sprintf@f& (0+255),b
  7633  00270C  0E7F               	movlw	high STR_77
  7634  00270E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7635  002710  ECD4  F03B         	call	_sprintf	;wreg free
  7636                           
  7637                           ;tela_ESTACIONARIA.h: 13: sprintf(&line3[16], "%3ds", tempo_limite_teste_estacionaria);
  7638  002714  0E89               	movlw	low (_line3+16)
  7639  002716  0100               	movlb	0	; () banked
  7640  002718  6FA1               	movwf	sprintf@wh& (0+255),b
  7641  00271A  0E01               	movlw	high (_line3+16)
  7642  00271C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7643  00271E  0EF8               	movlw	low STR_76
  7644  002720  6FA3               	movwf	sprintf@f& (0+255),b
  7645  002722  0E7F               	movlw	high STR_76
  7646  002724  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7647  002726  C0EA  F0A5         	movff	_tempo_limite_teste_estacionaria,?_sprintf+4
  7648  00272A  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7649  00272C  ECD4  F03B         	call	_sprintf	;wreg free
  7650                           
  7651                           ;tela_ESTACIONARIA.h: 14: sprintf(line4, "#horimetro:%5d min", horimetro);
  7652  002730  0E64               	movlw	low _line4
  7653  002732  0100               	movlb	0	; () banked
  7654  002734  6FA1               	movwf	sprintf@wh& (0+255),b
  7655  002736  0E01               	movlw	high _line4
  7656  002738  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7657  00273A  0E74               	movlw	low STR_79
  7658  00273C  6FA3               	movwf	sprintf@f& (0+255),b
  7659  00273E  0E7D               	movlw	high STR_79
  7660  002740  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7661  002742  C04F  F0A5         	movff	_horimetro,?_sprintf+4
  7662  002746  C050  F0A6         	movff	_horimetro+1,?_sprintf+5
  7663  00274A  ECD4  F03B         	call	_sprintf	;wreg free
  7664                           
  7665                           ;tela_ESTACIONARIA.h: 16: if (btPress(4)) {
  7666  00274E  0E04               	movlw	4
  7667  002750  ECC6  F01F         	call	_btPress
  7668  002754  0900               	iorlw	0
  7669  002756  B4D8               	btfsc	status,2,c
  7670  002758  D002               	goto	l769
  7671                           
  7672                           ;tela_ESTACIONARIA.h: 17: option_posi++;
  7673  00275A  0100               	movlb	0	; () banked
  7674  00275C  2BD8               	incf	_option_posi& (0+255),f,b
  7675  00275E                     l769:
  7676  00275E  FFFF               	dw	65535	; assembler added errata NOP
  7677                           
  7678                           ;tela_ESTACIONARIA.h: 18: }
  7679                           ;tela_ESTACIONARIA.h: 19: if (btPress(1)) {
  7680                           
  7681                           ; BSR set to: 0
  7682  002760  0E01               	movlw	1
  7683  002762  ECC6  F01F         	call	_btPress
  7684  002766  0900               	iorlw	0
  7685  002768  B4D8               	btfsc	status,2,c
  7686  00276A  D04E               	goto	l771
  7687                           
  7688                           ;tela_ESTACIONARIA.h: 20: writeEEPROM_ext(7, tempo_limite_estacionaria);
  7689  00276C  C0EE  F08C         	movff	_tempo_limite_estacionaria,writeEEPROM_ext@data
  7690  002770  0E07               	movlw	7
  7691  002772  ECB1  F03B         	call	_writeEEPROM_ext
  7692                           
  7693                           ;tela_ESTACIONARIA.h: 21: writeEEPROM_ext(13, tempo_limite_teste_estacionaria);
  7694  002776  C0EA  F08C         	movff	_tempo_limite_teste_estacionaria,writeEEPROM_ext@data
  7695  00277A  0E0D               	movlw	13
  7696  00277C  ECB1  F03B         	call	_writeEEPROM_ext
  7697                           
  7698                           ;tela_ESTACIONARIA.h: 22: option_posi = 0;
  7699  002780  0E00               	movlw	0
  7700  002782  0100               	movlb	0	; () banked
  7701  002784  6FD8               	movwf	_option_posi& (0+255),b
  7702                           
  7703                           ; BSR set to: 0
  7704                           ;tela_ESTACIONARIA.h: 23: menu_posi = _menu_posi;
  7705  002786  C0D6  F0D7         	movff	__menu_posi,_menu_posi
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;tela_ESTACIONARIA.h: 24: }
  7709                           ;tela_ESTACIONARIA.h: 25: switch (option_posi) {
  7710  00278A  D03E               	goto	l771
  7711  00278C  FFFF               	dw	65535	; assembler added errata NOP
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;tela_ESTACIONARIA.h: 27: blink(line2, 16,20 );
  7715                           
  7716                           ; BSR set to: 0
  7717  00278E  0E8E               	movlw	low _line2
  7718  002790  6F80               	movwf	blink@line& (0+255),b
  7719  002792  0E01               	movlw	high _line2
  7720  002794  6F81               	movwf	(blink@line+1)& (0+255),b
  7721  002796  0E10               	movlw	16
  7722  002798  6F82               	movwf	blink@start& (0+255),b
  7723  00279A  0E14               	movlw	20
  7724  00279C  6F83               	movwf	blink@end& (0+255),b
  7725  00279E  ECCE  F03A         	call	_blink	;wreg free
  7726                           
  7727                           ;tela_ESTACIONARIA.h: 28: if (btPress(3)) {
  7728  0027A2  0E03               	movlw	3
  7729  0027A4  ECC6  F01F         	call	_btPress
  7730  0027A8  0900               	iorlw	0
  7731  0027AA  B4D8               	btfsc	status,2,c
  7732  0027AC  D002               	goto	l773
  7733                           
  7734                           ;tela_ESTACIONARIA.h: 29: tempo_limite_estacionaria++;
  7735  0027AE  0100               	movlb	0	; () banked
  7736  0027B0  2BEE               	incf	_tempo_limite_estacionaria& (0+255),f,b
  7737  0027B2                     l773:
  7738  0027B2  FFFF               	dw	65535	; assembler added errata NOP
  7739                           
  7740                           ;tela_ESTACIONARIA.h: 30: }
  7741                           ;tela_ESTACIONARIA.h: 31: if (btPress(2)) {
  7742                           
  7743                           ; BSR set to: 0
  7744  0027B4  0E02               	movlw	2
  7745  0027B6  ECC6  F01F         	call	_btPress
  7746  0027BA  0900               	iorlw	0
  7747  0027BC  B4D8               	btfsc	status,2,c
  7748  0027BE  D02E               	goto	l775
  7749                           
  7750                           ;tela_ESTACIONARIA.h: 32: tempo_limite_estacionaria--;
  7751  0027C0  0100               	movlb	0	; () banked
  7752  0027C2  07EE               	decf	_tempo_limite_estacionaria& (0+255),f,b
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;tela_ESTACIONARIA.h: 33: }
  7756                           ;tela_ESTACIONARIA.h: 34: break;
  7757  0027C4  D02B               	goto	l775
  7758  0027C6  FFFF               	dw	65535	; assembler added errata NOP
  7759                           
  7760                           ; BSR set to: 0
  7761                           ;tela_ESTACIONARIA.h: 36: blink(line3, 16,20 );
  7762                           
  7763                           ; BSR set to: 0
  7764  0027C8  0E79               	movlw	low _line3
  7765  0027CA  6F80               	movwf	blink@line& (0+255),b
  7766  0027CC  0E01               	movlw	high _line3
  7767  0027CE  6F81               	movwf	(blink@line+1)& (0+255),b
  7768  0027D0  0E10               	movlw	16
  7769  0027D2  6F82               	movwf	blink@start& (0+255),b
  7770  0027D4  0E14               	movlw	20
  7771  0027D6  6F83               	movwf	blink@end& (0+255),b
  7772  0027D8  ECCE  F03A         	call	_blink	;wreg free
  7773                           
  7774                           ;tela_ESTACIONARIA.h: 37: if (btPress(3)) {
  7775  0027DC  0E03               	movlw	3
  7776  0027DE  ECC6  F01F         	call	_btPress
  7777  0027E2  0900               	iorlw	0
  7778  0027E4  B4D8               	btfsc	status,2,c
  7779  0027E6  D002               	goto	l777
  7780                           
  7781                           ;tela_ESTACIONARIA.h: 38: tempo_limite_teste_estacionaria++;
  7782  0027E8  0100               	movlb	0	; () banked
  7783  0027EA  2BEA               	incf	_tempo_limite_teste_estacionaria& (0+255),f,b
  7784  0027EC                     l777:
  7785  0027EC  FFFF               	dw	65535	; assembler added errata NOP
  7786                           
  7787                           ;tela_ESTACIONARIA.h: 39: }
  7788                           ;tela_ESTACIONARIA.h: 40: if (btPress(2)) {
  7789                           
  7790                           ; BSR set to: 0
  7791  0027EE  0E02               	movlw	2
  7792  0027F0  ECC6  F01F         	call	_btPress
  7793  0027F4  0900               	iorlw	0
  7794  0027F6  B4D8               	btfsc	status,2,c
  7795  0027F8  D011               	goto	l775
  7796                           
  7797                           ;tela_ESTACIONARIA.h: 41: tempo_limite_teste_estacionaria--;
  7798  0027FA  0100               	movlb	0	; () banked
  7799  0027FC  07EA               	decf	_tempo_limite_teste_estacionaria& (0+255),f,b
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;tela_ESTACIONARIA.h: 42: }
  7803                           ;tela_ESTACIONARIA.h: 43: break;
  7804  0027FE  D00E               	goto	l775
  7805  002800  FFFF               	dw	65535	; assembler added errata NOP
  7806                           
  7807                           ; BSR set to: 0
  7808                           
  7809                           ; BSR set to: 0
  7810  002802  0E00               	movlw	0
  7811  002804  6FD8               	movwf	_option_posi& (0+255),b
  7812                           
  7813                           ; BSR set to: 0
  7814                           ;tela_ESTACIONARIA.h: 46: }
  7815                           
  7816                           ;tela_ESTACIONARIA.h: 45: break;
  7817  002806  D00A               	goto	l775
  7818  002808                     l771:
  7819  002808  FFFF               	dw	65535	; assembler added errata NOP
  7820                           
  7821                           ; BSR set to: 0
  7822  00280A  0100               	movlb	0	; () banked
  7823  00280C  51D8               	movf	_option_posi& (0+255),w,b
  7824                           
  7825                           ; Switch size 1, requested type "space"
  7826                           ; Number of cases is 2, Range of values is 0 to 1
  7827                           ; switch strategies available:
  7828                           ; Name         Instructions Cycles
  7829                           ; simple_byte            7     4 (average)
  7830                           ;	Chosen strategy is simple_byte
  7831  00280E  0A00               	xorlw	0	; case 0
  7832  002810  B4D8               	btfsc	status,2,c
  7833  002812  D7BC               	goto	l772
  7834  002814  0A01               	xorlw	1	; case 1
  7835  002816  B4D8               	btfsc	status,2,c
  7836  002818  D7D6               	goto	l776
  7837  00281A  D7F2               	goto	l779
  7838  00281C                     l775:
  7839  00281C  FFFF               	dw	65535	; assembler added errata NOP
  7840                           
  7841                           ; BSR set to: 0
  7842  00281E  0012               	return		;funcret
  7843  002820  FFFF               	dw	65535	; errata NOP
  7844  002822                     __end_of_configurarEstacionaria:
  7845                           	opt stack 0
  7846                           tblptru	equ	0xFF8
  7847                           tblptrh	equ	0xFF7
  7848                           tblptrl	equ	0xFF6
  7849                           tablat	equ	0xFF5
  7850                           prodh	equ	0xFF4
  7851                           prodl	equ	0xFF3
  7852                           indf0	equ	0xFEF
  7853                           postinc0	equ	0xFEE
  7854                           fsr0h	equ	0xFEA
  7855                           fsr0l	equ	0xFE9
  7856                           wreg	equ	0xFE8
  7857                           postdec1	equ	0xFE5
  7858                           fsr1l	equ	0xFE1
  7859                           indf2	equ	0xFDF
  7860                           postinc2	equ	0xFDE
  7861                           fsr2h	equ	0xFDA
  7862                           fsr2l	equ	0xFD9
  7863                           status	equ	0xFD8
  7864                           
  7865 ;; *************** function _configuraTelefones *****************
  7866 ;; Defined at:
  7867 ;;		line 9 in file "tela_TELEFONES.h"
  7868 ;; Parameters:    Size  Location     Type
  7869 ;;		None
  7870 ;; Auto vars:     Size  Location     Type
  7871 ;;  i               1   61[BANK0 ] unsigned char 
  7872 ;; Return value:  Size  Location     Type
  7873 ;;                  1    wreg      void 
  7874 ;; Registers used:
  7875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7876 ;; Tracked objects:
  7877 ;;		On entry : 0/0
  7878 ;;		On exit  : 0/0
  7879 ;;		Unchanged: 0/0
  7880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7881 ;;      Params:         0       0       0       0       0       0       0
  7882 ;;      Locals:         0       5       0       0       0       0       0
  7883 ;;      Temps:          0       2       0       0       0       0       0
  7884 ;;      Totals:         0       7       0       0       0       0       0
  7885 ;;Total ram usage:        7 bytes
  7886 ;; Hardware stack levels used:    1
  7887 ;; Hardware stack levels required when called:    9
  7888 ;; This function calls:
  7889 ;;		_blink
  7890 ;;		_btPress
  7891 ;;		_sprintf
  7892 ;;		_writeEEPROM_ext
  7893 ;; This function is called by:
  7894 ;;		_main
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           	psect	text26
  7899  00185E                     __ptext26:
  7900                           	opt stack 0
  7901  00185E                     _configuraTelefones:
  7902                           	opt stack 0
  7903  00185E  FFFF               	dw	65535	; assembler added errata NOP
  7904                           
  7905                           ;tela_TELEFONES.h: 10: sprintf(&line1[1], "T1: %s", tel1);
  7906                           
  7907                           ;incstack = 0
  7908  001860  0EA4               	movlw	low (_line1+1)
  7909  001862  0100               	movlb	0	; () banked
  7910  001864  6FA1               	movwf	sprintf@wh& (0+255),b
  7911  001866  0E01               	movlw	high (_line1+1)
  7912  001868  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7913  00186A  0EC4               	movlw	low STR_66
  7914  00186C  6FA3               	movwf	sprintf@f& (0+255),b
  7915  00186E  0E7F               	movlw	high STR_66
  7916  001870  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7917  001872  0ED8               	movlw	low _tel1
  7918  001874  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  7919  001876  0E01               	movlw	high _tel1
  7920  001878  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  7921  00187A  ECD4  F03B         	call	_sprintf	;wreg free
  7922                           
  7923                           ;tela_TELEFONES.h: 11: sprintf(&line2[1], "T2: %s", tel2);
  7924  00187E  0E8F               	movlw	low (_line2+1)
  7925  001880  0100               	movlb	0	; () banked
  7926  001882  6FA1               	movwf	sprintf@wh& (0+255),b
  7927  001884  0E01               	movlw	high (_line2+1)
  7928  001886  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7929  001888  0ECB               	movlw	low STR_67
  7930  00188A  6FA3               	movwf	sprintf@f& (0+255),b
  7931  00188C  0E7F               	movlw	high STR_67
  7932  00188E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7933  001890  0ECC               	movlw	low _tel2
  7934  001892  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  7935  001894  0E01               	movlw	high _tel2
  7936  001896  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  7937  001898  ECD4  F03B         	call	_sprintf	;wreg free
  7938                           
  7939                           ;tela_TELEFONES.h: 12: sprintf(&line3[1], "%s", teste_sms_run == 1 ? "ENVIANDO SMS... " 
      +                          : "ENVIAR SMS TESTE");
  7940  00189C  0100               	movlb	0	; () banked
  7941  00189E  05E5               	decf	_teste_sms_run& (0+255),w,b
  7942  0018A0  B4D8               	btfsc	status,2,c
  7943  0018A2  D004               	goto	l721
  7944                           
  7945                           ; BSR set to: 0
  7946  0018A4  0E03               	movlw	low STR_70
  7947  0018A6  6FB9               	movwf	_configuraTelefones$1409& (0+255),b
  7948  0018A8  0E7E               	movlw	high STR_70
  7949  0018AA  D004               	goto	L14
  7950  0018AC                     l721:
  7951  0018AC  FFFF               	dw	65535	; assembler added errata NOP
  7952                           
  7953                           ; BSR set to: 0
  7954                           
  7955                           ; BSR set to: 0
  7956  0018AE  0EBF               	movlw	low STR_69
  7957  0018B0  6FB9               	movwf	_configuraTelefones$1409& (0+255),b
  7958  0018B2  0E7D               	movlw	high STR_69
  7959  0018B4                     L14:
  7960  0018B4  FFFF               	dw	65535	; assembler added errata NOP
  7961  0018B6  6FBA               	movwf	(_configuraTelefones$1409+1)& (0+255),b
  7962                           
  7963                           ; BSR set to: 0
  7964                           
  7965                           ; BSR set to: 0
  7966  0018B8  0E7A               	movlw	low (_line3+1)
  7967  0018BA  6FA1               	movwf	sprintf@wh& (0+255),b
  7968  0018BC  0E01               	movlw	high (_line3+1)
  7969  0018BE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7970  0018C0  0E5A               	movlw	low (STR_64+9)
  7971  0018C2  6FA3               	movwf	sprintf@f& (0+255),b
  7972  0018C4  0E7F               	movlw	high (STR_64+9)
  7973  0018C6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7974  0018C8  C0B9  F0A5         	movff	_configuraTelefones$1409,?_sprintf+4
  7975  0018CC  C0BA  F0A6         	movff	_configuraTelefones$1409+1,?_sprintf+5
  7976  0018D0  ECD4  F03B         	call	_sprintf	;wreg free
  7977                           
  7978                           ;tela_TELEFONES.h: 13: sprintf(&line4[1], "GSM: %s", status_SIM800L == 1 ? "OK  " : "ERR
      +                          O");
  7979  0018D4  0100               	movlb	0	; () banked
  7980  0018D6  05EF               	decf	_status_SIM800L& (0+255),w,b
  7981  0018D8  B4D8               	btfsc	status,2,c
  7982  0018DA  D004               	goto	l725
  7983                           
  7984                           ; BSR set to: 0
  7985  0018DC  0EEE               	movlw	low STR_26
  7986  0018DE  6FBB               	movwf	_configuraTelefones$1414& (0+255),b
  7987  0018E0  0E7F               	movlw	high STR_26
  7988  0018E2  D004               	goto	L15
  7989  0018E4                     l725:
  7990  0018E4  FFFF               	dw	65535	; assembler added errata NOP
  7991                           
  7992                           ; BSR set to: 0
  7993                           
  7994                           ; BSR set to: 0
  7995  0018E6  0EE9               	movlw	low STR_72
  7996  0018E8  6FBB               	movwf	_configuraTelefones$1414& (0+255),b
  7997  0018EA  0E7F               	movlw	high STR_72
  7998  0018EC                     L15:
  7999  0018EC  FFFF               	dw	65535	; assembler added errata NOP
  8000  0018EE  6FBC               	movwf	(_configuraTelefones$1414+1)& (0+255),b
  8001                           
  8002                           ; BSR set to: 0
  8003                           
  8004                           ; BSR set to: 0
  8005  0018F0  0E65               	movlw	low (_line4+1)
  8006  0018F2  6FA1               	movwf	sprintf@wh& (0+255),b
  8007  0018F4  0E01               	movlw	high (_line4+1)
  8008  0018F6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8009  0018F8  0EA7               	movlw	low STR_71
  8010  0018FA  6FA3               	movwf	sprintf@f& (0+255),b
  8011  0018FC  0E7F               	movlw	high STR_71
  8012  0018FE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8013  001900  C0BB  F0A5         	movff	_configuraTelefones$1414,?_sprintf+4
  8014  001904  C0BC  F0A6         	movff	_configuraTelefones$1414+1,?_sprintf+5
  8015  001908  ECD4  F03B         	call	_sprintf	;wreg free
  8016                           
  8017                           ;tela_TELEFONES.h: 15: if (ajust_tel == 0) {
  8018  00190C  0100               	movlb	0	; () banked
  8019  00190E  51D4               	movf	_ajust_tel& (0+255),w,b
  8020  001910  A4D8               	btfss	status,2,c
  8021  001912  D052               	goto	l733
  8022                           
  8023                           ; BSR set to: 0
  8024                           ;tela_TELEFONES.h: 16: if (btPress(3)) {
  8025  001914  0E03               	movlw	3
  8026  001916  ECC6  F01F         	call	_btPress
  8027  00191A  0900               	iorlw	0
  8028  00191C  B4D8               	btfsc	status,2,c
  8029  00191E  D003               	goto	l729
  8030                           
  8031                           ;tela_TELEFONES.h: 17: option_posi--;
  8032  001920  0100               	movlb	0	; () banked
  8033  001922  07D8               	decf	_option_posi& (0+255),f,b
  8034                           
  8035                           ;tela_TELEFONES.h: 18: } else if (btPress(2)) {
  8036  001924  D049               	goto	l733
  8037  001926                     l729:
  8038  001926  FFFF               	dw	65535	; assembler added errata NOP
  8039                           
  8040                           ; BSR set to: 0
  8041  001928  0E02               	movlw	2
  8042  00192A  ECC6  F01F         	call	_btPress
  8043  00192E  0900               	iorlw	0
  8044  001930  B4D8               	btfsc	status,2,c
  8045  001932  D003               	goto	l731
  8046                           
  8047                           ;tela_TELEFONES.h: 19: option_posi++;
  8048  001934  0100               	movlb	0	; () banked
  8049  001936  2BD8               	incf	_option_posi& (0+255),f,b
  8050                           
  8051                           ;tela_TELEFONES.h: 20: } else if (btPress(1)) {
  8052  001938  D03F               	goto	l733
  8053  00193A                     l731:
  8054  00193A  FFFF               	dw	65535	; assembler added errata NOP
  8055                           
  8056                           ; BSR set to: 0
  8057  00193C  0E01               	movlw	1
  8058  00193E  ECC6  F01F         	call	_btPress
  8059  001942  0900               	iorlw	0
  8060  001944  B4D8               	btfsc	status,2,c
  8061  001946  D038               	goto	l733
  8062                           
  8063                           ;tela_TELEFONES.h: 21: teste_sms_run = 0;
  8064  001948  0E00               	movlw	0
  8065  00194A  0100               	movlb	0	; () banked
  8066  00194C  6FE5               	movwf	_teste_sms_run& (0+255),b
  8067                           
  8068                           ;tela_TELEFONES.h: 22: tempo_reenvio_SMS = 5;
  8069  00194E  0E05               	movlw	5
  8070  001950  6E72               	movwf	_tempo_reenvio_SMS,c
  8071                           
  8072                           ;tela_TELEFONES.h: 23: option_posi = 0;
  8073  001952  0E00               	movlw	0
  8074  001954  6FD8               	movwf	_option_posi& (0+255),b
  8075                           
  8076                           ;tela_TELEFONES.h: 24: tel_posi = 0;
  8077  001956  0E00               	movlw	0
  8078  001958  6FD5               	movwf	_tel_posi& (0+255),b
  8079                           
  8080                           ;tela_TELEFONES.h: 25: ajust_tel = 0;
  8081  00195A  0E00               	movlw	0
  8082  00195C  6FD4               	movwf	_ajust_tel& (0+255),b
  8083                           
  8084                           ;tela_TELEFONES.h: 26: char i = 0;
  8085  00195E  0E00               	movlw	0
  8086  001960  6FBD               	movwf	configuraTelefones@i& (0+255),b
  8087                           
  8088                           ;tela_TELEFONES.h: 27: for (i = 0; i < 11; i++) {
  8089  001962  0E00               	movlw	0
  8090  001964  6FBD               	movwf	configuraTelefones@i& (0+255),b
  8091  001966                     l12553:
  8092  001966  FFFF               	dw	65535	; assembler added errata NOP
  8093                           
  8094                           ; BSR set to: 0
  8095  001968  0E0A               	movlw	10
  8096  00196A  65BD               	cpfsgt	configuraTelefones@i& (0+255),b
  8097  00196C  D001               	goto	l734
  8098  00196E  D021               	goto	u18280
  8099  001970                     l734:
  8100  001970  FFFF               	dw	65535	; assembler added errata NOP
  8101                           
  8102                           ; BSR set to: 0
  8103                           ;tela_TELEFONES.h: 28: writeEEPROM_ext((20 + i), tel1[i]);
  8104                           
  8105                           ; BSR set to: 0
  8106  001972  51BD               	movf	configuraTelefones@i& (0+255),w,b
  8107  001974  0D01               	mullw	1
  8108  001976  0ED8               	movlw	low _tel1
  8109  001978  24F3               	addwf	prodl,w,c
  8110  00197A  6ED9               	movwf	fsr2l,c
  8111  00197C  0E01               	movlw	high _tel1
  8112  00197E  20F4               	addwfc	prodh,w,c
  8113  001980  6EDA               	movwf	fsr2h,c
  8114  001982  50DF               	movf	indf2,w,c
  8115  001984  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8116  001986  51BD               	movf	configuraTelefones@i& (0+255),w,b
  8117  001988  0F14               	addlw	20
  8118  00198A  ECB1  F03B         	call	_writeEEPROM_ext
  8119                           
  8120                           ;tela_TELEFONES.h: 29: writeEEPROM_ext((40 + i), tel2[i]);
  8121  00198E  0100               	movlb	0	; () banked
  8122  001990  51BD               	movf	configuraTelefones@i& (0+255),w,b
  8123  001992  0D01               	mullw	1
  8124  001994  0ECC               	movlw	low _tel2
  8125  001996  24F3               	addwf	prodl,w,c
  8126  001998  6ED9               	movwf	fsr2l,c
  8127  00199A  0E01               	movlw	high _tel2
  8128  00199C  20F4               	addwfc	prodh,w,c
  8129  00199E  6EDA               	movwf	fsr2h,c
  8130  0019A0  50DF               	movf	indf2,w,c
  8131  0019A2  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8132  0019A4  51BD               	movf	configuraTelefones@i& (0+255),w,b
  8133  0019A6  0F28               	addlw	40
  8134  0019A8  ECB1  F03B         	call	_writeEEPROM_ext
  8135  0019AC  0100               	movlb	0	; () banked
  8136  0019AE  2BBD               	incf	configuraTelefones@i& (0+255),f,b
  8137  0019B0  D7DA               	goto	l12553
  8138  0019B2                     u18280:
  8139  0019B2  FFFF               	dw	65535	; assembler added errata NOP
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;tela_TELEFONES.h: 30: }
  8143                           ;tela_TELEFONES.h: 31: menu_posi = _menu_posi;
  8144  0019B4  C0D6  F0D7         	movff	__menu_posi,_menu_posi
  8145  0019B8                     l733:
  8146  0019B8  FFFF               	dw	65535	; assembler added errata NOP
  8147                           
  8148                           ;tela_TELEFONES.h: 32: }
  8149                           ;tela_TELEFONES.h: 34: }
  8150                           ;tela_TELEFONES.h: 35: if (ajust_tel == 1) {
  8151                           
  8152                           ; BSR set to: 0
  8153                           
  8154                           ; BSR set to: 0
  8155                           
  8156                           ; BSR set to: 0
  8157                           
  8158                           ; BSR set to: 0
  8159  0019BA  0100               	movlb	0	; () banked
  8160  0019BC  05D4               	decf	_ajust_tel& (0+255),w,b
  8161  0019BE  A4D8               	btfss	status,2,c
  8162  0019C0  D119               	goto	l740
  8163                           
  8164                           ; BSR set to: 0
  8165                           ;tela_TELEFONES.h: 36: if (btPress(4)) {
  8166  0019C2  0E04               	movlw	4
  8167  0019C4  ECC6  F01F         	call	_btPress
  8168  0019C8  0900               	iorlw	0
  8169  0019CA  B4D8               	btfsc	status,2,c
  8170  0019CC  D003               	goto	l737
  8171                           
  8172                           ;tela_TELEFONES.h: 37: tel_posi++;
  8173  0019CE  0100               	movlb	0	; () banked
  8174  0019D0  2BD5               	incf	_tel_posi& (0+255),f,b
  8175                           
  8176                           ;tela_TELEFONES.h: 38: } else if (btPress(1)) {
  8177  0019D2  D110               	goto	l740
  8178  0019D4                     l737:
  8179  0019D4  FFFF               	dw	65535	; assembler added errata NOP
  8180                           
  8181                           ; BSR set to: 0
  8182  0019D6  0E01               	movlw	1
  8183  0019D8  ECC6  F01F         	call	_btPress
  8184  0019DC  0900               	iorlw	0
  8185  0019DE  B4D8               	btfsc	status,2,c
  8186  0019E0  D109               	goto	l740
  8187                           
  8188                           ;tela_TELEFONES.h: 39: tel_posi = 0;
  8189  0019E2  0E00               	movlw	0
  8190  0019E4  0100               	movlb	0	; () banked
  8191  0019E6  6FD5               	movwf	_tel_posi& (0+255),b
  8192                           
  8193                           ;tela_TELEFONES.h: 40: ajust_tel = 0;
  8194  0019E8  0E00               	movlw	0
  8195  0019EA  6FD4               	movwf	_ajust_tel& (0+255),b
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;tela_TELEFONES.h: 41: }
  8199                           ;tela_TELEFONES.h: 42: }
  8200                           ;tela_TELEFONES.h: 45: switch (option_posi) {
  8201                           
  8202                           ; BSR set to: 0
  8203                           
  8204                           ; BSR set to: 0
  8205  0019EC  D103               	goto	l740
  8206  0019EE  FFFF               	dw	65535	; assembler added errata NOP
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;tela_TELEFONES.h: 48: option_posi = 1;
  8210                           
  8211                           ; BSR set to: 0
  8212  0019F0  0E01               	movlw	1
  8213  0019F2  D0FD               	goto	L16
  8214  0019F4  FFFF               	dw	65535	; assembler added errata NOP
  8215                           
  8216                           ; BSR set to: 0
  8217                           ;tela_TELEFONES.h: 52: line1[0] = '>';
  8218                           
  8219                           ; BSR set to: 0
  8220  0019F6  0E3E               	movlw	62
  8221  0019F8  0101               	movlb	1	; () banked
  8222  0019FA  6FA3               	movwf	_line1& (0+255),b
  8223                           
  8224                           ; BSR set to: 1
  8225                           ;tela_TELEFONES.h: 53: if (btPress(4)) {
  8226  0019FC  0E04               	movlw	4
  8227  0019FE  ECC6  F01F         	call	_btPress
  8228  001A02  0900               	iorlw	0
  8229  001A04  B4D8               	btfsc	status,2,c
  8230  001A06  D003               	goto	l744
  8231                           
  8232                           ;tela_TELEFONES.h: 54: ajust_tel = 1;
  8233  001A08  0E01               	movlw	1
  8234  001A0A  0100               	movlb	0	; () banked
  8235  001A0C  6FD4               	movwf	_ajust_tel& (0+255),b
  8236  001A0E                     l744:
  8237  001A0E  FFFF               	dw	65535	; assembler added errata NOP
  8238                           
  8239                           ;tela_TELEFONES.h: 55: }
  8240                           ;tela_TELEFONES.h: 56: if (ajust_tel) {
  8241  001A10  0100               	movlb	0	; () banked
  8242  001A12  51D4               	movf	_ajust_tel& (0+255),w,b
  8243  001A14  B4D8               	btfsc	status,2,c
  8244  001A16  D0FE               	goto	l742
  8245                           
  8246                           ; BSR set to: 0
  8247                           ;tela_TELEFONES.h: 57: blink(line1, (tel_posi + 6), (tel_posi + 6));
  8248  001A18  0EA3               	movlw	low _line1
  8249  001A1A  6F80               	movwf	blink@line& (0+255),b
  8250  001A1C  0E01               	movlw	high _line1
  8251  001A1E  6F81               	movwf	(blink@line+1)& (0+255),b
  8252  001A20  51D5               	movf	_tel_posi& (0+255),w,b
  8253  001A22  0F06               	addlw	6
  8254  001A24  6F82               	movwf	blink@start& (0+255),b
  8255  001A26  51D5               	movf	_tel_posi& (0+255),w,b
  8256  001A28  0F06               	addlw	6
  8257  001A2A  6F83               	movwf	blink@end& (0+255),b
  8258  001A2C  ECCE  F03A         	call	_blink	;wreg free
  8259                           
  8260                           ;tela_TELEFONES.h: 58: if ((tel_posi + 2) > sizeof (tel1)) {
  8261  001A30  0100               	movlb	0	; () banked
  8262  001A32  51D5               	movf	_tel_posi& (0+255),w,b
  8263  001A34  6FB7               	movwf	??_configuraTelefones& (0+255),b
  8264  001A36  6BB8               	clrf	(??_configuraTelefones+1)& (0+255),b
  8265  001A38  0E02               	movlw	2
  8266  001A3A  27B7               	addwf	??_configuraTelefones& (0+255),f,b
  8267  001A3C  0E00               	movlw	0
  8268  001A3E  23B8               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8269  001A40  51B8               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8270  001A42  E104               	bnz	u18340
  8271  001A44  0E0D               	movlw	13
  8272  001A46  5DB7               	subwf	??_configuraTelefones& (0+255),w,b
  8273  001A48  A0D8               	btfss	status,0,c
  8274  001A4A  D004               	goto	l746
  8275  001A4C                     u18340:
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;tela_TELEFONES.h: 59: tel_posi = 0;
  8279  001A4C  0E00               	movlw	0
  8280  001A4E  6FD5               	movwf	_tel_posi& (0+255),b
  8281                           
  8282                           ;tela_TELEFONES.h: 60: ajust_tel = 0;
  8283  001A50  0E00               	movlw	0
  8284  001A52  6FD4               	movwf	_ajust_tel& (0+255),b
  8285  001A54                     l746:
  8286  001A54  FFFF               	dw	65535	; assembler added errata NOP
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;tela_TELEFONES.h: 61: }
  8290                           ;tela_TELEFONES.h: 62: if (btPress(3)) {
  8291                           
  8292                           ; BSR set to: 0
  8293  001A56  0E03               	movlw	3
  8294  001A58  ECC6  F01F         	call	_btPress
  8295  001A5C  0900               	iorlw	0
  8296  001A5E  B4D8               	btfsc	status,2,c
  8297  001A60  D00A               	goto	l747
  8298                           
  8299                           ;tela_TELEFONES.h: 63: tel1[tel_posi]++;
  8300  001A62  0100               	movlb	0	; () banked
  8301  001A64  51D5               	movf	_tel_posi& (0+255),w,b
  8302  001A66  0D01               	mullw	1
  8303  001A68  0ED8               	movlw	low _tel1
  8304  001A6A  24F3               	addwf	prodl,w,c
  8305  001A6C  6ED9               	movwf	fsr2l,c
  8306  001A6E  0E01               	movlw	high _tel1
  8307  001A70  20F4               	addwfc	prodh,w,c
  8308  001A72  6EDA               	movwf	fsr2h,c
  8309  001A74  2ADF               	incf	indf2,f,c
  8310  001A76                     l747:
  8311  001A76  FFFF               	dw	65535	; assembler added errata NOP
  8312                           
  8313                           ;tela_TELEFONES.h: 64: }
  8314                           ;tela_TELEFONES.h: 65: if (btPress(2)) {
  8315                           
  8316                           ; BSR set to: 0
  8317  001A78  0E02               	movlw	2
  8318  001A7A  ECC6  F01F         	call	_btPress
  8319  001A7E  0900               	iorlw	0
  8320  001A80  B4D8               	btfsc	status,2,c
  8321  001A82  D00A               	goto	l748
  8322                           
  8323                           ;tela_TELEFONES.h: 66: tel1[tel_posi]--;
  8324  001A84  0100               	movlb	0	; () banked
  8325  001A86  51D5               	movf	_tel_posi& (0+255),w,b
  8326  001A88  0D01               	mullw	1
  8327  001A8A  0ED8               	movlw	low _tel1
  8328  001A8C  24F3               	addwf	prodl,w,c
  8329  001A8E  6ED9               	movwf	fsr2l,c
  8330  001A90  0E01               	movlw	high _tel1
  8331  001A92  20F4               	addwfc	prodh,w,c
  8332  001A94  6EDA               	movwf	fsr2h,c
  8333  001A96  06DF               	decf	indf2,f,c
  8334  001A98                     l748:
  8335  001A98  FFFF               	dw	65535	; assembler added errata NOP
  8336                           
  8337                           ;tela_TELEFONES.h: 67: }
  8338                           ;tela_TELEFONES.h: 68: if ((tel1[tel_posi] > 57) | (tel1[tel_posi] < 48)) {
  8339  001A9A  0100               	movlb	0	; () banked
  8340  001A9C  51D5               	movf	_tel_posi& (0+255),w,b
  8341  001A9E  0D01               	mullw	1
  8342  001AA0  0ED8               	movlw	low _tel1
  8343  001AA2  24F3               	addwf	prodl,w,c
  8344  001AA4  6ED9               	movwf	fsr2l,c
  8345  001AA6  0E01               	movlw	high _tel1
  8346  001AA8  20F4               	addwfc	prodh,w,c
  8347  001AAA  6EDA               	movwf	fsr2h,c
  8348  001AAC  0E3A               	movlw	58
  8349  001AAE  60DF               	cpfslt	indf2,c
  8350  001AB0  D00B               	goto	u18380
  8351                           
  8352                           ; BSR set to: 0
  8353  001AB2  51D5               	movf	_tel_posi& (0+255),w,b
  8354  001AB4  0D01               	mullw	1
  8355  001AB6  0ED8               	movlw	low _tel1
  8356  001AB8  24F3               	addwf	prodl,w,c
  8357  001ABA  6ED9               	movwf	fsr2l,c
  8358  001ABC  0E01               	movlw	high _tel1
  8359  001ABE  20F4               	addwfc	prodh,w,c
  8360  001AC0  6EDA               	movwf	fsr2h,c
  8361  001AC2  0E30               	movlw	48
  8362  001AC4  60DF               	cpfslt	indf2,c
  8363  001AC6  D0A6               	goto	l742
  8364  001AC8                     u18380:
  8365  001AC8  FFFF               	dw	65535	; assembler added errata NOP
  8366                           
  8367                           ; BSR set to: 0
  8368                           ;tela_TELEFONES.h: 69: tel1[tel_posi] = 48;
  8369                           
  8370                           ; BSR set to: 0
  8371  001ACA  51D5               	movf	_tel_posi& (0+255),w,b
  8372  001ACC  0D01               	mullw	1
  8373  001ACE  0ED8               	movlw	low _tel1
  8374  001AD0  24F3               	addwf	prodl,w,c
  8375  001AD2  6ED9               	movwf	fsr2l,c
  8376  001AD4  0E01               	movlw	high _tel1
  8377  001AD6  D071               	goto	L17
  8378  001AD8  FFFF               	dw	65535	; assembler added errata NOP
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;tela_TELEFONES.h: 74: line2[0] = '>';
  8382                           
  8383                           ; BSR set to: 0
  8384  001ADA  0E3E               	movlw	62
  8385  001ADC  0101               	movlb	1	; () banked
  8386  001ADE  6F8E               	movwf	_line2& (0+255),b
  8387                           
  8388                           ; BSR set to: 1
  8389                           ;tela_TELEFONES.h: 75: if (btPress(4)) {
  8390  001AE0  0E04               	movlw	4
  8391  001AE2  ECC6  F01F         	call	_btPress
  8392  001AE6  0900               	iorlw	0
  8393  001AE8  B4D8               	btfsc	status,2,c
  8394  001AEA  D003               	goto	l753
  8395                           
  8396                           ;tela_TELEFONES.h: 76: ajust_tel = 1;
  8397  001AEC  0E01               	movlw	1
  8398  001AEE  0100               	movlb	0	; () banked
  8399  001AF0  6FD4               	movwf	_ajust_tel& (0+255),b
  8400  001AF2                     l753:
  8401  001AF2  FFFF               	dw	65535	; assembler added errata NOP
  8402                           
  8403                           ;tela_TELEFONES.h: 77: }
  8404                           ;tela_TELEFONES.h: 78: if (ajust_tel) {
  8405  001AF4  0100               	movlb	0	; () banked
  8406  001AF6  51D4               	movf	_ajust_tel& (0+255),w,b
  8407  001AF8  B4D8               	btfsc	status,2,c
  8408  001AFA  D08C               	goto	l742
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;tela_TELEFONES.h: 79: blink(line2, (tel_posi + 6), (tel_posi + 6));
  8412  001AFC  0E8E               	movlw	low _line2
  8413  001AFE  6F80               	movwf	blink@line& (0+255),b
  8414  001B00  0E01               	movlw	high _line2
  8415  001B02  6F81               	movwf	(blink@line+1)& (0+255),b
  8416  001B04  51D5               	movf	_tel_posi& (0+255),w,b
  8417  001B06  0F06               	addlw	6
  8418  001B08  6F82               	movwf	blink@start& (0+255),b
  8419  001B0A  51D5               	movf	_tel_posi& (0+255),w,b
  8420  001B0C  0F06               	addlw	6
  8421  001B0E  6F83               	movwf	blink@end& (0+255),b
  8422  001B10  ECCE  F03A         	call	_blink	;wreg free
  8423                           
  8424                           ;tela_TELEFONES.h: 80: if ((tel_posi + 2) > sizeof (tel2)) {
  8425  001B14  0100               	movlb	0	; () banked
  8426  001B16  51D5               	movf	_tel_posi& (0+255),w,b
  8427  001B18  6FB7               	movwf	??_configuraTelefones& (0+255),b
  8428  001B1A  6BB8               	clrf	(??_configuraTelefones+1)& (0+255),b
  8429  001B1C  0E02               	movlw	2
  8430  001B1E  27B7               	addwf	??_configuraTelefones& (0+255),f,b
  8431  001B20  0E00               	movlw	0
  8432  001B22  23B8               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8433  001B24  51B8               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8434  001B26  E104               	bnz	u18410
  8435  001B28  0E0D               	movlw	13
  8436  001B2A  5DB7               	subwf	??_configuraTelefones& (0+255),w,b
  8437  001B2C  A0D8               	btfss	status,0,c
  8438  001B2E  D004               	goto	l755
  8439  001B30                     u18410:
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;tela_TELEFONES.h: 81: tel_posi = 0;
  8443  001B30  0E00               	movlw	0
  8444  001B32  6FD5               	movwf	_tel_posi& (0+255),b
  8445                           
  8446                           ;tela_TELEFONES.h: 82: ajust_tel = 0;
  8447  001B34  0E00               	movlw	0
  8448  001B36  6FD4               	movwf	_ajust_tel& (0+255),b
  8449  001B38                     l755:
  8450  001B38  FFFF               	dw	65535	; assembler added errata NOP
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;tela_TELEFONES.h: 83: }
  8454                           ;tela_TELEFONES.h: 84: if (btPress(3)) {
  8455                           
  8456                           ; BSR set to: 0
  8457  001B3A  0E03               	movlw	3
  8458  001B3C  ECC6  F01F         	call	_btPress
  8459  001B40  0900               	iorlw	0
  8460  001B42  B4D8               	btfsc	status,2,c
  8461  001B44  D00A               	goto	l756
  8462                           
  8463                           ;tela_TELEFONES.h: 85: tel2[tel_posi]++;
  8464  001B46  0100               	movlb	0	; () banked
  8465  001B48  51D5               	movf	_tel_posi& (0+255),w,b
  8466  001B4A  0D01               	mullw	1
  8467  001B4C  0ECC               	movlw	low _tel2
  8468  001B4E  24F3               	addwf	prodl,w,c
  8469  001B50  6ED9               	movwf	fsr2l,c
  8470  001B52  0E01               	movlw	high _tel2
  8471  001B54  20F4               	addwfc	prodh,w,c
  8472  001B56  6EDA               	movwf	fsr2h,c
  8473  001B58  2ADF               	incf	indf2,f,c
  8474  001B5A                     l756:
  8475  001B5A  FFFF               	dw	65535	; assembler added errata NOP
  8476                           
  8477                           ;tela_TELEFONES.h: 86: }
  8478                           ;tela_TELEFONES.h: 87: if (btPress(2)) {
  8479                           
  8480                           ; BSR set to: 0
  8481  001B5C  0E02               	movlw	2
  8482  001B5E  ECC6  F01F         	call	_btPress
  8483  001B62  0900               	iorlw	0
  8484  001B64  B4D8               	btfsc	status,2,c
  8485  001B66  D00A               	goto	l757
  8486                           
  8487                           ;tela_TELEFONES.h: 88: tel2[tel_posi]--;
  8488  001B68  0100               	movlb	0	; () banked
  8489  001B6A  51D5               	movf	_tel_posi& (0+255),w,b
  8490  001B6C  0D01               	mullw	1
  8491  001B6E  0ECC               	movlw	low _tel2
  8492  001B70  24F3               	addwf	prodl,w,c
  8493  001B72  6ED9               	movwf	fsr2l,c
  8494  001B74  0E01               	movlw	high _tel2
  8495  001B76  20F4               	addwfc	prodh,w,c
  8496  001B78  6EDA               	movwf	fsr2h,c
  8497  001B7A  06DF               	decf	indf2,f,c
  8498  001B7C                     l757:
  8499  001B7C  FFFF               	dw	65535	; assembler added errata NOP
  8500                           
  8501                           ;tela_TELEFONES.h: 89: }
  8502                           ;tela_TELEFONES.h: 90: if ((tel2[tel_posi] > 57) | (tel2[tel_posi] < 48)) {
  8503  001B7E  0100               	movlb	0	; () banked
  8504  001B80  51D5               	movf	_tel_posi& (0+255),w,b
  8505  001B82  0D01               	mullw	1
  8506  001B84  0ECC               	movlw	low _tel2
  8507  001B86  24F3               	addwf	prodl,w,c
  8508  001B88  6ED9               	movwf	fsr2l,c
  8509  001B8A  0E01               	movlw	high _tel2
  8510  001B8C  20F4               	addwfc	prodh,w,c
  8511  001B8E  6EDA               	movwf	fsr2h,c
  8512  001B90  0E3A               	movlw	58
  8513  001B92  60DF               	cpfslt	indf2,c
  8514  001B94  D00B               	goto	u18450
  8515                           
  8516                           ; BSR set to: 0
  8517  001B96  51D5               	movf	_tel_posi& (0+255),w,b
  8518  001B98  0D01               	mullw	1
  8519  001B9A  0ECC               	movlw	low _tel2
  8520  001B9C  24F3               	addwf	prodl,w,c
  8521  001B9E  6ED9               	movwf	fsr2l,c
  8522  001BA0  0E01               	movlw	high _tel2
  8523  001BA2  20F4               	addwfc	prodh,w,c
  8524  001BA4  6EDA               	movwf	fsr2h,c
  8525  001BA6  0E30               	movlw	48
  8526  001BA8  60DF               	cpfslt	indf2,c
  8527  001BAA  D034               	goto	l742
  8528  001BAC                     u18450:
  8529  001BAC  FFFF               	dw	65535	; assembler added errata NOP
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;tela_TELEFONES.h: 91: tel2[tel_posi] = 48;
  8533                           
  8534                           ; BSR set to: 0
  8535  001BAE  51D5               	movf	_tel_posi& (0+255),w,b
  8536  001BB0  0D01               	mullw	1
  8537  001BB2  0ECC               	movlw	low _tel2
  8538  001BB4  24F3               	addwf	prodl,w,c
  8539  001BB6  6ED9               	movwf	fsr2l,c
  8540  001BB8  0E01               	movlw	high _tel2
  8541  001BBA                     L17:
  8542  001BBA  FFFF               	dw	65535	; assembler added errata NOP
  8543  001BBC  20F4               	addwfc	prodh,w,c
  8544  001BBE  6EDA               	movwf	fsr2h,c
  8545  001BC0  0E30               	movlw	48
  8546  001BC2  6EDF               	movwf	indf2,c
  8547                           
  8548                           ; BSR set to: 0
  8549                           ;tela_TELEFONES.h: 92: }
  8550                           ;tela_TELEFONES.h: 93: }
  8551                           ;tela_TELEFONES.h: 94: break;
  8552                           
  8553                           ; BSR set to: 0
  8554  001BC4  D027               	goto	l742
  8555  001BC6  FFFF               	dw	65535	; assembler added errata NOP
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;tela_TELEFONES.h: 96: line3[0] = '>';
  8559                           
  8560                           ; BSR set to: 0
  8561  001BC8  0E3E               	movlw	62
  8562  001BCA  0101               	movlb	1	; () banked
  8563  001BCC  6F79               	movwf	_line3& (0+255),b
  8564                           
  8565                           ; BSR set to: 1
  8566                           ;tela_TELEFONES.h: 97: if (btPress(4)) {
  8567  001BCE  0E04               	movlw	4
  8568  001BD0  ECC6  F01F         	call	_btPress
  8569  001BD4  0900               	iorlw	0
  8570  001BD6  B4D8               	btfsc	status,2,c
  8571  001BD8  D01D               	goto	l742
  8572                           
  8573                           ;tela_TELEFONES.h: 98: teste_sms_run = 1;
  8574  001BDA  0E01               	movlw	1
  8575  001BDC  0100               	movlb	0	; () banked
  8576  001BDE  6FE5               	movwf	_teste_sms_run& (0+255),b
  8577                           
  8578                           ;tela_TELEFONES.h: 99: tel_selecionado = 0;
  8579  001BE0  0E00               	movlw	0
  8580  001BE2  6FE6               	movwf	_tel_selecionado& (0+255),b
  8581                           
  8582                           ;tela_TELEFONES.h: 100: tempo_reenvio_SMS = 6;
  8583  001BE4  0E06               	movlw	6
  8584  001BE6  6E72               	movwf	_tempo_reenvio_SMS,c
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;tela_TELEFONES.h: 101: }
  8588                           ;tela_TELEFONES.h: 102: break;
  8589  001BE8  D015               	goto	l742
  8590  001BEA  FFFF               	dw	65535	; assembler added errata NOP
  8591                           
  8592                           ; BSR set to: 0
  8593                           
  8594                           ; BSR set to: 0
  8595  001BEC  0E00               	movlw	0
  8596  001BEE                     L16:
  8597  001BEE  FFFF               	dw	65535	; assembler added errata NOP
  8598  001BF0  6FD8               	movwf	_option_posi& (0+255),b
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;tela_TELEFONES.h: 106: }
  8602                           
  8603                           ;tela_TELEFONES.h: 105: break;
  8604  001BF2  D010               	goto	l742
  8605  001BF4                     l740:
  8606  001BF4  FFFF               	dw	65535	; assembler added errata NOP
  8607                           
  8608                           ; BSR set to: 0
  8609  001BF6  0100               	movlb	0	; () banked
  8610  001BF8  51D8               	movf	_option_posi& (0+255),w,b
  8611                           
  8612                           ; Switch size 1, requested type "space"
  8613                           ; Number of cases is 4, Range of values is 0 to 3
  8614                           ; switch strategies available:
  8615                           ; Name         Instructions Cycles
  8616                           ; simple_byte           13     7 (average)
  8617                           ;	Chosen strategy is simple_byte
  8618  001BFA  0A00               	xorlw	0	; case 0
  8619  001BFC  B4D8               	btfsc	status,2,c
  8620  001BFE  D6F7               	goto	l741
  8621  001C00  0A01               	xorlw	1	; case 1
  8622  001C02  B4D8               	btfsc	status,2,c
  8623  001C04  D6F7               	goto	l743
  8624  001C06  0A03               	xorlw	3	; case 2
  8625  001C08  B4D8               	btfsc	status,2,c
  8626  001C0A  D766               	goto	l752
  8627  001C0C  0A01               	xorlw	1	; case 3
  8628  001C0E  B4D8               	btfsc	status,2,c
  8629  001C10  D7DA               	goto	l761
  8630  001C12  D7EB               	goto	l763
  8631  001C14                     l742:
  8632  001C14  FFFF               	dw	65535	; assembler added errata NOP
  8633                           
  8634                           ;tela_TELEFONES.h: 107: if (teste_sms_run == 1 && status_SIM800L == 1) {
  8635                           
  8636                           ; BSR set to: 0
  8637  001C16  0100               	movlb	0	; () banked
  8638  001C18  05E5               	decf	_teste_sms_run& (0+255),w,b
  8639  001C1A  A4D8               	btfss	status,2,c
  8640  001C1C  D003               	goto	l764
  8641                           
  8642                           ; BSR set to: 0
  8643  001C1E  05EF               	decf	_status_SIM800L& (0+255),w,b
  8644  001C20  B4D8               	btfsc	status,2,c
  8645  001C22  D003               	goto	l765
  8646  001C24                     l764:
  8647  001C24  FFFF               	dw	65535	; assembler added errata NOP
  8648                           
  8649                           ; BSR set to: 0
  8650                           ;tela_TELEFONES.h: 110: teste_sms_run = 0;
  8651                           
  8652                           ; BSR set to: 0
  8653  001C26  0E00               	movlw	0
  8654  001C28  6FE5               	movwf	_teste_sms_run& (0+255),b
  8655  001C2A                     l765:
  8656  001C2A  FFFF               	dw	65535	; assembler added errata NOP
  8657                           
  8658                           ; BSR set to: 0
  8659                           
  8660                           ; BSR set to: 0
  8661  001C2C  0012               	return		;funcret
  8662  001C2E  FFFF               	dw	65535	; errata NOP
  8663  001C30                     __end_of_configuraTelefones:
  8664                           	opt stack 0
  8665                           tblptru	equ	0xFF8
  8666                           tblptrh	equ	0xFF7
  8667                           tblptrl	equ	0xFF6
  8668                           tablat	equ	0xFF5
  8669                           prodh	equ	0xFF4
  8670                           prodl	equ	0xFF3
  8671                           indf0	equ	0xFEF
  8672                           postinc0	equ	0xFEE
  8673                           fsr0h	equ	0xFEA
  8674                           fsr0l	equ	0xFE9
  8675                           wreg	equ	0xFE8
  8676                           postdec1	equ	0xFE5
  8677                           fsr1l	equ	0xFE1
  8678                           indf2	equ	0xFDF
  8679                           postinc2	equ	0xFDE
  8680                           fsr2h	equ	0xFDA
  8681                           fsr2l	equ	0xFD9
  8682                           status	equ	0xFD8
  8683                           
  8684 ;; *************** function _configuraRegistradores *****************
  8685 ;; Defined at:
  8686 ;;		line 7 in file "registradores.h"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;		None
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;		None
  8691 ;; Return value:  Size  Location     Type
  8692 ;;                  1    wreg      void 
  8693 ;; Registers used:
  8694 ;;		wreg, status,2
  8695 ;; Tracked objects:
  8696 ;;		On entry : 0/0
  8697 ;;		On exit  : 0/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8700 ;;      Params:         0       0       0       0       0       0       0
  8701 ;;      Locals:         0       0       0       0       0       0       0
  8702 ;;      Temps:          0       0       0       0       0       0       0
  8703 ;;      Totals:         0       0       0       0       0       0       0
  8704 ;;Total ram usage:        0 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; Hardware stack levels required when called:    6
  8707 ;; This function calls:
  8708 ;;		Nothing
  8709 ;; This function is called by:
  8710 ;;		_main
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714                           	psect	text27
  8715  00797E                     __ptext27:
  8716                           	opt stack 0
  8717  00797E                     _configuraRegistradores:
  8718                           	opt stack 0
  8719  00797E  FFFF               	dw	65535	; assembler added errata NOP
  8720                           
  8721                           ;registradores.h: 9: ADCON0 = 0b10000001;
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;incstack = 0
  8725  007980  0E81               	movlw	129
  8726  007982  6EC2               	movwf	4034,c	;volatile
  8727                           
  8728                           ;registradores.h: 10: ADCON1 = 0b11001110;
  8729  007984  0ECE               	movlw	206
  8730  007986  6EC1               	movwf	4033,c	;volatile
  8731                           
  8732                           ;registradores.h: 11: TRISAbits.RA0 = 1;
  8733  007988  8092               	bsf	3986,0,c	;volatile
  8734                           
  8735                           ;registradores.h: 12: PORTAbits.AN0 = 0;
  8736  00798A  9080               	bcf	3968,0,c	;volatile
  8737                           
  8738                           ;registradores.h: 15: T0CON = 0x81;
  8739  00798C  0E81               	movlw	129
  8740  00798E  6ED5               	movwf	4053,c	;volatile
  8741                           
  8742                           ;registradores.h: 16: INTCON = 0xE4;
  8743  007990  0EE4               	movlw	228
  8744  007992  6EF2               	movwf	intcon,c	;volatile
  8745                           
  8746                           ;registradores.h: 19: TRISDbits.RD5 = 0;
  8747  007994  9A95               	bcf	3989,5,c	;volatile
  8748                           
  8749                           ;registradores.h: 20: TRISDbits.RD4 = 0;
  8750  007996  9895               	bcf	3989,4,c	;volatile
  8751                           
  8752                           ;registradores.h: 21: TRISDbits.RD3 = 0;
  8753  007998  9695               	bcf	3989,3,c	;volatile
  8754                           
  8755                           ;registradores.h: 22: TRISDbits.RD2 = 0;
  8756  00799A  9495               	bcf	3989,2,c	;volatile
  8757                           
  8758                           ;registradores.h: 23: TRISDbits.RD1 = 0;
  8759  00799C  9295               	bcf	3989,1,c	;volatile
  8760                           
  8761                           ;registradores.h: 24: TRISDbits.RD0 = 0;
  8762  00799E  9095               	bcf	3989,0,c	;volatile
  8763                           
  8764                           ;registradores.h: 27: TXSTAbits.TXEN = 1;
  8765  0079A0  8AAC               	bsf	4012,5,c	;volatile
  8766                           
  8767                           ;registradores.h: 28: TXSTAbits.BRGH = 1;
  8768  0079A2  84AC               	bsf	4012,2,c	;volatile
  8769                           
  8770                           ;registradores.h: 29: TXSTAbits.SYNC = 0;
  8771  0079A4  98AC               	bcf	4012,4,c	;volatile
  8772                           
  8773                           ;registradores.h: 30: RCSTAbits.SPEN = 1;
  8774  0079A6  8EAB               	bsf	4011,7,c	;volatile
  8775                           
  8776                           ;registradores.h: 31: RCSTAbits.CREN = 1;
  8777  0079A8  88AB               	bsf	4011,4,c	;volatile
  8778                           
  8779                           ;registradores.h: 34: SPBRG = 25;
  8780  0079AA  0E19               	movlw	25
  8781  0079AC  6EAF               	movwf	4015,c	;volatile
  8782                           
  8783                           ;registradores.h: 35: TRISCbits.TRISC6 = 0;
  8784  0079AE  9C94               	bcf	3988,6,c	;volatile
  8785                           
  8786                           ;registradores.h: 36: TRISCbits.TRISC7 = 1;
  8787  0079B0  8E94               	bsf	3988,7,c	;volatile
  8788                           
  8789                           ;registradores.h: 39: INTCONbits.GIE = 1;
  8790  0079B2  8EF2               	bsf	intcon,7,c	;volatile
  8791                           
  8792                           ;registradores.h: 40: INTCONbits.PEIE = 1;
  8793  0079B4  8CF2               	bsf	intcon,6,c	;volatile
  8794                           
  8795                           ;registradores.h: 41: PIR1bits.RCIF = 0;
  8796  0079B6  9A9E               	bcf	3998,5,c	;volatile
  8797                           
  8798                           ;registradores.h: 42: PIE1bits.RCIE = 1;
  8799  0079B8  8A9D               	bsf	3997,5,c	;volatile
  8800                           
  8801                           ;registradores.h: 45: INTCONbits.RBIE = 0;
  8802  0079BA  96F2               	bcf	intcon,3,c	;volatile
  8803                           
  8804                           ;registradores.h: 46: TRISAbits.RA2 = 1;
  8805  0079BC  8492               	bsf	3986,2,c	;volatile
  8806                           
  8807                           ;registradores.h: 47: TRISAbits.RA5 = 1;
  8808  0079BE  8A92               	bsf	3986,5,c	;volatile
  8809                           
  8810                           ;registradores.h: 48: TRISCbits.RC0 = 1;
  8811  0079C0  8094               	bsf	3988,0,c	;volatile
  8812                           
  8813                           ;registradores.h: 51: TRISBbits.RB2 = 1;
  8814  0079C2  8493               	bsf	3987,2,c	;volatile
  8815                           
  8816                           ;registradores.h: 52: TRISBbits.RB3 = 1;
  8817  0079C4  8693               	bsf	3987,3,c	;volatile
  8818                           
  8819                           ;registradores.h: 53: TRISBbits.RB4 = 1;
  8820  0079C6  8893               	bsf	3987,4,c	;volatile
  8821                           
  8822                           ;registradores.h: 54: TRISBbits.RB5 = 1;
  8823  0079C8  8A93               	bsf	3987,5,c	;volatile
  8824                           
  8825                           ;registradores.h: 57: TRISEbits.RE0 = 0;
  8826  0079CA  9096               	bcf	3990,0,c	;volatile
  8827                           
  8828                           ;registradores.h: 58: TRISEbits.RE1 = 0;
  8829  0079CC  9296               	bcf	3990,1,c	;volatile
  8830                           
  8831                           ;registradores.h: 59: TRISEbits.RE2 = 0;
  8832  0079CE  9496               	bcf	3990,2,c	;volatile
  8833  0079D0  0012               	return		;funcret
  8834  0079D2  FFFF               	dw	65535	; errata NOP
  8835  0079D4                     __end_of_configuraRegistradores:
  8836                           	opt stack 0
  8837                           tblptru	equ	0xFF8
  8838                           tblptrh	equ	0xFF7
  8839                           tblptrl	equ	0xFF6
  8840                           tablat	equ	0xFF5
  8841                           prodh	equ	0xFF4
  8842                           prodl	equ	0xFF3
  8843                           intcon	equ	0xFF2
  8844                           indf0	equ	0xFEF
  8845                           postinc0	equ	0xFEE
  8846                           fsr0h	equ	0xFEA
  8847                           fsr0l	equ	0xFE9
  8848                           wreg	equ	0xFE8
  8849                           postdec1	equ	0xFE5
  8850                           fsr1l	equ	0xFE1
  8851                           indf2	equ	0xFDF
  8852                           postinc2	equ	0xFDE
  8853                           fsr2h	equ	0xFDA
  8854                           fsr2l	equ	0xFD9
  8855                           status	equ	0xFD8
  8856                           
  8857 ;; *************** function _atualizarLCD *****************
  8858 ;; Defined at:
  8859 ;;		line 132 in file "lcd.h"
  8860 ;; Parameters:    Size  Location     Type
  8861 ;;  line1           2    8[BANK0 ] PTR unsigned char 
  8862 ;;		 -> line1(21), 
  8863 ;;  line2           2   10[BANK0 ] PTR unsigned char 
  8864 ;;		 -> line2(21), 
  8865 ;;  line3           2   12[BANK0 ] PTR unsigned char 
  8866 ;;		 -> line3(21), 
  8867 ;;  line4           2   14[BANK0 ] PTR unsigned char 
  8868 ;;		 -> line4(21), 
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;  i               1   16[BANK0 ] unsigned char 
  8871 ;; Return value:  Size  Location     Type
  8872 ;;                  1    wreg      void 
  8873 ;; Registers used:
  8874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8875 ;; Tracked objects:
  8876 ;;		On entry : 0/0
  8877 ;;		On exit  : 0/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8880 ;;      Params:         0       8       0       0       0       0       0
  8881 ;;      Locals:         0       1       0       0       0       0       0
  8882 ;;      Temps:          0       0       0       0       0       0       0
  8883 ;;      Totals:         0       9       0       0       0       0       0
  8884 ;;Total ram usage:        9 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; Hardware stack levels required when called:    9
  8887 ;; This function calls:
  8888 ;;		_Lcd_Set_Cursor
  8889 ;;		_Lcd_Write_String
  8890 ;; This function is called by:
  8891 ;;		_main
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           	psect	text28
  8896  003598                     __ptext28:
  8897                           	opt stack 0
  8898  003598                     _atualizarLCD:
  8899                           	opt stack 0
  8900  003598  FFFF               	dw	65535	; assembler added errata NOP
  8901                           
  8902                           ;lcd.h: 134: Lcd_Set_Cursor(1, 1);
  8903                           
  8904                           ;incstack = 0
  8905  00359A  0E01               	movlw	1
  8906  00359C  0100               	movlb	0	; () banked
  8907  00359E  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  8908  0035A0  0E01               	movlw	1
  8909  0035A2  EC98  F01B         	call	_Lcd_Set_Cursor
  8910                           
  8911                           ;lcd.h: 135: Lcd_Write_String(line1);
  8912  0035A6  C088  F084         	movff	atualizarLCD@line1,Lcd_Write_String@a
  8913  0035AA  C089  F085         	movff	atualizarLCD@line1+1,Lcd_Write_String@a+1
  8914  0035AE  EC58  F03A         	call	_Lcd_Write_String	;wreg free
  8915                           
  8916                           ;lcd.h: 136: Lcd_Set_Cursor(2, 1);
  8917  0035B2  0E01               	movlw	1
  8918  0035B4  0100               	movlb	0	; () banked
  8919  0035B6  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  8920  0035B8  0E02               	movlw	2
  8921  0035BA  EC98  F01B         	call	_Lcd_Set_Cursor
  8922                           
  8923                           ;lcd.h: 137: Lcd_Write_String(line2);
  8924  0035BE  C08A  F084         	movff	atualizarLCD@line2,Lcd_Write_String@a
  8925  0035C2  C08B  F085         	movff	atualizarLCD@line2+1,Lcd_Write_String@a+1
  8926  0035C6  EC58  F03A         	call	_Lcd_Write_String	;wreg free
  8927                           
  8928                           ;lcd.h: 138: Lcd_Set_Cursor(3, 0);
  8929  0035CA  0E00               	movlw	0
  8930  0035CC  0100               	movlb	0	; () banked
  8931  0035CE  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  8932  0035D0  0E03               	movlw	3
  8933  0035D2  EC98  F01B         	call	_Lcd_Set_Cursor
  8934                           
  8935                           ;lcd.h: 139: Lcd_Write_String(line3);
  8936  0035D6  C08C  F084         	movff	atualizarLCD@line3,Lcd_Write_String@a
  8937  0035DA  C08D  F085         	movff	atualizarLCD@line3+1,Lcd_Write_String@a+1
  8938  0035DE  EC58  F03A         	call	_Lcd_Write_String	;wreg free
  8939                           
  8940                           ;lcd.h: 140: Lcd_Set_Cursor(4, 0);
  8941  0035E2  0E00               	movlw	0
  8942  0035E4  0100               	movlb	0	; () banked
  8943  0035E6  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  8944  0035E8  0E04               	movlw	4
  8945  0035EA  EC98  F01B         	call	_Lcd_Set_Cursor
  8946                           
  8947                           ;lcd.h: 141: Lcd_Write_String(line4);
  8948  0035EE  C08E  F084         	movff	atualizarLCD@line4,Lcd_Write_String@a
  8949  0035F2  C08F  F085         	movff	atualizarLCD@line4+1,Lcd_Write_String@a+1
  8950  0035F6  EC58  F03A         	call	_Lcd_Write_String	;wreg free
  8951                           
  8952                           ;lcd.h: 143: char i = 0;
  8953  0035FA  0E00               	movlw	0
  8954  0035FC  0100               	movlb	0	; () banked
  8955  0035FE  6F90               	movwf	atualizarLCD@i& (0+255),b
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;lcd.h: 144: for (i = 0; i < 20; i++) {
  8959  003600  0E00               	movlw	0
  8960  003602  6F90               	movwf	atualizarLCD@i& (0+255),b
  8961  003604                     l6593:
  8962  003604  FFFF               	dw	65535	; assembler added errata NOP
  8963                           
  8964                           ; BSR set to: 0
  8965  003606  0E13               	movlw	19
  8966  003608  6590               	cpfsgt	atualizarLCD@i& (0+255),b
  8967  00360A  D001               	goto	l594
  8968  00360C  D02B               	goto	u7710
  8969  00360E                     l594:
  8970  00360E  FFFF               	dw	65535	; assembler added errata NOP
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;lcd.h: 145: line1[i] = ' ';
  8974                           
  8975                           ; BSR set to: 0
  8976  003610  5190               	movf	atualizarLCD@i& (0+255),w,b
  8977  003612  0D01               	mullw	1
  8978  003614  50F3               	movf	prodl,w,c
  8979  003616  2588               	addwf	atualizarLCD@line1& (0+255),w,b
  8980  003618  6ED9               	movwf	fsr2l,c
  8981  00361A  50F4               	movf	prodh,w,c
  8982  00361C  2189               	addwfc	(atualizarLCD@line1+1)& (0+255),w,b
  8983  00361E  6EDA               	movwf	fsr2h,c
  8984  003620  0E20               	movlw	32
  8985  003622  6EDF               	movwf	indf2,c
  8986                           
  8987                           ;lcd.h: 146: line2[i] = ' ';
  8988  003624  5190               	movf	atualizarLCD@i& (0+255),w,b
  8989  003626  0D01               	mullw	1
  8990  003628  50F3               	movf	prodl,w,c
  8991  00362A  258A               	addwf	atualizarLCD@line2& (0+255),w,b
  8992  00362C  6ED9               	movwf	fsr2l,c
  8993  00362E  50F4               	movf	prodh,w,c
  8994  003630  218B               	addwfc	(atualizarLCD@line2+1)& (0+255),w,b
  8995  003632  6EDA               	movwf	fsr2h,c
  8996  003634  0E20               	movlw	32
  8997  003636  6EDF               	movwf	indf2,c
  8998                           
  8999                           ;lcd.h: 147: line3[i] = ' ';
  9000  003638  5190               	movf	atualizarLCD@i& (0+255),w,b
  9001  00363A  0D01               	mullw	1
  9002  00363C  50F3               	movf	prodl,w,c
  9003  00363E  258C               	addwf	atualizarLCD@line3& (0+255),w,b
  9004  003640  6ED9               	movwf	fsr2l,c
  9005  003642  50F4               	movf	prodh,w,c
  9006  003644  218D               	addwfc	(atualizarLCD@line3+1)& (0+255),w,b
  9007  003646  6EDA               	movwf	fsr2h,c
  9008  003648  0E20               	movlw	32
  9009  00364A  6EDF               	movwf	indf2,c
  9010                           
  9011                           ;lcd.h: 148: line4[i] = ' ';
  9012  00364C  5190               	movf	atualizarLCD@i& (0+255),w,b
  9013  00364E  0D01               	mullw	1
  9014  003650  50F3               	movf	prodl,w,c
  9015  003652  258E               	addwf	atualizarLCD@line4& (0+255),w,b
  9016  003654  6ED9               	movwf	fsr2l,c
  9017  003656  50F4               	movf	prodh,w,c
  9018  003658  218F               	addwfc	(atualizarLCD@line4+1)& (0+255),w,b
  9019  00365A  6EDA               	movwf	fsr2h,c
  9020  00365C  0E20               	movlw	32
  9021  00365E  6EDF               	movwf	indf2,c
  9022                           
  9023                           ; BSR set to: 0
  9024  003660  2B90               	incf	atualizarLCD@i& (0+255),f,b
  9025  003662  D7D0               	goto	l6593
  9026  003664                     u7710:
  9027  003664  FFFF               	dw	65535	; assembler added errata NOP
  9028                           
  9029                           ; BSR set to: 0
  9030                           
  9031                           ; BSR set to: 0
  9032  003666  0012               	return		;funcret
  9033  003668  FFFF               	dw	65535	; errata NOP
  9034  00366A                     __end_of_atualizarLCD:
  9035                           	opt stack 0
  9036                           tblptru	equ	0xFF8
  9037                           tblptrh	equ	0xFF7
  9038                           tblptrl	equ	0xFF6
  9039                           tablat	equ	0xFF5
  9040                           prodh	equ	0xFF4
  9041                           prodl	equ	0xFF3
  9042                           intcon	equ	0xFF2
  9043                           indf0	equ	0xFEF
  9044                           postinc0	equ	0xFEE
  9045                           fsr0h	equ	0xFEA
  9046                           fsr0l	equ	0xFE9
  9047                           wreg	equ	0xFE8
  9048                           postdec1	equ	0xFE5
  9049                           fsr1l	equ	0xFE1
  9050                           indf2	equ	0xFDF
  9051                           postinc2	equ	0xFDE
  9052                           fsr2h	equ	0xFDA
  9053                           fsr2l	equ	0xFD9
  9054                           status	equ	0xFD8
  9055                           
  9056 ;; *************** function _Lcd_Write_String *****************
  9057 ;; Defined at:
  9058 ;;		line 123 in file "lcd.h"
  9059 ;; Parameters:    Size  Location     Type
  9060 ;;  a               2    4[BANK0 ] PTR unsigned char 
  9061 ;;		 -> line4(21), line3(21), line2(21), line1(21), 
  9062 ;; Auto vars:     Size  Location     Type
  9063 ;;  i               1    6[BANK0 ] unsigned char 
  9064 ;; Return value:  Size  Location     Type
  9065 ;;                  1    wreg      void 
  9066 ;; Registers used:
  9067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9068 ;; Tracked objects:
  9069 ;;		On entry : 0/0
  9070 ;;		On exit  : 0/0
  9071 ;;		Unchanged: 0/0
  9072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9073 ;;      Params:         0       2       0       0       0       0       0
  9074 ;;      Locals:         0       1       0       0       0       0       0
  9075 ;;      Temps:          0       0       0       0       0       0       0
  9076 ;;      Totals:         0       3       0       0       0       0       0
  9077 ;;Total ram usage:        3 bytes
  9078 ;; Hardware stack levels used:    1
  9079 ;; Hardware stack levels required when called:    8
  9080 ;; This function calls:
  9081 ;;		_Lcd_Write_Char
  9082 ;; This function is called by:
  9083 ;;		_atualizarLCD
  9084 ;; This function uses a non-reentrant model
  9085 ;;
  9086                           
  9087                           	psect	text29
  9088  0074B0                     __ptext29:
  9089                           	opt stack 0
  9090  0074B0                     _Lcd_Write_String:
  9091                           	opt stack 0
  9092  0074B0  FFFF               	dw	65535	; assembler added errata NOP
  9093                           
  9094                           ;lcd.h: 124: unsigned char i = 0;
  9095                           
  9096                           ; BSR set to: 0
  9097                           ;incstack = 0
  9098  0074B2  0E00               	movlw	0
  9099  0074B4  0100               	movlb	0	; () banked
  9100  0074B6  6F86               	movwf	Lcd_Write_String@i& (0+255),b
  9101                           
  9102                           ;lcd.h: 126: for (i = 0; i < 20; i++) {
  9103  0074B8  0E00               	movlw	0
  9104  0074BA  6F86               	movwf	Lcd_Write_String@i& (0+255),b
  9105  0074BC                     l5897:
  9106  0074BC  FFFF               	dw	65535	; assembler added errata NOP
  9107                           
  9108                           ; BSR set to: 0
  9109  0074BE  0E13               	movlw	19
  9110  0074C0  6586               	cpfsgt	Lcd_Write_String@i& (0+255),b
  9111  0074C2  D001               	goto	l589
  9112  0074C4  D00F               	goto	u6750
  9113  0074C6                     l589:
  9114  0074C6  FFFF               	dw	65535	; assembler added errata NOP
  9115                           
  9116                           ; BSR set to: 0
  9117                           ;lcd.h: 127: Lcd_Write_Char(a[i]);
  9118                           
  9119                           ; BSR set to: 0
  9120  0074C8  5186               	movf	Lcd_Write_String@i& (0+255),w,b
  9121  0074CA  0D01               	mullw	1
  9122  0074CC  50F3               	movf	prodl,w,c
  9123  0074CE  2584               	addwf	Lcd_Write_String@a& (0+255),w,b
  9124  0074D0  6ED9               	movwf	fsr2l,c
  9125  0074D2  50F4               	movf	prodh,w,c
  9126  0074D4  2185               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
  9127  0074D6  6EDA               	movwf	fsr2h,c
  9128  0074D8  50DF               	movf	indf2,w,c
  9129  0074DA  EC2A  F03B         	call	_Lcd_Write_Char
  9130  0074DE  0100               	movlb	0	; () banked
  9131  0074E0  2B86               	incf	Lcd_Write_String@i& (0+255),f,b
  9132  0074E2  D7EC               	goto	l5897
  9133  0074E4                     u6750:
  9134  0074E4  FFFF               	dw	65535	; assembler added errata NOP
  9135                           
  9136                           ; BSR set to: 0
  9137                           
  9138                           ; BSR set to: 0
  9139  0074E6  0012               	return		;funcret
  9140  0074E8  FFFF               	dw	65535	; errata NOP
  9141  0074EA                     __end_of_Lcd_Write_String:
  9142                           	opt stack 0
  9143                           tblptru	equ	0xFF8
  9144                           tblptrh	equ	0xFF7
  9145                           tblptrl	equ	0xFF6
  9146                           tablat	equ	0xFF5
  9147                           prodh	equ	0xFF4
  9148                           prodl	equ	0xFF3
  9149                           intcon	equ	0xFF2
  9150                           indf0	equ	0xFEF
  9151                           postinc0	equ	0xFEE
  9152                           fsr0h	equ	0xFEA
  9153                           fsr0l	equ	0xFE9
  9154                           wreg	equ	0xFE8
  9155                           postdec1	equ	0xFE5
  9156                           fsr1l	equ	0xFE1
  9157                           indf2	equ	0xFDF
  9158                           postinc2	equ	0xFDE
  9159                           fsr2h	equ	0xFDA
  9160                           fsr2l	equ	0xFD9
  9161                           status	equ	0xFD8
  9162                           
  9163 ;; *************** function _Lcd_Write_Char *****************
  9164 ;; Defined at:
  9165 ;;		line 108 in file "lcd.h"
  9166 ;; Parameters:    Size  Location     Type
  9167 ;;  a               1    wreg     unsigned char 
  9168 ;; Auto vars:     Size  Location     Type
  9169 ;;  a               1    3[BANK0 ] unsigned char 
  9170 ;;  y               1    2[BANK0 ] unsigned char 
  9171 ;;  tempp           1    1[BANK0 ] unsigned char 
  9172 ;; Return value:  Size  Location     Type
  9173 ;;                  1    wreg      void 
  9174 ;; Registers used:
  9175 ;;		wreg, status,2, status,0, cstack
  9176 ;; Tracked objects:
  9177 ;;		On entry : 0/0
  9178 ;;		On exit  : 0/0
  9179 ;;		Unchanged: 0/0
  9180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9181 ;;      Params:         0       0       0       0       0       0       0
  9182 ;;      Locals:         0       3       0       0       0       0       0
  9183 ;;      Temps:          0       0       0       0       0       0       0
  9184 ;;      Totals:         0       3       0       0       0       0       0
  9185 ;;Total ram usage:        3 bytes
  9186 ;; Hardware stack levels used:    1
  9187 ;; Hardware stack levels required when called:    7
  9188 ;; This function calls:
  9189 ;;		_Lcd_Port
  9190 ;; This function is called by:
  9191 ;;		_Lcd_Write_String
  9192 ;;		_criarCaracteresCGRAM
  9193 ;; This function uses a non-reentrant model
  9194 ;;
  9195                           
  9196                           	psect	text30
  9197  007654                     __ptext30:
  9198                           	opt stack 0
  9199  007654                     _Lcd_Write_Char:
  9200                           	opt stack 0
  9201  007654  FFFF               	dw	65535	; assembler added errata NOP
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;incstack = 0
  9205                           ;Lcd_Write_Char@a stored from wreg
  9206  007656  0100               	movlb	0	; () banked
  9207  007658  6F83               	movwf	Lcd_Write_Char@a& (0+255),b
  9208                           
  9209                           ;lcd.h: 109: char tempp, y;
  9210                           ;lcd.h: 110: tempp = a & 0x0F;
  9211  00765A  0100               	movlb	0	; () banked
  9212  00765C  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
  9213  00765E  0B0F               	andlw	15
  9214  007660  6F81               	movwf	Lcd_Write_Char@tempp& (0+255),b
  9215                           
  9216                           ;lcd.h: 111: y = a & 0xF0;
  9217  007662  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
  9218  007664  0BF0               	andlw	240
  9219  007666  6F82               	movwf	Lcd_Write_Char@y& (0+255),b
  9220                           
  9221                           ; BSR set to: 0
  9222                           ;lcd.h: 112: PORTDbits.RD1 = 1;
  9223  007668  8283               	bsf	3971,1,c	;volatile
  9224                           
  9225                           ; BSR set to: 0
  9226                           ;lcd.h: 113: Lcd_Port(y >> 4);
  9227  00766A  3982               	swapf	Lcd_Write_Char@y& (0+255),w,b
  9228  00766C  0B0F               	andlw	15
  9229  00766E  EC6C  F03B         	call	_Lcd_Port
  9230                           
  9231                           ;lcd.h: 114: PORTDbits.RD0 = 1;
  9232  007672  8083               	bsf	3971,0,c	;volatile
  9233                           
  9234                           ;lcd.h: 115: _delay((unsigned long)((150)*(8000000/4000000.0)));
  9235  007674  0E4B               	movlw	75
  9236  007676                     u19207:
  9237  007676  FFFF               	dw	65535	; errata NOP
  9238  007678  2EE8               	decfsz	wreg,f,c
  9239  00767A  D7FD               	bra	u19207
  9240                           
  9241                           ;lcd.h: 116: PORTDbits.RD0 = 0;
  9242  00767C  9083               	bcf	3971,0,c	;volatile
  9243                           
  9244                           ;lcd.h: 117: Lcd_Port(tempp);
  9245  00767E  0100               	movlb	0	; () banked
  9246  007680  5181               	movf	Lcd_Write_Char@tempp& (0+255),w,b
  9247  007682  EC6C  F03B         	call	_Lcd_Port
  9248                           
  9249                           ;lcd.h: 118: PORTDbits.RD0 = 1;
  9250  007686  8083               	bsf	3971,0,c	;volatile
  9251                           
  9252                           ;lcd.h: 119: _delay((unsigned long)((150)*(8000000/4000000.0)));
  9253  007688  0E4B               	movlw	75
  9254  00768A                     u19217:
  9255  00768A  FFFF               	dw	65535	; errata NOP
  9256  00768C  2EE8               	decfsz	wreg,f,c
  9257  00768E  D7FD               	bra	u19217
  9258                           
  9259                           ;lcd.h: 120: PORTDbits.RD0 = 0;
  9260  007690  9083               	bcf	3971,0,c	;volatile
  9261  007692  0012               	return		;funcret
  9262  007694  FFFF               	dw	65535	; errata NOP
  9263  007696                     __end_of_Lcd_Write_Char:
  9264                           	opt stack 0
  9265                           tblptru	equ	0xFF8
  9266                           tblptrh	equ	0xFF7
  9267                           tblptrl	equ	0xFF6
  9268                           tablat	equ	0xFF5
  9269                           prodh	equ	0xFF4
  9270                           prodl	equ	0xFF3
  9271                           intcon	equ	0xFF2
  9272                           indf0	equ	0xFEF
  9273                           postinc0	equ	0xFEE
  9274                           fsr0h	equ	0xFEA
  9275                           fsr0l	equ	0xFE9
  9276                           wreg	equ	0xFE8
  9277                           postdec1	equ	0xFE5
  9278                           fsr1l	equ	0xFE1
  9279                           indf2	equ	0xFDF
  9280                           postinc2	equ	0xFDE
  9281                           fsr2h	equ	0xFDA
  9282                           fsr2l	equ	0xFD9
  9283                           status	equ	0xFD8
  9284                           
  9285 ;; *************** function _Lcd_Set_Cursor *****************
  9286 ;; Defined at:
  9287 ;;		line 73 in file "lcd.h"
  9288 ;; Parameters:    Size  Location     Type
  9289 ;;  a               1    wreg     unsigned char 
  9290 ;;  b               1    3[BANK0 ] unsigned char 
  9291 ;; Auto vars:     Size  Location     Type
  9292 ;;  a               1    4[BANK0 ] unsigned char 
  9293 ;;  temp            1    7[BANK0 ] unsigned char 
  9294 ;;  y               1    6[BANK0 ] unsigned char 
  9295 ;;  z               1    5[BANK0 ] unsigned char 
  9296 ;; Return value:  Size  Location     Type
  9297 ;;                  1    wreg      void 
  9298 ;; Registers used:
  9299 ;;		wreg, status,2, status,0, cstack
  9300 ;; Tracked objects:
  9301 ;;		On entry : 0/0
  9302 ;;		On exit  : 0/0
  9303 ;;		Unchanged: 0/0
  9304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9305 ;;      Params:         0       1       0       0       0       0       0
  9306 ;;      Locals:         0       4       0       0       0       0       0
  9307 ;;      Temps:          0       0       0       0       0       0       0
  9308 ;;      Totals:         0       5       0       0       0       0       0
  9309 ;;Total ram usage:        5 bytes
  9310 ;; Hardware stack levels used:    1
  9311 ;; Hardware stack levels required when called:    8
  9312 ;; This function calls:
  9313 ;;		_Lcd_Cmd
  9314 ;; This function is called by:
  9315 ;;		_atualizarLCD
  9316 ;; This function uses a non-reentrant model
  9317 ;;
  9318                           
  9319                           	psect	text31
  9320  003730                     __ptext31:
  9321                           	opt stack 0
  9322  003730                     _Lcd_Set_Cursor:
  9323                           	opt stack 0
  9324  003730  FFFF               	dw	65535	; assembler added errata NOP
  9325                           
  9326                           ;incstack = 0
  9327                           ;Lcd_Set_Cursor@a stored from wreg
  9328  003732  0100               	movlb	0	; () banked
  9329  003734  6F84               	movwf	Lcd_Set_Cursor@a& (0+255),b
  9330                           
  9331                           ;lcd.h: 74: char temp, z, y;
  9332                           ;lcd.h: 75: switch (a) {
  9333  003736  D04C               	goto	l576
  9334  003738  FFFF               	dw	65535	; assembler added errata NOP
  9335                           
  9336                           ;lcd.h: 77: temp = 0x80 + b - 1;
  9337  00373A  0100               	movlb	0	; () banked
  9338  00373C  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
  9339  00373E  0F7F               	addlw	127
  9340  003740  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
  9341                           
  9342                           ;lcd.h: 78: z = temp >> 4;
  9343  003742  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
  9344  003744  0B0F               	andlw	15
  9345  003746  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
  9346                           
  9347                           ;lcd.h: 79: y = temp & 0x0F;
  9348  003748  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
  9349  00374A  0B0F               	andlw	15
  9350  00374C  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
  9351                           
  9352                           ; BSR set to: 0
  9353                           ;lcd.h: 80: Lcd_Cmd(z);
  9354  00374E  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
  9355  003750  EC3C  F039         	call	_Lcd_Cmd
  9356                           
  9357                           ;lcd.h: 81: Lcd_Cmd(y);
  9358  003754  0100               	movlb	0	; () banked
  9359  003756  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
  9360  003758  EC3C  F039         	call	_Lcd_Cmd
  9361                           
  9362                           ;lcd.h: 82: break;
  9363  00375C  D048               	goto	l578
  9364  00375E  FFFF               	dw	65535	; assembler added errata NOP
  9365                           
  9366                           ;lcd.h: 84: temp = 0xC0 + b - 1;
  9367  003760  0100               	movlb	0	; () banked
  9368  003762  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
  9369  003764  0FBF               	addlw	191
  9370  003766  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
  9371                           
  9372                           ;lcd.h: 85: z = temp >> 4;
  9373  003768  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
  9374  00376A  0B0F               	andlw	15
  9375  00376C  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
  9376                           
  9377                           ;lcd.h: 86: y = temp & 0x0F;
  9378  00376E  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
  9379  003770  0B0F               	andlw	15
  9380  003772  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
  9381                           
  9382                           ; BSR set to: 0
  9383                           ;lcd.h: 87: Lcd_Cmd(z);
  9384  003774  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
  9385  003776  EC3C  F039         	call	_Lcd_Cmd
  9386                           
  9387                           ;lcd.h: 88: Lcd_Cmd(y);
  9388  00377A  0100               	movlb	0	; () banked
  9389  00377C  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
  9390  00377E  EC3C  F039         	call	_Lcd_Cmd
  9391                           
  9392                           ;lcd.h: 89: break;
  9393  003782  D035               	goto	l578
  9394  003784  FFFF               	dw	65535	; assembler added errata NOP
  9395                           
  9396                           ;lcd.h: 91: temp = 0x94 + b;
  9397  003786  0100               	movlb	0	; () banked
  9398  003788  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
  9399  00378A  0F94               	addlw	148
  9400  00378C  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
  9401                           
  9402                           ;lcd.h: 92: z = temp >> 4;
  9403  00378E  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
  9404  003790  0B0F               	andlw	15
  9405  003792  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
  9406                           
  9407                           ;lcd.h: 93: y = temp & 0x0F;
  9408  003794  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
  9409  003796  0B0F               	andlw	15
  9410  003798  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
  9411                           
  9412                           ; BSR set to: 0
  9413                           ;lcd.h: 94: Lcd_Cmd(z);
  9414  00379A  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
  9415  00379C  EC3C  F039         	call	_Lcd_Cmd
  9416                           
  9417                           ;lcd.h: 95: Lcd_Cmd(y);
  9418  0037A0  0100               	movlb	0	; () banked
  9419  0037A2  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
  9420  0037A4  EC3C  F039         	call	_Lcd_Cmd
  9421                           
  9422                           ;lcd.h: 96: break;
  9423  0037A8  D022               	goto	l578
  9424  0037AA  FFFF               	dw	65535	; assembler added errata NOP
  9425                           
  9426                           ;lcd.h: 98: temp = 0xD4 + b;
  9427  0037AC  0100               	movlb	0	; () banked
  9428  0037AE  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
  9429  0037B0  0FD4               	addlw	212
  9430  0037B2  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
  9431                           
  9432                           ;lcd.h: 99: z = temp >> 4;
  9433  0037B4  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
  9434  0037B6  0B0F               	andlw	15
  9435  0037B8  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
  9436                           
  9437                           ;lcd.h: 100: y = temp & 0x0F;
  9438  0037BA  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
  9439  0037BC  0B0F               	andlw	15
  9440  0037BE  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;lcd.h: 101: Lcd_Cmd(z);
  9444  0037C0  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
  9445  0037C2  EC3C  F039         	call	_Lcd_Cmd
  9446                           
  9447                           ;lcd.h: 102: Lcd_Cmd(y);
  9448  0037C6  0100               	movlb	0	; () banked
  9449  0037C8  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
  9450  0037CA  EC3C  F039         	call	_Lcd_Cmd
  9451                           
  9452                           ;lcd.h: 105: }
  9453                           
  9454                           ;lcd.h: 104: default:return;
  9455                           
  9456                           ;lcd.h: 103: break;
  9457  0037CE  D00F               	goto	l578
  9458  0037D0                     l576:
  9459  0037D0  FFFF               	dw	65535	; assembler added errata NOP
  9460  0037D2  0100               	movlb	0	; () banked
  9461  0037D4  5184               	movf	Lcd_Set_Cursor@a& (0+255),w,b
  9462                           
  9463                           ; Switch size 1, requested type "space"
  9464                           ; Number of cases is 4, Range of values is 1 to 4
  9465                           ; switch strategies available:
  9466                           ; Name         Instructions Cycles
  9467                           ; simple_byte           13     7 (average)
  9468                           ;	Chosen strategy is simple_byte
  9469  0037D6  0A01               	xorlw	1	; case 1
  9470  0037D8  B4D8               	btfsc	status,2,c
  9471  0037DA  D7AE               	goto	l577
  9472  0037DC  0A03               	xorlw	3	; case 2
  9473  0037DE  B4D8               	btfsc	status,2,c
  9474  0037E0  D7BE               	goto	l579
  9475  0037E2  0A01               	xorlw	1	; case 3
  9476  0037E4  B4D8               	btfsc	status,2,c
  9477  0037E6  D7CE               	goto	l580
  9478  0037E8  0A07               	xorlw	7	; case 4
  9479  0037EA  B4D8               	btfsc	status,2,c
  9480  0037EC  D7DE               	goto	l581
  9481  0037EE                     l578:
  9482  0037EE  FFFF               	dw	65535	; assembler added errata NOP
  9483                           
  9484                           ; BSR set to: 0
  9485  0037F0  0012               	return		;funcret
  9486  0037F2  FFFF               	dw	65535	; errata NOP
  9487  0037F4                     __end_of_Lcd_Set_Cursor:
  9488                           	opt stack 0
  9489                           tblptru	equ	0xFF8
  9490                           tblptrh	equ	0xFF7
  9491                           tblptrl	equ	0xFF6
  9492                           tablat	equ	0xFF5
  9493                           prodh	equ	0xFF4
  9494                           prodl	equ	0xFF3
  9495                           intcon	equ	0xFF2
  9496                           indf0	equ	0xFEF
  9497                           postinc0	equ	0xFEE
  9498                           fsr0h	equ	0xFEA
  9499                           fsr0l	equ	0xFE9
  9500                           wreg	equ	0xFE8
  9501                           postdec1	equ	0xFE5
  9502                           fsr1l	equ	0xFE1
  9503                           indf2	equ	0xFDF
  9504                           postinc2	equ	0xFDE
  9505                           fsr2h	equ	0xFDA
  9506                           fsr2l	equ	0xFD9
  9507                           status	equ	0xFD8
  9508                           
  9509 ;; *************** function _ajusteSP_Bombas *****************
  9510 ;; Defined at:
  9511 ;;		line 7 in file "tela_CONFIG_PRESSAO.h"
  9512 ;; Parameters:    Size  Location     Type
  9513 ;;		None
  9514 ;; Auto vars:     Size  Location     Type
  9515 ;;		None
  9516 ;; Return value:  Size  Location     Type
  9517 ;;                  1    wreg      void 
  9518 ;; Registers used:
  9519 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9520 ;; Tracked objects:
  9521 ;;		On entry : 0/0
  9522 ;;		On exit  : 0/0
  9523 ;;		Unchanged: 0/0
  9524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9525 ;;      Params:         0       0       0       0       0       0       0
  9526 ;;      Locals:         0       2       0       0       0       0       0
  9527 ;;      Temps:          0       0       0       0       0       0       0
  9528 ;;      Totals:         0       2       0       0       0       0       0
  9529 ;;Total ram usage:        2 bytes
  9530 ;; Hardware stack levels used:    1
  9531 ;; Hardware stack levels required when called:   10
  9532 ;; This function calls:
  9533 ;;		_blink
  9534 ;;		_btPress
  9535 ;;		_intToFloatStr
  9536 ;;		_sprintf
  9537 ;;		_writeEEPROM_ext
  9538 ;; This function is called by:
  9539 ;;		_main
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           	psect	text32
  9544  001C30                     __ptext32:
  9545                           	opt stack 0
  9546  001C30                     _ajusteSP_Bombas:
  9547                           	opt stack 0
  9548  001C30  FFFF               	dw	65535	; assembler added errata NOP
  9549                           
  9550                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
  9551                           
  9552                           ;incstack = 0
  9553  001C32  0100               	movlb	0	; () banked
  9554  001C34  51DF               	movf	_sp_pressao_rede& (0+255),w,b
  9555  001C36  EC0D  F01F         	call	_intToFloatStr
  9556  001C3A  C0B7  F0C4         	movff	?_intToFloatStr,_ajusteSP_Bombas$2320
  9557  001C3E  C0B8  F0C5         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2320+1
  9558                           
  9559                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
  9560  001C42  0EA3               	movlw	low _line1
  9561  001C44  0100               	movlb	0	; () banked
  9562  001C46  6FA1               	movwf	sprintf@wh& (0+255),b
  9563  001C48  0E01               	movlw	high _line1
  9564  001C4A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9565  001C4C  0E7F               	movlw	low STR_80
  9566  001C4E  6FA3               	movwf	sprintf@f& (0+255),b
  9567  001C50  0E7F               	movlw	high STR_80
  9568  001C52  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9569  001C54  C0C4  F0A5         	movff	_ajusteSP_Bombas$2320,?_sprintf+4
  9570  001C58  C0C5  F0A6         	movff	_ajusteSP_Bombas$2320+1,?_sprintf+5
  9571  001C5C  ECD4  F03B         	call	_sprintf	;wreg free
  9572                           
  9573                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
  9574  001C60  0100               	movlb	0	; () banked
  9575  001C62  51DE               	movf	_sp_jockey& (0+255),w,b
  9576  001C64  EC0D  F01F         	call	_intToFloatStr
  9577  001C68  C0B7  F0C4         	movff	?_intToFloatStr,_ajusteSP_Bombas$2320
  9578  001C6C  C0B8  F0C5         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2320+1
  9579                           
  9580                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
  9581  001C70  0E8E               	movlw	low _line2
  9582  001C72  0100               	movlb	0	; () banked
  9583  001C74  6FA1               	movwf	sprintf@wh& (0+255),b
  9584  001C76  0E01               	movlw	high _line2
  9585  001C78  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9586  001C7A  0E5E               	movlw	low (STR_24+1)
  9587  001C7C  6FA3               	movwf	sprintf@f& (0+255),b
  9588  001C7E  0E7F               	movlw	high (STR_24+1)
  9589  001C80  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9590  001C82  C0C4  F0A5         	movff	_ajusteSP_Bombas$2320,?_sprintf+4
  9591  001C86  C0C5  F0A6         	movff	_ajusteSP_Bombas$2320+1,?_sprintf+5
  9592  001C8A  ECD4  F03B         	call	_sprintf	;wreg free
  9593                           
  9594                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
  9595  001C8E  0100               	movlb	0	; () banked
  9596  001C90  51DD               	movf	_sp_principal& (0+255),w,b
  9597  001C92  EC0D  F01F         	call	_intToFloatStr
  9598  001C96  C0B7  F0C4         	movff	?_intToFloatStr,_ajusteSP_Bombas$2320
  9599  001C9A  C0B8  F0C5         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2320+1
  9600                           
  9601                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
  9602  001C9E  0E79               	movlw	low _line3
  9603  001CA0  0100               	movlb	0	; () banked
  9604  001CA2  6FA1               	movwf	sprintf@wh& (0+255),b
  9605  001CA4  0E01               	movlw	high _line3
  9606  001CA6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9607  001CA8  0E76               	movlw	low (STR_27+1)
  9608  001CAA  6FA3               	movwf	sprintf@f& (0+255),b
  9609  001CAC  0E7E               	movlw	high (STR_27+1)
  9610  001CAE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9611  001CB0  C0C4  F0A5         	movff	_ajusteSP_Bombas$2320,?_sprintf+4
  9612  001CB4  C0C5  F0A6         	movff	_ajusteSP_Bombas$2320+1,?_sprintf+5
  9613  001CB8  ECD4  F03B         	call	_sprintf	;wreg free
  9614                           
  9615                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
  9616  001CBC  0100               	movlb	0	; () banked
  9617  001CBE  51DC               	movf	_sp_estacionaria& (0+255),w,b
  9618  001CC0  EC0D  F01F         	call	_intToFloatStr
  9619  001CC4  C0B7  F0C4         	movff	?_intToFloatStr,_ajusteSP_Bombas$2320
  9620  001CC8  C0B8  F0C5         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2320+1
  9621                           
  9622                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
  9623  001CCC  0E64               	movlw	low _line4
  9624  001CCE  0100               	movlb	0	; () banked
  9625  001CD0  6FA1               	movwf	sprintf@wh& (0+255),b
  9626  001CD2  0E01               	movlw	high _line4
  9627  001CD4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9628  001CD6  0E86               	movlw	low (STR_30+1)
  9629  001CD8  6FA3               	movwf	sprintf@f& (0+255),b
  9630  001CDA  0E7E               	movlw	high (STR_30+1)
  9631  001CDC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9632  001CDE  C0C4  F0A5         	movff	_ajusteSP_Bombas$2320,?_sprintf+4
  9633  001CE2  C0C5  F0A6         	movff	_ajusteSP_Bombas$2320+1,?_sprintf+5
  9634  001CE6  ECD4  F03B         	call	_sprintf	;wreg free
  9635                           
  9636                           ;tela_CONFIG_PRESSAO.h: 14: if (btPress(1)) {
  9637  001CEA  0E01               	movlw	1
  9638  001CEC  ECC6  F01F         	call	_btPress
  9639  001CF0  0900               	iorlw	0
  9640  001CF2  B4D8               	btfsc	status,2,c
  9641  001CF4  D019               	goto	l783
  9642                           
  9643                           ;tela_CONFIG_PRESSAO.h: 15: writeEEPROM_ext(0, sp_jockey);
  9644  001CF6  C0DE  F08C         	movff	_sp_jockey,writeEEPROM_ext@data
  9645  001CFA  0E00               	movlw	0
  9646  001CFC  ECB1  F03B         	call	_writeEEPROM_ext
  9647                           
  9648                           ;tela_CONFIG_PRESSAO.h: 16: writeEEPROM_ext(1, sp_principal);
  9649  001D00  C0DD  F08C         	movff	_sp_principal,writeEEPROM_ext@data
  9650  001D04  0E01               	movlw	1
  9651  001D06  ECB1  F03B         	call	_writeEEPROM_ext
  9652                           
  9653                           ;tela_CONFIG_PRESSAO.h: 17: writeEEPROM_ext(2, sp_estacionaria);
  9654  001D0A  C0DC  F08C         	movff	_sp_estacionaria,writeEEPROM_ext@data
  9655  001D0E  0E02               	movlw	2
  9656  001D10  ECB1  F03B         	call	_writeEEPROM_ext
  9657                           
  9658                           ;tela_CONFIG_PRESSAO.h: 18: writeEEPROM_ext(4, sp_pressao_rede);
  9659  001D14  C0DF  F08C         	movff	_sp_pressao_rede,writeEEPROM_ext@data
  9660  001D18  0E04               	movlw	4
  9661  001D1A  ECB1  F03B         	call	_writeEEPROM_ext
  9662                           
  9663                           ;tela_CONFIG_PRESSAO.h: 19: option_posi = 0;
  9664  001D1E  0E00               	movlw	0
  9665  001D20  0100               	movlb	0	; () banked
  9666  001D22  6FD8               	movwf	_option_posi& (0+255),b
  9667                           
  9668                           ; BSR set to: 0
  9669                           ;tela_CONFIG_PRESSAO.h: 20: menu_posi = _menu_posi;
  9670  001D24  C0D6  F0D7         	movff	__menu_posi,_menu_posi
  9671  001D28                     l783:
  9672  001D28  FFFF               	dw	65535	; assembler added errata NOP
  9673                           
  9674                           ;tela_CONFIG_PRESSAO.h: 21: }
  9675                           ;tela_CONFIG_PRESSAO.h: 23: if (btPress(4)) {
  9676                           
  9677                           ; BSR set to: 0
  9678  001D2A  0E04               	movlw	4
  9679  001D2C  ECC6  F01F         	call	_btPress
  9680  001D30  0900               	iorlw	0
  9681  001D32  B4D8               	btfsc	status,2,c
  9682  001D34  D097               	goto	l785
  9683                           
  9684                           ;tela_CONFIG_PRESSAO.h: 24: option_posi++;
  9685  001D36  0100               	movlb	0	; () banked
  9686  001D38  2BD8               	incf	_option_posi& (0+255),f,b
  9687                           
  9688                           ; BSR set to: 0
  9689                           ;tela_CONFIG_PRESSAO.h: 25: }
  9690                           ;tela_CONFIG_PRESSAO.h: 27: switch (option_posi) {
  9691  001D3A  D094               	goto	l785
  9692  001D3C  FFFF               	dw	65535	; assembler added errata NOP
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;tela_CONFIG_PRESSAO.h: 29: blink(line1, 8, 15);
  9696                           
  9697                           ; BSR set to: 0
  9698  001D3E  0EA3               	movlw	low _line1
  9699  001D40  6F80               	movwf	blink@line& (0+255),b
  9700  001D42  0E01               	movlw	high _line1
  9701  001D44  6F81               	movwf	(blink@line+1)& (0+255),b
  9702  001D46  0E08               	movlw	8
  9703  001D48  6F82               	movwf	blink@start& (0+255),b
  9704  001D4A  0E0F               	movlw	15
  9705  001D4C  6F83               	movwf	blink@end& (0+255),b
  9706  001D4E  ECCE  F03A         	call	_blink	;wreg free
  9707                           
  9708                           ;tela_CONFIG_PRESSAO.h: 30: if (btPress(3)) {
  9709  001D52  0E03               	movlw	3
  9710  001D54  ECC6  F01F         	call	_btPress
  9711  001D58  0900               	iorlw	0
  9712  001D5A  B4D8               	btfsc	status,2,c
  9713  001D5C  D002               	goto	l787
  9714                           
  9715                           ;tela_CONFIG_PRESSAO.h: 31: sp_pressao_rede++;
  9716  001D5E  0100               	movlb	0	; () banked
  9717  001D60  2BDF               	incf	_sp_pressao_rede& (0+255),f,b
  9718  001D62                     l787:
  9719  001D62  FFFF               	dw	65535	; assembler added errata NOP
  9720                           
  9721                           ;tela_CONFIG_PRESSAO.h: 32: }
  9722                           ;tela_CONFIG_PRESSAO.h: 33: if (btPress(2)) {
  9723                           
  9724                           ; BSR set to: 0
  9725  001D64  0E02               	movlw	2
  9726  001D66  ECC6  F01F         	call	_btPress
  9727  001D6A  0900               	iorlw	0
  9728  001D6C  B4D8               	btfsc	status,2,c
  9729  001D6E  D002               	goto	l788
  9730                           
  9731                           ;tela_CONFIG_PRESSAO.h: 34: sp_pressao_rede--;
  9732  001D70  0100               	movlb	0	; () banked
  9733  001D72  07DF               	decf	_sp_pressao_rede& (0+255),f,b
  9734  001D74                     l788:
  9735  001D74  FFFF               	dw	65535	; assembler added errata NOP
  9736                           
  9737                           ;tela_CONFIG_PRESSAO.h: 35: }
  9738                           ;tela_CONFIG_PRESSAO.h: 36: if (sp_pressao_rede > 99) {
  9739                           
  9740                           ; BSR set to: 0
  9741  001D76  0E63               	movlw	99
  9742  001D78  0100               	movlb	0	; () banked
  9743  001D7A  65DF               	cpfsgt	_sp_pressao_rede& (0+255),b
  9744  001D7C  D083               	goto	l790
  9745                           
  9746                           ; BSR set to: 0
  9747                           ;tela_CONFIG_PRESSAO.h: 37: sp_pressao_rede = 0;
  9748  001D7E  0E00               	movlw	0
  9749  001D80  6FDF               	movwf	_sp_pressao_rede& (0+255),b
  9750                           
  9751                           ; BSR set to: 0
  9752                           ;tela_CONFIG_PRESSAO.h: 38: }
  9753                           ;tela_CONFIG_PRESSAO.h: 39: break;
  9754  001D82  D080               	goto	l790
  9755  001D84  FFFF               	dw	65535	; assembler added errata NOP
  9756                           
  9757                           ; BSR set to: 0
  9758                           ;tela_CONFIG_PRESSAO.h: 41: blink(line2, 8, 15);
  9759                           
  9760                           ; BSR set to: 0
  9761  001D86  0E8E               	movlw	low _line2
  9762  001D88  6F80               	movwf	blink@line& (0+255),b
  9763  001D8A  0E01               	movlw	high _line2
  9764  001D8C  6F81               	movwf	(blink@line+1)& (0+255),b
  9765  001D8E  0E08               	movlw	8
  9766  001D90  6F82               	movwf	blink@start& (0+255),b
  9767  001D92  0E0F               	movlw	15
  9768  001D94  6F83               	movwf	blink@end& (0+255),b
  9769  001D96  ECCE  F03A         	call	_blink	;wreg free
  9770                           
  9771                           ;tela_CONFIG_PRESSAO.h: 42: if (btPress(3)) {
  9772  001D9A  0E03               	movlw	3
  9773  001D9C  ECC6  F01F         	call	_btPress
  9774  001DA0  0900               	iorlw	0
  9775  001DA2  B4D8               	btfsc	status,2,c
  9776  001DA4  D002               	goto	l792
  9777                           
  9778                           ;tela_CONFIG_PRESSAO.h: 43: sp_jockey++;
  9779  001DA6  0100               	movlb	0	; () banked
  9780  001DA8  2BDE               	incf	_sp_jockey& (0+255),f,b
  9781  001DAA                     l792:
  9782  001DAA  FFFF               	dw	65535	; assembler added errata NOP
  9783                           
  9784                           ;tela_CONFIG_PRESSAO.h: 44: }
  9785                           ;tela_CONFIG_PRESSAO.h: 45: if (btPress(2)) {
  9786                           
  9787                           ; BSR set to: 0
  9788  001DAC  0E02               	movlw	2
  9789  001DAE  ECC6  F01F         	call	_btPress
  9790  001DB2  0900               	iorlw	0
  9791  001DB4  B4D8               	btfsc	status,2,c
  9792  001DB6  D002               	goto	l793
  9793                           
  9794                           ;tela_CONFIG_PRESSAO.h: 46: sp_jockey--;
  9795  001DB8  0100               	movlb	0	; () banked
  9796  001DBA  07DE               	decf	_sp_jockey& (0+255),f,b
  9797  001DBC                     l793:
  9798  001DBC  FFFF               	dw	65535	; assembler added errata NOP
  9799                           
  9800                           ;tela_CONFIG_PRESSAO.h: 47: }
  9801                           ;tela_CONFIG_PRESSAO.h: 48: if (sp_jockey > 99) {
  9802                           
  9803                           ; BSR set to: 0
  9804  001DBE  0E63               	movlw	99
  9805  001DC0  0100               	movlb	0	; () banked
  9806  001DC2  65DE               	cpfsgt	_sp_jockey& (0+255),b
  9807  001DC4  D05F               	goto	l790
  9808                           
  9809                           ; BSR set to: 0
  9810                           ;tela_CONFIG_PRESSAO.h: 49: sp_jockey = 0;
  9811  001DC6  0E00               	movlw	0
  9812  001DC8  6FDE               	movwf	_sp_jockey& (0+255),b
  9813                           
  9814                           ; BSR set to: 0
  9815                           ;tela_CONFIG_PRESSAO.h: 50: }
  9816                           ;tela_CONFIG_PRESSAO.h: 51: break;
  9817  001DCA  D05C               	goto	l790
  9818  001DCC  FFFF               	dw	65535	; assembler added errata NOP
  9819                           
  9820                           ; BSR set to: 0
  9821                           ;tela_CONFIG_PRESSAO.h: 53: blink(line3, 12, 18);
  9822                           
  9823                           ; BSR set to: 0
  9824  001DCE  0E79               	movlw	low _line3
  9825  001DD0  6F80               	movwf	blink@line& (0+255),b
  9826  001DD2  0E01               	movlw	high _line3
  9827  001DD4  6F81               	movwf	(blink@line+1)& (0+255),b
  9828  001DD6  0E0C               	movlw	12
  9829  001DD8  6F82               	movwf	blink@start& (0+255),b
  9830  001DDA  0E12               	movlw	18
  9831  001DDC  6F83               	movwf	blink@end& (0+255),b
  9832  001DDE  ECCE  F03A         	call	_blink	;wreg free
  9833                           
  9834                           ;tela_CONFIG_PRESSAO.h: 54: if (btPress(3)) {
  9835  001DE2  0E03               	movlw	3
  9836  001DE4  ECC6  F01F         	call	_btPress
  9837  001DE8  0900               	iorlw	0
  9838  001DEA  B4D8               	btfsc	status,2,c
  9839  001DEC  D002               	goto	l796
  9840                           
  9841                           ;tela_CONFIG_PRESSAO.h: 55: sp_principal++;
  9842  001DEE  0100               	movlb	0	; () banked
  9843  001DF0  2BDD               	incf	_sp_principal& (0+255),f,b
  9844  001DF2                     l796:
  9845  001DF2  FFFF               	dw	65535	; assembler added errata NOP
  9846                           
  9847                           ;tela_CONFIG_PRESSAO.h: 56: }
  9848                           ;tela_CONFIG_PRESSAO.h: 57: if (btPress(2)) {
  9849                           
  9850                           ; BSR set to: 0
  9851  001DF4  0E02               	movlw	2
  9852  001DF6  ECC6  F01F         	call	_btPress
  9853  001DFA  0900               	iorlw	0
  9854  001DFC  B4D8               	btfsc	status,2,c
  9855  001DFE  D002               	goto	l797
  9856                           
  9857                           ;tela_CONFIG_PRESSAO.h: 58: sp_principal--;
  9858  001E00  0100               	movlb	0	; () banked
  9859  001E02  07DD               	decf	_sp_principal& (0+255),f,b
  9860  001E04                     l797:
  9861  001E04  FFFF               	dw	65535	; assembler added errata NOP
  9862                           
  9863                           ;tela_CONFIG_PRESSAO.h: 59: }
  9864                           ;tela_CONFIG_PRESSAO.h: 60: if (sp_principal > 99) {
  9865                           
  9866                           ; BSR set to: 0
  9867  001E06  0E63               	movlw	99
  9868  001E08  0100               	movlb	0	; () banked
  9869  001E0A  65DD               	cpfsgt	_sp_principal& (0+255),b
  9870  001E0C  D03B               	goto	l790
  9871                           
  9872                           ; BSR set to: 0
  9873                           ;tela_CONFIG_PRESSAO.h: 61: sp_principal = 0;
  9874  001E0E  0E00               	movlw	0
  9875  001E10  6FDD               	movwf	_sp_principal& (0+255),b
  9876                           
  9877                           ; BSR set to: 0
  9878                           ;tela_CONFIG_PRESSAO.h: 62: }
  9879                           ;tela_CONFIG_PRESSAO.h: 63: break;
  9880  001E12  D038               	goto	l790
  9881  001E14  FFFF               	dw	65535	; assembler added errata NOP
  9882                           
  9883                           ; BSR set to: 0
  9884                           ;tela_CONFIG_PRESSAO.h: 65: blink(line4, 12, 18);
  9885                           
  9886                           ; BSR set to: 0
  9887  001E16  0E64               	movlw	low _line4
  9888  001E18  6F80               	movwf	blink@line& (0+255),b
  9889  001E1A  0E01               	movlw	high _line4
  9890  001E1C  6F81               	movwf	(blink@line+1)& (0+255),b
  9891  001E1E  0E0C               	movlw	12
  9892  001E20  6F82               	movwf	blink@start& (0+255),b
  9893  001E22  0E12               	movlw	18
  9894  001E24  6F83               	movwf	blink@end& (0+255),b
  9895  001E26  ECCE  F03A         	call	_blink	;wreg free
  9896                           
  9897                           ;tela_CONFIG_PRESSAO.h: 66: if (btPress(3)) {
  9898  001E2A  0E03               	movlw	3
  9899  001E2C  ECC6  F01F         	call	_btPress
  9900  001E30  0900               	iorlw	0
  9901  001E32  B4D8               	btfsc	status,2,c
  9902  001E34  D002               	goto	l800
  9903                           
  9904                           ;tela_CONFIG_PRESSAO.h: 67: sp_estacionaria++;
  9905  001E36  0100               	movlb	0	; () banked
  9906  001E38  2BDC               	incf	_sp_estacionaria& (0+255),f,b
  9907  001E3A                     l800:
  9908  001E3A  FFFF               	dw	65535	; assembler added errata NOP
  9909                           
  9910                           ;tela_CONFIG_PRESSAO.h: 68: }
  9911                           ;tela_CONFIG_PRESSAO.h: 69: if (btPress(2)) {
  9912                           
  9913                           ; BSR set to: 0
  9914  001E3C  0E02               	movlw	2
  9915  001E3E  ECC6  F01F         	call	_btPress
  9916  001E42  0900               	iorlw	0
  9917  001E44  B4D8               	btfsc	status,2,c
  9918  001E46  D002               	goto	l801
  9919                           
  9920                           ;tela_CONFIG_PRESSAO.h: 70: sp_estacionaria--;
  9921  001E48  0100               	movlb	0	; () banked
  9922  001E4A  07DC               	decf	_sp_estacionaria& (0+255),f,b
  9923  001E4C                     l801:
  9924  001E4C  FFFF               	dw	65535	; assembler added errata NOP
  9925                           
  9926                           ;tela_CONFIG_PRESSAO.h: 71: }
  9927                           ;tela_CONFIG_PRESSAO.h: 72: if (sp_estacionaria > 99) {
  9928                           
  9929                           ; BSR set to: 0
  9930  001E4E  0E63               	movlw	99
  9931  001E50  0100               	movlb	0	; () banked
  9932  001E52  65DC               	cpfsgt	_sp_estacionaria& (0+255),b
  9933  001E54  D017               	goto	l790
  9934                           
  9935                           ; BSR set to: 0
  9936                           ;tela_CONFIG_PRESSAO.h: 73: sp_estacionaria = 0;
  9937  001E56  0E00               	movlw	0
  9938  001E58  6FDC               	movwf	_sp_estacionaria& (0+255),b
  9939                           
  9940                           ; BSR set to: 0
  9941                           ;tela_CONFIG_PRESSAO.h: 74: }
  9942                           ;tela_CONFIG_PRESSAO.h: 75: break;
  9943  001E5A  D014               	goto	l790
  9944  001E5C  FFFF               	dw	65535	; assembler added errata NOP
  9945                           
  9946                           ; BSR set to: 0
  9947                           
  9948                           ; BSR set to: 0
  9949  001E5E  0E00               	movlw	0
  9950  001E60  6FD8               	movwf	_option_posi& (0+255),b
  9951                           
  9952                           ; BSR set to: 0
  9953                           ;tela_CONFIG_PRESSAO.h: 78: }
  9954                           
  9955                           ;tela_CONFIG_PRESSAO.h: 77: break;
  9956  001E62  D010               	goto	l790
  9957  001E64                     l785:
  9958  001E64  FFFF               	dw	65535	; assembler added errata NOP
  9959                           
  9960                           ; BSR set to: 0
  9961  001E66  0100               	movlb	0	; () banked
  9962  001E68  51D8               	movf	_option_posi& (0+255),w,b
  9963                           
  9964                           ; Switch size 1, requested type "space"
  9965                           ; Number of cases is 4, Range of values is 0 to 3
  9966                           ; switch strategies available:
  9967                           ; Name         Instructions Cycles
  9968                           ; simple_byte           13     7 (average)
  9969                           ;	Chosen strategy is simple_byte
  9970  001E6A  0A00               	xorlw	0	; case 0
  9971  001E6C  B4D8               	btfsc	status,2,c
  9972  001E6E  D766               	goto	l786
  9973  001E70  0A01               	xorlw	1	; case 1
  9974  001E72  B4D8               	btfsc	status,2,c
  9975  001E74  D787               	goto	l791
  9976  001E76  0A03               	xorlw	3	; case 2
  9977  001E78  B4D8               	btfsc	status,2,c
  9978  001E7A  D7A8               	goto	l795
  9979  001E7C  0A01               	xorlw	1	; case 3
  9980  001E7E  B4D8               	btfsc	status,2,c
  9981  001E80  D7C9               	goto	l799
  9982  001E82  D7EC               	goto	l803
  9983  001E84                     l790:
  9984  001E84  FFFF               	dw	65535	; assembler added errata NOP
  9985                           
  9986                           ; BSR set to: 0
  9987                           
  9988                           ; BSR set to: 0
  9989  001E86  0012               	return		;funcret
  9990  001E88  FFFF               	dw	65535	; errata NOP
  9991  001E8A                     __end_of_ajusteSP_Bombas:
  9992                           	opt stack 0
  9993                           tblptru	equ	0xFF8
  9994                           tblptrh	equ	0xFF7
  9995                           tblptrl	equ	0xFF6
  9996                           tablat	equ	0xFF5
  9997                           prodh	equ	0xFF4
  9998                           prodl	equ	0xFF3
  9999                           intcon	equ	0xFF2
 10000                           indf0	equ	0xFEF
 10001                           postinc0	equ	0xFEE
 10002                           fsr0h	equ	0xFEA
 10003                           fsr0l	equ	0xFE9
 10004                           wreg	equ	0xFE8
 10005                           postdec1	equ	0xFE5
 10006                           fsr1l	equ	0xFE1
 10007                           indf2	equ	0xFDF
 10008                           postinc2	equ	0xFDE
 10009                           fsr2h	equ	0xFDA
 10010                           fsr2l	equ	0xFD9
 10011                           status	equ	0xFD8
 10012                           
 10013 ;; *************** function _blink *****************
 10014 ;; Defined at:
 10015 ;;		line 172 in file "lcd.h"
 10016 ;; Parameters:    Size  Location     Type
 10017 ;;  line            2    0[BANK0 ] PTR unsigned char 
 10018 ;;		 -> line4(21), line3(21), line2(21), line1(21), 
 10019 ;;  start           1    2[BANK0 ] unsigned char 
 10020 ;;  end             1    3[BANK0 ] unsigned char 
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;  i               1    4[BANK0 ] unsigned char 
 10023 ;; Return value:  Size  Location     Type
 10024 ;;                  1    wreg      void 
 10025 ;; Registers used:
 10026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10027 ;; Tracked objects:
 10028 ;;		On entry : 0/0
 10029 ;;		On exit  : 0/0
 10030 ;;		Unchanged: 0/0
 10031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10032 ;;      Params:         0       4       0       0       0       0       0
 10033 ;;      Locals:         0       1       0       0       0       0       0
 10034 ;;      Temps:          0       0       0       0       0       0       0
 10035 ;;      Totals:         0       5       0       0       0       0       0
 10036 ;;Total ram usage:        5 bytes
 10037 ;; Hardware stack levels used:    1
 10038 ;; Hardware stack levels required when called:    6
 10039 ;; This function calls:
 10040 ;;		Nothing
 10041 ;; This function is called by:
 10042 ;;		_tela_ajusteRTC
 10043 ;;		_tela_testeBombas
 10044 ;;		_configuraTelefones
 10045 ;;		_configurarEstacionaria
 10046 ;;		_ajusteSP_Bombas
 10047 ;; This function uses a non-reentrant model
 10048 ;;
 10049                           
 10050                           	psect	text33
 10051  00759C                     __ptext33:
 10052                           	opt stack 0
 10053  00759C                     _blink:
 10054                           	opt stack 0
 10055  00759C  FFFF               	dw	65535	; assembler added errata NOP
 10056                           
 10057                           ;lcd.h: 173: if (blinkk) {
 10058                           
 10059                           ; BSR set to: 0
 10060                           ;incstack = 0
 10061  00759E  A073               	btfss	_blinkk/(0+8),_blinkk& (0+7),c
 10062  0075A0  D018               	goto	u6770
 10063                           
 10064                           ;lcd.h: 174: char i = 0;
 10065  0075A2  0E00               	movlw	0
 10066  0075A4  0100               	movlb	0	; () banked
 10067  0075A6  6F84               	movwf	blink@i& (0+255),b
 10068                           
 10069                           ; BSR set to: 0
 10070                           ;lcd.h: 175: for (i = (--start); i < end; i++) {
 10071  0075A8  0782               	decf	blink@start& (0+255),f,b
 10072  0075AA  C082  F084         	movff	blink@start,blink@i
 10073  0075AE  D00C               	goto	l614
 10074  0075B0  FFFF               	dw	65535	; assembler added errata NOP
 10075                           
 10076                           ; BSR set to: 0
 10077                           ;lcd.h: 176: line[i] = ' ';
 10078                           
 10079                           ; BSR set to: 0
 10080  0075B2  5184               	movf	blink@i& (0+255),w,b
 10081  0075B4  0D01               	mullw	1
 10082  0075B6  50F3               	movf	prodl,w,c
 10083  0075B8  2580               	addwf	blink@line& (0+255),w,b
 10084  0075BA  6ED9               	movwf	fsr2l,c
 10085  0075BC  50F4               	movf	prodh,w,c
 10086  0075BE  2181               	addwfc	(blink@line+1)& (0+255),w,b
 10087  0075C0  6EDA               	movwf	fsr2h,c
 10088  0075C2  0E20               	movlw	32
 10089  0075C4  6EDF               	movwf	indf2,c
 10090                           
 10091                           ; BSR set to: 0
 10092  0075C6  2B84               	incf	blink@i& (0+255),f,b
 10093  0075C8                     l614:
 10094  0075C8  FFFF               	dw	65535	; assembler added errata NOP
 10095                           
 10096                           ; BSR set to: 0
 10097                           
 10098                           ; BSR set to: 0
 10099  0075CA  5183               	movf	blink@end& (0+255),w,b
 10100  0075CC  5D84               	subwf	blink@i& (0+255),w,b
 10101  0075CE  A0D8               	btfss	status,0,c
 10102  0075D0  D7EF               	goto	l615
 10103  0075D2                     u6770:
 10104  0075D2  FFFF               	dw	65535	; assembler added errata NOP
 10105                           
 10106                           ; BSR set to: 0
 10107                           
 10108                           ; BSR set to: 0
 10109  0075D4  0012               	return		;funcret
 10110  0075D6  FFFF               	dw	65535	; errata NOP
 10111  0075D8                     __end_of_blink:
 10112                           	opt stack 0
 10113                           tblptru	equ	0xFF8
 10114                           tblptrh	equ	0xFF7
 10115                           tblptrl	equ	0xFF6
 10116                           tablat	equ	0xFF5
 10117                           prodh	equ	0xFF4
 10118                           prodl	equ	0xFF3
 10119                           intcon	equ	0xFF2
 10120                           indf0	equ	0xFEF
 10121                           postinc0	equ	0xFEE
 10122                           fsr0h	equ	0xFEA
 10123                           fsr0l	equ	0xFE9
 10124                           wreg	equ	0xFE8
 10125                           postdec1	equ	0xFE5
 10126                           fsr1l	equ	0xFE1
 10127                           indf2	equ	0xFDF
 10128                           postinc2	equ	0xFDE
 10129                           fsr2h	equ	0xFDA
 10130                           fsr2l	equ	0xFD9
 10131                           status	equ	0xFD8
 10132                           
 10133 ;; *************** function _acaoTesteBomasProgramado *****************
 10134 ;; Defined at:
 10135 ;;		line 112 in file "controle.h"
 10136 ;; Parameters:    Size  Location     Type
 10137 ;;		None
 10138 ;; Auto vars:     Size  Location     Type
 10139 ;;		None
 10140 ;; Return value:  Size  Location     Type
 10141 ;;                  1    wreg      void 
 10142 ;; Registers used:
 10143 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10144 ;; Tracked objects:
 10145 ;;		On entry : 0/0
 10146 ;;		On exit  : 0/0
 10147 ;;		Unchanged: 0/0
 10148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10149 ;;      Params:         0       0       0       0       0       0       0
 10150 ;;      Locals:         0       0       0       0       0       0       0
 10151 ;;      Temps:          0       0       0       0       0       0       0
 10152 ;;      Totals:         0       0       0       0       0       0       0
 10153 ;;Total ram usage:        0 bytes
 10154 ;; Hardware stack levels used:    1
 10155 ;; Hardware stack levels required when called:   11
 10156 ;; This function calls:
 10157 ;;		_acaoTesteBombas
 10158 ;;		_writeEEPROM_ext
 10159 ;; This function is called by:
 10160 ;;		_main
 10161 ;; This function uses a non-reentrant model
 10162 ;;
 10163                           
 10164                           	psect	text34
 10165  007560                     __ptext34:
 10166                           	opt stack 0
 10167  007560                     _acaoTesteBomasProgramado:
 10168                           	opt stack 0
 10169  007560  FFFF               	dw	65535	; assembler added errata NOP
 10170                           
 10171                           ;controle.h: 113: if (dias_restante_teste >= intervalo_teste_dia && intervalo_teste_dia 
      +                          != 0) {
 10172                           
 10173                           ;incstack = 0
 10174  007562  0100               	movlb	0	; () banked
 10175  007564  51F2               	movf	_intervalo_teste_dia& (0+255),w,b
 10176  007566  5DF1               	subwf	_dias_restante_teste& (0+255),w,b
 10177  007568  A0D8               	btfss	status,0,c
 10178  00756A  D015               	goto	l454
 10179                           
 10180                           ; BSR set to: 0
 10181  00756C  51F2               	movf	_intervalo_teste_dia& (0+255),w,b
 10182  00756E  B4D8               	btfsc	status,2,c
 10183  007570  D012               	goto	l454
 10184                           
 10185                           ; BSR set to: 0
 10186                           ;controle.h: 114: if (_hor == horario_de_teste) {
 10187  007572  51F0               	movf	_horario_de_teste& (0+255),w,b
 10188  007574  19F8               	xorwf	__hor& (0+255),w,b
 10189  007576  A4D8               	btfss	status,2,c
 10190  007578  D00E               	goto	l454
 10191                           
 10192                           ; BSR set to: 0
 10193                           ;controle.h: 115: dias_restante_teste = 0;
 10194  00757A  0E00               	movlw	0
 10195  00757C  6FF1               	movwf	_dias_restante_teste& (0+255),b
 10196                           
 10197                           ; BSR set to: 0
 10198                           ;controle.h: 116: writeEEPROM_ext(10, dias_restante_teste);
 10199  00757E  C0F1  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
 10200  007582  0E0A               	movlw	10
 10201  007584  ECB1  F03B         	call	_writeEEPROM_ext
 10202                           
 10203                           ;controle.h: 117: teste_run = 2;
 10204  007588  0E02               	movlw	2
 10205  00758A  0100               	movlb	0	; () banked
 10206  00758C  6FDA               	movwf	_teste_run& (0+255),b
 10207                           
 10208                           ; BSR set to: 0
 10209                           ;controle.h: 118: menu_posi = 28;
 10210  00758E  0E1C               	movlw	28
 10211  007590  6FD7               	movwf	_menu_posi& (0+255),b
 10212                           
 10213                           ; BSR set to: 0
 10214                           ;controle.h: 119: acaoTesteBombas();
 10215  007592  EC43  F00A         	call	_acaoTesteBombas	;wreg free
 10216  007596                     l454:
 10217  007596  FFFF               	dw	65535	; assembler added errata NOP
 10218  007598  0012               	return		;funcret
 10219  00759A  FFFF               	dw	65535	; errata NOP
 10220  00759C                     __end_of_acaoTesteBomasProgramado:
 10221                           	opt stack 0
 10222                           tblptru	equ	0xFF8
 10223                           tblptrh	equ	0xFF7
 10224                           tblptrl	equ	0xFF6
 10225                           tablat	equ	0xFF5
 10226                           prodh	equ	0xFF4
 10227                           prodl	equ	0xFF3
 10228                           intcon	equ	0xFF2
 10229                           indf0	equ	0xFEF
 10230                           postinc0	equ	0xFEE
 10231                           fsr0h	equ	0xFEA
 10232                           fsr0l	equ	0xFE9
 10233                           wreg	equ	0xFE8
 10234                           postdec1	equ	0xFE5
 10235                           fsr1l	equ	0xFE1
 10236                           indf2	equ	0xFDF
 10237                           postinc2	equ	0xFDE
 10238                           fsr2h	equ	0xFDA
 10239                           fsr2l	equ	0xFD9
 10240                           status	equ	0xFD8
 10241                           
 10242 ;; *************** function _acaoTesteBombas *****************
 10243 ;; Defined at:
 10244 ;;		line 124 in file "controle.h"
 10245 ;; Parameters:    Size  Location     Type
 10246 ;;		None
 10247 ;; Auto vars:     Size  Location     Type
 10248 ;;  i               1   83[BANK0 ] unsigned char 
 10249 ;; Return value:  Size  Location     Type
 10250 ;;                  1    wreg      void 
 10251 ;; Registers used:
 10252 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10253 ;; Tracked objects:
 10254 ;;		On entry : 0/0
 10255 ;;		On exit  : 0/0
 10256 ;;		Unchanged: 0/0
 10257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10258 ;;      Params:         0       0       0       0       0       0       0
 10259 ;;      Locals:         0       9       0       0       0       0       0
 10260 ;;      Temps:          0       7       0       0       0       0       0
 10261 ;;      Totals:         0      16       0       0       0       0       0
 10262 ;;Total ram usage:       16 bytes
 10263 ;; Hardware stack levels used:    1
 10264 ;; Hardware stack levels required when called:   10
 10265 ;; This function calls:
 10266 ;;		_btPress
 10267 ;;		_clearShiftREG
 10268 ;;		_intToFloatStr
 10269 ;;		_partidaBombaEstacionaria
 10270 ;;		_salvarLOG
 10271 ;;		_sprintf
 10272 ;;		_writeEEPROM_ext
 10273 ;; This function is called by:
 10274 ;;		_acaoTesteBomasProgramado
 10275 ;;		_main
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279                           	psect	text35
 10280  001486                     __ptext35:
 10281                           	opt stack 0
 10282  001486                     _acaoTesteBombas:
 10283                           	opt stack 0
 10284  001486  FFFF               	dw	65535	; assembler added errata NOP
 10285                           
 10286                           ;controle.h: 125: if (btPress(1)) {
 10287                           
 10288                           ;incstack = 0
 10289  001488  0E01               	movlw	1
 10290  00148A  ECC6  F01F         	call	_btPress
 10291  00148E  0900               	iorlw	0
 10292  001490  B4D8               	btfsc	status,2,c
 10293  001492  D01F               	goto	u17690
 10294                           
 10295                           ;controle.h: 126: teste_run = 0;
 10296  001494  0E00               	movlw	0
 10297  001496  0100               	movlb	0	; () banked
 10298  001498  6FDA               	movwf	_teste_run& (0+255),b
 10299                           
 10300                           ;controle.h: 127: tempo_teste_bombas = 300;
 10301  00149A  0E01               	movlw	1
 10302  00149C  6FFB               	movwf	(_tempo_teste_bombas+1)& (0+255),b
 10303  00149E  0E2C               	movlw	44
 10304  0014A0  6FFA               	movwf	_tempo_teste_bombas& (0+255),b
 10305                           
 10306                           ; BSR set to: 0
 10307                           ;controle.h: 128: menu_posi = _menu_posi;
 10308  0014A2  C0D6  F0D7         	movff	__menu_posi,_menu_posi
 10309                           
 10310                           ;controle.h: 129: char i = 0;
 10311  0014A6  0E00               	movlw	0
 10312  0014A8  6FD3               	movwf	acaoTesteBombas@i& (0+255),b
 10313                           
 10314                           ;controle.h: 130: for (i = 0; i < 8; i++) {
 10315  0014AA  0E00               	movlw	0
 10316  0014AC  6FD3               	movwf	acaoTesteBombas@i& (0+255),b
 10317  0014AE                     l12163:
 10318  0014AE  FFFF               	dw	65535	; assembler added errata NOP
 10319                           
 10320                           ; BSR set to: 0
 10321  0014B0  0E07               	movlw	7
 10322  0014B2  65D3               	cpfsgt	acaoTesteBombas@i& (0+255),b
 10323  0014B4  D001               	goto	l459
 10324  0014B6  D00D               	goto	u17690
 10325  0014B8                     l459:
 10326  0014B8  FFFF               	dw	65535	; assembler added errata NOP
 10327                           
 10328                           ; BSR set to: 0
 10329                           ;controle.h: 131: shift[i] = 0;
 10330                           
 10331                           ; BSR set to: 0
 10332  0014BA  51D3               	movf	acaoTesteBombas@i& (0+255),w,b
 10333  0014BC  0D01               	mullw	1
 10334  0014BE  0E44               	movlw	low _shift
 10335  0014C0  24F3               	addwf	prodl,w,c
 10336  0014C2  6ED9               	movwf	fsr2l,c
 10337  0014C4  0E00               	movlw	high _shift
 10338  0014C6  20F4               	addwfc	prodh,w,c
 10339  0014C8  6EDA               	movwf	fsr2h,c
 10340  0014CA  0E00               	movlw	0
 10341  0014CC  6EDF               	movwf	indf2,c
 10342                           
 10343                           ; BSR set to: 0
 10344  0014CE  2BD3               	incf	acaoTesteBombas@i& (0+255),f,b
 10345  0014D0  D7EE               	goto	l12163
 10346  0014D2                     u17690:
 10347  0014D2  FFFF               	dw	65535	; assembler added errata NOP
 10348                           
 10349                           ;controle.h: 132: }
 10350                           ;controle.h: 133: }
 10351                           ;controle.h: 134: if (_sec_aux != _sec) {
 10352                           
 10353                           ; BSR set to: 0
 10354                           
 10355                           ; BSR set to: 0
 10356  0014D4  0100               	movlb	0	; () banked
 10357  0014D6  51F9               	movf	__sec& (0+255),w,b
 10358  0014D8  19F3               	xorwf	__sec_aux& (0+255),w,b
 10359  0014DA  B4D8               	btfsc	status,2,c
 10360  0014DC  D02A               	goto	l466
 10361                           
 10362                           ; BSR set to: 0
 10363                           ;controle.h: 135: _sec_aux = _sec;
 10364  0014DE  C0F9  F0F3         	movff	__sec,__sec_aux
 10365                           
 10366                           ; BSR set to: 0
 10367                           ;controle.h: 136: tempo_teste_bombas--;
 10368  0014E2  07FA               	decf	_tempo_teste_bombas& (0+255),f,b
 10369  0014E4  A0D8               	btfss	status,0,c
 10370  0014E6  07FB               	decf	(_tempo_teste_bombas+1)& (0+255),f,b
 10371                           
 10372                           ; BSR set to: 0
 10373                           ;controle.h: 137: if (tempo_teste_bombas == 250) {
 10374  0014E8  0EFA               	movlw	250
 10375  0014EA  19FA               	xorwf	_tempo_teste_bombas& (0+255),w,b
 10376  0014EC  11FB               	iorwf	(_tempo_teste_bombas+1)& (0+255),w,b
 10377  0014EE  A4D8               	btfss	status,2,c
 10378  0014F0  D007               	goto	l462
 10379                           
 10380                           ; BSR set to: 0
 10381                           ;controle.h: 138: teste_run = 5;
 10382  0014F2  0E05               	movlw	5
 10383  0014F4  6FDA               	movwf	_teste_run& (0+255),b
 10384                           
 10385                           ;controle.h: 139: status_jockey = 0;
 10386  0014F6  0E00               	movlw	0
 10387  0014F8  6FFE               	movwf	_status_jockey& (0+255),b
 10388                           
 10389                           ;controle.h: 140: shift[6] = 0;
 10390  0014FA  0E00               	movlw	0
 10391  0014FC  6E4A               	movwf	_shift+6,c
 10392                           
 10393                           ;controle.h: 141: } else if (tempo_teste_bombas == 170) {
 10394  0014FE  D019               	goto	l466
 10395  001500                     l462:
 10396  001500  FFFF               	dw	65535	; assembler added errata NOP
 10397                           
 10398                           ; BSR set to: 0
 10399                           
 10400                           ; BSR set to: 0
 10401  001502  0EAA               	movlw	170
 10402  001504  19FA               	xorwf	_tempo_teste_bombas& (0+255),w,b
 10403  001506  11FB               	iorwf	(_tempo_teste_bombas+1)& (0+255),w,b
 10404  001508  A4D8               	btfss	status,2,c
 10405  00150A  D007               	goto	l464
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;controle.h: 142: teste_run = 8;
 10409  00150C  0E08               	movlw	8
 10410  00150E  6FDA               	movwf	_teste_run& (0+255),b
 10411                           
 10412                           ;controle.h: 143: status_principal = 0;
 10413  001510  0E00               	movlw	0
 10414  001512  6FFD               	movwf	_status_principal& (0+255),b
 10415                           
 10416                           ;controle.h: 144: shift[5] = 0;
 10417  001514  0E00               	movlw	0
 10418  001516  6E49               	movwf	_shift+5,c
 10419                           
 10420                           ;controle.h: 145: } else if (tempo_teste_bombas == 1) {
 10421  001518  D00C               	goto	l466
 10422  00151A                     l464:
 10423  00151A  FFFF               	dw	65535	; assembler added errata NOP
 10424                           
 10425                           ; BSR set to: 0
 10426                           
 10427                           ; BSR set to: 0
 10428  00151C  05FA               	decf	_tempo_teste_bombas& (0+255),w,b
 10429  00151E  11FB               	iorwf	(_tempo_teste_bombas+1)& (0+255),w,b
 10430  001520  A4D8               	btfss	status,2,c
 10431  001522  D007               	goto	l466
 10432                           
 10433                           ; BSR set to: 0
 10434                           ;controle.h: 146: teste_run = 12;
 10435  001524  0E0C               	movlw	12
 10436  001526  6FDA               	movwf	_teste_run& (0+255),b
 10437                           
 10438                           ;controle.h: 147: status_estacionaria = 0;
 10439  001528  0E00               	movlw	0
 10440  00152A  6FFC               	movwf	_status_estacionaria& (0+255),b
 10441                           
 10442                           ; BSR set to: 0
 10443                           ;controle.h: 148: partidaBombaEstacionaria(0);
 10444  00152C  0E00               	movlw	0
 10445  00152E  EC01  F019         	call	_partidaBombaEstacionaria
 10446  001532                     l466:
 10447  001532  FFFF               	dw	65535	; assembler added errata NOP
 10448                           
 10449                           ;controle.h: 149: }
 10450                           ;controle.h: 150: }
 10451                           ;controle.h: 151: if (teste_run < 12) {
 10452  001534  0E0C               	movlw	12
 10453  001536  0100               	movlb	0	; () banked
 10454  001538  61DA               	cpfslt	_teste_run& (0+255),b
 10455  00153A  D169               	goto	l468
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;controle.h: 152: sprintf(line1, "   Aguarde.. %3dsec", tempo_teste_bombas);
 10459  00153C  0EA3               	movlw	low _line1
 10460  00153E  6FA1               	movwf	sprintf@wh& (0+255),b
 10461  001540  0E01               	movlw	high _line1
 10462  001542  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10463  001544  0EFF               	movlw	low STR_21
 10464  001546  6FA3               	movwf	sprintf@f& (0+255),b
 10465  001548  0E7C               	movlw	high STR_21
 10466  00154A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10467  00154C  C0FA  F0A5         	movff	_tempo_teste_bombas,?_sprintf+4
 10468  001550  C0FB  F0A6         	movff	_tempo_teste_bombas+1,?_sprintf+5
 10469  001554  ECD4  F03B         	call	_sprintf	;wreg free
 10470                           
 10471                           ;controle.h: 153: sprintf(line2, " Pressao %s bar", intToFloatStr(pressao));
 10472  001558  0100               	movlb	0	; () banked
 10473  00155A  51FF               	movf	_pressao& (0+255),w,b
 10474  00155C  EC0D  F01F         	call	_intToFloatStr
 10475  001560  C0B7  F0CB         	movff	?_intToFloatStr,_acaoTesteBombas$2319
 10476  001564  C0B8  F0CC         	movff	?_intToFloatStr+1,_acaoTesteBombas$2319+1
 10477                           
 10478                           ;controle.h: 153: sprintf(line2, " Pressao %s bar", intToFloatStr(pressao));
 10479  001568  0E8E               	movlw	low _line2
 10480  00156A  0100               	movlb	0	; () banked
 10481  00156C  6FA1               	movwf	sprintf@wh& (0+255),b
 10482  00156E  0E01               	movlw	high _line2
 10483  001570  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10484  001572  0E65               	movlw	low STR_22
 10485  001574  6FA3               	movwf	sprintf@f& (0+255),b
 10486  001576  0E7E               	movlw	high STR_22
 10487  001578  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10488  00157A  C0CB  F0A5         	movff	_acaoTesteBombas$2319,?_sprintf+4
 10489  00157E  C0CC  F0A6         	movff	_acaoTesteBombas$2319+1,?_sprintf+5
 10490  001582  ECD4  F03B         	call	_sprintf	;wreg free
 10491                           
 10492                           ;controle.h: 154: }
 10493                           ;controle.h: 155: switch (teste_run) {
 10494  001586  D143               	goto	l468
 10495  001588  FFFF               	dw	65535	; assembler added errata NOP
 10496                           
 10497                           ;controle.h: 157: dias_restante_teste = 0;
 10498  00158A  0E00               	movlw	0
 10499  00158C  0100               	movlb	0	; () banked
 10500  00158E  6FF1               	movwf	_dias_restante_teste& (0+255),b
 10501                           
 10502                           ; BSR set to: 0
 10503                           ;controle.h: 158: writeEEPROM_ext(10, dias_restante_teste);
 10504  001590  C0F1  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
 10505  001594  0E0A               	movlw	10
 10506  001596  ECB1  F03B         	call	_writeEEPROM_ext
 10507                           
 10508                           ;controle.h: 159: shift[2] = 1;
 10509  00159A  0E01               	movlw	1
 10510  00159C  6E46               	movwf	_shift+2,c
 10511                           
 10512                           ;controle.h: 160: teste_run = 3;
 10513  00159E  0E03               	movlw	3
 10514  0015A0  0100               	movlb	0	; () banked
 10515  0015A2  D082               	goto	L24
 10516  0015A4  FFFF               	dw	65535	; assembler added errata NOP
 10517                           
 10518                           ; BSR set to: 0
 10519                           ;controle.h: 163: if (pressao <= (sp_pressao_rede - 10)) {
 10520                           
 10521                           ; BSR set to: 0
 10522  0015A6  51FF               	movf	_pressao& (0+255),w,b
 10523  0015A8  6FC4               	movwf	??_acaoTesteBombas& (0+255),b
 10524  0015AA  6BC5               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 10525  0015AC  0EF6               	movlw	246
 10526  0015AE  6FC6               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 10527  0015B0  0EFF               	movlw	255
 10528  0015B2  6FC7               	movwf	(??_acaoTesteBombas+3)& (0+255),b
 10529  0015B4  51DF               	movf	_sp_pressao_rede& (0+255),w,b
 10530  0015B6  6FC8               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 10531  0015B8  6BC9               	clrf	(??_acaoTesteBombas+5)& (0+255),b
 10532  0015BA  51C6               	movf	(??_acaoTesteBombas+2)& (0+255),w,b
 10533  0015BC  27C8               	addwf	(??_acaoTesteBombas+4)& (0+255),f,b
 10534  0015BE  51C7               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 10535  0015C0  23C9               	addwfc	(??_acaoTesteBombas+5)& (0+255),f,b
 10536  0015C2  51C4               	movf	??_acaoTesteBombas& (0+255),w,b
 10537  0015C4  5DC8               	subwf	(??_acaoTesteBombas+4)& (0+255),w,b
 10538  0015C6  51C9               	movf	(??_acaoTesteBombas+5)& (0+255),w,b
 10539  0015C8  0A80               	xorlw	128
 10540  0015CA  6FCA               	movwf	(??_acaoTesteBombas+6)& (0+255),b
 10541  0015CC  51C5               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 10542  0015CE  0A80               	xorlw	128
 10543  0015D0  59CA               	subwfb	(??_acaoTesteBombas+6)& (0+255),w,b
 10544  0015D2  A0D8               	btfss	status,0,c
 10545  0015D4  D141               	goto	l470
 10546                           
 10547                           ; BSR set to: 0
 10548                           ;controle.h: 164: shift[2] = 0;
 10549  0015D6  0E00               	movlw	0
 10550  0015D8  6E46               	movwf	_shift+2,c
 10551                           
 10552                           ;controle.h: 165: shift[6] = 1;
 10553  0015DA  0E01               	movlw	1
 10554  0015DC  6E4A               	movwf	_shift+6,c
 10555                           
 10556                           ;controle.h: 166: teste_run = 4;
 10557  0015DE  0E04               	movlw	4
 10558  0015E0  D063               	goto	L24
 10559  0015E2  FFFF               	dw	65535	; assembler added errata NOP
 10560                           
 10561                           ; BSR set to: 0
 10562                           ;controle.h: 170: if (pressao >= sp_pressao_rede) {
 10563                           
 10564                           ; BSR set to: 0
 10565  0015E4  51DF               	movf	_sp_pressao_rede& (0+255),w,b
 10566  0015E6  5DFF               	subwf	_pressao& (0+255),w,b
 10567  0015E8  A0D8               	btfss	status,0,c
 10568  0015EA  D136               	goto	l470
 10569                           
 10570                           ; BSR set to: 0
 10571                           ;controle.h: 171: shift[6] = 0;
 10572  0015EC  0E00               	movlw	0
 10573  0015EE  6E4A               	movwf	_shift+6,c
 10574                           
 10575                           ;controle.h: 172: status_jockey = 1;
 10576  0015F0  0E01               	movlw	1
 10577  0015F2  6FFE               	movwf	_status_jockey& (0+255),b
 10578                           
 10579                           ;controle.h: 173: teste_run = 5;
 10580  0015F4  0E05               	movlw	5
 10581  0015F6  6FDA               	movwf	_teste_run& (0+255),b
 10582                           
 10583                           ;controle.h: 174: tempo_teste_bombas = 249;
 10584  0015F8  0E00               	movlw	0
 10585  0015FA  6FFB               	movwf	(_tempo_teste_bombas+1)& (0+255),b
 10586  0015FC  0EF9               	movlw	249
 10587  0015FE  D08B               	goto	L23
 10588  001600  FFFF               	dw	65535	; assembler added errata NOP
 10589                           
 10590                           ; BSR set to: 0
 10591                           ;controle.h: 178: shift[2] = 1;
 10592                           
 10593                           ; BSR set to: 0
 10594  001602  0E01               	movlw	1
 10595  001604  6E46               	movwf	_shift+2,c
 10596                           
 10597                           ;controle.h: 179: teste_run = 6;
 10598  001606  0E06               	movlw	6
 10599  001608  D04F               	goto	L24
 10600  00160A  FFFF               	dw	65535	; assembler added errata NOP
 10601                           
 10602                           ; BSR set to: 0
 10603                           ;controle.h: 182: if (pressao <= (sp_pressao_rede - 10)) {
 10604                           
 10605                           ; BSR set to: 0
 10606  00160C  51FF               	movf	_pressao& (0+255),w,b
 10607  00160E  6FC4               	movwf	??_acaoTesteBombas& (0+255),b
 10608  001610  6BC5               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 10609  001612  0EF6               	movlw	246
 10610  001614  6FC6               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 10611  001616  0EFF               	movlw	255
 10612  001618  6FC7               	movwf	(??_acaoTesteBombas+3)& (0+255),b
 10613  00161A  51DF               	movf	_sp_pressao_rede& (0+255),w,b
 10614  00161C  6FC8               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 10615  00161E  6BC9               	clrf	(??_acaoTesteBombas+5)& (0+255),b
 10616  001620  51C6               	movf	(??_acaoTesteBombas+2)& (0+255),w,b
 10617  001622  27C8               	addwf	(??_acaoTesteBombas+4)& (0+255),f,b
 10618  001624  51C7               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 10619  001626  23C9               	addwfc	(??_acaoTesteBombas+5)& (0+255),f,b
 10620  001628  51C4               	movf	??_acaoTesteBombas& (0+255),w,b
 10621  00162A  5DC8               	subwf	(??_acaoTesteBombas+4)& (0+255),w,b
 10622  00162C  51C9               	movf	(??_acaoTesteBombas+5)& (0+255),w,b
 10623  00162E  0A80               	xorlw	128
 10624  001630  6FCA               	movwf	(??_acaoTesteBombas+6)& (0+255),b
 10625  001632  51C5               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 10626  001634  0A80               	xorlw	128
 10627  001636  59CA               	subwfb	(??_acaoTesteBombas+6)& (0+255),w,b
 10628  001638  A0D8               	btfss	status,0,c
 10629  00163A  D10E               	goto	l470
 10630                           
 10631                           ; BSR set to: 0
 10632                           ;controle.h: 183: shift[5] = 1;
 10633  00163C  0E01               	movlw	1
 10634  00163E  6E49               	movwf	_shift+5,c
 10635                           
 10636                           ;controle.h: 184: shift[2] = 0;
 10637  001640  0E00               	movlw	0
 10638  001642  6E46               	movwf	_shift+2,c
 10639                           
 10640                           ;controle.h: 185: teste_run = 7;
 10641  001644  0E07               	movlw	7
 10642  001646  D030               	goto	L24
 10643  001648  FFFF               	dw	65535	; assembler added errata NOP
 10644                           
 10645                           ; BSR set to: 0
 10646                           ;controle.h: 189: if (pressao >= sp_pressao_rede) {
 10647                           
 10648                           ; BSR set to: 0
 10649  00164A  51DF               	movf	_sp_pressao_rede& (0+255),w,b
 10650  00164C  5DFF               	subwf	_pressao& (0+255),w,b
 10651  00164E  A0D8               	btfss	status,0,c
 10652  001650  D103               	goto	l470
 10653                           
 10654                           ; BSR set to: 0
 10655                           ;controle.h: 190: shift[5] = 0;
 10656  001652  0E00               	movlw	0
 10657  001654  6E49               	movwf	_shift+5,c
 10658                           
 10659                           ;controle.h: 191: status_principal = 1;
 10660  001656  0E01               	movlw	1
 10661  001658  6FFD               	movwf	_status_principal& (0+255),b
 10662                           
 10663                           ;controle.h: 192: teste_run = 8;
 10664  00165A  0E08               	movlw	8
 10665  00165C  6FDA               	movwf	_teste_run& (0+255),b
 10666                           
 10667                           ;controle.h: 193: tempo_teste_bombas = 169;
 10668  00165E  0E00               	movlw	0
 10669  001660  6FFB               	movwf	(_tempo_teste_bombas+1)& (0+255),b
 10670  001662  0EA9               	movlw	169
 10671  001664  D058               	goto	L23
 10672  001666  FFFF               	dw	65535	; assembler added errata NOP
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;controle.h: 197: shift[2] = 1;
 10676                           
 10677                           ; BSR set to: 0
 10678  001668  0E01               	movlw	1
 10679  00166A  6E46               	movwf	_shift+2,c
 10680                           
 10681                           ;controle.h: 198: teste_run = 9;
 10682  00166C  0E09               	movlw	9
 10683  00166E  D01C               	goto	L24
 10684  001670  FFFF               	dw	65535	; assembler added errata NOP
 10685                           
 10686                           ; BSR set to: 0
 10687                           ;controle.h: 201: if (pressao <= (sp_pressao_rede - 10)) {
 10688                           
 10689                           ; BSR set to: 0
 10690  001672  51FF               	movf	_pressao& (0+255),w,b
 10691  001674  6FC4               	movwf	??_acaoTesteBombas& (0+255),b
 10692  001676  6BC5               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 10693  001678  0EF6               	movlw	246
 10694  00167A  6FC6               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 10695  00167C  0EFF               	movlw	255
 10696  00167E  6FC7               	movwf	(??_acaoTesteBombas+3)& (0+255),b
 10697  001680  51DF               	movf	_sp_pressao_rede& (0+255),w,b
 10698  001682  6FC8               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 10699  001684  6BC9               	clrf	(??_acaoTesteBombas+5)& (0+255),b
 10700  001686  51C6               	movf	(??_acaoTesteBombas+2)& (0+255),w,b
 10701  001688  27C8               	addwf	(??_acaoTesteBombas+4)& (0+255),f,b
 10702  00168A  51C7               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 10703  00168C  23C9               	addwfc	(??_acaoTesteBombas+5)& (0+255),f,b
 10704  00168E  51C4               	movf	??_acaoTesteBombas& (0+255),w,b
 10705  001690  5DC8               	subwf	(??_acaoTesteBombas+4)& (0+255),w,b
 10706  001692  51C9               	movf	(??_acaoTesteBombas+5)& (0+255),w,b
 10707  001694  0A80               	xorlw	128
 10708  001696  6FCA               	movwf	(??_acaoTesteBombas+6)& (0+255),b
 10709  001698  51C5               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 10710  00169A  0A80               	xorlw	128
 10711  00169C  59CA               	subwfb	(??_acaoTesteBombas+6)& (0+255),w,b
 10712  00169E  A0D8               	btfss	status,0,c
 10713  0016A0  D0DB               	goto	l470
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;controle.h: 202: shift[2] = 0;
 10717  0016A2  0E00               	movlw	0
 10718  0016A4  6E46               	movwf	_shift+2,c
 10719                           
 10720                           ;controle.h: 203: teste_run = 10;
 10721  0016A6  0E0A               	movlw	10
 10722  0016A8                     L24:
 10723  0016A8  FFFF               	dw	65535	; assembler added errata NOP
 10724  0016AA  6FDA               	movwf	_teste_run& (0+255),b
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;controle.h: 204: }
 10728                           ;controle.h: 205: break;
 10729  0016AC  D0D5               	goto	l470
 10730  0016AE  FFFF               	dw	65535	; assembler added errata NOP
 10731                           
 10732                           ; BSR set to: 0
 10733                           ;controle.h: 207: partidaBombaEstacionaria(1);
 10734                           
 10735                           ; BSR set to: 0
 10736  0016B0  0E01               	movlw	1
 10737  0016B2  EC01  F019         	call	_partidaBombaEstacionaria
 10738                           
 10739                           ;controle.h: 208: if ((tempo_coun_estacionaria != _sec) && estacionaria_Ligada == 1) {
 10740  0016B6  0100               	movlb	0	; () banked
 10741  0016B8  51F9               	movf	__sec& (0+255),w,b
 10742  0016BA  19E8               	xorwf	_tempo_coun_estacionaria& (0+255),w,b
 10743  0016BC  B4D8               	btfsc	status,2,c
 10744  0016BE  D006               	goto	l484
 10745                           
 10746                           ; BSR set to: 0
 10747  0016C0  05ED               	decf	_estacionaria_Ligada& (0+255),w,b
 10748  0016C2  A4D8               	btfss	status,2,c
 10749  0016C4  D003               	goto	l484
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;controle.h: 209: tempo_coun_estacionaria = _sec;
 10753  0016C6  C0F9  F0E8         	movff	__sec,_tempo_coun_estacionaria
 10754                           
 10755                           ; BSR set to: 0
 10756                           ;controle.h: 210: tempo_corrido_teste_estacionaria++;
 10757  0016CA  2BE9               	incf	_tempo_corrido_teste_estacionaria& (0+255),f,b
 10758  0016CC                     l484:
 10759  0016CC  FFFF               	dw	65535	; assembler added errata NOP
 10760                           
 10761                           ; BSR set to: 0
 10762                           ;controle.h: 211: }
 10763                           ;controle.h: 212: if (tempo_corrido_teste_estacionaria >= tempo_limite_teste_estacionari
      +                          a) {
 10764                           
 10765                           ; BSR set to: 0
 10766  0016CE  51EA               	movf	_tempo_limite_teste_estacionaria& (0+255),w,b
 10767  0016D0  5DE9               	subwf	_tempo_corrido_teste_estacionaria& (0+255),w,b
 10768  0016D2  A0D8               	btfss	status,0,c
 10769  0016D4  D006               	goto	l485
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;controle.h: 213: status_estacionaria = 1;
 10773  0016D6  0E01               	movlw	1
 10774  0016D8  6FFC               	movwf	_status_estacionaria& (0+255),b
 10775                           
 10776                           ;controle.h: 214: tempo_corrido_teste_estacionaria = 0;
 10777  0016DA  0E00               	movlw	0
 10778  0016DC  6FE9               	movwf	_tempo_corrido_teste_estacionaria& (0+255),b
 10779                           
 10780                           ;controle.h: 215: teste_run = 11;
 10781  0016DE  0E0B               	movlw	11
 10782  0016E0  6FDA               	movwf	_teste_run& (0+255),b
 10783  0016E2                     l485:
 10784  0016E2  FFFF               	dw	65535	; assembler added errata NOP
 10785                           
 10786                           ; BSR set to: 0
 10787                           ;controle.h: 216: }
 10788                           ;controle.h: 217: if (status_estacionaria == 0 || falha == 1) {
 10789  0016E4  51FC               	movf	_status_estacionaria& (0+255),w,b
 10790  0016E6  B4D8               	btfsc	status,2,c
 10791  0016E8  D003               	goto	u17840
 10792                           
 10793                           ; BSR set to: 0
 10794  0016EA  05DB               	decf	_falha& (0+255),w,b
 10795  0016EC  A4D8               	btfss	status,2,c
 10796  0016EE  D0B4               	goto	l470
 10797  0016F0                     u17840:
 10798  0016F0  FFFF               	dw	65535	; assembler added errata NOP
 10799                           
 10800                           ; BSR set to: 0
 10801                           ;controle.h: 218: teste_run = 11;
 10802                           
 10803                           ; BSR set to: 0
 10804  0016F2  0E0B               	movlw	11
 10805  0016F4  6FDA               	movwf	_teste_run& (0+255),b
 10806                           
 10807                           ;controle.h: 219: status_estacionaria = 0;
 10808  0016F6  0E00               	movlw	0
 10809  0016F8  6FFC               	movwf	_status_estacionaria& (0+255),b
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;controle.h: 220: }
 10813                           ;controle.h: 221: break;
 10814  0016FA  D0AE               	goto	l470
 10815  0016FC  FFFF               	dw	65535	; assembler added errata NOP
 10816                           
 10817                           ; BSR set to: 0
 10818                           ;controle.h: 223: salvarLOG();
 10819                           
 10820                           ; BSR set to: 0
 10821  0016FE  EC50  F015         	call	_salvarLOG	;wreg free
 10822                           
 10823                           ;controle.h: 224: clearShiftREG();
 10824  001702  ECE8  F039         	call	_clearShiftREG	;wreg free
 10825                           
 10826                           ;controle.h: 225: bt_press = 1;
 10827  001706  0E01               	movlw	1
 10828  001708  6E71               	movwf	_bt_press,c
 10829                           
 10830                           ;controle.h: 226: teste_run = 12;
 10831  00170A  0E0C               	movlw	12
 10832  00170C  0100               	movlb	0	; () banked
 10833  00170E  6FDA               	movwf	_teste_run& (0+255),b
 10834                           
 10835                           ; BSR set to: 0
 10836                           ;controle.h: 227: tempo_teste_bombas = 1;
 10837  001710  0E00               	movlw	0
 10838  001712  6FFB               	movwf	(_tempo_teste_bombas+1)& (0+255),b
 10839  001714  0E01               	movlw	1
 10840  001716                     L23:
 10841  001716  FFFF               	dw	65535	; assembler added errata NOP
 10842  001718  6FFA               	movwf	_tempo_teste_bombas& (0+255),b
 10843                           
 10844                           ;controle.h: 228: break;
 10845  00171A  D09E               	goto	l470
 10846  00171C  FFFF               	dw	65535	; assembler added errata NOP
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;controle.h: 230: sprintf(line1, "  TESTE CONCLUIDO!");
 10850                           
 10851                           ; BSR set to: 0
 10852  00171E  0EA3               	movlw	low _line1
 10853  001720  6FA1               	movwf	sprintf@wh& (0+255),b
 10854  001722  0E01               	movlw	high _line1
 10855  001724  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10856  001726  0E3B               	movlw	low STR_23
 10857  001728  6FA3               	movwf	sprintf@f& (0+255),b
 10858  00172A  0E7D               	movlw	high STR_23
 10859  00172C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10860  00172E  ECD4  F03B         	call	_sprintf	;wreg free
 10861                           
 10862                           ;controle.h: 231: sprintf(line2, " JOKEY : %s", status_jockey == 1 ? "OK" : "ERRO");
 10863  001732  0100               	movlb	0	; () banked
 10864  001734  05FE               	decf	_status_jockey& (0+255),w,b
 10865  001736  B4D8               	btfsc	status,2,c
 10866  001738  D004               	goto	l492
 10867                           
 10868                           ; BSR set to: 0
 10869  00173A  0EEE               	movlw	low STR_26
 10870  00173C  6FCD               	movwf	_acaoTesteBombas$1241& (0+255),b
 10871  00173E  0E7F               	movlw	high STR_26
 10872  001740  D004               	goto	L25
 10873  001742                     l492:
 10874  001742  FFFF               	dw	65535	; assembler added errata NOP
 10875                           
 10876                           ; BSR set to: 0
 10877                           
 10878                           ; BSR set to: 0
 10879  001744  0E62               	movlw	low (STR_35+13)
 10880  001746  6FCD               	movwf	_acaoTesteBombas$1241& (0+255),b
 10881  001748  0E7E               	movlw	high (STR_35+13)
 10882  00174A                     L25:
 10883  00174A  FFFF               	dw	65535	; assembler added errata NOP
 10884  00174C  6FCE               	movwf	(_acaoTesteBombas$1241+1)& (0+255),b
 10885                           
 10886                           ; BSR set to: 0
 10887                           
 10888                           ; BSR set to: 0
 10889  00174E  0E8E               	movlw	low _line2
 10890  001750  6FA1               	movwf	sprintf@wh& (0+255),b
 10891  001752  0E01               	movlw	high _line2
 10892  001754  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10893  001756  0E5D               	movlw	low STR_24
 10894  001758  6FA3               	movwf	sprintf@f& (0+255),b
 10895  00175A  0E7F               	movlw	high STR_24
 10896  00175C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10897  00175E  C0CD  F0A5         	movff	_acaoTesteBombas$1241,?_sprintf+4
 10898  001762  C0CE  F0A6         	movff	_acaoTesteBombas$1241+1,?_sprintf+5
 10899  001766  ECD4  F03B         	call	_sprintf	;wreg free
 10900                           
 10901                           ;controle.h: 232: sprintf(line3, " PRINCIPAL : %s", status_principal == 1 ? "OK" : "ERRO
      +                          ");
 10902  00176A  0100               	movlb	0	; () banked
 10903  00176C  05FD               	decf	_status_principal& (0+255),w,b
 10904  00176E  B4D8               	btfsc	status,2,c
 10905  001770  D004               	goto	l496
 10906                           
 10907                           ; BSR set to: 0
 10908  001772  0EEE               	movlw	low STR_26
 10909  001774  6FCF               	movwf	_acaoTesteBombas$1246& (0+255),b
 10910  001776  0E7F               	movlw	high STR_26
 10911  001778  D004               	goto	L26
 10912  00177A                     l496:
 10913  00177A  FFFF               	dw	65535	; assembler added errata NOP
 10914                           
 10915                           ; BSR set to: 0
 10916                           
 10917                           ; BSR set to: 0
 10918  00177C  0E62               	movlw	low (STR_35+13)
 10919  00177E  6FCF               	movwf	_acaoTesteBombas$1246& (0+255),b
 10920  001780  0E7E               	movlw	high (STR_35+13)
 10921  001782                     L26:
 10922  001782  FFFF               	dw	65535	; assembler added errata NOP
 10923  001784  6FD0               	movwf	(_acaoTesteBombas$1246+1)& (0+255),b
 10924                           
 10925                           ; BSR set to: 0
 10926                           
 10927                           ; BSR set to: 0
 10928  001786  0E79               	movlw	low _line3
 10929  001788  6FA1               	movwf	sprintf@wh& (0+255),b
 10930  00178A  0E01               	movlw	high _line3
 10931  00178C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10932  00178E  0E75               	movlw	low STR_27
 10933  001790  6FA3               	movwf	sprintf@f& (0+255),b
 10934  001792  0E7E               	movlw	high STR_27
 10935  001794  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10936  001796  C0CF  F0A5         	movff	_acaoTesteBombas$1246,?_sprintf+4
 10937  00179A  C0D0  F0A6         	movff	_acaoTesteBombas$1246+1,?_sprintf+5
 10938  00179E  ECD4  F03B         	call	_sprintf	;wreg free
 10939                           
 10940                           ;controle.h: 233: sprintf(line4, " COMBUSTAO : %s", status_estacionaria == 1 ? "OK" : "E
      +                          RRO");
 10941  0017A2  0100               	movlb	0	; () banked
 10942  0017A4  05FC               	decf	_status_estacionaria& (0+255),w,b
 10943  0017A6  B4D8               	btfsc	status,2,c
 10944  0017A8  D004               	goto	l500
 10945                           
 10946                           ; BSR set to: 0
 10947  0017AA  0EEE               	movlw	low STR_26
 10948  0017AC  6FD1               	movwf	_acaoTesteBombas$1251& (0+255),b
 10949  0017AE  0E7F               	movlw	high STR_26
 10950  0017B0  D004               	goto	L27
 10951  0017B2                     l500:
 10952  0017B2  FFFF               	dw	65535	; assembler added errata NOP
 10953                           
 10954                           ; BSR set to: 0
 10955                           
 10956                           ; BSR set to: 0
 10957  0017B4  0E62               	movlw	low (STR_35+13)
 10958  0017B6  6FD1               	movwf	_acaoTesteBombas$1251& (0+255),b
 10959  0017B8  0E7E               	movlw	high (STR_35+13)
 10960  0017BA                     L27:
 10961  0017BA  FFFF               	dw	65535	; assembler added errata NOP
 10962  0017BC  6FD2               	movwf	(_acaoTesteBombas$1251+1)& (0+255),b
 10963                           
 10964                           ; BSR set to: 0
 10965                           
 10966                           ; BSR set to: 0
 10967  0017BE  0E64               	movlw	low _line4
 10968  0017C0  6FA1               	movwf	sprintf@wh& (0+255),b
 10969  0017C2  0E01               	movlw	high _line4
 10970  0017C4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10971  0017C6  0E85               	movlw	low STR_30
 10972  0017C8  6FA3               	movwf	sprintf@f& (0+255),b
 10973  0017CA  0E7E               	movlw	high STR_30
 10974  0017CC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10975  0017CE  C0D1  F0A5         	movff	_acaoTesteBombas$1251,?_sprintf+4
 10976  0017D2  C0D2  F0A6         	movff	_acaoTesteBombas$1251+1,?_sprintf+5
 10977  0017D6  ECD4  F03B         	call	_sprintf	;wreg free
 10978                           
 10979                           ;controle.h: 235: if (tempo_teste_bombas <= -50) {
 10980  0017DA  0100               	movlb	0	; () banked
 10981  0017DC  AFFB               	btfss	(_tempo_teste_bombas+1)& (0+255),7,b
 10982  0017DE  D03C               	goto	l470
 10983  0017E0  0ECF               	movlw	207
 10984  0017E2  5DFA               	subwf	_tempo_teste_bombas& (0+255),w,b
 10985  0017E4  0EFF               	movlw	255
 10986  0017E6  59FB               	subwfb	(_tempo_teste_bombas+1)& (0+255),w,b
 10987  0017E8  B0D8               	btfsc	status,0,c
 10988  0017EA  D036               	goto	l470
 10989                           
 10990                           ; BSR set to: 0
 10991                           ;controle.h: 236: tempo_teste_bombas = 300;
 10992  0017EC  0E01               	movlw	1
 10993  0017EE  6FFB               	movwf	(_tempo_teste_bombas+1)& (0+255),b
 10994  0017F0  0E2C               	movlw	44
 10995  0017F2  6FFA               	movwf	_tempo_teste_bombas& (0+255),b
 10996                           
 10997                           ;controle.h: 237: menu_posi = 0;
 10998  0017F4  0E00               	movlw	0
 10999  0017F6  6FD7               	movwf	_menu_posi& (0+255),b
 11000                           
 11001                           ;controle.h: 238: teste_run = 0;
 11002  0017F8  0E00               	movlw	0
 11003  0017FA  6FDA               	movwf	_teste_run& (0+255),b
 11004                           
 11005                           ;controle.h: 239: bt_press = 1;
 11006  0017FC  0E01               	movlw	1
 11007  0017FE  6E71               	movwf	_bt_press,c
 11008                           
 11009                           ; BSR set to: 0
 11010                           ;controle.h: 240: }
 11011                           ;controle.h: 241: break;
 11012  001800  D02B               	goto	l470
 11013  001802  FFFF               	dw	65535	; assembler added errata NOP
 11014                           
 11015                           ; BSR set to: 0
 11016                           ;controle.h: 243: teste_run = 0;
 11017                           
 11018                           ; BSR set to: 0
 11019  001804  0E00               	movlw	0
 11020  001806  6FDA               	movwf	_teste_run& (0+255),b
 11021                           
 11022                           ;controle.h: 244: menu_posi = 0;
 11023  001808  0E00               	movlw	0
 11024  00180A  6FD7               	movwf	_menu_posi& (0+255),b
 11025                           
 11026                           ; BSR set to: 0
 11027                           ;controle.h: 246: }
 11028                           
 11029                           ;controle.h: 245: break;
 11030  00180C  D025               	goto	l470
 11031  00180E                     l468:
 11032  00180E  FFFF               	dw	65535	; assembler added errata NOP
 11033                           
 11034                           ; BSR set to: 0
 11035  001810  0100               	movlb	0	; () banked
 11036  001812  51DA               	movf	_teste_run& (0+255),w,b
 11037                           
 11038                           ; Switch size 1, requested type "space"
 11039                           ; Number of cases is 11, Range of values is 2 to 12
 11040                           ; switch strategies available:
 11041                           ; Name         Instructions Cycles
 11042                           ; simple_byte           34    18 (average)
 11043                           ;	Chosen strategy is simple_byte
 11044  001814  0A02               	xorlw	2	; case 2
 11045  001816  B4D8               	btfsc	status,2,c
 11046  001818  D6B7               	goto	l469
 11047  00181A  0A01               	xorlw	1	; case 3
 11048  00181C  B4D8               	btfsc	status,2,c
 11049  00181E  D6C2               	goto	l471
 11050  001820  0A07               	xorlw	7	; case 4
 11051  001822  B4D8               	btfsc	status,2,c
 11052  001824  D6DE               	goto	l473
 11053  001826  0A01               	xorlw	1	; case 5
 11054  001828  B4D8               	btfsc	status,2,c
 11055  00182A  D6EA               	goto	l475
 11056  00182C  0A03               	xorlw	3	; case 6
 11057  00182E  B4D8               	btfsc	status,2,c
 11058  001830  D6EC               	goto	l476
 11059  001832  0A01               	xorlw	1	; case 7
 11060  001834  B4D8               	btfsc	status,2,c
 11061  001836  D708               	goto	l478
 11062  001838  0A0F               	xorlw	15	; case 8
 11063  00183A  B4D8               	btfsc	status,2,c
 11064  00183C  D714               	goto	l480
 11065  00183E  0A01               	xorlw	1	; case 9
 11066  001840  B4D8               	btfsc	status,2,c
 11067  001842  D716               	goto	l481
 11068  001844  0A03               	xorlw	3	; case 10
 11069  001846  B4D8               	btfsc	status,2,c
 11070  001848  D732               	goto	l483
 11071  00184A  0A01               	xorlw	1	; case 11
 11072  00184C  B4D8               	btfsc	status,2,c
 11073  00184E  D756               	goto	l489
 11074  001850  0A07               	xorlw	7	; case 12
 11075  001852  B4D8               	btfsc	status,2,c
 11076  001854  D763               	goto	l490
 11077  001856  D7D5               	goto	l504
 11078  001858                     l470:
 11079  001858  FFFF               	dw	65535	; assembler added errata NOP
 11080                           
 11081                           ; BSR set to: 0
 11082                           
 11083                           ; BSR set to: 0
 11084  00185A  0012               	return		;funcret
 11085  00185C  FFFF               	dw	65535	; errata NOP
 11086  00185E                     __end_of_acaoTesteBombas:
 11087                           	opt stack 0
 11088                           tblptru	equ	0xFF8
 11089                           tblptrh	equ	0xFF7
 11090                           tblptrl	equ	0xFF6
 11091                           tablat	equ	0xFF5
 11092                           prodh	equ	0xFF4
 11093                           prodl	equ	0xFF3
 11094                           intcon	equ	0xFF2
 11095                           indf0	equ	0xFEF
 11096                           postinc0	equ	0xFEE
 11097                           fsr0h	equ	0xFEA
 11098                           fsr0l	equ	0xFE9
 11099                           wreg	equ	0xFE8
 11100                           postdec1	equ	0xFE5
 11101                           fsr1l	equ	0xFE1
 11102                           indf2	equ	0xFDF
 11103                           postinc2	equ	0xFDE
 11104                           fsr2h	equ	0xFDA
 11105                           fsr2l	equ	0xFD9
 11106                           status	equ	0xFD8
 11107                           
 11108 ;; *************** function _salvarLOG *****************
 11109 ;; Defined at:
 11110 ;;		line 9 in file "logs.h"
 11111 ;; Parameters:    Size  Location     Type
 11112 ;;		None
 11113 ;; Auto vars:     Size  Location     Type
 11114 ;;  dtl_ultimo_r    1   14[BANK0 ] unsigned char 
 11115 ;; Return value:  Size  Location     Type
 11116 ;;                  1    wreg      void 
 11117 ;; Registers used:
 11118 ;;		wreg, status,2, status,0, cstack
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 0/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11124 ;;      Params:         0       0       0       0       0       0       0
 11125 ;;      Locals:         0       1       0       0       0       0       0
 11126 ;;      Temps:          0       0       0       0       0       0       0
 11127 ;;      Totals:         0       1       0       0       0       0       0
 11128 ;;Total ram usage:        1 bytes
 11129 ;; Hardware stack levels used:    1
 11130 ;; Hardware stack levels required when called:    9
 11131 ;; This function calls:
 11132 ;;		_readEEPROM_ext
 11133 ;;		_writeEEPROM_ext
 11134 ;; This function is called by:
 11135 ;;		_acaoTesteBombas
 11136 ;; This function uses a non-reentrant model
 11137 ;;
 11138                           
 11139                           	psect	text36
 11140  002AA0                     __ptext36:
 11141                           	opt stack 0
 11142  002AA0                     _salvarLOG:
 11143                           	opt stack 0
 11144  002AA0  FFFF               	dw	65535	; assembler added errata NOP
 11145                           
 11146                           ;logs.h: 10: char dtl_ultimo_registro = readEEPROM_ext(14);
 11147                           
 11148                           ; BSR set to: 0
 11149                           ;incstack = 0
 11150  002AA2  0E0E               	movlw	14
 11151  002AA4  EC94  F03C         	call	_readEEPROM_ext
 11152  002AA8  0100               	movlb	0	; () banked
 11153  002AAA  6F8E               	movwf	salvarLOG@dtl_ultimo_registro& (0+255),b
 11154                           
 11155                           ;logs.h: 11: switch (dtl_ultimo_registro) {
 11156  002AAC  D07A               	goto	l360
 11157  002AAE  FFFF               	dw	65535	; assembler added errata NOP
 11158                           
 11159                           ; BSR set to: 0
 11160                           ;logs.h: 13: writeEEPROM_ext(60, _dia);
 11161                           
 11162                           ; BSR set to: 0
 11163  002AB0  C0F7  F08C         	movff	__dia,writeEEPROM_ext@data
 11164  002AB4  0E3C               	movlw	60
 11165  002AB6  ECB1  F03B         	call	_writeEEPROM_ext
 11166                           
 11167                           ;logs.h: 14: writeEEPROM_ext(61, _mes);
 11168  002ABA  C0F6  F08C         	movff	__mes,writeEEPROM_ext@data
 11169  002ABE  0E3D               	movlw	61
 11170  002AC0  ECB1  F03B         	call	_writeEEPROM_ext
 11171                           
 11172                           ;logs.h: 15: writeEEPROM_ext(62, _ano);
 11173  002AC4  C0F5  F08C         	movff	__ano,writeEEPROM_ext@data
 11174  002AC8  0E3E               	movlw	62
 11175  002ACA  ECB1  F03B         	call	_writeEEPROM_ext
 11176                           
 11177                           ;logs.h: 16: writeEEPROM_ext(63, status_jockey);
 11178  002ACE  C0FE  F08C         	movff	_status_jockey,writeEEPROM_ext@data
 11179  002AD2  0E3F               	movlw	63
 11180  002AD4  ECB1  F03B         	call	_writeEEPROM_ext
 11181                           
 11182                           ;logs.h: 17: writeEEPROM_ext(64, status_principal);
 11183  002AD8  C0FD  F08C         	movff	_status_principal,writeEEPROM_ext@data
 11184  002ADC  0E40               	movlw	64
 11185  002ADE  ECB1  F03B         	call	_writeEEPROM_ext
 11186                           
 11187                           ;logs.h: 18: writeEEPROM_ext(65, status_estacionaria);
 11188  002AE2  C0FC  F08C         	movff	_status_estacionaria,writeEEPROM_ext@data
 11189  002AE6  0E41               	movlw	65
 11190  002AE8  ECB1  F03B         	call	_writeEEPROM_ext
 11191                           
 11192                           ;logs.h: 19: writeEEPROM_ext(14, 1);
 11193  002AEC  0E01               	movlw	1
 11194  002AEE  0100               	movlb	0	; () banked
 11195  002AF0  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
 11196  002AF2  0E0E               	movlw	14
 11197  002AF4  ECB1  F03B         	call	_writeEEPROM_ext
 11198                           
 11199                           ;logs.h: 20: break;
 11200  002AF8  D061               	goto	l362
 11201  002AFA  FFFF               	dw	65535	; assembler added errata NOP
 11202                           
 11203                           ;logs.h: 22: writeEEPROM_ext(66, _dia);
 11204  002AFC  C0F7  F08C         	movff	__dia,writeEEPROM_ext@data
 11205  002B00  0E42               	movlw	66
 11206  002B02  ECB1  F03B         	call	_writeEEPROM_ext
 11207                           
 11208                           ;logs.h: 23: writeEEPROM_ext(67, _mes);
 11209  002B06  C0F6  F08C         	movff	__mes,writeEEPROM_ext@data
 11210  002B0A  0E43               	movlw	67
 11211  002B0C  ECB1  F03B         	call	_writeEEPROM_ext
 11212                           
 11213                           ;logs.h: 24: writeEEPROM_ext(68, _ano);
 11214  002B10  C0F5  F08C         	movff	__ano,writeEEPROM_ext@data
 11215  002B14  0E44               	movlw	68
 11216  002B16  ECB1  F03B         	call	_writeEEPROM_ext
 11217                           
 11218                           ;logs.h: 25: writeEEPROM_ext(69, status_jockey);
 11219  002B1A  C0FE  F08C         	movff	_status_jockey,writeEEPROM_ext@data
 11220  002B1E  0E45               	movlw	69
 11221  002B20  ECB1  F03B         	call	_writeEEPROM_ext
 11222                           
 11223                           ;logs.h: 26: writeEEPROM_ext(70, status_principal);
 11224  002B24  C0FD  F08C         	movff	_status_principal,writeEEPROM_ext@data
 11225  002B28  0E46               	movlw	70
 11226  002B2A  ECB1  F03B         	call	_writeEEPROM_ext
 11227                           
 11228                           ;logs.h: 27: writeEEPROM_ext(71, status_estacionaria);
 11229  002B2E  C0FC  F08C         	movff	_status_estacionaria,writeEEPROM_ext@data
 11230  002B32  0E47               	movlw	71
 11231  002B34  ECB1  F03B         	call	_writeEEPROM_ext
 11232                           
 11233                           ;logs.h: 28: writeEEPROM_ext(14, 2);
 11234  002B38  0E02               	movlw	2
 11235  002B3A  0100               	movlb	0	; () banked
 11236  002B3C  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
 11237  002B3E  0E0E               	movlw	14
 11238  002B40  ECB1  F03B         	call	_writeEEPROM_ext
 11239                           
 11240                           ;logs.h: 29: break;
 11241  002B44  D03B               	goto	l362
 11242  002B46  FFFF               	dw	65535	; assembler added errata NOP
 11243                           
 11244                           ;logs.h: 31: writeEEPROM_ext(72, _dia);
 11245  002B48  C0F7  F08C         	movff	__dia,writeEEPROM_ext@data
 11246  002B4C  0E48               	movlw	72
 11247  002B4E  ECB1  F03B         	call	_writeEEPROM_ext
 11248                           
 11249                           ;logs.h: 32: writeEEPROM_ext(73, _mes);
 11250  002B52  C0F6  F08C         	movff	__mes,writeEEPROM_ext@data
 11251  002B56  0E49               	movlw	73
 11252  002B58  ECB1  F03B         	call	_writeEEPROM_ext
 11253                           
 11254                           ;logs.h: 33: writeEEPROM_ext(74, _ano);
 11255  002B5C  C0F5  F08C         	movff	__ano,writeEEPROM_ext@data
 11256  002B60  0E4A               	movlw	74
 11257  002B62  ECB1  F03B         	call	_writeEEPROM_ext
 11258                           
 11259                           ;logs.h: 34: writeEEPROM_ext(75, status_jockey);
 11260  002B66  C0FE  F08C         	movff	_status_jockey,writeEEPROM_ext@data
 11261  002B6A  0E4B               	movlw	75
 11262  002B6C  ECB1  F03B         	call	_writeEEPROM_ext
 11263                           
 11264                           ;logs.h: 35: writeEEPROM_ext(76, status_principal);
 11265  002B70  C0FD  F08C         	movff	_status_principal,writeEEPROM_ext@data
 11266  002B74  0E4C               	movlw	76
 11267  002B76  ECB1  F03B         	call	_writeEEPROM_ext
 11268                           
 11269                           ;logs.h: 36: writeEEPROM_ext(77, status_estacionaria);
 11270  002B7A  C0FC  F08C         	movff	_status_estacionaria,writeEEPROM_ext@data
 11271  002B7E  0E4D               	movlw	77
 11272  002B80  ECB1  F03B         	call	_writeEEPROM_ext
 11273                           
 11274                           ;logs.h: 37: writeEEPROM_ext(14, 0);
 11275  002B84  0E00               	movlw	0
 11276  002B86  0100               	movlb	0	; () banked
 11277  002B88  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
 11278  002B8A  0E0E               	movlw	14
 11279  002B8C  ECB1  F03B         	call	_writeEEPROM_ext
 11280                           
 11281                           ;logs.h: 38: break;
 11282  002B90  D015               	goto	l362
 11283  002B92  FFFF               	dw	65535	; assembler added errata NOP
 11284                           
 11285                           ;logs.h: 40: writeEEPROM_ext(14, 0);
 11286  002B94  0E00               	movlw	0
 11287  002B96  0100               	movlb	0	; () banked
 11288  002B98  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
 11289  002B9A  0E0E               	movlw	14
 11290  002B9C  ECB1  F03B         	call	_writeEEPROM_ext
 11291                           
 11292                           ;logs.h: 43: }
 11293                           
 11294                           ;logs.h: 41: break;
 11295  002BA0  D00D               	goto	l362
 11296  002BA2                     l360:
 11297  002BA2  FFFF               	dw	65535	; assembler added errata NOP
 11298  002BA4  0100               	movlb	0	; () banked
 11299  002BA6  518E               	movf	salvarLOG@dtl_ultimo_registro& (0+255),w,b
 11300                           
 11301                           ; Switch size 1, requested type "space"
 11302                           ; Number of cases is 3, Range of values is 0 to 2
 11303                           ; switch strategies available:
 11304                           ; Name         Instructions Cycles
 11305                           ; simple_byte           10     6 (average)
 11306                           ;	Chosen strategy is simple_byte
 11307  002BA8  0A00               	xorlw	0	; case 0
 11308  002BAA  B4D8               	btfsc	status,2,c
 11309  002BAC  D780               	goto	l361
 11310  002BAE  0A01               	xorlw	1	; case 1
 11311  002BB0  B4D8               	btfsc	status,2,c
 11312  002BB2  D7A3               	goto	l363
 11313  002BB4  0A03               	xorlw	3	; case 2
 11314  002BB6  B4D8               	btfsc	status,2,c
 11315  002BB8  D7C6               	goto	l364
 11316  002BBA  D7EB               	goto	l365
 11317  002BBC                     l362:
 11318  002BBC  FFFF               	dw	65535	; assembler added errata NOP
 11319                           
 11320                           ; BSR set to: 0
 11321  002BBE  0012               	return		;funcret
 11322  002BC0  FFFF               	dw	65535	; errata NOP
 11323  002BC2                     __end_of_salvarLOG:
 11324                           	opt stack 0
 11325                           tblptru	equ	0xFF8
 11326                           tblptrh	equ	0xFF7
 11327                           tblptrl	equ	0xFF6
 11328                           tablat	equ	0xFF5
 11329                           prodh	equ	0xFF4
 11330                           prodl	equ	0xFF3
 11331                           intcon	equ	0xFF2
 11332                           indf0	equ	0xFEF
 11333                           postinc0	equ	0xFEE
 11334                           fsr0h	equ	0xFEA
 11335                           fsr0l	equ	0xFE9
 11336                           wreg	equ	0xFE8
 11337                           postdec1	equ	0xFE5
 11338                           fsr1l	equ	0xFE1
 11339                           indf2	equ	0xFDF
 11340                           postinc2	equ	0xFDE
 11341                           fsr2h	equ	0xFDA
 11342                           fsr2l	equ	0xFD9
 11343                           status	equ	0xFD8
 11344                           
 11345 ;; *************** function _writeEEPROM_ext *****************
 11346 ;; Defined at:
 11347 ;;		line 13 in file "eeprom.h"
 11348 ;; Parameters:    Size  Location     Type
 11349 ;;  adress          1    wreg     unsigned char 
 11350 ;;  data            1   12[BANK0 ] unsigned char 
 11351 ;; Auto vars:     Size  Location     Type
 11352 ;;  adress          1   13[BANK0 ] unsigned char 
 11353 ;; Return value:  Size  Location     Type
 11354 ;;                  1    wreg      void 
 11355 ;; Registers used:
 11356 ;;		wreg, status,2, status,0, cstack
 11357 ;; Tracked objects:
 11358 ;;		On entry : 0/0
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11362 ;;      Params:         0       1       0       0       0       0       0
 11363 ;;      Locals:         0       1       0       0       0       0       0
 11364 ;;      Temps:          0       0       0       0       0       0       0
 11365 ;;      Totals:         0       2       0       0       0       0       0
 11366 ;;Total ram usage:        2 bytes
 11367 ;; Hardware stack levels used:    1
 11368 ;; Hardware stack levels required when called:    8
 11369 ;; This function calls:
 11370 ;;		_I2C_Start
 11371 ;;		_I2C_Stop
 11372 ;;		_I2C_Write
 11373 ;;		_delay
 11374 ;; This function is called by:
 11375 ;;		_salvarLOG
 11376 ;;		_acaoTesteBomasProgramado
 11377 ;;		_acaoTesteBombas
 11378 ;;		_lerParametros
 11379 ;;		_tela_testeBombas
 11380 ;;		_configuraTelefones
 11381 ;;		_configurarEstacionaria
 11382 ;;		_ajusteSP_Bombas
 11383 ;; This function uses a non-reentrant model
 11384 ;;
 11385                           
 11386                           	psect	text37
 11387  007762                     __ptext37:
 11388                           	opt stack 0
 11389  007762                     _writeEEPROM_ext:
 11390                           	opt stack 0
 11391  007762  FFFF               	dw	65535	; assembler added errata NOP
 11392                           
 11393                           ;incstack = 0
 11394                           ;writeEEPROM_ext@adress stored from wreg
 11395  007764  0100               	movlb	0	; () banked
 11396  007766  6F8D               	movwf	writeEEPROM_ext@adress& (0+255),b
 11397                           
 11398                           ;eeprom.h: 15: I2C_Start();
 11399  007768  EC30  F038         	call	_I2C_Start	;wreg free
 11400                           
 11401                           ;eeprom.h: 16: I2C_Write(0xA0);
 11402  00776C  0E00               	movlw	0
 11403  00776E  0100               	movlb	0	; () banked
 11404  007770  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 11405  007772  0EA0               	movlw	160
 11406  007774  6F8A               	movwf	I2C_Write@d& (0+255),b
 11407  007776  EC49  F038         	call	_I2C_Write	;wreg free
 11408                           
 11409                           ;eeprom.h: 18: I2C_Write(adress);
 11410  00777A  C08D  F08A         	movff	writeEEPROM_ext@adress,I2C_Write@d
 11411  00777E  0100               	movlb	0	; () banked
 11412  007780  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 11413  007782  EC49  F038         	call	_I2C_Write	;wreg free
 11414                           
 11415                           ;eeprom.h: 19: I2C_Write(data);
 11416  007786  C08C  F08A         	movff	writeEEPROM_ext@data,I2C_Write@d
 11417  00778A  0100               	movlb	0	; () banked
 11418  00778C  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 11419  00778E  EC49  F038         	call	_I2C_Write	;wreg free
 11420                           
 11421                           ;eeprom.h: 20: I2C_Stop();
 11422  007792  EC36  F038         	call	_I2C_Stop	;wreg free
 11423                           
 11424                           ;eeprom.h: 21: delay(15);
 11425  007796  0E00               	movlw	0
 11426  007798  0100               	movlb	0	; () banked
 11427  00779A  6F81               	movwf	(delay@x+1)& (0+255),b
 11428  00779C  0E0F               	movlw	15
 11429  00779E  6F80               	movwf	delay@x& (0+255),b
 11430  0077A0  ECCD  F039         	call	_delay	;wreg free
 11431  0077A4  0012               	return		;funcret
 11432  0077A6  FFFF               	dw	65535	; errata NOP
 11433  0077A8                     __end_of_writeEEPROM_ext:
 11434                           	opt stack 0
 11435                           tblptru	equ	0xFF8
 11436                           tblptrh	equ	0xFF7
 11437                           tblptrl	equ	0xFF6
 11438                           tablat	equ	0xFF5
 11439                           prodh	equ	0xFF4
 11440                           prodl	equ	0xFF3
 11441                           intcon	equ	0xFF2
 11442                           indf0	equ	0xFEF
 11443                           postinc0	equ	0xFEE
 11444                           fsr0h	equ	0xFEA
 11445                           fsr0l	equ	0xFE9
 11446                           wreg	equ	0xFE8
 11447                           postdec1	equ	0xFE5
 11448                           fsr1l	equ	0xFE1
 11449                           indf2	equ	0xFDF
 11450                           postinc2	equ	0xFDE
 11451                           fsr2h	equ	0xFDA
 11452                           fsr2l	equ	0xFD9
 11453                           status	equ	0xFD8
 11454                           
 11455 ;; *************** function _readEEPROM_ext *****************
 11456 ;; Defined at:
 11457 ;;		line 26 in file "eeprom.h"
 11458 ;; Parameters:    Size  Location     Type
 11459 ;;  adress          1    wreg     unsigned char 
 11460 ;; Auto vars:     Size  Location     Type
 11461 ;;  adress          1   12[BANK0 ] unsigned char 
 11462 ;;  data            1   13[BANK0 ] unsigned char 
 11463 ;; Return value:  Size  Location     Type
 11464 ;;                  1    wreg      unsigned char 
 11465 ;; Registers used:
 11466 ;;		wreg, status,2, status,0, cstack
 11467 ;; Tracked objects:
 11468 ;;		On entry : 0/0
 11469 ;;		On exit  : 0/0
 11470 ;;		Unchanged: 0/0
 11471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11472 ;;      Params:         0       0       0       0       0       0       0
 11473 ;;      Locals:         0       2       0       0       0       0       0
 11474 ;;      Temps:          0       0       0       0       0       0       0
 11475 ;;      Totals:         0       2       0       0       0       0       0
 11476 ;;Total ram usage:        2 bytes
 11477 ;; Hardware stack levels used:    1
 11478 ;; Hardware stack levels required when called:    8
 11479 ;; This function calls:
 11480 ;;		_I2C_Read
 11481 ;;		_I2C_Restart
 11482 ;;		_I2C_Start
 11483 ;;		_I2C_Stop
 11484 ;;		_I2C_Write
 11485 ;; This function is called by:
 11486 ;;		_readEEPROM16_ext
 11487 ;;		_salvarLOG
 11488 ;;		_lerParametros
 11489 ;;		_dataLoger
 11490 ;; This function uses a non-reentrant model
 11491 ;;
 11492                           
 11493                           	psect	text38
 11494  007928                     __ptext38:
 11495                           	opt stack 0
 11496  007928                     _readEEPROM_ext:
 11497                           	opt stack 0
 11498  007928  FFFF               	dw	65535	; assembler added errata NOP
 11499                           
 11500                           ;incstack = 0
 11501                           ;readEEPROM_ext@adress stored from wreg
 11502  00792A  0100               	movlb	0	; () banked
 11503  00792C  6F8C               	movwf	readEEPROM_ext@adress& (0+255),b
 11504                           
 11505                           ;eeprom.h: 27: I2C_Start();
 11506  00792E  EC30  F038         	call	_I2C_Start	;wreg free
 11507                           
 11508                           ;eeprom.h: 28: I2C_Write(0xA0);
 11509  007932  0E00               	movlw	0
 11510  007934  0100               	movlb	0	; () banked
 11511  007936  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 11512  007938  0EA0               	movlw	160
 11513  00793A  6F8A               	movwf	I2C_Write@d& (0+255),b
 11514  00793C  EC49  F038         	call	_I2C_Write	;wreg free
 11515                           
 11516                           ;eeprom.h: 30: I2C_Write(adress);
 11517  007940  C08C  F08A         	movff	readEEPROM_ext@adress,I2C_Write@d
 11518  007944  0100               	movlb	0	; () banked
 11519  007946  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 11520  007948  EC49  F038         	call	_I2C_Write	;wreg free
 11521                           
 11522                           ;eeprom.h: 31: I2C_Restart();
 11523  00794C  EC3C  F038         	call	_I2C_Restart	;wreg free
 11524                           
 11525                           ;eeprom.h: 32: I2C_Write(0xA1);
 11526  007950  0E00               	movlw	0
 11527  007952  0100               	movlb	0	; () banked
 11528  007954  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 11529  007956  0EA1               	movlw	161
 11530  007958  6F8A               	movwf	I2C_Write@d& (0+255),b
 11531  00795A  EC49  F038         	call	_I2C_Write	;wreg free
 11532                           
 11533                           ;eeprom.h: 33: unsigned char data = I2C_Read(0);
 11534  00795E  0E00               	movlw	0
 11535  007960  0100               	movlb	0	; () banked
 11536  007962  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
 11537  007964  0E00               	movlw	0
 11538  007966  6F81               	movwf	I2C_Read@a& (0+255),b
 11539  007968  EC3B  F03A         	call	_I2C_Read	;wreg free
 11540  00796C  0100               	movlb	0	; () banked
 11541  00796E  5181               	movf	?_I2C_Read& (0+255),w,b
 11542  007970  6F8D               	movwf	readEEPROM_ext@data& (0+255),b
 11543                           
 11544                           ;eeprom.h: 34: I2C_Stop();
 11545  007972  EC36  F038         	call	_I2C_Stop	;wreg free
 11546                           
 11547                           ;eeprom.h: 35: return data;
 11548  007976  0100               	movlb	0	; () banked
 11549  007978  518D               	movf	readEEPROM_ext@data& (0+255),w,b
 11550                           
 11551                           ; BSR set to: 0
 11552                           
 11553                           ; BSR set to: 0
 11554  00797A  0012               	return		;funcret
 11555  00797C  FFFF               	dw	65535	; errata NOP
 11556  00797E                     __end_of_readEEPROM_ext:
 11557                           	opt stack 0
 11558                           tblptru	equ	0xFF8
 11559                           tblptrh	equ	0xFF7
 11560                           tblptrl	equ	0xFF6
 11561                           tablat	equ	0xFF5
 11562                           prodh	equ	0xFF4
 11563                           prodl	equ	0xFF3
 11564                           intcon	equ	0xFF2
 11565                           indf0	equ	0xFEF
 11566                           postinc0	equ	0xFEE
 11567                           fsr0h	equ	0xFEA
 11568                           fsr0l	equ	0xFE9
 11569                           wreg	equ	0xFE8
 11570                           postdec1	equ	0xFE5
 11571                           fsr1l	equ	0xFE1
 11572                           indf2	equ	0xFDF
 11573                           postinc2	equ	0xFDE
 11574                           fsr2h	equ	0xFDA
 11575                           fsr2l	equ	0xFD9
 11576                           status	equ	0xFD8
 11577                           
 11578 ;; *************** function _I2C_Restart *****************
 11579 ;; Defined at:
 11580 ;;		line 31 in file "I2C.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;		None
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;		None
 11585 ;; Return value:  Size  Location     Type
 11586 ;;                  1    wreg      void 
 11587 ;; Registers used:
 11588 ;;		wreg, status,2, status,0, cstack
 11589 ;; Tracked objects:
 11590 ;;		On entry : 0/0
 11591 ;;		On exit  : 0/0
 11592 ;;		Unchanged: 0/0
 11593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11594 ;;      Params:         0       0       0       0       0       0       0
 11595 ;;      Locals:         0       0       0       0       0       0       0
 11596 ;;      Temps:          0       0       0       0       0       0       0
 11597 ;;      Totals:         0       0       0       0       0       0       0
 11598 ;;Total ram usage:        0 bytes
 11599 ;; Hardware stack levels used:    1
 11600 ;; Hardware stack levels required when called:    7
 11601 ;; This function calls:
 11602 ;;		_I2C_Wait
 11603 ;; This function is called by:
 11604 ;;		_readEEPROM_ext
 11605 ;;		_getDS1307TimeDate
 11606 ;;		_getDS1307Time
 11607 ;; This function uses a non-reentrant model
 11608 ;;
 11609                           
 11610                           	psect	text39
 11611  007078                     __ptext39:
 11612                           	opt stack 0
 11613  007078                     _I2C_Restart:
 11614                           	opt stack 0
 11615  007078  FFFF               	dw	65535	; assembler added errata NOP
 11616                           
 11617                           ;I2C.c: 32: I2C_Wait();
 11618                           
 11619                           ; BSR set to: 0
 11620                           ;incstack = 0
 11621  00707A  EC79  F038         	call	_I2C_Wait	;wreg free
 11622                           
 11623                           ;I2C.c: 33: RSEN = 1;
 11624  00707E  82C5               	bsf	4037,1,c	;volatile
 11625  007080  0012               	return		;funcret
 11626  007082  FFFF               	dw	65535	; errata NOP
 11627  007084                     __end_of_I2C_Restart:
 11628                           	opt stack 0
 11629                           tblptru	equ	0xFF8
 11630                           tblptrh	equ	0xFF7
 11631                           tblptrl	equ	0xFF6
 11632                           tablat	equ	0xFF5
 11633                           prodh	equ	0xFF4
 11634                           prodl	equ	0xFF3
 11635                           intcon	equ	0xFF2
 11636                           indf0	equ	0xFEF
 11637                           postinc0	equ	0xFEE
 11638                           fsr0h	equ	0xFEA
 11639                           fsr0l	equ	0xFE9
 11640                           wreg	equ	0xFE8
 11641                           postdec1	equ	0xFE5
 11642                           fsr1l	equ	0xFE1
 11643                           indf2	equ	0xFDF
 11644                           postinc2	equ	0xFDE
 11645                           fsr2h	equ	0xFDA
 11646                           fsr2l	equ	0xFD9
 11647                           status	equ	0xFD8
 11648                           
 11649 ;; *************** function _I2C_Read *****************
 11650 ;; Defined at:
 11651 ;;		line 47 in file "I2C.c"
 11652 ;; Parameters:    Size  Location     Type
 11653 ;;  a               2    1[BANK0 ] unsigned short 
 11654 ;; Auto vars:     Size  Location     Type
 11655 ;;  temp            2    3[BANK0 ] unsigned short 
 11656 ;; Return value:  Size  Location     Type
 11657 ;;                  2    1[BANK0 ] unsigned short 
 11658 ;; Registers used:
 11659 ;;		wreg, status,2, status,0, cstack
 11660 ;; Tracked objects:
 11661 ;;		On entry : 0/0
 11662 ;;		On exit  : 0/0
 11663 ;;		Unchanged: 0/0
 11664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11665 ;;      Params:         0       2       0       0       0       0       0
 11666 ;;      Locals:         0       2       0       0       0       0       0
 11667 ;;      Temps:          0       0       0       0       0       0       0
 11668 ;;      Totals:         0       4       0       0       0       0       0
 11669 ;;Total ram usage:        4 bytes
 11670 ;; Hardware stack levels used:    1
 11671 ;; Hardware stack levels required when called:    7
 11672 ;; This function calls:
 11673 ;;		_I2C_Wait
 11674 ;; This function is called by:
 11675 ;;		_readEEPROM_ext
 11676 ;;		_getDS1307TimeDate
 11677 ;;		_getDS1307Time
 11678 ;; This function uses a non-reentrant model
 11679 ;;
 11680                           
 11681                           	psect	text40
 11682  007476                     __ptext40:
 11683                           	opt stack 0
 11684  007476                     _I2C_Read:
 11685                           	opt stack 0
 11686  007476  FFFF               	dw	65535	; assembler added errata NOP
 11687                           
 11688                           ;I2C.c: 48: unsigned short temp;
 11689                           ;I2C.c: 49: I2C_Wait();
 11690                           
 11691                           ;incstack = 0
 11692  007478  EC79  F038         	call	_I2C_Wait	;wreg free
 11693                           
 11694                           ;I2C.c: 50: RCEN = 1;
 11695  00747C  86C5               	bsf	4037,3,c	;volatile
 11696                           
 11697                           ;I2C.c: 51: I2C_Wait();
 11698  00747E  EC79  F038         	call	_I2C_Wait	;wreg free
 11699                           
 11700                           ;I2C.c: 52: temp = SSPBUF;
 11701  007482  CFC9 F083          	movff	4041,I2C_Read@temp	;volatile
 11702  007486  0100               	movlb	0	; () banked
 11703  007488  6B84               	clrf	(I2C_Read@temp+1)& (0+255),b
 11704                           
 11705                           ;I2C.c: 53: I2C_Wait();
 11706  00748A  EC79  F038         	call	_I2C_Wait	;wreg free
 11707                           
 11708                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 11709  00748E  0100               	movlb	0	; () banked
 11710  007490  5181               	movf	I2C_Read@a& (0+255),w,b
 11711  007492  1182               	iorwf	(I2C_Read@a+1)& (0+255),w,b
 11712  007494  A4D8               	btfss	status,2,c
 11713  007496  D002               	goto	u4720
 11714  007498  8AC5               	bsf	4037,5,c	;volatile
 11715  00749A  D002               	goto	u4735
 11716  00749C                     u4720:
 11717  00749C  FFFF               	dw	65535	; assembler added errata NOP
 11718  00749E  9AC5               	bcf	4037,5,c	;volatile
 11719  0074A0                     u4735:
 11720  0074A0  FFFF               	dw	65535	; assembler added errata NOP
 11721                           
 11722                           ;I2C.c: 55: ACKEN = 1;
 11723  0074A2  88C5               	bsf	4037,4,c	;volatile
 11724                           
 11725                           ;I2C.c: 56: return temp;
 11726  0074A4  C083  F081         	movff	I2C_Read@temp,?_I2C_Read
 11727  0074A8  C084  F082         	movff	I2C_Read@temp+1,?_I2C_Read+1
 11728  0074AC  0012               	return		;funcret
 11729  0074AE  FFFF               	dw	65535	; errata NOP
 11730  0074B0                     __end_of_I2C_Read:
 11731                           	opt stack 0
 11732                           tblptru	equ	0xFF8
 11733                           tblptrh	equ	0xFF7
 11734                           tblptrl	equ	0xFF6
 11735                           tablat	equ	0xFF5
 11736                           prodh	equ	0xFF4
 11737                           prodl	equ	0xFF3
 11738                           intcon	equ	0xFF2
 11739                           indf0	equ	0xFEF
 11740                           postinc0	equ	0xFEE
 11741                           fsr0h	equ	0xFEA
 11742                           fsr0l	equ	0xFE9
 11743                           wreg	equ	0xFE8
 11744                           postdec1	equ	0xFE5
 11745                           fsr1l	equ	0xFE1
 11746                           indf2	equ	0xFDF
 11747                           postinc2	equ	0xFDE
 11748                           fsr2h	equ	0xFDA
 11749                           fsr2l	equ	0xFD9
 11750                           status	equ	0xFD8
 11751                           
 11752 ;; *************** function _intToFloatStr *****************
 11753 ;; Defined at:
 11754 ;;		line 48 in file "function.c"
 11755 ;; Parameters:    Size  Location     Type
 11756 ;;  valor           1    wreg     unsigned char 
 11757 ;; Auto vars:     Size  Location     Type
 11758 ;;  valor           1   57[BANK0 ] unsigned char 
 11759 ;;  end             4   64[BANK0 ] unsigned char [4]
 11760 ;;  conv            4   60[BANK0 ] unsigned char [4]
 11761 ;;  pr              2   58[BANK0 ] int 
 11762 ;; Return value:  Size  Location     Type
 11763 ;;                  2   55[BANK0 ] PTR unsigned char 
 11764 ;; Registers used:
 11765 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11766 ;; Tracked objects:
 11767 ;;		On entry : 0/0
 11768 ;;		On exit  : 0/0
 11769 ;;		Unchanged: 0/0
 11770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11771 ;;      Params:         0       2       0       0       0       0       0
 11772 ;;      Locals:         0      11       0       0       0       0       0
 11773 ;;      Temps:          0       0       0       0       0       0       0
 11774 ;;      Totals:         0      13       0       0       0       0       0
 11775 ;;Total ram usage:       13 bytes
 11776 ;; Hardware stack levels used:    1
 11777 ;; Hardware stack levels required when called:    9
 11778 ;; This function calls:
 11779 ;;		___awdiv
 11780 ;;		___awmod
 11781 ;;		_sprintf
 11782 ;; This function is called by:
 11783 ;;		_acaoTesteBombas
 11784 ;;		_ajusteSP_Bombas
 11785 ;; This function uses a non-reentrant model
 11786 ;;
 11787                           
 11788                           	psect	text41
 11789  003E1A                     __ptext41:
 11790                           	opt stack 0
 11791  003E1A                     _intToFloatStr:
 11792                           	opt stack 0
 11793  003E1A  FFFF               	dw	65535	; assembler added errata NOP
 11794                           
 11795                           ;incstack = 0
 11796                           ;intToFloatStr@valor stored from wreg
 11797  003E1C  0100               	movlb	0	; () banked
 11798  003E1E  6FB9               	movwf	intToFloatStr@valor& (0+255),b
 11799                           
 11800                           ;function.c: 49: int pr = valor;
 11801  003E20  C0B9  F0BA         	movff	intToFloatStr@valor,intToFloatStr@pr
 11802  003E24  0100               	movlb	0	; () banked
 11803  003E26  6BBB               	clrf	(intToFloatStr@pr+1)& (0+255),b
 11804                           
 11805                           ; BSR set to: 0
 11806                           ;function.c: 50: unsigned char conv[4] = {' ', ' ', ' ', ' '};
 11807  003E28  C06D  F0BC         	movff	intToFloatStr@F2544,intToFloatStr@conv
 11808  003E2C  C06E  F0BD         	movff	intToFloatStr@F2544+1,intToFloatStr@conv+1
 11809  003E30  C06F  F0BE         	movff	intToFloatStr@F2544+2,intToFloatStr@conv+2
 11810  003E34  C070  F0BF         	movff	intToFloatStr@F2544+3,intToFloatStr@conv+3
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;function.c: 51: conv[0] = (char) ((pr / 10) + 48);
 11814  003E38  C0BA  F080         	movff	intToFloatStr@pr,___awdiv@dividend
 11815  003E3C  C0BB  F081         	movff	intToFloatStr@pr+1,___awdiv@dividend+1
 11816  003E40  0E00               	movlw	0
 11817  003E42  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
 11818  003E44  0E0A               	movlw	10
 11819  003E46  6F82               	movwf	___awdiv@divisor& (0+255),b
 11820  003E48  ECA4  F01D         	call	___awdiv	;wreg free
 11821  003E4C  0100               	movlb	0	; () banked
 11822  003E4E  5180               	movf	?___awdiv& (0+255),w,b
 11823  003E50  0F30               	addlw	48
 11824  003E52  6FBC               	movwf	intToFloatStr@conv& (0+255),b
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;function.c: 52: conv[1] = (char) '.';
 11828  003E54  0E2E               	movlw	46
 11829  003E56  6FBD               	movwf	(intToFloatStr@conv+1)& (0+255),b
 11830                           
 11831                           ; BSR set to: 0
 11832                           ;function.c: 53: conv[2] = (char) ((pr % 10) + 48);
 11833  003E58  C0BA  F080         	movff	intToFloatStr@pr,___awmod@dividend
 11834  003E5C  C0BB  F081         	movff	intToFloatStr@pr+1,___awmod@dividend+1
 11835  003E60  0E00               	movlw	0
 11836  003E62  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 11837  003E64  0E0A               	movlw	10
 11838  003E66  6F82               	movwf	___awmod@divisor& (0+255),b
 11839  003E68  ECCA  F01E         	call	___awmod	;wreg free
 11840  003E6C  0100               	movlb	0	; () banked
 11841  003E6E  5180               	movf	?___awmod& (0+255),w,b
 11842  003E70  0F30               	addlw	48
 11843  003E72  6FBE               	movwf	(intToFloatStr@conv+2)& (0+255),b
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;function.c: 54: conv[3] = '\0';
 11847  003E74  0E00               	movlw	0
 11848  003E76  6FBF               	movwf	(intToFloatStr@conv+3)& (0+255),b
 11849                           
 11850                           ; BSR set to: 0
 11851                           ;function.c: 55: char end[4];
 11852                           ;function.c: 56: sprintf(end,conv);
 11853  003E78  0EC0               	movlw	low intToFloatStr@end
 11854  003E7A  6FA1               	movwf	sprintf@wh& (0+255),b
 11855  003E7C  0E00               	movlw	high intToFloatStr@end
 11856  003E7E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11857  003E80  0EBC               	movlw	low intToFloatStr@conv
 11858  003E82  6FA3               	movwf	sprintf@f& (0+255),b
 11859  003E84  0E00               	movlw	high intToFloatStr@conv
 11860  003E86  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11861  003E88  ECD4  F03B         	call	_sprintf	;wreg free
 11862                           
 11863                           ;function.c: 57: return end;
 11864  003E8C  0EC0               	movlw	low intToFloatStr@end
 11865  003E8E  0100               	movlb	0	; () banked
 11866  003E90  6FB7               	movwf	?_intToFloatStr& (0+255),b
 11867  003E92  0E00               	movlw	high intToFloatStr@end
 11868  003E94  6FB8               	movwf	(?_intToFloatStr+1)& (0+255),b
 11869                           
 11870                           ; BSR set to: 0
 11871                           
 11872                           ; BSR set to: 0
 11873  003E96  0012               	return		;funcret
 11874  003E98  FFFF               	dw	65535	; errata NOP
 11875  003E9A                     __end_of_intToFloatStr:
 11876                           	opt stack 0
 11877                           tblptru	equ	0xFF8
 11878                           tblptrh	equ	0xFF7
 11879                           tblptrl	equ	0xFF6
 11880                           tablat	equ	0xFF5
 11881                           prodh	equ	0xFF4
 11882                           prodl	equ	0xFF3
 11883                           intcon	equ	0xFF2
 11884                           indf0	equ	0xFEF
 11885                           postinc0	equ	0xFEE
 11886                           fsr0h	equ	0xFEA
 11887                           fsr0l	equ	0xFE9
 11888                           wreg	equ	0xFE8
 11889                           postdec1	equ	0xFE5
 11890                           fsr1l	equ	0xFE1
 11891                           indf2	equ	0xFDF
 11892                           postinc2	equ	0xFDE
 11893                           fsr2h	equ	0xFDA
 11894                           fsr2l	equ	0xFD9
 11895                           status	equ	0xFD8
 11896                           
 11897 ;; *************** function _sprintf *****************
 11898 ;; Defined at:
 11899 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
 11900 ;; Parameters:    Size  Location     Type
 11901 ;;  wh              2   33[BANK0 ] PTR unsigned char 
 11902 ;;		 -> intToFloatStr@end(4), line4(21), line3(21), line2(21), 
 11903 ;;		 -> line1(21), bufferAUX(20), bufferSerial(80), 
 11904 ;;  f               2   35[BANK0 ] PTR const unsigned char 
 11905 ;;		 -> intToFloatStr@conv(4), STR_96(15), STR_95(12), STR_94(10), 
 11906 ;;		 -> STR_93(13), STR_92(14), STR_91(17), STR_90(15), 
 11907 ;;		 -> STR_89(13), STR_88(10), STR_84(11), STR_83(15), 
 11908 ;;		 -> STR_82(15), STR_81(11), STR_80(11), STR_79(19), 
 11909 ;;		 -> STR_78(5), STR_77(12), STR_76(5), STR_75(14), 
 11910 ;;		 -> STR_74(19), STR_71(8), STR_68(3), STR_67(7), 
 11911 ;;		 -> STR_66(7), STR_64(12), STR_63(17), STR_62(19), 
 11912 ;;		 -> STR_59(16), STR_56(16), STR_53(12), STR_52(25), 
 11913 ;;		 -> STR_51(20), STR_50(20), STR_49(21), STR_48(15), 
 11914 ;;		 -> STR_47(6), STR_46(15), STR_45(6), STR_44(31), 
 11915 ;;		 -> STR_43(20), STR_42(19), STR_41(16), STR_40(14), 
 11916 ;;		 -> STR_39(17), STR_38(16), STR_37(15), STR_36(17), 
 11917 ;;		 -> STR_35(16), STR_34(19), STR_33(20), STR_30(16), 
 11918 ;;		 -> STR_27(16), STR_24(12), STR_23(19), STR_22(16), 
 11919 ;;		 -> STR_21(20), STR_3(5), STR_2(5), STR_1(5), 
 11920 ;; Auto vars:     Size  Location     Type
 11921 ;;  pb              4   51[BANK0 ] struct __prbuf
 11922 ;;  ap              2   49[BANK0 ] PTR void [1]
 11923 ;;		 -> ?i2_sprintf(2), ?_sprintf(2), ?_printf(2), 
 11924 ;; Return value:  Size  Location     Type
 11925 ;;                  2   33[BANK0 ] int 
 11926 ;; Registers used:
 11927 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/0
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11933 ;;      Params:         0      16       0       0       0       0       0
 11934 ;;      Locals:         0       6       0       0       0       0       0
 11935 ;;      Temps:          0       0       0       0       0       0       0
 11936 ;;      Totals:         0      22       0       0       0       0       0
 11937 ;;Total ram usage:       22 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; Hardware stack levels required when called:    8
 11940 ;; This function calls:
 11941 ;;		__doprnt
 11942 ;; This function is called by:
 11943 ;;		_getSerial
 11944 ;;		_acaoTesteBombas
 11945 ;;		_tela_ajusteRTC
 11946 ;;		_tela_testeBombas
 11947 ;;		_dataLoger
 11948 ;;		_informacoes
 11949 ;;		_configuraTelefones
 11950 ;;		_configurarEstacionaria
 11951 ;;		_ajusteSP_Bombas
 11952 ;;		_telaTeste
 11953 ;;		_main
 11954 ;;		_intToFloatStr
 11955 ;;		_telaPrincipal
 11956 ;; This function uses a non-reentrant model
 11957 ;;
 11958                           
 11959                           	psect	text42
 11960  0077A8                     __ptext42:
 11961                           	opt stack 0
 11962  0077A8                     _sprintf:
 11963                           	opt stack 0
 11964  0077A8  FFFF               	dw	65535	; assembler added errata NOP
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;incstack = 0
 11968  0077AA  C0A1  F0B3         	movff	sprintf@wh,sprintf@pb
 11969  0077AE  C0A2  F0B4         	movff	sprintf@wh+1,sprintf@pb+1
 11970  0077B2  0E00               	movlw	0
 11971  0077B4  0100               	movlb	0	; () banked
 11972  0077B6  6FB5               	movwf	(sprintf@pb+2)& (0+255),b
 11973  0077B8  0E00               	movlw	0
 11974  0077BA  6FB6               	movwf	(sprintf@pb+3)& (0+255),b
 11975  0077BC  0EA5               	movlw	low (?_sprintf+4)
 11976  0077BE  6FB1               	movwf	sprintf@ap& (0+255),b
 11977  0077C0  0E00               	movlw	high (?_sprintf+4)
 11978  0077C2  6FB2               	movwf	(sprintf@ap+1)& (0+255),b
 11979                           
 11980                           ; BSR set to: 0
 11981  0077C4  0EB3               	movlw	low sprintf@pb
 11982  0077C6  6F8C               	movwf	__doprnt@pb& (0+255),b
 11983  0077C8  0E00               	movlw	high sprintf@pb
 11984  0077CA  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 11985  0077CC  C0A3  F08E         	movff	sprintf@f,__doprnt@f
 11986  0077D0  C0A4  F08F         	movff	sprintf@f+1,__doprnt@f+1
 11987  0077D4  0EB1               	movlw	low sprintf@ap
 11988  0077D6  6F90               	movwf	__doprnt@ap& (0+255),b
 11989  0077D8  0E00               	movlw	high sprintf@ap
 11990  0077DA  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 11991  0077DC  EC78  F000         	call	__doprnt	;wreg free
 11992  0077E0  C0B3  FFD9         	movff	sprintf@pb,fsr2l
 11993  0077E4  C0B4  FFDA         	movff	sprintf@pb+1,fsr2h
 11994  0077E8  0E00               	movlw	0
 11995  0077EA  6EDF               	movwf	indf2,c
 11996                           
 11997                           ;	Return value of _sprintf is never used
 11998  0077EC  0012               	return		;funcret
 11999  0077EE  FFFF               	dw	65535	; errata NOP
 12000  0077F0                     __end_of_sprintf:
 12001                           	opt stack 0
 12002                           tblptru	equ	0xFF8
 12003                           tblptrh	equ	0xFF7
 12004                           tblptrl	equ	0xFF6
 12005                           tablat	equ	0xFF5
 12006                           prodh	equ	0xFF4
 12007                           prodl	equ	0xFF3
 12008                           intcon	equ	0xFF2
 12009                           indf0	equ	0xFEF
 12010                           postinc0	equ	0xFEE
 12011                           fsr0h	equ	0xFEA
 12012                           fsr0l	equ	0xFE9
 12013                           wreg	equ	0xFE8
 12014                           postdec1	equ	0xFE5
 12015                           fsr1l	equ	0xFE1
 12016                           indf2	equ	0xFDF
 12017                           postinc2	equ	0xFDE
 12018                           fsr2h	equ	0xFDA
 12019                           fsr2l	equ	0xFD9
 12020                           status	equ	0xFD8
 12021                           
 12022 ;; *************** function __doprnt *****************
 12023 ;; Defined at:
 12024 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 12025 ;; Parameters:    Size  Location     Type
 12026 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
 12027 ;;		 -> sprintf@pb(4), printf@pb(4), 
 12028 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 12029 ;;		 -> intToFloatStr@conv(4), STR_96(15), STR_95(12), STR_94(10), 
 12030 ;;		 -> STR_93(13), STR_92(14), STR_91(17), STR_90(15), 
 12031 ;;		 -> STR_89(13), STR_88(10), STR_85(9), STR_84(11), 
 12032 ;;		 -> STR_83(15), STR_82(15), STR_81(11), STR_80(11), 
 12033 ;;		 -> STR_79(19), STR_78(5), STR_77(12), STR_76(5), 
 12034 ;;		 -> STR_75(14), STR_74(19), STR_71(8), STR_68(3), 
 12035 ;;		 -> STR_67(7), STR_66(7), STR_64(12), STR_63(17), 
 12036 ;;		 -> STR_62(19), STR_59(16), STR_56(16), STR_53(12), 
 12037 ;;		 -> STR_52(25), STR_51(20), STR_50(20), STR_49(21), 
 12038 ;;		 -> STR_48(15), STR_47(6), STR_46(15), STR_45(6), 
 12039 ;;		 -> STR_44(31), STR_43(20), STR_42(19), STR_41(16), 
 12040 ;;		 -> STR_40(14), STR_39(17), STR_38(16), STR_37(15), 
 12041 ;;		 -> STR_36(17), STR_35(16), STR_34(19), STR_33(20), 
 12042 ;;		 -> STR_30(16), STR_27(16), STR_24(12), STR_23(19), 
 12043 ;;		 -> STR_22(16), STR_21(20), STR_20(7), STR_19(11), 
 12044 ;;		 -> STR_12(104), STR_11(63), STR_9(18), STR_7(12), 
 12045 ;;		 -> STR_6(7), STR_4(5), STR_3(5), STR_2(5), 
 12046 ;;		 -> STR_1(5), 
 12047 ;;  ap              2   16[BANK0 ] PTR PTR void 
 12048 ;;		 -> sprintf@ap(2), printf@ap(2), 
 12049 ;; Auto vars:     Size  Location     Type
 12050 ;;  tmpval          4    0        struct .
 12051 ;;  width           2   30[BANK0 ] int 
 12052 ;;  cp              2   28[BANK0 ] PTR const unsigned char 
 12053 ;;		 -> ?_sprintf(2), ?_printf(2), STR_97(7), _doprnt@c(1), 
 12054 ;;		 -> intToFloatStr@end(4), STR_73(5), STR_72(5), STR_70(17), 
 12055 ;;		 -> STR_69(17), STR_65(12), STR_61(5), STR_60(3), 
 12056 ;;		 -> STR_58(5), STR_57(3), STR_55(5), STR_54(3), 
 12057 ;;		 -> STR_32(5), STR_31(3), line4(21), STR_29(5), 
 12058 ;;		 -> STR_28(3), line3(21), STR_26(5), STR_25(3), 
 12059 ;;		 -> line2(21), line1(21), STR_18(6), STR_17(3), 
 12060 ;;		 -> STR_16(6), STR_15(3), STR_14(6), STR_13(3), 
 12061 ;;		 -> tel2(12), tel1(12), bufferAUX(20), NULL(0), 
 12062 ;;		 -> bufferSerial(80), 
 12063 ;;  len             2   25[BANK0 ] unsigned int 
 12064 ;;  val             2   23[BANK0 ] unsigned int 
 12065 ;;  c               1   32[BANK0 ] char 
 12066 ;;  flag            1   27[BANK0 ] unsigned char 
 12067 ;;  prec            1   22[BANK0 ] char 
 12068 ;; Return value:  Size  Location     Type
 12069 ;;                  2   12[BANK0 ] int 
 12070 ;; Registers used:
 12071 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12072 ;; Tracked objects:
 12073 ;;		On entry : 0/0
 12074 ;;		On exit  : 0/0
 12075 ;;		Unchanged: 0/0
 12076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12077 ;;      Params:         0       6       0       0       0       0       0
 12078 ;;      Locals:         0      11       0       0       0       0       0
 12079 ;;      Temps:          0       4       0       0       0       0       0
 12080 ;;      Totals:         0      21       0       0       0       0       0
 12081 ;;Total ram usage:       21 bytes
 12082 ;; Hardware stack levels used:    1
 12083 ;; Hardware stack levels required when called:    7
 12084 ;; This function calls:
 12085 ;;		Absolute function
 12086 ;;		___lwdiv
 12087 ;;		___lwmod
 12088 ;;		___wmul
 12089 ;;		_isdigit
 12090 ;;		_putch
 12091 ;; This function is called by:
 12092 ;;		_printf
 12093 ;;		_sprintf
 12094 ;; This function uses a non-reentrant model
 12095 ;;
 12096                           
 12097                           	psect	text43
 12098  0000F0                     __ptext43:
 12099                           	opt stack 0
 12100  0000F0                     __doprnt:
 12101                           	opt stack 0
 12102  0000F0  FFFF               	dw	65535	; assembler added errata NOP
 12103                           
 12104                           ;doprnt.c: 499: signed char c;
 12105                           ;doprnt.c: 501: int width;
 12106                           ;doprnt.c: 506: signed char prec;
 12107                           ;doprnt.c: 508: unsigned char flag;
 12108                           ;doprnt.c: 523: union {
 12109                           ;doprnt.c: 524: unsigned long vd;
 12110                           ;doprnt.c: 525: double integ;
 12111                           ;doprnt.c: 526: } tmpval;
 12112                           ;doprnt.c: 528: unsigned int val;
 12113                           ;doprnt.c: 529: unsigned len;
 12114                           ;doprnt.c: 530: const char * cp;
 12115                           ;doprnt.c: 536: while(c = *f++) {
 12116                           
 12117                           ;incstack = 0
 12118  0000F2  D3D7               	goto	u17120
 12119  0000F4  FFFF               	dw	65535	; assembler added errata NOP
 12120                           
 12121                           ;doprnt.c: 538: if(c != '%')
 12122  0000F6  0E25               	movlw	37
 12123  0000F8  0100               	movlb	0	; () banked
 12124  0000FA  19A0               	xorwf	__doprnt@c& (0+255),w,b
 12125  0000FC  B4D8               	btfsc	status,2,c
 12126  0000FE  D037               	goto	l954
 12127                           
 12128                           ; BSR set to: 0
 12129                           ;doprnt.c: 540: {
 12130                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 12131  000100  EE20 F002          	lfsr	2,2
 12132  000104  518C               	movf	__doprnt@pb& (0+255),w,b
 12133  000106  26D9               	addwf	fsr2l,f,c
 12134  000108  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 12135  00010A  22DA               	addwfc	fsr2h,f,c
 12136  00010C  50DE               	movf	postinc2,w,c
 12137  00010E  10DE               	iorwf	postinc2,w,c
 12138  000110  B4D8               	btfsc	status,2,c
 12139  000112  D016               	goto	l955
 12140                           
 12141                           ; BSR set to: 0
 12142  000114  EE20 F002          	lfsr	2,2
 12143  000118  518C               	movf	__doprnt@pb& (0+255),w,b
 12144  00011A  26D9               	addwf	fsr2l,f,c
 12145  00011C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 12146  00011E  22DA               	addwfc	fsr2h,f,c
 12147  000120  D801               	call	u16688
 12148  000122  D3BF               	goto	u17120
 12149  000124                     u16688:
 12150  000124  FFFF               	dw	65535	; assembler added errata NOP
 12151  000126  0005               	push	
 12152  000128  6EFA               	movwf	pclath,c
 12153  00012A  50DE               	movf	postinc2,w,c
 12154  00012C  6EFD               	movwf	tosl,c
 12155  00012E  50DE               	movf	postinc2,w,c
 12156  000130  6EFE               	movwf	tosh,c
 12157  000132  50F8               	movf	tblptru,w,c
 12158  000134  6EFF               	movwf	tosu,c
 12159  000136  50FA               	movf	pclath,w,c
 12160  000138  51A0               	movf	__doprnt@c& (0+255),w,b
 12161  00013A  0012               	return		;indir
 12162  00013C  FFFF               	dw	65535	; errata NOP
 12163  00013E  D3B1               	goto	u17120
 12164  000140                     l955:
 12165  000140  FFFF               	dw	65535	; assembler added errata NOP
 12166  000142  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 12167  000146  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 12168  00014A  CFDE F092          	movff	postinc2,??__doprnt
 12169  00014E  CFDD F093          	movff	postdec2,??__doprnt+1
 12170  000152  C092  FFD9         	movff	??__doprnt,fsr2l
 12171  000156  C093  FFDA         	movff	??__doprnt+1,fsr2h
 12172  00015A  C0A0  FFDF         	movff	__doprnt@c,indf2
 12173  00015E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 12174  000162  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 12175  000166  2ADE               	incf	postinc2,f,c
 12176  000168  0E00               	movlw	0
 12177  00016A  22DD               	addwfc	postdec2,f,c
 12178                           
 12179                           ;doprnt.c: 542: continue;
 12180  00016C  D39A               	goto	u17120
 12181  00016E                     l954:
 12182  00016E  FFFF               	dw	65535	; assembler added errata NOP
 12183                           
 12184                           ;doprnt.c: 543: }
 12185                           ;doprnt.c: 546: width = 0;
 12186  000170  0E00               	movlw	0
 12187  000172  0100               	movlb	0	; () banked
 12188  000174  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 12189  000176  0E00               	movlw	0
 12190  000178  6F9E               	movwf	__doprnt@width& (0+255),b
 12191                           
 12192                           ;doprnt.c: 548: flag = 0;
 12193  00017A  0E00               	movlw	0
 12194  00017C  6F9B               	movwf	__doprnt@flag& (0+255),b
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;doprnt.c: 551: switch(*f) {
 12198                           
 12199                           ;doprnt.c: 550: for(;;) {
 12200  00017E  D005               	goto	l958
 12201  000180  FFFF               	dw	65535	; assembler added errata NOP
 12202                           
 12203                           ;doprnt.c: 580: flag |= 0x04;
 12204                           
 12205                           ; BSR set to: 0
 12206  000182  0100               	movlb	0	; () banked
 12207  000184  859B               	bsf	__doprnt@flag& (0+255),2,b
 12208                           
 12209                           ;doprnt.c: 581: f++;
 12210  000186  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 12211  000188  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 12212  00018A                     l958:
 12213  00018A  FFFF               	dw	65535	; assembler added errata NOP
 12214                           
 12215                           ; BSR set to: 0
 12216  00018C  C08E  FFF6         	movff	__doprnt@f,tblptrl
 12217  000190  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 12218  000194  6AF8               	clrf	tblptru,c
 12219  000196  0E05               	movlw	(high __ramtop+-1)
 12220  000198  64F7               	cpfsgt	tblptrh,c
 12221  00019A  D004               	bra	u16697
 12222  00019C  0008               	tblrd		*
 12223  00019E  FFFF               	dw	65535	; errata NOP
 12224  0001A0  50F5               	movf	tablat,w,c
 12225  0001A2  D005               	bra	u16690
 12226  0001A4                     u16697:
 12227  0001A4  CFF6 FFE9          	movff	tblptrl,fsr0l
 12228  0001A8  CFF7 FFEA          	movff	tblptrh,fsr0h
 12229  0001AC  50EF               	movf	indf0,w,c
 12230  0001AE                     u16690:
 12231                           
 12232                           ; Switch size 1, requested type "space"
 12233                           ; Number of cases is 1, Range of values is 48 to 48
 12234                           ; switch strategies available:
 12235                           ; Name         Instructions Cycles
 12236                           ; simple_byte            4     3 (average)
 12237                           ;	Chosen strategy is simple_byte
 12238  0001AE  0A30               	xorlw	48	; case 48
 12239  0001B0  B4D8               	btfsc	status,2,c
 12240  0001B2  D7E6               	goto	l959
 12241                           
 12242                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12243                           
 12244                           ;doprnt.c: 586: }
 12245                           
 12246                           ;doprnt.c: 585: break;
 12247  0001B4  C08E  FFF6         	movff	__doprnt@f,tblptrl
 12248  0001B8  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 12249  0001BC  6AF8               	clrf	tblptru,c
 12250  0001BE  0E05               	movlw	(high __ramtop+-1)
 12251  0001C0  64F7               	cpfsgt	tblptrh,c
 12252  0001C2  D004               	bra	u16707
 12253  0001C4  0008               	tblrd		*
 12254  0001C6  FFFF               	dw	65535	; errata NOP
 12255  0001C8  50F5               	movf	tablat,w,c
 12256  0001CA  D005               	bra	u16700
 12257  0001CC                     u16707:
 12258  0001CC  CFF6 FFE9          	movff	tblptrl,fsr0l
 12259  0001D0  CFF7 FFEA          	movff	tblptrh,fsr0h
 12260  0001D4  50EF               	movf	indf0,w,c
 12261  0001D6                     u16700:
 12262  0001D6  ECFE  F038         	call	_isdigit
 12263  0001DA  A0D8               	btfss	status,0,c
 12264  0001DC  D16B               	goto	l966
 12265                           
 12266                           ;doprnt.c: 598: width = 0;
 12267  0001DE  0E00               	movlw	0
 12268  0001E0  0100               	movlb	0	; () banked
 12269  0001E2  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 12270  0001E4  0E00               	movlw	0
 12271  0001E6  6F9E               	movwf	__doprnt@width& (0+255),b
 12272  0001E8  FFFF               	dw	65535	; assembler added errata NOP
 12273                           
 12274                           ;doprnt.c: 600: width *= 10;
 12275                           
 12276                           ; BSR set to: 0
 12277  0001EA  C09E  F080         	movff	__doprnt@width,___wmul@multiplier
 12278  0001EE  C09F  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
 12279  0001F2  0E00               	movlw	0
 12280  0001F4  0100               	movlb	0	; () banked
 12281  0001F6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12282  0001F8  0E0A               	movlw	10
 12283  0001FA  6F82               	movwf	___wmul@multiplicand& (0+255),b
 12284  0001FC  EC52  F039         	call	___wmul	;wreg free
 12285  000200  C080  F09E         	movff	?___wmul,__doprnt@width
 12286  000204  C081  F09F         	movff	?___wmul+1,__doprnt@width+1
 12287                           
 12288                           ;doprnt.c: 601: width += *f++ - '0';
 12289  000208  0ED0               	movlw	208
 12290  00020A  0100               	movlb	0	; () banked
 12291  00020C  6F92               	movwf	??__doprnt& (0+255),b
 12292  00020E  0EFF               	movlw	255
 12293  000210  6F93               	movwf	(??__doprnt+1)& (0+255),b
 12294  000212  C08E  FFF6         	movff	__doprnt@f,tblptrl
 12295  000216  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 12296  00021A  6AF8               	clrf	tblptru,c
 12297  00021C  0E05               	movlw	(high __ramtop+-1)
 12298  00021E  64F7               	cpfsgt	tblptrh,c
 12299  000220  D004               	bra	u16727
 12300  000222  0008               	tblrd		*
 12301  000224  FFFF               	dw	65535	; errata NOP
 12302  000226  50F5               	movf	tablat,w,c
 12303  000228  D005               	bra	u16720
 12304  00022A                     u16727:
 12305  00022A  CFF6 FFE9          	movff	tblptrl,fsr0l
 12306  00022E  CFF7 FFEA          	movff	tblptrh,fsr0h
 12307  000232  50EF               	movf	indf0,w,c
 12308  000234                     u16720:
 12309  000234  0100               	movlb	0	; () banked
 12310  000236  6F94               	movwf	(??__doprnt+2)& (0+255),b
 12311  000238  6B95               	clrf	(??__doprnt+3)& (0+255),b
 12312  00023A  5192               	movf	??__doprnt& (0+255),w,b
 12313  00023C  2794               	addwf	(??__doprnt+2)& (0+255),f,b
 12314  00023E  5193               	movf	(??__doprnt+1)& (0+255),w,b
 12315  000240  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
 12316  000242  5194               	movf	(??__doprnt+2)& (0+255),w,b
 12317  000244  279E               	addwf	__doprnt@width& (0+255),f,b
 12318  000246  5195               	movf	(??__doprnt+3)& (0+255),w,b
 12319  000248  239F               	addwfc	(__doprnt@width+1)& (0+255),f,b
 12320                           
 12321                           ; BSR set to: 0
 12322  00024A  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 12323  00024C  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 12324                           
 12325                           ; BSR set to: 0
 12326                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12327  00024E  C08E  FFF6         	movff	__doprnt@f,tblptrl
 12328  000252  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 12329  000256  6AF8               	clrf	tblptru,c
 12330  000258  0E05               	movlw	(high __ramtop+-1)
 12331  00025A  64F7               	cpfsgt	tblptrh,c
 12332  00025C  D004               	bra	u16737
 12333  00025E  0008               	tblrd		*
 12334  000260  FFFF               	dw	65535	; errata NOP
 12335  000262  50F5               	movf	tablat,w,c
 12336  000264  D005               	bra	u16730
 12337  000266                     u16737:
 12338  000266  CFF6 FFE9          	movff	tblptrl,fsr0l
 12339  00026A  CFF7 FFEA          	movff	tblptrh,fsr0h
 12340  00026E  50EF               	movf	indf0,w,c
 12341  000270                     u16730:
 12342  000270  ECFE  F038         	call	_isdigit
 12343  000274  A0D8               	btfss	status,0,c
 12344  000276  D11E               	goto	l966
 12345  000278  D7B7               	goto	l964
 12346  00027A  FFFF               	dw	65535	; assembler added errata NOP
 12347                           
 12348                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12349  00027C  C090  FFD9         	movff	__doprnt@ap,fsr2l
 12350  000280  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 12351  000284  CFDF F092          	movff	indf2,??__doprnt
 12352  000288  0E02               	movlw	2
 12353  00028A  26DE               	addwf	postinc2,f,c
 12354  00028C  CFDF F093          	movff	indf2,??__doprnt+1
 12355  000290  0E00               	movlw	0
 12356  000292  22DD               	addwfc	postdec2,f,c
 12357  000294  C092  FFD9         	movff	??__doprnt,fsr2l
 12358  000298  C093  FFDA         	movff	??__doprnt+1,fsr2h
 12359  00029C  CFDE F09C          	movff	postinc2,__doprnt@cp
 12360  0002A0  CFDD F09D          	movff	postdec2,__doprnt@cp+1
 12361                           
 12362                           ;doprnt.c: 740: if(!cp)
 12363  0002A4  0100               	movlb	0	; () banked
 12364  0002A6  519C               	movf	__doprnt@cp& (0+255),w,b
 12365  0002A8  119D               	iorwf	(__doprnt@cp+1)& (0+255),w,b
 12366  0002AA  A4D8               	btfss	status,2,c
 12367  0002AC  D004               	goto	l973
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;doprnt.c: 741: cp = "(null)";
 12371  0002AE  0EAF               	movlw	low STR_97
 12372  0002B0  6F9C               	movwf	__doprnt@cp& (0+255),b
 12373  0002B2  0E7F               	movlw	high STR_97
 12374  0002B4  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 12375  0002B6                     l973:
 12376  0002B6  FFFF               	dw	65535	; assembler added errata NOP
 12377                           
 12378                           ; BSR set to: 0
 12379                           ;doprnt.c: 745: len = 0;
 12380                           
 12381                           ; BSR set to: 0
 12382  0002B8  0E00               	movlw	0
 12383  0002BA  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 12384  0002BC  0E00               	movlw	0
 12385  0002BE  6F99               	movwf	__doprnt@len& (0+255),b
 12386                           
 12387                           ;doprnt.c: 746: while(cp[len])
 12388  0002C0  D004               	goto	l974
 12389  0002C2  FFFF               	dw	65535	; assembler added errata NOP
 12390                           
 12391                           ;doprnt.c: 747: len++;
 12392                           
 12393                           ; BSR set to: 0
 12394  0002C4  0100               	movlb	0	; () banked
 12395  0002C6  4B99               	infsnz	__doprnt@len& (0+255),f,b
 12396  0002C8  2B9A               	incf	(__doprnt@len+1)& (0+255),f,b
 12397  0002CA                     l974:
 12398  0002CA  FFFF               	dw	65535	; assembler added errata NOP
 12399                           
 12400                           ; BSR set to: 0
 12401                           
 12402                           ; BSR set to: 0
 12403  0002CC  5199               	movf	__doprnt@len& (0+255),w,b
 12404  0002CE  259C               	addwf	__doprnt@cp& (0+255),w,b
 12405  0002D0  6F92               	movwf	??__doprnt& (0+255),b
 12406  0002D2  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 12407  0002D4  219D               	addwfc	(__doprnt@cp+1)& (0+255),w,b
 12408  0002D6  6F93               	movwf	(??__doprnt+1)& (0+255),b
 12409  0002D8  C092  FFF6         	movff	??__doprnt,tblptrl
 12410  0002DC  C093  FFF7         	movff	??__doprnt+1,tblptrh
 12411  0002E0  6AF8               	clrf	tblptru,c
 12412  0002E2  0E05               	movlw	(high __ramtop+-1)
 12413  0002E4  64F7               	cpfsgt	tblptrh,c
 12414  0002E6  D004               	bra	u16767
 12415  0002E8  0008               	tblrd		*
 12416  0002EA  FFFF               	dw	65535	; errata NOP
 12417  0002EC  50F5               	movf	tablat,w,c
 12418  0002EE  D005               	bra	u16760
 12419  0002F0                     u16767:
 12420  0002F0  CFF6 FFE9          	movff	tblptrl,fsr0l
 12421  0002F4  CFF7 FFEA          	movff	tblptrh,fsr0h
 12422  0002F8  50EF               	movf	indf0,w,c
 12423  0002FA                     u16760:
 12424  0002FA  0900               	iorlw	0
 12425  0002FC  A4D8               	btfss	status,2,c
 12426  0002FE  D7E1               	goto	l975
 12427  000300                     u16770:
 12428  000300  FFFF               	dw	65535	; assembler added errata NOP
 12429                           
 12430                           ;doprnt.c: 757: if(width > len)
 12431                           
 12432                           ;doprnt.c: 750: dostring:
 12433  000302  0100               	movlb	0	; () banked
 12434  000304  519E               	movf	__doprnt@width& (0+255),w,b
 12435  000306  5D99               	subwf	__doprnt@len& (0+255),w,b
 12436  000308  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 12437  00030A  599A               	subwfb	(__doprnt@len+1)& (0+255),w,b
 12438  00030C  B0D8               	btfsc	status,0,c
 12439  00030E  D005               	goto	l978
 12440                           
 12441                           ; BSR set to: 0
 12442                           ;doprnt.c: 758: width -= len;
 12443  000310  5199               	movf	__doprnt@len& (0+255),w,b
 12444  000312  5F9E               	subwf	__doprnt@width& (0+255),f,b
 12445  000314  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 12446  000316  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 12447  000318  D03D               	goto	l983
 12448  00031A                     l978:
 12449  00031A  FFFF               	dw	65535	; assembler added errata NOP
 12450                           
 12451                           ; BSR set to: 0
 12452                           ;doprnt.c: 759: else
 12453                           ;doprnt.c: 760: width = 0;
 12454                           
 12455                           ; BSR set to: 0
 12456  00031C  0E00               	movlw	0
 12457  00031E  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 12458  000320  0E00               	movlw	0
 12459  000322  6F9E               	movwf	__doprnt@width& (0+255),b
 12460                           
 12461                           ; BSR set to: 0
 12462                           ;doprnt.c: 764: while(width--)
 12463  000324  D037               	goto	l983
 12464  000326  FFFF               	dw	65535	; assembler added errata NOP
 12465  000328                     l11781:
 12466                           
 12467                           ; BSR set to: 0
 12468                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 12469  000328  EE20 F002          	lfsr	2,2
 12470  00032C  518C               	movf	__doprnt@pb& (0+255),w,b
 12471  00032E  26D9               	addwf	fsr2l,f,c
 12472  000330  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 12473  000332  22DA               	addwfc	fsr2h,f,c
 12474  000334  50DE               	movf	postinc2,w,c
 12475  000336  10DE               	iorwf	postinc2,w,c
 12476  000338  B4D8               	btfsc	status,2,c
 12477  00033A  D016               	goto	l982
 12478                           
 12479                           ; BSR set to: 0
 12480  00033C  EE20 F002          	lfsr	2,2
 12481  000340  518C               	movf	__doprnt@pb& (0+255),w,b
 12482  000342  26D9               	addwf	fsr2l,f,c
 12483  000344  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 12484  000346  22DA               	addwfc	fsr2h,f,c
 12485  000348  D801               	call	u16808
 12486  00034A  D024               	goto	l983
 12487  00034C                     u16808:
 12488  00034C  FFFF               	dw	65535	; assembler added errata NOP
 12489  00034E  0005               	push	
 12490  000350  6EFA               	movwf	pclath,c
 12491  000352  50DE               	movf	postinc2,w,c
 12492  000354  6EFD               	movwf	tosl,c
 12493  000356  50DE               	movf	postinc2,w,c
 12494  000358  6EFE               	movwf	tosh,c
 12495  00035A  50F8               	movf	tblptru,w,c
 12496  00035C  6EFF               	movwf	tosu,c
 12497  00035E  50FA               	movf	pclath,w,c
 12498  000360  0E20               	movlw	32
 12499  000362  0012               	return		;indir
 12500  000364  FFFF               	dw	65535	; errata NOP
 12501  000366  D016               	goto	l983
 12502  000368                     l982:
 12503  000368  FFFF               	dw	65535	; assembler added errata NOP
 12504  00036A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 12505  00036E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 12506  000372  CFDE F092          	movff	postinc2,??__doprnt
 12507  000376  CFDD F093          	movff	postdec2,??__doprnt+1
 12508  00037A  C092  FFD9         	movff	??__doprnt,fsr2l
 12509  00037E  C093  FFDA         	movff	??__doprnt+1,fsr2h
 12510  000382  0E20               	movlw	32
 12511  000384  6EDF               	movwf	indf2,c
 12512  000386  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 12513  00038A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 12514  00038E  2ADE               	incf	postinc2,f,c
 12515  000390  0E00               	movlw	0
 12516  000392  22DD               	addwfc	postdec2,f,c
 12517  000394                     l983:
 12518  000394  FFFF               	dw	65535	; assembler added errata NOP
 12519  000396  0100               	movlb	0	; () banked
 12520  000398  079E               	decf	__doprnt@width& (0+255),f,b
 12521  00039A  A0D8               	btfss	status,0,c
 12522  00039C  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 12523  00039E  299E               	incf	__doprnt@width& (0+255),w,b
 12524  0003A0  E1C3               	bnz	l11781
 12525  0003A2  299F               	incf	(__doprnt@width+1)& (0+255),w,b
 12526  0003A4  B4D8               	btfsc	status,2,c
 12527  0003A6  D05F               	goto	l988
 12528  0003A8  D7BE               	goto	l981
 12529  0003AA  FFFF               	dw	65535	; assembler added errata NOP
 12530  0003AC                     l11791:
 12531                           
 12532                           ; BSR set to: 0
 12533                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 12534  0003AC  EE20 F002          	lfsr	2,2
 12535  0003B0  518C               	movf	__doprnt@pb& (0+255),w,b
 12536  0003B2  26D9               	addwf	fsr2l,f,c
 12537  0003B4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 12538  0003B6  22DA               	addwfc	fsr2h,f,c
 12539  0003B8  50DE               	movf	postinc2,w,c
 12540  0003BA  10DE               	iorwf	postinc2,w,c
 12541  0003BC  B4D8               	btfsc	status,2,c
 12542  0003BE  D02A               	goto	l987
 12543                           
 12544                           ; BSR set to: 0
 12545  0003C0  EE20 F002          	lfsr	2,2
 12546  0003C4  518C               	movf	__doprnt@pb& (0+255),w,b
 12547  0003C6  26D9               	addwf	fsr2l,f,c
 12548  0003C8  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 12549  0003CA  22DA               	addwfc	fsr2h,f,c
 12550  0003CC  D801               	call	u16838
 12551  0003CE  D01D               	goto	u16839
 12552  0003D0                     u16838:
 12553  0003D0  FFFF               	dw	65535	; assembler added errata NOP
 12554  0003D2  0005               	push	
 12555  0003D4  6EFA               	movwf	pclath,c
 12556  0003D6  50DE               	movf	postinc2,w,c
 12557  0003D8  6EFD               	movwf	tosl,c
 12558  0003DA  50DE               	movf	postinc2,w,c
 12559  0003DC  6EFE               	movwf	tosh,c
 12560  0003DE  50F8               	movf	tblptru,w,c
 12561  0003E0  6EFF               	movwf	tosu,c
 12562  0003E2  50FA               	movf	pclath,w,c
 12563  0003E4  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 12564  0003E8  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 12565  0003EC  6AF8               	clrf	tblptru,c
 12566  0003EE  0E05               	movlw	(high __ramtop+-1)
 12567  0003F0  64F7               	cpfsgt	tblptrh,c
 12568  0003F2  D004               	bra	u16847
 12569  0003F4  0008               	tblrd		*
 12570  0003F6  FFFF               	dw	65535	; errata NOP
 12571  0003F8  50F5               	movf	tablat,w,c
 12572  0003FA  D005               	bra	u16840
 12573  0003FC                     u16847:
 12574  0003FC  CFF6 FFE9          	movff	tblptrl,fsr0l
 12575  000400  CFF7 FFEA          	movff	tblptrh,fsr0h
 12576  000404  50EF               	movf	indf0,w,c
 12577  000406                     u16840:
 12578  000406  0012               	return		;indir
 12579  000408  FFFF               	dw	65535	; errata NOP
 12580  00040A                     u16839:
 12581  00040A  FFFF               	dw	65535	; assembler added errata NOP
 12582  00040C  0100               	movlb	0	; () banked
 12583  00040E  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 12584  000410  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 12585  000412  D029               	goto	l988
 12586  000414                     l987:
 12587  000414  FFFF               	dw	65535	; assembler added errata NOP
 12588                           
 12589                           ; BSR set to: 0
 12590                           
 12591                           ; BSR set to: 0
 12592  000416  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 12593  00041A  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 12594  00041E  6AF8               	clrf	tblptru,c
 12595  000420  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 12596  000424  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 12597  000428  CFDE F092          	movff	postinc2,??__doprnt
 12598  00042C  CFDD F093          	movff	postdec2,??__doprnt+1
 12599  000430  C092  FFD9         	movff	??__doprnt,fsr2l
 12600  000434  C093  FFDA         	movff	??__doprnt+1,fsr2h
 12601  000438  0E05               	movlw	(high __ramtop+-1)
 12602  00043A  64F7               	cpfsgt	tblptrh,c
 12603  00043C  D004               	bra	u16857
 12604  00043E  0008               	tblrd		*
 12605  000440  FFFF               	dw	65535	; errata NOP
 12606  000442  50F5               	movf	tablat,w,c
 12607  000444  D005               	bra	u16850
 12608  000446                     u16857:
 12609  000446  CFF6 FFE9          	movff	tblptrl,fsr0l
 12610  00044A  CFF7 FFEA          	movff	tblptrh,fsr0h
 12611  00044E  50EF               	movf	indf0,w,c
 12612  000450                     u16850:
 12613  000450  6EDF               	movwf	indf2,c
 12614  000452  0100               	movlb	0	; () banked
 12615  000454  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 12616  000456  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 12617                           
 12618                           ; BSR set to: 0
 12619  000458  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 12620  00045C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 12621  000460  2ADE               	incf	postinc2,f,c
 12622  000462  0E00               	movlw	0
 12623  000464  22DD               	addwfc	postdec2,f,c
 12624  000466                     l988:
 12625  000466  FFFF               	dw	65535	; assembler added errata NOP
 12626                           
 12627                           ; BSR set to: 0
 12628                           
 12629                           ; BSR set to: 0
 12630                           
 12631                           ; BSR set to: 0
 12632  000468  0799               	decf	__doprnt@len& (0+255),f,b
 12633  00046A  A0D8               	btfss	status,0,c
 12634  00046C  079A               	decf	(__doprnt@len+1)& (0+255),f,b
 12635  00046E  2999               	incf	__doprnt@len& (0+255),w,b
 12636  000470  E19D               	bnz	l11791
 12637  000472  299A               	incf	(__doprnt@len+1)& (0+255),w,b
 12638  000474  B4D8               	btfsc	status,2,c
 12639  000476  D215               	goto	u17120
 12640  000478  D798               	goto	l986
 12641  00047A  FFFF               	dw	65535	; assembler added errata NOP
 12642                           
 12643                           ; BSR set to: 0
 12644                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 12645                           
 12646                           ; BSR set to: 0
 12647  00047C  C090  FFD9         	movff	__doprnt@ap,fsr2l
 12648  000480  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 12649  000484  CFDF F092          	movff	indf2,??__doprnt
 12650  000488  0E02               	movlw	2
 12651  00048A  26DE               	addwf	postinc2,f,c
 12652  00048C  CFDF F093          	movff	indf2,??__doprnt+1
 12653  000490  0E00               	movlw	0
 12654  000492  22DD               	addwfc	postdec2,f,c
 12655  000494  C092  FFD9         	movff	??__doprnt,fsr2l
 12656  000498  C093  FFDA         	movff	??__doprnt+1,fsr2h
 12657  00049C  50DF               	movf	indf2,w,c
 12658  00049E  6FA0               	movwf	__doprnt@c& (0+255),b
 12659  0004A0  FFFF               	dw	65535	; assembler added errata NOP
 12660                           
 12661                           ; BSR set to: 0
 12662                           ;doprnt.c: 805: cp = (char *)&c;
 12663                           
 12664                           ; BSR set to: 0
 12665  0004A2  0EA0               	movlw	low __doprnt@c
 12666  0004A4  6F9C               	movwf	__doprnt@cp& (0+255),b
 12667  0004A6  0E00               	movlw	high __doprnt@c
 12668  0004A8  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 12669                           
 12670                           ; BSR set to: 0
 12671                           ;doprnt.c: 806: len = 1;
 12672  0004AA  0E00               	movlw	0
 12673  0004AC  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 12674  0004AE  0E01               	movlw	1
 12675  0004B0  6F99               	movwf	__doprnt@len& (0+255),b
 12676                           
 12677                           ;doprnt.c: 807: goto dostring;
 12678  0004B2  D726               	goto	u16770
 12679  0004B4                     l966:
 12680  0004B4  FFFF               	dw	65535	; assembler added errata NOP
 12681                           
 12682                           ; BSR set to: 0
 12683  0004B6  0100               	movlb	0	; () banked
 12684  0004B8  518E               	movf	__doprnt@f& (0+255),w,b
 12685  0004BA  6F92               	movwf	??__doprnt& (0+255),b
 12686  0004BC  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 12687  0004BE  6F93               	movwf	(??__doprnt+1)& (0+255),b
 12688  0004C0  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 12689  0004C2  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 12690  0004C4  C092  FFF6         	movff	??__doprnt,tblptrl
 12691  0004C8  C093  FFF7         	movff	??__doprnt+1,tblptrh
 12692  0004CC  6AF8               	clrf	tblptru,c
 12693  0004CE  0E05               	movlw	(high __ramtop+-1)
 12694  0004D0  64F7               	cpfsgt	tblptrh,c
 12695  0004D2  D004               	bra	u16877
 12696  0004D4  0008               	tblrd		*
 12697  0004D6  FFFF               	dw	65535	; errata NOP
 12698  0004D8  50F5               	movf	tablat,w,c
 12699  0004DA  D005               	bra	u16870
 12700  0004DC                     u16877:
 12701  0004DC  CFF6 FFE9          	movff	tblptrl,fsr0l
 12702  0004E0  CFF7 FFEA          	movff	tblptrh,fsr0h
 12703  0004E4  50EF               	movf	indf0,w,c
 12704  0004E6                     u16870:
 12705  0004E6  0100               	movlb	0	; () banked
 12706  0004E8  6FA0               	movwf	__doprnt@c& (0+255),b
 12707  0004EA  51A0               	movf	__doprnt@c& (0+255),w,b
 12708                           
 12709                           ; Switch size 1, requested type "space"
 12710                           ; Number of cases is 5, Range of values is 0 to 115
 12711                           ; switch strategies available:
 12712                           ; Name         Instructions Cycles
 12713                           ; simple_byte           16     9 (average)
 12714                           ;	Chosen strategy is simple_byte
 12715  0004EC  0A00               	xorlw	0	; case 0
 12716  0004EE  B4D8               	btfsc	status,2,c
 12717  0004F0  D1F6               	goto	u17140
 12718  0004F2  0A63               	xorlw	99	; case 99
 12719  0004F4  B4D8               	btfsc	status,2,c
 12720  0004F6  D7C1               	goto	l990
 12721  0004F8  0A07               	xorlw	7	; case 100
 12722  0004FA  B4D8               	btfsc	status,2,c
 12723  0004FC  D007               	goto	l971
 12724  0004FE  0A0D               	xorlw	13	; case 105
 12725  000500  B4D8               	btfsc	status,2,c
 12726  000502  D004               	goto	l971
 12727  000504  0A1A               	xorlw	26	; case 115
 12728  000506  B4D8               	btfsc	status,2,c
 12729  000508  D6B8               	goto	l972
 12730  00050A  D7CA               	goto	l991
 12731  00050C                     l971:
 12732  00050C  FFFF               	dw	65535	; assembler added errata NOP
 12733                           
 12734                           ;doprnt.c: 1253: {
 12735                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12736                           
 12737                           ; BSR set to: 0
 12738  00050E  C090  FFD9         	movff	__doprnt@ap,fsr2l
 12739  000512  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 12740  000516  CFDF F092          	movff	indf2,??__doprnt
 12741  00051A  0E02               	movlw	2
 12742  00051C  26DE               	addwf	postinc2,f,c
 12743  00051E  CFDF F093          	movff	indf2,??__doprnt+1
 12744  000522  0E00               	movlw	0
 12745  000524  22DD               	addwfc	postdec2,f,c
 12746  000526  C092  FFD9         	movff	??__doprnt,fsr2l
 12747  00052A  C093  FFDA         	movff	??__doprnt+1,fsr2h
 12748  00052E  CFDE F097          	movff	postinc2,__doprnt@val
 12749  000532  CFDD F098          	movff	postdec2,__doprnt@val+1
 12750                           
 12751                           ;doprnt.c: 1261: if((int)val < 0) {
 12752  000536  0100               	movlb	0	; () banked
 12753  000538  AF98               	btfss	(__doprnt@val+1)& (0+255),7,b
 12754  00053A  D006               	goto	l992
 12755                           
 12756                           ; BSR set to: 0
 12757                           ;doprnt.c: 1262: flag |= 0x03;
 12758  00053C  0E03               	movlw	3
 12759  00053E  139B               	iorwf	__doprnt@flag& (0+255),f,b
 12760                           
 12761                           ; BSR set to: 0
 12762                           ;doprnt.c: 1263: val = -val;
 12763  000540  6D97               	negf	__doprnt@val& (0+255),b
 12764  000542  1F98               	comf	(__doprnt@val+1)& (0+255),f,b
 12765  000544  B0D8               	btfsc	status,0,c
 12766  000546  2B98               	incf	(__doprnt@val+1)& (0+255),f,b
 12767  000548                     l992:
 12768  000548  FFFF               	dw	65535	; assembler added errata NOP
 12769                           
 12770                           ; BSR set to: 0
 12771                           ;doprnt.c: 1264: }
 12772                           ;doprnt.c: 1266: }
 12773                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12774                           
 12775                           ; BSR set to: 0
 12776  00054A  0E01               	movlw	1
 12777  00054C  6FA0               	movwf	__doprnt@c& (0+255),b
 12778  00054E                     l11825:
 12779  00054E  FFFF               	dw	65535	; assembler added errata NOP
 12780                           
 12781                           ; BSR set to: 0
 12782  000550  0E05               	movlw	5
 12783  000552  19A0               	xorwf	__doprnt@c& (0+255),w,b
 12784  000554  B4D8               	btfsc	status,2,c
 12785  000556  D014               	goto	u16910
 12786                           
 12787                           ; BSR set to: 0
 12788                           ;doprnt.c: 1306: if(val < dpowers[c])
 12789                           
 12790                           ; BSR set to: 0
 12791                           
 12792                           ; BSR set to: 0
 12793  000558  51A0               	movf	__doprnt@c& (0+255),w,b
 12794  00055A  0D02               	mullw	2
 12795  00055C  0ED9               	movlw	low _dpowers
 12796  00055E  24F3               	addwf	prodl,w,c
 12797  000560  6EF6               	movwf	tblptrl,c
 12798  000562  0E7B               	movlw	high _dpowers
 12799  000564  20F4               	addwfc	prodh,w,c
 12800  000566  6EF7               	movwf	tblptrh,c
 12801  000568                     	if	0	;There are less than 3 active tblptr bytes
 12802  000568                     	endif
 12803  000568  0009               	tblrd		*+
 12804  00056A  FFFF               	dw	65535	; errata NOP
 12805  00056C  50F5               	movf	tablat,w,c
 12806  00056E  5D97               	subwf	__doprnt@val& (0+255),w,b
 12807  000570  0009               	tblrd		*+
 12808  000572  FFFF               	dw	65535	; errata NOP
 12809  000574  50F5               	movf	tablat,w,c
 12810  000576  5998               	subwfb	(__doprnt@val+1)& (0+255),w,b
 12811  000578  A0D8               	btfss	status,0,c
 12812  00057A  D002               	goto	u16910
 12813                           
 12814                           ; BSR set to: 0
 12815                           
 12816                           ; BSR set to: 0
 12817                           
 12818                           ; BSR set to: 0
 12819                           ;doprnt.c: 1307: break;
 12820  00057C  2BA0               	incf	__doprnt@c& (0+255),f,b
 12821  00057E  D7E7               	goto	l11825
 12822  000580                     u16910:
 12823  000580  FFFF               	dw	65535	; assembler added errata NOP
 12824                           
 12825                           ; BSR set to: 0
 12826                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12827                           
 12828                           ; BSR set to: 0
 12829  000582  519E               	movf	__doprnt@width& (0+255),w,b
 12830  000584  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 12831  000586  B4D8               	btfsc	status,2,c
 12832  000588  D009               	goto	l996
 12833                           
 12834                           ; BSR set to: 0
 12835  00058A  C09B  F092         	movff	__doprnt@flag,??__doprnt
 12836  00058E  0E03               	movlw	3
 12837  000590  1792               	andwf	??__doprnt& (0+255),f,b
 12838  000592  B4D8               	btfsc	status,2,c
 12839  000594  D003               	goto	l996
 12840                           
 12841                           ; BSR set to: 0
 12842                           ;doprnt.c: 1346: width--;
 12843  000596  079E               	decf	__doprnt@width& (0+255),f,b
 12844  000598  A0D8               	btfss	status,0,c
 12845  00059A  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 12846  00059C                     l996:
 12847  00059C  FFFF               	dw	65535	; assembler added errata NOP
 12848                           
 12849                           ; BSR set to: 0
 12850                           ;doprnt.c: 1381: if(width > c)
 12851                           
 12852                           ; BSR set to: 0
 12853  00059E  0E80               	movlw	128
 12854  0005A0  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 12855  0005A2  0E7F               	movlw	127
 12856  0005A4  6F92               	movwf	??__doprnt& (0+255),b
 12857  0005A6  519E               	movf	__doprnt@width& (0+255),w,b
 12858  0005A8  5DA0               	subwf	__doprnt@c& (0+255),w,b
 12859  0005AA  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 12860  0005AC  0A80               	xorlw	128
 12861  0005AE  5992               	subwfb	??__doprnt& (0+255),w,b
 12862  0005B0  B0D8               	btfsc	status,0,c
 12863  0005B2  D007               	goto	l997
 12864                           
 12865                           ; BSR set to: 0
 12866                           ;doprnt.c: 1382: width -= c;
 12867  0005B4  51A0               	movf	__doprnt@c& (0+255),w,b
 12868  0005B6  5F9E               	subwf	__doprnt@width& (0+255),f,b
 12869  0005B8  0E00               	movlw	0
 12870  0005BA  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 12871  0005BC  0EFF               	movlw	255
 12872  0005BE  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 12873  0005C0  D005               	goto	l998
 12874  0005C2                     l997:
 12875  0005C2  FFFF               	dw	65535	; assembler added errata NOP
 12876                           
 12877                           ; BSR set to: 0
 12878                           ;doprnt.c: 1383: else
 12879                           ;doprnt.c: 1384: width = 0;
 12880                           
 12881                           ; BSR set to: 0
 12882  0005C4  0E00               	movlw	0
 12883  0005C6  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 12884  0005C8  0E00               	movlw	0
 12885  0005CA  6F9E               	movwf	__doprnt@width& (0+255),b
 12886  0005CC                     l998:
 12887  0005CC  FFFF               	dw	65535	; assembler added errata NOP
 12888                           
 12889                           ; BSR set to: 0
 12890                           ;doprnt.c: 1387: if(flag & 0x04) {
 12891                           
 12892                           ; BSR set to: 0
 12893  0005CE  A59B               	btfss	__doprnt@flag& (0+255),2,b
 12894  0005D0  D07F               	goto	l999
 12895                           
 12896                           ; BSR set to: 0
 12897                           ;doprnt.c: 1392: if(flag & 0x03)
 12898  0005D2  C09B  F092         	movff	__doprnt@flag,??__doprnt
 12899  0005D6  0E03               	movlw	3
 12900  0005D8  1792               	andwf	??__doprnt& (0+255),f,b
 12901  0005DA  B4D8               	btfsc	status,2,c
 12902  0005DC  D036               	goto	l1002
 12903                           
 12904                           ; BSR set to: 0
 12905                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 12906  0005DE  EE20 F002          	lfsr	2,2
 12907  0005E2  518C               	movf	__doprnt@pb& (0+255),w,b
 12908  0005E4  26D9               	addwf	fsr2l,f,c
 12909  0005E6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 12910  0005E8  22DA               	addwfc	fsr2h,f,c
 12911  0005EA  50DE               	movf	postinc2,w,c
 12912  0005EC  10DE               	iorwf	postinc2,w,c
 12913  0005EE  B4D8               	btfsc	status,2,c
 12914  0005F0  D016               	goto	l1001
 12915                           
 12916                           ; BSR set to: 0
 12917  0005F2  EE20 F002          	lfsr	2,2
 12918  0005F6  518C               	movf	__doprnt@pb& (0+255),w,b
 12919  0005F8  26D9               	addwf	fsr2l,f,c
 12920  0005FA  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 12921  0005FC  22DA               	addwfc	fsr2h,f,c
 12922  0005FE  D801               	call	u16988
 12923  000600  D024               	goto	l1002
 12924  000602                     u16988:
 12925  000602  FFFF               	dw	65535	; assembler added errata NOP
 12926  000604  0005               	push	
 12927  000606  6EFA               	movwf	pclath,c
 12928  000608  50DE               	movf	postinc2,w,c
 12929  00060A  6EFD               	movwf	tosl,c
 12930  00060C  50DE               	movf	postinc2,w,c
 12931  00060E  6EFE               	movwf	tosh,c
 12932  000610  50F8               	movf	tblptru,w,c
 12933  000612  6EFF               	movwf	tosu,c
 12934  000614  50FA               	movf	pclath,w,c
 12935  000616  0E2D               	movlw	45
 12936  000618  0012               	return		;indir
 12937  00061A  FFFF               	dw	65535	; errata NOP
 12938  00061C  D016               	goto	l1002
 12939  00061E                     l1001:
 12940  00061E  FFFF               	dw	65535	; assembler added errata NOP
 12941  000620  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 12942  000624  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 12943  000628  CFDE F092          	movff	postinc2,??__doprnt
 12944  00062C  CFDD F093          	movff	postdec2,??__doprnt+1
 12945  000630  C092  FFD9         	movff	??__doprnt,fsr2l
 12946  000634  C093  FFDA         	movff	??__doprnt+1,fsr2h
 12947  000638  0E2D               	movlw	45
 12948  00063A  6EDF               	movwf	indf2,c
 12949  00063C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 12950  000640  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 12951  000644  2ADE               	incf	postinc2,f,c
 12952  000646  0E00               	movlw	0
 12953  000648  22DD               	addwfc	postdec2,f,c
 12954  00064A                     l1002:
 12955  00064A  FFFF               	dw	65535	; assembler added errata NOP
 12956                           
 12957                           ;doprnt.c: 1415: if(width)
 12958  00064C  0100               	movlb	0	; () banked
 12959  00064E  FFFF               	dw	65535	; assembler added errata NOP
 12960  000650  519E               	movf	__doprnt@width& (0+255),w,b
 12961  000652  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 12962  000654  B4D8               	btfsc	status,2,c
 12963  000656  D0BE               	goto	l1016
 12964                           
 12965                           ; BSR set to: 0
 12966                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 12967                           
 12968                           ; BSR set to: 0
 12969                           
 12970                           ;doprnt.c: 1416: do
 12971  000658  EE20 F002          	lfsr	2,2
 12972  00065C  518C               	movf	__doprnt@pb& (0+255),w,b
 12973  00065E  26D9               	addwf	fsr2l,f,c
 12974  000660  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 12975  000662  22DA               	addwfc	fsr2h,f,c
 12976  000664  50DE               	movf	postinc2,w,c
 12977  000666  10DE               	iorwf	postinc2,w,c
 12978  000668  B4D8               	btfsc	status,2,c
 12979  00066A  D016               	goto	l1005
 12980                           
 12981                           ; BSR set to: 0
 12982  00066C  EE20 F002          	lfsr	2,2
 12983  000670  518C               	movf	__doprnt@pb& (0+255),w,b
 12984  000672  26D9               	addwf	fsr2l,f,c
 12985  000674  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 12986  000676  22DA               	addwfc	fsr2h,f,c
 12987  000678  D801               	call	u17018
 12988  00067A  D024               	goto	l1006
 12989  00067C                     u17018:
 12990  00067C  FFFF               	dw	65535	; assembler added errata NOP
 12991  00067E  0005               	push	
 12992  000680  6EFA               	movwf	pclath,c
 12993  000682  50DE               	movf	postinc2,w,c
 12994  000684  6EFD               	movwf	tosl,c
 12995  000686  50DE               	movf	postinc2,w,c
 12996  000688  6EFE               	movwf	tosh,c
 12997  00068A  50F8               	movf	tblptru,w,c
 12998  00068C  6EFF               	movwf	tosu,c
 12999  00068E  50FA               	movf	pclath,w,c
 13000  000690  0E30               	movlw	48
 13001  000692  0012               	return		;indir
 13002  000694  FFFF               	dw	65535	; errata NOP
 13003  000696  D016               	goto	l1006
 13004  000698                     l1005:
 13005  000698  FFFF               	dw	65535	; assembler added errata NOP
 13006  00069A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13007  00069E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13008  0006A2  CFDE F092          	movff	postinc2,??__doprnt
 13009  0006A6  CFDD F093          	movff	postdec2,??__doprnt+1
 13010  0006AA  C092  FFD9         	movff	??__doprnt,fsr2l
 13011  0006AE  C093  FFDA         	movff	??__doprnt+1,fsr2h
 13012  0006B2  0E30               	movlw	48
 13013  0006B4  6EDF               	movwf	indf2,c
 13014  0006B6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13015  0006BA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13016  0006BE  2ADE               	incf	postinc2,f,c
 13017  0006C0  0E00               	movlw	0
 13018  0006C2  22DD               	addwfc	postdec2,f,c
 13019  0006C4                     l1006:
 13020  0006C4  FFFF               	dw	65535	; assembler added errata NOP
 13021                           
 13022                           ;doprnt.c: 1418: while(--width);
 13023  0006C6  0100               	movlb	0	; () banked
 13024  0006C8  079E               	decf	__doprnt@width& (0+255),f,b
 13025  0006CA  A0D8               	btfss	status,0,c
 13026  0006CC  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 13027  0006CE  D7BF               	goto	L34
 13028  0006D0                     l999:
 13029  0006D0  FFFF               	dw	65535	; assembler added errata NOP
 13030                           
 13031                           ; BSR set to: 0
 13032                           ;doprnt.c: 1422: {
 13033                           ;doprnt.c: 1424: if(width
 13034                           ;doprnt.c: 1428: )
 13035                           
 13036                           ; BSR set to: 0
 13037  0006D2  519E               	movf	__doprnt@width& (0+255),w,b
 13038  0006D4  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 13039  0006D6  B4D8               	btfsc	status,2,c
 13040  0006D8  D040               	goto	u17060
 13041  0006DA                     u17030:
 13042  0006DA  FFFF               	dw	65535	; assembler added errata NOP
 13043                           
 13044                           ; BSR set to: 0
 13045                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 13046                           
 13047                           ; BSR set to: 0
 13048                           
 13049                           ;doprnt.c: 1429: do
 13050  0006DC  EE20 F002          	lfsr	2,2
 13051  0006E0  518C               	movf	__doprnt@pb& (0+255),w,b
 13052  0006E2  26D9               	addwf	fsr2l,f,c
 13053  0006E4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13054  0006E6  22DA               	addwfc	fsr2h,f,c
 13055  0006E8  50DE               	movf	postinc2,w,c
 13056  0006EA  10DE               	iorwf	postinc2,w,c
 13057  0006EC  B4D8               	btfsc	status,2,c
 13058  0006EE  D016               	goto	l1011
 13059                           
 13060                           ; BSR set to: 0
 13061  0006F0  EE20 F002          	lfsr	2,2
 13062  0006F4  518C               	movf	__doprnt@pb& (0+255),w,b
 13063  0006F6  26D9               	addwf	fsr2l,f,c
 13064  0006F8  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13065  0006FA  22DA               	addwfc	fsr2h,f,c
 13066  0006FC  D801               	call	u17058
 13067  0006FE  D024               	goto	l1012
 13068  000700                     u17058:
 13069  000700  FFFF               	dw	65535	; assembler added errata NOP
 13070  000702  0005               	push	
 13071  000704  6EFA               	movwf	pclath,c
 13072  000706  50DE               	movf	postinc2,w,c
 13073  000708  6EFD               	movwf	tosl,c
 13074  00070A  50DE               	movf	postinc2,w,c
 13075  00070C  6EFE               	movwf	tosh,c
 13076  00070E  50F8               	movf	tblptru,w,c
 13077  000710  6EFF               	movwf	tosu,c
 13078  000712  50FA               	movf	pclath,w,c
 13079  000714  0E20               	movlw	32
 13080  000716  0012               	return		;indir
 13081  000718  FFFF               	dw	65535	; errata NOP
 13082  00071A  D016               	goto	l1012
 13083  00071C                     l1011:
 13084  00071C  FFFF               	dw	65535	; assembler added errata NOP
 13085  00071E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13086  000722  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13087  000726  CFDE F092          	movff	postinc2,??__doprnt
 13088  00072A  CFDD F093          	movff	postdec2,??__doprnt+1
 13089  00072E  C092  FFD9         	movff	??__doprnt,fsr2l
 13090  000732  C093  FFDA         	movff	??__doprnt+1,fsr2h
 13091  000736  0E20               	movlw	32
 13092  000738  6EDF               	movwf	indf2,c
 13093  00073A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13094  00073E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13095  000742  2ADE               	incf	postinc2,f,c
 13096  000744  0E00               	movlw	0
 13097  000746  22DD               	addwfc	postdec2,f,c
 13098  000748                     l1012:
 13099  000748  FFFF               	dw	65535	; assembler added errata NOP
 13100                           
 13101                           ;doprnt.c: 1431: while(--width);
 13102  00074A  0100               	movlb	0	; () banked
 13103  00074C  079E               	decf	__doprnt@width& (0+255),f,b
 13104  00074E  A0D8               	btfss	status,0,c
 13105  000750  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 13106  000752  519E               	movf	__doprnt@width& (0+255),w,b
 13107  000754  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 13108  000756  A4D8               	btfss	status,2,c
 13109  000758  D7C0               	goto	u17030
 13110  00075A                     u17060:
 13111  00075A  FFFF               	dw	65535	; assembler added errata NOP
 13112                           
 13113                           ; BSR set to: 0
 13114                           ;doprnt.c: 1438: if(flag & 0x03)
 13115                           
 13116                           ; BSR set to: 0
 13117                           
 13118                           ; BSR set to: 0
 13119  00075C  C09B  F092         	movff	__doprnt@flag,??__doprnt
 13120  000760  0E03               	movlw	3
 13121  000762  1792               	andwf	??__doprnt& (0+255),f,b
 13122  000764  B4D8               	btfsc	status,2,c
 13123  000766  D036               	goto	l1016
 13124                           
 13125                           ; BSR set to: 0
 13126                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 13127  000768  EE20 F002          	lfsr	2,2
 13128  00076C  518C               	movf	__doprnt@pb& (0+255),w,b
 13129  00076E  26D9               	addwf	fsr2l,f,c
 13130  000770  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13131  000772  22DA               	addwfc	fsr2h,f,c
 13132  000774  50DE               	movf	postinc2,w,c
 13133  000776  10DE               	iorwf	postinc2,w,c
 13134  000778  B4D8               	btfsc	status,2,c
 13135  00077A  D016               	goto	l1015
 13136                           
 13137                           ; BSR set to: 0
 13138  00077C  EE20 F002          	lfsr	2,2
 13139  000780  518C               	movf	__doprnt@pb& (0+255),w,b
 13140  000782  26D9               	addwf	fsr2l,f,c
 13141  000784  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13142  000786  22DA               	addwfc	fsr2h,f,c
 13143  000788  D801               	call	u17098
 13144  00078A  D024               	goto	l1016
 13145  00078C                     u17098:
 13146  00078C  FFFF               	dw	65535	; assembler added errata NOP
 13147  00078E  0005               	push	
 13148  000790  6EFA               	movwf	pclath,c
 13149  000792  50DE               	movf	postinc2,w,c
 13150  000794  6EFD               	movwf	tosl,c
 13151  000796  50DE               	movf	postinc2,w,c
 13152  000798  6EFE               	movwf	tosh,c
 13153  00079A  50F8               	movf	tblptru,w,c
 13154  00079C  6EFF               	movwf	tosu,c
 13155  00079E  50FA               	movf	pclath,w,c
 13156  0007A0  0E2D               	movlw	45
 13157  0007A2  0012               	return		;indir
 13158  0007A4  FFFF               	dw	65535	; errata NOP
 13159  0007A6  D016               	goto	l1016
 13160  0007A8                     l1015:
 13161  0007A8  FFFF               	dw	65535	; assembler added errata NOP
 13162  0007AA  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13163  0007AE  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13164  0007B2  CFDE F092          	movff	postinc2,??__doprnt
 13165  0007B6  CFDD F093          	movff	postdec2,??__doprnt+1
 13166  0007BA  C092  FFD9         	movff	??__doprnt,fsr2l
 13167  0007BE  C093  FFDA         	movff	??__doprnt+1,fsr2h
 13168  0007C2  0E2D               	movlw	45
 13169  0007C4  6EDF               	movwf	indf2,c
 13170  0007C6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13171  0007CA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13172  0007CE  2ADE               	incf	postinc2,f,c
 13173  0007D0  0E00               	movlw	0
 13174  0007D2  22DD               	addwfc	postdec2,f,c
 13175  0007D4                     l1016:
 13176  0007D4  FFFF               	dw	65535	; assembler added errata NOP
 13177                           
 13178                           ;doprnt.c: 1469: }
 13179                           ;doprnt.c: 1472: prec = c;
 13180  0007D6  C0A0  F096         	movff	__doprnt@c,__doprnt@prec
 13181                           
 13182                           ;doprnt.c: 1474: while(prec--) {
 13183  0007DA  D05D               	goto	l1020
 13184  0007DC  FFFF               	dw	65535	; assembler added errata NOP
 13185                           
 13186                           ;doprnt.c: 1478: {
 13187                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13188  0007DE  0100               	movlb	0	; () banked
 13189  0007E0  5196               	movf	__doprnt@prec& (0+255),w,b
 13190  0007E2  0D02               	mullw	2
 13191  0007E4  0ED9               	movlw	low _dpowers
 13192  0007E6  24F3               	addwf	prodl,w,c
 13193  0007E8  6EF6               	movwf	tblptrl,c
 13194  0007EA  0E7B               	movlw	high _dpowers
 13195  0007EC  20F4               	addwfc	prodh,w,c
 13196  0007EE  6EF7               	movwf	tblptrh,c
 13197  0007F0                     	if	0	;There are less than 3 active tblptr bytes
 13198  0007F0                     	endif
 13199  0007F0  0009               	tblrd		*+
 13200  0007F2  FFFF               	dw	65535	; errata NOP
 13201  0007F4  CFF5 F082          	movff	tablat,___lwdiv@divisor
 13202  0007F8  000A               	tblrd		*-
 13203  0007FA  FFFF               	dw	65535	; errata NOP
 13204  0007FC  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 13205  000800  C097  F080         	movff	__doprnt@val,___lwdiv@dividend
 13206  000804  C098  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
 13207  000808  EC79  F03D         	call	___lwdiv
 13208  00080C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 13209  000810  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 13210  000814  0E00               	movlw	0
 13211  000816  0100               	movlb	0	; () banked
 13212  000818  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 13213  00081A  0E0A               	movlw	10
 13214  00081C  6F89               	movwf	___lwmod@divisor& (0+255),b
 13215  00081E  EC6B  F03C         	call	___lwmod	;wreg free
 13216  000822  0100               	movlb	0	; () banked
 13217  000824  5187               	movf	?___lwmod& (0+255),w,b
 13218  000826  0F30               	addlw	48
 13219  000828  6FA0               	movwf	__doprnt@c& (0+255),b
 13220                           
 13221                           ; BSR set to: 0
 13222                           ;doprnt.c: 1523: }
 13223                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 13224  00082A  EE20 F002          	lfsr	2,2
 13225  00082E  518C               	movf	__doprnt@pb& (0+255),w,b
 13226  000830  26D9               	addwf	fsr2l,f,c
 13227  000832  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13228  000834  22DA               	addwfc	fsr2h,f,c
 13229  000836  50DE               	movf	postinc2,w,c
 13230  000838  10DE               	iorwf	postinc2,w,c
 13231  00083A  B4D8               	btfsc	status,2,c
 13232  00083C  D016               	goto	l1019
 13233                           
 13234                           ; BSR set to: 0
 13235  00083E  EE20 F002          	lfsr	2,2
 13236  000842  518C               	movf	__doprnt@pb& (0+255),w,b
 13237  000844  26D9               	addwf	fsr2l,f,c
 13238  000846  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 13239  000848  22DA               	addwfc	fsr2h,f,c
 13240  00084A  D801               	call	u17118
 13241  00084C  D024               	goto	l1020
 13242  00084E                     u17118:
 13243  00084E  FFFF               	dw	65535	; assembler added errata NOP
 13244  000850  0005               	push	
 13245  000852  6EFA               	movwf	pclath,c
 13246  000854  50DE               	movf	postinc2,w,c
 13247  000856  6EFD               	movwf	tosl,c
 13248  000858  50DE               	movf	postinc2,w,c
 13249  00085A  6EFE               	movwf	tosh,c
 13250  00085C  50F8               	movf	tblptru,w,c
 13251  00085E  6EFF               	movwf	tosu,c
 13252  000860  50FA               	movf	pclath,w,c
 13253  000862  51A0               	movf	__doprnt@c& (0+255),w,b
 13254  000864  0012               	return		;indir
 13255  000866  FFFF               	dw	65535	; errata NOP
 13256  000868  D016               	goto	l1020
 13257  00086A                     l1019:
 13258  00086A  FFFF               	dw	65535	; assembler added errata NOP
 13259  00086C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13260  000870  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13261  000874  CFDE F092          	movff	postinc2,??__doprnt
 13262  000878  CFDD F093          	movff	postdec2,??__doprnt+1
 13263  00087C  C092  FFD9         	movff	??__doprnt,fsr2l
 13264  000880  C093  FFDA         	movff	??__doprnt+1,fsr2h
 13265  000884  C0A0  FFDF         	movff	__doprnt@c,indf2
 13266  000888  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 13267  00088C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 13268  000890  2ADE               	incf	postinc2,f,c
 13269  000892  0E00               	movlw	0
 13270  000894  22DD               	addwfc	postdec2,f,c
 13271  000896                     l1020:
 13272  000896  FFFF               	dw	65535	; assembler added errata NOP
 13273  000898  0100               	movlb	0	; () banked
 13274  00089A  0796               	decf	__doprnt@prec& (0+255),f,b
 13275  00089C  2996               	incf	__doprnt@prec& (0+255),w,b
 13276  00089E  A4D8               	btfss	status,2,c
 13277  0008A0  D79D               	goto	l1018
 13278  0008A2                     u17120:
 13279  0008A2  FFFF               	dw	65535	; assembler added errata NOP
 13280                           
 13281                           ; BSR set to: 0
 13282                           
 13283                           ; BSR set to: 0
 13284  0008A4  0100               	movlb	0	; () banked
 13285  0008A6  518E               	movf	__doprnt@f& (0+255),w,b
 13286  0008A8  6F92               	movwf	??__doprnt& (0+255),b
 13287  0008AA  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 13288  0008AC  6F93               	movwf	(??__doprnt+1)& (0+255),b
 13289  0008AE  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 13290  0008B0  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 13291  0008B2  C092  FFF6         	movff	??__doprnt,tblptrl
 13292  0008B6  C093  FFF7         	movff	??__doprnt+1,tblptrh
 13293  0008BA  6AF8               	clrf	tblptru,c
 13294  0008BC  0E05               	movlw	(high __ramtop+-1)
 13295  0008BE  64F7               	cpfsgt	tblptrh,c
 13296  0008C0  D004               	bra	u17137
 13297  0008C2  0008               	tblrd		*
 13298  0008C4  FFFF               	dw	65535	; errata NOP
 13299  0008C6  50F5               	movf	tablat,w,c
 13300  0008C8  D005               	bra	u17130
 13301  0008CA                     u17137:
 13302  0008CA  CFF6 FFE9          	movff	tblptrl,fsr0l
 13303  0008CE  CFF7 FFEA          	movff	tblptrh,fsr0h
 13304  0008D2  50EF               	movf	indf0,w,c
 13305  0008D4                     u17130:
 13306  0008D4  0100               	movlb	0	; () banked
 13307  0008D6  6FA0               	movwf	__doprnt@c& (0+255),b
 13308  0008D8  51A0               	movf	__doprnt@c& (0+255),w,b
 13309  0008DA  A4D8               	btfss	status,2,c
 13310  0008DC  D40B               	goto	l953
 13311  0008DE                     u17140:
 13312  0008DE  FFFF               	dw	65535	; assembler added errata NOP
 13313                           
 13314                           ;doprnt.c: 1540: return 0;
 13315                           
 13316                           ; BSR set to: 0
 13317                           
 13318                           ;doprnt.c: 1525: }
 13319                           ;doprnt.c: 1533: }
 13320                           ;doprnt.c: 1535: alldone:
 13321                           
 13322                           ; BSR set to: 0
 13323  0008E0  0E00               	movlw	0
 13324  0008E2  0100               	movlb	0	; () banked
 13325  0008E4  6F8D               	movwf	(?__doprnt+1)& (0+255),b
 13326  0008E6  0E00               	movlw	0
 13327  0008E8  6F8C               	movwf	?__doprnt& (0+255),b
 13328                           
 13329                           ; BSR set to: 0
 13330                           
 13331                           ; BSR set to: 0
 13332  0008EA  0012               	return		;funcret
 13333  0008EC  FFFF               	dw	65535	; errata NOP
 13334  0008EE                     __end_of__doprnt:
 13335                           	opt stack 0
 13336                           tosu	equ	0xFFF
 13337                           tosh	equ	0xFFE
 13338                           tosl	equ	0xFFD
 13339                           pclath	equ	0xFFA
 13340                           tblptru	equ	0xFF8
 13341                           tblptrh	equ	0xFF7
 13342                           tblptrl	equ	0xFF6
 13343                           tablat	equ	0xFF5
 13344                           prodh	equ	0xFF4
 13345                           prodl	equ	0xFF3
 13346                           intcon	equ	0xFF2
 13347                           indf0	equ	0xFEF
 13348                           postinc0	equ	0xFEE
 13349                           fsr0h	equ	0xFEA
 13350                           fsr0l	equ	0xFE9
 13351                           wreg	equ	0xFE8
 13352                           postdec1	equ	0xFE5
 13353                           fsr1l	equ	0xFE1
 13354                           indf2	equ	0xFDF
 13355                           postinc2	equ	0xFDE
 13356                           postdec2	equ	0xFDD
 13357                           fsr2h	equ	0xFDA
 13358                           fsr2l	equ	0xFD9
 13359                           status	equ	0xFD8
 13360                           
 13361 ;; *************** function _putch *****************
 13362 ;; Defined at:
 13363 ;;		line 14 in file "serial.h"
 13364 ;; Parameters:    Size  Location     Type
 13365 ;;  c               1    wreg     unsigned char 
 13366 ;; Auto vars:     Size  Location     Type
 13367 ;;  c               1    0[BANK0 ] unsigned char 
 13368 ;; Return value:  Size  Location     Type
 13369 ;;                  1    wreg      void 
 13370 ;; Registers used:
 13371 ;;		wreg
 13372 ;; Tracked objects:
 13373 ;;		On entry : 0/0
 13374 ;;		On exit  : 0/0
 13375 ;;		Unchanged: 0/0
 13376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13377 ;;      Params:         0       0       0       0       0       0       0
 13378 ;;      Locals:         0       1       0       0       0       0       0
 13379 ;;      Temps:          0       0       0       0       0       0       0
 13380 ;;      Totals:         0       1       0       0       0       0       0
 13381 ;;Total ram usage:        1 bytes
 13382 ;; Hardware stack levels used:    1
 13383 ;; Hardware stack levels required when called:    6
 13384 ;; This function calls:
 13385 ;;		Nothing
 13386 ;; This function is called by:
 13387 ;;		_printf
 13388 ;;		__doprnt
 13389 ;;		i2__doprnt
 13390 ;; This function uses a non-reentrant model
 13391 ;;
 13392                           
 13393                           	psect	text44
 13394  007126                     __ptext44:
 13395                           	opt stack 0
 13396  007126                     _putch:
 13397                           	opt stack 0
 13398  007126  FFFF               	dw	65535	; assembler added errata NOP
 13399                           
 13400                           ; BSR set to: 0
 13401                           ;Skip over the trampoline to the duplicate function for level 2
 13402  007128  B274               	btfsc	btemp,1,c
 13403  00712A  EF50  F038         	goto	i2_putch
 13404  00712E                     _putch$intlevel0:
 13405                           	opt stack 0
 13406  00712E  FFFF               	dw	65535	; assembler added errata NOP
 13407                           
 13408                           ;incstack = 0
 13409                           ;putch@c stored from wreg
 13410  007130  0100               	movlb	0	; () banked
 13411  007132  6F80               	movwf	putch@c& (0+255),b
 13412  007134  FFFF               	dw	65535	; assembler added errata NOP
 13413                           
 13414                           ;serial.h: 15: while (!TXSTAbits.TRMT);
 13415  007136  A2AC               	btfss	4012,1,c	;volatile
 13416  007138  D7FD               	goto	l4643
 13417                           
 13418                           ;serial.h: 16: TXREG = c;
 13419  00713A  C080  FFAD         	movff	putch@c,4013	;volatile
 13420  00713E  0012               	return		;funcret
 13421  007140  FFFF               	dw	65535	; errata NOP
 13422  007142                     __end_of_putch:
 13423                           	opt stack 0
 13424                           tosu	equ	0xFFF
 13425                           tosh	equ	0xFFE
 13426                           tosl	equ	0xFFD
 13427                           pclath	equ	0xFFA
 13428                           tblptru	equ	0xFF8
 13429                           tblptrh	equ	0xFF7
 13430                           tblptrl	equ	0xFF6
 13431                           tablat	equ	0xFF5
 13432                           prodh	equ	0xFF4
 13433                           prodl	equ	0xFF3
 13434                           intcon	equ	0xFF2
 13435                           indf0	equ	0xFEF
 13436                           postinc0	equ	0xFEE
 13437                           fsr0h	equ	0xFEA
 13438                           fsr0l	equ	0xFE9
 13439                           wreg	equ	0xFE8
 13440                           postdec1	equ	0xFE5
 13441                           fsr1l	equ	0xFE1
 13442                           indf2	equ	0xFDF
 13443                           postinc2	equ	0xFDE
 13444                           postdec2	equ	0xFDD
 13445                           fsr2h	equ	0xFDA
 13446                           fsr2l	equ	0xFD9
 13447                           status	equ	0xFD8
 13448                           
 13449 ;; *************** function _isdigit *****************
 13450 ;; Defined at:
 13451 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 13452 ;; Parameters:    Size  Location     Type
 13453 ;;  c               1    wreg     unsigned char 
 13454 ;; Auto vars:     Size  Location     Type
 13455 ;;  c               1    2[BANK0 ] unsigned char 
 13456 ;; Return value:  Size  Location     Type
 13457 ;;		None               void
 13458 ;; Registers used:
 13459 ;;		wreg, status,2, status,0
 13460 ;; Tracked objects:
 13461 ;;		On entry : 0/0
 13462 ;;		On exit  : 0/0
 13463 ;;		Unchanged: 0/0
 13464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13465 ;;      Params:         0       0       0       0       0       0       0
 13466 ;;      Locals:         0       2       0       0       0       0       0
 13467 ;;      Temps:          0       1       0       0       0       0       0
 13468 ;;      Totals:         0       3       0       0       0       0       0
 13469 ;;Total ram usage:        3 bytes
 13470 ;; Hardware stack levels used:    1
 13471 ;; Hardware stack levels required when called:    6
 13472 ;; This function calls:
 13473 ;;		Nothing
 13474 ;; This function is called by:
 13475 ;;		__doprnt
 13476 ;;		_atoi
 13477 ;; This function uses a non-reentrant model
 13478 ;;
 13479                           
 13480                           	psect	text45
 13481  0071FC                     __ptext45:
 13482                           	opt stack 0
 13483  0071FC                     _isdigit:
 13484                           	opt stack 0
 13485  0071FC  FFFF               	dw	65535	; assembler added errata NOP
 13486                           
 13487                           ;incstack = 0
 13488                           ;isdigit@c stored from wreg
 13489  0071FE  0100               	movlb	0	; () banked
 13490  007200  6F82               	movwf	isdigit@c& (0+255),b
 13491  007202  0E00               	movlw	0
 13492  007204  0100               	movlb	0	; () banked
 13493  007206  6F81               	movwf	_isdigit$1821& (0+255),b
 13494                           
 13495                           ; BSR set to: 0
 13496  007208  0E3A               	movlw	58
 13497  00720A  6182               	cpfslt	isdigit@c& (0+255),b
 13498  00720C  D005               	goto	l1368
 13499                           
 13500                           ; BSR set to: 0
 13501  00720E  0E2F               	movlw	47
 13502  007210  6582               	cpfsgt	isdigit@c& (0+255),b
 13503  007212  D002               	goto	l1368
 13504                           
 13505                           ; BSR set to: 0
 13506  007214  0E01               	movlw	1
 13507  007216  6F81               	movwf	_isdigit$1821& (0+255),b
 13508  007218                     l1368:
 13509  007218  FFFF               	dw	65535	; assembler added errata NOP
 13510                           
 13511                           ; BSR set to: 0
 13512                           
 13513                           ; BSR set to: 0
 13514  00721A  C081  F080         	movff	_isdigit$1821,??_isdigit
 13515  00721E  3180               	rrcf	??_isdigit& (0+255),w,b
 13516                           
 13517                           ; BSR set to: 0
 13518                           
 13519                           ; BSR set to: 0
 13520  007220  0012               	return		;funcret
 13521  007222  FFFF               	dw	65535	; errata NOP
 13522  007224                     __end_of_isdigit:
 13523                           	opt stack 0
 13524                           tosu	equ	0xFFF
 13525                           tosh	equ	0xFFE
 13526                           tosl	equ	0xFFD
 13527                           pclath	equ	0xFFA
 13528                           tblptru	equ	0xFF8
 13529                           tblptrh	equ	0xFF7
 13530                           tblptrl	equ	0xFF6
 13531                           tablat	equ	0xFF5
 13532                           prodh	equ	0xFF4
 13533                           prodl	equ	0xFF3
 13534                           intcon	equ	0xFF2
 13535                           indf0	equ	0xFEF
 13536                           postinc0	equ	0xFEE
 13537                           fsr0h	equ	0xFEA
 13538                           fsr0l	equ	0xFE9
 13539                           wreg	equ	0xFE8
 13540                           postdec1	equ	0xFE5
 13541                           fsr1l	equ	0xFE1
 13542                           indf2	equ	0xFDF
 13543                           postinc2	equ	0xFDE
 13544                           postdec2	equ	0xFDD
 13545                           fsr2h	equ	0xFDA
 13546                           fsr2l	equ	0xFD9
 13547                           status	equ	0xFD8
 13548                           
 13549 ;; *************** function ___wmul *****************
 13550 ;; Defined at:
 13551 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 13552 ;; Parameters:    Size  Location     Type
 13553 ;;  multiplier      2    0[BANK0 ] unsigned int 
 13554 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 13555 ;; Auto vars:     Size  Location     Type
 13556 ;;  product         2    4[BANK0 ] unsigned int 
 13557 ;; Return value:  Size  Location     Type
 13558 ;;                  2    0[BANK0 ] unsigned int 
 13559 ;; Registers used:
 13560 ;;		wreg, status,2, status,0, prodl, prodh
 13561 ;; Tracked objects:
 13562 ;;		On entry : 0/0
 13563 ;;		On exit  : 0/0
 13564 ;;		Unchanged: 0/0
 13565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13566 ;;      Params:         0       4       0       0       0       0       0
 13567 ;;      Locals:         0       2       0       0       0       0       0
 13568 ;;      Temps:          0       0       0       0       0       0       0
 13569 ;;      Totals:         0       6       0       0       0       0       0
 13570 ;;Total ram usage:        6 bytes
 13571 ;; Hardware stack levels used:    1
 13572 ;; Hardware stack levels required when called:    6
 13573 ;; This function calls:
 13574 ;;		Nothing
 13575 ;; This function is called by:
 13576 ;;		__doprnt
 13577 ;;		_atoi
 13578 ;; This function uses a non-reentrant model
 13579 ;;
 13580                           
 13581                           	psect	text46
 13582  0072A4                     __ptext46:
 13583                           	opt stack 0
 13584  0072A4                     ___wmul:
 13585                           	opt stack 0
 13586  0072A4  FFFF               	dw	65535	; assembler added errata NOP
 13587                           
 13588                           ; BSR set to: 0
 13589                           ;incstack = 0
 13590  0072A6  0100               	movlb	0	; () banked
 13591  0072A8  5180               	movf	___wmul@multiplier& (0+255),w,b
 13592  0072AA  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13593  0072AC  CFF3 F084          	movff	prodl,___wmul@product
 13594  0072B0  CFF4 F085          	movff	prodh,___wmul@product+1
 13595  0072B4  5180               	movf	___wmul@multiplier& (0+255),w,b
 13596  0072B6  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13597  0072B8  50F3               	movf	prodl,w,c
 13598  0072BA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13599  0072BC  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13600  0072BE  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13601  0072C0  50F3               	movf	prodl,w,c
 13602  0072C2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13603                           
 13604                           ; BSR set to: 0
 13605  0072C4  C084  F080         	movff	___wmul@product,?___wmul
 13606  0072C8  C085  F081         	movff	___wmul@product+1,?___wmul+1
 13607                           
 13608                           ; BSR set to: 0
 13609                           
 13610                           ; BSR set to: 0
 13611  0072CC  0012               	return		;funcret
 13612  0072CE  FFFF               	dw	65535	; errata NOP
 13613  0072D0                     __end_of___wmul:
 13614                           	opt stack 0
 13615                           tosu	equ	0xFFF
 13616                           tosh	equ	0xFFE
 13617                           tosl	equ	0xFFD
 13618                           pclath	equ	0xFFA
 13619                           tblptru	equ	0xFF8
 13620                           tblptrh	equ	0xFF7
 13621                           tblptrl	equ	0xFF6
 13622                           tablat	equ	0xFF5
 13623                           prodh	equ	0xFF4
 13624                           prodl	equ	0xFF3
 13625                           intcon	equ	0xFF2
 13626                           indf0	equ	0xFEF
 13627                           postinc0	equ	0xFEE
 13628                           fsr0h	equ	0xFEA
 13629                           fsr0l	equ	0xFE9
 13630                           wreg	equ	0xFE8
 13631                           postdec1	equ	0xFE5
 13632                           fsr1l	equ	0xFE1
 13633                           indf2	equ	0xFDF
 13634                           postinc2	equ	0xFDE
 13635                           postdec2	equ	0xFDD
 13636                           fsr2h	equ	0xFDA
 13637                           fsr2l	equ	0xFD9
 13638                           status	equ	0xFD8
 13639                           
 13640 ;; *************** function ___lwmod *****************
 13641 ;; Defined at:
 13642 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 13643 ;; Parameters:    Size  Location     Type
 13644 ;;  dividend        2    7[BANK0 ] unsigned int 
 13645 ;;  divisor         2    9[BANK0 ] unsigned int 
 13646 ;; Auto vars:     Size  Location     Type
 13647 ;;  counter         1   11[BANK0 ] unsigned char 
 13648 ;; Return value:  Size  Location     Type
 13649 ;;                  2    7[BANK0 ] unsigned int 
 13650 ;; Registers used:
 13651 ;;		wreg, status,2, status,0
 13652 ;; Tracked objects:
 13653 ;;		On entry : 0/0
 13654 ;;		On exit  : 0/0
 13655 ;;		Unchanged: 0/0
 13656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13657 ;;      Params:         0       4       0       0       0       0       0
 13658 ;;      Locals:         0       1       0       0       0       0       0
 13659 ;;      Temps:          0       0       0       0       0       0       0
 13660 ;;      Totals:         0       5       0       0       0       0       0
 13661 ;;Total ram usage:        5 bytes
 13662 ;; Hardware stack levels used:    1
 13663 ;; Hardware stack levels required when called:    6
 13664 ;; This function calls:
 13665 ;;		Nothing
 13666 ;; This function is called by:
 13667 ;;		__doprnt
 13668 ;; This function uses a non-reentrant model
 13669 ;;
 13670                           
 13671                           	psect	text47
 13672  0078D6                     __ptext47:
 13673                           	opt stack 0
 13674  0078D6                     ___lwmod:
 13675                           	opt stack 0
 13676  0078D6  FFFF               	dw	65535	; assembler added errata NOP
 13677                           
 13678                           ; BSR set to: 0
 13679                           ;incstack = 0
 13680  0078D8  0100               	movlb	0	; () banked
 13681  0078DA  5189               	movf	___lwmod@divisor& (0+255),w,b
 13682  0078DC  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13683  0078DE  B4D8               	btfsc	status,2,c
 13684  0078E0  D01C               	goto	l1462
 13685                           
 13686                           ; BSR set to: 0
 13687  0078E2  0E01               	movlw	1
 13688  0078E4  6F8B               	movwf	___lwmod@counter& (0+255),b
 13689  0078E6  D005               	goto	l1457
 13690  0078E8  FFFF               	dw	65535	; assembler added errata NOP
 13691                           
 13692                           ; BSR set to: 0
 13693                           
 13694                           ; BSR set to: 0
 13695  0078EA  90D8               	bcf	status,0,c
 13696  0078EC  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 13697  0078EE  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 13698  0078F0  2B8B               	incf	___lwmod@counter& (0+255),f,b
 13699  0078F2                     l1457:
 13700  0078F2  FFFF               	dw	65535	; assembler added errata NOP
 13701                           
 13702                           ; BSR set to: 0
 13703                           
 13704                           ; BSR set to: 0
 13705  0078F4  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 13706  0078F6  D7F8               	goto	l1458
 13707  0078F8                     u4690:
 13708  0078F8  FFFF               	dw	65535	; assembler added errata NOP
 13709                           
 13710                           ; BSR set to: 0
 13711                           
 13712                           ; BSR set to: 0
 13713                           
 13714                           ; BSR set to: 0
 13715  0078FA  5189               	movf	___lwmod@divisor& (0+255),w,b
 13716  0078FC  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 13717  0078FE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13718  007900  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 13719  007902  A0D8               	btfss	status,0,c
 13720  007904  D004               	goto	l1461
 13721                           
 13722                           ; BSR set to: 0
 13723  007906  5189               	movf	___lwmod@divisor& (0+255),w,b
 13724  007908  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 13725  00790A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13726  00790C  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 13727  00790E                     l1461:
 13728  00790E  FFFF               	dw	65535	; assembler added errata NOP
 13729                           
 13730                           ; BSR set to: 0
 13731                           
 13732                           ; BSR set to: 0
 13733  007910  90D8               	bcf	status,0,c
 13734  007912  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 13735  007914  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 13736                           
 13737                           ; BSR set to: 0
 13738  007916  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 13739  007918  D7EF               	goto	u4690
 13740  00791A                     l1462:
 13741  00791A  FFFF               	dw	65535	; assembler added errata NOP
 13742                           
 13743                           ; BSR set to: 0
 13744                           
 13745                           ; BSR set to: 0
 13746  00791C  C087  F087         	movff	___lwmod@dividend,?___lwmod
 13747  007920  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 13748                           
 13749                           ; BSR set to: 0
 13750  007924  0012               	return		;funcret
 13751  007926  FFFF               	dw	65535	; errata NOP
 13752  007928                     __end_of___lwmod:
 13753                           	opt stack 0
 13754                           tosu	equ	0xFFF
 13755                           tosh	equ	0xFFE
 13756                           tosl	equ	0xFFD
 13757                           pclath	equ	0xFFA
 13758                           tblptru	equ	0xFF8
 13759                           tblptrh	equ	0xFF7
 13760                           tblptrl	equ	0xFF6
 13761                           tablat	equ	0xFF5
 13762                           prodh	equ	0xFF4
 13763                           prodl	equ	0xFF3
 13764                           intcon	equ	0xFF2
 13765                           indf0	equ	0xFEF
 13766                           postinc0	equ	0xFEE
 13767                           fsr0h	equ	0xFEA
 13768                           fsr0l	equ	0xFE9
 13769                           wreg	equ	0xFE8
 13770                           postdec1	equ	0xFE5
 13771                           fsr1l	equ	0xFE1
 13772                           indf2	equ	0xFDF
 13773                           postinc2	equ	0xFDE
 13774                           postdec2	equ	0xFDD
 13775                           fsr2h	equ	0xFDA
 13776                           fsr2l	equ	0xFD9
 13777                           status	equ	0xFD8
 13778                           
 13779 ;; *************** function ___lwdiv *****************
 13780 ;; Defined at:
 13781 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 13782 ;; Parameters:    Size  Location     Type
 13783 ;;  dividend        2    0[BANK0 ] unsigned int 
 13784 ;;  divisor         2    2[BANK0 ] unsigned int 
 13785 ;; Auto vars:     Size  Location     Type
 13786 ;;  quotient        2    4[BANK0 ] unsigned int 
 13787 ;;  counter         1    6[BANK0 ] unsigned char 
 13788 ;; Return value:  Size  Location     Type
 13789 ;;                  2    0[BANK0 ] unsigned int 
 13790 ;; Registers used:
 13791 ;;		wreg, status,2, status,0
 13792 ;; Tracked objects:
 13793 ;;		On entry : 0/0
 13794 ;;		On exit  : 0/0
 13795 ;;		Unchanged: 0/0
 13796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13797 ;;      Params:         0       4       0       0       0       0       0
 13798 ;;      Locals:         0       3       0       0       0       0       0
 13799 ;;      Temps:          0       0       0       0       0       0       0
 13800 ;;      Totals:         0       7       0       0       0       0       0
 13801 ;;Total ram usage:        7 bytes
 13802 ;; Hardware stack levels used:    1
 13803 ;; Hardware stack levels required when called:    6
 13804 ;; This function calls:
 13805 ;;		Nothing
 13806 ;; This function is called by:
 13807 ;;		__doprnt
 13808 ;; This function uses a non-reentrant model
 13809 ;;
 13810                           
 13811                           	psect	text48
 13812  007AF2                     __ptext48:
 13813                           	opt stack 0
 13814  007AF2                     ___lwdiv:
 13815                           	opt stack 0
 13816  007AF2  FFFF               	dw	65535	; assembler added errata NOP
 13817                           
 13818                           ; BSR set to: 0
 13819                           ;incstack = 0
 13820  007AF4  0E00               	movlw	0
 13821  007AF6  0100               	movlb	0	; () banked
 13822  007AF8  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 13823  007AFA  0E00               	movlw	0
 13824  007AFC  6F84               	movwf	___lwdiv@quotient& (0+255),b
 13825                           
 13826                           ; BSR set to: 0
 13827  007AFE  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13828  007B00  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 13829  007B02  B4D8               	btfsc	status,2,c
 13830  007B04  D020               	goto	l1452
 13831                           
 13832                           ; BSR set to: 0
 13833  007B06  0E01               	movlw	1
 13834  007B08  6F86               	movwf	___lwdiv@counter& (0+255),b
 13835  007B0A  D005               	goto	l1447
 13836  007B0C  FFFF               	dw	65535	; assembler added errata NOP
 13837                           
 13838                           ; BSR set to: 0
 13839                           
 13840                           ; BSR set to: 0
 13841  007B0E  90D8               	bcf	status,0,c
 13842  007B10  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 13843  007B12  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 13844  007B14  2B86               	incf	___lwdiv@counter& (0+255),f,b
 13845  007B16                     l1447:
 13846  007B16  FFFF               	dw	65535	; assembler added errata NOP
 13847                           
 13848                           ; BSR set to: 0
 13849                           
 13850                           ; BSR set to: 0
 13851  007B18  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 13852  007B1A  D7F8               	goto	l1448
 13853  007B1C                     u4660:
 13854  007B1C  FFFF               	dw	65535	; assembler added errata NOP
 13855                           
 13856                           ; BSR set to: 0
 13857                           
 13858                           ; BSR set to: 0
 13859                           
 13860                           ; BSR set to: 0
 13861  007B1E  90D8               	bcf	status,0,c
 13862  007B20  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 13863  007B22  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 13864                           
 13865                           ; BSR set to: 0
 13866  007B24  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13867  007B26  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 13868  007B28  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13869  007B2A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 13870  007B2C  A0D8               	btfss	status,0,c
 13871  007B2E  D005               	goto	l1451
 13872                           
 13873                           ; BSR set to: 0
 13874  007B30  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13875  007B32  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 13876  007B34  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13877  007B36  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 13878                           
 13879                           ; BSR set to: 0
 13880  007B38  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 13881  007B3A                     l1451:
 13882  007B3A  FFFF               	dw	65535	; assembler added errata NOP
 13883                           
 13884                           ; BSR set to: 0
 13885                           
 13886                           ; BSR set to: 0
 13887  007B3C  90D8               	bcf	status,0,c
 13888  007B3E  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 13889  007B40  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 13890                           
 13891                           ; BSR set to: 0
 13892  007B42  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 13893  007B44  D7EB               	goto	u4660
 13894  007B46                     l1452:
 13895  007B46  FFFF               	dw	65535	; assembler added errata NOP
 13896                           
 13897                           ; BSR set to: 0
 13898                           
 13899                           ; BSR set to: 0
 13900  007B48  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 13901  007B4C  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13902                           
 13903                           ; BSR set to: 0
 13904  007B50  0012               	return		;funcret
 13905  007B52  FFFF               	dw	65535	; errata NOP
 13906  007B54                     __end_of___lwdiv:
 13907                           	opt stack 0
 13908                           tosu	equ	0xFFF
 13909                           tosh	equ	0xFFE
 13910                           tosl	equ	0xFFD
 13911                           pclath	equ	0xFFA
 13912                           tblptru	equ	0xFF8
 13913                           tblptrh	equ	0xFF7
 13914                           tblptrl	equ	0xFF6
 13915                           tablat	equ	0xFF5
 13916                           prodh	equ	0xFF4
 13917                           prodl	equ	0xFF3
 13918                           intcon	equ	0xFF2
 13919                           indf0	equ	0xFEF
 13920                           postinc0	equ	0xFEE
 13921                           fsr0h	equ	0xFEA
 13922                           fsr0l	equ	0xFE9
 13923                           wreg	equ	0xFE8
 13924                           postdec1	equ	0xFE5
 13925                           fsr1l	equ	0xFE1
 13926                           indf2	equ	0xFDF
 13927                           postinc2	equ	0xFDE
 13928                           postdec2	equ	0xFDD
 13929                           fsr2h	equ	0xFDA
 13930                           fsr2l	equ	0xFD9
 13931                           status	equ	0xFD8
 13932                           
 13933 ;; *************** function ___awmod *****************
 13934 ;; Defined at:
 13935 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 13936 ;; Parameters:    Size  Location     Type
 13937 ;;  dividend        2    0[BANK0 ] int 
 13938 ;;  divisor         2    2[BANK0 ] int 
 13939 ;; Auto vars:     Size  Location     Type
 13940 ;;  sign            1    5[BANK0 ] unsigned char 
 13941 ;;  counter         1    4[BANK0 ] unsigned char 
 13942 ;; Return value:  Size  Location     Type
 13943 ;;                  2    0[BANK0 ] int 
 13944 ;; Registers used:
 13945 ;;		wreg, status,2, status,0
 13946 ;; Tracked objects:
 13947 ;;		On entry : 0/0
 13948 ;;		On exit  : 0/0
 13949 ;;		Unchanged: 0/0
 13950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13951 ;;      Params:         0       4       0       0       0       0       0
 13952 ;;      Locals:         0       2       0       0       0       0       0
 13953 ;;      Temps:          0       0       0       0       0       0       0
 13954 ;;      Totals:         0       6       0       0       0       0       0
 13955 ;;Total ram usage:        6 bytes
 13956 ;; Hardware stack levels used:    1
 13957 ;; Hardware stack levels required when called:    6
 13958 ;; This function calls:
 13959 ;;		Nothing
 13960 ;; This function is called by:
 13961 ;;		_DECtoBCD
 13962 ;;		_intToFloatStr
 13963 ;;		_DECtoHEX
 13964 ;; This function uses a non-reentrant model
 13965 ;;
 13966                           
 13967                           	psect	text49
 13968  003D94                     __ptext49:
 13969                           	opt stack 0
 13970  003D94                     ___awmod:
 13971                           	opt stack 0
 13972  003D94  FFFF               	dw	65535	; assembler added errata NOP
 13973                           
 13974                           ; BSR set to: 0
 13975                           ;incstack = 0
 13976  003D96  0E00               	movlw	0
 13977  003D98  0100               	movlb	0	; () banked
 13978  003D9A  6F85               	movwf	___awmod@sign& (0+255),b
 13979                           
 13980                           ; BSR set to: 0
 13981  003D9C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 13982  003D9E  D006               	goto	l1219
 13983                           
 13984                           ; BSR set to: 0
 13985  003DA0  6D80               	negf	___awmod@dividend& (0+255),b
 13986  003DA2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 13987  003DA4  B0D8               	btfsc	status,0,c
 13988  003DA6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 13989                           
 13990                           ; BSR set to: 0
 13991  003DA8  0E01               	movlw	1
 13992  003DAA  6F85               	movwf	___awmod@sign& (0+255),b
 13993  003DAC                     l1219:
 13994  003DAC  FFFF               	dw	65535	; assembler added errata NOP
 13995                           
 13996                           ; BSR set to: 0
 13997                           
 13998                           ; BSR set to: 0
 13999  003DAE  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 14000  003DB0  D004               	goto	l1220
 14001                           
 14002                           ; BSR set to: 0
 14003  003DB2  6D82               	negf	___awmod@divisor& (0+255),b
 14004  003DB4  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 14005  003DB6  B0D8               	btfsc	status,0,c
 14006  003DB8  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 14007  003DBA                     l1220:
 14008  003DBA  FFFF               	dw	65535	; assembler added errata NOP
 14009                           
 14010                           ; BSR set to: 0
 14011                           
 14012                           ; BSR set to: 0
 14013  003DBC  5182               	movf	___awmod@divisor& (0+255),w,b
 14014  003DBE  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 14015  003DC0  B4D8               	btfsc	status,2,c
 14016  003DC2  D01C               	goto	l1227
 14017                           
 14018                           ; BSR set to: 0
 14019  003DC4  0E01               	movlw	1
 14020  003DC6  6F84               	movwf	___awmod@counter& (0+255),b
 14021  003DC8  D005               	goto	l1222
 14022  003DCA  FFFF               	dw	65535	; assembler added errata NOP
 14023                           
 14024                           ; BSR set to: 0
 14025                           
 14026                           ; BSR set to: 0
 14027  003DCC  90D8               	bcf	status,0,c
 14028  003DCE  3782               	rlcf	___awmod@divisor& (0+255),f,b
 14029  003DD0  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 14030  003DD2  2B84               	incf	___awmod@counter& (0+255),f,b
 14031  003DD4                     l1222:
 14032  003DD4  FFFF               	dw	65535	; assembler added errata NOP
 14033                           
 14034                           ; BSR set to: 0
 14035                           
 14036                           ; BSR set to: 0
 14037  003DD6  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 14038  003DD8  D7F8               	goto	l1223
 14039  003DDA                     u5400:
 14040  003DDA  FFFF               	dw	65535	; assembler added errata NOP
 14041                           
 14042                           ; BSR set to: 0
 14043                           
 14044                           ; BSR set to: 0
 14045                           
 14046                           ; BSR set to: 0
 14047  003DDC  5182               	movf	___awmod@divisor& (0+255),w,b
 14048  003DDE  5D80               	subwf	___awmod@dividend& (0+255),w,b
 14049  003DE0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 14050  003DE2  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 14051  003DE4  A0D8               	btfss	status,0,c
 14052  003DE6  D004               	goto	l1226
 14053                           
 14054                           ; BSR set to: 0
 14055  003DE8  5182               	movf	___awmod@divisor& (0+255),w,b
 14056  003DEA  5F80               	subwf	___awmod@dividend& (0+255),f,b
 14057  003DEC  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 14058  003DEE  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 14059  003DF0                     l1226:
 14060  003DF0  FFFF               	dw	65535	; assembler added errata NOP
 14061                           
 14062                           ; BSR set to: 0
 14063                           
 14064                           ; BSR set to: 0
 14065  003DF2  90D8               	bcf	status,0,c
 14066  003DF4  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 14067  003DF6  3382               	rrcf	___awmod@divisor& (0+255),f,b
 14068                           
 14069                           ; BSR set to: 0
 14070  003DF8  2F84               	decfsz	___awmod@counter& (0+255),f,b
 14071  003DFA  D7EF               	goto	u5400
 14072  003DFC                     l1227:
 14073  003DFC  FFFF               	dw	65535	; assembler added errata NOP
 14074                           
 14075                           ; BSR set to: 0
 14076                           
 14077                           ; BSR set to: 0
 14078                           
 14079                           ; BSR set to: 0
 14080  003DFE  5185               	movf	___awmod@sign& (0+255),w,b
 14081  003E00  B4D8               	btfsc	status,2,c
 14082  003E02  D004               	goto	l1228
 14083                           
 14084                           ; BSR set to: 0
 14085  003E04  6D80               	negf	___awmod@dividend& (0+255),b
 14086  003E06  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 14087  003E08  B0D8               	btfsc	status,0,c
 14088  003E0A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 14089  003E0C                     l1228:
 14090  003E0C  FFFF               	dw	65535	; assembler added errata NOP
 14091                           
 14092                           ; BSR set to: 0
 14093                           
 14094                           ; BSR set to: 0
 14095  003E0E  C080  F080         	movff	___awmod@dividend,?___awmod
 14096  003E12  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 14097                           
 14098                           ; BSR set to: 0
 14099                           
 14100                           ; BSR set to: 0
 14101  003E16  0012               	return		;funcret
 14102  003E18  FFFF               	dw	65535	; errata NOP
 14103  003E1A                     __end_of___awmod:
 14104                           	opt stack 0
 14105                           tosu	equ	0xFFF
 14106                           tosh	equ	0xFFE
 14107                           tosl	equ	0xFFD
 14108                           pclath	equ	0xFFA
 14109                           tblptru	equ	0xFF8
 14110                           tblptrh	equ	0xFF7
 14111                           tblptrl	equ	0xFF6
 14112                           tablat	equ	0xFF5
 14113                           prodh	equ	0xFF4
 14114                           prodl	equ	0xFF3
 14115                           intcon	equ	0xFF2
 14116                           indf0	equ	0xFEF
 14117                           postinc0	equ	0xFEE
 14118                           fsr0h	equ	0xFEA
 14119                           fsr0l	equ	0xFE9
 14120                           wreg	equ	0xFE8
 14121                           postdec1	equ	0xFE5
 14122                           fsr1l	equ	0xFE1
 14123                           indf2	equ	0xFDF
 14124                           postinc2	equ	0xFDE
 14125                           postdec2	equ	0xFDD
 14126                           fsr2h	equ	0xFDA
 14127                           fsr2l	equ	0xFD9
 14128                           status	equ	0xFD8
 14129                           
 14130 ;; *************** function ___awdiv *****************
 14131 ;; Defined at:
 14132 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 14133 ;; Parameters:    Size  Location     Type
 14134 ;;  dividend        2    0[BANK0 ] int 
 14135 ;;  divisor         2    2[BANK0 ] int 
 14136 ;; Auto vars:     Size  Location     Type
 14137 ;;  quotient        2    6[BANK0 ] int 
 14138 ;;  sign            1    5[BANK0 ] unsigned char 
 14139 ;;  counter         1    4[BANK0 ] unsigned char 
 14140 ;; Return value:  Size  Location     Type
 14141 ;;                  2    0[BANK0 ] int 
 14142 ;; Registers used:
 14143 ;;		wreg, status,2, status,0
 14144 ;; Tracked objects:
 14145 ;;		On entry : 0/0
 14146 ;;		On exit  : 0/0
 14147 ;;		Unchanged: 0/0
 14148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14149 ;;      Params:         0       4       0       0       0       0       0
 14150 ;;      Locals:         0       4       0       0       0       0       0
 14151 ;;      Temps:          0       0       0       0       0       0       0
 14152 ;;      Totals:         0       8       0       0       0       0       0
 14153 ;;Total ram usage:        8 bytes
 14154 ;; Hardware stack levels used:    1
 14155 ;; Hardware stack levels required when called:    6
 14156 ;; This function calls:
 14157 ;;		Nothing
 14158 ;; This function is called by:
 14159 ;;		_DECtoBCD
 14160 ;;		_intToFloatStr
 14161 ;;		_DECtoHEX
 14162 ;; This function uses a non-reentrant model
 14163 ;;
 14164                           
 14165                           	psect	text50
 14166  003B48                     __ptext50:
 14167                           	opt stack 0
 14168  003B48                     ___awdiv:
 14169                           	opt stack 0
 14170  003B48  FFFF               	dw	65535	; assembler added errata NOP
 14171                           
 14172                           ; BSR set to: 0
 14173                           ;incstack = 0
 14174  003B4A  0E00               	movlw	0
 14175  003B4C  0100               	movlb	0	; () banked
 14176  003B4E  6F85               	movwf	___awdiv@sign& (0+255),b
 14177                           
 14178                           ; BSR set to: 0
 14179  003B50  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 14180  003B52  D006               	goto	l1206
 14181                           
 14182                           ; BSR set to: 0
 14183  003B54  6D82               	negf	___awdiv@divisor& (0+255),b
 14184  003B56  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
 14185  003B58  B0D8               	btfsc	status,0,c
 14186  003B5A  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
 14187                           
 14188                           ; BSR set to: 0
 14189  003B5C  0E01               	movlw	1
 14190  003B5E  6F85               	movwf	___awdiv@sign& (0+255),b
 14191  003B60                     l1206:
 14192  003B60  FFFF               	dw	65535	; assembler added errata NOP
 14193                           
 14194                           ; BSR set to: 0
 14195                           
 14196                           ; BSR set to: 0
 14197  003B62  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 14198  003B64  D006               	goto	l1207
 14199                           
 14200                           ; BSR set to: 0
 14201  003B66  6D80               	negf	___awdiv@dividend& (0+255),b
 14202  003B68  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
 14203  003B6A  B0D8               	btfsc	status,0,c
 14204  003B6C  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
 14205                           
 14206                           ; BSR set to: 0
 14207  003B6E  0E01               	movlw	1
 14208  003B70  1B85               	xorwf	___awdiv@sign& (0+255),f,b
 14209  003B72                     l1207:
 14210  003B72  FFFF               	dw	65535	; assembler added errata NOP
 14211                           
 14212                           ; BSR set to: 0
 14213                           
 14214                           ; BSR set to: 0
 14215  003B74  0E00               	movlw	0
 14216  003B76  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
 14217  003B78  0E00               	movlw	0
 14218  003B7A  6F86               	movwf	___awdiv@quotient& (0+255),b
 14219                           
 14220                           ; BSR set to: 0
 14221  003B7C  5182               	movf	___awdiv@divisor& (0+255),w,b
 14222  003B7E  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 14223  003B80  B4D8               	btfsc	status,2,c
 14224  003B82  D020               	goto	l1214
 14225                           
 14226                           ; BSR set to: 0
 14227  003B84  0E01               	movlw	1
 14228  003B86  6F84               	movwf	___awdiv@counter& (0+255),b
 14229  003B88  D005               	goto	l1209
 14230  003B8A  FFFF               	dw	65535	; assembler added errata NOP
 14231                           
 14232                           ; BSR set to: 0
 14233                           
 14234                           ; BSR set to: 0
 14235  003B8C  90D8               	bcf	status,0,c
 14236  003B8E  3782               	rlcf	___awdiv@divisor& (0+255),f,b
 14237  003B90  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 14238  003B92  2B84               	incf	___awdiv@counter& (0+255),f,b
 14239  003B94                     l1209:
 14240  003B94  FFFF               	dw	65535	; assembler added errata NOP
 14241                           
 14242                           ; BSR set to: 0
 14243                           
 14244                           ; BSR set to: 0
 14245  003B96  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 14246  003B98  D7F8               	goto	l1210
 14247  003B9A                     u5340:
 14248  003B9A  FFFF               	dw	65535	; assembler added errata NOP
 14249                           
 14250                           ; BSR set to: 0
 14251                           
 14252                           ; BSR set to: 0
 14253                           
 14254                           ; BSR set to: 0
 14255  003B9C  90D8               	bcf	status,0,c
 14256  003B9E  3786               	rlcf	___awdiv@quotient& (0+255),f,b
 14257  003BA0  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 14258                           
 14259                           ; BSR set to: 0
 14260  003BA2  5182               	movf	___awdiv@divisor& (0+255),w,b
 14261  003BA4  5D80               	subwf	___awdiv@dividend& (0+255),w,b
 14262  003BA6  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 14263  003BA8  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 14264  003BAA  A0D8               	btfss	status,0,c
 14265  003BAC  D005               	goto	l1213
 14266                           
 14267                           ; BSR set to: 0
 14268  003BAE  5182               	movf	___awdiv@divisor& (0+255),w,b
 14269  003BB0  5F80               	subwf	___awdiv@dividend& (0+255),f,b
 14270  003BB2  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 14271  003BB4  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 14272                           
 14273                           ; BSR set to: 0
 14274  003BB6  8186               	bsf	___awdiv@quotient& (0+255),0,b
 14275  003BB8                     l1213:
 14276  003BB8  FFFF               	dw	65535	; assembler added errata NOP
 14277                           
 14278                           ; BSR set to: 0
 14279                           
 14280                           ; BSR set to: 0
 14281  003BBA  90D8               	bcf	status,0,c
 14282  003BBC  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 14283  003BBE  3382               	rrcf	___awdiv@divisor& (0+255),f,b
 14284                           
 14285                           ; BSR set to: 0
 14286  003BC0  2F84               	decfsz	___awdiv@counter& (0+255),f,b
 14287  003BC2  D7EB               	goto	u5340
 14288  003BC4                     l1214:
 14289  003BC4  FFFF               	dw	65535	; assembler added errata NOP
 14290                           
 14291                           ; BSR set to: 0
 14292                           
 14293                           ; BSR set to: 0
 14294                           
 14295                           ; BSR set to: 0
 14296  003BC6  5185               	movf	___awdiv@sign& (0+255),w,b
 14297  003BC8  B4D8               	btfsc	status,2,c
 14298  003BCA  D004               	goto	l1215
 14299                           
 14300                           ; BSR set to: 0
 14301  003BCC  6D86               	negf	___awdiv@quotient& (0+255),b
 14302  003BCE  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
 14303  003BD0  B0D8               	btfsc	status,0,c
 14304  003BD2  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
 14305  003BD4                     l1215:
 14306  003BD4  FFFF               	dw	65535	; assembler added errata NOP
 14307                           
 14308                           ; BSR set to: 0
 14309                           
 14310                           ; BSR set to: 0
 14311  003BD6  C086  F080         	movff	___awdiv@quotient,?___awdiv
 14312  003BDA  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
 14313                           
 14314                           ; BSR set to: 0
 14315                           
 14316                           ; BSR set to: 0
 14317  003BDE  0012               	return		;funcret
 14318  003BE0  FFFF               	dw	65535	; errata NOP
 14319  003BE2                     __end_of___awdiv:
 14320                           	opt stack 0
 14321                           tosu	equ	0xFFF
 14322                           tosh	equ	0xFFE
 14323                           tosl	equ	0xFFD
 14324                           pclath	equ	0xFFA
 14325                           tblptru	equ	0xFF8
 14326                           tblptrh	equ	0xFF7
 14327                           tblptrl	equ	0xFF6
 14328                           tablat	equ	0xFF5
 14329                           prodh	equ	0xFF4
 14330                           prodl	equ	0xFF3
 14331                           intcon	equ	0xFF2
 14332                           indf0	equ	0xFEF
 14333                           postinc0	equ	0xFEE
 14334                           fsr0h	equ	0xFEA
 14335                           fsr0l	equ	0xFE9
 14336                           wreg	equ	0xFE8
 14337                           postdec1	equ	0xFE5
 14338                           fsr1l	equ	0xFE1
 14339                           indf2	equ	0xFDF
 14340                           postinc2	equ	0xFDE
 14341                           postdec2	equ	0xFDD
 14342                           fsr2h	equ	0xFDA
 14343                           fsr2l	equ	0xFD9
 14344                           status	equ	0xFD8
 14345                           
 14346 ;; *************** function _clearShiftREG *****************
 14347 ;; Defined at:
 14348 ;;		line 30 in file "shift595.h"
 14349 ;; Parameters:    Size  Location     Type
 14350 ;;		None
 14351 ;; Auto vars:     Size  Location     Type
 14352 ;;  i               1    0[BANK0 ] unsigned char 
 14353 ;; Return value:  Size  Location     Type
 14354 ;;                  1    wreg      void 
 14355 ;; Registers used:
 14356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14357 ;; Tracked objects:
 14358 ;;		On entry : 0/0
 14359 ;;		On exit  : 0/0
 14360 ;;		Unchanged: 0/0
 14361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14362 ;;      Params:         0       0       0       0       0       0       0
 14363 ;;      Locals:         0       1       0       0       0       0       0
 14364 ;;      Temps:          0       0       0       0       0       0       0
 14365 ;;      Totals:         0       1       0       0       0       0       0
 14366 ;;Total ram usage:        1 bytes
 14367 ;; Hardware stack levels used:    1
 14368 ;; Hardware stack levels required when called:    6
 14369 ;; This function calls:
 14370 ;;		Nothing
 14371 ;; This function is called by:
 14372 ;;		_acaoTesteBombas
 14373 ;;		_telaPrincipal
 14374 ;; This function uses a non-reentrant model
 14375 ;;
 14376                           
 14377                           	psect	text51
 14378  0073D0                     __ptext51:
 14379                           	opt stack 0
 14380  0073D0                     _clearShiftREG:
 14381                           	opt stack 0
 14382  0073D0  FFFF               	dw	65535	; assembler added errata NOP
 14383                           
 14384                           ;shift595.h: 31: char i = 0;
 14385                           
 14386                           ; BSR set to: 0
 14387                           ;incstack = 0
 14388  0073D2  0E00               	movlw	0
 14389  0073D4  0100               	movlb	0	; () banked
 14390  0073D6  6F80               	movwf	clearShiftREG@i& (0+255),b
 14391                           
 14392                           ;shift595.h: 32: for (i = 0; i < 8; i++) {
 14393  0073D8  0E00               	movlw	0
 14394  0073DA  6F80               	movwf	clearShiftREG@i& (0+255),b
 14395  0073DC                     l5203:
 14396  0073DC  FFFF               	dw	65535	; assembler added errata NOP
 14397                           
 14398                           ; BSR set to: 0
 14399  0073DE  0E07               	movlw	7
 14400  0073E0  6580               	cpfsgt	clearShiftREG@i& (0+255),b
 14401  0073E2  D001               	goto	l371
 14402  0073E4  D00D               	goto	u5630
 14403  0073E6                     l371:
 14404  0073E6  FFFF               	dw	65535	; assembler added errata NOP
 14405                           
 14406                           ; BSR set to: 0
 14407                           ;shift595.h: 33: shift[i] = 0;
 14408                           
 14409                           ; BSR set to: 0
 14410  0073E8  5180               	movf	clearShiftREG@i& (0+255),w,b
 14411  0073EA  0D01               	mullw	1
 14412  0073EC  0E44               	movlw	low _shift
 14413  0073EE  24F3               	addwf	prodl,w,c
 14414  0073F0  6ED9               	movwf	fsr2l,c
 14415  0073F2  0E00               	movlw	high _shift
 14416  0073F4  20F4               	addwfc	prodh,w,c
 14417  0073F6  6EDA               	movwf	fsr2h,c
 14418  0073F8  0E00               	movlw	0
 14419  0073FA  6EDF               	movwf	indf2,c
 14420                           
 14421                           ; BSR set to: 0
 14422  0073FC  2B80               	incf	clearShiftREG@i& (0+255),f,b
 14423  0073FE  D7EE               	goto	l5203
 14424  007400                     u5630:
 14425  007400  FFFF               	dw	65535	; assembler added errata NOP
 14426                           
 14427                           ; BSR set to: 0
 14428                           
 14429                           ; BSR set to: 0
 14430  007402  0012               	return		;funcret
 14431  007404  FFFF               	dw	65535	; errata NOP
 14432  007406                     __end_of_clearShiftREG:
 14433                           	opt stack 0
 14434                           tosu	equ	0xFFF
 14435                           tosh	equ	0xFFE
 14436                           tosl	equ	0xFFD
 14437                           pclath	equ	0xFFA
 14438                           tblptru	equ	0xFF8
 14439                           tblptrh	equ	0xFF7
 14440                           tblptrl	equ	0xFF6
 14441                           tablat	equ	0xFF5
 14442                           prodh	equ	0xFF4
 14443                           prodl	equ	0xFF3
 14444                           intcon	equ	0xFF2
 14445                           indf0	equ	0xFEF
 14446                           postinc0	equ	0xFEE
 14447                           fsr0h	equ	0xFEA
 14448                           fsr0l	equ	0xFE9
 14449                           wreg	equ	0xFE8
 14450                           postdec1	equ	0xFE5
 14451                           fsr1l	equ	0xFE1
 14452                           indf2	equ	0xFDF
 14453                           postinc2	equ	0xFDE
 14454                           postdec2	equ	0xFDD
 14455                           fsr2h	equ	0xFDA
 14456                           fsr2l	equ	0xFD9
 14457                           status	equ	0xFD8
 14458                           
 14459 ;; *************** function _btPress *****************
 14460 ;; Defined at:
 14461 ;;		line 59 in file "teclado.h"
 14462 ;; Parameters:    Size  Location     Type
 14463 ;;  bt              1    wreg     unsigned char 
 14464 ;; Auto vars:     Size  Location     Type
 14465 ;;  bt              1    0[BANK0 ] unsigned char 
 14466 ;; Return value:  Size  Location     Type
 14467 ;;                  1    wreg      unsigned char 
 14468 ;; Registers used:
 14469 ;;		wreg, status,2, status,0
 14470 ;; Tracked objects:
 14471 ;;		On entry : 0/0
 14472 ;;		On exit  : 0/0
 14473 ;;		Unchanged: 0/0
 14474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14475 ;;      Params:         0       0       0       0       0       0       0
 14476 ;;      Locals:         0       1       0       0       0       0       0
 14477 ;;      Temps:          0       0       0       0       0       0       0
 14478 ;;      Totals:         0       1       0       0       0       0       0
 14479 ;;Total ram usage:        1 bytes
 14480 ;; Hardware stack levels used:    1
 14481 ;; Hardware stack levels required when called:    6
 14482 ;; This function calls:
 14483 ;;		Nothing
 14484 ;; This function is called by:
 14485 ;;		_acaoTesteBombas
 14486 ;;		_tela_ajusteRTC
 14487 ;;		_tela_testeBombas
 14488 ;;		_dataLoger
 14489 ;;		_informacoes
 14490 ;;		_configuraTelefones
 14491 ;;		_configurarEstacionaria
 14492 ;;		_ajusteSP_Bombas
 14493 ;;		_main
 14494 ;;		_telaPrincipal
 14495 ;; This function uses a non-reentrant model
 14496 ;;
 14497                           
 14498                           	psect	text52
 14499  003F8C                     __ptext52:
 14500                           	opt stack 0
 14501  003F8C                     _btPress:
 14502                           	opt stack 0
 14503  003F8C  FFFF               	dw	65535	; assembler added errata NOP
 14504                           
 14505                           ; BSR set to: 0
 14506                           ;incstack = 0
 14507                           ;btPress@bt stored from wreg
 14508  003F8E  0100               	movlb	0	; () banked
 14509  003F90  6F80               	movwf	btPress@bt& (0+255),b
 14510                           
 14511                           ;teclado.h: 60: switch (bt) {
 14512  003F92  D023               	goto	l410
 14513  003F94  FFFF               	dw	65535	; assembler added errata NOP
 14514  003F96  5057               	movf	__b_esc,w,c
 14515  003F98  B4D8               	btfsc	status,2,c
 14516  003F9A  D01C               	goto	l419
 14517                           
 14518                           ;teclado.h: 62: _b_esc = 0;
 14519  003F9C  0E00               	movlw	0
 14520  003F9E  6E57               	movwf	__b_esc,c
 14521  003FA0  D014               	goto	L30
 14522  003FA2  FFFF               	dw	65535	; assembler added errata NOP
 14523  003FA4  5053               	movf	__b_mais,w,c
 14524  003FA6  B4D8               	btfsc	status,2,c
 14525  003FA8  D015               	goto	l419
 14526                           
 14527                           ;teclado.h: 68: _b_mais = 0;
 14528  003FAA  0E00               	movlw	0
 14529  003FAC  6E53               	movwf	__b_mais,c
 14530  003FAE  D00D               	goto	L30
 14531  003FB0  FFFF               	dw	65535	; assembler added errata NOP
 14532  003FB2  5055               	movf	__b_menos,w,c
 14533  003FB4  B4D8               	btfsc	status,2,c
 14534  003FB6  D00E               	goto	l419
 14535                           
 14536                           ;teclado.h: 74: _b_menos = 0;
 14537  003FB8  0E00               	movlw	0
 14538  003FBA  6E55               	movwf	__b_menos,c
 14539  003FBC  D006               	goto	L30
 14540  003FBE  FFFF               	dw	65535	; assembler added errata NOP
 14541  003FC0  5051               	movf	__b_ok,w,c
 14542  003FC2  B4D8               	btfsc	status,2,c
 14543  003FC4  D007               	goto	l419
 14544                           
 14545                           ;teclado.h: 80: _b_ok = 0;
 14546  003FC6  0E00               	movlw	0
 14547  003FC8  6E51               	movwf	__b_ok,c
 14548  003FCA                     L30:
 14549  003FCA  FFFF               	dw	65535	; assembler added errata NOP
 14550                           
 14551                           ;teclado.h: 81: bt_press = 1;
 14552  003FCC  0E01               	movlw	1
 14553  003FCE  6E71               	movwf	_bt_press,c
 14554                           
 14555                           ;teclado.h: 82: return 1;
 14556  003FD0  0E01               	movlw	1
 14557  003FD2  D013               	goto	l421
 14558  003FD4                     l419:
 14559  003FD4  FFFF               	dw	65535	; assembler added errata NOP
 14560                           
 14561                           ;teclado.h: 85: default: return 0;
 14562                           
 14563                           ;teclado.h: 83: }
 14564                           ;teclado.h: 84: return 0;
 14565  003FD6  0E00               	movlw	0
 14566                           
 14567                           ;teclado.h: 86: }
 14568  003FD8  D010               	goto	l421
 14569  003FDA                     l410:
 14570  003FDA  FFFF               	dw	65535	; assembler added errata NOP
 14571  003FDC  0100               	movlb	0	; () banked
 14572  003FDE  5180               	movf	btPress@bt& (0+255),w,b
 14573                           
 14574                           ; Switch size 1, requested type "space"
 14575                           ; Number of cases is 4, Range of values is 1 to 4
 14576                           ; switch strategies available:
 14577                           ; Name         Instructions Cycles
 14578                           ; simple_byte           13     7 (average)
 14579                           ;	Chosen strategy is simple_byte
 14580  003FE0  0A01               	xorlw	1	; case 1
 14581  003FE2  B4D8               	btfsc	status,2,c
 14582  003FE4  D7D7               	goto	l411
 14583  003FE6  0A03               	xorlw	3	; case 2
 14584  003FE8  B4D8               	btfsc	status,2,c
 14585  003FEA  D7E2               	goto	l416
 14586  003FEC  0A01               	xorlw	1	; case 3
 14587  003FEE  B4D8               	btfsc	status,2,c
 14588  003FF0  D7D8               	goto	l414
 14589  003FF2  0A07               	xorlw	7	; case 4
 14590  003FF4  B4D8               	btfsc	status,2,c
 14591  003FF6  D7E3               	goto	l418
 14592  003FF8  D7ED               	goto	l419
 14593  003FFA                     l421:
 14594  003FFA  FFFF               	dw	65535	; assembler added errata NOP
 14595                           
 14596                           ; BSR set to: 0
 14597  003FFC  0012               	return		;funcret
 14598  003FFE  FFFF               	dw	65535	; errata NOP
 14599  004000                     __end_of_btPress:
 14600                           	opt stack 0
 14601                           tosu	equ	0xFFF
 14602                           tosh	equ	0xFFE
 14603                           tosl	equ	0xFFD
 14604                           pclath	equ	0xFFA
 14605                           tblptru	equ	0xFF8
 14606                           tblptrh	equ	0xFF7
 14607                           tblptrl	equ	0xFF6
 14608                           tablat	equ	0xFF5
 14609                           prodh	equ	0xFF4
 14610                           prodl	equ	0xFF3
 14611                           intcon	equ	0xFF2
 14612                           indf0	equ	0xFEF
 14613                           postinc0	equ	0xFEE
 14614                           fsr0h	equ	0xFEA
 14615                           fsr0l	equ	0xFE9
 14616                           wreg	equ	0xFE8
 14617                           postdec1	equ	0xFE5
 14618                           fsr1l	equ	0xFE1
 14619                           indf2	equ	0xFDF
 14620                           postinc2	equ	0xFDE
 14621                           postdec2	equ	0xFDD
 14622                           fsr2h	equ	0xFDA
 14623                           fsr2l	equ	0xFD9
 14624                           status	equ	0xFD8
 14625                           
 14626 ;; *************** function _acaoBombas *****************
 14627 ;; Defined at:
 14628 ;;		line 16 in file "controle.h"
 14629 ;; Parameters:    Size  Location     Type
 14630 ;;		None
 14631 ;; Auto vars:     Size  Location     Type
 14632 ;;		None
 14633 ;; Return value:  Size  Location     Type
 14634 ;;                  1    wreg      void 
 14635 ;; Registers used:
 14636 ;;		wreg, status,2, status,0, cstack
 14637 ;; Tracked objects:
 14638 ;;		On entry : 0/0
 14639 ;;		On exit  : 0/0
 14640 ;;		Unchanged: 0/0
 14641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14642 ;;      Params:         0       0       0       0       0       0       0
 14643 ;;      Locals:         0       0       0       0       0       0       0
 14644 ;;      Temps:          0       0       0       0       0       0       0
 14645 ;;      Totals:         0       0       0       0       0       0       0
 14646 ;;Total ram usage:        0 bytes
 14647 ;; Hardware stack levels used:    1
 14648 ;; Hardware stack levels required when called:    8
 14649 ;; This function calls:
 14650 ;;		_partidaBombaEstacionaria
 14651 ;; This function is called by:
 14652 ;;		_main
 14653 ;; This function uses a non-reentrant model
 14654 ;;
 14655                           
 14656                           	psect	text53
 14657  0038B8                     __ptext53:
 14658                           	opt stack 0
 14659  0038B8                     _acaoBombas:
 14660                           	opt stack 0
 14661  0038B8  FFFF               	dw	65535	; assembler added errata NOP
 14662                           
 14663                           ;controle.h: 17: if (pressao >= sp_pressao_rede && incendio != 1 && teste_run == 0) {
 14664                           
 14665                           ;incstack = 0
 14666  0038BA  0100               	movlb	0	; () banked
 14667  0038BC  51DF               	movf	_sp_pressao_rede& (0+255),w,b
 14668  0038BE  5DFF               	subwf	_pressao& (0+255),w,b
 14669  0038C0  A0D8               	btfss	status,0,c
 14670  0038C2  D00F               	goto	l424
 14671                           
 14672                           ; BSR set to: 0
 14673  0038C4  05D9               	decf	_incendio& (0+255),w,b
 14674  0038C6  B4D8               	btfsc	status,2,c
 14675  0038C8  D00C               	goto	l424
 14676                           
 14677                           ; BSR set to: 0
 14678  0038CA  51DA               	movf	_teste_run& (0+255),w,b
 14679  0038CC  A4D8               	btfss	status,2,c
 14680  0038CE  D009               	goto	l424
 14681                           
 14682                           ; BSR set to: 0
 14683                           ;controle.h: 18: shift[6] = 0;
 14684  0038D0  0E00               	movlw	0
 14685  0038D2  6E4A               	movwf	_shift+6,c
 14686                           
 14687                           ;controle.h: 19: shift[5] = 0;
 14688  0038D4  0E00               	movlw	0
 14689  0038D6  6E49               	movwf	_shift+5,c
 14690                           
 14691                           ; BSR set to: 0
 14692                           ;controle.h: 20: partidaBombaEstacionaria(0);
 14693  0038D8  0E00               	movlw	0
 14694  0038DA  EC01  F019         	call	_partidaBombaEstacionaria
 14695                           
 14696                           ;controle.h: 21: shift[1] = 0;
 14697  0038DE  0E00               	movlw	0
 14698  0038E0  D03B               	goto	L31
 14699  0038E2                     l424:
 14700  0038E2  FFFF               	dw	65535	; assembler added errata NOP
 14701                           
 14702                           ;controle.h: 23: }
 14703                           ;controle.h: 24: if (teste_run == 0) {
 14704  0038E4  0100               	movlb	0	; () banked
 14705  0038E6  51DA               	movf	_teste_run& (0+255),w,b
 14706  0038E8  A4D8               	btfss	status,2,c
 14707  0038EA  D03E               	goto	l433
 14708                           
 14709                           ; BSR set to: 0
 14710                           ;controle.h: 25: shift[2] = 0;
 14711  0038EC  0E00               	movlw	0
 14712  0038EE  6E46               	movwf	_shift+2,c
 14713                           
 14714                           ; BSR set to: 0
 14715                           ;controle.h: 26: if (pressao <= sp_jockey) {
 14716  0038F0  51FF               	movf	_pressao& (0+255),w,b
 14717  0038F2  5DDE               	subwf	_sp_jockey& (0+255),w,b
 14718  0038F4  A0D8               	btfss	status,0,c
 14719  0038F6  D002               	goto	l427
 14720                           
 14721                           ; BSR set to: 0
 14722                           ;controle.h: 27: shift[6] = 1;
 14723  0038F8  0E01               	movlw	1
 14724  0038FA  6E4A               	movwf	_shift+6,c
 14725  0038FC                     l427:
 14726  0038FC  FFFF               	dw	65535	; assembler added errata NOP
 14727                           
 14728                           ; BSR set to: 0
 14729                           ;controle.h: 28: }
 14730                           ;controle.h: 29: if (pressao >= sp_pressao_rede) {
 14731                           
 14732                           ; BSR set to: 0
 14733  0038FE  51DF               	movf	_sp_pressao_rede& (0+255),w,b
 14734  003900  5DFF               	subwf	_pressao& (0+255),w,b
 14735  003902  A0D8               	btfss	status,0,c
 14736  003904  D002               	goto	l428
 14737                           
 14738                           ; BSR set to: 0
 14739                           ;controle.h: 30: shift[6] = 0;
 14740  003906  0E00               	movlw	0
 14741  003908  6E4A               	movwf	_shift+6,c
 14742  00390A                     l428:
 14743  00390A  FFFF               	dw	65535	; assembler added errata NOP
 14744                           
 14745                           ; BSR set to: 0
 14746                           ;controle.h: 31: }
 14747                           ;controle.h: 32: if (pressao >= sp_pressao_rede && incendio == 0) {
 14748                           
 14749                           ; BSR set to: 0
 14750  00390C  51DF               	movf	_sp_pressao_rede& (0+255),w,b
 14751  00390E  5DFF               	subwf	_pressao& (0+255),w,b
 14752  003910  A0D8               	btfss	status,0,c
 14753  003912  D008               	goto	l429
 14754                           
 14755                           ; BSR set to: 0
 14756  003914  51D9               	movf	_incendio& (0+255),w,b
 14757  003916  A4D8               	btfss	status,2,c
 14758  003918  D005               	goto	l429
 14759                           
 14760                           ; BSR set to: 0
 14761                           ;controle.h: 33: shift[5] = 0;
 14762  00391A  0E00               	movlw	0
 14763  00391C  6E49               	movwf	_shift+5,c
 14764                           
 14765                           ; BSR set to: 0
 14766                           ;controle.h: 34: partidaBombaEstacionaria(0);
 14767  00391E  0E00               	movlw	0
 14768  003920  EC01  F019         	call	_partidaBombaEstacionaria
 14769  003924                     l429:
 14770  003924  FFFF               	dw	65535	; assembler added errata NOP
 14771                           
 14772                           ;controle.h: 35: }
 14773                           ;controle.h: 36: if (pressao <= sp_principal) {
 14774  003926  0100               	movlb	0	; () banked
 14775  003928  51FF               	movf	_pressao& (0+255),w,b
 14776  00392A  5DDD               	subwf	_sp_principal& (0+255),w,b
 14777  00392C  A0D8               	btfss	status,0,c
 14778  00392E  D004               	goto	l430
 14779                           
 14780                           ; BSR set to: 0
 14781                           ;controle.h: 37: incendio = 1;
 14782  003930  0E01               	movlw	1
 14783  003932  6FD9               	movwf	_incendio& (0+255),b
 14784                           
 14785                           ;controle.h: 38: shift[5] = 1;
 14786  003934  0E01               	movlw	1
 14787  003936  6E49               	movwf	_shift+5,c
 14788  003938                     l430:
 14789  003938  FFFF               	dw	65535	; assembler added errata NOP
 14790                           
 14791                           ; BSR set to: 0
 14792                           ;controle.h: 39: }
 14793                           ;controle.h: 40: if (pressao <= sp_estacionaria) {
 14794                           
 14795                           ; BSR set to: 0
 14796  00393A  51FF               	movf	_pressao& (0+255),w,b
 14797  00393C  5DDC               	subwf	_sp_estacionaria& (0+255),w,b
 14798  00393E  A0D8               	btfss	status,0,c
 14799  003940  D005               	goto	l431
 14800                           
 14801                           ; BSR set to: 0
 14802                           ;controle.h: 41: incendio = 1;
 14803  003942  0E01               	movlw	1
 14804  003944  6FD9               	movwf	_incendio& (0+255),b
 14805                           
 14806                           ; BSR set to: 0
 14807                           ;controle.h: 42: partidaBombaEstacionaria(1);
 14808  003946  0E01               	movlw	1
 14809  003948  EC01  F019         	call	_partidaBombaEstacionaria
 14810  00394C                     l431:
 14811  00394C  FFFF               	dw	65535	; assembler added errata NOP
 14812                           
 14813                           ;controle.h: 43: }
 14814                           ;controle.h: 44: if (incendio) {
 14815  00394E  0100               	movlb	0	; () banked
 14816  003950  51D9               	movf	_incendio& (0+255),w,b
 14817  003952  B4D8               	btfsc	status,2,c
 14818  003954  D004               	goto	l432
 14819                           
 14820                           ; BSR set to: 0
 14821                           ;controle.h: 46: shift[1] = 1;
 14822  003956  0E01               	movlw	1
 14823  003958                     L31:
 14824  003958  FFFF               	dw	65535	; assembler added errata NOP
 14825  00395A  6E45               	movwf	_shift+1,c
 14826                           
 14827                           ;controle.h: 47: } else {
 14828  00395C  D005               	goto	l433
 14829  00395E                     l432:
 14830  00395E  FFFF               	dw	65535	; assembler added errata NOP
 14831                           
 14832                           ; BSR set to: 0
 14833                           ;controle.h: 48: estagio_envio_SMS = 0;
 14834                           
 14835                           ; BSR set to: 0
 14836  003960  0E00               	movlw	0
 14837  003962  6FE7               	movwf	_estagio_envio_SMS& (0+255),b
 14838                           
 14839                           ;controle.h: 49: tempo_reenvio_SMS = 2;
 14840  003964  0E02               	movlw	2
 14841  003966  6E72               	movwf	_tempo_reenvio_SMS,c
 14842  003968                     l433:
 14843  003968  FFFF               	dw	65535	; assembler added errata NOP
 14844                           
 14845                           ; BSR set to: 0
 14846                           
 14847                           ; BSR set to: 0
 14848  00396A  0012               	return		;funcret
 14849  00396C  FFFF               	dw	65535	; errata NOP
 14850  00396E                     __end_of_acaoBombas:
 14851                           	opt stack 0
 14852                           tosu	equ	0xFFF
 14853                           tosh	equ	0xFFE
 14854                           tosl	equ	0xFFD
 14855                           pclath	equ	0xFFA
 14856                           tblptru	equ	0xFF8
 14857                           tblptrh	equ	0xFF7
 14858                           tblptrl	equ	0xFF6
 14859                           tablat	equ	0xFF5
 14860                           prodh	equ	0xFF4
 14861                           prodl	equ	0xFF3
 14862                           intcon	equ	0xFF2
 14863                           indf0	equ	0xFEF
 14864                           postinc0	equ	0xFEE
 14865                           fsr0h	equ	0xFEA
 14866                           fsr0l	equ	0xFE9
 14867                           wreg	equ	0xFE8
 14868                           postdec1	equ	0xFE5
 14869                           fsr1l	equ	0xFE1
 14870                           indf2	equ	0xFDF
 14871                           postinc2	equ	0xFDE
 14872                           postdec2	equ	0xFDD
 14873                           fsr2h	equ	0xFDA
 14874                           fsr2l	equ	0xFD9
 14875                           status	equ	0xFD8
 14876                           
 14877 ;; *************** function _partidaBombaEstacionaria *****************
 14878 ;; Defined at:
 14879 ;;		line 54 in file "controle.h"
 14880 ;; Parameters:    Size  Location     Type
 14881 ;;  acao            1    wreg     unsigned char 
 14882 ;; Auto vars:     Size  Location     Type
 14883 ;;  acao            1    3[BANK0 ] unsigned char 
 14884 ;; Return value:  Size  Location     Type
 14885 ;;                  1    wreg      void 
 14886 ;; Registers used:
 14887 ;;		wreg, status,2, status,0, cstack
 14888 ;; Tracked objects:
 14889 ;;		On entry : 0/0
 14890 ;;		On exit  : 0/0
 14891 ;;		Unchanged: 0/0
 14892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14893 ;;      Params:         0       0       0       0       0       0       0
 14894 ;;      Locals:         0       1       0       0       0       0       0
 14895 ;;      Temps:          0       0       0       0       0       0       0
 14896 ;;      Totals:         0       1       0       0       0       0       0
 14897 ;;Total ram usage:        1 bytes
 14898 ;; Hardware stack levels used:    1
 14899 ;; Hardware stack levels required when called:    7
 14900 ;; This function calls:
 14901 ;;		_delay
 14902 ;; This function is called by:
 14903 ;;		_acaoBombas
 14904 ;;		_acaoTesteBombas
 14905 ;; This function uses a non-reentrant model
 14906 ;;
 14907                           
 14908                           	psect	text54
 14909  003202                     __ptext54:
 14910                           	opt stack 0
 14911  003202                     _partidaBombaEstacionaria:
 14912                           	opt stack 0
 14913  003202  FFFF               	dw	65535	; assembler added errata NOP
 14914                           
 14915                           ;incstack = 0
 14916                           ;partidaBombaEstacionaria@acao stored from wreg
 14917  003204  0100               	movlb	0	; () banked
 14918  003206  6F83               	movwf	partidaBombaEstacionaria@acao& (0+255),b
 14919                           
 14920                           ;controle.h: 55: if (acao == 1 && estacionaria_Ligada == 0) {
 14921  003208  0100               	movlb	0	; () banked
 14922  00320A  0583               	decf	partidaBombaEstacionaria@acao& (0+255),w,b
 14923  00320C  A4D8               	btfss	status,2,c
 14924  00320E  D01A               	goto	l438
 14925                           
 14926                           ; BSR set to: 0
 14927  003210  51ED               	movf	_estacionaria_Ligada& (0+255),w,b
 14928  003212  A4D8               	btfss	status,2,c
 14929  003214  D017               	goto	l438
 14930                           
 14931                           ; BSR set to: 0
 14932                           ;controle.h: 56: if (_sec_partida != _sec) {
 14933  003216  51F9               	movf	__sec& (0+255),w,b
 14934  003218  19F4               	xorwf	__sec_partida& (0+255),w,b
 14935  00321A  B4D8               	btfsc	status,2,c
 14936  00321C  D013               	goto	l438
 14937                           
 14938                           ; BSR set to: 0
 14939                           ;controle.h: 57: _sec_partida = _sec;
 14940  00321E  C0F9  F0F4         	movff	__sec,__sec_partida
 14941                           
 14942                           ; BSR set to: 0
 14943                           ;controle.h: 58: tempo_limite_partida++;
 14944  003222  2BEB               	incf	_tempo_limite_partida& (0+255),f,b
 14945                           
 14946                           ;controle.h: 59: tempo_partida++;
 14947  003224  2BEC               	incf	_tempo_partida& (0+255),f,b
 14948                           
 14949                           ; BSR set to: 0
 14950                           ;controle.h: 60: if (!PORTAbits.RA5) {
 14951  003226  BA80               	btfsc	3968,5,c	;volatile
 14952  003228  D00D               	goto	l438
 14953                           
 14954                           ; BSR set to: 0
 14955                           ;controle.h: 61: delay(700);
 14956  00322A  0E02               	movlw	2
 14957  00322C  6F81               	movwf	(delay@x+1)& (0+255),b
 14958  00322E  0EBC               	movlw	188
 14959  003230  6F80               	movwf	delay@x& (0+255),b
 14960  003232  ECCD  F039         	call	_delay	;wreg free
 14961                           
 14962                           ;controle.h: 62: estacionaria_Ligada = 1;
 14963  003236  0E01               	movlw	1
 14964  003238  0100               	movlb	0	; () banked
 14965  00323A  6FED               	movwf	_estacionaria_Ligada& (0+255),b
 14966                           
 14967                           ; BSR set to: 0
 14968                           ;controle.h: 63: tempo_partida = 0;
 14969  00323C  0E00               	movlw	0
 14970  00323E  6FEC               	movwf	_tempo_partida& (0+255),b
 14971                           
 14972                           ; BSR set to: 0
 14973                           ;controle.h: 64: shift[4] = 0;
 14974  003240  0E00               	movlw	0
 14975  003242  6E48               	movwf	_shift+4,c
 14976  003244                     l438:
 14977  003244  FFFF               	dw	65535	; assembler added errata NOP
 14978                           
 14979                           ; BSR set to: 0
 14980                           ;controle.h: 65: }
 14981                           ;controle.h: 66: }
 14982                           ;controle.h: 67: }
 14983                           ;controle.h: 68: if (estacionaria_Ligada == 0 && status_estacionaria == 1) {
 14984                           
 14985                           ; BSR set to: 0
 14986                           
 14987                           ; BSR set to: 0
 14988                           
 14989                           ; BSR set to: 0
 14990  003246  51ED               	movf	_estacionaria_Ligada& (0+255),w,b
 14991  003248  A4D8               	btfss	status,2,c
 14992  00324A  D015               	goto	l443
 14993                           
 14994                           ; BSR set to: 0
 14995  00324C  05FC               	decf	_status_estacionaria& (0+255),w,b
 14996  00324E  A4D8               	btfss	status,2,c
 14997  003250  D012               	goto	l443
 14998                           
 14999                           ; BSR set to: 0
 15000                           ;controle.h: 69: shift[3] = 1;
 15001  003252  0E01               	movlw	1
 15002  003254  6E47               	movwf	_shift+3,c
 15003                           
 15004                           ; BSR set to: 0
 15005                           ;controle.h: 70: if (tempo_partida <= 7) {
 15006  003256  0E08               	movlw	8
 15007  003258  61EC               	cpfslt	_tempo_partida& (0+255),b
 15008  00325A  D002               	goto	l440
 15009                           
 15010                           ; BSR set to: 0
 15011                           ;controle.h: 71: shift[4] = 1;
 15012  00325C  0E01               	movlw	1
 15013  00325E  D005               	goto	L32
 15014  003260                     l440:
 15015  003260  FFFF               	dw	65535	; assembler added errata NOP
 15016                           
 15017                           ; BSR set to: 0
 15018                           
 15019                           ; BSR set to: 0
 15020  003262  0E0D               	movlw	13
 15021  003264  61EC               	cpfslt	_tempo_partida& (0+255),b
 15022  003266  D004               	goto	l442
 15023                           
 15024                           ; BSR set to: 0
 15025                           ;controle.h: 73: shift[4] = 0;
 15026  003268  0E00               	movlw	0
 15027  00326A                     L32:
 15028  00326A  FFFF               	dw	65535	; assembler added errata NOP
 15029  00326C  6E48               	movwf	_shift+4,c
 15030                           
 15031                           ;controle.h: 74: } else {
 15032  00326E  D003               	goto	l443
 15033  003270                     l442:
 15034  003270  FFFF               	dw	65535	; assembler added errata NOP
 15035                           
 15036                           ; BSR set to: 0
 15037                           ;controle.h: 75: tempo_partida = 0;
 15038                           
 15039                           ; BSR set to: 0
 15040  003272  0E00               	movlw	0
 15041  003274  6FEC               	movwf	_tempo_partida& (0+255),b
 15042  003276                     l443:
 15043  003276  FFFF               	dw	65535	; assembler added errata NOP
 15044                           
 15045                           ; BSR set to: 0
 15046                           ;controle.h: 76: }
 15047                           ;controle.h: 77: }
 15048                           ;controle.h: 78: if (tempo_limite_partida > tempo_limite_estacionaria) {
 15049                           
 15050                           ; BSR set to: 0
 15051                           
 15052                           ; BSR set to: 0
 15053                           
 15054                           ; BSR set to: 0
 15055  003278  51EB               	movf	_tempo_limite_partida& (0+255),w,b
 15056  00327A  5DEE               	subwf	_tempo_limite_estacionaria& (0+255),w,b
 15057  00327C  B0D8               	btfsc	status,0,c
 15058  00327E  D00C               	goto	l444
 15059                           
 15060                           ; BSR set to: 0
 15061                           ;controle.h: 79: tempo_limite_partida = 0;
 15062  003280  0E00               	movlw	0
 15063  003282  6FEB               	movwf	_tempo_limite_partida& (0+255),b
 15064                           
 15065                           ;controle.h: 80: falha = 1;
 15066  003284  0E01               	movlw	1
 15067  003286  6FDB               	movwf	_falha& (0+255),b
 15068                           
 15069                           ;controle.h: 81: status_estacionaria = 0;
 15070  003288  0E00               	movlw	0
 15071  00328A  6FFC               	movwf	_status_estacionaria& (0+255),b
 15072                           
 15073                           ;controle.h: 82: estacionaria_Ligada = 0;
 15074  00328C  0E00               	movlw	0
 15075  00328E  6FED               	movwf	_estacionaria_Ligada& (0+255),b
 15076                           
 15077                           ;controle.h: 83: shift[3] = 0;
 15078  003290  0E00               	movlw	0
 15079  003292  6E47               	movwf	_shift+3,c
 15080                           
 15081                           ;controle.h: 84: shift[4] = 0;
 15082  003294  0E00               	movlw	0
 15083  003296  6E48               	movwf	_shift+4,c
 15084  003298                     l444:
 15085  003298  FFFF               	dw	65535	; assembler added errata NOP
 15086                           
 15087                           ; BSR set to: 0
 15088                           ;controle.h: 85: }
 15089                           ;controle.h: 88: if (acao == 0) {
 15090  00329A  5183               	movf	partidaBombaEstacionaria@acao& (0+255),w,b
 15091  00329C  A4D8               	btfss	status,2,c
 15092  00329E  D00A               	goto	l445
 15093                           
 15094                           ; BSR set to: 0
 15095                           ;controle.h: 89: estacionaria_Ligada = 0;
 15096  0032A0  0E00               	movlw	0
 15097  0032A2  6FED               	movwf	_estacionaria_Ligada& (0+255),b
 15098                           
 15099                           ;controle.h: 90: shift[4] = 0;
 15100  0032A4  0E00               	movlw	0
 15101  0032A6  6E48               	movwf	_shift+4,c
 15102                           
 15103                           ;controle.h: 91: shift[3] = 0;
 15104  0032A8  0E00               	movlw	0
 15105  0032AA  6E47               	movwf	_shift+3,c
 15106                           
 15107                           ;controle.h: 92: tempo_partida = 0;
 15108  0032AC  0E00               	movlw	0
 15109  0032AE  6FEC               	movwf	_tempo_partida& (0+255),b
 15110                           
 15111                           ;controle.h: 93: tempo_limite_partida = 0;
 15112  0032B0  0E00               	movlw	0
 15113  0032B2  6FEB               	movwf	_tempo_limite_partida& (0+255),b
 15114  0032B4                     l445:
 15115  0032B4  FFFF               	dw	65535	; assembler added errata NOP
 15116                           
 15117                           ; BSR set to: 0
 15118                           ;controle.h: 94: }
 15119                           ;controle.h: 96: if (status_estacionaria == 0) {
 15120  0032B6  51FC               	movf	_status_estacionaria& (0+255),w,b
 15121  0032B8  A4D8               	btfss	status,2,c
 15122  0032BA  D008               	goto	l446
 15123                           
 15124                           ; BSR set to: 0
 15125                           ;controle.h: 97: shift[3] = 0;
 15126  0032BC  0E00               	movlw	0
 15127  0032BE  6E47               	movwf	_shift+3,c
 15128                           
 15129                           ;controle.h: 98: shift[4] = 0;
 15130  0032C0  0E00               	movlw	0
 15131  0032C2  6E48               	movwf	_shift+4,c
 15132                           
 15133                           ;controle.h: 99: falha = 1;
 15134  0032C4  0E01               	movlw	1
 15135  0032C6  6FDB               	movwf	_falha& (0+255),b
 15136                           
 15137                           ;controle.h: 100: tempo_partida = 0;
 15138  0032C8  0E00               	movlw	0
 15139  0032CA  6FEC               	movwf	_tempo_partida& (0+255),b
 15140  0032CC                     l446:
 15141  0032CC  FFFF               	dw	65535	; assembler added errata NOP
 15142                           
 15143                           ; BSR set to: 0
 15144                           ;controle.h: 101: }
 15145                           ;controle.h: 102: if (estacionaria_Ligada == 1) {
 15146                           
 15147                           ; BSR set to: 0
 15148  0032CE  05ED               	decf	_estacionaria_Ligada& (0+255),w,b
 15149  0032D0  A4D8               	btfss	status,2,c
 15150  0032D2  D00A               	goto	l449
 15151                           
 15152                           ; BSR set to: 0
 15153                           ;controle.h: 103: if (!PORTAbits.RA5) {
 15154  0032D4  BA80               	btfsc	3968,5,c	;volatile
 15155  0032D6  D005               	goto	l448
 15156                           
 15157                           ; BSR set to: 0
 15158                           ;controle.h: 104: shift[4] = 0;
 15159  0032D8  0E00               	movlw	0
 15160  0032DA  6E48               	movwf	_shift+4,c
 15161                           
 15162                           ;controle.h: 105: tempo_limite_partida = 0;
 15163  0032DC  0E00               	movlw	0
 15164  0032DE  6FEB               	movwf	_tempo_limite_partida& (0+255),b
 15165                           
 15166                           ;controle.h: 106: } else {
 15167  0032E0  D003               	goto	l449
 15168  0032E2                     l448:
 15169  0032E2  FFFF               	dw	65535	; assembler added errata NOP
 15170                           
 15171                           ; BSR set to: 0
 15172                           ;controle.h: 107: estacionaria_Ligada = 0;
 15173                           
 15174                           ; BSR set to: 0
 15175  0032E4  0E00               	movlw	0
 15176  0032E6  6FED               	movwf	_estacionaria_Ligada& (0+255),b
 15177  0032E8                     l449:
 15178  0032E8  FFFF               	dw	65535	; assembler added errata NOP
 15179                           
 15180                           ; BSR set to: 0
 15181                           
 15182                           ; BSR set to: 0
 15183                           
 15184                           ; BSR set to: 0
 15185  0032EA  0012               	return		;funcret
 15186  0032EC  FFFF               	dw	65535	; errata NOP
 15187  0032EE                     __end_of_partidaBombaEstacionaria:
 15188                           	opt stack 0
 15189                           tosu	equ	0xFFF
 15190                           tosh	equ	0xFFE
 15191                           tosl	equ	0xFFD
 15192                           pclath	equ	0xFFA
 15193                           tblptru	equ	0xFF8
 15194                           tblptrh	equ	0xFF7
 15195                           tblptrl	equ	0xFF6
 15196                           tablat	equ	0xFF5
 15197                           prodh	equ	0xFF4
 15198                           prodl	equ	0xFF3
 15199                           intcon	equ	0xFF2
 15200                           indf0	equ	0xFEF
 15201                           postinc0	equ	0xFEE
 15202                           fsr0h	equ	0xFEA
 15203                           fsr0l	equ	0xFE9
 15204                           wreg	equ	0xFE8
 15205                           postdec1	equ	0xFE5
 15206                           fsr1l	equ	0xFE1
 15207                           indf2	equ	0xFDF
 15208                           postinc2	equ	0xFDE
 15209                           postdec2	equ	0xFDD
 15210                           fsr2h	equ	0xFDA
 15211                           fsr2l	equ	0xFD9
 15212                           status	equ	0xFD8
 15213                           
 15214 ;; *************** function _delay *****************
 15215 ;; Defined at:
 15216 ;;		line 16 in file "function.c"
 15217 ;; Parameters:    Size  Location     Type
 15218 ;;  x               2    0[BANK0 ] int 
 15219 ;; Auto vars:     Size  Location     Type
 15220 ;;		None
 15221 ;; Return value:  Size  Location     Type
 15222 ;;                  1    wreg      void 
 15223 ;; Registers used:
 15224 ;;		wreg, status,2, status,0
 15225 ;; Tracked objects:
 15226 ;;		On entry : 0/0
 15227 ;;		On exit  : 0/0
 15228 ;;		Unchanged: 0/0
 15229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15230 ;;      Params:         0       2       0       0       0       0       0
 15231 ;;      Locals:         0       0       0       0       0       0       0
 15232 ;;      Temps:          0       1       0       0       0       0       0
 15233 ;;      Totals:         0       3       0       0       0       0       0
 15234 ;;Total ram usage:        3 bytes
 15235 ;; Hardware stack levels used:    1
 15236 ;; Hardware stack levels required when called:    6
 15237 ;; This function calls:
 15238 ;;		Nothing
 15239 ;; This function is called by:
 15240 ;;		_writeEEPROM_ext
 15241 ;;		_partidaBombaEstacionaria
 15242 ;;		_telaTeste
 15243 ;;		_main
 15244 ;;		_enviaSMS
 15245 ;; This function uses a non-reentrant model
 15246 ;;
 15247                           
 15248                           	psect	text55
 15249  00739A                     __ptext55:
 15250                           	opt stack 0
 15251  00739A                     _delay:
 15252                           	opt stack 0
 15253  00739A  FFFF               	dw	65535	; assembler added errata NOP
 15254                           
 15255                           ;function.c: 17: while (x--) {
 15256                           
 15257                           ; BSR set to: 0
 15258                           ;incstack = 0
 15259  00739C  D00C               	goto	l923
 15260  00739E  FFFF               	dw	65535	; assembler added errata NOP
 15261  0073A0                     l4709:
 15262                           
 15263                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 15264  0073A0  0E02               	movlw	2
 15265  0073A2  0100               	movlb	0	; () banked
 15266  0073A4  6F82               	movwf	??_delay& (0+255),b
 15267  0073A6  0EF2               	movlw	242
 15268  0073A8                     u19227:
 15269  0073A8  FFFF               	dw	65535	; errata NOP
 15270  0073AA  2EE8               	decfsz	wreg,f,c
 15271  0073AC  D7FD               	bra	u19227
 15272  0073AE  2F82               	decfsz	??_delay& (0+255),f,b
 15273  0073B0  D7FB               	bra	u19227
 15274  0073B2  F000               	nop	
 15275  0073B4  0004               	clrwdt		;# 
 15276  0073B6                     l923:
 15277  0073B6  FFFF               	dw	65535	; assembler added errata NOP
 15278  0073B8  0100               	movlb	0	; () banked
 15279  0073BA  0780               	decf	delay@x& (0+255),f,b
 15280  0073BC  A0D8               	btfss	status,0,c
 15281  0073BE  0781               	decf	(delay@x+1)& (0+255),f,b
 15282  0073C0  2980               	incf	delay@x& (0+255),w,b
 15283  0073C2  E1EE               	bnz	l4709
 15284  0073C4  2981               	incf	(delay@x+1)& (0+255),w,b
 15285  0073C6  B4D8               	btfsc	status,2,c
 15286                           
 15287                           ; BSR set to: 0
 15288                           
 15289                           ; BSR set to: 0
 15290  0073C8  0012               	return		;funcret
 15291  0073CA  FFFF               	dw	65535	; assembler added errata NOP
 15292  0073CC  D7E8               	goto	l924
 15293  0073CE  FFFF               	dw	65535	; errata NOP
 15294  0073D0                     __end_of_delay:
 15295                           	opt stack 0
 15296                           tosu	equ	0xFFF
 15297                           tosh	equ	0xFFE
 15298                           tosl	equ	0xFFD
 15299                           pclath	equ	0xFFA
 15300                           tblptru	equ	0xFF8
 15301                           tblptrh	equ	0xFF7
 15302                           tblptrl	equ	0xFF6
 15303                           tablat	equ	0xFF5
 15304                           prodh	equ	0xFF4
 15305                           prodl	equ	0xFF3
 15306                           intcon	equ	0xFF2
 15307                           indf0	equ	0xFEF
 15308                           postinc0	equ	0xFEE
 15309                           fsr0h	equ	0xFEA
 15310                           fsr0l	equ	0xFE9
 15311                           wreg	equ	0xFE8
 15312                           postdec1	equ	0xFE5
 15313                           fsr1l	equ	0xFE1
 15314                           indf2	equ	0xFDF
 15315                           postinc2	equ	0xFDE
 15316                           postdec2	equ	0xFDD
 15317                           fsr2h	equ	0xFDA
 15318                           fsr2l	equ	0xFD9
 15319                           status	equ	0xFD8
 15320                           
 15321 ;; *************** function _RTC_Init *****************
 15322 ;; Defined at:
 15323 ;;		line 98 in file "ds1307.h"
 15324 ;; Parameters:    Size  Location     Type
 15325 ;;		None
 15326 ;; Auto vars:     Size  Location     Type
 15327 ;;		None
 15328 ;; Return value:  Size  Location     Type
 15329 ;;                  1    wreg      void 
 15330 ;; Registers used:
 15331 ;;		wreg, status,2, status,0, cstack
 15332 ;; Tracked objects:
 15333 ;;		On entry : 0/0
 15334 ;;		On exit  : 0/0
 15335 ;;		Unchanged: 0/0
 15336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15337 ;;      Params:         0       0       0       0       0       0       0
 15338 ;;      Locals:         0       0       0       0       0       0       0
 15339 ;;      Temps:          0       0       0       0       0       0       0
 15340 ;;      Totals:         0       0       0       0       0       0       0
 15341 ;;Total ram usage:        0 bytes
 15342 ;; Hardware stack levels used:    1
 15343 ;; Hardware stack levels required when called:    8
 15344 ;; This function calls:
 15345 ;;		_I2C_Start
 15346 ;;		_I2C_Stop
 15347 ;;		_I2C_Write
 15348 ;; This function is called by:
 15349 ;;		_main
 15350 ;; This function uses a non-reentrant model
 15351 ;;
 15352                           
 15353                           	psect	text56
 15354  007406                     __ptext56:
 15355                           	opt stack 0
 15356  007406                     _RTC_Init:
 15357                           	opt stack 0
 15358  007406  FFFF               	dw	65535	; assembler added errata NOP
 15359                           
 15360                           ;ds1307.h: 100: I2C_Start();
 15361                           
 15362                           ; BSR set to: 0
 15363                           ;incstack = 0
 15364  007408  EC30  F038         	call	_I2C_Start	;wreg free
 15365                           
 15366                           ;ds1307.h: 101: I2C_Write(0xD0);
 15367  00740C  0E00               	movlw	0
 15368  00740E  0100               	movlb	0	; () banked
 15369  007410  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 15370  007412  0ED0               	movlw	208
 15371  007414  6F8A               	movwf	I2C_Write@d& (0+255),b
 15372  007416  EC49  F038         	call	_I2C_Write	;wreg free
 15373                           
 15374                           ;ds1307.h: 102: I2C_Write(0x07);
 15375  00741A  0E00               	movlw	0
 15376  00741C  0100               	movlb	0	; () banked
 15377  00741E  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 15378  007420  0E07               	movlw	7
 15379  007422  6F8A               	movwf	I2C_Write@d& (0+255),b
 15380  007424  EC49  F038         	call	_I2C_Write	;wreg free
 15381                           
 15382                           ;ds1307.h: 103: I2C_Write(0x00);
 15383  007428  0E00               	movlw	0
 15384  00742A  0100               	movlb	0	; () banked
 15385  00742C  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 15386  00742E  0E00               	movlw	0
 15387  007430  6F8A               	movwf	I2C_Write@d& (0+255),b
 15388  007432  EC49  F038         	call	_I2C_Write	;wreg free
 15389                           
 15390                           ;ds1307.h: 104: I2C_Stop();
 15391  007436  EC36  F038         	call	_I2C_Stop	;wreg free
 15392  00743A  0012               	return		;funcret
 15393  00743C  FFFF               	dw	65535	; errata NOP
 15394  00743E                     __end_of_RTC_Init:
 15395                           	opt stack 0
 15396                           tosu	equ	0xFFF
 15397                           tosh	equ	0xFFE
 15398                           tosl	equ	0xFFD
 15399                           pclath	equ	0xFFA
 15400                           tblptru	equ	0xFF8
 15401                           tblptrh	equ	0xFF7
 15402                           tblptrl	equ	0xFF6
 15403                           tablat	equ	0xFF5
 15404                           prodh	equ	0xFF4
 15405                           prodl	equ	0xFF3
 15406                           intcon	equ	0xFF2
 15407                           indf0	equ	0xFEF
 15408                           postinc0	equ	0xFEE
 15409                           fsr0h	equ	0xFEA
 15410                           fsr0l	equ	0xFE9
 15411                           wreg	equ	0xFE8
 15412                           postdec1	equ	0xFE5
 15413                           fsr1l	equ	0xFE1
 15414                           indf2	equ	0xFDF
 15415                           postinc2	equ	0xFDE
 15416                           postdec2	equ	0xFDD
 15417                           fsr2h	equ	0xFDA
 15418                           fsr2l	equ	0xFD9
 15419                           status	equ	0xFD8
 15420                           
 15421 ;; *************** function _I2C_Write *****************
 15422 ;; Defined at:
 15423 ;;		line 42 in file "I2C.c"
 15424 ;; Parameters:    Size  Location     Type
 15425 ;;  d               2   10[BANK0 ] unsigned int 
 15426 ;; Auto vars:     Size  Location     Type
 15427 ;;		None
 15428 ;; Return value:  Size  Location     Type
 15429 ;;                  1    wreg      void 
 15430 ;; Registers used:
 15431 ;;		wreg, status,2, status,0, cstack
 15432 ;; Tracked objects:
 15433 ;;		On entry : 0/0
 15434 ;;		On exit  : 0/0
 15435 ;;		Unchanged: 0/0
 15436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15437 ;;      Params:         0       2       0       0       0       0       0
 15438 ;;      Locals:         0       0       0       0       0       0       0
 15439 ;;      Temps:          0       0       0       0       0       0       0
 15440 ;;      Totals:         0       2       0       0       0       0       0
 15441 ;;Total ram usage:        2 bytes
 15442 ;; Hardware stack levels used:    1
 15443 ;; Hardware stack levels required when called:    7
 15444 ;; This function calls:
 15445 ;;		_I2C_Wait
 15446 ;; This function is called by:
 15447 ;;		_writeEEPROM_ext
 15448 ;;		_readEEPROM_ext
 15449 ;;		_setDS1307TimeDate
 15450 ;;		_getDS1307TimeDate
 15451 ;;		_RTC_Init
 15452 ;;		_getDS1307Time
 15453 ;;		_setDS1307Time
 15454 ;; This function uses a non-reentrant model
 15455 ;;
 15456                           
 15457                           	psect	text57
 15458  007092                     __ptext57:
 15459                           	opt stack 0
 15460  007092                     _I2C_Write:
 15461                           	opt stack 0
 15462  007092  FFFF               	dw	65535	; assembler added errata NOP
 15463                           
 15464                           ;I2C.c: 43: I2C_Wait();
 15465                           
 15466                           ;incstack = 0
 15467  007094  EC79  F038         	call	_I2C_Wait	;wreg free
 15468                           
 15469                           ;I2C.c: 44: SSPBUF = d;
 15470  007098  C08A  FFC9         	movff	I2C_Write@d,4041	;volatile
 15471  00709C  0012               	return		;funcret
 15472  00709E  FFFF               	dw	65535	; errata NOP
 15473  0070A0                     __end_of_I2C_Write:
 15474                           	opt stack 0
 15475                           tosu	equ	0xFFF
 15476                           tosh	equ	0xFFE
 15477                           tosl	equ	0xFFD
 15478                           pclath	equ	0xFFA
 15479                           tblptru	equ	0xFF8
 15480                           tblptrh	equ	0xFF7
 15481                           tblptrl	equ	0xFF6
 15482                           tablat	equ	0xFF5
 15483                           prodh	equ	0xFF4
 15484                           prodl	equ	0xFF3
 15485                           intcon	equ	0xFF2
 15486                           indf0	equ	0xFEF
 15487                           postinc0	equ	0xFEE
 15488                           fsr0h	equ	0xFEA
 15489                           fsr0l	equ	0xFE9
 15490                           wreg	equ	0xFE8
 15491                           postdec1	equ	0xFE5
 15492                           fsr1l	equ	0xFE1
 15493                           indf2	equ	0xFDF
 15494                           postinc2	equ	0xFDE
 15495                           postdec2	equ	0xFDD
 15496                           fsr2h	equ	0xFDA
 15497                           fsr2l	equ	0xFD9
 15498                           status	equ	0xFD8
 15499                           
 15500 ;; *************** function _I2C_Stop *****************
 15501 ;; Defined at:
 15502 ;;		line 36 in file "I2C.c"
 15503 ;; Parameters:    Size  Location     Type
 15504 ;;		None
 15505 ;; Auto vars:     Size  Location     Type
 15506 ;;		None
 15507 ;; Return value:  Size  Location     Type
 15508 ;;                  1    wreg      void 
 15509 ;; Registers used:
 15510 ;;		wreg, status,2, status,0, cstack
 15511 ;; Tracked objects:
 15512 ;;		On entry : 0/0
 15513 ;;		On exit  : 0/0
 15514 ;;		Unchanged: 0/0
 15515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15516 ;;      Params:         0       0       0       0       0       0       0
 15517 ;;      Locals:         0       0       0       0       0       0       0
 15518 ;;      Temps:          0       0       0       0       0       0       0
 15519 ;;      Totals:         0       0       0       0       0       0       0
 15520 ;;Total ram usage:        0 bytes
 15521 ;; Hardware stack levels used:    1
 15522 ;; Hardware stack levels required when called:    7
 15523 ;; This function calls:
 15524 ;;		_I2C_Wait
 15525 ;; This function is called by:
 15526 ;;		_writeEEPROM_ext
 15527 ;;		_readEEPROM_ext
 15528 ;;		_setDS1307TimeDate
 15529 ;;		_getDS1307TimeDate
 15530 ;;		_RTC_Init
 15531 ;;		_getDS1307Time
 15532 ;;		_setDS1307Time
 15533 ;; This function uses a non-reentrant model
 15534 ;;
 15535                           
 15536                           	psect	text58
 15537  00706C                     __ptext58:
 15538                           	opt stack 0
 15539  00706C                     _I2C_Stop:
 15540                           	opt stack 0
 15541  00706C  FFFF               	dw	65535	; assembler added errata NOP
 15542                           
 15543                           ;I2C.c: 37: I2C_Wait();
 15544                           
 15545                           ;incstack = 0
 15546  00706E  EC79  F038         	call	_I2C_Wait	;wreg free
 15547                           
 15548                           ;I2C.c: 38: PEN = 1;
 15549  007072  84C5               	bsf	4037,2,c	;volatile
 15550  007074  0012               	return		;funcret
 15551  007076  FFFF               	dw	65535	; errata NOP
 15552  007078                     __end_of_I2C_Stop:
 15553                           	opt stack 0
 15554                           tosu	equ	0xFFF
 15555                           tosh	equ	0xFFE
 15556                           tosl	equ	0xFFD
 15557                           pclath	equ	0xFFA
 15558                           tblptru	equ	0xFF8
 15559                           tblptrh	equ	0xFF7
 15560                           tblptrl	equ	0xFF6
 15561                           tablat	equ	0xFF5
 15562                           prodh	equ	0xFF4
 15563                           prodl	equ	0xFF3
 15564                           intcon	equ	0xFF2
 15565                           indf0	equ	0xFEF
 15566                           postinc0	equ	0xFEE
 15567                           fsr0h	equ	0xFEA
 15568                           fsr0l	equ	0xFE9
 15569                           wreg	equ	0xFE8
 15570                           postdec1	equ	0xFE5
 15571                           fsr1l	equ	0xFE1
 15572                           indf2	equ	0xFDF
 15573                           postinc2	equ	0xFDE
 15574                           postdec2	equ	0xFDD
 15575                           fsr2h	equ	0xFDA
 15576                           fsr2l	equ	0xFD9
 15577                           status	equ	0xFD8
 15578                           
 15579 ;; *************** function _I2C_Start *****************
 15580 ;; Defined at:
 15581 ;;		line 26 in file "I2C.c"
 15582 ;; Parameters:    Size  Location     Type
 15583 ;;		None
 15584 ;; Auto vars:     Size  Location     Type
 15585 ;;		None
 15586 ;; Return value:  Size  Location     Type
 15587 ;;                  1    wreg      void 
 15588 ;; Registers used:
 15589 ;;		wreg, status,2, status,0, cstack
 15590 ;; Tracked objects:
 15591 ;;		On entry : 0/0
 15592 ;;		On exit  : 0/0
 15593 ;;		Unchanged: 0/0
 15594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15595 ;;      Params:         0       0       0       0       0       0       0
 15596 ;;      Locals:         0       0       0       0       0       0       0
 15597 ;;      Temps:          0       0       0       0       0       0       0
 15598 ;;      Totals:         0       0       0       0       0       0       0
 15599 ;;Total ram usage:        0 bytes
 15600 ;; Hardware stack levels used:    1
 15601 ;; Hardware stack levels required when called:    7
 15602 ;; This function calls:
 15603 ;;		_I2C_Wait
 15604 ;; This function is called by:
 15605 ;;		_writeEEPROM_ext
 15606 ;;		_readEEPROM_ext
 15607 ;;		_setDS1307TimeDate
 15608 ;;		_getDS1307TimeDate
 15609 ;;		_RTC_Init
 15610 ;;		_getDS1307Time
 15611 ;;		_setDS1307Time
 15612 ;; This function uses a non-reentrant model
 15613 ;;
 15614                           
 15615                           	psect	text59
 15616  007060                     __ptext59:
 15617                           	opt stack 0
 15618  007060                     _I2C_Start:
 15619                           	opt stack 0
 15620  007060  FFFF               	dw	65535	; assembler added errata NOP
 15621                           
 15622                           ;I2C.c: 27: I2C_Wait();
 15623                           
 15624                           ;incstack = 0
 15625  007062  EC79  F038         	call	_I2C_Wait	;wreg free
 15626                           
 15627                           ;I2C.c: 28: SEN = 1;
 15628  007066  80C5               	bsf	4037,0,c	;volatile
 15629  007068  0012               	return		;funcret
 15630  00706A  FFFF               	dw	65535	; errata NOP
 15631  00706C                     __end_of_I2C_Start:
 15632                           	opt stack 0
 15633                           tosu	equ	0xFFF
 15634                           tosh	equ	0xFFE
 15635                           tosl	equ	0xFFD
 15636                           pclath	equ	0xFFA
 15637                           tblptru	equ	0xFF8
 15638                           tblptrh	equ	0xFF7
 15639                           tblptrl	equ	0xFF6
 15640                           tablat	equ	0xFF5
 15641                           prodh	equ	0xFF4
 15642                           prodl	equ	0xFF3
 15643                           intcon	equ	0xFF2
 15644                           indf0	equ	0xFEF
 15645                           postinc0	equ	0xFEE
 15646                           fsr0h	equ	0xFEA
 15647                           fsr0l	equ	0xFE9
 15648                           wreg	equ	0xFE8
 15649                           postdec1	equ	0xFE5
 15650                           fsr1l	equ	0xFE1
 15651                           indf2	equ	0xFDF
 15652                           postinc2	equ	0xFDE
 15653                           postdec2	equ	0xFDD
 15654                           fsr2h	equ	0xFDA
 15655                           fsr2l	equ	0xFD9
 15656                           status	equ	0xFD8
 15657                           
 15658 ;; *************** function _I2C_Wait *****************
 15659 ;; Defined at:
 15660 ;;		line 22 in file "I2C.c"
 15661 ;; Parameters:    Size  Location     Type
 15662 ;;		None
 15663 ;; Auto vars:     Size  Location     Type
 15664 ;;		None
 15665 ;; Return value:  Size  Location     Type
 15666 ;;                  1    wreg      void 
 15667 ;; Registers used:
 15668 ;;		wreg, status,2, status,0
 15669 ;; Tracked objects:
 15670 ;;		On entry : 0/0
 15671 ;;		On exit  : 0/0
 15672 ;;		Unchanged: 0/0
 15673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15674 ;;      Params:         0       0       0       0       0       0       0
 15675 ;;      Locals:         0       0       0       0       0       0       0
 15676 ;;      Temps:          0       1       0       0       0       0       0
 15677 ;;      Totals:         0       1       0       0       0       0       0
 15678 ;;Total ram usage:        1 bytes
 15679 ;; Hardware stack levels used:    1
 15680 ;; Hardware stack levels required when called:    6
 15681 ;; This function calls:
 15682 ;;		Nothing
 15683 ;; This function is called by:
 15684 ;;		_I2C_Start
 15685 ;;		_I2C_Restart
 15686 ;;		_I2C_Stop
 15687 ;;		_I2C_Write
 15688 ;;		_I2C_Read
 15689 ;; This function uses a non-reentrant model
 15690 ;;
 15691                           
 15692                           	psect	text60
 15693  0070F2                     __ptext60:
 15694                           	opt stack 0
 15695  0070F2                     _I2C_Wait:
 15696                           	opt stack 0
 15697  0070F2  FFFF               	dw	65535	; assembler added errata NOP
 15698                           
 15699                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 15700                           
 15701                           ;incstack = 0
 15702  0070F4  B4C7               	btfsc	4039,2,c	;volatile
 15703  0070F6  D7FD               	goto	_I2C_Wait
 15704  0070F8  CFC5 F080          	movff	4037,??_I2C_Wait	;volatile
 15705  0070FC  0E1F               	movlw	31
 15706  0070FE  0100               	movlb	0	; () banked
 15707  007100  1780               	andwf	??_I2C_Wait& (0+255),f,b
 15708  007102  B4D8               	btfsc	status,2,c
 15709                           
 15710                           ; BSR set to: 0
 15711                           
 15712                           ; BSR set to: 0
 15713  007104  0012               	return		;funcret
 15714  007106  FFFF               	dw	65535	; assembler added errata NOP
 15715  007108  D7F4               	goto	_I2C_Wait
 15716  00710A  FFFF               	dw	65535	; errata NOP
 15717  00710C                     __end_of_I2C_Wait:
 15718                           	opt stack 0
 15719                           tosu	equ	0xFFF
 15720                           tosh	equ	0xFFE
 15721                           tosl	equ	0xFFD
 15722                           pclath	equ	0xFFA
 15723                           tblptru	equ	0xFF8
 15724                           tblptrh	equ	0xFF7
 15725                           tblptrl	equ	0xFF6
 15726                           tablat	equ	0xFF5
 15727                           prodh	equ	0xFF4
 15728                           prodl	equ	0xFF3
 15729                           intcon	equ	0xFF2
 15730                           indf0	equ	0xFEF
 15731                           postinc0	equ	0xFEE
 15732                           fsr0h	equ	0xFEA
 15733                           fsr0l	equ	0xFE9
 15734                           wreg	equ	0xFE8
 15735                           postdec1	equ	0xFE5
 15736                           fsr1l	equ	0xFE1
 15737                           indf2	equ	0xFDF
 15738                           postinc2	equ	0xFDE
 15739                           postdec2	equ	0xFDD
 15740                           fsr2h	equ	0xFDA
 15741                           fsr2l	equ	0xFD9
 15742                           status	equ	0xFD8
 15743                           
 15744 ;; *************** function _Lcd_Init *****************
 15745 ;; Defined at:
 15746 ;;		line 12 in file "lcd.h"
 15747 ;; Parameters:    Size  Location     Type
 15748 ;;		None
 15749 ;; Auto vars:     Size  Location     Type
 15750 ;;		None
 15751 ;; Return value:  Size  Location     Type
 15752 ;;                  1    wreg      void 
 15753 ;; Registers used:
 15754 ;;		wreg, status,2, cstack
 15755 ;; Tracked objects:
 15756 ;;		On entry : 0/0
 15757 ;;		On exit  : 0/0
 15758 ;;		Unchanged: 0/0
 15759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15760 ;;      Params:         0       0       0       0       0       0       0
 15761 ;;      Locals:         0       0       0       0       0       0       0
 15762 ;;      Temps:          0       1       0       0       0       0       0
 15763 ;;      Totals:         0       1       0       0       0       0       0
 15764 ;;Total ram usage:        1 bytes
 15765 ;; Hardware stack levels used:    1
 15766 ;; Hardware stack levels required when called:    8
 15767 ;; This function calls:
 15768 ;;		_Lcd_Cmd
 15769 ;;		_Lcd_Port
 15770 ;; This function is called by:
 15771 ;;		_main
 15772 ;; This function uses a non-reentrant model
 15773 ;;
 15774                           
 15775                           	psect	text61
 15776  003D0C                     __ptext61:
 15777                           	opt stack 0
 15778  003D0C                     _Lcd_Init:
 15779                           	opt stack 0
 15780  003D0C  FFFF               	dw	65535	; assembler added errata NOP
 15781                           
 15782                           ;lcd.h: 21: Lcd_Port(0x00);
 15783                           
 15784                           ; BSR set to: 0
 15785                           ;incstack = 0
 15786  003D0E  0E00               	movlw	0
 15787  003D10  EC6C  F03B         	call	_Lcd_Port
 15788                           
 15789                           ;lcd.h: 22: _delay((unsigned long)((30)*(8000000/4000.0)));
 15790  003D14  0E3B               	movlw	59
 15791  003D16  0100               	movlb	0	; () banked
 15792  003D18  6F83               	movwf	??_Lcd_Init& (0+255),b
 15793  003D1A  0E79               	movlw	121
 15794  003D1C                     u19237:
 15795  003D1C  FFFF               	dw	65535	; errata NOP
 15796  003D1E  2EE8               	decfsz	wreg,f,c
 15797  003D20  D7FD               	bra	u19237
 15798  003D22  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 15799  003D24  D7FB               	bra	u19237
 15800  003D26  D000               	nop2	
 15801  003D28  F000               	nop	
 15802                           
 15803                           ;lcd.h: 23: Lcd_Cmd(0x03);
 15804  003D2A  0E03               	movlw	3
 15805  003D2C  EC3C  F039         	call	_Lcd_Cmd
 15806                           
 15807                           ;lcd.h: 24: _delay((unsigned long)((15)*(8000000/4000.0)));
 15808  003D30  0E1E               	movlw	30
 15809  003D32  0100               	movlb	0	; () banked
 15810  003D34  6F83               	movwf	??_Lcd_Init& (0+255),b
 15811  003D36  0E3C               	movlw	60
 15812  003D38                     u19247:
 15813  003D38  FFFF               	dw	65535	; errata NOP
 15814  003D3A  2EE8               	decfsz	wreg,f,c
 15815  003D3C  D7FD               	bra	u19247
 15816  003D3E  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 15817  003D40  D7FB               	bra	u19247
 15818  003D42  F000               	nop	
 15819                           
 15820                           ;lcd.h: 25: Lcd_Cmd(0x03);
 15821  003D44  0E03               	movlw	3
 15822  003D46  EC3C  F039         	call	_Lcd_Cmd
 15823                           
 15824                           ;lcd.h: 26: _delay((unsigned long)((20)*(8000000/4000.0)));
 15825  003D4A  0E27               	movlw	39
 15826  003D4C  0100               	movlb	0	; () banked
 15827  003D4E  6F83               	movwf	??_Lcd_Init& (0+255),b
 15828  003D50  0EFB               	movlw	251
 15829  003D52                     u19257:
 15830  003D52  FFFF               	dw	65535	; errata NOP
 15831  003D54  2EE8               	decfsz	wreg,f,c
 15832  003D56  D7FD               	bra	u19257
 15833  003D58  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 15834  003D5A  D7FB               	bra	u19257
 15835  003D5C  D000               	nop2	
 15836  003D5E  F000               	nop	
 15837                           
 15838                           ;lcd.h: 27: Lcd_Cmd(0x03);
 15839  003D60  0E03               	movlw	3
 15840  003D62  EC3C  F039         	call	_Lcd_Cmd
 15841                           
 15842                           ;lcd.h: 29: Lcd_Cmd(0x02);
 15843  003D66  0E02               	movlw	2
 15844  003D68  EC3C  F039         	call	_Lcd_Cmd
 15845                           
 15846                           ;lcd.h: 30: Lcd_Cmd(0x02);
 15847  003D6C  0E02               	movlw	2
 15848  003D6E  EC3C  F039         	call	_Lcd_Cmd
 15849                           
 15850                           ;lcd.h: 31: Lcd_Cmd(0x08);
 15851  003D72  0E08               	movlw	8
 15852  003D74  EC3C  F039         	call	_Lcd_Cmd
 15853                           
 15854                           ;lcd.h: 32: Lcd_Cmd(0x00);
 15855  003D78  0E00               	movlw	0
 15856  003D7A  EC3C  F039         	call	_Lcd_Cmd
 15857                           
 15858                           ;lcd.h: 33: Lcd_Cmd(0x0C);
 15859  003D7E  0E0C               	movlw	12
 15860  003D80  EC3C  F039         	call	_Lcd_Cmd
 15861                           
 15862                           ;lcd.h: 34: Lcd_Cmd(0x00);
 15863  003D84  0E00               	movlw	0
 15864  003D86  EC3C  F039         	call	_Lcd_Cmd
 15865                           
 15866                           ;lcd.h: 35: Lcd_Cmd(0x06);
 15867  003D8A  0E06               	movlw	6
 15868  003D8C  EC3C  F039         	call	_Lcd_Cmd
 15869  003D90  0012               	return		;funcret
 15870  003D92  FFFF               	dw	65535	; errata NOP
 15871  003D94                     __end_of_Lcd_Init:
 15872                           	opt stack 0
 15873                           tosu	equ	0xFFF
 15874                           tosh	equ	0xFFE
 15875                           tosl	equ	0xFFD
 15876                           pclath	equ	0xFFA
 15877                           tblptru	equ	0xFF8
 15878                           tblptrh	equ	0xFF7
 15879                           tblptrl	equ	0xFF6
 15880                           tablat	equ	0xFF5
 15881                           prodh	equ	0xFF4
 15882                           prodl	equ	0xFF3
 15883                           intcon	equ	0xFF2
 15884                           indf0	equ	0xFEF
 15885                           postinc0	equ	0xFEE
 15886                           fsr0h	equ	0xFEA
 15887                           fsr0l	equ	0xFE9
 15888                           wreg	equ	0xFE8
 15889                           postdec1	equ	0xFE5
 15890                           fsr1l	equ	0xFE1
 15891                           indf2	equ	0xFDF
 15892                           postinc2	equ	0xFDE
 15893                           postdec2	equ	0xFDD
 15894                           fsr2h	equ	0xFDA
 15895                           fsr2l	equ	0xFD9
 15896                           status	equ	0xFD8
 15897                           
 15898 ;; *************** function _Lcd_Clear *****************
 15899 ;; Defined at:
 15900 ;;		line 68 in file "lcd.h"
 15901 ;; Parameters:    Size  Location     Type
 15902 ;;		None
 15903 ;; Auto vars:     Size  Location     Type
 15904 ;;		None
 15905 ;; Return value:  Size  Location     Type
 15906 ;;                  1    wreg      void 
 15907 ;; Registers used:
 15908 ;;		wreg, status,2, cstack
 15909 ;; Tracked objects:
 15910 ;;		On entry : 0/0
 15911 ;;		On exit  : 0/0
 15912 ;;		Unchanged: 0/0
 15913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15914 ;;      Params:         0       0       0       0       0       0       0
 15915 ;;      Locals:         0       0       0       0       0       0       0
 15916 ;;      Temps:          0       0       0       0       0       0       0
 15917 ;;      Totals:         0       0       0       0       0       0       0
 15918 ;;Total ram usage:        0 bytes
 15919 ;; Hardware stack levels used:    1
 15920 ;; Hardware stack levels required when called:    8
 15921 ;; This function calls:
 15922 ;;		_Lcd_Cmd
 15923 ;; This function is called by:
 15924 ;;		_main
 15925 ;; This function uses a non-reentrant model
 15926 ;;
 15927                           
 15928                           	psect	text62
 15929  0070B2                     __ptext62:
 15930                           	opt stack 0
 15931  0070B2                     _Lcd_Clear:
 15932                           	opt stack 0
 15933  0070B2  FFFF               	dw	65535	; assembler added errata NOP
 15934                           
 15935                           ;lcd.h: 69: Lcd_Cmd(0);
 15936                           
 15937                           ;incstack = 0
 15938  0070B4  0E00               	movlw	0
 15939  0070B6  EC3C  F039         	call	_Lcd_Cmd
 15940                           
 15941                           ;lcd.h: 70: Lcd_Cmd(1);
 15942  0070BA  0E01               	movlw	1
 15943  0070BC  EC3C  F039         	call	_Lcd_Cmd
 15944  0070C0  0012               	return		;funcret
 15945  0070C2  FFFF               	dw	65535	; errata NOP
 15946  0070C4                     __end_of_Lcd_Clear:
 15947                           	opt stack 0
 15948                           tosu	equ	0xFFF
 15949                           tosh	equ	0xFFE
 15950                           tosl	equ	0xFFD
 15951                           pclath	equ	0xFFA
 15952                           tblptru	equ	0xFF8
 15953                           tblptrh	equ	0xFF7
 15954                           tblptrl	equ	0xFF6
 15955                           tablat	equ	0xFF5
 15956                           prodh	equ	0xFF4
 15957                           prodl	equ	0xFF3
 15958                           intcon	equ	0xFF2
 15959                           indf0	equ	0xFEF
 15960                           postinc0	equ	0xFEE
 15961                           fsr0h	equ	0xFEA
 15962                           fsr0l	equ	0xFE9
 15963                           wreg	equ	0xFE8
 15964                           postdec1	equ	0xFE5
 15965                           fsr1l	equ	0xFE1
 15966                           indf2	equ	0xFDF
 15967                           postinc2	equ	0xFDE
 15968                           postdec2	equ	0xFDD
 15969                           fsr2h	equ	0xFDA
 15970                           fsr2l	equ	0xFD9
 15971                           status	equ	0xFD8
 15972                           
 15973 ;; *************** function _Lcd_Cmd *****************
 15974 ;; Defined at:
 15975 ;;		line 60 in file "lcd.h"
 15976 ;; Parameters:    Size  Location     Type
 15977 ;;  a               1    wreg     unsigned char 
 15978 ;; Auto vars:     Size  Location     Type
 15979 ;;  a               1    2[BANK0 ] unsigned char 
 15980 ;; Return value:  Size  Location     Type
 15981 ;;                  1    wreg      void 
 15982 ;; Registers used:
 15983 ;;		wreg, status,2, cstack
 15984 ;; Tracked objects:
 15985 ;;		On entry : 0/0
 15986 ;;		On exit  : 0/0
 15987 ;;		Unchanged: 0/0
 15988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15989 ;;      Params:         0       0       0       0       0       0       0
 15990 ;;      Locals:         0       1       0       0       0       0       0
 15991 ;;      Temps:          0       1       0       0       0       0       0
 15992 ;;      Totals:         0       2       0       0       0       0       0
 15993 ;;Total ram usage:        2 bytes
 15994 ;; Hardware stack levels used:    1
 15995 ;; Hardware stack levels required when called:    7
 15996 ;; This function calls:
 15997 ;;		_Lcd_Port
 15998 ;; This function is called by:
 15999 ;;		_Lcd_Init
 16000 ;;		_Lcd_Clear
 16001 ;;		_Lcd_Set_Cursor
 16002 ;;		_criarCaracteresCGRAM
 16003 ;; This function uses a non-reentrant model
 16004 ;;
 16005                           
 16006                           	psect	text63
 16007  007278                     __ptext63:
 16008                           	opt stack 0
 16009  007278                     _Lcd_Cmd:
 16010                           	opt stack 0
 16011  007278  FFFF               	dw	65535	; assembler added errata NOP
 16012                           
 16013                           ;incstack = 0
 16014                           ;Lcd_Cmd@a stored from wreg
 16015  00727A  0100               	movlb	0	; () banked
 16016  00727C  6F82               	movwf	Lcd_Cmd@a& (0+255),b
 16017                           
 16018                           ;lcd.h: 61: PORTDbits.RD1 = 0;
 16019  00727E  9283               	bcf	3971,1,c	;volatile
 16020                           
 16021                           ;lcd.h: 62: Lcd_Port(a);
 16022  007280  0100               	movlb	0	; () banked
 16023  007282  5182               	movf	Lcd_Cmd@a& (0+255),w,b
 16024  007284  EC6C  F03B         	call	_Lcd_Port
 16025                           
 16026                           ;lcd.h: 63: PORTDbits.RD0 = 1;
 16027  007288  8083               	bsf	3971,0,c	;volatile
 16028                           
 16029                           ;lcd.h: 64: _delay((unsigned long)((15)*(8000000/4000.0)));
 16030  00728A  0E1E               	movlw	30
 16031  00728C  0100               	movlb	0	; () banked
 16032  00728E  6F81               	movwf	??_Lcd_Cmd& (0+255),b
 16033  007290  0E3C               	movlw	60
 16034  007292                     u19267:
 16035  007292  FFFF               	dw	65535	; errata NOP
 16036  007294  2EE8               	decfsz	wreg,f,c
 16037  007296  D7FD               	bra	u19267
 16038  007298  2F81               	decfsz	??_Lcd_Cmd& (0+255),f,b
 16039  00729A  D7FB               	bra	u19267
 16040  00729C  F000               	nop	
 16041                           
 16042                           ;lcd.h: 65: PORTDbits.RD0 = 0;
 16043  00729E  9083               	bcf	3971,0,c	;volatile
 16044  0072A0  0012               	return		;funcret
 16045  0072A2  FFFF               	dw	65535	; errata NOP
 16046  0072A4                     __end_of_Lcd_Cmd:
 16047                           	opt stack 0
 16048                           tosu	equ	0xFFF
 16049                           tosh	equ	0xFFE
 16050                           tosl	equ	0xFFD
 16051                           pclath	equ	0xFFA
 16052                           tblptru	equ	0xFF8
 16053                           tblptrh	equ	0xFF7
 16054                           tblptrl	equ	0xFF6
 16055                           tablat	equ	0xFF5
 16056                           prodh	equ	0xFF4
 16057                           prodl	equ	0xFF3
 16058                           intcon	equ	0xFF2
 16059                           indf0	equ	0xFEF
 16060                           postinc0	equ	0xFEE
 16061                           fsr0h	equ	0xFEA
 16062                           fsr0l	equ	0xFE9
 16063                           wreg	equ	0xFE8
 16064                           postdec1	equ	0xFE5
 16065                           fsr1l	equ	0xFE1
 16066                           indf2	equ	0xFDF
 16067                           postinc2	equ	0xFDE
 16068                           postdec2	equ	0xFDD
 16069                           fsr2h	equ	0xFDA
 16070                           fsr2l	equ	0xFD9
 16071                           status	equ	0xFD8
 16072                           
 16073 ;; *************** function _Lcd_Port *****************
 16074 ;; Defined at:
 16075 ;;		line 38 in file "lcd.h"
 16076 ;; Parameters:    Size  Location     Type
 16077 ;;  a               1    wreg     unsigned char 
 16078 ;; Auto vars:     Size  Location     Type
 16079 ;;  a               1    0[BANK0 ] unsigned char 
 16080 ;; Return value:  Size  Location     Type
 16081 ;;                  1    wreg      void 
 16082 ;; Registers used:
 16083 ;;		wreg
 16084 ;; Tracked objects:
 16085 ;;		On entry : 0/0
 16086 ;;		On exit  : 0/0
 16087 ;;		Unchanged: 0/0
 16088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16089 ;;      Params:         0       0       0       0       0       0       0
 16090 ;;      Locals:         0       1       0       0       0       0       0
 16091 ;;      Temps:          0       0       0       0       0       0       0
 16092 ;;      Totals:         0       1       0       0       0       0       0
 16093 ;;Total ram usage:        1 bytes
 16094 ;; Hardware stack levels used:    1
 16095 ;; Hardware stack levels required when called:    6
 16096 ;; This function calls:
 16097 ;;		Nothing
 16098 ;; This function is called by:
 16099 ;;		_Lcd_Init
 16100 ;;		_Lcd_Cmd
 16101 ;;		_Lcd_Write_Char
 16102 ;; This function uses a non-reentrant model
 16103 ;;
 16104                           
 16105                           	psect	text64
 16106  0076D8                     __ptext64:
 16107                           	opt stack 0
 16108  0076D8                     _Lcd_Port:
 16109                           	opt stack 0
 16110  0076D8  FFFF               	dw	65535	; assembler added errata NOP
 16111                           
 16112                           ;incstack = 0
 16113                           ;Lcd_Port@a stored from wreg
 16114  0076DA  0100               	movlb	0	; () banked
 16115  0076DC  6F80               	movwf	Lcd_Port@a& (0+255),b
 16116                           
 16117                           ;lcd.h: 39: if (a & 1)
 16118  0076DE  0100               	movlb	0	; () banked
 16119  0076E0  A180               	btfss	Lcd_Port@a& (0+255),0,b
 16120  0076E2  D002               	goto	l559
 16121                           
 16122                           ; BSR set to: 0
 16123                           ;lcd.h: 40: PORTDbits.RD2 = 1;
 16124  0076E4  8483               	bsf	3971,2,c	;volatile
 16125  0076E6  D002               	goto	l560
 16126  0076E8                     l559:
 16127  0076E8  FFFF               	dw	65535	; assembler added errata NOP
 16128                           
 16129                           ; BSR set to: 0
 16130                           ;lcd.h: 41: else
 16131                           ;lcd.h: 42: PORTDbits.RD2 = 0;
 16132  0076EA  9483               	bcf	3971,2,c	;volatile
 16133  0076EC                     l560:
 16134  0076EC  FFFF               	dw	65535	; assembler added errata NOP
 16135                           
 16136                           ; BSR set to: 0
 16137                           ;lcd.h: 44: if (a & 2)
 16138                           
 16139                           ; BSR set to: 0
 16140  0076EE  A380               	btfss	Lcd_Port@a& (0+255),1,b
 16141  0076F0  D002               	goto	l561
 16142                           
 16143                           ; BSR set to: 0
 16144                           ;lcd.h: 45: PORTDbits.RD3 = 1;
 16145  0076F2  8683               	bsf	3971,3,c	;volatile
 16146  0076F4  D002               	goto	l562
 16147  0076F6                     l561:
 16148  0076F6  FFFF               	dw	65535	; assembler added errata NOP
 16149                           
 16150                           ; BSR set to: 0
 16151                           ;lcd.h: 46: else
 16152                           ;lcd.h: 47: PORTDbits.RD3 = 0;
 16153  0076F8  9683               	bcf	3971,3,c	;volatile
 16154  0076FA                     l562:
 16155  0076FA  FFFF               	dw	65535	; assembler added errata NOP
 16156                           
 16157                           ; BSR set to: 0
 16158                           ;lcd.h: 49: if (a & 4)
 16159                           
 16160                           ; BSR set to: 0
 16161  0076FC  A580               	btfss	Lcd_Port@a& (0+255),2,b
 16162  0076FE  D002               	goto	l563
 16163                           
 16164                           ; BSR set to: 0
 16165                           ;lcd.h: 50: PORTDbits.RD4 = 1;
 16166  007700  8883               	bsf	3971,4,c	;volatile
 16167  007702  D002               	goto	l564
 16168  007704                     l563:
 16169  007704  FFFF               	dw	65535	; assembler added errata NOP
 16170                           
 16171                           ; BSR set to: 0
 16172                           ;lcd.h: 51: else
 16173                           ;lcd.h: 52: PORTDbits.RD4 = 0;
 16174  007706  9883               	bcf	3971,4,c	;volatile
 16175  007708                     l564:
 16176  007708  FFFF               	dw	65535	; assembler added errata NOP
 16177                           
 16178                           ; BSR set to: 0
 16179                           ;lcd.h: 54: if (a & 8)
 16180                           
 16181                           ; BSR set to: 0
 16182  00770A  A780               	btfss	Lcd_Port@a& (0+255),3,b
 16183  00770C  D002               	goto	l565
 16184                           
 16185                           ; BSR set to: 0
 16186                           ;lcd.h: 55: PORTDbits.RD5 = 1;
 16187  00770E  8A83               	bsf	3971,5,c	;volatile
 16188  007710  D002               	goto	l566
 16189  007712                     l565:
 16190  007712  FFFF               	dw	65535	; assembler added errata NOP
 16191                           
 16192                           ; BSR set to: 0
 16193                           ;lcd.h: 56: else
 16194                           ;lcd.h: 57: PORTDbits.RD5 = 0;
 16195  007714  9A83               	bcf	3971,5,c	;volatile
 16196  007716                     l566:
 16197  007716  FFFF               	dw	65535	; assembler added errata NOP
 16198                           
 16199                           ; BSR set to: 0
 16200                           
 16201                           ; BSR set to: 0
 16202  007718  0012               	return		;funcret
 16203  00771A  FFFF               	dw	65535	; errata NOP
 16204  00771C                     __end_of_Lcd_Port:
 16205                           	opt stack 0
 16206                           tosu	equ	0xFFF
 16207                           tosh	equ	0xFFE
 16208                           tosl	equ	0xFFD
 16209                           pclath	equ	0xFFA
 16210                           tblptru	equ	0xFF8
 16211                           tblptrh	equ	0xFF7
 16212                           tblptrl	equ	0xFF6
 16213                           tablat	equ	0xFF5
 16214                           prodh	equ	0xFF4
 16215                           prodl	equ	0xFF3
 16216                           intcon	equ	0xFF2
 16217                           indf0	equ	0xFEF
 16218                           postinc0	equ	0xFEE
 16219                           fsr0h	equ	0xFEA
 16220                           fsr0l	equ	0xFE9
 16221                           wreg	equ	0xFE8
 16222                           postdec1	equ	0xFE5
 16223                           fsr1l	equ	0xFE1
 16224                           indf2	equ	0xFDF
 16225                           postinc2	equ	0xFDE
 16226                           postdec2	equ	0xFDD
 16227                           fsr2h	equ	0xFDA
 16228                           fsr2l	equ	0xFD9
 16229                           status	equ	0xFD8
 16230                           
 16231 ;; *************** function _I2C_Master_Init *****************
 16232 ;; Defined at:
 16233 ;;		line 13 in file "I2C.c"
 16234 ;; Parameters:    Size  Location     Type
 16235 ;;  c               4   13[BANK0 ] const unsigned long 
 16236 ;; Auto vars:     Size  Location     Type
 16237 ;;		None
 16238 ;; Return value:  Size  Location     Type
 16239 ;;                  1    wreg      void 
 16240 ;; Registers used:
 16241 ;;		wreg, status,2, status,0, cstack
 16242 ;; Tracked objects:
 16243 ;;		On entry : 0/0
 16244 ;;		On exit  : 0/0
 16245 ;;		Unchanged: 0/0
 16246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16247 ;;      Params:         0       4       0       0       0       0       0
 16248 ;;      Locals:         0       0       0       0       0       0       0
 16249 ;;      Temps:          0       4       0       0       0       0       0
 16250 ;;      Totals:         0       8       0       0       0       0       0
 16251 ;;Total ram usage:        8 bytes
 16252 ;; Hardware stack levels used:    1
 16253 ;; Hardware stack levels required when called:    7
 16254 ;; This function calls:
 16255 ;;		___lldiv
 16256 ;; This function is called by:
 16257 ;;		_main
 16258 ;; This function uses a non-reentrant model
 16259 ;;
 16260                           
 16261                           	psect	text65
 16262  007B54                     __ptext65:
 16263                           	opt stack 0
 16264  007B54                     _I2C_Master_Init:
 16265                           	opt stack 0
 16266  007B54  FFFF               	dw	65535	; assembler added errata NOP
 16267                           
 16268                           ;I2C.c: 14: SSPCON1 = 0b00101000;
 16269                           
 16270                           ; BSR set to: 0
 16271                           ;incstack = 0
 16272  007B56  0E28               	movlw	40
 16273  007B58  6EC6               	movwf	4038,c	;volatile
 16274                           
 16275                           ;I2C.c: 15: SSPCON2 = 0;
 16276  007B5A  0E00               	movlw	0
 16277  007B5C  6EC5               	movwf	4037,c	;volatile
 16278                           
 16279                           ;I2C.c: 16: SSPADD = (8000000 / (4 * c)) - 1;
 16280  007B5E  0E00               	movlw	0
 16281  007B60  0100               	movlb	0	; () banked
 16282  007B62  6F80               	movwf	___lldiv@dividend& (0+255),b
 16283  007B64  0E12               	movlw	18
 16284  007B66  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 16285  007B68  0E7A               	movlw	122
 16286  007B6A  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 16287  007B6C  0E00               	movlw	0
 16288  007B6E  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 16289  007B70  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 16290  007B74  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 16291  007B78  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 16292  007B7C  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 16293  007B80  0E02               	movlw	2
 16294  007B82                     u8575:
 16295  007B82  FFFF               	dw	65535	; assembler added errata NOP
 16296  007B84  90D8               	bcf	status,0,c
 16297  007B86  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 16298  007B88  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 16299  007B8A  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 16300  007B8C  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 16301  007B8E  2EE8               	decfsz	wreg,f,c
 16302  007B90  D7F8               	goto	u8575
 16303  007B92  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 16304  007B96  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 16305  007B9A  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 16306  007B9E  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 16307  007BA2  EC3D  F01E         	call	___lldiv	;wreg free
 16308  007BA6  0100               	movlb	0	; () banked
 16309  007BA8  0580               	decf	?___lldiv& (0+255),w,b
 16310  007BAA  6EC8               	movwf	4040,c	;volatile
 16311                           
 16312                           ; BSR set to: 0
 16313                           ;I2C.c: 17: SSPSTAT = 0;
 16314  007BAC  0E00               	movlw	0
 16315  007BAE  6EC7               	movwf	4039,c	;volatile
 16316                           
 16317                           ; BSR set to: 0
 16318                           ;I2C.c: 18: TRISCbits.RC3 = 1;
 16319  007BB0  8694               	bsf	3988,3,c	;volatile
 16320                           
 16321                           ; BSR set to: 0
 16322                           ;I2C.c: 19: TRISCbits.RC4 = 1;
 16323  007BB2  8894               	bsf	3988,4,c	;volatile
 16324                           
 16325                           ; BSR set to: 0
 16326  007BB4  0012               	return		;funcret
 16327  007BB6  FFFF               	dw	65535	; errata NOP
 16328  007BB8                     __end_of_I2C_Master_Init:
 16329                           	opt stack 0
 16330                           tosu	equ	0xFFF
 16331                           tosh	equ	0xFFE
 16332                           tosl	equ	0xFFD
 16333                           pclath	equ	0xFFA
 16334                           tblptru	equ	0xFF8
 16335                           tblptrh	equ	0xFF7
 16336                           tblptrl	equ	0xFF6
 16337                           tablat	equ	0xFF5
 16338                           prodh	equ	0xFF4
 16339                           prodl	equ	0xFF3
 16340                           intcon	equ	0xFF2
 16341                           indf0	equ	0xFEF
 16342                           postinc0	equ	0xFEE
 16343                           fsr0h	equ	0xFEA
 16344                           fsr0l	equ	0xFE9
 16345                           wreg	equ	0xFE8
 16346                           postdec1	equ	0xFE5
 16347                           fsr1l	equ	0xFE1
 16348                           indf2	equ	0xFDF
 16349                           postinc2	equ	0xFDE
 16350                           postdec2	equ	0xFDD
 16351                           fsr2h	equ	0xFDA
 16352                           fsr2l	equ	0xFD9
 16353                           status	equ	0xFD8
 16354                           
 16355 ;; *************** function ___lldiv *****************
 16356 ;; Defined at:
 16357 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 16358 ;; Parameters:    Size  Location     Type
 16359 ;;  dividend        4    0[BANK0 ] unsigned long 
 16360 ;;  divisor         4    4[BANK0 ] unsigned long 
 16361 ;; Auto vars:     Size  Location     Type
 16362 ;;  quotient        4    8[BANK0 ] unsigned long 
 16363 ;;  counter         1   12[BANK0 ] unsigned char 
 16364 ;; Return value:  Size  Location     Type
 16365 ;;                  4    0[BANK0 ] unsigned long 
 16366 ;; Registers used:
 16367 ;;		wreg, status,2, status,0
 16368 ;; Tracked objects:
 16369 ;;		On entry : 0/0
 16370 ;;		On exit  : 0/0
 16371 ;;		Unchanged: 0/0
 16372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16373 ;;      Params:         0       8       0       0       0       0       0
 16374 ;;      Locals:         0       5       0       0       0       0       0
 16375 ;;      Temps:          0       0       0       0       0       0       0
 16376 ;;      Totals:         0      13       0       0       0       0       0
 16377 ;;Total ram usage:       13 bytes
 16378 ;; Hardware stack levels used:    1
 16379 ;; Hardware stack levels required when called:    6
 16380 ;; This function calls:
 16381 ;;		Nothing
 16382 ;; This function is called by:
 16383 ;;		_I2C_Master_Init
 16384 ;; This function uses a non-reentrant model
 16385 ;;
 16386                           
 16387                           	psect	text66
 16388  003C7A                     __ptext66:
 16389                           	opt stack 0
 16390  003C7A                     ___lldiv:
 16391                           	opt stack 0
 16392  003C7A  FFFF               	dw	65535	; assembler added errata NOP
 16393                           
 16394                           ; BSR set to: 0
 16395                           ;incstack = 0
 16396  003C7C  0E00               	movlw	0
 16397  003C7E  0100               	movlb	0	; () banked
 16398  003C80  6F88               	movwf	___lldiv@quotient& (0+255),b
 16399  003C82  0E00               	movlw	0
 16400  003C84  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 16401  003C86  0E00               	movlw	0
 16402  003C88  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 16403  003C8A  0E00               	movlw	0
 16404  003C8C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 16405                           
 16406                           ; BSR set to: 0
 16407  003C8E  5184               	movf	___lldiv@divisor& (0+255),w,b
 16408  003C90  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 16409  003C92  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 16410  003C94  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 16411  003C96  B4D8               	btfsc	status,2,c
 16412  003C98  D02E               	goto	l1399
 16413                           
 16414                           ; BSR set to: 0
 16415  003C9A  0E01               	movlw	1
 16416  003C9C  6F8C               	movwf	___lldiv@counter& (0+255),b
 16417  003C9E  D007               	goto	l1394
 16418  003CA0  FFFF               	dw	65535	; assembler added errata NOP
 16419                           
 16420                           ; BSR set to: 0
 16421                           
 16422                           ; BSR set to: 0
 16423  003CA2  90D8               	bcf	status,0,c
 16424  003CA4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 16425  003CA6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 16426  003CA8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 16427  003CAA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 16428  003CAC  2B8C               	incf	___lldiv@counter& (0+255),f,b
 16429  003CAE                     l1394:
 16430  003CAE  FFFF               	dw	65535	; assembler added errata NOP
 16431                           
 16432                           ; BSR set to: 0
 16433                           
 16434                           ; BSR set to: 0
 16435  003CB0  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 16436  003CB2  D7F6               	goto	l1395
 16437  003CB4                     u7280:
 16438  003CB4  FFFF               	dw	65535	; assembler added errata NOP
 16439                           
 16440                           ; BSR set to: 0
 16441                           
 16442                           ; BSR set to: 0
 16443                           
 16444                           ; BSR set to: 0
 16445  003CB6  90D8               	bcf	status,0,c
 16446  003CB8  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 16447  003CBA  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 16448  003CBC  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 16449  003CBE  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 16450                           
 16451                           ; BSR set to: 0
 16452  003CC0  5184               	movf	___lldiv@divisor& (0+255),w,b
 16453  003CC2  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 16454  003CC4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16455  003CC6  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 16456  003CC8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16457  003CCA  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 16458  003CCC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16459  003CCE  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 16460  003CD0  A0D8               	btfss	status,0,c
 16461  003CD2  D009               	goto	l1398
 16462                           
 16463                           ; BSR set to: 0
 16464  003CD4  5184               	movf	___lldiv@divisor& (0+255),w,b
 16465  003CD6  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 16466  003CD8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16467  003CDA  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 16468  003CDC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16469  003CDE  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 16470  003CE0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16471  003CE2  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 16472                           
 16473                           ; BSR set to: 0
 16474  003CE4  8188               	bsf	___lldiv@quotient& (0+255),0,b
 16475  003CE6                     l1398:
 16476  003CE6  FFFF               	dw	65535	; assembler added errata NOP
 16477                           
 16478                           ; BSR set to: 0
 16479                           
 16480                           ; BSR set to: 0
 16481  003CE8  90D8               	bcf	status,0,c
 16482  003CEA  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 16483  003CEC  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 16484  003CEE  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 16485  003CF0  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 16486                           
 16487                           ; BSR set to: 0
 16488  003CF2  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 16489  003CF4  D7DF               	goto	u7280
 16490  003CF6                     l1399:
 16491  003CF6  FFFF               	dw	65535	; assembler added errata NOP
 16492                           
 16493                           ; BSR set to: 0
 16494                           
 16495                           ; BSR set to: 0
 16496  003CF8  C088  F080         	movff	___lldiv@quotient,?___lldiv
 16497  003CFC  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 16498  003D00  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 16499  003D04  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 16500                           
 16501                           ; BSR set to: 0
 16502  003D08  0012               	return		;funcret
 16503  003D0A  FFFF               	dw	65535	; errata NOP
 16504  003D0C                     __end_of___lldiv:
 16505                           	opt stack 0
 16506                           tosu	equ	0xFFF
 16507                           tosh	equ	0xFFE
 16508                           tosl	equ	0xFFD
 16509                           pclath	equ	0xFFA
 16510                           tblptru	equ	0xFF8
 16511                           tblptrh	equ	0xFF7
 16512                           tblptrl	equ	0xFF6
 16513                           tablat	equ	0xFF5
 16514                           prodh	equ	0xFF4
 16515                           prodl	equ	0xFF3
 16516                           intcon	equ	0xFF2
 16517                           indf0	equ	0xFEF
 16518                           postinc0	equ	0xFEE
 16519                           fsr0h	equ	0xFEA
 16520                           fsr0l	equ	0xFE9
 16521                           wreg	equ	0xFE8
 16522                           postdec1	equ	0xFE5
 16523                           fsr1l	equ	0xFE1
 16524                           indf2	equ	0xFDF
 16525                           postinc2	equ	0xFDE
 16526                           postdec2	equ	0xFDD
 16527                           fsr2h	equ	0xFDA
 16528                           fsr2l	equ	0xFD9
 16529                           status	equ	0xFD8
 16530                           
 16531 ;; *************** function _TIMER0 *****************
 16532 ;; Defined at:
 16533 ;;		line 42 in file "Main.c"
 16534 ;; Parameters:    Size  Location     Type
 16535 ;;		None
 16536 ;; Auto vars:     Size  Location     Type
 16537 ;;		None
 16538 ;; Return value:  Size  Location     Type
 16539 ;;                  1    wreg      void 
 16540 ;; Registers used:
 16541 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16542 ;; Tracked objects:
 16543 ;;		On entry : 0/0
 16544 ;;		On exit  : 0/0
 16545 ;;		Unchanged: 0/0
 16546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16547 ;;      Params:         0       0       0       0       0       0       0
 16548 ;;      Locals:         0       0       0       0       0       0       0
 16549 ;;      Temps:         18       0       0       0       0       0       0
 16550 ;;      Totals:        18       0       0       0       0       0       0
 16551 ;;Total ram usage:       18 bytes
 16552 ;; Hardware stack levels used:    1
 16553 ;; Hardware stack levels required when called:    5
 16554 ;; This function calls:
 16555 ;;		_lerTransdutor
 16556 ;;		_readButtons
 16557 ;;		_timer
 16558 ;;		_tratarSerial
 16559 ;; This function is called by:
 16560 ;;		Interrupt level 2
 16561 ;; This function uses a non-reentrant model
 16562 ;;
 16563                           
 16564                           	psect	intcode
 16565  000008                     __pintcode:
 16566                           	opt stack 0
 16567  000008                     _TIMER0:
 16568                           	opt stack 0
 16569  000008  FFFF               	dw	65535	; assembler added errata NOP
 16570                           
 16571                           ; BSR set to: 0
 16572                           ;incstack = 0
 16573  00000A  8274               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16574  00000C  CFFA F032          	movff	pclath,??_TIMER0
 16575  000010  CFFB F033          	movff	pclatu,??_TIMER0+1
 16576  000014  CFE9 F034          	movff	fsr0l,??_TIMER0+2
 16577  000018  CFEA F035          	movff	fsr0h,??_TIMER0+3
 16578  00001C  CFE1 F036          	movff	fsr1l,??_TIMER0+4
 16579  000020  CFE2 F037          	movff	fsr1h,??_TIMER0+5
 16580  000024  CFD9 F038          	movff	fsr2l,??_TIMER0+6
 16581  000028  CFDA F039          	movff	fsr2h,??_TIMER0+7
 16582  00002C  CFF3 F03A          	movff	prodl,??_TIMER0+8
 16583  000030  CFF4 F03B          	movff	prodh,??_TIMER0+9
 16584  000034  CFF6 F03C          	movff	tblptrl,??_TIMER0+10
 16585  000038  CFF7 F03D          	movff	tblptrh,??_TIMER0+11
 16586  00003C  CFF8 F03E          	movff	tblptru,??_TIMER0+12
 16587  000040  CFF5 F03F          	movff	tablat,??_TIMER0+13
 16588  000044  C074  F040         	movff	btemp,??_TIMER0+14
 16589  000048  C075  F041         	movff	btemp+1,??_TIMER0+15
 16590  00004C  C076  F042         	movff	btemp+2,??_TIMER0+16
 16591  000050  C077  F043         	movff	btemp+3,??_TIMER0+17
 16592                           
 16593                           ;Main.c: 43: if (TMR0IF) {
 16594  000054  A4F2               	btfss	intcon,2,c	;volatile
 16595  000056  D019               	goto	i2l814
 16596                           
 16597                           ;Main.c: 44: TMR0IF = 0x00;
 16598  000058  94F2               	bcf	intcon,2,c	;volatile
 16599                           
 16600                           ;Main.c: 45: TMR0H = 0x3C;
 16601  00005A  0E3C               	movlw	60
 16602  00005C  6ED7               	movwf	4055,c	;volatile
 16603                           
 16604                           ;Main.c: 46: TMR0L = 0xB0;
 16605  00005E  0EB0               	movlw	176
 16606  000060  6ED6               	movwf	4054,c	;volatile
 16607                           
 16608                           ;Main.c: 47: readButtons();
 16609  000062  EC4D  F01F         	call	_readButtons	;wreg free
 16610                           
 16611                           ;Main.c: 48: base_sec++;
 16612  000066  2A65               	incf	_base_sec,f,c
 16613                           
 16614                           ;Main.c: 49: intervalo_leitura_adc++;
 16615  000068  2A62               	incf	_intervalo_leitura_adc,f,c
 16616                           
 16617                           ;Main.c: 51: lerTransdutor();
 16618  00006A  EC5E  F010         	call	_lerTransdutor	;wreg free
 16619                           
 16620                           ;Main.c: 53: blinkk = ~blinkk;
 16621  00006E  B073               	btfsc	_blinkk/(0+8),_blinkk& (0+7),c
 16622  000070  D002               	goto	i2u1899_40
 16623  000072  8073               	bsf	_blinkk/(0+8),_blinkk& (0+7),c
 16624  000074  D002               	goto	i2u1900_45
 16625  000076                     i2u1899_40:
 16626  000076  FFFF               	dw	65535	; assembler added errata NOP
 16627  000078  9073               	bcf	_blinkk/(0+8),_blinkk& (0+7),c
 16628  00007A                     i2u1900_45:
 16629  00007A  FFFF               	dw	65535	; assembler added errata NOP
 16630                           
 16631                           ;Main.c: 56: if (base_sec > 9) {
 16632  00007C  0E09               	movlw	9
 16633  00007E  6465               	cpfsgt	_base_sec,c
 16634  000080  D004               	goto	i2l814
 16635                           
 16636                           ;Main.c: 57: base_sec = 0;
 16637  000082  0E00               	movlw	0
 16638  000084  6E65               	movwf	_base_sec,c
 16639                           
 16640                           ;Main.c: 58: timer();
 16641  000086  EC5E  F01A         	call	_timer	;wreg free
 16642  00008A                     i2l814:
 16643  00008A  FFFF               	dw	65535	; assembler added errata NOP
 16644                           
 16645                           ;Main.c: 59: }
 16646                           ;Main.c: 60: }
 16647                           ;Main.c: 63: if (RCIF) {
 16648  00008C  AA9E               	btfss	3998,5,c	;volatile
 16649  00008E  D006               	goto	i2l815
 16650                           
 16651                           ;Main.c: 64: RCIF = 0x00;
 16652  000090  9A9E               	bcf	3998,5,c	;volatile
 16653                           
 16654                           ;Main.c: 66: tratarSerial(RCREG);
 16655  000092  CFAE F030          	movff	4014,tratarSerial@c	;volatile
 16656  000096  6A31               	clrf	tratarSerial@c+1,c
 16657  000098  EC27  F039         	call	_tratarSerial	;wreg free
 16658  00009C                     i2l815:
 16659  00009C  FFFF               	dw	65535	; assembler added errata NOP
 16660  00009E  C043  F077         	movff	??_TIMER0+17,btemp+3
 16661  0000A2  C042  F076         	movff	??_TIMER0+16,btemp+2
 16662  0000A6  C041  F075         	movff	??_TIMER0+15,btemp+1
 16663  0000AA  C040  F074         	movff	??_TIMER0+14,btemp
 16664  0000AE  C03F  FFF5         	movff	??_TIMER0+13,tablat
 16665  0000B2  C03E  FFF8         	movff	??_TIMER0+12,tblptru
 16666  0000B6  C03D  FFF7         	movff	??_TIMER0+11,tblptrh
 16667  0000BA  C03C  FFF6         	movff	??_TIMER0+10,tblptrl
 16668  0000BE  C03B  FFF4         	movff	??_TIMER0+9,prodh
 16669  0000C2  C03A  FFF3         	movff	??_TIMER0+8,prodl
 16670  0000C6  C039  FFDA         	movff	??_TIMER0+7,fsr2h
 16671  0000CA  C038  FFD9         	movff	??_TIMER0+6,fsr2l
 16672  0000CE  C037  FFE2         	movff	??_TIMER0+5,fsr1h
 16673  0000D2  C036  FFE1         	movff	??_TIMER0+4,fsr1l
 16674  0000D6  C035  FFEA         	movff	??_TIMER0+3,fsr0h
 16675  0000DA  C034  FFE9         	movff	??_TIMER0+2,fsr0l
 16676  0000DE  C033  FFFB         	movff	??_TIMER0+1,pclatu
 16677  0000E2  C032  FFFA         	movff	??_TIMER0,pclath
 16678  0000E6  9274               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16679  0000E8  0011               	retfie		f
 16680  0000EA  FFFF               	dw	65535	; errata NOP
 16681  0000EC                     __end_of_TIMER0:
 16682                           	opt stack 0
 16683                           tosu	equ	0xFFF
 16684                           tosh	equ	0xFFE
 16685                           tosl	equ	0xFFD
 16686                           pclatu	equ	0xFFB
 16687                           pclath	equ	0xFFA
 16688                           tblptru	equ	0xFF8
 16689                           tblptrh	equ	0xFF7
 16690                           tblptrl	equ	0xFF6
 16691                           tablat	equ	0xFF5
 16692                           prodh	equ	0xFF4
 16693                           prodl	equ	0xFF3
 16694                           intcon	equ	0xFF2
 16695                           indf0	equ	0xFEF
 16696                           postinc0	equ	0xFEE
 16697                           fsr0h	equ	0xFEA
 16698                           fsr0l	equ	0xFE9
 16699                           wreg	equ	0xFE8
 16700                           postdec1	equ	0xFE5
 16701                           fsr1h	equ	0xFE2
 16702                           fsr1l	equ	0xFE1
 16703                           indf2	equ	0xFDF
 16704                           postinc2	equ	0xFDE
 16705                           postdec2	equ	0xFDD
 16706                           fsr2h	equ	0xFDA
 16707                           fsr2l	equ	0xFD9
 16708                           status	equ	0xFD8
 16709                           
 16710 ;; *************** function _tratarSerial *****************
 16711 ;; Defined at:
 16712 ;;		line 27 in file "serial.h"
 16713 ;; Parameters:    Size  Location     Type
 16714 ;;  c               2   47[COMRAM] int 
 16715 ;; Auto vars:     Size  Location     Type
 16716 ;;		None
 16717 ;; Return value:  Size  Location     Type
 16718 ;;                  1    wreg      void 
 16719 ;; Registers used:
 16720 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16721 ;; Tracked objects:
 16722 ;;		On entry : 0/0
 16723 ;;		On exit  : 0/0
 16724 ;;		Unchanged: 0/0
 16725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16726 ;;      Params:         2       0       0       0       0       0       0
 16727 ;;      Locals:         0       0       0       0       0       0       0
 16728 ;;      Temps:          0       0       0       0       0       0       0
 16729 ;;      Totals:         2       0       0       0       0       0       0
 16730 ;;Total ram usage:        2 bytes
 16731 ;; Hardware stack levels used:    1
 16732 ;; Hardware stack levels required when called:    3
 16733 ;; This function calls:
 16734 ;;		i2_sprintf
 16735 ;; This function is called by:
 16736 ;;		_TIMER0
 16737 ;; This function uses a non-reentrant model
 16738 ;;
 16739                           
 16740                           	psect	text68
 16741  00724E                     __ptext68:
 16742                           	opt stack 0
 16743  00724E                     _tratarSerial:
 16744                           	opt stack 0
 16745  00724E  FFFF               	dw	65535	; assembler added errata NOP
 16746                           
 16747                           ;serial.h: 28: sprintf(bufferSerial, "%s%c", bufferSerial, c);
 16748                           
 16749                           ;incstack = 0
 16750  007250  0E14               	movlw	low _bufferSerial
 16751  007252  6E22               	movwf	i2sprintf@wh,c
 16752  007254  0E01               	movlw	high _bufferSerial
 16753  007256  6E23               	movwf	i2sprintf@wh+1,c
 16754  007258  0EF3               	movlw	low STR_1
 16755  00725A  6E24               	movwf	i2sprintf@f,c
 16756  00725C  0E7F               	movlw	high STR_1
 16757  00725E  6E25               	movwf	i2sprintf@f+1,c
 16758  007260  0E14               	movlw	low _bufferSerial
 16759  007262  6E26               	movwf	?i2_sprintf+4,c
 16760  007264  0E01               	movlw	high _bufferSerial
 16761  007266  6E27               	movwf	?i2_sprintf+5,c
 16762  007268  C030  F028         	movff	tratarSerial@c,?i2_sprintf+6
 16763  00726C  C031  F029         	movff	tratarSerial@c+1,?i2_sprintf+7
 16764  007270  EC8E  F03B         	call	i2_sprintf	;wreg free
 16765  007274  0012               	return		;funcret
 16766  007276  FFFF               	dw	65535	; errata NOP
 16767  007278                     __end_of_tratarSerial:
 16768                           	opt stack 0
 16769                           tosu	equ	0xFFF
 16770                           tosh	equ	0xFFE
 16771                           tosl	equ	0xFFD
 16772                           pclatu	equ	0xFFB
 16773                           pclath	equ	0xFFA
 16774                           tblptru	equ	0xFF8
 16775                           tblptrh	equ	0xFF7
 16776                           tblptrl	equ	0xFF6
 16777                           tablat	equ	0xFF5
 16778                           prodh	equ	0xFF4
 16779                           prodl	equ	0xFF3
 16780                           intcon	equ	0xFF2
 16781                           indf0	equ	0xFEF
 16782                           postinc0	equ	0xFEE
 16783                           fsr0h	equ	0xFEA
 16784                           fsr0l	equ	0xFE9
 16785                           wreg	equ	0xFE8
 16786                           postdec1	equ	0xFE5
 16787                           fsr1h	equ	0xFE2
 16788                           fsr1l	equ	0xFE1
 16789                           indf2	equ	0xFDF
 16790                           postinc2	equ	0xFDE
 16791                           postdec2	equ	0xFDD
 16792                           fsr2h	equ	0xFDA
 16793                           fsr2l	equ	0xFD9
 16794                           status	equ	0xFD8
 16795                           
 16796 ;; *************** function i2_sprintf *****************
 16797 ;; Defined at:
 16798 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
 16799 ;; Parameters:    Size  Location     Type
 16800 ;;  wh              2   33[COMRAM] PTR unsigned char 
 16801 ;;		 -> intToFloatStr@end(4), line4(21), line3(21), line2(21), 
 16802 ;;		 -> line1(21), bufferAUX(20), bufferSerial(80), 
 16803 ;;  f               2   35[COMRAM] PTR const unsigned char 
 16804 ;;		 -> intToFloatStr@conv(4), STR_96(15), STR_95(12), STR_94(10), 
 16805 ;;		 -> STR_93(13), STR_92(14), STR_91(17), STR_90(15), 
 16806 ;;		 -> STR_89(13), STR_88(10), STR_84(11), STR_83(15), 
 16807 ;;		 -> STR_82(15), STR_81(11), STR_80(11), STR_79(19), 
 16808 ;;		 -> STR_78(5), STR_77(12), STR_76(5), STR_75(14), 
 16809 ;;		 -> STR_74(19), STR_71(8), STR_68(3), STR_67(7), 
 16810 ;;		 -> STR_66(7), STR_64(12), STR_63(17), STR_62(19), 
 16811 ;;		 -> STR_59(16), STR_56(16), STR_53(12), STR_52(25), 
 16812 ;;		 -> STR_51(20), STR_50(20), STR_49(21), STR_48(15), 
 16813 ;;		 -> STR_47(6), STR_46(15), STR_45(6), STR_44(31), 
 16814 ;;		 -> STR_43(20), STR_42(19), STR_41(16), STR_40(14), 
 16815 ;;		 -> STR_39(17), STR_38(16), STR_37(15), STR_36(17), 
 16816 ;;		 -> STR_35(16), STR_34(19), STR_33(20), STR_30(16), 
 16817 ;;		 -> STR_27(16), STR_24(12), STR_23(19), STR_22(16), 
 16818 ;;		 -> STR_21(20), STR_3(5), STR_2(5), STR_1(5), 
 16819 ;; Auto vars:     Size  Location     Type
 16820 ;;  sprintf         4   43[COMRAM] struct __prbuf
 16821 ;;  sprintf         2   41[COMRAM] PTR void [1]
 16822 ;;		 -> ?i2_sprintf(2), ?_sprintf(2), ?_printf(2), 
 16823 ;; Return value:  Size  Location     Type
 16824 ;;                  2   33[COMRAM] int 
 16825 ;; Registers used:
 16826 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16827 ;; Tracked objects:
 16828 ;;		On entry : 0/0
 16829 ;;		On exit  : 0/0
 16830 ;;		Unchanged: 0/0
 16831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16832 ;;      Params:         8       0       0       0       0       0       0
 16833 ;;      Locals:         6       0       0       0       0       0       0
 16834 ;;      Temps:          0       0       0       0       0       0       0
 16835 ;;      Totals:        14       0       0       0       0       0       0
 16836 ;;Total ram usage:       14 bytes
 16837 ;; Hardware stack levels used:    1
 16838 ;; Hardware stack levels required when called:    2
 16839 ;; This function calls:
 16840 ;;		i2__doprnt
 16841 ;; This function is called by:
 16842 ;;		_tratarSerial
 16843 ;; This function uses a non-reentrant model
 16844 ;;
 16845                           
 16846                           	psect	text69
 16847  00771C                     __ptext69:
 16848                           	opt stack 0
 16849  00771C                     i2_sprintf:
 16850                           	opt stack 0
 16851  00771C  FFFF               	dw	65535	; assembler added errata NOP
 16852                           
 16853                           ;incstack = 0
 16854  00771E  C022  F02C         	movff	i2sprintf@wh,i2sprintf@pb
 16855  007722  C023  F02D         	movff	i2sprintf@wh+1,i2sprintf@pb+1
 16856  007726  0E00               	movlw	0
 16857  007728  6E2E               	movwf	i2sprintf@pb+2,c
 16858  00772A  0E00               	movlw	0
 16859  00772C  6E2F               	movwf	i2sprintf@pb+3,c
 16860  00772E  0E26               	movlw	low (?i2_sprintf+4)
 16861  007730  6E2A               	movwf	i2sprintf@ap,c
 16862  007732  0E00               	movlw	high (?i2_sprintf+4)
 16863  007734  6E2B               	movwf	i2sprintf@ap+1,c
 16864  007736  0E2C               	movlw	low i2sprintf@pb
 16865  007738  6E0D               	movwf	i2__doprnt@pb,c
 16866  00773A  0E00               	movlw	high i2sprintf@pb
 16867  00773C  6E0E               	movwf	i2__doprnt@pb+1,c
 16868  00773E  C024  F00F         	movff	i2sprintf@f,i2__doprnt@f
 16869  007742  C025  F010         	movff	i2sprintf@f+1,i2__doprnt@f+1
 16870  007746  0E2A               	movlw	low i2sprintf@ap
 16871  007748  6E11               	movwf	i2__doprnt@ap,c
 16872  00774A  0E00               	movlw	high i2sprintf@ap
 16873  00774C  6E12               	movwf	i2__doprnt@ap+1,c
 16874  00774E  EC77  F004         	call	i2__doprnt	;wreg free
 16875  007752  C02C  FFD9         	movff	i2sprintf@pb,fsr2l
 16876  007756  C02D  FFDA         	movff	i2sprintf@pb+1,fsr2h
 16877  00775A  0E00               	movlw	0
 16878  00775C  6EDF               	movwf	indf2,c
 16879                           
 16880                           ;	Return value of i2_sprintf is never used
 16881  00775E  0012               	return		;funcret
 16882  007760  FFFF               	dw	65535	; errata NOP
 16883  007762                     __end_ofi2_sprintf:
 16884                           	opt stack 0
 16885                           tosu	equ	0xFFF
 16886                           tosh	equ	0xFFE
 16887                           tosl	equ	0xFFD
 16888                           pclatu	equ	0xFFB
 16889                           pclath	equ	0xFFA
 16890                           tblptru	equ	0xFF8
 16891                           tblptrh	equ	0xFF7
 16892                           tblptrl	equ	0xFF6
 16893                           tablat	equ	0xFF5
 16894                           prodh	equ	0xFF4
 16895                           prodl	equ	0xFF3
 16896                           intcon	equ	0xFF2
 16897                           indf0	equ	0xFEF
 16898                           postinc0	equ	0xFEE
 16899                           fsr0h	equ	0xFEA
 16900                           fsr0l	equ	0xFE9
 16901                           wreg	equ	0xFE8
 16902                           postdec1	equ	0xFE5
 16903                           fsr1h	equ	0xFE2
 16904                           fsr1l	equ	0xFE1
 16905                           indf2	equ	0xFDF
 16906                           postinc2	equ	0xFDE
 16907                           postdec2	equ	0xFDD
 16908                           fsr2h	equ	0xFDA
 16909                           fsr2l	equ	0xFD9
 16910                           status	equ	0xFD8
 16911                           
 16912 ;; *************** function i2__doprnt *****************
 16913 ;; Defined at:
 16914 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 16915 ;; Parameters:    Size  Location     Type
 16916 ;;  pb              2   12[COMRAM] PTR struct __prbuf
 16917 ;;		 -> sprintf@pb(4), printf@pb(4), 
 16918 ;;  f               2   14[COMRAM] PTR const unsigned char 
 16919 ;;		 -> intToFloatStr@conv(4), STR_96(15), STR_95(12), STR_94(10), 
 16920 ;;		 -> STR_93(13), STR_92(14), STR_91(17), STR_90(15), 
 16921 ;;		 -> STR_89(13), STR_88(10), STR_85(9), STR_84(11), 
 16922 ;;		 -> STR_83(15), STR_82(15), STR_81(11), STR_80(11), 
 16923 ;;		 -> STR_79(19), STR_78(5), STR_77(12), STR_76(5), 
 16924 ;;		 -> STR_75(14), STR_74(19), STR_71(8), STR_68(3), 
 16925 ;;		 -> STR_67(7), STR_66(7), STR_64(12), STR_63(17), 
 16926 ;;		 -> STR_62(19), STR_59(16), STR_56(16), STR_53(12), 
 16927 ;;		 -> STR_52(25), STR_51(20), STR_50(20), STR_49(21), 
 16928 ;;		 -> STR_48(15), STR_47(6), STR_46(15), STR_45(6), 
 16929 ;;		 -> STR_44(31), STR_43(20), STR_42(19), STR_41(16), 
 16930 ;;		 -> STR_40(14), STR_39(17), STR_38(16), STR_37(15), 
 16931 ;;		 -> STR_36(17), STR_35(16), STR_34(19), STR_33(20), 
 16932 ;;		 -> STR_30(16), STR_27(16), STR_24(12), STR_23(19), 
 16933 ;;		 -> STR_22(16), STR_21(20), STR_20(7), STR_19(11), 
 16934 ;;		 -> STR_12(104), STR_11(63), STR_9(18), STR_7(12), 
 16935 ;;		 -> STR_6(7), STR_4(5), STR_3(5), STR_2(5), 
 16936 ;;		 -> STR_1(5), 
 16937 ;;  ap              2   16[COMRAM] PTR PTR void 
 16938 ;;		 -> sprintf@ap(2), printf@ap(2), 
 16939 ;; Auto vars:     Size  Location     Type
 16940 ;;  _doprnt         4    0        struct .
 16941 ;;  _doprnt         2   30[COMRAM] int 
 16942 ;;  _doprnt         2   28[COMRAM] PTR const unsigned char 
 16943 ;;		 -> ?_sprintf(2), ?_printf(2), STR_97(7), _doprnt@c(1), 
 16944 ;;		 -> intToFloatStr@end(4), STR_73(5), STR_72(5), STR_70(17), 
 16945 ;;		 -> STR_69(17), STR_65(12), STR_61(5), STR_60(3), 
 16946 ;;		 -> STR_58(5), STR_57(3), STR_55(5), STR_54(3), 
 16947 ;;		 -> STR_32(5), STR_31(3), line4(21), STR_29(5), 
 16948 ;;		 -> STR_28(3), line3(21), STR_26(5), STR_25(3), 
 16949 ;;		 -> line2(21), line1(21), STR_18(6), STR_17(3), 
 16950 ;;		 -> STR_16(6), STR_15(3), STR_14(6), STR_13(3), 
 16951 ;;		 -> tel2(12), tel1(12), bufferAUX(20), NULL(0), 
 16952 ;;		 -> bufferSerial(80), 
 16953 ;;  _doprnt         2   25[COMRAM] unsigned int 
 16954 ;;  _doprnt         2   23[COMRAM] unsigned int 
 16955 ;;  _doprnt         1   32[COMRAM] char 
 16956 ;;  _doprnt         1   27[COMRAM] unsigned char 
 16957 ;;  _doprnt         1   22[COMRAM] char 
 16958 ;; Return value:  Size  Location     Type
 16959 ;;                  2   12[COMRAM] int 
 16960 ;; Registers used:
 16961 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16962 ;; Tracked objects:
 16963 ;;		On entry : 0/0
 16964 ;;		On exit  : 0/0
 16965 ;;		Unchanged: 0/0
 16966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16967 ;;      Params:         6       0       0       0       0       0       0
 16968 ;;      Locals:        11       0       0       0       0       0       0
 16969 ;;      Temps:          4       0       0       0       0       0       0
 16970 ;;      Totals:        21       0       0       0       0       0       0
 16971 ;;Total ram usage:       21 bytes
 16972 ;; Hardware stack levels used:    1
 16973 ;; Hardware stack levels required when called:    1
 16974 ;; This function calls:
 16975 ;;		Absolute function
 16976 ;;		i2___lwdiv
 16977 ;;		i2___lwmod
 16978 ;;		i2___wmul
 16979 ;;		i2_isdigit
 16980 ;;		i2_putch
 16981 ;; This function is called by:
 16982 ;;		i2_sprintf
 16983 ;; This function uses a non-reentrant model
 16984 ;;
 16985                           
 16986                           	psect	text70
 16987  0008EE                     __ptext70:
 16988                           	opt stack 0
 16989  0008EE                     i2__doprnt:
 16990                           	opt stack 0
 16991  0008EE  FFFF               	dw	65535	; assembler added errata NOP
 16992                           
 16993                           ;doprnt.c: 499: signed char c;
 16994                           ;doprnt.c: 501: int width;
 16995                           ;doprnt.c: 506: signed char prec;
 16996                           ;doprnt.c: 508: unsigned char flag;
 16997                           ;doprnt.c: 523: union {
 16998                           ;doprnt.c: 524: unsigned long vd;
 16999                           ;doprnt.c: 525: double integ;
 17000                           ;doprnt.c: 526: } tmpval;
 17001                           ;doprnt.c: 528: unsigned int val;
 17002                           ;doprnt.c: 529: unsigned len;
 17003                           ;doprnt.c: 530: const char * cp;
 17004                           ;doprnt.c: 536: while(c = *f++) {
 17005                           
 17006                           ;incstack = 0
 17007  0008F0  D3BF               	goto	i2u1761_40
 17008  0008F2  FFFF               	dw	65535	; assembler added errata NOP
 17009                           
 17010                           ;doprnt.c: 538: if(c != '%')
 17011  0008F4  0E25               	movlw	37
 17012  0008F6  1821               	xorwf	i2__doprnt@c,w,c
 17013  0008F8  B4D8               	btfsc	status,2,c
 17014  0008FA  D037               	goto	i2l954
 17015                           
 17016                           ;doprnt.c: 540: {
 17017                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 17018  0008FC  EE20 F002          	lfsr	2,2
 17019  000900  500D               	movf	i2__doprnt@pb,w,c
 17020  000902  26D9               	addwf	fsr2l,f,c
 17021  000904  500E               	movf	i2__doprnt@pb+1,w,c
 17022  000906  22DA               	addwfc	fsr2h,f,c
 17023  000908  50DE               	movf	postinc2,w,c
 17024  00090A  10DE               	iorwf	postinc2,w,c
 17025  00090C  B4D8               	btfsc	status,2,c
 17026  00090E  D016               	goto	i2l955
 17027  000910  EE20 F002          	lfsr	2,2
 17028  000914  500D               	movf	i2__doprnt@pb,w,c
 17029  000916  26D9               	addwf	fsr2l,f,c
 17030  000918  500E               	movf	i2__doprnt@pb+1,w,c
 17031  00091A  22DA               	addwfc	fsr2h,f,c
 17032  00091C  D801               	call	i2u1717_48
 17033  00091E  D3A8               	goto	i2u1761_40
 17034  000920                     i2u1717_48:
 17035  000920  FFFF               	dw	65535	; assembler added errata NOP
 17036  000922  0005               	push	
 17037  000924  6EFA               	movwf	pclath,c
 17038  000926  50DE               	movf	postinc2,w,c
 17039  000928  6EFD               	movwf	tosl,c
 17040  00092A  50DE               	movf	postinc2,w,c
 17041  00092C  6EFE               	movwf	tosh,c
 17042  00092E  50F8               	movf	tblptru,w,c
 17043  000930  6EFF               	movwf	tosu,c
 17044  000932  50FA               	movf	pclath,w,c
 17045  000934  5021               	movf	i2__doprnt@c,w,c
 17046  000936  0012               	return		;indir
 17047  000938  FFFF               	dw	65535	; errata NOP
 17048  00093A  D39A               	goto	i2u1761_40
 17049  00093C                     i2l955:
 17050  00093C  FFFF               	dw	65535	; assembler added errata NOP
 17051  00093E  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17052  000942  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17053  000946  CFDE F013          	movff	postinc2,??i2__doprnt
 17054  00094A  CFDD F014          	movff	postdec2,??i2__doprnt+1
 17055  00094E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 17056  000952  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 17057  000956  C021  FFDF         	movff	i2__doprnt@c,indf2
 17058  00095A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17059  00095E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17060  000962  2ADE               	incf	postinc2,f,c
 17061  000964  0E00               	movlw	0
 17062  000966  22DD               	addwfc	postdec2,f,c
 17063                           
 17064                           ;doprnt.c: 542: continue;
 17065  000968  D383               	goto	i2u1761_40
 17066  00096A                     i2l954:
 17067  00096A  FFFF               	dw	65535	; assembler added errata NOP
 17068                           
 17069                           ;doprnt.c: 543: }
 17070                           ;doprnt.c: 546: width = 0;
 17071  00096C  0E00               	movlw	0
 17072  00096E  6E20               	movwf	i2__doprnt@width+1,c
 17073  000970  0E00               	movlw	0
 17074  000972  6E1F               	movwf	i2__doprnt@width,c
 17075                           
 17076                           ;doprnt.c: 548: flag = 0;
 17077  000974  0E00               	movlw	0
 17078  000976  6E1C               	movwf	i2__doprnt@flag,c
 17079                           
 17080                           ;doprnt.c: 551: switch(*f) {
 17081                           
 17082                           ;doprnt.c: 550: for(;;) {
 17083  000978  D004               	goto	i2l958
 17084  00097A  FFFF               	dw	65535	; assembler added errata NOP
 17085                           
 17086                           ;doprnt.c: 580: flag |= 0x04;
 17087  00097C  841C               	bsf	i2__doprnt@flag,2,c
 17088                           
 17089                           ;doprnt.c: 581: f++;
 17090  00097E  4A0F               	infsnz	i2__doprnt@f,f,c
 17091  000980  2A10               	incf	i2__doprnt@f+1,f,c
 17092  000982                     i2l958:
 17093  000982  FFFF               	dw	65535	; assembler added errata NOP
 17094  000984  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 17095  000988  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 17096  00098C  6AF8               	clrf	tblptru,c
 17097  00098E  0E05               	movlw	(high __ramtop+-1)
 17098  000990  64F7               	cpfsgt	tblptrh,c
 17099  000992  D004               	bra	i2u1718_47
 17100  000994  0008               	tblrd		*
 17101  000996  FFFF               	dw	65535	; errata NOP
 17102  000998  50F5               	movf	tablat,w,c
 17103  00099A  D005               	bra	i2u1718_40
 17104  00099C                     i2u1718_47:
 17105  00099C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17106  0009A0  CFF7 FFEA          	movff	tblptrh,fsr0h
 17107  0009A4  50EF               	movf	indf0,w,c
 17108  0009A6                     i2u1718_40:
 17109                           
 17110                           ; Switch size 1, requested type "space"
 17111                           ; Number of cases is 1, Range of values is 48 to 48
 17112                           ; switch strategies available:
 17113                           ; Name         Instructions Cycles
 17114                           ; simple_byte            4     3 (average)
 17115                           ;	Chosen strategy is simple_byte
 17116  0009A6  0A30               	xorlw	48	; case 48
 17117  0009A8  B4D8               	btfsc	status,2,c
 17118  0009AA  D7E7               	goto	i2l959
 17119                           
 17120                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17121                           
 17122                           ;doprnt.c: 586: }
 17123                           
 17124                           ;doprnt.c: 585: break;
 17125  0009AC  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 17126  0009B0  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 17127  0009B4  6AF8               	clrf	tblptru,c
 17128  0009B6  0E05               	movlw	(high __ramtop+-1)
 17129  0009B8  64F7               	cpfsgt	tblptrh,c
 17130  0009BA  D004               	bra	i2u1719_47
 17131  0009BC  0008               	tblrd		*
 17132  0009BE  FFFF               	dw	65535	; errata NOP
 17133  0009C0  50F5               	movf	tablat,w,c
 17134  0009C2  D005               	bra	i2u1719_40
 17135  0009C4                     i2u1719_47:
 17136  0009C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 17137  0009C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 17138  0009CC  50EF               	movf	indf0,w,c
 17139  0009CE                     i2u1719_40:
 17140  0009CE  ECB2  F038         	call	i2_isdigit
 17141  0009D2  A0D8               	btfss	status,0,c
 17142  0009D4  D161               	goto	i2l966
 17143                           
 17144                           ;doprnt.c: 598: width = 0;
 17145  0009D6  0E00               	movlw	0
 17146  0009D8  6E20               	movwf	i2__doprnt@width+1,c
 17147  0009DA  0E00               	movlw	0
 17148  0009DC  6E1F               	movwf	i2__doprnt@width,c
 17149  0009DE  FFFF               	dw	65535	; assembler added errata NOP
 17150                           
 17151                           ;doprnt.c: 600: width *= 10;
 17152  0009E0  C01F  F001         	movff	i2__doprnt@width,i2___wmul@multiplier
 17153  0009E4  C020  F002         	movff	i2__doprnt@width+1,i2___wmul@multiplier+1
 17154  0009E8  0E00               	movlw	0
 17155  0009EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 17156  0009EC  0E0A               	movlw	10
 17157  0009EE  6E03               	movwf	i2___wmul@multiplicand,c
 17158  0009F0  EC12  F039         	call	i2___wmul	;wreg free
 17159  0009F4  C001  F01F         	movff	?i2___wmul,i2__doprnt@width
 17160  0009F8  C002  F020         	movff	?i2___wmul+1,i2__doprnt@width+1
 17161                           
 17162                           ;doprnt.c: 601: width += *f++ - '0';
 17163  0009FC  0ED0               	movlw	208
 17164  0009FE  6E13               	movwf	??i2__doprnt& (0+255),c
 17165  000A00  0EFF               	movlw	255
 17166  000A02  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 17167  000A04  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 17168  000A08  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 17169  000A0C  6AF8               	clrf	tblptru,c
 17170  000A0E  0E05               	movlw	(high __ramtop+-1)
 17171  000A10  64F7               	cpfsgt	tblptrh,c
 17172  000A12  D004               	bra	i2u1721_47
 17173  000A14  0008               	tblrd		*
 17174  000A16  FFFF               	dw	65535	; errata NOP
 17175  000A18  50F5               	movf	tablat,w,c
 17176  000A1A  D005               	bra	i2u1721_40
 17177  000A1C                     i2u1721_47:
 17178  000A1C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17179  000A20  CFF7 FFEA          	movff	tblptrh,fsr0h
 17180  000A24  50EF               	movf	indf0,w,c
 17181  000A26                     i2u1721_40:
 17182  000A26  6E15               	movwf	(??i2__doprnt+2)& (0+255),c
 17183  000A28  6A16               	clrf	(??i2__doprnt+3)& (0+255),c
 17184  000A2A  5013               	movf	??i2__doprnt,w,c
 17185  000A2C  2615               	addwf	??i2__doprnt+2,f,c
 17186  000A2E  5014               	movf	??i2__doprnt+1,w,c
 17187  000A30  2216               	addwfc	??i2__doprnt+3,f,c
 17188  000A32  5015               	movf	??i2__doprnt+2,w,c
 17189  000A34  261F               	addwf	i2__doprnt@width,f,c
 17190  000A36  5016               	movf	??i2__doprnt+3,w,c
 17191  000A38  2220               	addwfc	i2__doprnt@width+1,f,c
 17192  000A3A  4A0F               	infsnz	i2__doprnt@f,f,c
 17193  000A3C  2A10               	incf	i2__doprnt@f+1,f,c
 17194                           
 17195                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17196  000A3E  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 17197  000A42  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 17198  000A46  6AF8               	clrf	tblptru,c
 17199  000A48  0E05               	movlw	(high __ramtop+-1)
 17200  000A4A  64F7               	cpfsgt	tblptrh,c
 17201  000A4C  D004               	bra	i2u1722_47
 17202  000A4E  0008               	tblrd		*
 17203  000A50  FFFF               	dw	65535	; errata NOP
 17204  000A52  50F5               	movf	tablat,w,c
 17205  000A54  D005               	bra	i2u1722_40
 17206  000A56                     i2u1722_47:
 17207  000A56  CFF6 FFE9          	movff	tblptrl,fsr0l
 17208  000A5A  CFF7 FFEA          	movff	tblptrh,fsr0h
 17209  000A5E  50EF               	movf	indf0,w,c
 17210  000A60                     i2u1722_40:
 17211  000A60  ECB2  F038         	call	i2_isdigit
 17212  000A64  A0D8               	btfss	status,0,c
 17213  000A66  D118               	goto	i2l966
 17214  000A68  D7BA               	goto	i2l964
 17215  000A6A  FFFF               	dw	65535	; assembler added errata NOP
 17216                           
 17217                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17218  000A6C  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 17219  000A70  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 17220  000A74  CFDF F013          	movff	indf2,??i2__doprnt
 17221  000A78  0E02               	movlw	2
 17222  000A7A  26DE               	addwf	postinc2,f,c
 17223  000A7C  CFDF F014          	movff	indf2,??i2__doprnt+1
 17224  000A80  0E00               	movlw	0
 17225  000A82  22DD               	addwfc	postdec2,f,c
 17226  000A84  C013  FFD9         	movff	??i2__doprnt,fsr2l
 17227  000A88  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 17228  000A8C  CFDE F01D          	movff	postinc2,i2__doprnt@cp
 17229  000A90  CFDD F01E          	movff	postdec2,i2__doprnt@cp+1
 17230                           
 17231                           ;doprnt.c: 740: if(!cp)
 17232  000A94  501D               	movf	i2__doprnt@cp,w,c
 17233  000A96  101E               	iorwf	i2__doprnt@cp+1,w,c
 17234  000A98  A4D8               	btfss	status,2,c
 17235  000A9A  D004               	goto	i2l973
 17236                           
 17237                           ;doprnt.c: 741: cp = "(null)";
 17238  000A9C  0EAF               	movlw	low STR_97
 17239  000A9E  6E1D               	movwf	i2__doprnt@cp,c
 17240  000AA0  0E7F               	movlw	high STR_97
 17241  000AA2  6E1E               	movwf	i2__doprnt@cp+1,c
 17242  000AA4                     i2l973:
 17243  000AA4  FFFF               	dw	65535	; assembler added errata NOP
 17244                           
 17245                           ;doprnt.c: 745: len = 0;
 17246  000AA6  0E00               	movlw	0
 17247  000AA8  6E1B               	movwf	i2__doprnt@len+1,c
 17248  000AAA  0E00               	movlw	0
 17249  000AAC  6E1A               	movwf	i2__doprnt@len,c
 17250                           
 17251                           ;doprnt.c: 746: while(cp[len])
 17252  000AAE  D003               	goto	i2l974
 17253  000AB0  FFFF               	dw	65535	; assembler added errata NOP
 17254                           
 17255                           ;doprnt.c: 747: len++;
 17256  000AB2  4A1A               	infsnz	i2__doprnt@len,f,c
 17257  000AB4  2A1B               	incf	i2__doprnt@len+1,f,c
 17258  000AB6                     i2l974:
 17259  000AB6  FFFF               	dw	65535	; assembler added errata NOP
 17260  000AB8  501A               	movf	i2__doprnt@len,w,c
 17261  000ABA  241D               	addwf	i2__doprnt@cp,w,c
 17262  000ABC  6E13               	movwf	??i2__doprnt& (0+255),c
 17263  000ABE  501B               	movf	i2__doprnt@len+1,w,c
 17264  000AC0  201E               	addwfc	i2__doprnt@cp+1,w,c
 17265  000AC2  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 17266  000AC4  C013  FFF6         	movff	??i2__doprnt,tblptrl
 17267  000AC8  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 17268  000ACC  6AF8               	clrf	tblptru,c
 17269  000ACE  0E05               	movlw	(high __ramtop+-1)
 17270  000AD0  64F7               	cpfsgt	tblptrh,c
 17271  000AD2  D004               	bra	i2u1725_47
 17272  000AD4  0008               	tblrd		*
 17273  000AD6  FFFF               	dw	65535	; errata NOP
 17274  000AD8  50F5               	movf	tablat,w,c
 17275  000ADA  D005               	bra	i2u1725_40
 17276  000ADC                     i2u1725_47:
 17277  000ADC  CFF6 FFE9          	movff	tblptrl,fsr0l
 17278  000AE0  CFF7 FFEA          	movff	tblptrh,fsr0h
 17279  000AE4  50EF               	movf	indf0,w,c
 17280  000AE6                     i2u1725_40:
 17281  000AE6  0900               	iorlw	0
 17282  000AE8  A4D8               	btfss	status,2,c
 17283  000AEA  D7E2               	goto	i2l975
 17284  000AEC                     i2u1726_40:
 17285  000AEC  FFFF               	dw	65535	; assembler added errata NOP
 17286                           
 17287                           ;doprnt.c: 757: if(width > len)
 17288                           
 17289                           ;doprnt.c: 750: dostring:
 17290  000AEE  501F               	movf	i2__doprnt@width,w,c
 17291  000AF0  5C1A               	subwf	i2__doprnt@len,w,c
 17292  000AF2  5020               	movf	i2__doprnt@width+1,w,c
 17293  000AF4  581B               	subwfb	i2__doprnt@len+1,w,c
 17294  000AF6  B0D8               	btfsc	status,0,c
 17295  000AF8  D005               	goto	i2l978
 17296                           
 17297                           ;doprnt.c: 758: width -= len;
 17298  000AFA  501A               	movf	i2__doprnt@len,w,c
 17299  000AFC  5E1F               	subwf	i2__doprnt@width,f,c
 17300  000AFE  501B               	movf	i2__doprnt@len+1,w,c
 17301  000B00  5A20               	subwfb	i2__doprnt@width+1,f,c
 17302  000B02  D03D               	goto	i2l983
 17303  000B04                     i2l978:
 17304  000B04  FFFF               	dw	65535	; assembler added errata NOP
 17305                           
 17306                           ;doprnt.c: 759: else
 17307                           ;doprnt.c: 760: width = 0;
 17308  000B06  0E00               	movlw	0
 17309  000B08  6E20               	movwf	i2__doprnt@width+1,c
 17310  000B0A  0E00               	movlw	0
 17311  000B0C  6E1F               	movwf	i2__doprnt@width,c
 17312                           
 17313                           ;doprnt.c: 764: while(width--)
 17314  000B0E  D037               	goto	i2l983
 17315  000B10  FFFF               	dw	65535	; assembler added errata NOP
 17316  000B12                     i2l11991:
 17317                           
 17318                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 17319  000B12  EE20 F002          	lfsr	2,2
 17320  000B16  500D               	movf	i2__doprnt@pb,w,c
 17321  000B18  26D9               	addwf	fsr2l,f,c
 17322  000B1A  500E               	movf	i2__doprnt@pb+1,w,c
 17323  000B1C  22DA               	addwfc	fsr2h,f,c
 17324  000B1E  50DE               	movf	postinc2,w,c
 17325  000B20  10DE               	iorwf	postinc2,w,c
 17326  000B22  B4D8               	btfsc	status,2,c
 17327  000B24  D016               	goto	i2l982
 17328  000B26  EE20 F002          	lfsr	2,2
 17329  000B2A  500D               	movf	i2__doprnt@pb,w,c
 17330  000B2C  26D9               	addwf	fsr2l,f,c
 17331  000B2E  500E               	movf	i2__doprnt@pb+1,w,c
 17332  000B30  22DA               	addwfc	fsr2h,f,c
 17333  000B32  D801               	call	i2u1729_48
 17334  000B34  D024               	goto	i2l983
 17335  000B36                     i2u1729_48:
 17336  000B36  FFFF               	dw	65535	; assembler added errata NOP
 17337  000B38  0005               	push	
 17338  000B3A  6EFA               	movwf	pclath,c
 17339  000B3C  50DE               	movf	postinc2,w,c
 17340  000B3E  6EFD               	movwf	tosl,c
 17341  000B40  50DE               	movf	postinc2,w,c
 17342  000B42  6EFE               	movwf	tosh,c
 17343  000B44  50F8               	movf	tblptru,w,c
 17344  000B46  6EFF               	movwf	tosu,c
 17345  000B48  50FA               	movf	pclath,w,c
 17346  000B4A  0E20               	movlw	32
 17347  000B4C  0012               	return		;indir
 17348  000B4E  FFFF               	dw	65535	; errata NOP
 17349  000B50  D016               	goto	i2l983
 17350  000B52                     i2l982:
 17351  000B52  FFFF               	dw	65535	; assembler added errata NOP
 17352  000B54  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17353  000B58  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17354  000B5C  CFDE F013          	movff	postinc2,??i2__doprnt
 17355  000B60  CFDD F014          	movff	postdec2,??i2__doprnt+1
 17356  000B64  C013  FFD9         	movff	??i2__doprnt,fsr2l
 17357  000B68  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 17358  000B6C  0E20               	movlw	32
 17359  000B6E  6EDF               	movwf	indf2,c
 17360  000B70  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17361  000B74  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17362  000B78  2ADE               	incf	postinc2,f,c
 17363  000B7A  0E00               	movlw	0
 17364  000B7C  22DD               	addwfc	postdec2,f,c
 17365  000B7E                     i2l983:
 17366  000B7E  FFFF               	dw	65535	; assembler added errata NOP
 17367  000B80  061F               	decf	i2__doprnt@width,f,c
 17368  000B82  A0D8               	btfss	status,0,c
 17369  000B84  0620               	decf	i2__doprnt@width+1,f,c
 17370  000B86  281F               	incf	i2__doprnt@width,w,c
 17371  000B88  E1C4               	bnz	i2l11991
 17372  000B8A  2820               	incf	i2__doprnt@width+1,w,c
 17373  000B8C  B4D8               	btfsc	status,2,c
 17374  000B8E  D05D               	goto	i2l988
 17375  000B90  D7BF               	goto	i2l981
 17376  000B92  FFFF               	dw	65535	; assembler added errata NOP
 17377  000B94                     i2l12001:
 17378                           
 17379                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 17380  000B94  EE20 F002          	lfsr	2,2
 17381  000B98  500D               	movf	i2__doprnt@pb,w,c
 17382  000B9A  26D9               	addwf	fsr2l,f,c
 17383  000B9C  500E               	movf	i2__doprnt@pb+1,w,c
 17384  000B9E  22DA               	addwfc	fsr2h,f,c
 17385  000BA0  50DE               	movf	postinc2,w,c
 17386  000BA2  10DE               	iorwf	postinc2,w,c
 17387  000BA4  B4D8               	btfsc	status,2,c
 17388  000BA6  D029               	goto	i2l987
 17389  000BA8  EE20 F002          	lfsr	2,2
 17390  000BAC  500D               	movf	i2__doprnt@pb,w,c
 17391  000BAE  26D9               	addwf	fsr2l,f,c
 17392  000BB0  500E               	movf	i2__doprnt@pb+1,w,c
 17393  000BB2  22DA               	addwfc	fsr2h,f,c
 17394  000BB4  D801               	call	i2u1732_48
 17395  000BB6  D01D               	goto	i2u1732_49
 17396  000BB8                     i2u1732_48:
 17397  000BB8  FFFF               	dw	65535	; assembler added errata NOP
 17398  000BBA  0005               	push	
 17399  000BBC  6EFA               	movwf	pclath,c
 17400  000BBE  50DE               	movf	postinc2,w,c
 17401  000BC0  6EFD               	movwf	tosl,c
 17402  000BC2  50DE               	movf	postinc2,w,c
 17403  000BC4  6EFE               	movwf	tosh,c
 17404  000BC6  50F8               	movf	tblptru,w,c
 17405  000BC8  6EFF               	movwf	tosu,c
 17406  000BCA  50FA               	movf	pclath,w,c
 17407  000BCC  C01D  FFF6         	movff	i2__doprnt@cp,tblptrl
 17408  000BD0  C01E  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 17409  000BD4  6AF8               	clrf	tblptru,c
 17410  000BD6  0E05               	movlw	(high __ramtop+-1)
 17411  000BD8  64F7               	cpfsgt	tblptrh,c
 17412  000BDA  D004               	bra	i2u1733_47
 17413  000BDC  0008               	tblrd		*
 17414  000BDE  FFFF               	dw	65535	; errata NOP
 17415  000BE0  50F5               	movf	tablat,w,c
 17416  000BE2  D005               	bra	i2u1733_40
 17417  000BE4                     i2u1733_47:
 17418  000BE4  CFF6 FFE9          	movff	tblptrl,fsr0l
 17419  000BE8  CFF7 FFEA          	movff	tblptrh,fsr0h
 17420  000BEC  50EF               	movf	indf0,w,c
 17421  000BEE                     i2u1733_40:
 17422  000BEE  0012               	return		;indir
 17423  000BF0  FFFF               	dw	65535	; errata NOP
 17424  000BF2                     i2u1732_49:
 17425  000BF2  FFFF               	dw	65535	; assembler added errata NOP
 17426  000BF4  4A1D               	infsnz	i2__doprnt@cp,f,c
 17427  000BF6  2A1E               	incf	i2__doprnt@cp+1,f,c
 17428  000BF8  D028               	goto	i2l988
 17429  000BFA                     i2l987:
 17430  000BFA  FFFF               	dw	65535	; assembler added errata NOP
 17431  000BFC  C01D  FFF6         	movff	i2__doprnt@cp,tblptrl
 17432  000C00  C01E  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 17433  000C04  6AF8               	clrf	tblptru,c
 17434  000C06  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17435  000C0A  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17436  000C0E  CFDE F013          	movff	postinc2,??i2__doprnt
 17437  000C12  CFDD F014          	movff	postdec2,??i2__doprnt+1
 17438  000C16  C013  FFD9         	movff	??i2__doprnt,fsr2l
 17439  000C1A  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 17440  000C1E  0E05               	movlw	(high __ramtop+-1)
 17441  000C20  64F7               	cpfsgt	tblptrh,c
 17442  000C22  D004               	bra	i2u1734_47
 17443  000C24  0008               	tblrd		*
 17444  000C26  FFFF               	dw	65535	; errata NOP
 17445  000C28  50F5               	movf	tablat,w,c
 17446  000C2A  D005               	bra	i2u1734_40
 17447  000C2C                     i2u1734_47:
 17448  000C2C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17449  000C30  CFF7 FFEA          	movff	tblptrh,fsr0h
 17450  000C34  50EF               	movf	indf0,w,c
 17451  000C36                     i2u1734_40:
 17452  000C36  6EDF               	movwf	indf2,c
 17453  000C38  4A1D               	infsnz	i2__doprnt@cp,f,c
 17454  000C3A  2A1E               	incf	i2__doprnt@cp+1,f,c
 17455  000C3C  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17456  000C40  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17457  000C44  2ADE               	incf	postinc2,f,c
 17458  000C46  0E00               	movlw	0
 17459  000C48  22DD               	addwfc	postdec2,f,c
 17460  000C4A                     i2l988:
 17461  000C4A  FFFF               	dw	65535	; assembler added errata NOP
 17462  000C4C  061A               	decf	i2__doprnt@len,f,c
 17463  000C4E  A0D8               	btfss	status,0,c
 17464  000C50  061B               	decf	i2__doprnt@len+1,f,c
 17465  000C52  281A               	incf	i2__doprnt@len,w,c
 17466  000C54  E19F               	bnz	i2l12001
 17467  000C56  281B               	incf	i2__doprnt@len+1,w,c
 17468  000C58  B4D8               	btfsc	status,2,c
 17469  000C5A  D20A               	goto	i2u1761_40
 17470  000C5C  D79A               	goto	i2l986
 17471  000C5E  FFFF               	dw	65535	; assembler added errata NOP
 17472                           
 17473                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 17474  000C60  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 17475  000C64  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 17476  000C68  CFDF F013          	movff	indf2,??i2__doprnt
 17477  000C6C  0E02               	movlw	2
 17478  000C6E  26DE               	addwf	postinc2,f,c
 17479  000C70  CFDF F014          	movff	indf2,??i2__doprnt+1
 17480  000C74  0E00               	movlw	0
 17481  000C76  22DD               	addwfc	postdec2,f,c
 17482  000C78  C013  FFD9         	movff	??i2__doprnt,fsr2l
 17483  000C7C  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 17484  000C80  50DF               	movf	indf2,w,c
 17485  000C82  6E21               	movwf	i2__doprnt@c,c
 17486  000C84  FFFF               	dw	65535	; assembler added errata NOP
 17487                           
 17488                           ;doprnt.c: 805: cp = (char *)&c;
 17489  000C86  0E21               	movlw	low i2__doprnt@c
 17490  000C88  6E1D               	movwf	i2__doprnt@cp,c
 17491  000C8A  0E00               	movlw	high i2__doprnt@c
 17492  000C8C  6E1E               	movwf	i2__doprnt@cp+1,c
 17493                           
 17494                           ;doprnt.c: 806: len = 1;
 17495  000C8E  0E00               	movlw	0
 17496  000C90  6E1B               	movwf	i2__doprnt@len+1,c
 17497  000C92  0E01               	movlw	1
 17498  000C94  6E1A               	movwf	i2__doprnt@len,c
 17499                           
 17500                           ;doprnt.c: 807: goto dostring;
 17501  000C96  D72A               	goto	i2u1726_40
 17502  000C98                     i2l966:
 17503  000C98  FFFF               	dw	65535	; assembler added errata NOP
 17504  000C9A  500F               	movf	i2__doprnt@f,w,c
 17505  000C9C  6E13               	movwf	??i2__doprnt& (0+255),c
 17506  000C9E  5010               	movf	i2__doprnt@f+1,w,c
 17507  000CA0  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 17508  000CA2  4A0F               	infsnz	i2__doprnt@f,f,c
 17509  000CA4  2A10               	incf	i2__doprnt@f+1,f,c
 17510  000CA6  C013  FFF6         	movff	??i2__doprnt,tblptrl
 17511  000CAA  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 17512  000CAE  6AF8               	clrf	tblptru,c
 17513  000CB0  0E05               	movlw	(high __ramtop+-1)
 17514  000CB2  64F7               	cpfsgt	tblptrh,c
 17515  000CB4  D004               	bra	i2u1736_47
 17516  000CB6  0008               	tblrd		*
 17517  000CB8  FFFF               	dw	65535	; errata NOP
 17518  000CBA  50F5               	movf	tablat,w,c
 17519  000CBC  D005               	bra	i2u1736_40
 17520  000CBE                     i2u1736_47:
 17521  000CBE  CFF6 FFE9          	movff	tblptrl,fsr0l
 17522  000CC2  CFF7 FFEA          	movff	tblptrh,fsr0h
 17523  000CC6  50EF               	movf	indf0,w,c
 17524  000CC8                     i2u1736_40:
 17525  000CC8  6E21               	movwf	i2__doprnt@c,c
 17526  000CCA  5021               	movf	i2__doprnt@c,w,c
 17527                           
 17528                           ; Switch size 1, requested type "space"
 17529                           ; Number of cases is 5, Range of values is 0 to 115
 17530                           ; switch strategies available:
 17531                           ; Name         Instructions Cycles
 17532                           ; simple_byte           16     9 (average)
 17533                           ;	Chosen strategy is simple_byte
 17534  000CCC  0A00               	xorlw	0	; case 0
 17535  000CCE  B4D8               	btfsc	status,2,c
 17536  000CD0  D1EB               	goto	i2u1763_40
 17537  000CD2  0A63               	xorlw	99	; case 99
 17538  000CD4  B4D8               	btfsc	status,2,c
 17539  000CD6  D7C3               	goto	i2l990
 17540  000CD8  0A07               	xorlw	7	; case 100
 17541  000CDA  B4D8               	btfsc	status,2,c
 17542  000CDC  D007               	goto	i2l971
 17543  000CDE  0A0D               	xorlw	13	; case 105
 17544  000CE0  B4D8               	btfsc	status,2,c
 17545  000CE2  D004               	goto	i2l971
 17546  000CE4  0A1A               	xorlw	26	; case 115
 17547  000CE6  B4D8               	btfsc	status,2,c
 17548  000CE8  D6C0               	goto	i2l972
 17549  000CEA  D7CC               	goto	i2l991
 17550  000CEC                     i2l971:
 17551  000CEC  FFFF               	dw	65535	; assembler added errata NOP
 17552                           
 17553                           ;doprnt.c: 1253: {
 17554                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17555  000CEE  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 17556  000CF2  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 17557  000CF6  CFDF F013          	movff	indf2,??i2__doprnt
 17558  000CFA  0E02               	movlw	2
 17559  000CFC  26DE               	addwf	postinc2,f,c
 17560  000CFE  CFDF F014          	movff	indf2,??i2__doprnt+1
 17561  000D02  0E00               	movlw	0
 17562  000D04  22DD               	addwfc	postdec2,f,c
 17563  000D06  C013  FFD9         	movff	??i2__doprnt,fsr2l
 17564  000D0A  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 17565  000D0E  CFDE F018          	movff	postinc2,i2__doprnt@val
 17566  000D12  CFDD F019          	movff	postdec2,i2__doprnt@val+1
 17567                           
 17568                           ;doprnt.c: 1261: if((int)val < 0) {
 17569  000D16  AE19               	btfss	i2__doprnt@val+1,7,c
 17570  000D18  D006               	goto	i2l992
 17571                           
 17572                           ;doprnt.c: 1262: flag |= 0x03;
 17573  000D1A  0E03               	movlw	3
 17574  000D1C  121C               	iorwf	i2__doprnt@flag,f,c
 17575                           
 17576                           ;doprnt.c: 1263: val = -val;
 17577  000D1E  6C18               	negf	i2__doprnt@val,c
 17578  000D20  1E19               	comf	i2__doprnt@val+1,f,c
 17579  000D22  B0D8               	btfsc	status,0,c
 17580  000D24  2A19               	incf	i2__doprnt@val+1,f,c
 17581  000D26                     i2l992:
 17582  000D26  FFFF               	dw	65535	; assembler added errata NOP
 17583                           
 17584                           ;doprnt.c: 1264: }
 17585                           ;doprnt.c: 1266: }
 17586                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17587  000D28  0E01               	movlw	1
 17588  000D2A  6E21               	movwf	i2__doprnt@c,c
 17589  000D2C                     i2l12035:
 17590  000D2C  FFFF               	dw	65535	; assembler added errata NOP
 17591  000D2E  0E05               	movlw	5
 17592  000D30  1821               	xorwf	i2__doprnt@c,w,c
 17593  000D32  B4D8               	btfsc	status,2,c
 17594  000D34  D014               	goto	i2u1740_40
 17595                           
 17596                           ;doprnt.c: 1306: if(val < dpowers[c])
 17597  000D36  5021               	movf	i2__doprnt@c,w,c
 17598  000D38  0D02               	mullw	2
 17599  000D3A  0ED9               	movlw	low _dpowers
 17600  000D3C  24F3               	addwf	prodl,w,c
 17601  000D3E  6EF6               	movwf	tblptrl,c
 17602  000D40  0E7B               	movlw	high _dpowers
 17603  000D42  20F4               	addwfc	prodh,w,c
 17604  000D44  6EF7               	movwf	tblptrh,c
 17605  000D46                     	if	0	;There are less than 3 active tblptr bytes
 17606  000D46                     	endif
 17607  000D46  0009               	tblrd		*+
 17608  000D48  FFFF               	dw	65535	; errata NOP
 17609  000D4A  50F5               	movf	tablat,w,c
 17610  000D4C  5C18               	subwf	i2__doprnt@val,w,c
 17611  000D4E  0009               	tblrd		*+
 17612  000D50  FFFF               	dw	65535	; errata NOP
 17613  000D52  50F5               	movf	tablat,w,c
 17614  000D54  5819               	subwfb	i2__doprnt@val+1,w,c
 17615  000D56  A0D8               	btfss	status,0,c
 17616  000D58  D002               	goto	i2u1740_40
 17617                           
 17618                           ;doprnt.c: 1307: break;
 17619  000D5A  2A21               	incf	i2__doprnt@c,f,c
 17620  000D5C  D7E7               	goto	i2l12035
 17621  000D5E                     i2u1740_40:
 17622  000D5E  FFFF               	dw	65535	; assembler added errata NOP
 17623                           
 17624                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17625  000D60  501F               	movf	i2__doprnt@width,w,c
 17626  000D62  1020               	iorwf	i2__doprnt@width+1,w,c
 17627  000D64  B4D8               	btfsc	status,2,c
 17628  000D66  D009               	goto	i2l996
 17629  000D68  C01C  F013         	movff	i2__doprnt@flag,??i2__doprnt
 17630  000D6C  0E03               	movlw	3
 17631  000D6E  1613               	andwf	??i2__doprnt,f,c
 17632  000D70  B4D8               	btfsc	status,2,c
 17633  000D72  D003               	goto	i2l996
 17634                           
 17635                           ;doprnt.c: 1346: width--;
 17636  000D74  061F               	decf	i2__doprnt@width,f,c
 17637  000D76  A0D8               	btfss	status,0,c
 17638  000D78  0620               	decf	i2__doprnt@width+1,f,c
 17639  000D7A                     i2l996:
 17640  000D7A  FFFF               	dw	65535	; assembler added errata NOP
 17641                           
 17642                           ;doprnt.c: 1381: if(width > c)
 17643  000D7C  0E80               	movlw	128
 17644  000D7E  BE21               	btfsc	i2__doprnt@c,7,c
 17645  000D80  0E7F               	movlw	127
 17646  000D82  6E13               	movwf	??i2__doprnt& (0+255),c
 17647  000D84  501F               	movf	i2__doprnt@width,w,c
 17648  000D86  5C21               	subwf	i2__doprnt@c,w,c
 17649  000D88  5020               	movf	i2__doprnt@width+1,w,c
 17650  000D8A  0A80               	xorlw	128
 17651  000D8C  5813               	subwfb	??i2__doprnt& (0+255),w,c
 17652  000D8E  B0D8               	btfsc	status,0,c
 17653  000D90  D007               	goto	i2l997
 17654                           
 17655                           ;doprnt.c: 1382: width -= c;
 17656  000D92  5021               	movf	i2__doprnt@c,w,c
 17657  000D94  5E1F               	subwf	i2__doprnt@width,f,c
 17658  000D96  0E00               	movlw	0
 17659  000D98  BE21               	btfsc	i2__doprnt@c,7,c
 17660  000D9A  0EFF               	movlw	255
 17661  000D9C  5A20               	subwfb	i2__doprnt@width+1,f,c
 17662  000D9E  D005               	goto	i2l998
 17663  000DA0                     i2l997:
 17664  000DA0  FFFF               	dw	65535	; assembler added errata NOP
 17665                           
 17666                           ;doprnt.c: 1383: else
 17667                           ;doprnt.c: 1384: width = 0;
 17668  000DA2  0E00               	movlw	0
 17669  000DA4  6E20               	movwf	i2__doprnt@width+1,c
 17670  000DA6  0E00               	movlw	0
 17671  000DA8  6E1F               	movwf	i2__doprnt@width,c
 17672  000DAA                     i2l998:
 17673  000DAA  FFFF               	dw	65535	; assembler added errata NOP
 17674                           
 17675                           ;doprnt.c: 1387: if(flag & 0x04) {
 17676  000DAC  A41C               	btfss	i2__doprnt@flag,2,c
 17677  000DAE  D07C               	goto	i2l999
 17678                           
 17679                           ;doprnt.c: 1392: if(flag & 0x03)
 17680  000DB0  C01C  F013         	movff	i2__doprnt@flag,??i2__doprnt
 17681  000DB4  0E03               	movlw	3
 17682  000DB6  1613               	andwf	??i2__doprnt,f,c
 17683  000DB8  B4D8               	btfsc	status,2,c
 17684  000DBA  D036               	goto	i2l1002
 17685                           
 17686                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 17687  000DBC  EE20 F002          	lfsr	2,2
 17688  000DC0  500D               	movf	i2__doprnt@pb,w,c
 17689  000DC2  26D9               	addwf	fsr2l,f,c
 17690  000DC4  500E               	movf	i2__doprnt@pb+1,w,c
 17691  000DC6  22DA               	addwfc	fsr2h,f,c
 17692  000DC8  50DE               	movf	postinc2,w,c
 17693  000DCA  10DE               	iorwf	postinc2,w,c
 17694  000DCC  B4D8               	btfsc	status,2,c
 17695  000DCE  D016               	goto	i2l1001
 17696  000DD0  EE20 F002          	lfsr	2,2
 17697  000DD4  500D               	movf	i2__doprnt@pb,w,c
 17698  000DD6  26D9               	addwf	fsr2l,f,c
 17699  000DD8  500E               	movf	i2__doprnt@pb+1,w,c
 17700  000DDA  22DA               	addwfc	fsr2h,f,c
 17701  000DDC  D801               	call	i2u1747_48
 17702  000DDE  D024               	goto	i2l1002
 17703  000DE0                     i2u1747_48:
 17704  000DE0  FFFF               	dw	65535	; assembler added errata NOP
 17705  000DE2  0005               	push	
 17706  000DE4  6EFA               	movwf	pclath,c
 17707  000DE6  50DE               	movf	postinc2,w,c
 17708  000DE8  6EFD               	movwf	tosl,c
 17709  000DEA  50DE               	movf	postinc2,w,c
 17710  000DEC  6EFE               	movwf	tosh,c
 17711  000DEE  50F8               	movf	tblptru,w,c
 17712  000DF0  6EFF               	movwf	tosu,c
 17713  000DF2  50FA               	movf	pclath,w,c
 17714  000DF4  0E2D               	movlw	45
 17715  000DF6  0012               	return		;indir
 17716  000DF8  FFFF               	dw	65535	; errata NOP
 17717  000DFA  D016               	goto	i2l1002
 17718  000DFC                     i2l1001:
 17719  000DFC  FFFF               	dw	65535	; assembler added errata NOP
 17720  000DFE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17721  000E02  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17722  000E06  CFDE F013          	movff	postinc2,??i2__doprnt
 17723  000E0A  CFDD F014          	movff	postdec2,??i2__doprnt+1
 17724  000E0E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 17725  000E12  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 17726  000E16  0E2D               	movlw	45
 17727  000E18  6EDF               	movwf	indf2,c
 17728  000E1A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17729  000E1E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17730  000E22  2ADE               	incf	postinc2,f,c
 17731  000E24  0E00               	movlw	0
 17732  000E26  22DD               	addwfc	postdec2,f,c
 17733  000E28                     i2l1002:
 17734  000E28  FFFF               	dw	65535	; assembler added errata NOP
 17735                           
 17736                           ;doprnt.c: 1415: if(width)
 17737  000E2A  501F               	movf	i2__doprnt@width,w,c
 17738  000E2C  1020               	iorwf	i2__doprnt@width+1,w,c
 17739  000E2E  B4D8               	btfsc	status,2,c
 17740  000E30  D0BC               	goto	i2l1016
 17741                           
 17742                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 17743                           
 17744                           ;doprnt.c: 1416: do
 17745  000E32  EE20 F002          	lfsr	2,2
 17746  000E36  500D               	movf	i2__doprnt@pb,w,c
 17747  000E38  26D9               	addwf	fsr2l,f,c
 17748  000E3A  500E               	movf	i2__doprnt@pb+1,w,c
 17749  000E3C  22DA               	addwfc	fsr2h,f,c
 17750  000E3E  50DE               	movf	postinc2,w,c
 17751  000E40  10DE               	iorwf	postinc2,w,c
 17752  000E42  B4D8               	btfsc	status,2,c
 17753  000E44  D016               	goto	i2l1005
 17754  000E46  EE20 F002          	lfsr	2,2
 17755  000E4A  500D               	movf	i2__doprnt@pb,w,c
 17756  000E4C  26D9               	addwf	fsr2l,f,c
 17757  000E4E  500E               	movf	i2__doprnt@pb+1,w,c
 17758  000E50  22DA               	addwfc	fsr2h,f,c
 17759  000E52  D801               	call	i2u1750_48
 17760  000E54  D024               	goto	i2l1006
 17761  000E56                     i2u1750_48:
 17762  000E56  FFFF               	dw	65535	; assembler added errata NOP
 17763  000E58  0005               	push	
 17764  000E5A  6EFA               	movwf	pclath,c
 17765  000E5C  50DE               	movf	postinc2,w,c
 17766  000E5E  6EFD               	movwf	tosl,c
 17767  000E60  50DE               	movf	postinc2,w,c
 17768  000E62  6EFE               	movwf	tosh,c
 17769  000E64  50F8               	movf	tblptru,w,c
 17770  000E66  6EFF               	movwf	tosu,c
 17771  000E68  50FA               	movf	pclath,w,c
 17772  000E6A  0E30               	movlw	48
 17773  000E6C  0012               	return		;indir
 17774  000E6E  FFFF               	dw	65535	; errata NOP
 17775  000E70  D016               	goto	i2l1006
 17776  000E72                     i2l1005:
 17777  000E72  FFFF               	dw	65535	; assembler added errata NOP
 17778  000E74  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17779  000E78  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17780  000E7C  CFDE F013          	movff	postinc2,??i2__doprnt
 17781  000E80  CFDD F014          	movff	postdec2,??i2__doprnt+1
 17782  000E84  C013  FFD9         	movff	??i2__doprnt,fsr2l
 17783  000E88  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 17784  000E8C  0E30               	movlw	48
 17785  000E8E  6EDF               	movwf	indf2,c
 17786  000E90  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17787  000E94  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17788  000E98  2ADE               	incf	postinc2,f,c
 17789  000E9A  0E00               	movlw	0
 17790  000E9C  22DD               	addwfc	postdec2,f,c
 17791  000E9E                     i2l1006:
 17792  000E9E  FFFF               	dw	65535	; assembler added errata NOP
 17793                           
 17794                           ;doprnt.c: 1418: while(--width);
 17795  000EA0  061F               	decf	i2__doprnt@width,f,c
 17796  000EA2  A0D8               	btfss	status,0,c
 17797  000EA4  0620               	decf	i2__doprnt@width+1,f,c
 17798  000EA6  D7C0               	goto	i2l1002
 17799  000EA8                     i2l999:
 17800  000EA8  FFFF               	dw	65535	; assembler added errata NOP
 17801                           
 17802                           ;doprnt.c: 1422: {
 17803                           ;doprnt.c: 1424: if(width
 17804                           ;doprnt.c: 1428: )
 17805  000EAA  501F               	movf	i2__doprnt@width,w,c
 17806  000EAC  1020               	iorwf	i2__doprnt@width+1,w,c
 17807  000EAE  B4D8               	btfsc	status,2,c
 17808  000EB0  D03F               	goto	i2u1755_40
 17809  000EB2                     i2u1752_40:
 17810  000EB2  FFFF               	dw	65535	; assembler added errata NOP
 17811                           
 17812                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 17813                           
 17814                           ;doprnt.c: 1429: do
 17815  000EB4  EE20 F002          	lfsr	2,2
 17816  000EB8  500D               	movf	i2__doprnt@pb,w,c
 17817  000EBA  26D9               	addwf	fsr2l,f,c
 17818  000EBC  500E               	movf	i2__doprnt@pb+1,w,c
 17819  000EBE  22DA               	addwfc	fsr2h,f,c
 17820  000EC0  50DE               	movf	postinc2,w,c
 17821  000EC2  10DE               	iorwf	postinc2,w,c
 17822  000EC4  B4D8               	btfsc	status,2,c
 17823  000EC6  D016               	goto	i2l1011
 17824  000EC8  EE20 F002          	lfsr	2,2
 17825  000ECC  500D               	movf	i2__doprnt@pb,w,c
 17826  000ECE  26D9               	addwf	fsr2l,f,c
 17827  000ED0  500E               	movf	i2__doprnt@pb+1,w,c
 17828  000ED2  22DA               	addwfc	fsr2h,f,c
 17829  000ED4  D801               	call	i2u1754_48
 17830  000ED6  D024               	goto	i2l1012
 17831  000ED8                     i2u1754_48:
 17832  000ED8  FFFF               	dw	65535	; assembler added errata NOP
 17833  000EDA  0005               	push	
 17834  000EDC  6EFA               	movwf	pclath,c
 17835  000EDE  50DE               	movf	postinc2,w,c
 17836  000EE0  6EFD               	movwf	tosl,c
 17837  000EE2  50DE               	movf	postinc2,w,c
 17838  000EE4  6EFE               	movwf	tosh,c
 17839  000EE6  50F8               	movf	tblptru,w,c
 17840  000EE8  6EFF               	movwf	tosu,c
 17841  000EEA  50FA               	movf	pclath,w,c
 17842  000EEC  0E20               	movlw	32
 17843  000EEE  0012               	return		;indir
 17844  000EF0  FFFF               	dw	65535	; errata NOP
 17845  000EF2  D016               	goto	i2l1012
 17846  000EF4                     i2l1011:
 17847  000EF4  FFFF               	dw	65535	; assembler added errata NOP
 17848  000EF6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17849  000EFA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17850  000EFE  CFDE F013          	movff	postinc2,??i2__doprnt
 17851  000F02  CFDD F014          	movff	postdec2,??i2__doprnt+1
 17852  000F06  C013  FFD9         	movff	??i2__doprnt,fsr2l
 17853  000F0A  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 17854  000F0E  0E20               	movlw	32
 17855  000F10  6EDF               	movwf	indf2,c
 17856  000F12  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17857  000F16  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17858  000F1A  2ADE               	incf	postinc2,f,c
 17859  000F1C  0E00               	movlw	0
 17860  000F1E  22DD               	addwfc	postdec2,f,c
 17861  000F20                     i2l1012:
 17862  000F20  FFFF               	dw	65535	; assembler added errata NOP
 17863                           
 17864                           ;doprnt.c: 1431: while(--width);
 17865  000F22  061F               	decf	i2__doprnt@width,f,c
 17866  000F24  A0D8               	btfss	status,0,c
 17867  000F26  0620               	decf	i2__doprnt@width+1,f,c
 17868  000F28  501F               	movf	i2__doprnt@width,w,c
 17869  000F2A  1020               	iorwf	i2__doprnt@width+1,w,c
 17870  000F2C  A4D8               	btfss	status,2,c
 17871  000F2E  D7C1               	goto	i2u1752_40
 17872  000F30                     i2u1755_40:
 17873  000F30  FFFF               	dw	65535	; assembler added errata NOP
 17874                           
 17875                           ;doprnt.c: 1438: if(flag & 0x03)
 17876  000F32  C01C  F013         	movff	i2__doprnt@flag,??i2__doprnt
 17877  000F36  0E03               	movlw	3
 17878  000F38  1613               	andwf	??i2__doprnt,f,c
 17879  000F3A  B4D8               	btfsc	status,2,c
 17880  000F3C  D036               	goto	i2l1016
 17881                           
 17882                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 17883  000F3E  EE20 F002          	lfsr	2,2
 17884  000F42  500D               	movf	i2__doprnt@pb,w,c
 17885  000F44  26D9               	addwf	fsr2l,f,c
 17886  000F46  500E               	movf	i2__doprnt@pb+1,w,c
 17887  000F48  22DA               	addwfc	fsr2h,f,c
 17888  000F4A  50DE               	movf	postinc2,w,c
 17889  000F4C  10DE               	iorwf	postinc2,w,c
 17890  000F4E  B4D8               	btfsc	status,2,c
 17891  000F50  D016               	goto	i2l1015
 17892  000F52  EE20 F002          	lfsr	2,2
 17893  000F56  500D               	movf	i2__doprnt@pb,w,c
 17894  000F58  26D9               	addwf	fsr2l,f,c
 17895  000F5A  500E               	movf	i2__doprnt@pb+1,w,c
 17896  000F5C  22DA               	addwfc	fsr2h,f,c
 17897  000F5E  D801               	call	i2u1758_48
 17898  000F60  D024               	goto	i2l1016
 17899  000F62                     i2u1758_48:
 17900  000F62  FFFF               	dw	65535	; assembler added errata NOP
 17901  000F64  0005               	push	
 17902  000F66  6EFA               	movwf	pclath,c
 17903  000F68  50DE               	movf	postinc2,w,c
 17904  000F6A  6EFD               	movwf	tosl,c
 17905  000F6C  50DE               	movf	postinc2,w,c
 17906  000F6E  6EFE               	movwf	tosh,c
 17907  000F70  50F8               	movf	tblptru,w,c
 17908  000F72  6EFF               	movwf	tosu,c
 17909  000F74  50FA               	movf	pclath,w,c
 17910  000F76  0E2D               	movlw	45
 17911  000F78  0012               	return		;indir
 17912  000F7A  FFFF               	dw	65535	; errata NOP
 17913  000F7C  D016               	goto	i2l1016
 17914  000F7E                     i2l1015:
 17915  000F7E  FFFF               	dw	65535	; assembler added errata NOP
 17916  000F80  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17917  000F84  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17918  000F88  CFDE F013          	movff	postinc2,??i2__doprnt
 17919  000F8C  CFDD F014          	movff	postdec2,??i2__doprnt+1
 17920  000F90  C013  FFD9         	movff	??i2__doprnt,fsr2l
 17921  000F94  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 17922  000F98  0E2D               	movlw	45
 17923  000F9A  6EDF               	movwf	indf2,c
 17924  000F9C  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 17925  000FA0  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 17926  000FA4  2ADE               	incf	postinc2,f,c
 17927  000FA6  0E00               	movlw	0
 17928  000FA8  22DD               	addwfc	postdec2,f,c
 17929  000FAA                     i2l1016:
 17930  000FAA  FFFF               	dw	65535	; assembler added errata NOP
 17931                           
 17932                           ;doprnt.c: 1469: }
 17933                           ;doprnt.c: 1472: prec = c;
 17934  000FAC  C021  F017         	movff	i2__doprnt@c,i2__doprnt@prec
 17935                           
 17936                           ;doprnt.c: 1474: while(prec--) {
 17937  000FB0  D05A               	goto	i2l1020
 17938  000FB2  FFFF               	dw	65535	; assembler added errata NOP
 17939                           
 17940                           ;doprnt.c: 1478: {
 17941                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 17942  000FB4  5017               	movf	i2__doprnt@prec,w,c
 17943  000FB6  0D02               	mullw	2
 17944  000FB8  0ED9               	movlw	low _dpowers
 17945  000FBA  24F3               	addwf	prodl,w,c
 17946  000FBC  6EF6               	movwf	tblptrl,c
 17947  000FBE  0E7B               	movlw	high _dpowers
 17948  000FC0  20F4               	addwfc	prodh,w,c
 17949  000FC2  6EF7               	movwf	tblptrh,c
 17950  000FC4                     	if	0	;There are less than 3 active tblptr bytes
 17951  000FC4                     	endif
 17952  000FC4  0009               	tblrd		*+
 17953  000FC6  FFFF               	dw	65535	; errata NOP
 17954  000FC8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 17955  000FCC  000A               	tblrd		*-
 17956  000FCE  FFFF               	dw	65535	; errata NOP
 17957  000FD0  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 17958  000FD4  C018  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 17959  000FD8  C019  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 17960  000FDC  EC19  F03D         	call	i2___lwdiv
 17961  000FE0  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 17962  000FE4  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 17963  000FE8  0E00               	movlw	0
 17964  000FEA  6E0B               	movwf	i2___lwmod@divisor+1,c
 17965  000FEC  0E0A               	movlw	10
 17966  000FEE  6E0A               	movwf	i2___lwmod@divisor,c
 17967  000FF0  EC43  F03C         	call	i2___lwmod	;wreg free
 17968  000FF4  5008               	movf	?i2___lwmod,w,c
 17969  000FF6  0F30               	addlw	48
 17970  000FF8  6E21               	movwf	i2__doprnt@c,c
 17971                           
 17972                           ;doprnt.c: 1523: }
 17973                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 17974  000FFA  EE20 F002          	lfsr	2,2
 17975  000FFE  500D               	movf	i2__doprnt@pb,w,c
 17976  001000  26D9               	addwf	fsr2l,f,c
 17977  001002  500E               	movf	i2__doprnt@pb+1,w,c
 17978  001004  22DA               	addwfc	fsr2h,f,c
 17979  001006  50DE               	movf	postinc2,w,c
 17980  001008  10DE               	iorwf	postinc2,w,c
 17981  00100A  B4D8               	btfsc	status,2,c
 17982  00100C  D016               	goto	i2l1019
 17983  00100E  EE20 F002          	lfsr	2,2
 17984  001012  500D               	movf	i2__doprnt@pb,w,c
 17985  001014  26D9               	addwf	fsr2l,f,c
 17986  001016  500E               	movf	i2__doprnt@pb+1,w,c
 17987  001018  22DA               	addwfc	fsr2h,f,c
 17988  00101A  D801               	call	i2u1760_48
 17989  00101C  D024               	goto	i2l1020
 17990  00101E                     i2u1760_48:
 17991  00101E  FFFF               	dw	65535	; assembler added errata NOP
 17992  001020  0005               	push	
 17993  001022  6EFA               	movwf	pclath,c
 17994  001024  50DE               	movf	postinc2,w,c
 17995  001026  6EFD               	movwf	tosl,c
 17996  001028  50DE               	movf	postinc2,w,c
 17997  00102A  6EFE               	movwf	tosh,c
 17998  00102C  50F8               	movf	tblptru,w,c
 17999  00102E  6EFF               	movwf	tosu,c
 18000  001030  50FA               	movf	pclath,w,c
 18001  001032  5021               	movf	i2__doprnt@c,w,c
 18002  001034  0012               	return		;indir
 18003  001036  FFFF               	dw	65535	; errata NOP
 18004  001038  D016               	goto	i2l1020
 18005  00103A                     i2l1019:
 18006  00103A  FFFF               	dw	65535	; assembler added errata NOP
 18007  00103C  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 18008  001040  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 18009  001044  CFDE F013          	movff	postinc2,??i2__doprnt
 18010  001048  CFDD F014          	movff	postdec2,??i2__doprnt+1
 18011  00104C  C013  FFD9         	movff	??i2__doprnt,fsr2l
 18012  001050  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 18013  001054  C021  FFDF         	movff	i2__doprnt@c,indf2
 18014  001058  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 18015  00105C  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 18016  001060  2ADE               	incf	postinc2,f,c
 18017  001062  0E00               	movlw	0
 18018  001064  22DD               	addwfc	postdec2,f,c
 18019  001066                     i2l1020:
 18020  001066  FFFF               	dw	65535	; assembler added errata NOP
 18021  001068  0617               	decf	i2__doprnt@prec,f,c
 18022  00106A  2817               	incf	i2__doprnt@prec,w,c
 18023  00106C  A4D8               	btfss	status,2,c
 18024  00106E  D7A1               	goto	i2l1018
 18025  001070                     i2u1761_40:
 18026  001070  FFFF               	dw	65535	; assembler added errata NOP
 18027  001072  500F               	movf	i2__doprnt@f,w,c
 18028  001074  6E13               	movwf	??i2__doprnt& (0+255),c
 18029  001076  5010               	movf	i2__doprnt@f+1,w,c
 18030  001078  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 18031  00107A  4A0F               	infsnz	i2__doprnt@f,f,c
 18032  00107C  2A10               	incf	i2__doprnt@f+1,f,c
 18033  00107E  C013  FFF6         	movff	??i2__doprnt,tblptrl
 18034  001082  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 18035  001086  6AF8               	clrf	tblptru,c
 18036  001088  0E05               	movlw	(high __ramtop+-1)
 18037  00108A  64F7               	cpfsgt	tblptrh,c
 18038  00108C  D004               	bra	i2u1762_47
 18039  00108E  0008               	tblrd		*
 18040  001090  FFFF               	dw	65535	; errata NOP
 18041  001092  50F5               	movf	tablat,w,c
 18042  001094  D005               	bra	i2u1762_40
 18043  001096                     i2u1762_47:
 18044  001096  CFF6 FFE9          	movff	tblptrl,fsr0l
 18045  00109A  CFF7 FFEA          	movff	tblptrh,fsr0h
 18046  00109E  50EF               	movf	indf0,w,c
 18047  0010A0                     i2u1762_40:
 18048  0010A0  6E21               	movwf	i2__doprnt@c,c
 18049  0010A2  5021               	movf	i2__doprnt@c,w,c
 18050  0010A4  A4D8               	btfss	status,2,c
 18051  0010A6  D425               	goto	i2l953
 18052  0010A8                     i2u1763_40:
 18053  0010A8  FFFF               	dw	65535	; assembler added errata NOP
 18054                           
 18055                           ;doprnt.c: 1540: return 0;
 18056                           ;	Return value of i2__doprnt is never used
 18057                           
 18058                           ;doprnt.c: 1525: }
 18059                           ;doprnt.c: 1533: }
 18060                           ;doprnt.c: 1535: alldone:
 18061  0010AA  0012               	return		;funcret
 18062  0010AC  FFFF               	dw	65535	; errata NOP
 18063  0010AE                     __end_ofi2__doprnt:
 18064                           	opt stack 0
 18065                           tosu	equ	0xFFF
 18066                           tosh	equ	0xFFE
 18067                           tosl	equ	0xFFD
 18068                           pclatu	equ	0xFFB
 18069                           pclath	equ	0xFFA
 18070                           tblptru	equ	0xFF8
 18071                           tblptrh	equ	0xFF7
 18072                           tblptrl	equ	0xFF6
 18073                           tablat	equ	0xFF5
 18074                           prodh	equ	0xFF4
 18075                           prodl	equ	0xFF3
 18076                           intcon	equ	0xFF2
 18077                           indf0	equ	0xFEF
 18078                           postinc0	equ	0xFEE
 18079                           fsr0h	equ	0xFEA
 18080                           fsr0l	equ	0xFE9
 18081                           wreg	equ	0xFE8
 18082                           postdec1	equ	0xFE5
 18083                           fsr1h	equ	0xFE2
 18084                           fsr1l	equ	0xFE1
 18085                           indf2	equ	0xFDF
 18086                           postinc2	equ	0xFDE
 18087                           postdec2	equ	0xFDD
 18088                           fsr2h	equ	0xFDA
 18089                           fsr2l	equ	0xFD9
 18090                           status	equ	0xFD8
 18091                           
 18092 ;; *************** function i2_putch *****************
 18093 ;; Defined at:
 18094 ;;		line 14 in file "serial.h"
 18095 ;; Parameters:    Size  Location     Type
 18096 ;;  c               1    wreg     unsigned char 
 18097 ;; Auto vars:     Size  Location     Type
 18098 ;;  c               1    0[COMRAM] unsigned char 
 18099 ;; Return value:  Size  Location     Type
 18100 ;;                  1    wreg      void 
 18101 ;; Registers used:
 18102 ;;		wreg
 18103 ;; Tracked objects:
 18104 ;;		On entry : 0/0
 18105 ;;		On exit  : 0/0
 18106 ;;		Unchanged: 0/0
 18107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18108 ;;      Params:         0       0       0       0       0       0       0
 18109 ;;      Locals:         1       0       0       0       0       0       0
 18110 ;;      Temps:          0       0       0       0       0       0       0
 18111 ;;      Totals:         1       0       0       0       0       0       0
 18112 ;;Total ram usage:        1 bytes
 18113 ;; Hardware stack levels used:    1
 18114 ;; This function calls:
 18115 ;;		Nothing
 18116 ;; This function is called by:
 18117 ;; This function uses a non-reentrant model
 18118 ;;
 18119                           
 18120                           	psect	text71
 18121  0070A0                     __ptext71:
 18122                           	opt stack 0
 18123  0070A0                     i2_putch:
 18124                           	opt stack 0
 18125  0070A0  FFFF               	dw	65535	; assembler added errata NOP
 18126                           
 18127                           ;incstack = 0
 18128                           ;i2putch@c stored from wreg
 18129  0070A2  6E01               	movwf	i2putch@c,c
 18130  0070A4  FFFF               	dw	65535	; assembler added errata NOP
 18131                           
 18132                           ;serial.h: 15: while (!TXSTAbits.TRMT);
 18133  0070A6  A2AC               	btfss	4012,1,c	;volatile
 18134  0070A8  D7FD               	goto	i2l5083
 18135                           
 18136                           ;serial.h: 16: TXREG = c;
 18137  0070AA  C001  FFAD         	movff	i2putch@c,4013	;volatile
 18138  0070AE  0012               	return		;funcret
 18139  0070B0  FFFF               	dw	65535	; errata NOP
 18140  0070B2                     __end_ofi2_putch:
 18141                           	opt stack 0
 18142                           tosu	equ	0xFFF
 18143                           tosh	equ	0xFFE
 18144                           tosl	equ	0xFFD
 18145                           pclatu	equ	0xFFB
 18146                           pclath	equ	0xFFA
 18147                           tblptru	equ	0xFF8
 18148                           tblptrh	equ	0xFF7
 18149                           tblptrl	equ	0xFF6
 18150                           tablat	equ	0xFF5
 18151                           prodh	equ	0xFF4
 18152                           prodl	equ	0xFF3
 18153                           intcon	equ	0xFF2
 18154                           indf0	equ	0xFEF
 18155                           postinc0	equ	0xFEE
 18156                           fsr0h	equ	0xFEA
 18157                           fsr0l	equ	0xFE9
 18158                           wreg	equ	0xFE8
 18159                           postdec1	equ	0xFE5
 18160                           fsr1h	equ	0xFE2
 18161                           fsr1l	equ	0xFE1
 18162                           indf2	equ	0xFDF
 18163                           postinc2	equ	0xFDE
 18164                           postdec2	equ	0xFDD
 18165                           fsr2h	equ	0xFDA
 18166                           fsr2l	equ	0xFD9
 18167                           status	equ	0xFD8
 18168                           
 18169 ;; *************** function i2_isdigit *****************
 18170 ;; Defined at:
 18171 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 18172 ;; Parameters:    Size  Location     Type
 18173 ;;  c               1    wreg     unsigned char 
 18174 ;; Auto vars:     Size  Location     Type
 18175 ;;  c               1    2[COMRAM] unsigned char 
 18176 ;; Return value:  Size  Location     Type
 18177 ;;		None               void
 18178 ;; Registers used:
 18179 ;;		wreg, status,2, status,0
 18180 ;; Tracked objects:
 18181 ;;		On entry : 0/0
 18182 ;;		On exit  : 0/0
 18183 ;;		Unchanged: 0/0
 18184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18185 ;;      Params:         0       0       0       0       0       0       0
 18186 ;;      Locals:         2       0       0       0       0       0       0
 18187 ;;      Temps:          1       0       0       0       0       0       0
 18188 ;;      Totals:         3       0       0       0       0       0       0
 18189 ;;Total ram usage:        3 bytes
 18190 ;; Hardware stack levels used:    1
 18191 ;; This function calls:
 18192 ;;		Nothing
 18193 ;; This function is called by:
 18194 ;;		i2__doprnt
 18195 ;; This function uses a non-reentrant model
 18196 ;;
 18197                           
 18198                           	psect	text72
 18199  007164                     __ptext72:
 18200                           	opt stack 0
 18201  007164                     i2_isdigit:
 18202                           	opt stack 0
 18203  007164  FFFF               	dw	65535	; assembler added errata NOP
 18204                           
 18205                           ;incstack = 0
 18206                           ;i2isdigit@c stored from wreg
 18207  007166  6E03               	movwf	i2isdigit@c,c
 18208  007168  0E00               	movlw	0
 18209  00716A  6E02               	movwf	i2_isdigit$1821,c
 18210  00716C  0E3A               	movlw	58
 18211  00716E  6003               	cpfslt	i2isdigit@c,c
 18212  007170  D005               	goto	i2l1368
 18213  007172  0E2F               	movlw	47
 18214  007174  6403               	cpfsgt	i2isdigit@c,c
 18215  007176  D002               	goto	i2l1368
 18216  007178  0E01               	movlw	1
 18217  00717A  6E02               	movwf	i2_isdigit$1821,c
 18218  00717C                     i2l1368:
 18219  00717C  FFFF               	dw	65535	; assembler added errata NOP
 18220  00717E  C002  F001         	movff	i2_isdigit$1821,??i2_isdigit
 18221  007182  3001               	rrcf	??i2_isdigit,w,c
 18222  007184  0012               	return		;funcret
 18223  007186  FFFF               	dw	65535	; errata NOP
 18224  007188                     __end_ofi2_isdigit:
 18225                           	opt stack 0
 18226                           tosu	equ	0xFFF
 18227                           tosh	equ	0xFFE
 18228                           tosl	equ	0xFFD
 18229                           pclatu	equ	0xFFB
 18230                           pclath	equ	0xFFA
 18231                           tblptru	equ	0xFF8
 18232                           tblptrh	equ	0xFF7
 18233                           tblptrl	equ	0xFF6
 18234                           tablat	equ	0xFF5
 18235                           prodh	equ	0xFF4
 18236                           prodl	equ	0xFF3
 18237                           intcon	equ	0xFF2
 18238                           indf0	equ	0xFEF
 18239                           postinc0	equ	0xFEE
 18240                           fsr0h	equ	0xFEA
 18241                           fsr0l	equ	0xFE9
 18242                           wreg	equ	0xFE8
 18243                           postdec1	equ	0xFE5
 18244                           fsr1h	equ	0xFE2
 18245                           fsr1l	equ	0xFE1
 18246                           indf2	equ	0xFDF
 18247                           postinc2	equ	0xFDE
 18248                           postdec2	equ	0xFDD
 18249                           fsr2h	equ	0xFDA
 18250                           fsr2l	equ	0xFD9
 18251                           status	equ	0xFD8
 18252                           
 18253 ;; *************** function i2___wmul *****************
 18254 ;; Defined at:
 18255 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 18256 ;; Parameters:    Size  Location     Type
 18257 ;;  multiplier      2    0[COMRAM] unsigned int 
 18258 ;;  multiplicand    2    2[COMRAM] unsigned int 
 18259 ;; Auto vars:     Size  Location     Type
 18260 ;;  __wmul          2    4[COMRAM] unsigned int 
 18261 ;; Return value:  Size  Location     Type
 18262 ;;                  2    0[COMRAM] unsigned int 
 18263 ;; Registers used:
 18264 ;;		wreg, status,2, status,0, prodl, prodh
 18265 ;; Tracked objects:
 18266 ;;		On entry : 0/0
 18267 ;;		On exit  : 0/0
 18268 ;;		Unchanged: 0/0
 18269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18270 ;;      Params:         4       0       0       0       0       0       0
 18271 ;;      Locals:         2       0       0       0       0       0       0
 18272 ;;      Temps:          0       0       0       0       0       0       0
 18273 ;;      Totals:         6       0       0       0       0       0       0
 18274 ;;Total ram usage:        6 bytes
 18275 ;; Hardware stack levels used:    1
 18276 ;; This function calls:
 18277 ;;		Nothing
 18278 ;; This function is called by:
 18279 ;;		i2__doprnt
 18280 ;; This function uses a non-reentrant model
 18281 ;;
 18282                           
 18283                           	psect	text73
 18284  007224                     __ptext73:
 18285                           	opt stack 0
 18286  007224                     i2___wmul:
 18287                           	opt stack 0
 18288  007224  FFFF               	dw	65535	; assembler added errata NOP
 18289                           
 18290                           ;incstack = 0
 18291  007226  5001               	movf	i2___wmul@multiplier,w,c
 18292  007228  0203               	mulwf	i2___wmul@multiplicand,c
 18293  00722A  CFF3 F005          	movff	prodl,i2___wmul@product
 18294  00722E  CFF4 F006          	movff	prodh,i2___wmul@product+1
 18295  007232  5001               	movf	i2___wmul@multiplier,w,c
 18296  007234  0204               	mulwf	i2___wmul@multiplicand+1,c
 18297  007236  50F3               	movf	prodl,w,c
 18298  007238  2606               	addwf	i2___wmul@product+1,f,c
 18299  00723A  5002               	movf	i2___wmul@multiplier+1,w,c
 18300  00723C  0203               	mulwf	i2___wmul@multiplicand,c
 18301  00723E  50F3               	movf	prodl,w,c
 18302  007240  2606               	addwf	i2___wmul@product+1,f,c
 18303  007242  C005  F001         	movff	i2___wmul@product,?i2___wmul
 18304  007246  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 18305  00724A  0012               	return		;funcret
 18306  00724C  FFFF               	dw	65535	; errata NOP
 18307  00724E                     __end_ofi2___wmul:
 18308                           	opt stack 0
 18309                           tosu	equ	0xFFF
 18310                           tosh	equ	0xFFE
 18311                           tosl	equ	0xFFD
 18312                           pclatu	equ	0xFFB
 18313                           pclath	equ	0xFFA
 18314                           tblptru	equ	0xFF8
 18315                           tblptrh	equ	0xFF7
 18316                           tblptrl	equ	0xFF6
 18317                           tablat	equ	0xFF5
 18318                           prodh	equ	0xFF4
 18319                           prodl	equ	0xFF3
 18320                           intcon	equ	0xFF2
 18321                           indf0	equ	0xFEF
 18322                           postinc0	equ	0xFEE
 18323                           fsr0h	equ	0xFEA
 18324                           fsr0l	equ	0xFE9
 18325                           wreg	equ	0xFE8
 18326                           postdec1	equ	0xFE5
 18327                           fsr1h	equ	0xFE2
 18328                           fsr1l	equ	0xFE1
 18329                           indf2	equ	0xFDF
 18330                           postinc2	equ	0xFDE
 18331                           postdec2	equ	0xFDD
 18332                           fsr2h	equ	0xFDA
 18333                           fsr2l	equ	0xFD9
 18334                           status	equ	0xFD8
 18335                           
 18336 ;; *************** function i2___lwmod *****************
 18337 ;; Defined at:
 18338 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 18339 ;; Parameters:    Size  Location     Type
 18340 ;;  dividend        2    7[COMRAM] unsigned int 
 18341 ;;  divisor         2    9[COMRAM] unsigned int 
 18342 ;; Auto vars:     Size  Location     Type
 18343 ;;  __lwmod         1   11[COMRAM] unsigned char 
 18344 ;; Return value:  Size  Location     Type
 18345 ;;                  2    7[COMRAM] unsigned int 
 18346 ;; Registers used:
 18347 ;;		wreg, status,2, status,0
 18348 ;; Tracked objects:
 18349 ;;		On entry : 0/0
 18350 ;;		On exit  : 0/0
 18351 ;;		Unchanged: 0/0
 18352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18353 ;;      Params:         4       0       0       0       0       0       0
 18354 ;;      Locals:         1       0       0       0       0       0       0
 18355 ;;      Temps:          0       0       0       0       0       0       0
 18356 ;;      Totals:         5       0       0       0       0       0       0
 18357 ;;Total ram usage:        5 bytes
 18358 ;; Hardware stack levels used:    1
 18359 ;; This function calls:
 18360 ;;		Nothing
 18361 ;; This function is called by:
 18362 ;;		i2__doprnt
 18363 ;; This function uses a non-reentrant model
 18364 ;;
 18365                           
 18366                           	psect	text74
 18367  007886                     __ptext74:
 18368                           	opt stack 0
 18369  007886                     i2___lwmod:
 18370                           	opt stack 0
 18371  007886  FFFF               	dw	65535	; assembler added errata NOP
 18372                           
 18373                           ;incstack = 0
 18374  007888  500A               	movf	i2___lwmod@divisor,w,c
 18375  00788A  100B               	iorwf	i2___lwmod@divisor+1,w,c
 18376  00788C  B4D8               	btfsc	status,2,c
 18377  00788E  D01C               	goto	i2l1462
 18378  007890  0E01               	movlw	1
 18379  007892  6E0C               	movwf	i2___lwmod@counter,c
 18380  007894  D005               	goto	i2l1457
 18381  007896  FFFF               	dw	65535	; assembler added errata NOP
 18382  007898  90D8               	bcf	status,0,c
 18383  00789A  360A               	rlcf	i2___lwmod@divisor,f,c
 18384  00789C  360B               	rlcf	i2___lwmod@divisor+1,f,c
 18385  00789E  2A0C               	incf	i2___lwmod@counter,f,c
 18386  0078A0                     i2l1457:
 18387  0078A0  FFFF               	dw	65535	; assembler added errata NOP
 18388  0078A2  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 18389  0078A4  D7F8               	goto	i2l1458
 18390  0078A6                     i2u556_40:
 18391  0078A6  FFFF               	dw	65535	; assembler added errata NOP
 18392  0078A8  500A               	movf	i2___lwmod@divisor,w,c
 18393  0078AA  5C08               	subwf	i2___lwmod@dividend,w,c
 18394  0078AC  500B               	movf	i2___lwmod@divisor+1,w,c
 18395  0078AE  5809               	subwfb	i2___lwmod@dividend+1,w,c
 18396  0078B0  A0D8               	btfss	status,0,c
 18397  0078B2  D004               	goto	i2l1461
 18398  0078B4  500A               	movf	i2___lwmod@divisor,w,c
 18399  0078B6  5E08               	subwf	i2___lwmod@dividend,f,c
 18400  0078B8  500B               	movf	i2___lwmod@divisor+1,w,c
 18401  0078BA  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 18402  0078BC                     i2l1461:
 18403  0078BC  FFFF               	dw	65535	; assembler added errata NOP
 18404  0078BE  90D8               	bcf	status,0,c
 18405  0078C0  320B               	rrcf	i2___lwmod@divisor+1,f,c
 18406  0078C2  320A               	rrcf	i2___lwmod@divisor,f,c
 18407  0078C4  2E0C               	decfsz	i2___lwmod@counter,f,c
 18408  0078C6  D7EF               	goto	i2u556_40
 18409  0078C8                     i2l1462:
 18410  0078C8  FFFF               	dw	65535	; assembler added errata NOP
 18411  0078CA  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 18412  0078CE  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 18413  0078D2  0012               	return		;funcret
 18414  0078D4  FFFF               	dw	65535	; errata NOP
 18415  0078D6                     __end_ofi2___lwmod:
 18416                           	opt stack 0
 18417                           tosu	equ	0xFFF
 18418                           tosh	equ	0xFFE
 18419                           tosl	equ	0xFFD
 18420                           pclatu	equ	0xFFB
 18421                           pclath	equ	0xFFA
 18422                           tblptru	equ	0xFF8
 18423                           tblptrh	equ	0xFF7
 18424                           tblptrl	equ	0xFF6
 18425                           tablat	equ	0xFF5
 18426                           prodh	equ	0xFF4
 18427                           prodl	equ	0xFF3
 18428                           intcon	equ	0xFF2
 18429                           indf0	equ	0xFEF
 18430                           postinc0	equ	0xFEE
 18431                           fsr0h	equ	0xFEA
 18432                           fsr0l	equ	0xFE9
 18433                           wreg	equ	0xFE8
 18434                           postdec1	equ	0xFE5
 18435                           fsr1h	equ	0xFE2
 18436                           fsr1l	equ	0xFE1
 18437                           indf2	equ	0xFDF
 18438                           postinc2	equ	0xFDE
 18439                           postdec2	equ	0xFDD
 18440                           fsr2h	equ	0xFDA
 18441                           fsr2l	equ	0xFD9
 18442                           status	equ	0xFD8
 18443                           
 18444 ;; *************** function i2___lwdiv *****************
 18445 ;; Defined at:
 18446 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 18447 ;; Parameters:    Size  Location     Type
 18448 ;;  dividend        2    0[COMRAM] unsigned int 
 18449 ;;  divisor         2    2[COMRAM] unsigned int 
 18450 ;; Auto vars:     Size  Location     Type
 18451 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 18452 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 18453 ;; Return value:  Size  Location     Type
 18454 ;;                  2    0[COMRAM] unsigned int 
 18455 ;; Registers used:
 18456 ;;		wreg, status,2, status,0
 18457 ;; Tracked objects:
 18458 ;;		On entry : 0/0
 18459 ;;		On exit  : 0/0
 18460 ;;		Unchanged: 0/0
 18461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18462 ;;      Params:         4       0       0       0       0       0       0
 18463 ;;      Locals:         3       0       0       0       0       0       0
 18464 ;;      Temps:          0       0       0       0       0       0       0
 18465 ;;      Totals:         7       0       0       0       0       0       0
 18466 ;;Total ram usage:        7 bytes
 18467 ;; Hardware stack levels used:    1
 18468 ;; This function calls:
 18469 ;;		Nothing
 18470 ;; This function is called by:
 18471 ;;		i2__doprnt
 18472 ;; This function uses a non-reentrant model
 18473 ;;
 18474                           
 18475                           	psect	text75
 18476  007A32                     __ptext75:
 18477                           	opt stack 0
 18478  007A32                     i2___lwdiv:
 18479                           	opt stack 0
 18480  007A32  FFFF               	dw	65535	; assembler added errata NOP
 18481                           
 18482                           ;incstack = 0
 18483  007A34  0E00               	movlw	0
 18484  007A36  6E06               	movwf	i2___lwdiv@quotient+1,c
 18485  007A38  0E00               	movlw	0
 18486  007A3A  6E05               	movwf	i2___lwdiv@quotient,c
 18487  007A3C  5003               	movf	i2___lwdiv@divisor,w,c
 18488  007A3E  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 18489  007A40  B4D8               	btfsc	status,2,c
 18490  007A42  D020               	goto	i2l1452
 18491  007A44  0E01               	movlw	1
 18492  007A46  6E07               	movwf	i2___lwdiv@counter,c
 18493  007A48  D005               	goto	i2l1447
 18494  007A4A  FFFF               	dw	65535	; assembler added errata NOP
 18495  007A4C  90D8               	bcf	status,0,c
 18496  007A4E  3603               	rlcf	i2___lwdiv@divisor,f,c
 18497  007A50  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 18498  007A52  2A07               	incf	i2___lwdiv@counter,f,c
 18499  007A54                     i2l1447:
 18500  007A54  FFFF               	dw	65535	; assembler added errata NOP
 18501  007A56  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 18502  007A58  D7F8               	goto	i2l1448
 18503  007A5A                     i2u553_40:
 18504  007A5A  FFFF               	dw	65535	; assembler added errata NOP
 18505  007A5C  90D8               	bcf	status,0,c
 18506  007A5E  3605               	rlcf	i2___lwdiv@quotient,f,c
 18507  007A60  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 18508  007A62  5003               	movf	i2___lwdiv@divisor,w,c
 18509  007A64  5C01               	subwf	i2___lwdiv@dividend,w,c
 18510  007A66  5004               	movf	i2___lwdiv@divisor+1,w,c
 18511  007A68  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 18512  007A6A  A0D8               	btfss	status,0,c
 18513  007A6C  D005               	goto	i2l1451
 18514  007A6E  5003               	movf	i2___lwdiv@divisor,w,c
 18515  007A70  5E01               	subwf	i2___lwdiv@dividend,f,c
 18516  007A72  5004               	movf	i2___lwdiv@divisor+1,w,c
 18517  007A74  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 18518  007A76  8005               	bsf	i2___lwdiv@quotient,0,c
 18519  007A78                     i2l1451:
 18520  007A78  FFFF               	dw	65535	; assembler added errata NOP
 18521  007A7A  90D8               	bcf	status,0,c
 18522  007A7C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 18523  007A7E  3203               	rrcf	i2___lwdiv@divisor,f,c
 18524  007A80  2E07               	decfsz	i2___lwdiv@counter,f,c
 18525  007A82  D7EB               	goto	i2u553_40
 18526  007A84                     i2l1452:
 18527  007A84  FFFF               	dw	65535	; assembler added errata NOP
 18528  007A86  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 18529  007A8A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 18530  007A8E  0012               	return		;funcret
 18531  007A90  FFFF               	dw	65535	; errata NOP
 18532  007A92                     __end_ofi2___lwdiv:
 18533                           	opt stack 0
 18534                           tosu	equ	0xFFF
 18535                           tosh	equ	0xFFE
 18536                           tosl	equ	0xFFD
 18537                           pclatu	equ	0xFFB
 18538                           pclath	equ	0xFFA
 18539                           tblptru	equ	0xFF8
 18540                           tblptrh	equ	0xFF7
 18541                           tblptrl	equ	0xFF6
 18542                           tablat	equ	0xFF5
 18543                           prodh	equ	0xFF4
 18544                           prodl	equ	0xFF3
 18545                           intcon	equ	0xFF2
 18546                           indf0	equ	0xFEF
 18547                           postinc0	equ	0xFEE
 18548                           fsr0h	equ	0xFEA
 18549                           fsr0l	equ	0xFE9
 18550                           wreg	equ	0xFE8
 18551                           postdec1	equ	0xFE5
 18552                           fsr1h	equ	0xFE2
 18553                           fsr1l	equ	0xFE1
 18554                           indf2	equ	0xFDF
 18555                           postinc2	equ	0xFDE
 18556                           postdec2	equ	0xFDD
 18557                           fsr2h	equ	0xFDA
 18558                           fsr2l	equ	0xFD9
 18559                           status	equ	0xFD8
 18560                           
 18561 ;; *************** function _timer *****************
 18562 ;; Defined at:
 18563 ;;		line 9 in file "temporizador.h"
 18564 ;; Parameters:    Size  Location     Type
 18565 ;;		None
 18566 ;; Auto vars:     Size  Location     Type
 18567 ;;		None
 18568 ;; Return value:  Size  Location     Type
 18569 ;;                  1    wreg      void 
 18570 ;; Registers used:
 18571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18572 ;; Tracked objects:
 18573 ;;		On entry : 0/0
 18574 ;;		On exit  : 0/0
 18575 ;;		Unchanged: 0/0
 18576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18577 ;;      Params:         0       0       0       0       0       0       0
 18578 ;;      Locals:         0       0       0       0       0       0       0
 18579 ;;      Temps:          0       0       0       0       0       0       0
 18580 ;;      Totals:         0       0       0       0       0       0       0
 18581 ;;Total ram usage:        0 bytes
 18582 ;; Hardware stack levels used:    1
 18583 ;; Hardware stack levels required when called:    4
 18584 ;; This function calls:
 18585 ;;		_writeEEPROM16_ext
 18586 ;;		i2_RTC_Init
 18587 ;;		i2_getDS1307TimeDate
 18588 ;;		i2_writeEEPROM_ext
 18589 ;; This function is called by:
 18590 ;;		_TIMER0
 18591 ;; This function uses a non-reentrant model
 18592 ;;
 18593                           
 18594                           	psect	text76
 18595  0034BC                     __ptext76:
 18596                           	opt stack 0
 18597  0034BC                     _timer:
 18598                           	opt stack 0
 18599  0034BC  FFFF               	dw	65535	; assembler added errata NOP
 18600                           
 18601                           ;temporizador.h: 11: if (ajst_rtc) {
 18602                           
 18603                           ;incstack = 0
 18604  0034BE  B273               	btfsc	_ajst_rtc/(0+8),_ajst_rtc& (0+7),c
 18605  0034C0  D068               	goto	i2l540
 18606                           
 18607                           ;temporizador.h: 13: }
 18608                           ;temporizador.h: 14: timer_envio_sms++;
 18609                           
 18610                           ;temporizador.h: 12: return;
 18611  0034C2  2A61               	incf	_timer_envio_sms,f,c
 18612                           
 18613                           ;temporizador.h: 15: if (timer_envio_sms > 100) {
 18614  0034C4  0E64               	movlw	100
 18615  0034C6  6461               	cpfsgt	_timer_envio_sms,c
 18616  0034C8  D002               	goto	i2l536
 18617                           
 18618                           ;temporizador.h: 16: timer_envio_sms = 100;
 18619  0034CA  0E64               	movlw	100
 18620  0034CC  6E61               	movwf	_timer_envio_sms,c
 18621  0034CE                     i2l536:
 18622  0034CE  FFFF               	dw	65535	; assembler added errata NOP
 18623                           
 18624                           ;temporizador.h: 17: }
 18625                           ;temporizador.h: 18: _sec++;
 18626  0034D0  0100               	movlb	0	; () banked
 18627  0034D2  2BF9               	incf	__sec& (0+255),f,b
 18628                           
 18629                           ; BSR set to: 0
 18630                           ;temporizador.h: 19: if (_sec > 59) {
 18631  0034D4  0E3B               	movlw	59
 18632  0034D6  65F9               	cpfsgt	__sec& (0+255),b
 18633  0034D8  D014               	goto	i2l539
 18634                           
 18635                           ; BSR set to: 0
 18636                           ;temporizador.h: 20: _sec = 0;
 18637  0034DA  0E00               	movlw	0
 18638  0034DC  6FF9               	movwf	__sec& (0+255),b
 18639                           
 18640                           ; BSR set to: 0
 18641                           ;temporizador.h: 21: _min++;
 18642  0034DE  2A64               	incf	__min,f,c
 18643                           
 18644                           ; BSR set to: 0
 18645                           ;temporizador.h: 22: if (_min > 59) {
 18646  0034E0  0E3B               	movlw	59
 18647  0034E2  6464               	cpfsgt	__min,c
 18648  0034E4  D00E               	goto	i2l539
 18649                           
 18650                           ; BSR set to: 0
 18651                           ;temporizador.h: 23: _min = 0;
 18652  0034E6  0E00               	movlw	0
 18653  0034E8  6E64               	movwf	__min,c
 18654                           
 18655                           ; BSR set to: 0
 18656                           ;temporizador.h: 24: _hor++;
 18657  0034EA  2BF8               	incf	__hor& (0+255),f,b
 18658                           
 18659                           ; BSR set to: 0
 18660                           ;temporizador.h: 25: if (_hor > 23) {
 18661  0034EC  0E17               	movlw	23
 18662  0034EE  65F8               	cpfsgt	__hor& (0+255),b
 18663  0034F0  D008               	goto	i2l539
 18664                           
 18665                           ; BSR set to: 0
 18666                           ;temporizador.h: 26: _hor = 0;
 18667  0034F2  0E00               	movlw	0
 18668  0034F4  6FF8               	movwf	__hor& (0+255),b
 18669                           
 18670                           ; BSR set to: 0
 18671                           ;temporizador.h: 27: dias_restante_teste++;
 18672  0034F6  2BF1               	incf	_dias_restante_teste& (0+255),f,b
 18673                           
 18674                           ; BSR set to: 0
 18675                           ;temporizador.h: 28: writeEEPROM_ext(10, dias_restante_teste);
 18676  0034F8  C0F1  F004         	movff	_dias_restante_teste,i2writeEEPROM_ext@data
 18677  0034FC  0E0A               	movlw	10
 18678  0034FE  EC92  F03A         	call	i2_writeEEPROM_ext
 18679  003502                     i2l539:
 18680  003502  FFFF               	dw	65535	; assembler added errata NOP
 18681                           
 18682                           ;temporizador.h: 29: }
 18683                           ;temporizador.h: 30: }
 18684                           ;temporizador.h: 31: }
 18685                           ;temporizador.h: 33: if (rtc.min != _min) {
 18686  003504  5064               	movf	__min,w,c
 18687  003506  1868               	xorwf	_rtc+2,w,c
 18688  003508  B4D8               	btfsc	status,2,c
 18689  00350A  D043               	goto	i2l540
 18690                           
 18691                           ;temporizador.h: 35: if (estacionaria_Ligada) {
 18692  00350C  0100               	movlb	0	; () banked
 18693  00350E  51ED               	movf	_estacionaria_Ligada& (0+255),w,b
 18694  003510  B4D8               	btfsc	status,2,c
 18695  003512  D009               	goto	i2l541
 18696                           
 18697                           ; BSR set to: 0
 18698                           ;temporizador.h: 36: horimetro++;
 18699  003514  4A4F               	infsnz	_horimetro,f,c
 18700  003516  2A50               	incf	_horimetro+1,f,c
 18701                           
 18702                           ; BSR set to: 0
 18703                           ;temporizador.h: 37: writeEEPROM16_ext(8, horimetro);
 18704  003518  C04F  F006         	movff	_horimetro,writeEEPROM16_ext@data
 18705  00351C  C050  F007         	movff	_horimetro+1,writeEEPROM16_ext@data+1
 18706  003520  0E08               	movlw	8
 18707  003522  ECA1  F038         	call	_writeEEPROM16_ext
 18708  003526                     i2l541:
 18709  003526  FFFF               	dw	65535	; assembler added errata NOP
 18710                           
 18711                           ;temporizador.h: 38: }
 18712                           ;temporizador.h: 39: tempo_reenvio_SMS++;
 18713  003528  2A72               	incf	_tempo_reenvio_SMS,f,c
 18714                           
 18715                           ;temporizador.h: 40: if (tempo_reenvio_SMS >= 7) {
 18716  00352A  0E06               	movlw	6
 18717  00352C  6472               	cpfsgt	_tempo_reenvio_SMS,c
 18718  00352E  D002               	goto	i2l542
 18719                           
 18720                           ;temporizador.h: 41: tempo_reenvio_SMS = 6;
 18721  003530  0E06               	movlw	6
 18722  003532  6E72               	movwf	_tempo_reenvio_SMS,c
 18723  003534                     i2l542:
 18724  003534  FFFF               	dw	65535	; assembler added errata NOP
 18725                           
 18726                           ;temporizador.h: 42: }
 18727                           ;temporizador.h: 44: getDS1307TimeDate(&rtc);
 18728  003536  0E66               	movlw	low _rtc
 18729  003538  6E06               	movwf	i2getDS1307TimeDate@ptrToUserVal,c
 18730  00353A  0E00               	movlw	high _rtc
 18731  00353C  6E07               	movwf	i2getDS1307TimeDate@ptrToUserVal+1,c
 18732  00353E  EC86  F017         	call	i2_getDS1307TimeDate	;wreg free
 18733                           
 18734                           ;temporizador.h: 45: if ((rtc.sec > 60) && (rtc.min > 60) && (rtc.hour > 24)) {
 18735  003542  0E3C               	movlw	60
 18736  003544  6467               	cpfsgt	_rtc+1,c
 18737  003546  D018               	goto	i2l543
 18738  003548  0E3C               	movlw	60
 18739  00354A  6468               	cpfsgt	_rtc+2,c
 18740  00354C  D015               	goto	i2l543
 18741  00354E  0E18               	movlw	24
 18742  003550  6469               	cpfsgt	_rtc+3,c
 18743  003552  D012               	goto	i2l543
 18744                           
 18745                           ;temporizador.h: 47: falha = 2;
 18746  003554  0E02               	movlw	2
 18747  003556  0100               	movlb	0	; () banked
 18748  003558  6FDB               	movwf	_falha& (0+255),b
 18749                           
 18750                           ; BSR set to: 0
 18751                           ;temporizador.h: 48: RTC_Init();
 18752  00355A  EC99  F039         	call	i2_RTC_Init	;wreg free
 18753                           
 18754                           ;temporizador.h: 49: rtc.sec = _sec;
 18755  00355E  C0F9  F067         	movff	__sec,_rtc+1
 18756                           
 18757                           ;temporizador.h: 50: rtc.min = _min;
 18758  003562  C064  F068         	movff	__min,_rtc+2
 18759                           
 18760                           ;temporizador.h: 51: rtc.hour = _hor;
 18761  003566  C0F8  F069         	movff	__hor,_rtc+3
 18762                           
 18763                           ;temporizador.h: 52: rtc.date = _dia;
 18764  00356A  C0F7  F06A         	movff	__dia,_rtc+4
 18765                           
 18766                           ;temporizador.h: 53: rtc.month = _mes;
 18767  00356E  C0F6  F06B         	movff	__mes,_rtc+5
 18768                           
 18769                           ;temporizador.h: 54: rtc.year = _ano;
 18770  003572  C0F5  F06C         	movff	__ano,_rtc+6
 18771                           
 18772                           ;temporizador.h: 55: return;
 18773  003576  D00D               	goto	i2l540
 18774  003578                     i2l543:
 18775  003578  FFFF               	dw	65535	; assembler added errata NOP
 18776                           
 18777                           ;temporizador.h: 56: }
 18778                           ;temporizador.h: 57: _sec = rtc.sec;
 18779  00357A  C067  F0F9         	movff	_rtc+1,__sec
 18780                           
 18781                           ;temporizador.h: 58: _min = rtc.min;
 18782  00357E  C068  F064         	movff	_rtc+2,__min
 18783                           
 18784                           ;temporizador.h: 59: _hor = rtc.hour;
 18785  003582  C069  F0F8         	movff	_rtc+3,__hor
 18786                           
 18787                           ;temporizador.h: 60: _dia = rtc.date;
 18788  003586  C06A  F0F7         	movff	_rtc+4,__dia
 18789                           
 18790                           ;temporizador.h: 61: _mes = rtc.month;
 18791  00358A  C06B  F0F6         	movff	_rtc+5,__mes
 18792                           
 18793                           ;temporizador.h: 62: _ano = rtc.year;
 18794  00358E  C06C  F0F5         	movff	_rtc+6,__ano
 18795  003592                     i2l540:
 18796  003592  FFFF               	dw	65535	; assembler added errata NOP
 18797  003594  0012               	return		;funcret
 18798  003596  FFFF               	dw	65535	; errata NOP
 18799  003598                     __end_of_timer:
 18800                           	opt stack 0
 18801                           tosu	equ	0xFFF
 18802                           tosh	equ	0xFFE
 18803                           tosl	equ	0xFFD
 18804                           pclatu	equ	0xFFB
 18805                           pclath	equ	0xFFA
 18806                           tblptru	equ	0xFF8
 18807                           tblptrh	equ	0xFF7
 18808                           tblptrl	equ	0xFF6
 18809                           tablat	equ	0xFF5
 18810                           prodh	equ	0xFF4
 18811                           prodl	equ	0xFF3
 18812                           intcon	equ	0xFF2
 18813                           indf0	equ	0xFEF
 18814                           postinc0	equ	0xFEE
 18815                           fsr0h	equ	0xFEA
 18816                           fsr0l	equ	0xFE9
 18817                           wreg	equ	0xFE8
 18818                           postdec1	equ	0xFE5
 18819                           fsr1h	equ	0xFE2
 18820                           fsr1l	equ	0xFE1
 18821                           indf2	equ	0xFDF
 18822                           postinc2	equ	0xFDE
 18823                           postdec2	equ	0xFDD
 18824                           fsr2h	equ	0xFDA
 18825                           fsr2l	equ	0xFD9
 18826                           status	equ	0xFD8
 18827                           
 18828 ;; *************** function i2_getDS1307TimeDate *****************
 18829 ;; Defined at:
 18830 ;;		line 52 in file "ds1307.h"
 18831 ;; Parameters:    Size  Location     Type
 18832 ;;  ptrToUserVal    2    5[COMRAM] PTR struct .
 18833 ;;		 -> rtc(7), 
 18834 ;; Auto vars:     Size  Location     Type
 18835 ;;		None
 18836 ;; Return value:  Size  Location     Type
 18837 ;;                  1    wreg      void 
 18838 ;; Registers used:
 18839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18840 ;; Tracked objects:
 18841 ;;		On entry : 0/0
 18842 ;;		On exit  : 0/0
 18843 ;;		Unchanged: 0/0
 18844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18845 ;;      Params:         2       0       0       0       0       0       0
 18846 ;;      Locals:         0       0       0       0       0       0       0
 18847 ;;      Temps:          0       0       0       0       0       0       0
 18848 ;;      Totals:         2       0       0       0       0       0       0
 18849 ;;Total ram usage:        2 bytes
 18850 ;; Hardware stack levels used:    1
 18851 ;; Hardware stack levels required when called:    2
 18852 ;; This function calls:
 18853 ;;		i2_BCDtoDEC
 18854 ;;		i2_I2C_Read
 18855 ;;		i2_I2C_Restart
 18856 ;;		i2_I2C_Start
 18857 ;;		i2_I2C_Stop
 18858 ;;		i2_I2C_Write
 18859 ;; This function is called by:
 18860 ;;		_timer
 18861 ;; This function uses a non-reentrant model
 18862 ;;
 18863                           
 18864                           	psect	text77
 18865  002F0C                     __ptext77:
 18866                           	opt stack 0
 18867  002F0C                     i2_getDS1307TimeDate:
 18868                           	opt stack 0
 18869  002F0C  FFFF               	dw	65535	; assembler added errata NOP
 18870                           
 18871                           ;ds1307.h: 54: I2C_Start();
 18872                           
 18873                           ;incstack = 0
 18874  002F0E  EC1E  F038         	call	i2_I2C_Start	;wreg free
 18875                           
 18876                           ;ds1307.h: 55: I2C_Write(0xD0);
 18877  002F12  0E00               	movlw	0
 18878  002F14  6E03               	movwf	i2I2C_Write@d+1,c
 18879  002F16  0ED0               	movlw	208
 18880  002F18  6E02               	movwf	i2I2C_Write@d,c
 18881  002F1A  EC42  F038         	call	i2_I2C_Write	;wreg free
 18882                           
 18883                           ;ds1307.h: 56: I2C_Write(0x00);
 18884  002F1E  0E00               	movlw	0
 18885  002F20  6E03               	movwf	i2I2C_Write@d+1,c
 18886  002F22  0E00               	movlw	0
 18887  002F24  6E02               	movwf	i2I2C_Write@d,c
 18888  002F26  EC42  F038         	call	i2_I2C_Write	;wreg free
 18889                           
 18890                           ;ds1307.h: 57: I2C_Restart();
 18891  002F2A  EC2A  F038         	call	i2_I2C_Restart	;wreg free
 18892                           
 18893                           ;ds1307.h: 58: I2C_Write(0xD1);
 18894  002F2E  0E00               	movlw	0
 18895  002F30  6E03               	movwf	i2I2C_Write@d+1,c
 18896  002F32  0ED1               	movlw	209
 18897  002F34  6E02               	movwf	i2I2C_Write@d,c
 18898  002F36  EC42  F038         	call	i2_I2C_Write	;wreg free
 18899                           
 18900                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
 18901  002F3A  EE20 F001          	lfsr	2,1
 18902  002F3E  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 18903  002F40  26D9               	addwf	fsr2l,f,c
 18904  002F42  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 18905  002F44  22DA               	addwfc	fsr2h,f,c
 18906  002F46  0E00               	movlw	0
 18907  002F48  6E03               	movwf	i2I2C_Read@a+1,c
 18908  002F4A  0E01               	movlw	1
 18909  002F4C  6E02               	movwf	i2I2C_Read@a,c
 18910  002F4E  ECB2  F039         	call	i2_I2C_Read	;wreg free
 18911  002F52  5002               	movf	?i2_I2C_Read,w,c
 18912  002F54  EC62  F038         	call	i2_BCDtoDEC
 18913  002F58  6EDF               	movwf	indf2,c
 18914                           
 18915                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
 18916  002F5A  EE20 F002          	lfsr	2,2
 18917  002F5E  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 18918  002F60  26D9               	addwf	fsr2l,f,c
 18919  002F62  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 18920  002F64  22DA               	addwfc	fsr2h,f,c
 18921  002F66  0E00               	movlw	0
 18922  002F68  6E03               	movwf	i2I2C_Read@a+1,c
 18923  002F6A  0E01               	movlw	1
 18924  002F6C  6E02               	movwf	i2I2C_Read@a,c
 18925  002F6E  ECB2  F039         	call	i2_I2C_Read	;wreg free
 18926  002F72  5002               	movf	?i2_I2C_Read,w,c
 18927  002F74  EC62  F038         	call	i2_BCDtoDEC
 18928  002F78  6EDF               	movwf	indf2,c
 18929                           
 18930                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
 18931  002F7A  EE20 F003          	lfsr	2,3
 18932  002F7E  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 18933  002F80  26D9               	addwf	fsr2l,f,c
 18934  002F82  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 18935  002F84  22DA               	addwfc	fsr2h,f,c
 18936  002F86  0E00               	movlw	0
 18937  002F88  6E03               	movwf	i2I2C_Read@a+1,c
 18938  002F8A  0E01               	movlw	1
 18939  002F8C  6E02               	movwf	i2I2C_Read@a,c
 18940  002F8E  ECB2  F039         	call	i2_I2C_Read	;wreg free
 18941  002F92  5002               	movf	?i2_I2C_Read,w,c
 18942  002F94  EC62  F038         	call	i2_BCDtoDEC
 18943  002F98  6EDF               	movwf	indf2,c
 18944                           
 18945                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
 18946  002F9A  0E00               	movlw	0
 18947  002F9C  6E03               	movwf	i2I2C_Read@a+1,c
 18948  002F9E  0E01               	movlw	1
 18949  002FA0  6E02               	movwf	i2I2C_Read@a,c
 18950  002FA2  ECB2  F039         	call	i2_I2C_Read	;wreg free
 18951  002FA6  5002               	movf	?i2_I2C_Read,w,c
 18952  002FA8  EC62  F038         	call	i2_BCDtoDEC
 18953  002FAC  C006  FFD9         	movff	i2getDS1307TimeDate@ptrToUserVal,fsr2l
 18954  002FB0  C007  FFDA         	movff	i2getDS1307TimeDate@ptrToUserVal+1,fsr2h
 18955  002FB4  6EDF               	movwf	indf2,c
 18956                           
 18957                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
 18958  002FB6  EE20 F004          	lfsr	2,4
 18959  002FBA  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 18960  002FBC  26D9               	addwf	fsr2l,f,c
 18961  002FBE  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 18962  002FC0  22DA               	addwfc	fsr2h,f,c
 18963  002FC2  0E00               	movlw	0
 18964  002FC4  6E03               	movwf	i2I2C_Read@a+1,c
 18965  002FC6  0E01               	movlw	1
 18966  002FC8  6E02               	movwf	i2I2C_Read@a,c
 18967  002FCA  ECB2  F039         	call	i2_I2C_Read	;wreg free
 18968  002FCE  5002               	movf	?i2_I2C_Read,w,c
 18969  002FD0  EC62  F038         	call	i2_BCDtoDEC
 18970  002FD4  6EDF               	movwf	indf2,c
 18971                           
 18972                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
 18973  002FD6  EE20 F005          	lfsr	2,5
 18974  002FDA  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 18975  002FDC  26D9               	addwf	fsr2l,f,c
 18976  002FDE  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 18977  002FE0  22DA               	addwfc	fsr2h,f,c
 18978  002FE2  0E00               	movlw	0
 18979  002FE4  6E03               	movwf	i2I2C_Read@a+1,c
 18980  002FE6  0E01               	movlw	1
 18981  002FE8  6E02               	movwf	i2I2C_Read@a,c
 18982  002FEA  ECB2  F039         	call	i2_I2C_Read	;wreg free
 18983  002FEE  5002               	movf	?i2_I2C_Read,w,c
 18984  002FF0  EC62  F038         	call	i2_BCDtoDEC
 18985  002FF4  6EDF               	movwf	indf2,c
 18986                           
 18987                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
 18988  002FF6  EE20 F006          	lfsr	2,6
 18989  002FFA  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 18990  002FFC  26D9               	addwf	fsr2l,f,c
 18991  002FFE  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 18992  003000  22DA               	addwfc	fsr2h,f,c
 18993  003002  0E00               	movlw	0
 18994  003004  6E03               	movwf	i2I2C_Read@a+1,c
 18995  003006  0E00               	movlw	0
 18996  003008  6E02               	movwf	i2I2C_Read@a,c
 18997  00300A  ECB2  F039         	call	i2_I2C_Read	;wreg free
 18998  00300E  5002               	movf	?i2_I2C_Read,w,c
 18999  003010  EC62  F038         	call	i2_BCDtoDEC
 19000  003014  6EDF               	movwf	indf2,c
 19001                           
 19002                           ;ds1307.h: 66: I2C_Stop();
 19003  003016  EC24  F038         	call	i2_I2C_Stop	;wreg free
 19004  00301A  0012               	return		;funcret
 19005  00301C  FFFF               	dw	65535	; errata NOP
 19006  00301E                     __end_ofi2_getDS1307TimeDate:
 19007                           	opt stack 0
 19008                           tosu	equ	0xFFF
 19009                           tosh	equ	0xFFE
 19010                           tosl	equ	0xFFD
 19011                           pclatu	equ	0xFFB
 19012                           pclath	equ	0xFFA
 19013                           tblptru	equ	0xFF8
 19014                           tblptrh	equ	0xFF7
 19015                           tblptrl	equ	0xFF6
 19016                           tablat	equ	0xFF5
 19017                           prodh	equ	0xFF4
 19018                           prodl	equ	0xFF3
 19019                           intcon	equ	0xFF2
 19020                           indf0	equ	0xFEF
 19021                           postinc0	equ	0xFEE
 19022                           fsr0h	equ	0xFEA
 19023                           fsr0l	equ	0xFE9
 19024                           wreg	equ	0xFE8
 19025                           postdec1	equ	0xFE5
 19026                           fsr1h	equ	0xFE2
 19027                           fsr1l	equ	0xFE1
 19028                           indf2	equ	0xFDF
 19029                           postinc2	equ	0xFDE
 19030                           postdec2	equ	0xFDD
 19031                           fsr2h	equ	0xFDA
 19032                           fsr2l	equ	0xFD9
 19033                           status	equ	0xFD8
 19034                           
 19035 ;; *************** function i2_I2C_Restart *****************
 19036 ;; Defined at:
 19037 ;;		line 31 in file "I2C.c"
 19038 ;; Parameters:    Size  Location     Type
 19039 ;;		None
 19040 ;; Auto vars:     Size  Location     Type
 19041 ;;		None
 19042 ;; Return value:  Size  Location     Type
 19043 ;;                  1    wreg      void 
 19044 ;; Registers used:
 19045 ;;		wreg, status,2, status,0, cstack
 19046 ;; Tracked objects:
 19047 ;;		On entry : 0/0
 19048 ;;		On exit  : 0/0
 19049 ;;		Unchanged: 0/0
 19050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19051 ;;      Params:         0       0       0       0       0       0       0
 19052 ;;      Locals:         0       0       0       0       0       0       0
 19053 ;;      Temps:          0       0       0       0       0       0       0
 19054 ;;      Totals:         0       0       0       0       0       0       0
 19055 ;;Total ram usage:        0 bytes
 19056 ;; Hardware stack levels used:    1
 19057 ;; Hardware stack levels required when called:    1
 19058 ;; This function calls:
 19059 ;;		i2_I2C_Wait
 19060 ;; This function is called by:
 19061 ;;		i2_getDS1307TimeDate
 19062 ;; This function uses a non-reentrant model
 19063 ;;
 19064                           
 19065                           	psect	text78
 19066  007054                     __ptext78:
 19067                           	opt stack 0
 19068  007054                     i2_I2C_Restart:
 19069                           	opt stack 0
 19070  007054  FFFF               	dw	65535	; assembler added errata NOP
 19071                           
 19072                           ;I2C.c: 32: I2C_Wait();
 19073                           
 19074                           ;incstack = 0
 19075  007056  EC6D  F038         	call	i2_I2C_Wait	;wreg free
 19076                           
 19077                           ;I2C.c: 33: RSEN = 1;
 19078  00705A  82C5               	bsf	4037,1,c	;volatile
 19079  00705C  0012               	return		;funcret
 19080  00705E  FFFF               	dw	65535	; errata NOP
 19081  007060                     __end_ofi2_I2C_Restart:
 19082                           	opt stack 0
 19083                           tosu	equ	0xFFF
 19084                           tosh	equ	0xFFE
 19085                           tosl	equ	0xFFD
 19086                           pclatu	equ	0xFFB
 19087                           pclath	equ	0xFFA
 19088                           tblptru	equ	0xFF8
 19089                           tblptrh	equ	0xFF7
 19090                           tblptrl	equ	0xFF6
 19091                           tablat	equ	0xFF5
 19092                           prodh	equ	0xFF4
 19093                           prodl	equ	0xFF3
 19094                           intcon	equ	0xFF2
 19095                           indf0	equ	0xFEF
 19096                           postinc0	equ	0xFEE
 19097                           fsr0h	equ	0xFEA
 19098                           fsr0l	equ	0xFE9
 19099                           wreg	equ	0xFE8
 19100                           postdec1	equ	0xFE5
 19101                           fsr1h	equ	0xFE2
 19102                           fsr1l	equ	0xFE1
 19103                           indf2	equ	0xFDF
 19104                           postinc2	equ	0xFDE
 19105                           postdec2	equ	0xFDD
 19106                           fsr2h	equ	0xFDA
 19107                           fsr2l	equ	0xFD9
 19108                           status	equ	0xFD8
 19109                           
 19110 ;; *************** function i2_I2C_Read *****************
 19111 ;; Defined at:
 19112 ;;		line 47 in file "I2C.c"
 19113 ;; Parameters:    Size  Location     Type
 19114 ;;  a               2    1[COMRAM] unsigned short 
 19115 ;; Auto vars:     Size  Location     Type
 19116 ;;  I2C_Read        2    3[COMRAM] unsigned short 
 19117 ;; Return value:  Size  Location     Type
 19118 ;;                  2    1[COMRAM] unsigned short 
 19119 ;; Registers used:
 19120 ;;		wreg, status,2, status,0, cstack
 19121 ;; Tracked objects:
 19122 ;;		On entry : 0/0
 19123 ;;		On exit  : 0/0
 19124 ;;		Unchanged: 0/0
 19125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19126 ;;      Params:         2       0       0       0       0       0       0
 19127 ;;      Locals:         2       0       0       0       0       0       0
 19128 ;;      Temps:          0       0       0       0       0       0       0
 19129 ;;      Totals:         4       0       0       0       0       0       0
 19130 ;;Total ram usage:        4 bytes
 19131 ;; Hardware stack levels used:    1
 19132 ;; Hardware stack levels required when called:    1
 19133 ;; This function calls:
 19134 ;;		i2_I2C_Wait
 19135 ;; This function is called by:
 19136 ;;		i2_getDS1307TimeDate
 19137 ;; This function uses a non-reentrant model
 19138 ;;
 19139                           
 19140                           	psect	text79
 19141  007364                     __ptext79:
 19142                           	opt stack 0
 19143  007364                     i2_I2C_Read:
 19144                           	opt stack 0
 19145  007364  FFFF               	dw	65535	; assembler added errata NOP
 19146                           
 19147                           ;I2C.c: 48: unsigned short temp;
 19148                           ;I2C.c: 49: I2C_Wait();
 19149                           
 19150                           ;incstack = 0
 19151  007366  EC6D  F038         	call	i2_I2C_Wait	;wreg free
 19152                           
 19153                           ;I2C.c: 50: RCEN = 1;
 19154  00736A  86C5               	bsf	4037,3,c	;volatile
 19155                           
 19156                           ;I2C.c: 51: I2C_Wait();
 19157  00736C  EC6D  F038         	call	i2_I2C_Wait	;wreg free
 19158                           
 19159                           ;I2C.c: 52: temp = SSPBUF;
 19160  007370  CFC9 F004          	movff	4041,i2I2C_Read@temp	;volatile
 19161  007374  6A05               	clrf	i2I2C_Read@temp+1,c
 19162                           
 19163                           ;I2C.c: 53: I2C_Wait();
 19164  007376  EC6D  F038         	call	i2_I2C_Wait	;wreg free
 19165                           
 19166                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 19167  00737A  5002               	movf	i2I2C_Read@a,w,c
 19168  00737C  1003               	iorwf	i2I2C_Read@a+1,w,c
 19169  00737E  A4D8               	btfss	status,2,c
 19170  007380  D002               	goto	i2u589_40
 19171  007382  8AC5               	bsf	4037,5,c	;volatile
 19172  007384  D002               	goto	i2u590_45
 19173  007386                     i2u589_40:
 19174  007386  FFFF               	dw	65535	; assembler added errata NOP
 19175  007388  9AC5               	bcf	4037,5,c	;volatile
 19176  00738A                     i2u590_45:
 19177  00738A  FFFF               	dw	65535	; assembler added errata NOP
 19178                           
 19179                           ;I2C.c: 55: ACKEN = 1;
 19180  00738C  88C5               	bsf	4037,4,c	;volatile
 19181                           
 19182                           ;I2C.c: 56: return temp;
 19183  00738E  C004  F002         	movff	i2I2C_Read@temp,?i2_I2C_Read
 19184  007392  C005  F003         	movff	i2I2C_Read@temp+1,?i2_I2C_Read+1
 19185  007396  0012               	return		;funcret
 19186  007398  FFFF               	dw	65535	; errata NOP
 19187  00739A                     __end_ofi2_I2C_Read:
 19188                           	opt stack 0
 19189                           tosu	equ	0xFFF
 19190                           tosh	equ	0xFFE
 19191                           tosl	equ	0xFFD
 19192                           pclatu	equ	0xFFB
 19193                           pclath	equ	0xFFA
 19194                           tblptru	equ	0xFF8
 19195                           tblptrh	equ	0xFF7
 19196                           tblptrl	equ	0xFF6
 19197                           tablat	equ	0xFF5
 19198                           prodh	equ	0xFF4
 19199                           prodl	equ	0xFF3
 19200                           intcon	equ	0xFF2
 19201                           indf0	equ	0xFEF
 19202                           postinc0	equ	0xFEE
 19203                           fsr0h	equ	0xFEA
 19204                           fsr0l	equ	0xFE9
 19205                           wreg	equ	0xFE8
 19206                           postdec1	equ	0xFE5
 19207                           fsr1h	equ	0xFE2
 19208                           fsr1l	equ	0xFE1
 19209                           indf2	equ	0xFDF
 19210                           postinc2	equ	0xFDE
 19211                           postdec2	equ	0xFDD
 19212                           fsr2h	equ	0xFDA
 19213                           fsr2l	equ	0xFD9
 19214                           status	equ	0xFD8
 19215                           
 19216 ;; *************** function i2_BCDtoDEC *****************
 19217 ;; Defined at:
 19218 ;;		line 34 in file "function.c"
 19219 ;; Parameters:    Size  Location     Type
 19220 ;;  val             1    wreg     unsigned char 
 19221 ;; Auto vars:     Size  Location     Type
 19222 ;;  val             1    0[COMRAM] unsigned char 
 19223 ;; Return value:  Size  Location     Type
 19224 ;;                  1    wreg      unsigned char 
 19225 ;; Registers used:
 19226 ;;		wreg, status,2, status,0, prodl, prodh
 19227 ;; Tracked objects:
 19228 ;;		On entry : 0/0
 19229 ;;		On exit  : 0/0
 19230 ;;		Unchanged: 0/0
 19231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19232 ;;      Params:         0       0       0       0       0       0       0
 19233 ;;      Locals:         1       0       0       0       0       0       0
 19234 ;;      Temps:          0       0       0       0       0       0       0
 19235 ;;      Totals:         1       0       0       0       0       0       0
 19236 ;;Total ram usage:        1 bytes
 19237 ;; Hardware stack levels used:    1
 19238 ;; This function calls:
 19239 ;;		Nothing
 19240 ;; This function is called by:
 19241 ;;		i2_getDS1307TimeDate
 19242 ;; This function uses a non-reentrant model
 19243 ;;
 19244                           
 19245                           	psect	text80
 19246  0070C4                     __ptext80:
 19247                           	opt stack 0
 19248  0070C4                     i2_BCDtoDEC:
 19249                           	opt stack 0
 19250  0070C4  FFFF               	dw	65535	; assembler added errata NOP
 19251                           
 19252                           ;incstack = 0
 19253                           ;i2BCDtoDEC@val stored from wreg
 19254  0070C6  6E01               	movwf	i2BCDtoDEC@val,c
 19255                           
 19256                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
 19257  0070C8  3801               	swapf	i2BCDtoDEC@val,w,c
 19258  0070CA  0B0F               	andlw	15
 19259  0070CC  0B0F               	andlw	15
 19260  0070CE  0D0A               	mullw	10
 19261  0070D0  5001               	movf	i2BCDtoDEC@val,w,c
 19262  0070D2  0B0F               	andlw	15
 19263  0070D4  24F3               	addwf	prodl,w,c
 19264  0070D6  0012               	return		;funcret
 19265  0070D8  FFFF               	dw	65535	; errata NOP
 19266  0070DA                     __end_ofi2_BCDtoDEC:
 19267                           	opt stack 0
 19268                           tosu	equ	0xFFF
 19269                           tosh	equ	0xFFE
 19270                           tosl	equ	0xFFD
 19271                           pclatu	equ	0xFFB
 19272                           pclath	equ	0xFFA
 19273                           tblptru	equ	0xFF8
 19274                           tblptrh	equ	0xFF7
 19275                           tblptrl	equ	0xFF6
 19276                           tablat	equ	0xFF5
 19277                           prodh	equ	0xFF4
 19278                           prodl	equ	0xFF3
 19279                           intcon	equ	0xFF2
 19280                           indf0	equ	0xFEF
 19281                           postinc0	equ	0xFEE
 19282                           fsr0h	equ	0xFEA
 19283                           fsr0l	equ	0xFE9
 19284                           wreg	equ	0xFE8
 19285                           postdec1	equ	0xFE5
 19286                           fsr1h	equ	0xFE2
 19287                           fsr1l	equ	0xFE1
 19288                           indf2	equ	0xFDF
 19289                           postinc2	equ	0xFDE
 19290                           postdec2	equ	0xFDD
 19291                           fsr2h	equ	0xFDA
 19292                           fsr2l	equ	0xFD9
 19293                           status	equ	0xFD8
 19294                           
 19295 ;; *************** function i2_RTC_Init *****************
 19296 ;; Defined at:
 19297 ;;		line 98 in file "ds1307.h"
 19298 ;; Parameters:    Size  Location     Type
 19299 ;;		None
 19300 ;; Auto vars:     Size  Location     Type
 19301 ;;		None
 19302 ;; Return value:  Size  Location     Type
 19303 ;;                  1    wreg      void 
 19304 ;; Registers used:
 19305 ;;		wreg, status,2, status,0, cstack
 19306 ;; Tracked objects:
 19307 ;;		On entry : 0/0
 19308 ;;		On exit  : 0/0
 19309 ;;		Unchanged: 0/0
 19310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19311 ;;      Params:         0       0       0       0       0       0       0
 19312 ;;      Locals:         0       0       0       0       0       0       0
 19313 ;;      Temps:          0       0       0       0       0       0       0
 19314 ;;      Totals:         0       0       0       0       0       0       0
 19315 ;;Total ram usage:        0 bytes
 19316 ;; Hardware stack levels used:    1
 19317 ;; Hardware stack levels required when called:    2
 19318 ;; This function calls:
 19319 ;;		i2_I2C_Start
 19320 ;;		i2_I2C_Stop
 19321 ;;		i2_I2C_Write
 19322 ;; This function is called by:
 19323 ;;		_timer
 19324 ;; This function uses a non-reentrant model
 19325 ;;
 19326                           
 19327                           	psect	text81
 19328  007332                     __ptext81:
 19329                           	opt stack 0
 19330  007332                     i2_RTC_Init:
 19331                           	opt stack 0
 19332  007332  FFFF               	dw	65535	; assembler added errata NOP
 19333                           
 19334                           ;ds1307.h: 100: I2C_Start();
 19335                           
 19336                           ;incstack = 0
 19337  007334  EC1E  F038         	call	i2_I2C_Start	;wreg free
 19338                           
 19339                           ;ds1307.h: 101: I2C_Write(0xD0);
 19340  007338  0E00               	movlw	0
 19341  00733A  6E03               	movwf	i2I2C_Write@d+1,c
 19342  00733C  0ED0               	movlw	208
 19343  00733E  6E02               	movwf	i2I2C_Write@d,c
 19344  007340  EC42  F038         	call	i2_I2C_Write	;wreg free
 19345                           
 19346                           ;ds1307.h: 102: I2C_Write(0x07);
 19347  007344  0E00               	movlw	0
 19348  007346  6E03               	movwf	i2I2C_Write@d+1,c
 19349  007348  0E07               	movlw	7
 19350  00734A  6E02               	movwf	i2I2C_Write@d,c
 19351  00734C  EC42  F038         	call	i2_I2C_Write	;wreg free
 19352                           
 19353                           ;ds1307.h: 103: I2C_Write(0x00);
 19354  007350  0E00               	movlw	0
 19355  007352  6E03               	movwf	i2I2C_Write@d+1,c
 19356  007354  0E00               	movlw	0
 19357  007356  6E02               	movwf	i2I2C_Write@d,c
 19358  007358  EC42  F038         	call	i2_I2C_Write	;wreg free
 19359                           
 19360                           ;ds1307.h: 104: I2C_Stop();
 19361  00735C  EC24  F038         	call	i2_I2C_Stop	;wreg free
 19362  007360  0012               	return		;funcret
 19363  007362  FFFF               	dw	65535	; errata NOP
 19364  007364                     __end_ofi2_RTC_Init:
 19365                           	opt stack 0
 19366                           tosu	equ	0xFFF
 19367                           tosh	equ	0xFFE
 19368                           tosl	equ	0xFFD
 19369                           pclatu	equ	0xFFB
 19370                           pclath	equ	0xFFA
 19371                           tblptru	equ	0xFF8
 19372                           tblptrh	equ	0xFF7
 19373                           tblptrl	equ	0xFF6
 19374                           tablat	equ	0xFF5
 19375                           prodh	equ	0xFF4
 19376                           prodl	equ	0xFF3
 19377                           intcon	equ	0xFF2
 19378                           indf0	equ	0xFEF
 19379                           postinc0	equ	0xFEE
 19380                           fsr0h	equ	0xFEA
 19381                           fsr0l	equ	0xFE9
 19382                           wreg	equ	0xFE8
 19383                           postdec1	equ	0xFE5
 19384                           fsr1h	equ	0xFE2
 19385                           fsr1l	equ	0xFE1
 19386                           indf2	equ	0xFDF
 19387                           postinc2	equ	0xFDE
 19388                           postdec2	equ	0xFDD
 19389                           fsr2h	equ	0xFDA
 19390                           fsr2l	equ	0xFD9
 19391                           status	equ	0xFD8
 19392                           
 19393 ;; *************** function _writeEEPROM16_ext *****************
 19394 ;; Defined at:
 19395 ;;		line 40 in file "eeprom.h"
 19396 ;; Parameters:    Size  Location     Type
 19397 ;;  adress          1    wreg     unsigned char 
 19398 ;;  data            2    5[COMRAM] unsigned int 
 19399 ;; Auto vars:     Size  Location     Type
 19400 ;;  adress          1    7[COMRAM] unsigned char 
 19401 ;; Return value:  Size  Location     Type
 19402 ;;                  1    wreg      void 
 19403 ;; Registers used:
 19404 ;;		wreg, status,2, status,0, cstack
 19405 ;; Tracked objects:
 19406 ;;		On entry : 0/0
 19407 ;;		On exit  : 0/0
 19408 ;;		Unchanged: 0/0
 19409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19410 ;;      Params:         2       0       0       0       0       0       0
 19411 ;;      Locals:         1       0       0       0       0       0       0
 19412 ;;      Temps:          0       0       0       0       0       0       0
 19413 ;;      Totals:         3       0       0       0       0       0       0
 19414 ;;Total ram usage:        3 bytes
 19415 ;; Hardware stack levels used:    1
 19416 ;; Hardware stack levels required when called:    3
 19417 ;; This function calls:
 19418 ;;		i2_writeEEPROM_ext
 19419 ;; This function is called by:
 19420 ;;		_timer
 19421 ;; This function uses a non-reentrant model
 19422 ;;
 19423                           
 19424                           	psect	text82
 19425  007142                     __ptext82:
 19426                           	opt stack 0
 19427  007142                     _writeEEPROM16_ext:
 19428                           	opt stack 0
 19429  007142  FFFF               	dw	65535	; assembler added errata NOP
 19430                           
 19431                           ;incstack = 0
 19432                           ;writeEEPROM16_ext@adress stored from wreg
 19433  007144  6E08               	movwf	writeEEPROM16_ext@adress,c
 19434                           
 19435                           ;eeprom.h: 41: writeEEPROM_ext(adress, data);
 19436  007146  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 19437  00714A  5008               	movf	writeEEPROM16_ext@adress,w,c
 19438  00714C  EC92  F03A         	call	i2_writeEEPROM_ext
 19439                           
 19440                           ;eeprom.h: 42: data>> = 8;
 19441  007150  5007               	movf	writeEEPROM16_ext@data+1,w,c
 19442  007152  6E06               	movwf	writeEEPROM16_ext@data,c
 19443  007154  6A07               	clrf	writeEEPROM16_ext@data+1,c
 19444                           
 19445                           ;eeprom.h: 43: writeEEPROM_ext(adress + 1, data);
 19446  007156  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 19447  00715A  2808               	incf	writeEEPROM16_ext@adress,w,c
 19448  00715C  EC92  F03A         	call	i2_writeEEPROM_ext
 19449  007160  0012               	return		;funcret
 19450  007162  FFFF               	dw	65535	; errata NOP
 19451  007164                     __end_of_writeEEPROM16_ext:
 19452                           	opt stack 0
 19453                           tosu	equ	0xFFF
 19454                           tosh	equ	0xFFE
 19455                           tosl	equ	0xFFD
 19456                           pclatu	equ	0xFFB
 19457                           pclath	equ	0xFFA
 19458                           tblptru	equ	0xFF8
 19459                           tblptrh	equ	0xFF7
 19460                           tblptrl	equ	0xFF6
 19461                           tablat	equ	0xFF5
 19462                           prodh	equ	0xFF4
 19463                           prodl	equ	0xFF3
 19464                           intcon	equ	0xFF2
 19465                           indf0	equ	0xFEF
 19466                           postinc0	equ	0xFEE
 19467                           fsr0h	equ	0xFEA
 19468                           fsr0l	equ	0xFE9
 19469                           wreg	equ	0xFE8
 19470                           postdec1	equ	0xFE5
 19471                           fsr1h	equ	0xFE2
 19472                           fsr1l	equ	0xFE1
 19473                           indf2	equ	0xFDF
 19474                           postinc2	equ	0xFDE
 19475                           postdec2	equ	0xFDD
 19476                           fsr2h	equ	0xFDA
 19477                           fsr2l	equ	0xFD9
 19478                           status	equ	0xFD8
 19479                           
 19480 ;; *************** function i2_writeEEPROM_ext *****************
 19481 ;; Defined at:
 19482 ;;		line 13 in file "eeprom.h"
 19483 ;; Parameters:    Size  Location     Type
 19484 ;;  adress          1    wreg     unsigned char 
 19485 ;;  data            1    3[COMRAM] unsigned char 
 19486 ;; Auto vars:     Size  Location     Type
 19487 ;;  adress          1    4[COMRAM] unsigned char 
 19488 ;; Return value:  Size  Location     Type
 19489 ;;                  1    wreg      void 
 19490 ;; Registers used:
 19491 ;;		wreg, status,2, status,0, cstack
 19492 ;; Tracked objects:
 19493 ;;		On entry : 0/0
 19494 ;;		On exit  : 0/0
 19495 ;;		Unchanged: 0/0
 19496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19497 ;;      Params:         1       0       0       0       0       0       0
 19498 ;;      Locals:         1       0       0       0       0       0       0
 19499 ;;      Temps:          0       0       0       0       0       0       0
 19500 ;;      Totals:         2       0       0       0       0       0       0
 19501 ;;Total ram usage:        2 bytes
 19502 ;; Hardware stack levels used:    1
 19503 ;; Hardware stack levels required when called:    2
 19504 ;; This function calls:
 19505 ;;		i2_I2C_Start
 19506 ;;		i2_I2C_Stop
 19507 ;;		i2_I2C_Write
 19508 ;;		i2_delay
 19509 ;; This function is called by:
 19510 ;;		_writeEEPROM16_ext
 19511 ;;		_timer
 19512 ;; This function uses a non-reentrant model
 19513 ;;
 19514                           
 19515                           	psect	text83
 19516  007524                     __ptext83:
 19517                           	opt stack 0
 19518  007524                     i2_writeEEPROM_ext:
 19519                           	opt stack 0
 19520  007524  FFFF               	dw	65535	; assembler added errata NOP
 19521                           
 19522                           ;incstack = 0
 19523                           ;i2writeEEPROM_ext@adress stored from wreg
 19524  007526  6E05               	movwf	i2writeEEPROM_ext@adress,c
 19525                           
 19526                           ;eeprom.h: 15: I2C_Start();
 19527  007528  EC1E  F038         	call	i2_I2C_Start	;wreg free
 19528                           
 19529                           ;eeprom.h: 16: I2C_Write(0xA0);
 19530  00752C  0E00               	movlw	0
 19531  00752E  6E03               	movwf	i2I2C_Write@d+1,c
 19532  007530  0EA0               	movlw	160
 19533  007532  6E02               	movwf	i2I2C_Write@d,c
 19534  007534  EC42  F038         	call	i2_I2C_Write	;wreg free
 19535                           
 19536                           ;eeprom.h: 18: I2C_Write(adress);
 19537  007538  C005  F002         	movff	i2writeEEPROM_ext@adress,i2I2C_Write@d
 19538  00753C  6A03               	clrf	i2I2C_Write@d+1,c
 19539  00753E  EC42  F038         	call	i2_I2C_Write	;wreg free
 19540                           
 19541                           ;eeprom.h: 19: I2C_Write(data);
 19542  007542  C004  F002         	movff	i2writeEEPROM_ext@data,i2I2C_Write@d
 19543  007546  6A03               	clrf	i2I2C_Write@d+1,c
 19544  007548  EC42  F038         	call	i2_I2C_Write	;wreg free
 19545                           
 19546                           ;eeprom.h: 20: I2C_Stop();
 19547  00754C  EC24  F038         	call	i2_I2C_Stop	;wreg free
 19548                           
 19549                           ;eeprom.h: 21: delay(15);
 19550  007550  0E00               	movlw	0
 19551  007552  6E02               	movwf	i2delay@x+1,c
 19552  007554  0E0F               	movlw	15
 19553  007556  6E01               	movwf	i2delay@x,c
 19554  007558  EC80  F039         	call	i2_delay	;wreg free
 19555  00755C  0012               	return		;funcret
 19556  00755E  FFFF               	dw	65535	; errata NOP
 19557  007560                     __end_ofi2_writeEEPROM_ext:
 19558                           	opt stack 0
 19559                           tosu	equ	0xFFF
 19560                           tosh	equ	0xFFE
 19561                           tosl	equ	0xFFD
 19562                           pclatu	equ	0xFFB
 19563                           pclath	equ	0xFFA
 19564                           tblptru	equ	0xFF8
 19565                           tblptrh	equ	0xFF7
 19566                           tblptrl	equ	0xFF6
 19567                           tablat	equ	0xFF5
 19568                           prodh	equ	0xFF4
 19569                           prodl	equ	0xFF3
 19570                           intcon	equ	0xFF2
 19571                           indf0	equ	0xFEF
 19572                           postinc0	equ	0xFEE
 19573                           fsr0h	equ	0xFEA
 19574                           fsr0l	equ	0xFE9
 19575                           wreg	equ	0xFE8
 19576                           postdec1	equ	0xFE5
 19577                           fsr1h	equ	0xFE2
 19578                           fsr1l	equ	0xFE1
 19579                           indf2	equ	0xFDF
 19580                           postinc2	equ	0xFDE
 19581                           postdec2	equ	0xFDD
 19582                           fsr2h	equ	0xFDA
 19583                           fsr2l	equ	0xFD9
 19584                           status	equ	0xFD8
 19585                           
 19586 ;; *************** function i2_delay *****************
 19587 ;; Defined at:
 19588 ;;		line 16 in file "function.c"
 19589 ;; Parameters:    Size  Location     Type
 19590 ;;  x               2    0[COMRAM] int 
 19591 ;; Auto vars:     Size  Location     Type
 19592 ;;		None
 19593 ;; Return value:  Size  Location     Type
 19594 ;;                  1    wreg      void 
 19595 ;; Registers used:
 19596 ;;		wreg, status,2, status,0
 19597 ;; Tracked objects:
 19598 ;;		On entry : 0/0
 19599 ;;		On exit  : 0/0
 19600 ;;		Unchanged: 0/0
 19601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19602 ;;      Params:         2       0       0       0       0       0       0
 19603 ;;      Locals:         0       0       0       0       0       0       0
 19604 ;;      Temps:          1       0       0       0       0       0       0
 19605 ;;      Totals:         3       0       0       0       0       0       0
 19606 ;;Total ram usage:        3 bytes
 19607 ;; Hardware stack levels used:    1
 19608 ;; This function calls:
 19609 ;;		Nothing
 19610 ;; This function is called by:
 19611 ;;		i2_writeEEPROM_ext
 19612 ;; This function uses a non-reentrant model
 19613 ;;
 19614                           
 19615                           	psect	text84
 19616  007300                     __ptext84:
 19617                           	opt stack 0
 19618  007300                     i2_delay:
 19619                           	opt stack 0
 19620  007300  FFFF               	dw	65535	; assembler added errata NOP
 19621                           
 19622                           ;function.c: 17: while (x--) {
 19623                           
 19624                           ;incstack = 0
 19625  007302  D00B               	goto	i2l923
 19626  007304  FFFF               	dw	65535	; assembler added errata NOP
 19627  007306                     i2l5101:
 19628                           
 19629                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 19630  007306  0E02               	movlw	2
 19631  007308  6E03               	movwf	??i2_delay& (0+255),c
 19632  00730A  0EF2               	movlw	242
 19633  00730C                     i2u1927_47:
 19634  00730C  FFFF               	dw	65535	; errata NOP
 19635  00730E  2EE8               	decfsz	wreg,f,c
 19636  007310  D7FD               	bra	i2u1927_47
 19637  007312  2E03               	decfsz	??i2_delay& (0+255),f,c
 19638  007314  D7FB               	bra	i2u1927_47
 19639  007316  D000               	nop2	
 19640  007318  0004               	clrwdt		;# 
 19641  00731A                     i2l923:
 19642  00731A  FFFF               	dw	65535	; assembler added errata NOP
 19643  00731C  0601               	decf	i2delay@x,f,c
 19644  00731E  A0D8               	btfss	status,0,c
 19645  007320  0602               	decf	i2delay@x+1,f,c
 19646  007322  2801               	incf	i2delay@x,w,c
 19647  007324  E1F0               	bnz	i2l5101
 19648  007326  2802               	incf	i2delay@x+1,w,c
 19649  007328  B4D8               	btfsc	status,2,c
 19650  00732A  0012               	return		;funcret
 19651  00732C  FFFF               	dw	65535	; assembler added errata NOP
 19652  00732E  D7EA               	goto	i2l924
 19653  007330  FFFF               	dw	65535	; errata NOP
 19654  007332                     __end_ofi2_delay:
 19655                           	opt stack 0
 19656                           tosu	equ	0xFFF
 19657                           tosh	equ	0xFFE
 19658                           tosl	equ	0xFFD
 19659                           pclatu	equ	0xFFB
 19660                           pclath	equ	0xFFA
 19661                           tblptru	equ	0xFF8
 19662                           tblptrh	equ	0xFF7
 19663                           tblptrl	equ	0xFF6
 19664                           tablat	equ	0xFF5
 19665                           prodh	equ	0xFF4
 19666                           prodl	equ	0xFF3
 19667                           intcon	equ	0xFF2
 19668                           indf0	equ	0xFEF
 19669                           postinc0	equ	0xFEE
 19670                           fsr0h	equ	0xFEA
 19671                           fsr0l	equ	0xFE9
 19672                           wreg	equ	0xFE8
 19673                           postdec1	equ	0xFE5
 19674                           fsr1h	equ	0xFE2
 19675                           fsr1l	equ	0xFE1
 19676                           indf2	equ	0xFDF
 19677                           postinc2	equ	0xFDE
 19678                           postdec2	equ	0xFDD
 19679                           fsr2h	equ	0xFDA
 19680                           fsr2l	equ	0xFD9
 19681                           status	equ	0xFD8
 19682                           
 19683 ;; *************** function i2_I2C_Write *****************
 19684 ;; Defined at:
 19685 ;;		line 42 in file "I2C.c"
 19686 ;; Parameters:    Size  Location     Type
 19687 ;;  d               2    1[COMRAM] unsigned int 
 19688 ;; Auto vars:     Size  Location     Type
 19689 ;;		None
 19690 ;; Return value:  Size  Location     Type
 19691 ;;                  1    wreg      void 
 19692 ;; Registers used:
 19693 ;;		wreg, status,2, status,0, cstack
 19694 ;; Tracked objects:
 19695 ;;		On entry : 0/0
 19696 ;;		On exit  : 0/0
 19697 ;;		Unchanged: 0/0
 19698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19699 ;;      Params:         2       0       0       0       0       0       0
 19700 ;;      Locals:         0       0       0       0       0       0       0
 19701 ;;      Temps:          0       0       0       0       0       0       0
 19702 ;;      Totals:         2       0       0       0       0       0       0
 19703 ;;Total ram usage:        2 bytes
 19704 ;; Hardware stack levels used:    1
 19705 ;; Hardware stack levels required when called:    1
 19706 ;; This function calls:
 19707 ;;		i2_I2C_Wait
 19708 ;; This function is called by:
 19709 ;;		i2_writeEEPROM_ext
 19710 ;;		i2_getDS1307TimeDate
 19711 ;;		i2_RTC_Init
 19712 ;; This function uses a non-reentrant model
 19713 ;;
 19714                           
 19715                           	psect	text85
 19716  007084                     __ptext85:
 19717                           	opt stack 0
 19718  007084                     i2_I2C_Write:
 19719                           	opt stack 0
 19720  007084  FFFF               	dw	65535	; assembler added errata NOP
 19721                           
 19722                           ;I2C.c: 43: I2C_Wait();
 19723                           
 19724                           ;incstack = 0
 19725  007086  EC6D  F038         	call	i2_I2C_Wait	;wreg free
 19726                           
 19727                           ;I2C.c: 44: SSPBUF = d;
 19728  00708A  C002  FFC9         	movff	i2I2C_Write@d,4041	;volatile
 19729  00708E  0012               	return		;funcret
 19730  007090  FFFF               	dw	65535	; errata NOP
 19731  007092                     __end_ofi2_I2C_Write:
 19732                           	opt stack 0
 19733                           tosu	equ	0xFFF
 19734                           tosh	equ	0xFFE
 19735                           tosl	equ	0xFFD
 19736                           pclatu	equ	0xFFB
 19737                           pclath	equ	0xFFA
 19738                           tblptru	equ	0xFF8
 19739                           tblptrh	equ	0xFF7
 19740                           tblptrl	equ	0xFF6
 19741                           tablat	equ	0xFF5
 19742                           prodh	equ	0xFF4
 19743                           prodl	equ	0xFF3
 19744                           intcon	equ	0xFF2
 19745                           indf0	equ	0xFEF
 19746                           postinc0	equ	0xFEE
 19747                           fsr0h	equ	0xFEA
 19748                           fsr0l	equ	0xFE9
 19749                           wreg	equ	0xFE8
 19750                           postdec1	equ	0xFE5
 19751                           fsr1h	equ	0xFE2
 19752                           fsr1l	equ	0xFE1
 19753                           indf2	equ	0xFDF
 19754                           postinc2	equ	0xFDE
 19755                           postdec2	equ	0xFDD
 19756                           fsr2h	equ	0xFDA
 19757                           fsr2l	equ	0xFD9
 19758                           status	equ	0xFD8
 19759                           
 19760 ;; *************** function i2_I2C_Stop *****************
 19761 ;; Defined at:
 19762 ;;		line 36 in file "I2C.c"
 19763 ;; Parameters:    Size  Location     Type
 19764 ;;		None
 19765 ;; Auto vars:     Size  Location     Type
 19766 ;;		None
 19767 ;; Return value:  Size  Location     Type
 19768 ;;                  1    wreg      void 
 19769 ;; Registers used:
 19770 ;;		wreg, status,2, status,0, cstack
 19771 ;; Tracked objects:
 19772 ;;		On entry : 0/0
 19773 ;;		On exit  : 0/0
 19774 ;;		Unchanged: 0/0
 19775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19776 ;;      Params:         0       0       0       0       0       0       0
 19777 ;;      Locals:         0       0       0       0       0       0       0
 19778 ;;      Temps:          0       0       0       0       0       0       0
 19779 ;;      Totals:         0       0       0       0       0       0       0
 19780 ;;Total ram usage:        0 bytes
 19781 ;; Hardware stack levels used:    1
 19782 ;; Hardware stack levels required when called:    1
 19783 ;; This function calls:
 19784 ;;		i2_I2C_Wait
 19785 ;; This function is called by:
 19786 ;;		i2_writeEEPROM_ext
 19787 ;;		i2_getDS1307TimeDate
 19788 ;;		i2_RTC_Init
 19789 ;; This function uses a non-reentrant model
 19790 ;;
 19791                           
 19792                           	psect	text86
 19793  007048                     __ptext86:
 19794                           	opt stack 0
 19795  007048                     i2_I2C_Stop:
 19796                           	opt stack 0
 19797  007048  FFFF               	dw	65535	; assembler added errata NOP
 19798                           
 19799                           ;I2C.c: 37: I2C_Wait();
 19800                           
 19801                           ;incstack = 0
 19802  00704A  EC6D  F038         	call	i2_I2C_Wait	;wreg free
 19803                           
 19804                           ;I2C.c: 38: PEN = 1;
 19805  00704E  84C5               	bsf	4037,2,c	;volatile
 19806  007050  0012               	return		;funcret
 19807  007052  FFFF               	dw	65535	; errata NOP
 19808  007054                     __end_ofi2_I2C_Stop:
 19809                           	opt stack 0
 19810                           tosu	equ	0xFFF
 19811                           tosh	equ	0xFFE
 19812                           tosl	equ	0xFFD
 19813                           pclatu	equ	0xFFB
 19814                           pclath	equ	0xFFA
 19815                           tblptru	equ	0xFF8
 19816                           tblptrh	equ	0xFF7
 19817                           tblptrl	equ	0xFF6
 19818                           tablat	equ	0xFF5
 19819                           prodh	equ	0xFF4
 19820                           prodl	equ	0xFF3
 19821                           intcon	equ	0xFF2
 19822                           indf0	equ	0xFEF
 19823                           postinc0	equ	0xFEE
 19824                           fsr0h	equ	0xFEA
 19825                           fsr0l	equ	0xFE9
 19826                           wreg	equ	0xFE8
 19827                           postdec1	equ	0xFE5
 19828                           fsr1h	equ	0xFE2
 19829                           fsr1l	equ	0xFE1
 19830                           indf2	equ	0xFDF
 19831                           postinc2	equ	0xFDE
 19832                           postdec2	equ	0xFDD
 19833                           fsr2h	equ	0xFDA
 19834                           fsr2l	equ	0xFD9
 19835                           status	equ	0xFD8
 19836                           
 19837 ;; *************** function i2_I2C_Start *****************
 19838 ;; Defined at:
 19839 ;;		line 26 in file "I2C.c"
 19840 ;; Parameters:    Size  Location     Type
 19841 ;;		None
 19842 ;; Auto vars:     Size  Location     Type
 19843 ;;		None
 19844 ;; Return value:  Size  Location     Type
 19845 ;;                  1    wreg      void 
 19846 ;; Registers used:
 19847 ;;		wreg, status,2, status,0, cstack
 19848 ;; Tracked objects:
 19849 ;;		On entry : 0/0
 19850 ;;		On exit  : 0/0
 19851 ;;		Unchanged: 0/0
 19852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19853 ;;      Params:         0       0       0       0       0       0       0
 19854 ;;      Locals:         0       0       0       0       0       0       0
 19855 ;;      Temps:          0       0       0       0       0       0       0
 19856 ;;      Totals:         0       0       0       0       0       0       0
 19857 ;;Total ram usage:        0 bytes
 19858 ;; Hardware stack levels used:    1
 19859 ;; Hardware stack levels required when called:    1
 19860 ;; This function calls:
 19861 ;;		i2_I2C_Wait
 19862 ;; This function is called by:
 19863 ;;		i2_writeEEPROM_ext
 19864 ;;		i2_getDS1307TimeDate
 19865 ;;		i2_RTC_Init
 19866 ;; This function uses a non-reentrant model
 19867 ;;
 19868                           
 19869                           	psect	text87
 19870  00703C                     __ptext87:
 19871                           	opt stack 0
 19872  00703C                     i2_I2C_Start:
 19873                           	opt stack 0
 19874  00703C  FFFF               	dw	65535	; assembler added errata NOP
 19875                           
 19876                           ;I2C.c: 27: I2C_Wait();
 19877                           
 19878                           ;incstack = 0
 19879  00703E  EC6D  F038         	call	i2_I2C_Wait	;wreg free
 19880                           
 19881                           ;I2C.c: 28: SEN = 1;
 19882  007042  80C5               	bsf	4037,0,c	;volatile
 19883  007044  0012               	return		;funcret
 19884  007046  FFFF               	dw	65535	; errata NOP
 19885  007048                     __end_ofi2_I2C_Start:
 19886                           	opt stack 0
 19887                           tosu	equ	0xFFF
 19888                           tosh	equ	0xFFE
 19889                           tosl	equ	0xFFD
 19890                           pclatu	equ	0xFFB
 19891                           pclath	equ	0xFFA
 19892                           tblptru	equ	0xFF8
 19893                           tblptrh	equ	0xFF7
 19894                           tblptrl	equ	0xFF6
 19895                           tablat	equ	0xFF5
 19896                           prodh	equ	0xFF4
 19897                           prodl	equ	0xFF3
 19898                           intcon	equ	0xFF2
 19899                           indf0	equ	0xFEF
 19900                           postinc0	equ	0xFEE
 19901                           fsr0h	equ	0xFEA
 19902                           fsr0l	equ	0xFE9
 19903                           wreg	equ	0xFE8
 19904                           postdec1	equ	0xFE5
 19905                           fsr1h	equ	0xFE2
 19906                           fsr1l	equ	0xFE1
 19907                           indf2	equ	0xFDF
 19908                           postinc2	equ	0xFDE
 19909                           postdec2	equ	0xFDD
 19910                           fsr2h	equ	0xFDA
 19911                           fsr2l	equ	0xFD9
 19912                           status	equ	0xFD8
 19913                           
 19914 ;; *************** function i2_I2C_Wait *****************
 19915 ;; Defined at:
 19916 ;;		line 22 in file "I2C.c"
 19917 ;; Parameters:    Size  Location     Type
 19918 ;;		None
 19919 ;; Auto vars:     Size  Location     Type
 19920 ;;		None
 19921 ;; Return value:  Size  Location     Type
 19922 ;;                  1    wreg      void 
 19923 ;; Registers used:
 19924 ;;		wreg, status,2, status,0
 19925 ;; Tracked objects:
 19926 ;;		On entry : 0/0
 19927 ;;		On exit  : 0/0
 19928 ;;		Unchanged: 0/0
 19929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19930 ;;      Params:         0       0       0       0       0       0       0
 19931 ;;      Locals:         0       0       0       0       0       0       0
 19932 ;;      Temps:          1       0       0       0       0       0       0
 19933 ;;      Totals:         1       0       0       0       0       0       0
 19934 ;;Total ram usage:        1 bytes
 19935 ;; Hardware stack levels used:    1
 19936 ;; This function calls:
 19937 ;;		Nothing
 19938 ;; This function is called by:
 19939 ;;		i2_I2C_Start
 19940 ;;		i2_I2C_Restart
 19941 ;;		i2_I2C_Stop
 19942 ;;		i2_I2C_Write
 19943 ;;		i2_I2C_Read
 19944 ;; This function uses a non-reentrant model
 19945 ;;
 19946                           
 19947                           	psect	text88
 19948  0070DA                     __ptext88:
 19949                           	opt stack 0
 19950  0070DA                     i2_I2C_Wait:
 19951                           	opt stack 0
 19952  0070DA  FFFF               	dw	65535	; assembler added errata NOP
 19953                           
 19954                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 19955                           
 19956                           ;incstack = 0
 19957  0070DC  B4C7               	btfsc	4039,2,c	;volatile
 19958  0070DE  D7FD               	goto	i2_I2C_Wait
 19959  0070E0  CFC5 F001          	movff	4037,??i2_I2C_Wait	;volatile
 19960  0070E4  0E1F               	movlw	31
 19961  0070E6  1601               	andwf	??i2_I2C_Wait,f,c
 19962  0070E8  B4D8               	btfsc	status,2,c
 19963  0070EA  0012               	return		;funcret
 19964  0070EC  FFFF               	dw	65535	; assembler added errata NOP
 19965  0070EE  D7F5               	goto	i2_I2C_Wait
 19966  0070F0  FFFF               	dw	65535	; errata NOP
 19967  0070F2                     __end_ofi2_I2C_Wait:
 19968                           	opt stack 0
 19969                           tosu	equ	0xFFF
 19970                           tosh	equ	0xFFE
 19971                           tosl	equ	0xFFD
 19972                           pclatu	equ	0xFFB
 19973                           pclath	equ	0xFFA
 19974                           tblptru	equ	0xFF8
 19975                           tblptrh	equ	0xFF7
 19976                           tblptrl	equ	0xFF6
 19977                           tablat	equ	0xFF5
 19978                           prodh	equ	0xFF4
 19979                           prodl	equ	0xFF3
 19980                           intcon	equ	0xFF2
 19981                           indf0	equ	0xFEF
 19982                           postinc0	equ	0xFEE
 19983                           fsr0h	equ	0xFEA
 19984                           fsr0l	equ	0xFE9
 19985                           wreg	equ	0xFE8
 19986                           postdec1	equ	0xFE5
 19987                           fsr1h	equ	0xFE2
 19988                           fsr1l	equ	0xFE1
 19989                           indf2	equ	0xFDF
 19990                           postinc2	equ	0xFDE
 19991                           postdec2	equ	0xFDD
 19992                           fsr2h	equ	0xFDA
 19993                           fsr2l	equ	0xFD9
 19994                           status	equ	0xFD8
 19995                           
 19996 ;; *************** function _readButtons *****************
 19997 ;; Defined at:
 19998 ;;		line 25 in file "teclado.h"
 19999 ;; Parameters:    Size  Location     Type
 20000 ;;		None
 20001 ;; Auto vars:     Size  Location     Type
 20002 ;;		None
 20003 ;; Return value:  Size  Location     Type
 20004 ;;                  1    wreg      void 
 20005 ;; Registers used:
 20006 ;;		wreg, status,2
 20007 ;; Tracked objects:
 20008 ;;		On entry : 0/0
 20009 ;;		On exit  : 0/0
 20010 ;;		Unchanged: 0/0
 20011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20012 ;;      Params:         0       0       0       0       0       0       0
 20013 ;;      Locals:         0       0       0       0       0       0       0
 20014 ;;      Temps:          0       0       0       0       0       0       0
 20015 ;;      Totals:         0       0       0       0       0       0       0
 20016 ;;Total ram usage:        0 bytes
 20017 ;; Hardware stack levels used:    1
 20018 ;; This function calls:
 20019 ;;		Nothing
 20020 ;; This function is called by:
 20021 ;;		_TIMER0
 20022 ;; This function uses a non-reentrant model
 20023 ;;
 20024                           
 20025                           	psect	text89
 20026  003E9A                     __ptext89:
 20027                           	opt stack 0
 20028  003E9A                     _readButtons:
 20029                           	opt stack 0
 20030  003E9A  FFFF               	dw	65535	; assembler added errata NOP
 20031                           
 20032                           ;teclado.h: 26: if (!PORTBbits.RB2) {
 20033                           
 20034                           ;incstack = 0
 20035  003E9C  B481               	btfsc	3969,2,c	;volatile
 20036  003E9E  D002               	goto	i2l399
 20037                           
 20038                           ;teclado.h: 27: flag_b_esc = 1;
 20039  003EA0  0E01               	movlw	1
 20040  003EA2  6E58               	movwf	_flag_b_esc,c
 20041  003EA4                     i2l399:
 20042  003EA4  FFFF               	dw	65535	; assembler added errata NOP
 20043                           
 20044                           ;teclado.h: 28: }
 20045                           ;teclado.h: 29: if (PORTBbits.RB2 && flag_b_esc) {
 20046  003EA6  A481               	btfss	3969,2,c	;volatile
 20047  003EA8  D007               	goto	i2l400
 20048  003EAA  5058               	movf	_flag_b_esc,w,c
 20049  003EAC  B4D8               	btfsc	status,2,c
 20050  003EAE  D004               	goto	i2l400
 20051                           
 20052                           ;teclado.h: 30: _b_esc = 1;
 20053  003EB0  0E01               	movlw	1
 20054  003EB2  6E57               	movwf	__b_esc,c
 20055                           
 20056                           ;teclado.h: 31: flag_b_esc = 0;
 20057  003EB4  0E00               	movlw	0
 20058  003EB6  6E58               	movwf	_flag_b_esc,c
 20059  003EB8                     i2l400:
 20060  003EB8  FFFF               	dw	65535	; assembler added errata NOP
 20061                           
 20062                           ;teclado.h: 32: }
 20063                           ;teclado.h: 34: if (!PORTBbits.RB4) {
 20064  003EBA  B881               	btfsc	3969,4,c	;volatile
 20065  003EBC  D002               	goto	i2l401
 20066                           
 20067                           ;teclado.h: 35: flag_b_menos = 1;
 20068  003EBE  0E01               	movlw	1
 20069  003EC0  6E56               	movwf	_flag_b_menos,c
 20070  003EC2                     i2l401:
 20071  003EC2  FFFF               	dw	65535	; assembler added errata NOP
 20072                           
 20073                           ;teclado.h: 36: }
 20074                           ;teclado.h: 37: if (PORTBbits.RB4 && flag_b_menos) {
 20075  003EC4  A881               	btfss	3969,4,c	;volatile
 20076  003EC6  D007               	goto	i2l402
 20077  003EC8  5056               	movf	_flag_b_menos,w,c
 20078  003ECA  B4D8               	btfsc	status,2,c
 20079  003ECC  D004               	goto	i2l402
 20080                           
 20081                           ;teclado.h: 38: _b_menos = 1;
 20082  003ECE  0E01               	movlw	1
 20083  003ED0  6E55               	movwf	__b_menos,c
 20084                           
 20085                           ;teclado.h: 39: flag_b_menos = 0;
 20086  003ED2  0E00               	movlw	0
 20087  003ED4  6E56               	movwf	_flag_b_menos,c
 20088  003ED6                     i2l402:
 20089  003ED6  FFFF               	dw	65535	; assembler added errata NOP
 20090                           
 20091                           ;teclado.h: 40: }
 20092                           ;teclado.h: 42: if (!PORTBbits.RB5) {
 20093  003ED8  BA81               	btfsc	3969,5,c	;volatile
 20094  003EDA  D002               	goto	i2l403
 20095                           
 20096                           ;teclado.h: 43: flag_b_mais = 1;
 20097  003EDC  0E01               	movlw	1
 20098  003EDE  6E54               	movwf	_flag_b_mais,c
 20099  003EE0                     i2l403:
 20100  003EE0  FFFF               	dw	65535	; assembler added errata NOP
 20101                           
 20102                           ;teclado.h: 44: }
 20103                           ;teclado.h: 45: if (PORTBbits.RB5 && flag_b_mais) {
 20104  003EE2  AA81               	btfss	3969,5,c	;volatile
 20105  003EE4  D007               	goto	i2l404
 20106  003EE6  5054               	movf	_flag_b_mais,w,c
 20107  003EE8  B4D8               	btfsc	status,2,c
 20108  003EEA  D004               	goto	i2l404
 20109                           
 20110                           ;teclado.h: 46: _b_mais = 1;
 20111  003EEC  0E01               	movlw	1
 20112  003EEE  6E53               	movwf	__b_mais,c
 20113                           
 20114                           ;teclado.h: 47: flag_b_mais = 0;
 20115  003EF0  0E00               	movlw	0
 20116  003EF2  6E54               	movwf	_flag_b_mais,c
 20117  003EF4                     i2l404:
 20118  003EF4  FFFF               	dw	65535	; assembler added errata NOP
 20119                           
 20120                           ;teclado.h: 48: }
 20121                           ;teclado.h: 50: if (!PORTBbits.RB3) {
 20122  003EF6  B681               	btfsc	3969,3,c	;volatile
 20123  003EF8  D002               	goto	i2l405
 20124                           
 20125                           ;teclado.h: 51: flag_b_ok = 1;
 20126  003EFA  0E01               	movlw	1
 20127  003EFC  6E52               	movwf	_flag_b_ok,c
 20128  003EFE                     i2l405:
 20129  003EFE  FFFF               	dw	65535	; assembler added errata NOP
 20130                           
 20131                           ;teclado.h: 52: }
 20132                           ;teclado.h: 53: if (PORTBbits.RB3 && flag_b_ok) {
 20133  003F00  A681               	btfss	3969,3,c	;volatile
 20134  003F02  D007               	goto	i2l406
 20135  003F04  5052               	movf	_flag_b_ok,w,c
 20136  003F06  B4D8               	btfsc	status,2,c
 20137  003F08  D004               	goto	i2l406
 20138                           
 20139                           ;teclado.h: 54: _b_ok = 1;
 20140  003F0A  0E01               	movlw	1
 20141  003F0C  6E51               	movwf	__b_ok,c
 20142                           
 20143                           ;teclado.h: 55: flag_b_ok = 0;
 20144  003F0E  0E00               	movlw	0
 20145  003F10  6E52               	movwf	_flag_b_ok,c
 20146  003F12                     i2l406:
 20147  003F12  FFFF               	dw	65535	; assembler added errata NOP
 20148  003F14  0012               	return		;funcret
 20149  003F16  FFFF               	dw	65535	; errata NOP
 20150  003F18                     __end_of_readButtons:
 20151                           	opt stack 0
 20152                           tosu	equ	0xFFF
 20153                           tosh	equ	0xFFE
 20154                           tosl	equ	0xFFD
 20155                           pclatu	equ	0xFFB
 20156                           pclath	equ	0xFFA
 20157                           tblptru	equ	0xFF8
 20158                           tblptrh	equ	0xFF7
 20159                           tblptrl	equ	0xFF6
 20160                           tablat	equ	0xFF5
 20161                           prodh	equ	0xFF4
 20162                           prodl	equ	0xFF3
 20163                           intcon	equ	0xFF2
 20164                           indf0	equ	0xFEF
 20165                           postinc0	equ	0xFEE
 20166                           fsr0h	equ	0xFEA
 20167                           fsr0l	equ	0xFE9
 20168                           wreg	equ	0xFE8
 20169                           postdec1	equ	0xFE5
 20170                           fsr1h	equ	0xFE2
 20171                           fsr1l	equ	0xFE1
 20172                           indf2	equ	0xFDF
 20173                           postinc2	equ	0xFDE
 20174                           postdec2	equ	0xFDD
 20175                           fsr2h	equ	0xFDA
 20176                           fsr2l	equ	0xFD9
 20177                           status	equ	0xFD8
 20178                           
 20179 ;; *************** function _lerTransdutor *****************
 20180 ;; Defined at:
 20181 ;;		line 7 in file "transdutor.h"
 20182 ;; Parameters:    Size  Location     Type
 20183 ;;		None
 20184 ;; Auto vars:     Size  Location     Type
 20185 ;;  tensao          3   45[COMRAM] float 
 20186 ;;  _pressao        3   42[COMRAM] float 
 20187 ;;  i               1   41[COMRAM] unsigned char 
 20188 ;; Return value:  Size  Location     Type
 20189 ;;                  1    wreg      void 
 20190 ;; Registers used:
 20191 ;;		wreg, status,2, status,0, cstack
 20192 ;; Tracked objects:
 20193 ;;		On entry : 0/0
 20194 ;;		On exit  : 0/0
 20195 ;;		Unchanged: 0/0
 20196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20197 ;;      Params:         0       0       0       0       0       0       0
 20198 ;;      Locals:         7       0       0       0       0       0       0
 20199 ;;      Temps:          0       0       0       0       0       0       0
 20200 ;;      Totals:         7       0       0       0       0       0       0
 20201 ;;Total ram usage:        7 bytes
 20202 ;; Hardware stack levels used:    1
 20203 ;; Hardware stack levels required when called:    2
 20204 ;; This function calls:
 20205 ;;		___ftadd
 20206 ;;		___ftdiv
 20207 ;;		___ftge
 20208 ;;		___ftmul
 20209 ;;		___fttol
 20210 ;;		___lwtoft
 20211 ;;		_readADC
 20212 ;; This function is called by:
 20213 ;;		_TIMER0
 20214 ;; This function uses a non-reentrant model
 20215 ;;
 20216                           
 20217                           	psect	text90
 20218  0020BC                     __ptext90:
 20219                           	opt stack 0
 20220  0020BC                     _lerTransdutor:
 20221                           	opt stack 0
 20222  0020BC  FFFF               	dw	65535	; assembler added errata NOP
 20223                           
 20224                           ;transdutor.h: 8: char i = 0;
 20225                           
 20226                           ;incstack = 0
 20227  0020BE  0E00               	movlw	0
 20228  0020C0  6E2A               	movwf	lerTransdutor@i,c
 20229                           
 20230                           ;transdutor.h: 9: float tensao = 0, _pressao = 0;
 20231  0020C2  0E00               	movlw	0
 20232  0020C4  6E2E               	movwf	lerTransdutor@tensao,c
 20233  0020C6  0E00               	movlw	0
 20234  0020C8  6E2F               	movwf	lerTransdutor@tensao+1,c
 20235  0020CA  0E00               	movlw	0
 20236  0020CC  6E30               	movwf	lerTransdutor@tensao+2,c
 20237  0020CE  0E00               	movlw	0
 20238  0020D0  6E2B               	movwf	lerTransdutor@_pressao,c
 20239  0020D2  0E00               	movlw	0
 20240  0020D4  6E2C               	movwf	lerTransdutor@_pressao+1,c
 20241  0020D6  0E00               	movlw	0
 20242  0020D8  6E2D               	movwf	lerTransdutor@_pressao+2,c
 20243                           
 20244                           ;transdutor.h: 10: for (i = 0; i < 9; i++) {
 20245  0020DA  0E00               	movlw	0
 20246  0020DC  6E2A               	movwf	lerTransdutor@i,c
 20247  0020DE                     i2l6293:
 20248  0020DE  FFFF               	dw	65535	; assembler added errata NOP
 20249  0020E0  0E08               	movlw	8
 20250  0020E2  642A               	cpfsgt	lerTransdutor@i,c
 20251  0020E4  D001               	goto	i2l250
 20252  0020E6  D02D               	goto	i2u731_40
 20253  0020E8                     i2l250:
 20254  0020E8  FFFF               	dw	65535	; assembler added errata NOP
 20255                           
 20256                           ;transdutor.h: 11: tensao += readADC()*0.004887586;
 20257  0020EA  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 20258  0020EE  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 20259  0020F2  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 20260  0020F6  0E28               	movlw	40
 20261  0020F8  6E0F               	movwf	___ftmul@f2,c
 20262  0020FA  0EA0               	movlw	160
 20263  0020FC  6E10               	movwf	___ftmul@f2+1,c
 20264  0020FE  0E3B               	movlw	59
 20265  002100  6E11               	movwf	___ftmul@f2+2,c
 20266  002102  ECEA  F038         	call	_readADC	;wreg free
 20267  002106  C001  F009         	movff	?_readADC,___lwtoft@c
 20268  00210A  C002  F00A         	movff	?_readADC+1,___lwtoft@c+1
 20269  00210E  ECD6  F038         	call	___lwtoft	;wreg free
 20270  002112  C009  F00C         	movff	?___lwtoft,___ftmul@f1
 20271  002116  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
 20272  00211A  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
 20273  00211E  EC0F  F018         	call	___ftmul	;wreg free
 20274  002122  C00C  F01E         	movff	?___ftmul,___ftadd@f2
 20275  002126  C00D  F01F         	movff	?___ftmul+1,___ftadd@f2+1
 20276  00212A  C00E  F020         	movff	?___ftmul+2,___ftadd@f2+2
 20277  00212E  EC72  F012         	call	___ftadd	;wreg free
 20278  002132  C01B  F02E         	movff	?___ftadd,lerTransdutor@tensao
 20279  002136  C01C  F02F         	movff	?___ftadd+1,lerTransdutor@tensao+1
 20280  00213A  C01D  F030         	movff	?___ftadd+2,lerTransdutor@tensao+2
 20281  00213E  2A2A               	incf	lerTransdutor@i,f,c
 20282  002140  D7CE               	goto	i2l6293
 20283  002142                     i2u731_40:
 20284  002142  FFFF               	dw	65535	; assembler added errata NOP
 20285                           
 20286                           ;transdutor.h: 12: }
 20287                           ;transdutor.h: 13: tensao = tensao / 10;
 20288  002144  C02E  F01B         	movff	lerTransdutor@tensao,___ftdiv@f1
 20289  002148  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftdiv@f1+1
 20290  00214C  C030  F01D         	movff	lerTransdutor@tensao+2,___ftdiv@f1+2
 20291  002150  0E00               	movlw	0
 20292  002152  6E1E               	movwf	___ftdiv@f2,c
 20293  002154  0E20               	movlw	32
 20294  002156  6E1F               	movwf	___ftdiv@f2+1,c
 20295  002158  0E41               	movlw	65
 20296  00215A  6E20               	movwf	___ftdiv@f2+2,c
 20297  00215C  ECEB  F019         	call	___ftdiv	;wreg free
 20298  002160  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 20299  002164  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 20300  002168  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 20301                           
 20302                           ;transdutor.h: 14: _tensao += (float) tensao;
 20303  00216C  C04C  F01B         	movff	__tensao,___ftadd@f1
 20304  002170  C04D  F01C         	movff	__tensao+1,___ftadd@f1+1
 20305  002174  C04E  F01D         	movff	__tensao+2,___ftadd@f1+2
 20306  002178  C02E  F01E         	movff	lerTransdutor@tensao,___ftadd@f2
 20307  00217C  C02F  F01F         	movff	lerTransdutor@tensao+1,___ftadd@f2+1
 20308  002180  C030  F020         	movff	lerTransdutor@tensao+2,___ftadd@f2+2
 20309  002184  EC72  F012         	call	___ftadd	;wreg free
 20310  002188  C01B  F04C         	movff	?___ftadd,__tensao
 20311  00218C  C01C  F04D         	movff	?___ftadd+1,__tensao+1
 20312  002190  C01D  F04E         	movff	?___ftadd+2,__tensao+2
 20313                           
 20314                           ;transdutor.h: 15: qtd_leitura++;
 20315  002194  2A63               	incf	_qtd_leitura,f,c
 20316                           
 20317                           ;transdutor.h: 17: if ((tensao < 0.4) || (tensao > 4.5)) {
 20318  002196  C02E  F001         	movff	lerTransdutor@tensao,___ftge@ff1
 20319  00219A  C02F  F002         	movff	lerTransdutor@tensao+1,___ftge@ff1+1
 20320  00219E  C030  F003         	movff	lerTransdutor@tensao+2,___ftge@ff1+2
 20321  0021A2  0ECD               	movlw	205
 20322  0021A4  6E04               	movwf	___ftge@ff2,c
 20323  0021A6  0ECC               	movlw	204
 20324  0021A8  6E05               	movwf	___ftge@ff2+1,c
 20325  0021AA  0E3E               	movlw	62
 20326  0021AC  6E06               	movwf	___ftge@ff2+2,c
 20327  0021AE  EC09  F01D         	call	___ftge	;wreg free
 20328  0021B2  A0D8               	btfss	status,0,c
 20329  0021B4  D010               	goto	i2u733_40
 20330  0021B6  0E00               	movlw	0
 20331  0021B8  6E01               	movwf	___ftge@ff1,c
 20332  0021BA  0E90               	movlw	144
 20333  0021BC  6E02               	movwf	___ftge@ff1+1,c
 20334  0021BE  0E40               	movlw	64
 20335  0021C0  6E03               	movwf	___ftge@ff1+2,c
 20336  0021C2  C02E  F004         	movff	lerTransdutor@tensao,___ftge@ff2
 20337  0021C6  C02F  F005         	movff	lerTransdutor@tensao+1,___ftge@ff2+1
 20338  0021CA  C030  F006         	movff	lerTransdutor@tensao+2,___ftge@ff2+2
 20339  0021CE  EC09  F01D         	call	___ftge	;wreg free
 20340  0021D2  B0D8               	btfsc	status,0,c
 20341  0021D4  D003               	goto	i2l252
 20342  0021D6                     i2u733_40:
 20343  0021D6  FFFF               	dw	65535	; assembler added errata NOP
 20344                           
 20345                           ;transdutor.h: 18: pressao = 99;
 20346  0021D8  0E63               	movlw	99
 20347  0021DA  D076               	goto	L33
 20348  0021DC                     i2l252:
 20349  0021DC  FFFF               	dw	65535	; assembler added errata NOP
 20350                           
 20351                           ; BSR set to: 0
 20352  0021DE  0E05               	movlw	5
 20353  0021E0  6463               	cpfsgt	_qtd_leitura,c
 20354  0021E2  D075               	goto	i2l256
 20355                           
 20356                           ;transdutor.h: 20: qtd_leitura = 0;
 20357  0021E4  0E00               	movlw	0
 20358  0021E6  6E63               	movwf	_qtd_leitura,c
 20359                           
 20360                           ;transdutor.h: 21: tensao = (float) (_tensao / 6);
 20361  0021E8  C04C  F01B         	movff	__tensao,___ftdiv@f1
 20362  0021EC  C04D  F01C         	movff	__tensao+1,___ftdiv@f1+1
 20363  0021F0  C04E  F01D         	movff	__tensao+2,___ftdiv@f1+2
 20364  0021F4  0E00               	movlw	0
 20365  0021F6  6E1E               	movwf	___ftdiv@f2,c
 20366  0021F8  0EC0               	movlw	192
 20367  0021FA  6E1F               	movwf	___ftdiv@f2+1,c
 20368  0021FC  0E40               	movlw	64
 20369  0021FE  6E20               	movwf	___ftdiv@f2+2,c
 20370  002200  ECEB  F019         	call	___ftdiv	;wreg free
 20371  002204  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 20372  002208  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 20373  00220C  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 20374                           
 20375                           ;transdutor.h: 22: _tensao = 0;
 20376  002210  0E00               	movlw	0
 20377  002212  6E4C               	movwf	__tensao,c
 20378  002214  0E00               	movlw	0
 20379  002216  6E4D               	movwf	__tensao+1,c
 20380  002218  0E00               	movlw	0
 20381  00221A  6E4E               	movwf	__tensao+2,c
 20382                           
 20383                           ;transdutor.h: 23: _pressao = tensao - 0.5;
 20384  00221C  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 20385  002220  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 20386  002224  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 20387  002228  0E00               	movlw	0
 20388  00222A  6E1E               	movwf	___ftadd@f2,c
 20389  00222C  0E00               	movlw	0
 20390  00222E  6E1F               	movwf	___ftadd@f2+1,c
 20391  002230  0EBF               	movlw	191
 20392  002232  6E20               	movwf	___ftadd@f2+2,c
 20393  002234  EC72  F012         	call	___ftadd	;wreg free
 20394  002238  C01B  F02B         	movff	?___ftadd,lerTransdutor@_pressao
 20395  00223C  C01C  F02C         	movff	?___ftadd+1,lerTransdutor@_pressao+1
 20396  002240  C01D  F02D         	movff	?___ftadd+2,lerTransdutor@_pressao+2
 20397                           
 20398                           ;transdutor.h: 24: _pressao = _pressao * 10 / 4;
 20399  002244  0E00               	movlw	0
 20400  002246  6E0F               	movwf	___ftmul@f2,c
 20401  002248  0E20               	movlw	32
 20402  00224A  6E10               	movwf	___ftmul@f2+1,c
 20403  00224C  0E41               	movlw	65
 20404  00224E  6E11               	movwf	___ftmul@f2+2,c
 20405  002250  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 20406  002254  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 20407  002258  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 20408  00225C  EC0F  F018         	call	___ftmul	;wreg free
 20409  002260  C00C  F01B         	movff	?___ftmul,___ftdiv@f1
 20410  002264  C00D  F01C         	movff	?___ftmul+1,___ftdiv@f1+1
 20411  002268  C00E  F01D         	movff	?___ftmul+2,___ftdiv@f1+2
 20412  00226C  0E00               	movlw	0
 20413  00226E  6E1E               	movwf	___ftdiv@f2,c
 20414  002270  0E80               	movlw	128
 20415  002272  6E1F               	movwf	___ftdiv@f2+1,c
 20416  002274  0E40               	movlw	64
 20417  002276  6E20               	movwf	___ftdiv@f2+2,c
 20418  002278  ECEB  F019         	call	___ftdiv	;wreg free
 20419  00227C  C01B  F02B         	movff	?___ftdiv,lerTransdutor@_pressao
 20420  002280  C01C  F02C         	movff	?___ftdiv+1,lerTransdutor@_pressao+1
 20421  002284  C01D  F02D         	movff	?___ftdiv+2,lerTransdutor@_pressao+2
 20422                           
 20423                           ;transdutor.h: 25: if (_pressao < 0) {
 20424  002288  AE2D               	btfss	lerTransdutor@_pressao+2,7,c
 20425  00228A  D006               	goto	i2l257
 20426                           
 20427                           ;transdutor.h: 26: _pressao = 0;
 20428  00228C  0E00               	movlw	0
 20429  00228E  6E2B               	movwf	lerTransdutor@_pressao,c
 20430  002290  0E00               	movlw	0
 20431  002292  6E2C               	movwf	lerTransdutor@_pressao+1,c
 20432  002294  0E00               	movlw	0
 20433  002296  6E2D               	movwf	lerTransdutor@_pressao+2,c
 20434  002298                     i2l257:
 20435  002298  FFFF               	dw	65535	; assembler added errata NOP
 20436                           
 20437                           ;transdutor.h: 27: }
 20438                           ;transdutor.h: 28: pressao = _pressao * 10;
 20439  00229A  0E00               	movlw	0
 20440  00229C  6E0F               	movwf	___ftmul@f2,c
 20441  00229E  0E20               	movlw	32
 20442  0022A0  6E10               	movwf	___ftmul@f2+1,c
 20443  0022A2  0E41               	movlw	65
 20444  0022A4  6E11               	movwf	___ftmul@f2+2,c
 20445  0022A6  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 20446  0022AA  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 20447  0022AE  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 20448  0022B2  EC0F  F018         	call	___ftmul	;wreg free
 20449  0022B6  C00C  F01B         	movff	?___ftmul,___fttol@f1
 20450  0022BA  C00D  F01C         	movff	?___ftmul+1,___fttol@f1+1
 20451  0022BE  C00E  F01D         	movff	?___ftmul+2,___fttol@f1+2
 20452  0022C2  EC77  F019         	call	___fttol	;wreg free
 20453  0022C6  501B               	movf	?___fttol,w,c
 20454  0022C8                     L33:
 20455  0022C8  FFFF               	dw	65535	; assembler added errata NOP
 20456  0022CA  0100               	movlb	0	; () banked
 20457  0022CC  6FFF               	movwf	_pressao& (0+255),b
 20458  0022CE                     i2l256:
 20459  0022CE  FFFF               	dw	65535	; assembler added errata NOP
 20460                           
 20461                           ; BSR set to: 0
 20462                           
 20463                           ; BSR set to: 0
 20464  0022D0  0012               	return		;funcret
 20465  0022D2  FFFF               	dw	65535	; errata NOP
 20466  0022D4                     __end_of_lerTransdutor:
 20467                           	opt stack 0
 20468                           tosu	equ	0xFFF
 20469                           tosh	equ	0xFFE
 20470                           tosl	equ	0xFFD
 20471                           pclatu	equ	0xFFB
 20472                           pclath	equ	0xFFA
 20473                           tblptru	equ	0xFF8
 20474                           tblptrh	equ	0xFF7
 20475                           tblptrl	equ	0xFF6
 20476                           tablat	equ	0xFF5
 20477                           prodh	equ	0xFF4
 20478                           prodl	equ	0xFF3
 20479                           intcon	equ	0xFF2
 20480                           indf0	equ	0xFEF
 20481                           postinc0	equ	0xFEE
 20482                           fsr0h	equ	0xFEA
 20483                           fsr0l	equ	0xFE9
 20484                           wreg	equ	0xFE8
 20485                           postdec1	equ	0xFE5
 20486                           fsr1h	equ	0xFE2
 20487                           fsr1l	equ	0xFE1
 20488                           indf2	equ	0xFDF
 20489                           postinc2	equ	0xFDE
 20490                           postdec2	equ	0xFDD
 20491                           fsr2h	equ	0xFDA
 20492                           fsr2l	equ	0xFD9
 20493                           status	equ	0xFD8
 20494                           
 20495 ;; *************** function _readADC *****************
 20496 ;; Defined at:
 20497 ;;		line 8 in file "adc.h"
 20498 ;; Parameters:    Size  Location     Type
 20499 ;;		None
 20500 ;; Auto vars:     Size  Location     Type
 20501 ;;		None
 20502 ;; Return value:  Size  Location     Type
 20503 ;;                  2    0[COMRAM] unsigned int 
 20504 ;; Registers used:
 20505 ;;		wreg, status,2, status,0
 20506 ;; Tracked objects:
 20507 ;;		On entry : 0/0
 20508 ;;		On exit  : 0/0
 20509 ;;		Unchanged: 0/0
 20510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20511 ;;      Params:         2       0       0       0       0       0       0
 20512 ;;      Locals:         0       0       0       0       0       0       0
 20513 ;;      Temps:          2       0       0       0       0       0       0
 20514 ;;      Totals:         4       0       0       0       0       0       0
 20515 ;;Total ram usage:        4 bytes
 20516 ;; Hardware stack levels used:    1
 20517 ;; This function calls:
 20518 ;;		Nothing
 20519 ;; This function is called by:
 20520 ;;		_lerTransdutor
 20521 ;; This function uses a non-reentrant model
 20522 ;;
 20523                           
 20524                           	psect	text91
 20525  0071D4                     __ptext91:
 20526                           	opt stack 0
 20527  0071D4                     _readADC:
 20528                           	opt stack 0
 20529  0071D4  FFFF               	dw	65535	; assembler added errata NOP
 20530                           
 20531                           ;adc.h: 9: ADCON0bits.GO = 1;
 20532                           
 20533                           ;incstack = 0
 20534  0071D6  84C2               	bsf	4034,2,c	;volatile
 20535                           
 20536                           ;adc.h: 10: _delay((unsigned long)((50)*(8000000/4000000.0)));
 20537  0071D8  0E19               	movlw	25
 20538  0071DA                     i2u1928_47:
 20539  0071DA  FFFF               	dw	65535	; errata NOP
 20540  0071DC  2EE8               	decfsz	wreg,f,c
 20541  0071DE  D7FD               	bra	i2u1928_47
 20542  0071E0  FFFF               	dw	65535	; assembler added errata NOP
 20543  0071E2  A4C2               	btfss	4034,2,c	;volatile
 20544  0071E4  D7FD               	goto	i2l245
 20545                           
 20546                           ;adc.h: 12: }
 20547                           ;adc.h: 13: return((ADRESH<<8)+ ADRESL);
 20548  0071E6  50C4               	movf	4036,w,c	;volatile
 20549  0071E8  6E04               	movwf	(??_readADC+1)& (0+255),c
 20550  0071EA  6A03               	clrf	??_readADC& (0+255),c
 20551  0071EC  50C3               	movf	4035,w,c	;volatile
 20552  0071EE  2403               	addwf	??_readADC,w,c
 20553  0071F0  6E01               	movwf	?_readADC,c
 20554  0071F2  0E00               	movlw	0
 20555  0071F4  2004               	addwfc	??_readADC+1,w,c
 20556  0071F6  6E02               	movwf	?_readADC+1,c
 20557  0071F8  0012               	return		;funcret
 20558  0071FA  FFFF               	dw	65535	; errata NOP
 20559  0071FC                     __end_of_readADC:
 20560                           	opt stack 0
 20561                           tosu	equ	0xFFF
 20562                           tosh	equ	0xFFE
 20563                           tosl	equ	0xFFD
 20564                           pclatu	equ	0xFFB
 20565                           pclath	equ	0xFFA
 20566                           tblptru	equ	0xFF8
 20567                           tblptrh	equ	0xFF7
 20568                           tblptrl	equ	0xFF6
 20569                           tablat	equ	0xFF5
 20570                           prodh	equ	0xFF4
 20571                           prodl	equ	0xFF3
 20572                           intcon	equ	0xFF2
 20573                           indf0	equ	0xFEF
 20574                           postinc0	equ	0xFEE
 20575                           fsr0h	equ	0xFEA
 20576                           fsr0l	equ	0xFE9
 20577                           wreg	equ	0xFE8
 20578                           postdec1	equ	0xFE5
 20579                           fsr1h	equ	0xFE2
 20580                           fsr1l	equ	0xFE1
 20581                           indf2	equ	0xFDF
 20582                           postinc2	equ	0xFDE
 20583                           postdec2	equ	0xFDD
 20584                           fsr2h	equ	0xFDA
 20585                           fsr2l	equ	0xFD9
 20586                           status	equ	0xFD8
 20587                           
 20588 ;; *************** function ___lwtoft *****************
 20589 ;; Defined at:
 20590 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 20591 ;; Parameters:    Size  Location     Type
 20592 ;;  c               2    8[COMRAM] unsigned int 
 20593 ;; Auto vars:     Size  Location     Type
 20594 ;;		None
 20595 ;; Return value:  Size  Location     Type
 20596 ;;                  3    8[COMRAM] float 
 20597 ;; Registers used:
 20598 ;;		wreg, status,2, status,0, cstack
 20599 ;; Tracked objects:
 20600 ;;		On entry : 0/0
 20601 ;;		On exit  : 0/0
 20602 ;;		Unchanged: 0/0
 20603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20604 ;;      Params:         3       0       0       0       0       0       0
 20605 ;;      Locals:         0       0       0       0       0       0       0
 20606 ;;      Temps:          0       0       0       0       0       0       0
 20607 ;;      Totals:         3       0       0       0       0       0       0
 20608 ;;Total ram usage:        3 bytes
 20609 ;; Hardware stack levels used:    1
 20610 ;; Hardware stack levels required when called:    1
 20611 ;; This function calls:
 20612 ;;		___ftpack
 20613 ;; This function is called by:
 20614 ;;		_lerTransdutor
 20615 ;; This function uses a non-reentrant model
 20616 ;;
 20617                           
 20618                           	psect	text92
 20619  0071AC                     __ptext92:
 20620                           	opt stack 0
 20621  0071AC                     ___lwtoft:
 20622                           	opt stack 0
 20623  0071AC  FFFF               	dw	65535	; assembler added errata NOP
 20624                           
 20625                           ;incstack = 0
 20626  0071AE  C009  F001         	movff	___lwtoft@c,___ftpack@arg
 20627  0071B2  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 20628  0071B6  6A03               	clrf	___ftpack@arg+2,c
 20629  0071B8  0E8E               	movlw	142
 20630  0071BA  6E04               	movwf	___ftpack@exp,c
 20631  0071BC  0E00               	movlw	0
 20632  0071BE  6E05               	movwf	___ftpack@sign,c
 20633  0071C0  ECFA  F01B         	call	___ftpack	;wreg free
 20634  0071C4  C001  F009         	movff	?___ftpack,?___lwtoft
 20635  0071C8  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
 20636  0071CC  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
 20637  0071D0  0012               	return		;funcret
 20638  0071D2  FFFF               	dw	65535	; errata NOP
 20639  0071D4                     __end_of___lwtoft:
 20640                           	opt stack 0
 20641                           tosu	equ	0xFFF
 20642                           tosh	equ	0xFFE
 20643                           tosl	equ	0xFFD
 20644                           pclatu	equ	0xFFB
 20645                           pclath	equ	0xFFA
 20646                           tblptru	equ	0xFF8
 20647                           tblptrh	equ	0xFF7
 20648                           tblptrl	equ	0xFF6
 20649                           tablat	equ	0xFF5
 20650                           prodh	equ	0xFF4
 20651                           prodl	equ	0xFF3
 20652                           intcon	equ	0xFF2
 20653                           indf0	equ	0xFEF
 20654                           postinc0	equ	0xFEE
 20655                           fsr0h	equ	0xFEA
 20656                           fsr0l	equ	0xFE9
 20657                           wreg	equ	0xFE8
 20658                           postdec1	equ	0xFE5
 20659                           fsr1h	equ	0xFE2
 20660                           fsr1l	equ	0xFE1
 20661                           indf2	equ	0xFDF
 20662                           postinc2	equ	0xFDE
 20663                           postdec2	equ	0xFDD
 20664                           fsr2h	equ	0xFDA
 20665                           fsr2l	equ	0xFD9
 20666                           status	equ	0xFD8
 20667                           
 20668 ;; *************** function ___fttol *****************
 20669 ;; Defined at:
 20670 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 20671 ;; Parameters:    Size  Location     Type
 20672 ;;  f1              3   26[COMRAM] float 
 20673 ;; Auto vars:     Size  Location     Type
 20674 ;;  lval            4   36[COMRAM] unsigned long 
 20675 ;;  exp1            1   40[COMRAM] unsigned char 
 20676 ;;  sign1           1   35[COMRAM] unsigned char 
 20677 ;; Return value:  Size  Location     Type
 20678 ;;                  4   26[COMRAM] long 
 20679 ;; Registers used:
 20680 ;;		wreg, status,2, status,0
 20681 ;; Tracked objects:
 20682 ;;		On entry : 0/0
 20683 ;;		On exit  : 0/0
 20684 ;;		Unchanged: 0/0
 20685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20686 ;;      Params:         4       0       0       0       0       0       0
 20687 ;;      Locals:         6       0       0       0       0       0       0
 20688 ;;      Temps:          5       0       0       0       0       0       0
 20689 ;;      Totals:        15       0       0       0       0       0       0
 20690 ;;Total ram usage:       15 bytes
 20691 ;; Hardware stack levels used:    1
 20692 ;; This function calls:
 20693 ;;		Nothing
 20694 ;; This function is called by:
 20695 ;;		_lerTransdutor
 20696 ;; This function uses a non-reentrant model
 20697 ;;
 20698                           
 20699                           	psect	text93
 20700  0032EE                     __ptext93:
 20701                           	opt stack 0
 20702  0032EE                     ___fttol:
 20703                           	opt stack 0
 20704  0032EE  FFFF               	dw	65535	; assembler added errata NOP
 20705                           
 20706                           ;incstack = 0
 20707  0032F0  C01D  F01F         	movff	___fttol@f1+2,??___fttol
 20708  0032F4  6A20               	clrf	(??___fttol+1)& (0+255),c
 20709  0032F6  6A21               	clrf	(??___fttol+2)& (0+255),c
 20710  0032F8  341C               	rlcf	___fttol@f1+1,w,c
 20711  0032FA  361F               	rlcf	??___fttol& (0+255),f,c
 20712  0032FC  E301               	bnc	u719_41
 20713  0032FE  8020               	bsf	(??___fttol+1)& (0+255),0,c
 20714  003300                     u719_41:
 20715  003300  501F               	movf	??___fttol,w,c
 20716  003302  6E29               	movwf	___fttol@exp1,c
 20717  003304  5029               	movf	___fttol@exp1,w,c
 20718  003306  B4D8               	btfsc	status,2,c
 20719  003308  D039               	goto	i2u724_40
 20720  00330A  0E17               	movlw	23
 20721  00330C  6E1F               	movwf	??___fttol& (0+255),c
 20722  00330E  C01B  F020         	movff	___fttol@f1,??___fttol+1
 20723  003312  C01C  F021         	movff	___fttol@f1+1,??___fttol+2
 20724  003316  C01D  F022         	movff	___fttol@f1+2,??___fttol+3
 20725  00331A  281F               	incf	??___fttol,w,c
 20726  00331C  6E23               	movwf	(??___fttol+4)& (0+255),c
 20727  00331E  D005               	goto	i2u721_40
 20728  003320                     i2u721_45:
 20729  003320  FFFF               	dw	65535	; assembler added errata NOP
 20730  003322  90D8               	bcf	status,0,c
 20731  003324  3222               	rrcf	??___fttol+3,f,c
 20732  003326  3221               	rrcf	??___fttol+2,f,c
 20733  003328  3220               	rrcf	??___fttol+1,f,c
 20734  00332A                     i2u721_40:
 20735  00332A  FFFF               	dw	65535	; assembler added errata NOP
 20736  00332C  2E23               	decfsz	(??___fttol+4)& (0+255),f,c
 20737  00332E  D7F8               	goto	i2u721_45
 20738  003330  5020               	movf	??___fttol+1,w,c
 20739  003332  6E24               	movwf	___fttol@sign1,c
 20740  003334  8E1C               	bsf	___fttol@f1+1,7,c
 20741  003336  0EFF               	movlw	255
 20742  003338  161B               	andwf	___fttol@f1,f,c
 20743  00333A  0EFF               	movlw	255
 20744  00333C  161C               	andwf	___fttol@f1+1,f,c
 20745  00333E  0E00               	movlw	0
 20746  003340  161D               	andwf	___fttol@f1+2,f,c
 20747  003342  501B               	movf	___fttol@f1,w,c
 20748  003344  6E25               	movwf	___fttol@lval,c
 20749  003346  501C               	movf	___fttol@f1+1,w,c
 20750  003348  6E26               	movwf	___fttol@lval+1,c
 20751  00334A  501D               	movf	___fttol@f1+2,w,c
 20752  00334C  6E27               	movwf	___fttol@lval+2,c
 20753  00334E  6A28               	clrf	___fttol@lval+3,c
 20754  003350  0E8E               	movlw	142
 20755  003352  5E29               	subwf	___fttol@exp1,f,c
 20756  003354  AE29               	btfss	___fttol@exp1,7,c
 20757  003356  D00E               	goto	i2l1355
 20758  003358  5029               	movf	___fttol@exp1,w,c
 20759  00335A  0A80               	xorlw	128
 20760  00335C  0F8F               	addlw	143
 20761  00335E  A0D8               	btfss	status,0,c
 20762  003360  D00D               	goto	i2u724_40
 20763  003362  FFFF               	dw	65535	; assembler added errata NOP
 20764  003364  90D8               	bcf	status,0,c
 20765  003366  3228               	rrcf	___fttol@lval+3,f,c
 20766  003368  3227               	rrcf	___fttol@lval+2,f,c
 20767  00336A  3226               	rrcf	___fttol@lval+1,f,c
 20768  00336C  3225               	rrcf	___fttol@lval,f,c
 20769  00336E  3E29               	incfsz	___fttol@exp1,f,c
 20770  003370  D7F8               	goto	i2l1356
 20771  003372  D019               	goto	i2u725_40
 20772  003374                     i2l1355:
 20773  003374  FFFF               	dw	65535	; assembler added errata NOP
 20774  003376  0E17               	movlw	23
 20775  003378  6429               	cpfsgt	___fttol@exp1,c
 20776  00337A  D011               	goto	i2l1361
 20777  00337C                     i2u724_40:
 20778  00337C  FFFF               	dw	65535	; assembler added errata NOP
 20779  00337E  0E00               	movlw	0
 20780  003380  6E1B               	movwf	?___fttol,c
 20781  003382  0E00               	movlw	0
 20782  003384  6E1C               	movwf	?___fttol+1,c
 20783  003386  0E00               	movlw	0
 20784  003388  6E1D               	movwf	?___fttol+2,c
 20785  00338A  0E00               	movlw	0
 20786  00338C  6E1E               	movwf	?___fttol+3,c
 20787  00338E  D020               	goto	i2l6173
 20788  003390  FFFF               	dw	65535	; assembler added errata NOP
 20789  003392  90D8               	bcf	status,0,c
 20790  003394  3625               	rlcf	___fttol@lval,f,c
 20791  003396  3626               	rlcf	___fttol@lval+1,f,c
 20792  003398  3627               	rlcf	___fttol@lval+2,f,c
 20793  00339A  3628               	rlcf	___fttol@lval+3,f,c
 20794  00339C  0629               	decf	___fttol@exp1,f,c
 20795  00339E                     i2l1361:
 20796  00339E  FFFF               	dw	65535	; assembler added errata NOP
 20797  0033A0  5029               	movf	___fttol@exp1,w,c
 20798  0033A2  A4D8               	btfss	status,2,c
 20799  0033A4  D7F5               	goto	i2l1362
 20800  0033A6                     i2u725_40:
 20801  0033A6  FFFF               	dw	65535	; assembler added errata NOP
 20802  0033A8  5024               	movf	___fttol@sign1,w,c
 20803  0033AA  B4D8               	btfsc	status,2,c
 20804  0033AC  D008               	goto	i2l1364
 20805  0033AE  1E28               	comf	___fttol@lval+3,f,c
 20806  0033B0  1E27               	comf	___fttol@lval+2,f,c
 20807  0033B2  1E26               	comf	___fttol@lval+1,f,c
 20808  0033B4  6C25               	negf	___fttol@lval,c
 20809  0033B6  0E00               	movlw	0
 20810  0033B8  2226               	addwfc	___fttol@lval+1,f,c
 20811  0033BA  2227               	addwfc	___fttol@lval+2,f,c
 20812  0033BC  2228               	addwfc	___fttol@lval+3,f,c
 20813  0033BE                     i2l1364:
 20814  0033BE  FFFF               	dw	65535	; assembler added errata NOP
 20815  0033C0  C025  F01B         	movff	___fttol@lval,?___fttol
 20816  0033C4  C026  F01C         	movff	___fttol@lval+1,?___fttol+1
 20817  0033C8  C027  F01D         	movff	___fttol@lval+2,?___fttol+2
 20818  0033CC  C028  F01E         	movff	___fttol@lval+3,?___fttol+3
 20819  0033D0                     i2l6173:
 20820  0033D0  FFFF               	dw	65535	; assembler added errata NOP
 20821  0033D2  0012               	return		;funcret
 20822  0033D4  FFFF               	dw	65535	; errata NOP
 20823  0033D6                     __end_of___fttol:
 20824                           	opt stack 0
 20825                           tosu	equ	0xFFF
 20826                           tosh	equ	0xFFE
 20827                           tosl	equ	0xFFD
 20828                           pclatu	equ	0xFFB
 20829                           pclath	equ	0xFFA
 20830                           tblptru	equ	0xFF8
 20831                           tblptrh	equ	0xFF7
 20832                           tblptrl	equ	0xFF6
 20833                           tablat	equ	0xFF5
 20834                           prodh	equ	0xFF4
 20835                           prodl	equ	0xFF3
 20836                           intcon	equ	0xFF2
 20837                           indf0	equ	0xFEF
 20838                           postinc0	equ	0xFEE
 20839                           fsr0h	equ	0xFEA
 20840                           fsr0l	equ	0xFE9
 20841                           wreg	equ	0xFE8
 20842                           postdec1	equ	0xFE5
 20843                           fsr1h	equ	0xFE2
 20844                           fsr1l	equ	0xFE1
 20845                           indf2	equ	0xFDF
 20846                           postinc2	equ	0xFDE
 20847                           postdec2	equ	0xFDD
 20848                           fsr2h	equ	0xFDA
 20849                           fsr2l	equ	0xFD9
 20850                           status	equ	0xFD8
 20851                           
 20852 ;; *************** function ___ftmul *****************
 20853 ;; Defined at:
 20854 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 20855 ;; Parameters:    Size  Location     Type
 20856 ;;  f1              3   11[COMRAM] float 
 20857 ;;  f2              3   14[COMRAM] float 
 20858 ;; Auto vars:     Size  Location     Type
 20859 ;;  f3_as_produc    3   21[COMRAM] unsigned um
 20860 ;;  sign            1   25[COMRAM] unsigned char 
 20861 ;;  cntr            1   24[COMRAM] unsigned char 
 20862 ;;  exp             1   20[COMRAM] unsigned char 
 20863 ;; Return value:  Size  Location     Type
 20864 ;;                  3   11[COMRAM] float 
 20865 ;; Registers used:
 20866 ;;		wreg, status,2, status,0, cstack
 20867 ;; Tracked objects:
 20868 ;;		On entry : 0/0
 20869 ;;		On exit  : 0/0
 20870 ;;		Unchanged: 0/0
 20871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20872 ;;      Params:         6       0       0       0       0       0       0
 20873 ;;      Locals:         6       0       0       0       0       0       0
 20874 ;;      Temps:          3       0       0       0       0       0       0
 20875 ;;      Totals:        15       0       0       0       0       0       0
 20876 ;;Total ram usage:       15 bytes
 20877 ;; Hardware stack levels used:    1
 20878 ;; Hardware stack levels required when called:    1
 20879 ;; This function calls:
 20880 ;;		___ftpack
 20881 ;; This function is called by:
 20882 ;;		_lerTransdutor
 20883 ;;		_map
 20884 ;; This function uses a non-reentrant model
 20885 ;;
 20886                           
 20887                           	psect	text94
 20888  00301E                     __ptext94:
 20889                           	opt stack 0
 20890  00301E                     ___ftmul:
 20891                           	opt stack 0
 20892  00301E  FFFF               	dw	65535	; assembler added errata NOP
 20893                           
 20894                           ;incstack = 0
 20895  003020  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
 20896  003024  6A13               	clrf	(??___ftmul+1)& (0+255),c
 20897  003026  6A14               	clrf	(??___ftmul+2)& (0+255),c
 20898  003028  340D               	rlcf	___ftmul@f1+1,w,c
 20899  00302A  3612               	rlcf	??___ftmul& (0+255),f,c
 20900  00302C  E301               	bnc	u710_41
 20901  00302E  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 20902  003030                     u710_41:
 20903  003030  5012               	movf	??___ftmul,w,c
 20904  003032  6E15               	movwf	___ftmul@exp,c
 20905  003034  5015               	movf	___ftmul@exp,w,c
 20906  003036  B4D8               	btfsc	status,2,c
 20907  003038  D00D               	goto	i2u713_40
 20908  00303A  C011  F012         	movff	___ftmul@f2+2,??___ftmul
 20909  00303E  6A13               	clrf	(??___ftmul+1)& (0+255),c
 20910  003040  6A14               	clrf	(??___ftmul+2)& (0+255),c
 20911  003042  3410               	rlcf	___ftmul@f2+1,w,c
 20912  003044  3612               	rlcf	??___ftmul& (0+255),f,c
 20913  003046  E301               	bnc	u712_41
 20914  003048  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 20915  00304A                     u712_41:
 20916  00304A  5012               	movf	??___ftmul,w,c
 20917  00304C  6E1A               	movwf	___ftmul@sign,c
 20918  00304E  501A               	movf	___ftmul@sign,w,c
 20919  003050  A4D8               	btfss	status,2,c
 20920  003052  D008               	goto	i2l1334
 20921  003054                     i2u713_40:
 20922  003054  FFFF               	dw	65535	; assembler added errata NOP
 20923  003056  0E00               	movlw	0
 20924  003058  6E0C               	movwf	?___ftmul,c
 20925  00305A  0E00               	movlw	0
 20926  00305C  6E0D               	movwf	?___ftmul+1,c
 20927  00305E  0E00               	movlw	0
 20928  003060  6E0E               	movwf	?___ftmul+2,c
 20929  003062  D056               	goto	i2l6109
 20930  003064                     i2l1334:
 20931  003064  FFFF               	dw	65535	; assembler added errata NOP
 20932  003066  501A               	movf	___ftmul@sign,w,c
 20933  003068  0F7B               	addlw	123
 20934  00306A  2615               	addwf	___ftmul@exp,f,c
 20935  00306C  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
 20936  003070  5011               	movf	___ftmul@f2+2,w,c
 20937  003072  1A1A               	xorwf	___ftmul@sign,f,c
 20938  003074  0E80               	movlw	128
 20939  003076  161A               	andwf	___ftmul@sign,f,c
 20940  003078  8E0D               	bsf	___ftmul@f1+1,7,c
 20941  00307A  8E10               	bsf	___ftmul@f2+1,7,c
 20942  00307C  0EFF               	movlw	255
 20943  00307E  160F               	andwf	___ftmul@f2,f,c
 20944  003080  0EFF               	movlw	255
 20945  003082  1610               	andwf	___ftmul@f2+1,f,c
 20946  003084  0E00               	movlw	0
 20947  003086  1611               	andwf	___ftmul@f2+2,f,c
 20948  003088  0E00               	movlw	0
 20949  00308A  6E16               	movwf	___ftmul@f3_as_product,c
 20950  00308C  0E00               	movlw	0
 20951  00308E  6E17               	movwf	___ftmul@f3_as_product+1,c
 20952  003090  0E00               	movlw	0
 20953  003092  6E18               	movwf	___ftmul@f3_as_product+2,c
 20954  003094  0E07               	movlw	7
 20955  003096  6E19               	movwf	___ftmul@cntr,c
 20956  003098  FFFF               	dw	65535	; assembler added errata NOP
 20957  00309A  A00C               	btfss	___ftmul@f1,0,c
 20958  00309C  D006               	goto	i2l1336
 20959  00309E  500F               	movf	___ftmul@f2,w,c
 20960  0030A0  2616               	addwf	___ftmul@f3_as_product,f,c
 20961  0030A2  5010               	movf	___ftmul@f2+1,w,c
 20962  0030A4  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 20963  0030A6  5011               	movf	___ftmul@f2+2,w,c
 20964  0030A8  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 20965  0030AA                     i2l1336:
 20966  0030AA  FFFF               	dw	65535	; assembler added errata NOP
 20967  0030AC  90D8               	bcf	status,0,c
 20968  0030AE  320E               	rrcf	___ftmul@f1+2,f,c
 20969  0030B0  320D               	rrcf	___ftmul@f1+1,f,c
 20970  0030B2  320C               	rrcf	___ftmul@f1,f,c
 20971  0030B4  90D8               	bcf	status,0,c
 20972  0030B6  360F               	rlcf	___ftmul@f2,f,c
 20973  0030B8  3610               	rlcf	___ftmul@f2+1,f,c
 20974  0030BA  3611               	rlcf	___ftmul@f2+2,f,c
 20975  0030BC  2E19               	decfsz	___ftmul@cntr,f,c
 20976  0030BE  D7EC               	goto	i2l1335
 20977  0030C0  0E09               	movlw	9
 20978  0030C2  6E19               	movwf	___ftmul@cntr,c
 20979  0030C4  FFFF               	dw	65535	; assembler added errata NOP
 20980  0030C6  A00C               	btfss	___ftmul@f1,0,c
 20981  0030C8  D006               	goto	i2l1339
 20982  0030CA  500F               	movf	___ftmul@f2,w,c
 20983  0030CC  2616               	addwf	___ftmul@f3_as_product,f,c
 20984  0030CE  5010               	movf	___ftmul@f2+1,w,c
 20985  0030D0  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 20986  0030D2  5011               	movf	___ftmul@f2+2,w,c
 20987  0030D4  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 20988  0030D6                     i2l1339:
 20989  0030D6  FFFF               	dw	65535	; assembler added errata NOP
 20990  0030D8  90D8               	bcf	status,0,c
 20991  0030DA  320E               	rrcf	___ftmul@f1+2,f,c
 20992  0030DC  320D               	rrcf	___ftmul@f1+1,f,c
 20993  0030DE  320C               	rrcf	___ftmul@f1,f,c
 20994  0030E0  90D8               	bcf	status,0,c
 20995  0030E2  3218               	rrcf	___ftmul@f3_as_product+2,f,c
 20996  0030E4  3217               	rrcf	___ftmul@f3_as_product+1,f,c
 20997  0030E6  3216               	rrcf	___ftmul@f3_as_product,f,c
 20998  0030E8  2E19               	decfsz	___ftmul@cntr,f,c
 20999  0030EA  D7EC               	goto	i2l1338
 21000  0030EC  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 21001  0030F0  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 21002  0030F4  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 21003  0030F8  C015  F004         	movff	___ftmul@exp,___ftpack@exp
 21004  0030FC  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
 21005  003100  ECFA  F01B         	call	___ftpack	;wreg free
 21006  003104  C001  F00C         	movff	?___ftpack,?___ftmul
 21007  003108  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
 21008  00310C  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
 21009  003110                     i2l6109:
 21010  003110  FFFF               	dw	65535	; assembler added errata NOP
 21011  003112  0012               	return		;funcret
 21012  003114  FFFF               	dw	65535	; errata NOP
 21013  003116                     __end_of___ftmul:
 21014                           	opt stack 0
 21015                           tosu	equ	0xFFF
 21016                           tosh	equ	0xFFE
 21017                           tosl	equ	0xFFD
 21018                           pclatu	equ	0xFFB
 21019                           pclath	equ	0xFFA
 21020                           tblptru	equ	0xFF8
 21021                           tblptrh	equ	0xFF7
 21022                           tblptrl	equ	0xFF6
 21023                           tablat	equ	0xFF5
 21024                           prodh	equ	0xFF4
 21025                           prodl	equ	0xFF3
 21026                           intcon	equ	0xFF2
 21027                           indf0	equ	0xFEF
 21028                           postinc0	equ	0xFEE
 21029                           fsr0h	equ	0xFEA
 21030                           fsr0l	equ	0xFE9
 21031                           wreg	equ	0xFE8
 21032                           postdec1	equ	0xFE5
 21033                           fsr1h	equ	0xFE2
 21034                           fsr1l	equ	0xFE1
 21035                           indf2	equ	0xFDF
 21036                           postinc2	equ	0xFDE
 21037                           postdec2	equ	0xFDD
 21038                           fsr2h	equ	0xFDA
 21039                           fsr2l	equ	0xFD9
 21040                           status	equ	0xFD8
 21041                           
 21042 ;; *************** function ___ftge *****************
 21043 ;; Defined at:
 21044 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 21045 ;; Parameters:    Size  Location     Type
 21046 ;;  ff1             3    0[COMRAM] float 
 21047 ;;  ff2             3    3[COMRAM] float 
 21048 ;; Auto vars:     Size  Location     Type
 21049 ;;		None
 21050 ;; Return value:  Size  Location     Type
 21051 ;;		None               void
 21052 ;; Registers used:
 21053 ;;		wreg, status,2, status,0
 21054 ;; Tracked objects:
 21055 ;;		On entry : 0/0
 21056 ;;		On exit  : 0/0
 21057 ;;		Unchanged: 0/0
 21058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21059 ;;      Params:         6       0       0       0       0       0       0
 21060 ;;      Locals:         0       0       0       0       0       0       0
 21061 ;;      Temps:          3       0       0       0       0       0       0
 21062 ;;      Totals:         9       0       0       0       0       0       0
 21063 ;;Total ram usage:        9 bytes
 21064 ;; Hardware stack levels used:    1
 21065 ;; This function calls:
 21066 ;;		Nothing
 21067 ;; This function is called by:
 21068 ;;		_lerTransdutor
 21069 ;; This function uses a non-reentrant model
 21070 ;;
 21071                           
 21072                           	psect	text95
 21073  003A12                     __ptext95:
 21074                           	opt stack 0
 21075  003A12                     ___ftge:
 21076                           	opt stack 0
 21077  003A12  FFFF               	dw	65535	; assembler added errata NOP
 21078                           
 21079                           ;incstack = 0
 21080  003A14  AE03               	btfss	___ftge@ff1+2,7,c
 21081  003A16  D016               	goto	i2l1325
 21082  003A18  C001  F007         	movff	___ftge@ff1,??___ftge
 21083  003A1C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 21084  003A20  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 21085  003A24  1E07               	comf	??___ftge,f,c
 21086  003A26  1E08               	comf	??___ftge+1,f,c
 21087  003A28  1E09               	comf	??___ftge+2,f,c
 21088  003A2A  2A07               	incf	??___ftge,f,c
 21089  003A2C  0E00               	movlw	0
 21090  003A2E  2208               	addwfc	??___ftge+1,f,c
 21091  003A30  2209               	addwfc	??___ftge+2,f,c
 21092  003A32  0E00               	movlw	0
 21093  003A34  2407               	addwf	??___ftge,w,c
 21094  003A36  6E01               	movwf	___ftge@ff1,c
 21095  003A38  0E00               	movlw	0
 21096  003A3A  2008               	addwfc	??___ftge+1,w,c
 21097  003A3C  6E02               	movwf	___ftge@ff1+1,c
 21098  003A3E  0E80               	movlw	128
 21099  003A40  2009               	addwfc	??___ftge+2,w,c
 21100  003A42  6E03               	movwf	___ftge@ff1+2,c
 21101  003A44                     i2l1325:
 21102  003A44  FFFF               	dw	65535	; assembler added errata NOP
 21103  003A46  AE06               	btfss	___ftge@ff2+2,7,c
 21104  003A48  D016               	goto	i2l1326
 21105  003A4A  C004  F007         	movff	___ftge@ff2,??___ftge
 21106  003A4E  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 21107  003A52  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 21108  003A56  1E07               	comf	??___ftge,f,c
 21109  003A58  1E08               	comf	??___ftge+1,f,c
 21110  003A5A  1E09               	comf	??___ftge+2,f,c
 21111  003A5C  2A07               	incf	??___ftge,f,c
 21112  003A5E  0E00               	movlw	0
 21113  003A60  2208               	addwfc	??___ftge+1,f,c
 21114  003A62  2209               	addwfc	??___ftge+2,f,c
 21115  003A64  0E00               	movlw	0
 21116  003A66  2407               	addwf	??___ftge,w,c
 21117  003A68  6E04               	movwf	___ftge@ff2,c
 21118  003A6A  0E00               	movlw	0
 21119  003A6C  2008               	addwfc	??___ftge+1,w,c
 21120  003A6E  6E05               	movwf	___ftge@ff2+1,c
 21121  003A70  0E80               	movlw	128
 21122  003A72  2009               	addwfc	??___ftge+2,w,c
 21123  003A74  6E06               	movwf	___ftge@ff2+2,c
 21124  003A76                     i2l1326:
 21125  003A76  FFFF               	dw	65535	; assembler added errata NOP
 21126  003A78  0E00               	movlw	0
 21127  003A7A  1A01               	xorwf	___ftge@ff1,f,c
 21128  003A7C  0E00               	movlw	0
 21129  003A7E  1A02               	xorwf	___ftge@ff1+1,f,c
 21130  003A80  0E80               	movlw	128
 21131  003A82  1A03               	xorwf	___ftge@ff1+2,f,c
 21132  003A84  0E00               	movlw	0
 21133  003A86  1A04               	xorwf	___ftge@ff2,f,c
 21134  003A88  0E00               	movlw	0
 21135  003A8A  1A05               	xorwf	___ftge@ff2+1,f,c
 21136  003A8C  0E80               	movlw	128
 21137  003A8E  1A06               	xorwf	___ftge@ff2+2,f,c
 21138  003A90  5004               	movf	___ftge@ff2,w,c
 21139  003A92  5C01               	subwf	___ftge@ff1,w,c
 21140  003A94  5005               	movf	___ftge@ff2+1,w,c
 21141  003A96  5802               	subwfb	___ftge@ff1+1,w,c
 21142  003A98  5006               	movf	___ftge@ff2+2,w,c
 21143  003A9A  5803               	subwfb	___ftge@ff1+2,w,c
 21144  003A9C  B0D8               	btfsc	status,0,c
 21145  003A9E  D002               	goto	i2l4639
 21146  003AA0  90D8               	bcf	status,0,c
 21147  003AA2  D002               	goto	i2l4641
 21148  003AA4                     i2l4639:
 21149  003AA4  FFFF               	dw	65535	; assembler added errata NOP
 21150  003AA6  80D8               	bsf	status,0,c
 21151  003AA8                     i2l4641:
 21152  003AA8  FFFF               	dw	65535	; assembler added errata NOP
 21153  003AAA  0012               	return		;funcret
 21154  003AAC  FFFF               	dw	65535	; errata NOP
 21155  003AAE                     __end_of___ftge:
 21156                           	opt stack 0
 21157                           tosu	equ	0xFFF
 21158                           tosh	equ	0xFFE
 21159                           tosl	equ	0xFFD
 21160                           pclatu	equ	0xFFB
 21161                           pclath	equ	0xFFA
 21162                           tblptru	equ	0xFF8
 21163                           tblptrh	equ	0xFF7
 21164                           tblptrl	equ	0xFF6
 21165                           tablat	equ	0xFF5
 21166                           prodh	equ	0xFF4
 21167                           prodl	equ	0xFF3
 21168                           intcon	equ	0xFF2
 21169                           indf0	equ	0xFEF
 21170                           postinc0	equ	0xFEE
 21171                           fsr0h	equ	0xFEA
 21172                           fsr0l	equ	0xFE9
 21173                           wreg	equ	0xFE8
 21174                           postdec1	equ	0xFE5
 21175                           fsr1h	equ	0xFE2
 21176                           fsr1l	equ	0xFE1
 21177                           indf2	equ	0xFDF
 21178                           postinc2	equ	0xFDE
 21179                           postdec2	equ	0xFDD
 21180                           fsr2h	equ	0xFDA
 21181                           fsr2l	equ	0xFD9
 21182                           status	equ	0xFD8
 21183                           
 21184 ;; *************** function ___ftdiv *****************
 21185 ;; Defined at:
 21186 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 21187 ;; Parameters:    Size  Location     Type
 21188 ;;  f1              3   26[COMRAM] float 
 21189 ;;  f2              3   29[COMRAM] float 
 21190 ;; Auto vars:     Size  Location     Type
 21191 ;;  f3              3   36[COMRAM] float 
 21192 ;;  sign            1   40[COMRAM] unsigned char 
 21193 ;;  exp             1   39[COMRAM] unsigned char 
 21194 ;;  cntr            1   35[COMRAM] unsigned char 
 21195 ;; Return value:  Size  Location     Type
 21196 ;;                  3   26[COMRAM] float 
 21197 ;; Registers used:
 21198 ;;		wreg, status,2, status,0, cstack
 21199 ;; Tracked objects:
 21200 ;;		On entry : 0/0
 21201 ;;		On exit  : 0/0
 21202 ;;		Unchanged: 0/0
 21203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21204 ;;      Params:         6       0       0       0       0       0       0
 21205 ;;      Locals:         6       0       0       0       0       0       0
 21206 ;;      Temps:          3       0       0       0       0       0       0
 21207 ;;      Totals:        15       0       0       0       0       0       0
 21208 ;;Total ram usage:       15 bytes
 21209 ;; Hardware stack levels used:    1
 21210 ;; Hardware stack levels required when called:    1
 21211 ;; This function calls:
 21212 ;;		___ftpack
 21213 ;; This function is called by:
 21214 ;;		_lerTransdutor
 21215 ;;		_map
 21216 ;; This function uses a non-reentrant model
 21217 ;;
 21218                           
 21219                           	psect	text96
 21220  0033D6                     __ptext96:
 21221                           	opt stack 0
 21222  0033D6                     ___ftdiv:
 21223                           	opt stack 0
 21224  0033D6  FFFF               	dw	65535	; assembler added errata NOP
 21225                           
 21226                           ;incstack = 0
 21227  0033D8  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
 21228  0033DC  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 21229  0033DE  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 21230  0033E0  341C               	rlcf	___ftdiv@f1+1,w,c
 21231  0033E2  3621               	rlcf	??___ftdiv& (0+255),f,c
 21232  0033E4  E301               	bnc	u705_41
 21233  0033E6  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 21234  0033E8                     u705_41:
 21235  0033E8  5021               	movf	??___ftdiv,w,c
 21236  0033EA  6E28               	movwf	___ftdiv@exp,c
 21237  0033EC  5028               	movf	___ftdiv@exp,w,c
 21238  0033EE  B4D8               	btfsc	status,2,c
 21239  0033F0  D00D               	goto	i2u708_40
 21240  0033F2  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
 21241  0033F6  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 21242  0033F8  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 21243  0033FA  341F               	rlcf	___ftdiv@f2+1,w,c
 21244  0033FC  3621               	rlcf	??___ftdiv& (0+255),f,c
 21245  0033FE  E301               	bnc	u707_41
 21246  003400  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 21247  003402                     u707_41:
 21248  003402  5021               	movf	??___ftdiv,w,c
 21249  003404  6E29               	movwf	___ftdiv@sign,c
 21250  003406  5029               	movf	___ftdiv@sign,w,c
 21251  003408  A4D8               	btfss	status,2,c
 21252  00340A  D008               	goto	i2l1319
 21253  00340C                     i2u708_40:
 21254  00340C  FFFF               	dw	65535	; assembler added errata NOP
 21255  00340E  0E00               	movlw	0
 21256  003410  6E1B               	movwf	?___ftdiv,c
 21257  003412  0E00               	movlw	0
 21258  003414  6E1C               	movwf	?___ftdiv+1,c
 21259  003416  0E00               	movlw	0
 21260  003418  6E1D               	movwf	?___ftdiv+2,c
 21261  00341A  D04D               	goto	i2l6061
 21262  00341C                     i2l1319:
 21263  00341C  FFFF               	dw	65535	; assembler added errata NOP
 21264  00341E  0E00               	movlw	0
 21265  003420  6E25               	movwf	___ftdiv@f3,c
 21266  003422  0E00               	movlw	0
 21267  003424  6E26               	movwf	___ftdiv@f3+1,c
 21268  003426  0E00               	movlw	0
 21269  003428  6E27               	movwf	___ftdiv@f3+2,c
 21270  00342A  5029               	movf	___ftdiv@sign,w,c
 21271  00342C  0F89               	addlw	137
 21272  00342E  5E28               	subwf	___ftdiv@exp,f,c
 21273  003430  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
 21274  003434  5020               	movf	___ftdiv@f2+2,w,c
 21275  003436  1A29               	xorwf	___ftdiv@sign,f,c
 21276  003438  0E80               	movlw	128
 21277  00343A  1629               	andwf	___ftdiv@sign,f,c
 21278  00343C  8E1C               	bsf	___ftdiv@f1+1,7,c
 21279  00343E  0EFF               	movlw	255
 21280  003440  161B               	andwf	___ftdiv@f1,f,c
 21281  003442  0EFF               	movlw	255
 21282  003444  161C               	andwf	___ftdiv@f1+1,f,c
 21283  003446  0E00               	movlw	0
 21284  003448  161D               	andwf	___ftdiv@f1+2,f,c
 21285  00344A  8E1F               	bsf	___ftdiv@f2+1,7,c
 21286  00344C  0EFF               	movlw	255
 21287  00344E  161E               	andwf	___ftdiv@f2,f,c
 21288  003450  0EFF               	movlw	255
 21289  003452  161F               	andwf	___ftdiv@f2+1,f,c
 21290  003454  0E00               	movlw	0
 21291  003456  1620               	andwf	___ftdiv@f2+2,f,c
 21292  003458  0E18               	movlw	24
 21293  00345A  6E24               	movwf	___ftdiv@cntr,c
 21294  00345C  FFFF               	dw	65535	; assembler added errata NOP
 21295  00345E  90D8               	bcf	status,0,c
 21296  003460  3625               	rlcf	___ftdiv@f3,f,c
 21297  003462  3626               	rlcf	___ftdiv@f3+1,f,c
 21298  003464  3627               	rlcf	___ftdiv@f3+2,f,c
 21299  003466  501E               	movf	___ftdiv@f2,w,c
 21300  003468  5C1B               	subwf	___ftdiv@f1,w,c
 21301  00346A  501F               	movf	___ftdiv@f2+1,w,c
 21302  00346C  581C               	subwfb	___ftdiv@f1+1,w,c
 21303  00346E  5020               	movf	___ftdiv@f2+2,w,c
 21304  003470  581D               	subwfb	___ftdiv@f1+2,w,c
 21305  003472  A0D8               	btfss	status,0,c
 21306  003474  D007               	goto	i2l1321
 21307  003476  501E               	movf	___ftdiv@f2,w,c
 21308  003478  5E1B               	subwf	___ftdiv@f1,f,c
 21309  00347A  501F               	movf	___ftdiv@f2+1,w,c
 21310  00347C  5A1C               	subwfb	___ftdiv@f1+1,f,c
 21311  00347E  5020               	movf	___ftdiv@f2+2,w,c
 21312  003480  5A1D               	subwfb	___ftdiv@f1+2,f,c
 21313  003482  8025               	bsf	___ftdiv@f3,0,c
 21314  003484                     i2l1321:
 21315  003484  FFFF               	dw	65535	; assembler added errata NOP
 21316  003486  90D8               	bcf	status,0,c
 21317  003488  361B               	rlcf	___ftdiv@f1,f,c
 21318  00348A  361C               	rlcf	___ftdiv@f1+1,f,c
 21319  00348C  361D               	rlcf	___ftdiv@f1+2,f,c
 21320  00348E  2E24               	decfsz	___ftdiv@cntr,f,c
 21321  003490  D7E5               	goto	i2l1320
 21322  003492  C025  F001         	movff	___ftdiv@f3,___ftpack@arg
 21323  003496  C026  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 21324  00349A  C027  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 21325  00349E  C028  F004         	movff	___ftdiv@exp,___ftpack@exp
 21326  0034A2  C029  F005         	movff	___ftdiv@sign,___ftpack@sign
 21327  0034A6  ECFA  F01B         	call	___ftpack	;wreg free
 21328  0034AA  C001  F01B         	movff	?___ftpack,?___ftdiv
 21329  0034AE  C002  F01C         	movff	?___ftpack+1,?___ftdiv+1
 21330  0034B2  C003  F01D         	movff	?___ftpack+2,?___ftdiv+2
 21331  0034B6                     i2l6061:
 21332  0034B6  FFFF               	dw	65535	; assembler added errata NOP
 21333  0034B8  0012               	return		;funcret
 21334  0034BA  FFFF               	dw	65535	; errata NOP
 21335  0034BC                     __end_of___ftdiv:
 21336                           	opt stack 0
 21337                           tosu	equ	0xFFF
 21338                           tosh	equ	0xFFE
 21339                           tosl	equ	0xFFD
 21340                           pclatu	equ	0xFFB
 21341                           pclath	equ	0xFFA
 21342                           tblptru	equ	0xFF8
 21343                           tblptrh	equ	0xFF7
 21344                           tblptrl	equ	0xFF6
 21345                           tablat	equ	0xFF5
 21346                           prodh	equ	0xFF4
 21347                           prodl	equ	0xFF3
 21348                           intcon	equ	0xFF2
 21349                           indf0	equ	0xFEF
 21350                           postinc0	equ	0xFEE
 21351                           fsr0h	equ	0xFEA
 21352                           fsr0l	equ	0xFE9
 21353                           wreg	equ	0xFE8
 21354                           postdec1	equ	0xFE5
 21355                           fsr1h	equ	0xFE2
 21356                           fsr1l	equ	0xFE1
 21357                           indf2	equ	0xFDF
 21358                           postinc2	equ	0xFDE
 21359                           postdec2	equ	0xFDD
 21360                           fsr2h	equ	0xFDA
 21361                           fsr2l	equ	0xFD9
 21362                           status	equ	0xFD8
 21363                           
 21364 ;; *************** function ___ftadd *****************
 21365 ;; Defined at:
 21366 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 21367 ;; Parameters:    Size  Location     Type
 21368 ;;  f1              3   26[COMRAM] float 
 21369 ;;  f2              3   29[COMRAM] float 
 21370 ;; Auto vars:     Size  Location     Type
 21371 ;;  exp1            1   37[COMRAM] unsigned char 
 21372 ;;  exp2            1   36[COMRAM] unsigned char 
 21373 ;;  sign            1   35[COMRAM] unsigned char 
 21374 ;; Return value:  Size  Location     Type
 21375 ;;                  3   26[COMRAM] float 
 21376 ;; Registers used:
 21377 ;;		wreg, status,2, status,0, cstack
 21378 ;; Tracked objects:
 21379 ;;		On entry : 0/0
 21380 ;;		On exit  : 0/0
 21381 ;;		Unchanged: 0/0
 21382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21383 ;;      Params:         6       0       0       0       0       0       0
 21384 ;;      Locals:         3       0       0       0       0       0       0
 21385 ;;      Temps:          3       0       0       0       0       0       0
 21386 ;;      Totals:        12       0       0       0       0       0       0
 21387 ;;Total ram usage:       12 bytes
 21388 ;; Hardware stack levels used:    1
 21389 ;; Hardware stack levels required when called:    1
 21390 ;; This function calls:
 21391 ;;		___ftpack
 21392 ;; This function is called by:
 21393 ;;		_lerTransdutor
 21394 ;;		_map
 21395 ;; This function uses a non-reentrant model
 21396 ;;
 21397                           
 21398                           	psect	text97
 21399  0024E4                     __ptext97:
 21400                           	opt stack 0
 21401  0024E4                     ___ftadd:
 21402                           	opt stack 0
 21403  0024E4  FFFF               	dw	65535	; assembler added errata NOP
 21404                           
 21405                           ;incstack = 0
 21406  0024E6  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
 21407  0024EA  6A22               	clrf	(??___ftadd+1)& (0+255),c
 21408  0024EC  6A23               	clrf	(??___ftadd+2)& (0+255),c
 21409  0024EE  341C               	rlcf	___ftadd@f1+1,w,c
 21410  0024F0  3621               	rlcf	??___ftadd& (0+255),f,c
 21411  0024F2  E301               	bnc	u684_41
 21412  0024F4  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 21413  0024F6                     u684_41:
 21414  0024F6  5021               	movf	??___ftadd,w,c
 21415  0024F8  6E26               	movwf	___ftadd@exp1,c
 21416  0024FA  C020  F021         	movff	___ftadd@f2+2,??___ftadd
 21417  0024FE  6A22               	clrf	(??___ftadd+1)& (0+255),c
 21418  002500  6A23               	clrf	(??___ftadd+2)& (0+255),c
 21419  002502  341F               	rlcf	___ftadd@f2+1,w,c
 21420  002504  3621               	rlcf	??___ftadd& (0+255),f,c
 21421  002506  E301               	bnc	u685_41
 21422  002508  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 21423  00250A                     u685_41:
 21424  00250A  5021               	movf	??___ftadd,w,c
 21425  00250C  6E25               	movwf	___ftadd@exp2,c
 21426  00250E  5026               	movf	___ftadd@exp1,w,c
 21427  002510  B4D8               	btfsc	status,2,c
 21428  002512  D00B               	goto	i2u688_40
 21429  002514  5025               	movf	___ftadd@exp2,w,c
 21430  002516  5C26               	subwf	___ftadd@exp1,w,c
 21431  002518  B0D8               	btfsc	status,0,c
 21432  00251A  D00F               	goto	i2l1284
 21433  00251C  5026               	movf	___ftadd@exp1,w,c
 21434  00251E  0800               	sublw	0
 21435  002520  2425               	addwf	___ftadd@exp2,w,c
 21436  002522  6E21               	movwf	??___ftadd& (0+255),c
 21437  002524  0E18               	movlw	24
 21438  002526  6421               	cpfsgt	??___ftadd,c
 21439  002528  D008               	goto	i2l1284
 21440  00252A                     i2u688_40:
 21441  00252A  FFFF               	dw	65535	; assembler added errata NOP
 21442  00252C  C01E  F01B         	movff	___ftadd@f2,?___ftadd
 21443  002530  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
 21444  002534  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
 21445  002538  D0BA               	goto	i2l6015
 21446  00253A                     i2l1284:
 21447  00253A  FFFF               	dw	65535	; assembler added errata NOP
 21448  00253C  5025               	movf	___ftadd@exp2,w,c
 21449  00253E  B4D8               	btfsc	status,2,c
 21450  002540  D00B               	goto	i2u691_40
 21451  002542  5026               	movf	___ftadd@exp1,w,c
 21452  002544  5C25               	subwf	___ftadd@exp2,w,c
 21453  002546  B0D8               	btfsc	status,0,c
 21454  002548  D00F               	goto	i2l1288
 21455  00254A  5025               	movf	___ftadd@exp2,w,c
 21456  00254C  0800               	sublw	0
 21457  00254E  2426               	addwf	___ftadd@exp1,w,c
 21458  002550  6E21               	movwf	??___ftadd& (0+255),c
 21459  002552  0E18               	movlw	24
 21460  002554  6421               	cpfsgt	??___ftadd,c
 21461  002556  D008               	goto	i2l1288
 21462  002558                     i2u691_40:
 21463  002558  FFFF               	dw	65535	; assembler added errata NOP
 21464  00255A  C01B  F01B         	movff	___ftadd@f1,?___ftadd
 21465  00255E  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
 21466  002562  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
 21467  002566  D0A3               	goto	i2l6015
 21468  002568                     i2l1288:
 21469  002568  FFFF               	dw	65535	; assembler added errata NOP
 21470  00256A  0E06               	movlw	6
 21471  00256C  6E24               	movwf	___ftadd@sign,c
 21472  00256E  BE1D               	btfsc	___ftadd@f1+2,7,c
 21473  002570  8E24               	bsf	___ftadd@sign,7,c
 21474  002572  BE20               	btfsc	___ftadd@f2+2,7,c
 21475  002574  8C24               	bsf	___ftadd@sign,6,c
 21476  002576  8E1C               	bsf	___ftadd@f1+1,7,c
 21477  002578  0EFF               	movlw	255
 21478  00257A  161B               	andwf	___ftadd@f1,f,c
 21479  00257C  0EFF               	movlw	255
 21480  00257E  161C               	andwf	___ftadd@f1+1,f,c
 21481  002580  0E00               	movlw	0
 21482  002582  161D               	andwf	___ftadd@f1+2,f,c
 21483  002584  8E1F               	bsf	___ftadd@f2+1,7,c
 21484  002586  0EFF               	movlw	255
 21485  002588  161E               	andwf	___ftadd@f2,f,c
 21486  00258A  0EFF               	movlw	255
 21487  00258C  161F               	andwf	___ftadd@f2+1,f,c
 21488  00258E  0E00               	movlw	0
 21489  002590  1620               	andwf	___ftadd@f2+2,f,c
 21490  002592  5025               	movf	___ftadd@exp2,w,c
 21491  002594  5C26               	subwf	___ftadd@exp1,w,c
 21492  002596  B0D8               	btfsc	status,0,c
 21493  002598  D01E               	goto	i2l1293
 21494  00259A                     i2u694_40:
 21495  00259A  FFFF               	dw	65535	; assembler added errata NOP
 21496  00259C  90D8               	bcf	status,0,c
 21497  00259E  361E               	rlcf	___ftadd@f2,f,c
 21498  0025A0  361F               	rlcf	___ftadd@f2+1,f,c
 21499  0025A2  3620               	rlcf	___ftadd@f2+2,f,c
 21500  0025A4  0625               	decf	___ftadd@exp2,f,c
 21501  0025A6  5026               	movf	___ftadd@exp1,w,c
 21502  0025A8  1825               	xorwf	___ftadd@exp2,w,c
 21503  0025AA  B4D8               	btfsc	status,2,c
 21504  0025AC  D00E               	goto	i2l1298
 21505  0025AE  0624               	decf	___ftadd@sign,f,c
 21506  0025B0  C024  F021         	movff	___ftadd@sign,??___ftadd
 21507  0025B4  0E07               	movlw	7
 21508  0025B6  1621               	andwf	??___ftadd,f,c
 21509  0025B8  B4D8               	btfsc	status,2,c
 21510  0025BA  D007               	goto	i2l1298
 21511  0025BC  D7EE               	goto	i2u694_40
 21512  0025BE  FFFF               	dw	65535	; assembler added errata NOP
 21513  0025C0  90D8               	bcf	status,0,c
 21514  0025C2  321D               	rrcf	___ftadd@f1+2,f,c
 21515  0025C4  321C               	rrcf	___ftadd@f1+1,f,c
 21516  0025C6  321B               	rrcf	___ftadd@f1,f,c
 21517  0025C8  2A26               	incf	___ftadd@exp1,f,c
 21518  0025CA                     i2l1298:
 21519  0025CA  FFFF               	dw	65535	; assembler added errata NOP
 21520  0025CC  5025               	movf	___ftadd@exp2,w,c
 21521  0025CE  1826               	xorwf	___ftadd@exp1,w,c
 21522  0025D0  B4D8               	btfsc	status,2,c
 21523  0025D2  D023               	goto	i2u701_40
 21524  0025D4  D7F4               	goto	i2l1299
 21525  0025D6                     i2l1293:
 21526  0025D6  FFFF               	dw	65535	; assembler added errata NOP
 21527  0025D8  5026               	movf	___ftadd@exp1,w,c
 21528  0025DA  5C25               	subwf	___ftadd@exp2,w,c
 21529  0025DC  B0D8               	btfsc	status,0,c
 21530  0025DE  D01D               	goto	i2u701_40
 21531  0025E0                     i2u698_40:
 21532  0025E0  FFFF               	dw	65535	; assembler added errata NOP
 21533  0025E2  90D8               	bcf	status,0,c
 21534  0025E4  361B               	rlcf	___ftadd@f1,f,c
 21535  0025E6  361C               	rlcf	___ftadd@f1+1,f,c
 21536  0025E8  361D               	rlcf	___ftadd@f1+2,f,c
 21537  0025EA  0626               	decf	___ftadd@exp1,f,c
 21538  0025EC  5026               	movf	___ftadd@exp1,w,c
 21539  0025EE  1825               	xorwf	___ftadd@exp2,w,c
 21540  0025F0  B4D8               	btfsc	status,2,c
 21541  0025F2  D00E               	goto	i2l1307
 21542  0025F4  0624               	decf	___ftadd@sign,f,c
 21543  0025F6  C024  F021         	movff	___ftadd@sign,??___ftadd
 21544  0025FA  0E07               	movlw	7
 21545  0025FC  1621               	andwf	??___ftadd,f,c
 21546  0025FE  B4D8               	btfsc	status,2,c
 21547  002600  D007               	goto	i2l1307
 21548  002602  D7EE               	goto	i2u698_40
 21549  002604  FFFF               	dw	65535	; assembler added errata NOP
 21550  002606  90D8               	bcf	status,0,c
 21551  002608  3220               	rrcf	___ftadd@f2+2,f,c
 21552  00260A  321F               	rrcf	___ftadd@f2+1,f,c
 21553  00260C  321E               	rrcf	___ftadd@f2,f,c
 21554  00260E  2A25               	incf	___ftadd@exp2,f,c
 21555  002610                     i2l1307:
 21556  002610  FFFF               	dw	65535	; assembler added errata NOP
 21557  002612  5025               	movf	___ftadd@exp2,w,c
 21558  002614  1826               	xorwf	___ftadd@exp1,w,c
 21559  002616  A4D8               	btfss	status,2,c
 21560  002618  D7F5               	goto	i2l1308
 21561  00261A                     i2u701_40:
 21562  00261A  FFFF               	dw	65535	; assembler added errata NOP
 21563  00261C  AE24               	btfss	___ftadd@sign,7,c
 21564  00261E  D00C               	goto	i2l1310
 21565  002620  0EFF               	movlw	255
 21566  002622  1A1B               	xorwf	___ftadd@f1,f,c
 21567  002624  0EFF               	movlw	255
 21568  002626  1A1C               	xorwf	___ftadd@f1+1,f,c
 21569  002628  0EFF               	movlw	255
 21570  00262A  1A1D               	xorwf	___ftadd@f1+2,f,c
 21571  00262C  0E01               	movlw	1
 21572  00262E  261B               	addwf	___ftadd@f1,f,c
 21573  002630  0E00               	movlw	0
 21574  002632  221C               	addwfc	___ftadd@f1+1,f,c
 21575  002634  0E00               	movlw	0
 21576  002636  221D               	addwfc	___ftadd@f1+2,f,c
 21577  002638                     i2l1310:
 21578  002638  FFFF               	dw	65535	; assembler added errata NOP
 21579  00263A  AC24               	btfss	___ftadd@sign,6,c
 21580  00263C  D00C               	goto	i2l1311
 21581  00263E  0EFF               	movlw	255
 21582  002640  1A1E               	xorwf	___ftadd@f2,f,c
 21583  002642  0EFF               	movlw	255
 21584  002644  1A1F               	xorwf	___ftadd@f2+1,f,c
 21585  002646  0EFF               	movlw	255
 21586  002648  1A20               	xorwf	___ftadd@f2+2,f,c
 21587  00264A  0E01               	movlw	1
 21588  00264C  261E               	addwf	___ftadd@f2,f,c
 21589  00264E  0E00               	movlw	0
 21590  002650  221F               	addwfc	___ftadd@f2+1,f,c
 21591  002652  0E00               	movlw	0
 21592  002654  2220               	addwfc	___ftadd@f2+2,f,c
 21593  002656                     i2l1311:
 21594  002656  FFFF               	dw	65535	; assembler added errata NOP
 21595  002658  0E00               	movlw	0
 21596  00265A  6E24               	movwf	___ftadd@sign,c
 21597  00265C  501B               	movf	___ftadd@f1,w,c
 21598  00265E  261E               	addwf	___ftadd@f2,f,c
 21599  002660  501C               	movf	___ftadd@f1+1,w,c
 21600  002662  221F               	addwfc	___ftadd@f2+1,f,c
 21601  002664  501D               	movf	___ftadd@f1+2,w,c
 21602  002666  2220               	addwfc	___ftadd@f2+2,f,c
 21603  002668  AE20               	btfss	___ftadd@f2+2,7,c
 21604  00266A  D00E               	goto	i2l1312
 21605  00266C  0EFF               	movlw	255
 21606  00266E  1A1E               	xorwf	___ftadd@f2,f,c
 21607  002670  0EFF               	movlw	255
 21608  002672  1A1F               	xorwf	___ftadd@f2+1,f,c
 21609  002674  0EFF               	movlw	255
 21610  002676  1A20               	xorwf	___ftadd@f2+2,f,c
 21611  002678  0E01               	movlw	1
 21612  00267A  261E               	addwf	___ftadd@f2,f,c
 21613  00267C  0E00               	movlw	0
 21614  00267E  221F               	addwfc	___ftadd@f2+1,f,c
 21615  002680  0E00               	movlw	0
 21616  002682  2220               	addwfc	___ftadd@f2+2,f,c
 21617  002684  0E01               	movlw	1
 21618  002686  6E24               	movwf	___ftadd@sign,c
 21619  002688                     i2l1312:
 21620  002688  FFFF               	dw	65535	; assembler added errata NOP
 21621  00268A  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
 21622  00268E  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 21623  002692  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 21624  002696  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
 21625  00269A  C024  F005         	movff	___ftadd@sign,___ftpack@sign
 21626  00269E  ECFA  F01B         	call	___ftpack	;wreg free
 21627  0026A2  C001  F01B         	movff	?___ftpack,?___ftadd
 21628  0026A6  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
 21629  0026AA  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
 21630  0026AE                     i2l6015:
 21631  0026AE  FFFF               	dw	65535	; assembler added errata NOP
 21632  0026B0  0012               	return		;funcret
 21633  0026B2  FFFF               	dw	65535	; errata NOP
 21634  0026B4                     __end_of___ftadd:
 21635                           	opt stack 0
 21636                           tosu	equ	0xFFF
 21637                           tosh	equ	0xFFE
 21638                           tosl	equ	0xFFD
 21639                           pclatu	equ	0xFFB
 21640                           pclath	equ	0xFFA
 21641                           tblptru	equ	0xFF8
 21642                           tblptrh	equ	0xFF7
 21643                           tblptrl	equ	0xFF6
 21644                           tablat	equ	0xFF5
 21645                           prodh	equ	0xFF4
 21646                           prodl	equ	0xFF3
 21647                           intcon	equ	0xFF2
 21648                           indf0	equ	0xFEF
 21649                           postinc0	equ	0xFEE
 21650                           fsr0h	equ	0xFEA
 21651                           fsr0l	equ	0xFE9
 21652                           wreg	equ	0xFE8
 21653                           postdec1	equ	0xFE5
 21654                           fsr1h	equ	0xFE2
 21655                           fsr1l	equ	0xFE1
 21656                           indf2	equ	0xFDF
 21657                           postinc2	equ	0xFDE
 21658                           postdec2	equ	0xFDD
 21659                           fsr2h	equ	0xFDA
 21660                           fsr2l	equ	0xFD9
 21661                           status	equ	0xFD8
 21662                           
 21663 ;; *************** function ___ftpack *****************
 21664 ;; Defined at:
 21665 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 21666 ;; Parameters:    Size  Location     Type
 21667 ;;  arg             3    0[COMRAM] unsigned um
 21668 ;;  exp             1    3[COMRAM] unsigned char 
 21669 ;;  sign            1    4[COMRAM] unsigned char 
 21670 ;; Auto vars:     Size  Location     Type
 21671 ;;		None
 21672 ;; Return value:  Size  Location     Type
 21673 ;;                  3    0[COMRAM] float 
 21674 ;; Registers used:
 21675 ;;		wreg, status,2, status,0
 21676 ;; Tracked objects:
 21677 ;;		On entry : 0/0
 21678 ;;		On exit  : 0/0
 21679 ;;		Unchanged: 0/0
 21680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21681 ;;      Params:         5       0       0       0       0       0       0
 21682 ;;      Locals:         0       0       0       0       0       0       0
 21683 ;;      Temps:          3       0       0       0       0       0       0
 21684 ;;      Totals:         8       0       0       0       0       0       0
 21685 ;;Total ram usage:        8 bytes
 21686 ;; Hardware stack levels used:    1
 21687 ;; This function calls:
 21688 ;;		Nothing
 21689 ;; This function is called by:
 21690 ;;		___ftadd
 21691 ;;		___ftdiv
 21692 ;;		___ftmul
 21693 ;;		___lwtoft
 21694 ;; This function uses a non-reentrant model
 21695 ;;
 21696                           
 21697                           	psect	text98
 21698  0037F4                     __ptext98:
 21699                           	opt stack 0
 21700  0037F4                     ___ftpack:
 21701                           	opt stack 0
 21702  0037F4  FFFF               	dw	65535	; assembler added errata NOP
 21703                           
 21704                           ;incstack = 0
 21705  0037F6  5004               	movf	___ftpack@exp,w,c
 21706  0037F8  B4D8               	btfsc	status,2,c
 21707  0037FA  D005               	goto	i2u582_40
 21708  0037FC  5001               	movf	___ftpack@arg,w,c
 21709  0037FE  1002               	iorwf	___ftpack@arg+1,w,c
 21710  003800  1003               	iorwf	___ftpack@arg+2,w,c
 21711  003802  A4D8               	btfss	status,2,c
 21712  003804  D00E               	goto	i2l1253
 21713  003806                     i2u582_40:
 21714  003806  FFFF               	dw	65535	; assembler added errata NOP
 21715  003808  0E00               	movlw	0
 21716  00380A  6E01               	movwf	?___ftpack,c
 21717  00380C  0E00               	movlw	0
 21718  00380E  6E02               	movwf	?___ftpack+1,c
 21719  003810  0E00               	movlw	0
 21720  003812  6E03               	movwf	?___ftpack+2,c
 21721  003814  D04E               	goto	i2l5411
 21722  003816  FFFF               	dw	65535	; assembler added errata NOP
 21723  003818  2A04               	incf	___ftpack@exp,f,c
 21724  00381A  90D8               	bcf	status,0,c
 21725  00381C  3203               	rrcf	___ftpack@arg+2,f,c
 21726  00381E  3202               	rrcf	___ftpack@arg+1,f,c
 21727  003820  3201               	rrcf	___ftpack@arg,f,c
 21728  003822                     i2l1253:
 21729  003822  FFFF               	dw	65535	; assembler added errata NOP
 21730  003824  0E00               	movlw	0
 21731  003826  1401               	andwf	___ftpack@arg,w,c
 21732  003828  6E06               	movwf	??___ftpack& (0+255),c
 21733  00382A  0E00               	movlw	0
 21734  00382C  1402               	andwf	___ftpack@arg+1,w,c
 21735  00382E  6E07               	movwf	(??___ftpack+1)& (0+255),c
 21736  003830  0EFE               	movlw	254
 21737  003832  1403               	andwf	___ftpack@arg+2,w,c
 21738  003834  6E08               	movwf	(??___ftpack+2)& (0+255),c
 21739  003836  5006               	movf	??___ftpack,w,c
 21740  003838  1007               	iorwf	??___ftpack+1,w,c
 21741  00383A  1008               	iorwf	??___ftpack+2,w,c
 21742  00383C  B4D8               	btfsc	status,2,c
 21743  00383E  D00D               	goto	i2l1256
 21744  003840  D7EA               	goto	i2l1254
 21745  003842  FFFF               	dw	65535	; assembler added errata NOP
 21746  003844  2A04               	incf	___ftpack@exp,f,c
 21747  003846  0E01               	movlw	1
 21748  003848  2601               	addwf	___ftpack@arg,f,c
 21749  00384A  0E00               	movlw	0
 21750  00384C  2202               	addwfc	___ftpack@arg+1,f,c
 21751  00384E  0E00               	movlw	0
 21752  003850  2203               	addwfc	___ftpack@arg+2,f,c
 21753  003852  90D8               	bcf	status,0,c
 21754  003854  3203               	rrcf	___ftpack@arg+2,f,c
 21755  003856  3202               	rrcf	___ftpack@arg+1,f,c
 21756  003858  3201               	rrcf	___ftpack@arg,f,c
 21757  00385A                     i2l1256:
 21758  00385A  FFFF               	dw	65535	; assembler added errata NOP
 21759  00385C  0E00               	movlw	0
 21760  00385E  1401               	andwf	___ftpack@arg,w,c
 21761  003860  6E06               	movwf	??___ftpack& (0+255),c
 21762  003862  0E00               	movlw	0
 21763  003864  1402               	andwf	___ftpack@arg+1,w,c
 21764  003866  6E07               	movwf	(??___ftpack+1)& (0+255),c
 21765  003868  0EFF               	movlw	255
 21766  00386A  1403               	andwf	___ftpack@arg+2,w,c
 21767  00386C  6E08               	movwf	(??___ftpack+2)& (0+255),c
 21768  00386E  5006               	movf	??___ftpack,w,c
 21769  003870  1007               	iorwf	??___ftpack+1,w,c
 21770  003872  1008               	iorwf	??___ftpack+2,w,c
 21771  003874  B4D8               	btfsc	status,2,c
 21772  003876  D007               	goto	i2l1259
 21773  003878  D7E4               	goto	i2l1257
 21774  00387A  FFFF               	dw	65535	; assembler added errata NOP
 21775  00387C  0604               	decf	___ftpack@exp,f,c
 21776  00387E  90D8               	bcf	status,0,c
 21777  003880  3601               	rlcf	___ftpack@arg,f,c
 21778  003882  3602               	rlcf	___ftpack@arg+1,f,c
 21779  003884  3603               	rlcf	___ftpack@arg+2,f,c
 21780  003886                     i2l1259:
 21781  003886  FFFF               	dw	65535	; assembler added errata NOP
 21782  003888  BE02               	btfsc	___ftpack@arg+1,7,c
 21783  00388A  D003               	goto	i2u586_40
 21784  00388C  0E02               	movlw	2
 21785  00388E  6004               	cpfslt	___ftpack@exp,c
 21786  003890  D7F4               	goto	i2l1260
 21787  003892                     i2u586_40:
 21788  003892  FFFF               	dw	65535	; assembler added errata NOP
 21789  003894  A004               	btfss	___ftpack@exp,0,c
 21790  003896  9E02               	bcf	___ftpack@arg+1,7,c
 21791  003898  90D8               	bcf	status,0,c
 21792  00389A  3204               	rrcf	___ftpack@exp,f,c
 21793  00389C  5004               	movf	___ftpack@exp,w,c
 21794  00389E  1203               	iorwf	___ftpack@arg+2,f,c
 21795  0038A0  5005               	movf	___ftpack@sign,w,c
 21796  0038A2  A4D8               	btfss	status,2,c
 21797  0038A4  8E03               	bsf	___ftpack@arg+2,7,c
 21798  0038A6  C001  F001         	movff	___ftpack@arg,?___ftpack
 21799  0038AA  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 21800  0038AE  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 21801  0038B2                     i2l5411:
 21802  0038B2  FFFF               	dw	65535	; assembler added errata NOP
 21803  0038B4  0012               	return		;funcret
 21804  0038B6  FFFF               	dw	65535	; errata NOP
 21805  0038B8                     __end_of___ftpack:
 21806                           	opt stack 0
 21807                           tosu	equ	0xFFF
 21808                           tosh	equ	0xFFE
 21809                           tosl	equ	0xFFD
 21810                           pclatu	equ	0xFFB
 21811                           pclath	equ	0xFFA
 21812                           tblptru	equ	0xFF8
 21813                           tblptrh	equ	0xFF7
 21814                           tblptrl	equ	0xFF6
 21815                           tablat	equ	0xFF5
 21816                           prodh	equ	0xFF4
 21817                           prodl	equ	0xFF3
 21818                           intcon	equ	0xFF2
 21819                           indf0	equ	0xFEF
 21820                           postinc0	equ	0xFEE
 21821                           fsr0h	equ	0xFEA
 21822                           fsr0l	equ	0xFE9
 21823                           wreg	equ	0xFE8
 21824                           postdec1	equ	0xFE5
 21825                           fsr1h	equ	0xFE2
 21826                           fsr1l	equ	0xFE1
 21827                           indf2	equ	0xFDF
 21828                           postinc2	equ	0xFDE
 21829                           postdec2	equ	0xFDD
 21830                           fsr2h	equ	0xFDA
 21831                           fsr2l	equ	0xFD9
 21832                           status	equ	0xFD8
 21833                           tosu	equ	0xFFF
 21834                           tosh	equ	0xFFE
 21835                           tosl	equ	0xFFD
 21836                           pclatu	equ	0xFFB
 21837                           pclath	equ	0xFFA
 21838                           tblptru	equ	0xFF8
 21839                           tblptrh	equ	0xFF7
 21840                           tblptrl	equ	0xFF6
 21841                           tablat	equ	0xFF5
 21842                           prodh	equ	0xFF4
 21843                           prodl	equ	0xFF3
 21844                           intcon	equ	0xFF2
 21845                           indf0	equ	0xFEF
 21846                           postinc0	equ	0xFEE
 21847                           fsr0h	equ	0xFEA
 21848                           fsr0l	equ	0xFE9
 21849                           wreg	equ	0xFE8
 21850                           postdec1	equ	0xFE5
 21851                           fsr1h	equ	0xFE2
 21852                           fsr1l	equ	0xFE1
 21853                           indf2	equ	0xFDF
 21854                           postinc2	equ	0xFDE
 21855                           postdec2	equ	0xFDD
 21856                           fsr2h	equ	0xFDA
 21857                           fsr2l	equ	0xFD9
 21858                           status	equ	0xFD8
 21859                           
 21860                           	psect	text99
 21861  000000                     __ptext99:
 21862                           	opt stack 0
 21863                           tosu	equ	0xFFF
 21864                           tosh	equ	0xFFE
 21865                           tosl	equ	0xFFD
 21866                           pclatu	equ	0xFFB
 21867                           pclath	equ	0xFFA
 21868                           tblptru	equ	0xFF8
 21869                           tblptrh	equ	0xFF7
 21870                           tblptrl	equ	0xFF6
 21871                           tablat	equ	0xFF5
 21872                           prodh	equ	0xFF4
 21873                           prodl	equ	0xFF3
 21874                           intcon	equ	0xFF2
 21875                           indf0	equ	0xFEF
 21876                           postinc0	equ	0xFEE
 21877                           fsr0h	equ	0xFEA
 21878                           fsr0l	equ	0xFE9
 21879                           wreg	equ	0xFE8
 21880                           postdec1	equ	0xFE5
 21881                           fsr1h	equ	0xFE2
 21882                           fsr1l	equ	0xFE1
 21883                           indf2	equ	0xFDF
 21884                           postinc2	equ	0xFDE
 21885                           postdec2	equ	0xFDD
 21886                           fsr2h	equ	0xFDA
 21887                           fsr2l	equ	0xFD9
 21888                           status	equ	0xFD8
 21889                           
 21890                           	psect	rparam
 21891  0000                     tosu	equ	0xFFF
 21892                           tosh	equ	0xFFE
 21893                           tosl	equ	0xFFD
 21894                           pclatu	equ	0xFFB
 21895                           pclath	equ	0xFFA
 21896                           tblptru	equ	0xFF8
 21897                           tblptrh	equ	0xFF7
 21898                           tblptrl	equ	0xFF6
 21899                           tablat	equ	0xFF5
 21900                           prodh	equ	0xFF4
 21901                           prodl	equ	0xFF3
 21902                           intcon	equ	0xFF2
 21903                           indf0	equ	0xFEF
 21904                           postinc0	equ	0xFEE
 21905                           fsr0h	equ	0xFEA
 21906                           fsr0l	equ	0xFE9
 21907                           wreg	equ	0xFE8
 21908                           postdec1	equ	0xFE5
 21909                           fsr1h	equ	0xFE2
 21910                           fsr1l	equ	0xFE1
 21911                           indf2	equ	0xFDF
 21912                           postinc2	equ	0xFDE
 21913                           postdec2	equ	0xFDD
 21914                           fsr2h	equ	0xFDA
 21915                           fsr2l	equ	0xFD9
 21916                           status	equ	0xFD8
 21917                           
 21918                           	psect	temp
 21919  000074                     btemp:
 21920                           	opt stack 0
 21921  000074                     	ds	1
 21922  0000                     int$flags	set	btemp
 21923  0000                     wtemp6	set	btemp+1
 21924                           tosu	equ	0xFFF
 21925                           tosh	equ	0xFFE
 21926                           tosl	equ	0xFFD
 21927                           pclatu	equ	0xFFB
 21928                           pclath	equ	0xFFA
 21929                           tblptru	equ	0xFF8
 21930                           tblptrh	equ	0xFF7
 21931                           tblptrl	equ	0xFF6
 21932                           tablat	equ	0xFF5
 21933                           prodh	equ	0xFF4
 21934                           prodl	equ	0xFF3
 21935                           intcon	equ	0xFF2
 21936                           indf0	equ	0xFEF
 21937                           postinc0	equ	0xFEE
 21938                           fsr0h	equ	0xFEA
 21939                           fsr0l	equ	0xFE9
 21940                           wreg	equ	0xFE8
 21941                           postdec1	equ	0xFE5
 21942                           fsr1h	equ	0xFE2
 21943                           fsr1l	equ	0xFE1
 21944                           indf2	equ	0xFDF
 21945                           postinc2	equ	0xFDE
 21946                           postdec2	equ	0xFDD
 21947                           fsr2h	equ	0xFDA
 21948                           fsr2l	equ	0xFD9
 21949                           status	equ	0xFD8


Data Sizes:
    Strings     1052
    Constant    42
    Data        12
    BSS         307
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     67     115
    BANK0           128     84     128
    BANK1           256      0     228
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ajusteSP_Bombas$2320	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    acaoTesteBombas$2319	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_87(CODE[7]), STR_86(CODE[7]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), bufferSerial(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), bufferSerial(BANK1[80]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), bufferSerial(BANK1[80]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_87(CODE[7]), STR_86(CODE[7]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), bufferSerial(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_87(CODE[7]), STR_86(CODE[7]), NULL(NULL[0]), bufferSerial(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_87(CODE[7]), STR_86(CODE[7]), NULL(NULL[0]), bufferSerial(BANK1[80]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> intToFloatStr@conv(BANK0[4]), STR_96(CODE[15]), STR_95(CODE[12]), STR_94(CODE[10]), 
		 -> STR_93(CODE[13]), STR_92(CODE[14]), STR_91(CODE[17]), STR_90(CODE[15]), 
		 -> STR_89(CODE[13]), STR_88(CODE[10]), STR_84(CODE[11]), STR_83(CODE[15]), 
		 -> STR_82(CODE[15]), STR_81(CODE[11]), STR_80(CODE[11]), STR_79(CODE[19]), 
		 -> STR_78(CODE[5]), STR_77(CODE[12]), STR_76(CODE[5]), STR_75(CODE[14]), 
		 -> STR_74(CODE[19]), STR_71(CODE[8]), STR_68(CODE[3]), STR_67(CODE[7]), 
		 -> STR_66(CODE[7]), STR_64(CODE[12]), STR_63(CODE[17]), STR_62(CODE[19]), 
		 -> STR_59(CODE[16]), STR_56(CODE[16]), STR_53(CODE[12]), STR_52(CODE[25]), 
		 -> STR_51(CODE[20]), STR_50(CODE[20]), STR_49(CODE[21]), STR_48(CODE[15]), 
		 -> STR_47(CODE[6]), STR_46(CODE[15]), STR_45(CODE[6]), STR_44(CODE[31]), 
		 -> STR_43(CODE[20]), STR_42(CODE[19]), STR_41(CODE[16]), STR_40(CODE[14]), 
		 -> STR_39(CODE[17]), STR_38(CODE[16]), STR_37(CODE[15]), STR_36(CODE[17]), 
		 -> STR_35(CODE[16]), STR_34(CODE[19]), STR_33(CODE[20]), STR_30(CODE[16]), 
		 -> STR_27(CODE[16]), STR_24(CODE[12]), STR_23(CODE[19]), STR_22(CODE[16]), 
		 -> STR_21(CODE[20]), STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_sprintf(COMRAM[2]), ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 80
		 -> intToFloatStr@end(BANK0[4]), line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), 
		 -> line1(BANK1[21]), bufferAUX(BANK1[20]), bufferSerial(BANK1[80]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> intToFloatStr@end(BANK0[4]), line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), 
		 -> line1(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), bufferSerial(BANK1[80]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 104
		 -> STR_85(CODE[9]), STR_20(CODE[7]), STR_19(CODE[11]), STR_12(CODE[104]), 
		 -> STR_11(CODE[63]), STR_9(CODE[18]), STR_7(CODE[12]), STR_6(CODE[7]), 
		 -> STR_4(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> intToFloatStr@end(BANK0[4]), line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), 
		 -> line1(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), bufferSerial(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), STR_97(CODE[7]), _doprnt@c(BANK0[1]), 
		 -> intToFloatStr@end(BANK0[4]), STR_73(CODE[5]), STR_72(CODE[5]), STR_70(CODE[17]), 
		 -> STR_69(CODE[17]), STR_65(CODE[12]), STR_61(CODE[5]), STR_60(CODE[3]), 
		 -> STR_58(CODE[5]), STR_57(CODE[3]), STR_55(CODE[5]), STR_54(CODE[3]), 
		 -> STR_32(CODE[5]), STR_31(CODE[3]), line4(BANK1[21]), STR_29(CODE[5]), 
		 -> STR_28(CODE[3]), line3(BANK1[21]), STR_26(CODE[5]), STR_25(CODE[3]), 
		 -> line2(BANK1[21]), line1(BANK1[21]), STR_18(CODE[6]), STR_17(CODE[3]), 
		 -> STR_16(CODE[6]), STR_15(CODE[3]), STR_14(CODE[6]), STR_13(CODE[3]), 
		 -> tel2(BANK1[12]), tel1(BANK1[12]), bufferAUX(BANK1[20]), NULL(NULL[0]), 
		 -> bufferSerial(BANK1[80]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 104
		 -> intToFloatStr@conv(BANK0[4]), STR_96(CODE[15]), STR_95(CODE[12]), STR_94(CODE[10]), 
		 -> STR_93(CODE[13]), STR_92(CODE[14]), STR_91(CODE[17]), STR_90(CODE[15]), 
		 -> STR_89(CODE[13]), STR_88(CODE[10]), STR_85(CODE[9]), STR_84(CODE[11]), 
		 -> STR_83(CODE[15]), STR_82(CODE[15]), STR_81(CODE[11]), STR_80(CODE[11]), 
		 -> STR_79(CODE[19]), STR_78(CODE[5]), STR_77(CODE[12]), STR_76(CODE[5]), 
		 -> STR_75(CODE[14]), STR_74(CODE[19]), STR_71(CODE[8]), STR_68(CODE[3]), 
		 -> STR_67(CODE[7]), STR_66(CODE[7]), STR_64(CODE[12]), STR_63(CODE[17]), 
		 -> STR_62(CODE[19]), STR_59(CODE[16]), STR_56(CODE[16]), STR_53(CODE[12]), 
		 -> STR_52(CODE[25]), STR_51(CODE[20]), STR_50(CODE[20]), STR_49(CODE[21]), 
		 -> STR_48(CODE[15]), STR_47(CODE[6]), STR_46(CODE[15]), STR_45(CODE[6]), 
		 -> STR_44(CODE[31]), STR_43(CODE[20]), STR_42(CODE[19]), STR_41(CODE[16]), 
		 -> STR_40(CODE[14]), STR_39(CODE[17]), STR_38(CODE[16]), STR_37(CODE[15]), 
		 -> STR_36(CODE[17]), STR_35(CODE[16]), STR_34(CODE[19]), STR_33(CODE[20]), 
		 -> STR_30(CODE[16]), STR_27(CODE[16]), STR_24(CODE[12]), STR_23(CODE[19]), 
		 -> STR_22(CODE[16]), STR_21(CODE[20]), STR_20(CODE[7]), STR_19(CODE[11]), 
		 -> STR_12(CODE[104]), STR_11(CODE[63]), STR_9(CODE[18]), STR_7(CODE[12]), 
		 -> STR_6(CODE[7]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[5]), 
		 -> STR_1(CODE[5]), 

    S1559__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1559__prbuf$ptr	PTR unsigned char  size(2) Largest target is 80
		 -> intToFloatStr@end(BANK0[4]), line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), 
		 -> line1(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), bufferSerial(BANK1[80]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> intToFloatStr@end(BANK0[4]), line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), 
		 -> line1(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), bufferSerial(BANK1[80]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    configuraTelefones$1414	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_73(CODE[5]), STR_72(CODE[5]), 

    configuraTelefones$1409	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_70(CODE[17]), STR_69(CODE[17]), 

    dataLoger$1396	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_61(CODE[5]), STR_60(CODE[3]), 

    dataLoger$1391	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_58(CODE[5]), STR_57(CODE[3]), 

    dataLoger$1386	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_55(CODE[5]), STR_54(CODE[3]), 

    blink@line	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 

    atualizarLCD@line4	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), 

    atualizarLCD@line3	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), 

    atualizarLCD@line2	PTR unsigned char  size(2) Largest target is 21
		 -> line2(BANK1[21]), 

    atualizarLCD@line1	PTR unsigned char  size(2) Largest target is 21
		 -> line1(BANK1[21]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 

    getDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    setDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    acaoTesteBombas$1251	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_32(CODE[5]), STR_31(CODE[3]), 

    acaoTesteBombas$1246	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_29(CODE[5]), STR_28(CODE[3]), 

    acaoTesteBombas$1241	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_26(CODE[5]), STR_25(CODE[3]), 

    sp__intToFloatStr	PTR unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    sp__getSerial	PTR unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    getSerial@ret	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), bufferSerial(BANK1[80]), 

    getSerial@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_87(CODE[7]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[80]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), bufferSerial(BANK1[80]), 

    aguardaBuffer@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_86(CODE[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TIMER0 in COMRAM

    _TIMER0->_tratarSerial
    _tratarSerial->i2_sprintf
    i2_sprintf->i2__doprnt
    i2__doprnt->i2___lwmod
    i2___lwmod->i2___lwdiv
    _timer->_writeEEPROM16_ext
    i2_getDS1307TimeDate->i2_I2C_Read
    i2_I2C_Restart->i2_I2C_Wait
    i2_I2C_Read->i2_I2C_Wait
    i2_RTC_Init->i2_I2C_Write
    _writeEEPROM16_ext->i2_writeEEPROM_ext
    i2_writeEEPROM_ext->i2_I2C_Write
    i2_writeEEPROM_ext->i2_delay
    i2_I2C_Write->i2_I2C_Wait
    i2_I2C_Stop->i2_I2C_Wait
    i2_I2C_Start->i2_I2C_Wait
    _lerTransdutor->___ftdiv
    _lerTransdutor->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftmul

Critical Paths under _main in BANK0

    _main->_acaoTesteBombas
    _tela_testeBombas->_sprintf
    _tela_ajusteRTC->_sprintf
    _setDS1307TimeDate->_I2C_Write
    _DECtoBCD->___awdiv
    _telaTeste->_atoi
    _printf->__doprnt
    _limparBuffer->_memset
    _getSerial->_sprintf
    _atoi->_getSerial
    _aguardaBuffer->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _lerParametros->_readEEPROM16_ext
    _readEEPROM16_ext->_readEEPROM_ext
    _informacoes->_sprintf
    _getDS1307TimeDate->_I2C_Write
    _dataLoger->_sprintf
    _criarCaracteresCGRAM->_Lcd_Write_Char
    _configurarEstacionaria->_sprintf
    _configuraTelefones->_sprintf
    _atualizarLCD->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _ajusteSP_Bombas->_intToFloatStr
    _acaoTesteBomasProgramado->_acaoTesteBombas
    _acaoTesteBombas->_intToFloatStr
    _salvarLOG->_readEEPROM_ext
    _salvarLOG->_writeEEPROM_ext
    _writeEEPROM_ext->_I2C_Write
    _readEEPROM_ext->_I2C_Write
    _I2C_Restart->_I2C_Wait
    _I2C_Read->_I2C_Wait
    _intToFloatStr->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _acaoBombas->_partidaBombaEstacionaria
    _partidaBombaEstacionaria->_delay
    _RTC_Init->_I2C_Write
    _I2C_Write->_DECtoBCD
    _I2C_Stop->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _I2C_Master_Init->___lldiv

Critical Paths under _TIMER0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TIMER0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TIMER0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TIMER0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TIMER0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TIMER0 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  552241
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                           _RTC_Init
                         _acaoBombas
           _acaoTesteBomasProgramado
                    _acaoTesteBombas
                    _ajusteSP_Bombas
                       _atualizarLCD
                            _btPress
             _configuraRegistradores
                 _configuraTelefones
             _configurarEstacionaria
               _criarCaracteresCGRAM
                          _dataLoger
                              _delay
                  _getDS1307TimeDate
                        _informacoes
                      _lerParametros
                        _setShiftREG
                            _sprintf
                          _telaTeste
                     _tela_ajusteRTC
                   _tela_testeBombas
 ---------------------------------------------------------------------------------
 (1) _tela_testeBombas                                     2     2      0   37114
                                             55 BANK0      2     2      0
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_ajusteRTC                                       0     0      0   35078
                              _blink
                            _btPress
                  _setDS1307TimeDate
                            _sprintf
                          _validaRTC
 ---------------------------------------------------------------------------------
 (2) _validaRTC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setDS1307TimeDate                                    3     1      2    4054
                                             12 BANK0      3     1      2
                           _DECtoBCD
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DECtoBCD                                             2     2      0    1598
                                              8 BANK0      2     2      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _telaTeste                                            2     2      0   73008
                                             72 BANK0      2     2      0
                      _aguardaBuffer
                               _atoi
                              _delay
                          _getSerial
                       _limparBuffer
                             _printf
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printf                                              26     6     20   11215
                                             33 BANK0     26     6     20
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) _limparBuffer                                         0     0      0     552
                             _memset
 ---------------------------------------------------------------------------------
 (2) _getSerial                                           10     7      3   30645
                                             55 BANK0     10     7      3
                             _memset
                            _sprintf
                             _strlen
                             _strstr
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     552
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     837
                                             65 BANK0      7     5      2
                             ___wmul
                          _getSerial (ARG)
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _aguardaBuffer                                        2     0      2    1499
                                             19 BANK0      2     0      2
                             _strstr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    1401
                                             15 BANK0      4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     362
                                              6 BANK0      9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               5     1      4     240
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _setShiftREG                                          2     2      0      69
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _lerParametros                                        2     2      0   12736
                                             20 BANK0      2     2      0
                   _readEEPROM16_ext
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _readEEPROM16_ext                                     6     4      2    3221
                                             14 BANK0      6     4      2
                     _readEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _informacoes                                          0     0      0   27263
                            _btPress
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _getDS1307TimeDate                                    2     0      2    3431
                                             12 BANK0      2     0      2
                           _BCDtoDEC
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _BCDtoDEC                                             1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _dataLoger                                            6     6      0   30715
                                             55 BANK0      6     6      0
                            _btPress
                     _readEEPROM_ext
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _criarCaracteresCGRAM                                40    40      0     521
                                              4 BANK0     40    40      0
                            _Lcd_Cmd
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _configurarEstacionaria                               0     0      0   37114
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _configuraTelefones                                   7     7      0   37779
                                             55 BANK0      7     7      0
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _configuraRegistradores                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _atualizarLCD                                         9     1      8    2076
                                              8 BANK0      9     1      8
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     3     1      2     573
                                              4 BANK0      3     1      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     888
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _ajusteSP_Bombas                                      2     2      0   67808
                                             68 BANK0      2     2      0
                              _blink
                            _btPress
                      _intToFloatStr
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _blink                                                5     1      4    3761
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _acaoTesteBomasProgramado                             0     0      0   80749
                    _acaoTesteBombas
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _acaoTesteBombas                                     16    16      0   74659
                                             68 BANK0     16    16      0
                            _btPress
                      _clearShiftREG
                      _intToFloatStr
           _partidaBombaEstacionaria
                          _salvarLOG
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _salvarLOG                                            1     1      0    9265
                                             14 BANK0      1     1      0
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM_ext                                      2     1      1    6090
                                             12 BANK0      2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _readEEPROM_ext                                       2     2      0    3152
                                             12 BANK0      2     2      0
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Restart                                          0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             4     2      2     881
                                              1 BANK0      4     2      2
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _intToFloatStr                                       13    11      2   30354
                                             55 BANK0     13    11      2
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22     6     16   27241
                                             33 BANK0     22     6     16
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             25    19      6    8199
                                             12 BANK0     21    15      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     465
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     752
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     756
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _clearShiftREG                                        1     1      0      69
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _btPress                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _acaoBombas                                           0     0      0     978
           _partidaBombaEstacionaria
 ---------------------------------------------------------------------------------
 (2) _partidaBombaEstacionaria                             1     1      0     978
                                              3 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                3     1      2     934
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0    2226
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            2     0      2    2226
                                             10 BANK0      2     0      2
                           _DECtoBCD (ARG)
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Wait                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TIMER0                                              18    18      0   25036
                                             49 COMRAM    18    18      0
                      _lerTransdutor
                        _readButtons
                              _timer
                       _tratarSerial
 ---------------------------------------------------------------------------------
 (8) _tratarSerial                                         2     0      2    7843
                                             47 COMRAM     2     0      2
                          i2_sprintf
 ---------------------------------------------------------------------------------
 (9) i2_sprintf                                           14     6      8    7629
                                             33 COMRAM    14     6      8
                          i2__doprnt
 ---------------------------------------------------------------------------------
 (10) i2__doprnt                                          25    19      6    7011
                                             12 COMRAM    21    15      6
                   Absolute function *
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch *
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _timer                                                0     0      0    1980
                  _writeEEPROM16_ext
                         i2_RTC_Init
                i2_getDS1307TimeDate
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (9) i2_getDS1307TimeDate                                  2     0      2     707
                                              5 COMRAM     2     0      2
                         i2_BCDtoDEC
                         i2_I2C_Read
                      i2_I2C_Restart
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Restart                                       0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Read                                          4     2      2     227
                                              1 COMRAM     4     2      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_BCDtoDEC                                          1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_RTC_Init                                           0     0      0     256
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (9) _writeEEPROM16_ext                                    3     1      2     591
                                              5 COMRAM     3     1      2
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (9) i2_writeEEPROM_ext                                    2     1      1     426
                                              3 COMRAM     2     1      1
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
                            i2_delay
 ---------------------------------------------------------------------------------
 (10) i2_delay                                             3     1      2      48
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Write                                         2     0      2     256
                                              1 COMRAM     2     0      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Stop                                          0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Start                                         0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Wait                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _readButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _lerTransdutor                                        7     7      0   15213
                                             41 COMRAM     7     7      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
                            _readADC
 ---------------------------------------------------------------------------------
 (9) _readADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) ___lwtoft                                             3     0      3    2564
                                              8 COMRAM     3     0      3
                           ___ftpack
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             15    11      4     328
                                             26 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    3526
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    3480
                                             26 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             12     6      6    4622
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _RTC_Init
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _acaoBombas
     _partidaBombaEstacionaria
       _delay
   _acaoTesteBomasProgramado
     _acaoTesteBombas
       _btPress
       _clearShiftREG
       _intToFloatStr
         ___awdiv
         ___awmod
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
       _partidaBombaEstacionaria
         _delay
       _salvarLOG
         _readEEPROM_ext
           _I2C_Read
             _I2C_Wait
           _I2C_Restart
             _I2C_Wait
           _I2C_Start
             _I2C_Wait
           _I2C_Stop
             _I2C_Wait
           _I2C_Write
             _DECtoBCD (ARG)
               ___awdiv
               ___awmod
             _I2C_Wait (ARG)
         _writeEEPROM_ext
           _I2C_Start
             _I2C_Wait
           _I2C_Stop
             _I2C_Wait
           _I2C_Write
             _DECtoBCD (ARG)
               ___awdiv
               ___awmod
             _I2C_Wait (ARG)
           _delay
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeEEPROM_ext
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
         _delay
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _acaoTesteBombas
     _btPress
     _clearShiftREG
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _partidaBombaEstacionaria
       _delay
     _salvarLOG
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
       _writeEEPROM_ext
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
         _delay
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _ajusteSP_Bombas
     _blink
     _btPress
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _atualizarLCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _btPress
   _configuraRegistradores
   _configuraTelefones
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _configurarEstacionaria
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _criarCaracteresCGRAM
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _dataLoger
     _btPress
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _delay
   _getDS1307TimeDate
     _BCDtoDEC
     _I2C_Read
       _I2C_Wait
     _I2C_Restart
       _I2C_Wait
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _informacoes
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _lerParametros
     _readEEPROM16_ext
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _setShiftREG
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       ___wmul *
       _isdigit *
       _putch *
   _telaTeste
     _aguardaBuffer
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _atoi
       ___wmul
       _getSerial (ARG)
         _memset
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
         _strlen
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _isdigit (ARG)
     _delay
     _getSerial
       _memset
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _strlen
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _limparBuffer
       _memset
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _tela_ajusteRTC
     _blink
     _btPress
     _setDS1307TimeDate
       _DECtoBCD
         ___awdiv
         ___awmod
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _validaRTC
   _tela_testeBombas
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay

 _TIMER0 (ROOT)
   _lerTransdutor
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
     ___lwtoft
       ___ftpack
       _readADC (ARG)
     _readADC
   _readButtons
   _timer
     _writeEEPROM16_ext
       i2_writeEEPROM_ext
         i2_I2C_Start
           i2_I2C_Wait
         i2_I2C_Stop
           i2_I2C_Wait
         i2_I2C_Write
           i2_I2C_Wait
         i2_delay
     i2_RTC_Init
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_getDS1307TimeDate
       i2_BCDtoDEC
       i2_I2C_Read
         i2_I2C_Wait
       i2_I2C_Restart
         i2_I2C_Wait
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_writeEEPROM_ext
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
       i2_delay
   _tratarSerial
     i2_sprintf
       i2__doprnt
         Absolute function(Fake) *
         i2___lwdiv *
         i2___lwmod *
           i2___lwdiv (ARG)
         i2___wmul *
         i2_isdigit *
         i2_putch *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E4       7       89.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      80       5      100.0%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     43      73       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D7      15        0.0%
DATA                 0      0     1D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Aug 04 00:26:10 2019

                                                 __size_of_readEEPROM_ext 0056  
                                                             __CFG_CP0$ON 000000  
                                                             __CFG_CP1$ON 000000  
                                                             __CFG_CP2$ON 000000  
                                                             __CFG_CP3$ON 000000  
                                                      __size_of_I2C_Start 000C  
                                                      __size_of_I2C_Write 000E  
                                                __end_of_readEEPROM16_ext 7476  
                                                             __CFG_CPD$ON 000000  
                                                            ___awdiv@sign 0085  
                                                             __CFG_BOR$ON 000000  
                                                     ___wmul@multiplicand 0082  
                                                      i2___lwdiv@dividend 0001  
                                          __end_of_configurarEstacionaria 2822  
                                        __end_of_partidaBombaEstacionaria 32EE  
                                                             __CFG_OSC$HS 000000  
                                                            ___ftadd@exp1 0026  
                                                            ___ftadd@exp2 0025  
                                                            ___ftadd@sign 0024  
                                                             __CFG_WDT$ON 000000  
                                                                     l410 3FDA  
                                                                     l411 3F94  
                                                                     l500 17B2  
                                                                     l421 3FFA  
                                                                     l430 3938  
                                                                     l414 3FA2  
                                                                     l431 394C  
                                                                     l440 3260  
                                                                     l432 395E  
                                                                     l424 38E2  
                                                                     l416 3FB0  
                                                                     l360 2BA2  
                                                                     l504 1802  
                                                                     l433 3968  
                                                                     l361 2AAE  
                                                                     l601 36B6  
                                                                     l281 2CAC  
                                                                     l442 3270  
                                                                     l418 3FBE  
                                                                     l362 2BBC  
                                                                     l282 2C28  
                                                                     l530 7880  
                                                                     l443 3276  
                                                                     l427 38FC  
                                                                     l419 3FD4  
                                                                     l371 73E6  
                                                                     l363 2AFA  
                                                                     l603 36C2  
                                                                     l283 2C70  
                                                                     l444 3298  
                                                                     l428 390A  
                                                                     l364 2B46  
                                                                     l604 36D2  
                                                                     l700 2386  
                                                                     l445 32B4  
                                                                     l429 3924  
                                                                     l365 2B92  
                                                                     l525 7844  
                                                                     l446 32CC  
                                                                     l438 3244  
                                                                     l470 1858  
                                                                     l462 1500  
                                                                     l454 7596  
                                                                     l614 75C8  
                                                                     l710 2440  
                                                                     l526 7850  
                                                                     l471 15A4  
                                                                     l615 75B0  
                                                                     l607 36E4  
                                                                     l711 247A  
                                                                     l703 23C6  
                                                                     l551 2DD2  
                                                                     l527 785C  
                                                                     l560 76EC  
                                                                     l448 32E2  
                                                                     l480 1666  
                                                                     l464 151A  
                                                                     l800 1E3A  
                                                                     l712 24B8  
                                                                     l704 23DC  
                                                                     l376 7800  
                                                                     l528 7868  
                                                                     l561 76F6  
                                                                     l449 32E8  
                                                                     l481 1670  
                                                                     l473 15E2  
                                                                     l801 1E4C  
                                                                     l721 18AC  
                                                                     l609 3714  
                                                                     l705 23F2  
                                                                     l529 7874  
                                                                     l562 76FA  
                                                                     l490 171C  
                                                                     l466 1532  
                                                                     l546 2D28  
                                                                     l650 2086  
                                                                     l563 7704  
                                                                     l483 16AE  
                                                                     l475 1600  
                                                                     l459 14B8  
                                                                     l803 1E5C  
                                                                     l731 193A  
                                                                     l707 24C4  
                                                                     l547 2D0A  
                                                                     l651 1F44  
                                                                     l564 7708  
                                                                     l468 180E  
                                                                     l492 1742  
                                                                     l484 16CC  
                                                                     l476 160A  
                                                                     l580 3784  
                                                                     l740 1BF4  
                                                                     l708 23FC  
                                                                     l565 7712  
                                                                     l485 16E2  
                                                                     l469 1588  
                                                                     l581 37AA  
                                                                     l741 19EE  
                                                                     l733 19B8  
                                                                     l725 18E4  
                                                                     l709 24DE  
                                                                     l549 2DA0  
                                                                     l661 1FE0  
                                                                     l821 1124  
                                                                     l566 7716  
                                                                     l478 1648  
                                                                     l742 1C14  
                                                                     l734 1970  
                                                                     l654 20B2  
                                                                     l670 207C  
                                                                     l830 1212  
                                                                     l822 1132  
                                                                     l559 76E8  
                                                                     l743 19F4  
                                                                     l807 3A0C  
                                                                     l655 1F78  
                                                                     l823 124C  
                                                                     l831 121A  
                                                                     l496 177A  
                                                                     l576 37D0  
                                                                     l752 1AD8  
                                                                     l744 1A0E  
                                                                     l664 2014  
                                                                     l648 1F1A  
                                                                     l680 2966  
                                                                     l840 13D4  
                                                                     l832 1222  
                                                                     l824 1142  
                                                                     l489 16FC  
                                                                     l577 3738  
                                                                     l761 1BC6  
                                                                     l753 1AF2  
                                                                     l737 19D4  
                                                                     l729 1926  
                                                                     l681 28FE  
                                                                     l841 12AA  
                                                                     l825 1296  
                                                                     l833 122A  
                                                                     l578 37EE  
                                                                     l594 360E  
                                                                     l746 1A54  
                                                                     l658 1FAC  
                                                                     l682 2924  
                                                                     l674 28B0  
                                                                     l850 132A  
                                                                     l834 1232  
                                                                     l826 114A  
                                                                     l923 73B6  
                                                                     l579 375E  
                                                                     l763 1BEA  
                                                                     l755 1B38  
                                                                     l747 1A76  
                                                                     l771 2808  
                                                                     l667 2048  
                                                                     l683 2936  
                                                                     l843 140A  
                                                                     l835 123A  
                                                                     l827 11A6  
                                                                     l924 739E  
                                                                     l764 1C24  
                                                                     l756 1B5A  
                                                                     l748 1A98  
                                                                     l772 278C  
                                                                     l692 2314  
                                                                     l676 2952  
                                                                     l860 141C  
                                                                     l852 134A  
                                                                     l844 12CA  
                                                                     l836 1242  
                                                                     l828 1202  
                                                                     l589 74C6  
                                                                     l765 1C2A  
                                                                     l757 1B7C  
                                                                     l773 27B2  
                                                                     l677 28C4  
                                                                     l829 120A  
                                                                     l790 1E84  
                                                                     l686 2942  
                                                                     l678 28EA  
                                                                     l862 142E  
                                                                     l854 1374  
                                                                     l846 12EA  
                                                                     l791 1D84  
                                                                     l783 1D28  
                                                                     l775 281C  
                                                                     l687 294A  
                                                                     l792 1DAA  
                                                                     l776 27C6  
                                                                     l696 234C  
                                                                     l864 144A  
                                                                     l856 139A  
                                                                     l848 130A  
                                                                     l953 00F4  
                                                                     l785 1E64  
                                                                     l793 1DBC  
                                                                     l777 27EC  
                                                                     l769 275E  
                                                                     l865 145E  
                                                                     l954 016E  
                                                                     l786 1D3C  
                                                                     l971 050C  
                                                                     l955 0140  
                                                                     l795 1DCC  
                                                                     l787 1D62  
                                                                     l779 2800  
                                                                     l859 13C6  
                                                                     l972 027A  
                                                                     l964 01E8  
                                                                     l796 1DF2  
                                                                     l788 1D74  
                                                                     l981 0326  
                                                                     l973 02B6  
                                                                     l797 1E04  
                                                                     l966 04B4  
                                                                     l990 047A  
                                                                     l982 0368  
                                                                     l974 02CA  
                                                                     l958 018A  
                                                                     l991 04A0  
                                                                     l983 0394  
                                                                     l975 02C2  
                                                                     l959 0180  
                                                                     l799 1E14  
                                                                     l992 0548  
                                                                     l986 03AA  
                                                                     l978 031A  
                                                                     l987 0414  
                                                                     l996 059C  
                                                                     l988 0466  
                                                                     l997 05C2  
                                                                     l998 05CC  
                                                                     l999 06D0  
                                                            __CFG_CPB$OFF 000000  
                                                                     _PEN 007E2A  
                                                                     _SEN 007E28  
                                                   _intervalo_leitura_adc 0062  
                                                            _tratarSerial 724E  
                                                                     _rtc 0066  
                                                             ?i2_I2C_Read 0002  
                                                            __CFG_BORV$20 000000  
                                                            ___awmod@sign 0085  
                                                             ?i2_I2C_Wait 0001  
                                                             ?i2_I2C_Stop 0001  
                                                                     prod 000FF3  
                                                                     tosl 000FFD  
                                                                     wreg 000FE8  
                                                    __size_of_I2C_Restart 000C  
                                                             ?i2_BCDtoDEC 0001  
                                                __size_of_ajusteSP_Bombas 025A  
                                                            __CFG_LVP$OFF 000000  
                                                            ___ftdiv@cntr 0024  
                                                            ___ftdiv@sign 0029  
                                                                    l1001 061E  
                                                                    l1002 064A  
                                                                    l1011 071C  
                                                                    l1020 0896  
                                                                    l1012 0748  
                                                                    l1005 0698  
                                                                    l1006 06C4  
                                                                    l1015 07A8  
                                                                    l1016 07D4  
                                                                    l1210 3B8A  
                                                                    l1018 07DC  
                                                                    l1019 086A  
                                                                    l1220 3DBA  
                                                                    l1213 3BB8  
                                                                    l1214 3BC4  
                                                                    l1206 3B60  
                                                                    l1222 3DD4  
                                                                    l1215 3BD4  
                                                                    l1207 3B72  
                                                                    l1223 3DCA  
                                                                    l1209 3B94  
                                                                    l1226 3DF0  
                                                                    l1227 3DFC  
                                                                    l1219 3DAC  
                                                                    l1228 3E0C  
                                                                    l1190 3166  
                                                                    l1193 31BC  
                                                                    l1194 317A  
                                                                    l1451 7B3A  
                                                                    l1187 3122  
                                                                    l1452 7B46  
                                                                    l1196 31F2  
                                                                    l1188 311A  
                                                                    l1461 790E  
                                                                    l1613 7AA6  
                                                                    l1197 31FC  
                                                                    l1462 791A  
                                                                    l1614 7A9E  
                                                                    l1447 7B16  
                                                                    l1471 750A  
                                                                    l1448 7B0C  
                                                                    l1368 7218  
                                                                    l1472 74F6  
                                                                    l1457 78F2  
                                                                    l1625 3C50  
                                                                    l1394 3CAE  
                                                                    l1458 78E8  
                                                                    l1626 3BE6  
                                                                    l1395 3CA0  
                                                                    l1627 3C24  
                                                                    l1660 3AB2  
                                                                    l1661 3B1C  
                                                                    l1398 3CE6  
                                                                    l1654 7632  
                                                                    l1399 3CF6  
                                                                    l5203 73DC  
                                                                    l1659 3B26  
                                                                    l5055 3AB4  
                                                                    l5081 764E  
                                                                    l5069 3B42  
                                                                    l5181 74F8  
                                                                    l5177 3C74  
                                                                    l4643 7134  
                                                                    l4709 73A0  
                                                                    l6511 2D00  
                                                                    l6343 782A  
                                                                    l6525 2D96  
                                                                    l6537 2DC8  
                                                                    l6627 36C8  
                                                                    l6619 36AC  
                                                                    l6593 3604  
                                                                    l5939 31B6  
                                                                    l5897 74BC  
                                                                    STR_1 7FF3  
                                                                    STR_2 7FF3  
                                                                    STR_3 7FF3  
                                                                    STR_4 7FE4  
                                                                    STR_6 7FB6  
                                                                    STR_7 7F15  
                                                                    STR_9 7DAD  
                                                                    u5400 3DDA  
                                                                    u5250 7ACA  
                                                                    u5340 3B9A  
                                                                    u4720 749C  
                                                                    u5440 3AE4  
                                                                    u5600 3C6A  
                                                                    u5257 7AC0  
                                                                    u6410 72F6  
                                                                    u4660 7B1C  
                                                                    u6420 72FA  
                                                                    _RCIF 007CF5  
                                                                    _RCEN 007E2B  
                                                                    u5630 7400  
                                                                    u4735 74A0  
                                                                    u4690 78F8  
                                                                    u7280 3CB4  
                                                                    u6750 74E4  
                                                                    u7710 3664  
                                                                    u7720 367A  
                                                                    u6770 75D2  
                                                                    u7650 2D1C  
                                                                    u7670 2DC2  
                                                                    u7770 3722  
                                                                    u7690 2DF4  
                                                                    u7780 372A  
                                                                    u8575 7B82  
                                                                    _RSEN 007E29  
                                                            __CFG_WRT0$ON 000000  
                                                            __CFG_WRT1$ON 000000  
                                                            __CFG_WRT2$ON 000000  
                                                            __CFG_WRT3$ON 000000  
                                                   writeEEPROM16_ext@data 0006  
                                                            __CFG_STVR$ON 000000  
                                                                    __dia 00F7  
                                                                    __ano 00F5  
                                                                    __hor 00F8  
                                                                    __mes 00F6  
                                                                    __min 0064  
                                                       ?_Lcd_Write_String 0084  
                                                                    __sec 00F9  
                                                           __CFG_EBTRB$ON 000000  
                                                                    _atoi 3116  
                                                                    _main 10AE  
                                             __end_ofi2_getDS1307TimeDate 301E  
                                                                    _tel1 01D8  
                                                                    _tel2 01CC  
                                                             i2__doprnt@c 0021  
                                                            ___ftpack@arg 0001  
                                                             i2__doprnt@f 000F  
                                                            ___ftpack@exp 0004  
                                                        __end_of_I2C_Read 74B0  
                                              __end_of_configuraTelefones 1C30  
                                                                    fsr0h 000FEA  
                                                                    fsr1h 000FE2  
                                                      i2___lwdiv@quotient 0005  
                                                                    indf0 000FEF  
                                                                    fsr2h 000FDA  
                                                                    fsr0l 000FE9  
                                                                    indf2 000FDF  
                                                                    fsr1l 000FE1  
                                                                    fsr2l 000FD9  
                                                                    btemp 0074  
                                                        __end_of_I2C_Wait 710C  
                                                        __end_of_I2C_Stop 7078  
                                                 __size_of_tela_ajusteRTC 0232  
                                                            ?i2_I2C_Start 0001  
                                                                    prodh 000FF4  
                                                                    prodl 000FF3  
                                                            ?i2_I2C_Write 0002  
                                                         __end_ofi2_delay 7332  
                                                                    start 00EC  
                                                      ??_Lcd_Write_String 0086  
                                                  __size_of_lerTransdutor 0218  
                                                             _str_posicao 005B  
                                            partidaBombaEstacionaria@acao 0083  
                                                        __end_of_BCDtoDEC 7126  
                                                         __end_of_Lcd_Cmd 72A4  
                                                         __end_ofi2_putch 70B2  
                                                  __size_ofi2_I2C_Restart 000C  
                                                          clearShiftREG@i 0080  
                                                           ?_atualizarLCD 0088  
                                                            ___ftmul@cntr 0019  
                                                            ___param_bank 000000  
                                                            ___ftmul@sign 001A  
                                                        __end_of_DECtoBCD 76D8  
                                               __size_of_tela_testeBombas 014A  
                                                           _lerParametros 2CDE  
                                                            ___fttol@exp1 0029  
                                                            ___fttol@lval 0025  
                                                        ?_I2C_Master_Init 008D  
                                                            ?_readButtons 0001  
                                                 _configuraTelefones$1414 00BB  
                                                 _configuraTelefones$1409 00B9  
                                                           __CFG_OSCS$OFF 000000  
                                                             ?i2_RTC_Init 0001  
                                                                   l12163 14AE  
                                                                   l11825 054E  
                                                                   l12553 1966  
                                                                   l11781 0328  
                                                                   l11791 03AC  
                                                                   l12499 2436  
                                                                   ?_atoi 00C1  
                                                                   ?_main 0001  
                                                                   _ACKEN 007E2C  
                                                                   _ACKDT 007E2D  
                                                         __end_of___awdiv 3BE2  
                                                         __end_of___ftadd 26B4  
                                                                   STR_10 7FFD  
                                                                   STR_11 7C4B  
                                                                   STR_12 7BE3  
                                                                   STR_21 7CFF  
                                                                   STR_14 7FDE  
                                                                   STR_30 7E85  
                                                                   STR_22 7E65  
                                                                   STR_31 7E62  
                                                                   STR_23 7D3B  
                                                                   STR_32 7FEE  
                                                                   STR_24 7F5D  
                                                                   STR_40 7ED1  
                                                                   STR_25 7E62  
                                                                   STR_33 7CD7  
                                                                   STR_26 7FEE  
                                                                   STR_34 7D9A  
                                                                   STR_42 7D61  
                                                                   STR_50 7D13  
                                                                   STR_19 7F69  
                                                                   STR_27 7E75  
                                                                   STR_35 7E55  
                                                                   STR_51 7D27  
                                                                   STR_43 7CEB  
                                                                   STR_60 7E62  
                                                                   STR_28 7E62  
                                                                   STR_36 7DE1  
                                                                   STR_52 7CA9  
                                                                   STR_44 7C8A  
                                                         __end_of___awmod 3E1A  
                                                                   STR_61 7FEE  
                                                                   STR_29 7FEE  
                                                                   STR_45 7FD8  
                                                                   STR_53 7F21  
                                                                   STR_37 7E95  
                                                                   STR_54 7E62  
                                                                   STR_46 7CB3  
                                                                   STR_38 7E25  
                                                                   STR_70 7E03  
                                                                   STR_62 7D4E  
                                                                   STR_55 7FEE  
                                                                   STR_47 7FD2  
                                                                   STR_71 7FA7  
                                                                   STR_63 7DF2  
                                                                   STR_39 7DD0  
                                                                   STR_72 7FE9  
                                                                   STR_80 7F7F  
                                                                   STR_64 7F51  
                                                                   STR_48 7EC2  
                                                                   STR_56 7E35  
                                                                   STR_57 7E62  
                                                                   STR_73 7FEE  
                                                                   STR_81 7F5E  
                                                                   STR_65 7F2D  
                                                                   STR_49 7CC2  
                                                                   STR_58 7FEE  
                                                                   STR_82 7E76  
                                                                   STR_66 7FC4  
                                                                   STR_90 7EA4  
                                                                   STR_74 7D87  
                                                                   STR_83 7E86  
                                                                   STR_67 7FCB  
                                                                   STR_75 7EDF  
                                                                   STR_59 7E45  
                                                                   STR_91 7E14  
                                                                   STR_68 7F5A  
                                                                   STR_76 7FF8  
                                                                   STR_84 7F74  
                                                                   STR_92 7EED  
                                                                   STR_85 7F9E  
                                                                   STR_77 7F39  
                                                                   STR_93 7F08  
                                                                   STR_69 7DBF  
                                                                   STR_78 7FF8  
                                                                   STR_86 7FBD  
                                                                   STR_94 7F8A  
                                                                   STR_87 7FBD  
                                                                   STR_95 7F45  
                                                                   STR_79 7D74  
                                                                   STR_88 7F94  
                                                                   STR_96 7EB3  
                                                                   STR_97 7FAF  
                                                                   STR_89 7EFB  
                                                         __end_of___ftdiv 34BC  
                                                            ?_informacoes 0001  
                                                         __end_of___lldiv 3D0C  
                                                         __end_of___ftmul 3116  
                                                                   _T0CON 000FD5  
                                                         ___awdiv@divisor 0082  
                                                         __end_of___fttol 33D6  
                                                                   u17030 06DA  
                                                                   u17120 08A2  
                                                                   u17130 08D4  
                                                                   u17018 067C  
                                                                   u17140 08DE  
                                                                   u17060 075A  
                                                                   u17118 084E  
                                                                   u17137 08CA  
                                                                   u17058 0700  
                                                                   u16700 01D6  
                                                                   u16720 0234  
                                                                   u17098 078C  
                                                                   u16730 0270  
                                                                   u18410 1B30  
                                                                   u16707 01CC  
                                                                   u18340 1A4C  
                                                                   u16910 0580  
                                                                   u16727 022A  
                                                                   u19207 7676  
                                                                   u16840 0406  
                                                                   u16808 034C  
                                                                   u16760 02FA  
                                                                   u18280 19B2  
                                                                   u16737 0266  
                                                                   u19217 768A  
                                                                   u16850 0450  
                                                                   u16770 0300  
                                                                   u16690 01AE  
                                                                   u18450 1BAC  
                                                                   u19227 73A8  
                                                         __end_of___lwdiv 7B54  
                                                                   u18380 1AC8  
                                                                   u17660 2CCE  
                                                                   u19237 3D1C  
                                                                   u16870 04E6  
                                                                   u16838 03D0  
                                                                   u19247 3D38  
                                                                   u16847 03FC  
                                                                   u16839 040A  
                                                                   u16767 02F0  
                                                                   u16688 0124  
                                                                   u17840 16F0  
                                                                   u19257 3D52  
                                                                   u16857 0446  
                                                                   u16697 01A4  
                                                                   u17690 14D2  
                                                                   u19267 7292  
                                                                   u16877 04DC  
                                                                   u19197 3694  
                                                                   u16988 0602  
                                                         __end_of___lwmod 7928  
                                                                   i2l400 3EB8  
                                                                   i2l401 3EC2  
                                                                   i2l250 20E8  
                                                                   i2l402 3ED6  
                                                                   i2l403 3EE0  
                                                                   i2l252 21DC  
                                                                   i2l404 3EF4  
                                                                   i2l245 71E0  
                                                                   i2l405 3EFE  
                                                                   i2l406 3F12  
                                                                   i2l256 22CE  
                                                                   i2l257 2298  
                                                                   i2l540 3592  
                                                                   i2l541 3526  
                                                                   i2l542 3534  
                                                                   i2l543 3578  
                                                                   i2l536 34CE  
                                                                   i2l539 3502  
                                                                   i2l814 008A  
                                                                   i2l399 3EA4  
                                                                   i2l815 009C  
                                                                   i2l923 731A  
                                                                   i2l924 7304  
                                                                   i2l953 08F2  
                                                                   i2l954 096A  
                                                                   i2l971 0CEC  
                                                                   i2l955 093C  
                                                                   i2l972 0A6A  
                                                                   i2l964 09DE  
                                                         ___awdiv@counter 0084  
                                                                   i2l981 0B10  
                                                                   i2l973 0AA4  
                                                                   i2l966 0C98  
                                                                   i2l990 0C5E  
                                                                   i2l982 0B52  
                                                                   i2l974 0AB6  
                                                                   i2l958 0982  
                                                                   i2l991 0C84  
                                                                   i2l983 0B7E  
                                                                   i2l975 0AB0  
                                                                   i2l959 097A  
                                                                   i2l992 0D26  
                                                                   i2l986 0B92  
                                                                   i2l978 0B04  
                                                                   i2l987 0BFA  
                                                                   i2l996 0D7A  
                                                                   i2l988 0C4A  
                                                                   i2l997 0DA0  
                                                                   i2l998 0DAA  
                                                                   i2l999 0EA8  
                                                                   _RCREG 000FAE  
                                                                   _TMR0H 000FD7  
                                                                   _TMR0L 000FD6  
                                                                   _SPBRG 000FAF  
                                                         __end_of__doprnt 08EE  
                                                 __size_of_Lcd_Set_Cursor 00C4  
                                                                   _TXREG 000FAD  
                                                         _writeEEPROM_ext 7762  
                                                           __CFG_PWRT$OFF 000000  
                                                         __end_of_btPress 4000  
                                                          __CFG_EBTR0$OFF 000000  
                                                          __CFG_EBTR1$OFF 000000  
                                                          __CFG_EBTR2$OFF 000000  
                                                          __CFG_EBTR3$OFF 000000  
                                                           __CFG_WRTB$OFF 000000  
                                                                   __b_ok 0051  
                                                           __CFG_WRTC$OFF 000000  
                                                           __CFG_WRTD$OFF 000000  
                                                         __end_of_readADC 71FC  
                                                              i2isdigit@c 0003  
                                                                   _falha 00DB  
                                                                   _delay 739A  
                                                                   _blink 759C  
                                                         __end_of_dpowers 7BE3  
                                                                   _line1 01A3  
                                                                   _line2 018E  
                                                                   _line3 0179  
                                                                   _line4 0164  
                                                            i2__doprnt@ap 0011  
                                                            i2__doprnt@cp 001D  
                                                            i2__doprnt@pb 000D  
                                                         __end_of_isdigit 7224  
                                                  ??_criarCaracteresCGRAM 0084  
                                                                   _shift 0044  
                                                           ___ftpack@sign 0005  
                                                                   _timer 34BC  
                                                                   atoi@a 00C6  
                                                        __end_of_RTC_Init 743E  
                                                                   atoi@s 00C1  
                                                                   _putch 7126  
                                                            _str_recebida 0100  
                                                       __end_of_I2C_Start 706C  
                                                          __pbitbssCOMRAM 0398  
                                                       __end_of_I2C_Write 70A0  
                                                                   pclath 000FFA  
                                                                   tablat 000FF5  
                                                        __end_ofi2___wmul 724E  
                                                  __size_of_intToFloatStr 0080  
                                                                   status 000FD8  
                                                                   wtemp6 0075  
                                                         __end_of_sprintf 77F0  
                                                         __end_of_strncmp 3B48  
                                                   i2writeEEPROM_ext@data 0004  
                                                      __size_ofi2___lwdiv 0060  
                                                      __size_ofi2___lwmod 0050  
                                                        __end_of_Lcd_Init 3D94  
                                                          ??_atualizarLCD 0090  
                                              __size_of_getDS1307TimeDate 0134  
                                              __size_of_setDS1307TimeDate 0112  
                                                        __end_of_Lcd_Port 771C  
                                                     __size_ofi2_I2C_Read 0036  
                                                      __size_ofi2__doprnt 07C0  
                                                     __size_ofi2_I2C_Wait 0018  
                                                         __initialization 3F18  
                                                           _dtl_principal 0060  
                                                     __size_ofi2_I2C_Stop 000C  
                                                          ?_lerParametros 0001  
                                                            __end_of_atoi 3202  
                                                            __end_of_main 1486  
                                                   __end_of_aguardaBuffer 7300  
                                                     __size_ofi2_BCDtoDEC 0016  
                                                      __size_ofi2_isdigit 0024  
                                                     _estacionaria_Ligada 00ED  
                                                                  ??_atoi 00C3  
                                                                  ??_main 00D4  
                                                           ___fttol@sign1 0024  
                                                            i2I2C_Write@d 0002  
                                                           _status_jockey 00FE  
                                      lerParametros@verifica_memoria_nova 0094  
                                                      __size_of_Lcd_Clear 0012  
                                              ??_acaoTesteBomasProgramado 00D4  
                                                           __activetblptr 000002  
                                                              i2sprintf@f 0024  
                                                           _lerTransdutor 20BC  
                                                      __size_ofi2_sprintf 0046  
                                                   __end_of_clearShiftREG 7406  
                                                           i2_I2C_Restart 7054  
                                                    _tempo_limite_partida 00EB  
                                                               I2C_Read@a 0081  
                                                            ?_setShiftREG 0001  
                                                         __CFG_CCP2MUX$ON 000000  
                                                      readEEPROM_ext@data 008D  
                                                                  ?_delay 0080  
                                                                  ?_blink 0080  
                                                                  _ADCON0 000FC2  
                                                                  _ADCON1 000FC1  
                                                                  _ADRESH 000FC4  
                                                                  _ADRESL 000FC3  
                                                        ___awdiv@dividend 0080  
                                                                  ?_timer 0001  
                                                                  ?_putch 0001  
                                                        __end_of___ftpack 38B8  
                                                          lerTransdutor@i 002A  
                                                               ??i2_delay 0003  
                                                                  i2l1001 0DFC  
                                                                  i2l1002 0E28  
                                                                  i2l1011 0EF4  
                                                                  i2l1020 1066  
                                                                  i2l1012 0F20  
                                                                  i2l1005 0E72  
                                                                  i2l1006 0E9E  
                                                                  i2l1015 0F7E  
                                                                  i2l1016 0FAA  
                                                                  i2l1018 0FB2  
                                                                  i2l1019 103A  
                                                                  i2l1310 2638  
                                                                  i2l1311 2656  
                                                                  i2l1312 2688  
                                                                  i2l1320 345C  
                                                                  i2l1321 3484  
                                                                  i2l1307 2610  
                                                                  i2l1260 387A  
                                                                  i2l1308 2604  
                                                                  i2l1253 3822  
                                                                  i2l1325 3A44  
                                                                  i2l1254 3816  
                                                                  i2l1326 3A76  
                                                                  i2l1334 3064  
                                                                  i2l1319 341C  
                                                                  i2l1335 3098  
                                                                  i2l1256 385A  
                                                                  i2l1336 30AA  
                                                                  i2l1257 3842  
                                                                  i2l1361 339E  
                                                                  i2l1338 30C4  
                                                                  i2l1362 3390  
                                                                  i2l1259 3886  
                                                                  i2l1339 30D6  
                                                                  i2l1355 3374  
                                                                  i2l1451 7A78  
                                                                  i2l1284 253A  
                                                                  i2l1364 33BE  
                                                                  i2l1356 3362  
                                                                  i2l1452 7A84  
                                                                  i2l1293 25D6  
                                                                  i2l1461 78BC  
                                                                  i2l1462 78C8  
                                                                  i2l1447 7A54  
                                                                  i2l1288 2568  
                                                                  i2l1448 7A4A  
                                                                  i2l1368 717C  
                                                                  i2l1457 78A0  
                                                                  i2l1298 25CA  
                                                                  i2l1458 7896  
                                                                  i2l1299 25BE  
                                                                  i2l5101 7306  
                                                                  i2l6015 26AE  
                                                                  i2l5411 38B2  
                                                                  i2l5083 70A4  
                                                                  i2l6061 34B6  
                                                                  i2l6109 3110  
                                                                  i2l4641 3AA8  
                                                                  i2l6173 33D0  
                                                                  i2l4639 3AA4  
                                                                  _INTCON 000FF2  
                                                                  i2l6293 20DE  
                                                        __end_of___lwtoft 71D4  
                                                                  u710_41 3030  
                                                                  u712_41 304A  
                                                                  u705_41 33E8  
                                                                  u707_41 3402  
                                                                  u719_41 3300  
                                                               ??_Lcd_Cmd 0081  
                                                                  _TIMER0 0008  
                                                                  u684_41 24F6  
                                                                  _TMR0IF 007F92  
                                                               ??i2_putch 0001  
                                                                  u685_41 250A  
                                                          __CFG_WDTPS$128 000000  
                                       __size_of_partidaBombaEstacionaria 00EC  
                                                 __size_of_Lcd_Write_Char 0042  
                                                                  _SSPADD 000FC8  
                                                                  _SSPBUF 000FC9  
                                               ?_partidaBombaEstacionaria 0001  
                                                     __size_ofi2_RTC_Init 0032  
                                                       ??_ajusteSP_Bombas 00C4  
                                                 writeEEPROM16_ext@adress 0008  
                                                     _dias_restante_teste 00F1  
                                                ??_configuraRegistradores 0080  
                                                                  __b_esc 0057  
                                                                  ___ftge 3A12  
                                                          _readEEPROM_ext 7928  
                                                                  ___wmul 72A4  
                                                               ??___awdiv 0084  
                                                               ??___ftadd 0021  
                                                               ??___awmod 0084  
                                                               ??___ftdiv 0021  
                                                               ??___lldiv 0088  
                                                               ??___ftmul 0012  
                                                               ??___fttol 001F  
                                                                  _blinkk 0398  
                                                               ??___lwdiv 0084  
                                                               ??___lwmod 008B  
                                                       _estagio_envio_SMS 00E7  
                                                 __end_of_writeEEPROM_ext 77A8  
                                                           ?_limparBuffer 0001  
                                                               ??__doprnt 0092  
                                                                  _memset 74EA  
                                                           i2__doprnt@len 001A  
                                                                  delay@x 0080  
                                                           i2__doprnt@val 0018  
                                                                  clear_0 3F5E  
                                                                  clear_1 3F6A  
                                                                  clear_2 3F78  
                                                        ___awdiv@quotient 0086  
                                                                  blink@i 0084  
                                                         ___awmod@divisor 0082  
                                                               ??_btPress 0080  
                                                           _intToFloatStr 3E1A  
                                                            __doprnt@flag 009B  
                                                         ___awmod@counter 0084  
                                           setDS1307TimeDate@ptrToUserVal 008C  
                                                                  _printf 75D8  
                                                            __doprnt@prec 0096  
                                                                  _strchr 7614  
                                                                  _strlen 7A92  
                                                                  _strstr 3BE2  
                                                          ?_lerTransdutor 0001  
                                                   ___ftmul@f3_as_product 0016  
                                                               ??_readADC 0003  
                                                            __pdataCOMRAM 006D  
                                                               ??_isdigit 0080  
                                                          ?i2_I2C_Restart 0001  
                                                               ?_I2C_Read 0081  
                                                               ?_I2C_Wait 0001  
                                                               ?_I2C_Stop 0001  
                                                       __end_ofi2___lwdiv 7A92  
                                                            __mediumconst 7BB8  
                                                       __end_ofi2___lwmod 78D6  
                                                                  tblptrh 000FF7  
                                                                  tblptrl 000FF6  
                                                                  tblptru 000FF8  
                                                       __end_ofi2__doprnt 10AE  
                                                                  putch@c 0080  
                                                               ?_BCDtoDEC 0001  
                                                               ??_sprintf 00B1  
                                                               ??_strncmp 008C  
                                                               ?_DECtoBCD 0001  
                                                         Lcd_Set_Cursor@a 0084  
                                                         Lcd_Set_Cursor@b 0083  
                                                         Lcd_Set_Cursor@y 0086  
                                                         Lcd_Set_Cursor@z 0085  
                                                          _status_SIM800L 00EF  
                                                       __end_ofi2_isdigit 7188  
                                                              __accesstop 0080  
                                                 __end_of__initialization 3F7E  
                                                              ___ftadd@f1 001B  
                                                              ___ftadd@f2 001E  
                                                          _tela_ajusteRTC 1E8A  
                                                              ___ftge@ff1 0001  
                                                              ___ftge@ff2 0004  
                                                       __end_of_Lcd_Clear 70C4  
                                                           ___rparam_used 000001  
                                                              ___ftdiv@f1 001B  
                                                              ___ftdiv@f2 001E  
                                                              ___ftdiv@f3 0025  
                                                       __end_ofi2_sprintf 7762  
                                                         ??_lerParametros 0094  
                                                              _acaoBombas 38B8  
                                                  __end_of_readEEPROM_ext 797E  
                                                              ___ftmul@f1 000C  
                                                              ___ftmul@f2 000F  
                                                    __size_ofi2_I2C_Start 000C  
                                                              ___fttol@f1 001B  
                                                      i2___lwmod@dividend 0008  
                                                    __size_ofi2_I2C_Write 000E  
                                                        _tela_testeBombas 2822  
                                                          __pcstackCOMRAM 0001  
                                                        _status_principal 00FD  
                                                            __pidataBANK0 7030  
                                                      __size_of_dataLoger 0210  
                                                           __end_of_delay 73D0  
                                                           __end_of_blink 75D8  
                                                          ??_limparBuffer 0088  
                                                __size_of_acaoTesteBombas 03D8  
                                                           __end_of_timer 3598  
                                                           __end_of_putch 7142  
                                                          ?_intToFloatStr 00B7  
                                                       ?_readEEPROM16_ext 008E  
                                                               ?_RTC_Init 0001  
                                                       intToFloatStr@conv 00BC  
                                                              ___lwtoft@c 0009  
                                                          _tela_menu_posi 005C  
                                                      ??_readEEPROM16_ext 0090  
                                                               ?i2___wmul 0001  
                                                    __size_of_readButtons 007E  
                                                          _Lcd_Set_Cursor 3730  
                                                            ??i2_I2C_Read 0004  
                                                              ??_I2C_Read 0083  
                                                            ??i2_I2C_Wait 0001  
                                                      __size_of_getSerial 011C  
                                                              ??_I2C_Wait 0080  
                                                            ??i2_I2C_Stop 0002  
                                                              ??_I2C_Stop 0081  
                                                    __size_of_informacoes 005E  
                                                            __sec_partida 00F4  
                                                    __end_of_atualizarLCD 366A  
                                                            ??i2_BCDtoDEC 0001  
                                                               ?_Lcd_Init 0001  
                                                              ??_BCDtoDEC 0080  
                                                                 ??_delay 0082  
                                                               ?_Lcd_Port 0001  
                                                              __doprnt@ap 0090  
                                                                 ??_blink 0084  
                                                              __doprnt@cp 009C  
                                                              __doprnt@pb 008C  
                                                   writeEEPROM_ext@adress 008D  
                                                              ??_DECtoBCD 0088  
                                                                 ??_timer 0009  
                                                                 ??_putch 0080  
                                                              __pbssBANK0 00D4  
                                                              __pbssBANK1 0100  
                                                  __end_of_tela_ajusteRTC 20BC  
                                                             i2sprintf@ap 002A  
                                                             i2sprintf@pb 002C  
                                                             i2sprintf@wh 0022  
                                                                 ?_TIMER0 0001  
                                                       _tempo_reenvio_SMS 0072  
                                                              __menu_posi 00D6  
                                                     writeEEPROM_ext@data 008C  
                                                         ?_readEEPROM_ext 0001  
                                                      __end_ofi2_I2C_Read 739A  
                                                            I2C_Read@temp 0083  
                                                      __end_ofi2_I2C_Wait 70F2  
                                                                 ?___ftge 0001  
                                                      __end_ofi2_I2C_Stop 7054  
                                         __size_of_configuraRegistradores 0056  
                                                                 ?___wmul 0080  
                                                       _writeEEPROM16_ext 7142  
                                                      __size_of_salvarLOG 0122  
                                                      __size_of_telaTeste 00A4  
                                                      __end_ofi2_BCDtoDEC 70DA  
                                                              _flag_b_esc 0058  
                                                                 ?_memset 0080  
                                                      _configuraTelefones 185E  
                                                        ?_writeEEPROM_ext 008C  
                                                      __size_of_validaRTC 004E  
                                                            ??i2_RTC_Init 0004  
                                                         ??_lerTransdutor 002A  
                                                              ??_RTC_Init 008C  
                                               __size_of_Lcd_Write_String 003A  
                                                      ?_writeEEPROM16_ext 0006  
                                                               ?___ftpack 0001  
                                                  __end_of_Lcd_Set_Cursor 37F4  
                                           criarCaracteresCGRAM@character 0087  
                                                              I2C_Write@d 008A  
                                                                 ?_printf 00A1  
                                        __end_of_acaoTesteBomasProgramado 759C  
                                                         ??i2_I2C_Restart 0002  
                                                                 ?_strchr 0080  
                                                                 ?_strlen 0080  
                                                               ?___lwtoft 0009  
                                                                 ?_strstr 008F  
                                                              ??i2___wmul 0005  
                                                           ??_I2C_Restart 0081  
                                                                 i2l12001 0B94  
                                                                 i2l12035 0D2C  
                                                                 i2l11991 0B12  
                                                     ?_configuraTelefones 0001  
                                                     ??_writeEEPROM16_ext 0008  
                                                              ??_Lcd_Init 0083  
                                                              ??_Lcd_Port 0080  
                                                                 _SSPCON1 000FC6  
                                                                 _SSPCON2 000FC5  
                                                           tratarSerial@c 0030  
                                                       __end_of_dataLoger 24E4  
                                                                 _SSPSTAT 000FC7  
                                                    __size_of_setShiftREG 0048  
                                                                 i2_delay 7300  
                                                         ?_tela_ajusteRTC 0001  
                                                            _flag_b_menos 0056  
                                                          _Lcd_Write_Char 7654  
                                                                 _Lcd_Cmd 7278  
                                                                 i2_putch 70A0  
                                                         __size_of_TIMER0 00E4  
                                                              _dtl_jockey 00E0  
                                                      __end_ofi2_RTC_Init 7364  
                                                               _I2C_Start 7060  
                                                               _I2C_Write 7092  
                                                    ??_configuraTelefones 00B7  
                                                             ?_acaoBombas 0001  
                                                       __end_of_getSerial 2CDE  
                                                                 __Hparam 0000  
                                                                 __Lparam 0000  
                                               __end_of_writeEEPROM16_ext 7164  
                                                         _sp_estacionaria 00DC  
                                            __size_ofi2_getDS1307TimeDate 0112  
                                                         __size_of___ftge 009C  
                                                                 __b_mais 0053  
                                                         ??_intToFloatStr 00B9  
                                                                 ___awdiv 3B48  
                                                                 ___ftadd 24E4  
                                                                 ___awmod 3D94  
                                                                 ___ftdiv 33D6  
                                                                 ___lldiv 3C7A  
                                                         __size_of___wmul 002C  
                                                                 ___ftmul 301E  
                                                                 ___fttol 32EE  
                                                                 ___lwdiv 7AF2  
                                                                 ___lwmod 78D6  
                                                           atualizarLCD@i 0090  
                                                                 __doprnt 00F0  
                                                                 __pcinit 3F18  
                                                              ??___ftpack 0006  
                                                         __size_of_memset 003A  
                                                                 _btPress 3F8C  
                                                                 __ramtop 0600  
                                                         ?_Lcd_Set_Cursor 0083  
                                                                 __tensao 004C  
                                                                 __ptext0 10AE  
                                                                 __ptext1 2822  
                                                                 __ptext2 1E8A  
                                                                 __ptext3 7838  
                                                                 __ptext4 2DFA  
                                                                 __ptext5 7696  
                                                                 __ptext6 396E  
                                                                 __ptext7 75D8  
                                                                 __ptext8 7188  
                                                                 __ptext9 2BC2  
                                               criarCaracteresCGRAM@F2839 7BB9  
                                                         __size_of_printf 003C  
                                                              ??___lwtoft 000C  
                                                                 _dtl_dia 00E3  
                                                                 _dtl_ano 00E1  
                                                         __size_of_strchr 0040  
                                                                 _readADC 71D4  
                                                         __size_of_strlen 0060  
                                                                 _dtl_mes 00E2  
                                                           i2BCDtoDEC@val 0001  
                                                                 _dtl_pos 00E4  
                                                         __size_of_strstr 0098  
                                                                 _dpowers 7BD9  
                                                    readEEPROM16_ext@data 0091  
                                                                 _isdigit 71FC  
                                                          i2__doprnt@flag 001C  
                                                       ??_acaoTesteBombas 00C4  
                                                        ___awmod@dividend 0080  
                                                          i2__doprnt@prec 0017  
                                                         _ajusteSP_Bombas 1C30  
                                                __size_of_I2C_Master_Init 0064  
                                                  _configuraRegistradores 797E  
                                                                 _pressao 00FF  
                                                                 _sprintf 77A8  
                                                           __doprnt@width 009E  
                                                     __end_of_I2C_Restart 7084  
                                                  __end_of_Lcd_Write_Char 7696  
                                                                 _strncmp 3AAE  
                                                    end_of_initialization 3F7E  
                                                       __end_of_salvarLOG 2BC2  
                                                       __end_of_telaTeste 3A12  
                                                    __end_of_limparBuffer 71AC  
                                           __size_of_criarCaracteresCGRAM 00C6  
                                                       __end_of_validaRTC 7886  
                                                                 memset@c 0082  
                                                                 memset@n 0084  
                                                                 memset@p 0086  
                                                           __Lmediumconst 7BB8  
                                                     i2___wmul@multiplier 0001  
                                                              blink@start 0082  
                                                              ?_I2C_Start 0001  
                                                              ?_I2C_Write 008A  
                                                               i2u1721_40 0A26  
                                                               i2u1721_47 0A1C  
                                                               i2u1722_40 0A60  
                                                               i2u1722_47 0A56  
                                                               i2u1740_40 0D5E  
                                                            _bufferSerial 0114  
                                                               i2u1900_45 007A  
                                                               i2u1733_40 0BEE  
                                                               i2u1732_48 0BB8  
                                                               i2u1725_40 0AE6  
                                                               i2u1732_49 0BF2  
                                                               i2u1733_47 0BE4  
                                                               i2u1725_47 0ADC  
                                                               i2u1734_40 0C36  
                                                               i2u1726_40 0AEC  
                                                               i2u1718_40 09A6  
                                                               i2u1717_48 0920  
                                                               i2u1734_47 0C2C  
                                                               i2u1718_47 099C  
                                                               i2u1750_48 0E56  
                                                               i2u1719_40 09CE  
                                                               i2u1719_47 09C4  
                                                               i2u1752_40 0EB2  
                                                               i2u1736_40 0CC8  
                                                               i2u1736_47 0CBE  
                                                               i2u1761_40 1070  
                                                               i2u1760_48 101E  
                                                               i2u1762_40 10A0  
                                                               i2u1729_48 0B36  
                                                               i2u1762_47 1096  
                                                               i2u1763_40 10A8  
                                                               i2u1755_40 0F30  
                                                               i2u1754_48 0ED8  
                                                               i2u1747_48 0DE0  
                                                    _acaoTesteBombas$1241 00CD  
                                                    _acaoTesteBombas$1251 00D1  
                                                    _acaoTesteBombas$1246 00CF  
                                                               i2u1758_48 0F62  
                                                               i2u1927_47 730C  
                                                    _acaoTesteBombas$2319 00CB  
                                                               i2u1928_47 71DA  
                                                         ___lldiv@divisor 0084  
                                                               i2u1899_40 0076  
                                                         ___lldiv@counter 008C  
                                                ??_configurarEstacionaria 00B7  
                                                               _RCSTAbits 000FAB  
                                                                 printf@f 00A1  
                                                        I2C_Master_Init@c 008D  
                                                                 postdec1 000FE5  
                                                                 postdec2 000FDD  
                                                                 postinc0 000FEE  
                                                                 postinc2 000FDE  
                                                               Lcd_Port@a 0080  
                                                       _dtl_visualiza_log 005E  
                                                                 strlen@s 0080  
                                                              getSerial@i 00BE  
                                                               _PORTAbits 000F80  
                                                               _PORTBbits 000F81  
                                                               _PORTCbits 000F82  
                                                               _PORTDbits 000F83  
                                                   __size_of_atualizarLCD 00D2  
                                                               _PORTEbits 000F84  
                                                               _TRISAbits 000F92  
                                                               _TRISBbits 000F93  
                                                               _TRISCbits 000F94  
                                                               _TRISDbits 000F95  
                                                               _TRISEbits 000F96  
                                                 i2writeEEPROM_ext@adress 0005  
                                                     __size_of_acaoBombas 00B6  
                                                __end_of_tela_testeBombas 296C  
                                                       __size_of_I2C_Read 003A  
                                                       __size_of_I2C_Wait 001A  
                                                       __size_of_I2C_Stop 000C  
                                                           _checar_serial 0059  
                                                       i2___lwdiv@divisor 0003  
                                                         ?_Lcd_Write_Char 0001  
                                                               i2___lwdiv 7A32  
                                                               i2___lwmod 7886  
                                                       i2___lwdiv@counter 0007  
                                                       Lcd_Write_String@a 0084  
                                                       Lcd_Write_String@i 0086  
                                                  __size_of_aguardaBuffer 0030  
                                                       __size_of_BCDtoDEC 001A  
                                                               i2__doprnt 08EE  
                                                       __size_of_DECtoBCD 0042  
                                       __size_of_acaoTesteBomasProgramado 003C  
                                                             ___ftdiv@exp 0028  
                                               ?_acaoTesteBomasProgramado 0001  
                                                               _TXSTAbits 000FAC  
                                                          __end_of_TIMER0 00EC  
                                                               i2_isdigit 7164  
                                                         _timer_envio_sms 0061  
                                              __size_of_writeEEPROM16_ext 0022  
                                                  __size_of_clearShiftREG 0036  
                                                             ___ftmul@exp 0015  
                                                         getSerial@length 00BC  
                                                            _atualizarLCD 3598  
                                                               _Lcd_Clear 70B2  
                                                               i2_sprintf 771C  
                                                          __end_of___ftge 3AAE  
                                                          i2I2C_Read@temp 0004  
                                                          __end_of___wmul 72D0  
                                                      intToFloatStr@F2544 006D  
                                                        _Lcd_Write_String 74B0  
                                                           __pidataCOMRAM 7036  
                                                 __end_of_ajusteSP_Bombas 1E8A  
                                                          __end_of_memset 7524  
                                                        i2___wmul@product 0005  
                                                           ?_tratarSerial 0030  
                                                          __end_of_printf 7614  
                                                       __size_of_RTC_Init 0038  
                                                             _I2C_Restart 7078  
                                                          __end_of_strchr 7654  
                                                          __end_of_strlen 7AF2  
                                                          __end_of_strstr 3C7A  
                                                     start_initialization 3F18  
                                                       __size_ofi2___wmul 002A  
                                                             i2I2C_Read@a 0002  
                                                      intToFloatStr@valor 00B9  
                                                _partidaBombaEstacionaria 3202  
                                                              ?i2___lwdiv 0001  
                                                              ?i2___lwmod 0008  
                                               __size_of_readEEPROM16_ext 0038  
                                                       __size_of_Lcd_Init 0088  
                                                              ?i2__doprnt 000D  
                                                       __size_of_Lcd_Port 0044  
                                                        ??_readEEPROM_ext 008C  
                                                       ??_I2C_Master_Init 0091  
                                                                ??_TIMER0 0032  
                                                 _tempo_coun_estacionaria 00E8  
                                                       atualizarLCD@line1 0088  
                                                       atualizarLCD@line2 008A  
                                                       atualizarLCD@line3 008C  
                                                       atualizarLCD@line4 008E  
                                                           ??i2_I2C_Start 0002  
                                                             ??_I2C_Start 0081  
                                                           ??i2_I2C_Write 0004  
                                                             ??_I2C_Write 008C  
                                                              ?i2_isdigit 0001  
                                                   __end_of_lerParametros 2DFA  
                                                              ?_Lcd_Clear 0001  
                                                                ??___ftge 0007  
                                         __size_of_configurarEstacionaria 016E  
                                                                ??___wmul 0084  
                                                              ?i2_sprintf 0022  
                                                             __doprnt@len 0099  
                                                             __doprnt@val 0097  
                                                             __pdataBANK0 00FA  
                                                           _aguardaBuffer 72D0  
                                                           ??_readButtons 0001  
                                                         Lcd_Write_Char@a 0083  
                                                                ??_memset 0086  
                                                         Lcd_Write_Char@y 0082  
                                                                ??_printf 00B5  
                                                           ??_informacoes 00B7  
                                                                ??_strchr 0084  
                                                          ??_tratarSerial 0032  
                                                                ??_strlen 0082  
                                                                ??_strstr 0093  
                                                       __size_of___ftpack 00C4  
                                                             __pbssCOMRAM 0044  
                                                       __size_of___lwtoft 0028  
                                                           _clearShiftREG 73D0  
                                                           __pcstackBANK0 0080  
                                                   __size_of_limparBuffer 0024  
                                                        ??_tela_ajusteRTC 00B7  
                                                   lerTransdutor@_pressao 002B  
                                                       i2___lwmod@divisor 000A  
                                                       i2___lwmod@counter 000C  
                                                     i2_getDS1307TimeDate 2F0C  
                                                            _isdigit$1821 0081  
                                                        intToFloatStr@end 00C0  
                                                                ?i2_delay 0001  
                                                                ?_Lcd_Cmd 0001  
                                                                ?i2_putch 0001  
                                                               __doprnt@c 00A0  
                                                               __doprnt@f 008E  
                                                               _dataLoger 22D4  
                                                            ??_acaoBombas 0084  
                                                        ___lwdiv@dividend 0080  
                                                     lerTransdutor@tensao 002E  
                                                        ??_Lcd_Set_Cursor 0084  
                                                               __pintcode 0008  
                                                    ?i2_getDS1307TimeDate 0006  
                                                           __pmediumconst 7BB8  
                                                         _acaoTesteBombas 1486  
                                                               _flag_b_ok 0052  
                                                     configuraTelefones@i 00BD  
                                                                ?___awdiv 0080  
                                                                ?___ftadd 001B  
                                                                ?___awmod 0080  
                                                          ?_aguardaBuffer 0093  
                                                                ?___ftdiv 001B  
                                                     __end_ofi2_I2C_Start 7048  
                                                                ?___lldiv 0080  
                                                                ?___ftmul 000C  
                                                                ?___fttol 001B  
                                                     __end_ofi2_I2C_Write 7092  
                                                               _getSerial 2BC2  
                                                                ?___lwdiv 0080  
                                                                ?___lwmod 0087  
                                                                ?__doprnt 008C  
                                                               _bufferAUX 01B8  
                                                               _ajust_tel 00D4  
                                                            _limparBuffer 7188  
                                                    readEEPROM_ext@adress 008C  
                                                                ?_btPress 0001  
                                                        ?_ajusteSP_Bombas 0001  
                                                   __end_of_lerTransdutor 22D4  
                                                                ?_readADC 0001  
                                                             _flag_b_mais 0054  
                                                 ?_configuraRegistradores 0001  
                                                   __end_ofi2_I2C_Restart 7060  
                                                                ?_isdigit 0001  
                                                                _I2C_Read 7476  
                                                          ?_clearShiftREG 0001  
                                                                _I2C_Wait 70F2  
                                                                _I2C_Stop 706C  
                                                     __end_of_readButtons 3F18  
                                            salvarLOG@dtl_ultimo_registro 008E  
                                                           ??_setShiftREG 0080  
                                                __size_of_writeEEPROM_ext 0046  
                                                  _configurarEstacionaria 26B4  
                                                  readEEPROM16_ext@adress 0093  
                                                                _BCDtoDEC 710C  
                                                      __end_of_acaoBombas 396E  
                                                     __end_of_informacoes 7A32  
                                                        ___lwdiv@quotient 0084  
                                                          __size_of_delay 0036  
                                                          __size_of_blink 003C  
                                                                ?_sprintf 00A1  
                                                                ?_strncmp 0086  
                                                                _DECtoBCD 7696  
                                                             ??i2___lwdiv 0005  
                                                             ??i2___lwmod 000C  
                                                          __size_of_timer 00DC  
                                                          __size_of_putch 001C  
                                                               _menu_posi 00D7  
                                                               _horimetro 004F  
                                                             ??i2__doprnt 0013  
                                       __end_ofcriarCaracteresCGRAM@F2839 7BD9  
                                                          ___wmul@product 0084  
                                                               btPress@bt 0080  
                                                              ?_dataLoger 0001  
                                                               _salvarLOG 2AA0  
                                                               _telaTeste 396E  
                                                                _PIE1bits 000F9D  
                                                             ??i2_isdigit 0001  
                                                               blink@line 0080  
                                                         _sp_pressao_rede 00DF  
                                                               _validaRTC 7838  
                                                        _horario_de_teste 00F0  
                                             __size_of_configuraTelefones 03D2  
                                                                Lcd_Cmd@a 0082  
                                                                _PIR1bits 000F9E  
                                                                i2u701_40 261A  
                                                                i2u713_40 3054  
                                                                i2u721_40 332A  
                                                                i2u553_40 7A5A  
                                                                i2u721_45 3320  
                                                                i2u731_40 2142  
                                                                i2u708_40 340C  
                                                                i2u724_40 337C  
                                                                i2u556_40 78A6  
                                                                i2u725_40 33A6  
                                                                i2u733_40 21D6  
                                                                i2u582_40 3806  
                                                                i2u590_45 738A  
                                                                i2u586_40 3892  
                                                   ??i2_getDS1307TimeDate 0008  
                                                                i2u691_40 2558  
                                                                i2u589_40 7386  
                                                                i2u694_40 259A  
                                                                i2u688_40 252A  
                                                                i2u698_40 25E0  
                                                             ??_Lcd_Clear 0083  
                                        _tempo_corrido_teste_estacionaria 00E9  
                                                             ??i2_sprintf 002A  
                                                               _sp_jockey 00DE  
                                                              ?_getSerial 00B7  
                                                            setShiftREG@i 0081  
                                            __end_of_criarCaracteresCGRAM 3730  
                                                               _teste_run 00DA  
                                                   __end_of_intToFloatStr 3E9A  
                                                                _RTC_Init 7406  
                                          __end_of_configuraRegistradores 79D4  
                                                              _ADCON0bits 000FC2  
                                                       ___wmul@multiplier 0080  
                                                                i2___wmul 7224  
                                                        _dtl_estacionaria 005F  
                                                        ??_Lcd_Write_Char 0081  
                                                                i2delay@x 0001  
                                               _tempo_limite_estacionaria 00EE  
                                                                _Lcd_Init 3D0C  
                                                       i2_writeEEPROM_ext 7524  
                                                                _Lcd_Port 76D8  
                                                       ?_tela_testeBombas 0001  
                                                         _tel_selecionado 00E6  
                                                               copy_data0 3F2C  
                                                               copy_data1 3F4C  
                                                        _readEEPROM16_ext 743E  
                                                      ?i2_writeEEPROM_ext 0004  
                                                      ??_tela_testeBombas 00B7  
                                                __end_of_Lcd_Write_String 74EA  
                                                        __size_ofi2_delay 0032  
                                                     __end_of_setShiftREG 7838  
                                                                i2putch@c 0001  
                                                 __end_of_acaoTesteBombas 185E  
                                                        __size_of_Lcd_Cmd 002C  
                                                        __size_ofi2_putch 0012  
                                                              ?_salvarLOG 0001  
                                                              ?_telaTeste 0001  
                                                    __end_of_tratarSerial 7278  
                                                             i2_I2C_Start 703C  
                                                             i2_I2C_Write 7084  
                                                     ??i2_writeEEPROM_ext 0005  
                                                     _intervalo_teste_dia 00F2  
                                                              ?_validaRTC 0001  
                                                                __Hrparam 0000  
                                                         ??_aguardaBuffer 0095  
                                                                __Lrparam 0000  
                                                   criarCaracteresCGRAM@i 00AB  
                                                   criarCaracteresCGRAM@j 00AA  
                                                   criarCaracteresCGRAM@k 00A9  
                                                      _tempo_teste_bombas 00FA  
                                                        __size_of___awdiv 009A  
                                                        __size_of___ftadd 01D0  
                                                        __size_of___awmod 0086  
                                                        __size_of___ftdiv 00E6  
                                                   i2___wmul@multiplicand 0003  
                                                        __size_of___lldiv 0092  
                                                        __size_of___ftmul 00F8  
                                                        __size_of___fttol 00E8  
                                                                __b_menos 0055  
                                                        __size_of___lwdiv 0062  
                                                        __size_of___lwmod 0052  
                                                             _readButtons 3E9A  
                                                                ___ftpack 37F4  
                                                        __size_of__doprnt 07FE  
                                                             BCDtoDEC@val 0080  
                                                     Lcd_Write_Char@tempp 0081  
                                                         ??_clearShiftREG 0080  
                                                        __size_of_btPress 0074  
                                              ??_partidaBombaEstacionaria 0083  
                                                         intToFloatStr@pr 00BA  
                                                         _putch$intlevel0 712E  
                                                                ___lwtoft 71AC  
                                                             _informacoes 79D4  
                                                    _ajusteSP_Bombas$2320 00C4  
                                                            ?_I2C_Restart 0001  
                                                                _base_sec 0065  
                                                         _I2C_Master_Init 7B54  
                                                        __size_of_readADC 0028  
                                               __end_ofi2_writeEEPROM_ext 7560  
                                                          lerParametros@i 0095  
                                                                __sec_aux 00F3  
                                                           _tempo_partida 00EC  
                                                        __size_of_isdigit 0028  
                                                         ___lwdiv@divisor 0082  
                                                         ___lwdiv@counter 0086  
                                                                __ptext10 74EA  
                                                                __ptext11 3116  
                                                                __ptext20 79D4  
                                                                __ptext12 72D0  
                                                                __ptext21 296C  
                                                                __ptext13 3BE2  
                                                                __ptext30 7654  
                                                                __ptext22 710C  
                                                                __ptext14 3AAE  
                                                                __ptext31 3730  
                                                                __ptext23 22D4  
                                                                __ptext15 7A92  
                                                                __ptext40 7476  
                                                                __ptext32 1C30  
                                                                __ptext24 366A  
                                                                __ptext16 7614  
                                                                __ptext41 3E1A  
                                                                __ptext33 759C  
                                                                __ptext25 26B4  
                                                                __ptext17 77F0  
                                                                __ptext50 3B48  
                                                                __ptext42 77A8  
                                                                __ptext34 7560  
                                                                __ptext26 185E  
                                                                __ptext18 2CDE  
                                                                __ptext51 73D0  
                                                                __ptext43 00F0  
                                                                __ptext35 1486  
                                                                __ptext27 797E  
                                                                __ptext19 743E  
                                                                __ptext60 70F2  
                                                                __ptext52 3F8C  
                                                                __ptext44 7126  
                                                                __ptext36 2AA0  
                                                                __ptext28 3598  
                                                                __ptext61 3D0C  
                                                                __ptext53 38B8  
                                                                __ptext45 71FC  
                                                                __ptext37 7762  
                                                                __ptext29 74B0  
                                                                __ptext70 08EE  
                                                                __ptext62 70B2  
                                                                __ptext54 3202  
                                                                __ptext46 72A4  
                                                                __ptext38 7928  
                                                                __ptext71 70A0  
                                                                __ptext63 7278  
                                                                __ptext55 739A  
                                                                __ptext47 78D6  
                                                                __ptext39 7078  
                                                                __ptext80 70C4  
                                                                __ptext72 7164  
                                                                __ptext64 76D8  
                                                                __ptext56 7406  
                                                                __ptext48 7AF2  
                                                                __ptext81 7332  
                                                                __ptext73 7224  
                                                                __ptext65 7B54  
                                                                __ptext57 7092  
                                                                __ptext49 3D94  
                                                                __ptext90 20BC  
                                                                __ptext82 7142  
                                                                __ptext74 7886  
                                                                __ptext66 3C7A  
                                                                __ptext58 706C  
                                                                __ptext91 71D4  
                                                                __ptext83 7524  
                                                                __ptext75 7A32  
                                                                __ptext59 7060  
                                                                __ptext92 71AC  
                                                                __ptext84 7300  
                                                                __ptext76 34BC  
                                                                __ptext68 724E  
                                                                __ptext93 32EE  
                                                                __ptext85 7084  
                                                                __ptext77 2F0C  
                                                                __ptext69 771C  
                                                                __ptext94 301E  
                                                                __ptext86 7048  
                                                                __ptext78 7054  
                                                                __ptext95 3A12  
                                                                __ptext87 703C  
                                                                __ptext79 7364  
                                                                __ptext96 33D6  
                                                                __ptext88 70DA  
                                                                __ptext97 24E4  
                                                                __ptext89 3E9A  
                                                                __ptext98 37F4  
                                                                __ptext99 0000  
                                                                _ajst_rtc 0399  
                                                                _bt_press 0071  
                                                        __size_of_sprintf 0048  
                                                        acaoTesteBombas@i 00D3  
                                                        __size_of_strncmp 009A  
                                                                _incendio 00D9  
                                                          i2_isdigit$1821 0002  
                                                       ??_writeEEPROM_ext 008D  
                                                           __size_of_atoi 00EC  
                                                           __size_of_main 03D8  
                                                             ??_dataLoger 00B7  
                                                     _status_estacionaria 00FC  
                                                              strncmp@len 008A  
                                                         i2__doprnt@width 001F  
                                                                blink@end 0083  
                                                                _tel_posi 00D5  
                                               _criarCaracteresCGRAM$1349 00A7  
                                                                int$flags 0074  
                                                                atoi@sign 00C5  
                                                             ??_getSerial 00BA  
                                                         _str_recebido_ok 005A  
                                                              _INTCONbits 000FF2  
                                                              i2_I2C_Read 7364  
                                                              i2_I2C_Wait 70DA  
                                                              i2_I2C_Stop 7048  
                                                          telaTeste@sinal 00C8  
                                                             _setShiftREG 77F0  
                                                                isdigit@c 0082  
                                                                memset@p1 0080  
                                                              i2_BCDtoDEC 70C4  
                                                             DECtoBCD@res 0089  
                                                             DECtoBCD@val 0088  
                                                _acaoTesteBomasProgramado 7560  
                                                                intlevel2 0006  
                                                               sprintf@ap 00B1  
                                                               sprintf@pb 00B3  
                                                               sprintf@wh 00A1  
                                                    _criarCaracteresCGRAM 366A  
                                                               strchr@chr 0082  
                                                        ___lwmod@dividend 0087  
                                                               strchr@ptr 0080  
                                                        ___lldiv@dividend 0080  
                                         i2getDS1307TimeDate@ptrToUserVal 0006  
                                           getDS1307TimeDate@ptrToUserVal 008C  
                                                             ??_salvarLOG 008E  
                                                        ?_acaoTesteBombas 0001  
                                                             ??_telaTeste 00C8  
                                                             ??_validaRTC 0080  
                                                               strncmp@s1 0086  
                                                               strncmp@s2 0088  
                                                          _dataLoger$1391 00B9  
                                                          _dataLoger$1386 00B7  
                                                          _dataLoger$1396 00BB  
                                                           _teste_sms_run 00E5  
                                                        aguardaBuffer@str 0093  
                                                       _getDS1307TimeDate 296C  
                                                       _setDS1307TimeDate 2DFA  
                                                                printf@ap 00B5  
                                                                printf@pb 00B7  
                                                            getSerial@end 00B9  
                                                            getSerial@ret 00BF  
                                                            getSerial@str 00B7  
                                                 __end_of_I2C_Master_Init 7BB8  
                                                      ?_getDS1307TimeDate 008C  
                                                      ?_setDS1307TimeDate 008C  
                                                      Lcd_Set_Cursor@temp 0087  
                                                              i2_RTC_Init 7332  
                                                                sprintf@f 00A3  
                                                 ?_configurarEstacionaria 0001  
                                                        ___lldiv@quotient 0088  
                                                             _qtd_leitura 0063  
                                                         ___lwmod@divisor 0089  
                                              __size_ofi2_writeEEPROM_ext 003C  
                                                                strlen@cp 0084  
                                                         ___lwmod@counter 008B  
                                                     ??_getDS1307TimeDate 008E  
                                                     ??_setDS1307TimeDate 008E  
                                                            _sp_principal 00DD  
                                                                strstr@s1 008F  
                                                                strstr@s2 0091  
                                                  __size_of_lerParametros 011C  
                                                   __size_of_tratarSerial 002A  
                                                   ?_criarCaracteresCGRAM 0001  
                                                           _sub_menu_posi 005D  
                                                             _option_posi 00D8  
                                         _tempo_limite_teste_estacionaria 00EA  
                                               __end_of_getDS1307TimeDate 2AA0  
                                               __end_of_setDS1307TimeDate 2F0C  
