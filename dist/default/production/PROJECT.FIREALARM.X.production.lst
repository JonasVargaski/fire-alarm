

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Aug 25 13:55:14 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   116                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   117  0000                     
   118                           ; Version 1.45
   119                           ; Generated 16/11/2017 GMT
   120                           ; 
   121                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   122                           ; All rights reserved.
   123                           ; 
   124                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   125                           ; 
   126                           ; Redistribution and use in source and binary forms, with or without modification, are
   127                           ; permitted provided that the following conditions are met:
   128                           ; 
   129                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   130                           ;        conditions and the following disclaimer.
   131                           ; 
   132                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   133                           ;        of conditions and the following disclaimer in the documentation and/or other
   134                           ;        materials provided with the distribution.
   135                           ; 
   136                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   137                           ;        software without specific prior written permission.
   138                           ; 
   139                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   140                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   141                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   142                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   143                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   144                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   145                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   146                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   147                           ; 
   148                           ; 
   149                           ; Code-generator required, PIC18F452 Definitions
   150                           ; 
   151                           ; SFR Addresses
   152  0000                     
   153                           	psect	idataBANK0
   154  006CA0                     __pidataBANK0:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _pressao
   158  006CA0  0062               	dw	98
   159                           
   160                           ;initializer for _dtl_posicao
   161  006CA2  3C                 	db	60
   162                           
   163                           ;initializer for _status_estacionaria
   164  006CA3  01                 	db	1
   165                           
   166                           ;initializer for _status_principal
   167  006CA4  01                 	db	1
   168                           
   169                           ;initializer for _status_jockey
   170  006CA5  01                 	db	1
   171                           
   172                           ;initializer for _timerVerificarSinal
   173  006CA6  05                 	db	5
   174                           
   175                           ;initializer for _intensidadeSinal
   176  006CA7  20                 	db	32
   177                           
   178                           	psect	idataBANK1
   179  006C9C                     __pidataBANK1:
   180                           	opt stack 0
   181                           
   182                           ;initializer for intToFloatStr@F2544
   183  006C9C  20                 	db	32
   184  006C9D  20                 	db	32
   185  006C9E  20                 	db	32
   186  006C9F  20                 	db	32
   187                           
   188                           	psect	mediumconst
   189  007A9C                     __pmediumconst:
   190                           	opt stack 0
   191  007A9C  00                 	db	0
   192  007A9D                     criarCaracteresCGRAM@F2956:
   193                           	opt stack 0
   194  007A9D  00                 	db	0
   195  007A9E  1F                 	db	31
   196  007A9F  0E                 	db	14
   197  007AA0  04                 	db	4
   198  007AA1  04                 	db	4
   199  007AA2  04                 	db	4
   200  007AA3  04                 	db	4
   201  007AA4  04                 	db	4
   202  007AA5  00                 	db	0
   203  007AA6  00                 	db	0
   204  007AA7  00                 	db	0
   205  007AA8  00                 	db	0
   206  007AA9  00                 	db	0
   207  007AAA  10                 	db	16
   208  007AAB  10                 	db	16
   209  007AAC  10                 	db	16
   210  007AAD  00                 	db	0
   211  007AAE  00                 	db	0
   212  007AAF  00                 	db	0
   213  007AB0  04                 	db	4
   214  007AB1  04                 	db	4
   215  007AB2  14                 	db	20
   216  007AB3  14                 	db	20
   217  007AB4  14                 	db	20
   218  007AB5  00                 	db	0
   219  007AB6  01                 	db	1
   220  007AB7  01                 	db	1
   221  007AB8  05                 	db	5
   222  007AB9  05                 	db	5
   223  007ABA  15                 	db	21
   224  007ABB  15                 	db	21
   225  007ABC  15                 	db	21
   226  007ABD  0A                 	db	10
   227  007ABE  0A                 	db	10
   228  007ABF  1F                 	db	31
   229  007AC0  11                 	db	17
   230  007AC1  11                 	db	17
   231  007AC2  0E                 	db	14
   232  007AC3  04                 	db	4
   233  007AC4  04                 	db	4
   234  007AC5  00                 	db	0
   235  007AC6  00                 	db	0
   236  007AC7  00                 	db	0
   237  007AC8  00                 	db	0
   238  007AC9  00                 	db	0
   239  007ACA  00                 	db	0
   240  007ACB  00                 	db	0
   241  007ACC  00                 	db	0
   242  007ACD                     __end_ofcriarCaracteresCGRAM@F2956:
   243                           	opt stack 0
   244  007ACD                     _dpowers:
   245                           	opt stack 0
   246  007ACD  0001               	dw	1
   247  007ACF  000A               	dw	10
   248  007AD1  0064               	dw	100
   249  007AD3  03E8               	dw	1000
   250  007AD5  2710               	dw	10000
   251  007AD7                     __end_of_dpowers:
   252                           	opt stack 0
   253  0000                     _SSPBUF	set	4041
   254  0000                     _SSPSTAT	set	4039
   255  0000                     _SSPADD	set	4040
   256  0000                     _SSPCON2	set	4037
   257  0000                     _SSPCON1	set	4038
   258  0000                     _RCREG	set	4014
   259  0000                     _TMR0L	set	4054
   260  0000                     _TMR0H	set	4055
   261  0000                     _PORTCbits	set	3970
   262  0000                     _PORTDbits	set	3971
   263  0000                     _PORTBbits	set	3969
   264  0000                     _PORTEbits	set	3972
   265  0000                     _TXREG	set	4013
   266  0000                     _ADRESL	set	4035
   267  0000                     _ADRESH	set	4036
   268  0000                     _ADCON0bits	set	4034
   269  0000                     _TRISEbits	set	3990
   270  0000                     _TRISBbits	set	3987
   271  0000                     _PIE1bits	set	3997
   272  0000                     _PIR1bits	set	3998
   273  0000                     _INTCONbits	set	4082
   274  0000                     _SPBRG	set	4015
   275  0000                     _RCSTAbits	set	4011
   276  0000                     _TXSTAbits	set	4012
   277  0000                     _TRISCbits	set	3988
   278  0000                     _TRISDbits	set	3989
   279  0000                     _INTCON	set	4082
   280  0000                     _T0CON	set	4053
   281  0000                     _PORTAbits	set	3968
   282  0000                     _TRISAbits	set	3986
   283  0000                     _ADCON1	set	4033
   284  0000                     _ADCON0	set	4034
   285  0000                     _ACKEN	set	32300
   286  0000                     _ACKDT	set	32301
   287  0000                     _RCEN	set	32299
   288  0000                     _PEN	set	32298
   289  0000                     _RSEN	set	32297
   290  0000                     _SEN	set	32296
   291  0000                     _RCIF	set	31989
   292  0000                     _TMR0IF	set	32658
   293  007AD7                     STR_14:
   294  007AD7  54                 	db	84	;'T'
   295  007AD8  45                 	db	69	;'E'
   296  007AD9  43                 	db	67	;'C'
   297  007ADA  48                 	db	72	;'H'
   298  007ADB  4E                 	db	78	;'N'
   299  007ADC  4F                 	db	79	;'O'
   300  007ADD  57                 	db	87	;'W'
   301  007ADE  20                 	db	32
   302  007ADF  53                 	db	83	;'S'
   303  007AE0  69                 	db	105	;'i'
   304  007AE1  73                 	db	115	;'s'
   305  007AE2  74                 	db	116	;'t'
   306  007AE3  65                 	db	101	;'e'
   307  007AE4  6D                 	db	109	;'m'
   308  007AE5  61                 	db	97	;'a'
   309  007AE6  73                 	db	115	;'s'
   310  007AE7  20                 	db	32
   311  007AE8  65                 	db	101	;'e'
   312  007AE9  6D                 	db	109	;'m'
   313  007AEA  62                 	db	98	;'b'
   314  007AEB  61                 	db	97	;'a'
   315  007AEC  72                 	db	114	;'r'
   316  007AED  63                 	db	99	;'c'
   317  007AEE  61                 	db	97	;'a'
   318  007AEF  64                 	db	100	;'d'
   319  007AF0  6F                 	db	111	;'o'
   320  007AF1  73                 	db	115	;'s'
   321  007AF2  0D                 	db	13
   322  007AF3  0A                 	db	10
   323  007AF4  0D                 	db	13
   324  007AF5  0A                 	db	10
   325  007AF6  54                 	db	84	;'T'
   326  007AF7  65                 	db	101	;'e'
   327  007AF8  73                 	db	115	;'s'
   328  007AF9  74                 	db	116	;'t'
   329  007AFA  65                 	db	101	;'e'
   330  007AFB  20                 	db	32
   331  007AFC  6D                 	db	109	;'m'
   332  007AFD  61                 	db	97	;'a'
   333  007AFE  6E                 	db	110	;'n'
   334  007AFF  75                 	db	117	;'u'
   335  007B00  61                 	db	97	;'a'
   336  007B01  6C                 	db	108	;'l'
   337  007B02  20                 	db	32
   338  007B03  64                 	db	100	;'d'
   339  007B04  65                 	db	101	;'e'
   340  007B05  20                 	db	32
   341  007B06  63                 	db	99	;'c'
   342  007B07  6F                 	db	111	;'o'
   343  007B08  6D                 	db	109	;'m'
   344  007B09  75                 	db	117	;'u'
   345  007B0A  6E                 	db	110	;'n'
   346  007B0B  69                 	db	105	;'i'
   347  007B0C  63                 	db	99	;'c'
   348  007B0D  61                 	db	97	;'a'
   349  007B0E  63                 	db	99	;'c'
   350  007B0F  61                 	db	97	;'a'
   351  007B10  6F                 	db	111	;'o'
   352  007B11  2E                 	db	46
   353  007B12  0D                 	db	13
   354  007B13  0A                 	db	10
   355  007B14  44                 	db	68	;'D'
   356  007B15  61                 	db	97	;'a'
   357  007B16  74                 	db	116	;'t'
   358  007B17  61                 	db	97	;'a'
   359  007B18  3A                 	db	58	;':'
   360  007B19  20                 	db	32
   361  007B1A  25                 	db	37
   362  007B1B  30                 	db	48	;'0'
   363  007B1C  32                 	db	50	;'2'
   364  007B1D  64                 	db	100	;'d'
   365  007B1E  2F                 	db	47
   366  007B1F  25                 	db	37
   367  007B20  30                 	db	48	;'0'
   368  007B21  32                 	db	50	;'2'
   369  007B22  64                 	db	100	;'d'
   370  007B23  2F                 	db	47
   371  007B24  25                 	db	37
   372  007B25  30                 	db	48	;'0'
   373  007B26  32                 	db	50	;'2'
   374  007B27  64                 	db	100	;'d'
   375  007B28  20                 	db	32
   376  007B29  25                 	db	37
   377  007B2A  30                 	db	48	;'0'
   378  007B2B  32                 	db	50	;'2'
   379  007B2C  64                 	db	100	;'d'
   380  007B2D  3A                 	db	58	;':'
   381  007B2E  25                 	db	37
   382  007B2F  30                 	db	48	;'0'
   383  007B30  32                 	db	50	;'2'
   384  007B31  64                 	db	100	;'d'
   385  007B32  3A                 	db	58	;':'
   386  007B33  25                 	db	37
   387  007B34  30                 	db	48	;'0'
   388  007B35  32                 	db	50	;'2'
   389  007B36  64                 	db	100	;'d'
   390  007B37  0D                 	db	13
   391  007B38  0A                 	db	10
   392  007B39  0D                 	db	13
   393  007B3A  0A                 	db	10
   394  007B3B  0D                 	db	13
   395  007B3C  0A                 	db	10
   396  007B3D  56                 	db	86	;'V'
   397  007B3E  65                 	db	101	;'e'
   398  007B3F  72                 	db	114	;'r'
   399  007B40  73                 	db	115	;'s'
   400  007B41  61                 	db	97	;'a'
   401  007B42  6F                 	db	111	;'o'
   402  007B43  20                 	db	32
   403  007B44  64                 	db	100	;'d'
   404  007B45  6F                 	db	111	;'o'
   405  007B46  20                 	db	32
   406  007B47  73                 	db	115	;'s'
   407  007B48  69                 	db	105	;'i'
   408  007B49  73                 	db	115	;'s'
   409  007B4A  74                 	db	116	;'t'
   410  007B4B  65                 	db	101	;'e'
   411  007B4C  6D                 	db	109	;'m'
   412  007B4D  61                 	db	97	;'a'
   413  007B4E  3A                 	db	58	;':'
   414  007B4F  20                 	db	32
   415  007B50  25                 	db	37
   416  007B51  73                 	db	115	;'s'
   417  007B52  0D                 	db	13
   418  007B53  0A                 	db	10
   419  007B54  00                 	db	0
   420  007B55                     STR_26:
   421  007B55  54                 	db	84	;'T'
   422  007B56  45                 	db	69	;'E'
   423  007B57  53                 	db	83	;'S'
   424  007B58  54                 	db	84	;'T'
   425  007B59  45                 	db	69	;'E'
   426  007B5A  20                 	db	32
   427  007B5B  44                 	db	68	;'D'
   428  007B5C  45                 	db	69	;'E'
   429  007B5D  20                 	db	32
   430  007B5E  42                 	db	66	;'B'
   431  007B5F  4F                 	db	79	;'O'
   432  007B60  4D                 	db	77	;'M'
   433  007B61  42                 	db	66	;'B'
   434  007B62  41                 	db	65	;'A'
   435  007B63  53                 	db	83	;'S'
   436  007B64  20                 	db	32
   437  007B65  52                 	db	82	;'R'
   438  007B66  45                 	db	69	;'E'
   439  007B67  41                 	db	65	;'A'
   440  007B68  4C                 	db	76	;'L'
   441  007B69  49                 	db	73	;'I'
   442  007B6A  5A                 	db	90	;'Z'
   443  007B6B  41                 	db	65	;'A'
   444  007B6C  44                 	db	68	;'D'
   445  007B6D  4F                 	db	79	;'O'
   446  007B6E  0D                 	db	13
   447  007B6F  0A                 	db	10
   448  007B70  45                 	db	69	;'E'
   449  007B71  4D                 	db	77	;'M'
   450  007B72  20                 	db	32
   451  007B73  25                 	db	37
   452  007B74  30                 	db	48	;'0'
   453  007B75  32                 	db	50	;'2'
   454  007B76  64                 	db	100	;'d'
   455  007B77  3A                 	db	58	;':'
   456  007B78  25                 	db	37
   457  007B79  30                 	db	48	;'0'
   458  007B7A  32                 	db	50	;'2'
   459  007B7B  64                 	db	100	;'d'
   460  007B7C  3A                 	db	58	;':'
   461  007B7D  25                 	db	37
   462  007B7E  30                 	db	48	;'0'
   463  007B7F  32                 	db	50	;'2'
   464  007B80  64                 	db	100	;'d'
   465  007B81  20                 	db	32
   466  007B82  25                 	db	37
   467  007B83  30                 	db	48	;'0'
   468  007B84  32                 	db	50	;'2'
   469  007B85  64                 	db	100	;'d'
   470  007B86  2F                 	db	47
   471  007B87  25                 	db	37
   472  007B88  30                 	db	48	;'0'
   473  007B89  32                 	db	50	;'2'
   474  007B8A  64                 	db	100	;'d'
   475  007B8B  2F                 	db	47
   476  007B8C  25                 	db	37
   477  007B8D  30                 	db	48	;'0'
   478  007B8E  32                 	db	50	;'2'
   479  007B8F  64                 	db	100	;'d'
   480  007B90  0D                 	db	13
   481  007B91  0A                 	db	10
   482  007B92  4A                 	db	74	;'J'
   483  007B93  4F                 	db	79	;'O'
   484  007B94  43                 	db	67	;'C'
   485  007B95  4B                 	db	75	;'K'
   486  007B96  45                 	db	69	;'E'
   487  007B97  59                 	db	89	;'Y'
   488  007B98  3A                 	db	58	;':'
   489  007B99  20                 	db	32
   490  007B9A  25                 	db	37
   491  007B9B  73                 	db	115	;'s'
   492  007B9C  0D                 	db	13
   493  007B9D  0A                 	db	10
   494  007B9E  50                 	db	80	;'P'
   495  007B9F  52                 	db	82	;'R'
   496  007BA0  49                 	db	73	;'I'
   497  007BA1  4E                 	db	78	;'N'
   498  007BA2  43                 	db	67	;'C'
   499  007BA3  49                 	db	73	;'I'
   500  007BA4  50                 	db	80	;'P'
   501  007BA5  41                 	db	65	;'A'
   502  007BA6  4C                 	db	76	;'L'
   503  007BA7  3A                 	db	58	;':'
   504  007BA8  20                 	db	32
   505  007BA9  25                 	db	37
   506  007BAA  73                 	db	115	;'s'
   507  007BAB  0D                 	db	13
   508  007BAC  0A                 	db	10
   509  007BAD  43                 	db	67	;'C'
   510  007BAE  4F                 	db	79	;'O'
   511  007BAF  4D                 	db	77	;'M'
   512  007BB0  42                 	db	66	;'B'
   513  007BB1  55                 	db	85	;'U'
   514  007BB2  53                 	db	83	;'S'
   515  007BB3  54                 	db	84	;'T'
   516  007BB4  41                 	db	65	;'A'
   517  007BB5  4F                 	db	79	;'O'
   518  007BB6  3A                 	db	58	;':'
   519  007BB7  20                 	db	32
   520  007BB8  25                 	db	37
   521  007BB9  73                 	db	115	;'s'
   522  007BBA  0D                 	db	13
   523  007BBB  0A                 	db	10
   524  007BBC  00                 	db	0
   525  007BBD                     STR_25:
   526  007BBD  44                 	db	68	;'D'
   527  007BBE  49                 	db	73	;'I'
   528  007BBF  53                 	db	83	;'S'
   529  007BC0  50                 	db	80	;'P'
   530  007BC1  41                 	db	65	;'A'
   531  007BC2  52                 	db	82	;'R'
   532  007BC3  4F                 	db	79	;'O'
   533  007BC4  20                 	db	32
   534  007BC5  41                 	db	65	;'A'
   535  007BC6  4C                 	db	76	;'L'
   536  007BC7  41                 	db	65	;'A'
   537  007BC8  52                 	db	82	;'R'
   538  007BC9  4D                 	db	77	;'M'
   539  007BCA  45                 	db	69	;'E'
   540  007BCB  20                 	db	32
   541  007BCC  44                 	db	68	;'D'
   542  007BCD  45                 	db	69	;'E'
   543  007BCE  20                 	db	32
   544  007BCF  49                 	db	73	;'I'
   545  007BD0  4E                 	db	78	;'N'
   546  007BD1  43                 	db	67	;'C'
   547  007BD2  45                 	db	69	;'E'
   548  007BD3  4E                 	db	78	;'N'
   549  007BD4  44                 	db	68	;'D'
   550  007BD5  49                 	db	73	;'I'
   551  007BD6  4F                 	db	79	;'O'
   552  007BD7  0D                 	db	13
   553  007BD8  0A                 	db	10
   554  007BD9  45                 	db	69	;'E'
   555  007BDA  4D                 	db	77	;'M'
   556  007BDB  20                 	db	32
   557  007BDC  25                 	db	37
   558  007BDD  30                 	db	48	;'0'
   559  007BDE  32                 	db	50	;'2'
   560  007BDF  64                 	db	100	;'d'
   561  007BE0  3A                 	db	58	;':'
   562  007BE1  25                 	db	37
   563  007BE2  30                 	db	48	;'0'
   564  007BE3  32                 	db	50	;'2'
   565  007BE4  64                 	db	100	;'d'
   566  007BE5  3A                 	db	58	;':'
   567  007BE6  25                 	db	37
   568  007BE7  30                 	db	48	;'0'
   569  007BE8  32                 	db	50	;'2'
   570  007BE9  64                 	db	100	;'d'
   571  007BEA  20                 	db	32
   572  007BEB  25                 	db	37
   573  007BEC  30                 	db	48	;'0'
   574  007BED  32                 	db	50	;'2'
   575  007BEE  64                 	db	100	;'d'
   576  007BEF  2F                 	db	47
   577  007BF0  25                 	db	37
   578  007BF1  30                 	db	48	;'0'
   579  007BF2  32                 	db	50	;'2'
   580  007BF3  64                 	db	100	;'d'
   581  007BF4  2F                 	db	47
   582  007BF5  25                 	db	37
   583  007BF6  30                 	db	48	;'0'
   584  007BF7  32                 	db	50	;'2'
   585  007BF8  64                 	db	100	;'d'
   586  007BF9  0D                 	db	13
   587  007BFA  0A                 	db	10
   588  007BFB  00                 	db	0
   589  007BFC                     STR_75:
   590  007BFC  44                 	db	68	;'D'
   591  007BFD  61                 	db	97	;'a'
   592  007BFE  74                 	db	116	;'t'
   593  007BFF  61                 	db	97	;'a'
   594  007C00  3A                 	db	58	;':'
   595  007C01  20                 	db	32
   596  007C02  25                 	db	37
   597  007C03  30                 	db	48	;'0'
   598  007C04  32                 	db	50	;'2'
   599  007C05  64                 	db	100	;'d'
   600  007C06  2F                 	db	47
   601  007C07  25                 	db	37
   602  007C08  30                 	db	48	;'0'
   603  007C09  32                 	db	50	;'2'
   604  007C0A  64                 	db	100	;'d'
   605  007C0B  2F                 	db	47
   606  007C0C  25                 	db	37
   607  007C0D  30                 	db	48	;'0'
   608  007C0E  32                 	db	50	;'2'
   609  007C0F  64                 	db	100	;'d'
   610  007C10  20                 	db	32
   611  007C11  25                 	db	37
   612  007C12  30                 	db	48	;'0'
   613  007C13  32                 	db	50	;'2'
   614  007C14  64                 	db	100	;'d'
   615  007C15  3A                 	db	58	;':'
   616  007C16  25                 	db	37
   617  007C17  30                 	db	48	;'0'
   618  007C18  32                 	db	50	;'2'
   619  007C19  64                 	db	100	;'d'
   620  007C1A  00                 	db	0
   621  007C1B                     STR_55:
   622  007C1B  20                 	db	32
   623  007C1C  25                 	db	37
   624  007C1D  30                 	db	48	;'0'
   625  007C1E  32                 	db	50	;'2'
   626  007C1F  64                 	db	100	;'d'
   627  007C20  3A                 	db	58	;':'
   628  007C21  25                 	db	37
   629  007C22  30                 	db	48	;'0'
   630  007C23  32                 	db	50	;'2'
   631  007C24  64                 	db	100	;'d'
   632  007C25  3A                 	db	58	;':'
   633  007C26  25                 	db	37
   634  007C27  30                 	db	48	;'0'
   635  007C28  32                 	db	50	;'2'
   636  007C29  64                 	db	100	;'d'
   637  007C2A  20                 	db	32
   638  007C2B  25                 	db	37
   639  007C2C  30                 	db	48	;'0'
   640  007C2D  32                 	db	50	;'2'
   641  007C2E  64                 	db	100	;'d'
   642  007C2F  2F                 	db	47
   643  007C30  25                 	db	37
   644  007C31  30                 	db	48	;'0'
   645  007C32  32                 	db	50	;'2'
   646  007C33  64                 	db	100	;'d'
   647  007C34  00                 	db	0
   648  007C35                     STR_59:
   649  007C35  20                 	db	32
   650  007C36  2A                 	db	42
   651  007C37  66                 	db	102	;'f'
   652  007C38  61                 	db	97	;'a'
   653  007C39  6C                 	db	108	;'l'
   654  007C3A  68                 	db	104	;'h'
   655  007C3B  61                 	db	97	;'a'
   656  007C3C  20                 	db	32
   657  007C3D  42                 	db	66	;'B'
   658  007C3E  2E                 	db	46
   659  007C3F  20                 	db	32
   660  007C40  70                 	db	112	;'p'
   661  007C41  72                 	db	114	;'r'
   662  007C42  69                 	db	105	;'i'
   663  007C43  6E                 	db	110	;'n'
   664  007C44  63                 	db	99	;'c'
   665  007C45  69                 	db	105	;'i'
   666  007C46  70                 	db	112	;'p'
   667  007C47  61                 	db	97	;'a'
   668  007C48  6C                 	db	108	;'l'
   669  007C49  00                 	db	0
   670  007C4A                     STR_60:
   671  007C4A  20                 	db	32
   672  007C4B  2A                 	db	42
   673  007C4C  66                 	db	102	;'f'
   674  007C4D  61                 	db	97	;'a'
   675  007C4E  6C                 	db	108	;'l'
   676  007C4F  68                 	db	104	;'h'
   677  007C50  61                 	db	97	;'a'
   678  007C51  20                 	db	32
   679  007C52  42                 	db	66	;'B'
   680  007C53  2E                 	db	46
   681  007C54  20                 	db	32
   682  007C55  63                 	db	99	;'c'
   683  007C56  6F                 	db	111	;'o'
   684  007C57  6D                 	db	109	;'m'
   685  007C58  62                 	db	98	;'b'
   686  007C59  75                 	db	117	;'u'
   687  007C5A  73                 	db	115	;'s'
   688  007C5B  74                 	db	116	;'t'
   689  007C5C  61                 	db	97	;'a'
   690  007C5D  6F                 	db	111	;'o'
   691  007C5E  00                 	db	0
   692  007C5F                     STR_69:
   693  007C5F  23                 	db	35
   694  007C60  50                 	db	80	;'P'
   695  007C61  72                 	db	114	;'r'
   696  007C62  6F                 	db	111	;'o'
   697  007C63  78                 	db	120	;'x'
   698  007C64  69                 	db	105	;'i'
   699  007C65  6D                 	db	109	;'m'
   700  007C66  6F                 	db	111	;'o'
   701  007C67  20                 	db	32
   702  007C68  65                 	db	101	;'e'
   703  007C69  6D                 	db	109	;'m'
   704  007C6A  20                 	db	32
   705  007C6B  25                 	db	37
   706  007C6C  32                 	db	50	;'2'
   707  007C6D  64                 	db	100	;'d'
   708  007C6E  20                 	db	32
   709  007C6F  64                 	db	100	;'d'
   710  007C70  69                 	db	105	;'i'
   711  007C71  61                 	db	97	;'a'
   712  007C72  73                 	db	115	;'s'
   713  007C73  00                 	db	0
   714  007C74                     STR_37:
   715  007C74  44                 	db	68	;'D'
   716  007C75  65                 	db	101	;'e'
   717  007C76  73                 	db	115	;'s'
   718  007C77  70                 	db	112	;'p'
   719  007C78  72                 	db	114	;'r'
   720  007C79  65                 	db	101	;'e'
   721  007C7A  73                 	db	115	;'s'
   722  007C7B  73                 	db	115	;'s'
   723  007C7C  75                 	db	117	;'u'
   724  007C7D  72                 	db	114	;'r'
   725  007C7E  69                 	db	105	;'i'
   726  007C7F  7A                 	db	122	;'z'
   727  007C80  61                 	db	97	;'a'
   728  007C81  6E                 	db	110	;'n'
   729  007C82  64                 	db	100	;'d'
   730  007C83  6F                 	db	111	;'o'
   731  007C84  2E                 	db	46
   732  007C85  2E                 	db	46
   733  007C86  2E                 	db	46
   734  007C87  00                 	db	0
   735  007C88                     STR_61:
   736  007C88  20                 	db	32
   737  007C89  41                 	db	65	;'A'
   738  007C8A  4C                 	db	76	;'L'
   739  007C8B  45                 	db	69	;'E'
   740  007C8C  52                 	db	82	;'R'
   741  007C8D  54                 	db	84	;'T'
   742  007C8E  41                 	db	65	;'A'
   743  007C8F  20                 	db	32
   744  007C90  44                 	db	68	;'D'
   745  007C91  45                 	db	69	;'E'
   746  007C92  20                 	db	32
   747  007C93  49                 	db	73	;'I'
   748  007C94  4E                 	db	78	;'N'
   749  007C95  43                 	db	67	;'C'
   750  007C96  45                 	db	69	;'E'
   751  007C97  4E                 	db	78	;'N'
   752  007C98  44                 	db	68	;'D'
   753  007C99  49                 	db	73	;'I'
   754  007C9A  4F                 	db	79	;'O'
   755  007C9B  00                 	db	0
   756  007C9C                     STR_57:
   757  007C9C  20                 	db	32
   758  007C9D  2A                 	db	42
   759  007C9E  66                 	db	102	;'f'
   760  007C9F  61                 	db	97	;'a'
   761  007CA0  6C                 	db	108	;'l'
   762  007CA1  68                 	db	104	;'h'
   763  007CA2  61                 	db	97	;'a'
   764  007CA3  20                 	db	32
   765  007CA4  76                 	db	118	;'v'
   766  007CA5  61                 	db	97	;'a'
   767  007CA6  6C                 	db	108	;'l'
   768  007CA7  2E                 	db	46
   769  007CA8  20                 	db	32
   770  007CA9  6C                 	db	108	;'l'
   771  007CAA  61                 	db	97	;'a'
   772  007CAB  64                 	db	100	;'d'
   773  007CAC  72                 	db	114	;'r'
   774  007CAD  61                 	db	97	;'a'
   775  007CAE  6F                 	db	111	;'o'
   776  007CAF  00                 	db	0
   777  007CB0                     STR_70:
   778  007CB0  49                 	db	73	;'I'
   779  007CB1  4E                 	db	78	;'N'
   780  007CB2  54                 	db	84	;'T'
   781  007CB3  45                 	db	69	;'E'
   782  007CB4  52                 	db	82	;'R'
   783  007CB5  56                 	db	86	;'V'
   784  007CB6  41                 	db	65	;'A'
   785  007CB7  4C                 	db	76	;'L'
   786  007CB8  4F                 	db	79	;'O'
   787  007CB9  3A                 	db	58	;':'
   788  007CBA  20                 	db	32
   789  007CBB  25                 	db	37
   790  007CBC  32                 	db	50	;'2'
   791  007CBD  64                 	db	100	;'d'
   792  007CBE  20                 	db	32
   793  007CBF  64                 	db	100	;'d'
   794  007CC0  69                 	db	105	;'i'
   795  007CC1  61                 	db	97	;'a'
   796  007CC2  73                 	db	115	;'s'
   797  007CC3  00                 	db	0
   798  007CC4                     STR_71:
   799  007CC4  48                 	db	72	;'H'
   800  007CC5  4F                 	db	79	;'O'
   801  007CC6  52                 	db	82	;'R'
   802  007CC7  41                 	db	65	;'A'
   803  007CC8  52                 	db	82	;'R'
   804  007CC9  49                 	db	73	;'I'
   805  007CCA  4F                 	db	79	;'O'
   806  007CCB  3A                 	db	58	;':'
   807  007CCC  20                 	db	32
   808  007CCD  25                 	db	37
   809  007CCE  30                 	db	48	;'0'
   810  007CCF  32                 	db	50	;'2'
   811  007CD0  64                 	db	100	;'d'
   812  007CD1  20                 	db	32
   813  007CD2  68                 	db	104	;'h'
   814  007CD3  6F                 	db	111	;'o'
   815  007CD4  72                 	db	114	;'r'
   816  007CD5  61                 	db	97	;'a'
   817  007CD6  73                 	db	115	;'s'
   818  007CD7  00                 	db	0
   819  007CD8                     STR_87:
   820  007CD8  53                 	db	83	;'S'
   821  007CD9  69                 	db	105	;'i'
   822  007CDA  73                 	db	115	;'s'
   823  007CDB  74                 	db	116	;'t'
   824  007CDC  65                 	db	101	;'e'
   825  007CDD  6D                 	db	109	;'m'
   826  007CDE  61                 	db	97	;'a'
   827  007CDF  73                 	db	115	;'s'
   828  007CE0  20                 	db	32
   829  007CE1  65                 	db	101	;'e'
   830  007CE2  6D                 	db	109	;'m'
   831  007CE3  62                 	db	98	;'b'
   832  007CE4  61                 	db	97	;'a'
   833  007CE5  72                 	db	114	;'r'
   834  007CE6  63                 	db	99	;'c'
   835  007CE7  61                 	db	97	;'a'
   836  007CE8  64                 	db	100	;'d'
   837  007CE9  6F                 	db	111	;'o'
   838  007CEA  73                 	db	115	;'s'
   839  007CEB  00                 	db	0
   840  007CEC                     STR_64:
   841  007CEC  20                 	db	32
   842  007CED  50                 	db	80	;'P'
   843  007CEE  72                 	db	114	;'r'
   844  007CEF  65                 	db	101	;'e'
   845  007CF0  73                 	db	115	;'s'
   846  007CF1  73                 	db	115	;'s'
   847  007CF2  20                 	db	32
   848  007CF3  45                 	db	69	;'E'
   849  007CF4  53                 	db	83	;'S'
   850  007CF5  43                 	db	67	;'C'
   851  007CF6  20                 	db	32
   852  007CF7  70                 	db	112	;'p'
   853  007CF8  2F                 	db	47
   854  007CF9  20                 	db	32
   855  007CFA  52                 	db	82	;'R'
   856  007CFB  65                 	db	101	;'e'
   857  007CFC  73                 	db	115	;'s'
   858  007CFD  65                 	db	101	;'e'
   859  007CFE  74                 	db	116	;'t'
   860  007CFF  00                 	db	0
   861  007D00                     STR_41:
   862  007D00  42                 	db	66	;'B'
   863  007D01  6F                 	db	111	;'o'
   864  007D02  6D                 	db	109	;'m'
   865  007D03  62                 	db	98	;'b'
   866  007D04  61                 	db	97	;'a'
   867  007D05  20                 	db	32
   868  007D06  50                 	db	80	;'P'
   869  007D07  72                 	db	114	;'r'
   870  007D08  69                 	db	105	;'i'
   871  007D09  6E                 	db	110	;'n'
   872  007D0A  63                 	db	99	;'c'
   873  007D0B  69                 	db	105	;'i'
   874  007D0C  70                 	db	112	;'p'
   875  007D0D  61                 	db	97	;'a'
   876  007D0E  6C                 	db	108	;'l'
   877  007D0F  2E                 	db	46
   878  007D10  2E                 	db	46
   879  007D11  2E                 	db	46
   880  007D12  00                 	db	0
   881  007D13                     STR_42:
   882  007D13  42                 	db	66	;'B'
   883  007D14  6F                 	db	111	;'o'
   884  007D15  6D                 	db	109	;'m'
   885  007D16  62                 	db	98	;'b'
   886  007D17  61                 	db	97	;'a'
   887  007D18  20                 	db	32
   888  007D19  43                 	db	67	;'C'
   889  007D1A  6F                 	db	111	;'o'
   890  007D1B  6D                 	db	109	;'m'
   891  007D1C  62                 	db	98	;'b'
   892  007D1D  75                 	db	117	;'u'
   893  007D1E  73                 	db	115	;'s'
   894  007D1F  74                 	db	116	;'t'
   895  007D20  61                 	db	97	;'a'
   896  007D21  6F                 	db	111	;'o'
   897  007D22  2E                 	db	46
   898  007D23  2E                 	db	46
   899  007D24  2E                 	db	46
   900  007D25  00                 	db	0
   901  007D26                     STR_101:
   902  007D26  23                 	db	35
   903  007D27  68                 	db	104	;'h'
   904  007D28  6F                 	db	111	;'o'
   905  007D29  72                 	db	114	;'r'
   906  007D2A  69                 	db	105	;'i'
   907  007D2B  6D                 	db	109	;'m'
   908  007D2C  65                 	db	101	;'e'
   909  007D2D  74                 	db	116	;'t'
   910  007D2E  72                 	db	114	;'r'
   911  007D2F  6F                 	db	111	;'o'
   912  007D30  3A                 	db	58	;':'
   913  007D31  25                 	db	37
   914  007D32  35                 	db	53	;'5'
   915  007D33  64                 	db	100	;'d'
   916  007D34  20                 	db	32
   917  007D35  6D                 	db	109	;'m'
   918  007D36  69                 	db	105	;'i'
   919  007D37  6E                 	db	110	;'n'
   920  007D38  00                 	db	0
   921  007D39                     STR_96:
   922  007D39  43                 	db	67	;'C'
   923  007D3A  6F                 	db	111	;'o'
   924  007D3B  6E                 	db	110	;'n'
   925  007D3C  66                 	db	102	;'f'
   926  007D3D  69                 	db	105	;'i'
   927  007D3E  67                 	db	103	;'g'
   928  007D3F  75                 	db	117	;'u'
   929  007D40  72                 	db	114	;'r'
   930  007D41  61                 	db	97	;'a'
   931  007D42  63                 	db	99	;'c'
   932  007D43  61                 	db	97	;'a'
   933  007D44  6F                 	db	111	;'o'
   934  007D45  20                 	db	32
   935  007D46  74                 	db	116	;'t'
   936  007D47  65                 	db	101	;'e'
   937  007D48  6D                 	db	109	;'m'
   938  007D49  70                 	db	112	;'p'
   939  007D4A  6F                 	db	111	;'o'
   940  007D4B  00                 	db	0
   941  007D4C                     STR_62:
   942  007D4C  45                 	db	69	;'E'
   943  007D4D  72                 	db	114	;'r'
   944  007D4E  72                 	db	114	;'r'
   945  007D4F  6F                 	db	111	;'o'
   946  007D50  20                 	db	32
   947  007D51  6E                 	db	110	;'n'
   948  007D52  6F                 	db	111	;'o'
   949  007D53  20                 	db	32
   950  007D54  54                 	db	84	;'T'
   951  007D55  72                 	db	114	;'r'
   952  007D56  61                 	db	97	;'a'
   953  007D57  6E                 	db	110	;'n'
   954  007D58  73                 	db	115	;'s'
   955  007D59  64                 	db	100	;'d'
   956  007D5A  75                 	db	117	;'u'
   957  007D5B  74                 	db	116	;'t'
   958  007D5C  6F                 	db	111	;'o'
   959  007D5D  72                 	db	114	;'r'
   960  007D5E  00                 	db	0
   961  007D5F                     STR_12:
   962  007D5F  41                 	db	65	;'A'
   963  007D60  54                 	db	84	;'T'
   964  007D61  2B                 	db	43
   965  007D62  43                 	db	67	;'C'
   966  007D63  4D                 	db	77	;'M'
   967  007D64  47                 	db	71	;'G'
   968  007D65  53                 	db	83	;'S'
   969  007D66  3D                 	db	61	;'='
   970  007D67  22                 	db	34
   971  007D68  2B                 	db	43
   972  007D69  35                 	db	53	;'5'
   973  007D6A  35                 	db	53	;'5'
   974  007D6B  25                 	db	37
   975  007D6C  73                 	db	115	;'s'
   976  007D6D  22                 	db	34
   977  007D6E  0D                 	db	13
   978  007D6F  0A                 	db	10
   979  007D70  00                 	db	0
   980  007D71                     STR_117:
   981  007D71  50                 	db	80	;'P'
   982  007D72  41                 	db	65	;'A'
   983  007D73  52                 	db	82	;'R'
   984  007D74  54                 	db	84	;'T'
   985  007D75  49                 	db	73	;'I'
   986  007D76  44                 	db	68	;'D'
   987  007D77  41                 	db	65	;'A'
   988  007D78  20                 	db	32
   989  007D79  43                 	db	67	;'C'
   990  007D7A  4F                 	db	79	;'O'
   991  007D7B  4D                 	db	77	;'M'
   992  007D7C  42                 	db	66	;'B'
   993  007D7D  55                 	db	85	;'U'
   994  007D7E  53                 	db	83	;'S'
   995  007D7F  54                 	db	84	;'T'
   996  007D80  41                 	db	65	;'A'
   997  007D81  4F                 	db	79	;'O'
   998  007D82  00                 	db	0
   999  007D83                     STR_119:
  1000  007D83  50                 	db	80	;'P'
  1001  007D84  45                 	db	69	;'E'
  1002  007D85  52                 	db	82	;'R'
  1003  007D86  49                 	db	73	;'I'
  1004  007D87  4F                 	db	79	;'O'
  1005  007D88  44                 	db	68	;'D'
  1006  007D89  4F                 	db	79	;'O'
  1007  007D8A  20                 	db	32
  1008  007D8B  44                 	db	68	;'D'
  1009  007D8C  45                 	db	69	;'E'
  1010  007D8D  20                 	db	32
  1011  007D8E  54                 	db	84	;'T'
  1012  007D8F  45                 	db	69	;'E'
  1013  007D90  53                 	db	83	;'S'
  1014  007D91  54                 	db	84	;'T'
  1015  007D92  45                 	db	69	;'E'
  1016  007D93  53                 	db	83	;'S'
  1017  007D94  00                 	db	0
  1018  007D95                     STR_58:
  1019  007D95  20                 	db	32
  1020  007D96  2A                 	db	42
  1021  007D97  66                 	db	102	;'f'
  1022  007D98  61                 	db	97	;'a'
  1023  007D99  6C                 	db	108	;'l'
  1024  007D9A  68                 	db	104	;'h'
  1025  007D9B  61                 	db	97	;'a'
  1026  007D9C  20                 	db	32
  1027  007D9D  42                 	db	66	;'B'
  1028  007D9E  2E                 	db	46
  1029  007D9F  20                 	db	32
  1030  007DA0  6A                 	db	106	;'j'
  1031  007DA1  6F                 	db	111	;'o'
  1032  007DA2  63                 	db	99	;'c'
  1033  007DA3  6B                 	db	107	;'k'
  1034  007DA4  65                 	db	101	;'e'
  1035  007DA5  79                 	db	121	;'y'
  1036  007DA6  00                 	db	0
  1037  007DA7                     STR_44:
  1038  007DA7  54                 	db	84	;'T'
  1039  007DA8  65                 	db	101	;'e'
  1040  007DA9  73                 	db	115	;'s'
  1041  007DAA  74                 	db	116	;'t'
  1042  007DAB  65                 	db	101	;'e'
  1043  007DAC  20                 	db	32
  1044  007DAD  43                 	db	67	;'C'
  1045  007DAE  6F                 	db	111	;'o'
  1046  007DAF  6E                 	db	110	;'n'
  1047  007DB0  63                 	db	99	;'c'
  1048  007DB1  6C                 	db	108	;'l'
  1049  007DB2  75                 	db	117	;'u'
  1050  007DB3  69                 	db	105	;'i'
  1051  007DB4  64                 	db	100	;'d'
  1052  007DB5  6F                 	db	111	;'o'
  1053  007DB6  21                 	db	33
  1054  007DB7  00                 	db	0
  1055  007DB8                     STR_88:
  1056  007DB8  20                 	db	32
  1057  007DB9  20                 	db	32
  1058  007DBA  20                 	db	32
  1059  007DBB  34                 	db	52	;'4'
  1060  007DBC  38                 	db	56	;'8'
  1061  007DBD  20                 	db	32
  1062  007DBE  39                 	db	57	;'9'
  1063  007DBF  39                 	db	57	;'9'
  1064  007DC0  39                 	db	57	;'9'
  1065  007DC1  30                 	db	48	;'0'
  1066  007DC2  36                 	db	54	;'6'
  1067  007DC3  2D                 	db	45
  1068  007DC4  35                 	db	53	;'5'
  1069  007DC5  36                 	db	54	;'6'
  1070  007DC6  35                 	db	53	;'5'
  1071  007DC7  31                 	db	49	;'1'
  1072  007DC8  00                 	db	0
  1073  007DC9                     STR_56:
  1074  007DC9  20                 	db	32
  1075  007DCA  2A                 	db	42
  1076  007DCB  66                 	db	102	;'f'
  1077  007DCC  61                 	db	97	;'a'
  1078  007DCD  6C                 	db	108	;'l'
  1079  007DCE  68                 	db	104	;'h'
  1080  007DCF  61                 	db	97	;'a'
  1081  007DD0  20                 	db	32
  1082  007DD1  65                 	db	101	;'e'
  1083  007DD2  6C                 	db	108	;'l'
  1084  007DD3  65                 	db	101	;'e'
  1085  007DD4  74                 	db	116	;'t'
  1086  007DD5  72                 	db	114	;'r'
  1087  007DD6  69                 	db	105	;'i'
  1088  007DD7  63                 	db	99	;'c'
  1089  007DD8  61                 	db	97	;'a'
  1090  007DD9  00                 	db	0
  1091  007DDA                     STR_95:
  1092  007DDA  45                 	db	69	;'E'
  1093  007DDB  6E                 	db	110	;'n'
  1094  007DDC  76                 	db	118	;'v'
  1095  007DDD  69                 	db	105	;'i'
  1096  007DDE  61                 	db	97	;'a'
  1097  007DDF  72                 	db	114	;'r'
  1098  007DE0  20                 	db	32
  1099  007DE1  73                 	db	115	;'s'
  1100  007DE2  6D                 	db	109	;'m'
  1101  007DE3  73                 	db	115	;'s'
  1102  007DE4  20                 	db	32
  1103  007DE5  74                 	db	116	;'t'
  1104  007DE6  65                 	db	101	;'e'
  1105  007DE7  73                 	db	115	;'s'
  1106  007DE8  74                 	db	116	;'t'
  1107  007DE9  65                 	db	101	;'e'
  1108  007DEA  00                 	db	0
  1109  007DEB                     STR_54:
  1110  007DEB  65                 	db	101	;'e'
  1111  007DEC  6E                 	db	110	;'n'
  1112  007DED  76                 	db	118	;'v'
  1113  007DEE  69                 	db	105	;'i'
  1114  007DEF  61                 	db	97	;'a'
  1115  007DF0  6E                 	db	110	;'n'
  1116  007DF1  64                 	db	100	;'d'
  1117  007DF2  6F                 	db	111	;'o'
  1118  007DF3  20                 	db	32
  1119  007DF4  53                 	db	83	;'S'
  1120  007DF5  4D                 	db	77	;'M'
  1121  007DF6  53                 	db	83	;'S'
  1122  007DF7  2E                 	db	46
  1123  007DF8  2E                 	db	46
  1124  007DF9  2E                 	db	46
  1125  007DFA  00                 	db	0
  1126  007DFB                     STR_43:
  1127  007DFB  42                 	db	66	;'B'
  1128  007DFC  6F                 	db	111	;'o'
  1129  007DFD  6D                 	db	109	;'m'
  1130  007DFE  62                 	db	98	;'b'
  1131  007DFF  61                 	db	97	;'a'
  1132  007E00  20                 	db	32
  1133  007E01  4C                 	db	76	;'L'
  1134  007E02  69                 	db	105	;'i'
  1135  007E03  67                 	db	103	;'g'
  1136  007E04  61                 	db	97	;'a'
  1137  007E05  64                 	db	100	;'d'
  1138  007E06  61                 	db	97	;'a'
  1139  007E07  2E                 	db	46
  1140  007E08  2E                 	db	46
  1141  007E09  2E                 	db	46
  1142  007E0A  00                 	db	0
  1143  007E0B                     STR_40:
  1144  007E0B  42                 	db	66	;'B'
  1145  007E0C  6F                 	db	111	;'o'
  1146  007E0D  6D                 	db	109	;'m'
  1147  007E0E  62                 	db	98	;'b'
  1148  007E0F  61                 	db	97	;'a'
  1149  007E10  20                 	db	32
  1150  007E11  4A                 	db	74	;'J'
  1151  007E12  6F                 	db	111	;'o'
  1152  007E13  63                 	db	99	;'c'
  1153  007E14  6B                 	db	107	;'k'
  1154  007E15  65                 	db	101	;'e'
  1155  007E16  79                 	db	121	;'y'
  1156  007E17  2E                 	db	46
  1157  007E18  2E                 	db	46
  1158  007E19  2E                 	db	46
  1159  007E1A  00                 	db	0
  1160  007E1B                     STR_116:
  1161  007E1B  50                 	db	80	;'P'
  1162  007E1C  52                 	db	82	;'R'
  1163  007E1D  45                 	db	69	;'E'
  1164  007E1E  53                 	db	83	;'S'
  1165  007E1F  53                 	db	83	;'S'
  1166  007E20  41                 	db	65	;'A'
  1167  007E21  4F                 	db	79	;'O'
  1168  007E22  20                 	db	32
  1169  007E23  44                 	db	68	;'D'
  1170  007E24  41                 	db	65	;'A'
  1171  007E25  20                 	db	32
  1172  007E26  52                 	db	82	;'R'
  1173  007E27  45                 	db	69	;'E'
  1174  007E28  44                 	db	68	;'D'
  1175  007E29  45                 	db	69	;'E'
  1176  007E2A  00                 	db	0
  1177  007E2B                     STR_39:
  1178  007E2B  50                 	db	80	;'P'
  1179  007E2C  72                 	db	114	;'r'
  1180  007E2D  65                 	db	101	;'e'
  1181  007E2E  73                 	db	115	;'s'
  1182  007E2F  73                 	db	115	;'s'
  1183  007E30  61                 	db	97	;'a'
  1184  007E31  6F                 	db	111	;'o'
  1185  007E32  20                 	db	32
  1186  007E33  25                 	db	37
  1187  007E34  73                 	db	115	;'s'
  1188  007E35  20                 	db	32
  1189  007E36  42                 	db	66	;'B'
  1190  007E37  41                 	db	65	;'A'
  1191  007E38  52                 	db	82	;'R'
  1192  007E39  00                 	db	0
  1193  007E3A                     STR_66:
  1194  007E3A  25                 	db	37
  1195  007E3B  30                 	db	48	;'0'
  1196  007E3C  32                 	db	50	;'2'
  1197  007E3D  64                 	db	100	;'d'
  1198  007E3E  2F                 	db	47
  1199  007E3F  25                 	db	37
  1200  007E40  30                 	db	48	;'0'
  1201  007E41  32                 	db	50	;'2'
  1202  007E42  64                 	db	100	;'d'
  1203  007E43  2F                 	db	47
  1204  007E44  25                 	db	37
  1205  007E45  30                 	db	48	;'0'
  1206  007E46  32                 	db	50	;'2'
  1207  007E47  64                 	db	100	;'d'
  1208  007E48  00                 	db	0
  1209  007E49                     STR_68:
  1210  007E49  25                 	db	37
  1211  007E4A  30                 	db	48	;'0'
  1212  007E4B  32                 	db	50	;'2'
  1213  007E4C  64                 	db	100	;'d'
  1214  007E4D  3A                 	db	58	;':'
  1215  007E4E  25                 	db	37
  1216  007E4F  30                 	db	48	;'0'
  1217  007E50  32                 	db	50	;'2'
  1218  007E51  64                 	db	100	;'d'
  1219  007E52  3A                 	db	58	;':'
  1220  007E53  25                 	db	37
  1221  007E54  30                 	db	48	;'0'
  1222  007E55  32                 	db	50	;'2'
  1223  007E56  64                 	db	100	;'d'
  1224  007E57  00                 	db	0
  1225  007E58                     STR_48:
  1226  007E58  50                 	db	80	;'P'
  1227  007E59  52                 	db	82	;'R'
  1228  007E5A  49                 	db	73	;'I'
  1229  007E5B  4E                 	db	78	;'N'
  1230  007E5C  43                 	db	67	;'C'
  1231  007E5D  49                 	db	73	;'I'
  1232  007E5E  50                 	db	80	;'P'
  1233  007E5F  41                 	db	65	;'A'
  1234  007E60  4C                 	db	76	;'L'
  1235  007E61  20                 	db	32
  1236  007E62  3A                 	db	58	;':'
  1237  007E63  20                 	db	32
  1238  007E64  25                 	db	37
  1239  007E65  73                 	db	115	;'s'
  1240  007E66  00                 	db	0
  1241  007E67                     STR_51:
  1242  007E67  43                 	db	67	;'C'
  1243  007E68  4F                 	db	79	;'O'
  1244  007E69  4D                 	db	77	;'M'
  1245  007E6A  42                 	db	66	;'B'
  1246  007E6B  55                 	db	85	;'U'
  1247  007E6C  53                 	db	83	;'S'
  1248  007E6D  54                 	db	84	;'T'
  1249  007E6E  41                 	db	65	;'A'
  1250  007E6F  4F                 	db	79	;'O'
  1251  007E70  20                 	db	32
  1252  007E71  3A                 	db	58	;':'
  1253  007E72  20                 	db	32
  1254  007E73  25                 	db	37
  1255  007E74  73                 	db	115	;'s'
  1256  007E75  00                 	db	0
  1257  007E76                     STR_38:
  1258  007E76  41                 	db	65	;'A'
  1259  007E77  67                 	db	103	;'g'
  1260  007E78  75                 	db	117	;'u'
  1261  007E79  61                 	db	97	;'a'
  1262  007E7A  72                 	db	114	;'r'
  1263  007E7B  64                 	db	100	;'d'
  1264  007E7C  65                 	db	101	;'e'
  1265  007E7D  2E                 	db	46
  1266  007E7E  2E                 	db	46
  1267  007E7F  2E                 	db	46
  1268  007E80  20                 	db	32
  1269  007E81  25                 	db	37
  1270  007E82  64                 	db	100	;'d'
  1271  007E83  73                 	db	115	;'s'
  1272  007E84  00                 	db	0
  1273  007E85                     STR_122:
  1274  007E85  49                 	db	73	;'I'
  1275  007E86  6E                 	db	110	;'n'
  1276  007E87  69                 	db	105	;'i'
  1277  007E88  63                 	db	99	;'c'
  1278  007E89  69                 	db	105	;'i'
  1279  007E8A  61                 	db	97	;'a'
  1280  007E8B  72                 	db	114	;'r'
  1281  007E8C  20                 	db	32
  1282  007E8D  54                 	db	84	;'T'
  1283  007E8E  65                 	db	101	;'e'
  1284  007E8F  73                 	db	115	;'s'
  1285  007E90  74                 	db	116	;'t'
  1286  007E91  65                 	db	101	;'e'
  1287  007E92  73                 	db	115	;'s'
  1288  007E93  00                 	db	0
  1289  007E94                     STR_112:
  1290  007E94  56                 	db	86	;'V'
  1291  007E95  65                 	db	101	;'e'
  1292  007E96  72                 	db	114	;'r'
  1293  007E97  73                 	db	115	;'s'
  1294  007E98  61                 	db	97	;'a'
  1295  007E99  6F                 	db	111	;'o'
  1296  007E9A  20                 	db	32
  1297  007E9B  53                 	db	83	;'S'
  1298  007E9C  6F                 	db	111	;'o'
  1299  007E9D  66                 	db	102	;'f'
  1300  007E9E  74                 	db	116	;'t'
  1301  007E9F  2E                 	db	46
  1302  007EA0  3A                 	db	58	;':'
  1303  007EA1  00                 	db	0
  1304  007EA2                     STR_97:
  1305  007EA2  4D                 	db	77	;'M'
  1306  007EA3  61                 	db	97	;'a'
  1307  007EA4  78                 	db	120	;'x'
  1308  007EA5  2E                 	db	46
  1309  007EA6  20                 	db	32
  1310  007EA7  50                 	db	80	;'P'
  1311  007EA8  41                 	db	65	;'A'
  1312  007EA9  52                 	db	82	;'R'
  1313  007EAA  54                 	db	84	;'T'
  1314  007EAB  49                 	db	73	;'I'
  1315  007EAC  44                 	db	68	;'D'
  1316  007EAD  41                 	db	65	;'A'
  1317  007EAE  3A                 	db	58	;':'
  1318  007EAF  00                 	db	0
  1319  007EB0                     STR_80:
  1320  007EB0  50                 	db	80	;'P'
  1321  007EB1  72                 	db	114	;'r'
  1322  007EB2  69                 	db	105	;'i'
  1323  007EB3  6E                 	db	110	;'n'
  1324  007EB4  63                 	db	99	;'c'
  1325  007EB5  69                 	db	105	;'i'
  1326  007EB6  70                 	db	112	;'p'
  1327  007EB7  61                 	db	97	;'a'
  1328  007EB8  6C                 	db	108	;'l'
  1329  007EB9  3A                 	db	58	;':'
  1330  007EBA  20                 	db	32
  1331  007EBB  25                 	db	37
  1332  007EBC  73                 	db	115	;'s'
  1333  007EBD  00                 	db	0
  1334  007EBE                     STR_83:
  1335  007EBE  43                 	db	67	;'C'
  1336  007EBF  6F                 	db	111	;'o'
  1337  007EC0  6D                 	db	109	;'m'
  1338  007EC1  62                 	db	98	;'b'
  1339  007EC2  75                 	db	117	;'u'
  1340  007EC3  73                 	db	115	;'s'
  1341  007EC4  74                 	db	116	;'t'
  1342  007EC5  61                 	db	97	;'a'
  1343  007EC6  6F                 	db	111	;'o'
  1344  007EC7  3A                 	db	58	;':'
  1345  007EC8  20                 	db	32
  1346  007EC9  25                 	db	37
  1347  007ECA  73                 	db	115	;'s'
  1348  007ECB  00                 	db	0
  1349  007ECC                     STR_94:
  1350  007ECC  20                 	db	32
  1351  007ECD  61                 	db	97	;'a'
  1352  007ECE  67                 	db	103	;'g'
  1353  007ECF  75                 	db	117	;'u'
  1354  007ED0  61                 	db	97	;'a'
  1355  007ED1  72                 	db	114	;'r'
  1356  007ED2  64                 	db	100	;'d'
  1357  007ED3  65                 	db	101	;'e'
  1358  007ED4  2E                 	db	46
  1359  007ED5  2E                 	db	46
  1360  007ED6  2E                 	db	46
  1361  007ED7  20                 	db	32
  1362  007ED8  00                 	db	0
  1363  007ED9                     STR_10:
  1364  007ED9  41                 	db	65	;'A'
  1365  007EDA  54                 	db	84	;'T'
  1366  007EDB  2B                 	db	43
  1367  007EDC  43                 	db	67	;'C'
  1368  007EDD  4D                 	db	77	;'M'
  1369  007EDE  47                 	db	71	;'G'
  1370  007EDF  46                 	db	70	;'F'
  1371  007EE0  3D                 	db	61	;'='
  1372  007EE1  31                 	db	49	;'1'
  1373  007EE2  0D                 	db	13
  1374  007EE3  0A                 	db	10
  1375  007EE4  00                 	db	0
  1376  007EE5                     STR_15:
  1377  007EE5  41                 	db	65	;'A'
  1378  007EE6  75                 	db	117	;'u'
  1379  007EE7  67                 	db	103	;'g'
  1380  007EE8  20                 	db	32
  1381  007EE9  32                 	db	50	;'2'
  1382  007EEA  35                 	db	53	;'5'
  1383  007EEB  20                 	db	32
  1384  007EEC  32                 	db	50	;'2'
  1385  007EED  30                 	db	48	;'0'
  1386  007EEE  31                 	db	49	;'1'
  1387  007EEF  39                 	db	57	;'9'
  1388  007EF0  00                 	db	0
  1389  007EF1                     STR_99:
  1390  007EF1  4D                 	db	77	;'M'
  1391  007EF2  61                 	db	97	;'a'
  1392  007EF3  78                 	db	120	;'x'
  1393  007EF4  2E                 	db	46
  1394  007EF5  20                 	db	32
  1395  007EF6  54                 	db	84	;'T'
  1396  007EF7  45                 	db	69	;'E'
  1397  007EF8  53                 	db	83	;'S'
  1398  007EF9  54                 	db	84	;'T'
  1399  007EFA  45                 	db	69	;'E'
  1400  007EFB  3A                 	db	58	;':'
  1401  007EFC  00                 	db	0
  1402  007EFD                     STR_121:
  1403  007EFD  49                 	db	73	;'I'
  1404  007EFE  4E                 	db	78	;'N'
  1405  007EFF  46                 	db	70	;'F'
  1406  007F00  4F                 	db	79	;'O'
  1407  007F01  20                 	db	32
  1408  007F02  56                 	db	86	;'V'
  1409  007F03  45                 	db	69	;'E'
  1410  007F04  52                 	db	82	;'R'
  1411  007F05  53                 	db	83	;'S'
  1412  007F06  41                 	db	65	;'A'
  1413  007F07  4F                 	db	79	;'O'
  1414  007F08  00                 	db	0
  1415  007F09                     STR_89:
  1416  007F09  76                 	db	118	;'v'
  1417  007F0A  65                 	db	101	;'e'
  1418  007F0B  72                 	db	114	;'r'
  1419  007F0C  73                 	db	115	;'s'
  1420  007F0D  61                 	db	97	;'a'
  1421  007F0E  6F                 	db	111	;'o'
  1422  007F0F  20                 	db	32
  1423  007F10  2D                 	db	45
  1424  007F11  20                 	db	32
  1425  007F12  25                 	db	37
  1426  007F13  73                 	db	115	;'s'
  1427  007F14  00                 	db	0
  1428  007F15                     STR_35:
  1429  007F15  41                 	db	65	;'A'
  1430  007F16  54                 	db	84	;'T'
  1431  007F17  44                 	db	68	;'D'
  1432  007F18  20                 	db	32
  1433  007F19  30                 	db	48	;'0'
  1434  007F1A  25                 	db	37
  1435  007F1B  73                 	db	115	;'s'
  1436  007F1C  3B                 	db	59	;';'
  1437  007F1D  0D                 	db	13
  1438  007F1E  0A                 	db	10
  1439  007F1F  00                 	db	0
  1440  007F20  74                 	db	116	;'t'
  1441  007F21  65                 	db	101	;'e'
  1442  007F22  74                 	db	116	;'t'
  1443  007F23  61                 	db	97	;'a'
  1444  007F24  70                 	db	112	;'p'
  1445  007F25  61                 	db	97	;'a'
  1446  007F26  20                 	db	32
  1447  007F27  25                 	db	37
  1448  007F28  64                 	db	100	;'d'
  1449  007F29  20                 	db	32
  1450  007F2A  00                 	db	0
  1451  007F2B                     STR_79:
  1452  007F2B  23                 	db	35
  1453  007F2C  25                 	db	37
  1454  007F2D  30                 	db	48	;'0'
  1455  007F2E  32                 	db	50	;'2'
  1456  007F2F  64                 	db	100	;'d'
  1457  007F30  2F                 	db	47
  1458  007F31  25                 	db	37
  1459  007F32  30                 	db	48	;'0'
  1460  007F33  32                 	db	50	;'2'
  1461  007F34  64                 	db	100	;'d'
  1462  007F35  00                 	db	0
  1463  007F36                     STR_102:
  1464  007F36  47                 	db	71	;'G'
  1465  007F37  45                 	db	69	;'E'
  1466  007F38  52                 	db	82	;'R'
  1467  007F39  41                 	db	65	;'A'
  1468  007F3A  4C                 	db	76	;'L'
  1469  007F3B  20                 	db	32
  1470  007F3C  3A                 	db	58	;':'
  1471  007F3D  20                 	db	32
  1472  007F3E  25                 	db	37
  1473  007F3F  73                 	db	115	;'s'
  1474  007F40  00                 	db	0
  1475  007F41                     STR_45:
  1476  007F41  4A                 	db	74	;'J'
  1477  007F42  4F                 	db	79	;'O'
  1478  007F43  4B                 	db	75	;'K'
  1479  007F44  45                 	db	69	;'E'
  1480  007F45  59                 	db	89	;'Y'
  1481  007F46  20                 	db	32
  1482  007F47  3A                 	db	58	;':'
  1483  007F48  20                 	db	32
  1484  007F49  25                 	db	37
  1485  007F4A  73                 	db	115	;'s'
  1486  007F4B  00                 	db	0
  1487  007F4C                     STR_72:
  1488  007F4C  41                 	db	65	;'A'
  1489  007F4D  54                 	db	84	;'T'
  1490  007F4E  49                 	db	73	;'I'
  1491  007F4F  56                 	db	86	;'V'
  1492  007F50  41                 	db	65	;'A'
  1493  007F51  52                 	db	82	;'R'
  1494  007F52  3A                 	db	58	;':'
  1495  007F53  20                 	db	32
  1496  007F54  25                 	db	37
  1497  007F55  73                 	db	115	;'s'
  1498  007F56  00                 	db	0
  1499  007F57                     STR_115:
  1500  007F57  44                 	db	68	;'D'
  1501  007F58  41                 	db	65	;'A'
  1502  007F59  54                 	db	84	;'T'
  1503  007F5A  41                 	db	65	;'A'
  1504  007F5B  2F                 	db	47
  1505  007F5C  48                 	db	72	;'H'
  1506  007F5D  4F                 	db	79	;'O'
  1507  007F5E  52                 	db	82	;'R'
  1508  007F5F  41                 	db	65	;'A'
  1509  007F60  00                 	db	0
  1510  007F61                     STR_120:
  1511  007F61  44                 	db	68	;'D'
  1512  007F62  41                 	db	65	;'A'
  1513  007F63  54                 	db	84	;'T'
  1514  007F64  41                 	db	65	;'A'
  1515  007F65  4C                 	db	76	;'L'
  1516  007F66  4F                 	db	79	;'O'
  1517  007F67  47                 	db	71	;'G'
  1518  007F68  45                 	db	69	;'E'
  1519  007F69  52                 	db	82	;'R'
  1520  007F6A  00                 	db	0
  1521  007F6B                     STR_118:
  1522  007F6B  54                 	db	84	;'T'
  1523  007F6C  45                 	db	69	;'E'
  1524  007F6D  4C                 	db	76	;'L'
  1525  007F6E  45                 	db	69	;'E'
  1526  007F6F  46                 	db	70	;'F'
  1527  007F70  4F                 	db	79	;'O'
  1528  007F71  4E                 	db	78	;'N'
  1529  007F72  45                 	db	69	;'E'
  1530  007F73  53                 	db	83	;'S'
  1531  007F74  00                 	db	0
  1532  007F75  74                 	db	116	;'t'
  1533  007F76  73                 	db	115	;'s'
  1534  007F77  69                 	db	105	;'i'
  1535  007F78  6E                 	db	110	;'n'
  1536  007F79  61                 	db	97	;'a'
  1537  007F7A  6C                 	db	108	;'l'
  1538  007F7B  20                 	db	32
  1539  007F7C  25                 	db	37
  1540  007F7D  64                 	db	100	;'d'
  1541  007F7E  00                 	db	0
  1542  007F7F                     STR_76:
  1543  007F7F  4A                 	db	74	;'J'
  1544  007F80  6F                 	db	111	;'o'
  1545  007F81  6B                 	db	107	;'k'
  1546  007F82  65                 	db	101	;'e'
  1547  007F83  79                 	db	121	;'y'
  1548  007F84  3A                 	db	58	;':'
  1549  007F85  20                 	db	32
  1550  007F86  25                 	db	37
  1551  007F87  73                 	db	115	;'s'
  1552  007F88  00                 	db	0
  1553  007F89                     STR_3:
  1554  007F89  41                 	db	65	;'A'
  1555  007F8A  54                 	db	84	;'T'
  1556  007F8B  2B                 	db	43
  1557  007F8C  43                 	db	67	;'C'
  1558  007F8D  53                 	db	83	;'S'
  1559  007F8E  51                 	db	81	;'Q'
  1560  007F8F  0D                 	db	13
  1561  007F90  0A                 	db	10
  1562  007F91  00                 	db	0
  1563  007F92  65                 	db	101	;'e'
  1564  007F93  74                 	db	116	;'t'
  1565  007F94  61                 	db	97	;'a'
  1566  007F95  70                 	db	112	;'p'
  1567  007F96  61                 	db	97	;'a'
  1568  007F97  20                 	db	32
  1569  007F98  25                 	db	37
  1570  007F99  64                 	db	100	;'d'
  1571  007F9A  00                 	db	0
  1572  007F9B                     STR_86:
  1573  007F9B  54                 	db	84	;'T'
  1574  007F9C  45                 	db	69	;'E'
  1575  007F9D  43                 	db	67	;'C'
  1576  007F9E  48                 	db	72	;'H'
  1577  007F9F  4E                 	db	78	;'N'
  1578  007FA0  4F                 	db	79	;'O'
  1579  007FA1  57                 	db	87	;'W'
  1580  007FA2  00                 	db	0
  1581  007FA3                     STR_123:
  1582  007FA3  28                 	db	40
  1583  007FA4  6E                 	db	110	;'n'
  1584  007FA5  75                 	db	117	;'u'
  1585  007FA6  6C                 	db	108	;'l'
  1586  007FA7  6C                 	db	108	;'l'
  1587  007FA8  29                 	db	41
  1588  007FA9  00                 	db	0
  1589  007FAA                     STR_21:
  1590  007FAA  41                 	db	65	;'A'
  1591  007FAB  54                 	db	84	;'T'
  1592  007FAC  48                 	db	72	;'H'
  1593  007FAD  30                 	db	48	;'0'
  1594  007FAE  0D                 	db	13
  1595  007FAF  0A                 	db	10
  1596  007FB0  00                 	db	0
  1597  007FB1                     STR_6:
  1598  007FB1  2B                 	db	43
  1599  007FB2  43                 	db	67	;'C'
  1600  007FB3  53                 	db	83	;'S'
  1601  007FB4  51                 	db	81	;'Q'
  1602  007FB5  3A                 	db	58	;':'
  1603  007FB6  20                 	db	32
  1604  007FB7  00                 	db	0
  1605  007FB8                     STR_91:
  1606  007FB8  54                 	db	84	;'T'
  1607  007FB9  31                 	db	49	;'1'
  1608  007FBA  3A                 	db	58	;':'
  1609  007FBB  20                 	db	32
  1610  007FBC  25                 	db	37
  1611  007FBD  73                 	db	115	;'s'
  1612  007FBE  00                 	db	0
  1613  007FBF                     STR_92:
  1614  007FBF  54                 	db	84	;'T'
  1615  007FC0  32                 	db	50	;'2'
  1616  007FC1  3A                 	db	58	;':'
  1617  007FC2  20                 	db	32
  1618  007FC3  25                 	db	37
  1619  007FC4  73                 	db	115	;'s'
  1620  007FC5  00                 	db	0
  1621  007FC6                     STR_67:
  1622  007FC6  48                 	db	72	;'H'
  1623  007FC7  4F                 	db	79	;'O'
  1624  007FC8  52                 	db	82	;'R'
  1625  007FC9  41                 	db	65	;'A'
  1626  007FCA  3A                 	db	58	;':'
  1627  007FCB  00                 	db	0
  1628  007FCC                     STR_65:
  1629  007FCC  44                 	db	68	;'D'
  1630  007FCD  41                 	db	65	;'A'
  1631  007FCE  54                 	db	84	;'T'
  1632  007FCF  41                 	db	65	;'A'
  1633  007FD0  3A                 	db	58	;':'
  1634  007FD1  00                 	db	0
  1635  007FD2                     STR_28:
  1636  007FD2  46                 	db	70	;'F'
  1637  007FD3  41                 	db	65	;'A'
  1638  007FD4  4C                 	db	76	;'L'
  1639  007FD5  48                 	db	72	;'H'
  1640  007FD6  41                 	db	65	;'A'
  1641  007FD7  00                 	db	0
  1642  007FD8                     STR_17:
  1643  007FD8  45                 	db	69	;'E'
  1644  007FD9  52                 	db	82	;'R'
  1645  007FDA  52                 	db	82	;'R'
  1646  007FDB  4F                 	db	79	;'O'
  1647  007FDC  52                 	db	82	;'R'
  1648  007FDD  00                 	db	0
  1649  007FDE                     STR_4:
  1650  007FDE  41                 	db	65	;'A'
  1651  007FDF  54                 	db	84	;'T'
  1652  007FE0  0D                 	db	13
  1653  007FE1  0A                 	db	10
  1654  007FE2  00                 	db	0
  1655  007FE3                     STR_47:
  1656  007FE3  45                 	db	69	;'E'
  1657  007FE4  52                 	db	82	;'R'
  1658  007FE5  52                 	db	82	;'R'
  1659  007FE6  4F                 	db	79	;'O'
  1660  007FE7  00                 	db	0
  1661  007FE8                     STR_1:
  1662  007FE8  25                 	db	37
  1663  007FE9  73                 	db	115	;'s'
  1664  007FEA  25                 	db	37
  1665  007FEB  63                 	db	99	;'c'
  1666  007FEC  00                 	db	0
  1667  007FED                     STR_98:
  1668  007FED  25                 	db	37
  1669  007FEE  33                 	db	51	;'3'
  1670  007FEF  64                 	db	100	;'d'
  1671  007FF0  73                 	db	115	;'s'
  1672  007FF1  00                 	db	0
  1673  007FF2                     STR_74:
  1674  007FF2  53                 	db	83	;'S'
  1675  007FF3  69                 	db	105	;'i'
  1676  007FF4  6D                 	db	109	;'m'
  1677  007FF5  00                 	db	0
  1678  007FF6                     STR_73:
  1679  007FF6  4E                 	db	78	;'N'
  1680  007FF7  61                 	db	97	;'a'
  1681  007FF8  6F                 	db	111	;'o'
  1682  007FF9  00                 	db	0
  1683  007FFA                     STR_5:
  1684  007FFA  4F                 	db	79	;'O'
  1685  007FFB  4B                 	db	75	;'K'
  1686  007FFC  00                 	db	0
  1687  007FFD                     STR_13:
  1688  007FFD  3E                 	db	62	;'>'
  1689  007FFE  00                 	db	0
  1690  0000                     
  1691                           ; #config settings
  1692  007FFF  00                 	db	0	; dummy byte at the end
  1693  0000                     
  1694                           	psect	cinit
  1695  007704                     __pcinit:
  1696                           	opt stack 0
  1697  007704                     start_initialization:
  1698                           	opt stack 0
  1699  007704                     __initialization:
  1700                           	opt stack 0
  1701                           
  1702                           ; Initialize objects allocated to BANK1 (4 bytes)
  1703                           ; load TBLPTR registers with __pidataBANK1
  1704  007704  0E9C               	movlw	low __pidataBANK1
  1705  007706  6EF6               	movwf	tblptrl,c
  1706  007708  0E6C               	movlw	high __pidataBANK1
  1707  00770A  6EF7               	movwf	tblptrh,c
  1708  00770C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1709  00770E  6EF8               	movwf	tblptru,c
  1710  007710  EE01  F0BC         	lfsr	0,__pdataBANK1
  1711  007714  EE10 F004          	lfsr	1,4
  1712  007718                     copy_data0:
  1713  007718  0009               	tblrd		*+
  1714  00771A  CFF5 FFEE          	movff	tablat,postinc0
  1715  00771E  50E5               	movf	postdec1,w,c
  1716  007720  50E1               	movf	fsr1l,w,c
  1717  007722  E1FA               	bnz	copy_data0
  1718                           
  1719                           ; Initialize objects allocated to BANK0 (8 bytes)
  1720                           ; load TBLPTR registers with __pidataBANK0
  1721  007724  0EA0               	movlw	low __pidataBANK0
  1722  007726  6EF6               	movwf	tblptrl,c
  1723  007728  0E6C               	movlw	high __pidataBANK0
  1724  00772A  6EF7               	movwf	tblptrh,c
  1725  00772C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1726  00772E  6EF8               	movwf	tblptru,c
  1727  007730  EE00  F0F8         	lfsr	0,__pdataBANK0
  1728  007734  EE10 F008          	lfsr	1,8
  1729  007738                     copy_data1:
  1730  007738  0009               	tblrd		*+
  1731  00773A  CFF5 FFEE          	movff	tablat,postinc0
  1732  00773E  50E5               	movf	postdec1,w,c
  1733  007740  50E1               	movf	fsr1l,w,c
  1734  007742  E1FA               	bnz	copy_data1
  1735                           
  1736                           ; Clear objects allocated to BANK1 (188 bytes)
  1737  007744  EE01  F000         	lfsr	0,__pbssBANK1
  1738  007748  0EBC               	movlw	188
  1739  00774A                     clear_0:
  1740  00774A  6AEE               	clrf	postinc0,c
  1741  00774C  06E8               	decf	wreg,f,c
  1742  00774E  E1FD               	bnz	clear_0
  1743                           
  1744                           ; Clear objects allocated to BANK0 (31 bytes)
  1745  007750  EE00  F0D9         	lfsr	0,__pbssBANK0
  1746  007754  0E1F               	movlw	31
  1747  007756                     clear_1:
  1748  007756  6AEE               	clrf	postinc0,c
  1749  007758  06E8               	decf	wreg,f,c
  1750  00775A  E1FD               	bnz	clear_1
  1751                           
  1752                           ; Clear objects allocated to COMRAM (57 bytes)
  1753  00775C  EE00  F044         	lfsr	0,__pbssCOMRAM
  1754  007760  0E39               	movlw	57
  1755  007762                     clear_2:
  1756  007762  6AEE               	clrf	postinc0,c
  1757  007764  06E8               	decf	wreg,f,c
  1758  007766  E1FD               	bnz	clear_2
  1759  007768                     end_of_initialization:
  1760                           	opt stack 0
  1761  007768                     __end_of__initialization:
  1762                           	opt stack 0
  1763  007768  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1764  00776A  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1765  00776C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1766  00776E  6EF8               	movwf	tblptru,c
  1767  007770  0100               	movlb	0
  1768  007772  EFE6  F006         	goto	_main	;jump to C main() function
  1769                           tblptru	equ	0xFF8
  1770                           tblptrh	equ	0xFF7
  1771                           tblptrl	equ	0xFF6
  1772                           tablat	equ	0xFF5
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postdec1	equ	0xFE5
  1776                           fsr1l	equ	0xFE1
  1777                           
  1778                           	psect	bssCOMRAM
  1779  000044                     __pbssCOMRAM:
  1780                           	opt stack 0
  1781  000044                     _shift:
  1782                           	opt stack 0
  1783  000044                     	ds	8
  1784  00004C                     __tensao:
  1785                           	opt stack 0
  1786  00004C                     	ds	3
  1787  00004F                     _horimetro:
  1788                           	opt stack 0
  1789  00004F                     	ds	2
  1790  000051                     _etapaComunicacao:
  1791                           	opt stack 0
  1792  000051                     	ds	2
  1793  000053                     _dtl_posi_visualizar:
  1794                           	opt stack 0
  1795  000053                     	ds	1
  1796  000054                     _totalLogs:
  1797                           	opt stack 0
  1798  000054                     	ds	1
  1799  000055                     _dtl_carregar_log:
  1800                           	opt stack 0
  1801  000055                     	ds	1
  1802  000056                     _dtl_estacionaria:
  1803                           	opt stack 0
  1804  000056                     	ds	1
  1805  000057                     _dtl_principal:
  1806                           	opt stack 0
  1807  000057                     	ds	1
  1808  000058                     _dtl_jockey:
  1809                           	opt stack 0
  1810  000058                     	ds	1
  1811  000059                     _dtl_min:
  1812                           	opt stack 0
  1813  000059                     	ds	1
  1814  00005A                     _dtl_hora:
  1815                           	opt stack 0
  1816  00005A                     	ds	1
  1817  00005B                     _dtl_ano:
  1818                           	opt stack 0
  1819  00005B                     	ds	1
  1820  00005C                     _dtl_mes:
  1821                           	opt stack 0
  1822  00005C                     	ds	1
  1823  00005D                     _dtl_dia:
  1824                           	opt stack 0
  1825  00005D                     	ds	1
  1826  00005E                     __b_ok:
  1827                           	opt stack 0
  1828  00005E                     	ds	1
  1829  00005F                     _flag_b_ok:
  1830                           	opt stack 0
  1831  00005F                     	ds	1
  1832  000060                     __b_mais:
  1833                           	opt stack 0
  1834  000060                     	ds	1
  1835  000061                     _flag_b_mais:
  1836                           	opt stack 0
  1837  000061                     	ds	1
  1838  000062                     __b_menos:
  1839                           	opt stack 0
  1840  000062                     	ds	1
  1841  000063                     _flag_b_menos:
  1842                           	opt stack 0
  1843  000063                     	ds	1
  1844  000064                     __b_esc:
  1845                           	opt stack 0
  1846  000064                     	ds	1
  1847  000065                     _flag_b_esc:
  1848                           	opt stack 0
  1849  000065                     	ds	1
  1850  000066                     _cbf:
  1851                           	opt stack 0
  1852  000066                     	ds	1
  1853  000067                     _blinkk:
  1854                           	opt stack 0
  1855  000067                     	ds	1
  1856  000068                     _ajst_rtc:
  1857                           	opt stack 0
  1858  000068                     	ds	1
  1859  000069                     _tela_menu_posi:
  1860                           	opt stack 0
  1861  000069                     	ds	1
  1862  00006A                     _sub_menu_posi:
  1863                           	opt stack 0
  1864  00006A                     	ds	1
  1865  00006B                     _tel_selecionado:
  1866                           	opt stack 0
  1867  00006B                     	ds	1
  1868  00006C                     _tempo_limite_partida:
  1869                           	opt stack 0
  1870  00006C                     	ds	1
  1871  00006D                     _tempo_partida:
  1872                           	opt stack 0
  1873  00006D                     	ds	1
  1874  00006E                     _qtd_leitura:
  1875                           	opt stack 0
  1876  00006E                     	ds	1
  1877  00006F                     __sec_aux:
  1878                           	opt stack 0
  1879  00006F                     	ds	1
  1880  000070                     __sec_partida:
  1881                           	opt stack 0
  1882  000070                     	ds	1
  1883  000071                     _base_sec:
  1884                           	opt stack 0
  1885  000071                     	ds	1
  1886  000072                     _etapaTesteBombas:
  1887                           	opt stack 0
  1888  000072                     	ds	1
  1889  000073                     _flagErroTransdutor:
  1890                           	opt stack 0
  1891  000073                     	ds	1
  1892  000074                     _flagTexto:
  1893                           	opt stack 0
  1894  000074                     	ds	1
  1895  000075                     _timerTrocarTextoLcd:
  1896                           	opt stack 0
  1897  000075                     	ds	1
  1898  000076                     _rtc:
  1899                           	opt stack 0
  1900  000076                     	ds	7
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           postdec1	equ	0xFE5
  1908                           fsr1l	equ	0xFE1
  1909                           
  1910                           	psect	bssBANK0
  1911  0000D9                     __pbssBANK0:
  1912                           	opt stack 0
  1913  0000D9                     _timerTesteBombas:
  1914                           	opt stack 0
  1915  0000D9                     	ds	2
  1916  0000DB                     _ajust_tel:
  1917                           	opt stack 0
  1918  0000DB                     	ds	1
  1919  0000DC                     _tel_posi:
  1920                           	opt stack 0
  1921  0000DC                     	ds	1
  1922  0000DD                     __menu_posi:
  1923                           	opt stack 0
  1924  0000DD                     	ds	1
  1925  0000DE                     _menu_posi:
  1926                           	opt stack 0
  1927  0000DE                     	ds	1
  1928  0000DF                     _option_posi:
  1929                           	opt stack 0
  1930  0000DF                     	ds	1
  1931  0000E0                     _sp_estacionaria:
  1932                           	opt stack 0
  1933  0000E0                     	ds	1
  1934  0000E1                     _sp_principal:
  1935                           	opt stack 0
  1936  0000E1                     	ds	1
  1937  0000E2                     _sp_jockey:
  1938                           	opt stack 0
  1939  0000E2                     	ds	1
  1940  0000E3                     _sp_pressao_rede:
  1941                           	opt stack 0
  1942  0000E3                     	ds	1
  1943  0000E4                     _tempo_limite_teste_estacionaria:
  1944                           	opt stack 0
  1945  0000E4                     	ds	1
  1946  0000E5                     _tempo_limite_estacionaria:
  1947                           	opt stack 0
  1948  0000E5                     	ds	1
  1949  0000E6                     _horario_de_teste:
  1950                           	opt stack 0
  1951  0000E6                     	ds	1
  1952  0000E7                     _dias_restante_teste:
  1953                           	opt stack 0
  1954  0000E7                     	ds	1
  1955  0000E8                     _intervalo_teste_dia:
  1956                           	opt stack 0
  1957  0000E8                     	ds	1
  1958  0000E9                     __ano:
  1959                           	opt stack 0
  1960  0000E9                     	ds	1
  1961  0000EA                     __mes:
  1962                           	opt stack 0
  1963  0000EA                     	ds	1
  1964  0000EB                     __dia:
  1965                           	opt stack 0
  1966  0000EB                     	ds	1
  1967  0000EC                     __hor:
  1968                           	opt stack 0
  1969  0000EC                     	ds	1
  1970  0000ED                     __min:
  1971                           	opt stack 0
  1972  0000ED                     	ds	1
  1973  0000EE                     __sec:
  1974                           	opt stack 0
  1975  0000EE                     	ds	1
  1976  0000EF                     _habilitaTesteAutomatico:
  1977                           	opt stack 0
  1978  0000EF                     	ds	1
  1979  0000F0                     _flagEstacionariaLigada:
  1980                           	opt stack 0
  1981  0000F0                     	ds	1
  1982  0000F1                     _executandoTeste:
  1983                           	opt stack 0
  1984  0000F1                     	ds	1
  1985  0000F2                     _ocorrendoIncendio:
  1986                           	opt stack 0
  1987  0000F2                     	ds	1
  1988  0000F3                     _codigoErro:
  1989                           	opt stack 0
  1990  0000F3                     	ds	1
  1991  0000F4                     _gsmOcupado:
  1992                           	opt stack 0
  1993  0000F4                     	ds	1
  1994  0000F5                     _timerEtapaComunicacao:
  1995                           	opt stack 0
  1996  0000F5                     	ds	1
  1997  0000F6                     _timerReenvioSMS:
  1998                           	opt stack 0
  1999  0000F6                     	ds	1
  2000  0000F7                     _telefoneSelecionado:
  2001                           	opt stack 0
  2002  0000F7                     	ds	1
  2003                           tblptru	equ	0xFF8
  2004                           tblptrh	equ	0xFF7
  2005                           tblptrl	equ	0xFF6
  2006                           tablat	equ	0xFF5
  2007                           postinc0	equ	0xFEE
  2008                           wreg	equ	0xFE8
  2009                           postdec1	equ	0xFE5
  2010                           fsr1l	equ	0xFE1
  2011                           
  2012                           	psect	dataBANK0
  2013  0000F8                     __pdataBANK0:
  2014                           	opt stack 0
  2015  0000F8                     _pressao:
  2016                           	opt stack 0
  2017  0000F8                     	ds	2
  2018  0000FA                     _dtl_posicao:
  2019                           	opt stack 0
  2020  0000FA                     	ds	1
  2021  0000FB                     _status_estacionaria:
  2022                           	opt stack 0
  2023  0000FB                     	ds	1
  2024  0000FC                     _status_principal:
  2025                           	opt stack 0
  2026  0000FC                     	ds	1
  2027  0000FD                     _status_jockey:
  2028                           	opt stack 0
  2029  0000FD                     	ds	1
  2030  0000FE                     _timerVerificarSinal:
  2031                           	opt stack 0
  2032  0000FE                     	ds	1
  2033  0000FF                     _intensidadeSinal:
  2034                           	opt stack 0
  2035  0000FF                     	ds	1
  2036                           tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           postinc0	equ	0xFEE
  2041                           wreg	equ	0xFE8
  2042                           postdec1	equ	0xFE5
  2043                           fsr1l	equ	0xFE1
  2044                           
  2045                           	psect	bssBANK1
  2046  000100                     __pbssBANK1:
  2047                           	opt stack 0
  2048  000100                     _bufferSerial:
  2049                           	opt stack 0
  2050  000100                     	ds	60
  2051  00013C                     _line4:
  2052                           	opt stack 0
  2053  00013C                     	ds	21
  2054  000151                     _line3:
  2055                           	opt stack 0
  2056  000151                     	ds	21
  2057  000166                     _line2:
  2058                           	opt stack 0
  2059  000166                     	ds	21
  2060  00017B                     _line1:
  2061                           	opt stack 0
  2062  00017B                     	ds	21
  2063  000190                     _bufferAUX:
  2064                           	opt stack 0
  2065  000190                     	ds	20
  2066  0001A4                     _tel2:
  2067                           	opt stack 0
  2068  0001A4                     	ds	12
  2069  0001B0                     _tel1:
  2070                           	opt stack 0
  2071  0001B0                     	ds	12
  2072                           tblptru	equ	0xFF8
  2073                           tblptrh	equ	0xFF7
  2074                           tblptrl	equ	0xFF6
  2075                           tablat	equ	0xFF5
  2076                           postinc0	equ	0xFEE
  2077                           wreg	equ	0xFE8
  2078                           postdec1	equ	0xFE5
  2079                           fsr1l	equ	0xFE1
  2080                           
  2081                           	psect	dataBANK1
  2082  0001BC                     __pdataBANK1:
  2083                           	opt stack 0
  2084  0001BC                     intToFloatStr@F2544:
  2085                           	opt stack 0
  2086  0001BC                     	ds	4
  2087                           tblptru	equ	0xFF8
  2088                           tblptrh	equ	0xFF7
  2089                           tblptrl	equ	0xFF6
  2090                           tablat	equ	0xFF5
  2091                           postinc0	equ	0xFEE
  2092                           wreg	equ	0xFE8
  2093                           postdec1	equ	0xFE5
  2094                           fsr1l	equ	0xFE1
  2095                           
  2096                           	psect	cstackBANK0
  2097  000080                     __pcstackBANK0:
  2098                           	opt stack 0
  2099  000080                     ??_isdigit:
  2100  000080                     ??_setShiftREG:
  2101  000080                     ??_I2C_Wait:
  2102  000080                     ?_strlen:
  2103                           	opt stack 0
  2104  000080                     ?_strchr:
  2105                           	opt stack 0
  2106  000080                     ?___wmul:
  2107                           	opt stack 0
  2108  000080                     ?___awdiv:
  2109                           	opt stack 0
  2110  000080                     ?___awmod:
  2111                           	opt stack 0
  2112  000080                     ?___lwdiv:
  2113                           	opt stack 0
  2114  000080                     ?___lldiv:
  2115                           	opt stack 0
  2116  000080                     putch@c:
  2117                           	opt stack 0
  2118  000080                     clearShiftREG@i:
  2119                           	opt stack 0
  2120  000080                     btPress@bt:
  2121                           	opt stack 0
  2122  000080                     Lcd_Port@a:
  2123                           	opt stack 0
  2124  000080                     BCDtoDEC@val:
  2125                           	opt stack 0
  2126  000080                     writeChar@hex:
  2127                           	opt stack 0
  2128  000080                     blink@line:
  2129                           	opt stack 0
  2130  000080                     delay@x:
  2131                           	opt stack 0
  2132  000080                     ___wmul@multiplier:
  2133                           	opt stack 0
  2134  000080                     ___awdiv@dividend:
  2135                           	opt stack 0
  2136  000080                     ___awmod@dividend:
  2137                           	opt stack 0
  2138  000080                     ___lwdiv@dividend:
  2139                           	opt stack 0
  2140  000080                     memset@p1:
  2141                           	opt stack 0
  2142  000080                     strlen@s:
  2143                           	opt stack 0
  2144  000080                     strchr@ptr:
  2145                           	opt stack 0
  2146  000080                     ___lldiv@dividend:
  2147                           	opt stack 0
  2148                           
  2149                           ; 4 bytes @ 0x0
  2150  000080                     	ds	1
  2151  000081                     ??_Lcd_Cmd:
  2152  000081                     ?_I2C_Read:
  2153                           	opt stack 0
  2154  000081                     setShiftREG@i:
  2155                           	opt stack 0
  2156  000081                     Lcd_Write_Char@tempp:
  2157                           	opt stack 0
  2158  000081                     _isdigit$1866:
  2159                           	opt stack 0
  2160  000081                     I2C_Read@a:
  2161                           	opt stack 0
  2162                           
  2163                           ; 2 bytes @ 0x1
  2164  000081                     	ds	1
  2165  000082                     ??_delay:
  2166  000082                     ??_strlen:
  2167  000082                     Lcd_Cmd@a:
  2168                           	opt stack 0
  2169  000082                     Lcd_Write_Char@y:
  2170                           	opt stack 0
  2171  000082                     blink@start:
  2172                           	opt stack 0
  2173  000082                     isdigit@c:
  2174                           	opt stack 0
  2175  000082                     ___wmul@multiplicand:
  2176                           	opt stack 0
  2177  000082                     ___awdiv@divisor:
  2178                           	opt stack 0
  2179  000082                     ___awmod@divisor:
  2180                           	opt stack 0
  2181  000082                     ___lwdiv@divisor:
  2182                           	opt stack 0
  2183  000082                     memset@c:
  2184                           	opt stack 0
  2185  000082                     strchr@chr:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x2
  2189  000082                     	ds	1
  2190  000083                     ??_Lcd_Init:
  2191  000083                     partidaBombaEstacionaria@acao:
  2192                           	opt stack 0
  2193  000083                     Lcd_Set_Cursor@b:
  2194                           	opt stack 0
  2195  000083                     Lcd_Write_Char@a:
  2196                           	opt stack 0
  2197  000083                     blink@end:
  2198                           	opt stack 0
  2199  000083                     I2C_Read@temp:
  2200                           	opt stack 0
  2201                           
  2202                           ; 2 bytes @ 0x3
  2203  000083                     	ds	1
  2204  000084                     ??_criarCaracteresCGRAM:
  2205  000084                     Lcd_Set_Cursor@a:
  2206                           	opt stack 0
  2207  000084                     blink@i:
  2208                           	opt stack 0
  2209  000084                     ___awdiv@counter:
  2210                           	opt stack 0
  2211  000084                     ___awmod@counter:
  2212                           	opt stack 0
  2213  000084                     Lcd_Write_String@a:
  2214                           	opt stack 0
  2215  000084                     ___wmul@product:
  2216                           	opt stack 0
  2217  000084                     ___lwdiv@quotient:
  2218                           	opt stack 0
  2219  000084                     memset@n:
  2220                           	opt stack 0
  2221  000084                     strlen@cp:
  2222                           	opt stack 0
  2223  000084                     ___lldiv@divisor:
  2224                           	opt stack 0
  2225                           
  2226                           ; 4 bytes @ 0x4
  2227  000084                     	ds	1
  2228  000085                     Lcd_Set_Cursor@z:
  2229                           	opt stack 0
  2230  000085                     ___awdiv@sign:
  2231                           	opt stack 0
  2232  000085                     ___awmod@sign:
  2233                           	opt stack 0
  2234                           
  2235                           ; 1 bytes @ 0x5
  2236  000085                     	ds	1
  2237  000086                     ?_strncmp:
  2238                           	opt stack 0
  2239  000086                     Lcd_Set_Cursor@y:
  2240                           	opt stack 0
  2241  000086                     Lcd_Write_String@i:
  2242                           	opt stack 0
  2243  000086                     ___lwdiv@counter:
  2244                           	opt stack 0
  2245  000086                     ___awdiv@quotient:
  2246                           	opt stack 0
  2247  000086                     memset@p:
  2248                           	opt stack 0
  2249  000086                     strncmp@s1:
  2250                           	opt stack 0
  2251                           
  2252                           ; 2 bytes @ 0x6
  2253  000086                     	ds	1
  2254  000087                     ?___lwmod:
  2255                           	opt stack 0
  2256  000087                     Lcd_Set_Cursor@temp:
  2257                           	opt stack 0
  2258  000087                     ___lwmod@dividend:
  2259                           	opt stack 0
  2260  000087                     criarCaracteresCGRAM@character:
  2261                           	opt stack 0
  2262                           
  2263                           ; 48 bytes @ 0x7
  2264  000087                     	ds	1
  2265  000088                     DECtoBCD@val:
  2266                           	opt stack 0
  2267  000088                     atualizarLCD@line1:
  2268                           	opt stack 0
  2269  000088                     strncmp@s2:
  2270                           	opt stack 0
  2271  000088                     ___lldiv@quotient:
  2272                           	opt stack 0
  2273                           
  2274                           ; 4 bytes @ 0x8
  2275  000088                     	ds	1
  2276  000089                     DECtoBCD@res:
  2277                           	opt stack 0
  2278  000089                     ___lwmod@divisor:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0x9
  2282  000089                     	ds	1
  2283  00008A                     atualizarLCD@line2:
  2284                           	opt stack 0
  2285  00008A                     I2C_Write@d:
  2286                           	opt stack 0
  2287  00008A                     strncmp@len:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0xA
  2291  00008A                     	ds	1
  2292  00008B                     ___lwmod@counter:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0xB
  2296  00008B                     	ds	1
  2297  00008C                     ??_strncmp:
  2298  00008C                     ?__doprnt:
  2299                           	opt stack 0
  2300  00008C                     writeEEPROM_ext@data:
  2301                           	opt stack 0
  2302  00008C                     readEEPROM_ext@adress:
  2303                           	opt stack 0
  2304  00008C                     ___lldiv@counter:
  2305                           	opt stack 0
  2306  00008C                     setDS1307TimeDate@ptrToUserVal:
  2307                           	opt stack 0
  2308  00008C                     getDS1307TimeDate@ptrToUserVal:
  2309                           	opt stack 0
  2310  00008C                     atualizarLCD@line3:
  2311                           	opt stack 0
  2312  00008C                     __doprnt@pb:
  2313                           	opt stack 0
  2314                           
  2315                           ; 2 bytes @ 0xC
  2316  00008C                     	ds	1
  2317  00008D                     writeEEPROM_ext@adress:
  2318                           	opt stack 0
  2319  00008D                     readEEPROM_ext@data:
  2320                           	opt stack 0
  2321  00008D                     I2C_Master_Init@c:
  2322                           	opt stack 0
  2323                           
  2324                           ; 4 bytes @ 0xD
  2325  00008D                     	ds	1
  2326  00008E                     ??_setDS1307TimeDate:
  2327  00008E                     ??_salvarLOG:
  2328  00008E                     ?_readEEPROM16_ext:
  2329                           	opt stack 0
  2330  00008E                     atualizarLCD@line4:
  2331                           	opt stack 0
  2332  00008E                     __doprnt@f:
  2333                           	opt stack 0
  2334                           
  2335                           ; 2 bytes @ 0xE
  2336  00008E                     	ds	1
  2337  00008F                     ?_strstr:
  2338                           	opt stack 0
  2339  00008F                     salvarLOG@ultimoLogSalvo:
  2340                           	opt stack 0
  2341  00008F                     strstr@s1:
  2342                           	opt stack 0
  2343                           
  2344                           ; 2 bytes @ 0xF
  2345  00008F                     	ds	1
  2346  000090                     ??_readEEPROM16_ext:
  2347  000090                     atualizarLCD@i:
  2348                           	opt stack 0
  2349  000090                     __doprnt@ap:
  2350                           	opt stack 0
  2351                           
  2352                           ; 2 bytes @ 0x10
  2353  000090                     	ds	1
  2354  000091                     ??_I2C_Master_Init:
  2355  000091                     readEEPROM16_ext@data:
  2356                           	opt stack 0
  2357  000091                     strstr@s2:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x11
  2361  000091                     	ds	1
  2362  000092                     ??__doprnt:
  2363                           
  2364                           ; 1 bytes @ 0x12
  2365  000092                     	ds	1
  2366  000093                     readEEPROM16_ext@adress:
  2367                           	opt stack 0
  2368  000093                     aguardaBuffer@str:
  2369                           	opt stack 0
  2370                           
  2371                           ; 2 bytes @ 0x13
  2372  000093                     	ds	1
  2373  000094                     lerParametros@verifica_memoria_nova:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x14
  2377  000094                     	ds	1
  2378  000095                     lerParametros@i:
  2379                           	opt stack 0
  2380                           
  2381                           ; 1 bytes @ 0x15
  2382  000095                     	ds	1
  2383  000096                     __doprnt@prec:
  2384                           	opt stack 0
  2385                           
  2386                           ; 1 bytes @ 0x16
  2387  000096                     	ds	1
  2388  000097                     __doprnt@val:
  2389                           	opt stack 0
  2390                           
  2391                           ; 2 bytes @ 0x17
  2392  000097                     	ds	2
  2393  000099                     __doprnt@len:
  2394                           	opt stack 0
  2395                           
  2396                           ; 2 bytes @ 0x19
  2397  000099                     	ds	2
  2398  00009B                     __doprnt@flag:
  2399                           	opt stack 0
  2400                           
  2401                           ; 1 bytes @ 0x1B
  2402  00009B                     	ds	1
  2403  00009C                     __doprnt@cp:
  2404                           	opt stack 0
  2405                           
  2406                           ; 2 bytes @ 0x1C
  2407  00009C                     	ds	2
  2408  00009E                     __doprnt@width:
  2409                           	opt stack 0
  2410                           
  2411                           ; 2 bytes @ 0x1E
  2412  00009E                     	ds	2
  2413  0000A0                     __doprnt@c:
  2414                           	opt stack 0
  2415                           
  2416                           ; 1 bytes @ 0x20
  2417  0000A0                     	ds	1
  2418  0000A1                     ?_sprintf:
  2419                           	opt stack 0
  2420  0000A1                     ?_printf:
  2421                           	opt stack 0
  2422  0000A1                     printf@f:
  2423                           	opt stack 0
  2424  0000A1                     sprintf@wh:
  2425                           	opt stack 0
  2426                           
  2427                           ; 2 bytes @ 0x21
  2428  0000A1                     	ds	2
  2429  0000A3                     sprintf@f:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0x23
  2433  0000A3                     	ds	12
  2434  0000AF                     sprintf@ap:
  2435                           	opt stack 0
  2436                           
  2437                           ; 2 bytes @ 0x2F
  2438  0000AF                     	ds	2
  2439  0000B1                     sprintf@pb:
  2440                           	opt stack 0
  2441                           
  2442                           ; 4 bytes @ 0x31
  2443  0000B1                     	ds	4
  2444  0000B5                     ??_tela_testeBombas:
  2445  0000B5                     ??_dataLoger:
  2446  0000B5                     ?_intToFloatStr:
  2447                           	opt stack 0
  2448  0000B5                     ?_getSerial:
  2449                           	opt stack 0
  2450  0000B5                     getSerial@str:
  2451                           	opt stack 0
  2452  0000B5                     printf@ap:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0x35
  2456  0000B5                     	ds	2
  2457  0000B7                     getSerial@end:
  2458                           	opt stack 0
  2459  0000B7                     _criarCaracteresCGRAM$1375:
  2460                           	opt stack 0
  2461  0000B7                     _tela_testeBombas$1418:
  2462                           	opt stack 0
  2463  0000B7                     intToFloatStr@end:
  2464                           	opt stack 0
  2465  0000B7                     printf@pb:
  2466                           	opt stack 0
  2467                           
  2468                           ; 4 bytes @ 0x37
  2469  0000B7                     	ds	1
  2470  0000B8                     ??_getSerial:
  2471                           
  2472                           ; 1 bytes @ 0x38
  2473  0000B8                     	ds	1
  2474  0000B9                     criarCaracteresCGRAM@k:
  2475                           	opt stack 0
  2476                           
  2477                           ; 1 bytes @ 0x39
  2478  0000B9                     	ds	1
  2479  0000BA                     criarCaracteresCGRAM@j:
  2480                           	opt stack 0
  2481  0000BA                     getSerial@length:
  2482                           	opt stack 0
  2483  0000BA                     _dataLoger$1437:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x3A
  2487  0000BA                     	ds	1
  2488  0000BB                     ??_comunicarTeste:
  2489  0000BB                     ??_enviaSMS:
  2490  0000BB                     criarCaracteresCGRAM@i:
  2491                           	opt stack 0
  2492  0000BB                     intToFloatStr@conv:
  2493                           	opt stack 0
  2494                           
  2495                           ; 4 bytes @ 0x3B
  2496  0000BB                     	ds	1
  2497  0000BC                     getSerial@i:
  2498                           	opt stack 0
  2499  0000BC                     _dataLoger$1443:
  2500                           	opt stack 0
  2501                           
  2502                           ; 2 bytes @ 0x3C
  2503  0000BC                     	ds	1
  2504  0000BD                     getSerial@ret:
  2505                           	opt stack 0
  2506  0000BD                     _comunicarTeste$1193:
  2507                           	opt stack 0
  2508  0000BD                     _enviaSMS$1208:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0x3D
  2512  0000BD                     	ds	1
  2513  0000BE                     _dataLoger$1448:
  2514                           	opt stack 0
  2515                           
  2516                           ; 2 bytes @ 0x3E
  2517  0000BE                     	ds	1
  2518  0000BF                     ??_configuraTelefones:
  2519  0000BF                     ?_atoi:
  2520                           	opt stack 0
  2521  0000BF                     intToFloatStr@valor:
  2522                           	opt stack 0
  2523  0000BF                     _enviaSMS$1221:
  2524                           	opt stack 0
  2525  0000BF                     atoi@s:
  2526                           	opt stack 0
  2527                           
  2528                           ; 2 bytes @ 0x3F
  2529  0000BF                     	ds	1
  2530  0000C0                     dataLoger@logs:
  2531                           	opt stack 0
  2532  0000C0                     intToFloatStr@pr:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x40
  2536  0000C0                     	ds	1
  2537  0000C1                     ??_atoi:
  2538  0000C1                     _enviaSMS$1222:
  2539                           	opt stack 0
  2540  0000C1                     _configuraTelefones$1463:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x41
  2544  0000C1                     	ds	1
  2545  0000C2                     _telaPrincipal$2377:
  2546                           	opt stack 0
  2547  0000C2                     _ajusteSP_Bombas$2378:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0x42
  2551  0000C2                     	ds	1
  2552  0000C3                     configuraTelefones@i:
  2553                           	opt stack 0
  2554  0000C3                     atoi@sign:
  2555                           	opt stack 0
  2556  0000C3                     _enviaSMS$1223:
  2557                           	opt stack 0
  2558                           
  2559                           ; 2 bytes @ 0x43
  2560  0000C3                     	ds	1
  2561  0000C4                     atoi@a:
  2562                           	opt stack 0
  2563                           
  2564                           ; 2 bytes @ 0x44
  2565  0000C4                     	ds	1
  2566  0000C5                     _enviaSMS$1228:
  2567                           	opt stack 0
  2568                           
  2569                           ; 2 bytes @ 0x45
  2570  0000C5                     	ds	1
  2571  0000C6                     ??_getSinalSIM800L:
  2572                           
  2573                           ; 1 bytes @ 0x46
  2574  0000C6                     	ds	1
  2575  0000C7                     enviaSMS@tipo:
  2576                           	opt stack 0
  2577                           
  2578                           ; 1 bytes @ 0x47
  2579  0000C7                     	ds	1
  2580  0000C8                     ??_acaoBombas:
  2581  0000C8                     ??_acaoTesteBombas:
  2582  0000C8                     getSinalSIM800L@sinal:
  2583                           	opt stack 0
  2584                           
  2585                           ; 2 bytes @ 0x48
  2586  0000C8                     	ds	5
  2587  0000CD                     _acaoTesteBombas$2376:
  2588                           	opt stack 0
  2589                           
  2590                           ; 2 bytes @ 0x4D
  2591  0000CD                     	ds	2
  2592  0000CF                     _acaoTesteBombas$1292:
  2593                           	opt stack 0
  2594                           
  2595                           ; 2 bytes @ 0x4F
  2596  0000CF                     	ds	2
  2597  0000D1                     _acaoTesteBombas$1308:
  2598                           	opt stack 0
  2599                           
  2600                           ; 2 bytes @ 0x51
  2601  0000D1                     	ds	2
  2602  0000D3                     _acaoTesteBombas$1313:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x53
  2606  0000D3                     	ds	2
  2607  0000D5                     _acaoTesteBombas$1318:
  2608                           	opt stack 0
  2609                           
  2610                           ; 2 bytes @ 0x55
  2611  0000D5                     	ds	2
  2612  0000D7                     acaoTesteBombas@intervalo:
  2613                           	opt stack 0
  2614                           
  2615                           ; 1 bytes @ 0x57
  2616  0000D7                     	ds	1
  2617  0000D8                     acaoTesteBombas@i:
  2618                           	opt stack 0
  2619                           
  2620                           ; 1 bytes @ 0x58
  2621  0000D8                     	ds	1
  2622  0000D9                     tblptru	equ	0xFF8
  2623                           tblptrh	equ	0xFF7
  2624                           tblptrl	equ	0xFF6
  2625                           tablat	equ	0xFF5
  2626                           postinc0	equ	0xFEE
  2627                           wreg	equ	0xFE8
  2628                           postdec1	equ	0xFE5
  2629                           fsr1l	equ	0xFE1
  2630                           
  2631                           ; 1 bytes @ 0x59
  2632                           
  2633                           	psect	cstackCOMRAM
  2634  000001                     __pcstackCOMRAM:
  2635                           	opt stack 0
  2636  000001                     ??i2_I2C_Wait:
  2637  000001                     ?_readADC:
  2638                           	opt stack 0
  2639  000001                     ?___ftpack:
  2640                           	opt stack 0
  2641  000001                     i2BCDtoDEC@val:
  2642                           	opt stack 0
  2643  000001                     i2delay@x:
  2644                           	opt stack 0
  2645  000001                     ___ftpack@arg:
  2646                           	opt stack 0
  2647  000001                     ___ftge@ff1:
  2648                           	opt stack 0
  2649                           
  2650                           ; 3 bytes @ 0x0
  2651  000001                     	ds	1
  2652  000002                     ?i2_I2C_Read:
  2653                           	opt stack 0
  2654  000002                     i2I2C_Write@d:
  2655                           	opt stack 0
  2656  000002                     i2I2C_Read@a:
  2657                           	opt stack 0
  2658                           
  2659                           ; 2 bytes @ 0x1
  2660  000002                     	ds	1
  2661  000003                     ??_readADC:
  2662  000003                     ??i2_delay:
  2663                           
  2664                           ; 1 bytes @ 0x2
  2665  000003                     	ds	1
  2666  000004                     ___ftpack@exp:
  2667                           	opt stack 0
  2668  000004                     i2writeEEPROM_ext@data:
  2669                           	opt stack 0
  2670  000004                     i2I2C_Read@temp:
  2671                           	opt stack 0
  2672  000004                     ___ftge@ff2:
  2673                           	opt stack 0
  2674                           
  2675                           ; 3 bytes @ 0x3
  2676  000004                     	ds	1
  2677  000005                     ___ftpack@sign:
  2678                           	opt stack 0
  2679  000005                     i2writeEEPROM_ext@adress:
  2680                           	opt stack 0
  2681                           
  2682                           ; 1 bytes @ 0x4
  2683  000005                     	ds	1
  2684  000006                     ??___ftpack:
  2685  000006                     writeEEPROM16_ext@data:
  2686                           	opt stack 0
  2687  000006                     i2getDS1307TimeDate@ptrToUserVal:
  2688                           	opt stack 0
  2689                           
  2690                           ; 2 bytes @ 0x5
  2691  000006                     	ds	1
  2692  000007                     ??___ftge:
  2693                           
  2694                           ; 1 bytes @ 0x6
  2695  000007                     	ds	1
  2696  000008                     writeEEPROM16_ext@adress:
  2697                           	opt stack 0
  2698                           
  2699                           ; 1 bytes @ 0x7
  2700  000008                     	ds	1
  2701  000009                     ?___lwtoft:
  2702                           	opt stack 0
  2703  000009                     _timer$1321:
  2704                           	opt stack 0
  2705  000009                     ___lwtoft@c:
  2706                           	opt stack 0
  2707                           
  2708                           ; 2 bytes @ 0x8
  2709  000009                     	ds	2
  2710  00000B                     _timer$1322:
  2711                           	opt stack 0
  2712                           
  2713                           ; 2 bytes @ 0xA
  2714  00000B                     	ds	1
  2715  00000C                     ?___ftmul:
  2716                           	opt stack 0
  2717  00000C                     ___ftmul@f1:
  2718                           	opt stack 0
  2719                           
  2720                           ; 3 bytes @ 0xB
  2721  00000C                     	ds	1
  2722  00000D                     _timer$1323:
  2723                           	opt stack 0
  2724                           
  2725                           ; 2 bytes @ 0xC
  2726  00000D                     	ds	2
  2727  00000F                     _timer$1324:
  2728                           	opt stack 0
  2729  00000F                     ___ftmul@f2:
  2730                           	opt stack 0
  2731                           
  2732                           ; 3 bytes @ 0xE
  2733  00000F                     	ds	3
  2734  000012                     ??___ftmul:
  2735                           
  2736                           ; 1 bytes @ 0x11
  2737  000012                     	ds	3
  2738  000015                     ___ftmul@exp:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0x14
  2742  000015                     	ds	1
  2743  000016                     ___ftmul@f3_as_product:
  2744                           	opt stack 0
  2745                           
  2746                           ; 3 bytes @ 0x15
  2747  000016                     	ds	3
  2748  000019                     ___ftmul@cntr:
  2749                           	opt stack 0
  2750                           
  2751                           ; 1 bytes @ 0x18
  2752  000019                     	ds	1
  2753  00001A                     ___ftmul@sign:
  2754                           	opt stack 0
  2755                           
  2756                           ; 1 bytes @ 0x19
  2757  00001A                     	ds	1
  2758  00001B                     ?___ftadd:
  2759                           	opt stack 0
  2760  00001B                     ?___ftdiv:
  2761                           	opt stack 0
  2762  00001B                     ?___fttol:
  2763                           	opt stack 0
  2764  00001B                     ___ftadd@f1:
  2765                           	opt stack 0
  2766  00001B                     ___ftdiv@f1:
  2767                           	opt stack 0
  2768  00001B                     ___fttol@f1:
  2769                           	opt stack 0
  2770                           
  2771                           ; 3 bytes @ 0x1A
  2772  00001B                     	ds	3
  2773  00001E                     ___ftadd@f2:
  2774                           	opt stack 0
  2775  00001E                     ___ftdiv@f2:
  2776                           	opt stack 0
  2777                           
  2778                           ; 3 bytes @ 0x1D
  2779  00001E                     	ds	1
  2780  00001F                     ??___fttol:
  2781                           
  2782                           ; 1 bytes @ 0x1E
  2783  00001F                     	ds	2
  2784  000021                     ??___ftadd:
  2785  000021                     ??___ftdiv:
  2786                           
  2787                           ; 1 bytes @ 0x20
  2788  000021                     	ds	3
  2789  000024                     ___ftadd@sign:
  2790                           	opt stack 0
  2791  000024                     ___ftdiv@cntr:
  2792                           	opt stack 0
  2793  000024                     ___fttol@sign1:
  2794                           	opt stack 0
  2795                           
  2796                           ; 1 bytes @ 0x23
  2797  000024                     	ds	1
  2798  000025                     ___ftadd@exp2:
  2799                           	opt stack 0
  2800  000025                     ___ftdiv@f3:
  2801                           	opt stack 0
  2802  000025                     ___fttol@lval:
  2803                           	opt stack 0
  2804                           
  2805                           ; 4 bytes @ 0x24
  2806  000025                     	ds	1
  2807  000026                     ___ftadd@exp1:
  2808                           	opt stack 0
  2809                           
  2810                           ; 1 bytes @ 0x25
  2811  000026                     	ds	2
  2812  000028                     ___ftdiv@exp:
  2813                           	opt stack 0
  2814                           
  2815                           ; 1 bytes @ 0x27
  2816  000028                     	ds	1
  2817  000029                     ___ftdiv@sign:
  2818                           	opt stack 0
  2819  000029                     ___fttol@exp1:
  2820                           	opt stack 0
  2821                           
  2822                           ; 1 bytes @ 0x28
  2823  000029                     	ds	1
  2824  00002A                     lerTransdutor@i:
  2825                           	opt stack 0
  2826                           
  2827                           ; 1 bytes @ 0x29
  2828  00002A                     	ds	1
  2829  00002B                     lerTransdutor@_pressao:
  2830                           	opt stack 0
  2831                           
  2832                           ; 3 bytes @ 0x2A
  2833  00002B                     	ds	3
  2834  00002E                     lerTransdutor@tensao:
  2835                           	opt stack 0
  2836                           
  2837                           ; 3 bytes @ 0x2D
  2838  00002E                     	ds	3
  2839  000031                     ??_TIMER:
  2840                           
  2841                           ; 1 bytes @ 0x30
  2842  000031                     	ds	18
  2843  000043                     TIMER@c:
  2844                           	opt stack 0
  2845                           
  2846                           ; 1 bytes @ 0x42
  2847  000043                     	ds	1
  2848                           tblptru	equ	0xFF8
  2849                           tblptrh	equ	0xFF7
  2850                           tblptrl	equ	0xFF6
  2851                           tablat	equ	0xFF5
  2852                           postinc0	equ	0xFEE
  2853                           wreg	equ	0xFE8
  2854                           postdec1	equ	0xFE5
  2855                           fsr1l	equ	0xFE1
  2856                           
  2857 ;;
  2858 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2859 ;;
  2860 ;; *************** function _main *****************
  2861 ;; Defined at:
  2862 ;;		line 66 in file "Main.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;		None
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;		None
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  1    wreg      void 
  2869 ;; Registers used:
  2870 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2876 ;;      Params:         0       0       0       0       0       0       0
  2877 ;;      Locals:         0       0       0       0       0       0       0
  2878 ;;      Temps:          0       0       0       0       0       0       0
  2879 ;;      Totals:         0       0       0       0       0       0       0
  2880 ;;Total ram usage:        0 bytes
  2881 ;; Hardware stack levels required when called:   11
  2882 ;; This function calls:
  2883 ;;		_I2C_Master_Init
  2884 ;;		_Lcd_Clear
  2885 ;;		_Lcd_Init
  2886 ;;		_RTC_Init
  2887 ;;		_acaoBombas
  2888 ;;		_acaoTesteBombas
  2889 ;;		_ajusteSP_Bombas
  2890 ;;		_atualizarLCD
  2891 ;;		_btPress
  2892 ;;		_configuraRegistradores
  2893 ;;		_configuraTelefones
  2894 ;;		_configurarEstacionaria
  2895 ;;		_criarCaracteresCGRAM
  2896 ;;		_dataLoger
  2897 ;;		_delay
  2898 ;;		_getDS1307TimeDate
  2899 ;;		_getSinalSIM800L
  2900 ;;		_informacoes
  2901 ;;		_lerParametros
  2902 ;;		_setShiftREG
  2903 ;;		_sprintf
  2904 ;;		_telaPrincipal
  2905 ;;		_tela_ajusteRTC
  2906 ;;		_tela_testeBombas
  2907 ;;		_verificarIntervaloTesteBombas
  2908 ;; This function is called by:
  2909 ;;		Startup code after reset
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text0
  2914  000DCC                     __ptext0:
  2915                           	opt stack 0
  2916  000DCC                     _main:
  2917                           	opt stack 0
  2918  000DCC  FFFF               	dw	65535	; assembler added errata NOP
  2919                           
  2920                           ;Main.c: 68: configuraRegistradores();
  2921                           
  2922                           ;incstack = 0
  2923  000DCE  EC8C  F03A         	call	_configuraRegistradores	;wreg free
  2924                           
  2925                           ;Main.c: 69: I2C_Master_Init(100000);
  2926  000DD2  0EA0               	movlw	160
  2927  000DD4  0100               	movlb	0	; () banked
  2928  000DD6  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2929  000DD8  0E86               	movlw	134
  2930  000DDA  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2931  000DDC  0E01               	movlw	1
  2932  000DDE  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2933  000DE0  0E00               	movlw	0
  2934  000DE2  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2935  000DE4  EC18  F03B         	call	_I2C_Master_Init	;wreg free
  2936                           
  2937                           ;Main.c: 70: delay(200);
  2938  000DE8  0E00               	movlw	0
  2939  000DEA  0100               	movlb	0	; () banked
  2940  000DEC  6F81               	movwf	(delay@x+1)& (0+255),b
  2941  000DEE  0EC8               	movlw	200
  2942  000DF0  6F80               	movwf	delay@x& (0+255),b
  2943  000DF2  ECC5  F037         	call	_delay	;wreg free
  2944                           
  2945                           ;Main.c: 71: RTC_Init();
  2946  000DF6  EC16  F038         	call	_RTC_Init	;wreg free
  2947                           
  2948                           ;Main.c: 72: delay(100);
  2949  000DFA  0E00               	movlw	0
  2950  000DFC  0100               	movlb	0	; () banked
  2951  000DFE  6F81               	movwf	(delay@x+1)& (0+255),b
  2952  000E00  0E64               	movlw	100
  2953  000E02  6F80               	movwf	delay@x& (0+255),b
  2954  000E04  ECC5  F037         	call	_delay	;wreg free
  2955                           
  2956                           ;Main.c: 73: getDS1307TimeDate(&rtc);
  2957  000E08  0E76               	movlw	low _rtc
  2958  000E0A  0100               	movlb	0	; () banked
  2959  000E0C  6F8C               	movwf	getDS1307TimeDate@ptrToUserVal& (0+255),b
  2960  000E0E  0E00               	movlw	high _rtc
  2961  000E10  6F8D               	movwf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  2962  000E12  EC14  F017         	call	_getDS1307TimeDate	;wreg free
  2963                           
  2964                           ;Main.c: 74: Lcd_Init();
  2965  000E16  EC77  F03C         	call	_Lcd_Init	;wreg free
  2966                           
  2967                           ;Main.c: 75: Lcd_Clear();
  2968  000E1A  EC8D  F036         	call	_Lcd_Clear	;wreg free
  2969                           
  2970                           ;Main.c: 76: criarCaracteresCGRAM();
  2971  000E1E  EC26  F01D         	call	_criarCaracteresCGRAM	;wreg free
  2972                           
  2973                           ;Main.c: 77: delay(100);
  2974  000E22  0E00               	movlw	0
  2975  000E24  0100               	movlb	0	; () banked
  2976  000E26  6F81               	movwf	(delay@x+1)& (0+255),b
  2977  000E28  0E64               	movlw	100
  2978  000E2A  6F80               	movwf	delay@x& (0+255),b
  2979  000E2C  ECC5  F037         	call	_delay	;wreg free
  2980                           
  2981                           ;Main.c: 78: lerParametros();
  2982  000E30  ECAE  F017         	call	_lerParametros	;wreg free
  2983                           
  2984                           ;Main.c: 79: sprintf(line1, "TECHNOW");
  2985  000E34  0E7B               	movlw	low _line1
  2986  000E36  0100               	movlb	0	; () banked
  2987  000E38  6FA1               	movwf	sprintf@wh& (0+255),b
  2988  000E3A  0E01               	movlw	high _line1
  2989  000E3C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2990  000E3E  0E9B               	movlw	low STR_86
  2991  000E40  6FA3               	movwf	sprintf@f& (0+255),b
  2992  000E42  0E7F               	movlw	high STR_86
  2993  000E44  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2994  000E46  ECC9  F039         	call	_sprintf	;wreg free
  2995                           
  2996                           ;Main.c: 80: sprintf(line2, "Sistemas embarcados");
  2997  000E4A  0E66               	movlw	low _line2
  2998  000E4C  0100               	movlb	0	; () banked
  2999  000E4E  6FA1               	movwf	sprintf@wh& (0+255),b
  3000  000E50  0E01               	movlw	high _line2
  3001  000E52  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3002  000E54  0ED8               	movlw	low STR_87
  3003  000E56  6FA3               	movwf	sprintf@f& (0+255),b
  3004  000E58  0E7C               	movlw	high STR_87
  3005  000E5A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3006  000E5C  ECC9  F039         	call	_sprintf	;wreg free
  3007                           
  3008                           ;Main.c: 81: sprintf(line3, "Versao Soft.:");
  3009  000E60  0E51               	movlw	low _line3
  3010  000E62  0100               	movlb	0	; () banked
  3011  000E64  6FA1               	movwf	sprintf@wh& (0+255),b
  3012  000E66  0E01               	movlw	high _line3
  3013  000E68  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3014  000E6A  0E94               	movlw	low STR_112
  3015  000E6C  6FA3               	movwf	sprintf@f& (0+255),b
  3016  000E6E  0E7E               	movlw	high STR_112
  3017  000E70  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3018  000E72  ECC9  F039         	call	_sprintf	;wreg free
  3019                           
  3020                           ;Main.c: 82: sprintf(&line4[9], "%s", "Aug 25 2019");
  3021  000E76  0E45               	movlw	low (_line4+9)
  3022  000E78  0100               	movlb	0	; () banked
  3023  000E7A  6FA1               	movwf	sprintf@wh& (0+255),b
  3024  000E7C  0E01               	movlw	high (_line4+9)
  3025  000E7E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3026  000E80  0E12               	movlw	low (STR_89+9)
  3027  000E82  6FA3               	movwf	sprintf@f& (0+255),b
  3028  000E84  0E7F               	movlw	high (STR_89+9)
  3029  000E86  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3030  000E88  0EE5               	movlw	low STR_15
  3031  000E8A  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3032  000E8C  0E7E               	movlw	high STR_15
  3033  000E8E  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3034  000E90  ECC9  F039         	call	_sprintf	;wreg free
  3035                           
  3036                           ;Main.c: 83: atualizarLCD(line1, line2, line3, line4);
  3037  000E94  0E7B               	movlw	low _line1
  3038  000E96  0100               	movlb	0	; () banked
  3039  000E98  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3040  000E9A  0E01               	movlw	high _line1
  3041  000E9C  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3042  000E9E  0E66               	movlw	low _line2
  3043  000EA0  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3044  000EA2  0E01               	movlw	high _line2
  3045  000EA4  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3046  000EA6  0E51               	movlw	low _line3
  3047  000EA8  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3048  000EAA  0E01               	movlw	high _line3
  3049  000EAC  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3050  000EAE  0E3C               	movlw	low _line4
  3051  000EB0  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3052  000EB2  0E01               	movlw	high _line4
  3053  000EB4  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3054  000EB6  ECBD  F01C         	call	_atualizarLCD	;wreg free
  3055                           
  3056                           ;Main.c: 84: delay(2500);
  3057  000EBA  0E09               	movlw	9
  3058  000EBC  0100               	movlb	0	; () banked
  3059  000EBE  6F81               	movwf	(delay@x+1)& (0+255),b
  3060  000EC0  0EC4               	movlw	196
  3061  000EC2  6F80               	movwf	delay@x& (0+255),b
  3062  000EC4  ECC5  F037         	call	_delay	;wreg free
  3063  000EC8                     l900:
  3064  000EC8  FFFF               	dw	65535	; assembler added errata NOP
  3065  000ECA  0004               	clrwdt		;# 
  3066                           
  3067                           ;Main.c: 90: if (!executandoTeste && !flagErroTransdutor) {
  3068  000ECC  0100               	movlb	0	; () banked
  3069  000ECE  51F1               	movf	_executandoTeste& (0+255),w,b
  3070  000ED0  A4D8               	btfss	status,2,c
  3071  000ED2  D004               	goto	l901
  3072                           
  3073                           ; BSR set to: 0
  3074  000ED4  5073               	movf	_flagErroTransdutor,w,c
  3075  000ED6  B4D8               	btfsc	status,2,c
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;Main.c: 91: acaoBombas();
  3079  000ED8  EC41  F018         	call	_acaoBombas	;wreg free
  3080  000EDC                     l901:
  3081  000EDC  FFFF               	dw	65535	; assembler added errata NOP
  3082                           
  3083                           ;Main.c: 92: }
  3084                           ;Main.c: 94: verificarIntervaloTesteBombas();
  3085  000EDE  EC63  F039         	call	_verificarIntervaloTesteBombas	;wreg free
  3086                           
  3087                           ;Main.c: 96: setShiftREG();
  3088  000EE2  ECED  F039         	call	_setShiftREG	;wreg free
  3089                           
  3090                           ;Main.c: 97: getSinalSIM800L();
  3091  000EE6  ECCB  F014         	call	_getSinalSIM800L	;wreg free
  3092                           
  3093                           ;Main.c: 100: switch (menu_posi) {
  3094  000EEA  D085               	goto	l902
  3095  000EEC  FFFF               	dw	65535	; assembler added errata NOP
  3096                           
  3097                           ;Main.c: 102: telaPrincipal();
  3098  000EEE  EC01  F011         	call	_telaPrincipal	;wreg free
  3099                           
  3100                           ;Main.c: 104: break;
  3101  000EF2  D0A6               	goto	l904
  3102  000EF4  FFFF               	dw	65535	; assembler added errata NOP
  3103                           
  3104                           ;Main.c: 106: sprintf(&line1[1], "DATA/HORA");
  3105  000EF6  0E7C               	movlw	low (_line1+1)
  3106  000EF8  0100               	movlb	0	; () banked
  3107  000EFA  6FA1               	movwf	sprintf@wh& (0+255),b
  3108  000EFC  0E01               	movlw	high (_line1+1)
  3109  000EFE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3110  000F00  0E57               	movlw	low STR_115
  3111  000F02  6FA3               	movwf	sprintf@f& (0+255),b
  3112  000F04  0E7F               	movlw	high STR_115
  3113  000F06  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3114  000F08  ECC9  F039         	call	_sprintf	;wreg free
  3115                           
  3116                           ;Main.c: 107: sprintf(&line2[1], "PRESSAO DA REDE");
  3117  000F0C  0E67               	movlw	low (_line2+1)
  3118  000F0E  0100               	movlb	0	; () banked
  3119  000F10  6FA1               	movwf	sprintf@wh& (0+255),b
  3120  000F12  0E01               	movlw	high (_line2+1)
  3121  000F14  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3122  000F16  0E1B               	movlw	low STR_116
  3123  000F18  6FA3               	movwf	sprintf@f& (0+255),b
  3124  000F1A  0E7E               	movlw	high STR_116
  3125  000F1C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3126  000F1E  ECC9  F039         	call	_sprintf	;wreg free
  3127                           
  3128                           ;Main.c: 108: sprintf(&line3[1], "PARTIDA COMBUSTAO");
  3129  000F22  0E52               	movlw	low (_line3+1)
  3130  000F24  0100               	movlb	0	; () banked
  3131  000F26  6FA1               	movwf	sprintf@wh& (0+255),b
  3132  000F28  0E01               	movlw	high (_line3+1)
  3133  000F2A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3134  000F2C  0E71               	movlw	low STR_117
  3135  000F2E  6FA3               	movwf	sprintf@f& (0+255),b
  3136  000F30  0E7D               	movlw	high STR_117
  3137  000F32  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3138  000F34  ECC9  F039         	call	_sprintf	;wreg free
  3139                           
  3140                           ;Main.c: 109: sprintf(&line4[1], "TELEFONES");
  3141  000F38  0E3D               	movlw	low (_line4+1)
  3142  000F3A  0100               	movlb	0	; () banked
  3143  000F3C  6FA1               	movwf	sprintf@wh& (0+255),b
  3144  000F3E  0E01               	movlw	high (_line4+1)
  3145  000F40  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3146  000F42  0E6B               	movlw	low STR_118
  3147  000F44  6FA3               	movwf	sprintf@f& (0+255),b
  3148  000F46  0E7F               	movlw	high STR_118
  3149  000F48  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3150  000F4A  ECC9  F039         	call	_sprintf	;wreg free
  3151                           
  3152                           ;Main.c: 110: break;
  3153  000F4E  D078               	goto	l904
  3154  000F50  FFFF               	dw	65535	; assembler added errata NOP
  3155                           
  3156                           ;Main.c: 112: sprintf(&line1[1], "PERIODO DE TESTES");
  3157  000F52  0E7C               	movlw	low (_line1+1)
  3158  000F54  0100               	movlb	0	; () banked
  3159  000F56  6FA1               	movwf	sprintf@wh& (0+255),b
  3160  000F58  0E01               	movlw	high (_line1+1)
  3161  000F5A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3162  000F5C  0E83               	movlw	low STR_119
  3163  000F5E  6FA3               	movwf	sprintf@f& (0+255),b
  3164  000F60  0E7D               	movlw	high STR_119
  3165  000F62  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3166  000F64  ECC9  F039         	call	_sprintf	;wreg free
  3167                           
  3168                           ;Main.c: 113: sprintf(&line2[1], "DATALOGER");
  3169  000F68  0E67               	movlw	low (_line2+1)
  3170  000F6A  0100               	movlb	0	; () banked
  3171  000F6C  6FA1               	movwf	sprintf@wh& (0+255),b
  3172  000F6E  0E01               	movlw	high (_line2+1)
  3173  000F70  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3174  000F72  0E61               	movlw	low STR_120
  3175  000F74  6FA3               	movwf	sprintf@f& (0+255),b
  3176  000F76  0E7F               	movlw	high STR_120
  3177  000F78  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3178  000F7A  ECC9  F039         	call	_sprintf	;wreg free
  3179                           
  3180                           ;Main.c: 114: sprintf(&line3[1], "INFO VERSAO");
  3181  000F7E  0E52               	movlw	low (_line3+1)
  3182  000F80  0100               	movlb	0	; () banked
  3183  000F82  6FA1               	movwf	sprintf@wh& (0+255),b
  3184  000F84  0E01               	movlw	high (_line3+1)
  3185  000F86  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3186  000F88  0EFD               	movlw	low STR_121
  3187  000F8A  6FA3               	movwf	sprintf@f& (0+255),b
  3188  000F8C  0E7E               	movlw	high STR_121
  3189  000F8E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3190  000F90  ECC9  F039         	call	_sprintf	;wreg free
  3191                           
  3192                           ;Main.c: 115: sprintf(&line4[1], "Iniciar Testes");
  3193  000F94  0E3D               	movlw	low (_line4+1)
  3194  000F96  0100               	movlb	0	; () banked
  3195  000F98  6FA1               	movwf	sprintf@wh& (0+255),b
  3196  000F9A  0E01               	movlw	high (_line4+1)
  3197  000F9C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3198  000F9E  0E85               	movlw	low STR_122
  3199  000FA0  6FA3               	movwf	sprintf@f& (0+255),b
  3200  000FA2  0E7E               	movlw	high STR_122
  3201  000FA4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3202  000FA6  ECC9  F039         	call	_sprintf	;wreg free
  3203                           
  3204                           ;Main.c: 116: break;
  3205  000FAA  D04A               	goto	l904
  3206  000FAC  FFFF               	dw	65535	; assembler added errata NOP
  3207                           
  3208                           ;Main.c: 118: tela_ajusteRTC();
  3209  000FAE  ECCC  F00E         	call	_tela_ajusteRTC	;wreg free
  3210                           
  3211                           ;Main.c: 119: break;
  3212  000FB2  D046               	goto	l904
  3213  000FB4  FFFF               	dw	65535	; assembler added errata NOP
  3214                           
  3215                           ;Main.c: 121: ajusteSP_Bombas();
  3216  000FB6  EC83  F00C         	call	_ajusteSP_Bombas	;wreg free
  3217                           
  3218                           ;Main.c: 122: break;
  3219  000FBA  D042               	goto	l904
  3220  000FBC  FFFF               	dw	65535	; assembler added errata NOP
  3221                           
  3222                           ;Main.c: 124: configurarEstacionaria();
  3223  000FBE  EC5D  F016         	call	_configurarEstacionaria	;wreg free
  3224                           
  3225                           ;Main.c: 125: break;
  3226  000FC2  D03E               	goto	l904
  3227  000FC4  FFFF               	dw	65535	; assembler added errata NOP
  3228                           
  3229                           ;Main.c: 127: configuraTelefones();
  3230  000FC6  EC1A  F009         	call	_configuraTelefones	;wreg free
  3231                           
  3232                           ;Main.c: 128: break;
  3233  000FCA  D03A               	goto	l904
  3234  000FCC  FFFF               	dw	65535	; assembler added errata NOP
  3235                           
  3236                           ;Main.c: 130: tela_testeBombas();
  3237  000FCE  ECFB  F012         	call	_tela_testeBombas	;wreg free
  3238                           
  3239                           ;Main.c: 131: break;
  3240  000FD2  D036               	goto	l904
  3241  000FD4  FFFF               	dw	65535	; assembler added errata NOP
  3242                           
  3243                           ;Main.c: 133: dataLoger();
  3244  000FD6  ECB0  F00D         	call	_dataLoger	;wreg free
  3245                           
  3246                           ;Main.c: 134: break;
  3247  000FDA  D032               	goto	l904
  3248  000FDC  FFFF               	dw	65535	; assembler added errata NOP
  3249                           
  3250                           ;Main.c: 136: informacoes();
  3251  000FDE  ECBB  F03B         	call	_informacoes	;wreg free
  3252                           
  3253                           ;Main.c: 137: break;
  3254  000FE2  D02E               	goto	l904
  3255  000FE4  FFFF               	dw	65535	; assembler added errata NOP
  3256                           
  3257                           ;Main.c: 139: acaoTesteBombas();
  3258  000FE6  EC8D  F004         	call	_acaoTesteBombas	;wreg free
  3259                           
  3260                           ;Main.c: 140: break;
  3261  000FEA  D02A               	goto	l904
  3262  000FEC  FFFF               	dw	65535	; assembler added errata NOP
  3263  000FEE  0E00               	movlw	0
  3264  000FF0  0100               	movlb	0	; () banked
  3265  000FF2  6FDE               	movwf	_menu_posi& (0+255),b
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;Main.c: 144: }
  3269                           
  3270                           ;Main.c: 143: break;
  3271  000FF4  D025               	goto	l904
  3272  000FF6                     l902:
  3273  000FF6  FFFF               	dw	65535	; assembler added errata NOP
  3274                           
  3275                           ; BSR set to: 0
  3276  000FF8  0100               	movlb	0	; () banked
  3277  000FFA  51DE               	movf	_menu_posi& (0+255),w,b
  3278                           
  3279                           ; Switch size 1, requested type "space"
  3280                           ; Number of cases is 11, Range of values is 0 to 28
  3281                           ; switch strategies available:
  3282                           ; Name         Instructions Cycles
  3283                           ; simple_byte           34    18 (average)
  3284                           ;	Chosen strategy is simple_byte
  3285  000FFC  0A00               	xorlw	0	; case 0
  3286  000FFE  B4D8               	btfsc	status,2,c
  3287  001000  D775               	goto	l903
  3288  001002  0A01               	xorlw	1	; case 1
  3289  001004  B4D8               	btfsc	status,2,c
  3290  001006  D776               	goto	l905
  3291  001008  0A03               	xorlw	3	; case 2
  3292  00100A  B4D8               	btfsc	status,2,c
  3293  00100C  D7A1               	goto	l906
  3294  00100E  0A16               	xorlw	22	; case 20
  3295  001010  B4D8               	btfsc	status,2,c
  3296  001012  D7CC               	goto	l907
  3297  001014  0A01               	xorlw	1	; case 21
  3298  001016  B4D8               	btfsc	status,2,c
  3299  001018  D7CD               	goto	l908
  3300  00101A  0A03               	xorlw	3	; case 22
  3301  00101C  B4D8               	btfsc	status,2,c
  3302  00101E  D7CE               	goto	l909
  3303  001020  0A01               	xorlw	1	; case 23
  3304  001022  B4D8               	btfsc	status,2,c
  3305  001024  D7CF               	goto	l910
  3306  001026  0A0F               	xorlw	15	; case 24
  3307  001028  B4D8               	btfsc	status,2,c
  3308  00102A  D7D0               	goto	l911
  3309  00102C  0A01               	xorlw	1	; case 25
  3310  00102E  B4D8               	btfsc	status,2,c
  3311  001030  D7D1               	goto	l912
  3312  001032  0A02               	xorlw	2	; case 27
  3313  001034  B4D8               	btfsc	status,2,c
  3314  001036  D7D2               	goto	l913
  3315  001038  0A07               	xorlw	7	; case 28
  3316  00103A  B4D8               	btfsc	status,2,c
  3317  00103C  D7D3               	goto	l914
  3318  00103E  D7D6               	goto	l915
  3319  001040                     l904:
  3320  001040  FFFF               	dw	65535	; assembler added errata NOP
  3321                           
  3322                           ;Main.c: 146: if (menu_posi == 1 | menu_posi == 2) {
  3323                           
  3324                           ; BSR set to: 0
  3325  001042  0100               	movlb	0	; () banked
  3326  001044  05DE               	decf	_menu_posi& (0+255),w,b
  3327  001046  B4D8               	btfsc	status,2,c
  3328  001048  D09C               	goto	l919
  3329                           
  3330                           ; BSR set to: 0
  3331  00104A  0E02               	movlw	2
  3332  00104C  19DE               	xorwf	_menu_posi& (0+255),w,b
  3333  00104E  B4D8               	btfsc	status,2,c
  3334  001050  D098               	goto	l919
  3335  001052  D0D2               	goto	l943
  3336  001054  FFFF               	dw	65535	; assembler added errata NOP
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;Main.c: 150: menu_posi = 1;
  3340                           
  3341                           ; BSR set to: 0
  3342  001056  0E01               	movlw	1
  3343  001058  6FDE               	movwf	_menu_posi& (0+255),b
  3344                           
  3345                           ;Main.c: 151: line1[0] = '>';
  3346  00105A  0E3E               	movlw	62
  3347  00105C  0101               	movlb	1	; () banked
  3348  00105E  6F7B               	movwf	_line1& (0+255),b
  3349                           
  3350                           ; BSR set to: 1
  3351                           ;Main.c: 152: if (btPress(4)) {
  3352  001060  0E04               	movlw	4
  3353  001062  EC4A  F03B         	call	_btPress
  3354  001066  0900               	iorlw	0
  3355  001068  B4D8               	btfsc	status,2,c
  3356  00106A  D0A6               	goto	l922
  3357                           
  3358                           ;Main.c: 153: _menu_posi = menu_posi;
  3359  00106C  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3360                           
  3361                           ;Main.c: 154: menu_posi = 20;
  3362  001070  0E14               	movlw	20
  3363  001072  D065               	goto	L5
  3364  001074  FFFF               	dw	65535	; assembler added errata NOP
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;Main.c: 158: menu_posi = 1;
  3368                           
  3369                           ; BSR set to: 0
  3370  001076  0E01               	movlw	1
  3371  001078  6FDE               	movwf	_menu_posi& (0+255),b
  3372                           
  3373                           ;Main.c: 159: line2[0] = '>';
  3374  00107A  0E3E               	movlw	62
  3375  00107C  0101               	movlb	1	; () banked
  3376  00107E  6F66               	movwf	_line2& (0+255),b
  3377                           
  3378                           ; BSR set to: 1
  3379                           ;Main.c: 160: if (btPress(4)) {
  3380  001080  0E04               	movlw	4
  3381  001082  EC4A  F03B         	call	_btPress
  3382  001086  0900               	iorlw	0
  3383  001088  B4D8               	btfsc	status,2,c
  3384  00108A  D096               	goto	l922
  3385                           
  3386                           ;Main.c: 161: _menu_posi = menu_posi;
  3387  00108C  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3388                           
  3389                           ;Main.c: 162: menu_posi = 21;
  3390  001090  0E15               	movlw	21
  3391  001092  D055               	goto	L5
  3392  001094  FFFF               	dw	65535	; assembler added errata NOP
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;Main.c: 166: menu_posi = 1;
  3396                           
  3397                           ; BSR set to: 0
  3398  001096  0E01               	movlw	1
  3399  001098  6FDE               	movwf	_menu_posi& (0+255),b
  3400                           
  3401                           ;Main.c: 167: line3[0] = '>';
  3402  00109A  0E3E               	movlw	62
  3403  00109C  0101               	movlb	1	; () banked
  3404  00109E  6F51               	movwf	_line3& (0+255),b
  3405                           
  3406                           ; BSR set to: 1
  3407                           ;Main.c: 168: if (btPress(4)) {
  3408  0010A0  0E04               	movlw	4
  3409  0010A2  EC4A  F03B         	call	_btPress
  3410  0010A6  0900               	iorlw	0
  3411  0010A8  B4D8               	btfsc	status,2,c
  3412  0010AA  D086               	goto	l922
  3413                           
  3414                           ;Main.c: 169: _menu_posi = menu_posi;
  3415  0010AC  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3416                           
  3417                           ;Main.c: 170: menu_posi = 22;
  3418  0010B0  0E16               	movlw	22
  3419  0010B2  D045               	goto	L5
  3420  0010B4  FFFF               	dw	65535	; assembler added errata NOP
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;Main.c: 174: menu_posi = 1;
  3424                           
  3425                           ; BSR set to: 0
  3426  0010B6  0E01               	movlw	1
  3427  0010B8  6FDE               	movwf	_menu_posi& (0+255),b
  3428                           
  3429                           ;Main.c: 175: line4[0] = '>';
  3430  0010BA  0E3E               	movlw	62
  3431  0010BC  0101               	movlb	1	; () banked
  3432  0010BE  6F3C               	movwf	_line4& (0+255),b
  3433                           
  3434                           ; BSR set to: 1
  3435                           ;Main.c: 176: if (btPress(4)) {
  3436  0010C0  0E04               	movlw	4
  3437  0010C2  EC4A  F03B         	call	_btPress
  3438  0010C6  0900               	iorlw	0
  3439  0010C8  B4D8               	btfsc	status,2,c
  3440  0010CA  D076               	goto	l922
  3441                           
  3442                           ;Main.c: 177: _menu_posi = menu_posi;
  3443  0010CC  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3444                           
  3445                           ;Main.c: 178: menu_posi = 23;
  3446  0010D0  0E17               	movlw	23
  3447  0010D2  D035               	goto	L5
  3448  0010D4  FFFF               	dw	65535	; assembler added errata NOP
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;Main.c: 182: menu_posi = 2;
  3452                           
  3453                           ; BSR set to: 0
  3454  0010D6  0E02               	movlw	2
  3455  0010D8  6FDE               	movwf	_menu_posi& (0+255),b
  3456                           
  3457                           ;Main.c: 183: line1[0] = '>';
  3458  0010DA  0E3E               	movlw	62
  3459  0010DC  0101               	movlb	1	; () banked
  3460  0010DE  6F7B               	movwf	_line1& (0+255),b
  3461                           
  3462                           ; BSR set to: 1
  3463                           ;Main.c: 184: if (btPress(4)) {
  3464  0010E0  0E04               	movlw	4
  3465  0010E2  EC4A  F03B         	call	_btPress
  3466  0010E6  0900               	iorlw	0
  3467  0010E8  B4D8               	btfsc	status,2,c
  3468  0010EA  D066               	goto	l922
  3469                           
  3470                           ;Main.c: 185: _menu_posi = menu_posi;
  3471  0010EC  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3472                           
  3473                           ;Main.c: 186: menu_posi = 24;
  3474  0010F0  0E18               	movlw	24
  3475  0010F2  D025               	goto	L5
  3476  0010F4  FFFF               	dw	65535	; assembler added errata NOP
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;Main.c: 190: line2[0] = '>';
  3480                           
  3481                           ; BSR set to: 0
  3482  0010F6  0E3E               	movlw	62
  3483  0010F8  0101               	movlb	1	; () banked
  3484  0010FA  6F66               	movwf	_line2& (0+255),b
  3485                           
  3486                           ;Main.c: 191: menu_posi = 2;
  3487  0010FC  0E02               	movlw	2
  3488  0010FE  0100               	movlb	0	; () banked
  3489  001100  6FDE               	movwf	_menu_posi& (0+255),b
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;Main.c: 192: if (btPress(4)) {
  3493  001102  0E04               	movlw	4
  3494  001104  EC4A  F03B         	call	_btPress
  3495  001108  0900               	iorlw	0
  3496  00110A  B4D8               	btfsc	status,2,c
  3497  00110C  D055               	goto	l922
  3498                           
  3499                           ;Main.c: 193: _menu_posi = menu_posi;
  3500  00110E  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3501                           
  3502                           ;Main.c: 194: menu_posi = 25;
  3503  001112  0E19               	movlw	25
  3504  001114  0100               	movlb	0	; () banked
  3505  001116  6FDE               	movwf	_menu_posi& (0+255),b
  3506                           
  3507                           ;Main.c: 195: dtl_carregar_log = 1;
  3508  001118  0E01               	movlw	1
  3509  00111A  6E55               	movwf	_dtl_carregar_log,c
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;Main.c: 196: }
  3513                           ;Main.c: 197: break;
  3514  00111C  D04D               	goto	l922
  3515  00111E  FFFF               	dw	65535	; assembler added errata NOP
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;Main.c: 199: line3[0] = '>';
  3519                           
  3520                           ; BSR set to: 0
  3521  001120  0E3E               	movlw	62
  3522  001122  0101               	movlb	1	; () banked
  3523  001124  6F51               	movwf	_line3& (0+255),b
  3524                           
  3525                           ;Main.c: 200: menu_posi = 2;
  3526  001126  0E02               	movlw	2
  3527  001128  0100               	movlb	0	; () banked
  3528  00112A  6FDE               	movwf	_menu_posi& (0+255),b
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;Main.c: 201: if (btPress(4)) {
  3532  00112C  0E04               	movlw	4
  3533  00112E  EC4A  F03B         	call	_btPress
  3534  001132  0900               	iorlw	0
  3535  001134  B4D8               	btfsc	status,2,c
  3536  001136  D040               	goto	l922
  3537                           
  3538                           ;Main.c: 202: _menu_posi = menu_posi;
  3539  001138  C0DE  F0DD         	movff	_menu_posi,__menu_posi
  3540                           
  3541                           ;Main.c: 203: menu_posi = 27;
  3542  00113C  0E1B               	movlw	27
  3543  00113E                     L5:
  3544  00113E  FFFF               	dw	65535	; assembler added errata NOP
  3545  001140  0100               	movlb	0	; () banked
  3546  001142  D01C               	goto	L6
  3547  001144  FFFF               	dw	65535	; assembler added errata NOP
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;Main.c: 207: line4[0] = '>';
  3551                           
  3552                           ; BSR set to: 0
  3553  001146  0E3E               	movlw	62
  3554  001148  0101               	movlb	1	; () banked
  3555  00114A  6F3C               	movwf	_line4& (0+255),b
  3556                           
  3557                           ;Main.c: 208: menu_posi = 2;
  3558  00114C  0E02               	movlw	2
  3559  00114E  0100               	movlb	0	; () banked
  3560  001150  6FDE               	movwf	_menu_posi& (0+255),b
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;Main.c: 209: if (btPress(4)) {
  3564  001152  0E04               	movlw	4
  3565  001154  EC4A  F03B         	call	_btPress
  3566  001158  0900               	iorlw	0
  3567  00115A  B4D8               	btfsc	status,2,c
  3568  00115C  D02D               	goto	l922
  3569                           
  3570                           ;Main.c: 210: if (!ocorrendoIncendio) {
  3571  00115E  0100               	movlb	0	; () banked
  3572  001160  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  3573  001162  A4D8               	btfss	status,2,c
  3574  001164  D029               	goto	l922
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;Main.c: 211: menu_posi = 28;
  3578  001166  0E1C               	movlw	28
  3579  001168  6FDE               	movwf	_menu_posi& (0+255),b
  3580                           
  3581                           ;Main.c: 212: executandoTeste = 1;
  3582  00116A  0E01               	movlw	1
  3583  00116C  6FF1               	movwf	_executandoTeste& (0+255),b
  3584                           
  3585                           ;Main.c: 213: etapaTesteBombas = 0;
  3586  00116E  0E00               	movlw	0
  3587  001170  6E72               	movwf	_etapaTesteBombas,c
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;Main.c: 214: }
  3591                           ;Main.c: 215: }
  3592                           ;Main.c: 216: break;
  3593                           
  3594                           ; BSR set to: 0
  3595  001172  D022               	goto	l922
  3596  001174  FFFF               	dw	65535	; assembler added errata NOP
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;Main.c: 218: sub_menu_posi = 1;
  3600                           
  3601                           ; BSR set to: 0
  3602  001176  0E01               	movlw	1
  3603  001178  6E6A               	movwf	_sub_menu_posi,c
  3604                           
  3605                           ;Main.c: 219: menu_posi = 1;
  3606  00117A  0E01               	movlw	1
  3607  00117C                     L6:
  3608  00117C  FFFF               	dw	65535	; assembler added errata NOP
  3609  00117E  6FDE               	movwf	_menu_posi& (0+255),b
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;Main.c: 221: }
  3613                           
  3614                           ;Main.c: 220: break;
  3615  001180  D01B               	goto	l922
  3616  001182                     l919:
  3617  001182  FFFF               	dw	65535	; assembler added errata NOP
  3618                           
  3619                           ; BSR set to: 0
  3620                           
  3621                           ; BSR set to: 0
  3622  001184  506A               	movf	_sub_menu_posi,w,c
  3623                           
  3624                           ; Switch size 1, requested type "space"
  3625                           ; Number of cases is 8, Range of values is 1 to 8
  3626                           ; switch strategies available:
  3627                           ; Name         Instructions Cycles
  3628                           ; simple_byte           25    13 (average)
  3629                           ;	Chosen strategy is simple_byte
  3630  001186  0A01               	xorlw	1	; case 1
  3631  001188  B4D8               	btfsc	status,2,c
  3632  00118A  D764               	goto	l920
  3633  00118C  0A03               	xorlw	3	; case 2
  3634  00118E  B4D8               	btfsc	status,2,c
  3635  001190  D771               	goto	l923
  3636  001192  0A01               	xorlw	1	; case 3
  3637  001194  B4D8               	btfsc	status,2,c
  3638  001196  D77E               	goto	l925
  3639  001198  0A07               	xorlw	7	; case 4
  3640  00119A  B4D8               	btfsc	status,2,c
  3641  00119C  D78B               	goto	l927
  3642  00119E  0A01               	xorlw	1	; case 5
  3643  0011A0  B4D8               	btfsc	status,2,c
  3644  0011A2  D798               	goto	l929
  3645  0011A4  0A03               	xorlw	3	; case 6
  3646  0011A6  B4D8               	btfsc	status,2,c
  3647  0011A8  D7A5               	goto	l931
  3648  0011AA  0A01               	xorlw	1	; case 7
  3649  0011AC  B4D8               	btfsc	status,2,c
  3650  0011AE  D7B7               	goto	l933
  3651  0011B0  0A0F               	xorlw	15	; case 8
  3652  0011B2  B4D8               	btfsc	status,2,c
  3653  0011B4  D7C7               	goto	l935
  3654  0011B6  D7DE               	goto	l938
  3655  0011B8                     l922:
  3656  0011B8  FFFF               	dw	65535	; assembler added errata NOP
  3657                           
  3658                           ;Main.c: 223: if (btPress(3)) {
  3659                           
  3660                           ; BSR set to: 0
  3661  0011BA  0E03               	movlw	3
  3662  0011BC  EC4A  F03B         	call	_btPress
  3663  0011C0  0900               	iorlw	0
  3664  0011C2  B4D8               	btfsc	status,2,c
  3665  0011C4  D002               	goto	l939
  3666                           
  3667                           ;Main.c: 224: sub_menu_posi--;
  3668  0011C6  066A               	decf	_sub_menu_posi,f,c
  3669                           
  3670                           ;Main.c: 225: } else if (btPress(2)) {
  3671  0011C8  D017               	goto	l943
  3672  0011CA                     l939:
  3673  0011CA  FFFF               	dw	65535	; assembler added errata NOP
  3674  0011CC  0E02               	movlw	2
  3675  0011CE  EC4A  F03B         	call	_btPress
  3676  0011D2  0900               	iorlw	0
  3677  0011D4  B4D8               	btfsc	status,2,c
  3678  0011D6  D002               	goto	l941
  3679                           
  3680                           ;Main.c: 226: sub_menu_posi++;
  3681  0011D8  2A6A               	incf	_sub_menu_posi,f,c
  3682                           
  3683                           ;Main.c: 227: } else if (btPress(1)) {
  3684  0011DA  D00E               	goto	l943
  3685  0011DC                     l941:
  3686  0011DC  FFFF               	dw	65535	; assembler added errata NOP
  3687  0011DE  0E01               	movlw	1
  3688  0011E0  EC4A  F03B         	call	_btPress
  3689  0011E4  0900               	iorlw	0
  3690  0011E6  B4D8               	btfsc	status,2,c
  3691  0011E8  D007               	goto	l943
  3692                           
  3693                           ;Main.c: 228: menu_posi = 0;
  3694  0011EA  0E00               	movlw	0
  3695  0011EC  0100               	movlb	0	; () banked
  3696  0011EE  6FDE               	movwf	_menu_posi& (0+255),b
  3697                           
  3698                           ;Main.c: 229: option_posi = 0;
  3699  0011F0  0E00               	movlw	0
  3700  0011F2  6FDF               	movwf	_option_posi& (0+255),b
  3701                           
  3702                           ;Main.c: 230: sub_menu_posi = 1;
  3703  0011F4  0E01               	movlw	1
  3704  0011F6  6E6A               	movwf	_sub_menu_posi,c
  3705  0011F8                     l943:
  3706  0011F8  FFFF               	dw	65535	; assembler added errata NOP
  3707                           
  3708                           ;Main.c: 231: }
  3709                           ;Main.c: 232: }
  3710                           ;Main.c: 234: if (menu_posi != 28) {
  3711                           
  3712                           ; BSR set to: 0
  3713                           
  3714                           ; BSR set to: 0
  3715                           
  3716                           ; BSR set to: 0
  3717                           
  3718                           ; BSR set to: 0
  3719  0011FA  0E1C               	movlw	28
  3720  0011FC  0100               	movlb	0	; () banked
  3721  0011FE  19DE               	xorwf	_menu_posi& (0+255),w,b
  3722  001200  B4D8               	btfsc	status,2,c
  3723  001202  D004               	goto	l944
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;Main.c: 235: executandoTeste = 0;
  3727  001204  0E00               	movlw	0
  3728  001206  6FF1               	movwf	_executandoTeste& (0+255),b
  3729                           
  3730                           ;Main.c: 236: shift[2] = 0;
  3731  001208  0E00               	movlw	0
  3732  00120A  6E46               	movwf	_shift+2,c
  3733  00120C                     l944:
  3734  00120C  FFFF               	dw	65535	; assembler added errata NOP
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;Main.c: 237: }
  3738                           ;Main.c: 238: atualizarLCD(line1, line2, line3, line4);
  3739                           
  3740                           ; BSR set to: 0
  3741  00120E  0E7B               	movlw	low _line1
  3742  001210  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3743  001212  0E01               	movlw	high _line1
  3744  001214  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3745  001216  0E66               	movlw	low _line2
  3746  001218  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3747  00121A  0E01               	movlw	high _line2
  3748  00121C  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3749  00121E  0E51               	movlw	low _line3
  3750  001220  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3751  001222  0E01               	movlw	high _line3
  3752  001224  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3753  001226  0E3C               	movlw	low _line4
  3754  001228  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3755  00122A  0E01               	movlw	high _line4
  3756  00122C  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3757  00122E  ECBD  F01C         	call	_atualizarLCD	;wreg free
  3758  001232  D64A               	goto	l900
  3759  001234                     __end_of_main:
  3760                           	opt stack 0
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           postinc0	equ	0xFEE
  3766                           wreg	equ	0xFE8
  3767                           postdec1	equ	0xFE5
  3768                           fsr1l	equ	0xFE1
  3769                           status	equ	0xFD8
  3770                           
  3771 ;; *************** function _verificarIntervaloTesteBombas *****************
  3772 ;; Defined at:
  3773 ;;		line 114 in file "controle.h"
  3774 ;; Parameters:    Size  Location     Type
  3775 ;;		None
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;		None
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  1    wreg      void 
  3780 ;; Registers used:
  3781 ;;		wreg, status,2, status,0, cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3787 ;;      Params:         0       0       0       0       0       0       0
  3788 ;;      Locals:         0       0       0       0       0       0       0
  3789 ;;      Temps:          0       0       0       0       0       0       0
  3790 ;;      Totals:         0       0       0       0       0       0       0
  3791 ;;Total ram usage:        0 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:    9
  3794 ;; This function calls:
  3795 ;;		_writeEEPROM_ext
  3796 ;; This function is called by:
  3797 ;;		_main
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           	psect	text1
  3802  0072C6                     __ptext1:
  3803                           	opt stack 0
  3804  0072C6                     _verificarIntervaloTesteBombas:
  3805                           	opt stack 0
  3806  0072C6  FFFF               	dw	65535	; assembler added errata NOP
  3807                           
  3808                           ;controle.h: 115: if (dias_restante_teste >= intervalo_teste_dia && habilitaTesteAutomat
      +                          ico == 1 && !executandoTeste) {
  3809                           
  3810                           ;incstack = 0
  3811  0072C8  0100               	movlb	0	; () banked
  3812  0072CA  51E8               	movf	_intervalo_teste_dia& (0+255),w,b
  3813  0072CC  5DE7               	subwf	_dias_restante_teste& (0+255),w,b
  3814  0072CE  A0D8               	btfss	status,0,c
  3815  0072D0  D018               	goto	l506
  3816                           
  3817                           ; BSR set to: 0
  3818  0072D2  05EF               	decf	_habilitaTesteAutomatico& (0+255),w,b
  3819  0072D4  A4D8               	btfss	status,2,c
  3820  0072D6  D015               	goto	l506
  3821                           
  3822                           ; BSR set to: 0
  3823  0072D8  51F1               	movf	_executandoTeste& (0+255),w,b
  3824  0072DA  A4D8               	btfss	status,2,c
  3825  0072DC  D012               	goto	l506
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;controle.h: 116: if (_hor == horario_de_teste) {
  3829  0072DE  51E6               	movf	_horario_de_teste& (0+255),w,b
  3830  0072E0  19EC               	xorwf	__hor& (0+255),w,b
  3831  0072E2  A4D8               	btfss	status,2,c
  3832  0072E4  D00E               	goto	l506
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;controle.h: 117: dias_restante_teste = 0;
  3836  0072E6  0E00               	movlw	0
  3837  0072E8  6FE7               	movwf	_dias_restante_teste& (0+255),b
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;controle.h: 118: writeEEPROM_ext(10, dias_restante_teste);
  3841  0072EA  C0E7  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
  3842  0072EE  0E0A               	movlw	10
  3843  0072F0  ECA6  F039         	call	_writeEEPROM_ext
  3844                           
  3845                           ;controle.h: 119: etapaTesteBombas = 0;
  3846  0072F4  0E00               	movlw	0
  3847  0072F6  6E72               	movwf	_etapaTesteBombas,c
  3848                           
  3849                           ;controle.h: 120: executandoTeste = 1;
  3850  0072F8  0E01               	movlw	1
  3851  0072FA  0100               	movlb	0	; () banked
  3852  0072FC  6FF1               	movwf	_executandoTeste& (0+255),b
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;controle.h: 121: menu_posi = 28;
  3856  0072FE  0E1C               	movlw	28
  3857  007300  6FDE               	movwf	_menu_posi& (0+255),b
  3858  007302                     l506:
  3859  007302  FFFF               	dw	65535	; assembler added errata NOP
  3860                           
  3861                           ; BSR set to: 0
  3862                           
  3863                           ; BSR set to: 0
  3864                           
  3865                           ; BSR set to: 0
  3866  007304  0012               	return		;funcret
  3867  007306  FFFF               	dw	65535	; errata NOP
  3868  007308                     __end_of_verificarIntervaloTesteBombas:
  3869                           	opt stack 0
  3870                           tblptru	equ	0xFF8
  3871                           tblptrh	equ	0xFF7
  3872                           tblptrl	equ	0xFF6
  3873                           tablat	equ	0xFF5
  3874                           postinc0	equ	0xFEE
  3875                           wreg	equ	0xFE8
  3876                           postdec1	equ	0xFE5
  3877                           fsr1l	equ	0xFE1
  3878                           status	equ	0xFD8
  3879                           
  3880 ;; *************** function _tela_testeBombas *****************
  3881 ;; Defined at:
  3882 ;;		line 8 in file "tela_TESTE_BOMBAS.h"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;		None
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;		None
  3887 ;; Return value:  Size  Location     Type
  3888 ;;                  1    wreg      void 
  3889 ;; Registers used:
  3890 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3891 ;; Tracked objects:
  3892 ;;		On entry : 0/0
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3896 ;;      Params:         0       0       0       0       0       0       0
  3897 ;;      Locals:         0       2       0       0       0       0       0
  3898 ;;      Temps:          0       2       0       0       0       0       0
  3899 ;;      Totals:         0       4       0       0       0       0       0
  3900 ;;Total ram usage:        4 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; Hardware stack levels required when called:    9
  3903 ;; This function calls:
  3904 ;;		_blink
  3905 ;;		_btPress
  3906 ;;		_sprintf
  3907 ;;		_writeEEPROM_ext
  3908 ;; This function is called by:
  3909 ;;		_main
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           	psect	text2
  3914  0025F6                     __ptext2:
  3915                           	opt stack 0
  3916  0025F6                     _tela_testeBombas:
  3917                           	opt stack 0
  3918  0025F6  FFFF               	dw	65535	; assembler added errata NOP
  3919                           
  3920                           ;tela_TESTE_BOMBAS.h: 10: sprintf(line1, "#Proximo em %2d dias", (intervalo_teste_dia - 
      +                          dias_restante_teste));
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;incstack = 0
  3924  0025F8  0E7B               	movlw	low _line1
  3925  0025FA  0100               	movlb	0	; () banked
  3926  0025FC  6FA1               	movwf	sprintf@wh& (0+255),b
  3927  0025FE  0E01               	movlw	high _line1
  3928  002600  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3929  002602  0E5F               	movlw	low STR_69
  3930  002604  6FA3               	movwf	sprintf@f& (0+255),b
  3931  002606  0E7C               	movlw	high STR_69
  3932  002608  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3933  00260A  51E7               	movf	_dias_restante_teste& (0+255),w,b
  3934  00260C  6FB5               	movwf	??_tela_testeBombas& (0+255),b
  3935  00260E  6BB6               	clrf	(??_tela_testeBombas+1)& (0+255),b
  3936  002610  1FB5               	comf	??_tela_testeBombas& (0+255),f,b
  3937  002612  1FB6               	comf	(??_tela_testeBombas+1)& (0+255),f,b
  3938  002614  4BB5               	infsnz	??_tela_testeBombas& (0+255),f,b
  3939  002616  2BB6               	incf	(??_tela_testeBombas+1)& (0+255),f,b
  3940  002618  51E8               	movf	_intervalo_teste_dia& (0+255),w,b
  3941  00261A  25B5               	addwf	??_tela_testeBombas& (0+255),w,b
  3942  00261C  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3943  00261E  0E00               	movlw	0
  3944  002620  21B6               	addwfc	(??_tela_testeBombas+1)& (0+255),w,b
  3945  002622  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3946  002624  ECC9  F039         	call	_sprintf	;wreg free
  3947                           
  3948                           ;tela_TESTE_BOMBAS.h: 11: sprintf(line2, "INTERVALO: %2d dias", intervalo_teste_dia);
  3949  002628  0E66               	movlw	low _line2
  3950  00262A  0100               	movlb	0	; () banked
  3951  00262C  6FA1               	movwf	sprintf@wh& (0+255),b
  3952  00262E  0E01               	movlw	high _line2
  3953  002630  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3954  002632  0EB0               	movlw	low STR_70
  3955  002634  6FA3               	movwf	sprintf@f& (0+255),b
  3956  002636  0E7C               	movlw	high STR_70
  3957  002638  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3958  00263A  C0E8  F0A5         	movff	_intervalo_teste_dia,?_sprintf+4
  3959  00263E  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3960  002640  ECC9  F039         	call	_sprintf	;wreg free
  3961                           
  3962                           ;tela_TESTE_BOMBAS.h: 12: sprintf(line3, "HORARIO: %02d horas", horario_de_teste);
  3963  002644  0E51               	movlw	low _line3
  3964  002646  0100               	movlb	0	; () banked
  3965  002648  6FA1               	movwf	sprintf@wh& (0+255),b
  3966  00264A  0E01               	movlw	high _line3
  3967  00264C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3968  00264E  0EC4               	movlw	low STR_71
  3969  002650  6FA3               	movwf	sprintf@f& (0+255),b
  3970  002652  0E7C               	movlw	high STR_71
  3971  002654  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3972  002656  C0E6  F0A5         	movff	_horario_de_teste,?_sprintf+4
  3973  00265A  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3974  00265C  ECC9  F039         	call	_sprintf	;wreg free
  3975                           
  3976                           ;tela_TESTE_BOMBAS.h: 13: sprintf(line4, "ATIVAR: %s", habilitaTesteAutomatico == 0 ? "N
      +                          ao" : "Sim");
  3977  002660  0100               	movlb	0	; () banked
  3978  002662  51EF               	movf	_habilitaTesteAutomatico& (0+255),w,b
  3979  002664  B4D8               	btfsc	status,2,c
  3980  002666  D004               	goto	l730
  3981                           
  3982                           ; BSR set to: 0
  3983  002668  0EF2               	movlw	low STR_74
  3984  00266A  6FB7               	movwf	_tela_testeBombas$1418& (0+255),b
  3985  00266C  0E7F               	movlw	high STR_74
  3986  00266E  D004               	goto	L7
  3987  002670                     l730:
  3988  002670  FFFF               	dw	65535	; assembler added errata NOP
  3989                           
  3990                           ; BSR set to: 0
  3991                           
  3992                           ; BSR set to: 0
  3993  002672  0EF6               	movlw	low STR_73
  3994  002674  6FB7               	movwf	_tela_testeBombas$1418& (0+255),b
  3995  002676  0E7F               	movlw	high STR_73
  3996  002678                     L7:
  3997  002678  FFFF               	dw	65535	; assembler added errata NOP
  3998  00267A  6FB8               	movwf	(_tela_testeBombas$1418+1)& (0+255),b
  3999                           
  4000                           ; BSR set to: 0
  4001                           
  4002                           ; BSR set to: 0
  4003  00267C  0E3C               	movlw	low _line4
  4004  00267E  6FA1               	movwf	sprintf@wh& (0+255),b
  4005  002680  0E01               	movlw	high _line4
  4006  002682  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4007  002684  0E4C               	movlw	low STR_72
  4008  002686  6FA3               	movwf	sprintf@f& (0+255),b
  4009  002688  0E7F               	movlw	high STR_72
  4010  00268A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4011  00268C  C0B7  F0A5         	movff	_tela_testeBombas$1418,?_sprintf+4
  4012  002690  C0B8  F0A6         	movff	_tela_testeBombas$1418+1,?_sprintf+5
  4013  002694  ECC9  F039         	call	_sprintf	;wreg free
  4014                           
  4015                           ;tela_TESTE_BOMBAS.h: 15: if (btPress(1)) {
  4016  002698  0E01               	movlw	1
  4017  00269A  EC4A  F03B         	call	_btPress
  4018  00269E  0900               	iorlw	0
  4019  0026A0  B4D8               	btfsc	status,2,c
  4020  0026A2  D011               	goto	l733
  4021                           
  4022                           ;tela_TESTE_BOMBAS.h: 16: writeEEPROM_ext(6, intervalo_teste_dia);
  4023  0026A4  C0E8  F08C         	movff	_intervalo_teste_dia,writeEEPROM_ext@data
  4024  0026A8  0E06               	movlw	6
  4025  0026AA  ECA6  F039         	call	_writeEEPROM_ext
  4026                           
  4027                           ;tela_TESTE_BOMBAS.h: 17: writeEEPROM_ext(11, horario_de_teste);
  4028  0026AE  C0E6  F08C         	movff	_horario_de_teste,writeEEPROM_ext@data
  4029  0026B2  0E0B               	movlw	11
  4030  0026B4  ECA6  F039         	call	_writeEEPROM_ext
  4031                           
  4032                           ;tela_TESTE_BOMBAS.h: 18: writeEEPROM_ext(15, habilitaTesteAutomatico);
  4033  0026B8  C0EF  F08C         	movff	_habilitaTesteAutomatico,writeEEPROM_ext@data
  4034  0026BC  0E0F               	movlw	15
  4035  0026BE  ECA6  F039         	call	_writeEEPROM_ext
  4036                           
  4037                           ;tela_TESTE_BOMBAS.h: 19: menu_posi = _menu_posi;
  4038  0026C2  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  4039  0026C6                     l733:
  4040  0026C6  FFFF               	dw	65535	; assembler added errata NOP
  4041                           
  4042                           ;tela_TESTE_BOMBAS.h: 20: }
  4043                           ;tela_TESTE_BOMBAS.h: 21: if (btPress(4)) {
  4044  0026C8  0E04               	movlw	4
  4045  0026CA  EC4A  F03B         	call	_btPress
  4046  0026CE  0900               	iorlw	0
  4047  0026D0  B4D8               	btfsc	status,2,c
  4048  0026D2  D069               	goto	l735
  4049                           
  4050                           ;tela_TESTE_BOMBAS.h: 22: option_posi++;
  4051  0026D4  0100               	movlb	0	; () banked
  4052  0026D6  2BDF               	incf	_option_posi& (0+255),f,b
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;tela_TESTE_BOMBAS.h: 23: }
  4056                           ;tela_TESTE_BOMBAS.h: 24: switch (option_posi) {
  4057  0026D8  D066               	goto	l735
  4058  0026DA  FFFF               	dw	65535	; assembler added errata NOP
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;tela_TESTE_BOMBAS.h: 26: blink(line2, 11, 14);
  4062                           
  4063                           ; BSR set to: 0
  4064  0026DC  0E66               	movlw	low _line2
  4065  0026DE  6F80               	movwf	blink@line& (0+255),b
  4066  0026E0  0E01               	movlw	high _line2
  4067  0026E2  6F81               	movwf	(blink@line+1)& (0+255),b
  4068  0026E4  0E0B               	movlw	11
  4069  0026E6  6F82               	movwf	blink@start& (0+255),b
  4070  0026E8  0E0E               	movlw	14
  4071  0026EA  6F83               	movwf	blink@end& (0+255),b
  4072  0026EC  ECE2  F038         	call	_blink	;wreg free
  4073                           
  4074                           ;tela_TESTE_BOMBAS.h: 27: if (btPress(3)) {
  4075  0026F0  0E03               	movlw	3
  4076  0026F2  EC4A  F03B         	call	_btPress
  4077  0026F6  0900               	iorlw	0
  4078  0026F8  B4D8               	btfsc	status,2,c
  4079  0026FA  D002               	goto	l737
  4080                           
  4081                           ;tela_TESTE_BOMBAS.h: 28: intervalo_teste_dia++;
  4082  0026FC  0100               	movlb	0	; () banked
  4083  0026FE  2BE8               	incf	_intervalo_teste_dia& (0+255),f,b
  4084  002700                     l737:
  4085  002700  FFFF               	dw	65535	; assembler added errata NOP
  4086                           
  4087                           ;tela_TESTE_BOMBAS.h: 29: }
  4088                           ;tela_TESTE_BOMBAS.h: 30: if (btPress(2)) {
  4089                           
  4090                           ; BSR set to: 0
  4091  002702  0E02               	movlw	2
  4092  002704  EC4A  F03B         	call	_btPress
  4093  002708  0900               	iorlw	0
  4094  00270A  B4D8               	btfsc	status,2,c
  4095  00270C  D059               	goto	l739
  4096                           
  4097                           ;tela_TESTE_BOMBAS.h: 31: intervalo_teste_dia--;
  4098  00270E  0100               	movlb	0	; () banked
  4099  002710  07E8               	decf	_intervalo_teste_dia& (0+255),f,b
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;tela_TESTE_BOMBAS.h: 32: }
  4103                           ;tela_TESTE_BOMBAS.h: 33: break;
  4104  002712  D056               	goto	l739
  4105  002714  FFFF               	dw	65535	; assembler added errata NOP
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;tela_TESTE_BOMBAS.h: 35: blink(line3, 9, 11);
  4109                           
  4110                           ; BSR set to: 0
  4111  002716  0E51               	movlw	low _line3
  4112  002718  6F80               	movwf	blink@line& (0+255),b
  4113  00271A  0E01               	movlw	high _line3
  4114  00271C  6F81               	movwf	(blink@line+1)& (0+255),b
  4115  00271E  0E09               	movlw	9
  4116  002720  6F82               	movwf	blink@start& (0+255),b
  4117  002722  0E0B               	movlw	11
  4118  002724  6F83               	movwf	blink@end& (0+255),b
  4119  002726  ECE2  F038         	call	_blink	;wreg free
  4120                           
  4121                           ;tela_TESTE_BOMBAS.h: 36: if (btPress(3)) {
  4122  00272A  0E03               	movlw	3
  4123  00272C  EC4A  F03B         	call	_btPress
  4124  002730  0900               	iorlw	0
  4125  002732  B4D8               	btfsc	status,2,c
  4126  002734  D002               	goto	l741
  4127                           
  4128                           ;tela_TESTE_BOMBAS.h: 37: horario_de_teste++;
  4129  002736  0100               	movlb	0	; () banked
  4130  002738  2BE6               	incf	_horario_de_teste& (0+255),f,b
  4131  00273A                     l741:
  4132  00273A  FFFF               	dw	65535	; assembler added errata NOP
  4133                           
  4134                           ;tela_TESTE_BOMBAS.h: 38: }
  4135                           ;tela_TESTE_BOMBAS.h: 39: if (btPress(2)) {
  4136                           
  4137                           ; BSR set to: 0
  4138  00273C  0E02               	movlw	2
  4139  00273E  EC4A  F03B         	call	_btPress
  4140  002742  0900               	iorlw	0
  4141  002744  B4D8               	btfsc	status,2,c
  4142  002746  D002               	goto	l742
  4143                           
  4144                           ;tela_TESTE_BOMBAS.h: 40: horario_de_teste--;
  4145  002748  0100               	movlb	0	; () banked
  4146  00274A  07E6               	decf	_horario_de_teste& (0+255),f,b
  4147  00274C                     l742:
  4148  00274C  FFFF               	dw	65535	; assembler added errata NOP
  4149                           
  4150                           ;tela_TESTE_BOMBAS.h: 41: }
  4151                           ;tela_TESTE_BOMBAS.h: 42: if (horario_de_teste > 23 || horario_de_teste < 0) {
  4152                           
  4153                           ; BSR set to: 0
  4154  00274E  0E18               	movlw	24
  4155  002750  0100               	movlb	0	; () banked
  4156  002752  61E6               	cpfslt	_horario_de_teste& (0+255),b
  4157  002754  D001               	goto	l745
  4158  002756  D034               	goto	l739
  4159  002758                     l745:
  4160  002758  FFFF               	dw	65535	; assembler added errata NOP
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;tela_TESTE_BOMBAS.h: 43: horario_de_teste = 0;
  4164                           
  4165                           ; BSR set to: 0
  4166  00275A  0E00               	movlw	0
  4167  00275C  6FE6               	movwf	_horario_de_teste& (0+255),b
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;tela_TESTE_BOMBAS.h: 44: }
  4171                           ;tela_TESTE_BOMBAS.h: 45: break;
  4172  00275E  D030               	goto	l739
  4173  002760  FFFF               	dw	65535	; assembler added errata NOP
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;tela_TESTE_BOMBAS.h: 47: blink(line4, 9, 11);
  4177                           
  4178                           ; BSR set to: 0
  4179  002762  0E3C               	movlw	low _line4
  4180  002764  6F80               	movwf	blink@line& (0+255),b
  4181  002766  0E01               	movlw	high _line4
  4182  002768  6F81               	movwf	(blink@line+1)& (0+255),b
  4183  00276A  0E09               	movlw	9
  4184  00276C  6F82               	movwf	blink@start& (0+255),b
  4185  00276E  0E0B               	movlw	11
  4186  002770  6F83               	movwf	blink@end& (0+255),b
  4187  002772  ECE2  F038         	call	_blink	;wreg free
  4188                           
  4189                           ;tela_TESTE_BOMBAS.h: 48: if (btPress(3)) {
  4190  002776  0E03               	movlw	3
  4191  002778  EC4A  F03B         	call	_btPress
  4192  00277C  0900               	iorlw	0
  4193  00277E  B4D8               	btfsc	status,2,c
  4194  002780  D003               	goto	l747
  4195                           
  4196                           ;tela_TESTE_BOMBAS.h: 49: habilitaTesteAutomatico = 1;
  4197  002782  0E01               	movlw	1
  4198  002784  0100               	movlb	0	; () banked
  4199  002786  6FEF               	movwf	_habilitaTesteAutomatico& (0+255),b
  4200  002788                     l747:
  4201  002788  FFFF               	dw	65535	; assembler added errata NOP
  4202                           
  4203                           ;tela_TESTE_BOMBAS.h: 50: }
  4204                           ;tela_TESTE_BOMBAS.h: 51: if (btPress(2)) {
  4205                           
  4206                           ; BSR set to: 0
  4207  00278A  0E02               	movlw	2
  4208  00278C  EC4A  F03B         	call	_btPress
  4209  002790  0900               	iorlw	0
  4210  002792  B4D8               	btfsc	status,2,c
  4211  002794  D015               	goto	l739
  4212                           
  4213                           ;tela_TESTE_BOMBAS.h: 52: habilitaTesteAutomatico = 0;
  4214  002796  0E00               	movlw	0
  4215  002798  0100               	movlb	0	; () banked
  4216  00279A  6FEF               	movwf	_habilitaTesteAutomatico& (0+255),b
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;tela_TESTE_BOMBAS.h: 53: }
  4220                           ;tela_TESTE_BOMBAS.h: 54: break;
  4221  00279C  D011               	goto	l739
  4222  00279E  FFFF               	dw	65535	; assembler added errata NOP
  4223                           
  4224                           ; BSR set to: 0
  4225                           
  4226                           ; BSR set to: 0
  4227  0027A0  0E00               	movlw	0
  4228  0027A2  6FDF               	movwf	_option_posi& (0+255),b
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;tela_TESTE_BOMBAS.h: 57: }
  4232                           
  4233                           ;tela_TESTE_BOMBAS.h: 56: break;
  4234  0027A4  D00D               	goto	l739
  4235  0027A6                     l735:
  4236  0027A6  FFFF               	dw	65535	; assembler added errata NOP
  4237                           
  4238                           ; BSR set to: 0
  4239  0027A8  0100               	movlb	0	; () banked
  4240  0027AA  51DF               	movf	_option_posi& (0+255),w,b
  4241                           
  4242                           ; Switch size 1, requested type "space"
  4243                           ; Number of cases is 3, Range of values is 0 to 2
  4244                           ; switch strategies available:
  4245                           ; Name         Instructions Cycles
  4246                           ; simple_byte           10     6 (average)
  4247                           ;	Chosen strategy is simple_byte
  4248  0027AC  0A00               	xorlw	0	; case 0
  4249  0027AE  B4D8               	btfsc	status,2,c
  4250  0027B0  D794               	goto	l736
  4251  0027B2  0A01               	xorlw	1	; case 1
  4252  0027B4  B4D8               	btfsc	status,2,c
  4253  0027B6  D7AE               	goto	l740
  4254  0027B8  0A03               	xorlw	3	; case 2
  4255  0027BA  B4D8               	btfsc	status,2,c
  4256  0027BC  D7D1               	goto	l746
  4257  0027BE  D7EF               	goto	l749
  4258  0027C0                     l739:
  4259  0027C0  FFFF               	dw	65535	; assembler added errata NOP
  4260                           
  4261                           ; BSR set to: 0
  4262  0027C2  0012               	return		;funcret
  4263  0027C4  FFFF               	dw	65535	; errata NOP
  4264  0027C6                     __end_of_tela_testeBombas:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           postinc0	equ	0xFEE
  4271                           wreg	equ	0xFE8
  4272                           postdec1	equ	0xFE5
  4273                           fsr1l	equ	0xFE1
  4274                           status	equ	0xFD8
  4275                           
  4276 ;; *************** function _tela_ajusteRTC *****************
  4277 ;; Defined at:
  4278 ;;		line 11 in file "tela_RELOGIO.h"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;		None
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;		None
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  1    wreg      void 
  4285 ;; Registers used:
  4286 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4292 ;;      Params:         0       0       0       0       0       0       0
  4293 ;;      Locals:         0       0       0       0       0       0       0
  4294 ;;      Temps:          0       0       0       0       0       0       0
  4295 ;;      Totals:         0       0       0       0       0       0       0
  4296 ;;Total ram usage:        0 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; Hardware stack levels required when called:    9
  4299 ;; This function calls:
  4300 ;;		_blink
  4301 ;;		_btPress
  4302 ;;		_setDS1307TimeDate
  4303 ;;		_sprintf
  4304 ;;		_validaRTC
  4305 ;; This function is called by:
  4306 ;;		_main
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           	psect	text3
  4311  001D98                     __ptext3:
  4312                           	opt stack 0
  4313  001D98                     _tela_ajusteRTC:
  4314                           	opt stack 0
  4315  001D98  FFFF               	dw	65535	; assembler added errata NOP
  4316                           
  4317                           ;tela_RELOGIO.h: 12: sprintf(line1, "DATA:");
  4318                           
  4319                           ;incstack = 0
  4320  001D9A  0E7B               	movlw	low _line1
  4321  001D9C  0100               	movlb	0	; () banked
  4322  001D9E  6FA1               	movwf	sprintf@wh& (0+255),b
  4323  001DA0  0E01               	movlw	high _line1
  4324  001DA2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4325  001DA4  0ECC               	movlw	low STR_65
  4326  001DA6  6FA3               	movwf	sprintf@f& (0+255),b
  4327  001DA8  0E7F               	movlw	high STR_65
  4328  001DAA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4329  001DAC  ECC9  F039         	call	_sprintf	;wreg free
  4330                           
  4331                           ;tela_RELOGIO.h: 13: sprintf(line2, "%02d/%02d/%02d", rtc.date, rtc.month, rtc.year);
  4332  001DB0  0E66               	movlw	low _line2
  4333  001DB2  0100               	movlb	0	; () banked
  4334  001DB4  6FA1               	movwf	sprintf@wh& (0+255),b
  4335  001DB6  0E01               	movlw	high _line2
  4336  001DB8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4337  001DBA  0E3A               	movlw	low STR_66
  4338  001DBC  6FA3               	movwf	sprintf@f& (0+255),b
  4339  001DBE  0E7E               	movlw	high STR_66
  4340  001DC0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4341  001DC2  C07A  F0A5         	movff	_rtc+4,?_sprintf+4
  4342  001DC6  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4343  001DC8  C07B  F0A7         	movff	_rtc+5,?_sprintf+6
  4344  001DCC  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4345  001DCE  C07C  F0A9         	movff	_rtc+6,?_sprintf+8
  4346  001DD2  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4347  001DD4  ECC9  F039         	call	_sprintf	;wreg free
  4348                           
  4349                           ;tela_RELOGIO.h: 14: sprintf(&line1[11], "HORA:");
  4350  001DD8  0E86               	movlw	low (_line1+11)
  4351  001DDA  0100               	movlb	0	; () banked
  4352  001DDC  6FA1               	movwf	sprintf@wh& (0+255),b
  4353  001DDE  0E01               	movlw	high (_line1+11)
  4354  001DE0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4355  001DE2  0EC6               	movlw	low STR_67
  4356  001DE4  6FA3               	movwf	sprintf@f& (0+255),b
  4357  001DE6  0E7F               	movlw	high STR_67
  4358  001DE8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4359  001DEA  ECC9  F039         	call	_sprintf	;wreg free
  4360                           
  4361                           ;tela_RELOGIO.h: 15: sprintf(&line2[11], "%02d:%02d:%02d", rtc.hour, rtc.min, rtc.sec);
  4362  001DEE  0E71               	movlw	low (_line2+11)
  4363  001DF0  0100               	movlb	0	; () banked
  4364  001DF2  6FA1               	movwf	sprintf@wh& (0+255),b
  4365  001DF4  0E01               	movlw	high (_line2+11)
  4366  001DF6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4367  001DF8  0E49               	movlw	low STR_68
  4368  001DFA  6FA3               	movwf	sprintf@f& (0+255),b
  4369  001DFC  0E7E               	movlw	high STR_68
  4370  001DFE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4371  001E00  C079  F0A5         	movff	_rtc+3,?_sprintf+4
  4372  001E04  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4373  001E06  C078  F0A7         	movff	_rtc+2,?_sprintf+6
  4374  001E0A  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4375  001E0C  C077  F0A9         	movff	_rtc+1,?_sprintf+8
  4376  001E10  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4377  001E12  ECC9  F039         	call	_sprintf	;wreg free
  4378                           
  4379                           ;tela_RELOGIO.h: 17: if (btPress(4)) {
  4380  001E16  0E04               	movlw	4
  4381  001E18  EC4A  F03B         	call	_btPress
  4382  001E1C  0900               	iorlw	0
  4383  001E1E  B4D8               	btfsc	status,2,c
  4384  001E20  D004               	goto	l703
  4385                           
  4386                           ;tela_RELOGIO.h: 18: ajst_rtc = 1;
  4387  001E22  0E01               	movlw	1
  4388  001E24  6E68               	movwf	_ajst_rtc,c
  4389                           
  4390                           ;tela_RELOGIO.h: 19: option_posi++;
  4391  001E26  0100               	movlb	0	; () banked
  4392  001E28  2BDF               	incf	_option_posi& (0+255),f,b
  4393  001E2A                     l703:
  4394  001E2A  FFFF               	dw	65535	; assembler added errata NOP
  4395                           
  4396                           ;tela_RELOGIO.h: 20: }
  4397                           ;tela_RELOGIO.h: 21: if (btPress(1)) {
  4398                           
  4399                           ; BSR set to: 0
  4400  001E2C  0E01               	movlw	1
  4401  001E2E  EC4A  F03B         	call	_btPress
  4402  001E32  0900               	iorlw	0
  4403  001E34  B4D8               	btfsc	status,2,c
  4404  001E36  D0B0               	goto	l705
  4405                           
  4406                           ;tela_RELOGIO.h: 22: ajst_rtc = 0;
  4407  001E38  0E00               	movlw	0
  4408  001E3A  6E68               	movwf	_ajst_rtc,c
  4409                           
  4410                           ;tela_RELOGIO.h: 23: option_posi = 0;
  4411  001E3C  0E00               	movlw	0
  4412  001E3E  0100               	movlb	0	; () banked
  4413  001E40  6FDF               	movwf	_option_posi& (0+255),b
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;tela_RELOGIO.h: 24: setDS1307TimeDate(&rtc);
  4417  001E42  0E76               	movlw	low _rtc
  4418  001E44  6F8C               	movwf	setDS1307TimeDate@ptrToUserVal& (0+255),b
  4419  001E46  0E00               	movlw	high _rtc
  4420  001E48  6F8D               	movwf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  4421  001E4A  EC60  F019         	call	_setDS1307TimeDate	;wreg free
  4422                           
  4423                           ;tela_RELOGIO.h: 25: menu_posi = _menu_posi;
  4424  001E4E  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  4425                           
  4426                           ;tela_RELOGIO.h: 26: _min++;
  4427  001E52  0100               	movlb	0	; () banked
  4428  001E54  2BED               	incf	__min& (0+255),f,b
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;tela_RELOGIO.h: 27: }
  4432                           ;tela_RELOGIO.h: 28: switch (option_posi) {
  4433  001E56  D0A0               	goto	l705
  4434  001E58  FFFF               	dw	65535	; assembler added errata NOP
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;tela_RELOGIO.h: 30: blink(line2, 1, 2);
  4438                           
  4439                           ; BSR set to: 0
  4440  001E5A  0E66               	movlw	low _line2
  4441  001E5C  6F80               	movwf	blink@line& (0+255),b
  4442  001E5E  0E01               	movlw	high _line2
  4443  001E60  6F81               	movwf	(blink@line+1)& (0+255),b
  4444  001E62  0E01               	movlw	1
  4445  001E64  6F82               	movwf	blink@start& (0+255),b
  4446  001E66  0E02               	movlw	2
  4447  001E68  6F83               	movwf	blink@end& (0+255),b
  4448  001E6A  ECE2  F038         	call	_blink	;wreg free
  4449                           
  4450                           ;tela_RELOGIO.h: 31: if (btPress(3)) {
  4451  001E6E  0E03               	movlw	3
  4452  001E70  EC4A  F03B         	call	_btPress
  4453  001E74  0900               	iorlw	0
  4454  001E76  A4D8               	btfss	status,2,c
  4455                           
  4456                           ;tela_RELOGIO.h: 32: rtc.date++;
  4457  001E78  2A7A               	incf	_rtc+4,f,c
  4458                           
  4459                           ;tela_RELOGIO.h: 33: }
  4460                           ;tela_RELOGIO.h: 34: if (btPress(2)) {
  4461  001E7A  0E02               	movlw	2
  4462  001E7C  EC4A  F03B         	call	_btPress
  4463  001E80  0900               	iorlw	0
  4464  001E82  B4D8               	btfsc	status,2,c
  4465  001E84  D09F               	goto	l709
  4466                           
  4467                           ;tela_RELOGIO.h: 35: rtc.date--;
  4468  001E86  067A               	decf	_rtc+4,f,c
  4469                           
  4470                           ;tela_RELOGIO.h: 36: }
  4471                           ;tela_RELOGIO.h: 37: break;
  4472  001E88  D09D               	goto	l709
  4473  001E8A  FFFF               	dw	65535	; assembler added errata NOP
  4474                           
  4475                           ;tela_RELOGIO.h: 39: blink(line2, 4, 5);
  4476  001E8C  0E66               	movlw	low _line2
  4477  001E8E  0100               	movlb	0	; () banked
  4478  001E90  6F80               	movwf	blink@line& (0+255),b
  4479  001E92  0E01               	movlw	high _line2
  4480  001E94  6F81               	movwf	(blink@line+1)& (0+255),b
  4481  001E96  0E04               	movlw	4
  4482  001E98  6F82               	movwf	blink@start& (0+255),b
  4483  001E9A  0E05               	movlw	5
  4484  001E9C  6F83               	movwf	blink@end& (0+255),b
  4485  001E9E  ECE2  F038         	call	_blink	;wreg free
  4486                           
  4487                           ;tela_RELOGIO.h: 40: if (btPress(3)) {
  4488  001EA2  0E03               	movlw	3
  4489  001EA4  EC4A  F03B         	call	_btPress
  4490  001EA8  0900               	iorlw	0
  4491  001EAA  A4D8               	btfss	status,2,c
  4492                           
  4493                           ;tela_RELOGIO.h: 41: rtc.month++;
  4494  001EAC  2A7B               	incf	_rtc+5,f,c
  4495                           
  4496                           ;tela_RELOGIO.h: 42: }
  4497                           ;tela_RELOGIO.h: 43: if (btPress(2)) {
  4498  001EAE  0E02               	movlw	2
  4499  001EB0  EC4A  F03B         	call	_btPress
  4500  001EB4  0900               	iorlw	0
  4501  001EB6  B4D8               	btfsc	status,2,c
  4502  001EB8  D085               	goto	l709
  4503                           
  4504                           ;tela_RELOGIO.h: 44: rtc.month--;
  4505  001EBA  067B               	decf	_rtc+5,f,c
  4506                           
  4507                           ;tela_RELOGIO.h: 45: }
  4508                           ;tela_RELOGIO.h: 46: break;
  4509  001EBC  D083               	goto	l709
  4510  001EBE  FFFF               	dw	65535	; assembler added errata NOP
  4511                           
  4512                           ;tela_RELOGIO.h: 48: blink(line2, 7, 8);
  4513  001EC0  0E66               	movlw	low _line2
  4514  001EC2  0100               	movlb	0	; () banked
  4515  001EC4  6F80               	movwf	blink@line& (0+255),b
  4516  001EC6  0E01               	movlw	high _line2
  4517  001EC8  6F81               	movwf	(blink@line+1)& (0+255),b
  4518  001ECA  0E07               	movlw	7
  4519  001ECC  6F82               	movwf	blink@start& (0+255),b
  4520  001ECE  0E08               	movlw	8
  4521  001ED0  6F83               	movwf	blink@end& (0+255),b
  4522  001ED2  ECE2  F038         	call	_blink	;wreg free
  4523                           
  4524                           ;tela_RELOGIO.h: 49: if (btPress(3)) {
  4525  001ED6  0E03               	movlw	3
  4526  001ED8  EC4A  F03B         	call	_btPress
  4527  001EDC  0900               	iorlw	0
  4528  001EDE  A4D8               	btfss	status,2,c
  4529                           
  4530                           ;tela_RELOGIO.h: 50: rtc.year++;
  4531  001EE0  2A7C               	incf	_rtc+6,f,c
  4532                           
  4533                           ;tela_RELOGIO.h: 51: }
  4534                           ;tela_RELOGIO.h: 52: if (btPress(2)) {
  4535  001EE2  0E02               	movlw	2
  4536  001EE4  EC4A  F03B         	call	_btPress
  4537  001EE8  0900               	iorlw	0
  4538  001EEA  B4D8               	btfsc	status,2,c
  4539  001EEC  D06B               	goto	l709
  4540                           
  4541                           ;tela_RELOGIO.h: 53: rtc.year--;
  4542  001EEE  067C               	decf	_rtc+6,f,c
  4543                           
  4544                           ;tela_RELOGIO.h: 54: }
  4545                           ;tela_RELOGIO.h: 55: break;
  4546  001EF0  D069               	goto	l709
  4547  001EF2  FFFF               	dw	65535	; assembler added errata NOP
  4548                           
  4549                           ;tela_RELOGIO.h: 57: blink(line2, 12, 13);
  4550  001EF4  0E66               	movlw	low _line2
  4551  001EF6  0100               	movlb	0	; () banked
  4552  001EF8  6F80               	movwf	blink@line& (0+255),b
  4553  001EFA  0E01               	movlw	high _line2
  4554  001EFC  6F81               	movwf	(blink@line+1)& (0+255),b
  4555  001EFE  0E0C               	movlw	12
  4556  001F00  6F82               	movwf	blink@start& (0+255),b
  4557  001F02  0E0D               	movlw	13
  4558  001F04  6F83               	movwf	blink@end& (0+255),b
  4559  001F06  ECE2  F038         	call	_blink	;wreg free
  4560                           
  4561                           ;tela_RELOGIO.h: 58: if (btPress(3)) {
  4562  001F0A  0E03               	movlw	3
  4563  001F0C  EC4A  F03B         	call	_btPress
  4564  001F10  0900               	iorlw	0
  4565  001F12  A4D8               	btfss	status,2,c
  4566                           
  4567                           ;tela_RELOGIO.h: 59: rtc.hour++;
  4568  001F14  2A79               	incf	_rtc+3,f,c
  4569                           
  4570                           ;tela_RELOGIO.h: 60: }
  4571                           ;tela_RELOGIO.h: 61: if (btPress(2)) {
  4572  001F16  0E02               	movlw	2
  4573  001F18  EC4A  F03B         	call	_btPress
  4574  001F1C  0900               	iorlw	0
  4575  001F1E  B4D8               	btfsc	status,2,c
  4576  001F20  D051               	goto	l709
  4577                           
  4578                           ;tela_RELOGIO.h: 62: rtc.hour--;
  4579  001F22  0679               	decf	_rtc+3,f,c
  4580                           
  4581                           ;tela_RELOGIO.h: 63: }
  4582                           ;tela_RELOGIO.h: 64: break;
  4583  001F24  D04F               	goto	l709
  4584  001F26  FFFF               	dw	65535	; assembler added errata NOP
  4585                           
  4586                           ;tela_RELOGIO.h: 66: blink(line2, 15, 16);
  4587  001F28  0E66               	movlw	low _line2
  4588  001F2A  0100               	movlb	0	; () banked
  4589  001F2C  6F80               	movwf	blink@line& (0+255),b
  4590  001F2E  0E01               	movlw	high _line2
  4591  001F30  6F81               	movwf	(blink@line+1)& (0+255),b
  4592  001F32  0E0F               	movlw	15
  4593  001F34  6F82               	movwf	blink@start& (0+255),b
  4594  001F36  0E10               	movlw	16
  4595  001F38  6F83               	movwf	blink@end& (0+255),b
  4596  001F3A  ECE2  F038         	call	_blink	;wreg free
  4597                           
  4598                           ;tela_RELOGIO.h: 67: if (btPress(3)) {
  4599  001F3E  0E03               	movlw	3
  4600  001F40  EC4A  F03B         	call	_btPress
  4601  001F44  0900               	iorlw	0
  4602  001F46  A4D8               	btfss	status,2,c
  4603                           
  4604                           ;tela_RELOGIO.h: 68: rtc.min++;
  4605  001F48  2A78               	incf	_rtc+2,f,c
  4606                           
  4607                           ;tela_RELOGIO.h: 69: }
  4608                           ;tela_RELOGIO.h: 70: if (btPress(2)) {
  4609  001F4A  0E02               	movlw	2
  4610  001F4C  EC4A  F03B         	call	_btPress
  4611  001F50  0900               	iorlw	0
  4612  001F52  B4D8               	btfsc	status,2,c
  4613  001F54  D037               	goto	l709
  4614                           
  4615                           ;tela_RELOGIO.h: 71: rtc.min--;
  4616  001F56  0678               	decf	_rtc+2,f,c
  4617                           
  4618                           ;tela_RELOGIO.h: 72: }
  4619                           ;tela_RELOGIO.h: 73: break;
  4620  001F58  D035               	goto	l709
  4621  001F5A  FFFF               	dw	65535	; assembler added errata NOP
  4622                           
  4623                           ;tela_RELOGIO.h: 75: blink(line2, 18, 19);
  4624  001F5C  0E66               	movlw	low _line2
  4625  001F5E  0100               	movlb	0	; () banked
  4626  001F60  6F80               	movwf	blink@line& (0+255),b
  4627  001F62  0E01               	movlw	high _line2
  4628  001F64  6F81               	movwf	(blink@line+1)& (0+255),b
  4629  001F66  0E12               	movlw	18
  4630  001F68  6F82               	movwf	blink@start& (0+255),b
  4631  001F6A  0E13               	movlw	19
  4632  001F6C  6F83               	movwf	blink@end& (0+255),b
  4633  001F6E  ECE2  F038         	call	_blink	;wreg free
  4634                           
  4635                           ;tela_RELOGIO.h: 76: if (btPress(3)) {
  4636  001F72  0E03               	movlw	3
  4637  001F74  EC4A  F03B         	call	_btPress
  4638  001F78  0900               	iorlw	0
  4639  001F7A  A4D8               	btfss	status,2,c
  4640                           
  4641                           ;tela_RELOGIO.h: 77: rtc.sec++;
  4642  001F7C  2A77               	incf	_rtc+1,f,c
  4643                           
  4644                           ;tela_RELOGIO.h: 78: }
  4645                           ;tela_RELOGIO.h: 79: if (btPress(2)) {
  4646  001F7E  0E02               	movlw	2
  4647  001F80  EC4A  F03B         	call	_btPress
  4648  001F84  0900               	iorlw	0
  4649  001F86  B4D8               	btfsc	status,2,c
  4650  001F88  D01D               	goto	l709
  4651                           
  4652                           ;tela_RELOGIO.h: 80: rtc.sec--;
  4653  001F8A  0677               	decf	_rtc+1,f,c
  4654                           
  4655                           ;tela_RELOGIO.h: 81: }
  4656                           ;tela_RELOGIO.h: 82: break;
  4657  001F8C  D01B               	goto	l709
  4658  001F8E  FFFF               	dw	65535	; assembler added errata NOP
  4659  001F90  0E01               	movlw	1
  4660  001F92  0100               	movlb	0	; () banked
  4661  001F94  6FDF               	movwf	_option_posi& (0+255),b
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;tela_RELOGIO.h: 85: }
  4665                           
  4666                           ;tela_RELOGIO.h: 84: break;
  4667  001F96  D016               	goto	l709
  4668  001F98                     l705:
  4669  001F98  FFFF               	dw	65535	; assembler added errata NOP
  4670                           
  4671                           ; BSR set to: 0
  4672  001F9A  0100               	movlb	0	; () banked
  4673  001F9C  51DF               	movf	_option_posi& (0+255),w,b
  4674                           
  4675                           ; Switch size 1, requested type "space"
  4676                           ; Number of cases is 6, Range of values is 1 to 6
  4677                           ; switch strategies available:
  4678                           ; Name         Instructions Cycles
  4679                           ; simple_byte           19    10 (average)
  4680                           ;	Chosen strategy is simple_byte
  4681  001F9E  0A01               	xorlw	1	; case 1
  4682  001FA0  B4D8               	btfsc	status,2,c
  4683  001FA2  D75A               	goto	l706
  4684  001FA4  0A03               	xorlw	3	; case 2
  4685  001FA6  B4D8               	btfsc	status,2,c
  4686  001FA8  D770               	goto	l710
  4687  001FAA  0A01               	xorlw	1	; case 3
  4688  001FAC  B4D8               	btfsc	status,2,c
  4689  001FAE  D787               	goto	l713
  4690  001FB0  0A07               	xorlw	7	; case 4
  4691  001FB2  B4D8               	btfsc	status,2,c
  4692  001FB4  D79E               	goto	l716
  4693  001FB6  0A01               	xorlw	1	; case 5
  4694  001FB8  B4D8               	btfsc	status,2,c
  4695  001FBA  D7B5               	goto	l719
  4696  001FBC  0A03               	xorlw	3	; case 6
  4697  001FBE  B4D8               	btfsc	status,2,c
  4698  001FC0  D7CC               	goto	l722
  4699  001FC2  D7E5               	goto	l725
  4700  001FC4                     l709:
  4701  001FC4  FFFF               	dw	65535	; assembler added errata NOP
  4702                           
  4703                           ;tela_RELOGIO.h: 86: validaRTC();
  4704                           
  4705                           ; BSR set to: 0
  4706  001FC6  EC11  F03A         	call	_validaRTC	;wreg free
  4707  001FCA  0012               	return		;funcret
  4708  001FCC  FFFF               	dw	65535	; errata NOP
  4709  001FCE                     __end_of_tela_ajusteRTC:
  4710                           	opt stack 0
  4711                           tblptru	equ	0xFF8
  4712                           tblptrh	equ	0xFF7
  4713                           tblptrl	equ	0xFF6
  4714                           tablat	equ	0xFF5
  4715                           postinc0	equ	0xFEE
  4716                           wreg	equ	0xFE8
  4717                           postdec1	equ	0xFE5
  4718                           fsr1l	equ	0xFE1
  4719                           status	equ	0xFD8
  4720                           
  4721 ;; *************** function _validaRTC *****************
  4722 ;; Defined at:
  4723 ;;		line 108 in file "ds1307.h"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  2  290[None  ] int 
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4737 ;;      Params:         0       0       0       0       0       0       0
  4738 ;;      Locals:         0       0       0       0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0
  4740 ;;      Totals:         0       0       0       0       0       0       0
  4741 ;;Total ram usage:        0 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    6
  4744 ;; This function calls:
  4745 ;;		Nothing
  4746 ;; This function is called by:
  4747 ;;		_tela_ajusteRTC
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           	psect	text4
  4752  007422                     __ptext4:
  4753                           	opt stack 0
  4754  007422                     _validaRTC:
  4755                           	opt stack 0
  4756  007422  FFFF               	dw	65535	; assembler added errata NOP
  4757                           
  4758                           ;ds1307.h: 109: if (rtc.date > 31) rtc.date = 0;
  4759                           
  4760                           ;incstack = 0
  4761  007424  0E1F               	movlw	31
  4762  007426  647A               	cpfsgt	_rtc+4,c
  4763  007428  D002               	goto	l291
  4764  00742A  0E00               	movlw	0
  4765  00742C  6E7A               	movwf	_rtc+4,c
  4766  00742E                     l291:
  4767  00742E  FFFF               	dw	65535	; assembler added errata NOP
  4768                           
  4769                           ;ds1307.h: 110: if (rtc.hour > 23) rtc.hour = 0;
  4770  007430  0E17               	movlw	23
  4771  007432  6479               	cpfsgt	_rtc+3,c
  4772  007434  D002               	goto	l292
  4773  007436  0E00               	movlw	0
  4774  007438  6E79               	movwf	_rtc+3,c
  4775  00743A                     l292:
  4776  00743A  FFFF               	dw	65535	; assembler added errata NOP
  4777                           
  4778                           ;ds1307.h: 111: if (rtc.min > 59) rtc.min = 0;
  4779  00743C  0E3B               	movlw	59
  4780  00743E  6478               	cpfsgt	_rtc+2,c
  4781  007440  D002               	goto	l293
  4782  007442  0E00               	movlw	0
  4783  007444  6E78               	movwf	_rtc+2,c
  4784  007446                     l293:
  4785  007446  FFFF               	dw	65535	; assembler added errata NOP
  4786                           
  4787                           ;ds1307.h: 112: if (rtc.month > 12) rtc.month = 0;
  4788  007448  0E0C               	movlw	12
  4789  00744A  647B               	cpfsgt	_rtc+5,c
  4790  00744C  D002               	goto	l294
  4791  00744E  0E00               	movlw	0
  4792  007450  6E7B               	movwf	_rtc+5,c
  4793  007452                     l294:
  4794  007452  FFFF               	dw	65535	; assembler added errata NOP
  4795                           
  4796                           ;ds1307.h: 113: if (rtc.sec > 59) rtc.sec = 0;
  4797  007454  0E3B               	movlw	59
  4798  007456  6477               	cpfsgt	_rtc+1,c
  4799  007458  D002               	goto	l295
  4800  00745A  0E00               	movlw	0
  4801  00745C  6E77               	movwf	_rtc+1,c
  4802  00745E                     l295:
  4803  00745E  FFFF               	dw	65535	; assembler added errata NOP
  4804                           
  4805                           ;ds1307.h: 114: if (rtc.year > 99) rtc.year = 0;
  4806  007460  0E63               	movlw	99
  4807  007462  647C               	cpfsgt	_rtc+6,c
  4808  007464  D002               	goto	l296
  4809  007466  0E00               	movlw	0
  4810  007468  6E7C               	movwf	_rtc+6,c
  4811  00746A                     l296:
  4812  00746A  FFFF               	dw	65535	; assembler added errata NOP
  4813  00746C  0012               	return		;funcret
  4814  00746E  FFFF               	dw	65535	; errata NOP
  4815  007470                     __end_of_validaRTC:
  4816                           	opt stack 0
  4817                           tblptru	equ	0xFF8
  4818                           tblptrh	equ	0xFF7
  4819                           tblptrl	equ	0xFF6
  4820                           tablat	equ	0xFF5
  4821                           postinc0	equ	0xFEE
  4822                           wreg	equ	0xFE8
  4823                           postdec1	equ	0xFE5
  4824                           fsr1l	equ	0xFE1
  4825                           status	equ	0xFD8
  4826                           
  4827 ;; *************** function _setDS1307TimeDate *****************
  4828 ;; Defined at:
  4829 ;;		line 36 in file "ds1307.h"
  4830 ;; Parameters:    Size  Location     Type
  4831 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  4832 ;;		 -> rtc(7), 
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;		None
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  1    wreg      void 
  4837 ;; Registers used:
  4838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4839 ;; Tracked objects:
  4840 ;;		On entry : 0/0
  4841 ;;		On exit  : 0/0
  4842 ;;		Unchanged: 0/0
  4843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4844 ;;      Params:         0       2       0       0       0       0       0
  4845 ;;      Locals:         0       0       0       0       0       0       0
  4846 ;;      Temps:          0       1       0       0       0       0       0
  4847 ;;      Totals:         0       3       0       0       0       0       0
  4848 ;;Total ram usage:        3 bytes
  4849 ;; Hardware stack levels used:    1
  4850 ;; Hardware stack levels required when called:    8
  4851 ;; This function calls:
  4852 ;;		_DECtoBCD
  4853 ;;		_I2C_Start
  4854 ;;		_I2C_Stop
  4855 ;;		_I2C_Write
  4856 ;; This function is called by:
  4857 ;;		_tela_ajusteRTC
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text5
  4862  0032C0                     __ptext5:
  4863                           	opt stack 0
  4864  0032C0                     _setDS1307TimeDate:
  4865                           	opt stack 0
  4866  0032C0  FFFF               	dw	65535	; assembler added errata NOP
  4867                           
  4868                           ;ds1307.h: 38: I2C_Start();
  4869                           
  4870                           ;incstack = 0
  4871  0032C2  EC66  F036         	call	_I2C_Start	;wreg free
  4872                           
  4873                           ;ds1307.h: 39: I2C_Write(0xD0);
  4874  0032C6  0E00               	movlw	0
  4875  0032C8  0100               	movlb	0	; () banked
  4876  0032CA  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4877  0032CC  0ED0               	movlw	208
  4878  0032CE  6F8A               	movwf	I2C_Write@d& (0+255),b
  4879  0032D0  EC7F  F036         	call	_I2C_Write	;wreg free
  4880                           
  4881                           ;ds1307.h: 40: I2C_Write(0x00);
  4882  0032D4  0E00               	movlw	0
  4883  0032D6  0100               	movlb	0	; () banked
  4884  0032D8  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4885  0032DA  0E00               	movlw	0
  4886  0032DC  6F8A               	movwf	I2C_Write@d& (0+255),b
  4887  0032DE  EC7F  F036         	call	_I2C_Write	;wreg free
  4888                           
  4889                           ;ds1307.h: 41: I2C_Write(DECtoBCD(ptrToUserVal-> sec));
  4890  0032E2  0100               	movlb	0	; () banked
  4891  0032E4  EE20 F001          	lfsr	2,1
  4892  0032E8  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4893  0032EA  26D9               	addwf	fsr2l,f,c
  4894  0032EC  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4895  0032EE  22DA               	addwfc	fsr2h,f,c
  4896  0032F0  50DF               	movf	indf2,w,c
  4897  0032F2  EC42  F039         	call	_DECtoBCD
  4898  0032F6  0100               	movlb	0	; () banked
  4899  0032F8  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4900  0032FA  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4901  0032FC  6F8A               	movwf	I2C_Write@d& (0+255),b
  4902  0032FE  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4903  003300  EC7F  F036         	call	_I2C_Write	;wreg free
  4904                           
  4905                           ;ds1307.h: 42: I2C_Write(DECtoBCD(ptrToUserVal-> min));
  4906  003304  0100               	movlb	0	; () banked
  4907  003306  EE20 F002          	lfsr	2,2
  4908  00330A  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4909  00330C  26D9               	addwf	fsr2l,f,c
  4910  00330E  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4911  003310  22DA               	addwfc	fsr2h,f,c
  4912  003312  50DF               	movf	indf2,w,c
  4913  003314  EC42  F039         	call	_DECtoBCD
  4914  003318  0100               	movlb	0	; () banked
  4915  00331A  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4916  00331C  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4917  00331E  6F8A               	movwf	I2C_Write@d& (0+255),b
  4918  003320  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4919  003322  EC7F  F036         	call	_I2C_Write	;wreg free
  4920                           
  4921                           ;ds1307.h: 43: I2C_Write(DECtoBCD(ptrToUserVal-> hour));
  4922  003326  0100               	movlb	0	; () banked
  4923  003328  EE20 F003          	lfsr	2,3
  4924  00332C  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4925  00332E  26D9               	addwf	fsr2l,f,c
  4926  003330  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4927  003332  22DA               	addwfc	fsr2h,f,c
  4928  003334  50DF               	movf	indf2,w,c
  4929  003336  EC42  F039         	call	_DECtoBCD
  4930  00333A  0100               	movlb	0	; () banked
  4931  00333C  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4932  00333E  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4933  003340  6F8A               	movwf	I2C_Write@d& (0+255),b
  4934  003342  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4935  003344  EC7F  F036         	call	_I2C_Write	;wreg free
  4936                           
  4937                           ;ds1307.h: 44: I2C_Write(DECtoBCD(ptrToUserVal-> day));
  4938  003348  C08C  FFD9         	movff	setDS1307TimeDate@ptrToUserVal,fsr2l
  4939  00334C  C08D  FFDA         	movff	setDS1307TimeDate@ptrToUserVal+1,fsr2h
  4940  003350  50DF               	movf	indf2,w,c
  4941  003352  EC42  F039         	call	_DECtoBCD
  4942  003356  0100               	movlb	0	; () banked
  4943  003358  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4944  00335A  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4945  00335C  6F8A               	movwf	I2C_Write@d& (0+255),b
  4946  00335E  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4947  003360  EC7F  F036         	call	_I2C_Write	;wreg free
  4948                           
  4949                           ;ds1307.h: 45: I2C_Write(DECtoBCD(ptrToUserVal-> date));
  4950  003364  0100               	movlb	0	; () banked
  4951  003366  EE20 F004          	lfsr	2,4
  4952  00336A  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4953  00336C  26D9               	addwf	fsr2l,f,c
  4954  00336E  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4955  003370  22DA               	addwfc	fsr2h,f,c
  4956  003372  50DF               	movf	indf2,w,c
  4957  003374  EC42  F039         	call	_DECtoBCD
  4958  003378  0100               	movlb	0	; () banked
  4959  00337A  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4960  00337C  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4961  00337E  6F8A               	movwf	I2C_Write@d& (0+255),b
  4962  003380  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4963  003382  EC7F  F036         	call	_I2C_Write	;wreg free
  4964                           
  4965                           ;ds1307.h: 46: I2C_Write(DECtoBCD(ptrToUserVal-> month));
  4966  003386  0100               	movlb	0	; () banked
  4967  003388  EE20 F005          	lfsr	2,5
  4968  00338C  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4969  00338E  26D9               	addwf	fsr2l,f,c
  4970  003390  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4971  003392  22DA               	addwfc	fsr2h,f,c
  4972  003394  50DF               	movf	indf2,w,c
  4973  003396  EC42  F039         	call	_DECtoBCD
  4974  00339A  0100               	movlb	0	; () banked
  4975  00339C  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4976  00339E  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4977  0033A0  6F8A               	movwf	I2C_Write@d& (0+255),b
  4978  0033A2  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4979  0033A4  EC7F  F036         	call	_I2C_Write	;wreg free
  4980                           
  4981                           ;ds1307.h: 47: I2C_Write(DECtoBCD(ptrToUserVal-> year));
  4982  0033A8  0100               	movlb	0	; () banked
  4983  0033AA  EE20 F006          	lfsr	2,6
  4984  0033AE  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4985  0033B0  26D9               	addwf	fsr2l,f,c
  4986  0033B2  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4987  0033B4  22DA               	addwfc	fsr2h,f,c
  4988  0033B6  50DF               	movf	indf2,w,c
  4989  0033B8  EC42  F039         	call	_DECtoBCD
  4990  0033BC  0100               	movlb	0	; () banked
  4991  0033BE  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4992  0033C0  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4993  0033C2  6F8A               	movwf	I2C_Write@d& (0+255),b
  4994  0033C4  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4995  0033C6  EC7F  F036         	call	_I2C_Write	;wreg free
  4996                           
  4997                           ;ds1307.h: 48: I2C_Stop();
  4998  0033CA  EC6C  F036         	call	_I2C_Stop	;wreg free
  4999  0033CE  0012               	return		;funcret
  5000  0033D0  FFFF               	dw	65535	; errata NOP
  5001  0033D2                     __end_of_setDS1307TimeDate:
  5002                           	opt stack 0
  5003                           tblptru	equ	0xFF8
  5004                           tblptrh	equ	0xFF7
  5005                           tblptrl	equ	0xFF6
  5006                           tablat	equ	0xFF5
  5007                           postinc0	equ	0xFEE
  5008                           wreg	equ	0xFE8
  5009                           postdec1	equ	0xFE5
  5010                           fsr1l	equ	0xFE1
  5011                           indf2	equ	0xFDF
  5012                           fsr2h	equ	0xFDA
  5013                           fsr2l	equ	0xFD9
  5014                           status	equ	0xFD8
  5015                           
  5016 ;; *************** function _DECtoBCD *****************
  5017 ;; Defined at:
  5018 ;;		line 25 in file "function.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;  val             1    wreg     unsigned char 
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;  val             1    8[BANK0 ] unsigned char 
  5023 ;;  res             1    9[BANK0 ] unsigned char 
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      unsigned char 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2, status,0, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5033 ;;      Params:         0       0       0       0       0       0       0
  5034 ;;      Locals:         0       2       0       0       0       0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0
  5036 ;;      Totals:         0       2       0       0       0       0       0
  5037 ;;Total ram usage:        2 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    7
  5040 ;; This function calls:
  5041 ;;		___awdiv
  5042 ;;		___awmod
  5043 ;; This function is called by:
  5044 ;;		_setDS1307TimeDate
  5045 ;;		_setDS1307Time
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           	psect	text6
  5050  007284                     __ptext6:
  5051                           	opt stack 0
  5052  007284                     _DECtoBCD:
  5053                           	opt stack 0
  5054  007284  FFFF               	dw	65535	; assembler added errata NOP
  5055                           
  5056                           ;incstack = 0
  5057                           ;DECtoBCD@val stored from wreg
  5058  007286  0100               	movlb	0	; () banked
  5059  007288  6F88               	movwf	DECtoBCD@val& (0+255),b
  5060                           
  5061                           ;function.c: 26: char res;
  5062                           ;function.c: 27: res = (val / 10) << 4;
  5063  00728A  C088  F080         	movff	DECtoBCD@val,___awdiv@dividend
  5064  00728E  0100               	movlb	0	; () banked
  5065  007290  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5066  007292  0E00               	movlw	0
  5067  007294  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5068  007296  0E0A               	movlw	10
  5069  007298  6F82               	movwf	___awdiv@divisor& (0+255),b
  5070  00729A  ECFD  F01E         	call	___awdiv	;wreg free
  5071  00729E  0100               	movlb	0	; () banked
  5072  0072A0  3980               	swapf	?___awdiv& (0+255),w,b
  5073  0072A2  0BF0               	andlw	240
  5074  0072A4  6F89               	movwf	DECtoBCD@res& (0+255),b
  5075                           
  5076                           ;function.c: 28: res = res | (val % 10);
  5077  0072A6  C088  F080         	movff	DECtoBCD@val,___awmod@dividend
  5078  0072AA  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5079  0072AC  0E00               	movlw	0
  5080  0072AE  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5081  0072B0  0E0A               	movlw	10
  5082  0072B2  6F82               	movwf	___awmod@divisor& (0+255),b
  5083  0072B4  EC34  F03C         	call	___awmod	;wreg free
  5084  0072B8  0100               	movlb	0	; () banked
  5085  0072BA  5180               	movf	?___awmod& (0+255),w,b
  5086  0072BC  1189               	iorwf	DECtoBCD@res& (0+255),w,b
  5087  0072BE  6F89               	movwf	DECtoBCD@res& (0+255),b
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;function.c: 29: return res;
  5091  0072C0  5189               	movf	DECtoBCD@res& (0+255),w,b
  5092                           
  5093                           ; BSR set to: 0
  5094                           
  5095                           ; BSR set to: 0
  5096  0072C2  0012               	return		;funcret
  5097  0072C4  FFFF               	dw	65535	; errata NOP
  5098  0072C6                     __end_of_DECtoBCD:
  5099                           	opt stack 0
  5100                           tblptru	equ	0xFF8
  5101                           tblptrh	equ	0xFF7
  5102                           tblptrl	equ	0xFF6
  5103                           tablat	equ	0xFF5
  5104                           postinc0	equ	0xFEE
  5105                           wreg	equ	0xFE8
  5106                           postdec1	equ	0xFE5
  5107                           fsr1l	equ	0xFE1
  5108                           indf2	equ	0xFDF
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function _telaPrincipal *****************
  5114 ;; Defined at:
  5115 ;;		line 22 in file "tela_PRINCIPAL.h"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;		None
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;		None
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  1    wreg      void 
  5122 ;; Registers used:
  5123 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5129 ;;      Params:         0       0       0       0       0       0       0
  5130 ;;      Locals:         0       2       0       0       0       0       0
  5131 ;;      Temps:          0       0       0       0       0       0       0
  5132 ;;      Totals:         0       2       0       0       0       0       0
  5133 ;;Total ram usage:        2 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:   10
  5136 ;; This function calls:
  5137 ;;		_blink
  5138 ;;		_btPress
  5139 ;;		_clearShiftREG
  5140 ;;		_intToFloatStr
  5141 ;;		_resetParametros
  5142 ;;		_sprintf
  5143 ;; This function is called by:
  5144 ;;		_main
  5145 ;; This function uses a non-reentrant model
  5146 ;;
  5147                           
  5148                           	psect	text7
  5149  002202                     __ptext7:
  5150                           	opt stack 0
  5151  002202                     _telaPrincipal:
  5152                           	opt stack 0
  5153  002202  FFFF               	dw	65535	; assembler added errata NOP
  5154                           
  5155                           ;tela_PRINCIPAL.h: 24: sprintf(&line1[2], " %02d:%02d:%02d %02d/%02d", _hor, _min, _sec,
      +                           _dia, _mes);
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;incstack = 0
  5159  002204  0E7D               	movlw	low (_line1+2)
  5160  002206  0100               	movlb	0	; () banked
  5161  002208  6FA1               	movwf	sprintf@wh& (0+255),b
  5162  00220A  0E01               	movlw	high (_line1+2)
  5163  00220C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5164  00220E  0E1B               	movlw	low STR_55
  5165  002210  6FA3               	movwf	sprintf@f& (0+255),b
  5166  002212  0E7C               	movlw	high STR_55
  5167  002214  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5168  002216  C0EC  F0A5         	movff	__hor,?_sprintf+4
  5169  00221A  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  5170  00221C  C0ED  F0A7         	movff	__min,?_sprintf+6
  5171  002220  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  5172  002222  C0EE  F0A9         	movff	__sec,?_sprintf+8
  5173  002226  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  5174  002228  C0EB  F0AB         	movff	__dia,?_sprintf+10
  5175  00222C  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  5176  00222E  C0EA  F0AD         	movff	__mes,?_sprintf+12
  5177  002232  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  5178  002234  ECC9  F039         	call	_sprintf	;wreg free
  5179                           
  5180                           ;tela_PRINCIPAL.h: 26: line1[0] = 0x01;
  5181  002238  0E01               	movlw	1
  5182  00223A  0101               	movlb	1	; () banked
  5183  00223C  6F7B               	movwf	_line1& (0+255),b
  5184                           
  5185                           ; BSR set to: 1
  5186                           ;tela_PRINCIPAL.h: 27: line1[1] = intensidadeSinal;
  5187  00223E  C0FF  F17C         	movff	_intensidadeSinal,_line1+1
  5188                           
  5189                           ; BSR set to: 1
  5190                           ;tela_PRINCIPAL.h: 28: line1[19] = 0x05;
  5191  002242  0E05               	movlw	5
  5192  002244  6F8E               	movwf	(_line1+19)& (0+255),b
  5193                           
  5194                           ;tela_PRINCIPAL.h: 30: switch (codigoErro) {
  5195  002246  D041               	goto	l677
  5196  002248  FFFF               	dw	65535	; assembler added errata NOP
  5197                           
  5198                           ;tela_PRINCIPAL.h: 32: sprintf(line4, " *falha eletrica");
  5199                           
  5200                           ; BSR set to: 1
  5201  00224A  0E3C               	movlw	low _line4
  5202  00224C  0100               	movlb	0	; () banked
  5203  00224E  6FA1               	movwf	sprintf@wh& (0+255),b
  5204  002250  0E01               	movlw	high _line4
  5205  002252  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5206  002254  0EC9               	movlw	low STR_56
  5207  002256  6FA3               	movwf	sprintf@f& (0+255),b
  5208  002258  0E7D               	movlw	high STR_56
  5209  00225A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5210  00225C  ECC9  F039         	call	_sprintf	;wreg free
  5211                           
  5212                           ;tela_PRINCIPAL.h: 33: break;
  5213  002260  D046               	goto	l679
  5214  002262  FFFF               	dw	65535	; assembler added errata NOP
  5215                           
  5216                           ;tela_PRINCIPAL.h: 35: sprintf(line4, " *falha val. ladrao");
  5217  002264  0E3C               	movlw	low _line4
  5218  002266  0100               	movlb	0	; () banked
  5219  002268  6FA1               	movwf	sprintf@wh& (0+255),b
  5220  00226A  0E01               	movlw	high _line4
  5221  00226C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5222  00226E  0E9C               	movlw	low STR_57
  5223  002270  6FA3               	movwf	sprintf@f& (0+255),b
  5224  002272  0E7C               	movlw	high STR_57
  5225  002274  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5226  002276  ECC9  F039         	call	_sprintf	;wreg free
  5227                           
  5228                           ;tela_PRINCIPAL.h: 36: break;
  5229  00227A  D039               	goto	l679
  5230  00227C  FFFF               	dw	65535	; assembler added errata NOP
  5231                           
  5232                           ;tela_PRINCIPAL.h: 38: sprintf(line4, " *falha B. jockey");
  5233  00227E  0E3C               	movlw	low _line4
  5234  002280  0100               	movlb	0	; () banked
  5235  002282  6FA1               	movwf	sprintf@wh& (0+255),b
  5236  002284  0E01               	movlw	high _line4
  5237  002286  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5238  002288  0E95               	movlw	low STR_58
  5239  00228A  6FA3               	movwf	sprintf@f& (0+255),b
  5240  00228C  0E7D               	movlw	high STR_58
  5241  00228E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5242  002290  ECC9  F039         	call	_sprintf	;wreg free
  5243                           
  5244                           ;tela_PRINCIPAL.h: 39: break;
  5245  002294  D02C               	goto	l679
  5246  002296  FFFF               	dw	65535	; assembler added errata NOP
  5247                           
  5248                           ;tela_PRINCIPAL.h: 41: sprintf(line4, " *falha B. principal");
  5249  002298  0E3C               	movlw	low _line4
  5250  00229A  0100               	movlb	0	; () banked
  5251  00229C  6FA1               	movwf	sprintf@wh& (0+255),b
  5252  00229E  0E01               	movlw	high _line4
  5253  0022A0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5254  0022A2  0E35               	movlw	low STR_59
  5255  0022A4  6FA3               	movwf	sprintf@f& (0+255),b
  5256  0022A6  0E7C               	movlw	high STR_59
  5257  0022A8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5258  0022AA  ECC9  F039         	call	_sprintf	;wreg free
  5259                           
  5260                           ;tela_PRINCIPAL.h: 42: break;
  5261  0022AE  D01F               	goto	l679
  5262  0022B0  FFFF               	dw	65535	; assembler added errata NOP
  5263                           
  5264                           ;tela_PRINCIPAL.h: 44: sprintf(line4, " *falha B. combustao");
  5265  0022B2  0E3C               	movlw	low _line4
  5266  0022B4  0100               	movlb	0	; () banked
  5267  0022B6  6FA1               	movwf	sprintf@wh& (0+255),b
  5268  0022B8  0E01               	movlw	high _line4
  5269  0022BA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5270  0022BC  0E4A               	movlw	low STR_60
  5271  0022BE  6FA3               	movwf	sprintf@f& (0+255),b
  5272  0022C0  0E7C               	movlw	high STR_60
  5273  0022C2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5274  0022C4  ECC9  F039         	call	_sprintf	;wreg free
  5275                           
  5276                           ;tela_PRINCIPAL.h: 46: }
  5277                           
  5278                           ;tela_PRINCIPAL.h: 45: break;
  5279  0022C8  D012               	goto	l679
  5280  0022CA                     l677:
  5281  0022CA  FFFF               	dw	65535	; assembler added errata NOP
  5282  0022CC  0100               	movlb	0	; () banked
  5283  0022CE  51F3               	movf	_codigoErro& (0+255),w,b
  5284                           
  5285                           ; Switch size 1, requested type "space"
  5286                           ; Number of cases is 5, Range of values is 1 to 6
  5287                           ; switch strategies available:
  5288                           ; Name         Instructions Cycles
  5289                           ; simple_byte           16     9 (average)
  5290                           ;	Chosen strategy is simple_byte
  5291  0022D0  0A01               	xorlw	1	; case 1
  5292  0022D2  B4D8               	btfsc	status,2,c
  5293  0022D4  D7B9               	goto	l678
  5294  0022D6  0A02               	xorlw	2	; case 3
  5295  0022D8  B4D8               	btfsc	status,2,c
  5296  0022DA  D7C3               	goto	l680
  5297  0022DC  0A07               	xorlw	7	; case 4
  5298  0022DE  B4D8               	btfsc	status,2,c
  5299  0022E0  D7CD               	goto	l681
  5300  0022E2  0A01               	xorlw	1	; case 5
  5301  0022E4  B4D8               	btfsc	status,2,c
  5302  0022E6  D7D7               	goto	l682
  5303  0022E8  0A03               	xorlw	3	; case 6
  5304  0022EA  B4D8               	btfsc	status,2,c
  5305  0022EC  D7E1               	goto	l683
  5306  0022EE                     l679:
  5307  0022EE  FFFF               	dw	65535	; assembler added errata NOP
  5308                           
  5309                           ;tela_PRINCIPAL.h: 48: if (ocorrendoIncendio) {
  5310                           
  5311                           ; BSR set to: 0
  5312  0022F0  0100               	movlb	0	; () banked
  5313  0022F2  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  5314  0022F4  B4D8               	btfsc	status,2,c
  5315  0022F6  D00A               	goto	l684
  5316                           
  5317                           ; BSR set to: 0
  5318                           ;tela_PRINCIPAL.h: 49: sprintf(line2, " ALERTA DE INCENDIO");
  5319  0022F8  0E66               	movlw	low _line2
  5320  0022FA  6FA1               	movwf	sprintf@wh& (0+255),b
  5321  0022FC  0E01               	movlw	high _line2
  5322  0022FE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5323  002300  0E88               	movlw	low STR_61
  5324  002302  6FA3               	movwf	sprintf@f& (0+255),b
  5325  002304  0E7C               	movlw	high STR_61
  5326  002306  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5327  002308  ECC9  F039         	call	_sprintf	;wreg free
  5328  00230C                     l684:
  5329  00230C  FFFF               	dw	65535	; assembler added errata NOP
  5330                           
  5331                           ;tela_PRINCIPAL.h: 50: }
  5332                           ;tela_PRINCIPAL.h: 51: if (flagErroTransdutor) {
  5333  00230E  5073               	movf	_flagErroTransdutor,w,c
  5334  002310  B4D8               	btfsc	status,2,c
  5335  002312  D013               	goto	l685
  5336                           
  5337                           ;tela_PRINCIPAL.h: 52: clearShiftREG();
  5338  002314  ECFB  F037         	call	_clearShiftREG	;wreg free
  5339                           
  5340                           ;tela_PRINCIPAL.h: 53: sprintf(&line3[1], "Erro no Transdutor");
  5341  002318  0E52               	movlw	low (_line3+1)
  5342  00231A  0100               	movlb	0	; () banked
  5343  00231C  6FA1               	movwf	sprintf@wh& (0+255),b
  5344  00231E  0E01               	movlw	high (_line3+1)
  5345  002320  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5346  002322  0E4C               	movlw	low STR_62
  5347  002324  6FA3               	movwf	sprintf@f& (0+255),b
  5348  002326  0E7D               	movlw	high STR_62
  5349  002328  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5350  00232A  ECC9  F039         	call	_sprintf	;wreg free
  5351                           
  5352                           ;tela_PRINCIPAL.h: 54: ocorrendoIncendio = 0;
  5353  00232E  0E00               	movlw	0
  5354  002330  0100               	movlb	0	; () banked
  5355  002332  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;tela_PRINCIPAL.h: 55: shift[1] = 1;
  5359  002334  0E01               	movlw	1
  5360  002336  6E45               	movwf	_shift+1,c
  5361                           
  5362                           ;tela_PRINCIPAL.h: 56: } else {
  5363  002338  D018               	goto	l686
  5364  00233A                     l685:
  5365  00233A  FFFF               	dw	65535	; assembler added errata NOP
  5366                           
  5367                           ;tela_PRINCIPAL.h: 57: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5368                           
  5369                           ; BSR set to: 0
  5370  00233C  0100               	movlb	0	; () banked
  5371  00233E  51F8               	movf	_pressao& (0+255),w,b
  5372  002340  EC04  F03D         	call	_intToFloatStr
  5373  002344  C0B5  F0C2         	movff	?_intToFloatStr,_telaPrincipal$2377
  5374  002348  C0B6  F0C3         	movff	?_intToFloatStr+1,_telaPrincipal$2377+1
  5375                           
  5376                           ;tela_PRINCIPAL.h: 57: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5377  00234C  0E53               	movlw	low (_line3+2)
  5378  00234E  0100               	movlb	0	; () banked
  5379  002350  6FA1               	movwf	sprintf@wh& (0+255),b
  5380  002352  0E01               	movlw	high (_line3+2)
  5381  002354  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5382  002356  0E2B               	movlw	low STR_39
  5383  002358  6FA3               	movwf	sprintf@f& (0+255),b
  5384  00235A  0E7E               	movlw	high STR_39
  5385  00235C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5386  00235E  C0C2  F0A5         	movff	_telaPrincipal$2377,?_sprintf+4
  5387  002362  C0C3  F0A6         	movff	_telaPrincipal$2377+1,?_sprintf+5
  5388  002366  ECC9  F039         	call	_sprintf	;wreg free
  5389  00236A                     l686:
  5390  00236A  FFFF               	dw	65535	; assembler added errata NOP
  5391                           
  5392                           ;tela_PRINCIPAL.h: 58: }
  5393                           ;tela_PRINCIPAL.h: 61: if (codigoErro > 1 || ocorrendoIncendio) {
  5394  00236C  0E02               	movlw	2
  5395  00236E  0100               	movlb	0	; () banked
  5396  002370  61F3               	cpfslt	_codigoErro& (0+255),b
  5397  002372  D003               	goto	u7820
  5398                           
  5399                           ; BSR set to: 0
  5400  002374  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  5401  002376  B4D8               	btfsc	status,2,c
  5402  002378  D016               	goto	l691
  5403  00237A                     u7820:
  5404  00237A  FFFF               	dw	65535	; assembler added errata NOP
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;tela_PRINCIPAL.h: 62: if (flagTexto) {
  5408                           
  5409                           ; BSR set to: 0
  5410  00237C  5074               	movf	_flagTexto,w,c
  5411  00237E  B4D8               	btfsc	status,2,c
  5412  002380  D00A               	goto	l690
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;tela_PRINCIPAL.h: 63: sprintf(line4, " Press ESC p/ Reset");
  5416  002382  0E3C               	movlw	low _line4
  5417  002384  6FA1               	movwf	sprintf@wh& (0+255),b
  5418  002386  0E01               	movlw	high _line4
  5419  002388  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5420  00238A  0EEC               	movlw	low STR_64
  5421  00238C  6FA3               	movwf	sprintf@f& (0+255),b
  5422  00238E  0E7C               	movlw	high STR_64
  5423  002390  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5424  002392  ECC9  F039         	call	_sprintf	;wreg free
  5425  002396                     l690:
  5426  002396  FFFF               	dw	65535	; assembler added errata NOP
  5427                           
  5428                           ;tela_PRINCIPAL.h: 64: }
  5429                           ;tela_PRINCIPAL.h: 65: if (btPress(1)) {
  5430  002398  0E01               	movlw	1
  5431  00239A  EC4A  F03B         	call	_btPress
  5432  00239E  0900               	iorlw	0
  5433  0023A0  A4D8               	btfss	status,2,c
  5434                           
  5435                           ;tela_PRINCIPAL.h: 66: resetParametros();
  5436  0023A2  EC1E  F037         	call	_resetParametros	;wreg free
  5437  0023A6                     l691:
  5438  0023A6  FFFF               	dw	65535	; assembler added errata NOP
  5439                           
  5440                           ;tela_PRINCIPAL.h: 67: }
  5441                           ;tela_PRINCIPAL.h: 68: }
  5442                           ;tela_PRINCIPAL.h: 70: if (btPress(4)) {
  5443  0023A8  0E04               	movlw	4
  5444  0023AA  EC4A  F03B         	call	_btPress
  5445  0023AE  0900               	iorlw	0
  5446  0023B0  B4D8               	btfsc	status,2,c
  5447  0023B2  D005               	goto	l692
  5448                           
  5449                           ;tela_PRINCIPAL.h: 71: menu_posi = 1;
  5450  0023B4  0E01               	movlw	1
  5451  0023B6  0100               	movlb	0	; () banked
  5452  0023B8  6FDE               	movwf	_menu_posi& (0+255),b
  5453                           
  5454                           ;tela_PRINCIPAL.h: 72: sub_menu_posi = 1;
  5455  0023BA  0E01               	movlw	1
  5456  0023BC  6E6A               	movwf	_sub_menu_posi,c
  5457  0023BE                     l692:
  5458  0023BE  FFFF               	dw	65535	; assembler added errata NOP
  5459                           
  5460                           ;tela_PRINCIPAL.h: 73: }
  5461                           ;tela_PRINCIPAL.h: 76: if (!PORTCbits.RC0) {
  5462                           
  5463                           ; BSR set to: 0
  5464  0023C0  B082               	btfsc	3970,0,c	;volatile
  5465  0023C2  D011               	goto	l694
  5466                           
  5467                           ;tela_PRINCIPAL.h: 77: blink(line1, 20, 20);
  5468  0023C4  0E7B               	movlw	low _line1
  5469  0023C6  0100               	movlb	0	; () banked
  5470  0023C8  6F80               	movwf	blink@line& (0+255),b
  5471  0023CA  0E01               	movlw	high _line1
  5472  0023CC  6F81               	movwf	(blink@line+1)& (0+255),b
  5473  0023CE  0E14               	movlw	20
  5474  0023D0  6F82               	movwf	blink@start& (0+255),b
  5475  0023D2  0E14               	movlw	20
  5476  0023D4  6F83               	movwf	blink@end& (0+255),b
  5477  0023D6  ECE2  F038         	call	_blink	;wreg free
  5478                           
  5479                           ;tela_PRINCIPAL.h: 78: if (codigoErro == 0) {
  5480  0023DA  0100               	movlb	0	; () banked
  5481  0023DC  51F3               	movf	_codigoErro& (0+255),w,b
  5482  0023DE  A4D8               	btfss	status,2,c
  5483  0023E0  D002               	goto	l694
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;tela_PRINCIPAL.h: 79: codigoErro = 1;
  5487  0023E2  0E01               	movlw	1
  5488  0023E4  6FF3               	movwf	_codigoErro& (0+255),b
  5489  0023E6                     l694:
  5490  0023E6  FFFF               	dw	65535	; assembler added errata NOP
  5491                           
  5492                           ;tela_PRINCIPAL.h: 80: }
  5493                           ;tela_PRINCIPAL.h: 81: }
  5494                           ;tela_PRINCIPAL.h: 82: if (status_jockey == 0) {
  5495                           
  5496                           ; BSR set to: 0
  5497  0023E8  0100               	movlb	0	; () banked
  5498  0023EA  51FD               	movf	_status_jockey& (0+255),w,b
  5499  0023EC  A4D8               	btfss	status,2,c
  5500  0023EE  D002               	goto	l695
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;tela_PRINCIPAL.h: 83: codigoErro = 4;
  5504  0023F0  0E04               	movlw	4
  5505  0023F2  D00B               	goto	L9
  5506  0023F4                     l695:
  5507  0023F4  FFFF               	dw	65535	; assembler added errata NOP
  5508                           
  5509                           ; BSR set to: 0
  5510                           
  5511                           ; BSR set to: 0
  5512  0023F6  51FC               	movf	_status_principal& (0+255),w,b
  5513  0023F8  A4D8               	btfss	status,2,c
  5514  0023FA  D002               	goto	l697
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;tela_PRINCIPAL.h: 85: codigoErro = 5;
  5518  0023FC  0E05               	movlw	5
  5519  0023FE  D005               	goto	L9
  5520  002400                     l697:
  5521  002400  FFFF               	dw	65535	; assembler added errata NOP
  5522                           
  5523                           ; BSR set to: 0
  5524                           
  5525                           ; BSR set to: 0
  5526  002402  51FB               	movf	_status_estacionaria& (0+255),w,b
  5527  002404  A4D8               	btfss	status,2,c
  5528  002406  D003               	goto	l699
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;tela_PRINCIPAL.h: 87: codigoErro = 6;
  5532  002408  0E06               	movlw	6
  5533  00240A                     L9:
  5534  00240A  FFFF               	dw	65535	; assembler added errata NOP
  5535  00240C  6FF3               	movwf	_codigoErro& (0+255),b
  5536  00240E                     l699:
  5537  00240E  FFFF               	dw	65535	; assembler added errata NOP
  5538                           
  5539                           ; BSR set to: 0
  5540                           
  5541                           ; BSR set to: 0
  5542                           
  5543                           ; BSR set to: 0
  5544                           
  5545                           ; BSR set to: 0
  5546  002410  0012               	return		;funcret
  5547  002412  FFFF               	dw	65535	; errata NOP
  5548  002414                     __end_of_telaPrincipal:
  5549                           	opt stack 0
  5550                           tblptru	equ	0xFF8
  5551                           tblptrh	equ	0xFF7
  5552                           tblptrl	equ	0xFF6
  5553                           tablat	equ	0xFF5
  5554                           postinc0	equ	0xFEE
  5555                           wreg	equ	0xFE8
  5556                           postdec1	equ	0xFE5
  5557                           fsr1l	equ	0xFE1
  5558                           indf2	equ	0xFDF
  5559                           fsr2h	equ	0xFDA
  5560                           fsr2l	equ	0xFD9
  5561                           status	equ	0xFD8
  5562                           
  5563 ;; *************** function _resetParametros *****************
  5564 ;; Defined at:
  5565 ;;		line 11 in file "tela_PRINCIPAL.h"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;		None
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      void 
  5572 ;; Registers used:
  5573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5579 ;;      Params:         0       0       0       0       0       0       0
  5580 ;;      Locals:         0       0       0       0       0       0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0
  5582 ;;      Totals:         0       0       0       0       0       0       0
  5583 ;;Total ram usage:        0 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    7
  5586 ;; This function calls:
  5587 ;;		_clearShiftREG
  5588 ;; This function is called by:
  5589 ;;		_telaPrincipal
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text8
  5594  006E3C                     __ptext8:
  5595                           	opt stack 0
  5596  006E3C                     _resetParametros:
  5597                           	opt stack 0
  5598  006E3C  FFFF               	dw	65535	; assembler added errata NOP
  5599                           
  5600                           ;tela_PRINCIPAL.h: 12: ocorrendoIncendio = 0;
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;incstack = 0
  5604  006E3E  0E00               	movlw	0
  5605  006E40  0100               	movlb	0	; () banked
  5606  006E42  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
  5607                           
  5608                           ;tela_PRINCIPAL.h: 13: codigoErro = 0;
  5609  006E44  0E00               	movlw	0
  5610  006E46  6FF3               	movwf	_codigoErro& (0+255),b
  5611                           
  5612                           ;tela_PRINCIPAL.h: 14: status_estacionaria = 1;
  5613  006E48  0E01               	movlw	1
  5614  006E4A  6FFB               	movwf	_status_estacionaria& (0+255),b
  5615                           
  5616                           ;tela_PRINCIPAL.h: 15: status_jockey = 1;
  5617  006E4C  0E01               	movlw	1
  5618  006E4E  6FFD               	movwf	_status_jockey& (0+255),b
  5619                           
  5620                           ;tela_PRINCIPAL.h: 16: status_principal = 1;
  5621  006E50  0E01               	movlw	1
  5622  006E52  6FFC               	movwf	_status_principal& (0+255),b
  5623                           
  5624                           ;tela_PRINCIPAL.h: 17: tempo_limite_partida = 0;
  5625  006E54  0E00               	movlw	0
  5626  006E56  6E6C               	movwf	_tempo_limite_partida,c
  5627                           
  5628                           ;tela_PRINCIPAL.h: 18: tempo_partida = 0;
  5629  006E58  0E00               	movlw	0
  5630  006E5A  6E6D               	movwf	_tempo_partida,c
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;tela_PRINCIPAL.h: 19: clearShiftREG();
  5634  006E5C  ECFB  F037         	call	_clearShiftREG	;wreg free
  5635  006E60  0012               	return		;funcret
  5636  006E62  FFFF               	dw	65535	; errata NOP
  5637  006E64                     __end_of_resetParametros:
  5638                           	opt stack 0
  5639                           tblptru	equ	0xFF8
  5640                           tblptrh	equ	0xFF7
  5641                           tblptrl	equ	0xFF6
  5642                           tablat	equ	0xFF5
  5643                           postinc0	equ	0xFEE
  5644                           wreg	equ	0xFE8
  5645                           postdec1	equ	0xFE5
  5646                           fsr1l	equ	0xFE1
  5647                           indf2	equ	0xFDF
  5648                           fsr2h	equ	0xFDA
  5649                           fsr2l	equ	0xFD9
  5650                           status	equ	0xFD8
  5651                           
  5652 ;; *************** function _setShiftREG *****************
  5653 ;; Defined at:
  5654 ;;		line 37 in file "shift595.h"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;		None
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;  i               1    1[BANK0 ] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      void 
  5661 ;; Registers used:
  5662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5668 ;;      Params:         0       0       0       0       0       0       0
  5669 ;;      Locals:         0       1       0       0       0       0       0
  5670 ;;      Temps:          0       1       0       0       0       0       0
  5671 ;;      Totals:         0       2       0       0       0       0       0
  5672 ;;Total ram usage:        2 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    6
  5675 ;; This function calls:
  5676 ;;		Nothing
  5677 ;; This function is called by:
  5678 ;;		_main
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           	psect	text9
  5683  0073DA                     __ptext9:
  5684                           	opt stack 0
  5685  0073DA                     _setShiftREG:
  5686                           	opt stack 0
  5687  0073DA  FFFF               	dw	65535	; assembler added errata NOP
  5688                           
  5689                           ;shift595.h: 38: unsigned char i = 0;
  5690                           
  5691                           ;incstack = 0
  5692  0073DC  0E00               	movlw	0
  5693  0073DE  0100               	movlb	0	; () banked
  5694  0073E0  6F81               	movwf	setShiftREG@i& (0+255),b
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;shift595.h: 39: PORTEbits.RE1 = 0;
  5698  0073E2  9284               	bcf	3972,1,c	;volatile
  5699                           
  5700                           ;shift595.h: 40: for (i = 0; i < 8; i++) {
  5701  0073E4  0E00               	movlw	0
  5702  0073E6  6F81               	movwf	setShiftREG@i& (0+255),b
  5703  0073E8  D015               	goto	l6510
  5704  0073EA                     l431:
  5705  0073EA  FFFF               	dw	65535	; assembler added errata NOP
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;shift595.h: 41: PORTEbits.RE0 = 0;
  5709  0073EC  9084               	bcf	3972,0,c	;volatile
  5710                           
  5711                           ; BSR set to: 0
  5712                           ;shift595.h: 42: PORTEbits.RE2 = shift[i];
  5713  0073EE  5181               	movf	setShiftREG@i& (0+255),w,b
  5714  0073F0  0D01               	mullw	1
  5715  0073F2  0E44               	movlw	low _shift
  5716  0073F4  24F3               	addwf	prodl,w,c
  5717  0073F6  6ED9               	movwf	fsr2l,c
  5718  0073F8  0E00               	movlw	high _shift
  5719  0073FA  20F4               	addwfc	prodh,w,c
  5720  0073FC  6EDA               	movwf	fsr2h,c
  5721  0073FE  50DF               	movf	indf2,w,c
  5722  007400  6F80               	movwf	??_setShiftREG& (0+255),b
  5723  007402  4780               	rlncf	??_setShiftREG& (0+255),f,b
  5724  007404  4780               	rlncf	??_setShiftREG& (0+255),f,b
  5725  007406  5084               	movf	3972,w,c	;volatile
  5726  007408  1980               	xorwf	??_setShiftREG& (0+255),w,b
  5727  00740A  0BFB               	andlw	-5
  5728  00740C  1980               	xorwf	??_setShiftREG& (0+255),w,b
  5729  00740E  6E84               	movwf	3972,c	;volatile
  5730                           
  5731                           ; BSR set to: 0
  5732                           ;shift595.h: 43: PORTEbits.RE0 = 1;
  5733  007410  8084               	bsf	3972,0,c	;volatile
  5734                           
  5735                           ; BSR set to: 0
  5736  007412  2B81               	incf	setShiftREG@i& (0+255),f,b
  5737  007414                     l6510:
  5738  007414  FFFF               	dw	65535	; assembler added errata NOP
  5739                           
  5740                           ; BSR set to: 0
  5741  007416  0E07               	movlw	7
  5742  007418  6581               	cpfsgt	setShiftREG@i& (0+255),b
  5743  00741A  D7E7               	goto	l431
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;shift595.h: 44: }
  5747                           ;shift595.h: 45: PORTEbits.RE1 = 1;
  5748  00741C  8284               	bsf	3972,1,c	;volatile
  5749                           
  5750                           ; BSR set to: 0
  5751  00741E  0012               	return		;funcret
  5752  007420  FFFF               	dw	65535	; errata NOP
  5753  007422                     __end_of_setShiftREG:
  5754                           	opt stack 0
  5755                           tblptru	equ	0xFF8
  5756                           tblptrh	equ	0xFF7
  5757                           tblptrl	equ	0xFF6
  5758                           tablat	equ	0xFF5
  5759                           prodh	equ	0xFF4
  5760                           prodl	equ	0xFF3
  5761                           postinc0	equ	0xFEE
  5762                           wreg	equ	0xFE8
  5763                           postdec1	equ	0xFE5
  5764                           fsr1l	equ	0xFE1
  5765                           indf2	equ	0xFDF
  5766                           fsr2h	equ	0xFDA
  5767                           fsr2l	equ	0xFD9
  5768                           status	equ	0xFD8
  5769                           
  5770 ;; *************** function _lerParametros *****************
  5771 ;; Defined at:
  5772 ;;		line 9 in file "util.h"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;		None
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;  i               1   21[BANK0 ] unsigned char 
  5777 ;;  verifica_mem    1   20[BANK0 ] unsigned char 
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      void 
  5780 ;; Registers used:
  5781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5787 ;;      Params:         0       0       0       0       0       0       0
  5788 ;;      Locals:         0       2       0       0       0       0       0
  5789 ;;      Temps:          0       0       0       0       0       0       0
  5790 ;;      Totals:         0       2       0       0       0       0       0
  5791 ;;Total ram usage:        2 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:   10
  5794 ;; This function calls:
  5795 ;;		_readEEPROM16_ext
  5796 ;;		_readEEPROM_ext
  5797 ;;		_writeEEPROM_ext
  5798 ;; This function is called by:
  5799 ;;		_main
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           	psect	text10
  5804  002F5C                     __ptext10:
  5805                           	opt stack 0
  5806  002F5C                     _lerParametros:
  5807                           	opt stack 0
  5808  002F5C  FFFF               	dw	65535	; assembler added errata NOP
  5809                           
  5810                           ;util.h: 10: char i = 0;
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;incstack = 0
  5814  002F5E  0E00               	movlw	0
  5815  002F60  0100               	movlb	0	; () banked
  5816  002F62  6F95               	movwf	lerParametros@i& (0+255),b
  5817                           
  5818                           ;util.h: 11: char verifica_memoria_nova = 0;
  5819  002F64  0E00               	movlw	0
  5820  002F66  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;util.h: 12: verifica_memoria_nova = readEEPROM_ext(12);
  5824  002F68  0E0C               	movlw	12
  5825  002F6A  EC61  F03A         	call	_readEEPROM_ext
  5826  002F6E  0100               	movlb	0	; () banked
  5827  002F70  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;util.h: 13: if (verifica_memoria_nova != 20) {
  5831  002F72  0E14               	movlw	20
  5832  002F74  1994               	xorwf	lerParametros@verifica_memoria_nova& (0+255),w,b
  5833  002F76  B4D8               	btfsc	status,2,c
  5834  002F78  D016               	goto	l600
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;util.h: 14: for (i = 0; i < 100; i++) {
  5838  002F7A  0E00               	movlw	0
  5839  002F7C  6F95               	movwf	lerParametros@i& (0+255),b
  5840  002F7E                     l6876:
  5841  002F7E  FFFF               	dw	65535	; assembler added errata NOP
  5842                           
  5843                           ; BSR set to: 0
  5844  002F80  0E63               	movlw	99
  5845  002F82  6595               	cpfsgt	lerParametros@i& (0+255),b
  5846  002F84  D001               	goto	l601
  5847  002F86  D009               	goto	u7650
  5848  002F88                     l601:
  5849  002F88  FFFF               	dw	65535	; assembler added errata NOP
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;util.h: 15: writeEEPROM_ext(i, 0);
  5853                           
  5854                           ; BSR set to: 0
  5855  002F8A  0E00               	movlw	0
  5856  002F8C  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  5857  002F8E  5195               	movf	lerParametros@i& (0+255),w,b
  5858  002F90  ECA6  F039         	call	_writeEEPROM_ext
  5859  002F94  0100               	movlb	0	; () banked
  5860  002F96  2B95               	incf	lerParametros@i& (0+255),f,b
  5861  002F98  D7F2               	goto	l6876
  5862  002F9A                     u7650:
  5863  002F9A  FFFF               	dw	65535	; assembler added errata NOP
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;util.h: 16: }
  5867                           ;util.h: 17: writeEEPROM_ext(12, 20);
  5868                           
  5869                           ; BSR set to: 0
  5870  002F9C  0E14               	movlw	20
  5871  002F9E  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  5872  002FA0  0E0C               	movlw	12
  5873  002FA2  ECA6  F039         	call	_writeEEPROM_ext
  5874  002FA6                     l600:
  5875  002FA6  FFFF               	dw	65535	; assembler added errata NOP
  5876                           
  5877                           ;util.h: 18: }
  5878                           ;util.h: 20: sp_jockey = readEEPROM_ext(0);
  5879  002FA8  0E00               	movlw	0
  5880  002FAA  EC61  F03A         	call	_readEEPROM_ext
  5881  002FAE  0100               	movlb	0	; () banked
  5882  002FB0  6FE2               	movwf	_sp_jockey& (0+255),b
  5883                           
  5884                           ;util.h: 21: sp_principal = readEEPROM_ext(1);
  5885  002FB2  0E01               	movlw	1
  5886  002FB4  EC61  F03A         	call	_readEEPROM_ext
  5887  002FB8  0100               	movlb	0	; () banked
  5888  002FBA  6FE1               	movwf	_sp_principal& (0+255),b
  5889                           
  5890                           ;util.h: 22: sp_estacionaria = readEEPROM_ext(2);
  5891  002FBC  0E02               	movlw	2
  5892  002FBE  EC61  F03A         	call	_readEEPROM_ext
  5893  002FC2  0100               	movlb	0	; () banked
  5894  002FC4  6FE0               	movwf	_sp_estacionaria& (0+255),b
  5895                           
  5896                           ;util.h: 23: horimetro = readEEPROM16_ext(8);
  5897  002FC6  0E08               	movlw	8
  5898  002FC8  EC32  F038         	call	_readEEPROM16_ext
  5899  002FCC  C08E  F04F         	movff	?_readEEPROM16_ext,_horimetro
  5900  002FD0  C08F  F050         	movff	?_readEEPROM16_ext+1,_horimetro+1
  5901                           
  5902                           ;util.h: 24: sp_pressao_rede = readEEPROM_ext(4);
  5903  002FD4  0E04               	movlw	4
  5904  002FD6  EC61  F03A         	call	_readEEPROM_ext
  5905  002FDA  0100               	movlb	0	; () banked
  5906  002FDC  6FE3               	movwf	_sp_pressao_rede& (0+255),b
  5907                           
  5908                           ;util.h: 25: intervalo_teste_dia = readEEPROM_ext(6);
  5909  002FDE  0E06               	movlw	6
  5910  002FE0  EC61  F03A         	call	_readEEPROM_ext
  5911  002FE4  0100               	movlb	0	; () banked
  5912  002FE6  6FE8               	movwf	_intervalo_teste_dia& (0+255),b
  5913                           
  5914                           ;util.h: 26: tempo_limite_estacionaria = readEEPROM_ext(7);
  5915  002FE8  0E07               	movlw	7
  5916  002FEA  EC61  F03A         	call	_readEEPROM_ext
  5917  002FEE  0100               	movlb	0	; () banked
  5918  002FF0  6FE5               	movwf	_tempo_limite_estacionaria& (0+255),b
  5919                           
  5920                           ;util.h: 27: dias_restante_teste = readEEPROM_ext(10);
  5921  002FF2  0E0A               	movlw	10
  5922  002FF4  EC61  F03A         	call	_readEEPROM_ext
  5923  002FF8  0100               	movlb	0	; () banked
  5924  002FFA  6FE7               	movwf	_dias_restante_teste& (0+255),b
  5925                           
  5926                           ;util.h: 28: horario_de_teste = readEEPROM_ext(11);
  5927  002FFC  0E0B               	movlw	11
  5928  002FFE  EC61  F03A         	call	_readEEPROM_ext
  5929  003002  0100               	movlb	0	; () banked
  5930  003004  6FE6               	movwf	_horario_de_teste& (0+255),b
  5931                           
  5932                           ;util.h: 29: tempo_limite_teste_estacionaria = readEEPROM_ext(13);
  5933  003006  0E0D               	movlw	13
  5934  003008  EC61  F03A         	call	_readEEPROM_ext
  5935  00300C  0100               	movlb	0	; () banked
  5936  00300E  6FE4               	movwf	_tempo_limite_teste_estacionaria& (0+255),b
  5937                           
  5938                           ;util.h: 31: habilitaTesteAutomatico = readEEPROM_ext(15);
  5939  003010  0E0F               	movlw	15
  5940  003012  EC61  F03A         	call	_readEEPROM_ext
  5941  003016  0100               	movlb	0	; () banked
  5942  003018  6FEF               	movwf	_habilitaTesteAutomatico& (0+255),b
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;util.h: 33: for (i = 0; i < 11; i++) {
  5946  00301A  0E00               	movlw	0
  5947  00301C  6F95               	movwf	lerParametros@i& (0+255),b
  5948  00301E                     l6890:
  5949  00301E  FFFF               	dw	65535	; assembler added errata NOP
  5950                           
  5951                           ; BSR set to: 0
  5952  003020  0E0A               	movlw	10
  5953  003022  6595               	cpfsgt	lerParametros@i& (0+255),b
  5954  003024  D001               	goto	l603
  5955  003026  D011               	goto	u7670
  5956  003028                     l603:
  5957  003028  FFFF               	dw	65535	; assembler added errata NOP
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;util.h: 34: tel1[i] = readEEPROM_ext(20 + i);
  5961                           
  5962                           ; BSR set to: 0
  5963  00302A  5195               	movf	lerParametros@i& (0+255),w,b
  5964  00302C  0D01               	mullw	1
  5965  00302E  0EB0               	movlw	low _tel1
  5966  003030  24F3               	addwf	prodl,w,c
  5967  003032  6ED9               	movwf	fsr2l,c
  5968  003034  0E01               	movlw	high _tel1
  5969  003036  20F4               	addwfc	prodh,w,c
  5970  003038  6EDA               	movwf	fsr2h,c
  5971  00303A  5195               	movf	lerParametros@i& (0+255),w,b
  5972  00303C  0F14               	addlw	20
  5973  00303E  EC61  F03A         	call	_readEEPROM_ext
  5974  003042  6EDF               	movwf	indf2,c
  5975  003044  0100               	movlb	0	; () banked
  5976  003046  2B95               	incf	lerParametros@i& (0+255),f,b
  5977  003048  D7EA               	goto	l6890
  5978  00304A                     u7670:
  5979  00304A  FFFF               	dw	65535	; assembler added errata NOP
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;util.h: 35: }
  5983                           ;util.h: 36: for (i = 0; i < 11; i++) {
  5984                           
  5985                           ; BSR set to: 0
  5986  00304C  0E00               	movlw	0
  5987  00304E  6F95               	movwf	lerParametros@i& (0+255),b
  5988  003050                     l6902:
  5989  003050  FFFF               	dw	65535	; assembler added errata NOP
  5990                           
  5991                           ; BSR set to: 0
  5992  003052  0E0A               	movlw	10
  5993  003054  6595               	cpfsgt	lerParametros@i& (0+255),b
  5994  003056  D001               	goto	l605
  5995  003058  D011               	goto	u7690
  5996  00305A                     l605:
  5997  00305A  FFFF               	dw	65535	; assembler added errata NOP
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;util.h: 37: tel2[i] = readEEPROM_ext(40 + i);
  6001                           
  6002                           ; BSR set to: 0
  6003  00305C  5195               	movf	lerParametros@i& (0+255),w,b
  6004  00305E  0D01               	mullw	1
  6005  003060  0EA4               	movlw	low _tel2
  6006  003062  24F3               	addwf	prodl,w,c
  6007  003064  6ED9               	movwf	fsr2l,c
  6008  003066  0E01               	movlw	high _tel2
  6009  003068  20F4               	addwfc	prodh,w,c
  6010  00306A  6EDA               	movwf	fsr2h,c
  6011  00306C  5195               	movf	lerParametros@i& (0+255),w,b
  6012  00306E  0F28               	addlw	40
  6013  003070  EC61  F03A         	call	_readEEPROM_ext
  6014  003074  6EDF               	movwf	indf2,c
  6015  003076  0100               	movlb	0	; () banked
  6016  003078  2B95               	incf	lerParametros@i& (0+255),f,b
  6017  00307A  D7EA               	goto	l6902
  6018  00307C                     u7690:
  6019  00307C  FFFF               	dw	65535	; assembler added errata NOP
  6020                           
  6021                           ; BSR set to: 0
  6022                           
  6023                           ; BSR set to: 0
  6024  00307E  0012               	return		;funcret
  6025  003080  FFFF               	dw	65535	; errata NOP
  6026  003082                     __end_of_lerParametros:
  6027                           	opt stack 0
  6028                           tblptru	equ	0xFF8
  6029                           tblptrh	equ	0xFF7
  6030                           tblptrl	equ	0xFF6
  6031                           tablat	equ	0xFF5
  6032                           prodh	equ	0xFF4
  6033                           prodl	equ	0xFF3
  6034                           postinc0	equ	0xFEE
  6035                           wreg	equ	0xFE8
  6036                           postdec1	equ	0xFE5
  6037                           fsr1l	equ	0xFE1
  6038                           indf2	equ	0xFDF
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _readEEPROM16_ext *****************
  6044 ;; Defined at:
  6045 ;;		line 48 in file "eeprom.h"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  adress          1    wreg     unsigned char 
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;  adress          1   19[BANK0 ] unsigned char 
  6050 ;;  data            2   17[BANK0 ] unsigned int 
  6051 ;; Return value:  Size  Location     Type
  6052 ;;                  2   14[BANK0 ] unsigned int 
  6053 ;; Registers used:
  6054 ;;		wreg, status,2, status,0, cstack
  6055 ;; Tracked objects:
  6056 ;;		On entry : 0/0
  6057 ;;		On exit  : 0/0
  6058 ;;		Unchanged: 0/0
  6059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6060 ;;      Params:         0       2       0       0       0       0       0
  6061 ;;      Locals:         0       3       0       0       0       0       0
  6062 ;;      Temps:          0       1       0       0       0       0       0
  6063 ;;      Totals:         0       6       0       0       0       0       0
  6064 ;;Total ram usage:        6 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; Hardware stack levels required when called:    9
  6067 ;; This function calls:
  6068 ;;		_readEEPROM_ext
  6069 ;; This function is called by:
  6070 ;;		_lerParametros
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           	psect	text11
  6075  007064                     __ptext11:
  6076                           	opt stack 0
  6077  007064                     _readEEPROM16_ext:
  6078                           	opt stack 0
  6079  007064  FFFF               	dw	65535	; assembler added errata NOP
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;incstack = 0
  6083                           ;readEEPROM16_ext@adress stored from wreg
  6084  007066  0100               	movlb	0	; () banked
  6085  007068  6F93               	movwf	readEEPROM16_ext@adress& (0+255),b
  6086                           
  6087                           ;eeprom.h: 49: unsigned int data;
  6088                           ;eeprom.h: 50: data = readEEPROM_ext(adress + 1);
  6089  00706A  0100               	movlb	0	; () banked
  6090  00706C  2993               	incf	readEEPROM16_ext@adress& (0+255),w,b
  6091  00706E  EC61  F03A         	call	_readEEPROM_ext
  6092  007072  0100               	movlb	0	; () banked
  6093  007074  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  6094  007076  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  6095  007078  6F91               	movwf	readEEPROM16_ext@data& (0+255),b
  6096  00707A  6B92               	clrf	(readEEPROM16_ext@data+1)& (0+255),b
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;eeprom.h: 51: data <<= 8;
  6100  00707C  5191               	movf	readEEPROM16_ext@data& (0+255),w,b
  6101  00707E  6F92               	movwf	(readEEPROM16_ext@data+1)& (0+255),b
  6102  007080  6B91               	clrf	readEEPROM16_ext@data& (0+255),b
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;eeprom.h: 52: data |= readEEPROM_ext(adress);
  6106  007082  5193               	movf	readEEPROM16_ext@adress& (0+255),w,b
  6107  007084  EC61  F03A         	call	_readEEPROM_ext
  6108  007088  0100               	movlb	0	; () banked
  6109  00708A  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  6110  00708C  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  6111  00708E  1391               	iorwf	readEEPROM16_ext@data& (0+255),f,b
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;eeprom.h: 53: return data;
  6115  007090  C091  F08E         	movff	readEEPROM16_ext@data,?_readEEPROM16_ext
  6116  007094  C092  F08F         	movff	readEEPROM16_ext@data+1,?_readEEPROM16_ext+1
  6117                           
  6118                           ; BSR set to: 0
  6119                           
  6120                           ; BSR set to: 0
  6121  007098  0012               	return		;funcret
  6122  00709A  FFFF               	dw	65535	; errata NOP
  6123  00709C                     __end_of_readEEPROM16_ext:
  6124                           	opt stack 0
  6125                           tblptru	equ	0xFF8
  6126                           tblptrh	equ	0xFF7
  6127                           tblptrl	equ	0xFF6
  6128                           tablat	equ	0xFF5
  6129                           prodh	equ	0xFF4
  6130                           prodl	equ	0xFF3
  6131                           postinc0	equ	0xFEE
  6132                           wreg	equ	0xFE8
  6133                           postdec1	equ	0xFE5
  6134                           fsr1l	equ	0xFE1
  6135                           indf2	equ	0xFDF
  6136                           fsr2h	equ	0xFDA
  6137                           fsr2l	equ	0xFD9
  6138                           status	equ	0xFD8
  6139                           
  6140 ;; *************** function _informacoes *****************
  6141 ;; Defined at:
  6142 ;;		line 7 in file "tela_INFORMACOES.h"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;		None
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;		None
  6147 ;; Return value:  Size  Location     Type
  6148 ;;                  1    wreg      void 
  6149 ;; Registers used:
  6150 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6156 ;;      Params:         0       0       0       0       0       0       0
  6157 ;;      Locals:         0       0       0       0       0       0       0
  6158 ;;      Temps:          0       0       0       0       0       0       0
  6159 ;;      Totals:         0       0       0       0       0       0       0
  6160 ;;Total ram usage:        0 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:    9
  6163 ;; This function calls:
  6164 ;;		_btPress
  6165 ;;		_sprintf
  6166 ;; This function is called by:
  6167 ;;		_main
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           	psect	text12
  6172  007776                     __ptext12:
  6173                           	opt stack 0
  6174  007776                     _informacoes:
  6175                           	opt stack 0
  6176  007776  FFFF               	dw	65535	; assembler added errata NOP
  6177                           
  6178                           ;tela_INFORMACOES.h: 8: sprintf(line1, "TECHNOW");
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;incstack = 0
  6182  007778  0E7B               	movlw	low _line1
  6183  00777A  0100               	movlb	0	; () banked
  6184  00777C  6FA1               	movwf	sprintf@wh& (0+255),b
  6185  00777E  0E01               	movlw	high _line1
  6186  007780  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6187  007782  0E9B               	movlw	low STR_86
  6188  007784  6FA3               	movwf	sprintf@f& (0+255),b
  6189  007786  0E7F               	movlw	high STR_86
  6190  007788  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6191  00778A  ECC9  F039         	call	_sprintf	;wreg free
  6192                           
  6193                           ;tela_INFORMACOES.h: 9: sprintf(line2, "Sistemas embarcados");
  6194  00778E  0E66               	movlw	low _line2
  6195  007790  0100               	movlb	0	; () banked
  6196  007792  6FA1               	movwf	sprintf@wh& (0+255),b
  6197  007794  0E01               	movlw	high _line2
  6198  007796  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6199  007798  0ED8               	movlw	low STR_87
  6200  00779A  6FA3               	movwf	sprintf@f& (0+255),b
  6201  00779C  0E7C               	movlw	high STR_87
  6202  00779E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6203  0077A0  ECC9  F039         	call	_sprintf	;wreg free
  6204                           
  6205                           ;tela_INFORMACOES.h: 10: sprintf(line3, "   48 99906-5651");
  6206  0077A4  0E51               	movlw	low _line3
  6207  0077A6  0100               	movlb	0	; () banked
  6208  0077A8  6FA1               	movwf	sprintf@wh& (0+255),b
  6209  0077AA  0E01               	movlw	high _line3
  6210  0077AC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6211  0077AE  0EB8               	movlw	low STR_88
  6212  0077B0  6FA3               	movwf	sprintf@f& (0+255),b
  6213  0077B2  0E7D               	movlw	high STR_88
  6214  0077B4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6215  0077B6  ECC9  F039         	call	_sprintf	;wreg free
  6216                           
  6217                           ;tela_INFORMACOES.h: 11: sprintf(line4, "versao - %s", "Aug 25 2019");
  6218  0077BA  0E3C               	movlw	low _line4
  6219  0077BC  0100               	movlb	0	; () banked
  6220  0077BE  6FA1               	movwf	sprintf@wh& (0+255),b
  6221  0077C0  0E01               	movlw	high _line4
  6222  0077C2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6223  0077C4  0E09               	movlw	low STR_89
  6224  0077C6  6FA3               	movwf	sprintf@f& (0+255),b
  6225  0077C8  0E7F               	movlw	high STR_89
  6226  0077CA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6227  0077CC  0EE5               	movlw	low STR_15
  6228  0077CE  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6229  0077D0  0E7E               	movlw	high STR_15
  6230  0077D2  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6231  0077D4  ECC9  F039         	call	_sprintf	;wreg free
  6232                           
  6233                           ;tela_INFORMACOES.h: 12: if (btPress(1)) {
  6234  0077D8  0E01               	movlw	1
  6235  0077DA  EC4A  F03B         	call	_btPress
  6236  0077DE  0900               	iorlw	0
  6237  0077E0  A4D8               	btfss	status,2,c
  6238                           
  6239                           ;tela_INFORMACOES.h: 13: menu_posi = _menu_posi;
  6240  0077E2  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  6241  0077E6  0012               	return		;funcret
  6242  0077E8  FFFF               	dw	65535	; errata NOP
  6243  0077EA                     __end_of_informacoes:
  6244                           	opt stack 0
  6245                           tblptru	equ	0xFF8
  6246                           tblptrh	equ	0xFF7
  6247                           tblptrl	equ	0xFF6
  6248                           tablat	equ	0xFF5
  6249                           prodh	equ	0xFF4
  6250                           prodl	equ	0xFF3
  6251                           postinc0	equ	0xFEE
  6252                           wreg	equ	0xFE8
  6253                           postdec1	equ	0xFE5
  6254                           fsr1l	equ	0xFE1
  6255                           indf2	equ	0xFDF
  6256                           fsr2h	equ	0xFDA
  6257                           fsr2l	equ	0xFD9
  6258                           status	equ	0xFD8
  6259                           
  6260 ;; *************** function _getSinalSIM800L *****************
  6261 ;; Defined at:
  6262 ;;		line 13 in file "comunicacao.h"
  6263 ;; Parameters:    Size  Location     Type
  6264 ;;		None
  6265 ;; Auto vars:     Size  Location     Type
  6266 ;;  sinal           2   72[BANK0 ] int 
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  1    wreg      void 
  6269 ;; Registers used:
  6270 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6276 ;;      Params:         0       0       0       0       0       0       0
  6277 ;;      Locals:         0       2       0       0       0       0       0
  6278 ;;      Temps:          0       2       0       0       0       0       0
  6279 ;;      Totals:         0       4       0       0       0       0       0
  6280 ;;Total ram usage:        4 bytes
  6281 ;; Hardware stack levels used:    1
  6282 ;; Hardware stack levels required when called:   10
  6283 ;; This function calls:
  6284 ;;		_aguardaBuffer
  6285 ;;		_atoi
  6286 ;;		_delay
  6287 ;;		_getSerial
  6288 ;;		_limparBuffer
  6289 ;;		_printf
  6290 ;;		_writeChar
  6291 ;; This function is called by:
  6292 ;;		_main
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           	psect	text13
  6297  002996                     __ptext13:
  6298                           	opt stack 0
  6299  002996                     _getSinalSIM800L:
  6300                           	opt stack 0
  6301  002996  FFFF               	dw	65535	; assembler added errata NOP
  6302                           
  6303                           ;comunicacao.h: 14: if (!timerVerificarSinal) {
  6304                           
  6305                           ;incstack = 0
  6306  002998  0100               	movlb	0	; () banked
  6307  00299A  51FE               	movf	_timerVerificarSinal& (0+255),w,b
  6308  00299C  A4D8               	btfss	status,2,c
  6309  00299E  D0CB               	goto	l304
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;comunicacao.h: 15: if (!gsmOcupado) {
  6313  0029A0  51F4               	movf	_gsmOcupado& (0+255),w,b
  6314  0029A2  B4D8               	btfsc	status,2,c
  6315  0029A4  D0B7               	goto	l302
  6316  0029A6  D0C7               	goto	l304
  6317  0029A8  FFFF               	dw	65535	; assembler added errata NOP
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;comunicacao.h: 18: limparBuffer();
  6321                           
  6322                           ; BSR set to: 0
  6323  0029AA  ECE0  F037         	call	_limparBuffer	;wreg free
  6324                           
  6325                           ;comunicacao.h: 19: printf("AT+CSQ\r\n");
  6326  0029AE  0E89               	movlw	low STR_3
  6327  0029B0  0100               	movlb	0	; () banked
  6328  0029B2  6FA1               	movwf	printf@f& (0+255),b
  6329  0029B4  0E7F               	movlw	high STR_3
  6330  0029B6  6FA2               	movwf	(printf@f+1)& (0+255),b
  6331  0029B8  ECC4  F038         	call	_printf	;wreg free
  6332                           
  6333                           ;comunicacao.h: 20: timerEtapaComunicacao = 10;
  6334  0029BC  0E0A               	movlw	10
  6335  0029BE  0100               	movlb	0	; () banked
  6336  0029C0  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;comunicacao.h: 21: etapaComunicacao = 1;
  6340  0029C2  0E00               	movlw	0
  6341  0029C4  6E52               	movwf	_etapaComunicacao+1,c
  6342  0029C6  0E01               	movlw	1
  6343  0029C8  D0A2               	goto	L10
  6344  0029CA  FFFF               	dw	65535	; assembler added errata NOP
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;comunicacao.h: 24: if (!timerEtapaComunicacao) {
  6348                           
  6349                           ; BSR set to: 0
  6350  0029CC  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  6351  0029CE  A4D8               	btfss	status,2,c
  6352  0029D0  D02B               	goto	l308
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;comunicacao.h: 25: printf("AT\r\n");
  6356  0029D2  0EDE               	movlw	low STR_4
  6357  0029D4  6FA1               	movwf	printf@f& (0+255),b
  6358  0029D6  0E7F               	movlw	high STR_4
  6359  0029D8  6FA2               	movwf	(printf@f+1)& (0+255),b
  6360  0029DA  ECC4  F038         	call	_printf	;wreg free
  6361                           
  6362                           ;comunicacao.h: 26: delay(100);
  6363  0029DE  0E00               	movlw	0
  6364  0029E0  0100               	movlb	0	; () banked
  6365  0029E2  6F81               	movwf	(delay@x+1)& (0+255),b
  6366  0029E4  0E64               	movlw	100
  6367  0029E6  6F80               	movwf	delay@x& (0+255),b
  6368  0029E8  ECC5  F037         	call	_delay	;wreg free
  6369                           
  6370                           ;comunicacao.h: 27: if (aguardaBuffer("OK")) {
  6371  0029EC  0EFA               	movlw	low STR_5
  6372  0029EE  0100               	movlb	0	; () banked
  6373  0029F0  6F93               	movwf	aguardaBuffer@str& (0+255),b
  6374  0029F2  0E7F               	movlw	high STR_5
  6375  0029F4  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  6376  0029F6  ECA6  F038         	call	_aguardaBuffer	;wreg free
  6377  0029FA  0900               	iorlw	0
  6378  0029FC  B4D8               	btfsc	status,2,c
  6379  0029FE  D005               	goto	l307
  6380                           
  6381                           ;comunicacao.h: 28: etapaComunicacao = 0;
  6382  002A00  0E00               	movlw	0
  6383  002A02  6E52               	movwf	_etapaComunicacao+1,c
  6384  002A04  0E00               	movlw	0
  6385  002A06  6E51               	movwf	_etapaComunicacao,c
  6386                           
  6387                           ;comunicacao.h: 29: } else {
  6388  002A08  D00F               	goto	l308
  6389  002A0A                     l307:
  6390  002A0A  FFFF               	dw	65535	; assembler added errata NOP
  6391                           
  6392                           ;comunicacao.h: 30: etapaComunicacao = 0;
  6393  002A0C  0E00               	movlw	0
  6394  002A0E  6E52               	movwf	_etapaComunicacao+1,c
  6395  002A10  0E00               	movlw	0
  6396  002A12  6E51               	movwf	_etapaComunicacao,c
  6397                           
  6398                           ;comunicacao.h: 31: writeChar(0x1A);
  6399  002A14  0E1A               	movlw	26
  6400  002A16  0100               	movlb	0	; () banked
  6401  002A18  6F80               	movwf	writeChar@hex& (0+255),b
  6402  002A1A  0E00               	movlw	0
  6403  002A1C  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  6404  002A1E  EC86  F036         	call	_writeChar	;wreg free
  6405                           
  6406                           ;comunicacao.h: 32: intensidadeSinal = 'x';
  6407  002A22  0E78               	movlw	120
  6408  002A24  0100               	movlb	0	; () banked
  6409  002A26  6FFF               	movwf	_intensidadeSinal& (0+255),b
  6410  002A28                     l308:
  6411  002A28  FFFF               	dw	65535	; assembler added errata NOP
  6412                           
  6413                           ;comunicacao.h: 33: }
  6414                           ;comunicacao.h: 34: }
  6415                           ;comunicacao.h: 35: if (aguardaBuffer("+CSQ: ")) {
  6416                           
  6417                           ; BSR set to: 0
  6418                           
  6419                           ; BSR set to: 0
  6420  002A2A  0EB1               	movlw	low STR_6
  6421  002A2C  0100               	movlb	0	; () banked
  6422  002A2E  6F93               	movwf	aguardaBuffer@str& (0+255),b
  6423  002A30  0E7F               	movlw	high STR_6
  6424  002A32  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  6425  002A34  ECA6  F038         	call	_aguardaBuffer	;wreg free
  6426  002A38  0900               	iorlw	0
  6427  002A3A  B4D8               	btfsc	status,2,c
  6428  002A3C  D07C               	goto	l304
  6429                           
  6430                           ;comunicacao.h: 36: int sinal = atoi(getSerial("+CSQ: ", ','));
  6431  002A3E  0EB1               	movlw	low STR_6
  6432  002A40  0100               	movlb	0	; () banked
  6433  002A42  6FB5               	movwf	getSerial@str& (0+255),b
  6434  002A44  0E7F               	movlw	high STR_6
  6435  002A46  6FB6               	movwf	(getSerial@str+1)& (0+255),b
  6436  002A48  0E2C               	movlw	44
  6437  002A4A  6FB7               	movwf	getSerial@end& (0+255),b
  6438  002A4C  ECD2  F018         	call	_getSerial	;wreg free
  6439  002A50  C0B5  F0BF         	movff	?_getSerial,atoi@s
  6440  002A54  C0B6  F0C0         	movff	?_getSerial+1,atoi@s+1
  6441  002A58  ECEE  F01A         	call	_atoi	;wreg free
  6442  002A5C  C0BF  F0C8         	movff	?_atoi,getSinalSIM800L@sinal
  6443  002A60  C0C0  F0C9         	movff	?_atoi+1,getSinalSIM800L@sinal+1
  6444                           
  6445                           ;comunicacao.h: 37: if (sinal < 10) {
  6446  002A64  0100               	movlb	0	; () banked
  6447  002A66  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6448  002A68  D006               	goto	u6880
  6449  002A6A  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6450  002A6C  E108               	bnz	l6468
  6451  002A6E  0E0A               	movlw	10
  6452  002A70  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6453  002A72  B0D8               	btfsc	status,0,c
  6454  002A74  D003               	goto	l310
  6455  002A76                     u6880:
  6456  002A76  FFFF               	dw	65535	; assembler added errata NOP
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;comunicacao.h: 38: intensidadeSinal = ' ';
  6460  002A78  0E20               	movlw	32
  6461  002A7A  D03B               	goto	L13
  6462  002A7C                     l310:
  6463  002A7C  FFFF               	dw	65535	; assembler added errata NOP
  6464  002A7E                     l6468:
  6465                           
  6466                           ; BSR set to: 0
  6467  002A7E  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6468  002A80  D011               	goto	l312
  6469  002A82  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6470  002A84  E104               	bnz	u6890
  6471  002A86  0E0A               	movlw	10
  6472  002A88  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6473  002A8A  A0D8               	btfss	status,0,c
  6474  002A8C  D00B               	goto	l312
  6475  002A8E                     u6890:
  6476                           
  6477                           ; BSR set to: 0
  6478  002A8E  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6479  002A90  D006               	goto	u6900
  6480  002A92  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6481  002A94  E108               	bnz	l6474
  6482  002A96  0E0F               	movlw	15
  6483  002A98  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6484  002A9A  B0D8               	btfsc	status,0,c
  6485  002A9C  D003               	goto	l312
  6486  002A9E                     u6900:
  6487  002A9E  FFFF               	dw	65535	; assembler added errata NOP
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;comunicacao.h: 40: intensidadeSinal = 0x02;
  6491  002AA0  0E02               	movlw	2
  6492  002AA2  D027               	goto	L13
  6493  002AA4                     l312:
  6494  002AA4  FFFF               	dw	65535	; assembler added errata NOP
  6495  002AA6                     l6474:
  6496                           
  6497                           ; BSR set to: 0
  6498  002AA6  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6499  002AA8  D011               	goto	l314
  6500  002AAA  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6501  002AAC  E104               	bnz	u6910
  6502  002AAE  0E10               	movlw	16
  6503  002AB0  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6504  002AB2  A0D8               	btfss	status,0,c
  6505  002AB4  D00B               	goto	l314
  6506  002AB6                     u6910:
  6507                           
  6508                           ; BSR set to: 0
  6509  002AB6  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6510  002AB8  D006               	goto	u6920
  6511  002ABA  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6512  002ABC  E108               	bnz	l6480
  6513  002ABE  0E14               	movlw	20
  6514  002AC0  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6515  002AC2  B0D8               	btfsc	status,0,c
  6516  002AC4  D003               	goto	l314
  6517  002AC6                     u6920:
  6518  002AC6  FFFF               	dw	65535	; assembler added errata NOP
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;comunicacao.h: 42: intensidadeSinal = 0x03;
  6522  002AC8  0E03               	movlw	3
  6523  002ACA  D013               	goto	L13
  6524  002ACC                     l314:
  6525  002ACC  FFFF               	dw	65535	; assembler added errata NOP
  6526  002ACE                     l6480:
  6527                           
  6528                           ; BSR set to: 0
  6529  002ACE  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6530  002AD0  D012               	goto	l316
  6531  002AD2  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6532  002AD4  E104               	bnz	u6930
  6533  002AD6  0E14               	movlw	20
  6534  002AD8  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6535  002ADA  A0D8               	btfss	status,0,c
  6536  002ADC  D00C               	goto	l316
  6537  002ADE                     u6930:
  6538                           
  6539                           ; BSR set to: 0
  6540  002ADE  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6541  002AE0  D006               	goto	u6940
  6542  002AE2  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6543  002AE4  E109               	bnz	l311
  6544  002AE6  0E1F               	movlw	31
  6545  002AE8  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6546  002AEA  B0D8               	btfsc	status,0,c
  6547  002AEC  D004               	goto	l316
  6548  002AEE                     u6940:
  6549  002AEE  FFFF               	dw	65535	; assembler added errata NOP
  6550                           
  6551                           ; BSR set to: 0
  6552                           ;comunicacao.h: 44: intensidadeSinal = 0x04;
  6553  002AF0  0E04               	movlw	4
  6554  002AF2                     L13:
  6555  002AF2  FFFF               	dw	65535	; assembler added errata NOP
  6556  002AF4  6FFF               	movwf	_intensidadeSinal& (0+255),b
  6557  002AF6                     l316:
  6558  002AF6  FFFF               	dw	65535	; assembler added errata NOP
  6559  002AF8                     l311:
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;comunicacao.h: 45: }
  6563                           ;comunicacao.h: 46: etapaComunicacao = 0;
  6564  002AF8  0E00               	movlw	0
  6565  002AFA  6E52               	movwf	_etapaComunicacao+1,c
  6566  002AFC  0E00               	movlw	0
  6567  002AFE  6E51               	movwf	_etapaComunicacao,c
  6568                           
  6569                           ;comunicacao.h: 47: timerVerificarSinal = 6;
  6570  002B00  0E06               	movlw	6
  6571  002B02  6FFE               	movwf	_timerVerificarSinal& (0+255),b
  6572                           
  6573                           ; BSR set to: 0
  6574                           ;comunicacao.h: 48: }
  6575                           ;comunicacao.h: 49: break;
  6576  002B04  D018               	goto	l304
  6577  002B06  FFFF               	dw	65535	; assembler added errata NOP
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;comunicacao.h: 51: etapaComunicacao = 0;
  6581                           
  6582                           ; BSR set to: 0
  6583  002B08  0E00               	movlw	0
  6584  002B0A  6E52               	movwf	_etapaComunicacao+1,c
  6585  002B0C  0E00               	movlw	0
  6586  002B0E                     L10:
  6587  002B0E  FFFF               	dw	65535	; assembler added errata NOP
  6588  002B10  6E51               	movwf	_etapaComunicacao,c
  6589                           
  6590                           ;comunicacao.h: 52: }
  6591  002B12  D011               	goto	l304
  6592  002B14                     l302:
  6593  002B14  FFFF               	dw	65535	; assembler added errata NOP
  6594                           
  6595                           ; BSR set to: 0
  6596                           
  6597                           ; BSR set to: 0
  6598  002B16  C051  F0C6         	movff	_etapaComunicacao,??_getSinalSIM800L
  6599  002B1A  C052  F0C7         	movff	_etapaComunicacao+1,??_getSinalSIM800L+1
  6600                           
  6601                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6602                           ; Switch size 1, requested type "space"
  6603                           ; Number of cases is 1, Range of values is 0 to 0
  6604                           ; switch strategies available:
  6605                           ; Name         Instructions Cycles
  6606                           ; simple_byte            4     3 (average)
  6607                           ;	Chosen strategy is simple_byte
  6608  002B1E  51C7               	movf	(??_getSinalSIM800L+1)& (0+255),w,b
  6609  002B20  0A00               	xorlw	0	; case 0
  6610  002B22  A4D8               	btfss	status,2,c
  6611  002B24  D7F0               	goto	l317
  6612                           
  6613                           ; BSR set to: 0
  6614                           ; Switch size 1, requested type "space"
  6615                           ; Number of cases is 2, Range of values is 0 to 1
  6616                           ; switch strategies available:
  6617                           ; Name         Instructions Cycles
  6618                           ; simple_byte            7     4 (average)
  6619                           ;	Chosen strategy is simple_byte
  6620  002B26  51C6               	movf	??_getSinalSIM800L& (0+255),w,b
  6621  002B28  0A00               	xorlw	0	; case 0
  6622  002B2A  B4D8               	btfsc	status,2,c
  6623  002B2C  D73D               	goto	l303
  6624  002B2E  0A01               	xorlw	1	; case 1
  6625  002B30  B4D8               	btfsc	status,2,c
  6626  002B32  D74B               	goto	l305
  6627  002B34  D7E8               	goto	l317
  6628  002B36                     l304:
  6629  002B36  FFFF               	dw	65535	; assembler added errata NOP
  6630                           
  6631                           ; BSR set to: 0
  6632                           
  6633                           ; BSR set to: 0
  6634                           
  6635                           ; BSR set to: 0
  6636  002B38  0012               	return		;funcret
  6637  002B3A  FFFF               	dw	65535	; errata NOP
  6638  002B3C                     __end_of_getSinalSIM800L:
  6639                           	opt stack 0
  6640                           tblptru	equ	0xFF8
  6641                           tblptrh	equ	0xFF7
  6642                           tblptrl	equ	0xFF6
  6643                           tablat	equ	0xFF5
  6644                           prodh	equ	0xFF4
  6645                           prodl	equ	0xFF3
  6646                           postinc0	equ	0xFEE
  6647                           wreg	equ	0xFE8
  6648                           postdec1	equ	0xFE5
  6649                           fsr1l	equ	0xFE1
  6650                           indf2	equ	0xFDF
  6651                           fsr2h	equ	0xFDA
  6652                           fsr2l	equ	0xFD9
  6653                           status	equ	0xFD8
  6654                           
  6655 ;; *************** function _getSerial *****************
  6656 ;; Defined at:
  6657 ;;		line 40 in file "serial.h"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  str             2   53[BANK0 ] PTR unsigned char 
  6660 ;;		 -> STR_7(7), 
  6661 ;;  end             1   55[BANK0 ] unsigned char 
  6662 ;; Auto vars:     Size  Location     Type
  6663 ;;  i               1   60[BANK0 ] unsigned char 
  6664 ;;  ret             2   61[BANK0 ] PTR unsigned char 
  6665 ;;		 -> NULL(0), bufferSerial(60), 
  6666 ;;  length          2   58[BANK0 ] unsigned int 
  6667 ;; Return value:  Size  Location     Type
  6668 ;;                  2   53[BANK0 ] PTR unsigned char 
  6669 ;; Registers used:
  6670 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6676 ;;      Params:         0       3       0       0       0       0       0
  6677 ;;      Locals:         0       5       0       0       0       0       0
  6678 ;;      Temps:          0       2       0       0       0       0       0
  6679 ;;      Totals:         0      10       0       0       0       0       0
  6680 ;;Total ram usage:       10 bytes
  6681 ;; Hardware stack levels used:    1
  6682 ;; Hardware stack levels required when called:    9
  6683 ;; This function calls:
  6684 ;;		_memset
  6685 ;;		_sprintf
  6686 ;;		_strlen
  6687 ;;		_strstr
  6688 ;; This function is called by:
  6689 ;;		_getSinalSIM800L
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           	psect	text14
  6694  0031A4                     __ptext14:
  6695                           	opt stack 0
  6696  0031A4                     _getSerial:
  6697                           	opt stack 0
  6698  0031A4  FFFF               	dw	65535	; assembler added errata NOP
  6699                           
  6700                           ;serial.h: 41: memset(bufferAUX, 0, sizeof (bufferAUX));
  6701                           
  6702                           ;incstack = 0
  6703  0031A6  0E90               	movlw	low _bufferAUX
  6704  0031A8  0100               	movlb	0	; () banked
  6705  0031AA  6F80               	movwf	memset@p1& (0+255),b
  6706  0031AC  0E01               	movlw	high _bufferAUX
  6707  0031AE  6F81               	movwf	(memset@p1+1)& (0+255),b
  6708  0031B0  0E00               	movlw	0
  6709  0031B2  6F83               	movwf	(memset@c+1)& (0+255),b
  6710  0031B4  0E00               	movlw	0
  6711  0031B6  6F82               	movwf	memset@c& (0+255),b
  6712  0031B8  0E00               	movlw	0
  6713  0031BA  6F85               	movwf	(memset@n+1)& (0+255),b
  6714  0031BC  0E14               	movlw	20
  6715  0031BE  6F84               	movwf	memset@n& (0+255),b
  6716  0031C0  EC4E  F038         	call	_memset	;wreg free
  6717                           
  6718                           ;serial.h: 42: unsigned int length = strlen(str);
  6719  0031C4  C0B5  F080         	movff	getSerial@str,strlen@s
  6720  0031C8  C0B6  F081         	movff	getSerial@str+1,strlen@s+1
  6721  0031CC  ECB7  F03A         	call	_strlen	;wreg free
  6722  0031D0  C080  F0BA         	movff	?_strlen,getSerial@length
  6723  0031D4  C081  F0BB         	movff	?_strlen+1,getSerial@length+1
  6724                           
  6725                           ;serial.h: 43: char* ret;
  6726                           ;serial.h: 44: ret = strstr(bufferSerial, str);
  6727  0031D8  0E00               	movlw	low _bufferSerial
  6728  0031DA  0100               	movlb	0	; () banked
  6729  0031DC  6F8F               	movwf	strstr@s1& (0+255),b
  6730  0031DE  0E01               	movlw	high _bufferSerial
  6731  0031E0  6F90               	movwf	(strstr@s1+1)& (0+255),b
  6732  0031E2  C0B5  F091         	movff	getSerial@str,strstr@s2
  6733  0031E6  C0B6  F092         	movff	getSerial@str+1,strstr@s2+1
  6734  0031EA  EC97  F01F         	call	_strstr	;wreg free
  6735  0031EE  C08F  F0BD         	movff	?_strstr,getSerial@ret
  6736  0031F2  C090  F0BE         	movff	?_strstr+1,getSerial@ret+1
  6737                           
  6738                           ;serial.h: 45: if (ret) {
  6739  0031F6  0100               	movlb	0	; () banked
  6740  0031F8  51BD               	movf	getSerial@ret& (0+255),w,b
  6741  0031FA  11BE               	iorwf	(getSerial@ret+1)& (0+255),w,b
  6742  0031FC  B4D8               	btfsc	status,2,c
  6743  0031FE  D058               	goto	u5610
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;serial.h: 46: unsigned char i = 0;
  6747  003200  0E00               	movlw	0
  6748  003202  6FBC               	movwf	getSerial@i& (0+255),b
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;serial.h: 47: for (i = length; i < strlen(ret); i++) {
  6752  003204  C0BA  F0BC         	movff	getSerial@length,getSerial@i
  6753  003208  D042               	goto	l267
  6754  00320A  FFFF               	dw	65535	; assembler added errata NOP
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;serial.h: 48: if (ret[i] == end) {
  6758                           
  6759                           ; BSR set to: 0
  6760  00320C  51BC               	movf	getSerial@i& (0+255),w,b
  6761  00320E  0D01               	mullw	1
  6762  003210  50F3               	movf	prodl,w,c
  6763  003212  25BD               	addwf	getSerial@ret& (0+255),w,b
  6764  003214  6ED9               	movwf	fsr2l,c
  6765  003216  50F4               	movf	prodh,w,c
  6766  003218  21BE               	addwfc	(getSerial@ret+1)& (0+255),w,b
  6767  00321A  6EDA               	movwf	fsr2h,c
  6768  00321C  51B7               	movf	getSerial@end& (0+255),w,b
  6769  00321E  18DE               	xorwf	postinc2,w,c
  6770  003220  A4D8               	btfss	status,2,c
  6771  003222  D017               	goto	l269
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;serial.h: 49: sprintf(bufferAUX, "%s%c", bufferAUX, '\0');
  6775  003224  0E90               	movlw	low _bufferAUX
  6776  003226  6FA1               	movwf	sprintf@wh& (0+255),b
  6777  003228  0E01               	movlw	high _bufferAUX
  6778  00322A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6779  00322C  0EE8               	movlw	low STR_1
  6780  00322E  6FA3               	movwf	sprintf@f& (0+255),b
  6781  003230  0E7F               	movlw	high STR_1
  6782  003232  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6783  003234  0E90               	movlw	low _bufferAUX
  6784  003236  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6785  003238  0E01               	movlw	high _bufferAUX
  6786  00323A  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6787  00323C  0E00               	movlw	0
  6788  00323E  6FA8               	movwf	(?_sprintf+7)& (0+255),b
  6789  003240  0E00               	movlw	0
  6790  003242  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  6791  003244  ECC9  F039         	call	_sprintf	;wreg free
  6792                           
  6793                           ;serial.h: 50: return bufferAUX;
  6794  003248  0E90               	movlw	low _bufferAUX
  6795  00324A  0100               	movlb	0	; () banked
  6796  00324C  6FB5               	movwf	?_getSerial& (0+255),b
  6797  00324E  0E01               	movlw	high _bufferAUX
  6798  003250  D033               	goto	L14
  6799  003252                     l269:
  6800  003252  FFFF               	dw	65535	; assembler added errata NOP
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;serial.h: 51: }
  6804                           ;serial.h: 52: sprintf(bufferAUX, "%s%c", bufferAUX, ret[i]);
  6805                           
  6806                           ; BSR set to: 0
  6807  003254  0E90               	movlw	low _bufferAUX
  6808  003256  6FA1               	movwf	sprintf@wh& (0+255),b
  6809  003258  0E01               	movlw	high _bufferAUX
  6810  00325A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6811  00325C  0EE8               	movlw	low STR_1
  6812  00325E  6FA3               	movwf	sprintf@f& (0+255),b
  6813  003260  0E7F               	movlw	high STR_1
  6814  003262  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6815  003264  0E90               	movlw	low _bufferAUX
  6816  003266  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6817  003268  0E01               	movlw	high _bufferAUX
  6818  00326A  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6819  00326C  51BC               	movf	getSerial@i& (0+255),w,b
  6820  00326E  0D01               	mullw	1
  6821  003270  50F3               	movf	prodl,w,c
  6822  003272  25BD               	addwf	getSerial@ret& (0+255),w,b
  6823  003274  6ED9               	movwf	fsr2l,c
  6824  003276  50F4               	movf	prodh,w,c
  6825  003278  21BE               	addwfc	(getSerial@ret+1)& (0+255),w,b
  6826  00327A  6EDA               	movwf	fsr2h,c
  6827  00327C  50DF               	movf	indf2,w,c
  6828  00327E  6FB8               	movwf	??_getSerial& (0+255),b
  6829  003280  51B8               	movf	??_getSerial& (0+255),w,b
  6830  003282  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  6831  003284  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  6832  003286  ECC9  F039         	call	_sprintf	;wreg free
  6833  00328A  0100               	movlb	0	; () banked
  6834  00328C  2BBC               	incf	getSerial@i& (0+255),f,b
  6835  00328E                     l267:
  6836  00328E  FFFF               	dw	65535	; assembler added errata NOP
  6837                           
  6838                           ; BSR set to: 0
  6839                           
  6840                           ; BSR set to: 0
  6841  003290  C0BD  F080         	movff	getSerial@ret,strlen@s
  6842  003294  C0BE  F081         	movff	getSerial@ret+1,strlen@s+1
  6843  003298  ECB7  F03A         	call	_strlen	;wreg free
  6844  00329C  0100               	movlb	0	; () banked
  6845  00329E  51BC               	movf	getSerial@i& (0+255),w,b
  6846  0032A0  6FB8               	movwf	??_getSerial& (0+255),b
  6847  0032A2  6BB9               	clrf	(??_getSerial+1)& (0+255),b
  6848  0032A4  5180               	movf	?_strlen& (0+255),w,b
  6849  0032A6  5DB8               	subwf	??_getSerial& (0+255),w,b
  6850  0032A8  5181               	movf	(?_strlen+1)& (0+255),w,b
  6851  0032AA  59B9               	subwfb	(??_getSerial+1)& (0+255),w,b
  6852  0032AC  A0D8               	btfss	status,0,c
  6853  0032AE  D7AD               	goto	l268
  6854  0032B0                     u5610:
  6855  0032B0  FFFF               	dw	65535	; assembler added errata NOP
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;serial.h: 53: }
  6859                           ;serial.h: 54: }
  6860                           ;serial.h: 55: return 0;
  6861                           
  6862                           ; BSR set to: 0
  6863                           
  6864                           ; BSR set to: 0
  6865  0032B2  0E00               	movlw	0
  6866  0032B4  6FB5               	movwf	?_getSerial& (0+255),b
  6867  0032B6  0E00               	movlw	0
  6868  0032B8                     L14:
  6869  0032B8  FFFF               	dw	65535	; assembler added errata NOP
  6870  0032BA  6FB6               	movwf	(?_getSerial+1)& (0+255),b
  6871                           
  6872                           ; BSR set to: 0
  6873                           
  6874                           ; BSR set to: 0
  6875  0032BC  0012               	return		;funcret
  6876  0032BE  FFFF               	dw	65535	; errata NOP
  6877  0032C0                     __end_of_getSerial:
  6878                           	opt stack 0
  6879                           tblptru	equ	0xFF8
  6880                           tblptrh	equ	0xFF7
  6881                           tblptrl	equ	0xFF6
  6882                           tablat	equ	0xFF5
  6883                           prodh	equ	0xFF4
  6884                           prodl	equ	0xFF3
  6885                           postinc0	equ	0xFEE
  6886                           wreg	equ	0xFE8
  6887                           postdec1	equ	0xFE5
  6888                           fsr1l	equ	0xFE1
  6889                           indf2	equ	0xFDF
  6890                           postinc2	equ	0xFDE
  6891                           fsr2h	equ	0xFDA
  6892                           fsr2l	equ	0xFD9
  6893                           status	equ	0xFD8
  6894                           
  6895 ;; *************** function _atoi *****************
  6896 ;; Defined at:
  6897 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;  s               2   63[BANK0 ] PTR const unsigned char 
  6900 ;;		 -> bufferAUX(20), NULL(0), 
  6901 ;; Auto vars:     Size  Location     Type
  6902 ;;  a               2   68[BANK0 ] int 
  6903 ;;  sign            1   67[BANK0 ] unsigned char 
  6904 ;; Return value:  Size  Location     Type
  6905 ;;                  2   63[BANK0 ] int 
  6906 ;; Registers used:
  6907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6913 ;;      Params:         0       2       0       0       0       0       0
  6914 ;;      Locals:         0       3       0       0       0       0       0
  6915 ;;      Temps:          0       2       0       0       0       0       0
  6916 ;;      Totals:         0       7       0       0       0       0       0
  6917 ;;Total ram usage:        7 bytes
  6918 ;; Hardware stack levels used:    1
  6919 ;; Hardware stack levels required when called:    7
  6920 ;; This function calls:
  6921 ;;		___wmul
  6922 ;;		_isdigit
  6923 ;; This function is called by:
  6924 ;;		_getSinalSIM800L
  6925 ;; This function uses a non-reentrant model
  6926 ;;
  6927                           
  6928                           	psect	text15
  6929  0035DC                     __ptext15:
  6930                           	opt stack 0
  6931  0035DC                     _atoi:
  6932                           	opt stack 0
  6933  0035DC  FFFF               	dw	65535	; assembler added errata NOP
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;incstack = 0
  6937  0035DE  D004               	goto	l1270
  6938  0035E0  FFFF               	dw	65535	; assembler added errata NOP
  6939  0035E2  0100               	movlb	0	; () banked
  6940  0035E4  4BBF               	infsnz	atoi@s& (0+255),f,b
  6941  0035E6  2BC0               	incf	(atoi@s+1)& (0+255),f,b
  6942  0035E8                     l1270:
  6943  0035E8  FFFF               	dw	65535	; assembler added errata NOP
  6944                           
  6945                           ; BSR set to: 0
  6946  0035EA  C0BF  FFD9         	movff	atoi@s,fsr2l
  6947  0035EE  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6948  0035F2  0E20               	movlw	32
  6949  0035F4  18DE               	xorwf	postinc2,w,c
  6950  0035F6  B4D8               	btfsc	status,2,c
  6951  0035F8  D7F3               	goto	l1271
  6952  0035FA  C0BF  FFD9         	movff	atoi@s,fsr2l
  6953  0035FE  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6954  003602  0E09               	movlw	9
  6955  003604  18DE               	xorwf	postinc2,w,c
  6956  003606  B4D8               	btfsc	status,2,c
  6957  003608  D7EB               	goto	l1271
  6958  00360A  0E00               	movlw	0
  6959  00360C  0100               	movlb	0	; () banked
  6960  00360E  6FC5               	movwf	(atoi@a+1)& (0+255),b
  6961  003610  0E00               	movlw	0
  6962  003612  6FC4               	movwf	atoi@a& (0+255),b
  6963  003614  0E00               	movlw	0
  6964  003616  6FC3               	movwf	atoi@sign& (0+255),b
  6965                           
  6966                           ; BSR set to: 0
  6967  003618  C0BF  FFD9         	movff	atoi@s,fsr2l
  6968  00361C  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6969  003620  0E2D               	movlw	45
  6970  003622  18DE               	xorwf	postinc2,w,c
  6971  003624  A4D8               	btfss	status,2,c
  6972  003626  D002               	goto	l1273
  6973                           
  6974                           ; BSR set to: 0
  6975  003628  2BC3               	incf	atoi@sign& (0+255),f,b
  6976  00362A  D028               	goto	l5558
  6977  00362C                     l1273:
  6978  00362C  FFFF               	dw	65535	; assembler added errata NOP
  6979                           
  6980                           ; BSR set to: 0
  6981                           
  6982                           ; BSR set to: 0
  6983  00362E  C0BF  FFD9         	movff	atoi@s,fsr2l
  6984  003632  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6985  003636  0E2B               	movlw	43
  6986  003638  18DE               	xorwf	postinc2,w,c
  6987  00363A  A4D8               	btfss	status,2,c
  6988  00363C  D022               	goto	l1276
  6989  00363E  D01E               	goto	l5558
  6990  003640  FFFF               	dw	65535	; assembler added errata NOP
  6991                           
  6992                           ; BSR set to: 0
  6993  003642  C0C4  F080         	movff	atoi@a,___wmul@multiplier
  6994  003646  C0C5  F081         	movff	atoi@a+1,___wmul@multiplier+1
  6995  00364A  0E00               	movlw	0
  6996  00364C  0100               	movlb	0	; () banked
  6997  00364E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6998  003650  0E0A               	movlw	10
  6999  003652  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7000  003654  EC48  F037         	call	___wmul	;wreg free
  7001  003658  C0BF  FFD9         	movff	atoi@s,fsr2l
  7002  00365C  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7003  003660  50DF               	movf	indf2,w,c
  7004  003662  0100               	movlb	0	; () banked
  7005  003664  6FC1               	movwf	??_atoi& (0+255),b
  7006  003666  6BC2               	clrf	(??_atoi+1)& (0+255),b
  7007  003668  5180               	movf	?___wmul& (0+255),w,b
  7008  00366A  27C1               	addwf	??_atoi& (0+255),f,b
  7009  00366C  5181               	movf	(?___wmul+1)& (0+255),w,b
  7010  00366E  23C2               	addwfc	(??_atoi+1)& (0+255),f,b
  7011  003670  0ED0               	movlw	208
  7012  003672  25C1               	addwf	??_atoi& (0+255),w,b
  7013  003674  6FC4               	movwf	atoi@a& (0+255),b
  7014  003676  0EFF               	movlw	255
  7015  003678  21C2               	addwfc	(??_atoi+1)& (0+255),w,b
  7016  00367A  6FC5               	movwf	(atoi@a+1)& (0+255),b
  7017  00367C                     l5558:
  7018  00367C  FFFF               	dw	65535	; assembler added errata NOP
  7019                           
  7020                           ; BSR set to: 0
  7021  00367E  4BBF               	infsnz	atoi@s& (0+255),f,b
  7022  003680  2BC0               	incf	(atoi@s+1)& (0+255),f,b
  7023  003682                     l1276:
  7024  003682  FFFF               	dw	65535	; assembler added errata NOP
  7025                           
  7026                           ; BSR set to: 0
  7027                           
  7028                           ; BSR set to: 0
  7029  003684  C0BF  FFD9         	movff	atoi@s,fsr2l
  7030  003688  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7031  00368C  50DF               	movf	indf2,w,c
  7032  00368E  EC0A  F037         	call	_isdigit
  7033  003692  B0D8               	btfsc	status,0,c
  7034  003694  D7D5               	goto	l1277
  7035  003696  0100               	movlb	0	; () banked
  7036  003698  51C3               	movf	atoi@sign& (0+255),w,b
  7037  00369A  B4D8               	btfsc	status,2,c
  7038  00369C  D00D               	goto	l1279
  7039                           
  7040                           ; BSR set to: 0
  7041  00369E  C0C4  F0C1         	movff	atoi@a,??_atoi
  7042  0036A2  C0C5  F0C2         	movff	atoi@a+1,??_atoi+1
  7043  0036A6  1FC1               	comf	??_atoi& (0+255),f,b
  7044  0036A8  1FC2               	comf	(??_atoi+1)& (0+255),f,b
  7045  0036AA  4BC1               	infsnz	??_atoi& (0+255),f,b
  7046  0036AC  2BC2               	incf	(??_atoi+1)& (0+255),f,b
  7047  0036AE  C0C1  F0BF         	movff	??_atoi,?_atoi
  7048  0036B2  C0C2  F0C0         	movff	??_atoi+1,?_atoi+1
  7049  0036B6  D005               	goto	l1280
  7050  0036B8                     l1279:
  7051  0036B8  FFFF               	dw	65535	; assembler added errata NOP
  7052                           
  7053                           ; BSR set to: 0
  7054  0036BA  C0C4  F0BF         	movff	atoi@a,?_atoi
  7055  0036BE  C0C5  F0C0         	movff	atoi@a+1,?_atoi+1
  7056  0036C2                     l1280:
  7057  0036C2  FFFF               	dw	65535	; assembler added errata NOP
  7058                           
  7059                           ; BSR set to: 0
  7060  0036C4  0012               	return		;funcret
  7061  0036C6  FFFF               	dw	65535	; errata NOP
  7062  0036C8                     __end_of_atoi:
  7063                           	opt stack 0
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodh	equ	0xFF4
  7069                           prodl	equ	0xFF3
  7070                           postinc0	equ	0xFEE
  7071                           wreg	equ	0xFE8
  7072                           postdec1	equ	0xFE5
  7073                           fsr1l	equ	0xFE1
  7074                           indf2	equ	0xFDF
  7075                           postinc2	equ	0xFDE
  7076                           fsr2h	equ	0xFDA
  7077                           fsr2l	equ	0xFD9
  7078                           status	equ	0xFD8
  7079                           
  7080 ;; *************** function _getDS1307TimeDate *****************
  7081 ;; Defined at:
  7082 ;;		line 52 in file "ds1307.h"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  7085 ;;		 -> rtc(7), 
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;		None
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  1    wreg      void 
  7090 ;; Registers used:
  7091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7097 ;;      Params:         0       2       0       0       0       0       0
  7098 ;;      Locals:         0       0       0       0       0       0       0
  7099 ;;      Temps:          0       0       0       0       0       0       0
  7100 ;;      Totals:         0       2       0       0       0       0       0
  7101 ;;Total ram usage:        2 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    8
  7104 ;; This function calls:
  7105 ;;		_BCDtoDEC
  7106 ;;		_I2C_Read
  7107 ;;		_I2C_Restart
  7108 ;;		_I2C_Start
  7109 ;;		_I2C_Stop
  7110 ;;		_I2C_Write
  7111 ;; This function is called by:
  7112 ;;		_main
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           	psect	text16
  7117  002E28                     __ptext16:
  7118                           	opt stack 0
  7119  002E28                     _getDS1307TimeDate:
  7120                           	opt stack 0
  7121  002E28  FFFF               	dw	65535	; assembler added errata NOP
  7122                           
  7123                           ;ds1307.h: 54: I2C_Start();
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;incstack = 0
  7127  002E2A  EC66  F036         	call	_I2C_Start	;wreg free
  7128                           
  7129                           ;ds1307.h: 55: I2C_Write(0xD0);
  7130  002E2E  0E00               	movlw	0
  7131  002E30  0100               	movlb	0	; () banked
  7132  002E32  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7133  002E34  0ED0               	movlw	208
  7134  002E36  6F8A               	movwf	I2C_Write@d& (0+255),b
  7135  002E38  EC7F  F036         	call	_I2C_Write	;wreg free
  7136                           
  7137                           ;ds1307.h: 56: I2C_Write(0x00);
  7138  002E3C  0E00               	movlw	0
  7139  002E3E  0100               	movlb	0	; () banked
  7140  002E40  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7141  002E42  0E00               	movlw	0
  7142  002E44  6F8A               	movwf	I2C_Write@d& (0+255),b
  7143  002E46  EC7F  F036         	call	_I2C_Write	;wreg free
  7144                           
  7145                           ;ds1307.h: 57: I2C_Restart();
  7146  002E4A  EC72  F036         	call	_I2C_Restart	;wreg free
  7147                           
  7148                           ;ds1307.h: 58: I2C_Write(0xD1);
  7149  002E4E  0E00               	movlw	0
  7150  002E50  0100               	movlb	0	; () banked
  7151  002E52  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7152  002E54  0ED1               	movlw	209
  7153  002E56  6F8A               	movwf	I2C_Write@d& (0+255),b
  7154  002E58  EC7F  F036         	call	_I2C_Write	;wreg free
  7155                           
  7156                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
  7157  002E5C  0100               	movlb	0	; () banked
  7158  002E5E  EE20 F001          	lfsr	2,1
  7159  002E62  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7160  002E64  26D9               	addwf	fsr2l,f,c
  7161  002E66  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7162  002E68  22DA               	addwfc	fsr2h,f,c
  7163  002E6A  0E00               	movlw	0
  7164  002E6C  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7165  002E6E  0E01               	movlw	1
  7166  002E70  6F81               	movwf	I2C_Read@a& (0+255),b
  7167  002E72  EC6B  F038         	call	_I2C_Read	;wreg free
  7168  002E76  0100               	movlb	0	; () banked
  7169  002E78  5181               	movf	?_I2C_Read& (0+255),w,b
  7170  002E7A  ECC4  F036         	call	_BCDtoDEC
  7171  002E7E  6EDF               	movwf	indf2,c
  7172                           
  7173                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
  7174  002E80  0100               	movlb	0	; () banked
  7175  002E82  EE20 F002          	lfsr	2,2
  7176  002E86  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7177  002E88  26D9               	addwf	fsr2l,f,c
  7178  002E8A  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7179  002E8C  22DA               	addwfc	fsr2h,f,c
  7180  002E8E  0E00               	movlw	0
  7181  002E90  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7182  002E92  0E01               	movlw	1
  7183  002E94  6F81               	movwf	I2C_Read@a& (0+255),b
  7184  002E96  EC6B  F038         	call	_I2C_Read	;wreg free
  7185  002E9A  0100               	movlb	0	; () banked
  7186  002E9C  5181               	movf	?_I2C_Read& (0+255),w,b
  7187  002E9E  ECC4  F036         	call	_BCDtoDEC
  7188  002EA2  6EDF               	movwf	indf2,c
  7189                           
  7190                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
  7191  002EA4  0100               	movlb	0	; () banked
  7192  002EA6  EE20 F003          	lfsr	2,3
  7193  002EAA  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7194  002EAC  26D9               	addwf	fsr2l,f,c
  7195  002EAE  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7196  002EB0  22DA               	addwfc	fsr2h,f,c
  7197  002EB2  0E00               	movlw	0
  7198  002EB4  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7199  002EB6  0E01               	movlw	1
  7200  002EB8  6F81               	movwf	I2C_Read@a& (0+255),b
  7201  002EBA  EC6B  F038         	call	_I2C_Read	;wreg free
  7202  002EBE  0100               	movlb	0	; () banked
  7203  002EC0  5181               	movf	?_I2C_Read& (0+255),w,b
  7204  002EC2  ECC4  F036         	call	_BCDtoDEC
  7205  002EC6  6EDF               	movwf	indf2,c
  7206                           
  7207                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
  7208  002EC8  0E00               	movlw	0
  7209  002ECA  0100               	movlb	0	; () banked
  7210  002ECC  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7211  002ECE  0E01               	movlw	1
  7212  002ED0  6F81               	movwf	I2C_Read@a& (0+255),b
  7213  002ED2  EC6B  F038         	call	_I2C_Read	;wreg free
  7214  002ED6  0100               	movlb	0	; () banked
  7215  002ED8  5181               	movf	?_I2C_Read& (0+255),w,b
  7216  002EDA  ECC4  F036         	call	_BCDtoDEC
  7217  002EDE  C08C  FFD9         	movff	getDS1307TimeDate@ptrToUserVal,fsr2l
  7218  002EE2  C08D  FFDA         	movff	getDS1307TimeDate@ptrToUserVal+1,fsr2h
  7219  002EE6  6EDF               	movwf	indf2,c
  7220                           
  7221                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
  7222  002EE8  0100               	movlb	0	; () banked
  7223  002EEA  EE20 F004          	lfsr	2,4
  7224  002EEE  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7225  002EF0  26D9               	addwf	fsr2l,f,c
  7226  002EF2  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7227  002EF4  22DA               	addwfc	fsr2h,f,c
  7228  002EF6  0E00               	movlw	0
  7229  002EF8  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7230  002EFA  0E01               	movlw	1
  7231  002EFC  6F81               	movwf	I2C_Read@a& (0+255),b
  7232  002EFE  EC6B  F038         	call	_I2C_Read	;wreg free
  7233  002F02  0100               	movlb	0	; () banked
  7234  002F04  5181               	movf	?_I2C_Read& (0+255),w,b
  7235  002F06  ECC4  F036         	call	_BCDtoDEC
  7236  002F0A  6EDF               	movwf	indf2,c
  7237                           
  7238                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
  7239  002F0C  0100               	movlb	0	; () banked
  7240  002F0E  EE20 F005          	lfsr	2,5
  7241  002F12  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7242  002F14  26D9               	addwf	fsr2l,f,c
  7243  002F16  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7244  002F18  22DA               	addwfc	fsr2h,f,c
  7245  002F1A  0E00               	movlw	0
  7246  002F1C  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7247  002F1E  0E01               	movlw	1
  7248  002F20  6F81               	movwf	I2C_Read@a& (0+255),b
  7249  002F22  EC6B  F038         	call	_I2C_Read	;wreg free
  7250  002F26  0100               	movlb	0	; () banked
  7251  002F28  5181               	movf	?_I2C_Read& (0+255),w,b
  7252  002F2A  ECC4  F036         	call	_BCDtoDEC
  7253  002F2E  6EDF               	movwf	indf2,c
  7254                           
  7255                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
  7256  002F30  0100               	movlb	0	; () banked
  7257  002F32  EE20 F006          	lfsr	2,6
  7258  002F36  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7259  002F38  26D9               	addwf	fsr2l,f,c
  7260  002F3A  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7261  002F3C  22DA               	addwfc	fsr2h,f,c
  7262  002F3E  0E00               	movlw	0
  7263  002F40  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7264  002F42  0E00               	movlw	0
  7265  002F44  6F81               	movwf	I2C_Read@a& (0+255),b
  7266  002F46  EC6B  F038         	call	_I2C_Read	;wreg free
  7267  002F4A  0100               	movlb	0	; () banked
  7268  002F4C  5181               	movf	?_I2C_Read& (0+255),w,b
  7269  002F4E  ECC4  F036         	call	_BCDtoDEC
  7270  002F52  6EDF               	movwf	indf2,c
  7271                           
  7272                           ;ds1307.h: 66: I2C_Stop();
  7273  002F54  EC6C  F036         	call	_I2C_Stop	;wreg free
  7274  002F58  0012               	return		;funcret
  7275  002F5A  FFFF               	dw	65535	; errata NOP
  7276  002F5C                     __end_of_getDS1307TimeDate:
  7277                           	opt stack 0
  7278                           tblptru	equ	0xFF8
  7279                           tblptrh	equ	0xFF7
  7280                           tblptrl	equ	0xFF6
  7281                           tablat	equ	0xFF5
  7282                           prodh	equ	0xFF4
  7283                           prodl	equ	0xFF3
  7284                           postinc0	equ	0xFEE
  7285                           wreg	equ	0xFE8
  7286                           postdec1	equ	0xFE5
  7287                           fsr1l	equ	0xFE1
  7288                           indf2	equ	0xFDF
  7289                           postinc2	equ	0xFDE
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           
  7294 ;; *************** function _BCDtoDEC *****************
  7295 ;; Defined at:
  7296 ;;		line 34 in file "function.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  val             1    wreg     unsigned char 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;  val             1    0[BANK0 ] unsigned char 
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  1    wreg      unsigned char 
  7303 ;; Registers used:
  7304 ;;		wreg, status,2, status,0, prodl, prodh
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7310 ;;      Params:         0       0       0       0       0       0       0
  7311 ;;      Locals:         0       1       0       0       0       0       0
  7312 ;;      Temps:          0       0       0       0       0       0       0
  7313 ;;      Totals:         0       1       0       0       0       0       0
  7314 ;;Total ram usage:        1 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; Hardware stack levels required when called:    6
  7317 ;; This function calls:
  7318 ;;		Nothing
  7319 ;; This function is called by:
  7320 ;;		_getDS1307TimeDate
  7321 ;;		_getDS1307Time
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           	psect	text17
  7326  006D88                     __ptext17:
  7327                           	opt stack 0
  7328  006D88                     _BCDtoDEC:
  7329                           	opt stack 0
  7330  006D88  FFFF               	dw	65535	; assembler added errata NOP
  7331                           
  7332                           ;incstack = 0
  7333                           ;BCDtoDEC@val stored from wreg
  7334  006D8A  0100               	movlb	0	; () banked
  7335  006D8C  6F80               	movwf	BCDtoDEC@val& (0+255),b
  7336                           
  7337                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
  7338  006D8E  0100               	movlb	0	; () banked
  7339  006D90  3980               	swapf	BCDtoDEC@val& (0+255),w,b
  7340  006D92  0B0F               	andlw	15
  7341  006D94  0B0F               	andlw	15
  7342  006D96  0D0A               	mullw	10
  7343  006D98  5180               	movf	BCDtoDEC@val& (0+255),w,b
  7344  006D9A  0B0F               	andlw	15
  7345  006D9C  24F3               	addwf	prodl,w,c
  7346                           
  7347                           ; BSR set to: 0
  7348                           
  7349                           ; BSR set to: 0
  7350  006D9E  0012               	return		;funcret
  7351  006DA0  FFFF               	dw	65535	; errata NOP
  7352  006DA2                     __end_of_BCDtoDEC:
  7353                           	opt stack 0
  7354                           tblptru	equ	0xFF8
  7355                           tblptrh	equ	0xFF7
  7356                           tblptrl	equ	0xFF6
  7357                           tablat	equ	0xFF5
  7358                           prodh	equ	0xFF4
  7359                           prodl	equ	0xFF3
  7360                           postinc0	equ	0xFEE
  7361                           wreg	equ	0xFE8
  7362                           postdec1	equ	0xFE5
  7363                           fsr1l	equ	0xFE1
  7364                           indf2	equ	0xFDF
  7365                           postinc2	equ	0xFDE
  7366                           fsr2h	equ	0xFDA
  7367                           fsr2l	equ	0xFD9
  7368                           status	equ	0xFD8
  7369                           
  7370 ;; *************** function _dataLoger *****************
  7371 ;; Defined at:
  7372 ;;		line 12 in file "tela_DATALOGER.h"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;		None
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;  logs            1   64[BANK0 ] unsigned char 
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  1    wreg      void 
  7379 ;; Registers used:
  7380 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7386 ;;      Params:         0       0       0       0       0       0       0
  7387 ;;      Locals:         0       7       0       0       0       0       0
  7388 ;;      Temps:          0       5       0       0       0       0       0
  7389 ;;      Totals:         0      12       0       0       0       0       0
  7390 ;;Total ram usage:       12 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; Hardware stack levels required when called:    9
  7393 ;; This function calls:
  7394 ;;		___awdiv
  7395 ;;		_btPress
  7396 ;;		_readEEPROM_ext
  7397 ;;		_sprintf
  7398 ;; This function is called by:
  7399 ;;		_main
  7400 ;; This function uses a non-reentrant model
  7401 ;;
  7402                           
  7403                           	psect	text18
  7404  001B60                     __ptext18:
  7405                           	opt stack 0
  7406  001B60                     _dataLoger:
  7407                           	opt stack 0
  7408  001B60  FFFF               	dw	65535	; assembler added errata NOP
  7409                           
  7410                           ;tela_DATALOGER.h: 13: sprintf(line1, "Data: %02d/%02d/%02d %02d:%02d", dtl_dia, dtl_mes
      +                          , dtl_ano, dtl_hora, dtl_min);
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;incstack = 0
  7414  001B62  0E7B               	movlw	low _line1
  7415  001B64  0100               	movlb	0	; () banked
  7416  001B66  6FA1               	movwf	sprintf@wh& (0+255),b
  7417  001B68  0E01               	movlw	high _line1
  7418  001B6A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7419  001B6C  0EFC               	movlw	low STR_75
  7420  001B6E  6FA3               	movwf	sprintf@f& (0+255),b
  7421  001B70  0E7B               	movlw	high STR_75
  7422  001B72  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7423  001B74  C05D  F0A5         	movff	_dtl_dia,?_sprintf+4
  7424  001B78  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7425  001B7A  C05C  F0A7         	movff	_dtl_mes,?_sprintf+6
  7426  001B7E  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  7427  001B80  C05B  F0A9         	movff	_dtl_ano,?_sprintf+8
  7428  001B84  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  7429  001B86  C05A  F0AB         	movff	_dtl_hora,?_sprintf+10
  7430  001B8A  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  7431  001B8C  C059  F0AD         	movff	_dtl_min,?_sprintf+12
  7432  001B90  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  7433  001B92  ECC9  F039         	call	_sprintf	;wreg free
  7434                           
  7435                           ;tela_DATALOGER.h: 14: sprintf(line2, "Jokey: %s", dtl_jockey == 1 ? "OK" : "ERRO");
  7436  001B96  0458               	decf	_dtl_jockey,w,c
  7437  001B98  B4D8               	btfsc	status,2,c
  7438  001B9A  D005               	goto	l778
  7439  001B9C  0EE3               	movlw	low STR_47
  7440  001B9E  0100               	movlb	0	; () banked
  7441  001BA0  6FBA               	movwf	_dataLoger$1437& (0+255),b
  7442  001BA2  0E7F               	movlw	high STR_47
  7443  001BA4  D005               	goto	L15
  7444  001BA6                     l778:
  7445  001BA6  FFFF               	dw	65535	; assembler added errata NOP
  7446                           
  7447                           ; BSR set to: 0
  7448  001BA8  0EFA               	movlw	low STR_5
  7449  001BAA  0100               	movlb	0	; () banked
  7450  001BAC  6FBA               	movwf	_dataLoger$1437& (0+255),b
  7451  001BAE  0E7F               	movlw	high STR_5
  7452  001BB0                     L15:
  7453  001BB0  FFFF               	dw	65535	; assembler added errata NOP
  7454  001BB2  6FBB               	movwf	(_dataLoger$1437+1)& (0+255),b
  7455                           
  7456                           ; BSR set to: 0
  7457                           
  7458                           ; BSR set to: 0
  7459  001BB4  0E66               	movlw	low _line2
  7460  001BB6  6FA1               	movwf	sprintf@wh& (0+255),b
  7461  001BB8  0E01               	movlw	high _line2
  7462  001BBA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7463  001BBC  0E7F               	movlw	low STR_76
  7464  001BBE  6FA3               	movwf	sprintf@f& (0+255),b
  7465  001BC0  0E7F               	movlw	high STR_76
  7466  001BC2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7467  001BC4  C0BA  F0A5         	movff	_dataLoger$1437,?_sprintf+4
  7468  001BC8  C0BB  F0A6         	movff	_dataLoger$1437+1,?_sprintf+5
  7469  001BCC  ECC9  F039         	call	_sprintf	;wreg free
  7470                           
  7471                           ;tela_DATALOGER.h: 15: sprintf(&line2[14], "#%02d/%02d", (dtl_posi_visualizar + 1), tota
      +                          lLogs);
  7472  001BD0  0E74               	movlw	low (_line2+14)
  7473  001BD2  0100               	movlb	0	; () banked
  7474  001BD4  6FA1               	movwf	sprintf@wh& (0+255),b
  7475  001BD6  0E01               	movlw	high (_line2+14)
  7476  001BD8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7477  001BDA  0E2B               	movlw	low STR_79
  7478  001BDC  6FA3               	movwf	sprintf@f& (0+255),b
  7479  001BDE  0E7F               	movlw	high STR_79
  7480  001BE0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7481  001BE2  0E01               	movlw	1
  7482  001BE4  2453               	addwf	_dtl_posi_visualizar,w,c
  7483  001BE6  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  7484  001BE8  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7485  001BEA  0E00               	movlw	0
  7486  001BEC  23A6               	addwfc	(?_sprintf+5)& (0+255),f,b
  7487  001BEE  C054  F0A7         	movff	_totalLogs,?_sprintf+6
  7488  001BF2  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  7489  001BF4  ECC9  F039         	call	_sprintf	;wreg free
  7490                           
  7491                           ;tela_DATALOGER.h: 16: sprintf(line3, "Principal: %s", dtl_principal == 1 ? "OK" : "ERRO
      +                          ");
  7492  001BF8  0457               	decf	_dtl_principal,w,c
  7493  001BFA  B4D8               	btfsc	status,2,c
  7494  001BFC  D005               	goto	l782
  7495  001BFE  0EE3               	movlw	low STR_47
  7496  001C00  0100               	movlb	0	; () banked
  7497  001C02  6FBC               	movwf	_dataLoger$1443& (0+255),b
  7498  001C04  0E7F               	movlw	high STR_47
  7499  001C06  D005               	goto	L16
  7500  001C08                     l782:
  7501  001C08  FFFF               	dw	65535	; assembler added errata NOP
  7502                           
  7503                           ; BSR set to: 0
  7504  001C0A  0EFA               	movlw	low STR_5
  7505  001C0C  0100               	movlb	0	; () banked
  7506  001C0E  6FBC               	movwf	_dataLoger$1443& (0+255),b
  7507  001C10  0E7F               	movlw	high STR_5
  7508  001C12                     L16:
  7509  001C12  FFFF               	dw	65535	; assembler added errata NOP
  7510  001C14  6FBD               	movwf	(_dataLoger$1443+1)& (0+255),b
  7511                           
  7512                           ; BSR set to: 0
  7513                           
  7514                           ; BSR set to: 0
  7515  001C16  0E51               	movlw	low _line3
  7516  001C18  6FA1               	movwf	sprintf@wh& (0+255),b
  7517  001C1A  0E01               	movlw	high _line3
  7518  001C1C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7519  001C1E  0EB0               	movlw	low STR_80
  7520  001C20  6FA3               	movwf	sprintf@f& (0+255),b
  7521  001C22  0E7E               	movlw	high STR_80
  7522  001C24  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7523  001C26  C0BC  F0A5         	movff	_dataLoger$1443,?_sprintf+4
  7524  001C2A  C0BD  F0A6         	movff	_dataLoger$1443+1,?_sprintf+5
  7525  001C2E  ECC9  F039         	call	_sprintf	;wreg free
  7526                           
  7527                           ;tela_DATALOGER.h: 17: sprintf(line4, "Combustao: %s", dtl_estacionaria == 1 ? "OK" : "E
      +                          RRO");
  7528  001C32  0456               	decf	_dtl_estacionaria,w,c
  7529  001C34  B4D8               	btfsc	status,2,c
  7530  001C36  D005               	goto	l786
  7531  001C38  0EE3               	movlw	low STR_47
  7532  001C3A  0100               	movlb	0	; () banked
  7533  001C3C  6FBE               	movwf	_dataLoger$1448& (0+255),b
  7534  001C3E  0E7F               	movlw	high STR_47
  7535  001C40  D005               	goto	L17
  7536  001C42                     l786:
  7537  001C42  FFFF               	dw	65535	; assembler added errata NOP
  7538                           
  7539                           ; BSR set to: 0
  7540  001C44  0EFA               	movlw	low STR_5
  7541  001C46  0100               	movlb	0	; () banked
  7542  001C48  6FBE               	movwf	_dataLoger$1448& (0+255),b
  7543  001C4A  0E7F               	movlw	high STR_5
  7544  001C4C                     L17:
  7545  001C4C  FFFF               	dw	65535	; assembler added errata NOP
  7546  001C4E  6FBF               	movwf	(_dataLoger$1448+1)& (0+255),b
  7547                           
  7548                           ; BSR set to: 0
  7549                           
  7550                           ; BSR set to: 0
  7551  001C50  0E3C               	movlw	low _line4
  7552  001C52  6FA1               	movwf	sprintf@wh& (0+255),b
  7553  001C54  0E01               	movlw	high _line4
  7554  001C56  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7555  001C58  0EBE               	movlw	low STR_83
  7556  001C5A  6FA3               	movwf	sprintf@f& (0+255),b
  7557  001C5C  0E7E               	movlw	high STR_83
  7558  001C5E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7559  001C60  C0BE  F0A5         	movff	_dataLoger$1448,?_sprintf+4
  7560  001C64  C0BF  F0A6         	movff	_dataLoger$1448+1,?_sprintf+5
  7561  001C68  ECC9  F039         	call	_sprintf	;wreg free
  7562                           
  7563                           ;tela_DATALOGER.h: 19: if (btPress(1)) {
  7564  001C6C  0E01               	movlw	1
  7565  001C6E  EC4A  F03B         	call	_btPress
  7566  001C72  0900               	iorlw	0
  7567  001C74  B4D8               	btfsc	status,2,c
  7568  001C76  D005               	goto	l789
  7569                           
  7570                           ;tela_DATALOGER.h: 20: option_posi = 0;
  7571  001C78  0E00               	movlw	0
  7572  001C7A  0100               	movlb	0	; () banked
  7573  001C7C  6FDF               	movwf	_option_posi& (0+255),b
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;tela_DATALOGER.h: 21: menu_posi = _menu_posi;
  7577  001C7E  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  7578  001C82                     l789:
  7579  001C82  FFFF               	dw	65535	; assembler added errata NOP
  7580                           
  7581                           ;tela_DATALOGER.h: 22: }
  7582                           ;tela_DATALOGER.h: 27: if (btPress(2)) {
  7583                           
  7584                           ; BSR set to: 0
  7585  001C84  0E02               	movlw	2
  7586  001C86  EC4A  F03B         	call	_btPress
  7587  001C8A  0900               	iorlw	0
  7588  001C8C  B4D8               	btfsc	status,2,c
  7589  001C8E  D00B               	goto	l790
  7590                           
  7591                           ;tela_DATALOGER.h: 28: dtl_posicao -= 8;
  7592  001C90  0E08               	movlw	8
  7593  001C92  0100               	movlb	0	; () banked
  7594  001C94  5FFA               	subwf	_dtl_posicao& (0+255),f,b
  7595                           
  7596                           ;tela_DATALOGER.h: 29: if (dtl_posicao < 60) {
  7597  001C96  0E3C               	movlw	60
  7598  001C98  61FA               	cpfslt	_dtl_posicao& (0+255),b
  7599  001C9A  D002               	goto	l791
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;tela_DATALOGER.h: 30: dtl_posicao = 60;
  7603  001C9C  0E3C               	movlw	60
  7604  001C9E  6FFA               	movwf	_dtl_posicao& (0+255),b
  7605  001CA0                     l791:
  7606  001CA0  FFFF               	dw	65535	; assembler added errata NOP
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;tela_DATALOGER.h: 31: }
  7610                           ;tela_DATALOGER.h: 32: dtl_carregar_log = 1;
  7611  001CA2  0E01               	movlw	1
  7612  001CA4  6E55               	movwf	_dtl_carregar_log,c
  7613  001CA6                     l790:
  7614  001CA6  FFFF               	dw	65535	; assembler added errata NOP
  7615                           
  7616                           ;tela_DATALOGER.h: 33: }
  7617                           ;tela_DATALOGER.h: 34: if (btPress(3)) {
  7618                           
  7619                           ; BSR set to: 0
  7620  001CA8  0E03               	movlw	3
  7621  001CAA  EC4A  F03B         	call	_btPress
  7622  001CAE  0900               	iorlw	0
  7623  001CB0  B4D8               	btfsc	status,2,c
  7624  001CB2  D019               	goto	l792
  7625                           
  7626                           ;tela_DATALOGER.h: 35: if ((dtl_posi_visualizar + 1) >= totalLogs) {
  7627  001CB4  5054               	movf	_totalLogs,w,c
  7628  001CB6  0100               	movlb	0	; () banked
  7629  001CB8  6FB5               	movwf	??_dataLoger& (0+255),b
  7630  001CBA  6BB6               	clrf	(??_dataLoger+1)& (0+255),b
  7631  001CBC  5053               	movf	_dtl_posi_visualizar,w,c
  7632  001CBE  6FB7               	movwf	(??_dataLoger+2)& (0+255),b
  7633  001CC0  6BB8               	clrf	(??_dataLoger+3)& (0+255),b
  7634  001CC2  0E01               	movlw	1
  7635  001CC4  27B7               	addwf	(??_dataLoger+2)& (0+255),f,b
  7636  001CC6  0E00               	movlw	0
  7637  001CC8  23B8               	addwfc	(??_dataLoger+3)& (0+255),f,b
  7638  001CCA  51B5               	movf	??_dataLoger& (0+255),w,b
  7639  001CCC  5DB7               	subwf	(??_dataLoger+2)& (0+255),w,b
  7640  001CCE  51B8               	movf	(??_dataLoger+3)& (0+255),w,b
  7641  001CD0  0A80               	xorlw	128
  7642  001CD2  6FB9               	movwf	(??_dataLoger+4)& (0+255),b
  7643  001CD4  51B6               	movf	(??_dataLoger+1)& (0+255),w,b
  7644  001CD6  0A80               	xorlw	128
  7645  001CD8  59B9               	subwfb	(??_dataLoger+4)& (0+255),w,b
  7646  001CDA  B0D8               	btfsc	status,0,c
  7647  001CDC  D05A               	goto	l795
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;tela_DATALOGER.h: 37: }
  7651                           ;tela_DATALOGER.h: 38: dtl_posicao += 8;
  7652                           
  7653                           ; BSR set to: 0
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;tela_DATALOGER.h: 36: return;
  7657  001CDE  0E08               	movlw	8
  7658  001CE0  27FA               	addwf	_dtl_posicao& (0+255),f,b
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;tela_DATALOGER.h: 39: dtl_carregar_log = 1;
  7662  001CE2  0E01               	movlw	1
  7663  001CE4  6E55               	movwf	_dtl_carregar_log,c
  7664  001CE6                     l792:
  7665  001CE6  FFFF               	dw	65535	; assembler added errata NOP
  7666                           
  7667                           ;tela_DATALOGER.h: 40: }
  7668                           ;tela_DATALOGER.h: 42: if (dtl_carregar_log == 1) {
  7669                           
  7670                           ; BSR set to: 0
  7671  001CE8  0455               	decf	_dtl_carregar_log,w,c
  7672  001CEA  A4D8               	btfss	status,2,c
  7673  001CEC  D052               	goto	l795
  7674                           
  7675                           ;tela_DATALOGER.h: 43: char logs = readEEPROM_ext(14);
  7676  001CEE  0E0E               	movlw	14
  7677  001CF0  EC61  F03A         	call	_readEEPROM_ext
  7678  001CF4  0100               	movlb	0	; () banked
  7679  001CF6  6FC0               	movwf	dataLoger@logs& (0+255),b
  7680                           
  7681                           ;tela_DATALOGER.h: 44: totalLogs = (logs - 60) / 8;
  7682  001CF8  0EC4               	movlw	196
  7683  001CFA  25C0               	addwf	dataLoger@logs& (0+255),w,b
  7684  001CFC  6F80               	movwf	___awdiv@dividend& (0+255),b
  7685  001CFE  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  7686  001D00  0EFF               	movlw	255
  7687  001D02  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  7688  001D04  0E00               	movlw	0
  7689  001D06  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7690  001D08  0E08               	movlw	8
  7691  001D0A  6F82               	movwf	___awdiv@divisor& (0+255),b
  7692  001D0C  ECFD  F01E         	call	___awdiv	;wreg free
  7693  001D10  0100               	movlb	0	; () banked
  7694  001D12  5180               	movf	?___awdiv& (0+255),w,b
  7695  001D14  6E54               	movwf	_totalLogs,c
  7696                           
  7697                           ;tela_DATALOGER.h: 46: dtl_posi_visualizar = (dtl_posicao - 60) / 8;
  7698  001D16  0EC4               	movlw	196
  7699  001D18  25FA               	addwf	_dtl_posicao& (0+255),w,b
  7700  001D1A  6F80               	movwf	___awdiv@dividend& (0+255),b
  7701  001D1C  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  7702  001D1E  0EFF               	movlw	255
  7703  001D20  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  7704  001D22  0E00               	movlw	0
  7705  001D24  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7706  001D26  0E08               	movlw	8
  7707  001D28  6F82               	movwf	___awdiv@divisor& (0+255),b
  7708  001D2A  ECFD  F01E         	call	___awdiv	;wreg free
  7709  001D2E  0100               	movlb	0	; () banked
  7710  001D30  5180               	movf	?___awdiv& (0+255),w,b
  7711  001D32  6E53               	movwf	_dtl_posi_visualizar,c
  7712                           
  7713                           ;tela_DATALOGER.h: 48: dtl_dia = readEEPROM_ext(dtl_posicao);
  7714  001D34  51FA               	movf	_dtl_posicao& (0+255),w,b
  7715  001D36  EC61  F03A         	call	_readEEPROM_ext
  7716  001D3A  6E5D               	movwf	_dtl_dia,c
  7717                           
  7718                           ;tela_DATALOGER.h: 49: dtl_mes = readEEPROM_ext((dtl_posicao + 1));
  7719  001D3C  0100               	movlb	0	; () banked
  7720  001D3E  29FA               	incf	_dtl_posicao& (0+255),w,b
  7721  001D40  EC61  F03A         	call	_readEEPROM_ext
  7722  001D44  6E5C               	movwf	_dtl_mes,c
  7723                           
  7724                           ;tela_DATALOGER.h: 50: dtl_ano = readEEPROM_ext((dtl_posicao + 2));
  7725  001D46  0100               	movlb	0	; () banked
  7726  001D48  51FA               	movf	_dtl_posicao& (0+255),w,b
  7727  001D4A  0F02               	addlw	2
  7728  001D4C  EC61  F03A         	call	_readEEPROM_ext
  7729  001D50  6E5B               	movwf	_dtl_ano,c
  7730                           
  7731                           ;tela_DATALOGER.h: 51: dtl_hora = readEEPROM_ext((dtl_posicao + 3));
  7732  001D52  0100               	movlb	0	; () banked
  7733  001D54  51FA               	movf	_dtl_posicao& (0+255),w,b
  7734  001D56  0F03               	addlw	3
  7735  001D58  EC61  F03A         	call	_readEEPROM_ext
  7736  001D5C  6E5A               	movwf	_dtl_hora,c
  7737                           
  7738                           ;tela_DATALOGER.h: 52: dtl_min = readEEPROM_ext((dtl_posicao + 4));
  7739  001D5E  0100               	movlb	0	; () banked
  7740  001D60  51FA               	movf	_dtl_posicao& (0+255),w,b
  7741  001D62  0F04               	addlw	4
  7742  001D64  EC61  F03A         	call	_readEEPROM_ext
  7743  001D68  6E59               	movwf	_dtl_min,c
  7744                           
  7745                           ;tela_DATALOGER.h: 53: dtl_jockey = readEEPROM_ext((dtl_posicao + 5));
  7746  001D6A  0100               	movlb	0	; () banked
  7747  001D6C  51FA               	movf	_dtl_posicao& (0+255),w,b
  7748  001D6E  0F05               	addlw	5
  7749  001D70  EC61  F03A         	call	_readEEPROM_ext
  7750  001D74  6E58               	movwf	_dtl_jockey,c
  7751                           
  7752                           ;tela_DATALOGER.h: 54: dtl_principal = readEEPROM_ext((dtl_posicao + 6));
  7753  001D76  0100               	movlb	0	; () banked
  7754  001D78  51FA               	movf	_dtl_posicao& (0+255),w,b
  7755  001D7A  0F06               	addlw	6
  7756  001D7C  EC61  F03A         	call	_readEEPROM_ext
  7757  001D80  6E57               	movwf	_dtl_principal,c
  7758                           
  7759                           ;tela_DATALOGER.h: 55: dtl_estacionaria = readEEPROM_ext((dtl_posicao + 7));
  7760  001D82  0100               	movlb	0	; () banked
  7761  001D84  51FA               	movf	_dtl_posicao& (0+255),w,b
  7762  001D86  0F07               	addlw	7
  7763  001D88  EC61  F03A         	call	_readEEPROM_ext
  7764  001D8C  6E56               	movwf	_dtl_estacionaria,c
  7765                           
  7766                           ;tela_DATALOGER.h: 56: dtl_carregar_log = 0;
  7767  001D8E  0E00               	movlw	0
  7768  001D90  6E55               	movwf	_dtl_carregar_log,c
  7769  001D92                     l795:
  7770  001D92  FFFF               	dw	65535	; assembler added errata NOP
  7771  001D94  0012               	return		;funcret
  7772  001D96  FFFF               	dw	65535	; errata NOP
  7773  001D98                     __end_of_dataLoger:
  7774                           	opt stack 0
  7775                           tblptru	equ	0xFF8
  7776                           tblptrh	equ	0xFF7
  7777                           tblptrl	equ	0xFF6
  7778                           tablat	equ	0xFF5
  7779                           prodh	equ	0xFF4
  7780                           prodl	equ	0xFF3
  7781                           postinc0	equ	0xFEE
  7782                           wreg	equ	0xFE8
  7783                           postdec1	equ	0xFE5
  7784                           fsr1l	equ	0xFE1
  7785                           indf2	equ	0xFDF
  7786                           postinc2	equ	0xFDE
  7787                           fsr2h	equ	0xFDA
  7788                           fsr2l	equ	0xFD9
  7789                           status	equ	0xFD8
  7790                           
  7791 ;; *************** function _criarCaracteresCGRAM *****************
  7792 ;; Defined at:
  7793 ;;		line 152 in file "lcd.h"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;		None
  7796 ;; Auto vars:     Size  Location     Type
  7797 ;;  character      48    7[BANK0 ] const unsigned char [8][
  7798 ;;  i               1   59[BANK0 ] unsigned char 
  7799 ;;  j               1   58[BANK0 ] unsigned char 
  7800 ;;  k               1   57[BANK0 ] unsigned char 
  7801 ;; Return value:  Size  Location     Type
  7802 ;;                  1    wreg      void 
  7803 ;; Registers used:
  7804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7805 ;; Tracked objects:
  7806 ;;		On entry : 0/0
  7807 ;;		On exit  : 0/0
  7808 ;;		Unchanged: 0/0
  7809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7810 ;;      Params:         0       0       0       0       0       0       0
  7811 ;;      Locals:         0      53       0       0       0       0       0
  7812 ;;      Temps:          0       3       0       0       0       0       0
  7813 ;;      Totals:         0      56       0       0       0       0       0
  7814 ;;Total ram usage:       56 bytes
  7815 ;; Hardware stack levels used:    1
  7816 ;; Hardware stack levels required when called:    8
  7817 ;; This function calls:
  7818 ;;		_Lcd_Cmd
  7819 ;;		_Lcd_Write_Char
  7820 ;; This function is called by:
  7821 ;;		_main
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           	psect	text19
  7826  003A4C                     __ptext19:
  7827                           	opt stack 0
  7828  003A4C                     _criarCaracteresCGRAM:
  7829                           	opt stack 0
  7830  003A4C  FFFF               	dw	65535	; assembler added errata NOP
  7831                           
  7832                           ;lcd.h: 153: const char character[6][8] = {
  7833                           ;lcd.h: 154: 0x00, 0x1F, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04,
  7834                           ;lcd.h: 155: 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10,
  7835                           ;lcd.h: 156: 0x00, 0x00, 0x00, 0x04, 0x04, 0x14, 0x14, 0x14,
  7836                           ;lcd.h: 157: 0x00, 0x01, 0x01, 0x05, 0x05, 0x15, 0x15, 0x15,
  7837                           ;lcd.h: 158: 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04,
  7838                           ;lcd.h: 159: };
  7839                           
  7840                           ;incstack = 0
  7841  003A4E  0E9D               	movlw	low criarCaracteresCGRAM@F2956
  7842  003A50  6EF6               	movwf	tblptrl,c
  7843  003A52                     	if	1	;There is more than 1 active tblptr byte
  7844  003A52  0E7A               	movlw	high criarCaracteresCGRAM@F2956
  7845  003A54  6EF7               	movwf	tblptrh,c
  7846  003A56                     	endif
  7847  003A56                     	if	0	;There are less than 3 active tblptr bytes
  7848  003A56                     	endif
  7849  003A56  EE20  F087         	lfsr	2,criarCaracteresCGRAM@character
  7850  003A5A  0E2F               	movlw	47
  7851  003A5C                     u7720:
  7852  003A5C  0009               	tblrd		*+
  7853  003A5E  FFFF               	dw	65535	; errata NOP
  7854  003A60  CFF5 FFDE          	movff	tablat,postinc2
  7855  003A64  06E8               	decf	wreg,f,c
  7856  003A66  E2FA               	bc	u7720
  7857                           
  7858                           ;lcd.h: 160: Lcd_Cmd(0b0100);
  7859  003A68  0E04               	movlw	4
  7860  003A6A  EC32  F037         	call	_Lcd_Cmd
  7861                           
  7862                           ;lcd.h: 161: Lcd_Cmd(0b0000);
  7863  003A6E  0E00               	movlw	0
  7864  003A70  EC32  F037         	call	_Lcd_Cmd
  7865                           
  7866                           ;lcd.h: 162: _delay((unsigned long)((100)*(8000000/4000000.0)));
  7867  003A74  0E32               	movlw	50
  7868  003A76                     u9017:
  7869  003A76  FFFF               	dw	65535	; errata NOP
  7870  003A78  2EE8               	decfsz	wreg,f,c
  7871  003A7A  D7FD               	bra	u9017
  7872                           
  7873                           ;lcd.h: 163: char i = 0, j = 0, k = 0;
  7874  003A7C  0E00               	movlw	0
  7875  003A7E  0100               	movlb	0	; () banked
  7876  003A80  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7877                           
  7878                           ; BSR set to: 0
  7879  003A82  0E00               	movlw	0
  7880  003A84  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  7881                           
  7882                           ; BSR set to: 0
  7883  003A86  0E00               	movlw	0
  7884  003A88  6FB9               	movwf	criarCaracteresCGRAM@k& (0+255),b
  7885                           
  7886                           ; BSR set to: 0
  7887                           ;lcd.h: 164: for (i = 0; i < 5; i++) {
  7888  003A8A  0E00               	movlw	0
  7889  003A8C  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7890  003A8E                     l6984:
  7891  003A8E  FFFF               	dw	65535	; assembler added errata NOP
  7892                           
  7893                           ; BSR set to: 0
  7894  003A90  0E04               	movlw	4
  7895  003A92  65BB               	cpfsgt	criarCaracteresCGRAM@i& (0+255),b
  7896  003A94  D001               	goto	l655
  7897  003A96  D03A               	goto	u7780
  7898  003A98                     l655:
  7899  003A98  FFFF               	dw	65535	; assembler added errata NOP
  7900                           
  7901                           ; BSR set to: 0
  7902                           ;lcd.h: 165: if (k == 1) i = 0;
  7903                           
  7904                           ; BSR set to: 0
  7905  003A9A  05B9               	decf	criarCaracteresCGRAM@k& (0+255),w,b
  7906  003A9C  A4D8               	btfss	status,2,c
  7907  003A9E  D002               	goto	l657
  7908                           
  7909                           ; BSR set to: 0
  7910  003AA0  0E00               	movlw	0
  7911  003AA2  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7912  003AA4                     l657:
  7913  003AA4  FFFF               	dw	65535	; assembler added errata NOP
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;lcd.h: 166: for (j = 0; j < 8; j++) {
  7917  003AA6  0E00               	movlw	0
  7918  003AA8  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  7919  003AAA                     l6992:
  7920  003AAA  FFFF               	dw	65535	; assembler added errata NOP
  7921                           
  7922                           ; BSR set to: 0
  7923  003AAC  0E07               	movlw	7
  7924  003AAE  65BA               	cpfsgt	criarCaracteresCGRAM@j& (0+255),b
  7925  003AB0  D001               	goto	l658
  7926  003AB2  D028               	goto	u7770
  7927  003AB4                     l658:
  7928  003AB4  FFFF               	dw	65535	; assembler added errata NOP
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;lcd.h: 167: Lcd_Write_Char((k) ? character[i][j] : 0);
  7932                           
  7933                           ; BSR set to: 0
  7934  003AB6  51B9               	movf	criarCaracteresCGRAM@k& (0+255),w,b
  7935  003AB8  A4D8               	btfss	status,2,c
  7936  003ABA  D005               	goto	l661
  7937                           
  7938                           ; BSR set to: 0
  7939  003ABC  0E00               	movlw	0
  7940  003ABE  6FB8               	movwf	(_criarCaracteresCGRAM$1375+1)& (0+255),b
  7941  003AC0  0E00               	movlw	0
  7942  003AC2  6FB7               	movwf	_criarCaracteresCGRAM$1375& (0+255),b
  7943  003AC4  D018               	goto	l663
  7944  003AC6                     l661:
  7945  003AC6  FFFF               	dw	65535	; assembler added errata NOP
  7946                           
  7947                           ; BSR set to: 0
  7948                           
  7949                           ; BSR set to: 0
  7950  003AC8  51BB               	movf	criarCaracteresCGRAM@i& (0+255),w,b
  7951  003ACA  0D08               	mullw	8
  7952  003ACC  0E87               	movlw	low criarCaracteresCGRAM@character
  7953  003ACE  6F84               	movwf	??_criarCaracteresCGRAM& (0+255),b
  7954  003AD0  0E00               	movlw	high criarCaracteresCGRAM@character
  7955  003AD2  6F85               	movwf	(??_criarCaracteresCGRAM+1)& (0+255),b
  7956  003AD4  50F3               	movf	prodl,w,c
  7957  003AD6  2784               	addwf	??_criarCaracteresCGRAM& (0+255),f,b
  7958  003AD8  50F4               	movf	prodh,w,c
  7959  003ADA  2385               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),f,b
  7960  003ADC  51BA               	movf	criarCaracteresCGRAM@j& (0+255),w,b
  7961  003ADE  0D01               	mullw	1
  7962  003AE0  50F3               	movf	prodl,w,c
  7963  003AE2  2584               	addwf	??_criarCaracteresCGRAM& (0+255),w,b
  7964  003AE4  6ED9               	movwf	fsr2l,c
  7965  003AE6  50F4               	movf	prodh,w,c
  7966  003AE8  2185               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),w,b
  7967  003AEA  6EDA               	movwf	fsr2h,c
  7968  003AEC  50DF               	movf	indf2,w,c
  7969  003AEE  6F86               	movwf	(??_criarCaracteresCGRAM+2)& (0+255),b
  7970  003AF0  5186               	movf	(??_criarCaracteresCGRAM+2)& (0+255),w,b
  7971  003AF2  6FB7               	movwf	_criarCaracteresCGRAM$1375& (0+255),b
  7972  003AF4  6BB8               	clrf	(_criarCaracteresCGRAM$1375+1)& (0+255),b
  7973  003AF6                     l663:
  7974  003AF6  FFFF               	dw	65535	; assembler added errata NOP
  7975                           
  7976                           ; BSR set to: 0
  7977                           
  7978                           ; BSR set to: 0
  7979  003AF8  51B7               	movf	_criarCaracteresCGRAM$1375& (0+255),w,b
  7980  003AFA  EC21  F039         	call	_Lcd_Write_Char
  7981  003AFE  0100               	movlb	0	; () banked
  7982  003B00  2BBA               	incf	criarCaracteresCGRAM@j& (0+255),f,b
  7983  003B02  D7D3               	goto	l6992
  7984  003B04                     u7770:
  7985  003B04  FFFF               	dw	65535	; assembler added errata NOP
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;lcd.h: 168: }
  7989                           ;lcd.h: 169: k++;
  7990                           
  7991                           ; BSR set to: 0
  7992  003B06  2BB9               	incf	criarCaracteresCGRAM@k& (0+255),f,b
  7993  003B08  2BBB               	incf	criarCaracteresCGRAM@i& (0+255),f,b
  7994  003B0A  D7C1               	goto	l6984
  7995  003B0C                     u7780:
  7996  003B0C  FFFF               	dw	65535	; assembler added errata NOP
  7997                           
  7998                           ; BSR set to: 0
  7999                           
  8000                           ; BSR set to: 0
  8001  003B0E  0012               	return		;funcret
  8002  003B10  FFFF               	dw	65535	; errata NOP
  8003  003B12                     __end_of_criarCaracteresCGRAM:
  8004                           	opt stack 0
  8005                           tblptru	equ	0xFF8
  8006                           tblptrh	equ	0xFF7
  8007                           tblptrl	equ	0xFF6
  8008                           tablat	equ	0xFF5
  8009                           prodh	equ	0xFF4
  8010                           prodl	equ	0xFF3
  8011                           postinc0	equ	0xFEE
  8012                           wreg	equ	0xFE8
  8013                           postdec1	equ	0xFE5
  8014                           fsr1l	equ	0xFE1
  8015                           indf2	equ	0xFDF
  8016                           postinc2	equ	0xFDE
  8017                           fsr2h	equ	0xFDA
  8018                           fsr2l	equ	0xFD9
  8019                           status	equ	0xFD8
  8020                           
  8021 ;; *************** function _configurarEstacionaria *****************
  8022 ;; Defined at:
  8023 ;;		line 7 in file "tela_ESTACIONARIA.h"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;		None
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;		None
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  1    wreg      void 
  8030 ;; Registers used:
  8031 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8037 ;;      Params:         0       0       0       0       0       0       0
  8038 ;;      Locals:         0       0       0       0       0       0       0
  8039 ;;      Temps:          0       0       0       0       0       0       0
  8040 ;;      Totals:         0       0       0       0       0       0       0
  8041 ;;Total ram usage:        0 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    9
  8044 ;; This function calls:
  8045 ;;		_blink
  8046 ;;		_btPress
  8047 ;;		_sprintf
  8048 ;;		_writeEEPROM_ext
  8049 ;; This function is called by:
  8050 ;;		_main
  8051 ;; This function uses a non-reentrant model
  8052 ;;
  8053                           
  8054                           	psect	text20
  8055  002CBA                     __ptext20:
  8056                           	opt stack 0
  8057  002CBA                     _configurarEstacionaria:
  8058                           	opt stack 0
  8059  002CBA  FFFF               	dw	65535	; assembler added errata NOP
  8060                           
  8061                           ;tela_ESTACIONARIA.h: 9: sprintf(line1, "Configuracao tempo");
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;incstack = 0
  8065  002CBC  0E7B               	movlw	low _line1
  8066  002CBE  0100               	movlb	0	; () banked
  8067  002CC0  6FA1               	movwf	sprintf@wh& (0+255),b
  8068  002CC2  0E01               	movlw	high _line1
  8069  002CC4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8070  002CC6  0E39               	movlw	low STR_96
  8071  002CC8  6FA3               	movwf	sprintf@f& (0+255),b
  8072  002CCA  0E7D               	movlw	high STR_96
  8073  002CCC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8074  002CCE  ECC9  F039         	call	_sprintf	;wreg free
  8075                           
  8076                           ;tela_ESTACIONARIA.h: 10: sprintf(line2, "Max. PARTIDA:");
  8077  002CD2  0E66               	movlw	low _line2
  8078  002CD4  0100               	movlb	0	; () banked
  8079  002CD6  6FA1               	movwf	sprintf@wh& (0+255),b
  8080  002CD8  0E01               	movlw	high _line2
  8081  002CDA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8082  002CDC  0EA2               	movlw	low STR_97
  8083  002CDE  6FA3               	movwf	sprintf@f& (0+255),b
  8084  002CE0  0E7E               	movlw	high STR_97
  8085  002CE2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8086  002CE4  ECC9  F039         	call	_sprintf	;wreg free
  8087                           
  8088                           ;tela_ESTACIONARIA.h: 11: sprintf(&line2[16], "%3ds", tempo_limite_estacionaria);
  8089  002CE8  0E76               	movlw	low (_line2+16)
  8090  002CEA  0100               	movlb	0	; () banked
  8091  002CEC  6FA1               	movwf	sprintf@wh& (0+255),b
  8092  002CEE  0E01               	movlw	high (_line2+16)
  8093  002CF0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8094  002CF2  0EED               	movlw	low STR_98
  8095  002CF4  6FA3               	movwf	sprintf@f& (0+255),b
  8096  002CF6  0E7F               	movlw	high STR_98
  8097  002CF8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8098  002CFA  C0E5  F0A5         	movff	_tempo_limite_estacionaria,?_sprintf+4
  8099  002CFE  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  8100  002D00  ECC9  F039         	call	_sprintf	;wreg free
  8101                           
  8102                           ;tela_ESTACIONARIA.h: 12: sprintf(line3, "Max. TESTE:");
  8103  002D04  0E51               	movlw	low _line3
  8104  002D06  0100               	movlb	0	; () banked
  8105  002D08  6FA1               	movwf	sprintf@wh& (0+255),b
  8106  002D0A  0E01               	movlw	high _line3
  8107  002D0C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8108  002D0E  0EF1               	movlw	low STR_99
  8109  002D10  6FA3               	movwf	sprintf@f& (0+255),b
  8110  002D12  0E7E               	movlw	high STR_99
  8111  002D14  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8112  002D16  ECC9  F039         	call	_sprintf	;wreg free
  8113                           
  8114                           ;tela_ESTACIONARIA.h: 13: sprintf(&line3[16], "%3ds", tempo_limite_teste_estacionaria);
  8115  002D1A  0E61               	movlw	low (_line3+16)
  8116  002D1C  0100               	movlb	0	; () banked
  8117  002D1E  6FA1               	movwf	sprintf@wh& (0+255),b
  8118  002D20  0E01               	movlw	high (_line3+16)
  8119  002D22  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8120  002D24  0EED               	movlw	low STR_98
  8121  002D26  6FA3               	movwf	sprintf@f& (0+255),b
  8122  002D28  0E7F               	movlw	high STR_98
  8123  002D2A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8124  002D2C  C0E4  F0A5         	movff	_tempo_limite_teste_estacionaria,?_sprintf+4
  8125  002D30  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  8126  002D32  ECC9  F039         	call	_sprintf	;wreg free
  8127                           
  8128                           ;tela_ESTACIONARIA.h: 14: sprintf(line4, "#horimetro:%5d min", horimetro);
  8129  002D36  0E3C               	movlw	low _line4
  8130  002D38  0100               	movlb	0	; () banked
  8131  002D3A  6FA1               	movwf	sprintf@wh& (0+255),b
  8132  002D3C  0E01               	movlw	high _line4
  8133  002D3E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8134  002D40  0E26               	movlw	low STR_101
  8135  002D42  6FA3               	movwf	sprintf@f& (0+255),b
  8136  002D44  0E7D               	movlw	high STR_101
  8137  002D46  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8138  002D48  C04F  F0A5         	movff	_horimetro,?_sprintf+4
  8139  002D4C  C050  F0A6         	movff	_horimetro+1,?_sprintf+5
  8140  002D50  ECC9  F039         	call	_sprintf	;wreg free
  8141                           
  8142                           ;tela_ESTACIONARIA.h: 16: if (btPress(4)) {
  8143  002D54  0E04               	movlw	4
  8144  002D56  EC4A  F03B         	call	_btPress
  8145  002D5A  0900               	iorlw	0
  8146  002D5C  B4D8               	btfsc	status,2,c
  8147  002D5E  D002               	goto	l845
  8148                           
  8149                           ;tela_ESTACIONARIA.h: 17: option_posi++;
  8150  002D60  0100               	movlb	0	; () banked
  8151  002D62  2BDF               	incf	_option_posi& (0+255),f,b
  8152  002D64                     l845:
  8153  002D64  FFFF               	dw	65535	; assembler added errata NOP
  8154                           
  8155                           ;tela_ESTACIONARIA.h: 18: }
  8156                           ;tela_ESTACIONARIA.h: 19: if (btPress(1)) {
  8157                           
  8158                           ; BSR set to: 0
  8159  002D66  0E01               	movlw	1
  8160  002D68  EC4A  F03B         	call	_btPress
  8161  002D6C  0900               	iorlw	0
  8162  002D6E  B4D8               	btfsc	status,2,c
  8163  002D70  D04E               	goto	l847
  8164                           
  8165                           ;tela_ESTACIONARIA.h: 20: writeEEPROM_ext(7, tempo_limite_estacionaria);
  8166  002D72  C0E5  F08C         	movff	_tempo_limite_estacionaria,writeEEPROM_ext@data
  8167  002D76  0E07               	movlw	7
  8168  002D78  ECA6  F039         	call	_writeEEPROM_ext
  8169                           
  8170                           ;tela_ESTACIONARIA.h: 21: writeEEPROM_ext(13, tempo_limite_teste_estacionaria);
  8171  002D7C  C0E4  F08C         	movff	_tempo_limite_teste_estacionaria,writeEEPROM_ext@data
  8172  002D80  0E0D               	movlw	13
  8173  002D82  ECA6  F039         	call	_writeEEPROM_ext
  8174                           
  8175                           ;tela_ESTACIONARIA.h: 22: option_posi = 0;
  8176  002D86  0E00               	movlw	0
  8177  002D88  0100               	movlb	0	; () banked
  8178  002D8A  6FDF               	movwf	_option_posi& (0+255),b
  8179                           
  8180                           ; BSR set to: 0
  8181                           ;tela_ESTACIONARIA.h: 23: menu_posi = _menu_posi;
  8182  002D8C  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;tela_ESTACIONARIA.h: 24: }
  8186                           ;tela_ESTACIONARIA.h: 25: switch (option_posi) {
  8187  002D90  D03E               	goto	l847
  8188  002D92  FFFF               	dw	65535	; assembler added errata NOP
  8189                           
  8190                           ; BSR set to: 0
  8191                           ;tela_ESTACIONARIA.h: 27: blink(line2, 16,20 );
  8192                           
  8193                           ; BSR set to: 0
  8194  002D94  0E66               	movlw	low _line2
  8195  002D96  6F80               	movwf	blink@line& (0+255),b
  8196  002D98  0E01               	movlw	high _line2
  8197  002D9A  6F81               	movwf	(blink@line+1)& (0+255),b
  8198  002D9C  0E10               	movlw	16
  8199  002D9E  6F82               	movwf	blink@start& (0+255),b
  8200  002DA0  0E14               	movlw	20
  8201  002DA2  6F83               	movwf	blink@end& (0+255),b
  8202  002DA4  ECE2  F038         	call	_blink	;wreg free
  8203                           
  8204                           ;tela_ESTACIONARIA.h: 28: if (btPress(3)) {
  8205  002DA8  0E03               	movlw	3
  8206  002DAA  EC4A  F03B         	call	_btPress
  8207  002DAE  0900               	iorlw	0
  8208  002DB0  B4D8               	btfsc	status,2,c
  8209  002DB2  D002               	goto	l849
  8210                           
  8211                           ;tela_ESTACIONARIA.h: 29: tempo_limite_estacionaria++;
  8212  002DB4  0100               	movlb	0	; () banked
  8213  002DB6  2BE5               	incf	_tempo_limite_estacionaria& (0+255),f,b
  8214  002DB8                     l849:
  8215  002DB8  FFFF               	dw	65535	; assembler added errata NOP
  8216                           
  8217                           ;tela_ESTACIONARIA.h: 30: }
  8218                           ;tela_ESTACIONARIA.h: 31: if (btPress(2)) {
  8219                           
  8220                           ; BSR set to: 0
  8221  002DBA  0E02               	movlw	2
  8222  002DBC  EC4A  F03B         	call	_btPress
  8223  002DC0  0900               	iorlw	0
  8224  002DC2  B4D8               	btfsc	status,2,c
  8225  002DC4  D02E               	goto	l851
  8226                           
  8227                           ;tela_ESTACIONARIA.h: 32: tempo_limite_estacionaria--;
  8228  002DC6  0100               	movlb	0	; () banked
  8229  002DC8  07E5               	decf	_tempo_limite_estacionaria& (0+255),f,b
  8230                           
  8231                           ; BSR set to: 0
  8232                           ;tela_ESTACIONARIA.h: 33: }
  8233                           ;tela_ESTACIONARIA.h: 34: break;
  8234  002DCA  D02B               	goto	l851
  8235  002DCC  FFFF               	dw	65535	; assembler added errata NOP
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;tela_ESTACIONARIA.h: 36: blink(line3, 16,20 );
  8239                           
  8240                           ; BSR set to: 0
  8241  002DCE  0E51               	movlw	low _line3
  8242  002DD0  6F80               	movwf	blink@line& (0+255),b
  8243  002DD2  0E01               	movlw	high _line3
  8244  002DD4  6F81               	movwf	(blink@line+1)& (0+255),b
  8245  002DD6  0E10               	movlw	16
  8246  002DD8  6F82               	movwf	blink@start& (0+255),b
  8247  002DDA  0E14               	movlw	20
  8248  002DDC  6F83               	movwf	blink@end& (0+255),b
  8249  002DDE  ECE2  F038         	call	_blink	;wreg free
  8250                           
  8251                           ;tela_ESTACIONARIA.h: 37: if (btPress(3)) {
  8252  002DE2  0E03               	movlw	3
  8253  002DE4  EC4A  F03B         	call	_btPress
  8254  002DE8  0900               	iorlw	0
  8255  002DEA  B4D8               	btfsc	status,2,c
  8256  002DEC  D002               	goto	l853
  8257                           
  8258                           ;tela_ESTACIONARIA.h: 38: tempo_limite_teste_estacionaria++;
  8259  002DEE  0100               	movlb	0	; () banked
  8260  002DF0  2BE4               	incf	_tempo_limite_teste_estacionaria& (0+255),f,b
  8261  002DF2                     l853:
  8262  002DF2  FFFF               	dw	65535	; assembler added errata NOP
  8263                           
  8264                           ;tela_ESTACIONARIA.h: 39: }
  8265                           ;tela_ESTACIONARIA.h: 40: if (btPress(2)) {
  8266                           
  8267                           ; BSR set to: 0
  8268  002DF4  0E02               	movlw	2
  8269  002DF6  EC4A  F03B         	call	_btPress
  8270  002DFA  0900               	iorlw	0
  8271  002DFC  B4D8               	btfsc	status,2,c
  8272  002DFE  D011               	goto	l851
  8273                           
  8274                           ;tela_ESTACIONARIA.h: 41: tempo_limite_teste_estacionaria--;
  8275  002E00  0100               	movlb	0	; () banked
  8276  002E02  07E4               	decf	_tempo_limite_teste_estacionaria& (0+255),f,b
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;tela_ESTACIONARIA.h: 42: }
  8280                           ;tela_ESTACIONARIA.h: 43: break;
  8281  002E04  D00E               	goto	l851
  8282  002E06  FFFF               	dw	65535	; assembler added errata NOP
  8283                           
  8284                           ; BSR set to: 0
  8285                           
  8286                           ; BSR set to: 0
  8287  002E08  0E00               	movlw	0
  8288  002E0A  6FDF               	movwf	_option_posi& (0+255),b
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;tela_ESTACIONARIA.h: 46: }
  8292                           
  8293                           ;tela_ESTACIONARIA.h: 45: break;
  8294  002E0C  D00A               	goto	l851
  8295  002E0E                     l847:
  8296  002E0E  FFFF               	dw	65535	; assembler added errata NOP
  8297                           
  8298                           ; BSR set to: 0
  8299  002E10  0100               	movlb	0	; () banked
  8300  002E12  51DF               	movf	_option_posi& (0+255),w,b
  8301                           
  8302                           ; Switch size 1, requested type "space"
  8303                           ; Number of cases is 2, Range of values is 0 to 1
  8304                           ; switch strategies available:
  8305                           ; Name         Instructions Cycles
  8306                           ; simple_byte            7     4 (average)
  8307                           ;	Chosen strategy is simple_byte
  8308  002E14  0A00               	xorlw	0	; case 0
  8309  002E16  B4D8               	btfsc	status,2,c
  8310  002E18  D7BC               	goto	l848
  8311  002E1A  0A01               	xorlw	1	; case 1
  8312  002E1C  B4D8               	btfsc	status,2,c
  8313  002E1E  D7D6               	goto	l852
  8314  002E20  D7F2               	goto	l855
  8315  002E22                     l851:
  8316  002E22  FFFF               	dw	65535	; assembler added errata NOP
  8317                           
  8318                           ; BSR set to: 0
  8319  002E24  0012               	return		;funcret
  8320  002E26  FFFF               	dw	65535	; errata NOP
  8321  002E28                     __end_of_configurarEstacionaria:
  8322                           	opt stack 0
  8323                           tblptru	equ	0xFF8
  8324                           tblptrh	equ	0xFF7
  8325                           tblptrl	equ	0xFF6
  8326                           tablat	equ	0xFF5
  8327                           prodh	equ	0xFF4
  8328                           prodl	equ	0xFF3
  8329                           postinc0	equ	0xFEE
  8330                           wreg	equ	0xFE8
  8331                           postdec1	equ	0xFE5
  8332                           fsr1l	equ	0xFE1
  8333                           indf2	equ	0xFDF
  8334                           postinc2	equ	0xFDE
  8335                           fsr2h	equ	0xFDA
  8336                           fsr2l	equ	0xFD9
  8337                           status	equ	0xFD8
  8338                           
  8339 ;; *************** function _configuraTelefones *****************
  8340 ;; Defined at:
  8341 ;;		line 9 in file "tela_TELEFONES.h"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;		None
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  i               1   67[BANK0 ] unsigned char 
  8346 ;; Return value:  Size  Location     Type
  8347 ;;                  1    wreg      void 
  8348 ;; Registers used:
  8349 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8350 ;; Tracked objects:
  8351 ;;		On entry : 0/0
  8352 ;;		On exit  : 0/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8355 ;;      Params:         0       0       0       0       0       0       0
  8356 ;;      Locals:         0       3       0       0       0       0       0
  8357 ;;      Temps:          0       2       0       0       0       0       0
  8358 ;;      Totals:         0       5       0       0       0       0       0
  8359 ;;Total ram usage:        5 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:   10
  8362 ;; This function calls:
  8363 ;;		_blink
  8364 ;;		_btPress
  8365 ;;		_comunicarTeste
  8366 ;;		_sprintf
  8367 ;;		_writeEEPROM_ext
  8368 ;; This function is called by:
  8369 ;;		_main
  8370 ;; This function uses a non-reentrant model
  8371 ;;
  8372                           
  8373                           	psect	text21
  8374  001234                     __ptext21:
  8375                           	opt stack 0
  8376  001234                     _configuraTelefones:
  8377                           	opt stack 0
  8378  001234  FFFF               	dw	65535	; assembler added errata NOP
  8379                           
  8380                           ;tela_TELEFONES.h: 10: sprintf(&line1[1], "T1: %s", tel1);
  8381                           
  8382                           ;incstack = 0
  8383  001236  0E7C               	movlw	low (_line1+1)
  8384  001238  0100               	movlb	0	; () banked
  8385  00123A  6FA1               	movwf	sprintf@wh& (0+255),b
  8386  00123C  0E01               	movlw	high (_line1+1)
  8387  00123E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8388  001240  0EB8               	movlw	low STR_91
  8389  001242  6FA3               	movwf	sprintf@f& (0+255),b
  8390  001244  0E7F               	movlw	high STR_91
  8391  001246  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8392  001248  0EB0               	movlw	low _tel1
  8393  00124A  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8394  00124C  0E01               	movlw	high _tel1
  8395  00124E  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8396  001250  ECC9  F039         	call	_sprintf	;wreg free
  8397                           
  8398                           ;tela_TELEFONES.h: 11: sprintf(&line2[1], "T2: %s", tel2);
  8399  001254  0E67               	movlw	low (_line2+1)
  8400  001256  0100               	movlb	0	; () banked
  8401  001258  6FA1               	movwf	sprintf@wh& (0+255),b
  8402  00125A  0E01               	movlw	high (_line2+1)
  8403  00125C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8404  00125E  0EBF               	movlw	low STR_92
  8405  001260  6FA3               	movwf	sprintf@f& (0+255),b
  8406  001262  0E7F               	movlw	high STR_92
  8407  001264  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8408  001266  0EA4               	movlw	low _tel2
  8409  001268  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8410  00126A  0E01               	movlw	high _tel2
  8411  00126C  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8412  00126E  ECC9  F039         	call	_sprintf	;wreg free
  8413                           
  8414                           ;tela_TELEFONES.h: 12: sprintf(&line3[1], "%s", gsmOcupado ? " aguarde... " : "Enviar sm
      +                          s teste");
  8415  001272  0100               	movlb	0	; () banked
  8416  001274  51F4               	movf	_gsmOcupado& (0+255),w,b
  8417  001276  A4D8               	btfss	status,2,c
  8418  001278  D004               	goto	l803
  8419                           
  8420                           ; BSR set to: 0
  8421  00127A  0EDA               	movlw	low STR_95
  8422  00127C  6FC1               	movwf	_configuraTelefones$1463& (0+255),b
  8423  00127E  0E7D               	movlw	high STR_95
  8424  001280  D004               	goto	L18
  8425  001282                     l803:
  8426  001282  FFFF               	dw	65535	; assembler added errata NOP
  8427                           
  8428                           ; BSR set to: 0
  8429                           
  8430                           ; BSR set to: 0
  8431  001284  0ECC               	movlw	low STR_94
  8432  001286  6FC1               	movwf	_configuraTelefones$1463& (0+255),b
  8433  001288  0E7E               	movlw	high STR_94
  8434  00128A                     L18:
  8435  00128A  FFFF               	dw	65535	; assembler added errata NOP
  8436  00128C  6FC2               	movwf	(_configuraTelefones$1463+1)& (0+255),b
  8437                           
  8438                           ; BSR set to: 0
  8439                           
  8440                           ; BSR set to: 0
  8441  00128E  0E52               	movlw	low (_line3+1)
  8442  001290  6FA1               	movwf	sprintf@wh& (0+255),b
  8443  001292  0E01               	movlw	high (_line3+1)
  8444  001294  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8445  001296  0E12               	movlw	low (STR_89+9)
  8446  001298  6FA3               	movwf	sprintf@f& (0+255),b
  8447  00129A  0E7F               	movlw	high (STR_89+9)
  8448  00129C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8449  00129E  C0C1  F0A5         	movff	_configuraTelefones$1463,?_sprintf+4
  8450  0012A2  C0C2  F0A6         	movff	_configuraTelefones$1463+1,?_sprintf+5
  8451  0012A6  ECC9  F039         	call	_sprintf	;wreg free
  8452                           
  8453                           ;tela_TELEFONES.h: 14: if (ajust_tel == 0) {
  8454  0012AA  0100               	movlb	0	; () banked
  8455  0012AC  51DB               	movf	_ajust_tel& (0+255),w,b
  8456  0012AE  A4D8               	btfss	status,2,c
  8457  0012B0  D050               	goto	l811
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;tela_TELEFONES.h: 15: if (btPress(3)) {
  8461  0012B2  0E03               	movlw	3
  8462  0012B4  EC4A  F03B         	call	_btPress
  8463  0012B8  0900               	iorlw	0
  8464  0012BA  B4D8               	btfsc	status,2,c
  8465  0012BC  D003               	goto	l807
  8466                           
  8467                           ;tela_TELEFONES.h: 16: option_posi--;
  8468  0012BE  0100               	movlb	0	; () banked
  8469  0012C0  07DF               	decf	_option_posi& (0+255),f,b
  8470                           
  8471                           ;tela_TELEFONES.h: 17: } else if (btPress(2)) {
  8472  0012C2  D047               	goto	l811
  8473  0012C4                     l807:
  8474  0012C4  FFFF               	dw	65535	; assembler added errata NOP
  8475                           
  8476                           ; BSR set to: 0
  8477  0012C6  0E02               	movlw	2
  8478  0012C8  EC4A  F03B         	call	_btPress
  8479  0012CC  0900               	iorlw	0
  8480  0012CE  B4D8               	btfsc	status,2,c
  8481  0012D0  D003               	goto	l809
  8482                           
  8483                           ;tela_TELEFONES.h: 18: option_posi++;
  8484  0012D2  0100               	movlb	0	; () banked
  8485  0012D4  2BDF               	incf	_option_posi& (0+255),f,b
  8486                           
  8487                           ;tela_TELEFONES.h: 19: } else if (btPress(1)) {
  8488  0012D6  D03D               	goto	l811
  8489  0012D8                     l809:
  8490  0012D8  FFFF               	dw	65535	; assembler added errata NOP
  8491                           
  8492                           ; BSR set to: 0
  8493  0012DA  0E01               	movlw	1
  8494  0012DC  EC4A  F03B         	call	_btPress
  8495  0012E0  0900               	iorlw	0
  8496  0012E2  B4D8               	btfsc	status,2,c
  8497  0012E4  D036               	goto	l811
  8498                           
  8499                           ;tela_TELEFONES.h: 20: gsmOcupado = 0;
  8500  0012E6  0E00               	movlw	0
  8501  0012E8  0100               	movlb	0	; () banked
  8502  0012EA  6FF4               	movwf	_gsmOcupado& (0+255),b
  8503                           
  8504                           ;tela_TELEFONES.h: 21: option_posi = 0;
  8505  0012EC  0E00               	movlw	0
  8506  0012EE  6FDF               	movwf	_option_posi& (0+255),b
  8507                           
  8508                           ;tela_TELEFONES.h: 22: tel_posi = 0;
  8509  0012F0  0E00               	movlw	0
  8510  0012F2  6FDC               	movwf	_tel_posi& (0+255),b
  8511                           
  8512                           ;tela_TELEFONES.h: 23: ajust_tel = 0;
  8513  0012F4  0E00               	movlw	0
  8514  0012F6  6FDB               	movwf	_ajust_tel& (0+255),b
  8515                           
  8516                           ;tela_TELEFONES.h: 24: char i = 0;
  8517  0012F8  0E00               	movlw	0
  8518  0012FA  6FC3               	movwf	configuraTelefones@i& (0+255),b
  8519                           
  8520                           ;tela_TELEFONES.h: 25: for (i = 0; i < 11; i++) {
  8521  0012FC  0E00               	movlw	0
  8522  0012FE  6FC3               	movwf	configuraTelefones@i& (0+255),b
  8523  001300                     l7314:
  8524  001300  FFFF               	dw	65535	; assembler added errata NOP
  8525                           
  8526                           ; BSR set to: 0
  8527  001302  0E0A               	movlw	10
  8528  001304  65C3               	cpfsgt	configuraTelefones@i& (0+255),b
  8529  001306  D001               	goto	l812
  8530  001308  D021               	goto	u8310
  8531  00130A                     l812:
  8532  00130A  FFFF               	dw	65535	; assembler added errata NOP
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;tela_TELEFONES.h: 26: writeEEPROM_ext((20 + i), tel1[i]);
  8536                           
  8537                           ; BSR set to: 0
  8538  00130C  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8539  00130E  0D01               	mullw	1
  8540  001310  0EB0               	movlw	low _tel1
  8541  001312  24F3               	addwf	prodl,w,c
  8542  001314  6ED9               	movwf	fsr2l,c
  8543  001316  0E01               	movlw	high _tel1
  8544  001318  20F4               	addwfc	prodh,w,c
  8545  00131A  6EDA               	movwf	fsr2h,c
  8546  00131C  50DF               	movf	indf2,w,c
  8547  00131E  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8548  001320  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8549  001322  0F14               	addlw	20
  8550  001324  ECA6  F039         	call	_writeEEPROM_ext
  8551                           
  8552                           ;tela_TELEFONES.h: 27: writeEEPROM_ext((40 + i), tel2[i]);
  8553  001328  0100               	movlb	0	; () banked
  8554  00132A  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8555  00132C  0D01               	mullw	1
  8556  00132E  0EA4               	movlw	low _tel2
  8557  001330  24F3               	addwf	prodl,w,c
  8558  001332  6ED9               	movwf	fsr2l,c
  8559  001334  0E01               	movlw	high _tel2
  8560  001336  20F4               	addwfc	prodh,w,c
  8561  001338  6EDA               	movwf	fsr2h,c
  8562  00133A  50DF               	movf	indf2,w,c
  8563  00133C  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8564  00133E  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8565  001340  0F28               	addlw	40
  8566  001342  ECA6  F039         	call	_writeEEPROM_ext
  8567  001346  0100               	movlb	0	; () banked
  8568  001348  2BC3               	incf	configuraTelefones@i& (0+255),f,b
  8569  00134A  D7DA               	goto	l7314
  8570  00134C                     u8310:
  8571  00134C  FFFF               	dw	65535	; assembler added errata NOP
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;tela_TELEFONES.h: 28: }
  8575                           ;tela_TELEFONES.h: 29: menu_posi = _menu_posi;
  8576  00134E  C0DD  F0DE         	movff	__menu_posi,_menu_posi
  8577  001352                     l811:
  8578  001352  FFFF               	dw	65535	; assembler added errata NOP
  8579                           
  8580                           ;tela_TELEFONES.h: 30: }
  8581                           ;tela_TELEFONES.h: 31: }
  8582                           ;tela_TELEFONES.h: 32: if (ajust_tel == 1) {
  8583                           
  8584                           ; BSR set to: 0
  8585                           
  8586                           ; BSR set to: 0
  8587                           
  8588                           ; BSR set to: 0
  8589                           
  8590                           ; BSR set to: 0
  8591  001354  0100               	movlb	0	; () banked
  8592  001356  05DB               	decf	_ajust_tel& (0+255),w,b
  8593  001358  A4D8               	btfss	status,2,c
  8594  00135A  D11A               	goto	l818
  8595                           
  8596                           ; BSR set to: 0
  8597                           ;tela_TELEFONES.h: 33: if (btPress(4)) {
  8598  00135C  0E04               	movlw	4
  8599  00135E  EC4A  F03B         	call	_btPress
  8600  001362  0900               	iorlw	0
  8601  001364  B4D8               	btfsc	status,2,c
  8602  001366  D003               	goto	l815
  8603                           
  8604                           ;tela_TELEFONES.h: 34: tel_posi++;
  8605  001368  0100               	movlb	0	; () banked
  8606  00136A  2BDC               	incf	_tel_posi& (0+255),f,b
  8607                           
  8608                           ;tela_TELEFONES.h: 35: } else if (btPress(1)) {
  8609  00136C  D111               	goto	l818
  8610  00136E                     l815:
  8611  00136E  FFFF               	dw	65535	; assembler added errata NOP
  8612                           
  8613                           ; BSR set to: 0
  8614  001370  0E01               	movlw	1
  8615  001372  EC4A  F03B         	call	_btPress
  8616  001376  0900               	iorlw	0
  8617  001378  B4D8               	btfsc	status,2,c
  8618  00137A  D10A               	goto	l818
  8619                           
  8620                           ;tela_TELEFONES.h: 36: tel_posi = 0;
  8621  00137C  0E00               	movlw	0
  8622  00137E  0100               	movlb	0	; () banked
  8623  001380  6FDC               	movwf	_tel_posi& (0+255),b
  8624                           
  8625                           ;tela_TELEFONES.h: 37: ajust_tel = 0;
  8626  001382  0E00               	movlw	0
  8627  001384  6FDB               	movwf	_ajust_tel& (0+255),b
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;tela_TELEFONES.h: 38: }
  8631                           ;tela_TELEFONES.h: 39: }
  8632                           ;tela_TELEFONES.h: 41: switch (option_posi) {
  8633                           
  8634                           ; BSR set to: 0
  8635                           
  8636                           ; BSR set to: 0
  8637  001386  D104               	goto	l818
  8638  001388  FFFF               	dw	65535	; assembler added errata NOP
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;tela_TELEFONES.h: 43: line1[0] = '>';
  8642                           
  8643                           ; BSR set to: 0
  8644  00138A  0E3E               	movlw	62
  8645  00138C  0101               	movlb	1	; () banked
  8646  00138E  6F7B               	movwf	_line1& (0+255),b
  8647                           
  8648                           ; BSR set to: 1
  8649                           ;tela_TELEFONES.h: 44: if (btPress(4)) {
  8650  001390  0E04               	movlw	4
  8651  001392  EC4A  F03B         	call	_btPress
  8652  001396  0900               	iorlw	0
  8653  001398  B4D8               	btfsc	status,2,c
  8654  00139A  D003               	goto	l820
  8655                           
  8656                           ;tela_TELEFONES.h: 45: ajust_tel = 1;
  8657  00139C  0E01               	movlw	1
  8658  00139E  0100               	movlb	0	; () banked
  8659  0013A0  6FDB               	movwf	_ajust_tel& (0+255),b
  8660  0013A2                     l820:
  8661  0013A2  FFFF               	dw	65535	; assembler added errata NOP
  8662                           
  8663                           ;tela_TELEFONES.h: 46: }
  8664                           ;tela_TELEFONES.h: 47: if (ajust_tel) {
  8665  0013A4  0100               	movlb	0	; () banked
  8666  0013A6  51DB               	movf	_ajust_tel& (0+255),w,b
  8667  0013A8  B4D8               	btfsc	status,2,c
  8668  0013AA  D0FF               	goto	l828
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;tela_TELEFONES.h: 48: blink(line1, (tel_posi + 6), (tel_posi + 6));
  8672  0013AC  0E7B               	movlw	low _line1
  8673  0013AE  6F80               	movwf	blink@line& (0+255),b
  8674  0013B0  0E01               	movlw	high _line1
  8675  0013B2  6F81               	movwf	(blink@line+1)& (0+255),b
  8676  0013B4  51DC               	movf	_tel_posi& (0+255),w,b
  8677  0013B6  0F06               	addlw	6
  8678  0013B8  6F82               	movwf	blink@start& (0+255),b
  8679  0013BA  51DC               	movf	_tel_posi& (0+255),w,b
  8680  0013BC  0F06               	addlw	6
  8681  0013BE  6F83               	movwf	blink@end& (0+255),b
  8682  0013C0  ECE2  F038         	call	_blink	;wreg free
  8683                           
  8684                           ;tela_TELEFONES.h: 49: if ((tel_posi + 2) > sizeof (tel1)) {
  8685  0013C4  0100               	movlb	0	; () banked
  8686  0013C6  51DC               	movf	_tel_posi& (0+255),w,b
  8687  0013C8  6FBF               	movwf	??_configuraTelefones& (0+255),b
  8688  0013CA  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
  8689  0013CC  0E02               	movlw	2
  8690  0013CE  27BF               	addwf	??_configuraTelefones& (0+255),f,b
  8691  0013D0  0E00               	movlw	0
  8692  0013D2  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8693  0013D4  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8694  0013D6  E104               	bnz	u8370
  8695  0013D8  0E0D               	movlw	13
  8696  0013DA  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
  8697  0013DC  A0D8               	btfss	status,0,c
  8698  0013DE  D004               	goto	l822
  8699  0013E0                     u8370:
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;tela_TELEFONES.h: 50: tel_posi = 0;
  8703  0013E0  0E00               	movlw	0
  8704  0013E2  6FDC               	movwf	_tel_posi& (0+255),b
  8705                           
  8706                           ;tela_TELEFONES.h: 51: ajust_tel = 0;
  8707  0013E4  0E00               	movlw	0
  8708  0013E6  6FDB               	movwf	_ajust_tel& (0+255),b
  8709  0013E8                     l822:
  8710  0013E8  FFFF               	dw	65535	; assembler added errata NOP
  8711                           
  8712                           ; BSR set to: 0
  8713                           ;tela_TELEFONES.h: 52: }
  8714                           ;tela_TELEFONES.h: 53: if (btPress(3)) {
  8715                           
  8716                           ; BSR set to: 0
  8717  0013EA  0E03               	movlw	3
  8718  0013EC  EC4A  F03B         	call	_btPress
  8719  0013F0  0900               	iorlw	0
  8720  0013F2  B4D8               	btfsc	status,2,c
  8721  0013F4  D00A               	goto	l823
  8722                           
  8723                           ;tela_TELEFONES.h: 54: tel1[tel_posi]++;
  8724  0013F6  0100               	movlb	0	; () banked
  8725  0013F8  51DC               	movf	_tel_posi& (0+255),w,b
  8726  0013FA  0D01               	mullw	1
  8727  0013FC  0EB0               	movlw	low _tel1
  8728  0013FE  24F3               	addwf	prodl,w,c
  8729  001400  6ED9               	movwf	fsr2l,c
  8730  001402  0E01               	movlw	high _tel1
  8731  001404  20F4               	addwfc	prodh,w,c
  8732  001406  6EDA               	movwf	fsr2h,c
  8733  001408  2ADF               	incf	indf2,f,c
  8734  00140A                     l823:
  8735  00140A  FFFF               	dw	65535	; assembler added errata NOP
  8736                           
  8737                           ;tela_TELEFONES.h: 55: }
  8738                           ;tela_TELEFONES.h: 56: if (btPress(2)) {
  8739                           
  8740                           ; BSR set to: 0
  8741  00140C  0E02               	movlw	2
  8742  00140E  EC4A  F03B         	call	_btPress
  8743  001412  0900               	iorlw	0
  8744  001414  B4D8               	btfsc	status,2,c
  8745  001416  D00A               	goto	l824
  8746                           
  8747                           ;tela_TELEFONES.h: 57: tel1[tel_posi]--;
  8748  001418  0100               	movlb	0	; () banked
  8749  00141A  51DC               	movf	_tel_posi& (0+255),w,b
  8750  00141C  0D01               	mullw	1
  8751  00141E  0EB0               	movlw	low _tel1
  8752  001420  24F3               	addwf	prodl,w,c
  8753  001422  6ED9               	movwf	fsr2l,c
  8754  001424  0E01               	movlw	high _tel1
  8755  001426  20F4               	addwfc	prodh,w,c
  8756  001428  6EDA               	movwf	fsr2h,c
  8757  00142A  06DF               	decf	indf2,f,c
  8758  00142C                     l824:
  8759  00142C  FFFF               	dw	65535	; assembler added errata NOP
  8760                           
  8761                           ;tela_TELEFONES.h: 58: }
  8762                           ;tela_TELEFONES.h: 59: if ((tel1[tel_posi] > 57) | (tel1[tel_posi] < 48)) {
  8763  00142E  0100               	movlb	0	; () banked
  8764  001430  51DC               	movf	_tel_posi& (0+255),w,b
  8765  001432  0D01               	mullw	1
  8766  001434  0EB0               	movlw	low _tel1
  8767  001436  24F3               	addwf	prodl,w,c
  8768  001438  6ED9               	movwf	fsr2l,c
  8769  00143A  0E01               	movlw	high _tel1
  8770  00143C  20F4               	addwfc	prodh,w,c
  8771  00143E  6EDA               	movwf	fsr2h,c
  8772  001440  0E3A               	movlw	58
  8773  001442  60DF               	cpfslt	indf2,c
  8774  001444  D00B               	goto	u8410
  8775                           
  8776                           ; BSR set to: 0
  8777  001446  51DC               	movf	_tel_posi& (0+255),w,b
  8778  001448  0D01               	mullw	1
  8779  00144A  0EB0               	movlw	low _tel1
  8780  00144C  24F3               	addwf	prodl,w,c
  8781  00144E  6ED9               	movwf	fsr2l,c
  8782  001450  0E01               	movlw	high _tel1
  8783  001452  20F4               	addwfc	prodh,w,c
  8784  001454  6EDA               	movwf	fsr2h,c
  8785  001456  0E30               	movlw	48
  8786  001458  60DF               	cpfslt	indf2,c
  8787  00145A  D0A7               	goto	l828
  8788  00145C                     u8410:
  8789  00145C  FFFF               	dw	65535	; assembler added errata NOP
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;tela_TELEFONES.h: 60: tel1[tel_posi] = 48;
  8793                           
  8794                           ; BSR set to: 0
  8795  00145E  51DC               	movf	_tel_posi& (0+255),w,b
  8796  001460  0D01               	mullw	1
  8797  001462  0EB0               	movlw	low _tel1
  8798  001464  24F3               	addwf	prodl,w,c
  8799  001466  6ED9               	movwf	fsr2l,c
  8800  001468  0E01               	movlw	high _tel1
  8801  00146A  D071               	goto	L19
  8802  00146C  FFFF               	dw	65535	; assembler added errata NOP
  8803                           
  8804                           ; BSR set to: 0
  8805                           ;tela_TELEFONES.h: 65: line2[0] = '>';
  8806                           
  8807                           ; BSR set to: 0
  8808  00146E  0E3E               	movlw	62
  8809  001470  0101               	movlb	1	; () banked
  8810  001472  6F66               	movwf	_line2& (0+255),b
  8811                           
  8812                           ; BSR set to: 1
  8813                           ;tela_TELEFONES.h: 66: if (btPress(4)) {
  8814  001474  0E04               	movlw	4
  8815  001476  EC4A  F03B         	call	_btPress
  8816  00147A  0900               	iorlw	0
  8817  00147C  B4D8               	btfsc	status,2,c
  8818  00147E  D003               	goto	l830
  8819                           
  8820                           ;tela_TELEFONES.h: 67: ajust_tel = 1;
  8821  001480  0E01               	movlw	1
  8822  001482  0100               	movlb	0	; () banked
  8823  001484  6FDB               	movwf	_ajust_tel& (0+255),b
  8824  001486                     l830:
  8825  001486  FFFF               	dw	65535	; assembler added errata NOP
  8826                           
  8827                           ;tela_TELEFONES.h: 68: }
  8828                           ;tela_TELEFONES.h: 69: if (ajust_tel) {
  8829  001488  0100               	movlb	0	; () banked
  8830  00148A  51DB               	movf	_ajust_tel& (0+255),w,b
  8831  00148C  B4D8               	btfsc	status,2,c
  8832  00148E  D08D               	goto	l828
  8833                           
  8834                           ; BSR set to: 0
  8835                           ;tela_TELEFONES.h: 70: blink(line2, (tel_posi + 6), (tel_posi + 6));
  8836  001490  0E66               	movlw	low _line2
  8837  001492  6F80               	movwf	blink@line& (0+255),b
  8838  001494  0E01               	movlw	high _line2
  8839  001496  6F81               	movwf	(blink@line+1)& (0+255),b
  8840  001498  51DC               	movf	_tel_posi& (0+255),w,b
  8841  00149A  0F06               	addlw	6
  8842  00149C  6F82               	movwf	blink@start& (0+255),b
  8843  00149E  51DC               	movf	_tel_posi& (0+255),w,b
  8844  0014A0  0F06               	addlw	6
  8845  0014A2  6F83               	movwf	blink@end& (0+255),b
  8846  0014A4  ECE2  F038         	call	_blink	;wreg free
  8847                           
  8848                           ;tela_TELEFONES.h: 71: if ((tel_posi + 2) > sizeof (tel2)) {
  8849  0014A8  0100               	movlb	0	; () banked
  8850  0014AA  51DC               	movf	_tel_posi& (0+255),w,b
  8851  0014AC  6FBF               	movwf	??_configuraTelefones& (0+255),b
  8852  0014AE  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
  8853  0014B0  0E02               	movlw	2
  8854  0014B2  27BF               	addwf	??_configuraTelefones& (0+255),f,b
  8855  0014B4  0E00               	movlw	0
  8856  0014B6  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8857  0014B8  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8858  0014BA  E104               	bnz	u8440
  8859  0014BC  0E0D               	movlw	13
  8860  0014BE  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
  8861  0014C0  A0D8               	btfss	status,0,c
  8862  0014C2  D004               	goto	l832
  8863  0014C4                     u8440:
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;tela_TELEFONES.h: 72: tel_posi = 0;
  8867  0014C4  0E00               	movlw	0
  8868  0014C6  6FDC               	movwf	_tel_posi& (0+255),b
  8869                           
  8870                           ;tela_TELEFONES.h: 73: ajust_tel = 0;
  8871  0014C8  0E00               	movlw	0
  8872  0014CA  6FDB               	movwf	_ajust_tel& (0+255),b
  8873  0014CC                     l832:
  8874  0014CC  FFFF               	dw	65535	; assembler added errata NOP
  8875                           
  8876                           ; BSR set to: 0
  8877                           ;tela_TELEFONES.h: 74: }
  8878                           ;tela_TELEFONES.h: 75: if (btPress(3)) {
  8879                           
  8880                           ; BSR set to: 0
  8881  0014CE  0E03               	movlw	3
  8882  0014D0  EC4A  F03B         	call	_btPress
  8883  0014D4  0900               	iorlw	0
  8884  0014D6  B4D8               	btfsc	status,2,c
  8885  0014D8  D00A               	goto	l833
  8886                           
  8887                           ;tela_TELEFONES.h: 76: tel2[tel_posi]++;
  8888  0014DA  0100               	movlb	0	; () banked
  8889  0014DC  51DC               	movf	_tel_posi& (0+255),w,b
  8890  0014DE  0D01               	mullw	1
  8891  0014E0  0EA4               	movlw	low _tel2
  8892  0014E2  24F3               	addwf	prodl,w,c
  8893  0014E4  6ED9               	movwf	fsr2l,c
  8894  0014E6  0E01               	movlw	high _tel2
  8895  0014E8  20F4               	addwfc	prodh,w,c
  8896  0014EA  6EDA               	movwf	fsr2h,c
  8897  0014EC  2ADF               	incf	indf2,f,c
  8898  0014EE                     l833:
  8899  0014EE  FFFF               	dw	65535	; assembler added errata NOP
  8900                           
  8901                           ;tela_TELEFONES.h: 77: }
  8902                           ;tela_TELEFONES.h: 78: if (btPress(2)) {
  8903                           
  8904                           ; BSR set to: 0
  8905  0014F0  0E02               	movlw	2
  8906  0014F2  EC4A  F03B         	call	_btPress
  8907  0014F6  0900               	iorlw	0
  8908  0014F8  B4D8               	btfsc	status,2,c
  8909  0014FA  D00A               	goto	l834
  8910                           
  8911                           ;tela_TELEFONES.h: 79: tel2[tel_posi]--;
  8912  0014FC  0100               	movlb	0	; () banked
  8913  0014FE  51DC               	movf	_tel_posi& (0+255),w,b
  8914  001500  0D01               	mullw	1
  8915  001502  0EA4               	movlw	low _tel2
  8916  001504  24F3               	addwf	prodl,w,c
  8917  001506  6ED9               	movwf	fsr2l,c
  8918  001508  0E01               	movlw	high _tel2
  8919  00150A  20F4               	addwfc	prodh,w,c
  8920  00150C  6EDA               	movwf	fsr2h,c
  8921  00150E  06DF               	decf	indf2,f,c
  8922  001510                     l834:
  8923  001510  FFFF               	dw	65535	; assembler added errata NOP
  8924                           
  8925                           ;tela_TELEFONES.h: 80: }
  8926                           ;tela_TELEFONES.h: 81: if ((tel2[tel_posi] > 57) | (tel2[tel_posi] < 48)) {
  8927  001512  0100               	movlb	0	; () banked
  8928  001514  51DC               	movf	_tel_posi& (0+255),w,b
  8929  001516  0D01               	mullw	1
  8930  001518  0EA4               	movlw	low _tel2
  8931  00151A  24F3               	addwf	prodl,w,c
  8932  00151C  6ED9               	movwf	fsr2l,c
  8933  00151E  0E01               	movlw	high _tel2
  8934  001520  20F4               	addwfc	prodh,w,c
  8935  001522  6EDA               	movwf	fsr2h,c
  8936  001524  0E3A               	movlw	58
  8937  001526  60DF               	cpfslt	indf2,c
  8938  001528  D00B               	goto	u8480
  8939                           
  8940                           ; BSR set to: 0
  8941  00152A  51DC               	movf	_tel_posi& (0+255),w,b
  8942  00152C  0D01               	mullw	1
  8943  00152E  0EA4               	movlw	low _tel2
  8944  001530  24F3               	addwf	prodl,w,c
  8945  001532  6ED9               	movwf	fsr2l,c
  8946  001534  0E01               	movlw	high _tel2
  8947  001536  20F4               	addwfc	prodh,w,c
  8948  001538  6EDA               	movwf	fsr2h,c
  8949  00153A  0E30               	movlw	48
  8950  00153C  60DF               	cpfslt	indf2,c
  8951  00153E  D035               	goto	l828
  8952  001540                     u8480:
  8953  001540  FFFF               	dw	65535	; assembler added errata NOP
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;tela_TELEFONES.h: 82: tel2[tel_posi] = 48;
  8957                           
  8958                           ; BSR set to: 0
  8959  001542  51DC               	movf	_tel_posi& (0+255),w,b
  8960  001544  0D01               	mullw	1
  8961  001546  0EA4               	movlw	low _tel2
  8962  001548  24F3               	addwf	prodl,w,c
  8963  00154A  6ED9               	movwf	fsr2l,c
  8964  00154C  0E01               	movlw	high _tel2
  8965  00154E                     L19:
  8966  00154E  FFFF               	dw	65535	; assembler added errata NOP
  8967  001550  20F4               	addwfc	prodh,w,c
  8968  001552  6EDA               	movwf	fsr2h,c
  8969  001554  0E30               	movlw	48
  8970  001556  6EDF               	movwf	indf2,c
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;tela_TELEFONES.h: 83: }
  8974                           ;tela_TELEFONES.h: 84: }
  8975                           ;tela_TELEFONES.h: 85: break;
  8976                           
  8977                           ; BSR set to: 0
  8978  001558  D028               	goto	l828
  8979  00155A  FFFF               	dw	65535	; assembler added errata NOP
  8980                           
  8981                           ; BSR set to: 0
  8982                           ;tela_TELEFONES.h: 87: line3[0] = '>';
  8983                           
  8984                           ; BSR set to: 0
  8985  00155C  0E3E               	movlw	62
  8986  00155E  0101               	movlb	1	; () banked
  8987  001560  6F51               	movwf	_line3& (0+255),b
  8988                           
  8989                           ; BSR set to: 1
  8990                           ;tela_TELEFONES.h: 88: if (btPress(4) && intensidadeSinal != 'x' && !gsmOcupado) {
  8991  001562  0E04               	movlw	4
  8992  001564  EC4A  F03B         	call	_btPress
  8993  001568  0900               	iorlw	0
  8994  00156A  B4D8               	btfsc	status,2,c
  8995  00156C  D01E               	goto	l828
  8996  00156E  0E78               	movlw	120
  8997  001570  0100               	movlb	0	; () banked
  8998  001572  19FF               	xorwf	_intensidadeSinal& (0+255),w,b
  8999  001574  B4D8               	btfsc	status,2,c
  9000  001576  D019               	goto	l828
  9001                           
  9002                           ; BSR set to: 0
  9003  001578  51F4               	movf	_gsmOcupado& (0+255),w,b
  9004  00157A  A4D8               	btfss	status,2,c
  9005  00157C  D016               	goto	l828
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;tela_TELEFONES.h: 89: gsmOcupado = 1;
  9009  00157E  0E01               	movlw	1
  9010  001580  6FF4               	movwf	_gsmOcupado& (0+255),b
  9011                           
  9012                           ;tela_TELEFONES.h: 90: telefoneSelecionado = 0;
  9013  001582  0E00               	movlw	0
  9014  001584  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9015                           
  9016                           ; BSR set to: 0
  9017                           ;tela_TELEFONES.h: 91: }
  9018                           ;tela_TELEFONES.h: 92: break;
  9019  001586  D011               	goto	l828
  9020  001588  FFFF               	dw	65535	; assembler added errata NOP
  9021                           
  9022                           ; BSR set to: 0
  9023                           
  9024                           ; BSR set to: 0
  9025  00158A  0E00               	movlw	0
  9026  00158C  6FDF               	movwf	_option_posi& (0+255),b
  9027                           
  9028                           ; BSR set to: 0
  9029                           ;tela_TELEFONES.h: 96: }
  9030                           
  9031                           ;tela_TELEFONES.h: 95: break;
  9032  00158E  D00D               	goto	l828
  9033  001590                     l818:
  9034  001590  FFFF               	dw	65535	; assembler added errata NOP
  9035                           
  9036                           ; BSR set to: 0
  9037  001592  0100               	movlb	0	; () banked
  9038  001594  51DF               	movf	_option_posi& (0+255),w,b
  9039                           
  9040                           ; Switch size 1, requested type "space"
  9041                           ; Number of cases is 3, Range of values is 0 to 2
  9042                           ; switch strategies available:
  9043                           ; Name         Instructions Cycles
  9044                           ; simple_byte           10     6 (average)
  9045                           ;	Chosen strategy is simple_byte
  9046  001596  0A00               	xorlw	0	; case 0
  9047  001598  B4D8               	btfsc	status,2,c
  9048  00159A  D6F6               	goto	l819
  9049  00159C  0A01               	xorlw	1	; case 1
  9050  00159E  B4D8               	btfsc	status,2,c
  9051  0015A0  D765               	goto	l829
  9052  0015A2  0A03               	xorlw	3	; case 2
  9053  0015A4  B4D8               	btfsc	status,2,c
  9054  0015A6  D7D9               	goto	l838
  9055  0015A8  D7EF               	goto	l840
  9056  0015AA                     l828:
  9057  0015AA  FFFF               	dw	65535	; assembler added errata NOP
  9058                           
  9059                           ;tela_TELEFONES.h: 97: if (gsmOcupado) {
  9060                           
  9061                           ; BSR set to: 0
  9062  0015AC  0100               	movlb	0	; () banked
  9063  0015AE  51F4               	movf	_gsmOcupado& (0+255),w,b
  9064  0015B0  A4D8               	btfss	status,2,c
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;tela_TELEFONES.h: 98: comunicarTeste();
  9068  0015B2  EC0A  F012         	call	_comunicarTeste	;wreg free
  9069  0015B6  0012               	return		;funcret
  9070  0015B8  FFFF               	dw	65535	; errata NOP
  9071  0015BA                     __end_of_configuraTelefones:
  9072                           	opt stack 0
  9073                           tblptru	equ	0xFF8
  9074                           tblptrh	equ	0xFF7
  9075                           tblptrl	equ	0xFF6
  9076                           tablat	equ	0xFF5
  9077                           prodh	equ	0xFF4
  9078                           prodl	equ	0xFF3
  9079                           postinc0	equ	0xFEE
  9080                           wreg	equ	0xFE8
  9081                           postdec1	equ	0xFE5
  9082                           fsr1l	equ	0xFE1
  9083                           indf2	equ	0xFDF
  9084                           postinc2	equ	0xFDE
  9085                           fsr2h	equ	0xFDA
  9086                           fsr2l	equ	0xFD9
  9087                           status	equ	0xFD8
  9088                           
  9089 ;; *************** function _comunicarTeste *****************
  9090 ;; Defined at:
  9091 ;;		line 57 in file "comunicacao.h"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;		None
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;		None
  9096 ;; Return value:  Size  Location     Type
  9097 ;;                  1    wreg      void 
  9098 ;; Registers used:
  9099 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9105 ;;      Params:         0       0       0       0       0       0       0
  9106 ;;      Locals:         0       2       0       0       0       0       0
  9107 ;;      Temps:          0       2       0       0       0       0       0
  9108 ;;      Totals:         0       4       0       0       0       0       0
  9109 ;;Total ram usage:        4 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    9
  9112 ;; This function calls:
  9113 ;;		_aguardaBuffer
  9114 ;;		_delay
  9115 ;;		_limparBuffer
  9116 ;;		_printf
  9117 ;;		_writeChar
  9118 ;; This function is called by:
  9119 ;;		_configuraTelefones
  9120 ;; This function uses a non-reentrant model
  9121 ;;
  9122                           
  9123                           	psect	text22
  9124  002414                     __ptext22:
  9125                           	opt stack 0
  9126  002414                     _comunicarTeste:
  9127                           	opt stack 0
  9128  002414  FFFF               	dw	65535	; assembler added errata NOP
  9129                           
  9130                           ;comunicacao.h: 58: switch (etapaComunicacao) {
  9131                           
  9132                           ;incstack = 0
  9133  002416  D0D1               	goto	l321
  9134  002418  FFFF               	dw	65535	; assembler added errata NOP
  9135                           
  9136                           ;comunicacao.h: 60: limparBuffer();
  9137  00241A  ECE0  F037         	call	_limparBuffer	;wreg free
  9138                           
  9139                           ;comunicacao.h: 61: printf("AT\r\n");
  9140  00241E  0EDE               	movlw	low STR_4
  9141  002420  0100               	movlb	0	; () banked
  9142  002422  6FA1               	movwf	printf@f& (0+255),b
  9143  002424  0E7F               	movlw	high STR_4
  9144  002426  6FA2               	movwf	(printf@f+1)& (0+255),b
  9145  002428  ECC4  F038         	call	_printf	;wreg free
  9146                           
  9147                           ;comunicacao.h: 62: etapaComunicacao++;
  9148  00242C  4A51               	infsnz	_etapaComunicacao,f,c
  9149  00242E  2A52               	incf	_etapaComunicacao+1,f,c
  9150                           
  9151                           ;comunicacao.h: 63: timerEtapaComunicacao = 5;
  9152  002430  0E05               	movlw	5
  9153  002432  0100               	movlb	0	; () banked
  9154  002434  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9155                           
  9156                           ;comunicacao.h: 64: break;
  9157  002436  D0DC               	goto	l323
  9158  002438  FFFF               	dw	65535	; assembler added errata NOP
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;comunicacao.h: 66: if (aguardaBuffer("OK")) {
  9162                           
  9163                           ; BSR set to: 0
  9164  00243A  0EFA               	movlw	low STR_5
  9165  00243C  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9166  00243E  0E7F               	movlw	high STR_5
  9167  002440  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9168  002442  ECA6  F038         	call	_aguardaBuffer	;wreg free
  9169  002446  0900               	iorlw	0
  9170  002448  B4D8               	btfsc	status,2,c
  9171  00244A  D00E               	goto	l325
  9172                           
  9173                           ;comunicacao.h: 67: limparBuffer();
  9174  00244C  ECE0  F037         	call	_limparBuffer	;wreg free
  9175                           
  9176                           ;comunicacao.h: 68: printf("AT+CMGF=1\r\n");
  9177  002450  0ED9               	movlw	low STR_10
  9178  002452  0100               	movlb	0	; () banked
  9179  002454  6FA1               	movwf	printf@f& (0+255),b
  9180  002456  0E7E               	movlw	high STR_10
  9181  002458  6FA2               	movwf	(printf@f+1)& (0+255),b
  9182  00245A  ECC4  F038         	call	_printf	;wreg free
  9183                           
  9184                           ;comunicacao.h: 69: etapaComunicacao++;
  9185  00245E  4A51               	infsnz	_etapaComunicacao,f,c
  9186  002460  2A52               	incf	_etapaComunicacao+1,f,c
  9187                           
  9188                           ;comunicacao.h: 70: timerEtapaComunicacao = 5;
  9189  002462  0E05               	movlw	5
  9190  002464  0100               	movlb	0	; () banked
  9191  002466  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9192  002468                     l325:
  9193  002468  FFFF               	dw	65535	; assembler added errata NOP
  9194                           
  9195                           ;comunicacao.h: 71: }
  9196                           ;comunicacao.h: 72: if (!timerEtapaComunicacao) {
  9197                           
  9198                           ; BSR set to: 0
  9199  00246A  0100               	movlb	0	; () banked
  9200  00246C  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  9201  00246E  A4D8               	btfss	status,2,c
  9202  002470  D0BF               	goto	l323
  9203                           
  9204                           ; BSR set to: 0
  9205                           ;comunicacao.h: 73: etapaComunicacao = 0;
  9206  002472  0E00               	movlw	0
  9207  002474  6E52               	movwf	_etapaComunicacao+1,c
  9208  002476  0E00               	movlw	0
  9209  002478  6E51               	movwf	_etapaComunicacao,c
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;comunicacao.h: 74: writeChar(0x1A);
  9213  00247A  0E1A               	movlw	26
  9214  00247C  6F80               	movwf	writeChar@hex& (0+255),b
  9215  00247E  0E00               	movlw	0
  9216  002480  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  9217  002482  EC86  F036         	call	_writeChar	;wreg free
  9218                           
  9219                           ;comunicacao.h: 75: }
  9220                           ;comunicacao.h: 76: break;
  9221  002486  D0B4               	goto	l323
  9222  002488  FFFF               	dw	65535	; assembler added errata NOP
  9223                           
  9224                           ;comunicacao.h: 78: if (aguardaBuffer("OK")) {
  9225  00248A  0EFA               	movlw	low STR_5
  9226  00248C  0100               	movlb	0	; () banked
  9227  00248E  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9228  002490  0E7F               	movlw	high STR_5
  9229  002492  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9230  002494  ECA6  F038         	call	_aguardaBuffer	;wreg free
  9231  002498  0900               	iorlw	0
  9232  00249A  B4D8               	btfsc	status,2,c
  9233  00249C  D083               	goto	L44
  9234                           
  9235                           ;comunicacao.h: 79: limparBuffer();
  9236  00249E  ECE0  F037         	call	_limparBuffer	;wreg free
  9237                           
  9238                           ;comunicacao.h: 80: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : te
      +                          l2);
  9239  0024A2  0100               	movlb	0	; () banked
  9240  0024A4  51F7               	movf	_telefoneSelecionado& (0+255),w,b
  9241  0024A6  B4D8               	btfsc	status,2,c
  9242  0024A8  D004               	goto	l330
  9243                           
  9244                           ; BSR set to: 0
  9245  0024AA  0EA4               	movlw	low _tel2
  9246  0024AC  6FBD               	movwf	_comunicarTeste$1193& (0+255),b
  9247  0024AE  0E01               	movlw	high _tel2
  9248  0024B0  D004               	goto	L20
  9249  0024B2                     l330:
  9250  0024B2  FFFF               	dw	65535	; assembler added errata NOP
  9251                           
  9252                           ; BSR set to: 0
  9253                           
  9254                           ; BSR set to: 0
  9255  0024B4  0EB0               	movlw	low _tel1
  9256  0024B6  6FBD               	movwf	_comunicarTeste$1193& (0+255),b
  9257  0024B8  0E01               	movlw	high _tel1
  9258  0024BA                     L20:
  9259  0024BA  FFFF               	dw	65535	; assembler added errata NOP
  9260  0024BC  6FBE               	movwf	(_comunicarTeste$1193+1)& (0+255),b
  9261                           
  9262                           ; BSR set to: 0
  9263                           
  9264                           ; BSR set to: 0
  9265  0024BE  0E5F               	movlw	low STR_12
  9266  0024C0  6FA1               	movwf	printf@f& (0+255),b
  9267  0024C2  0E7D               	movlw	high STR_12
  9268  0024C4  6FA2               	movwf	(printf@f+1)& (0+255),b
  9269  0024C6  C0BD  F0A3         	movff	_comunicarTeste$1193,?_printf+2
  9270  0024CA  C0BE  F0A4         	movff	_comunicarTeste$1193+1,?_printf+3
  9271  0024CE  ECC4  F038         	call	_printf	;wreg free
  9272                           
  9273                           ;comunicacao.h: 81: timerEtapaComunicacao = 5;
  9274  0024D2  0E05               	movlw	5
  9275  0024D4  0100               	movlb	0	; () banked
  9276  0024D6  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9277                           
  9278                           ; BSR set to: 0
  9279                           ;comunicacao.h: 82: etapaComunicacao++;
  9280  0024D8  4A51               	infsnz	_etapaComunicacao,f,c
  9281  0024DA  2A52               	incf	_etapaComunicacao+1,f,c
  9282                           
  9283                           ;comunicacao.h: 83: break;
  9284  0024DC  D089               	goto	l323
  9285  0024DE  FFFF               	dw	65535	; assembler added errata NOP
  9286                           
  9287                           ; BSR set to: 0
  9288                           ;comunicacao.h: 90: if (aguardaBuffer(">")) {
  9289                           
  9290                           ; BSR set to: 0
  9291  0024E0  0EFD               	movlw	low STR_13
  9292  0024E2  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9293  0024E4  0E7F               	movlw	high STR_13
  9294  0024E6  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9295  0024E8  ECA6  F038         	call	_aguardaBuffer	;wreg free
  9296  0024EC  0900               	iorlw	0
  9297  0024EE  B4D8               	btfsc	status,2,c
  9298  0024F0  D059               	goto	L44
  9299                           
  9300                           ;comunicacao.h: 91: limparBuffer();
  9301  0024F2  ECE0  F037         	call	_limparBuffer	;wreg free
  9302                           
  9303                           ;comunicacao.h: 92: printf("TECHNOW Sistemas embarcados\r\n\r\nTeste manual de comunicac
      +                          ao.\r\nData: %02d/%02d/%02d %02d:%02d:%02d\r\n\r\n\r\nVersao do sistema: %s\r\n",
  9304                           ;comunicacao.h: 93: _dia, _mes, _ano, _hor, _min, _sec, "Aug 25 2019");
  9305  0024F6  0ED7               	movlw	low STR_14
  9306  0024F8  0100               	movlb	0	; () banked
  9307  0024FA  6FA1               	movwf	printf@f& (0+255),b
  9308  0024FC  0E7A               	movlw	high STR_14
  9309  0024FE  6FA2               	movwf	(printf@f+1)& (0+255),b
  9310  002500  C0EB  F0A3         	movff	__dia,?_printf+2
  9311  002504  6BA4               	clrf	(?_printf+3)& (0+255),b
  9312  002506  C0EA  F0A5         	movff	__mes,?_printf+4
  9313  00250A  6BA6               	clrf	(?_printf+5)& (0+255),b
  9314  00250C  C0E9  F0A7         	movff	__ano,?_printf+6
  9315  002510  6BA8               	clrf	(?_printf+7)& (0+255),b
  9316  002512  C0EC  F0A9         	movff	__hor,?_printf+8
  9317  002516  6BAA               	clrf	(?_printf+9)& (0+255),b
  9318  002518  C0ED  F0AB         	movff	__min,?_printf+10
  9319  00251C  6BAC               	clrf	(?_printf+11)& (0+255),b
  9320  00251E  C0EE  F0AD         	movff	__sec,?_printf+12
  9321  002522  6BAE               	clrf	(?_printf+13)& (0+255),b
  9322  002524  0EE5               	movlw	low STR_15
  9323  002526  6FAF               	movwf	(?_printf+14)& (0+255),b
  9324  002528  0E7E               	movlw	high STR_15
  9325  00252A  6FB0               	movwf	(?_printf+15)& (0+255),b
  9326  00252C  ECC4  F038         	call	_printf	;wreg free
  9327                           
  9328                           ;comunicacao.h: 94: delay(1000);
  9329  002530  0E03               	movlw	3
  9330  002532  0100               	movlb	0	; () banked
  9331  002534  6F81               	movwf	(delay@x+1)& (0+255),b
  9332  002536  0EE8               	movlw	232
  9333  002538  6F80               	movwf	delay@x& (0+255),b
  9334  00253A  ECC5  F037         	call	_delay	;wreg free
  9335                           
  9336                           ;comunicacao.h: 95: writeChar(0x1A);
  9337  00253E  0E1A               	movlw	26
  9338  002540  0100               	movlb	0	; () banked
  9339  002542  6F80               	movwf	writeChar@hex& (0+255),b
  9340  002544  0E00               	movlw	0
  9341  002546  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  9342  002548  EC86  F036         	call	_writeChar	;wreg free
  9343                           
  9344                           ;comunicacao.h: 96: etapaComunicacao++;
  9345  00254C  4A51               	infsnz	_etapaComunicacao,f,c
  9346  00254E  2A52               	incf	_etapaComunicacao+1,f,c
  9347                           
  9348                           ;comunicacao.h: 97: timerEtapaComunicacao = 30;
  9349  002550  0E1E               	movlw	30
  9350  002552  0100               	movlb	0	; () banked
  9351  002554  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9352                           
  9353                           ; BSR set to: 0
  9354  002556  D026               	goto	L44
  9355  002558  FFFF               	dw	65535	; assembler added errata NOP
  9356                           
  9357                           ; BSR set to: 0
  9358                           ;comunicacao.h: 104: if (aguardaBuffer("OK")) {
  9359                           
  9360                           ; BSR set to: 0
  9361  00255A  0EFA               	movlw	low STR_5
  9362  00255C  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9363  00255E  0E7F               	movlw	high STR_5
  9364  002560  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9365  002562  ECA6  F038         	call	_aguardaBuffer	;wreg free
  9366  002566  0900               	iorlw	0
  9367  002568  B4D8               	btfsc	status,2,c
  9368  00256A  D011               	goto	l338
  9369                           
  9370                           ;comunicacao.h: 105: if (telefoneSelecionado == 0) {
  9371  00256C  0100               	movlb	0	; () banked
  9372  00256E  51F7               	movf	_telefoneSelecionado& (0+255),w,b
  9373  002570  A4D8               	btfss	status,2,c
  9374  002572  D003               	goto	l339
  9375                           
  9376                           ; BSR set to: 0
  9377                           ;comunicacao.h: 106: telefoneSelecionado = 1;
  9378  002574  0E01               	movlw	1
  9379  002576  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9380                           
  9381                           ;comunicacao.h: 107: } else {
  9382  002578  D005               	goto	l340
  9383  00257A                     l339:
  9384  00257A  FFFF               	dw	65535	; assembler added errata NOP
  9385                           
  9386                           ; BSR set to: 0
  9387                           ;comunicacao.h: 108: telefoneSelecionado = 0;
  9388                           
  9389                           ; BSR set to: 0
  9390  00257C  0E00               	movlw	0
  9391  00257E  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9392                           
  9393                           ;comunicacao.h: 109: gsmOcupado = 0;
  9394  002580  0E00               	movlw	0
  9395  002582  6FF4               	movwf	_gsmOcupado& (0+255),b
  9396  002584                     l340:
  9397  002584  FFFF               	dw	65535	; assembler added errata NOP
  9398                           
  9399                           ; BSR set to: 0
  9400                           ;comunicacao.h: 110: }
  9401                           ;comunicacao.h: 111: etapaComunicacao = 0;
  9402  002586  0E00               	movlw	0
  9403  002588  6E52               	movwf	_etapaComunicacao+1,c
  9404  00258A  0E00               	movlw	0
  9405  00258C  6E51               	movwf	_etapaComunicacao,c
  9406  00258E                     l338:
  9407  00258E  FFFF               	dw	65535	; assembler added errata NOP
  9408                           
  9409                           ;comunicacao.h: 112: }
  9410                           ;comunicacao.h: 113: if (aguardaBuffer("ERROR") || !timerEtapaComunicacao) {
  9411                           
  9412                           ; BSR set to: 0
  9413  002590  0ED8               	movlw	low STR_17
  9414  002592  0100               	movlb	0	; () banked
  9415  002594  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9416  002596  0E7F               	movlw	high STR_17
  9417  002598  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9418  00259A  ECA6  F038         	call	_aguardaBuffer	;wreg free
  9419  00259E  0900               	iorlw	0
  9420  0025A0  A4D8               	btfss	status,2,c
  9421  0025A2  D005               	goto	u5840
  9422  0025A4                     L44:
  9423  0025A4  FFFF               	dw	65535	; assembler added errata NOP
  9424  0025A6  0100               	movlb	0	; () banked
  9425  0025A8  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  9426  0025AA  A4D8               	btfss	status,2,c
  9427  0025AC  D021               	goto	l323
  9428  0025AE                     u5840:
  9429  0025AE  FFFF               	dw	65535	; assembler added errata NOP
  9430                           
  9431                           ;comunicacao.h: 118: etapaComunicacao = 0;
  9432                           
  9433                           ;comunicacao.h: 117: default:
  9434                           
  9435                           ;comunicacao.h: 115: }
  9436                           ;comunicacao.h: 116: break;
  9437                           
  9438                           ;comunicacao.h: 114: etapaComunicacao = 0;
  9439                           
  9440                           ; BSR set to: 0
  9441  0025B0  0E00               	movlw	0
  9442  0025B2  6E52               	movwf	_etapaComunicacao+1,c
  9443  0025B4  0E00               	movlw	0
  9444  0025B6  6E51               	movwf	_etapaComunicacao,c
  9445                           
  9446                           ;comunicacao.h: 121: }
  9447                           
  9448                           ;comunicacao.h: 119: break;
  9449  0025B8  D01B               	goto	l323
  9450  0025BA                     l321:
  9451  0025BA  FFFF               	dw	65535	; assembler added errata NOP
  9452  0025BC  C051  F0BB         	movff	_etapaComunicacao,??_comunicarTeste
  9453  0025C0  C052  F0BC         	movff	_etapaComunicacao+1,??_comunicarTeste+1
  9454                           
  9455                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9456                           ; Switch size 1, requested type "space"
  9457                           ; Number of cases is 1, Range of values is 0 to 0
  9458                           ; switch strategies available:
  9459                           ; Name         Instructions Cycles
  9460                           ; simple_byte            4     3 (average)
  9461                           ;	Chosen strategy is simple_byte
  9462  0025C4  0100               	movlb	0	; () banked
  9463  0025C6  51BC               	movf	(??_comunicarTeste+1)& (0+255),w,b
  9464  0025C8  0A00               	xorlw	0	; case 0
  9465  0025CA  A4D8               	btfss	status,2,c
  9466  0025CC  D7F0               	goto	u5840
  9467                           
  9468                           ; BSR set to: 0
  9469                           ; Switch size 1, requested type "space"
  9470                           ; Number of cases is 5, Range of values is 0 to 4
  9471                           ; switch strategies available:
  9472                           ; Name         Instructions Cycles
  9473                           ; simple_byte           16     9 (average)
  9474                           ;	Chosen strategy is simple_byte
  9475  0025CE  51BB               	movf	??_comunicarTeste& (0+255),w,b
  9476  0025D0  0A00               	xorlw	0	; case 0
  9477  0025D2  B4D8               	btfsc	status,2,c
  9478  0025D4  D721               	goto	l322
  9479  0025D6  0A01               	xorlw	1	; case 1
  9480  0025D8  B4D8               	btfsc	status,2,c
  9481  0025DA  D72E               	goto	l324
  9482  0025DC  0A03               	xorlw	3	; case 2
  9483  0025DE  B4D8               	btfsc	status,2,c
  9484  0025E0  D753               	goto	l327
  9485  0025E2  0A01               	xorlw	1	; case 3
  9486  0025E4  B4D8               	btfsc	status,2,c
  9487  0025E6  D77B               	goto	l334
  9488  0025E8  0A07               	xorlw	7	; case 4
  9489  0025EA  B4D8               	btfsc	status,2,c
  9490  0025EC  D7B5               	goto	l337
  9491  0025EE  D7DF               	goto	u5840
  9492  0025F0                     l323:
  9493  0025F0  FFFF               	dw	65535	; assembler added errata NOP
  9494                           
  9495                           ; BSR set to: 0
  9496  0025F2  0012               	return		;funcret
  9497  0025F4  FFFF               	dw	65535	; errata NOP
  9498  0025F6                     __end_of_comunicarTeste:
  9499                           	opt stack 0
  9500                           tblptru	equ	0xFF8
  9501                           tblptrh	equ	0xFF7
  9502                           tblptrl	equ	0xFF6
  9503                           tablat	equ	0xFF5
  9504                           prodh	equ	0xFF4
  9505                           prodl	equ	0xFF3
  9506                           postinc0	equ	0xFEE
  9507                           wreg	equ	0xFE8
  9508                           postdec1	equ	0xFE5
  9509                           fsr1l	equ	0xFE1
  9510                           indf2	equ	0xFDF
  9511                           postinc2	equ	0xFDE
  9512                           fsr2h	equ	0xFDA
  9513                           fsr2l	equ	0xFD9
  9514                           status	equ	0xFD8
  9515                           
  9516 ;; *************** function _configuraRegistradores *****************
  9517 ;; Defined at:
  9518 ;;		line 7 in file "registradores.h"
  9519 ;; Parameters:    Size  Location     Type
  9520 ;;		None
  9521 ;; Auto vars:     Size  Location     Type
  9522 ;;		None
  9523 ;; Return value:  Size  Location     Type
  9524 ;;                  1    wreg      void 
  9525 ;; Registers used:
  9526 ;;		wreg, status,2
  9527 ;; Tracked objects:
  9528 ;;		On entry : 0/0
  9529 ;;		On exit  : 0/0
  9530 ;;		Unchanged: 0/0
  9531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9532 ;;      Params:         0       0       0       0       0       0       0
  9533 ;;      Locals:         0       0       0       0       0       0       0
  9534 ;;      Temps:          0       0       0       0       0       0       0
  9535 ;;      Totals:         0       0       0       0       0       0       0
  9536 ;;Total ram usage:        0 bytes
  9537 ;; Hardware stack levels used:    1
  9538 ;; Hardware stack levels required when called:    6
  9539 ;; This function calls:
  9540 ;;		Nothing
  9541 ;; This function is called by:
  9542 ;;		_main
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           	psect	text23
  9547  007518                     __ptext23:
  9548                           	opt stack 0
  9549  007518                     _configuraRegistradores:
  9550                           	opt stack 0
  9551  007518  FFFF               	dw	65535	; assembler added errata NOP
  9552                           
  9553                           ;registradores.h: 9: ADCON0 = 0b10000001;
  9554                           
  9555                           ;incstack = 0
  9556  00751A  0E81               	movlw	129
  9557  00751C  6EC2               	movwf	4034,c	;volatile
  9558                           
  9559                           ;registradores.h: 10: ADCON1 = 0b11001110;
  9560  00751E  0ECE               	movlw	206
  9561  007520  6EC1               	movwf	4033,c	;volatile
  9562                           
  9563                           ;registradores.h: 11: TRISAbits.RA0 = 1;
  9564  007522  8092               	bsf	3986,0,c	;volatile
  9565                           
  9566                           ;registradores.h: 12: PORTAbits.AN0 = 0;
  9567  007524  9080               	bcf	3968,0,c	;volatile
  9568                           
  9569                           ;registradores.h: 15: T0CON = 0x81;
  9570  007526  0E81               	movlw	129
  9571  007528  6ED5               	movwf	4053,c	;volatile
  9572                           
  9573                           ;registradores.h: 16: INTCON = 0xE4;
  9574  00752A  0EE4               	movlw	228
  9575  00752C  6EF2               	movwf	intcon,c	;volatile
  9576                           
  9577                           ;registradores.h: 19: TRISDbits.RD5 = 0;
  9578  00752E  9A95               	bcf	3989,5,c	;volatile
  9579                           
  9580                           ;registradores.h: 20: TRISDbits.RD4 = 0;
  9581  007530  9895               	bcf	3989,4,c	;volatile
  9582                           
  9583                           ;registradores.h: 21: TRISDbits.RD3 = 0;
  9584  007532  9695               	bcf	3989,3,c	;volatile
  9585                           
  9586                           ;registradores.h: 22: TRISDbits.RD2 = 0;
  9587  007534  9495               	bcf	3989,2,c	;volatile
  9588                           
  9589                           ;registradores.h: 23: TRISDbits.RD1 = 0;
  9590  007536  9295               	bcf	3989,1,c	;volatile
  9591                           
  9592                           ;registradores.h: 24: TRISDbits.RD0 = 0;
  9593  007538  9095               	bcf	3989,0,c	;volatile
  9594                           
  9595                           ;registradores.h: 27: TRISCbits.TRISC6 = 0;
  9596  00753A  9C94               	bcf	3988,6,c	;volatile
  9597                           
  9598                           ;registradores.h: 28: TRISCbits.TRISC7 = 1;
  9599  00753C  8E94               	bsf	3988,7,c	;volatile
  9600                           
  9601                           ;registradores.h: 29: TXSTAbits.TXEN = 1;
  9602  00753E  8AAC               	bsf	4012,5,c	;volatile
  9603                           
  9604                           ;registradores.h: 30: TXSTAbits.BRGH = 1;
  9605  007540  84AC               	bsf	4012,2,c	;volatile
  9606                           
  9607                           ;registradores.h: 31: TXSTAbits.SYNC = 0;
  9608  007542  98AC               	bcf	4012,4,c	;volatile
  9609                           
  9610                           ;registradores.h: 32: RCSTAbits.SPEN = 1;
  9611  007544  8EAB               	bsf	4011,7,c	;volatile
  9612                           
  9613                           ;registradores.h: 33: RCSTAbits.CREN = 1;
  9614  007546  88AB               	bsf	4011,4,c	;volatile
  9615                           
  9616                           ;registradores.h: 36: SPBRG = 25;
  9617  007548  0E19               	movlw	25
  9618  00754A  6EAF               	movwf	4015,c	;volatile
  9619                           
  9620                           ;registradores.h: 37: INTCONbits.GIE = 1;
  9621  00754C  8EF2               	bsf	intcon,7,c	;volatile
  9622                           
  9623                           ;registradores.h: 38: INTCONbits.PEIE = 1;
  9624  00754E  8CF2               	bsf	intcon,6,c	;volatile
  9625                           
  9626                           ;registradores.h: 39: PIR1bits.RCIF = 0;
  9627  007550  9A9E               	bcf	3998,5,c	;volatile
  9628                           
  9629                           ;registradores.h: 40: PIE1bits.RCIE = 1;
  9630  007552  8A9D               	bsf	3997,5,c	;volatile
  9631                           
  9632                           ;registradores.h: 43: INTCONbits.RBIE = 0;
  9633  007554  96F2               	bcf	intcon,3,c	;volatile
  9634                           
  9635                           ;registradores.h: 44: TRISAbits.RA2 = 1;
  9636  007556  8492               	bsf	3986,2,c	;volatile
  9637                           
  9638                           ;registradores.h: 45: TRISAbits.RA5 = 1;
  9639  007558  8A92               	bsf	3986,5,c	;volatile
  9640                           
  9641                           ;registradores.h: 46: TRISCbits.RC0 = 1;
  9642  00755A  8094               	bsf	3988,0,c	;volatile
  9643                           
  9644                           ;registradores.h: 49: TRISBbits.RB2 = 1;
  9645  00755C  8493               	bsf	3987,2,c	;volatile
  9646                           
  9647                           ;registradores.h: 50: TRISBbits.RB3 = 1;
  9648  00755E  8693               	bsf	3987,3,c	;volatile
  9649                           
  9650                           ;registradores.h: 51: TRISBbits.RB4 = 1;
  9651  007560  8893               	bsf	3987,4,c	;volatile
  9652                           
  9653                           ;registradores.h: 52: TRISBbits.RB5 = 1;
  9654  007562  8A93               	bsf	3987,5,c	;volatile
  9655                           
  9656                           ;registradores.h: 55: TRISEbits.RE0 = 0;
  9657  007564  9096               	bcf	3990,0,c	;volatile
  9658                           
  9659                           ;registradores.h: 56: TRISEbits.RE1 = 0;
  9660  007566  9296               	bcf	3990,1,c	;volatile
  9661                           
  9662                           ;registradores.h: 57: TRISEbits.RE2 = 0;
  9663  007568  9496               	bcf	3990,2,c	;volatile
  9664  00756A  0012               	return		;funcret
  9665  00756C  FFFF               	dw	65535	; errata NOP
  9666  00756E                     __end_of_configuraRegistradores:
  9667                           	opt stack 0
  9668                           tblptru	equ	0xFF8
  9669                           tblptrh	equ	0xFF7
  9670                           tblptrl	equ	0xFF6
  9671                           tablat	equ	0xFF5
  9672                           prodh	equ	0xFF4
  9673                           prodl	equ	0xFF3
  9674                           intcon	equ	0xFF2
  9675                           postinc0	equ	0xFEE
  9676                           wreg	equ	0xFE8
  9677                           postdec1	equ	0xFE5
  9678                           fsr1l	equ	0xFE1
  9679                           indf2	equ	0xFDF
  9680                           postinc2	equ	0xFDE
  9681                           fsr2h	equ	0xFDA
  9682                           fsr2l	equ	0xFD9
  9683                           status	equ	0xFD8
  9684                           
  9685 ;; *************** function _atualizarLCD *****************
  9686 ;; Defined at:
  9687 ;;		line 132 in file "lcd.h"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;  line1           2    8[BANK0 ] PTR unsigned char 
  9690 ;;		 -> line1(21), 
  9691 ;;  line2           2   10[BANK0 ] PTR unsigned char 
  9692 ;;		 -> line2(21), 
  9693 ;;  line3           2   12[BANK0 ] PTR unsigned char 
  9694 ;;		 -> line3(21), 
  9695 ;;  line4           2   14[BANK0 ] PTR unsigned char 
  9696 ;;		 -> line4(21), 
  9697 ;; Auto vars:     Size  Location     Type
  9698 ;;  i               1   16[BANK0 ] unsigned char 
  9699 ;; Return value:  Size  Location     Type
  9700 ;;                  1    wreg      void 
  9701 ;; Registers used:
  9702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9703 ;; Tracked objects:
  9704 ;;		On entry : 0/0
  9705 ;;		On exit  : 0/0
  9706 ;;		Unchanged: 0/0
  9707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9708 ;;      Params:         0       8       0       0       0       0       0
  9709 ;;      Locals:         0       1       0       0       0       0       0
  9710 ;;      Temps:          0       0       0       0       0       0       0
  9711 ;;      Totals:         0       9       0       0       0       0       0
  9712 ;;Total ram usage:        9 bytes
  9713 ;; Hardware stack levels used:    1
  9714 ;; Hardware stack levels required when called:    9
  9715 ;; This function calls:
  9716 ;;		_Lcd_Set_Cursor
  9717 ;;		_Lcd_Write_String
  9718 ;; This function is called by:
  9719 ;;		_main
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text24
  9724  00397A                     __ptext24:
  9725                           	opt stack 0
  9726  00397A                     _atualizarLCD:
  9727                           	opt stack 0
  9728  00397A  FFFF               	dw	65535	; assembler added errata NOP
  9729                           
  9730                           ;lcd.h: 134: Lcd_Set_Cursor(1, 1);
  9731                           
  9732                           ;incstack = 0
  9733  00397C  0E01               	movlw	1
  9734  00397E  0100               	movlb	0	; () banked
  9735  003980  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9736  003982  0E01               	movlw	1
  9737  003984  EC89  F01D         	call	_Lcd_Set_Cursor
  9738                           
  9739                           ;lcd.h: 135: Lcd_Write_String(line1);
  9740  003988  C088  F084         	movff	atualizarLCD@line1,Lcd_Write_String@a
  9741  00398C  C089  F085         	movff	atualizarLCD@line1+1,Lcd_Write_String@a+1
  9742  003990  ECE3  F01F         	call	_Lcd_Write_String	;wreg free
  9743                           
  9744                           ;lcd.h: 136: Lcd_Set_Cursor(2, 1);
  9745  003994  0E01               	movlw	1
  9746  003996  0100               	movlb	0	; () banked
  9747  003998  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9748  00399A  0E02               	movlw	2
  9749  00399C  EC89  F01D         	call	_Lcd_Set_Cursor
  9750                           
  9751                           ;lcd.h: 137: Lcd_Write_String(line2);
  9752  0039A0  C08A  F084         	movff	atualizarLCD@line2,Lcd_Write_String@a
  9753  0039A4  C08B  F085         	movff	atualizarLCD@line2+1,Lcd_Write_String@a+1
  9754  0039A8  ECE3  F01F         	call	_Lcd_Write_String	;wreg free
  9755                           
  9756                           ;lcd.h: 138: Lcd_Set_Cursor(3, 0);
  9757  0039AC  0E00               	movlw	0
  9758  0039AE  0100               	movlb	0	; () banked
  9759  0039B0  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9760  0039B2  0E03               	movlw	3
  9761  0039B4  EC89  F01D         	call	_Lcd_Set_Cursor
  9762                           
  9763                           ;lcd.h: 139: Lcd_Write_String(line3);
  9764  0039B8  C08C  F084         	movff	atualizarLCD@line3,Lcd_Write_String@a
  9765  0039BC  C08D  F085         	movff	atualizarLCD@line3+1,Lcd_Write_String@a+1
  9766  0039C0  ECE3  F01F         	call	_Lcd_Write_String	;wreg free
  9767                           
  9768                           ;lcd.h: 140: Lcd_Set_Cursor(4, 0);
  9769  0039C4  0E00               	movlw	0
  9770  0039C6  0100               	movlb	0	; () banked
  9771  0039C8  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9772  0039CA  0E04               	movlw	4
  9773  0039CC  EC89  F01D         	call	_Lcd_Set_Cursor
  9774                           
  9775                           ;lcd.h: 141: Lcd_Write_String(line4);
  9776  0039D0  C08E  F084         	movff	atualizarLCD@line4,Lcd_Write_String@a
  9777  0039D4  C08F  F085         	movff	atualizarLCD@line4+1,Lcd_Write_String@a+1
  9778  0039D8  ECE3  F01F         	call	_Lcd_Write_String	;wreg free
  9779                           
  9780                           ;lcd.h: 143: char i = 0;
  9781  0039DC  0E00               	movlw	0
  9782  0039DE  0100               	movlb	0	; () banked
  9783  0039E0  6F90               	movwf	atualizarLCD@i& (0+255),b
  9784                           
  9785                           ; BSR set to: 0
  9786                           ;lcd.h: 144: for (i = 0; i < 20; i++) {
  9787  0039E2  0E00               	movlw	0
  9788  0039E4  6F90               	movwf	atualizarLCD@i& (0+255),b
  9789  0039E6                     l6958:
  9790  0039E6  FFFF               	dw	65535	; assembler added errata NOP
  9791                           
  9792                           ; BSR set to: 0
  9793  0039E8  0E13               	movlw	19
  9794  0039EA  6590               	cpfsgt	atualizarLCD@i& (0+255),b
  9795  0039EC  D001               	goto	l648
  9796  0039EE  D02B               	goto	u7710
  9797  0039F0                     l648:
  9798  0039F0  FFFF               	dw	65535	; assembler added errata NOP
  9799                           
  9800                           ; BSR set to: 0
  9801                           ;lcd.h: 145: line1[i] = ' ';
  9802                           
  9803                           ; BSR set to: 0
  9804  0039F2  5190               	movf	atualizarLCD@i& (0+255),w,b
  9805  0039F4  0D01               	mullw	1
  9806  0039F6  50F3               	movf	prodl,w,c
  9807  0039F8  2588               	addwf	atualizarLCD@line1& (0+255),w,b
  9808  0039FA  6ED9               	movwf	fsr2l,c
  9809  0039FC  50F4               	movf	prodh,w,c
  9810  0039FE  2189               	addwfc	(atualizarLCD@line1+1)& (0+255),w,b
  9811  003A00  6EDA               	movwf	fsr2h,c
  9812  003A02  0E20               	movlw	32
  9813  003A04  6EDF               	movwf	indf2,c
  9814                           
  9815                           ;lcd.h: 146: line2[i] = ' ';
  9816  003A06  5190               	movf	atualizarLCD@i& (0+255),w,b
  9817  003A08  0D01               	mullw	1
  9818  003A0A  50F3               	movf	prodl,w,c
  9819  003A0C  258A               	addwf	atualizarLCD@line2& (0+255),w,b
  9820  003A0E  6ED9               	movwf	fsr2l,c
  9821  003A10  50F4               	movf	prodh,w,c
  9822  003A12  218B               	addwfc	(atualizarLCD@line2+1)& (0+255),w,b
  9823  003A14  6EDA               	movwf	fsr2h,c
  9824  003A16  0E20               	movlw	32
  9825  003A18  6EDF               	movwf	indf2,c
  9826                           
  9827                           ;lcd.h: 147: line3[i] = ' ';
  9828  003A1A  5190               	movf	atualizarLCD@i& (0+255),w,b
  9829  003A1C  0D01               	mullw	1
  9830  003A1E  50F3               	movf	prodl,w,c
  9831  003A20  258C               	addwf	atualizarLCD@line3& (0+255),w,b
  9832  003A22  6ED9               	movwf	fsr2l,c
  9833  003A24  50F4               	movf	prodh,w,c
  9834  003A26  218D               	addwfc	(atualizarLCD@line3+1)& (0+255),w,b
  9835  003A28  6EDA               	movwf	fsr2h,c
  9836  003A2A  0E20               	movlw	32
  9837  003A2C  6EDF               	movwf	indf2,c
  9838                           
  9839                           ;lcd.h: 148: line4[i] = ' ';
  9840  003A2E  5190               	movf	atualizarLCD@i& (0+255),w,b
  9841  003A30  0D01               	mullw	1
  9842  003A32  50F3               	movf	prodl,w,c
  9843  003A34  258E               	addwf	atualizarLCD@line4& (0+255),w,b
  9844  003A36  6ED9               	movwf	fsr2l,c
  9845  003A38  50F4               	movf	prodh,w,c
  9846  003A3A  218F               	addwfc	(atualizarLCD@line4+1)& (0+255),w,b
  9847  003A3C  6EDA               	movwf	fsr2h,c
  9848  003A3E  0E20               	movlw	32
  9849  003A40  6EDF               	movwf	indf2,c
  9850                           
  9851                           ; BSR set to: 0
  9852  003A42  2B90               	incf	atualizarLCD@i& (0+255),f,b
  9853  003A44  D7D0               	goto	l6958
  9854  003A46                     u7710:
  9855  003A46  FFFF               	dw	65535	; assembler added errata NOP
  9856                           
  9857                           ; BSR set to: 0
  9858                           
  9859                           ; BSR set to: 0
  9860  003A48  0012               	return		;funcret
  9861  003A4A  FFFF               	dw	65535	; errata NOP
  9862  003A4C                     __end_of_atualizarLCD:
  9863                           	opt stack 0
  9864                           tblptru	equ	0xFF8
  9865                           tblptrh	equ	0xFF7
  9866                           tblptrl	equ	0xFF6
  9867                           tablat	equ	0xFF5
  9868                           prodh	equ	0xFF4
  9869                           prodl	equ	0xFF3
  9870                           intcon	equ	0xFF2
  9871                           postinc0	equ	0xFEE
  9872                           wreg	equ	0xFE8
  9873                           postdec1	equ	0xFE5
  9874                           fsr1l	equ	0xFE1
  9875                           indf2	equ	0xFDF
  9876                           postinc2	equ	0xFDE
  9877                           fsr2h	equ	0xFDA
  9878                           fsr2l	equ	0xFD9
  9879                           status	equ	0xFD8
  9880                           
  9881 ;; *************** function _Lcd_Write_String *****************
  9882 ;; Defined at:
  9883 ;;		line 123 in file "lcd.h"
  9884 ;; Parameters:    Size  Location     Type
  9885 ;;  a               2    4[BANK0 ] PTR unsigned char 
  9886 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
  9887 ;; Auto vars:     Size  Location     Type
  9888 ;;  i               1    6[BANK0 ] unsigned char 
  9889 ;; Return value:  Size  Location     Type
  9890 ;;                  1    wreg      void 
  9891 ;; Registers used:
  9892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9893 ;; Tracked objects:
  9894 ;;		On entry : 0/0
  9895 ;;		On exit  : 0/0
  9896 ;;		Unchanged: 0/0
  9897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9898 ;;      Params:         0       2       0       0       0       0       0
  9899 ;;      Locals:         0       1       0       0       0       0       0
  9900 ;;      Temps:          0       0       0       0       0       0       0
  9901 ;;      Totals:         0       3       0       0       0       0       0
  9902 ;;Total ram usage:        3 bytes
  9903 ;; Hardware stack levels used:    1
  9904 ;; Hardware stack levels required when called:    8
  9905 ;; This function calls:
  9906 ;;		_Lcd_Write_Char
  9907 ;; This function is called by:
  9908 ;;		_atualizarLCD
  9909 ;; This function uses a non-reentrant model
  9910 ;;
  9911                           
  9912                           	psect	text25
  9913  003FC6                     __ptext25:
  9914                           	opt stack 0
  9915  003FC6                     _Lcd_Write_String:
  9916                           	opt stack 0
  9917  003FC6  FFFF               	dw	65535	; assembler added errata NOP
  9918                           
  9919                           ;lcd.h: 124: unsigned char i = 0;
  9920                           
  9921                           ; BSR set to: 0
  9922                           ;incstack = 0
  9923  003FC8  0E00               	movlw	0
  9924  003FCA  0100               	movlb	0	; () banked
  9925  003FCC  6F86               	movwf	Lcd_Write_String@i& (0+255),b
  9926                           
  9927                           ;lcd.h: 126: for (i = 0; i < 20; i++) {
  9928  003FCE  0E00               	movlw	0
  9929  003FD0  6F86               	movwf	Lcd_Write_String@i& (0+255),b
  9930  003FD2                     l6010:
  9931  003FD2  FFFF               	dw	65535	; assembler added errata NOP
  9932                           
  9933                           ; BSR set to: 0
  9934  003FD4  0E13               	movlw	19
  9935  003FD6  6586               	cpfsgt	Lcd_Write_String@i& (0+255),b
  9936  003FD8  D001               	goto	l643
  9937  003FDA  D00F               	goto	u6280
  9938  003FDC                     l643:
  9939  003FDC  FFFF               	dw	65535	; assembler added errata NOP
  9940                           
  9941                           ; BSR set to: 0
  9942                           ;lcd.h: 127: Lcd_Write_Char(a[i]);
  9943                           
  9944                           ; BSR set to: 0
  9945  003FDE  5186               	movf	Lcd_Write_String@i& (0+255),w,b
  9946  003FE0  0D01               	mullw	1
  9947  003FE2  50F3               	movf	prodl,w,c
  9948  003FE4  2584               	addwf	Lcd_Write_String@a& (0+255),w,b
  9949  003FE6  6ED9               	movwf	fsr2l,c
  9950  003FE8  50F4               	movf	prodh,w,c
  9951  003FEA  2185               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
  9952  003FEC  6EDA               	movwf	fsr2h,c
  9953  003FEE  50DF               	movf	indf2,w,c
  9954  003FF0  EC21  F039         	call	_Lcd_Write_Char
  9955  003FF4  0100               	movlb	0	; () banked
  9956  003FF6  2B86               	incf	Lcd_Write_String@i& (0+255),f,b
  9957  003FF8  D7EC               	goto	l6010
  9958  003FFA                     u6280:
  9959  003FFA  FFFF               	dw	65535	; assembler added errata NOP
  9960                           
  9961                           ; BSR set to: 0
  9962                           
  9963                           ; BSR set to: 0
  9964  003FFC  0012               	return		;funcret
  9965  003FFE  FFFF               	dw	65535	; errata NOP
  9966  004000                     __end_of_Lcd_Write_String:
  9967                           	opt stack 0
  9968                           tblptru	equ	0xFF8
  9969                           tblptrh	equ	0xFF7
  9970                           tblptrl	equ	0xFF6
  9971                           tablat	equ	0xFF5
  9972                           prodh	equ	0xFF4
  9973                           prodl	equ	0xFF3
  9974                           intcon	equ	0xFF2
  9975                           postinc0	equ	0xFEE
  9976                           wreg	equ	0xFE8
  9977                           postdec1	equ	0xFE5
  9978                           fsr1l	equ	0xFE1
  9979                           indf2	equ	0xFDF
  9980                           postinc2	equ	0xFDE
  9981                           fsr2h	equ	0xFDA
  9982                           fsr2l	equ	0xFD9
  9983                           status	equ	0xFD8
  9984                           
  9985 ;; *************** function _Lcd_Write_Char *****************
  9986 ;; Defined at:
  9987 ;;		line 108 in file "lcd.h"
  9988 ;; Parameters:    Size  Location     Type
  9989 ;;  a               1    wreg     unsigned char 
  9990 ;; Auto vars:     Size  Location     Type
  9991 ;;  a               1    3[BANK0 ] unsigned char 
  9992 ;;  y               1    2[BANK0 ] unsigned char 
  9993 ;;  tempp           1    1[BANK0 ] unsigned char 
  9994 ;; Return value:  Size  Location     Type
  9995 ;;                  1    wreg      void 
  9996 ;; Registers used:
  9997 ;;		wreg, status,2, status,0, cstack
  9998 ;; Tracked objects:
  9999 ;;		On entry : 0/0
 10000 ;;		On exit  : 0/0
 10001 ;;		Unchanged: 0/0
 10002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10003 ;;      Params:         0       0       0       0       0       0       0
 10004 ;;      Locals:         0       3       0       0       0       0       0
 10005 ;;      Temps:          0       0       0       0       0       0       0
 10006 ;;      Totals:         0       3       0       0       0       0       0
 10007 ;;Total ram usage:        3 bytes
 10008 ;; Hardware stack levels used:    1
 10009 ;; Hardware stack levels required when called:    7
 10010 ;; This function calls:
 10011 ;;		_Lcd_Port
 10012 ;; This function is called by:
 10013 ;;		_Lcd_Write_String
 10014 ;;		_criarCaracteresCGRAM
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           	psect	text26
 10019  007242                     __ptext26:
 10020                           	opt stack 0
 10021  007242                     _Lcd_Write_Char:
 10022                           	opt stack 0
 10023  007242  FFFF               	dw	65535	; assembler added errata NOP
 10024                           
 10025                           ; BSR set to: 0
 10026                           ;incstack = 0
 10027                           ;Lcd_Write_Char@a stored from wreg
 10028  007244  0100               	movlb	0	; () banked
 10029  007246  6F83               	movwf	Lcd_Write_Char@a& (0+255),b
 10030                           
 10031                           ;lcd.h: 109: char tempp, y;
 10032                           ;lcd.h: 110: tempp = a & 0x0F;
 10033  007248  0100               	movlb	0	; () banked
 10034  00724A  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 10035  00724C  0B0F               	andlw	15
 10036  00724E  6F81               	movwf	Lcd_Write_Char@tempp& (0+255),b
 10037                           
 10038                           ;lcd.h: 111: y = a & 0xF0;
 10039  007250  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 10040  007252  0BF0               	andlw	240
 10041  007254  6F82               	movwf	Lcd_Write_Char@y& (0+255),b
 10042                           
 10043                           ; BSR set to: 0
 10044                           ;lcd.h: 112: PORTDbits.RD1 = 1;
 10045  007256  8283               	bsf	3971,1,c	;volatile
 10046                           
 10047                           ; BSR set to: 0
 10048                           ;lcd.h: 113: Lcd_Port(y >> 4);
 10049  007258  3982               	swapf	Lcd_Write_Char@y& (0+255),w,b
 10050  00725A  0B0F               	andlw	15
 10051  00725C  EC84  F039         	call	_Lcd_Port
 10052                           
 10053                           ;lcd.h: 114: PORTDbits.RD0 = 1;
 10054  007260  8083               	bsf	3971,0,c	;volatile
 10055                           
 10056                           ;lcd.h: 115: _delay((unsigned long)((150)*(8000000/4000000.0)));
 10057  007262  0E4B               	movlw	75
 10058  007264                     u9027:
 10059  007264  FFFF               	dw	65535	; errata NOP
 10060  007266  2EE8               	decfsz	wreg,f,c
 10061  007268  D7FD               	bra	u9027
 10062                           
 10063                           ;lcd.h: 116: PORTDbits.RD0 = 0;
 10064  00726A  9083               	bcf	3971,0,c	;volatile
 10065                           
 10066                           ;lcd.h: 117: Lcd_Port(tempp);
 10067  00726C  0100               	movlb	0	; () banked
 10068  00726E  5181               	movf	Lcd_Write_Char@tempp& (0+255),w,b
 10069  007270  EC84  F039         	call	_Lcd_Port
 10070                           
 10071                           ;lcd.h: 118: PORTDbits.RD0 = 1;
 10072  007274  8083               	bsf	3971,0,c	;volatile
 10073                           
 10074                           ;lcd.h: 119: _delay((unsigned long)((150)*(8000000/4000000.0)));
 10075  007276  0E4B               	movlw	75
 10076  007278                     u9037:
 10077  007278  FFFF               	dw	65535	; errata NOP
 10078  00727A  2EE8               	decfsz	wreg,f,c
 10079  00727C  D7FD               	bra	u9037
 10080                           
 10081                           ;lcd.h: 120: PORTDbits.RD0 = 0;
 10082  00727E  9083               	bcf	3971,0,c	;volatile
 10083  007280  0012               	return		;funcret
 10084  007282  FFFF               	dw	65535	; errata NOP
 10085  007284                     __end_of_Lcd_Write_Char:
 10086                           	opt stack 0
 10087                           tblptru	equ	0xFF8
 10088                           tblptrh	equ	0xFF7
 10089                           tblptrl	equ	0xFF6
 10090                           tablat	equ	0xFF5
 10091                           prodh	equ	0xFF4
 10092                           prodl	equ	0xFF3
 10093                           intcon	equ	0xFF2
 10094                           postinc0	equ	0xFEE
 10095                           wreg	equ	0xFE8
 10096                           postdec1	equ	0xFE5
 10097                           fsr1l	equ	0xFE1
 10098                           indf2	equ	0xFDF
 10099                           postinc2	equ	0xFDE
 10100                           fsr2h	equ	0xFDA
 10101                           fsr2l	equ	0xFD9
 10102                           status	equ	0xFD8
 10103                           
 10104 ;; *************** function _Lcd_Set_Cursor *****************
 10105 ;; Defined at:
 10106 ;;		line 73 in file "lcd.h"
 10107 ;; Parameters:    Size  Location     Type
 10108 ;;  a               1    wreg     unsigned char 
 10109 ;;  b               1    3[BANK0 ] unsigned char 
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;  a               1    4[BANK0 ] unsigned char 
 10112 ;;  temp            1    7[BANK0 ] unsigned char 
 10113 ;;  y               1    6[BANK0 ] unsigned char 
 10114 ;;  z               1    5[BANK0 ] unsigned char 
 10115 ;; Return value:  Size  Location     Type
 10116 ;;                  1    wreg      void 
 10117 ;; Registers used:
 10118 ;;		wreg, status,2, status,0, cstack
 10119 ;; Tracked objects:
 10120 ;;		On entry : 0/0
 10121 ;;		On exit  : 0/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10124 ;;      Params:         0       1       0       0       0       0       0
 10125 ;;      Locals:         0       4       0       0       0       0       0
 10126 ;;      Temps:          0       0       0       0       0       0       0
 10127 ;;      Totals:         0       5       0       0       0       0       0
 10128 ;;Total ram usage:        5 bytes
 10129 ;; Hardware stack levels used:    1
 10130 ;; Hardware stack levels required when called:    8
 10131 ;; This function calls:
 10132 ;;		_Lcd_Cmd
 10133 ;; This function is called by:
 10134 ;;		_atualizarLCD
 10135 ;; This function uses a non-reentrant model
 10136 ;;
 10137                           
 10138                           	psect	text27
 10139  003B12                     __ptext27:
 10140                           	opt stack 0
 10141  003B12                     _Lcd_Set_Cursor:
 10142                           	opt stack 0
 10143  003B12  FFFF               	dw	65535	; assembler added errata NOP
 10144                           
 10145                           ;incstack = 0
 10146                           ;Lcd_Set_Cursor@a stored from wreg
 10147  003B14  0100               	movlb	0	; () banked
 10148  003B16  6F84               	movwf	Lcd_Set_Cursor@a& (0+255),b
 10149                           
 10150                           ;lcd.h: 74: char temp, z, y;
 10151                           ;lcd.h: 75: switch (a) {
 10152  003B18  D04C               	goto	l630
 10153  003B1A  FFFF               	dw	65535	; assembler added errata NOP
 10154                           
 10155                           ;lcd.h: 77: temp = 0x80 + b - 1;
 10156  003B1C  0100               	movlb	0	; () banked
 10157  003B1E  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10158  003B20  0F7F               	addlw	127
 10159  003B22  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10160                           
 10161                           ;lcd.h: 78: z = temp >> 4;
 10162  003B24  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10163  003B26  0B0F               	andlw	15
 10164  003B28  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10165                           
 10166                           ;lcd.h: 79: y = temp & 0x0F;
 10167  003B2A  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10168  003B2C  0B0F               	andlw	15
 10169  003B2E  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10170                           
 10171                           ; BSR set to: 0
 10172                           ;lcd.h: 80: Lcd_Cmd(z);
 10173  003B30  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10174  003B32  EC32  F037         	call	_Lcd_Cmd
 10175                           
 10176                           ;lcd.h: 81: Lcd_Cmd(y);
 10177  003B36  0100               	movlb	0	; () banked
 10178  003B38  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10179  003B3A  EC32  F037         	call	_Lcd_Cmd
 10180                           
 10181                           ;lcd.h: 82: break;
 10182  003B3E  D048               	goto	l632
 10183  003B40  FFFF               	dw	65535	; assembler added errata NOP
 10184                           
 10185                           ;lcd.h: 84: temp = 0xC0 + b - 1;
 10186  003B42  0100               	movlb	0	; () banked
 10187  003B44  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10188  003B46  0FBF               	addlw	191
 10189  003B48  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10190                           
 10191                           ;lcd.h: 85: z = temp >> 4;
 10192  003B4A  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10193  003B4C  0B0F               	andlw	15
 10194  003B4E  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10195                           
 10196                           ;lcd.h: 86: y = temp & 0x0F;
 10197  003B50  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10198  003B52  0B0F               	andlw	15
 10199  003B54  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;lcd.h: 87: Lcd_Cmd(z);
 10203  003B56  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10204  003B58  EC32  F037         	call	_Lcd_Cmd
 10205                           
 10206                           ;lcd.h: 88: Lcd_Cmd(y);
 10207  003B5C  0100               	movlb	0	; () banked
 10208  003B5E  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10209  003B60  EC32  F037         	call	_Lcd_Cmd
 10210                           
 10211                           ;lcd.h: 89: break;
 10212  003B64  D035               	goto	l632
 10213  003B66  FFFF               	dw	65535	; assembler added errata NOP
 10214                           
 10215                           ;lcd.h: 91: temp = 0x94 + b;
 10216  003B68  0100               	movlb	0	; () banked
 10217  003B6A  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10218  003B6C  0F94               	addlw	148
 10219  003B6E  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10220                           
 10221                           ;lcd.h: 92: z = temp >> 4;
 10222  003B70  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10223  003B72  0B0F               	andlw	15
 10224  003B74  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10225                           
 10226                           ;lcd.h: 93: y = temp & 0x0F;
 10227  003B76  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10228  003B78  0B0F               	andlw	15
 10229  003B7A  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;lcd.h: 94: Lcd_Cmd(z);
 10233  003B7C  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10234  003B7E  EC32  F037         	call	_Lcd_Cmd
 10235                           
 10236                           ;lcd.h: 95: Lcd_Cmd(y);
 10237  003B82  0100               	movlb	0	; () banked
 10238  003B84  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10239  003B86  EC32  F037         	call	_Lcd_Cmd
 10240                           
 10241                           ;lcd.h: 96: break;
 10242  003B8A  D022               	goto	l632
 10243  003B8C  FFFF               	dw	65535	; assembler added errata NOP
 10244                           
 10245                           ;lcd.h: 98: temp = 0xD4 + b;
 10246  003B8E  0100               	movlb	0	; () banked
 10247  003B90  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10248  003B92  0FD4               	addlw	212
 10249  003B94  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10250                           
 10251                           ;lcd.h: 99: z = temp >> 4;
 10252  003B96  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10253  003B98  0B0F               	andlw	15
 10254  003B9A  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10255                           
 10256                           ;lcd.h: 100: y = temp & 0x0F;
 10257  003B9C  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10258  003B9E  0B0F               	andlw	15
 10259  003BA0  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10260                           
 10261                           ; BSR set to: 0
 10262                           ;lcd.h: 101: Lcd_Cmd(z);
 10263  003BA2  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10264  003BA4  EC32  F037         	call	_Lcd_Cmd
 10265                           
 10266                           ;lcd.h: 102: Lcd_Cmd(y);
 10267  003BA8  0100               	movlb	0	; () banked
 10268  003BAA  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10269  003BAC  EC32  F037         	call	_Lcd_Cmd
 10270                           
 10271                           ;lcd.h: 105: }
 10272                           
 10273                           ;lcd.h: 104: default:return;
 10274                           
 10275                           ;lcd.h: 103: break;
 10276  003BB0  D00F               	goto	l632
 10277  003BB2                     l630:
 10278  003BB2  FFFF               	dw	65535	; assembler added errata NOP
 10279  003BB4  0100               	movlb	0	; () banked
 10280  003BB6  5184               	movf	Lcd_Set_Cursor@a& (0+255),w,b
 10281                           
 10282                           ; Switch size 1, requested type "space"
 10283                           ; Number of cases is 4, Range of values is 1 to 4
 10284                           ; switch strategies available:
 10285                           ; Name         Instructions Cycles
 10286                           ; simple_byte           13     7 (average)
 10287                           ;	Chosen strategy is simple_byte
 10288  003BB8  0A01               	xorlw	1	; case 1
 10289  003BBA  B4D8               	btfsc	status,2,c
 10290  003BBC  D7AE               	goto	l631
 10291  003BBE  0A03               	xorlw	3	; case 2
 10292  003BC0  B4D8               	btfsc	status,2,c
 10293  003BC2  D7BE               	goto	l633
 10294  003BC4  0A01               	xorlw	1	; case 3
 10295  003BC6  B4D8               	btfsc	status,2,c
 10296  003BC8  D7CE               	goto	l634
 10297  003BCA  0A07               	xorlw	7	; case 4
 10298  003BCC  B4D8               	btfsc	status,2,c
 10299  003BCE  D7DE               	goto	l635
 10300  003BD0                     l632:
 10301  003BD0  FFFF               	dw	65535	; assembler added errata NOP
 10302                           
 10303                           ; BSR set to: 0
 10304  003BD2  0012               	return		;funcret
 10305  003BD4  FFFF               	dw	65535	; errata NOP
 10306  003BD6                     __end_of_Lcd_Set_Cursor:
 10307                           	opt stack 0
 10308                           tblptru	equ	0xFF8
 10309                           tblptrh	equ	0xFF7
 10310                           tblptrl	equ	0xFF6
 10311                           tablat	equ	0xFF5
 10312                           prodh	equ	0xFF4
 10313                           prodl	equ	0xFF3
 10314                           intcon	equ	0xFF2
 10315                           postinc0	equ	0xFEE
 10316                           wreg	equ	0xFE8
 10317                           postdec1	equ	0xFE5
 10318                           fsr1l	equ	0xFE1
 10319                           indf2	equ	0xFDF
 10320                           postinc2	equ	0xFDE
 10321                           fsr2h	equ	0xFDA
 10322                           fsr2l	equ	0xFD9
 10323                           status	equ	0xFD8
 10324                           
 10325 ;; *************** function _ajusteSP_Bombas *****************
 10326 ;; Defined at:
 10327 ;;		line 7 in file "tela_CONFIG_PRESSAO.h"
 10328 ;; Parameters:    Size  Location     Type
 10329 ;;		None
 10330 ;; Auto vars:     Size  Location     Type
 10331 ;;		None
 10332 ;; Return value:  Size  Location     Type
 10333 ;;                  1    wreg      void 
 10334 ;; Registers used:
 10335 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10336 ;; Tracked objects:
 10337 ;;		On entry : 0/0
 10338 ;;		On exit  : 0/0
 10339 ;;		Unchanged: 0/0
 10340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10341 ;;      Params:         0       0       0       0       0       0       0
 10342 ;;      Locals:         0       2       0       0       0       0       0
 10343 ;;      Temps:          0       0       0       0       0       0       0
 10344 ;;      Totals:         0       2       0       0       0       0       0
 10345 ;;Total ram usage:        2 bytes
 10346 ;; Hardware stack levels used:    1
 10347 ;; Hardware stack levels required when called:   10
 10348 ;; This function calls:
 10349 ;;		_blink
 10350 ;;		_btPress
 10351 ;;		_intToFloatStr
 10352 ;;		_sprintf
 10353 ;;		_writeEEPROM_ext
 10354 ;; This function is called by:
 10355 ;;		_main
 10356 ;; This function uses a non-reentrant model
 10357 ;;
 10358                           
 10359                           	psect	text28
 10360  001906                     __ptext28:
 10361                           	opt stack 0
 10362  001906                     _ajusteSP_Bombas:
 10363                           	opt stack 0
 10364  001906  FFFF               	dw	65535	; assembler added errata NOP
 10365                           
 10366                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10367                           
 10368                           ;incstack = 0
 10369  001908  0100               	movlb	0	; () banked
 10370  00190A  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 10371  00190C  EC04  F03D         	call	_intToFloatStr
 10372  001910  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2378
 10373  001914  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2378+1
 10374                           
 10375                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10376  001918  0E7B               	movlw	low _line1
 10377  00191A  0100               	movlb	0	; () banked
 10378  00191C  6FA1               	movwf	sprintf@wh& (0+255),b
 10379  00191E  0E01               	movlw	high _line1
 10380  001920  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10381  001922  0E36               	movlw	low STR_102
 10382  001924  6FA3               	movwf	sprintf@f& (0+255),b
 10383  001926  0E7F               	movlw	high STR_102
 10384  001928  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10385  00192A  C0C2  F0A5         	movff	_ajusteSP_Bombas$2378,?_sprintf+4
 10386  00192E  C0C3  F0A6         	movff	_ajusteSP_Bombas$2378+1,?_sprintf+5
 10387  001932  ECC9  F039         	call	_sprintf	;wreg free
 10388                           
 10389                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10390  001936  0100               	movlb	0	; () banked
 10391  001938  51E2               	movf	_sp_jockey& (0+255),w,b
 10392  00193A  EC04  F03D         	call	_intToFloatStr
 10393  00193E  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2378
 10394  001942  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2378+1
 10395                           
 10396                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10397  001946  0E66               	movlw	low _line2
 10398  001948  0100               	movlb	0	; () banked
 10399  00194A  6FA1               	movwf	sprintf@wh& (0+255),b
 10400  00194C  0E01               	movlw	high _line2
 10401  00194E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10402  001950  0E41               	movlw	low STR_45
 10403  001952  6FA3               	movwf	sprintf@f& (0+255),b
 10404  001954  0E7F               	movlw	high STR_45
 10405  001956  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10406  001958  C0C2  F0A5         	movff	_ajusteSP_Bombas$2378,?_sprintf+4
 10407  00195C  C0C3  F0A6         	movff	_ajusteSP_Bombas$2378+1,?_sprintf+5
 10408  001960  ECC9  F039         	call	_sprintf	;wreg free
 10409                           
 10410                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10411  001964  0100               	movlb	0	; () banked
 10412  001966  51E1               	movf	_sp_principal& (0+255),w,b
 10413  001968  EC04  F03D         	call	_intToFloatStr
 10414  00196C  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2378
 10415  001970  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2378+1
 10416                           
 10417                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10418  001974  0E51               	movlw	low _line3
 10419  001976  0100               	movlb	0	; () banked
 10420  001978  6FA1               	movwf	sprintf@wh& (0+255),b
 10421  00197A  0E01               	movlw	high _line3
 10422  00197C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10423  00197E  0E58               	movlw	low STR_48
 10424  001980  6FA3               	movwf	sprintf@f& (0+255),b
 10425  001982  0E7E               	movlw	high STR_48
 10426  001984  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10427  001986  C0C2  F0A5         	movff	_ajusteSP_Bombas$2378,?_sprintf+4
 10428  00198A  C0C3  F0A6         	movff	_ajusteSP_Bombas$2378+1,?_sprintf+5
 10429  00198E  ECC9  F039         	call	_sprintf	;wreg free
 10430                           
 10431                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10432  001992  0100               	movlb	0	; () banked
 10433  001994  51E0               	movf	_sp_estacionaria& (0+255),w,b
 10434  001996  EC04  F03D         	call	_intToFloatStr
 10435  00199A  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2378
 10436  00199E  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2378+1
 10437                           
 10438                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10439  0019A2  0E3C               	movlw	low _line4
 10440  0019A4  0100               	movlb	0	; () banked
 10441  0019A6  6FA1               	movwf	sprintf@wh& (0+255),b
 10442  0019A8  0E01               	movlw	high _line4
 10443  0019AA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10444  0019AC  0E67               	movlw	low STR_51
 10445  0019AE  6FA3               	movwf	sprintf@f& (0+255),b
 10446  0019B0  0E7E               	movlw	high STR_51
 10447  0019B2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10448  0019B4  C0C2  F0A5         	movff	_ajusteSP_Bombas$2378,?_sprintf+4
 10449  0019B8  C0C3  F0A6         	movff	_ajusteSP_Bombas$2378+1,?_sprintf+5
 10450  0019BC  ECC9  F039         	call	_sprintf	;wreg free
 10451                           
 10452                           ;tela_CONFIG_PRESSAO.h: 14: if (btPress(1)) {
 10453  0019C0  0E01               	movlw	1
 10454  0019C2  EC4A  F03B         	call	_btPress
 10455  0019C6  0900               	iorlw	0
 10456  0019C8  B4D8               	btfsc	status,2,c
 10457  0019CA  D019               	goto	l859
 10458                           
 10459                           ;tela_CONFIG_PRESSAO.h: 15: writeEEPROM_ext(0, sp_jockey);
 10460  0019CC  C0E2  F08C         	movff	_sp_jockey,writeEEPROM_ext@data
 10461  0019D0  0E00               	movlw	0
 10462  0019D2  ECA6  F039         	call	_writeEEPROM_ext
 10463                           
 10464                           ;tela_CONFIG_PRESSAO.h: 16: writeEEPROM_ext(1, sp_principal);
 10465  0019D6  C0E1  F08C         	movff	_sp_principal,writeEEPROM_ext@data
 10466  0019DA  0E01               	movlw	1
 10467  0019DC  ECA6  F039         	call	_writeEEPROM_ext
 10468                           
 10469                           ;tela_CONFIG_PRESSAO.h: 17: writeEEPROM_ext(2, sp_estacionaria);
 10470  0019E0  C0E0  F08C         	movff	_sp_estacionaria,writeEEPROM_ext@data
 10471  0019E4  0E02               	movlw	2
 10472  0019E6  ECA6  F039         	call	_writeEEPROM_ext
 10473                           
 10474                           ;tela_CONFIG_PRESSAO.h: 18: writeEEPROM_ext(4, sp_pressao_rede);
 10475  0019EA  C0E3  F08C         	movff	_sp_pressao_rede,writeEEPROM_ext@data
 10476  0019EE  0E04               	movlw	4
 10477  0019F0  ECA6  F039         	call	_writeEEPROM_ext
 10478                           
 10479                           ;tela_CONFIG_PRESSAO.h: 19: option_posi = 0;
 10480  0019F4  0E00               	movlw	0
 10481  0019F6  0100               	movlb	0	; () banked
 10482  0019F8  6FDF               	movwf	_option_posi& (0+255),b
 10483                           
 10484                           ; BSR set to: 0
 10485                           ;tela_CONFIG_PRESSAO.h: 20: menu_posi = _menu_posi;
 10486  0019FA  C0DD  F0DE         	movff	__menu_posi,_menu_posi
 10487  0019FE                     l859:
 10488  0019FE  FFFF               	dw	65535	; assembler added errata NOP
 10489                           
 10490                           ;tela_CONFIG_PRESSAO.h: 21: }
 10491                           ;tela_CONFIG_PRESSAO.h: 23: if (btPress(4)) {
 10492                           
 10493                           ; BSR set to: 0
 10494  001A00  0E04               	movlw	4
 10495  001A02  EC4A  F03B         	call	_btPress
 10496  001A06  0900               	iorlw	0
 10497  001A08  B4D8               	btfsc	status,2,c
 10498  001A0A  D097               	goto	l861
 10499                           
 10500                           ;tela_CONFIG_PRESSAO.h: 24: option_posi++;
 10501  001A0C  0100               	movlb	0	; () banked
 10502  001A0E  2BDF               	incf	_option_posi& (0+255),f,b
 10503                           
 10504                           ; BSR set to: 0
 10505                           ;tela_CONFIG_PRESSAO.h: 25: }
 10506                           ;tela_CONFIG_PRESSAO.h: 27: switch (option_posi) {
 10507  001A10  D094               	goto	l861
 10508  001A12  FFFF               	dw	65535	; assembler added errata NOP
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;tela_CONFIG_PRESSAO.h: 29: blink(line1, 8, 15);
 10512                           
 10513                           ; BSR set to: 0
 10514  001A14  0E7B               	movlw	low _line1
 10515  001A16  6F80               	movwf	blink@line& (0+255),b
 10516  001A18  0E01               	movlw	high _line1
 10517  001A1A  6F81               	movwf	(blink@line+1)& (0+255),b
 10518  001A1C  0E08               	movlw	8
 10519  001A1E  6F82               	movwf	blink@start& (0+255),b
 10520  001A20  0E0F               	movlw	15
 10521  001A22  6F83               	movwf	blink@end& (0+255),b
 10522  001A24  ECE2  F038         	call	_blink	;wreg free
 10523                           
 10524                           ;tela_CONFIG_PRESSAO.h: 30: if (btPress(3)) {
 10525  001A28  0E03               	movlw	3
 10526  001A2A  EC4A  F03B         	call	_btPress
 10527  001A2E  0900               	iorlw	0
 10528  001A30  B4D8               	btfsc	status,2,c
 10529  001A32  D002               	goto	l863
 10530                           
 10531                           ;tela_CONFIG_PRESSAO.h: 31: sp_pressao_rede++;
 10532  001A34  0100               	movlb	0	; () banked
 10533  001A36  2BE3               	incf	_sp_pressao_rede& (0+255),f,b
 10534  001A38                     l863:
 10535  001A38  FFFF               	dw	65535	; assembler added errata NOP
 10536                           
 10537                           ;tela_CONFIG_PRESSAO.h: 32: }
 10538                           ;tela_CONFIG_PRESSAO.h: 33: if (btPress(2)) {
 10539                           
 10540                           ; BSR set to: 0
 10541  001A3A  0E02               	movlw	2
 10542  001A3C  EC4A  F03B         	call	_btPress
 10543  001A40  0900               	iorlw	0
 10544  001A42  B4D8               	btfsc	status,2,c
 10545  001A44  D002               	goto	l864
 10546                           
 10547                           ;tela_CONFIG_PRESSAO.h: 34: sp_pressao_rede--;
 10548  001A46  0100               	movlb	0	; () banked
 10549  001A48  07E3               	decf	_sp_pressao_rede& (0+255),f,b
 10550  001A4A                     l864:
 10551  001A4A  FFFF               	dw	65535	; assembler added errata NOP
 10552                           
 10553                           ;tela_CONFIG_PRESSAO.h: 35: }
 10554                           ;tela_CONFIG_PRESSAO.h: 36: if (sp_pressao_rede > 99) {
 10555                           
 10556                           ; BSR set to: 0
 10557  001A4C  0E63               	movlw	99
 10558  001A4E  0100               	movlb	0	; () banked
 10559  001A50  65E3               	cpfsgt	_sp_pressao_rede& (0+255),b
 10560  001A52  D083               	goto	l866
 10561                           
 10562                           ; BSR set to: 0
 10563                           ;tela_CONFIG_PRESSAO.h: 37: sp_pressao_rede = 0;
 10564  001A54  0E00               	movlw	0
 10565  001A56  6FE3               	movwf	_sp_pressao_rede& (0+255),b
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;tela_CONFIG_PRESSAO.h: 38: }
 10569                           ;tela_CONFIG_PRESSAO.h: 39: break;
 10570  001A58  D080               	goto	l866
 10571  001A5A  FFFF               	dw	65535	; assembler added errata NOP
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;tela_CONFIG_PRESSAO.h: 41: blink(line2, 8, 15);
 10575                           
 10576                           ; BSR set to: 0
 10577  001A5C  0E66               	movlw	low _line2
 10578  001A5E  6F80               	movwf	blink@line& (0+255),b
 10579  001A60  0E01               	movlw	high _line2
 10580  001A62  6F81               	movwf	(blink@line+1)& (0+255),b
 10581  001A64  0E08               	movlw	8
 10582  001A66  6F82               	movwf	blink@start& (0+255),b
 10583  001A68  0E0F               	movlw	15
 10584  001A6A  6F83               	movwf	blink@end& (0+255),b
 10585  001A6C  ECE2  F038         	call	_blink	;wreg free
 10586                           
 10587                           ;tela_CONFIG_PRESSAO.h: 42: if (btPress(3)) {
 10588  001A70  0E03               	movlw	3
 10589  001A72  EC4A  F03B         	call	_btPress
 10590  001A76  0900               	iorlw	0
 10591  001A78  B4D8               	btfsc	status,2,c
 10592  001A7A  D002               	goto	l868
 10593                           
 10594                           ;tela_CONFIG_PRESSAO.h: 43: sp_jockey++;
 10595  001A7C  0100               	movlb	0	; () banked
 10596  001A7E  2BE2               	incf	_sp_jockey& (0+255),f,b
 10597  001A80                     l868:
 10598  001A80  FFFF               	dw	65535	; assembler added errata NOP
 10599                           
 10600                           ;tela_CONFIG_PRESSAO.h: 44: }
 10601                           ;tela_CONFIG_PRESSAO.h: 45: if (btPress(2)) {
 10602                           
 10603                           ; BSR set to: 0
 10604  001A82  0E02               	movlw	2
 10605  001A84  EC4A  F03B         	call	_btPress
 10606  001A88  0900               	iorlw	0
 10607  001A8A  B4D8               	btfsc	status,2,c
 10608  001A8C  D002               	goto	l869
 10609                           
 10610                           ;tela_CONFIG_PRESSAO.h: 46: sp_jockey--;
 10611  001A8E  0100               	movlb	0	; () banked
 10612  001A90  07E2               	decf	_sp_jockey& (0+255),f,b
 10613  001A92                     l869:
 10614  001A92  FFFF               	dw	65535	; assembler added errata NOP
 10615                           
 10616                           ;tela_CONFIG_PRESSAO.h: 47: }
 10617                           ;tela_CONFIG_PRESSAO.h: 48: if (sp_jockey > 99) {
 10618                           
 10619                           ; BSR set to: 0
 10620  001A94  0E63               	movlw	99
 10621  001A96  0100               	movlb	0	; () banked
 10622  001A98  65E2               	cpfsgt	_sp_jockey& (0+255),b
 10623  001A9A  D05F               	goto	l866
 10624                           
 10625                           ; BSR set to: 0
 10626                           ;tela_CONFIG_PRESSAO.h: 49: sp_jockey = 0;
 10627  001A9C  0E00               	movlw	0
 10628  001A9E  6FE2               	movwf	_sp_jockey& (0+255),b
 10629                           
 10630                           ; BSR set to: 0
 10631                           ;tela_CONFIG_PRESSAO.h: 50: }
 10632                           ;tela_CONFIG_PRESSAO.h: 51: break;
 10633  001AA0  D05C               	goto	l866
 10634  001AA2  FFFF               	dw	65535	; assembler added errata NOP
 10635                           
 10636                           ; BSR set to: 0
 10637                           ;tela_CONFIG_PRESSAO.h: 53: blink(line3, 12, 18);
 10638                           
 10639                           ; BSR set to: 0
 10640  001AA4  0E51               	movlw	low _line3
 10641  001AA6  6F80               	movwf	blink@line& (0+255),b
 10642  001AA8  0E01               	movlw	high _line3
 10643  001AAA  6F81               	movwf	(blink@line+1)& (0+255),b
 10644  001AAC  0E0C               	movlw	12
 10645  001AAE  6F82               	movwf	blink@start& (0+255),b
 10646  001AB0  0E12               	movlw	18
 10647  001AB2  6F83               	movwf	blink@end& (0+255),b
 10648  001AB4  ECE2  F038         	call	_blink	;wreg free
 10649                           
 10650                           ;tela_CONFIG_PRESSAO.h: 54: if (btPress(3)) {
 10651  001AB8  0E03               	movlw	3
 10652  001ABA  EC4A  F03B         	call	_btPress
 10653  001ABE  0900               	iorlw	0
 10654  001AC0  B4D8               	btfsc	status,2,c
 10655  001AC2  D002               	goto	l872
 10656                           
 10657                           ;tela_CONFIG_PRESSAO.h: 55: sp_principal++;
 10658  001AC4  0100               	movlb	0	; () banked
 10659  001AC6  2BE1               	incf	_sp_principal& (0+255),f,b
 10660  001AC8                     l872:
 10661  001AC8  FFFF               	dw	65535	; assembler added errata NOP
 10662                           
 10663                           ;tela_CONFIG_PRESSAO.h: 56: }
 10664                           ;tela_CONFIG_PRESSAO.h: 57: if (btPress(2)) {
 10665                           
 10666                           ; BSR set to: 0
 10667  001ACA  0E02               	movlw	2
 10668  001ACC  EC4A  F03B         	call	_btPress
 10669  001AD0  0900               	iorlw	0
 10670  001AD2  B4D8               	btfsc	status,2,c
 10671  001AD4  D002               	goto	l873
 10672                           
 10673                           ;tela_CONFIG_PRESSAO.h: 58: sp_principal--;
 10674  001AD6  0100               	movlb	0	; () banked
 10675  001AD8  07E1               	decf	_sp_principal& (0+255),f,b
 10676  001ADA                     l873:
 10677  001ADA  FFFF               	dw	65535	; assembler added errata NOP
 10678                           
 10679                           ;tela_CONFIG_PRESSAO.h: 59: }
 10680                           ;tela_CONFIG_PRESSAO.h: 60: if (sp_principal > 99) {
 10681                           
 10682                           ; BSR set to: 0
 10683  001ADC  0E63               	movlw	99
 10684  001ADE  0100               	movlb	0	; () banked
 10685  001AE0  65E1               	cpfsgt	_sp_principal& (0+255),b
 10686  001AE2  D03B               	goto	l866
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;tela_CONFIG_PRESSAO.h: 61: sp_principal = 0;
 10690  001AE4  0E00               	movlw	0
 10691  001AE6  6FE1               	movwf	_sp_principal& (0+255),b
 10692                           
 10693                           ; BSR set to: 0
 10694                           ;tela_CONFIG_PRESSAO.h: 62: }
 10695                           ;tela_CONFIG_PRESSAO.h: 63: break;
 10696  001AE8  D038               	goto	l866
 10697  001AEA  FFFF               	dw	65535	; assembler added errata NOP
 10698                           
 10699                           ; BSR set to: 0
 10700                           ;tela_CONFIG_PRESSAO.h: 65: blink(line4, 12, 18);
 10701                           
 10702                           ; BSR set to: 0
 10703  001AEC  0E3C               	movlw	low _line4
 10704  001AEE  6F80               	movwf	blink@line& (0+255),b
 10705  001AF0  0E01               	movlw	high _line4
 10706  001AF2  6F81               	movwf	(blink@line+1)& (0+255),b
 10707  001AF4  0E0C               	movlw	12
 10708  001AF6  6F82               	movwf	blink@start& (0+255),b
 10709  001AF8  0E12               	movlw	18
 10710  001AFA  6F83               	movwf	blink@end& (0+255),b
 10711  001AFC  ECE2  F038         	call	_blink	;wreg free
 10712                           
 10713                           ;tela_CONFIG_PRESSAO.h: 66: if (btPress(3)) {
 10714  001B00  0E03               	movlw	3
 10715  001B02  EC4A  F03B         	call	_btPress
 10716  001B06  0900               	iorlw	0
 10717  001B08  B4D8               	btfsc	status,2,c
 10718  001B0A  D002               	goto	l876
 10719                           
 10720                           ;tela_CONFIG_PRESSAO.h: 67: sp_estacionaria++;
 10721  001B0C  0100               	movlb	0	; () banked
 10722  001B0E  2BE0               	incf	_sp_estacionaria& (0+255),f,b
 10723  001B10                     l876:
 10724  001B10  FFFF               	dw	65535	; assembler added errata NOP
 10725                           
 10726                           ;tela_CONFIG_PRESSAO.h: 68: }
 10727                           ;tela_CONFIG_PRESSAO.h: 69: if (btPress(2)) {
 10728                           
 10729                           ; BSR set to: 0
 10730  001B12  0E02               	movlw	2
 10731  001B14  EC4A  F03B         	call	_btPress
 10732  001B18  0900               	iorlw	0
 10733  001B1A  B4D8               	btfsc	status,2,c
 10734  001B1C  D002               	goto	l877
 10735                           
 10736                           ;tela_CONFIG_PRESSAO.h: 70: sp_estacionaria--;
 10737  001B1E  0100               	movlb	0	; () banked
 10738  001B20  07E0               	decf	_sp_estacionaria& (0+255),f,b
 10739  001B22                     l877:
 10740  001B22  FFFF               	dw	65535	; assembler added errata NOP
 10741                           
 10742                           ;tela_CONFIG_PRESSAO.h: 71: }
 10743                           ;tela_CONFIG_PRESSAO.h: 72: if (sp_estacionaria > 99) {
 10744                           
 10745                           ; BSR set to: 0
 10746  001B24  0E63               	movlw	99
 10747  001B26  0100               	movlb	0	; () banked
 10748  001B28  65E0               	cpfsgt	_sp_estacionaria& (0+255),b
 10749  001B2A  D017               	goto	l866
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;tela_CONFIG_PRESSAO.h: 73: sp_estacionaria = 0;
 10753  001B2C  0E00               	movlw	0
 10754  001B2E  6FE0               	movwf	_sp_estacionaria& (0+255),b
 10755                           
 10756                           ; BSR set to: 0
 10757                           ;tela_CONFIG_PRESSAO.h: 74: }
 10758                           ;tela_CONFIG_PRESSAO.h: 75: break;
 10759  001B30  D014               	goto	l866
 10760  001B32  FFFF               	dw	65535	; assembler added errata NOP
 10761                           
 10762                           ; BSR set to: 0
 10763                           
 10764                           ; BSR set to: 0
 10765  001B34  0E00               	movlw	0
 10766  001B36  6FDF               	movwf	_option_posi& (0+255),b
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;tela_CONFIG_PRESSAO.h: 78: }
 10770                           
 10771                           ;tela_CONFIG_PRESSAO.h: 77: break;
 10772  001B38  D010               	goto	l866
 10773  001B3A                     l861:
 10774  001B3A  FFFF               	dw	65535	; assembler added errata NOP
 10775                           
 10776                           ; BSR set to: 0
 10777  001B3C  0100               	movlb	0	; () banked
 10778  001B3E  51DF               	movf	_option_posi& (0+255),w,b
 10779                           
 10780                           ; Switch size 1, requested type "space"
 10781                           ; Number of cases is 4, Range of values is 0 to 3
 10782                           ; switch strategies available:
 10783                           ; Name         Instructions Cycles
 10784                           ; simple_byte           13     7 (average)
 10785                           ;	Chosen strategy is simple_byte
 10786  001B40  0A00               	xorlw	0	; case 0
 10787  001B42  B4D8               	btfsc	status,2,c
 10788  001B44  D766               	goto	l862
 10789  001B46  0A01               	xorlw	1	; case 1
 10790  001B48  B4D8               	btfsc	status,2,c
 10791  001B4A  D787               	goto	l867
 10792  001B4C  0A03               	xorlw	3	; case 2
 10793  001B4E  B4D8               	btfsc	status,2,c
 10794  001B50  D7A8               	goto	l871
 10795  001B52  0A01               	xorlw	1	; case 3
 10796  001B54  B4D8               	btfsc	status,2,c
 10797  001B56  D7C9               	goto	l875
 10798  001B58  D7EC               	goto	l879
 10799  001B5A                     l866:
 10800  001B5A  FFFF               	dw	65535	; assembler added errata NOP
 10801                           
 10802                           ; BSR set to: 0
 10803                           
 10804                           ; BSR set to: 0
 10805  001B5C  0012               	return		;funcret
 10806  001B5E  FFFF               	dw	65535	; errata NOP
 10807  001B60                     __end_of_ajusteSP_Bombas:
 10808                           	opt stack 0
 10809                           tblptru	equ	0xFF8
 10810                           tblptrh	equ	0xFF7
 10811                           tblptrl	equ	0xFF6
 10812                           tablat	equ	0xFF5
 10813                           prodh	equ	0xFF4
 10814                           prodl	equ	0xFF3
 10815                           intcon	equ	0xFF2
 10816                           postinc0	equ	0xFEE
 10817                           wreg	equ	0xFE8
 10818                           postdec1	equ	0xFE5
 10819                           fsr1l	equ	0xFE1
 10820                           indf2	equ	0xFDF
 10821                           postinc2	equ	0xFDE
 10822                           fsr2h	equ	0xFDA
 10823                           fsr2l	equ	0xFD9
 10824                           status	equ	0xFD8
 10825                           
 10826 ;; *************** function _blink *****************
 10827 ;; Defined at:
 10828 ;;		line 173 in file "lcd.h"
 10829 ;; Parameters:    Size  Location     Type
 10830 ;;  line            2    0[BANK0 ] PTR unsigned char 
 10831 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
 10832 ;;  start           1    2[BANK0 ] unsigned char 
 10833 ;;  end             1    3[BANK0 ] unsigned char 
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  i               1    4[BANK0 ] unsigned char 
 10836 ;; Return value:  Size  Location     Type
 10837 ;;                  1    wreg      void 
 10838 ;; Registers used:
 10839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10840 ;; Tracked objects:
 10841 ;;		On entry : 0/0
 10842 ;;		On exit  : 0/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10845 ;;      Params:         0       4       0       0       0       0       0
 10846 ;;      Locals:         0       1       0       0       0       0       0
 10847 ;;      Temps:          0       0       0       0       0       0       0
 10848 ;;      Totals:         0       5       0       0       0       0       0
 10849 ;;Total ram usage:        5 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; Hardware stack levels required when called:    6
 10852 ;; This function calls:
 10853 ;;		Nothing
 10854 ;; This function is called by:
 10855 ;;		_telaPrincipal
 10856 ;;		_tela_ajusteRTC
 10857 ;;		_tela_testeBombas
 10858 ;;		_configuraTelefones
 10859 ;;		_configurarEstacionaria
 10860 ;;		_ajusteSP_Bombas
 10861 ;; This function uses a non-reentrant model
 10862 ;;
 10863                           
 10864                           	psect	text29
 10865  0071C4                     __ptext29:
 10866                           	opt stack 0
 10867  0071C4                     _blink:
 10868                           	opt stack 0
 10869  0071C4  FFFF               	dw	65535	; assembler added errata NOP
 10870                           
 10871                           ;lcd.h: 174: if (blinkk) {
 10872                           
 10873                           ; BSR set to: 0
 10874                           ;incstack = 0
 10875  0071C6  5067               	movf	_blinkk,w,c
 10876  0071C8  B4D8               	btfsc	status,2,c
 10877  0071CA  D018               	goto	u6300
 10878                           
 10879                           ;lcd.h: 175: char i = 0;
 10880  0071CC  0E00               	movlw	0
 10881  0071CE  0100               	movlb	0	; () banked
 10882  0071D0  6F84               	movwf	blink@i& (0+255),b
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;lcd.h: 176: for (i = (--start); i < end; i++) {
 10886  0071D2  0782               	decf	blink@start& (0+255),f,b
 10887  0071D4  C082  F084         	movff	blink@start,blink@i
 10888  0071D8  D00C               	goto	l668
 10889  0071DA  FFFF               	dw	65535	; assembler added errata NOP
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;lcd.h: 177: line[i] = ' ';
 10893                           
 10894                           ; BSR set to: 0
 10895  0071DC  5184               	movf	blink@i& (0+255),w,b
 10896  0071DE  0D01               	mullw	1
 10897  0071E0  50F3               	movf	prodl,w,c
 10898  0071E2  2580               	addwf	blink@line& (0+255),w,b
 10899  0071E4  6ED9               	movwf	fsr2l,c
 10900  0071E6  50F4               	movf	prodh,w,c
 10901  0071E8  2181               	addwfc	(blink@line+1)& (0+255),w,b
 10902  0071EA  6EDA               	movwf	fsr2h,c
 10903  0071EC  0E20               	movlw	32
 10904  0071EE  6EDF               	movwf	indf2,c
 10905                           
 10906                           ; BSR set to: 0
 10907  0071F0  2B84               	incf	blink@i& (0+255),f,b
 10908  0071F2                     l668:
 10909  0071F2  FFFF               	dw	65535	; assembler added errata NOP
 10910                           
 10911                           ; BSR set to: 0
 10912                           
 10913                           ; BSR set to: 0
 10914  0071F4  5183               	movf	blink@end& (0+255),w,b
 10915  0071F6  5D84               	subwf	blink@i& (0+255),w,b
 10916  0071F8  A0D8               	btfss	status,0,c
 10917  0071FA  D7EF               	goto	l669
 10918  0071FC                     u6300:
 10919  0071FC  FFFF               	dw	65535	; assembler added errata NOP
 10920                           
 10921                           ; BSR set to: 0
 10922                           
 10923                           ; BSR set to: 0
 10924  0071FE  0012               	return		;funcret
 10925  007200  FFFF               	dw	65535	; errata NOP
 10926  007202                     __end_of_blink:
 10927                           	opt stack 0
 10928                           tblptru	equ	0xFF8
 10929                           tblptrh	equ	0xFF7
 10930                           tblptrl	equ	0xFF6
 10931                           tablat	equ	0xFF5
 10932                           prodh	equ	0xFF4
 10933                           prodl	equ	0xFF3
 10934                           intcon	equ	0xFF2
 10935                           postinc0	equ	0xFEE
 10936                           wreg	equ	0xFE8
 10937                           postdec1	equ	0xFE5
 10938                           fsr1l	equ	0xFE1
 10939                           indf2	equ	0xFDF
 10940                           postinc2	equ	0xFDE
 10941                           fsr2h	equ	0xFDA
 10942                           fsr2l	equ	0xFD9
 10943                           status	equ	0xFD8
 10944                           
 10945 ;; *************** function _acaoTesteBombas *****************
 10946 ;; Defined at:
 10947 ;;		line 135 in file "controle.h"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;		None
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;  i               1   88[BANK0 ] unsigned char 
 10952 ;;  intervalo       1   87[BANK0 ] unsigned char 
 10953 ;; Return value:  Size  Location     Type
 10954 ;;                  1    wreg      void 
 10955 ;; Registers used:
 10956 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10957 ;; Tracked objects:
 10958 ;;		On entry : 0/0
 10959 ;;		On exit  : 0/0
 10960 ;;		Unchanged: 0/0
 10961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10962 ;;      Params:         0       0       0       0       0       0       0
 10963 ;;      Locals:         0      12       0       0       0       0       0
 10964 ;;      Temps:          0       5       0       0       0       0       0
 10965 ;;      Totals:         0      17       0       0       0       0       0
 10966 ;;Total ram usage:       17 bytes
 10967 ;; Hardware stack levels used:    1
 10968 ;; Hardware stack levels required when called:   10
 10969 ;; This function calls:
 10970 ;;		_btPress
 10971 ;;		_clearShiftREG
 10972 ;;		_drenarPressao
 10973 ;;		_enviaSMS
 10974 ;;		_intToFloatStr
 10975 ;;		_partidaBombaEstacionaria
 10976 ;;		_readEEPROM_ext
 10977 ;;		_salvarLOG
 10978 ;;		_sprintf
 10979 ;;		_writeEEPROM_ext
 10980 ;; This function is called by:
 10981 ;;		_main
 10982 ;; This function uses a non-reentrant model
 10983 ;;
 10984                           
 10985                           	psect	text30
 10986  00091A                     __ptext30:
 10987                           	opt stack 0
 10988  00091A                     _acaoTesteBombas:
 10989                           	opt stack 0
 10990  00091A  FFFF               	dw	65535	; assembler added errata NOP
 10991                           
 10992                           ;controle.h: 136: if (btPress(1)) {
 10993                           
 10994                           ;incstack = 0
 10995  00091C  0E01               	movlw	1
 10996  00091E  EC4A  F03B         	call	_btPress
 10997  000922  0900               	iorlw	0
 10998  000924  B4D8               	btfsc	status,2,c
 10999  000926  D033               	goto	u7270
 11000                           
 11001                           ;controle.h: 137: executandoTeste = 0;
 11002  000928  0E00               	movlw	0
 11003  00092A  0100               	movlb	0	; () banked
 11004  00092C  6FF1               	movwf	_executandoTeste& (0+255),b
 11005                           
 11006                           ;controle.h: 138: gsmOcupado = 0;
 11007  00092E  0E00               	movlw	0
 11008  000930  6FF4               	movwf	_gsmOcupado& (0+255),b
 11009                           
 11010                           ;controle.h: 139: etapaTesteBombas = 0;
 11011  000932  0E00               	movlw	0
 11012  000934  6E72               	movwf	_etapaTesteBombas,c
 11013                           
 11014                           ; BSR set to: 0
 11015                           ;controle.h: 140: unsigned char intervalo = readEEPROM_ext(6);
 11016  000936  0E06               	movlw	6
 11017  000938  EC61  F03A         	call	_readEEPROM_ext
 11018  00093C  0100               	movlb	0	; () banked
 11019  00093E  6FD7               	movwf	acaoTesteBombas@intervalo& (0+255),b
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;controle.h: 141: intervalo_teste_dia = intervalo > 0 ? intervalo : 1;
 11023  000940  51D7               	movf	acaoTesteBombas@intervalo& (0+255),w,b
 11024  000942  A4D8               	btfss	status,2,c
 11025  000944  D005               	goto	l516
 11026                           
 11027                           ; BSR set to: 0
 11028  000946  0E00               	movlw	0
 11029  000948  6FD0               	movwf	(_acaoTesteBombas$1292+1)& (0+255),b
 11030  00094A  0E01               	movlw	1
 11031  00094C  6FCF               	movwf	_acaoTesteBombas$1292& (0+255),b
 11032  00094E  D004               	goto	l518
 11033  000950                     l516:
 11034  000950  FFFF               	dw	65535	; assembler added errata NOP
 11035                           
 11036                           ; BSR set to: 0
 11037  000952  C0D7  F0CF         	movff	acaoTesteBombas@intervalo,_acaoTesteBombas$1292
 11038  000956  6BD0               	clrf	(_acaoTesteBombas$1292+1)& (0+255),b
 11039  000958                     l518:
 11040  000958  FFFF               	dw	65535	; assembler added errata NOP
 11041                           
 11042                           ; BSR set to: 0
 11043  00095A  C0CF  F0E8         	movff	_acaoTesteBombas$1292,_intervalo_teste_dia
 11044                           
 11045                           ;controle.h: 142: menu_posi = _menu_posi;
 11046  00095E  C0DD  F0DE         	movff	__menu_posi,_menu_posi
 11047                           
 11048                           ; BSR set to: 0
 11049                           ;controle.h: 143: char i = 0;
 11050  000962  0E00               	movlw	0
 11051  000964  6FD8               	movwf	acaoTesteBombas@i& (0+255),b
 11052                           
 11053                           ;controle.h: 144: for (i = 0; i < 8; i++) {
 11054  000966  0E00               	movlw	0
 11055  000968  6FD8               	movwf	acaoTesteBombas@i& (0+255),b
 11056  00096A                     l6634:
 11057  00096A  FFFF               	dw	65535	; assembler added errata NOP
 11058                           
 11059                           ; BSR set to: 0
 11060  00096C  0E07               	movlw	7
 11061  00096E  65D8               	cpfsgt	acaoTesteBombas@i& (0+255),b
 11062  000970  D001               	goto	l519
 11063  000972  D00D               	goto	u7270
 11064  000974                     l519:
 11065  000974  FFFF               	dw	65535	; assembler added errata NOP
 11066                           
 11067                           ; BSR set to: 0
 11068                           ;controle.h: 145: shift[i] = 0;
 11069                           
 11070                           ; BSR set to: 0
 11071  000976  51D8               	movf	acaoTesteBombas@i& (0+255),w,b
 11072  000978  0D01               	mullw	1
 11073  00097A  0E44               	movlw	low _shift
 11074  00097C  24F3               	addwf	prodl,w,c
 11075  00097E  6ED9               	movwf	fsr2l,c
 11076  000980  0E00               	movlw	high _shift
 11077  000982  20F4               	addwfc	prodh,w,c
 11078  000984  6EDA               	movwf	fsr2h,c
 11079  000986  0E00               	movlw	0
 11080  000988  6EDF               	movwf	indf2,c
 11081                           
 11082                           ; BSR set to: 0
 11083  00098A  2BD8               	incf	acaoTesteBombas@i& (0+255),f,b
 11084  00098C  D7EE               	goto	l6634
 11085  00098E                     u7270:
 11086  00098E  FFFF               	dw	65535	; assembler added errata NOP
 11087                           
 11088                           ;controle.h: 146: }
 11089                           ;controle.h: 147: }
 11090                           ;controle.h: 149: if (etapaTesteBombas < 10) {
 11091                           
 11092                           ; BSR set to: 0
 11093                           
 11094                           ; BSR set to: 0
 11095  000990  0E0A               	movlw	10
 11096  000992  6072               	cpfslt	_etapaTesteBombas,c
 11097  000994  D1EE               	goto	l522
 11098                           
 11099                           ;controle.h: 150: sprintf(&line1[3], "Aguarde... %ds", timerTesteBombas);
 11100  000996  0E7E               	movlw	low (_line1+3)
 11101  000998  0100               	movlb	0	; () banked
 11102  00099A  6FA1               	movwf	sprintf@wh& (0+255),b
 11103  00099C  0E01               	movlw	high (_line1+3)
 11104  00099E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11105  0009A0  0E76               	movlw	low STR_38
 11106  0009A2  6FA3               	movwf	sprintf@f& (0+255),b
 11107  0009A4  0E7E               	movlw	high STR_38
 11108  0009A6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11109  0009A8  C0D9  F0A5         	movff	_timerTesteBombas,?_sprintf+4
 11110  0009AC  C0DA  F0A6         	movff	_timerTesteBombas+1,?_sprintf+5
 11111  0009B0  ECC9  F039         	call	_sprintf	;wreg free
 11112                           
 11113                           ;controle.h: 151: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 11114  0009B4  0100               	movlb	0	; () banked
 11115  0009B6  51F8               	movf	_pressao& (0+255),w,b
 11116  0009B8  EC04  F03D         	call	_intToFloatStr
 11117  0009BC  C0B5  F0CD         	movff	?_intToFloatStr,_acaoTesteBombas$2376
 11118  0009C0  C0B6  F0CE         	movff	?_intToFloatStr+1,_acaoTesteBombas$2376+1
 11119                           
 11120                           ;controle.h: 151: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 11121  0009C4  0E68               	movlw	low (_line2+2)
 11122  0009C6  0100               	movlb	0	; () banked
 11123  0009C8  6FA1               	movwf	sprintf@wh& (0+255),b
 11124  0009CA  0E01               	movlw	high (_line2+2)
 11125  0009CC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11126  0009CE  0E2B               	movlw	low STR_39
 11127  0009D0  6FA3               	movwf	sprintf@f& (0+255),b
 11128  0009D2  0E7E               	movlw	high STR_39
 11129  0009D4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11130  0009D6  C0CD  F0A5         	movff	_acaoTesteBombas$2376,?_sprintf+4
 11131  0009DA  C0CE  F0A6         	movff	_acaoTesteBombas$2376+1,?_sprintf+5
 11132  0009DE  ECC9  F039         	call	_sprintf	;wreg free
 11133                           
 11134                           ;controle.h: 152: }
 11135                           ;controle.h: 154: switch (etapaTesteBombas) {
 11136  0009E2  D1C7               	goto	l522
 11137  0009E4  FFFF               	dw	65535	; assembler added errata NOP
 11138                           
 11139                           ;controle.h: 156: dias_restante_teste = 0;
 11140  0009E6  0E00               	movlw	0
 11141  0009E8  0100               	movlb	0	; () banked
 11142  0009EA  6FE7               	movwf	_dias_restante_teste& (0+255),b
 11143                           
 11144                           ; BSR set to: 0
 11145                           ;controle.h: 157: writeEEPROM_ext(10, dias_restante_teste);
 11146  0009EC  C0E7  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
 11147  0009F0  0E0A               	movlw	10
 11148  0009F2  ECA6  F039         	call	_writeEEPROM_ext
 11149                           
 11150                           ;controle.h: 158: shift[2] = 1;
 11151  0009F6  0E01               	movlw	1
 11152  0009F8  6E46               	movwf	_shift+2,c
 11153                           
 11154                           ;controle.h: 159: timerTesteBombas = 30;
 11155  0009FA  0E00               	movlw	0
 11156  0009FC  0100               	movlb	0	; () banked
 11157  0009FE  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11158  000A00  0E1E               	movlw	30
 11159  000A02  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11160                           
 11161                           ; BSR set to: 0
 11162                           ;controle.h: 160: etapaTesteBombas = 1;
 11163  000A04  0E01               	movlw	1
 11164  000A06  D112               	goto	L26
 11165  000A08  FFFF               	dw	65535	; assembler added errata NOP
 11166                           
 11167                           ;controle.h: 163: drenarPressao();
 11168                           
 11169                           ; BSR set to: 0
 11170  000A0A  EC90  F037         	call	_drenarPressao	;wreg free
 11171                           
 11172                           ;controle.h: 164: if (pressao <= (sp_pressao_rede - 10)) {
 11173  000A0E  0EF6               	movlw	246
 11174  000A10  0100               	movlb	0	; () banked
 11175  000A12  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11176  000A14  0EFF               	movlw	255
 11177  000A16  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11178  000A18  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11179  000A1A  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11180  000A1C  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11181  000A1E  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11182  000A20  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11183  000A22  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11184  000A24  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11185  000A26  51F8               	movf	_pressao& (0+255),w,b
 11186  000A28  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11187  000A2A  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11188  000A2C  0A80               	xorlw	128
 11189  000A2E  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11190  000A30  51F9               	movf	(_pressao+1)& (0+255),w,b
 11191  000A32  0A80               	xorlw	128
 11192  000A34  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11193  000A36  A0D8               	btfss	status,0,c
 11194  000A38  D1C6               	goto	l524
 11195                           
 11196                           ; BSR set to: 0
 11197                           ;controle.h: 165: shift[2] = 0;
 11198  000A3A  0E00               	movlw	0
 11199  000A3C  6E46               	movwf	_shift+2,c
 11200                           
 11201                           ;controle.h: 166: shift[6] = 1;
 11202  000A3E  0E01               	movlw	1
 11203  000A40  6E4A               	movwf	_shift+6,c
 11204                           
 11205                           ;controle.h: 167: etapaTesteBombas = 2;
 11206  000A42  0E02               	movlw	2
 11207  000A44  D04C               	goto	L31
 11208  000A46  FFFF               	dw	65535	; assembler added errata NOP
 11209                           
 11210                           ;controle.h: 172: sprintf(line4, "Bomba Jockey...");
 11211                           
 11212                           ; BSR set to: 0
 11213  000A48  0E3C               	movlw	low _line4
 11214  000A4A  0100               	movlb	0	; () banked
 11215  000A4C  6FA1               	movwf	sprintf@wh& (0+255),b
 11216  000A4E  0E01               	movlw	high _line4
 11217  000A50  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11218  000A52  0E0B               	movlw	low STR_40
 11219  000A54  6FA3               	movwf	sprintf@f& (0+255),b
 11220  000A56  0E7E               	movlw	high STR_40
 11221  000A58  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11222  000A5A  ECC9  F039         	call	_sprintf	;wreg free
 11223                           
 11224                           ;controle.h: 173: if (pressao >= sp_pressao_rede) {
 11225  000A5E  0100               	movlb	0	; () banked
 11226  000A60  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11227  000A62  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11228  000A64  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11229  000A66  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11230  000A68  5DF8               	subwf	_pressao& (0+255),w,b
 11231  000A6A  51F9               	movf	(_pressao+1)& (0+255),w,b
 11232  000A6C  0A80               	xorlw	128
 11233  000A6E  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11234  000A70  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11235  000A72  0A80               	xorlw	128
 11236  000A74  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11237  000A76  A0D8               	btfss	status,0,c
 11238  000A78  D006               	goto	l528
 11239                           
 11240                           ; BSR set to: 0
 11241                           ;controle.h: 174: shift[6] = 0;
 11242  000A7A  0E00               	movlw	0
 11243  000A7C  6E4A               	movwf	_shift+6,c
 11244                           
 11245                           ;controle.h: 175: status_jockey = 1;
 11246  000A7E  0E01               	movlw	1
 11247  000A80  6FFD               	movwf	_status_jockey& (0+255),b
 11248                           
 11249                           ;controle.h: 176: etapaTesteBombas = 3;
 11250  000A82  0E03               	movlw	3
 11251  000A84  6E72               	movwf	_etapaTesteBombas,c
 11252  000A86                     l528:
 11253  000A86  FFFF               	dw	65535	; assembler added errata NOP
 11254                           
 11255                           ; BSR set to: 0
 11256                           ;controle.h: 177: }
 11257                           ;controle.h: 178: if (!timerTesteBombas) {
 11258                           
 11259                           ; BSR set to: 0
 11260  000A88  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11261  000A8A  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11262  000A8C  A4D8               	btfss	status,2,c
 11263  000A8E  D19B               	goto	l524
 11264                           
 11265                           ; BSR set to: 0
 11266                           ;controle.h: 179: status_jockey = 0;
 11267  000A90  0E00               	movlw	0
 11268  000A92  6FFD               	movwf	_status_jockey& (0+255),b
 11269                           
 11270                           ;controle.h: 180: etapaTesteBombas = 3;
 11271  000A94  0E03               	movlw	3
 11272  000A96  D051               	goto	L45
 11273  000A98  FFFF               	dw	65535	; assembler added errata NOP
 11274                           
 11275                           ;controle.h: 185: shift[2] = 1;
 11276                           
 11277                           ; BSR set to: 0
 11278  000A9A  0E01               	movlw	1
 11279  000A9C  6E46               	movwf	_shift+2,c
 11280                           
 11281                           ;controle.h: 186: etapaTesteBombas = 4;
 11282  000A9E  0E04               	movlw	4
 11283  000AA0  D0C5               	goto	L26
 11284  000AA2  FFFF               	dw	65535	; assembler added errata NOP
 11285                           
 11286                           ;controle.h: 189: drenarPressao();
 11287  000AA4  EC90  F037         	call	_drenarPressao	;wreg free
 11288                           
 11289                           ;controle.h: 190: if (pressao <= (sp_pressao_rede - 10)) {
 11290  000AA8  0EF6               	movlw	246
 11291  000AAA  0100               	movlb	0	; () banked
 11292  000AAC  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11293  000AAE  0EFF               	movlw	255
 11294  000AB0  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11295  000AB2  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11296  000AB4  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11297  000AB6  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11298  000AB8  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11299  000ABA  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11300  000ABC  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11301  000ABE  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11302  000AC0  51F8               	movf	_pressao& (0+255),w,b
 11303  000AC2  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11304  000AC4  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11305  000AC6  0A80               	xorlw	128
 11306  000AC8  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11307  000ACA  51F9               	movf	(_pressao+1)& (0+255),w,b
 11308  000ACC  0A80               	xorlw	128
 11309  000ACE  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11310  000AD0  A0D8               	btfss	status,0,c
 11311  000AD2  D179               	goto	l524
 11312                           
 11313                           ; BSR set to: 0
 11314                           ;controle.h: 191: shift[5] = 1;
 11315  000AD4  0E01               	movlw	1
 11316  000AD6  6E49               	movwf	_shift+5,c
 11317                           
 11318                           ;controle.h: 192: shift[2] = 0;
 11319  000AD8  0E00               	movlw	0
 11320  000ADA  6E46               	movwf	_shift+2,c
 11321                           
 11322                           ;controle.h: 193: etapaTesteBombas = 5;
 11323  000ADC  0E05               	movlw	5
 11324  000ADE                     L31:
 11325  000ADE  FFFF               	dw	65535	; assembler added errata NOP
 11326  000AE0  6E72               	movwf	_etapaTesteBombas,c
 11327                           
 11328                           ;controle.h: 194: timerTesteBombas = 50;
 11329  000AE2  0E00               	movlw	0
 11330  000AE4  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11331  000AE6  0E32               	movlw	50
 11332  000AE8  D02D               	goto	L25
 11333  000AEA  FFFF               	dw	65535	; assembler added errata NOP
 11334                           
 11335                           ;controle.h: 198: sprintf(line4, "Bomba Principal...");
 11336                           
 11337                           ; BSR set to: 0
 11338  000AEC  0E3C               	movlw	low _line4
 11339  000AEE  0100               	movlb	0	; () banked
 11340  000AF0  6FA1               	movwf	sprintf@wh& (0+255),b
 11341  000AF2  0E01               	movlw	high _line4
 11342  000AF4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11343  000AF6  0E00               	movlw	low STR_41
 11344  000AF8  6FA3               	movwf	sprintf@f& (0+255),b
 11345  000AFA  0E7D               	movlw	high STR_41
 11346  000AFC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11347  000AFE  ECC9  F039         	call	_sprintf	;wreg free
 11348                           
 11349                           ;controle.h: 199: if (pressao >= sp_pressao_rede) {
 11350  000B02  0100               	movlb	0	; () banked
 11351  000B04  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11352  000B06  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11353  000B08  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11354  000B0A  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11355  000B0C  5DF8               	subwf	_pressao& (0+255),w,b
 11356  000B0E  51F9               	movf	(_pressao+1)& (0+255),w,b
 11357  000B10  0A80               	xorlw	128
 11358  000B12  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11359  000B14  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11360  000B16  0A80               	xorlw	128
 11361  000B18  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11362  000B1A  A0D8               	btfss	status,0,c
 11363  000B1C  D006               	goto	l534
 11364                           
 11365                           ; BSR set to: 0
 11366                           ;controle.h: 200: shift[5] = 0;
 11367  000B1E  0E00               	movlw	0
 11368  000B20  6E49               	movwf	_shift+5,c
 11369                           
 11370                           ;controle.h: 201: status_principal = 1;
 11371  000B22  0E01               	movlw	1
 11372  000B24  6FFC               	movwf	_status_principal& (0+255),b
 11373                           
 11374                           ;controle.h: 202: etapaTesteBombas = 6;
 11375  000B26  0E06               	movlw	6
 11376  000B28  6E72               	movwf	_etapaTesteBombas,c
 11377  000B2A                     l534:
 11378  000B2A  FFFF               	dw	65535	; assembler added errata NOP
 11379                           
 11380                           ; BSR set to: 0
 11381                           ;controle.h: 203: }
 11382                           ;controle.h: 204: if (!timerTesteBombas) {
 11383                           
 11384                           ; BSR set to: 0
 11385  000B2C  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11386  000B2E  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11387  000B30  A4D8               	btfss	status,2,c
 11388  000B32  D149               	goto	l524
 11389                           
 11390                           ; BSR set to: 0
 11391                           ;controle.h: 205: status_principal = 0;
 11392  000B34  0E00               	movlw	0
 11393  000B36  6FFC               	movwf	_status_principal& (0+255),b
 11394                           
 11395                           ;controle.h: 206: etapaTesteBombas = 6;
 11396  000B38  0E06               	movlw	6
 11397  000B3A                     L45:
 11398  000B3A  FFFF               	dw	65535	; assembler added errata NOP
 11399  000B3C  6E72               	movwf	_etapaTesteBombas,c
 11400                           
 11401                           ;controle.h: 207: timerTesteBombas = 30;
 11402  000B3E  0E00               	movlw	0
 11403  000B40  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11404  000B42  0E1E               	movlw	30
 11405  000B44                     L25:
 11406  000B44  FFFF               	dw	65535	; assembler added errata NOP
 11407  000B46  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;controle.h: 208: }
 11411                           ;controle.h: 209: break;
 11412  000B48  D13E               	goto	l524
 11413  000B4A  FFFF               	dw	65535	; assembler added errata NOP
 11414                           
 11415                           ;controle.h: 211: shift[2] = 1;
 11416                           
 11417                           ; BSR set to: 0
 11418  000B4C  0E01               	movlw	1
 11419  000B4E  6E46               	movwf	_shift+2,c
 11420                           
 11421                           ;controle.h: 212: etapaTesteBombas = 7;
 11422  000B50  0E07               	movlw	7
 11423  000B52  D06C               	goto	L26
 11424  000B54  FFFF               	dw	65535	; assembler added errata NOP
 11425                           
 11426                           ;controle.h: 215: drenarPressao();
 11427  000B56  EC90  F037         	call	_drenarPressao	;wreg free
 11428                           
 11429                           ;controle.h: 216: if (pressao <= (sp_pressao_rede - 10)) {
 11430  000B5A  0EF6               	movlw	246
 11431  000B5C  0100               	movlb	0	; () banked
 11432  000B5E  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11433  000B60  0EFF               	movlw	255
 11434  000B62  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11435  000B64  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11436  000B66  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11437  000B68  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11438  000B6A  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11439  000B6C  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11440  000B6E  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11441  000B70  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11442  000B72  51F8               	movf	_pressao& (0+255),w,b
 11443  000B74  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11444  000B76  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11445  000B78  0A80               	xorlw	128
 11446  000B7A  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11447  000B7C  51F9               	movf	(_pressao+1)& (0+255),w,b
 11448  000B7E  0A80               	xorlw	128
 11449  000B80  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11450  000B82  A0D8               	btfss	status,0,c
 11451  000B84  D120               	goto	l524
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;controle.h: 217: shift[2] = 0;
 11455  000B86  0E00               	movlw	0
 11456  000B88  6E46               	movwf	_shift+2,c
 11457                           
 11458                           ;controle.h: 218: etapaTesteBombas = 8;
 11459  000B8A  0E08               	movlw	8
 11460  000B8C  6E72               	movwf	_etapaTesteBombas,c
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;controle.h: 219: timerTesteBombas = tempo_limite_estacionaria;
 11464  000B8E  C0E5  F0D9         	movff	_tempo_limite_estacionaria,_timerTesteBombas
 11465  000B92  6BDA               	clrf	(_timerTesteBombas+1)& (0+255),b
 11466                           
 11467                           ; BSR set to: 0
 11468                           ;controle.h: 220: }
 11469                           ;controle.h: 221: break;
 11470  000B94  D118               	goto	l524
 11471  000B96  FFFF               	dw	65535	; assembler added errata NOP
 11472                           
 11473                           ;controle.h: 223: sprintf(line4, "Bomba Combustao...");
 11474                           
 11475                           ; BSR set to: 0
 11476  000B98  0E3C               	movlw	low _line4
 11477  000B9A  0100               	movlb	0	; () banked
 11478  000B9C  6FA1               	movwf	sprintf@wh& (0+255),b
 11479  000B9E  0E01               	movlw	high _line4
 11480  000BA0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11481  000BA2  0E13               	movlw	low STR_42
 11482  000BA4  6FA3               	movwf	sprintf@f& (0+255),b
 11483  000BA6  0E7D               	movlw	high STR_42
 11484  000BA8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11485  000BAA  ECC9  F039         	call	_sprintf	;wreg free
 11486                           
 11487                           ;controle.h: 224: partidaBombaEstacionaria(1);
 11488  000BAE  0E01               	movlw	1
 11489  000BB0  EC4B  F01C         	call	_partidaBombaEstacionaria
 11490                           
 11491                           ;controle.h: 226: if (flagEstacionariaLigada || pressao >= sp_pressao_rede) {
 11492  000BB4  0100               	movlb	0	; () banked
 11493  000BB6  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 11494  000BB8  A4D8               	btfss	status,2,c
 11495  000BBA  D00D               	goto	u7370
 11496                           
 11497                           ; BSR set to: 0
 11498  000BBC  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 11499  000BBE  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11500  000BC0  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11501  000BC2  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11502  000BC4  5DF8               	subwf	_pressao& (0+255),w,b
 11503  000BC6  51F9               	movf	(_pressao+1)& (0+255),w,b
 11504  000BC8  0A80               	xorlw	128
 11505  000BCA  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11506  000BCC  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11507  000BCE  0A80               	xorlw	128
 11508  000BD0  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11509  000BD2  A0D8               	btfss	status,0,c
 11510  000BD4  D008               	goto	l540
 11511  000BD6                     u7370:
 11512  000BD6  FFFF               	dw	65535	; assembler added errata NOP
 11513                           
 11514                           ; BSR set to: 0
 11515                           ;controle.h: 227: status_estacionaria = 1;
 11516                           
 11517                           ; BSR set to: 0
 11518  000BD8  0E01               	movlw	1
 11519  000BDA  6FFB               	movwf	_status_estacionaria& (0+255),b
 11520                           
 11521                           ; BSR set to: 0
 11522                           ;controle.h: 228: timerTesteBombas = tempo_limite_teste_estacionaria;
 11523  000BDC  C0E4  F0D9         	movff	_tempo_limite_teste_estacionaria,_timerTesteBombas
 11524  000BE0  6BDA               	clrf	(_timerTesteBombas+1)& (0+255),b
 11525                           
 11526                           ;controle.h: 229: etapaTesteBombas = 9;
 11527  000BE2  0E09               	movlw	9
 11528  000BE4  6E72               	movwf	_etapaTesteBombas,c
 11529  000BE6                     l540:
 11530  000BE6  FFFF               	dw	65535	; assembler added errata NOP
 11531                           
 11532                           ; BSR set to: 0
 11533                           ;controle.h: 230: }
 11534                           ;controle.h: 231: if (status_estacionaria == 0 || !timerTesteBombas) {
 11535  000BE8  51FB               	movf	_status_estacionaria& (0+255),w,b
 11536  000BEA  B4D8               	btfsc	status,2,c
 11537  000BEC  D004               	goto	u7390
 11538                           
 11539                           ; BSR set to: 0
 11540  000BEE  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11541  000BF0  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11542  000BF2  A4D8               	btfss	status,2,c
 11543  000BF4  D0E8               	goto	l524
 11544  000BF6                     u7390:
 11545  000BF6  FFFF               	dw	65535	; assembler added errata NOP
 11546                           
 11547                           ; BSR set to: 0
 11548                           ;controle.h: 232: etapaTesteBombas = 10;
 11549                           
 11550                           ; BSR set to: 0
 11551  000BF8  0E0A               	movlw	10
 11552  000BFA  6E72               	movwf	_etapaTesteBombas,c
 11553                           
 11554                           ;controle.h: 233: status_estacionaria = 0;
 11555  000BFC  0E00               	movlw	0
 11556  000BFE  6FFB               	movwf	_status_estacionaria& (0+255),b
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;controle.h: 234: }
 11560                           ;controle.h: 235: break;
 11561  000C00  D0E2               	goto	l524
 11562  000C02  FFFF               	dw	65535	; assembler added errata NOP
 11563                           
 11564                           ;controle.h: 237: sprintf(line4, "Bomba Ligada...");
 11565                           
 11566                           ; BSR set to: 0
 11567  000C04  0E3C               	movlw	low _line4
 11568  000C06  0100               	movlb	0	; () banked
 11569  000C08  6FA1               	movwf	sprintf@wh& (0+255),b
 11570  000C0A  0E01               	movlw	high _line4
 11571  000C0C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11572  000C0E  0EFB               	movlw	low STR_43
 11573  000C10  6FA3               	movwf	sprintf@f& (0+255),b
 11574  000C12  0E7D               	movlw	high STR_43
 11575  000C14  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11576  000C16  ECC9  F039         	call	_sprintf	;wreg free
 11577                           
 11578                           ;controle.h: 238: partidaBombaEstacionaria(1);
 11579  000C1A  0E01               	movlw	1
 11580  000C1C  EC4B  F01C         	call	_partidaBombaEstacionaria
 11581                           
 11582                           ;controle.h: 239: if (!timerTesteBombas) {
 11583  000C20  0100               	movlb	0	; () banked
 11584  000C22  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11585  000C24  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11586  000C26  A4D8               	btfss	status,2,c
 11587  000C28  D0CE               	goto	l524
 11588                           
 11589                           ; BSR set to: 0
 11590                           ;controle.h: 240: etapaTesteBombas = 10;
 11591  000C2A  0E0A               	movlw	10
 11592  000C2C                     L26:
 11593  000C2C  FFFF               	dw	65535	; assembler added errata NOP
 11594  000C2E  6E72               	movwf	_etapaTesteBombas,c
 11595                           
 11596                           ; BSR set to: 0
 11597                           ;controle.h: 241: }
 11598                           ;controle.h: 242: break;
 11599  000C30  D0CA               	goto	l524
 11600  000C32  FFFF               	dw	65535	; assembler added errata NOP
 11601                           
 11602                           ;controle.h: 244: salvarLOG();
 11603                           
 11604                           ; BSR set to: 0
 11605  000C34  ECEB  F01D         	call	_salvarLOG	;wreg free
 11606                           
 11607                           ;controle.h: 245: partidaBombaEstacionaria(2);
 11608  000C38  0E02               	movlw	2
 11609  000C3A  EC4B  F01C         	call	_partidaBombaEstacionaria
 11610                           
 11611                           ;controle.h: 246: clearShiftREG();
 11612  000C3E  ECFB  F037         	call	_clearShiftREG	;wreg free
 11613                           
 11614                           ;controle.h: 247: etapaTesteBombas = 11;
 11615  000C42  0E0B               	movlw	11
 11616  000C44  6E72               	movwf	_etapaTesteBombas,c
 11617                           
 11618                           ;controle.h: 248: timerTesteBombas = 10;
 11619  000C46  0E00               	movlw	0
 11620  000C48  0100               	movlb	0	; () banked
 11621  000C4A  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11622  000C4C  0E0A               	movlw	10
 11623  000C4E  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11624                           
 11625                           ; BSR set to: 0
 11626                           ;controle.h: 249: executandoTeste = 0;
 11627  000C50  0E00               	movlw	0
 11628  000C52  6FF1               	movwf	_executandoTeste& (0+255),b
 11629                           
 11630                           ;controle.h: 250: break;
 11631  000C54  D0B8               	goto	l524
 11632  000C56  FFFF               	dw	65535	; assembler added errata NOP
 11633                           
 11634                           ;controle.h: 252: sprintf(&line1[2], "Teste Concluido!");
 11635                           
 11636                           ; BSR set to: 0
 11637  000C58  0E7D               	movlw	low (_line1+2)
 11638  000C5A  0100               	movlb	0	; () banked
 11639  000C5C  6FA1               	movwf	sprintf@wh& (0+255),b
 11640  000C5E  0E01               	movlw	high (_line1+2)
 11641  000C60  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11642  000C62  0EA7               	movlw	low STR_44
 11643  000C64  6FA3               	movwf	sprintf@f& (0+255),b
 11644  000C66  0E7D               	movlw	high STR_44
 11645  000C68  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11646  000C6A  ECC9  F039         	call	_sprintf	;wreg free
 11647                           
 11648                           ;controle.h: 253: sprintf(line2, "JOKEY : %s", status_jockey == 1 ? "OK" : "ERRO");
 11649  000C6E  0100               	movlb	0	; () banked
 11650  000C70  05FD               	decf	_status_jockey& (0+255),w,b
 11651  000C72  B4D8               	btfsc	status,2,c
 11652  000C74  D004               	goto	l551
 11653                           
 11654                           ; BSR set to: 0
 11655  000C76  0EE3               	movlw	low STR_47
 11656  000C78  6FD1               	movwf	_acaoTesteBombas$1308& (0+255),b
 11657  000C7A  0E7F               	movlw	high STR_47
 11658  000C7C  D004               	goto	L27
 11659  000C7E                     l551:
 11660  000C7E  FFFF               	dw	65535	; assembler added errata NOP
 11661                           
 11662                           ; BSR set to: 0
 11663                           
 11664                           ; BSR set to: 0
 11665  000C80  0EFA               	movlw	low STR_5
 11666  000C82  6FD1               	movwf	_acaoTesteBombas$1308& (0+255),b
 11667  000C84  0E7F               	movlw	high STR_5
 11668  000C86                     L27:
 11669  000C86  FFFF               	dw	65535	; assembler added errata NOP
 11670  000C88  6FD2               	movwf	(_acaoTesteBombas$1308+1)& (0+255),b
 11671                           
 11672                           ; BSR set to: 0
 11673                           
 11674                           ; BSR set to: 0
 11675  000C8A  0E66               	movlw	low _line2
 11676  000C8C  6FA1               	movwf	sprintf@wh& (0+255),b
 11677  000C8E  0E01               	movlw	high _line2
 11678  000C90  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11679  000C92  0E41               	movlw	low STR_45
 11680  000C94  6FA3               	movwf	sprintf@f& (0+255),b
 11681  000C96  0E7F               	movlw	high STR_45
 11682  000C98  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11683  000C9A  C0D1  F0A5         	movff	_acaoTesteBombas$1308,?_sprintf+4
 11684  000C9E  C0D2  F0A6         	movff	_acaoTesteBombas$1308+1,?_sprintf+5
 11685  000CA2  ECC9  F039         	call	_sprintf	;wreg free
 11686                           
 11687                           ;controle.h: 254: sprintf(line3, "PRINCIPAL : %s", status_principal == 1 ? "OK" : "ERRO"
      +                          );
 11688  000CA6  0100               	movlb	0	; () banked
 11689  000CA8  05FC               	decf	_status_principal& (0+255),w,b
 11690  000CAA  B4D8               	btfsc	status,2,c
 11691  000CAC  D004               	goto	l555
 11692                           
 11693                           ; BSR set to: 0
 11694  000CAE  0EE3               	movlw	low STR_47
 11695  000CB0  6FD3               	movwf	_acaoTesteBombas$1313& (0+255),b
 11696  000CB2  0E7F               	movlw	high STR_47
 11697  000CB4  D004               	goto	L28
 11698  000CB6                     l555:
 11699  000CB6  FFFF               	dw	65535	; assembler added errata NOP
 11700                           
 11701                           ; BSR set to: 0
 11702                           
 11703                           ; BSR set to: 0
 11704  000CB8  0EFA               	movlw	low STR_5
 11705  000CBA  6FD3               	movwf	_acaoTesteBombas$1313& (0+255),b
 11706  000CBC  0E7F               	movlw	high STR_5
 11707  000CBE                     L28:
 11708  000CBE  FFFF               	dw	65535	; assembler added errata NOP
 11709  000CC0  6FD4               	movwf	(_acaoTesteBombas$1313+1)& (0+255),b
 11710                           
 11711                           ; BSR set to: 0
 11712                           
 11713                           ; BSR set to: 0
 11714  000CC2  0E51               	movlw	low _line3
 11715  000CC4  6FA1               	movwf	sprintf@wh& (0+255),b
 11716  000CC6  0E01               	movlw	high _line3
 11717  000CC8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11718  000CCA  0E58               	movlw	low STR_48
 11719  000CCC  6FA3               	movwf	sprintf@f& (0+255),b
 11720  000CCE  0E7E               	movlw	high STR_48
 11721  000CD0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11722  000CD2  C0D3  F0A5         	movff	_acaoTesteBombas$1313,?_sprintf+4
 11723  000CD6  C0D4  F0A6         	movff	_acaoTesteBombas$1313+1,?_sprintf+5
 11724  000CDA  ECC9  F039         	call	_sprintf	;wreg free
 11725                           
 11726                           ;controle.h: 255: sprintf(line4, "COMBUSTAO : %s", status_estacionaria == 1 ? "OK" : "ER
      +                          RO");
 11727  000CDE  0100               	movlb	0	; () banked
 11728  000CE0  05FB               	decf	_status_estacionaria& (0+255),w,b
 11729  000CE2  B4D8               	btfsc	status,2,c
 11730  000CE4  D004               	goto	l559
 11731                           
 11732                           ; BSR set to: 0
 11733  000CE6  0EE3               	movlw	low STR_47
 11734  000CE8  6FD5               	movwf	_acaoTesteBombas$1318& (0+255),b
 11735  000CEA  0E7F               	movlw	high STR_47
 11736  000CEC  D004               	goto	L29
 11737  000CEE                     l559:
 11738  000CEE  FFFF               	dw	65535	; assembler added errata NOP
 11739                           
 11740                           ; BSR set to: 0
 11741                           
 11742                           ; BSR set to: 0
 11743  000CF0  0EFA               	movlw	low STR_5
 11744  000CF2  6FD5               	movwf	_acaoTesteBombas$1318& (0+255),b
 11745  000CF4  0E7F               	movlw	high STR_5
 11746  000CF6                     L29:
 11747  000CF6  FFFF               	dw	65535	; assembler added errata NOP
 11748  000CF8  6FD6               	movwf	(_acaoTesteBombas$1318+1)& (0+255),b
 11749                           
 11750                           ; BSR set to: 0
 11751                           
 11752                           ; BSR set to: 0
 11753  000CFA  0E3C               	movlw	low _line4
 11754  000CFC  6FA1               	movwf	sprintf@wh& (0+255),b
 11755  000CFE  0E01               	movlw	high _line4
 11756  000D00  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11757  000D02  0E67               	movlw	low STR_51
 11758  000D04  6FA3               	movwf	sprintf@f& (0+255),b
 11759  000D06  0E7E               	movlw	high STR_51
 11760  000D08  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11761  000D0A  C0D5  F0A5         	movff	_acaoTesteBombas$1318,?_sprintf+4
 11762  000D0E  C0D6  F0A6         	movff	_acaoTesteBombas$1318+1,?_sprintf+5
 11763  000D12  ECC9  F039         	call	_sprintf	;wreg free
 11764                           
 11765                           ;controle.h: 256: if (!timerTesteBombas) {
 11766  000D16  0100               	movlb	0	; () banked
 11767  000D18  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11768  000D1A  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11769  000D1C  A4D8               	btfss	status,2,c
 11770  000D1E  D053               	goto	l524
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;controle.h: 257: etapaTesteBombas = 12;
 11774  000D20  0E0C               	movlw	12
 11775  000D22  6E72               	movwf	_etapaTesteBombas,c
 11776                           
 11777                           ;controle.h: 258: timerTesteBombas = 150;
 11778  000D24  0E00               	movlw	0
 11779  000D26  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11780  000D28  0E96               	movlw	150
 11781  000D2A  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11782                           
 11783                           ;controle.h: 259: gsmOcupado = 1;
 11784  000D2C  0E01               	movlw	1
 11785  000D2E  D017               	goto	L30
 11786  000D30  FFFF               	dw	65535	; assembler added errata NOP
 11787                           
 11788                           ;controle.h: 263: sprintf(&line4[2], "enviando SMS...");
 11789                           
 11790                           ; BSR set to: 0
 11791  000D32  0E3E               	movlw	low (_line4+2)
 11792  000D34  0100               	movlb	0	; () banked
 11793  000D36  6FA1               	movwf	sprintf@wh& (0+255),b
 11794  000D38  0E01               	movlw	high (_line4+2)
 11795  000D3A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11796  000D3C  0EEB               	movlw	low STR_54
 11797  000D3E  6FA3               	movwf	sprintf@f& (0+255),b
 11798  000D40  0E7D               	movlw	high STR_54
 11799  000D42  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11800  000D44  ECC9  F039         	call	_sprintf	;wreg free
 11801                           
 11802                           ;controle.h: 264: enviaSMS(2);
 11803  000D48  0E02               	movlw	2
 11804  000D4A  ECDD  F00A         	call	_enviaSMS
 11805                           
 11806                           ;controle.h: 265: if (!timerTesteBombas) {
 11807  000D4E  0100               	movlb	0	; () banked
 11808  000D50  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11809  000D52  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11810  000D54  A4D8               	btfss	status,2,c
 11811  000D56  D037               	goto	l524
 11812                           
 11813                           ; BSR set to: 0
 11814                           ;controle.h: 266: menu_posi = 0;
 11815  000D58  0E00               	movlw	0
 11816  000D5A  6FDE               	movwf	_menu_posi& (0+255),b
 11817                           
 11818                           ;controle.h: 267: gsmOcupado = 0;
 11819  000D5C  0E00               	movlw	0
 11820  000D5E                     L30:
 11821  000D5E  FFFF               	dw	65535	; assembler added errata NOP
 11822  000D60  6FF4               	movwf	_gsmOcupado& (0+255),b
 11823                           
 11824                           ; BSR set to: 0
 11825                           ;controle.h: 268: }
 11826                           ;controle.h: 269: break;
 11827  000D62  D031               	goto	l524
 11828  000D64  FFFF               	dw	65535	; assembler added errata NOP
 11829                           
 11830                           ;controle.h: 271: etapaTesteBombas = 0;
 11831                           
 11832                           ; BSR set to: 0
 11833  000D66  0E00               	movlw	0
 11834  000D68  6E72               	movwf	_etapaTesteBombas,c
 11835                           
 11836                           ;controle.h: 272: menu_posi = 0;
 11837  000D6A  0E00               	movlw	0
 11838  000D6C  0100               	movlb	0	; () banked
 11839  000D6E  6FDE               	movwf	_menu_posi& (0+255),b
 11840                           
 11841                           ; BSR set to: 0
 11842                           ;controle.h: 274: }
 11843                           
 11844                           ;controle.h: 273: break;
 11845  000D70  D02A               	goto	l524
 11846  000D72                     l522:
 11847  000D72  FFFF               	dw	65535	; assembler added errata NOP
 11848                           
 11849                           ; BSR set to: 0
 11850  000D74  5072               	movf	_etapaTesteBombas,w,c
 11851                           
 11852                           ; Switch size 1, requested type "space"
 11853                           ; Number of cases is 13, Range of values is 0 to 12
 11854                           ; switch strategies available:
 11855                           ; Name         Instructions Cycles
 11856                           ; simple_byte           40    21 (average)
 11857                           ;	Chosen strategy is simple_byte
 11858  000D76  0A00               	xorlw	0	; case 0
 11859  000D78  B4D8               	btfsc	status,2,c
 11860  000D7A  D634               	goto	l523
 11861  000D7C  0A01               	xorlw	1	; case 1
 11862  000D7E  B4D8               	btfsc	status,2,c
 11863  000D80  D643               	goto	l525
 11864  000D82  0A03               	xorlw	3	; case 2
 11865  000D84  B4D8               	btfsc	status,2,c
 11866  000D86  D65F               	goto	l527
 11867  000D88  0A01               	xorlw	1	; case 3
 11868  000D8A  B4D8               	btfsc	status,2,c
 11869  000D8C  D685               	goto	l530
 11870  000D8E  0A07               	xorlw	7	; case 4
 11871  000D90  B4D8               	btfsc	status,2,c
 11872  000D92  D687               	goto	l531
 11873  000D94  0A01               	xorlw	1	; case 5
 11874  000D96  B4D8               	btfsc	status,2,c
 11875  000D98  D6A8               	goto	l533
 11876  000D9A  0A03               	xorlw	3	; case 6
 11877  000D9C  B4D8               	btfsc	status,2,c
 11878  000D9E  D6D5               	goto	l536
 11879  000DA0  0A01               	xorlw	1	; case 7
 11880  000DA2  B4D8               	btfsc	status,2,c
 11881  000DA4  D6D7               	goto	l537
 11882  000DA6  0A0F               	xorlw	15	; case 8
 11883  000DA8  B4D8               	btfsc	status,2,c
 11884  000DAA  D6F5               	goto	l539
 11885  000DAC  0A01               	xorlw	1	; case 9
 11886  000DAE  B4D8               	btfsc	status,2,c
 11887  000DB0  D728               	goto	l546
 11888  000DB2  0A03               	xorlw	3	; case 10
 11889  000DB4  B4D8               	btfsc	status,2,c
 11890  000DB6  D73D               	goto	l548
 11891  000DB8  0A01               	xorlw	1	; case 11
 11892  000DBA  B4D8               	btfsc	status,2,c
 11893  000DBC  D74C               	goto	l549
 11894  000DBE  0A07               	xorlw	7	; case 12
 11895  000DC0  B4D8               	btfsc	status,2,c
 11896  000DC2  D7B6               	goto	l563
 11897  000DC4  D7CF               	goto	l565
 11898  000DC6                     l524:
 11899  000DC6  FFFF               	dw	65535	; assembler added errata NOP
 11900  000DC8  0012               	return		;funcret
 11901  000DCA  FFFF               	dw	65535	; errata NOP
 11902  000DCC                     __end_of_acaoTesteBombas:
 11903                           	opt stack 0
 11904                           tblptru	equ	0xFF8
 11905                           tblptrh	equ	0xFF7
 11906                           tblptrl	equ	0xFF6
 11907                           tablat	equ	0xFF5
 11908                           prodh	equ	0xFF4
 11909                           prodl	equ	0xFF3
 11910                           intcon	equ	0xFF2
 11911                           postinc0	equ	0xFEE
 11912                           wreg	equ	0xFE8
 11913                           postdec1	equ	0xFE5
 11914                           fsr1l	equ	0xFE1
 11915                           indf2	equ	0xFDF
 11916                           postinc2	equ	0xFDE
 11917                           fsr2h	equ	0xFDA
 11918                           fsr2l	equ	0xFD9
 11919                           status	equ	0xFD8
 11920                           
 11921 ;; *************** function _salvarLOG *****************
 11922 ;; Defined at:
 11923 ;;		line 9 in file "logs.h"
 11924 ;; Parameters:    Size  Location     Type
 11925 ;;		None
 11926 ;; Auto vars:     Size  Location     Type
 11927 ;;  ultimoLogSal    2   15[BANK0 ] unsigned int 
 11928 ;; Return value:  Size  Location     Type
 11929 ;;                  1    wreg      void 
 11930 ;; Registers used:
 11931 ;;		wreg, status,2, status,0, cstack
 11932 ;; Tracked objects:
 11933 ;;		On entry : 0/0
 11934 ;;		On exit  : 0/0
 11935 ;;		Unchanged: 0/0
 11936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11937 ;;      Params:         0       0       0       0       0       0       0
 11938 ;;      Locals:         0       2       0       0       0       0       0
 11939 ;;      Temps:          0       1       0       0       0       0       0
 11940 ;;      Totals:         0       3       0       0       0       0       0
 11941 ;;Total ram usage:        3 bytes
 11942 ;; Hardware stack levels used:    1
 11943 ;; Hardware stack levels required when called:    9
 11944 ;; This function calls:
 11945 ;;		_readEEPROM_ext
 11946 ;;		_writeEEPROM_ext
 11947 ;; This function is called by:
 11948 ;;		_acaoTesteBombas
 11949 ;; This function uses a non-reentrant model
 11950 ;;
 11951                           
 11952                           	psect	text31
 11953  003BD6                     __ptext31:
 11954                           	opt stack 0
 11955  003BD6                     _salvarLOG:
 11956                           	opt stack 0
 11957  003BD6  FFFF               	dw	65535	; assembler added errata NOP
 11958                           
 11959                           ;logs.h: 10: unsigned int ultimoLogSalvo = readEEPROM_ext(14);
 11960                           
 11961                           ;incstack = 0
 11962  003BD8  0E0E               	movlw	14
 11963  003BDA  EC61  F03A         	call	_readEEPROM_ext
 11964  003BDE  0100               	movlb	0	; () banked
 11965  003BE0  6F8E               	movwf	??_salvarLOG& (0+255),b
 11966  003BE2  518E               	movf	??_salvarLOG& (0+255),w,b
 11967  003BE4  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 11968  003BE6  6B90               	clrf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 11969                           
 11970                           ; BSR set to: 0
 11971                           ;logs.h: 11: if (ultimoLogSalvo < 60 || ultimoLogSalvo > 250) {
 11972  003BE8  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 11973  003BEA  E104               	bnz	u6060
 11974  003BEC  0E3C               	movlw	60
 11975  003BEE  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11976  003BF0  A0D8               	btfss	status,0,c
 11977  003BF2  D006               	goto	u6070
 11978  003BF4                     u6060:
 11979                           
 11980                           ; BSR set to: 0
 11981  003BF4  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 11982  003BF6  E105               	bnz	l5824
 11983  003BF8  0EFB               	movlw	251
 11984  003BFA  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11985  003BFC  A0D8               	btfss	status,0,c
 11986  003BFE  D005               	goto	l413
 11987  003C00                     u6070:
 11988  003C00  FFFF               	dw	65535	; assembler added errata NOP
 11989  003C02                     l5824:
 11990                           
 11991                           ; BSR set to: 0
 11992                           ;logs.h: 12: ultimoLogSalvo = 60;
 11993  003C02  0E00               	movlw	0
 11994  003C04  6F90               	movwf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 11995  003C06  0E3C               	movlw	60
 11996  003C08  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 11997  003C0A                     l413:
 11998  003C0A  FFFF               	dw	65535	; assembler added errata NOP
 11999                           
 12000                           ; BSR set to: 0
 12001                           ;logs.h: 13: }
 12002                           ;logs.h: 14: writeEEPROM_ext(ultimoLogSalvo, _dia);
 12003                           
 12004                           ; BSR set to: 0
 12005  003C0C  C0EB  F08C         	movff	__dia,writeEEPROM_ext@data
 12006  003C10  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12007  003C12  ECA6  F039         	call	_writeEEPROM_ext
 12008                           
 12009                           ;logs.h: 15: writeEEPROM_ext(++ultimoLogSalvo, _mes);
 12010  003C16  C0EA  F08C         	movff	__mes,writeEEPROM_ext@data
 12011  003C1A  0100               	movlb	0	; () banked
 12012  003C1C  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12013  003C1E  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12014  003C20  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12015  003C22  ECA6  F039         	call	_writeEEPROM_ext
 12016                           
 12017                           ;logs.h: 16: writeEEPROM_ext(++ultimoLogSalvo, _ano);
 12018  003C26  C0E9  F08C         	movff	__ano,writeEEPROM_ext@data
 12019  003C2A  0100               	movlb	0	; () banked
 12020  003C2C  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12021  003C2E  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12022  003C30  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12023  003C32  ECA6  F039         	call	_writeEEPROM_ext
 12024                           
 12025                           ;logs.h: 17: writeEEPROM_ext(++ultimoLogSalvo, _hor);
 12026  003C36  C0EC  F08C         	movff	__hor,writeEEPROM_ext@data
 12027  003C3A  0100               	movlb	0	; () banked
 12028  003C3C  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12029  003C3E  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12030  003C40  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12031  003C42  ECA6  F039         	call	_writeEEPROM_ext
 12032                           
 12033                           ;logs.h: 18: writeEEPROM_ext(++ultimoLogSalvo, _min);
 12034  003C46  C0ED  F08C         	movff	__min,writeEEPROM_ext@data
 12035  003C4A  0100               	movlb	0	; () banked
 12036  003C4C  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12037  003C4E  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12038  003C50  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12039  003C52  ECA6  F039         	call	_writeEEPROM_ext
 12040                           
 12041                           ;logs.h: 19: writeEEPROM_ext(++ultimoLogSalvo, status_jockey);
 12042  003C56  C0FD  F08C         	movff	_status_jockey,writeEEPROM_ext@data
 12043  003C5A  0100               	movlb	0	; () banked
 12044  003C5C  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12045  003C5E  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12046  003C60  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12047  003C62  ECA6  F039         	call	_writeEEPROM_ext
 12048                           
 12049                           ;logs.h: 20: writeEEPROM_ext(++ultimoLogSalvo, status_principal);
 12050  003C66  C0FC  F08C         	movff	_status_principal,writeEEPROM_ext@data
 12051  003C6A  0100               	movlb	0	; () banked
 12052  003C6C  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12053  003C6E  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12054  003C70  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12055  003C72  ECA6  F039         	call	_writeEEPROM_ext
 12056                           
 12057                           ;logs.h: 21: writeEEPROM_ext(++ultimoLogSalvo, status_estacionaria);
 12058  003C76  C0FB  F08C         	movff	_status_estacionaria,writeEEPROM_ext@data
 12059  003C7A  0100               	movlb	0	; () banked
 12060  003C7C  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12061  003C7E  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12062  003C80  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12063  003C82  ECA6  F039         	call	_writeEEPROM_ext
 12064                           
 12065                           ;logs.h: 23: writeEEPROM_ext(14, ++ultimoLogSalvo);
 12066  003C86  0100               	movlb	0	; () banked
 12067  003C88  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12068  003C8A  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12069  003C8C  C08F  F08C         	movff	salvarLOG@ultimoLogSalvo,writeEEPROM_ext@data
 12070  003C90  0E0E               	movlw	14
 12071  003C92  ECA6  F039         	call	_writeEEPROM_ext
 12072  003C96  0012               	return		;funcret
 12073  003C98  FFFF               	dw	65535	; errata NOP
 12074  003C9A                     __end_of_salvarLOG:
 12075                           	opt stack 0
 12076                           tblptru	equ	0xFF8
 12077                           tblptrh	equ	0xFF7
 12078                           tblptrl	equ	0xFF6
 12079                           tablat	equ	0xFF5
 12080                           prodh	equ	0xFF4
 12081                           prodl	equ	0xFF3
 12082                           intcon	equ	0xFF2
 12083                           postinc0	equ	0xFEE
 12084                           wreg	equ	0xFE8
 12085                           postdec1	equ	0xFE5
 12086                           fsr1l	equ	0xFE1
 12087                           indf2	equ	0xFDF
 12088                           postinc2	equ	0xFDE
 12089                           fsr2h	equ	0xFDA
 12090                           fsr2l	equ	0xFD9
 12091                           status	equ	0xFD8
 12092                           
 12093 ;; *************** function _writeEEPROM_ext *****************
 12094 ;; Defined at:
 12095 ;;		line 13 in file "eeprom.h"
 12096 ;; Parameters:    Size  Location     Type
 12097 ;;  adress          1    wreg     unsigned char 
 12098 ;;  data            1   12[BANK0 ] unsigned char 
 12099 ;; Auto vars:     Size  Location     Type
 12100 ;;  adress          1   13[BANK0 ] unsigned char 
 12101 ;; Return value:  Size  Location     Type
 12102 ;;                  1    wreg      void 
 12103 ;; Registers used:
 12104 ;;		wreg, status,2, status,0, cstack
 12105 ;; Tracked objects:
 12106 ;;		On entry : 0/0
 12107 ;;		On exit  : 0/0
 12108 ;;		Unchanged: 0/0
 12109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12110 ;;      Params:         0       1       0       0       0       0       0
 12111 ;;      Locals:         0       1       0       0       0       0       0
 12112 ;;      Temps:          0       0       0       0       0       0       0
 12113 ;;      Totals:         0       2       0       0       0       0       0
 12114 ;;Total ram usage:        2 bytes
 12115 ;; Hardware stack levels used:    1
 12116 ;; Hardware stack levels required when called:    8
 12117 ;; This function calls:
 12118 ;;		_I2C_Start
 12119 ;;		_I2C_Stop
 12120 ;;		_I2C_Write
 12121 ;;		_delay
 12122 ;; This function is called by:
 12123 ;;		_salvarLOG
 12124 ;;		_verificarIntervaloTesteBombas
 12125 ;;		_acaoTesteBombas
 12126 ;;		_lerParametros
 12127 ;;		_tela_testeBombas
 12128 ;;		_configuraTelefones
 12129 ;;		_configurarEstacionaria
 12130 ;;		_ajusteSP_Bombas
 12131 ;;		_apagarLOGS
 12132 ;; This function uses a non-reentrant model
 12133 ;;
 12134                           
 12135                           	psect	text32
 12136  00734C                     __ptext32:
 12137                           	opt stack 0
 12138  00734C                     _writeEEPROM_ext:
 12139                           	opt stack 0
 12140  00734C  FFFF               	dw	65535	; assembler added errata NOP
 12141                           
 12142                           ;incstack = 0
 12143                           ;writeEEPROM_ext@adress stored from wreg
 12144  00734E  0100               	movlb	0	; () banked
 12145  007350  6F8D               	movwf	writeEEPROM_ext@adress& (0+255),b
 12146                           
 12147                           ;eeprom.h: 15: I2C_Start();
 12148  007352  EC66  F036         	call	_I2C_Start	;wreg free
 12149                           
 12150                           ;eeprom.h: 16: I2C_Write(0xA0);
 12151  007356  0E00               	movlw	0
 12152  007358  0100               	movlb	0	; () banked
 12153  00735A  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12154  00735C  0EA0               	movlw	160
 12155  00735E  6F8A               	movwf	I2C_Write@d& (0+255),b
 12156  007360  EC7F  F036         	call	_I2C_Write	;wreg free
 12157                           
 12158                           ;eeprom.h: 18: I2C_Write(adress);
 12159  007364  C08D  F08A         	movff	writeEEPROM_ext@adress,I2C_Write@d
 12160  007368  0100               	movlb	0	; () banked
 12161  00736A  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12162  00736C  EC7F  F036         	call	_I2C_Write	;wreg free
 12163                           
 12164                           ;eeprom.h: 19: I2C_Write(data);
 12165  007370  C08C  F08A         	movff	writeEEPROM_ext@data,I2C_Write@d
 12166  007374  0100               	movlb	0	; () banked
 12167  007376  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12168  007378  EC7F  F036         	call	_I2C_Write	;wreg free
 12169                           
 12170                           ;eeprom.h: 20: I2C_Stop();
 12171  00737C  EC6C  F036         	call	_I2C_Stop	;wreg free
 12172                           
 12173                           ;eeprom.h: 21: delay(15);
 12174  007380  0E00               	movlw	0
 12175  007382  0100               	movlb	0	; () banked
 12176  007384  6F81               	movwf	(delay@x+1)& (0+255),b
 12177  007386  0E0F               	movlw	15
 12178  007388  6F80               	movwf	delay@x& (0+255),b
 12179  00738A  ECC5  F037         	call	_delay	;wreg free
 12180  00738E  0012               	return		;funcret
 12181  007390  FFFF               	dw	65535	; errata NOP
 12182  007392                     __end_of_writeEEPROM_ext:
 12183                           	opt stack 0
 12184                           tblptru	equ	0xFF8
 12185                           tblptrh	equ	0xFF7
 12186                           tblptrl	equ	0xFF6
 12187                           tablat	equ	0xFF5
 12188                           prodh	equ	0xFF4
 12189                           prodl	equ	0xFF3
 12190                           intcon	equ	0xFF2
 12191                           postinc0	equ	0xFEE
 12192                           wreg	equ	0xFE8
 12193                           postdec1	equ	0xFE5
 12194                           fsr1l	equ	0xFE1
 12195                           indf2	equ	0xFDF
 12196                           postinc2	equ	0xFDE
 12197                           fsr2h	equ	0xFDA
 12198                           fsr2l	equ	0xFD9
 12199                           status	equ	0xFD8
 12200                           
 12201 ;; *************** function _readEEPROM_ext *****************
 12202 ;; Defined at:
 12203 ;;		line 26 in file "eeprom.h"
 12204 ;; Parameters:    Size  Location     Type
 12205 ;;  adress          1    wreg     unsigned char 
 12206 ;; Auto vars:     Size  Location     Type
 12207 ;;  adress          1   12[BANK0 ] unsigned char 
 12208 ;;  data            1   13[BANK0 ] unsigned char 
 12209 ;; Return value:  Size  Location     Type
 12210 ;;                  1    wreg      unsigned char 
 12211 ;; Registers used:
 12212 ;;		wreg, status,2, status,0, cstack
 12213 ;; Tracked objects:
 12214 ;;		On entry : 0/0
 12215 ;;		On exit  : 0/0
 12216 ;;		Unchanged: 0/0
 12217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12218 ;;      Params:         0       0       0       0       0       0       0
 12219 ;;      Locals:         0       2       0       0       0       0       0
 12220 ;;      Temps:          0       0       0       0       0       0       0
 12221 ;;      Totals:         0       2       0       0       0       0       0
 12222 ;;Total ram usage:        2 bytes
 12223 ;; Hardware stack levels used:    1
 12224 ;; Hardware stack levels required when called:    8
 12225 ;; This function calls:
 12226 ;;		_I2C_Read
 12227 ;;		_I2C_Restart
 12228 ;;		_I2C_Start
 12229 ;;		_I2C_Stop
 12230 ;;		_I2C_Write
 12231 ;; This function is called by:
 12232 ;;		_readEEPROM16_ext
 12233 ;;		_salvarLOG
 12234 ;;		_acaoTesteBombas
 12235 ;;		_lerParametros
 12236 ;;		_dataLoger
 12237 ;; This function uses a non-reentrant model
 12238 ;;
 12239                           
 12240                           	psect	text33
 12241  0074C2                     __ptext33:
 12242                           	opt stack 0
 12243  0074C2                     _readEEPROM_ext:
 12244                           	opt stack 0
 12245  0074C2  FFFF               	dw	65535	; assembler added errata NOP
 12246                           
 12247                           ;incstack = 0
 12248                           ;readEEPROM_ext@adress stored from wreg
 12249  0074C4  0100               	movlb	0	; () banked
 12250  0074C6  6F8C               	movwf	readEEPROM_ext@adress& (0+255),b
 12251                           
 12252                           ;eeprom.h: 27: I2C_Start();
 12253  0074C8  EC66  F036         	call	_I2C_Start	;wreg free
 12254                           
 12255                           ;eeprom.h: 28: I2C_Write(0xA0);
 12256  0074CC  0E00               	movlw	0
 12257  0074CE  0100               	movlb	0	; () banked
 12258  0074D0  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12259  0074D2  0EA0               	movlw	160
 12260  0074D4  6F8A               	movwf	I2C_Write@d& (0+255),b
 12261  0074D6  EC7F  F036         	call	_I2C_Write	;wreg free
 12262                           
 12263                           ;eeprom.h: 30: I2C_Write(adress);
 12264  0074DA  C08C  F08A         	movff	readEEPROM_ext@adress,I2C_Write@d
 12265  0074DE  0100               	movlb	0	; () banked
 12266  0074E0  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12267  0074E2  EC7F  F036         	call	_I2C_Write	;wreg free
 12268                           
 12269                           ;eeprom.h: 31: I2C_Restart();
 12270  0074E6  EC72  F036         	call	_I2C_Restart	;wreg free
 12271                           
 12272                           ;eeprom.h: 32: I2C_Write(0xA1);
 12273  0074EA  0E00               	movlw	0
 12274  0074EC  0100               	movlb	0	; () banked
 12275  0074EE  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12276  0074F0  0EA1               	movlw	161
 12277  0074F2  6F8A               	movwf	I2C_Write@d& (0+255),b
 12278  0074F4  EC7F  F036         	call	_I2C_Write	;wreg free
 12279                           
 12280                           ;eeprom.h: 33: unsigned char data = I2C_Read(0);
 12281  0074F8  0E00               	movlw	0
 12282  0074FA  0100               	movlb	0	; () banked
 12283  0074FC  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
 12284  0074FE  0E00               	movlw	0
 12285  007500  6F81               	movwf	I2C_Read@a& (0+255),b
 12286  007502  EC6B  F038         	call	_I2C_Read	;wreg free
 12287  007506  0100               	movlb	0	; () banked
 12288  007508  5181               	movf	?_I2C_Read& (0+255),w,b
 12289  00750A  6F8D               	movwf	readEEPROM_ext@data& (0+255),b
 12290                           
 12291                           ;eeprom.h: 34: I2C_Stop();
 12292  00750C  EC6C  F036         	call	_I2C_Stop	;wreg free
 12293                           
 12294                           ;eeprom.h: 35: return data;
 12295  007510  0100               	movlb	0	; () banked
 12296  007512  518D               	movf	readEEPROM_ext@data& (0+255),w,b
 12297                           
 12298                           ; BSR set to: 0
 12299                           
 12300                           ; BSR set to: 0
 12301  007514  0012               	return		;funcret
 12302  007516  FFFF               	dw	65535	; errata NOP
 12303  007518                     __end_of_readEEPROM_ext:
 12304                           	opt stack 0
 12305                           tblptru	equ	0xFF8
 12306                           tblptrh	equ	0xFF7
 12307                           tblptrl	equ	0xFF6
 12308                           tablat	equ	0xFF5
 12309                           prodh	equ	0xFF4
 12310                           prodl	equ	0xFF3
 12311                           intcon	equ	0xFF2
 12312                           postinc0	equ	0xFEE
 12313                           wreg	equ	0xFE8
 12314                           postdec1	equ	0xFE5
 12315                           fsr1l	equ	0xFE1
 12316                           indf2	equ	0xFDF
 12317                           postinc2	equ	0xFDE
 12318                           fsr2h	equ	0xFDA
 12319                           fsr2l	equ	0xFD9
 12320                           status	equ	0xFD8
 12321                           
 12322 ;; *************** function _I2C_Restart *****************
 12323 ;; Defined at:
 12324 ;;		line 31 in file "I2C.c"
 12325 ;; Parameters:    Size  Location     Type
 12326 ;;		None
 12327 ;; Auto vars:     Size  Location     Type
 12328 ;;		None
 12329 ;; Return value:  Size  Location     Type
 12330 ;;                  1    wreg      void 
 12331 ;; Registers used:
 12332 ;;		wreg, status,2, status,0, cstack
 12333 ;; Tracked objects:
 12334 ;;		On entry : 0/0
 12335 ;;		On exit  : 0/0
 12336 ;;		Unchanged: 0/0
 12337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12338 ;;      Params:         0       0       0       0       0       0       0
 12339 ;;      Locals:         0       0       0       0       0       0       0
 12340 ;;      Temps:          0       0       0       0       0       0       0
 12341 ;;      Totals:         0       0       0       0       0       0       0
 12342 ;;Total ram usage:        0 bytes
 12343 ;; Hardware stack levels used:    1
 12344 ;; Hardware stack levels required when called:    7
 12345 ;; This function calls:
 12346 ;;		_I2C_Wait
 12347 ;; This function is called by:
 12348 ;;		_getDS1307TimeDate
 12349 ;;		_readEEPROM_ext
 12350 ;;		_getDS1307Time
 12351 ;; This function uses a non-reentrant model
 12352 ;;
 12353                           
 12354                           	psect	text34
 12355  006CE4                     __ptext34:
 12356                           	opt stack 0
 12357  006CE4                     _I2C_Restart:
 12358                           	opt stack 0
 12359  006CE4  FFFF               	dw	65535	; assembler added errata NOP
 12360                           
 12361                           ;I2C.c: 32: I2C_Wait();
 12362                           
 12363                           ; BSR set to: 0
 12364                           ;incstack = 0
 12365  006CE6  ECB7  F036         	call	_I2C_Wait	;wreg free
 12366                           
 12367                           ;I2C.c: 33: RSEN = 1;
 12368  006CEA  82C5               	bsf	4037,1,c	;volatile
 12369  006CEC  0012               	return		;funcret
 12370  006CEE  FFFF               	dw	65535	; errata NOP
 12371  006CF0                     __end_of_I2C_Restart:
 12372                           	opt stack 0
 12373                           tblptru	equ	0xFF8
 12374                           tblptrh	equ	0xFF7
 12375                           tblptrl	equ	0xFF6
 12376                           tablat	equ	0xFF5
 12377                           prodh	equ	0xFF4
 12378                           prodl	equ	0xFF3
 12379                           intcon	equ	0xFF2
 12380                           postinc0	equ	0xFEE
 12381                           wreg	equ	0xFE8
 12382                           postdec1	equ	0xFE5
 12383                           fsr1l	equ	0xFE1
 12384                           indf2	equ	0xFDF
 12385                           postinc2	equ	0xFDE
 12386                           fsr2h	equ	0xFDA
 12387                           fsr2l	equ	0xFD9
 12388                           status	equ	0xFD8
 12389                           
 12390 ;; *************** function _I2C_Read *****************
 12391 ;; Defined at:
 12392 ;;		line 47 in file "I2C.c"
 12393 ;; Parameters:    Size  Location     Type
 12394 ;;  a               2    1[BANK0 ] unsigned short 
 12395 ;; Auto vars:     Size  Location     Type
 12396 ;;  temp            2    3[BANK0 ] unsigned short 
 12397 ;; Return value:  Size  Location     Type
 12398 ;;                  2    1[BANK0 ] unsigned short 
 12399 ;; Registers used:
 12400 ;;		wreg, status,2, status,0, cstack
 12401 ;; Tracked objects:
 12402 ;;		On entry : 0/0
 12403 ;;		On exit  : 0/0
 12404 ;;		Unchanged: 0/0
 12405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12406 ;;      Params:         0       2       0       0       0       0       0
 12407 ;;      Locals:         0       2       0       0       0       0       0
 12408 ;;      Temps:          0       0       0       0       0       0       0
 12409 ;;      Totals:         0       4       0       0       0       0       0
 12410 ;;Total ram usage:        4 bytes
 12411 ;; Hardware stack levels used:    1
 12412 ;; Hardware stack levels required when called:    7
 12413 ;; This function calls:
 12414 ;;		_I2C_Wait
 12415 ;; This function is called by:
 12416 ;;		_getDS1307TimeDate
 12417 ;;		_readEEPROM_ext
 12418 ;;		_getDS1307Time
 12419 ;; This function uses a non-reentrant model
 12420 ;;
 12421                           
 12422                           	psect	text35
 12423  0070D6                     __ptext35:
 12424                           	opt stack 0
 12425  0070D6                     _I2C_Read:
 12426                           	opt stack 0
 12427  0070D6  FFFF               	dw	65535	; assembler added errata NOP
 12428                           
 12429                           ;I2C.c: 48: unsigned short temp;
 12430                           ;I2C.c: 49: I2C_Wait();
 12431                           
 12432                           ;incstack = 0
 12433  0070D8  ECB7  F036         	call	_I2C_Wait	;wreg free
 12434                           
 12435                           ;I2C.c: 50: RCEN = 1;
 12436  0070DC  86C5               	bsf	4037,3,c	;volatile
 12437                           
 12438                           ;I2C.c: 51: I2C_Wait();
 12439  0070DE  ECB7  F036         	call	_I2C_Wait	;wreg free
 12440                           
 12441                           ;I2C.c: 52: temp = SSPBUF;
 12442  0070E2  CFC9 F083          	movff	4041,I2C_Read@temp	;volatile
 12443  0070E6  0100               	movlb	0	; () banked
 12444  0070E8  6B84               	clrf	(I2C_Read@temp+1)& (0+255),b
 12445                           
 12446                           ;I2C.c: 53: I2C_Wait();
 12447  0070EA  ECB7  F036         	call	_I2C_Wait	;wreg free
 12448                           
 12449                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 12450  0070EE  0100               	movlb	0	; () banked
 12451  0070F0  5181               	movf	I2C_Read@a& (0+255),w,b
 12452  0070F2  1182               	iorwf	(I2C_Read@a+1)& (0+255),w,b
 12453  0070F4  A4D8               	btfss	status,2,c
 12454  0070F6  D002               	goto	u4760
 12455  0070F8  8AC5               	bsf	4037,5,c	;volatile
 12456  0070FA  D002               	goto	u4775
 12457  0070FC                     u4760:
 12458  0070FC  FFFF               	dw	65535	; assembler added errata NOP
 12459  0070FE  9AC5               	bcf	4037,5,c	;volatile
 12460  007100                     u4775:
 12461  007100  FFFF               	dw	65535	; assembler added errata NOP
 12462                           
 12463                           ;I2C.c: 55: ACKEN = 1;
 12464  007102  88C5               	bsf	4037,4,c	;volatile
 12465                           
 12466                           ;I2C.c: 56: return temp;
 12467  007104  C083  F081         	movff	I2C_Read@temp,?_I2C_Read
 12468  007108  C084  F082         	movff	I2C_Read@temp+1,?_I2C_Read+1
 12469  00710C  0012               	return		;funcret
 12470  00710E  FFFF               	dw	65535	; errata NOP
 12471  007110                     __end_of_I2C_Read:
 12472                           	opt stack 0
 12473                           tblptru	equ	0xFF8
 12474                           tblptrh	equ	0xFF7
 12475                           tblptrl	equ	0xFF6
 12476                           tablat	equ	0xFF5
 12477                           prodh	equ	0xFF4
 12478                           prodl	equ	0xFF3
 12479                           intcon	equ	0xFF2
 12480                           postinc0	equ	0xFEE
 12481                           wreg	equ	0xFE8
 12482                           postdec1	equ	0xFE5
 12483                           fsr1l	equ	0xFE1
 12484                           indf2	equ	0xFDF
 12485                           postinc2	equ	0xFDE
 12486                           fsr2h	equ	0xFDA
 12487                           fsr2l	equ	0xFD9
 12488                           status	equ	0xFD8
 12489                           
 12490 ;; *************** function _intToFloatStr *****************
 12491 ;; Defined at:
 12492 ;;		line 48 in file "function.c"
 12493 ;; Parameters:    Size  Location     Type
 12494 ;;  valor           1    wreg     unsigned char 
 12495 ;; Auto vars:     Size  Location     Type
 12496 ;;  valor           1   63[BANK0 ] unsigned char 
 12497 ;;  conv            4   59[BANK0 ] unsigned char [4]
 12498 ;;  end             4   55[BANK0 ] unsigned char [4]
 12499 ;;  pr              2   64[BANK0 ] int 
 12500 ;; Return value:  Size  Location     Type
 12501 ;;                  2   53[BANK0 ] PTR unsigned char 
 12502 ;; Registers used:
 12503 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12504 ;; Tracked objects:
 12505 ;;		On entry : 0/0
 12506 ;;		On exit  : 0/0
 12507 ;;		Unchanged: 0/0
 12508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12509 ;;      Params:         0       2       0       0       0       0       0
 12510 ;;      Locals:         0      11       0       0       0       0       0
 12511 ;;      Temps:          0       0       0       0       0       0       0
 12512 ;;      Totals:         0      13       0       0       0       0       0
 12513 ;;Total ram usage:       13 bytes
 12514 ;; Hardware stack levels used:    1
 12515 ;; Hardware stack levels required when called:    9
 12516 ;; This function calls:
 12517 ;;		___awdiv
 12518 ;;		___awmod
 12519 ;;		_sprintf
 12520 ;; This function is called by:
 12521 ;;		_acaoTesteBombas
 12522 ;;		_telaPrincipal
 12523 ;;		_ajusteSP_Bombas
 12524 ;; This function uses a non-reentrant model
 12525 ;;
 12526                           
 12527                           	psect	text36
 12528  007A08                     __ptext36:
 12529                           	opt stack 0
 12530  007A08                     _intToFloatStr:
 12531                           	opt stack 0
 12532  007A08  FFFF               	dw	65535	; assembler added errata NOP
 12533                           
 12534                           ;incstack = 0
 12535                           ;intToFloatStr@valor stored from wreg
 12536  007A0A  0100               	movlb	0	; () banked
 12537  007A0C  6FBF               	movwf	intToFloatStr@valor& (0+255),b
 12538                           
 12539                           ;function.c: 49: int pr = valor >= 99 ? 99 : valor;
 12540  007A0E  0E63               	movlw	99
 12541  007A10  0100               	movlb	0	; () banked
 12542  007A12  61BF               	cpfslt	intToFloatStr@valor& (0+255),b
 12543  007A14  D004               	goto	l1018
 12544                           
 12545                           ; BSR set to: 0
 12546  007A16  C0BF  F0C0         	movff	intToFloatStr@valor,intToFloatStr@pr
 12547  007A1A  6BC1               	clrf	(intToFloatStr@pr+1)& (0+255),b
 12548  007A1C  D005               	goto	l1020
 12549  007A1E                     l1018:
 12550  007A1E  FFFF               	dw	65535	; assembler added errata NOP
 12551                           
 12552                           ; BSR set to: 0
 12553                           
 12554                           ; BSR set to: 0
 12555  007A20  0E00               	movlw	0
 12556  007A22  6FC1               	movwf	(intToFloatStr@pr+1)& (0+255),b
 12557  007A24  0E63               	movlw	99
 12558  007A26  6FC0               	movwf	intToFloatStr@pr& (0+255),b
 12559  007A28                     l1020:
 12560  007A28  FFFF               	dw	65535	; assembler added errata NOP
 12561                           
 12562                           ; BSR set to: 0
 12563                           ;function.c: 50: unsigned char conv[4] = {' ', ' ', ' ', ' '};
 12564                           
 12565                           ; BSR set to: 0
 12566  007A2A  C1BC  F0BB         	movff	intToFloatStr@F2544,intToFloatStr@conv
 12567  007A2E  C1BD  F0BC         	movff	intToFloatStr@F2544+1,intToFloatStr@conv+1
 12568  007A32  C1BE  F0BD         	movff	intToFloatStr@F2544+2,intToFloatStr@conv+2
 12569  007A36  C1BF  F0BE         	movff	intToFloatStr@F2544+3,intToFloatStr@conv+3
 12570                           
 12571                           ; BSR set to: 0
 12572                           ;function.c: 51: conv[0] = (char) ((pr / 10) + 48);
 12573  007A3A  C0C0  F080         	movff	intToFloatStr@pr,___awdiv@dividend
 12574  007A3E  C0C1  F081         	movff	intToFloatStr@pr+1,___awdiv@dividend+1
 12575  007A42  0E00               	movlw	0
 12576  007A44  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
 12577  007A46  0E0A               	movlw	10
 12578  007A48  6F82               	movwf	___awdiv@divisor& (0+255),b
 12579  007A4A  ECFD  F01E         	call	___awdiv	;wreg free
 12580  007A4E  0100               	movlb	0	; () banked
 12581  007A50  5180               	movf	?___awdiv& (0+255),w,b
 12582  007A52  0F30               	addlw	48
 12583  007A54  6FBB               	movwf	intToFloatStr@conv& (0+255),b
 12584                           
 12585                           ; BSR set to: 0
 12586                           ;function.c: 52: conv[1] = (char) '.';
 12587  007A56  0E2E               	movlw	46
 12588  007A58  6FBC               	movwf	(intToFloatStr@conv+1)& (0+255),b
 12589                           
 12590                           ;function.c: 53: conv[2] = (char) ((pr % 10) + 48);
 12591  007A5A  C0C0  F080         	movff	intToFloatStr@pr,___awmod@dividend
 12592  007A5E  C0C1  F081         	movff	intToFloatStr@pr+1,___awmod@dividend+1
 12593  007A62  0E00               	movlw	0
 12594  007A64  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 12595  007A66  0E0A               	movlw	10
 12596  007A68  6F82               	movwf	___awmod@divisor& (0+255),b
 12597  007A6A  EC34  F03C         	call	___awmod	;wreg free
 12598  007A6E  0100               	movlb	0	; () banked
 12599  007A70  5180               	movf	?___awmod& (0+255),w,b
 12600  007A72  0F30               	addlw	48
 12601  007A74  6FBD               	movwf	(intToFloatStr@conv+2)& (0+255),b
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;function.c: 54: conv[3] = '\0';
 12605  007A76  0E00               	movlw	0
 12606  007A78  6FBE               	movwf	(intToFloatStr@conv+3)& (0+255),b
 12607                           
 12608                           ; BSR set to: 0
 12609                           ;function.c: 55: char end[4];
 12610                           ;function.c: 56: sprintf(end , conv);
 12611  007A7A  0EB7               	movlw	low intToFloatStr@end
 12612  007A7C  6FA1               	movwf	sprintf@wh& (0+255),b
 12613  007A7E  0E00               	movlw	high intToFloatStr@end
 12614  007A80  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12615  007A82  0EBB               	movlw	low intToFloatStr@conv
 12616  007A84  6FA3               	movwf	sprintf@f& (0+255),b
 12617  007A86  0E00               	movlw	high intToFloatStr@conv
 12618  007A88  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12619  007A8A  ECC9  F039         	call	_sprintf	;wreg free
 12620                           
 12621                           ;function.c: 57: return end;
 12622  007A8E  0EB7               	movlw	low intToFloatStr@end
 12623  007A90  0100               	movlb	0	; () banked
 12624  007A92  6FB5               	movwf	?_intToFloatStr& (0+255),b
 12625  007A94  0E00               	movlw	high intToFloatStr@end
 12626  007A96  6FB6               	movwf	(?_intToFloatStr+1)& (0+255),b
 12627                           
 12628                           ; BSR set to: 0
 12629                           
 12630                           ; BSR set to: 0
 12631  007A98  0012               	return		;funcret
 12632  007A9A  FFFF               	dw	65535	; errata NOP
 12633  007A9C                     __end_of_intToFloatStr:
 12634                           	opt stack 0
 12635                           tblptru	equ	0xFF8
 12636                           tblptrh	equ	0xFF7
 12637                           tblptrl	equ	0xFF6
 12638                           tablat	equ	0xFF5
 12639                           prodh	equ	0xFF4
 12640                           prodl	equ	0xFF3
 12641                           intcon	equ	0xFF2
 12642                           postinc0	equ	0xFEE
 12643                           wreg	equ	0xFE8
 12644                           postdec1	equ	0xFE5
 12645                           fsr1l	equ	0xFE1
 12646                           indf2	equ	0xFDF
 12647                           postinc2	equ	0xFDE
 12648                           fsr2h	equ	0xFDA
 12649                           fsr2l	equ	0xFD9
 12650                           status	equ	0xFD8
 12651                           
 12652 ;; *************** function ___awmod *****************
 12653 ;; Defined at:
 12654 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 12655 ;; Parameters:    Size  Location     Type
 12656 ;;  dividend        2    0[BANK0 ] int 
 12657 ;;  divisor         2    2[BANK0 ] int 
 12658 ;; Auto vars:     Size  Location     Type
 12659 ;;  sign            1    5[BANK0 ] unsigned char 
 12660 ;;  counter         1    4[BANK0 ] unsigned char 
 12661 ;; Return value:  Size  Location     Type
 12662 ;;                  2    0[BANK0 ] int 
 12663 ;; Registers used:
 12664 ;;		wreg, status,2, status,0
 12665 ;; Tracked objects:
 12666 ;;		On entry : 0/0
 12667 ;;		On exit  : 0/0
 12668 ;;		Unchanged: 0/0
 12669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12670 ;;      Params:         0       4       0       0       0       0       0
 12671 ;;      Locals:         0       2       0       0       0       0       0
 12672 ;;      Temps:          0       0       0       0       0       0       0
 12673 ;;      Totals:         0       6       0       0       0       0       0
 12674 ;;Total ram usage:        6 bytes
 12675 ;; Hardware stack levels used:    1
 12676 ;; Hardware stack levels required when called:    6
 12677 ;; This function calls:
 12678 ;;		Nothing
 12679 ;; This function is called by:
 12680 ;;		_DECtoBCD
 12681 ;;		_intToFloatStr
 12682 ;;		_DECtoHEX
 12683 ;; This function uses a non-reentrant model
 12684 ;;
 12685                           
 12686                           	psect	text37
 12687  007868                     __ptext37:
 12688                           	opt stack 0
 12689  007868                     ___awmod:
 12690                           	opt stack 0
 12691  007868  FFFF               	dw	65535	; assembler added errata NOP
 12692                           
 12693                           ; BSR set to: 0
 12694                           ;incstack = 0
 12695  00786A  0E00               	movlw	0
 12696  00786C  0100               	movlb	0	; () banked
 12697  00786E  6F85               	movwf	___awmod@sign& (0+255),b
 12698                           
 12699                           ; BSR set to: 0
 12700  007870  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 12701  007872  D006               	goto	l1302
 12702                           
 12703                           ; BSR set to: 0
 12704  007874  6D80               	negf	___awmod@dividend& (0+255),b
 12705  007876  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12706  007878  B0D8               	btfsc	status,0,c
 12707  00787A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12708                           
 12709                           ; BSR set to: 0
 12710  00787C  0E01               	movlw	1
 12711  00787E  6F85               	movwf	___awmod@sign& (0+255),b
 12712  007880                     l1302:
 12713  007880  FFFF               	dw	65535	; assembler added errata NOP
 12714                           
 12715                           ; BSR set to: 0
 12716                           
 12717                           ; BSR set to: 0
 12718  007882  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12719  007884  D004               	goto	l1303
 12720                           
 12721                           ; BSR set to: 0
 12722  007886  6D82               	negf	___awmod@divisor& (0+255),b
 12723  007888  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 12724  00788A  B0D8               	btfsc	status,0,c
 12725  00788C  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 12726  00788E                     l1303:
 12727  00788E  FFFF               	dw	65535	; assembler added errata NOP
 12728                           
 12729                           ; BSR set to: 0
 12730                           
 12731                           ; BSR set to: 0
 12732  007890  5182               	movf	___awmod@divisor& (0+255),w,b
 12733  007892  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 12734  007894  B4D8               	btfsc	status,2,c
 12735  007896  D01C               	goto	l1310
 12736                           
 12737                           ; BSR set to: 0
 12738  007898  0E01               	movlw	1
 12739  00789A  6F84               	movwf	___awmod@counter& (0+255),b
 12740  00789C  D005               	goto	l1305
 12741  00789E  FFFF               	dw	65535	; assembler added errata NOP
 12742                           
 12743                           ; BSR set to: 0
 12744                           
 12745                           ; BSR set to: 0
 12746  0078A0  90D8               	bcf	status,0,c
 12747  0078A2  3782               	rlcf	___awmod@divisor& (0+255),f,b
 12748  0078A4  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 12749  0078A6  2B84               	incf	___awmod@counter& (0+255),f,b
 12750  0078A8                     l1305:
 12751  0078A8  FFFF               	dw	65535	; assembler added errata NOP
 12752                           
 12753                           ; BSR set to: 0
 12754                           
 12755                           ; BSR set to: 0
 12756  0078AA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12757  0078AC  D7F8               	goto	l1306
 12758  0078AE                     u5400:
 12759  0078AE  FFFF               	dw	65535	; assembler added errata NOP
 12760                           
 12761                           ; BSR set to: 0
 12762                           
 12763                           ; BSR set to: 0
 12764                           
 12765                           ; BSR set to: 0
 12766  0078B0  5182               	movf	___awmod@divisor& (0+255),w,b
 12767  0078B2  5D80               	subwf	___awmod@dividend& (0+255),w,b
 12768  0078B4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12769  0078B6  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 12770  0078B8  A0D8               	btfss	status,0,c
 12771  0078BA  D004               	goto	l1309
 12772                           
 12773                           ; BSR set to: 0
 12774  0078BC  5182               	movf	___awmod@divisor& (0+255),w,b
 12775  0078BE  5F80               	subwf	___awmod@dividend& (0+255),f,b
 12776  0078C0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12777  0078C2  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 12778  0078C4                     l1309:
 12779  0078C4  FFFF               	dw	65535	; assembler added errata NOP
 12780                           
 12781                           ; BSR set to: 0
 12782                           
 12783                           ; BSR set to: 0
 12784  0078C6  90D8               	bcf	status,0,c
 12785  0078C8  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 12786  0078CA  3382               	rrcf	___awmod@divisor& (0+255),f,b
 12787                           
 12788                           ; BSR set to: 0
 12789  0078CC  2F84               	decfsz	___awmod@counter& (0+255),f,b
 12790  0078CE  D7EF               	goto	u5400
 12791  0078D0                     l1310:
 12792  0078D0  FFFF               	dw	65535	; assembler added errata NOP
 12793                           
 12794                           ; BSR set to: 0
 12795                           
 12796                           ; BSR set to: 0
 12797                           
 12798                           ; BSR set to: 0
 12799  0078D2  5185               	movf	___awmod@sign& (0+255),w,b
 12800  0078D4  B4D8               	btfsc	status,2,c
 12801  0078D6  D004               	goto	l1311
 12802                           
 12803                           ; BSR set to: 0
 12804  0078D8  6D80               	negf	___awmod@dividend& (0+255),b
 12805  0078DA  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12806  0078DC  B0D8               	btfsc	status,0,c
 12807  0078DE  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12808  0078E0                     l1311:
 12809  0078E0  FFFF               	dw	65535	; assembler added errata NOP
 12810                           
 12811                           ; BSR set to: 0
 12812                           
 12813                           ; BSR set to: 0
 12814  0078E2  C080  F080         	movff	___awmod@dividend,?___awmod
 12815  0078E6  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 12816                           
 12817                           ; BSR set to: 0
 12818                           
 12819                           ; BSR set to: 0
 12820  0078EA  0012               	return		;funcret
 12821  0078EC  FFFF               	dw	65535	; errata NOP
 12822  0078EE                     __end_of___awmod:
 12823                           	opt stack 0
 12824                           tblptru	equ	0xFF8
 12825                           tblptrh	equ	0xFF7
 12826                           tblptrl	equ	0xFF6
 12827                           tablat	equ	0xFF5
 12828                           prodh	equ	0xFF4
 12829                           prodl	equ	0xFF3
 12830                           intcon	equ	0xFF2
 12831                           postinc0	equ	0xFEE
 12832                           wreg	equ	0xFE8
 12833                           postdec1	equ	0xFE5
 12834                           fsr1l	equ	0xFE1
 12835                           indf2	equ	0xFDF
 12836                           postinc2	equ	0xFDE
 12837                           fsr2h	equ	0xFDA
 12838                           fsr2l	equ	0xFD9
 12839                           status	equ	0xFD8
 12840                           
 12841 ;; *************** function ___awdiv *****************
 12842 ;; Defined at:
 12843 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 12844 ;; Parameters:    Size  Location     Type
 12845 ;;  dividend        2    0[BANK0 ] int 
 12846 ;;  divisor         2    2[BANK0 ] int 
 12847 ;; Auto vars:     Size  Location     Type
 12848 ;;  quotient        2    6[BANK0 ] int 
 12849 ;;  sign            1    5[BANK0 ] unsigned char 
 12850 ;;  counter         1    4[BANK0 ] unsigned char 
 12851 ;; Return value:  Size  Location     Type
 12852 ;;                  2    0[BANK0 ] int 
 12853 ;; Registers used:
 12854 ;;		wreg, status,2, status,0
 12855 ;; Tracked objects:
 12856 ;;		On entry : 0/0
 12857 ;;		On exit  : 0/0
 12858 ;;		Unchanged: 0/0
 12859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12860 ;;      Params:         0       4       0       0       0       0       0
 12861 ;;      Locals:         0       4       0       0       0       0       0
 12862 ;;      Temps:          0       0       0       0       0       0       0
 12863 ;;      Totals:         0       8       0       0       0       0       0
 12864 ;;Total ram usage:        8 bytes
 12865 ;; Hardware stack levels used:    1
 12866 ;; Hardware stack levels required when called:    6
 12867 ;; This function calls:
 12868 ;;		Nothing
 12869 ;; This function is called by:
 12870 ;;		_dataLoger
 12871 ;;		_DECtoBCD
 12872 ;;		_intToFloatStr
 12873 ;;		_DECtoHEX
 12874 ;; This function uses a non-reentrant model
 12875 ;;
 12876                           
 12877                           	psect	text38
 12878  003DFA                     __ptext38:
 12879                           	opt stack 0
 12880  003DFA                     ___awdiv:
 12881                           	opt stack 0
 12882  003DFA  FFFF               	dw	65535	; assembler added errata NOP
 12883                           
 12884                           ; BSR set to: 0
 12885                           ;incstack = 0
 12886  003DFC  0E00               	movlw	0
 12887  003DFE  0100               	movlb	0	; () banked
 12888  003E00  6F85               	movwf	___awdiv@sign& (0+255),b
 12889                           
 12890                           ; BSR set to: 0
 12891  003E02  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12892  003E04  D006               	goto	l1289
 12893                           
 12894                           ; BSR set to: 0
 12895  003E06  6D82               	negf	___awdiv@divisor& (0+255),b
 12896  003E08  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
 12897  003E0A  B0D8               	btfsc	status,0,c
 12898  003E0C  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
 12899                           
 12900                           ; BSR set to: 0
 12901  003E0E  0E01               	movlw	1
 12902  003E10  6F85               	movwf	___awdiv@sign& (0+255),b
 12903  003E12                     l1289:
 12904  003E12  FFFF               	dw	65535	; assembler added errata NOP
 12905                           
 12906                           ; BSR set to: 0
 12907                           
 12908                           ; BSR set to: 0
 12909  003E14  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 12910  003E16  D006               	goto	l1290
 12911                           
 12912                           ; BSR set to: 0
 12913  003E18  6D80               	negf	___awdiv@dividend& (0+255),b
 12914  003E1A  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
 12915  003E1C  B0D8               	btfsc	status,0,c
 12916  003E1E  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
 12917                           
 12918                           ; BSR set to: 0
 12919  003E20  0E01               	movlw	1
 12920  003E22  1B85               	xorwf	___awdiv@sign& (0+255),f,b
 12921  003E24                     l1290:
 12922  003E24  FFFF               	dw	65535	; assembler added errata NOP
 12923                           
 12924                           ; BSR set to: 0
 12925                           
 12926                           ; BSR set to: 0
 12927  003E26  0E00               	movlw	0
 12928  003E28  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
 12929  003E2A  0E00               	movlw	0
 12930  003E2C  6F86               	movwf	___awdiv@quotient& (0+255),b
 12931                           
 12932                           ; BSR set to: 0
 12933  003E2E  5182               	movf	___awdiv@divisor& (0+255),w,b
 12934  003E30  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12935  003E32  B4D8               	btfsc	status,2,c
 12936  003E34  D020               	goto	l1297
 12937                           
 12938                           ; BSR set to: 0
 12939  003E36  0E01               	movlw	1
 12940  003E38  6F84               	movwf	___awdiv@counter& (0+255),b
 12941  003E3A  D005               	goto	l1292
 12942  003E3C  FFFF               	dw	65535	; assembler added errata NOP
 12943                           
 12944                           ; BSR set to: 0
 12945                           
 12946                           ; BSR set to: 0
 12947  003E3E  90D8               	bcf	status,0,c
 12948  003E40  3782               	rlcf	___awdiv@divisor& (0+255),f,b
 12949  003E42  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12950  003E44  2B84               	incf	___awdiv@counter& (0+255),f,b
 12951  003E46                     l1292:
 12952  003E46  FFFF               	dw	65535	; assembler added errata NOP
 12953                           
 12954                           ; BSR set to: 0
 12955                           
 12956                           ; BSR set to: 0
 12957  003E48  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12958  003E4A  D7F8               	goto	l1293
 12959  003E4C                     u5340:
 12960  003E4C  FFFF               	dw	65535	; assembler added errata NOP
 12961                           
 12962                           ; BSR set to: 0
 12963                           
 12964                           ; BSR set to: 0
 12965                           
 12966                           ; BSR set to: 0
 12967  003E4E  90D8               	bcf	status,0,c
 12968  003E50  3786               	rlcf	___awdiv@quotient& (0+255),f,b
 12969  003E52  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12970                           
 12971                           ; BSR set to: 0
 12972  003E54  5182               	movf	___awdiv@divisor& (0+255),w,b
 12973  003E56  5D80               	subwf	___awdiv@dividend& (0+255),w,b
 12974  003E58  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12975  003E5A  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12976  003E5C  A0D8               	btfss	status,0,c
 12977  003E5E  D005               	goto	l1296
 12978                           
 12979                           ; BSR set to: 0
 12980  003E60  5182               	movf	___awdiv@divisor& (0+255),w,b
 12981  003E62  5F80               	subwf	___awdiv@dividend& (0+255),f,b
 12982  003E64  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12983  003E66  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12984                           
 12985                           ; BSR set to: 0
 12986  003E68  8186               	bsf	___awdiv@quotient& (0+255),0,b
 12987  003E6A                     l1296:
 12988  003E6A  FFFF               	dw	65535	; assembler added errata NOP
 12989                           
 12990                           ; BSR set to: 0
 12991                           
 12992                           ; BSR set to: 0
 12993  003E6C  90D8               	bcf	status,0,c
 12994  003E6E  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12995  003E70  3382               	rrcf	___awdiv@divisor& (0+255),f,b
 12996                           
 12997                           ; BSR set to: 0
 12998  003E72  2F84               	decfsz	___awdiv@counter& (0+255),f,b
 12999  003E74  D7EB               	goto	u5340
 13000  003E76                     l1297:
 13001  003E76  FFFF               	dw	65535	; assembler added errata NOP
 13002                           
 13003                           ; BSR set to: 0
 13004                           
 13005                           ; BSR set to: 0
 13006                           
 13007                           ; BSR set to: 0
 13008  003E78  5185               	movf	___awdiv@sign& (0+255),w,b
 13009  003E7A  B4D8               	btfsc	status,2,c
 13010  003E7C  D004               	goto	l1298
 13011                           
 13012                           ; BSR set to: 0
 13013  003E7E  6D86               	negf	___awdiv@quotient& (0+255),b
 13014  003E80  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
 13015  003E82  B0D8               	btfsc	status,0,c
 13016  003E84  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
 13017  003E86                     l1298:
 13018  003E86  FFFF               	dw	65535	; assembler added errata NOP
 13019                           
 13020                           ; BSR set to: 0
 13021                           
 13022                           ; BSR set to: 0
 13023  003E88  C086  F080         	movff	___awdiv@quotient,?___awdiv
 13024  003E8C  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
 13025                           
 13026                           ; BSR set to: 0
 13027                           
 13028                           ; BSR set to: 0
 13029  003E90  0012               	return		;funcret
 13030  003E92  FFFF               	dw	65535	; errata NOP
 13031  003E94                     __end_of___awdiv:
 13032                           	opt stack 0
 13033                           tblptru	equ	0xFF8
 13034                           tblptrh	equ	0xFF7
 13035                           tblptrl	equ	0xFF6
 13036                           tablat	equ	0xFF5
 13037                           prodh	equ	0xFF4
 13038                           prodl	equ	0xFF3
 13039                           intcon	equ	0xFF2
 13040                           postinc0	equ	0xFEE
 13041                           wreg	equ	0xFE8
 13042                           postdec1	equ	0xFE5
 13043                           fsr1l	equ	0xFE1
 13044                           indf2	equ	0xFDF
 13045                           postinc2	equ	0xFDE
 13046                           fsr2h	equ	0xFDA
 13047                           fsr2l	equ	0xFD9
 13048                           status	equ	0xFD8
 13049                           
 13050 ;; *************** function _drenarPressao *****************
 13051 ;; Defined at:
 13052 ;;		line 126 in file "controle.h"
 13053 ;; Parameters:    Size  Location     Type
 13054 ;;		None
 13055 ;; Auto vars:     Size  Location     Type
 13056 ;;		None
 13057 ;; Return value:  Size  Location     Type
 13058 ;;                  1    wreg      void 
 13059 ;; Registers used:
 13060 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13061 ;; Tracked objects:
 13062 ;;		On entry : 0/0
 13063 ;;		On exit  : 0/0
 13064 ;;		Unchanged: 0/0
 13065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13066 ;;      Params:         0       0       0       0       0       0       0
 13067 ;;      Locals:         0       0       0       0       0       0       0
 13068 ;;      Temps:          0       0       0       0       0       0       0
 13069 ;;      Totals:         0       0       0       0       0       0       0
 13070 ;;Total ram usage:        0 bytes
 13071 ;; Hardware stack levels used:    1
 13072 ;; Hardware stack levels required when called:    9
 13073 ;; This function calls:
 13074 ;;		_sprintf
 13075 ;; This function is called by:
 13076 ;;		_acaoTesteBombas
 13077 ;; This function uses a non-reentrant model
 13078 ;;
 13079                           
 13080                           	psect	text39
 13081  006F20                     __ptext39:
 13082                           	opt stack 0
 13083  006F20                     _drenarPressao:
 13084                           	opt stack 0
 13085  006F20  FFFF               	dw	65535	; assembler added errata NOP
 13086                           
 13087                           ;controle.h: 127: sprintf(line4, "Despressurizando...");
 13088                           
 13089                           ; BSR set to: 0
 13090                           ;incstack = 0
 13091  006F22  0E3C               	movlw	low _line4
 13092  006F24  0100               	movlb	0	; () banked
 13093  006F26  6FA1               	movwf	sprintf@wh& (0+255),b
 13094  006F28  0E01               	movlw	high _line4
 13095  006F2A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13096  006F2C  0E74               	movlw	low STR_37
 13097  006F2E  6FA3               	movwf	sprintf@f& (0+255),b
 13098  006F30  0E7C               	movlw	high STR_37
 13099  006F32  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13100  006F34  ECC9  F039         	call	_sprintf	;wreg free
 13101                           
 13102                           ;controle.h: 128: if (!timerTesteBombas) {
 13103  006F38  0100               	movlb	0	; () banked
 13104  006F3A  51D9               	movf	_timerTesteBombas& (0+255),w,b
 13105  006F3C  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13106  006F3E  A4D8               	btfss	status,2,c
 13107  006F40  D006               	goto	l510
 13108                           
 13109                           ; BSR set to: 0
 13110                           ;controle.h: 129: executandoTeste = 0;
 13111  006F42  0E00               	movlw	0
 13112  006F44  6FF1               	movwf	_executandoTeste& (0+255),b
 13113                           
 13114                           ;controle.h: 130: codigoErro = 3;
 13115  006F46  0E03               	movlw	3
 13116  006F48  6FF3               	movwf	_codigoErro& (0+255),b
 13117                           
 13118                           ;controle.h: 131: menu_posi = 0;
 13119  006F4A  0E00               	movlw	0
 13120  006F4C  6FDE               	movwf	_menu_posi& (0+255),b
 13121  006F4E                     l510:
 13122  006F4E  FFFF               	dw	65535	; assembler added errata NOP
 13123                           
 13124                           ; BSR set to: 0
 13125                           
 13126                           ; BSR set to: 0
 13127  006F50  0012               	return		;funcret
 13128  006F52  FFFF               	dw	65535	; errata NOP
 13129  006F54                     __end_of_drenarPressao:
 13130                           	opt stack 0
 13131                           tblptru	equ	0xFF8
 13132                           tblptrh	equ	0xFF7
 13133                           tblptrl	equ	0xFF6
 13134                           tablat	equ	0xFF5
 13135                           prodh	equ	0xFF4
 13136                           prodl	equ	0xFF3
 13137                           intcon	equ	0xFF2
 13138                           postinc0	equ	0xFEE
 13139                           wreg	equ	0xFE8
 13140                           postdec1	equ	0xFE5
 13141                           fsr1l	equ	0xFE1
 13142                           indf2	equ	0xFDF
 13143                           postinc2	equ	0xFDE
 13144                           fsr2h	equ	0xFDA
 13145                           fsr2l	equ	0xFD9
 13146                           status	equ	0xFD8
 13147                           
 13148 ;; *************** function _sprintf *****************
 13149 ;; Defined at:
 13150 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
 13151 ;; Parameters:    Size  Location     Type
 13152 ;;  wh              2   33[BANK0 ] PTR unsigned char 
 13153 ;;		 -> intToFloatStr@end(4), line3(21), line2(21), line1(21), 
 13154 ;;		 -> line4(21), bufferAUX(20), 
 13155 ;;  f               2   35[BANK0 ] PTR const unsigned char 
 13156 ;;		 -> intToFloatStr@conv(4), STR_122(15), STR_121(12), STR_120(10), 
 13157 ;;		 -> STR_119(18), STR_118(10), STR_117(18), STR_116(16), 
 13158 ;;		 -> STR_115(10), STR_113(3), STR_112(14), STR_111(20), 
 13159 ;;		 -> STR_110(8), STR_109(10), STR_108(11), STR_107(9), 
 13160 ;;		 -> STR_106(3), STR_105(15), STR_104(15), STR_103(11), 
 13161 ;;		 -> STR_102(11), STR_101(19), STR_100(5), STR_99(12), 
 13162 ;;		 -> STR_98(5), STR_97(14), STR_96(19), STR_93(3), 
 13163 ;;		 -> STR_92(7), STR_91(7), STR_89(12), STR_88(17), 
 13164 ;;		 -> STR_87(20), STR_86(8), STR_83(14), STR_80(14), 
 13165 ;;		 -> STR_79(11), STR_76(10), STR_75(31), STR_72(11), 
 13166 ;;		 -> STR_71(20), STR_70(20), STR_69(21), STR_68(15), 
 13167 ;;		 -> STR_67(6), STR_66(15), STR_65(6), STR_64(20), 
 13168 ;;		 -> STR_63(15), STR_62(19), STR_61(20), STR_60(21), 
 13169 ;;		 -> STR_59(21), STR_58(18), STR_57(20), STR_56(17), 
 13170 ;;		 -> STR_55(26), STR_54(16), STR_51(15), STR_48(15), 
 13171 ;;		 -> STR_45(11), STR_44(17), STR_43(16), STR_42(19), 
 13172 ;;		 -> STR_41(19), STR_40(16), STR_39(15), STR_38(15), 
 13173 ;;		 -> STR_37(20), STR_2(5), STR_1(5), 
 13174 ;; Auto vars:     Size  Location     Type
 13175 ;;  pb              4   49[BANK0 ] struct __prbuf
 13176 ;;  ap              2   47[BANK0 ] PTR void [1]
 13177 ;;		 -> ?_sprintf(2), ?_printf(2), 
 13178 ;; Return value:  Size  Location     Type
 13179 ;;                  2   33[BANK0 ] int 
 13180 ;; Registers used:
 13181 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13182 ;; Tracked objects:
 13183 ;;		On entry : 0/0
 13184 ;;		On exit  : 0/0
 13185 ;;		Unchanged: 0/0
 13186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13187 ;;      Params:         0      14       0       0       0       0       0
 13188 ;;      Locals:         0       6       0       0       0       0       0
 13189 ;;      Temps:          0       0       0       0       0       0       0
 13190 ;;      Totals:         0      20       0       0       0       0       0
 13191 ;;Total ram usage:       20 bytes
 13192 ;; Hardware stack levels used:    1
 13193 ;; Hardware stack levels required when called:    8
 13194 ;; This function calls:
 13195 ;;		__doprnt
 13196 ;; This function is called by:
 13197 ;;		_getSerial
 13198 ;;		_drenarPressao
 13199 ;;		_acaoTesteBombas
 13200 ;;		_telaPrincipal
 13201 ;;		_tela_ajusteRTC
 13202 ;;		_tela_testeBombas
 13203 ;;		_dataLoger
 13204 ;;		_informacoes
 13205 ;;		_configuraTelefones
 13206 ;;		_configurarEstacionaria
 13207 ;;		_ajusteSP_Bombas
 13208 ;;		_main
 13209 ;;		_intToFloatStr
 13210 ;;		_telaTeste
 13211 ;; This function uses a non-reentrant model
 13212 ;;
 13213                           
 13214                           	psect	text40
 13215  007392                     __ptext40:
 13216                           	opt stack 0
 13217  007392                     _sprintf:
 13218                           	opt stack 0
 13219  007392  FFFF               	dw	65535	; assembler added errata NOP
 13220                           
 13221                           ; BSR set to: 0
 13222                           ;incstack = 0
 13223  007394  C0A1  F0B1         	movff	sprintf@wh,sprintf@pb
 13224  007398  C0A2  F0B2         	movff	sprintf@wh+1,sprintf@pb+1
 13225  00739C  0E00               	movlw	0
 13226  00739E  0100               	movlb	0	; () banked
 13227  0073A0  6FB3               	movwf	(sprintf@pb+2)& (0+255),b
 13228  0073A2  0E00               	movlw	0
 13229  0073A4  6FB4               	movwf	(sprintf@pb+3)& (0+255),b
 13230  0073A6  0EA5               	movlw	low (?_sprintf+4)
 13231  0073A8  6FAF               	movwf	sprintf@ap& (0+255),b
 13232  0073AA  0E00               	movlw	high (?_sprintf+4)
 13233  0073AC  6FB0               	movwf	(sprintf@ap+1)& (0+255),b
 13234                           
 13235                           ; BSR set to: 0
 13236  0073AE  0EB1               	movlw	low sprintf@pb
 13237  0073B0  6F8C               	movwf	__doprnt@pb& (0+255),b
 13238  0073B2  0E00               	movlw	high sprintf@pb
 13239  0073B4  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 13240  0073B6  C0A3  F08E         	movff	sprintf@f,__doprnt@f
 13241  0073BA  C0A4  F08F         	movff	sprintf@f+1,__doprnt@f+1
 13242  0073BE  0EAF               	movlw	low sprintf@ap
 13243  0073C0  6F90               	movwf	__doprnt@ap& (0+255),b
 13244  0073C2  0E00               	movlw	high sprintf@ap
 13245  0073C4  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 13246  0073C6  EC8E  F000         	call	__doprnt	;wreg free
 13247  0073CA  C0B1  FFD9         	movff	sprintf@pb,fsr2l
 13248  0073CE  C0B2  FFDA         	movff	sprintf@pb+1,fsr2h
 13249  0073D2  0E00               	movlw	0
 13250  0073D4  6EDF               	movwf	indf2,c
 13251                           
 13252                           ;	Return value of _sprintf is never used
 13253  0073D6  0012               	return		;funcret
 13254  0073D8  FFFF               	dw	65535	; errata NOP
 13255  0073DA                     __end_of_sprintf:
 13256                           	opt stack 0
 13257                           tblptru	equ	0xFF8
 13258                           tblptrh	equ	0xFF7
 13259                           tblptrl	equ	0xFF6
 13260                           tablat	equ	0xFF5
 13261                           prodh	equ	0xFF4
 13262                           prodl	equ	0xFF3
 13263                           intcon	equ	0xFF2
 13264                           postinc0	equ	0xFEE
 13265                           wreg	equ	0xFE8
 13266                           postdec1	equ	0xFE5
 13267                           fsr1l	equ	0xFE1
 13268                           indf2	equ	0xFDF
 13269                           postinc2	equ	0xFDE
 13270                           fsr2h	equ	0xFDA
 13271                           fsr2l	equ	0xFD9
 13272                           status	equ	0xFD8
 13273                           
 13274 ;; *************** function _clearShiftREG *****************
 13275 ;; Defined at:
 13276 ;;		line 30 in file "shift595.h"
 13277 ;; Parameters:    Size  Location     Type
 13278 ;;		None
 13279 ;; Auto vars:     Size  Location     Type
 13280 ;;  i               1    0[BANK0 ] unsigned char 
 13281 ;; Return value:  Size  Location     Type
 13282 ;;                  1    wreg      void 
 13283 ;; Registers used:
 13284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13285 ;; Tracked objects:
 13286 ;;		On entry : 0/0
 13287 ;;		On exit  : 0/0
 13288 ;;		Unchanged: 0/0
 13289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13290 ;;      Params:         0       0       0       0       0       0       0
 13291 ;;      Locals:         0       1       0       0       0       0       0
 13292 ;;      Temps:          0       0       0       0       0       0       0
 13293 ;;      Totals:         0       1       0       0       0       0       0
 13294 ;;Total ram usage:        1 bytes
 13295 ;; Hardware stack levels used:    1
 13296 ;; Hardware stack levels required when called:    6
 13297 ;; This function calls:
 13298 ;;		Nothing
 13299 ;; This function is called by:
 13300 ;;		_acaoTesteBombas
 13301 ;;		_resetParametros
 13302 ;;		_telaPrincipal
 13303 ;; This function uses a non-reentrant model
 13304 ;;
 13305                           
 13306                           	psect	text41
 13307  006FF6                     __ptext41:
 13308                           	opt stack 0
 13309  006FF6                     _clearShiftREG:
 13310                           	opt stack 0
 13311  006FF6  FFFF               	dw	65535	; assembler added errata NOP
 13312                           
 13313                           ;shift595.h: 31: char i = 0;
 13314                           
 13315                           ;incstack = 0
 13316  006FF8  0E00               	movlw	0
 13317  006FFA  0100               	movlb	0	; () banked
 13318  006FFC  6F80               	movwf	clearShiftREG@i& (0+255),b
 13319                           
 13320                           ;shift595.h: 32: for (i = 0; i < 8; i++) {
 13321  006FFE  0E00               	movlw	0
 13322  007000  6F80               	movwf	clearShiftREG@i& (0+255),b
 13323  007002                     l5354:
 13324  007002  FFFF               	dw	65535	; assembler added errata NOP
 13325                           
 13326                           ; BSR set to: 0
 13327  007004  0E07               	movlw	7
 13328  007006  6580               	cpfsgt	clearShiftREG@i& (0+255),b
 13329  007008  D001               	goto	l426
 13330  00700A  D00D               	goto	u5470
 13331  00700C                     l426:
 13332  00700C  FFFF               	dw	65535	; assembler added errata NOP
 13333                           
 13334                           ; BSR set to: 0
 13335                           ;shift595.h: 33: shift[i] = 0;
 13336                           
 13337                           ; BSR set to: 0
 13338  00700E  5180               	movf	clearShiftREG@i& (0+255),w,b
 13339  007010  0D01               	mullw	1
 13340  007012  0E44               	movlw	low _shift
 13341  007014  24F3               	addwf	prodl,w,c
 13342  007016  6ED9               	movwf	fsr2l,c
 13343  007018  0E00               	movlw	high _shift
 13344  00701A  20F4               	addwfc	prodh,w,c
 13345  00701C  6EDA               	movwf	fsr2h,c
 13346  00701E  0E00               	movlw	0
 13347  007020  6EDF               	movwf	indf2,c
 13348                           
 13349                           ; BSR set to: 0
 13350  007022  2B80               	incf	clearShiftREG@i& (0+255),f,b
 13351  007024  D7EE               	goto	l5354
 13352  007026                     u5470:
 13353  007026  FFFF               	dw	65535	; assembler added errata NOP
 13354                           
 13355                           ; BSR set to: 0
 13356                           
 13357                           ; BSR set to: 0
 13358  007028  0012               	return		;funcret
 13359  00702A  FFFF               	dw	65535	; errata NOP
 13360  00702C                     __end_of_clearShiftREG:
 13361                           	opt stack 0
 13362                           tblptru	equ	0xFF8
 13363                           tblptrh	equ	0xFF7
 13364                           tblptrl	equ	0xFF6
 13365                           tablat	equ	0xFF5
 13366                           prodh	equ	0xFF4
 13367                           prodl	equ	0xFF3
 13368                           intcon	equ	0xFF2
 13369                           postinc0	equ	0xFEE
 13370                           wreg	equ	0xFE8
 13371                           postdec1	equ	0xFE5
 13372                           fsr1l	equ	0xFE1
 13373                           indf2	equ	0xFDF
 13374                           postinc2	equ	0xFDE
 13375                           fsr2h	equ	0xFDA
 13376                           fsr2l	equ	0xFD9
 13377                           status	equ	0xFD8
 13378                           
 13379 ;; *************** function _btPress *****************
 13380 ;; Defined at:
 13381 ;;		line 57 in file "teclado.h"
 13382 ;; Parameters:    Size  Location     Type
 13383 ;;  bt              1    wreg     unsigned char 
 13384 ;; Auto vars:     Size  Location     Type
 13385 ;;  bt              1    0[BANK0 ] unsigned char 
 13386 ;; Return value:  Size  Location     Type
 13387 ;;                  1    wreg      unsigned char 
 13388 ;; Registers used:
 13389 ;;		wreg, status,2, status,0
 13390 ;; Tracked objects:
 13391 ;;		On entry : 0/0
 13392 ;;		On exit  : 0/0
 13393 ;;		Unchanged: 0/0
 13394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13395 ;;      Params:         0       0       0       0       0       0       0
 13396 ;;      Locals:         0       1       0       0       0       0       0
 13397 ;;      Temps:          0       0       0       0       0       0       0
 13398 ;;      Totals:         0       1       0       0       0       0       0
 13399 ;;Total ram usage:        1 bytes
 13400 ;; Hardware stack levels used:    1
 13401 ;; Hardware stack levels required when called:    6
 13402 ;; This function calls:
 13403 ;;		Nothing
 13404 ;; This function is called by:
 13405 ;;		_acaoTesteBombas
 13406 ;;		_telaPrincipal
 13407 ;;		_tela_ajusteRTC
 13408 ;;		_tela_testeBombas
 13409 ;;		_dataLoger
 13410 ;;		_informacoes
 13411 ;;		_configuraTelefones
 13412 ;;		_configurarEstacionaria
 13413 ;;		_ajusteSP_Bombas
 13414 ;;		_main
 13415 ;; This function uses a non-reentrant model
 13416 ;;
 13417                           
 13418                           	psect	text42
 13419  007694                     __ptext42:
 13420                           	opt stack 0
 13421  007694                     _btPress:
 13422                           	opt stack 0
 13423  007694  FFFF               	dw	65535	; assembler added errata NOP
 13424                           
 13425                           ; BSR set to: 0
 13426                           ;incstack = 0
 13427                           ;btPress@bt stored from wreg
 13428  007696  0100               	movlb	0	; () banked
 13429  007698  6F80               	movwf	btPress@bt& (0+255),b
 13430                           
 13431                           ;teclado.h: 58: switch (bt) {
 13432  00769A  D021               	goto	l463
 13433  00769C  FFFF               	dw	65535	; assembler added errata NOP
 13434  00769E  5064               	movf	__b_esc,w,c
 13435  0076A0  B4D8               	btfsc	status,2,c
 13436  0076A2  D01A               	goto	l472
 13437                           
 13438                           ;teclado.h: 60: _b_esc = 0;
 13439  0076A4  0E00               	movlw	0
 13440  0076A6  6E64               	movwf	__b_esc,c
 13441  0076A8  D014               	goto	l5886
 13442  0076AA  FFFF               	dw	65535	; assembler added errata NOP
 13443                           
 13444                           ;teclado.h: 65: if (_b_mais) {
 13445  0076AC  5060               	movf	__b_mais,w,c
 13446  0076AE  B4D8               	btfsc	status,2,c
 13447  0076B0  D013               	goto	l472
 13448                           
 13449                           ;teclado.h: 66: _b_mais = 0;
 13450  0076B2  0E00               	movlw	0
 13451  0076B4  6E60               	movwf	__b_mais,c
 13452  0076B6  D00D               	goto	l5886
 13453  0076B8  FFFF               	dw	65535	; assembler added errata NOP
 13454  0076BA  5062               	movf	__b_menos,w,c
 13455  0076BC  B4D8               	btfsc	status,2,c
 13456  0076BE  D00C               	goto	l472
 13457                           
 13458                           ;teclado.h: 71: _b_menos = 0;
 13459  0076C0  0E00               	movlw	0
 13460  0076C2  6E62               	movwf	__b_menos,c
 13461  0076C4  D006               	goto	l5886
 13462  0076C6  FFFF               	dw	65535	; assembler added errata NOP
 13463  0076C8  505E               	movf	__b_ok,w,c
 13464  0076CA  B4D8               	btfsc	status,2,c
 13465  0076CC  D005               	goto	l472
 13466                           
 13467                           ;teclado.h: 76: _b_ok = 0;
 13468  0076CE  0E00               	movlw	0
 13469  0076D0  6E5E               	movwf	__b_ok,c
 13470  0076D2                     l5886:
 13471  0076D2  FFFF               	dw	65535	; assembler added errata NOP
 13472                           
 13473                           ;teclado.h: 77: return 1;
 13474  0076D4  0E01               	movlw	1
 13475  0076D6  D013               	goto	l474
 13476  0076D8                     l472:
 13477  0076D8  FFFF               	dw	65535	; assembler added errata NOP
 13478                           
 13479                           ;teclado.h: 80: default: return 0;
 13480                           
 13481                           ;teclado.h: 78: }
 13482                           ;teclado.h: 79: return 0;
 13483  0076DA  0E00               	movlw	0
 13484                           
 13485                           ;teclado.h: 81: }
 13486  0076DC  D010               	goto	l474
 13487  0076DE                     l463:
 13488  0076DE  FFFF               	dw	65535	; assembler added errata NOP
 13489  0076E0  0100               	movlb	0	; () banked
 13490  0076E2  5180               	movf	btPress@bt& (0+255),w,b
 13491                           
 13492                           ; Switch size 1, requested type "space"
 13493                           ; Number of cases is 4, Range of values is 1 to 4
 13494                           ; switch strategies available:
 13495                           ; Name         Instructions Cycles
 13496                           ; simple_byte           13     7 (average)
 13497                           ;	Chosen strategy is simple_byte
 13498  0076E4  0A01               	xorlw	1	; case 1
 13499  0076E6  B4D8               	btfsc	status,2,c
 13500  0076E8  D7D9               	goto	l464
 13501  0076EA  0A03               	xorlw	3	; case 2
 13502  0076EC  B4D8               	btfsc	status,2,c
 13503  0076EE  D7E4               	goto	l469
 13504  0076F0  0A01               	xorlw	1	; case 3
 13505  0076F2  B4D8               	btfsc	status,2,c
 13506  0076F4  D7DA               	goto	l467
 13507  0076F6  0A07               	xorlw	7	; case 4
 13508  0076F8  B4D8               	btfsc	status,2,c
 13509  0076FA  D7E5               	goto	l471
 13510  0076FC  D7ED               	goto	l472
 13511  0076FE                     l474:
 13512  0076FE  FFFF               	dw	65535	; assembler added errata NOP
 13513                           
 13514                           ; BSR set to: 0
 13515  007700  0012               	return		;funcret
 13516  007702  FFFF               	dw	65535	; errata NOP
 13517  007704                     __end_of_btPress:
 13518                           	opt stack 0
 13519                           tblptru	equ	0xFF8
 13520                           tblptrh	equ	0xFF7
 13521                           tblptrl	equ	0xFF6
 13522                           tablat	equ	0xFF5
 13523                           prodh	equ	0xFF4
 13524                           prodl	equ	0xFF3
 13525                           intcon	equ	0xFF2
 13526                           postinc0	equ	0xFEE
 13527                           wreg	equ	0xFE8
 13528                           postdec1	equ	0xFE5
 13529                           fsr1l	equ	0xFE1
 13530                           indf2	equ	0xFDF
 13531                           postinc2	equ	0xFDE
 13532                           fsr2h	equ	0xFDA
 13533                           fsr2l	equ	0xFD9
 13534                           status	equ	0xFD8
 13535                           
 13536 ;; *************** function _acaoBombas *****************
 13537 ;; Defined at:
 13538 ;;		line 18 in file "controle.h"
 13539 ;; Parameters:    Size  Location     Type
 13540 ;;		None
 13541 ;; Auto vars:     Size  Location     Type
 13542 ;;		None
 13543 ;; Return value:  Size  Location     Type
 13544 ;;                  1    wreg      void 
 13545 ;; Registers used:
 13546 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13547 ;; Tracked objects:
 13548 ;;		On entry : 0/0
 13549 ;;		On exit  : 0/0
 13550 ;;		Unchanged: 0/0
 13551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13552 ;;      Params:         0       0       0       0       0       0       0
 13553 ;;      Locals:         0       0       0       0       0       0       0
 13554 ;;      Temps:          0       3       0       0       0       0       0
 13555 ;;      Totals:         0       3       0       0       0       0       0
 13556 ;;Total ram usage:        3 bytes
 13557 ;; Hardware stack levels used:    1
 13558 ;; Hardware stack levels required when called:   10
 13559 ;; This function calls:
 13560 ;;		_enviaSMS
 13561 ;;		_partidaBombaEstacionaria
 13562 ;; This function is called by:
 13563 ;;		_main
 13564 ;; This function uses a non-reentrant model
 13565 ;;
 13566                           
 13567                           	psect	text43
 13568  003082                     __ptext43:
 13569                           	opt stack 0
 13570  003082                     _acaoBombas:
 13571                           	opt stack 0
 13572  003082  FFFF               	dw	65535	; assembler added errata NOP
 13573                           
 13574                           ;controle.h: 19: if (pressao >= sp_pressao_rede && !ocorrendoIncendio && !executandoTest
      +                          e) {
 13575                           
 13576                           ;incstack = 0
 13577  003084  0100               	movlb	0	; () banked
 13578  003086  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 13579  003088  6FC8               	movwf	??_acaoBombas& (0+255),b
 13580  00308A  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13581  00308C  51C8               	movf	??_acaoBombas& (0+255),w,b
 13582  00308E  5DF8               	subwf	_pressao& (0+255),w,b
 13583  003090  51F9               	movf	(_pressao+1)& (0+255),w,b
 13584  003092  0A80               	xorlw	128
 13585  003094  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13586  003096  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13587  003098  0A80               	xorlw	128
 13588  00309A  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13589  00309C  A0D8               	btfss	status,0,c
 13590  00309E  D00F               	goto	l477
 13591                           
 13592                           ; BSR set to: 0
 13593  0030A0  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13594  0030A2  A4D8               	btfss	status,2,c
 13595  0030A4  D00C               	goto	l477
 13596                           
 13597                           ; BSR set to: 0
 13598  0030A6  51F1               	movf	_executandoTeste& (0+255),w,b
 13599  0030A8  A4D8               	btfss	status,2,c
 13600  0030AA  D009               	goto	l477
 13601                           
 13602                           ; BSR set to: 0
 13603                           ;controle.h: 20: shift[6] = 0;
 13604  0030AC  0E00               	movlw	0
 13605  0030AE  6E4A               	movwf	_shift+6,c
 13606                           
 13607                           ;controle.h: 21: shift[5] = 0;
 13608  0030B0  0E00               	movlw	0
 13609  0030B2  6E49               	movwf	_shift+5,c
 13610                           
 13611                           ; BSR set to: 0
 13612                           ;controle.h: 22: partidaBombaEstacionaria(0);
 13613  0030B4  0E00               	movlw	0
 13614  0030B6  EC4B  F01C         	call	_partidaBombaEstacionaria
 13615                           
 13616                           ;controle.h: 23: shift[1] = 0;
 13617  0030BA  0E00               	movlw	0
 13618  0030BC  D06E               	goto	L32
 13619  0030BE                     l477:
 13620  0030BE  FFFF               	dw	65535	; assembler added errata NOP
 13621                           
 13622                           ;controle.h: 25: }
 13623                           ;controle.h: 27: shift[2] = 0;
 13624  0030C0  0E00               	movlw	0
 13625  0030C2  6E46               	movwf	_shift+2,c
 13626                           
 13627                           ;controle.h: 28: if (pressao <= sp_jockey) {
 13628  0030C4  0100               	movlb	0	; () banked
 13629  0030C6  51E2               	movf	_sp_jockey& (0+255),w,b
 13630  0030C8  6FC8               	movwf	??_acaoBombas& (0+255),b
 13631  0030CA  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13632  0030CC  51F8               	movf	_pressao& (0+255),w,b
 13633  0030CE  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13634  0030D0  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13635  0030D2  0A80               	xorlw	128
 13636  0030D4  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13637  0030D6  51F9               	movf	(_pressao+1)& (0+255),w,b
 13638  0030D8  0A80               	xorlw	128
 13639  0030DA  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13640  0030DC  A0D8               	btfss	status,0,c
 13641  0030DE  D002               	goto	l479
 13642                           
 13643                           ; BSR set to: 0
 13644                           ;controle.h: 29: shift[6] = 1;
 13645  0030E0  0E01               	movlw	1
 13646  0030E2  D012               	goto	L33
 13647  0030E4                     l479:
 13648  0030E4  FFFF               	dw	65535	; assembler added errata NOP
 13649                           
 13650                           ; BSR set to: 0
 13651                           
 13652                           ; BSR set to: 0
 13653  0030E6  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 13654  0030E8  6FC8               	movwf	??_acaoBombas& (0+255),b
 13655  0030EA  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13656  0030EC  51C8               	movf	??_acaoBombas& (0+255),w,b
 13657  0030EE  5DF8               	subwf	_pressao& (0+255),w,b
 13658  0030F0  51F9               	movf	(_pressao+1)& (0+255),w,b
 13659  0030F2  0A80               	xorlw	128
 13660  0030F4  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13661  0030F6  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13662  0030F8  0A80               	xorlw	128
 13663  0030FA  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13664  0030FC  A0D8               	btfss	status,0,c
 13665  0030FE  D006               	goto	l481
 13666                           
 13667                           ; BSR set to: 0
 13668  003100  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13669  003102  A4D8               	btfss	status,2,c
 13670  003104  D003               	goto	l481
 13671                           
 13672                           ; BSR set to: 0
 13673                           ;controle.h: 31: shift[6] = 0;
 13674  003106  0E00               	movlw	0
 13675  003108                     L33:
 13676  003108  FFFF               	dw	65535	; assembler added errata NOP
 13677  00310A  6E4A               	movwf	_shift+6,c
 13678  00310C                     l481:
 13679  00310C  FFFF               	dw	65535	; assembler added errata NOP
 13680                           
 13681                           ; BSR set to: 0
 13682                           ;controle.h: 32: }
 13683                           ;controle.h: 34: if (pressao <= sp_principal) {
 13684                           
 13685                           ; BSR set to: 0
 13686                           
 13687                           ; BSR set to: 0
 13688  00310E  51E1               	movf	_sp_principal& (0+255),w,b
 13689  003110  6FC8               	movwf	??_acaoBombas& (0+255),b
 13690  003112  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13691  003114  51F8               	movf	_pressao& (0+255),w,b
 13692  003116  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13693  003118  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13694  00311A  0A80               	xorlw	128
 13695  00311C  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13696  00311E  51F9               	movf	(_pressao+1)& (0+255),w,b
 13697  003120  0A80               	xorlw	128
 13698  003122  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13699  003124  A0D8               	btfss	status,0,c
 13700  003126  D004               	goto	l482
 13701                           
 13702                           ; BSR set to: 0
 13703                           ;controle.h: 35: ocorrendoIncendio = 1;
 13704  003128  0E01               	movlw	1
 13705  00312A  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
 13706                           
 13707                           ;controle.h: 36: shift[5] = 1;
 13708  00312C  0E01               	movlw	1
 13709  00312E  6E49               	movwf	_shift+5,c
 13710  003130                     l482:
 13711  003130  FFFF               	dw	65535	; assembler added errata NOP
 13712                           
 13713                           ; BSR set to: 0
 13714                           ;controle.h: 40: }
 13715                           ;controle.h: 41: if (pressao >= sp_pressao_rede && !ocorrendoIncendio) {
 13716                           
 13717                           ; BSR set to: 0
 13718  003132  51E3               	movf	_sp_pressao_rede& (0+255),w,b
 13719  003134  6FC8               	movwf	??_acaoBombas& (0+255),b
 13720  003136  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13721  003138  51C8               	movf	??_acaoBombas& (0+255),w,b
 13722  00313A  5DF8               	subwf	_pressao& (0+255),w,b
 13723  00313C  51F9               	movf	(_pressao+1)& (0+255),w,b
 13724  00313E  0A80               	xorlw	128
 13725  003140  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13726  003142  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13727  003144  0A80               	xorlw	128
 13728  003146  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13729  003148  A0D8               	btfss	status,0,c
 13730  00314A  D008               	goto	l483
 13731                           
 13732                           ; BSR set to: 0
 13733  00314C  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13734  00314E  A4D8               	btfss	status,2,c
 13735  003150  D005               	goto	l483
 13736                           
 13737                           ; BSR set to: 0
 13738                           ;controle.h: 42: shift[5] = 0;
 13739  003152  0E00               	movlw	0
 13740  003154  6E49               	movwf	_shift+5,c
 13741                           
 13742                           ; BSR set to: 0
 13743                           ;controle.h: 43: partidaBombaEstacionaria(0);
 13744  003156  0E00               	movlw	0
 13745  003158  EC4B  F01C         	call	_partidaBombaEstacionaria
 13746  00315C                     l483:
 13747  00315C  FFFF               	dw	65535	; assembler added errata NOP
 13748                           
 13749                           ;controle.h: 44: }
 13750                           ;controle.h: 46: if (pressao <= sp_estacionaria) {
 13751  00315E  0100               	movlb	0	; () banked
 13752  003160  51E0               	movf	_sp_estacionaria& (0+255),w,b
 13753  003162  6FC8               	movwf	??_acaoBombas& (0+255),b
 13754  003164  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13755  003166  51F8               	movf	_pressao& (0+255),w,b
 13756  003168  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13757  00316A  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13758  00316C  0A80               	xorlw	128
 13759  00316E  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13760  003170  51F9               	movf	(_pressao+1)& (0+255),w,b
 13761  003172  0A80               	xorlw	128
 13762  003174  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13763  003176  A0D8               	btfss	status,0,c
 13764  003178  D006               	goto	l484
 13765                           
 13766                           ; BSR set to: 0
 13767                           ;controle.h: 47: partidaBombaEstacionaria(1);
 13768  00317A  0E01               	movlw	1
 13769  00317C  EC4B  F01C         	call	_partidaBombaEstacionaria
 13770                           
 13771                           ;controle.h: 48: ocorrendoIncendio = 1;
 13772  003180  0E01               	movlw	1
 13773  003182  0100               	movlb	0	; () banked
 13774  003184  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
 13775  003186                     l484:
 13776  003186  FFFF               	dw	65535	; assembler added errata NOP
 13777                           
 13778                           ; BSR set to: 0
 13779                           ;controle.h: 49: }
 13780                           ;controle.h: 51: if (ocorrendoIncendio) {
 13781                           
 13782                           ; BSR set to: 0
 13783  003188  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13784  00318A  B4D8               	btfsc	status,2,c
 13785  00318C  D008               	goto	l485
 13786                           
 13787                           ; BSR set to: 0
 13788                           ;controle.h: 52: gsmOcupado = 1;
 13789  00318E  0E01               	movlw	1
 13790  003190  6FF4               	movwf	_gsmOcupado& (0+255),b
 13791                           
 13792                           ; BSR set to: 0
 13793                           ;controle.h: 53: enviaSMS(1);
 13794  003192  0E01               	movlw	1
 13795  003194  ECDD  F00A         	call	_enviaSMS
 13796                           
 13797                           ;controle.h: 54: shift[1] = 1;
 13798  003198  0E01               	movlw	1
 13799  00319A                     L32:
 13800  00319A  FFFF               	dw	65535	; assembler added errata NOP
 13801  00319C  6E45               	movwf	_shift+1,c
 13802  00319E                     l485:
 13803  00319E  FFFF               	dw	65535	; assembler added errata NOP
 13804  0031A0  0012               	return		;funcret
 13805  0031A2  FFFF               	dw	65535	; errata NOP
 13806  0031A4                     __end_of_acaoBombas:
 13807                           	opt stack 0
 13808                           tblptru	equ	0xFF8
 13809                           tblptrh	equ	0xFF7
 13810                           tblptrl	equ	0xFF6
 13811                           tablat	equ	0xFF5
 13812                           prodh	equ	0xFF4
 13813                           prodl	equ	0xFF3
 13814                           intcon	equ	0xFF2
 13815                           postinc0	equ	0xFEE
 13816                           wreg	equ	0xFE8
 13817                           postdec1	equ	0xFE5
 13818                           fsr1l	equ	0xFE1
 13819                           indf2	equ	0xFDF
 13820                           postinc2	equ	0xFDE
 13821                           fsr2h	equ	0xFDA
 13822                           fsr2l	equ	0xFD9
 13823                           status	equ	0xFD8
 13824                           
 13825 ;; *************** function _partidaBombaEstacionaria *****************
 13826 ;; Defined at:
 13827 ;;		line 58 in file "controle.h"
 13828 ;; Parameters:    Size  Location     Type
 13829 ;;  acao            1    wreg     unsigned char 
 13830 ;; Auto vars:     Size  Location     Type
 13831 ;;  acao            1    3[BANK0 ] unsigned char 
 13832 ;; Return value:  Size  Location     Type
 13833 ;;                  1    wreg      void 
 13834 ;; Registers used:
 13835 ;;		wreg, status,2, status,0, cstack
 13836 ;; Tracked objects:
 13837 ;;		On entry : 0/0
 13838 ;;		On exit  : 0/0
 13839 ;;		Unchanged: 0/0
 13840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13841 ;;      Params:         0       0       0       0       0       0       0
 13842 ;;      Locals:         0       1       0       0       0       0       0
 13843 ;;      Temps:          0       0       0       0       0       0       0
 13844 ;;      Totals:         0       1       0       0       0       0       0
 13845 ;;Total ram usage:        1 bytes
 13846 ;; Hardware stack levels used:    1
 13847 ;; Hardware stack levels required when called:    7
 13848 ;; This function calls:
 13849 ;;		_delay
 13850 ;; This function is called by:
 13851 ;;		_acaoBombas
 13852 ;;		_acaoTesteBombas
 13853 ;; This function uses a non-reentrant model
 13854 ;;
 13855                           
 13856                           	psect	text44
 13857  003896                     __ptext44:
 13858                           	opt stack 0
 13859  003896                     _partidaBombaEstacionaria:
 13860                           	opt stack 0
 13861  003896  FFFF               	dw	65535	; assembler added errata NOP
 13862                           
 13863                           ;incstack = 0
 13864                           ;partidaBombaEstacionaria@acao stored from wreg
 13865  003898  0100               	movlb	0	; () banked
 13866  00389A  6F83               	movwf	partidaBombaEstacionaria@acao& (0+255),b
 13867                           
 13868                           ;controle.h: 59: if (acao == 1 && !flagEstacionariaLigada) {
 13869  00389C  0100               	movlb	0	; () banked
 13870  00389E  0583               	decf	partidaBombaEstacionaria@acao& (0+255),w,b
 13871  0038A0  A4D8               	btfss	status,2,c
 13872  0038A2  D01A               	goto	l490
 13873                           
 13874                           ; BSR set to: 0
 13875  0038A4  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 13876  0038A6  A4D8               	btfss	status,2,c
 13877  0038A8  D017               	goto	l490
 13878                           
 13879                           ; BSR set to: 0
 13880                           ;controle.h: 60: if (_sec_partida != _sec) {
 13881  0038AA  51EE               	movf	__sec& (0+255),w,b
 13882  0038AC  1870               	xorwf	__sec_partida,w,c
 13883  0038AE  B4D8               	btfsc	status,2,c
 13884  0038B0  D013               	goto	l490
 13885                           
 13886                           ; BSR set to: 0
 13887                           ;controle.h: 61: _sec_partida = _sec;
 13888  0038B2  C0EE  F070         	movff	__sec,__sec_partida
 13889                           
 13890                           ; BSR set to: 0
 13891                           ;controle.h: 62: tempo_limite_partida++;
 13892  0038B6  2A6C               	incf	_tempo_limite_partida,f,c
 13893                           
 13894                           ;controle.h: 63: tempo_partida++;
 13895  0038B8  2A6D               	incf	_tempo_partida,f,c
 13896                           
 13897                           ; BSR set to: 0
 13898                           ;controle.h: 64: if (!PORTAbits.RA5) {
 13899  0038BA  BA80               	btfsc	3968,5,c	;volatile
 13900  0038BC  D00D               	goto	l490
 13901                           
 13902                           ; BSR set to: 0
 13903                           ;controle.h: 65: delay(700);
 13904  0038BE  0E02               	movlw	2
 13905  0038C0  6F81               	movwf	(delay@x+1)& (0+255),b
 13906  0038C2  0EBC               	movlw	188
 13907  0038C4  6F80               	movwf	delay@x& (0+255),b
 13908  0038C6  ECC5  F037         	call	_delay	;wreg free
 13909                           
 13910                           ;controle.h: 66: flagEstacionariaLigada = 1;
 13911  0038CA  0E01               	movlw	1
 13912  0038CC  0100               	movlb	0	; () banked
 13913  0038CE  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 13914                           
 13915                           ; BSR set to: 0
 13916                           ;controle.h: 67: tempo_partida = 0;
 13917  0038D0  0E00               	movlw	0
 13918  0038D2  6E6D               	movwf	_tempo_partida,c
 13919                           
 13920                           ; BSR set to: 0
 13921                           ;controle.h: 68: shift[4] = 0;
 13922  0038D4  0E00               	movlw	0
 13923  0038D6  6E48               	movwf	_shift+4,c
 13924  0038D8                     l490:
 13925  0038D8  FFFF               	dw	65535	; assembler added errata NOP
 13926                           
 13927                           ; BSR set to: 0
 13928                           ;controle.h: 69: }
 13929                           ;controle.h: 70: }
 13930                           ;controle.h: 71: }
 13931                           ;controle.h: 72: if (!flagEstacionariaLigada && status_estacionaria == 1) {
 13932                           
 13933                           ; BSR set to: 0
 13934                           
 13935                           ; BSR set to: 0
 13936                           
 13937                           ; BSR set to: 0
 13938  0038DA  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 13939  0038DC  A4D8               	btfss	status,2,c
 13940  0038DE  D015               	goto	l495
 13941                           
 13942                           ; BSR set to: 0
 13943  0038E0  05FB               	decf	_status_estacionaria& (0+255),w,b
 13944  0038E2  A4D8               	btfss	status,2,c
 13945  0038E4  D012               	goto	l495
 13946                           
 13947                           ; BSR set to: 0
 13948                           ;controle.h: 73: shift[3] = 1;
 13949  0038E6  0E01               	movlw	1
 13950  0038E8  6E47               	movwf	_shift+3,c
 13951                           
 13952                           ; BSR set to: 0
 13953                           ;controle.h: 74: if (tempo_partida <= 7) {
 13954  0038EA  0E08               	movlw	8
 13955  0038EC  606D               	cpfslt	_tempo_partida,c
 13956  0038EE  D002               	goto	l492
 13957                           
 13958                           ; BSR set to: 0
 13959                           ;controle.h: 75: shift[4] = 1;
 13960  0038F0  0E01               	movlw	1
 13961  0038F2  D005               	goto	L34
 13962  0038F4                     l492:
 13963  0038F4  FFFF               	dw	65535	; assembler added errata NOP
 13964                           
 13965                           ; BSR set to: 0
 13966                           
 13967                           ; BSR set to: 0
 13968  0038F6  0E10               	movlw	16
 13969  0038F8  606D               	cpfslt	_tempo_partida,c
 13970  0038FA  D004               	goto	l494
 13971                           
 13972                           ; BSR set to: 0
 13973                           ;controle.h: 77: shift[4] = 0;
 13974  0038FC  0E00               	movlw	0
 13975  0038FE                     L34:
 13976  0038FE  FFFF               	dw	65535	; assembler added errata NOP
 13977  003900  6E48               	movwf	_shift+4,c
 13978                           
 13979                           ;controle.h: 78: } else {
 13980  003902  D003               	goto	l495
 13981  003904                     l494:
 13982  003904  FFFF               	dw	65535	; assembler added errata NOP
 13983                           
 13984                           ; BSR set to: 0
 13985                           ;controle.h: 79: tempo_partida = 0;
 13986                           
 13987                           ; BSR set to: 0
 13988  003906  0E00               	movlw	0
 13989  003908  6E6D               	movwf	_tempo_partida,c
 13990  00390A                     l495:
 13991  00390A  FFFF               	dw	65535	; assembler added errata NOP
 13992                           
 13993                           ; BSR set to: 0
 13994                           ;controle.h: 80: }
 13995                           ;controle.h: 81: }
 13996                           ;controle.h: 82: if (tempo_limite_partida > tempo_limite_estacionaria) {
 13997                           
 13998                           ; BSR set to: 0
 13999                           
 14000                           ; BSR set to: 0
 14001                           
 14002                           ; BSR set to: 0
 14003  00390C  506C               	movf	_tempo_limite_partida,w,c
 14004  00390E  5DE5               	subwf	_tempo_limite_estacionaria& (0+255),w,b
 14005  003910  B0D8               	btfsc	status,0,c
 14006  003912  D00A               	goto	l496
 14007                           
 14008                           ; BSR set to: 0
 14009                           ;controle.h: 83: tempo_limite_partida = 0;
 14010  003914  0E00               	movlw	0
 14011  003916  6E6C               	movwf	_tempo_limite_partida,c
 14012                           
 14013                           ;controle.h: 84: status_estacionaria = 0;
 14014  003918  0E00               	movlw	0
 14015  00391A  6FFB               	movwf	_status_estacionaria& (0+255),b
 14016                           
 14017                           ;controle.h: 85: flagEstacionariaLigada = 0;
 14018  00391C  0E00               	movlw	0
 14019  00391E  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14020                           
 14021                           ;controle.h: 86: shift[3] = 0;
 14022  003920  0E00               	movlw	0
 14023  003922  6E47               	movwf	_shift+3,c
 14024                           
 14025                           ;controle.h: 87: shift[4] = 0;
 14026  003924  0E00               	movlw	0
 14027  003926  6E48               	movwf	_shift+4,c
 14028  003928                     l496:
 14029  003928  FFFF               	dw	65535	; assembler added errata NOP
 14030                           
 14031                           ; BSR set to: 0
 14032                           ;controle.h: 88: }
 14033                           ;controle.h: 91: if (acao == 0) {
 14034  00392A  5183               	movf	partidaBombaEstacionaria@acao& (0+255),w,b
 14035  00392C  A4D8               	btfss	status,2,c
 14036  00392E  D00A               	goto	l497
 14037                           
 14038                           ; BSR set to: 0
 14039                           ;controle.h: 92: flagEstacionariaLigada = 0;
 14040  003930  0E00               	movlw	0
 14041  003932  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14042                           
 14043                           ;controle.h: 93: shift[4] = 0;
 14044  003934  0E00               	movlw	0
 14045  003936  6E48               	movwf	_shift+4,c
 14046                           
 14047                           ;controle.h: 94: shift[3] = 0;
 14048  003938  0E00               	movlw	0
 14049  00393A  6E47               	movwf	_shift+3,c
 14050                           
 14051                           ;controle.h: 95: tempo_partida = 0;
 14052  00393C  0E00               	movlw	0
 14053  00393E  6E6D               	movwf	_tempo_partida,c
 14054                           
 14055                           ;controle.h: 96: tempo_limite_partida = 0;
 14056  003940  0E00               	movlw	0
 14057  003942  6E6C               	movwf	_tempo_limite_partida,c
 14058  003944                     l497:
 14059  003944  FFFF               	dw	65535	; assembler added errata NOP
 14060                           
 14061                           ; BSR set to: 0
 14062                           ;controle.h: 97: }
 14063                           ;controle.h: 99: if (status_estacionaria == 0) {
 14064  003946  51FB               	movf	_status_estacionaria& (0+255),w,b
 14065  003948  A4D8               	btfss	status,2,c
 14066  00394A  D006               	goto	l498
 14067                           
 14068                           ; BSR set to: 0
 14069                           ;controle.h: 100: shift[3] = 0;
 14070  00394C  0E00               	movlw	0
 14071  00394E  6E47               	movwf	_shift+3,c
 14072                           
 14073                           ;controle.h: 101: shift[4] = 0;
 14074  003950  0E00               	movlw	0
 14075  003952  6E48               	movwf	_shift+4,c
 14076                           
 14077                           ;controle.h: 102: tempo_partida = 0;
 14078  003954  0E00               	movlw	0
 14079  003956  6E6D               	movwf	_tempo_partida,c
 14080  003958                     l498:
 14081  003958  FFFF               	dw	65535	; assembler added errata NOP
 14082                           
 14083                           ; BSR set to: 0
 14084                           ;controle.h: 103: }
 14085                           ;controle.h: 104: if (flagEstacionariaLigada) {
 14086  00395A  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 14087  00395C  B4D8               	btfsc	status,2,c
 14088  00395E  D00A               	goto	l501
 14089                           
 14090                           ; BSR set to: 0
 14091                           ;controle.h: 105: if (!PORTAbits.RA5) {
 14092  003960  BA80               	btfsc	3968,5,c	;volatile
 14093  003962  D005               	goto	l500
 14094                           
 14095                           ; BSR set to: 0
 14096                           ;controle.h: 106: shift[4] = 0;
 14097  003964  0E00               	movlw	0
 14098  003966  6E48               	movwf	_shift+4,c
 14099                           
 14100                           ;controle.h: 107: tempo_limite_partida = 0;
 14101  003968  0E00               	movlw	0
 14102  00396A  6E6C               	movwf	_tempo_limite_partida,c
 14103                           
 14104                           ;controle.h: 108: } else {
 14105  00396C  D003               	goto	l501
 14106  00396E                     l500:
 14107  00396E  FFFF               	dw	65535	; assembler added errata NOP
 14108                           
 14109                           ; BSR set to: 0
 14110                           ;controle.h: 109: flagEstacionariaLigada = 0;
 14111                           
 14112                           ; BSR set to: 0
 14113  003970  0E00               	movlw	0
 14114  003972  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14115  003974                     l501:
 14116  003974  FFFF               	dw	65535	; assembler added errata NOP
 14117                           
 14118                           ; BSR set to: 0
 14119                           
 14120                           ; BSR set to: 0
 14121                           
 14122                           ; BSR set to: 0
 14123  003976  0012               	return		;funcret
 14124  003978  FFFF               	dw	65535	; errata NOP
 14125  00397A                     __end_of_partidaBombaEstacionaria:
 14126                           	opt stack 0
 14127                           tblptru	equ	0xFF8
 14128                           tblptrh	equ	0xFF7
 14129                           tblptrl	equ	0xFF6
 14130                           tablat	equ	0xFF5
 14131                           prodh	equ	0xFF4
 14132                           prodl	equ	0xFF3
 14133                           intcon	equ	0xFF2
 14134                           postinc0	equ	0xFEE
 14135                           wreg	equ	0xFE8
 14136                           postdec1	equ	0xFE5
 14137                           fsr1l	equ	0xFE1
 14138                           indf2	equ	0xFDF
 14139                           postinc2	equ	0xFDE
 14140                           fsr2h	equ	0xFDA
 14141                           fsr2l	equ	0xFD9
 14142                           status	equ	0xFD8
 14143                           
 14144 ;; *************** function _enviaSMS *****************
 14145 ;; Defined at:
 14146 ;;		line 124 in file "comunicacao.h"
 14147 ;; Parameters:    Size  Location     Type
 14148 ;;  tipo            1    wreg     unsigned char 
 14149 ;; Auto vars:     Size  Location     Type
 14150 ;;  tipo            1   71[BANK0 ] unsigned char 
 14151 ;; Return value:  Size  Location     Type
 14152 ;;                  1    wreg      void 
 14153 ;; Registers used:
 14154 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14155 ;; Tracked objects:
 14156 ;;		On entry : 0/0
 14157 ;;		On exit  : 0/0
 14158 ;;		Unchanged: 0/0
 14159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14160 ;;      Params:         0       0       0       0       0       0       0
 14161 ;;      Locals:         0      11       0       0       0       0       0
 14162 ;;      Temps:          0       2       0       0       0       0       0
 14163 ;;      Totals:         0      13       0       0       0       0       0
 14164 ;;Total ram usage:       13 bytes
 14165 ;; Hardware stack levels used:    1
 14166 ;; Hardware stack levels required when called:    9
 14167 ;; This function calls:
 14168 ;;		_aguardaBuffer
 14169 ;;		_delay
 14170 ;;		_limparBuffer
 14171 ;;		_printf
 14172 ;;		_writeChar
 14173 ;; This function is called by:
 14174 ;;		_acaoBombas
 14175 ;;		_acaoTesteBombas
 14176 ;; This function uses a non-reentrant model
 14177 ;;
 14178                           
 14179                           	psect	text45
 14180  0015BA                     __ptext45:
 14181                           	opt stack 0
 14182  0015BA                     _enviaSMS:
 14183                           	opt stack 0
 14184  0015BA  FFFF               	dw	65535	; assembler added errata NOP
 14185                           
 14186                           ; BSR set to: 0
 14187                           ;incstack = 0
 14188                           ;enviaSMS@tipo stored from wreg
 14189  0015BC  0100               	movlb	0	; () banked
 14190  0015BE  6FC7               	movwf	enviaSMS@tipo& (0+255),b
 14191                           
 14192                           ;comunicacao.h: 125: if (timerReenvioSMS) return;
 14193  0015C0  0100               	movlb	0	; () banked
 14194  0015C2  51F6               	movf	_timerReenvioSMS& (0+255),w,b
 14195  0015C4  A4D8               	btfss	status,2,c
 14196  0015C6  D19C               	goto	l352
 14197  0015C8  D17B               	goto	l350
 14198  0015CA  FFFF               	dw	65535	; assembler added errata NOP
 14199                           
 14200                           ; BSR set to: 0
 14201                           ;comunicacao.h: 129: limparBuffer();
 14202                           
 14203                           ; BSR set to: 0
 14204  0015CC  ECE0  F037         	call	_limparBuffer	;wreg free
 14205                           
 14206                           ;comunicacao.h: 130: printf("AT\r\n");
 14207  0015D0  0EDE               	movlw	low STR_4
 14208  0015D2  0100               	movlb	0	; () banked
 14209  0015D4  6FA1               	movwf	printf@f& (0+255),b
 14210  0015D6  0E7F               	movlw	high STR_4
 14211  0015D8  6FA2               	movwf	(printf@f+1)& (0+255),b
 14212  0015DA  ECC4  F038         	call	_printf	;wreg free
 14213                           
 14214                           ;comunicacao.h: 131: etapaComunicacao++;
 14215  0015DE  4A51               	infsnz	_etapaComunicacao,f,c
 14216  0015E0  2A52               	incf	_etapaComunicacao+1,f,c
 14217                           
 14218                           ;comunicacao.h: 132: timerEtapaComunicacao = 6;
 14219  0015E2  0E06               	movlw	6
 14220  0015E4  0100               	movlb	0	; () banked
 14221  0015E6  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14222                           
 14223                           ;comunicacao.h: 133: break;
 14224  0015E8  D18B               	goto	l352
 14225  0015EA  FFFF               	dw	65535	; assembler added errata NOP
 14226                           
 14227                           ; BSR set to: 0
 14228                           ;comunicacao.h: 135: if (aguardaBuffer("OK")) {
 14229                           
 14230                           ; BSR set to: 0
 14231  0015EC  0EFA               	movlw	low STR_5
 14232  0015EE  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14233  0015F0  0E7F               	movlw	high STR_5
 14234  0015F2  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14235  0015F4  ECA6  F038         	call	_aguardaBuffer	;wreg free
 14236  0015F8  0900               	iorlw	0
 14237  0015FA  B4D8               	btfsc	status,2,c
 14238  0015FC  D00E               	goto	l354
 14239                           
 14240                           ;comunicacao.h: 136: limparBuffer();
 14241  0015FE  ECE0  F037         	call	_limparBuffer	;wreg free
 14242                           
 14243                           ;comunicacao.h: 137: printf("AT+CMGF=1\r\n");
 14244  001602  0ED9               	movlw	low STR_10
 14245  001604  0100               	movlb	0	; () banked
 14246  001606  6FA1               	movwf	printf@f& (0+255),b
 14247  001608  0E7E               	movlw	high STR_10
 14248  00160A  6FA2               	movwf	(printf@f+1)& (0+255),b
 14249  00160C  ECC4  F038         	call	_printf	;wreg free
 14250                           
 14251                           ;comunicacao.h: 138: etapaComunicacao++;
 14252  001610  4A51               	infsnz	_etapaComunicacao,f,c
 14253  001612  2A52               	incf	_etapaComunicacao+1,f,c
 14254                           
 14255                           ;comunicacao.h: 139: timerEtapaComunicacao = 6;
 14256  001614  0E06               	movlw	6
 14257  001616  0100               	movlb	0	; () banked
 14258  001618  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14259  00161A                     l354:
 14260  00161A  FFFF               	dw	65535	; assembler added errata NOP
 14261                           
 14262                           ;comunicacao.h: 140: }
 14263                           ;comunicacao.h: 141: if (!timerEtapaComunicacao) {
 14264                           
 14265                           ; BSR set to: 0
 14266  00161C  0100               	movlb	0	; () banked
 14267  00161E  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14268  001620  A4D8               	btfss	status,2,c
 14269  001622  D16E               	goto	l352
 14270                           
 14271                           ; BSR set to: 0
 14272                           ;comunicacao.h: 142: writeChar(0x1A);
 14273  001624  0E1A               	movlw	26
 14274  001626  6F80               	movwf	writeChar@hex& (0+255),b
 14275  001628  0E00               	movlw	0
 14276  00162A  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 14277  00162C  EC86  F036         	call	_writeChar	;wreg free
 14278                           
 14279                           ;comunicacao.h: 143: delay(15);
 14280  001630  0E00               	movlw	0
 14281  001632  0100               	movlb	0	; () banked
 14282  001634  6F81               	movwf	(delay@x+1)& (0+255),b
 14283  001636  0E0F               	movlw	15
 14284  001638  6F80               	movwf	delay@x& (0+255),b
 14285  00163A  ECC5  F037         	call	_delay	;wreg free
 14286                           
 14287                           ;comunicacao.h: 144: printf("ATH0\r\n");
 14288  00163E  0EAA               	movlw	low STR_21
 14289  001640  0100               	movlb	0	; () banked
 14290  001642  6FA1               	movwf	printf@f& (0+255),b
 14291  001644  0E7F               	movlw	high STR_21
 14292  001646  6FA2               	movwf	(printf@f+1)& (0+255),b
 14293  001648  ECC4  F038         	call	_printf	;wreg free
 14294  00164C  D133               	goto	l398
 14295  00164E  FFFF               	dw	65535	; assembler added errata NOP
 14296                           
 14297                           ;comunicacao.h: 149: if (aguardaBuffer("OK")) {
 14298  001650  0EFA               	movlw	low STR_5
 14299  001652  0100               	movlb	0	; () banked
 14300  001654  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14301  001656  0E7F               	movlw	high STR_5
 14302  001658  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14303  00165A  ECA6  F038         	call	_aguardaBuffer	;wreg free
 14304  00165E  0900               	iorlw	0
 14305  001660  B4D8               	btfsc	status,2,c
 14306  001662  D0B2               	goto	l364
 14307                           
 14308                           ;comunicacao.h: 150: limparBuffer();
 14309  001664  ECE0  F037         	call	_limparBuffer	;wreg free
 14310                           
 14311                           ;comunicacao.h: 151: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : t
      +                          el2);
 14312  001668  0100               	movlb	0	; () banked
 14313  00166A  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14314  00166C  B4D8               	btfsc	status,2,c
 14315  00166E  D004               	goto	l359
 14316                           
 14317                           ; BSR set to: 0
 14318  001670  0EA4               	movlw	low _tel2
 14319  001672  6FBD               	movwf	_enviaSMS$1208& (0+255),b
 14320  001674  0E01               	movlw	high _tel2
 14321  001676  D004               	goto	L37
 14322  001678                     l359:
 14323  001678  FFFF               	dw	65535	; assembler added errata NOP
 14324                           
 14325                           ; BSR set to: 0
 14326                           
 14327                           ; BSR set to: 0
 14328  00167A  0EB0               	movlw	low _tel1
 14329  00167C  6FBD               	movwf	_enviaSMS$1208& (0+255),b
 14330  00167E  0E01               	movlw	high _tel1
 14331  001680                     L37:
 14332  001680  FFFF               	dw	65535	; assembler added errata NOP
 14333  001682  6FBE               	movwf	(_enviaSMS$1208+1)& (0+255),b
 14334                           
 14335                           ; BSR set to: 0
 14336                           
 14337                           ; BSR set to: 0
 14338  001684  0E5F               	movlw	low STR_12
 14339  001686  6FA1               	movwf	printf@f& (0+255),b
 14340  001688  0E7D               	movlw	high STR_12
 14341  00168A  6FA2               	movwf	(printf@f+1)& (0+255),b
 14342  00168C  C0BD  F0A3         	movff	_enviaSMS$1208,?_printf+2
 14343  001690  C0BE  F0A4         	movff	_enviaSMS$1208+1,?_printf+3
 14344  001694  ECC4  F038         	call	_printf	;wreg free
 14345                           
 14346                           ;comunicacao.h: 152: delay(120);
 14347  001698  0E00               	movlw	0
 14348  00169A  0100               	movlb	0	; () banked
 14349  00169C  6F81               	movwf	(delay@x+1)& (0+255),b
 14350  00169E  0E78               	movlw	120
 14351  0016A0  6F80               	movwf	delay@x& (0+255),b
 14352  0016A2  ECC5  F037         	call	_delay	;wreg free
 14353                           
 14354                           ;comunicacao.h: 153: timerEtapaComunicacao = 8;
 14355  0016A6  0E08               	movlw	8
 14356  0016A8  FFFF               	dw	65535	; assembler added errata NOP
 14357  0016AA  0100               	movlb	0	; () banked
 14358  0016AC  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14359                           
 14360                           ; BSR set to: 0
 14361                           ;comunicacao.h: 154: etapaComunicacao++;
 14362  0016AE  4A51               	infsnz	_etapaComunicacao,f,c
 14363  0016B0  2A52               	incf	_etapaComunicacao+1,f,c
 14364                           
 14365                           ; BSR set to: 0
 14366  0016B2  D08A               	goto	l364
 14367  0016B4  FFFF               	dw	65535	; assembler added errata NOP
 14368                           
 14369                           ; BSR set to: 0
 14370                           ;comunicacao.h: 162: if (aguardaBuffer(">")) {
 14371                           
 14372                           ; BSR set to: 0
 14373  0016B6  0EFD               	movlw	low STR_13
 14374  0016B8  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14375  0016BA  0E7F               	movlw	high STR_13
 14376  0016BC  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14377  0016BE  ECA6  F038         	call	_aguardaBuffer	;wreg free
 14378  0016C2  0900               	iorlw	0
 14379  0016C4  B4D8               	btfsc	status,2,c
 14380  0016C6  D080               	goto	l364
 14381                           
 14382                           ;comunicacao.h: 163: limparBuffer();
 14383  0016C8  ECE0  F037         	call	_limparBuffer	;wreg free
 14384                           
 14385                           ;comunicacao.h: 164: if (tipo == 1) {
 14386  0016CC  0100               	movlb	0	; () banked
 14387  0016CE  05C7               	decf	enviaSMS@tipo& (0+255),w,b
 14388  0016D0  A4D8               	btfss	status,2,c
 14389  0016D2  D018               	goto	l365
 14390                           
 14391                           ; BSR set to: 0
 14392                           ;comunicacao.h: 165: printf("DISPARO ALARME DE INCENDIO\r\nEM %02d:%02d:%02d %02d/%02d/%
      +                          02d\r\n", _hor, _min, _sec, _dia, _mes, _ano);
 14393  0016D4  0EBD               	movlw	low STR_25
 14394  0016D6  6FA1               	movwf	printf@f& (0+255),b
 14395  0016D8  0E7B               	movlw	high STR_25
 14396  0016DA  6FA2               	movwf	(printf@f+1)& (0+255),b
 14397  0016DC  C0EC  F0A3         	movff	__hor,?_printf+2
 14398  0016E0  6BA4               	clrf	(?_printf+3)& (0+255),b
 14399  0016E2  C0ED  F0A5         	movff	__min,?_printf+4
 14400  0016E6  6BA6               	clrf	(?_printf+5)& (0+255),b
 14401  0016E8  C0EE  F0A7         	movff	__sec,?_printf+6
 14402  0016EC  6BA8               	clrf	(?_printf+7)& (0+255),b
 14403  0016EE  C0EB  F0A9         	movff	__dia,?_printf+8
 14404  0016F2  6BAA               	clrf	(?_printf+9)& (0+255),b
 14405  0016F4  C0EA  F0AB         	movff	__mes,?_printf+10
 14406  0016F8  6BAC               	clrf	(?_printf+11)& (0+255),b
 14407  0016FA  C0E9  F0AD         	movff	__ano,?_printf+12
 14408  0016FE  6BAE               	clrf	(?_printf+13)& (0+255),b
 14409  001700  ECC4  F038         	call	_printf	;wreg free
 14410  001704                     l365:
 14411  001704  FFFF               	dw	65535	; assembler added errata NOP
 14412                           
 14413                           ;comunicacao.h: 166: }
 14414                           ;comunicacao.h: 167: if (tipo == 2) {
 14415  001706  0E02               	movlw	2
 14416  001708  0100               	movlb	0	; () banked
 14417  00170A  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 14418  00170C  A4D8               	btfss	status,2,c
 14419  00170E  D04B               	goto	l366
 14420                           
 14421                           ; BSR set to: 0
 14422                           ;comunicacao.h: 168: printf("TESTE DE BOMBAS REALIZADO\r\nEM %02d:%02d:%02d %02d/%02d/%0
      +                          2d\r\nJOCKEY: %s\r\nPRINCIPAL: %s\r\nCOMBUSTAO: %s\r\n",
 14423                           ;comunicacao.h: 169: _hor, _min, _sec, _dia, _mes, _ano, status_jockey == 1 ? "OK" : "FA
      +                          LHA", status_principal == 1 ? "OK" : "FALHA", status_estacionaria == 1 ? "OK" : "FALHA")
      +                          ;
 14424  001710  05FB               	decf	_status_estacionaria& (0+255),w,b
 14425  001712  B4D8               	btfsc	status,2,c
 14426  001714  D004               	goto	l368
 14427                           
 14428                           ; BSR set to: 0
 14429  001716  0ED2               	movlw	low STR_28
 14430  001718  6FBF               	movwf	_enviaSMS$1221& (0+255),b
 14431  00171A  0E7F               	movlw	high STR_28
 14432  00171C  D004               	goto	L35
 14433  00171E                     l368:
 14434  00171E  FFFF               	dw	65535	; assembler added errata NOP
 14435                           
 14436                           ; BSR set to: 0
 14437                           
 14438                           ; BSR set to: 0
 14439  001720  0EFA               	movlw	low STR_5
 14440  001722  6FBF               	movwf	_enviaSMS$1221& (0+255),b
 14441  001724  0E7F               	movlw	high STR_5
 14442  001726                     L35:
 14443  001726  FFFF               	dw	65535	; assembler added errata NOP
 14444  001728  6FC0               	movwf	(_enviaSMS$1221+1)& (0+255),b
 14445                           
 14446                           ; BSR set to: 0
 14447  00172A  05FC               	decf	_status_principal& (0+255),w,b
 14448  00172C  B4D8               	btfsc	status,2,c
 14449  00172E  D004               	goto	l372
 14450                           
 14451                           ; BSR set to: 0
 14452  001730  0ED2               	movlw	low STR_28
 14453  001732  6FC1               	movwf	_enviaSMS$1222& (0+255),b
 14454  001734  0E7F               	movlw	high STR_28
 14455  001736  D004               	goto	L36
 14456  001738                     l372:
 14457  001738  FFFF               	dw	65535	; assembler added errata NOP
 14458                           
 14459                           ; BSR set to: 0
 14460                           
 14461                           ; BSR set to: 0
 14462  00173A  0EFA               	movlw	low STR_5
 14463  00173C  6FC1               	movwf	_enviaSMS$1222& (0+255),b
 14464  00173E  0E7F               	movlw	high STR_5
 14465  001740                     L36:
 14466  001740  FFFF               	dw	65535	; assembler added errata NOP
 14467  001742  6FC2               	movwf	(_enviaSMS$1222+1)& (0+255),b
 14468                           
 14469                           ; BSR set to: 0
 14470  001744  05FD               	decf	_status_jockey& (0+255),w,b
 14471  001746  B4D8               	btfsc	status,2,c
 14472  001748  D004               	goto	l376
 14473                           
 14474                           ; BSR set to: 0
 14475  00174A  0ED2               	movlw	low STR_28
 14476  00174C  6FC3               	movwf	_enviaSMS$1223& (0+255),b
 14477  00174E  0E7F               	movlw	high STR_28
 14478  001750  D004               	goto	L38
 14479  001752                     l376:
 14480  001752  FFFF               	dw	65535	; assembler added errata NOP
 14481                           
 14482                           ; BSR set to: 0
 14483                           
 14484                           ; BSR set to: 0
 14485  001754  0EFA               	movlw	low STR_5
 14486  001756  6FC3               	movwf	_enviaSMS$1223& (0+255),b
 14487  001758  0E7F               	movlw	high STR_5
 14488  00175A                     L38:
 14489  00175A  FFFF               	dw	65535	; assembler added errata NOP
 14490  00175C  6FC4               	movwf	(_enviaSMS$1223+1)& (0+255),b
 14491                           
 14492                           ; BSR set to: 0
 14493                           
 14494                           ; BSR set to: 0
 14495  00175E  0E55               	movlw	low STR_26
 14496  001760  6FA1               	movwf	printf@f& (0+255),b
 14497  001762  0E7B               	movlw	high STR_26
 14498  001764  6FA2               	movwf	(printf@f+1)& (0+255),b
 14499  001766  C0EC  F0A3         	movff	__hor,?_printf+2
 14500  00176A  6BA4               	clrf	(?_printf+3)& (0+255),b
 14501  00176C  C0ED  F0A5         	movff	__min,?_printf+4
 14502  001770  6BA6               	clrf	(?_printf+5)& (0+255),b
 14503  001772  C0EE  F0A7         	movff	__sec,?_printf+6
 14504  001776  6BA8               	clrf	(?_printf+7)& (0+255),b
 14505  001778  C0EB  F0A9         	movff	__dia,?_printf+8
 14506  00177C  6BAA               	clrf	(?_printf+9)& (0+255),b
 14507  00177E  C0EA  F0AB         	movff	__mes,?_printf+10
 14508  001782  6BAC               	clrf	(?_printf+11)& (0+255),b
 14509  001784  C0E9  F0AD         	movff	__ano,?_printf+12
 14510  001788  6BAE               	clrf	(?_printf+13)& (0+255),b
 14511  00178A  C0C3  F0AF         	movff	_enviaSMS$1223,?_printf+14
 14512  00178E  C0C4  F0B0         	movff	_enviaSMS$1223+1,?_printf+15
 14513  001792  C0C1  F0B1         	movff	_enviaSMS$1222,?_printf+16
 14514  001796  C0C2  F0B2         	movff	_enviaSMS$1222+1,?_printf+17
 14515  00179A  C0BF  F0B3         	movff	_enviaSMS$1221,?_printf+18
 14516  00179E  C0C0  F0B4         	movff	_enviaSMS$1221+1,?_printf+19
 14517  0017A2  ECC4  F038         	call	_printf	;wreg free
 14518  0017A6                     l366:
 14519  0017A6  FFFF               	dw	65535	; assembler added errata NOP
 14520                           
 14521                           ;comunicacao.h: 170: }
 14522                           ;comunicacao.h: 171: delay(150);
 14523  0017A8  0E00               	movlw	0
 14524  0017AA  0100               	movlb	0	; () banked
 14525  0017AC  6F81               	movwf	(delay@x+1)& (0+255),b
 14526  0017AE  0E96               	movlw	150
 14527  0017B0  6F80               	movwf	delay@x& (0+255),b
 14528  0017B2  ECC5  F037         	call	_delay	;wreg free
 14529                           
 14530                           ;comunicacao.h: 172: writeChar(0x1A);
 14531  0017B6  0E1A               	movlw	26
 14532  0017B8  0100               	movlb	0	; () banked
 14533  0017BA  6F80               	movwf	writeChar@hex& (0+255),b
 14534  0017BC  0E00               	movlw	0
 14535  0017BE  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 14536  0017C0  EC86  F036         	call	_writeChar	;wreg free
 14537                           
 14538                           ;comunicacao.h: 173: timerEtapaComunicacao = 30;
 14539  0017C4  0E1E               	movlw	30
 14540  0017C6  D770               	goto	L40
 14541  0017C8                     l364:
 14542  0017C8  FFFF               	dw	65535	; assembler added errata NOP
 14543                           
 14544                           ;comunicacao.h: 175: }
 14545                           ;comunicacao.h: 176: if (!timerEtapaComunicacao) {
 14546                           
 14547                           ; BSR set to: 0
 14548  0017CA  0100               	movlb	0	; () banked
 14549  0017CC  FFFF               	dw	65535	; assembler added errata NOP
 14550  0017CE  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14551  0017D0  A4D8               	btfss	status,2,c
 14552  0017D2  D096               	goto	l352
 14553  0017D4  D06F               	goto	l398
 14554  0017D6  FFFF               	dw	65535	; assembler added errata NOP
 14555                           
 14556                           ; BSR set to: 0
 14557                           ;comunicacao.h: 181: if (aguardaBuffer("OK") || aguardaBuffer("ERROR")) {
 14558                           
 14559                           ; BSR set to: 0
 14560  0017D8  0EFA               	movlw	low STR_5
 14561  0017DA  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14562  0017DC  0E7F               	movlw	high STR_5
 14563  0017DE  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14564  0017E0  ECA6  F038         	call	_aguardaBuffer	;wreg free
 14565  0017E4  0900               	iorlw	0
 14566  0017E6  A4D8               	btfss	status,2,c
 14567  0017E8  D00A               	goto	u5990
 14568  0017EA  0ED8               	movlw	low STR_17
 14569  0017EC  0100               	movlb	0	; () banked
 14570  0017EE  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14571  0017F0  0E7F               	movlw	high STR_17
 14572  0017F2  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14573  0017F4  ECA6  F038         	call	_aguardaBuffer	;wreg free
 14574  0017F8  0900               	iorlw	0
 14575  0017FA  B4D8               	btfsc	status,2,c
 14576  0017FC  D081               	goto	l352
 14577  0017FE                     u5990:
 14578  0017FE  FFFF               	dw	65535	; assembler added errata NOP
 14579                           
 14580                           ;comunicacao.h: 182: if (tipo == 2) {
 14581  001800  0E02               	movlw	2
 14582  001802  0100               	movlb	0	; () banked
 14583  001804  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 14584  001806  A4D8               	btfss	status,2,c
 14585  001808  D00E               	goto	l384
 14586                           
 14587                           ; BSR set to: 0
 14588                           ;comunicacao.h: 183: if (telefoneSelecionado == 0) {
 14589  00180A  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14590  00180C  A4D8               	btfss	status,2,c
 14591  00180E  D003               	goto	l385
 14592                           
 14593                           ; BSR set to: 0
 14594                           ;comunicacao.h: 184: telefoneSelecionado = 1;
 14595  001810  0E01               	movlw	1
 14596  001812  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14597                           
 14598                           ;comunicacao.h: 185: } else {
 14599  001814  D7DB               	goto	L42
 14600  001816                     l385:
 14601  001816  FFFF               	dw	65535	; assembler added errata NOP
 14602                           
 14603                           ; BSR set to: 0
 14604                           ;comunicacao.h: 186: telefoneSelecionado = 0;
 14605                           
 14606                           ; BSR set to: 0
 14607  001818  0E00               	movlw	0
 14608  00181A  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14609                           
 14610                           ;comunicacao.h: 187: gsmOcupado = 0;
 14611  00181C  0E00               	movlw	0
 14612  00181E  6FF4               	movwf	_gsmOcupado& (0+255),b
 14613                           
 14614                           ;comunicacao.h: 188: menu_posi = 0;
 14615  001820  0E00               	movlw	0
 14616  001822  6FDE               	movwf	_menu_posi& (0+255),b
 14617                           
 14618                           ; BSR set to: 0
 14619                           ;comunicacao.h: 189: }
 14620                           ;comunicacao.h: 190: } else {
 14621  001824  D7D3               	goto	L42
 14622  001826                     l384:
 14623  001826  FFFF               	dw	65535	; assembler added errata NOP
 14624                           
 14625                           ; BSR set to: 0
 14626                           ;comunicacao.h: 191: etapaComunicacao++;
 14627                           
 14628                           ; BSR set to: 0
 14629  001828  4A51               	infsnz	_etapaComunicacao,f,c
 14630  00182A  2A52               	incf	_etapaComunicacao+1,f,c
 14631                           
 14632                           ; BSR set to: 0
 14633  00182C  D7CF               	goto	L42
 14634  00182E  FFFF               	dw	65535	; assembler added errata NOP
 14635                           
 14636                           ; BSR set to: 0
 14637                           ;comunicacao.h: 199: limparBuffer();
 14638                           
 14639                           ; BSR set to: 0
 14640  001830  ECE0  F037         	call	_limparBuffer	;wreg free
 14641                           
 14642                           ;comunicacao.h: 200: printf("ATD 0%s;\r\n", telefoneSelecionado == 0 ? tel1 : tel2);
 14643  001834  0100               	movlb	0	; () banked
 14644  001836  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14645  001838  B4D8               	btfsc	status,2,c
 14646  00183A  D004               	goto	l391
 14647                           
 14648                           ; BSR set to: 0
 14649  00183C  0EA4               	movlw	low _tel2
 14650  00183E  6FC5               	movwf	_enviaSMS$1228& (0+255),b
 14651  001840  0E01               	movlw	high _tel2
 14652  001842  D004               	goto	L39
 14653  001844                     l391:
 14654  001844  FFFF               	dw	65535	; assembler added errata NOP
 14655                           
 14656                           ; BSR set to: 0
 14657                           
 14658                           ; BSR set to: 0
 14659  001846  0EB0               	movlw	low _tel1
 14660  001848  6FC5               	movwf	_enviaSMS$1228& (0+255),b
 14661  00184A  0E01               	movlw	high _tel1
 14662  00184C                     L39:
 14663  00184C  FFFF               	dw	65535	; assembler added errata NOP
 14664  00184E  6FC6               	movwf	(_enviaSMS$1228+1)& (0+255),b
 14665                           
 14666                           ; BSR set to: 0
 14667                           
 14668                           ; BSR set to: 0
 14669  001850  0E15               	movlw	low STR_35
 14670  001852  6FA1               	movwf	printf@f& (0+255),b
 14671  001854  0E7F               	movlw	high STR_35
 14672  001856  6FA2               	movwf	(printf@f+1)& (0+255),b
 14673  001858  C0C5  F0A3         	movff	_enviaSMS$1228,?_printf+2
 14674  00185C  C0C6  F0A4         	movff	_enviaSMS$1228+1,?_printf+3
 14675  001860  ECC4  F038         	call	_printf	;wreg free
 14676                           
 14677                           ;comunicacao.h: 201: timerEtapaComunicacao = 30;
 14678  001864  0E1E               	movlw	30
 14679  001866  0100               	movlb	0	; () banked
 14680  001868  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14681                           
 14682                           ; BSR set to: 0
 14683                           ;comunicacao.h: 202: etapaComunicacao++;
 14684  00186A  4A51               	infsnz	_etapaComunicacao,f,c
 14685  00186C  2A52               	incf	_etapaComunicacao+1,f,c
 14686                           
 14687                           ;comunicacao.h: 203: break;
 14688  00186E  D048               	goto	l352
 14689  001870  FFFF               	dw	65535	; assembler added errata NOP
 14690                           
 14691                           ; BSR set to: 0
 14692                           ;comunicacao.h: 205: if (!timerEtapaComunicacao) {
 14693                           
 14694                           ; BSR set to: 0
 14695  001872  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14696  001874  A4D8               	btfss	status,2,c
 14697  001876  D044               	goto	l352
 14698                           
 14699                           ; BSR set to: 0
 14700                           ;comunicacao.h: 206: limparBuffer();
 14701  001878  ECE0  F037         	call	_limparBuffer	;wreg free
 14702                           
 14703                           ;comunicacao.h: 207: printf("ATH0\r\n");
 14704  00187C  0EAA               	movlw	low STR_21
 14705  00187E  0100               	movlb	0	; () banked
 14706  001880  6FA1               	movwf	printf@f& (0+255),b
 14707  001882  0E7F               	movlw	high STR_21
 14708  001884  6FA2               	movwf	(printf@f+1)& (0+255),b
 14709  001886  ECC4  F038         	call	_printf	;wreg free
 14710                           
 14711                           ;comunicacao.h: 208: delay(550);
 14712  00188A  0E02               	movlw	2
 14713  00188C  0100               	movlb	0	; () banked
 14714  00188E  6F81               	movwf	(delay@x+1)& (0+255),b
 14715  001890  0E26               	movlw	38
 14716  001892  6F80               	movwf	delay@x& (0+255),b
 14717  001894  ECC5  F037         	call	_delay	;wreg free
 14718                           
 14719                           ;comunicacao.h: 209: if (telefoneSelecionado == 0) {
 14720  001898  0100               	movlb	0	; () banked
 14721  00189A  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14722  00189C  A4D8               	btfss	status,2,c
 14723  00189E  D003               	goto	l396
 14724                           
 14725                           ; BSR set to: 0
 14726                           ;comunicacao.h: 210: telefoneSelecionado = 1;
 14727  0018A0  0E01               	movlw	1
 14728  0018A2  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14729                           
 14730                           ;comunicacao.h: 211: } else {
 14731  0018A4  D007               	goto	l398
 14732  0018A6                     l396:
 14733  0018A6  FFFF               	dw	65535	; assembler added errata NOP
 14734                           
 14735                           ; BSR set to: 0
 14736                           ;comunicacao.h: 212: telefoneSelecionado = 0;
 14737                           
 14738                           ; BSR set to: 0
 14739  0018A8  0E00               	movlw	0
 14740  0018AA  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14741                           
 14742                           ;comunicacao.h: 213: gsmOcupado = 0;
 14743  0018AC  0E00               	movlw	0
 14744  0018AE  6FF4               	movwf	_gsmOcupado& (0+255),b
 14745                           
 14746                           ;comunicacao.h: 214: timerReenvioSMS = 2;
 14747  0018B0  0E02               	movlw	2
 14748  0018B2  6FF6               	movwf	_timerReenvioSMS& (0+255),b
 14749  0018B4                     l398:
 14750  0018B4  FFFF               	dw	65535	; assembler added errata NOP
 14751                           
 14752                           ; BSR set to: 0
 14753                           
 14754                           ; BSR set to: 0
 14755  0018B6  0E00               	movlw	0
 14756  0018B8  6E52               	movwf	_etapaComunicacao+1,c
 14757  0018BA  0E00               	movlw	0
 14758  0018BC  6E51               	movwf	_etapaComunicacao,c
 14759                           
 14760                           ; BSR set to: 0
 14761                           ;comunicacao.h: 222: }
 14762                           
 14763                           ;comunicacao.h: 221: break;
 14764  0018BE  D020               	goto	l352
 14765  0018C0                     l350:
 14766  0018C0  FFFF               	dw	65535	; assembler added errata NOP
 14767                           
 14768                           ; BSR set to: 0
 14769                           
 14770                           ; BSR set to: 0
 14771  0018C2  C051  F0BB         	movff	_etapaComunicacao,??_enviaSMS
 14772  0018C6  C052  F0BC         	movff	_etapaComunicacao+1,??_enviaSMS+1
 14773                           
 14774                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14775                           ; Switch size 1, requested type "space"
 14776                           ; Number of cases is 1, Range of values is 0 to 0
 14777                           ; switch strategies available:
 14778                           ; Name         Instructions Cycles
 14779                           ; simple_byte            4     3 (average)
 14780                           ;	Chosen strategy is simple_byte
 14781  0018CA  51BC               	movf	(??_enviaSMS+1)& (0+255),w,b
 14782  0018CC  0A00               	xorlw	0	; case 0
 14783  0018CE  A4D8               	btfss	status,2,c
 14784  0018D0  D7F1               	goto	l398
 14785                           
 14786                           ; BSR set to: 0
 14787                           ; Switch size 1, requested type "space"
 14788                           ; Number of cases is 7, Range of values is 0 to 6
 14789                           ; switch strategies available:
 14790                           ; Name         Instructions Cycles
 14791                           ; simple_byte           22    12 (average)
 14792                           ;	Chosen strategy is simple_byte
 14793  0018D2  51BB               	movf	??_enviaSMS& (0+255),w,b
 14794  0018D4  0A00               	xorlw	0	; case 0
 14795  0018D6  B4D8               	btfsc	status,2,c
 14796  0018D8  D678               	goto	l351
 14797  0018DA  0A01               	xorlw	1	; case 1
 14798  0018DC  B4D8               	btfsc	status,2,c
 14799  0018DE  D685               	goto	l353
 14800  0018E0  0A03               	xorlw	3	; case 2
 14801  0018E2  B4D8               	btfsc	status,2,c
 14802  0018E4  D6B4               	goto	l356
 14803  0018E6  0A01               	xorlw	1	; case 3
 14804  0018E8  B4D8               	btfsc	status,2,c
 14805  0018EA  D6E4               	goto	l363
 14806  0018EC  0A07               	xorlw	7	; case 4
 14807  0018EE  B4D8               	btfsc	status,2,c
 14808  0018F0  D772               	goto	l380
 14809  0018F2  0A01               	xorlw	1	; case 5
 14810  0018F4  B4D8               	btfsc	status,2,c
 14811  0018F6  D79B               	goto	l389
 14812  0018F8  0A03               	xorlw	3	; case 6
 14813  0018FA  B4D8               	btfsc	status,2,c
 14814  0018FC  D7B9               	goto	l394
 14815  0018FE  D7DA               	goto	l398
 14816  001900                     l352:
 14817  001900  FFFF               	dw	65535	; assembler added errata NOP
 14818                           
 14819                           ; BSR set to: 0
 14820  001902  0012               	return		;funcret
 14821  001904  FFFF               	dw	65535	; errata NOP
 14822  001906                     __end_of_enviaSMS:
 14823                           	opt stack 0
 14824                           tblptru	equ	0xFF8
 14825                           tblptrh	equ	0xFF7
 14826                           tblptrl	equ	0xFF6
 14827                           tablat	equ	0xFF5
 14828                           prodh	equ	0xFF4
 14829                           prodl	equ	0xFF3
 14830                           intcon	equ	0xFF2
 14831                           postinc0	equ	0xFEE
 14832                           wreg	equ	0xFE8
 14833                           postdec1	equ	0xFE5
 14834                           fsr1l	equ	0xFE1
 14835                           indf2	equ	0xFDF
 14836                           postinc2	equ	0xFDE
 14837                           fsr2h	equ	0xFDA
 14838                           fsr2l	equ	0xFD9
 14839                           status	equ	0xFD8
 14840                           
 14841 ;; *************** function _writeChar *****************
 14842 ;; Defined at:
 14843 ;;		line 21 in file "serial.h"
 14844 ;; Parameters:    Size  Location     Type
 14845 ;;  hex             2    0[BANK0 ] PTR unsigned char 
 14846 ;;		 -> RAM(1535), 
 14847 ;; Auto vars:     Size  Location     Type
 14848 ;;		None
 14849 ;; Return value:  Size  Location     Type
 14850 ;;                  1    wreg      void 
 14851 ;; Registers used:
 14852 ;;		None
 14853 ;; Tracked objects:
 14854 ;;		On entry : 0/0
 14855 ;;		On exit  : 0/0
 14856 ;;		Unchanged: 0/0
 14857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14858 ;;      Params:         0       2       0       0       0       0       0
 14859 ;;      Locals:         0       0       0       0       0       0       0
 14860 ;;      Temps:          0       0       0       0       0       0       0
 14861 ;;      Totals:         0       2       0       0       0       0       0
 14862 ;;Total ram usage:        2 bytes
 14863 ;; Hardware stack levels used:    1
 14864 ;; Hardware stack levels required when called:    6
 14865 ;; This function calls:
 14866 ;;		Nothing
 14867 ;; This function is called by:
 14868 ;;		_getSinalSIM800L
 14869 ;;		_comunicarTeste
 14870 ;;		_enviaSMS
 14871 ;; This function uses a non-reentrant model
 14872 ;;
 14873                           
 14874                           	psect	text46
 14875  006D0C                     __ptext46:
 14876                           	opt stack 0
 14877  006D0C                     _writeChar:
 14878                           	opt stack 0
 14879  006D0C  FFFF               	dw	65535	; assembler added errata NOP
 14880                           
 14881                           ;serial.h: 22: while (!TXSTAbits.TRMT);
 14882                           
 14883                           ;incstack = 0
 14884  006D0E  A2AC               	btfss	4012,1,c	;volatile
 14885  006D10  D7FD               	goto	_writeChar
 14886                           
 14887                           ;serial.h: 23: TXREG = hex;
 14888  006D12  C080  FFAD         	movff	writeChar@hex,4013	;volatile
 14889  006D16  0012               	return		;funcret
 14890  006D18  FFFF               	dw	65535	; errata NOP
 14891  006D1A                     __end_of_writeChar:
 14892                           	opt stack 0
 14893                           tblptru	equ	0xFF8
 14894                           tblptrh	equ	0xFF7
 14895                           tblptrl	equ	0xFF6
 14896                           tablat	equ	0xFF5
 14897                           prodh	equ	0xFF4
 14898                           prodl	equ	0xFF3
 14899                           intcon	equ	0xFF2
 14900                           postinc0	equ	0xFEE
 14901                           wreg	equ	0xFE8
 14902                           postdec1	equ	0xFE5
 14903                           fsr1l	equ	0xFE1
 14904                           indf2	equ	0xFDF
 14905                           postinc2	equ	0xFDE
 14906                           fsr2h	equ	0xFDA
 14907                           fsr2l	equ	0xFD9
 14908                           status	equ	0xFD8
 14909                           
 14910 ;; *************** function _printf *****************
 14911 ;; Defined at:
 14912 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
 14913 ;; Parameters:    Size  Location     Type
 14914 ;;  f               2   33[BANK0 ] PTR const unsigned char 
 14915 ;;		 -> STR_36(7), STR_35(11), STR_26(104), STR_25(63), 
 14916 ;;		 -> STR_23(18), STR_21(7), STR_20(12), STR_18(5), 
 14917 ;;		 -> STR_14(126), STR_12(18), STR_10(12), STR_8(5), 
 14918 ;;		 -> STR_4(5), STR_3(9), 
 14919 ;; Auto vars:     Size  Location     Type
 14920 ;;  pb              4   55[BANK0 ] struct __prbuf
 14921 ;;  ap              2   53[BANK0 ] PTR void [1]
 14922 ;;		 -> ?_sprintf(2), ?_printf(2), 
 14923 ;; Return value:  Size  Location     Type
 14924 ;;                  2   33[BANK0 ] int 
 14925 ;; Registers used:
 14926 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14927 ;; Tracked objects:
 14928 ;;		On entry : 0/0
 14929 ;;		On exit  : 0/0
 14930 ;;		Unchanged: 0/0
 14931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14932 ;;      Params:         0      20       0       0       0       0       0
 14933 ;;      Locals:         0       6       0       0       0       0       0
 14934 ;;      Temps:          0       0       0       0       0       0       0
 14935 ;;      Totals:         0      26       0       0       0       0       0
 14936 ;;Total ram usage:       26 bytes
 14937 ;; Hardware stack levels used:    1
 14938 ;; Hardware stack levels required when called:    8
 14939 ;; This function calls:
 14940 ;;		__doprnt
 14941 ;; This function is called by:
 14942 ;;		_getSinalSIM800L
 14943 ;;		_comunicarTeste
 14944 ;;		_enviaSMS
 14945 ;; This function uses a non-reentrant model
 14946 ;;
 14947                           
 14948                           	psect	text47
 14949  007188                     __ptext47:
 14950                           	opt stack 0
 14951  007188                     _printf:
 14952                           	opt stack 0
 14953  007188  FFFF               	dw	65535	; assembler added errata NOP
 14954                           
 14955                           ;incstack = 0
 14956  00718A  0E00               	movlw	0
 14957  00718C  0100               	movlb	0	; () banked
 14958  00718E  6FB7               	movwf	printf@pb& (0+255),b
 14959  007190  0E00               	movlw	0
 14960  007192  6FB8               	movwf	(printf@pb+1)& (0+255),b
 14961  007194  0E2C               	movlw	low _putch
 14962  007196  6FB9               	movwf	(printf@pb+2)& (0+255),b
 14963  007198  0E6D               	movlw	high _putch
 14964  00719A  6FBA               	movwf	(printf@pb+3)& (0+255),b
 14965  00719C  0EA3               	movlw	low (?_printf+2)
 14966  00719E  6FB5               	movwf	printf@ap& (0+255),b
 14967  0071A0  0E00               	movlw	high (?_printf+2)
 14968  0071A2  6FB6               	movwf	(printf@ap+1)& (0+255),b
 14969                           
 14970                           ; BSR set to: 0
 14971                           ;	Return value of _printf is never used
 14972  0071A4  0EB7               	movlw	low printf@pb
 14973  0071A6  6F8C               	movwf	__doprnt@pb& (0+255),b
 14974  0071A8  0E00               	movlw	high printf@pb
 14975  0071AA  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 14976  0071AC  C0A1  F08E         	movff	printf@f,__doprnt@f
 14977  0071B0  C0A2  F08F         	movff	printf@f+1,__doprnt@f+1
 14978  0071B4  0EB5               	movlw	low printf@ap
 14979  0071B6  6F90               	movwf	__doprnt@ap& (0+255),b
 14980  0071B8  0E00               	movlw	high printf@ap
 14981  0071BA  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 14982  0071BC  EC8E  F000         	call	__doprnt	;wreg free
 14983  0071C0  0012               	return		;funcret
 14984  0071C2  FFFF               	dw	65535	; errata NOP
 14985  0071C4                     __end_of_printf:
 14986                           	opt stack 0
 14987                           tblptru	equ	0xFF8
 14988                           tblptrh	equ	0xFF7
 14989                           tblptrl	equ	0xFF6
 14990                           tablat	equ	0xFF5
 14991                           prodh	equ	0xFF4
 14992                           prodl	equ	0xFF3
 14993                           intcon	equ	0xFF2
 14994                           postinc0	equ	0xFEE
 14995                           wreg	equ	0xFE8
 14996                           postdec1	equ	0xFE5
 14997                           fsr1l	equ	0xFE1
 14998                           indf2	equ	0xFDF
 14999                           postinc2	equ	0xFDE
 15000                           fsr2h	equ	0xFDA
 15001                           fsr2l	equ	0xFD9
 15002                           status	equ	0xFD8
 15003                           
 15004 ;; *************** function __doprnt *****************
 15005 ;; Defined at:
 15006 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 15007 ;; Parameters:    Size  Location     Type
 15008 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
 15009 ;;		 -> sprintf@pb(4), printf@pb(4), 
 15010 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15011 ;;		 -> intToFloatStr@conv(4), STR_122(15), STR_121(12), STR_120(10), 
 15012 ;;		 -> STR_119(18), STR_118(10), STR_117(18), STR_116(16), 
 15013 ;;		 -> STR_115(10), STR_113(3), STR_112(14), STR_111(20), 
 15014 ;;		 -> STR_110(8), STR_109(10), STR_108(11), STR_107(9), 
 15015 ;;		 -> STR_106(3), STR_105(15), STR_104(15), STR_103(11), 
 15016 ;;		 -> STR_102(11), STR_101(19), STR_100(5), STR_99(12), 
 15017 ;;		 -> STR_98(5), STR_97(14), STR_96(19), STR_93(3), 
 15018 ;;		 -> STR_92(7), STR_91(7), STR_89(12), STR_88(17), 
 15019 ;;		 -> STR_87(20), STR_86(8), STR_83(14), STR_80(14), 
 15020 ;;		 -> STR_79(11), STR_76(10), STR_75(31), STR_72(11), 
 15021 ;;		 -> STR_71(20), STR_70(20), STR_69(21), STR_68(15), 
 15022 ;;		 -> STR_67(6), STR_66(15), STR_65(6), STR_64(20), 
 15023 ;;		 -> STR_63(15), STR_62(19), STR_61(20), STR_60(21), 
 15024 ;;		 -> STR_59(21), STR_58(18), STR_57(20), STR_56(17), 
 15025 ;;		 -> STR_55(26), STR_54(16), STR_51(15), STR_48(15), 
 15026 ;;		 -> STR_45(11), STR_44(17), STR_43(16), STR_42(19), 
 15027 ;;		 -> STR_41(19), STR_40(16), STR_39(15), STR_38(15), 
 15028 ;;		 -> STR_37(20), STR_36(7), STR_35(11), STR_26(104), 
 15029 ;;		 -> STR_25(63), STR_23(18), STR_21(7), STR_20(12), 
 15030 ;;		 -> STR_18(5), STR_14(126), STR_12(18), STR_10(12), 
 15031 ;;		 -> STR_8(5), STR_4(5), STR_3(9), STR_2(5), 
 15032 ;;		 -> STR_1(5), 
 15033 ;;  ap              2   16[BANK0 ] PTR PTR void 
 15034 ;;		 -> sprintf@ap(2), printf@ap(2), 
 15035 ;; Auto vars:     Size  Location     Type
 15036 ;;  tmpval          4    0        struct .
 15037 ;;  width           2   30[BANK0 ] int 
 15038 ;;  cp              2   28[BANK0 ] PTR const unsigned char 
 15039 ;;		 -> ?_sprintf(2), ?_printf(2), STR_123(7), _doprnt@c(1), 
 15040 ;;		 -> intToFloatStr@end(4), STR_114(12), STR_95(17), STR_94(13), 
 15041 ;;		 -> STR_90(12), STR_85(5), STR_84(3), STR_82(5), 
 15042 ;;		 -> STR_81(3), STR_78(5), STR_77(3), STR_74(4), 
 15043 ;;		 -> STR_73(4), STR_53(5), STR_52(3), STR_50(5), 
 15044 ;;		 -> STR_49(3), line3(21), STR_47(5), STR_46(3), 
 15045 ;;		 -> line2(21), line1(21), line4(21), STR_32(6), 
 15046 ;;		 -> STR_31(3), STR_30(6), STR_29(3), STR_28(6), 
 15047 ;;		 -> STR_27(3), STR_15(12), tel2(12), tel1(12), 
 15048 ;;		 -> bufferAUX(20), NULL(0), bufferSerial(60), 
 15049 ;;  len             2   25[BANK0 ] unsigned int 
 15050 ;;  val             2   23[BANK0 ] unsigned int 
 15051 ;;  c               1   32[BANK0 ] char 
 15052 ;;  flag            1   27[BANK0 ] unsigned char 
 15053 ;;  prec            1   22[BANK0 ] char 
 15054 ;; Return value:  Size  Location     Type
 15055 ;;                  2   12[BANK0 ] int 
 15056 ;; Registers used:
 15057 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15058 ;; Tracked objects:
 15059 ;;		On entry : 0/0
 15060 ;;		On exit  : 0/0
 15061 ;;		Unchanged: 0/0
 15062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15063 ;;      Params:         0       6       0       0       0       0       0
 15064 ;;      Locals:         0      11       0       0       0       0       0
 15065 ;;      Temps:          0       4       0       0       0       0       0
 15066 ;;      Totals:         0      21       0       0       0       0       0
 15067 ;;Total ram usage:       21 bytes
 15068 ;; Hardware stack levels used:    1
 15069 ;; Hardware stack levels required when called:    7
 15070 ;; This function calls:
 15071 ;;		Absolute function
 15072 ;;		___lwdiv
 15073 ;;		___lwmod
 15074 ;;		___wmul
 15075 ;;		_isdigit
 15076 ;;		_putch
 15077 ;; This function is called by:
 15078 ;;		_printf
 15079 ;;		_sprintf
 15080 ;; This function uses a non-reentrant model
 15081 ;;
 15082                           
 15083                           	psect	text48
 15084  00011C                     __ptext48:
 15085                           	opt stack 0
 15086  00011C                     __doprnt:
 15087                           	opt stack 0
 15088  00011C  FFFF               	dw	65535	; assembler added errata NOP
 15089                           
 15090                           ;doprnt.c: 499: signed char c;
 15091                           ;doprnt.c: 501: int width;
 15092                           ;doprnt.c: 506: signed char prec;
 15093                           ;doprnt.c: 508: unsigned char flag;
 15094                           ;doprnt.c: 523: union {
 15095                           ;doprnt.c: 524: unsigned long vd;
 15096                           ;doprnt.c: 525: double integ;
 15097                           ;doprnt.c: 526: } tmpval;
 15098                           ;doprnt.c: 528: unsigned int val;
 15099                           ;doprnt.c: 529: unsigned len;
 15100                           ;doprnt.c: 530: const char * cp;
 15101                           ;doprnt.c: 536: while(c = *f++) {
 15102                           
 15103                           ;incstack = 0
 15104  00011E  D3D7               	goto	u5280
 15105  000120  FFFF               	dw	65535	; assembler added errata NOP
 15106                           
 15107                           ;doprnt.c: 538: if(c != '%')
 15108  000122  0E25               	movlw	37
 15109  000124  0100               	movlb	0	; () banked
 15110  000126  19A0               	xorwf	__doprnt@c& (0+255),w,b
 15111  000128  B4D8               	btfsc	status,2,c
 15112  00012A  D037               	goto	l1037
 15113                           
 15114                           ; BSR set to: 0
 15115                           ;doprnt.c: 540: {
 15116                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 15117  00012C  EE20 F002          	lfsr	2,2
 15118  000130  518C               	movf	__doprnt@pb& (0+255),w,b
 15119  000132  26D9               	addwf	fsr2l,f,c
 15120  000134  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15121  000136  22DA               	addwfc	fsr2h,f,c
 15122  000138  50DE               	movf	postinc2,w,c
 15123  00013A  10DE               	iorwf	postinc2,w,c
 15124  00013C  B4D8               	btfsc	status,2,c
 15125  00013E  D016               	goto	l1038
 15126                           
 15127                           ; BSR set to: 0
 15128  000140  EE20 F002          	lfsr	2,2
 15129  000144  518C               	movf	__doprnt@pb& (0+255),w,b
 15130  000146  26D9               	addwf	fsr2l,f,c
 15131  000148  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15132  00014A  22DA               	addwfc	fsr2h,f,c
 15133  00014C  D801               	call	u4848
 15134  00014E  D3BF               	goto	u5280
 15135  000150                     u4848:
 15136  000150  FFFF               	dw	65535	; assembler added errata NOP
 15137  000152  0005               	push	
 15138  000154  6EFA               	movwf	pclath,c
 15139  000156  50DE               	movf	postinc2,w,c
 15140  000158  6EFD               	movwf	tosl,c
 15141  00015A  50DE               	movf	postinc2,w,c
 15142  00015C  6EFE               	movwf	tosh,c
 15143  00015E  50F8               	movf	tblptru,w,c
 15144  000160  6EFF               	movwf	tosu,c
 15145  000162  50FA               	movf	pclath,w,c
 15146  000164  51A0               	movf	__doprnt@c& (0+255),w,b
 15147  000166  0012               	return		;indir
 15148  000168  FFFF               	dw	65535	; errata NOP
 15149  00016A  D3B1               	goto	u5280
 15150  00016C                     l1038:
 15151  00016C  FFFF               	dw	65535	; assembler added errata NOP
 15152  00016E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15153  000172  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15154  000176  CFDE F092          	movff	postinc2,??__doprnt
 15155  00017A  CFDD F093          	movff	postdec2,??__doprnt+1
 15156  00017E  C092  FFD9         	movff	??__doprnt,fsr2l
 15157  000182  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15158  000186  C0A0  FFDF         	movff	__doprnt@c,indf2
 15159  00018A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15160  00018E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15161  000192  2ADE               	incf	postinc2,f,c
 15162  000194  0E00               	movlw	0
 15163  000196  22DD               	addwfc	postdec2,f,c
 15164                           
 15165                           ;doprnt.c: 542: continue;
 15166  000198  D39A               	goto	u5280
 15167  00019A                     l1037:
 15168  00019A  FFFF               	dw	65535	; assembler added errata NOP
 15169                           
 15170                           ;doprnt.c: 543: }
 15171                           ;doprnt.c: 546: width = 0;
 15172  00019C  0E00               	movlw	0
 15173  00019E  0100               	movlb	0	; () banked
 15174  0001A0  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15175  0001A2  0E00               	movlw	0
 15176  0001A4  6F9E               	movwf	__doprnt@width& (0+255),b
 15177                           
 15178                           ;doprnt.c: 548: flag = 0;
 15179  0001A6  0E00               	movlw	0
 15180  0001A8  6F9B               	movwf	__doprnt@flag& (0+255),b
 15181                           
 15182                           ; BSR set to: 0
 15183                           ;doprnt.c: 551: switch(*f) {
 15184                           
 15185                           ;doprnt.c: 550: for(;;) {
 15186  0001AA  D005               	goto	l1041
 15187  0001AC  FFFF               	dw	65535	; assembler added errata NOP
 15188                           
 15189                           ;doprnt.c: 580: flag |= 0x04;
 15190                           
 15191                           ; BSR set to: 0
 15192  0001AE  0100               	movlb	0	; () banked
 15193  0001B0  859B               	bsf	__doprnt@flag& (0+255),2,b
 15194                           
 15195                           ;doprnt.c: 581: f++;
 15196  0001B2  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15197  0001B4  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15198  0001B6                     l1041:
 15199  0001B6  FFFF               	dw	65535	; assembler added errata NOP
 15200                           
 15201                           ; BSR set to: 0
 15202  0001B8  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15203  0001BC  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15204  0001C0  6AF8               	clrf	tblptru,c
 15205  0001C2  0E05               	movlw	(high __ramtop+-1)
 15206  0001C4  64F7               	cpfsgt	tblptrh,c
 15207  0001C6  D004               	bra	u4857
 15208  0001C8  0008               	tblrd		*
 15209  0001CA  FFFF               	dw	65535	; errata NOP
 15210  0001CC  50F5               	movf	tablat,w,c
 15211  0001CE  D005               	bra	u4850
 15212  0001D0                     u4857:
 15213  0001D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 15214  0001D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 15215  0001D8  50EF               	movf	indf0,w,c
 15216  0001DA                     u4850:
 15217                           
 15218                           ; Switch size 1, requested type "space"
 15219                           ; Number of cases is 1, Range of values is 48 to 48
 15220                           ; switch strategies available:
 15221                           ; Name         Instructions Cycles
 15222                           ; simple_byte            4     3 (average)
 15223                           ;	Chosen strategy is simple_byte
 15224  0001DA  0A30               	xorlw	48	; case 48
 15225  0001DC  B4D8               	btfsc	status,2,c
 15226  0001DE  D7E6               	goto	l1042
 15227                           
 15228                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15229                           
 15230                           ;doprnt.c: 586: }
 15231                           
 15232                           ;doprnt.c: 585: break;
 15233  0001E0  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15234  0001E4  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15235  0001E8  6AF8               	clrf	tblptru,c
 15236  0001EA  0E05               	movlw	(high __ramtop+-1)
 15237  0001EC  64F7               	cpfsgt	tblptrh,c
 15238  0001EE  D004               	bra	u4867
 15239  0001F0  0008               	tblrd		*
 15240  0001F2  FFFF               	dw	65535	; errata NOP
 15241  0001F4  50F5               	movf	tablat,w,c
 15242  0001F6  D005               	bra	u4860
 15243  0001F8                     u4867:
 15244  0001F8  CFF6 FFE9          	movff	tblptrl,fsr0l
 15245  0001FC  CFF7 FFEA          	movff	tblptrh,fsr0h
 15246  000200  50EF               	movf	indf0,w,c
 15247  000202                     u4860:
 15248  000202  EC0A  F037         	call	_isdigit
 15249  000206  A0D8               	btfss	status,0,c
 15250  000208  D16B               	goto	l1049
 15251                           
 15252                           ;doprnt.c: 598: width = 0;
 15253  00020A  0E00               	movlw	0
 15254  00020C  0100               	movlb	0	; () banked
 15255  00020E  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15256  000210  0E00               	movlw	0
 15257  000212  6F9E               	movwf	__doprnt@width& (0+255),b
 15258  000214  FFFF               	dw	65535	; assembler added errata NOP
 15259                           
 15260                           ;doprnt.c: 600: width *= 10;
 15261                           
 15262                           ; BSR set to: 0
 15263  000216  C09E  F080         	movff	__doprnt@width,___wmul@multiplier
 15264  00021A  C09F  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
 15265  00021E  0E00               	movlw	0
 15266  000220  0100               	movlb	0	; () banked
 15267  000222  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15268  000224  0E0A               	movlw	10
 15269  000226  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15270  000228  EC48  F037         	call	___wmul	;wreg free
 15271  00022C  C080  F09E         	movff	?___wmul,__doprnt@width
 15272  000230  C081  F09F         	movff	?___wmul+1,__doprnt@width+1
 15273                           
 15274                           ;doprnt.c: 601: width += *f++ - '0';
 15275  000234  0ED0               	movlw	208
 15276  000236  0100               	movlb	0	; () banked
 15277  000238  6F92               	movwf	??__doprnt& (0+255),b
 15278  00023A  0EFF               	movlw	255
 15279  00023C  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15280  00023E  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15281  000242  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15282  000246  6AF8               	clrf	tblptru,c
 15283  000248  0E05               	movlw	(high __ramtop+-1)
 15284  00024A  64F7               	cpfsgt	tblptrh,c
 15285  00024C  D004               	bra	u4887
 15286  00024E  0008               	tblrd		*
 15287  000250  FFFF               	dw	65535	; errata NOP
 15288  000252  50F5               	movf	tablat,w,c
 15289  000254  D005               	bra	u4880
 15290  000256                     u4887:
 15291  000256  CFF6 FFE9          	movff	tblptrl,fsr0l
 15292  00025A  CFF7 FFEA          	movff	tblptrh,fsr0h
 15293  00025E  50EF               	movf	indf0,w,c
 15294  000260                     u4880:
 15295  000260  0100               	movlb	0	; () banked
 15296  000262  6F94               	movwf	(??__doprnt+2)& (0+255),b
 15297  000264  6B95               	clrf	(??__doprnt+3)& (0+255),b
 15298  000266  5192               	movf	??__doprnt& (0+255),w,b
 15299  000268  2794               	addwf	(??__doprnt+2)& (0+255),f,b
 15300  00026A  5193               	movf	(??__doprnt+1)& (0+255),w,b
 15301  00026C  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
 15302  00026E  5194               	movf	(??__doprnt+2)& (0+255),w,b
 15303  000270  279E               	addwf	__doprnt@width& (0+255),f,b
 15304  000272  5195               	movf	(??__doprnt+3)& (0+255),w,b
 15305  000274  239F               	addwfc	(__doprnt@width+1)& (0+255),f,b
 15306                           
 15307                           ; BSR set to: 0
 15308  000276  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15309  000278  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15310                           
 15311                           ; BSR set to: 0
 15312                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15313  00027A  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15314  00027E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15315  000282  6AF8               	clrf	tblptru,c
 15316  000284  0E05               	movlw	(high __ramtop+-1)
 15317  000286  64F7               	cpfsgt	tblptrh,c
 15318  000288  D004               	bra	u4897
 15319  00028A  0008               	tblrd		*
 15320  00028C  FFFF               	dw	65535	; errata NOP
 15321  00028E  50F5               	movf	tablat,w,c
 15322  000290  D005               	bra	u4890
 15323  000292                     u4897:
 15324  000292  CFF6 FFE9          	movff	tblptrl,fsr0l
 15325  000296  CFF7 FFEA          	movff	tblptrh,fsr0h
 15326  00029A  50EF               	movf	indf0,w,c
 15327  00029C                     u4890:
 15328  00029C  EC0A  F037         	call	_isdigit
 15329  0002A0  A0D8               	btfss	status,0,c
 15330  0002A2  D11E               	goto	l1049
 15331  0002A4  D7B7               	goto	l1047
 15332  0002A6  FFFF               	dw	65535	; assembler added errata NOP
 15333                           
 15334                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15335  0002A8  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15336  0002AC  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15337  0002B0  CFDF F092          	movff	indf2,??__doprnt
 15338  0002B4  0E02               	movlw	2
 15339  0002B6  26DE               	addwf	postinc2,f,c
 15340  0002B8  CFDF F093          	movff	indf2,??__doprnt+1
 15341  0002BC  0E00               	movlw	0
 15342  0002BE  22DD               	addwfc	postdec2,f,c
 15343  0002C0  C092  FFD9         	movff	??__doprnt,fsr2l
 15344  0002C4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15345  0002C8  CFDE F09C          	movff	postinc2,__doprnt@cp
 15346  0002CC  CFDD F09D          	movff	postdec2,__doprnt@cp+1
 15347                           
 15348                           ;doprnt.c: 740: if(!cp)
 15349  0002D0  0100               	movlb	0	; () banked
 15350  0002D2  519C               	movf	__doprnt@cp& (0+255),w,b
 15351  0002D4  119D               	iorwf	(__doprnt@cp+1)& (0+255),w,b
 15352  0002D6  A4D8               	btfss	status,2,c
 15353  0002D8  D004               	goto	l1056
 15354                           
 15355                           ; BSR set to: 0
 15356                           ;doprnt.c: 741: cp = "(null)";
 15357  0002DA  0EA3               	movlw	low STR_123
 15358  0002DC  6F9C               	movwf	__doprnt@cp& (0+255),b
 15359  0002DE  0E7F               	movlw	high STR_123
 15360  0002E0  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 15361  0002E2                     l1056:
 15362  0002E2  FFFF               	dw	65535	; assembler added errata NOP
 15363                           
 15364                           ; BSR set to: 0
 15365                           ;doprnt.c: 745: len = 0;
 15366                           
 15367                           ; BSR set to: 0
 15368  0002E4  0E00               	movlw	0
 15369  0002E6  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 15370  0002E8  0E00               	movlw	0
 15371  0002EA  6F99               	movwf	__doprnt@len& (0+255),b
 15372                           
 15373                           ;doprnt.c: 746: while(cp[len])
 15374  0002EC  D004               	goto	l1057
 15375  0002EE  FFFF               	dw	65535	; assembler added errata NOP
 15376                           
 15377                           ;doprnt.c: 747: len++;
 15378                           
 15379                           ; BSR set to: 0
 15380  0002F0  0100               	movlb	0	; () banked
 15381  0002F2  4B99               	infsnz	__doprnt@len& (0+255),f,b
 15382  0002F4  2B9A               	incf	(__doprnt@len+1)& (0+255),f,b
 15383  0002F6                     l1057:
 15384  0002F6  FFFF               	dw	65535	; assembler added errata NOP
 15385                           
 15386                           ; BSR set to: 0
 15387                           
 15388                           ; BSR set to: 0
 15389  0002F8  5199               	movf	__doprnt@len& (0+255),w,b
 15390  0002FA  259C               	addwf	__doprnt@cp& (0+255),w,b
 15391  0002FC  6F92               	movwf	??__doprnt& (0+255),b
 15392  0002FE  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 15393  000300  219D               	addwfc	(__doprnt@cp+1)& (0+255),w,b
 15394  000302  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15395  000304  C092  FFF6         	movff	??__doprnt,tblptrl
 15396  000308  C093  FFF7         	movff	??__doprnt+1,tblptrh
 15397  00030C  6AF8               	clrf	tblptru,c
 15398  00030E  0E05               	movlw	(high __ramtop+-1)
 15399  000310  64F7               	cpfsgt	tblptrh,c
 15400  000312  D004               	bra	u4927
 15401  000314  0008               	tblrd		*
 15402  000316  FFFF               	dw	65535	; errata NOP
 15403  000318  50F5               	movf	tablat,w,c
 15404  00031A  D005               	bra	u4920
 15405  00031C                     u4927:
 15406  00031C  CFF6 FFE9          	movff	tblptrl,fsr0l
 15407  000320  CFF7 FFEA          	movff	tblptrh,fsr0h
 15408  000324  50EF               	movf	indf0,w,c
 15409  000326                     u4920:
 15410  000326  0900               	iorlw	0
 15411  000328  A4D8               	btfss	status,2,c
 15412  00032A  D7E1               	goto	l1058
 15413  00032C                     u4930:
 15414  00032C  FFFF               	dw	65535	; assembler added errata NOP
 15415                           
 15416                           ;doprnt.c: 757: if(width > len)
 15417                           
 15418                           ;doprnt.c: 750: dostring:
 15419  00032E  0100               	movlb	0	; () banked
 15420  000330  519E               	movf	__doprnt@width& (0+255),w,b
 15421  000332  5D99               	subwf	__doprnt@len& (0+255),w,b
 15422  000334  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 15423  000336  599A               	subwfb	(__doprnt@len+1)& (0+255),w,b
 15424  000338  B0D8               	btfsc	status,0,c
 15425  00033A  D005               	goto	l1061
 15426                           
 15427                           ; BSR set to: 0
 15428                           ;doprnt.c: 758: width -= len;
 15429  00033C  5199               	movf	__doprnt@len& (0+255),w,b
 15430  00033E  5F9E               	subwf	__doprnt@width& (0+255),f,b
 15431  000340  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 15432  000342  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 15433  000344  D03D               	goto	l1066
 15434  000346                     l1061:
 15435  000346  FFFF               	dw	65535	; assembler added errata NOP
 15436                           
 15437                           ; BSR set to: 0
 15438                           ;doprnt.c: 759: else
 15439                           ;doprnt.c: 760: width = 0;
 15440                           
 15441                           ; BSR set to: 0
 15442  000348  0E00               	movlw	0
 15443  00034A  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15444  00034C  0E00               	movlw	0
 15445  00034E  6F9E               	movwf	__doprnt@width& (0+255),b
 15446                           
 15447                           ; BSR set to: 0
 15448                           ;doprnt.c: 764: while(width--)
 15449  000350  D037               	goto	l1066
 15450  000352  FFFF               	dw	65535	; assembler added errata NOP
 15451  000354                     l5072:
 15452                           
 15453                           ; BSR set to: 0
 15454                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 15455  000354  EE20 F002          	lfsr	2,2
 15456  000358  518C               	movf	__doprnt@pb& (0+255),w,b
 15457  00035A  26D9               	addwf	fsr2l,f,c
 15458  00035C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15459  00035E  22DA               	addwfc	fsr2h,f,c
 15460  000360  50DE               	movf	postinc2,w,c
 15461  000362  10DE               	iorwf	postinc2,w,c
 15462  000364  B4D8               	btfsc	status,2,c
 15463  000366  D016               	goto	l1065
 15464                           
 15465                           ; BSR set to: 0
 15466  000368  EE20 F002          	lfsr	2,2
 15467  00036C  518C               	movf	__doprnt@pb& (0+255),w,b
 15468  00036E  26D9               	addwf	fsr2l,f,c
 15469  000370  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15470  000372  22DA               	addwfc	fsr2h,f,c
 15471  000374  D801               	call	u4968
 15472  000376  D024               	goto	l1066
 15473  000378                     u4968:
 15474  000378  FFFF               	dw	65535	; assembler added errata NOP
 15475  00037A  0005               	push	
 15476  00037C  6EFA               	movwf	pclath,c
 15477  00037E  50DE               	movf	postinc2,w,c
 15478  000380  6EFD               	movwf	tosl,c
 15479  000382  50DE               	movf	postinc2,w,c
 15480  000384  6EFE               	movwf	tosh,c
 15481  000386  50F8               	movf	tblptru,w,c
 15482  000388  6EFF               	movwf	tosu,c
 15483  00038A  50FA               	movf	pclath,w,c
 15484  00038C  0E20               	movlw	32
 15485  00038E  0012               	return		;indir
 15486  000390  FFFF               	dw	65535	; errata NOP
 15487  000392  D016               	goto	l1066
 15488  000394                     l1065:
 15489  000394  FFFF               	dw	65535	; assembler added errata NOP
 15490  000396  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15491  00039A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15492  00039E  CFDE F092          	movff	postinc2,??__doprnt
 15493  0003A2  CFDD F093          	movff	postdec2,??__doprnt+1
 15494  0003A6  C092  FFD9         	movff	??__doprnt,fsr2l
 15495  0003AA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15496  0003AE  0E20               	movlw	32
 15497  0003B0  6EDF               	movwf	indf2,c
 15498  0003B2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15499  0003B6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15500  0003BA  2ADE               	incf	postinc2,f,c
 15501  0003BC  0E00               	movlw	0
 15502  0003BE  22DD               	addwfc	postdec2,f,c
 15503  0003C0                     l1066:
 15504  0003C0  FFFF               	dw	65535	; assembler added errata NOP
 15505  0003C2  0100               	movlb	0	; () banked
 15506  0003C4  079E               	decf	__doprnt@width& (0+255),f,b
 15507  0003C6  A0D8               	btfss	status,0,c
 15508  0003C8  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 15509  0003CA  299E               	incf	__doprnt@width& (0+255),w,b
 15510  0003CC  E1C3               	bnz	l5072
 15511  0003CE  299F               	incf	(__doprnt@width+1)& (0+255),w,b
 15512  0003D0  B4D8               	btfsc	status,2,c
 15513  0003D2  D05F               	goto	l1071
 15514  0003D4  D7BE               	goto	l1064
 15515  0003D6  FFFF               	dw	65535	; assembler added errata NOP
 15516  0003D8                     l5082:
 15517                           
 15518                           ; BSR set to: 0
 15519                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 15520  0003D8  EE20 F002          	lfsr	2,2
 15521  0003DC  518C               	movf	__doprnt@pb& (0+255),w,b
 15522  0003DE  26D9               	addwf	fsr2l,f,c
 15523  0003E0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15524  0003E2  22DA               	addwfc	fsr2h,f,c
 15525  0003E4  50DE               	movf	postinc2,w,c
 15526  0003E6  10DE               	iorwf	postinc2,w,c
 15527  0003E8  B4D8               	btfsc	status,2,c
 15528  0003EA  D02A               	goto	l1070
 15529                           
 15530                           ; BSR set to: 0
 15531  0003EC  EE20 F002          	lfsr	2,2
 15532  0003F0  518C               	movf	__doprnt@pb& (0+255),w,b
 15533  0003F2  26D9               	addwf	fsr2l,f,c
 15534  0003F4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15535  0003F6  22DA               	addwfc	fsr2h,f,c
 15536  0003F8  D801               	call	u4998
 15537  0003FA  D01D               	goto	u4999
 15538  0003FC                     u4998:
 15539  0003FC  FFFF               	dw	65535	; assembler added errata NOP
 15540  0003FE  0005               	push	
 15541  000400  6EFA               	movwf	pclath,c
 15542  000402  50DE               	movf	postinc2,w,c
 15543  000404  6EFD               	movwf	tosl,c
 15544  000406  50DE               	movf	postinc2,w,c
 15545  000408  6EFE               	movwf	tosh,c
 15546  00040A  50F8               	movf	tblptru,w,c
 15547  00040C  6EFF               	movwf	tosu,c
 15548  00040E  50FA               	movf	pclath,w,c
 15549  000410  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 15550  000414  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 15551  000418  6AF8               	clrf	tblptru,c
 15552  00041A  0E05               	movlw	(high __ramtop+-1)
 15553  00041C  64F7               	cpfsgt	tblptrh,c
 15554  00041E  D004               	bra	u5007
 15555  000420  0008               	tblrd		*
 15556  000422  FFFF               	dw	65535	; errata NOP
 15557  000424  50F5               	movf	tablat,w,c
 15558  000426  D005               	bra	u5000
 15559  000428                     u5007:
 15560  000428  CFF6 FFE9          	movff	tblptrl,fsr0l
 15561  00042C  CFF7 FFEA          	movff	tblptrh,fsr0h
 15562  000430  50EF               	movf	indf0,w,c
 15563  000432                     u5000:
 15564  000432  0012               	return		;indir
 15565  000434  FFFF               	dw	65535	; errata NOP
 15566  000436                     u4999:
 15567  000436  FFFF               	dw	65535	; assembler added errata NOP
 15568  000438  0100               	movlb	0	; () banked
 15569  00043A  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 15570  00043C  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 15571  00043E  D029               	goto	l1071
 15572  000440                     l1070:
 15573  000440  FFFF               	dw	65535	; assembler added errata NOP
 15574                           
 15575                           ; BSR set to: 0
 15576                           
 15577                           ; BSR set to: 0
 15578  000442  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 15579  000446  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 15580  00044A  6AF8               	clrf	tblptru,c
 15581  00044C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15582  000450  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15583  000454  CFDE F092          	movff	postinc2,??__doprnt
 15584  000458  CFDD F093          	movff	postdec2,??__doprnt+1
 15585  00045C  C092  FFD9         	movff	??__doprnt,fsr2l
 15586  000460  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15587  000464  0E05               	movlw	(high __ramtop+-1)
 15588  000466  64F7               	cpfsgt	tblptrh,c
 15589  000468  D004               	bra	u5017
 15590  00046A  0008               	tblrd		*
 15591  00046C  FFFF               	dw	65535	; errata NOP
 15592  00046E  50F5               	movf	tablat,w,c
 15593  000470  D005               	bra	u5010
 15594  000472                     u5017:
 15595  000472  CFF6 FFE9          	movff	tblptrl,fsr0l
 15596  000476  CFF7 FFEA          	movff	tblptrh,fsr0h
 15597  00047A  50EF               	movf	indf0,w,c
 15598  00047C                     u5010:
 15599  00047C  6EDF               	movwf	indf2,c
 15600  00047E  0100               	movlb	0	; () banked
 15601  000480  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 15602  000482  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 15603                           
 15604                           ; BSR set to: 0
 15605  000484  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15606  000488  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15607  00048C  2ADE               	incf	postinc2,f,c
 15608  00048E  0E00               	movlw	0
 15609  000490  22DD               	addwfc	postdec2,f,c
 15610  000492                     l1071:
 15611  000492  FFFF               	dw	65535	; assembler added errata NOP
 15612                           
 15613                           ; BSR set to: 0
 15614                           
 15615                           ; BSR set to: 0
 15616                           
 15617                           ; BSR set to: 0
 15618  000494  0799               	decf	__doprnt@len& (0+255),f,b
 15619  000496  A0D8               	btfss	status,0,c
 15620  000498  079A               	decf	(__doprnt@len+1)& (0+255),f,b
 15621  00049A  2999               	incf	__doprnt@len& (0+255),w,b
 15622  00049C  E19D               	bnz	l5082
 15623  00049E  299A               	incf	(__doprnt@len+1)& (0+255),w,b
 15624  0004A0  B4D8               	btfsc	status,2,c
 15625  0004A2  D215               	goto	u5280
 15626  0004A4  D798               	goto	l1069
 15627  0004A6  FFFF               	dw	65535	; assembler added errata NOP
 15628                           
 15629                           ; BSR set to: 0
 15630                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 15631                           
 15632                           ; BSR set to: 0
 15633  0004A8  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15634  0004AC  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15635  0004B0  CFDF F092          	movff	indf2,??__doprnt
 15636  0004B4  0E02               	movlw	2
 15637  0004B6  26DE               	addwf	postinc2,f,c
 15638  0004B8  CFDF F093          	movff	indf2,??__doprnt+1
 15639  0004BC  0E00               	movlw	0
 15640  0004BE  22DD               	addwfc	postdec2,f,c
 15641  0004C0  C092  FFD9         	movff	??__doprnt,fsr2l
 15642  0004C4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15643  0004C8  50DF               	movf	indf2,w,c
 15644  0004CA  6FA0               	movwf	__doprnt@c& (0+255),b
 15645  0004CC  FFFF               	dw	65535	; assembler added errata NOP
 15646                           
 15647                           ; BSR set to: 0
 15648                           ;doprnt.c: 805: cp = (char *)&c;
 15649                           
 15650                           ; BSR set to: 0
 15651  0004CE  0EA0               	movlw	low __doprnt@c
 15652  0004D0  6F9C               	movwf	__doprnt@cp& (0+255),b
 15653  0004D2  0E00               	movlw	high __doprnt@c
 15654  0004D4  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;doprnt.c: 806: len = 1;
 15658  0004D6  0E00               	movlw	0
 15659  0004D8  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 15660  0004DA  0E01               	movlw	1
 15661  0004DC  6F99               	movwf	__doprnt@len& (0+255),b
 15662                           
 15663                           ;doprnt.c: 807: goto dostring;
 15664  0004DE  D726               	goto	u4930
 15665  0004E0                     l1049:
 15666  0004E0  FFFF               	dw	65535	; assembler added errata NOP
 15667                           
 15668                           ; BSR set to: 0
 15669  0004E2  0100               	movlb	0	; () banked
 15670  0004E4  518E               	movf	__doprnt@f& (0+255),w,b
 15671  0004E6  6F92               	movwf	??__doprnt& (0+255),b
 15672  0004E8  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 15673  0004EA  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15674  0004EC  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15675  0004EE  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15676  0004F0  C092  FFF6         	movff	??__doprnt,tblptrl
 15677  0004F4  C093  FFF7         	movff	??__doprnt+1,tblptrh
 15678  0004F8  6AF8               	clrf	tblptru,c
 15679  0004FA  0E05               	movlw	(high __ramtop+-1)
 15680  0004FC  64F7               	cpfsgt	tblptrh,c
 15681  0004FE  D004               	bra	u5037
 15682  000500  0008               	tblrd		*
 15683  000502  FFFF               	dw	65535	; errata NOP
 15684  000504  50F5               	movf	tablat,w,c
 15685  000506  D005               	bra	u5030
 15686  000508                     u5037:
 15687  000508  CFF6 FFE9          	movff	tblptrl,fsr0l
 15688  00050C  CFF7 FFEA          	movff	tblptrh,fsr0h
 15689  000510  50EF               	movf	indf0,w,c
 15690  000512                     u5030:
 15691  000512  0100               	movlb	0	; () banked
 15692  000514  6FA0               	movwf	__doprnt@c& (0+255),b
 15693  000516  51A0               	movf	__doprnt@c& (0+255),w,b
 15694                           
 15695                           ; Switch size 1, requested type "space"
 15696                           ; Number of cases is 5, Range of values is 0 to 115
 15697                           ; switch strategies available:
 15698                           ; Name         Instructions Cycles
 15699                           ; simple_byte           16     9 (average)
 15700                           ;	Chosen strategy is simple_byte
 15701  000518  0A00               	xorlw	0	; case 0
 15702  00051A  B4D8               	btfsc	status,2,c
 15703  00051C  D1F6               	goto	u5300
 15704  00051E  0A63               	xorlw	99	; case 99
 15705  000520  B4D8               	btfsc	status,2,c
 15706  000522  D7C1               	goto	l1073
 15707  000524  0A07               	xorlw	7	; case 100
 15708  000526  B4D8               	btfsc	status,2,c
 15709  000528  D007               	goto	l1054
 15710  00052A  0A0D               	xorlw	13	; case 105
 15711  00052C  B4D8               	btfsc	status,2,c
 15712  00052E  D004               	goto	l1054
 15713  000530  0A1A               	xorlw	26	; case 115
 15714  000532  B4D8               	btfsc	status,2,c
 15715  000534  D6B8               	goto	l1055
 15716  000536  D7CA               	goto	l1074
 15717  000538                     l1054:
 15718  000538  FFFF               	dw	65535	; assembler added errata NOP
 15719                           
 15720                           ;doprnt.c: 1253: {
 15721                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15722                           
 15723                           ; BSR set to: 0
 15724  00053A  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15725  00053E  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15726  000542  CFDF F092          	movff	indf2,??__doprnt
 15727  000546  0E02               	movlw	2
 15728  000548  26DE               	addwf	postinc2,f,c
 15729  00054A  CFDF F093          	movff	indf2,??__doprnt+1
 15730  00054E  0E00               	movlw	0
 15731  000550  22DD               	addwfc	postdec2,f,c
 15732  000552  C092  FFD9         	movff	??__doprnt,fsr2l
 15733  000556  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15734  00055A  CFDE F097          	movff	postinc2,__doprnt@val
 15735  00055E  CFDD F098          	movff	postdec2,__doprnt@val+1
 15736                           
 15737                           ;doprnt.c: 1261: if((int)val < 0) {
 15738  000562  0100               	movlb	0	; () banked
 15739  000564  AF98               	btfss	(__doprnt@val+1)& (0+255),7,b
 15740  000566  D006               	goto	l1075
 15741                           
 15742                           ; BSR set to: 0
 15743                           ;doprnt.c: 1262: flag |= 0x03;
 15744  000568  0E03               	movlw	3
 15745  00056A  139B               	iorwf	__doprnt@flag& (0+255),f,b
 15746                           
 15747                           ; BSR set to: 0
 15748                           ;doprnt.c: 1263: val = -val;
 15749  00056C  6D97               	negf	__doprnt@val& (0+255),b
 15750  00056E  1F98               	comf	(__doprnt@val+1)& (0+255),f,b
 15751  000570  B0D8               	btfsc	status,0,c
 15752  000572  2B98               	incf	(__doprnt@val+1)& (0+255),f,b
 15753  000574                     l1075:
 15754  000574  FFFF               	dw	65535	; assembler added errata NOP
 15755                           
 15756                           ; BSR set to: 0
 15757                           ;doprnt.c: 1264: }
 15758                           ;doprnt.c: 1266: }
 15759                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15760                           
 15761                           ; BSR set to: 0
 15762  000576  0E01               	movlw	1
 15763  000578  6FA0               	movwf	__doprnt@c& (0+255),b
 15764  00057A                     l5116:
 15765  00057A  FFFF               	dw	65535	; assembler added errata NOP
 15766                           
 15767                           ; BSR set to: 0
 15768  00057C  0E05               	movlw	5
 15769  00057E  19A0               	xorwf	__doprnt@c& (0+255),w,b
 15770  000580  B4D8               	btfsc	status,2,c
 15771  000582  D014               	goto	u5070
 15772                           
 15773                           ; BSR set to: 0
 15774                           ;doprnt.c: 1306: if(val < dpowers[c])
 15775                           
 15776                           ; BSR set to: 0
 15777                           
 15778                           ; BSR set to: 0
 15779  000584  51A0               	movf	__doprnt@c& (0+255),w,b
 15780  000586  0D02               	mullw	2
 15781  000588  0ECD               	movlw	low _dpowers
 15782  00058A  24F3               	addwf	prodl,w,c
 15783  00058C  6EF6               	movwf	tblptrl,c
 15784  00058E  0E7A               	movlw	high _dpowers
 15785  000590  20F4               	addwfc	prodh,w,c
 15786  000592  6EF7               	movwf	tblptrh,c
 15787  000594                     	if	0	;There are less than 3 active tblptr bytes
 15788  000594                     	endif
 15789  000594  0009               	tblrd		*+
 15790  000596  FFFF               	dw	65535	; errata NOP
 15791  000598  50F5               	movf	tablat,w,c
 15792  00059A  5D97               	subwf	__doprnt@val& (0+255),w,b
 15793  00059C  0009               	tblrd		*+
 15794  00059E  FFFF               	dw	65535	; errata NOP
 15795  0005A0  50F5               	movf	tablat,w,c
 15796  0005A2  5998               	subwfb	(__doprnt@val+1)& (0+255),w,b
 15797  0005A4  A0D8               	btfss	status,0,c
 15798  0005A6  D002               	goto	u5070
 15799                           
 15800                           ; BSR set to: 0
 15801                           
 15802                           ; BSR set to: 0
 15803                           
 15804                           ; BSR set to: 0
 15805                           ;doprnt.c: 1307: break;
 15806  0005A8  2BA0               	incf	__doprnt@c& (0+255),f,b
 15807  0005AA  D7E7               	goto	l5116
 15808  0005AC                     u5070:
 15809  0005AC  FFFF               	dw	65535	; assembler added errata NOP
 15810                           
 15811                           ; BSR set to: 0
 15812                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15813                           
 15814                           ; BSR set to: 0
 15815  0005AE  519E               	movf	__doprnt@width& (0+255),w,b
 15816  0005B0  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 15817  0005B2  B4D8               	btfsc	status,2,c
 15818  0005B4  D009               	goto	l1079
 15819                           
 15820                           ; BSR set to: 0
 15821  0005B6  C09B  F092         	movff	__doprnt@flag,??__doprnt
 15822  0005BA  0E03               	movlw	3
 15823  0005BC  1792               	andwf	??__doprnt& (0+255),f,b
 15824  0005BE  B4D8               	btfsc	status,2,c
 15825  0005C0  D003               	goto	l1079
 15826                           
 15827                           ; BSR set to: 0
 15828                           ;doprnt.c: 1346: width--;
 15829  0005C2  079E               	decf	__doprnt@width& (0+255),f,b
 15830  0005C4  A0D8               	btfss	status,0,c
 15831  0005C6  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 15832  0005C8                     l1079:
 15833  0005C8  FFFF               	dw	65535	; assembler added errata NOP
 15834                           
 15835                           ; BSR set to: 0
 15836                           ;doprnt.c: 1381: if(width > c)
 15837                           
 15838                           ; BSR set to: 0
 15839  0005CA  0E80               	movlw	128
 15840  0005CC  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 15841  0005CE  0E7F               	movlw	127
 15842  0005D0  6F92               	movwf	??__doprnt& (0+255),b
 15843  0005D2  519E               	movf	__doprnt@width& (0+255),w,b
 15844  0005D4  5DA0               	subwf	__doprnt@c& (0+255),w,b
 15845  0005D6  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 15846  0005D8  0A80               	xorlw	128
 15847  0005DA  5992               	subwfb	??__doprnt& (0+255),w,b
 15848  0005DC  B0D8               	btfsc	status,0,c
 15849  0005DE  D007               	goto	l1080
 15850                           
 15851                           ; BSR set to: 0
 15852                           ;doprnt.c: 1382: width -= c;
 15853  0005E0  51A0               	movf	__doprnt@c& (0+255),w,b
 15854  0005E2  5F9E               	subwf	__doprnt@width& (0+255),f,b
 15855  0005E4  0E00               	movlw	0
 15856  0005E6  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 15857  0005E8  0EFF               	movlw	255
 15858  0005EA  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 15859  0005EC  D005               	goto	l1081
 15860  0005EE                     l1080:
 15861  0005EE  FFFF               	dw	65535	; assembler added errata NOP
 15862                           
 15863                           ; BSR set to: 0
 15864                           ;doprnt.c: 1383: else
 15865                           ;doprnt.c: 1384: width = 0;
 15866                           
 15867                           ; BSR set to: 0
 15868  0005F0  0E00               	movlw	0
 15869  0005F2  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15870  0005F4  0E00               	movlw	0
 15871  0005F6  6F9E               	movwf	__doprnt@width& (0+255),b
 15872  0005F8                     l1081:
 15873  0005F8  FFFF               	dw	65535	; assembler added errata NOP
 15874                           
 15875                           ; BSR set to: 0
 15876                           ;doprnt.c: 1387: if(flag & 0x04) {
 15877                           
 15878                           ; BSR set to: 0
 15879  0005FA  A59B               	btfss	__doprnt@flag& (0+255),2,b
 15880  0005FC  D07F               	goto	l1082
 15881                           
 15882                           ; BSR set to: 0
 15883                           ;doprnt.c: 1392: if(flag & 0x03)
 15884  0005FE  C09B  F092         	movff	__doprnt@flag,??__doprnt
 15885  000602  0E03               	movlw	3
 15886  000604  1792               	andwf	??__doprnt& (0+255),f,b
 15887  000606  B4D8               	btfsc	status,2,c
 15888  000608  D036               	goto	l1085
 15889                           
 15890                           ; BSR set to: 0
 15891                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 15892  00060A  EE20 F002          	lfsr	2,2
 15893  00060E  518C               	movf	__doprnt@pb& (0+255),w,b
 15894  000610  26D9               	addwf	fsr2l,f,c
 15895  000612  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15896  000614  22DA               	addwfc	fsr2h,f,c
 15897  000616  50DE               	movf	postinc2,w,c
 15898  000618  10DE               	iorwf	postinc2,w,c
 15899  00061A  B4D8               	btfsc	status,2,c
 15900  00061C  D016               	goto	l1084
 15901                           
 15902                           ; BSR set to: 0
 15903  00061E  EE20 F002          	lfsr	2,2
 15904  000622  518C               	movf	__doprnt@pb& (0+255),w,b
 15905  000624  26D9               	addwf	fsr2l,f,c
 15906  000626  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15907  000628  22DA               	addwfc	fsr2h,f,c
 15908  00062A  D801               	call	u5148
 15909  00062C  D024               	goto	l1085
 15910  00062E                     u5148:
 15911  00062E  FFFF               	dw	65535	; assembler added errata NOP
 15912  000630  0005               	push	
 15913  000632  6EFA               	movwf	pclath,c
 15914  000634  50DE               	movf	postinc2,w,c
 15915  000636  6EFD               	movwf	tosl,c
 15916  000638  50DE               	movf	postinc2,w,c
 15917  00063A  6EFE               	movwf	tosh,c
 15918  00063C  50F8               	movf	tblptru,w,c
 15919  00063E  6EFF               	movwf	tosu,c
 15920  000640  50FA               	movf	pclath,w,c
 15921  000642  0E2D               	movlw	45
 15922  000644  0012               	return		;indir
 15923  000646  FFFF               	dw	65535	; errata NOP
 15924  000648  D016               	goto	l1085
 15925  00064A                     l1084:
 15926  00064A  FFFF               	dw	65535	; assembler added errata NOP
 15927  00064C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15928  000650  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15929  000654  CFDE F092          	movff	postinc2,??__doprnt
 15930  000658  CFDD F093          	movff	postdec2,??__doprnt+1
 15931  00065C  C092  FFD9         	movff	??__doprnt,fsr2l
 15932  000660  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15933  000664  0E2D               	movlw	45
 15934  000666  6EDF               	movwf	indf2,c
 15935  000668  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15936  00066C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15937  000670  2ADE               	incf	postinc2,f,c
 15938  000672  0E00               	movlw	0
 15939  000674  22DD               	addwfc	postdec2,f,c
 15940  000676                     l1085:
 15941  000676  FFFF               	dw	65535	; assembler added errata NOP
 15942                           
 15943                           ;doprnt.c: 1415: if(width)
 15944  000678  0100               	movlb	0	; () banked
 15945  00067A  FFFF               	dw	65535	; assembler added errata NOP
 15946  00067C  519E               	movf	__doprnt@width& (0+255),w,b
 15947  00067E  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 15948  000680  B4D8               	btfsc	status,2,c
 15949  000682  D0BE               	goto	l1099
 15950                           
 15951                           ; BSR set to: 0
 15952                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 15953                           
 15954                           ; BSR set to: 0
 15955                           
 15956                           ;doprnt.c: 1416: do
 15957  000684  EE20 F002          	lfsr	2,2
 15958  000688  518C               	movf	__doprnt@pb& (0+255),w,b
 15959  00068A  26D9               	addwf	fsr2l,f,c
 15960  00068C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15961  00068E  22DA               	addwfc	fsr2h,f,c
 15962  000690  50DE               	movf	postinc2,w,c
 15963  000692  10DE               	iorwf	postinc2,w,c
 15964  000694  B4D8               	btfsc	status,2,c
 15965  000696  D016               	goto	l1088
 15966                           
 15967                           ; BSR set to: 0
 15968  000698  EE20 F002          	lfsr	2,2
 15969  00069C  518C               	movf	__doprnt@pb& (0+255),w,b
 15970  00069E  26D9               	addwf	fsr2l,f,c
 15971  0006A0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15972  0006A2  22DA               	addwfc	fsr2h,f,c
 15973  0006A4  D801               	call	u5178
 15974  0006A6  D024               	goto	l1089
 15975  0006A8                     u5178:
 15976  0006A8  FFFF               	dw	65535	; assembler added errata NOP
 15977  0006AA  0005               	push	
 15978  0006AC  6EFA               	movwf	pclath,c
 15979  0006AE  50DE               	movf	postinc2,w,c
 15980  0006B0  6EFD               	movwf	tosl,c
 15981  0006B2  50DE               	movf	postinc2,w,c
 15982  0006B4  6EFE               	movwf	tosh,c
 15983  0006B6  50F8               	movf	tblptru,w,c
 15984  0006B8  6EFF               	movwf	tosu,c
 15985  0006BA  50FA               	movf	pclath,w,c
 15986  0006BC  0E30               	movlw	48
 15987  0006BE  0012               	return		;indir
 15988  0006C0  FFFF               	dw	65535	; errata NOP
 15989  0006C2  D016               	goto	l1089
 15990  0006C4                     l1088:
 15991  0006C4  FFFF               	dw	65535	; assembler added errata NOP
 15992  0006C6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15993  0006CA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15994  0006CE  CFDE F092          	movff	postinc2,??__doprnt
 15995  0006D2  CFDD F093          	movff	postdec2,??__doprnt+1
 15996  0006D6  C092  FFD9         	movff	??__doprnt,fsr2l
 15997  0006DA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15998  0006DE  0E30               	movlw	48
 15999  0006E0  6EDF               	movwf	indf2,c
 16000  0006E2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16001  0006E6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16002  0006EA  2ADE               	incf	postinc2,f,c
 16003  0006EC  0E00               	movlw	0
 16004  0006EE  22DD               	addwfc	postdec2,f,c
 16005  0006F0                     l1089:
 16006  0006F0  FFFF               	dw	65535	; assembler added errata NOP
 16007                           
 16008                           ;doprnt.c: 1418: while(--width);
 16009  0006F2  0100               	movlb	0	; () banked
 16010  0006F4  079E               	decf	__doprnt@width& (0+255),f,b
 16011  0006F6  A0D8               	btfss	status,0,c
 16012  0006F8  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 16013  0006FA  D7BF               	goto	L46
 16014  0006FC                     l1082:
 16015  0006FC  FFFF               	dw	65535	; assembler added errata NOP
 16016                           
 16017                           ; BSR set to: 0
 16018                           ;doprnt.c: 1422: {
 16019                           ;doprnt.c: 1424: if(width
 16020                           ;doprnt.c: 1428: )
 16021                           
 16022                           ; BSR set to: 0
 16023  0006FE  519E               	movf	__doprnt@width& (0+255),w,b
 16024  000700  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 16025  000702  B4D8               	btfsc	status,2,c
 16026  000704  D040               	goto	u5220
 16027  000706                     u5190:
 16028  000706  FFFF               	dw	65535	; assembler added errata NOP
 16029                           
 16030                           ; BSR set to: 0
 16031                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 16032                           
 16033                           ; BSR set to: 0
 16034                           
 16035                           ;doprnt.c: 1429: do
 16036  000708  EE20 F002          	lfsr	2,2
 16037  00070C  518C               	movf	__doprnt@pb& (0+255),w,b
 16038  00070E  26D9               	addwf	fsr2l,f,c
 16039  000710  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16040  000712  22DA               	addwfc	fsr2h,f,c
 16041  000714  50DE               	movf	postinc2,w,c
 16042  000716  10DE               	iorwf	postinc2,w,c
 16043  000718  B4D8               	btfsc	status,2,c
 16044  00071A  D016               	goto	l1094
 16045                           
 16046                           ; BSR set to: 0
 16047  00071C  EE20 F002          	lfsr	2,2
 16048  000720  518C               	movf	__doprnt@pb& (0+255),w,b
 16049  000722  26D9               	addwf	fsr2l,f,c
 16050  000724  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16051  000726  22DA               	addwfc	fsr2h,f,c
 16052  000728  D801               	call	u5218
 16053  00072A  D024               	goto	l1095
 16054  00072C                     u5218:
 16055  00072C  FFFF               	dw	65535	; assembler added errata NOP
 16056  00072E  0005               	push	
 16057  000730  6EFA               	movwf	pclath,c
 16058  000732  50DE               	movf	postinc2,w,c
 16059  000734  6EFD               	movwf	tosl,c
 16060  000736  50DE               	movf	postinc2,w,c
 16061  000738  6EFE               	movwf	tosh,c
 16062  00073A  50F8               	movf	tblptru,w,c
 16063  00073C  6EFF               	movwf	tosu,c
 16064  00073E  50FA               	movf	pclath,w,c
 16065  000740  0E20               	movlw	32
 16066  000742  0012               	return		;indir
 16067  000744  FFFF               	dw	65535	; errata NOP
 16068  000746  D016               	goto	l1095
 16069  000748                     l1094:
 16070  000748  FFFF               	dw	65535	; assembler added errata NOP
 16071  00074A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16072  00074E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16073  000752  CFDE F092          	movff	postinc2,??__doprnt
 16074  000756  CFDD F093          	movff	postdec2,??__doprnt+1
 16075  00075A  C092  FFD9         	movff	??__doprnt,fsr2l
 16076  00075E  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16077  000762  0E20               	movlw	32
 16078  000764  6EDF               	movwf	indf2,c
 16079  000766  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16080  00076A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16081  00076E  2ADE               	incf	postinc2,f,c
 16082  000770  0E00               	movlw	0
 16083  000772  22DD               	addwfc	postdec2,f,c
 16084  000774                     l1095:
 16085  000774  FFFF               	dw	65535	; assembler added errata NOP
 16086                           
 16087                           ;doprnt.c: 1431: while(--width);
 16088  000776  0100               	movlb	0	; () banked
 16089  000778  079E               	decf	__doprnt@width& (0+255),f,b
 16090  00077A  A0D8               	btfss	status,0,c
 16091  00077C  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 16092  00077E  519E               	movf	__doprnt@width& (0+255),w,b
 16093  000780  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 16094  000782  A4D8               	btfss	status,2,c
 16095  000784  D7C0               	goto	u5190
 16096  000786                     u5220:
 16097  000786  FFFF               	dw	65535	; assembler added errata NOP
 16098                           
 16099                           ; BSR set to: 0
 16100                           ;doprnt.c: 1438: if(flag & 0x03)
 16101                           
 16102                           ; BSR set to: 0
 16103                           
 16104                           ; BSR set to: 0
 16105  000788  C09B  F092         	movff	__doprnt@flag,??__doprnt
 16106  00078C  0E03               	movlw	3
 16107  00078E  1792               	andwf	??__doprnt& (0+255),f,b
 16108  000790  B4D8               	btfsc	status,2,c
 16109  000792  D036               	goto	l1099
 16110                           
 16111                           ; BSR set to: 0
 16112                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 16113  000794  EE20 F002          	lfsr	2,2
 16114  000798  518C               	movf	__doprnt@pb& (0+255),w,b
 16115  00079A  26D9               	addwf	fsr2l,f,c
 16116  00079C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16117  00079E  22DA               	addwfc	fsr2h,f,c
 16118  0007A0  50DE               	movf	postinc2,w,c
 16119  0007A2  10DE               	iorwf	postinc2,w,c
 16120  0007A4  B4D8               	btfsc	status,2,c
 16121  0007A6  D016               	goto	l1098
 16122                           
 16123                           ; BSR set to: 0
 16124  0007A8  EE20 F002          	lfsr	2,2
 16125  0007AC  518C               	movf	__doprnt@pb& (0+255),w,b
 16126  0007AE  26D9               	addwf	fsr2l,f,c
 16127  0007B0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16128  0007B2  22DA               	addwfc	fsr2h,f,c
 16129  0007B4  D801               	call	u5258
 16130  0007B6  D024               	goto	l1099
 16131  0007B8                     u5258:
 16132  0007B8  FFFF               	dw	65535	; assembler added errata NOP
 16133  0007BA  0005               	push	
 16134  0007BC  6EFA               	movwf	pclath,c
 16135  0007BE  50DE               	movf	postinc2,w,c
 16136  0007C0  6EFD               	movwf	tosl,c
 16137  0007C2  50DE               	movf	postinc2,w,c
 16138  0007C4  6EFE               	movwf	tosh,c
 16139  0007C6  50F8               	movf	tblptru,w,c
 16140  0007C8  6EFF               	movwf	tosu,c
 16141  0007CA  50FA               	movf	pclath,w,c
 16142  0007CC  0E2D               	movlw	45
 16143  0007CE  0012               	return		;indir
 16144  0007D0  FFFF               	dw	65535	; errata NOP
 16145  0007D2  D016               	goto	l1099
 16146  0007D4                     l1098:
 16147  0007D4  FFFF               	dw	65535	; assembler added errata NOP
 16148  0007D6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16149  0007DA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16150  0007DE  CFDE F092          	movff	postinc2,??__doprnt
 16151  0007E2  CFDD F093          	movff	postdec2,??__doprnt+1
 16152  0007E6  C092  FFD9         	movff	??__doprnt,fsr2l
 16153  0007EA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16154  0007EE  0E2D               	movlw	45
 16155  0007F0  6EDF               	movwf	indf2,c
 16156  0007F2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16157  0007F6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16158  0007FA  2ADE               	incf	postinc2,f,c
 16159  0007FC  0E00               	movlw	0
 16160  0007FE  22DD               	addwfc	postdec2,f,c
 16161  000800                     l1099:
 16162  000800  FFFF               	dw	65535	; assembler added errata NOP
 16163                           
 16164                           ;doprnt.c: 1469: }
 16165                           ;doprnt.c: 1472: prec = c;
 16166  000802  C0A0  F096         	movff	__doprnt@c,__doprnt@prec
 16167                           
 16168                           ;doprnt.c: 1474: while(prec--) {
 16169  000806  D05D               	goto	l1103
 16170  000808  FFFF               	dw	65535	; assembler added errata NOP
 16171                           
 16172                           ;doprnt.c: 1478: {
 16173                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16174  00080A  0100               	movlb	0	; () banked
 16175  00080C  5196               	movf	__doprnt@prec& (0+255),w,b
 16176  00080E  0D02               	mullw	2
 16177  000810  0ECD               	movlw	low _dpowers
 16178  000812  24F3               	addwf	prodl,w,c
 16179  000814  6EF6               	movwf	tblptrl,c
 16180  000816  0E7A               	movlw	high _dpowers
 16181  000818  20F4               	addwfc	prodh,w,c
 16182  00081A  6EF7               	movwf	tblptrh,c
 16183  00081C                     	if	0	;There are less than 3 active tblptr bytes
 16184  00081C                     	endif
 16185  00081C  0009               	tblrd		*+
 16186  00081E  FFFF               	dw	65535	; errata NOP
 16187  000820  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16188  000824  000A               	tblrd		*-
 16189  000826  FFFF               	dw	65535	; errata NOP
 16190  000828  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16191  00082C  C097  F080         	movff	__doprnt@val,___lwdiv@dividend
 16192  000830  C098  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
 16193  000834  ECE7  F03A         	call	___lwdiv
 16194  000838  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16195  00083C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16196  000840  0E00               	movlw	0
 16197  000842  0100               	movlb	0	; () banked
 16198  000844  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16199  000846  0E0A               	movlw	10
 16200  000848  6F89               	movwf	___lwmod@divisor& (0+255),b
 16201  00084A  EC38  F03A         	call	___lwmod	;wreg free
 16202  00084E  0100               	movlb	0	; () banked
 16203  000850  5187               	movf	?___lwmod& (0+255),w,b
 16204  000852  0F30               	addlw	48
 16205  000854  6FA0               	movwf	__doprnt@c& (0+255),b
 16206                           
 16207                           ; BSR set to: 0
 16208                           ;doprnt.c: 1523: }
 16209                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 16210  000856  EE20 F002          	lfsr	2,2
 16211  00085A  518C               	movf	__doprnt@pb& (0+255),w,b
 16212  00085C  26D9               	addwf	fsr2l,f,c
 16213  00085E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16214  000860  22DA               	addwfc	fsr2h,f,c
 16215  000862  50DE               	movf	postinc2,w,c
 16216  000864  10DE               	iorwf	postinc2,w,c
 16217  000866  B4D8               	btfsc	status,2,c
 16218  000868  D016               	goto	l1102
 16219                           
 16220                           ; BSR set to: 0
 16221  00086A  EE20 F002          	lfsr	2,2
 16222  00086E  518C               	movf	__doprnt@pb& (0+255),w,b
 16223  000870  26D9               	addwf	fsr2l,f,c
 16224  000872  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16225  000874  22DA               	addwfc	fsr2h,f,c
 16226  000876  D801               	call	u5278
 16227  000878  D024               	goto	l1103
 16228  00087A                     u5278:
 16229  00087A  FFFF               	dw	65535	; assembler added errata NOP
 16230  00087C  0005               	push	
 16231  00087E  6EFA               	movwf	pclath,c
 16232  000880  50DE               	movf	postinc2,w,c
 16233  000882  6EFD               	movwf	tosl,c
 16234  000884  50DE               	movf	postinc2,w,c
 16235  000886  6EFE               	movwf	tosh,c
 16236  000888  50F8               	movf	tblptru,w,c
 16237  00088A  6EFF               	movwf	tosu,c
 16238  00088C  50FA               	movf	pclath,w,c
 16239  00088E  51A0               	movf	__doprnt@c& (0+255),w,b
 16240  000890  0012               	return		;indir
 16241  000892  FFFF               	dw	65535	; errata NOP
 16242  000894  D016               	goto	l1103
 16243  000896                     l1102:
 16244  000896  FFFF               	dw	65535	; assembler added errata NOP
 16245  000898  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16246  00089C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16247  0008A0  CFDE F092          	movff	postinc2,??__doprnt
 16248  0008A4  CFDD F093          	movff	postdec2,??__doprnt+1
 16249  0008A8  C092  FFD9         	movff	??__doprnt,fsr2l
 16250  0008AC  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16251  0008B0  C0A0  FFDF         	movff	__doprnt@c,indf2
 16252  0008B4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16253  0008B8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16254  0008BC  2ADE               	incf	postinc2,f,c
 16255  0008BE  0E00               	movlw	0
 16256  0008C0  22DD               	addwfc	postdec2,f,c
 16257  0008C2                     l1103:
 16258  0008C2  FFFF               	dw	65535	; assembler added errata NOP
 16259  0008C4  0100               	movlb	0	; () banked
 16260  0008C6  0796               	decf	__doprnt@prec& (0+255),f,b
 16261  0008C8  2996               	incf	__doprnt@prec& (0+255),w,b
 16262  0008CA  A4D8               	btfss	status,2,c
 16263  0008CC  D79D               	goto	l1101
 16264  0008CE                     u5280:
 16265  0008CE  FFFF               	dw	65535	; assembler added errata NOP
 16266                           
 16267                           ; BSR set to: 0
 16268                           
 16269                           ; BSR set to: 0
 16270  0008D0  0100               	movlb	0	; () banked
 16271  0008D2  518E               	movf	__doprnt@f& (0+255),w,b
 16272  0008D4  6F92               	movwf	??__doprnt& (0+255),b
 16273  0008D6  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 16274  0008D8  6F93               	movwf	(??__doprnt+1)& (0+255),b
 16275  0008DA  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 16276  0008DC  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 16277  0008DE  C092  FFF6         	movff	??__doprnt,tblptrl
 16278  0008E2  C093  FFF7         	movff	??__doprnt+1,tblptrh
 16279  0008E6  6AF8               	clrf	tblptru,c
 16280  0008E8  0E05               	movlw	(high __ramtop+-1)
 16281  0008EA  64F7               	cpfsgt	tblptrh,c
 16282  0008EC  D004               	bra	u5297
 16283  0008EE  0008               	tblrd		*
 16284  0008F0  FFFF               	dw	65535	; errata NOP
 16285  0008F2  50F5               	movf	tablat,w,c
 16286  0008F4  D005               	bra	u5290
 16287  0008F6                     u5297:
 16288  0008F6  CFF6 FFE9          	movff	tblptrl,fsr0l
 16289  0008FA  CFF7 FFEA          	movff	tblptrh,fsr0h
 16290  0008FE  50EF               	movf	indf0,w,c
 16291  000900                     u5290:
 16292  000900  0100               	movlb	0	; () banked
 16293  000902  6FA0               	movwf	__doprnt@c& (0+255),b
 16294  000904  51A0               	movf	__doprnt@c& (0+255),w,b
 16295  000906  A4D8               	btfss	status,2,c
 16296  000908  D40B               	goto	l1036
 16297  00090A                     u5300:
 16298  00090A  FFFF               	dw	65535	; assembler added errata NOP
 16299                           
 16300                           ;doprnt.c: 1540: return 0;
 16301                           
 16302                           ; BSR set to: 0
 16303                           
 16304                           ;doprnt.c: 1525: }
 16305                           ;doprnt.c: 1533: }
 16306                           ;doprnt.c: 1535: alldone:
 16307                           
 16308                           ; BSR set to: 0
 16309  00090C  0E00               	movlw	0
 16310  00090E  0100               	movlb	0	; () banked
 16311  000910  6F8D               	movwf	(?__doprnt+1)& (0+255),b
 16312  000912  0E00               	movlw	0
 16313  000914  6F8C               	movwf	?__doprnt& (0+255),b
 16314                           
 16315                           ; BSR set to: 0
 16316                           
 16317                           ; BSR set to: 0
 16318  000916  0012               	return		;funcret
 16319  000918  FFFF               	dw	65535	; errata NOP
 16320  00091A                     __end_of__doprnt:
 16321                           	opt stack 0
 16322                           tosu	equ	0xFFF
 16323                           tosh	equ	0xFFE
 16324                           tosl	equ	0xFFD
 16325                           pclath	equ	0xFFA
 16326                           tblptru	equ	0xFF8
 16327                           tblptrh	equ	0xFF7
 16328                           tblptrl	equ	0xFF6
 16329                           tablat	equ	0xFF5
 16330                           prodh	equ	0xFF4
 16331                           prodl	equ	0xFF3
 16332                           intcon	equ	0xFF2
 16333                           indf0	equ	0xFEF
 16334                           postinc0	equ	0xFEE
 16335                           fsr0h	equ	0xFEA
 16336                           fsr0l	equ	0xFE9
 16337                           wreg	equ	0xFE8
 16338                           postdec1	equ	0xFE5
 16339                           fsr1l	equ	0xFE1
 16340                           indf2	equ	0xFDF
 16341                           postinc2	equ	0xFDE
 16342                           postdec2	equ	0xFDD
 16343                           fsr2h	equ	0xFDA
 16344                           fsr2l	equ	0xFD9
 16345                           status	equ	0xFD8
 16346                           
 16347 ;; *************** function _putch *****************
 16348 ;; Defined at:
 16349 ;;		line 16 in file "serial.h"
 16350 ;; Parameters:    Size  Location     Type
 16351 ;;  c               1    wreg     unsigned char 
 16352 ;; Auto vars:     Size  Location     Type
 16353 ;;  c               1    0[BANK0 ] unsigned char 
 16354 ;; Return value:  Size  Location     Type
 16355 ;;                  1    wreg      void 
 16356 ;; Registers used:
 16357 ;;		wreg
 16358 ;; Tracked objects:
 16359 ;;		On entry : 0/0
 16360 ;;		On exit  : 0/0
 16361 ;;		Unchanged: 0/0
 16362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16363 ;;      Params:         0       0       0       0       0       0       0
 16364 ;;      Locals:         0       1       0       0       0       0       0
 16365 ;;      Temps:          0       0       0       0       0       0       0
 16366 ;;      Totals:         0       1       0       0       0       0       0
 16367 ;;Total ram usage:        1 bytes
 16368 ;; Hardware stack levels used:    1
 16369 ;; Hardware stack levels required when called:    6
 16370 ;; This function calls:
 16371 ;;		Nothing
 16372 ;; This function is called by:
 16373 ;;		_printf
 16374 ;;		__doprnt
 16375 ;; This function uses a non-reentrant model
 16376 ;;
 16377                           
 16378                           	psect	text49
 16379  006D2C                     __ptext49:
 16380                           	opt stack 0
 16381  006D2C                     _putch:
 16382                           	opt stack 0
 16383  006D2C  FFFF               	dw	65535	; assembler added errata NOP
 16384                           
 16385                           ; BSR set to: 0
 16386                           ;incstack = 0
 16387                           ;putch@c stored from wreg
 16388  006D2E  0100               	movlb	0	; () banked
 16389  006D30  6F80               	movwf	putch@c& (0+255),b
 16390  006D32  FFFF               	dw	65535	; assembler added errata NOP
 16391                           
 16392                           ;serial.h: 17: while (!TXSTAbits.TRMT);
 16393  006D34  A2AC               	btfss	4012,1,c	;volatile
 16394  006D36  D7FD               	goto	l4836
 16395                           
 16396                           ;serial.h: 18: TXREG = c;
 16397  006D38  C080  FFAD         	movff	putch@c,4013	;volatile
 16398  006D3C  0012               	return		;funcret
 16399  006D3E  FFFF               	dw	65535	; errata NOP
 16400  006D40                     __end_of_putch:
 16401                           	opt stack 0
 16402                           tosu	equ	0xFFF
 16403                           tosh	equ	0xFFE
 16404                           tosl	equ	0xFFD
 16405                           pclath	equ	0xFFA
 16406                           tblptru	equ	0xFF8
 16407                           tblptrh	equ	0xFF7
 16408                           tblptrl	equ	0xFF6
 16409                           tablat	equ	0xFF5
 16410                           prodh	equ	0xFF4
 16411                           prodl	equ	0xFF3
 16412                           intcon	equ	0xFF2
 16413                           indf0	equ	0xFEF
 16414                           postinc0	equ	0xFEE
 16415                           fsr0h	equ	0xFEA
 16416                           fsr0l	equ	0xFE9
 16417                           wreg	equ	0xFE8
 16418                           postdec1	equ	0xFE5
 16419                           fsr1l	equ	0xFE1
 16420                           indf2	equ	0xFDF
 16421                           postinc2	equ	0xFDE
 16422                           postdec2	equ	0xFDD
 16423                           fsr2h	equ	0xFDA
 16424                           fsr2l	equ	0xFD9
 16425                           status	equ	0xFD8
 16426                           
 16427 ;; *************** function _isdigit *****************
 16428 ;; Defined at:
 16429 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 16430 ;; Parameters:    Size  Location     Type
 16431 ;;  c               1    wreg     unsigned char 
 16432 ;; Auto vars:     Size  Location     Type
 16433 ;;  c               1    2[BANK0 ] unsigned char 
 16434 ;; Return value:  Size  Location     Type
 16435 ;;		None               void
 16436 ;; Registers used:
 16437 ;;		wreg, status,2, status,0
 16438 ;; Tracked objects:
 16439 ;;		On entry : 0/0
 16440 ;;		On exit  : 0/0
 16441 ;;		Unchanged: 0/0
 16442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16443 ;;      Params:         0       0       0       0       0       0       0
 16444 ;;      Locals:         0       2       0       0       0       0       0
 16445 ;;      Temps:          0       1       0       0       0       0       0
 16446 ;;      Totals:         0       3       0       0       0       0       0
 16447 ;;Total ram usage:        3 bytes
 16448 ;; Hardware stack levels used:    1
 16449 ;; Hardware stack levels required when called:    6
 16450 ;; This function calls:
 16451 ;;		Nothing
 16452 ;; This function is called by:
 16453 ;;		__doprnt
 16454 ;;		_atoi
 16455 ;; This function uses a non-reentrant model
 16456 ;;
 16457                           
 16458                           	psect	text50
 16459  006E14                     __ptext50:
 16460                           	opt stack 0
 16461  006E14                     _isdigit:
 16462                           	opt stack 0
 16463  006E14  FFFF               	dw	65535	; assembler added errata NOP
 16464                           
 16465                           ;incstack = 0
 16466                           ;isdigit@c stored from wreg
 16467  006E16  0100               	movlb	0	; () banked
 16468  006E18  6F82               	movwf	isdigit@c& (0+255),b
 16469  006E1A  0E00               	movlw	0
 16470  006E1C  0100               	movlb	0	; () banked
 16471  006E1E  6F81               	movwf	_isdigit$1866& (0+255),b
 16472                           
 16473                           ; BSR set to: 0
 16474  006E20  0E3A               	movlw	58
 16475  006E22  6182               	cpfslt	isdigit@c& (0+255),b
 16476  006E24  D005               	goto	l1451
 16477                           
 16478                           ; BSR set to: 0
 16479  006E26  0E2F               	movlw	47
 16480  006E28  6582               	cpfsgt	isdigit@c& (0+255),b
 16481  006E2A  D002               	goto	l1451
 16482                           
 16483                           ; BSR set to: 0
 16484  006E2C  0E01               	movlw	1
 16485  006E2E  6F81               	movwf	_isdigit$1866& (0+255),b
 16486  006E30                     l1451:
 16487  006E30  FFFF               	dw	65535	; assembler added errata NOP
 16488                           
 16489                           ; BSR set to: 0
 16490                           
 16491                           ; BSR set to: 0
 16492  006E32  C081  F080         	movff	_isdigit$1866,??_isdigit
 16493  006E36  3180               	rrcf	??_isdigit& (0+255),w,b
 16494                           
 16495                           ; BSR set to: 0
 16496                           
 16497                           ; BSR set to: 0
 16498  006E38  0012               	return		;funcret
 16499  006E3A  FFFF               	dw	65535	; errata NOP
 16500  006E3C                     __end_of_isdigit:
 16501                           	opt stack 0
 16502                           tosu	equ	0xFFF
 16503                           tosh	equ	0xFFE
 16504                           tosl	equ	0xFFD
 16505                           pclath	equ	0xFFA
 16506                           tblptru	equ	0xFF8
 16507                           tblptrh	equ	0xFF7
 16508                           tblptrl	equ	0xFF6
 16509                           tablat	equ	0xFF5
 16510                           prodh	equ	0xFF4
 16511                           prodl	equ	0xFF3
 16512                           intcon	equ	0xFF2
 16513                           indf0	equ	0xFEF
 16514                           postinc0	equ	0xFEE
 16515                           fsr0h	equ	0xFEA
 16516                           fsr0l	equ	0xFE9
 16517                           wreg	equ	0xFE8
 16518                           postdec1	equ	0xFE5
 16519                           fsr1l	equ	0xFE1
 16520                           indf2	equ	0xFDF
 16521                           postinc2	equ	0xFDE
 16522                           postdec2	equ	0xFDD
 16523                           fsr2h	equ	0xFDA
 16524                           fsr2l	equ	0xFD9
 16525                           status	equ	0xFD8
 16526                           
 16527 ;; *************** function ___wmul *****************
 16528 ;; Defined at:
 16529 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16530 ;; Parameters:    Size  Location     Type
 16531 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16532 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16533 ;; Auto vars:     Size  Location     Type
 16534 ;;  product         2    4[BANK0 ] unsigned int 
 16535 ;; Return value:  Size  Location     Type
 16536 ;;                  2    0[BANK0 ] unsigned int 
 16537 ;; Registers used:
 16538 ;;		wreg, status,2, status,0, prodl, prodh
 16539 ;; Tracked objects:
 16540 ;;		On entry : 0/0
 16541 ;;		On exit  : 0/0
 16542 ;;		Unchanged: 0/0
 16543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16544 ;;      Params:         0       4       0       0       0       0       0
 16545 ;;      Locals:         0       2       0       0       0       0       0
 16546 ;;      Temps:          0       0       0       0       0       0       0
 16547 ;;      Totals:         0       6       0       0       0       0       0
 16548 ;;Total ram usage:        6 bytes
 16549 ;; Hardware stack levels used:    1
 16550 ;; Hardware stack levels required when called:    6
 16551 ;; This function calls:
 16552 ;;		Nothing
 16553 ;; This function is called by:
 16554 ;;		__doprnt
 16555 ;;		_atoi
 16556 ;; This function uses a non-reentrant model
 16557 ;;
 16558                           
 16559                           	psect	text51
 16560  006E90                     __ptext51:
 16561                           	opt stack 0
 16562  006E90                     ___wmul:
 16563                           	opt stack 0
 16564  006E90  FFFF               	dw	65535	; assembler added errata NOP
 16565                           
 16566                           ; BSR set to: 0
 16567                           ;incstack = 0
 16568  006E92  0100               	movlb	0	; () banked
 16569  006E94  5180               	movf	___wmul@multiplier& (0+255),w,b
 16570  006E96  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16571  006E98  CFF3 F084          	movff	prodl,___wmul@product
 16572  006E9C  CFF4 F085          	movff	prodh,___wmul@product+1
 16573  006EA0  5180               	movf	___wmul@multiplier& (0+255),w,b
 16574  006EA2  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16575  006EA4  50F3               	movf	prodl,w,c
 16576  006EA6  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16577  006EA8  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16578  006EAA  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16579  006EAC  50F3               	movf	prodl,w,c
 16580  006EAE  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16581                           
 16582                           ; BSR set to: 0
 16583  006EB0  C084  F080         	movff	___wmul@product,?___wmul
 16584  006EB4  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16585                           
 16586                           ; BSR set to: 0
 16587                           
 16588                           ; BSR set to: 0
 16589  006EB8  0012               	return		;funcret
 16590  006EBA  FFFF               	dw	65535	; errata NOP
 16591  006EBC                     __end_of___wmul:
 16592                           	opt stack 0
 16593                           tosu	equ	0xFFF
 16594                           tosh	equ	0xFFE
 16595                           tosl	equ	0xFFD
 16596                           pclath	equ	0xFFA
 16597                           tblptru	equ	0xFF8
 16598                           tblptrh	equ	0xFF7
 16599                           tblptrl	equ	0xFF6
 16600                           tablat	equ	0xFF5
 16601                           prodh	equ	0xFF4
 16602                           prodl	equ	0xFF3
 16603                           intcon	equ	0xFF2
 16604                           indf0	equ	0xFEF
 16605                           postinc0	equ	0xFEE
 16606                           fsr0h	equ	0xFEA
 16607                           fsr0l	equ	0xFE9
 16608                           wreg	equ	0xFE8
 16609                           postdec1	equ	0xFE5
 16610                           fsr1l	equ	0xFE1
 16611                           indf2	equ	0xFDF
 16612                           postinc2	equ	0xFDE
 16613                           postdec2	equ	0xFDD
 16614                           fsr2h	equ	0xFDA
 16615                           fsr2l	equ	0xFD9
 16616                           status	equ	0xFD8
 16617                           
 16618 ;; *************** function ___lwmod *****************
 16619 ;; Defined at:
 16620 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 16621 ;; Parameters:    Size  Location     Type
 16622 ;;  dividend        2    7[BANK0 ] unsigned int 
 16623 ;;  divisor         2    9[BANK0 ] unsigned int 
 16624 ;; Auto vars:     Size  Location     Type
 16625 ;;  counter         1   11[BANK0 ] unsigned char 
 16626 ;; Return value:  Size  Location     Type
 16627 ;;                  2    7[BANK0 ] unsigned int 
 16628 ;; Registers used:
 16629 ;;		wreg, status,2, status,0
 16630 ;; Tracked objects:
 16631 ;;		On entry : 0/0
 16632 ;;		On exit  : 0/0
 16633 ;;		Unchanged: 0/0
 16634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16635 ;;      Params:         0       4       0       0       0       0       0
 16636 ;;      Locals:         0       1       0       0       0       0       0
 16637 ;;      Temps:          0       0       0       0       0       0       0
 16638 ;;      Totals:         0       5       0       0       0       0       0
 16639 ;;Total ram usage:        5 bytes
 16640 ;; Hardware stack levels used:    1
 16641 ;; Hardware stack levels required when called:    6
 16642 ;; This function calls:
 16643 ;;		Nothing
 16644 ;; This function is called by:
 16645 ;;		__doprnt
 16646 ;; This function uses a non-reentrant model
 16647 ;;
 16648                           
 16649                           	psect	text52
 16650  007470                     __ptext52:
 16651                           	opt stack 0
 16652  007470                     ___lwmod:
 16653                           	opt stack 0
 16654  007470  FFFF               	dw	65535	; assembler added errata NOP
 16655                           
 16656                           ; BSR set to: 0
 16657                           ;incstack = 0
 16658  007472  0100               	movlb	0	; () banked
 16659  007474  5189               	movf	___lwmod@divisor& (0+255),w,b
 16660  007476  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16661  007478  B4D8               	btfsc	status,2,c
 16662  00747A  D01C               	goto	l1545
 16663                           
 16664                           ; BSR set to: 0
 16665  00747C  0E01               	movlw	1
 16666  00747E  6F8B               	movwf	___lwmod@counter& (0+255),b
 16667  007480  D005               	goto	l1540
 16668  007482  FFFF               	dw	65535	; assembler added errata NOP
 16669                           
 16670                           ; BSR set to: 0
 16671                           
 16672                           ; BSR set to: 0
 16673  007484  90D8               	bcf	status,0,c
 16674  007486  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16675  007488  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16676  00748A  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16677  00748C                     l1540:
 16678  00748C  FFFF               	dw	65535	; assembler added errata NOP
 16679                           
 16680                           ; BSR set to: 0
 16681                           
 16682                           ; BSR set to: 0
 16683  00748E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16684  007490  D7F8               	goto	l1541
 16685  007492                     u4620:
 16686  007492  FFFF               	dw	65535	; assembler added errata NOP
 16687                           
 16688                           ; BSR set to: 0
 16689                           
 16690                           ; BSR set to: 0
 16691                           
 16692                           ; BSR set to: 0
 16693  007494  5189               	movf	___lwmod@divisor& (0+255),w,b
 16694  007496  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16695  007498  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16696  00749A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16697  00749C  A0D8               	btfss	status,0,c
 16698  00749E  D004               	goto	l1544
 16699                           
 16700                           ; BSR set to: 0
 16701  0074A0  5189               	movf	___lwmod@divisor& (0+255),w,b
 16702  0074A2  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16703  0074A4  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16704  0074A6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16705  0074A8                     l1544:
 16706  0074A8  FFFF               	dw	65535	; assembler added errata NOP
 16707                           
 16708                           ; BSR set to: 0
 16709                           
 16710                           ; BSR set to: 0
 16711  0074AA  90D8               	bcf	status,0,c
 16712  0074AC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16713  0074AE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16714                           
 16715                           ; BSR set to: 0
 16716  0074B0  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16717  0074B2  D7EF               	goto	u4620
 16718  0074B4                     l1545:
 16719  0074B4  FFFF               	dw	65535	; assembler added errata NOP
 16720                           
 16721                           ; BSR set to: 0
 16722                           
 16723                           ; BSR set to: 0
 16724  0074B6  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16725  0074BA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16726                           
 16727                           ; BSR set to: 0
 16728  0074BE  0012               	return		;funcret
 16729  0074C0  FFFF               	dw	65535	; errata NOP
 16730  0074C2                     __end_of___lwmod:
 16731                           	opt stack 0
 16732                           tosu	equ	0xFFF
 16733                           tosh	equ	0xFFE
 16734                           tosl	equ	0xFFD
 16735                           pclath	equ	0xFFA
 16736                           tblptru	equ	0xFF8
 16737                           tblptrh	equ	0xFF7
 16738                           tblptrl	equ	0xFF6
 16739                           tablat	equ	0xFF5
 16740                           prodh	equ	0xFF4
 16741                           prodl	equ	0xFF3
 16742                           intcon	equ	0xFF2
 16743                           indf0	equ	0xFEF
 16744                           postinc0	equ	0xFEE
 16745                           fsr0h	equ	0xFEA
 16746                           fsr0l	equ	0xFE9
 16747                           wreg	equ	0xFE8
 16748                           postdec1	equ	0xFE5
 16749                           fsr1l	equ	0xFE1
 16750                           indf2	equ	0xFDF
 16751                           postinc2	equ	0xFDE
 16752                           postdec2	equ	0xFDD
 16753                           fsr2h	equ	0xFDA
 16754                           fsr2l	equ	0xFD9
 16755                           status	equ	0xFD8
 16756                           
 16757 ;; *************** function ___lwdiv *****************
 16758 ;; Defined at:
 16759 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 16760 ;; Parameters:    Size  Location     Type
 16761 ;;  dividend        2    0[BANK0 ] unsigned int 
 16762 ;;  divisor         2    2[BANK0 ] unsigned int 
 16763 ;; Auto vars:     Size  Location     Type
 16764 ;;  quotient        2    4[BANK0 ] unsigned int 
 16765 ;;  counter         1    6[BANK0 ] unsigned char 
 16766 ;; Return value:  Size  Location     Type
 16767 ;;                  2    0[BANK0 ] unsigned int 
 16768 ;; Registers used:
 16769 ;;		wreg, status,2, status,0
 16770 ;; Tracked objects:
 16771 ;;		On entry : 0/0
 16772 ;;		On exit  : 0/0
 16773 ;;		Unchanged: 0/0
 16774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16775 ;;      Params:         0       4       0       0       0       0       0
 16776 ;;      Locals:         0       3       0       0       0       0       0
 16777 ;;      Temps:          0       0       0       0       0       0       0
 16778 ;;      Totals:         0       7       0       0       0       0       0
 16779 ;;Total ram usage:        7 bytes
 16780 ;; Hardware stack levels used:    1
 16781 ;; Hardware stack levels required when called:    6
 16782 ;; This function calls:
 16783 ;;		Nothing
 16784 ;; This function is called by:
 16785 ;;		__doprnt
 16786 ;; This function uses a non-reentrant model
 16787 ;;
 16788                           
 16789                           	psect	text53
 16790  0075CE                     __ptext53:
 16791                           	opt stack 0
 16792  0075CE                     ___lwdiv:
 16793                           	opt stack 0
 16794  0075CE  FFFF               	dw	65535	; assembler added errata NOP
 16795                           
 16796                           ; BSR set to: 0
 16797                           ;incstack = 0
 16798  0075D0  0E00               	movlw	0
 16799  0075D2  0100               	movlb	0	; () banked
 16800  0075D4  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16801  0075D6  0E00               	movlw	0
 16802  0075D8  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16803                           
 16804                           ; BSR set to: 0
 16805  0075DA  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16806  0075DC  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16807  0075DE  B4D8               	btfsc	status,2,c
 16808  0075E0  D020               	goto	l1535
 16809                           
 16810                           ; BSR set to: 0
 16811  0075E2  0E01               	movlw	1
 16812  0075E4  6F86               	movwf	___lwdiv@counter& (0+255),b
 16813  0075E6  D005               	goto	l1530
 16814  0075E8  FFFF               	dw	65535	; assembler added errata NOP
 16815                           
 16816                           ; BSR set to: 0
 16817                           
 16818                           ; BSR set to: 0
 16819  0075EA  90D8               	bcf	status,0,c
 16820  0075EC  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16821  0075EE  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16822  0075F0  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16823  0075F2                     l1530:
 16824  0075F2  FFFF               	dw	65535	; assembler added errata NOP
 16825                           
 16826                           ; BSR set to: 0
 16827                           
 16828                           ; BSR set to: 0
 16829  0075F4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16830  0075F6  D7F8               	goto	l1531
 16831  0075F8                     u4590:
 16832  0075F8  FFFF               	dw	65535	; assembler added errata NOP
 16833                           
 16834                           ; BSR set to: 0
 16835                           
 16836                           ; BSR set to: 0
 16837                           
 16838                           ; BSR set to: 0
 16839  0075FA  90D8               	bcf	status,0,c
 16840  0075FC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16841  0075FE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16842                           
 16843                           ; BSR set to: 0
 16844  007600  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16845  007602  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16846  007604  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16847  007606  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16848  007608  A0D8               	btfss	status,0,c
 16849  00760A  D005               	goto	l1534
 16850                           
 16851                           ; BSR set to: 0
 16852  00760C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16853  00760E  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16854  007610  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16855  007612  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16856                           
 16857                           ; BSR set to: 0
 16858  007614  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16859  007616                     l1534:
 16860  007616  FFFF               	dw	65535	; assembler added errata NOP
 16861                           
 16862                           ; BSR set to: 0
 16863                           
 16864                           ; BSR set to: 0
 16865  007618  90D8               	bcf	status,0,c
 16866  00761A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16867  00761C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16868                           
 16869                           ; BSR set to: 0
 16870  00761E  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16871  007620  D7EB               	goto	u4590
 16872  007622                     l1535:
 16873  007622  FFFF               	dw	65535	; assembler added errata NOP
 16874                           
 16875                           ; BSR set to: 0
 16876                           
 16877                           ; BSR set to: 0
 16878  007624  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16879  007628  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16880                           
 16881                           ; BSR set to: 0
 16882  00762C  0012               	return		;funcret
 16883  00762E  FFFF               	dw	65535	; errata NOP
 16884  007630                     __end_of___lwdiv:
 16885                           	opt stack 0
 16886                           tosu	equ	0xFFF
 16887                           tosh	equ	0xFFE
 16888                           tosl	equ	0xFFD
 16889                           pclath	equ	0xFFA
 16890                           tblptru	equ	0xFF8
 16891                           tblptrh	equ	0xFF7
 16892                           tblptrl	equ	0xFF6
 16893                           tablat	equ	0xFF5
 16894                           prodh	equ	0xFF4
 16895                           prodl	equ	0xFF3
 16896                           intcon	equ	0xFF2
 16897                           indf0	equ	0xFEF
 16898                           postinc0	equ	0xFEE
 16899                           fsr0h	equ	0xFEA
 16900                           fsr0l	equ	0xFE9
 16901                           wreg	equ	0xFE8
 16902                           postdec1	equ	0xFE5
 16903                           fsr1l	equ	0xFE1
 16904                           indf2	equ	0xFDF
 16905                           postinc2	equ	0xFDE
 16906                           postdec2	equ	0xFDD
 16907                           fsr2h	equ	0xFDA
 16908                           fsr2l	equ	0xFD9
 16909                           status	equ	0xFD8
 16910                           
 16911 ;; *************** function _limparBuffer *****************
 16912 ;; Defined at:
 16913 ;;		line 34 in file "serial.h"
 16914 ;; Parameters:    Size  Location     Type
 16915 ;;		None
 16916 ;; Auto vars:     Size  Location     Type
 16917 ;;		None
 16918 ;; Return value:  Size  Location     Type
 16919 ;;                  1    wreg      void 
 16920 ;; Registers used:
 16921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16922 ;; Tracked objects:
 16923 ;;		On entry : 0/0
 16924 ;;		On exit  : 0/0
 16925 ;;		Unchanged: 0/0
 16926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16927 ;;      Params:         0       0       0       0       0       0       0
 16928 ;;      Locals:         0       0       0       0       0       0       0
 16929 ;;      Temps:          0       0       0       0       0       0       0
 16930 ;;      Totals:         0       0       0       0       0       0       0
 16931 ;;Total ram usage:        0 bytes
 16932 ;; Hardware stack levels used:    1
 16933 ;; Hardware stack levels required when called:    7
 16934 ;; This function calls:
 16935 ;;		_delay
 16936 ;;		_memset
 16937 ;; This function is called by:
 16938 ;;		_getSinalSIM800L
 16939 ;;		_comunicarTeste
 16940 ;;		_enviaSMS
 16941 ;; This function uses a non-reentrant model
 16942 ;;
 16943                           
 16944                           	psect	text54
 16945  006FC0                     __ptext54:
 16946                           	opt stack 0
 16947  006FC0                     _limparBuffer:
 16948                           	opt stack 0
 16949  006FC0  FFFF               	dw	65535	; assembler added errata NOP
 16950                           
 16951                           ;serial.h: 35: cbf = 0;
 16952                           
 16953                           ; BSR set to: 0
 16954                           ;incstack = 0
 16955  006FC2  0E00               	movlw	0
 16956  006FC4  6E66               	movwf	_cbf,c
 16957                           
 16958                           ;serial.h: 36: memset(bufferSerial, 0, sizeof (bufferSerial));
 16959  006FC6  0E00               	movlw	low _bufferSerial
 16960  006FC8  0100               	movlb	0	; () banked
 16961  006FCA  6F80               	movwf	memset@p1& (0+255),b
 16962  006FCC  0E01               	movlw	high _bufferSerial
 16963  006FCE  6F81               	movwf	(memset@p1+1)& (0+255),b
 16964  006FD0  0E00               	movlw	0
 16965  006FD2  6F83               	movwf	(memset@c+1)& (0+255),b
 16966  006FD4  0E00               	movlw	0
 16967  006FD6  6F82               	movwf	memset@c& (0+255),b
 16968  006FD8  0E00               	movlw	0
 16969  006FDA  6F85               	movwf	(memset@n+1)& (0+255),b
 16970  006FDC  0E3C               	movlw	60
 16971  006FDE  6F84               	movwf	memset@n& (0+255),b
 16972  006FE0  EC4E  F038         	call	_memset
 16973                           
 16974                           ;serial.h: 37: delay(150);
 16975  006FE4  0E00               	movlw	0
 16976  006FE6  0100               	movlb	0	; () banked
 16977  006FE8  6F81               	movwf	(delay@x+1)& (0+255),b
 16978  006FEA  0E96               	movlw	150
 16979  006FEC  6F80               	movwf	delay@x& (0+255),b
 16980  006FEE  ECC5  F037         	call	_delay	;wreg free
 16981  006FF2  0012               	return		;funcret
 16982  006FF4  FFFF               	dw	65535	; errata NOP
 16983  006FF6                     __end_of_limparBuffer:
 16984                           	opt stack 0
 16985                           tosu	equ	0xFFF
 16986                           tosh	equ	0xFFE
 16987                           tosl	equ	0xFFD
 16988                           pclath	equ	0xFFA
 16989                           tblptru	equ	0xFF8
 16990                           tblptrh	equ	0xFF7
 16991                           tblptrl	equ	0xFF6
 16992                           tablat	equ	0xFF5
 16993                           prodh	equ	0xFF4
 16994                           prodl	equ	0xFF3
 16995                           intcon	equ	0xFF2
 16996                           indf0	equ	0xFEF
 16997                           postinc0	equ	0xFEE
 16998                           fsr0h	equ	0xFEA
 16999                           fsr0l	equ	0xFE9
 17000                           wreg	equ	0xFE8
 17001                           postdec1	equ	0xFE5
 17002                           fsr1l	equ	0xFE1
 17003                           indf2	equ	0xFDF
 17004                           postinc2	equ	0xFDE
 17005                           postdec2	equ	0xFDD
 17006                           fsr2h	equ	0xFDA
 17007                           fsr2l	equ	0xFD9
 17008                           status	equ	0xFD8
 17009                           
 17010 ;; *************** function _memset *****************
 17011 ;; Defined at:
 17012 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 17013 ;; Parameters:    Size  Location     Type
 17014 ;;  p1              2    0[BANK0 ] PTR void 
 17015 ;;		 -> bufferAUX(20), bufferSerial(60), 
 17016 ;;  c               2    2[BANK0 ] int 
 17017 ;;  n               2    4[BANK0 ] unsigned int 
 17018 ;; Auto vars:     Size  Location     Type
 17019 ;;  p               2    6[BANK0 ] PTR unsigned char 
 17020 ;;		 -> bufferAUX(20), bufferSerial(60), 
 17021 ;; Return value:  Size  Location     Type
 17022 ;;                  2    0[BANK0 ] PTR void 
 17023 ;; Registers used:
 17024 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17025 ;; Tracked objects:
 17026 ;;		On entry : 0/0
 17027 ;;		On exit  : 0/0
 17028 ;;		Unchanged: 0/0
 17029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17030 ;;      Params:         0       6       0       0       0       0       0
 17031 ;;      Locals:         0       2       0       0       0       0       0
 17032 ;;      Temps:          0       0       0       0       0       0       0
 17033 ;;      Totals:         0       8       0       0       0       0       0
 17034 ;;Total ram usage:        8 bytes
 17035 ;; Hardware stack levels used:    1
 17036 ;; Hardware stack levels required when called:    6
 17037 ;; This function calls:
 17038 ;;		Nothing
 17039 ;; This function is called by:
 17040 ;;		_limparBuffer
 17041 ;;		_getSerial
 17042 ;; This function uses a non-reentrant model
 17043 ;;
 17044                           
 17045                           	psect	text55
 17046  00709C                     __ptext55:
 17047                           	opt stack 0
 17048  00709C                     _memset:
 17049                           	opt stack 0
 17050  00709C  FFFF               	dw	65535	; assembler added errata NOP
 17051                           
 17052                           ;incstack = 0
 17053  00709E  C080  F086         	movff	memset@p1,memset@p
 17054  0070A2  C081  F087         	movff	memset@p1+1,memset@p+1
 17055  0070A6  D00A               	goto	l1554
 17056  0070A8  FFFF               	dw	65535	; assembler added errata NOP
 17057  0070AA                     l4970:
 17058  0070AA  C086  FFD9         	movff	memset@p,fsr2l
 17059  0070AE  C087  FFDA         	movff	memset@p+1,fsr2h
 17060  0070B2  C082  FFDF         	movff	memset@c,indf2
 17061  0070B6  0100               	movlb	0	; () banked
 17062  0070B8  4B86               	infsnz	memset@p& (0+255),f,b
 17063  0070BA  2B87               	incf	(memset@p+1)& (0+255),f,b
 17064  0070BC                     l1554:
 17065  0070BC  FFFF               	dw	65535	; assembler added errata NOP
 17066                           
 17067                           ; BSR set to: 0
 17068  0070BE  0100               	movlb	0	; () banked
 17069  0070C0  0784               	decf	memset@n& (0+255),f,b
 17070  0070C2  A0D8               	btfss	status,0,c
 17071  0070C4  0785               	decf	(memset@n+1)& (0+255),f,b
 17072  0070C6  2984               	incf	memset@n& (0+255),w,b
 17073  0070C8  E1F0               	bnz	l4970
 17074  0070CA  2985               	incf	(memset@n+1)& (0+255),w,b
 17075  0070CC  B4D8               	btfsc	status,2,c
 17076                           
 17077                           ; BSR set to: 0
 17078                           
 17079                           ; BSR set to: 0
 17080                           ;	Return value of _memset is never used
 17081  0070CE  0012               	return		;funcret
 17082  0070D0  FFFF               	dw	65535	; assembler added errata NOP
 17083  0070D2  D7EA               	goto	l1555
 17084  0070D4  FFFF               	dw	65535	; errata NOP
 17085  0070D6                     __end_of_memset:
 17086                           	opt stack 0
 17087                           tosu	equ	0xFFF
 17088                           tosh	equ	0xFFE
 17089                           tosl	equ	0xFFD
 17090                           pclath	equ	0xFFA
 17091                           tblptru	equ	0xFF8
 17092                           tblptrh	equ	0xFF7
 17093                           tblptrl	equ	0xFF6
 17094                           tablat	equ	0xFF5
 17095                           prodh	equ	0xFF4
 17096                           prodl	equ	0xFF3
 17097                           intcon	equ	0xFF2
 17098                           indf0	equ	0xFEF
 17099                           postinc0	equ	0xFEE
 17100                           fsr0h	equ	0xFEA
 17101                           fsr0l	equ	0xFE9
 17102                           wreg	equ	0xFE8
 17103                           postdec1	equ	0xFE5
 17104                           fsr1l	equ	0xFE1
 17105                           indf2	equ	0xFDF
 17106                           postinc2	equ	0xFDE
 17107                           postdec2	equ	0xFDD
 17108                           fsr2h	equ	0xFDA
 17109                           fsr2l	equ	0xFD9
 17110                           status	equ	0xFD8
 17111                           
 17112 ;; *************** function _aguardaBuffer *****************
 17113 ;; Defined at:
 17114 ;;		line 26 in file "serial.h"
 17115 ;; Parameters:    Size  Location     Type
 17116 ;;  str             2   19[BANK0 ] PTR unsigned char 
 17117 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17118 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17119 ;;		 -> STR_11(3), STR_9(3), STR_6(7), STR_5(3), 
 17120 ;; Auto vars:     Size  Location     Type
 17121 ;;		None
 17122 ;; Return value:  Size  Location     Type
 17123 ;;                  1    wreg      unsigned char 
 17124 ;; Registers used:
 17125 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17126 ;; Tracked objects:
 17127 ;;		On entry : 0/0
 17128 ;;		On exit  : 0/0
 17129 ;;		Unchanged: 0/0
 17130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17131 ;;      Params:         0       2       0       0       0       0       0
 17132 ;;      Locals:         0       0       0       0       0       0       0
 17133 ;;      Temps:          0       0       0       0       0       0       0
 17134 ;;      Totals:         0       2       0       0       0       0       0
 17135 ;;Total ram usage:        2 bytes
 17136 ;; Hardware stack levels used:    1
 17137 ;; Hardware stack levels required when called:    8
 17138 ;; This function calls:
 17139 ;;		_delay
 17140 ;;		_strstr
 17141 ;; This function is called by:
 17142 ;;		_getSinalSIM800L
 17143 ;;		_comunicarTeste
 17144 ;;		_enviaSMS
 17145 ;; This function uses a non-reentrant model
 17146 ;;
 17147                           
 17148                           	psect	text56
 17149  00714C                     __ptext56:
 17150                           	opt stack 0
 17151  00714C                     _aguardaBuffer:
 17152                           	opt stack 0
 17153  00714C  FFFF               	dw	65535	; assembler added errata NOP
 17154                           
 17155                           ;serial.h: 27: if (strstr(bufferSerial, str) != (0)) {
 17156                           
 17157                           ; BSR set to: 0
 17158                           ;incstack = 0
 17159  00714E  0E00               	movlw	low _bufferSerial
 17160  007150  0100               	movlb	0	; () banked
 17161  007152  6F8F               	movwf	strstr@s1& (0+255),b
 17162  007154  0E01               	movlw	high _bufferSerial
 17163  007156  6F90               	movwf	(strstr@s1+1)& (0+255),b
 17164  007158  C093  F091         	movff	aguardaBuffer@str,strstr@s2
 17165  00715C  C094  F092         	movff	aguardaBuffer@str+1,strstr@s2+1
 17166  007160  EC97  F01F         	call	_strstr	;wreg free
 17167  007164  0100               	movlb	0	; () banked
 17168  007166  518F               	movf	?_strstr& (0+255),w,b
 17169  007168  1190               	iorwf	(?_strstr+1)& (0+255),w,b
 17170  00716A  B4D8               	btfsc	status,2,c
 17171  00716C  D008               	goto	l259
 17172                           
 17173                           ; BSR set to: 0
 17174                           ;serial.h: 28: delay(150);
 17175  00716E  0E00               	movlw	0
 17176  007170  6F81               	movwf	(delay@x+1)& (0+255),b
 17177  007172  0E96               	movlw	150
 17178  007174  6F80               	movwf	delay@x& (0+255),b
 17179  007176  ECC5  F037         	call	_delay	;wreg free
 17180                           
 17181                           ;serial.h: 29: return 1;
 17182  00717A  0E01               	movlw	1
 17183  00717C  D002               	goto	l5316
 17184  00717E                     l259:
 17185  00717E  FFFF               	dw	65535	; assembler added errata NOP
 17186                           
 17187                           ;serial.h: 30: }
 17188                           ;serial.h: 31: return 0;
 17189  007180  0E00               	movlw	0
 17190  007182                     l5316:
 17191  007182  FFFF               	dw	65535	; assembler added errata NOP
 17192  007184  0012               	return		;funcret
 17193  007186  FFFF               	dw	65535	; errata NOP
 17194  007188                     __end_of_aguardaBuffer:
 17195                           	opt stack 0
 17196                           tosu	equ	0xFFF
 17197                           tosh	equ	0xFFE
 17198                           tosl	equ	0xFFD
 17199                           pclath	equ	0xFFA
 17200                           tblptru	equ	0xFF8
 17201                           tblptrh	equ	0xFF7
 17202                           tblptrl	equ	0xFF6
 17203                           tablat	equ	0xFF5
 17204                           prodh	equ	0xFF4
 17205                           prodl	equ	0xFF3
 17206                           intcon	equ	0xFF2
 17207                           indf0	equ	0xFEF
 17208                           postinc0	equ	0xFEE
 17209                           fsr0h	equ	0xFEA
 17210                           fsr0l	equ	0xFE9
 17211                           wreg	equ	0xFE8
 17212                           postdec1	equ	0xFE5
 17213                           fsr1l	equ	0xFE1
 17214                           indf2	equ	0xFDF
 17215                           postinc2	equ	0xFDE
 17216                           postdec2	equ	0xFDD
 17217                           fsr2h	equ	0xFDA
 17218                           fsr2l	equ	0xFD9
 17219                           status	equ	0xFD8
 17220                           
 17221 ;; *************** function _strstr *****************
 17222 ;; Defined at:
 17223 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strstr.c"
 17224 ;; Parameters:    Size  Location     Type
 17225 ;;  s1              2   15[BANK0 ] PTR const unsigned char 
 17226 ;;		 -> NULL(0), bufferSerial(60), 
 17227 ;;  s2              2   17[BANK0 ] PTR const unsigned char 
 17228 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17229 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17230 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17231 ;;		 -> STR_5(3), 
 17232 ;; Auto vars:     Size  Location     Type
 17233 ;;		None
 17234 ;; Return value:  Size  Location     Type
 17235 ;;                  2   15[BANK0 ] PTR unsigned char 
 17236 ;; Registers used:
 17237 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17238 ;; Tracked objects:
 17239 ;;		On entry : 0/0
 17240 ;;		On exit  : 0/0
 17241 ;;		Unchanged: 0/0
 17242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17243 ;;      Params:         0       4       0       0       0       0       0
 17244 ;;      Locals:         0       0       0       0       0       0       0
 17245 ;;      Temps:          0       0       0       0       0       0       0
 17246 ;;      Totals:         0       4       0       0       0       0       0
 17247 ;;Total ram usage:        4 bytes
 17248 ;; Hardware stack levels used:    1
 17249 ;; Hardware stack levels required when called:    7
 17250 ;; This function calls:
 17251 ;;		_strchr
 17252 ;;		_strlen
 17253 ;;		_strncmp
 17254 ;; This function is called by:
 17255 ;;		_aguardaBuffer
 17256 ;;		_getSerial
 17257 ;; This function uses a non-reentrant model
 17258 ;;
 17259                           
 17260                           	psect	text57
 17261  003F2E                     __ptext57:
 17262                           	opt stack 0
 17263  003F2E                     _strstr:
 17264                           	opt stack 0
 17265  003F2E  FFFF               	dw	65535	; assembler added errata NOP
 17266                           
 17267                           ;incstack = 0
 17268  003F30  D035               	goto	l1708
 17269  003F32  FFFF               	dw	65535	; assembler added errata NOP
 17270  003F34  C08F  F086         	movff	strstr@s1,strncmp@s1
 17271  003F38  C090  F087         	movff	strstr@s1+1,strncmp@s1+1
 17272  003F3C  C091  F088         	movff	strstr@s2,strncmp@s2
 17273  003F40  C092  F089         	movff	strstr@s2+1,strncmp@s2+1
 17274  003F44  C091  F080         	movff	strstr@s2,strlen@s
 17275  003F48  C092  F081         	movff	strstr@s2+1,strlen@s+1
 17276  003F4C  ECB7  F03A         	call	_strlen	;wreg free
 17277  003F50  C080  F08A         	movff	?_strlen,strncmp@len
 17278  003F54  C081  F08B         	movff	?_strlen+1,strncmp@len+1
 17279  003F58  EC4A  F01F         	call	_strncmp	;wreg free
 17280  003F5C  0100               	movlb	0	; () banked
 17281  003F5E  5186               	movf	?_strncmp& (0+255),w,b
 17282  003F60  1187               	iorwf	(?_strncmp+1)& (0+255),w,b
 17283  003F62  A4D8               	btfss	status,2,c
 17284  003F64  D005               	goto	l1710
 17285                           
 17286                           ; BSR set to: 0
 17287  003F66  C08F  F08F         	movff	strstr@s1,?_strstr
 17288  003F6A  C090  F090         	movff	strstr@s1+1,?_strstr+1
 17289                           
 17290                           ; BSR set to: 0
 17291  003F6E  D028               	goto	l4960
 17292  003F70                     l1710:
 17293  003F70  FFFF               	dw	65535	; assembler added errata NOP
 17294                           
 17295                           ; BSR set to: 0
 17296                           
 17297                           ; BSR set to: 0
 17298  003F72  0E01               	movlw	1
 17299  003F74  258F               	addwf	strstr@s1& (0+255),w,b
 17300  003F76  6F80               	movwf	strchr@ptr& (0+255),b
 17301  003F78  0E00               	movlw	0
 17302  003F7A  2190               	addwfc	(strstr@s1+1)& (0+255),w,b
 17303  003F7C  6F81               	movwf	(strchr@ptr+1)& (0+255),b
 17304  003F7E  C091  FFF6         	movff	strstr@s2,tblptrl
 17305  003F82  C092  FFF7         	movff	strstr@s2+1,tblptrh
 17306  003F86                     	if	0	;tblptru may be non-zero
 17307  003F86                     	endif
 17308  003F86                     	if	0	;tblptru may be non-zero
 17309  003F86                     	endif
 17310  003F86  0008               	tblrd		*
 17311  003F88  FFFF               	dw	65535	; errata NOP
 17312  003F8A  50F5               	movf	tablat,w,c
 17313  003F8C  6F82               	movwf	strchr@chr& (0+255),b
 17314  003F8E  6B83               	clrf	(strchr@chr+1)& (0+255),b
 17315  003F90  EC01  F039         	call	_strchr	;wreg free
 17316  003F94  C080  F08F         	movff	?_strchr,strstr@s1
 17317  003F98  C081  F090         	movff	?_strchr+1,strstr@s1+1
 17318  003F9C                     l1708:
 17319  003F9C  FFFF               	dw	65535	; assembler added errata NOP
 17320  003F9E  0100               	movlb	0	; () banked
 17321  003FA0  518F               	movf	strstr@s1& (0+255),w,b
 17322  003FA2  1190               	iorwf	(strstr@s1+1)& (0+255),w,b
 17323  003FA4  B4D8               	btfsc	status,2,c
 17324  003FA6  D007               	goto	u4730
 17325                           
 17326                           ; BSR set to: 0
 17327  003FA8  C08F  FFD9         	movff	strstr@s1,fsr2l
 17328  003FAC  C090  FFDA         	movff	strstr@s1+1,fsr2h
 17329  003FB0  50DF               	movf	indf2,w,c
 17330  003FB2  A4D8               	btfss	status,2,c
 17331  003FB4  D7BE               	goto	l1709
 17332  003FB6                     u4730:
 17333  003FB6  FFFF               	dw	65535	; assembler added errata NOP
 17334                           
 17335                           ; BSR set to: 0
 17336                           
 17337                           ; BSR set to: 0
 17338                           
 17339                           ; BSR set to: 0
 17340  003FB8  0E00               	movlw	0
 17341  003FBA  6F8F               	movwf	?_strstr& (0+255),b
 17342  003FBC  0E00               	movlw	0
 17343  003FBE  6F90               	movwf	(?_strstr+1)& (0+255),b
 17344  003FC0                     l4960:
 17345  003FC0  FFFF               	dw	65535	; assembler added errata NOP
 17346                           
 17347                           ; BSR set to: 0
 17348                           
 17349                           ; BSR set to: 0
 17350  003FC2  0012               	return		;funcret
 17351  003FC4  FFFF               	dw	65535	; errata NOP
 17352  003FC6                     __end_of_strstr:
 17353                           	opt stack 0
 17354                           tosu	equ	0xFFF
 17355                           tosh	equ	0xFFE
 17356                           tosl	equ	0xFFD
 17357                           pclath	equ	0xFFA
 17358                           tblptru	equ	0xFF8
 17359                           tblptrh	equ	0xFF7
 17360                           tblptrl	equ	0xFF6
 17361                           tablat	equ	0xFF5
 17362                           prodh	equ	0xFF4
 17363                           prodl	equ	0xFF3
 17364                           intcon	equ	0xFF2
 17365                           indf0	equ	0xFEF
 17366                           postinc0	equ	0xFEE
 17367                           fsr0h	equ	0xFEA
 17368                           fsr0l	equ	0xFE9
 17369                           wreg	equ	0xFE8
 17370                           postdec1	equ	0xFE5
 17371                           fsr1l	equ	0xFE1
 17372                           indf2	equ	0xFDF
 17373                           postinc2	equ	0xFDE
 17374                           postdec2	equ	0xFDD
 17375                           fsr2h	equ	0xFDA
 17376                           fsr2l	equ	0xFD9
 17377                           status	equ	0xFD8
 17378                           
 17379 ;; *************** function _strncmp *****************
 17380 ;; Defined at:
 17381 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncmp.c"
 17382 ;; Parameters:    Size  Location     Type
 17383 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 17384 ;;		 -> NULL(0), bufferSerial(60), 
 17385 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 17386 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17387 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17388 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17389 ;;		 -> STR_5(3), 
 17390 ;;  len             2   10[BANK0 ] unsigned int 
 17391 ;; Auto vars:     Size  Location     Type
 17392 ;;		None
 17393 ;; Return value:  Size  Location     Type
 17394 ;;                  2    6[BANK0 ] int 
 17395 ;; Registers used:
 17396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17397 ;; Tracked objects:
 17398 ;;		On entry : 0/0
 17399 ;;		On exit  : 0/0
 17400 ;;		Unchanged: 0/0
 17401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17402 ;;      Params:         0       6       0       0       0       0       0
 17403 ;;      Locals:         0       0       0       0       0       0       0
 17404 ;;      Temps:          0       3       0       0       0       0       0
 17405 ;;      Totals:         0       9       0       0       0       0       0
 17406 ;;Total ram usage:        9 bytes
 17407 ;; Hardware stack levels used:    1
 17408 ;; Hardware stack levels required when called:    6
 17409 ;; This function calls:
 17410 ;;		Nothing
 17411 ;; This function is called by:
 17412 ;;		_strstr
 17413 ;; This function uses a non-reentrant model
 17414 ;;
 17415                           
 17416                           	psect	text58
 17417  003E94                     __ptext58:
 17418                           	opt stack 0
 17419  003E94                     _strncmp:
 17420                           	opt stack 0
 17421  003E94  FFFF               	dw	65535	; assembler added errata NOP
 17422                           
 17423                           ; BSR set to: 0
 17424                           ;incstack = 0
 17425  003E96  D03A               	goto	l1742
 17426  003E98  FFFF               	dw	65535	; assembler added errata NOP
 17427  003E9A                     l4912:
 17428  003E9A  C086  FFD9         	movff	strncmp@s1,fsr2l
 17429  003E9E  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17430  003EA2  50DF               	movf	indf2,w,c
 17431  003EA4  B4D8               	btfsc	status,2,c
 17432  003EA6  D011               	goto	u4650
 17433  003EA8  C086  FFD9         	movff	strncmp@s1,fsr2l
 17434  003EAC  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17435  003EB0  50DF               	movf	indf2,w,c
 17436  003EB2  0100               	movlb	0	; () banked
 17437  003EB4  6F8C               	movwf	??_strncmp& (0+255),b
 17438  003EB6  C088  FFF6         	movff	strncmp@s2,tblptrl
 17439  003EBA  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 17440  003EBE                     	if	0	;tblptru may be non-zero
 17441  003EBE                     	endif
 17442  003EBE                     	if	0	;tblptru may be non-zero
 17443  003EBE                     	endif
 17444  003EBE  0008               	tblrd		*
 17445  003EC0  FFFF               	dw	65535	; errata NOP
 17446  003EC2  50F5               	movf	tablat,w,c
 17447  003EC4  198C               	xorwf	??_strncmp& (0+255),w,b
 17448  003EC6  B4D8               	btfsc	status,2,c
 17449  003EC8  D01C               	goto	l1744
 17450  003ECA                     u4650:
 17451  003ECA  FFFF               	dw	65535	; assembler added errata NOP
 17452                           
 17453                           ; BSR set to: 0
 17454  003ECC  C088  FFF6         	movff	strncmp@s2,tblptrl
 17455  003ED0  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 17456  003ED4                     	if	0	;tblptru may be non-zero
 17457  003ED4                     	endif
 17458  003ED4                     	if	0	;tblptru may be non-zero
 17459  003ED4                     	endif
 17460  003ED4  0008               	tblrd		*
 17461  003ED6  FFFF               	dw	65535	; errata NOP
 17462  003ED8  50F5               	movf	tablat,w,c
 17463  003EDA  0100               	movlb	0	; () banked
 17464  003EDC  6F8C               	movwf	??_strncmp& (0+255),b
 17465  003EDE  6B8D               	clrf	(??_strncmp+1)& (0+255),b
 17466  003EE0  1F8C               	comf	??_strncmp& (0+255),f,b
 17467  003EE2  1F8D               	comf	(??_strncmp+1)& (0+255),f,b
 17468  003EE4  4B8C               	infsnz	??_strncmp& (0+255),f,b
 17469  003EE6  2B8D               	incf	(??_strncmp+1)& (0+255),f,b
 17470  003EE8  C086  FFD9         	movff	strncmp@s1,fsr2l
 17471  003EEC  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17472  003EF0  50DF               	movf	indf2,w,c
 17473  003EF2  6F8E               	movwf	(??_strncmp+2)& (0+255),b
 17474  003EF4  518E               	movf	(??_strncmp+2)& (0+255),w,b
 17475  003EF6  258C               	addwf	??_strncmp& (0+255),w,b
 17476  003EF8  6F86               	movwf	?_strncmp& (0+255),b
 17477  003EFA  0E00               	movlw	0
 17478  003EFC  218D               	addwfc	(??_strncmp+1)& (0+255),w,b
 17479  003EFE  6F87               	movwf	(?_strncmp+1)& (0+255),b
 17480                           
 17481                           ; BSR set to: 0
 17482  003F00  D013               	goto	l4926
 17483  003F02                     l1744:
 17484  003F02  FFFF               	dw	65535	; assembler added errata NOP
 17485                           
 17486                           ; BSR set to: 0
 17487                           
 17488                           ; BSR set to: 0
 17489  003F04  4B86               	infsnz	strncmp@s1& (0+255),f,b
 17490  003F06  2B87               	incf	(strncmp@s1+1)& (0+255),f,b
 17491  003F08  4B88               	infsnz	strncmp@s2& (0+255),f,b
 17492  003F0A  2B89               	incf	(strncmp@s2+1)& (0+255),f,b
 17493  003F0C                     l1742:
 17494  003F0C  FFFF               	dw	65535	; assembler added errata NOP
 17495                           
 17496                           ; BSR set to: 0
 17497  003F0E  0100               	movlb	0	; () banked
 17498  003F10  078A               	decf	strncmp@len& (0+255),f,b
 17499  003F12  A0D8               	btfss	status,0,c
 17500  003F14  078B               	decf	(strncmp@len+1)& (0+255),f,b
 17501  003F16  298A               	incf	strncmp@len& (0+255),w,b
 17502  003F18  E1C0               	bnz	l4912
 17503  003F1A  298B               	incf	(strncmp@len+1)& (0+255),w,b
 17504  003F1C  A4D8               	btfss	status,2,c
 17505  003F1E  D7BC               	goto	l1743
 17506                           
 17507                           ; BSR set to: 0
 17508                           
 17509                           ; BSR set to: 0
 17510  003F20  0E00               	movlw	0
 17511  003F22  6F87               	movwf	(?_strncmp+1)& (0+255),b
 17512  003F24  0E00               	movlw	0
 17513  003F26  6F86               	movwf	?_strncmp& (0+255),b
 17514  003F28                     l4926:
 17515  003F28  FFFF               	dw	65535	; assembler added errata NOP
 17516                           
 17517                           ; BSR set to: 0
 17518                           
 17519                           ; BSR set to: 0
 17520  003F2A  0012               	return		;funcret
 17521  003F2C  FFFF               	dw	65535	; errata NOP
 17522  003F2E                     __end_of_strncmp:
 17523                           	opt stack 0
 17524                           tosu	equ	0xFFF
 17525                           tosh	equ	0xFFE
 17526                           tosl	equ	0xFFD
 17527                           pclath	equ	0xFFA
 17528                           tblptru	equ	0xFF8
 17529                           tblptrh	equ	0xFF7
 17530                           tblptrl	equ	0xFF6
 17531                           tablat	equ	0xFF5
 17532                           prodh	equ	0xFF4
 17533                           prodl	equ	0xFF3
 17534                           intcon	equ	0xFF2
 17535                           indf0	equ	0xFEF
 17536                           postinc0	equ	0xFEE
 17537                           fsr0h	equ	0xFEA
 17538                           fsr0l	equ	0xFE9
 17539                           wreg	equ	0xFE8
 17540                           postdec1	equ	0xFE5
 17541                           fsr1l	equ	0xFE1
 17542                           indf2	equ	0xFDF
 17543                           postinc2	equ	0xFDE
 17544                           postdec2	equ	0xFDD
 17545                           fsr2h	equ	0xFDA
 17546                           fsr2l	equ	0xFD9
 17547                           status	equ	0xFD8
 17548                           
 17549 ;; *************** function _strlen *****************
 17550 ;; Defined at:
 17551 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 17552 ;; Parameters:    Size  Location     Type
 17553 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 17554 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17555 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17556 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17557 ;;		 -> STR_5(3), NULL(0), bufferSerial(60), 
 17558 ;; Auto vars:     Size  Location     Type
 17559 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 17560 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17561 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17562 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17563 ;;		 -> STR_5(3), NULL(0), bufferSerial(60), 
 17564 ;; Return value:  Size  Location     Type
 17565 ;;                  2    0[BANK0 ] unsigned int 
 17566 ;; Registers used:
 17567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 17568 ;; Tracked objects:
 17569 ;;		On entry : 0/0
 17570 ;;		On exit  : 0/0
 17571 ;;		Unchanged: 0/0
 17572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17573 ;;      Params:         0       2       0       0       0       0       0
 17574 ;;      Locals:         0       2       0       0       0       0       0
 17575 ;;      Temps:          0       2       0       0       0       0       0
 17576 ;;      Totals:         0       6       0       0       0       0       0
 17577 ;;Total ram usage:        6 bytes
 17578 ;; Hardware stack levels used:    1
 17579 ;; Hardware stack levels required when called:    6
 17580 ;; This function calls:
 17581 ;;		Nothing
 17582 ;; This function is called by:
 17583 ;;		_getSerial
 17584 ;;		_strstr
 17585 ;; This function uses a non-reentrant model
 17586 ;;
 17587                           
 17588                           	psect	text59
 17589  00756E                     __ptext59:
 17590                           	opt stack 0
 17591  00756E                     _strlen:
 17592                           	opt stack 0
 17593  00756E  FFFF               	dw	65535	; assembler added errata NOP
 17594                           
 17595                           ; BSR set to: 0
 17596                           ;incstack = 0
 17597  007570  C080  F084         	movff	strlen@s,strlen@cp
 17598  007574  C081  F085         	movff	strlen@s+1,strlen@cp+1
 17599  007578  D004               	goto	l1696
 17600  00757A  FFFF               	dw	65535	; assembler added errata NOP
 17601  00757C  0100               	movlb	0	; () banked
 17602  00757E  4B84               	infsnz	strlen@cp& (0+255),f,b
 17603  007580  2B85               	incf	(strlen@cp+1)& (0+255),f,b
 17604  007582                     l1696:
 17605  007582  FFFF               	dw	65535	; assembler added errata NOP
 17606                           
 17607                           ; BSR set to: 0
 17608  007584  C084  FFF6         	movff	strlen@cp,tblptrl
 17609  007588  C085  FFF7         	movff	strlen@cp+1,tblptrh
 17610  00758C  6AF8               	clrf	tblptru,c
 17611  00758E  0E05               	movlw	(high __ramtop+-1)
 17612  007590  64F7               	cpfsgt	tblptrh,c
 17613  007592  D004               	bra	u4527
 17614  007594  0008               	tblrd		*
 17615  007596  FFFF               	dw	65535	; errata NOP
 17616  007598  50F5               	movf	tablat,w,c
 17617  00759A  D005               	bra	u4520
 17618  00759C                     u4527:
 17619  00759C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17620  0075A0  CFF7 FFEA          	movff	tblptrh,fsr0h
 17621  0075A4  50EF               	movf	indf0,w,c
 17622  0075A6                     u4520:
 17623  0075A6  0900               	iorlw	0
 17624  0075A8  A4D8               	btfss	status,2,c
 17625  0075AA  D7E7               	goto	l1697
 17626  0075AC  C080  F082         	movff	strlen@s,??_strlen
 17627  0075B0  C081  F083         	movff	strlen@s+1,??_strlen+1
 17628  0075B4  0100               	movlb	0	; () banked
 17629  0075B6  1F82               	comf	??_strlen& (0+255),f,b
 17630  0075B8  1F83               	comf	(??_strlen+1)& (0+255),f,b
 17631  0075BA  4B82               	infsnz	??_strlen& (0+255),f,b
 17632  0075BC  2B83               	incf	(??_strlen+1)& (0+255),f,b
 17633  0075BE  5184               	movf	strlen@cp& (0+255),w,b
 17634  0075C0  2582               	addwf	??_strlen& (0+255),w,b
 17635  0075C2  6F80               	movwf	?_strlen& (0+255),b
 17636  0075C4  5185               	movf	(strlen@cp+1)& (0+255),w,b
 17637  0075C6  2183               	addwfc	(??_strlen+1)& (0+255),w,b
 17638  0075C8  6F81               	movwf	(?_strlen+1)& (0+255),b
 17639                           
 17640                           ; BSR set to: 0
 17641                           
 17642                           ; BSR set to: 0
 17643  0075CA  0012               	return		;funcret
 17644  0075CC  FFFF               	dw	65535	; errata NOP
 17645  0075CE                     __end_of_strlen:
 17646                           	opt stack 0
 17647                           tosu	equ	0xFFF
 17648                           tosh	equ	0xFFE
 17649                           tosl	equ	0xFFD
 17650                           pclath	equ	0xFFA
 17651                           tblptru	equ	0xFF8
 17652                           tblptrh	equ	0xFF7
 17653                           tblptrl	equ	0xFF6
 17654                           tablat	equ	0xFF5
 17655                           prodh	equ	0xFF4
 17656                           prodl	equ	0xFF3
 17657                           intcon	equ	0xFF2
 17658                           indf0	equ	0xFEF
 17659                           postinc0	equ	0xFEE
 17660                           fsr0h	equ	0xFEA
 17661                           fsr0l	equ	0xFE9
 17662                           wreg	equ	0xFE8
 17663                           postdec1	equ	0xFE5
 17664                           fsr1l	equ	0xFE1
 17665                           indf2	equ	0xFDF
 17666                           postinc2	equ	0xFDE
 17667                           postdec2	equ	0xFDD
 17668                           fsr2h	equ	0xFDA
 17669                           fsr2l	equ	0xFD9
 17670                           status	equ	0xFD8
 17671                           
 17672 ;; *************** function _strchr *****************
 17673 ;; Defined at:
 17674 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
 17675 ;; Parameters:    Size  Location     Type
 17676 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 17677 ;;		 -> NULL(0), bufferSerial(60), 
 17678 ;;  chr             2    2[BANK0 ] int 
 17679 ;; Auto vars:     Size  Location     Type
 17680 ;;		None
 17681 ;; Return value:  Size  Location     Type
 17682 ;;                  2    0[BANK0 ] PTR unsigned char 
 17683 ;; Registers used:
 17684 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17685 ;; Tracked objects:
 17686 ;;		On entry : 0/0
 17687 ;;		On exit  : 0/0
 17688 ;;		Unchanged: 0/0
 17689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17690 ;;      Params:         0       4       0       0       0       0       0
 17691 ;;      Locals:         0       0       0       0       0       0       0
 17692 ;;      Temps:          0       1       0       0       0       0       0
 17693 ;;      Totals:         0       5       0       0       0       0       0
 17694 ;;Total ram usage:        5 bytes
 17695 ;; Hardware stack levels used:    1
 17696 ;; Hardware stack levels required when called:    6
 17697 ;; This function calls:
 17698 ;;		Nothing
 17699 ;; This function is called by:
 17700 ;;		_strstr
 17701 ;; This function uses a non-reentrant model
 17702 ;;
 17703                           
 17704                           	psect	text60
 17705  007202                     __ptext60:
 17706                           	opt stack 0
 17707  007202                     _strchr:
 17708                           	opt stack 0
 17709  007202  FFFF               	dw	65535	; assembler added errata NOP
 17710                           
 17711                           ; BSR set to: 0
 17712                           ;incstack = 0
 17713  007204  C080  FFD9         	movff	strchr@ptr,fsr2l
 17714  007208  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 17715  00720C  0100               	movlb	0	; () banked
 17716  00720E  5182               	movf	strchr@chr& (0+255),w,b
 17717  007210  18DE               	xorwf	postinc2,w,c
 17718  007212  A4D8               	btfss	status,2,c
 17719  007214  D005               	goto	l1737
 17720                           
 17721                           ; BSR set to: 0
 17722  007216  C080  F080         	movff	strchr@ptr,?_strchr
 17723  00721A  C081  F081         	movff	strchr@ptr+1,?_strchr+1
 17724                           
 17725                           ; BSR set to: 0
 17726  00721E  D00E               	goto	l4938
 17727  007220                     l1737:
 17728  007220  FFFF               	dw	65535	; assembler added errata NOP
 17729                           
 17730                           ; BSR set to: 0
 17731                           
 17732                           ; BSR set to: 0
 17733  007222  C080  FFD9         	movff	strchr@ptr,fsr2l
 17734  007226  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 17735  00722A  4B80               	infsnz	strchr@ptr& (0+255),f,b
 17736  00722C  2B81               	incf	(strchr@ptr+1)& (0+255),f,b
 17737  00722E  50DF               	movf	indf2,w,c
 17738  007230  A4D8               	btfss	status,2,c
 17739  007232  D7E7               	goto	_strchr
 17740                           
 17741                           ; BSR set to: 0
 17742                           
 17743                           ; BSR set to: 0
 17744  007234  0E00               	movlw	0
 17745  007236  6F80               	movwf	?_strchr& (0+255),b
 17746  007238  0E00               	movlw	0
 17747  00723A  6F81               	movwf	(?_strchr+1)& (0+255),b
 17748  00723C                     l4938:
 17749  00723C  FFFF               	dw	65535	; assembler added errata NOP
 17750                           
 17751                           ; BSR set to: 0
 17752                           
 17753                           ; BSR set to: 0
 17754  00723E  0012               	return		;funcret
 17755  007240  FFFF               	dw	65535	; errata NOP
 17756  007242                     __end_of_strchr:
 17757                           	opt stack 0
 17758                           tosu	equ	0xFFF
 17759                           tosh	equ	0xFFE
 17760                           tosl	equ	0xFFD
 17761                           pclath	equ	0xFFA
 17762                           tblptru	equ	0xFF8
 17763                           tblptrh	equ	0xFF7
 17764                           tblptrl	equ	0xFF6
 17765                           tablat	equ	0xFF5
 17766                           prodh	equ	0xFF4
 17767                           prodl	equ	0xFF3
 17768                           intcon	equ	0xFF2
 17769                           indf0	equ	0xFEF
 17770                           postinc0	equ	0xFEE
 17771                           fsr0h	equ	0xFEA
 17772                           fsr0l	equ	0xFE9
 17773                           wreg	equ	0xFE8
 17774                           postdec1	equ	0xFE5
 17775                           fsr1l	equ	0xFE1
 17776                           indf2	equ	0xFDF
 17777                           postinc2	equ	0xFDE
 17778                           postdec2	equ	0xFDD
 17779                           fsr2h	equ	0xFDA
 17780                           fsr2l	equ	0xFD9
 17781                           status	equ	0xFD8
 17782                           
 17783 ;; *************** function _delay *****************
 17784 ;; Defined at:
 17785 ;;		line 16 in file "function.c"
 17786 ;; Parameters:    Size  Location     Type
 17787 ;;  x               2    0[BANK0 ] int 
 17788 ;; Auto vars:     Size  Location     Type
 17789 ;;		None
 17790 ;; Return value:  Size  Location     Type
 17791 ;;                  1    wreg      void 
 17792 ;; Registers used:
 17793 ;;		wreg, status,2, status,0
 17794 ;; Tracked objects:
 17795 ;;		On entry : 0/0
 17796 ;;		On exit  : 0/0
 17797 ;;		Unchanged: 0/0
 17798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17799 ;;      Params:         0       2       0       0       0       0       0
 17800 ;;      Locals:         0       0       0       0       0       0       0
 17801 ;;      Temps:          0       1       0       0       0       0       0
 17802 ;;      Totals:         0       3       0       0       0       0       0
 17803 ;;Total ram usage:        3 bytes
 17804 ;; Hardware stack levels used:    1
 17805 ;; Hardware stack levels required when called:    6
 17806 ;; This function calls:
 17807 ;;		Nothing
 17808 ;; This function is called by:
 17809 ;;		_aguardaBuffer
 17810 ;;		_limparBuffer
 17811 ;;		_getSinalSIM800L
 17812 ;;		_comunicarTeste
 17813 ;;		_enviaSMS
 17814 ;;		_writeEEPROM_ext
 17815 ;;		_partidaBombaEstacionaria
 17816 ;;		_main
 17817 ;; This function uses a non-reentrant model
 17818 ;;
 17819                           
 17820                           	psect	text61
 17821  006F8A                     __ptext61:
 17822                           	opt stack 0
 17823  006F8A                     _delay:
 17824                           	opt stack 0
 17825  006F8A  FFFF               	dw	65535	; assembler added errata NOP
 17826                           
 17827                           ;function.c: 17: while (x--) {
 17828                           
 17829                           ; BSR set to: 0
 17830                           ;incstack = 0
 17831  006F8C  D00C               	goto	l1002
 17832  006F8E  FFFF               	dw	65535	; assembler added errata NOP
 17833  006F90                     l4964:
 17834                           
 17835                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 17836  006F90  0E02               	movlw	2
 17837  006F92  0100               	movlb	0	; () banked
 17838  006F94  6F82               	movwf	??_delay& (0+255),b
 17839  006F96  0EF2               	movlw	242
 17840  006F98                     u9047:
 17841  006F98  FFFF               	dw	65535	; errata NOP
 17842  006F9A  2EE8               	decfsz	wreg,f,c
 17843  006F9C  D7FD               	bra	u9047
 17844  006F9E  2F82               	decfsz	??_delay& (0+255),f,b
 17845  006FA0  D7FB               	bra	u9047
 17846  006FA2  F000               	nop	
 17847  006FA4  0004               	clrwdt		;# 
 17848  006FA6                     l1002:
 17849  006FA6  FFFF               	dw	65535	; assembler added errata NOP
 17850  006FA8  0100               	movlb	0	; () banked
 17851  006FAA  0780               	decf	delay@x& (0+255),f,b
 17852  006FAC  A0D8               	btfss	status,0,c
 17853  006FAE  0781               	decf	(delay@x+1)& (0+255),f,b
 17854  006FB0  2980               	incf	delay@x& (0+255),w,b
 17855  006FB2  E1EE               	bnz	l4964
 17856  006FB4  2981               	incf	(delay@x+1)& (0+255),w,b
 17857  006FB6  B4D8               	btfsc	status,2,c
 17858                           
 17859                           ; BSR set to: 0
 17860                           
 17861                           ; BSR set to: 0
 17862  006FB8  0012               	return		;funcret
 17863  006FBA  FFFF               	dw	65535	; assembler added errata NOP
 17864  006FBC  D7E8               	goto	l1003
 17865  006FBE  FFFF               	dw	65535	; errata NOP
 17866  006FC0                     __end_of_delay:
 17867                           	opt stack 0
 17868                           tosu	equ	0xFFF
 17869                           tosh	equ	0xFFE
 17870                           tosl	equ	0xFFD
 17871                           pclath	equ	0xFFA
 17872                           tblptru	equ	0xFF8
 17873                           tblptrh	equ	0xFF7
 17874                           tblptrl	equ	0xFF6
 17875                           tablat	equ	0xFF5
 17876                           prodh	equ	0xFF4
 17877                           prodl	equ	0xFF3
 17878                           intcon	equ	0xFF2
 17879                           indf0	equ	0xFEF
 17880                           postinc0	equ	0xFEE
 17881                           fsr0h	equ	0xFEA
 17882                           fsr0l	equ	0xFE9
 17883                           wreg	equ	0xFE8
 17884                           postdec1	equ	0xFE5
 17885                           fsr1l	equ	0xFE1
 17886                           indf2	equ	0xFDF
 17887                           postinc2	equ	0xFDE
 17888                           postdec2	equ	0xFDD
 17889                           fsr2h	equ	0xFDA
 17890                           fsr2l	equ	0xFD9
 17891                           status	equ	0xFD8
 17892                           
 17893 ;; *************** function _RTC_Init *****************
 17894 ;; Defined at:
 17895 ;;		line 98 in file "ds1307.h"
 17896 ;; Parameters:    Size  Location     Type
 17897 ;;		None
 17898 ;; Auto vars:     Size  Location     Type
 17899 ;;		None
 17900 ;; Return value:  Size  Location     Type
 17901 ;;                  1    wreg      void 
 17902 ;; Registers used:
 17903 ;;		wreg, status,2, status,0, cstack
 17904 ;; Tracked objects:
 17905 ;;		On entry : 0/0
 17906 ;;		On exit  : 0/0
 17907 ;;		Unchanged: 0/0
 17908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17909 ;;      Params:         0       0       0       0       0       0       0
 17910 ;;      Locals:         0       0       0       0       0       0       0
 17911 ;;      Temps:          0       0       0       0       0       0       0
 17912 ;;      Totals:         0       0       0       0       0       0       0
 17913 ;;Total ram usage:        0 bytes
 17914 ;; Hardware stack levels used:    1
 17915 ;; Hardware stack levels required when called:    8
 17916 ;; This function calls:
 17917 ;;		_I2C_Start
 17918 ;;		_I2C_Stop
 17919 ;;		_I2C_Write
 17920 ;; This function is called by:
 17921 ;;		_main
 17922 ;; This function uses a non-reentrant model
 17923 ;;
 17924                           
 17925                           	psect	text62
 17926  00702C                     __ptext62:
 17927                           	opt stack 0
 17928  00702C                     _RTC_Init:
 17929                           	opt stack 0
 17930  00702C  FFFF               	dw	65535	; assembler added errata NOP
 17931                           
 17932                           ;ds1307.h: 100: I2C_Start();
 17933                           
 17934                           ; BSR set to: 0
 17935                           ;incstack = 0
 17936  00702E  EC66  F036         	call	_I2C_Start	;wreg free
 17937                           
 17938                           ;ds1307.h: 101: I2C_Write(0xD0);
 17939  007032  0E00               	movlw	0
 17940  007034  0100               	movlb	0	; () banked
 17941  007036  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 17942  007038  0ED0               	movlw	208
 17943  00703A  6F8A               	movwf	I2C_Write@d& (0+255),b
 17944  00703C  EC7F  F036         	call	_I2C_Write	;wreg free
 17945                           
 17946                           ;ds1307.h: 102: I2C_Write(0x07);
 17947  007040  0E00               	movlw	0
 17948  007042  0100               	movlb	0	; () banked
 17949  007044  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 17950  007046  0E07               	movlw	7
 17951  007048  6F8A               	movwf	I2C_Write@d& (0+255),b
 17952  00704A  EC7F  F036         	call	_I2C_Write	;wreg free
 17953                           
 17954                           ;ds1307.h: 103: I2C_Write(0x00);
 17955  00704E  0E00               	movlw	0
 17956  007050  0100               	movlb	0	; () banked
 17957  007052  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 17958  007054  0E00               	movlw	0
 17959  007056  6F8A               	movwf	I2C_Write@d& (0+255),b
 17960  007058  EC7F  F036         	call	_I2C_Write	;wreg free
 17961                           
 17962                           ;ds1307.h: 104: I2C_Stop();
 17963  00705C  EC6C  F036         	call	_I2C_Stop	;wreg free
 17964  007060  0012               	return		;funcret
 17965  007062  FFFF               	dw	65535	; errata NOP
 17966  007064                     __end_of_RTC_Init:
 17967                           	opt stack 0
 17968                           tosu	equ	0xFFF
 17969                           tosh	equ	0xFFE
 17970                           tosl	equ	0xFFD
 17971                           pclath	equ	0xFFA
 17972                           tblptru	equ	0xFF8
 17973                           tblptrh	equ	0xFF7
 17974                           tblptrl	equ	0xFF6
 17975                           tablat	equ	0xFF5
 17976                           prodh	equ	0xFF4
 17977                           prodl	equ	0xFF3
 17978                           intcon	equ	0xFF2
 17979                           indf0	equ	0xFEF
 17980                           postinc0	equ	0xFEE
 17981                           fsr0h	equ	0xFEA
 17982                           fsr0l	equ	0xFE9
 17983                           wreg	equ	0xFE8
 17984                           postdec1	equ	0xFE5
 17985                           fsr1l	equ	0xFE1
 17986                           indf2	equ	0xFDF
 17987                           postinc2	equ	0xFDE
 17988                           postdec2	equ	0xFDD
 17989                           fsr2h	equ	0xFDA
 17990                           fsr2l	equ	0xFD9
 17991                           status	equ	0xFD8
 17992                           
 17993 ;; *************** function _I2C_Write *****************
 17994 ;; Defined at:
 17995 ;;		line 42 in file "I2C.c"
 17996 ;; Parameters:    Size  Location     Type
 17997 ;;  d               2   10[BANK0 ] unsigned int 
 17998 ;; Auto vars:     Size  Location     Type
 17999 ;;		None
 18000 ;; Return value:  Size  Location     Type
 18001 ;;                  1    wreg      void 
 18002 ;; Registers used:
 18003 ;;		wreg, status,2, status,0, cstack
 18004 ;; Tracked objects:
 18005 ;;		On entry : 0/0
 18006 ;;		On exit  : 0/0
 18007 ;;		Unchanged: 0/0
 18008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18009 ;;      Params:         0       2       0       0       0       0       0
 18010 ;;      Locals:         0       0       0       0       0       0       0
 18011 ;;      Temps:          0       0       0       0       0       0       0
 18012 ;;      Totals:         0       2       0       0       0       0       0
 18013 ;;Total ram usage:        2 bytes
 18014 ;; Hardware stack levels used:    1
 18015 ;; Hardware stack levels required when called:    7
 18016 ;; This function calls:
 18017 ;;		_I2C_Wait
 18018 ;; This function is called by:
 18019 ;;		_setDS1307TimeDate
 18020 ;;		_getDS1307TimeDate
 18021 ;;		_RTC_Init
 18022 ;;		_writeEEPROM_ext
 18023 ;;		_readEEPROM_ext
 18024 ;;		_getDS1307Time
 18025 ;;		_setDS1307Time
 18026 ;; This function uses a non-reentrant model
 18027 ;;
 18028                           
 18029                           	psect	text63
 18030  006CFE                     __ptext63:
 18031                           	opt stack 0
 18032  006CFE                     _I2C_Write:
 18033                           	opt stack 0
 18034  006CFE  FFFF               	dw	65535	; assembler added errata NOP
 18035                           
 18036                           ;I2C.c: 43: I2C_Wait();
 18037                           
 18038                           ;incstack = 0
 18039  006D00  ECB7  F036         	call	_I2C_Wait	;wreg free
 18040                           
 18041                           ;I2C.c: 44: SSPBUF = d;
 18042  006D04  C08A  FFC9         	movff	I2C_Write@d,4041	;volatile
 18043  006D08  0012               	return		;funcret
 18044  006D0A  FFFF               	dw	65535	; errata NOP
 18045  006D0C                     __end_of_I2C_Write:
 18046                           	opt stack 0
 18047                           tosu	equ	0xFFF
 18048                           tosh	equ	0xFFE
 18049                           tosl	equ	0xFFD
 18050                           pclath	equ	0xFFA
 18051                           tblptru	equ	0xFF8
 18052                           tblptrh	equ	0xFF7
 18053                           tblptrl	equ	0xFF6
 18054                           tablat	equ	0xFF5
 18055                           prodh	equ	0xFF4
 18056                           prodl	equ	0xFF3
 18057                           intcon	equ	0xFF2
 18058                           indf0	equ	0xFEF
 18059                           postinc0	equ	0xFEE
 18060                           fsr0h	equ	0xFEA
 18061                           fsr0l	equ	0xFE9
 18062                           wreg	equ	0xFE8
 18063                           postdec1	equ	0xFE5
 18064                           fsr1l	equ	0xFE1
 18065                           indf2	equ	0xFDF
 18066                           postinc2	equ	0xFDE
 18067                           postdec2	equ	0xFDD
 18068                           fsr2h	equ	0xFDA
 18069                           fsr2l	equ	0xFD9
 18070                           status	equ	0xFD8
 18071                           
 18072 ;; *************** function _I2C_Stop *****************
 18073 ;; Defined at:
 18074 ;;		line 36 in file "I2C.c"
 18075 ;; Parameters:    Size  Location     Type
 18076 ;;		None
 18077 ;; Auto vars:     Size  Location     Type
 18078 ;;		None
 18079 ;; Return value:  Size  Location     Type
 18080 ;;                  1    wreg      void 
 18081 ;; Registers used:
 18082 ;;		wreg, status,2, status,0, cstack
 18083 ;; Tracked objects:
 18084 ;;		On entry : 0/0
 18085 ;;		On exit  : 0/0
 18086 ;;		Unchanged: 0/0
 18087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18088 ;;      Params:         0       0       0       0       0       0       0
 18089 ;;      Locals:         0       0       0       0       0       0       0
 18090 ;;      Temps:          0       0       0       0       0       0       0
 18091 ;;      Totals:         0       0       0       0       0       0       0
 18092 ;;Total ram usage:        0 bytes
 18093 ;; Hardware stack levels used:    1
 18094 ;; Hardware stack levels required when called:    7
 18095 ;; This function calls:
 18096 ;;		_I2C_Wait
 18097 ;; This function is called by:
 18098 ;;		_setDS1307TimeDate
 18099 ;;		_getDS1307TimeDate
 18100 ;;		_RTC_Init
 18101 ;;		_writeEEPROM_ext
 18102 ;;		_readEEPROM_ext
 18103 ;;		_getDS1307Time
 18104 ;;		_setDS1307Time
 18105 ;; This function uses a non-reentrant model
 18106 ;;
 18107                           
 18108                           	psect	text64
 18109  006CD8                     __ptext64:
 18110                           	opt stack 0
 18111  006CD8                     _I2C_Stop:
 18112                           	opt stack 0
 18113  006CD8  FFFF               	dw	65535	; assembler added errata NOP
 18114                           
 18115                           ;I2C.c: 37: I2C_Wait();
 18116                           
 18117                           ;incstack = 0
 18118  006CDA  ECB7  F036         	call	_I2C_Wait	;wreg free
 18119                           
 18120                           ;I2C.c: 38: PEN = 1;
 18121  006CDE  84C5               	bsf	4037,2,c	;volatile
 18122  006CE0  0012               	return		;funcret
 18123  006CE2  FFFF               	dw	65535	; errata NOP
 18124  006CE4                     __end_of_I2C_Stop:
 18125                           	opt stack 0
 18126                           tosu	equ	0xFFF
 18127                           tosh	equ	0xFFE
 18128                           tosl	equ	0xFFD
 18129                           pclath	equ	0xFFA
 18130                           tblptru	equ	0xFF8
 18131                           tblptrh	equ	0xFF7
 18132                           tblptrl	equ	0xFF6
 18133                           tablat	equ	0xFF5
 18134                           prodh	equ	0xFF4
 18135                           prodl	equ	0xFF3
 18136                           intcon	equ	0xFF2
 18137                           indf0	equ	0xFEF
 18138                           postinc0	equ	0xFEE
 18139                           fsr0h	equ	0xFEA
 18140                           fsr0l	equ	0xFE9
 18141                           wreg	equ	0xFE8
 18142                           postdec1	equ	0xFE5
 18143                           fsr1l	equ	0xFE1
 18144                           indf2	equ	0xFDF
 18145                           postinc2	equ	0xFDE
 18146                           postdec2	equ	0xFDD
 18147                           fsr2h	equ	0xFDA
 18148                           fsr2l	equ	0xFD9
 18149                           status	equ	0xFD8
 18150                           
 18151 ;; *************** function _I2C_Start *****************
 18152 ;; Defined at:
 18153 ;;		line 26 in file "I2C.c"
 18154 ;; Parameters:    Size  Location     Type
 18155 ;;		None
 18156 ;; Auto vars:     Size  Location     Type
 18157 ;;		None
 18158 ;; Return value:  Size  Location     Type
 18159 ;;                  1    wreg      void 
 18160 ;; Registers used:
 18161 ;;		wreg, status,2, status,0, cstack
 18162 ;; Tracked objects:
 18163 ;;		On entry : 0/0
 18164 ;;		On exit  : 0/0
 18165 ;;		Unchanged: 0/0
 18166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18167 ;;      Params:         0       0       0       0       0       0       0
 18168 ;;      Locals:         0       0       0       0       0       0       0
 18169 ;;      Temps:          0       0       0       0       0       0       0
 18170 ;;      Totals:         0       0       0       0       0       0       0
 18171 ;;Total ram usage:        0 bytes
 18172 ;; Hardware stack levels used:    1
 18173 ;; Hardware stack levels required when called:    7
 18174 ;; This function calls:
 18175 ;;		_I2C_Wait
 18176 ;; This function is called by:
 18177 ;;		_setDS1307TimeDate
 18178 ;;		_getDS1307TimeDate
 18179 ;;		_RTC_Init
 18180 ;;		_writeEEPROM_ext
 18181 ;;		_readEEPROM_ext
 18182 ;;		_getDS1307Time
 18183 ;;		_setDS1307Time
 18184 ;; This function uses a non-reentrant model
 18185 ;;
 18186                           
 18187                           	psect	text65
 18188  006CCC                     __ptext65:
 18189                           	opt stack 0
 18190  006CCC                     _I2C_Start:
 18191                           	opt stack 0
 18192  006CCC  FFFF               	dw	65535	; assembler added errata NOP
 18193                           
 18194                           ;I2C.c: 27: I2C_Wait();
 18195                           
 18196                           ;incstack = 0
 18197  006CCE  ECB7  F036         	call	_I2C_Wait	;wreg free
 18198                           
 18199                           ;I2C.c: 28: SEN = 1;
 18200  006CD2  80C5               	bsf	4037,0,c	;volatile
 18201  006CD4  0012               	return		;funcret
 18202  006CD6  FFFF               	dw	65535	; errata NOP
 18203  006CD8                     __end_of_I2C_Start:
 18204                           	opt stack 0
 18205                           tosu	equ	0xFFF
 18206                           tosh	equ	0xFFE
 18207                           tosl	equ	0xFFD
 18208                           pclath	equ	0xFFA
 18209                           tblptru	equ	0xFF8
 18210                           tblptrh	equ	0xFF7
 18211                           tblptrl	equ	0xFF6
 18212                           tablat	equ	0xFF5
 18213                           prodh	equ	0xFF4
 18214                           prodl	equ	0xFF3
 18215                           intcon	equ	0xFF2
 18216                           indf0	equ	0xFEF
 18217                           postinc0	equ	0xFEE
 18218                           fsr0h	equ	0xFEA
 18219                           fsr0l	equ	0xFE9
 18220                           wreg	equ	0xFE8
 18221                           postdec1	equ	0xFE5
 18222                           fsr1l	equ	0xFE1
 18223                           indf2	equ	0xFDF
 18224                           postinc2	equ	0xFDE
 18225                           postdec2	equ	0xFDD
 18226                           fsr2h	equ	0xFDA
 18227                           fsr2l	equ	0xFD9
 18228                           status	equ	0xFD8
 18229                           
 18230 ;; *************** function _I2C_Wait *****************
 18231 ;; Defined at:
 18232 ;;		line 22 in file "I2C.c"
 18233 ;; Parameters:    Size  Location     Type
 18234 ;;		None
 18235 ;; Auto vars:     Size  Location     Type
 18236 ;;		None
 18237 ;; Return value:  Size  Location     Type
 18238 ;;                  1    wreg      void 
 18239 ;; Registers used:
 18240 ;;		wreg, status,2, status,0
 18241 ;; Tracked objects:
 18242 ;;		On entry : 0/0
 18243 ;;		On exit  : 0/0
 18244 ;;		Unchanged: 0/0
 18245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18246 ;;      Params:         0       0       0       0       0       0       0
 18247 ;;      Locals:         0       0       0       0       0       0       0
 18248 ;;      Temps:          0       1       0       0       0       0       0
 18249 ;;      Totals:         0       1       0       0       0       0       0
 18250 ;;Total ram usage:        1 bytes
 18251 ;; Hardware stack levels used:    1
 18252 ;; Hardware stack levels required when called:    6
 18253 ;; This function calls:
 18254 ;;		Nothing
 18255 ;; This function is called by:
 18256 ;;		_I2C_Start
 18257 ;;		_I2C_Restart
 18258 ;;		_I2C_Stop
 18259 ;;		_I2C_Write
 18260 ;;		_I2C_Read
 18261 ;; This function uses a non-reentrant model
 18262 ;;
 18263                           
 18264                           	psect	text66
 18265  006D6E                     __ptext66:
 18266                           	opt stack 0
 18267  006D6E                     _I2C_Wait:
 18268                           	opt stack 0
 18269  006D6E  FFFF               	dw	65535	; assembler added errata NOP
 18270                           
 18271                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 18272                           
 18273                           ;incstack = 0
 18274  006D70  B4C7               	btfsc	4039,2,c	;volatile
 18275  006D72  D7FD               	goto	_I2C_Wait
 18276  006D74  CFC5 F080          	movff	4037,??_I2C_Wait	;volatile
 18277  006D78  0E1F               	movlw	31
 18278  006D7A  0100               	movlb	0	; () banked
 18279  006D7C  1780               	andwf	??_I2C_Wait& (0+255),f,b
 18280  006D7E  B4D8               	btfsc	status,2,c
 18281                           
 18282                           ; BSR set to: 0
 18283                           
 18284                           ; BSR set to: 0
 18285  006D80  0012               	return		;funcret
 18286  006D82  FFFF               	dw	65535	; assembler added errata NOP
 18287  006D84  D7F4               	goto	_I2C_Wait
 18288  006D86  FFFF               	dw	65535	; errata NOP
 18289  006D88                     __end_of_I2C_Wait:
 18290                           	opt stack 0
 18291                           tosu	equ	0xFFF
 18292                           tosh	equ	0xFFE
 18293                           tosl	equ	0xFFD
 18294                           pclath	equ	0xFFA
 18295                           tblptru	equ	0xFF8
 18296                           tblptrh	equ	0xFF7
 18297                           tblptrl	equ	0xFF6
 18298                           tablat	equ	0xFF5
 18299                           prodh	equ	0xFF4
 18300                           prodl	equ	0xFF3
 18301                           intcon	equ	0xFF2
 18302                           indf0	equ	0xFEF
 18303                           postinc0	equ	0xFEE
 18304                           fsr0h	equ	0xFEA
 18305                           fsr0l	equ	0xFE9
 18306                           wreg	equ	0xFE8
 18307                           postdec1	equ	0xFE5
 18308                           fsr1l	equ	0xFE1
 18309                           indf2	equ	0xFDF
 18310                           postinc2	equ	0xFDE
 18311                           postdec2	equ	0xFDD
 18312                           fsr2h	equ	0xFDA
 18313                           fsr2l	equ	0xFD9
 18314                           status	equ	0xFD8
 18315                           
 18316 ;; *************** function _Lcd_Init *****************
 18317 ;; Defined at:
 18318 ;;		line 12 in file "lcd.h"
 18319 ;; Parameters:    Size  Location     Type
 18320 ;;		None
 18321 ;; Auto vars:     Size  Location     Type
 18322 ;;		None
 18323 ;; Return value:  Size  Location     Type
 18324 ;;                  1    wreg      void 
 18325 ;; Registers used:
 18326 ;;		wreg, status,2, cstack
 18327 ;; Tracked objects:
 18328 ;;		On entry : 0/0
 18329 ;;		On exit  : 0/0
 18330 ;;		Unchanged: 0/0
 18331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18332 ;;      Params:         0       0       0       0       0       0       0
 18333 ;;      Locals:         0       0       0       0       0       0       0
 18334 ;;      Temps:          0       1       0       0       0       0       0
 18335 ;;      Totals:         0       1       0       0       0       0       0
 18336 ;;Total ram usage:        1 bytes
 18337 ;; Hardware stack levels used:    1
 18338 ;; Hardware stack levels required when called:    8
 18339 ;; This function calls:
 18340 ;;		_Lcd_Cmd
 18341 ;;		_Lcd_Port
 18342 ;; This function is called by:
 18343 ;;		_main
 18344 ;; This function uses a non-reentrant model
 18345 ;;
 18346                           
 18347                           	psect	text67
 18348  0078EE                     __ptext67:
 18349                           	opt stack 0
 18350  0078EE                     _Lcd_Init:
 18351                           	opt stack 0
 18352  0078EE  FFFF               	dw	65535	; assembler added errata NOP
 18353                           
 18354                           ;lcd.h: 21: Lcd_Port(0x00);
 18355                           
 18356                           ; BSR set to: 0
 18357                           ;incstack = 0
 18358  0078F0  0E00               	movlw	0
 18359  0078F2  EC84  F039         	call	_Lcd_Port
 18360                           
 18361                           ;lcd.h: 22: _delay((unsigned long)((30)*(8000000/4000.0)));
 18362  0078F6  0E3B               	movlw	59
 18363  0078F8  0100               	movlb	0	; () banked
 18364  0078FA  6F83               	movwf	??_Lcd_Init& (0+255),b
 18365  0078FC  0E79               	movlw	121
 18366  0078FE                     u9057:
 18367  0078FE  FFFF               	dw	65535	; errata NOP
 18368  007900  2EE8               	decfsz	wreg,f,c
 18369  007902  D7FD               	bra	u9057
 18370  007904  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18371  007906  D7FB               	bra	u9057
 18372  007908  D000               	nop2	
 18373  00790A  F000               	nop	
 18374                           
 18375                           ;lcd.h: 23: Lcd_Cmd(0x03);
 18376  00790C  0E03               	movlw	3
 18377  00790E  EC32  F037         	call	_Lcd_Cmd
 18378                           
 18379                           ;lcd.h: 24: _delay((unsigned long)((15)*(8000000/4000.0)));
 18380  007912  0E1E               	movlw	30
 18381  007914  0100               	movlb	0	; () banked
 18382  007916  6F83               	movwf	??_Lcd_Init& (0+255),b
 18383  007918  0E3C               	movlw	60
 18384  00791A                     u9067:
 18385  00791A  FFFF               	dw	65535	; errata NOP
 18386  00791C  2EE8               	decfsz	wreg,f,c
 18387  00791E  D7FD               	bra	u9067
 18388  007920  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18389  007922  D7FB               	bra	u9067
 18390  007924  F000               	nop	
 18391                           
 18392                           ;lcd.h: 25: Lcd_Cmd(0x03);
 18393  007926  0E03               	movlw	3
 18394  007928  EC32  F037         	call	_Lcd_Cmd
 18395                           
 18396                           ;lcd.h: 26: _delay((unsigned long)((20)*(8000000/4000.0)));
 18397  00792C  0E27               	movlw	39
 18398  00792E  0100               	movlb	0	; () banked
 18399  007930  6F83               	movwf	??_Lcd_Init& (0+255),b
 18400  007932  0EFB               	movlw	251
 18401  007934                     u9077:
 18402  007934  FFFF               	dw	65535	; errata NOP
 18403  007936  2EE8               	decfsz	wreg,f,c
 18404  007938  D7FD               	bra	u9077
 18405  00793A  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18406  00793C  D7FB               	bra	u9077
 18407  00793E  D000               	nop2	
 18408  007940  F000               	nop	
 18409                           
 18410                           ;lcd.h: 27: Lcd_Cmd(0x03);
 18411  007942  0E03               	movlw	3
 18412  007944  EC32  F037         	call	_Lcd_Cmd
 18413                           
 18414                           ;lcd.h: 29: Lcd_Cmd(0x02);
 18415  007948  0E02               	movlw	2
 18416  00794A  EC32  F037         	call	_Lcd_Cmd
 18417                           
 18418                           ;lcd.h: 30: Lcd_Cmd(0x02);
 18419  00794E  0E02               	movlw	2
 18420  007950  EC32  F037         	call	_Lcd_Cmd
 18421                           
 18422                           ;lcd.h: 31: Lcd_Cmd(0x08);
 18423  007954  0E08               	movlw	8
 18424  007956  EC32  F037         	call	_Lcd_Cmd
 18425                           
 18426                           ;lcd.h: 32: Lcd_Cmd(0x00);
 18427  00795A  0E00               	movlw	0
 18428  00795C  EC32  F037         	call	_Lcd_Cmd
 18429                           
 18430                           ;lcd.h: 33: Lcd_Cmd(0x0C);
 18431  007960  0E0C               	movlw	12
 18432  007962  EC32  F037         	call	_Lcd_Cmd
 18433                           
 18434                           ;lcd.h: 34: Lcd_Cmd(0x00);
 18435  007966  0E00               	movlw	0
 18436  007968  EC32  F037         	call	_Lcd_Cmd
 18437                           
 18438                           ;lcd.h: 35: Lcd_Cmd(0x06);
 18439  00796C  0E06               	movlw	6
 18440  00796E  EC32  F037         	call	_Lcd_Cmd
 18441  007972  0012               	return		;funcret
 18442  007974  FFFF               	dw	65535	; errata NOP
 18443  007976                     __end_of_Lcd_Init:
 18444                           	opt stack 0
 18445                           tosu	equ	0xFFF
 18446                           tosh	equ	0xFFE
 18447                           tosl	equ	0xFFD
 18448                           pclath	equ	0xFFA
 18449                           tblptru	equ	0xFF8
 18450                           tblptrh	equ	0xFF7
 18451                           tblptrl	equ	0xFF6
 18452                           tablat	equ	0xFF5
 18453                           prodh	equ	0xFF4
 18454                           prodl	equ	0xFF3
 18455                           intcon	equ	0xFF2
 18456                           indf0	equ	0xFEF
 18457                           postinc0	equ	0xFEE
 18458                           fsr0h	equ	0xFEA
 18459                           fsr0l	equ	0xFE9
 18460                           wreg	equ	0xFE8
 18461                           postdec1	equ	0xFE5
 18462                           fsr1l	equ	0xFE1
 18463                           indf2	equ	0xFDF
 18464                           postinc2	equ	0xFDE
 18465                           postdec2	equ	0xFDD
 18466                           fsr2h	equ	0xFDA
 18467                           fsr2l	equ	0xFD9
 18468                           status	equ	0xFD8
 18469                           
 18470 ;; *************** function _Lcd_Clear *****************
 18471 ;; Defined at:
 18472 ;;		line 68 in file "lcd.h"
 18473 ;; Parameters:    Size  Location     Type
 18474 ;;		None
 18475 ;; Auto vars:     Size  Location     Type
 18476 ;;		None
 18477 ;; Return value:  Size  Location     Type
 18478 ;;                  1    wreg      void 
 18479 ;; Registers used:
 18480 ;;		wreg, status,2, cstack
 18481 ;; Tracked objects:
 18482 ;;		On entry : 0/0
 18483 ;;		On exit  : 0/0
 18484 ;;		Unchanged: 0/0
 18485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18486 ;;      Params:         0       0       0       0       0       0       0
 18487 ;;      Locals:         0       0       0       0       0       0       0
 18488 ;;      Temps:          0       0       0       0       0       0       0
 18489 ;;      Totals:         0       0       0       0       0       0       0
 18490 ;;Total ram usage:        0 bytes
 18491 ;; Hardware stack levels used:    1
 18492 ;; Hardware stack levels required when called:    8
 18493 ;; This function calls:
 18494 ;;		_Lcd_Cmd
 18495 ;; This function is called by:
 18496 ;;		_main
 18497 ;; This function uses a non-reentrant model
 18498 ;;
 18499                           
 18500                           	psect	text68
 18501  006D1A                     __ptext68:
 18502                           	opt stack 0
 18503  006D1A                     _Lcd_Clear:
 18504                           	opt stack 0
 18505  006D1A  FFFF               	dw	65535	; assembler added errata NOP
 18506                           
 18507                           ;lcd.h: 69: Lcd_Cmd(0);
 18508                           
 18509                           ;incstack = 0
 18510  006D1C  0E00               	movlw	0
 18511  006D1E  EC32  F037         	call	_Lcd_Cmd
 18512                           
 18513                           ;lcd.h: 70: Lcd_Cmd(1);
 18514  006D22  0E01               	movlw	1
 18515  006D24  EC32  F037         	call	_Lcd_Cmd
 18516  006D28  0012               	return		;funcret
 18517  006D2A  FFFF               	dw	65535	; errata NOP
 18518  006D2C                     __end_of_Lcd_Clear:
 18519                           	opt stack 0
 18520                           tosu	equ	0xFFF
 18521                           tosh	equ	0xFFE
 18522                           tosl	equ	0xFFD
 18523                           pclath	equ	0xFFA
 18524                           tblptru	equ	0xFF8
 18525                           tblptrh	equ	0xFF7
 18526                           tblptrl	equ	0xFF6
 18527                           tablat	equ	0xFF5
 18528                           prodh	equ	0xFF4
 18529                           prodl	equ	0xFF3
 18530                           intcon	equ	0xFF2
 18531                           indf0	equ	0xFEF
 18532                           postinc0	equ	0xFEE
 18533                           fsr0h	equ	0xFEA
 18534                           fsr0l	equ	0xFE9
 18535                           wreg	equ	0xFE8
 18536                           postdec1	equ	0xFE5
 18537                           fsr1l	equ	0xFE1
 18538                           indf2	equ	0xFDF
 18539                           postinc2	equ	0xFDE
 18540                           postdec2	equ	0xFDD
 18541                           fsr2h	equ	0xFDA
 18542                           fsr2l	equ	0xFD9
 18543                           status	equ	0xFD8
 18544                           
 18545 ;; *************** function _Lcd_Cmd *****************
 18546 ;; Defined at:
 18547 ;;		line 60 in file "lcd.h"
 18548 ;; Parameters:    Size  Location     Type
 18549 ;;  a               1    wreg     unsigned char 
 18550 ;; Auto vars:     Size  Location     Type
 18551 ;;  a               1    2[BANK0 ] unsigned char 
 18552 ;; Return value:  Size  Location     Type
 18553 ;;                  1    wreg      void 
 18554 ;; Registers used:
 18555 ;;		wreg, status,2, cstack
 18556 ;; Tracked objects:
 18557 ;;		On entry : 0/0
 18558 ;;		On exit  : 0/0
 18559 ;;		Unchanged: 0/0
 18560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18561 ;;      Params:         0       0       0       0       0       0       0
 18562 ;;      Locals:         0       1       0       0       0       0       0
 18563 ;;      Temps:          0       1       0       0       0       0       0
 18564 ;;      Totals:         0       2       0       0       0       0       0
 18565 ;;Total ram usage:        2 bytes
 18566 ;; Hardware stack levels used:    1
 18567 ;; Hardware stack levels required when called:    7
 18568 ;; This function calls:
 18569 ;;		_Lcd_Port
 18570 ;; This function is called by:
 18571 ;;		_Lcd_Init
 18572 ;;		_Lcd_Clear
 18573 ;;		_Lcd_Set_Cursor
 18574 ;;		_criarCaracteresCGRAM
 18575 ;; This function uses a non-reentrant model
 18576 ;;
 18577                           
 18578                           	psect	text69
 18579  006E64                     __ptext69:
 18580                           	opt stack 0
 18581  006E64                     _Lcd_Cmd:
 18582                           	opt stack 0
 18583  006E64  FFFF               	dw	65535	; assembler added errata NOP
 18584                           
 18585                           ;incstack = 0
 18586                           ;Lcd_Cmd@a stored from wreg
 18587  006E66  0100               	movlb	0	; () banked
 18588  006E68  6F82               	movwf	Lcd_Cmd@a& (0+255),b
 18589                           
 18590                           ;lcd.h: 61: PORTDbits.RD1 = 0;
 18591  006E6A  9283               	bcf	3971,1,c	;volatile
 18592                           
 18593                           ;lcd.h: 62: Lcd_Port(a);
 18594  006E6C  0100               	movlb	0	; () banked
 18595  006E6E  5182               	movf	Lcd_Cmd@a& (0+255),w,b
 18596  006E70  EC84  F039         	call	_Lcd_Port
 18597                           
 18598                           ;lcd.h: 63: PORTDbits.RD0 = 1;
 18599  006E74  8083               	bsf	3971,0,c	;volatile
 18600                           
 18601                           ;lcd.h: 64: _delay((unsigned long)((15)*(8000000/4000.0)));
 18602  006E76  0E1E               	movlw	30
 18603  006E78  0100               	movlb	0	; () banked
 18604  006E7A  6F81               	movwf	??_Lcd_Cmd& (0+255),b
 18605  006E7C  0E3C               	movlw	60
 18606  006E7E                     u9087:
 18607  006E7E  FFFF               	dw	65535	; errata NOP
 18608  006E80  2EE8               	decfsz	wreg,f,c
 18609  006E82  D7FD               	bra	u9087
 18610  006E84  2F81               	decfsz	??_Lcd_Cmd& (0+255),f,b
 18611  006E86  D7FB               	bra	u9087
 18612  006E88  F000               	nop	
 18613                           
 18614                           ;lcd.h: 65: PORTDbits.RD0 = 0;
 18615  006E8A  9083               	bcf	3971,0,c	;volatile
 18616  006E8C  0012               	return		;funcret
 18617  006E8E  FFFF               	dw	65535	; errata NOP
 18618  006E90                     __end_of_Lcd_Cmd:
 18619                           	opt stack 0
 18620                           tosu	equ	0xFFF
 18621                           tosh	equ	0xFFE
 18622                           tosl	equ	0xFFD
 18623                           pclath	equ	0xFFA
 18624                           tblptru	equ	0xFF8
 18625                           tblptrh	equ	0xFF7
 18626                           tblptrl	equ	0xFF6
 18627                           tablat	equ	0xFF5
 18628                           prodh	equ	0xFF4
 18629                           prodl	equ	0xFF3
 18630                           intcon	equ	0xFF2
 18631                           indf0	equ	0xFEF
 18632                           postinc0	equ	0xFEE
 18633                           fsr0h	equ	0xFEA
 18634                           fsr0l	equ	0xFE9
 18635                           wreg	equ	0xFE8
 18636                           postdec1	equ	0xFE5
 18637                           fsr1l	equ	0xFE1
 18638                           indf2	equ	0xFDF
 18639                           postinc2	equ	0xFDE
 18640                           postdec2	equ	0xFDD
 18641                           fsr2h	equ	0xFDA
 18642                           fsr2l	equ	0xFD9
 18643                           status	equ	0xFD8
 18644                           
 18645 ;; *************** function _Lcd_Port *****************
 18646 ;; Defined at:
 18647 ;;		line 38 in file "lcd.h"
 18648 ;; Parameters:    Size  Location     Type
 18649 ;;  a               1    wreg     unsigned char 
 18650 ;; Auto vars:     Size  Location     Type
 18651 ;;  a               1    0[BANK0 ] unsigned char 
 18652 ;; Return value:  Size  Location     Type
 18653 ;;                  1    wreg      void 
 18654 ;; Registers used:
 18655 ;;		wreg
 18656 ;; Tracked objects:
 18657 ;;		On entry : 0/0
 18658 ;;		On exit  : 0/0
 18659 ;;		Unchanged: 0/0
 18660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18661 ;;      Params:         0       0       0       0       0       0       0
 18662 ;;      Locals:         0       1       0       0       0       0       0
 18663 ;;      Temps:          0       0       0       0       0       0       0
 18664 ;;      Totals:         0       1       0       0       0       0       0
 18665 ;;Total ram usage:        1 bytes
 18666 ;; Hardware stack levels used:    1
 18667 ;; Hardware stack levels required when called:    6
 18668 ;; This function calls:
 18669 ;;		Nothing
 18670 ;; This function is called by:
 18671 ;;		_Lcd_Init
 18672 ;;		_Lcd_Cmd
 18673 ;;		_Lcd_Write_Char
 18674 ;; This function uses a non-reentrant model
 18675 ;;
 18676                           
 18677                           	psect	text70
 18678  007308                     __ptext70:
 18679                           	opt stack 0
 18680  007308                     _Lcd_Port:
 18681                           	opt stack 0
 18682  007308  FFFF               	dw	65535	; assembler added errata NOP
 18683                           
 18684                           ;incstack = 0
 18685                           ;Lcd_Port@a stored from wreg
 18686  00730A  0100               	movlb	0	; () banked
 18687  00730C  6F80               	movwf	Lcd_Port@a& (0+255),b
 18688                           
 18689                           ;lcd.h: 39: if (a & 1)
 18690  00730E  0100               	movlb	0	; () banked
 18691  007310  A180               	btfss	Lcd_Port@a& (0+255),0,b
 18692  007312  D002               	goto	l613
 18693                           
 18694                           ; BSR set to: 0
 18695                           ;lcd.h: 40: PORTDbits.RD2 = 1;
 18696  007314  8483               	bsf	3971,2,c	;volatile
 18697  007316  D002               	goto	l614
 18698  007318                     l613:
 18699  007318  FFFF               	dw	65535	; assembler added errata NOP
 18700                           
 18701                           ; BSR set to: 0
 18702                           ;lcd.h: 41: else
 18703                           ;lcd.h: 42: PORTDbits.RD2 = 0;
 18704  00731A  9483               	bcf	3971,2,c	;volatile
 18705  00731C                     l614:
 18706  00731C  FFFF               	dw	65535	; assembler added errata NOP
 18707                           
 18708                           ; BSR set to: 0
 18709                           ;lcd.h: 44: if (a & 2)
 18710                           
 18711                           ; BSR set to: 0
 18712  00731E  A380               	btfss	Lcd_Port@a& (0+255),1,b
 18713  007320  D002               	goto	l615
 18714                           
 18715                           ; BSR set to: 0
 18716                           ;lcd.h: 45: PORTDbits.RD3 = 1;
 18717  007322  8683               	bsf	3971,3,c	;volatile
 18718  007324  D002               	goto	l616
 18719  007326                     l615:
 18720  007326  FFFF               	dw	65535	; assembler added errata NOP
 18721                           
 18722                           ; BSR set to: 0
 18723                           ;lcd.h: 46: else
 18724                           ;lcd.h: 47: PORTDbits.RD3 = 0;
 18725  007328  9683               	bcf	3971,3,c	;volatile
 18726  00732A                     l616:
 18727  00732A  FFFF               	dw	65535	; assembler added errata NOP
 18728                           
 18729                           ; BSR set to: 0
 18730                           ;lcd.h: 49: if (a & 4)
 18731                           
 18732                           ; BSR set to: 0
 18733  00732C  A580               	btfss	Lcd_Port@a& (0+255),2,b
 18734  00732E  D002               	goto	l617
 18735                           
 18736                           ; BSR set to: 0
 18737                           ;lcd.h: 50: PORTDbits.RD4 = 1;
 18738  007330  8883               	bsf	3971,4,c	;volatile
 18739  007332  D002               	goto	l618
 18740  007334                     l617:
 18741  007334  FFFF               	dw	65535	; assembler added errata NOP
 18742                           
 18743                           ; BSR set to: 0
 18744                           ;lcd.h: 51: else
 18745                           ;lcd.h: 52: PORTDbits.RD4 = 0;
 18746  007336  9883               	bcf	3971,4,c	;volatile
 18747  007338                     l618:
 18748  007338  FFFF               	dw	65535	; assembler added errata NOP
 18749                           
 18750                           ; BSR set to: 0
 18751                           ;lcd.h: 54: if (a & 8)
 18752                           
 18753                           ; BSR set to: 0
 18754  00733A  A780               	btfss	Lcd_Port@a& (0+255),3,b
 18755  00733C  D002               	goto	l619
 18756                           
 18757                           ; BSR set to: 0
 18758                           ;lcd.h: 55: PORTDbits.RD5 = 1;
 18759  00733E  8A83               	bsf	3971,5,c	;volatile
 18760  007340  D002               	goto	l620
 18761  007342                     l619:
 18762  007342  FFFF               	dw	65535	; assembler added errata NOP
 18763                           
 18764                           ; BSR set to: 0
 18765                           ;lcd.h: 56: else
 18766                           ;lcd.h: 57: PORTDbits.RD5 = 0;
 18767  007344  9A83               	bcf	3971,5,c	;volatile
 18768  007346                     l620:
 18769  007346  FFFF               	dw	65535	; assembler added errata NOP
 18770                           
 18771                           ; BSR set to: 0
 18772                           
 18773                           ; BSR set to: 0
 18774  007348  0012               	return		;funcret
 18775  00734A  FFFF               	dw	65535	; errata NOP
 18776  00734C                     __end_of_Lcd_Port:
 18777                           	opt stack 0
 18778                           tosu	equ	0xFFF
 18779                           tosh	equ	0xFFE
 18780                           tosl	equ	0xFFD
 18781                           pclath	equ	0xFFA
 18782                           tblptru	equ	0xFF8
 18783                           tblptrh	equ	0xFF7
 18784                           tblptrl	equ	0xFF6
 18785                           tablat	equ	0xFF5
 18786                           prodh	equ	0xFF4
 18787                           prodl	equ	0xFF3
 18788                           intcon	equ	0xFF2
 18789                           indf0	equ	0xFEF
 18790                           postinc0	equ	0xFEE
 18791                           fsr0h	equ	0xFEA
 18792                           fsr0l	equ	0xFE9
 18793                           wreg	equ	0xFE8
 18794                           postdec1	equ	0xFE5
 18795                           fsr1l	equ	0xFE1
 18796                           indf2	equ	0xFDF
 18797                           postinc2	equ	0xFDE
 18798                           postdec2	equ	0xFDD
 18799                           fsr2h	equ	0xFDA
 18800                           fsr2l	equ	0xFD9
 18801                           status	equ	0xFD8
 18802                           
 18803 ;; *************** function _I2C_Master_Init *****************
 18804 ;; Defined at:
 18805 ;;		line 13 in file "I2C.c"
 18806 ;; Parameters:    Size  Location     Type
 18807 ;;  c               4   13[BANK0 ] const unsigned long 
 18808 ;; Auto vars:     Size  Location     Type
 18809 ;;		None
 18810 ;; Return value:  Size  Location     Type
 18811 ;;                  1    wreg      void 
 18812 ;; Registers used:
 18813 ;;		wreg, status,2, status,0, cstack
 18814 ;; Tracked objects:
 18815 ;;		On entry : 0/0
 18816 ;;		On exit  : 0/0
 18817 ;;		Unchanged: 0/0
 18818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18819 ;;      Params:         0       4       0       0       0       0       0
 18820 ;;      Locals:         0       0       0       0       0       0       0
 18821 ;;      Temps:          0       4       0       0       0       0       0
 18822 ;;      Totals:         0       8       0       0       0       0       0
 18823 ;;Total ram usage:        8 bytes
 18824 ;; Hardware stack levels used:    1
 18825 ;; Hardware stack levels required when called:    7
 18826 ;; This function calls:
 18827 ;;		___lldiv
 18828 ;; This function is called by:
 18829 ;;		_main
 18830 ;; This function uses a non-reentrant model
 18831 ;;
 18832                           
 18833                           	psect	text71
 18834  007630                     __ptext71:
 18835                           	opt stack 0
 18836  007630                     _I2C_Master_Init:
 18837                           	opt stack 0
 18838  007630  FFFF               	dw	65535	; assembler added errata NOP
 18839                           
 18840                           ;I2C.c: 14: SSPCON1 = 0b00101000;
 18841                           
 18842                           ; BSR set to: 0
 18843                           ;incstack = 0
 18844  007632  0E28               	movlw	40
 18845  007634  6EC6               	movwf	4038,c	;volatile
 18846                           
 18847                           ;I2C.c: 15: SSPCON2 = 0;
 18848  007636  0E00               	movlw	0
 18849  007638  6EC5               	movwf	4037,c	;volatile
 18850                           
 18851                           ;I2C.c: 16: SSPADD = (8000000 / (4 * c)) - 1;
 18852  00763A  0E00               	movlw	0
 18853  00763C  0100               	movlb	0	; () banked
 18854  00763E  6F80               	movwf	___lldiv@dividend& (0+255),b
 18855  007640  0E12               	movlw	18
 18856  007642  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 18857  007644  0E7A               	movlw	122
 18858  007646  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 18859  007648  0E00               	movlw	0
 18860  00764A  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 18861  00764C  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 18862  007650  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 18863  007654  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 18864  007658  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 18865  00765C  0E02               	movlw	2
 18866  00765E                     u8735:
 18867  00765E  FFFF               	dw	65535	; assembler added errata NOP
 18868  007660  90D8               	bcf	status,0,c
 18869  007662  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 18870  007664  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 18871  007666  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 18872  007668  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 18873  00766A  2EE8               	decfsz	wreg,f,c
 18874  00766C  D7F8               	goto	u8735
 18875  00766E  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 18876  007672  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 18877  007676  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 18878  00767A  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 18879  00767E  ECBB  F03C         	call	___lldiv	;wreg free
 18880  007682  0100               	movlb	0	; () banked
 18881  007684  0580               	decf	?___lldiv& (0+255),w,b
 18882  007686  6EC8               	movwf	4040,c	;volatile
 18883                           
 18884                           ; BSR set to: 0
 18885                           ;I2C.c: 17: SSPSTAT = 0;
 18886  007688  0E00               	movlw	0
 18887  00768A  6EC7               	movwf	4039,c	;volatile
 18888                           
 18889                           ; BSR set to: 0
 18890                           ;I2C.c: 18: TRISCbits.RC3 = 1;
 18891  00768C  8694               	bsf	3988,3,c	;volatile
 18892                           
 18893                           ; BSR set to: 0
 18894                           ;I2C.c: 19: TRISCbits.RC4 = 1;
 18895  00768E  8894               	bsf	3988,4,c	;volatile
 18896                           
 18897                           ; BSR set to: 0
 18898  007690  0012               	return		;funcret
 18899  007692  FFFF               	dw	65535	; errata NOP
 18900  007694                     __end_of_I2C_Master_Init:
 18901                           	opt stack 0
 18902                           tosu	equ	0xFFF
 18903                           tosh	equ	0xFFE
 18904                           tosl	equ	0xFFD
 18905                           pclath	equ	0xFFA
 18906                           tblptru	equ	0xFF8
 18907                           tblptrh	equ	0xFF7
 18908                           tblptrl	equ	0xFF6
 18909                           tablat	equ	0xFF5
 18910                           prodh	equ	0xFF4
 18911                           prodl	equ	0xFF3
 18912                           intcon	equ	0xFF2
 18913                           indf0	equ	0xFEF
 18914                           postinc0	equ	0xFEE
 18915                           fsr0h	equ	0xFEA
 18916                           fsr0l	equ	0xFE9
 18917                           wreg	equ	0xFE8
 18918                           postdec1	equ	0xFE5
 18919                           fsr1l	equ	0xFE1
 18920                           indf2	equ	0xFDF
 18921                           postinc2	equ	0xFDE
 18922                           postdec2	equ	0xFDD
 18923                           fsr2h	equ	0xFDA
 18924                           fsr2l	equ	0xFD9
 18925                           status	equ	0xFD8
 18926                           
 18927 ;; *************** function ___lldiv *****************
 18928 ;; Defined at:
 18929 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 18930 ;; Parameters:    Size  Location     Type
 18931 ;;  dividend        4    0[BANK0 ] unsigned long 
 18932 ;;  divisor         4    4[BANK0 ] unsigned long 
 18933 ;; Auto vars:     Size  Location     Type
 18934 ;;  quotient        4    8[BANK0 ] unsigned long 
 18935 ;;  counter         1   12[BANK0 ] unsigned char 
 18936 ;; Return value:  Size  Location     Type
 18937 ;;                  4    0[BANK0 ] unsigned long 
 18938 ;; Registers used:
 18939 ;;		wreg, status,2, status,0
 18940 ;; Tracked objects:
 18941 ;;		On entry : 0/0
 18942 ;;		On exit  : 0/0
 18943 ;;		Unchanged: 0/0
 18944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18945 ;;      Params:         0       8       0       0       0       0       0
 18946 ;;      Locals:         0       5       0       0       0       0       0
 18947 ;;      Temps:          0       0       0       0       0       0       0
 18948 ;;      Totals:         0      13       0       0       0       0       0
 18949 ;;Total ram usage:       13 bytes
 18950 ;; Hardware stack levels used:    1
 18951 ;; Hardware stack levels required when called:    6
 18952 ;; This function calls:
 18953 ;;		Nothing
 18954 ;; This function is called by:
 18955 ;;		_I2C_Master_Init
 18956 ;; This function uses a non-reentrant model
 18957 ;;
 18958                           
 18959                           	psect	text72
 18960  007976                     __ptext72:
 18961                           	opt stack 0
 18962  007976                     ___lldiv:
 18963                           	opt stack 0
 18964  007976  FFFF               	dw	65535	; assembler added errata NOP
 18965                           
 18966                           ; BSR set to: 0
 18967                           ;incstack = 0
 18968  007978  0E00               	movlw	0
 18969  00797A  0100               	movlb	0	; () banked
 18970  00797C  6F88               	movwf	___lldiv@quotient& (0+255),b
 18971  00797E  0E00               	movlw	0
 18972  007980  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 18973  007982  0E00               	movlw	0
 18974  007984  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 18975  007986  0E00               	movlw	0
 18976  007988  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 18977                           
 18978                           ; BSR set to: 0
 18979  00798A  5184               	movf	___lldiv@divisor& (0+255),w,b
 18980  00798C  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 18981  00798E  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 18982  007990  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 18983  007992  B4D8               	btfsc	status,2,c
 18984  007994  D02E               	goto	l1482
 18985                           
 18986                           ; BSR set to: 0
 18987  007996  0E01               	movlw	1
 18988  007998  6F8C               	movwf	___lldiv@counter& (0+255),b
 18989  00799A  D007               	goto	l1477
 18990  00799C  FFFF               	dw	65535	; assembler added errata NOP
 18991                           
 18992                           ; BSR set to: 0
 18993                           
 18994                           ; BSR set to: 0
 18995  00799E  90D8               	bcf	status,0,c
 18996  0079A0  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 18997  0079A2  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 18998  0079A4  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 18999  0079A6  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 19000  0079A8  2B8C               	incf	___lldiv@counter& (0+255),f,b
 19001  0079AA                     l1477:
 19002  0079AA  FFFF               	dw	65535	; assembler added errata NOP
 19003                           
 19004                           ; BSR set to: 0
 19005                           
 19006                           ; BSR set to: 0
 19007  0079AC  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 19008  0079AE  D7F6               	goto	l1478
 19009  0079B0                     u6750:
 19010  0079B0  FFFF               	dw	65535	; assembler added errata NOP
 19011                           
 19012                           ; BSR set to: 0
 19013                           
 19014                           ; BSR set to: 0
 19015                           
 19016                           ; BSR set to: 0
 19017  0079B2  90D8               	bcf	status,0,c
 19018  0079B4  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 19019  0079B6  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 19020  0079B8  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 19021  0079BA  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 19022                           
 19023                           ; BSR set to: 0
 19024  0079BC  5184               	movf	___lldiv@divisor& (0+255),w,b
 19025  0079BE  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 19026  0079C0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19027  0079C2  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 19028  0079C4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19029  0079C6  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 19030  0079C8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19031  0079CA  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 19032  0079CC  A0D8               	btfss	status,0,c
 19033  0079CE  D009               	goto	l1481
 19034                           
 19035                           ; BSR set to: 0
 19036  0079D0  5184               	movf	___lldiv@divisor& (0+255),w,b
 19037  0079D2  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 19038  0079D4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19039  0079D6  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 19040  0079D8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19041  0079DA  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 19042  0079DC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19043  0079DE  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 19044                           
 19045                           ; BSR set to: 0
 19046  0079E0  8188               	bsf	___lldiv@quotient& (0+255),0,b
 19047  0079E2                     l1481:
 19048  0079E2  FFFF               	dw	65535	; assembler added errata NOP
 19049                           
 19050                           ; BSR set to: 0
 19051                           
 19052                           ; BSR set to: 0
 19053  0079E4  90D8               	bcf	status,0,c
 19054  0079E6  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 19055  0079E8  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 19056  0079EA  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 19057  0079EC  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 19058                           
 19059                           ; BSR set to: 0
 19060  0079EE  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 19061  0079F0  D7DF               	goto	u6750
 19062  0079F2                     l1482:
 19063  0079F2  FFFF               	dw	65535	; assembler added errata NOP
 19064                           
 19065                           ; BSR set to: 0
 19066                           
 19067                           ; BSR set to: 0
 19068  0079F4  C088  F080         	movff	___lldiv@quotient,?___lldiv
 19069  0079F8  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 19070  0079FC  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 19071  007A00  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 19072                           
 19073                           ; BSR set to: 0
 19074  007A04  0012               	return		;funcret
 19075  007A06  FFFF               	dw	65535	; errata NOP
 19076  007A08                     __end_of___lldiv:
 19077                           	opt stack 0
 19078                           tosu	equ	0xFFF
 19079                           tosh	equ	0xFFE
 19080                           tosl	equ	0xFFD
 19081                           pclath	equ	0xFFA
 19082                           tblptru	equ	0xFF8
 19083                           tblptrh	equ	0xFF7
 19084                           tblptrl	equ	0xFF6
 19085                           tablat	equ	0xFF5
 19086                           prodh	equ	0xFF4
 19087                           prodl	equ	0xFF3
 19088                           intcon	equ	0xFF2
 19089                           indf0	equ	0xFEF
 19090                           postinc0	equ	0xFEE
 19091                           fsr0h	equ	0xFEA
 19092                           fsr0l	equ	0xFE9
 19093                           wreg	equ	0xFE8
 19094                           postdec1	equ	0xFE5
 19095                           fsr1l	equ	0xFE1
 19096                           indf2	equ	0xFDF
 19097                           postinc2	equ	0xFDE
 19098                           postdec2	equ	0xFDD
 19099                           fsr2h	equ	0xFDA
 19100                           fsr2l	equ	0xFD9
 19101                           status	equ	0xFD8
 19102                           
 19103 ;; *************** function _TIMER *****************
 19104 ;; Defined at:
 19105 ;;		line 32 in file "Main.c"
 19106 ;; Parameters:    Size  Location     Type
 19107 ;;		None
 19108 ;; Auto vars:     Size  Location     Type
 19109 ;;  c               1   66[COMRAM] unsigned char 
 19110 ;; Return value:  Size  Location     Type
 19111 ;;                  1    wreg      void 
 19112 ;; Registers used:
 19113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19114 ;; Tracked objects:
 19115 ;;		On entry : 0/0
 19116 ;;		On exit  : 0/0
 19117 ;;		Unchanged: 0/0
 19118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19119 ;;      Params:         0       0       0       0       0       0       0
 19120 ;;      Locals:         1       0       0       0       0       0       0
 19121 ;;      Temps:         18       0       0       0       0       0       0
 19122 ;;      Totals:        19       0       0       0       0       0       0
 19123 ;;Total ram usage:       19 bytes
 19124 ;; Hardware stack levels used:    1
 19125 ;; Hardware stack levels required when called:    5
 19126 ;; This function calls:
 19127 ;;		_lerTransdutor
 19128 ;;		_readButtons
 19129 ;;		_timer
 19130 ;; This function is called by:
 19131 ;;		Interrupt level 2
 19132 ;; This function uses a non-reentrant model
 19133 ;;
 19134                           
 19135                           	psect	intcode
 19136  000008                     __pintcode:
 19137                           	opt stack 0
 19138  000008                     _TIMER:
 19139                           	opt stack 0
 19140  000008  FFFF               	dw	65535	; assembler added errata NOP
 19141                           
 19142                           ; BSR set to: 0
 19143                           ;incstack = 0
 19144  00000A  827D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19145  00000C  CFFA F031          	movff	pclath,??_TIMER
 19146  000010  CFFB F032          	movff	pclatu,??_TIMER+1
 19147  000014  CFE9 F033          	movff	fsr0l,??_TIMER+2
 19148  000018  CFEA F034          	movff	fsr0h,??_TIMER+3
 19149  00001C  CFE1 F035          	movff	fsr1l,??_TIMER+4
 19150  000020  CFE2 F036          	movff	fsr1h,??_TIMER+5
 19151  000024  CFD9 F037          	movff	fsr2l,??_TIMER+6
 19152  000028  CFDA F038          	movff	fsr2h,??_TIMER+7
 19153  00002C  CFF3 F039          	movff	prodl,??_TIMER+8
 19154  000030  CFF4 F03A          	movff	prodh,??_TIMER+9
 19155  000034  CFF6 F03B          	movff	tblptrl,??_TIMER+10
 19156  000038  CFF7 F03C          	movff	tblptrh,??_TIMER+11
 19157  00003C  CFF8 F03D          	movff	tblptru,??_TIMER+12
 19158  000040  CFF5 F03E          	movff	tablat,??_TIMER+13
 19159  000044  C07D  F03F         	movff	btemp,??_TIMER+14
 19160  000048  C07E  F040         	movff	btemp+1,??_TIMER+15
 19161  00004C  C07F  F041         	movff	btemp+2,??_TIMER+16
 19162  000050  C080  F042         	movff	btemp+3,??_TIMER+17
 19163                           
 19164                           ;Main.c: 33: if (TMR0IF) {
 19165  000054  A4F2               	btfss	intcon,2,c	;volatile
 19166  000056  D01A               	goto	i2l891
 19167                           
 19168                           ;Main.c: 34: TMR0IF = 0x00;
 19169  000058  94F2               	bcf	intcon,2,c	;volatile
 19170                           
 19171                           ;Main.c: 35: TMR0H = 0x3C;
 19172  00005A  0E3C               	movlw	60
 19173  00005C  6ED7               	movwf	4055,c	;volatile
 19174                           
 19175                           ;Main.c: 36: TMR0L = 0xB0;
 19176  00005E  0EB0               	movlw	176
 19177  000060  6ED6               	movwf	4054,c	;volatile
 19178                           
 19179                           ;Main.c: 38: base_sec++;
 19180  000062  2A71               	incf	_base_sec,f,c
 19181                           
 19182                           ;Main.c: 40: if (base_sec == 5) {
 19183  000064  0E05               	movlw	5
 19184  000066  1871               	xorwf	_base_sec,w,c
 19185  000068  B4D8               	btfsc	status,2,c
 19186                           
 19187                           ;Main.c: 41: blinkk = ~blinkk;
 19188  00006A  1E67               	comf	_blinkk,f,c
 19189                           
 19190                           ;Main.c: 42: }
 19191                           ;Main.c: 44: lerTransdutor();
 19192  00006C  ECE7  F00F         	call	_lerTransdutor	;wreg free
 19193                           
 19194                           ;Main.c: 45: readButtons();
 19195  000070  ECF5  F03B         	call	_readButtons	;wreg free
 19196                           
 19197                           ;Main.c: 47: if (base_sec > 9) {
 19198  000074  0E09               	movlw	9
 19199  000076  6471               	cpfsgt	_base_sec,c
 19200  000078  D009               	goto	i2l891
 19201                           
 19202                           ;Main.c: 48: base_sec = 0;
 19203  00007A  0E00               	movlw	0
 19204  00007C  6E71               	movwf	_base_sec,c
 19205                           
 19206                           ;Main.c: 49: blinkk = ~blinkk;
 19207  00007E  1E67               	comf	_blinkk,f,c
 19208                           
 19209                           ;Main.c: 50: timer();
 19210  000080  EC9E  F015         	call	_timer	;wreg free
 19211                           
 19212                           ;Main.c: 51: if (RCSTAbits.OERR) {
 19213  000084  A2AB               	btfss	4011,1,c	;volatile
 19214  000086  D002               	goto	i2l891
 19215                           
 19216                           ;Main.c: 52: RCSTAbits.CREN = 0;
 19217  000088  98AB               	bcf	4011,4,c	;volatile
 19218                           
 19219                           ;Main.c: 53: RCSTAbits.CREN = 1;
 19220  00008A  88AB               	bsf	4011,4,c	;volatile
 19221  00008C                     i2l891:
 19222  00008C  FFFF               	dw	65535	; assembler added errata NOP
 19223                           
 19224                           ;Main.c: 54: }
 19225                           ;Main.c: 55: }
 19226                           ;Main.c: 56: }
 19227                           ;Main.c: 57: if (RCIF) {
 19228  00008E  AA9E               	btfss	3998,5,c	;volatile
 19229  000090  D01B               	goto	i2l894
 19230                           
 19231                           ;Main.c: 58: char c = RCREG;
 19232  000092  CFAE F043          	movff	4014,TIMER@c	;volatile
 19233                           
 19234                           ;Main.c: 59: if (c != '\n' && c != '\r') {
 19235  000096  0E0A               	movlw	10
 19236  000098  1843               	xorwf	TIMER@c,w,c
 19237  00009A  B4D8               	btfsc	status,2,c
 19238  00009C  D00F               	goto	i2l893
 19239  00009E  0E0D               	movlw	13
 19240  0000A0  1843               	xorwf	TIMER@c,w,c
 19241  0000A2  B4D8               	btfsc	status,2,c
 19242  0000A4  D00B               	goto	i2l893
 19243                           
 19244                           ;Main.c: 60: bufferSerial[cbf++] = c;
 19245  0000A6  5066               	movf	_cbf,w,c
 19246  0000A8  0D01               	mullw	1
 19247  0000AA  0E00               	movlw	low _bufferSerial
 19248  0000AC  24F3               	addwf	prodl,w,c
 19249  0000AE  6ED9               	movwf	fsr2l,c
 19250  0000B0  0E01               	movlw	high _bufferSerial
 19251  0000B2  20F4               	addwfc	prodh,w,c
 19252  0000B4  6EDA               	movwf	fsr2h,c
 19253  0000B6  C043  FFDF         	movff	TIMER@c,indf2
 19254  0000BA  2A66               	incf	_cbf,f,c
 19255  0000BC                     i2l893:
 19256  0000BC  FFFF               	dw	65535	; assembler added errata NOP
 19257                           
 19258                           ;Main.c: 61: }
 19259                           ;Main.c: 62: if (cbf >= 60) cbf = 0;
 19260  0000BE  0E3B               	movlw	59
 19261  0000C0  6466               	cpfsgt	_cbf,c
 19262  0000C2  D002               	goto	i2l894
 19263  0000C4  0E00               	movlw	0
 19264  0000C6  6E66               	movwf	_cbf,c
 19265  0000C8                     i2l894:
 19266  0000C8  FFFF               	dw	65535	; assembler added errata NOP
 19267  0000CA  C042  F080         	movff	??_TIMER+17,btemp+3
 19268  0000CE  C041  F07F         	movff	??_TIMER+16,btemp+2
 19269  0000D2  C040  F07E         	movff	??_TIMER+15,btemp+1
 19270  0000D6  C03F  F07D         	movff	??_TIMER+14,btemp
 19271  0000DA  C03E  FFF5         	movff	??_TIMER+13,tablat
 19272  0000DE  C03D  FFF8         	movff	??_TIMER+12,tblptru
 19273  0000E2  C03C  FFF7         	movff	??_TIMER+11,tblptrh
 19274  0000E6  C03B  FFF6         	movff	??_TIMER+10,tblptrl
 19275  0000EA  C03A  FFF4         	movff	??_TIMER+9,prodh
 19276  0000EE  C039  FFF3         	movff	??_TIMER+8,prodl
 19277  0000F2  C038  FFDA         	movff	??_TIMER+7,fsr2h
 19278  0000F6  C037  FFD9         	movff	??_TIMER+6,fsr2l
 19279  0000FA  C036  FFE2         	movff	??_TIMER+5,fsr1h
 19280  0000FE  C035  FFE1         	movff	??_TIMER+4,fsr1l
 19281  000102  C034  FFEA         	movff	??_TIMER+3,fsr0h
 19282  000106  C033  FFE9         	movff	??_TIMER+2,fsr0l
 19283  00010A  C032  FFFB         	movff	??_TIMER+1,pclatu
 19284  00010E  C031  FFFA         	movff	??_TIMER,pclath
 19285  000112  927D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19286  000114  0011               	retfie		f
 19287  000116  FFFF               	dw	65535	; errata NOP
 19288  000118                     __end_of_TIMER:
 19289                           	opt stack 0
 19290                           tosu	equ	0xFFF
 19291                           tosh	equ	0xFFE
 19292                           tosl	equ	0xFFD
 19293                           pclatu	equ	0xFFB
 19294                           pclath	equ	0xFFA
 19295                           tblptru	equ	0xFF8
 19296                           tblptrh	equ	0xFF7
 19297                           tblptrl	equ	0xFF6
 19298                           tablat	equ	0xFF5
 19299                           prodh	equ	0xFF4
 19300                           prodl	equ	0xFF3
 19301                           intcon	equ	0xFF2
 19302                           indf0	equ	0xFEF
 19303                           postinc0	equ	0xFEE
 19304                           fsr0h	equ	0xFEA
 19305                           fsr0l	equ	0xFE9
 19306                           wreg	equ	0xFE8
 19307                           postdec1	equ	0xFE5
 19308                           fsr1h	equ	0xFE2
 19309                           fsr1l	equ	0xFE1
 19310                           indf2	equ	0xFDF
 19311                           postinc2	equ	0xFDE
 19312                           postdec2	equ	0xFDD
 19313                           fsr2h	equ	0xFDA
 19314                           fsr2l	equ	0xFD9
 19315                           status	equ	0xFD8
 19316                           
 19317 ;; *************** function _timer *****************
 19318 ;; Defined at:
 19319 ;;		line 9 in file "temporizador.h"
 19320 ;; Parameters:    Size  Location     Type
 19321 ;;		None
 19322 ;; Auto vars:     Size  Location     Type
 19323 ;;		None
 19324 ;; Return value:  Size  Location     Type
 19325 ;;                  1    wreg      void 
 19326 ;; Registers used:
 19327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19328 ;; Tracked objects:
 19329 ;;		On entry : 0/0
 19330 ;;		On exit  : 0/0
 19331 ;;		Unchanged: 0/0
 19332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19333 ;;      Params:         0       0       0       0       0       0       0
 19334 ;;      Locals:         8       0       0       0       0       0       0
 19335 ;;      Temps:          0       0       0       0       0       0       0
 19336 ;;      Totals:         8       0       0       0       0       0       0
 19337 ;;Total ram usage:        8 bytes
 19338 ;; Hardware stack levels used:    1
 19339 ;; Hardware stack levels required when called:    4
 19340 ;; This function calls:
 19341 ;;		_writeEEPROM16_ext
 19342 ;;		i2_RTC_Init
 19343 ;;		i2_getDS1307TimeDate
 19344 ;;		i2_writeEEPROM_ext
 19345 ;; This function is called by:
 19346 ;;		_TIMER
 19347 ;; This function uses a non-reentrant model
 19348 ;;
 19349                           
 19350                           	psect	text74
 19351  002B3C                     __ptext74:
 19352                           	opt stack 0
 19353  002B3C                     _timer:
 19354                           	opt stack 0
 19355  002B3C  FFFF               	dw	65535	; assembler added errata NOP
 19356                           
 19357                           ;temporizador.h: 11: timerVerificarSinal = (timerVerificarSinal <= 0 ? 0 : --timerVerifi
      +                          carSinal);
 19358                           
 19359                           ;incstack = 0
 19360  002B3E  0100               	movlb	0	; () banked
 19361  002B40  51FE               	movf	_timerVerificarSinal& (0+255),w,b
 19362  002B42  B4D8               	btfsc	status,2,c
 19363  002B44  D005               	goto	i2l570
 19364                           
 19365                           ; BSR set to: 0
 19366  002B46  07FE               	decf	_timerVerificarSinal& (0+255),f,b
 19367  002B48  C0FE  F009         	movff	_timerVerificarSinal,_timer$1321
 19368  002B4C  6A0A               	clrf	_timer$1321+1,c
 19369  002B4E  D005               	goto	i2l572
 19370  002B50                     i2l570:
 19371  002B50  FFFF               	dw	65535	; assembler added errata NOP
 19372                           
 19373                           ; BSR set to: 0
 19374                           
 19375                           ; BSR set to: 0
 19376  002B52  0E00               	movlw	0
 19377  002B54  6E0A               	movwf	_timer$1321+1,c
 19378  002B56  0E00               	movlw	0
 19379  002B58  6E09               	movwf	_timer$1321,c
 19380  002B5A                     i2l572:
 19381  002B5A  FFFF               	dw	65535	; assembler added errata NOP
 19382                           
 19383                           ; BSR set to: 0
 19384                           
 19385                           ; BSR set to: 0
 19386  002B5C  C009  F0FE         	movff	_timer$1321,_timerVerificarSinal
 19387                           
 19388                           ;temporizador.h: 12: timerEtapaComunicacao = (timerEtapaComunicacao <= 0 ? 0 : --timerEt
      +                          apaComunicacao);
 19389  002B60  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 19390  002B62  B4D8               	btfsc	status,2,c
 19391  002B64  D005               	goto	i2l574
 19392                           
 19393                           ; BSR set to: 0
 19394  002B66  07F5               	decf	_timerEtapaComunicacao& (0+255),f,b
 19395  002B68  C0F5  F00B         	movff	_timerEtapaComunicacao,_timer$1322
 19396  002B6C  6A0C               	clrf	_timer$1322+1,c
 19397  002B6E  D005               	goto	i2l576
 19398  002B70                     i2l574:
 19399  002B70  FFFF               	dw	65535	; assembler added errata NOP
 19400                           
 19401                           ; BSR set to: 0
 19402                           
 19403                           ; BSR set to: 0
 19404  002B72  0E00               	movlw	0
 19405  002B74  6E0C               	movwf	_timer$1322+1,c
 19406  002B76  0E00               	movlw	0
 19407  002B78  6E0B               	movwf	_timer$1322,c
 19408  002B7A                     i2l576:
 19409  002B7A  FFFF               	dw	65535	; assembler added errata NOP
 19410                           
 19411                           ; BSR set to: 0
 19412                           
 19413                           ; BSR set to: 0
 19414  002B7C  C00B  F0F5         	movff	_timer$1322,_timerEtapaComunicacao
 19415                           
 19416                           ; BSR set to: 0
 19417                           ;temporizador.h: 13: timerTesteBombas = (timerTesteBombas <= 0 ? 0 : --timerTesteBombas)
      +                          ;
 19418  002B80  51D9               	movf	_timerTesteBombas& (0+255),w,b
 19419  002B82  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 19420  002B84  B4D8               	btfsc	status,2,c
 19421  002B86  D008               	goto	i2l578
 19422                           
 19423                           ; BSR set to: 0
 19424  002B88  07D9               	decf	_timerTesteBombas& (0+255),f,b
 19425  002B8A  A0D8               	btfss	status,0,c
 19426  002B8C  07DA               	decf	(_timerTesteBombas+1)& (0+255),f,b
 19427  002B8E  C0D9  F0D9         	movff	_timerTesteBombas,_timerTesteBombas
 19428  002B92  C0DA  F0DA         	movff	_timerTesteBombas+1,_timerTesteBombas+1
 19429  002B96  D005               	goto	i2l580
 19430  002B98                     i2l578:
 19431  002B98  FFFF               	dw	65535	; assembler added errata NOP
 19432                           
 19433                           ; BSR set to: 0
 19434                           
 19435                           ; BSR set to: 0
 19436  002B9A  0E00               	movlw	0
 19437  002B9C  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 19438  002B9E  0E00               	movlw	0
 19439  002BA0  6FD9               	movwf	_timerTesteBombas& (0+255),b
 19440  002BA2                     i2l580:
 19441  002BA2  FFFF               	dw	65535	; assembler added errata NOP
 19442                           
 19443                           ; BSR set to: 0
 19444                           ;temporizador.h: 14: timerReenvioSMS = (timerReenvioSMS <= 0 ? 0 : --timerReenvioSMS);
 19445  002BA4  51F6               	movf	_timerReenvioSMS& (0+255),w,b
 19446  002BA6  B4D8               	btfsc	status,2,c
 19447  002BA8  D005               	goto	i2l582
 19448                           
 19449                           ; BSR set to: 0
 19450  002BAA  07F6               	decf	_timerReenvioSMS& (0+255),f,b
 19451  002BAC  C0F6  F00D         	movff	_timerReenvioSMS,_timer$1323
 19452  002BB0  6A0E               	clrf	_timer$1323+1,c
 19453  002BB2  D005               	goto	i2l584
 19454  002BB4                     i2l582:
 19455  002BB4  FFFF               	dw	65535	; assembler added errata NOP
 19456                           
 19457                           ; BSR set to: 0
 19458                           
 19459                           ; BSR set to: 0
 19460  002BB6  0E00               	movlw	0
 19461  002BB8  6E0E               	movwf	_timer$1323+1,c
 19462  002BBA  0E00               	movlw	0
 19463  002BBC  6E0D               	movwf	_timer$1323,c
 19464  002BBE                     i2l584:
 19465  002BBE  FFFF               	dw	65535	; assembler added errata NOP
 19466                           
 19467                           ; BSR set to: 0
 19468                           
 19469                           ; BSR set to: 0
 19470  002BC0  C00D  F0F6         	movff	_timer$1323,_timerReenvioSMS
 19471                           
 19472                           ;temporizador.h: 15: timerTrocarTextoLcd = (timerTrocarTextoLcd <= 0 ? 0 : --timerTrocar
      +                          TextoLcd);
 19473  002BC4  5075               	movf	_timerTrocarTextoLcd,w,c
 19474  002BC6  B4D8               	btfsc	status,2,c
 19475  002BC8  D005               	goto	i2l586
 19476                           
 19477                           ; BSR set to: 0
 19478  002BCA  0675               	decf	_timerTrocarTextoLcd,f,c
 19479  002BCC  C075  F00F         	movff	_timerTrocarTextoLcd,_timer$1324
 19480  002BD0  6A10               	clrf	_timer$1324+1,c
 19481  002BD2  D005               	goto	i2l588
 19482  002BD4                     i2l586:
 19483  002BD4  FFFF               	dw	65535	; assembler added errata NOP
 19484                           
 19485                           ; BSR set to: 0
 19486                           
 19487                           ; BSR set to: 0
 19488  002BD6  0E00               	movlw	0
 19489  002BD8  6E10               	movwf	_timer$1324+1,c
 19490  002BDA  0E00               	movlw	0
 19491  002BDC  6E0F               	movwf	_timer$1324,c
 19492  002BDE                     i2l588:
 19493  002BDE  FFFF               	dw	65535	; assembler added errata NOP
 19494                           
 19495                           ; BSR set to: 0
 19496                           
 19497                           ; BSR set to: 0
 19498  002BE0  C00F  F075         	movff	_timer$1324,_timerTrocarTextoLcd
 19499                           
 19500                           ;temporizador.h: 17: if(!timerTrocarTextoLcd){
 19501  002BE4  5075               	movf	_timerTrocarTextoLcd,w,c
 19502  002BE6  A4D8               	btfss	status,2,c
 19503  002BE8  D00B               	goto	i2l589
 19504                           
 19505                           ; BSR set to: 0
 19506                           ;temporizador.h: 18: timerTrocarTextoLcd = 3;
 19507  002BEA  0E03               	movlw	3
 19508  002BEC  6E75               	movwf	_timerTrocarTextoLcd,c
 19509                           
 19510                           ;temporizador.h: 19: flagTexto = !flagTexto;
 19511  002BEE  5074               	movf	_flagTexto,w,c
 19512  002BF0  A4D8               	btfss	status,2,c
 19513  002BF2  D002               	goto	i2u752_40
 19514  002BF4  0E01               	movlw	1
 19515  002BF6  D002               	goto	i2u753_40
 19516  002BF8                     i2u752_40:
 19517  002BF8  FFFF               	dw	65535	; assembler added errata NOP
 19518  002BFA  0E00               	movlw	0
 19519  002BFC                     i2u753_40:
 19520  002BFC  FFFF               	dw	65535	; assembler added errata NOP
 19521  002BFE  6E74               	movwf	_flagTexto,c
 19522  002C00                     i2l589:
 19523  002C00  FFFF               	dw	65535	; assembler added errata NOP
 19524                           
 19525                           ; BSR set to: 0
 19526                           ;temporizador.h: 20: }
 19527                           ;temporizador.h: 22: if (ajst_rtc) {
 19528  002C02  5068               	movf	_ajst_rtc,w,c
 19529  002C04  A4D8               	btfss	status,2,c
 19530  002C06  D056               	goto	i2l595
 19531                           
 19532                           ; BSR set to: 0
 19533                           ;temporizador.h: 24: }
 19534                           ;temporizador.h: 25: _sec++;
 19535                           
 19536                           ; BSR set to: 0
 19537                           
 19538                           ; BSR set to: 0
 19539                           ;temporizador.h: 23: return;
 19540  002C08  2BEE               	incf	__sec& (0+255),f,b
 19541                           
 19542                           ; BSR set to: 0
 19543                           ;temporizador.h: 26: if (_sec > 59) {
 19544  002C0A  0E3B               	movlw	59
 19545  002C0C  65EE               	cpfsgt	__sec& (0+255),b
 19546  002C0E  D014               	goto	i2l594
 19547                           
 19548                           ; BSR set to: 0
 19549                           ;temporizador.h: 27: _sec = 0;
 19550  002C10  0E00               	movlw	0
 19551  002C12  6FEE               	movwf	__sec& (0+255),b
 19552                           
 19553                           ; BSR set to: 0
 19554                           ;temporizador.h: 28: _min++;
 19555  002C14  2BED               	incf	__min& (0+255),f,b
 19556                           
 19557                           ; BSR set to: 0
 19558                           ;temporizador.h: 29: if (_min > 59) {
 19559  002C16  0E3B               	movlw	59
 19560  002C18  65ED               	cpfsgt	__min& (0+255),b
 19561  002C1A  D00E               	goto	i2l594
 19562                           
 19563                           ; BSR set to: 0
 19564                           ;temporizador.h: 30: _min = 0;
 19565  002C1C  0E00               	movlw	0
 19566  002C1E  6FED               	movwf	__min& (0+255),b
 19567                           
 19568                           ; BSR set to: 0
 19569                           ;temporizador.h: 31: _hor++;
 19570  002C20  2BEC               	incf	__hor& (0+255),f,b
 19571                           
 19572                           ; BSR set to: 0
 19573                           ;temporizador.h: 32: if (_hor > 23) {
 19574  002C22  0E17               	movlw	23
 19575  002C24  65EC               	cpfsgt	__hor& (0+255),b
 19576  002C26  D008               	goto	i2l594
 19577                           
 19578                           ; BSR set to: 0
 19579                           ;temporizador.h: 33: _hor = 0;
 19580  002C28  0E00               	movlw	0
 19581  002C2A  6FEC               	movwf	__hor& (0+255),b
 19582                           
 19583                           ; BSR set to: 0
 19584                           ;temporizador.h: 34: dias_restante_teste++;
 19585  002C2C  2BE7               	incf	_dias_restante_teste& (0+255),f,b
 19586                           
 19587                           ; BSR set to: 0
 19588                           ;temporizador.h: 35: writeEEPROM_ext(10, dias_restante_teste);
 19589  002C2E  C0E7  F004         	movff	_dias_restante_teste,i2writeEEPROM_ext@data
 19590  002C32  0E0A               	movlw	10
 19591  002C34  EC88  F038         	call	i2_writeEEPROM_ext
 19592  002C38                     i2l594:
 19593  002C38  FFFF               	dw	65535	; assembler added errata NOP
 19594                           
 19595                           ;temporizador.h: 36: }
 19596                           ;temporizador.h: 37: }
 19597                           ;temporizador.h: 38: }
 19598                           ;temporizador.h: 40: if (rtc.min != _min) {
 19599  002C3A  0100               	movlb	0	; () banked
 19600  002C3C  51ED               	movf	__min& (0+255),w,b
 19601  002C3E  1878               	xorwf	_rtc+2,w,c
 19602  002C40  B4D8               	btfsc	status,2,c
 19603  002C42  D038               	goto	i2l595
 19604                           
 19605                           ; BSR set to: 0
 19606                           ;temporizador.h: 42: if (flagEstacionariaLigada) {
 19607  002C44  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 19608  002C46  B4D8               	btfsc	status,2,c
 19609  002C48  D009               	goto	i2l596
 19610                           
 19611                           ; BSR set to: 0
 19612                           ;temporizador.h: 43: horimetro++;
 19613  002C4A  4A4F               	infsnz	_horimetro,f,c
 19614  002C4C  2A50               	incf	_horimetro+1,f,c
 19615                           
 19616                           ; BSR set to: 0
 19617                           ;temporizador.h: 44: writeEEPROM16_ext(8, horimetro);
 19618  002C4E  C04F  F006         	movff	_horimetro,writeEEPROM16_ext@data
 19619  002C52  C050  F007         	movff	_horimetro+1,writeEEPROM16_ext@data+1
 19620  002C56  0E08               	movlw	8
 19621  002C58  ECD1  F036         	call	_writeEEPROM16_ext
 19622  002C5C                     i2l596:
 19623  002C5C  FFFF               	dw	65535	; assembler added errata NOP
 19624                           
 19625                           ;temporizador.h: 45: }
 19626                           ;temporizador.h: 46: getDS1307TimeDate(&rtc);
 19627  002C5E  0E76               	movlw	low _rtc
 19628  002C60  6E06               	movwf	i2getDS1307TimeDate@ptrToUserVal,c
 19629  002C62  0E00               	movlw	high _rtc
 19630  002C64  6E07               	movwf	i2getDS1307TimeDate@ptrToUserVal+1,c
 19631  002C66  ECE9  F019         	call	i2_getDS1307TimeDate	;wreg free
 19632                           
 19633                           ;temporizador.h: 47: if ((rtc.sec > 60) && (rtc.min > 60) && (rtc.hour > 24)) {
 19634  002C6A  0E3C               	movlw	60
 19635  002C6C  6477               	cpfsgt	_rtc+1,c
 19636  002C6E  D015               	goto	i2l597
 19637  002C70  0E3C               	movlw	60
 19638  002C72  6478               	cpfsgt	_rtc+2,c
 19639  002C74  D012               	goto	i2l597
 19640  002C76  0E18               	movlw	24
 19641  002C78  6479               	cpfsgt	_rtc+3,c
 19642  002C7A  D00F               	goto	i2l597
 19643                           
 19644                           ;temporizador.h: 49: RTC_Init();
 19645  002C7C  EC77  F037         	call	i2_RTC_Init	;wreg free
 19646                           
 19647                           ;temporizador.h: 50: rtc.sec = _sec;
 19648  002C80  C0EE  F077         	movff	__sec,_rtc+1
 19649                           
 19650                           ;temporizador.h: 51: rtc.min = _min;
 19651  002C84  C0ED  F078         	movff	__min,_rtc+2
 19652                           
 19653                           ;temporizador.h: 52: rtc.hour = _hor;
 19654  002C88  C0EC  F079         	movff	__hor,_rtc+3
 19655                           
 19656                           ;temporizador.h: 53: rtc.date = _dia;
 19657  002C8C  C0EB  F07A         	movff	__dia,_rtc+4
 19658                           
 19659                           ;temporizador.h: 54: rtc.month = _mes;
 19660  002C90  C0EA  F07B         	movff	__mes,_rtc+5
 19661                           
 19662                           ;temporizador.h: 55: rtc.year = _ano;
 19663  002C94  C0E9  F07C         	movff	__ano,_rtc+6
 19664                           
 19665                           ;temporizador.h: 56: return;
 19666  002C98  D00D               	goto	i2l595
 19667  002C9A                     i2l597:
 19668  002C9A  FFFF               	dw	65535	; assembler added errata NOP
 19669                           
 19670                           ;temporizador.h: 57: }
 19671                           ;temporizador.h: 58: _sec = rtc.sec;
 19672  002C9C  C077  F0EE         	movff	_rtc+1,__sec
 19673                           
 19674                           ;temporizador.h: 59: _min = rtc.min;
 19675  002CA0  C078  F0ED         	movff	_rtc+2,__min
 19676                           
 19677                           ;temporizador.h: 60: _hor = rtc.hour;
 19678  002CA4  C079  F0EC         	movff	_rtc+3,__hor
 19679                           
 19680                           ;temporizador.h: 61: _dia = rtc.date;
 19681  002CA8  C07A  F0EB         	movff	_rtc+4,__dia
 19682                           
 19683                           ;temporizador.h: 62: _mes = rtc.month;
 19684  002CAC  C07B  F0EA         	movff	_rtc+5,__mes
 19685                           
 19686                           ;temporizador.h: 63: _ano = rtc.year;
 19687  002CB0  C07C  F0E9         	movff	_rtc+6,__ano
 19688  002CB4                     i2l595:
 19689  002CB4  FFFF               	dw	65535	; assembler added errata NOP
 19690  002CB6  0012               	return		;funcret
 19691  002CB8  FFFF               	dw	65535	; errata NOP
 19692  002CBA                     __end_of_timer:
 19693                           	opt stack 0
 19694                           tosu	equ	0xFFF
 19695                           tosh	equ	0xFFE
 19696                           tosl	equ	0xFFD
 19697                           pclatu	equ	0xFFB
 19698                           pclath	equ	0xFFA
 19699                           tblptru	equ	0xFF8
 19700                           tblptrh	equ	0xFF7
 19701                           tblptrl	equ	0xFF6
 19702                           tablat	equ	0xFF5
 19703                           prodh	equ	0xFF4
 19704                           prodl	equ	0xFF3
 19705                           intcon	equ	0xFF2
 19706                           indf0	equ	0xFEF
 19707                           postinc0	equ	0xFEE
 19708                           fsr0h	equ	0xFEA
 19709                           fsr0l	equ	0xFE9
 19710                           wreg	equ	0xFE8
 19711                           postdec1	equ	0xFE5
 19712                           fsr1h	equ	0xFE2
 19713                           fsr1l	equ	0xFE1
 19714                           indf2	equ	0xFDF
 19715                           postinc2	equ	0xFDE
 19716                           postdec2	equ	0xFDD
 19717                           fsr2h	equ	0xFDA
 19718                           fsr2l	equ	0xFD9
 19719                           status	equ	0xFD8
 19720                           
 19721 ;; *************** function i2_getDS1307TimeDate *****************
 19722 ;; Defined at:
 19723 ;;		line 52 in file "ds1307.h"
 19724 ;; Parameters:    Size  Location     Type
 19725 ;;  ptrToUserVal    2    5[COMRAM] PTR struct .
 19726 ;;		 -> rtc(7), 
 19727 ;; Auto vars:     Size  Location     Type
 19728 ;;		None
 19729 ;; Return value:  Size  Location     Type
 19730 ;;                  1    wreg      void 
 19731 ;; Registers used:
 19732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19733 ;; Tracked objects:
 19734 ;;		On entry : 0/0
 19735 ;;		On exit  : 0/0
 19736 ;;		Unchanged: 0/0
 19737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19738 ;;      Params:         2       0       0       0       0       0       0
 19739 ;;      Locals:         0       0       0       0       0       0       0
 19740 ;;      Temps:          0       0       0       0       0       0       0
 19741 ;;      Totals:         2       0       0       0       0       0       0
 19742 ;;Total ram usage:        2 bytes
 19743 ;; Hardware stack levels used:    1
 19744 ;; Hardware stack levels required when called:    2
 19745 ;; This function calls:
 19746 ;;		i2_BCDtoDEC
 19747 ;;		i2_I2C_Read
 19748 ;;		i2_I2C_Restart
 19749 ;;		i2_I2C_Start
 19750 ;;		i2_I2C_Stop
 19751 ;;		i2_I2C_Write
 19752 ;; This function is called by:
 19753 ;;		_timer
 19754 ;; This function uses a non-reentrant model
 19755 ;;
 19756                           
 19757                           	psect	text75
 19758  0033D2                     __ptext75:
 19759                           	opt stack 0
 19760  0033D2                     i2_getDS1307TimeDate:
 19761                           	opt stack 0
 19762  0033D2  FFFF               	dw	65535	; assembler added errata NOP
 19763                           
 19764                           ;ds1307.h: 54: I2C_Start();
 19765                           
 19766                           ;incstack = 0
 19767  0033D4  EC54  F036         	call	i2_I2C_Start	;wreg free
 19768                           
 19769                           ;ds1307.h: 55: I2C_Write(0xD0);
 19770  0033D8  0E00               	movlw	0
 19771  0033DA  6E03               	movwf	i2I2C_Write@d+1,c
 19772  0033DC  0ED0               	movlw	208
 19773  0033DE  6E02               	movwf	i2I2C_Write@d,c
 19774  0033E0  EC78  F036         	call	i2_I2C_Write	;wreg free
 19775                           
 19776                           ;ds1307.h: 56: I2C_Write(0x00);
 19777  0033E4  0E00               	movlw	0
 19778  0033E6  6E03               	movwf	i2I2C_Write@d+1,c
 19779  0033E8  0E00               	movlw	0
 19780  0033EA  6E02               	movwf	i2I2C_Write@d,c
 19781  0033EC  EC78  F036         	call	i2_I2C_Write	;wreg free
 19782                           
 19783                           ;ds1307.h: 57: I2C_Restart();
 19784  0033F0  EC60  F036         	call	i2_I2C_Restart	;wreg free
 19785                           
 19786                           ;ds1307.h: 58: I2C_Write(0xD1);
 19787  0033F4  0E00               	movlw	0
 19788  0033F6  6E03               	movwf	i2I2C_Write@d+1,c
 19789  0033F8  0ED1               	movlw	209
 19790  0033FA  6E02               	movwf	i2I2C_Write@d,c
 19791  0033FC  EC78  F036         	call	i2_I2C_Write	;wreg free
 19792                           
 19793                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
 19794  003400  EE20 F001          	lfsr	2,1
 19795  003404  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19796  003406  26D9               	addwf	fsr2l,f,c
 19797  003408  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19798  00340A  22DA               	addwfc	fsr2h,f,c
 19799  00340C  0E00               	movlw	0
 19800  00340E  6E03               	movwf	i2I2C_Read@a+1,c
 19801  003410  0E01               	movlw	1
 19802  003412  6E02               	movwf	i2I2C_Read@a,c
 19803  003414  ECAA  F037         	call	i2_I2C_Read	;wreg free
 19804  003418  5002               	movf	?i2_I2C_Read,w,c
 19805  00341A  ECA0  F036         	call	i2_BCDtoDEC
 19806  00341E  6EDF               	movwf	indf2,c
 19807                           
 19808                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
 19809  003420  EE20 F002          	lfsr	2,2
 19810  003424  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19811  003426  26D9               	addwf	fsr2l,f,c
 19812  003428  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19813  00342A  22DA               	addwfc	fsr2h,f,c
 19814  00342C  0E00               	movlw	0
 19815  00342E  6E03               	movwf	i2I2C_Read@a+1,c
 19816  003430  0E01               	movlw	1
 19817  003432  6E02               	movwf	i2I2C_Read@a,c
 19818  003434  ECAA  F037         	call	i2_I2C_Read	;wreg free
 19819  003438  5002               	movf	?i2_I2C_Read,w,c
 19820  00343A  ECA0  F036         	call	i2_BCDtoDEC
 19821  00343E  6EDF               	movwf	indf2,c
 19822                           
 19823                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
 19824  003440  EE20 F003          	lfsr	2,3
 19825  003444  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19826  003446  26D9               	addwf	fsr2l,f,c
 19827  003448  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19828  00344A  22DA               	addwfc	fsr2h,f,c
 19829  00344C  0E00               	movlw	0
 19830  00344E  6E03               	movwf	i2I2C_Read@a+1,c
 19831  003450  0E01               	movlw	1
 19832  003452  6E02               	movwf	i2I2C_Read@a,c
 19833  003454  ECAA  F037         	call	i2_I2C_Read	;wreg free
 19834  003458  5002               	movf	?i2_I2C_Read,w,c
 19835  00345A  ECA0  F036         	call	i2_BCDtoDEC
 19836  00345E  6EDF               	movwf	indf2,c
 19837                           
 19838                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
 19839  003460  0E00               	movlw	0
 19840  003462  6E03               	movwf	i2I2C_Read@a+1,c
 19841  003464  0E01               	movlw	1
 19842  003466  6E02               	movwf	i2I2C_Read@a,c
 19843  003468  ECAA  F037         	call	i2_I2C_Read	;wreg free
 19844  00346C  5002               	movf	?i2_I2C_Read,w,c
 19845  00346E  ECA0  F036         	call	i2_BCDtoDEC
 19846  003472  C006  FFD9         	movff	i2getDS1307TimeDate@ptrToUserVal,fsr2l
 19847  003476  C007  FFDA         	movff	i2getDS1307TimeDate@ptrToUserVal+1,fsr2h
 19848  00347A  6EDF               	movwf	indf2,c
 19849                           
 19850                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
 19851  00347C  EE20 F004          	lfsr	2,4
 19852  003480  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19853  003482  26D9               	addwf	fsr2l,f,c
 19854  003484  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19855  003486  22DA               	addwfc	fsr2h,f,c
 19856  003488  0E00               	movlw	0
 19857  00348A  6E03               	movwf	i2I2C_Read@a+1,c
 19858  00348C  0E01               	movlw	1
 19859  00348E  6E02               	movwf	i2I2C_Read@a,c
 19860  003490  ECAA  F037         	call	i2_I2C_Read	;wreg free
 19861  003494  5002               	movf	?i2_I2C_Read,w,c
 19862  003496  ECA0  F036         	call	i2_BCDtoDEC
 19863  00349A  6EDF               	movwf	indf2,c
 19864                           
 19865                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
 19866  00349C  EE20 F005          	lfsr	2,5
 19867  0034A0  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19868  0034A2  26D9               	addwf	fsr2l,f,c
 19869  0034A4  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19870  0034A6  22DA               	addwfc	fsr2h,f,c
 19871  0034A8  0E00               	movlw	0
 19872  0034AA  6E03               	movwf	i2I2C_Read@a+1,c
 19873  0034AC  0E01               	movlw	1
 19874  0034AE  6E02               	movwf	i2I2C_Read@a,c
 19875  0034B0  ECAA  F037         	call	i2_I2C_Read	;wreg free
 19876  0034B4  5002               	movf	?i2_I2C_Read,w,c
 19877  0034B6  ECA0  F036         	call	i2_BCDtoDEC
 19878  0034BA  6EDF               	movwf	indf2,c
 19879                           
 19880                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
 19881  0034BC  EE20 F006          	lfsr	2,6
 19882  0034C0  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19883  0034C2  26D9               	addwf	fsr2l,f,c
 19884  0034C4  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19885  0034C6  22DA               	addwfc	fsr2h,f,c
 19886  0034C8  0E00               	movlw	0
 19887  0034CA  6E03               	movwf	i2I2C_Read@a+1,c
 19888  0034CC  0E00               	movlw	0
 19889  0034CE  6E02               	movwf	i2I2C_Read@a,c
 19890  0034D0  ECAA  F037         	call	i2_I2C_Read	;wreg free
 19891  0034D4  5002               	movf	?i2_I2C_Read,w,c
 19892  0034D6  ECA0  F036         	call	i2_BCDtoDEC
 19893  0034DA  6EDF               	movwf	indf2,c
 19894                           
 19895                           ;ds1307.h: 66: I2C_Stop();
 19896  0034DC  EC5A  F036         	call	i2_I2C_Stop	;wreg free
 19897  0034E0  0012               	return		;funcret
 19898  0034E2  FFFF               	dw	65535	; errata NOP
 19899  0034E4                     __end_ofi2_getDS1307TimeDate:
 19900                           	opt stack 0
 19901                           tosu	equ	0xFFF
 19902                           tosh	equ	0xFFE
 19903                           tosl	equ	0xFFD
 19904                           pclatu	equ	0xFFB
 19905                           pclath	equ	0xFFA
 19906                           tblptru	equ	0xFF8
 19907                           tblptrh	equ	0xFF7
 19908                           tblptrl	equ	0xFF6
 19909                           tablat	equ	0xFF5
 19910                           prodh	equ	0xFF4
 19911                           prodl	equ	0xFF3
 19912                           intcon	equ	0xFF2
 19913                           indf0	equ	0xFEF
 19914                           postinc0	equ	0xFEE
 19915                           fsr0h	equ	0xFEA
 19916                           fsr0l	equ	0xFE9
 19917                           wreg	equ	0xFE8
 19918                           postdec1	equ	0xFE5
 19919                           fsr1h	equ	0xFE2
 19920                           fsr1l	equ	0xFE1
 19921                           indf2	equ	0xFDF
 19922                           postinc2	equ	0xFDE
 19923                           postdec2	equ	0xFDD
 19924                           fsr2h	equ	0xFDA
 19925                           fsr2l	equ	0xFD9
 19926                           status	equ	0xFD8
 19927                           
 19928 ;; *************** function i2_I2C_Restart *****************
 19929 ;; Defined at:
 19930 ;;		line 31 in file "I2C.c"
 19931 ;; Parameters:    Size  Location     Type
 19932 ;;		None
 19933 ;; Auto vars:     Size  Location     Type
 19934 ;;		None
 19935 ;; Return value:  Size  Location     Type
 19936 ;;                  1    wreg      void 
 19937 ;; Registers used:
 19938 ;;		wreg, status,2, status,0, cstack
 19939 ;; Tracked objects:
 19940 ;;		On entry : 0/0
 19941 ;;		On exit  : 0/0
 19942 ;;		Unchanged: 0/0
 19943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19944 ;;      Params:         0       0       0       0       0       0       0
 19945 ;;      Locals:         0       0       0       0       0       0       0
 19946 ;;      Temps:          0       0       0       0       0       0       0
 19947 ;;      Totals:         0       0       0       0       0       0       0
 19948 ;;Total ram usage:        0 bytes
 19949 ;; Hardware stack levels used:    1
 19950 ;; Hardware stack levels required when called:    1
 19951 ;; This function calls:
 19952 ;;		i2_I2C_Wait
 19953 ;; This function is called by:
 19954 ;;		i2_getDS1307TimeDate
 19955 ;; This function uses a non-reentrant model
 19956 ;;
 19957                           
 19958                           	psect	text76
 19959  006CC0                     __ptext76:
 19960                           	opt stack 0
 19961  006CC0                     i2_I2C_Restart:
 19962                           	opt stack 0
 19963  006CC0  FFFF               	dw	65535	; assembler added errata NOP
 19964                           
 19965                           ;I2C.c: 32: I2C_Wait();
 19966                           
 19967                           ;incstack = 0
 19968  006CC2  ECAB  F036         	call	i2_I2C_Wait	;wreg free
 19969                           
 19970                           ;I2C.c: 33: RSEN = 1;
 19971  006CC6  82C5               	bsf	4037,1,c	;volatile
 19972  006CC8  0012               	return		;funcret
 19973  006CCA  FFFF               	dw	65535	; errata NOP
 19974  006CCC                     __end_ofi2_I2C_Restart:
 19975                           	opt stack 0
 19976                           tosu	equ	0xFFF
 19977                           tosh	equ	0xFFE
 19978                           tosl	equ	0xFFD
 19979                           pclatu	equ	0xFFB
 19980                           pclath	equ	0xFFA
 19981                           tblptru	equ	0xFF8
 19982                           tblptrh	equ	0xFF7
 19983                           tblptrl	equ	0xFF6
 19984                           tablat	equ	0xFF5
 19985                           prodh	equ	0xFF4
 19986                           prodl	equ	0xFF3
 19987                           intcon	equ	0xFF2
 19988                           indf0	equ	0xFEF
 19989                           postinc0	equ	0xFEE
 19990                           fsr0h	equ	0xFEA
 19991                           fsr0l	equ	0xFE9
 19992                           wreg	equ	0xFE8
 19993                           postdec1	equ	0xFE5
 19994                           fsr1h	equ	0xFE2
 19995                           fsr1l	equ	0xFE1
 19996                           indf2	equ	0xFDF
 19997                           postinc2	equ	0xFDE
 19998                           postdec2	equ	0xFDD
 19999                           fsr2h	equ	0xFDA
 20000                           fsr2l	equ	0xFD9
 20001                           status	equ	0xFD8
 20002                           
 20003 ;; *************** function i2_I2C_Read *****************
 20004 ;; Defined at:
 20005 ;;		line 47 in file "I2C.c"
 20006 ;; Parameters:    Size  Location     Type
 20007 ;;  a               2    1[COMRAM] unsigned short 
 20008 ;; Auto vars:     Size  Location     Type
 20009 ;;  I2C_Read        2    3[COMRAM] unsigned short 
 20010 ;; Return value:  Size  Location     Type
 20011 ;;                  2    1[COMRAM] unsigned short 
 20012 ;; Registers used:
 20013 ;;		wreg, status,2, status,0, cstack
 20014 ;; Tracked objects:
 20015 ;;		On entry : 0/0
 20016 ;;		On exit  : 0/0
 20017 ;;		Unchanged: 0/0
 20018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20019 ;;      Params:         2       0       0       0       0       0       0
 20020 ;;      Locals:         2       0       0       0       0       0       0
 20021 ;;      Temps:          0       0       0       0       0       0       0
 20022 ;;      Totals:         4       0       0       0       0       0       0
 20023 ;;Total ram usage:        4 bytes
 20024 ;; Hardware stack levels used:    1
 20025 ;; Hardware stack levels required when called:    1
 20026 ;; This function calls:
 20027 ;;		i2_I2C_Wait
 20028 ;; This function is called by:
 20029 ;;		i2_getDS1307TimeDate
 20030 ;; This function uses a non-reentrant model
 20031 ;;
 20032                           
 20033                           	psect	text77
 20034  006F54                     __ptext77:
 20035                           	opt stack 0
 20036  006F54                     i2_I2C_Read:
 20037                           	opt stack 0
 20038  006F54  FFFF               	dw	65535	; assembler added errata NOP
 20039                           
 20040                           ;I2C.c: 48: unsigned short temp;
 20041                           ;I2C.c: 49: I2C_Wait();
 20042                           
 20043                           ;incstack = 0
 20044  006F56  ECAB  F036         	call	i2_I2C_Wait	;wreg free
 20045                           
 20046                           ;I2C.c: 50: RCEN = 1;
 20047  006F5A  86C5               	bsf	4037,3,c	;volatile
 20048                           
 20049                           ;I2C.c: 51: I2C_Wait();
 20050  006F5C  ECAB  F036         	call	i2_I2C_Wait	;wreg free
 20051                           
 20052                           ;I2C.c: 52: temp = SSPBUF;
 20053  006F60  CFC9 F004          	movff	4041,i2I2C_Read@temp	;volatile
 20054  006F64  6A05               	clrf	i2I2C_Read@temp+1,c
 20055                           
 20056                           ;I2C.c: 53: I2C_Wait();
 20057  006F66  ECAB  F036         	call	i2_I2C_Wait	;wreg free
 20058                           
 20059                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 20060  006F6A  5002               	movf	i2I2C_Read@a,w,c
 20061  006F6C  1003               	iorwf	i2I2C_Read@a+1,w,c
 20062  006F6E  A4D8               	btfss	status,2,c
 20063  006F70  D002               	goto	i2u556_40
 20064  006F72  8AC5               	bsf	4037,5,c	;volatile
 20065  006F74  D002               	goto	i2u557_45
 20066  006F76                     i2u556_40:
 20067  006F76  FFFF               	dw	65535	; assembler added errata NOP
 20068  006F78  9AC5               	bcf	4037,5,c	;volatile
 20069  006F7A                     i2u557_45:
 20070  006F7A  FFFF               	dw	65535	; assembler added errata NOP
 20071                           
 20072                           ;I2C.c: 55: ACKEN = 1;
 20073  006F7C  88C5               	bsf	4037,4,c	;volatile
 20074                           
 20075                           ;I2C.c: 56: return temp;
 20076  006F7E  C004  F002         	movff	i2I2C_Read@temp,?i2_I2C_Read
 20077  006F82  C005  F003         	movff	i2I2C_Read@temp+1,?i2_I2C_Read+1
 20078  006F86  0012               	return		;funcret
 20079  006F88  FFFF               	dw	65535	; errata NOP
 20080  006F8A                     __end_ofi2_I2C_Read:
 20081                           	opt stack 0
 20082                           tosu	equ	0xFFF
 20083                           tosh	equ	0xFFE
 20084                           tosl	equ	0xFFD
 20085                           pclatu	equ	0xFFB
 20086                           pclath	equ	0xFFA
 20087                           tblptru	equ	0xFF8
 20088                           tblptrh	equ	0xFF7
 20089                           tblptrl	equ	0xFF6
 20090                           tablat	equ	0xFF5
 20091                           prodh	equ	0xFF4
 20092                           prodl	equ	0xFF3
 20093                           intcon	equ	0xFF2
 20094                           indf0	equ	0xFEF
 20095                           postinc0	equ	0xFEE
 20096                           fsr0h	equ	0xFEA
 20097                           fsr0l	equ	0xFE9
 20098                           wreg	equ	0xFE8
 20099                           postdec1	equ	0xFE5
 20100                           fsr1h	equ	0xFE2
 20101                           fsr1l	equ	0xFE1
 20102                           indf2	equ	0xFDF
 20103                           postinc2	equ	0xFDE
 20104                           postdec2	equ	0xFDD
 20105                           fsr2h	equ	0xFDA
 20106                           fsr2l	equ	0xFD9
 20107                           status	equ	0xFD8
 20108                           
 20109 ;; *************** function i2_BCDtoDEC *****************
 20110 ;; Defined at:
 20111 ;;		line 34 in file "function.c"
 20112 ;; Parameters:    Size  Location     Type
 20113 ;;  val             1    wreg     unsigned char 
 20114 ;; Auto vars:     Size  Location     Type
 20115 ;;  val             1    0[COMRAM] unsigned char 
 20116 ;; Return value:  Size  Location     Type
 20117 ;;                  1    wreg      unsigned char 
 20118 ;; Registers used:
 20119 ;;		wreg, status,2, status,0, prodl, prodh
 20120 ;; Tracked objects:
 20121 ;;		On entry : 0/0
 20122 ;;		On exit  : 0/0
 20123 ;;		Unchanged: 0/0
 20124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20125 ;;      Params:         0       0       0       0       0       0       0
 20126 ;;      Locals:         1       0       0       0       0       0       0
 20127 ;;      Temps:          0       0       0       0       0       0       0
 20128 ;;      Totals:         1       0       0       0       0       0       0
 20129 ;;Total ram usage:        1 bytes
 20130 ;; Hardware stack levels used:    1
 20131 ;; This function calls:
 20132 ;;		Nothing
 20133 ;; This function is called by:
 20134 ;;		i2_getDS1307TimeDate
 20135 ;; This function uses a non-reentrant model
 20136 ;;
 20137                           
 20138                           	psect	text78
 20139  006D40                     __ptext78:
 20140                           	opt stack 0
 20141  006D40                     i2_BCDtoDEC:
 20142                           	opt stack 0
 20143  006D40  FFFF               	dw	65535	; assembler added errata NOP
 20144                           
 20145                           ;incstack = 0
 20146                           ;i2BCDtoDEC@val stored from wreg
 20147  006D42  6E01               	movwf	i2BCDtoDEC@val,c
 20148                           
 20149                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
 20150  006D44  3801               	swapf	i2BCDtoDEC@val,w,c
 20151  006D46  0B0F               	andlw	15
 20152  006D48  0B0F               	andlw	15
 20153  006D4A  0D0A               	mullw	10
 20154  006D4C  5001               	movf	i2BCDtoDEC@val,w,c
 20155  006D4E  0B0F               	andlw	15
 20156  006D50  24F3               	addwf	prodl,w,c
 20157  006D52  0012               	return		;funcret
 20158  006D54  FFFF               	dw	65535	; errata NOP
 20159  006D56                     __end_ofi2_BCDtoDEC:
 20160                           	opt stack 0
 20161                           tosu	equ	0xFFF
 20162                           tosh	equ	0xFFE
 20163                           tosl	equ	0xFFD
 20164                           pclatu	equ	0xFFB
 20165                           pclath	equ	0xFFA
 20166                           tblptru	equ	0xFF8
 20167                           tblptrh	equ	0xFF7
 20168                           tblptrl	equ	0xFF6
 20169                           tablat	equ	0xFF5
 20170                           prodh	equ	0xFF4
 20171                           prodl	equ	0xFF3
 20172                           intcon	equ	0xFF2
 20173                           indf0	equ	0xFEF
 20174                           postinc0	equ	0xFEE
 20175                           fsr0h	equ	0xFEA
 20176                           fsr0l	equ	0xFE9
 20177                           wreg	equ	0xFE8
 20178                           postdec1	equ	0xFE5
 20179                           fsr1h	equ	0xFE2
 20180                           fsr1l	equ	0xFE1
 20181                           indf2	equ	0xFDF
 20182                           postinc2	equ	0xFDE
 20183                           postdec2	equ	0xFDD
 20184                           fsr2h	equ	0xFDA
 20185                           fsr2l	equ	0xFD9
 20186                           status	equ	0xFD8
 20187                           
 20188 ;; *************** function i2_RTC_Init *****************
 20189 ;; Defined at:
 20190 ;;		line 98 in file "ds1307.h"
 20191 ;; Parameters:    Size  Location     Type
 20192 ;;		None
 20193 ;; Auto vars:     Size  Location     Type
 20194 ;;		None
 20195 ;; Return value:  Size  Location     Type
 20196 ;;                  1    wreg      void 
 20197 ;; Registers used:
 20198 ;;		wreg, status,2, status,0, cstack
 20199 ;; Tracked objects:
 20200 ;;		On entry : 0/0
 20201 ;;		On exit  : 0/0
 20202 ;;		Unchanged: 0/0
 20203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20204 ;;      Params:         0       0       0       0       0       0       0
 20205 ;;      Locals:         0       0       0       0       0       0       0
 20206 ;;      Temps:          0       0       0       0       0       0       0
 20207 ;;      Totals:         0       0       0       0       0       0       0
 20208 ;;Total ram usage:        0 bytes
 20209 ;; Hardware stack levels used:    1
 20210 ;; Hardware stack levels required when called:    2
 20211 ;; This function calls:
 20212 ;;		i2_I2C_Start
 20213 ;;		i2_I2C_Stop
 20214 ;;		i2_I2C_Write
 20215 ;; This function is called by:
 20216 ;;		_timer
 20217 ;; This function uses a non-reentrant model
 20218 ;;
 20219                           
 20220                           	psect	text79
 20221  006EEE                     __ptext79:
 20222                           	opt stack 0
 20223  006EEE                     i2_RTC_Init:
 20224                           	opt stack 0
 20225  006EEE  FFFF               	dw	65535	; assembler added errata NOP
 20226                           
 20227                           ;ds1307.h: 100: I2C_Start();
 20228                           
 20229                           ;incstack = 0
 20230  006EF0  EC54  F036         	call	i2_I2C_Start	;wreg free
 20231                           
 20232                           ;ds1307.h: 101: I2C_Write(0xD0);
 20233  006EF4  0E00               	movlw	0
 20234  006EF6  6E03               	movwf	i2I2C_Write@d+1,c
 20235  006EF8  0ED0               	movlw	208
 20236  006EFA  6E02               	movwf	i2I2C_Write@d,c
 20237  006EFC  EC78  F036         	call	i2_I2C_Write	;wreg free
 20238                           
 20239                           ;ds1307.h: 102: I2C_Write(0x07);
 20240  006F00  0E00               	movlw	0
 20241  006F02  6E03               	movwf	i2I2C_Write@d+1,c
 20242  006F04  0E07               	movlw	7
 20243  006F06  6E02               	movwf	i2I2C_Write@d,c
 20244  006F08  EC78  F036         	call	i2_I2C_Write	;wreg free
 20245                           
 20246                           ;ds1307.h: 103: I2C_Write(0x00);
 20247  006F0C  0E00               	movlw	0
 20248  006F0E  6E03               	movwf	i2I2C_Write@d+1,c
 20249  006F10  0E00               	movlw	0
 20250  006F12  6E02               	movwf	i2I2C_Write@d,c
 20251  006F14  EC78  F036         	call	i2_I2C_Write	;wreg free
 20252                           
 20253                           ;ds1307.h: 104: I2C_Stop();
 20254  006F18  EC5A  F036         	call	i2_I2C_Stop	;wreg free
 20255  006F1C  0012               	return		;funcret
 20256  006F1E  FFFF               	dw	65535	; errata NOP
 20257  006F20                     __end_ofi2_RTC_Init:
 20258                           	opt stack 0
 20259                           tosu	equ	0xFFF
 20260                           tosh	equ	0xFFE
 20261                           tosl	equ	0xFFD
 20262                           pclatu	equ	0xFFB
 20263                           pclath	equ	0xFFA
 20264                           tblptru	equ	0xFF8
 20265                           tblptrh	equ	0xFF7
 20266                           tblptrl	equ	0xFF6
 20267                           tablat	equ	0xFF5
 20268                           prodh	equ	0xFF4
 20269                           prodl	equ	0xFF3
 20270                           intcon	equ	0xFF2
 20271                           indf0	equ	0xFEF
 20272                           postinc0	equ	0xFEE
 20273                           fsr0h	equ	0xFEA
 20274                           fsr0l	equ	0xFE9
 20275                           wreg	equ	0xFE8
 20276                           postdec1	equ	0xFE5
 20277                           fsr1h	equ	0xFE2
 20278                           fsr1l	equ	0xFE1
 20279                           indf2	equ	0xFDF
 20280                           postinc2	equ	0xFDE
 20281                           postdec2	equ	0xFDD
 20282                           fsr2h	equ	0xFDA
 20283                           fsr2l	equ	0xFD9
 20284                           status	equ	0xFD8
 20285                           
 20286 ;; *************** function _writeEEPROM16_ext *****************
 20287 ;; Defined at:
 20288 ;;		line 40 in file "eeprom.h"
 20289 ;; Parameters:    Size  Location     Type
 20290 ;;  adress          1    wreg     unsigned char 
 20291 ;;  data            2    5[COMRAM] unsigned int 
 20292 ;; Auto vars:     Size  Location     Type
 20293 ;;  adress          1    7[COMRAM] unsigned char 
 20294 ;; Return value:  Size  Location     Type
 20295 ;;                  1    wreg      void 
 20296 ;; Registers used:
 20297 ;;		wreg, status,2, status,0, cstack
 20298 ;; Tracked objects:
 20299 ;;		On entry : 0/0
 20300 ;;		On exit  : 0/0
 20301 ;;		Unchanged: 0/0
 20302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20303 ;;      Params:         2       0       0       0       0       0       0
 20304 ;;      Locals:         1       0       0       0       0       0       0
 20305 ;;      Temps:          0       0       0       0       0       0       0
 20306 ;;      Totals:         3       0       0       0       0       0       0
 20307 ;;Total ram usage:        3 bytes
 20308 ;; Hardware stack levels used:    1
 20309 ;; Hardware stack levels required when called:    3
 20310 ;; This function calls:
 20311 ;;		i2_writeEEPROM_ext
 20312 ;; This function is called by:
 20313 ;;		_timer
 20314 ;; This function uses a non-reentrant model
 20315 ;;
 20316                           
 20317                           	psect	text80
 20318  006DA2                     __ptext80:
 20319                           	opt stack 0
 20320  006DA2                     _writeEEPROM16_ext:
 20321                           	opt stack 0
 20322  006DA2  FFFF               	dw	65535	; assembler added errata NOP
 20323                           
 20324                           ;incstack = 0
 20325                           ;writeEEPROM16_ext@adress stored from wreg
 20326  006DA4  6E08               	movwf	writeEEPROM16_ext@adress,c
 20327                           
 20328                           ;eeprom.h: 41: writeEEPROM_ext(adress, data);
 20329  006DA6  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 20330  006DAA  5008               	movf	writeEEPROM16_ext@adress,w,c
 20331  006DAC  EC88  F038         	call	i2_writeEEPROM_ext
 20332                           
 20333                           ;eeprom.h: 42: data>> = 8;
 20334  006DB0  5007               	movf	writeEEPROM16_ext@data+1,w,c
 20335  006DB2  6E06               	movwf	writeEEPROM16_ext@data,c
 20336  006DB4  6A07               	clrf	writeEEPROM16_ext@data+1,c
 20337                           
 20338                           ;eeprom.h: 43: writeEEPROM_ext(adress + 1, data);
 20339  006DB6  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 20340  006DBA  2808               	incf	writeEEPROM16_ext@adress,w,c
 20341  006DBC  EC88  F038         	call	i2_writeEEPROM_ext
 20342  006DC0  0012               	return		;funcret
 20343  006DC2  FFFF               	dw	65535	; errata NOP
 20344  006DC4                     __end_of_writeEEPROM16_ext:
 20345                           	opt stack 0
 20346                           tosu	equ	0xFFF
 20347                           tosh	equ	0xFFE
 20348                           tosl	equ	0xFFD
 20349                           pclatu	equ	0xFFB
 20350                           pclath	equ	0xFFA
 20351                           tblptru	equ	0xFF8
 20352                           tblptrh	equ	0xFF7
 20353                           tblptrl	equ	0xFF6
 20354                           tablat	equ	0xFF5
 20355                           prodh	equ	0xFF4
 20356                           prodl	equ	0xFF3
 20357                           intcon	equ	0xFF2
 20358                           indf0	equ	0xFEF
 20359                           postinc0	equ	0xFEE
 20360                           fsr0h	equ	0xFEA
 20361                           fsr0l	equ	0xFE9
 20362                           wreg	equ	0xFE8
 20363                           postdec1	equ	0xFE5
 20364                           fsr1h	equ	0xFE2
 20365                           fsr1l	equ	0xFE1
 20366                           indf2	equ	0xFDF
 20367                           postinc2	equ	0xFDE
 20368                           postdec2	equ	0xFDD
 20369                           fsr2h	equ	0xFDA
 20370                           fsr2l	equ	0xFD9
 20371                           status	equ	0xFD8
 20372                           
 20373 ;; *************** function i2_writeEEPROM_ext *****************
 20374 ;; Defined at:
 20375 ;;		line 13 in file "eeprom.h"
 20376 ;; Parameters:    Size  Location     Type
 20377 ;;  adress          1    wreg     unsigned char 
 20378 ;;  data            1    3[COMRAM] unsigned char 
 20379 ;; Auto vars:     Size  Location     Type
 20380 ;;  adress          1    4[COMRAM] unsigned char 
 20381 ;; Return value:  Size  Location     Type
 20382 ;;                  1    wreg      void 
 20383 ;; Registers used:
 20384 ;;		wreg, status,2, status,0, cstack
 20385 ;; Tracked objects:
 20386 ;;		On entry : 0/0
 20387 ;;		On exit  : 0/0
 20388 ;;		Unchanged: 0/0
 20389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20390 ;;      Params:         1       0       0       0       0       0       0
 20391 ;;      Locals:         1       0       0       0       0       0       0
 20392 ;;      Temps:          0       0       0       0       0       0       0
 20393 ;;      Totals:         2       0       0       0       0       0       0
 20394 ;;Total ram usage:        2 bytes
 20395 ;; Hardware stack levels used:    1
 20396 ;; Hardware stack levels required when called:    2
 20397 ;; This function calls:
 20398 ;;		i2_I2C_Start
 20399 ;;		i2_I2C_Stop
 20400 ;;		i2_I2C_Write
 20401 ;;		i2_delay
 20402 ;; This function is called by:
 20403 ;;		_writeEEPROM16_ext
 20404 ;;		_timer
 20405 ;; This function uses a non-reentrant model
 20406 ;;
 20407                           
 20408                           	psect	text81
 20409  007110                     __ptext81:
 20410                           	opt stack 0
 20411  007110                     i2_writeEEPROM_ext:
 20412                           	opt stack 0
 20413  007110  FFFF               	dw	65535	; assembler added errata NOP
 20414                           
 20415                           ;incstack = 0
 20416                           ;i2writeEEPROM_ext@adress stored from wreg
 20417  007112  6E05               	movwf	i2writeEEPROM_ext@adress,c
 20418                           
 20419                           ;eeprom.h: 15: I2C_Start();
 20420  007114  EC54  F036         	call	i2_I2C_Start	;wreg free
 20421                           
 20422                           ;eeprom.h: 16: I2C_Write(0xA0);
 20423  007118  0E00               	movlw	0
 20424  00711A  6E03               	movwf	i2I2C_Write@d+1,c
 20425  00711C  0EA0               	movlw	160
 20426  00711E  6E02               	movwf	i2I2C_Write@d,c
 20427  007120  EC78  F036         	call	i2_I2C_Write	;wreg free
 20428                           
 20429                           ;eeprom.h: 18: I2C_Write(adress);
 20430  007124  C005  F002         	movff	i2writeEEPROM_ext@adress,i2I2C_Write@d
 20431  007128  6A03               	clrf	i2I2C_Write@d+1,c
 20432  00712A  EC78  F036         	call	i2_I2C_Write	;wreg free
 20433                           
 20434                           ;eeprom.h: 19: I2C_Write(data);
 20435  00712E  C004  F002         	movff	i2writeEEPROM_ext@data,i2I2C_Write@d
 20436  007132  6A03               	clrf	i2I2C_Write@d+1,c
 20437  007134  EC78  F036         	call	i2_I2C_Write	;wreg free
 20438                           
 20439                           ;eeprom.h: 20: I2C_Stop();
 20440  007138  EC5A  F036         	call	i2_I2C_Stop	;wreg free
 20441                           
 20442                           ;eeprom.h: 21: delay(15);
 20443  00713C  0E00               	movlw	0
 20444  00713E  6E02               	movwf	i2delay@x+1,c
 20445  007140  0E0F               	movlw	15
 20446  007142  6E01               	movwf	i2delay@x,c
 20447  007144  EC5E  F037         	call	i2_delay	;wreg free
 20448  007148  0012               	return		;funcret
 20449  00714A  FFFF               	dw	65535	; errata NOP
 20450  00714C                     __end_ofi2_writeEEPROM_ext:
 20451                           	opt stack 0
 20452                           tosu	equ	0xFFF
 20453                           tosh	equ	0xFFE
 20454                           tosl	equ	0xFFD
 20455                           pclatu	equ	0xFFB
 20456                           pclath	equ	0xFFA
 20457                           tblptru	equ	0xFF8
 20458                           tblptrh	equ	0xFF7
 20459                           tblptrl	equ	0xFF6
 20460                           tablat	equ	0xFF5
 20461                           prodh	equ	0xFF4
 20462                           prodl	equ	0xFF3
 20463                           intcon	equ	0xFF2
 20464                           indf0	equ	0xFEF
 20465                           postinc0	equ	0xFEE
 20466                           fsr0h	equ	0xFEA
 20467                           fsr0l	equ	0xFE9
 20468                           wreg	equ	0xFE8
 20469                           postdec1	equ	0xFE5
 20470                           fsr1h	equ	0xFE2
 20471                           fsr1l	equ	0xFE1
 20472                           indf2	equ	0xFDF
 20473                           postinc2	equ	0xFDE
 20474                           postdec2	equ	0xFDD
 20475                           fsr2h	equ	0xFDA
 20476                           fsr2l	equ	0xFD9
 20477                           status	equ	0xFD8
 20478                           
 20479 ;; *************** function i2_delay *****************
 20480 ;; Defined at:
 20481 ;;		line 16 in file "function.c"
 20482 ;; Parameters:    Size  Location     Type
 20483 ;;  x               2    0[COMRAM] int 
 20484 ;; Auto vars:     Size  Location     Type
 20485 ;;		None
 20486 ;; Return value:  Size  Location     Type
 20487 ;;                  1    wreg      void 
 20488 ;; Registers used:
 20489 ;;		wreg, status,2, status,0
 20490 ;; Tracked objects:
 20491 ;;		On entry : 0/0
 20492 ;;		On exit  : 0/0
 20493 ;;		Unchanged: 0/0
 20494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20495 ;;      Params:         2       0       0       0       0       0       0
 20496 ;;      Locals:         0       0       0       0       0       0       0
 20497 ;;      Temps:          1       0       0       0       0       0       0
 20498 ;;      Totals:         3       0       0       0       0       0       0
 20499 ;;Total ram usage:        3 bytes
 20500 ;; Hardware stack levels used:    1
 20501 ;; This function calls:
 20502 ;;		Nothing
 20503 ;; This function is called by:
 20504 ;;		i2_writeEEPROM_ext
 20505 ;; This function uses a non-reentrant model
 20506 ;;
 20507                           
 20508                           	psect	text82
 20509  006EBC                     __ptext82:
 20510                           	opt stack 0
 20511  006EBC                     i2_delay:
 20512                           	opt stack 0
 20513  006EBC  FFFF               	dw	65535	; assembler added errata NOP
 20514                           
 20515                           ;function.c: 17: while (x--) {
 20516                           
 20517                           ;incstack = 0
 20518  006EBE  D00B               	goto	i2l1002
 20519  006EC0  FFFF               	dw	65535	; assembler added errata NOP
 20520  006EC2                     i2l5300:
 20521                           
 20522                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 20523  006EC2  0E02               	movlw	2
 20524  006EC4  6E03               	movwf	??i2_delay& (0+255),c
 20525  006EC6  0EF2               	movlw	242
 20526  006EC8                     i2u909_47:
 20527  006EC8  FFFF               	dw	65535	; errata NOP
 20528  006ECA  2EE8               	decfsz	wreg,f,c
 20529  006ECC  D7FD               	bra	i2u909_47
 20530  006ECE  2E03               	decfsz	??i2_delay& (0+255),f,c
 20531  006ED0  D7FB               	bra	i2u909_47
 20532  006ED2  D000               	nop2	
 20533  006ED4  0004               	clrwdt		;# 
 20534  006ED6                     i2l1002:
 20535  006ED6  FFFF               	dw	65535	; assembler added errata NOP
 20536  006ED8  0601               	decf	i2delay@x,f,c
 20537  006EDA  A0D8               	btfss	status,0,c
 20538  006EDC  0602               	decf	i2delay@x+1,f,c
 20539  006EDE  2801               	incf	i2delay@x,w,c
 20540  006EE0  E1F0               	bnz	i2l5300
 20541  006EE2  2802               	incf	i2delay@x+1,w,c
 20542  006EE4  B4D8               	btfsc	status,2,c
 20543  006EE6  0012               	return		;funcret
 20544  006EE8  FFFF               	dw	65535	; assembler added errata NOP
 20545  006EEA  D7EA               	goto	i2l1003
 20546  006EEC  FFFF               	dw	65535	; errata NOP
 20547  006EEE                     __end_ofi2_delay:
 20548                           	opt stack 0
 20549                           tosu	equ	0xFFF
 20550                           tosh	equ	0xFFE
 20551                           tosl	equ	0xFFD
 20552                           pclatu	equ	0xFFB
 20553                           pclath	equ	0xFFA
 20554                           tblptru	equ	0xFF8
 20555                           tblptrh	equ	0xFF7
 20556                           tblptrl	equ	0xFF6
 20557                           tablat	equ	0xFF5
 20558                           prodh	equ	0xFF4
 20559                           prodl	equ	0xFF3
 20560                           intcon	equ	0xFF2
 20561                           indf0	equ	0xFEF
 20562                           postinc0	equ	0xFEE
 20563                           fsr0h	equ	0xFEA
 20564                           fsr0l	equ	0xFE9
 20565                           wreg	equ	0xFE8
 20566                           postdec1	equ	0xFE5
 20567                           fsr1h	equ	0xFE2
 20568                           fsr1l	equ	0xFE1
 20569                           indf2	equ	0xFDF
 20570                           postinc2	equ	0xFDE
 20571                           postdec2	equ	0xFDD
 20572                           fsr2h	equ	0xFDA
 20573                           fsr2l	equ	0xFD9
 20574                           status	equ	0xFD8
 20575                           
 20576 ;; *************** function i2_I2C_Write *****************
 20577 ;; Defined at:
 20578 ;;		line 42 in file "I2C.c"
 20579 ;; Parameters:    Size  Location     Type
 20580 ;;  d               2    1[COMRAM] unsigned int 
 20581 ;; Auto vars:     Size  Location     Type
 20582 ;;		None
 20583 ;; Return value:  Size  Location     Type
 20584 ;;                  1    wreg      void 
 20585 ;; Registers used:
 20586 ;;		wreg, status,2, status,0, cstack
 20587 ;; Tracked objects:
 20588 ;;		On entry : 0/0
 20589 ;;		On exit  : 0/0
 20590 ;;		Unchanged: 0/0
 20591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20592 ;;      Params:         2       0       0       0       0       0       0
 20593 ;;      Locals:         0       0       0       0       0       0       0
 20594 ;;      Temps:          0       0       0       0       0       0       0
 20595 ;;      Totals:         2       0       0       0       0       0       0
 20596 ;;Total ram usage:        2 bytes
 20597 ;; Hardware stack levels used:    1
 20598 ;; Hardware stack levels required when called:    1
 20599 ;; This function calls:
 20600 ;;		i2_I2C_Wait
 20601 ;; This function is called by:
 20602 ;;		i2_getDS1307TimeDate
 20603 ;;		i2_RTC_Init
 20604 ;;		i2_writeEEPROM_ext
 20605 ;; This function uses a non-reentrant model
 20606 ;;
 20607                           
 20608                           	psect	text83
 20609  006CF0                     __ptext83:
 20610                           	opt stack 0
 20611  006CF0                     i2_I2C_Write:
 20612                           	opt stack 0
 20613  006CF0  FFFF               	dw	65535	; assembler added errata NOP
 20614                           
 20615                           ;I2C.c: 43: I2C_Wait();
 20616                           
 20617                           ;incstack = 0
 20618  006CF2  ECAB  F036         	call	i2_I2C_Wait	;wreg free
 20619                           
 20620                           ;I2C.c: 44: SSPBUF = d;
 20621  006CF6  C002  FFC9         	movff	i2I2C_Write@d,4041	;volatile
 20622  006CFA  0012               	return		;funcret
 20623  006CFC  FFFF               	dw	65535	; errata NOP
 20624  006CFE                     __end_ofi2_I2C_Write:
 20625                           	opt stack 0
 20626                           tosu	equ	0xFFF
 20627                           tosh	equ	0xFFE
 20628                           tosl	equ	0xFFD
 20629                           pclatu	equ	0xFFB
 20630                           pclath	equ	0xFFA
 20631                           tblptru	equ	0xFF8
 20632                           tblptrh	equ	0xFF7
 20633                           tblptrl	equ	0xFF6
 20634                           tablat	equ	0xFF5
 20635                           prodh	equ	0xFF4
 20636                           prodl	equ	0xFF3
 20637                           intcon	equ	0xFF2
 20638                           indf0	equ	0xFEF
 20639                           postinc0	equ	0xFEE
 20640                           fsr0h	equ	0xFEA
 20641                           fsr0l	equ	0xFE9
 20642                           wreg	equ	0xFE8
 20643                           postdec1	equ	0xFE5
 20644                           fsr1h	equ	0xFE2
 20645                           fsr1l	equ	0xFE1
 20646                           indf2	equ	0xFDF
 20647                           postinc2	equ	0xFDE
 20648                           postdec2	equ	0xFDD
 20649                           fsr2h	equ	0xFDA
 20650                           fsr2l	equ	0xFD9
 20651                           status	equ	0xFD8
 20652                           
 20653 ;; *************** function i2_I2C_Stop *****************
 20654 ;; Defined at:
 20655 ;;		line 36 in file "I2C.c"
 20656 ;; Parameters:    Size  Location     Type
 20657 ;;		None
 20658 ;; Auto vars:     Size  Location     Type
 20659 ;;		None
 20660 ;; Return value:  Size  Location     Type
 20661 ;;                  1    wreg      void 
 20662 ;; Registers used:
 20663 ;;		wreg, status,2, status,0, cstack
 20664 ;; Tracked objects:
 20665 ;;		On entry : 0/0
 20666 ;;		On exit  : 0/0
 20667 ;;		Unchanged: 0/0
 20668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20669 ;;      Params:         0       0       0       0       0       0       0
 20670 ;;      Locals:         0       0       0       0       0       0       0
 20671 ;;      Temps:          0       0       0       0       0       0       0
 20672 ;;      Totals:         0       0       0       0       0       0       0
 20673 ;;Total ram usage:        0 bytes
 20674 ;; Hardware stack levels used:    1
 20675 ;; Hardware stack levels required when called:    1
 20676 ;; This function calls:
 20677 ;;		i2_I2C_Wait
 20678 ;; This function is called by:
 20679 ;;		i2_getDS1307TimeDate
 20680 ;;		i2_RTC_Init
 20681 ;;		i2_writeEEPROM_ext
 20682 ;; This function uses a non-reentrant model
 20683 ;;
 20684                           
 20685                           	psect	text84
 20686  006CB4                     __ptext84:
 20687                           	opt stack 0
 20688  006CB4                     i2_I2C_Stop:
 20689                           	opt stack 0
 20690  006CB4  FFFF               	dw	65535	; assembler added errata NOP
 20691                           
 20692                           ;I2C.c: 37: I2C_Wait();
 20693                           
 20694                           ;incstack = 0
 20695  006CB6  ECAB  F036         	call	i2_I2C_Wait	;wreg free
 20696                           
 20697                           ;I2C.c: 38: PEN = 1;
 20698  006CBA  84C5               	bsf	4037,2,c	;volatile
 20699  006CBC  0012               	return		;funcret
 20700  006CBE  FFFF               	dw	65535	; errata NOP
 20701  006CC0                     __end_ofi2_I2C_Stop:
 20702                           	opt stack 0
 20703                           tosu	equ	0xFFF
 20704                           tosh	equ	0xFFE
 20705                           tosl	equ	0xFFD
 20706                           pclatu	equ	0xFFB
 20707                           pclath	equ	0xFFA
 20708                           tblptru	equ	0xFF8
 20709                           tblptrh	equ	0xFF7
 20710                           tblptrl	equ	0xFF6
 20711                           tablat	equ	0xFF5
 20712                           prodh	equ	0xFF4
 20713                           prodl	equ	0xFF3
 20714                           intcon	equ	0xFF2
 20715                           indf0	equ	0xFEF
 20716                           postinc0	equ	0xFEE
 20717                           fsr0h	equ	0xFEA
 20718                           fsr0l	equ	0xFE9
 20719                           wreg	equ	0xFE8
 20720                           postdec1	equ	0xFE5
 20721                           fsr1h	equ	0xFE2
 20722                           fsr1l	equ	0xFE1
 20723                           indf2	equ	0xFDF
 20724                           postinc2	equ	0xFDE
 20725                           postdec2	equ	0xFDD
 20726                           fsr2h	equ	0xFDA
 20727                           fsr2l	equ	0xFD9
 20728                           status	equ	0xFD8
 20729                           
 20730 ;; *************** function i2_I2C_Start *****************
 20731 ;; Defined at:
 20732 ;;		line 26 in file "I2C.c"
 20733 ;; Parameters:    Size  Location     Type
 20734 ;;		None
 20735 ;; Auto vars:     Size  Location     Type
 20736 ;;		None
 20737 ;; Return value:  Size  Location     Type
 20738 ;;                  1    wreg      void 
 20739 ;; Registers used:
 20740 ;;		wreg, status,2, status,0, cstack
 20741 ;; Tracked objects:
 20742 ;;		On entry : 0/0
 20743 ;;		On exit  : 0/0
 20744 ;;		Unchanged: 0/0
 20745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20746 ;;      Params:         0       0       0       0       0       0       0
 20747 ;;      Locals:         0       0       0       0       0       0       0
 20748 ;;      Temps:          0       0       0       0       0       0       0
 20749 ;;      Totals:         0       0       0       0       0       0       0
 20750 ;;Total ram usage:        0 bytes
 20751 ;; Hardware stack levels used:    1
 20752 ;; Hardware stack levels required when called:    1
 20753 ;; This function calls:
 20754 ;;		i2_I2C_Wait
 20755 ;; This function is called by:
 20756 ;;		i2_getDS1307TimeDate
 20757 ;;		i2_RTC_Init
 20758 ;;		i2_writeEEPROM_ext
 20759 ;; This function uses a non-reentrant model
 20760 ;;
 20761                           
 20762                           	psect	text85
 20763  006CA8                     __ptext85:
 20764                           	opt stack 0
 20765  006CA8                     i2_I2C_Start:
 20766                           	opt stack 0
 20767  006CA8  FFFF               	dw	65535	; assembler added errata NOP
 20768                           
 20769                           ;I2C.c: 27: I2C_Wait();
 20770                           
 20771                           ;incstack = 0
 20772  006CAA  ECAB  F036         	call	i2_I2C_Wait	;wreg free
 20773                           
 20774                           ;I2C.c: 28: SEN = 1;
 20775  006CAE  80C5               	bsf	4037,0,c	;volatile
 20776  006CB0  0012               	return		;funcret
 20777  006CB2  FFFF               	dw	65535	; errata NOP
 20778  006CB4                     __end_ofi2_I2C_Start:
 20779                           	opt stack 0
 20780                           tosu	equ	0xFFF
 20781                           tosh	equ	0xFFE
 20782                           tosl	equ	0xFFD
 20783                           pclatu	equ	0xFFB
 20784                           pclath	equ	0xFFA
 20785                           tblptru	equ	0xFF8
 20786                           tblptrh	equ	0xFF7
 20787                           tblptrl	equ	0xFF6
 20788                           tablat	equ	0xFF5
 20789                           prodh	equ	0xFF4
 20790                           prodl	equ	0xFF3
 20791                           intcon	equ	0xFF2
 20792                           indf0	equ	0xFEF
 20793                           postinc0	equ	0xFEE
 20794                           fsr0h	equ	0xFEA
 20795                           fsr0l	equ	0xFE9
 20796                           wreg	equ	0xFE8
 20797                           postdec1	equ	0xFE5
 20798                           fsr1h	equ	0xFE2
 20799                           fsr1l	equ	0xFE1
 20800                           indf2	equ	0xFDF
 20801                           postinc2	equ	0xFDE
 20802                           postdec2	equ	0xFDD
 20803                           fsr2h	equ	0xFDA
 20804                           fsr2l	equ	0xFD9
 20805                           status	equ	0xFD8
 20806                           
 20807 ;; *************** function i2_I2C_Wait *****************
 20808 ;; Defined at:
 20809 ;;		line 22 in file "I2C.c"
 20810 ;; Parameters:    Size  Location     Type
 20811 ;;		None
 20812 ;; Auto vars:     Size  Location     Type
 20813 ;;		None
 20814 ;; Return value:  Size  Location     Type
 20815 ;;                  1    wreg      void 
 20816 ;; Registers used:
 20817 ;;		wreg, status,2, status,0
 20818 ;; Tracked objects:
 20819 ;;		On entry : 0/0
 20820 ;;		On exit  : 0/0
 20821 ;;		Unchanged: 0/0
 20822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20823 ;;      Params:         0       0       0       0       0       0       0
 20824 ;;      Locals:         0       0       0       0       0       0       0
 20825 ;;      Temps:          1       0       0       0       0       0       0
 20826 ;;      Totals:         1       0       0       0       0       0       0
 20827 ;;Total ram usage:        1 bytes
 20828 ;; Hardware stack levels used:    1
 20829 ;; This function calls:
 20830 ;;		Nothing
 20831 ;; This function is called by:
 20832 ;;		i2_I2C_Start
 20833 ;;		i2_I2C_Restart
 20834 ;;		i2_I2C_Stop
 20835 ;;		i2_I2C_Write
 20836 ;;		i2_I2C_Read
 20837 ;; This function uses a non-reentrant model
 20838 ;;
 20839                           
 20840                           	psect	text86
 20841  006D56                     __ptext86:
 20842                           	opt stack 0
 20843  006D56                     i2_I2C_Wait:
 20844                           	opt stack 0
 20845  006D56  FFFF               	dw	65535	; assembler added errata NOP
 20846                           
 20847                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 20848                           
 20849                           ;incstack = 0
 20850  006D58  B4C7               	btfsc	4039,2,c	;volatile
 20851  006D5A  D7FD               	goto	i2_I2C_Wait
 20852  006D5C  CFC5 F001          	movff	4037,??i2_I2C_Wait	;volatile
 20853  006D60  0E1F               	movlw	31
 20854  006D62  1601               	andwf	??i2_I2C_Wait,f,c
 20855  006D64  B4D8               	btfsc	status,2,c
 20856  006D66  0012               	return		;funcret
 20857  006D68  FFFF               	dw	65535	; assembler added errata NOP
 20858  006D6A  D7F5               	goto	i2_I2C_Wait
 20859  006D6C  FFFF               	dw	65535	; errata NOP
 20860  006D6E                     __end_ofi2_I2C_Wait:
 20861                           	opt stack 0
 20862                           tosu	equ	0xFFF
 20863                           tosh	equ	0xFFE
 20864                           tosl	equ	0xFFD
 20865                           pclatu	equ	0xFFB
 20866                           pclath	equ	0xFFA
 20867                           tblptru	equ	0xFF8
 20868                           tblptrh	equ	0xFF7
 20869                           tblptrl	equ	0xFF6
 20870                           tablat	equ	0xFF5
 20871                           prodh	equ	0xFF4
 20872                           prodl	equ	0xFF3
 20873                           intcon	equ	0xFF2
 20874                           indf0	equ	0xFEF
 20875                           postinc0	equ	0xFEE
 20876                           fsr0h	equ	0xFEA
 20877                           fsr0l	equ	0xFE9
 20878                           wreg	equ	0xFE8
 20879                           postdec1	equ	0xFE5
 20880                           fsr1h	equ	0xFE2
 20881                           fsr1l	equ	0xFE1
 20882                           indf2	equ	0xFDF
 20883                           postinc2	equ	0xFDE
 20884                           postdec2	equ	0xFDD
 20885                           fsr2h	equ	0xFDA
 20886                           fsr2l	equ	0xFD9
 20887                           status	equ	0xFD8
 20888                           
 20889 ;; *************** function _readButtons *****************
 20890 ;; Defined at:
 20891 ;;		line 23 in file "teclado.h"
 20892 ;; Parameters:    Size  Location     Type
 20893 ;;		None
 20894 ;; Auto vars:     Size  Location     Type
 20895 ;;		None
 20896 ;; Return value:  Size  Location     Type
 20897 ;;                  1    wreg      void 
 20898 ;; Registers used:
 20899 ;;		wreg, status,2
 20900 ;; Tracked objects:
 20901 ;;		On entry : 0/0
 20902 ;;		On exit  : 0/0
 20903 ;;		Unchanged: 0/0
 20904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20905 ;;      Params:         0       0       0       0       0       0       0
 20906 ;;      Locals:         0       0       0       0       0       0       0
 20907 ;;      Temps:          0       0       0       0       0       0       0
 20908 ;;      Totals:         0       0       0       0       0       0       0
 20909 ;;Total ram usage:        0 bytes
 20910 ;; Hardware stack levels used:    1
 20911 ;; This function calls:
 20912 ;;		Nothing
 20913 ;; This function is called by:
 20914 ;;		_TIMER
 20915 ;; This function uses a non-reentrant model
 20916 ;;
 20917                           
 20918                           	psect	text87
 20919  0077EA                     __ptext87:
 20920                           	opt stack 0
 20921  0077EA                     _readButtons:
 20922                           	opt stack 0
 20923  0077EA  FFFF               	dw	65535	; assembler added errata NOP
 20924                           
 20925                           ;teclado.h: 24: if (!PORTBbits.RB2) {
 20926                           
 20927                           ;incstack = 0
 20928  0077EC  B481               	btfsc	3969,2,c	;volatile
 20929  0077EE  D002               	goto	i2l452
 20930                           
 20931                           ;teclado.h: 25: flag_b_esc = 1;
 20932  0077F0  0E01               	movlw	1
 20933  0077F2  6E65               	movwf	_flag_b_esc,c
 20934  0077F4                     i2l452:
 20935  0077F4  FFFF               	dw	65535	; assembler added errata NOP
 20936                           
 20937                           ;teclado.h: 26: }
 20938                           ;teclado.h: 27: if (PORTBbits.RB2 && flag_b_esc) {
 20939  0077F6  A481               	btfss	3969,2,c	;volatile
 20940  0077F8  D007               	goto	i2l453
 20941  0077FA  5065               	movf	_flag_b_esc,w,c
 20942  0077FC  B4D8               	btfsc	status,2,c
 20943  0077FE  D004               	goto	i2l453
 20944                           
 20945                           ;teclado.h: 28: _b_esc = 1;
 20946  007800  0E01               	movlw	1
 20947  007802  6E64               	movwf	__b_esc,c
 20948                           
 20949                           ;teclado.h: 29: flag_b_esc = 0;
 20950  007804  0E00               	movlw	0
 20951  007806  6E65               	movwf	_flag_b_esc,c
 20952  007808                     i2l453:
 20953  007808  FFFF               	dw	65535	; assembler added errata NOP
 20954                           
 20955                           ;teclado.h: 30: }
 20956                           ;teclado.h: 32: if (!PORTBbits.RB4) {
 20957  00780A  B881               	btfsc	3969,4,c	;volatile
 20958  00780C  D002               	goto	i2l454
 20959                           
 20960                           ;teclado.h: 33: flag_b_menos = 1;
 20961  00780E  0E01               	movlw	1
 20962  007810  6E63               	movwf	_flag_b_menos,c
 20963  007812                     i2l454:
 20964  007812  FFFF               	dw	65535	; assembler added errata NOP
 20965                           
 20966                           ;teclado.h: 34: }
 20967                           ;teclado.h: 35: if (PORTBbits.RB4 && flag_b_menos) {
 20968  007814  A881               	btfss	3969,4,c	;volatile
 20969  007816  D007               	goto	i2l455
 20970  007818  5063               	movf	_flag_b_menos,w,c
 20971  00781A  B4D8               	btfsc	status,2,c
 20972  00781C  D004               	goto	i2l455
 20973                           
 20974                           ;teclado.h: 36: _b_menos = 1;
 20975  00781E  0E01               	movlw	1
 20976  007820  6E62               	movwf	__b_menos,c
 20977                           
 20978                           ;teclado.h: 37: flag_b_menos = 0;
 20979  007822  0E00               	movlw	0
 20980  007824  6E63               	movwf	_flag_b_menos,c
 20981  007826                     i2l455:
 20982  007826  FFFF               	dw	65535	; assembler added errata NOP
 20983                           
 20984                           ;teclado.h: 38: }
 20985                           ;teclado.h: 40: if (!PORTBbits.RB5) {
 20986  007828  BA81               	btfsc	3969,5,c	;volatile
 20987  00782A  D002               	goto	i2l456
 20988                           
 20989                           ;teclado.h: 41: flag_b_mais = 1;
 20990  00782C  0E01               	movlw	1
 20991  00782E  6E61               	movwf	_flag_b_mais,c
 20992  007830                     i2l456:
 20993  007830  FFFF               	dw	65535	; assembler added errata NOP
 20994                           
 20995                           ;teclado.h: 42: }
 20996                           ;teclado.h: 43: if (PORTBbits.RB5 && flag_b_mais) {
 20997  007832  AA81               	btfss	3969,5,c	;volatile
 20998  007834  D007               	goto	i2l457
 20999  007836  5061               	movf	_flag_b_mais,w,c
 21000  007838  B4D8               	btfsc	status,2,c
 21001  00783A  D004               	goto	i2l457
 21002                           
 21003                           ;teclado.h: 44: _b_mais = 1;
 21004  00783C  0E01               	movlw	1
 21005  00783E  6E60               	movwf	__b_mais,c
 21006                           
 21007                           ;teclado.h: 45: flag_b_mais = 0;
 21008  007840  0E00               	movlw	0
 21009  007842  6E61               	movwf	_flag_b_mais,c
 21010  007844                     i2l457:
 21011  007844  FFFF               	dw	65535	; assembler added errata NOP
 21012                           
 21013                           ;teclado.h: 46: }
 21014                           ;teclado.h: 48: if (!PORTBbits.RB3) {
 21015  007846  B681               	btfsc	3969,3,c	;volatile
 21016  007848  D002               	goto	i2l458
 21017                           
 21018                           ;teclado.h: 49: flag_b_ok = 1;
 21019  00784A  0E01               	movlw	1
 21020  00784C  6E5F               	movwf	_flag_b_ok,c
 21021  00784E                     i2l458:
 21022  00784E  FFFF               	dw	65535	; assembler added errata NOP
 21023                           
 21024                           ;teclado.h: 50: }
 21025                           ;teclado.h: 51: if (PORTBbits.RB3 && flag_b_ok) {
 21026  007850  A681               	btfss	3969,3,c	;volatile
 21027  007852  D007               	goto	i2l459
 21028  007854  505F               	movf	_flag_b_ok,w,c
 21029  007856  B4D8               	btfsc	status,2,c
 21030  007858  D004               	goto	i2l459
 21031                           
 21032                           ;teclado.h: 52: _b_ok = 1;
 21033  00785A  0E01               	movlw	1
 21034  00785C  6E5E               	movwf	__b_ok,c
 21035                           
 21036                           ;teclado.h: 53: flag_b_ok = 0;
 21037  00785E  0E00               	movlw	0
 21038  007860  6E5F               	movwf	_flag_b_ok,c
 21039  007862                     i2l459:
 21040  007862  FFFF               	dw	65535	; assembler added errata NOP
 21041  007864  0012               	return		;funcret
 21042  007866  FFFF               	dw	65535	; errata NOP
 21043  007868                     __end_of_readButtons:
 21044                           	opt stack 0
 21045                           tosu	equ	0xFFF
 21046                           tosh	equ	0xFFE
 21047                           tosl	equ	0xFFD
 21048                           pclatu	equ	0xFFB
 21049                           pclath	equ	0xFFA
 21050                           tblptru	equ	0xFF8
 21051                           tblptrh	equ	0xFF7
 21052                           tblptrl	equ	0xFF6
 21053                           tablat	equ	0xFF5
 21054                           prodh	equ	0xFF4
 21055                           prodl	equ	0xFF3
 21056                           intcon	equ	0xFF2
 21057                           indf0	equ	0xFEF
 21058                           postinc0	equ	0xFEE
 21059                           fsr0h	equ	0xFEA
 21060                           fsr0l	equ	0xFE9
 21061                           wreg	equ	0xFE8
 21062                           postdec1	equ	0xFE5
 21063                           fsr1h	equ	0xFE2
 21064                           fsr1l	equ	0xFE1
 21065                           indf2	equ	0xFDF
 21066                           postinc2	equ	0xFDE
 21067                           postdec2	equ	0xFDD
 21068                           fsr2h	equ	0xFDA
 21069                           fsr2l	equ	0xFD9
 21070                           status	equ	0xFD8
 21071                           
 21072 ;; *************** function _lerTransdutor *****************
 21073 ;; Defined at:
 21074 ;;		line 7 in file "transdutor.h"
 21075 ;; Parameters:    Size  Location     Type
 21076 ;;		None
 21077 ;; Auto vars:     Size  Location     Type
 21078 ;;  tensao          3   45[COMRAM] float 
 21079 ;;  _pressao        3   42[COMRAM] float 
 21080 ;;  i               1   41[COMRAM] unsigned char 
 21081 ;; Return value:  Size  Location     Type
 21082 ;;                  1    wreg      void 
 21083 ;; Registers used:
 21084 ;;		wreg, status,2, status,0, cstack
 21085 ;; Tracked objects:
 21086 ;;		On entry : 0/0
 21087 ;;		On exit  : 0/0
 21088 ;;		Unchanged: 0/0
 21089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21090 ;;      Params:         0       0       0       0       0       0       0
 21091 ;;      Locals:         7       0       0       0       0       0       0
 21092 ;;      Temps:          0       0       0       0       0       0       0
 21093 ;;      Totals:         7       0       0       0       0       0       0
 21094 ;;Total ram usage:        7 bytes
 21095 ;; Hardware stack levels used:    1
 21096 ;; Hardware stack levels required when called:    2
 21097 ;; This function calls:
 21098 ;;		___ftadd
 21099 ;;		___ftdiv
 21100 ;;		___ftge
 21101 ;;		___ftmul
 21102 ;;		___fttol
 21103 ;;		___lwtoft
 21104 ;;		_readADC
 21105 ;; This function is called by:
 21106 ;;		_TIMER
 21107 ;; This function uses a non-reentrant model
 21108 ;;
 21109                           
 21110                           	psect	text88
 21111  001FCE                     __ptext88:
 21112                           	opt stack 0
 21113  001FCE                     _lerTransdutor:
 21114                           	opt stack 0
 21115  001FCE  FFFF               	dw	65535	; assembler added errata NOP
 21116                           
 21117                           ;transdutor.h: 8: char i = 0;
 21118                           
 21119                           ;incstack = 0
 21120  001FD0  0E00               	movlw	0
 21121  001FD2  6E2A               	movwf	lerTransdutor@i,c
 21122                           
 21123                           ;transdutor.h: 9: float tensao = 0, _pressao = 0;
 21124  001FD4  0E00               	movlw	0
 21125  001FD6  6E2E               	movwf	lerTransdutor@tensao,c
 21126  001FD8  0E00               	movlw	0
 21127  001FDA  6E2F               	movwf	lerTransdutor@tensao+1,c
 21128  001FDC  0E00               	movlw	0
 21129  001FDE  6E30               	movwf	lerTransdutor@tensao+2,c
 21130  001FE0  0E00               	movlw	0
 21131  001FE2  6E2B               	movwf	lerTransdutor@_pressao,c
 21132  001FE4  0E00               	movlw	0
 21133  001FE6  6E2C               	movwf	lerTransdutor@_pressao+1,c
 21134  001FE8  0E00               	movlw	0
 21135  001FEA  6E2D               	movwf	lerTransdutor@_pressao+2,c
 21136                           
 21137                           ;transdutor.h: 10: for (i = 0; i < 9; i++) {
 21138  001FEC  0E00               	movlw	0
 21139  001FEE  6E2A               	movwf	lerTransdutor@i,c
 21140  001FF0                     i2l6374:
 21141  001FF0  FFFF               	dw	65535	; assembler added errata NOP
 21142  001FF2  0E08               	movlw	8
 21143  001FF4  642A               	cpfsgt	lerTransdutor@i,c
 21144  001FF6  D001               	goto	i2l230
 21145  001FF8  D02D               	goto	i2u678_40
 21146  001FFA                     i2l230:
 21147  001FFA  FFFF               	dw	65535	; assembler added errata NOP
 21148                           
 21149                           ;transdutor.h: 11: tensao += readADC()*0.004887586;
 21150  001FFC  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 21151  002000  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 21152  002004  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 21153  002008  0E28               	movlw	40
 21154  00200A  6E0F               	movwf	___ftmul@f2,c
 21155  00200C  0EA0               	movlw	160
 21156  00200E  6E10               	movwf	___ftmul@f2+1,c
 21157  002010  0E3B               	movlw	59
 21158  002012  6E11               	movwf	___ftmul@f2+2,c
 21159  002014  ECF6  F036         	call	_readADC	;wreg free
 21160  002018  C001  F009         	movff	?_readADC,___lwtoft@c
 21161  00201C  C002  F00A         	movff	?_readADC+1,___lwtoft@c+1
 21162  002020  ECE2  F036         	call	___lwtoft	;wreg free
 21163  002024  C009  F00C         	movff	?___lwtoft,___ftmul@f1
 21164  002028  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
 21165  00202C  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
 21166  002030  EC72  F01A         	call	___ftmul	;wreg free
 21167  002034  C00C  F01E         	movff	?___ftmul,___ftadd@f2
 21168  002038  C00D  F01F         	movff	?___ftmul+1,___ftadd@f2+1
 21169  00203C  C00E  F020         	movff	?___ftmul+2,___ftadd@f2+2
 21170  002040  ECE3  F013         	call	___ftadd	;wreg free
 21171  002044  C01B  F02E         	movff	?___ftadd,lerTransdutor@tensao
 21172  002048  C01C  F02F         	movff	?___ftadd+1,lerTransdutor@tensao+1
 21173  00204C  C01D  F030         	movff	?___ftadd+2,lerTransdutor@tensao+2
 21174  002050  2A2A               	incf	lerTransdutor@i,f,c
 21175  002052  D7CE               	goto	i2l6374
 21176  002054                     i2u678_40:
 21177  002054  FFFF               	dw	65535	; assembler added errata NOP
 21178                           
 21179                           ;transdutor.h: 12: }
 21180                           ;transdutor.h: 13: tensao = tensao / 10;
 21181  002056  C02E  F01B         	movff	lerTransdutor@tensao,___ftdiv@f1
 21182  00205A  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftdiv@f1+1
 21183  00205E  C030  F01D         	movff	lerTransdutor@tensao+2,___ftdiv@f1+2
 21184  002062  0E00               	movlw	0
 21185  002064  6E1E               	movwf	___ftdiv@f2,c
 21186  002066  0E20               	movlw	32
 21187  002068  6E1F               	movwf	___ftdiv@f2+1,c
 21188  00206A  0E41               	movlw	65
 21189  00206C  6E20               	movwf	___ftdiv@f2+2,c
 21190  00206E  ECD8  F01B         	call	___ftdiv	;wreg free
 21191  002072  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 21192  002076  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 21193  00207A  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 21194                           
 21195                           ;transdutor.h: 14: _tensao += (float) tensao;
 21196  00207E  C04C  F01B         	movff	__tensao,___ftadd@f1
 21197  002082  C04D  F01C         	movff	__tensao+1,___ftadd@f1+1
 21198  002086  C04E  F01D         	movff	__tensao+2,___ftadd@f1+2
 21199  00208A  C02E  F01E         	movff	lerTransdutor@tensao,___ftadd@f2
 21200  00208E  C02F  F01F         	movff	lerTransdutor@tensao+1,___ftadd@f2+1
 21201  002092  C030  F020         	movff	lerTransdutor@tensao+2,___ftadd@f2+2
 21202  002096  ECE3  F013         	call	___ftadd	;wreg free
 21203  00209A  C01B  F04C         	movff	?___ftadd,__tensao
 21204  00209E  C01C  F04D         	movff	?___ftadd+1,__tensao+1
 21205  0020A2  C01D  F04E         	movff	?___ftadd+2,__tensao+2
 21206                           
 21207                           ;transdutor.h: 15: qtd_leitura++;
 21208  0020A6  2A6E               	incf	_qtd_leitura,f,c
 21209                           
 21210                           ;transdutor.h: 17: if (tensao < 0.4) {
 21211  0020A8  C02E  F001         	movff	lerTransdutor@tensao,___ftge@ff1
 21212  0020AC  C02F  F002         	movff	lerTransdutor@tensao+1,___ftge@ff1+1
 21213  0020B0  C030  F003         	movff	lerTransdutor@tensao+2,___ftge@ff1+2
 21214  0020B4  0ECD               	movlw	205
 21215  0020B6  6E04               	movwf	___ftge@ff2,c
 21216  0020B8  0ECC               	movlw	204
 21217  0020BA  6E05               	movwf	___ftge@ff2+1,c
 21218  0020BC  0E3E               	movlw	62
 21219  0020BE  6E06               	movwf	___ftge@ff2+2,c
 21220  0020C0  ECAF  F01E         	call	___ftge	;wreg free
 21221  0020C4  B0D8               	btfsc	status,0,c
 21222  0020C6  D005               	goto	i2l232
 21223                           
 21224                           ;transdutor.h: 18: pressao = -10;
 21225  0020C8  0EFF               	movlw	255
 21226  0020CA  0100               	movlb	0	; () banked
 21227  0020CC  6FF9               	movwf	(_pressao+1)& (0+255),b
 21228  0020CE  0EF6               	movlw	246
 21229  0020D0  D015               	goto	L43
 21230  0020D2                     i2l232:
 21231  0020D2  FFFF               	dw	65535	; assembler added errata NOP
 21232                           
 21233                           ; BSR set to: 0
 21234  0020D4  0E00               	movlw	0
 21235  0020D6  6E01               	movwf	___ftge@ff1,c
 21236  0020D8  0E90               	movlw	144
 21237  0020DA  6E02               	movwf	___ftge@ff1+1,c
 21238  0020DC  0E40               	movlw	64
 21239  0020DE  6E03               	movwf	___ftge@ff1+2,c
 21240  0020E0  C02E  F004         	movff	lerTransdutor@tensao,___ftge@ff2
 21241  0020E4  C02F  F005         	movff	lerTransdutor@tensao+1,___ftge@ff2+1
 21242  0020E8  C030  F006         	movff	lerTransdutor@tensao+2,___ftge@ff2+2
 21243  0020EC  ECAF  F01E         	call	___ftge	;wreg free
 21244  0020F0  B0D8               	btfsc	status,0,c
 21245  0020F2  D009               	goto	i2l234
 21246                           
 21247                           ;transdutor.h: 21: pressao = 99;
 21248  0020F4  0E00               	movlw	0
 21249  0020F6  0100               	movlb	0	; () banked
 21250  0020F8  6FF9               	movwf	(_pressao+1)& (0+255),b
 21251  0020FA  0E63               	movlw	99
 21252  0020FC                     L43:
 21253  0020FC  FFFF               	dw	65535	; assembler added errata NOP
 21254  0020FE  6FF8               	movwf	_pressao& (0+255),b
 21255                           
 21256                           ;transdutor.h: 22: flagErroTransdutor = 1;
 21257  002100  0E01               	movlw	1
 21258  002102  6E73               	movwf	_flagErroTransdutor,c
 21259                           
 21260                           ;transdutor.h: 23: } else if (qtd_leitura >= 6) {
 21261  002104  D07B               	goto	i2l236
 21262  002106                     i2l234:
 21263  002106  FFFF               	dw	65535	; assembler added errata NOP
 21264                           
 21265                           ; BSR set to: 0
 21266  002108  0E05               	movlw	5
 21267  00210A  646E               	cpfsgt	_qtd_leitura,c
 21268  00210C  D077               	goto	i2l236
 21269                           
 21270                           ;transdutor.h: 24: flagErroTransdutor = 0;
 21271  00210E  0E00               	movlw	0
 21272  002110  6E73               	movwf	_flagErroTransdutor,c
 21273                           
 21274                           ;transdutor.h: 25: qtd_leitura = 0;
 21275  002112  0E00               	movlw	0
 21276  002114  6E6E               	movwf	_qtd_leitura,c
 21277                           
 21278                           ;transdutor.h: 26: tensao = (float) (_tensao / 6);
 21279  002116  C04C  F01B         	movff	__tensao,___ftdiv@f1
 21280  00211A  C04D  F01C         	movff	__tensao+1,___ftdiv@f1+1
 21281  00211E  C04E  F01D         	movff	__tensao+2,___ftdiv@f1+2
 21282  002122  0E00               	movlw	0
 21283  002124  6E1E               	movwf	___ftdiv@f2,c
 21284  002126  0EC0               	movlw	192
 21285  002128  6E1F               	movwf	___ftdiv@f2+1,c
 21286  00212A  0E40               	movlw	64
 21287  00212C  6E20               	movwf	___ftdiv@f2+2,c
 21288  00212E  ECD8  F01B         	call	___ftdiv	;wreg free
 21289  002132  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 21290  002136  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 21291  00213A  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 21292                           
 21293                           ;transdutor.h: 27: _tensao = 0;
 21294  00213E  0E00               	movlw	0
 21295  002140  6E4C               	movwf	__tensao,c
 21296  002142  0E00               	movlw	0
 21297  002144  6E4D               	movwf	__tensao+1,c
 21298  002146  0E00               	movlw	0
 21299  002148  6E4E               	movwf	__tensao+2,c
 21300                           
 21301                           ;transdutor.h: 28: _pressao = tensao - 0.5;
 21302  00214A  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 21303  00214E  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 21304  002152  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 21305  002156  0E00               	movlw	0
 21306  002158  6E1E               	movwf	___ftadd@f2,c
 21307  00215A  0E00               	movlw	0
 21308  00215C  6E1F               	movwf	___ftadd@f2+1,c
 21309  00215E  0EBF               	movlw	191
 21310  002160  6E20               	movwf	___ftadd@f2+2,c
 21311  002162  ECE3  F013         	call	___ftadd	;wreg free
 21312  002166  C01B  F02B         	movff	?___ftadd,lerTransdutor@_pressao
 21313  00216A  C01C  F02C         	movff	?___ftadd+1,lerTransdutor@_pressao+1
 21314  00216E  C01D  F02D         	movff	?___ftadd+2,lerTransdutor@_pressao+2
 21315                           
 21316                           ;transdutor.h: 29: _pressao = _pressao * 10 / 4;
 21317  002172  0E00               	movlw	0
 21318  002174  6E0F               	movwf	___ftmul@f2,c
 21319  002176  0E20               	movlw	32
 21320  002178  6E10               	movwf	___ftmul@f2+1,c
 21321  00217A  0E41               	movlw	65
 21322  00217C  6E11               	movwf	___ftmul@f2+2,c
 21323  00217E  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 21324  002182  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 21325  002186  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 21326  00218A  EC72  F01A         	call	___ftmul	;wreg free
 21327  00218E  C00C  F01B         	movff	?___ftmul,___ftdiv@f1
 21328  002192  C00D  F01C         	movff	?___ftmul+1,___ftdiv@f1+1
 21329  002196  C00E  F01D         	movff	?___ftmul+2,___ftdiv@f1+2
 21330  00219A  0E00               	movlw	0
 21331  00219C  6E1E               	movwf	___ftdiv@f2,c
 21332  00219E  0E80               	movlw	128
 21333  0021A0  6E1F               	movwf	___ftdiv@f2+1,c
 21334  0021A2  0E40               	movlw	64
 21335  0021A4  6E20               	movwf	___ftdiv@f2+2,c
 21336  0021A6  ECD8  F01B         	call	___ftdiv	;wreg free
 21337  0021AA  C01B  F02B         	movff	?___ftdiv,lerTransdutor@_pressao
 21338  0021AE  C01C  F02C         	movff	?___ftdiv+1,lerTransdutor@_pressao+1
 21339  0021B2  C01D  F02D         	movff	?___ftdiv+2,lerTransdutor@_pressao+2
 21340                           
 21341                           ;transdutor.h: 30: if (_pressao < 0) {
 21342  0021B6  AE2D               	btfss	lerTransdutor@_pressao+2,7,c
 21343  0021B8  D006               	goto	i2l237
 21344                           
 21345                           ;transdutor.h: 31: _pressao = 0;
 21346  0021BA  0E00               	movlw	0
 21347  0021BC  6E2B               	movwf	lerTransdutor@_pressao,c
 21348  0021BE  0E00               	movlw	0
 21349  0021C0  6E2C               	movwf	lerTransdutor@_pressao+1,c
 21350  0021C2  0E00               	movlw	0
 21351  0021C4  6E2D               	movwf	lerTransdutor@_pressao+2,c
 21352  0021C6                     i2l237:
 21353  0021C6  FFFF               	dw	65535	; assembler added errata NOP
 21354                           
 21355                           ;transdutor.h: 32: }
 21356                           ;transdutor.h: 33: pressao = _pressao * 10;
 21357  0021C8  0E00               	movlw	0
 21358  0021CA  6E0F               	movwf	___ftmul@f2,c
 21359  0021CC  0E20               	movlw	32
 21360  0021CE  6E10               	movwf	___ftmul@f2+1,c
 21361  0021D0  0E41               	movlw	65
 21362  0021D2  6E11               	movwf	___ftmul@f2+2,c
 21363  0021D4  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 21364  0021D8  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 21365  0021DC  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 21366  0021E0  EC72  F01A         	call	___ftmul	;wreg free
 21367  0021E4  C00C  F01B         	movff	?___ftmul,___fttol@f1
 21368  0021E8  C00D  F01C         	movff	?___ftmul+1,___fttol@f1+1
 21369  0021EC  C00E  F01D         	movff	?___ftmul+2,___fttol@f1+2
 21370  0021F0  EC64  F01B         	call	___fttol	;wreg free
 21371  0021F4  C01B  F0F8         	movff	?___fttol,_pressao
 21372  0021F8  C01C  F0F9         	movff	?___fttol+1,_pressao+1
 21373  0021FC                     i2l236:
 21374  0021FC  FFFF               	dw	65535	; assembler added errata NOP
 21375  0021FE  0012               	return		;funcret
 21376  002200  FFFF               	dw	65535	; errata NOP
 21377  002202                     __end_of_lerTransdutor:
 21378                           	opt stack 0
 21379                           tosu	equ	0xFFF
 21380                           tosh	equ	0xFFE
 21381                           tosl	equ	0xFFD
 21382                           pclatu	equ	0xFFB
 21383                           pclath	equ	0xFFA
 21384                           tblptru	equ	0xFF8
 21385                           tblptrh	equ	0xFF7
 21386                           tblptrl	equ	0xFF6
 21387                           tablat	equ	0xFF5
 21388                           prodh	equ	0xFF4
 21389                           prodl	equ	0xFF3
 21390                           intcon	equ	0xFF2
 21391                           indf0	equ	0xFEF
 21392                           postinc0	equ	0xFEE
 21393                           fsr0h	equ	0xFEA
 21394                           fsr0l	equ	0xFE9
 21395                           wreg	equ	0xFE8
 21396                           postdec1	equ	0xFE5
 21397                           fsr1h	equ	0xFE2
 21398                           fsr1l	equ	0xFE1
 21399                           indf2	equ	0xFDF
 21400                           postinc2	equ	0xFDE
 21401                           postdec2	equ	0xFDD
 21402                           fsr2h	equ	0xFDA
 21403                           fsr2l	equ	0xFD9
 21404                           status	equ	0xFD8
 21405                           
 21406 ;; *************** function _readADC *****************
 21407 ;; Defined at:
 21408 ;;		line 8 in file "adc.h"
 21409 ;; Parameters:    Size  Location     Type
 21410 ;;		None
 21411 ;; Auto vars:     Size  Location     Type
 21412 ;;		None
 21413 ;; Return value:  Size  Location     Type
 21414 ;;                  2    0[COMRAM] unsigned int 
 21415 ;; Registers used:
 21416 ;;		wreg, status,2, status,0
 21417 ;; Tracked objects:
 21418 ;;		On entry : 0/0
 21419 ;;		On exit  : 0/0
 21420 ;;		Unchanged: 0/0
 21421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21422 ;;      Params:         2       0       0       0       0       0       0
 21423 ;;      Locals:         0       0       0       0       0       0       0
 21424 ;;      Temps:          2       0       0       0       0       0       0
 21425 ;;      Totals:         4       0       0       0       0       0       0
 21426 ;;Total ram usage:        4 bytes
 21427 ;; Hardware stack levels used:    1
 21428 ;; This function calls:
 21429 ;;		Nothing
 21430 ;; This function is called by:
 21431 ;;		_lerTransdutor
 21432 ;; This function uses a non-reentrant model
 21433 ;;
 21434                           
 21435                           	psect	text89
 21436  006DEC                     __ptext89:
 21437                           	opt stack 0
 21438  006DEC                     _readADC:
 21439                           	opt stack 0
 21440  006DEC  FFFF               	dw	65535	; assembler added errata NOP
 21441                           
 21442                           ;adc.h: 9: ADCON0bits.GO = 1;
 21443                           
 21444                           ;incstack = 0
 21445  006DEE  84C2               	bsf	4034,2,c	;volatile
 21446                           
 21447                           ;adc.h: 10: _delay((unsigned long)((50)*(8000000/4000000.0)));
 21448  006DF0  0E19               	movlw	25
 21449  006DF2                     i2u910_47:
 21450  006DF2  FFFF               	dw	65535	; errata NOP
 21451  006DF4  2EE8               	decfsz	wreg,f,c
 21452  006DF6  D7FD               	bra	i2u910_47
 21453  006DF8  FFFF               	dw	65535	; assembler added errata NOP
 21454  006DFA  A4C2               	btfss	4034,2,c	;volatile
 21455  006DFC  D7FD               	goto	i2l225
 21456                           
 21457                           ;adc.h: 12: }
 21458                           ;adc.h: 13: return((ADRESH<<8)+ ADRESL);
 21459  006DFE  50C4               	movf	4036,w,c	;volatile
 21460  006E00  6E04               	movwf	(??_readADC+1)& (0+255),c
 21461  006E02  6A03               	clrf	??_readADC& (0+255),c
 21462  006E04  50C3               	movf	4035,w,c	;volatile
 21463  006E06  2403               	addwf	??_readADC,w,c
 21464  006E08  6E01               	movwf	?_readADC,c
 21465  006E0A  0E00               	movlw	0
 21466  006E0C  2004               	addwfc	??_readADC+1,w,c
 21467  006E0E  6E02               	movwf	?_readADC+1,c
 21468  006E10  0012               	return		;funcret
 21469  006E12  FFFF               	dw	65535	; errata NOP
 21470  006E14                     __end_of_readADC:
 21471                           	opt stack 0
 21472                           tosu	equ	0xFFF
 21473                           tosh	equ	0xFFE
 21474                           tosl	equ	0xFFD
 21475                           pclatu	equ	0xFFB
 21476                           pclath	equ	0xFFA
 21477                           tblptru	equ	0xFF8
 21478                           tblptrh	equ	0xFF7
 21479                           tblptrl	equ	0xFF6
 21480                           tablat	equ	0xFF5
 21481                           prodh	equ	0xFF4
 21482                           prodl	equ	0xFF3
 21483                           intcon	equ	0xFF2
 21484                           indf0	equ	0xFEF
 21485                           postinc0	equ	0xFEE
 21486                           fsr0h	equ	0xFEA
 21487                           fsr0l	equ	0xFE9
 21488                           wreg	equ	0xFE8
 21489                           postdec1	equ	0xFE5
 21490                           fsr1h	equ	0xFE2
 21491                           fsr1l	equ	0xFE1
 21492                           indf2	equ	0xFDF
 21493                           postinc2	equ	0xFDE
 21494                           postdec2	equ	0xFDD
 21495                           fsr2h	equ	0xFDA
 21496                           fsr2l	equ	0xFD9
 21497                           status	equ	0xFD8
 21498                           
 21499 ;; *************** function ___lwtoft *****************
 21500 ;; Defined at:
 21501 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 21502 ;; Parameters:    Size  Location     Type
 21503 ;;  c               2    8[COMRAM] unsigned int 
 21504 ;; Auto vars:     Size  Location     Type
 21505 ;;		None
 21506 ;; Return value:  Size  Location     Type
 21507 ;;                  3    8[COMRAM] float 
 21508 ;; Registers used:
 21509 ;;		wreg, status,2, status,0, cstack
 21510 ;; Tracked objects:
 21511 ;;		On entry : 0/0
 21512 ;;		On exit  : 0/0
 21513 ;;		Unchanged: 0/0
 21514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21515 ;;      Params:         3       0       0       0       0       0       0
 21516 ;;      Locals:         0       0       0       0       0       0       0
 21517 ;;      Temps:          0       0       0       0       0       0       0
 21518 ;;      Totals:         3       0       0       0       0       0       0
 21519 ;;Total ram usage:        3 bytes
 21520 ;; Hardware stack levels used:    1
 21521 ;; Hardware stack levels required when called:    1
 21522 ;; This function calls:
 21523 ;;		___ftpack
 21524 ;; This function is called by:
 21525 ;;		_lerTransdutor
 21526 ;; This function uses a non-reentrant model
 21527 ;;
 21528                           
 21529                           	psect	text90
 21530  006DC4                     __ptext90:
 21531                           	opt stack 0
 21532  006DC4                     ___lwtoft:
 21533                           	opt stack 0
 21534  006DC4  FFFF               	dw	65535	; assembler added errata NOP
 21535                           
 21536                           ;incstack = 0
 21537  006DC6  C009  F001         	movff	___lwtoft@c,___ftpack@arg
 21538  006DCA  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 21539  006DCE  6A03               	clrf	___ftpack@arg+2,c
 21540  006DD0  0E8E               	movlw	142
 21541  006DD2  6E04               	movwf	___ftpack@exp,c
 21542  006DD4  0E00               	movlw	0
 21543  006DD6  6E05               	movwf	___ftpack@sign,c
 21544  006DD8  EC4D  F01E         	call	___ftpack	;wreg free
 21545  006DDC  C001  F009         	movff	?___ftpack,?___lwtoft
 21546  006DE0  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
 21547  006DE4  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
 21548  006DE8  0012               	return		;funcret
 21549  006DEA  FFFF               	dw	65535	; errata NOP
 21550  006DEC                     __end_of___lwtoft:
 21551                           	opt stack 0
 21552                           tosu	equ	0xFFF
 21553                           tosh	equ	0xFFE
 21554                           tosl	equ	0xFFD
 21555                           pclatu	equ	0xFFB
 21556                           pclath	equ	0xFFA
 21557                           tblptru	equ	0xFF8
 21558                           tblptrh	equ	0xFF7
 21559                           tblptrl	equ	0xFF6
 21560                           tablat	equ	0xFF5
 21561                           prodh	equ	0xFF4
 21562                           prodl	equ	0xFF3
 21563                           intcon	equ	0xFF2
 21564                           indf0	equ	0xFEF
 21565                           postinc0	equ	0xFEE
 21566                           fsr0h	equ	0xFEA
 21567                           fsr0l	equ	0xFE9
 21568                           wreg	equ	0xFE8
 21569                           postdec1	equ	0xFE5
 21570                           fsr1h	equ	0xFE2
 21571                           fsr1l	equ	0xFE1
 21572                           indf2	equ	0xFDF
 21573                           postinc2	equ	0xFDE
 21574                           postdec2	equ	0xFDD
 21575                           fsr2h	equ	0xFDA
 21576                           fsr2l	equ	0xFD9
 21577                           status	equ	0xFD8
 21578                           
 21579 ;; *************** function ___fttol *****************
 21580 ;; Defined at:
 21581 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 21582 ;; Parameters:    Size  Location     Type
 21583 ;;  f1              3   26[COMRAM] float 
 21584 ;; Auto vars:     Size  Location     Type
 21585 ;;  lval            4   36[COMRAM] unsigned long 
 21586 ;;  exp1            1   40[COMRAM] unsigned char 
 21587 ;;  sign1           1   35[COMRAM] unsigned char 
 21588 ;; Return value:  Size  Location     Type
 21589 ;;                  4   26[COMRAM] long 
 21590 ;; Registers used:
 21591 ;;		wreg, status,2, status,0
 21592 ;; Tracked objects:
 21593 ;;		On entry : 0/0
 21594 ;;		On exit  : 0/0
 21595 ;;		Unchanged: 0/0
 21596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21597 ;;      Params:         4       0       0       0       0       0       0
 21598 ;;      Locals:         6       0       0       0       0       0       0
 21599 ;;      Temps:          5       0       0       0       0       0       0
 21600 ;;      Totals:        15       0       0       0       0       0       0
 21601 ;;Total ram usage:       15 bytes
 21602 ;; Hardware stack levels used:    1
 21603 ;; This function calls:
 21604 ;;		Nothing
 21605 ;; This function is called by:
 21606 ;;		_lerTransdutor
 21607 ;; This function uses a non-reentrant model
 21608 ;;
 21609                           
 21610                           	psect	text91
 21611  0036C8                     __ptext91:
 21612                           	opt stack 0
 21613  0036C8                     ___fttol:
 21614                           	opt stack 0
 21615  0036C8  FFFF               	dw	65535	; assembler added errata NOP
 21616                           
 21617                           ;incstack = 0
 21618  0036CA  C01D  F01F         	movff	___fttol@f1+2,??___fttol
 21619  0036CE  6A20               	clrf	(??___fttol+1)& (0+255),c
 21620  0036D0  6A21               	clrf	(??___fttol+2)& (0+255),c
 21621  0036D2  341C               	rlcf	___fttol@f1+1,w,c
 21622  0036D4  361F               	rlcf	??___fttol& (0+255),f,c
 21623  0036D6  E301               	bnc	u666_41
 21624  0036D8  8020               	bsf	(??___fttol+1)& (0+255),0,c
 21625  0036DA                     u666_41:
 21626  0036DA  501F               	movf	??___fttol,w,c
 21627  0036DC  6E29               	movwf	___fttol@exp1,c
 21628  0036DE  5029               	movf	___fttol@exp1,w,c
 21629  0036E0  B4D8               	btfsc	status,2,c
 21630  0036E2  D039               	goto	i2u671_40
 21631  0036E4  0E17               	movlw	23
 21632  0036E6  6E1F               	movwf	??___fttol& (0+255),c
 21633  0036E8  C01B  F020         	movff	___fttol@f1,??___fttol+1
 21634  0036EC  C01C  F021         	movff	___fttol@f1+1,??___fttol+2
 21635  0036F0  C01D  F022         	movff	___fttol@f1+2,??___fttol+3
 21636  0036F4  281F               	incf	??___fttol,w,c
 21637  0036F6  6E23               	movwf	(??___fttol+4)& (0+255),c
 21638  0036F8  D005               	goto	i2u668_40
 21639  0036FA                     i2u668_45:
 21640  0036FA  FFFF               	dw	65535	; assembler added errata NOP
 21641  0036FC  90D8               	bcf	status,0,c
 21642  0036FE  3222               	rrcf	??___fttol+3,f,c
 21643  003700  3221               	rrcf	??___fttol+2,f,c
 21644  003702  3220               	rrcf	??___fttol+1,f,c
 21645  003704                     i2u668_40:
 21646  003704  FFFF               	dw	65535	; assembler added errata NOP
 21647  003706  2E23               	decfsz	(??___fttol+4)& (0+255),f,c
 21648  003708  D7F8               	goto	i2u668_45
 21649  00370A  5020               	movf	??___fttol+1,w,c
 21650  00370C  6E24               	movwf	___fttol@sign1,c
 21651  00370E  8E1C               	bsf	___fttol@f1+1,7,c
 21652  003710  0EFF               	movlw	255
 21653  003712  161B               	andwf	___fttol@f1,f,c
 21654  003714  0EFF               	movlw	255
 21655  003716  161C               	andwf	___fttol@f1+1,f,c
 21656  003718  0E00               	movlw	0
 21657  00371A  161D               	andwf	___fttol@f1+2,f,c
 21658  00371C  501B               	movf	___fttol@f1,w,c
 21659  00371E  6E25               	movwf	___fttol@lval,c
 21660  003720  501C               	movf	___fttol@f1+1,w,c
 21661  003722  6E26               	movwf	___fttol@lval+1,c
 21662  003724  501D               	movf	___fttol@f1+2,w,c
 21663  003726  6E27               	movwf	___fttol@lval+2,c
 21664  003728  6A28               	clrf	___fttol@lval+3,c
 21665  00372A  0E8E               	movlw	142
 21666  00372C  5E29               	subwf	___fttol@exp1,f,c
 21667  00372E  AE29               	btfss	___fttol@exp1,7,c
 21668  003730  D00E               	goto	i2l1438
 21669  003732  5029               	movf	___fttol@exp1,w,c
 21670  003734  0A80               	xorlw	128
 21671  003736  0F8F               	addlw	143
 21672  003738  A0D8               	btfss	status,0,c
 21673  00373A  D00D               	goto	i2u671_40
 21674  00373C  FFFF               	dw	65535	; assembler added errata NOP
 21675  00373E  90D8               	bcf	status,0,c
 21676  003740  3228               	rrcf	___fttol@lval+3,f,c
 21677  003742  3227               	rrcf	___fttol@lval+2,f,c
 21678  003744  3226               	rrcf	___fttol@lval+1,f,c
 21679  003746  3225               	rrcf	___fttol@lval,f,c
 21680  003748  3E29               	incfsz	___fttol@exp1,f,c
 21681  00374A  D7F8               	goto	i2l1439
 21682  00374C  D019               	goto	i2u672_40
 21683  00374E                     i2l1438:
 21684  00374E  FFFF               	dw	65535	; assembler added errata NOP
 21685  003750  0E17               	movlw	23
 21686  003752  6429               	cpfsgt	___fttol@exp1,c
 21687  003754  D011               	goto	i2l1444
 21688  003756                     i2u671_40:
 21689  003756  FFFF               	dw	65535	; assembler added errata NOP
 21690  003758  0E00               	movlw	0
 21691  00375A  6E1B               	movwf	?___fttol,c
 21692  00375C  0E00               	movlw	0
 21693  00375E  6E1C               	movwf	?___fttol+1,c
 21694  003760  0E00               	movlw	0
 21695  003762  6E1D               	movwf	?___fttol+2,c
 21696  003764  0E00               	movlw	0
 21697  003766  6E1E               	movwf	?___fttol+3,c
 21698  003768  D020               	goto	i2l6262
 21699  00376A  FFFF               	dw	65535	; assembler added errata NOP
 21700  00376C  90D8               	bcf	status,0,c
 21701  00376E  3625               	rlcf	___fttol@lval,f,c
 21702  003770  3626               	rlcf	___fttol@lval+1,f,c
 21703  003772  3627               	rlcf	___fttol@lval+2,f,c
 21704  003774  3628               	rlcf	___fttol@lval+3,f,c
 21705  003776  0629               	decf	___fttol@exp1,f,c
 21706  003778                     i2l1444:
 21707  003778  FFFF               	dw	65535	; assembler added errata NOP
 21708  00377A  5029               	movf	___fttol@exp1,w,c
 21709  00377C  A4D8               	btfss	status,2,c
 21710  00377E  D7F5               	goto	i2l1445
 21711  003780                     i2u672_40:
 21712  003780  FFFF               	dw	65535	; assembler added errata NOP
 21713  003782  5024               	movf	___fttol@sign1,w,c
 21714  003784  B4D8               	btfsc	status,2,c
 21715  003786  D008               	goto	i2l1447
 21716  003788  1E28               	comf	___fttol@lval+3,f,c
 21717  00378A  1E27               	comf	___fttol@lval+2,f,c
 21718  00378C  1E26               	comf	___fttol@lval+1,f,c
 21719  00378E  6C25               	negf	___fttol@lval,c
 21720  003790  0E00               	movlw	0
 21721  003792  2226               	addwfc	___fttol@lval+1,f,c
 21722  003794  2227               	addwfc	___fttol@lval+2,f,c
 21723  003796  2228               	addwfc	___fttol@lval+3,f,c
 21724  003798                     i2l1447:
 21725  003798  FFFF               	dw	65535	; assembler added errata NOP
 21726  00379A  C025  F01B         	movff	___fttol@lval,?___fttol
 21727  00379E  C026  F01C         	movff	___fttol@lval+1,?___fttol+1
 21728  0037A2  C027  F01D         	movff	___fttol@lval+2,?___fttol+2
 21729  0037A6  C028  F01E         	movff	___fttol@lval+3,?___fttol+3
 21730  0037AA                     i2l6262:
 21731  0037AA  FFFF               	dw	65535	; assembler added errata NOP
 21732  0037AC  0012               	return		;funcret
 21733  0037AE  FFFF               	dw	65535	; errata NOP
 21734  0037B0                     __end_of___fttol:
 21735                           	opt stack 0
 21736                           tosu	equ	0xFFF
 21737                           tosh	equ	0xFFE
 21738                           tosl	equ	0xFFD
 21739                           pclatu	equ	0xFFB
 21740                           pclath	equ	0xFFA
 21741                           tblptru	equ	0xFF8
 21742                           tblptrh	equ	0xFF7
 21743                           tblptrl	equ	0xFF6
 21744                           tablat	equ	0xFF5
 21745                           prodh	equ	0xFF4
 21746                           prodl	equ	0xFF3
 21747                           intcon	equ	0xFF2
 21748                           indf0	equ	0xFEF
 21749                           postinc0	equ	0xFEE
 21750                           fsr0h	equ	0xFEA
 21751                           fsr0l	equ	0xFE9
 21752                           wreg	equ	0xFE8
 21753                           postdec1	equ	0xFE5
 21754                           fsr1h	equ	0xFE2
 21755                           fsr1l	equ	0xFE1
 21756                           indf2	equ	0xFDF
 21757                           postinc2	equ	0xFDE
 21758                           postdec2	equ	0xFDD
 21759                           fsr2h	equ	0xFDA
 21760                           fsr2l	equ	0xFD9
 21761                           status	equ	0xFD8
 21762                           
 21763 ;; *************** function ___ftmul *****************
 21764 ;; Defined at:
 21765 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 21766 ;; Parameters:    Size  Location     Type
 21767 ;;  f1              3   11[COMRAM] float 
 21768 ;;  f2              3   14[COMRAM] float 
 21769 ;; Auto vars:     Size  Location     Type
 21770 ;;  f3_as_produc    3   21[COMRAM] unsigned um
 21771 ;;  sign            1   25[COMRAM] unsigned char 
 21772 ;;  cntr            1   24[COMRAM] unsigned char 
 21773 ;;  exp             1   20[COMRAM] unsigned char 
 21774 ;; Return value:  Size  Location     Type
 21775 ;;                  3   11[COMRAM] float 
 21776 ;; Registers used:
 21777 ;;		wreg, status,2, status,0, cstack
 21778 ;; Tracked objects:
 21779 ;;		On entry : 0/0
 21780 ;;		On exit  : 0/0
 21781 ;;		Unchanged: 0/0
 21782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21783 ;;      Params:         6       0       0       0       0       0       0
 21784 ;;      Locals:         6       0       0       0       0       0       0
 21785 ;;      Temps:          3       0       0       0       0       0       0
 21786 ;;      Totals:        15       0       0       0       0       0       0
 21787 ;;Total ram usage:       15 bytes
 21788 ;; Hardware stack levels used:    1
 21789 ;; Hardware stack levels required when called:    1
 21790 ;; This function calls:
 21791 ;;		___ftpack
 21792 ;; This function is called by:
 21793 ;;		_lerTransdutor
 21794 ;;		_map
 21795 ;; This function uses a non-reentrant model
 21796 ;;
 21797                           
 21798                           	psect	text92
 21799  0034E4                     __ptext92:
 21800                           	opt stack 0
 21801  0034E4                     ___ftmul:
 21802                           	opt stack 0
 21803  0034E4  FFFF               	dw	65535	; assembler added errata NOP
 21804                           
 21805                           ;incstack = 0
 21806  0034E6  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
 21807  0034EA  6A13               	clrf	(??___ftmul+1)& (0+255),c
 21808  0034EC  6A14               	clrf	(??___ftmul+2)& (0+255),c
 21809  0034EE  340D               	rlcf	___ftmul@f1+1,w,c
 21810  0034F0  3612               	rlcf	??___ftmul& (0+255),f,c
 21811  0034F2  E301               	bnc	u657_41
 21812  0034F4  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 21813  0034F6                     u657_41:
 21814  0034F6  5012               	movf	??___ftmul,w,c
 21815  0034F8  6E15               	movwf	___ftmul@exp,c
 21816  0034FA  5015               	movf	___ftmul@exp,w,c
 21817  0034FC  B4D8               	btfsc	status,2,c
 21818  0034FE  D00D               	goto	i2u660_40
 21819  003500  C011  F012         	movff	___ftmul@f2+2,??___ftmul
 21820  003504  6A13               	clrf	(??___ftmul+1)& (0+255),c
 21821  003506  6A14               	clrf	(??___ftmul+2)& (0+255),c
 21822  003508  3410               	rlcf	___ftmul@f2+1,w,c
 21823  00350A  3612               	rlcf	??___ftmul& (0+255),f,c
 21824  00350C  E301               	bnc	u659_41
 21825  00350E  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 21826  003510                     u659_41:
 21827  003510  5012               	movf	??___ftmul,w,c
 21828  003512  6E1A               	movwf	___ftmul@sign,c
 21829  003514  501A               	movf	___ftmul@sign,w,c
 21830  003516  A4D8               	btfss	status,2,c
 21831  003518  D008               	goto	i2l1417
 21832  00351A                     i2u660_40:
 21833  00351A  FFFF               	dw	65535	; assembler added errata NOP
 21834  00351C  0E00               	movlw	0
 21835  00351E  6E0C               	movwf	?___ftmul,c
 21836  003520  0E00               	movlw	0
 21837  003522  6E0D               	movwf	?___ftmul+1,c
 21838  003524  0E00               	movlw	0
 21839  003526  6E0E               	movwf	?___ftmul+2,c
 21840  003528  D056               	goto	i2l6198
 21841  00352A                     i2l1417:
 21842  00352A  FFFF               	dw	65535	; assembler added errata NOP
 21843  00352C  501A               	movf	___ftmul@sign,w,c
 21844  00352E  0F7B               	addlw	123
 21845  003530  2615               	addwf	___ftmul@exp,f,c
 21846  003532  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
 21847  003536  5011               	movf	___ftmul@f2+2,w,c
 21848  003538  1A1A               	xorwf	___ftmul@sign,f,c
 21849  00353A  0E80               	movlw	128
 21850  00353C  161A               	andwf	___ftmul@sign,f,c
 21851  00353E  8E0D               	bsf	___ftmul@f1+1,7,c
 21852  003540  8E10               	bsf	___ftmul@f2+1,7,c
 21853  003542  0EFF               	movlw	255
 21854  003544  160F               	andwf	___ftmul@f2,f,c
 21855  003546  0EFF               	movlw	255
 21856  003548  1610               	andwf	___ftmul@f2+1,f,c
 21857  00354A  0E00               	movlw	0
 21858  00354C  1611               	andwf	___ftmul@f2+2,f,c
 21859  00354E  0E00               	movlw	0
 21860  003550  6E16               	movwf	___ftmul@f3_as_product,c
 21861  003552  0E00               	movlw	0
 21862  003554  6E17               	movwf	___ftmul@f3_as_product+1,c
 21863  003556  0E00               	movlw	0
 21864  003558  6E18               	movwf	___ftmul@f3_as_product+2,c
 21865  00355A  0E07               	movlw	7
 21866  00355C  6E19               	movwf	___ftmul@cntr,c
 21867  00355E  FFFF               	dw	65535	; assembler added errata NOP
 21868  003560  A00C               	btfss	___ftmul@f1,0,c
 21869  003562  D006               	goto	i2l1419
 21870  003564  500F               	movf	___ftmul@f2,w,c
 21871  003566  2616               	addwf	___ftmul@f3_as_product,f,c
 21872  003568  5010               	movf	___ftmul@f2+1,w,c
 21873  00356A  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 21874  00356C  5011               	movf	___ftmul@f2+2,w,c
 21875  00356E  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 21876  003570                     i2l1419:
 21877  003570  FFFF               	dw	65535	; assembler added errata NOP
 21878  003572  90D8               	bcf	status,0,c
 21879  003574  320E               	rrcf	___ftmul@f1+2,f,c
 21880  003576  320D               	rrcf	___ftmul@f1+1,f,c
 21881  003578  320C               	rrcf	___ftmul@f1,f,c
 21882  00357A  90D8               	bcf	status,0,c
 21883  00357C  360F               	rlcf	___ftmul@f2,f,c
 21884  00357E  3610               	rlcf	___ftmul@f2+1,f,c
 21885  003580  3611               	rlcf	___ftmul@f2+2,f,c
 21886  003582  2E19               	decfsz	___ftmul@cntr,f,c
 21887  003584  D7EC               	goto	i2l1418
 21888  003586  0E09               	movlw	9
 21889  003588  6E19               	movwf	___ftmul@cntr,c
 21890  00358A  FFFF               	dw	65535	; assembler added errata NOP
 21891  00358C  A00C               	btfss	___ftmul@f1,0,c
 21892  00358E  D006               	goto	i2l1422
 21893  003590  500F               	movf	___ftmul@f2,w,c
 21894  003592  2616               	addwf	___ftmul@f3_as_product,f,c
 21895  003594  5010               	movf	___ftmul@f2+1,w,c
 21896  003596  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 21897  003598  5011               	movf	___ftmul@f2+2,w,c
 21898  00359A  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 21899  00359C                     i2l1422:
 21900  00359C  FFFF               	dw	65535	; assembler added errata NOP
 21901  00359E  90D8               	bcf	status,0,c
 21902  0035A0  320E               	rrcf	___ftmul@f1+2,f,c
 21903  0035A2  320D               	rrcf	___ftmul@f1+1,f,c
 21904  0035A4  320C               	rrcf	___ftmul@f1,f,c
 21905  0035A6  90D8               	bcf	status,0,c
 21906  0035A8  3218               	rrcf	___ftmul@f3_as_product+2,f,c
 21907  0035AA  3217               	rrcf	___ftmul@f3_as_product+1,f,c
 21908  0035AC  3216               	rrcf	___ftmul@f3_as_product,f,c
 21909  0035AE  2E19               	decfsz	___ftmul@cntr,f,c
 21910  0035B0  D7EC               	goto	i2l1421
 21911  0035B2  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 21912  0035B6  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 21913  0035BA  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 21914  0035BE  C015  F004         	movff	___ftmul@exp,___ftpack@exp
 21915  0035C2  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
 21916  0035C6  EC4D  F01E         	call	___ftpack	;wreg free
 21917  0035CA  C001  F00C         	movff	?___ftpack,?___ftmul
 21918  0035CE  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
 21919  0035D2  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
 21920  0035D6                     i2l6198:
 21921  0035D6  FFFF               	dw	65535	; assembler added errata NOP
 21922  0035D8  0012               	return		;funcret
 21923  0035DA  FFFF               	dw	65535	; errata NOP
 21924  0035DC                     __end_of___ftmul:
 21925                           	opt stack 0
 21926                           tosu	equ	0xFFF
 21927                           tosh	equ	0xFFE
 21928                           tosl	equ	0xFFD
 21929                           pclatu	equ	0xFFB
 21930                           pclath	equ	0xFFA
 21931                           tblptru	equ	0xFF8
 21932                           tblptrh	equ	0xFF7
 21933                           tblptrl	equ	0xFF6
 21934                           tablat	equ	0xFF5
 21935                           prodh	equ	0xFF4
 21936                           prodl	equ	0xFF3
 21937                           intcon	equ	0xFF2
 21938                           indf0	equ	0xFEF
 21939                           postinc0	equ	0xFEE
 21940                           fsr0h	equ	0xFEA
 21941                           fsr0l	equ	0xFE9
 21942                           wreg	equ	0xFE8
 21943                           postdec1	equ	0xFE5
 21944                           fsr1h	equ	0xFE2
 21945                           fsr1l	equ	0xFE1
 21946                           indf2	equ	0xFDF
 21947                           postinc2	equ	0xFDE
 21948                           postdec2	equ	0xFDD
 21949                           fsr2h	equ	0xFDA
 21950                           fsr2l	equ	0xFD9
 21951                           status	equ	0xFD8
 21952                           
 21953 ;; *************** function ___ftge *****************
 21954 ;; Defined at:
 21955 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 21956 ;; Parameters:    Size  Location     Type
 21957 ;;  ff1             3    0[COMRAM] float 
 21958 ;;  ff2             3    3[COMRAM] float 
 21959 ;; Auto vars:     Size  Location     Type
 21960 ;;		None
 21961 ;; Return value:  Size  Location     Type
 21962 ;;		None               void
 21963 ;; Registers used:
 21964 ;;		wreg, status,2, status,0
 21965 ;; Tracked objects:
 21966 ;;		On entry : 0/0
 21967 ;;		On exit  : 0/0
 21968 ;;		Unchanged: 0/0
 21969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21970 ;;      Params:         6       0       0       0       0       0       0
 21971 ;;      Locals:         0       0       0       0       0       0       0
 21972 ;;      Temps:          3       0       0       0       0       0       0
 21973 ;;      Totals:         9       0       0       0       0       0       0
 21974 ;;Total ram usage:        9 bytes
 21975 ;; Hardware stack levels used:    1
 21976 ;; This function calls:
 21977 ;;		Nothing
 21978 ;; This function is called by:
 21979 ;;		_lerTransdutor
 21980 ;; This function uses a non-reentrant model
 21981 ;;
 21982                           
 21983                           	psect	text93
 21984  003D5E                     __ptext93:
 21985                           	opt stack 0
 21986  003D5E                     ___ftge:
 21987                           	opt stack 0
 21988  003D5E  FFFF               	dw	65535	; assembler added errata NOP
 21989                           
 21990                           ;incstack = 0
 21991  003D60  AE03               	btfss	___ftge@ff1+2,7,c
 21992  003D62  D016               	goto	i2l1408
 21993  003D64  C001  F007         	movff	___ftge@ff1,??___ftge
 21994  003D68  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 21995  003D6C  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 21996  003D70  1E07               	comf	??___ftge,f,c
 21997  003D72  1E08               	comf	??___ftge+1,f,c
 21998  003D74  1E09               	comf	??___ftge+2,f,c
 21999  003D76  2A07               	incf	??___ftge,f,c
 22000  003D78  0E00               	movlw	0
 22001  003D7A  2208               	addwfc	??___ftge+1,f,c
 22002  003D7C  2209               	addwfc	??___ftge+2,f,c
 22003  003D7E  0E00               	movlw	0
 22004  003D80  2407               	addwf	??___ftge,w,c
 22005  003D82  6E01               	movwf	___ftge@ff1,c
 22006  003D84  0E00               	movlw	0
 22007  003D86  2008               	addwfc	??___ftge+1,w,c
 22008  003D88  6E02               	movwf	___ftge@ff1+1,c
 22009  003D8A  0E80               	movlw	128
 22010  003D8C  2009               	addwfc	??___ftge+2,w,c
 22011  003D8E  6E03               	movwf	___ftge@ff1+2,c
 22012  003D90                     i2l1408:
 22013  003D90  FFFF               	dw	65535	; assembler added errata NOP
 22014  003D92  AE06               	btfss	___ftge@ff2+2,7,c
 22015  003D94  D016               	goto	i2l1409
 22016  003D96  C004  F007         	movff	___ftge@ff2,??___ftge
 22017  003D9A  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 22018  003D9E  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 22019  003DA2  1E07               	comf	??___ftge,f,c
 22020  003DA4  1E08               	comf	??___ftge+1,f,c
 22021  003DA6  1E09               	comf	??___ftge+2,f,c
 22022  003DA8  2A07               	incf	??___ftge,f,c
 22023  003DAA  0E00               	movlw	0
 22024  003DAC  2208               	addwfc	??___ftge+1,f,c
 22025  003DAE  2209               	addwfc	??___ftge+2,f,c
 22026  003DB0  0E00               	movlw	0
 22027  003DB2  2407               	addwf	??___ftge,w,c
 22028  003DB4  6E04               	movwf	___ftge@ff2,c
 22029  003DB6  0E00               	movlw	0
 22030  003DB8  2008               	addwfc	??___ftge+1,w,c
 22031  003DBA  6E05               	movwf	___ftge@ff2+1,c
 22032  003DBC  0E80               	movlw	128
 22033  003DBE  2009               	addwfc	??___ftge+2,w,c
 22034  003DC0  6E06               	movwf	___ftge@ff2+2,c
 22035  003DC2                     i2l1409:
 22036  003DC2  FFFF               	dw	65535	; assembler added errata NOP
 22037  003DC4  0E00               	movlw	0
 22038  003DC6  1A01               	xorwf	___ftge@ff1,f,c
 22039  003DC8  0E00               	movlw	0
 22040  003DCA  1A02               	xorwf	___ftge@ff1+1,f,c
 22041  003DCC  0E80               	movlw	128
 22042  003DCE  1A03               	xorwf	___ftge@ff1+2,f,c
 22043  003DD0  0E00               	movlw	0
 22044  003DD2  1A04               	xorwf	___ftge@ff2,f,c
 22045  003DD4  0E00               	movlw	0
 22046  003DD6  1A05               	xorwf	___ftge@ff2+1,f,c
 22047  003DD8  0E80               	movlw	128
 22048  003DDA  1A06               	xorwf	___ftge@ff2+2,f,c
 22049  003DDC  5004               	movf	___ftge@ff2,w,c
 22050  003DDE  5C01               	subwf	___ftge@ff1,w,c
 22051  003DE0  5005               	movf	___ftge@ff2+1,w,c
 22052  003DE2  5802               	subwfb	___ftge@ff1+1,w,c
 22053  003DE4  5006               	movf	___ftge@ff2+2,w,c
 22054  003DE6  5803               	subwfb	___ftge@ff1+2,w,c
 22055  003DE8  B0D8               	btfsc	status,0,c
 22056  003DEA  D002               	goto	i2l4832
 22057  003DEC  90D8               	bcf	status,0,c
 22058  003DEE  D002               	goto	i2l4834
 22059  003DF0                     i2l4832:
 22060  003DF0  FFFF               	dw	65535	; assembler added errata NOP
 22061  003DF2  80D8               	bsf	status,0,c
 22062  003DF4                     i2l4834:
 22063  003DF4  FFFF               	dw	65535	; assembler added errata NOP
 22064  003DF6  0012               	return		;funcret
 22065  003DF8  FFFF               	dw	65535	; errata NOP
 22066  003DFA                     __end_of___ftge:
 22067                           	opt stack 0
 22068                           tosu	equ	0xFFF
 22069                           tosh	equ	0xFFE
 22070                           tosl	equ	0xFFD
 22071                           pclatu	equ	0xFFB
 22072                           pclath	equ	0xFFA
 22073                           tblptru	equ	0xFF8
 22074                           tblptrh	equ	0xFF7
 22075                           tblptrl	equ	0xFF6
 22076                           tablat	equ	0xFF5
 22077                           prodh	equ	0xFF4
 22078                           prodl	equ	0xFF3
 22079                           intcon	equ	0xFF2
 22080                           indf0	equ	0xFEF
 22081                           postinc0	equ	0xFEE
 22082                           fsr0h	equ	0xFEA
 22083                           fsr0l	equ	0xFE9
 22084                           wreg	equ	0xFE8
 22085                           postdec1	equ	0xFE5
 22086                           fsr1h	equ	0xFE2
 22087                           fsr1l	equ	0xFE1
 22088                           indf2	equ	0xFDF
 22089                           postinc2	equ	0xFDE
 22090                           postdec2	equ	0xFDD
 22091                           fsr2h	equ	0xFDA
 22092                           fsr2l	equ	0xFD9
 22093                           status	equ	0xFD8
 22094                           
 22095 ;; *************** function ___ftdiv *****************
 22096 ;; Defined at:
 22097 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 22098 ;; Parameters:    Size  Location     Type
 22099 ;;  f1              3   26[COMRAM] float 
 22100 ;;  f2              3   29[COMRAM] float 
 22101 ;; Auto vars:     Size  Location     Type
 22102 ;;  f3              3   36[COMRAM] float 
 22103 ;;  sign            1   40[COMRAM] unsigned char 
 22104 ;;  exp             1   39[COMRAM] unsigned char 
 22105 ;;  cntr            1   35[COMRAM] unsigned char 
 22106 ;; Return value:  Size  Location     Type
 22107 ;;                  3   26[COMRAM] float 
 22108 ;; Registers used:
 22109 ;;		wreg, status,2, status,0, cstack
 22110 ;; Tracked objects:
 22111 ;;		On entry : 0/0
 22112 ;;		On exit  : 0/0
 22113 ;;		Unchanged: 0/0
 22114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22115 ;;      Params:         6       0       0       0       0       0       0
 22116 ;;      Locals:         6       0       0       0       0       0       0
 22117 ;;      Temps:          3       0       0       0       0       0       0
 22118 ;;      Totals:        15       0       0       0       0       0       0
 22119 ;;Total ram usage:       15 bytes
 22120 ;; Hardware stack levels used:    1
 22121 ;; Hardware stack levels required when called:    1
 22122 ;; This function calls:
 22123 ;;		___ftpack
 22124 ;; This function is called by:
 22125 ;;		_lerTransdutor
 22126 ;;		_map
 22127 ;; This function uses a non-reentrant model
 22128 ;;
 22129                           
 22130                           	psect	text94
 22131  0037B0                     __ptext94:
 22132                           	opt stack 0
 22133  0037B0                     ___ftdiv:
 22134                           	opt stack 0
 22135  0037B0  FFFF               	dw	65535	; assembler added errata NOP
 22136                           
 22137                           ;incstack = 0
 22138  0037B2  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
 22139  0037B6  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 22140  0037B8  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 22141  0037BA  341C               	rlcf	___ftdiv@f1+1,w,c
 22142  0037BC  3621               	rlcf	??___ftdiv& (0+255),f,c
 22143  0037BE  E301               	bnc	u652_41
 22144  0037C0  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 22145  0037C2                     u652_41:
 22146  0037C2  5021               	movf	??___ftdiv,w,c
 22147  0037C4  6E28               	movwf	___ftdiv@exp,c
 22148  0037C6  5028               	movf	___ftdiv@exp,w,c
 22149  0037C8  B4D8               	btfsc	status,2,c
 22150  0037CA  D00D               	goto	i2u655_40
 22151  0037CC  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
 22152  0037D0  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 22153  0037D2  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 22154  0037D4  341F               	rlcf	___ftdiv@f2+1,w,c
 22155  0037D6  3621               	rlcf	??___ftdiv& (0+255),f,c
 22156  0037D8  E301               	bnc	u654_41
 22157  0037DA  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 22158  0037DC                     u654_41:
 22159  0037DC  5021               	movf	??___ftdiv,w,c
 22160  0037DE  6E29               	movwf	___ftdiv@sign,c
 22161  0037E0  5029               	movf	___ftdiv@sign,w,c
 22162  0037E2  A4D8               	btfss	status,2,c
 22163  0037E4  D008               	goto	i2l1402
 22164  0037E6                     i2u655_40:
 22165  0037E6  FFFF               	dw	65535	; assembler added errata NOP
 22166  0037E8  0E00               	movlw	0
 22167  0037EA  6E1B               	movwf	?___ftdiv,c
 22168  0037EC  0E00               	movlw	0
 22169  0037EE  6E1C               	movwf	?___ftdiv+1,c
 22170  0037F0  0E00               	movlw	0
 22171  0037F2  6E1D               	movwf	?___ftdiv+2,c
 22172  0037F4  D04D               	goto	i2l6150
 22173  0037F6                     i2l1402:
 22174  0037F6  FFFF               	dw	65535	; assembler added errata NOP
 22175  0037F8  0E00               	movlw	0
 22176  0037FA  6E25               	movwf	___ftdiv@f3,c
 22177  0037FC  0E00               	movlw	0
 22178  0037FE  6E26               	movwf	___ftdiv@f3+1,c
 22179  003800  0E00               	movlw	0
 22180  003802  6E27               	movwf	___ftdiv@f3+2,c
 22181  003804  5029               	movf	___ftdiv@sign,w,c
 22182  003806  0F89               	addlw	137
 22183  003808  5E28               	subwf	___ftdiv@exp,f,c
 22184  00380A  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
 22185  00380E  5020               	movf	___ftdiv@f2+2,w,c
 22186  003810  1A29               	xorwf	___ftdiv@sign,f,c
 22187  003812  0E80               	movlw	128
 22188  003814  1629               	andwf	___ftdiv@sign,f,c
 22189  003816  8E1C               	bsf	___ftdiv@f1+1,7,c
 22190  003818  0EFF               	movlw	255
 22191  00381A  161B               	andwf	___ftdiv@f1,f,c
 22192  00381C  0EFF               	movlw	255
 22193  00381E  161C               	andwf	___ftdiv@f1+1,f,c
 22194  003820  0E00               	movlw	0
 22195  003822  161D               	andwf	___ftdiv@f1+2,f,c
 22196  003824  8E1F               	bsf	___ftdiv@f2+1,7,c
 22197  003826  0EFF               	movlw	255
 22198  003828  161E               	andwf	___ftdiv@f2,f,c
 22199  00382A  0EFF               	movlw	255
 22200  00382C  161F               	andwf	___ftdiv@f2+1,f,c
 22201  00382E  0E00               	movlw	0
 22202  003830  1620               	andwf	___ftdiv@f2+2,f,c
 22203  003832  0E18               	movlw	24
 22204  003834  6E24               	movwf	___ftdiv@cntr,c
 22205  003836  FFFF               	dw	65535	; assembler added errata NOP
 22206  003838  90D8               	bcf	status,0,c
 22207  00383A  3625               	rlcf	___ftdiv@f3,f,c
 22208  00383C  3626               	rlcf	___ftdiv@f3+1,f,c
 22209  00383E  3627               	rlcf	___ftdiv@f3+2,f,c
 22210  003840  501E               	movf	___ftdiv@f2,w,c
 22211  003842  5C1B               	subwf	___ftdiv@f1,w,c
 22212  003844  501F               	movf	___ftdiv@f2+1,w,c
 22213  003846  581C               	subwfb	___ftdiv@f1+1,w,c
 22214  003848  5020               	movf	___ftdiv@f2+2,w,c
 22215  00384A  581D               	subwfb	___ftdiv@f1+2,w,c
 22216  00384C  A0D8               	btfss	status,0,c
 22217  00384E  D007               	goto	i2l1404
 22218  003850  501E               	movf	___ftdiv@f2,w,c
 22219  003852  5E1B               	subwf	___ftdiv@f1,f,c
 22220  003854  501F               	movf	___ftdiv@f2+1,w,c
 22221  003856  5A1C               	subwfb	___ftdiv@f1+1,f,c
 22222  003858  5020               	movf	___ftdiv@f2+2,w,c
 22223  00385A  5A1D               	subwfb	___ftdiv@f1+2,f,c
 22224  00385C  8025               	bsf	___ftdiv@f3,0,c
 22225  00385E                     i2l1404:
 22226  00385E  FFFF               	dw	65535	; assembler added errata NOP
 22227  003860  90D8               	bcf	status,0,c
 22228  003862  361B               	rlcf	___ftdiv@f1,f,c
 22229  003864  361C               	rlcf	___ftdiv@f1+1,f,c
 22230  003866  361D               	rlcf	___ftdiv@f1+2,f,c
 22231  003868  2E24               	decfsz	___ftdiv@cntr,f,c
 22232  00386A  D7E5               	goto	i2l1403
 22233  00386C  C025  F001         	movff	___ftdiv@f3,___ftpack@arg
 22234  003870  C026  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 22235  003874  C027  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 22236  003878  C028  F004         	movff	___ftdiv@exp,___ftpack@exp
 22237  00387C  C029  F005         	movff	___ftdiv@sign,___ftpack@sign
 22238  003880  EC4D  F01E         	call	___ftpack	;wreg free
 22239  003884  C001  F01B         	movff	?___ftpack,?___ftdiv
 22240  003888  C002  F01C         	movff	?___ftpack+1,?___ftdiv+1
 22241  00388C  C003  F01D         	movff	?___ftpack+2,?___ftdiv+2
 22242  003890                     i2l6150:
 22243  003890  FFFF               	dw	65535	; assembler added errata NOP
 22244  003892  0012               	return		;funcret
 22245  003894  FFFF               	dw	65535	; errata NOP
 22246  003896                     __end_of___ftdiv:
 22247                           	opt stack 0
 22248                           tosu	equ	0xFFF
 22249                           tosh	equ	0xFFE
 22250                           tosl	equ	0xFFD
 22251                           pclatu	equ	0xFFB
 22252                           pclath	equ	0xFFA
 22253                           tblptru	equ	0xFF8
 22254                           tblptrh	equ	0xFF7
 22255                           tblptrl	equ	0xFF6
 22256                           tablat	equ	0xFF5
 22257                           prodh	equ	0xFF4
 22258                           prodl	equ	0xFF3
 22259                           intcon	equ	0xFF2
 22260                           indf0	equ	0xFEF
 22261                           postinc0	equ	0xFEE
 22262                           fsr0h	equ	0xFEA
 22263                           fsr0l	equ	0xFE9
 22264                           wreg	equ	0xFE8
 22265                           postdec1	equ	0xFE5
 22266                           fsr1h	equ	0xFE2
 22267                           fsr1l	equ	0xFE1
 22268                           indf2	equ	0xFDF
 22269                           postinc2	equ	0xFDE
 22270                           postdec2	equ	0xFDD
 22271                           fsr2h	equ	0xFDA
 22272                           fsr2l	equ	0xFD9
 22273                           status	equ	0xFD8
 22274                           
 22275 ;; *************** function ___ftadd *****************
 22276 ;; Defined at:
 22277 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 22278 ;; Parameters:    Size  Location     Type
 22279 ;;  f1              3   26[COMRAM] float 
 22280 ;;  f2              3   29[COMRAM] float 
 22281 ;; Auto vars:     Size  Location     Type
 22282 ;;  exp1            1   37[COMRAM] unsigned char 
 22283 ;;  exp2            1   36[COMRAM] unsigned char 
 22284 ;;  sign            1   35[COMRAM] unsigned char 
 22285 ;; Return value:  Size  Location     Type
 22286 ;;                  3   26[COMRAM] float 
 22287 ;; Registers used:
 22288 ;;		wreg, status,2, status,0, cstack
 22289 ;; Tracked objects:
 22290 ;;		On entry : 0/0
 22291 ;;		On exit  : 0/0
 22292 ;;		Unchanged: 0/0
 22293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22294 ;;      Params:         6       0       0       0       0       0       0
 22295 ;;      Locals:         3       0       0       0       0       0       0
 22296 ;;      Temps:          3       0       0       0       0       0       0
 22297 ;;      Totals:        12       0       0       0       0       0       0
 22298 ;;Total ram usage:       12 bytes
 22299 ;; Hardware stack levels used:    1
 22300 ;; Hardware stack levels required when called:    1
 22301 ;; This function calls:
 22302 ;;		___ftpack
 22303 ;; This function is called by:
 22304 ;;		_lerTransdutor
 22305 ;;		_map
 22306 ;; This function uses a non-reentrant model
 22307 ;;
 22308                           
 22309                           	psect	text95
 22310  0027C6                     __ptext95:
 22311                           	opt stack 0
 22312  0027C6                     ___ftadd:
 22313                           	opt stack 0
 22314  0027C6  FFFF               	dw	65535	; assembler added errata NOP
 22315                           
 22316                           ;incstack = 0
 22317  0027C8  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
 22318  0027CC  6A22               	clrf	(??___ftadd+1)& (0+255),c
 22319  0027CE  6A23               	clrf	(??___ftadd+2)& (0+255),c
 22320  0027D0  341C               	rlcf	___ftadd@f1+1,w,c
 22321  0027D2  3621               	rlcf	??___ftadd& (0+255),f,c
 22322  0027D4  E301               	bnc	u631_41
 22323  0027D6  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 22324  0027D8                     u631_41:
 22325  0027D8  5021               	movf	??___ftadd,w,c
 22326  0027DA  6E26               	movwf	___ftadd@exp1,c
 22327  0027DC  C020  F021         	movff	___ftadd@f2+2,??___ftadd
 22328  0027E0  6A22               	clrf	(??___ftadd+1)& (0+255),c
 22329  0027E2  6A23               	clrf	(??___ftadd+2)& (0+255),c
 22330  0027E4  341F               	rlcf	___ftadd@f2+1,w,c
 22331  0027E6  3621               	rlcf	??___ftadd& (0+255),f,c
 22332  0027E8  E301               	bnc	u632_41
 22333  0027EA  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 22334  0027EC                     u632_41:
 22335  0027EC  5021               	movf	??___ftadd,w,c
 22336  0027EE  6E25               	movwf	___ftadd@exp2,c
 22337  0027F0  5026               	movf	___ftadd@exp1,w,c
 22338  0027F2  B4D8               	btfsc	status,2,c
 22339  0027F4  D00B               	goto	i2u635_40
 22340  0027F6  5025               	movf	___ftadd@exp2,w,c
 22341  0027F8  5C26               	subwf	___ftadd@exp1,w,c
 22342  0027FA  B0D8               	btfsc	status,0,c
 22343  0027FC  D00F               	goto	i2l1367
 22344  0027FE  5026               	movf	___ftadd@exp1,w,c
 22345  002800  0800               	sublw	0
 22346  002802  2425               	addwf	___ftadd@exp2,w,c
 22347  002804  6E21               	movwf	??___ftadd& (0+255),c
 22348  002806  0E18               	movlw	24
 22349  002808  6421               	cpfsgt	??___ftadd,c
 22350  00280A  D008               	goto	i2l1367
 22351  00280C                     i2u635_40:
 22352  00280C  FFFF               	dw	65535	; assembler added errata NOP
 22353  00280E  C01E  F01B         	movff	___ftadd@f2,?___ftadd
 22354  002812  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
 22355  002816  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
 22356  00281A  D0BA               	goto	i2l6104
 22357  00281C                     i2l1367:
 22358  00281C  FFFF               	dw	65535	; assembler added errata NOP
 22359  00281E  5025               	movf	___ftadd@exp2,w,c
 22360  002820  B4D8               	btfsc	status,2,c
 22361  002822  D00B               	goto	i2u638_40
 22362  002824  5026               	movf	___ftadd@exp1,w,c
 22363  002826  5C25               	subwf	___ftadd@exp2,w,c
 22364  002828  B0D8               	btfsc	status,0,c
 22365  00282A  D00F               	goto	i2l1371
 22366  00282C  5025               	movf	___ftadd@exp2,w,c
 22367  00282E  0800               	sublw	0
 22368  002830  2426               	addwf	___ftadd@exp1,w,c
 22369  002832  6E21               	movwf	??___ftadd& (0+255),c
 22370  002834  0E18               	movlw	24
 22371  002836  6421               	cpfsgt	??___ftadd,c
 22372  002838  D008               	goto	i2l1371
 22373  00283A                     i2u638_40:
 22374  00283A  FFFF               	dw	65535	; assembler added errata NOP
 22375  00283C  C01B  F01B         	movff	___ftadd@f1,?___ftadd
 22376  002840  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
 22377  002844  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
 22378  002848  D0A3               	goto	i2l6104
 22379  00284A                     i2l1371:
 22380  00284A  FFFF               	dw	65535	; assembler added errata NOP
 22381  00284C  0E06               	movlw	6
 22382  00284E  6E24               	movwf	___ftadd@sign,c
 22383  002850  BE1D               	btfsc	___ftadd@f1+2,7,c
 22384  002852  8E24               	bsf	___ftadd@sign,7,c
 22385  002854  BE20               	btfsc	___ftadd@f2+2,7,c
 22386  002856  8C24               	bsf	___ftadd@sign,6,c
 22387  002858  8E1C               	bsf	___ftadd@f1+1,7,c
 22388  00285A  0EFF               	movlw	255
 22389  00285C  161B               	andwf	___ftadd@f1,f,c
 22390  00285E  0EFF               	movlw	255
 22391  002860  161C               	andwf	___ftadd@f1+1,f,c
 22392  002862  0E00               	movlw	0
 22393  002864  161D               	andwf	___ftadd@f1+2,f,c
 22394  002866  8E1F               	bsf	___ftadd@f2+1,7,c
 22395  002868  0EFF               	movlw	255
 22396  00286A  161E               	andwf	___ftadd@f2,f,c
 22397  00286C  0EFF               	movlw	255
 22398  00286E  161F               	andwf	___ftadd@f2+1,f,c
 22399  002870  0E00               	movlw	0
 22400  002872  1620               	andwf	___ftadd@f2+2,f,c
 22401  002874  5025               	movf	___ftadd@exp2,w,c
 22402  002876  5C26               	subwf	___ftadd@exp1,w,c
 22403  002878  B0D8               	btfsc	status,0,c
 22404  00287A  D01E               	goto	i2l1376
 22405  00287C                     i2u641_40:
 22406  00287C  FFFF               	dw	65535	; assembler added errata NOP
 22407  00287E  90D8               	bcf	status,0,c
 22408  002880  361E               	rlcf	___ftadd@f2,f,c
 22409  002882  361F               	rlcf	___ftadd@f2+1,f,c
 22410  002884  3620               	rlcf	___ftadd@f2+2,f,c
 22411  002886  0625               	decf	___ftadd@exp2,f,c
 22412  002888  5026               	movf	___ftadd@exp1,w,c
 22413  00288A  1825               	xorwf	___ftadd@exp2,w,c
 22414  00288C  B4D8               	btfsc	status,2,c
 22415  00288E  D00E               	goto	i2l1381
 22416  002890  0624               	decf	___ftadd@sign,f,c
 22417  002892  C024  F021         	movff	___ftadd@sign,??___ftadd
 22418  002896  0E07               	movlw	7
 22419  002898  1621               	andwf	??___ftadd,f,c
 22420  00289A  B4D8               	btfsc	status,2,c
 22421  00289C  D007               	goto	i2l1381
 22422  00289E  D7EE               	goto	i2u641_40
 22423  0028A0  FFFF               	dw	65535	; assembler added errata NOP
 22424  0028A2  90D8               	bcf	status,0,c
 22425  0028A4  321D               	rrcf	___ftadd@f1+2,f,c
 22426  0028A6  321C               	rrcf	___ftadd@f1+1,f,c
 22427  0028A8  321B               	rrcf	___ftadd@f1,f,c
 22428  0028AA  2A26               	incf	___ftadd@exp1,f,c
 22429  0028AC                     i2l1381:
 22430  0028AC  FFFF               	dw	65535	; assembler added errata NOP
 22431  0028AE  5025               	movf	___ftadd@exp2,w,c
 22432  0028B0  1826               	xorwf	___ftadd@exp1,w,c
 22433  0028B2  B4D8               	btfsc	status,2,c
 22434  0028B4  D023               	goto	i2u648_40
 22435  0028B6  D7F4               	goto	i2l1382
 22436  0028B8                     i2l1376:
 22437  0028B8  FFFF               	dw	65535	; assembler added errata NOP
 22438  0028BA  5026               	movf	___ftadd@exp1,w,c
 22439  0028BC  5C25               	subwf	___ftadd@exp2,w,c
 22440  0028BE  B0D8               	btfsc	status,0,c
 22441  0028C0  D01D               	goto	i2u648_40
 22442  0028C2                     i2u645_40:
 22443  0028C2  FFFF               	dw	65535	; assembler added errata NOP
 22444  0028C4  90D8               	bcf	status,0,c
 22445  0028C6  361B               	rlcf	___ftadd@f1,f,c
 22446  0028C8  361C               	rlcf	___ftadd@f1+1,f,c
 22447  0028CA  361D               	rlcf	___ftadd@f1+2,f,c
 22448  0028CC  0626               	decf	___ftadd@exp1,f,c
 22449  0028CE  5026               	movf	___ftadd@exp1,w,c
 22450  0028D0  1825               	xorwf	___ftadd@exp2,w,c
 22451  0028D2  B4D8               	btfsc	status,2,c
 22452  0028D4  D00E               	goto	i2l1390
 22453  0028D6  0624               	decf	___ftadd@sign,f,c
 22454  0028D8  C024  F021         	movff	___ftadd@sign,??___ftadd
 22455  0028DC  0E07               	movlw	7
 22456  0028DE  1621               	andwf	??___ftadd,f,c
 22457  0028E0  B4D8               	btfsc	status,2,c
 22458  0028E2  D007               	goto	i2l1390
 22459  0028E4  D7EE               	goto	i2u645_40
 22460  0028E6  FFFF               	dw	65535	; assembler added errata NOP
 22461  0028E8  90D8               	bcf	status,0,c
 22462  0028EA  3220               	rrcf	___ftadd@f2+2,f,c
 22463  0028EC  321F               	rrcf	___ftadd@f2+1,f,c
 22464  0028EE  321E               	rrcf	___ftadd@f2,f,c
 22465  0028F0  2A25               	incf	___ftadd@exp2,f,c
 22466  0028F2                     i2l1390:
 22467  0028F2  FFFF               	dw	65535	; assembler added errata NOP
 22468  0028F4  5025               	movf	___ftadd@exp2,w,c
 22469  0028F6  1826               	xorwf	___ftadd@exp1,w,c
 22470  0028F8  A4D8               	btfss	status,2,c
 22471  0028FA  D7F5               	goto	i2l1391
 22472  0028FC                     i2u648_40:
 22473  0028FC  FFFF               	dw	65535	; assembler added errata NOP
 22474  0028FE  AE24               	btfss	___ftadd@sign,7,c
 22475  002900  D00C               	goto	i2l1393
 22476  002902  0EFF               	movlw	255
 22477  002904  1A1B               	xorwf	___ftadd@f1,f,c
 22478  002906  0EFF               	movlw	255
 22479  002908  1A1C               	xorwf	___ftadd@f1+1,f,c
 22480  00290A  0EFF               	movlw	255
 22481  00290C  1A1D               	xorwf	___ftadd@f1+2,f,c
 22482  00290E  0E01               	movlw	1
 22483  002910  261B               	addwf	___ftadd@f1,f,c
 22484  002912  0E00               	movlw	0
 22485  002914  221C               	addwfc	___ftadd@f1+1,f,c
 22486  002916  0E00               	movlw	0
 22487  002918  221D               	addwfc	___ftadd@f1+2,f,c
 22488  00291A                     i2l1393:
 22489  00291A  FFFF               	dw	65535	; assembler added errata NOP
 22490  00291C  AC24               	btfss	___ftadd@sign,6,c
 22491  00291E  D00C               	goto	i2l1394
 22492  002920  0EFF               	movlw	255
 22493  002922  1A1E               	xorwf	___ftadd@f2,f,c
 22494  002924  0EFF               	movlw	255
 22495  002926  1A1F               	xorwf	___ftadd@f2+1,f,c
 22496  002928  0EFF               	movlw	255
 22497  00292A  1A20               	xorwf	___ftadd@f2+2,f,c
 22498  00292C  0E01               	movlw	1
 22499  00292E  261E               	addwf	___ftadd@f2,f,c
 22500  002930  0E00               	movlw	0
 22501  002932  221F               	addwfc	___ftadd@f2+1,f,c
 22502  002934  0E00               	movlw	0
 22503  002936  2220               	addwfc	___ftadd@f2+2,f,c
 22504  002938                     i2l1394:
 22505  002938  FFFF               	dw	65535	; assembler added errata NOP
 22506  00293A  0E00               	movlw	0
 22507  00293C  6E24               	movwf	___ftadd@sign,c
 22508  00293E  501B               	movf	___ftadd@f1,w,c
 22509  002940  261E               	addwf	___ftadd@f2,f,c
 22510  002942  501C               	movf	___ftadd@f1+1,w,c
 22511  002944  221F               	addwfc	___ftadd@f2+1,f,c
 22512  002946  501D               	movf	___ftadd@f1+2,w,c
 22513  002948  2220               	addwfc	___ftadd@f2+2,f,c
 22514  00294A  AE20               	btfss	___ftadd@f2+2,7,c
 22515  00294C  D00E               	goto	i2l1395
 22516  00294E  0EFF               	movlw	255
 22517  002950  1A1E               	xorwf	___ftadd@f2,f,c
 22518  002952  0EFF               	movlw	255
 22519  002954  1A1F               	xorwf	___ftadd@f2+1,f,c
 22520  002956  0EFF               	movlw	255
 22521  002958  1A20               	xorwf	___ftadd@f2+2,f,c
 22522  00295A  0E01               	movlw	1
 22523  00295C  261E               	addwf	___ftadd@f2,f,c
 22524  00295E  0E00               	movlw	0
 22525  002960  221F               	addwfc	___ftadd@f2+1,f,c
 22526  002962  0E00               	movlw	0
 22527  002964  2220               	addwfc	___ftadd@f2+2,f,c
 22528  002966  0E01               	movlw	1
 22529  002968  6E24               	movwf	___ftadd@sign,c
 22530  00296A                     i2l1395:
 22531  00296A  FFFF               	dw	65535	; assembler added errata NOP
 22532  00296C  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
 22533  002970  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 22534  002974  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 22535  002978  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
 22536  00297C  C024  F005         	movff	___ftadd@sign,___ftpack@sign
 22537  002980  EC4D  F01E         	call	___ftpack	;wreg free
 22538  002984  C001  F01B         	movff	?___ftpack,?___ftadd
 22539  002988  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
 22540  00298C  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
 22541  002990                     i2l6104:
 22542  002990  FFFF               	dw	65535	; assembler added errata NOP
 22543  002992  0012               	return		;funcret
 22544  002994  FFFF               	dw	65535	; errata NOP
 22545  002996                     __end_of___ftadd:
 22546                           	opt stack 0
 22547                           tosu	equ	0xFFF
 22548                           tosh	equ	0xFFE
 22549                           tosl	equ	0xFFD
 22550                           pclatu	equ	0xFFB
 22551                           pclath	equ	0xFFA
 22552                           tblptru	equ	0xFF8
 22553                           tblptrh	equ	0xFF7
 22554                           tblptrl	equ	0xFF6
 22555                           tablat	equ	0xFF5
 22556                           prodh	equ	0xFF4
 22557                           prodl	equ	0xFF3
 22558                           intcon	equ	0xFF2
 22559                           indf0	equ	0xFEF
 22560                           postinc0	equ	0xFEE
 22561                           fsr0h	equ	0xFEA
 22562                           fsr0l	equ	0xFE9
 22563                           wreg	equ	0xFE8
 22564                           postdec1	equ	0xFE5
 22565                           fsr1h	equ	0xFE2
 22566                           fsr1l	equ	0xFE1
 22567                           indf2	equ	0xFDF
 22568                           postinc2	equ	0xFDE
 22569                           postdec2	equ	0xFDD
 22570                           fsr2h	equ	0xFDA
 22571                           fsr2l	equ	0xFD9
 22572                           status	equ	0xFD8
 22573                           
 22574 ;; *************** function ___ftpack *****************
 22575 ;; Defined at:
 22576 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 22577 ;; Parameters:    Size  Location     Type
 22578 ;;  arg             3    0[COMRAM] unsigned um
 22579 ;;  exp             1    3[COMRAM] unsigned char 
 22580 ;;  sign            1    4[COMRAM] unsigned char 
 22581 ;; Auto vars:     Size  Location     Type
 22582 ;;		None
 22583 ;; Return value:  Size  Location     Type
 22584 ;;                  3    0[COMRAM] float 
 22585 ;; Registers used:
 22586 ;;		wreg, status,2, status,0
 22587 ;; Tracked objects:
 22588 ;;		On entry : 0/0
 22589 ;;		On exit  : 0/0
 22590 ;;		Unchanged: 0/0
 22591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22592 ;;      Params:         5       0       0       0       0       0       0
 22593 ;;      Locals:         0       0       0       0       0       0       0
 22594 ;;      Temps:          3       0       0       0       0       0       0
 22595 ;;      Totals:         8       0       0       0       0       0       0
 22596 ;;Total ram usage:        8 bytes
 22597 ;; Hardware stack levels used:    1
 22598 ;; This function calls:
 22599 ;;		Nothing
 22600 ;; This function is called by:
 22601 ;;		___ftadd
 22602 ;;		___ftdiv
 22603 ;;		___ftmul
 22604 ;;		___lwtoft
 22605 ;; This function uses a non-reentrant model
 22606 ;;
 22607                           
 22608                           	psect	text96
 22609  003C9A                     __ptext96:
 22610                           	opt stack 0
 22611  003C9A                     ___ftpack:
 22612                           	opt stack 0
 22613  003C9A  FFFF               	dw	65535	; assembler added errata NOP
 22614                           
 22615                           ;incstack = 0
 22616  003C9C  5004               	movf	___ftpack@exp,w,c
 22617  003C9E  B4D8               	btfsc	status,2,c
 22618  003CA0  D005               	goto	i2u549_40
 22619  003CA2  5001               	movf	___ftpack@arg,w,c
 22620  003CA4  1002               	iorwf	___ftpack@arg+1,w,c
 22621  003CA6  1003               	iorwf	___ftpack@arg+2,w,c
 22622  003CA8  A4D8               	btfss	status,2,c
 22623  003CAA  D00E               	goto	i2l1336
 22624  003CAC                     i2u549_40:
 22625  003CAC  FFFF               	dw	65535	; assembler added errata NOP
 22626  003CAE  0E00               	movlw	0
 22627  003CB0  6E01               	movwf	?___ftpack,c
 22628  003CB2  0E00               	movlw	0
 22629  003CB4  6E02               	movwf	?___ftpack+1,c
 22630  003CB6  0E00               	movlw	0
 22631  003CB8  6E03               	movwf	?___ftpack+2,c
 22632  003CBA  D04E               	goto	i2l5428
 22633  003CBC  FFFF               	dw	65535	; assembler added errata NOP
 22634  003CBE  2A04               	incf	___ftpack@exp,f,c
 22635  003CC0  90D8               	bcf	status,0,c
 22636  003CC2  3203               	rrcf	___ftpack@arg+2,f,c
 22637  003CC4  3202               	rrcf	___ftpack@arg+1,f,c
 22638  003CC6  3201               	rrcf	___ftpack@arg,f,c
 22639  003CC8                     i2l1336:
 22640  003CC8  FFFF               	dw	65535	; assembler added errata NOP
 22641  003CCA  0E00               	movlw	0
 22642  003CCC  1401               	andwf	___ftpack@arg,w,c
 22643  003CCE  6E06               	movwf	??___ftpack& (0+255),c
 22644  003CD0  0E00               	movlw	0
 22645  003CD2  1402               	andwf	___ftpack@arg+1,w,c
 22646  003CD4  6E07               	movwf	(??___ftpack+1)& (0+255),c
 22647  003CD6  0EFE               	movlw	254
 22648  003CD8  1403               	andwf	___ftpack@arg+2,w,c
 22649  003CDA  6E08               	movwf	(??___ftpack+2)& (0+255),c
 22650  003CDC  5006               	movf	??___ftpack,w,c
 22651  003CDE  1007               	iorwf	??___ftpack+1,w,c
 22652  003CE0  1008               	iorwf	??___ftpack+2,w,c
 22653  003CE2  B4D8               	btfsc	status,2,c
 22654  003CE4  D00D               	goto	i2l1339
 22655  003CE6  D7EA               	goto	i2l1337
 22656  003CE8  FFFF               	dw	65535	; assembler added errata NOP
 22657  003CEA  2A04               	incf	___ftpack@exp,f,c
 22658  003CEC  0E01               	movlw	1
 22659  003CEE  2601               	addwf	___ftpack@arg,f,c
 22660  003CF0  0E00               	movlw	0
 22661  003CF2  2202               	addwfc	___ftpack@arg+1,f,c
 22662  003CF4  0E00               	movlw	0
 22663  003CF6  2203               	addwfc	___ftpack@arg+2,f,c
 22664  003CF8  90D8               	bcf	status,0,c
 22665  003CFA  3203               	rrcf	___ftpack@arg+2,f,c
 22666  003CFC  3202               	rrcf	___ftpack@arg+1,f,c
 22667  003CFE  3201               	rrcf	___ftpack@arg,f,c
 22668  003D00                     i2l1339:
 22669  003D00  FFFF               	dw	65535	; assembler added errata NOP
 22670  003D02  0E00               	movlw	0
 22671  003D04  1401               	andwf	___ftpack@arg,w,c
 22672  003D06  6E06               	movwf	??___ftpack& (0+255),c
 22673  003D08  0E00               	movlw	0
 22674  003D0A  1402               	andwf	___ftpack@arg+1,w,c
 22675  003D0C  6E07               	movwf	(??___ftpack+1)& (0+255),c
 22676  003D0E  0EFF               	movlw	255
 22677  003D10  1403               	andwf	___ftpack@arg+2,w,c
 22678  003D12  6E08               	movwf	(??___ftpack+2)& (0+255),c
 22679  003D14  5006               	movf	??___ftpack,w,c
 22680  003D16  1007               	iorwf	??___ftpack+1,w,c
 22681  003D18  1008               	iorwf	??___ftpack+2,w,c
 22682  003D1A  B4D8               	btfsc	status,2,c
 22683  003D1C  D007               	goto	i2l1342
 22684  003D1E  D7E4               	goto	i2l1340
 22685  003D20  FFFF               	dw	65535	; assembler added errata NOP
 22686  003D22  0604               	decf	___ftpack@exp,f,c
 22687  003D24  90D8               	bcf	status,0,c
 22688  003D26  3601               	rlcf	___ftpack@arg,f,c
 22689  003D28  3602               	rlcf	___ftpack@arg+1,f,c
 22690  003D2A  3603               	rlcf	___ftpack@arg+2,f,c
 22691  003D2C                     i2l1342:
 22692  003D2C  FFFF               	dw	65535	; assembler added errata NOP
 22693  003D2E  BE02               	btfsc	___ftpack@arg+1,7,c
 22694  003D30  D003               	goto	i2u553_40
 22695  003D32  0E02               	movlw	2
 22696  003D34  6004               	cpfslt	___ftpack@exp,c
 22697  003D36  D7F4               	goto	i2l1343
 22698  003D38                     i2u553_40:
 22699  003D38  FFFF               	dw	65535	; assembler added errata NOP
 22700  003D3A  A004               	btfss	___ftpack@exp,0,c
 22701  003D3C  9E02               	bcf	___ftpack@arg+1,7,c
 22702  003D3E  90D8               	bcf	status,0,c
 22703  003D40  3204               	rrcf	___ftpack@exp,f,c
 22704  003D42  5004               	movf	___ftpack@exp,w,c
 22705  003D44  1203               	iorwf	___ftpack@arg+2,f,c
 22706  003D46  5005               	movf	___ftpack@sign,w,c
 22707  003D48  A4D8               	btfss	status,2,c
 22708  003D4A  8E03               	bsf	___ftpack@arg+2,7,c
 22709  003D4C  C001  F001         	movff	___ftpack@arg,?___ftpack
 22710  003D50  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 22711  003D54  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 22712  003D58                     i2l5428:
 22713  003D58  FFFF               	dw	65535	; assembler added errata NOP
 22714  003D5A  0012               	return		;funcret
 22715  003D5C  FFFF               	dw	65535	; errata NOP
 22716  003D5E                     __end_of___ftpack:
 22717                           	opt stack 0
 22718                           tosu	equ	0xFFF
 22719                           tosh	equ	0xFFE
 22720                           tosl	equ	0xFFD
 22721                           pclatu	equ	0xFFB
 22722                           pclath	equ	0xFFA
 22723                           tblptru	equ	0xFF8
 22724                           tblptrh	equ	0xFF7
 22725                           tblptrl	equ	0xFF6
 22726                           tablat	equ	0xFF5
 22727                           prodh	equ	0xFF4
 22728                           prodl	equ	0xFF3
 22729                           intcon	equ	0xFF2
 22730                           indf0	equ	0xFEF
 22731                           postinc0	equ	0xFEE
 22732                           fsr0h	equ	0xFEA
 22733                           fsr0l	equ	0xFE9
 22734                           wreg	equ	0xFE8
 22735                           postdec1	equ	0xFE5
 22736                           fsr1h	equ	0xFE2
 22737                           fsr1l	equ	0xFE1
 22738                           indf2	equ	0xFDF
 22739                           postinc2	equ	0xFDE
 22740                           postdec2	equ	0xFDD
 22741                           fsr2h	equ	0xFDA
 22742                           fsr2l	equ	0xFD9
 22743                           status	equ	0xFD8
 22744                           tosu	equ	0xFFF
 22745                           tosh	equ	0xFFE
 22746                           tosl	equ	0xFFD
 22747                           pclatu	equ	0xFFB
 22748                           pclath	equ	0xFFA
 22749                           tblptru	equ	0xFF8
 22750                           tblptrh	equ	0xFF7
 22751                           tblptrl	equ	0xFF6
 22752                           tablat	equ	0xFF5
 22753                           prodh	equ	0xFF4
 22754                           prodl	equ	0xFF3
 22755                           intcon	equ	0xFF2
 22756                           indf0	equ	0xFEF
 22757                           postinc0	equ	0xFEE
 22758                           fsr0h	equ	0xFEA
 22759                           fsr0l	equ	0xFE9
 22760                           wreg	equ	0xFE8
 22761                           postdec1	equ	0xFE5
 22762                           fsr1h	equ	0xFE2
 22763                           fsr1l	equ	0xFE1
 22764                           indf2	equ	0xFDF
 22765                           postinc2	equ	0xFDE
 22766                           postdec2	equ	0xFDD
 22767                           fsr2h	equ	0xFDA
 22768                           fsr2l	equ	0xFD9
 22769                           status	equ	0xFD8
 22770                           
 22771                           	psect	text97
 22772  000000                     __ptext97:
 22773                           	opt stack 0
 22774                           tosu	equ	0xFFF
 22775                           tosh	equ	0xFFE
 22776                           tosl	equ	0xFFD
 22777                           pclatu	equ	0xFFB
 22778                           pclath	equ	0xFFA
 22779                           tblptru	equ	0xFF8
 22780                           tblptrh	equ	0xFF7
 22781                           tblptrl	equ	0xFF6
 22782                           tablat	equ	0xFF5
 22783                           prodh	equ	0xFF4
 22784                           prodl	equ	0xFF3
 22785                           intcon	equ	0xFF2
 22786                           indf0	equ	0xFEF
 22787                           postinc0	equ	0xFEE
 22788                           fsr0h	equ	0xFEA
 22789                           fsr0l	equ	0xFE9
 22790                           wreg	equ	0xFE8
 22791                           postdec1	equ	0xFE5
 22792                           fsr1h	equ	0xFE2
 22793                           fsr1l	equ	0xFE1
 22794                           indf2	equ	0xFDF
 22795                           postinc2	equ	0xFDE
 22796                           postdec2	equ	0xFDD
 22797                           fsr2h	equ	0xFDA
 22798                           fsr2l	equ	0xFD9
 22799                           status	equ	0xFD8
 22800                           
 22801                           	psect	rparam
 22802  0000                     tosu	equ	0xFFF
 22803                           tosh	equ	0xFFE
 22804                           tosl	equ	0xFFD
 22805                           pclatu	equ	0xFFB
 22806                           pclath	equ	0xFFA
 22807                           tblptru	equ	0xFF8
 22808                           tblptrh	equ	0xFF7
 22809                           tblptrl	equ	0xFF6
 22810                           tablat	equ	0xFF5
 22811                           prodh	equ	0xFF4
 22812                           prodl	equ	0xFF3
 22813                           intcon	equ	0xFF2
 22814                           indf0	equ	0xFEF
 22815                           postinc0	equ	0xFEE
 22816                           fsr0h	equ	0xFEA
 22817                           fsr0l	equ	0xFE9
 22818                           wreg	equ	0xFE8
 22819                           postdec1	equ	0xFE5
 22820                           fsr1h	equ	0xFE2
 22821                           fsr1l	equ	0xFE1
 22822                           indf2	equ	0xFDF
 22823                           postinc2	equ	0xFDE
 22824                           postdec2	equ	0xFDD
 22825                           fsr2h	equ	0xFDA
 22826                           fsr2l	equ	0xFD9
 22827                           status	equ	0xFD8
 22828                           
 22829                           	psect	temp
 22830  00007D                     btemp:
 22831                           	opt stack 0
 22832  00007D                     	ds	1
 22833  0000                     int$flags	set	btemp
 22834  0000                     wtemp6	set	btemp+1
 22835                           tosu	equ	0xFFF
 22836                           tosh	equ	0xFFE
 22837                           tosl	equ	0xFFD
 22838                           pclatu	equ	0xFFB
 22839                           pclath	equ	0xFFA
 22840                           tblptru	equ	0xFF8
 22841                           tblptrh	equ	0xFF7
 22842                           tblptrl	equ	0xFF6
 22843                           tablat	equ	0xFF5
 22844                           prodh	equ	0xFF4
 22845                           prodl	equ	0xFF3
 22846                           intcon	equ	0xFF2
 22847                           indf0	equ	0xFEF
 22848                           postinc0	equ	0xFEE
 22849                           fsr0h	equ	0xFEA
 22850                           fsr0l	equ	0xFE9
 22851                           wreg	equ	0xFE8
 22852                           postdec1	equ	0xFE5
 22853                           fsr1h	equ	0xFE2
 22854                           fsr1l	equ	0xFE1
 22855                           indf2	equ	0xFDF
 22856                           postinc2	equ	0xFDE
 22857                           postdec2	equ	0xFDD
 22858                           fsr2h	equ	0xFDA
 22859                           fsr2l	equ	0xFD9
 22860                           status	equ	0xFD8


Data Sizes:
    Strings     1320
    Constant    58
    Data        12
    BSS         276
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     67     124
    BANK0           128     89     128
    BANK1           256      0     192
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ajusteSP_Bombas$2378	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    telaPrincipal$2377	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    acaoTesteBombas$2376	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> intToFloatStr@conv(BANK0[4]), STR_122(CODE[15]), STR_121(CODE[12]), STR_120(CODE[10]), 
		 -> STR_119(CODE[18]), STR_118(CODE[10]), STR_117(CODE[18]), STR_116(CODE[16]), 
		 -> STR_115(CODE[10]), STR_113(CODE[3]), STR_112(CODE[14]), STR_111(CODE[20]), 
		 -> STR_110(CODE[8]), STR_109(CODE[10]), STR_108(CODE[11]), STR_107(CODE[9]), 
		 -> STR_106(CODE[3]), STR_105(CODE[15]), STR_104(CODE[15]), STR_103(CODE[11]), 
		 -> STR_102(CODE[11]), STR_101(CODE[19]), STR_100(CODE[5]), STR_99(CODE[12]), 
		 -> STR_98(CODE[5]), STR_97(CODE[14]), STR_96(CODE[19]), STR_93(CODE[3]), 
		 -> STR_92(CODE[7]), STR_91(CODE[7]), STR_89(CODE[12]), STR_88(CODE[17]), 
		 -> STR_87(CODE[20]), STR_86(CODE[8]), STR_83(CODE[14]), STR_80(CODE[14]), 
		 -> STR_79(CODE[11]), STR_76(CODE[10]), STR_75(CODE[31]), STR_72(CODE[11]), 
		 -> STR_71(CODE[20]), STR_70(CODE[20]), STR_69(CODE[21]), STR_68(CODE[15]), 
		 -> STR_67(CODE[6]), STR_66(CODE[15]), STR_65(CODE[6]), STR_64(CODE[20]), 
		 -> STR_63(CODE[15]), STR_62(CODE[19]), STR_61(CODE[20]), STR_60(CODE[21]), 
		 -> STR_59(CODE[21]), STR_58(CODE[18]), STR_57(CODE[20]), STR_56(CODE[17]), 
		 -> STR_55(CODE[26]), STR_54(CODE[16]), STR_51(CODE[15]), STR_48(CODE[15]), 
		 -> STR_45(CODE[11]), STR_44(CODE[17]), STR_43(CODE[16]), STR_42(CODE[19]), 
		 -> STR_41(CODE[19]), STR_40(CODE[16]), STR_39(CODE[15]), STR_38(CODE[15]), 
		 -> STR_37(CODE[20]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 126
		 -> STR_36(CODE[7]), STR_35(CODE[11]), STR_26(CODE[104]), STR_25(CODE[63]), 
		 -> STR_23(CODE[18]), STR_21(CODE[7]), STR_20(CODE[12]), STR_18(CODE[5]), 
		 -> STR_14(CODE[126]), STR_12(CODE[18]), STR_10(CODE[12]), STR_8(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    memset@p	PTR unsigned char  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), STR_123(CODE[7]), _doprnt@c(BANK0[1]), 
		 -> intToFloatStr@end(BANK0[4]), STR_114(CODE[12]), STR_95(CODE[17]), STR_94(CODE[13]), 
		 -> STR_90(CODE[12]), STR_85(CODE[5]), STR_84(CODE[3]), STR_82(CODE[5]), 
		 -> STR_81(CODE[3]), STR_78(CODE[5]), STR_77(CODE[3]), STR_74(CODE[4]), 
		 -> STR_73(CODE[4]), STR_53(CODE[5]), STR_52(CODE[3]), STR_50(CODE[5]), 
		 -> STR_49(CODE[3]), line3(BANK1[21]), STR_47(CODE[5]), STR_46(CODE[3]), 
		 -> line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), STR_32(CODE[6]), 
		 -> STR_31(CODE[3]), STR_30(CODE[6]), STR_29(CODE[3]), STR_28(CODE[6]), 
		 -> STR_27(CODE[3]), STR_15(CODE[12]), tel2(BANK1[12]), tel1(BANK1[12]), 
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 126
		 -> intToFloatStr@conv(BANK0[4]), STR_122(CODE[15]), STR_121(CODE[12]), STR_120(CODE[10]), 
		 -> STR_119(CODE[18]), STR_118(CODE[10]), STR_117(CODE[18]), STR_116(CODE[16]), 
		 -> STR_115(CODE[10]), STR_113(CODE[3]), STR_112(CODE[14]), STR_111(CODE[20]), 
		 -> STR_110(CODE[8]), STR_109(CODE[10]), STR_108(CODE[11]), STR_107(CODE[9]), 
		 -> STR_106(CODE[3]), STR_105(CODE[15]), STR_104(CODE[15]), STR_103(CODE[11]), 
		 -> STR_102(CODE[11]), STR_101(CODE[19]), STR_100(CODE[5]), STR_99(CODE[12]), 
		 -> STR_98(CODE[5]), STR_97(CODE[14]), STR_96(CODE[19]), STR_93(CODE[3]), 
		 -> STR_92(CODE[7]), STR_91(CODE[7]), STR_89(CODE[12]), STR_88(CODE[17]), 
		 -> STR_87(CODE[20]), STR_86(CODE[8]), STR_83(CODE[14]), STR_80(CODE[14]), 
		 -> STR_79(CODE[11]), STR_76(CODE[10]), STR_75(CODE[31]), STR_72(CODE[11]), 
		 -> STR_71(CODE[20]), STR_70(CODE[20]), STR_69(CODE[21]), STR_68(CODE[15]), 
		 -> STR_67(CODE[6]), STR_66(CODE[15]), STR_65(CODE[6]), STR_64(CODE[20]), 
		 -> STR_63(CODE[15]), STR_62(CODE[19]), STR_61(CODE[20]), STR_60(CODE[21]), 
		 -> STR_59(CODE[21]), STR_58(CODE[18]), STR_57(CODE[20]), STR_56(CODE[17]), 
		 -> STR_55(CODE[26]), STR_54(CODE[16]), STR_51(CODE[15]), STR_48(CODE[15]), 
		 -> STR_45(CODE[11]), STR_44(CODE[17]), STR_43(CODE[16]), STR_42(CODE[19]), 
		 -> STR_41(CODE[19]), STR_40(CODE[16]), STR_39(CODE[15]), STR_38(CODE[15]), 
		 -> STR_37(CODE[20]), STR_36(CODE[7]), STR_35(CODE[11]), STR_26(CODE[104]), 
		 -> STR_25(CODE[63]), STR_23(CODE[18]), STR_21(CODE[7]), STR_20(CODE[12]), 
		 -> STR_18(CODE[5]), STR_14(CODE[126]), STR_12(CODE[18]), STR_10(CODE[12]), 
		 -> STR_8(CODE[5]), STR_4(CODE[5]), STR_3(CODE[9]), STR_2(CODE[5]), 
		 -> STR_1(CODE[5]), 

    S1604__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1604__prbuf$ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    configuraTelefones$1463	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_95(CODE[17]), STR_94(CODE[13]), 

    dataLoger$1448	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_85(CODE[5]), STR_84(CODE[3]), 

    dataLoger$1443	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_82(CODE[5]), STR_81(CODE[3]), 

    dataLoger$1437	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_78(CODE[5]), STR_77(CODE[3]), 

    tela_testeBombas$1418	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_74(CODE[4]), STR_73(CODE[4]), 

    blink@line	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    atualizarLCD@line4	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), 

    atualizarLCD@line3	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), 

    atualizarLCD@line2	PTR unsigned char  size(2) Largest target is 21
		 -> line2(BANK1[21]), 

    atualizarLCD@line1	PTR unsigned char  size(2) Largest target is 21
		 -> line1(BANK1[21]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    acaoTesteBombas$1318	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_53(CODE[5]), STR_52(CODE[3]), 

    acaoTesteBombas$1313	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_50(CODE[5]), STR_49(CODE[3]), 

    acaoTesteBombas$1308	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_47(CODE[5]), STR_46(CODE[3]), 

    sp__intToFloatStr	PTR unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    enviaSMS$1228	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    enviaSMS$1223	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_28(CODE[6]), STR_27(CODE[3]), 

    enviaSMS$1222	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_30(CODE[6]), STR_29(CODE[3]), 

    enviaSMS$1221	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_32(CODE[6]), STR_31(CODE[3]), 

    enviaSMS$1208	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    comunicarTeste$1193	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    getDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    setDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    sp__getSerial	PTR unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    getSerial@ret	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    getSerial@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_7(CODE[7]), 

    sp__memset	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    aguardaBuffer@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_6(CODE[7]), STR_5(CODE[3]), 

    writeChar@hex	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TIMER in COMRAM

    _TIMER->_lerTransdutor
    _timer->_writeEEPROM16_ext
    i2_getDS1307TimeDate->i2_I2C_Read
    i2_I2C_Restart->i2_I2C_Wait
    i2_I2C_Read->i2_I2C_Wait
    i2_RTC_Init->i2_I2C_Write
    _writeEEPROM16_ext->i2_writeEEPROM_ext
    i2_writeEEPROM_ext->i2_I2C_Write
    i2_writeEEPROM_ext->i2_delay
    i2_I2C_Write->i2_I2C_Wait
    i2_I2C_Stop->i2_I2C_Wait
    i2_I2C_Start->i2_I2C_Wait
    _lerTransdutor->___ftdiv
    _lerTransdutor->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftmul

Critical Paths under _main in BANK0

    _main->_acaoTesteBombas
    _verificarIntervaloTesteBombas->_writeEEPROM_ext
    _tela_testeBombas->_sprintf
    _tela_ajusteRTC->_sprintf
    _setDS1307TimeDate->_I2C_Write
    _DECtoBCD->___awdiv
    _telaPrincipal->_intToFloatStr
    _resetParametros->_clearShiftREG
    _lerParametros->_readEEPROM16_ext
    _readEEPROM16_ext->_readEEPROM_ext
    _informacoes->_sprintf
    _getSinalSIM800L->_atoi
    _getSerial->_sprintf
    _atoi->_getSerial
    _getDS1307TimeDate->_I2C_Write
    _dataLoger->_sprintf
    _criarCaracteresCGRAM->_Lcd_Write_Char
    _configurarEstacionaria->_sprintf
    _configuraTelefones->_comunicarTeste
    _comunicarTeste->_printf
    _atualizarLCD->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _ajusteSP_Bombas->_intToFloatStr
    _acaoTesteBombas->_enviaSMS
    _salvarLOG->_readEEPROM_ext
    _salvarLOG->_writeEEPROM_ext
    _writeEEPROM_ext->_I2C_Write
    _readEEPROM_ext->_I2C_Write
    _I2C_Restart->_I2C_Wait
    _I2C_Read->_I2C_Wait
    _intToFloatStr->_sprintf
    _drenarPressao->_sprintf
    _sprintf->__doprnt
    _acaoBombas->_enviaSMS
    _partidaBombaEstacionaria->_delay
    _enviaSMS->_printf
    _printf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _limparBuffer->_memset
    _aguardaBuffer->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _RTC_Init->_I2C_Write
    _I2C_Write->_DECtoBCD
    _I2C_Stop->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _I2C_Master_Init->___lldiv

Critical Paths under _TIMER in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TIMER in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TIMER in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TIMER in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TIMER in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TIMER in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  375852
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                           _RTC_Init
                         _acaoBombas
                    _acaoTesteBombas
                    _ajusteSP_Bombas
                       _atualizarLCD
                            _btPress
             _configuraRegistradores
                 _configuraTelefones
             _configurarEstacionaria
               _criarCaracteresCGRAM
                          _dataLoger
                              _delay
                  _getDS1307TimeDate
                    _getSinalSIM800L
                        _informacoes
                      _lerParametros
                        _setShiftREG
                            _sprintf
                      _telaPrincipal
                     _tela_ajusteRTC
                   _tela_testeBombas
      _verificarIntervaloTesteBombas
 ---------------------------------------------------------------------------------
 (1) _verificarIntervaloTesteBombas                        0     0      0    5482
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_testeBombas                                     4     4      0   24159
                                             53 BANK0      4     4      0
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_ajusteRTC                                       0     0      0   23011
                              _blink
                            _btPress
                  _setDS1307TimeDate
                            _sprintf
                          _validaRTC
 ---------------------------------------------------------------------------------
 (2) _validaRTC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setDS1307TimeDate                                    3     1      2    4358
                                             12 BANK0      3     1      2
                           _DECtoBCD
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DECtoBCD                                             2     2      0    1902
                                              8 BANK0      2     2      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _telaPrincipal                                        2     2      0   35298
                                             66 BANK0      2     2      0
                              _blink
                            _btPress
                      _clearShiftREG
                      _intToFloatStr
                    _resetParametros
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _resetParametros                                      0     0      0      69
                      _clearShiftREG
 ---------------------------------------------------------------------------------
 (1) _setShiftREG                                          2     2      0      69
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _lerParametros                                        2     2      0   12128
                                             20 BANK0      2     2      0
                   _readEEPROM16_ext
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _readEEPROM16_ext                                     6     4      2    3221
                                             14 BANK0      6     4      2
                     _readEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _informacoes                                          0     0      0   14436
                            _btPress
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _getSinalSIM800L                                      4     4      0   29251
                                             70 BANK0      4     4      0
                      _aguardaBuffer
                               _atoi
                              _delay
                          _getSerial
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _getSerial                                           10     7      3   17084
                                             53 BANK0     10     7      3
                             _memset
                            _sprintf
                             _strlen
                             _strstr
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     835
                                             63 BANK0      7     5      2
                             ___wmul
                          _getSerial (ARG)
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _getDS1307TimeDate                                    2     0      2    3431
                                             12 BANK0      2     0      2
                           _BCDtoDEC
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _BCDtoDEC                                             1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _dataLoger                                           12    12      0   18743
                                             53 BANK0     12    12      0
                            ___awdiv
                            _btPress
                     _readEEPROM_ext
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _criarCaracteresCGRAM                                56    56      0     521
                                              4 BANK0     56    56      0
                            _Lcd_Cmd
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _configurarEstacionaria                               0     0      0   24135
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _configuraTelefones                                   5     5      0   35495
                                             63 BANK0      5     5      0
                              _blink
                            _btPress
                     _comunicarTeste
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _comunicarTeste                                       4     4      0   11201
                                             59 BANK0      4     4      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (1) _configuraRegistradores                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _atualizarLCD                                         9     1      8    2380
                                              8 BANK0      9     1      8
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     3     1      2     573
                                              4 BANK0      3     1      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     888
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _ajusteSP_Bombas                                      2     2      0   40711
                                             66 BANK0      2     2      0
                              _blink
                            _btPress
                      _intToFloatStr
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _blink                                                5     1      4    4217
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _acaoTesteBombas                                     17    17      0   75641
                                             72 BANK0     17    17      0
                            _btPress
                      _clearShiftREG
                      _drenarPressao
                           _enviaSMS
                      _intToFloatStr
           _partidaBombaEstacionaria
                     _readEEPROM_ext
                          _salvarLOG
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _salvarLOG                                            3     3      0    8878
                                             14 BANK0      3     3      0
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM_ext                                      2     1      1    5482
                                             12 BANK0      2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _readEEPROM_ext                                       2     2      0    3152
                                             12 BANK0      2     2      0
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Restart                                          0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             4     2      2     881
                                              1 BANK0      4     2      2
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _intToFloatStr                                       13    11      2   16484
                                             53 BANK0     13    11      2
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     752
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1060
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _drenarPressao                                        0     0      0   14414
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             20     6     14   14414
                                             33 BANK0     20     6     14
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) _clearShiftREG                                        1     1      0      69
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _btPress                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _acaoBombas                                           3     3      0   12493
                                             72 BANK0      3     3      0
                           _enviaSMS
           _partidaBombaEstacionaria
 ---------------------------------------------------------------------------------
 (2) _partidaBombaEstacionaria                             1     1      0    1130
                                              3 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _enviaSMS                                            13    13      0   11363
                                             59 BANK0     13    13      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeChar                                            2     0      2     402
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              26     6     20    4630
                                             33 BANK0     26     6     20
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             25    19      6    3428
                                             12 BANK0     21    15      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _limparBuffer                                         0     0      0    1638
                              _delay
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     552
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _aguardaBuffer                                        2     0      2    3421
                                             19 BANK0      2     0      2
                              _delay
                             _strstr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    1401
                                             15 BANK0      4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     362
                                              6 BANK0      9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               5     1      4     240
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _delay                                                3     1      2    1086
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0    2226
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            2     0      2    2226
                                             10 BANK0      2     0      2
                           _DECtoBCD (ARG)
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Wait                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _TIMER                                               19    19      0   17356
                                             48 COMRAM    19    19      0
                      _lerTransdutor
                        _readButtons
                              _timer
 ---------------------------------------------------------------------------------
 (7) _timer                                                8     8      0    2076
                                              8 COMRAM     8     8      0
                  _writeEEPROM16_ext
                         i2_RTC_Init
                i2_getDS1307TimeDate
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (8) i2_getDS1307TimeDate                                  2     0      2     707
                                              5 COMRAM     2     0      2
                         i2_BCDtoDEC
                         i2_I2C_Read
                      i2_I2C_Restart
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Restart                                        0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Read                                           4     2      2     227
                                              1 COMRAM     4     2      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_BCDtoDEC                                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_RTC_Init                                           0     0      0     256
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (8) _writeEEPROM16_ext                                    3     1      2     591
                                              5 COMRAM     3     1      2
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (8) i2_writeEEPROM_ext                                    2     1      1     426
                                              3 COMRAM     2     1      1
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
                            i2_delay
 ---------------------------------------------------------------------------------
 (9) i2_delay                                              3     1      2      48
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Write                                          2     0      2     256
                                              1 COMRAM     2     0      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Stop                                           0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Start                                          0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Wait                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _readButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _lerTransdutor                                        7     7      0   15213
                                             41 COMRAM     7     7      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
                            _readADC
 ---------------------------------------------------------------------------------
 (8) _readADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) ___lwtoft                                             3     0      3    2564
                                              8 COMRAM     3     0      3
                           ___ftpack
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     328
                                             26 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    3526
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             15     9      6    3480
                                             26 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    4622
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _RTC_Init
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _acaoBombas
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _partidaBombaEstacionaria
       _delay
   _acaoTesteBombas
     _btPress
     _clearShiftREG
     _drenarPressao
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _partidaBombaEstacionaria
       _delay
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _salvarLOG
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
       _writeEEPROM_ext
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
         _delay
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _ajusteSP_Bombas
     _blink
     _btPress
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _atualizarLCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _btPress
   _configuraRegistradores
   _configuraTelefones
     _blink
     _btPress
     _comunicarTeste
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _configurarEstacionaria
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _criarCaracteresCGRAM
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _dataLoger
     ___awdiv
     _btPress
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _delay
   _getDS1307TimeDate
     _BCDtoDEC
     _I2C_Read
       _I2C_Wait
     _I2C_Restart
       _I2C_Wait
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _getSinalSIM800L
     _aguardaBuffer
       _delay
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _atoi
       ___wmul
       _getSerial (ARG)
         _memset
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
         _strlen
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _isdigit (ARG)
     _delay
     _getSerial
       _memset
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _strlen
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _limparBuffer
       _delay
       _memset
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeChar
   _informacoes
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _lerParametros
     _readEEPROM16_ext
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _setShiftREG
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       ___wmul *
       _isdigit *
       _putch *
   _telaPrincipal
     _blink
     _btPress
     _clearShiftREG
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _resetParametros
       _clearShiftREG
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _tela_ajusteRTC
     _blink
     _btPress
     _setDS1307TimeDate
       _DECtoBCD
         ___awdiv
         ___awmod
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _validaRTC
   _tela_testeBombas
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _verificarIntervaloTesteBombas
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay

 _TIMER (ROOT)
   _lerTransdutor
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
     ___lwtoft
       ___ftpack
       _readADC (ARG)
     _readADC
   _readButtons
   _timer
     _writeEEPROM16_ext
       i2_writeEEPROM_ext
         i2_I2C_Start
           i2_I2C_Wait
         i2_I2C_Stop
           i2_I2C_Wait
         i2_I2C_Write
           i2_I2C_Wait
         i2_delay
     i2_RTC_Init
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_getDS1307TimeDate
       i2_BCDtoDEC
       i2_I2C_Read
         i2_I2C_Wait
       i2_I2C_Restart
         i2_I2C_Wait
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_writeEEPROM_ext
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
       i2_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C0       7       75.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     59      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     43      7C       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BC      15        0.0%
DATA                 0      0     1BC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Aug 25 13:55:14 2019

                                                 __size_of_readEEPROM_ext 0056  
                                                             __CFG_CP0$ON 000000  
                                                             __CFG_CP1$ON 000000  
                                                             __CFG_CP2$ON 000000  
                                                             __CFG_CP3$ON 000000  
                                                      __size_of_I2C_Start 000C  
                                                      __size_of_I2C_Write 000E  
                                                __end_of_readEEPROM16_ext 709C  
                                                             __CFG_CPD$ON 000000  
                                                            ___awdiv@sign 0085  
                                                             __CFG_BOR$ON 000000  
                                                     ___wmul@multiplicand 0082  
                                          __end_of_configurarEstacionaria 2E28  
                                        __end_of_partidaBombaEstacionaria 397A  
                                                             __CFG_OSC$HS 000000  
                                                            ___ftadd@exp1 0026  
                                                            ___ftadd@exp2 0025  
                                                            ___ftadd@sign 0024  
                                                             __CFG_WDT$ON 000000  
                                                                     l302 2B14  
                                                                     l310 2A7C  
                                                                     l311 2AF8  
                                                                     l303 29A8  
                                                                     l304 2B36  
                                                                     l312 2AA4  
                                                                     l321 25BA  
                                                                     l305 29CA  
                                                                     l330 24B2  
                                                                     l322 2418  
                                                                     l314 2ACC  
                                                                     l323 25F0  
                                                                     l307 2A0A  
                                                                     l500 396E  
                                                                     l340 2584  
                                                                     l324 2438  
                                                                     l316 2AF6  
                                                                     l308 2A28  
                                                                     l501 3974  
                                                                     l413 3C0A  
                                                                     l325 2468  
                                                                     l317 2B06  
                                                                     l350 18C0  
                                                                     l510 6F4E  
                                                                     l334 24DE  
                                                                     l351 15CA  
                                                                     l327 2488  
                                                                     l431 73EA  
                                                                     l352 1900  
                                                                     l600 2FA6  
                                                                     l353 15EA  
                                                                     l337 2558  
                                                                     l601 2F88  
                                                                     l354 161A  
                                                                     l426 700C  
                                                                     l522 0D72  
                                                                     l530 0A98  
                                                                     l338 258E  
                                                                     l506 7302  
                                                                     l259 717E  
                                                                     l363 16B4  
                                                                     l531 0AA2  
                                                                     l523 09E4  
                                                                     l339 257A  
                                                                     l267 328E  
                                                                     l603 3028  
                                                                     l291 742E  
                                                                     l620 7346  
                                                                     l380 17D6  
                                                                     l364 17C8  
                                                                     l372 1738  
                                                                     l356 164E  
                                                                     l524 0DC6  
                                                                     l540 0BE6  
                                                                     l516 0950  
                                                                     l268 320A  
                                                                     l292 743A  
                                                                     l613 7318  
                                                                     l365 1704  
                                                                     l533 0AEA  
                                                                     l525 0A08  
                                                                     l269 3252  
                                                                     l605 305A  
                                                                     l293 7446  
                                                                     l614 731C  
                                                                     l366 17A6  
                                                                     l534 0B2A  
                                                                     l518 0958  
                                                                     l630 3BB2  
                                                                     l294 7452  
                                                                     l710 1E8A  
                                                                     l615 7326  
                                                                     l391 1844  
                                                                     l359 1678  
                                                                     l463 76DE  
                                                                     l471 76C6  
                                                                     l551 0C7E  
                                                                     l527 0A46  
                                                                     l519 0974  
                                                                     l631 3B1A  
                                                                     l295 745E  
                                                                     l703 1E2A  
                                                                     l616 732A  
                                                                     l384 1826  
                                                                     l376 1752  
                                                                     l368 171E  
                                                                     l472 76D8  
                                                                     l464 769C  
                                                                     l536 0B4A  
                                                                     l528 0A86  
                                                                     l632 3BD0  
                                                                     l296 746A  
                                                                     l617 7334  
                                                                     l385 1816  
                                                                     l481 310C  
                                                                     l537 0B54  
                                                                     l633 3B40  
                                                                     l705 1F98  
                                                                     l713 1EBE  
                                                                     l618 7338  
                                                                     l394 1870  
                                                                     l490 38D8  
                                                                     l482 3130  
                                                                     l474 76FE  
                                                                     l546 0C02  
                                                                     l634 3B66  
                                                                     l722 1F5A  
                                                                     l706 1E58  
                                                                     l730 2670  
                                                                     l619 7342  
                                                                     l483 315C  
                                                                     l467 76AA  
                                                                     l563 0D30  
                                                                     l555 0CB6  
                                                                     l539 0B96  
                                                                     l635 3B8C  
                                                                     l643 3FDC  
                                                                     l811 1352  
                                                                     l803 1282  
                                                                     l396 18A6  
                                                                     l492 38F4  
                                                                     l484 3186  
                                                                     l548 0C32  
                                                                     l820 13A2  
                                                                     l812 130A  
                                                                     l716 1EF2  
                                                                     l740 2714  
                                                                     l900 0EC8  
                                                                     l389 182E  
                                                                     l485 319E  
                                                                     l477 30BE  
                                                                     l469 76B8  
                                                                     l565 0D64  
                                                                     l549 0C56  
                                                                     l661 3AC6  
                                                                     l709 1FC4  
                                                                     l725 1F8E  
                                                                     l741 273A  
                                                                     l733 26C6  
                                                                     l901 0EDC  
                                                                     l398 18B4  
                                                                     l494 3904  
                                                                     l830 1486  
                                                                     l822 13E8  
                                                                     l742 274C  
                                                                     l902 0FF6  
                                                                     l910 0FC4  
                                                                     l495 390A  
                                                                     l479 30E4  
                                                                     l559 0CEE  
                                                                     l823 140A  
                                                                     l815 136E  
                                                                     l807 12C4  
                                                                     l663 3AF6  
                                                                     l655 3A98  
                                                                     l719 1F26  
                                                                     l735 27A6  
                                                                     l911 0FCC  
                                                                     l903 0EEC  
                                                                     l496 3928  
                                                                     l648 39F0  
                                                                     l840 1588  
                                                                     l832 14CC  
                                                                     l824 142C  
                                                                     l680 2262  
                                                                     l736 26DA  
                                                                     l920 1054  
                                                                     l904 1040  
                                                                     l912 0FD4  
                                                                     l497 3944  
                                                                     l833 14EE  
                                                                     l809 12D8  
                                                                     l657 3AA4  
                                                                     l681 227C  
                                                                     l745 2758  
                                                                     l737 2700  
                                                                     l913 0FDC  
                                                                     l905 0EF4  
                                                                     l498 3958  
                                                                     l818 1590  
                                                                     l834 1510  
                                                                     l658 3AB4  
                                                                     l690 2396  
                                                                     l682 2296  
                                                                     l746 2760  
                                                                     l922 11B8  
                                                                     l914 0FE4  
                                                                     l906 0F50  
                                                                     l819 1388  
                                                                     l851 2E22  
                                                                     l691 23A6  
                                                                     l683 22B0  
                                                                     l739 27C0  
                                                                     l747 2788  
                                                                     l931 10F4  
                                                                     l923 1074  
                                                                     l915 0FEC  
                                                                     l907 0FAC  
                                                                     l668 71F2  
                                                                     l828 15AA  
                                                                     l852 2DCC  
                                                                     l692 23BE  
                                                                     l684 230C  
                                                                     l908 0FB4  
                                                                     l669 71DA  
                                                                     l861 1B3A  
                                                                     l829 146C  
                                                                     l853 2DF2  
                                                                     l845 2D64  
                                                                     l685 233A  
                                                                     l677 22CA  
                                                                     l749 279E  
                                                                     l941 11DC  
                                                                     l933 111E  
                                                                     l925 1094  
                                                                     l909 0FBC  
                                                                     l862 1A12  
                                                                     l838 155A  
                                                                     l790 1CA6  
                                                                     l782 1C08  
                                                                     l694 23E6  
                                                                     l686 236A  
                                                                     l678 2248  
                                                                     l871 1AA2  
                                                                     l863 1A38  
                                                                     l847 2E0E  
                                                                     l855 2E06  
                                                                     l791 1CA0  
                                                                     l695 23F4  
                                                                     l679 22EE  
                                                                     l943 11F8  
                                                                     l919 1182  
                                                                     l935 1144  
                                                                     l927 10B4  
                                                                     l872 1AC8  
                                                                     l864 1A4A  
                                                                     l848 2D92  
                                                                     l792 1CE6  
                                                                     l944 120C  
                                                                     l873 1ADA  
                                                                     l849 2DB8  
                                                                     l697 2400  
                                                                     l929 10D4  
                                                                     l866 1B5A  
                                                                     l786 1C42  
                                                                     l778 1BA6  
                                                                     l938 1174  
                                                                     l875 1AEA  
                                                                     l867 1A5A  
                                                                     l859 19FE  
                                                                     l795 1D92  
                                                                     l699 240E  
                                                                     l939 11CA  
                                                                     l876 1B10  
                                                                     l868 1A80  
                                                                     l877 1B22  
                                                                     l869 1A92  
                                                                     l789 1C82  
                                                                     l879 1B32  
                                                            __CFG_CPB$OFF 000000  
                                                                     _PEN 007E2A  
                                                                     _SEN 007E28  
                                                                     _cbf 0066  
                                                                     _rtc 0076  
                                                             ?i2_I2C_Read 0002  
                                                            __CFG_BORV$20 000000  
                                                            ___awmod@sign 0085  
                                                             ?i2_I2C_Wait 0001  
                                                             ?i2_I2C_Stop 0001  
                                                                     prod 000FF3  
                                                                     tosl 000FFD  
                                                                     wreg 000FE8  
                                                    __size_of_I2C_Restart 000C  
                                                             ?i2_BCDtoDEC 0001  
                                                __size_of_ajusteSP_Bombas 025A  
                                                            __CFG_LVP$OFF 000000  
                                                            ___ftdiv@cntr 0024  
                                                            ___ftdiv@sign 0029  
                                                                    l1002 6FA6  
                                                                    l1003 6F8E  
                                                                    l1020 7A28  
                                                                    l1101 0808  
                                                                    l1102 0896  
                                                                    l1103 08C2  
                                                                    l1041 01B6  
                                                                    l1042 01AC  
                                                                    l1018 7A1E  
                                                                    l1036 0120  
                                                                    l1061 0346  
                                                                    l1037 019A  
                                                                    l1054 0538  
                                                                    l1070 0440  
                                                                    l1038 016C  
                                                                    l1310 78D0  
                                                                    l1302 7880  
                                                                    l1071 0492  
                                                                    l1055 02A6  
                                                                    l1047 0214  
                                                                    l1311 78E0  
                                                                    l1303 788E  
                                                                    l1080 05EE  
                                                                    l1064 0352  
                                                                    l1056 02E2  
                                                                    l1081 05F8  
                                                                    l1049 04E0  
                                                                    l1073 04A6  
                                                                    l1065 0394  
                                                                    l1057 02F6  
                                                                    l1305 78A8  
                                                                    l1082 06FC  
                                                                    l1074 04CC  
                                                                    l1066 03C0  
                                                                    l1058 02EE  
                                                                    l1306 789E  
                                                                    l1075 0574  
                                                                    l1084 064A  
                                                                    l1085 0676  
                                                                    l1069 03D6  
                                                                    l1309 78C4  
                                                                    l1094 0748  
                                                                    l1270 35E8  
                                                                    l1095 0774  
                                                                    l1079 05C8  
                                                                    l1271 35E0  
                                                                    l1088 06C4  
                                                                    l1280 36C2  
                                                                    l1089 06F0  
                                                                    l1273 362C  
                                                                    l1530 75F2  
                                                                    l1098 07D4  
                                                                    l1290 3E24  
                                                                    l1531 75E8  
                                                                    l1451 6E30  
                                                                    l1099 0800  
                                                                    l1540 748C  
                                                                    l1292 3E46  
                                                                    l1276 3682  
                                                                    l1541 7482  
                                                                    l1293 3E3C  
                                                                    l1277 3640  
                                                                    l1710 3F70  
                                                                    l1534 7616  
                                                                    l1535 7622  
                                                                    l1279 36B8  
                                                                    l1544 74A8  
                                                                    l1296 3E6A  
                                                                    l1481 79E2  
                                                                    l1545 74B4  
                                                                    l1297 3E76  
                                                                    l1289 3E12  
                                                                    l1482 79F2  
                                                                    l1554 70BC  
                                                                    l1298 3E86  
                                                                    l1555 70A8  
                                                                    l1708 3F9C  
                                                                    l1477 79AA  
                                                                    l1709 3F32  
                                                                    l1478 799C  
                                                                    l1742 3F0C  
                                                                    l1743 3E98  
                                                                    l1744 3F02  
                                                                    l1737 7220  
                                                                    l6010 3FD2  
                                                                    l5116 057A  
                                                                    l1696 7582  
                                                                    l5072 0354  
                                                                    l1697 757A  
                                                                    l5082 03D8  
                                                                    l5316 7182  
                                                                    l5354 7002  
                                                                    l6510 7414  
                                                                    l4912 3E9A  
                                                                    l7314 1300  
                                                                    l4836 6D32  
                                                                    l4926 3F28  
                                                                    l5558 367C  
                                                                    l4960 3FC0  
                                                                    l5824 3C02  
                                                                    l6480 2ACE  
                                                                    l4938 723C  
                                                                    l4970 70AA  
                                                                    l6634 096A  
                                                                    l6474 2AA6  
                                                                    l4964 6F90  
                                                                    l6468 2A7E  
                                                                    l6902 3050  
                                                                    l5886 76D2  
                                                                    l6890 301E  
                                                                    l6876 2F7E  
                                                                    l6958 39E6  
                                                                    l6992 3AAA  
                                                                    l6984 3A8E  
                                                                    STR_1 7FE8  
                                                                    STR_2 7FE8  
                                                                    STR_3 7F89  
                                                                    STR_4 7FDE  
                                                                    STR_5 7FFA  
                                                                    STR_6 7FB1  
                                                                    STR_7 7FB1  
                                                                    STR_8 7FDE  
                                                                    STR_9 7FFA  
                                                                    u5000 0432  
                                                                    u5010 047C  
                                                                    u5030 0512  
                                                                    u5007 0428  
                                                                    u5017 0472  
                                                                    u5300 090A  
                                                                    u5220 0786  
                                                                    u5037 0508  
                                                                    u5070 05AC  
                                                                    u4520 75A6  
                                                                    u5400 78AE  
                                                                    u5218 072C  
                                                                    u4620 7492  
                                                                    u5148 062E  
                                                                    u5340 3E4C  
                                                                    u6060 3BF4  
                                                                    u6300 71FC  
                                                                    u5190 0706  
                                                                    u6070 3C00  
                                                                    u4527 759C  
                                                                    u5280 08CE  
                                                                    u4650 3ECA  
                                                                    u4730 3FB6  
                                                                    u5290 0900  
                                                                    u5258 07B8  
                                                                    u5178 06A8  
                                                                    u5610 32B0  
                                                                    _RCIF 007CF5  
                                                                    _RCEN 007E2B  
                                                                    u4590 75F8  
                                                                    u5278 087A  
                                                                    u5470 7026  
                                                                    u4920 0326  
                                                                    u4760 70FC  
                                                                    u6280 3FFA  
                                                                    u5297 08F6  
                                                                    u4930 032C  
                                                                    u4850 01DA  
                                                                    u4860 0202  
                                                                    u7270 098E  
                                                                    u8310 134C  
                                                                    u4927 031C  
                                                                    u4775 7100  
                                                                    u4880 0260  
                                                                    u4848 0150  
                                                                    u5840 25AE  
                                                                    u4857 01D0  
                                                                    u9017 3A76  
                                                                    u4890 029C  
                                                                    u7370 0BD6  
                                                                    u8410 145C  
                                                                    u4867 01F8  
                                                                    u9027 7264  
                                                                    u6900 2A9E  
                                                                    u9037 7278  
                                                                    u6750 79B0  
                                                                    u7390 0BF6  
                                                                    u7710 3A46  
                                                                    u6910 2AB6  
                                                                    u9047 6F98  
                                                                    u4887 0256  
                                                                    u4968 0378  
                                                                    u8440 14C4  
                                                                    u7720 3A5C  
                                                                    u6920 2AC6  
                                                                    u9057 78FE  
                                                                    u4897 0292  
                                                                    u8370 13E0  
                                                                    u6930 2ADE  
                                                                    u7650 2F9A  
                                                                    u9067 791A  
                                                                    u6940 2AEE  
                                                                    u7820 237A  
                                                                    u9077 7934  
                                                                    u4998 03FC  
                                                                    u5990 17FE  
                                                                    u7670 304A  
                                                                    u9087 6E7E  
                                                                    u4999 0436  
                                                                    u8480 1540  
                                                                    u6880 2A76  
                                                                    u7770 3B04  
                                                                    u6890 2A8E  
                                                                    u7690 307C  
                                                                    u7780 3B0C  
                                                                    u8735 765E  
                                                                    _RSEN 007E29  
                                                            __CFG_WRT0$ON 000000  
                                                           _enviaSMS$1221 00BF  
                                                           _enviaSMS$1222 00C1  
                                                           _enviaSMS$1223 00C3  
                                                            __CFG_WRT1$ON 000000  
                                                           _enviaSMS$1208 00BD  
                                                           _enviaSMS$1228 00C5  
                                                            __CFG_WRT2$ON 000000  
                                                            __CFG_WRT3$ON 000000  
                                                   writeEEPROM16_ext@data 0006  
                                                            __CFG_STVR$ON 000000  
                                                                    __dia 00EB  
                                                                    __ano 00E9  
                                                                    __hor 00EC  
                                                                    __mes 00EA  
                                                                    __min 00ED  
                                                       ?_Lcd_Write_String 0084  
                                                                    __sec 00EE  
                                                          ?_drenarPressao 0001  
                                                           __CFG_EBTRB$ON 000000  
                                                                    _atoi 35DC  
                                                                    _main 0DCC  
                                             __end_ofi2_getDS1307TimeDate 34E4  
                                                                    _tel1 01B0  
                                                                    _tel2 01A4  
                                                            ___ftpack@arg 0001  
                                                            ___ftpack@exp 0004  
                                                        __end_of_I2C_Read 7110  
                                              __end_of_configuraTelefones 15BA  
                                                                    fsr0h 000FEA  
                                                                    fsr1h 000FE2  
                                                                    indf0 000FEF  
                                                                    fsr2h 000FDA  
                                                                    fsr0l 000FE9  
                                                                    indf2 000FDF  
                                                                    fsr1l 000FE1  
                                                                    fsr2l 000FD9  
                                                                    btemp 007D  
                                                        __end_of_I2C_Wait 6D88  
                                                        __end_of_I2C_Stop 6CE4  
                                                 __size_of_tela_ajusteRTC 0236  
                                                        _etapaComunicacao 0051  
                                                            ?i2_I2C_Start 0001  
                                                                    prodh 000FF4  
                                                                    prodl 000FF3  
                                                            ?i2_I2C_Write 0002  
                                                         __end_ofi2_delay 6EEE  
                                                                    start 0118  
                                                      ??_Lcd_Write_String 0086  
                                                  __size_of_lerTransdutor 0234  
                                            partidaBombaEstacionaria@acao 0083  
                                                        __end_of_BCDtoDEC 6DA2  
                                                         __end_of_Lcd_Cmd 6E90  
                                                  __size_ofi2_I2C_Restart 000C  
                                                          clearShiftREG@i 0080  
                                                           ?_atualizarLCD 0088  
                                                            ___ftmul@cntr 0019  
                                                            ___param_bank 000000  
                                                            ___ftmul@sign 001A  
                                                        __end_of_DECtoBCD 72C6  
                                               __size_of_tela_testeBombas 01D0  
                                                     _timerVerificarSinal 00FE  
                                                           _lerParametros 2F5C  
                                                            ___fttol@exp1 0029  
                                                         _executandoTeste 00F1  
                                                            ___fttol@lval 0025  
                                                        ?_I2C_Master_Init 008D  
                                                            ?_readButtons 0001  
                                                           __CFG_OSCS$OFF 000000  
                                                 _configuraTelefones$1463 00C1  
                                                             ?i2_RTC_Init 0001  
                                                                   ?_atoi 00BF  
                                                                   ?_main 0001  
                                                                   _ACKEN 007E2C  
                                                                   _ACKDT 007E2D  
                                                         __end_of___awdiv 3E94  
                                                         __end_of___ftadd 2996  
                                                                   STR_10 7ED9  
                                                                   STR_11 7FFA  
                                                                   STR_20 7ED9  
                                                                   STR_12 7D5F  
                                                                   STR_13 7FFD  
                                                                   STR_21 7FAA  
                                                                   STR_30 7FD2  
                                                                   STR_22 7FFA  
                                                                   STR_14 7AD7  
                                                                   STR_23 7D5F  
                                                                   STR_31 7FFA  
                                                                   STR_15 7EE5  
                                                                   STR_24 7FFD  
                                                                   STR_32 7FD2  
                                                                   STR_16 7FFA  
                                                                   STR_40 7E0B  
                                                                   STR_33 7FFA  
                                                                   STR_17 7FD8  
                                                                   STR_41 7D00  
                                                                   STR_25 7BBD  
                                                                   STR_18 7FDE  
                                                                   STR_50 7FE3  
                                                                   STR_34 7FD8  
                                                                   STR_42 7D13  
                                                                   STR_26 7B55  
                                                                   STR_27 7FFA  
                                                                   STR_19 7FFA  
                                                                   STR_35 7F15  
                                                                   STR_51 7E67  
                                                                   STR_43 7DFB  
                                                                   STR_36 7FAA  
                                                                   STR_52 7FFA  
                                                                   STR_28 7FD2  
                                                                   STR_44 7DA7  
                                                                   STR_60 7C4A  
                                                         __end_of___awmod 78EE  
                                                                   STR_29 7FFA  
                                                                   STR_53 7FE3  
                                                                   STR_45 7F41  
                                                                   STR_61 7C88  
                                                                   STR_37 7C74  
                                                                   STR_46 7FFA  
                                                                   STR_38 7E76  
                                                                   STR_54 7DEB  
                                                                   STR_62 7D4C  
                                                                   STR_70 7CB0  
                                                                   STR_63 7E2B  
                                                                   STR_47 7FE3  
                                                                   STR_39 7E2B  
                                                                   STR_71 7CC4  
                                                                   STR_55 7C1B  
                                                                   STR_72 7F4C  
                                                                   STR_80 7EB0  
                                                                   STR_48 7E58  
                                                                   STR_56 7DC9  
                                                                   STR_64 7CEC  
                                                                   STR_81 7FFA  
                                                                   STR_49 7FFA  
                                                                   STR_73 7FF6  
                                                                   STR_65 7FCC  
                                                                   STR_57 7C9C  
                                                                   STR_90 7EE5  
                                                                   STR_82 7FE3  
                                                                   STR_74 7FF2  
                                                                   STR_66 7E3A  
                                                                   STR_58 7D95  
                                                                   STR_67 7FC6  
                                                                   STR_91 7FB8  
                                                                   STR_83 7EBE  
                                                                   STR_59 7C35  
                                                                   STR_75 7BFC  
                                                                   STR_84 7FFA  
                                                                   STR_92 7FBF  
                                                                   STR_76 7F7F  
                                                                   STR_68 7E49  
                                                                   STR_77 7FFA  
                                                                   STR_85 7FE3  
                                                                   STR_93 7F12  
                                                                   STR_69 7C5F  
                                                                   STR_78 7FE3  
                                                                   STR_86 7F9B  
                                                                   STR_94 7ECC  
                                                                   STR_79 7F2B  
                                                                   STR_95 7DDA  
                                                                   STR_87 7CD8  
                                                                   STR_88 7DB8  
                                                                   STR_96 7D39  
                                                                   STR_89 7F09  
                                                                   STR_97 7EA2  
                                                                   STR_98 7FED  
                                                                   STR_99 7EF1  
                                                         __end_of___ftdiv 3896  
                                                            ?_informacoes 0001  
                                                         __end_of___lldiv 7A08  
                                                         __end_of___ftmul 35DC  
                                                                   _T0CON 000FD5  
                                                         ___awdiv@divisor 0082  
                                                         __end_of___fttol 37B0  
                                                         __end_of___lwdiv 7630  
                                                         __end_of___lwmod 74C2  
                                                                   i2l230 1FFA  
                                                                   i2l232 20D2  
                                                                   i2l225 6DF8  
                                                                   i2l234 2106  
                                                                   i2l236 21FC  
                                                                   i2l237 21C6  
                                                                   i2l452 77F4  
                                                                   i2l453 7808  
                                                                   i2l454 7812  
                                                                   i2l455 7826  
                                                                   i2l456 7830  
                                                                   i2l457 7844  
                                                                   i2l458 784E  
                                                                   i2l570 2B50  
                                                                   i2l459 7862  
                                                                   i2l580 2BA2  
                                                                   i2l572 2B5A  
                                                                   i2l582 2BB4  
                                                                   i2l574 2B70  
                                                                   i2l584 2BBE  
                                                                   i2l576 2B7A  
                                                                   i2l594 2C38  
                                                                   i2l586 2BD4  
                                                                   i2l578 2B98  
                                                                   i2l595 2CB4  
                                                                   i2l596 2C5C  
                                                                   i2l588 2BDE  
                                                                   i2l597 2C9A  
                                                                   i2l589 2C00  
                                                                   i2l891 008C  
                                                         ___awdiv@counter 0084  
                                                                   i2l893 00BC  
                                                                   i2l894 00C8  
                                                                   _RCREG 000FAE  
                                                                   _TMR0H 000FD7  
                                                                   _TIMER 0008  
                                                                   _TMR0L 000FD6  
                                                                   _SPBRG 000FAF  
                                                         __end_of__doprnt 091A  
                                                 __size_of_Lcd_Set_Cursor 00C4  
                                                                   _TXREG 000FAD  
                                                         _writeEEPROM_ext 734C  
                                                           __CFG_PWRT$OFF 000000  
                                                         __end_of_btPress 7704  
                                                          __CFG_EBTR0$OFF 000000  
                                                          __CFG_EBTR1$OFF 000000  
                                                          __CFG_EBTR2$OFF 000000  
                                                          __CFG_EBTR3$OFF 000000  
                                                           __CFG_WRTB$OFF 000000  
                                                                   __b_ok 005E  
                                                           __CFG_WRTC$OFF 000000  
                                                           __CFG_WRTD$OFF 000000  
                                                         __end_of_readADC 6E14  
                                                                   _delay 6F8A  
                                                                   _blink 71C4  
                                                         __end_of_dpowers 7AD7  
                                                                   _line1 017B  
                                                                   _line2 0166  
                                                                   _line3 0151  
                                                                   _line4 013C  
                                                         __end_of_isdigit 6E3C  
                                                  ??_criarCaracteresCGRAM 0084  
                                                                   _shift 0044  
                                                           ___ftpack@sign 0005  
                                                                   _timer 2B3C  
                                                                   atoi@a 00C4  
                                                        __end_of_RTC_Init 7064  
                                                                   atoi@s 00BF  
                                                                   _putch 6D2C  
                                                       __end_of_I2C_Start 6CD8  
                                                  _flagEstacionariaLigada 00F0  
                                                       __end_of_I2C_Write 6D0C  
                                                                   pclath 000FFA  
                                                                   tablat 000FF5  
                                                  __size_of_intToFloatStr 0094  
                                                                   status 000FD8  
                                                   __end_of_telaPrincipal 2414  
                                                                   wtemp6 007E  
                                                         __end_of_sprintf 73DA  
                                                          _comunicarTeste 2414  
                                                         __end_of_strncmp 3F2E  
                                                   i2writeEEPROM_ext@data 0004  
                                                        __end_of_Lcd_Init 7976  
                                                          ??_atualizarLCD 0090  
                                              __size_of_getDS1307TimeDate 0134  
                                              __size_of_setDS1307TimeDate 0112  
                                                        __end_of_Lcd_Port 734C  
                                                     __size_ofi2_I2C_Read 0036  
                                                     __size_ofi2_I2C_Wait 0018  
                                                         __initialization 7704  
                                                           _dtl_principal 0057  
                                                     __size_ofi2_I2C_Stop 000C  
                                                          ?_lerParametros 0001  
                                                            __end_of_atoi 36C8  
                                                            __end_of_main 1234  
                                                   __end_of_aguardaBuffer 7188  
                                                     __size_ofi2_BCDtoDEC 0016  
                                                                  ??_atoi 00C1  
                                                                  ??_main 00D9  
                                                           ___fttol@sign1 0024  
                                                            i2I2C_Write@d 0002  
                                                           _status_jockey 00FD  
                                      lerParametros@verifica_memoria_nova 0094  
                                                      __size_of_Lcd_Clear 0012  
                                                           __activetblptr 000002  
                                                                  ?_TIMER 0001  
                                                           _lerTransdutor 1FCE  
                                                   __end_of_clearShiftREG 702C  
                                                           i2_I2C_Restart 6CC0  
                                                    _tempo_limite_partida 006C  
                                                               I2C_Read@a 0081  
                                                                  TIMER@c 0043  
                                                            ?_setShiftREG 0001  
                                                         __CFG_CCP2MUX$ON 000000  
                                                      readEEPROM_ext@data 008D  
                                                                  ?_delay 0080  
                                                                  ?_blink 0080  
                                                                  _ADCON0 000FC2  
                                                                  _ADCON1 000FC1  
                                                                  STR_100 7FED  
                                                                  STR_101 7D26  
                                                                  STR_110 7F9B  
                                                                  STR_102 7F36  
                                                                  STR_103 7F41  
                                                                  STR_111 7CD8  
                                                                  STR_104 7E58  
                                                                  STR_120 7F61  
                                                                  STR_112 7E94  
                                                                  STR_113 7F12  
                                                                  STR_105 7E67  
                                                                  STR_121 7EFD  
                                                                  STR_114 7EE5  
                                                                  STR_122 7E85  
                                                                  _ADRESH 000FC4  
                                                                  STR_123 7FA3  
                                                                  STR_107 7F92  
                                                                  STR_115 7F57  
                                                                  STR_108 7F20  
                                                                  STR_116 7E1B  
                                                                  STR_109 7F75  
                                                                  STR_117 7D71  
                                                                  STR_118 7F6B  
                                                                  _ADRESL 000FC3  
                                                                  STR_119 7D83  
                                                        ___awdiv@dividend 0080  
                                                                  ?_timer 0001  
                                                                  ?_putch 0001  
                                                        __end_of___ftpack 3D5E  
                                                          lerTransdutor@i 002A  
                                                         ??_drenarPressao 00B5  
                                                               ??i2_delay 0003  
                                                  __end_of_comunicarTeste 25F6  
                                                                  i2l1002 6ED6  
                                                                  i2l1003 6EC0  
                                                                  i2l1402 37F6  
                                                                  i2l1403 3836  
                                                                  i2l1340 3CE8  
                                                                  i2l1404 385E  
                                                                  i2l1421 358A  
                                                                  i2l1342 3D2C  
                                                                  i2l1422 359C  
                                                                  i2l1343 3D20  
                                                                  i2l1336 3CC8  
                                                                  i2l1408 3D90  
                                                                  i2l1337 3CBC  
                                                                  i2l1409 3DC2  
                                                                  i2l1417 352A  
                                                                  i2l1418 355E  
                                                                  i2l1339 3D00  
                                                                  i2l1371 284A  
                                                                  i2l1419 3570  
                                                                  i2l1444 3778  
                                                                  i2l1381 28AC  
                                                                  i2l1445 376A  
                                                                  i2l1390 28F2  
                                                                  i2l1382 28A0  
                                                                  i2l1438 374E  
                                                                  i2l1391 28E6  
                                                                  i2l1367 281C  
                                                                  i2l1447 3798  
                                                                  i2l1439 373C  
                                                                  i2l1376 28B8  
                                                                  i2l1393 291A  
                                                                  i2l1394 2938  
                                                                  i2l1395 296A  
                                                                  i2l5300 6EC2  
                                                                  i2l6104 2990  
                                                                  i2l6150 3890  
                                                                  i2l5428 3D58  
                                                                  i2l6262 37AA  
                                                                  i2l4832 3DF0  
                                                                  _INTCON 000FF2  
                                                                  i2l4834 3DF4  
                                                                  i2l6198 35D6  
                                                                  i2l6374 1FF0  
                                                        __end_of___lwtoft 6DEC  
                                                                  u631_41 27D8  
                                                                  u632_41 27EC  
                                                                  u652_41 37C2  
                                                                  u654_41 37DC  
                                                               ??_Lcd_Cmd 0081  
                                                                  u657_41 34F6  
                                                                  u666_41 36DA  
                                                                  u659_41 3510  
                                                                  _TMR0IF 007F92  
                                                          __CFG_WDTPS$128 000000  
                                       __size_of_partidaBombaEstacionaria 00E4  
                                                 __size_of_Lcd_Write_Char 0042  
                                                                  _SSPADD 000FC8  
                                                                  _SSPBUF 000FC9  
                                               ?_partidaBombaEstacionaria 0001  
                                                     __size_ofi2_RTC_Init 0032  
                                                       ??_ajusteSP_Bombas 00C2  
                                                 writeEEPROM16_ext@adress 0008  
                                                     _dias_restante_teste 00E7  
                                                ??_configuraRegistradores 0080  
                                                                  __b_esc 0064  
                                                                  ___ftge 3D5E  
                                                          _readEEPROM_ext 74C2  
                                                                  ___wmul 6E90  
                                                        __end_of_enviaSMS 1906  
                                                               ??___awdiv 0084  
                                                            enviaSMS@tipo 00C7  
                                                               ??___ftadd 0021  
                                                               ??___awmod 0084  
                                                               ??___ftdiv 0021  
                                                         _getSinalSIM800L 2996  
                                                               ??___lldiv 0088  
                                                               ??___ftmul 0012  
                                                               ??___fttol 001F  
                                                                  _blinkk 0067  
                                                               ??___lwdiv 0084  
                                                               ??___lwmod 008B  
                                                 _habilitaTesteAutomatico 00EF  
                                   __end_of_verificarIntervaloTesteBombas 7308  
                                  __size_of_verificarIntervaloTesteBombas 0042  
                                           _verificarIntervaloTesteBombas 72C6  
                                                 __end_of_writeEEPROM_ext 7392  
                                                           ?_limparBuffer 0001  
                                                               ??__doprnt 0092  
                                                                  _memset 709C  
                                                                  delay@x 0080  
                                                                  clear_0 774A  
                                                                  clear_1 7756  
                                                                  clear_2 7762  
                                                        ___awdiv@quotient 0086  
                                                                  blink@i 0084  
                                                         ___awmod@divisor 0082  
                                                               ??_btPress 0080  
                                                           _intToFloatStr 7A08  
                                                            __doprnt@flag 009B  
                                                         ___awmod@counter 0084  
                                           setDS1307TimeDate@ptrToUserVal 008C  
                                                                  _printf 7188  
                                                            __doprnt@prec 0096  
                                                                  _strchr 7202  
                                                                  _strlen 756E  
                                                                  _strstr 3F2E  
                                                          ?_lerTransdutor 0001  
                                                   ___ftmul@f3_as_product 0016  
                                                           dataLoger@logs 00C0  
                                                               ??_readADC 0003  
                                                               ??_isdigit 0080  
                                                          ?i2_I2C_Restart 0001  
                                                               ?_I2C_Read 0081  
                                                               ?_I2C_Wait 0001  
                                                               ?_I2C_Stop 0001  
                                                            __mediumconst 7A9C  
                                                                  tblptrh 000FF7  
                                                                  tblptrl 000FF6  
                                                                  tblptru 000FF8  
                                                                  putch@c 0080  
                                                               ?_BCDtoDEC 0001  
                                                               ??_sprintf 00AF  
                                                               ??_strncmp 008C  
                                                               ?_DECtoBCD 0001  
                                                         Lcd_Set_Cursor@a 0084  
                                                         Lcd_Set_Cursor@b 0083  
                                                         Lcd_Set_Cursor@y 0086  
                                                         Lcd_Set_Cursor@z 0085  
                                                         ?_comunicarTeste 0001  
                                                              __accesstop 0080  
                                                 __end_of__initialization 7768  
                                                              ___ftadd@f1 001B  
                                                              ___ftadd@f2 001E  
                                                          _tela_ajusteRTC 1D98  
                                                              ___ftge@ff1 0001  
                                                              ___ftge@ff2 0004  
                                                       __end_of_Lcd_Clear 6D2C  
                                                        _etapaTesteBombas 0072  
                                                           ___rparam_used 000001  
                                                              ___ftdiv@f1 001B  
                                                              ___ftdiv@f2 001E  
                                                              ___ftdiv@f3 0025  
                                                         ??_lerParametros 0094  
                                                           __end_of_TIMER 0118  
                                                              _acaoBombas 3082  
                                                  __end_of_readEEPROM_ext 7518  
                                                     _telefoneSelecionado 00F7  
                                                              ___ftmul@f1 000C  
                                                              ___ftmul@f2 000F  
                                                    __size_ofi2_I2C_Start 000C  
                                                              ___fttol@f1 001B  
                                                    __size_ofi2_I2C_Write 000E  
                                                        _tela_testeBombas 25F6  
                                                          __pcstackCOMRAM 0001  
                                                        _status_principal 00FC  
                                                            __pidataBANK0 6CA0  
                                                            __pidataBANK1 6C9C  
                                                      __size_of_dataLoger 0238  
                                                           __end_of_delay 6FC0  
                                                           __end_of_blink 7202  
                                                          ??_limparBuffer 0088  
                                                __size_of_acaoTesteBombas 04B2  
                                                           __end_of_timer 2CBA  
                                                           __end_of_putch 6D40  
                                                          ?_intToFloatStr 00B5  
                                                       ?_readEEPROM16_ext 008E  
                                                               ?_RTC_Init 0001  
                                                       intToFloatStr@conv 00BB  
                                                              ___lwtoft@c 0009  
                                                          _tela_menu_posi 0069  
                                                      ??_readEEPROM16_ext 0090  
                                                    __size_of_readButtons 007E  
                                                          _Lcd_Set_Cursor 3B12  
                                                                 ??_TIMER 0031  
                                                            ??i2_I2C_Read 0004  
                                                              ??_I2C_Read 0083  
                                                            ??i2_I2C_Wait 0001  
                                                      __size_of_getSerial 011C  
                                                              ??_I2C_Wait 0080  
                                                            ??i2_I2C_Stop 0002  
                                                              ??_I2C_Stop 0081  
                                                    __size_of_informacoes 0074  
                                                            __sec_partida 0070  
                                                    __end_of_atualizarLCD 3A4C  
                                                            ??i2_BCDtoDEC 0001  
                                                               ?_Lcd_Init 0001  
                                                              ??_BCDtoDEC 0080  
                                                                 ??_delay 0082  
                                                               ?_Lcd_Port 0001  
                                                              __doprnt@ap 0090  
                                                                 ??_blink 0084  
                                                              __doprnt@cp 009C  
                                                              __doprnt@pb 008C  
                                                   writeEEPROM_ext@adress 008D  
                                                              ??_DECtoBCD 0088  
                                                                 ??_timer 0009  
                                                                 ??_putch 0080  
                                                              __pbssBANK0 00D9  
                                                              __pbssBANK1 0100  
                                                  __end_of_tela_ajusteRTC 1FCE  
                                                              __menu_posi 00DD  
                                                 __end_of_getSinalSIM800L 2B3C  
                                                     writeEEPROM_ext@data 008C  
                                                         ?_readEEPROM_ext 0001  
                                                __size_of_resetParametros 0028  
                                                      __end_ofi2_I2C_Read 6F8A  
                                                            I2C_Read@temp 0083  
                                                      __end_ofi2_I2C_Wait 6D6E  
                                                                 ?___ftge 0001  
                                                      __end_ofi2_I2C_Stop 6CC0  
                                         __size_of_configuraRegistradores 0056  
                                                                 ?___wmul 0080  
                                                       _writeEEPROM16_ext 6DA2  
                                                      __size_of_salvarLOG 00C4  
                                                      __end_ofi2_BCDtoDEC 6D56  
                                                              _flag_b_esc 0065  
                                                              _codigoErro 00F3  
                                                                 ?_memset 0080  
                                                      _configuraTelefones 1234  
                                                        ?_writeEEPROM_ext 008C  
                                                      __size_of_validaRTC 004E  
                                                            ??i2_RTC_Init 0004  
                                                         ??_lerTransdutor 002A  
                                                              ??_RTC_Init 008C  
                                               __size_of_Lcd_Write_String 003A  
                                                      ?_writeEEPROM16_ext 0006  
                                                               ?___ftpack 0001  
                                                  __end_of_Lcd_Set_Cursor 3BD6  
                                           criarCaracteresCGRAM@character 0087  
                                                              I2C_Write@d 008A  
                                                                 ?_printf 00A1  
                                                         ??i2_I2C_Restart 0002  
                                                                 ?_strchr 0080  
                                                                 ?_strlen 0080  
                                                               ?___lwtoft 0009  
                                                                 ?_strstr 008F  
                                                           ??_I2C_Restart 0081  
                                          ?_verificarIntervaloTesteBombas 0001  
                                                     ?_configuraTelefones 0001  
                                                     ??_writeEEPROM16_ext 0008  
                                                              ??_Lcd_Init 0083  
                                                              ??_Lcd_Port 0080  
                                                                 _SSPCON1 000FC6  
                                                                 _SSPCON2 000FC5  
                                                       __end_of_dataLoger 1D98  
                                                                 _SSPSTAT 000FC7  
                                                    __size_of_setShiftREG 0048  
                                                                 i2_delay 6EBC  
                                                               ?_enviaSMS 0001  
                                                         ?_tela_ajusteRTC 0001  
                                                            _flag_b_menos 0063  
                                                          _Lcd_Write_Char 7242  
                                                                 _Lcd_Cmd 6E64  
                                                              _dtl_jockey 0058  
                                                      __size_of_writeChar 000E  
                                                      __end_ofi2_RTC_Init 6F20  
                                                               _I2C_Start 6CCC  
                                                              _gsmOcupado 00F4  
                                                               _I2C_Write 6CFE  
                                                         _timerReenvioSMS 00F6  
                                                    ??_configuraTelefones 00BF  
                                                             ?_acaoBombas 0001  
                                                       __end_of_getSerial 32C0  
                                                                 __Hparam 0000  
                                                                 __Lparam 0000  
                                               __end_of_writeEEPROM16_ext 6DC4  
                                                         _sp_estacionaria 00E0  
                                            __size_ofi2_getDS1307TimeDate 0112  
                                                         __size_of___ftge 009C  
                                                                 __b_mais 0060  
                                                         ??_intToFloatStr 00B7  
                                                                 ___awdiv 3DFA  
                                                                 ___ftadd 27C6  
                                                                 ___awmod 7868  
                                                                 ___ftdiv 37B0  
                                                                 ___lldiv 7976  
                                                         __size_of___wmul 002C  
                                                                 ___ftmul 34E4  
                                                                 ___fttol 36C8  
                                                                 ___lwdiv 75CE  
                                                                 ___lwmod 7470  
                                                           atualizarLCD@i 0090  
                                                                 __doprnt 011C  
                                                                 __pcinit 7704  
                                                              ??___ftpack 0006  
                                                         __size_of_memset 003A  
                                                                 _btPress 7694  
                                                                 __ramtop 0600  
                                                         ?_Lcd_Set_Cursor 0083  
                                                                 __tensao 004C  
                                                                 __ptext0 0DCC  
                                                                 __ptext1 72C6  
                                                                 __ptext2 25F6  
                                                                 __ptext3 1D98  
                                                                 __ptext4 7422  
                                                                 __ptext5 32C0  
                                                                 __ptext6 7284  
                                                                 __ptext7 2202  
                                                                 __ptext8 6E3C  
                                                                 __ptext9 73DA  
                                               criarCaracteresCGRAM@F2956 7A9D  
                                                         __size_of_printf 003C  
                                                              ??___lwtoft 000C  
                                                                 _dtl_dia 005D  
                                                                 _dtl_ano 005B  
                                                         __size_of_strchr 0040  
                                                                 _readADC 6DEC  
                                                         __size_of_strlen 0060  
                                                                 _dtl_mes 005C  
                                                                 _dtl_min 0059  
                                                           i2BCDtoDEC@val 0001  
                                                         __size_of_strstr 0098  
                                                                 _dpowers 7ACD  
                                                    readEEPROM16_ext@data 0091  
                                                                 _isdigit 6E14  
                                                       ??_acaoTesteBombas 00C8  
                                                        ___awmod@dividend 0080  
                                                         _ajusteSP_Bombas 1906  
                                                __size_of_I2C_Master_Init 0064  
                                                        _dtl_carregar_log 0055  
                                                  _configuraRegistradores 7518  
                                                                 _pressao 00F8  
                                                                 _sprintf 7392  
                                                           __doprnt@width 009E  
                                                     __end_of_I2C_Restart 6CF0  
                                                  __end_of_Lcd_Write_Char 7284  
                                                                 _strncmp 3E94  
                                                    end_of_initialization 7768  
                                                       __end_of_salvarLOG 3C9A  
                                                              ??_enviaSMS 00BB  
                                                    __end_of_limparBuffer 6FF6  
                                           __size_of_criarCaracteresCGRAM 00C6  
                                                       __end_of_validaRTC 7470  
                                                                 memset@c 0082  
                                                                 memset@n 0084  
                                                                 memset@p 0086  
                                                           __Lmediumconst 7A9C  
                                                     _timerTrocarTextoLcd 0075  
                                                              _timer$1321 0009  
                                                              _timer$1322 000B  
                                                              _timer$1323 000D  
                                                              _timer$1324 000F  
                                                              blink@start 0082  
                                                              ?_I2C_Start 0001  
                                                              ?_I2C_Write 008A  
                                                            writeChar@hex 0080  
                                                            _bufferSerial 0100  
                                                        ?_getSinalSIM800L 0001  
                                                    _acaoTesteBombas$1313 00D3  
                                                    _acaoTesteBombas$1308 00D1  
                                                    _acaoTesteBombas$1318 00D5  
                                                    _acaoTesteBombas$1292 00CF  
                                                    _acaoTesteBombas$2376 00CD  
                                                         ___lldiv@divisor 0084  
                                                         ___lldiv@counter 008C  
                                                ??_configurarEstacionaria 00B5  
                                                               _RCSTAbits 000FAB  
                                                                 printf@f 00A1  
                                                        I2C_Master_Init@c 008D  
                                                                 postdec1 000FE5  
                                                                 postdec2 000FDD  
                                                                 postinc0 000FEE  
                                                                 postinc2 000FDE  
                                                               Lcd_Port@a 0080  
                                                                 strlen@s 0080  
                                                       ??_resetParametros 0081  
                                                              getSerial@i 00BC  
                                                               _PORTAbits 000F80  
                                                               _PORTBbits 000F81  
                                                               _PORTCbits 000F82  
                                                               _PORTDbits 000F83  
                                                   __size_of_atualizarLCD 00D2  
                                                               _PORTEbits 000F84  
                                                       __end_of_writeChar 6D1A  
                                                  __size_of_telaPrincipal 0212  
                                                               _TRISAbits 000F92  
                                                               _TRISBbits 000F93  
                                                               _TRISCbits 000F94  
                                                        ??_comunicarTeste 00BB  
                                                               _TRISDbits 000F95  
                                                               _TRISEbits 000F96  
                                                 i2writeEEPROM_ext@adress 0005  
                                                     __size_of_acaoBombas 0122  
                                                __end_of_tela_testeBombas 27C6  
                                                       __size_of_I2C_Read 003A  
                                                       __size_of_I2C_Wait 001A  
                                                       __size_of_I2C_Stop 000C  
                                                         ?_Lcd_Write_Char 0001  
                                                       Lcd_Write_String@a 0084  
                                                       Lcd_Write_String@i 0086  
                                                  __size_of_aguardaBuffer 003C  
                                                       __size_of_BCDtoDEC 001A  
                                                   __end_of_drenarPressao 6F54  
                                                       __size_of_DECtoBCD 0042  
                                                             ___ftdiv@exp 0028  
                                                               _TXSTAbits 000FAC  
                                              __size_of_writeEEPROM16_ext 0022  
                                                  __size_of_clearShiftREG 0036  
                                                        _intensidadeSinal 00FF  
                                                             ___ftmul@exp 0015  
                                                         getSerial@length 00BA  
                                                            _atualizarLCD 397A  
                                                               _Lcd_Clear 6D1A  
                                                          __end_of___ftge 3DFA  
                                                          i2I2C_Read@temp 0004  
                                                          __end_of___wmul 6EBC  
                                                      intToFloatStr@F2544 01BC  
                                                        _Lcd_Write_String 3FC6  
                                                 __end_of_ajusteSP_Bombas 1B60  
                                                          __end_of_memset 70D6  
                                                 salvarLOG@ultimoLogSalvo 008F  
                                                          __end_of_printf 71C4  
                                                       __size_of_RTC_Init 0038  
                                                             _I2C_Restart 6CE4  
                                                          __end_of_strchr 7242  
                                                          __end_of_strlen 75CE  
                                                          __end_of_strstr 3FC6  
                                                      _flagErroTransdutor 0073  
                                                     start_initialization 7704  
                                                             i2I2C_Read@a 0002  
                                                acaoTesteBombas@intervalo 00D7  
                                                   _tela_testeBombas$1418 00B7  
                                                      intToFloatStr@valor 00BF  
                                                _partidaBombaEstacionaria 3896  
                                               __size_of_readEEPROM16_ext 0038  
                                                       __size_of_Lcd_Init 0088  
                                                       __size_of_Lcd_Port 0044  
                                                        ??_readEEPROM_ext 008C  
                                                       ??_I2C_Master_Init 0091  
                                                       atualizarLCD@line1 0088  
                                                       atualizarLCD@line2 008A  
                                                       atualizarLCD@line3 008C  
                                                       atualizarLCD@line4 008E  
                                                           ??i2_I2C_Start 0002  
                                                             ??_I2C_Start 0081  
                                                           ??i2_I2C_Write 0004  
                                                           _telaPrincipal 2202  
                                                             ??_I2C_Write 008C  
                                                   __end_of_lerParametros 3082  
                                                              ?_Lcd_Clear 0001  
                                                                ??___ftge 0007  
                                         __size_of_configurarEstacionaria 016E  
                                                                ??___wmul 0084  
                                                             __doprnt@len 0099  
                                                             __doprnt@val 0097  
                                                             __pdataBANK0 00F8  
                                                             __pdataBANK1 01BC  
                                                           _aguardaBuffer 714C  
                                                           ??_readButtons 0001  
                                                         Lcd_Write_Char@a 0083  
                                                                ??_memset 0086  
                                                         Lcd_Write_Char@y 0082  
                                                                ??_printf 00B5  
                                                           ??_informacoes 00B5  
                                                                ??_strchr 0084  
                                                                ??_strlen 0082  
                                                                ??_strstr 0093  
                                                       __size_of___ftpack 00C4  
                                                             __pbssCOMRAM 0044  
                                                       __size_of___lwtoft 0028  
                                                           _clearShiftREG 6FF6  
                                                           __pcstackBANK0 0080  
                                                   __size_of_limparBuffer 0036  
                                                        ??_tela_ajusteRTC 00B5  
                                                   lerTransdutor@_pressao 002B  
                                                     i2_getDS1307TimeDate 33D2  
                                                            _isdigit$1866 0081  
                                                        intToFloatStr@end 00B7  
                                                                ?i2_delay 0001  
                                                                ?_Lcd_Cmd 0001  
                                                               __doprnt@c 00A0  
                                                               __doprnt@f 008E  
                                         ??_verificarIntervaloTesteBombas 008E  
                                                          ?_telaPrincipal 0001  
                                                               _dataLoger 1B60  
                                                       __size_of_enviaSMS 034C  
                                                            ??_acaoBombas 00C8  
                                                        ___lwdiv@dividend 0080  
                                                     lerTransdutor@tensao 002E  
                                                        ??_Lcd_Set_Cursor 0084  
                                                               __pintcode 0008  
                                                    ?i2_getDS1307TimeDate 0006  
                                                           __pmediumconst 7A9C  
                                                         _acaoTesteBombas 091A  
                                                               _flagTexto 0074  
                                                               _flag_b_ok 005F  
                                                     configuraTelefones@i 00C3  
                                                                ?___awdiv 0080  
                                                                ?___ftadd 001B  
                                                                ?___awmod 0080  
                                                          ?_aguardaBuffer 0093  
                                                                ?___ftdiv 001B  
                                                     __end_ofi2_I2C_Start 6CB4  
                                                                ?___lldiv 0080  
                                                                ?___ftmul 000C  
                                                                ?___fttol 001B  
                                                     __end_ofi2_I2C_Write 6CFE  
                                                               _getSerial 31A4  
                                                   _timerEtapaComunicacao 00F5  
                                                                ?___lwdiv 0080  
                                                                ?___lwmod 0087  
                                                                ?__doprnt 008C  
                                                               _bufferAUX 0190  
                                                               _ajust_tel 00DB  
                                                            _limparBuffer 6FC0  
                                                    readEEPROM_ext@adress 008C  
                                                                ?_btPress 0001  
                                                        ?_ajusteSP_Bombas 0001  
                                                   __end_of_lerTransdutor 2202  
                                                                ?_readADC 0001  
                                                             _flag_b_mais 0061  
                                                 ?_configuraRegistradores 0001  
                                                   __end_ofi2_I2C_Restart 6CCC  
                                                          __size_of_TIMER 0110  
                                                                ?_isdigit 0001  
                                                                _I2C_Read 70D6  
                                                          ?_clearShiftREG 0001  
                                                                _I2C_Wait 6D6E  
                                                                _I2C_Stop 6CD8  
                                                     __end_of_readButtons 7868  
                                                           ??_setShiftREG 0080  
                                                __size_of_writeEEPROM_ext 0046  
                                                  _configurarEstacionaria 2CBA  
                                                  readEEPROM16_ext@adress 0093  
                                                                _BCDtoDEC 6D88  
                                                      __end_of_acaoBombas 31A4  
                                                     __end_of_informacoes 77EA  
                                                        ___lwdiv@quotient 0084  
                                                          __size_of_delay 0036  
                                                          __size_of_blink 003E  
                                                                ?_sprintf 00A1  
                                                                ?_strncmp 0086  
                                                                _DECtoBCD 7284  
                                                          __size_of_timer 017E  
                                                          __size_of_putch 0014  
                                                               _menu_posi 00DE  
                                                               _horimetro 004F  
                                       __end_ofcriarCaracteresCGRAM@F2956 7ACD  
                                                          ___wmul@product 0084  
                                                               btPress@bt 0080  
                                                              ?_dataLoger 0001  
                                                               _salvarLOG 3BD6  
                                                                _PIE1bits 000F9D  
                                                               blink@line 0080  
                                                         _sp_pressao_rede 00E3  
                                                               _validaRTC 7422  
                                                         _resetParametros 6E3C  
                                                        _horario_de_teste 00E6  
                                             __size_of_configuraTelefones 0386  
                                                                Lcd_Cmd@a 0082  
                                                                _PIR1bits 000F9E  
                                                                i2u553_40 3D38  
                                                                i2u641_40 287C  
                                                                i2u635_40 280C  
                                                                i2u660_40 351A  
                                                                i2u556_40 6F76  
                                                                i2u549_40 3CAC  
                                                                i2u645_40 28C2  
                                                                i2u557_45 6F7A  
                                                                i2u638_40 283A  
                                                                i2u910_47 6DF2  
                                                                i2u655_40 37E6  
                                                                i2u671_40 3756  
                                                                i2u648_40 28FC  
                                                                i2u672_40 3780  
                                                                i2u752_40 2BF8  
                                                                i2u753_40 2BFC  
                                                   ??i2_getDS1307TimeDate 0008  
                                                                i2u668_40 3704  
                                                                i2u668_45 36FA  
                                                                i2u909_47 6EC8  
                                                                i2u678_40 2054  
                                                             ??_Lcd_Clear 0083  
                                                               _sp_jockey 00E2  
                                                     _dtl_posi_visualizar 0053  
                                                              ?_getSerial 00B5  
                                                            setShiftREG@i 0081  
                                            __end_of_criarCaracteresCGRAM 3B12  
                                                   __end_of_intToFloatStr 7A9C  
                                                                _RTC_Init 702C  
                                          __end_of_configuraRegistradores 756E  
                                                              _ADCON0bits 000FC2  
                                                       ___wmul@multiplier 0080  
                                                               _totalLogs 0054  
                                                        _dtl_estacionaria 0056  
                                                        ??_Lcd_Write_Char 0081  
                                                                i2delay@x 0001  
                                               _tempo_limite_estacionaria 00E5  
                                                                _Lcd_Init 78EE  
                                                       i2_writeEEPROM_ext 7110  
                                                               _writeChar 6D0C  
                                                                _Lcd_Port 7308  
                                                       ?_tela_testeBombas 0001  
                                                         _tel_selecionado 006B  
                                                               copy_data0 7718  
                                                               copy_data1 7738  
                                                        _readEEPROM16_ext 7064  
                                                      ?i2_writeEEPROM_ext 0004  
                                                         ??_telaPrincipal 00C2  
                                                      ??_tela_testeBombas 00B5  
                                                __end_of_Lcd_Write_String 4000  
                                                             _dtl_posicao 00FA  
                                                        __size_ofi2_delay 0032  
                                                     __end_of_setShiftREG 7422  
                                                 __end_of_acaoTesteBombas 0DCC  
                                                        __size_of_Lcd_Cmd 002C  
                                                              ?_salvarLOG 0001  
                                                             i2_I2C_Start 6CA8  
                                                             i2_I2C_Write 6CF0  
                                                     ??i2_writeEEPROM_ext 0005  
                                                     _intervalo_teste_dia 00E8  
                                                              ?_validaRTC 0001  
                                                                __Hrparam 0000  
                                                         ??_aguardaBuffer 0095  
                                                                __Lrparam 0000  
                                                   criarCaracteresCGRAM@i 00BB  
                                                   criarCaracteresCGRAM@j 00BA  
                                                   criarCaracteresCGRAM@k 00B9  
                                                        __size_of___awdiv 009A  
                                                        __size_of___ftadd 01D0  
                                                        __size_of___awmod 0086  
                                                        __size_of___ftdiv 00E6  
                                                __size_of_getSinalSIM800L 01A6  
                                                        __size_of___lldiv 0092  
                                                        __size_of___ftmul 00F8  
                                                        __size_of___fttol 00E8  
                                                                __b_menos 0062  
                                                        __size_of___lwdiv 0062  
                                                        __size_of___lwmod 0052  
                                                             _readButtons 77EA  
                                                                ___ftpack 3C9A  
                                                        __size_of__doprnt 07FE  
                                                             BCDtoDEC@val 0080  
                                                     Lcd_Write_Char@tempp 0081  
                                                         ??_clearShiftREG 0080  
                                                        __size_of_btPress 0070  
                                              ??_partidaBombaEstacionaria 0083  
                                                         intToFloatStr@pr 00C0  
                                                                ___lwtoft 6DC4  
                                                             _informacoes 7776  
                                                    _ajusteSP_Bombas$2378 00C2  
                                                            ?_I2C_Restart 0001  
                                                                _base_sec 0071  
                                                         _I2C_Master_Init 7630  
                                                        __size_of_readADC 0028  
                                               __end_ofi2_writeEEPROM_ext 714C  
                                                          lerParametros@i 0095  
                                                                __sec_aux 006F  
                                                           _tempo_partida 006D  
                                                        __size_of_isdigit 0028  
                                                         ___lwdiv@divisor 0082  
                                                         ___lwdiv@counter 0086  
                                                              ?_writeChar 0080  
                                                                __ptext10 2F5C  
                                                                __ptext11 7064  
                                                                __ptext20 2CBA  
                                                                __ptext12 7776  
                                                                __ptext21 1234  
                                                                __ptext13 2996  
                                                                __ptext30 091A  
                                                                __ptext22 2414  
                                                                __ptext14 31A4  
                                                                __ptext31 3BD6  
                                                                __ptext23 7518  
                                                                __ptext15 35DC  
                                                                __ptext40 7392  
                                                                __ptext32 734C  
                                                                __ptext24 397A  
                                                                __ptext16 2E28  
                                                                __ptext41 6FF6  
                                                                __ptext33 74C2  
                                                                __ptext25 3FC6  
                                                                __ptext17 6D88  
                                                                __ptext50 6E14  
                                                                __ptext42 7694  
                                                                __ptext34 6CE4  
                                                                __ptext26 7242  
                                                                __ptext18 1B60  
                                                                __ptext51 6E90  
                                                                __ptext43 3082  
                                                                __ptext35 70D6  
                                                                __ptext27 3B12  
                                                                __ptext19 3A4C  
                                                                __ptext60 7202  
                                                                __ptext52 7470  
                                                                __ptext44 3896  
                                                                __ptext36 7A08  
                                                                __ptext28 1906  
                                                                __ptext61 6F8A  
                                                                __ptext53 75CE  
                                                                __ptext45 15BA  
                                                                __ptext37 7868  
                                                                __ptext29 71C4  
                                                                __ptext70 7308  
                                                                __ptext62 702C  
                                                                __ptext54 6FC0  
                                                                __ptext46 6D0C  
                                                                __ptext38 3DFA  
                                                                __ptext71 7630  
                                                                __ptext63 6CFE  
                                                                __ptext55 709C  
                                                                __ptext47 7188  
                                                                __ptext39 6F20  
                                                                __ptext80 6DA2  
                                                                __ptext72 7976  
                                                                __ptext64 6CD8  
                                                                __ptext56 714C  
                                                                __ptext48 011C  
                                                                __ptext81 7110  
                                                                __ptext65 6CCC  
                                                                __ptext57 3F2E  
                                                                __ptext49 6D2C  
                                                                __ptext90 6DC4  
                                                                __ptext82 6EBC  
                                                                __ptext74 2B3C  
                                                                __ptext66 6D6E  
                                                                __ptext58 3E94  
                                                                __ptext91 36C8  
                                                                __ptext83 6CF0  
                                                                __ptext75 33D2  
                                                                __ptext67 78EE  
                                                                __ptext59 756E  
                                                                __ptext92 34E4  
                                                                __ptext84 6CB4  
                                                                __ptext76 6CC0  
                                                                __ptext68 6D1A  
                                                                __ptext93 3D5E  
                                                                __ptext85 6CA8  
                                                                __ptext77 6F54  
                                                                __ptext69 6E64  
                                                                __ptext94 37B0  
                                                                __ptext86 6D56  
                                                                __ptext78 6D40  
                                                                __ptext95 27C6  
                                                                __ptext87 77EA  
                                                                __ptext79 6EEE  
                                                                __ptext96 3C9A  
                                                                __ptext88 1FCE  
                                                                __ptext97 0000  
                                                                __ptext89 6DEC  
                                                                _ajst_rtc 0068  
                                                        __size_of_sprintf 0048  
                                                        acaoTesteBombas@i 00D8  
                                                    getSinalSIM800L@sinal 00C8  
                                                 __end_of_resetParametros 6E64  
                                                                _enviaSMS 15BA  
                                                                _dtl_hora 005A  
                                                        __size_of_strncmp 009A  
                                                     _comunicarTeste$1193 00BD  
                                                       ??_writeEEPROM_ext 008D  
                                                           __size_of_atoi 00EC  
                                                           __size_of_main 0468  
                                                             ??_dataLoger 00B5  
                                                     _status_estacionaria 00FB  
                                                              strncmp@len 008A  
                                                        _timerTesteBombas 00D9  
                                                                blink@end 0083  
                                                                _tel_posi 00DC  
                                               _criarCaracteresCGRAM$1375 00B7  
                                                                int$flags 007D  
                                                                atoi@sign 00C3  
                                                             ??_getSerial 00B8  
                                                      _telaPrincipal$2377 00C2  
                                                  __size_of_drenarPressao 0034  
                                                              _INTCONbits 000FF2  
                                                              i2_I2C_Read 6F54  
                                                              i2_I2C_Wait 6D56  
                                                              i2_I2C_Stop 6CB4  
                                                             _setShiftREG 73DA  
                                                                isdigit@c 0082  
                                                                memset@p1 0080  
                                                              i2_BCDtoDEC 6D40  
                                                             DECtoBCD@res 0089  
                                                             DECtoBCD@val 0088  
                                                                intlevel2 0006  
                                                               sprintf@ap 00AF  
                                                               sprintf@pb 00B1  
                                                               sprintf@wh 00A1  
                                                       _ocorrendoIncendio 00F2  
                                                    _criarCaracteresCGRAM 3A4C  
                                                               strchr@chr 0082  
                                                        ___lwmod@dividend 0087  
                                                               strchr@ptr 0080  
                                                        ___lldiv@dividend 0080  
                                         i2getDS1307TimeDate@ptrToUserVal 0006  
                                           getDS1307TimeDate@ptrToUserVal 008C  
                                                             ??_salvarLOG 008E  
                                                        ?_acaoTesteBombas 0001  
                                                 __size_of_comunicarTeste 01E2  
                                                             ??_validaRTC 0080  
                                                               strncmp@s1 0086  
                                                               strncmp@s2 0088  
                                                          _dataLoger$1443 00BC  
                                                          _dataLoger$1437 00BA  
                                                          _dataLoger$1448 00BE  
                                                        aguardaBuffer@str 0093  
                                                       _getDS1307TimeDate 2E28  
                                                       _setDS1307TimeDate 32C0  
                                                                printf@ap 00B5  
                                                                printf@pb 00B7  
                                                            getSerial@end 00B7  
                                                            getSerial@ret 00BD  
                                                            getSerial@str 00B5  
                                                 __end_of_I2C_Master_Init 7694  
                                                      ?_getDS1307TimeDate 008C  
                                                      ?_setDS1307TimeDate 008C  
                                                      Lcd_Set_Cursor@temp 0087  
                                                              i2_RTC_Init 6EEE  
                                                                sprintf@f 00A3  
                                                 ?_configurarEstacionaria 0001  
                                                        ___lldiv@quotient 0088  
                                                             _qtd_leitura 006E  
                                                         ___lwmod@divisor 0089  
                                              __size_ofi2_writeEEPROM_ext 003C  
                                                                strlen@cp 0084  
                                                         ___lwmod@counter 008B  
                                                     ??_getDS1307TimeDate 008E  
                                                     ??_setDS1307TimeDate 008E  
                                                       ??_getSinalSIM800L 00C6  
                                                            _sp_principal 00E1  
                                                                strstr@s1 008F  
                                                                strstr@s2 0091  
                                                             ??_writeChar 0082  
                                                  __size_of_lerParametros 0126  
                                                   ?_criarCaracteresCGRAM 0001  
                                                        ?_resetParametros 0001  
                                                           _sub_menu_posi 006A  
                                                             _option_posi 00DF  
                                                           _drenarPressao 6F20  
                                         _tempo_limite_teste_estacionaria 00E4  
                                               __end_of_getDS1307TimeDate 2F5C  
                                               __end_of_setDS1307TimeDate 33D2  
