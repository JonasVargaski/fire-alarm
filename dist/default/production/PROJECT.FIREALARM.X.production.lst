

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jul 18 09:57:46 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1
   109                           	psect	text91,global,reloc=2,class=CODE,delta=1
   110                           	psect	text92,global,reloc=2,class=CODE,delta=1
   111                           	psect	text93,global,reloc=2,class=CODE,delta=1
   112                           	psect	text94,global,reloc=2,class=CODE,delta=1
   113                           	psect	text95,global,reloc=2,class=CODE,delta=1
   114                           	psect	text96,global,reloc=2,class=CODE,delta=1
   115                           	psect	text97,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.45
   122                           ; Generated 16/11/2017 GMT
   123                           ; 
   124                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F452 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataCOMRAM
   157  006B5C                     __pidataCOMRAM:
   158                           	opt stack 0
   159                           
   160                           ;initializer for _timerVerificarSinal
   161  006B5C  05                 	db	5
   162                           
   163                           	psect	idataBANK0
   164  006B5D                     __pidataBANK0:
   165                           	opt stack 0
   166                           
   167                           ;initializer for _dtl_posicao
   168  006B5D  3C                 	db	60
   169                           
   170                           ;initializer for _status_estacionaria
   171  006B5E  01                 	db	1
   172                           
   173                           ;initializer for _status_principal
   174  006B5F  01                 	db	1
   175                           
   176                           ;initializer for _status_jockey
   177  006B60  01                 	db	1
   178                           
   179                           ;initializer for _intervalo_teste_dia
   180  006B61  0F                 	db	15
   181                           
   182                           ;initializer for _timerIntervaloEntreBombas
   183  006B62  0A                 	db	10
   184                           
   185                           ;initializer for _intensidadeSinal
   186  006B63  20                 	db	32
   187                           
   188                           	psect	idataBANK1
   189  006B64                     __pidataBANK1:
   190                           	opt stack 0
   191                           
   192                           ;initializer for intToFloatStr@F2544
   193  006B64  20                 	db	32
   194  006B65  20                 	db	32
   195  006B66  20                 	db	32
   196  006B67  20                 	db	32
   197                           
   198                           ;initializer for _ultimoEstadoLCD
   199  006B68  0064               	dw	100
   200  006B6A  0000               	dw	0
   201                           
   202                           	psect	mediumconst
   203  007A70                     __pmediumconst:
   204                           	opt stack 0
   205  007A70  00                 	db	0
   206  007A71                     criarCaracteresCGRAM@F2966:
   207                           	opt stack 0
   208  007A71  00                 	db	0
   209  007A72  1F                 	db	31
   210  007A73  0E                 	db	14
   211  007A74  04                 	db	4
   212  007A75  04                 	db	4
   213  007A76  04                 	db	4
   214  007A77  04                 	db	4
   215  007A78  04                 	db	4
   216  007A79  00                 	db	0
   217  007A7A  00                 	db	0
   218  007A7B  00                 	db	0
   219  007A7C  00                 	db	0
   220  007A7D  00                 	db	0
   221  007A7E  10                 	db	16
   222  007A7F  10                 	db	16
   223  007A80  10                 	db	16
   224  007A81  00                 	db	0
   225  007A82  00                 	db	0
   226  007A83  00                 	db	0
   227  007A84  04                 	db	4
   228  007A85  04                 	db	4
   229  007A86  14                 	db	20
   230  007A87  14                 	db	20
   231  007A88  14                 	db	20
   232  007A89  00                 	db	0
   233  007A8A  01                 	db	1
   234  007A8B  01                 	db	1
   235  007A8C  05                 	db	5
   236  007A8D  05                 	db	5
   237  007A8E  15                 	db	21
   238  007A8F  15                 	db	21
   239  007A90  15                 	db	21
   240  007A91  0A                 	db	10
   241  007A92  0A                 	db	10
   242  007A93  1F                 	db	31
   243  007A94  11                 	db	17
   244  007A95  11                 	db	17
   245  007A96  0E                 	db	14
   246  007A97  04                 	db	4
   247  007A98  04                 	db	4
   248  007A99  00                 	db	0
   249  007A9A  00                 	db	0
   250  007A9B  00                 	db	0
   251  007A9C  00                 	db	0
   252  007A9D  00                 	db	0
   253  007A9E  00                 	db	0
   254  007A9F  00                 	db	0
   255  007AA0  00                 	db	0
   256  007AA1                     __end_ofcriarCaracteresCGRAM@F2966:
   257                           	opt stack 0
   258  007AA1                     _dpowers:
   259                           	opt stack 0
   260  007AA1  0001               	dw	1
   261  007AA3  000A               	dw	10
   262  007AA5  0064               	dw	100
   263  007AA7  03E8               	dw	1000
   264  007AA9  2710               	dw	10000
   265  007AAB                     __end_of_dpowers:
   266                           	opt stack 0
   267  0000                     _SSPBUF	set	4041
   268  0000                     _SSPSTAT	set	4039
   269  0000                     _SSPADD	set	4040
   270  0000                     _SSPCON2	set	4037
   271  0000                     _SSPCON1	set	4038
   272  0000                     _RCREG	set	4014
   273  0000                     _TMR0L	set	4054
   274  0000                     _TMR0H	set	4055
   275  0000                     _LATCbits	set	3979
   276  0000                     _LATEbits	set	3981
   277  0000                     _LATDbits	set	3980
   278  0000                     _LATAbits	set	3977
   279  0000                     _PORTBbits	set	3969
   280  0000                     _TXREG	set	4013
   281  0000                     _ADRESL	set	4035
   282  0000                     _ADRESH	set	4036
   283  0000                     _ADCON0bits	set	4034
   284  0000                     _PORTCbits	set	3970
   285  0000                     _PORTEbits	set	3972
   286  0000                     _PORTDbits	set	3971
   287  0000                     _TRISEbits	set	3990
   288  0000                     _TRISBbits	set	3987
   289  0000                     _PIE1bits	set	3997
   290  0000                     _PIR1bits	set	3998
   291  0000                     _INTCONbits	set	4082
   292  0000                     _SPBRG	set	4015
   293  0000                     _RCSTAbits	set	4011
   294  0000                     _TXSTAbits	set	4012
   295  0000                     _TRISCbits	set	3988
   296  0000                     _TRISDbits	set	3989
   297  0000                     _INTCON3	set	4080
   298  0000                     _INTCON2	set	4081
   299  0000                     _INTCON	set	4082
   300  0000                     _T0CON	set	4053
   301  0000                     _PORTAbits	set	3968
   302  0000                     _TRISAbits	set	3986
   303  0000                     _ADCON1	set	4033
   304  0000                     _ADCON0	set	4034
   305  0000                     _ACKEN	set	32300
   306  0000                     _ACKDT	set	32301
   307  0000                     _RCEN	set	32299
   308  0000                     _PEN	set	32298
   309  0000                     _RSEN	set	32297
   310  0000                     _SEN	set	32296
   311  0000                     _RCIF	set	31989
   312  0000                     _TMR0IF	set	32658
   313  007AAB                     STR_14:
   314                           
   315                           ; BSR set to: 1
   316  007AAB  54                 	db	84	;'T'
   317  007AAC  45                 	db	69	;'E'
   318  007AAD  43                 	db	67	;'C'
   319  007AAE  48                 	db	72	;'H'
   320  007AAF  4E                 	db	78	;'N'
   321  007AB0  4F                 	db	79	;'O'
   322  007AB1  57                 	db	87	;'W'
   323  007AB2  20                 	db	32
   324  007AB3  53                 	db	83	;'S'
   325  007AB4  69                 	db	105	;'i'
   326  007AB5  73                 	db	115	;'s'
   327  007AB6  74                 	db	116	;'t'
   328  007AB7  65                 	db	101	;'e'
   329  007AB8  6D                 	db	109	;'m'
   330  007AB9  61                 	db	97	;'a'
   331  007ABA  73                 	db	115	;'s'
   332  007ABB  20                 	db	32
   333  007ABC  65                 	db	101	;'e'
   334  007ABD  6D                 	db	109	;'m'
   335  007ABE  62                 	db	98	;'b'
   336  007ABF  61                 	db	97	;'a'
   337  007AC0  72                 	db	114	;'r'
   338  007AC1  63                 	db	99	;'c'
   339  007AC2  61                 	db	97	;'a'
   340  007AC3  64                 	db	100	;'d'
   341  007AC4  6F                 	db	111	;'o'
   342  007AC5  73                 	db	115	;'s'
   343  007AC6  0D                 	db	13
   344  007AC7  0A                 	db	10
   345  007AC8  0D                 	db	13
   346  007AC9  0A                 	db	10
   347  007ACA  54                 	db	84	;'T'
   348  007ACB  65                 	db	101	;'e'
   349  007ACC  73                 	db	115	;'s'
   350  007ACD  74                 	db	116	;'t'
   351  007ACE  65                 	db	101	;'e'
   352  007ACF  20                 	db	32
   353  007AD0  6D                 	db	109	;'m'
   354  007AD1  61                 	db	97	;'a'
   355  007AD2  6E                 	db	110	;'n'
   356  007AD3  75                 	db	117	;'u'
   357  007AD4  61                 	db	97	;'a'
   358  007AD5  6C                 	db	108	;'l'
   359  007AD6  20                 	db	32
   360  007AD7  64                 	db	100	;'d'
   361  007AD8  65                 	db	101	;'e'
   362  007AD9  20                 	db	32
   363  007ADA  63                 	db	99	;'c'
   364  007ADB  6F                 	db	111	;'o'
   365  007ADC  6D                 	db	109	;'m'
   366  007ADD  75                 	db	117	;'u'
   367  007ADE  6E                 	db	110	;'n'
   368  007ADF  69                 	db	105	;'i'
   369  007AE0  63                 	db	99	;'c'
   370  007AE1  61                 	db	97	;'a'
   371  007AE2  63                 	db	99	;'c'
   372  007AE3  61                 	db	97	;'a'
   373  007AE4  6F                 	db	111	;'o'
   374  007AE5  2E                 	db	46
   375  007AE6  0D                 	db	13
   376  007AE7  0A                 	db	10
   377  007AE8  44                 	db	68	;'D'
   378  007AE9  61                 	db	97	;'a'
   379  007AEA  74                 	db	116	;'t'
   380  007AEB  61                 	db	97	;'a'
   381  007AEC  3A                 	db	58	;':'
   382  007AED  20                 	db	32
   383  007AEE  25                 	db	37
   384  007AEF  30                 	db	48	;'0'
   385  007AF0  32                 	db	50	;'2'
   386  007AF1  64                 	db	100	;'d'
   387  007AF2  2F                 	db	47
   388  007AF3  25                 	db	37
   389  007AF4  30                 	db	48	;'0'
   390  007AF5  32                 	db	50	;'2'
   391  007AF6  64                 	db	100	;'d'
   392  007AF7  2F                 	db	47
   393  007AF8  25                 	db	37
   394  007AF9  30                 	db	48	;'0'
   395  007AFA  32                 	db	50	;'2'
   396  007AFB  64                 	db	100	;'d'
   397  007AFC  20                 	db	32
   398  007AFD  25                 	db	37
   399  007AFE  30                 	db	48	;'0'
   400  007AFF  32                 	db	50	;'2'
   401  007B00  64                 	db	100	;'d'
   402  007B01  3A                 	db	58	;':'
   403  007B02  25                 	db	37
   404  007B03  30                 	db	48	;'0'
   405  007B04  32                 	db	50	;'2'
   406  007B05  64                 	db	100	;'d'
   407  007B06  3A                 	db	58	;':'
   408  007B07  25                 	db	37
   409  007B08  30                 	db	48	;'0'
   410  007B09  32                 	db	50	;'2'
   411  007B0A  64                 	db	100	;'d'
   412  007B0B  0D                 	db	13
   413  007B0C  0A                 	db	10
   414  007B0D  0D                 	db	13
   415  007B0E  0A                 	db	10
   416  007B0F  0D                 	db	13
   417  007B10  0A                 	db	10
   418  007B11  56                 	db	86	;'V'
   419  007B12  65                 	db	101	;'e'
   420  007B13  72                 	db	114	;'r'
   421  007B14  73                 	db	115	;'s'
   422  007B15  61                 	db	97	;'a'
   423  007B16  6F                 	db	111	;'o'
   424  007B17  20                 	db	32
   425  007B18  64                 	db	100	;'d'
   426  007B19  6F                 	db	111	;'o'
   427  007B1A  20                 	db	32
   428  007B1B  73                 	db	115	;'s'
   429  007B1C  69                 	db	105	;'i'
   430  007B1D  73                 	db	115	;'s'
   431  007B1E  74                 	db	116	;'t'
   432  007B1F  65                 	db	101	;'e'
   433  007B20  6D                 	db	109	;'m'
   434  007B21  61                 	db	97	;'a'
   435  007B22  3A                 	db	58	;':'
   436  007B23  20                 	db	32
   437  007B24  25                 	db	37
   438  007B25  73                 	db	115	;'s'
   439  007B26  0D                 	db	13
   440  007B27  0A                 	db	10
   441  007B28  00                 	db	0
   442  007B29                     STR_26:
   443                           
   444                           ; BSR set to: 1
   445  007B29  54                 	db	84	;'T'
   446  007B2A  45                 	db	69	;'E'
   447  007B2B  53                 	db	83	;'S'
   448  007B2C  54                 	db	84	;'T'
   449  007B2D  45                 	db	69	;'E'
   450  007B2E  20                 	db	32
   451  007B2F  44                 	db	68	;'D'
   452  007B30  45                 	db	69	;'E'
   453  007B31  20                 	db	32
   454  007B32  42                 	db	66	;'B'
   455  007B33  4F                 	db	79	;'O'
   456  007B34  4D                 	db	77	;'M'
   457  007B35  42                 	db	66	;'B'
   458  007B36  41                 	db	65	;'A'
   459  007B37  53                 	db	83	;'S'
   460  007B38  20                 	db	32
   461  007B39  52                 	db	82	;'R'
   462  007B3A  45                 	db	69	;'E'
   463  007B3B  41                 	db	65	;'A'
   464  007B3C  4C                 	db	76	;'L'
   465  007B3D  49                 	db	73	;'I'
   466  007B3E  5A                 	db	90	;'Z'
   467  007B3F  41                 	db	65	;'A'
   468  007B40  44                 	db	68	;'D'
   469  007B41  4F                 	db	79	;'O'
   470  007B42  0D                 	db	13
   471  007B43  0A                 	db	10
   472  007B44  45                 	db	69	;'E'
   473  007B45  4D                 	db	77	;'M'
   474  007B46  20                 	db	32
   475  007B47  25                 	db	37
   476  007B48  30                 	db	48	;'0'
   477  007B49  32                 	db	50	;'2'
   478  007B4A  64                 	db	100	;'d'
   479  007B4B  3A                 	db	58	;':'
   480  007B4C  25                 	db	37
   481  007B4D  30                 	db	48	;'0'
   482  007B4E  32                 	db	50	;'2'
   483  007B4F  64                 	db	100	;'d'
   484  007B50  3A                 	db	58	;':'
   485  007B51  25                 	db	37
   486  007B52  30                 	db	48	;'0'
   487  007B53  32                 	db	50	;'2'
   488  007B54  64                 	db	100	;'d'
   489  007B55  20                 	db	32
   490  007B56  25                 	db	37
   491  007B57  30                 	db	48	;'0'
   492  007B58  32                 	db	50	;'2'
   493  007B59  64                 	db	100	;'d'
   494  007B5A  2F                 	db	47
   495  007B5B  25                 	db	37
   496  007B5C  30                 	db	48	;'0'
   497  007B5D  32                 	db	50	;'2'
   498  007B5E  64                 	db	100	;'d'
   499  007B5F  2F                 	db	47
   500  007B60  25                 	db	37
   501  007B61  30                 	db	48	;'0'
   502  007B62  32                 	db	50	;'2'
   503  007B63  64                 	db	100	;'d'
   504  007B64  0D                 	db	13
   505  007B65  0A                 	db	10
   506  007B66  4A                 	db	74	;'J'
   507  007B67  4F                 	db	79	;'O'
   508  007B68  43                 	db	67	;'C'
   509  007B69  4B                 	db	75	;'K'
   510  007B6A  45                 	db	69	;'E'
   511  007B6B  59                 	db	89	;'Y'
   512  007B6C  3A                 	db	58	;':'
   513  007B6D  20                 	db	32
   514  007B6E  25                 	db	37
   515  007B6F  73                 	db	115	;'s'
   516  007B70  0D                 	db	13
   517  007B71  0A                 	db	10
   518  007B72  50                 	db	80	;'P'
   519  007B73  52                 	db	82	;'R'
   520  007B74  49                 	db	73	;'I'
   521  007B75  4E                 	db	78	;'N'
   522  007B76  43                 	db	67	;'C'
   523  007B77  49                 	db	73	;'I'
   524  007B78  50                 	db	80	;'P'
   525  007B79  41                 	db	65	;'A'
   526  007B7A  4C                 	db	76	;'L'
   527  007B7B  3A                 	db	58	;':'
   528  007B7C  20                 	db	32
   529  007B7D  25                 	db	37
   530  007B7E  73                 	db	115	;'s'
   531  007B7F  0D                 	db	13
   532  007B80  0A                 	db	10
   533  007B81  43                 	db	67	;'C'
   534  007B82  4F                 	db	79	;'O'
   535  007B83  4D                 	db	77	;'M'
   536  007B84  42                 	db	66	;'B'
   537  007B85  55                 	db	85	;'U'
   538  007B86  53                 	db	83	;'S'
   539  007B87  54                 	db	84	;'T'
   540  007B88  41                 	db	65	;'A'
   541  007B89  4F                 	db	79	;'O'
   542  007B8A  3A                 	db	58	;':'
   543  007B8B  20                 	db	32
   544  007B8C  25                 	db	37
   545  007B8D  73                 	db	115	;'s'
   546  007B8E  0D                 	db	13
   547  007B8F  0A                 	db	10
   548  007B90  00                 	db	0
   549  007B91                     STR_25:
   550                           
   551                           ; BSR set to: 1
   552  007B91  44                 	db	68	;'D'
   553  007B92  49                 	db	73	;'I'
   554  007B93  53                 	db	83	;'S'
   555  007B94  50                 	db	80	;'P'
   556  007B95  41                 	db	65	;'A'
   557  007B96  52                 	db	82	;'R'
   558  007B97  4F                 	db	79	;'O'
   559  007B98  20                 	db	32
   560  007B99  41                 	db	65	;'A'
   561  007B9A  4C                 	db	76	;'L'
   562  007B9B  41                 	db	65	;'A'
   563  007B9C  52                 	db	82	;'R'
   564  007B9D  4D                 	db	77	;'M'
   565  007B9E  45                 	db	69	;'E'
   566  007B9F  20                 	db	32
   567  007BA0  44                 	db	68	;'D'
   568  007BA1  45                 	db	69	;'E'
   569  007BA2  20                 	db	32
   570  007BA3  49                 	db	73	;'I'
   571  007BA4  4E                 	db	78	;'N'
   572  007BA5  43                 	db	67	;'C'
   573  007BA6  45                 	db	69	;'E'
   574  007BA7  4E                 	db	78	;'N'
   575  007BA8  44                 	db	68	;'D'
   576  007BA9  49                 	db	73	;'I'
   577  007BAA  4F                 	db	79	;'O'
   578  007BAB  0D                 	db	13
   579  007BAC  0A                 	db	10
   580  007BAD  45                 	db	69	;'E'
   581  007BAE  4D                 	db	77	;'M'
   582  007BAF  20                 	db	32
   583  007BB0  25                 	db	37
   584  007BB1  30                 	db	48	;'0'
   585  007BB2  32                 	db	50	;'2'
   586  007BB3  64                 	db	100	;'d'
   587  007BB4  3A                 	db	58	;':'
   588  007BB5  25                 	db	37
   589  007BB6  30                 	db	48	;'0'
   590  007BB7  32                 	db	50	;'2'
   591  007BB8  64                 	db	100	;'d'
   592  007BB9  3A                 	db	58	;':'
   593  007BBA  25                 	db	37
   594  007BBB  30                 	db	48	;'0'
   595  007BBC  32                 	db	50	;'2'
   596  007BBD  64                 	db	100	;'d'
   597  007BBE  20                 	db	32
   598  007BBF  25                 	db	37
   599  007BC0  30                 	db	48	;'0'
   600  007BC1  32                 	db	50	;'2'
   601  007BC2  64                 	db	100	;'d'
   602  007BC3  2F                 	db	47
   603  007BC4  25                 	db	37
   604  007BC5  30                 	db	48	;'0'
   605  007BC6  32                 	db	50	;'2'
   606  007BC7  64                 	db	100	;'d'
   607  007BC8  2F                 	db	47
   608  007BC9  25                 	db	37
   609  007BCA  30                 	db	48	;'0'
   610  007BCB  32                 	db	50	;'2'
   611  007BCC  64                 	db	100	;'d'
   612  007BCD  0D                 	db	13
   613  007BCE  0A                 	db	10
   614  007BCF  00                 	db	0
   615  007BD0                     STR_79:
   616                           
   617                           ; BSR set to: 1
   618  007BD0  44                 	db	68	;'D'
   619  007BD1  61                 	db	97	;'a'
   620  007BD2  74                 	db	116	;'t'
   621  007BD3  61                 	db	97	;'a'
   622  007BD4  3A                 	db	58	;':'
   623  007BD5  20                 	db	32
   624  007BD6  25                 	db	37
   625  007BD7  30                 	db	48	;'0'
   626  007BD8  32                 	db	50	;'2'
   627  007BD9  64                 	db	100	;'d'
   628  007BDA  2F                 	db	47
   629  007BDB  25                 	db	37
   630  007BDC  30                 	db	48	;'0'
   631  007BDD  32                 	db	50	;'2'
   632  007BDE  64                 	db	100	;'d'
   633  007BDF  2F                 	db	47
   634  007BE0  25                 	db	37
   635  007BE1  30                 	db	48	;'0'
   636  007BE2  32                 	db	50	;'2'
   637  007BE3  64                 	db	100	;'d'
   638  007BE4  20                 	db	32
   639  007BE5  25                 	db	37
   640  007BE6  30                 	db	48	;'0'
   641  007BE7  32                 	db	50	;'2'
   642  007BE8  64                 	db	100	;'d'
   643  007BE9  3A                 	db	58	;':'
   644  007BEA  25                 	db	37
   645  007BEB  30                 	db	48	;'0'
   646  007BEC  32                 	db	50	;'2'
   647  007BED  64                 	db	100	;'d'
   648  007BEE  00                 	db	0
   649  007BEF                     STR_92:
   650                           
   651                           ; BSR set to: 1
   652  007BEF  25                 	db	37
   653  007BF0  64                 	db	100	;'d'
   654  007BF1  2D                 	db	45
   655  007BF2  25                 	db	37
   656  007BF3  64                 	db	100	;'d'
   657  007BF4  2D                 	db	45
   658  007BF5  25                 	db	37
   659  007BF6  64                 	db	100	;'d'
   660  007BF7  2D                 	db	45
   661  007BF8  25                 	db	37
   662  007BF9  64                 	db	100	;'d'
   663  007BFA  2D                 	db	45
   664  007BFB  25                 	db	37
   665  007BFC  64                 	db	100	;'d'
   666  007BFD  2D                 	db	45
   667  007BFE  25                 	db	37
   668  007BFF  64                 	db	100	;'d'
   669  007C00  20                 	db	32
   670  007C01  3E                 	db	62	;'>'
   671  007C02  20                 	db	32
   672  007C03  25                 	db	37
   673  007C04  64                 	db	100	;'d'
   674  007C05  2D                 	db	45
   675  007C06  25                 	db	37
   676  007C07  64                 	db	100	;'d'
   677  007C08  00                 	db	0
   678  007C09                     STR_58:
   679                           
   680                           ; BSR set to: 1
   681  007C09  20                 	db	32
   682  007C0A  25                 	db	37
   683  007C0B  30                 	db	48	;'0'
   684  007C0C  32                 	db	50	;'2'
   685  007C0D  64                 	db	100	;'d'
   686  007C0E  3A                 	db	58	;':'
   687  007C0F  25                 	db	37
   688  007C10  30                 	db	48	;'0'
   689  007C11  32                 	db	50	;'2'
   690  007C12  64                 	db	100	;'d'
   691  007C13  20                 	db	32
   692  007C14  25                 	db	37
   693  007C15  30                 	db	48	;'0'
   694  007C16  32                 	db	50	;'2'
   695  007C17  64                 	db	100	;'d'
   696  007C18  2F                 	db	47
   697  007C19  25                 	db	37
   698  007C1A  30                 	db	48	;'0'
   699  007C1B  32                 	db	50	;'2'
   700  007C1C  64                 	db	100	;'d'
   701  007C1D  00                 	db	0
   702  007C1E                     STR_63:
   703                           
   704                           ; BSR set to: 1
   705  007C1E  20                 	db	32
   706  007C1F  2A                 	db	42
   707  007C20  66                 	db	102	;'f'
   708  007C21  61                 	db	97	;'a'
   709  007C22  6C                 	db	108	;'l'
   710  007C23  68                 	db	104	;'h'
   711  007C24  61                 	db	97	;'a'
   712  007C25  20                 	db	32
   713  007C26  42                 	db	66	;'B'
   714  007C27  2E                 	db	46
   715  007C28  20                 	db	32
   716  007C29  70                 	db	112	;'p'
   717  007C2A  72                 	db	114	;'r'
   718  007C2B  69                 	db	105	;'i'
   719  007C2C  6E                 	db	110	;'n'
   720  007C2D  63                 	db	99	;'c'
   721  007C2E  69                 	db	105	;'i'
   722  007C2F  70                 	db	112	;'p'
   723  007C30  61                 	db	97	;'a'
   724  007C31  6C                 	db	108	;'l'
   725  007C32  00                 	db	0
   726  007C33                     STR_64:
   727                           
   728                           ; BSR set to: 1
   729  007C33  20                 	db	32
   730  007C34  2A                 	db	42
   731  007C35  66                 	db	102	;'f'
   732  007C36  61                 	db	97	;'a'
   733  007C37  6C                 	db	108	;'l'
   734  007C38  68                 	db	104	;'h'
   735  007C39  61                 	db	97	;'a'
   736  007C3A  20                 	db	32
   737  007C3B  42                 	db	66	;'B'
   738  007C3C  2E                 	db	46
   739  007C3D  20                 	db	32
   740  007C3E  63                 	db	99	;'c'
   741  007C3F  6F                 	db	111	;'o'
   742  007C40  6D                 	db	109	;'m'
   743  007C41  62                 	db	98	;'b'
   744  007C42  75                 	db	117	;'u'
   745  007C43  73                 	db	115	;'s'
   746  007C44  74                 	db	116	;'t'
   747  007C45  61                 	db	97	;'a'
   748  007C46  6F                 	db	111	;'o'
   749  007C47  00                 	db	0
   750  007C48                     STR_73:
   751                           
   752                           ; BSR set to: 1
   753  007C48  23                 	db	35
   754  007C49  50                 	db	80	;'P'
   755  007C4A  72                 	db	114	;'r'
   756  007C4B  6F                 	db	111	;'o'
   757  007C4C  78                 	db	120	;'x'
   758  007C4D  69                 	db	105	;'i'
   759  007C4E  6D                 	db	109	;'m'
   760  007C4F  6F                 	db	111	;'o'
   761  007C50  20                 	db	32
   762  007C51  65                 	db	101	;'e'
   763  007C52  6D                 	db	109	;'m'
   764  007C53  20                 	db	32
   765  007C54  25                 	db	37
   766  007C55  32                 	db	50	;'2'
   767  007C56  64                 	db	100	;'d'
   768  007C57  20                 	db	32
   769  007C58  64                 	db	100	;'d'
   770  007C59  69                 	db	105	;'i'
   771  007C5A  61                 	db	97	;'a'
   772  007C5B  73                 	db	115	;'s'
   773  007C5C  00                 	db	0
   774  007C5D                     STR_38:
   775                           
   776                           ; BSR set to: 1
   777  007C5D  44                 	db	68	;'D'
   778  007C5E  65                 	db	101	;'e'
   779  007C5F  73                 	db	115	;'s'
   780  007C60  70                 	db	112	;'p'
   781  007C61  72                 	db	114	;'r'
   782  007C62  65                 	db	101	;'e'
   783  007C63  73                 	db	115	;'s'
   784  007C64  73                 	db	115	;'s'
   785  007C65  75                 	db	117	;'u'
   786  007C66  72                 	db	114	;'r'
   787  007C67  69                 	db	105	;'i'
   788  007C68  7A                 	db	122	;'z'
   789  007C69  61                 	db	97	;'a'
   790  007C6A  6E                 	db	110	;'n'
   791  007C6B  64                 	db	100	;'d'
   792  007C6C  6F                 	db	111	;'o'
   793  007C6D  2E                 	db	46
   794  007C6E  2E                 	db	46
   795  007C6F  2E                 	db	46
   796  007C70  00                 	db	0
   797  007C71                     STR_65:
   798                           
   799                           ; BSR set to: 1
   800  007C71  20                 	db	32
   801  007C72  41                 	db	65	;'A'
   802  007C73  4C                 	db	76	;'L'
   803  007C74  45                 	db	69	;'E'
   804  007C75  52                 	db	82	;'R'
   805  007C76  54                 	db	84	;'T'
   806  007C77  41                 	db	65	;'A'
   807  007C78  20                 	db	32
   808  007C79  44                 	db	68	;'D'
   809  007C7A  45                 	db	69	;'E'
   810  007C7B  20                 	db	32
   811  007C7C  49                 	db	73	;'I'
   812  007C7D  4E                 	db	78	;'N'
   813  007C7E  43                 	db	67	;'C'
   814  007C7F  45                 	db	69	;'E'
   815  007C80  4E                 	db	78	;'N'
   816  007C81  44                 	db	68	;'D'
   817  007C82  49                 	db	73	;'I'
   818  007C83  4F                 	db	79	;'O'
   819  007C84  00                 	db	0
   820  007C85                     STR_61:
   821                           
   822                           ; BSR set to: 1
   823  007C85  20                 	db	32
   824  007C86  2A                 	db	42
   825  007C87  66                 	db	102	;'f'
   826  007C88  61                 	db	97	;'a'
   827  007C89  6C                 	db	108	;'l'
   828  007C8A  68                 	db	104	;'h'
   829  007C8B  61                 	db	97	;'a'
   830  007C8C  20                 	db	32
   831  007C8D  76                 	db	118	;'v'
   832  007C8E  61                 	db	97	;'a'
   833  007C8F  6C                 	db	108	;'l'
   834  007C90  2E                 	db	46
   835  007C91  20                 	db	32
   836  007C92  6C                 	db	108	;'l'
   837  007C93  61                 	db	97	;'a'
   838  007C94  64                 	db	100	;'d'
   839  007C95  72                 	db	114	;'r'
   840  007C96  61                 	db	97	;'a'
   841  007C97  6F                 	db	111	;'o'
   842  007C98  00                 	db	0
   843  007C99                     STR_74:
   844                           
   845                           ; BSR set to: 1
   846  007C99  49                 	db	73	;'I'
   847  007C9A  4E                 	db	78	;'N'
   848  007C9B  54                 	db	84	;'T'
   849  007C9C  45                 	db	69	;'E'
   850  007C9D  52                 	db	82	;'R'
   851  007C9E  56                 	db	86	;'V'
   852  007C9F  41                 	db	65	;'A'
   853  007CA0  4C                 	db	76	;'L'
   854  007CA1  4F                 	db	79	;'O'
   855  007CA2  3A                 	db	58	;':'
   856  007CA3  20                 	db	32
   857  007CA4  25                 	db	37
   858  007CA5  32                 	db	50	;'2'
   859  007CA6  64                 	db	100	;'d'
   860  007CA7  20                 	db	32
   861  007CA8  64                 	db	100	;'d'
   862  007CA9  69                 	db	105	;'i'
   863  007CAA  61                 	db	97	;'a'
   864  007CAB  73                 	db	115	;'s'
   865  007CAC  00                 	db	0
   866  007CAD                     STR_75:
   867                           
   868                           ; BSR set to: 1
   869  007CAD  48                 	db	72	;'H'
   870  007CAE  4F                 	db	79	;'O'
   871  007CAF  52                 	db	82	;'R'
   872  007CB0  41                 	db	65	;'A'
   873  007CB1  52                 	db	82	;'R'
   874  007CB2  49                 	db	73	;'I'
   875  007CB3  4F                 	db	79	;'O'
   876  007CB4  3A                 	db	58	;':'
   877  007CB5  20                 	db	32
   878  007CB6  25                 	db	37
   879  007CB7  30                 	db	48	;'0'
   880  007CB8  32                 	db	50	;'2'
   881  007CB9  64                 	db	100	;'d'
   882  007CBA  20                 	db	32
   883  007CBB  68                 	db	104	;'h'
   884  007CBC  6F                 	db	111	;'o'
   885  007CBD  72                 	db	114	;'r'
   886  007CBE  61                 	db	97	;'a'
   887  007CBF  73                 	db	115	;'s'
   888  007CC0  00                 	db	0
   889  007CC1                     STR_91:
   890                           
   891                           ; BSR set to: 1
   892  007CC1  53                 	db	83	;'S'
   893  007CC2  69                 	db	105	;'i'
   894  007CC3  73                 	db	115	;'s'
   895  007CC4  74                 	db	116	;'t'
   896  007CC5  65                 	db	101	;'e'
   897  007CC6  6D                 	db	109	;'m'
   898  007CC7  61                 	db	97	;'a'
   899  007CC8  73                 	db	115	;'s'
   900  007CC9  20                 	db	32
   901  007CCA  65                 	db	101	;'e'
   902  007CCB  6D                 	db	109	;'m'
   903  007CCC  62                 	db	98	;'b'
   904  007CCD  61                 	db	97	;'a'
   905  007CCE  72                 	db	114	;'r'
   906  007CCF  63                 	db	99	;'c'
   907  007CD0  61                 	db	97	;'a'
   908  007CD1  64                 	db	100	;'d'
   909  007CD2  6F                 	db	111	;'o'
   910  007CD3  73                 	db	115	;'s'
   911  007CD4  00                 	db	0
   912  007CD5                     STR_68:
   913                           
   914                           ; BSR set to: 1
   915  007CD5  20                 	db	32
   916  007CD6  50                 	db	80	;'P'
   917  007CD7  72                 	db	114	;'r'
   918  007CD8  65                 	db	101	;'e'
   919  007CD9  73                 	db	115	;'s'
   920  007CDA  73                 	db	115	;'s'
   921  007CDB  20                 	db	32
   922  007CDC  45                 	db	69	;'E'
   923  007CDD  53                 	db	83	;'S'
   924  007CDE  43                 	db	67	;'C'
   925  007CDF  20                 	db	32
   926  007CE0  70                 	db	112	;'p'
   927  007CE1  2F                 	db	47
   928  007CE2  20                 	db	32
   929  007CE3  52                 	db	82	;'R'
   930  007CE4  65                 	db	101	;'e'
   931  007CE5  73                 	db	115	;'s'
   932  007CE6  65                 	db	101	;'e'
   933  007CE7  74                 	db	116	;'t'
   934  007CE8  00                 	db	0
   935  007CE9                     STR_42:
   936                           
   937                           ; BSR set to: 1
   938  007CE9  42                 	db	66	;'B'
   939  007CEA  6F                 	db	111	;'o'
   940  007CEB  6D                 	db	109	;'m'
   941  007CEC  62                 	db	98	;'b'
   942  007CED  61                 	db	97	;'a'
   943  007CEE  20                 	db	32
   944  007CEF  50                 	db	80	;'P'
   945  007CF0  72                 	db	114	;'r'
   946  007CF1  69                 	db	105	;'i'
   947  007CF2  6E                 	db	110	;'n'
   948  007CF3  63                 	db	99	;'c'
   949  007CF4  69                 	db	105	;'i'
   950  007CF5  70                 	db	112	;'p'
   951  007CF6  61                 	db	97	;'a'
   952  007CF7  6C                 	db	108	;'l'
   953  007CF8  2E                 	db	46
   954  007CF9  2E                 	db	46
   955  007CFA  2E                 	db	46
   956  007CFB  00                 	db	0
   957  007CFC                     STR_43:
   958                           
   959                           ; BSR set to: 1
   960  007CFC  42                 	db	66	;'B'
   961  007CFD  6F                 	db	111	;'o'
   962  007CFE  6D                 	db	109	;'m'
   963  007CFF  62                 	db	98	;'b'
   964  007D00  61                 	db	97	;'a'
   965  007D01  20                 	db	32
   966  007D02  43                 	db	67	;'C'
   967  007D03  6F                 	db	111	;'o'
   968  007D04  6D                 	db	109	;'m'
   969  007D05  62                 	db	98	;'b'
   970  007D06  75                 	db	117	;'u'
   971  007D07  73                 	db	115	;'s'
   972  007D08  74                 	db	116	;'t'
   973  007D09  61                 	db	97	;'a'
   974  007D0A  6F                 	db	111	;'o'
   975  007D0B  2E                 	db	46
   976  007D0C  2E                 	db	46
   977  007D0D  2E                 	db	46
   978  007D0E  00                 	db	0
   979  007D0F                     STR_100:
   980                           
   981                           ; BSR set to: 1
   982  007D0F  43                 	db	67	;'C'
   983  007D10  6F                 	db	111	;'o'
   984  007D11  6E                 	db	110	;'n'
   985  007D12  66                 	db	102	;'f'
   986  007D13  69                 	db	105	;'i'
   987  007D14  67                 	db	103	;'g'
   988  007D15  75                 	db	117	;'u'
   989  007D16  72                 	db	114	;'r'
   990  007D17  61                 	db	97	;'a'
   991  007D18  63                 	db	99	;'c'
   992  007D19  61                 	db	97	;'a'
   993  007D1A  6F                 	db	111	;'o'
   994  007D1B  20                 	db	32
   995  007D1C  74                 	db	116	;'t'
   996  007D1D  65                 	db	101	;'e'
   997  007D1E  6D                 	db	109	;'m'
   998  007D1F  70                 	db	112	;'p'
   999  007D20  6F                 	db	111	;'o'
  1000  007D21  00                 	db	0
  1001  007D22                     STR_66:
  1002                           
  1003                           ; BSR set to: 1
  1004  007D22  45                 	db	69	;'E'
  1005  007D23  72                 	db	114	;'r'
  1006  007D24  72                 	db	114	;'r'
  1007  007D25  6F                 	db	111	;'o'
  1008  007D26  20                 	db	32
  1009  007D27  6E                 	db	110	;'n'
  1010  007D28  6F                 	db	111	;'o'
  1011  007D29  20                 	db	32
  1012  007D2A  54                 	db	84	;'T'
  1013  007D2B  72                 	db	114	;'r'
  1014  007D2C  61                 	db	97	;'a'
  1015  007D2D  6E                 	db	110	;'n'
  1016  007D2E  73                 	db	115	;'s'
  1017  007D2F  64                 	db	100	;'d'
  1018  007D30  75                 	db	117	;'u'
  1019  007D31  74                 	db	116	;'t'
  1020  007D32  6F                 	db	111	;'o'
  1021  007D33  72                 	db	114	;'r'
  1022  007D34  00                 	db	0
  1023  007D35                     STR_12:
  1024                           
  1025                           ; BSR set to: 1
  1026  007D35  41                 	db	65	;'A'
  1027  007D36  54                 	db	84	;'T'
  1028  007D37  2B                 	db	43
  1029  007D38  43                 	db	67	;'C'
  1030  007D39  4D                 	db	77	;'M'
  1031  007D3A  47                 	db	71	;'G'
  1032  007D3B  53                 	db	83	;'S'
  1033  007D3C  3D                 	db	61	;'='
  1034  007D3D  22                 	db	34
  1035  007D3E  2B                 	db	43
  1036  007D3F  35                 	db	53	;'5'
  1037  007D40  35                 	db	53	;'5'
  1038  007D41  25                 	db	37
  1039  007D42  73                 	db	115	;'s'
  1040  007D43  22                 	db	34
  1041  007D44  0D                 	db	13
  1042  007D45  0A                 	db	10
  1043  007D46  00                 	db	0
  1044  007D47                     STR_121:
  1045                           
  1046                           ; BSR set to: 1
  1047  007D47  50                 	db	80	;'P'
  1048  007D48  41                 	db	65	;'A'
  1049  007D49  52                 	db	82	;'R'
  1050  007D4A  54                 	db	84	;'T'
  1051  007D4B  49                 	db	73	;'I'
  1052  007D4C  44                 	db	68	;'D'
  1053  007D4D  41                 	db	65	;'A'
  1054  007D4E  20                 	db	32
  1055  007D4F  43                 	db	67	;'C'
  1056  007D50  4F                 	db	79	;'O'
  1057  007D51  4D                 	db	77	;'M'
  1058  007D52  42                 	db	66	;'B'
  1059  007D53  55                 	db	85	;'U'
  1060  007D54  53                 	db	83	;'S'
  1061  007D55  54                 	db	84	;'T'
  1062  007D56  41                 	db	65	;'A'
  1063  007D57  4F                 	db	79	;'O'
  1064  007D58  00                 	db	0
  1065  007D59                     STR_123:
  1066                           
  1067                           ; BSR set to: 1
  1068  007D59  50                 	db	80	;'P'
  1069  007D5A  45                 	db	69	;'E'
  1070  007D5B  52                 	db	82	;'R'
  1071  007D5C  49                 	db	73	;'I'
  1072  007D5D  4F                 	db	79	;'O'
  1073  007D5E  44                 	db	68	;'D'
  1074  007D5F  4F                 	db	79	;'O'
  1075  007D60  20                 	db	32
  1076  007D61  44                 	db	68	;'D'
  1077  007D62  45                 	db	69	;'E'
  1078  007D63  20                 	db	32
  1079  007D64  54                 	db	84	;'T'
  1080  007D65  45                 	db	69	;'E'
  1081  007D66  53                 	db	83	;'S'
  1082  007D67  54                 	db	84	;'T'
  1083  007D68  45                 	db	69	;'E'
  1084  007D69  53                 	db	83	;'S'
  1085  007D6A  00                 	db	0
  1086  007D6B                     STR_105:
  1087                           
  1088                           ; BSR set to: 1
  1089  007D6B  68                 	db	104	;'h'
  1090  007D6C  6F                 	db	111	;'o'
  1091  007D6D  72                 	db	114	;'r'
  1092  007D6E  69                 	db	105	;'i'
  1093  007D6F  6D                 	db	109	;'m'
  1094  007D70  65                 	db	101	;'e'
  1095  007D71  74                 	db	116	;'t'
  1096  007D72  72                 	db	114	;'r'
  1097  007D73  6F                 	db	111	;'o'
  1098  007D74  3A                 	db	58	;':'
  1099  007D75  25                 	db	37
  1100  007D76  35                 	db	53	;'5'
  1101  007D77  64                 	db	100	;'d'
  1102  007D78  20                 	db	32
  1103  007D79  6D                 	db	109	;'m'
  1104  007D7A  69                 	db	105	;'i'
  1105  007D7B  6E                 	db	110	;'n'
  1106  007D7C  00                 	db	0
  1107  007D7D                     STR_62:
  1108                           
  1109                           ; BSR set to: 1
  1110  007D7D  20                 	db	32
  1111  007D7E  2A                 	db	42
  1112  007D7F  66                 	db	102	;'f'
  1113  007D80  61                 	db	97	;'a'
  1114  007D81  6C                 	db	108	;'l'
  1115  007D82  68                 	db	104	;'h'
  1116  007D83  61                 	db	97	;'a'
  1117  007D84  20                 	db	32
  1118  007D85  42                 	db	66	;'B'
  1119  007D86  2E                 	db	46
  1120  007D87  20                 	db	32
  1121  007D88  6A                 	db	106	;'j'
  1122  007D89  6F                 	db	111	;'o'
  1123  007D8A  63                 	db	99	;'c'
  1124  007D8B  6B                 	db	107	;'k'
  1125  007D8C  65                 	db	101	;'e'
  1126  007D8D  79                 	db	121	;'y'
  1127  007D8E  00                 	db	0
  1128  007D8F                     STR_47:
  1129                           
  1130                           ; BSR set to: 1
  1131  007D8F  54                 	db	84	;'T'
  1132  007D90  65                 	db	101	;'e'
  1133  007D91  73                 	db	115	;'s'
  1134  007D92  74                 	db	116	;'t'
  1135  007D93  65                 	db	101	;'e'
  1136  007D94  20                 	db	32
  1137  007D95  43                 	db	67	;'C'
  1138  007D96  6F                 	db	111	;'o'
  1139  007D97  6E                 	db	110	;'n'
  1140  007D98  63                 	db	99	;'c'
  1141  007D99  6C                 	db	108	;'l'
  1142  007D9A  75                 	db	117	;'u'
  1143  007D9B  69                 	db	105	;'i'
  1144  007D9C  64                 	db	100	;'d'
  1145  007D9D  6F                 	db	111	;'o'
  1146  007D9E  21                 	db	33
  1147  007D9F  00                 	db	0
  1148  007DA0                     STR_59:
  1149                           
  1150                           ; BSR set to: 1
  1151  007DA0  20                 	db	32
  1152  007DA1  2A                 	db	42
  1153  007DA2  66                 	db	102	;'f'
  1154  007DA3  61                 	db	97	;'a'
  1155  007DA4  6C                 	db	108	;'l'
  1156  007DA5  68                 	db	104	;'h'
  1157  007DA6  61                 	db	97	;'a'
  1158  007DA7  20                 	db	32
  1159  007DA8  65                 	db	101	;'e'
  1160  007DA9  6C                 	db	108	;'l'
  1161  007DAA  65                 	db	101	;'e'
  1162  007DAB  74                 	db	116	;'t'
  1163  007DAC  72                 	db	114	;'r'
  1164  007DAD  69                 	db	105	;'i'
  1165  007DAE  63                 	db	99	;'c'
  1166  007DAF  61                 	db	97	;'a'
  1167  007DB0  00                 	db	0
  1168  007DB1                     STR_99:
  1169                           
  1170                           ; BSR set to: 1
  1171  007DB1  45                 	db	69	;'E'
  1172  007DB2  6E                 	db	110	;'n'
  1173  007DB3  76                 	db	118	;'v'
  1174  007DB4  69                 	db	105	;'i'
  1175  007DB5  61                 	db	97	;'a'
  1176  007DB6  72                 	db	114	;'r'
  1177  007DB7  20                 	db	32
  1178  007DB8  73                 	db	115	;'s'
  1179  007DB9  6D                 	db	109	;'m'
  1180  007DBA  73                 	db	115	;'s'
  1181  007DBB  20                 	db	32
  1182  007DBC  74                 	db	116	;'t'
  1183  007DBD  65                 	db	101	;'e'
  1184  007DBE  73                 	db	115	;'s'
  1185  007DBF  74                 	db	116	;'t'
  1186  007DC0  65                 	db	101	;'e'
  1187  007DC1  00                 	db	0
  1188  007DC2                     STR_57:
  1189                           
  1190                           ; BSR set to: 1
  1191  007DC2  65                 	db	101	;'e'
  1192  007DC3  6E                 	db	110	;'n'
  1193  007DC4  76                 	db	118	;'v'
  1194  007DC5  69                 	db	105	;'i'
  1195  007DC6  61                 	db	97	;'a'
  1196  007DC7  6E                 	db	110	;'n'
  1197  007DC8  64                 	db	100	;'d'
  1198  007DC9  6F                 	db	111	;'o'
  1199  007DCA  20                 	db	32
  1200  007DCB  53                 	db	83	;'S'
  1201  007DCC  4D                 	db	77	;'M'
  1202  007DCD  53                 	db	83	;'S'
  1203  007DCE  2E                 	db	46
  1204  007DCF  2E                 	db	46
  1205  007DD0  2E                 	db	46
  1206  007DD1  00                 	db	0
  1207  007DD2                     STR_41:
  1208                           
  1209                           ; BSR set to: 1
  1210  007DD2  42                 	db	66	;'B'
  1211  007DD3  6F                 	db	111	;'o'
  1212  007DD4  6D                 	db	109	;'m'
  1213  007DD5  62                 	db	98	;'b'
  1214  007DD6  61                 	db	97	;'a'
  1215  007DD7  20                 	db	32
  1216  007DD8  4A                 	db	74	;'J'
  1217  007DD9  6F                 	db	111	;'o'
  1218  007DDA  63                 	db	99	;'c'
  1219  007DDB  6B                 	db	107	;'k'
  1220  007DDC  65                 	db	101	;'e'
  1221  007DDD  79                 	db	121	;'y'
  1222  007DDE  2E                 	db	46
  1223  007DDF  2E                 	db	46
  1224  007DE0  2E                 	db	46
  1225  007DE1  00                 	db	0
  1226  007DE2                     STR_120:
  1227                           
  1228                           ; BSR set to: 1
  1229  007DE2  50                 	db	80	;'P'
  1230  007DE3  52                 	db	82	;'R'
  1231  007DE4  45                 	db	69	;'E'
  1232  007DE5  53                 	db	83	;'S'
  1233  007DE6  53                 	db	83	;'S'
  1234  007DE7  41                 	db	65	;'A'
  1235  007DE8  4F                 	db	79	;'O'
  1236  007DE9  20                 	db	32
  1237  007DEA  44                 	db	68	;'D'
  1238  007DEB  41                 	db	65	;'A'
  1239  007DEC  20                 	db	32
  1240  007DED  52                 	db	82	;'R'
  1241  007DEE  45                 	db	69	;'E'
  1242  007DEF  44                 	db	68	;'D'
  1243  007DF0  45                 	db	69	;'E'
  1244  007DF1  00                 	db	0
  1245  007DF2                     STR_40:
  1246                           
  1247                           ; BSR set to: 1
  1248  007DF2  50                 	db	80	;'P'
  1249  007DF3  72                 	db	114	;'r'
  1250  007DF4  65                 	db	101	;'e'
  1251  007DF5  73                 	db	115	;'s'
  1252  007DF6  73                 	db	115	;'s'
  1253  007DF7  61                 	db	97	;'a'
  1254  007DF8  6F                 	db	111	;'o'
  1255  007DF9  20                 	db	32
  1256  007DFA  25                 	db	37
  1257  007DFB  73                 	db	115	;'s'
  1258  007DFC  20                 	db	32
  1259  007DFD  42                 	db	66	;'B'
  1260  007DFE  41                 	db	65	;'A'
  1261  007DFF  52                 	db	82	;'R'
  1262  007E00  00                 	db	0
  1263  007E01                     STR_70:
  1264                           
  1265                           ; BSR set to: 1
  1266  007E01  25                 	db	37
  1267  007E02  30                 	db	48	;'0'
  1268  007E03  32                 	db	50	;'2'
  1269  007E04  64                 	db	100	;'d'
  1270  007E05  2F                 	db	47
  1271  007E06  25                 	db	37
  1272  007E07  30                 	db	48	;'0'
  1273  007E08  32                 	db	50	;'2'
  1274  007E09  64                 	db	100	;'d'
  1275  007E0A  2F                 	db	47
  1276  007E0B  25                 	db	37
  1277  007E0C  30                 	db	48	;'0'
  1278  007E0D  32                 	db	50	;'2'
  1279  007E0E  64                 	db	100	;'d'
  1280  007E0F  00                 	db	0
  1281  007E10                     STR_72:
  1282                           
  1283                           ; BSR set to: 1
  1284  007E10  25                 	db	37
  1285  007E11  30                 	db	48	;'0'
  1286  007E12  32                 	db	50	;'2'
  1287  007E13  64                 	db	100	;'d'
  1288  007E14  3A                 	db	58	;':'
  1289  007E15  25                 	db	37
  1290  007E16  30                 	db	48	;'0'
  1291  007E17  32                 	db	50	;'2'
  1292  007E18  64                 	db	100	;'d'
  1293  007E19  3A                 	db	58	;':'
  1294  007E1A  25                 	db	37
  1295  007E1B  30                 	db	48	;'0'
  1296  007E1C  32                 	db	50	;'2'
  1297  007E1D  64                 	db	100	;'d'
  1298  007E1E  00                 	db	0
  1299  007E1F                     STR_51:
  1300                           
  1301                           ; BSR set to: 1
  1302  007E1F  50                 	db	80	;'P'
  1303  007E20  52                 	db	82	;'R'
  1304  007E21  49                 	db	73	;'I'
  1305  007E22  4E                 	db	78	;'N'
  1306  007E23  43                 	db	67	;'C'
  1307  007E24  49                 	db	73	;'I'
  1308  007E25  50                 	db	80	;'P'
  1309  007E26  41                 	db	65	;'A'
  1310  007E27  4C                 	db	76	;'L'
  1311  007E28  20                 	db	32
  1312  007E29  3A                 	db	58	;':'
  1313  007E2A  20                 	db	32
  1314  007E2B  25                 	db	37
  1315  007E2C  73                 	db	115	;'s'
  1316  007E2D  00                 	db	0
  1317  007E2E                     STR_54:
  1318                           
  1319                           ; BSR set to: 1
  1320  007E2E  43                 	db	67	;'C'
  1321  007E2F  4F                 	db	79	;'O'
  1322  007E30  4D                 	db	77	;'M'
  1323  007E31  42                 	db	66	;'B'
  1324  007E32  55                 	db	85	;'U'
  1325  007E33  53                 	db	83	;'S'
  1326  007E34  54                 	db	84	;'T'
  1327  007E35  41                 	db	65	;'A'
  1328  007E36  4F                 	db	79	;'O'
  1329  007E37  20                 	db	32
  1330  007E38  3A                 	db	58	;':'
  1331  007E39  20                 	db	32
  1332  007E3A  25                 	db	37
  1333  007E3B  73                 	db	115	;'s'
  1334  007E3C  00                 	db	0
  1335  007E3D                     STR_39:
  1336                           
  1337                           ; BSR set to: 1
  1338  007E3D  41                 	db	65	;'A'
  1339  007E3E  67                 	db	103	;'g'
  1340  007E3F  75                 	db	117	;'u'
  1341  007E40  61                 	db	97	;'a'
  1342  007E41  72                 	db	114	;'r'
  1343  007E42  64                 	db	100	;'d'
  1344  007E43  65                 	db	101	;'e'
  1345  007E44  2E                 	db	46
  1346  007E45  2E                 	db	46
  1347  007E46  2E                 	db	46
  1348  007E47  20                 	db	32
  1349  007E48  25                 	db	37
  1350  007E49  64                 	db	100	;'d'
  1351  007E4A  73                 	db	115	;'s'
  1352  007E4B  00                 	db	0
  1353  007E4C                     STR_126:
  1354                           
  1355                           ; BSR set to: 1
  1356  007E4C  49                 	db	73	;'I'
  1357  007E4D  6E                 	db	110	;'n'
  1358  007E4E  69                 	db	105	;'i'
  1359  007E4F  63                 	db	99	;'c'
  1360  007E50  69                 	db	105	;'i'
  1361  007E51  61                 	db	97	;'a'
  1362  007E52  72                 	db	114	;'r'
  1363  007E53  20                 	db	32
  1364  007E54  54                 	db	84	;'T'
  1365  007E55  65                 	db	101	;'e'
  1366  007E56  73                 	db	115	;'s'
  1367  007E57  74                 	db	116	;'t'
  1368  007E58  65                 	db	101	;'e'
  1369  007E59  73                 	db	115	;'s'
  1370  007E5A  00                 	db	0
  1371  007E5B                     STR_116:
  1372                           
  1373                           ; BSR set to: 1
  1374  007E5B  56                 	db	86	;'V'
  1375  007E5C  65                 	db	101	;'e'
  1376  007E5D  72                 	db	114	;'r'
  1377  007E5E  73                 	db	115	;'s'
  1378  007E5F  61                 	db	97	;'a'
  1379  007E60  6F                 	db	111	;'o'
  1380  007E61  20                 	db	32
  1381  007E62  53                 	db	83	;'S'
  1382  007E63  6F                 	db	111	;'o'
  1383  007E64  66                 	db	102	;'f'
  1384  007E65  74                 	db	116	;'t'
  1385  007E66  2E                 	db	46
  1386  007E67  3A                 	db	58	;':'
  1387  007E68  00                 	db	0
  1388  007E69                     STR_101:
  1389                           
  1390                           ; BSR set to: 1
  1391  007E69  4D                 	db	77	;'M'
  1392  007E6A  61                 	db	97	;'a'
  1393  007E6B  78                 	db	120	;'x'
  1394  007E6C  2E                 	db	46
  1395  007E6D  20                 	db	32
  1396  007E6E  50                 	db	80	;'P'
  1397  007E6F  41                 	db	65	;'A'
  1398  007E70  52                 	db	82	;'R'
  1399  007E71  54                 	db	84	;'T'
  1400  007E72  49                 	db	73	;'I'
  1401  007E73  44                 	db	68	;'D'
  1402  007E74  41                 	db	65	;'A'
  1403  007E75  3A                 	db	58	;':'
  1404  007E76  00                 	db	0
  1405  007E77                     STR_84:
  1406                           
  1407                           ; BSR set to: 1
  1408  007E77  50                 	db	80	;'P'
  1409  007E78  72                 	db	114	;'r'
  1410  007E79  69                 	db	105	;'i'
  1411  007E7A  6E                 	db	110	;'n'
  1412  007E7B  63                 	db	99	;'c'
  1413  007E7C  69                 	db	105	;'i'
  1414  007E7D  70                 	db	112	;'p'
  1415  007E7E  61                 	db	97	;'a'
  1416  007E7F  6C                 	db	108	;'l'
  1417  007E80  3A                 	db	58	;':'
  1418  007E81  20                 	db	32
  1419  007E82  25                 	db	37
  1420  007E83  73                 	db	115	;'s'
  1421  007E84  00                 	db	0
  1422  007E85                     STR_87:
  1423                           
  1424                           ; BSR set to: 1
  1425  007E85  43                 	db	67	;'C'
  1426  007E86  6F                 	db	111	;'o'
  1427  007E87  6D                 	db	109	;'m'
  1428  007E88  62                 	db	98	;'b'
  1429  007E89  75                 	db	117	;'u'
  1430  007E8A  73                 	db	115	;'s'
  1431  007E8B  74                 	db	116	;'t'
  1432  007E8C  61                 	db	97	;'a'
  1433  007E8D  6F                 	db	111	;'o'
  1434  007E8E  3A                 	db	58	;':'
  1435  007E8F  20                 	db	32
  1436  007E90  25                 	db	37
  1437  007E91  73                 	db	115	;'s'
  1438  007E92  00                 	db	0
  1439  007E93                     STR_98:
  1440                           
  1441                           ; BSR set to: 1
  1442  007E93  20                 	db	32
  1443  007E94  61                 	db	97	;'a'
  1444  007E95  67                 	db	103	;'g'
  1445  007E96  75                 	db	117	;'u'
  1446  007E97  61                 	db	97	;'a'
  1447  007E98  72                 	db	114	;'r'
  1448  007E99  64                 	db	100	;'d'
  1449  007E9A  65                 	db	101	;'e'
  1450  007E9B  2E                 	db	46
  1451  007E9C  2E                 	db	46
  1452  007E9D  2E                 	db	46
  1453  007E9E  20                 	db	32
  1454  007E9F  00                 	db	0
  1455  007EA0                     STR_46:
  1456                           
  1457                           ; BSR set to: 1
  1458  007EA0  52                 	db	82	;'R'
  1459  007EA1  65                 	db	101	;'e'
  1460  007EA2  6C                 	db	108	;'l'
  1461  007EA3  69                 	db	105	;'i'
  1462  007EA4  67                 	db	103	;'g'
  1463  007EA5  61                 	db	97	;'a'
  1464  007EA6  6E                 	db	110	;'n'
  1465  007EA7  64                 	db	100	;'d'
  1466  007EA8  6F                 	db	111	;'o'
  1467  007EA9  2E                 	db	46
  1468  007EAA  2E                 	db	46
  1469  007EAB  2E                 	db	46
  1470  007EAC  00                 	db	0
  1471  007EAD                     STR_10:
  1472                           
  1473                           ; BSR set to: 1
  1474  007EAD  41                 	db	65	;'A'
  1475  007EAE  54                 	db	84	;'T'
  1476  007EAF  2B                 	db	43
  1477  007EB0  43                 	db	67	;'C'
  1478  007EB1  4D                 	db	77	;'M'
  1479  007EB2  47                 	db	71	;'G'
  1480  007EB3  46                 	db	70	;'F'
  1481  007EB4  3D                 	db	61	;'='
  1482  007EB5  31                 	db	49	;'1'
  1483  007EB6  0D                 	db	13
  1484  007EB7  0A                 	db	10
  1485  007EB8  00                 	db	0
  1486  007EB9                     STR_15:
  1487                           
  1488                           ; BSR set to: 1
  1489  007EB9  4A                 	db	74	;'J'
  1490  007EBA  75                 	db	117	;'u'
  1491  007EBB  6C                 	db	108	;'l'
  1492  007EBC  20                 	db	32
  1493  007EBD  31                 	db	49	;'1'
  1494  007EBE  38                 	db	56	;'8'
  1495  007EBF  20                 	db	32
  1496  007EC0  32                 	db	50	;'2'
  1497  007EC1  30                 	db	48	;'0'
  1498  007EC2  32                 	db	50	;'2'
  1499  007EC3  30                 	db	48	;'0'
  1500  007EC4  00                 	db	0
  1501  007EC5                     STR_103:
  1502                           
  1503                           ; BSR set to: 1
  1504  007EC5  4D                 	db	77	;'M'
  1505  007EC6  61                 	db	97	;'a'
  1506  007EC7  78                 	db	120	;'x'
  1507  007EC8  2E                 	db	46
  1508  007EC9  20                 	db	32
  1509  007ECA  54                 	db	84	;'T'
  1510  007ECB  45                 	db	69	;'E'
  1511  007ECC  53                 	db	83	;'S'
  1512  007ECD  54                 	db	84	;'T'
  1513  007ECE  45                 	db	69	;'E'
  1514  007ECF  3A                 	db	58	;':'
  1515  007ED0  00                 	db	0
  1516  007ED1                     STR_36:
  1517                           
  1518                           ; BSR set to: 1
  1519  007ED1  4E                 	db	78	;'N'
  1520  007ED2  4F                 	db	79	;'O'
  1521  007ED3  20                 	db	32
  1522  007ED4  44                 	db	68	;'D'
  1523  007ED5  49                 	db	73	;'I'
  1524  007ED6  41                 	db	65	;'A'
  1525  007ED7  4C                 	db	76	;'L'
  1526  007ED8  54                 	db	84	;'T'
  1527  007ED9  4F                 	db	79	;'O'
  1528  007EDA  4E                 	db	78	;'N'
  1529  007EDB  45                 	db	69	;'E'
  1530  007EDC  00                 	db	0
  1531  007EDD                     STR_60:
  1532                           
  1533                           ; BSR set to: 1
  1534  007EDD  20                 	db	32
  1535  007EDE  2A                 	db	42
  1536  007EDF  66                 	db	102	;'f'
  1537  007EE0  61                 	db	97	;'a'
  1538  007EE1  6C                 	db	108	;'l'
  1539  007EE2  68                 	db	104	;'h'
  1540  007EE3  61                 	db	97	;'a'
  1541  007EE4  20                 	db	32
  1542  007EE5  47                 	db	71	;'G'
  1543  007EE6  53                 	db	83	;'S'
  1544  007EE7  4D                 	db	77	;'M'
  1545  007EE8  00                 	db	0
  1546  007EE9                     STR_125:
  1547                           
  1548                           ; BSR set to: 1
  1549  007EE9  49                 	db	73	;'I'
  1550  007EEA  4E                 	db	78	;'N'
  1551  007EEB  46                 	db	70	;'F'
  1552  007EEC  4F                 	db	79	;'O'
  1553  007EED  20                 	db	32
  1554  007EEE  56                 	db	86	;'V'
  1555  007EEF  45                 	db	69	;'E'
  1556  007EF0  52                 	db	82	;'R'
  1557  007EF1  53                 	db	83	;'S'
  1558  007EF2  41                 	db	65	;'A'
  1559  007EF3  4F                 	db	79	;'O'
  1560  007EF4  00                 	db	0
  1561  007EF5                     STR_93:
  1562                           
  1563                           ; BSR set to: 1
  1564  007EF5  76                 	db	118	;'v'
  1565  007EF6  65                 	db	101	;'e'
  1566  007EF7  72                 	db	114	;'r'
  1567  007EF8  73                 	db	115	;'s'
  1568  007EF9  61                 	db	97	;'a'
  1569  007EFA  6F                 	db	111	;'o'
  1570  007EFB  20                 	db	32
  1571  007EFC  2D                 	db	45
  1572  007EFD  20                 	db	32
  1573  007EFE  25                 	db	37
  1574  007EFF  73                 	db	115	;'s'
  1575  007F00  00                 	db	0
  1576  007F01                     STR_35:
  1577                           
  1578                           ; BSR set to: 1
  1579  007F01  41                 	db	65	;'A'
  1580  007F02  54                 	db	84	;'T'
  1581  007F03  44                 	db	68	;'D'
  1582  007F04  20                 	db	32
  1583  007F05  30                 	db	48	;'0'
  1584  007F06  25                 	db	37
  1585  007F07  73                 	db	115	;'s'
  1586  007F08  3B                 	db	59	;';'
  1587  007F09  0D                 	db	13
  1588  007F0A  0A                 	db	10
  1589  007F0B  00                 	db	0
  1590  007F0C                     
  1591                           ; BSR set to: 1
  1592  007F0C  74                 	db	116	;'t'
  1593  007F0D  65                 	db	101	;'e'
  1594  007F0E  74                 	db	116	;'t'
  1595  007F0F  61                 	db	97	;'a'
  1596  007F10  70                 	db	112	;'p'
  1597  007F11  61                 	db	97	;'a'
  1598  007F12  20                 	db	32
  1599  007F13  25                 	db	37
  1600  007F14  64                 	db	100	;'d'
  1601  007F15  20                 	db	32
  1602  007F16  00                 	db	0
  1603  007F17                     STR_83:
  1604                           
  1605                           ; BSR set to: 1
  1606  007F17  23                 	db	35
  1607  007F18  25                 	db	37
  1608  007F19  30                 	db	48	;'0'
  1609  007F1A  32                 	db	50	;'2'
  1610  007F1B  64                 	db	100	;'d'
  1611  007F1C  2F                 	db	47
  1612  007F1D  25                 	db	37
  1613  007F1E  30                 	db	48	;'0'
  1614  007F1F  32                 	db	50	;'2'
  1615  007F20  64                 	db	100	;'d'
  1616  007F21  00                 	db	0
  1617  007F22                     STR_106:
  1618                           
  1619                           ; BSR set to: 1
  1620  007F22  47                 	db	71	;'G'
  1621  007F23  45                 	db	69	;'E'
  1622  007F24  52                 	db	82	;'R'
  1623  007F25  41                 	db	65	;'A'
  1624  007F26  4C                 	db	76	;'L'
  1625  007F27  20                 	db	32
  1626  007F28  3A                 	db	58	;':'
  1627  007F29  20                 	db	32
  1628  007F2A  25                 	db	37
  1629  007F2B  73                 	db	115	;'s'
  1630  007F2C  00                 	db	0
  1631  007F2D                     STR_48:
  1632                           
  1633                           ; BSR set to: 1
  1634  007F2D  4A                 	db	74	;'J'
  1635  007F2E  4F                 	db	79	;'O'
  1636  007F2F  4B                 	db	75	;'K'
  1637  007F30  45                 	db	69	;'E'
  1638  007F31  59                 	db	89	;'Y'
  1639  007F32  20                 	db	32
  1640  007F33  3A                 	db	58	;':'
  1641  007F34  20                 	db	32
  1642  007F35  25                 	db	37
  1643  007F36  73                 	db	115	;'s'
  1644  007F37  00                 	db	0
  1645  007F38                     STR_76:
  1646                           
  1647                           ; BSR set to: 1
  1648  007F38  41                 	db	65	;'A'
  1649  007F39  54                 	db	84	;'T'
  1650  007F3A  49                 	db	73	;'I'
  1651  007F3B  56                 	db	86	;'V'
  1652  007F3C  41                 	db	65	;'A'
  1653  007F3D  52                 	db	82	;'R'
  1654  007F3E  3A                 	db	58	;':'
  1655  007F3F  20                 	db	32
  1656  007F40  25                 	db	37
  1657  007F41  73                 	db	115	;'s'
  1658  007F42  00                 	db	0
  1659  007F43                     STR_45:
  1660                           
  1661                           ; BSR set to: 1
  1662  007F43  4C                 	db	76	;'L'
  1663  007F44  69                 	db	105	;'i'
  1664  007F45  67                 	db	103	;'g'
  1665  007F46  61                 	db	97	;'a'
  1666  007F47  64                 	db	100	;'d'
  1667  007F48  61                 	db	97	;'a'
  1668  007F49  2E                 	db	46
  1669  007F4A  2E                 	db	46
  1670  007F4B  2E                 	db	46
  1671  007F4C  00                 	db	0
  1672  007F4D                     STR_119:
  1673                           
  1674                           ; BSR set to: 1
  1675  007F4D  44                 	db	68	;'D'
  1676  007F4E  41                 	db	65	;'A'
  1677  007F4F  54                 	db	84	;'T'
  1678  007F50  41                 	db	65	;'A'
  1679  007F51  2F                 	db	47
  1680  007F52  48                 	db	72	;'H'
  1681  007F53  4F                 	db	79	;'O'
  1682  007F54  52                 	db	82	;'R'
  1683  007F55  41                 	db	65	;'A'
  1684  007F56  00                 	db	0
  1685  007F57                     STR_124:
  1686                           
  1687                           ; BSR set to: 1
  1688  007F57  44                 	db	68	;'D'
  1689  007F58  41                 	db	65	;'A'
  1690  007F59  54                 	db	84	;'T'
  1691  007F5A  41                 	db	65	;'A'
  1692  007F5B  4C                 	db	76	;'L'
  1693  007F5C  4F                 	db	79	;'O'
  1694  007F5D  47                 	db	71	;'G'
  1695  007F5E  45                 	db	69	;'E'
  1696  007F5F  52                 	db	82	;'R'
  1697  007F60  00                 	db	0
  1698  007F61                     STR_122:
  1699                           
  1700                           ; BSR set to: 1
  1701  007F61  54                 	db	84	;'T'
  1702  007F62  45                 	db	69	;'E'
  1703  007F63  4C                 	db	76	;'L'
  1704  007F64  45                 	db	69	;'E'
  1705  007F65  46                 	db	70	;'F'
  1706  007F66  4F                 	db	79	;'O'
  1707  007F67  4E                 	db	78	;'N'
  1708  007F68  45                 	db	69	;'E'
  1709  007F69  53                 	db	83	;'S'
  1710  007F6A  00                 	db	0
  1711  007F6B                     
  1712                           ; BSR set to: 1
  1713  007F6B  74                 	db	116	;'t'
  1714  007F6C  73                 	db	115	;'s'
  1715  007F6D  69                 	db	105	;'i'
  1716  007F6E  6E                 	db	110	;'n'
  1717  007F6F  61                 	db	97	;'a'
  1718  007F70  6C                 	db	108	;'l'
  1719  007F71  20                 	db	32
  1720  007F72  25                 	db	37
  1721  007F73  64                 	db	100	;'d'
  1722  007F74  00                 	db	0
  1723  007F75                     STR_80:
  1724                           
  1725                           ; BSR set to: 1
  1726  007F75  4A                 	db	74	;'J'
  1727  007F76  6F                 	db	111	;'o'
  1728  007F77  6B                 	db	107	;'k'
  1729  007F78  65                 	db	101	;'e'
  1730  007F79  79                 	db	121	;'y'
  1731  007F7A  3A                 	db	58	;':'
  1732  007F7B  20                 	db	32
  1733  007F7C  25                 	db	37
  1734  007F7D  73                 	db	115	;'s'
  1735  007F7E  00                 	db	0
  1736  007F7F                     STR_3:
  1737                           
  1738                           ; BSR set to: 1
  1739  007F7F  41                 	db	65	;'A'
  1740  007F80  54                 	db	84	;'T'
  1741  007F81  2B                 	db	43
  1742  007F82  43                 	db	67	;'C'
  1743  007F83  53                 	db	83	;'S'
  1744  007F84  51                 	db	81	;'Q'
  1745  007F85  0D                 	db	13
  1746  007F86  0A                 	db	10
  1747  007F87  00                 	db	0
  1748  007F88                     
  1749                           ; BSR set to: 1
  1750  007F88  65                 	db	101	;'e'
  1751  007F89  74                 	db	116	;'t'
  1752  007F8A  61                 	db	97	;'a'
  1753  007F8B  70                 	db	112	;'p'
  1754  007F8C  61                 	db	97	;'a'
  1755  007F8D  20                 	db	32
  1756  007F8E  25                 	db	37
  1757  007F8F  64                 	db	100	;'d'
  1758  007F90  00                 	db	0
  1759  007F91                     STR_44:
  1760                           
  1761                           ; BSR set to: 1
  1762  007F91  42                 	db	66	;'B'
  1763  007F92  6F                 	db	111	;'o'
  1764  007F93  6D                 	db	109	;'m'
  1765  007F94  62                 	db	98	;'b'
  1766  007F95  61                 	db	97	;'a'
  1767  007F96  20                 	db	32
  1768  007F97  25                 	db	37
  1769  007F98  73                 	db	115	;'s'
  1770  007F99  00                 	db	0
  1771  007F9A                     STR_90:
  1772                           
  1773                           ; BSR set to: 1
  1774  007F9A  54                 	db	84	;'T'
  1775  007F9B  45                 	db	69	;'E'
  1776  007F9C  43                 	db	67	;'C'
  1777  007F9D  48                 	db	72	;'H'
  1778  007F9E  4E                 	db	78	;'N'
  1779  007F9F  4F                 	db	79	;'O'
  1780  007FA0  57                 	db	87	;'W'
  1781  007FA1  00                 	db	0
  1782  007FA2                     STR_127:
  1783                           
  1784                           ; BSR set to: 1
  1785  007FA2  28                 	db	40
  1786  007FA3  6E                 	db	110	;'n'
  1787  007FA4  75                 	db	117	;'u'
  1788  007FA5  6C                 	db	108	;'l'
  1789  007FA6  6C                 	db	108	;'l'
  1790  007FA7  29                 	db	41
  1791  007FA8  00                 	db	0
  1792  007FA9                     STR_21:
  1793                           
  1794                           ; BSR set to: 1
  1795  007FA9  41                 	db	65	;'A'
  1796  007FAA  54                 	db	84	;'T'
  1797  007FAB  48                 	db	72	;'H'
  1798  007FAC  30                 	db	48	;'0'
  1799  007FAD  0D                 	db	13
  1800  007FAE  0A                 	db	10
  1801  007FAF  00                 	db	0
  1802  007FB0                     STR_6:
  1803                           
  1804                           ; BSR set to: 1
  1805  007FB0  2B                 	db	43
  1806  007FB1  43                 	db	67	;'C'
  1807  007FB2  53                 	db	83	;'S'
  1808  007FB3  51                 	db	81	;'Q'
  1809  007FB4  3A                 	db	58	;':'
  1810  007FB5  20                 	db	32
  1811  007FB6  00                 	db	0
  1812  007FB7                     STR_95:
  1813                           
  1814                           ; BSR set to: 1
  1815  007FB7  54                 	db	84	;'T'
  1816  007FB8  31                 	db	49	;'1'
  1817  007FB9  3A                 	db	58	;':'
  1818  007FBA  20                 	db	32
  1819  007FBB  25                 	db	37
  1820  007FBC  73                 	db	115	;'s'
  1821  007FBD  00                 	db	0
  1822  007FBE                     STR_96:
  1823                           
  1824                           ; BSR set to: 1
  1825  007FBE  54                 	db	84	;'T'
  1826  007FBF  32                 	db	50	;'2'
  1827  007FC0  3A                 	db	58	;':'
  1828  007FC1  20                 	db	32
  1829  007FC2  25                 	db	37
  1830  007FC3  73                 	db	115	;'s'
  1831  007FC4  00                 	db	0
  1832  007FC5                     STR_71:
  1833                           
  1834                           ; BSR set to: 1
  1835  007FC5  48                 	db	72	;'H'
  1836  007FC6  4F                 	db	79	;'O'
  1837  007FC7  52                 	db	82	;'R'
  1838  007FC8  41                 	db	65	;'A'
  1839  007FC9  3A                 	db	58	;':'
  1840  007FCA  00                 	db	0
  1841  007FCB                     STR_69:
  1842                           
  1843                           ; BSR set to: 1
  1844  007FCB  44                 	db	68	;'D'
  1845  007FCC  41                 	db	65	;'A'
  1846  007FCD  54                 	db	84	;'T'
  1847  007FCE  41                 	db	65	;'A'
  1848  007FCF  3A                 	db	58	;':'
  1849  007FD0  00                 	db	0
  1850  007FD1                     STR_28:
  1851                           
  1852                           ; BSR set to: 1
  1853  007FD1  46                 	db	70	;'F'
  1854  007FD2  41                 	db	65	;'A'
  1855  007FD3  4C                 	db	76	;'L'
  1856  007FD4  48                 	db	72	;'H'
  1857  007FD5  41                 	db	65	;'A'
  1858  007FD6  00                 	db	0
  1859  007FD7                     STR_17:
  1860                           
  1861                           ; BSR set to: 1
  1862  007FD7  45                 	db	69	;'E'
  1863  007FD8  52                 	db	82	;'R'
  1864  007FD9  52                 	db	82	;'R'
  1865  007FDA  4F                 	db	79	;'O'
  1866  007FDB  52                 	db	82	;'R'
  1867  007FDC  00                 	db	0
  1868  007FDD                     STR_4:
  1869                           
  1870                           ; BSR set to: 1
  1871  007FDD  41                 	db	65	;'A'
  1872  007FDE  54                 	db	84	;'T'
  1873  007FDF  0D                 	db	13
  1874  007FE0  0A                 	db	10
  1875  007FE1  00                 	db	0
  1876  007FE2                     STR_50:
  1877                           
  1878                           ; BSR set to: 1
  1879  007FE2  45                 	db	69	;'E'
  1880  007FE3  52                 	db	82	;'R'
  1881  007FE4  52                 	db	82	;'R'
  1882  007FE5  4F                 	db	79	;'O'
  1883  007FE6  00                 	db	0
  1884  007FE7                     STR_1:
  1885                           
  1886                           ; BSR set to: 1
  1887  007FE7  25                 	db	37
  1888  007FE8  73                 	db	115	;'s'
  1889  007FE9  25                 	db	37
  1890  007FEA  63                 	db	99	;'c'
  1891  007FEB  00                 	db	0
  1892  007FEC                     STR_102:
  1893                           
  1894                           ; BSR set to: 1
  1895  007FEC  25                 	db	37
  1896  007FED  33                 	db	51	;'3'
  1897  007FEE  64                 	db	100	;'d'
  1898  007FEF  73                 	db	115	;'s'
  1899  007FF0  00                 	db	0
  1900  007FF1                     STR_78:
  1901                           
  1902                           ; BSR set to: 1
  1903  007FF1  53                 	db	83	;'S'
  1904  007FF2  69                 	db	105	;'i'
  1905  007FF3  6D                 	db	109	;'m'
  1906  007FF4  00                 	db	0
  1907  007FF5                     STR_77:
  1908                           
  1909                           ; BSR set to: 1
  1910  007FF5  4E                 	db	78	;'N'
  1911  007FF6  61                 	db	97	;'a'
  1912  007FF7  6F                 	db	111	;'o'
  1913  007FF8  00                 	db	0
  1914  007FF9                     STR_5:
  1915                           
  1916                           ; BSR set to: 1
  1917  007FF9  4F                 	db	79	;'O'
  1918  007FFA  4B                 	db	75	;'K'
  1919  007FFB  00                 	db	0
  1920  007FFC                     STR_13:
  1921                           
  1922                           ; BSR set to: 1
  1923  007FFC  3E                 	db	62	;'>'
  1924  007FFD  00                 	db	0
  1925  0000                     
  1926                           ; #config settings
  1927  007FFE  00                 	db	0	; dummy byte at the end
  1928  0000                     
  1929                           	psect	cinit
  1930  00784C                     __pcinit:
  1931                           	opt stack 0
  1932  00784C                     start_initialization:
  1933                           	opt stack 0
  1934  00784C                     __initialization:
  1935                           	opt stack 0
  1936                           
  1937                           ; Initialize objects allocated to BANK1 (8 bytes)
  1938                           ; load TBLPTR registers with __pidataBANK1
  1939  00784C  0E64               	movlw	low __pidataBANK1
  1940  00784E  6EF6               	movwf	tblptrl,c
  1941  007850  0E6B               	movlw	high __pidataBANK1
  1942  007852  6EF7               	movwf	tblptrh,c
  1943  007854  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1944  007856  6EF8               	movwf	tblptru,c
  1945  007858  EE01  F0DA         	lfsr	0,__pdataBANK1
  1946  00785C  EE10 F008          	lfsr	1,8
  1947  007860                     copy_data0:
  1948  007860  0009               	tblrd		*+
  1949  007862  CFF5 FFEE          	movff	tablat,postinc0
  1950  007866  50E5               	movf	postdec1,w,c
  1951  007868  50E1               	movf	fsr1l,w,c
  1952  00786A  E1FA               	bnz	copy_data0
  1953                           
  1954                           ; Initialize objects allocated to BANK0 (7 bytes)
  1955                           ; load TBLPTR registers with __pidataBANK0
  1956  00786C  0E5D               	movlw	low __pidataBANK0
  1957  00786E  6EF6               	movwf	tblptrl,c
  1958  007870  0E6B               	movlw	high __pidataBANK0
  1959  007872  6EF7               	movwf	tblptrh,c
  1960  007874  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1961  007876  6EF8               	movwf	tblptru,c
  1962  007878  EE00  F0F9         	lfsr	0,__pdataBANK0
  1963  00787C  EE10 F007          	lfsr	1,7
  1964  007880                     copy_data1:
  1965  007880  0009               	tblrd		*+
  1966  007882  CFF5 FFEE          	movff	tablat,postinc0
  1967  007886  50E5               	movf	postdec1,w,c
  1968  007888  50E1               	movf	fsr1l,w,c
  1969  00788A  E1FA               	bnz	copy_data1
  1970                           
  1971                           ; Initialize objects allocated to COMRAM (1 bytes)
  1972                           ; load TBLPTR registers with __pidataCOMRAM
  1973  00788C  0E5C               	movlw	low __pidataCOMRAM
  1974  00788E  6EF6               	movwf	tblptrl,c
  1975  007890  0E6B               	movlw	high __pidataCOMRAM
  1976  007892  6EF7               	movwf	tblptrh,c
  1977  007894  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1978  007896  6EF8               	movwf	tblptru,c
  1979  007898  0009               	tblrd		*+	;fetch initializer
  1980  00789A  CFF5 F07E          	movff	tablat,__pdataCOMRAM
  1981                           
  1982                           ; Clear objects allocated to BANK1 (218 bytes)
  1983  00789E  EE01  F000         	lfsr	0,__pbssBANK1
  1984  0078A2  0EDA               	movlw	218
  1985  0078A4                     clear_0:
  1986  0078A4  6AEE               	clrf	postinc0,c
  1987  0078A6  06E8               	decf	wreg,f,c
  1988  0078A8  E1FD               	bnz	clear_0
  1989                           
  1990                           ; Clear objects allocated to BANK0 (33 bytes)
  1991  0078AA  EE00  F0D8         	lfsr	0,__pbssBANK0
  1992  0078AE  0E21               	movlw	33
  1993  0078B0                     clear_1:
  1994  0078B0  6AEE               	clrf	postinc0,c
  1995  0078B2  06E8               	decf	wreg,f,c
  1996  0078B4  E1FD               	bnz	clear_1
  1997                           
  1998                           ; Clear objects allocated to COMRAM (28 bytes)
  1999  0078B6  EE00  F062         	lfsr	0,__pbssCOMRAM
  2000  0078BA  0E1C               	movlw	28
  2001  0078BC                     clear_2:
  2002  0078BC  6AEE               	clrf	postinc0,c
  2003  0078BE  06E8               	decf	wreg,f,c
  2004  0078C0  E1FD               	bnz	clear_2
  2005  0078C2                     end_of_initialization:
  2006                           	opt stack 0
  2007  0078C2                     __end_of__initialization:
  2008                           	opt stack 0
  2009  0078C2  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2010  0078C4  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2011  0078C6  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2012  0078C8  6EF8               	movwf	tblptru,c
  2013  0078CA  0100               	movlb	0
  2014  0078CC  EF37  F005         	goto	_main	;jump to C main() function
  2015                           tblptru	equ	0xFF8
  2016                           tblptrh	equ	0xFF7
  2017                           tblptrl	equ	0xFF6
  2018                           tablat	equ	0xFF5
  2019                           postinc0	equ	0xFEE
  2020                           wreg	equ	0xFE8
  2021                           postdec1	equ	0xFE5
  2022                           fsr1l	equ	0xFE1
  2023                           
  2024                           	psect	bssCOMRAM
  2025  000062                     __pbssCOMRAM:
  2026                           	opt stack 0
  2027  000062                     _etapaComunicacao:
  2028                           	opt stack 0
  2029  000062                     	ds	2
  2030  000064                     _dtl_posi_visualizar:
  2031                           	opt stack 0
  2032  000064                     	ds	1
  2033  000065                     _totalLogs:
  2034                           	opt stack 0
  2035  000065                     	ds	1
  2036  000066                     _isPressed:
  2037                           	opt stack 0
  2038  000066                     	ds	1
  2039  000067                     _flag_b_esc:
  2040                           	opt stack 0
  2041  000067                     	ds	1
  2042  000068                     _cbf:
  2043                           	opt stack 0
  2044  000068                     	ds	1
  2045  000069                     _blinkk:
  2046                           	opt stack 0
  2047  000069                     	ds	1
  2048  00006A                     _ajst_rtc:
  2049                           	opt stack 0
  2050  00006A                     	ds	1
  2051  00006B                     _sub_menu_posi:
  2052                           	opt stack 0
  2053  00006B                     	ds	1
  2054  00006C                     _tempo_limite_partida:
  2055                           	opt stack 0
  2056  00006C                     	ds	1
  2057  00006D                     _tempo_partida:
  2058                           	opt stack 0
  2059  00006D                     	ds	1
  2060  00006E                     _posicaoColetaLeitura:
  2061                           	opt stack 0
  2062  00006E                     	ds	1
  2063  00006F                     _ultimoEstadoSaidas:
  2064                           	opt stack 0
  2065  00006F                     	ds	1
  2066  000070                     _etapaTesteBombas:
  2067                           	opt stack 0
  2068  000070                     	ds	1
  2069  000071                     _timerColetaLeitura:
  2070                           	opt stack 0
  2071  000071                     	ds	1
  2072  000072                     _timerPiscarLCD:
  2073                           	opt stack 0
  2074  000072                     	ds	1
  2075  000073                     _timerBase:
  2076                           	opt stack 0
  2077  000073                     	ds	1
  2078  000074                     _timerAtrasoLCD:
  2079                           	opt stack 0
  2080  000074                     	ds	1
  2081  000075                     _timerTrocarTextoLcd:
  2082                           	opt stack 0
  2083  000075                     	ds	1
  2084  000076                     _tentativasVerificarGSM:
  2085                           	opt stack 0
  2086  000076                     	ds	1
  2087  000077                     _rtc:
  2088                           	opt stack 0
  2089  000077                     	ds	7
  2090                           tblptru	equ	0xFF8
  2091                           tblptrh	equ	0xFF7
  2092                           tblptrl	equ	0xFF6
  2093                           tablat	equ	0xFF5
  2094                           postinc0	equ	0xFEE
  2095                           wreg	equ	0xFE8
  2096                           postdec1	equ	0xFE5
  2097                           fsr1l	equ	0xFE1
  2098                           
  2099                           	psect	dataCOMRAM
  2100  00007E                     __pdataCOMRAM:
  2101                           	opt stack 0
  2102  00007E                     _timerVerificarSinal:
  2103                           	opt stack 0
  2104  00007E                     	ds	1
  2105                           tblptru	equ	0xFF8
  2106                           tblptrh	equ	0xFF7
  2107                           tblptrl	equ	0xFF6
  2108                           tablat	equ	0xFF5
  2109                           postinc0	equ	0xFEE
  2110                           wreg	equ	0xFE8
  2111                           postdec1	equ	0xFE5
  2112                           fsr1l	equ	0xFE1
  2113                           
  2114                           	psect	bssBANK0
  2115  0000D8                     __pbssBANK0:
  2116                           	opt stack 0
  2117  0000D8                     _pressao:
  2118                           	opt stack 0
  2119  0000D8                     	ds	2
  2120  0000DA                     _timerTesteBombas:
  2121                           	opt stack 0
  2122  0000DA                     	ds	2
  2123  0000DC                     _ajust_tel:
  2124                           	opt stack 0
  2125  0000DC                     	ds	1
  2126  0000DD                     _tel_posi:
  2127                           	opt stack 0
  2128  0000DD                     	ds	1
  2129  0000DE                     __menu_posi:
  2130                           	opt stack 0
  2131  0000DE                     	ds	1
  2132  0000DF                     _menu_posi:
  2133                           	opt stack 0
  2134  0000DF                     	ds	1
  2135  0000E0                     _option_posi:
  2136                           	opt stack 0
  2137  0000E0                     	ds	1
  2138  0000E1                     _sp_estacionaria:
  2139                           	opt stack 0
  2140  0000E1                     	ds	1
  2141  0000E2                     _sp_principal:
  2142                           	opt stack 0
  2143  0000E2                     	ds	1
  2144  0000E3                     _sp_jockey:
  2145                           	opt stack 0
  2146  0000E3                     	ds	1
  2147  0000E4                     _sp_pressao_rede:
  2148                           	opt stack 0
  2149  0000E4                     	ds	1
  2150  0000E5                     _tempo_limite_teste_estacionaria:
  2151                           	opt stack 0
  2152  0000E5                     	ds	1
  2153  0000E6                     _tempo_limite_estacionaria:
  2154                           	opt stack 0
  2155  0000E6                     	ds	1
  2156  0000E7                     _horario_de_teste:
  2157                           	opt stack 0
  2158  0000E7                     	ds	1
  2159  0000E8                     _dias_restante_teste:
  2160                           	opt stack 0
  2161  0000E8                     	ds	1
  2162  0000E9                     __ano:
  2163                           	opt stack 0
  2164  0000E9                     	ds	1
  2165  0000EA                     __mes:
  2166                           	opt stack 0
  2167  0000EA                     	ds	1
  2168  0000EB                     __dia:
  2169                           	opt stack 0
  2170  0000EB                     	ds	1
  2171  0000EC                     __hor:
  2172                           	opt stack 0
  2173  0000EC                     	ds	1
  2174  0000ED                     __min:
  2175                           	opt stack 0
  2176  0000ED                     	ds	1
  2177  0000EE                     __sec:
  2178                           	opt stack 0
  2179  0000EE                     	ds	1
  2180  0000EF                     _habilitaTesteAutomatico:
  2181                           	opt stack 0
  2182  0000EF                     	ds	1
  2183  0000F0                     _flagErroTransdutor:
  2184                           	opt stack 0
  2185  0000F0                     	ds	1
  2186  0000F1                     _ocorrendoIncendio:
  2187                           	opt stack 0
  2188  0000F1                     	ds	1
  2189  0000F2                     _codigoErro:
  2190                           	opt stack 0
  2191  0000F2                     	ds	1
  2192  0000F3                     _textoAlternativo:
  2193                           	opt stack 0
  2194  0000F3                     	ds	1
  2195  0000F4                     _gsmOcupado:
  2196                           	opt stack 0
  2197  0000F4                     	ds	1
  2198  0000F5                     _timerEtapaComunicacao:
  2199                           	opt stack 0
  2200  0000F5                     	ds	1
  2201  0000F6                     _timerReenvioSMS:
  2202                           	opt stack 0
  2203  0000F6                     	ds	1
  2204  0000F7                     _telefoneSelecionado:
  2205                           	opt stack 0
  2206  0000F7                     	ds	1
  2207  0000F8                     _out_BOMBA_ESTACIONARIA:
  2208                           	opt stack 0
  2209  0000F8                     	ds	1
  2210                           tblptru	equ	0xFF8
  2211                           tblptrh	equ	0xFF7
  2212                           tblptrl	equ	0xFF6
  2213                           tablat	equ	0xFF5
  2214                           postinc0	equ	0xFEE
  2215                           wreg	equ	0xFE8
  2216                           postdec1	equ	0xFE5
  2217                           fsr1l	equ	0xFE1
  2218                           
  2219                           	psect	dataBANK0
  2220  0000F9                     __pdataBANK0:
  2221                           	opt stack 0
  2222  0000F9                     _dtl_posicao:
  2223                           	opt stack 0
  2224  0000F9                     	ds	1
  2225  0000FA                     _status_estacionaria:
  2226                           	opt stack 0
  2227  0000FA                     	ds	1
  2228  0000FB                     _status_principal:
  2229                           	opt stack 0
  2230  0000FB                     	ds	1
  2231  0000FC                     _status_jockey:
  2232                           	opt stack 0
  2233  0000FC                     	ds	1
  2234  0000FD                     _intervalo_teste_dia:
  2235                           	opt stack 0
  2236  0000FD                     	ds	1
  2237  0000FE                     _timerIntervaloEntreBombas:
  2238                           	opt stack 0
  2239  0000FE                     	ds	1
  2240  0000FF                     _intensidadeSinal:
  2241                           	opt stack 0
  2242  0000FF                     	ds	1
  2243                           tblptru	equ	0xFF8
  2244                           tblptrh	equ	0xFF7
  2245                           tblptrl	equ	0xFF6
  2246                           tablat	equ	0xFF5
  2247                           postinc0	equ	0xFEE
  2248                           wreg	equ	0xFE8
  2249                           postdec1	equ	0xFE5
  2250                           fsr1l	equ	0xFE1
  2251                           
  2252                           	psect	bssBANK1
  2253  000100                     __pbssBANK1:
  2254                           	opt stack 0
  2255  000100                     _coletaMedias:
  2256                           	opt stack 0
  2257  000100                     	ds	10
  2258  00010A                     _horimetro:
  2259                           	opt stack 0
  2260  00010A                     	ds	2
  2261  00010C                     _dtl_carregar_log:
  2262                           	opt stack 0
  2263  00010C                     	ds	1
  2264  00010D                     _dtl_estacionaria:
  2265                           	opt stack 0
  2266  00010D                     	ds	1
  2267  00010E                     _dtl_principal:
  2268                           	opt stack 0
  2269  00010E                     	ds	1
  2270  00010F                     _dtl_jockey:
  2271                           	opt stack 0
  2272  00010F                     	ds	1
  2273  000110                     _dtl_min:
  2274                           	opt stack 0
  2275  000110                     	ds	1
  2276  000111                     _dtl_hora:
  2277                           	opt stack 0
  2278  000111                     	ds	1
  2279  000112                     _dtl_ano:
  2280                           	opt stack 0
  2281  000112                     	ds	1
  2282  000113                     _dtl_mes:
  2283                           	opt stack 0
  2284  000113                     	ds	1
  2285  000114                     _dtl_dia:
  2286                           	opt stack 0
  2287  000114                     	ds	1
  2288  000115                     _counterPressedTime:
  2289                           	opt stack 0
  2290  000115                     	ds	1
  2291  000116                     __b_ok:
  2292                           	opt stack 0
  2293  000116                     	ds	1
  2294  000117                     _flag_b_ok:
  2295                           	opt stack 0
  2296  000117                     	ds	1
  2297  000118                     __b_mais:
  2298                           	opt stack 0
  2299  000118                     	ds	1
  2300  000119                     _flag_b_mais:
  2301                           	opt stack 0
  2302  000119                     	ds	1
  2303  00011A                     __b_menos:
  2304                           	opt stack 0
  2305  00011A                     	ds	1
  2306  00011B                     _flag_b_menos:
  2307                           	opt stack 0
  2308  00011B                     	ds	1
  2309  00011C                     __b_esc:
  2310                           	opt stack 0
  2311  00011C                     	ds	1
  2312  00011D                     _tela_menu_posi:
  2313                           	opt stack 0
  2314  00011D                     	ds	1
  2315  00011E                     _bufferSerial:
  2316                           	opt stack 0
  2317  00011E                     	ds	60
  2318  00015A                     _line4:
  2319                           	opt stack 0
  2320  00015A                     	ds	21
  2321  00016F                     _line3:
  2322                           	opt stack 0
  2323  00016F                     	ds	21
  2324  000184                     _line2:
  2325                           	opt stack 0
  2326  000184                     	ds	21
  2327  000199                     _line1:
  2328                           	opt stack 0
  2329  000199                     	ds	21
  2330  0001AE                     _bufferAUX:
  2331                           	opt stack 0
  2332  0001AE                     	ds	20
  2333  0001C2                     _tel2:
  2334                           	opt stack 0
  2335  0001C2                     	ds	12
  2336  0001CE                     _tel1:
  2337                           	opt stack 0
  2338  0001CE                     	ds	12
  2339                           tblptru	equ	0xFF8
  2340                           tblptrh	equ	0xFF7
  2341                           tblptrl	equ	0xFF6
  2342                           tablat	equ	0xFF5
  2343                           postinc0	equ	0xFEE
  2344                           wreg	equ	0xFE8
  2345                           postdec1	equ	0xFE5
  2346                           fsr1l	equ	0xFE1
  2347                           
  2348                           	psect	dataBANK1
  2349  0001DA                     __pdataBANK1:
  2350                           	opt stack 0
  2351  0001DA                     intToFloatStr@F2544:
  2352                           	opt stack 0
  2353  0001DA                     	ds	4
  2354  0001DE                     _ultimoEstadoLCD:
  2355                           	opt stack 0
  2356  0001DE                     	ds	4
  2357                           tblptru	equ	0xFF8
  2358                           tblptrh	equ	0xFF7
  2359                           tblptrl	equ	0xFF6
  2360                           tablat	equ	0xFF5
  2361                           postinc0	equ	0xFEE
  2362                           wreg	equ	0xFE8
  2363                           postdec1	equ	0xFE5
  2364                           fsr1l	equ	0xFE1
  2365                           
  2366                           	psect	cstackBANK0
  2367  000080                     __pcstackBANK0:
  2368                           	opt stack 0
  2369  000080                     ??_isdigit:
  2370  000080                     ??_monitorarAlteracaoEstado:
  2371  000080                     ??_I2C_Wait:
  2372  000080                     ?_strlen:
  2373                           	opt stack 0
  2374  000080                     ?_strchr:
  2375                           	opt stack 0
  2376  000080                     ?___wmul:
  2377                           	opt stack 0
  2378  000080                     ?___awdiv:
  2379                           	opt stack 0
  2380  000080                     ?___awmod:
  2381                           	opt stack 0
  2382  000080                     ?___lwdiv:
  2383                           	opt stack 0
  2384  000080                     ?___lmul:
  2385                           	opt stack 0
  2386  000080                     ?___aldiv:
  2387                           	opt stack 0
  2388  000080                     ?___lldiv:
  2389                           	opt stack 0
  2390  000080                     putch@c:
  2391                           	opt stack 0
  2392  000080                     btPress@bt:
  2393                           	opt stack 0
  2394  000080                     partidaBombaEstacionaria@acao:
  2395                           	opt stack 0
  2396  000080                     Lcd_Port@a:
  2397                           	opt stack 0
  2398  000080                     BCDtoDEC@val:
  2399                           	opt stack 0
  2400  000080                     writeChar@hex:
  2401                           	opt stack 0
  2402  000080                     blink@line:
  2403                           	opt stack 0
  2404  000080                     delay@x:
  2405                           	opt stack 0
  2406  000080                     ___wmul@multiplier:
  2407                           	opt stack 0
  2408  000080                     ___awdiv@dividend:
  2409                           	opt stack 0
  2410  000080                     ___awmod@dividend:
  2411                           	opt stack 0
  2412  000080                     ___lwdiv@dividend:
  2413                           	opt stack 0
  2414  000080                     memset@p1:
  2415                           	opt stack 0
  2416  000080                     strlen@s:
  2417                           	opt stack 0
  2418  000080                     strchr@ptr:
  2419                           	opt stack 0
  2420  000080                     ___lmul@multiplier:
  2421                           	opt stack 0
  2422  000080                     ___aldiv@dividend:
  2423                           	opt stack 0
  2424  000080                     ___lldiv@dividend:
  2425                           	opt stack 0
  2426                           
  2427                           ; 4 bytes @ 0x0
  2428  000080                     	ds	1
  2429  000081                     ??_Lcd_Cmd:
  2430  000081                     ?_I2C_Read:
  2431                           	opt stack 0
  2432  000081                     Lcd_Write_Char@tempp:
  2433                           	opt stack 0
  2434  000081                     _isdigit$2058:
  2435                           	opt stack 0
  2436  000081                     I2C_Read@a:
  2437                           	opt stack 0
  2438                           
  2439                           ; 2 bytes @ 0x1
  2440  000081                     	ds	1
  2441  000082                     ??_delay:
  2442  000082                     ??_strlen:
  2443  000082                     Lcd_Cmd@a:
  2444                           	opt stack 0
  2445  000082                     Lcd_Write_Char@y:
  2446                           	opt stack 0
  2447  000082                     blink@start:
  2448                           	opt stack 0
  2449  000082                     isdigit@c:
  2450                           	opt stack 0
  2451  000082                     monitorarAlteracaoEstado@estado:
  2452                           	opt stack 0
  2453  000082                     ___wmul@multiplicand:
  2454                           	opt stack 0
  2455  000082                     ___awdiv@divisor:
  2456                           	opt stack 0
  2457  000082                     ___awmod@divisor:
  2458                           	opt stack 0
  2459  000082                     ___lwdiv@divisor:
  2460                           	opt stack 0
  2461  000082                     memset@c:
  2462                           	opt stack 0
  2463  000082                     strchr@chr:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x2
  2467  000082                     	ds	1
  2468  000083                     ??_Lcd_Init:
  2469  000083                     Lcd_Set_Cursor@b:
  2470                           	opt stack 0
  2471  000083                     Lcd_Write_Char@a:
  2472                           	opt stack 0
  2473  000083                     blink@end:
  2474                           	opt stack 0
  2475  000083                     I2C_Read@temp:
  2476                           	opt stack 0
  2477                           
  2478                           ; 2 bytes @ 0x3
  2479  000083                     	ds	1
  2480  000084                     ??_criarCaracteresCGRAM:
  2481  000084                     Lcd_Set_Cursor@a:
  2482                           	opt stack 0
  2483  000084                     blink@i:
  2484                           	opt stack 0
  2485  000084                     ___awdiv@counter:
  2486                           	opt stack 0
  2487  000084                     ___awmod@counter:
  2488                           	opt stack 0
  2489  000084                     Lcd_Write_String@a:
  2490                           	opt stack 0
  2491  000084                     ___wmul@product:
  2492                           	opt stack 0
  2493  000084                     ___lwdiv@quotient:
  2494                           	opt stack 0
  2495  000084                     memset@n:
  2496                           	opt stack 0
  2497  000084                     strlen@cp:
  2498                           	opt stack 0
  2499  000084                     ___lmul@multiplicand:
  2500                           	opt stack 0
  2501  000084                     ___aldiv@divisor:
  2502                           	opt stack 0
  2503  000084                     ___lldiv@divisor:
  2504                           	opt stack 0
  2505                           
  2506                           ; 4 bytes @ 0x4
  2507  000084                     	ds	1
  2508  000085                     Lcd_Set_Cursor@z:
  2509                           	opt stack 0
  2510  000085                     ___awdiv@sign:
  2511                           	opt stack 0
  2512  000085                     ___awmod@sign:
  2513                           	opt stack 0
  2514                           
  2515                           ; 1 bytes @ 0x5
  2516  000085                     	ds	1
  2517  000086                     ?_strncmp:
  2518                           	opt stack 0
  2519  000086                     Lcd_Set_Cursor@y:
  2520                           	opt stack 0
  2521  000086                     Lcd_Write_String@i:
  2522                           	opt stack 0
  2523  000086                     ___lwdiv@counter:
  2524                           	opt stack 0
  2525  000086                     ___awdiv@quotient:
  2526                           	opt stack 0
  2527  000086                     memset@p:
  2528                           	opt stack 0
  2529  000086                     strncmp@s1:
  2530                           	opt stack 0
  2531                           
  2532                           ; 2 bytes @ 0x6
  2533  000086                     	ds	1
  2534  000087                     ?___lwmod:
  2535                           	opt stack 0
  2536  000087                     Lcd_Set_Cursor@temp:
  2537                           	opt stack 0
  2538  000087                     ___lwmod@dividend:
  2539                           	opt stack 0
  2540  000087                     criarCaracteresCGRAM@character:
  2541                           	opt stack 0
  2542                           
  2543                           ; 48 bytes @ 0x7
  2544  000087                     	ds	1
  2545  000088                     DECtoBCD@val:
  2546                           	opt stack 0
  2547  000088                     ___aldiv@counter:
  2548                           	opt stack 0
  2549  000088                     atualizarLCD@line1:
  2550                           	opt stack 0
  2551  000088                     strncmp@s2:
  2552                           	opt stack 0
  2553  000088                     ___lmul@product:
  2554                           	opt stack 0
  2555  000088                     ___lldiv@quotient:
  2556                           	opt stack 0
  2557                           
  2558                           ; 4 bytes @ 0x8
  2559  000088                     	ds	1
  2560  000089                     DECtoBCD@res:
  2561                           	opt stack 0
  2562  000089                     ___aldiv@sign:
  2563                           	opt stack 0
  2564  000089                     ___lwmod@divisor:
  2565                           	opt stack 0
  2566                           
  2567                           ; 2 bytes @ 0x9
  2568  000089                     	ds	1
  2569  00008A                     atualizarLCD@line2:
  2570                           	opt stack 0
  2571  00008A                     I2C_Write@d:
  2572                           	opt stack 0
  2573  00008A                     strncmp@len:
  2574                           	opt stack 0
  2575  00008A                     ___aldiv@quotient:
  2576                           	opt stack 0
  2577                           
  2578                           ; 4 bytes @ 0xA
  2579  00008A                     	ds	1
  2580  00008B                     ___lwmod@counter:
  2581                           	opt stack 0
  2582                           
  2583                           ; 1 bytes @ 0xB
  2584  00008B                     	ds	1
  2585  00008C                     ??_strncmp:
  2586  00008C                     ?__doprnt:
  2587                           	opt stack 0
  2588  00008C                     writeEEPROM_ext@data:
  2589                           	opt stack 0
  2590  00008C                     readEEPROM_ext@adress:
  2591                           	opt stack 0
  2592  00008C                     ___lldiv@counter:
  2593                           	opt stack 0
  2594  00008C                     setDS1307TimeDate@ptrToUserVal:
  2595                           	opt stack 0
  2596  00008C                     getDS1307TimeDate@ptrToUserVal:
  2597                           	opt stack 0
  2598  00008C                     atualizarLCD@line3:
  2599                           	opt stack 0
  2600  00008C                     __doprnt@pb:
  2601                           	opt stack 0
  2602                           
  2603                           ; 2 bytes @ 0xC
  2604  00008C                     	ds	1
  2605  00008D                     writeEEPROM_ext@adress:
  2606                           	opt stack 0
  2607  00008D                     readEEPROM_ext@data:
  2608                           	opt stack 0
  2609  00008D                     I2C_Master_Init@c:
  2610                           	opt stack 0
  2611                           
  2612                           ; 4 bytes @ 0xD
  2613  00008D                     	ds	1
  2614  00008E                     ??_setDS1307TimeDate:
  2615  00008E                     ??_salvarLOG:
  2616  00008E                     ?_map:
  2617                           	opt stack 0
  2618  00008E                     ?_readEEPROM16_ext:
  2619                           	opt stack 0
  2620  00008E                     atualizarLCD@line4:
  2621                           	opt stack 0
  2622  00008E                     map@x:
  2623                           	opt stack 0
  2624  00008E                     __doprnt@f:
  2625                           	opt stack 0
  2626                           
  2627                           ; 2 bytes @ 0xE
  2628  00008E                     	ds	1
  2629  00008F                     ?_strstr:
  2630                           	opt stack 0
  2631  00008F                     salvarLOG@ultimoLogSalvo:
  2632                           	opt stack 0
  2633  00008F                     strstr@s1:
  2634                           	opt stack 0
  2635                           
  2636                           ; 2 bytes @ 0xF
  2637  00008F                     	ds	1
  2638  000090                     ??_readEEPROM16_ext:
  2639  000090                     ??_atualizarLCD:
  2640  000090                     map@in_min:
  2641                           	opt stack 0
  2642  000090                     __doprnt@ap:
  2643                           	opt stack 0
  2644                           
  2645                           ; 2 bytes @ 0x10
  2646  000090                     	ds	1
  2647  000091                     ??_I2C_Master_Init:
  2648  000091                     readEEPROM16_ext@data:
  2649                           	opt stack 0
  2650  000091                     strstr@s2:
  2651                           	opt stack 0
  2652                           
  2653                           ; 2 bytes @ 0x11
  2654  000091                     	ds	1
  2655  000092                     ??__doprnt:
  2656  000092                     map@in_max:
  2657                           	opt stack 0
  2658                           
  2659                           ; 2 bytes @ 0x12
  2660  000092                     	ds	1
  2661  000093                     readEEPROM16_ext@adress:
  2662                           	opt stack 0
  2663  000093                     aguardaBuffer@str:
  2664                           	opt stack 0
  2665                           
  2666                           ; 2 bytes @ 0x13
  2667  000093                     	ds	1
  2668  000094                     lerParametros@verifica_memoria_nova:
  2669                           	opt stack 0
  2670  000094                     map@out_min:
  2671                           	opt stack 0
  2672                           
  2673                           ; 2 bytes @ 0x14
  2674  000094                     	ds	1
  2675  000095                     lerParametros@i:
  2676                           	opt stack 0
  2677  000095                     atualizarLCD@lcdEstado:
  2678                           	opt stack 0
  2679                           
  2680                           ; 4 bytes @ 0x15
  2681  000095                     	ds	1
  2682  000096                     __doprnt@prec:
  2683                           	opt stack 0
  2684  000096                     map@out_max:
  2685                           	opt stack 0
  2686                           
  2687                           ; 2 bytes @ 0x16
  2688  000096                     	ds	1
  2689  000097                     __doprnt@val:
  2690                           	opt stack 0
  2691                           
  2692                           ; 2 bytes @ 0x17
  2693  000097                     	ds	1
  2694  000098                     ??_map:
  2695                           
  2696                           ; 1 bytes @ 0x18
  2697  000098                     	ds	1
  2698  000099                     atualizarLCD@i:
  2699                           	opt stack 0
  2700  000099                     __doprnt@len:
  2701                           	opt stack 0
  2702                           
  2703                           ; 2 bytes @ 0x19
  2704  000099                     	ds	1
  2705  00009A                     map@d:
  2706                           	opt stack 0
  2707                           
  2708                           ; 4 bytes @ 0x1A
  2709  00009A                     	ds	1
  2710  00009B                     __doprnt@flag:
  2711                           	opt stack 0
  2712                           
  2713                           ; 1 bytes @ 0x1B
  2714  00009B                     	ds	1
  2715  00009C                     __doprnt@cp:
  2716                           	opt stack 0
  2717                           
  2718                           ; 2 bytes @ 0x1C
  2719  00009C                     	ds	2
  2720  00009E                     __doprnt@width:
  2721                           	opt stack 0
  2722  00009E                     map@e:
  2723                           	opt stack 0
  2724                           
  2725                           ; 4 bytes @ 0x1E
  2726  00009E                     	ds	2
  2727  0000A0                     __doprnt@c:
  2728                           	opt stack 0
  2729                           
  2730                           ; 1 bytes @ 0x20
  2731  0000A0                     	ds	1
  2732  0000A1                     ?_sprintf:
  2733                           	opt stack 0
  2734  0000A1                     ?_printf:
  2735                           	opt stack 0
  2736  0000A1                     printf@f:
  2737                           	opt stack 0
  2738  0000A1                     sprintf@wh:
  2739                           	opt stack 0
  2740                           
  2741                           ; 2 bytes @ 0x21
  2742  0000A1                     	ds	1
  2743  0000A2                     map@a:
  2744                           	opt stack 0
  2745                           
  2746                           ; 2 bytes @ 0x22
  2747  0000A2                     	ds	1
  2748  0000A3                     sprintf@f:
  2749                           	opt stack 0
  2750                           
  2751                           ; 2 bytes @ 0x23
  2752  0000A3                     	ds	1
  2753  0000A4                     map@b:
  2754                           	opt stack 0
  2755                           
  2756                           ; 2 bytes @ 0x24
  2757  0000A4                     	ds	2
  2758  0000A6                     map@c:
  2759                           	opt stack 0
  2760                           
  2761                           ; 2 bytes @ 0x26
  2762  0000A6                     	ds	2
  2763  0000A8                     map@result:
  2764                           	opt stack 0
  2765                           
  2766                           ; 2 bytes @ 0x28
  2767  0000A8                     	ds	2
  2768  0000AA                     ??_lerTransdutor:
  2769                           
  2770                           ; 1 bytes @ 0x2A
  2771  0000AA                     	ds	2
  2772  0000AC                     lerTransdutor@mediaLeitura:
  2773                           	opt stack 0
  2774                           
  2775                           ; 2 bytes @ 0x2C
  2776  0000AC                     	ds	2
  2777  0000AE                     lerTransdutor@_pressao:
  2778                           	opt stack 0
  2779                           
  2780                           ; 2 bytes @ 0x2E
  2781  0000AE                     	ds	2
  2782  0000B0                     lerTransdutor@adc:
  2783                           	opt stack 0
  2784                           
  2785                           ; 2 bytes @ 0x30
  2786  0000B0                     	ds	2
  2787  0000B2                     lerTransdutor@i:
  2788                           	opt stack 0
  2789                           
  2790                           ; 1 bytes @ 0x32
  2791  0000B2                     	ds	3
  2792  0000B5                     printf@ap:
  2793                           	opt stack 0
  2794  0000B5                     sprintf@ap:
  2795                           	opt stack 0
  2796                           
  2797                           ; 2 bytes @ 0x35
  2798  0000B5                     	ds	2
  2799  0000B7                     _criarCaracteresCGRAM$1548:
  2800                           	opt stack 0
  2801  0000B7                     printf@pb:
  2802                           	opt stack 0
  2803  0000B7                     sprintf@pb:
  2804                           	opt stack 0
  2805                           
  2806                           ; 4 bytes @ 0x37
  2807  0000B7                     	ds	2
  2808  0000B9                     criarCaracteresCGRAM@k:
  2809                           	opt stack 0
  2810                           
  2811                           ; 1 bytes @ 0x39
  2812  0000B9                     	ds	1
  2813  0000BA                     criarCaracteresCGRAM@j:
  2814                           	opt stack 0
  2815                           
  2816                           ; 1 bytes @ 0x3A
  2817  0000BA                     	ds	1
  2818  0000BB                     ??_comunicarTeste:
  2819  0000BB                     ??_enviaSMS:
  2820  0000BB                     ??_tela_testeBombas:
  2821  0000BB                     ??_dataLoger:
  2822  0000BB                     ??_informacoes:
  2823  0000BB                     ?_intToFloatStr:
  2824                           	opt stack 0
  2825  0000BB                     ?_getSerial:
  2826                           	opt stack 0
  2827  0000BB                     criarCaracteresCGRAM@i:
  2828                           	opt stack 0
  2829  0000BB                     getSerial@str:
  2830                           	opt stack 0
  2831                           
  2832                           ; 2 bytes @ 0x3B
  2833  0000BB                     	ds	1
  2834  0000BC                     
  2835                           ; 1 bytes @ 0x3C
  2836  0000BC                     	ds	1
  2837  0000BD                     getSerial@end:
  2838                           	opt stack 0
  2839  0000BD                     _comunicarTeste$1368:
  2840                           	opt stack 0
  2841  0000BD                     _enviaSMS$1383:
  2842                           	opt stack 0
  2843  0000BD                     _tela_testeBombas$1596:
  2844                           	opt stack 0
  2845  0000BD                     intToFloatStr@end:
  2846                           	opt stack 0
  2847                           
  2848                           ; 4 bytes @ 0x3D
  2849  0000BD                     	ds	1
  2850  0000BE                     ??_getSerial:
  2851                           
  2852                           ; 1 bytes @ 0x3E
  2853  0000BE                     	ds	1
  2854  0000BF                     ??_configuraTelefones:
  2855  0000BF                     _enviaSMS$1396:
  2856                           	opt stack 0
  2857                           
  2858                           ; 2 bytes @ 0x3F
  2859  0000BF                     	ds	1
  2860  0000C0                     getSerial@length:
  2861                           	opt stack 0
  2862  0000C0                     _dataLoger$1615:
  2863                           	opt stack 0
  2864                           
  2865                           ; 2 bytes @ 0x40
  2866  0000C0                     	ds	1
  2867  0000C1                     _enviaSMS$1397:
  2868                           	opt stack 0
  2869  0000C1                     _configuraTelefones$1641:
  2870                           	opt stack 0
  2871  0000C1                     intToFloatStr@conv:
  2872                           	opt stack 0
  2873                           
  2874                           ; 4 bytes @ 0x41
  2875  0000C1                     	ds	1
  2876  0000C2                     getSerial@i:
  2877                           	opt stack 0
  2878  0000C2                     _dataLoger$1621:
  2879                           	opt stack 0
  2880                           
  2881                           ; 2 bytes @ 0x42
  2882  0000C2                     	ds	1
  2883  0000C3                     configuraTelefones@i:
  2884                           	opt stack 0
  2885  0000C3                     getSerial@ret:
  2886                           	opt stack 0
  2887  0000C3                     _enviaSMS$1398:
  2888                           	opt stack 0
  2889                           
  2890                           ; 2 bytes @ 0x43
  2891  0000C3                     	ds	1
  2892  0000C4                     _dataLoger$1626:
  2893                           	opt stack 0
  2894                           
  2895                           ; 2 bytes @ 0x44
  2896  0000C4                     	ds	1
  2897  0000C5                     ?_atoi:
  2898                           	opt stack 0
  2899  0000C5                     intToFloatStr@valor:
  2900                           	opt stack 0
  2901  0000C5                     _enviaSMS$1403:
  2902                           	opt stack 0
  2903  0000C5                     atoi@s:
  2904                           	opt stack 0
  2905                           
  2906                           ; 2 bytes @ 0x45
  2907  0000C5                     	ds	1
  2908  0000C6                     dataLoger@logs:
  2909                           	opt stack 0
  2910  0000C6                     intToFloatStr@pr:
  2911                           	opt stack 0
  2912                           
  2913                           ; 2 bytes @ 0x46
  2914  0000C6                     	ds	1
  2915  0000C7                     ??_atoi:
  2916  0000C7                     enviaSMS@tipo:
  2917                           	opt stack 0
  2918                           
  2919                           ; 1 bytes @ 0x47
  2920  0000C7                     	ds	1
  2921  0000C8                     ??_acaoBombas:
  2922  0000C8                     ??_acaoTesteBombas:
  2923  0000C8                     _telaPrincipal$2566:
  2924                           	opt stack 0
  2925  0000C8                     _ajusteSP_Bombas$2567:
  2926                           	opt stack 0
  2927                           
  2928                           ; 2 bytes @ 0x48
  2929  0000C8                     	ds	1
  2930  0000C9                     atoi@sign:
  2931                           	opt stack 0
  2932                           
  2933                           ; 1 bytes @ 0x49
  2934  0000C9                     	ds	1
  2935  0000CA                     atoi@a:
  2936                           	opt stack 0
  2937                           
  2938                           ; 2 bytes @ 0x4A
  2939  0000CA                     	ds	2
  2940  0000CC                     ??_getSinalSIM800L:
  2941                           
  2942                           ; 1 bytes @ 0x4C
  2943  0000CC                     	ds	1
  2944  0000CD                     acaoTesteBombas@i:
  2945                           	opt stack 0
  2946                           
  2947                           ; 1 bytes @ 0x4D
  2948  0000CD                     	ds	1
  2949  0000CE                     getSinalSIM800L@sinal:
  2950                           	opt stack 0
  2951  0000CE                     _acaoTesteBombas$2565:
  2952                           	opt stack 0
  2953                           
  2954                           ; 2 bytes @ 0x4E
  2955  0000CE                     	ds	2
  2956  0000D0                     _acaoTesteBombas$1493:
  2957                           	opt stack 0
  2958                           
  2959                           ; 2 bytes @ 0x50
  2960  0000D0                     	ds	2
  2961  0000D2                     _acaoTesteBombas$1500:
  2962                           	opt stack 0
  2963                           
  2964                           ; 2 bytes @ 0x52
  2965  0000D2                     	ds	2
  2966  0000D4                     _acaoTesteBombas$1505:
  2967                           	opt stack 0
  2968                           
  2969                           ; 2 bytes @ 0x54
  2970  0000D4                     	ds	2
  2971  0000D6                     _acaoTesteBombas$1510:
  2972                           	opt stack 0
  2973                           
  2974                           ; 2 bytes @ 0x56
  2975  0000D6                     	ds	2
  2976  0000D8                     tblptru	equ	0xFF8
  2977                           tblptrh	equ	0xFF7
  2978                           tblptrl	equ	0xFF6
  2979                           tablat	equ	0xFF5
  2980                           postinc0	equ	0xFEE
  2981                           wreg	equ	0xFE8
  2982                           postdec1	equ	0xFE5
  2983                           fsr1l	equ	0xFE1
  2984                           
  2985                           ; 1 bytes @ 0x58
  2986                           
  2987                           	psect	cstackCOMRAM
  2988  000001                     __pcstackCOMRAM:
  2989                           	opt stack 0
  2990  000001                     ??i2_I2C_Wait:
  2991  000001                     i2Lcd_Port@a:
  2992                           	opt stack 0
  2993  000001                     i2BCDtoDEC@val:
  2994                           	opt stack 0
  2995  000001                     i2delay@x:
  2996                           	opt stack 0
  2997                           
  2998                           ; 2 bytes @ 0x0
  2999  000001                     	ds	1
  3000  000002                     ??i2_Lcd_Cmd:
  3001  000002                     ?i2_I2C_Read:
  3002                           	opt stack 0
  3003  000002                     i2Lcd_Write_Char@tempp:
  3004                           	opt stack 0
  3005  000002                     i2I2C_Write@d:
  3006                           	opt stack 0
  3007  000002                     i2I2C_Read@a:
  3008                           	opt stack 0
  3009                           
  3010                           ; 2 bytes @ 0x1
  3011  000002                     	ds	1
  3012  000003                     ??i2_delay:
  3013  000003                     i2Lcd_Cmd@a:
  3014                           	opt stack 0
  3015  000003                     i2Lcd_Write_Char@y:
  3016                           	opt stack 0
  3017                           
  3018                           ; 1 bytes @ 0x2
  3019  000003                     	ds	1
  3020  000004                     ??i2_Lcd_Init:
  3021  000004                     i2writeEEPROM_ext@data:
  3022                           	opt stack 0
  3023  000004                     i2Lcd_Write_Char@a:
  3024                           	opt stack 0
  3025  000004                     i2I2C_Read@temp:
  3026                           	opt stack 0
  3027                           
  3028                           ; 2 bytes @ 0x3
  3029  000004                     	ds	1
  3030  000005                     ??i2_criarCaracteresCGRAM:
  3031  000005                     i2writeEEPROM_ext@adress:
  3032                           	opt stack 0
  3033                           
  3034                           ; 1 bytes @ 0x4
  3035  000005                     	ds	1
  3036  000006                     writeEEPROM16_ext@data:
  3037                           	opt stack 0
  3038  000006                     i2getDS1307TimeDate@ptrToUserVal:
  3039                           	opt stack 0
  3040                           
  3041                           ; 2 bytes @ 0x5
  3042  000006                     	ds	2
  3043  000008                     writeEEPROM16_ext@adress:
  3044                           	opt stack 0
  3045  000008                     i2criarCaracteresCGRAM@character:
  3046                           	opt stack 0
  3047                           
  3048                           ; 48 bytes @ 0x7
  3049  000008                     	ds	48
  3050  000038                     i2_criarCaracteresCGRAM$1548:
  3051                           	opt stack 0
  3052                           
  3053                           ; 2 bytes @ 0x37
  3054  000038                     	ds	2
  3055  00003A                     i2criarCaracteresCGRAM@k:
  3056                           	opt stack 0
  3057                           
  3058                           ; 1 bytes @ 0x39
  3059  00003A                     	ds	1
  3060  00003B                     i2criarCaracteresCGRAM@j:
  3061                           	opt stack 0
  3062                           
  3063                           ; 1 bytes @ 0x3A
  3064  00003B                     	ds	1
  3065  00003C                     i2criarCaracteresCGRAM@i:
  3066                           	opt stack 0
  3067                           
  3068                           ; 1 bytes @ 0x3B
  3069  00003C                     	ds	1
  3070  00003D                     ??_TIMER:
  3071  00003D                     
  3072                           ; 1 bytes @ 0x3C
  3073  00003D                     	ds	18
  3074  00004F                     _TIMER$1667:
  3075                           	opt stack 0
  3076                           
  3077                           ; 2 bytes @ 0x4E
  3078  00004F                     	ds	2
  3079  000051                     _TIMER$1668:
  3080                           	opt stack 0
  3081                           
  3082                           ; 2 bytes @ 0x50
  3083  000051                     	ds	2
  3084  000053                     _TIMER$1669:
  3085                           	opt stack 0
  3086                           
  3087                           ; 2 bytes @ 0x52
  3088  000053                     	ds	2
  3089  000055                     _TIMER$1670:
  3090                           	opt stack 0
  3091                           
  3092                           ; 2 bytes @ 0x54
  3093  000055                     	ds	2
  3094  000057                     _TIMER$1671:
  3095                           	opt stack 0
  3096                           
  3097                           ; 2 bytes @ 0x56
  3098  000057                     	ds	2
  3099  000059                     _TIMER$1674:
  3100                           	opt stack 0
  3101                           
  3102                           ; 2 bytes @ 0x58
  3103  000059                     	ds	2
  3104  00005B                     _TIMER$1675:
  3105                           	opt stack 0
  3106                           
  3107                           ; 2 bytes @ 0x5A
  3108  00005B                     	ds	2
  3109  00005D                     _TIMER$1676:
  3110                           	opt stack 0
  3111                           
  3112                           ; 2 bytes @ 0x5C
  3113  00005D                     	ds	2
  3114  00005F                     _TIMER$1677:
  3115                           	opt stack 0
  3116                           
  3117                           ; 2 bytes @ 0x5E
  3118  00005F                     	ds	2
  3119  000061                     TIMER@c:
  3120                           	opt stack 0
  3121                           
  3122                           ; 1 bytes @ 0x60
  3123  000061                     	ds	1
  3124                           tblptru	equ	0xFF8
  3125                           tblptrh	equ	0xFF7
  3126                           tblptrl	equ	0xFF6
  3127                           tablat	equ	0xFF5
  3128                           postinc0	equ	0xFEE
  3129                           wreg	equ	0xFE8
  3130                           postdec1	equ	0xFE5
  3131                           fsr1l	equ	0xFE1
  3132                           
  3133 ;;
  3134 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3135 ;;
  3136 ;; *************** function _main *****************
  3137 ;; Defined at:
  3138 ;;		line 78 in file "Main.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;		None
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;		None
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  1    wreg      void 
  3145 ;; Registers used:
  3146 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 0/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3152 ;;      Params:         0       0       0       0       0       0       0
  3153 ;;      Locals:         0       0       0       0       0       0       0
  3154 ;;      Temps:          0       0       0       0       0       0       0
  3155 ;;      Totals:         0       0       0       0       0       0       0
  3156 ;;Total ram usage:        0 bytes
  3157 ;; Hardware stack levels required when called:   12
  3158 ;; This function calls:
  3159 ;;		_I2C_Master_Init
  3160 ;;		_Lcd_Clear
  3161 ;;		_Lcd_Init
  3162 ;;		_RTC_Init
  3163 ;;		_acaoBombas
  3164 ;;		_acaoTesteBombas
  3165 ;;		_ajusteSP_Bombas
  3166 ;;		_atualizarLCD
  3167 ;;		_btPress
  3168 ;;		_configuraRegistradores
  3169 ;;		_configuraTelefones
  3170 ;;		_configurarEstacionaria
  3171 ;;		_criarCaracteresCGRAM
  3172 ;;		_dataLoger
  3173 ;;		_delay
  3174 ;;		_getDS1307TimeDate
  3175 ;;		_getSinalSIM800L
  3176 ;;		_informacoes
  3177 ;;		_lerParametros
  3178 ;;		_lerTransdutor
  3179 ;;		_monitorarAlteracaoEstado
  3180 ;;		_partidaBombaEstacionaria
  3181 ;;		_sprintf
  3182 ;;		_telaPrincipal
  3183 ;;		_tela_ajusteRTC
  3184 ;;		_tela_testeBombas
  3185 ;;		_verificarIntervaloTesteBombas
  3186 ;; This function is called by:
  3187 ;;		Startup code after reset
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           	psect	text0
  3192  000A6E                     __ptext0:
  3193                           	opt stack 0
  3194  000A6E                     _main:
  3195                           	opt stack 0
  3196  000A6E  FFFF               	dw	65535	; assembler added errata NOP
  3197                           
  3198                           ;Main.c: 79: configuraRegistradores();
  3199                           
  3200                           ;incstack = 0
  3201  000A70  EC68  F03B         	call	_configuraRegistradores	;wreg free
  3202                           
  3203                           ;Main.c: 80: I2C_Master_Init(100000);
  3204  000A74  0EA0               	movlw	160
  3205  000A76  0100               	movlb	0	; () banked
  3206  000A78  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3207  000A7A  0E86               	movlw	134
  3208  000A7C  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3209  000A7E  0E01               	movlw	1
  3210  000A80  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3211  000A82  0E00               	movlw	0
  3212  000A84  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3213  000A86  ECC5  F03A         	call	_I2C_Master_Init	;wreg free
  3214                           
  3215                           ;Main.c: 81: delay(200);
  3216  000A8A  0E00               	movlw	0
  3217  000A8C  0100               	movlb	0	; () banked
  3218  000A8E  6F81               	movwf	(delay@x+1)& (0+255),b
  3219  000A90  0EC8               	movlw	200
  3220  000A92  6F80               	movwf	delay@x& (0+255),b
  3221  000A94  EC20  F037         	call	_delay	;wreg free
  3222                           
  3223                           ;Main.c: 82: RTC_Init();
  3224  000A98  EC56  F037         	call	_RTC_Init	;wreg free
  3225                           
  3226                           ;Main.c: 83: delay(100);
  3227  000A9C  0E00               	movlw	0
  3228  000A9E  0100               	movlb	0	; () banked
  3229  000AA0  6F81               	movwf	(delay@x+1)& (0+255),b
  3230  000AA2  0E64               	movlw	100
  3231  000AA4  6F80               	movwf	delay@x& (0+255),b
  3232  000AA6  EC20  F037         	call	_delay	;wreg free
  3233                           
  3234                           ;Main.c: 84: getDS1307TimeDate(&rtc);
  3235  000AAA  0E77               	movlw	low _rtc
  3236  000AAC  0100               	movlb	0	; () banked
  3237  000AAE  6F8C               	movwf	getDS1307TimeDate@ptrToUserVal& (0+255),b
  3238  000AB0  0E00               	movlw	high _rtc
  3239  000AB2  6F8D               	movwf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  3240  000AB4  EC26  F017         	call	_getDS1307TimeDate	;wreg free
  3241                           
  3242                           ;Main.c: 85: Lcd_Init();
  3243  000AB8  ECAB  F03C         	call	_Lcd_Init	;wreg free
  3244                           
  3245                           ;Main.c: 86: Lcd_Clear();
  3246  000ABC  ECEF  F035         	call	_Lcd_Clear	;wreg free
  3247                           
  3248                           ;Main.c: 87: criarCaracteresCGRAM();
  3249  000AC0  EC48  F01D         	call	_criarCaracteresCGRAM	;wreg free
  3250                           
  3251                           ;Main.c: 88: delay(100);
  3252  000AC4  0E00               	movlw	0
  3253  000AC6  0100               	movlb	0	; () banked
  3254  000AC8  6F81               	movwf	(delay@x+1)& (0+255),b
  3255  000ACA  0E64               	movlw	100
  3256  000ACC  6F80               	movwf	delay@x& (0+255),b
  3257  000ACE  EC20  F037         	call	_delay	;wreg free
  3258                           
  3259                           ;Main.c: 89: lerParametros();
  3260  000AD2  EC54  F018         	call	_lerParametros	;wreg free
  3261                           
  3262                           ;Main.c: 90: sprintf(line1, "TECHNOW");
  3263  000AD6  0E99               	movlw	low _line1
  3264  000AD8  0100               	movlb	0	; () banked
  3265  000ADA  6FA1               	movwf	sprintf@wh& (0+255),b
  3266  000ADC  0E01               	movlw	high _line1
  3267  000ADE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3268  000AE0  0E9A               	movlw	low STR_90
  3269  000AE2  6FA3               	movwf	sprintf@f& (0+255),b
  3270  000AE4  0E7F               	movlw	high STR_90
  3271  000AE6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3272  000AE8  EC42  F039         	call	_sprintf	;wreg free
  3273                           
  3274                           ;Main.c: 91: sprintf(line2, "Sistemas embarcados");
  3275  000AEC  0E84               	movlw	low _line2
  3276  000AEE  0100               	movlb	0	; () banked
  3277  000AF0  6FA1               	movwf	sprintf@wh& (0+255),b
  3278  000AF2  0E01               	movlw	high _line2
  3279  000AF4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3280  000AF6  0EC1               	movlw	low STR_91
  3281  000AF8  6FA3               	movwf	sprintf@f& (0+255),b
  3282  000AFA  0E7C               	movlw	high STR_91
  3283  000AFC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3284  000AFE  EC42  F039         	call	_sprintf	;wreg free
  3285                           
  3286                           ;Main.c: 92: sprintf(line3, "Versao Soft.:");
  3287  000B02  0E6F               	movlw	low _line3
  3288  000B04  0100               	movlb	0	; () banked
  3289  000B06  6FA1               	movwf	sprintf@wh& (0+255),b
  3290  000B08  0E01               	movlw	high _line3
  3291  000B0A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3292  000B0C  0E5B               	movlw	low STR_116
  3293  000B0E  6FA3               	movwf	sprintf@f& (0+255),b
  3294  000B10  0E7E               	movlw	high STR_116
  3295  000B12  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3296  000B14  EC42  F039         	call	_sprintf	;wreg free
  3297                           
  3298                           ;Main.c: 93: sprintf(&line4[9], "%s", "Jul 18 2020");
  3299  000B18  0E63               	movlw	low (_line4+9)
  3300  000B1A  0100               	movlb	0	; () banked
  3301  000B1C  6FA1               	movwf	sprintf@wh& (0+255),b
  3302  000B1E  0E01               	movlw	high (_line4+9)
  3303  000B20  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3304  000B22  0EFE               	movlw	low (STR_93+9)
  3305  000B24  6FA3               	movwf	sprintf@f& (0+255),b
  3306  000B26  0E7E               	movlw	high (STR_93+9)
  3307  000B28  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3308  000B2A  0EB9               	movlw	low STR_15
  3309  000B2C  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3310  000B2E  0E7E               	movlw	high STR_15
  3311  000B30  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3312  000B32  EC42  F039         	call	_sprintf	;wreg free
  3313                           
  3314                           ;Main.c: 94: atualizarLCD(line1, line2, line3, line4);
  3315  000B36  0E99               	movlw	low _line1
  3316  000B38  0100               	movlb	0	; () banked
  3317  000B3A  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3318  000B3C  0E01               	movlw	high _line1
  3319  000B3E  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3320  000B40  0E84               	movlw	low _line2
  3321  000B42  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3322  000B44  0E01               	movlw	high _line2
  3323  000B46  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3324  000B48  0E6F               	movlw	low _line3
  3325  000B4A  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3326  000B4C  0E01               	movlw	high _line3
  3327  000B4E  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3328  000B50  0E5A               	movlw	low _line4
  3329  000B52  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3330  000B54  0E01               	movlw	high _line4
  3331  000B56  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3332  000B58  ECDC  F011         	call	_atualizarLCD	;wreg free
  3333                           
  3334                           ;Main.c: 96: delay(2500);
  3335  000B5C  0E09               	movlw	9
  3336  000B5E  0100               	movlb	0	; () banked
  3337  000B60  6F81               	movwf	(delay@x+1)& (0+255),b
  3338  000B62  0EC4               	movlw	196
  3339  000B64  6F80               	movwf	delay@x& (0+255),b
  3340  000B66  EC20  F037         	call	_delay	;wreg free
  3341  000B6A                     l963:
  3342  000B6A  FFFF               	dw	65535	; assembler added errata NOP
  3343  000B6C  0004               	clrwdt		;# 
  3344                           
  3345                           ;Main.c: 101: if (timerColetaLeitura == 0) {
  3346  000B6E  5071               	movf	_timerColetaLeitura,w,c
  3347  000B70  A4D8               	btfss	status,2,c
  3348  000B72  D004               	goto	l964
  3349                           
  3350                           ;Main.c: 102: timerColetaLeitura = 3;
  3351  000B74  0E03               	movlw	3
  3352  000B76  6E71               	movwf	_timerColetaLeitura,c
  3353                           
  3354                           ;Main.c: 103: lerTransdutor();
  3355  000B78  EC81  F016         	call	_lerTransdutor	;wreg free
  3356  000B7C                     l964:
  3357  000B7C  FFFF               	dw	65535	; assembler added errata NOP
  3358                           
  3359                           ;Main.c: 104: }
  3360                           ;Main.c: 106: partidaBombaEstacionaria(out_BOMBA_ESTACIONARIA);
  3361  000B7E  0100               	movlb	0	; () banked
  3362  000B80  51F8               	movf	_out_BOMBA_ESTACIONARIA& (0+255),w,b
  3363  000B82  ECF7  F03A         	call	_partidaBombaEstacionaria
  3364                           
  3365                           ;Main.c: 108: if (menu_posi != 28 && !flagErroTransdutor) {
  3366  000B86  0E1C               	movlw	28
  3367  000B88  0100               	movlb	0	; () banked
  3368  000B8A  19DF               	xorwf	_menu_posi& (0+255),w,b
  3369  000B8C  B4D8               	btfsc	status,2,c
  3370  000B8E  D007               	goto	l965
  3371                           
  3372                           ; BSR set to: 0
  3373  000B90  51F0               	movf	_flagErroTransdutor& (0+255),w,b
  3374  000B92  A4D8               	btfss	status,2,c
  3375  000B94  D004               	goto	l965
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;Main.c: 109: acaoBombas();
  3379  000B96  ECE3  F01C         	call	_acaoBombas	;wreg free
  3380                           
  3381                           ;Main.c: 110: verificarIntervaloTesteBombas();
  3382  000B9A  EC7D  F038         	call	_verificarIntervaloTesteBombas	;wreg free
  3383  000B9E                     l965:
  3384  000B9E  FFFF               	dw	65535	; assembler added errata NOP
  3385                           
  3386                           ;Main.c: 111: }
  3387                           ;Main.c: 113: if (menu_posi != 28) {
  3388  000BA0  0E1C               	movlw	28
  3389  000BA2  0100               	movlb	0	; () banked
  3390  000BA4  19DF               	xorwf	_menu_posi& (0+255),w,b
  3391  000BA6  A4D8               	btfss	status,2,c
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;Main.c: 114: LATEbits.LATE2 = 0;
  3395  000BA8  948D               	bcf	3981,2,c	;volatile
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;Main.c: 115: }
  3399                           ;Main.c: 117: if (!timerVerificarSinal && !gsmOcupado) {
  3400                           
  3401                           ; BSR set to: 0
  3402  000BAA  507E               	movf	_timerVerificarSinal,w,c
  3403  000BAC  A4D8               	btfss	status,2,c
  3404  000BAE  D08B               	goto	l968
  3405                           
  3406                           ; BSR set to: 0
  3407  000BB0  51F4               	movf	_gsmOcupado& (0+255),w,b
  3408  000BB2  A4D8               	btfss	status,2,c
  3409  000BB4  D088               	goto	l968
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;Main.c: 118: getSinalSIM800L();
  3413  000BB6  ECC6  F014         	call	_getSinalSIM800L	;wreg free
  3414                           
  3415                           ;Main.c: 119: }
  3416                           ;Main.c: 121: switch (menu_posi) {
  3417  000BBA  D085               	goto	l968
  3418  000BBC  FFFF               	dw	65535	; assembler added errata NOP
  3419                           
  3420                           ;Main.c: 123: telaPrincipal();
  3421  000BBE  ECAA  F00F         	call	_telaPrincipal	;wreg free
  3422                           
  3423                           ;Main.c: 124: break;
  3424  000BC2  D0A6               	goto	l970
  3425  000BC4  FFFF               	dw	65535	; assembler added errata NOP
  3426                           
  3427                           ;Main.c: 126: sprintf(&line1[1], "DATA/HORA");
  3428  000BC6  0E9A               	movlw	low (_line1+1)
  3429  000BC8  0100               	movlb	0	; () banked
  3430  000BCA  6FA1               	movwf	sprintf@wh& (0+255),b
  3431  000BCC  0E01               	movlw	high (_line1+1)
  3432  000BCE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3433  000BD0  0E4D               	movlw	low STR_119
  3434  000BD2  6FA3               	movwf	sprintf@f& (0+255),b
  3435  000BD4  0E7F               	movlw	high STR_119
  3436  000BD6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3437  000BD8  EC42  F039         	call	_sprintf	;wreg free
  3438                           
  3439                           ;Main.c: 127: sprintf(&line2[1], "PRESSAO DA REDE");
  3440  000BDC  0E85               	movlw	low (_line2+1)
  3441  000BDE  0100               	movlb	0	; () banked
  3442  000BE0  6FA1               	movwf	sprintf@wh& (0+255),b
  3443  000BE2  0E01               	movlw	high (_line2+1)
  3444  000BE4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3445  000BE6  0EE2               	movlw	low STR_120
  3446  000BE8  6FA3               	movwf	sprintf@f& (0+255),b
  3447  000BEA  0E7D               	movlw	high STR_120
  3448  000BEC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3449  000BEE  EC42  F039         	call	_sprintf	;wreg free
  3450                           
  3451                           ;Main.c: 128: sprintf(&line3[1], "PARTIDA COMBUSTAO");
  3452  000BF2  0E70               	movlw	low (_line3+1)
  3453  000BF4  0100               	movlb	0	; () banked
  3454  000BF6  6FA1               	movwf	sprintf@wh& (0+255),b
  3455  000BF8  0E01               	movlw	high (_line3+1)
  3456  000BFA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3457  000BFC  0E47               	movlw	low STR_121
  3458  000BFE  6FA3               	movwf	sprintf@f& (0+255),b
  3459  000C00  0E7D               	movlw	high STR_121
  3460  000C02  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3461  000C04  EC42  F039         	call	_sprintf	;wreg free
  3462                           
  3463                           ;Main.c: 129: sprintf(&line4[1], "TELEFONES");
  3464  000C08  0E5B               	movlw	low (_line4+1)
  3465  000C0A  0100               	movlb	0	; () banked
  3466  000C0C  6FA1               	movwf	sprintf@wh& (0+255),b
  3467  000C0E  0E01               	movlw	high (_line4+1)
  3468  000C10  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3469  000C12  0E61               	movlw	low STR_122
  3470  000C14  6FA3               	movwf	sprintf@f& (0+255),b
  3471  000C16  0E7F               	movlw	high STR_122
  3472  000C18  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3473  000C1A  EC42  F039         	call	_sprintf	;wreg free
  3474                           
  3475                           ;Main.c: 130: break;
  3476  000C1E  D078               	goto	l970
  3477  000C20  FFFF               	dw	65535	; assembler added errata NOP
  3478                           
  3479                           ;Main.c: 132: sprintf(&line1[1], "PERIODO DE TESTES");
  3480  000C22  0E9A               	movlw	low (_line1+1)
  3481  000C24  0100               	movlb	0	; () banked
  3482  000C26  6FA1               	movwf	sprintf@wh& (0+255),b
  3483  000C28  0E01               	movlw	high (_line1+1)
  3484  000C2A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3485  000C2C  0E59               	movlw	low STR_123
  3486  000C2E  6FA3               	movwf	sprintf@f& (0+255),b
  3487  000C30  0E7D               	movlw	high STR_123
  3488  000C32  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3489  000C34  EC42  F039         	call	_sprintf	;wreg free
  3490                           
  3491                           ;Main.c: 133: sprintf(&line2[1], "DATALOGER");
  3492  000C38  0E85               	movlw	low (_line2+1)
  3493  000C3A  0100               	movlb	0	; () banked
  3494  000C3C  6FA1               	movwf	sprintf@wh& (0+255),b
  3495  000C3E  0E01               	movlw	high (_line2+1)
  3496  000C40  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3497  000C42  0E57               	movlw	low STR_124
  3498  000C44  6FA3               	movwf	sprintf@f& (0+255),b
  3499  000C46  0E7F               	movlw	high STR_124
  3500  000C48  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3501  000C4A  EC42  F039         	call	_sprintf	;wreg free
  3502                           
  3503                           ;Main.c: 134: sprintf(&line3[1], "INFO VERSAO");
  3504  000C4E  0E70               	movlw	low (_line3+1)
  3505  000C50  0100               	movlb	0	; () banked
  3506  000C52  6FA1               	movwf	sprintf@wh& (0+255),b
  3507  000C54  0E01               	movlw	high (_line3+1)
  3508  000C56  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3509  000C58  0EE9               	movlw	low STR_125
  3510  000C5A  6FA3               	movwf	sprintf@f& (0+255),b
  3511  000C5C  0E7E               	movlw	high STR_125
  3512  000C5E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3513  000C60  EC42  F039         	call	_sprintf	;wreg free
  3514                           
  3515                           ;Main.c: 135: sprintf(&line4[1], "Iniciar Testes");
  3516  000C64  0E5B               	movlw	low (_line4+1)
  3517  000C66  0100               	movlb	0	; () banked
  3518  000C68  6FA1               	movwf	sprintf@wh& (0+255),b
  3519  000C6A  0E01               	movlw	high (_line4+1)
  3520  000C6C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3521  000C6E  0E4C               	movlw	low STR_126
  3522  000C70  6FA3               	movwf	sprintf@f& (0+255),b
  3523  000C72  0E7E               	movlw	high STR_126
  3524  000C74  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3525  000C76  EC42  F039         	call	_sprintf	;wreg free
  3526                           
  3527                           ;Main.c: 136: break;
  3528  000C7A  D04A               	goto	l970
  3529  000C7C  FFFF               	dw	65535	; assembler added errata NOP
  3530                           
  3531                           ;Main.c: 138: tela_ajusteRTC();
  3532  000C7E  ECC4  F010         	call	_tela_ajusteRTC	;wreg free
  3533                           
  3534                           ;Main.c: 139: break;
  3535  000C82  D046               	goto	l970
  3536  000C84  FFFF               	dw	65535	; assembler added errata NOP
  3537                           
  3538                           ;Main.c: 141: ajusteSP_Bombas();
  3539  000C86  EC51  F00D         	call	_ajusteSP_Bombas	;wreg free
  3540                           
  3541                           ;Main.c: 142: break;
  3542  000C8A  D042               	goto	l970
  3543  000C8C  FFFF               	dw	65535	; assembler added errata NOP
  3544                           
  3545                           ;Main.c: 144: configurarEstacionaria();
  3546  000C8E  ECA6  F015         	call	_configurarEstacionaria	;wreg free
  3547                           
  3548                           ;Main.c: 145: break;
  3549  000C92  D03E               	goto	l970
  3550  000C94  FFFF               	dw	65535	; assembler added errata NOP
  3551                           
  3552                           ;Main.c: 147: configuraTelefones();
  3553  000C96  ECC2  F009         	call	_configuraTelefones	;wreg free
  3554                           
  3555                           ;Main.c: 148: break;
  3556  000C9A  D03A               	goto	l970
  3557  000C9C  FFFF               	dw	65535	; assembler added errata NOP
  3558                           
  3559                           ;Main.c: 150: tela_testeBombas();
  3560  000C9E  ECDB  F013         	call	_tela_testeBombas	;wreg free
  3561                           
  3562                           ;Main.c: 151: break;
  3563  000CA2  D036               	goto	l970
  3564  000CA4  FFFF               	dw	65535	; assembler added errata NOP
  3565                           
  3566                           ;Main.c: 153: dataLoger();
  3567  000CA6  EC81  F00E         	call	_dataLoger	;wreg free
  3568                           
  3569                           ;Main.c: 154: break;
  3570  000CAA  D032               	goto	l970
  3571  000CAC  FFFF               	dw	65535	; assembler added errata NOP
  3572                           
  3573                           ;Main.c: 156: informacoes();
  3574  000CAE  ECC0  F017         	call	_informacoes	;wreg free
  3575                           
  3576                           ;Main.c: 157: break;
  3577  000CB2  D02E               	goto	l970
  3578  000CB4  FFFF               	dw	65535	; assembler added errata NOP
  3579                           
  3580                           ;Main.c: 159: acaoTesteBombas();
  3581  000CB6  EC82  F007         	call	_acaoTesteBombas	;wreg free
  3582                           
  3583                           ;Main.c: 160: break;
  3584  000CBA  D02A               	goto	l970
  3585  000CBC  FFFF               	dw	65535	; assembler added errata NOP
  3586  000CBE  0E00               	movlw	0
  3587  000CC0  0100               	movlb	0	; () banked
  3588  000CC2  6FDF               	movwf	_menu_posi& (0+255),b
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;Main.c: 164: }
  3592                           
  3593                           ;Main.c: 163: break;
  3594  000CC4  D025               	goto	l970
  3595  000CC6                     l968:
  3596  000CC6  FFFF               	dw	65535	; assembler added errata NOP
  3597                           
  3598                           ; BSR set to: 0
  3599  000CC8  0100               	movlb	0	; () banked
  3600  000CCA  51DF               	movf	_menu_posi& (0+255),w,b
  3601                           
  3602                           ; Switch size 1, requested type "space"
  3603                           ; Number of cases is 11, Range of values is 0 to 28
  3604                           ; switch strategies available:
  3605                           ; Name         Instructions Cycles
  3606                           ; simple_byte           34    18 (average)
  3607                           ;	Chosen strategy is simple_byte
  3608  000CCC  0A00               	xorlw	0	; case 0
  3609  000CCE  B4D8               	btfsc	status,2,c
  3610  000CD0  D775               	goto	l969
  3611  000CD2  0A01               	xorlw	1	; case 1
  3612  000CD4  B4D8               	btfsc	status,2,c
  3613  000CD6  D776               	goto	l971
  3614  000CD8  0A03               	xorlw	3	; case 2
  3615  000CDA  B4D8               	btfsc	status,2,c
  3616  000CDC  D7A1               	goto	l972
  3617  000CDE  0A16               	xorlw	22	; case 20
  3618  000CE0  B4D8               	btfsc	status,2,c
  3619  000CE2  D7CC               	goto	l973
  3620  000CE4  0A01               	xorlw	1	; case 21
  3621  000CE6  B4D8               	btfsc	status,2,c
  3622  000CE8  D7CD               	goto	l974
  3623  000CEA  0A03               	xorlw	3	; case 22
  3624  000CEC  B4D8               	btfsc	status,2,c
  3625  000CEE  D7CE               	goto	l975
  3626  000CF0  0A01               	xorlw	1	; case 23
  3627  000CF2  B4D8               	btfsc	status,2,c
  3628  000CF4  D7CF               	goto	l976
  3629  000CF6  0A0F               	xorlw	15	; case 24
  3630  000CF8  B4D8               	btfsc	status,2,c
  3631  000CFA  D7D0               	goto	l977
  3632  000CFC  0A01               	xorlw	1	; case 25
  3633  000CFE  B4D8               	btfsc	status,2,c
  3634  000D00  D7D1               	goto	l978
  3635  000D02  0A02               	xorlw	2	; case 27
  3636  000D04  B4D8               	btfsc	status,2,c
  3637  000D06  D7D2               	goto	l979
  3638  000D08  0A07               	xorlw	7	; case 28
  3639  000D0A  B4D8               	btfsc	status,2,c
  3640  000D0C  D7D3               	goto	l980
  3641  000D0E  D7D6               	goto	l981
  3642  000D10                     l970:
  3643  000D10  FFFF               	dw	65535	; assembler added errata NOP
  3644                           
  3645                           ;Main.c: 166: if (menu_posi == 1 | menu_posi == 2) {
  3646                           
  3647                           ; BSR set to: 0
  3648  000D12  0100               	movlb	0	; () banked
  3649  000D14  05DF               	decf	_menu_posi& (0+255),w,b
  3650  000D16  B4D8               	btfsc	status,2,c
  3651  000D18  D09B               	goto	l985
  3652                           
  3653                           ; BSR set to: 0
  3654  000D1A  0E02               	movlw	2
  3655  000D1C  19DF               	xorwf	_menu_posi& (0+255),w,b
  3656  000D1E  B4D8               	btfsc	status,2,c
  3657  000D20  D097               	goto	l985
  3658  000D22  D0CB               	goto	l1006
  3659  000D24  FFFF               	dw	65535	; assembler added errata NOP
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;Main.c: 170: menu_posi = 1;
  3663                           
  3664                           ; BSR set to: 0
  3665  000D26  0E01               	movlw	1
  3666  000D28  6FDF               	movwf	_menu_posi& (0+255),b
  3667                           
  3668                           ;Main.c: 171: line1[0] = '>';
  3669  000D2A  0E3E               	movlw	62
  3670  000D2C  0101               	movlb	1	; () banked
  3671  000D2E  6F99               	movwf	_line1& (0+255),b
  3672                           
  3673                           ; BSR set to: 1
  3674                           ;Main.c: 172: if (btPress(4)) {
  3675  000D30  0E04               	movlw	4
  3676  000D32  ECE4  F03B         	call	_btPress
  3677  000D36  0900               	iorlw	0
  3678  000D38  B4D8               	btfsc	status,2,c
  3679  000D3A  D0A5               	goto	l988
  3680                           
  3681                           ;Main.c: 173: _menu_posi = menu_posi;
  3682  000D3C  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3683                           
  3684                           ;Main.c: 174: menu_posi = 20;
  3685  000D40  0E14               	movlw	20
  3686  000D42  D066               	goto	L5
  3687  000D44  FFFF               	dw	65535	; assembler added errata NOP
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;Main.c: 178: menu_posi = 1;
  3691                           
  3692                           ; BSR set to: 0
  3693  000D46  0E01               	movlw	1
  3694  000D48  6FDF               	movwf	_menu_posi& (0+255),b
  3695                           
  3696                           ;Main.c: 179: line2[0] = '>';
  3697  000D4A  0E3E               	movlw	62
  3698  000D4C  0101               	movlb	1	; () banked
  3699  000D4E  6F84               	movwf	_line2& (0+255),b
  3700                           
  3701                           ; BSR set to: 1
  3702                           ;Main.c: 180: if (btPress(4)) {
  3703  000D50  0E04               	movlw	4
  3704  000D52  ECE4  F03B         	call	_btPress
  3705  000D56  0900               	iorlw	0
  3706  000D58  B4D8               	btfsc	status,2,c
  3707  000D5A  D095               	goto	l988
  3708                           
  3709                           ;Main.c: 181: _menu_posi = menu_posi;
  3710  000D5C  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3711                           
  3712                           ;Main.c: 182: menu_posi = 21;
  3713  000D60  0E15               	movlw	21
  3714  000D62  D056               	goto	L5
  3715  000D64  FFFF               	dw	65535	; assembler added errata NOP
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;Main.c: 186: menu_posi = 1;
  3719                           
  3720                           ; BSR set to: 0
  3721  000D66  0E01               	movlw	1
  3722  000D68  6FDF               	movwf	_menu_posi& (0+255),b
  3723                           
  3724                           ;Main.c: 187: line3[0] = '>';
  3725  000D6A  0E3E               	movlw	62
  3726  000D6C  0101               	movlb	1	; () banked
  3727  000D6E  6F6F               	movwf	_line3& (0+255),b
  3728                           
  3729                           ; BSR set to: 1
  3730                           ;Main.c: 188: if (btPress(4)) {
  3731  000D70  0E04               	movlw	4
  3732  000D72  ECE4  F03B         	call	_btPress
  3733  000D76  0900               	iorlw	0
  3734  000D78  B4D8               	btfsc	status,2,c
  3735  000D7A  D085               	goto	l988
  3736                           
  3737                           ;Main.c: 189: _menu_posi = menu_posi;
  3738  000D7C  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3739                           
  3740                           ;Main.c: 190: menu_posi = 22;
  3741  000D80  0E16               	movlw	22
  3742  000D82  D046               	goto	L5
  3743  000D84  FFFF               	dw	65535	; assembler added errata NOP
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;Main.c: 194: menu_posi = 1;
  3747                           
  3748                           ; BSR set to: 0
  3749  000D86  0E01               	movlw	1
  3750  000D88  6FDF               	movwf	_menu_posi& (0+255),b
  3751                           
  3752                           ;Main.c: 195: line4[0] = '>';
  3753  000D8A  0E3E               	movlw	62
  3754  000D8C  0101               	movlb	1	; () banked
  3755  000D8E  6F5A               	movwf	_line4& (0+255),b
  3756                           
  3757                           ; BSR set to: 1
  3758                           ;Main.c: 196: if (btPress(4)) {
  3759  000D90  0E04               	movlw	4
  3760  000D92  ECE4  F03B         	call	_btPress
  3761  000D96  0900               	iorlw	0
  3762  000D98  B4D8               	btfsc	status,2,c
  3763  000D9A  D075               	goto	l988
  3764                           
  3765                           ;Main.c: 197: _menu_posi = menu_posi;
  3766  000D9C  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3767                           
  3768                           ;Main.c: 198: menu_posi = 23;
  3769  000DA0  0E17               	movlw	23
  3770  000DA2  D036               	goto	L5
  3771  000DA4  FFFF               	dw	65535	; assembler added errata NOP
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;Main.c: 202: menu_posi = 2;
  3775                           
  3776                           ; BSR set to: 0
  3777  000DA6  0E02               	movlw	2
  3778  000DA8  6FDF               	movwf	_menu_posi& (0+255),b
  3779                           
  3780                           ;Main.c: 203: line1[0] = '>';
  3781  000DAA  0E3E               	movlw	62
  3782  000DAC  0101               	movlb	1	; () banked
  3783  000DAE  6F99               	movwf	_line1& (0+255),b
  3784                           
  3785                           ; BSR set to: 1
  3786                           ;Main.c: 204: if (btPress(4)) {
  3787  000DB0  0E04               	movlw	4
  3788  000DB2  ECE4  F03B         	call	_btPress
  3789  000DB6  0900               	iorlw	0
  3790  000DB8  B4D8               	btfsc	status,2,c
  3791  000DBA  D065               	goto	l988
  3792                           
  3793                           ;Main.c: 205: _menu_posi = menu_posi;
  3794  000DBC  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3795                           
  3796                           ;Main.c: 206: menu_posi = 24;
  3797  000DC0  0E18               	movlw	24
  3798  000DC2  D026               	goto	L5
  3799  000DC4  FFFF               	dw	65535	; assembler added errata NOP
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;Main.c: 210: line2[0] = '>';
  3803                           
  3804                           ; BSR set to: 0
  3805  000DC6  0E3E               	movlw	62
  3806  000DC8  0101               	movlb	1	; () banked
  3807  000DCA  6F84               	movwf	_line2& (0+255),b
  3808                           
  3809                           ;Main.c: 211: menu_posi = 2;
  3810  000DCC  0E02               	movlw	2
  3811  000DCE  0100               	movlb	0	; () banked
  3812  000DD0  6FDF               	movwf	_menu_posi& (0+255),b
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;Main.c: 212: if (btPress(4)) {
  3816  000DD2  0E04               	movlw	4
  3817  000DD4  ECE4  F03B         	call	_btPress
  3818  000DD8  0900               	iorlw	0
  3819  000DDA  B4D8               	btfsc	status,2,c
  3820  000DDC  D054               	goto	l988
  3821                           
  3822                           ;Main.c: 213: _menu_posi = menu_posi;
  3823  000DDE  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3824                           
  3825                           ;Main.c: 214: menu_posi = 25;
  3826  000DE2  0E19               	movlw	25
  3827  000DE4  0100               	movlb	0	; () banked
  3828  000DE6  6FDF               	movwf	_menu_posi& (0+255),b
  3829                           
  3830                           ;Main.c: 215: dtl_carregar_log = 1;
  3831  000DE8  0E01               	movlw	1
  3832  000DEA  0101               	movlb	1	; () banked
  3833  000DEC  6F0C               	movwf	_dtl_carregar_log& (0+255),b
  3834                           
  3835                           ; BSR set to: 1
  3836                           ;Main.c: 216: }
  3837                           ;Main.c: 217: break;
  3838  000DEE  D04B               	goto	l988
  3839  000DF0  FFFF               	dw	65535	; assembler added errata NOP
  3840                           
  3841                           ;Main.c: 219: line3[0] = '>';
  3842                           
  3843                           ; BSR set to: 1
  3844  000DF2  0E3E               	movlw	62
  3845  000DF4  0101               	movlb	1	; () banked
  3846  000DF6  6F6F               	movwf	_line3& (0+255),b
  3847                           
  3848                           ;Main.c: 220: menu_posi = 2;
  3849  000DF8  0E02               	movlw	2
  3850  000DFA  0100               	movlb	0	; () banked
  3851  000DFC  6FDF               	movwf	_menu_posi& (0+255),b
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;Main.c: 221: if (btPress(4)) {
  3855  000DFE  0E04               	movlw	4
  3856  000E00  ECE4  F03B         	call	_btPress
  3857  000E04  0900               	iorlw	0
  3858  000E06  B4D8               	btfsc	status,2,c
  3859  000E08  D03E               	goto	l988
  3860                           
  3861                           ;Main.c: 222: _menu_posi = menu_posi;
  3862  000E0A  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3863                           
  3864                           ;Main.c: 223: menu_posi = 27;
  3865  000E0E  0E1B               	movlw	27
  3866  000E10                     L5:
  3867  000E10  FFFF               	dw	65535	; assembler added errata NOP
  3868  000E12  0100               	movlb	0	; () banked
  3869  000E14  D01A               	goto	L6
  3870  000E16  FFFF               	dw	65535	; assembler added errata NOP
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;Main.c: 227: line4[0] = '>';
  3874                           
  3875                           ; BSR set to: 0
  3876  000E18  0E3E               	movlw	62
  3877  000E1A  0101               	movlb	1	; () banked
  3878  000E1C  6F5A               	movwf	_line4& (0+255),b
  3879                           
  3880                           ;Main.c: 228: menu_posi = 2;
  3881  000E1E  0E02               	movlw	2
  3882  000E20  0100               	movlb	0	; () banked
  3883  000E22  6FDF               	movwf	_menu_posi& (0+255),b
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;Main.c: 229: if (btPress(4) && !ocorrendoIncendio) {
  3887  000E24  0E04               	movlw	4
  3888  000E26  ECE4  F03B         	call	_btPress
  3889  000E2A  0900               	iorlw	0
  3890  000E2C  B4D8               	btfsc	status,2,c
  3891  000E2E  D02B               	goto	l988
  3892  000E30  0100               	movlb	0	; () banked
  3893  000E32  51F1               	movf	_ocorrendoIncendio& (0+255),w,b
  3894  000E34  A4D8               	btfss	status,2,c
  3895  000E36  D027               	goto	l988
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;Main.c: 230: menu_posi = 28;
  3899  000E38  0E1C               	movlw	28
  3900  000E3A  6FDF               	movwf	_menu_posi& (0+255),b
  3901                           
  3902                           ;Main.c: 231: etapaTesteBombas = 0;
  3903  000E3C  0E00               	movlw	0
  3904  000E3E  6E70               	movwf	_etapaTesteBombas,c
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;Main.c: 232: }
  3908                           ;Main.c: 233: break;
  3909  000E40  D022               	goto	l988
  3910  000E42  FFFF               	dw	65535	; assembler added errata NOP
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;Main.c: 235: sub_menu_posi = 1;
  3914                           
  3915                           ; BSR set to: 0
  3916  000E44  0E01               	movlw	1
  3917  000E46  6E6B               	movwf	_sub_menu_posi,c
  3918                           
  3919                           ;Main.c: 236: menu_posi = 1;
  3920  000E48  0E01               	movlw	1
  3921  000E4A                     L6:
  3922  000E4A  FFFF               	dw	65535	; assembler added errata NOP
  3923  000E4C  6FDF               	movwf	_menu_posi& (0+255),b
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;Main.c: 238: }
  3927                           
  3928                           ;Main.c: 237: break;
  3929  000E4E  D01B               	goto	l988
  3930  000E50                     l985:
  3931  000E50  FFFF               	dw	65535	; assembler added errata NOP
  3932                           
  3933                           ; BSR set to: 0
  3934                           
  3935                           ; BSR set to: 0
  3936  000E52  506B               	movf	_sub_menu_posi,w,c
  3937                           
  3938                           ; Switch size 1, requested type "space"
  3939                           ; Number of cases is 8, Range of values is 1 to 8
  3940                           ; switch strategies available:
  3941                           ; Name         Instructions Cycles
  3942                           ; simple_byte           25    13 (average)
  3943                           ;	Chosen strategy is simple_byte
  3944  000E54  0A01               	xorlw	1	; case 1
  3945  000E56  B4D8               	btfsc	status,2,c
  3946  000E58  D765               	goto	l986
  3947  000E5A  0A03               	xorlw	3	; case 2
  3948  000E5C  B4D8               	btfsc	status,2,c
  3949  000E5E  D772               	goto	l989
  3950  000E60  0A01               	xorlw	1	; case 3
  3951  000E62  B4D8               	btfsc	status,2,c
  3952  000E64  D77F               	goto	l991
  3953  000E66  0A07               	xorlw	7	; case 4
  3954  000E68  B4D8               	btfsc	status,2,c
  3955  000E6A  D78C               	goto	l993
  3956  000E6C  0A01               	xorlw	1	; case 5
  3957  000E6E  B4D8               	btfsc	status,2,c
  3958  000E70  D799               	goto	l995
  3959  000E72  0A03               	xorlw	3	; case 6
  3960  000E74  B4D8               	btfsc	status,2,c
  3961  000E76  D7A6               	goto	l997
  3962  000E78  0A01               	xorlw	1	; case 7
  3963  000E7A  B4D8               	btfsc	status,2,c
  3964  000E7C  D7B9               	goto	l999
  3965  000E7E  0A0F               	xorlw	15	; case 8
  3966  000E80  B4D8               	btfsc	status,2,c
  3967  000E82  D7C9               	goto	l1001
  3968  000E84  D7DE               	goto	l1003
  3969  000E86                     l988:
  3970  000E86  FFFF               	dw	65535	; assembler added errata NOP
  3971                           
  3972                           ;Main.c: 240: if (btPress(3)) {
  3973                           
  3974                           ; BSR set to: 0
  3975  000E88  0E03               	movlw	3
  3976  000E8A  ECE4  F03B         	call	_btPress
  3977  000E8E  0900               	iorlw	0
  3978  000E90  A4D8               	btfss	status,2,c
  3979                           
  3980                           ;Main.c: 241: sub_menu_posi--;
  3981  000E92  066B               	decf	_sub_menu_posi,f,c
  3982                           
  3983                           ;Main.c: 242: }
  3984                           ;Main.c: 243: if (btPress(2)) {
  3985  000E94  0E02               	movlw	2
  3986  000E96  ECE4  F03B         	call	_btPress
  3987  000E9A  0900               	iorlw	0
  3988  000E9C  A4D8               	btfss	status,2,c
  3989                           
  3990                           ;Main.c: 244: sub_menu_posi++;
  3991  000E9E  2A6B               	incf	_sub_menu_posi,f,c
  3992                           
  3993                           ;Main.c: 245: }
  3994                           ;Main.c: 246: if (btPress(1)) {
  3995  000EA0  0E01               	movlw	1
  3996  000EA2  ECE4  F03B         	call	_btPress
  3997  000EA6  0900               	iorlw	0
  3998  000EA8  B4D8               	btfsc	status,2,c
  3999  000EAA  D007               	goto	l1006
  4000                           
  4001                           ;Main.c: 247: menu_posi = 0;
  4002  000EAC  0E00               	movlw	0
  4003  000EAE  0100               	movlb	0	; () banked
  4004  000EB0  6FDF               	movwf	_menu_posi& (0+255),b
  4005                           
  4006                           ;Main.c: 248: option_posi = 0;
  4007  000EB2  0E00               	movlw	0
  4008  000EB4  6FE0               	movwf	_option_posi& (0+255),b
  4009                           
  4010                           ;Main.c: 249: sub_menu_posi = 1;
  4011  000EB6  0E01               	movlw	1
  4012  000EB8  6E6B               	movwf	_sub_menu_posi,c
  4013  000EBA                     l1006:
  4014  000EBA  FFFF               	dw	65535	; assembler added errata NOP
  4015                           
  4016                           ;Main.c: 250: }
  4017                           ;Main.c: 251: }
  4018                           ;Main.c: 253: if (menu_posi == 20) {
  4019                           
  4020                           ; BSR set to: 0
  4021                           
  4022                           ; BSR set to: 0
  4023  000EBC  0E14               	movlw	20
  4024  000EBE  0100               	movlb	0	; () banked
  4025  000EC0  19DF               	xorwf	_menu_posi& (0+255),w,b
  4026  000EC2  A4D8               	btfss	status,2,c
  4027  000EC4  D002               	goto	l1007
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;Main.c: 254: ajst_rtc = 1;
  4031  000EC6  0E01               	movlw	1
  4032  000EC8  D002               	goto	L7
  4033  000ECA                     l1007:
  4034  000ECA  FFFF               	dw	65535	; assembler added errata NOP
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;Main.c: 256: ajst_rtc = 0;
  4038                           
  4039                           ; BSR set to: 0
  4040  000ECC  0E00               	movlw	0
  4041  000ECE                     L7:
  4042  000ECE  FFFF               	dw	65535	; assembler added errata NOP
  4043  000ED0  6E6A               	movwf	_ajst_rtc,c
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;Main.c: 257: }
  4047                           ;Main.c: 259: monitorarAlteracaoEstado();
  4048                           
  4049                           ; BSR set to: 0
  4050  000ED2  ECA5  F03B         	call	_monitorarAlteracaoEstado	;wreg free
  4051                           
  4052                           ;Main.c: 260: if (timerAtrasoLCD == 0) {
  4053  000ED6  5074               	movf	_timerAtrasoLCD,w,c
  4054  000ED8  A4D8               	btfss	status,2,c
  4055  000EDA  D647               	goto	l963
  4056                           
  4057                           ;Main.c: 261: atualizarLCD(line1, line2, line3, line4);
  4058  000EDC  0E99               	movlw	low _line1
  4059  000EDE  0100               	movlb	0	; () banked
  4060  000EE0  6F88               	movwf	atualizarLCD@line1& (0+255),b
  4061  000EE2  0E01               	movlw	high _line1
  4062  000EE4  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  4063  000EE6  0E84               	movlw	low _line2
  4064  000EE8  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  4065  000EEA  0E01               	movlw	high _line2
  4066  000EEC  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  4067  000EEE  0E6F               	movlw	low _line3
  4068  000EF0  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  4069  000EF2  0E01               	movlw	high _line3
  4070  000EF4  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  4071  000EF6  0E5A               	movlw	low _line4
  4072  000EF8  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  4073  000EFA  0E01               	movlw	high _line4
  4074  000EFC  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  4075  000EFE  ECDC  F011         	call	_atualizarLCD	;wreg free
  4076  000F02  D633               	goto	l963
  4077  000F04                     __end_of_main:
  4078                           	opt stack 0
  4079                           tblptru	equ	0xFF8
  4080                           tblptrh	equ	0xFF7
  4081                           tblptrl	equ	0xFF6
  4082                           tablat	equ	0xFF5
  4083                           postinc0	equ	0xFEE
  4084                           wreg	equ	0xFE8
  4085                           postdec1	equ	0xFE5
  4086                           fsr1l	equ	0xFE1
  4087                           status	equ	0xFD8
  4088                           
  4089 ;; *************** function _verificarIntervaloTesteBombas *****************
  4090 ;; Defined at:
  4091 ;;		line 74 in file "controle.h"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;		None
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;		None
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  1    wreg      void 
  4098 ;; Registers used:
  4099 ;;		wreg, status,2, status,0, cstack
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4105 ;;      Params:         0       0       0       0       0       0       0
  4106 ;;      Locals:         0       0       0       0       0       0       0
  4107 ;;      Temps:          0       0       0       0       0       0       0
  4108 ;;      Totals:         0       0       0       0       0       0       0
  4109 ;;Total ram usage:        0 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    9
  4112 ;; This function calls:
  4113 ;;		_writeEEPROM_ext
  4114 ;; This function is called by:
  4115 ;;		_main
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           	psect	text1
  4120  0070FA                     __ptext1:
  4121                           	opt stack 0
  4122  0070FA                     _verificarIntervaloTesteBombas:
  4123                           	opt stack 0
  4124  0070FA  FFFF               	dw	65535	; assembler added errata NOP
  4125                           
  4126                           ;controle.h: 75: if (intervalo_teste_dia != 0 && dias_restante_teste >= intervalo_teste_
      +                          dia && habilitaTesteAutomatico == 1) {
  4127                           
  4128                           ;incstack = 0
  4129  0070FC  0100               	movlb	0	; () banked
  4130  0070FE  51FD               	movf	_intervalo_teste_dia& (0+255),w,b
  4131  007100  B4D8               	btfsc	status,2,c
  4132  007102  D017               	goto	l522
  4133                           
  4134                           ; BSR set to: 0
  4135  007104  51FD               	movf	_intervalo_teste_dia& (0+255),w,b
  4136  007106  5DE8               	subwf	_dias_restante_teste& (0+255),w,b
  4137  007108  A0D8               	btfss	status,0,c
  4138  00710A  D013               	goto	l522
  4139                           
  4140                           ; BSR set to: 0
  4141  00710C  05EF               	decf	_habilitaTesteAutomatico& (0+255),w,b
  4142  00710E  A4D8               	btfss	status,2,c
  4143  007110  D010               	goto	l522
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;controle.h: 76: if (_hor == horario_de_teste) {
  4147  007112  51E7               	movf	_horario_de_teste& (0+255),w,b
  4148  007114  19EC               	xorwf	__hor& (0+255),w,b
  4149  007116  A4D8               	btfss	status,2,c
  4150  007118  D00C               	goto	l522
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;controle.h: 77: dias_restante_teste = 0;
  4154  00711A  0E00               	movlw	0
  4155  00711C  6FE8               	movwf	_dias_restante_teste& (0+255),b
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;controle.h: 78: writeEEPROM_ext(10, dias_restante_teste);
  4159  00711E  C0E8  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
  4160  007122  0E0A               	movlw	10
  4161  007124  EC1F  F039         	call	_writeEEPROM_ext
  4162                           
  4163                           ;controle.h: 79: etapaTesteBombas = 0;
  4164  007128  0E00               	movlw	0
  4165  00712A  6E70               	movwf	_etapaTesteBombas,c
  4166                           
  4167                           ;controle.h: 80: menu_posi = 28;
  4168  00712C  0E1C               	movlw	28
  4169  00712E  0100               	movlb	0	; () banked
  4170  007130  6FDF               	movwf	_menu_posi& (0+255),b
  4171  007132                     l522:
  4172  007132  FFFF               	dw	65535	; assembler added errata NOP
  4173                           
  4174                           ; BSR set to: 0
  4175                           
  4176                           ; BSR set to: 0
  4177                           
  4178                           ; BSR set to: 0
  4179  007134  0012               	return		;funcret
  4180  007136  FFFF               	dw	65535	; errata NOP
  4181  007138                     __end_of_verificarIntervaloTesteBombas:
  4182                           	opt stack 0
  4183                           tblptru	equ	0xFF8
  4184                           tblptrh	equ	0xFF7
  4185                           tblptrl	equ	0xFF6
  4186                           tablat	equ	0xFF5
  4187                           postinc0	equ	0xFEE
  4188                           wreg	equ	0xFE8
  4189                           postdec1	equ	0xFE5
  4190                           fsr1l	equ	0xFE1
  4191                           status	equ	0xFD8
  4192                           
  4193 ;; *************** function _tela_testeBombas *****************
  4194 ;; Defined at:
  4195 ;;		line 8 in file "tela_TESTE_BOMBAS.h"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;		None
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;		None
  4200 ;; Return value:  Size  Location     Type
  4201 ;;                  1    wreg      void 
  4202 ;; Registers used:
  4203 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4209 ;;      Params:         0       0       0       0       0       0       0
  4210 ;;      Locals:         0       2       0       0       0       0       0
  4211 ;;      Temps:          0       2       0       0       0       0       0
  4212 ;;      Totals:         0       4       0       0       0       0       0
  4213 ;;Total ram usage:        4 bytes
  4214 ;; Hardware stack levels used:    1
  4215 ;; Hardware stack levels required when called:    9
  4216 ;; This function calls:
  4217 ;;		_blink
  4218 ;;		_btPress
  4219 ;;		_sprintf
  4220 ;;		_writeEEPROM_ext
  4221 ;; This function is called by:
  4222 ;;		_main
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           	psect	text2
  4227  0027B6                     __ptext2:
  4228                           	opt stack 0
  4229  0027B6                     _tela_testeBombas:
  4230                           	opt stack 0
  4231  0027B6  FFFF               	dw	65535	; assembler added errata NOP
  4232                           
  4233                           ;tela_TESTE_BOMBAS.h: 10: sprintf(line1, "#Proximo em %2d dias", (intervalo_teste_dia - 
      +                          dias_restante_teste));
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;incstack = 0
  4237  0027B8  0E99               	movlw	low _line1
  4238  0027BA  0100               	movlb	0	; () banked
  4239  0027BC  6FA1               	movwf	sprintf@wh& (0+255),b
  4240  0027BE  0E01               	movlw	high _line1
  4241  0027C0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4242  0027C2  0E48               	movlw	low STR_73
  4243  0027C4  6FA3               	movwf	sprintf@f& (0+255),b
  4244  0027C6  0E7C               	movlw	high STR_73
  4245  0027C8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4246  0027CA  51E8               	movf	_dias_restante_teste& (0+255),w,b
  4247  0027CC  6FBB               	movwf	??_tela_testeBombas& (0+255),b
  4248  0027CE  6BBC               	clrf	(??_tela_testeBombas+1)& (0+255),b
  4249  0027D0  1FBB               	comf	??_tela_testeBombas& (0+255),f,b
  4250  0027D2  1FBC               	comf	(??_tela_testeBombas+1)& (0+255),f,b
  4251  0027D4  4BBB               	infsnz	??_tela_testeBombas& (0+255),f,b
  4252  0027D6  2BBC               	incf	(??_tela_testeBombas+1)& (0+255),f,b
  4253  0027D8  51FD               	movf	_intervalo_teste_dia& (0+255),w,b
  4254  0027DA  25BB               	addwf	??_tela_testeBombas& (0+255),w,b
  4255  0027DC  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  4256  0027DE  0E00               	movlw	0
  4257  0027E0  21BC               	addwfc	(??_tela_testeBombas+1)& (0+255),w,b
  4258  0027E2  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  4259  0027E4  EC42  F039         	call	_sprintf	;wreg free
  4260                           
  4261                           ;tela_TESTE_BOMBAS.h: 11: sprintf(line2, "INTERVALO: %2d dias", intervalo_teste_dia);
  4262  0027E8  0E84               	movlw	low _line2
  4263  0027EA  0100               	movlb	0	; () banked
  4264  0027EC  6FA1               	movwf	sprintf@wh& (0+255),b
  4265  0027EE  0E01               	movlw	high _line2
  4266  0027F0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4267  0027F2  0E99               	movlw	low STR_74
  4268  0027F4  6FA3               	movwf	sprintf@f& (0+255),b
  4269  0027F6  0E7C               	movlw	high STR_74
  4270  0027F8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4271  0027FA  C0FD  F0A5         	movff	_intervalo_teste_dia,?_sprintf+4
  4272  0027FE  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4273  002800  EC42  F039         	call	_sprintf	;wreg free
  4274                           
  4275                           ;tela_TESTE_BOMBAS.h: 12: sprintf(line3, "HORARIO: %02d horas", horario_de_teste);
  4276  002804  0E6F               	movlw	low _line3
  4277  002806  0100               	movlb	0	; () banked
  4278  002808  6FA1               	movwf	sprintf@wh& (0+255),b
  4279  00280A  0E01               	movlw	high _line3
  4280  00280C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4281  00280E  0EAD               	movlw	low STR_75
  4282  002810  6FA3               	movwf	sprintf@f& (0+255),b
  4283  002812  0E7C               	movlw	high STR_75
  4284  002814  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4285  002816  C0E7  F0A5         	movff	_horario_de_teste,?_sprintf+4
  4286  00281A  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4287  00281C  EC42  F039         	call	_sprintf	;wreg free
  4288                           
  4289                           ;tela_TESTE_BOMBAS.h: 13: sprintf(line4, "ATIVAR: %s", habilitaTesteAutomatico == 0 ? "N
      +                          ao" : "Sim");
  4290  002820  0100               	movlb	0	; () banked
  4291  002822  51EF               	movf	_habilitaTesteAutomatico& (0+255),w,b
  4292  002824  B4D8               	btfsc	status,2,c
  4293  002826  D004               	goto	l745
  4294                           
  4295                           ; BSR set to: 0
  4296  002828  0EF1               	movlw	low STR_78
  4297  00282A  6FBD               	movwf	_tela_testeBombas$1596& (0+255),b
  4298  00282C  0E7F               	movlw	high STR_78
  4299  00282E  D004               	goto	L8
  4300  002830                     l745:
  4301  002830  FFFF               	dw	65535	; assembler added errata NOP
  4302                           
  4303                           ; BSR set to: 0
  4304                           
  4305                           ; BSR set to: 0
  4306  002832  0EF5               	movlw	low STR_77
  4307  002834  6FBD               	movwf	_tela_testeBombas$1596& (0+255),b
  4308  002836  0E7F               	movlw	high STR_77
  4309  002838                     L8:
  4310  002838  FFFF               	dw	65535	; assembler added errata NOP
  4311  00283A  6FBE               	movwf	(_tela_testeBombas$1596+1)& (0+255),b
  4312                           
  4313                           ; BSR set to: 0
  4314                           
  4315                           ; BSR set to: 0
  4316  00283C  0E5A               	movlw	low _line4
  4317  00283E  6FA1               	movwf	sprintf@wh& (0+255),b
  4318  002840  0E01               	movlw	high _line4
  4319  002842  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4320  002844  0E38               	movlw	low STR_76
  4321  002846  6FA3               	movwf	sprintf@f& (0+255),b
  4322  002848  0E7F               	movlw	high STR_76
  4323  00284A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4324  00284C  C0BD  F0A5         	movff	_tela_testeBombas$1596,?_sprintf+4
  4325  002850  C0BE  F0A6         	movff	_tela_testeBombas$1596+1,?_sprintf+5
  4326  002854  EC42  F039         	call	_sprintf	;wreg free
  4327                           
  4328                           ;tela_TESTE_BOMBAS.h: 15: switch (option_posi) {
  4329  002858  D067               	goto	l748
  4330  00285A  FFFF               	dw	65535	; assembler added errata NOP
  4331                           
  4332                           ;tela_TESTE_BOMBAS.h: 17: blink(line2, 11, 14);
  4333  00285C  0E84               	movlw	low _line2
  4334  00285E  0100               	movlb	0	; () banked
  4335  002860  6F80               	movwf	blink@line& (0+255),b
  4336  002862  0E01               	movlw	high _line2
  4337  002864  6F81               	movwf	(blink@line+1)& (0+255),b
  4338  002866  0E0B               	movlw	11
  4339  002868  6F82               	movwf	blink@start& (0+255),b
  4340  00286A  0E0E               	movlw	14
  4341  00286C  6F83               	movwf	blink@end& (0+255),b
  4342  00286E  EC3F  F038         	call	_blink	;wreg free
  4343                           
  4344                           ;tela_TESTE_BOMBAS.h: 18: if (btPress(3)) {
  4345  002872  0E03               	movlw	3
  4346  002874  ECE4  F03B         	call	_btPress
  4347  002878  0900               	iorlw	0
  4348  00287A  B4D8               	btfsc	status,2,c
  4349  00287C  D002               	goto	l750
  4350                           
  4351                           ;tela_TESTE_BOMBAS.h: 19: intervalo_teste_dia++;
  4352  00287E  0100               	movlb	0	; () banked
  4353  002880  2BFD               	incf	_intervalo_teste_dia& (0+255),f,b
  4354  002882                     l750:
  4355  002882  FFFF               	dw	65535	; assembler added errata NOP
  4356                           
  4357                           ;tela_TESTE_BOMBAS.h: 20: }
  4358                           ;tela_TESTE_BOMBAS.h: 21: if (btPress(2)) {
  4359                           
  4360                           ; BSR set to: 0
  4361  002884  0E02               	movlw	2
  4362  002886  ECE4  F03B         	call	_btPress
  4363  00288A  0900               	iorlw	0
  4364  00288C  B4D8               	btfsc	status,2,c
  4365  00288E  D059               	goto	l752
  4366                           
  4367                           ;tela_TESTE_BOMBAS.h: 22: intervalo_teste_dia--;
  4368  002890  0100               	movlb	0	; () banked
  4369  002892  07FD               	decf	_intervalo_teste_dia& (0+255),f,b
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;tela_TESTE_BOMBAS.h: 23: }
  4373                           ;tela_TESTE_BOMBAS.h: 24: break;
  4374  002894  D056               	goto	l752
  4375  002896  FFFF               	dw	65535	; assembler added errata NOP
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;tela_TESTE_BOMBAS.h: 26: blink(line3, 9, 11);
  4379                           
  4380                           ; BSR set to: 0
  4381  002898  0E6F               	movlw	low _line3
  4382  00289A  6F80               	movwf	blink@line& (0+255),b
  4383  00289C  0E01               	movlw	high _line3
  4384  00289E  6F81               	movwf	(blink@line+1)& (0+255),b
  4385  0028A0  0E09               	movlw	9
  4386  0028A2  6F82               	movwf	blink@start& (0+255),b
  4387  0028A4  0E0B               	movlw	11
  4388  0028A6  6F83               	movwf	blink@end& (0+255),b
  4389  0028A8  EC3F  F038         	call	_blink	;wreg free
  4390                           
  4391                           ;tela_TESTE_BOMBAS.h: 27: if (btPress(3)) {
  4392  0028AC  0E03               	movlw	3
  4393  0028AE  ECE4  F03B         	call	_btPress
  4394  0028B2  0900               	iorlw	0
  4395  0028B4  B4D8               	btfsc	status,2,c
  4396  0028B6  D002               	goto	l754
  4397                           
  4398                           ;tela_TESTE_BOMBAS.h: 28: horario_de_teste++;
  4399  0028B8  0100               	movlb	0	; () banked
  4400  0028BA  2BE7               	incf	_horario_de_teste& (0+255),f,b
  4401  0028BC                     l754:
  4402  0028BC  FFFF               	dw	65535	; assembler added errata NOP
  4403                           
  4404                           ;tela_TESTE_BOMBAS.h: 29: }
  4405                           ;tela_TESTE_BOMBAS.h: 30: if (btPress(2)) {
  4406                           
  4407                           ; BSR set to: 0
  4408  0028BE  0E02               	movlw	2
  4409  0028C0  ECE4  F03B         	call	_btPress
  4410  0028C4  0900               	iorlw	0
  4411  0028C6  B4D8               	btfsc	status,2,c
  4412  0028C8  D002               	goto	l755
  4413                           
  4414                           ;tela_TESTE_BOMBAS.h: 31: horario_de_teste--;
  4415  0028CA  0100               	movlb	0	; () banked
  4416  0028CC  07E7               	decf	_horario_de_teste& (0+255),f,b
  4417  0028CE                     l755:
  4418  0028CE  FFFF               	dw	65535	; assembler added errata NOP
  4419                           
  4420                           ;tela_TESTE_BOMBAS.h: 32: }
  4421                           ;tela_TESTE_BOMBAS.h: 33: if (horario_de_teste > 23 || horario_de_teste < 0) {
  4422                           
  4423                           ; BSR set to: 0
  4424  0028D0  0E18               	movlw	24
  4425  0028D2  0100               	movlb	0	; () banked
  4426  0028D4  61E7               	cpfslt	_horario_de_teste& (0+255),b
  4427  0028D6  D001               	goto	l758
  4428  0028D8  D034               	goto	l752
  4429  0028DA                     l758:
  4430  0028DA  FFFF               	dw	65535	; assembler added errata NOP
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;tela_TESTE_BOMBAS.h: 34: horario_de_teste = 0;
  4434                           
  4435                           ; BSR set to: 0
  4436  0028DC  0E00               	movlw	0
  4437  0028DE  6FE7               	movwf	_horario_de_teste& (0+255),b
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;tela_TESTE_BOMBAS.h: 35: }
  4441                           ;tela_TESTE_BOMBAS.h: 36: break;
  4442  0028E0  D030               	goto	l752
  4443  0028E2  FFFF               	dw	65535	; assembler added errata NOP
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;tela_TESTE_BOMBAS.h: 38: blink(line4, 9, 11);
  4447                           
  4448                           ; BSR set to: 0
  4449  0028E4  0E5A               	movlw	low _line4
  4450  0028E6  6F80               	movwf	blink@line& (0+255),b
  4451  0028E8  0E01               	movlw	high _line4
  4452  0028EA  6F81               	movwf	(blink@line+1)& (0+255),b
  4453  0028EC  0E09               	movlw	9
  4454  0028EE  6F82               	movwf	blink@start& (0+255),b
  4455  0028F0  0E0B               	movlw	11
  4456  0028F2  6F83               	movwf	blink@end& (0+255),b
  4457  0028F4  EC3F  F038         	call	_blink	;wreg free
  4458                           
  4459                           ;tela_TESTE_BOMBAS.h: 39: if (btPress(3)) {
  4460  0028F8  0E03               	movlw	3
  4461  0028FA  ECE4  F03B         	call	_btPress
  4462  0028FE  0900               	iorlw	0
  4463  002900  B4D8               	btfsc	status,2,c
  4464  002902  D003               	goto	l760
  4465                           
  4466                           ;tela_TESTE_BOMBAS.h: 40: habilitaTesteAutomatico = 1;
  4467  002904  0E01               	movlw	1
  4468  002906  0100               	movlb	0	; () banked
  4469  002908  6FEF               	movwf	_habilitaTesteAutomatico& (0+255),b
  4470  00290A                     l760:
  4471  00290A  FFFF               	dw	65535	; assembler added errata NOP
  4472                           
  4473                           ;tela_TESTE_BOMBAS.h: 41: }
  4474                           ;tela_TESTE_BOMBAS.h: 42: if (btPress(2)) {
  4475                           
  4476                           ; BSR set to: 0
  4477  00290C  0E02               	movlw	2
  4478  00290E  ECE4  F03B         	call	_btPress
  4479  002912  0900               	iorlw	0
  4480  002914  B4D8               	btfsc	status,2,c
  4481  002916  D015               	goto	l752
  4482                           
  4483                           ;tela_TESTE_BOMBAS.h: 43: habilitaTesteAutomatico = 0;
  4484  002918  0E00               	movlw	0
  4485  00291A  0100               	movlb	0	; () banked
  4486  00291C  6FEF               	movwf	_habilitaTesteAutomatico& (0+255),b
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;tela_TESTE_BOMBAS.h: 44: }
  4490                           ;tela_TESTE_BOMBAS.h: 45: break;
  4491  00291E  D011               	goto	l752
  4492  002920  FFFF               	dw	65535	; assembler added errata NOP
  4493                           
  4494                           ; BSR set to: 0
  4495                           
  4496                           ; BSR set to: 0
  4497  002922  0E00               	movlw	0
  4498  002924  6FE0               	movwf	_option_posi& (0+255),b
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;tela_TESTE_BOMBAS.h: 48: }
  4502                           
  4503                           ;tela_TESTE_BOMBAS.h: 47: break;
  4504  002926  D00D               	goto	l752
  4505  002928                     l748:
  4506  002928  FFFF               	dw	65535	; assembler added errata NOP
  4507                           
  4508                           ; BSR set to: 0
  4509  00292A  0100               	movlb	0	; () banked
  4510  00292C  51E0               	movf	_option_posi& (0+255),w,b
  4511                           
  4512                           ; Switch size 1, requested type "space"
  4513                           ; Number of cases is 3, Range of values is 0 to 2
  4514                           ; switch strategies available:
  4515                           ; Name         Instructions Cycles
  4516                           ; simple_byte           10     6 (average)
  4517                           ;	Chosen strategy is simple_byte
  4518  00292E  0A00               	xorlw	0	; case 0
  4519  002930  B4D8               	btfsc	status,2,c
  4520  002932  D793               	goto	l749
  4521  002934  0A01               	xorlw	1	; case 1
  4522  002936  B4D8               	btfsc	status,2,c
  4523  002938  D7AE               	goto	l753
  4524  00293A  0A03               	xorlw	3	; case 2
  4525  00293C  B4D8               	btfsc	status,2,c
  4526  00293E  D7D1               	goto	l759
  4527  002940  D7EF               	goto	l762
  4528  002942                     l752:
  4529  002942  FFFF               	dw	65535	; assembler added errata NOP
  4530                           
  4531                           ;tela_TESTE_BOMBAS.h: 50: if (btPress(1)) {
  4532                           
  4533                           ; BSR set to: 0
  4534  002944  0E01               	movlw	1
  4535  002946  ECE4  F03B         	call	_btPress
  4536  00294A  0900               	iorlw	0
  4537  00294C  B4D8               	btfsc	status,2,c
  4538  00294E  D012               	goto	l763
  4539                           
  4540                           ;tela_TESTE_BOMBAS.h: 51: writeEEPROM_ext(6, intervalo_teste_dia);
  4541  002950  C0FD  F08C         	movff	_intervalo_teste_dia,writeEEPROM_ext@data
  4542  002954  0E06               	movlw	6
  4543  002956  EC1F  F039         	call	_writeEEPROM_ext
  4544                           
  4545                           ;tela_TESTE_BOMBAS.h: 52: writeEEPROM_ext(11, horario_de_teste);
  4546  00295A  C0E7  F08C         	movff	_horario_de_teste,writeEEPROM_ext@data
  4547  00295E  0E0B               	movlw	11
  4548  002960  EC1F  F039         	call	_writeEEPROM_ext
  4549                           
  4550                           ;tela_TESTE_BOMBAS.h: 53: writeEEPROM_ext(15, habilitaTesteAutomatico);
  4551  002964  C0EF  F08C         	movff	_habilitaTesteAutomatico,writeEEPROM_ext@data
  4552  002968  0E0F               	movlw	15
  4553  00296A  EC1F  F039         	call	_writeEEPROM_ext
  4554                           
  4555                           ;tela_TESTE_BOMBAS.h: 54: menu_posi = _menu_posi;
  4556  00296E  C0DE  F0DF         	movff	__menu_posi,_menu_posi
  4557                           
  4558                           ;tela_TESTE_BOMBAS.h: 55: } else if (btPress(4)) {
  4559  002972  D009               	goto	l765
  4560  002974                     l763:
  4561  002974  FFFF               	dw	65535	; assembler added errata NOP
  4562  002976  0E04               	movlw	4
  4563  002978  ECE4  F03B         	call	_btPress
  4564  00297C  0900               	iorlw	0
  4565  00297E  B4D8               	btfsc	status,2,c
  4566  002980  D002               	goto	l765
  4567                           
  4568                           ;tela_TESTE_BOMBAS.h: 56: option_posi++;
  4569  002982  0100               	movlb	0	; () banked
  4570  002984  2BE0               	incf	_option_posi& (0+255),f,b
  4571  002986                     l765:
  4572  002986  FFFF               	dw	65535	; assembler added errata NOP
  4573                           
  4574                           ; BSR set to: 0
  4575                           
  4576                           ; BSR set to: 0
  4577  002988  0012               	return		;funcret
  4578  00298A  FFFF               	dw	65535	; errata NOP
  4579  00298C                     __end_of_tela_testeBombas:
  4580                           	opt stack 0
  4581                           tblptru	equ	0xFF8
  4582                           tblptrh	equ	0xFF7
  4583                           tblptrl	equ	0xFF6
  4584                           tablat	equ	0xFF5
  4585                           postinc0	equ	0xFEE
  4586                           wreg	equ	0xFE8
  4587                           postdec1	equ	0xFE5
  4588                           fsr1l	equ	0xFE1
  4589                           status	equ	0xFD8
  4590                           
  4591 ;; *************** function _tela_ajusteRTC *****************
  4592 ;; Defined at:
  4593 ;;		line 11 in file "tela_RELOGIO.h"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;		None
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;		None
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  1    wreg      void 
  4600 ;; Registers used:
  4601 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4607 ;;      Params:         0       0       0       0       0       0       0
  4608 ;;      Locals:         0       0       0       0       0       0       0
  4609 ;;      Temps:          0       0       0       0       0       0       0
  4610 ;;      Totals:         0       0       0       0       0       0       0
  4611 ;;Total ram usage:        0 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:    9
  4614 ;; This function calls:
  4615 ;;		_blink
  4616 ;;		_btPress
  4617 ;;		_setDS1307TimeDate
  4618 ;;		_sprintf
  4619 ;;		_validaRTC
  4620 ;; This function is called by:
  4621 ;;		_main
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text3
  4626  002188                     __ptext3:
  4627                           	opt stack 0
  4628  002188                     _tela_ajusteRTC:
  4629                           	opt stack 0
  4630  002188  FFFF               	dw	65535	; assembler added errata NOP
  4631                           
  4632                           ;tela_RELOGIO.h: 12: sprintf(line1, "DATA:");
  4633                           
  4634                           ;incstack = 0
  4635  00218A  0E99               	movlw	low _line1
  4636  00218C  0100               	movlb	0	; () banked
  4637  00218E  6FA1               	movwf	sprintf@wh& (0+255),b
  4638  002190  0E01               	movlw	high _line1
  4639  002192  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4640  002194  0ECB               	movlw	low STR_69
  4641  002196  6FA3               	movwf	sprintf@f& (0+255),b
  4642  002198  0E7F               	movlw	high STR_69
  4643  00219A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4644  00219C  EC42  F039         	call	_sprintf	;wreg free
  4645                           
  4646                           ;tela_RELOGIO.h: 13: sprintf(line2, "%02d/%02d/%02d", rtc.date, rtc.month, rtc.year);
  4647  0021A0  0E84               	movlw	low _line2
  4648  0021A2  0100               	movlb	0	; () banked
  4649  0021A4  6FA1               	movwf	sprintf@wh& (0+255),b
  4650  0021A6  0E01               	movlw	high _line2
  4651  0021A8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4652  0021AA  0E01               	movlw	low STR_70
  4653  0021AC  6FA3               	movwf	sprintf@f& (0+255),b
  4654  0021AE  0E7E               	movlw	high STR_70
  4655  0021B0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4656  0021B2  C07B  F0A5         	movff	_rtc+4,?_sprintf+4
  4657  0021B6  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4658  0021B8  C07C  F0A7         	movff	_rtc+5,?_sprintf+6
  4659  0021BC  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4660  0021BE  C07D  F0A9         	movff	_rtc+6,?_sprintf+8
  4661  0021C2  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4662  0021C4  EC42  F039         	call	_sprintf	;wreg free
  4663                           
  4664                           ;tela_RELOGIO.h: 14: sprintf(&line1[11], "HORA:");
  4665  0021C8  0EA4               	movlw	low (_line1+11)
  4666  0021CA  0100               	movlb	0	; () banked
  4667  0021CC  6FA1               	movwf	sprintf@wh& (0+255),b
  4668  0021CE  0E01               	movlw	high (_line1+11)
  4669  0021D0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4670  0021D2  0EC5               	movlw	low STR_71
  4671  0021D4  6FA3               	movwf	sprintf@f& (0+255),b
  4672  0021D6  0E7F               	movlw	high STR_71
  4673  0021D8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4674  0021DA  EC42  F039         	call	_sprintf	;wreg free
  4675                           
  4676                           ;tela_RELOGIO.h: 15: sprintf(&line2[11], "%02d:%02d:%02d", rtc.hour, rtc.min, rtc.sec);
  4677  0021DE  0E8F               	movlw	low (_line2+11)
  4678  0021E0  0100               	movlb	0	; () banked
  4679  0021E2  6FA1               	movwf	sprintf@wh& (0+255),b
  4680  0021E4  0E01               	movlw	high (_line2+11)
  4681  0021E6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4682  0021E8  0E10               	movlw	low STR_72
  4683  0021EA  6FA3               	movwf	sprintf@f& (0+255),b
  4684  0021EC  0E7E               	movlw	high STR_72
  4685  0021EE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4686  0021F0  C07A  F0A5         	movff	_rtc+3,?_sprintf+4
  4687  0021F4  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4688  0021F6  C079  F0A7         	movff	_rtc+2,?_sprintf+6
  4689  0021FA  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4690  0021FC  C078  F0A9         	movff	_rtc+1,?_sprintf+8
  4691  002200  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4692  002202  EC42  F039         	call	_sprintf	;wreg free
  4693                           
  4694                           ;tela_RELOGIO.h: 17: switch (option_posi) {
  4695  002206  D0A1               	goto	l717
  4696  002208  FFFF               	dw	65535	; assembler added errata NOP
  4697                           
  4698                           ;tela_RELOGIO.h: 19: blink(line2, 1, 2);
  4699  00220A  0E84               	movlw	low _line2
  4700  00220C  0100               	movlb	0	; () banked
  4701  00220E  6F80               	movwf	blink@line& (0+255),b
  4702  002210  0E01               	movlw	high _line2
  4703  002212  6F81               	movwf	(blink@line+1)& (0+255),b
  4704  002214  0E01               	movlw	1
  4705  002216  6F82               	movwf	blink@start& (0+255),b
  4706  002218  0E02               	movlw	2
  4707  00221A  6F83               	movwf	blink@end& (0+255),b
  4708  00221C  EC3F  F038         	call	_blink	;wreg free
  4709                           
  4710                           ;tela_RELOGIO.h: 20: if (btPress(3)) {
  4711  002220  0E03               	movlw	3
  4712  002222  ECE4  F03B         	call	_btPress
  4713  002226  0900               	iorlw	0
  4714  002228  A4D8               	btfss	status,2,c
  4715                           
  4716                           ;tela_RELOGIO.h: 21: rtc.date++;
  4717  00222A  2A7B               	incf	_rtc+4,f,c
  4718                           
  4719                           ;tela_RELOGIO.h: 22: }
  4720                           ;tela_RELOGIO.h: 23: if (btPress(2)) {
  4721  00222C  0E02               	movlw	2
  4722  00222E  ECE4  F03B         	call	_btPress
  4723  002232  0900               	iorlw	0
  4724  002234  B4D8               	btfsc	status,2,c
  4725  002236  D09F               	goto	l721
  4726                           
  4727                           ;tela_RELOGIO.h: 24: rtc.date--;
  4728  002238  067B               	decf	_rtc+4,f,c
  4729                           
  4730                           ;tela_RELOGIO.h: 25: }
  4731                           ;tela_RELOGIO.h: 26: break;
  4732  00223A  D09D               	goto	l721
  4733  00223C  FFFF               	dw	65535	; assembler added errata NOP
  4734                           
  4735                           ;tela_RELOGIO.h: 28: blink(line2, 4, 5);
  4736  00223E  0E84               	movlw	low _line2
  4737  002240  0100               	movlb	0	; () banked
  4738  002242  6F80               	movwf	blink@line& (0+255),b
  4739  002244  0E01               	movlw	high _line2
  4740  002246  6F81               	movwf	(blink@line+1)& (0+255),b
  4741  002248  0E04               	movlw	4
  4742  00224A  6F82               	movwf	blink@start& (0+255),b
  4743  00224C  0E05               	movlw	5
  4744  00224E  6F83               	movwf	blink@end& (0+255),b
  4745  002250  EC3F  F038         	call	_blink	;wreg free
  4746                           
  4747                           ;tela_RELOGIO.h: 29: if (btPress(3)) {
  4748  002254  0E03               	movlw	3
  4749  002256  ECE4  F03B         	call	_btPress
  4750  00225A  0900               	iorlw	0
  4751  00225C  A4D8               	btfss	status,2,c
  4752                           
  4753                           ;tela_RELOGIO.h: 30: rtc.month++;
  4754  00225E  2A7C               	incf	_rtc+5,f,c
  4755                           
  4756                           ;tela_RELOGIO.h: 31: }
  4757                           ;tela_RELOGIO.h: 32: if (btPress(2)) {
  4758  002260  0E02               	movlw	2
  4759  002262  ECE4  F03B         	call	_btPress
  4760  002266  0900               	iorlw	0
  4761  002268  B4D8               	btfsc	status,2,c
  4762  00226A  D085               	goto	l721
  4763                           
  4764                           ;tela_RELOGIO.h: 33: rtc.month--;
  4765  00226C  067C               	decf	_rtc+5,f,c
  4766                           
  4767                           ;tela_RELOGIO.h: 34: }
  4768                           ;tela_RELOGIO.h: 35: break;
  4769  00226E  D083               	goto	l721
  4770  002270  FFFF               	dw	65535	; assembler added errata NOP
  4771                           
  4772                           ;tela_RELOGIO.h: 37: blink(line2, 7, 8);
  4773  002272  0E84               	movlw	low _line2
  4774  002274  0100               	movlb	0	; () banked
  4775  002276  6F80               	movwf	blink@line& (0+255),b
  4776  002278  0E01               	movlw	high _line2
  4777  00227A  6F81               	movwf	(blink@line+1)& (0+255),b
  4778  00227C  0E07               	movlw	7
  4779  00227E  6F82               	movwf	blink@start& (0+255),b
  4780  002280  0E08               	movlw	8
  4781  002282  6F83               	movwf	blink@end& (0+255),b
  4782  002284  EC3F  F038         	call	_blink	;wreg free
  4783                           
  4784                           ;tela_RELOGIO.h: 38: if (btPress(3)) {
  4785  002288  0E03               	movlw	3
  4786  00228A  ECE4  F03B         	call	_btPress
  4787  00228E  0900               	iorlw	0
  4788  002290  A4D8               	btfss	status,2,c
  4789                           
  4790                           ;tela_RELOGIO.h: 39: rtc.year++;
  4791  002292  2A7D               	incf	_rtc+6,f,c
  4792                           
  4793                           ;tela_RELOGIO.h: 40: }
  4794                           ;tela_RELOGIO.h: 41: if (btPress(2)) {
  4795  002294  0E02               	movlw	2
  4796  002296  ECE4  F03B         	call	_btPress
  4797  00229A  0900               	iorlw	0
  4798  00229C  B4D8               	btfsc	status,2,c
  4799  00229E  D06B               	goto	l721
  4800                           
  4801                           ;tela_RELOGIO.h: 42: rtc.year--;
  4802  0022A0  067D               	decf	_rtc+6,f,c
  4803                           
  4804                           ;tela_RELOGIO.h: 43: }
  4805                           ;tela_RELOGIO.h: 44: break;
  4806  0022A2  D069               	goto	l721
  4807  0022A4  FFFF               	dw	65535	; assembler added errata NOP
  4808                           
  4809                           ;tela_RELOGIO.h: 46: blink(line2, 12, 13);
  4810  0022A6  0E84               	movlw	low _line2
  4811  0022A8  0100               	movlb	0	; () banked
  4812  0022AA  6F80               	movwf	blink@line& (0+255),b
  4813  0022AC  0E01               	movlw	high _line2
  4814  0022AE  6F81               	movwf	(blink@line+1)& (0+255),b
  4815  0022B0  0E0C               	movlw	12
  4816  0022B2  6F82               	movwf	blink@start& (0+255),b
  4817  0022B4  0E0D               	movlw	13
  4818  0022B6  6F83               	movwf	blink@end& (0+255),b
  4819  0022B8  EC3F  F038         	call	_blink	;wreg free
  4820                           
  4821                           ;tela_RELOGIO.h: 47: if (btPress(3)) {
  4822  0022BC  0E03               	movlw	3
  4823  0022BE  ECE4  F03B         	call	_btPress
  4824  0022C2  0900               	iorlw	0
  4825  0022C4  A4D8               	btfss	status,2,c
  4826                           
  4827                           ;tela_RELOGIO.h: 48: rtc.hour++;
  4828  0022C6  2A7A               	incf	_rtc+3,f,c
  4829                           
  4830                           ;tela_RELOGIO.h: 49: }
  4831                           ;tela_RELOGIO.h: 50: if (btPress(2)) {
  4832  0022C8  0E02               	movlw	2
  4833  0022CA  ECE4  F03B         	call	_btPress
  4834  0022CE  0900               	iorlw	0
  4835  0022D0  B4D8               	btfsc	status,2,c
  4836  0022D2  D051               	goto	l721
  4837                           
  4838                           ;tela_RELOGIO.h: 51: rtc.hour--;
  4839  0022D4  067A               	decf	_rtc+3,f,c
  4840                           
  4841                           ;tela_RELOGIO.h: 52: }
  4842                           ;tela_RELOGIO.h: 53: break;
  4843  0022D6  D04F               	goto	l721
  4844  0022D8  FFFF               	dw	65535	; assembler added errata NOP
  4845                           
  4846                           ;tela_RELOGIO.h: 55: blink(line2, 15, 16);
  4847  0022DA  0E84               	movlw	low _line2
  4848  0022DC  0100               	movlb	0	; () banked
  4849  0022DE  6F80               	movwf	blink@line& (0+255),b
  4850  0022E0  0E01               	movlw	high _line2
  4851  0022E2  6F81               	movwf	(blink@line+1)& (0+255),b
  4852  0022E4  0E0F               	movlw	15
  4853  0022E6  6F82               	movwf	blink@start& (0+255),b
  4854  0022E8  0E10               	movlw	16
  4855  0022EA  6F83               	movwf	blink@end& (0+255),b
  4856  0022EC  EC3F  F038         	call	_blink	;wreg free
  4857                           
  4858                           ;tela_RELOGIO.h: 56: if (btPress(3)) {
  4859  0022F0  0E03               	movlw	3
  4860  0022F2  ECE4  F03B         	call	_btPress
  4861  0022F6  0900               	iorlw	0
  4862  0022F8  A4D8               	btfss	status,2,c
  4863                           
  4864                           ;tela_RELOGIO.h: 57: rtc.min++;
  4865  0022FA  2A79               	incf	_rtc+2,f,c
  4866                           
  4867                           ;tela_RELOGIO.h: 58: }
  4868                           ;tela_RELOGIO.h: 59: if (btPress(2)) {
  4869  0022FC  0E02               	movlw	2
  4870  0022FE  ECE4  F03B         	call	_btPress
  4871  002302  0900               	iorlw	0
  4872  002304  B4D8               	btfsc	status,2,c
  4873  002306  D037               	goto	l721
  4874                           
  4875                           ;tela_RELOGIO.h: 60: rtc.min--;
  4876  002308  0679               	decf	_rtc+2,f,c
  4877                           
  4878                           ;tela_RELOGIO.h: 61: }
  4879                           ;tela_RELOGIO.h: 62: break;
  4880  00230A  D035               	goto	l721
  4881  00230C  FFFF               	dw	65535	; assembler added errata NOP
  4882                           
  4883                           ;tela_RELOGIO.h: 64: blink(line2, 18, 19);
  4884  00230E  0E84               	movlw	low _line2
  4885  002310  0100               	movlb	0	; () banked
  4886  002312  6F80               	movwf	blink@line& (0+255),b
  4887  002314  0E01               	movlw	high _line2
  4888  002316  6F81               	movwf	(blink@line+1)& (0+255),b
  4889  002318  0E12               	movlw	18
  4890  00231A  6F82               	movwf	blink@start& (0+255),b
  4891  00231C  0E13               	movlw	19
  4892  00231E  6F83               	movwf	blink@end& (0+255),b
  4893  002320  EC3F  F038         	call	_blink	;wreg free
  4894                           
  4895                           ;tela_RELOGIO.h: 65: if (btPress(3)) {
  4896  002324  0E03               	movlw	3
  4897  002326  ECE4  F03B         	call	_btPress
  4898  00232A  0900               	iorlw	0
  4899  00232C  A4D8               	btfss	status,2,c
  4900                           
  4901                           ;tela_RELOGIO.h: 66: rtc.sec++;
  4902  00232E  2A78               	incf	_rtc+1,f,c
  4903                           
  4904                           ;tela_RELOGIO.h: 67: }
  4905                           ;tela_RELOGIO.h: 68: if (btPress(2)) {
  4906  002330  0E02               	movlw	2
  4907  002332  ECE4  F03B         	call	_btPress
  4908  002336  0900               	iorlw	0
  4909  002338  B4D8               	btfsc	status,2,c
  4910  00233A  D01D               	goto	l721
  4911                           
  4912                           ;tela_RELOGIO.h: 69: rtc.sec--;
  4913  00233C  0678               	decf	_rtc+1,f,c
  4914                           
  4915                           ;tela_RELOGIO.h: 70: }
  4916                           ;tela_RELOGIO.h: 71: break;
  4917  00233E  D01B               	goto	l721
  4918  002340  FFFF               	dw	65535	; assembler added errata NOP
  4919  002342  0E01               	movlw	1
  4920  002344  0100               	movlb	0	; () banked
  4921  002346  6FE0               	movwf	_option_posi& (0+255),b
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;tela_RELOGIO.h: 74: }
  4925                           
  4926                           ;tela_RELOGIO.h: 73: break;
  4927  002348  D016               	goto	l721
  4928  00234A                     l717:
  4929  00234A  FFFF               	dw	65535	; assembler added errata NOP
  4930                           
  4931                           ; BSR set to: 0
  4932  00234C  0100               	movlb	0	; () banked
  4933  00234E  51E0               	movf	_option_posi& (0+255),w,b
  4934                           
  4935                           ; Switch size 1, requested type "space"
  4936                           ; Number of cases is 6, Range of values is 1 to 6
  4937                           ; switch strategies available:
  4938                           ; Name         Instructions Cycles
  4939                           ; simple_byte           19    10 (average)
  4940                           ;	Chosen strategy is simple_byte
  4941  002350  0A01               	xorlw	1	; case 1
  4942  002352  B4D8               	btfsc	status,2,c
  4943  002354  D759               	goto	l718
  4944  002356  0A03               	xorlw	3	; case 2
  4945  002358  B4D8               	btfsc	status,2,c
  4946  00235A  D770               	goto	l722
  4947  00235C  0A01               	xorlw	1	; case 3
  4948  00235E  B4D8               	btfsc	status,2,c
  4949  002360  D787               	goto	l725
  4950  002362  0A07               	xorlw	7	; case 4
  4951  002364  B4D8               	btfsc	status,2,c
  4952  002366  D79E               	goto	l728
  4953  002368  0A01               	xorlw	1	; case 5
  4954  00236A  B4D8               	btfsc	status,2,c
  4955  00236C  D7B5               	goto	l731
  4956  00236E  0A03               	xorlw	3	; case 6
  4957  002370  B4D8               	btfsc	status,2,c
  4958  002372  D7CC               	goto	l734
  4959  002374  D7E5               	goto	l737
  4960  002376                     l721:
  4961  002376  FFFF               	dw	65535	; assembler added errata NOP
  4962                           
  4963                           ;tela_RELOGIO.h: 75: validaRTC();
  4964                           
  4965                           ; BSR set to: 0
  4966  002378  EC66  F039         	call	_validaRTC	;wreg free
  4967                           
  4968                           ;tela_RELOGIO.h: 77: if (btPress(4)) {
  4969  00237C  0E04               	movlw	4
  4970  00237E  ECE4  F03B         	call	_btPress
  4971  002382  0900               	iorlw	0
  4972  002384  B4D8               	btfsc	status,2,c
  4973  002386  D003               	goto	l738
  4974                           
  4975                           ;tela_RELOGIO.h: 78: option_posi++;
  4976  002388  0100               	movlb	0	; () banked
  4977  00238A  2BE0               	incf	_option_posi& (0+255),f,b
  4978                           
  4979                           ;tela_RELOGIO.h: 79: } else if (btPress(1)) {
  4980  00238C  D012               	goto	l740
  4981  00238E                     l738:
  4982  00238E  FFFF               	dw	65535	; assembler added errata NOP
  4983                           
  4984                           ; BSR set to: 0
  4985  002390  0E01               	movlw	1
  4986  002392  ECE4  F03B         	call	_btPress
  4987  002396  0900               	iorlw	0
  4988  002398  B4D8               	btfsc	status,2,c
  4989  00239A  D00B               	goto	l740
  4990                           
  4991                           ;tela_RELOGIO.h: 80: option_posi = 0;
  4992  00239C  0E00               	movlw	0
  4993  00239E  0100               	movlb	0	; () banked
  4994  0023A0  6FE0               	movwf	_option_posi& (0+255),b
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;tela_RELOGIO.h: 81: setDS1307TimeDate(&rtc);
  4998  0023A2  0E77               	movlw	low _rtc
  4999  0023A4  6F8C               	movwf	setDS1307TimeDate@ptrToUserVal& (0+255),b
  5000  0023A6  0E00               	movlw	high _rtc
  5001  0023A8  6F8D               	movwf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  5002  0023AA  EC07  F01A         	call	_setDS1307TimeDate	;wreg free
  5003                           
  5004                           ;tela_RELOGIO.h: 82: menu_posi = _menu_posi;
  5005  0023AE  C0DE  F0DF         	movff	__menu_posi,_menu_posi
  5006  0023B2                     l740:
  5007  0023B2  FFFF               	dw	65535	; assembler added errata NOP
  5008  0023B4  0012               	return		;funcret
  5009  0023B6  FFFF               	dw	65535	; errata NOP
  5010  0023B8                     __end_of_tela_ajusteRTC:
  5011                           	opt stack 0
  5012                           tblptru	equ	0xFF8
  5013                           tblptrh	equ	0xFF7
  5014                           tblptrl	equ	0xFF6
  5015                           tablat	equ	0xFF5
  5016                           postinc0	equ	0xFEE
  5017                           wreg	equ	0xFE8
  5018                           postdec1	equ	0xFE5
  5019                           fsr1l	equ	0xFE1
  5020                           status	equ	0xFD8
  5021                           
  5022 ;; *************** function _validaRTC *****************
  5023 ;; Defined at:
  5024 ;;		line 107 in file "ds1307.h"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;		None
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;		None
  5029 ;; Return value:  Size  Location     Type
  5030 ;;                  2  304[None  ] int 
  5031 ;; Registers used:
  5032 ;;		wreg, status,2, status,0
  5033 ;; Tracked objects:
  5034 ;;		On entry : 0/0
  5035 ;;		On exit  : 0/0
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5038 ;;      Params:         0       0       0       0       0       0       0
  5039 ;;      Locals:         0       0       0       0       0       0       0
  5040 ;;      Temps:          0       0       0       0       0       0       0
  5041 ;;      Totals:         0       0       0       0       0       0       0
  5042 ;;Total ram usage:        0 bytes
  5043 ;; Hardware stack levels used:    1
  5044 ;; Hardware stack levels required when called:    6
  5045 ;; This function calls:
  5046 ;;		Nothing
  5047 ;; This function is called by:
  5048 ;;		_tela_ajusteRTC
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           	psect	text4
  5053  0072CC                     __ptext4:
  5054                           	opt stack 0
  5055  0072CC                     _validaRTC:
  5056                           	opt stack 0
  5057  0072CC  FFFF               	dw	65535	; assembler added errata NOP
  5058                           
  5059                           ;ds1307.h: 108: if (rtc.date > 31) rtc.date = 0;
  5060                           
  5061                           ;incstack = 0
  5062  0072CE  0E1F               	movlw	31
  5063  0072D0  647B               	cpfsgt	_rtc+4,c
  5064  0072D2  D002               	goto	l305
  5065  0072D4  0E00               	movlw	0
  5066  0072D6  6E7B               	movwf	_rtc+4,c
  5067  0072D8                     l305:
  5068  0072D8  FFFF               	dw	65535	; assembler added errata NOP
  5069                           
  5070                           ;ds1307.h: 109: if (rtc.hour > 23) rtc.hour = 0;
  5071  0072DA  0E17               	movlw	23
  5072  0072DC  647A               	cpfsgt	_rtc+3,c
  5073  0072DE  D002               	goto	l306
  5074  0072E0  0E00               	movlw	0
  5075  0072E2  6E7A               	movwf	_rtc+3,c
  5076  0072E4                     l306:
  5077  0072E4  FFFF               	dw	65535	; assembler added errata NOP
  5078                           
  5079                           ;ds1307.h: 110: if (rtc.min > 59) rtc.min = 0;
  5080  0072E6  0E3B               	movlw	59
  5081  0072E8  6479               	cpfsgt	_rtc+2,c
  5082  0072EA  D002               	goto	l307
  5083  0072EC  0E00               	movlw	0
  5084  0072EE  6E79               	movwf	_rtc+2,c
  5085  0072F0                     l307:
  5086  0072F0  FFFF               	dw	65535	; assembler added errata NOP
  5087                           
  5088                           ;ds1307.h: 111: if (rtc.month > 12) rtc.month = 0;
  5089  0072F2  0E0C               	movlw	12
  5090  0072F4  647C               	cpfsgt	_rtc+5,c
  5091  0072F6  D002               	goto	l308
  5092  0072F8  0E00               	movlw	0
  5093  0072FA  6E7C               	movwf	_rtc+5,c
  5094  0072FC                     l308:
  5095  0072FC  FFFF               	dw	65535	; assembler added errata NOP
  5096                           
  5097                           ;ds1307.h: 112: if (rtc.sec > 59) rtc.sec = 0;
  5098  0072FE  0E3B               	movlw	59
  5099  007300  6478               	cpfsgt	_rtc+1,c
  5100  007302  D002               	goto	l309
  5101  007304  0E00               	movlw	0
  5102  007306  6E78               	movwf	_rtc+1,c
  5103  007308                     l309:
  5104  007308  FFFF               	dw	65535	; assembler added errata NOP
  5105                           
  5106                           ;ds1307.h: 113: if (rtc.year > 99) rtc.year = 0;
  5107  00730A  0E63               	movlw	99
  5108  00730C  647D               	cpfsgt	_rtc+6,c
  5109  00730E  D002               	goto	l310
  5110  007310  0E00               	movlw	0
  5111  007312  6E7D               	movwf	_rtc+6,c
  5112  007314                     l310:
  5113  007314  FFFF               	dw	65535	; assembler added errata NOP
  5114  007316  0012               	return		;funcret
  5115  007318  FFFF               	dw	65535	; errata NOP
  5116  00731A                     __end_of_validaRTC:
  5117                           	opt stack 0
  5118                           tblptru	equ	0xFF8
  5119                           tblptrh	equ	0xFF7
  5120                           tblptrl	equ	0xFF6
  5121                           tablat	equ	0xFF5
  5122                           postinc0	equ	0xFEE
  5123                           wreg	equ	0xFE8
  5124                           postdec1	equ	0xFE5
  5125                           fsr1l	equ	0xFE1
  5126                           status	equ	0xFD8
  5127                           
  5128 ;; *************** function _setDS1307TimeDate *****************
  5129 ;; Defined at:
  5130 ;;		line 36 in file "ds1307.h"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  5133 ;;		 -> rtc(7), 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;		None
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  1    wreg      void 
  5138 ;; Registers used:
  5139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5140 ;; Tracked objects:
  5141 ;;		On entry : 0/0
  5142 ;;		On exit  : 0/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5145 ;;      Params:         0       2       0       0       0       0       0
  5146 ;;      Locals:         0       0       0       0       0       0       0
  5147 ;;      Temps:          0       1       0       0       0       0       0
  5148 ;;      Totals:         0       3       0       0       0       0       0
  5149 ;;Total ram usage:        3 bytes
  5150 ;; Hardware stack levels used:    1
  5151 ;; Hardware stack levels required when called:    8
  5152 ;; This function calls:
  5153 ;;		_DECtoBCD
  5154 ;;		_I2C_Start
  5155 ;;		_I2C_Stop
  5156 ;;		_I2C_Write
  5157 ;; This function is called by:
  5158 ;;		_tela_ajusteRTC
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           	psect	text5
  5163  00340E                     __ptext5:
  5164                           	opt stack 0
  5165  00340E                     _setDS1307TimeDate:
  5166                           	opt stack 0
  5167  00340E  FFFF               	dw	65535	; assembler added errata NOP
  5168                           
  5169                           ;ds1307.h: 38: I2C_Start();
  5170                           
  5171                           ;incstack = 0
  5172  003410  ECC8  F035         	call	_I2C_Start	;wreg free
  5173                           
  5174                           ;ds1307.h: 39: I2C_Write(0xD0);
  5175  003414  0E00               	movlw	0
  5176  003416  0100               	movlb	0	; () banked
  5177  003418  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  5178  00341A  0ED0               	movlw	208
  5179  00341C  6F8A               	movwf	I2C_Write@d& (0+255),b
  5180  00341E  ECE1  F035         	call	_I2C_Write	;wreg free
  5181                           
  5182                           ;ds1307.h: 40: I2C_Write(0x00);
  5183  003422  0E00               	movlw	0
  5184  003424  0100               	movlb	0	; () banked
  5185  003426  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  5186  003428  0E00               	movlw	0
  5187  00342A  6F8A               	movwf	I2C_Write@d& (0+255),b
  5188  00342C  ECE1  F035         	call	_I2C_Write	;wreg free
  5189                           
  5190                           ;ds1307.h: 41: I2C_Write(DECtoBCD(ptrToUserVal-> sec));
  5191  003430  0100               	movlb	0	; () banked
  5192  003432  EE20 F001          	lfsr	2,1
  5193  003436  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5194  003438  26D9               	addwf	fsr2l,f,c
  5195  00343A  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5196  00343C  22DA               	addwfc	fsr2h,f,c
  5197  00343E  50DF               	movf	indf2,w,c
  5198  003440  ECDC  F038         	call	_DECtoBCD
  5199  003444  0100               	movlb	0	; () banked
  5200  003446  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5201  003448  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5202  00344A  6F8A               	movwf	I2C_Write@d& (0+255),b
  5203  00344C  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5204  00344E  ECE1  F035         	call	_I2C_Write	;wreg free
  5205                           
  5206                           ;ds1307.h: 42: I2C_Write(DECtoBCD(ptrToUserVal-> min));
  5207  003452  0100               	movlb	0	; () banked
  5208  003454  EE20 F002          	lfsr	2,2
  5209  003458  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5210  00345A  26D9               	addwf	fsr2l,f,c
  5211  00345C  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5212  00345E  22DA               	addwfc	fsr2h,f,c
  5213  003460  50DF               	movf	indf2,w,c
  5214  003462  ECDC  F038         	call	_DECtoBCD
  5215  003466  0100               	movlb	0	; () banked
  5216  003468  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5217  00346A  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5218  00346C  6F8A               	movwf	I2C_Write@d& (0+255),b
  5219  00346E  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5220  003470  ECE1  F035         	call	_I2C_Write	;wreg free
  5221                           
  5222                           ;ds1307.h: 43: I2C_Write(DECtoBCD(ptrToUserVal-> hour));
  5223  003474  0100               	movlb	0	; () banked
  5224  003476  EE20 F003          	lfsr	2,3
  5225  00347A  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5226  00347C  26D9               	addwf	fsr2l,f,c
  5227  00347E  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5228  003480  22DA               	addwfc	fsr2h,f,c
  5229  003482  50DF               	movf	indf2,w,c
  5230  003484  ECDC  F038         	call	_DECtoBCD
  5231  003488  0100               	movlb	0	; () banked
  5232  00348A  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5233  00348C  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5234  00348E  6F8A               	movwf	I2C_Write@d& (0+255),b
  5235  003490  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5236  003492  ECE1  F035         	call	_I2C_Write	;wreg free
  5237                           
  5238                           ;ds1307.h: 44: I2C_Write(DECtoBCD(ptrToUserVal-> day));
  5239  003496  C08C  FFD9         	movff	setDS1307TimeDate@ptrToUserVal,fsr2l
  5240  00349A  C08D  FFDA         	movff	setDS1307TimeDate@ptrToUserVal+1,fsr2h
  5241  00349E  50DF               	movf	indf2,w,c
  5242  0034A0  ECDC  F038         	call	_DECtoBCD
  5243  0034A4  0100               	movlb	0	; () banked
  5244  0034A6  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5245  0034A8  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5246  0034AA  6F8A               	movwf	I2C_Write@d& (0+255),b
  5247  0034AC  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5248  0034AE  ECE1  F035         	call	_I2C_Write	;wreg free
  5249                           
  5250                           ;ds1307.h: 45: I2C_Write(DECtoBCD(ptrToUserVal-> date));
  5251  0034B2  0100               	movlb	0	; () banked
  5252  0034B4  EE20 F004          	lfsr	2,4
  5253  0034B8  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5254  0034BA  26D9               	addwf	fsr2l,f,c
  5255  0034BC  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5256  0034BE  22DA               	addwfc	fsr2h,f,c
  5257  0034C0  50DF               	movf	indf2,w,c
  5258  0034C2  ECDC  F038         	call	_DECtoBCD
  5259  0034C6  0100               	movlb	0	; () banked
  5260  0034C8  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5261  0034CA  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5262  0034CC  6F8A               	movwf	I2C_Write@d& (0+255),b
  5263  0034CE  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5264  0034D0  ECE1  F035         	call	_I2C_Write	;wreg free
  5265                           
  5266                           ;ds1307.h: 46: I2C_Write(DECtoBCD(ptrToUserVal-> month));
  5267  0034D4  0100               	movlb	0	; () banked
  5268  0034D6  EE20 F005          	lfsr	2,5
  5269  0034DA  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5270  0034DC  26D9               	addwf	fsr2l,f,c
  5271  0034DE  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5272  0034E0  22DA               	addwfc	fsr2h,f,c
  5273  0034E2  50DF               	movf	indf2,w,c
  5274  0034E4  ECDC  F038         	call	_DECtoBCD
  5275  0034E8  0100               	movlb	0	; () banked
  5276  0034EA  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5277  0034EC  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5278  0034EE  6F8A               	movwf	I2C_Write@d& (0+255),b
  5279  0034F0  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5280  0034F2  ECE1  F035         	call	_I2C_Write	;wreg free
  5281                           
  5282                           ;ds1307.h: 47: I2C_Write(DECtoBCD(ptrToUserVal-> year));
  5283  0034F6  0100               	movlb	0	; () banked
  5284  0034F8  EE20 F006          	lfsr	2,6
  5285  0034FC  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5286  0034FE  26D9               	addwf	fsr2l,f,c
  5287  003500  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5288  003502  22DA               	addwfc	fsr2h,f,c
  5289  003504  50DF               	movf	indf2,w,c
  5290  003506  ECDC  F038         	call	_DECtoBCD
  5291  00350A  0100               	movlb	0	; () banked
  5292  00350C  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5293  00350E  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5294  003510  6F8A               	movwf	I2C_Write@d& (0+255),b
  5295  003512  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5296  003514  ECE1  F035         	call	_I2C_Write	;wreg free
  5297                           
  5298                           ;ds1307.h: 48: I2C_Stop();
  5299  003518  ECCE  F035         	call	_I2C_Stop	;wreg free
  5300  00351C  0012               	return		;funcret
  5301  00351E  FFFF               	dw	65535	; errata NOP
  5302  003520                     __end_of_setDS1307TimeDate:
  5303                           	opt stack 0
  5304                           tblptru	equ	0xFF8
  5305                           tblptrh	equ	0xFF7
  5306                           tblptrl	equ	0xFF6
  5307                           tablat	equ	0xFF5
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           postdec1	equ	0xFE5
  5311                           fsr1l	equ	0xFE1
  5312                           indf2	equ	0xFDF
  5313                           fsr2h	equ	0xFDA
  5314                           fsr2l	equ	0xFD9
  5315                           status	equ	0xFD8
  5316                           
  5317 ;; *************** function _DECtoBCD *****************
  5318 ;; Defined at:
  5319 ;;		line 24 in file "function.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  val             1    wreg     unsigned char 
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;  val             1    8[BANK0 ] unsigned char 
  5324 ;;  res             1    9[BANK0 ] unsigned char 
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      unsigned char 
  5327 ;; Registers used:
  5328 ;;		wreg, status,2, status,0, cstack
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5334 ;;      Params:         0       0       0       0       0       0       0
  5335 ;;      Locals:         0       2       0       0       0       0       0
  5336 ;;      Temps:          0       0       0       0       0       0       0
  5337 ;;      Totals:         0       2       0       0       0       0       0
  5338 ;;Total ram usage:        2 bytes
  5339 ;; Hardware stack levels used:    1
  5340 ;; Hardware stack levels required when called:    7
  5341 ;; This function calls:
  5342 ;;		___awdiv
  5343 ;;		___awmod
  5344 ;; This function is called by:
  5345 ;;		_setDS1307TimeDate
  5346 ;;		_setDS1307Time
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text6
  5351  0071B8                     __ptext6:
  5352                           	opt stack 0
  5353  0071B8                     _DECtoBCD:
  5354                           	opt stack 0
  5355  0071B8  FFFF               	dw	65535	; assembler added errata NOP
  5356                           
  5357                           ;incstack = 0
  5358                           ;DECtoBCD@val stored from wreg
  5359  0071BA  0100               	movlb	0	; () banked
  5360  0071BC  6F88               	movwf	DECtoBCD@val& (0+255),b
  5361                           
  5362                           ;function.c: 25: char res;
  5363                           ;function.c: 26: res = (val / 10) << 4;
  5364  0071BE  C088  F080         	movff	DECtoBCD@val,___awdiv@dividend
  5365  0071C2  0100               	movlb	0	; () banked
  5366  0071C4  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5367  0071C6  0E00               	movlw	0
  5368  0071C8  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5369  0071CA  0E0A               	movlw	10
  5370  0071CC  6F82               	movwf	___awdiv@divisor& (0+255),b
  5371  0071CE  ECD0  F01E         	call	___awdiv	;wreg free
  5372  0071D2  0100               	movlb	0	; () banked
  5373  0071D4  3980               	swapf	?___awdiv& (0+255),w,b
  5374  0071D6  0BF0               	andlw	240
  5375  0071D8  6F89               	movwf	DECtoBCD@res& (0+255),b
  5376                           
  5377                           ;function.c: 27: res = res | (val % 10);
  5378  0071DA  C088  F080         	movff	DECtoBCD@val,___awmod@dividend
  5379  0071DE  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5380  0071E0  0E00               	movlw	0
  5381  0071E2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5382  0071E4  0E0A               	movlw	10
  5383  0071E6  6F82               	movwf	___awmod@divisor& (0+255),b
  5384  0071E8  EC68  F03C         	call	___awmod	;wreg free
  5385  0071EC  0100               	movlb	0	; () banked
  5386  0071EE  5180               	movf	?___awmod& (0+255),w,b
  5387  0071F0  1189               	iorwf	DECtoBCD@res& (0+255),w,b
  5388  0071F2  6F89               	movwf	DECtoBCD@res& (0+255),b
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;function.c: 28: return res;
  5392  0071F4  5189               	movf	DECtoBCD@res& (0+255),w,b
  5393                           
  5394                           ; BSR set to: 0
  5395                           
  5396                           ; BSR set to: 0
  5397  0071F6  0012               	return		;funcret
  5398  0071F8  FFFF               	dw	65535	; errata NOP
  5399  0071FA                     __end_of_DECtoBCD:
  5400                           	opt stack 0
  5401                           tblptru	equ	0xFF8
  5402                           tblptrh	equ	0xFF7
  5403                           tblptrl	equ	0xFF6
  5404                           tablat	equ	0xFF5
  5405                           postinc0	equ	0xFEE
  5406                           wreg	equ	0xFE8
  5407                           postdec1	equ	0xFE5
  5408                           fsr1l	equ	0xFE1
  5409                           indf2	equ	0xFDF
  5410                           fsr2h	equ	0xFDA
  5411                           fsr2l	equ	0xFD9
  5412                           status	equ	0xFD8
  5413                           
  5414 ;; *************** function _telaPrincipal *****************
  5415 ;; Defined at:
  5416 ;;		line 30 in file "tela_PRINCIPAL.h"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;		None
  5419 ;; Auto vars:     Size  Location     Type
  5420 ;;		None
  5421 ;; Return value:  Size  Location     Type
  5422 ;;                  1    wreg      void 
  5423 ;; Registers used:
  5424 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5430 ;;      Params:         0       0       0       0       0       0       0
  5431 ;;      Locals:         0       2       0       0       0       0       0
  5432 ;;      Temps:          0       0       0       0       0       0       0
  5433 ;;      Totals:         0       2       0       0       0       0       0
  5434 ;;Total ram usage:        2 bytes
  5435 ;; Hardware stack levels used:    1
  5436 ;; Hardware stack levels required when called:   11
  5437 ;; This function calls:
  5438 ;;		_blink
  5439 ;;		_btPress
  5440 ;;		_intToFloatStr
  5441 ;;		_resetParametros
  5442 ;;		_sprintf
  5443 ;; This function is called by:
  5444 ;;		_main
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           	psect	text7
  5449  001F54                     __ptext7:
  5450                           	opt stack 0
  5451  001F54                     _telaPrincipal:
  5452                           	opt stack 0
  5453  001F54  FFFF               	dw	65535	; assembler added errata NOP
  5454                           
  5455                           ;tela_PRINCIPAL.h: 32: sprintf(&line1[4], " %02d:%02d %02d/%02d", _hor, _min, _dia, _mes
      +                          );
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;incstack = 0
  5459  001F56  0E9D               	movlw	low (_line1+4)
  5460  001F58  0100               	movlb	0	; () banked
  5461  001F5A  6FA1               	movwf	sprintf@wh& (0+255),b
  5462  001F5C  0E01               	movlw	high (_line1+4)
  5463  001F5E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5464  001F60  0E09               	movlw	low STR_58
  5465  001F62  6FA3               	movwf	sprintf@f& (0+255),b
  5466  001F64  0E7C               	movlw	high STR_58
  5467  001F66  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5468  001F68  C0EC  F0A5         	movff	__hor,?_sprintf+4
  5469  001F6C  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  5470  001F6E  C0ED  F0A7         	movff	__min,?_sprintf+6
  5471  001F72  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  5472  001F74  C0EB  F0A9         	movff	__dia,?_sprintf+8
  5473  001F78  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  5474  001F7A  C0EA  F0AB         	movff	__mes,?_sprintf+10
  5475  001F7E  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  5476  001F80  EC42  F039         	call	_sprintf	;wreg free
  5477                           
  5478                           ;tela_PRINCIPAL.h: 34: line1[0] = 0x01;
  5479  001F84  0E01               	movlw	1
  5480  001F86  0101               	movlb	1	; () banked
  5481  001F88  6F99               	movwf	_line1& (0+255),b
  5482                           
  5483                           ; BSR set to: 1
  5484                           ;tela_PRINCIPAL.h: 35: line1[1] = intensidadeSinal;
  5485  001F8A  C0FF  F19A         	movff	_intensidadeSinal,_line1+1
  5486                           
  5487                           ; BSR set to: 1
  5488                           ;tela_PRINCIPAL.h: 36: line1[19] = 0x05;
  5489  001F8E  0E05               	movlw	5
  5490  001F90  6FAC               	movwf	(_line1+19)& (0+255),b
  5491                           
  5492                           ;tela_PRINCIPAL.h: 38: switch (codigoErro) {
  5493  001F92  D050               	goto	l689
  5494  001F94  FFFF               	dw	65535	; assembler added errata NOP
  5495                           
  5496                           ;tela_PRINCIPAL.h: 40: sprintf(line4, " *falha eletrica");
  5497                           
  5498                           ; BSR set to: 1
  5499  001F96  0E5A               	movlw	low _line4
  5500  001F98  0100               	movlb	0	; () banked
  5501  001F9A  6FA1               	movwf	sprintf@wh& (0+255),b
  5502  001F9C  0E01               	movlw	high _line4
  5503  001F9E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5504  001FA0  0EA0               	movlw	low STR_59
  5505  001FA2  6FA3               	movwf	sprintf@f& (0+255),b
  5506  001FA4  0E7D               	movlw	high STR_59
  5507  001FA6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5508  001FA8  EC42  F039         	call	_sprintf	;wreg free
  5509                           
  5510                           ;tela_PRINCIPAL.h: 41: break;
  5511  001FAC  D058               	goto	l691
  5512  001FAE  FFFF               	dw	65535	; assembler added errata NOP
  5513                           
  5514                           ;tela_PRINCIPAL.h: 43: sprintf(line4, " *falha GSM");
  5515  001FB0  0E5A               	movlw	low _line4
  5516  001FB2  0100               	movlb	0	; () banked
  5517  001FB4  6FA1               	movwf	sprintf@wh& (0+255),b
  5518  001FB6  0E01               	movlw	high _line4
  5519  001FB8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5520  001FBA  0EDD               	movlw	low STR_60
  5521  001FBC  6FA3               	movwf	sprintf@f& (0+255),b
  5522  001FBE  0E7E               	movlw	high STR_60
  5523  001FC0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5524  001FC2  EC42  F039         	call	_sprintf	;wreg free
  5525                           
  5526                           ;tela_PRINCIPAL.h: 44: break;
  5527  001FC6  D04B               	goto	l691
  5528  001FC8  FFFF               	dw	65535	; assembler added errata NOP
  5529                           
  5530                           ;tela_PRINCIPAL.h: 46: sprintf(line4, " *falha val. ladrao");
  5531  001FCA  0E5A               	movlw	low _line4
  5532  001FCC  0100               	movlb	0	; () banked
  5533  001FCE  6FA1               	movwf	sprintf@wh& (0+255),b
  5534  001FD0  0E01               	movlw	high _line4
  5535  001FD2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5536  001FD4  0E85               	movlw	low STR_61
  5537  001FD6  6FA3               	movwf	sprintf@f& (0+255),b
  5538  001FD8  0E7C               	movlw	high STR_61
  5539  001FDA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5540  001FDC  EC42  F039         	call	_sprintf	;wreg free
  5541  001FE0  D026               	goto	l7157
  5542  001FE2  FFFF               	dw	65535	; assembler added errata NOP
  5543                           
  5544                           ;tela_PRINCIPAL.h: 50: sprintf(line4, " *falha B. jockey");
  5545  001FE4  0E5A               	movlw	low _line4
  5546  001FE6  0100               	movlb	0	; () banked
  5547  001FE8  6FA1               	movwf	sprintf@wh& (0+255),b
  5548  001FEA  0E01               	movlw	high _line4
  5549  001FEC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5550  001FEE  0E7D               	movlw	low STR_62
  5551  001FF0  6FA3               	movwf	sprintf@f& (0+255),b
  5552  001FF2  0E7D               	movlw	high STR_62
  5553  001FF4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5554  001FF6  EC42  F039         	call	_sprintf	;wreg free
  5555  001FFA  D019               	goto	l7157
  5556  001FFC  FFFF               	dw	65535	; assembler added errata NOP
  5557                           
  5558                           ;tela_PRINCIPAL.h: 54: sprintf(line4, " *falha B. principal");
  5559  001FFE  0E5A               	movlw	low _line4
  5560  002000  0100               	movlb	0	; () banked
  5561  002002  6FA1               	movwf	sprintf@wh& (0+255),b
  5562  002004  0E01               	movlw	high _line4
  5563  002006  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5564  002008  0E1E               	movlw	low STR_63
  5565  00200A  6FA3               	movwf	sprintf@f& (0+255),b
  5566  00200C  0E7C               	movlw	high STR_63
  5567  00200E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5568  002010  EC42  F039         	call	_sprintf	;wreg free
  5569  002014  D00C               	goto	l7157
  5570  002016  FFFF               	dw	65535	; assembler added errata NOP
  5571                           
  5572                           ;tela_PRINCIPAL.h: 58: sprintf(line4, " *falha B. combustao");
  5573  002018  0E5A               	movlw	low _line4
  5574  00201A  0100               	movlb	0	; () banked
  5575  00201C  6FA1               	movwf	sprintf@wh& (0+255),b
  5576  00201E  0E01               	movlw	high _line4
  5577  002020  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5578  002022  0E33               	movlw	low STR_64
  5579  002024  6FA3               	movwf	sprintf@f& (0+255),b
  5580  002026  0E7C               	movlw	high STR_64
  5581  002028  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5582  00202A  EC42  F039         	call	_sprintf	;wreg free
  5583  00202E                     l7157:
  5584  00202E  FFFF               	dw	65535	; assembler added errata NOP
  5585                           
  5586                           ;tela_PRINCIPAL.h: 59: LATCbits.LATC1 = 1;
  5587  002030  828B               	bsf	3979,1,c	;volatile
  5588                           
  5589                           ;tela_PRINCIPAL.h: 61: }
  5590                           
  5591                           ;tela_PRINCIPAL.h: 60: break;
  5592  002032  D015               	goto	l691
  5593  002034                     l689:
  5594  002034  FFFF               	dw	65535	; assembler added errata NOP
  5595  002036  0100               	movlb	0	; () banked
  5596  002038  51F2               	movf	_codigoErro& (0+255),w,b
  5597                           
  5598                           ; Switch size 1, requested type "space"
  5599                           ; Number of cases is 6, Range of values is 1 to 6
  5600                           ; switch strategies available:
  5601                           ; Name         Instructions Cycles
  5602                           ; simple_byte           19    10 (average)
  5603                           ;	Chosen strategy is simple_byte
  5604  00203A  0A01               	xorlw	1	; case 1
  5605  00203C  B4D8               	btfsc	status,2,c
  5606  00203E  D7AA               	goto	l690
  5607  002040  0A03               	xorlw	3	; case 2
  5608  002042  B4D8               	btfsc	status,2,c
  5609  002044  D7B4               	goto	l692
  5610  002046  0A01               	xorlw	1	; case 3
  5611  002048  B4D8               	btfsc	status,2,c
  5612  00204A  D7BE               	goto	l693
  5613  00204C  0A07               	xorlw	7	; case 4
  5614  00204E  B4D8               	btfsc	status,2,c
  5615  002050  D7C8               	goto	l694
  5616  002052  0A01               	xorlw	1	; case 5
  5617  002054  B4D8               	btfsc	status,2,c
  5618  002056  D7D2               	goto	l695
  5619  002058  0A03               	xorlw	3	; case 6
  5620  00205A  B4D8               	btfsc	status,2,c
  5621  00205C  D7DC               	goto	l696
  5622  00205E                     l691:
  5623  00205E  FFFF               	dw	65535	; assembler added errata NOP
  5624                           
  5625                           ;tela_PRINCIPAL.h: 63: if (ocorrendoIncendio == 1) {
  5626                           
  5627                           ; BSR set to: 0
  5628  002060  0100               	movlb	0	; () banked
  5629  002062  05F1               	decf	_ocorrendoIncendio& (0+255),w,b
  5630  002064  A4D8               	btfss	status,2,c
  5631  002066  D00A               	goto	l697
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;tela_PRINCIPAL.h: 64: sprintf(line2, " ALERTA DE INCENDIO");
  5635  002068  0E84               	movlw	low _line2
  5636  00206A  6FA1               	movwf	sprintf@wh& (0+255),b
  5637  00206C  0E01               	movlw	high _line2
  5638  00206E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5639  002070  0E71               	movlw	low STR_65
  5640  002072  6FA3               	movwf	sprintf@f& (0+255),b
  5641  002074  0E7C               	movlw	high STR_65
  5642  002076  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5643  002078  EC42  F039         	call	_sprintf	;wreg free
  5644  00207C                     l697:
  5645  00207C  FFFF               	dw	65535	; assembler added errata NOP
  5646                           
  5647                           ;tela_PRINCIPAL.h: 65: }
  5648                           ;tela_PRINCIPAL.h: 67: if (flagErroTransdutor) {
  5649  00207E  0100               	movlb	0	; () banked
  5650  002080  51F0               	movf	_flagErroTransdutor& (0+255),w,b
  5651  002082  B4D8               	btfsc	status,2,c
  5652  002084  D013               	goto	l698
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;tela_PRINCIPAL.h: 68: sprintf(&line3[1], "Erro no Transdutor");
  5656  002086  0E70               	movlw	low (_line3+1)
  5657  002088  6FA1               	movwf	sprintf@wh& (0+255),b
  5658  00208A  0E01               	movlw	high (_line3+1)
  5659  00208C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5660  00208E  0E22               	movlw	low STR_66
  5661  002090  6FA3               	movwf	sprintf@f& (0+255),b
  5662  002092  0E7D               	movlw	high STR_66
  5663  002094  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5664  002096  EC42  F039         	call	_sprintf	;wreg free
  5665                           
  5666                           ;tela_PRINCIPAL.h: 69: ocorrendoIncendio = 0;
  5667  00209A  0E00               	movlw	0
  5668  00209C  0100               	movlb	0	; () banked
  5669  00209E  6FF1               	movwf	_ocorrendoIncendio& (0+255),b
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;tela_PRINCIPAL.h: 70: LATCbits.LATC1 = 1;
  5673  0020A0  828B               	bsf	3979,1,c	;volatile
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;tela_PRINCIPAL.h: 71: LATDbits.LATD7 = 0;
  5677  0020A2  9E8C               	bcf	3980,7,c	;volatile
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;tela_PRINCIPAL.h: 72: LATAbits.LATA3 = 0;
  5681  0020A4  9689               	bcf	3977,3,c	;volatile
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;tela_PRINCIPAL.h: 73: out_BOMBA_ESTACIONARIA = 0;
  5685  0020A6  0E00               	movlw	0
  5686  0020A8  6FF8               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
  5687                           
  5688                           ;tela_PRINCIPAL.h: 75: } else {
  5689  0020AA  D017               	goto	l699
  5690  0020AC                     l698:
  5691  0020AC  FFFF               	dw	65535	; assembler added errata NOP
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;tela_PRINCIPAL.h: 76: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5695                           
  5696                           ; BSR set to: 0
  5697  0020AE  51D8               	movf	_pressao& (0+255),w,b
  5698  0020B0  ECB6  F01F         	call	_intToFloatStr
  5699  0020B4  C0BB  F0C8         	movff	?_intToFloatStr,_telaPrincipal$2566
  5700  0020B8  C0BC  F0C9         	movff	?_intToFloatStr+1,_telaPrincipal$2566+1
  5701                           
  5702                           ;tela_PRINCIPAL.h: 76: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5703  0020BC  0E71               	movlw	low (_line3+2)
  5704  0020BE  0100               	movlb	0	; () banked
  5705  0020C0  6FA1               	movwf	sprintf@wh& (0+255),b
  5706  0020C2  0E01               	movlw	high (_line3+2)
  5707  0020C4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5708  0020C6  0EF2               	movlw	low STR_40
  5709  0020C8  6FA3               	movwf	sprintf@f& (0+255),b
  5710  0020CA  0E7D               	movlw	high STR_40
  5711  0020CC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5712  0020CE  C0C8  F0A5         	movff	_telaPrincipal$2566,?_sprintf+4
  5713  0020D2  C0C9  F0A6         	movff	_telaPrincipal$2566+1,?_sprintf+5
  5714  0020D6  EC42  F039         	call	_sprintf	;wreg free
  5715  0020DA                     l699:
  5716  0020DA  FFFF               	dw	65535	; assembler added errata NOP
  5717                           
  5718                           ;tela_PRINCIPAL.h: 77: }
  5719                           ;tela_PRINCIPAL.h: 79: if (codigoErro > 1 || ocorrendoIncendio == 1) {
  5720  0020DC  0E02               	movlw	2
  5721  0020DE  0100               	movlb	0	; () banked
  5722  0020E0  61F2               	cpfslt	_codigoErro& (0+255),b
  5723  0020E2  D003               	goto	u7650
  5724                           
  5725                           ; BSR set to: 0
  5726  0020E4  05F1               	decf	_ocorrendoIncendio& (0+255),w,b
  5727  0020E6  A4D8               	btfss	status,2,c
  5728  0020E8  D00E               	goto	l703
  5729  0020EA                     u7650:
  5730  0020EA  FFFF               	dw	65535	; assembler added errata NOP
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;tela_PRINCIPAL.h: 80: if (textoAlternativo) {
  5734                           
  5735                           ; BSR set to: 0
  5736  0020EC  51F3               	movf	_textoAlternativo& (0+255),w,b
  5737  0020EE  B4D8               	btfsc	status,2,c
  5738  0020F0  D00A               	goto	l703
  5739                           
  5740                           ; BSR set to: 0
  5741                           ;tela_PRINCIPAL.h: 81: sprintf(line4, " Press ESC p/ Reset");
  5742  0020F2  0E5A               	movlw	low _line4
  5743  0020F4  6FA1               	movwf	sprintf@wh& (0+255),b
  5744  0020F6  0E01               	movlw	high _line4
  5745  0020F8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5746  0020FA  0ED5               	movlw	low STR_68
  5747  0020FC  6FA3               	movwf	sprintf@f& (0+255),b
  5748  0020FE  0E7C               	movlw	high STR_68
  5749  002100  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5750  002102  EC42  F039         	call	_sprintf	;wreg free
  5751  002106                     l703:
  5752  002106  FFFF               	dw	65535	; assembler added errata NOP
  5753                           
  5754                           ;tela_PRINCIPAL.h: 82: }
  5755                           ;tela_PRINCIPAL.h: 83: }
  5756                           ;tela_PRINCIPAL.h: 85: if (btPress(1)) {
  5757  002108  0E01               	movlw	1
  5758  00210A  ECE4  F03B         	call	_btPress
  5759  00210E  0900               	iorlw	0
  5760  002110  B4D8               	btfsc	status,2,c
  5761  002112  D003               	goto	l704
  5762                           
  5763                           ;tela_PRINCIPAL.h: 86: resetParametros();
  5764  002114  EC5E  F038         	call	_resetParametros	;wreg free
  5765                           
  5766                           ;tela_PRINCIPAL.h: 87: } else if (btPress(4)) {
  5767  002118  D00C               	goto	l706
  5768  00211A                     l704:
  5769  00211A  FFFF               	dw	65535	; assembler added errata NOP
  5770  00211C  0E04               	movlw	4
  5771  00211E  ECE4  F03B         	call	_btPress
  5772  002122  0900               	iorlw	0
  5773  002124  B4D8               	btfsc	status,2,c
  5774  002126  D005               	goto	l706
  5775                           
  5776                           ;tela_PRINCIPAL.h: 88: menu_posi = 1;
  5777  002128  0E01               	movlw	1
  5778  00212A  0100               	movlb	0	; () banked
  5779  00212C  6FDF               	movwf	_menu_posi& (0+255),b
  5780                           
  5781                           ;tela_PRINCIPAL.h: 89: sub_menu_posi = 1;
  5782  00212E  0E01               	movlw	1
  5783  002130  6E6B               	movwf	_sub_menu_posi,c
  5784  002132                     l706:
  5785  002132  FFFF               	dw	65535	; assembler added errata NOP
  5786                           
  5787                           ;tela_PRINCIPAL.h: 90: }
  5788                           ;tela_PRINCIPAL.h: 92: if (!PORTCbits.RC0) {
  5789                           
  5790                           ; BSR set to: 0
  5791                           
  5792                           ; BSR set to: 0
  5793  002134  B082               	btfsc	3970,0,c	;volatile
  5794  002136  D011               	goto	l708
  5795                           
  5796                           ;tela_PRINCIPAL.h: 93: blink(line1, 20, 20);
  5797  002138  0E99               	movlw	low _line1
  5798  00213A  0100               	movlb	0	; () banked
  5799  00213C  6F80               	movwf	blink@line& (0+255),b
  5800  00213E  0E01               	movlw	high _line1
  5801  002140  6F81               	movwf	(blink@line+1)& (0+255),b
  5802  002142  0E14               	movlw	20
  5803  002144  6F82               	movwf	blink@start& (0+255),b
  5804  002146  0E14               	movlw	20
  5805  002148  6F83               	movwf	blink@end& (0+255),b
  5806  00214A  EC3F  F038         	call	_blink	;wreg free
  5807                           
  5808                           ;tela_PRINCIPAL.h: 94: if (codigoErro == 0) {
  5809  00214E  0100               	movlb	0	; () banked
  5810  002150  51F2               	movf	_codigoErro& (0+255),w,b
  5811  002152  A4D8               	btfss	status,2,c
  5812  002154  D002               	goto	l708
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;tela_PRINCIPAL.h: 95: codigoErro = 1;
  5816  002156  0E01               	movlw	1
  5817  002158  6FF2               	movwf	_codigoErro& (0+255),b
  5818  00215A                     l708:
  5819  00215A  FFFF               	dw	65535	; assembler added errata NOP
  5820                           
  5821                           ;tela_PRINCIPAL.h: 96: }
  5822                           ;tela_PRINCIPAL.h: 97: }
  5823                           ;tela_PRINCIPAL.h: 99: if (status_jockey == 0) {
  5824                           
  5825                           ; BSR set to: 0
  5826  00215C  0100               	movlb	0	; () banked
  5827  00215E  51FC               	movf	_status_jockey& (0+255),w,b
  5828  002160  A4D8               	btfss	status,2,c
  5829  002162  D002               	goto	l709
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;tela_PRINCIPAL.h: 100: codigoErro = 4;
  5833  002164  0E04               	movlw	4
  5834  002166  D00B               	goto	L10
  5835  002168                     l709:
  5836  002168  FFFF               	dw	65535	; assembler added errata NOP
  5837                           
  5838                           ; BSR set to: 0
  5839                           
  5840                           ; BSR set to: 0
  5841  00216A  51FB               	movf	_status_principal& (0+255),w,b
  5842  00216C  A4D8               	btfss	status,2,c
  5843  00216E  D002               	goto	l711
  5844                           
  5845                           ; BSR set to: 0
  5846                           ;tela_PRINCIPAL.h: 102: codigoErro = 5;
  5847  002170  0E05               	movlw	5
  5848  002172  D005               	goto	L10
  5849  002174                     l711:
  5850  002174  FFFF               	dw	65535	; assembler added errata NOP
  5851                           
  5852                           ; BSR set to: 0
  5853                           
  5854                           ; BSR set to: 0
  5855  002176  51FA               	movf	_status_estacionaria& (0+255),w,b
  5856  002178  A4D8               	btfss	status,2,c
  5857  00217A  D003               	goto	l713
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;tela_PRINCIPAL.h: 104: codigoErro = 6;
  5861  00217C  0E06               	movlw	6
  5862  00217E                     L10:
  5863  00217E  FFFF               	dw	65535	; assembler added errata NOP
  5864  002180  6FF2               	movwf	_codigoErro& (0+255),b
  5865  002182                     l713:
  5866  002182  FFFF               	dw	65535	; assembler added errata NOP
  5867                           
  5868                           ; BSR set to: 0
  5869                           
  5870                           ; BSR set to: 0
  5871                           
  5872                           ; BSR set to: 0
  5873                           
  5874                           ; BSR set to: 0
  5875  002184  0012               	return		;funcret
  5876  002186  FFFF               	dw	65535	; errata NOP
  5877  002188                     __end_of_telaPrincipal:
  5878                           	opt stack 0
  5879                           tblptru	equ	0xFF8
  5880                           tblptrh	equ	0xFF7
  5881                           tblptrl	equ	0xFF6
  5882                           tablat	equ	0xFF5
  5883                           postinc0	equ	0xFEE
  5884                           wreg	equ	0xFE8
  5885                           postdec1	equ	0xFE5
  5886                           fsr1l	equ	0xFE1
  5887                           indf2	equ	0xFDF
  5888                           fsr2h	equ	0xFDA
  5889                           fsr2l	equ	0xFD9
  5890                           status	equ	0xFD8
  5891                           
  5892 ;; *************** function _resetParametros *****************
  5893 ;; Defined at:
  5894 ;;		line 12 in file "tela_PRINCIPAL.h"
  5895 ;; Parameters:    Size  Location     Type
  5896 ;;		None
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;		None
  5899 ;; Return value:  Size  Location     Type
  5900 ;;                  1    wreg      void 
  5901 ;; Registers used:
  5902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5908 ;;      Params:         0       0       0       0       0       0       0
  5909 ;;      Locals:         0       0       0       0       0       0       0
  5910 ;;      Temps:          0       0       0       0       0       0       0
  5911 ;;      Totals:         0       0       0       0       0       0       0
  5912 ;;Total ram usage:        0 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:   10
  5915 ;; This function calls:
  5916 ;;		_reiniciaLCD
  5917 ;; This function is called by:
  5918 ;;		_telaPrincipal
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           	psect	text8
  5923  0070BC                     __ptext8:
  5924                           	opt stack 0
  5925  0070BC                     _resetParametros:
  5926                           	opt stack 0
  5927  0070BC  FFFF               	dw	65535	; assembler added errata NOP
  5928                           
  5929                           ;tela_PRINCIPAL.h: 13: timerIntervaloEntreBombas = 3;
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;incstack = 0
  5933  0070BE  0E03               	movlw	3
  5934  0070C0  0100               	movlb	0	; () banked
  5935  0070C2  6FFE               	movwf	_timerIntervaloEntreBombas& (0+255),b
  5936                           
  5937                           ;tela_PRINCIPAL.h: 14: ocorrendoIncendio = 0;
  5938  0070C4  0E00               	movlw	0
  5939  0070C6  6FF1               	movwf	_ocorrendoIncendio& (0+255),b
  5940                           
  5941                           ;tela_PRINCIPAL.h: 15: codigoErro = 0;
  5942  0070C8  0E00               	movlw	0
  5943  0070CA  6FF2               	movwf	_codigoErro& (0+255),b
  5944                           
  5945                           ;tela_PRINCIPAL.h: 16: status_estacionaria = 1;
  5946  0070CC  0E01               	movlw	1
  5947  0070CE  6FFA               	movwf	_status_estacionaria& (0+255),b
  5948                           
  5949                           ;tela_PRINCIPAL.h: 17: status_jockey = 1;
  5950  0070D0  0E01               	movlw	1
  5951  0070D2  6FFC               	movwf	_status_jockey& (0+255),b
  5952                           
  5953                           ;tela_PRINCIPAL.h: 18: status_principal = 1;
  5954  0070D4  0E01               	movlw	1
  5955  0070D6  6FFB               	movwf	_status_principal& (0+255),b
  5956                           
  5957                           ;tela_PRINCIPAL.h: 19: gsmOcupado = 0;
  5958  0070D8  0E00               	movlw	0
  5959  0070DA  6FF4               	movwf	_gsmOcupado& (0+255),b
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;tela_PRINCIPAL.h: 20: LATDbits.LATD7 = 0;
  5963  0070DC  9E8C               	bcf	3980,7,c	;volatile
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;tela_PRINCIPAL.h: 21: LATAbits.LATA3 = 0;
  5967  0070DE  9689               	bcf	3977,3,c	;volatile
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;tela_PRINCIPAL.h: 22: LATCbits.LATC1 = 0;
  5971  0070E0  928B               	bcf	3979,1,c	;volatile
  5972                           
  5973                           ;tela_PRINCIPAL.h: 23: out_BOMBA_ESTACIONARIA = 0;
  5974  0070E2  0E00               	movlw	0
  5975  0070E4  6FF8               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
  5976                           
  5977                           ;tela_PRINCIPAL.h: 24: tempo_limite_partida = 0;
  5978  0070E6  0E00               	movlw	0
  5979  0070E8  6E6C               	movwf	_tempo_limite_partida,c
  5980                           
  5981                           ;tela_PRINCIPAL.h: 25: tempo_partida = 0;
  5982  0070EA  0E00               	movlw	0
  5983  0070EC  6E6D               	movwf	_tempo_partida,c
  5984                           
  5985                           ;tela_PRINCIPAL.h: 26: flagErroTransdutor = 0;
  5986  0070EE  0E00               	movlw	0
  5987  0070F0  6FF0               	movwf	_flagErroTransdutor& (0+255),b
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;tela_PRINCIPAL.h: 27: reiniciaLCD();
  5991  0070F2  EC56  F036         	call	_reiniciaLCD	;wreg free
  5992  0070F6  0012               	return		;funcret
  5993  0070F8  FFFF               	dw	65535	; errata NOP
  5994  0070FA                     __end_of_resetParametros:
  5995                           	opt stack 0
  5996                           tblptru	equ	0xFF8
  5997                           tblptrh	equ	0xFF7
  5998                           tblptrl	equ	0xFF6
  5999                           tablat	equ	0xFF5
  6000                           postinc0	equ	0xFEE
  6001                           wreg	equ	0xFE8
  6002                           postdec1	equ	0xFE5
  6003                           fsr1l	equ	0xFE1
  6004                           indf2	equ	0xFDF
  6005                           fsr2h	equ	0xFDA
  6006                           fsr2l	equ	0xFD9
  6007                           status	equ	0xFD8
  6008                           
  6009 ;; *************** function _reiniciaLCD *****************
  6010 ;; Defined at:
  6011 ;;		line 205 in file "lcd.h"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;		None
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;		None
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  1    wreg      void 
  6018 ;; Registers used:
  6019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6025 ;;      Params:         0       0       0       0       0       0       0
  6026 ;;      Locals:         0       0       0       0       0       0       0
  6027 ;;      Temps:          0       0       0       0       0       0       0
  6028 ;;      Totals:         0       0       0       0       0       0       0
  6029 ;;Total ram usage:        0 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    9
  6032 ;; This function calls:
  6033 ;;		_Lcd_Init
  6034 ;;		_criarCaracteresCGRAM
  6035 ;; This function is called by:
  6036 ;;		_resetParametros
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           	psect	text9
  6041  006CAC                     __ptext9:
  6042                           	opt stack 0
  6043  006CAC                     _reiniciaLCD:
  6044                           	opt stack 0
  6045  006CAC  FFFF               	dw	65535	; assembler added errata NOP
  6046                           
  6047                           ;lcd.h: 206: Lcd_Init();
  6048                           
  6049                           ;incstack = 0
  6050  006CAE  ECAB  F03C         	call	_Lcd_Init	;wreg free
  6051                           
  6052                           ;lcd.h: 207: criarCaracteresCGRAM();
  6053  006CB2  EC48  F01D         	call	_criarCaracteresCGRAM	;wreg free
  6054                           
  6055                           ;lcd.h: 209: timerAtrasoLCD = 1;
  6056  006CB6  0E01               	movlw	1
  6057  006CB8  6E74               	movwf	_timerAtrasoLCD,c
  6058                           
  6059                           ;lcd.h: 210: ultimoEstadoLCD = 0;
  6060  006CBA  0E00               	movlw	0
  6061  006CBC  0101               	movlb	1	; () banked
  6062  006CBE  6FDE               	movwf	_ultimoEstadoLCD& (0+255),b
  6063  006CC0  0E00               	movlw	0
  6064  006CC2  6FDF               	movwf	(_ultimoEstadoLCD+1)& (0+255),b
  6065  006CC4  0E00               	movlw	0
  6066  006CC6  6FE0               	movwf	(_ultimoEstadoLCD+2)& (0+255),b
  6067  006CC8  0E00               	movlw	0
  6068  006CCA  6FE1               	movwf	(_ultimoEstadoLCD+3)& (0+255),b
  6069                           
  6070                           ; BSR set to: 1
  6071  006CCC  0012               	return		;funcret
  6072  006CCE  FFFF               	dw	65535	; errata NOP
  6073  006CD0                     __end_of_reiniciaLCD:
  6074                           	opt stack 0
  6075                           tblptru	equ	0xFF8
  6076                           tblptrh	equ	0xFF7
  6077                           tblptrl	equ	0xFF6
  6078                           tablat	equ	0xFF5
  6079                           postinc0	equ	0xFEE
  6080                           wreg	equ	0xFE8
  6081                           postdec1	equ	0xFE5
  6082                           fsr1l	equ	0xFE1
  6083                           indf2	equ	0xFDF
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function _criarCaracteresCGRAM *****************
  6089 ;; Defined at:
  6090 ;;		line 175 in file "lcd.h"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;		None
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  character      48    7[BANK0 ] const unsigned char [8][
  6095 ;;  i               1   59[BANK0 ] unsigned char 
  6096 ;;  j               1   58[BANK0 ] unsigned char 
  6097 ;;  k               1   57[BANK0 ] unsigned char 
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  1    wreg      void 
  6100 ;; Registers used:
  6101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6107 ;;      Params:         0       0       0       0       0       0       0
  6108 ;;      Locals:         0      53       0       0       0       0       0
  6109 ;;      Temps:          0       3       0       0       0       0       0
  6110 ;;      Totals:         0      56       0       0       0       0       0
  6111 ;;Total ram usage:       56 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:    8
  6114 ;; This function calls:
  6115 ;;		_Lcd_Cmd
  6116 ;;		_Lcd_Write_Char
  6117 ;; This function is called by:
  6118 ;;		_reiniciaLCD
  6119 ;;		_main
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           	psect	text10
  6124  003A90                     __ptext10:
  6125                           	opt stack 0
  6126  003A90                     _criarCaracteresCGRAM:
  6127                           	opt stack 0
  6128  003A90  FFFF               	dw	65535	; assembler added errata NOP
  6129                           
  6130                           ;lcd.h: 176: const char character[6][8] = {
  6131                           ;lcd.h: 177: 0x00, 0x1F, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04,
  6132                           ;lcd.h: 178: 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10,
  6133                           ;lcd.h: 179: 0x00, 0x00, 0x00, 0x04, 0x04, 0x14, 0x14, 0x14,
  6134                           ;lcd.h: 180: 0x00, 0x01, 0x01, 0x05, 0x05, 0x15, 0x15, 0x15,
  6135                           ;lcd.h: 181: 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04,
  6136                           ;lcd.h: 182: };
  6137                           
  6138                           ; BSR set to: 1
  6139                           ;incstack = 0
  6140  003A92  0E71               	movlw	low criarCaracteresCGRAM@F2966
  6141  003A94  6EF6               	movwf	tblptrl,c
  6142  003A96                     	if	1	;There is more than 1 active tblptr byte
  6143  003A96  0E7A               	movlw	high criarCaracteresCGRAM@F2966
  6144  003A98  6EF7               	movwf	tblptrh,c
  6145  003A9A                     	endif
  6146  003A9A                     	if	0	;There are less than 3 active tblptr bytes
  6147  003A9A                     	endif
  6148  003A9A  EE20  F087         	lfsr	2,criarCaracteresCGRAM@character
  6149  003A9E  0E2F               	movlw	47
  6150  003AA0                     u4910:
  6151  003AA0  0009               	tblrd		*+
  6152  003AA2  FFFF               	dw	65535	; errata NOP
  6153  003AA4  CFF5 FFDE          	movff	tablat,postinc2
  6154  003AA8  06E8               	decf	wreg,f,c
  6155  003AAA  E2FA               	bc	u4910
  6156                           
  6157                           ;lcd.h: 183: Lcd_Cmd(0b0100);
  6158  003AAC  0E04               	movlw	4
  6159  003AAE  EC8F  F036         	call	_Lcd_Cmd
  6160                           
  6161                           ;lcd.h: 184: Lcd_Cmd(0b0000);
  6162  003AB2  0E00               	movlw	0
  6163  003AB4  EC8F  F036         	call	_Lcd_Cmd
  6164                           
  6165                           ;lcd.h: 185: _delay((unsigned long)((100)*(8000000/4000000.0)));
  6166  003AB8  0E32               	movlw	50
  6167  003ABA                     u9117:
  6168  003ABA  FFFF               	dw	65535	; errata NOP
  6169  003ABC  2EE8               	decfsz	wreg,f,c
  6170  003ABE  D7FD               	bra	u9117
  6171                           
  6172                           ;lcd.h: 186: char i = 0, j = 0, k = 0;
  6173  003AC0  0E00               	movlw	0
  6174  003AC2  0100               	movlb	0	; () banked
  6175  003AC4  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  6176                           
  6177                           ; BSR set to: 0
  6178  003AC6  0E00               	movlw	0
  6179  003AC8  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  6180                           
  6181                           ; BSR set to: 0
  6182  003ACA  0E00               	movlw	0
  6183  003ACC  6FB9               	movwf	criarCaracteresCGRAM@k& (0+255),b
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;lcd.h: 187: for (i = 0; i < 5; i++) {
  6187  003ACE  0E00               	movlw	0
  6188  003AD0  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  6189  003AD2                     l5267:
  6190  003AD2  FFFF               	dw	65535	; assembler added errata NOP
  6191                           
  6192                           ; BSR set to: 0
  6193  003AD4  0E04               	movlw	4
  6194  003AD6  65BB               	cpfsgt	criarCaracteresCGRAM@i& (0+255),b
  6195  003AD8  D001               	goto	l643
  6196  003ADA  D03A               	goto	u4970
  6197  003ADC                     l643:
  6198  003ADC  FFFF               	dw	65535	; assembler added errata NOP
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;lcd.h: 188: if (k == 1) i = 0;
  6202                           
  6203                           ; BSR set to: 0
  6204  003ADE  05B9               	decf	criarCaracteresCGRAM@k& (0+255),w,b
  6205  003AE0  A4D8               	btfss	status,2,c
  6206  003AE2  D002               	goto	l645
  6207                           
  6208                           ; BSR set to: 0
  6209  003AE4  0E00               	movlw	0
  6210  003AE6  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  6211  003AE8                     l645:
  6212  003AE8  FFFF               	dw	65535	; assembler added errata NOP
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;lcd.h: 189: for (j = 0; j < 8; j++) {
  6216  003AEA  0E00               	movlw	0
  6217  003AEC  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  6218  003AEE                     l5275:
  6219  003AEE  FFFF               	dw	65535	; assembler added errata NOP
  6220                           
  6221                           ; BSR set to: 0
  6222  003AF0  0E07               	movlw	7
  6223  003AF2  65BA               	cpfsgt	criarCaracteresCGRAM@j& (0+255),b
  6224  003AF4  D001               	goto	l646
  6225  003AF6  D028               	goto	u4960
  6226  003AF8                     l646:
  6227  003AF8  FFFF               	dw	65535	; assembler added errata NOP
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;lcd.h: 190: Lcd_Write_Char((k) ? character[i][j] : 0);
  6231                           
  6232                           ; BSR set to: 0
  6233  003AFA  51B9               	movf	criarCaracteresCGRAM@k& (0+255),w,b
  6234  003AFC  A4D8               	btfss	status,2,c
  6235  003AFE  D005               	goto	l649
  6236                           
  6237                           ; BSR set to: 0
  6238  003B00  0E00               	movlw	0
  6239  003B02  6FB8               	movwf	(_criarCaracteresCGRAM$1548+1)& (0+255),b
  6240  003B04  0E00               	movlw	0
  6241  003B06  6FB7               	movwf	_criarCaracteresCGRAM$1548& (0+255),b
  6242  003B08  D018               	goto	l651
  6243  003B0A                     l649:
  6244  003B0A  FFFF               	dw	65535	; assembler added errata NOP
  6245                           
  6246                           ; BSR set to: 0
  6247                           
  6248                           ; BSR set to: 0
  6249  003B0C  51BB               	movf	criarCaracteresCGRAM@i& (0+255),w,b
  6250  003B0E  0D08               	mullw	8
  6251  003B10  0E87               	movlw	low criarCaracteresCGRAM@character
  6252  003B12  6F84               	movwf	??_criarCaracteresCGRAM& (0+255),b
  6253  003B14  0E00               	movlw	high criarCaracteresCGRAM@character
  6254  003B16  6F85               	movwf	(??_criarCaracteresCGRAM+1)& (0+255),b
  6255  003B18  50F3               	movf	prodl,w,c
  6256  003B1A  2784               	addwf	??_criarCaracteresCGRAM& (0+255),f,b
  6257  003B1C  50F4               	movf	prodh,w,c
  6258  003B1E  2385               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),f,b
  6259  003B20  51BA               	movf	criarCaracteresCGRAM@j& (0+255),w,b
  6260  003B22  0D01               	mullw	1
  6261  003B24  50F3               	movf	prodl,w,c
  6262  003B26  2584               	addwf	??_criarCaracteresCGRAM& (0+255),w,b
  6263  003B28  6ED9               	movwf	fsr2l,c
  6264  003B2A  50F4               	movf	prodh,w,c
  6265  003B2C  2185               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),w,b
  6266  003B2E  6EDA               	movwf	fsr2h,c
  6267  003B30  50DF               	movf	indf2,w,c
  6268  003B32  6F86               	movwf	(??_criarCaracteresCGRAM+2)& (0+255),b
  6269  003B34  5186               	movf	(??_criarCaracteresCGRAM+2)& (0+255),w,b
  6270  003B36  6FB7               	movwf	_criarCaracteresCGRAM$1548& (0+255),b
  6271  003B38  6BB8               	clrf	(_criarCaracteresCGRAM$1548+1)& (0+255),b
  6272  003B3A                     l651:
  6273  003B3A  FFFF               	dw	65535	; assembler added errata NOP
  6274                           
  6275                           ; BSR set to: 0
  6276                           
  6277                           ; BSR set to: 0
  6278  003B3C  51B7               	movf	_criarCaracteresCGRAM$1548& (0+255),w,b
  6279  003B3E  EC09  F03A         	call	_Lcd_Write_Char
  6280  003B42  0100               	movlb	0	; () banked
  6281  003B44  2BBA               	incf	criarCaracteresCGRAM@j& (0+255),f,b
  6282  003B46  D7D3               	goto	l5275
  6283  003B48                     u4960:
  6284  003B48  FFFF               	dw	65535	; assembler added errata NOP
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;lcd.h: 191: }
  6288                           ;lcd.h: 192: k++;
  6289                           
  6290                           ; BSR set to: 0
  6291  003B4A  2BB9               	incf	criarCaracteresCGRAM@k& (0+255),f,b
  6292  003B4C  2BBB               	incf	criarCaracteresCGRAM@i& (0+255),f,b
  6293  003B4E  D7C1               	goto	l5267
  6294  003B50                     u4970:
  6295  003B50  FFFF               	dw	65535	; assembler added errata NOP
  6296                           
  6297                           ; BSR set to: 0
  6298                           
  6299                           ; BSR set to: 0
  6300  003B52  0012               	return		;funcret
  6301  003B54  FFFF               	dw	65535	; errata NOP
  6302  003B56                     __end_of_criarCaracteresCGRAM:
  6303                           	opt stack 0
  6304                           tblptru	equ	0xFF8
  6305                           tblptrh	equ	0xFF7
  6306                           tblptrl	equ	0xFF6
  6307                           tablat	equ	0xFF5
  6308                           prodh	equ	0xFF4
  6309                           prodl	equ	0xFF3
  6310                           postinc0	equ	0xFEE
  6311                           wreg	equ	0xFE8
  6312                           postdec1	equ	0xFE5
  6313                           fsr1l	equ	0xFE1
  6314                           indf2	equ	0xFDF
  6315                           postinc2	equ	0xFDE
  6316                           fsr2h	equ	0xFDA
  6317                           fsr2l	equ	0xFD9
  6318                           status	equ	0xFD8
  6319                           
  6320 ;; *************** function _Lcd_Init *****************
  6321 ;; Defined at:
  6322 ;;		line 13 in file "lcd.h"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;		None
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;		None
  6327 ;; Return value:  Size  Location     Type
  6328 ;;                  1    wreg      void 
  6329 ;; Registers used:
  6330 ;;		wreg, status,2, cstack
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6336 ;;      Params:         0       0       0       0       0       0       0
  6337 ;;      Locals:         0       0       0       0       0       0       0
  6338 ;;      Temps:          0       1       0       0       0       0       0
  6339 ;;      Totals:         0       1       0       0       0       0       0
  6340 ;;Total ram usage:        1 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    8
  6343 ;; This function calls:
  6344 ;;		_Lcd_Cmd
  6345 ;;		_Lcd_Port
  6346 ;; This function is called by:
  6347 ;;		_reiniciaLCD
  6348 ;;		_main
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           	psect	text11
  6353  007956                     __ptext11:
  6354                           	opt stack 0
  6355  007956                     _Lcd_Init:
  6356                           	opt stack 0
  6357  007956  FFFF               	dw	65535	; assembler added errata NOP
  6358                           
  6359                           ;lcd.h: 22: Lcd_Port(0x00);
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;incstack = 0
  6363  007958  0E00               	movlw	0
  6364  00795A  ECFD  F038         	call	_Lcd_Port
  6365                           
  6366                           ;lcd.h: 23: _delay((unsigned long)((30)*(8000000/4000.0)));
  6367  00795E  0E3B               	movlw	59
  6368  007960  0100               	movlb	0	; () banked
  6369  007962  6F83               	movwf	??_Lcd_Init& (0+255),b
  6370  007964  0E79               	movlw	121
  6371  007966                     u9127:
  6372  007966  FFFF               	dw	65535	; errata NOP
  6373  007968  2EE8               	decfsz	wreg,f,c
  6374  00796A  D7FD               	bra	u9127
  6375  00796C  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  6376  00796E  D7FB               	bra	u9127
  6377  007970  D000               	nop2	
  6378  007972  F000               	nop	
  6379                           
  6380                           ;lcd.h: 24: Lcd_Cmd(0x03);
  6381  007974  0E03               	movlw	3
  6382  007976  EC8F  F036         	call	_Lcd_Cmd
  6383                           
  6384                           ;lcd.h: 25: _delay((unsigned long)((15)*(8000000/4000.0)));
  6385  00797A  0E1E               	movlw	30
  6386  00797C  0100               	movlb	0	; () banked
  6387  00797E  6F83               	movwf	??_Lcd_Init& (0+255),b
  6388  007980  0E3C               	movlw	60
  6389  007982                     u9137:
  6390  007982  FFFF               	dw	65535	; errata NOP
  6391  007984  2EE8               	decfsz	wreg,f,c
  6392  007986  D7FD               	bra	u9137
  6393  007988  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  6394  00798A  D7FB               	bra	u9137
  6395  00798C  F000               	nop	
  6396                           
  6397                           ;lcd.h: 26: Lcd_Cmd(0x03);
  6398  00798E  0E03               	movlw	3
  6399  007990  EC8F  F036         	call	_Lcd_Cmd
  6400                           
  6401                           ;lcd.h: 27: _delay((unsigned long)((20)*(8000000/4000.0)));
  6402  007994  0E27               	movlw	39
  6403  007996  0100               	movlb	0	; () banked
  6404  007998  6F83               	movwf	??_Lcd_Init& (0+255),b
  6405  00799A  0EFB               	movlw	251
  6406  00799C                     u9147:
  6407  00799C  FFFF               	dw	65535	; errata NOP
  6408  00799E  2EE8               	decfsz	wreg,f,c
  6409  0079A0  D7FD               	bra	u9147
  6410  0079A2  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
  6411  0079A4  D7FB               	bra	u9147
  6412  0079A6  D000               	nop2	
  6413  0079A8  F000               	nop	
  6414                           
  6415                           ;lcd.h: 28: Lcd_Cmd(0x03);
  6416  0079AA  0E03               	movlw	3
  6417  0079AC  EC8F  F036         	call	_Lcd_Cmd
  6418                           
  6419                           ;lcd.h: 30: Lcd_Cmd(0x02);
  6420  0079B0  0E02               	movlw	2
  6421  0079B2  EC8F  F036         	call	_Lcd_Cmd
  6422                           
  6423                           ;lcd.h: 31: Lcd_Cmd(0x02);
  6424  0079B6  0E02               	movlw	2
  6425  0079B8  EC8F  F036         	call	_Lcd_Cmd
  6426                           
  6427                           ;lcd.h: 32: Lcd_Cmd(0x08);
  6428  0079BC  0E08               	movlw	8
  6429  0079BE  EC8F  F036         	call	_Lcd_Cmd
  6430                           
  6431                           ;lcd.h: 33: Lcd_Cmd(0x00);
  6432  0079C2  0E00               	movlw	0
  6433  0079C4  EC8F  F036         	call	_Lcd_Cmd
  6434                           
  6435                           ;lcd.h: 34: Lcd_Cmd(0x0C);
  6436  0079C8  0E0C               	movlw	12
  6437  0079CA  EC8F  F036         	call	_Lcd_Cmd
  6438                           
  6439                           ;lcd.h: 35: Lcd_Cmd(0x00);
  6440  0079CE  0E00               	movlw	0
  6441  0079D0  EC8F  F036         	call	_Lcd_Cmd
  6442                           
  6443                           ;lcd.h: 36: Lcd_Cmd(0x06);
  6444  0079D4  0E06               	movlw	6
  6445  0079D6  EC8F  F036         	call	_Lcd_Cmd
  6446  0079DA  0012               	return		;funcret
  6447  0079DC  FFFF               	dw	65535	; errata NOP
  6448  0079DE                     __end_of_Lcd_Init:
  6449                           	opt stack 0
  6450                           tblptru	equ	0xFF8
  6451                           tblptrh	equ	0xFF7
  6452                           tblptrl	equ	0xFF6
  6453                           tablat	equ	0xFF5
  6454                           prodh	equ	0xFF4
  6455                           prodl	equ	0xFF3
  6456                           postinc0	equ	0xFEE
  6457                           wreg	equ	0xFE8
  6458                           postdec1	equ	0xFE5
  6459                           fsr1l	equ	0xFE1
  6460                           indf2	equ	0xFDF
  6461                           postinc2	equ	0xFDE
  6462                           fsr2h	equ	0xFDA
  6463                           fsr2l	equ	0xFD9
  6464                           status	equ	0xFD8
  6465                           
  6466 ;; *************** function _partidaBombaEstacionaria *****************
  6467 ;; Defined at:
  6468 ;;		line 44 in file "controle.h"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  acao            1    wreg     unsigned char 
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;  acao            1    0[BANK0 ] unsigned char 
  6473 ;; Return value:  Size  Location     Type
  6474 ;;                  1    wreg      void 
  6475 ;; Registers used:
  6476 ;;		wreg, status,2, status,0
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6482 ;;      Params:         0       0       0       0       0       0       0
  6483 ;;      Locals:         0       1       0       0       0       0       0
  6484 ;;      Temps:          0       0       0       0       0       0       0
  6485 ;;      Totals:         0       1       0       0       0       0       0
  6486 ;;Total ram usage:        1 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    6
  6489 ;; This function calls:
  6490 ;;		Nothing
  6491 ;; This function is called by:
  6492 ;;		_main
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text12
  6497  0075EE                     __ptext12:
  6498                           	opt stack 0
  6499  0075EE                     _partidaBombaEstacionaria:
  6500                           	opt stack 0
  6501  0075EE  FFFF               	dw	65535	; assembler added errata NOP
  6502                           
  6503                           ;incstack = 0
  6504                           ;partidaBombaEstacionaria@acao stored from wreg
  6505  0075F0  0100               	movlb	0	; () banked
  6506  0075F2  6F80               	movwf	partidaBombaEstacionaria@acao& (0+255),b
  6507                           
  6508                           ;controle.h: 45: if (acao && status_estacionaria == 1) {
  6509  0075F4  0100               	movlb	0	; () banked
  6510  0075F6  5180               	movf	partidaBombaEstacionaria@acao& (0+255),w,b
  6511  0075F8  B4D8               	btfsc	status,2,c
  6512  0075FA  D023               	goto	l509
  6513                           
  6514                           ; BSR set to: 0
  6515  0075FC  05FA               	decf	_status_estacionaria& (0+255),w,b
  6516  0075FE  A4D8               	btfss	status,2,c
  6517  007600  D020               	goto	l509
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;controle.h: 46: LATEbits.LATE1 = 1;
  6521  007602  828D               	bsf	3981,1,c	;volatile
  6522                           
  6523                           ;controle.h: 48: if (!PORTAbits.RA2) {
  6524  007604  B480               	btfsc	3968,2,c	;volatile
  6525  007606  D003               	goto	l510
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;controle.h: 49: tempo_partida = 11;
  6529  007608  0E0B               	movlw	11
  6530  00760A  6E6D               	movwf	_tempo_partida,c
  6531  00760C  D00A               	goto	u7040
  6532  00760E                     l510:
  6533  00760E  FFFF               	dw	65535	; assembler added errata NOP
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;controle.h: 52: if (tempo_partida <= 7) {
  6537                           
  6538                           ; BSR set to: 0
  6539  007610  0E08               	movlw	8
  6540  007612  606D               	cpfslt	_tempo_partida,c
  6541  007614  D002               	goto	l512
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;controle.h: 53: LATEbits.LATE0 = 1;
  6545  007616  808D               	bsf	3981,0,c	;volatile
  6546                           
  6547                           ;controle.h: 54: } else if (tempo_partida <= (7 + 8)) {
  6548  007618  D00A               	goto	l515
  6549  00761A                     l512:
  6550  00761A  FFFF               	dw	65535	; assembler added errata NOP
  6551                           
  6552                           ; BSR set to: 0
  6553                           
  6554                           ; BSR set to: 0
  6555  00761C  0E10               	movlw	16
  6556  00761E  606D               	cpfslt	_tempo_partida,c
  6557  007620  D003               	goto	l514
  6558  007622                     u7040:
  6559  007622  FFFF               	dw	65535	; assembler added errata NOP
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;controle.h: 55: LATEbits.LATE0 = 0;
  6563  007624  908D               	bcf	3981,0,c	;volatile
  6564                           
  6565                           ;controle.h: 56: } else {
  6566  007626  D003               	goto	l515
  6567  007628                     l514:
  6568  007628  FFFF               	dw	65535	; assembler added errata NOP
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;controle.h: 57: tempo_partida = 0;
  6572                           
  6573                           ; BSR set to: 0
  6574  00762A  0E00               	movlw	0
  6575  00762C  6E6D               	movwf	_tempo_partida,c
  6576  00762E                     l515:
  6577  00762E  FFFF               	dw	65535	; assembler added errata NOP
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;controle.h: 58: }
  6581                           ;controle.h: 59: }
  6582                           ;controle.h: 61: if (tempo_limite_partida > tempo_limite_estacionaria) {
  6583                           
  6584                           ; BSR set to: 0
  6585                           
  6586                           ; BSR set to: 0
  6587                           
  6588                           ; BSR set to: 0
  6589  007630  506C               	movf	_tempo_limite_partida,w,c
  6590  007632  5DE6               	subwf	_tempo_limite_estacionaria& (0+255),w,b
  6591  007634  B0D8               	btfsc	status,0,c
  6592  007636  D00C               	goto	l517
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;controle.h: 62: tempo_limite_partida = 0;
  6596  007638  0E00               	movlw	0
  6597  00763A  6E6C               	movwf	_tempo_limite_partida,c
  6598                           
  6599                           ;controle.h: 63: status_estacionaria = 0;
  6600  00763C  0E00               	movlw	0
  6601  00763E  6FFA               	movwf	_status_estacionaria& (0+255),b
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;controle.h: 64: }
  6605                           ;controle.h: 66: } else {
  6606  007640  D007               	goto	l517
  6607  007642                     l509:
  6608  007642  FFFF               	dw	65535	; assembler added errata NOP
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;controle.h: 67: LATEbits.LATE0 = 0;
  6612  007644  908D               	bcf	3981,0,c	;volatile
  6613                           
  6614                           ;controle.h: 68: LATEbits.LATE1 = 0;
  6615  007646  928D               	bcf	3981,1,c	;volatile
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;controle.h: 69: tempo_partida = 0;
  6619  007648  0E00               	movlw	0
  6620  00764A  6E6D               	movwf	_tempo_partida,c
  6621                           
  6622                           ;controle.h: 70: tempo_limite_partida = 0;
  6623  00764C  0E00               	movlw	0
  6624  00764E  6E6C               	movwf	_tempo_limite_partida,c
  6625  007650                     l517:
  6626  007650  FFFF               	dw	65535	; assembler added errata NOP
  6627                           
  6628                           ; BSR set to: 0
  6629                           
  6630                           ; BSR set to: 0
  6631  007652  0012               	return		;funcret
  6632  007654  FFFF               	dw	65535	; errata NOP
  6633  007656                     __end_of_partidaBombaEstacionaria:
  6634                           	opt stack 0
  6635                           tblptru	equ	0xFF8
  6636                           tblptrh	equ	0xFF7
  6637                           tblptrl	equ	0xFF6
  6638                           tablat	equ	0xFF5
  6639                           prodh	equ	0xFF4
  6640                           prodl	equ	0xFF3
  6641                           postinc0	equ	0xFEE
  6642                           wreg	equ	0xFE8
  6643                           postdec1	equ	0xFE5
  6644                           fsr1l	equ	0xFE1
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           fsr2h	equ	0xFDA
  6648                           fsr2l	equ	0xFD9
  6649                           status	equ	0xFD8
  6650                           
  6651 ;; *************** function _monitorarAlteracaoEstado *****************
  6652 ;; Defined at:
  6653 ;;		line 93 in file "controle.h"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;		None
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;  estado          2    2[BANK0 ] int 
  6658 ;; Return value:  Size  Location     Type
  6659 ;;                  1    wreg      void 
  6660 ;; Registers used:
  6661 ;;		wreg, status,2, status,0
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6667 ;;      Params:         0       0       0       0       0       0       0
  6668 ;;      Locals:         0       2       0       0       0       0       0
  6669 ;;      Temps:          0       2       0       0       0       0       0
  6670 ;;      Totals:         0       4       0       0       0       0       0
  6671 ;;Total ram usage:        4 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    6
  6674 ;; This function calls:
  6675 ;;		Nothing
  6676 ;; This function is called by:
  6677 ;;		_main
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           	psect	text13
  6682  00774A                     __ptext13:
  6683                           	opt stack 0
  6684  00774A                     _monitorarAlteracaoEstado:
  6685                           	opt stack 0
  6686  00774A  FFFF               	dw	65535	; assembler added errata NOP
  6687                           
  6688                           ;controle.h: 94: int estado = 0;
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;incstack = 0
  6692  00774C  0E00               	movlw	0
  6693  00774E  0100               	movlb	0	; () banked
  6694  007750  6F83               	movwf	(monitorarAlteracaoEstado@estado+1)& (0+255),b
  6695  007752  0E00               	movlw	0
  6696  007754  6F82               	movwf	monitorarAlteracaoEstado@estado& (0+255),b
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;controle.h: 96: if (LATEbits.LATE0) estado += 1;
  6700  007756  A08D               	btfss	3981,0,c	;volatile
  6701  007758  D002               	goto	l530
  6702                           
  6703                           ; BSR set to: 0
  6704  00775A  4B82               	infsnz	monitorarAlteracaoEstado@estado& (0+255),f,b
  6705  00775C  2B83               	incf	(monitorarAlteracaoEstado@estado+1)& (0+255),f,b
  6706  00775E                     l530:
  6707  00775E  FFFF               	dw	65535	; assembler added errata NOP
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;controle.h: 97: if (LATAbits.LATA3) estado += 2;
  6711                           
  6712                           ; BSR set to: 0
  6713  007760  A689               	btfss	3977,3,c	;volatile
  6714  007762  D004               	goto	l531
  6715                           
  6716                           ; BSR set to: 0
  6717  007764  0E02               	movlw	2
  6718  007766  2782               	addwf	monitorarAlteracaoEstado@estado& (0+255),f,b
  6719  007768  0E00               	movlw	0
  6720  00776A  2383               	addwfc	(monitorarAlteracaoEstado@estado+1)& (0+255),f,b
  6721  00776C                     l531:
  6722  00776C  FFFF               	dw	65535	; assembler added errata NOP
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;controle.h: 98: if (LATCbits.LATC1) estado += 3;
  6726                           
  6727                           ; BSR set to: 0
  6728  00776E  A28B               	btfss	3979,1,c	;volatile
  6729  007770  D004               	goto	l532
  6730                           
  6731                           ; BSR set to: 0
  6732  007772  0E03               	movlw	3
  6733  007774  2782               	addwf	monitorarAlteracaoEstado@estado& (0+255),f,b
  6734  007776  0E00               	movlw	0
  6735  007778  2383               	addwfc	(monitorarAlteracaoEstado@estado+1)& (0+255),f,b
  6736  00777A                     l532:
  6737  00777A  FFFF               	dw	65535	; assembler added errata NOP
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;controle.h: 99: if (LATDbits.LATD7) estado += 4;
  6741                           
  6742                           ; BSR set to: 0
  6743  00777C  AE8C               	btfss	3980,7,c	;volatile
  6744  00777E  D004               	goto	l533
  6745                           
  6746                           ; BSR set to: 0
  6747  007780  0E04               	movlw	4
  6748  007782  2782               	addwf	monitorarAlteracaoEstado@estado& (0+255),f,b
  6749  007784  0E00               	movlw	0
  6750  007786  2383               	addwfc	(monitorarAlteracaoEstado@estado+1)& (0+255),f,b
  6751  007788                     l533:
  6752  007788  FFFF               	dw	65535	; assembler added errata NOP
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;controle.h: 100: if (LATEbits.LATE1) estado += 5;
  6756                           
  6757                           ; BSR set to: 0
  6758  00778A  A28D               	btfss	3981,1,c	;volatile
  6759  00778C  D004               	goto	l534
  6760                           
  6761                           ; BSR set to: 0
  6762  00778E  0E05               	movlw	5
  6763  007790  2782               	addwf	monitorarAlteracaoEstado@estado& (0+255),f,b
  6764  007792  0E00               	movlw	0
  6765  007794  2383               	addwfc	(monitorarAlteracaoEstado@estado+1)& (0+255),f,b
  6766  007796                     l534:
  6767  007796  FFFF               	dw	65535	; assembler added errata NOP
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;controle.h: 101: if (LATEbits.LATE2) estado += 6;
  6771                           
  6772                           ; BSR set to: 0
  6773  007798  A48D               	btfss	3981,2,c	;volatile
  6774  00779A  D004               	goto	l535
  6775                           
  6776                           ; BSR set to: 0
  6777  00779C  0E06               	movlw	6
  6778  00779E  2782               	addwf	monitorarAlteracaoEstado@estado& (0+255),f,b
  6779  0077A0  0E00               	movlw	0
  6780  0077A2  2383               	addwfc	(monitorarAlteracaoEstado@estado+1)& (0+255),f,b
  6781  0077A4                     l535:
  6782  0077A4  FFFF               	dw	65535	; assembler added errata NOP
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;controle.h: 103: if (estado != ultimoEstadoSaidas) {
  6786  0077A6  506F               	movf	_ultimoEstadoSaidas,w,c
  6787  0077A8  6F80               	movwf	??_monitorarAlteracaoEstado& (0+255),b
  6788  0077AA  6B81               	clrf	(??_monitorarAlteracaoEstado+1)& (0+255),b
  6789  0077AC  5182               	movf	monitorarAlteracaoEstado@estado& (0+255),w,b
  6790  0077AE  1980               	xorwf	??_monitorarAlteracaoEstado& (0+255),w,b
  6791  0077B0  E104               	bnz	u7160
  6792  0077B2  5183               	movf	(monitorarAlteracaoEstado@estado+1)& (0+255),w,b
  6793  0077B4  1981               	xorwf	(??_monitorarAlteracaoEstado+1)& (0+255),w,b
  6794  0077B6  B4D8               	btfsc	status,2,c
  6795  0077B8  D004               	goto	l536
  6796  0077BA                     u7160:
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;controle.h: 104: ultimoEstadoSaidas = estado;
  6800  0077BA  C082  F06F         	movff	monitorarAlteracaoEstado@estado,_ultimoEstadoSaidas
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;controle.h: 105: timerAtrasoLCD = 13;
  6804  0077BE  0E0D               	movlw	13
  6805  0077C0  6E74               	movwf	_timerAtrasoLCD,c
  6806  0077C2                     l536:
  6807  0077C2  FFFF               	dw	65535	; assembler added errata NOP
  6808                           
  6809                           ; BSR set to: 0
  6810                           
  6811                           ; BSR set to: 0
  6812  0077C4  0012               	return		;funcret
  6813  0077C6  FFFF               	dw	65535	; errata NOP
  6814  0077C8                     __end_of_monitorarAlteracaoEstado:
  6815                           	opt stack 0
  6816                           tblptru	equ	0xFF8
  6817                           tblptrh	equ	0xFF7
  6818                           tblptrl	equ	0xFF6
  6819                           tablat	equ	0xFF5
  6820                           prodh	equ	0xFF4
  6821                           prodl	equ	0xFF3
  6822                           postinc0	equ	0xFEE
  6823                           wreg	equ	0xFE8
  6824                           postdec1	equ	0xFE5
  6825                           fsr1l	equ	0xFE1
  6826                           indf2	equ	0xFDF
  6827                           postinc2	equ	0xFDE
  6828                           fsr2h	equ	0xFDA
  6829                           fsr2l	equ	0xFD9
  6830                           status	equ	0xFD8
  6831                           
  6832 ;; *************** function _lerTransdutor *****************
  6833 ;; Defined at:
  6834 ;;		line 8 in file "transdutor.h"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;		None
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;  adc             2   48[BANK0 ] int 
  6839 ;;  _pressao        2   46[BANK0 ] int 
  6840 ;;  mediaLeitura    2   44[BANK0 ] int 
  6841 ;;  i               1   50[BANK0 ] unsigned char 
  6842 ;; Return value:  Size  Location     Type
  6843 ;;                  1    wreg      void 
  6844 ;; Registers used:
  6845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6851 ;;      Params:         0       0       0       0       0       0       0
  6852 ;;      Locals:         0       7       0       0       0       0       0
  6853 ;;      Temps:          0       2       0       0       0       0       0
  6854 ;;      Totals:         0       9       0       0       0       0       0
  6855 ;;Total ram usage:        9 bytes
  6856 ;; Hardware stack levels used:    1
  6857 ;; Hardware stack levels required when called:    8
  6858 ;; This function calls:
  6859 ;;		___awdiv
  6860 ;;		_map
  6861 ;; This function is called by:
  6862 ;;		_main
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           	psect	text14
  6867  002D02                     __ptext14:
  6868                           	opt stack 0
  6869  002D02                     _lerTransdutor:
  6870                           	opt stack 0
  6871  002D02  FFFF               	dw	65535	; assembler added errata NOP
  6872                           
  6873                           ;transdutor.h: 9: char i = 0;
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;incstack = 0
  6877  002D04  0E00               	movlw	0
  6878  002D06  0100               	movlb	0	; () banked
  6879  002D08  6FB2               	movwf	lerTransdutor@i& (0+255),b
  6880                           
  6881                           ;transdutor.h: 10: int mediaLeitura = 0;
  6882  002D0A  0E00               	movlw	0
  6883  002D0C  6FAD               	movwf	(lerTransdutor@mediaLeitura+1)& (0+255),b
  6884  002D0E  0E00               	movlw	0
  6885  002D10  6FAC               	movwf	lerTransdutor@mediaLeitura& (0+255),b
  6886                           
  6887                           ;transdutor.h: 11: int adc = 0;
  6888  002D12  0E00               	movlw	0
  6889  002D14  6FB1               	movwf	(lerTransdutor@adc+1)& (0+255),b
  6890  002D16  0E00               	movlw	0
  6891  002D18  6FB0               	movwf	lerTransdutor@adc& (0+255),b
  6892                           
  6893                           ;transdutor.h: 12: int _pressao = 0;
  6894  002D1A  0E00               	movlw	0
  6895  002D1C  6FAF               	movwf	(lerTransdutor@_pressao+1)& (0+255),b
  6896  002D1E  0E00               	movlw	0
  6897  002D20  6FAE               	movwf	lerTransdutor@_pressao& (0+255),b
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;transdutor.h: 14: ADCON0bits.CHS = 0b000;
  6901  002D22  96C2               	bcf	4034,3,c	;volatile
  6902  002D24  98C2               	bcf	4034,4,c	;volatile
  6903  002D26  9AC2               	bcf	4034,5,c	;volatile
  6904                           
  6905                           ;transdutor.h: 15: for (i = 0; i < 15; i++) {
  6906  002D28  0E00               	movlw	0
  6907  002D2A  6FB2               	movwf	lerTransdutor@i& (0+255),b
  6908  002D2C                     l6517:
  6909  002D2C  FFFF               	dw	65535	; assembler added errata NOP
  6910                           
  6911                           ; BSR set to: 0
  6912  002D2E  0E0E               	movlw	14
  6913  002D30  65B2               	cpfsgt	lerTransdutor@i& (0+255),b
  6914  002D32  D001               	goto	l242
  6915  002D34  D043               	goto	u6510
  6916  002D36                     l242:
  6917  002D36  FFFF               	dw	65535	; assembler added errata NOP
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;transdutor.h: 16: adc = 0;
  6921                           
  6922                           ; BSR set to: 0
  6923  002D38  0E00               	movlw	0
  6924  002D3A  6FB1               	movwf	(lerTransdutor@adc+1)& (0+255),b
  6925  002D3C  0E00               	movlw	0
  6926  002D3E  6FB0               	movwf	lerTransdutor@adc& (0+255),b
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;transdutor.h: 17: _delay((unsigned long)((30)*(8000000/4000000.0)));
  6930  002D40  0E0F               	movlw	15
  6931  002D42                     u9157:
  6932  002D42  FFFF               	dw	65535	; errata NOP
  6933  002D44  2EE8               	decfsz	wreg,f,c
  6934  002D46  D7FD               	bra	u9157
  6935                           
  6936                           ;transdutor.h: 18: ADCON0bits.GO = 1;
  6937  002D48  84C2               	bsf	4034,2,c	;volatile
  6938  002D4A  FFFF               	dw	65535	; assembler added errata NOP
  6939  002D4C  A4C2               	btfss	4034,2,c	;volatile
  6940  002D4E  D7FD               	goto	l245
  6941                           
  6942                           ;transdutor.h: 20: adc = ((ADRESH << 8) + ADRESL);
  6943  002D50  50C4               	movf	4036,w,c	;volatile
  6944  002D52  0100               	movlb	0	; () banked
  6945  002D54  6FAB               	movwf	(??_lerTransdutor+1)& (0+255),b
  6946  002D56  6BAA               	clrf	??_lerTransdutor& (0+255),b
  6947  002D58  50C3               	movf	4035,w,c	;volatile
  6948  002D5A  25AA               	addwf	??_lerTransdutor& (0+255),w,b
  6949  002D5C  6FB0               	movwf	lerTransdutor@adc& (0+255),b
  6950  002D5E  0E00               	movlw	0
  6951  002D60  21AB               	addwfc	(??_lerTransdutor+1)& (0+255),w,b
  6952  002D62  6FB1               	movwf	(lerTransdutor@adc+1)& (0+255),b
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;transdutor.h: 21: mediaLeitura += map(adc, 102, 920, 0, 100);
  6956  002D64  C0B0  F08E         	movff	lerTransdutor@adc,map@x
  6957  002D68  C0B1  F08F         	movff	lerTransdutor@adc+1,map@x+1
  6958  002D6C  0E00               	movlw	0
  6959  002D6E  6F91               	movwf	(map@in_min+1)& (0+255),b
  6960  002D70  0E66               	movlw	102
  6961  002D72  6F90               	movwf	map@in_min& (0+255),b
  6962  002D74  0E03               	movlw	3
  6963  002D76  6F93               	movwf	(map@in_max+1)& (0+255),b
  6964  002D78  0E98               	movlw	152
  6965  002D7A  6F92               	movwf	map@in_max& (0+255),b
  6966  002D7C  0E00               	movlw	0
  6967  002D7E  6F95               	movwf	(map@out_min+1)& (0+255),b
  6968  002D80  0E00               	movlw	0
  6969  002D82  6F94               	movwf	map@out_min& (0+255),b
  6970  002D84  0E00               	movlw	0
  6971  002D86  6F97               	movwf	(map@out_max+1)& (0+255),b
  6972  002D88  0E64               	movlw	100
  6973  002D8A  6F96               	movwf	map@out_max& (0+255),b
  6974  002D8C  ECE7  F018         	call	_map	;wreg free
  6975  002D90  0100               	movlb	0	; () banked
  6976  002D92  518E               	movf	?_map& (0+255),w,b
  6977  002D94  27AC               	addwf	lerTransdutor@mediaLeitura& (0+255),f,b
  6978  002D96  518F               	movf	(?_map+1)& (0+255),w,b
  6979  002D98  23AD               	addwfc	(lerTransdutor@mediaLeitura+1)& (0+255),f,b
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;transdutor.h: 22: if (adc < 50 && timerIntervaloEntreBombas == 0) {
  6983  002D9A  BFB1               	btfsc	(lerTransdutor@adc+1)& (0+255),7,b
  6984  002D9C  D006               	goto	u6490
  6985  002D9E  51B1               	movf	(lerTransdutor@adc+1)& (0+255),w,b
  6986  002DA0  E10B               	bnz	l6537
  6987  002DA2  0E32               	movlw	50
  6988  002DA4  5DB0               	subwf	lerTransdutor@adc& (0+255),w,b
  6989  002DA6  B0D8               	btfsc	status,0,c
  6990  002DA8  D006               	goto	l247
  6991  002DAA                     u6490:
  6992  002DAA  FFFF               	dw	65535	; assembler added errata NOP
  6993                           
  6994                           ; BSR set to: 0
  6995  002DAC  51FE               	movf	_timerIntervaloEntreBombas& (0+255),w,b
  6996  002DAE  A4D8               	btfss	status,2,c
  6997  002DB0  D002               	goto	l247
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;transdutor.h: 23: flagErroTransdutor = 1;
  7001  002DB2  0E01               	movlw	1
  7002  002DB4  6FF0               	movwf	_flagErroTransdutor& (0+255),b
  7003  002DB6                     l247:
  7004  002DB6  FFFF               	dw	65535	; assembler added errata NOP
  7005  002DB8                     l6537:
  7006                           
  7007                           ; BSR set to: 0
  7008  002DB8  2BB2               	incf	lerTransdutor@i& (0+255),f,b
  7009  002DBA  D7B8               	goto	l6517
  7010  002DBC                     u6510:
  7011  002DBC  FFFF               	dw	65535	; assembler added errata NOP
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;transdutor.h: 24: }
  7015                           ;transdutor.h: 25: }
  7016                           ;transdutor.h: 27: coletaMedias[posicaoColetaLeitura] = (int) mediaLeitura / 15;
  7017                           
  7018                           ; BSR set to: 0
  7019  002DBE  C0AC  F080         	movff	lerTransdutor@mediaLeitura,___awdiv@dividend
  7020  002DC2  C0AD  F081         	movff	lerTransdutor@mediaLeitura+1,___awdiv@dividend+1
  7021  002DC6  0E00               	movlw	0
  7022  002DC8  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7023  002DCA  0E0F               	movlw	15
  7024  002DCC  6F82               	movwf	___awdiv@divisor& (0+255),b
  7025  002DCE  ECD0  F01E         	call	___awdiv	;wreg free
  7026  002DD2  506E               	movf	_posicaoColetaLeitura,w,c
  7027  002DD4  0D02               	mullw	2
  7028  002DD6  0E00               	movlw	low _coletaMedias
  7029  002DD8  24F3               	addwf	prodl,w,c
  7030  002DDA  6ED9               	movwf	fsr2l,c
  7031  002DDC  0E01               	movlw	high _coletaMedias
  7032  002DDE  20F4               	addwfc	prodh,w,c
  7033  002DE0  6EDA               	movwf	fsr2h,c
  7034  002DE2  0100               	movlb	0	; () banked
  7035  002DE4  C080  FFDE         	movff	?___awdiv,postinc2
  7036  002DE8  C081  FFDD         	movff	?___awdiv+1,postdec2
  7037                           
  7038                           ; BSR set to: 0
  7039                           ;transdutor.h: 29: if (posicaoColetaLeitura >= 5) {
  7040  002DEC  0E04               	movlw	4
  7041  002DEE  646E               	cpfsgt	_posicaoColetaLeitura,c
  7042  002DF0  D003               	goto	l248
  7043                           
  7044                           ; BSR set to: 0
  7045                           ;transdutor.h: 30: posicaoColetaLeitura = 0;
  7046  002DF2  0E00               	movlw	0
  7047  002DF4  6E6E               	movwf	_posicaoColetaLeitura,c
  7048                           
  7049                           ;transdutor.h: 31: } else {
  7050  002DF6  D002               	goto	l249
  7051  002DF8                     l248:
  7052  002DF8  FFFF               	dw	65535	; assembler added errata NOP
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;transdutor.h: 32: posicaoColetaLeitura++;
  7056                           
  7057                           ; BSR set to: 0
  7058  002DFA  2A6E               	incf	_posicaoColetaLeitura,f,c
  7059  002DFC                     l249:
  7060  002DFC  FFFF               	dw	65535	; assembler added errata NOP
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;transdutor.h: 33: }
  7064                           ;transdutor.h: 35: for (i = 0; i < 5; i++) {
  7065                           
  7066                           ; BSR set to: 0
  7067  002DFE  0E00               	movlw	0
  7068  002E00  6FB2               	movwf	lerTransdutor@i& (0+255),b
  7069  002E02                     l6551:
  7070  002E02  FFFF               	dw	65535	; assembler added errata NOP
  7071                           
  7072                           ; BSR set to: 0
  7073  002E04  0E04               	movlw	4
  7074  002E06  65B2               	cpfsgt	lerTransdutor@i& (0+255),b
  7075  002E08  D001               	goto	l250
  7076  002E0A  D00F               	goto	u6540
  7077  002E0C                     l250:
  7078  002E0C  FFFF               	dw	65535	; assembler added errata NOP
  7079                           
  7080                           ; BSR set to: 0
  7081                           ;transdutor.h: 36: _pressao += coletaMedias[i];
  7082                           
  7083                           ; BSR set to: 0
  7084  002E0E  51B2               	movf	lerTransdutor@i& (0+255),w,b
  7085  002E10  0D02               	mullw	2
  7086  002E12  0E00               	movlw	low _coletaMedias
  7087  002E14  24F3               	addwf	prodl,w,c
  7088  002E16  6ED9               	movwf	fsr2l,c
  7089  002E18  0E01               	movlw	high _coletaMedias
  7090  002E1A  20F4               	addwfc	prodh,w,c
  7091  002E1C  6EDA               	movwf	fsr2h,c
  7092  002E1E  50DE               	movf	postinc2,w,c
  7093  002E20  27AE               	addwf	lerTransdutor@_pressao& (0+255),f,b
  7094  002E22  50DD               	movf	postdec2,w,c
  7095  002E24  23AF               	addwfc	(lerTransdutor@_pressao+1)& (0+255),f,b
  7096                           
  7097                           ; BSR set to: 0
  7098  002E26  2BB2               	incf	lerTransdutor@i& (0+255),f,b
  7099  002E28  D7EC               	goto	l6551
  7100  002E2A                     u6540:
  7101  002E2A  FFFF               	dw	65535	; assembler added errata NOP
  7102                           
  7103                           ; BSR set to: 0
  7104                           ;transdutor.h: 37: }
  7105                           ;transdutor.h: 39: pressao = (int) _pressao / 5;
  7106                           
  7107                           ; BSR set to: 0
  7108  002E2C  C0AE  F080         	movff	lerTransdutor@_pressao,___awdiv@dividend
  7109  002E30  C0AF  F081         	movff	lerTransdutor@_pressao+1,___awdiv@dividend+1
  7110  002E34  0E00               	movlw	0
  7111  002E36  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7112  002E38  0E05               	movlw	5
  7113  002E3A  6F82               	movwf	___awdiv@divisor& (0+255),b
  7114  002E3C  ECD0  F01E         	call	___awdiv	;wreg free
  7115  002E40  C080  F0D8         	movff	?___awdiv,_pressao
  7116  002E44  C081  F0D9         	movff	?___awdiv+1,_pressao+1
  7117  002E48  0012               	return		;funcret
  7118  002E4A  FFFF               	dw	65535	; errata NOP
  7119  002E4C                     __end_of_lerTransdutor:
  7120                           	opt stack 0
  7121                           tblptru	equ	0xFF8
  7122                           tblptrh	equ	0xFF7
  7123                           tblptrl	equ	0xFF6
  7124                           tablat	equ	0xFF5
  7125                           prodh	equ	0xFF4
  7126                           prodl	equ	0xFF3
  7127                           postinc0	equ	0xFEE
  7128                           wreg	equ	0xFE8
  7129                           postdec1	equ	0xFE5
  7130                           fsr1l	equ	0xFE1
  7131                           indf2	equ	0xFDF
  7132                           postinc2	equ	0xFDE
  7133                           postdec2	equ	0xFDD
  7134                           fsr2h	equ	0xFDA
  7135                           fsr2l	equ	0xFD9
  7136                           status	equ	0xFD8
  7137                           
  7138 ;; *************** function _map *****************
  7139 ;; Defined at:
  7140 ;;		line 59 in file "function.c"
  7141 ;; Parameters:    Size  Location     Type
  7142 ;;  x               2   14[BANK0 ] int 
  7143 ;;  in_min          2   16[BANK0 ] int 
  7144 ;;  in_max          2   18[BANK0 ] int 
  7145 ;;  out_min         2   20[BANK0 ] int 
  7146 ;;  out_max         2   22[BANK0 ] int 
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;  e               4   30[BANK0 ] long 
  7149 ;;  d               4   26[BANK0 ] long 
  7150 ;;  result          2   40[BANK0 ] int 
  7151 ;;  c               2   38[BANK0 ] int 
  7152 ;;  b               2   36[BANK0 ] int 
  7153 ;;  a               2   34[BANK0 ] int 
  7154 ;; Return value:  Size  Location     Type
  7155 ;;                  2   14[BANK0 ] int 
  7156 ;; Registers used:
  7157 ;;		wreg, status,2, status,0, cstack
  7158 ;; Tracked objects:
  7159 ;;		On entry : 0/0
  7160 ;;		On exit  : 0/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7163 ;;      Params:         0      10       0       0       0       0       0
  7164 ;;      Locals:         0      16       0       0       0       0       0
  7165 ;;      Temps:          0       2       0       0       0       0       0
  7166 ;;      Totals:         0      28       0       0       0       0       0
  7167 ;;Total ram usage:       28 bytes
  7168 ;; Hardware stack levels used:    1
  7169 ;; Hardware stack levels required when called:    7
  7170 ;; This function calls:
  7171 ;;		___aldiv
  7172 ;;		___lmul
  7173 ;; This function is called by:
  7174 ;;		_lerTransdutor
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           	psect	text15
  7179  0031CE                     __ptext15:
  7180                           	opt stack 0
  7181  0031CE                     _map:
  7182                           	opt stack 0
  7183  0031CE  FFFF               	dw	65535	; assembler added errata NOP
  7184                           
  7185                           ;function.c: 60: int a = x - in_min;
  7186                           
  7187                           ;incstack = 0
  7188  0031D0  C090  F098         	movff	map@in_min,??_map
  7189  0031D4  C091  F099         	movff	map@in_min+1,??_map+1
  7190  0031D8  0100               	movlb	0	; () banked
  7191  0031DA  1F98               	comf	??_map& (0+255),f,b
  7192  0031DC  1F99               	comf	(??_map+1)& (0+255),f,b
  7193  0031DE  4B98               	infsnz	??_map& (0+255),f,b
  7194  0031E0  2B99               	incf	(??_map+1)& (0+255),f,b
  7195  0031E2  518E               	movf	map@x& (0+255),w,b
  7196  0031E4  2598               	addwf	??_map& (0+255),w,b
  7197  0031E6  6FA2               	movwf	map@a& (0+255),b
  7198  0031E8  518F               	movf	(map@x+1)& (0+255),w,b
  7199  0031EA  2199               	addwfc	(??_map+1)& (0+255),w,b
  7200  0031EC  6FA3               	movwf	(map@a+1)& (0+255),b
  7201                           
  7202                           ;function.c: 61: int b = out_max - out_min;
  7203  0031EE  C094  F098         	movff	map@out_min,??_map
  7204  0031F2  C095  F099         	movff	map@out_min+1,??_map+1
  7205  0031F6  1F98               	comf	??_map& (0+255),f,b
  7206  0031F8  1F99               	comf	(??_map+1)& (0+255),f,b
  7207  0031FA  4B98               	infsnz	??_map& (0+255),f,b
  7208  0031FC  2B99               	incf	(??_map+1)& (0+255),f,b
  7209  0031FE  5196               	movf	map@out_max& (0+255),w,b
  7210  003200  2598               	addwf	??_map& (0+255),w,b
  7211  003202  6FA4               	movwf	map@b& (0+255),b
  7212  003204  5197               	movf	(map@out_max+1)& (0+255),w,b
  7213  003206  2199               	addwfc	(??_map+1)& (0+255),w,b
  7214  003208  6FA5               	movwf	(map@b+1)& (0+255),b
  7215                           
  7216                           ;function.c: 62: int c = in_max - in_min;
  7217  00320A  C090  F098         	movff	map@in_min,??_map
  7218  00320E  C091  F099         	movff	map@in_min+1,??_map+1
  7219  003212  1F98               	comf	??_map& (0+255),f,b
  7220  003214  1F99               	comf	(??_map+1)& (0+255),f,b
  7221  003216  4B98               	infsnz	??_map& (0+255),f,b
  7222  003218  2B99               	incf	(??_map+1)& (0+255),f,b
  7223  00321A  5192               	movf	map@in_max& (0+255),w,b
  7224  00321C  2598               	addwf	??_map& (0+255),w,b
  7225  00321E  6FA6               	movwf	map@c& (0+255),b
  7226  003220  5193               	movf	(map@in_max+1)& (0+255),w,b
  7227  003222  2199               	addwfc	(??_map+1)& (0+255),w,b
  7228  003224  6FA7               	movwf	(map@c+1)& (0+255),b
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;function.c: 63: long d = (long) a * b;
  7232  003226  C0A2  F080         	movff	map@a,___lmul@multiplier
  7233  00322A  C0A3  F081         	movff	map@a+1,___lmul@multiplier+1
  7234  00322E  0E00               	movlw	0
  7235  003230  BF81               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  7236  003232  0EFF               	movlw	-1
  7237  003234  6F82               	movwf	(___lmul@multiplier+2)& (0+255),b
  7238  003236  6F83               	movwf	(___lmul@multiplier+3)& (0+255),b
  7239  003238  C0A4  F084         	movff	map@b,___lmul@multiplicand
  7240  00323C  C0A5  F085         	movff	map@b+1,___lmul@multiplicand+1
  7241  003240  0E00               	movlw	0
  7242  003242  BF85               	btfsc	(___lmul@multiplicand+1)& (0+255),7,b
  7243  003244  0EFF               	movlw	-1
  7244  003246  6F86               	movwf	(___lmul@multiplicand+2)& (0+255),b
  7245  003248  6F87               	movwf	(___lmul@multiplicand+3)& (0+255),b
  7246  00324A  EC64  F03A         	call	___lmul	;wreg free
  7247  00324E  C080  F09A         	movff	?___lmul,map@d
  7248  003252  C081  F09B         	movff	?___lmul+1,map@d+1
  7249  003256  C082  F09C         	movff	?___lmul+2,map@d+2
  7250  00325A  C083  F09D         	movff	?___lmul+3,map@d+3
  7251                           
  7252                           ;function.c: 64: long e = (long) d / c;
  7253  00325E  C09A  F080         	movff	map@d,___aldiv@dividend
  7254  003262  C09B  F081         	movff	map@d+1,___aldiv@dividend+1
  7255  003266  C09C  F082         	movff	map@d+2,___aldiv@dividend+2
  7256  00326A  C09D  F083         	movff	map@d+3,___aldiv@dividend+3
  7257  00326E  C0A6  F084         	movff	map@c,___aldiv@divisor
  7258  003272  C0A7  F085         	movff	map@c+1,___aldiv@divisor+1
  7259  003276  0100               	movlb	0	; () banked
  7260  003278  0E00               	movlw	0
  7261  00327A  BF85               	btfsc	(___aldiv@divisor+1)& (0+255),7,b
  7262  00327C  0EFF               	movlw	-1
  7263  00327E  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  7264  003280  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  7265  003282  EC07  F01C         	call	___aldiv	;wreg free
  7266  003286  C080  F09E         	movff	?___aldiv,map@e
  7267  00328A  C081  F09F         	movff	?___aldiv+1,map@e+1
  7268  00328E  C082  F0A0         	movff	?___aldiv+2,map@e+2
  7269  003292  C083  F0A1         	movff	?___aldiv+3,map@e+3
  7270                           
  7271                           ;function.c: 65: int result = (int) e + out_min;
  7272  003296  0100               	movlb	0	; () banked
  7273  003298  5194               	movf	map@out_min& (0+255),w,b
  7274  00329A  259E               	addwf	map@e& (0+255),w,b
  7275  00329C  6FA8               	movwf	map@result& (0+255),b
  7276  00329E  5195               	movf	(map@out_min+1)& (0+255),w,b
  7277  0032A0  219F               	addwfc	(map@e+1)& (0+255),w,b
  7278  0032A2  6FA9               	movwf	(map@result+1)& (0+255),b
  7279                           
  7280                           ;function.c: 66: if (result < out_min) return out_min;
  7281  0032A4  5194               	movf	map@out_min& (0+255),w,b
  7282  0032A6  5DA8               	subwf	map@result& (0+255),w,b
  7283  0032A8  51A9               	movf	(map@result+1)& (0+255),w,b
  7284  0032AA  0A80               	xorlw	128
  7285  0032AC  6F98               	movwf	??_map& (0+255),b
  7286  0032AE  5195               	movf	(map@out_min+1)& (0+255),w,b
  7287  0032B0  0A80               	xorlw	128
  7288  0032B2  5998               	subwfb	??_map& (0+255),w,b
  7289  0032B4  B0D8               	btfsc	status,0,c
  7290  0032B6  D005               	goto	l1091
  7291                           
  7292                           ; BSR set to: 0
  7293  0032B8  C094  F08E         	movff	map@out_min,?_map
  7294  0032BC  C095  F08F         	movff	map@out_min+1,?_map+1
  7295  0032C0  D015               	goto	l1092
  7296  0032C2                     l1091:
  7297  0032C2  FFFF               	dw	65535	; assembler added errata NOP
  7298                           
  7299                           ; BSR set to: 0
  7300                           ;function.c: 67: if (result > out_max) return out_max;
  7301                           
  7302                           ; BSR set to: 0
  7303  0032C4  51A8               	movf	map@result& (0+255),w,b
  7304  0032C6  5D96               	subwf	map@out_max& (0+255),w,b
  7305  0032C8  5197               	movf	(map@out_max+1)& (0+255),w,b
  7306  0032CA  0A80               	xorlw	128
  7307  0032CC  6F98               	movwf	??_map& (0+255),b
  7308  0032CE  51A9               	movf	(map@result+1)& (0+255),w,b
  7309  0032D0  0A80               	xorlw	128
  7310  0032D2  5998               	subwfb	??_map& (0+255),w,b
  7311  0032D4  B0D8               	btfsc	status,0,c
  7312  0032D6  D005               	goto	l1093
  7313                           
  7314                           ; BSR set to: 0
  7315  0032D8  C096  F08E         	movff	map@out_max,?_map
  7316  0032DC  C097  F08F         	movff	map@out_max+1,?_map+1
  7317  0032E0  D005               	goto	l1092
  7318  0032E2                     l1093:
  7319  0032E2  FFFF               	dw	65535	; assembler added errata NOP
  7320                           
  7321                           ; BSR set to: 0
  7322                           ;function.c: 68: return result;
  7323  0032E4  C0A8  F08E         	movff	map@result,?_map
  7324  0032E8  C0A9  F08F         	movff	map@result+1,?_map+1
  7325  0032EC                     l1092:
  7326  0032EC  FFFF               	dw	65535	; assembler added errata NOP
  7327                           
  7328                           ; BSR set to: 0
  7329  0032EE  0012               	return		;funcret
  7330  0032F0  FFFF               	dw	65535	; errata NOP
  7331  0032F2                     __end_of_map:
  7332                           	opt stack 0
  7333                           tblptru	equ	0xFF8
  7334                           tblptrh	equ	0xFF7
  7335                           tblptrl	equ	0xFF6
  7336                           tablat	equ	0xFF5
  7337                           prodh	equ	0xFF4
  7338                           prodl	equ	0xFF3
  7339                           postinc0	equ	0xFEE
  7340                           wreg	equ	0xFE8
  7341                           postdec1	equ	0xFE5
  7342                           fsr1l	equ	0xFE1
  7343                           indf2	equ	0xFDF
  7344                           postinc2	equ	0xFDE
  7345                           postdec2	equ	0xFDD
  7346                           fsr2h	equ	0xFDA
  7347                           fsr2l	equ	0xFD9
  7348                           status	equ	0xFD8
  7349                           
  7350 ;; *************** function ___lmul *****************
  7351 ;; Defined at:
  7352 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;  multiplier      4    0[BANK0 ] unsigned long 
  7355 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;  product         4    8[BANK0 ] unsigned long 
  7358 ;; Return value:  Size  Location     Type
  7359 ;;                  4    0[BANK0 ] unsigned long 
  7360 ;; Registers used:
  7361 ;;		wreg, status,2, status,0
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7367 ;;      Params:         0       8       0       0       0       0       0
  7368 ;;      Locals:         0       4       0       0       0       0       0
  7369 ;;      Temps:          0       0       0       0       0       0       0
  7370 ;;      Totals:         0      12       0       0       0       0       0
  7371 ;;Total ram usage:       12 bytes
  7372 ;; Hardware stack levels used:    1
  7373 ;; Hardware stack levels required when called:    6
  7374 ;; This function calls:
  7375 ;;		Nothing
  7376 ;; This function is called by:
  7377 ;;		_map
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           	psect	text16
  7382  0074C8                     __ptext16:
  7383                           	opt stack 0
  7384  0074C8                     ___lmul:
  7385                           	opt stack 0
  7386  0074C8  FFFF               	dw	65535	; assembler added errata NOP
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;incstack = 0
  7390  0074CA  0E00               	movlw	0
  7391  0074CC  0100               	movlb	0	; () banked
  7392  0074CE  6F88               	movwf	___lmul@product& (0+255),b
  7393  0074D0  0E00               	movlw	0
  7394  0074D2  6F89               	movwf	(___lmul@product+1)& (0+255),b
  7395  0074D4  0E00               	movlw	0
  7396  0074D6  6F8A               	movwf	(___lmul@product+2)& (0+255),b
  7397  0074D8  0E00               	movlw	0
  7398  0074DA  6F8B               	movwf	(___lmul@product+3)& (0+255),b
  7399  0074DC  FFFF               	dw	65535	; assembler added errata NOP
  7400                           
  7401                           ; BSR set to: 0
  7402                           
  7403                           ; BSR set to: 0
  7404  0074DE  A180               	btfss	___lmul@multiplier& (0+255),0,b
  7405  0074E0  D008               	goto	l1186
  7406                           
  7407                           ; BSR set to: 0
  7408  0074E2  5184               	movf	___lmul@multiplicand& (0+255),w,b
  7409  0074E4  2788               	addwf	___lmul@product& (0+255),f,b
  7410  0074E6  5185               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  7411  0074E8  2389               	addwfc	(___lmul@product+1)& (0+255),f,b
  7412  0074EA  5186               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  7413  0074EC  238A               	addwfc	(___lmul@product+2)& (0+255),f,b
  7414  0074EE  5187               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  7415  0074F0  238B               	addwfc	(___lmul@product+3)& (0+255),f,b
  7416  0074F2                     l1186:
  7417  0074F2  FFFF               	dw	65535	; assembler added errata NOP
  7418                           
  7419                           ; BSR set to: 0
  7420                           
  7421                           ; BSR set to: 0
  7422  0074F4  90D8               	bcf	status,0,c
  7423  0074F6  3784               	rlcf	___lmul@multiplicand& (0+255),f,b
  7424  0074F8  3785               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  7425  0074FA  3786               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  7426  0074FC  3787               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  7427                           
  7428                           ; BSR set to: 0
  7429  0074FE  90D8               	bcf	status,0,c
  7430  007500  3383               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  7431  007502  3382               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  7432  007504  3381               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  7433  007506  3380               	rrcf	___lmul@multiplier& (0+255),f,b
  7434  007508  5180               	movf	___lmul@multiplier& (0+255),w,b
  7435  00750A  1181               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  7436  00750C  1182               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  7437  00750E  1183               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  7438  007510  A4D8               	btfss	status,2,c
  7439  007512  D7E4               	goto	l1185
  7440                           
  7441                           ; BSR set to: 0
  7442  007514  C088  F080         	movff	___lmul@product,?___lmul
  7443  007518  C089  F081         	movff	___lmul@product+1,?___lmul+1
  7444  00751C  C08A  F082         	movff	___lmul@product+2,?___lmul+2
  7445  007520  C08B  F083         	movff	___lmul@product+3,?___lmul+3
  7446                           
  7447                           ; BSR set to: 0
  7448  007524  0012               	return		;funcret
  7449  007526  FFFF               	dw	65535	; errata NOP
  7450  007528                     __end_of___lmul:
  7451                           	opt stack 0
  7452                           tblptru	equ	0xFF8
  7453                           tblptrh	equ	0xFF7
  7454                           tblptrl	equ	0xFF6
  7455                           tablat	equ	0xFF5
  7456                           prodh	equ	0xFF4
  7457                           prodl	equ	0xFF3
  7458                           postinc0	equ	0xFEE
  7459                           wreg	equ	0xFE8
  7460                           postdec1	equ	0xFE5
  7461                           fsr1l	equ	0xFE1
  7462                           indf2	equ	0xFDF
  7463                           postinc2	equ	0xFDE
  7464                           postdec2	equ	0xFDD
  7465                           fsr2h	equ	0xFDA
  7466                           fsr2l	equ	0xFD9
  7467                           status	equ	0xFD8
  7468                           
  7469 ;; *************** function ___aldiv *****************
  7470 ;; Defined at:
  7471 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  7472 ;; Parameters:    Size  Location     Type
  7473 ;;  dividend        4    0[BANK0 ] long 
  7474 ;;  divisor         4    4[BANK0 ] long 
  7475 ;; Auto vars:     Size  Location     Type
  7476 ;;  quotient        4   10[BANK0 ] long 
  7477 ;;  sign            1    9[BANK0 ] unsigned char 
  7478 ;;  counter         1    8[BANK0 ] unsigned char 
  7479 ;; Return value:  Size  Location     Type
  7480 ;;                  4    0[BANK0 ] long 
  7481 ;; Registers used:
  7482 ;;		wreg, status,2, status,0
  7483 ;; Tracked objects:
  7484 ;;		On entry : 0/0
  7485 ;;		On exit  : 0/0
  7486 ;;		Unchanged: 0/0
  7487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7488 ;;      Params:         0       8       0       0       0       0       0
  7489 ;;      Locals:         0       6       0       0       0       0       0
  7490 ;;      Temps:          0       0       0       0       0       0       0
  7491 ;;      Totals:         0      14       0       0       0       0       0
  7492 ;;Total ram usage:       14 bytes
  7493 ;; Hardware stack levels used:    1
  7494 ;; Hardware stack levels required when called:    6
  7495 ;; This function calls:
  7496 ;;		Nothing
  7497 ;; This function is called by:
  7498 ;;		_map
  7499 ;; This function uses a non-reentrant model
  7500 ;;
  7501                           
  7502                           	psect	text17
  7503  00380E                     __ptext17:
  7504                           	opt stack 0
  7505  00380E                     ___aldiv:
  7506                           	opt stack 0
  7507  00380E  FFFF               	dw	65535	; assembler added errata NOP
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;incstack = 0
  7511  003810  0E00               	movlw	0
  7512  003812  0100               	movlb	0	; () banked
  7513  003814  6F89               	movwf	___aldiv@sign& (0+255),b
  7514                           
  7515                           ; BSR set to: 0
  7516  003816  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  7517  003818  D00A               	goto	l1229
  7518                           
  7519                           ; BSR set to: 0
  7520  00381A  1F87               	comf	(___aldiv@divisor+3)& (0+255),f,b
  7521  00381C  1F86               	comf	(___aldiv@divisor+2)& (0+255),f,b
  7522  00381E  1F85               	comf	(___aldiv@divisor+1)& (0+255),f,b
  7523  003820  6D84               	negf	___aldiv@divisor& (0+255),b
  7524  003822  0E00               	movlw	0
  7525  003824  2385               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  7526  003826  2386               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  7527  003828  2387               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  7528                           
  7529                           ; BSR set to: 0
  7530  00382A  0E01               	movlw	1
  7531  00382C  6F89               	movwf	___aldiv@sign& (0+255),b
  7532  00382E                     l1229:
  7533  00382E  FFFF               	dw	65535	; assembler added errata NOP
  7534                           
  7535                           ; BSR set to: 0
  7536                           
  7537                           ; BSR set to: 0
  7538  003830  AF83               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  7539  003832  D00A               	goto	l1230
  7540                           
  7541                           ; BSR set to: 0
  7542  003834  1F83               	comf	(___aldiv@dividend+3)& (0+255),f,b
  7543  003836  1F82               	comf	(___aldiv@dividend+2)& (0+255),f,b
  7544  003838  1F81               	comf	(___aldiv@dividend+1)& (0+255),f,b
  7545  00383A  6D80               	negf	___aldiv@dividend& (0+255),b
  7546  00383C  0E00               	movlw	0
  7547  00383E  2381               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  7548  003840  2382               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  7549  003842  2383               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  7550                           
  7551                           ; BSR set to: 0
  7552  003844  0E01               	movlw	1
  7553  003846  1B89               	xorwf	___aldiv@sign& (0+255),f,b
  7554  003848                     l1230:
  7555  003848  FFFF               	dw	65535	; assembler added errata NOP
  7556                           
  7557                           ; BSR set to: 0
  7558                           
  7559                           ; BSR set to: 0
  7560  00384A  0E00               	movlw	0
  7561  00384C  6F8A               	movwf	___aldiv@quotient& (0+255),b
  7562  00384E  0E00               	movlw	0
  7563  003850  6F8B               	movwf	(___aldiv@quotient+1)& (0+255),b
  7564  003852  0E00               	movlw	0
  7565  003854  6F8C               	movwf	(___aldiv@quotient+2)& (0+255),b
  7566  003856  0E00               	movlw	0
  7567  003858  6F8D               	movwf	(___aldiv@quotient+3)& (0+255),b
  7568                           
  7569                           ; BSR set to: 0
  7570  00385A  5184               	movf	___aldiv@divisor& (0+255),w,b
  7571  00385C  1185               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  7572  00385E  1186               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  7573  003860  1187               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  7574  003862  B4D8               	btfsc	status,2,c
  7575  003864  D02E               	goto	l1237
  7576                           
  7577                           ; BSR set to: 0
  7578  003866  0E01               	movlw	1
  7579  003868  6F88               	movwf	___aldiv@counter& (0+255),b
  7580  00386A  D007               	goto	l1232
  7581  00386C  FFFF               	dw	65535	; assembler added errata NOP
  7582                           
  7583                           ; BSR set to: 0
  7584                           
  7585                           ; BSR set to: 0
  7586  00386E  90D8               	bcf	status,0,c
  7587  003870  3784               	rlcf	___aldiv@divisor& (0+255),f,b
  7588  003872  3785               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  7589  003874  3786               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  7590  003876  3787               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  7591  003878  2B88               	incf	___aldiv@counter& (0+255),f,b
  7592  00387A                     l1232:
  7593  00387A  FFFF               	dw	65535	; assembler added errata NOP
  7594                           
  7595                           ; BSR set to: 0
  7596                           
  7597                           ; BSR set to: 0
  7598  00387C  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  7599  00387E  D7F6               	goto	l1233
  7600  003880                     u5670:
  7601  003880  FFFF               	dw	65535	; assembler added errata NOP
  7602                           
  7603                           ; BSR set to: 0
  7604                           
  7605                           ; BSR set to: 0
  7606                           
  7607                           ; BSR set to: 0
  7608  003882  90D8               	bcf	status,0,c
  7609  003884  378A               	rlcf	___aldiv@quotient& (0+255),f,b
  7610  003886  378B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  7611  003888  378C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  7612  00388A  378D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  7613                           
  7614                           ; BSR set to: 0
  7615  00388C  5184               	movf	___aldiv@divisor& (0+255),w,b
  7616  00388E  5D80               	subwf	___aldiv@dividend& (0+255),w,b
  7617  003890  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
  7618  003892  5981               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  7619  003894  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
  7620  003896  5982               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  7621  003898  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
  7622  00389A  5983               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  7623  00389C  A0D8               	btfss	status,0,c
  7624  00389E  D009               	goto	l1236
  7625                           
  7626                           ; BSR set to: 0
  7627  0038A0  5184               	movf	___aldiv@divisor& (0+255),w,b
  7628  0038A2  5F80               	subwf	___aldiv@dividend& (0+255),f,b
  7629  0038A4  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
  7630  0038A6  5B81               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  7631  0038A8  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
  7632  0038AA  5B82               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  7633  0038AC  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
  7634  0038AE  5B83               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  7635                           
  7636                           ; BSR set to: 0
  7637  0038B0  818A               	bsf	___aldiv@quotient& (0+255),0,b
  7638  0038B2                     l1236:
  7639  0038B2  FFFF               	dw	65535	; assembler added errata NOP
  7640                           
  7641                           ; BSR set to: 0
  7642                           
  7643                           ; BSR set to: 0
  7644  0038B4  90D8               	bcf	status,0,c
  7645  0038B6  3387               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  7646  0038B8  3386               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  7647  0038BA  3385               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  7648  0038BC  3384               	rrcf	___aldiv@divisor& (0+255),f,b
  7649                           
  7650                           ; BSR set to: 0
  7651  0038BE  2F88               	decfsz	___aldiv@counter& (0+255),f,b
  7652  0038C0  D7DF               	goto	u5670
  7653  0038C2                     l1237:
  7654  0038C2  FFFF               	dw	65535	; assembler added errata NOP
  7655                           
  7656                           ; BSR set to: 0
  7657                           
  7658                           ; BSR set to: 0
  7659                           
  7660                           ; BSR set to: 0
  7661  0038C4  5189               	movf	___aldiv@sign& (0+255),w,b
  7662  0038C6  B4D8               	btfsc	status,2,c
  7663  0038C8  D008               	goto	l1238
  7664                           
  7665                           ; BSR set to: 0
  7666  0038CA  1F8D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  7667  0038CC  1F8C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  7668  0038CE  1F8B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  7669  0038D0  6D8A               	negf	___aldiv@quotient& (0+255),b
  7670  0038D2  0E00               	movlw	0
  7671  0038D4  238B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  7672  0038D6  238C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  7673  0038D8  238D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  7674  0038DA                     l1238:
  7675  0038DA  FFFF               	dw	65535	; assembler added errata NOP
  7676                           
  7677                           ; BSR set to: 0
  7678                           
  7679                           ; BSR set to: 0
  7680  0038DC  C08A  F080         	movff	___aldiv@quotient,?___aldiv
  7681  0038E0  C08B  F081         	movff	___aldiv@quotient+1,?___aldiv+1
  7682  0038E4  C08C  F082         	movff	___aldiv@quotient+2,?___aldiv+2
  7683  0038E8  C08D  F083         	movff	___aldiv@quotient+3,?___aldiv+3
  7684                           
  7685                           ; BSR set to: 0
  7686                           
  7687                           ; BSR set to: 0
  7688  0038EC  0012               	return		;funcret
  7689  0038EE  FFFF               	dw	65535	; errata NOP
  7690  0038F0                     __end_of___aldiv:
  7691                           	opt stack 0
  7692                           tblptru	equ	0xFF8
  7693                           tblptrh	equ	0xFF7
  7694                           tblptrl	equ	0xFF6
  7695                           tablat	equ	0xFF5
  7696                           prodh	equ	0xFF4
  7697                           prodl	equ	0xFF3
  7698                           postinc0	equ	0xFEE
  7699                           wreg	equ	0xFE8
  7700                           postdec1	equ	0xFE5
  7701                           fsr1l	equ	0xFE1
  7702                           indf2	equ	0xFDF
  7703                           postinc2	equ	0xFDE
  7704                           postdec2	equ	0xFDD
  7705                           fsr2h	equ	0xFDA
  7706                           fsr2l	equ	0xFD9
  7707                           status	equ	0xFD8
  7708                           
  7709 ;; *************** function _lerParametros *****************
  7710 ;; Defined at:
  7711 ;;		line 9 in file "util.h"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;		None
  7714 ;; Auto vars:     Size  Location     Type
  7715 ;;  i               1   21[BANK0 ] unsigned char 
  7716 ;;  verifica_mem    1   20[BANK0 ] unsigned char 
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  1    wreg      void 
  7719 ;; Registers used:
  7720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7721 ;; Tracked objects:
  7722 ;;		On entry : 0/0
  7723 ;;		On exit  : 0/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7726 ;;      Params:         0       0       0       0       0       0       0
  7727 ;;      Locals:         0       2       0       0       0       0       0
  7728 ;;      Temps:          0       0       0       0       0       0       0
  7729 ;;      Totals:         0       2       0       0       0       0       0
  7730 ;;Total ram usage:        2 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; Hardware stack levels required when called:   10
  7733 ;; This function calls:
  7734 ;;		_readEEPROM16_ext
  7735 ;;		_readEEPROM_ext
  7736 ;;		_writeEEPROM_ext
  7737 ;; This function is called by:
  7738 ;;		_main
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           	psect	text18
  7743  0030A8                     __ptext18:
  7744                           	opt stack 0
  7745  0030A8                     _lerParametros:
  7746                           	opt stack 0
  7747  0030A8  FFFF               	dw	65535	; assembler added errata NOP
  7748                           
  7749                           ;util.h: 10: char i = 0;
  7750                           
  7751                           ; BSR set to: 0
  7752                           ;incstack = 0
  7753  0030AA  0E00               	movlw	0
  7754  0030AC  0100               	movlb	0	; () banked
  7755  0030AE  6F95               	movwf	lerParametros@i& (0+255),b
  7756                           
  7757                           ;util.h: 11: char verifica_memoria_nova = 0;
  7758  0030B0  0E00               	movlw	0
  7759  0030B2  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  7760                           
  7761                           ; BSR set to: 0
  7762                           ;util.h: 12: verifica_memoria_nova = readEEPROM_ext(12);
  7763  0030B4  0E0C               	movlw	12
  7764  0030B6  ECDE  F039         	call	_readEEPROM_ext
  7765  0030BA  0100               	movlb	0	; () banked
  7766  0030BC  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;util.h: 13: if (verifica_memoria_nova != 20) {
  7770  0030BE  0E14               	movlw	20
  7771  0030C0  1994               	xorwf	lerParametros@verifica_memoria_nova& (0+255),w,b
  7772  0030C2  B4D8               	btfsc	status,2,c
  7773  0030C4  D016               	goto	l676
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;util.h: 14: for (i = 0; i < 100; i++) {
  7777  0030C6  0E00               	movlw	0
  7778  0030C8  6F95               	movwf	lerParametros@i& (0+255),b
  7779  0030CA                     l7095:
  7780  0030CA  FFFF               	dw	65535	; assembler added errata NOP
  7781                           
  7782                           ; BSR set to: 0
  7783  0030CC  0E63               	movlw	99
  7784  0030CE  6595               	cpfsgt	lerParametros@i& (0+255),b
  7785  0030D0  D001               	goto	l677
  7786  0030D2  D009               	goto	u7570
  7787  0030D4                     l677:
  7788  0030D4  FFFF               	dw	65535	; assembler added errata NOP
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;util.h: 15: writeEEPROM_ext(i, 0);
  7792                           
  7793                           ; BSR set to: 0
  7794  0030D6  0E00               	movlw	0
  7795  0030D8  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  7796  0030DA  5195               	movf	lerParametros@i& (0+255),w,b
  7797  0030DC  EC1F  F039         	call	_writeEEPROM_ext
  7798  0030E0  0100               	movlb	0	; () banked
  7799  0030E2  2B95               	incf	lerParametros@i& (0+255),f,b
  7800  0030E4  D7F2               	goto	l7095
  7801  0030E6                     u7570:
  7802  0030E6  FFFF               	dw	65535	; assembler added errata NOP
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;util.h: 16: }
  7806                           ;util.h: 17: writeEEPROM_ext(12, 20);
  7807                           
  7808                           ; BSR set to: 0
  7809  0030E8  0E14               	movlw	20
  7810  0030EA  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  7811  0030EC  0E0C               	movlw	12
  7812  0030EE  EC1F  F039         	call	_writeEEPROM_ext
  7813  0030F2                     l676:
  7814  0030F2  FFFF               	dw	65535	; assembler added errata NOP
  7815                           
  7816                           ;util.h: 18: }
  7817                           ;util.h: 20: sp_jockey = readEEPROM_ext(0);
  7818  0030F4  0E00               	movlw	0
  7819  0030F6  ECDE  F039         	call	_readEEPROM_ext
  7820  0030FA  0100               	movlb	0	; () banked
  7821  0030FC  6FE3               	movwf	_sp_jockey& (0+255),b
  7822                           
  7823                           ;util.h: 21: sp_principal = readEEPROM_ext(1);
  7824  0030FE  0E01               	movlw	1
  7825  003100  ECDE  F039         	call	_readEEPROM_ext
  7826  003104  0100               	movlb	0	; () banked
  7827  003106  6FE2               	movwf	_sp_principal& (0+255),b
  7828                           
  7829                           ;util.h: 22: sp_estacionaria = readEEPROM_ext(2);
  7830  003108  0E02               	movlw	2
  7831  00310A  ECDE  F039         	call	_readEEPROM_ext
  7832  00310E  0100               	movlb	0	; () banked
  7833  003110  6FE1               	movwf	_sp_estacionaria& (0+255),b
  7834                           
  7835                           ;util.h: 23: horimetro = readEEPROM16_ext(8);
  7836  003112  0E08               	movlw	8
  7837  003114  EC72  F037         	call	_readEEPROM16_ext
  7838  003118  C08E  F10A         	movff	?_readEEPROM16_ext,_horimetro
  7839  00311C  C08F  F10B         	movff	?_readEEPROM16_ext+1,_horimetro+1
  7840                           
  7841                           ;util.h: 24: sp_pressao_rede = readEEPROM_ext(4);
  7842  003120  0E04               	movlw	4
  7843  003122  ECDE  F039         	call	_readEEPROM_ext
  7844  003126  0100               	movlb	0	; () banked
  7845  003128  6FE4               	movwf	_sp_pressao_rede& (0+255),b
  7846                           
  7847                           ;util.h: 25: intervalo_teste_dia = readEEPROM_ext(6);
  7848  00312A  0E06               	movlw	6
  7849  00312C  ECDE  F039         	call	_readEEPROM_ext
  7850  003130  0100               	movlb	0	; () banked
  7851  003132  6FFD               	movwf	_intervalo_teste_dia& (0+255),b
  7852                           
  7853                           ;util.h: 26: tempo_limite_estacionaria = readEEPROM_ext(7);
  7854  003134  0E07               	movlw	7
  7855  003136  ECDE  F039         	call	_readEEPROM_ext
  7856  00313A  0100               	movlb	0	; () banked
  7857  00313C  6FE6               	movwf	_tempo_limite_estacionaria& (0+255),b
  7858                           
  7859                           ;util.h: 27: dias_restante_teste = readEEPROM_ext(10);
  7860  00313E  0E0A               	movlw	10
  7861  003140  ECDE  F039         	call	_readEEPROM_ext
  7862  003144  0100               	movlb	0	; () banked
  7863  003146  6FE8               	movwf	_dias_restante_teste& (0+255),b
  7864                           
  7865                           ;util.h: 28: horario_de_teste = readEEPROM_ext(11);
  7866  003148  0E0B               	movlw	11
  7867  00314A  ECDE  F039         	call	_readEEPROM_ext
  7868  00314E  0100               	movlb	0	; () banked
  7869  003150  6FE7               	movwf	_horario_de_teste& (0+255),b
  7870                           
  7871                           ;util.h: 29: tempo_limite_teste_estacionaria = readEEPROM_ext(13);
  7872  003152  0E0D               	movlw	13
  7873  003154  ECDE  F039         	call	_readEEPROM_ext
  7874  003158  0100               	movlb	0	; () banked
  7875  00315A  6FE5               	movwf	_tempo_limite_teste_estacionaria& (0+255),b
  7876                           
  7877                           ;util.h: 31: habilitaTesteAutomatico = readEEPROM_ext(15);
  7878  00315C  0E0F               	movlw	15
  7879  00315E  ECDE  F039         	call	_readEEPROM_ext
  7880  003162  0100               	movlb	0	; () banked
  7881  003164  6FEF               	movwf	_habilitaTesteAutomatico& (0+255),b
  7882                           
  7883                           ; BSR set to: 0
  7884                           ;util.h: 33: for (i = 0; i < 11; i++) {
  7885  003166  0E00               	movlw	0
  7886  003168  6F95               	movwf	lerParametros@i& (0+255),b
  7887  00316A                     l7109:
  7888  00316A  FFFF               	dw	65535	; assembler added errata NOP
  7889                           
  7890                           ; BSR set to: 0
  7891  00316C  0E0A               	movlw	10
  7892  00316E  6595               	cpfsgt	lerParametros@i& (0+255),b
  7893  003170  D001               	goto	l679
  7894  003172  D011               	goto	u7590
  7895  003174                     l679:
  7896  003174  FFFF               	dw	65535	; assembler added errata NOP
  7897                           
  7898                           ; BSR set to: 0
  7899                           ;util.h: 34: tel1[i] = readEEPROM_ext(20 + i);
  7900                           
  7901                           ; BSR set to: 0
  7902  003176  5195               	movf	lerParametros@i& (0+255),w,b
  7903  003178  0D01               	mullw	1
  7904  00317A  0ECE               	movlw	low _tel1
  7905  00317C  24F3               	addwf	prodl,w,c
  7906  00317E  6ED9               	movwf	fsr2l,c
  7907  003180  0E01               	movlw	high _tel1
  7908  003182  20F4               	addwfc	prodh,w,c
  7909  003184  6EDA               	movwf	fsr2h,c
  7910  003186  5195               	movf	lerParametros@i& (0+255),w,b
  7911  003188  0F14               	addlw	20
  7912  00318A  ECDE  F039         	call	_readEEPROM_ext
  7913  00318E  6EDF               	movwf	indf2,c
  7914  003190  0100               	movlb	0	; () banked
  7915  003192  2B95               	incf	lerParametros@i& (0+255),f,b
  7916  003194  D7EA               	goto	l7109
  7917  003196                     u7590:
  7918  003196  FFFF               	dw	65535	; assembler added errata NOP
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;util.h: 35: }
  7922                           ;util.h: 36: for (i = 0; i < 11; i++) {
  7923                           
  7924                           ; BSR set to: 0
  7925  003198  0E00               	movlw	0
  7926  00319A  6F95               	movwf	lerParametros@i& (0+255),b
  7927  00319C                     l7121:
  7928  00319C  FFFF               	dw	65535	; assembler added errata NOP
  7929                           
  7930                           ; BSR set to: 0
  7931  00319E  0E0A               	movlw	10
  7932  0031A0  6595               	cpfsgt	lerParametros@i& (0+255),b
  7933  0031A2  D001               	goto	l681
  7934  0031A4  D011               	goto	u7610
  7935  0031A6                     l681:
  7936  0031A6  FFFF               	dw	65535	; assembler added errata NOP
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;util.h: 37: tel2[i] = readEEPROM_ext(40 + i);
  7940                           
  7941                           ; BSR set to: 0
  7942  0031A8  5195               	movf	lerParametros@i& (0+255),w,b
  7943  0031AA  0D01               	mullw	1
  7944  0031AC  0EC2               	movlw	low _tel2
  7945  0031AE  24F3               	addwf	prodl,w,c
  7946  0031B0  6ED9               	movwf	fsr2l,c
  7947  0031B2  0E01               	movlw	high _tel2
  7948  0031B4  20F4               	addwfc	prodh,w,c
  7949  0031B6  6EDA               	movwf	fsr2h,c
  7950  0031B8  5195               	movf	lerParametros@i& (0+255),w,b
  7951  0031BA  0F28               	addlw	40
  7952  0031BC  ECDE  F039         	call	_readEEPROM_ext
  7953  0031C0  6EDF               	movwf	indf2,c
  7954  0031C2  0100               	movlb	0	; () banked
  7955  0031C4  2B95               	incf	lerParametros@i& (0+255),f,b
  7956  0031C6  D7EA               	goto	l7121
  7957  0031C8                     u7610:
  7958  0031C8  FFFF               	dw	65535	; assembler added errata NOP
  7959                           
  7960                           ; BSR set to: 0
  7961                           
  7962                           ; BSR set to: 0
  7963  0031CA  0012               	return		;funcret
  7964  0031CC  FFFF               	dw	65535	; errata NOP
  7965  0031CE                     __end_of_lerParametros:
  7966                           	opt stack 0
  7967                           tblptru	equ	0xFF8
  7968                           tblptrh	equ	0xFF7
  7969                           tblptrl	equ	0xFF6
  7970                           tablat	equ	0xFF5
  7971                           prodh	equ	0xFF4
  7972                           prodl	equ	0xFF3
  7973                           postinc0	equ	0xFEE
  7974                           wreg	equ	0xFE8
  7975                           postdec1	equ	0xFE5
  7976                           fsr1l	equ	0xFE1
  7977                           indf2	equ	0xFDF
  7978                           postinc2	equ	0xFDE
  7979                           postdec2	equ	0xFDD
  7980                           fsr2h	equ	0xFDA
  7981                           fsr2l	equ	0xFD9
  7982                           status	equ	0xFD8
  7983                           
  7984 ;; *************** function _readEEPROM16_ext *****************
  7985 ;; Defined at:
  7986 ;;		line 48 in file "eeprom.h"
  7987 ;; Parameters:    Size  Location     Type
  7988 ;;  adress          1    wreg     unsigned char 
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;  adress          1   19[BANK0 ] unsigned char 
  7991 ;;  data            2   17[BANK0 ] unsigned int 
  7992 ;; Return value:  Size  Location     Type
  7993 ;;                  2   14[BANK0 ] unsigned int 
  7994 ;; Registers used:
  7995 ;;		wreg, status,2, status,0, cstack
  7996 ;; Tracked objects:
  7997 ;;		On entry : 0/0
  7998 ;;		On exit  : 0/0
  7999 ;;		Unchanged: 0/0
  8000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8001 ;;      Params:         0       2       0       0       0       0       0
  8002 ;;      Locals:         0       3       0       0       0       0       0
  8003 ;;      Temps:          0       1       0       0       0       0       0
  8004 ;;      Totals:         0       6       0       0       0       0       0
  8005 ;;Total ram usage:        6 bytes
  8006 ;; Hardware stack levels used:    1
  8007 ;; Hardware stack levels required when called:    9
  8008 ;; This function calls:
  8009 ;;		_readEEPROM_ext
  8010 ;; This function is called by:
  8011 ;;		_lerParametros
  8012 ;; This function uses a non-reentrant model
  8013 ;;
  8014                           
  8015                           	psect	text19
  8016  006EE4                     __ptext19:
  8017                           	opt stack 0
  8018  006EE4                     _readEEPROM16_ext:
  8019                           	opt stack 0
  8020  006EE4  FFFF               	dw	65535	; assembler added errata NOP
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;incstack = 0
  8024                           ;readEEPROM16_ext@adress stored from wreg
  8025  006EE6  0100               	movlb	0	; () banked
  8026  006EE8  6F93               	movwf	readEEPROM16_ext@adress& (0+255),b
  8027                           
  8028                           ;eeprom.h: 49: unsigned int data;
  8029                           ;eeprom.h: 50: data = readEEPROM_ext(adress + 1);
  8030  006EEA  0100               	movlb	0	; () banked
  8031  006EEC  2993               	incf	readEEPROM16_ext@adress& (0+255),w,b
  8032  006EEE  ECDE  F039         	call	_readEEPROM_ext
  8033  006EF2  0100               	movlb	0	; () banked
  8034  006EF4  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  8035  006EF6  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  8036  006EF8  6F91               	movwf	readEEPROM16_ext@data& (0+255),b
  8037  006EFA  6B92               	clrf	(readEEPROM16_ext@data+1)& (0+255),b
  8038                           
  8039                           ; BSR set to: 0
  8040                           ;eeprom.h: 51: data <<= 8;
  8041  006EFC  5191               	movf	readEEPROM16_ext@data& (0+255),w,b
  8042  006EFE  6F92               	movwf	(readEEPROM16_ext@data+1)& (0+255),b
  8043  006F00  6B91               	clrf	readEEPROM16_ext@data& (0+255),b
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;eeprom.h: 52: data |= readEEPROM_ext(adress);
  8047  006F02  5193               	movf	readEEPROM16_ext@adress& (0+255),w,b
  8048  006F04  ECDE  F039         	call	_readEEPROM_ext
  8049  006F08  0100               	movlb	0	; () banked
  8050  006F0A  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  8051  006F0C  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  8052  006F0E  1391               	iorwf	readEEPROM16_ext@data& (0+255),f,b
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;eeprom.h: 53: return data;
  8056  006F10  C091  F08E         	movff	readEEPROM16_ext@data,?_readEEPROM16_ext
  8057  006F14  C092  F08F         	movff	readEEPROM16_ext@data+1,?_readEEPROM16_ext+1
  8058                           
  8059                           ; BSR set to: 0
  8060                           
  8061                           ; BSR set to: 0
  8062  006F18  0012               	return		;funcret
  8063  006F1A  FFFF               	dw	65535	; errata NOP
  8064  006F1C                     __end_of_readEEPROM16_ext:
  8065                           	opt stack 0
  8066                           tblptru	equ	0xFF8
  8067                           tblptrh	equ	0xFF7
  8068                           tblptrl	equ	0xFF6
  8069                           tablat	equ	0xFF5
  8070                           prodh	equ	0xFF4
  8071                           prodl	equ	0xFF3
  8072                           postinc0	equ	0xFEE
  8073                           wreg	equ	0xFE8
  8074                           postdec1	equ	0xFE5
  8075                           fsr1l	equ	0xFE1
  8076                           indf2	equ	0xFDF
  8077                           postinc2	equ	0xFDE
  8078                           postdec2	equ	0xFDD
  8079                           fsr2h	equ	0xFDA
  8080                           fsr2l	equ	0xFD9
  8081                           status	equ	0xFD8
  8082                           
  8083 ;; *************** function _informacoes *****************
  8084 ;; Defined at:
  8085 ;;		line 7 in file "tela_INFORMACOES.h"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;		None
  8088 ;; Auto vars:     Size  Location     Type
  8089 ;;		None
  8090 ;; Return value:  Size  Location     Type
  8091 ;;                  1    wreg      void 
  8092 ;; Registers used:
  8093 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8094 ;; Tracked objects:
  8095 ;;		On entry : 0/0
  8096 ;;		On exit  : 0/0
  8097 ;;		Unchanged: 0/0
  8098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8099 ;;      Params:         0       0       0       0       0       0       0
  8100 ;;      Locals:         0       0       0       0       0       0       0
  8101 ;;      Temps:          0       6       0       0       0       0       0
  8102 ;;      Totals:         0       6       0       0       0       0       0
  8103 ;;Total ram usage:        6 bytes
  8104 ;; Hardware stack levels used:    1
  8105 ;; Hardware stack levels required when called:    9
  8106 ;; This function calls:
  8107 ;;		_btPress
  8108 ;;		_sprintf
  8109 ;; This function is called by:
  8110 ;;		_main
  8111 ;; This function uses a non-reentrant model
  8112 ;;
  8113                           
  8114                           	psect	text20
  8115  002F80                     __ptext20:
  8116                           	opt stack 0
  8117  002F80                     _informacoes:
  8118                           	opt stack 0
  8119  002F80  FFFF               	dw	65535	; assembler added errata NOP
  8120                           
  8121                           ;tela_INFORMACOES.h: 8: sprintf(line1, "TECHNOW");
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;incstack = 0
  8125  002F82  0E99               	movlw	low _line1
  8126  002F84  0100               	movlb	0	; () banked
  8127  002F86  6FA1               	movwf	sprintf@wh& (0+255),b
  8128  002F88  0E01               	movlw	high _line1
  8129  002F8A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8130  002F8C  0E9A               	movlw	low STR_90
  8131  002F8E  6FA3               	movwf	sprintf@f& (0+255),b
  8132  002F90  0E7F               	movlw	high STR_90
  8133  002F92  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8134  002F94  EC42  F039         	call	_sprintf	;wreg free
  8135                           
  8136                           ;tela_INFORMACOES.h: 9: sprintf(line2, "Sistemas embarcados");
  8137  002F98  0E84               	movlw	low _line2
  8138  002F9A  0100               	movlb	0	; () banked
  8139  002F9C  6FA1               	movwf	sprintf@wh& (0+255),b
  8140  002F9E  0E01               	movlw	high _line2
  8141  002FA0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8142  002FA2  0EC1               	movlw	low STR_91
  8143  002FA4  6FA3               	movwf	sprintf@f& (0+255),b
  8144  002FA6  0E7C               	movlw	high STR_91
  8145  002FA8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8146  002FAA  EC42  F039         	call	_sprintf	;wreg free
  8147                           
  8148                           ;tela_INFORMACOES.h: 10: sprintf(line3, "%d-%d-%d-%d-%d-%d > %d-%d", LATAbits.LATA3, LAT
      +                          Dbits.LATD7, LATEbits.LATE0, LATEbits.LATE1, LATEbits.LATE2, LATCbits.LATC1, !PORTAbits.
      +                          RA2, !PORTAbits.RA5);
  8149  002FAE  0E6F               	movlw	low _line3
  8150  002FB0  0100               	movlb	0	; () banked
  8151  002FB2  6FA1               	movwf	sprintf@wh& (0+255),b
  8152  002FB4  0E01               	movlw	high _line3
  8153  002FB6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8154  002FB8  0EEF               	movlw	low STR_92
  8155  002FBA  6FA3               	movwf	sprintf@f& (0+255),b
  8156  002FBC  0E7B               	movlw	high STR_92
  8157  002FBE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8158  002FC0  A689               	btfss	3977,3,c	;volatile
  8159  002FC2  D003               	goto	u8070
  8160  002FC4  6BBB               	clrf	??_informacoes& (0+255),b
  8161  002FC6  2BBB               	incf	??_informacoes& (0+255),f,b
  8162  002FC8  D003               	goto	u8078
  8163  002FCA                     u8070:
  8164  002FCA  FFFF               	dw	65535	; assembler added errata NOP
  8165  002FCC  0100               	movlb	0	; () banked
  8166  002FCE  6BBB               	clrf	??_informacoes& (0+255),b
  8167  002FD0                     u8078:
  8168  002FD0  FFFF               	dw	65535	; assembler added errata NOP
  8169  002FD2  51BB               	movf	??_informacoes& (0+255),w,b
  8170  002FD4  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8171  002FD6  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  8172  002FD8  AE8C               	btfss	3980,7,c	;volatile
  8173  002FDA  D003               	goto	u8080
  8174  002FDC  6BBC               	clrf	(??_informacoes+1)& (0+255),b
  8175  002FDE  2BBC               	incf	(??_informacoes+1)& (0+255),f,b
  8176  002FE0  D003               	goto	u8088
  8177  002FE2                     u8080:
  8178  002FE2  FFFF               	dw	65535	; assembler added errata NOP
  8179  002FE4  0100               	movlb	0	; () banked
  8180  002FE6  6BBC               	clrf	(??_informacoes+1)& (0+255),b
  8181  002FE8                     u8088:
  8182  002FE8  FFFF               	dw	65535	; assembler added errata NOP
  8183  002FEA  51BC               	movf	(??_informacoes+1)& (0+255),w,b
  8184  002FEC  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  8185  002FEE  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  8186  002FF0  A08D               	btfss	3981,0,c	;volatile
  8187  002FF2  D003               	goto	u8090
  8188  002FF4  6BBD               	clrf	(??_informacoes+2)& (0+255),b
  8189  002FF6  2BBD               	incf	(??_informacoes+2)& (0+255),f,b
  8190  002FF8  D003               	goto	u8098
  8191  002FFA                     u8090:
  8192  002FFA  FFFF               	dw	65535	; assembler added errata NOP
  8193  002FFC  0100               	movlb	0	; () banked
  8194  002FFE  6BBD               	clrf	(??_informacoes+2)& (0+255),b
  8195  003000                     u8098:
  8196  003000  FFFF               	dw	65535	; assembler added errata NOP
  8197  003002  51BD               	movf	(??_informacoes+2)& (0+255),w,b
  8198  003004  6FA9               	movwf	(?_sprintf+8)& (0+255),b
  8199  003006  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  8200  003008  A28D               	btfss	3981,1,c	;volatile
  8201  00300A  D003               	goto	u8100
  8202  00300C  6BBE               	clrf	(??_informacoes+3)& (0+255),b
  8203  00300E  2BBE               	incf	(??_informacoes+3)& (0+255),f,b
  8204  003010  D003               	goto	u8108
  8205  003012                     u8100:
  8206  003012  FFFF               	dw	65535	; assembler added errata NOP
  8207  003014  0100               	movlb	0	; () banked
  8208  003016  6BBE               	clrf	(??_informacoes+3)& (0+255),b
  8209  003018                     u8108:
  8210  003018  FFFF               	dw	65535	; assembler added errata NOP
  8211  00301A  51BE               	movf	(??_informacoes+3)& (0+255),w,b
  8212  00301C  6FAB               	movwf	(?_sprintf+10)& (0+255),b
  8213  00301E  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  8214  003020  A48D               	btfss	3981,2,c	;volatile
  8215  003022  D003               	goto	u8110
  8216  003024  6BBF               	clrf	(??_informacoes+4)& (0+255),b
  8217  003026  2BBF               	incf	(??_informacoes+4)& (0+255),f,b
  8218  003028  D003               	goto	u8118
  8219  00302A                     u8110:
  8220  00302A  FFFF               	dw	65535	; assembler added errata NOP
  8221  00302C  0100               	movlb	0	; () banked
  8222  00302E  6BBF               	clrf	(??_informacoes+4)& (0+255),b
  8223  003030                     u8118:
  8224  003030  FFFF               	dw	65535	; assembler added errata NOP
  8225  003032  51BF               	movf	(??_informacoes+4)& (0+255),w,b
  8226  003034  6FAD               	movwf	(?_sprintf+12)& (0+255),b
  8227  003036  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  8228  003038  A28B               	btfss	3979,1,c	;volatile
  8229  00303A  D003               	goto	u8120
  8230  00303C  6BC0               	clrf	(??_informacoes+5)& (0+255),b
  8231  00303E  2BC0               	incf	(??_informacoes+5)& (0+255),f,b
  8232  003040  D003               	goto	u8128
  8233  003042                     u8120:
  8234  003042  FFFF               	dw	65535	; assembler added errata NOP
  8235  003044  0100               	movlb	0	; () banked
  8236  003046  6BC0               	clrf	(??_informacoes+5)& (0+255),b
  8237  003048                     u8128:
  8238  003048  FFFF               	dw	65535	; assembler added errata NOP
  8239  00304A  51C0               	movf	(??_informacoes+5)& (0+255),w,b
  8240  00304C  6FAF               	movwf	(?_sprintf+14)& (0+255),b
  8241  00304E  6BB0               	clrf	(?_sprintf+15)& (0+255),b
  8242  003050  B480               	btfsc	3968,2,c	;volatile
  8243  003052  D002               	goto	u8130
  8244  003054  0E01               	movlw	1
  8245  003056  D002               	goto	u8140
  8246  003058                     u8130:
  8247  003058  FFFF               	dw	65535	; assembler added errata NOP
  8248  00305A  0E00               	movlw	0
  8249  00305C                     u8140:
  8250  00305C  FFFF               	dw	65535	; assembler added errata NOP
  8251  00305E  6FB1               	movwf	(?_sprintf+16)& (0+255),b
  8252  003060  6BB2               	clrf	(?_sprintf+17)& (0+255),b
  8253  003062  BA80               	btfsc	3968,5,c	;volatile
  8254  003064  D002               	goto	u8150
  8255  003066  0E01               	movlw	1
  8256  003068  D002               	goto	u8160
  8257  00306A                     u8150:
  8258  00306A  FFFF               	dw	65535	; assembler added errata NOP
  8259  00306C  0E00               	movlw	0
  8260  00306E                     u8160:
  8261  00306E  FFFF               	dw	65535	; assembler added errata NOP
  8262  003070  6FB3               	movwf	(?_sprintf+18)& (0+255),b
  8263  003072  6BB4               	clrf	(?_sprintf+19)& (0+255),b
  8264  003074  EC42  F039         	call	_sprintf	;wreg free
  8265                           
  8266                           ;tela_INFORMACOES.h: 11: sprintf(line4, "versao - %s", "Jul 18 2020");
  8267  003078  0E5A               	movlw	low _line4
  8268  00307A  0100               	movlb	0	; () banked
  8269  00307C  6FA1               	movwf	sprintf@wh& (0+255),b
  8270  00307E  0E01               	movlw	high _line4
  8271  003080  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8272  003082  0EF5               	movlw	low STR_93
  8273  003084  6FA3               	movwf	sprintf@f& (0+255),b
  8274  003086  0E7E               	movlw	high STR_93
  8275  003088  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8276  00308A  0EB9               	movlw	low STR_15
  8277  00308C  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8278  00308E  0E7E               	movlw	high STR_15
  8279  003090  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8280  003092  EC42  F039         	call	_sprintf	;wreg free
  8281                           
  8282                           ;tela_INFORMACOES.h: 13: if (btPress(1)) {
  8283  003096  0E01               	movlw	1
  8284  003098  ECE4  F03B         	call	_btPress
  8285  00309C  0900               	iorlw	0
  8286  00309E  A4D8               	btfss	status,2,c
  8287                           
  8288                           ;tela_INFORMACOES.h: 14: menu_posi = _menu_posi;
  8289  0030A0  C0DE  F0DF         	movff	__menu_posi,_menu_posi
  8290  0030A4  0012               	return		;funcret
  8291  0030A6  FFFF               	dw	65535	; errata NOP
  8292  0030A8                     __end_of_informacoes:
  8293                           	opt stack 0
  8294                           tblptru	equ	0xFF8
  8295                           tblptrh	equ	0xFF7
  8296                           tblptrl	equ	0xFF6
  8297                           tablat	equ	0xFF5
  8298                           prodh	equ	0xFF4
  8299                           prodl	equ	0xFF3
  8300                           postinc0	equ	0xFEE
  8301                           wreg	equ	0xFE8
  8302                           postdec1	equ	0xFE5
  8303                           fsr1l	equ	0xFE1
  8304                           indf2	equ	0xFDF
  8305                           postinc2	equ	0xFDE
  8306                           postdec2	equ	0xFDD
  8307                           fsr2h	equ	0xFDA
  8308                           fsr2l	equ	0xFD9
  8309                           status	equ	0xFD8
  8310                           
  8311 ;; *************** function _getSinalSIM800L *****************
  8312 ;; Defined at:
  8313 ;;		line 13 in file "comunicacao.h"
  8314 ;; Parameters:    Size  Location     Type
  8315 ;;		None
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;  sinal           2   78[BANK0 ] int 
  8318 ;; Return value:  Size  Location     Type
  8319 ;;                  1    wreg      void 
  8320 ;; Registers used:
  8321 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8327 ;;      Params:         0       0       0       0       0       0       0
  8328 ;;      Locals:         0       2       0       0       0       0       0
  8329 ;;      Temps:          0       2       0       0       0       0       0
  8330 ;;      Totals:         0       4       0       0       0       0       0
  8331 ;;Total ram usage:        4 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:   10
  8334 ;; This function calls:
  8335 ;;		_aguardaBuffer
  8336 ;;		_atoi
  8337 ;;		_delay
  8338 ;;		_getSerial
  8339 ;;		_limparBuffer
  8340 ;;		_printf
  8341 ;;		_writeChar
  8342 ;; This function is called by:
  8343 ;;		_main
  8344 ;; This function uses a non-reentrant model
  8345 ;;
  8346                           
  8347                           	psect	text21
  8348  00298C                     __ptext21:
  8349                           	opt stack 0
  8350  00298C                     _getSinalSIM800L:
  8351                           	opt stack 0
  8352  00298C  FFFF               	dw	65535	; assembler added errata NOP
  8353                           
  8354                           ;comunicacao.h: 14: switch (etapaComunicacao) {
  8355                           
  8356                           ;incstack = 0
  8357  00298E  D0C9               	goto	l314
  8358  002990  FFFF               	dw	65535	; assembler added errata NOP
  8359                           
  8360                           ;comunicacao.h: 16: limparBuffer();
  8361  002992  EC3B  F037         	call	_limparBuffer	;wreg free
  8362                           
  8363                           ;comunicacao.h: 17: printf("AT+CSQ\r\n");
  8364  002996  0E7F               	movlw	low STR_3
  8365  002998  0100               	movlb	0	; () banked
  8366  00299A  6FA1               	movwf	printf@f& (0+255),b
  8367  00299C  0E7F               	movlw	high STR_3
  8368  00299E  6FA2               	movwf	(printf@f+1)& (0+255),b
  8369  0029A0  EC21  F038         	call	_printf	;wreg free
  8370                           
  8371                           ;comunicacao.h: 18: timerEtapaComunicacao = 5;
  8372  0029A4  0E05               	movlw	5
  8373  0029A6  0100               	movlb	0	; () banked
  8374  0029A8  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;comunicacao.h: 19: etapaComunicacao = 1;
  8378  0029AA  0E00               	movlw	0
  8379  0029AC  6E63               	movwf	_etapaComunicacao+1,c
  8380  0029AE  0E01               	movlw	1
  8381  0029B0  6E62               	movwf	_etapaComunicacao,c
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;comunicacao.h: 20: telefoneSelecionado = 0;
  8385  0029B2  0E00               	movlw	0
  8386  0029B4  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  8387                           
  8388                           ;comunicacao.h: 21: break;
  8389  0029B6  D0C7               	goto	l316
  8390  0029B8  FFFF               	dw	65535	; assembler added errata NOP
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;comunicacao.h: 23: if (!timerEtapaComunicacao) {
  8394                           
  8395                           ; BSR set to: 0
  8396  0029BA  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  8397  0029BC  A4D8               	btfss	status,2,c
  8398  0029BE  D03C               	goto	l322
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;comunicacao.h: 24: printf("AT\r\n");
  8402  0029C0  0EDD               	movlw	low STR_4
  8403  0029C2  6FA1               	movwf	printf@f& (0+255),b
  8404  0029C4  0E7F               	movlw	high STR_4
  8405  0029C6  6FA2               	movwf	(printf@f+1)& (0+255),b
  8406  0029C8  EC21  F038         	call	_printf	;wreg free
  8407                           
  8408                           ;comunicacao.h: 25: delay(100);
  8409  0029CC  0E00               	movlw	0
  8410  0029CE  0100               	movlb	0	; () banked
  8411  0029D0  6F81               	movwf	(delay@x+1)& (0+255),b
  8412  0029D2  0E64               	movlw	100
  8413  0029D4  6F80               	movwf	delay@x& (0+255),b
  8414  0029D6  EC20  F037         	call	_delay	;wreg free
  8415                           
  8416                           ;comunicacao.h: 26: if (aguardaBuffer("OK")) {
  8417  0029DA  0EF9               	movlw	low STR_5
  8418  0029DC  0100               	movlb	0	; () banked
  8419  0029DE  6F93               	movwf	aguardaBuffer@str& (0+255),b
  8420  0029E0  0E7F               	movlw	high STR_5
  8421  0029E2  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  8422  0029E4  EC03  F038         	call	_aguardaBuffer	;wreg free
  8423  0029E8  0900               	iorlw	0
  8424  0029EA  B4D8               	btfsc	status,2,c
  8425  0029EC  D00D               	goto	l319
  8426                           
  8427                           ;comunicacao.h: 27: etapaComunicacao = 0;
  8428  0029EE  0E00               	movlw	0
  8429  0029F0  6E63               	movwf	_etapaComunicacao+1,c
  8430  0029F2  0E00               	movlw	0
  8431  0029F4  6E62               	movwf	_etapaComunicacao,c
  8432                           
  8433                           ;comunicacao.h: 28: tentativasVerificarGSM = 0;
  8434  0029F6  0E00               	movlw	0
  8435  0029F8  6E76               	movwf	_tentativasVerificarGSM,c
  8436                           
  8437                           ;comunicacao.h: 30: if (codigoErro == 2) {
  8438  0029FA  0E02               	movlw	2
  8439  0029FC  0100               	movlb	0	; () banked
  8440  0029FE  19F2               	xorwf	_codigoErro& (0+255),w,b
  8441  002A00  A4D8               	btfss	status,2,c
  8442  002A02  D01A               	goto	l322
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;comunicacao.h: 31: codigoErro = 0;
  8446  002A04  0E00               	movlw	0
  8447  002A06  D016               	goto	L11
  8448  002A08                     l319:
  8449  002A08  FFFF               	dw	65535	; assembler added errata NOP
  8450                           
  8451                           ;comunicacao.h: 35: etapaComunicacao = 0;
  8452                           
  8453                           ; BSR set to: 0
  8454  002A0A  0E00               	movlw	0
  8455  002A0C  6E63               	movwf	_etapaComunicacao+1,c
  8456  002A0E  0E00               	movlw	0
  8457  002A10  6E62               	movwf	_etapaComunicacao,c
  8458                           
  8459                           ;comunicacao.h: 36: writeChar(0x1A);
  8460  002A12  0E1A               	movlw	26
  8461  002A14  0100               	movlb	0	; () banked
  8462  002A16  6F80               	movwf	writeChar@hex& (0+255),b
  8463  002A18  0E00               	movlw	0
  8464  002A1A  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  8465  002A1C  ECE8  F035         	call	_writeChar	;wreg free
  8466                           
  8467                           ;comunicacao.h: 37: tentativasVerificarGSM++;
  8468  002A20  2A76               	incf	_tentativasVerificarGSM,f,c
  8469                           
  8470                           ;comunicacao.h: 39: if (tentativasVerificarGSM >= 3) {
  8471  002A22  0E02               	movlw	2
  8472  002A24  6476               	cpfsgt	_tentativasVerificarGSM,c
  8473  002A26  D008               	goto	l322
  8474                           
  8475                           ;comunicacao.h: 40: tentativasVerificarGSM = 0;
  8476  002A28  0E00               	movlw	0
  8477  002A2A  6E76               	movwf	_tentativasVerificarGSM,c
  8478                           
  8479                           ;comunicacao.h: 41: intensidadeSinal = 'x';
  8480  002A2C  0E78               	movlw	120
  8481  002A2E  0100               	movlb	0	; () banked
  8482  002A30  6FFF               	movwf	_intensidadeSinal& (0+255),b
  8483                           
  8484                           ;comunicacao.h: 42: codigoErro = 2;
  8485  002A32  0E02               	movlw	2
  8486  002A34                     L11:
  8487  002A34  FFFF               	dw	65535	; assembler added errata NOP
  8488  002A36  6FF2               	movwf	_codigoErro& (0+255),b
  8489  002A38                     l322:
  8490  002A38  FFFF               	dw	65535	; assembler added errata NOP
  8491                           
  8492                           ;comunicacao.h: 43: }
  8493                           ;comunicacao.h: 44: }
  8494                           ;comunicacao.h: 45: }
  8495                           ;comunicacao.h: 46: if (aguardaBuffer("+CSQ: ")) {
  8496                           
  8497                           ; BSR set to: 0
  8498                           
  8499                           ; BSR set to: 0
  8500                           
  8501                           ; BSR set to: 0
  8502  002A3A  0EB0               	movlw	low STR_6
  8503  002A3C  0100               	movlb	0	; () banked
  8504  002A3E  6F93               	movwf	aguardaBuffer@str& (0+255),b
  8505  002A40  0E7F               	movlw	high STR_6
  8506  002A42  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  8507  002A44  EC03  F038         	call	_aguardaBuffer	;wreg free
  8508  002A48  0900               	iorlw	0
  8509  002A4A  B4D8               	btfsc	status,2,c
  8510  002A4C  D07C               	goto	l316
  8511                           
  8512                           ;comunicacao.h: 47: int sinal = atoi(getSerial("+CSQ: ", ','));
  8513  002A4E  0EB0               	movlw	low STR_6
  8514  002A50  0100               	movlb	0	; () banked
  8515  002A52  6FBB               	movwf	getSerial@str& (0+255),b
  8516  002A54  0E7F               	movlw	high STR_6
  8517  002A56  6FBC               	movwf	(getSerial@str+1)& (0+255),b
  8518  002A58  0E2C               	movlw	44
  8519  002A5A  6FBD               	movwf	getSerial@end& (0+255),b
  8520  002A5C  EC79  F019         	call	_getSerial	;wreg free
  8521  002A60  C0BB  F0C5         	movff	?_getSerial,atoi@s
  8522  002A64  C0BC  F0C6         	movff	?_getSerial+1,atoi@s+1
  8523  002A68  EC91  F01B         	call	_atoi	;wreg free
  8524  002A6C  C0C5  F0CE         	movff	?_atoi,getSinalSIM800L@sinal
  8525  002A70  C0C6  F0CF         	movff	?_atoi+1,getSinalSIM800L@sinal+1
  8526                           
  8527                           ;comunicacao.h: 48: if (sinal < 8) {
  8528  002A74  0100               	movlb	0	; () banked
  8529  002A76  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8530  002A78  D006               	goto	u6600
  8531  002A7A  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8532  002A7C  E108               	bnz	l6627
  8533  002A7E  0E08               	movlw	8
  8534  002A80  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8535  002A82  B0D8               	btfsc	status,0,c
  8536  002A84  D003               	goto	l324
  8537  002A86                     u6600:
  8538  002A86  FFFF               	dw	65535	; assembler added errata NOP
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;comunicacao.h: 49: intensidadeSinal = ' ';
  8542  002A88  0E20               	movlw	32
  8543  002A8A  D03B               	goto	L14
  8544  002A8C                     l324:
  8545  002A8C  FFFF               	dw	65535	; assembler added errata NOP
  8546  002A8E                     l6627:
  8547                           
  8548                           ; BSR set to: 0
  8549  002A8E  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8550  002A90  D011               	goto	l326
  8551  002A92  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8552  002A94  E104               	bnz	u6610
  8553  002A96  0E08               	movlw	8
  8554  002A98  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8555  002A9A  A0D8               	btfss	status,0,c
  8556  002A9C  D00B               	goto	l326
  8557  002A9E                     u6610:
  8558                           
  8559                           ; BSR set to: 0
  8560  002A9E  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8561  002AA0  D006               	goto	u6620
  8562  002AA2  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8563  002AA4  E108               	bnz	l6633
  8564  002AA6  0E0C               	movlw	12
  8565  002AA8  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8566  002AAA  B0D8               	btfsc	status,0,c
  8567  002AAC  D003               	goto	l326
  8568  002AAE                     u6620:
  8569  002AAE  FFFF               	dw	65535	; assembler added errata NOP
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;comunicacao.h: 51: intensidadeSinal = 0x02;
  8573  002AB0  0E02               	movlw	2
  8574  002AB2  D027               	goto	L14
  8575  002AB4                     l326:
  8576  002AB4  FFFF               	dw	65535	; assembler added errata NOP
  8577  002AB6                     l6633:
  8578                           
  8579                           ; BSR set to: 0
  8580  002AB6  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8581  002AB8  D011               	goto	l328
  8582  002ABA  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8583  002ABC  E104               	bnz	u6630
  8584  002ABE  0E0C               	movlw	12
  8585  002AC0  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8586  002AC2  A0D8               	btfss	status,0,c
  8587  002AC4  D00B               	goto	l328
  8588  002AC6                     u6630:
  8589                           
  8590                           ; BSR set to: 0
  8591  002AC6  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8592  002AC8  D006               	goto	u6640
  8593  002ACA  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8594  002ACC  E108               	bnz	l6639
  8595  002ACE  0E11               	movlw	17
  8596  002AD0  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8597  002AD2  B0D8               	btfsc	status,0,c
  8598  002AD4  D003               	goto	l328
  8599  002AD6                     u6640:
  8600  002AD6  FFFF               	dw	65535	; assembler added errata NOP
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;comunicacao.h: 53: intensidadeSinal = 0x03;
  8604  002AD8  0E03               	movlw	3
  8605  002ADA  D013               	goto	L14
  8606  002ADC                     l328:
  8607  002ADC  FFFF               	dw	65535	; assembler added errata NOP
  8608  002ADE                     l6639:
  8609                           
  8610                           ; BSR set to: 0
  8611  002ADE  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8612  002AE0  D012               	goto	l330
  8613  002AE2  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8614  002AE4  E104               	bnz	u6650
  8615  002AE6  0E11               	movlw	17
  8616  002AE8  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8617  002AEA  A0D8               	btfss	status,0,c
  8618  002AEC  D00C               	goto	l330
  8619  002AEE                     u6650:
  8620                           
  8621                           ; BSR set to: 0
  8622  002AEE  BFCF               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  8623  002AF0  D006               	goto	u6660
  8624  002AF2  51CF               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  8625  002AF4  E109               	bnz	l325
  8626  002AF6  0E1F               	movlw	31
  8627  002AF8  5DCE               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  8628  002AFA  B0D8               	btfsc	status,0,c
  8629  002AFC  D004               	goto	l330
  8630  002AFE                     u6660:
  8631  002AFE  FFFF               	dw	65535	; assembler added errata NOP
  8632                           
  8633                           ; BSR set to: 0
  8634                           ;comunicacao.h: 55: intensidadeSinal = 0x04;
  8635  002B00  0E04               	movlw	4
  8636  002B02                     L14:
  8637  002B02  FFFF               	dw	65535	; assembler added errata NOP
  8638  002B04  6FFF               	movwf	_intensidadeSinal& (0+255),b
  8639  002B06                     l330:
  8640  002B06  FFFF               	dw	65535	; assembler added errata NOP
  8641  002B08                     l325:
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;comunicacao.h: 56: }
  8645                           ;comunicacao.h: 57: etapaComunicacao = 0;
  8646  002B08  0E00               	movlw	0
  8647  002B0A  6E63               	movwf	_etapaComunicacao+1,c
  8648  002B0C  0E00               	movlw	0
  8649  002B0E  6E62               	movwf	_etapaComunicacao,c
  8650                           
  8651                           ;comunicacao.h: 58: timerVerificarSinal = 5;
  8652  002B10  0E05               	movlw	5
  8653  002B12  6E7E               	movwf	_timerVerificarSinal,c
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;comunicacao.h: 59: }
  8657                           ;comunicacao.h: 60: break;
  8658  002B14  D018               	goto	l316
  8659  002B16  FFFF               	dw	65535	; assembler added errata NOP
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;comunicacao.h: 62: etapaComunicacao = 0;
  8663                           
  8664                           ; BSR set to: 0
  8665  002B18  0E00               	movlw	0
  8666  002B1A  6E63               	movwf	_etapaComunicacao+1,c
  8667  002B1C  0E00               	movlw	0
  8668  002B1E  6E62               	movwf	_etapaComunicacao,c
  8669                           
  8670                           ;comunicacao.h: 63: }
  8671  002B20  D012               	goto	l316
  8672  002B22                     l314:
  8673  002B22  FFFF               	dw	65535	; assembler added errata NOP
  8674                           
  8675                           ; BSR set to: 0
  8676  002B24  C062  F0CC         	movff	_etapaComunicacao,??_getSinalSIM800L
  8677  002B28  C063  F0CD         	movff	_etapaComunicacao+1,??_getSinalSIM800L+1
  8678                           
  8679                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8680                           ; Switch size 1, requested type "space"
  8681                           ; Number of cases is 1, Range of values is 0 to 0
  8682                           ; switch strategies available:
  8683                           ; Name         Instructions Cycles
  8684                           ; simple_byte            4     3 (average)
  8685                           ;	Chosen strategy is simple_byte
  8686  002B2C  0100               	movlb	0	; () banked
  8687  002B2E  51CD               	movf	(??_getSinalSIM800L+1)& (0+255),w,b
  8688  002B30  0A00               	xorlw	0	; case 0
  8689  002B32  A4D8               	btfss	status,2,c
  8690  002B34  D7F0               	goto	l331
  8691                           
  8692                           ; BSR set to: 0
  8693                           ; Switch size 1, requested type "space"
  8694                           ; Number of cases is 2, Range of values is 0 to 1
  8695                           ; switch strategies available:
  8696                           ; Name         Instructions Cycles
  8697                           ; simple_byte            7     4 (average)
  8698                           ;	Chosen strategy is simple_byte
  8699  002B36  51CC               	movf	??_getSinalSIM800L& (0+255),w,b
  8700  002B38  0A00               	xorlw	0	; case 0
  8701  002B3A  B4D8               	btfsc	status,2,c
  8702  002B3C  D729               	goto	l315
  8703  002B3E  0A01               	xorlw	1	; case 1
  8704  002B40  B4D8               	btfsc	status,2,c
  8705  002B42  D73A               	goto	l317
  8706  002B44  D7E8               	goto	l331
  8707  002B46                     l316:
  8708  002B46  FFFF               	dw	65535	; assembler added errata NOP
  8709                           
  8710                           ; BSR set to: 0
  8711  002B48  0012               	return		;funcret
  8712  002B4A  FFFF               	dw	65535	; errata NOP
  8713  002B4C                     __end_of_getSinalSIM800L:
  8714                           	opt stack 0
  8715                           tblptru	equ	0xFF8
  8716                           tblptrh	equ	0xFF7
  8717                           tblptrl	equ	0xFF6
  8718                           tablat	equ	0xFF5
  8719                           prodh	equ	0xFF4
  8720                           prodl	equ	0xFF3
  8721                           postinc0	equ	0xFEE
  8722                           wreg	equ	0xFE8
  8723                           postdec1	equ	0xFE5
  8724                           fsr1l	equ	0xFE1
  8725                           indf2	equ	0xFDF
  8726                           postinc2	equ	0xFDE
  8727                           postdec2	equ	0xFDD
  8728                           fsr2h	equ	0xFDA
  8729                           fsr2l	equ	0xFD9
  8730                           status	equ	0xFD8
  8731                           
  8732 ;; *************** function _getSerial *****************
  8733 ;; Defined at:
  8734 ;;		line 40 in file "serial.h"
  8735 ;; Parameters:    Size  Location     Type
  8736 ;;  str             2   59[BANK0 ] PTR unsigned char 
  8737 ;;		 -> STR_7(7), 
  8738 ;;  end             1   61[BANK0 ] unsigned char 
  8739 ;; Auto vars:     Size  Location     Type
  8740 ;;  i               1   66[BANK0 ] unsigned char 
  8741 ;;  ret             2   67[BANK0 ] PTR unsigned char 
  8742 ;;		 -> NULL(0), bufferSerial(60), 
  8743 ;;  length          2   64[BANK0 ] unsigned int 
  8744 ;; Return value:  Size  Location     Type
  8745 ;;                  2   59[BANK0 ] PTR unsigned char 
  8746 ;; Registers used:
  8747 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8748 ;; Tracked objects:
  8749 ;;		On entry : 0/0
  8750 ;;		On exit  : 0/0
  8751 ;;		Unchanged: 0/0
  8752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8753 ;;      Params:         0       3       0       0       0       0       0
  8754 ;;      Locals:         0       5       0       0       0       0       0
  8755 ;;      Temps:          0       2       0       0       0       0       0
  8756 ;;      Totals:         0      10       0       0       0       0       0
  8757 ;;Total ram usage:       10 bytes
  8758 ;; Hardware stack levels used:    1
  8759 ;; Hardware stack levels required when called:    9
  8760 ;; This function calls:
  8761 ;;		_memset
  8762 ;;		_sprintf
  8763 ;;		_strlen
  8764 ;;		_strstr
  8765 ;; This function is called by:
  8766 ;;		_getSinalSIM800L
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           	psect	text22
  8771  0032F2                     __ptext22:
  8772                           	opt stack 0
  8773  0032F2                     _getSerial:
  8774                           	opt stack 0
  8775  0032F2  FFFF               	dw	65535	; assembler added errata NOP
  8776                           
  8777                           ;serial.h: 41: memset(bufferAUX, 0, sizeof (bufferAUX));
  8778                           
  8779                           ;incstack = 0
  8780  0032F4  0EAE               	movlw	low _bufferAUX
  8781  0032F6  0100               	movlb	0	; () banked
  8782  0032F8  6F80               	movwf	memset@p1& (0+255),b
  8783  0032FA  0E01               	movlw	high _bufferAUX
  8784  0032FC  6F81               	movwf	(memset@p1+1)& (0+255),b
  8785  0032FE  0E00               	movlw	0
  8786  003300  6F83               	movwf	(memset@c+1)& (0+255),b
  8787  003302  0E00               	movlw	0
  8788  003304  6F82               	movwf	memset@c& (0+255),b
  8789  003306  0E00               	movlw	0
  8790  003308  6F85               	movwf	(memset@n+1)& (0+255),b
  8791  00330A  0E14               	movlw	20
  8792  00330C  6F84               	movwf	memset@n& (0+255),b
  8793  00330E  EC8E  F037         	call	_memset	;wreg free
  8794                           
  8795                           ;serial.h: 42: unsigned int length = strlen(str);
  8796  003312  C0BB  F080         	movff	getSerial@str,strlen@s
  8797  003316  C0BC  F081         	movff	getSerial@str+1,strlen@s+1
  8798  00331A  EC34  F03A         	call	_strlen	;wreg free
  8799  00331E  C080  F0C0         	movff	?_strlen,getSerial@length
  8800  003322  C081  F0C1         	movff	?_strlen+1,getSerial@length+1
  8801                           
  8802                           ;serial.h: 43: char* ret;
  8803                           ;serial.h: 44: ret = strstr(bufferSerial, str);
  8804  003326  0E1E               	movlw	low _bufferSerial
  8805  003328  0100               	movlb	0	; () banked
  8806  00332A  6F8F               	movwf	strstr@s1& (0+255),b
  8807  00332C  0E01               	movlw	high _bufferSerial
  8808  00332E  6F90               	movwf	(strstr@s1+1)& (0+255),b
  8809  003330  C0BB  F091         	movff	getSerial@str,strstr@s2
  8810  003334  C0BC  F092         	movff	getSerial@str+1,strstr@s2+1
  8811  003338  EC6A  F01F         	call	_strstr	;wreg free
  8812  00333C  C08F  F0C3         	movff	?_strstr,getSerial@ret
  8813  003340  C090  F0C4         	movff	?_strstr+1,getSerial@ret+1
  8814                           
  8815                           ;serial.h: 45: if (ret) {
  8816  003344  0100               	movlb	0	; () banked
  8817  003346  51C3               	movf	getSerial@ret& (0+255),w,b
  8818  003348  11C4               	iorwf	(getSerial@ret+1)& (0+255),w,b
  8819  00334A  B4D8               	btfsc	status,2,c
  8820  00334C  D058               	goto	u5830
  8821                           
  8822                           ; BSR set to: 0
  8823                           ;serial.h: 46: unsigned char i = 0;
  8824  00334E  0E00               	movlw	0
  8825  003350  6FC2               	movwf	getSerial@i& (0+255),b
  8826                           
  8827                           ; BSR set to: 0
  8828                           ;serial.h: 47: for (i = length; i < strlen(ret); i++) {
  8829  003352  C0C0  F0C2         	movff	getSerial@length,getSerial@i
  8830  003356  D042               	goto	l281
  8831  003358  FFFF               	dw	65535	; assembler added errata NOP
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;serial.h: 48: if (ret[i] == end) {
  8835                           
  8836                           ; BSR set to: 0
  8837  00335A  51C2               	movf	getSerial@i& (0+255),w,b
  8838  00335C  0D01               	mullw	1
  8839  00335E  50F3               	movf	prodl,w,c
  8840  003360  25C3               	addwf	getSerial@ret& (0+255),w,b
  8841  003362  6ED9               	movwf	fsr2l,c
  8842  003364  50F4               	movf	prodh,w,c
  8843  003366  21C4               	addwfc	(getSerial@ret+1)& (0+255),w,b
  8844  003368  6EDA               	movwf	fsr2h,c
  8845  00336A  51BD               	movf	getSerial@end& (0+255),w,b
  8846  00336C  18DE               	xorwf	postinc2,w,c
  8847  00336E  A4D8               	btfss	status,2,c
  8848  003370  D017               	goto	l283
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;serial.h: 49: sprintf(bufferAUX, "%s%c", bufferAUX, '\0');
  8852  003372  0EAE               	movlw	low _bufferAUX
  8853  003374  6FA1               	movwf	sprintf@wh& (0+255),b
  8854  003376  0E01               	movlw	high _bufferAUX
  8855  003378  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8856  00337A  0EE7               	movlw	low STR_1
  8857  00337C  6FA3               	movwf	sprintf@f& (0+255),b
  8858  00337E  0E7F               	movlw	high STR_1
  8859  003380  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8860  003382  0EAE               	movlw	low _bufferAUX
  8861  003384  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8862  003386  0E01               	movlw	high _bufferAUX
  8863  003388  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8864  00338A  0E00               	movlw	0
  8865  00338C  6FA8               	movwf	(?_sprintf+7)& (0+255),b
  8866  00338E  0E00               	movlw	0
  8867  003390  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  8868  003392  EC42  F039         	call	_sprintf	;wreg free
  8869                           
  8870                           ;serial.h: 50: return bufferAUX;
  8871  003396  0EAE               	movlw	low _bufferAUX
  8872  003398  0100               	movlb	0	; () banked
  8873  00339A  6FBB               	movwf	?_getSerial& (0+255),b
  8874  00339C  0E01               	movlw	high _bufferAUX
  8875  00339E  D033               	goto	L15
  8876  0033A0                     l283:
  8877  0033A0  FFFF               	dw	65535	; assembler added errata NOP
  8878                           
  8879                           ; BSR set to: 0
  8880                           ;serial.h: 51: }
  8881                           ;serial.h: 52: sprintf(bufferAUX, "%s%c", bufferAUX, ret[i]);
  8882                           
  8883                           ; BSR set to: 0
  8884  0033A2  0EAE               	movlw	low _bufferAUX
  8885  0033A4  6FA1               	movwf	sprintf@wh& (0+255),b
  8886  0033A6  0E01               	movlw	high _bufferAUX
  8887  0033A8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8888  0033AA  0EE7               	movlw	low STR_1
  8889  0033AC  6FA3               	movwf	sprintf@f& (0+255),b
  8890  0033AE  0E7F               	movlw	high STR_1
  8891  0033B0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8892  0033B2  0EAE               	movlw	low _bufferAUX
  8893  0033B4  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8894  0033B6  0E01               	movlw	high _bufferAUX
  8895  0033B8  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8896  0033BA  51C2               	movf	getSerial@i& (0+255),w,b
  8897  0033BC  0D01               	mullw	1
  8898  0033BE  50F3               	movf	prodl,w,c
  8899  0033C0  25C3               	addwf	getSerial@ret& (0+255),w,b
  8900  0033C2  6ED9               	movwf	fsr2l,c
  8901  0033C4  50F4               	movf	prodh,w,c
  8902  0033C6  21C4               	addwfc	(getSerial@ret+1)& (0+255),w,b
  8903  0033C8  6EDA               	movwf	fsr2h,c
  8904  0033CA  50DF               	movf	indf2,w,c
  8905  0033CC  6FBE               	movwf	??_getSerial& (0+255),b
  8906  0033CE  51BE               	movf	??_getSerial& (0+255),w,b
  8907  0033D0  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  8908  0033D2  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  8909  0033D4  EC42  F039         	call	_sprintf	;wreg free
  8910  0033D8  0100               	movlb	0	; () banked
  8911  0033DA  2BC2               	incf	getSerial@i& (0+255),f,b
  8912  0033DC                     l281:
  8913  0033DC  FFFF               	dw	65535	; assembler added errata NOP
  8914                           
  8915                           ; BSR set to: 0
  8916                           
  8917                           ; BSR set to: 0
  8918  0033DE  C0C3  F080         	movff	getSerial@ret,strlen@s
  8919  0033E2  C0C4  F081         	movff	getSerial@ret+1,strlen@s+1
  8920  0033E6  EC34  F03A         	call	_strlen	;wreg free
  8921  0033EA  0100               	movlb	0	; () banked
  8922  0033EC  51C2               	movf	getSerial@i& (0+255),w,b
  8923  0033EE  6FBE               	movwf	??_getSerial& (0+255),b
  8924  0033F0  6BBF               	clrf	(??_getSerial+1)& (0+255),b
  8925  0033F2  5180               	movf	?_strlen& (0+255),w,b
  8926  0033F4  5DBE               	subwf	??_getSerial& (0+255),w,b
  8927  0033F6  5181               	movf	(?_strlen+1)& (0+255),w,b
  8928  0033F8  59BF               	subwfb	(??_getSerial+1)& (0+255),w,b
  8929  0033FA  A0D8               	btfss	status,0,c
  8930  0033FC  D7AD               	goto	l282
  8931  0033FE                     u5830:
  8932  0033FE  FFFF               	dw	65535	; assembler added errata NOP
  8933                           
  8934                           ; BSR set to: 0
  8935                           ;serial.h: 53: }
  8936                           ;serial.h: 54: }
  8937                           ;serial.h: 55: return 0;
  8938                           
  8939                           ; BSR set to: 0
  8940                           
  8941                           ; BSR set to: 0
  8942  003400  0E00               	movlw	0
  8943  003402  6FBB               	movwf	?_getSerial& (0+255),b
  8944  003404  0E00               	movlw	0
  8945  003406                     L15:
  8946  003406  FFFF               	dw	65535	; assembler added errata NOP
  8947  003408  6FBC               	movwf	(?_getSerial+1)& (0+255),b
  8948                           
  8949                           ; BSR set to: 0
  8950                           
  8951                           ; BSR set to: 0
  8952  00340A  0012               	return		;funcret
  8953  00340C  FFFF               	dw	65535	; errata NOP
  8954  00340E                     __end_of_getSerial:
  8955                           	opt stack 0
  8956                           tblptru	equ	0xFF8
  8957                           tblptrh	equ	0xFF7
  8958                           tblptrl	equ	0xFF6
  8959                           tablat	equ	0xFF5
  8960                           prodh	equ	0xFF4
  8961                           prodl	equ	0xFF3
  8962                           postinc0	equ	0xFEE
  8963                           wreg	equ	0xFE8
  8964                           postdec1	equ	0xFE5
  8965                           fsr1l	equ	0xFE1
  8966                           indf2	equ	0xFDF
  8967                           postinc2	equ	0xFDE
  8968                           postdec2	equ	0xFDD
  8969                           fsr2h	equ	0xFDA
  8970                           fsr2l	equ	0xFD9
  8971                           status	equ	0xFD8
  8972                           
  8973 ;; *************** function _atoi *****************
  8974 ;; Defined at:
  8975 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;  s               2   69[BANK0 ] PTR const unsigned char 
  8978 ;;		 -> bufferAUX(20), NULL(0), 
  8979 ;; Auto vars:     Size  Location     Type
  8980 ;;  a               2   74[BANK0 ] int 
  8981 ;;  sign            1   73[BANK0 ] unsigned char 
  8982 ;; Return value:  Size  Location     Type
  8983 ;;                  2   69[BANK0 ] int 
  8984 ;; Registers used:
  8985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8986 ;; Tracked objects:
  8987 ;;		On entry : 0/0
  8988 ;;		On exit  : 0/0
  8989 ;;		Unchanged: 0/0
  8990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8991 ;;      Params:         0       2       0       0       0       0       0
  8992 ;;      Locals:         0       3       0       0       0       0       0
  8993 ;;      Temps:          0       2       0       0       0       0       0
  8994 ;;      Totals:         0       7       0       0       0       0       0
  8995 ;;Total ram usage:        7 bytes
  8996 ;; Hardware stack levels used:    1
  8997 ;; Hardware stack levels required when called:    7
  8998 ;; This function calls:
  8999 ;;		___wmul
  9000 ;;		_isdigit
  9001 ;; This function is called by:
  9002 ;;		_getSinalSIM800L
  9003 ;; This function uses a non-reentrant model
  9004 ;;
  9005                           
  9006                           	psect	text23
  9007  003722                     __ptext23:
  9008                           	opt stack 0
  9009  003722                     _atoi:
  9010                           	opt stack 0
  9011  003722  FFFF               	dw	65535	; assembler added errata NOP
  9012                           
  9013                           ; BSR set to: 0
  9014                           ;incstack = 0
  9015  003724  D004               	goto	l1337
  9016  003726  FFFF               	dw	65535	; assembler added errata NOP
  9017  003728  0100               	movlb	0	; () banked
  9018  00372A  4BC5               	infsnz	atoi@s& (0+255),f,b
  9019  00372C  2BC6               	incf	(atoi@s+1)& (0+255),f,b
  9020  00372E                     l1337:
  9021  00372E  FFFF               	dw	65535	; assembler added errata NOP
  9022                           
  9023                           ; BSR set to: 0
  9024  003730  C0C5  FFD9         	movff	atoi@s,fsr2l
  9025  003734  C0C6  FFDA         	movff	atoi@s+1,fsr2h
  9026  003738  0E20               	movlw	32
  9027  00373A  18DE               	xorwf	postinc2,w,c
  9028  00373C  B4D8               	btfsc	status,2,c
  9029  00373E  D7F3               	goto	l1338
  9030  003740  C0C5  FFD9         	movff	atoi@s,fsr2l
  9031  003744  C0C6  FFDA         	movff	atoi@s+1,fsr2h
  9032  003748  0E09               	movlw	9
  9033  00374A  18DE               	xorwf	postinc2,w,c
  9034  00374C  B4D8               	btfsc	status,2,c
  9035  00374E  D7EB               	goto	l1338
  9036  003750  0E00               	movlw	0
  9037  003752  0100               	movlb	0	; () banked
  9038  003754  6FCB               	movwf	(atoi@a+1)& (0+255),b
  9039  003756  0E00               	movlw	0
  9040  003758  6FCA               	movwf	atoi@a& (0+255),b
  9041  00375A  0E00               	movlw	0
  9042  00375C  6FC9               	movwf	atoi@sign& (0+255),b
  9043                           
  9044                           ; BSR set to: 0
  9045  00375E  C0C5  FFD9         	movff	atoi@s,fsr2l
  9046  003762  C0C6  FFDA         	movff	atoi@s+1,fsr2h
  9047  003766  0E2D               	movlw	45
  9048  003768  18DE               	xorwf	postinc2,w,c
  9049  00376A  A4D8               	btfss	status,2,c
  9050  00376C  D002               	goto	l1340
  9051                           
  9052                           ; BSR set to: 0
  9053  00376E  2BC9               	incf	atoi@sign& (0+255),f,b
  9054  003770  D028               	goto	l5935
  9055  003772                     l1340:
  9056  003772  FFFF               	dw	65535	; assembler added errata NOP
  9057                           
  9058                           ; BSR set to: 0
  9059                           
  9060                           ; BSR set to: 0
  9061  003774  C0C5  FFD9         	movff	atoi@s,fsr2l
  9062  003778  C0C6  FFDA         	movff	atoi@s+1,fsr2h
  9063  00377C  0E2B               	movlw	43
  9064  00377E  18DE               	xorwf	postinc2,w,c
  9065  003780  A4D8               	btfss	status,2,c
  9066  003782  D022               	goto	l1343
  9067  003784  D01E               	goto	l5935
  9068  003786  FFFF               	dw	65535	; assembler added errata NOP
  9069                           
  9070                           ; BSR set to: 0
  9071  003788  C0CA  F080         	movff	atoi@a,___wmul@multiplier
  9072  00378C  C0CB  F081         	movff	atoi@a+1,___wmul@multiplier+1
  9073  003790  0E00               	movlw	0
  9074  003792  0100               	movlb	0	; () banked
  9075  003794  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9076  003796  0E0A               	movlw	10
  9077  003798  6F82               	movwf	___wmul@multiplicand& (0+255),b
  9078  00379A  ECA5  F036         	call	___wmul	;wreg free
  9079  00379E  C0C5  FFD9         	movff	atoi@s,fsr2l
  9080  0037A2  C0C6  FFDA         	movff	atoi@s+1,fsr2h
  9081  0037A6  50DF               	movf	indf2,w,c
  9082  0037A8  0100               	movlb	0	; () banked
  9083  0037AA  6FC7               	movwf	??_atoi& (0+255),b
  9084  0037AC  6BC8               	clrf	(??_atoi+1)& (0+255),b
  9085  0037AE  5180               	movf	?___wmul& (0+255),w,b
  9086  0037B0  27C7               	addwf	??_atoi& (0+255),f,b
  9087  0037B2  5181               	movf	(?___wmul+1)& (0+255),w,b
  9088  0037B4  23C8               	addwfc	(??_atoi+1)& (0+255),f,b
  9089  0037B6  0ED0               	movlw	208
  9090  0037B8  25C7               	addwf	??_atoi& (0+255),w,b
  9091  0037BA  6FCA               	movwf	atoi@a& (0+255),b
  9092  0037BC  0EFF               	movlw	255
  9093  0037BE  21C8               	addwfc	(??_atoi+1)& (0+255),w,b
  9094  0037C0  6FCB               	movwf	(atoi@a+1)& (0+255),b
  9095  0037C2                     l5935:
  9096  0037C2  FFFF               	dw	65535	; assembler added errata NOP
  9097                           
  9098                           ; BSR set to: 0
  9099  0037C4  4BC5               	infsnz	atoi@s& (0+255),f,b
  9100  0037C6  2BC6               	incf	(atoi@s+1)& (0+255),f,b
  9101  0037C8                     l1343:
  9102  0037C8  FFFF               	dw	65535	; assembler added errata NOP
  9103                           
  9104                           ; BSR set to: 0
  9105                           
  9106                           ; BSR set to: 0
  9107  0037CA  C0C5  FFD9         	movff	atoi@s,fsr2l
  9108  0037CE  C0C6  FFDA         	movff	atoi@s+1,fsr2h
  9109  0037D2  50DF               	movf	indf2,w,c
  9110  0037D4  EC7B  F036         	call	_isdigit
  9111  0037D8  B0D8               	btfsc	status,0,c
  9112  0037DA  D7D5               	goto	l1344
  9113  0037DC  0100               	movlb	0	; () banked
  9114  0037DE  51C9               	movf	atoi@sign& (0+255),w,b
  9115  0037E0  B4D8               	btfsc	status,2,c
  9116  0037E2  D00D               	goto	l1346
  9117                           
  9118                           ; BSR set to: 0
  9119  0037E4  C0CA  F0C7         	movff	atoi@a,??_atoi
  9120  0037E8  C0CB  F0C8         	movff	atoi@a+1,??_atoi+1
  9121  0037EC  1FC7               	comf	??_atoi& (0+255),f,b
  9122  0037EE  1FC8               	comf	(??_atoi+1)& (0+255),f,b
  9123  0037F0  4BC7               	infsnz	??_atoi& (0+255),f,b
  9124  0037F2  2BC8               	incf	(??_atoi+1)& (0+255),f,b
  9125  0037F4  C0C7  F0C5         	movff	??_atoi,?_atoi
  9126  0037F8  C0C8  F0C6         	movff	??_atoi+1,?_atoi+1
  9127  0037FC  D005               	goto	l1347
  9128  0037FE                     l1346:
  9129  0037FE  FFFF               	dw	65535	; assembler added errata NOP
  9130                           
  9131                           ; BSR set to: 0
  9132  003800  C0CA  F0C5         	movff	atoi@a,?_atoi
  9133  003804  C0CB  F0C6         	movff	atoi@a+1,?_atoi+1
  9134  003808                     l1347:
  9135  003808  FFFF               	dw	65535	; assembler added errata NOP
  9136                           
  9137                           ; BSR set to: 0
  9138  00380A  0012               	return		;funcret
  9139  00380C  FFFF               	dw	65535	; errata NOP
  9140  00380E                     __end_of_atoi:
  9141                           	opt stack 0
  9142                           tblptru	equ	0xFF8
  9143                           tblptrh	equ	0xFF7
  9144                           tblptrl	equ	0xFF6
  9145                           tablat	equ	0xFF5
  9146                           prodh	equ	0xFF4
  9147                           prodl	equ	0xFF3
  9148                           postinc0	equ	0xFEE
  9149                           wreg	equ	0xFE8
  9150                           postdec1	equ	0xFE5
  9151                           fsr1l	equ	0xFE1
  9152                           indf2	equ	0xFDF
  9153                           postinc2	equ	0xFDE
  9154                           postdec2	equ	0xFDD
  9155                           fsr2h	equ	0xFDA
  9156                           fsr2l	equ	0xFD9
  9157                           status	equ	0xFD8
  9158                           
  9159 ;; *************** function _getDS1307TimeDate *****************
  9160 ;; Defined at:
  9161 ;;		line 52 in file "ds1307.h"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  9164 ;;		 -> rtc(7), 
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;		None
  9167 ;; Return value:  Size  Location     Type
  9168 ;;                  1    wreg      void 
  9169 ;; Registers used:
  9170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9171 ;; Tracked objects:
  9172 ;;		On entry : 0/0
  9173 ;;		On exit  : 0/0
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9176 ;;      Params:         0       2       0       0       0       0       0
  9177 ;;      Locals:         0       0       0       0       0       0       0
  9178 ;;      Temps:          0       0       0       0       0       0       0
  9179 ;;      Totals:         0       2       0       0       0       0       0
  9180 ;;Total ram usage:        2 bytes
  9181 ;; Hardware stack levels used:    1
  9182 ;; Hardware stack levels required when called:    8
  9183 ;; This function calls:
  9184 ;;		_BCDtoDEC
  9185 ;;		_I2C_Read
  9186 ;;		_I2C_Restart
  9187 ;;		_I2C_Start
  9188 ;;		_I2C_Stop
  9189 ;;		_I2C_Write
  9190 ;; This function is called by:
  9191 ;;		_main
  9192 ;; This function uses a non-reentrant model
  9193 ;;
  9194                           
  9195                           	psect	text24
  9196  002E4C                     __ptext24:
  9197                           	opt stack 0
  9198  002E4C                     _getDS1307TimeDate:
  9199                           	opt stack 0
  9200  002E4C  FFFF               	dw	65535	; assembler added errata NOP
  9201                           
  9202                           ;ds1307.h: 54: I2C_Start();
  9203                           
  9204                           ; BSR set to: 0
  9205                           ;incstack = 0
  9206  002E4E  ECC8  F035         	call	_I2C_Start	;wreg free
  9207                           
  9208                           ;ds1307.h: 55: I2C_Write(0xD0);
  9209  002E52  0E00               	movlw	0
  9210  002E54  0100               	movlb	0	; () banked
  9211  002E56  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  9212  002E58  0ED0               	movlw	208
  9213  002E5A  6F8A               	movwf	I2C_Write@d& (0+255),b
  9214  002E5C  ECE1  F035         	call	_I2C_Write	;wreg free
  9215                           
  9216                           ;ds1307.h: 56: I2C_Write(0x00);
  9217  002E60  0E00               	movlw	0
  9218  002E62  0100               	movlb	0	; () banked
  9219  002E64  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  9220  002E66  0E00               	movlw	0
  9221  002E68  6F8A               	movwf	I2C_Write@d& (0+255),b
  9222  002E6A  ECE1  F035         	call	_I2C_Write	;wreg free
  9223                           
  9224                           ;ds1307.h: 57: I2C_Restart();
  9225  002E6E  ECD4  F035         	call	_I2C_Restart	;wreg free
  9226                           
  9227                           ;ds1307.h: 58: I2C_Write(0xD1);
  9228  002E72  0E00               	movlw	0
  9229  002E74  0100               	movlb	0	; () banked
  9230  002E76  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  9231  002E78  0ED1               	movlw	209
  9232  002E7A  6F8A               	movwf	I2C_Write@d& (0+255),b
  9233  002E7C  ECE1  F035         	call	_I2C_Write	;wreg free
  9234                           
  9235                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
  9236  002E80  0100               	movlb	0	; () banked
  9237  002E82  EE20 F001          	lfsr	2,1
  9238  002E86  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  9239  002E88  26D9               	addwf	fsr2l,f,c
  9240  002E8A  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  9241  002E8C  22DA               	addwfc	fsr2h,f,c
  9242  002E8E  0E00               	movlw	0
  9243  002E90  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9244  002E92  0E01               	movlw	1
  9245  002E94  6F81               	movwf	I2C_Read@a& (0+255),b
  9246  002E96  ECAB  F037         	call	_I2C_Read	;wreg free
  9247  002E9A  0100               	movlb	0	; () banked
  9248  002E9C  5181               	movf	?_I2C_Read& (0+255),w,b
  9249  002E9E  EC26  F036         	call	_BCDtoDEC
  9250  002EA2  6EDF               	movwf	indf2,c
  9251                           
  9252                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
  9253  002EA4  0100               	movlb	0	; () banked
  9254  002EA6  EE20 F002          	lfsr	2,2
  9255  002EAA  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  9256  002EAC  26D9               	addwf	fsr2l,f,c
  9257  002EAE  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  9258  002EB0  22DA               	addwfc	fsr2h,f,c
  9259  002EB2  0E00               	movlw	0
  9260  002EB4  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9261  002EB6  0E01               	movlw	1
  9262  002EB8  6F81               	movwf	I2C_Read@a& (0+255),b
  9263  002EBA  ECAB  F037         	call	_I2C_Read	;wreg free
  9264  002EBE  0100               	movlb	0	; () banked
  9265  002EC0  5181               	movf	?_I2C_Read& (0+255),w,b
  9266  002EC2  EC26  F036         	call	_BCDtoDEC
  9267  002EC6  6EDF               	movwf	indf2,c
  9268                           
  9269                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
  9270  002EC8  0100               	movlb	0	; () banked
  9271  002ECA  EE20 F003          	lfsr	2,3
  9272  002ECE  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  9273  002ED0  26D9               	addwf	fsr2l,f,c
  9274  002ED2  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  9275  002ED4  22DA               	addwfc	fsr2h,f,c
  9276  002ED6  0E00               	movlw	0
  9277  002ED8  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9278  002EDA  0E01               	movlw	1
  9279  002EDC  6F81               	movwf	I2C_Read@a& (0+255),b
  9280  002EDE  ECAB  F037         	call	_I2C_Read	;wreg free
  9281  002EE2  0100               	movlb	0	; () banked
  9282  002EE4  5181               	movf	?_I2C_Read& (0+255),w,b
  9283  002EE6  EC26  F036         	call	_BCDtoDEC
  9284  002EEA  6EDF               	movwf	indf2,c
  9285                           
  9286                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
  9287  002EEC  0E00               	movlw	0
  9288  002EEE  0100               	movlb	0	; () banked
  9289  002EF0  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9290  002EF2  0E01               	movlw	1
  9291  002EF4  6F81               	movwf	I2C_Read@a& (0+255),b
  9292  002EF6  ECAB  F037         	call	_I2C_Read	;wreg free
  9293  002EFA  0100               	movlb	0	; () banked
  9294  002EFC  5181               	movf	?_I2C_Read& (0+255),w,b
  9295  002EFE  EC26  F036         	call	_BCDtoDEC
  9296  002F02  C08C  FFD9         	movff	getDS1307TimeDate@ptrToUserVal,fsr2l
  9297  002F06  C08D  FFDA         	movff	getDS1307TimeDate@ptrToUserVal+1,fsr2h
  9298  002F0A  6EDF               	movwf	indf2,c
  9299                           
  9300                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
  9301  002F0C  0100               	movlb	0	; () banked
  9302  002F0E  EE20 F004          	lfsr	2,4
  9303  002F12  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  9304  002F14  26D9               	addwf	fsr2l,f,c
  9305  002F16  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  9306  002F18  22DA               	addwfc	fsr2h,f,c
  9307  002F1A  0E00               	movlw	0
  9308  002F1C  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9309  002F1E  0E01               	movlw	1
  9310  002F20  6F81               	movwf	I2C_Read@a& (0+255),b
  9311  002F22  ECAB  F037         	call	_I2C_Read	;wreg free
  9312  002F26  0100               	movlb	0	; () banked
  9313  002F28  5181               	movf	?_I2C_Read& (0+255),w,b
  9314  002F2A  EC26  F036         	call	_BCDtoDEC
  9315  002F2E  6EDF               	movwf	indf2,c
  9316                           
  9317                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
  9318  002F30  0100               	movlb	0	; () banked
  9319  002F32  EE20 F005          	lfsr	2,5
  9320  002F36  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  9321  002F38  26D9               	addwf	fsr2l,f,c
  9322  002F3A  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  9323  002F3C  22DA               	addwfc	fsr2h,f,c
  9324  002F3E  0E00               	movlw	0
  9325  002F40  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9326  002F42  0E01               	movlw	1
  9327  002F44  6F81               	movwf	I2C_Read@a& (0+255),b
  9328  002F46  ECAB  F037         	call	_I2C_Read	;wreg free
  9329  002F4A  0100               	movlb	0	; () banked
  9330  002F4C  5181               	movf	?_I2C_Read& (0+255),w,b
  9331  002F4E  EC26  F036         	call	_BCDtoDEC
  9332  002F52  6EDF               	movwf	indf2,c
  9333                           
  9334                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
  9335  002F54  0100               	movlb	0	; () banked
  9336  002F56  EE20 F006          	lfsr	2,6
  9337  002F5A  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  9338  002F5C  26D9               	addwf	fsr2l,f,c
  9339  002F5E  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  9340  002F60  22DA               	addwfc	fsr2h,f,c
  9341  002F62  0E00               	movlw	0
  9342  002F64  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  9343  002F66  0E00               	movlw	0
  9344  002F68  6F81               	movwf	I2C_Read@a& (0+255),b
  9345  002F6A  ECAB  F037         	call	_I2C_Read	;wreg free
  9346  002F6E  0100               	movlb	0	; () banked
  9347  002F70  5181               	movf	?_I2C_Read& (0+255),w,b
  9348  002F72  EC26  F036         	call	_BCDtoDEC
  9349  002F76  6EDF               	movwf	indf2,c
  9350                           
  9351                           ;ds1307.h: 66: I2C_Stop();
  9352  002F78  ECCE  F035         	call	_I2C_Stop	;wreg free
  9353  002F7C  0012               	return		;funcret
  9354  002F7E  FFFF               	dw	65535	; errata NOP
  9355  002F80                     __end_of_getDS1307TimeDate:
  9356                           	opt stack 0
  9357                           tblptru	equ	0xFF8
  9358                           tblptrh	equ	0xFF7
  9359                           tblptrl	equ	0xFF6
  9360                           tablat	equ	0xFF5
  9361                           prodh	equ	0xFF4
  9362                           prodl	equ	0xFF3
  9363                           postinc0	equ	0xFEE
  9364                           wreg	equ	0xFE8
  9365                           postdec1	equ	0xFE5
  9366                           fsr1l	equ	0xFE1
  9367                           indf2	equ	0xFDF
  9368                           postinc2	equ	0xFDE
  9369                           postdec2	equ	0xFDD
  9370                           fsr2h	equ	0xFDA
  9371                           fsr2l	equ	0xFD9
  9372                           status	equ	0xFD8
  9373                           
  9374 ;; *************** function _BCDtoDEC *****************
  9375 ;; Defined at:
  9376 ;;		line 33 in file "function.c"
  9377 ;; Parameters:    Size  Location     Type
  9378 ;;  val             1    wreg     unsigned char 
  9379 ;; Auto vars:     Size  Location     Type
  9380 ;;  val             1    0[BANK0 ] unsigned char 
  9381 ;; Return value:  Size  Location     Type
  9382 ;;                  1    wreg      unsigned char 
  9383 ;; Registers used:
  9384 ;;		wreg, status,2, status,0, prodl, prodh
  9385 ;; Tracked objects:
  9386 ;;		On entry : 0/0
  9387 ;;		On exit  : 0/0
  9388 ;;		Unchanged: 0/0
  9389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9390 ;;      Params:         0       0       0       0       0       0       0
  9391 ;;      Locals:         0       1       0       0       0       0       0
  9392 ;;      Temps:          0       0       0       0       0       0       0
  9393 ;;      Totals:         0       1       0       0       0       0       0
  9394 ;;Total ram usage:        1 bytes
  9395 ;; Hardware stack levels used:    1
  9396 ;; Hardware stack levels required when called:    6
  9397 ;; This function calls:
  9398 ;;		Nothing
  9399 ;; This function is called by:
  9400 ;;		_getDS1307TimeDate
  9401 ;;		_getDS1307Time
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           	psect	text25
  9406  006C4C                     __ptext25:
  9407                           	opt stack 0
  9408  006C4C                     _BCDtoDEC:
  9409                           	opt stack 0
  9410  006C4C  FFFF               	dw	65535	; assembler added errata NOP
  9411                           
  9412                           ;incstack = 0
  9413                           ;BCDtoDEC@val stored from wreg
  9414  006C4E  0100               	movlb	0	; () banked
  9415  006C50  6F80               	movwf	BCDtoDEC@val& (0+255),b
  9416                           
  9417                           ;function.c: 34: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
  9418  006C52  0100               	movlb	0	; () banked
  9419  006C54  3980               	swapf	BCDtoDEC@val& (0+255),w,b
  9420  006C56  0B0F               	andlw	15
  9421  006C58  0B0F               	andlw	15
  9422  006C5A  0D0A               	mullw	10
  9423  006C5C  5180               	movf	BCDtoDEC@val& (0+255),w,b
  9424  006C5E  0B0F               	andlw	15
  9425  006C60  24F3               	addwf	prodl,w,c
  9426                           
  9427                           ; BSR set to: 0
  9428                           
  9429                           ; BSR set to: 0
  9430  006C62  0012               	return		;funcret
  9431  006C64  FFFF               	dw	65535	; errata NOP
  9432  006C66                     __end_of_BCDtoDEC:
  9433                           	opt stack 0
  9434                           tblptru	equ	0xFF8
  9435                           tblptrh	equ	0xFF7
  9436                           tblptrl	equ	0xFF6
  9437                           tablat	equ	0xFF5
  9438                           prodh	equ	0xFF4
  9439                           prodl	equ	0xFF3
  9440                           postinc0	equ	0xFEE
  9441                           wreg	equ	0xFE8
  9442                           postdec1	equ	0xFE5
  9443                           fsr1l	equ	0xFE1
  9444                           indf2	equ	0xFDF
  9445                           postinc2	equ	0xFDE
  9446                           postdec2	equ	0xFDD
  9447                           fsr2h	equ	0xFDA
  9448                           fsr2l	equ	0xFD9
  9449                           status	equ	0xFD8
  9450                           
  9451 ;; *************** function _dataLoger *****************
  9452 ;; Defined at:
  9453 ;;		line 12 in file "tela_DATALOGER.h"
  9454 ;; Parameters:    Size  Location     Type
  9455 ;;		None
  9456 ;; Auto vars:     Size  Location     Type
  9457 ;;  logs            1   70[BANK0 ] unsigned char 
  9458 ;; Return value:  Size  Location     Type
  9459 ;;                  1    wreg      void 
  9460 ;; Registers used:
  9461 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9462 ;; Tracked objects:
  9463 ;;		On entry : 0/0
  9464 ;;		On exit  : 0/0
  9465 ;;		Unchanged: 0/0
  9466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9467 ;;      Params:         0       0       0       0       0       0       0
  9468 ;;      Locals:         0       7       0       0       0       0       0
  9469 ;;      Temps:          0       5       0       0       0       0       0
  9470 ;;      Totals:         0      12       0       0       0       0       0
  9471 ;;Total ram usage:       12 bytes
  9472 ;; Hardware stack levels used:    1
  9473 ;; Hardware stack levels required when called:    9
  9474 ;; This function calls:
  9475 ;;		___awdiv
  9476 ;;		_btPress
  9477 ;;		_readEEPROM_ext
  9478 ;;		_sprintf
  9479 ;; This function is called by:
  9480 ;;		_main
  9481 ;; This function uses a non-reentrant model
  9482 ;;
  9483                           
  9484                           	psect	text26
  9485  001D02                     __ptext26:
  9486                           	opt stack 0
  9487  001D02                     _dataLoger:
  9488                           	opt stack 0
  9489  001D02  FFFF               	dw	65535	; assembler added errata NOP
  9490                           
  9491                           ;tela_DATALOGER.h: 13: sprintf(line1, "Data: %02d/%02d/%02d %02d:%02d", dtl_dia, dtl_mes
      +                          , dtl_ano, dtl_hora, dtl_min);
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;incstack = 0
  9495  001D04  0E99               	movlw	low _line1
  9496  001D06  0100               	movlb	0	; () banked
  9497  001D08  6FA1               	movwf	sprintf@wh& (0+255),b
  9498  001D0A  0E01               	movlw	high _line1
  9499  001D0C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9500  001D0E  0ED0               	movlw	low STR_79
  9501  001D10  6FA3               	movwf	sprintf@f& (0+255),b
  9502  001D12  0E7B               	movlw	high STR_79
  9503  001D14  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9504  001D16  C114  F0A5         	movff	_dtl_dia,?_sprintf+4
  9505  001D1A  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  9506  001D1C  C113  F0A7         	movff	_dtl_mes,?_sprintf+6
  9507  001D20  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  9508  001D22  C112  F0A9         	movff	_dtl_ano,?_sprintf+8
  9509  001D26  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  9510  001D28  C111  F0AB         	movff	_dtl_hora,?_sprintf+10
  9511  001D2C  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  9512  001D2E  C110  F0AD         	movff	_dtl_min,?_sprintf+12
  9513  001D32  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  9514  001D34  EC42  F039         	call	_sprintf	;wreg free
  9515                           
  9516                           ;tela_DATALOGER.h: 14: sprintf(line2, "Jokey: %s", dtl_jockey == 1 ? "OK" : "ERRO");
  9517  001D38  0101               	movlb	1	; () banked
  9518  001D3A  050F               	decf	_dtl_jockey& (0+255),w,b
  9519  001D3C  B4D8               	btfsc	status,2,c
  9520  001D3E  D005               	goto	l794
  9521                           
  9522                           ; BSR set to: 1
  9523  001D40  0EE2               	movlw	low STR_50
  9524  001D42  0100               	movlb	0	; () banked
  9525  001D44  6FC0               	movwf	_dataLoger$1615& (0+255),b
  9526  001D46  0E7F               	movlw	high STR_50
  9527  001D48  D005               	goto	L16
  9528  001D4A                     l794:
  9529  001D4A  FFFF               	dw	65535	; assembler added errata NOP
  9530                           
  9531                           ; BSR set to: 0
  9532  001D4C  0EF9               	movlw	low STR_5
  9533  001D4E  0100               	movlb	0	; () banked
  9534  001D50  6FC0               	movwf	_dataLoger$1615& (0+255),b
  9535  001D52  0E7F               	movlw	high STR_5
  9536  001D54                     L16:
  9537  001D54  FFFF               	dw	65535	; assembler added errata NOP
  9538  001D56  6FC1               	movwf	(_dataLoger$1615+1)& (0+255),b
  9539                           
  9540                           ; BSR set to: 0
  9541                           
  9542                           ; BSR set to: 0
  9543  001D58  0E84               	movlw	low _line2
  9544  001D5A  6FA1               	movwf	sprintf@wh& (0+255),b
  9545  001D5C  0E01               	movlw	high _line2
  9546  001D5E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9547  001D60  0E75               	movlw	low STR_80
  9548  001D62  6FA3               	movwf	sprintf@f& (0+255),b
  9549  001D64  0E7F               	movlw	high STR_80
  9550  001D66  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9551  001D68  C0C0  F0A5         	movff	_dataLoger$1615,?_sprintf+4
  9552  001D6C  C0C1  F0A6         	movff	_dataLoger$1615+1,?_sprintf+5
  9553  001D70  EC42  F039         	call	_sprintf	;wreg free
  9554                           
  9555                           ;tela_DATALOGER.h: 15: sprintf(&line2[14], "#%02d/%02d", (dtl_posi_visualizar + 1), tota
      +                          lLogs);
  9556  001D74  0E92               	movlw	low (_line2+14)
  9557  001D76  0100               	movlb	0	; () banked
  9558  001D78  6FA1               	movwf	sprintf@wh& (0+255),b
  9559  001D7A  0E01               	movlw	high (_line2+14)
  9560  001D7C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9561  001D7E  0E17               	movlw	low STR_83
  9562  001D80  6FA3               	movwf	sprintf@f& (0+255),b
  9563  001D82  0E7F               	movlw	high STR_83
  9564  001D84  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9565  001D86  0E01               	movlw	1
  9566  001D88  2464               	addwf	_dtl_posi_visualizar,w,c
  9567  001D8A  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  9568  001D8C  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  9569  001D8E  0E00               	movlw	0
  9570  001D90  23A6               	addwfc	(?_sprintf+5)& (0+255),f,b
  9571  001D92  C065  F0A7         	movff	_totalLogs,?_sprintf+6
  9572  001D96  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  9573  001D98  EC42  F039         	call	_sprintf	;wreg free
  9574                           
  9575                           ;tela_DATALOGER.h: 16: sprintf(line3, "Principal: %s", dtl_principal == 1 ? "OK" : "ERRO
      +                          ");
  9576  001D9C  0101               	movlb	1	; () banked
  9577  001D9E  050E               	decf	_dtl_principal& (0+255),w,b
  9578  001DA0  B4D8               	btfsc	status,2,c
  9579  001DA2  D005               	goto	l798
  9580                           
  9581                           ; BSR set to: 1
  9582  001DA4  0EE2               	movlw	low STR_50
  9583  001DA6  0100               	movlb	0	; () banked
  9584  001DA8  6FC2               	movwf	_dataLoger$1621& (0+255),b
  9585  001DAA  0E7F               	movlw	high STR_50
  9586  001DAC  D005               	goto	L17
  9587  001DAE                     l798:
  9588  001DAE  FFFF               	dw	65535	; assembler added errata NOP
  9589                           
  9590                           ; BSR set to: 0
  9591  001DB0  0EF9               	movlw	low STR_5
  9592  001DB2  0100               	movlb	0	; () banked
  9593  001DB4  6FC2               	movwf	_dataLoger$1621& (0+255),b
  9594  001DB6  0E7F               	movlw	high STR_5
  9595  001DB8                     L17:
  9596  001DB8  FFFF               	dw	65535	; assembler added errata NOP
  9597  001DBA  6FC3               	movwf	(_dataLoger$1621+1)& (0+255),b
  9598                           
  9599                           ; BSR set to: 0
  9600                           
  9601                           ; BSR set to: 0
  9602  001DBC  0E6F               	movlw	low _line3
  9603  001DBE  6FA1               	movwf	sprintf@wh& (0+255),b
  9604  001DC0  0E01               	movlw	high _line3
  9605  001DC2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9606  001DC4  0E77               	movlw	low STR_84
  9607  001DC6  6FA3               	movwf	sprintf@f& (0+255),b
  9608  001DC8  0E7E               	movlw	high STR_84
  9609  001DCA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9610  001DCC  C0C2  F0A5         	movff	_dataLoger$1621,?_sprintf+4
  9611  001DD0  C0C3  F0A6         	movff	_dataLoger$1621+1,?_sprintf+5
  9612  001DD4  EC42  F039         	call	_sprintf	;wreg free
  9613                           
  9614                           ;tela_DATALOGER.h: 17: sprintf(line4, "Combustao: %s", dtl_estacionaria == 1 ? "OK" : "E
      +                          RRO");
  9615  001DD8  0101               	movlb	1	; () banked
  9616  001DDA  050D               	decf	_dtl_estacionaria& (0+255),w,b
  9617  001DDC  B4D8               	btfsc	status,2,c
  9618  001DDE  D005               	goto	l802
  9619                           
  9620                           ; BSR set to: 1
  9621  001DE0  0EE2               	movlw	low STR_50
  9622  001DE2  0100               	movlb	0	; () banked
  9623  001DE4  6FC4               	movwf	_dataLoger$1626& (0+255),b
  9624  001DE6  0E7F               	movlw	high STR_50
  9625  001DE8  D005               	goto	L18
  9626  001DEA                     l802:
  9627  001DEA  FFFF               	dw	65535	; assembler added errata NOP
  9628                           
  9629                           ; BSR set to: 0
  9630  001DEC  0EF9               	movlw	low STR_5
  9631  001DEE  0100               	movlb	0	; () banked
  9632  001DF0  6FC4               	movwf	_dataLoger$1626& (0+255),b
  9633  001DF2  0E7F               	movlw	high STR_5
  9634  001DF4                     L18:
  9635  001DF4  FFFF               	dw	65535	; assembler added errata NOP
  9636  001DF6  6FC5               	movwf	(_dataLoger$1626+1)& (0+255),b
  9637                           
  9638                           ; BSR set to: 0
  9639                           
  9640                           ; BSR set to: 0
  9641  001DF8  0E5A               	movlw	low _line4
  9642  001DFA  6FA1               	movwf	sprintf@wh& (0+255),b
  9643  001DFC  0E01               	movlw	high _line4
  9644  001DFE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9645  001E00  0E85               	movlw	low STR_87
  9646  001E02  6FA3               	movwf	sprintf@f& (0+255),b
  9647  001E04  0E7E               	movlw	high STR_87
  9648  001E06  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9649  001E08  C0C4  F0A5         	movff	_dataLoger$1626,?_sprintf+4
  9650  001E0C  C0C5  F0A6         	movff	_dataLoger$1626+1,?_sprintf+5
  9651  001E10  EC42  F039         	call	_sprintf	;wreg free
  9652                           
  9653                           ;tela_DATALOGER.h: 20: if (dtl_carregar_log == 1) {
  9654  001E14  0101               	movlb	1	; () banked
  9655  001E16  050C               	decf	_dtl_carregar_log& (0+255),w,b
  9656  001E18  A4D8               	btfss	status,2,c
  9657  001E1A  D05A               	goto	l805
  9658                           
  9659                           ; BSR set to: 1
  9660                           ;tela_DATALOGER.h: 21: char logs = readEEPROM_ext(14);
  9661  001E1C  0E0E               	movlw	14
  9662  001E1E  ECDE  F039         	call	_readEEPROM_ext
  9663  001E22  0100               	movlb	0	; () banked
  9664  001E24  6FC6               	movwf	dataLoger@logs& (0+255),b
  9665                           
  9666                           ;tela_DATALOGER.h: 22: totalLogs = (logs - 60) / 8;
  9667  001E26  0EC4               	movlw	196
  9668  001E28  25C6               	addwf	dataLoger@logs& (0+255),w,b
  9669  001E2A  6F80               	movwf	___awdiv@dividend& (0+255),b
  9670  001E2C  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  9671  001E2E  0EFF               	movlw	255
  9672  001E30  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  9673  001E32  0E00               	movlw	0
  9674  001E34  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  9675  001E36  0E08               	movlw	8
  9676  001E38  6F82               	movwf	___awdiv@divisor& (0+255),b
  9677  001E3A  ECD0  F01E         	call	___awdiv	;wreg free
  9678  001E3E  0100               	movlb	0	; () banked
  9679  001E40  5180               	movf	?___awdiv& (0+255),w,b
  9680  001E42  6E65               	movwf	_totalLogs,c
  9681                           
  9682                           ;tela_DATALOGER.h: 24: dtl_posi_visualizar = (dtl_posicao - 60) / 8;
  9683  001E44  0EC4               	movlw	196
  9684  001E46  25F9               	addwf	_dtl_posicao& (0+255),w,b
  9685  001E48  6F80               	movwf	___awdiv@dividend& (0+255),b
  9686  001E4A  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  9687  001E4C  0EFF               	movlw	255
  9688  001E4E  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  9689  001E50  0E00               	movlw	0
  9690  001E52  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  9691  001E54  0E08               	movlw	8
  9692  001E56  6F82               	movwf	___awdiv@divisor& (0+255),b
  9693  001E58  ECD0  F01E         	call	___awdiv	;wreg free
  9694  001E5C  0100               	movlb	0	; () banked
  9695  001E5E  5180               	movf	?___awdiv& (0+255),w,b
  9696  001E60  6E64               	movwf	_dtl_posi_visualizar,c
  9697                           
  9698                           ;tela_DATALOGER.h: 26: dtl_dia = readEEPROM_ext(dtl_posicao);
  9699  001E62  51F9               	movf	_dtl_posicao& (0+255),w,b
  9700  001E64  ECDE  F039         	call	_readEEPROM_ext
  9701  001E68  0101               	movlb	1	; () banked
  9702  001E6A  6F14               	movwf	_dtl_dia& (0+255),b
  9703                           
  9704                           ;tela_DATALOGER.h: 27: dtl_mes = readEEPROM_ext((dtl_posicao + 1));
  9705  001E6C  0100               	movlb	0	; () banked
  9706  001E6E  29F9               	incf	_dtl_posicao& (0+255),w,b
  9707  001E70  ECDE  F039         	call	_readEEPROM_ext
  9708  001E74  0101               	movlb	1	; () banked
  9709  001E76  6F13               	movwf	_dtl_mes& (0+255),b
  9710                           
  9711                           ;tela_DATALOGER.h: 28: dtl_ano = readEEPROM_ext((dtl_posicao + 2));
  9712  001E78  0100               	movlb	0	; () banked
  9713  001E7A  51F9               	movf	_dtl_posicao& (0+255),w,b
  9714  001E7C  0F02               	addlw	2
  9715  001E7E  ECDE  F039         	call	_readEEPROM_ext
  9716  001E82  0101               	movlb	1	; () banked
  9717  001E84  6F12               	movwf	_dtl_ano& (0+255),b
  9718                           
  9719                           ;tela_DATALOGER.h: 29: dtl_hora = readEEPROM_ext((dtl_posicao + 3));
  9720  001E86  0100               	movlb	0	; () banked
  9721  001E88  51F9               	movf	_dtl_posicao& (0+255),w,b
  9722  001E8A  0F03               	addlw	3
  9723  001E8C  ECDE  F039         	call	_readEEPROM_ext
  9724  001E90  0101               	movlb	1	; () banked
  9725  001E92  6F11               	movwf	_dtl_hora& (0+255),b
  9726                           
  9727                           ;tela_DATALOGER.h: 30: dtl_min = readEEPROM_ext((dtl_posicao + 4));
  9728  001E94  0100               	movlb	0	; () banked
  9729  001E96  51F9               	movf	_dtl_posicao& (0+255),w,b
  9730  001E98  0F04               	addlw	4
  9731  001E9A  ECDE  F039         	call	_readEEPROM_ext
  9732  001E9E  0101               	movlb	1	; () banked
  9733  001EA0  6F10               	movwf	_dtl_min& (0+255),b
  9734                           
  9735                           ;tela_DATALOGER.h: 31: dtl_jockey = readEEPROM_ext((dtl_posicao + 5));
  9736  001EA2  0100               	movlb	0	; () banked
  9737  001EA4  51F9               	movf	_dtl_posicao& (0+255),w,b
  9738  001EA6  0F05               	addlw	5
  9739  001EA8  ECDE  F039         	call	_readEEPROM_ext
  9740  001EAC  0101               	movlb	1	; () banked
  9741  001EAE  6F0F               	movwf	_dtl_jockey& (0+255),b
  9742                           
  9743                           ;tela_DATALOGER.h: 32: dtl_principal = readEEPROM_ext((dtl_posicao + 6));
  9744  001EB0  0100               	movlb	0	; () banked
  9745  001EB2  51F9               	movf	_dtl_posicao& (0+255),w,b
  9746  001EB4  0F06               	addlw	6
  9747  001EB6  ECDE  F039         	call	_readEEPROM_ext
  9748  001EBA  0101               	movlb	1	; () banked
  9749  001EBC  6F0E               	movwf	_dtl_principal& (0+255),b
  9750                           
  9751                           ;tela_DATALOGER.h: 33: dtl_estacionaria = readEEPROM_ext((dtl_posicao + 7));
  9752  001EBE  0100               	movlb	0	; () banked
  9753  001EC0  51F9               	movf	_dtl_posicao& (0+255),w,b
  9754  001EC2  0F07               	addlw	7
  9755  001EC4  ECDE  F039         	call	_readEEPROM_ext
  9756  001EC8  0101               	movlb	1	; () banked
  9757  001ECA  6F0D               	movwf	_dtl_estacionaria& (0+255),b
  9758                           
  9759                           ; BSR set to: 1
  9760                           ;tela_DATALOGER.h: 34: dtl_carregar_log = 0;
  9761  001ECC  0E00               	movlw	0
  9762  001ECE  6F0C               	movwf	_dtl_carregar_log& (0+255),b
  9763  001ED0                     l805:
  9764  001ED0  FFFF               	dw	65535	; assembler added errata NOP
  9765                           
  9766                           ; BSR set to: 1
  9767                           ;tela_DATALOGER.h: 35: }
  9768                           ;tela_DATALOGER.h: 37: if (btPress(1)) {
  9769                           
  9770                           ; BSR set to: 1
  9771  001ED2  0E01               	movlw	1
  9772  001ED4  ECE4  F03B         	call	_btPress
  9773  001ED8  0900               	iorlw	0
  9774  001EDA  B4D8               	btfsc	status,2,c
  9775  001EDC  D006               	goto	l806
  9776                           
  9777                           ;tela_DATALOGER.h: 38: option_posi = 0;
  9778  001EDE  0E00               	movlw	0
  9779  001EE0  0100               	movlb	0	; () banked
  9780  001EE2  6FE0               	movwf	_option_posi& (0+255),b
  9781                           
  9782                           ; BSR set to: 0
  9783                           ;tela_DATALOGER.h: 39: menu_posi = _menu_posi;
  9784  001EE4  C0DE  F0DF         	movff	__menu_posi,_menu_posi
  9785                           
  9786                           ;tela_DATALOGER.h: 40: } else if (btPress(2)) {
  9787  001EE8  D032               	goto	l811
  9788  001EEA                     l806:
  9789  001EEA  FFFF               	dw	65535	; assembler added errata NOP
  9790                           
  9791                           ; BSR set to: 0
  9792  001EEC  0E02               	movlw	2
  9793  001EEE  ECE4  F03B         	call	_btPress
  9794  001EF2  0900               	iorlw	0
  9795  001EF4  B4D8               	btfsc	status,2,c
  9796  001EF6  D009               	goto	l808
  9797                           
  9798                           ;tela_DATALOGER.h: 41: dtl_posicao -= 8;
  9799  001EF8  0E08               	movlw	8
  9800  001EFA  0100               	movlb	0	; () banked
  9801  001EFC  5FF9               	subwf	_dtl_posicao& (0+255),f,b
  9802                           
  9803                           ;tela_DATALOGER.h: 42: if (dtl_posicao < 60) {
  9804  001EFE  0E3C               	movlw	60
  9805  001F00  61F9               	cpfslt	_dtl_posicao& (0+255),b
  9806  001F02  D021               	goto	l7411
  9807                           
  9808                           ; BSR set to: 0
  9809                           ;tela_DATALOGER.h: 43: dtl_posicao = 60;
  9810  001F04  0E3C               	movlw	60
  9811  001F06  6FF9               	movwf	_dtl_posicao& (0+255),b
  9812  001F08  D01E               	goto	l7411
  9813  001F0A                     l808:
  9814  001F0A  FFFF               	dw	65535	; assembler added errata NOP
  9815                           
  9816                           ; BSR set to: 1
  9817  001F0C  0E03               	movlw	3
  9818  001F0E  ECE4  F03B         	call	_btPress
  9819  001F12  0900               	iorlw	0
  9820  001F14  B4D8               	btfsc	status,2,c
  9821  001F16  D01B               	goto	l811
  9822                           
  9823                           ;tela_DATALOGER.h: 47: if ((dtl_posi_visualizar + 1) >= totalLogs) {
  9824  001F18  5065               	movf	_totalLogs,w,c
  9825  001F1A  0100               	movlb	0	; () banked
  9826  001F1C  6FBB               	movwf	??_dataLoger& (0+255),b
  9827  001F1E  6BBC               	clrf	(??_dataLoger+1)& (0+255),b
  9828  001F20  5064               	movf	_dtl_posi_visualizar,w,c
  9829  001F22  6FBD               	movwf	(??_dataLoger+2)& (0+255),b
  9830  001F24  6BBE               	clrf	(??_dataLoger+3)& (0+255),b
  9831  001F26  0E01               	movlw	1
  9832  001F28  27BD               	addwf	(??_dataLoger+2)& (0+255),f,b
  9833  001F2A  0E00               	movlw	0
  9834  001F2C  23BE               	addwfc	(??_dataLoger+3)& (0+255),f,b
  9835  001F2E  51BB               	movf	??_dataLoger& (0+255),w,b
  9836  001F30  5DBD               	subwf	(??_dataLoger+2)& (0+255),w,b
  9837  001F32  51BE               	movf	(??_dataLoger+3)& (0+255),w,b
  9838  001F34  0A80               	xorlw	128
  9839  001F36  6FBF               	movwf	(??_dataLoger+4)& (0+255),b
  9840  001F38  51BC               	movf	(??_dataLoger+1)& (0+255),w,b
  9841  001F3A  0A80               	xorlw	128
  9842  001F3C  59BF               	subwfb	(??_dataLoger+4)& (0+255),w,b
  9843  001F3E  B0D8               	btfsc	status,0,c
  9844  001F40  D006               	goto	l811
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;tela_DATALOGER.h: 49: }
  9848                           ;tela_DATALOGER.h: 50: dtl_posicao += 8;
  9849                           
  9850                           ; BSR set to: 0
  9851                           
  9852                           ; BSR set to: 0
  9853                           ;tela_DATALOGER.h: 48: return;
  9854  001F42  0E08               	movlw	8
  9855  001F44  27F9               	addwf	_dtl_posicao& (0+255),f,b
  9856  001F46                     l7411:
  9857  001F46  FFFF               	dw	65535	; assembler added errata NOP
  9858                           
  9859                           ; BSR set to: 0
  9860                           ;tela_DATALOGER.h: 51: dtl_carregar_log = 1;
  9861  001F48  0E01               	movlw	1
  9862  001F4A  0101               	movlb	1	; () banked
  9863  001F4C  6F0C               	movwf	_dtl_carregar_log& (0+255),b
  9864  001F4E                     l811:
  9865  001F4E  FFFF               	dw	65535	; assembler added errata NOP
  9866                           
  9867                           ; BSR set to: 1
  9868                           
  9869                           ; BSR set to: 1
  9870                           
  9871                           ; BSR set to: 1
  9872  001F50  0012               	return		;funcret
  9873  001F52  FFFF               	dw	65535	; errata NOP
  9874  001F54                     __end_of_dataLoger:
  9875                           	opt stack 0
  9876                           tblptru	equ	0xFF8
  9877                           tblptrh	equ	0xFF7
  9878                           tblptrl	equ	0xFF6
  9879                           tablat	equ	0xFF5
  9880                           prodh	equ	0xFF4
  9881                           prodl	equ	0xFF3
  9882                           postinc0	equ	0xFEE
  9883                           wreg	equ	0xFE8
  9884                           postdec1	equ	0xFE5
  9885                           fsr1l	equ	0xFE1
  9886                           indf2	equ	0xFDF
  9887                           postinc2	equ	0xFDE
  9888                           postdec2	equ	0xFDD
  9889                           fsr2h	equ	0xFDA
  9890                           fsr2l	equ	0xFD9
  9891                           status	equ	0xFD8
  9892                           
  9893 ;; *************** function _configurarEstacionaria *****************
  9894 ;; Defined at:
  9895 ;;		line 10 in file "tela_ESTACIONARIA.h"
  9896 ;; Parameters:    Size  Location     Type
  9897 ;;		None
  9898 ;; Auto vars:     Size  Location     Type
  9899 ;;		None
  9900 ;; Return value:  Size  Location     Type
  9901 ;;                  1    wreg      void 
  9902 ;; Registers used:
  9903 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9904 ;; Tracked objects:
  9905 ;;		On entry : 0/0
  9906 ;;		On exit  : 0/0
  9907 ;;		Unchanged: 0/0
  9908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9909 ;;      Params:         0       0       0       0       0       0       0
  9910 ;;      Locals:         0       0       0       0       0       0       0
  9911 ;;      Temps:          0       0       0       0       0       0       0
  9912 ;;      Totals:         0       0       0       0       0       0       0
  9913 ;;Total ram usage:        0 bytes
  9914 ;; Hardware stack levels used:    1
  9915 ;; Hardware stack levels required when called:    9
  9916 ;; This function calls:
  9917 ;;		_blink
  9918 ;;		_btPress
  9919 ;;		_sprintf
  9920 ;;		_writeEEPROM_ext
  9921 ;; This function is called by:
  9922 ;;		_main
  9923 ;; This function uses a non-reentrant model
  9924 ;;
  9925                           
  9926                           	psect	text27
  9927  002B4C                     __ptext27:
  9928                           	opt stack 0
  9929  002B4C                     _configurarEstacionaria:
  9930                           	opt stack 0
  9931  002B4C  FFFF               	dw	65535	; assembler added errata NOP
  9932                           
  9933                           ;tela_ESTACIONARIA.h: 12: sprintf(line1, "Configuracao tempo");
  9934                           
  9935                           ;incstack = 0
  9936  002B4E  0E99               	movlw	low _line1
  9937  002B50  0100               	movlb	0	; () banked
  9938  002B52  6FA1               	movwf	sprintf@wh& (0+255),b
  9939  002B54  0E01               	movlw	high _line1
  9940  002B56  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9941  002B58  0E0F               	movlw	low STR_100
  9942  002B5A  6FA3               	movwf	sprintf@f& (0+255),b
  9943  002B5C  0E7D               	movlw	high STR_100
  9944  002B5E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9945  002B60  EC42  F039         	call	_sprintf	;wreg free
  9946                           
  9947                           ;tela_ESTACIONARIA.h: 13: sprintf(line2, "Max. PARTIDA:");
  9948  002B64  0E84               	movlw	low _line2
  9949  002B66  0100               	movlb	0	; () banked
  9950  002B68  6FA1               	movwf	sprintf@wh& (0+255),b
  9951  002B6A  0E01               	movlw	high _line2
  9952  002B6C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9953  002B6E  0E69               	movlw	low STR_101
  9954  002B70  6FA3               	movwf	sprintf@f& (0+255),b
  9955  002B72  0E7E               	movlw	high STR_101
  9956  002B74  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9957  002B76  EC42  F039         	call	_sprintf	;wreg free
  9958                           
  9959                           ;tela_ESTACIONARIA.h: 14: sprintf(&line2[16], "%3ds", tempo_limite_estacionaria);
  9960  002B7A  0E94               	movlw	low (_line2+16)
  9961  002B7C  0100               	movlb	0	; () banked
  9962  002B7E  6FA1               	movwf	sprintf@wh& (0+255),b
  9963  002B80  0E01               	movlw	high (_line2+16)
  9964  002B82  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9965  002B84  0EEC               	movlw	low STR_102
  9966  002B86  6FA3               	movwf	sprintf@f& (0+255),b
  9967  002B88  0E7F               	movlw	high STR_102
  9968  002B8A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9969  002B8C  C0E6  F0A5         	movff	_tempo_limite_estacionaria,?_sprintf+4
  9970  002B90  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  9971  002B92  EC42  F039         	call	_sprintf	;wreg free
  9972                           
  9973                           ;tela_ESTACIONARIA.h: 15: sprintf(line3, "Max. TESTE:");
  9974  002B96  0E6F               	movlw	low _line3
  9975  002B98  0100               	movlb	0	; () banked
  9976  002B9A  6FA1               	movwf	sprintf@wh& (0+255),b
  9977  002B9C  0E01               	movlw	high _line3
  9978  002B9E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9979  002BA0  0EC5               	movlw	low STR_103
  9980  002BA2  6FA3               	movwf	sprintf@f& (0+255),b
  9981  002BA4  0E7E               	movlw	high STR_103
  9982  002BA6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9983  002BA8  EC42  F039         	call	_sprintf	;wreg free
  9984                           
  9985                           ;tela_ESTACIONARIA.h: 16: sprintf(&line3[16], "%3ds", tempo_limite_teste_estacionaria);
  9986  002BAC  0E7F               	movlw	low (_line3+16)
  9987  002BAE  0100               	movlb	0	; () banked
  9988  002BB0  6FA1               	movwf	sprintf@wh& (0+255),b
  9989  002BB2  0E01               	movlw	high (_line3+16)
  9990  002BB4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  9991  002BB6  0EEC               	movlw	low STR_102
  9992  002BB8  6FA3               	movwf	sprintf@f& (0+255),b
  9993  002BBA  0E7F               	movlw	high STR_102
  9994  002BBC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  9995  002BBE  C0E5  F0A5         	movff	_tempo_limite_teste_estacionaria,?_sprintf+4
  9996  002BC2  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  9997  002BC4  EC42  F039         	call	_sprintf	;wreg free
  9998                           
  9999                           ;tela_ESTACIONARIA.h: 17: sprintf(line4, "horimetro:%5d min", horimetro);
 10000  002BC8  0E5A               	movlw	low _line4
 10001  002BCA  0100               	movlb	0	; () banked
 10002  002BCC  6FA1               	movwf	sprintf@wh& (0+255),b
 10003  002BCE  0E01               	movlw	high _line4
 10004  002BD0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10005  002BD2  0E6B               	movlw	low STR_105
 10006  002BD4  6FA3               	movwf	sprintf@f& (0+255),b
 10007  002BD6  0E7D               	movlw	high STR_105
 10008  002BD8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10009  002BDA  C10A  F0A5         	movff	_horimetro,?_sprintf+4
 10010  002BDE  C10B  F0A6         	movff	_horimetro+1,?_sprintf+5
 10011  002BE2  EC42  F039         	call	_sprintf	;wreg free
 10012                           
 10013                           ;tela_ESTACIONARIA.h: 19: switch (option_posi) {
 10014  002BE6  D05D               	goto	l863
 10015  002BE8  FFFF               	dw	65535	; assembler added errata NOP
 10016                           
 10017                           ;tela_ESTACIONARIA.h: 21: blink(line2, 16, 20);
 10018  002BEA  0E84               	movlw	low _line2
 10019  002BEC  0100               	movlb	0	; () banked
 10020  002BEE  6F80               	movwf	blink@line& (0+255),b
 10021  002BF0  0E01               	movlw	high _line2
 10022  002BF2  6F81               	movwf	(blink@line+1)& (0+255),b
 10023  002BF4  0E10               	movlw	16
 10024  002BF6  6F82               	movwf	blink@start& (0+255),b
 10025  002BF8  0E14               	movlw	20
 10026  002BFA  6F83               	movwf	blink@end& (0+255),b
 10027  002BFC  EC3F  F038         	call	_blink	;wreg free
 10028                           
 10029                           ;tela_ESTACIONARIA.h: 22: if (btPress(3)) {
 10030  002C00  0E03               	movlw	3
 10031  002C02  ECE4  F03B         	call	_btPress
 10032  002C06  0900               	iorlw	0
 10033  002C08  B4D8               	btfsc	status,2,c
 10034  002C0A  D002               	goto	l865
 10035                           
 10036                           ;tela_ESTACIONARIA.h: 23: tempo_limite_estacionaria++;
 10037  002C0C  0100               	movlb	0	; () banked
 10038  002C0E  2BE6               	incf	_tempo_limite_estacionaria& (0+255),f,b
 10039  002C10                     l865:
 10040  002C10  FFFF               	dw	65535	; assembler added errata NOP
 10041                           
 10042                           ;tela_ESTACIONARIA.h: 24: }
 10043                           ;tela_ESTACIONARIA.h: 25: if (btPress(2)) {
 10044                           
 10045                           ; BSR set to: 0
 10046  002C12  0E02               	movlw	2
 10047  002C14  ECE4  F03B         	call	_btPress
 10048  002C18  0900               	iorlw	0
 10049  002C1A  B4D8               	btfsc	status,2,c
 10050  002C1C  D04F               	goto	l867
 10051                           
 10052                           ;tela_ESTACIONARIA.h: 26: tempo_limite_estacionaria--;
 10053  002C1E  0100               	movlb	0	; () banked
 10054  002C20  07E6               	decf	_tempo_limite_estacionaria& (0+255),f,b
 10055                           
 10056                           ; BSR set to: 0
 10057                           ;tela_ESTACIONARIA.h: 27: }
 10058                           ;tela_ESTACIONARIA.h: 28: break;
 10059  002C22  D04C               	goto	l867
 10060  002C24  FFFF               	dw	65535	; assembler added errata NOP
 10061                           
 10062                           ; BSR set to: 0
 10063                           ;tela_ESTACIONARIA.h: 30: blink(line3, 16, 20);
 10064                           
 10065                           ; BSR set to: 0
 10066  002C26  0E6F               	movlw	low _line3
 10067  002C28  6F80               	movwf	blink@line& (0+255),b
 10068  002C2A  0E01               	movlw	high _line3
 10069  002C2C  6F81               	movwf	(blink@line+1)& (0+255),b
 10070  002C2E  0E10               	movlw	16
 10071  002C30  6F82               	movwf	blink@start& (0+255),b
 10072  002C32  0E14               	movlw	20
 10073  002C34  6F83               	movwf	blink@end& (0+255),b
 10074  002C36  EC3F  F038         	call	_blink	;wreg free
 10075                           
 10076                           ;tela_ESTACIONARIA.h: 31: if (btPress(3)) {
 10077  002C3A  0E03               	movlw	3
 10078  002C3C  ECE4  F03B         	call	_btPress
 10079  002C40  0900               	iorlw	0
 10080  002C42  B4D8               	btfsc	status,2,c
 10081  002C44  D002               	goto	l869
 10082                           
 10083                           ;tela_ESTACIONARIA.h: 32: tempo_limite_teste_estacionaria++;
 10084  002C46  0100               	movlb	0	; () banked
 10085  002C48  2BE5               	incf	_tempo_limite_teste_estacionaria& (0+255),f,b
 10086  002C4A                     l869:
 10087  002C4A  FFFF               	dw	65535	; assembler added errata NOP
 10088                           
 10089                           ;tela_ESTACIONARIA.h: 33: }
 10090                           ;tela_ESTACIONARIA.h: 34: if (btPress(2)) {
 10091                           
 10092                           ; BSR set to: 0
 10093  002C4C  0E02               	movlw	2
 10094  002C4E  ECE4  F03B         	call	_btPress
 10095  002C52  0900               	iorlw	0
 10096  002C54  B4D8               	btfsc	status,2,c
 10097  002C56  D032               	goto	l867
 10098                           
 10099                           ;tela_ESTACIONARIA.h: 35: tempo_limite_teste_estacionaria--;
 10100  002C58  0100               	movlb	0	; () banked
 10101  002C5A  07E5               	decf	_tempo_limite_teste_estacionaria& (0+255),f,b
 10102                           
 10103                           ; BSR set to: 0
 10104                           ;tela_ESTACIONARIA.h: 36: }
 10105                           ;tela_ESTACIONARIA.h: 37: break;
 10106  002C5C  D02F               	goto	l867
 10107  002C5E  FFFF               	dw	65535	; assembler added errata NOP
 10108                           
 10109                           ; BSR set to: 0
 10110                           ;tela_ESTACIONARIA.h: 39: blink(line4, 11, 20);
 10111                           
 10112                           ; BSR set to: 0
 10113  002C60  0E5A               	movlw	low _line4
 10114  002C62  6F80               	movwf	blink@line& (0+255),b
 10115  002C64  0E01               	movlw	high _line4
 10116  002C66  6F81               	movwf	(blink@line+1)& (0+255),b
 10117  002C68  0E0B               	movlw	11
 10118  002C6A  6F82               	movwf	blink@start& (0+255),b
 10119  002C6C  0E14               	movlw	20
 10120  002C6E  6F83               	movwf	blink@end& (0+255),b
 10121  002C70  EC3F  F038         	call	_blink	;wreg free
 10122                           
 10123                           ;tela_ESTACIONARIA.h: 40: if (btPress(2)) {
 10124  002C74  0E02               	movlw	2
 10125  002C76  ECE4  F03B         	call	_btPress
 10126  002C7A  0900               	iorlw	0
 10127  002C7C  B4D8               	btfsc	status,2,c
 10128  002C7E  D01E               	goto	l867
 10129                           
 10130                           ;tela_ESTACIONARIA.h: 41: horimetro = 0;
 10131  002C80  0E00               	movlw	0
 10132  002C82  0101               	movlb	1	; () banked
 10133  002C84  6F0B               	movwf	(_horimetro+1)& (0+255),b
 10134  002C86  0E00               	movlw	0
 10135  002C88  6F0A               	movwf	_horimetro& (0+255),b
 10136                           
 10137                           ; BSR set to: 1
 10138                           ;tela_ESTACIONARIA.h: 42: writeEEPROM_ext(8, 0);
 10139  002C8A  0E00               	movlw	0
 10140  002C8C  0100               	movlb	0	; () banked
 10141  002C8E  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
 10142  002C90  0E08               	movlw	8
 10143  002C92  EC1F  F039         	call	_writeEEPROM_ext
 10144                           
 10145                           ;tela_ESTACIONARIA.h: 43: }
 10146                           ;tela_ESTACIONARIA.h: 44: break;
 10147  002C96  D012               	goto	l867
 10148  002C98  FFFF               	dw	65535	; assembler added errata NOP
 10149  002C9A  0E00               	movlw	0
 10150  002C9C  0100               	movlb	0	; () banked
 10151  002C9E  6FE0               	movwf	_option_posi& (0+255),b
 10152                           
 10153                           ; BSR set to: 0
 10154                           ;tela_ESTACIONARIA.h: 47: }
 10155                           
 10156                           ;tela_ESTACIONARIA.h: 46: break;
 10157  002CA0  D00D               	goto	l867
 10158  002CA2                     l863:
 10159  002CA2  FFFF               	dw	65535	; assembler added errata NOP
 10160                           
 10161                           ; BSR set to: 0
 10162  002CA4  0100               	movlb	0	; () banked
 10163  002CA6  51E0               	movf	_option_posi& (0+255),w,b
 10164                           
 10165                           ; Switch size 1, requested type "space"
 10166                           ; Number of cases is 3, Range of values is 0 to 2
 10167                           ; switch strategies available:
 10168                           ; Name         Instructions Cycles
 10169                           ; simple_byte           10     6 (average)
 10170                           ;	Chosen strategy is simple_byte
 10171  002CA8  0A00               	xorlw	0	; case 0
 10172  002CAA  B4D8               	btfsc	status,2,c
 10173  002CAC  D79D               	goto	l864
 10174  002CAE  0A01               	xorlw	1	; case 1
 10175  002CB0  B4D8               	btfsc	status,2,c
 10176  002CB2  D7B8               	goto	l868
 10177  002CB4  0A03               	xorlw	3	; case 2
 10178  002CB6  B4D8               	btfsc	status,2,c
 10179  002CB8  D7D2               	goto	l871
 10180  002CBA  D7EE               	goto	l873
 10181  002CBC                     l867:
 10182  002CBC  FFFF               	dw	65535	; assembler added errata NOP
 10183                           
 10184                           ;tela_ESTACIONARIA.h: 50: if (btPress(4)) {
 10185                           
 10186                           ; BSR set to: 0
 10187  002CBE  0E04               	movlw	4
 10188  002CC0  ECE4  F03B         	call	_btPress
 10189  002CC4  0900               	iorlw	0
 10190  002CC6  B4D8               	btfsc	status,2,c
 10191  002CC8  D003               	goto	l874
 10192                           
 10193                           ;tela_ESTACIONARIA.h: 51: option_posi++;
 10194  002CCA  0100               	movlb	0	; () banked
 10195  002CCC  2BE0               	incf	_option_posi& (0+255),f,b
 10196                           
 10197                           ;tela_ESTACIONARIA.h: 52: } else if (btPress(1)) {
 10198  002CCE  D016               	goto	l876
 10199  002CD0                     l874:
 10200  002CD0  FFFF               	dw	65535	; assembler added errata NOP
 10201                           
 10202                           ; BSR set to: 0
 10203  002CD2  0E01               	movlw	1
 10204  002CD4  ECE4  F03B         	call	_btPress
 10205  002CD8  0900               	iorlw	0
 10206  002CDA  B4D8               	btfsc	status,2,c
 10207  002CDC  D00F               	goto	l876
 10208                           
 10209                           ;tela_ESTACIONARIA.h: 53: writeEEPROM_ext(7, tempo_limite_estacionaria);
 10210  002CDE  C0E6  F08C         	movff	_tempo_limite_estacionaria,writeEEPROM_ext@data
 10211  002CE2  0E07               	movlw	7
 10212  002CE4  EC1F  F039         	call	_writeEEPROM_ext
 10213                           
 10214                           ;tela_ESTACIONARIA.h: 54: writeEEPROM_ext(13, tempo_limite_teste_estacionaria);
 10215  002CE8  C0E5  F08C         	movff	_tempo_limite_teste_estacionaria,writeEEPROM_ext@data
 10216  002CEC  0E0D               	movlw	13
 10217  002CEE  EC1F  F039         	call	_writeEEPROM_ext
 10218                           
 10219                           ;tela_ESTACIONARIA.h: 55: option_posi = 0;
 10220  002CF2  0E00               	movlw	0
 10221  002CF4  0100               	movlb	0	; () banked
 10222  002CF6  6FE0               	movwf	_option_posi& (0+255),b
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;tela_ESTACIONARIA.h: 56: menu_posi = _menu_posi;
 10226  002CF8  C0DE  F0DF         	movff	__menu_posi,_menu_posi
 10227  002CFC                     l876:
 10228  002CFC  FFFF               	dw	65535	; assembler added errata NOP
 10229                           
 10230                           ; BSR set to: 0
 10231                           
 10232                           ; BSR set to: 0
 10233  002CFE  0012               	return		;funcret
 10234  002D00  FFFF               	dw	65535	; errata NOP
 10235  002D02                     __end_of_configurarEstacionaria:
 10236                           	opt stack 0
 10237                           tblptru	equ	0xFF8
 10238                           tblptrh	equ	0xFF7
 10239                           tblptrl	equ	0xFF6
 10240                           tablat	equ	0xFF5
 10241                           prodh	equ	0xFF4
 10242                           prodl	equ	0xFF3
 10243                           postinc0	equ	0xFEE
 10244                           wreg	equ	0xFE8
 10245                           postdec1	equ	0xFE5
 10246                           fsr1l	equ	0xFE1
 10247                           indf2	equ	0xFDF
 10248                           postinc2	equ	0xFDE
 10249                           postdec2	equ	0xFDD
 10250                           fsr2h	equ	0xFDA
 10251                           fsr2l	equ	0xFD9
 10252                           status	equ	0xFD8
 10253                           
 10254 ;; *************** function _configuraTelefones *****************
 10255 ;; Defined at:
 10256 ;;		line 9 in file "tela_TELEFONES.h"
 10257 ;; Parameters:    Size  Location     Type
 10258 ;;		None
 10259 ;; Auto vars:     Size  Location     Type
 10260 ;;  i               1   67[BANK0 ] unsigned char 
 10261 ;; Return value:  Size  Location     Type
 10262 ;;                  1    wreg      void 
 10263 ;; Registers used:
 10264 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10265 ;; Tracked objects:
 10266 ;;		On entry : 0/0
 10267 ;;		On exit  : 0/0
 10268 ;;		Unchanged: 0/0
 10269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10270 ;;      Params:         0       0       0       0       0       0       0
 10271 ;;      Locals:         0       3       0       0       0       0       0
 10272 ;;      Temps:          0       2       0       0       0       0       0
 10273 ;;      Totals:         0       5       0       0       0       0       0
 10274 ;;Total ram usage:        5 bytes
 10275 ;; Hardware stack levels used:    1
 10276 ;; Hardware stack levels required when called:   10
 10277 ;; This function calls:
 10278 ;;		_blink
 10279 ;;		_btPress
 10280 ;;		_comunicarTeste
 10281 ;;		_sprintf
 10282 ;;		_writeEEPROM_ext
 10283 ;; This function is called by:
 10284 ;;		_main
 10285 ;; This function uses a non-reentrant model
 10286 ;;
 10287                           
 10288                           	psect	text28
 10289  001384                     __ptext28:
 10290                           	opt stack 0
 10291  001384                     _configuraTelefones:
 10292                           	opt stack 0
 10293  001384  FFFF               	dw	65535	; assembler added errata NOP
 10294                           
 10295                           ;tela_TELEFONES.h: 10: sprintf(&line1[1], "T1: %s", tel1);
 10296                           
 10297                           ;incstack = 0
 10298  001386  0E9A               	movlw	low (_line1+1)
 10299  001388  0100               	movlb	0	; () banked
 10300  00138A  6FA1               	movwf	sprintf@wh& (0+255),b
 10301  00138C  0E01               	movlw	high (_line1+1)
 10302  00138E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10303  001390  0EB7               	movlw	low STR_95
 10304  001392  6FA3               	movwf	sprintf@f& (0+255),b
 10305  001394  0E7F               	movlw	high STR_95
 10306  001396  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10307  001398  0ECE               	movlw	low _tel1
 10308  00139A  6FA5               	movwf	(?_sprintf+4)& (0+255),b
 10309  00139C  0E01               	movlw	high _tel1
 10310  00139E  6FA6               	movwf	(?_sprintf+5)& (0+255),b
 10311  0013A0  EC42  F039         	call	_sprintf	;wreg free
 10312                           
 10313                           ;tela_TELEFONES.h: 11: sprintf(&line2[1], "T2: %s", tel2);
 10314  0013A4  0E85               	movlw	low (_line2+1)
 10315  0013A6  0100               	movlb	0	; () banked
 10316  0013A8  6FA1               	movwf	sprintf@wh& (0+255),b
 10317  0013AA  0E01               	movlw	high (_line2+1)
 10318  0013AC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10319  0013AE  0EBE               	movlw	low STR_96
 10320  0013B0  6FA3               	movwf	sprintf@f& (0+255),b
 10321  0013B2  0E7F               	movlw	high STR_96
 10322  0013B4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10323  0013B6  0EC2               	movlw	low _tel2
 10324  0013B8  6FA5               	movwf	(?_sprintf+4)& (0+255),b
 10325  0013BA  0E01               	movlw	high _tel2
 10326  0013BC  6FA6               	movwf	(?_sprintf+5)& (0+255),b
 10327  0013BE  EC42  F039         	call	_sprintf	;wreg free
 10328                           
 10329                           ;tela_TELEFONES.h: 12: sprintf(&line3[1], "%s", gsmOcupado ? " aguarde... " : "Enviar sm
      +                          s teste");
 10330  0013C2  0100               	movlb	0	; () banked
 10331  0013C4  51F4               	movf	_gsmOcupado& (0+255),w,b
 10332  0013C6  A4D8               	btfss	status,2,c
 10333  0013C8  D004               	goto	l821
 10334                           
 10335                           ; BSR set to: 0
 10336  0013CA  0EB1               	movlw	low STR_99
 10337  0013CC  6FC1               	movwf	_configuraTelefones$1641& (0+255),b
 10338  0013CE  0E7D               	movlw	high STR_99
 10339  0013D0  D004               	goto	L19
 10340  0013D2                     l821:
 10341  0013D2  FFFF               	dw	65535	; assembler added errata NOP
 10342                           
 10343                           ; BSR set to: 0
 10344                           
 10345                           ; BSR set to: 0
 10346  0013D4  0E93               	movlw	low STR_98
 10347  0013D6  6FC1               	movwf	_configuraTelefones$1641& (0+255),b
 10348  0013D8  0E7E               	movlw	high STR_98
 10349  0013DA                     L19:
 10350  0013DA  FFFF               	dw	65535	; assembler added errata NOP
 10351  0013DC  6FC2               	movwf	(_configuraTelefones$1641+1)& (0+255),b
 10352                           
 10353                           ; BSR set to: 0
 10354                           
 10355                           ; BSR set to: 0
 10356  0013DE  0E70               	movlw	low (_line3+1)
 10357  0013E0  6FA1               	movwf	sprintf@wh& (0+255),b
 10358  0013E2  0E01               	movlw	high (_line3+1)
 10359  0013E4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10360  0013E6  0EFE               	movlw	low (STR_93+9)
 10361  0013E8  6FA3               	movwf	sprintf@f& (0+255),b
 10362  0013EA  0E7E               	movlw	high (STR_93+9)
 10363  0013EC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10364  0013EE  C0C1  F0A5         	movff	_configuraTelefones$1641,?_sprintf+4
 10365  0013F2  C0C2  F0A6         	movff	_configuraTelefones$1641+1,?_sprintf+5
 10366  0013F6  EC42  F039         	call	_sprintf	;wreg free
 10367                           
 10368                           ;tela_TELEFONES.h: 14: if (ajust_tel == 0) {
 10369  0013FA  0100               	movlb	0	; () banked
 10370  0013FC  51DC               	movf	_ajust_tel& (0+255),w,b
 10371  0013FE  A4D8               	btfss	status,2,c
 10372  001400  D050               	goto	l829
 10373                           
 10374                           ; BSR set to: 0
 10375                           ;tela_TELEFONES.h: 15: if (btPress(3)) {
 10376  001402  0E03               	movlw	3
 10377  001404  ECE4  F03B         	call	_btPress
 10378  001408  0900               	iorlw	0
 10379  00140A  B4D8               	btfsc	status,2,c
 10380  00140C  D003               	goto	l825
 10381                           
 10382                           ;tela_TELEFONES.h: 16: option_posi--;
 10383  00140E  0100               	movlb	0	; () banked
 10384  001410  07E0               	decf	_option_posi& (0+255),f,b
 10385                           
 10386                           ;tela_TELEFONES.h: 17: } else if (btPress(2)) {
 10387  001412  D047               	goto	l829
 10388  001414                     l825:
 10389  001414  FFFF               	dw	65535	; assembler added errata NOP
 10390                           
 10391                           ; BSR set to: 0
 10392  001416  0E02               	movlw	2
 10393  001418  ECE4  F03B         	call	_btPress
 10394  00141C  0900               	iorlw	0
 10395  00141E  B4D8               	btfsc	status,2,c
 10396  001420  D003               	goto	l827
 10397                           
 10398                           ;tela_TELEFONES.h: 18: option_posi++;
 10399  001422  0100               	movlb	0	; () banked
 10400  001424  2BE0               	incf	_option_posi& (0+255),f,b
 10401                           
 10402                           ;tela_TELEFONES.h: 19: } else if (btPress(1)) {
 10403  001426  D03D               	goto	l829
 10404  001428                     l827:
 10405  001428  FFFF               	dw	65535	; assembler added errata NOP
 10406                           
 10407                           ; BSR set to: 0
 10408  00142A  0E01               	movlw	1
 10409  00142C  ECE4  F03B         	call	_btPress
 10410  001430  0900               	iorlw	0
 10411  001432  B4D8               	btfsc	status,2,c
 10412  001434  D036               	goto	l829
 10413                           
 10414                           ;tela_TELEFONES.h: 20: gsmOcupado = 0;
 10415  001436  0E00               	movlw	0
 10416  001438  0100               	movlb	0	; () banked
 10417  00143A  6FF4               	movwf	_gsmOcupado& (0+255),b
 10418                           
 10419                           ;tela_TELEFONES.h: 21: option_posi = 0;
 10420  00143C  0E00               	movlw	0
 10421  00143E  6FE0               	movwf	_option_posi& (0+255),b
 10422                           
 10423                           ;tela_TELEFONES.h: 22: tel_posi = 0;
 10424  001440  0E00               	movlw	0
 10425  001442  6FDD               	movwf	_tel_posi& (0+255),b
 10426                           
 10427                           ;tela_TELEFONES.h: 23: ajust_tel = 0;
 10428  001444  0E00               	movlw	0
 10429  001446  6FDC               	movwf	_ajust_tel& (0+255),b
 10430                           
 10431                           ;tela_TELEFONES.h: 24: char i = 0;
 10432  001448  0E00               	movlw	0
 10433  00144A  6FC3               	movwf	configuraTelefones@i& (0+255),b
 10434                           
 10435                           ;tela_TELEFONES.h: 25: for (i = 0; i < 11; i++) {
 10436  00144C  0E00               	movlw	0
 10437  00144E  6FC3               	movwf	configuraTelefones@i& (0+255),b
 10438  001450                     l7443:
 10439  001450  FFFF               	dw	65535	; assembler added errata NOP
 10440                           
 10441                           ; BSR set to: 0
 10442  001452  0E0A               	movlw	10
 10443  001454  65C3               	cpfsgt	configuraTelefones@i& (0+255),b
 10444  001456  D001               	goto	l830
 10445  001458  D021               	goto	u8240
 10446  00145A                     l830:
 10447  00145A  FFFF               	dw	65535	; assembler added errata NOP
 10448                           
 10449                           ; BSR set to: 0
 10450                           ;tela_TELEFONES.h: 26: writeEEPROM_ext((20 + i), tel1[i]);
 10451                           
 10452                           ; BSR set to: 0
 10453  00145C  51C3               	movf	configuraTelefones@i& (0+255),w,b
 10454  00145E  0D01               	mullw	1
 10455  001460  0ECE               	movlw	low _tel1
 10456  001462  24F3               	addwf	prodl,w,c
 10457  001464  6ED9               	movwf	fsr2l,c
 10458  001466  0E01               	movlw	high _tel1
 10459  001468  20F4               	addwfc	prodh,w,c
 10460  00146A  6EDA               	movwf	fsr2h,c
 10461  00146C  50DF               	movf	indf2,w,c
 10462  00146E  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
 10463  001470  51C3               	movf	configuraTelefones@i& (0+255),w,b
 10464  001472  0F14               	addlw	20
 10465  001474  EC1F  F039         	call	_writeEEPROM_ext
 10466                           
 10467                           ;tela_TELEFONES.h: 27: writeEEPROM_ext((40 + i), tel2[i]);
 10468  001478  0100               	movlb	0	; () banked
 10469  00147A  51C3               	movf	configuraTelefones@i& (0+255),w,b
 10470  00147C  0D01               	mullw	1
 10471  00147E  0EC2               	movlw	low _tel2
 10472  001480  24F3               	addwf	prodl,w,c
 10473  001482  6ED9               	movwf	fsr2l,c
 10474  001484  0E01               	movlw	high _tel2
 10475  001486  20F4               	addwfc	prodh,w,c
 10476  001488  6EDA               	movwf	fsr2h,c
 10477  00148A  50DF               	movf	indf2,w,c
 10478  00148C  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
 10479  00148E  51C3               	movf	configuraTelefones@i& (0+255),w,b
 10480  001490  0F28               	addlw	40
 10481  001492  EC1F  F039         	call	_writeEEPROM_ext
 10482  001496  0100               	movlb	0	; () banked
 10483  001498  2BC3               	incf	configuraTelefones@i& (0+255),f,b
 10484  00149A  D7DA               	goto	l7443
 10485  00149C                     u8240:
 10486  00149C  FFFF               	dw	65535	; assembler added errata NOP
 10487                           
 10488                           ; BSR set to: 0
 10489                           ;tela_TELEFONES.h: 28: }
 10490                           ;tela_TELEFONES.h: 29: menu_posi = _menu_posi;
 10491  00149E  C0DE  F0DF         	movff	__menu_posi,_menu_posi
 10492  0014A2                     l829:
 10493  0014A2  FFFF               	dw	65535	; assembler added errata NOP
 10494                           
 10495                           ;tela_TELEFONES.h: 30: }
 10496                           ;tela_TELEFONES.h: 31: }
 10497                           ;tela_TELEFONES.h: 32: if (ajust_tel == 1) {
 10498                           
 10499                           ; BSR set to: 0
 10500                           
 10501                           ; BSR set to: 0
 10502                           
 10503                           ; BSR set to: 0
 10504                           
 10505                           ; BSR set to: 0
 10506  0014A4  0100               	movlb	0	; () banked
 10507  0014A6  05DC               	decf	_ajust_tel& (0+255),w,b
 10508  0014A8  A4D8               	btfss	status,2,c
 10509  0014AA  D13B               	goto	l836
 10510                           
 10511                           ; BSR set to: 0
 10512                           ;tela_TELEFONES.h: 33: if (btPress(4)) {
 10513  0014AC  0E04               	movlw	4
 10514  0014AE  ECE4  F03B         	call	_btPress
 10515  0014B2  0900               	iorlw	0
 10516  0014B4  B4D8               	btfsc	status,2,c
 10517  0014B6  D003               	goto	l833
 10518                           
 10519                           ;tela_TELEFONES.h: 34: tel_posi++;
 10520  0014B8  0100               	movlb	0	; () banked
 10521  0014BA  2BDD               	incf	_tel_posi& (0+255),f,b
 10522                           
 10523                           ;tela_TELEFONES.h: 35: } else if (btPress(1)) {
 10524  0014BC  D132               	goto	l836
 10525  0014BE                     l833:
 10526  0014BE  FFFF               	dw	65535	; assembler added errata NOP
 10527                           
 10528                           ; BSR set to: 0
 10529  0014C0  0E01               	movlw	1
 10530  0014C2  ECE4  F03B         	call	_btPress
 10531  0014C6  0900               	iorlw	0
 10532  0014C8  B4D8               	btfsc	status,2,c
 10533  0014CA  D12B               	goto	l836
 10534                           
 10535                           ;tela_TELEFONES.h: 36: tel_posi = 0;
 10536  0014CC  0E00               	movlw	0
 10537  0014CE  0100               	movlb	0	; () banked
 10538  0014D0  6FDD               	movwf	_tel_posi& (0+255),b
 10539                           
 10540                           ;tela_TELEFONES.h: 37: ajust_tel = 0;
 10541  0014D2  0E00               	movlw	0
 10542  0014D4  6FDC               	movwf	_ajust_tel& (0+255),b
 10543                           
 10544                           ; BSR set to: 0
 10545                           ;tela_TELEFONES.h: 38: }
 10546                           ;tela_TELEFONES.h: 39: }
 10547                           ;tela_TELEFONES.h: 41: switch (option_posi) {
 10548                           
 10549                           ; BSR set to: 0
 10550                           
 10551                           ; BSR set to: 0
 10552  0014D6  D125               	goto	l836
 10553  0014D8  FFFF               	dw	65535	; assembler added errata NOP
 10554                           
 10555                           ; BSR set to: 0
 10556                           ;tela_TELEFONES.h: 43: line1[0] = '>';
 10557                           
 10558                           ; BSR set to: 0
 10559  0014DA  0E3E               	movlw	62
 10560  0014DC  0101               	movlb	1	; () banked
 10561  0014DE  6F99               	movwf	_line1& (0+255),b
 10562                           
 10563                           ; BSR set to: 1
 10564                           ;tela_TELEFONES.h: 44: blink(line1,1,1);
 10565  0014E0  0E99               	movlw	low _line1
 10566  0014E2  0100               	movlb	0	; () banked
 10567  0014E4  6F80               	movwf	blink@line& (0+255),b
 10568  0014E6  0E01               	movlw	high _line1
 10569  0014E8  6F81               	movwf	(blink@line+1)& (0+255),b
 10570  0014EA  0E01               	movlw	1
 10571  0014EC  6F82               	movwf	blink@start& (0+255),b
 10572  0014EE  0E01               	movlw	1
 10573  0014F0  6F83               	movwf	blink@end& (0+255),b
 10574  0014F2  EC3F  F038         	call	_blink	;wreg free
 10575                           
 10576                           ;tela_TELEFONES.h: 45: if (btPress(4)) {
 10577  0014F6  0E04               	movlw	4
 10578  0014F8  ECE4  F03B         	call	_btPress
 10579  0014FC  0900               	iorlw	0
 10580  0014FE  B4D8               	btfsc	status,2,c
 10581  001500  D003               	goto	l838
 10582                           
 10583                           ;tela_TELEFONES.h: 46: ajust_tel = 1;
 10584  001502  0E01               	movlw	1
 10585  001504  0100               	movlb	0	; () banked
 10586  001506  6FDC               	movwf	_ajust_tel& (0+255),b
 10587  001508                     l838:
 10588  001508  FFFF               	dw	65535	; assembler added errata NOP
 10589                           
 10590                           ;tela_TELEFONES.h: 47: }
 10591                           ;tela_TELEFONES.h: 48: if (ajust_tel) {
 10592  00150A  0100               	movlb	0	; () banked
 10593  00150C  51DC               	movf	_ajust_tel& (0+255),w,b
 10594  00150E  B4D8               	btfsc	status,2,c
 10595  001510  D115               	goto	l846
 10596                           
 10597                           ; BSR set to: 0
 10598                           ;tela_TELEFONES.h: 49: blink(line1, (tel_posi + 6), (tel_posi + 6));
 10599  001512  0E99               	movlw	low _line1
 10600  001514  6F80               	movwf	blink@line& (0+255),b
 10601  001516  0E01               	movlw	high _line1
 10602  001518  6F81               	movwf	(blink@line+1)& (0+255),b
 10603  00151A  51DD               	movf	_tel_posi& (0+255),w,b
 10604  00151C  0F06               	addlw	6
 10605  00151E  6F82               	movwf	blink@start& (0+255),b
 10606  001520  51DD               	movf	_tel_posi& (0+255),w,b
 10607  001522  0F06               	addlw	6
 10608  001524  6F83               	movwf	blink@end& (0+255),b
 10609  001526  EC3F  F038         	call	_blink	;wreg free
 10610                           
 10611                           ;tela_TELEFONES.h: 50: if ((tel_posi + 2) > sizeof (tel1)) {
 10612  00152A  0100               	movlb	0	; () banked
 10613  00152C  51DD               	movf	_tel_posi& (0+255),w,b
 10614  00152E  6FBF               	movwf	??_configuraTelefones& (0+255),b
 10615  001530  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
 10616  001532  0E02               	movlw	2
 10617  001534  27BF               	addwf	??_configuraTelefones& (0+255),f,b
 10618  001536  0E00               	movlw	0
 10619  001538  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
 10620  00153A  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
 10621  00153C  E104               	bnz	u8300
 10622  00153E  0E0D               	movlw	13
 10623  001540  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
 10624  001542  A0D8               	btfss	status,0,c
 10625  001544  D004               	goto	l840
 10626  001546                     u8300:
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;tela_TELEFONES.h: 51: tel_posi = 0;
 10630  001546  0E00               	movlw	0
 10631  001548  6FDD               	movwf	_tel_posi& (0+255),b
 10632                           
 10633                           ;tela_TELEFONES.h: 52: ajust_tel = 0;
 10634  00154A  0E00               	movlw	0
 10635  00154C  6FDC               	movwf	_ajust_tel& (0+255),b
 10636  00154E                     l840:
 10637  00154E  FFFF               	dw	65535	; assembler added errata NOP
 10638                           
 10639                           ; BSR set to: 0
 10640                           ;tela_TELEFONES.h: 53: }
 10641                           ;tela_TELEFONES.h: 54: if (btPress(3)) {
 10642                           
 10643                           ; BSR set to: 0
 10644  001550  0E03               	movlw	3
 10645  001552  ECE4  F03B         	call	_btPress
 10646  001556  0900               	iorlw	0
 10647  001558  B4D8               	btfsc	status,2,c
 10648  00155A  D00A               	goto	l841
 10649                           
 10650                           ;tela_TELEFONES.h: 55: tel1[tel_posi]++;
 10651  00155C  0100               	movlb	0	; () banked
 10652  00155E  51DD               	movf	_tel_posi& (0+255),w,b
 10653  001560  0D01               	mullw	1
 10654  001562  0ECE               	movlw	low _tel1
 10655  001564  24F3               	addwf	prodl,w,c
 10656  001566  6ED9               	movwf	fsr2l,c
 10657  001568  0E01               	movlw	high _tel1
 10658  00156A  20F4               	addwfc	prodh,w,c
 10659  00156C  6EDA               	movwf	fsr2h,c
 10660  00156E  2ADF               	incf	indf2,f,c
 10661  001570                     l841:
 10662  001570  FFFF               	dw	65535	; assembler added errata NOP
 10663                           
 10664                           ;tela_TELEFONES.h: 56: }
 10665                           ;tela_TELEFONES.h: 57: if (btPress(2)) {
 10666                           
 10667                           ; BSR set to: 0
 10668  001572  0E02               	movlw	2
 10669  001574  ECE4  F03B         	call	_btPress
 10670  001578  0900               	iorlw	0
 10671  00157A  B4D8               	btfsc	status,2,c
 10672  00157C  D00A               	goto	l842
 10673                           
 10674                           ;tela_TELEFONES.h: 58: tel1[tel_posi]--;
 10675  00157E  0100               	movlb	0	; () banked
 10676  001580  51DD               	movf	_tel_posi& (0+255),w,b
 10677  001582  0D01               	mullw	1
 10678  001584  0ECE               	movlw	low _tel1
 10679  001586  24F3               	addwf	prodl,w,c
 10680  001588  6ED9               	movwf	fsr2l,c
 10681  00158A  0E01               	movlw	high _tel1
 10682  00158C  20F4               	addwfc	prodh,w,c
 10683  00158E  6EDA               	movwf	fsr2h,c
 10684  001590  06DF               	decf	indf2,f,c
 10685  001592                     l842:
 10686  001592  FFFF               	dw	65535	; assembler added errata NOP
 10687                           
 10688                           ;tela_TELEFONES.h: 59: }
 10689                           ;tela_TELEFONES.h: 60: if ((tel1[tel_posi] > 57) | (tel1[tel_posi] < 48)) {
 10690  001594  0100               	movlb	0	; () banked
 10691  001596  51DD               	movf	_tel_posi& (0+255),w,b
 10692  001598  0D01               	mullw	1
 10693  00159A  0ECE               	movlw	low _tel1
 10694  00159C  24F3               	addwf	prodl,w,c
 10695  00159E  6ED9               	movwf	fsr2l,c
 10696  0015A0  0E01               	movlw	high _tel1
 10697  0015A2  20F4               	addwfc	prodh,w,c
 10698  0015A4  6EDA               	movwf	fsr2h,c
 10699  0015A6  0E3A               	movlw	58
 10700  0015A8  60DF               	cpfslt	indf2,c
 10701  0015AA  D00B               	goto	u8340
 10702                           
 10703                           ; BSR set to: 0
 10704  0015AC  51DD               	movf	_tel_posi& (0+255),w,b
 10705  0015AE  0D01               	mullw	1
 10706  0015B0  0ECE               	movlw	low _tel1
 10707  0015B2  24F3               	addwf	prodl,w,c
 10708  0015B4  6ED9               	movwf	fsr2l,c
 10709  0015B6  0E01               	movlw	high _tel1
 10710  0015B8  20F4               	addwfc	prodh,w,c
 10711  0015BA  6EDA               	movwf	fsr2h,c
 10712  0015BC  0E30               	movlw	48
 10713  0015BE  60DF               	cpfslt	indf2,c
 10714  0015C0  D0BD               	goto	l846
 10715  0015C2                     u8340:
 10716  0015C2  FFFF               	dw	65535	; assembler added errata NOP
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;tela_TELEFONES.h: 61: tel1[tel_posi] = 48;
 10720                           
 10721                           ; BSR set to: 0
 10722  0015C4  51DD               	movf	_tel_posi& (0+255),w,b
 10723  0015C6  0D01               	mullw	1
 10724  0015C8  0ECE               	movlw	low _tel1
 10725  0015CA  24F3               	addwf	prodl,w,c
 10726  0015CC  6ED9               	movwf	fsr2l,c
 10727  0015CE  0E01               	movlw	high _tel1
 10728  0015D0  D07C               	goto	L20
 10729  0015D2  FFFF               	dw	65535	; assembler added errata NOP
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;tela_TELEFONES.h: 66: line2[0] = '>';
 10733                           
 10734                           ; BSR set to: 0
 10735  0015D4  0E3E               	movlw	62
 10736  0015D6  0101               	movlb	1	; () banked
 10737  0015D8  6F84               	movwf	_line2& (0+255),b
 10738                           
 10739                           ; BSR set to: 1
 10740                           ;tela_TELEFONES.h: 67: blink(line2,1,1);
 10741  0015DA  0E84               	movlw	low _line2
 10742  0015DC  0100               	movlb	0	; () banked
 10743  0015DE  6F80               	movwf	blink@line& (0+255),b
 10744  0015E0  0E01               	movlw	high _line2
 10745  0015E2  6F81               	movwf	(blink@line+1)& (0+255),b
 10746  0015E4  0E01               	movlw	1
 10747  0015E6  6F82               	movwf	blink@start& (0+255),b
 10748  0015E8  0E01               	movlw	1
 10749  0015EA  6F83               	movwf	blink@end& (0+255),b
 10750  0015EC  EC3F  F038         	call	_blink	;wreg free
 10751                           
 10752                           ;tela_TELEFONES.h: 68: if (btPress(4)) {
 10753  0015F0  0E04               	movlw	4
 10754  0015F2  ECE4  F03B         	call	_btPress
 10755  0015F6  0900               	iorlw	0
 10756  0015F8  B4D8               	btfsc	status,2,c
 10757  0015FA  D003               	goto	l848
 10758                           
 10759                           ;tela_TELEFONES.h: 69: ajust_tel = 1;
 10760  0015FC  0E01               	movlw	1
 10761  0015FE  0100               	movlb	0	; () banked
 10762  001600  6FDC               	movwf	_ajust_tel& (0+255),b
 10763  001602                     l848:
 10764  001602  FFFF               	dw	65535	; assembler added errata NOP
 10765                           
 10766                           ;tela_TELEFONES.h: 70: }
 10767                           ;tela_TELEFONES.h: 71: if (ajust_tel) {
 10768  001604  0100               	movlb	0	; () banked
 10769  001606  51DC               	movf	_ajust_tel& (0+255),w,b
 10770  001608  B4D8               	btfsc	status,2,c
 10771  00160A  D098               	goto	l846
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;tela_TELEFONES.h: 72: blink(line2, (tel_posi + 6), (tel_posi + 6));
 10775  00160C  0E84               	movlw	low _line2
 10776  00160E  6F80               	movwf	blink@line& (0+255),b
 10777  001610  0E01               	movlw	high _line2
 10778  001612  6F81               	movwf	(blink@line+1)& (0+255),b
 10779  001614  51DD               	movf	_tel_posi& (0+255),w,b
 10780  001616  0F06               	addlw	6
 10781  001618  6F82               	movwf	blink@start& (0+255),b
 10782  00161A  51DD               	movf	_tel_posi& (0+255),w,b
 10783  00161C  0F06               	addlw	6
 10784  00161E  6F83               	movwf	blink@end& (0+255),b
 10785  001620  EC3F  F038         	call	_blink	;wreg free
 10786                           
 10787                           ;tela_TELEFONES.h: 73: if ((tel_posi + 2) > sizeof (tel2)) {
 10788  001624  0100               	movlb	0	; () banked
 10789  001626  51DD               	movf	_tel_posi& (0+255),w,b
 10790  001628  6FBF               	movwf	??_configuraTelefones& (0+255),b
 10791  00162A  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
 10792  00162C  0E02               	movlw	2
 10793  00162E  27BF               	addwf	??_configuraTelefones& (0+255),f,b
 10794  001630  0E00               	movlw	0
 10795  001632  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
 10796  001634  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
 10797  001636  E104               	bnz	u8370
 10798  001638  0E0D               	movlw	13
 10799  00163A  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
 10800  00163C  A0D8               	btfss	status,0,c
 10801  00163E  D004               	goto	l850
 10802  001640                     u8370:
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;tela_TELEFONES.h: 74: tel_posi = 0;
 10806  001640  0E00               	movlw	0
 10807  001642  6FDD               	movwf	_tel_posi& (0+255),b
 10808                           
 10809                           ;tela_TELEFONES.h: 75: ajust_tel = 0;
 10810  001644  0E00               	movlw	0
 10811  001646  6FDC               	movwf	_ajust_tel& (0+255),b
 10812  001648                     l850:
 10813  001648  FFFF               	dw	65535	; assembler added errata NOP
 10814                           
 10815                           ; BSR set to: 0
 10816                           ;tela_TELEFONES.h: 76: }
 10817                           ;tela_TELEFONES.h: 77: if (btPress(3)) {
 10818                           
 10819                           ; BSR set to: 0
 10820  00164A  0E03               	movlw	3
 10821  00164C  ECE4  F03B         	call	_btPress
 10822  001650  0900               	iorlw	0
 10823  001652  B4D8               	btfsc	status,2,c
 10824  001654  D00A               	goto	l851
 10825                           
 10826                           ;tela_TELEFONES.h: 78: tel2[tel_posi]++;
 10827  001656  0100               	movlb	0	; () banked
 10828  001658  51DD               	movf	_tel_posi& (0+255),w,b
 10829  00165A  0D01               	mullw	1
 10830  00165C  0EC2               	movlw	low _tel2
 10831  00165E  24F3               	addwf	prodl,w,c
 10832  001660  6ED9               	movwf	fsr2l,c
 10833  001662  0E01               	movlw	high _tel2
 10834  001664  20F4               	addwfc	prodh,w,c
 10835  001666  6EDA               	movwf	fsr2h,c
 10836  001668  2ADF               	incf	indf2,f,c
 10837  00166A                     l851:
 10838  00166A  FFFF               	dw	65535	; assembler added errata NOP
 10839                           
 10840                           ;tela_TELEFONES.h: 79: }
 10841                           ;tela_TELEFONES.h: 80: if (btPress(2)) {
 10842                           
 10843                           ; BSR set to: 0
 10844  00166C  0E02               	movlw	2
 10845  00166E  ECE4  F03B         	call	_btPress
 10846  001672  0900               	iorlw	0
 10847  001674  B4D8               	btfsc	status,2,c
 10848  001676  D00A               	goto	l852
 10849                           
 10850                           ;tela_TELEFONES.h: 81: tel2[tel_posi]--;
 10851  001678  0100               	movlb	0	; () banked
 10852  00167A  51DD               	movf	_tel_posi& (0+255),w,b
 10853  00167C  0D01               	mullw	1
 10854  00167E  0EC2               	movlw	low _tel2
 10855  001680  24F3               	addwf	prodl,w,c
 10856  001682  6ED9               	movwf	fsr2l,c
 10857  001684  0E01               	movlw	high _tel2
 10858  001686  20F4               	addwfc	prodh,w,c
 10859  001688  6EDA               	movwf	fsr2h,c
 10860  00168A  06DF               	decf	indf2,f,c
 10861  00168C                     l852:
 10862  00168C  FFFF               	dw	65535	; assembler added errata NOP
 10863                           
 10864                           ;tela_TELEFONES.h: 82: }
 10865                           ;tela_TELEFONES.h: 83: if ((tel2[tel_posi] > 57) | (tel2[tel_posi] < 48)) {
 10866  00168E  0100               	movlb	0	; () banked
 10867  001690  51DD               	movf	_tel_posi& (0+255),w,b
 10868  001692  0D01               	mullw	1
 10869  001694  0EC2               	movlw	low _tel2
 10870  001696  24F3               	addwf	prodl,w,c
 10871  001698  6ED9               	movwf	fsr2l,c
 10872  00169A  0E01               	movlw	high _tel2
 10873  00169C  20F4               	addwfc	prodh,w,c
 10874  00169E  6EDA               	movwf	fsr2h,c
 10875  0016A0  0E3A               	movlw	58
 10876  0016A2  60DF               	cpfslt	indf2,c
 10877  0016A4  D00B               	goto	u8410
 10878                           
 10879                           ; BSR set to: 0
 10880  0016A6  51DD               	movf	_tel_posi& (0+255),w,b
 10881  0016A8  0D01               	mullw	1
 10882  0016AA  0EC2               	movlw	low _tel2
 10883  0016AC  24F3               	addwf	prodl,w,c
 10884  0016AE  6ED9               	movwf	fsr2l,c
 10885  0016B0  0E01               	movlw	high _tel2
 10886  0016B2  20F4               	addwfc	prodh,w,c
 10887  0016B4  6EDA               	movwf	fsr2h,c
 10888  0016B6  0E30               	movlw	48
 10889  0016B8  60DF               	cpfslt	indf2,c
 10890  0016BA  D040               	goto	l846
 10891  0016BC                     u8410:
 10892  0016BC  FFFF               	dw	65535	; assembler added errata NOP
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;tela_TELEFONES.h: 84: tel2[tel_posi] = 48;
 10896                           
 10897                           ; BSR set to: 0
 10898  0016BE  51DD               	movf	_tel_posi& (0+255),w,b
 10899  0016C0  0D01               	mullw	1
 10900  0016C2  0EC2               	movlw	low _tel2
 10901  0016C4  24F3               	addwf	prodl,w,c
 10902  0016C6  6ED9               	movwf	fsr2l,c
 10903  0016C8  0E01               	movlw	high _tel2
 10904  0016CA                     L20:
 10905  0016CA  FFFF               	dw	65535	; assembler added errata NOP
 10906  0016CC  20F4               	addwfc	prodh,w,c
 10907  0016CE  6EDA               	movwf	fsr2h,c
 10908  0016D0  0E30               	movlw	48
 10909  0016D2  6EDF               	movwf	indf2,c
 10910                           
 10911                           ; BSR set to: 0
 10912                           ;tela_TELEFONES.h: 85: }
 10913                           ;tela_TELEFONES.h: 86: }
 10914                           ;tela_TELEFONES.h: 87: break;
 10915                           
 10916                           ; BSR set to: 0
 10917  0016D4  D033               	goto	l846
 10918  0016D6  FFFF               	dw	65535	; assembler added errata NOP
 10919                           
 10920                           ; BSR set to: 0
 10921                           ;tela_TELEFONES.h: 89: line3[0] = '>';
 10922                           
 10923                           ; BSR set to: 0
 10924  0016D8  0E3E               	movlw	62
 10925  0016DA  0101               	movlb	1	; () banked
 10926  0016DC  6F6F               	movwf	_line3& (0+255),b
 10927                           
 10928                           ; BSR set to: 1
 10929                           ;tela_TELEFONES.h: 90: blink(line3,1,1);
 10930  0016DE  0E6F               	movlw	low _line3
 10931  0016E0  0100               	movlb	0	; () banked
 10932  0016E2  6F80               	movwf	blink@line& (0+255),b
 10933  0016E4  0E01               	movlw	high _line3
 10934  0016E6  6F81               	movwf	(blink@line+1)& (0+255),b
 10935  0016E8  0E01               	movlw	1
 10936  0016EA  6F82               	movwf	blink@start& (0+255),b
 10937  0016EC  0E01               	movlw	1
 10938  0016EE  6F83               	movwf	blink@end& (0+255),b
 10939  0016F0  EC3F  F038         	call	_blink	;wreg free
 10940                           
 10941                           ;tela_TELEFONES.h: 91: if (btPress(4) && intensidadeSinal != 'x' && !gsmOcupado) {
 10942  0016F4  0E04               	movlw	4
 10943  0016F6  ECE4  F03B         	call	_btPress
 10944  0016FA  0900               	iorlw	0
 10945  0016FC  B4D8               	btfsc	status,2,c
 10946  0016FE  D01E               	goto	l846
 10947  001700  0E78               	movlw	120
 10948  001702  0100               	movlb	0	; () banked
 10949  001704  19FF               	xorwf	_intensidadeSinal& (0+255),w,b
 10950  001706  B4D8               	btfsc	status,2,c
 10951  001708  D019               	goto	l846
 10952                           
 10953                           ; BSR set to: 0
 10954  00170A  51F4               	movf	_gsmOcupado& (0+255),w,b
 10955  00170C  A4D8               	btfss	status,2,c
 10956  00170E  D016               	goto	l846
 10957                           
 10958                           ; BSR set to: 0
 10959                           ;tela_TELEFONES.h: 92: gsmOcupado = 1;
 10960  001710  0E01               	movlw	1
 10961  001712  6FF4               	movwf	_gsmOcupado& (0+255),b
 10962                           
 10963                           ;tela_TELEFONES.h: 93: telefoneSelecionado = 0;
 10964  001714  0E00               	movlw	0
 10965  001716  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 10966                           
 10967                           ; BSR set to: 0
 10968                           ;tela_TELEFONES.h: 94: }
 10969                           ;tela_TELEFONES.h: 95: break;
 10970  001718  D011               	goto	l846
 10971  00171A  FFFF               	dw	65535	; assembler added errata NOP
 10972                           
 10973                           ; BSR set to: 0
 10974                           
 10975                           ; BSR set to: 0
 10976  00171C  0E00               	movlw	0
 10977  00171E  6FE0               	movwf	_option_posi& (0+255),b
 10978                           
 10979                           ; BSR set to: 0
 10980                           ;tela_TELEFONES.h: 99: }
 10981                           
 10982                           ;tela_TELEFONES.h: 98: break;
 10983  001720  D00D               	goto	l846
 10984  001722                     l836:
 10985  001722  FFFF               	dw	65535	; assembler added errata NOP
 10986                           
 10987                           ; BSR set to: 0
 10988  001724  0100               	movlb	0	; () banked
 10989  001726  51E0               	movf	_option_posi& (0+255),w,b
 10990                           
 10991                           ; Switch size 1, requested type "space"
 10992                           ; Number of cases is 3, Range of values is 0 to 2
 10993                           ; switch strategies available:
 10994                           ; Name         Instructions Cycles
 10995                           ; simple_byte           10     6 (average)
 10996                           ;	Chosen strategy is simple_byte
 10997  001728  0A00               	xorlw	0	; case 0
 10998  00172A  B4D8               	btfsc	status,2,c
 10999  00172C  D6D5               	goto	l837
 11000  00172E  0A01               	xorlw	1	; case 1
 11001  001730  B4D8               	btfsc	status,2,c
 11002  001732  D74F               	goto	l847
 11003  001734  0A03               	xorlw	3	; case 2
 11004  001736  B4D8               	btfsc	status,2,c
 11005  001738  D7CE               	goto	l856
 11006  00173A  D7EF               	goto	l858
 11007  00173C                     l846:
 11008  00173C  FFFF               	dw	65535	; assembler added errata NOP
 11009                           
 11010                           ;tela_TELEFONES.h: 100: if (gsmOcupado) {
 11011                           
 11012                           ; BSR set to: 0
 11013  00173E  0100               	movlb	0	; () banked
 11014  001740  51F4               	movf	_gsmOcupado& (0+255),w,b
 11015  001742  A4D8               	btfss	status,2,c
 11016                           
 11017                           ; BSR set to: 0
 11018                           ;tela_TELEFONES.h: 101: comunicarTeste();
 11019  001744  ECEA  F012         	call	_comunicarTeste	;wreg free
 11020  001748  0012               	return		;funcret
 11021  00174A  FFFF               	dw	65535	; errata NOP
 11022  00174C                     __end_of_configuraTelefones:
 11023                           	opt stack 0
 11024                           tblptru	equ	0xFF8
 11025                           tblptrh	equ	0xFF7
 11026                           tblptrl	equ	0xFF6
 11027                           tablat	equ	0xFF5
 11028                           prodh	equ	0xFF4
 11029                           prodl	equ	0xFF3
 11030                           postinc0	equ	0xFEE
 11031                           wreg	equ	0xFE8
 11032                           postdec1	equ	0xFE5
 11033                           fsr1l	equ	0xFE1
 11034                           indf2	equ	0xFDF
 11035                           postinc2	equ	0xFDE
 11036                           postdec2	equ	0xFDD
 11037                           fsr2h	equ	0xFDA
 11038                           fsr2l	equ	0xFD9
 11039                           status	equ	0xFD8
 11040                           
 11041 ;; *************** function _comunicarTeste *****************
 11042 ;; Defined at:
 11043 ;;		line 66 in file "comunicacao.h"
 11044 ;; Parameters:    Size  Location     Type
 11045 ;;		None
 11046 ;; Auto vars:     Size  Location     Type
 11047 ;;		None
 11048 ;; Return value:  Size  Location     Type
 11049 ;;                  1    wreg      void 
 11050 ;; Registers used:
 11051 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11052 ;; Tracked objects:
 11053 ;;		On entry : 0/0
 11054 ;;		On exit  : 0/0
 11055 ;;		Unchanged: 0/0
 11056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11057 ;;      Params:         0       0       0       0       0       0       0
 11058 ;;      Locals:         0       2       0       0       0       0       0
 11059 ;;      Temps:          0       2       0       0       0       0       0
 11060 ;;      Totals:         0       4       0       0       0       0       0
 11061 ;;Total ram usage:        4 bytes
 11062 ;; Hardware stack levels used:    1
 11063 ;; Hardware stack levels required when called:    9
 11064 ;; This function calls:
 11065 ;;		_aguardaBuffer
 11066 ;;		_delay
 11067 ;;		_limparBuffer
 11068 ;;		_printf
 11069 ;;		_writeChar
 11070 ;; This function is called by:
 11071 ;;		_configuraTelefones
 11072 ;; This function uses a non-reentrant model
 11073 ;;
 11074                           
 11075                           	psect	text29
 11076  0025D4                     __ptext29:
 11077                           	opt stack 0
 11078  0025D4                     _comunicarTeste:
 11079                           	opt stack 0
 11080  0025D4  FFFF               	dw	65535	; assembler added errata NOP
 11081                           
 11082                           ;comunicacao.h: 67: switch (etapaComunicacao) {
 11083                           
 11084                           ;incstack = 0
 11085  0025D6  D0D1               	goto	l335
 11086  0025D8  FFFF               	dw	65535	; assembler added errata NOP
 11087                           
 11088                           ;comunicacao.h: 69: limparBuffer();
 11089  0025DA  EC3B  F037         	call	_limparBuffer	;wreg free
 11090                           
 11091                           ;comunicacao.h: 70: printf("AT\r\n");
 11092  0025DE  0EDD               	movlw	low STR_4
 11093  0025E0  0100               	movlb	0	; () banked
 11094  0025E2  6FA1               	movwf	printf@f& (0+255),b
 11095  0025E4  0E7F               	movlw	high STR_4
 11096  0025E6  6FA2               	movwf	(printf@f+1)& (0+255),b
 11097  0025E8  EC21  F038         	call	_printf	;wreg free
 11098                           
 11099                           ;comunicacao.h: 71: etapaComunicacao++;
 11100  0025EC  4A62               	infsnz	_etapaComunicacao,f,c
 11101  0025EE  2A63               	incf	_etapaComunicacao+1,f,c
 11102                           
 11103                           ;comunicacao.h: 72: timerEtapaComunicacao = 5;
 11104  0025F0  0E05               	movlw	5
 11105  0025F2  0100               	movlb	0	; () banked
 11106  0025F4  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 11107                           
 11108                           ;comunicacao.h: 73: break;
 11109  0025F6  D0DC               	goto	l337
 11110  0025F8  FFFF               	dw	65535	; assembler added errata NOP
 11111                           
 11112                           ; BSR set to: 0
 11113                           ;comunicacao.h: 75: if (aguardaBuffer("OK")) {
 11114                           
 11115                           ; BSR set to: 0
 11116  0025FA  0EF9               	movlw	low STR_5
 11117  0025FC  6F93               	movwf	aguardaBuffer@str& (0+255),b
 11118  0025FE  0E7F               	movlw	high STR_5
 11119  002600  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 11120  002602  EC03  F038         	call	_aguardaBuffer	;wreg free
 11121  002606  0900               	iorlw	0
 11122  002608  B4D8               	btfsc	status,2,c
 11123  00260A  D00E               	goto	l339
 11124                           
 11125                           ;comunicacao.h: 76: limparBuffer();
 11126  00260C  EC3B  F037         	call	_limparBuffer	;wreg free
 11127                           
 11128                           ;comunicacao.h: 77: printf("AT+CMGF=1\r\n");
 11129  002610  0EAD               	movlw	low STR_10
 11130  002612  0100               	movlb	0	; () banked
 11131  002614  6FA1               	movwf	printf@f& (0+255),b
 11132  002616  0E7E               	movlw	high STR_10
 11133  002618  6FA2               	movwf	(printf@f+1)& (0+255),b
 11134  00261A  EC21  F038         	call	_printf	;wreg free
 11135                           
 11136                           ;comunicacao.h: 78: etapaComunicacao++;
 11137  00261E  4A62               	infsnz	_etapaComunicacao,f,c
 11138  002620  2A63               	incf	_etapaComunicacao+1,f,c
 11139                           
 11140                           ;comunicacao.h: 79: timerEtapaComunicacao = 5;
 11141  002622  0E05               	movlw	5
 11142  002624  0100               	movlb	0	; () banked
 11143  002626  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 11144  002628                     l339:
 11145  002628  FFFF               	dw	65535	; assembler added errata NOP
 11146                           
 11147                           ;comunicacao.h: 80: }
 11148                           ;comunicacao.h: 81: if (!timerEtapaComunicacao) {
 11149                           
 11150                           ; BSR set to: 0
 11151  00262A  0100               	movlb	0	; () banked
 11152  00262C  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 11153  00262E  A4D8               	btfss	status,2,c
 11154  002630  D0BF               	goto	l337
 11155                           
 11156                           ; BSR set to: 0
 11157                           ;comunicacao.h: 82: etapaComunicacao = 0;
 11158  002632  0E00               	movlw	0
 11159  002634  6E63               	movwf	_etapaComunicacao+1,c
 11160  002636  0E00               	movlw	0
 11161  002638  6E62               	movwf	_etapaComunicacao,c
 11162                           
 11163                           ; BSR set to: 0
 11164                           ;comunicacao.h: 83: writeChar(0x1A);
 11165  00263A  0E1A               	movlw	26
 11166  00263C  6F80               	movwf	writeChar@hex& (0+255),b
 11167  00263E  0E00               	movlw	0
 11168  002640  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 11169  002642  ECE8  F035         	call	_writeChar	;wreg free
 11170                           
 11171                           ;comunicacao.h: 84: }
 11172                           ;comunicacao.h: 85: break;
 11173  002646  D0B4               	goto	l337
 11174  002648  FFFF               	dw	65535	; assembler added errata NOP
 11175                           
 11176                           ;comunicacao.h: 87: if (aguardaBuffer("OK")) {
 11177  00264A  0EF9               	movlw	low STR_5
 11178  00264C  0100               	movlb	0	; () banked
 11179  00264E  6F93               	movwf	aguardaBuffer@str& (0+255),b
 11180  002650  0E7F               	movlw	high STR_5
 11181  002652  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 11182  002654  EC03  F038         	call	_aguardaBuffer	;wreg free
 11183  002658  0900               	iorlw	0
 11184  00265A  B4D8               	btfsc	status,2,c
 11185  00265C  D083               	goto	L45
 11186                           
 11187                           ;comunicacao.h: 88: limparBuffer();
 11188  00265E  EC3B  F037         	call	_limparBuffer	;wreg free
 11189                           
 11190                           ;comunicacao.h: 89: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : te
      +                          l2);
 11191  002662  0100               	movlb	0	; () banked
 11192  002664  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 11193  002666  B4D8               	btfsc	status,2,c
 11194  002668  D004               	goto	l344
 11195                           
 11196                           ; BSR set to: 0
 11197  00266A  0EC2               	movlw	low _tel2
 11198  00266C  6FBD               	movwf	_comunicarTeste$1368& (0+255),b
 11199  00266E  0E01               	movlw	high _tel2
 11200  002670  D004               	goto	L21
 11201  002672                     l344:
 11202  002672  FFFF               	dw	65535	; assembler added errata NOP
 11203                           
 11204                           ; BSR set to: 0
 11205                           
 11206                           ; BSR set to: 0
 11207  002674  0ECE               	movlw	low _tel1
 11208  002676  6FBD               	movwf	_comunicarTeste$1368& (0+255),b
 11209  002678  0E01               	movlw	high _tel1
 11210  00267A                     L21:
 11211  00267A  FFFF               	dw	65535	; assembler added errata NOP
 11212  00267C  6FBE               	movwf	(_comunicarTeste$1368+1)& (0+255),b
 11213                           
 11214                           ; BSR set to: 0
 11215                           
 11216                           ; BSR set to: 0
 11217  00267E  0E35               	movlw	low STR_12
 11218  002680  6FA1               	movwf	printf@f& (0+255),b
 11219  002682  0E7D               	movlw	high STR_12
 11220  002684  6FA2               	movwf	(printf@f+1)& (0+255),b
 11221  002686  C0BD  F0A3         	movff	_comunicarTeste$1368,?_printf+2
 11222  00268A  C0BE  F0A4         	movff	_comunicarTeste$1368+1,?_printf+3
 11223  00268E  EC21  F038         	call	_printf	;wreg free
 11224                           
 11225                           ;comunicacao.h: 90: timerEtapaComunicacao = 5;
 11226  002692  0E05               	movlw	5
 11227  002694  0100               	movlb	0	; () banked
 11228  002696  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 11229                           
 11230                           ; BSR set to: 0
 11231                           ;comunicacao.h: 91: etapaComunicacao++;
 11232  002698  4A62               	infsnz	_etapaComunicacao,f,c
 11233  00269A  2A63               	incf	_etapaComunicacao+1,f,c
 11234                           
 11235                           ;comunicacao.h: 92: break;
 11236  00269C  D089               	goto	l337
 11237  00269E  FFFF               	dw	65535	; assembler added errata NOP
 11238                           
 11239                           ; BSR set to: 0
 11240                           ;comunicacao.h: 99: if (aguardaBuffer(">")) {
 11241                           
 11242                           ; BSR set to: 0
 11243  0026A0  0EFC               	movlw	low STR_13
 11244  0026A2  6F93               	movwf	aguardaBuffer@str& (0+255),b
 11245  0026A4  0E7F               	movlw	high STR_13
 11246  0026A6  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 11247  0026A8  EC03  F038         	call	_aguardaBuffer	;wreg free
 11248  0026AC  0900               	iorlw	0
 11249  0026AE  B4D8               	btfsc	status,2,c
 11250  0026B0  D059               	goto	L45
 11251                           
 11252                           ;comunicacao.h: 100: limparBuffer();
 11253  0026B2  EC3B  F037         	call	_limparBuffer	;wreg free
 11254                           
 11255                           ;comunicacao.h: 101: printf("TECHNOW Sistemas embarcados\r\n\r\nTeste manual de comunica
      +                          cao.\r\nData: %02d/%02d/%02d %02d:%02d:%02d\r\n\r\n\r\nVersao do sistema: %s\r\n",
 11256                           ;comunicacao.h: 102: _dia, _mes, _ano, _hor, _min, _sec, "Jul 18 2020");
 11257  0026B6  0EAB               	movlw	low STR_14
 11258  0026B8  0100               	movlb	0	; () banked
 11259  0026BA  6FA1               	movwf	printf@f& (0+255),b
 11260  0026BC  0E7A               	movlw	high STR_14
 11261  0026BE  6FA2               	movwf	(printf@f+1)& (0+255),b
 11262  0026C0  C0EB  F0A3         	movff	__dia,?_printf+2
 11263  0026C4  6BA4               	clrf	(?_printf+3)& (0+255),b
 11264  0026C6  C0EA  F0A5         	movff	__mes,?_printf+4
 11265  0026CA  6BA6               	clrf	(?_printf+5)& (0+255),b
 11266  0026CC  C0E9  F0A7         	movff	__ano,?_printf+6
 11267  0026D0  6BA8               	clrf	(?_printf+7)& (0+255),b
 11268  0026D2  C0EC  F0A9         	movff	__hor,?_printf+8
 11269  0026D6  6BAA               	clrf	(?_printf+9)& (0+255),b
 11270  0026D8  C0ED  F0AB         	movff	__min,?_printf+10
 11271  0026DC  6BAC               	clrf	(?_printf+11)& (0+255),b
 11272  0026DE  C0EE  F0AD         	movff	__sec,?_printf+12
 11273  0026E2  6BAE               	clrf	(?_printf+13)& (0+255),b
 11274  0026E4  0EB9               	movlw	low STR_15
 11275  0026E6  6FAF               	movwf	(?_printf+14)& (0+255),b
 11276  0026E8  0E7E               	movlw	high STR_15
 11277  0026EA  6FB0               	movwf	(?_printf+15)& (0+255),b
 11278  0026EC  EC21  F038         	call	_printf	;wreg free
 11279                           
 11280                           ;comunicacao.h: 103: delay(1000);
 11281  0026F0  0E03               	movlw	3
 11282  0026F2  0100               	movlb	0	; () banked
 11283  0026F4  6F81               	movwf	(delay@x+1)& (0+255),b
 11284  0026F6  0EE8               	movlw	232
 11285  0026F8  6F80               	movwf	delay@x& (0+255),b
 11286  0026FA  EC20  F037         	call	_delay	;wreg free
 11287                           
 11288                           ;comunicacao.h: 104: writeChar(0x1A);
 11289  0026FE  0E1A               	movlw	26
 11290  002700  0100               	movlb	0	; () banked
 11291  002702  6F80               	movwf	writeChar@hex& (0+255),b
 11292  002704  0E00               	movlw	0
 11293  002706  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 11294  002708  ECE8  F035         	call	_writeChar	;wreg free
 11295                           
 11296                           ;comunicacao.h: 105: etapaComunicacao++;
 11297  00270C  4A62               	infsnz	_etapaComunicacao,f,c
 11298  00270E  2A63               	incf	_etapaComunicacao+1,f,c
 11299                           
 11300                           ;comunicacao.h: 106: timerEtapaComunicacao = 30;
 11301  002710  0E1E               	movlw	30
 11302  002712  0100               	movlb	0	; () banked
 11303  002714  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 11304                           
 11305                           ; BSR set to: 0
 11306  002716  D026               	goto	L45
 11307  002718  FFFF               	dw	65535	; assembler added errata NOP
 11308                           
 11309                           ; BSR set to: 0
 11310                           ;comunicacao.h: 113: if (aguardaBuffer("OK")) {
 11311                           
 11312                           ; BSR set to: 0
 11313  00271A  0EF9               	movlw	low STR_5
 11314  00271C  6F93               	movwf	aguardaBuffer@str& (0+255),b
 11315  00271E  0E7F               	movlw	high STR_5
 11316  002720  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 11317  002722  EC03  F038         	call	_aguardaBuffer	;wreg free
 11318  002726  0900               	iorlw	0
 11319  002728  B4D8               	btfsc	status,2,c
 11320  00272A  D011               	goto	l352
 11321                           
 11322                           ;comunicacao.h: 114: if (telefoneSelecionado == 0) {
 11323  00272C  0100               	movlb	0	; () banked
 11324  00272E  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 11325  002730  A4D8               	btfss	status,2,c
 11326  002732  D003               	goto	l353
 11327                           
 11328                           ; BSR set to: 0
 11329                           ;comunicacao.h: 115: telefoneSelecionado = 1;
 11330  002734  0E01               	movlw	1
 11331  002736  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 11332                           
 11333                           ;comunicacao.h: 116: } else {
 11334  002738  D005               	goto	l354
 11335  00273A                     l353:
 11336  00273A  FFFF               	dw	65535	; assembler added errata NOP
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;comunicacao.h: 117: telefoneSelecionado = 0;
 11340                           
 11341                           ; BSR set to: 0
 11342  00273C  0E00               	movlw	0
 11343  00273E  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 11344                           
 11345                           ;comunicacao.h: 118: gsmOcupado = 0;
 11346  002740  0E00               	movlw	0
 11347  002742  6FF4               	movwf	_gsmOcupado& (0+255),b
 11348  002744                     l354:
 11349  002744  FFFF               	dw	65535	; assembler added errata NOP
 11350                           
 11351                           ; BSR set to: 0
 11352                           ;comunicacao.h: 119: }
 11353                           ;comunicacao.h: 120: etapaComunicacao = 0;
 11354  002746  0E00               	movlw	0
 11355  002748  6E63               	movwf	_etapaComunicacao+1,c
 11356  00274A  0E00               	movlw	0
 11357  00274C  6E62               	movwf	_etapaComunicacao,c
 11358  00274E                     l352:
 11359  00274E  FFFF               	dw	65535	; assembler added errata NOP
 11360                           
 11361                           ;comunicacao.h: 121: }
 11362                           ;comunicacao.h: 122: if (aguardaBuffer("ERROR") || !timerEtapaComunicacao) {
 11363                           
 11364                           ; BSR set to: 0
 11365  002750  0ED7               	movlw	low STR_17
 11366  002752  0100               	movlb	0	; () banked
 11367  002754  6F93               	movwf	aguardaBuffer@str& (0+255),b
 11368  002756  0E7F               	movlw	high STR_17
 11369  002758  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 11370  00275A  EC03  F038         	call	_aguardaBuffer	;wreg free
 11371  00275E  0900               	iorlw	0
 11372  002760  A4D8               	btfss	status,2,c
 11373  002762  D005               	goto	u6060
 11374  002764                     L45:
 11375  002764  FFFF               	dw	65535	; assembler added errata NOP
 11376  002766  0100               	movlb	0	; () banked
 11377  002768  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 11378  00276A  A4D8               	btfss	status,2,c
 11379  00276C  D021               	goto	l337
 11380  00276E                     u6060:
 11381  00276E  FFFF               	dw	65535	; assembler added errata NOP
 11382                           
 11383                           ;comunicacao.h: 127: etapaComunicacao = 0;
 11384                           
 11385                           ;comunicacao.h: 126: default:
 11386                           
 11387                           ;comunicacao.h: 124: }
 11388                           ;comunicacao.h: 125: break;
 11389                           
 11390                           ;comunicacao.h: 123: etapaComunicacao = 0;
 11391                           
 11392                           ; BSR set to: 0
 11393  002770  0E00               	movlw	0
 11394  002772  6E63               	movwf	_etapaComunicacao+1,c
 11395  002774  0E00               	movlw	0
 11396  002776  6E62               	movwf	_etapaComunicacao,c
 11397                           
 11398                           ;comunicacao.h: 130: }
 11399                           
 11400                           ;comunicacao.h: 128: break;
 11401  002778  D01B               	goto	l337
 11402  00277A                     l335:
 11403  00277A  FFFF               	dw	65535	; assembler added errata NOP
 11404  00277C  C062  F0BB         	movff	_etapaComunicacao,??_comunicarTeste
 11405  002780  C063  F0BC         	movff	_etapaComunicacao+1,??_comunicarTeste+1
 11406                           
 11407                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11408                           ; Switch size 1, requested type "space"
 11409                           ; Number of cases is 1, Range of values is 0 to 0
 11410                           ; switch strategies available:
 11411                           ; Name         Instructions Cycles
 11412                           ; simple_byte            4     3 (average)
 11413                           ;	Chosen strategy is simple_byte
 11414  002784  0100               	movlb	0	; () banked
 11415  002786  51BC               	movf	(??_comunicarTeste+1)& (0+255),w,b
 11416  002788  0A00               	xorlw	0	; case 0
 11417  00278A  A4D8               	btfss	status,2,c
 11418  00278C  D7F0               	goto	u6060
 11419                           
 11420                           ; BSR set to: 0
 11421                           ; Switch size 1, requested type "space"
 11422                           ; Number of cases is 5, Range of values is 0 to 4
 11423                           ; switch strategies available:
 11424                           ; Name         Instructions Cycles
 11425                           ; simple_byte           16     9 (average)
 11426                           ;	Chosen strategy is simple_byte
 11427  00278E  51BB               	movf	??_comunicarTeste& (0+255),w,b
 11428  002790  0A00               	xorlw	0	; case 0
 11429  002792  B4D8               	btfsc	status,2,c
 11430  002794  D721               	goto	l336
 11431  002796  0A01               	xorlw	1	; case 1
 11432  002798  B4D8               	btfsc	status,2,c
 11433  00279A  D72E               	goto	l338
 11434  00279C  0A03               	xorlw	3	; case 2
 11435  00279E  B4D8               	btfsc	status,2,c
 11436  0027A0  D753               	goto	l341
 11437  0027A2  0A01               	xorlw	1	; case 3
 11438  0027A4  B4D8               	btfsc	status,2,c
 11439  0027A6  D77B               	goto	l348
 11440  0027A8  0A07               	xorlw	7	; case 4
 11441  0027AA  B4D8               	btfsc	status,2,c
 11442  0027AC  D7B5               	goto	l351
 11443  0027AE  D7DF               	goto	u6060
 11444  0027B0                     l337:
 11445  0027B0  FFFF               	dw	65535	; assembler added errata NOP
 11446                           
 11447                           ; BSR set to: 0
 11448  0027B2  0012               	return		;funcret
 11449  0027B4  FFFF               	dw	65535	; errata NOP
 11450  0027B6                     __end_of_comunicarTeste:
 11451                           	opt stack 0
 11452                           tblptru	equ	0xFF8
 11453                           tblptrh	equ	0xFF7
 11454                           tblptrl	equ	0xFF6
 11455                           tablat	equ	0xFF5
 11456                           prodh	equ	0xFF4
 11457                           prodl	equ	0xFF3
 11458                           postinc0	equ	0xFEE
 11459                           wreg	equ	0xFE8
 11460                           postdec1	equ	0xFE5
 11461                           fsr1l	equ	0xFE1
 11462                           indf2	equ	0xFDF
 11463                           postinc2	equ	0xFDE
 11464                           postdec2	equ	0xFDD
 11465                           fsr2h	equ	0xFDA
 11466                           fsr2l	equ	0xFD9
 11467                           status	equ	0xFD8
 11468                           
 11469 ;; *************** function _configuraRegistradores *****************
 11470 ;; Defined at:
 11471 ;;		line 7 in file "registradores.h"
 11472 ;; Parameters:    Size  Location     Type
 11473 ;;		None
 11474 ;; Auto vars:     Size  Location     Type
 11475 ;;		None
 11476 ;; Return value:  Size  Location     Type
 11477 ;;                  1    wreg      void 
 11478 ;; Registers used:
 11479 ;;		wreg, status,2
 11480 ;; Tracked objects:
 11481 ;;		On entry : 0/0
 11482 ;;		On exit  : 0/0
 11483 ;;		Unchanged: 0/0
 11484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11485 ;;      Params:         0       0       0       0       0       0       0
 11486 ;;      Locals:         0       0       0       0       0       0       0
 11487 ;;      Temps:          0       0       0       0       0       0       0
 11488 ;;      Totals:         0       0       0       0       0       0       0
 11489 ;;Total ram usage:        0 bytes
 11490 ;; Hardware stack levels used:    1
 11491 ;; Hardware stack levels required when called:    6
 11492 ;; This function calls:
 11493 ;;		Nothing
 11494 ;; This function is called by:
 11495 ;;		_main
 11496 ;; This function uses a non-reentrant model
 11497 ;;
 11498                           
 11499                           	psect	text30
 11500  0076D0                     __ptext30:
 11501                           	opt stack 0
 11502  0076D0                     _configuraRegistradores:
 11503                           	opt stack 0
 11504  0076D0  FFFF               	dw	65535	; assembler added errata NOP
 11505                           
 11506                           ;registradores.h: 9: ADCON0 = 0b00000001;
 11507                           
 11508                           ;incstack = 0
 11509  0076D2  0E01               	movlw	1
 11510  0076D4  6EC2               	movwf	4034,c	;volatile
 11511                           
 11512                           ;registradores.h: 10: ADCON1 = 0b11001110;
 11513  0076D6  0ECE               	movlw	206
 11514  0076D8  6EC1               	movwf	4033,c	;volatile
 11515                           
 11516                           ;registradores.h: 11: TRISAbits.RA0 = 1;
 11517  0076DA  8092               	bsf	3986,0,c	;volatile
 11518                           
 11519                           ;registradores.h: 12: PORTAbits.AN0 = 0;
 11520  0076DC  9080               	bcf	3968,0,c	;volatile
 11521                           
 11522                           ;registradores.h: 17: T0CON = 0b10000001;
 11523  0076DE  0E81               	movlw	129
 11524  0076E0  6ED5               	movwf	4053,c	;volatile
 11525                           
 11526                           ;registradores.h: 18: INTCON = 0b11100100;
 11527  0076E2  0EE4               	movlw	228
 11528  0076E4  6EF2               	movwf	intcon,c	;volatile
 11529                           
 11530                           ;registradores.h: 19: INTCON2 = 0b00000000;
 11531  0076E6  0E00               	movlw	0
 11532  0076E8  6EF1               	movwf	intcon2,c	;volatile
 11533                           
 11534                           ;registradores.h: 20: INTCON3 = 0b00000000;
 11535  0076EA  0E00               	movlw	0
 11536  0076EC  6EF0               	movwf	intcon3,c	;volatile
 11537                           
 11538                           ;registradores.h: 23: TRISDbits.RD5 = 0;
 11539  0076EE  9A95               	bcf	3989,5,c	;volatile
 11540                           
 11541                           ;registradores.h: 24: TRISDbits.RD4 = 0;
 11542  0076F0  9895               	bcf	3989,4,c	;volatile
 11543                           
 11544                           ;registradores.h: 25: TRISDbits.RD3 = 0;
 11545  0076F2  9695               	bcf	3989,3,c	;volatile
 11546                           
 11547                           ;registradores.h: 26: TRISDbits.RD2 = 0;
 11548  0076F4  9495               	bcf	3989,2,c	;volatile
 11549                           
 11550                           ;registradores.h: 27: TRISDbits.RD1 = 0;
 11551  0076F6  9295               	bcf	3989,1,c	;volatile
 11552                           
 11553                           ;registradores.h: 28: TRISDbits.RD0 = 0;
 11554  0076F8  9095               	bcf	3989,0,c	;volatile
 11555                           
 11556                           ;registradores.h: 31: TRISCbits.TRISC6 = 0;
 11557  0076FA  9C94               	bcf	3988,6,c	;volatile
 11558                           
 11559                           ;registradores.h: 32: TRISCbits.TRISC7 = 1;
 11560  0076FC  8E94               	bsf	3988,7,c	;volatile
 11561                           
 11562                           ;registradores.h: 33: TXSTAbits.TXEN = 1;
 11563  0076FE  8AAC               	bsf	4012,5,c	;volatile
 11564                           
 11565                           ;registradores.h: 34: TXSTAbits.BRGH = 1;
 11566  007700  84AC               	bsf	4012,2,c	;volatile
 11567                           
 11568                           ;registradores.h: 35: TXSTAbits.SYNC = 0;
 11569  007702  98AC               	bcf	4012,4,c	;volatile
 11570                           
 11571                           ;registradores.h: 36: RCSTAbits.SPEN = 1;
 11572  007704  8EAB               	bsf	4011,7,c	;volatile
 11573                           
 11574                           ;registradores.h: 37: RCSTAbits.CREN = 1;
 11575  007706  88AB               	bsf	4011,4,c	;volatile
 11576                           
 11577                           ;registradores.h: 40: SPBRG = 25;
 11578  007708  0E19               	movlw	25
 11579  00770A  6EAF               	movwf	4015,c	;volatile
 11580                           
 11581                           ;registradores.h: 41: INTCONbits.GIE = 1;
 11582  00770C  8EF2               	bsf	intcon,7,c	;volatile
 11583                           
 11584                           ;registradores.h: 42: INTCONbits.PEIE = 1;
 11585  00770E  8CF2               	bsf	intcon,6,c	;volatile
 11586                           
 11587                           ;registradores.h: 43: PIR1bits.RCIF = 0;
 11588  007710  9A9E               	bcf	3998,5,c	;volatile
 11589                           
 11590                           ;registradores.h: 44: PIE1bits.RCIE = 1;
 11591  007712  8A9D               	bsf	3997,5,c	;volatile
 11592                           
 11593                           ;registradores.h: 47: INTCONbits.RBIE = 0;
 11594  007714  96F2               	bcf	intcon,3,c	;volatile
 11595                           
 11596                           ;registradores.h: 48: TRISAbits.RA2 = 1;
 11597  007716  8492               	bsf	3986,2,c	;volatile
 11598                           
 11599                           ;registradores.h: 49: PORTAbits.RA2 = 1;
 11600  007718  8480               	bsf	3968,2,c	;volatile
 11601                           
 11602                           ;registradores.h: 50: TRISAbits.RA5 = 1;
 11603  00771A  8A92               	bsf	3986,5,c	;volatile
 11604                           
 11605                           ;registradores.h: 51: TRISCbits.RC0 = 1;
 11606  00771C  8094               	bsf	3988,0,c	;volatile
 11607                           
 11608                           ;registradores.h: 52: TRISAbits.RA1 = 0;
 11609  00771E  9292               	bcf	3986,1,c	;volatile
 11610                           
 11611                           ;registradores.h: 53: PORTAbits.RA1 = 1;
 11612  007720  8280               	bsf	3968,1,c	;volatile
 11613                           
 11614                           ;registradores.h: 56: TRISBbits.RB2 = 1;
 11615  007722  8493               	bsf	3987,2,c	;volatile
 11616                           
 11617                           ;registradores.h: 57: TRISBbits.RB3 = 1;
 11618  007724  8693               	bsf	3987,3,c	;volatile
 11619                           
 11620                           ;registradores.h: 58: TRISBbits.RB4 = 1;
 11621  007726  8893               	bsf	3987,4,c	;volatile
 11622                           
 11623                           ;registradores.h: 59: TRISBbits.RB5 = 1;
 11624  007728  8A93               	bsf	3987,5,c	;volatile
 11625                           
 11626                           ;registradores.h: 62: TRISDbits.RD7 = 0;
 11627  00772A  9E95               	bcf	3989,7,c	;volatile
 11628                           
 11629                           ;registradores.h: 63: TRISAbits.RA3 = 0;
 11630  00772C  9692               	bcf	3986,3,c	;volatile
 11631                           
 11632                           ;registradores.h: 64: TRISAbits.RA4 = 0;
 11633  00772E  9892               	bcf	3986,4,c	;volatile
 11634                           
 11635                           ;registradores.h: 65: TRISEbits.RE0 = 0;
 11636  007730  9096               	bcf	3990,0,c	;volatile
 11637                           
 11638                           ;registradores.h: 66: TRISEbits.RE1 = 0;
 11639  007732  9296               	bcf	3990,1,c	;volatile
 11640                           
 11641                           ;registradores.h: 67: TRISEbits.RE2 = 0;
 11642  007734  9496               	bcf	3990,2,c	;volatile
 11643                           
 11644                           ;registradores.h: 68: TRISCbits.RC1 = 0;
 11645  007736  9294               	bcf	3988,1,c	;volatile
 11646                           
 11647                           ;registradores.h: 70: PORTDbits.RD7 = 0;
 11648  007738  9E83               	bcf	3971,7,c	;volatile
 11649                           
 11650                           ;registradores.h: 71: PORTAbits.RA3 = 0;
 11651  00773A  9680               	bcf	3968,3,c	;volatile
 11652                           
 11653                           ;registradores.h: 72: PORTAbits.RA4 = 0;
 11654  00773C  9880               	bcf	3968,4,c	;volatile
 11655                           
 11656                           ;registradores.h: 73: PORTEbits.RE0 = 0;
 11657  00773E  9084               	bcf	3972,0,c	;volatile
 11658                           
 11659                           ;registradores.h: 74: PORTEbits.RE1 = 0;
 11660  007740  9284               	bcf	3972,1,c	;volatile
 11661                           
 11662                           ;registradores.h: 75: PORTEbits.RE2 = 0;
 11663  007742  9484               	bcf	3972,2,c	;volatile
 11664                           
 11665                           ;registradores.h: 76: PORTCbits.RC1 = 0;
 11666  007744  9282               	bcf	3970,1,c	;volatile
 11667  007746  0012               	return		;funcret
 11668  007748  FFFF               	dw	65535	; errata NOP
 11669  00774A                     __end_of_configuraRegistradores:
 11670                           	opt stack 0
 11671                           tblptru	equ	0xFF8
 11672                           tblptrh	equ	0xFF7
 11673                           tblptrl	equ	0xFF6
 11674                           tablat	equ	0xFF5
 11675                           prodh	equ	0xFF4
 11676                           prodl	equ	0xFF3
 11677                           intcon	equ	0xFF2
 11678                           intcon2	equ	0xFF1
 11679                           intcon3	equ	0xFF0
 11680                           postinc0	equ	0xFEE
 11681                           wreg	equ	0xFE8
 11682                           postdec1	equ	0xFE5
 11683                           fsr1l	equ	0xFE1
 11684                           indf2	equ	0xFDF
 11685                           postinc2	equ	0xFDE
 11686                           postdec2	equ	0xFDD
 11687                           fsr2h	equ	0xFDA
 11688                           fsr2l	equ	0xFD9
 11689                           status	equ	0xFD8
 11690                           
 11691 ;; *************** function _atualizarLCD *****************
 11692 ;; Defined at:
 11693 ;;		line 142 in file "lcd.h"
 11694 ;; Parameters:    Size  Location     Type
 11695 ;;  line1           2    8[BANK0 ] PTR unsigned char 
 11696 ;;		 -> line1(21), 
 11697 ;;  line2           2   10[BANK0 ] PTR unsigned char 
 11698 ;;		 -> line2(21), 
 11699 ;;  line3           2   12[BANK0 ] PTR unsigned char 
 11700 ;;		 -> line3(21), 
 11701 ;;  line4           2   14[BANK0 ] PTR unsigned char 
 11702 ;;		 -> line4(21), 
 11703 ;; Auto vars:     Size  Location     Type
 11704 ;;  lcdEstado       4   21[BANK0 ] long 
 11705 ;;  i               1   25[BANK0 ] unsigned char 
 11706 ;; Return value:  Size  Location     Type
 11707 ;;                  1    wreg      void 
 11708 ;; Registers used:
 11709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11710 ;; Tracked objects:
 11711 ;;		On entry : 0/0
 11712 ;;		On exit  : 0/0
 11713 ;;		Unchanged: 0/0
 11714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11715 ;;      Params:         0       8       0       0       0       0       0
 11716 ;;      Locals:         0       5       0       0       0       0       0
 11717 ;;      Temps:          0       5       0       0       0       0       0
 11718 ;;      Totals:         0      18       0       0       0       0       0
 11719 ;;Total ram usage:       18 bytes
 11720 ;; Hardware stack levels used:    1
 11721 ;; Hardware stack levels required when called:    9
 11722 ;; This function calls:
 11723 ;;		_Lcd_Set_Cursor
 11724 ;;		_Lcd_Write_String
 11725 ;; This function is called by:
 11726 ;;		_main
 11727 ;; This function uses a non-reentrant model
 11728 ;;
 11729                           
 11730                           	psect	text31
 11731  0023B8                     __ptext31:
 11732                           	opt stack 0
 11733  0023B8                     _atualizarLCD:
 11734                           	opt stack 0
 11735  0023B8  FFFF               	dw	65535	; assembler added errata NOP
 11736                           
 11737                           ;lcd.h: 144: char i = 0;
 11738                           
 11739                           ;incstack = 0
 11740  0023BA  0E00               	movlw	0
 11741  0023BC  0100               	movlb	0	; () banked
 11742  0023BE  6F99               	movwf	atualizarLCD@i& (0+255),b
 11743                           
 11744                           ;lcd.h: 145: long lcdEstado = 0;
 11745  0023C0  0E00               	movlw	0
 11746  0023C2  6F95               	movwf	atualizarLCD@lcdEstado& (0+255),b
 11747  0023C4  0E00               	movlw	0
 11748  0023C6  6F96               	movwf	(atualizarLCD@lcdEstado+1)& (0+255),b
 11749  0023C8  0E00               	movlw	0
 11750  0023CA  6F97               	movwf	(atualizarLCD@lcdEstado+2)& (0+255),b
 11751  0023CC  0E00               	movlw	0
 11752  0023CE  6F98               	movwf	(atualizarLCD@lcdEstado+3)& (0+255),b
 11753                           
 11754                           ;lcd.h: 147: for (i = 0; i < 20; i++) {
 11755  0023D0  0E00               	movlw	0
 11756  0023D2  6F99               	movwf	atualizarLCD@i& (0+255),b
 11757  0023D4                     l6981:
 11758  0023D4  FFFF               	dw	65535	; assembler added errata NOP
 11759                           
 11760                           ; BSR set to: 0
 11761  0023D6  0E13               	movlw	19
 11762  0023D8  6599               	cpfsgt	atualizarLCD@i& (0+255),b
 11763  0023DA  D001               	goto	l633
 11764  0023DC  D077               	goto	u7390
 11765  0023DE                     l633:
 11766  0023DE  FFFF               	dw	65535	; assembler added errata NOP
 11767                           
 11768                           ; BSR set to: 0
 11769                           ;lcd.h: 148: lcdEstado += (int) line1[i] + 1;
 11770                           
 11771                           ; BSR set to: 0
 11772  0023E0  5199               	movf	atualizarLCD@i& (0+255),w,b
 11773  0023E2  0D01               	mullw	1
 11774  0023E4  50F3               	movf	prodl,w,c
 11775  0023E6  2588               	addwf	atualizarLCD@line1& (0+255),w,b
 11776  0023E8  6ED9               	movwf	fsr2l,c
 11777  0023EA  50F4               	movf	prodh,w,c
 11778  0023EC  2189               	addwfc	(atualizarLCD@line1+1)& (0+255),w,b
 11779  0023EE  6EDA               	movwf	fsr2h,c
 11780  0023F0  50DF               	movf	indf2,w,c
 11781  0023F2  6F90               	movwf	??_atualizarLCD& (0+255),b
 11782  0023F4  0E01               	movlw	1
 11783  0023F6  2590               	addwf	??_atualizarLCD& (0+255),w,b
 11784  0023F8  6F91               	movwf	(??_atualizarLCD+1)& (0+255),b
 11785  0023FA  6B92               	clrf	(??_atualizarLCD+2)& (0+255),b
 11786  0023FC  0E00               	movlw	0
 11787  0023FE  2392               	addwfc	(??_atualizarLCD+2)& (0+255),f,b
 11788  002400  6B93               	clrf	(??_atualizarLCD+3)& (0+255),b
 11789  002402  BF92               	btfsc	(??_atualizarLCD+2)& (0+255),7,b
 11790  002404  0793               	decf	(??_atualizarLCD+3)& (0+255),f,b
 11791  002406  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11792  002408  6F94               	movwf	(??_atualizarLCD+4)& (0+255),b
 11793  00240A  5191               	movf	(??_atualizarLCD+1)& (0+255),w,b
 11794  00240C  2795               	addwf	atualizarLCD@lcdEstado& (0+255),f,b
 11795  00240E  5192               	movf	(??_atualizarLCD+2)& (0+255),w,b
 11796  002410  2396               	addwfc	(atualizarLCD@lcdEstado+1)& (0+255),f,b
 11797  002412  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11798  002414  2397               	addwfc	(atualizarLCD@lcdEstado+2)& (0+255),f,b
 11799  002416  5194               	movf	(??_atualizarLCD+4)& (0+255),w,b
 11800  002418  2398               	addwfc	(atualizarLCD@lcdEstado+3)& (0+255),f,b
 11801                           
 11802                           ;lcd.h: 149: lcdEstado += (int) line2[i] + 2;
 11803  00241A  5199               	movf	atualizarLCD@i& (0+255),w,b
 11804  00241C  0D01               	mullw	1
 11805  00241E  50F3               	movf	prodl,w,c
 11806  002420  258A               	addwf	atualizarLCD@line2& (0+255),w,b
 11807  002422  6ED9               	movwf	fsr2l,c
 11808  002424  50F4               	movf	prodh,w,c
 11809  002426  218B               	addwfc	(atualizarLCD@line2+1)& (0+255),w,b
 11810  002428  6EDA               	movwf	fsr2h,c
 11811  00242A  50DF               	movf	indf2,w,c
 11812  00242C  6F90               	movwf	??_atualizarLCD& (0+255),b
 11813  00242E  0E02               	movlw	2
 11814  002430  2590               	addwf	??_atualizarLCD& (0+255),w,b
 11815  002432  6F91               	movwf	(??_atualizarLCD+1)& (0+255),b
 11816  002434  6B92               	clrf	(??_atualizarLCD+2)& (0+255),b
 11817  002436  0E00               	movlw	0
 11818  002438  2392               	addwfc	(??_atualizarLCD+2)& (0+255),f,b
 11819  00243A  6B93               	clrf	(??_atualizarLCD+3)& (0+255),b
 11820  00243C  BF92               	btfsc	(??_atualizarLCD+2)& (0+255),7,b
 11821  00243E  0793               	decf	(??_atualizarLCD+3)& (0+255),f,b
 11822  002440  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11823  002442  6F94               	movwf	(??_atualizarLCD+4)& (0+255),b
 11824  002444  5191               	movf	(??_atualizarLCD+1)& (0+255),w,b
 11825  002446  2795               	addwf	atualizarLCD@lcdEstado& (0+255),f,b
 11826  002448  5192               	movf	(??_atualizarLCD+2)& (0+255),w,b
 11827  00244A  2396               	addwfc	(atualizarLCD@lcdEstado+1)& (0+255),f,b
 11828  00244C  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11829  00244E  2397               	addwfc	(atualizarLCD@lcdEstado+2)& (0+255),f,b
 11830  002450  5194               	movf	(??_atualizarLCD+4)& (0+255),w,b
 11831  002452  2398               	addwfc	(atualizarLCD@lcdEstado+3)& (0+255),f,b
 11832                           
 11833                           ;lcd.h: 150: lcdEstado += (int) line3[i] + 3;
 11834  002454  5199               	movf	atualizarLCD@i& (0+255),w,b
 11835  002456  0D01               	mullw	1
 11836  002458  50F3               	movf	prodl,w,c
 11837  00245A  258C               	addwf	atualizarLCD@line3& (0+255),w,b
 11838  00245C  6ED9               	movwf	fsr2l,c
 11839  00245E  50F4               	movf	prodh,w,c
 11840  002460  218D               	addwfc	(atualizarLCD@line3+1)& (0+255),w,b
 11841  002462  6EDA               	movwf	fsr2h,c
 11842  002464  50DF               	movf	indf2,w,c
 11843  002466  6F90               	movwf	??_atualizarLCD& (0+255),b
 11844  002468  0E03               	movlw	3
 11845  00246A  2590               	addwf	??_atualizarLCD& (0+255),w,b
 11846  00246C  6F91               	movwf	(??_atualizarLCD+1)& (0+255),b
 11847  00246E  6B92               	clrf	(??_atualizarLCD+2)& (0+255),b
 11848  002470  0E00               	movlw	0
 11849  002472  2392               	addwfc	(??_atualizarLCD+2)& (0+255),f,b
 11850  002474  6B93               	clrf	(??_atualizarLCD+3)& (0+255),b
 11851  002476  BF92               	btfsc	(??_atualizarLCD+2)& (0+255),7,b
 11852  002478  0793               	decf	(??_atualizarLCD+3)& (0+255),f,b
 11853  00247A  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11854  00247C  6F94               	movwf	(??_atualizarLCD+4)& (0+255),b
 11855  00247E  5191               	movf	(??_atualizarLCD+1)& (0+255),w,b
 11856  002480  2795               	addwf	atualizarLCD@lcdEstado& (0+255),f,b
 11857  002482  5192               	movf	(??_atualizarLCD+2)& (0+255),w,b
 11858  002484  2396               	addwfc	(atualizarLCD@lcdEstado+1)& (0+255),f,b
 11859  002486  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11860  002488  2397               	addwfc	(atualizarLCD@lcdEstado+2)& (0+255),f,b
 11861  00248A  5194               	movf	(??_atualizarLCD+4)& (0+255),w,b
 11862  00248C  2398               	addwfc	(atualizarLCD@lcdEstado+3)& (0+255),f,b
 11863                           
 11864                           ;lcd.h: 151: lcdEstado += (int) line4[i] + 4;
 11865  00248E  5199               	movf	atualizarLCD@i& (0+255),w,b
 11866  002490  0D01               	mullw	1
 11867  002492  50F3               	movf	prodl,w,c
 11868  002494  258E               	addwf	atualizarLCD@line4& (0+255),w,b
 11869  002496  6ED9               	movwf	fsr2l,c
 11870  002498  50F4               	movf	prodh,w,c
 11871  00249A  218F               	addwfc	(atualizarLCD@line4+1)& (0+255),w,b
 11872  00249C  6EDA               	movwf	fsr2h,c
 11873  00249E  50DF               	movf	indf2,w,c
 11874  0024A0  6F90               	movwf	??_atualizarLCD& (0+255),b
 11875  0024A2  0E04               	movlw	4
 11876  0024A4  2590               	addwf	??_atualizarLCD& (0+255),w,b
 11877  0024A6  6F91               	movwf	(??_atualizarLCD+1)& (0+255),b
 11878  0024A8  6B92               	clrf	(??_atualizarLCD+2)& (0+255),b
 11879  0024AA  0E00               	movlw	0
 11880  0024AC  2392               	addwfc	(??_atualizarLCD+2)& (0+255),f,b
 11881  0024AE  6B93               	clrf	(??_atualizarLCD+3)& (0+255),b
 11882  0024B0  BF92               	btfsc	(??_atualizarLCD+2)& (0+255),7,b
 11883  0024B2  0793               	decf	(??_atualizarLCD+3)& (0+255),f,b
 11884  0024B4  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11885  0024B6  6F94               	movwf	(??_atualizarLCD+4)& (0+255),b
 11886  0024B8  5191               	movf	(??_atualizarLCD+1)& (0+255),w,b
 11887  0024BA  2795               	addwf	atualizarLCD@lcdEstado& (0+255),f,b
 11888  0024BC  5192               	movf	(??_atualizarLCD+2)& (0+255),w,b
 11889  0024BE  2396               	addwfc	(atualizarLCD@lcdEstado+1)& (0+255),f,b
 11890  0024C0  5193               	movf	(??_atualizarLCD+3)& (0+255),w,b
 11891  0024C2  2397               	addwfc	(atualizarLCD@lcdEstado+2)& (0+255),f,b
 11892  0024C4  5194               	movf	(??_atualizarLCD+4)& (0+255),w,b
 11893  0024C6  2398               	addwfc	(atualizarLCD@lcdEstado+3)& (0+255),f,b
 11894                           
 11895                           ; BSR set to: 0
 11896  0024C8  2B99               	incf	atualizarLCD@i& (0+255),f,b
 11897  0024CA  D784               	goto	l6981
 11898  0024CC                     u7390:
 11899  0024CC  FFFF               	dw	65535	; assembler added errata NOP
 11900                           
 11901                           ; BSR set to: 0
 11902                           ;lcd.h: 152: }
 11903                           ;lcd.h: 154: if (lcdEstado != ultimoEstadoLCD) {
 11904                           
 11905                           ; BSR set to: 0
 11906  0024CE  0101               	movlb	1	; () banked
 11907  0024D0  51DE               	movf	_ultimoEstadoLCD& (0+255),w,b
 11908  0024D2  0100               	movlb	0	; () banked
 11909  0024D4  1995               	xorwf	atualizarLCD@lcdEstado& (0+255),w,b
 11910  0024D6  E110               	bnz	u7400
 11911  0024D8  0101               	movlb	1	; () banked
 11912  0024DA  51DF               	movf	(_ultimoEstadoLCD+1)& (0+255),w,b
 11913  0024DC  0100               	movlb	0	; () banked
 11914  0024DE  1996               	xorwf	(atualizarLCD@lcdEstado+1)& (0+255),w,b
 11915  0024E0  E10B               	bnz	u7400
 11916  0024E2  0101               	movlb	1	; () banked
 11917  0024E4  51E0               	movf	(_ultimoEstadoLCD+2)& (0+255),w,b
 11918  0024E6  0100               	movlb	0	; () banked
 11919  0024E8  1997               	xorwf	(atualizarLCD@lcdEstado+2)& (0+255),w,b
 11920  0024EA  E106               	bnz	u7400
 11921  0024EC  0101               	movlb	1	; () banked
 11922  0024EE  51E1               	movf	(_ultimoEstadoLCD+3)& (0+255),w,b
 11923  0024F0  0100               	movlb	0	; () banked
 11924  0024F2  1998               	xorwf	(atualizarLCD@lcdEstado+3)& (0+255),w,b
 11925  0024F4  B4D8               	btfsc	status,2,c
 11926  0024F6  D037               	goto	l635
 11927  0024F8                     u7400:
 11928                           
 11929                           ; BSR set to: 0
 11930                           ;lcd.h: 155: ultimoEstadoLCD = lcdEstado;
 11931  0024F8  C095  F1DE         	movff	atualizarLCD@lcdEstado,_ultimoEstadoLCD
 11932  0024FC  C096  F1DF         	movff	atualizarLCD@lcdEstado+1,_ultimoEstadoLCD+1
 11933  002500  C097  F1E0         	movff	atualizarLCD@lcdEstado+2,_ultimoEstadoLCD+2
 11934  002504  C098  F1E1         	movff	atualizarLCD@lcdEstado+3,_ultimoEstadoLCD+3
 11935                           
 11936                           ; BSR set to: 0
 11937                           ;lcd.h: 157: Lcd_Set_Cursor(1, 1);
 11938  002508  0E01               	movlw	1
 11939  00250A  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11940  00250C  0E01               	movlw	1
 11941  00250E  ECAB  F01D         	call	_Lcd_Set_Cursor
 11942                           
 11943                           ;lcd.h: 158: Lcd_Write_String(line1);
 11944  002512  C088  F084         	movff	atualizarLCD@line1,Lcd_Write_String@a
 11945  002516  C089  F085         	movff	atualizarLCD@line1+1,Lcd_Write_String@a+1
 11946  00251A  ECC8  F037         	call	_Lcd_Write_String	;wreg free
 11947                           
 11948                           ;lcd.h: 159: Lcd_Set_Cursor(2, 1);
 11949  00251E  0E01               	movlw	1
 11950  002520  0100               	movlb	0	; () banked
 11951  002522  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11952  002524  0E02               	movlw	2
 11953  002526  ECAB  F01D         	call	_Lcd_Set_Cursor
 11954                           
 11955                           ;lcd.h: 160: Lcd_Write_String(line2);
 11956  00252A  C08A  F084         	movff	atualizarLCD@line2,Lcd_Write_String@a
 11957  00252E  C08B  F085         	movff	atualizarLCD@line2+1,Lcd_Write_String@a+1
 11958  002532  ECC8  F037         	call	_Lcd_Write_String	;wreg free
 11959                           
 11960                           ;lcd.h: 161: Lcd_Set_Cursor(3, 0);
 11961  002536  0E00               	movlw	0
 11962  002538  0100               	movlb	0	; () banked
 11963  00253A  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11964  00253C  0E03               	movlw	3
 11965  00253E  ECAB  F01D         	call	_Lcd_Set_Cursor
 11966                           
 11967                           ;lcd.h: 162: Lcd_Write_String(line3);
 11968  002542  C08C  F084         	movff	atualizarLCD@line3,Lcd_Write_String@a
 11969  002546  C08D  F085         	movff	atualizarLCD@line3+1,Lcd_Write_String@a+1
 11970  00254A  ECC8  F037         	call	_Lcd_Write_String	;wreg free
 11971                           
 11972                           ;lcd.h: 163: Lcd_Set_Cursor(4, 0);
 11973  00254E  0E00               	movlw	0
 11974  002550  0100               	movlb	0	; () banked
 11975  002552  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11976  002554  0E04               	movlw	4
 11977  002556  ECAB  F01D         	call	_Lcd_Set_Cursor
 11978                           
 11979                           ;lcd.h: 164: Lcd_Write_String(line4);
 11980  00255A  C08E  F084         	movff	atualizarLCD@line4,Lcd_Write_String@a
 11981  00255E  C08F  F085         	movff	atualizarLCD@line4+1,Lcd_Write_String@a+1
 11982  002562  ECC8  F037         	call	_Lcd_Write_String	;wreg free
 11983  002566                     l635:
 11984  002566  FFFF               	dw	65535	; assembler added errata NOP
 11985                           
 11986                           ;lcd.h: 165: }
 11987                           ;lcd.h: 167: for (i = 0; i < 20; i++) {
 11988  002568  0E00               	movlw	0
 11989  00256A  0100               	movlb	0	; () banked
 11990  00256C  6F99               	movwf	atualizarLCD@i& (0+255),b
 11991  00256E                     l7009:
 11992  00256E  FFFF               	dw	65535	; assembler added errata NOP
 11993                           
 11994                           ; BSR set to: 0
 11995  002570  0E13               	movlw	19
 11996  002572  6599               	cpfsgt	atualizarLCD@i& (0+255),b
 11997  002574  D001               	goto	l636
 11998  002576  D02B               	goto	u7420
 11999  002578                     l636:
 12000  002578  FFFF               	dw	65535	; assembler added errata NOP
 12001                           
 12002                           ; BSR set to: 0
 12003                           ;lcd.h: 168: line1[i] = ' ';
 12004                           
 12005                           ; BSR set to: 0
 12006  00257A  5199               	movf	atualizarLCD@i& (0+255),w,b
 12007  00257C  0D01               	mullw	1
 12008  00257E  50F3               	movf	prodl,w,c
 12009  002580  2588               	addwf	atualizarLCD@line1& (0+255),w,b
 12010  002582  6ED9               	movwf	fsr2l,c
 12011  002584  50F4               	movf	prodh,w,c
 12012  002586  2189               	addwfc	(atualizarLCD@line1+1)& (0+255),w,b
 12013  002588  6EDA               	movwf	fsr2h,c
 12014  00258A  0E20               	movlw	32
 12015  00258C  6EDF               	movwf	indf2,c
 12016                           
 12017                           ;lcd.h: 169: line2[i] = ' ';
 12018  00258E  5199               	movf	atualizarLCD@i& (0+255),w,b
 12019  002590  0D01               	mullw	1
 12020  002592  50F3               	movf	prodl,w,c
 12021  002594  258A               	addwf	atualizarLCD@line2& (0+255),w,b
 12022  002596  6ED9               	movwf	fsr2l,c
 12023  002598  50F4               	movf	prodh,w,c
 12024  00259A  218B               	addwfc	(atualizarLCD@line2+1)& (0+255),w,b
 12025  00259C  6EDA               	movwf	fsr2h,c
 12026  00259E  0E20               	movlw	32
 12027  0025A0  6EDF               	movwf	indf2,c
 12028                           
 12029                           ;lcd.h: 170: line3[i] = ' ';
 12030  0025A2  5199               	movf	atualizarLCD@i& (0+255),w,b
 12031  0025A4  0D01               	mullw	1
 12032  0025A6  50F3               	movf	prodl,w,c
 12033  0025A8  258C               	addwf	atualizarLCD@line3& (0+255),w,b
 12034  0025AA  6ED9               	movwf	fsr2l,c
 12035  0025AC  50F4               	movf	prodh,w,c
 12036  0025AE  218D               	addwfc	(atualizarLCD@line3+1)& (0+255),w,b
 12037  0025B0  6EDA               	movwf	fsr2h,c
 12038  0025B2  0E20               	movlw	32
 12039  0025B4  6EDF               	movwf	indf2,c
 12040                           
 12041                           ;lcd.h: 171: line4[i] = ' ';
 12042  0025B6  5199               	movf	atualizarLCD@i& (0+255),w,b
 12043  0025B8  0D01               	mullw	1
 12044  0025BA  50F3               	movf	prodl,w,c
 12045  0025BC  258E               	addwf	atualizarLCD@line4& (0+255),w,b
 12046  0025BE  6ED9               	movwf	fsr2l,c
 12047  0025C0  50F4               	movf	prodh,w,c
 12048  0025C2  218F               	addwfc	(atualizarLCD@line4+1)& (0+255),w,b
 12049  0025C4  6EDA               	movwf	fsr2h,c
 12050  0025C6  0E20               	movlw	32
 12051  0025C8  6EDF               	movwf	indf2,c
 12052                           
 12053                           ; BSR set to: 0
 12054  0025CA  2B99               	incf	atualizarLCD@i& (0+255),f,b
 12055  0025CC  D7D0               	goto	l7009
 12056  0025CE                     u7420:
 12057  0025CE  FFFF               	dw	65535	; assembler added errata NOP
 12058                           
 12059                           ; BSR set to: 0
 12060                           
 12061                           ; BSR set to: 0
 12062  0025D0  0012               	return		;funcret
 12063  0025D2  FFFF               	dw	65535	; errata NOP
 12064  0025D4                     __end_of_atualizarLCD:
 12065                           	opt stack 0
 12066                           tblptru	equ	0xFF8
 12067                           tblptrh	equ	0xFF7
 12068                           tblptrl	equ	0xFF6
 12069                           tablat	equ	0xFF5
 12070                           prodh	equ	0xFF4
 12071                           prodl	equ	0xFF3
 12072                           intcon	equ	0xFF2
 12073                           intcon2	equ	0xFF1
 12074                           intcon3	equ	0xFF0
 12075                           postinc0	equ	0xFEE
 12076                           wreg	equ	0xFE8
 12077                           postdec1	equ	0xFE5
 12078                           fsr1l	equ	0xFE1
 12079                           indf2	equ	0xFDF
 12080                           postinc2	equ	0xFDE
 12081                           postdec2	equ	0xFDD
 12082                           fsr2h	equ	0xFDA
 12083                           fsr2l	equ	0xFD9
 12084                           status	equ	0xFD8
 12085                           
 12086 ;; *************** function _Lcd_Write_String *****************
 12087 ;; Defined at:
 12088 ;;		line 133 in file "lcd.h"
 12089 ;; Parameters:    Size  Location     Type
 12090 ;;  a               2    4[BANK0 ] PTR unsigned char 
 12091 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
 12092 ;; Auto vars:     Size  Location     Type
 12093 ;;  i               1    6[BANK0 ] unsigned char 
 12094 ;; Return value:  Size  Location     Type
 12095 ;;                  1    wreg      void 
 12096 ;; Registers used:
 12097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12098 ;; Tracked objects:
 12099 ;;		On entry : 0/0
 12100 ;;		On exit  : 0/0
 12101 ;;		Unchanged: 0/0
 12102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12103 ;;      Params:         0       2       0       0       0       0       0
 12104 ;;      Locals:         0       1       0       0       0       0       0
 12105 ;;      Temps:          0       0       0       0       0       0       0
 12106 ;;      Totals:         0       3       0       0       0       0       0
 12107 ;;Total ram usage:        3 bytes
 12108 ;; Hardware stack levels used:    1
 12109 ;; Hardware stack levels required when called:    8
 12110 ;; This function calls:
 12111 ;;		_Lcd_Write_Char
 12112 ;; This function is called by:
 12113 ;;		_atualizarLCD
 12114 ;; This function uses a non-reentrant model
 12115 ;;
 12116                           
 12117                           	psect	text32
 12118  006F90                     __ptext32:
 12119                           	opt stack 0
 12120  006F90                     _Lcd_Write_String:
 12121                           	opt stack 0
 12122  006F90  FFFF               	dw	65535	; assembler added errata NOP
 12123                           
 12124                           ;lcd.h: 134: unsigned char i = 0;
 12125                           
 12126                           ; BSR set to: 0
 12127                           ;incstack = 0
 12128  006F92  0E00               	movlw	0
 12129  006F94  0100               	movlb	0	; () banked
 12130  006F96  6F86               	movwf	Lcd_Write_String@i& (0+255),b
 12131                           
 12132                           ;lcd.h: 136: for (i = 0; i < 20; i++) {
 12133  006F98  0E00               	movlw	0
 12134  006F9A  6F86               	movwf	Lcd_Write_String@i& (0+255),b
 12135  006F9C                     l6341:
 12136  006F9C  FFFF               	dw	65535	; assembler added errata NOP
 12137                           
 12138                           ; BSR set to: 0
 12139  006F9E  0E13               	movlw	19
 12140  006FA0  6586               	cpfsgt	Lcd_Write_String@i& (0+255),b
 12141  006FA2  D001               	goto	l628
 12142  006FA4  D00F               	goto	u6410
 12143  006FA6                     l628:
 12144  006FA6  FFFF               	dw	65535	; assembler added errata NOP
 12145                           
 12146                           ; BSR set to: 0
 12147                           ;lcd.h: 137: Lcd_Write_Char(a[i]);
 12148                           
 12149                           ; BSR set to: 0
 12150  006FA8  5186               	movf	Lcd_Write_String@i& (0+255),w,b
 12151  006FAA  0D01               	mullw	1
 12152  006FAC  50F3               	movf	prodl,w,c
 12153  006FAE  2584               	addwf	Lcd_Write_String@a& (0+255),w,b
 12154  006FB0  6ED9               	movwf	fsr2l,c
 12155  006FB2  50F4               	movf	prodh,w,c
 12156  006FB4  2185               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
 12157  006FB6  6EDA               	movwf	fsr2h,c
 12158  006FB8  50DF               	movf	indf2,w,c
 12159  006FBA  EC09  F03A         	call	_Lcd_Write_Char
 12160  006FBE  0100               	movlb	0	; () banked
 12161  006FC0  2B86               	incf	Lcd_Write_String@i& (0+255),f,b
 12162  006FC2  D7EC               	goto	l6341
 12163  006FC4                     u6410:
 12164  006FC4  FFFF               	dw	65535	; assembler added errata NOP
 12165                           
 12166                           ; BSR set to: 0
 12167                           
 12168                           ; BSR set to: 0
 12169  006FC6  0012               	return		;funcret
 12170  006FC8  FFFF               	dw	65535	; errata NOP
 12171  006FCA                     __end_of_Lcd_Write_String:
 12172                           	opt stack 0
 12173                           tblptru	equ	0xFF8
 12174                           tblptrh	equ	0xFF7
 12175                           tblptrl	equ	0xFF6
 12176                           tablat	equ	0xFF5
 12177                           prodh	equ	0xFF4
 12178                           prodl	equ	0xFF3
 12179                           intcon	equ	0xFF2
 12180                           intcon2	equ	0xFF1
 12181                           intcon3	equ	0xFF0
 12182                           postinc0	equ	0xFEE
 12183                           wreg	equ	0xFE8
 12184                           postdec1	equ	0xFE5
 12185                           fsr1l	equ	0xFE1
 12186                           indf2	equ	0xFDF
 12187                           postinc2	equ	0xFDE
 12188                           postdec2	equ	0xFDD
 12189                           fsr2h	equ	0xFDA
 12190                           fsr2l	equ	0xFD9
 12191                           status	equ	0xFD8
 12192                           
 12193 ;; *************** function _Lcd_Write_Char *****************
 12194 ;; Defined at:
 12195 ;;		line 109 in file "lcd.h"
 12196 ;; Parameters:    Size  Location     Type
 12197 ;;  a               1    wreg     unsigned char 
 12198 ;; Auto vars:     Size  Location     Type
 12199 ;;  a               1    3[BANK0 ] unsigned char 
 12200 ;;  y               1    2[BANK0 ] unsigned char 
 12201 ;;  tempp           1    1[BANK0 ] unsigned char 
 12202 ;; Return value:  Size  Location     Type
 12203 ;;                  1    wreg      void 
 12204 ;; Registers used:
 12205 ;;		wreg, status,2, status,0, cstack
 12206 ;; Tracked objects:
 12207 ;;		On entry : 0/0
 12208 ;;		On exit  : 0/0
 12209 ;;		Unchanged: 0/0
 12210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12211 ;;      Params:         0       0       0       0       0       0       0
 12212 ;;      Locals:         0       3       0       0       0       0       0
 12213 ;;      Temps:          0       0       0       0       0       0       0
 12214 ;;      Totals:         0       3       0       0       0       0       0
 12215 ;;Total ram usage:        3 bytes
 12216 ;; Hardware stack levels used:    1
 12217 ;; Hardware stack levels required when called:    7
 12218 ;; This function calls:
 12219 ;;		_Lcd_Port
 12220 ;; This function is called by:
 12221 ;;		_Lcd_Write_String
 12222 ;;		_criarCaracteresCGRAM
 12223 ;; This function uses a non-reentrant model
 12224 ;;
 12225                           
 12226                           	psect	text33
 12227  007412                     __ptext33:
 12228                           	opt stack 0
 12229  007412                     _Lcd_Write_Char:
 12230                           	opt stack 0
 12231  007412  FFFF               	dw	65535	; assembler added errata NOP
 12232                           
 12233                           ; BSR set to: 0
 12234                           ;incstack = 0
 12235                           ;Lcd_Write_Char@a stored from wreg
 12236  007414  0100               	movlb	0	; () banked
 12237  007416  6F83               	movwf	Lcd_Write_Char@a& (0+255),b
 12238                           
 12239                           ;lcd.h: 110: char tempp, y;
 12240                           ;lcd.h: 111: tempp = a & 0x0F;
 12241  007418  0100               	movlb	0	; () banked
 12242  00741A  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 12243  00741C  0B0F               	andlw	15
 12244  00741E  6F81               	movwf	Lcd_Write_Char@tempp& (0+255),b
 12245                           
 12246                           ;lcd.h: 112: y = a & 0xF0;
 12247  007420  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 12248  007422  0BF0               	andlw	240
 12249  007424  6F82               	movwf	Lcd_Write_Char@y& (0+255),b
 12250                           
 12251                           ; BSR set to: 0
 12252                           ;lcd.h: 113: PORTDbits.RD1 = 1;
 12253  007426  8283               	bsf	3971,1,c	;volatile
 12254                           
 12255                           ; BSR set to: 0
 12256                           ;lcd.h: 114: Lcd_Port(y >> 4);
 12257  007428  3982               	swapf	Lcd_Write_Char@y& (0+255),w,b
 12258  00742A  0B0F               	andlw	15
 12259  00742C  ECFD  F038         	call	_Lcd_Port
 12260                           
 12261                           ;lcd.h: 115: PORTDbits.RD0 = 1;
 12262  007430  8083               	bsf	3971,0,c	;volatile
 12263                           
 12264                           ;lcd.h: 116: _delay((unsigned long)((150)*(8000000/4000000.0)));
 12265  007432  0E4B               	movlw	75
 12266  007434                     u9167:
 12267  007434  FFFF               	dw	65535	; errata NOP
 12268  007436  2EE8               	decfsz	wreg,f,c
 12269  007438  D7FD               	bra	u9167
 12270                           
 12271                           ;lcd.h: 117: PORTDbits.RD0 = 0;
 12272  00743A  9083               	bcf	3971,0,c	;volatile
 12273                           
 12274                           ;lcd.h: 118: Lcd_Port(tempp);
 12275  00743C  0100               	movlb	0	; () banked
 12276  00743E  5181               	movf	Lcd_Write_Char@tempp& (0+255),w,b
 12277  007440  ECFD  F038         	call	_Lcd_Port
 12278                           
 12279                           ;lcd.h: 119: PORTDbits.RD0 = 1;
 12280  007444  8083               	bsf	3971,0,c	;volatile
 12281                           
 12282                           ;lcd.h: 120: _delay((unsigned long)((150)*(8000000/4000000.0)));
 12283  007446  0E4B               	movlw	75
 12284  007448                     u9177:
 12285  007448  FFFF               	dw	65535	; errata NOP
 12286  00744A  2EE8               	decfsz	wreg,f,c
 12287  00744C  D7FD               	bra	u9177
 12288                           
 12289                           ;lcd.h: 121: PORTDbits.RD0 = 0;
 12290  00744E  9083               	bcf	3971,0,c	;volatile
 12291                           
 12292                           ;lcd.h: 122: _delay((unsigned long)((100)*(8000000/4000000.0)));
 12293  007450  0E32               	movlw	50
 12294  007452                     u9187:
 12295  007452  FFFF               	dw	65535	; errata NOP
 12296  007454  2EE8               	decfsz	wreg,f,c
 12297  007456  D7FD               	bra	u9187
 12298                           
 12299                           ;lcd.h: 125: PORTDbits.RD0 = 1;
 12300  007458  8083               	bsf	3971,0,c	;volatile
 12301                           
 12302                           ;lcd.h: 126: PORTDbits.RD1 = 1;
 12303  00745A  8283               	bsf	3971,1,c	;volatile
 12304                           
 12305                           ;lcd.h: 127: PORTDbits.RD2 = 1;
 12306  00745C  8483               	bsf	3971,2,c	;volatile
 12307                           
 12308                           ;lcd.h: 128: PORTDbits.RD3 = 1;
 12309  00745E  8683               	bsf	3971,3,c	;volatile
 12310                           
 12311                           ;lcd.h: 129: PORTDbits.RD4 = 1;
 12312  007460  8883               	bsf	3971,4,c	;volatile
 12313                           
 12314                           ;lcd.h: 130: PORTDbits.RD5 = 1;
 12315  007462  8A83               	bsf	3971,5,c	;volatile
 12316  007464  0012               	return		;funcret
 12317  007466  FFFF               	dw	65535	; errata NOP
 12318  007468                     __end_of_Lcd_Write_Char:
 12319                           	opt stack 0
 12320                           tblptru	equ	0xFF8
 12321                           tblptrh	equ	0xFF7
 12322                           tblptrl	equ	0xFF6
 12323                           tablat	equ	0xFF5
 12324                           prodh	equ	0xFF4
 12325                           prodl	equ	0xFF3
 12326                           intcon	equ	0xFF2
 12327                           intcon2	equ	0xFF1
 12328                           intcon3	equ	0xFF0
 12329                           postinc0	equ	0xFEE
 12330                           wreg	equ	0xFE8
 12331                           postdec1	equ	0xFE5
 12332                           fsr1l	equ	0xFE1
 12333                           indf2	equ	0xFDF
 12334                           postinc2	equ	0xFDE
 12335                           postdec2	equ	0xFDD
 12336                           fsr2h	equ	0xFDA
 12337                           fsr2l	equ	0xFD9
 12338                           status	equ	0xFD8
 12339                           
 12340 ;; *************** function _Lcd_Set_Cursor *****************
 12341 ;; Defined at:
 12342 ;;		line 74 in file "lcd.h"
 12343 ;; Parameters:    Size  Location     Type
 12344 ;;  a               1    wreg     unsigned char 
 12345 ;;  b               1    3[BANK0 ] unsigned char 
 12346 ;; Auto vars:     Size  Location     Type
 12347 ;;  a               1    4[BANK0 ] unsigned char 
 12348 ;;  temp            1    7[BANK0 ] unsigned char 
 12349 ;;  y               1    6[BANK0 ] unsigned char 
 12350 ;;  z               1    5[BANK0 ] unsigned char 
 12351 ;; Return value:  Size  Location     Type
 12352 ;;                  1    wreg      void 
 12353 ;; Registers used:
 12354 ;;		wreg, status,2, status,0, cstack
 12355 ;; Tracked objects:
 12356 ;;		On entry : 0/0
 12357 ;;		On exit  : 0/0
 12358 ;;		Unchanged: 0/0
 12359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12360 ;;      Params:         0       1       0       0       0       0       0
 12361 ;;      Locals:         0       4       0       0       0       0       0
 12362 ;;      Temps:          0       0       0       0       0       0       0
 12363 ;;      Totals:         0       5       0       0       0       0       0
 12364 ;;Total ram usage:        5 bytes
 12365 ;; Hardware stack levels used:    1
 12366 ;; Hardware stack levels required when called:    8
 12367 ;; This function calls:
 12368 ;;		_Lcd_Cmd
 12369 ;; This function is called by:
 12370 ;;		_atualizarLCD
 12371 ;; This function uses a non-reentrant model
 12372 ;;
 12373                           
 12374                           	psect	text34
 12375  003B56                     __ptext34:
 12376                           	opt stack 0
 12377  003B56                     _Lcd_Set_Cursor:
 12378                           	opt stack 0
 12379  003B56  FFFF               	dw	65535	; assembler added errata NOP
 12380                           
 12381                           ;incstack = 0
 12382                           ;Lcd_Set_Cursor@a stored from wreg
 12383  003B58  0100               	movlb	0	; () banked
 12384  003B5A  6F84               	movwf	Lcd_Set_Cursor@a& (0+255),b
 12385                           
 12386                           ;lcd.h: 75: char temp, z, y;
 12387                           ;lcd.h: 76: switch (a) {
 12388  003B5C  D04C               	goto	l615
 12389  003B5E  FFFF               	dw	65535	; assembler added errata NOP
 12390                           
 12391                           ;lcd.h: 78: temp = 0x80 + b - 1;
 12392  003B60  0100               	movlb	0	; () banked
 12393  003B62  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 12394  003B64  0F7F               	addlw	127
 12395  003B66  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 12396                           
 12397                           ;lcd.h: 79: z = temp >> 4;
 12398  003B68  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 12399  003B6A  0B0F               	andlw	15
 12400  003B6C  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 12401                           
 12402                           ;lcd.h: 80: y = temp & 0x0F;
 12403  003B6E  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 12404  003B70  0B0F               	andlw	15
 12405  003B72  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 12406                           
 12407                           ; BSR set to: 0
 12408                           ;lcd.h: 81: Lcd_Cmd(z);
 12409  003B74  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 12410  003B76  EC8F  F036         	call	_Lcd_Cmd
 12411                           
 12412                           ;lcd.h: 82: Lcd_Cmd(y);
 12413  003B7A  0100               	movlb	0	; () banked
 12414  003B7C  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 12415  003B7E  EC8F  F036         	call	_Lcd_Cmd
 12416                           
 12417                           ;lcd.h: 83: break;
 12418  003B82  D048               	goto	l617
 12419  003B84  FFFF               	dw	65535	; assembler added errata NOP
 12420                           
 12421                           ;lcd.h: 85: temp = 0xC0 + b - 1;
 12422  003B86  0100               	movlb	0	; () banked
 12423  003B88  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 12424  003B8A  0FBF               	addlw	191
 12425  003B8C  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 12426                           
 12427                           ;lcd.h: 86: z = temp >> 4;
 12428  003B8E  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 12429  003B90  0B0F               	andlw	15
 12430  003B92  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 12431                           
 12432                           ;lcd.h: 87: y = temp & 0x0F;
 12433  003B94  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 12434  003B96  0B0F               	andlw	15
 12435  003B98  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 12436                           
 12437                           ; BSR set to: 0
 12438                           ;lcd.h: 88: Lcd_Cmd(z);
 12439  003B9A  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 12440  003B9C  EC8F  F036         	call	_Lcd_Cmd
 12441                           
 12442                           ;lcd.h: 89: Lcd_Cmd(y);
 12443  003BA0  0100               	movlb	0	; () banked
 12444  003BA2  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 12445  003BA4  EC8F  F036         	call	_Lcd_Cmd
 12446                           
 12447                           ;lcd.h: 90: break;
 12448  003BA8  D035               	goto	l617
 12449  003BAA  FFFF               	dw	65535	; assembler added errata NOP
 12450                           
 12451                           ;lcd.h: 92: temp = 0x94 + b;
 12452  003BAC  0100               	movlb	0	; () banked
 12453  003BAE  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 12454  003BB0  0F94               	addlw	148
 12455  003BB2  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 12456                           
 12457                           ;lcd.h: 93: z = temp >> 4;
 12458  003BB4  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 12459  003BB6  0B0F               	andlw	15
 12460  003BB8  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 12461                           
 12462                           ;lcd.h: 94: y = temp & 0x0F;
 12463  003BBA  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 12464  003BBC  0B0F               	andlw	15
 12465  003BBE  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 12466                           
 12467                           ; BSR set to: 0
 12468                           ;lcd.h: 95: Lcd_Cmd(z);
 12469  003BC0  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 12470  003BC2  EC8F  F036         	call	_Lcd_Cmd
 12471                           
 12472                           ;lcd.h: 96: Lcd_Cmd(y);
 12473  003BC6  0100               	movlb	0	; () banked
 12474  003BC8  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 12475  003BCA  EC8F  F036         	call	_Lcd_Cmd
 12476                           
 12477                           ;lcd.h: 97: break;
 12478  003BCE  D022               	goto	l617
 12479  003BD0  FFFF               	dw	65535	; assembler added errata NOP
 12480                           
 12481                           ;lcd.h: 99: temp = 0xD4 + b;
 12482  003BD2  0100               	movlb	0	; () banked
 12483  003BD4  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 12484  003BD6  0FD4               	addlw	212
 12485  003BD8  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 12486                           
 12487                           ;lcd.h: 100: z = temp >> 4;
 12488  003BDA  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 12489  003BDC  0B0F               	andlw	15
 12490  003BDE  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 12491                           
 12492                           ;lcd.h: 101: y = temp & 0x0F;
 12493  003BE0  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 12494  003BE2  0B0F               	andlw	15
 12495  003BE4  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 12496                           
 12497                           ; BSR set to: 0
 12498                           ;lcd.h: 102: Lcd_Cmd(z);
 12499  003BE6  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 12500  003BE8  EC8F  F036         	call	_Lcd_Cmd
 12501                           
 12502                           ;lcd.h: 103: Lcd_Cmd(y);
 12503  003BEC  0100               	movlb	0	; () banked
 12504  003BEE  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 12505  003BF0  EC8F  F036         	call	_Lcd_Cmd
 12506                           
 12507                           ;lcd.h: 106: }
 12508                           
 12509                           ;lcd.h: 105: default:return;
 12510                           
 12511                           ;lcd.h: 104: break;
 12512  003BF4  D00F               	goto	l617
 12513  003BF6                     l615:
 12514  003BF6  FFFF               	dw	65535	; assembler added errata NOP
 12515  003BF8  0100               	movlb	0	; () banked
 12516  003BFA  5184               	movf	Lcd_Set_Cursor@a& (0+255),w,b
 12517                           
 12518                           ; Switch size 1, requested type "space"
 12519                           ; Number of cases is 4, Range of values is 1 to 4
 12520                           ; switch strategies available:
 12521                           ; Name         Instructions Cycles
 12522                           ; simple_byte           13     7 (average)
 12523                           ;	Chosen strategy is simple_byte
 12524  003BFC  0A01               	xorlw	1	; case 1
 12525  003BFE  B4D8               	btfsc	status,2,c
 12526  003C00  D7AE               	goto	l616
 12527  003C02  0A03               	xorlw	3	; case 2
 12528  003C04  B4D8               	btfsc	status,2,c
 12529  003C06  D7BE               	goto	l618
 12530  003C08  0A01               	xorlw	1	; case 3
 12531  003C0A  B4D8               	btfsc	status,2,c
 12532  003C0C  D7CE               	goto	l619
 12533  003C0E  0A07               	xorlw	7	; case 4
 12534  003C10  B4D8               	btfsc	status,2,c
 12535  003C12  D7DE               	goto	l620
 12536  003C14                     l617:
 12537  003C14  FFFF               	dw	65535	; assembler added errata NOP
 12538                           
 12539                           ; BSR set to: 0
 12540  003C16  0012               	return		;funcret
 12541  003C18  FFFF               	dw	65535	; errata NOP
 12542  003C1A                     __end_of_Lcd_Set_Cursor:
 12543                           	opt stack 0
 12544                           tblptru	equ	0xFF8
 12545                           tblptrh	equ	0xFF7
 12546                           tblptrl	equ	0xFF6
 12547                           tablat	equ	0xFF5
 12548                           prodh	equ	0xFF4
 12549                           prodl	equ	0xFF3
 12550                           intcon	equ	0xFF2
 12551                           intcon2	equ	0xFF1
 12552                           intcon3	equ	0xFF0
 12553                           postinc0	equ	0xFEE
 12554                           wreg	equ	0xFE8
 12555                           postdec1	equ	0xFE5
 12556                           fsr1l	equ	0xFE1
 12557                           indf2	equ	0xFDF
 12558                           postinc2	equ	0xFDE
 12559                           postdec2	equ	0xFDD
 12560                           fsr2h	equ	0xFDA
 12561                           fsr2l	equ	0xFD9
 12562                           status	equ	0xFD8
 12563                           
 12564 ;; *************** function _ajusteSP_Bombas *****************
 12565 ;; Defined at:
 12566 ;;		line 7 in file "tela_CONFIG_PRESSAO.h"
 12567 ;; Parameters:    Size  Location     Type
 12568 ;;		None
 12569 ;; Auto vars:     Size  Location     Type
 12570 ;;		None
 12571 ;; Return value:  Size  Location     Type
 12572 ;;                  1    wreg      void 
 12573 ;; Registers used:
 12574 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12575 ;; Tracked objects:
 12576 ;;		On entry : 0/0
 12577 ;;		On exit  : 0/0
 12578 ;;		Unchanged: 0/0
 12579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12580 ;;      Params:         0       0       0       0       0       0       0
 12581 ;;      Locals:         0       2       0       0       0       0       0
 12582 ;;      Temps:          0       0       0       0       0       0       0
 12583 ;;      Totals:         0       2       0       0       0       0       0
 12584 ;;Total ram usage:        2 bytes
 12585 ;; Hardware stack levels used:    1
 12586 ;; Hardware stack levels required when called:   10
 12587 ;; This function calls:
 12588 ;;		_blink
 12589 ;;		_btPress
 12590 ;;		_intToFloatStr
 12591 ;;		_sprintf
 12592 ;;		_writeEEPROM_ext
 12593 ;; This function is called by:
 12594 ;;		_main
 12595 ;; This function uses a non-reentrant model
 12596 ;;
 12597                           
 12598                           	psect	text35
 12599  001AA2                     __ptext35:
 12600                           	opt stack 0
 12601  001AA2                     _ajusteSP_Bombas:
 12602                           	opt stack 0
 12603  001AA2  FFFF               	dw	65535	; assembler added errata NOP
 12604                           
 12605                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 12606                           
 12607                           ;incstack = 0
 12608  001AA4  0100               	movlb	0	; () banked
 12609  001AA6  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 12610  001AA8  ECB6  F01F         	call	_intToFloatStr
 12611  001AAC  C0BB  F0C8         	movff	?_intToFloatStr,_ajusteSP_Bombas$2567
 12612  001AB0  C0BC  F0C9         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2567+1
 12613                           
 12614                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 12615  001AB4  0E99               	movlw	low _line1
 12616  001AB6  0100               	movlb	0	; () banked
 12617  001AB8  6FA1               	movwf	sprintf@wh& (0+255),b
 12618  001ABA  0E01               	movlw	high _line1
 12619  001ABC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12620  001ABE  0E22               	movlw	low STR_106
 12621  001AC0  6FA3               	movwf	sprintf@f& (0+255),b
 12622  001AC2  0E7F               	movlw	high STR_106
 12623  001AC4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12624  001AC6  C0C8  F0A5         	movff	_ajusteSP_Bombas$2567,?_sprintf+4
 12625  001ACA  C0C9  F0A6         	movff	_ajusteSP_Bombas$2567+1,?_sprintf+5
 12626  001ACE  EC42  F039         	call	_sprintf	;wreg free
 12627                           
 12628                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 12629  001AD2  0100               	movlb	0	; () banked
 12630  001AD4  51E3               	movf	_sp_jockey& (0+255),w,b
 12631  001AD6  ECB6  F01F         	call	_intToFloatStr
 12632  001ADA  C0BB  F0C8         	movff	?_intToFloatStr,_ajusteSP_Bombas$2567
 12633  001ADE  C0BC  F0C9         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2567+1
 12634                           
 12635                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 12636  001AE2  0E84               	movlw	low _line2
 12637  001AE4  0100               	movlb	0	; () banked
 12638  001AE6  6FA1               	movwf	sprintf@wh& (0+255),b
 12639  001AE8  0E01               	movlw	high _line2
 12640  001AEA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12641  001AEC  0E2D               	movlw	low STR_48
 12642  001AEE  6FA3               	movwf	sprintf@f& (0+255),b
 12643  001AF0  0E7F               	movlw	high STR_48
 12644  001AF2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12645  001AF4  C0C8  F0A5         	movff	_ajusteSP_Bombas$2567,?_sprintf+4
 12646  001AF8  C0C9  F0A6         	movff	_ajusteSP_Bombas$2567+1,?_sprintf+5
 12647  001AFC  EC42  F039         	call	_sprintf	;wreg free
 12648                           
 12649                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 12650  001B00  0100               	movlb	0	; () banked
 12651  001B02  51E2               	movf	_sp_principal& (0+255),w,b
 12652  001B04  ECB6  F01F         	call	_intToFloatStr
 12653  001B08  C0BB  F0C8         	movff	?_intToFloatStr,_ajusteSP_Bombas$2567
 12654  001B0C  C0BC  F0C9         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2567+1
 12655                           
 12656                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 12657  001B10  0E6F               	movlw	low _line3
 12658  001B12  0100               	movlb	0	; () banked
 12659  001B14  6FA1               	movwf	sprintf@wh& (0+255),b
 12660  001B16  0E01               	movlw	high _line3
 12661  001B18  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12662  001B1A  0E1F               	movlw	low STR_51
 12663  001B1C  6FA3               	movwf	sprintf@f& (0+255),b
 12664  001B1E  0E7E               	movlw	high STR_51
 12665  001B20  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12666  001B22  C0C8  F0A5         	movff	_ajusteSP_Bombas$2567,?_sprintf+4
 12667  001B26  C0C9  F0A6         	movff	_ajusteSP_Bombas$2567+1,?_sprintf+5
 12668  001B2A  EC42  F039         	call	_sprintf	;wreg free
 12669                           
 12670                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 12671  001B2E  0100               	movlb	0	; () banked
 12672  001B30  51E1               	movf	_sp_estacionaria& (0+255),w,b
 12673  001B32  ECB6  F01F         	call	_intToFloatStr
 12674  001B36  C0BB  F0C8         	movff	?_intToFloatStr,_ajusteSP_Bombas$2567
 12675  001B3A  C0BC  F0C9         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2567+1
 12676                           
 12677                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 12678  001B3E  0E5A               	movlw	low _line4
 12679  001B40  0100               	movlb	0	; () banked
 12680  001B42  6FA1               	movwf	sprintf@wh& (0+255),b
 12681  001B44  0E01               	movlw	high _line4
 12682  001B46  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12683  001B48  0E2E               	movlw	low STR_54
 12684  001B4A  6FA3               	movwf	sprintf@f& (0+255),b
 12685  001B4C  0E7E               	movlw	high STR_54
 12686  001B4E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12687  001B50  C0C8  F0A5         	movff	_ajusteSP_Bombas$2567,?_sprintf+4
 12688  001B54  C0C9  F0A6         	movff	_ajusteSP_Bombas$2567+1,?_sprintf+5
 12689  001B58  EC42  F039         	call	_sprintf	;wreg free
 12690                           
 12691                           ;tela_CONFIG_PRESSAO.h: 15: switch (option_posi) {
 12692  001B5C  D095               	goto	l880
 12693  001B5E  FFFF               	dw	65535	; assembler added errata NOP
 12694                           
 12695                           ;tela_CONFIG_PRESSAO.h: 17: blink(line1, 8, 15);
 12696  001B60  0E99               	movlw	low _line1
 12697  001B62  0100               	movlb	0	; () banked
 12698  001B64  6F80               	movwf	blink@line& (0+255),b
 12699  001B66  0E01               	movlw	high _line1
 12700  001B68  6F81               	movwf	(blink@line+1)& (0+255),b
 12701  001B6A  0E08               	movlw	8
 12702  001B6C  6F82               	movwf	blink@start& (0+255),b
 12703  001B6E  0E0F               	movlw	15
 12704  001B70  6F83               	movwf	blink@end& (0+255),b
 12705  001B72  EC3F  F038         	call	_blink	;wreg free
 12706                           
 12707                           ;tela_CONFIG_PRESSAO.h: 18: if (btPress(3)) {
 12708  001B76  0E03               	movlw	3
 12709  001B78  ECE4  F03B         	call	_btPress
 12710  001B7C  0900               	iorlw	0
 12711  001B7E  B4D8               	btfsc	status,2,c
 12712  001B80  D002               	goto	l882
 12713                           
 12714                           ;tela_CONFIG_PRESSAO.h: 19: sp_pressao_rede++;
 12715  001B82  0100               	movlb	0	; () banked
 12716  001B84  2BE4               	incf	_sp_pressao_rede& (0+255),f,b
 12717  001B86                     l882:
 12718  001B86  FFFF               	dw	65535	; assembler added errata NOP
 12719                           
 12720                           ;tela_CONFIG_PRESSAO.h: 20: }
 12721                           ;tela_CONFIG_PRESSAO.h: 21: if (btPress(2)) {
 12722                           
 12723                           ; BSR set to: 0
 12724  001B88  0E02               	movlw	2
 12725  001B8A  ECE4  F03B         	call	_btPress
 12726  001B8E  0900               	iorlw	0
 12727  001B90  B4D8               	btfsc	status,2,c
 12728  001B92  D002               	goto	l883
 12729                           
 12730                           ;tela_CONFIG_PRESSAO.h: 22: sp_pressao_rede--;
 12731  001B94  0100               	movlb	0	; () banked
 12732  001B96  07E4               	decf	_sp_pressao_rede& (0+255),f,b
 12733  001B98                     l883:
 12734  001B98  FFFF               	dw	65535	; assembler added errata NOP
 12735                           
 12736                           ;tela_CONFIG_PRESSAO.h: 23: }
 12737                           ;tela_CONFIG_PRESSAO.h: 24: if (sp_pressao_rede > 99) {
 12738                           
 12739                           ; BSR set to: 0
 12740  001B9A  0E63               	movlw	99
 12741  001B9C  0100               	movlb	0	; () banked
 12742  001B9E  65E4               	cpfsgt	_sp_pressao_rede& (0+255),b
 12743  001BA0  D083               	goto	l885
 12744                           
 12745                           ; BSR set to: 0
 12746                           ;tela_CONFIG_PRESSAO.h: 25: sp_pressao_rede = 0;
 12747  001BA2  0E00               	movlw	0
 12748  001BA4  6FE4               	movwf	_sp_pressao_rede& (0+255),b
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;tela_CONFIG_PRESSAO.h: 26: }
 12752                           ;tela_CONFIG_PRESSAO.h: 27: break;
 12753  001BA6  D080               	goto	l885
 12754  001BA8  FFFF               	dw	65535	; assembler added errata NOP
 12755                           
 12756                           ; BSR set to: 0
 12757                           ;tela_CONFIG_PRESSAO.h: 29: blink(line2, 8, 15);
 12758                           
 12759                           ; BSR set to: 0
 12760  001BAA  0E84               	movlw	low _line2
 12761  001BAC  6F80               	movwf	blink@line& (0+255),b
 12762  001BAE  0E01               	movlw	high _line2
 12763  001BB0  6F81               	movwf	(blink@line+1)& (0+255),b
 12764  001BB2  0E08               	movlw	8
 12765  001BB4  6F82               	movwf	blink@start& (0+255),b
 12766  001BB6  0E0F               	movlw	15
 12767  001BB8  6F83               	movwf	blink@end& (0+255),b
 12768  001BBA  EC3F  F038         	call	_blink	;wreg free
 12769                           
 12770                           ;tela_CONFIG_PRESSAO.h: 30: if (btPress(3)) {
 12771  001BBE  0E03               	movlw	3
 12772  001BC0  ECE4  F03B         	call	_btPress
 12773  001BC4  0900               	iorlw	0
 12774  001BC6  B4D8               	btfsc	status,2,c
 12775  001BC8  D002               	goto	l887
 12776                           
 12777                           ;tela_CONFIG_PRESSAO.h: 31: sp_jockey++;
 12778  001BCA  0100               	movlb	0	; () banked
 12779  001BCC  2BE3               	incf	_sp_jockey& (0+255),f,b
 12780  001BCE                     l887:
 12781  001BCE  FFFF               	dw	65535	; assembler added errata NOP
 12782                           
 12783                           ;tela_CONFIG_PRESSAO.h: 32: }
 12784                           ;tela_CONFIG_PRESSAO.h: 33: if (btPress(2)) {
 12785                           
 12786                           ; BSR set to: 0
 12787  001BD0  0E02               	movlw	2
 12788  001BD2  ECE4  F03B         	call	_btPress
 12789  001BD6  0900               	iorlw	0
 12790  001BD8  B4D8               	btfsc	status,2,c
 12791  001BDA  D002               	goto	l888
 12792                           
 12793                           ;tela_CONFIG_PRESSAO.h: 34: sp_jockey--;
 12794  001BDC  0100               	movlb	0	; () banked
 12795  001BDE  07E3               	decf	_sp_jockey& (0+255),f,b
 12796  001BE0                     l888:
 12797  001BE0  FFFF               	dw	65535	; assembler added errata NOP
 12798                           
 12799                           ;tela_CONFIG_PRESSAO.h: 35: }
 12800                           ;tela_CONFIG_PRESSAO.h: 36: if (sp_jockey > 99) {
 12801                           
 12802                           ; BSR set to: 0
 12803  001BE2  0E63               	movlw	99
 12804  001BE4  0100               	movlb	0	; () banked
 12805  001BE6  65E3               	cpfsgt	_sp_jockey& (0+255),b
 12806  001BE8  D05F               	goto	l885
 12807                           
 12808                           ; BSR set to: 0
 12809                           ;tela_CONFIG_PRESSAO.h: 37: sp_jockey = 0;
 12810  001BEA  0E00               	movlw	0
 12811  001BEC  6FE3               	movwf	_sp_jockey& (0+255),b
 12812                           
 12813                           ; BSR set to: 0
 12814                           ;tela_CONFIG_PRESSAO.h: 38: }
 12815                           ;tela_CONFIG_PRESSAO.h: 39: break;
 12816  001BEE  D05C               	goto	l885
 12817  001BF0  FFFF               	dw	65535	; assembler added errata NOP
 12818                           
 12819                           ; BSR set to: 0
 12820                           ;tela_CONFIG_PRESSAO.h: 41: blink(line3, 12, 18);
 12821                           
 12822                           ; BSR set to: 0
 12823  001BF2  0E6F               	movlw	low _line3
 12824  001BF4  6F80               	movwf	blink@line& (0+255),b
 12825  001BF6  0E01               	movlw	high _line3
 12826  001BF8  6F81               	movwf	(blink@line+1)& (0+255),b
 12827  001BFA  0E0C               	movlw	12
 12828  001BFC  6F82               	movwf	blink@start& (0+255),b
 12829  001BFE  0E12               	movlw	18
 12830  001C00  6F83               	movwf	blink@end& (0+255),b
 12831  001C02  EC3F  F038         	call	_blink	;wreg free
 12832                           
 12833                           ;tela_CONFIG_PRESSAO.h: 42: if (btPress(3)) {
 12834  001C06  0E03               	movlw	3
 12835  001C08  ECE4  F03B         	call	_btPress
 12836  001C0C  0900               	iorlw	0
 12837  001C0E  B4D8               	btfsc	status,2,c
 12838  001C10  D002               	goto	l891
 12839                           
 12840                           ;tela_CONFIG_PRESSAO.h: 43: sp_principal++;
 12841  001C12  0100               	movlb	0	; () banked
 12842  001C14  2BE2               	incf	_sp_principal& (0+255),f,b
 12843  001C16                     l891:
 12844  001C16  FFFF               	dw	65535	; assembler added errata NOP
 12845                           
 12846                           ;tela_CONFIG_PRESSAO.h: 44: }
 12847                           ;tela_CONFIG_PRESSAO.h: 45: if (btPress(2)) {
 12848                           
 12849                           ; BSR set to: 0
 12850  001C18  0E02               	movlw	2
 12851  001C1A  ECE4  F03B         	call	_btPress
 12852  001C1E  0900               	iorlw	0
 12853  001C20  B4D8               	btfsc	status,2,c
 12854  001C22  D002               	goto	l892
 12855                           
 12856                           ;tela_CONFIG_PRESSAO.h: 46: sp_principal--;
 12857  001C24  0100               	movlb	0	; () banked
 12858  001C26  07E2               	decf	_sp_principal& (0+255),f,b
 12859  001C28                     l892:
 12860  001C28  FFFF               	dw	65535	; assembler added errata NOP
 12861                           
 12862                           ;tela_CONFIG_PRESSAO.h: 47: }
 12863                           ;tela_CONFIG_PRESSAO.h: 48: if (sp_principal > 99) {
 12864                           
 12865                           ; BSR set to: 0
 12866  001C2A  0E63               	movlw	99
 12867  001C2C  0100               	movlb	0	; () banked
 12868  001C2E  65E2               	cpfsgt	_sp_principal& (0+255),b
 12869  001C30  D03B               	goto	l885
 12870                           
 12871                           ; BSR set to: 0
 12872                           ;tela_CONFIG_PRESSAO.h: 49: sp_principal = 0;
 12873  001C32  0E00               	movlw	0
 12874  001C34  6FE2               	movwf	_sp_principal& (0+255),b
 12875                           
 12876                           ; BSR set to: 0
 12877                           ;tela_CONFIG_PRESSAO.h: 50: }
 12878                           ;tela_CONFIG_PRESSAO.h: 51: break;
 12879  001C36  D038               	goto	l885
 12880  001C38  FFFF               	dw	65535	; assembler added errata NOP
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;tela_CONFIG_PRESSAO.h: 53: blink(line4, 12, 18);
 12884                           
 12885                           ; BSR set to: 0
 12886  001C3A  0E5A               	movlw	low _line4
 12887  001C3C  6F80               	movwf	blink@line& (0+255),b
 12888  001C3E  0E01               	movlw	high _line4
 12889  001C40  6F81               	movwf	(blink@line+1)& (0+255),b
 12890  001C42  0E0C               	movlw	12
 12891  001C44  6F82               	movwf	blink@start& (0+255),b
 12892  001C46  0E12               	movlw	18
 12893  001C48  6F83               	movwf	blink@end& (0+255),b
 12894  001C4A  EC3F  F038         	call	_blink	;wreg free
 12895                           
 12896                           ;tela_CONFIG_PRESSAO.h: 54: if (btPress(3)) {
 12897  001C4E  0E03               	movlw	3
 12898  001C50  ECE4  F03B         	call	_btPress
 12899  001C54  0900               	iorlw	0
 12900  001C56  B4D8               	btfsc	status,2,c
 12901  001C58  D002               	goto	l895
 12902                           
 12903                           ;tela_CONFIG_PRESSAO.h: 55: sp_estacionaria++;
 12904  001C5A  0100               	movlb	0	; () banked
 12905  001C5C  2BE1               	incf	_sp_estacionaria& (0+255),f,b
 12906  001C5E                     l895:
 12907  001C5E  FFFF               	dw	65535	; assembler added errata NOP
 12908                           
 12909                           ;tela_CONFIG_PRESSAO.h: 56: }
 12910                           ;tela_CONFIG_PRESSAO.h: 57: if (btPress(2)) {
 12911                           
 12912                           ; BSR set to: 0
 12913  001C60  0E02               	movlw	2
 12914  001C62  ECE4  F03B         	call	_btPress
 12915  001C66  0900               	iorlw	0
 12916  001C68  B4D8               	btfsc	status,2,c
 12917  001C6A  D002               	goto	l896
 12918                           
 12919                           ;tela_CONFIG_PRESSAO.h: 58: sp_estacionaria--;
 12920  001C6C  0100               	movlb	0	; () banked
 12921  001C6E  07E1               	decf	_sp_estacionaria& (0+255),f,b
 12922  001C70                     l896:
 12923  001C70  FFFF               	dw	65535	; assembler added errata NOP
 12924                           
 12925                           ;tela_CONFIG_PRESSAO.h: 59: }
 12926                           ;tela_CONFIG_PRESSAO.h: 60: if (sp_estacionaria > 99) {
 12927                           
 12928                           ; BSR set to: 0
 12929  001C72  0E63               	movlw	99
 12930  001C74  0100               	movlb	0	; () banked
 12931  001C76  65E1               	cpfsgt	_sp_estacionaria& (0+255),b
 12932  001C78  D017               	goto	l885
 12933                           
 12934                           ; BSR set to: 0
 12935                           ;tela_CONFIG_PRESSAO.h: 61: sp_estacionaria = 0;
 12936  001C7A  0E00               	movlw	0
 12937  001C7C  6FE1               	movwf	_sp_estacionaria& (0+255),b
 12938                           
 12939                           ; BSR set to: 0
 12940                           ;tela_CONFIG_PRESSAO.h: 62: }
 12941                           ;tela_CONFIG_PRESSAO.h: 63: break;
 12942  001C7E  D014               	goto	l885
 12943  001C80  FFFF               	dw	65535	; assembler added errata NOP
 12944                           
 12945                           ; BSR set to: 0
 12946                           
 12947                           ; BSR set to: 0
 12948  001C82  0E00               	movlw	0
 12949  001C84  6FE0               	movwf	_option_posi& (0+255),b
 12950                           
 12951                           ; BSR set to: 0
 12952                           ;tela_CONFIG_PRESSAO.h: 66: }
 12953                           
 12954                           ;tela_CONFIG_PRESSAO.h: 65: break;
 12955  001C86  D010               	goto	l885
 12956  001C88                     l880:
 12957  001C88  FFFF               	dw	65535	; assembler added errata NOP
 12958                           
 12959                           ; BSR set to: 0
 12960  001C8A  0100               	movlb	0	; () banked
 12961  001C8C  51E0               	movf	_option_posi& (0+255),w,b
 12962                           
 12963                           ; Switch size 1, requested type "space"
 12964                           ; Number of cases is 4, Range of values is 0 to 3
 12965                           ; switch strategies available:
 12966                           ; Name         Instructions Cycles
 12967                           ; simple_byte           13     7 (average)
 12968                           ;	Chosen strategy is simple_byte
 12969  001C8E  0A00               	xorlw	0	; case 0
 12970  001C90  B4D8               	btfsc	status,2,c
 12971  001C92  D765               	goto	l881
 12972  001C94  0A01               	xorlw	1	; case 1
 12973  001C96  B4D8               	btfsc	status,2,c
 12974  001C98  D787               	goto	l886
 12975  001C9A  0A03               	xorlw	3	; case 2
 12976  001C9C  B4D8               	btfsc	status,2,c
 12977  001C9E  D7A8               	goto	l890
 12978  001CA0  0A01               	xorlw	1	; case 3
 12979  001CA2  B4D8               	btfsc	status,2,c
 12980  001CA4  D7C9               	goto	l894
 12981  001CA6  D7EC               	goto	l898
 12982  001CA8                     l885:
 12983  001CA8  FFFF               	dw	65535	; assembler added errata NOP
 12984                           
 12985                           ; BSR set to: 0
 12986                           ;tela_CONFIG_PRESSAO.h: 68: if (btPress(1)) {
 12987                           
 12988                           ; BSR set to: 0
 12989  001CAA  0E01               	movlw	1
 12990  001CAC  ECE4  F03B         	call	_btPress
 12991  001CB0  0900               	iorlw	0
 12992  001CB2  B4D8               	btfsc	status,2,c
 12993  001CB4  D01A               	goto	l899
 12994                           
 12995                           ;tela_CONFIG_PRESSAO.h: 69: writeEEPROM_ext(0, sp_jockey);
 12996  001CB6  C0E3  F08C         	movff	_sp_jockey,writeEEPROM_ext@data
 12997  001CBA  0E00               	movlw	0
 12998  001CBC  EC1F  F039         	call	_writeEEPROM_ext
 12999                           
 13000                           ;tela_CONFIG_PRESSAO.h: 70: writeEEPROM_ext(1, sp_principal);
 13001  001CC0  C0E2  F08C         	movff	_sp_principal,writeEEPROM_ext@data
 13002  001CC4  0E01               	movlw	1
 13003  001CC6  EC1F  F039         	call	_writeEEPROM_ext
 13004                           
 13005                           ;tela_CONFIG_PRESSAO.h: 71: writeEEPROM_ext(2, sp_estacionaria);
 13006  001CCA  C0E1  F08C         	movff	_sp_estacionaria,writeEEPROM_ext@data
 13007  001CCE  0E02               	movlw	2
 13008  001CD0  EC1F  F039         	call	_writeEEPROM_ext
 13009                           
 13010                           ;tela_CONFIG_PRESSAO.h: 72: writeEEPROM_ext(4, sp_pressao_rede);
 13011  001CD4  C0E4  F08C         	movff	_sp_pressao_rede,writeEEPROM_ext@data
 13012  001CD8  0E04               	movlw	4
 13013  001CDA  EC1F  F039         	call	_writeEEPROM_ext
 13014                           
 13015                           ;tela_CONFIG_PRESSAO.h: 73: option_posi = 0;
 13016  001CDE  0E00               	movlw	0
 13017  001CE0  0100               	movlb	0	; () banked
 13018  001CE2  6FE0               	movwf	_option_posi& (0+255),b
 13019                           
 13020                           ; BSR set to: 0
 13021                           ;tela_CONFIG_PRESSAO.h: 74: menu_posi = _menu_posi;
 13022  001CE4  C0DE  F0DF         	movff	__menu_posi,_menu_posi
 13023                           
 13024                           ;tela_CONFIG_PRESSAO.h: 75: } else if (btPress(4)) {
 13025  001CE8  D009               	goto	l901
 13026  001CEA                     l899:
 13027  001CEA  FFFF               	dw	65535	; assembler added errata NOP
 13028                           
 13029                           ; BSR set to: 0
 13030  001CEC  0E04               	movlw	4
 13031  001CEE  ECE4  F03B         	call	_btPress
 13032  001CF2  0900               	iorlw	0
 13033  001CF4  B4D8               	btfsc	status,2,c
 13034  001CF6  D002               	goto	l901
 13035                           
 13036                           ;tela_CONFIG_PRESSAO.h: 76: option_posi++;
 13037  001CF8  0100               	movlb	0	; () banked
 13038  001CFA  2BE0               	incf	_option_posi& (0+255),f,b
 13039  001CFC                     l901:
 13040  001CFC  FFFF               	dw	65535	; assembler added errata NOP
 13041                           
 13042                           ; BSR set to: 0
 13043                           
 13044                           ; BSR set to: 0
 13045  001CFE  0012               	return		;funcret
 13046  001D00  FFFF               	dw	65535	; errata NOP
 13047  001D02                     __end_of_ajusteSP_Bombas:
 13048                           	opt stack 0
 13049                           tblptru	equ	0xFF8
 13050                           tblptrh	equ	0xFF7
 13051                           tblptrl	equ	0xFF6
 13052                           tablat	equ	0xFF5
 13053                           prodh	equ	0xFF4
 13054                           prodl	equ	0xFF3
 13055                           intcon	equ	0xFF2
 13056                           intcon2	equ	0xFF1
 13057                           intcon3	equ	0xFF0
 13058                           postinc0	equ	0xFEE
 13059                           wreg	equ	0xFE8
 13060                           postdec1	equ	0xFE5
 13061                           fsr1l	equ	0xFE1
 13062                           indf2	equ	0xFDF
 13063                           postinc2	equ	0xFDE
 13064                           postdec2	equ	0xFDD
 13065                           fsr2h	equ	0xFDA
 13066                           fsr2l	equ	0xFD9
 13067                           status	equ	0xFD8
 13068                           
 13069 ;; *************** function _blink *****************
 13070 ;; Defined at:
 13071 ;;		line 196 in file "lcd.h"
 13072 ;; Parameters:    Size  Location     Type
 13073 ;;  line            2    0[BANK0 ] PTR unsigned char 
 13074 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
 13075 ;;  start           1    2[BANK0 ] unsigned char 
 13076 ;;  end             1    3[BANK0 ] unsigned char 
 13077 ;; Auto vars:     Size  Location     Type
 13078 ;;  i               1    4[BANK0 ] unsigned char 
 13079 ;; Return value:  Size  Location     Type
 13080 ;;                  1    wreg      void 
 13081 ;; Registers used:
 13082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13083 ;; Tracked objects:
 13084 ;;		On entry : 0/0
 13085 ;;		On exit  : 0/0
 13086 ;;		Unchanged: 0/0
 13087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13088 ;;      Params:         0       4       0       0       0       0       0
 13089 ;;      Locals:         0       1       0       0       0       0       0
 13090 ;;      Temps:          0       0       0       0       0       0       0
 13091 ;;      Totals:         0       5       0       0       0       0       0
 13092 ;;Total ram usage:        5 bytes
 13093 ;; Hardware stack levels used:    1
 13094 ;; Hardware stack levels required when called:    6
 13095 ;; This function calls:
 13096 ;;		Nothing
 13097 ;; This function is called by:
 13098 ;;		_telaPrincipal
 13099 ;;		_tela_ajusteRTC
 13100 ;;		_tela_testeBombas
 13101 ;;		_configuraTelefones
 13102 ;;		_configurarEstacionaria
 13103 ;;		_ajusteSP_Bombas
 13104 ;; This function uses a non-reentrant model
 13105 ;;
 13106                           
 13107                           	psect	text36
 13108  00707E                     __ptext36:
 13109                           	opt stack 0
 13110  00707E                     _blink:
 13111                           	opt stack 0
 13112  00707E  FFFF               	dw	65535	; assembler added errata NOP
 13113                           
 13114                           ;lcd.h: 197: if (blinkk) {
 13115                           
 13116                           ;incstack = 0
 13117  007080  5069               	movf	_blinkk,w,c
 13118  007082  B4D8               	btfsc	status,2,c
 13119  007084  D018               	goto	u6430
 13120                           
 13121                           ;lcd.h: 198: char i = 0;
 13122  007086  0E00               	movlw	0
 13123  007088  0100               	movlb	0	; () banked
 13124  00708A  6F84               	movwf	blink@i& (0+255),b
 13125                           
 13126                           ; BSR set to: 0
 13127                           ;lcd.h: 199: for (i = (--start); i < end; i++) {
 13128  00708C  0782               	decf	blink@start& (0+255),f,b
 13129  00708E  C082  F084         	movff	blink@start,blink@i
 13130  007092  D00C               	goto	l656
 13131  007094  FFFF               	dw	65535	; assembler added errata NOP
 13132                           
 13133                           ; BSR set to: 0
 13134                           ;lcd.h: 200: line[i] = ' ';
 13135                           
 13136                           ; BSR set to: 0
 13137  007096  5184               	movf	blink@i& (0+255),w,b
 13138  007098  0D01               	mullw	1
 13139  00709A  50F3               	movf	prodl,w,c
 13140  00709C  2580               	addwf	blink@line& (0+255),w,b
 13141  00709E  6ED9               	movwf	fsr2l,c
 13142  0070A0  50F4               	movf	prodh,w,c
 13143  0070A2  2181               	addwfc	(blink@line+1)& (0+255),w,b
 13144  0070A4  6EDA               	movwf	fsr2h,c
 13145  0070A6  0E20               	movlw	32
 13146  0070A8  6EDF               	movwf	indf2,c
 13147                           
 13148                           ; BSR set to: 0
 13149  0070AA  2B84               	incf	blink@i& (0+255),f,b
 13150  0070AC                     l656:
 13151  0070AC  FFFF               	dw	65535	; assembler added errata NOP
 13152                           
 13153                           ; BSR set to: 0
 13154                           
 13155                           ; BSR set to: 0
 13156  0070AE  5183               	movf	blink@end& (0+255),w,b
 13157  0070B0  5D84               	subwf	blink@i& (0+255),w,b
 13158  0070B2  A0D8               	btfss	status,0,c
 13159  0070B4  D7EF               	goto	l657
 13160  0070B6                     u6430:
 13161  0070B6  FFFF               	dw	65535	; assembler added errata NOP
 13162                           
 13163                           ; BSR set to: 0
 13164                           
 13165                           ; BSR set to: 0
 13166  0070B8  0012               	return		;funcret
 13167  0070BA  FFFF               	dw	65535	; errata NOP
 13168  0070BC                     __end_of_blink:
 13169                           	opt stack 0
 13170                           tblptru	equ	0xFF8
 13171                           tblptrh	equ	0xFF7
 13172                           tblptrl	equ	0xFF6
 13173                           tablat	equ	0xFF5
 13174                           prodh	equ	0xFF4
 13175                           prodl	equ	0xFF3
 13176                           intcon	equ	0xFF2
 13177                           intcon2	equ	0xFF1
 13178                           intcon3	equ	0xFF0
 13179                           postinc0	equ	0xFEE
 13180                           wreg	equ	0xFE8
 13181                           postdec1	equ	0xFE5
 13182                           fsr1l	equ	0xFE1
 13183                           indf2	equ	0xFDF
 13184                           postinc2	equ	0xFDE
 13185                           postdec2	equ	0xFDD
 13186                           fsr2h	equ	0xFDA
 13187                           fsr2l	equ	0xFD9
 13188                           status	equ	0xFD8
 13189                           
 13190 ;; *************** function _acaoTesteBombas *****************
 13191 ;; Defined at:
 13192 ;;		line 109 in file "controle.h"
 13193 ;; Parameters:    Size  Location     Type
 13194 ;;		None
 13195 ;; Auto vars:     Size  Location     Type
 13196 ;;  i               1   77[BANK0 ] unsigned char 
 13197 ;; Return value:  Size  Location     Type
 13198 ;;                  1    wreg      void 
 13199 ;; Registers used:
 13200 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13201 ;; Tracked objects:
 13202 ;;		On entry : 0/0
 13203 ;;		On exit  : 0/0
 13204 ;;		Unchanged: 0/0
 13205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13206 ;;      Params:         0       0       0       0       0       0       0
 13207 ;;      Locals:         0      11       0       0       0       0       0
 13208 ;;      Temps:          0       5       0       0       0       0       0
 13209 ;;      Totals:         0      16       0       0       0       0       0
 13210 ;;Total ram usage:       16 bytes
 13211 ;; Hardware stack levels used:    1
 13212 ;; Hardware stack levels required when called:   10
 13213 ;; This function calls:
 13214 ;;		_btPress
 13215 ;;		_drenarPressao
 13216 ;;		_enviaSMS
 13217 ;;		_intToFloatStr
 13218 ;;		_salvarLOG
 13219 ;;		_sprintf
 13220 ;;		_writeEEPROM_ext
 13221 ;; This function is called by:
 13222 ;;		_main
 13223 ;; This function uses a non-reentrant model
 13224 ;;
 13225                           
 13226                           	psect	text37
 13227  000F04                     __ptext37:
 13228                           	opt stack 0
 13229  000F04                     _acaoTesteBombas:
 13230                           	opt stack 0
 13231  000F04  FFFF               	dw	65535	; assembler added errata NOP
 13232                           
 13233                           ;controle.h: 110: if (btPress(1)) {
 13234                           
 13235                           ;incstack = 0
 13236  000F06  0E01               	movlw	1
 13237  000F08  ECE4  F03B         	call	_btPress
 13238  000F0C  0900               	iorlw	0
 13239  000F0E  B4D8               	btfsc	status,2,c
 13240  000F10  D00B               	goto	l540
 13241                           
 13242                           ;controle.h: 111: gsmOcupado = 0;
 13243  000F12  0E00               	movlw	0
 13244  000F14  0100               	movlb	0	; () banked
 13245  000F16  6FF4               	movwf	_gsmOcupado& (0+255),b
 13246                           
 13247                           ;controle.h: 112: etapaTesteBombas = 0;
 13248  000F18  0E00               	movlw	0
 13249  000F1A  6E70               	movwf	_etapaTesteBombas,c
 13250                           
 13251                           ;controle.h: 113: out_BOMBA_ESTACIONARIA = 0;
 13252  000F1C  0E00               	movlw	0
 13253  000F1E  6FF8               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
 13254                           
 13255                           ; BSR set to: 0
 13256                           ;controle.h: 114: menu_posi = _menu_posi;
 13257  000F20  C0DE  F0DF         	movff	__menu_posi,_menu_posi
 13258                           
 13259                           ;controle.h: 115: char i = 0;
 13260  000F24  0E00               	movlw	0
 13261  000F26  6FCD               	movwf	acaoTesteBombas@i& (0+255),b
 13262  000F28                     l540:
 13263  000F28  FFFF               	dw	65535	; assembler added errata NOP
 13264                           
 13265                           ;controle.h: 116: }
 13266                           ;controle.h: 118: if (etapaTesteBombas < 10) {
 13267                           
 13268                           ; BSR set to: 0
 13269  000F2A  0E0A               	movlw	10
 13270  000F2C  6070               	cpfslt	_etapaTesteBombas,c
 13271  000F2E  D1FD               	goto	l542
 13272                           
 13273                           ;controle.h: 119: sprintf(&line1[3], "Aguarde... %ds", timerTesteBombas);
 13274  000F30  0E9C               	movlw	low (_line1+3)
 13275  000F32  0100               	movlb	0	; () banked
 13276  000F34  6FA1               	movwf	sprintf@wh& (0+255),b
 13277  000F36  0E01               	movlw	high (_line1+3)
 13278  000F38  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13279  000F3A  0E3D               	movlw	low STR_39
 13280  000F3C  6FA3               	movwf	sprintf@f& (0+255),b
 13281  000F3E  0E7E               	movlw	high STR_39
 13282  000F40  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13283  000F42  C0DA  F0A5         	movff	_timerTesteBombas,?_sprintf+4
 13284  000F46  C0DB  F0A6         	movff	_timerTesteBombas+1,?_sprintf+5
 13285  000F4A  EC42  F039         	call	_sprintf	;wreg free
 13286                           
 13287                           ;controle.h: 120: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 13288  000F4E  0100               	movlb	0	; () banked
 13289  000F50  51D8               	movf	_pressao& (0+255),w,b
 13290  000F52  ECB6  F01F         	call	_intToFloatStr
 13291  000F56  C0BB  F0CE         	movff	?_intToFloatStr,_acaoTesteBombas$2565
 13292  000F5A  C0BC  F0CF         	movff	?_intToFloatStr+1,_acaoTesteBombas$2565+1
 13293                           
 13294                           ;controle.h: 120: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 13295  000F5E  0E86               	movlw	low (_line2+2)
 13296  000F60  0100               	movlb	0	; () banked
 13297  000F62  6FA1               	movwf	sprintf@wh& (0+255),b
 13298  000F64  0E01               	movlw	high (_line2+2)
 13299  000F66  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13300  000F68  0EF2               	movlw	low STR_40
 13301  000F6A  6FA3               	movwf	sprintf@f& (0+255),b
 13302  000F6C  0E7D               	movlw	high STR_40
 13303  000F6E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13304  000F70  C0CE  F0A5         	movff	_acaoTesteBombas$2565,?_sprintf+4
 13305  000F74  C0CF  F0A6         	movff	_acaoTesteBombas$2565+1,?_sprintf+5
 13306  000F78  EC42  F039         	call	_sprintf	;wreg free
 13307                           
 13308                           ;controle.h: 121: }
 13309                           ;controle.h: 123: switch (etapaTesteBombas) {
 13310  000F7C  D1D6               	goto	l542
 13311  000F7E  FFFF               	dw	65535	; assembler added errata NOP
 13312                           
 13313                           ;controle.h: 125: dias_restante_teste = 0;
 13314  000F80  0E00               	movlw	0
 13315  000F82  0100               	movlb	0	; () banked
 13316  000F84  6FE8               	movwf	_dias_restante_teste& (0+255),b
 13317                           
 13318                           ; BSR set to: 0
 13319                           ;controle.h: 126: writeEEPROM_ext(10, dias_restante_teste);
 13320  000F86  C0E8  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
 13321  000F8A  0E0A               	movlw	10
 13322  000F8C  EC1F  F039         	call	_writeEEPROM_ext
 13323                           
 13324                           ;controle.h: 127: LATEbits.LATE2 = 1;
 13325  000F90  848D               	bsf	3981,2,c	;volatile
 13326                           
 13327                           ;controle.h: 128: timerTesteBombas = 30;
 13328  000F92  0E00               	movlw	0
 13329  000F94  0100               	movlb	0	; () banked
 13330  000F96  6FDB               	movwf	(_timerTesteBombas+1)& (0+255),b
 13331  000F98  0E1E               	movlw	30
 13332  000F9A  6FDA               	movwf	_timerTesteBombas& (0+255),b
 13333                           
 13334                           ; BSR set to: 0
 13335                           ;controle.h: 129: etapaTesteBombas = 1;
 13336  000F9C  0E01               	movlw	1
 13337  000F9E  D119               	goto	L28
 13338  000FA0  FFFF               	dw	65535	; assembler added errata NOP
 13339                           
 13340                           ;controle.h: 132: drenarPressao();
 13341                           
 13342                           ; BSR set to: 0
 13343  000FA2  ECBB  F036         	call	_drenarPressao	;wreg free
 13344                           
 13345                           ;controle.h: 133: if (pressao <= (sp_pressao_rede - 10)) {
 13346  000FA6  0EF6               	movlw	246
 13347  000FA8  0100               	movlb	0	; () banked
 13348  000FAA  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 13349  000FAC  0EFF               	movlw	255
 13350  000FAE  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 13351  000FB0  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 13352  000FB2  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 13353  000FB4  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 13354  000FB6  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 13355  000FB8  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 13356  000FBA  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 13357  000FBC  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 13358  000FBE  51D8               	movf	_pressao& (0+255),w,b
 13359  000FC0  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 13360  000FC2  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 13361  000FC4  0A80               	xorlw	128
 13362  000FC6  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 13363  000FC8  51D9               	movf	(_pressao+1)& (0+255),w,b
 13364  000FCA  0A80               	xorlw	128
 13365  000FCC  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 13366  000FCE  A0D8               	btfss	status,0,c
 13367  000FD0  D1D6               	goto	l544
 13368                           
 13369                           ; BSR set to: 0
 13370                           ;controle.h: 134: LATEbits.LATE2 = 0;
 13371  000FD2  948D               	bcf	3981,2,c	;volatile
 13372                           
 13373                           ;controle.h: 135: LATAbits.LATA3 = 1;
 13374  000FD4  8689               	bsf	3977,3,c	;volatile
 13375                           
 13376                           ; BSR set to: 0
 13377                           ;controle.h: 136: etapaTesteBombas = 2;
 13378  000FD6  0E02               	movlw	2
 13379  000FD8  D048               	goto	L34
 13380  000FDA  FFFF               	dw	65535	; assembler added errata NOP
 13381                           
 13382                           ;controle.h: 141: sprintf(line4, "Bomba Jockey...");
 13383                           
 13384                           ; BSR set to: 0
 13385  000FDC  0E5A               	movlw	low _line4
 13386  000FDE  0100               	movlb	0	; () banked
 13387  000FE0  6FA1               	movwf	sprintf@wh& (0+255),b
 13388  000FE2  0E01               	movlw	high _line4
 13389  000FE4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13390  000FE6  0ED2               	movlw	low STR_41
 13391  000FE8  6FA3               	movwf	sprintf@f& (0+255),b
 13392  000FEA  0E7D               	movlw	high STR_41
 13393  000FEC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13394  000FEE  EC42  F039         	call	_sprintf	;wreg free
 13395                           
 13396                           ;controle.h: 142: if (pressao >= sp_pressao_rede) {
 13397  000FF2  0100               	movlb	0	; () banked
 13398  000FF4  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 13399  000FF6  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 13400  000FF8  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 13401  000FFA  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 13402  000FFC  5DD8               	subwf	_pressao& (0+255),w,b
 13403  000FFE  51D9               	movf	(_pressao+1)& (0+255),w,b
 13404  001000  0A80               	xorlw	128
 13405  001002  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 13406  001004  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 13407  001006  0A80               	xorlw	128
 13408  001008  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 13409  00100A  A0D8               	btfss	status,0,c
 13410  00100C  D005               	goto	l548
 13411                           
 13412                           ; BSR set to: 0
 13413                           ;controle.h: 143: LATAbits.LATA3 = 0;
 13414  00100E  9689               	bcf	3977,3,c	;volatile
 13415                           
 13416                           ; BSR set to: 0
 13417                           ;controle.h: 144: status_jockey = 1;
 13418  001010  0E01               	movlw	1
 13419  001012  6FFC               	movwf	_status_jockey& (0+255),b
 13420                           
 13421                           ;controle.h: 145: etapaTesteBombas = 3;
 13422  001014  0E03               	movlw	3
 13423  001016  6E70               	movwf	_etapaTesteBombas,c
 13424  001018                     l548:
 13425  001018  FFFF               	dw	65535	; assembler added errata NOP
 13426                           
 13427                           ; BSR set to: 0
 13428                           ;controle.h: 146: }
 13429                           ;controle.h: 147: if (!timerTesteBombas) {
 13430                           
 13431                           ; BSR set to: 0
 13432  00101A  51DA               	movf	_timerTesteBombas& (0+255),w,b
 13433  00101C  11DB               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13434  00101E  A4D8               	btfss	status,2,c
 13435  001020  D1AE               	goto	l544
 13436                           
 13437                           ; BSR set to: 0
 13438                           ;controle.h: 148: status_jockey = 0;
 13439  001022  0E00               	movlw	0
 13440  001024  6FFC               	movwf	_status_jockey& (0+255),b
 13441                           
 13442                           ;controle.h: 149: etapaTesteBombas = 3;
 13443  001026  0E03               	movlw	3
 13444  001028  D04D               	goto	L35
 13445  00102A                     l550:
 13446  00102A  FFFF               	dw	65535	; assembler added errata NOP
 13447                           
 13448                           ;controle.h: 154: LATEbits.LATE2 = 1;
 13449  00102C  848D               	bsf	3981,2,c	;volatile
 13450                           
 13451                           ;controle.h: 155: etapaTesteBombas = 4;
 13452  00102E  0E04               	movlw	4
 13453  001030  D0D0               	goto	L28
 13454  001032  FFFF               	dw	65535	; assembler added errata NOP
 13455                           
 13456                           ;controle.h: 158: drenarPressao();
 13457  001034  ECBB  F036         	call	_drenarPressao	;wreg free
 13458                           
 13459                           ;controle.h: 159: if (pressao <= (sp_pressao_rede - 10)) {
 13460  001038  0EF6               	movlw	246
 13461  00103A  0100               	movlb	0	; () banked
 13462  00103C  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 13463  00103E  0EFF               	movlw	255
 13464  001040  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 13465  001042  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 13466  001044  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 13467  001046  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 13468  001048  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 13469  00104A  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 13470  00104C  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 13471  00104E  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 13472  001050  51D8               	movf	_pressao& (0+255),w,b
 13473  001052  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 13474  001054  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 13475  001056  0A80               	xorlw	128
 13476  001058  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 13477  00105A  51D9               	movf	(_pressao+1)& (0+255),w,b
 13478  00105C  0A80               	xorlw	128
 13479  00105E  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 13480  001060  A0D8               	btfss	status,0,c
 13481  001062  D18D               	goto	l544
 13482                           
 13483                           ; BSR set to: 0
 13484                           ;controle.h: 160: LATDbits.LATD7 = 1;
 13485  001064  8E8C               	bsf	3980,7,c	;volatile
 13486                           
 13487                           ;controle.h: 161: LATEbits.LATE2 = 0;
 13488  001066  948D               	bcf	3981,2,c	;volatile
 13489                           
 13490                           ; BSR set to: 0
 13491                           ;controle.h: 162: etapaTesteBombas = 5;
 13492  001068  0E05               	movlw	5
 13493  00106A                     L34:
 13494  00106A  FFFF               	dw	65535	; assembler added errata NOP
 13495  00106C  6E70               	movwf	_etapaTesteBombas,c
 13496                           
 13497                           ;controle.h: 163: timerTesteBombas = 50;
 13498  00106E  0E00               	movlw	0
 13499  001070  6FDB               	movwf	(_timerTesteBombas+1)& (0+255),b
 13500  001072  0E32               	movlw	50
 13501  001074  D0BB               	goto	L27
 13502  001076  FFFF               	dw	65535	; assembler added errata NOP
 13503                           
 13504                           ;controle.h: 167: sprintf(line4, "Bomba Principal...");
 13505                           
 13506                           ; BSR set to: 0
 13507  001078  0E5A               	movlw	low _line4
 13508  00107A  0100               	movlb	0	; () banked
 13509  00107C  6FA1               	movwf	sprintf@wh& (0+255),b
 13510  00107E  0E01               	movlw	high _line4
 13511  001080  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13512  001082  0EE9               	movlw	low STR_42
 13513  001084  6FA3               	movwf	sprintf@f& (0+255),b
 13514  001086  0E7C               	movlw	high STR_42
 13515  001088  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13516  00108A  EC42  F039         	call	_sprintf	;wreg free
 13517                           
 13518                           ;controle.h: 168: if (pressao >= sp_pressao_rede) {
 13519  00108E  0100               	movlb	0	; () banked
 13520  001090  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 13521  001092  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 13522  001094  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 13523  001096  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 13524  001098  5DD8               	subwf	_pressao& (0+255),w,b
 13525  00109A  51D9               	movf	(_pressao+1)& (0+255),w,b
 13526  00109C  0A80               	xorlw	128
 13527  00109E  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 13528  0010A0  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 13529  0010A2  0A80               	xorlw	128
 13530  0010A4  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 13531  0010A6  A0D8               	btfss	status,0,c
 13532  0010A8  D005               	goto	l554
 13533                           
 13534                           ; BSR set to: 0
 13535                           ;controle.h: 169: LATDbits.LATD7 = 0;
 13536  0010AA  9E8C               	bcf	3980,7,c	;volatile
 13537                           
 13538                           ; BSR set to: 0
 13539                           ;controle.h: 170: status_principal = 1;
 13540  0010AC  0E01               	movlw	1
 13541  0010AE  6FFB               	movwf	_status_principal& (0+255),b
 13542                           
 13543                           ;controle.h: 171: etapaTesteBombas = 6;
 13544  0010B0  0E06               	movlw	6
 13545  0010B2  6E70               	movwf	_etapaTesteBombas,c
 13546  0010B4                     l554:
 13547  0010B4  FFFF               	dw	65535	; assembler added errata NOP
 13548                           
 13549                           ; BSR set to: 0
 13550                           ;controle.h: 172: }
 13551                           ;controle.h: 173: if (!timerTesteBombas) {
 13552                           
 13553                           ; BSR set to: 0
 13554  0010B6  51DA               	movf	_timerTesteBombas& (0+255),w,b
 13555  0010B8  11DB               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13556  0010BA  A4D8               	btfss	status,2,c
 13557  0010BC  D160               	goto	l544
 13558                           
 13559                           ; BSR set to: 0
 13560                           ;controle.h: 174: status_principal = 0;
 13561  0010BE  0E00               	movlw	0
 13562  0010C0  6FFB               	movwf	_status_principal& (0+255),b
 13563                           
 13564                           ;controle.h: 175: etapaTesteBombas = 6;
 13565  0010C2  0E06               	movlw	6
 13566  0010C4                     L35:
 13567  0010C4  FFFF               	dw	65535	; assembler added errata NOP
 13568  0010C6  6E70               	movwf	_etapaTesteBombas,c
 13569                           
 13570                           ;controle.h: 176: timerTesteBombas = 30;
 13571  0010C8  0E00               	movlw	0
 13572  0010CA  6FDB               	movwf	(_timerTesteBombas+1)& (0+255),b
 13573  0010CC  0E1E               	movlw	30
 13574  0010CE  D08E               	goto	L27
 13575  0010D0                     l556:
 13576  0010D0  FFFF               	dw	65535	; assembler added errata NOP
 13577                           
 13578                           ;controle.h: 180: LATEbits.LATE2 = 1;
 13579  0010D2  848D               	bsf	3981,2,c	;volatile
 13580                           
 13581                           ;controle.h: 181: etapaTesteBombas = 7;
 13582  0010D4  0E07               	movlw	7
 13583  0010D6  D07D               	goto	L28
 13584  0010D8  FFFF               	dw	65535	; assembler added errata NOP
 13585                           
 13586                           ;controle.h: 184: drenarPressao();
 13587  0010DA  ECBB  F036         	call	_drenarPressao	;wreg free
 13588                           
 13589                           ;controle.h: 185: if (pressao <= (sp_pressao_rede - 10)) {
 13590  0010DE  0EF6               	movlw	246
 13591  0010E0  0100               	movlb	0	; () banked
 13592  0010E2  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 13593  0010E4  0EFF               	movlw	255
 13594  0010E6  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 13595  0010E8  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 13596  0010EA  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 13597  0010EC  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 13598  0010EE  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 13599  0010F0  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 13600  0010F2  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 13601  0010F4  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 13602  0010F6  51D8               	movf	_pressao& (0+255),w,b
 13603  0010F8  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 13604  0010FA  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 13605  0010FC  0A80               	xorlw	128
 13606  0010FE  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 13607  001100  51D9               	movf	(_pressao+1)& (0+255),w,b
 13608  001102  0A80               	xorlw	128
 13609  001104  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 13610  001106  A0D8               	btfss	status,0,c
 13611  001108  D13A               	goto	l544
 13612                           
 13613                           ; BSR set to: 0
 13614                           ;controle.h: 186: LATEbits.LATE2 = 0;
 13615  00110A  948D               	bcf	3981,2,c	;volatile
 13616                           
 13617                           ; BSR set to: 0
 13618                           ;controle.h: 187: out_BOMBA_ESTACIONARIA = 1;
 13619  00110C  0E01               	movlw	1
 13620  00110E  6FF8               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
 13621                           
 13622                           ;controle.h: 188: etapaTesteBombas = 8;
 13623  001110  0E08               	movlw	8
 13624  001112  6E70               	movwf	_etapaTesteBombas,c
 13625                           
 13626                           ; BSR set to: 0
 13627                           ;controle.h: 189: timerTesteBombas = tempo_limite_estacionaria;
 13628  001114  C0E6  F0DA         	movff	_tempo_limite_estacionaria,_timerTesteBombas
 13629  001118  6BDB               	clrf	(_timerTesteBombas+1)& (0+255),b
 13630                           
 13631                           ; BSR set to: 0
 13632                           ;controle.h: 190: }
 13633                           ;controle.h: 191: break;
 13634  00111A  D131               	goto	l544
 13635  00111C  FFFF               	dw	65535	; assembler added errata NOP
 13636                           
 13637                           ;controle.h: 193: sprintf(line4, "Bomba Combustao...");
 13638                           
 13639                           ; BSR set to: 0
 13640  00111E  0E5A               	movlw	low _line4
 13641  001120  0100               	movlb	0	; () banked
 13642  001122  6FA1               	movwf	sprintf@wh& (0+255),b
 13643  001124  0E01               	movlw	high _line4
 13644  001126  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13645  001128  0EFC               	movlw	low STR_43
 13646  00112A  6FA3               	movwf	sprintf@f& (0+255),b
 13647  00112C  0E7C               	movlw	high STR_43
 13648  00112E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13649  001130  EC42  F039         	call	_sprintf	;wreg free
 13650                           
 13651                           ;controle.h: 194: if (!PORTAbits.RA2 || pressao >= sp_pressao_rede) {
 13652  001134  A480               	btfss	3968,2,c	;volatile
 13653  001136  D00E               	goto	u7270
 13654  001138  0100               	movlb	0	; () banked
 13655  00113A  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 13656  00113C  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 13657  00113E  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 13658  001140  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 13659  001142  5DD8               	subwf	_pressao& (0+255),w,b
 13660  001144  51D9               	movf	(_pressao+1)& (0+255),w,b
 13661  001146  0A80               	xorlw	128
 13662  001148  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 13663  00114A  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 13664  00114C  0A80               	xorlw	128
 13665  00114E  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 13666  001150  A0D8               	btfss	status,0,c
 13667  001152  D009               	goto	l560
 13668  001154                     u7270:
 13669  001154  FFFF               	dw	65535	; assembler added errata NOP
 13670                           
 13671                           ;controle.h: 195: status_estacionaria = 1;
 13672                           
 13673                           ; BSR set to: 0
 13674  001156  0E01               	movlw	1
 13675  001158  0100               	movlb	0	; () banked
 13676  00115A  6FFA               	movwf	_status_estacionaria& (0+255),b
 13677                           
 13678                           ; BSR set to: 0
 13679                           ;controle.h: 196: timerTesteBombas = tempo_limite_teste_estacionaria;
 13680  00115C  C0E5  F0DA         	movff	_tempo_limite_teste_estacionaria,_timerTesteBombas
 13681  001160  6BDB               	clrf	(_timerTesteBombas+1)& (0+255),b
 13682                           
 13683                           ;controle.h: 197: etapaTesteBombas = 9;
 13684  001162  0E09               	movlw	9
 13685  001164  6E70               	movwf	_etapaTesteBombas,c
 13686  001166                     l560:
 13687  001166  FFFF               	dw	65535	; assembler added errata NOP
 13688                           
 13689                           ; BSR set to: 0
 13690                           ;controle.h: 198: }
 13691                           ;controle.h: 199: if (status_estacionaria == 0 || !timerTesteBombas) {
 13692  001168  51FA               	movf	_status_estacionaria& (0+255),w,b
 13693  00116A  B4D8               	btfsc	status,2,c
 13694  00116C  D004               	goto	u7290
 13695                           
 13696                           ; BSR set to: 0
 13697  00116E  51DA               	movf	_timerTesteBombas& (0+255),w,b
 13698  001170  11DB               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13699  001172  A4D8               	btfss	status,2,c
 13700  001174  D104               	goto	l544
 13701  001176                     u7290:
 13702  001176  FFFF               	dw	65535	; assembler added errata NOP
 13703                           
 13704                           ; BSR set to: 0
 13705                           ;controle.h: 200: etapaTesteBombas = 10;
 13706                           
 13707                           ; BSR set to: 0
 13708  001178  0E0A               	movlw	10
 13709  00117A  6E70               	movwf	_etapaTesteBombas,c
 13710                           
 13711                           ;controle.h: 201: status_estacionaria = 0;
 13712  00117C  0E00               	movlw	0
 13713  00117E  6FFA               	movwf	_status_estacionaria& (0+255),b
 13714  001180  D0D0               	goto	L29
 13715  001182                     l566:
 13716  001182  FFFF               	dw	65535	; assembler added errata NOP
 13717                           
 13718                           ;controle.h: 206: sprintf(line4, "Bomba %s", !PORTAbits.RA2 ? "Ligada..." : "Religando..
      +                          .");
 13719  001184  A480               	btfss	3968,2,c	;volatile
 13720  001186  D005               	goto	l568
 13721  001188  0EA0               	movlw	low STR_46
 13722  00118A  0100               	movlb	0	; () banked
 13723  00118C  6FD0               	movwf	_acaoTesteBombas$1493& (0+255),b
 13724  00118E  0E7E               	movlw	high STR_46
 13725  001190  D005               	goto	L30
 13726  001192                     l568:
 13727  001192  FFFF               	dw	65535	; assembler added errata NOP
 13728                           
 13729                           ; BSR set to: 0
 13730  001194  0E43               	movlw	low STR_45
 13731  001196  0100               	movlb	0	; () banked
 13732  001198  6FD0               	movwf	_acaoTesteBombas$1493& (0+255),b
 13733  00119A  0E7F               	movlw	high STR_45
 13734  00119C                     L30:
 13735  00119C  FFFF               	dw	65535	; assembler added errata NOP
 13736  00119E  6FD1               	movwf	(_acaoTesteBombas$1493+1)& (0+255),b
 13737                           
 13738                           ; BSR set to: 0
 13739                           
 13740                           ; BSR set to: 0
 13741  0011A0  0E5A               	movlw	low _line4
 13742  0011A2  6FA1               	movwf	sprintf@wh& (0+255),b
 13743  0011A4  0E01               	movlw	high _line4
 13744  0011A6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13745  0011A8  0E91               	movlw	low STR_44
 13746  0011AA  6FA3               	movwf	sprintf@f& (0+255),b
 13747  0011AC  0E7F               	movlw	high STR_44
 13748  0011AE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13749  0011B0  C0D0  F0A5         	movff	_acaoTesteBombas$1493,?_sprintf+4
 13750  0011B4  C0D1  F0A6         	movff	_acaoTesteBombas$1493+1,?_sprintf+5
 13751  0011B8  EC42  F039         	call	_sprintf	;wreg free
 13752                           
 13753                           ;controle.h: 207: if (!timerTesteBombas || status_estacionaria == 0) {
 13754  0011BC  0100               	movlb	0	; () banked
 13755  0011BE  51DA               	movf	_timerTesteBombas& (0+255),w,b
 13756  0011C0  11DB               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13757  0011C2  B4D8               	btfsc	status,2,c
 13758  0011C4  D003               	goto	u7320
 13759                           
 13760                           ; BSR set to: 0
 13761  0011C6  51FA               	movf	_status_estacionaria& (0+255),w,b
 13762  0011C8  A4D8               	btfss	status,2,c
 13763  0011CA  D0D9               	goto	l544
 13764  0011CC                     u7320:
 13765  0011CC  FFFF               	dw	65535	; assembler added errata NOP
 13766                           
 13767                           ; BSR set to: 0
 13768                           ;controle.h: 208: LATEbits.LATE0 = 0;
 13769  0011CE  908D               	bcf	3981,0,c	;volatile
 13770                           
 13771                           ; BSR set to: 0
 13772                           ;controle.h: 209: etapaTesteBombas = 10;
 13773  0011D0  0E0A               	movlw	10
 13774  0011D2                     L28:
 13775  0011D2  FFFF               	dw	65535	; assembler added errata NOP
 13776  0011D4  6E70               	movwf	_etapaTesteBombas,c
 13777                           
 13778                           ; BSR set to: 0
 13779                           ;controle.h: 210: }
 13780                           ;controle.h: 211: break;
 13781  0011D6  D0D3               	goto	l544
 13782  0011D8  FFFF               	dw	65535	; assembler added errata NOP
 13783                           
 13784                           ;controle.h: 213: salvarLOG();
 13785                           
 13786                           ; BSR set to: 0
 13787  0011DA  EC0D  F01E         	call	_salvarLOG	;wreg free
 13788                           
 13789                           ;controle.h: 214: LATEbits.LATE0 = 0;
 13790  0011DE  908D               	bcf	3981,0,c	;volatile
 13791                           
 13792                           ;controle.h: 215: etapaTesteBombas = 11;
 13793  0011E0  0E0B               	movlw	11
 13794  0011E2  6E70               	movwf	_etapaTesteBombas,c
 13795                           
 13796                           ;controle.h: 216: timerTesteBombas = 10;
 13797  0011E4  0E00               	movlw	0
 13798  0011E6  0100               	movlb	0	; () banked
 13799  0011E8  6FDB               	movwf	(_timerTesteBombas+1)& (0+255),b
 13800  0011EA  0E0A               	movlw	10
 13801  0011EC                     L27:
 13802  0011EC  FFFF               	dw	65535	; assembler added errata NOP
 13803  0011EE  6FDA               	movwf	_timerTesteBombas& (0+255),b
 13804                           
 13805                           ;controle.h: 217: break;
 13806  0011F0  D0C6               	goto	l544
 13807  0011F2  FFFF               	dw	65535	; assembler added errata NOP
 13808                           
 13809                           ;controle.h: 219: sprintf(&line1[2], "Teste Concluido!");
 13810                           
 13811                           ; BSR set to: 0
 13812  0011F4  0E9B               	movlw	low (_line1+2)
 13813  0011F6  0100               	movlb	0	; () banked
 13814  0011F8  6FA1               	movwf	sprintf@wh& (0+255),b
 13815  0011FA  0E01               	movlw	high (_line1+2)
 13816  0011FC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13817  0011FE  0E8F               	movlw	low STR_47
 13818  001200  6FA3               	movwf	sprintf@f& (0+255),b
 13819  001202  0E7D               	movlw	high STR_47
 13820  001204  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13821  001206  EC42  F039         	call	_sprintf	;wreg free
 13822                           
 13823                           ;controle.h: 220: sprintf(line2, "JOKEY : %s", status_jockey == 1 ? "OK" : "ERRO");
 13824  00120A  0100               	movlb	0	; () banked
 13825  00120C  05FC               	decf	_status_jockey& (0+255),w,b
 13826  00120E  B4D8               	btfsc	status,2,c
 13827  001210  D004               	goto	l577
 13828                           
 13829                           ; BSR set to: 0
 13830  001212  0EE2               	movlw	low STR_50
 13831  001214  6FD2               	movwf	_acaoTesteBombas$1500& (0+255),b
 13832  001216  0E7F               	movlw	high STR_50
 13833  001218  D004               	goto	L31
 13834  00121A                     l577:
 13835  00121A  FFFF               	dw	65535	; assembler added errata NOP
 13836                           
 13837                           ; BSR set to: 0
 13838                           
 13839                           ; BSR set to: 0
 13840  00121C  0EF9               	movlw	low STR_5
 13841  00121E  6FD2               	movwf	_acaoTesteBombas$1500& (0+255),b
 13842  001220  0E7F               	movlw	high STR_5
 13843  001222                     L31:
 13844  001222  FFFF               	dw	65535	; assembler added errata NOP
 13845  001224  6FD3               	movwf	(_acaoTesteBombas$1500+1)& (0+255),b
 13846                           
 13847                           ; BSR set to: 0
 13848                           
 13849                           ; BSR set to: 0
 13850  001226  0E84               	movlw	low _line2
 13851  001228  6FA1               	movwf	sprintf@wh& (0+255),b
 13852  00122A  0E01               	movlw	high _line2
 13853  00122C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13854  00122E  0E2D               	movlw	low STR_48
 13855  001230  6FA3               	movwf	sprintf@f& (0+255),b
 13856  001232  0E7F               	movlw	high STR_48
 13857  001234  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13858  001236  C0D2  F0A5         	movff	_acaoTesteBombas$1500,?_sprintf+4
 13859  00123A  C0D3  F0A6         	movff	_acaoTesteBombas$1500+1,?_sprintf+5
 13860  00123E  EC42  F039         	call	_sprintf	;wreg free
 13861                           
 13862                           ;controle.h: 221: sprintf(line3, "PRINCIPAL : %s", status_principal == 1 ? "OK" : "ERRO"
      +                          );
 13863  001242  0100               	movlb	0	; () banked
 13864  001244  05FB               	decf	_status_principal& (0+255),w,b
 13865  001246  B4D8               	btfsc	status,2,c
 13866  001248  D004               	goto	l581
 13867                           
 13868                           ; BSR set to: 0
 13869  00124A  0EE2               	movlw	low STR_50
 13870  00124C  6FD4               	movwf	_acaoTesteBombas$1505& (0+255),b
 13871  00124E  0E7F               	movlw	high STR_50
 13872  001250  D004               	goto	L32
 13873  001252                     l581:
 13874  001252  FFFF               	dw	65535	; assembler added errata NOP
 13875                           
 13876                           ; BSR set to: 0
 13877                           
 13878                           ; BSR set to: 0
 13879  001254  0EF9               	movlw	low STR_5
 13880  001256  6FD4               	movwf	_acaoTesteBombas$1505& (0+255),b
 13881  001258  0E7F               	movlw	high STR_5
 13882  00125A                     L32:
 13883  00125A  FFFF               	dw	65535	; assembler added errata NOP
 13884  00125C  6FD5               	movwf	(_acaoTesteBombas$1505+1)& (0+255),b
 13885                           
 13886                           ; BSR set to: 0
 13887                           
 13888                           ; BSR set to: 0
 13889  00125E  0E6F               	movlw	low _line3
 13890  001260  6FA1               	movwf	sprintf@wh& (0+255),b
 13891  001262  0E01               	movlw	high _line3
 13892  001264  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13893  001266  0E1F               	movlw	low STR_51
 13894  001268  6FA3               	movwf	sprintf@f& (0+255),b
 13895  00126A  0E7E               	movlw	high STR_51
 13896  00126C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13897  00126E  C0D4  F0A5         	movff	_acaoTesteBombas$1505,?_sprintf+4
 13898  001272  C0D5  F0A6         	movff	_acaoTesteBombas$1505+1,?_sprintf+5
 13899  001276  EC42  F039         	call	_sprintf	;wreg free
 13900                           
 13901                           ;controle.h: 222: sprintf(line4, "COMBUSTAO : %s", status_estacionaria == 1 ? "OK" : "ER
      +                          RO");
 13902  00127A  0100               	movlb	0	; () banked
 13903  00127C  05FA               	decf	_status_estacionaria& (0+255),w,b
 13904  00127E  B4D8               	btfsc	status,2,c
 13905  001280  D004               	goto	l585
 13906                           
 13907                           ; BSR set to: 0
 13908  001282  0EE2               	movlw	low STR_50
 13909  001284  6FD6               	movwf	_acaoTesteBombas$1510& (0+255),b
 13910  001286  0E7F               	movlw	high STR_50
 13911  001288  D004               	goto	L33
 13912  00128A                     l585:
 13913  00128A  FFFF               	dw	65535	; assembler added errata NOP
 13914                           
 13915                           ; BSR set to: 0
 13916                           
 13917                           ; BSR set to: 0
 13918  00128C  0EF9               	movlw	low STR_5
 13919  00128E  6FD6               	movwf	_acaoTesteBombas$1510& (0+255),b
 13920  001290  0E7F               	movlw	high STR_5
 13921  001292                     L33:
 13922  001292  FFFF               	dw	65535	; assembler added errata NOP
 13923  001294  6FD7               	movwf	(_acaoTesteBombas$1510+1)& (0+255),b
 13924                           
 13925                           ; BSR set to: 0
 13926                           
 13927                           ; BSR set to: 0
 13928  001296  0E5A               	movlw	low _line4
 13929  001298  6FA1               	movwf	sprintf@wh& (0+255),b
 13930  00129A  0E01               	movlw	high _line4
 13931  00129C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13932  00129E  0E2E               	movlw	low STR_54
 13933  0012A0  6FA3               	movwf	sprintf@f& (0+255),b
 13934  0012A2  0E7E               	movlw	high STR_54
 13935  0012A4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13936  0012A6  C0D6  F0A5         	movff	_acaoTesteBombas$1510,?_sprintf+4
 13937  0012AA  C0D7  F0A6         	movff	_acaoTesteBombas$1510+1,?_sprintf+5
 13938  0012AE  EC42  F039         	call	_sprintf	;wreg free
 13939                           
 13940                           ;controle.h: 223: out_BOMBA_ESTACIONARIA = 0;
 13941  0012B2  0E00               	movlw	0
 13942  0012B4  0100               	movlb	0	; () banked
 13943  0012B6  6FF8               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
 13944                           
 13945                           ; BSR set to: 0
 13946                           ;controle.h: 224: if (!timerTesteBombas) {
 13947  0012B8  51DA               	movf	_timerTesteBombas& (0+255),w,b
 13948  0012BA  11DB               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13949  0012BC  A4D8               	btfss	status,2,c
 13950  0012BE  D05F               	goto	l544
 13951                           
 13952                           ; BSR set to: 0
 13953                           ;controle.h: 225: etapaTesteBombas = 12;
 13954  0012C0  0E0C               	movlw	12
 13955  0012C2  6E70               	movwf	_etapaTesteBombas,c
 13956                           
 13957                           ;controle.h: 226: timerTesteBombas = 80;
 13958  0012C4  0E00               	movlw	0
 13959  0012C6  6FDB               	movwf	(_timerTesteBombas+1)& (0+255),b
 13960  0012C8  0E50               	movlw	80
 13961  0012CA  6FDA               	movwf	_timerTesteBombas& (0+255),b
 13962                           
 13963                           ;controle.h: 227: timerReenvioSMS = 0;
 13964  0012CC  0E00               	movlw	0
 13965  0012CE  6FF6               	movwf	_timerReenvioSMS& (0+255),b
 13966                           
 13967                           ;controle.h: 228: gsmOcupado = 1;
 13968  0012D0  0E01               	movlw	1
 13969  0012D2  6FF4               	movwf	_gsmOcupado& (0+255),b
 13970                           
 13971                           ;controle.h: 229: dias_restante_teste = 0;
 13972  0012D4  0E00               	movlw	0
 13973  0012D6  6FE8               	movwf	_dias_restante_teste& (0+255),b
 13974                           
 13975                           ; BSR set to: 0
 13976                           ;controle.h: 230: writeEEPROM_ext(10, dias_restante_teste);
 13977  0012D8  C0E8  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
 13978  0012DC  0E0A               	movlw	10
 13979  0012DE  EC1F  F039         	call	_writeEEPROM_ext
 13980                           
 13981                           ;controle.h: 231: }
 13982                           ;controle.h: 232: break;
 13983  0012E2  D04D               	goto	l544
 13984  0012E4  FFFF               	dw	65535	; assembler added errata NOP
 13985                           
 13986                           ;controle.h: 234: sprintf(&line4[2], "enviando SMS...");
 13987  0012E6  0E5C               	movlw	low (_line4+2)
 13988  0012E8  0100               	movlb	0	; () banked
 13989  0012EA  6FA1               	movwf	sprintf@wh& (0+255),b
 13990  0012EC  0E01               	movlw	high (_line4+2)
 13991  0012EE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13992  0012F0  0EC2               	movlw	low STR_57
 13993  0012F2  6FA3               	movwf	sprintf@f& (0+255),b
 13994  0012F4  0E7D               	movlw	high STR_57
 13995  0012F6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13996  0012F8  EC42  F039         	call	_sprintf	;wreg free
 13997                           
 13998                           ;controle.h: 235: enviaSMS(2);
 13999  0012FC  0E02               	movlw	2
 14000  0012FE  ECA6  F00B         	call	_enviaSMS
 14001                           
 14002                           ;controle.h: 236: if (!timerTesteBombas) {
 14003  001302  0100               	movlb	0	; () banked
 14004  001304  51DA               	movf	_timerTesteBombas& (0+255),w,b
 14005  001306  11DB               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 14006  001308  A4D8               	btfss	status,2,c
 14007  00130A  D039               	goto	l544
 14008                           
 14009                           ; BSR set to: 0
 14010                           ;controle.h: 237: menu_posi = 0;
 14011  00130C  0E00               	movlw	0
 14012  00130E  6FDF               	movwf	_menu_posi& (0+255),b
 14013                           
 14014                           ;controle.h: 238: gsmOcupado = 0;
 14015  001310  0E00               	movlw	0
 14016  001312  6FF4               	movwf	_gsmOcupado& (0+255),b
 14017                           
 14018                           ; BSR set to: 0
 14019                           ;controle.h: 239: }
 14020                           ;controle.h: 240: break;
 14021  001314  D034               	goto	l544
 14022  001316  FFFF               	dw	65535	; assembler added errata NOP
 14023                           
 14024                           ;controle.h: 242: etapaTesteBombas = 0;
 14025                           
 14026                           ; BSR set to: 0
 14027  001318  0E00               	movlw	0
 14028  00131A  6E70               	movwf	_etapaTesteBombas,c
 14029                           
 14030                           ;controle.h: 243: menu_posi = 0;
 14031  00131C  0E00               	movlw	0
 14032  00131E  0100               	movlb	0	; () banked
 14033  001320  6FDF               	movwf	_menu_posi& (0+255),b
 14034  001322                     L29:
 14035  001322  FFFF               	dw	65535	; assembler added errata NOP
 14036                           
 14037                           ;controle.h: 244: out_BOMBA_ESTACIONARIA = 0;
 14038  001324  0E00               	movlw	0
 14039  001326  6FF8               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
 14040                           
 14041                           ; BSR set to: 0
 14042                           ;controle.h: 246: }
 14043                           
 14044                           ;controle.h: 245: break;
 14045  001328  D02A               	goto	l544
 14046  00132A                     l542:
 14047  00132A  FFFF               	dw	65535	; assembler added errata NOP
 14048                           
 14049                           ; BSR set to: 0
 14050  00132C  5070               	movf	_etapaTesteBombas,w,c
 14051                           
 14052                           ; Switch size 1, requested type "space"
 14053                           ; Number of cases is 13, Range of values is 0 to 12
 14054                           ; switch strategies available:
 14055                           ; Name         Instructions Cycles
 14056                           ; simple_byte           40    21 (average)
 14057                           ;	Chosen strategy is simple_byte
 14058  00132E  0A00               	xorlw	0	; case 0
 14059  001330  B4D8               	btfsc	status,2,c
 14060  001332  D625               	goto	l543
 14061  001334  0A01               	xorlw	1	; case 1
 14062  001336  B4D8               	btfsc	status,2,c
 14063  001338  D633               	goto	l545
 14064  00133A  0A03               	xorlw	3	; case 2
 14065  00133C  B4D8               	btfsc	status,2,c
 14066  00133E  D64D               	goto	l547
 14067  001340  0A01               	xorlw	1	; case 3
 14068  001342  B4D8               	btfsc	status,2,c
 14069  001344  D672               	goto	l550
 14070  001346  0A07               	xorlw	7	; case 4
 14071  001348  B4D8               	btfsc	status,2,c
 14072  00134A  D673               	goto	l551
 14073  00134C  0A01               	xorlw	1	; case 5
 14074  00134E  B4D8               	btfsc	status,2,c
 14075  001350  D692               	goto	l553
 14076  001352  0A03               	xorlw	3	; case 6
 14077  001354  B4D8               	btfsc	status,2,c
 14078  001356  D6BC               	goto	l556
 14079  001358  0A01               	xorlw	1	; case 7
 14080  00135A  B4D8               	btfsc	status,2,c
 14081  00135C  D6BD               	goto	l557
 14082  00135E  0A0F               	xorlw	15	; case 8
 14083  001360  B4D8               	btfsc	status,2,c
 14084  001362  D6DC               	goto	l559
 14085  001364  0A01               	xorlw	1	; case 9
 14086  001366  B4D8               	btfsc	status,2,c
 14087  001368  D70C               	goto	l566
 14088  00136A  0A03               	xorlw	3	; case 10
 14089  00136C  B4D8               	btfsc	status,2,c
 14090  00136E  D734               	goto	l574
 14091  001370  0A01               	xorlw	1	; case 11
 14092  001372  B4D8               	btfsc	status,2,c
 14093  001374  D73E               	goto	l575
 14094  001376  0A07               	xorlw	7	; case 12
 14095  001378  B4D8               	btfsc	status,2,c
 14096  00137A  D7B4               	goto	l589
 14097  00137C  D7CC               	goto	l591
 14098  00137E                     l544:
 14099  00137E  FFFF               	dw	65535	; assembler added errata NOP
 14100  001380  0012               	return		;funcret
 14101  001382  FFFF               	dw	65535	; errata NOP
 14102  001384                     __end_of_acaoTesteBombas:
 14103                           	opt stack 0
 14104                           tblptru	equ	0xFF8
 14105                           tblptrh	equ	0xFF7
 14106                           tblptrl	equ	0xFF6
 14107                           tablat	equ	0xFF5
 14108                           prodh	equ	0xFF4
 14109                           prodl	equ	0xFF3
 14110                           intcon	equ	0xFF2
 14111                           intcon2	equ	0xFF1
 14112                           intcon3	equ	0xFF0
 14113                           postinc0	equ	0xFEE
 14114                           wreg	equ	0xFE8
 14115                           postdec1	equ	0xFE5
 14116                           fsr1l	equ	0xFE1
 14117                           indf2	equ	0xFDF
 14118                           postinc2	equ	0xFDE
 14119                           postdec2	equ	0xFDD
 14120                           fsr2h	equ	0xFDA
 14121                           fsr2l	equ	0xFD9
 14122                           status	equ	0xFD8
 14123                           
 14124 ;; *************** function _salvarLOG *****************
 14125 ;; Defined at:
 14126 ;;		line 9 in file "logs.h"
 14127 ;; Parameters:    Size  Location     Type
 14128 ;;		None
 14129 ;; Auto vars:     Size  Location     Type
 14130 ;;  ultimoLogSal    2   15[BANK0 ] unsigned int 
 14131 ;; Return value:  Size  Location     Type
 14132 ;;                  1    wreg      void 
 14133 ;; Registers used:
 14134 ;;		wreg, status,2, status,0, cstack
 14135 ;; Tracked objects:
 14136 ;;		On entry : 0/0
 14137 ;;		On exit  : 0/0
 14138 ;;		Unchanged: 0/0
 14139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14140 ;;      Params:         0       0       0       0       0       0       0
 14141 ;;      Locals:         0       2       0       0       0       0       0
 14142 ;;      Temps:          0       1       0       0       0       0       0
 14143 ;;      Totals:         0       3       0       0       0       0       0
 14144 ;;Total ram usage:        3 bytes
 14145 ;; Hardware stack levels used:    1
 14146 ;; Hardware stack levels required when called:    9
 14147 ;; This function calls:
 14148 ;;		_readEEPROM_ext
 14149 ;;		_writeEEPROM_ext
 14150 ;; This function is called by:
 14151 ;;		_acaoTesteBombas
 14152 ;; This function uses a non-reentrant model
 14153 ;;
 14154                           
 14155                           	psect	text38
 14156  003C1A                     __ptext38:
 14157                           	opt stack 0
 14158  003C1A                     _salvarLOG:
 14159                           	opt stack 0
 14160  003C1A  FFFF               	dw	65535	; assembler added errata NOP
 14161                           
 14162                           ;logs.h: 10: unsigned int ultimoLogSalvo = readEEPROM_ext(14);
 14163                           
 14164                           ;incstack = 0
 14165  003C1C  0E0E               	movlw	14
 14166  003C1E  ECDE  F039         	call	_readEEPROM_ext
 14167  003C22  0100               	movlb	0	; () banked
 14168  003C24  6F8E               	movwf	??_salvarLOG& (0+255),b
 14169  003C26  518E               	movf	??_salvarLOG& (0+255),w,b
 14170  003C28  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 14171  003C2A  6B90               	clrf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 14172                           
 14173                           ; BSR set to: 0
 14174                           ;logs.h: 11: if (ultimoLogSalvo < 60 || ultimoLogSalvo > 250) {
 14175  003C2C  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 14176  003C2E  E104               	bnz	u6280
 14177  003C30  0E3C               	movlw	60
 14178  003C32  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14179  003C34  A0D8               	btfss	status,0,c
 14180  003C36  D006               	goto	u6290
 14181  003C38                     u6280:
 14182                           
 14183                           ; BSR set to: 0
 14184  003C38  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 14185  003C3A  E105               	bnz	l6201
 14186  003C3C  0EFB               	movlw	251
 14187  003C3E  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14188  003C40  A0D8               	btfss	status,0,c
 14189  003C42  D005               	goto	l427
 14190  003C44                     u6290:
 14191  003C44  FFFF               	dw	65535	; assembler added errata NOP
 14192  003C46                     l6201:
 14193                           
 14194                           ; BSR set to: 0
 14195                           ;logs.h: 12: ultimoLogSalvo = 60;
 14196  003C46  0E00               	movlw	0
 14197  003C48  6F90               	movwf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 14198  003C4A  0E3C               	movlw	60
 14199  003C4C  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 14200  003C4E                     l427:
 14201  003C4E  FFFF               	dw	65535	; assembler added errata NOP
 14202                           
 14203                           ; BSR set to: 0
 14204                           ;logs.h: 13: }
 14205                           ;logs.h: 14: writeEEPROM_ext(ultimoLogSalvo, _dia);
 14206                           
 14207                           ; BSR set to: 0
 14208  003C50  C0EB  F08C         	movff	__dia,writeEEPROM_ext@data
 14209  003C54  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14210  003C56  EC1F  F039         	call	_writeEEPROM_ext
 14211                           
 14212                           ;logs.h: 15: writeEEPROM_ext(++ultimoLogSalvo, _mes);
 14213  003C5A  C0EA  F08C         	movff	__mes,writeEEPROM_ext@data
 14214  003C5E  0100               	movlb	0	; () banked
 14215  003C60  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14216  003C62  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14217  003C64  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14218  003C66  EC1F  F039         	call	_writeEEPROM_ext
 14219                           
 14220                           ;logs.h: 16: writeEEPROM_ext(++ultimoLogSalvo, _ano);
 14221  003C6A  C0E9  F08C         	movff	__ano,writeEEPROM_ext@data
 14222  003C6E  0100               	movlb	0	; () banked
 14223  003C70  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14224  003C72  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14225  003C74  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14226  003C76  EC1F  F039         	call	_writeEEPROM_ext
 14227                           
 14228                           ;logs.h: 17: writeEEPROM_ext(++ultimoLogSalvo, _hor);
 14229  003C7A  C0EC  F08C         	movff	__hor,writeEEPROM_ext@data
 14230  003C7E  0100               	movlb	0	; () banked
 14231  003C80  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14232  003C82  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14233  003C84  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14234  003C86  EC1F  F039         	call	_writeEEPROM_ext
 14235                           
 14236                           ;logs.h: 18: writeEEPROM_ext(++ultimoLogSalvo, _min);
 14237  003C8A  C0ED  F08C         	movff	__min,writeEEPROM_ext@data
 14238  003C8E  0100               	movlb	0	; () banked
 14239  003C90  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14240  003C92  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14241  003C94  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14242  003C96  EC1F  F039         	call	_writeEEPROM_ext
 14243                           
 14244                           ;logs.h: 19: writeEEPROM_ext(++ultimoLogSalvo, status_jockey);
 14245  003C9A  C0FC  F08C         	movff	_status_jockey,writeEEPROM_ext@data
 14246  003C9E  0100               	movlb	0	; () banked
 14247  003CA0  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14248  003CA2  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14249  003CA4  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14250  003CA6  EC1F  F039         	call	_writeEEPROM_ext
 14251                           
 14252                           ;logs.h: 20: writeEEPROM_ext(++ultimoLogSalvo, status_principal);
 14253  003CAA  C0FB  F08C         	movff	_status_principal,writeEEPROM_ext@data
 14254  003CAE  0100               	movlb	0	; () banked
 14255  003CB0  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14256  003CB2  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14257  003CB4  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14258  003CB6  EC1F  F039         	call	_writeEEPROM_ext
 14259                           
 14260                           ;logs.h: 21: writeEEPROM_ext(++ultimoLogSalvo, status_estacionaria);
 14261  003CBA  C0FA  F08C         	movff	_status_estacionaria,writeEEPROM_ext@data
 14262  003CBE  0100               	movlb	0	; () banked
 14263  003CC0  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14264  003CC2  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14265  003CC4  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 14266  003CC6  EC1F  F039         	call	_writeEEPROM_ext
 14267                           
 14268                           ;logs.h: 23: writeEEPROM_ext(14, ++ultimoLogSalvo);
 14269  003CCA  0100               	movlb	0	; () banked
 14270  003CCC  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 14271  003CCE  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 14272  003CD0  C08F  F08C         	movff	salvarLOG@ultimoLogSalvo,writeEEPROM_ext@data
 14273  003CD4  0E0E               	movlw	14
 14274  003CD6  EC1F  F039         	call	_writeEEPROM_ext
 14275  003CDA  0012               	return		;funcret
 14276  003CDC  FFFF               	dw	65535	; errata NOP
 14277  003CDE                     __end_of_salvarLOG:
 14278                           	opt stack 0
 14279                           tblptru	equ	0xFF8
 14280                           tblptrh	equ	0xFF7
 14281                           tblptrl	equ	0xFF6
 14282                           tablat	equ	0xFF5
 14283                           prodh	equ	0xFF4
 14284                           prodl	equ	0xFF3
 14285                           intcon	equ	0xFF2
 14286                           intcon2	equ	0xFF1
 14287                           intcon3	equ	0xFF0
 14288                           postinc0	equ	0xFEE
 14289                           wreg	equ	0xFE8
 14290                           postdec1	equ	0xFE5
 14291                           fsr1l	equ	0xFE1
 14292                           indf2	equ	0xFDF
 14293                           postinc2	equ	0xFDE
 14294                           postdec2	equ	0xFDD
 14295                           fsr2h	equ	0xFDA
 14296                           fsr2l	equ	0xFD9
 14297                           status	equ	0xFD8
 14298                           
 14299 ;; *************** function _writeEEPROM_ext *****************
 14300 ;; Defined at:
 14301 ;;		line 13 in file "eeprom.h"
 14302 ;; Parameters:    Size  Location     Type
 14303 ;;  adress          1    wreg     unsigned char 
 14304 ;;  data            1   12[BANK0 ] unsigned char 
 14305 ;; Auto vars:     Size  Location     Type
 14306 ;;  adress          1   13[BANK0 ] unsigned char 
 14307 ;; Return value:  Size  Location     Type
 14308 ;;                  1    wreg      void 
 14309 ;; Registers used:
 14310 ;;		wreg, status,2, status,0, cstack
 14311 ;; Tracked objects:
 14312 ;;		On entry : 0/0
 14313 ;;		On exit  : 0/0
 14314 ;;		Unchanged: 0/0
 14315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14316 ;;      Params:         0       1       0       0       0       0       0
 14317 ;;      Locals:         0       1       0       0       0       0       0
 14318 ;;      Temps:          0       0       0       0       0       0       0
 14319 ;;      Totals:         0       2       0       0       0       0       0
 14320 ;;Total ram usage:        2 bytes
 14321 ;; Hardware stack levels used:    1
 14322 ;; Hardware stack levels required when called:    8
 14323 ;; This function calls:
 14324 ;;		_I2C_Start
 14325 ;;		_I2C_Stop
 14326 ;;		_I2C_Write
 14327 ;;		_delay
 14328 ;; This function is called by:
 14329 ;;		_salvarLOG
 14330 ;;		_verificarIntervaloTesteBombas
 14331 ;;		_acaoTesteBombas
 14332 ;;		_lerParametros
 14333 ;;		_tela_testeBombas
 14334 ;;		_configuraTelefones
 14335 ;;		_configurarEstacionaria
 14336 ;;		_ajusteSP_Bombas
 14337 ;;		_apagarLOGS
 14338 ;; This function uses a non-reentrant model
 14339 ;;
 14340                           
 14341                           	psect	text39
 14342  00723E                     __ptext39:
 14343                           	opt stack 0
 14344  00723E                     _writeEEPROM_ext:
 14345                           	opt stack 0
 14346  00723E  FFFF               	dw	65535	; assembler added errata NOP
 14347                           
 14348                           ;incstack = 0
 14349                           ;writeEEPROM_ext@adress stored from wreg
 14350  007240  0100               	movlb	0	; () banked
 14351  007242  6F8D               	movwf	writeEEPROM_ext@adress& (0+255),b
 14352                           
 14353                           ;eeprom.h: 15: I2C_Start();
 14354  007244  ECC8  F035         	call	_I2C_Start	;wreg free
 14355                           
 14356                           ;eeprom.h: 16: I2C_Write(0xA0);
 14357  007248  0E00               	movlw	0
 14358  00724A  0100               	movlb	0	; () banked
 14359  00724C  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 14360  00724E  0EA0               	movlw	160
 14361  007250  6F8A               	movwf	I2C_Write@d& (0+255),b
 14362  007252  ECE1  F035         	call	_I2C_Write	;wreg free
 14363                           
 14364                           ;eeprom.h: 18: I2C_Write(adress);
 14365  007256  C08D  F08A         	movff	writeEEPROM_ext@adress,I2C_Write@d
 14366  00725A  0100               	movlb	0	; () banked
 14367  00725C  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 14368  00725E  ECE1  F035         	call	_I2C_Write	;wreg free
 14369                           
 14370                           ;eeprom.h: 19: I2C_Write(data);
 14371  007262  C08C  F08A         	movff	writeEEPROM_ext@data,I2C_Write@d
 14372  007266  0100               	movlb	0	; () banked
 14373  007268  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 14374  00726A  ECE1  F035         	call	_I2C_Write	;wreg free
 14375                           
 14376                           ;eeprom.h: 20: I2C_Stop();
 14377  00726E  ECCE  F035         	call	_I2C_Stop	;wreg free
 14378                           
 14379                           ;eeprom.h: 21: delay(15);
 14380  007272  0E00               	movlw	0
 14381  007274  0100               	movlb	0	; () banked
 14382  007276  6F81               	movwf	(delay@x+1)& (0+255),b
 14383  007278  0E0F               	movlw	15
 14384  00727A  6F80               	movwf	delay@x& (0+255),b
 14385  00727C  EC20  F037         	call	_delay	;wreg free
 14386  007280  0012               	return		;funcret
 14387  007282  FFFF               	dw	65535	; errata NOP
 14388  007284                     __end_of_writeEEPROM_ext:
 14389                           	opt stack 0
 14390                           tblptru	equ	0xFF8
 14391                           tblptrh	equ	0xFF7
 14392                           tblptrl	equ	0xFF6
 14393                           tablat	equ	0xFF5
 14394                           prodh	equ	0xFF4
 14395                           prodl	equ	0xFF3
 14396                           intcon	equ	0xFF2
 14397                           intcon2	equ	0xFF1
 14398                           intcon3	equ	0xFF0
 14399                           postinc0	equ	0xFEE
 14400                           wreg	equ	0xFE8
 14401                           postdec1	equ	0xFE5
 14402                           fsr1l	equ	0xFE1
 14403                           indf2	equ	0xFDF
 14404                           postinc2	equ	0xFDE
 14405                           postdec2	equ	0xFDD
 14406                           fsr2h	equ	0xFDA
 14407                           fsr2l	equ	0xFD9
 14408                           status	equ	0xFD8
 14409                           
 14410 ;; *************** function _readEEPROM_ext *****************
 14411 ;; Defined at:
 14412 ;;		line 26 in file "eeprom.h"
 14413 ;; Parameters:    Size  Location     Type
 14414 ;;  adress          1    wreg     unsigned char 
 14415 ;; Auto vars:     Size  Location     Type
 14416 ;;  adress          1   12[BANK0 ] unsigned char 
 14417 ;;  data            1   13[BANK0 ] unsigned char 
 14418 ;; Return value:  Size  Location     Type
 14419 ;;                  1    wreg      unsigned char 
 14420 ;; Registers used:
 14421 ;;		wreg, status,2, status,0, cstack
 14422 ;; Tracked objects:
 14423 ;;		On entry : 0/0
 14424 ;;		On exit  : 0/0
 14425 ;;		Unchanged: 0/0
 14426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14427 ;;      Params:         0       0       0       0       0       0       0
 14428 ;;      Locals:         0       2       0       0       0       0       0
 14429 ;;      Temps:          0       0       0       0       0       0       0
 14430 ;;      Totals:         0       2       0       0       0       0       0
 14431 ;;Total ram usage:        2 bytes
 14432 ;; Hardware stack levels used:    1
 14433 ;; Hardware stack levels required when called:    8
 14434 ;; This function calls:
 14435 ;;		_I2C_Read
 14436 ;;		_I2C_Restart
 14437 ;;		_I2C_Start
 14438 ;;		_I2C_Stop
 14439 ;;		_I2C_Write
 14440 ;; This function is called by:
 14441 ;;		_readEEPROM16_ext
 14442 ;;		_salvarLOG
 14443 ;;		_lerParametros
 14444 ;;		_dataLoger
 14445 ;; This function uses a non-reentrant model
 14446 ;;
 14447                           
 14448                           	psect	text40
 14449  0073BC                     __ptext40:
 14450                           	opt stack 0
 14451  0073BC                     _readEEPROM_ext:
 14452                           	opt stack 0
 14453  0073BC  FFFF               	dw	65535	; assembler added errata NOP
 14454                           
 14455                           ;incstack = 0
 14456                           ;readEEPROM_ext@adress stored from wreg
 14457  0073BE  0100               	movlb	0	; () banked
 14458  0073C0  6F8C               	movwf	readEEPROM_ext@adress& (0+255),b
 14459                           
 14460                           ;eeprom.h: 27: I2C_Start();
 14461  0073C2  ECC8  F035         	call	_I2C_Start	;wreg free
 14462                           
 14463                           ;eeprom.h: 28: I2C_Write(0xA0);
 14464  0073C6  0E00               	movlw	0
 14465  0073C8  0100               	movlb	0	; () banked
 14466  0073CA  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 14467  0073CC  0EA0               	movlw	160
 14468  0073CE  6F8A               	movwf	I2C_Write@d& (0+255),b
 14469  0073D0  ECE1  F035         	call	_I2C_Write	;wreg free
 14470                           
 14471                           ;eeprom.h: 30: I2C_Write(adress);
 14472  0073D4  C08C  F08A         	movff	readEEPROM_ext@adress,I2C_Write@d
 14473  0073D8  0100               	movlb	0	; () banked
 14474  0073DA  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 14475  0073DC  ECE1  F035         	call	_I2C_Write	;wreg free
 14476                           
 14477                           ;eeprom.h: 31: I2C_Restart();
 14478  0073E0  ECD4  F035         	call	_I2C_Restart	;wreg free
 14479                           
 14480                           ;eeprom.h: 32: I2C_Write(0xA1);
 14481  0073E4  0E00               	movlw	0
 14482  0073E6  0100               	movlb	0	; () banked
 14483  0073E8  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 14484  0073EA  0EA1               	movlw	161
 14485  0073EC  6F8A               	movwf	I2C_Write@d& (0+255),b
 14486  0073EE  ECE1  F035         	call	_I2C_Write	;wreg free
 14487                           
 14488                           ;eeprom.h: 33: unsigned char data = I2C_Read(0);
 14489  0073F2  0E00               	movlw	0
 14490  0073F4  0100               	movlb	0	; () banked
 14491  0073F6  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
 14492  0073F8  0E00               	movlw	0
 14493  0073FA  6F81               	movwf	I2C_Read@a& (0+255),b
 14494  0073FC  ECAB  F037         	call	_I2C_Read	;wreg free
 14495  007400  0100               	movlb	0	; () banked
 14496  007402  5181               	movf	?_I2C_Read& (0+255),w,b
 14497  007404  6F8D               	movwf	readEEPROM_ext@data& (0+255),b
 14498                           
 14499                           ;eeprom.h: 34: I2C_Stop();
 14500  007406  ECCE  F035         	call	_I2C_Stop	;wreg free
 14501                           
 14502                           ;eeprom.h: 35: return data;
 14503  00740A  0100               	movlb	0	; () banked
 14504  00740C  518D               	movf	readEEPROM_ext@data& (0+255),w,b
 14505                           
 14506                           ; BSR set to: 0
 14507                           
 14508                           ; BSR set to: 0
 14509  00740E  0012               	return		;funcret
 14510  007410  FFFF               	dw	65535	; errata NOP
 14511  007412                     __end_of_readEEPROM_ext:
 14512                           	opt stack 0
 14513                           tblptru	equ	0xFF8
 14514                           tblptrh	equ	0xFF7
 14515                           tblptrl	equ	0xFF6
 14516                           tablat	equ	0xFF5
 14517                           prodh	equ	0xFF4
 14518                           prodl	equ	0xFF3
 14519                           intcon	equ	0xFF2
 14520                           intcon2	equ	0xFF1
 14521                           intcon3	equ	0xFF0
 14522                           postinc0	equ	0xFEE
 14523                           wreg	equ	0xFE8
 14524                           postdec1	equ	0xFE5
 14525                           fsr1l	equ	0xFE1
 14526                           indf2	equ	0xFDF
 14527                           postinc2	equ	0xFDE
 14528                           postdec2	equ	0xFDD
 14529                           fsr2h	equ	0xFDA
 14530                           fsr2l	equ	0xFD9
 14531                           status	equ	0xFD8
 14532                           
 14533 ;; *************** function _I2C_Restart *****************
 14534 ;; Defined at:
 14535 ;;		line 31 in file "I2C.c"
 14536 ;; Parameters:    Size  Location     Type
 14537 ;;		None
 14538 ;; Auto vars:     Size  Location     Type
 14539 ;;		None
 14540 ;; Return value:  Size  Location     Type
 14541 ;;                  1    wreg      void 
 14542 ;; Registers used:
 14543 ;;		wreg, status,2, status,0, cstack
 14544 ;; Tracked objects:
 14545 ;;		On entry : 0/0
 14546 ;;		On exit  : 0/0
 14547 ;;		Unchanged: 0/0
 14548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14549 ;;      Params:         0       0       0       0       0       0       0
 14550 ;;      Locals:         0       0       0       0       0       0       0
 14551 ;;      Temps:          0       0       0       0       0       0       0
 14552 ;;      Totals:         0       0       0       0       0       0       0
 14553 ;;Total ram usage:        0 bytes
 14554 ;; Hardware stack levels used:    1
 14555 ;; Hardware stack levels required when called:    7
 14556 ;; This function calls:
 14557 ;;		_I2C_Wait
 14558 ;; This function is called by:
 14559 ;;		_getDS1307TimeDate
 14560 ;;		_readEEPROM_ext
 14561 ;;		_getDS1307Time
 14562 ;; This function uses a non-reentrant model
 14563 ;;
 14564                           
 14565                           	psect	text41
 14566  006BA8                     __ptext41:
 14567                           	opt stack 0
 14568  006BA8                     _I2C_Restart:
 14569                           	opt stack 0
 14570  006BA8  FFFF               	dw	65535	; assembler added errata NOP
 14571                           
 14572                           ;I2C.c: 32: I2C_Wait();
 14573                           
 14574                           ; BSR set to: 0
 14575                           ;incstack = 0
 14576  006BAA  EC19  F036         	call	_I2C_Wait	;wreg free
 14577                           
 14578                           ;I2C.c: 33: RSEN = 1;
 14579  006BAE  82C5               	bsf	4037,1,c	;volatile
 14580  006BB0  0012               	return		;funcret
 14581  006BB2  FFFF               	dw	65535	; errata NOP
 14582  006BB4                     __end_of_I2C_Restart:
 14583                           	opt stack 0
 14584                           tblptru	equ	0xFF8
 14585                           tblptrh	equ	0xFF7
 14586                           tblptrl	equ	0xFF6
 14587                           tablat	equ	0xFF5
 14588                           prodh	equ	0xFF4
 14589                           prodl	equ	0xFF3
 14590                           intcon	equ	0xFF2
 14591                           intcon2	equ	0xFF1
 14592                           intcon3	equ	0xFF0
 14593                           postinc0	equ	0xFEE
 14594                           wreg	equ	0xFE8
 14595                           postdec1	equ	0xFE5
 14596                           fsr1l	equ	0xFE1
 14597                           indf2	equ	0xFDF
 14598                           postinc2	equ	0xFDE
 14599                           postdec2	equ	0xFDD
 14600                           fsr2h	equ	0xFDA
 14601                           fsr2l	equ	0xFD9
 14602                           status	equ	0xFD8
 14603                           
 14604 ;; *************** function _I2C_Read *****************
 14605 ;; Defined at:
 14606 ;;		line 47 in file "I2C.c"
 14607 ;; Parameters:    Size  Location     Type
 14608 ;;  a               2    1[BANK0 ] unsigned short 
 14609 ;; Auto vars:     Size  Location     Type
 14610 ;;  temp            2    3[BANK0 ] unsigned short 
 14611 ;; Return value:  Size  Location     Type
 14612 ;;                  2    1[BANK0 ] unsigned short 
 14613 ;; Registers used:
 14614 ;;		wreg, status,2, status,0, cstack
 14615 ;; Tracked objects:
 14616 ;;		On entry : 0/0
 14617 ;;		On exit  : 0/0
 14618 ;;		Unchanged: 0/0
 14619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14620 ;;      Params:         0       2       0       0       0       0       0
 14621 ;;      Locals:         0       2       0       0       0       0       0
 14622 ;;      Temps:          0       0       0       0       0       0       0
 14623 ;;      Totals:         0       4       0       0       0       0       0
 14624 ;;Total ram usage:        4 bytes
 14625 ;; Hardware stack levels used:    1
 14626 ;; Hardware stack levels required when called:    7
 14627 ;; This function calls:
 14628 ;;		_I2C_Wait
 14629 ;; This function is called by:
 14630 ;;		_getDS1307TimeDate
 14631 ;;		_readEEPROM_ext
 14632 ;;		_getDS1307Time
 14633 ;; This function uses a non-reentrant model
 14634 ;;
 14635                           
 14636                           	psect	text42
 14637  006F56                     __ptext42:
 14638                           	opt stack 0
 14639  006F56                     _I2C_Read:
 14640                           	opt stack 0
 14641  006F56  FFFF               	dw	65535	; assembler added errata NOP
 14642                           
 14643                           ;I2C.c: 48: unsigned short temp;
 14644                           ;I2C.c: 49: I2C_Wait();
 14645                           
 14646                           ;incstack = 0
 14647  006F58  EC19  F036         	call	_I2C_Wait	;wreg free
 14648                           
 14649                           ;I2C.c: 50: RCEN = 1;
 14650  006F5C  86C5               	bsf	4037,3,c	;volatile
 14651                           
 14652                           ;I2C.c: 51: I2C_Wait();
 14653  006F5E  EC19  F036         	call	_I2C_Wait	;wreg free
 14654                           
 14655                           ;I2C.c: 52: temp = SSPBUF;
 14656  006F62  CFC9 F083          	movff	4041,I2C_Read@temp	;volatile
 14657  006F66  0100               	movlb	0	; () banked
 14658  006F68  6B84               	clrf	(I2C_Read@temp+1)& (0+255),b
 14659                           
 14660                           ;I2C.c: 53: I2C_Wait();
 14661  006F6A  EC19  F036         	call	_I2C_Wait	;wreg free
 14662                           
 14663                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 14664  006F6E  0100               	movlb	0	; () banked
 14665  006F70  5181               	movf	I2C_Read@a& (0+255),w,b
 14666  006F72  1182               	iorwf	(I2C_Read@a+1)& (0+255),w,b
 14667  006F74  A4D8               	btfss	status,2,c
 14668  006F76  D002               	goto	u4890
 14669  006F78  8AC5               	bsf	4037,5,c	;volatile
 14670  006F7A  D002               	goto	u4905
 14671  006F7C                     u4890:
 14672  006F7C  FFFF               	dw	65535	; assembler added errata NOP
 14673  006F7E  9AC5               	bcf	4037,5,c	;volatile
 14674  006F80                     u4905:
 14675  006F80  FFFF               	dw	65535	; assembler added errata NOP
 14676                           
 14677                           ;I2C.c: 55: ACKEN = 1;
 14678  006F82  88C5               	bsf	4037,4,c	;volatile
 14679                           
 14680                           ;I2C.c: 56: return temp;
 14681  006F84  C083  F081         	movff	I2C_Read@temp,?_I2C_Read
 14682  006F88  C084  F082         	movff	I2C_Read@temp+1,?_I2C_Read+1
 14683  006F8C  0012               	return		;funcret
 14684  006F8E  FFFF               	dw	65535	; errata NOP
 14685  006F90                     __end_of_I2C_Read:
 14686                           	opt stack 0
 14687                           tblptru	equ	0xFF8
 14688                           tblptrh	equ	0xFF7
 14689                           tblptrl	equ	0xFF6
 14690                           tablat	equ	0xFF5
 14691                           prodh	equ	0xFF4
 14692                           prodl	equ	0xFF3
 14693                           intcon	equ	0xFF2
 14694                           intcon2	equ	0xFF1
 14695                           intcon3	equ	0xFF0
 14696                           postinc0	equ	0xFEE
 14697                           wreg	equ	0xFE8
 14698                           postdec1	equ	0xFE5
 14699                           fsr1l	equ	0xFE1
 14700                           indf2	equ	0xFDF
 14701                           postinc2	equ	0xFDE
 14702                           postdec2	equ	0xFDD
 14703                           fsr2h	equ	0xFDA
 14704                           fsr2l	equ	0xFD9
 14705                           status	equ	0xFD8
 14706                           
 14707 ;; *************** function _intToFloatStr *****************
 14708 ;; Defined at:
 14709 ;;		line 47 in file "function.c"
 14710 ;; Parameters:    Size  Location     Type
 14711 ;;  valor           1    wreg     unsigned char 
 14712 ;; Auto vars:     Size  Location     Type
 14713 ;;  valor           1   69[BANK0 ] unsigned char 
 14714 ;;  conv            4   65[BANK0 ] unsigned char [4]
 14715 ;;  end             4   61[BANK0 ] unsigned char [4]
 14716 ;;  pr              2   70[BANK0 ] int 
 14717 ;; Return value:  Size  Location     Type
 14718 ;;                  2   59[BANK0 ] PTR unsigned char 
 14719 ;; Registers used:
 14720 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14721 ;; Tracked objects:
 14722 ;;		On entry : 0/0
 14723 ;;		On exit  : 0/0
 14724 ;;		Unchanged: 0/0
 14725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14726 ;;      Params:         0       2       0       0       0       0       0
 14727 ;;      Locals:         0      11       0       0       0       0       0
 14728 ;;      Temps:          0       0       0       0       0       0       0
 14729 ;;      Totals:         0      13       0       0       0       0       0
 14730 ;;Total ram usage:       13 bytes
 14731 ;; Hardware stack levels used:    1
 14732 ;; Hardware stack levels required when called:    9
 14733 ;; This function calls:
 14734 ;;		___awdiv
 14735 ;;		___awmod
 14736 ;;		_sprintf
 14737 ;; This function is called by:
 14738 ;;		_acaoTesteBombas
 14739 ;;		_telaPrincipal
 14740 ;;		_ajusteSP_Bombas
 14741 ;; This function uses a non-reentrant model
 14742 ;;
 14743                           
 14744                           	psect	text43
 14745  003F6C                     __ptext43:
 14746                           	opt stack 0
 14747  003F6C                     _intToFloatStr:
 14748                           	opt stack 0
 14749  003F6C  FFFF               	dw	65535	; assembler added errata NOP
 14750                           
 14751                           ;incstack = 0
 14752                           ;intToFloatStr@valor stored from wreg
 14753  003F6E  0100               	movlb	0	; () banked
 14754  003F70  6FC5               	movwf	intToFloatStr@valor& (0+255),b
 14755                           
 14756                           ;function.c: 48: int pr = valor >= 99 ? 0 : valor;
 14757  003F72  0E63               	movlw	99
 14758  003F74  0100               	movlb	0	; () banked
 14759  003F76  61C5               	cpfslt	intToFloatStr@valor& (0+255),b
 14760  003F78  D004               	goto	l1083
 14761                           
 14762                           ; BSR set to: 0
 14763  003F7A  C0C5  F0C6         	movff	intToFloatStr@valor,intToFloatStr@pr
 14764  003F7E  6BC7               	clrf	(intToFloatStr@pr+1)& (0+255),b
 14765  003F80  D005               	goto	l1085
 14766  003F82                     l1083:
 14767  003F82  FFFF               	dw	65535	; assembler added errata NOP
 14768                           
 14769                           ; BSR set to: 0
 14770                           
 14771                           ; BSR set to: 0
 14772  003F84  0E00               	movlw	0
 14773  003F86  6FC7               	movwf	(intToFloatStr@pr+1)& (0+255),b
 14774  003F88  0E00               	movlw	0
 14775  003F8A  6FC6               	movwf	intToFloatStr@pr& (0+255),b
 14776  003F8C                     l1085:
 14777  003F8C  FFFF               	dw	65535	; assembler added errata NOP
 14778                           
 14779                           ; BSR set to: 0
 14780                           ;function.c: 49: unsigned char conv[4] = {' ', ' ', ' ', ' '};
 14781                           
 14782                           ; BSR set to: 0
 14783  003F8E  C1DA  F0C1         	movff	intToFloatStr@F2544,intToFloatStr@conv
 14784  003F92  C1DB  F0C2         	movff	intToFloatStr@F2544+1,intToFloatStr@conv+1
 14785  003F96  C1DC  F0C3         	movff	intToFloatStr@F2544+2,intToFloatStr@conv+2
 14786  003F9A  C1DD  F0C4         	movff	intToFloatStr@F2544+3,intToFloatStr@conv+3
 14787                           
 14788                           ; BSR set to: 0
 14789                           ;function.c: 50: conv[0] = (char) ((pr / 10) + 48);
 14790  003F9E  C0C6  F080         	movff	intToFloatStr@pr,___awdiv@dividend
 14791  003FA2  C0C7  F081         	movff	intToFloatStr@pr+1,___awdiv@dividend+1
 14792  003FA6  0E00               	movlw	0
 14793  003FA8  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
 14794  003FAA  0E0A               	movlw	10
 14795  003FAC  6F82               	movwf	___awdiv@divisor& (0+255),b
 14796  003FAE  ECD0  F01E         	call	___awdiv	;wreg free
 14797  003FB2  0100               	movlb	0	; () banked
 14798  003FB4  5180               	movf	?___awdiv& (0+255),w,b
 14799  003FB6  0F30               	addlw	48
 14800  003FB8  6FC1               	movwf	intToFloatStr@conv& (0+255),b
 14801                           
 14802                           ; BSR set to: 0
 14803                           ;function.c: 51: conv[1] = (char) '.';
 14804  003FBA  0E2E               	movlw	46
 14805  003FBC  6FC2               	movwf	(intToFloatStr@conv+1)& (0+255),b
 14806                           
 14807                           ;function.c: 52: conv[2] = (char) ((pr % 10) + 48);
 14808  003FBE  C0C6  F080         	movff	intToFloatStr@pr,___awmod@dividend
 14809  003FC2  C0C7  F081         	movff	intToFloatStr@pr+1,___awmod@dividend+1
 14810  003FC6  0E00               	movlw	0
 14811  003FC8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 14812  003FCA  0E0A               	movlw	10
 14813  003FCC  6F82               	movwf	___awmod@divisor& (0+255),b
 14814  003FCE  EC68  F03C         	call	___awmod	;wreg free
 14815  003FD2  0100               	movlb	0	; () banked
 14816  003FD4  5180               	movf	?___awmod& (0+255),w,b
 14817  003FD6  0F30               	addlw	48
 14818  003FD8  6FC3               	movwf	(intToFloatStr@conv+2)& (0+255),b
 14819                           
 14820                           ; BSR set to: 0
 14821                           ;function.c: 53: conv[3] = '\0';
 14822  003FDA  0E00               	movlw	0
 14823  003FDC  6FC4               	movwf	(intToFloatStr@conv+3)& (0+255),b
 14824                           
 14825                           ; BSR set to: 0
 14826                           ;function.c: 54: char end[4];
 14827                           ;function.c: 55: sprintf(end, conv);
 14828  003FDE  0EBD               	movlw	low intToFloatStr@end
 14829  003FE0  6FA1               	movwf	sprintf@wh& (0+255),b
 14830  003FE2  0E00               	movlw	high intToFloatStr@end
 14831  003FE4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 14832  003FE6  0EC1               	movlw	low intToFloatStr@conv
 14833  003FE8  6FA3               	movwf	sprintf@f& (0+255),b
 14834  003FEA  0E00               	movlw	high intToFloatStr@conv
 14835  003FEC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 14836  003FEE  EC42  F039         	call	_sprintf	;wreg free
 14837                           
 14838                           ;function.c: 56: return end;
 14839  003FF2  0EBD               	movlw	low intToFloatStr@end
 14840  003FF4  0100               	movlb	0	; () banked
 14841  003FF6  6FBB               	movwf	?_intToFloatStr& (0+255),b
 14842  003FF8  0E00               	movlw	high intToFloatStr@end
 14843  003FFA  6FBC               	movwf	(?_intToFloatStr+1)& (0+255),b
 14844                           
 14845                           ; BSR set to: 0
 14846                           
 14847                           ; BSR set to: 0
 14848  003FFC  0012               	return		;funcret
 14849  003FFE  FFFF               	dw	65535	; errata NOP
 14850  004000                     __end_of_intToFloatStr:
 14851                           	opt stack 0
 14852                           tblptru	equ	0xFF8
 14853                           tblptrh	equ	0xFF7
 14854                           tblptrl	equ	0xFF6
 14855                           tablat	equ	0xFF5
 14856                           prodh	equ	0xFF4
 14857                           prodl	equ	0xFF3
 14858                           intcon	equ	0xFF2
 14859                           intcon2	equ	0xFF1
 14860                           intcon3	equ	0xFF0
 14861                           postinc0	equ	0xFEE
 14862                           wreg	equ	0xFE8
 14863                           postdec1	equ	0xFE5
 14864                           fsr1l	equ	0xFE1
 14865                           indf2	equ	0xFDF
 14866                           postinc2	equ	0xFDE
 14867                           postdec2	equ	0xFDD
 14868                           fsr2h	equ	0xFDA
 14869                           fsr2l	equ	0xFD9
 14870                           status	equ	0xFD8
 14871                           
 14872 ;; *************** function ___awmod *****************
 14873 ;; Defined at:
 14874 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 14875 ;; Parameters:    Size  Location     Type
 14876 ;;  dividend        2    0[BANK0 ] int 
 14877 ;;  divisor         2    2[BANK0 ] int 
 14878 ;; Auto vars:     Size  Location     Type
 14879 ;;  sign            1    5[BANK0 ] unsigned char 
 14880 ;;  counter         1    4[BANK0 ] unsigned char 
 14881 ;; Return value:  Size  Location     Type
 14882 ;;                  2    0[BANK0 ] int 
 14883 ;; Registers used:
 14884 ;;		wreg, status,2, status,0
 14885 ;; Tracked objects:
 14886 ;;		On entry : 0/0
 14887 ;;		On exit  : 0/0
 14888 ;;		Unchanged: 0/0
 14889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14890 ;;      Params:         0       4       0       0       0       0       0
 14891 ;;      Locals:         0       2       0       0       0       0       0
 14892 ;;      Temps:          0       0       0       0       0       0       0
 14893 ;;      Totals:         0       6       0       0       0       0       0
 14894 ;;Total ram usage:        6 bytes
 14895 ;; Hardware stack levels used:    1
 14896 ;; Hardware stack levels required when called:    6
 14897 ;; This function calls:
 14898 ;;		Nothing
 14899 ;; This function is called by:
 14900 ;;		_DECtoBCD
 14901 ;;		_intToFloatStr
 14902 ;;		_DECtoHEX
 14903 ;; This function uses a non-reentrant model
 14904 ;;
 14905                           
 14906                           	psect	text44
 14907  0078D0                     __ptext44:
 14908                           	opt stack 0
 14909  0078D0                     ___awmod:
 14910                           	opt stack 0
 14911  0078D0  FFFF               	dw	65535	; assembler added errata NOP
 14912                           
 14913                           ; BSR set to: 0
 14914                           ;incstack = 0
 14915  0078D2  0E00               	movlw	0
 14916  0078D4  0100               	movlb	0	; () banked
 14917  0078D6  6F85               	movwf	___awmod@sign& (0+255),b
 14918                           
 14919                           ; BSR set to: 0
 14920  0078D8  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 14921  0078DA  D006               	goto	l1369
 14922                           
 14923                           ; BSR set to: 0
 14924  0078DC  6D80               	negf	___awmod@dividend& (0+255),b
 14925  0078DE  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 14926  0078E0  B0D8               	btfsc	status,0,c
 14927  0078E2  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 14928                           
 14929                           ; BSR set to: 0
 14930  0078E4  0E01               	movlw	1
 14931  0078E6  6F85               	movwf	___awmod@sign& (0+255),b
 14932  0078E8                     l1369:
 14933  0078E8  FFFF               	dw	65535	; assembler added errata NOP
 14934                           
 14935                           ; BSR set to: 0
 14936                           
 14937                           ; BSR set to: 0
 14938  0078EA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 14939  0078EC  D004               	goto	l1370
 14940                           
 14941                           ; BSR set to: 0
 14942  0078EE  6D82               	negf	___awmod@divisor& (0+255),b
 14943  0078F0  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 14944  0078F2  B0D8               	btfsc	status,0,c
 14945  0078F4  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 14946  0078F6                     l1370:
 14947  0078F6  FFFF               	dw	65535	; assembler added errata NOP
 14948                           
 14949                           ; BSR set to: 0
 14950                           
 14951                           ; BSR set to: 0
 14952  0078F8  5182               	movf	___awmod@divisor& (0+255),w,b
 14953  0078FA  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 14954  0078FC  B4D8               	btfsc	status,2,c
 14955  0078FE  D01C               	goto	l1377
 14956                           
 14957                           ; BSR set to: 0
 14958  007900  0E01               	movlw	1
 14959  007902  6F84               	movwf	___awmod@counter& (0+255),b
 14960  007904  D005               	goto	l1372
 14961  007906  FFFF               	dw	65535	; assembler added errata NOP
 14962                           
 14963                           ; BSR set to: 0
 14964                           
 14965                           ; BSR set to: 0
 14966  007908  90D8               	bcf	status,0,c
 14967  00790A  3782               	rlcf	___awmod@divisor& (0+255),f,b
 14968  00790C  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 14969  00790E  2B84               	incf	___awmod@counter& (0+255),f,b
 14970  007910                     l1372:
 14971  007910  FFFF               	dw	65535	; assembler added errata NOP
 14972                           
 14973                           ; BSR set to: 0
 14974                           
 14975                           ; BSR set to: 0
 14976  007912  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 14977  007914  D7F8               	goto	l1373
 14978  007916                     u5560:
 14979  007916  FFFF               	dw	65535	; assembler added errata NOP
 14980                           
 14981                           ; BSR set to: 0
 14982                           
 14983                           ; BSR set to: 0
 14984                           
 14985                           ; BSR set to: 0
 14986  007918  5182               	movf	___awmod@divisor& (0+255),w,b
 14987  00791A  5D80               	subwf	___awmod@dividend& (0+255),w,b
 14988  00791C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 14989  00791E  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 14990  007920  A0D8               	btfss	status,0,c
 14991  007922  D004               	goto	l1376
 14992                           
 14993                           ; BSR set to: 0
 14994  007924  5182               	movf	___awmod@divisor& (0+255),w,b
 14995  007926  5F80               	subwf	___awmod@dividend& (0+255),f,b
 14996  007928  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 14997  00792A  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 14998  00792C                     l1376:
 14999  00792C  FFFF               	dw	65535	; assembler added errata NOP
 15000                           
 15001                           ; BSR set to: 0
 15002                           
 15003                           ; BSR set to: 0
 15004  00792E  90D8               	bcf	status,0,c
 15005  007930  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 15006  007932  3382               	rrcf	___awmod@divisor& (0+255),f,b
 15007                           
 15008                           ; BSR set to: 0
 15009  007934  2F84               	decfsz	___awmod@counter& (0+255),f,b
 15010  007936  D7EF               	goto	u5560
 15011  007938                     l1377:
 15012  007938  FFFF               	dw	65535	; assembler added errata NOP
 15013                           
 15014                           ; BSR set to: 0
 15015                           
 15016                           ; BSR set to: 0
 15017                           
 15018                           ; BSR set to: 0
 15019  00793A  5185               	movf	___awmod@sign& (0+255),w,b
 15020  00793C  B4D8               	btfsc	status,2,c
 15021  00793E  D004               	goto	l1378
 15022                           
 15023                           ; BSR set to: 0
 15024  007940  6D80               	negf	___awmod@dividend& (0+255),b
 15025  007942  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 15026  007944  B0D8               	btfsc	status,0,c
 15027  007946  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 15028  007948                     l1378:
 15029  007948  FFFF               	dw	65535	; assembler added errata NOP
 15030                           
 15031                           ; BSR set to: 0
 15032                           
 15033                           ; BSR set to: 0
 15034  00794A  C080  F080         	movff	___awmod@dividend,?___awmod
 15035  00794E  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 15036                           
 15037                           ; BSR set to: 0
 15038                           
 15039                           ; BSR set to: 0
 15040  007952  0012               	return		;funcret
 15041  007954  FFFF               	dw	65535	; errata NOP
 15042  007956                     __end_of___awmod:
 15043                           	opt stack 0
 15044                           tblptru	equ	0xFF8
 15045                           tblptrh	equ	0xFF7
 15046                           tblptrl	equ	0xFF6
 15047                           tablat	equ	0xFF5
 15048                           prodh	equ	0xFF4
 15049                           prodl	equ	0xFF3
 15050                           intcon	equ	0xFF2
 15051                           intcon2	equ	0xFF1
 15052                           intcon3	equ	0xFF0
 15053                           postinc0	equ	0xFEE
 15054                           wreg	equ	0xFE8
 15055                           postdec1	equ	0xFE5
 15056                           fsr1l	equ	0xFE1
 15057                           indf2	equ	0xFDF
 15058                           postinc2	equ	0xFDE
 15059                           postdec2	equ	0xFDD
 15060                           fsr2h	equ	0xFDA
 15061                           fsr2l	equ	0xFD9
 15062                           status	equ	0xFD8
 15063                           
 15064 ;; *************** function ___awdiv *****************
 15065 ;; Defined at:
 15066 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 15067 ;; Parameters:    Size  Location     Type
 15068 ;;  dividend        2    0[BANK0 ] int 
 15069 ;;  divisor         2    2[BANK0 ] int 
 15070 ;; Auto vars:     Size  Location     Type
 15071 ;;  quotient        2    6[BANK0 ] int 
 15072 ;;  sign            1    5[BANK0 ] unsigned char 
 15073 ;;  counter         1    4[BANK0 ] unsigned char 
 15074 ;; Return value:  Size  Location     Type
 15075 ;;                  2    0[BANK0 ] int 
 15076 ;; Registers used:
 15077 ;;		wreg, status,2, status,0
 15078 ;; Tracked objects:
 15079 ;;		On entry : 0/0
 15080 ;;		On exit  : 0/0
 15081 ;;		Unchanged: 0/0
 15082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15083 ;;      Params:         0       4       0       0       0       0       0
 15084 ;;      Locals:         0       4       0       0       0       0       0
 15085 ;;      Temps:          0       0       0       0       0       0       0
 15086 ;;      Totals:         0       8       0       0       0       0       0
 15087 ;;Total ram usage:        8 bytes
 15088 ;; Hardware stack levels used:    1
 15089 ;; Hardware stack levels required when called:    6
 15090 ;; This function calls:
 15091 ;;		Nothing
 15092 ;; This function is called by:
 15093 ;;		_lerTransdutor
 15094 ;;		_dataLoger
 15095 ;;		_DECtoBCD
 15096 ;;		_intToFloatStr
 15097 ;;		_DECtoHEX
 15098 ;; This function uses a non-reentrant model
 15099 ;;
 15100                           
 15101                           	psect	text45
 15102  003DA0                     __ptext45:
 15103                           	opt stack 0
 15104  003DA0                     ___awdiv:
 15105                           	opt stack 0
 15106  003DA0  FFFF               	dw	65535	; assembler added errata NOP
 15107                           
 15108                           ; BSR set to: 0
 15109                           ;incstack = 0
 15110  003DA2  0E00               	movlw	0
 15111  003DA4  0100               	movlb	0	; () banked
 15112  003DA6  6F85               	movwf	___awdiv@sign& (0+255),b
 15113                           
 15114                           ; BSR set to: 0
 15115  003DA8  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 15116  003DAA  D006               	goto	l1356
 15117                           
 15118                           ; BSR set to: 0
 15119  003DAC  6D82               	negf	___awdiv@divisor& (0+255),b
 15120  003DAE  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
 15121  003DB0  B0D8               	btfsc	status,0,c
 15122  003DB2  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
 15123                           
 15124                           ; BSR set to: 0
 15125  003DB4  0E01               	movlw	1
 15126  003DB6  6F85               	movwf	___awdiv@sign& (0+255),b
 15127  003DB8                     l1356:
 15128  003DB8  FFFF               	dw	65535	; assembler added errata NOP
 15129                           
 15130                           ; BSR set to: 0
 15131                           
 15132                           ; BSR set to: 0
 15133  003DBA  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 15134  003DBC  D006               	goto	l1357
 15135                           
 15136                           ; BSR set to: 0
 15137  003DBE  6D80               	negf	___awdiv@dividend& (0+255),b
 15138  003DC0  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
 15139  003DC2  B0D8               	btfsc	status,0,c
 15140  003DC4  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
 15141                           
 15142                           ; BSR set to: 0
 15143  003DC6  0E01               	movlw	1
 15144  003DC8  1B85               	xorwf	___awdiv@sign& (0+255),f,b
 15145  003DCA                     l1357:
 15146  003DCA  FFFF               	dw	65535	; assembler added errata NOP
 15147                           
 15148                           ; BSR set to: 0
 15149                           
 15150                           ; BSR set to: 0
 15151  003DCC  0E00               	movlw	0
 15152  003DCE  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
 15153  003DD0  0E00               	movlw	0
 15154  003DD2  6F86               	movwf	___awdiv@quotient& (0+255),b
 15155                           
 15156                           ; BSR set to: 0
 15157  003DD4  5182               	movf	___awdiv@divisor& (0+255),w,b
 15158  003DD6  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 15159  003DD8  B4D8               	btfsc	status,2,c
 15160  003DDA  D020               	goto	l1364
 15161                           
 15162                           ; BSR set to: 0
 15163  003DDC  0E01               	movlw	1
 15164  003DDE  6F84               	movwf	___awdiv@counter& (0+255),b
 15165  003DE0  D005               	goto	l1359
 15166  003DE2  FFFF               	dw	65535	; assembler added errata NOP
 15167                           
 15168                           ; BSR set to: 0
 15169                           
 15170                           ; BSR set to: 0
 15171  003DE4  90D8               	bcf	status,0,c
 15172  003DE6  3782               	rlcf	___awdiv@divisor& (0+255),f,b
 15173  003DE8  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 15174  003DEA  2B84               	incf	___awdiv@counter& (0+255),f,b
 15175  003DEC                     l1359:
 15176  003DEC  FFFF               	dw	65535	; assembler added errata NOP
 15177                           
 15178                           ; BSR set to: 0
 15179                           
 15180                           ; BSR set to: 0
 15181  003DEE  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 15182  003DF0  D7F8               	goto	l1360
 15183  003DF2                     u5500:
 15184  003DF2  FFFF               	dw	65535	; assembler added errata NOP
 15185                           
 15186                           ; BSR set to: 0
 15187                           
 15188                           ; BSR set to: 0
 15189                           
 15190                           ; BSR set to: 0
 15191  003DF4  90D8               	bcf	status,0,c
 15192  003DF6  3786               	rlcf	___awdiv@quotient& (0+255),f,b
 15193  003DF8  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 15194                           
 15195                           ; BSR set to: 0
 15196  003DFA  5182               	movf	___awdiv@divisor& (0+255),w,b
 15197  003DFC  5D80               	subwf	___awdiv@dividend& (0+255),w,b
 15198  003DFE  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 15199  003E00  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 15200  003E02  A0D8               	btfss	status,0,c
 15201  003E04  D005               	goto	l1363
 15202                           
 15203                           ; BSR set to: 0
 15204  003E06  5182               	movf	___awdiv@divisor& (0+255),w,b
 15205  003E08  5F80               	subwf	___awdiv@dividend& (0+255),f,b
 15206  003E0A  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 15207  003E0C  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 15208                           
 15209                           ; BSR set to: 0
 15210  003E0E  8186               	bsf	___awdiv@quotient& (0+255),0,b
 15211  003E10                     l1363:
 15212  003E10  FFFF               	dw	65535	; assembler added errata NOP
 15213                           
 15214                           ; BSR set to: 0
 15215                           
 15216                           ; BSR set to: 0
 15217  003E12  90D8               	bcf	status,0,c
 15218  003E14  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 15219  003E16  3382               	rrcf	___awdiv@divisor& (0+255),f,b
 15220                           
 15221                           ; BSR set to: 0
 15222  003E18  2F84               	decfsz	___awdiv@counter& (0+255),f,b
 15223  003E1A  D7EB               	goto	u5500
 15224  003E1C                     l1364:
 15225  003E1C  FFFF               	dw	65535	; assembler added errata NOP
 15226                           
 15227                           ; BSR set to: 0
 15228                           
 15229                           ; BSR set to: 0
 15230                           
 15231                           ; BSR set to: 0
 15232  003E1E  5185               	movf	___awdiv@sign& (0+255),w,b
 15233  003E20  B4D8               	btfsc	status,2,c
 15234  003E22  D004               	goto	l1365
 15235                           
 15236                           ; BSR set to: 0
 15237  003E24  6D86               	negf	___awdiv@quotient& (0+255),b
 15238  003E26  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
 15239  003E28  B0D8               	btfsc	status,0,c
 15240  003E2A  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
 15241  003E2C                     l1365:
 15242  003E2C  FFFF               	dw	65535	; assembler added errata NOP
 15243                           
 15244                           ; BSR set to: 0
 15245                           
 15246                           ; BSR set to: 0
 15247  003E2E  C086  F080         	movff	___awdiv@quotient,?___awdiv
 15248  003E32  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
 15249                           
 15250                           ; BSR set to: 0
 15251                           
 15252                           ; BSR set to: 0
 15253  003E36  0012               	return		;funcret
 15254  003E38  FFFF               	dw	65535	; errata NOP
 15255  003E3A                     __end_of___awdiv:
 15256                           	opt stack 0
 15257                           tblptru	equ	0xFF8
 15258                           tblptrh	equ	0xFF7
 15259                           tblptrl	equ	0xFF6
 15260                           tablat	equ	0xFF5
 15261                           prodh	equ	0xFF4
 15262                           prodl	equ	0xFF3
 15263                           intcon	equ	0xFF2
 15264                           intcon2	equ	0xFF1
 15265                           intcon3	equ	0xFF0
 15266                           postinc0	equ	0xFEE
 15267                           wreg	equ	0xFE8
 15268                           postdec1	equ	0xFE5
 15269                           fsr1l	equ	0xFE1
 15270                           indf2	equ	0xFDF
 15271                           postinc2	equ	0xFDE
 15272                           postdec2	equ	0xFDD
 15273                           fsr2h	equ	0xFDA
 15274                           fsr2l	equ	0xFD9
 15275                           status	equ	0xFD8
 15276                           
 15277 ;; *************** function _drenarPressao *****************
 15278 ;; Defined at:
 15279 ;;		line 85 in file "controle.h"
 15280 ;; Parameters:    Size  Location     Type
 15281 ;;		None
 15282 ;; Auto vars:     Size  Location     Type
 15283 ;;		None
 15284 ;; Return value:  Size  Location     Type
 15285 ;;                  1    wreg      void 
 15286 ;; Registers used:
 15287 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15288 ;; Tracked objects:
 15289 ;;		On entry : 0/0
 15290 ;;		On exit  : 0/0
 15291 ;;		Unchanged: 0/0
 15292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15293 ;;      Params:         0       0       0       0       0       0       0
 15294 ;;      Locals:         0       0       0       0       0       0       0
 15295 ;;      Temps:          0       0       0       0       0       0       0
 15296 ;;      Totals:         0       0       0       0       0       0       0
 15297 ;;Total ram usage:        0 bytes
 15298 ;; Hardware stack levels used:    1
 15299 ;; Hardware stack levels required when called:    9
 15300 ;; This function calls:
 15301 ;;		_sprintf
 15302 ;; This function is called by:
 15303 ;;		_acaoTesteBombas
 15304 ;; This function uses a non-reentrant model
 15305 ;;
 15306                           
 15307                           	psect	text46
 15308  006D76                     __ptext46:
 15309                           	opt stack 0
 15310  006D76                     _drenarPressao:
 15311                           	opt stack 0
 15312  006D76  FFFF               	dw	65535	; assembler added errata NOP
 15313                           
 15314                           ;controle.h: 86: sprintf(line4, "Despressurizando...");
 15315                           
 15316                           ; BSR set to: 0
 15317                           ;incstack = 0
 15318  006D78  0E5A               	movlw	low _line4
 15319  006D7A  0100               	movlb	0	; () banked
 15320  006D7C  6FA1               	movwf	sprintf@wh& (0+255),b
 15321  006D7E  0E01               	movlw	high _line4
 15322  006D80  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 15323  006D82  0E5D               	movlw	low STR_38
 15324  006D84  6FA3               	movwf	sprintf@f& (0+255),b
 15325  006D86  0E7C               	movlw	high STR_38
 15326  006D88  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 15327  006D8A  EC42  F039         	call	_sprintf	;wreg free
 15328                           
 15329                           ;controle.h: 87: if (!timerTesteBombas) {
 15330  006D8E  0100               	movlb	0	; () banked
 15331  006D90  51DA               	movf	_timerTesteBombas& (0+255),w,b
 15332  006D92  11DB               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 15333  006D94  A4D8               	btfss	status,2,c
 15334  006D96  D004               	goto	l526
 15335                           
 15336                           ; BSR set to: 0
 15337                           ;controle.h: 88: codigoErro = 3;
 15338  006D98  0E03               	movlw	3
 15339  006D9A  6FF2               	movwf	_codigoErro& (0+255),b
 15340                           
 15341                           ;controle.h: 89: menu_posi = 0;
 15342  006D9C  0E00               	movlw	0
 15343  006D9E  6FDF               	movwf	_menu_posi& (0+255),b
 15344  006DA0                     l526:
 15345  006DA0  FFFF               	dw	65535	; assembler added errata NOP
 15346                           
 15347                           ; BSR set to: 0
 15348                           
 15349                           ; BSR set to: 0
 15350  006DA2  0012               	return		;funcret
 15351  006DA4  FFFF               	dw	65535	; errata NOP
 15352  006DA6                     __end_of_drenarPressao:
 15353                           	opt stack 0
 15354                           tblptru	equ	0xFF8
 15355                           tblptrh	equ	0xFF7
 15356                           tblptrl	equ	0xFF6
 15357                           tablat	equ	0xFF5
 15358                           prodh	equ	0xFF4
 15359                           prodl	equ	0xFF3
 15360                           intcon	equ	0xFF2
 15361                           intcon2	equ	0xFF1
 15362                           intcon3	equ	0xFF0
 15363                           postinc0	equ	0xFEE
 15364                           wreg	equ	0xFE8
 15365                           postdec1	equ	0xFE5
 15366                           fsr1l	equ	0xFE1
 15367                           indf2	equ	0xFDF
 15368                           postinc2	equ	0xFDE
 15369                           postdec2	equ	0xFDD
 15370                           fsr2h	equ	0xFDA
 15371                           fsr2l	equ	0xFD9
 15372                           status	equ	0xFD8
 15373                           
 15374 ;; *************** function _sprintf *****************
 15375 ;; Defined at:
 15376 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
 15377 ;; Parameters:    Size  Location     Type
 15378 ;;  wh              2   33[BANK0 ] PTR unsigned char 
 15379 ;;		 -> intToFloatStr@end(4), line3(21), line2(21), line1(21), 
 15380 ;;		 -> line4(21), bufferAUX(20), 
 15381 ;;  f               2   35[BANK0 ] PTR const unsigned char 
 15382 ;;		 -> intToFloatStr@conv(4), STR_126(15), STR_125(12), STR_124(10), 
 15383 ;;		 -> STR_123(18), STR_122(10), STR_121(18), STR_120(16), 
 15384 ;;		 -> STR_119(10), STR_117(3), STR_116(14), STR_115(20), 
 15385 ;;		 -> STR_114(8), STR_113(10), STR_112(11), STR_111(9), 
 15386 ;;		 -> STR_110(3), STR_109(15), STR_108(15), STR_107(11), 
 15387 ;;		 -> STR_106(11), STR_105(18), STR_104(5), STR_103(12), 
 15388 ;;		 -> STR_102(5), STR_101(14), STR_100(19), STR_97(3), 
 15389 ;;		 -> STR_96(7), STR_95(7), STR_93(12), STR_92(26), 
 15390 ;;		 -> STR_91(20), STR_90(8), STR_87(14), STR_84(14), 
 15391 ;;		 -> STR_83(11), STR_80(10), STR_79(31), STR_76(11), 
 15392 ;;		 -> STR_75(20), STR_74(20), STR_73(21), STR_72(15), 
 15393 ;;		 -> STR_71(6), STR_70(15), STR_69(6), STR_68(20), 
 15394 ;;		 -> STR_67(15), STR_66(19), STR_65(20), STR_64(21), 
 15395 ;;		 -> STR_63(21), STR_62(18), STR_61(20), STR_60(12), 
 15396 ;;		 -> STR_59(17), STR_58(21), STR_57(16), STR_54(15), 
 15397 ;;		 -> STR_51(15), STR_48(11), STR_47(17), STR_44(9), 
 15398 ;;		 -> STR_43(19), STR_42(19), STR_41(16), STR_40(15), 
 15399 ;;		 -> STR_39(15), STR_38(20), STR_2(5), STR_1(5), 
 15400 ;; Auto vars:     Size  Location     Type
 15401 ;;  pb              4   55[BANK0 ] struct __prbuf
 15402 ;;  ap              2   53[BANK0 ] PTR void [1]
 15403 ;;		 -> ?_sprintf(2), ?_printf(2), 
 15404 ;; Return value:  Size  Location     Type
 15405 ;;                  2   33[BANK0 ] int 
 15406 ;; Registers used:
 15407 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15408 ;; Tracked objects:
 15409 ;;		On entry : 0/0
 15410 ;;		On exit  : 0/0
 15411 ;;		Unchanged: 0/0
 15412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15413 ;;      Params:         0      20       0       0       0       0       0
 15414 ;;      Locals:         0       6       0       0       0       0       0
 15415 ;;      Temps:          0       0       0       0       0       0       0
 15416 ;;      Totals:         0      26       0       0       0       0       0
 15417 ;;Total ram usage:       26 bytes
 15418 ;; Hardware stack levels used:    1
 15419 ;; Hardware stack levels required when called:    8
 15420 ;; This function calls:
 15421 ;;		__doprnt
 15422 ;; This function is called by:
 15423 ;;		_getSerial
 15424 ;;		_drenarPressao
 15425 ;;		_acaoTesteBombas
 15426 ;;		_telaPrincipal
 15427 ;;		_tela_ajusteRTC
 15428 ;;		_tela_testeBombas
 15429 ;;		_dataLoger
 15430 ;;		_informacoes
 15431 ;;		_configuraTelefones
 15432 ;;		_configurarEstacionaria
 15433 ;;		_ajusteSP_Bombas
 15434 ;;		_main
 15435 ;;		_intToFloatStr
 15436 ;;		_telaTeste
 15437 ;; This function uses a non-reentrant model
 15438 ;;
 15439                           
 15440                           	psect	text47
 15441  007284                     __ptext47:
 15442                           	opt stack 0
 15443  007284                     _sprintf:
 15444                           	opt stack 0
 15445  007284  FFFF               	dw	65535	; assembler added errata NOP
 15446                           
 15447                           ; BSR set to: 0
 15448                           ;incstack = 0
 15449  007286  C0A1  F0B7         	movff	sprintf@wh,sprintf@pb
 15450  00728A  C0A2  F0B8         	movff	sprintf@wh+1,sprintf@pb+1
 15451  00728E  0E00               	movlw	0
 15452  007290  0100               	movlb	0	; () banked
 15453  007292  6FB9               	movwf	(sprintf@pb+2)& (0+255),b
 15454  007294  0E00               	movlw	0
 15455  007296  6FBA               	movwf	(sprintf@pb+3)& (0+255),b
 15456  007298  0EA5               	movlw	low (?_sprintf+4)
 15457  00729A  6FB5               	movwf	sprintf@ap& (0+255),b
 15458  00729C  0E00               	movlw	high (?_sprintf+4)
 15459  00729E  6FB6               	movwf	(sprintf@ap+1)& (0+255),b
 15460                           
 15461                           ; BSR set to: 0
 15462  0072A0  0EB7               	movlw	low sprintf@pb
 15463  0072A2  6F8C               	movwf	__doprnt@pb& (0+255),b
 15464  0072A4  0E00               	movlw	high sprintf@pb
 15465  0072A6  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 15466  0072A8  C0A3  F08E         	movff	sprintf@f,__doprnt@f
 15467  0072AC  C0A4  F08F         	movff	sprintf@f+1,__doprnt@f+1
 15468  0072B0  0EB5               	movlw	low sprintf@ap
 15469  0072B2  6F90               	movwf	__doprnt@ap& (0+255),b
 15470  0072B4  0E00               	movlw	high sprintf@ap
 15471  0072B6  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 15472  0072B8  EC38  F001         	call	__doprnt	;wreg free
 15473  0072BC  C0B7  FFD9         	movff	sprintf@pb,fsr2l
 15474  0072C0  C0B8  FFDA         	movff	sprintf@pb+1,fsr2h
 15475  0072C4  0E00               	movlw	0
 15476  0072C6  6EDF               	movwf	indf2,c
 15477                           
 15478                           ;	Return value of _sprintf is never used
 15479  0072C8  0012               	return		;funcret
 15480  0072CA  FFFF               	dw	65535	; errata NOP
 15481  0072CC                     __end_of_sprintf:
 15482                           	opt stack 0
 15483                           tblptru	equ	0xFF8
 15484                           tblptrh	equ	0xFF7
 15485                           tblptrl	equ	0xFF6
 15486                           tablat	equ	0xFF5
 15487                           prodh	equ	0xFF4
 15488                           prodl	equ	0xFF3
 15489                           intcon	equ	0xFF2
 15490                           intcon2	equ	0xFF1
 15491                           intcon3	equ	0xFF0
 15492                           postinc0	equ	0xFEE
 15493                           wreg	equ	0xFE8
 15494                           postdec1	equ	0xFE5
 15495                           fsr1l	equ	0xFE1
 15496                           indf2	equ	0xFDF
 15497                           postinc2	equ	0xFDE
 15498                           postdec2	equ	0xFDD
 15499                           fsr2h	equ	0xFDA
 15500                           fsr2l	equ	0xFD9
 15501                           status	equ	0xFD8
 15502                           
 15503 ;; *************** function _btPress *****************
 15504 ;; Defined at:
 15505 ;;		line 77 in file "teclado.h"
 15506 ;; Parameters:    Size  Location     Type
 15507 ;;  bt              1    wreg     unsigned char 
 15508 ;; Auto vars:     Size  Location     Type
 15509 ;;  bt              1    0[BANK0 ] unsigned char 
 15510 ;; Return value:  Size  Location     Type
 15511 ;;                  1    wreg      unsigned char 
 15512 ;; Registers used:
 15513 ;;		wreg, status,2, status,0
 15514 ;; Tracked objects:
 15515 ;;		On entry : 0/0
 15516 ;;		On exit  : 0/0
 15517 ;;		Unchanged: 0/0
 15518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15519 ;;      Params:         0       0       0       0       0       0       0
 15520 ;;      Locals:         0       1       0       0       0       0       0
 15521 ;;      Temps:          0       0       0       0       0       0       0
 15522 ;;      Totals:         0       1       0       0       0       0       0
 15523 ;;Total ram usage:        1 bytes
 15524 ;; Hardware stack levels used:    1
 15525 ;; Hardware stack levels required when called:    6
 15526 ;; This function calls:
 15527 ;;		Nothing
 15528 ;; This function is called by:
 15529 ;;		_acaoTesteBombas
 15530 ;;		_telaPrincipal
 15531 ;;		_tela_ajusteRTC
 15532 ;;		_tela_testeBombas
 15533 ;;		_dataLoger
 15534 ;;		_informacoes
 15535 ;;		_configuraTelefones
 15536 ;;		_configurarEstacionaria
 15537 ;;		_ajusteSP_Bombas
 15538 ;;		_main
 15539 ;; This function uses a non-reentrant model
 15540 ;;
 15541                           
 15542                           	psect	text48
 15543  0077C8                     __ptext48:
 15544                           	opt stack 0
 15545  0077C8                     _btPress:
 15546                           	opt stack 0
 15547  0077C8  FFFF               	dw	65535	; assembler added errata NOP
 15548                           
 15549                           ;incstack = 0
 15550                           ;btPress@bt stored from wreg
 15551  0077CA  0100               	movlb	0	; () banked
 15552  0077CC  6F80               	movwf	btPress@bt& (0+255),b
 15553                           
 15554                           ;teclado.h: 78: switch (bt) {
 15555  0077CE  D02B               	goto	l482
 15556  0077D0  FFFF               	dw	65535	; assembler added errata NOP
 15557  0077D2  0101               	movlb	1	; () banked
 15558  0077D4  511C               	movf	__b_esc& (0+255),w,b
 15559  0077D6  B4D8               	btfsc	status,2,c
 15560  0077D8  D023               	goto	l494
 15561                           
 15562                           ; BSR set to: 1
 15563                           ;teclado.h: 80: _b_esc = 0;
 15564  0077DA  0E00               	movlw	0
 15565  0077DC  6F1C               	movwf	__b_esc& (0+255),b
 15566  0077DE  D017               	goto	L49
 15567  0077E0  FFFF               	dw	65535	; assembler added errata NOP
 15568                           
 15569                           ;teclado.h: 88: if (_b_mais) {
 15570                           
 15571                           ; BSR set to: 1
 15572  0077E2  0101               	movlb	1	; () banked
 15573  0077E4  5118               	movf	__b_mais& (0+255),w,b
 15574  0077E6  B4D8               	btfsc	status,2,c
 15575  0077E8  D01B               	goto	l494
 15576                           
 15577                           ; BSR set to: 1
 15578                           ;teclado.h: 89: _b_mais = 0;
 15579  0077EA  0E00               	movlw	0
 15580  0077EC  6F18               	movwf	__b_mais& (0+255),b
 15581  0077EE  D00F               	goto	L49
 15582  0077F0  FFFF               	dw	65535	; assembler added errata NOP
 15583                           
 15584                           ; BSR set to: 1
 15585  0077F2  0101               	movlb	1	; () banked
 15586  0077F4  511A               	movf	__b_menos& (0+255),w,b
 15587  0077F6  B4D8               	btfsc	status,2,c
 15588  0077F8  D013               	goto	l494
 15589                           
 15590                           ; BSR set to: 1
 15591                           ;teclado.h: 97: _b_menos = 0;
 15592  0077FA  0E00               	movlw	0
 15593  0077FC  6F1A               	movwf	__b_menos& (0+255),b
 15594  0077FE  D007               	goto	L49
 15595  007800  FFFF               	dw	65535	; assembler added errata NOP
 15596                           
 15597                           ; BSR set to: 1
 15598  007802  0101               	movlb	1	; () banked
 15599  007804  5116               	movf	__b_ok& (0+255),w,b
 15600  007806  B4D8               	btfsc	status,2,c
 15601  007808  D00B               	goto	l494
 15602                           
 15603                           ; BSR set to: 1
 15604                           ;teclado.h: 105: _b_ok = 0;
 15605  00780A  0E00               	movlw	0
 15606  00780C  6F16               	movwf	__b_ok& (0+255),b
 15607  00780E                     L49:
 15608  00780E  FFFF               	dw	65535	; assembler added errata NOP
 15609                           
 15610                           ;teclado.h: 106: if (!isPressed) {
 15611  007810  5066               	movf	_isPressed,w,c
 15612  007812  A4D8               	btfss	status,2,c
 15613  007814  D002               	goto	l495
 15614                           
 15615                           ; BSR set to: 1
 15616                           ;teclado.h: 107: timerAtrasoLCD = 1;
 15617  007816  0E01               	movlw	1
 15618  007818  6E74               	movwf	_timerAtrasoLCD,c
 15619  00781A                     l495:
 15620  00781A  FFFF               	dw	65535	; assembler added errata NOP
 15621                           
 15622                           ; BSR set to: 1
 15623                           ;teclado.h: 108: }
 15624                           ;teclado.h: 109: return 1;
 15625                           
 15626                           ; BSR set to: 1
 15627  00781C  0E01               	movlw	1
 15628                           
 15629                           ; BSR set to: 1
 15630  00781E  D013               	goto	l497
 15631  007820                     l494:
 15632  007820  FFFF               	dw	65535	; assembler added errata NOP
 15633                           
 15634                           ; BSR set to: 1
 15635                           
 15636                           ;teclado.h: 110: }
 15637                           ;teclado.h: 111: default: return 0;
 15638                           
 15639                           ; BSR set to: 1
 15640  007822  0E00               	movlw	0
 15641                           
 15642                           ;teclado.h: 112: }
 15643  007824  D010               	goto	l497
 15644  007826                     l482:
 15645  007826  FFFF               	dw	65535	; assembler added errata NOP
 15646  007828  0100               	movlb	0	; () banked
 15647  00782A  5180               	movf	btPress@bt& (0+255),w,b
 15648                           
 15649                           ; Switch size 1, requested type "space"
 15650                           ; Number of cases is 4, Range of values is 1 to 4
 15651                           ; switch strategies available:
 15652                           ; Name         Instructions Cycles
 15653                           ; simple_byte           13     7 (average)
 15654                           ;	Chosen strategy is simple_byte
 15655  00782C  0A01               	xorlw	1	; case 1
 15656  00782E  B4D8               	btfsc	status,2,c
 15657  007830  D7CF               	goto	l483
 15658  007832  0A03               	xorlw	3	; case 2
 15659  007834  B4D8               	btfsc	status,2,c
 15660  007836  D7DC               	goto	l490
 15661  007838  0A01               	xorlw	1	; case 3
 15662  00783A  B4D8               	btfsc	status,2,c
 15663  00783C  D7D1               	goto	l487
 15664  00783E  0A07               	xorlw	7	; case 4
 15665  007840  B4D8               	btfsc	status,2,c
 15666  007842  D7DE               	goto	l493
 15667  007844  D7ED               	goto	l494
 15668  007846                     l497:
 15669  007846  FFFF               	dw	65535	; assembler added errata NOP
 15670                           
 15671                           ; BSR set to: 0
 15672  007848  0012               	return		;funcret
 15673  00784A  FFFF               	dw	65535	; errata NOP
 15674  00784C                     __end_of_btPress:
 15675                           	opt stack 0
 15676                           tblptru	equ	0xFF8
 15677                           tblptrh	equ	0xFF7
 15678                           tblptrl	equ	0xFF6
 15679                           tablat	equ	0xFF5
 15680                           prodh	equ	0xFF4
 15681                           prodl	equ	0xFF3
 15682                           intcon	equ	0xFF2
 15683                           intcon2	equ	0xFF1
 15684                           intcon3	equ	0xFF0
 15685                           postinc0	equ	0xFEE
 15686                           wreg	equ	0xFE8
 15687                           postdec1	equ	0xFE5
 15688                           fsr1l	equ	0xFE1
 15689                           indf2	equ	0xFDF
 15690                           postinc2	equ	0xFDE
 15691                           postdec2	equ	0xFDD
 15692                           fsr2h	equ	0xFDA
 15693                           fsr2l	equ	0xFD9
 15694                           status	equ	0xFD8
 15695                           
 15696 ;; *************** function _acaoBombas *****************
 15697 ;; Defined at:
 15698 ;;		line 18 in file "controle.h"
 15699 ;; Parameters:    Size  Location     Type
 15700 ;;		None
 15701 ;; Auto vars:     Size  Location     Type
 15702 ;;		None
 15703 ;; Return value:  Size  Location     Type
 15704 ;;                  1    wreg      void 
 15705 ;; Registers used:
 15706 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15707 ;; Tracked objects:
 15708 ;;		On entry : 0/0
 15709 ;;		On exit  : 0/0
 15710 ;;		Unchanged: 0/0
 15711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15712 ;;      Params:         0       0       0       0       0       0       0
 15713 ;;      Locals:         0       0       0       0       0       0       0
 15714 ;;      Temps:          0       3       0       0       0       0       0
 15715 ;;      Totals:         0       3       0       0       0       0       0
 15716 ;;Total ram usage:        3 bytes
 15717 ;; Hardware stack levels used:    1
 15718 ;; Hardware stack levels required when called:   10
 15719 ;; This function calls:
 15720 ;;		_enviaSMS
 15721 ;; This function is called by:
 15722 ;;		_main
 15723 ;; This function uses a non-reentrant model
 15724 ;;
 15725                           
 15726                           	psect	text49
 15727  0039C6                     __ptext49:
 15728                           	opt stack 0
 15729  0039C6                     _acaoBombas:
 15730                           	opt stack 0
 15731  0039C6  FFFF               	dw	65535	; assembler added errata NOP
 15732                           
 15733                           ;controle.h: 19: if (pressao < sp_jockey && timerIntervaloEntreBombas == 0 && !LATAbits.
      +                          LATA3) {
 15734                           
 15735                           ;incstack = 0
 15736  0039C8  0100               	movlb	0	; () banked
 15737  0039CA  51E3               	movf	_sp_jockey& (0+255),w,b
 15738  0039CC  6FC8               	movwf	??_acaoBombas& (0+255),b
 15739  0039CE  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 15740  0039D0  51C8               	movf	??_acaoBombas& (0+255),w,b
 15741  0039D2  5DD8               	subwf	_pressao& (0+255),w,b
 15742  0039D4  51D9               	movf	(_pressao+1)& (0+255),w,b
 15743  0039D6  0A80               	xorlw	128
 15744  0039D8  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 15745  0039DA  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 15746  0039DC  0A80               	xorlw	128
 15747  0039DE  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 15748  0039E0  B0D8               	btfsc	status,0,c
 15749  0039E2  D008               	goto	l500
 15750                           
 15751                           ; BSR set to: 0
 15752  0039E4  51FE               	movf	_timerIntervaloEntreBombas& (0+255),w,b
 15753  0039E6  B4D8               	btfsc	status,2,c
 15754                           
 15755                           ; BSR set to: 0
 15756  0039E8  B689               	btfsc	3977,3,c	;volatile
 15757  0039EA  D004               	goto	l500
 15758                           
 15759                           ; BSR set to: 0
 15760                           ;controle.h: 20: timerIntervaloEntreBombas = 4;
 15761  0039EC  0E04               	movlw	4
 15762  0039EE  6FFE               	movwf	_timerIntervaloEntreBombas& (0+255),b
 15763                           
 15764                           ; BSR set to: 0
 15765                           ;controle.h: 21: LATAbits.LATA3 = 1;
 15766  0039F0  8689               	bsf	3977,3,c	;volatile
 15767                           
 15768                           ;controle.h: 22: } else if (pressao >= sp_pressao_rede && ocorrendoIncendio == 0) {
 15769  0039F2  D011               	goto	l502
 15770  0039F4                     l500:
 15771  0039F4  FFFF               	dw	65535	; assembler added errata NOP
 15772                           
 15773                           ; BSR set to: 0
 15774                           
 15775                           ; BSR set to: 0
 15776  0039F6  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 15777  0039F8  6FC8               	movwf	??_acaoBombas& (0+255),b
 15778  0039FA  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 15779  0039FC  51C8               	movf	??_acaoBombas& (0+255),w,b
 15780  0039FE  5DD8               	subwf	_pressao& (0+255),w,b
 15781  003A00  51D9               	movf	(_pressao+1)& (0+255),w,b
 15782  003A02  0A80               	xorlw	128
 15783  003A04  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 15784  003A06  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 15785  003A08  0A80               	xorlw	128
 15786  003A0A  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 15787  003A0C  A0D8               	btfss	status,0,c
 15788  003A0E  D003               	goto	l502
 15789                           
 15790                           ; BSR set to: 0
 15791  003A10  51F1               	movf	_ocorrendoIncendio& (0+255),w,b
 15792  003A12  B4D8               	btfsc	status,2,c
 15793                           
 15794                           ; BSR set to: 0
 15795                           ;controle.h: 23: LATAbits.LATA3 = 0;
 15796  003A14  9689               	bcf	3977,3,c	;volatile
 15797  003A16                     l502:
 15798  003A16  FFFF               	dw	65535	; assembler added errata NOP
 15799                           
 15800                           ; BSR set to: 0
 15801                           ;controle.h: 24: }
 15802                           ;controle.h: 26: if (pressao <= sp_estacionaria && timerIntervaloEntreBombas == 0 && !ou
      +                          t_BOMBA_ESTACIONARIA) {
 15803                           
 15804                           ; BSR set to: 0
 15805                           
 15806                           ; BSR set to: 0
 15807  003A18  51E1               	movf	_sp_estacionaria& (0+255),w,b
 15808  003A1A  6FC8               	movwf	??_acaoBombas& (0+255),b
 15809  003A1C  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 15810  003A1E  51D8               	movf	_pressao& (0+255),w,b
 15811  003A20  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 15812  003A22  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 15813  003A24  0A80               	xorlw	128
 15814  003A26  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 15815  003A28  51D9               	movf	(_pressao+1)& (0+255),w,b
 15816  003A2A  0A80               	xorlw	128
 15817  003A2C  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 15818  003A2E  A0D8               	btfss	status,0,c
 15819  003A30  D00C               	goto	l503
 15820                           
 15821                           ; BSR set to: 0
 15822  003A32  51FE               	movf	_timerIntervaloEntreBombas& (0+255),w,b
 15823  003A34  A4D8               	btfss	status,2,c
 15824  003A36  D009               	goto	l503
 15825                           
 15826                           ; BSR set to: 0
 15827  003A38  51F8               	movf	_out_BOMBA_ESTACIONARIA& (0+255),w,b
 15828  003A3A  A4D8               	btfss	status,2,c
 15829  003A3C  D006               	goto	l503
 15830                           
 15831                           ; BSR set to: 0
 15832                           ;controle.h: 27: ocorrendoIncendio = 1;
 15833  003A3E  0E01               	movlw	1
 15834  003A40  6FF1               	movwf	_ocorrendoIncendio& (0+255),b
 15835                           
 15836                           ;controle.h: 28: timerIntervaloEntreBombas = 3;
 15837  003A42  0E03               	movlw	3
 15838  003A44  6FFE               	movwf	_timerIntervaloEntreBombas& (0+255),b
 15839                           
 15840                           ;controle.h: 29: out_BOMBA_ESTACIONARIA = 1;
 15841  003A46  0E01               	movlw	1
 15842  003A48  6FF8               	movwf	_out_BOMBA_ESTACIONARIA& (0+255),b
 15843  003A4A                     l503:
 15844  003A4A  FFFF               	dw	65535	; assembler added errata NOP
 15845                           
 15846                           ; BSR set to: 0
 15847                           ;controle.h: 30: }
 15848                           ;controle.h: 32: if (pressao <= sp_principal && timerIntervaloEntreBombas == 0 && !LATDb
      +                          its.LATD7) {
 15849                           
 15850                           ; BSR set to: 0
 15851  003A4C  51E2               	movf	_sp_principal& (0+255),w,b
 15852  003A4E  6FC8               	movwf	??_acaoBombas& (0+255),b
 15853  003A50  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 15854  003A52  51D8               	movf	_pressao& (0+255),w,b
 15855  003A54  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 15856  003A56  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 15857  003A58  0A80               	xorlw	128
 15858  003A5A  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 15859  003A5C  51D9               	movf	(_pressao+1)& (0+255),w,b
 15860  003A5E  0A80               	xorlw	128
 15861  003A60  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 15862  003A62  A0D8               	btfss	status,0,c
 15863  003A64  D009               	goto	l504
 15864                           
 15865                           ; BSR set to: 0
 15866  003A66  51FE               	movf	_timerIntervaloEntreBombas& (0+255),w,b
 15867  003A68  B4D8               	btfsc	status,2,c
 15868                           
 15869                           ; BSR set to: 0
 15870  003A6A  BE8C               	btfsc	3980,7,c	;volatile
 15871  003A6C  D005               	goto	l504
 15872                           
 15873                           ; BSR set to: 0
 15874                           ;controle.h: 33: timerIntervaloEntreBombas = 4;
 15875  003A6E  0E04               	movlw	4
 15876  003A70  6FFE               	movwf	_timerIntervaloEntreBombas& (0+255),b
 15877                           
 15878                           ;controle.h: 34: ocorrendoIncendio = 1;
 15879  003A72  0E01               	movlw	1
 15880  003A74  6FF1               	movwf	_ocorrendoIncendio& (0+255),b
 15881                           
 15882                           ; BSR set to: 0
 15883                           ;controle.h: 35: LATDbits.LATD7 = 1;
 15884  003A76  8E8C               	bsf	3980,7,c	;volatile
 15885  003A78                     l504:
 15886  003A78  FFFF               	dw	65535	; assembler added errata NOP
 15887                           
 15888                           ; BSR set to: 0
 15889                           ;controle.h: 36: }
 15890                           ;controle.h: 38: if (ocorrendoIncendio == 1) {
 15891                           
 15892                           ; BSR set to: 0
 15893  003A7A  05F1               	decf	_ocorrendoIncendio& (0+255),w,b
 15894  003A7C  A4D8               	btfss	status,2,c
 15895  003A7E  D005               	goto	l505
 15896                           
 15897                           ; BSR set to: 0
 15898                           ;controle.h: 39: gsmOcupado = 1;
 15899  003A80  0E01               	movlw	1
 15900  003A82  6FF4               	movwf	_gsmOcupado& (0+255),b
 15901                           
 15902                           ; BSR set to: 0
 15903                           ;controle.h: 40: enviaSMS(1);
 15904  003A84  0E01               	movlw	1
 15905  003A86  ECA6  F00B         	call	_enviaSMS
 15906  003A8A                     l505:
 15907  003A8A  FFFF               	dw	65535	; assembler added errata NOP
 15908  003A8C  0012               	return		;funcret
 15909  003A8E  FFFF               	dw	65535	; errata NOP
 15910  003A90                     __end_of_acaoBombas:
 15911                           	opt stack 0
 15912                           tblptru	equ	0xFF8
 15913                           tblptrh	equ	0xFF7
 15914                           tblptrl	equ	0xFF6
 15915                           tablat	equ	0xFF5
 15916                           prodh	equ	0xFF4
 15917                           prodl	equ	0xFF3
 15918                           intcon	equ	0xFF2
 15919                           intcon2	equ	0xFF1
 15920                           intcon3	equ	0xFF0
 15921                           postinc0	equ	0xFEE
 15922                           wreg	equ	0xFE8
 15923                           postdec1	equ	0xFE5
 15924                           fsr1l	equ	0xFE1
 15925                           indf2	equ	0xFDF
 15926                           postinc2	equ	0xFDE
 15927                           postdec2	equ	0xFDD
 15928                           fsr2h	equ	0xFDA
 15929                           fsr2l	equ	0xFD9
 15930                           status	equ	0xFD8
 15931                           
 15932 ;; *************** function _enviaSMS *****************
 15933 ;; Defined at:
 15934 ;;		line 133 in file "comunicacao.h"
 15935 ;; Parameters:    Size  Location     Type
 15936 ;;  tipo            1    wreg     unsigned char 
 15937 ;; Auto vars:     Size  Location     Type
 15938 ;;  tipo            1   71[BANK0 ] unsigned char 
 15939 ;; Return value:  Size  Location     Type
 15940 ;;                  1    wreg      void 
 15941 ;; Registers used:
 15942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15943 ;; Tracked objects:
 15944 ;;		On entry : 0/0
 15945 ;;		On exit  : 0/0
 15946 ;;		Unchanged: 0/0
 15947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15948 ;;      Params:         0       0       0       0       0       0       0
 15949 ;;      Locals:         0      11       0       0       0       0       0
 15950 ;;      Temps:          0       2       0       0       0       0       0
 15951 ;;      Totals:         0      13       0       0       0       0       0
 15952 ;;Total ram usage:       13 bytes
 15953 ;; Hardware stack levels used:    1
 15954 ;; Hardware stack levels required when called:    9
 15955 ;; This function calls:
 15956 ;;		_aguardaBuffer
 15957 ;;		_delay
 15958 ;;		_limparBuffer
 15959 ;;		_printf
 15960 ;;		_writeChar
 15961 ;; This function is called by:
 15962 ;;		_acaoBombas
 15963 ;;		_acaoTesteBombas
 15964 ;; This function uses a non-reentrant model
 15965 ;;
 15966                           
 15967                           	psect	text50
 15968  00174C                     __ptext50:
 15969                           	opt stack 0
 15970  00174C                     _enviaSMS:
 15971                           	opt stack 0
 15972  00174C  FFFF               	dw	65535	; assembler added errata NOP
 15973                           
 15974                           ;incstack = 0
 15975                           ;enviaSMS@tipo stored from wreg
 15976  00174E  0100               	movlb	0	; () banked
 15977  001750  6FC7               	movwf	enviaSMS@tipo& (0+255),b
 15978                           
 15979                           ;comunicacao.h: 134: if (timerReenvioSMS) {
 15980  001752  0100               	movlb	0	; () banked
 15981  001754  51F6               	movf	_timerReenvioSMS& (0+255),w,b
 15982  001756  B4D8               	btfsc	status,2,c
 15983  001758  D003               	goto	l362
 15984                           
 15985                           ; BSR set to: 0
 15986                           ;comunicacao.h: 135: gsmOcupado = 0;
 15987  00175A  0E00               	movlw	0
 15988  00175C  6FF4               	movwf	_gsmOcupado& (0+255),b
 15989                           
 15990                           ; BSR set to: 0
 15991                           ;comunicacao.h: 136: return;
 15992  00175E  D19E               	goto	l366
 15993  001760                     l362:
 15994  001760  FFFF               	dw	65535	; assembler added errata NOP
 15995                           
 15996                           ; BSR set to: 0
 15997                           ;comunicacao.h: 137: };
 15998                           ;comunicacao.h: 138: gsmOcupado = 1;
 15999                           
 16000                           ; BSR set to: 0
 16001  001762  0E01               	movlw	1
 16002  001764  6FF4               	movwf	_gsmOcupado& (0+255),b
 16003                           
 16004                           ;comunicacao.h: 140: switch (etapaComunicacao) {
 16005  001766  D17A               	goto	l364
 16006  001768  FFFF               	dw	65535	; assembler added errata NOP
 16007                           
 16008                           ; BSR set to: 0
 16009                           ;comunicacao.h: 142: limparBuffer();
 16010                           
 16011                           ; BSR set to: 0
 16012  00176A  EC3B  F037         	call	_limparBuffer	;wreg free
 16013                           
 16014                           ;comunicacao.h: 143: printf("AT\r\n");
 16015  00176E  0EDD               	movlw	low STR_4
 16016  001770  0100               	movlb	0	; () banked
 16017  001772  6FA1               	movwf	printf@f& (0+255),b
 16018  001774  0E7F               	movlw	high STR_4
 16019  001776  6FA2               	movwf	(printf@f+1)& (0+255),b
 16020  001778  EC21  F038         	call	_printf	;wreg free
 16021                           
 16022                           ;comunicacao.h: 144: etapaComunicacao++;
 16023  00177C  4A62               	infsnz	_etapaComunicacao,f,c
 16024  00177E  2A63               	incf	_etapaComunicacao+1,f,c
 16025                           
 16026                           ;comunicacao.h: 145: timerEtapaComunicacao = 6;
 16027  001780  0E06               	movlw	6
 16028  001782  0100               	movlb	0	; () banked
 16029  001784  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 16030                           
 16031                           ;comunicacao.h: 146: break;
 16032  001786  D18A               	goto	l366
 16033  001788  FFFF               	dw	65535	; assembler added errata NOP
 16034                           
 16035                           ; BSR set to: 0
 16036                           ;comunicacao.h: 148: if (aguardaBuffer("OK")) {
 16037                           
 16038                           ; BSR set to: 0
 16039  00178A  0EF9               	movlw	low STR_5
 16040  00178C  6F93               	movwf	aguardaBuffer@str& (0+255),b
 16041  00178E  0E7F               	movlw	high STR_5
 16042  001790  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 16043  001792  EC03  F038         	call	_aguardaBuffer	;wreg free
 16044  001796  0900               	iorlw	0
 16045  001798  B4D8               	btfsc	status,2,c
 16046  00179A  D00E               	goto	l368
 16047                           
 16048                           ;comunicacao.h: 149: limparBuffer();
 16049  00179C  EC3B  F037         	call	_limparBuffer	;wreg free
 16050                           
 16051                           ;comunicacao.h: 150: printf("AT+CMGF=1\r\n");
 16052  0017A0  0EAD               	movlw	low STR_10
 16053  0017A2  0100               	movlb	0	; () banked
 16054  0017A4  6FA1               	movwf	printf@f& (0+255),b
 16055  0017A6  0E7E               	movlw	high STR_10
 16056  0017A8  6FA2               	movwf	(printf@f+1)& (0+255),b
 16057  0017AA  EC21  F038         	call	_printf	;wreg free
 16058                           
 16059                           ;comunicacao.h: 151: etapaComunicacao++;
 16060  0017AE  4A62               	infsnz	_etapaComunicacao,f,c
 16061  0017B0  2A63               	incf	_etapaComunicacao+1,f,c
 16062                           
 16063                           ;comunicacao.h: 152: timerEtapaComunicacao = 6;
 16064  0017B2  0E06               	movlw	6
 16065  0017B4  0100               	movlb	0	; () banked
 16066  0017B6  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 16067  0017B8                     l368:
 16068  0017B8  FFFF               	dw	65535	; assembler added errata NOP
 16069                           
 16070                           ;comunicacao.h: 153: }
 16071                           ;comunicacao.h: 154: if (!timerEtapaComunicacao) {
 16072                           
 16073                           ; BSR set to: 0
 16074  0017BA  0100               	movlb	0	; () banked
 16075  0017BC  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 16076  0017BE  A4D8               	btfss	status,2,c
 16077  0017C0  D16D               	goto	l366
 16078                           
 16079                           ; BSR set to: 0
 16080                           ;comunicacao.h: 155: writeChar(0x1A);
 16081  0017C2  0E1A               	movlw	26
 16082  0017C4  6F80               	movwf	writeChar@hex& (0+255),b
 16083  0017C6  0E00               	movlw	0
 16084  0017C8  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 16085  0017CA  ECE8  F035         	call	_writeChar	;wreg free
 16086                           
 16087                           ;comunicacao.h: 156: delay(15);
 16088  0017CE  0E00               	movlw	0
 16089  0017D0  0100               	movlb	0	; () banked
 16090  0017D2  6F81               	movwf	(delay@x+1)& (0+255),b
 16091  0017D4  0E0F               	movlw	15
 16092  0017D6  6F80               	movwf	delay@x& (0+255),b
 16093  0017D8  EC20  F037         	call	_delay	;wreg free
 16094                           
 16095                           ;comunicacao.h: 157: printf("ATH0\r\n");
 16096  0017DC  0EA9               	movlw	low STR_21
 16097  0017DE  0100               	movlb	0	; () banked
 16098  0017E0  6FA1               	movwf	printf@f& (0+255),b
 16099  0017E2  0E7F               	movlw	high STR_21
 16100  0017E4  6FA2               	movwf	(printf@f+1)& (0+255),b
 16101  0017E6  EC21  F038         	call	_printf	;wreg free
 16102  0017EA  D132               	goto	l412
 16103  0017EC  FFFF               	dw	65535	; assembler added errata NOP
 16104                           
 16105                           ;comunicacao.h: 162: if (aguardaBuffer("OK")) {
 16106  0017EE  0EF9               	movlw	low STR_5
 16107  0017F0  0100               	movlb	0	; () banked
 16108  0017F2  6F93               	movwf	aguardaBuffer@str& (0+255),b
 16109  0017F4  0E7F               	movlw	high STR_5
 16110  0017F6  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 16111  0017F8  EC03  F038         	call	_aguardaBuffer	;wreg free
 16112  0017FC  0900               	iorlw	0
 16113  0017FE  B4D8               	btfsc	status,2,c
 16114  001800  D0A4               	goto	l378
 16115                           
 16116                           ;comunicacao.h: 163: limparBuffer();
 16117  001802  EC3B  F037         	call	_limparBuffer	;wreg free
 16118                           
 16119                           ;comunicacao.h: 164: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : t
      +                          el2);
 16120  001806  0100               	movlb	0	; () banked
 16121  001808  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 16122  00180A  B4D8               	btfsc	status,2,c
 16123  00180C  D004               	goto	l373
 16124                           
 16125                           ; BSR set to: 0
 16126  00180E  0EC2               	movlw	low _tel2
 16127  001810  6FBD               	movwf	_enviaSMS$1383& (0+255),b
 16128  001812  0E01               	movlw	high _tel2
 16129  001814  D004               	goto	L39
 16130  001816                     l373:
 16131  001816  FFFF               	dw	65535	; assembler added errata NOP
 16132                           
 16133                           ; BSR set to: 0
 16134                           
 16135                           ; BSR set to: 0
 16136  001818  0ECE               	movlw	low _tel1
 16137  00181A  6FBD               	movwf	_enviaSMS$1383& (0+255),b
 16138  00181C  0E01               	movlw	high _tel1
 16139  00181E                     L39:
 16140  00181E  FFFF               	dw	65535	; assembler added errata NOP
 16141  001820  6FBE               	movwf	(_enviaSMS$1383+1)& (0+255),b
 16142                           
 16143                           ; BSR set to: 0
 16144                           
 16145                           ; BSR set to: 0
 16146  001822  0E35               	movlw	low STR_12
 16147  001824  6FA1               	movwf	printf@f& (0+255),b
 16148  001826  0E7D               	movlw	high STR_12
 16149  001828  6FA2               	movwf	(printf@f+1)& (0+255),b
 16150  00182A  C0BD  F0A3         	movff	_enviaSMS$1383,?_printf+2
 16151  00182E  C0BE  F0A4         	movff	_enviaSMS$1383+1,?_printf+3
 16152  001832  EC21  F038         	call	_printf	;wreg free
 16153                           
 16154                           ;comunicacao.h: 165: timerEtapaComunicacao = 8;
 16155  001836  0E08               	movlw	8
 16156  001838  FFFF               	dw	65535	; assembler added errata NOP
 16157  00183A  0100               	movlb	0	; () banked
 16158  00183C  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 16159                           
 16160                           ; BSR set to: 0
 16161                           ;comunicacao.h: 166: etapaComunicacao++;
 16162  00183E  4A62               	infsnz	_etapaComunicacao,f,c
 16163  001840  2A63               	incf	_etapaComunicacao+1,f,c
 16164                           
 16165                           ; BSR set to: 0
 16166  001842  D083               	goto	l378
 16167  001844  FFFF               	dw	65535	; assembler added errata NOP
 16168                           
 16169                           ; BSR set to: 0
 16170                           ;comunicacao.h: 174: if (aguardaBuffer(">")) {
 16171                           
 16172                           ; BSR set to: 0
 16173  001846  0EFC               	movlw	low STR_13
 16174  001848  6F93               	movwf	aguardaBuffer@str& (0+255),b
 16175  00184A  0E7F               	movlw	high STR_13
 16176  00184C  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 16177  00184E  EC03  F038         	call	_aguardaBuffer	;wreg free
 16178  001852  0900               	iorlw	0
 16179  001854  B4D8               	btfsc	status,2,c
 16180  001856  D079               	goto	l378
 16181                           
 16182                           ;comunicacao.h: 175: limparBuffer();
 16183  001858  EC3B  F037         	call	_limparBuffer	;wreg free
 16184                           
 16185                           ;comunicacao.h: 176: if (tipo == 1) {
 16186  00185C  0100               	movlb	0	; () banked
 16187  00185E  05C7               	decf	enviaSMS@tipo& (0+255),w,b
 16188  001860  A4D8               	btfss	status,2,c
 16189  001862  D018               	goto	l379
 16190                           
 16191                           ; BSR set to: 0
 16192                           ;comunicacao.h: 177: printf("DISPARO ALARME DE INCENDIO\r\nEM %02d:%02d:%02d %02d/%02d/%
      +                          02d\r\n", _hor, _min, _sec, _dia, _mes, _ano);
 16193  001864  0E91               	movlw	low STR_25
 16194  001866  6FA1               	movwf	printf@f& (0+255),b
 16195  001868  0E7B               	movlw	high STR_25
 16196  00186A  6FA2               	movwf	(printf@f+1)& (0+255),b
 16197  00186C  C0EC  F0A3         	movff	__hor,?_printf+2
 16198  001870  6BA4               	clrf	(?_printf+3)& (0+255),b
 16199  001872  C0ED  F0A5         	movff	__min,?_printf+4
 16200  001876  6BA6               	clrf	(?_printf+5)& (0+255),b
 16201  001878  C0EE  F0A7         	movff	__sec,?_printf+6
 16202  00187C  6BA8               	clrf	(?_printf+7)& (0+255),b
 16203  00187E  C0EB  F0A9         	movff	__dia,?_printf+8
 16204  001882  6BAA               	clrf	(?_printf+9)& (0+255),b
 16205  001884  C0EA  F0AB         	movff	__mes,?_printf+10
 16206  001888  6BAC               	clrf	(?_printf+11)& (0+255),b
 16207  00188A  C0E9  F0AD         	movff	__ano,?_printf+12
 16208  00188E  6BAE               	clrf	(?_printf+13)& (0+255),b
 16209  001890  EC21  F038         	call	_printf	;wreg free
 16210  001894                     l379:
 16211  001894  FFFF               	dw	65535	; assembler added errata NOP
 16212                           
 16213                           ;comunicacao.h: 178: }
 16214                           ;comunicacao.h: 179: if (tipo == 2) {
 16215  001896  0E02               	movlw	2
 16216  001898  0100               	movlb	0	; () banked
 16217  00189A  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 16218  00189C  A4D8               	btfss	status,2,c
 16219  00189E  D04B               	goto	l380
 16220                           
 16221                           ; BSR set to: 0
 16222                           ;comunicacao.h: 180: printf("TESTE DE BOMBAS REALIZADO\r\nEM %02d:%02d:%02d %02d/%02d/%0
      +                          2d\r\nJOCKEY: %s\r\nPRINCIPAL: %s\r\nCOMBUSTAO: %s\r\n",
 16223                           ;comunicacao.h: 181: _hor, _min, _sec, _dia, _mes, _ano, status_jockey == 1 ? "OK" : "FA
      +                          LHA", status_principal == 1 ? "OK" : "FALHA", status_estacionaria == 1 ? "OK" : "FALHA")
      +                          ;
 16224  0018A0  05FA               	decf	_status_estacionaria& (0+255),w,b
 16225  0018A2  B4D8               	btfsc	status,2,c
 16226  0018A4  D004               	goto	l382
 16227                           
 16228                           ; BSR set to: 0
 16229  0018A6  0ED1               	movlw	low STR_28
 16230  0018A8  6FBF               	movwf	_enviaSMS$1396& (0+255),b
 16231  0018AA  0E7F               	movlw	high STR_28
 16232  0018AC  D004               	goto	L37
 16233  0018AE                     l382:
 16234  0018AE  FFFF               	dw	65535	; assembler added errata NOP
 16235                           
 16236                           ; BSR set to: 0
 16237                           
 16238                           ; BSR set to: 0
 16239  0018B0  0EF9               	movlw	low STR_5
 16240  0018B2  6FBF               	movwf	_enviaSMS$1396& (0+255),b
 16241  0018B4  0E7F               	movlw	high STR_5
 16242  0018B6                     L37:
 16243  0018B6  FFFF               	dw	65535	; assembler added errata NOP
 16244  0018B8  6FC0               	movwf	(_enviaSMS$1396+1)& (0+255),b
 16245                           
 16246                           ; BSR set to: 0
 16247  0018BA  05FB               	decf	_status_principal& (0+255),w,b
 16248  0018BC  B4D8               	btfsc	status,2,c
 16249  0018BE  D004               	goto	l386
 16250                           
 16251                           ; BSR set to: 0
 16252  0018C0  0ED1               	movlw	low STR_28
 16253  0018C2  6FC1               	movwf	_enviaSMS$1397& (0+255),b
 16254  0018C4  0E7F               	movlw	high STR_28
 16255  0018C6  D004               	goto	L38
 16256  0018C8                     l386:
 16257  0018C8  FFFF               	dw	65535	; assembler added errata NOP
 16258                           
 16259                           ; BSR set to: 0
 16260                           
 16261                           ; BSR set to: 0
 16262  0018CA  0EF9               	movlw	low STR_5
 16263  0018CC  6FC1               	movwf	_enviaSMS$1397& (0+255),b
 16264  0018CE  0E7F               	movlw	high STR_5
 16265  0018D0                     L38:
 16266  0018D0  FFFF               	dw	65535	; assembler added errata NOP
 16267  0018D2  6FC2               	movwf	(_enviaSMS$1397+1)& (0+255),b
 16268                           
 16269                           ; BSR set to: 0
 16270  0018D4  05FC               	decf	_status_jockey& (0+255),w,b
 16271  0018D6  B4D8               	btfsc	status,2,c
 16272  0018D8  D004               	goto	l390
 16273                           
 16274                           ; BSR set to: 0
 16275  0018DA  0ED1               	movlw	low STR_28
 16276  0018DC  6FC3               	movwf	_enviaSMS$1398& (0+255),b
 16277  0018DE  0E7F               	movlw	high STR_28
 16278  0018E0  D004               	goto	L40
 16279  0018E2                     l390:
 16280  0018E2  FFFF               	dw	65535	; assembler added errata NOP
 16281                           
 16282                           ; BSR set to: 0
 16283                           
 16284                           ; BSR set to: 0
 16285  0018E4  0EF9               	movlw	low STR_5
 16286  0018E6  6FC3               	movwf	_enviaSMS$1398& (0+255),b
 16287  0018E8  0E7F               	movlw	high STR_5
 16288  0018EA                     L40:
 16289  0018EA  FFFF               	dw	65535	; assembler added errata NOP
 16290  0018EC  6FC4               	movwf	(_enviaSMS$1398+1)& (0+255),b
 16291                           
 16292                           ; BSR set to: 0
 16293                           
 16294                           ; BSR set to: 0
 16295  0018EE  0E29               	movlw	low STR_26
 16296  0018F0  6FA1               	movwf	printf@f& (0+255),b
 16297  0018F2  0E7B               	movlw	high STR_26
 16298  0018F4  6FA2               	movwf	(printf@f+1)& (0+255),b
 16299  0018F6  C0EC  F0A3         	movff	__hor,?_printf+2
 16300  0018FA  6BA4               	clrf	(?_printf+3)& (0+255),b
 16301  0018FC  C0ED  F0A5         	movff	__min,?_printf+4
 16302  001900  6BA6               	clrf	(?_printf+5)& (0+255),b
 16303  001902  C0EE  F0A7         	movff	__sec,?_printf+6
 16304  001906  6BA8               	clrf	(?_printf+7)& (0+255),b
 16305  001908  C0EB  F0A9         	movff	__dia,?_printf+8
 16306  00190C  6BAA               	clrf	(?_printf+9)& (0+255),b
 16307  00190E  C0EA  F0AB         	movff	__mes,?_printf+10
 16308  001912  6BAC               	clrf	(?_printf+11)& (0+255),b
 16309  001914  C0E9  F0AD         	movff	__ano,?_printf+12
 16310  001918  6BAE               	clrf	(?_printf+13)& (0+255),b
 16311  00191A  C0C3  F0AF         	movff	_enviaSMS$1398,?_printf+14
 16312  00191E  C0C4  F0B0         	movff	_enviaSMS$1398+1,?_printf+15
 16313  001922  C0C1  F0B1         	movff	_enviaSMS$1397,?_printf+16
 16314  001926  C0C2  F0B2         	movff	_enviaSMS$1397+1,?_printf+17
 16315  00192A  C0BF  F0B3         	movff	_enviaSMS$1396,?_printf+18
 16316  00192E  C0C0  F0B4         	movff	_enviaSMS$1396+1,?_printf+19
 16317  001932  EC21  F038         	call	_printf	;wreg free
 16318  001936                     l380:
 16319  001936  FFFF               	dw	65535	; assembler added errata NOP
 16320                           
 16321                           ;comunicacao.h: 182: }
 16322                           ;comunicacao.h: 183: writeChar(0x1A);
 16323  001938  0E1A               	movlw	26
 16324  00193A  0100               	movlb	0	; () banked
 16325  00193C  6F80               	movwf	writeChar@hex& (0+255),b
 16326  00193E  0E00               	movlw	0
 16327  001940  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 16328  001942  ECE8  F035         	call	_writeChar	;wreg free
 16329                           
 16330                           ;comunicacao.h: 184: timerEtapaComunicacao = 30;
 16331  001946  0E1E               	movlw	30
 16332  001948  D777               	goto	L42
 16333  00194A                     l378:
 16334  00194A  FFFF               	dw	65535	; assembler added errata NOP
 16335                           
 16336                           ;comunicacao.h: 186: }
 16337                           ;comunicacao.h: 187: if (!timerEtapaComunicacao) {
 16338                           
 16339                           ; BSR set to: 0
 16340  00194C  0100               	movlb	0	; () banked
 16341  00194E  FFFF               	dw	65535	; assembler added errata NOP
 16342  001950  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 16343  001952  A4D8               	btfss	status,2,c
 16344  001954  D0A3               	goto	l366
 16345  001956  D07C               	goto	l412
 16346  001958  FFFF               	dw	65535	; assembler added errata NOP
 16347                           
 16348                           ; BSR set to: 0
 16349                           ;comunicacao.h: 192: if (aguardaBuffer("ERROR") | aguardaBuffer("OK")) {
 16350                           
 16351                           ; BSR set to: 0
 16352  00195A  0EF9               	movlw	low STR_5
 16353  00195C  6F93               	movwf	aguardaBuffer@str& (0+255),b
 16354  00195E  0E7F               	movlw	high STR_5
 16355  001960  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 16356  001962  EC03  F038         	call	_aguardaBuffer	;wreg free
 16357  001966  0100               	movlb	0	; () banked
 16358  001968  6FBB               	movwf	??_enviaSMS& (0+255),b
 16359  00196A  0ED7               	movlw	low STR_17
 16360  00196C  6F93               	movwf	aguardaBuffer@str& (0+255),b
 16361  00196E  0E7F               	movlw	high STR_17
 16362  001970  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 16363  001972  EC03  F038         	call	_aguardaBuffer	;wreg free
 16364  001976  0100               	movlb	0	; () banked
 16365  001978  11BB               	iorwf	??_enviaSMS& (0+255),w,b
 16366  00197A  0900               	iorlw	0
 16367  00197C  B4D8               	btfsc	status,2,c
 16368  00197E  D7E7               	goto	L44
 16369                           
 16370                           ; BSR set to: 0
 16371                           ;comunicacao.h: 193: if (tipo == 2) {
 16372  001980  0E02               	movlw	2
 16373  001982  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 16374  001984  A4D8               	btfss	status,2,c
 16375  001986  D012               	goto	l396
 16376                           
 16377                           ; BSR set to: 0
 16378                           ;comunicacao.h: 194: if (telefoneSelecionado == 0) {
 16379  001988  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 16380  00198A  A4D8               	btfss	status,2,c
 16381  00198C  D007               	goto	l397
 16382                           
 16383                           ; BSR set to: 0
 16384                           ;comunicacao.h: 195: telefoneSelecionado = 1;
 16385  00198E  0E01               	movlw	1
 16386  001990  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 16387                           
 16388                           ;comunicacao.h: 196: etapaComunicacao = 0;
 16389  001992  0E00               	movlw	0
 16390  001994  6E63               	movwf	_etapaComunicacao+1,c
 16391  001996  0E00               	movlw	0
 16392  001998  6E62               	movwf	_etapaComunicacao,c
 16393                           
 16394                           ;comunicacao.h: 197: } else {
 16395  00199A  D7D9               	goto	L44
 16396  00199C                     l397:
 16397  00199C  FFFF               	dw	65535	; assembler added errata NOP
 16398                           
 16399                           ; BSR set to: 0
 16400                           ;comunicacao.h: 198: telefoneSelecionado = 0;
 16401                           
 16402                           ; BSR set to: 0
 16403  00199E  0E00               	movlw	0
 16404  0019A0  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 16405                           
 16406                           ;comunicacao.h: 199: gsmOcupado = 0;
 16407  0019A2  0E00               	movlw	0
 16408  0019A4  6FF4               	movwf	_gsmOcupado& (0+255),b
 16409                           
 16410                           ;comunicacao.h: 200: menu_posi = 0;
 16411  0019A6  0E00               	movlw	0
 16412  0019A8  6FDF               	movwf	_menu_posi& (0+255),b
 16413                           
 16414                           ; BSR set to: 0
 16415                           ;comunicacao.h: 201: }
 16416                           ;comunicacao.h: 202: } else {
 16417  0019AA  D7D1               	goto	L44
 16418  0019AC                     l396:
 16419  0019AC  FFFF               	dw	65535	; assembler added errata NOP
 16420                           
 16421                           ; BSR set to: 0
 16422                           ;comunicacao.h: 203: etapaComunicacao++;
 16423                           
 16424                           ; BSR set to: 0
 16425  0019AE  4A62               	infsnz	_etapaComunicacao,f,c
 16426  0019B0  2A63               	incf	_etapaComunicacao+1,f,c
 16427                           
 16428                           ; BSR set to: 0
 16429                           
 16430                           ; BSR set to: 0
 16431  0019B2  D7CD               	goto	L44
 16432  0019B4  FFFF               	dw	65535	; assembler added errata NOP
 16433                           
 16434                           ; BSR set to: 0
 16435                           ;comunicacao.h: 211: limparBuffer();
 16436                           
 16437                           ; BSR set to: 0
 16438  0019B6  EC3B  F037         	call	_limparBuffer	;wreg free
 16439                           
 16440                           ;comunicacao.h: 212: printf("ATD 0%s;\r\n", telefoneSelecionado == 0 ? tel1 : tel2);
 16441  0019BA  0100               	movlb	0	; () banked
 16442  0019BC  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 16443  0019BE  B4D8               	btfsc	status,2,c
 16444  0019C0  D004               	goto	l403
 16445                           
 16446                           ; BSR set to: 0
 16447  0019C2  0EC2               	movlw	low _tel2
 16448  0019C4  6FC5               	movwf	_enviaSMS$1403& (0+255),b
 16449  0019C6  0E01               	movlw	high _tel2
 16450  0019C8  D004               	goto	L41
 16451  0019CA                     l403:
 16452  0019CA  FFFF               	dw	65535	; assembler added errata NOP
 16453                           
 16454                           ; BSR set to: 0
 16455                           
 16456                           ; BSR set to: 0
 16457  0019CC  0ECE               	movlw	low _tel1
 16458  0019CE  6FC5               	movwf	_enviaSMS$1403& (0+255),b
 16459  0019D0  0E01               	movlw	high _tel1
 16460  0019D2                     L41:
 16461  0019D2  FFFF               	dw	65535	; assembler added errata NOP
 16462  0019D4  6FC6               	movwf	(_enviaSMS$1403+1)& (0+255),b
 16463                           
 16464                           ; BSR set to: 0
 16465                           
 16466                           ; BSR set to: 0
 16467  0019D6  0E01               	movlw	low STR_35
 16468  0019D8  6FA1               	movwf	printf@f& (0+255),b
 16469  0019DA  0E7F               	movlw	high STR_35
 16470  0019DC  6FA2               	movwf	(printf@f+1)& (0+255),b
 16471  0019DE  C0C5  F0A3         	movff	_enviaSMS$1403,?_printf+2
 16472  0019E2  C0C6  F0A4         	movff	_enviaSMS$1403+1,?_printf+3
 16473  0019E6  EC21  F038         	call	_printf	;wreg free
 16474                           
 16475                           ;comunicacao.h: 213: timerEtapaComunicacao = 35;
 16476  0019EA  0E23               	movlw	35
 16477  0019EC  0100               	movlb	0	; () banked
 16478  0019EE  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 16479                           
 16480                           ; BSR set to: 0
 16481                           ;comunicacao.h: 214: etapaComunicacao++;
 16482  0019F0  4A62               	infsnz	_etapaComunicacao,f,c
 16483  0019F2  2A63               	incf	_etapaComunicacao+1,f,c
 16484                           
 16485                           ;comunicacao.h: 215: break;
 16486  0019F4  D053               	goto	l366
 16487  0019F6  FFFF               	dw	65535	; assembler added errata NOP
 16488                           
 16489                           ; BSR set to: 0
 16490                           ;comunicacao.h: 217: if (aguardaBuffer("NO DIALTONE") || !timerEtapaComunicacao) {
 16491                           
 16492                           ; BSR set to: 0
 16493  0019F8  0ED1               	movlw	low STR_36
 16494  0019FA  6F93               	movwf	aguardaBuffer@str& (0+255),b
 16495  0019FC  0E7E               	movlw	high STR_36
 16496  0019FE  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 16497  001A00  EC03  F038         	call	_aguardaBuffer	;wreg free
 16498  001A04  0900               	iorlw	0
 16499  001A06  A4D8               	btfss	status,2,c
 16500  001A08  D004               	goto	u6260
 16501  001A0A  0100               	movlb	0	; () banked
 16502  001A0C  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 16503  001A0E  A4D8               	btfss	status,2,c
 16504  001A10  D045               	goto	l366
 16505  001A12                     u6260:
 16506  001A12  FFFF               	dw	65535	; assembler added errata NOP
 16507                           
 16508                           ;comunicacao.h: 218: limparBuffer();
 16509                           
 16510                           ; BSR set to: 0
 16511  001A14  EC3B  F037         	call	_limparBuffer	;wreg free
 16512                           
 16513                           ;comunicacao.h: 219: printf("ATH0\r\n");
 16514  001A18  0EA9               	movlw	low STR_21
 16515  001A1A  0100               	movlb	0	; () banked
 16516  001A1C  6FA1               	movwf	printf@f& (0+255),b
 16517  001A1E  0E7F               	movlw	high STR_21
 16518  001A20  6FA2               	movwf	(printf@f+1)& (0+255),b
 16519  001A22  EC21  F038         	call	_printf	;wreg free
 16520                           
 16521                           ;comunicacao.h: 220: delay(550);
 16522  001A26  0E02               	movlw	2
 16523  001A28  0100               	movlb	0	; () banked
 16524  001A2A  6F81               	movwf	(delay@x+1)& (0+255),b
 16525  001A2C  0E26               	movlw	38
 16526  001A2E  6F80               	movwf	delay@x& (0+255),b
 16527  001A30  EC20  F037         	call	_delay	;wreg free
 16528                           
 16529                           ;comunicacao.h: 221: if (telefoneSelecionado == 0) {
 16530  001A34  0100               	movlb	0	; () banked
 16531  001A36  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 16532  001A38  A4D8               	btfss	status,2,c
 16533  001A3A  D003               	goto	l410
 16534                           
 16535                           ; BSR set to: 0
 16536                           ;comunicacao.h: 222: telefoneSelecionado = 1;
 16537  001A3C  0E01               	movlw	1
 16538  001A3E  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 16539                           
 16540                           ;comunicacao.h: 223: } else {
 16541  001A40  D007               	goto	l412
 16542  001A42                     l410:
 16543  001A42  FFFF               	dw	65535	; assembler added errata NOP
 16544                           
 16545                           ; BSR set to: 0
 16546                           ;comunicacao.h: 224: telefoneSelecionado = 0;
 16547                           
 16548                           ; BSR set to: 0
 16549  001A44  0E00               	movlw	0
 16550  001A46  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 16551                           
 16552                           ;comunicacao.h: 225: gsmOcupado = 0;
 16553  001A48  0E00               	movlw	0
 16554  001A4A  6FF4               	movwf	_gsmOcupado& (0+255),b
 16555                           
 16556                           ;comunicacao.h: 226: timerReenvioSMS = 100;
 16557  001A4C  0E64               	movlw	100
 16558  001A4E  6FF6               	movwf	_timerReenvioSMS& (0+255),b
 16559  001A50                     l412:
 16560  001A50  FFFF               	dw	65535	; assembler added errata NOP
 16561                           
 16562                           ; BSR set to: 0
 16563                           
 16564                           ; BSR set to: 0
 16565  001A52  0E00               	movlw	0
 16566  001A54  6E63               	movwf	_etapaComunicacao+1,c
 16567  001A56  0E00               	movlw	0
 16568  001A58  6E62               	movwf	_etapaComunicacao,c
 16569                           
 16570                           ; BSR set to: 0
 16571                           ;comunicacao.h: 234: }
 16572                           
 16573                           ;comunicacao.h: 233: break;
 16574  001A5A  D020               	goto	l366
 16575  001A5C                     l364:
 16576  001A5C  FFFF               	dw	65535	; assembler added errata NOP
 16577                           
 16578                           ; BSR set to: 0
 16579                           
 16580                           ; BSR set to: 0
 16581  001A5E  C062  F0BB         	movff	_etapaComunicacao,??_enviaSMS
 16582  001A62  C063  F0BC         	movff	_etapaComunicacao+1,??_enviaSMS+1
 16583                           
 16584                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16585                           ; Switch size 1, requested type "space"
 16586                           ; Number of cases is 1, Range of values is 0 to 0
 16587                           ; switch strategies available:
 16588                           ; Name         Instructions Cycles
 16589                           ; simple_byte            4     3 (average)
 16590                           ;	Chosen strategy is simple_byte
 16591  001A66  51BC               	movf	(??_enviaSMS+1)& (0+255),w,b
 16592  001A68  0A00               	xorlw	0	; case 0
 16593  001A6A  A4D8               	btfss	status,2,c
 16594  001A6C  D7F1               	goto	l412
 16595                           
 16596                           ; BSR set to: 0
 16597                           ; Switch size 1, requested type "space"
 16598                           ; Number of cases is 7, Range of values is 0 to 6
 16599                           ; switch strategies available:
 16600                           ; Name         Instructions Cycles
 16601                           ; simple_byte           22    12 (average)
 16602                           ;	Chosen strategy is simple_byte
 16603  001A6E  51BB               	movf	??_enviaSMS& (0+255),w,b
 16604  001A70  0A00               	xorlw	0	; case 0
 16605  001A72  B4D8               	btfsc	status,2,c
 16606  001A74  D679               	goto	l365
 16607  001A76  0A01               	xorlw	1	; case 1
 16608  001A78  B4D8               	btfsc	status,2,c
 16609  001A7A  D686               	goto	l367
 16610  001A7C  0A03               	xorlw	3	; case 2
 16611  001A7E  B4D8               	btfsc	status,2,c
 16612  001A80  D6B5               	goto	l370
 16613  001A82  0A01               	xorlw	1	; case 3
 16614  001A84  B4D8               	btfsc	status,2,c
 16615  001A86  D6DE               	goto	l377
 16616  001A88  0A07               	xorlw	7	; case 4
 16617  001A8A  B4D8               	btfsc	status,2,c
 16618  001A8C  D765               	goto	l394
 16619  001A8E  0A01               	xorlw	1	; case 5
 16620  001A90  B4D8               	btfsc	status,2,c
 16621  001A92  D790               	goto	l401
 16622  001A94  0A03               	xorlw	3	; case 6
 16623  001A96  B4D8               	btfsc	status,2,c
 16624  001A98  D7AE               	goto	l406
 16625  001A9A  D7DA               	goto	l412
 16626  001A9C                     l366:
 16627  001A9C  FFFF               	dw	65535	; assembler added errata NOP
 16628                           
 16629                           ; BSR set to: 0
 16630  001A9E  0012               	return		;funcret
 16631  001AA0  FFFF               	dw	65535	; errata NOP
 16632  001AA2                     __end_of_enviaSMS:
 16633                           	opt stack 0
 16634                           tblptru	equ	0xFF8
 16635                           tblptrh	equ	0xFF7
 16636                           tblptrl	equ	0xFF6
 16637                           tablat	equ	0xFF5
 16638                           prodh	equ	0xFF4
 16639                           prodl	equ	0xFF3
 16640                           intcon	equ	0xFF2
 16641                           intcon2	equ	0xFF1
 16642                           intcon3	equ	0xFF0
 16643                           postinc0	equ	0xFEE
 16644                           wreg	equ	0xFE8
 16645                           postdec1	equ	0xFE5
 16646                           fsr1l	equ	0xFE1
 16647                           indf2	equ	0xFDF
 16648                           postinc2	equ	0xFDE
 16649                           postdec2	equ	0xFDD
 16650                           fsr2h	equ	0xFDA
 16651                           fsr2l	equ	0xFD9
 16652                           status	equ	0xFD8
 16653                           
 16654 ;; *************** function _writeChar *****************
 16655 ;; Defined at:
 16656 ;;		line 21 in file "serial.h"
 16657 ;; Parameters:    Size  Location     Type
 16658 ;;  hex             2    0[BANK0 ] PTR unsigned char 
 16659 ;;		 -> RAM(1535), 
 16660 ;; Auto vars:     Size  Location     Type
 16661 ;;		None
 16662 ;; Return value:  Size  Location     Type
 16663 ;;                  1    wreg      void 
 16664 ;; Registers used:
 16665 ;;		None
 16666 ;; Tracked objects:
 16667 ;;		On entry : 0/0
 16668 ;;		On exit  : 0/0
 16669 ;;		Unchanged: 0/0
 16670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16671 ;;      Params:         0       2       0       0       0       0       0
 16672 ;;      Locals:         0       0       0       0       0       0       0
 16673 ;;      Temps:          0       0       0       0       0       0       0
 16674 ;;      Totals:         0       2       0       0       0       0       0
 16675 ;;Total ram usage:        2 bytes
 16676 ;; Hardware stack levels used:    1
 16677 ;; Hardware stack levels required when called:    6
 16678 ;; This function calls:
 16679 ;;		Nothing
 16680 ;; This function is called by:
 16681 ;;		_getSinalSIM800L
 16682 ;;		_comunicarTeste
 16683 ;;		_enviaSMS
 16684 ;; This function uses a non-reentrant model
 16685 ;;
 16686                           
 16687                           	psect	text51
 16688  006BD0                     __ptext51:
 16689                           	opt stack 0
 16690  006BD0                     _writeChar:
 16691                           	opt stack 0
 16692  006BD0  FFFF               	dw	65535	; assembler added errata NOP
 16693                           
 16694                           ;serial.h: 22: while (!TXSTAbits.TRMT);
 16695                           
 16696                           ;incstack = 0
 16697  006BD2  A2AC               	btfss	4012,1,c	;volatile
 16698  006BD4  D7FD               	goto	_writeChar
 16699                           
 16700                           ;serial.h: 23: TXREG = hex;
 16701  006BD6  C080  FFAD         	movff	writeChar@hex,4013	;volatile
 16702  006BDA  0012               	return		;funcret
 16703  006BDC  FFFF               	dw	65535	; errata NOP
 16704  006BDE                     __end_of_writeChar:
 16705                           	opt stack 0
 16706                           tblptru	equ	0xFF8
 16707                           tblptrh	equ	0xFF7
 16708                           tblptrl	equ	0xFF6
 16709                           tablat	equ	0xFF5
 16710                           prodh	equ	0xFF4
 16711                           prodl	equ	0xFF3
 16712                           intcon	equ	0xFF2
 16713                           intcon2	equ	0xFF1
 16714                           intcon3	equ	0xFF0
 16715                           postinc0	equ	0xFEE
 16716                           wreg	equ	0xFE8
 16717                           postdec1	equ	0xFE5
 16718                           fsr1l	equ	0xFE1
 16719                           indf2	equ	0xFDF
 16720                           postinc2	equ	0xFDE
 16721                           postdec2	equ	0xFDD
 16722                           fsr2h	equ	0xFDA
 16723                           fsr2l	equ	0xFD9
 16724                           status	equ	0xFD8
 16725                           
 16726 ;; *************** function _printf *****************
 16727 ;; Defined at:
 16728 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
 16729 ;; Parameters:    Size  Location     Type
 16730 ;;  f               2   33[BANK0 ] PTR const unsigned char 
 16731 ;;		 -> STR_37(7), STR_35(11), STR_26(104), STR_25(63), 
 16732 ;;		 -> STR_23(18), STR_21(7), STR_20(12), STR_18(5), 
 16733 ;;		 -> STR_14(126), STR_12(18), STR_10(12), STR_8(5), 
 16734 ;;		 -> STR_4(5), STR_3(9), 
 16735 ;; Auto vars:     Size  Location     Type
 16736 ;;  pb              4   55[BANK0 ] struct __prbuf
 16737 ;;  ap              2   53[BANK0 ] PTR void [1]
 16738 ;;		 -> ?_sprintf(2), ?_printf(2), 
 16739 ;; Return value:  Size  Location     Type
 16740 ;;                  2   33[BANK0 ] int 
 16741 ;; Registers used:
 16742 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16743 ;; Tracked objects:
 16744 ;;		On entry : 0/0
 16745 ;;		On exit  : 0/0
 16746 ;;		Unchanged: 0/0
 16747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16748 ;;      Params:         0      20       0       0       0       0       0
 16749 ;;      Locals:         0       6       0       0       0       0       0
 16750 ;;      Temps:          0       0       0       0       0       0       0
 16751 ;;      Totals:         0      26       0       0       0       0       0
 16752 ;;Total ram usage:       26 bytes
 16753 ;; Hardware stack levels used:    1
 16754 ;; Hardware stack levels required when called:    8
 16755 ;; This function calls:
 16756 ;;		__doprnt
 16757 ;; This function is called by:
 16758 ;;		_getSinalSIM800L
 16759 ;;		_comunicarTeste
 16760 ;;		_enviaSMS
 16761 ;; This function uses a non-reentrant model
 16762 ;;
 16763                           
 16764                           	psect	text52
 16765  007042                     __ptext52:
 16766                           	opt stack 0
 16767  007042                     _printf:
 16768                           	opt stack 0
 16769  007042  FFFF               	dw	65535	; assembler added errata NOP
 16770                           
 16771                           ;incstack = 0
 16772  007044  0E00               	movlw	0
 16773  007046  0100               	movlb	0	; () banked
 16774  007048  6FB7               	movwf	printf@pb& (0+255),b
 16775  00704A  0E00               	movlw	0
 16776  00704C  6FB8               	movwf	(printf@pb+1)& (0+255),b
 16777  00704E  0EF0               	movlw	low _putch
 16778  007050  6FB9               	movwf	(printf@pb+2)& (0+255),b
 16779  007052  0E6B               	movlw	high _putch
 16780  007054  6FBA               	movwf	(printf@pb+3)& (0+255),b
 16781  007056  0EA3               	movlw	low (?_printf+2)
 16782  007058  6FB5               	movwf	printf@ap& (0+255),b
 16783  00705A  0E00               	movlw	high (?_printf+2)
 16784  00705C  6FB6               	movwf	(printf@ap+1)& (0+255),b
 16785                           
 16786                           ; BSR set to: 0
 16787                           ;	Return value of _printf is never used
 16788  00705E  0EB7               	movlw	low printf@pb
 16789  007060  6F8C               	movwf	__doprnt@pb& (0+255),b
 16790  007062  0E00               	movlw	high printf@pb
 16791  007064  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 16792  007066  C0A1  F08E         	movff	printf@f,__doprnt@f
 16793  00706A  C0A2  F08F         	movff	printf@f+1,__doprnt@f+1
 16794  00706E  0EB5               	movlw	low printf@ap
 16795  007070  6F90               	movwf	__doprnt@ap& (0+255),b
 16796  007072  0E00               	movlw	high printf@ap
 16797  007074  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 16798  007076  EC38  F001         	call	__doprnt	;wreg free
 16799  00707A  0012               	return		;funcret
 16800  00707C  FFFF               	dw	65535	; errata NOP
 16801  00707E                     __end_of_printf:
 16802                           	opt stack 0
 16803                           tblptru	equ	0xFF8
 16804                           tblptrh	equ	0xFF7
 16805                           tblptrl	equ	0xFF6
 16806                           tablat	equ	0xFF5
 16807                           prodh	equ	0xFF4
 16808                           prodl	equ	0xFF3
 16809                           intcon	equ	0xFF2
 16810                           intcon2	equ	0xFF1
 16811                           intcon3	equ	0xFF0
 16812                           postinc0	equ	0xFEE
 16813                           wreg	equ	0xFE8
 16814                           postdec1	equ	0xFE5
 16815                           fsr1l	equ	0xFE1
 16816                           indf2	equ	0xFDF
 16817                           postinc2	equ	0xFDE
 16818                           postdec2	equ	0xFDD
 16819                           fsr2h	equ	0xFDA
 16820                           fsr2l	equ	0xFD9
 16821                           status	equ	0xFD8
 16822                           
 16823 ;; *************** function __doprnt *****************
 16824 ;; Defined at:
 16825 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 16826 ;; Parameters:    Size  Location     Type
 16827 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
 16828 ;;		 -> sprintf@pb(4), printf@pb(4), 
 16829 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 16830 ;;		 -> intToFloatStr@conv(4), STR_126(15), STR_125(12), STR_124(10), 
 16831 ;;		 -> STR_123(18), STR_122(10), STR_121(18), STR_120(16), 
 16832 ;;		 -> STR_119(10), STR_117(3), STR_116(14), STR_115(20), 
 16833 ;;		 -> STR_114(8), STR_113(10), STR_112(11), STR_111(9), 
 16834 ;;		 -> STR_110(3), STR_109(15), STR_108(15), STR_107(11), 
 16835 ;;		 -> STR_106(11), STR_105(18), STR_104(5), STR_103(12), 
 16836 ;;		 -> STR_102(5), STR_101(14), STR_100(19), STR_97(3), 
 16837 ;;		 -> STR_96(7), STR_95(7), STR_93(12), STR_92(26), 
 16838 ;;		 -> STR_91(20), STR_90(8), STR_87(14), STR_84(14), 
 16839 ;;		 -> STR_83(11), STR_80(10), STR_79(31), STR_76(11), 
 16840 ;;		 -> STR_75(20), STR_74(20), STR_73(21), STR_72(15), 
 16841 ;;		 -> STR_71(6), STR_70(15), STR_69(6), STR_68(20), 
 16842 ;;		 -> STR_67(15), STR_66(19), STR_65(20), STR_64(21), 
 16843 ;;		 -> STR_63(21), STR_62(18), STR_61(20), STR_60(12), 
 16844 ;;		 -> STR_59(17), STR_58(21), STR_57(16), STR_54(15), 
 16845 ;;		 -> STR_51(15), STR_48(11), STR_47(17), STR_44(9), 
 16846 ;;		 -> STR_43(19), STR_42(19), STR_41(16), STR_40(15), 
 16847 ;;		 -> STR_39(15), STR_38(20), STR_37(7), STR_35(11), 
 16848 ;;		 -> STR_26(104), STR_25(63), STR_23(18), STR_21(7), 
 16849 ;;		 -> STR_20(12), STR_18(5), STR_14(126), STR_12(18), 
 16850 ;;		 -> STR_10(12), STR_8(5), STR_4(5), STR_3(9), 
 16851 ;;		 -> STR_2(5), STR_1(5), 
 16852 ;;  ap              2   16[BANK0 ] PTR PTR void 
 16853 ;;		 -> sprintf@ap(2), printf@ap(2), 
 16854 ;; Auto vars:     Size  Location     Type
 16855 ;;  tmpval          4    0        struct .
 16856 ;;  width           2   30[BANK0 ] int 
 16857 ;;  cp              2   28[BANK0 ] PTR const unsigned char 
 16858 ;;		 -> ?_sprintf(2), ?_printf(2), STR_127(7), _doprnt@c(1), 
 16859 ;;		 -> intToFloatStr@end(4), STR_118(12), STR_99(17), STR_98(13), 
 16860 ;;		 -> STR_94(12), STR_89(5), STR_88(3), STR_86(5), 
 16861 ;;		 -> STR_85(3), STR_82(5), STR_81(3), STR_78(4), 
 16862 ;;		 -> STR_77(4), STR_56(5), STR_55(3), STR_53(5), 
 16863 ;;		 -> STR_52(3), line3(21), STR_50(5), STR_49(3), 
 16864 ;;		 -> STR_46(13), STR_45(10), line2(21), line1(21), 
 16865 ;;		 -> line4(21), STR_32(6), STR_31(3), STR_30(6), 
 16866 ;;		 -> STR_29(3), STR_28(6), STR_27(3), STR_15(12), 
 16867 ;;		 -> tel2(12), tel1(12), bufferAUX(20), NULL(0), 
 16868 ;;		 -> bufferSerial(60), 
 16869 ;;  len             2   25[BANK0 ] unsigned int 
 16870 ;;  val             2   23[BANK0 ] unsigned int 
 16871 ;;  c               1   32[BANK0 ] char 
 16872 ;;  flag            1   27[BANK0 ] unsigned char 
 16873 ;;  prec            1   22[BANK0 ] char 
 16874 ;; Return value:  Size  Location     Type
 16875 ;;                  2   12[BANK0 ] int 
 16876 ;; Registers used:
 16877 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16878 ;; Tracked objects:
 16879 ;;		On entry : 0/0
 16880 ;;		On exit  : 0/0
 16881 ;;		Unchanged: 0/0
 16882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16883 ;;      Params:         0       6       0       0       0       0       0
 16884 ;;      Locals:         0      11       0       0       0       0       0
 16885 ;;      Temps:          0       4       0       0       0       0       0
 16886 ;;      Totals:         0      21       0       0       0       0       0
 16887 ;;Total ram usage:       21 bytes
 16888 ;; Hardware stack levels used:    1
 16889 ;; Hardware stack levels required when called:    7
 16890 ;; This function calls:
 16891 ;;		Absolute function
 16892 ;;		___lwdiv
 16893 ;;		___lwmod
 16894 ;;		___wmul
 16895 ;;		_isdigit
 16896 ;;		_putch
 16897 ;; This function is called by:
 16898 ;;		_printf
 16899 ;;		_sprintf
 16900 ;; This function uses a non-reentrant model
 16901 ;;
 16902                           
 16903                           	psect	text53
 16904  000270                     __ptext53:
 16905                           	opt stack 0
 16906  000270                     __doprnt:
 16907                           	opt stack 0
 16908  000270  FFFF               	dw	65535	; assembler added errata NOP
 16909                           
 16910                           ;doprnt.c: 499: signed char c;
 16911                           ;doprnt.c: 501: int width;
 16912                           ;doprnt.c: 506: signed char prec;
 16913                           ;doprnt.c: 508: unsigned char flag;
 16914                           ;doprnt.c: 523: union {
 16915                           ;doprnt.c: 524: unsigned long vd;
 16916                           ;doprnt.c: 525: double integ;
 16917                           ;doprnt.c: 526: } tmpval;
 16918                           ;doprnt.c: 528: unsigned int val;
 16919                           ;doprnt.c: 529: unsigned len;
 16920                           ;doprnt.c: 530: const char * cp;
 16921                           ;doprnt.c: 536: while(c = *f++) {
 16922                           
 16923                           ;incstack = 0
 16924  000272  D3D7               	goto	u5440
 16925  000274  FFFF               	dw	65535	; assembler added errata NOP
 16926                           
 16927                           ;doprnt.c: 538: if(c != '%')
 16928  000276  0E25               	movlw	37
 16929  000278  0100               	movlb	0	; () banked
 16930  00027A  19A0               	xorwf	__doprnt@c& (0+255),w,b
 16931  00027C  B4D8               	btfsc	status,2,c
 16932  00027E  D037               	goto	l1104
 16933                           
 16934                           ; BSR set to: 0
 16935                           ;doprnt.c: 540: {
 16936                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 16937  000280  EE20 F002          	lfsr	2,2
 16938  000284  518C               	movf	__doprnt@pb& (0+255),w,b
 16939  000286  26D9               	addwf	fsr2l,f,c
 16940  000288  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16941  00028A  22DA               	addwfc	fsr2h,f,c
 16942  00028C  50DE               	movf	postinc2,w,c
 16943  00028E  10DE               	iorwf	postinc2,w,c
 16944  000290  B4D8               	btfsc	status,2,c
 16945  000292  D016               	goto	l1105
 16946                           
 16947                           ; BSR set to: 0
 16948  000294  EE20 F002          	lfsr	2,2
 16949  000298  518C               	movf	__doprnt@pb& (0+255),w,b
 16950  00029A  26D9               	addwf	fsr2l,f,c
 16951  00029C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16952  00029E  22DA               	addwfc	fsr2h,f,c
 16953  0002A0  D801               	call	u5008
 16954  0002A2  D3BF               	goto	u5440
 16955  0002A4                     u5008:
 16956  0002A4  FFFF               	dw	65535	; assembler added errata NOP
 16957  0002A6  0005               	push	
 16958  0002A8  6EFA               	movwf	pclath,c
 16959  0002AA  50DE               	movf	postinc2,w,c
 16960  0002AC  6EFD               	movwf	tosl,c
 16961  0002AE  50DE               	movf	postinc2,w,c
 16962  0002B0  6EFE               	movwf	tosh,c
 16963  0002B2  50F8               	movf	tblptru,w,c
 16964  0002B4  6EFF               	movwf	tosu,c
 16965  0002B6  50FA               	movf	pclath,w,c
 16966  0002B8  51A0               	movf	__doprnt@c& (0+255),w,b
 16967  0002BA  0012               	return		;indir
 16968  0002BC  FFFF               	dw	65535	; errata NOP
 16969  0002BE  D3B1               	goto	u5440
 16970  0002C0                     l1105:
 16971  0002C0  FFFF               	dw	65535	; assembler added errata NOP
 16972  0002C2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16973  0002C6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16974  0002CA  CFDE F092          	movff	postinc2,??__doprnt
 16975  0002CE  CFDD F093          	movff	postdec2,??__doprnt+1
 16976  0002D2  C092  FFD9         	movff	??__doprnt,fsr2l
 16977  0002D6  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16978  0002DA  C0A0  FFDF         	movff	__doprnt@c,indf2
 16979  0002DE  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16980  0002E2  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16981  0002E6  2ADE               	incf	postinc2,f,c
 16982  0002E8  0E00               	movlw	0
 16983  0002EA  22DD               	addwfc	postdec2,f,c
 16984                           
 16985                           ;doprnt.c: 542: continue;
 16986  0002EC  D39A               	goto	u5440
 16987  0002EE                     l1104:
 16988  0002EE  FFFF               	dw	65535	; assembler added errata NOP
 16989                           
 16990                           ;doprnt.c: 543: }
 16991                           ;doprnt.c: 546: width = 0;
 16992  0002F0  0E00               	movlw	0
 16993  0002F2  0100               	movlb	0	; () banked
 16994  0002F4  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 16995  0002F6  0E00               	movlw	0
 16996  0002F8  6F9E               	movwf	__doprnt@width& (0+255),b
 16997                           
 16998                           ;doprnt.c: 548: flag = 0;
 16999  0002FA  0E00               	movlw	0
 17000  0002FC  6F9B               	movwf	__doprnt@flag& (0+255),b
 17001                           
 17002                           ; BSR set to: 0
 17003                           ;doprnt.c: 551: switch(*f) {
 17004                           
 17005                           ;doprnt.c: 550: for(;;) {
 17006  0002FE  D005               	goto	l1108
 17007  000300  FFFF               	dw	65535	; assembler added errata NOP
 17008                           
 17009                           ;doprnt.c: 580: flag |= 0x04;
 17010                           
 17011                           ; BSR set to: 0
 17012  000302  0100               	movlb	0	; () banked
 17013  000304  859B               	bsf	__doprnt@flag& (0+255),2,b
 17014                           
 17015                           ;doprnt.c: 581: f++;
 17016  000306  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 17017  000308  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 17018  00030A                     l1108:
 17019  00030A  FFFF               	dw	65535	; assembler added errata NOP
 17020                           
 17021                           ; BSR set to: 0
 17022  00030C  C08E  FFF6         	movff	__doprnt@f,tblptrl
 17023  000310  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 17024  000314  6AF8               	clrf	tblptru,c
 17025  000316  0E05               	movlw	(high __ramtop+-1)
 17026  000318  64F7               	cpfsgt	tblptrh,c
 17027  00031A  D004               	bra	u5017
 17028  00031C  0008               	tblrd		*
 17029  00031E  FFFF               	dw	65535	; errata NOP
 17030  000320  50F5               	movf	tablat,w,c
 17031  000322  D005               	bra	u5010
 17032  000324                     u5017:
 17033  000324  CFF6 FFE9          	movff	tblptrl,fsr0l
 17034  000328  CFF7 FFEA          	movff	tblptrh,fsr0h
 17035  00032C  50EF               	movf	indf0,w,c
 17036  00032E                     u5010:
 17037                           
 17038                           ; Switch size 1, requested type "space"
 17039                           ; Number of cases is 1, Range of values is 48 to 48
 17040                           ; switch strategies available:
 17041                           ; Name         Instructions Cycles
 17042                           ; simple_byte            4     3 (average)
 17043                           ;	Chosen strategy is simple_byte
 17044  00032E  0A30               	xorlw	48	; case 48
 17045  000330  B4D8               	btfsc	status,2,c
 17046  000332  D7E6               	goto	l1109
 17047                           
 17048                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17049                           
 17050                           ;doprnt.c: 586: }
 17051                           
 17052                           ;doprnt.c: 585: break;
 17053  000334  C08E  FFF6         	movff	__doprnt@f,tblptrl
 17054  000338  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 17055  00033C  6AF8               	clrf	tblptru,c
 17056  00033E  0E05               	movlw	(high __ramtop+-1)
 17057  000340  64F7               	cpfsgt	tblptrh,c
 17058  000342  D004               	bra	u5027
 17059  000344  0008               	tblrd		*
 17060  000346  FFFF               	dw	65535	; errata NOP
 17061  000348  50F5               	movf	tablat,w,c
 17062  00034A  D005               	bra	u5020
 17063  00034C                     u5027:
 17064  00034C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17065  000350  CFF7 FFEA          	movff	tblptrh,fsr0h
 17066  000354  50EF               	movf	indf0,w,c
 17067  000356                     u5020:
 17068  000356  EC7B  F036         	call	_isdigit
 17069  00035A  A0D8               	btfss	status,0,c
 17070  00035C  D16B               	goto	l1116
 17071                           
 17072                           ;doprnt.c: 598: width = 0;
 17073  00035E  0E00               	movlw	0
 17074  000360  0100               	movlb	0	; () banked
 17075  000362  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 17076  000364  0E00               	movlw	0
 17077  000366  6F9E               	movwf	__doprnt@width& (0+255),b
 17078  000368  FFFF               	dw	65535	; assembler added errata NOP
 17079                           
 17080                           ;doprnt.c: 600: width *= 10;
 17081                           
 17082                           ; BSR set to: 0
 17083  00036A  C09E  F080         	movff	__doprnt@width,___wmul@multiplier
 17084  00036E  C09F  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
 17085  000372  0E00               	movlw	0
 17086  000374  0100               	movlb	0	; () banked
 17087  000376  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17088  000378  0E0A               	movlw	10
 17089  00037A  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17090  00037C  ECA5  F036         	call	___wmul	;wreg free
 17091  000380  C080  F09E         	movff	?___wmul,__doprnt@width
 17092  000384  C081  F09F         	movff	?___wmul+1,__doprnt@width+1
 17093                           
 17094                           ;doprnt.c: 601: width += *f++ - '0';
 17095  000388  0ED0               	movlw	208
 17096  00038A  0100               	movlb	0	; () banked
 17097  00038C  6F92               	movwf	??__doprnt& (0+255),b
 17098  00038E  0EFF               	movlw	255
 17099  000390  6F93               	movwf	(??__doprnt+1)& (0+255),b
 17100  000392  C08E  FFF6         	movff	__doprnt@f,tblptrl
 17101  000396  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 17102  00039A  6AF8               	clrf	tblptru,c
 17103  00039C  0E05               	movlw	(high __ramtop+-1)
 17104  00039E  64F7               	cpfsgt	tblptrh,c
 17105  0003A0  D004               	bra	u5047
 17106  0003A2  0008               	tblrd		*
 17107  0003A4  FFFF               	dw	65535	; errata NOP
 17108  0003A6  50F5               	movf	tablat,w,c
 17109  0003A8  D005               	bra	u5040
 17110  0003AA                     u5047:
 17111  0003AA  CFF6 FFE9          	movff	tblptrl,fsr0l
 17112  0003AE  CFF7 FFEA          	movff	tblptrh,fsr0h
 17113  0003B2  50EF               	movf	indf0,w,c
 17114  0003B4                     u5040:
 17115  0003B4  0100               	movlb	0	; () banked
 17116  0003B6  6F94               	movwf	(??__doprnt+2)& (0+255),b
 17117  0003B8  6B95               	clrf	(??__doprnt+3)& (0+255),b
 17118  0003BA  5192               	movf	??__doprnt& (0+255),w,b
 17119  0003BC  2794               	addwf	(??__doprnt+2)& (0+255),f,b
 17120  0003BE  5193               	movf	(??__doprnt+1)& (0+255),w,b
 17121  0003C0  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
 17122  0003C2  5194               	movf	(??__doprnt+2)& (0+255),w,b
 17123  0003C4  279E               	addwf	__doprnt@width& (0+255),f,b
 17124  0003C6  5195               	movf	(??__doprnt+3)& (0+255),w,b
 17125  0003C8  239F               	addwfc	(__doprnt@width+1)& (0+255),f,b
 17126                           
 17127                           ; BSR set to: 0
 17128  0003CA  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 17129  0003CC  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 17130                           
 17131                           ; BSR set to: 0
 17132                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17133  0003CE  C08E  FFF6         	movff	__doprnt@f,tblptrl
 17134  0003D2  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 17135  0003D6  6AF8               	clrf	tblptru,c
 17136  0003D8  0E05               	movlw	(high __ramtop+-1)
 17137  0003DA  64F7               	cpfsgt	tblptrh,c
 17138  0003DC  D004               	bra	u5057
 17139  0003DE  0008               	tblrd		*
 17140  0003E0  FFFF               	dw	65535	; errata NOP
 17141  0003E2  50F5               	movf	tablat,w,c
 17142  0003E4  D005               	bra	u5050
 17143  0003E6                     u5057:
 17144  0003E6  CFF6 FFE9          	movff	tblptrl,fsr0l
 17145  0003EA  CFF7 FFEA          	movff	tblptrh,fsr0h
 17146  0003EE  50EF               	movf	indf0,w,c
 17147  0003F0                     u5050:
 17148  0003F0  EC7B  F036         	call	_isdigit
 17149  0003F4  A0D8               	btfss	status,0,c
 17150  0003F6  D11E               	goto	l1116
 17151  0003F8  D7B7               	goto	l1114
 17152  0003FA  FFFF               	dw	65535	; assembler added errata NOP
 17153                           
 17154                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17155  0003FC  C090  FFD9         	movff	__doprnt@ap,fsr2l
 17156  000400  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 17157  000404  CFDF F092          	movff	indf2,??__doprnt
 17158  000408  0E02               	movlw	2
 17159  00040A  26DE               	addwf	postinc2,f,c
 17160  00040C  CFDF F093          	movff	indf2,??__doprnt+1
 17161  000410  0E00               	movlw	0
 17162  000412  22DD               	addwfc	postdec2,f,c
 17163  000414  C092  FFD9         	movff	??__doprnt,fsr2l
 17164  000418  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17165  00041C  CFDE F09C          	movff	postinc2,__doprnt@cp
 17166  000420  CFDD F09D          	movff	postdec2,__doprnt@cp+1
 17167                           
 17168                           ;doprnt.c: 740: if(!cp)
 17169  000424  0100               	movlb	0	; () banked
 17170  000426  519C               	movf	__doprnt@cp& (0+255),w,b
 17171  000428  119D               	iorwf	(__doprnt@cp+1)& (0+255),w,b
 17172  00042A  A4D8               	btfss	status,2,c
 17173  00042C  D004               	goto	l1123
 17174                           
 17175                           ; BSR set to: 0
 17176                           ;doprnt.c: 741: cp = "(null)";
 17177  00042E  0EA2               	movlw	low STR_127
 17178  000430  6F9C               	movwf	__doprnt@cp& (0+255),b
 17179  000432  0E7F               	movlw	high STR_127
 17180  000434  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 17181  000436                     l1123:
 17182  000436  FFFF               	dw	65535	; assembler added errata NOP
 17183                           
 17184                           ; BSR set to: 0
 17185                           ;doprnt.c: 745: len = 0;
 17186                           
 17187                           ; BSR set to: 0
 17188  000438  0E00               	movlw	0
 17189  00043A  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 17190  00043C  0E00               	movlw	0
 17191  00043E  6F99               	movwf	__doprnt@len& (0+255),b
 17192                           
 17193                           ;doprnt.c: 746: while(cp[len])
 17194  000440  D004               	goto	l1124
 17195  000442  FFFF               	dw	65535	; assembler added errata NOP
 17196                           
 17197                           ;doprnt.c: 747: len++;
 17198                           
 17199                           ; BSR set to: 0
 17200  000444  0100               	movlb	0	; () banked
 17201  000446  4B99               	infsnz	__doprnt@len& (0+255),f,b
 17202  000448  2B9A               	incf	(__doprnt@len+1)& (0+255),f,b
 17203  00044A                     l1124:
 17204  00044A  FFFF               	dw	65535	; assembler added errata NOP
 17205                           
 17206                           ; BSR set to: 0
 17207                           
 17208                           ; BSR set to: 0
 17209  00044C  5199               	movf	__doprnt@len& (0+255),w,b
 17210  00044E  259C               	addwf	__doprnt@cp& (0+255),w,b
 17211  000450  6F92               	movwf	??__doprnt& (0+255),b
 17212  000452  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 17213  000454  219D               	addwfc	(__doprnt@cp+1)& (0+255),w,b
 17214  000456  6F93               	movwf	(??__doprnt+1)& (0+255),b
 17215  000458  C092  FFF6         	movff	??__doprnt,tblptrl
 17216  00045C  C093  FFF7         	movff	??__doprnt+1,tblptrh
 17217  000460  6AF8               	clrf	tblptru,c
 17218  000462  0E05               	movlw	(high __ramtop+-1)
 17219  000464  64F7               	cpfsgt	tblptrh,c
 17220  000466  D004               	bra	u5087
 17221  000468  0008               	tblrd		*
 17222  00046A  FFFF               	dw	65535	; errata NOP
 17223  00046C  50F5               	movf	tablat,w,c
 17224  00046E  D005               	bra	u5080
 17225  000470                     u5087:
 17226  000470  CFF6 FFE9          	movff	tblptrl,fsr0l
 17227  000474  CFF7 FFEA          	movff	tblptrh,fsr0h
 17228  000478  50EF               	movf	indf0,w,c
 17229  00047A                     u5080:
 17230  00047A  0900               	iorlw	0
 17231  00047C  A4D8               	btfss	status,2,c
 17232  00047E  D7E1               	goto	l1125
 17233  000480                     u5090:
 17234  000480  FFFF               	dw	65535	; assembler added errata NOP
 17235                           
 17236                           ;doprnt.c: 757: if(width > len)
 17237                           
 17238                           ;doprnt.c: 750: dostring:
 17239  000482  0100               	movlb	0	; () banked
 17240  000484  519E               	movf	__doprnt@width& (0+255),w,b
 17241  000486  5D99               	subwf	__doprnt@len& (0+255),w,b
 17242  000488  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 17243  00048A  599A               	subwfb	(__doprnt@len+1)& (0+255),w,b
 17244  00048C  B0D8               	btfsc	status,0,c
 17245  00048E  D005               	goto	l1128
 17246                           
 17247                           ; BSR set to: 0
 17248                           ;doprnt.c: 758: width -= len;
 17249  000490  5199               	movf	__doprnt@len& (0+255),w,b
 17250  000492  5F9E               	subwf	__doprnt@width& (0+255),f,b
 17251  000494  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 17252  000496  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 17253  000498  D03D               	goto	l1133
 17254  00049A                     l1128:
 17255  00049A  FFFF               	dw	65535	; assembler added errata NOP
 17256                           
 17257                           ; BSR set to: 0
 17258                           ;doprnt.c: 759: else
 17259                           ;doprnt.c: 760: width = 0;
 17260                           
 17261                           ; BSR set to: 0
 17262  00049C  0E00               	movlw	0
 17263  00049E  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 17264  0004A0  0E00               	movlw	0
 17265  0004A2  6F9E               	movwf	__doprnt@width& (0+255),b
 17266                           
 17267                           ; BSR set to: 0
 17268                           ;doprnt.c: 764: while(width--)
 17269  0004A4  D037               	goto	l1133
 17270  0004A6  FFFF               	dw	65535	; assembler added errata NOP
 17271  0004A8                     l5345:
 17272                           
 17273                           ; BSR set to: 0
 17274                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 17275  0004A8  EE20 F002          	lfsr	2,2
 17276  0004AC  518C               	movf	__doprnt@pb& (0+255),w,b
 17277  0004AE  26D9               	addwf	fsr2l,f,c
 17278  0004B0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17279  0004B2  22DA               	addwfc	fsr2h,f,c
 17280  0004B4  50DE               	movf	postinc2,w,c
 17281  0004B6  10DE               	iorwf	postinc2,w,c
 17282  0004B8  B4D8               	btfsc	status,2,c
 17283  0004BA  D016               	goto	l1132
 17284                           
 17285                           ; BSR set to: 0
 17286  0004BC  EE20 F002          	lfsr	2,2
 17287  0004C0  518C               	movf	__doprnt@pb& (0+255),w,b
 17288  0004C2  26D9               	addwf	fsr2l,f,c
 17289  0004C4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17290  0004C6  22DA               	addwfc	fsr2h,f,c
 17291  0004C8  D801               	call	u5128
 17292  0004CA  D024               	goto	l1133
 17293  0004CC                     u5128:
 17294  0004CC  FFFF               	dw	65535	; assembler added errata NOP
 17295  0004CE  0005               	push	
 17296  0004D0  6EFA               	movwf	pclath,c
 17297  0004D2  50DE               	movf	postinc2,w,c
 17298  0004D4  6EFD               	movwf	tosl,c
 17299  0004D6  50DE               	movf	postinc2,w,c
 17300  0004D8  6EFE               	movwf	tosh,c
 17301  0004DA  50F8               	movf	tblptru,w,c
 17302  0004DC  6EFF               	movwf	tosu,c
 17303  0004DE  50FA               	movf	pclath,w,c
 17304  0004E0  0E20               	movlw	32
 17305  0004E2  0012               	return		;indir
 17306  0004E4  FFFF               	dw	65535	; errata NOP
 17307  0004E6  D016               	goto	l1133
 17308  0004E8                     l1132:
 17309  0004E8  FFFF               	dw	65535	; assembler added errata NOP
 17310  0004EA  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17311  0004EE  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17312  0004F2  CFDE F092          	movff	postinc2,??__doprnt
 17313  0004F6  CFDD F093          	movff	postdec2,??__doprnt+1
 17314  0004FA  C092  FFD9         	movff	??__doprnt,fsr2l
 17315  0004FE  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17316  000502  0E20               	movlw	32
 17317  000504  6EDF               	movwf	indf2,c
 17318  000506  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17319  00050A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17320  00050E  2ADE               	incf	postinc2,f,c
 17321  000510  0E00               	movlw	0
 17322  000512  22DD               	addwfc	postdec2,f,c
 17323  000514                     l1133:
 17324  000514  FFFF               	dw	65535	; assembler added errata NOP
 17325  000516  0100               	movlb	0	; () banked
 17326  000518  079E               	decf	__doprnt@width& (0+255),f,b
 17327  00051A  A0D8               	btfss	status,0,c
 17328  00051C  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 17329  00051E  299E               	incf	__doprnt@width& (0+255),w,b
 17330  000520  E1C3               	bnz	l5345
 17331  000522  299F               	incf	(__doprnt@width+1)& (0+255),w,b
 17332  000524  B4D8               	btfsc	status,2,c
 17333  000526  D05F               	goto	l1138
 17334  000528  D7BE               	goto	l1131
 17335  00052A  FFFF               	dw	65535	; assembler added errata NOP
 17336  00052C                     l5355:
 17337                           
 17338                           ; BSR set to: 0
 17339                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 17340  00052C  EE20 F002          	lfsr	2,2
 17341  000530  518C               	movf	__doprnt@pb& (0+255),w,b
 17342  000532  26D9               	addwf	fsr2l,f,c
 17343  000534  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17344  000536  22DA               	addwfc	fsr2h,f,c
 17345  000538  50DE               	movf	postinc2,w,c
 17346  00053A  10DE               	iorwf	postinc2,w,c
 17347  00053C  B4D8               	btfsc	status,2,c
 17348  00053E  D02A               	goto	l1137
 17349                           
 17350                           ; BSR set to: 0
 17351  000540  EE20 F002          	lfsr	2,2
 17352  000544  518C               	movf	__doprnt@pb& (0+255),w,b
 17353  000546  26D9               	addwf	fsr2l,f,c
 17354  000548  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17355  00054A  22DA               	addwfc	fsr2h,f,c
 17356  00054C  D801               	call	u5158
 17357  00054E  D01D               	goto	u5159
 17358  000550                     u5158:
 17359  000550  FFFF               	dw	65535	; assembler added errata NOP
 17360  000552  0005               	push	
 17361  000554  6EFA               	movwf	pclath,c
 17362  000556  50DE               	movf	postinc2,w,c
 17363  000558  6EFD               	movwf	tosl,c
 17364  00055A  50DE               	movf	postinc2,w,c
 17365  00055C  6EFE               	movwf	tosh,c
 17366  00055E  50F8               	movf	tblptru,w,c
 17367  000560  6EFF               	movwf	tosu,c
 17368  000562  50FA               	movf	pclath,w,c
 17369  000564  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 17370  000568  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 17371  00056C  6AF8               	clrf	tblptru,c
 17372  00056E  0E05               	movlw	(high __ramtop+-1)
 17373  000570  64F7               	cpfsgt	tblptrh,c
 17374  000572  D004               	bra	u5167
 17375  000574  0008               	tblrd		*
 17376  000576  FFFF               	dw	65535	; errata NOP
 17377  000578  50F5               	movf	tablat,w,c
 17378  00057A  D005               	bra	u5160
 17379  00057C                     u5167:
 17380  00057C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17381  000580  CFF7 FFEA          	movff	tblptrh,fsr0h
 17382  000584  50EF               	movf	indf0,w,c
 17383  000586                     u5160:
 17384  000586  0012               	return		;indir
 17385  000588  FFFF               	dw	65535	; errata NOP
 17386  00058A                     u5159:
 17387  00058A  FFFF               	dw	65535	; assembler added errata NOP
 17388  00058C  0100               	movlb	0	; () banked
 17389  00058E  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 17390  000590  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 17391  000592  D029               	goto	l1138
 17392  000594                     l1137:
 17393  000594  FFFF               	dw	65535	; assembler added errata NOP
 17394                           
 17395                           ; BSR set to: 0
 17396                           
 17397                           ; BSR set to: 0
 17398  000596  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 17399  00059A  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 17400  00059E  6AF8               	clrf	tblptru,c
 17401  0005A0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17402  0005A4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17403  0005A8  CFDE F092          	movff	postinc2,??__doprnt
 17404  0005AC  CFDD F093          	movff	postdec2,??__doprnt+1
 17405  0005B0  C092  FFD9         	movff	??__doprnt,fsr2l
 17406  0005B4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17407  0005B8  0E05               	movlw	(high __ramtop+-1)
 17408  0005BA  64F7               	cpfsgt	tblptrh,c
 17409  0005BC  D004               	bra	u5177
 17410  0005BE  0008               	tblrd		*
 17411  0005C0  FFFF               	dw	65535	; errata NOP
 17412  0005C2  50F5               	movf	tablat,w,c
 17413  0005C4  D005               	bra	u5170
 17414  0005C6                     u5177:
 17415  0005C6  CFF6 FFE9          	movff	tblptrl,fsr0l
 17416  0005CA  CFF7 FFEA          	movff	tblptrh,fsr0h
 17417  0005CE  50EF               	movf	indf0,w,c
 17418  0005D0                     u5170:
 17419  0005D0  6EDF               	movwf	indf2,c
 17420  0005D2  0100               	movlb	0	; () banked
 17421  0005D4  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 17422  0005D6  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 17423                           
 17424                           ; BSR set to: 0
 17425  0005D8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17426  0005DC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17427  0005E0  2ADE               	incf	postinc2,f,c
 17428  0005E2  0E00               	movlw	0
 17429  0005E4  22DD               	addwfc	postdec2,f,c
 17430  0005E6                     l1138:
 17431  0005E6  FFFF               	dw	65535	; assembler added errata NOP
 17432                           
 17433                           ; BSR set to: 0
 17434                           
 17435                           ; BSR set to: 0
 17436                           
 17437                           ; BSR set to: 0
 17438  0005E8  0799               	decf	__doprnt@len& (0+255),f,b
 17439  0005EA  A0D8               	btfss	status,0,c
 17440  0005EC  079A               	decf	(__doprnt@len+1)& (0+255),f,b
 17441  0005EE  2999               	incf	__doprnt@len& (0+255),w,b
 17442  0005F0  E19D               	bnz	l5355
 17443  0005F2  299A               	incf	(__doprnt@len+1)& (0+255),w,b
 17444  0005F4  B4D8               	btfsc	status,2,c
 17445  0005F6  D215               	goto	u5440
 17446  0005F8  D798               	goto	l1136
 17447  0005FA  FFFF               	dw	65535	; assembler added errata NOP
 17448                           
 17449                           ; BSR set to: 0
 17450                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 17451                           
 17452                           ; BSR set to: 0
 17453  0005FC  C090  FFD9         	movff	__doprnt@ap,fsr2l
 17454  000600  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 17455  000604  CFDF F092          	movff	indf2,??__doprnt
 17456  000608  0E02               	movlw	2
 17457  00060A  26DE               	addwf	postinc2,f,c
 17458  00060C  CFDF F093          	movff	indf2,??__doprnt+1
 17459  000610  0E00               	movlw	0
 17460  000612  22DD               	addwfc	postdec2,f,c
 17461  000614  C092  FFD9         	movff	??__doprnt,fsr2l
 17462  000618  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17463  00061C  50DF               	movf	indf2,w,c
 17464  00061E  6FA0               	movwf	__doprnt@c& (0+255),b
 17465  000620  FFFF               	dw	65535	; assembler added errata NOP
 17466                           
 17467                           ; BSR set to: 0
 17468                           ;doprnt.c: 805: cp = (char *)&c;
 17469                           
 17470                           ; BSR set to: 0
 17471  000622  0EA0               	movlw	low __doprnt@c
 17472  000624  6F9C               	movwf	__doprnt@cp& (0+255),b
 17473  000626  0E00               	movlw	high __doprnt@c
 17474  000628  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 17475                           
 17476                           ; BSR set to: 0
 17477                           ;doprnt.c: 806: len = 1;
 17478  00062A  0E00               	movlw	0
 17479  00062C  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 17480  00062E  0E01               	movlw	1
 17481  000630  6F99               	movwf	__doprnt@len& (0+255),b
 17482                           
 17483                           ;doprnt.c: 807: goto dostring;
 17484  000632  D726               	goto	u5090
 17485  000634                     l1116:
 17486  000634  FFFF               	dw	65535	; assembler added errata NOP
 17487                           
 17488                           ; BSR set to: 0
 17489  000636  0100               	movlb	0	; () banked
 17490  000638  518E               	movf	__doprnt@f& (0+255),w,b
 17491  00063A  6F92               	movwf	??__doprnt& (0+255),b
 17492  00063C  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 17493  00063E  6F93               	movwf	(??__doprnt+1)& (0+255),b
 17494  000640  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 17495  000642  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 17496  000644  C092  FFF6         	movff	??__doprnt,tblptrl
 17497  000648  C093  FFF7         	movff	??__doprnt+1,tblptrh
 17498  00064C  6AF8               	clrf	tblptru,c
 17499  00064E  0E05               	movlw	(high __ramtop+-1)
 17500  000650  64F7               	cpfsgt	tblptrh,c
 17501  000652  D004               	bra	u5197
 17502  000654  0008               	tblrd		*
 17503  000656  FFFF               	dw	65535	; errata NOP
 17504  000658  50F5               	movf	tablat,w,c
 17505  00065A  D005               	bra	u5190
 17506  00065C                     u5197:
 17507  00065C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17508  000660  CFF7 FFEA          	movff	tblptrh,fsr0h
 17509  000664  50EF               	movf	indf0,w,c
 17510  000666                     u5190:
 17511  000666  0100               	movlb	0	; () banked
 17512  000668  6FA0               	movwf	__doprnt@c& (0+255),b
 17513  00066A  51A0               	movf	__doprnt@c& (0+255),w,b
 17514                           
 17515                           ; Switch size 1, requested type "space"
 17516                           ; Number of cases is 5, Range of values is 0 to 115
 17517                           ; switch strategies available:
 17518                           ; Name         Instructions Cycles
 17519                           ; simple_byte           16     9 (average)
 17520                           ;	Chosen strategy is simple_byte
 17521  00066C  0A00               	xorlw	0	; case 0
 17522  00066E  B4D8               	btfsc	status,2,c
 17523  000670  D1F6               	goto	u5460
 17524  000672  0A63               	xorlw	99	; case 99
 17525  000674  B4D8               	btfsc	status,2,c
 17526  000676  D7C1               	goto	l1140
 17527  000678  0A07               	xorlw	7	; case 100
 17528  00067A  B4D8               	btfsc	status,2,c
 17529  00067C  D007               	goto	l1121
 17530  00067E  0A0D               	xorlw	13	; case 105
 17531  000680  B4D8               	btfsc	status,2,c
 17532  000682  D004               	goto	l1121
 17533  000684  0A1A               	xorlw	26	; case 115
 17534  000686  B4D8               	btfsc	status,2,c
 17535  000688  D6B8               	goto	l1122
 17536  00068A  D7CA               	goto	l1141
 17537  00068C                     l1121:
 17538  00068C  FFFF               	dw	65535	; assembler added errata NOP
 17539                           
 17540                           ;doprnt.c: 1253: {
 17541                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17542                           
 17543                           ; BSR set to: 0
 17544  00068E  C090  FFD9         	movff	__doprnt@ap,fsr2l
 17545  000692  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 17546  000696  CFDF F092          	movff	indf2,??__doprnt
 17547  00069A  0E02               	movlw	2
 17548  00069C  26DE               	addwf	postinc2,f,c
 17549  00069E  CFDF F093          	movff	indf2,??__doprnt+1
 17550  0006A2  0E00               	movlw	0
 17551  0006A4  22DD               	addwfc	postdec2,f,c
 17552  0006A6  C092  FFD9         	movff	??__doprnt,fsr2l
 17553  0006AA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17554  0006AE  CFDE F097          	movff	postinc2,__doprnt@val
 17555  0006B2  CFDD F098          	movff	postdec2,__doprnt@val+1
 17556                           
 17557                           ;doprnt.c: 1261: if((int)val < 0) {
 17558  0006B6  0100               	movlb	0	; () banked
 17559  0006B8  AF98               	btfss	(__doprnt@val+1)& (0+255),7,b
 17560  0006BA  D006               	goto	l1142
 17561                           
 17562                           ; BSR set to: 0
 17563                           ;doprnt.c: 1262: flag |= 0x03;
 17564  0006BC  0E03               	movlw	3
 17565  0006BE  139B               	iorwf	__doprnt@flag& (0+255),f,b
 17566                           
 17567                           ; BSR set to: 0
 17568                           ;doprnt.c: 1263: val = -val;
 17569  0006C0  6D97               	negf	__doprnt@val& (0+255),b
 17570  0006C2  1F98               	comf	(__doprnt@val+1)& (0+255),f,b
 17571  0006C4  B0D8               	btfsc	status,0,c
 17572  0006C6  2B98               	incf	(__doprnt@val+1)& (0+255),f,b
 17573  0006C8                     l1142:
 17574  0006C8  FFFF               	dw	65535	; assembler added errata NOP
 17575                           
 17576                           ; BSR set to: 0
 17577                           ;doprnt.c: 1264: }
 17578                           ;doprnt.c: 1266: }
 17579                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17580                           
 17581                           ; BSR set to: 0
 17582  0006CA  0E01               	movlw	1
 17583  0006CC  6FA0               	movwf	__doprnt@c& (0+255),b
 17584  0006CE                     l5389:
 17585  0006CE  FFFF               	dw	65535	; assembler added errata NOP
 17586                           
 17587                           ; BSR set to: 0
 17588  0006D0  0E05               	movlw	5
 17589  0006D2  19A0               	xorwf	__doprnt@c& (0+255),w,b
 17590  0006D4  B4D8               	btfsc	status,2,c
 17591  0006D6  D014               	goto	u5230
 17592                           
 17593                           ; BSR set to: 0
 17594                           ;doprnt.c: 1306: if(val < dpowers[c])
 17595                           
 17596                           ; BSR set to: 0
 17597                           
 17598                           ; BSR set to: 0
 17599  0006D8  51A0               	movf	__doprnt@c& (0+255),w,b
 17600  0006DA  0D02               	mullw	2
 17601  0006DC  0EA1               	movlw	low _dpowers
 17602  0006DE  24F3               	addwf	prodl,w,c
 17603  0006E0  6EF6               	movwf	tblptrl,c
 17604  0006E2  0E7A               	movlw	high _dpowers
 17605  0006E4  20F4               	addwfc	prodh,w,c
 17606  0006E6  6EF7               	movwf	tblptrh,c
 17607  0006E8                     	if	0	;There are less than 3 active tblptr bytes
 17608  0006E8                     	endif
 17609  0006E8  0009               	tblrd		*+
 17610  0006EA  FFFF               	dw	65535	; errata NOP
 17611  0006EC  50F5               	movf	tablat,w,c
 17612  0006EE  5D97               	subwf	__doprnt@val& (0+255),w,b
 17613  0006F0  0009               	tblrd		*+
 17614  0006F2  FFFF               	dw	65535	; errata NOP
 17615  0006F4  50F5               	movf	tablat,w,c
 17616  0006F6  5998               	subwfb	(__doprnt@val+1)& (0+255),w,b
 17617  0006F8  A0D8               	btfss	status,0,c
 17618  0006FA  D002               	goto	u5230
 17619                           
 17620                           ; BSR set to: 0
 17621                           
 17622                           ; BSR set to: 0
 17623                           
 17624                           ; BSR set to: 0
 17625                           ;doprnt.c: 1307: break;
 17626  0006FC  2BA0               	incf	__doprnt@c& (0+255),f,b
 17627  0006FE  D7E7               	goto	l5389
 17628  000700                     u5230:
 17629  000700  FFFF               	dw	65535	; assembler added errata NOP
 17630                           
 17631                           ; BSR set to: 0
 17632                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17633                           
 17634                           ; BSR set to: 0
 17635  000702  519E               	movf	__doprnt@width& (0+255),w,b
 17636  000704  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 17637  000706  B4D8               	btfsc	status,2,c
 17638  000708  D009               	goto	l1146
 17639                           
 17640                           ; BSR set to: 0
 17641  00070A  C09B  F092         	movff	__doprnt@flag,??__doprnt
 17642  00070E  0E03               	movlw	3
 17643  000710  1792               	andwf	??__doprnt& (0+255),f,b
 17644  000712  B4D8               	btfsc	status,2,c
 17645  000714  D003               	goto	l1146
 17646                           
 17647                           ; BSR set to: 0
 17648                           ;doprnt.c: 1346: width--;
 17649  000716  079E               	decf	__doprnt@width& (0+255),f,b
 17650  000718  A0D8               	btfss	status,0,c
 17651  00071A  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 17652  00071C                     l1146:
 17653  00071C  FFFF               	dw	65535	; assembler added errata NOP
 17654                           
 17655                           ; BSR set to: 0
 17656                           ;doprnt.c: 1381: if(width > c)
 17657                           
 17658                           ; BSR set to: 0
 17659  00071E  0E80               	movlw	128
 17660  000720  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 17661  000722  0E7F               	movlw	127
 17662  000724  6F92               	movwf	??__doprnt& (0+255),b
 17663  000726  519E               	movf	__doprnt@width& (0+255),w,b
 17664  000728  5DA0               	subwf	__doprnt@c& (0+255),w,b
 17665  00072A  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 17666  00072C  0A80               	xorlw	128
 17667  00072E  5992               	subwfb	??__doprnt& (0+255),w,b
 17668  000730  B0D8               	btfsc	status,0,c
 17669  000732  D007               	goto	l1147
 17670                           
 17671                           ; BSR set to: 0
 17672                           ;doprnt.c: 1382: width -= c;
 17673  000734  51A0               	movf	__doprnt@c& (0+255),w,b
 17674  000736  5F9E               	subwf	__doprnt@width& (0+255),f,b
 17675  000738  0E00               	movlw	0
 17676  00073A  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 17677  00073C  0EFF               	movlw	255
 17678  00073E  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 17679  000740  D005               	goto	l1148
 17680  000742                     l1147:
 17681  000742  FFFF               	dw	65535	; assembler added errata NOP
 17682                           
 17683                           ; BSR set to: 0
 17684                           ;doprnt.c: 1383: else
 17685                           ;doprnt.c: 1384: width = 0;
 17686                           
 17687                           ; BSR set to: 0
 17688  000744  0E00               	movlw	0
 17689  000746  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 17690  000748  0E00               	movlw	0
 17691  00074A  6F9E               	movwf	__doprnt@width& (0+255),b
 17692  00074C                     l1148:
 17693  00074C  FFFF               	dw	65535	; assembler added errata NOP
 17694                           
 17695                           ; BSR set to: 0
 17696                           ;doprnt.c: 1387: if(flag & 0x04) {
 17697                           
 17698                           ; BSR set to: 0
 17699  00074E  A59B               	btfss	__doprnt@flag& (0+255),2,b
 17700  000750  D07F               	goto	l1149
 17701                           
 17702                           ; BSR set to: 0
 17703                           ;doprnt.c: 1392: if(flag & 0x03)
 17704  000752  C09B  F092         	movff	__doprnt@flag,??__doprnt
 17705  000756  0E03               	movlw	3
 17706  000758  1792               	andwf	??__doprnt& (0+255),f,b
 17707  00075A  B4D8               	btfsc	status,2,c
 17708  00075C  D036               	goto	l1152
 17709                           
 17710                           ; BSR set to: 0
 17711                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 17712  00075E  EE20 F002          	lfsr	2,2
 17713  000762  518C               	movf	__doprnt@pb& (0+255),w,b
 17714  000764  26D9               	addwf	fsr2l,f,c
 17715  000766  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17716  000768  22DA               	addwfc	fsr2h,f,c
 17717  00076A  50DE               	movf	postinc2,w,c
 17718  00076C  10DE               	iorwf	postinc2,w,c
 17719  00076E  B4D8               	btfsc	status,2,c
 17720  000770  D016               	goto	l1151
 17721                           
 17722                           ; BSR set to: 0
 17723  000772  EE20 F002          	lfsr	2,2
 17724  000776  518C               	movf	__doprnt@pb& (0+255),w,b
 17725  000778  26D9               	addwf	fsr2l,f,c
 17726  00077A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17727  00077C  22DA               	addwfc	fsr2h,f,c
 17728  00077E  D801               	call	u5308
 17729  000780  D024               	goto	l1152
 17730  000782                     u5308:
 17731  000782  FFFF               	dw	65535	; assembler added errata NOP
 17732  000784  0005               	push	
 17733  000786  6EFA               	movwf	pclath,c
 17734  000788  50DE               	movf	postinc2,w,c
 17735  00078A  6EFD               	movwf	tosl,c
 17736  00078C  50DE               	movf	postinc2,w,c
 17737  00078E  6EFE               	movwf	tosh,c
 17738  000790  50F8               	movf	tblptru,w,c
 17739  000792  6EFF               	movwf	tosu,c
 17740  000794  50FA               	movf	pclath,w,c
 17741  000796  0E2D               	movlw	45
 17742  000798  0012               	return		;indir
 17743  00079A  FFFF               	dw	65535	; errata NOP
 17744  00079C  D016               	goto	l1152
 17745  00079E                     l1151:
 17746  00079E  FFFF               	dw	65535	; assembler added errata NOP
 17747  0007A0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17748  0007A4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17749  0007A8  CFDE F092          	movff	postinc2,??__doprnt
 17750  0007AC  CFDD F093          	movff	postdec2,??__doprnt+1
 17751  0007B0  C092  FFD9         	movff	??__doprnt,fsr2l
 17752  0007B4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17753  0007B8  0E2D               	movlw	45
 17754  0007BA  6EDF               	movwf	indf2,c
 17755  0007BC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17756  0007C0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17757  0007C4  2ADE               	incf	postinc2,f,c
 17758  0007C6  0E00               	movlw	0
 17759  0007C8  22DD               	addwfc	postdec2,f,c
 17760  0007CA                     l1152:
 17761  0007CA  FFFF               	dw	65535	; assembler added errata NOP
 17762                           
 17763                           ;doprnt.c: 1415: if(width)
 17764  0007CC  0100               	movlb	0	; () banked
 17765  0007CE  FFFF               	dw	65535	; assembler added errata NOP
 17766  0007D0  519E               	movf	__doprnt@width& (0+255),w,b
 17767  0007D2  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 17768  0007D4  B4D8               	btfsc	status,2,c
 17769  0007D6  D0BE               	goto	l1166
 17770                           
 17771                           ; BSR set to: 0
 17772                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 17773                           
 17774                           ; BSR set to: 0
 17775                           
 17776                           ;doprnt.c: 1416: do
 17777  0007D8  EE20 F002          	lfsr	2,2
 17778  0007DC  518C               	movf	__doprnt@pb& (0+255),w,b
 17779  0007DE  26D9               	addwf	fsr2l,f,c
 17780  0007E0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17781  0007E2  22DA               	addwfc	fsr2h,f,c
 17782  0007E4  50DE               	movf	postinc2,w,c
 17783  0007E6  10DE               	iorwf	postinc2,w,c
 17784  0007E8  B4D8               	btfsc	status,2,c
 17785  0007EA  D016               	goto	l1155
 17786                           
 17787                           ; BSR set to: 0
 17788  0007EC  EE20 F002          	lfsr	2,2
 17789  0007F0  518C               	movf	__doprnt@pb& (0+255),w,b
 17790  0007F2  26D9               	addwf	fsr2l,f,c
 17791  0007F4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17792  0007F6  22DA               	addwfc	fsr2h,f,c
 17793  0007F8  D801               	call	u5338
 17794  0007FA  D024               	goto	l1156
 17795  0007FC                     u5338:
 17796  0007FC  FFFF               	dw	65535	; assembler added errata NOP
 17797  0007FE  0005               	push	
 17798  000800  6EFA               	movwf	pclath,c
 17799  000802  50DE               	movf	postinc2,w,c
 17800  000804  6EFD               	movwf	tosl,c
 17801  000806  50DE               	movf	postinc2,w,c
 17802  000808  6EFE               	movwf	tosh,c
 17803  00080A  50F8               	movf	tblptru,w,c
 17804  00080C  6EFF               	movwf	tosu,c
 17805  00080E  50FA               	movf	pclath,w,c
 17806  000810  0E30               	movlw	48
 17807  000812  0012               	return		;indir
 17808  000814  FFFF               	dw	65535	; errata NOP
 17809  000816  D016               	goto	l1156
 17810  000818                     l1155:
 17811  000818  FFFF               	dw	65535	; assembler added errata NOP
 17812  00081A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17813  00081E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17814  000822  CFDE F092          	movff	postinc2,??__doprnt
 17815  000826  CFDD F093          	movff	postdec2,??__doprnt+1
 17816  00082A  C092  FFD9         	movff	??__doprnt,fsr2l
 17817  00082E  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17818  000832  0E30               	movlw	48
 17819  000834  6EDF               	movwf	indf2,c
 17820  000836  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17821  00083A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17822  00083E  2ADE               	incf	postinc2,f,c
 17823  000840  0E00               	movlw	0
 17824  000842  22DD               	addwfc	postdec2,f,c
 17825  000844                     l1156:
 17826  000844  FFFF               	dw	65535	; assembler added errata NOP
 17827                           
 17828                           ;doprnt.c: 1418: while(--width);
 17829  000846  0100               	movlb	0	; () banked
 17830  000848  079E               	decf	__doprnt@width& (0+255),f,b
 17831  00084A  A0D8               	btfss	status,0,c
 17832  00084C  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 17833  00084E  D7BF               	goto	L48
 17834  000850                     l1149:
 17835  000850  FFFF               	dw	65535	; assembler added errata NOP
 17836                           
 17837                           ; BSR set to: 0
 17838                           ;doprnt.c: 1422: {
 17839                           ;doprnt.c: 1424: if(width
 17840                           ;doprnt.c: 1428: )
 17841                           
 17842                           ; BSR set to: 0
 17843  000852  519E               	movf	__doprnt@width& (0+255),w,b
 17844  000854  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 17845  000856  B4D8               	btfsc	status,2,c
 17846  000858  D040               	goto	u5380
 17847  00085A                     u5350:
 17848  00085A  FFFF               	dw	65535	; assembler added errata NOP
 17849                           
 17850                           ; BSR set to: 0
 17851                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 17852                           
 17853                           ; BSR set to: 0
 17854                           
 17855                           ;doprnt.c: 1429: do
 17856  00085C  EE20 F002          	lfsr	2,2
 17857  000860  518C               	movf	__doprnt@pb& (0+255),w,b
 17858  000862  26D9               	addwf	fsr2l,f,c
 17859  000864  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17860  000866  22DA               	addwfc	fsr2h,f,c
 17861  000868  50DE               	movf	postinc2,w,c
 17862  00086A  10DE               	iorwf	postinc2,w,c
 17863  00086C  B4D8               	btfsc	status,2,c
 17864  00086E  D016               	goto	l1161
 17865                           
 17866                           ; BSR set to: 0
 17867  000870  EE20 F002          	lfsr	2,2
 17868  000874  518C               	movf	__doprnt@pb& (0+255),w,b
 17869  000876  26D9               	addwf	fsr2l,f,c
 17870  000878  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17871  00087A  22DA               	addwfc	fsr2h,f,c
 17872  00087C  D801               	call	u5378
 17873  00087E  D024               	goto	l1162
 17874  000880                     u5378:
 17875  000880  FFFF               	dw	65535	; assembler added errata NOP
 17876  000882  0005               	push	
 17877  000884  6EFA               	movwf	pclath,c
 17878  000886  50DE               	movf	postinc2,w,c
 17879  000888  6EFD               	movwf	tosl,c
 17880  00088A  50DE               	movf	postinc2,w,c
 17881  00088C  6EFE               	movwf	tosh,c
 17882  00088E  50F8               	movf	tblptru,w,c
 17883  000890  6EFF               	movwf	tosu,c
 17884  000892  50FA               	movf	pclath,w,c
 17885  000894  0E20               	movlw	32
 17886  000896  0012               	return		;indir
 17887  000898  FFFF               	dw	65535	; errata NOP
 17888  00089A  D016               	goto	l1162
 17889  00089C                     l1161:
 17890  00089C  FFFF               	dw	65535	; assembler added errata NOP
 17891  00089E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17892  0008A2  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17893  0008A6  CFDE F092          	movff	postinc2,??__doprnt
 17894  0008AA  CFDD F093          	movff	postdec2,??__doprnt+1
 17895  0008AE  C092  FFD9         	movff	??__doprnt,fsr2l
 17896  0008B2  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17897  0008B6  0E20               	movlw	32
 17898  0008B8  6EDF               	movwf	indf2,c
 17899  0008BA  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17900  0008BE  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17901  0008C2  2ADE               	incf	postinc2,f,c
 17902  0008C4  0E00               	movlw	0
 17903  0008C6  22DD               	addwfc	postdec2,f,c
 17904  0008C8                     l1162:
 17905  0008C8  FFFF               	dw	65535	; assembler added errata NOP
 17906                           
 17907                           ;doprnt.c: 1431: while(--width);
 17908  0008CA  0100               	movlb	0	; () banked
 17909  0008CC  079E               	decf	__doprnt@width& (0+255),f,b
 17910  0008CE  A0D8               	btfss	status,0,c
 17911  0008D0  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 17912  0008D2  519E               	movf	__doprnt@width& (0+255),w,b
 17913  0008D4  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 17914  0008D6  A4D8               	btfss	status,2,c
 17915  0008D8  D7C0               	goto	u5350
 17916  0008DA                     u5380:
 17917  0008DA  FFFF               	dw	65535	; assembler added errata NOP
 17918                           
 17919                           ; BSR set to: 0
 17920                           ;doprnt.c: 1438: if(flag & 0x03)
 17921                           
 17922                           ; BSR set to: 0
 17923                           
 17924                           ; BSR set to: 0
 17925  0008DC  C09B  F092         	movff	__doprnt@flag,??__doprnt
 17926  0008E0  0E03               	movlw	3
 17927  0008E2  1792               	andwf	??__doprnt& (0+255),f,b
 17928  0008E4  B4D8               	btfsc	status,2,c
 17929  0008E6  D036               	goto	l1166
 17930                           
 17931                           ; BSR set to: 0
 17932                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 17933  0008E8  EE20 F002          	lfsr	2,2
 17934  0008EC  518C               	movf	__doprnt@pb& (0+255),w,b
 17935  0008EE  26D9               	addwf	fsr2l,f,c
 17936  0008F0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17937  0008F2  22DA               	addwfc	fsr2h,f,c
 17938  0008F4  50DE               	movf	postinc2,w,c
 17939  0008F6  10DE               	iorwf	postinc2,w,c
 17940  0008F8  B4D8               	btfsc	status,2,c
 17941  0008FA  D016               	goto	l1165
 17942                           
 17943                           ; BSR set to: 0
 17944  0008FC  EE20 F002          	lfsr	2,2
 17945  000900  518C               	movf	__doprnt@pb& (0+255),w,b
 17946  000902  26D9               	addwf	fsr2l,f,c
 17947  000904  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 17948  000906  22DA               	addwfc	fsr2h,f,c
 17949  000908  D801               	call	u5418
 17950  00090A  D024               	goto	l1166
 17951  00090C                     u5418:
 17952  00090C  FFFF               	dw	65535	; assembler added errata NOP
 17953  00090E  0005               	push	
 17954  000910  6EFA               	movwf	pclath,c
 17955  000912  50DE               	movf	postinc2,w,c
 17956  000914  6EFD               	movwf	tosl,c
 17957  000916  50DE               	movf	postinc2,w,c
 17958  000918  6EFE               	movwf	tosh,c
 17959  00091A  50F8               	movf	tblptru,w,c
 17960  00091C  6EFF               	movwf	tosu,c
 17961  00091E  50FA               	movf	pclath,w,c
 17962  000920  0E2D               	movlw	45
 17963  000922  0012               	return		;indir
 17964  000924  FFFF               	dw	65535	; errata NOP
 17965  000926  D016               	goto	l1166
 17966  000928                     l1165:
 17967  000928  FFFF               	dw	65535	; assembler added errata NOP
 17968  00092A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17969  00092E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17970  000932  CFDE F092          	movff	postinc2,??__doprnt
 17971  000936  CFDD F093          	movff	postdec2,??__doprnt+1
 17972  00093A  C092  FFD9         	movff	??__doprnt,fsr2l
 17973  00093E  C093  FFDA         	movff	??__doprnt+1,fsr2h
 17974  000942  0E2D               	movlw	45
 17975  000944  6EDF               	movwf	indf2,c
 17976  000946  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 17977  00094A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 17978  00094E  2ADE               	incf	postinc2,f,c
 17979  000950  0E00               	movlw	0
 17980  000952  22DD               	addwfc	postdec2,f,c
 17981  000954                     l1166:
 17982  000954  FFFF               	dw	65535	; assembler added errata NOP
 17983                           
 17984                           ;doprnt.c: 1469: }
 17985                           ;doprnt.c: 1472: prec = c;
 17986  000956  C0A0  F096         	movff	__doprnt@c,__doprnt@prec
 17987                           
 17988                           ;doprnt.c: 1474: while(prec--) {
 17989  00095A  D05D               	goto	l1170
 17990  00095C  FFFF               	dw	65535	; assembler added errata NOP
 17991                           
 17992                           ;doprnt.c: 1478: {
 17993                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 17994  00095E  0100               	movlb	0	; () banked
 17995  000960  5196               	movf	__doprnt@prec& (0+255),w,b
 17996  000962  0D02               	mullw	2
 17997  000964  0EA1               	movlw	low _dpowers
 17998  000966  24F3               	addwf	prodl,w,c
 17999  000968  6EF6               	movwf	tblptrl,c
 18000  00096A  0E7A               	movlw	high _dpowers
 18001  00096C  20F4               	addwfc	prodh,w,c
 18002  00096E  6EF7               	movwf	tblptrh,c
 18003  000970                     	if	0	;There are less than 3 active tblptr bytes
 18004  000970                     	endif
 18005  000970  0009               	tblrd		*+
 18006  000972  FFFF               	dw	65535	; errata NOP
 18007  000974  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18008  000978  000A               	tblrd		*-
 18009  00097A  FFFF               	dw	65535	; errata NOP
 18010  00097C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18011  000980  C097  F080         	movff	__doprnt@val,___lwdiv@dividend
 18012  000984  C098  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
 18013  000988  EC94  F03A         	call	___lwdiv
 18014  00098C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18015  000990  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18016  000994  0E00               	movlw	0
 18017  000996  0100               	movlb	0	; () banked
 18018  000998  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18019  00099A  0E0A               	movlw	10
 18020  00099C  6F89               	movwf	___lwmod@divisor& (0+255),b
 18021  00099E  ECB5  F039         	call	___lwmod	;wreg free
 18022  0009A2  0100               	movlb	0	; () banked
 18023  0009A4  5187               	movf	?___lwmod& (0+255),w,b
 18024  0009A6  0F30               	addlw	48
 18025  0009A8  6FA0               	movwf	__doprnt@c& (0+255),b
 18026                           
 18027                           ; BSR set to: 0
 18028                           ;doprnt.c: 1523: }
 18029                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 18030  0009AA  EE20 F002          	lfsr	2,2
 18031  0009AE  518C               	movf	__doprnt@pb& (0+255),w,b
 18032  0009B0  26D9               	addwf	fsr2l,f,c
 18033  0009B2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 18034  0009B4  22DA               	addwfc	fsr2h,f,c
 18035  0009B6  50DE               	movf	postinc2,w,c
 18036  0009B8  10DE               	iorwf	postinc2,w,c
 18037  0009BA  B4D8               	btfsc	status,2,c
 18038  0009BC  D016               	goto	l1169
 18039                           
 18040                           ; BSR set to: 0
 18041  0009BE  EE20 F002          	lfsr	2,2
 18042  0009C2  518C               	movf	__doprnt@pb& (0+255),w,b
 18043  0009C4  26D9               	addwf	fsr2l,f,c
 18044  0009C6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 18045  0009C8  22DA               	addwfc	fsr2h,f,c
 18046  0009CA  D801               	call	u5438
 18047  0009CC  D024               	goto	l1170
 18048  0009CE                     u5438:
 18049  0009CE  FFFF               	dw	65535	; assembler added errata NOP
 18050  0009D0  0005               	push	
 18051  0009D2  6EFA               	movwf	pclath,c
 18052  0009D4  50DE               	movf	postinc2,w,c
 18053  0009D6  6EFD               	movwf	tosl,c
 18054  0009D8  50DE               	movf	postinc2,w,c
 18055  0009DA  6EFE               	movwf	tosh,c
 18056  0009DC  50F8               	movf	tblptru,w,c
 18057  0009DE  6EFF               	movwf	tosu,c
 18058  0009E0  50FA               	movf	pclath,w,c
 18059  0009E2  51A0               	movf	__doprnt@c& (0+255),w,b
 18060  0009E4  0012               	return		;indir
 18061  0009E6  FFFF               	dw	65535	; errata NOP
 18062  0009E8  D016               	goto	l1170
 18063  0009EA                     l1169:
 18064  0009EA  FFFF               	dw	65535	; assembler added errata NOP
 18065  0009EC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 18066  0009F0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 18067  0009F4  CFDE F092          	movff	postinc2,??__doprnt
 18068  0009F8  CFDD F093          	movff	postdec2,??__doprnt+1
 18069  0009FC  C092  FFD9         	movff	??__doprnt,fsr2l
 18070  000A00  C093  FFDA         	movff	??__doprnt+1,fsr2h
 18071  000A04  C0A0  FFDF         	movff	__doprnt@c,indf2
 18072  000A08  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 18073  000A0C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 18074  000A10  2ADE               	incf	postinc2,f,c
 18075  000A12  0E00               	movlw	0
 18076  000A14  22DD               	addwfc	postdec2,f,c
 18077  000A16                     l1170:
 18078  000A16  FFFF               	dw	65535	; assembler added errata NOP
 18079  000A18  0100               	movlb	0	; () banked
 18080  000A1A  0796               	decf	__doprnt@prec& (0+255),f,b
 18081  000A1C  2996               	incf	__doprnt@prec& (0+255),w,b
 18082  000A1E  A4D8               	btfss	status,2,c
 18083  000A20  D79D               	goto	l1168
 18084  000A22                     u5440:
 18085  000A22  FFFF               	dw	65535	; assembler added errata NOP
 18086                           
 18087                           ; BSR set to: 0
 18088                           
 18089                           ; BSR set to: 0
 18090  000A24  0100               	movlb	0	; () banked
 18091  000A26  518E               	movf	__doprnt@f& (0+255),w,b
 18092  000A28  6F92               	movwf	??__doprnt& (0+255),b
 18093  000A2A  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 18094  000A2C  6F93               	movwf	(??__doprnt+1)& (0+255),b
 18095  000A2E  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 18096  000A30  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 18097  000A32  C092  FFF6         	movff	??__doprnt,tblptrl
 18098  000A36  C093  FFF7         	movff	??__doprnt+1,tblptrh
 18099  000A3A  6AF8               	clrf	tblptru,c
 18100  000A3C  0E05               	movlw	(high __ramtop+-1)
 18101  000A3E  64F7               	cpfsgt	tblptrh,c
 18102  000A40  D004               	bra	u5457
 18103  000A42  0008               	tblrd		*
 18104  000A44  FFFF               	dw	65535	; errata NOP
 18105  000A46  50F5               	movf	tablat,w,c
 18106  000A48  D005               	bra	u5450
 18107  000A4A                     u5457:
 18108  000A4A  CFF6 FFE9          	movff	tblptrl,fsr0l
 18109  000A4E  CFF7 FFEA          	movff	tblptrh,fsr0h
 18110  000A52  50EF               	movf	indf0,w,c
 18111  000A54                     u5450:
 18112  000A54  0100               	movlb	0	; () banked
 18113  000A56  6FA0               	movwf	__doprnt@c& (0+255),b
 18114  000A58  51A0               	movf	__doprnt@c& (0+255),w,b
 18115  000A5A  A4D8               	btfss	status,2,c
 18116  000A5C  D40B               	goto	l1103
 18117  000A5E                     u5460:
 18118  000A5E  FFFF               	dw	65535	; assembler added errata NOP
 18119                           
 18120                           ;doprnt.c: 1540: return 0;
 18121                           
 18122                           ; BSR set to: 0
 18123                           
 18124                           ;doprnt.c: 1525: }
 18125                           ;doprnt.c: 1533: }
 18126                           ;doprnt.c: 1535: alldone:
 18127                           
 18128                           ; BSR set to: 0
 18129  000A60  0E00               	movlw	0
 18130  000A62  0100               	movlb	0	; () banked
 18131  000A64  6F8D               	movwf	(?__doprnt+1)& (0+255),b
 18132  000A66  0E00               	movlw	0
 18133  000A68  6F8C               	movwf	?__doprnt& (0+255),b
 18134                           
 18135                           ; BSR set to: 0
 18136                           
 18137                           ; BSR set to: 0
 18138  000A6A  0012               	return		;funcret
 18139  000A6C  FFFF               	dw	65535	; errata NOP
 18140  000A6E                     __end_of__doprnt:
 18141                           	opt stack 0
 18142                           tosu	equ	0xFFF
 18143                           tosh	equ	0xFFE
 18144                           tosl	equ	0xFFD
 18145                           pclath	equ	0xFFA
 18146                           tblptru	equ	0xFF8
 18147                           tblptrh	equ	0xFF7
 18148                           tblptrl	equ	0xFF6
 18149                           tablat	equ	0xFF5
 18150                           prodh	equ	0xFF4
 18151                           prodl	equ	0xFF3
 18152                           intcon	equ	0xFF2
 18153                           intcon2	equ	0xFF1
 18154                           intcon3	equ	0xFF0
 18155                           indf0	equ	0xFEF
 18156                           postinc0	equ	0xFEE
 18157                           fsr0h	equ	0xFEA
 18158                           fsr0l	equ	0xFE9
 18159                           wreg	equ	0xFE8
 18160                           postdec1	equ	0xFE5
 18161                           fsr1l	equ	0xFE1
 18162                           indf2	equ	0xFDF
 18163                           postinc2	equ	0xFDE
 18164                           postdec2	equ	0xFDD
 18165                           fsr2h	equ	0xFDA
 18166                           fsr2l	equ	0xFD9
 18167                           status	equ	0xFD8
 18168                           
 18169 ;; *************** function _putch *****************
 18170 ;; Defined at:
 18171 ;;		line 16 in file "serial.h"
 18172 ;; Parameters:    Size  Location     Type
 18173 ;;  c               1    wreg     unsigned char 
 18174 ;; Auto vars:     Size  Location     Type
 18175 ;;  c               1    0[BANK0 ] unsigned char 
 18176 ;; Return value:  Size  Location     Type
 18177 ;;                  1    wreg      void 
 18178 ;; Registers used:
 18179 ;;		wreg
 18180 ;; Tracked objects:
 18181 ;;		On entry : 0/0
 18182 ;;		On exit  : 0/0
 18183 ;;		Unchanged: 0/0
 18184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18185 ;;      Params:         0       0       0       0       0       0       0
 18186 ;;      Locals:         0       1       0       0       0       0       0
 18187 ;;      Temps:          0       0       0       0       0       0       0
 18188 ;;      Totals:         0       1       0       0       0       0       0
 18189 ;;Total ram usage:        1 bytes
 18190 ;; Hardware stack levels used:    1
 18191 ;; Hardware stack levels required when called:    6
 18192 ;; This function calls:
 18193 ;;		Nothing
 18194 ;; This function is called by:
 18195 ;;		_printf
 18196 ;;		__doprnt
 18197 ;; This function uses a non-reentrant model
 18198 ;;
 18199                           
 18200                           	psect	text54
 18201  006BF0                     __ptext54:
 18202                           	opt stack 0
 18203  006BF0                     _putch:
 18204                           	opt stack 0
 18205  006BF0  FFFF               	dw	65535	; assembler added errata NOP
 18206                           
 18207                           ; BSR set to: 0
 18208                           ;incstack = 0
 18209                           ;putch@c stored from wreg
 18210  006BF2  0100               	movlb	0	; () banked
 18211  006BF4  6F80               	movwf	putch@c& (0+255),b
 18212  006BF6  FFFF               	dw	65535	; assembler added errata NOP
 18213                           
 18214                           ;serial.h: 17: while (!TXSTAbits.TRMT);
 18215  006BF8  A2AC               	btfss	4012,1,c	;volatile
 18216  006BFA  D7FD               	goto	l4993
 18217                           
 18218                           ;serial.h: 18: TXREG = c;
 18219  006BFC  C080  FFAD         	movff	putch@c,4013	;volatile
 18220  006C00  0012               	return		;funcret
 18221  006C02  FFFF               	dw	65535	; errata NOP
 18222  006C04                     __end_of_putch:
 18223                           	opt stack 0
 18224                           tosu	equ	0xFFF
 18225                           tosh	equ	0xFFE
 18226                           tosl	equ	0xFFD
 18227                           pclath	equ	0xFFA
 18228                           tblptru	equ	0xFF8
 18229                           tblptrh	equ	0xFF7
 18230                           tblptrl	equ	0xFF6
 18231                           tablat	equ	0xFF5
 18232                           prodh	equ	0xFF4
 18233                           prodl	equ	0xFF3
 18234                           intcon	equ	0xFF2
 18235                           intcon2	equ	0xFF1
 18236                           intcon3	equ	0xFF0
 18237                           indf0	equ	0xFEF
 18238                           postinc0	equ	0xFEE
 18239                           fsr0h	equ	0xFEA
 18240                           fsr0l	equ	0xFE9
 18241                           wreg	equ	0xFE8
 18242                           postdec1	equ	0xFE5
 18243                           fsr1l	equ	0xFE1
 18244                           indf2	equ	0xFDF
 18245                           postinc2	equ	0xFDE
 18246                           postdec2	equ	0xFDD
 18247                           fsr2h	equ	0xFDA
 18248                           fsr2l	equ	0xFD9
 18249                           status	equ	0xFD8
 18250                           
 18251 ;; *************** function _isdigit *****************
 18252 ;; Defined at:
 18253 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 18254 ;; Parameters:    Size  Location     Type
 18255 ;;  c               1    wreg     unsigned char 
 18256 ;; Auto vars:     Size  Location     Type
 18257 ;;  c               1    2[BANK0 ] unsigned char 
 18258 ;; Return value:  Size  Location     Type
 18259 ;;		None               void
 18260 ;; Registers used:
 18261 ;;		wreg, status,2, status,0
 18262 ;; Tracked objects:
 18263 ;;		On entry : 0/0
 18264 ;;		On exit  : 0/0
 18265 ;;		Unchanged: 0/0
 18266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18267 ;;      Params:         0       0       0       0       0       0       0
 18268 ;;      Locals:         0       2       0       0       0       0       0
 18269 ;;      Temps:          0       1       0       0       0       0       0
 18270 ;;      Totals:         0       3       0       0       0       0       0
 18271 ;;Total ram usage:        3 bytes
 18272 ;; Hardware stack levels used:    1
 18273 ;; Hardware stack levels required when called:    6
 18274 ;; This function calls:
 18275 ;;		Nothing
 18276 ;; This function is called by:
 18277 ;;		__doprnt
 18278 ;;		_atoi
 18279 ;; This function uses a non-reentrant model
 18280 ;;
 18281                           
 18282                           	psect	text55
 18283  006CF6                     __ptext55:
 18284                           	opt stack 0
 18285  006CF6                     _isdigit:
 18286                           	opt stack 0
 18287  006CF6  FFFF               	dw	65535	; assembler added errata NOP
 18288                           
 18289                           ;incstack = 0
 18290                           ;isdigit@c stored from wreg
 18291  006CF8  0100               	movlb	0	; () banked
 18292  006CFA  6F82               	movwf	isdigit@c& (0+255),b
 18293  006CFC  0E00               	movlw	0
 18294  006CFE  0100               	movlb	0	; () banked
 18295  006D00  6F81               	movwf	_isdigit$2058& (0+255),b
 18296                           
 18297                           ; BSR set to: 0
 18298  006D02  0E3A               	movlw	58
 18299  006D04  6182               	cpfslt	isdigit@c& (0+255),b
 18300  006D06  D005               	goto	l1518
 18301                           
 18302                           ; BSR set to: 0
 18303  006D08  0E2F               	movlw	47
 18304  006D0A  6582               	cpfsgt	isdigit@c& (0+255),b
 18305  006D0C  D002               	goto	l1518
 18306                           
 18307                           ; BSR set to: 0
 18308  006D0E  0E01               	movlw	1
 18309  006D10  6F81               	movwf	_isdigit$2058& (0+255),b
 18310  006D12                     l1518:
 18311  006D12  FFFF               	dw	65535	; assembler added errata NOP
 18312                           
 18313                           ; BSR set to: 0
 18314                           
 18315                           ; BSR set to: 0
 18316  006D14  C081  F080         	movff	_isdigit$2058,??_isdigit
 18317  006D18  3180               	rrcf	??_isdigit& (0+255),w,b
 18318                           
 18319                           ; BSR set to: 0
 18320                           
 18321                           ; BSR set to: 0
 18322  006D1A  0012               	return		;funcret
 18323  006D1C  FFFF               	dw	65535	; errata NOP
 18324  006D1E                     __end_of_isdigit:
 18325                           	opt stack 0
 18326                           tosu	equ	0xFFF
 18327                           tosh	equ	0xFFE
 18328                           tosl	equ	0xFFD
 18329                           pclath	equ	0xFFA
 18330                           tblptru	equ	0xFF8
 18331                           tblptrh	equ	0xFF7
 18332                           tblptrl	equ	0xFF6
 18333                           tablat	equ	0xFF5
 18334                           prodh	equ	0xFF4
 18335                           prodl	equ	0xFF3
 18336                           intcon	equ	0xFF2
 18337                           intcon2	equ	0xFF1
 18338                           intcon3	equ	0xFF0
 18339                           indf0	equ	0xFEF
 18340                           postinc0	equ	0xFEE
 18341                           fsr0h	equ	0xFEA
 18342                           fsr0l	equ	0xFE9
 18343                           wreg	equ	0xFE8
 18344                           postdec1	equ	0xFE5
 18345                           fsr1l	equ	0xFE1
 18346                           indf2	equ	0xFDF
 18347                           postinc2	equ	0xFDE
 18348                           postdec2	equ	0xFDD
 18349                           fsr2h	equ	0xFDA
 18350                           fsr2l	equ	0xFD9
 18351                           status	equ	0xFD8
 18352                           
 18353 ;; *************** function ___wmul *****************
 18354 ;; Defined at:
 18355 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 18356 ;; Parameters:    Size  Location     Type
 18357 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18358 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18359 ;; Auto vars:     Size  Location     Type
 18360 ;;  product         2    4[BANK0 ] unsigned int 
 18361 ;; Return value:  Size  Location     Type
 18362 ;;                  2    0[BANK0 ] unsigned int 
 18363 ;; Registers used:
 18364 ;;		wreg, status,2, status,0, prodl, prodh
 18365 ;; Tracked objects:
 18366 ;;		On entry : 0/0
 18367 ;;		On exit  : 0/0
 18368 ;;		Unchanged: 0/0
 18369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18370 ;;      Params:         0       4       0       0       0       0       0
 18371 ;;      Locals:         0       2       0       0       0       0       0
 18372 ;;      Temps:          0       0       0       0       0       0       0
 18373 ;;      Totals:         0       6       0       0       0       0       0
 18374 ;;Total ram usage:        6 bytes
 18375 ;; Hardware stack levels used:    1
 18376 ;; Hardware stack levels required when called:    6
 18377 ;; This function calls:
 18378 ;;		Nothing
 18379 ;; This function is called by:
 18380 ;;		__doprnt
 18381 ;;		_atoi
 18382 ;; This function uses a non-reentrant model
 18383 ;;
 18384                           
 18385                           	psect	text56
 18386  006D4A                     __ptext56:
 18387                           	opt stack 0
 18388  006D4A                     ___wmul:
 18389                           	opt stack 0
 18390  006D4A  FFFF               	dw	65535	; assembler added errata NOP
 18391                           
 18392                           ; BSR set to: 0
 18393                           ;incstack = 0
 18394  006D4C  0100               	movlb	0	; () banked
 18395  006D4E  5180               	movf	___wmul@multiplier& (0+255),w,b
 18396  006D50  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18397  006D52  CFF3 F084          	movff	prodl,___wmul@product
 18398  006D56  CFF4 F085          	movff	prodh,___wmul@product+1
 18399  006D5A  5180               	movf	___wmul@multiplier& (0+255),w,b
 18400  006D5C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18401  006D5E  50F3               	movf	prodl,w,c
 18402  006D60  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18403  006D62  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18404  006D64  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18405  006D66  50F3               	movf	prodl,w,c
 18406  006D68  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18407                           
 18408                           ; BSR set to: 0
 18409  006D6A  C084  F080         	movff	___wmul@product,?___wmul
 18410  006D6E  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18411                           
 18412                           ; BSR set to: 0
 18413                           
 18414                           ; BSR set to: 0
 18415  006D72  0012               	return		;funcret
 18416  006D74  FFFF               	dw	65535	; errata NOP
 18417  006D76                     __end_of___wmul:
 18418                           	opt stack 0
 18419                           tosu	equ	0xFFF
 18420                           tosh	equ	0xFFE
 18421                           tosl	equ	0xFFD
 18422                           pclath	equ	0xFFA
 18423                           tblptru	equ	0xFF8
 18424                           tblptrh	equ	0xFF7
 18425                           tblptrl	equ	0xFF6
 18426                           tablat	equ	0xFF5
 18427                           prodh	equ	0xFF4
 18428                           prodl	equ	0xFF3
 18429                           intcon	equ	0xFF2
 18430                           intcon2	equ	0xFF1
 18431                           intcon3	equ	0xFF0
 18432                           indf0	equ	0xFEF
 18433                           postinc0	equ	0xFEE
 18434                           fsr0h	equ	0xFEA
 18435                           fsr0l	equ	0xFE9
 18436                           wreg	equ	0xFE8
 18437                           postdec1	equ	0xFE5
 18438                           fsr1l	equ	0xFE1
 18439                           indf2	equ	0xFDF
 18440                           postinc2	equ	0xFDE
 18441                           postdec2	equ	0xFDD
 18442                           fsr2h	equ	0xFDA
 18443                           fsr2l	equ	0xFD9
 18444                           status	equ	0xFD8
 18445                           
 18446 ;; *************** function ___lwmod *****************
 18447 ;; Defined at:
 18448 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 18449 ;; Parameters:    Size  Location     Type
 18450 ;;  dividend        2    7[BANK0 ] unsigned int 
 18451 ;;  divisor         2    9[BANK0 ] unsigned int 
 18452 ;; Auto vars:     Size  Location     Type
 18453 ;;  counter         1   11[BANK0 ] unsigned char 
 18454 ;; Return value:  Size  Location     Type
 18455 ;;                  2    7[BANK0 ] unsigned int 
 18456 ;; Registers used:
 18457 ;;		wreg, status,2, status,0
 18458 ;; Tracked objects:
 18459 ;;		On entry : 0/0
 18460 ;;		On exit  : 0/0
 18461 ;;		Unchanged: 0/0
 18462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18463 ;;      Params:         0       4       0       0       0       0       0
 18464 ;;      Locals:         0       1       0       0       0       0       0
 18465 ;;      Temps:          0       0       0       0       0       0       0
 18466 ;;      Totals:         0       5       0       0       0       0       0
 18467 ;;Total ram usage:        5 bytes
 18468 ;; Hardware stack levels used:    1
 18469 ;; Hardware stack levels required when called:    6
 18470 ;; This function calls:
 18471 ;;		Nothing
 18472 ;; This function is called by:
 18473 ;;		__doprnt
 18474 ;; This function uses a non-reentrant model
 18475 ;;
 18476                           
 18477                           	psect	text57
 18478  00736A                     __ptext57:
 18479                           	opt stack 0
 18480  00736A                     ___lwmod:
 18481                           	opt stack 0
 18482  00736A  FFFF               	dw	65535	; assembler added errata NOP
 18483                           
 18484                           ; BSR set to: 0
 18485                           ;incstack = 0
 18486  00736C  0100               	movlb	0	; () banked
 18487  00736E  5189               	movf	___lwmod@divisor& (0+255),w,b
 18488  007370  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18489  007372  B4D8               	btfsc	status,2,c
 18490  007374  D01C               	goto	l1612
 18491                           
 18492                           ; BSR set to: 0
 18493  007376  0E01               	movlw	1
 18494  007378  6F8B               	movwf	___lwmod@counter& (0+255),b
 18495  00737A  D005               	goto	l1607
 18496  00737C  FFFF               	dw	65535	; assembler added errata NOP
 18497                           
 18498                           ; BSR set to: 0
 18499                           
 18500                           ; BSR set to: 0
 18501  00737E  90D8               	bcf	status,0,c
 18502  007380  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18503  007382  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18504  007384  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18505  007386                     l1607:
 18506  007386  FFFF               	dw	65535	; assembler added errata NOP
 18507                           
 18508                           ; BSR set to: 0
 18509                           
 18510                           ; BSR set to: 0
 18511  007388  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18512  00738A  D7F8               	goto	l1608
 18513  00738C                     u4710:
 18514  00738C  FFFF               	dw	65535	; assembler added errata NOP
 18515                           
 18516                           ; BSR set to: 0
 18517                           
 18518                           ; BSR set to: 0
 18519                           
 18520                           ; BSR set to: 0
 18521  00738E  5189               	movf	___lwmod@divisor& (0+255),w,b
 18522  007390  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18523  007392  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18524  007394  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18525  007396  A0D8               	btfss	status,0,c
 18526  007398  D004               	goto	l1611
 18527                           
 18528                           ; BSR set to: 0
 18529  00739A  5189               	movf	___lwmod@divisor& (0+255),w,b
 18530  00739C  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18531  00739E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18532  0073A0  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18533  0073A2                     l1611:
 18534  0073A2  FFFF               	dw	65535	; assembler added errata NOP
 18535                           
 18536                           ; BSR set to: 0
 18537                           
 18538                           ; BSR set to: 0
 18539  0073A4  90D8               	bcf	status,0,c
 18540  0073A6  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18541  0073A8  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18542                           
 18543                           ; BSR set to: 0
 18544  0073AA  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18545  0073AC  D7EF               	goto	u4710
 18546  0073AE                     l1612:
 18547  0073AE  FFFF               	dw	65535	; assembler added errata NOP
 18548                           
 18549                           ; BSR set to: 0
 18550                           
 18551                           ; BSR set to: 0
 18552  0073B0  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18553  0073B4  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18554                           
 18555                           ; BSR set to: 0
 18556  0073B8  0012               	return		;funcret
 18557  0073BA  FFFF               	dw	65535	; errata NOP
 18558  0073BC                     __end_of___lwmod:
 18559                           	opt stack 0
 18560                           tosu	equ	0xFFF
 18561                           tosh	equ	0xFFE
 18562                           tosl	equ	0xFFD
 18563                           pclath	equ	0xFFA
 18564                           tblptru	equ	0xFF8
 18565                           tblptrh	equ	0xFF7
 18566                           tblptrl	equ	0xFF6
 18567                           tablat	equ	0xFF5
 18568                           prodh	equ	0xFF4
 18569                           prodl	equ	0xFF3
 18570                           intcon	equ	0xFF2
 18571                           intcon2	equ	0xFF1
 18572                           intcon3	equ	0xFF0
 18573                           indf0	equ	0xFEF
 18574                           postinc0	equ	0xFEE
 18575                           fsr0h	equ	0xFEA
 18576                           fsr0l	equ	0xFE9
 18577                           wreg	equ	0xFE8
 18578                           postdec1	equ	0xFE5
 18579                           fsr1l	equ	0xFE1
 18580                           indf2	equ	0xFDF
 18581                           postinc2	equ	0xFDE
 18582                           postdec2	equ	0xFDD
 18583                           fsr2h	equ	0xFDA
 18584                           fsr2l	equ	0xFD9
 18585                           status	equ	0xFD8
 18586                           
 18587 ;; *************** function ___lwdiv *****************
 18588 ;; Defined at:
 18589 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 18590 ;; Parameters:    Size  Location     Type
 18591 ;;  dividend        2    0[BANK0 ] unsigned int 
 18592 ;;  divisor         2    2[BANK0 ] unsigned int 
 18593 ;; Auto vars:     Size  Location     Type
 18594 ;;  quotient        2    4[BANK0 ] unsigned int 
 18595 ;;  counter         1    6[BANK0 ] unsigned char 
 18596 ;; Return value:  Size  Location     Type
 18597 ;;                  2    0[BANK0 ] unsigned int 
 18598 ;; Registers used:
 18599 ;;		wreg, status,2, status,0
 18600 ;; Tracked objects:
 18601 ;;		On entry : 0/0
 18602 ;;		On exit  : 0/0
 18603 ;;		Unchanged: 0/0
 18604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18605 ;;      Params:         0       4       0       0       0       0       0
 18606 ;;      Locals:         0       3       0       0       0       0       0
 18607 ;;      Temps:          0       0       0       0       0       0       0
 18608 ;;      Totals:         0       7       0       0       0       0       0
 18609 ;;Total ram usage:        7 bytes
 18610 ;; Hardware stack levels used:    1
 18611 ;; Hardware stack levels required when called:    6
 18612 ;; This function calls:
 18613 ;;		Nothing
 18614 ;; This function is called by:
 18615 ;;		__doprnt
 18616 ;; This function uses a non-reentrant model
 18617 ;;
 18618                           
 18619                           	psect	text58
 18620  007528                     __ptext58:
 18621                           	opt stack 0
 18622  007528                     ___lwdiv:
 18623                           	opt stack 0
 18624  007528  FFFF               	dw	65535	; assembler added errata NOP
 18625                           
 18626                           ; BSR set to: 0
 18627                           ;incstack = 0
 18628  00752A  0E00               	movlw	0
 18629  00752C  0100               	movlb	0	; () banked
 18630  00752E  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18631  007530  0E00               	movlw	0
 18632  007532  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18633                           
 18634                           ; BSR set to: 0
 18635  007534  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18636  007536  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18637  007538  B4D8               	btfsc	status,2,c
 18638  00753A  D020               	goto	l1602
 18639                           
 18640                           ; BSR set to: 0
 18641  00753C  0E01               	movlw	1
 18642  00753E  6F86               	movwf	___lwdiv@counter& (0+255),b
 18643  007540  D005               	goto	l1597
 18644  007542  FFFF               	dw	65535	; assembler added errata NOP
 18645                           
 18646                           ; BSR set to: 0
 18647                           
 18648                           ; BSR set to: 0
 18649  007544  90D8               	bcf	status,0,c
 18650  007546  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18651  007548  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18652  00754A  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18653  00754C                     l1597:
 18654  00754C  FFFF               	dw	65535	; assembler added errata NOP
 18655                           
 18656                           ; BSR set to: 0
 18657                           
 18658                           ; BSR set to: 0
 18659  00754E  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18660  007550  D7F8               	goto	l1598
 18661  007552                     u4680:
 18662  007552  FFFF               	dw	65535	; assembler added errata NOP
 18663                           
 18664                           ; BSR set to: 0
 18665                           
 18666                           ; BSR set to: 0
 18667                           
 18668                           ; BSR set to: 0
 18669  007554  90D8               	bcf	status,0,c
 18670  007556  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18671  007558  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18672                           
 18673                           ; BSR set to: 0
 18674  00755A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18675  00755C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18676  00755E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18677  007560  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18678  007562  A0D8               	btfss	status,0,c
 18679  007564  D005               	goto	l1601
 18680                           
 18681                           ; BSR set to: 0
 18682  007566  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18683  007568  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18684  00756A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18685  00756C  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18686                           
 18687                           ; BSR set to: 0
 18688  00756E  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18689  007570                     l1601:
 18690  007570  FFFF               	dw	65535	; assembler added errata NOP
 18691                           
 18692                           ; BSR set to: 0
 18693                           
 18694                           ; BSR set to: 0
 18695  007572  90D8               	bcf	status,0,c
 18696  007574  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18697  007576  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18698                           
 18699                           ; BSR set to: 0
 18700  007578  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18701  00757A  D7EB               	goto	u4680
 18702  00757C                     l1602:
 18703  00757C  FFFF               	dw	65535	; assembler added errata NOP
 18704                           
 18705                           ; BSR set to: 0
 18706                           
 18707                           ; BSR set to: 0
 18708  00757E  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18709  007582  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18710                           
 18711                           ; BSR set to: 0
 18712  007586  0012               	return		;funcret
 18713  007588  FFFF               	dw	65535	; errata NOP
 18714  00758A                     __end_of___lwdiv:
 18715                           	opt stack 0
 18716                           tosu	equ	0xFFF
 18717                           tosh	equ	0xFFE
 18718                           tosl	equ	0xFFD
 18719                           pclath	equ	0xFFA
 18720                           tblptru	equ	0xFF8
 18721                           tblptrh	equ	0xFF7
 18722                           tblptrl	equ	0xFF6
 18723                           tablat	equ	0xFF5
 18724                           prodh	equ	0xFF4
 18725                           prodl	equ	0xFF3
 18726                           intcon	equ	0xFF2
 18727                           intcon2	equ	0xFF1
 18728                           intcon3	equ	0xFF0
 18729                           indf0	equ	0xFEF
 18730                           postinc0	equ	0xFEE
 18731                           fsr0h	equ	0xFEA
 18732                           fsr0l	equ	0xFE9
 18733                           wreg	equ	0xFE8
 18734                           postdec1	equ	0xFE5
 18735                           fsr1l	equ	0xFE1
 18736                           indf2	equ	0xFDF
 18737                           postinc2	equ	0xFDE
 18738                           postdec2	equ	0xFDD
 18739                           fsr2h	equ	0xFDA
 18740                           fsr2l	equ	0xFD9
 18741                           status	equ	0xFD8
 18742                           
 18743 ;; *************** function _limparBuffer *****************
 18744 ;; Defined at:
 18745 ;;		line 34 in file "serial.h"
 18746 ;; Parameters:    Size  Location     Type
 18747 ;;		None
 18748 ;; Auto vars:     Size  Location     Type
 18749 ;;		None
 18750 ;; Return value:  Size  Location     Type
 18751 ;;                  1    wreg      void 
 18752 ;; Registers used:
 18753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18754 ;; Tracked objects:
 18755 ;;		On entry : 0/0
 18756 ;;		On exit  : 0/0
 18757 ;;		Unchanged: 0/0
 18758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18759 ;;      Params:         0       0       0       0       0       0       0
 18760 ;;      Locals:         0       0       0       0       0       0       0
 18761 ;;      Temps:          0       0       0       0       0       0       0
 18762 ;;      Totals:         0       0       0       0       0       0       0
 18763 ;;Total ram usage:        0 bytes
 18764 ;; Hardware stack levels used:    1
 18765 ;; Hardware stack levels required when called:    7
 18766 ;; This function calls:
 18767 ;;		_delay
 18768 ;;		_memset
 18769 ;; This function is called by:
 18770 ;;		_getSinalSIM800L
 18771 ;;		_comunicarTeste
 18772 ;;		_enviaSMS
 18773 ;; This function uses a non-reentrant model
 18774 ;;
 18775                           
 18776                           	psect	text59
 18777  006E76                     __ptext59:
 18778                           	opt stack 0
 18779  006E76                     _limparBuffer:
 18780                           	opt stack 0
 18781  006E76  FFFF               	dw	65535	; assembler added errata NOP
 18782                           
 18783                           ;serial.h: 35: cbf = 0;
 18784                           
 18785                           ; BSR set to: 0
 18786                           ;incstack = 0
 18787  006E78  0E00               	movlw	0
 18788  006E7A  6E68               	movwf	_cbf,c
 18789                           
 18790                           ;serial.h: 36: memset(bufferSerial, 0, sizeof (bufferSerial));
 18791  006E7C  0E1E               	movlw	low _bufferSerial
 18792  006E7E  0100               	movlb	0	; () banked
 18793  006E80  6F80               	movwf	memset@p1& (0+255),b
 18794  006E82  0E01               	movlw	high _bufferSerial
 18795  006E84  6F81               	movwf	(memset@p1+1)& (0+255),b
 18796  006E86  0E00               	movlw	0
 18797  006E88  6F83               	movwf	(memset@c+1)& (0+255),b
 18798  006E8A  0E00               	movlw	0
 18799  006E8C  6F82               	movwf	memset@c& (0+255),b
 18800  006E8E  0E00               	movlw	0
 18801  006E90  6F85               	movwf	(memset@n+1)& (0+255),b
 18802  006E92  0E3C               	movlw	60
 18803  006E94  6F84               	movwf	memset@n& (0+255),b
 18804  006E96  EC8E  F037         	call	_memset
 18805                           
 18806                           ;serial.h: 37: delay(150);
 18807  006E9A  0E00               	movlw	0
 18808  006E9C  0100               	movlb	0	; () banked
 18809  006E9E  6F81               	movwf	(delay@x+1)& (0+255),b
 18810  006EA0  0E96               	movlw	150
 18811  006EA2  6F80               	movwf	delay@x& (0+255),b
 18812  006EA4  EC20  F037         	call	_delay	;wreg free
 18813  006EA8  0012               	return		;funcret
 18814  006EAA  FFFF               	dw	65535	; errata NOP
 18815  006EAC                     __end_of_limparBuffer:
 18816                           	opt stack 0
 18817                           tosu	equ	0xFFF
 18818                           tosh	equ	0xFFE
 18819                           tosl	equ	0xFFD
 18820                           pclath	equ	0xFFA
 18821                           tblptru	equ	0xFF8
 18822                           tblptrh	equ	0xFF7
 18823                           tblptrl	equ	0xFF6
 18824                           tablat	equ	0xFF5
 18825                           prodh	equ	0xFF4
 18826                           prodl	equ	0xFF3
 18827                           intcon	equ	0xFF2
 18828                           intcon2	equ	0xFF1
 18829                           intcon3	equ	0xFF0
 18830                           indf0	equ	0xFEF
 18831                           postinc0	equ	0xFEE
 18832                           fsr0h	equ	0xFEA
 18833                           fsr0l	equ	0xFE9
 18834                           wreg	equ	0xFE8
 18835                           postdec1	equ	0xFE5
 18836                           fsr1l	equ	0xFE1
 18837                           indf2	equ	0xFDF
 18838                           postinc2	equ	0xFDE
 18839                           postdec2	equ	0xFDD
 18840                           fsr2h	equ	0xFDA
 18841                           fsr2l	equ	0xFD9
 18842                           status	equ	0xFD8
 18843                           
 18844 ;; *************** function _memset *****************
 18845 ;; Defined at:
 18846 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 18847 ;; Parameters:    Size  Location     Type
 18848 ;;  p1              2    0[BANK0 ] PTR void 
 18849 ;;		 -> bufferAUX(20), bufferSerial(60), 
 18850 ;;  c               2    2[BANK0 ] int 
 18851 ;;  n               2    4[BANK0 ] unsigned int 
 18852 ;; Auto vars:     Size  Location     Type
 18853 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18854 ;;		 -> bufferAUX(20), bufferSerial(60), 
 18855 ;; Return value:  Size  Location     Type
 18856 ;;                  2    0[BANK0 ] PTR void 
 18857 ;; Registers used:
 18858 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18859 ;; Tracked objects:
 18860 ;;		On entry : 0/0
 18861 ;;		On exit  : 0/0
 18862 ;;		Unchanged: 0/0
 18863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18864 ;;      Params:         0       6       0       0       0       0       0
 18865 ;;      Locals:         0       2       0       0       0       0       0
 18866 ;;      Temps:          0       0       0       0       0       0       0
 18867 ;;      Totals:         0       8       0       0       0       0       0
 18868 ;;Total ram usage:        8 bytes
 18869 ;; Hardware stack levels used:    1
 18870 ;; Hardware stack levels required when called:    6
 18871 ;; This function calls:
 18872 ;;		Nothing
 18873 ;; This function is called by:
 18874 ;;		_limparBuffer
 18875 ;;		_getSerial
 18876 ;; This function uses a non-reentrant model
 18877 ;;
 18878                           
 18879                           	psect	text60
 18880  006F1C                     __ptext60:
 18881                           	opt stack 0
 18882  006F1C                     _memset:
 18883                           	opt stack 0
 18884  006F1C  FFFF               	dw	65535	; assembler added errata NOP
 18885                           
 18886                           ;incstack = 0
 18887  006F1E  C080  F086         	movff	memset@p1,memset@p
 18888  006F22  C081  F087         	movff	memset@p1+1,memset@p+1
 18889  006F26  D00A               	goto	l1621
 18890  006F28  FFFF               	dw	65535	; assembler added errata NOP
 18891  006F2A                     l5187:
 18892  006F2A  C086  FFD9         	movff	memset@p,fsr2l
 18893  006F2E  C087  FFDA         	movff	memset@p+1,fsr2h
 18894  006F32  C082  FFDF         	movff	memset@c,indf2
 18895  006F36  0100               	movlb	0	; () banked
 18896  006F38  4B86               	infsnz	memset@p& (0+255),f,b
 18897  006F3A  2B87               	incf	(memset@p+1)& (0+255),f,b
 18898  006F3C                     l1621:
 18899  006F3C  FFFF               	dw	65535	; assembler added errata NOP
 18900                           
 18901                           ; BSR set to: 0
 18902  006F3E  0100               	movlb	0	; () banked
 18903  006F40  0784               	decf	memset@n& (0+255),f,b
 18904  006F42  A0D8               	btfss	status,0,c
 18905  006F44  0785               	decf	(memset@n+1)& (0+255),f,b
 18906  006F46  2984               	incf	memset@n& (0+255),w,b
 18907  006F48  E1F0               	bnz	l5187
 18908  006F4A  2985               	incf	(memset@n+1)& (0+255),w,b
 18909  006F4C  B4D8               	btfsc	status,2,c
 18910                           
 18911                           ; BSR set to: 0
 18912                           
 18913                           ; BSR set to: 0
 18914                           ;	Return value of _memset is never used
 18915  006F4E  0012               	return		;funcret
 18916  006F50  FFFF               	dw	65535	; assembler added errata NOP
 18917  006F52  D7EA               	goto	l1622
 18918  006F54  FFFF               	dw	65535	; errata NOP
 18919  006F56                     __end_of_memset:
 18920                           	opt stack 0
 18921                           tosu	equ	0xFFF
 18922                           tosh	equ	0xFFE
 18923                           tosl	equ	0xFFD
 18924                           pclath	equ	0xFFA
 18925                           tblptru	equ	0xFF8
 18926                           tblptrh	equ	0xFF7
 18927                           tblptrl	equ	0xFF6
 18928                           tablat	equ	0xFF5
 18929                           prodh	equ	0xFF4
 18930                           prodl	equ	0xFF3
 18931                           intcon	equ	0xFF2
 18932                           intcon2	equ	0xFF1
 18933                           intcon3	equ	0xFF0
 18934                           indf0	equ	0xFEF
 18935                           postinc0	equ	0xFEE
 18936                           fsr0h	equ	0xFEA
 18937                           fsr0l	equ	0xFE9
 18938                           wreg	equ	0xFE8
 18939                           postdec1	equ	0xFE5
 18940                           fsr1l	equ	0xFE1
 18941                           indf2	equ	0xFDF
 18942                           postinc2	equ	0xFDE
 18943                           postdec2	equ	0xFDD
 18944                           fsr2h	equ	0xFDA
 18945                           fsr2l	equ	0xFD9
 18946                           status	equ	0xFD8
 18947                           
 18948 ;; *************** function _aguardaBuffer *****************
 18949 ;; Defined at:
 18950 ;;		line 26 in file "serial.h"
 18951 ;; Parameters:    Size  Location     Type
 18952 ;;  str             2   19[BANK0 ] PTR unsigned char 
 18953 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 18954 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 18955 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_6(7), 
 18956 ;;		 -> STR_5(3), 
 18957 ;; Auto vars:     Size  Location     Type
 18958 ;;		None
 18959 ;; Return value:  Size  Location     Type
 18960 ;;                  1    wreg      unsigned char 
 18961 ;; Registers used:
 18962 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18963 ;; Tracked objects:
 18964 ;;		On entry : 0/0
 18965 ;;		On exit  : 0/0
 18966 ;;		Unchanged: 0/0
 18967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18968 ;;      Params:         0       2       0       0       0       0       0
 18969 ;;      Locals:         0       0       0       0       0       0       0
 18970 ;;      Temps:          0       0       0       0       0       0       0
 18971 ;;      Totals:         0       2       0       0       0       0       0
 18972 ;;Total ram usage:        2 bytes
 18973 ;; Hardware stack levels used:    1
 18974 ;; Hardware stack levels required when called:    8
 18975 ;; This function calls:
 18976 ;;		_delay
 18977 ;;		_strstr
 18978 ;; This function is called by:
 18979 ;;		_getSinalSIM800L
 18980 ;;		_comunicarTeste
 18981 ;;		_enviaSMS
 18982 ;; This function uses a non-reentrant model
 18983 ;;
 18984                           
 18985                           	psect	text61
 18986  007006                     __ptext61:
 18987                           	opt stack 0
 18988  007006                     _aguardaBuffer:
 18989                           	opt stack 0
 18990  007006  FFFF               	dw	65535	; assembler added errata NOP
 18991                           
 18992                           ;serial.h: 27: if (strstr(bufferSerial, str) != (0)) {
 18993                           
 18994                           ; BSR set to: 0
 18995                           ;incstack = 0
 18996  007008  0E1E               	movlw	low _bufferSerial
 18997  00700A  0100               	movlb	0	; () banked
 18998  00700C  6F8F               	movwf	strstr@s1& (0+255),b
 18999  00700E  0E01               	movlw	high _bufferSerial
 19000  007010  6F90               	movwf	(strstr@s1+1)& (0+255),b
 19001  007012  C093  F091         	movff	aguardaBuffer@str,strstr@s2
 19002  007016  C094  F092         	movff	aguardaBuffer@str+1,strstr@s2+1
 19003  00701A  EC6A  F01F         	call	_strstr	;wreg free
 19004  00701E  0100               	movlb	0	; () banked
 19005  007020  518F               	movf	?_strstr& (0+255),w,b
 19006  007022  1190               	iorwf	(?_strstr+1)& (0+255),w,b
 19007  007024  B4D8               	btfsc	status,2,c
 19008  007026  D008               	goto	l273
 19009                           
 19010                           ; BSR set to: 0
 19011                           ;serial.h: 28: delay(150);
 19012  007028  0E00               	movlw	0
 19013  00702A  6F81               	movwf	(delay@x+1)& (0+255),b
 19014  00702C  0E96               	movlw	150
 19015  00702E  6F80               	movwf	delay@x& (0+255),b
 19016  007030  EC20  F037         	call	_delay	;wreg free
 19017                           
 19018                           ;serial.h: 29: return 1;
 19019  007034  0E01               	movlw	1
 19020  007036  D002               	goto	l5633
 19021  007038                     l273:
 19022  007038  FFFF               	dw	65535	; assembler added errata NOP
 19023                           
 19024                           ;serial.h: 30: }
 19025                           ;serial.h: 31: return 0;
 19026  00703A  0E00               	movlw	0
 19027  00703C                     l5633:
 19028  00703C  FFFF               	dw	65535	; assembler added errata NOP
 19029  00703E  0012               	return		;funcret
 19030  007040  FFFF               	dw	65535	; errata NOP
 19031  007042                     __end_of_aguardaBuffer:
 19032                           	opt stack 0
 19033                           tosu	equ	0xFFF
 19034                           tosh	equ	0xFFE
 19035                           tosl	equ	0xFFD
 19036                           pclath	equ	0xFFA
 19037                           tblptru	equ	0xFF8
 19038                           tblptrh	equ	0xFF7
 19039                           tblptrl	equ	0xFF6
 19040                           tablat	equ	0xFF5
 19041                           prodh	equ	0xFF4
 19042                           prodl	equ	0xFF3
 19043                           intcon	equ	0xFF2
 19044                           intcon2	equ	0xFF1
 19045                           intcon3	equ	0xFF0
 19046                           indf0	equ	0xFEF
 19047                           postinc0	equ	0xFEE
 19048                           fsr0h	equ	0xFEA
 19049                           fsr0l	equ	0xFE9
 19050                           wreg	equ	0xFE8
 19051                           postdec1	equ	0xFE5
 19052                           fsr1l	equ	0xFE1
 19053                           indf2	equ	0xFDF
 19054                           postinc2	equ	0xFDE
 19055                           postdec2	equ	0xFDD
 19056                           fsr2h	equ	0xFDA
 19057                           fsr2l	equ	0xFD9
 19058                           status	equ	0xFD8
 19059                           
 19060 ;; *************** function _strstr *****************
 19061 ;; Defined at:
 19062 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strstr.c"
 19063 ;; Parameters:    Size  Location     Type
 19064 ;;  s1              2   15[BANK0 ] PTR const unsigned char 
 19065 ;;		 -> NULL(0), bufferSerial(60), 
 19066 ;;  s2              2   17[BANK0 ] PTR const unsigned char 
 19067 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 19068 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 19069 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 19070 ;;		 -> STR_6(7), STR_5(3), 
 19071 ;; Auto vars:     Size  Location     Type
 19072 ;;		None
 19073 ;; Return value:  Size  Location     Type
 19074 ;;                  2   15[BANK0 ] PTR unsigned char 
 19075 ;; Registers used:
 19076 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19077 ;; Tracked objects:
 19078 ;;		On entry : 0/0
 19079 ;;		On exit  : 0/0
 19080 ;;		Unchanged: 0/0
 19081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19082 ;;      Params:         0       4       0       0       0       0       0
 19083 ;;      Locals:         0       0       0       0       0       0       0
 19084 ;;      Temps:          0       0       0       0       0       0       0
 19085 ;;      Totals:         0       4       0       0       0       0       0
 19086 ;;Total ram usage:        4 bytes
 19087 ;; Hardware stack levels used:    1
 19088 ;; Hardware stack levels required when called:    7
 19089 ;; This function calls:
 19090 ;;		_strchr
 19091 ;;		_strlen
 19092 ;;		_strncmp
 19093 ;; This function is called by:
 19094 ;;		_aguardaBuffer
 19095 ;;		_getSerial
 19096 ;; This function uses a non-reentrant model
 19097 ;;
 19098                           
 19099                           	psect	text62
 19100  003ED4                     __ptext62:
 19101                           	opt stack 0
 19102  003ED4                     _strstr:
 19103                           	opt stack 0
 19104  003ED4  FFFF               	dw	65535	; assembler added errata NOP
 19105                           
 19106                           ;incstack = 0
 19107  003ED6  D035               	goto	l1775
 19108  003ED8  FFFF               	dw	65535	; assembler added errata NOP
 19109  003EDA  C08F  F086         	movff	strstr@s1,strncmp@s1
 19110  003EDE  C090  F087         	movff	strstr@s1+1,strncmp@s1+1
 19111  003EE2  C091  F088         	movff	strstr@s2,strncmp@s2
 19112  003EE6  C092  F089         	movff	strstr@s2+1,strncmp@s2+1
 19113  003EEA  C091  F080         	movff	strstr@s2,strlen@s
 19114  003EEE  C092  F081         	movff	strstr@s2+1,strlen@s+1
 19115  003EF2  EC34  F03A         	call	_strlen	;wreg free
 19116  003EF6  C080  F08A         	movff	?_strlen,strncmp@len
 19117  003EFA  C081  F08B         	movff	?_strlen+1,strncmp@len+1
 19118  003EFE  EC1D  F01F         	call	_strncmp	;wreg free
 19119  003F02  0100               	movlb	0	; () banked
 19120  003F04  5186               	movf	?_strncmp& (0+255),w,b
 19121  003F06  1187               	iorwf	(?_strncmp+1)& (0+255),w,b
 19122  003F08  A4D8               	btfss	status,2,c
 19123  003F0A  D005               	goto	l1777
 19124                           
 19125                           ; BSR set to: 0
 19126  003F0C  C08F  F08F         	movff	strstr@s1,?_strstr
 19127  003F10  C090  F090         	movff	strstr@s1+1,?_strstr+1
 19128                           
 19129                           ; BSR set to: 0
 19130  003F14  D028               	goto	l5177
 19131  003F16                     l1777:
 19132  003F16  FFFF               	dw	65535	; assembler added errata NOP
 19133                           
 19134                           ; BSR set to: 0
 19135                           
 19136                           ; BSR set to: 0
 19137  003F18  0E01               	movlw	1
 19138  003F1A  258F               	addwf	strstr@s1& (0+255),w,b
 19139  003F1C  6F80               	movwf	strchr@ptr& (0+255),b
 19140  003F1E  0E00               	movlw	0
 19141  003F20  2190               	addwfc	(strstr@s1+1)& (0+255),w,b
 19142  003F22  6F81               	movwf	(strchr@ptr+1)& (0+255),b
 19143  003F24  C091  FFF6         	movff	strstr@s2,tblptrl
 19144  003F28  C092  FFF7         	movff	strstr@s2+1,tblptrh
 19145  003F2C                     	if	0	;tblptru may be non-zero
 19146  003F2C                     	endif
 19147  003F2C                     	if	0	;tblptru may be non-zero
 19148  003F2C                     	endif
 19149  003F2C  0008               	tblrd		*
 19150  003F2E  FFFF               	dw	65535	; errata NOP
 19151  003F30  50F5               	movf	tablat,w,c
 19152  003F32  6F82               	movwf	strchr@chr& (0+255),b
 19153  003F34  6B83               	clrf	(strchr@chr+1)& (0+255),b
 19154  003F36  ECBC  F038         	call	_strchr	;wreg free
 19155  003F3A  C080  F08F         	movff	?_strchr,strstr@s1
 19156  003F3E  C081  F090         	movff	?_strchr+1,strstr@s1+1
 19157  003F42                     l1775:
 19158  003F42  FFFF               	dw	65535	; assembler added errata NOP
 19159  003F44  0100               	movlb	0	; () banked
 19160  003F46  518F               	movf	strstr@s1& (0+255),w,b
 19161  003F48  1190               	iorwf	(strstr@s1+1)& (0+255),w,b
 19162  003F4A  B4D8               	btfsc	status,2,c
 19163  003F4C  D007               	goto	u4860
 19164                           
 19165                           ; BSR set to: 0
 19166  003F4E  C08F  FFD9         	movff	strstr@s1,fsr2l
 19167  003F52  C090  FFDA         	movff	strstr@s1+1,fsr2h
 19168  003F56  50DF               	movf	indf2,w,c
 19169  003F58  A4D8               	btfss	status,2,c
 19170  003F5A  D7BE               	goto	l1776
 19171  003F5C                     u4860:
 19172  003F5C  FFFF               	dw	65535	; assembler added errata NOP
 19173                           
 19174                           ; BSR set to: 0
 19175                           
 19176                           ; BSR set to: 0
 19177                           
 19178                           ; BSR set to: 0
 19179  003F5E  0E00               	movlw	0
 19180  003F60  6F8F               	movwf	?_strstr& (0+255),b
 19181  003F62  0E00               	movlw	0
 19182  003F64  6F90               	movwf	(?_strstr+1)& (0+255),b
 19183  003F66                     l5177:
 19184  003F66  FFFF               	dw	65535	; assembler added errata NOP
 19185                           
 19186                           ; BSR set to: 0
 19187                           
 19188                           ; BSR set to: 0
 19189  003F68  0012               	return		;funcret
 19190  003F6A  FFFF               	dw	65535	; errata NOP
 19191  003F6C                     __end_of_strstr:
 19192                           	opt stack 0
 19193                           tosu	equ	0xFFF
 19194                           tosh	equ	0xFFE
 19195                           tosl	equ	0xFFD
 19196                           pclath	equ	0xFFA
 19197                           tblptru	equ	0xFF8
 19198                           tblptrh	equ	0xFF7
 19199                           tblptrl	equ	0xFF6
 19200                           tablat	equ	0xFF5
 19201                           prodh	equ	0xFF4
 19202                           prodl	equ	0xFF3
 19203                           intcon	equ	0xFF2
 19204                           intcon2	equ	0xFF1
 19205                           intcon3	equ	0xFF0
 19206                           indf0	equ	0xFEF
 19207                           postinc0	equ	0xFEE
 19208                           fsr0h	equ	0xFEA
 19209                           fsr0l	equ	0xFE9
 19210                           wreg	equ	0xFE8
 19211                           postdec1	equ	0xFE5
 19212                           fsr1l	equ	0xFE1
 19213                           indf2	equ	0xFDF
 19214                           postinc2	equ	0xFDE
 19215                           postdec2	equ	0xFDD
 19216                           fsr2h	equ	0xFDA
 19217                           fsr2l	equ	0xFD9
 19218                           status	equ	0xFD8
 19219                           
 19220 ;; *************** function _strncmp *****************
 19221 ;; Defined at:
 19222 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncmp.c"
 19223 ;; Parameters:    Size  Location     Type
 19224 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19225 ;;		 -> NULL(0), bufferSerial(60), 
 19226 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19227 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 19228 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 19229 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 19230 ;;		 -> STR_6(7), STR_5(3), 
 19231 ;;  len             2   10[BANK0 ] unsigned int 
 19232 ;; Auto vars:     Size  Location     Type
 19233 ;;		None
 19234 ;; Return value:  Size  Location     Type
 19235 ;;                  2    6[BANK0 ] int 
 19236 ;; Registers used:
 19237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 19238 ;; Tracked objects:
 19239 ;;		On entry : 0/0
 19240 ;;		On exit  : 0/0
 19241 ;;		Unchanged: 0/0
 19242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19243 ;;      Params:         0       6       0       0       0       0       0
 19244 ;;      Locals:         0       0       0       0       0       0       0
 19245 ;;      Temps:          0       3       0       0       0       0       0
 19246 ;;      Totals:         0       9       0       0       0       0       0
 19247 ;;Total ram usage:        9 bytes
 19248 ;; Hardware stack levels used:    1
 19249 ;; Hardware stack levels required when called:    6
 19250 ;; This function calls:
 19251 ;;		Nothing
 19252 ;; This function is called by:
 19253 ;;		_strstr
 19254 ;; This function uses a non-reentrant model
 19255 ;;
 19256                           
 19257                           	psect	text63
 19258  003E3A                     __ptext63:
 19259                           	opt stack 0
 19260  003E3A                     _strncmp:
 19261                           	opt stack 0
 19262  003E3A  FFFF               	dw	65535	; assembler added errata NOP
 19263                           
 19264                           ; BSR set to: 0
 19265                           ;incstack = 0
 19266  003E3C  D03A               	goto	l1809
 19267  003E3E  FFFF               	dw	65535	; assembler added errata NOP
 19268  003E40                     l5113:
 19269  003E40  C086  FFD9         	movff	strncmp@s1,fsr2l
 19270  003E44  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 19271  003E48  50DF               	movf	indf2,w,c
 19272  003E4A  B4D8               	btfsc	status,2,c
 19273  003E4C  D011               	goto	u4740
 19274  003E4E  C086  FFD9         	movff	strncmp@s1,fsr2l
 19275  003E52  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 19276  003E56  50DF               	movf	indf2,w,c
 19277  003E58  0100               	movlb	0	; () banked
 19278  003E5A  6F8C               	movwf	??_strncmp& (0+255),b
 19279  003E5C  C088  FFF6         	movff	strncmp@s2,tblptrl
 19280  003E60  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 19281  003E64                     	if	0	;tblptru may be non-zero
 19282  003E64                     	endif
 19283  003E64                     	if	0	;tblptru may be non-zero
 19284  003E64                     	endif
 19285  003E64  0008               	tblrd		*
 19286  003E66  FFFF               	dw	65535	; errata NOP
 19287  003E68  50F5               	movf	tablat,w,c
 19288  003E6A  198C               	xorwf	??_strncmp& (0+255),w,b
 19289  003E6C  B4D8               	btfsc	status,2,c
 19290  003E6E  D01C               	goto	l1811
 19291  003E70                     u4740:
 19292  003E70  FFFF               	dw	65535	; assembler added errata NOP
 19293                           
 19294                           ; BSR set to: 0
 19295  003E72  C088  FFF6         	movff	strncmp@s2,tblptrl
 19296  003E76  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 19297  003E7A                     	if	0	;tblptru may be non-zero
 19298  003E7A                     	endif
 19299  003E7A                     	if	0	;tblptru may be non-zero
 19300  003E7A                     	endif
 19301  003E7A  0008               	tblrd		*
 19302  003E7C  FFFF               	dw	65535	; errata NOP
 19303  003E7E  50F5               	movf	tablat,w,c
 19304  003E80  0100               	movlb	0	; () banked
 19305  003E82  6F8C               	movwf	??_strncmp& (0+255),b
 19306  003E84  6B8D               	clrf	(??_strncmp+1)& (0+255),b
 19307  003E86  1F8C               	comf	??_strncmp& (0+255),f,b
 19308  003E88  1F8D               	comf	(??_strncmp+1)& (0+255),f,b
 19309  003E8A  4B8C               	infsnz	??_strncmp& (0+255),f,b
 19310  003E8C  2B8D               	incf	(??_strncmp+1)& (0+255),f,b
 19311  003E8E  C086  FFD9         	movff	strncmp@s1,fsr2l
 19312  003E92  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 19313  003E96  50DF               	movf	indf2,w,c
 19314  003E98  6F8E               	movwf	(??_strncmp+2)& (0+255),b
 19315  003E9A  518E               	movf	(??_strncmp+2)& (0+255),w,b
 19316  003E9C  258C               	addwf	??_strncmp& (0+255),w,b
 19317  003E9E  6F86               	movwf	?_strncmp& (0+255),b
 19318  003EA0  0E00               	movlw	0
 19319  003EA2  218D               	addwfc	(??_strncmp+1)& (0+255),w,b
 19320  003EA4  6F87               	movwf	(?_strncmp+1)& (0+255),b
 19321                           
 19322                           ; BSR set to: 0
 19323  003EA6  D013               	goto	l5127
 19324  003EA8                     l1811:
 19325  003EA8  FFFF               	dw	65535	; assembler added errata NOP
 19326                           
 19327                           ; BSR set to: 0
 19328                           
 19329                           ; BSR set to: 0
 19330  003EAA  4B86               	infsnz	strncmp@s1& (0+255),f,b
 19331  003EAC  2B87               	incf	(strncmp@s1+1)& (0+255),f,b
 19332  003EAE  4B88               	infsnz	strncmp@s2& (0+255),f,b
 19333  003EB0  2B89               	incf	(strncmp@s2+1)& (0+255),f,b
 19334  003EB2                     l1809:
 19335  003EB2  FFFF               	dw	65535	; assembler added errata NOP
 19336                           
 19337                           ; BSR set to: 0
 19338  003EB4  0100               	movlb	0	; () banked
 19339  003EB6  078A               	decf	strncmp@len& (0+255),f,b
 19340  003EB8  A0D8               	btfss	status,0,c
 19341  003EBA  078B               	decf	(strncmp@len+1)& (0+255),f,b
 19342  003EBC  298A               	incf	strncmp@len& (0+255),w,b
 19343  003EBE  E1C0               	bnz	l5113
 19344  003EC0  298B               	incf	(strncmp@len+1)& (0+255),w,b
 19345  003EC2  A4D8               	btfss	status,2,c
 19346  003EC4  D7BC               	goto	l1810
 19347                           
 19348                           ; BSR set to: 0
 19349                           
 19350                           ; BSR set to: 0
 19351  003EC6  0E00               	movlw	0
 19352  003EC8  6F87               	movwf	(?_strncmp+1)& (0+255),b
 19353  003ECA  0E00               	movlw	0
 19354  003ECC  6F86               	movwf	?_strncmp& (0+255),b
 19355  003ECE                     l5127:
 19356  003ECE  FFFF               	dw	65535	; assembler added errata NOP
 19357                           
 19358                           ; BSR set to: 0
 19359                           
 19360                           ; BSR set to: 0
 19361  003ED0  0012               	return		;funcret
 19362  003ED2  FFFF               	dw	65535	; errata NOP
 19363  003ED4                     __end_of_strncmp:
 19364                           	opt stack 0
 19365                           tosu	equ	0xFFF
 19366                           tosh	equ	0xFFE
 19367                           tosl	equ	0xFFD
 19368                           pclath	equ	0xFFA
 19369                           tblptru	equ	0xFF8
 19370                           tblptrh	equ	0xFF7
 19371                           tblptrl	equ	0xFF6
 19372                           tablat	equ	0xFF5
 19373                           prodh	equ	0xFF4
 19374                           prodl	equ	0xFF3
 19375                           intcon	equ	0xFF2
 19376                           intcon2	equ	0xFF1
 19377                           intcon3	equ	0xFF0
 19378                           indf0	equ	0xFEF
 19379                           postinc0	equ	0xFEE
 19380                           fsr0h	equ	0xFEA
 19381                           fsr0l	equ	0xFE9
 19382                           wreg	equ	0xFE8
 19383                           postdec1	equ	0xFE5
 19384                           fsr1l	equ	0xFE1
 19385                           indf2	equ	0xFDF
 19386                           postinc2	equ	0xFDE
 19387                           postdec2	equ	0xFDD
 19388                           fsr2h	equ	0xFDA
 19389                           fsr2l	equ	0xFD9
 19390                           status	equ	0xFD8
 19391                           
 19392 ;; *************** function _strlen *****************
 19393 ;; Defined at:
 19394 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 19395 ;; Parameters:    Size  Location     Type
 19396 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 19397 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 19398 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 19399 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 19400 ;;		 -> STR_6(7), STR_5(3), NULL(0), bufferSerial(60), 
 19401 ;; Auto vars:     Size  Location     Type
 19402 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 19403 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 19404 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 19405 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 19406 ;;		 -> STR_6(7), STR_5(3), NULL(0), bufferSerial(60), 
 19407 ;; Return value:  Size  Location     Type
 19408 ;;                  2    0[BANK0 ] unsigned int 
 19409 ;; Registers used:
 19410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 19411 ;; Tracked objects:
 19412 ;;		On entry : 0/0
 19413 ;;		On exit  : 0/0
 19414 ;;		Unchanged: 0/0
 19415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19416 ;;      Params:         0       2       0       0       0       0       0
 19417 ;;      Locals:         0       2       0       0       0       0       0
 19418 ;;      Temps:          0       2       0       0       0       0       0
 19419 ;;      Totals:         0       6       0       0       0       0       0
 19420 ;;Total ram usage:        6 bytes
 19421 ;; Hardware stack levels used:    1
 19422 ;; Hardware stack levels required when called:    6
 19423 ;; This function calls:
 19424 ;;		Nothing
 19425 ;; This function is called by:
 19426 ;;		_getSerial
 19427 ;;		_strstr
 19428 ;; This function uses a non-reentrant model
 19429 ;;
 19430                           
 19431                           	psect	text64
 19432  007468                     __ptext64:
 19433                           	opt stack 0
 19434  007468                     _strlen:
 19435                           	opt stack 0
 19436  007468  FFFF               	dw	65535	; assembler added errata NOP
 19437                           
 19438                           ; BSR set to: 0
 19439                           ;incstack = 0
 19440  00746A  C080  F084         	movff	strlen@s,strlen@cp
 19441  00746E  C081  F085         	movff	strlen@s+1,strlen@cp+1
 19442  007472  D004               	goto	l1763
 19443  007474  FFFF               	dw	65535	; assembler added errata NOP
 19444  007476  0100               	movlb	0	; () banked
 19445  007478  4B84               	infsnz	strlen@cp& (0+255),f,b
 19446  00747A  2B85               	incf	(strlen@cp+1)& (0+255),f,b
 19447  00747C                     l1763:
 19448  00747C  FFFF               	dw	65535	; assembler added errata NOP
 19449                           
 19450                           ; BSR set to: 0
 19451  00747E  C084  FFF6         	movff	strlen@cp,tblptrl
 19452  007482  C085  FFF7         	movff	strlen@cp+1,tblptrh
 19453  007486  6AF8               	clrf	tblptru,c
 19454  007488  0E05               	movlw	(high __ramtop+-1)
 19455  00748A  64F7               	cpfsgt	tblptrh,c
 19456  00748C  D004               	bra	u4617
 19457  00748E  0008               	tblrd		*
 19458  007490  FFFF               	dw	65535	; errata NOP
 19459  007492  50F5               	movf	tablat,w,c
 19460  007494  D005               	bra	u4610
 19461  007496                     u4617:
 19462  007496  CFF6 FFE9          	movff	tblptrl,fsr0l
 19463  00749A  CFF7 FFEA          	movff	tblptrh,fsr0h
 19464  00749E  50EF               	movf	indf0,w,c
 19465  0074A0                     u4610:
 19466  0074A0  0900               	iorlw	0
 19467  0074A2  A4D8               	btfss	status,2,c
 19468  0074A4  D7E7               	goto	l1764
 19469  0074A6  C080  F082         	movff	strlen@s,??_strlen
 19470  0074AA  C081  F083         	movff	strlen@s+1,??_strlen+1
 19471  0074AE  0100               	movlb	0	; () banked
 19472  0074B0  1F82               	comf	??_strlen& (0+255),f,b
 19473  0074B2  1F83               	comf	(??_strlen+1)& (0+255),f,b
 19474  0074B4  4B82               	infsnz	??_strlen& (0+255),f,b
 19475  0074B6  2B83               	incf	(??_strlen+1)& (0+255),f,b
 19476  0074B8  5184               	movf	strlen@cp& (0+255),w,b
 19477  0074BA  2582               	addwf	??_strlen& (0+255),w,b
 19478  0074BC  6F80               	movwf	?_strlen& (0+255),b
 19479  0074BE  5185               	movf	(strlen@cp+1)& (0+255),w,b
 19480  0074C0  2183               	addwfc	(??_strlen+1)& (0+255),w,b
 19481  0074C2  6F81               	movwf	(?_strlen+1)& (0+255),b
 19482                           
 19483                           ; BSR set to: 0
 19484                           
 19485                           ; BSR set to: 0
 19486  0074C4  0012               	return		;funcret
 19487  0074C6  FFFF               	dw	65535	; errata NOP
 19488  0074C8                     __end_of_strlen:
 19489                           	opt stack 0
 19490                           tosu	equ	0xFFF
 19491                           tosh	equ	0xFFE
 19492                           tosl	equ	0xFFD
 19493                           pclath	equ	0xFFA
 19494                           tblptru	equ	0xFF8
 19495                           tblptrh	equ	0xFF7
 19496                           tblptrl	equ	0xFF6
 19497                           tablat	equ	0xFF5
 19498                           prodh	equ	0xFF4
 19499                           prodl	equ	0xFF3
 19500                           intcon	equ	0xFF2
 19501                           intcon2	equ	0xFF1
 19502                           intcon3	equ	0xFF0
 19503                           indf0	equ	0xFEF
 19504                           postinc0	equ	0xFEE
 19505                           fsr0h	equ	0xFEA
 19506                           fsr0l	equ	0xFE9
 19507                           wreg	equ	0xFE8
 19508                           postdec1	equ	0xFE5
 19509                           fsr1l	equ	0xFE1
 19510                           indf2	equ	0xFDF
 19511                           postinc2	equ	0xFDE
 19512                           postdec2	equ	0xFDD
 19513                           fsr2h	equ	0xFDA
 19514                           fsr2l	equ	0xFD9
 19515                           status	equ	0xFD8
 19516                           
 19517 ;; *************** function _strchr *****************
 19518 ;; Defined at:
 19519 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
 19520 ;; Parameters:    Size  Location     Type
 19521 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 19522 ;;		 -> NULL(0), bufferSerial(60), 
 19523 ;;  chr             2    2[BANK0 ] int 
 19524 ;; Auto vars:     Size  Location     Type
 19525 ;;		None
 19526 ;; Return value:  Size  Location     Type
 19527 ;;                  2    0[BANK0 ] PTR unsigned char 
 19528 ;; Registers used:
 19529 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19530 ;; Tracked objects:
 19531 ;;		On entry : 0/0
 19532 ;;		On exit  : 0/0
 19533 ;;		Unchanged: 0/0
 19534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19535 ;;      Params:         0       4       0       0       0       0       0
 19536 ;;      Locals:         0       0       0       0       0       0       0
 19537 ;;      Temps:          0       1       0       0       0       0       0
 19538 ;;      Totals:         0       5       0       0       0       0       0
 19539 ;;Total ram usage:        5 bytes
 19540 ;; Hardware stack levels used:    1
 19541 ;; Hardware stack levels required when called:    6
 19542 ;; This function calls:
 19543 ;;		Nothing
 19544 ;; This function is called by:
 19545 ;;		_strstr
 19546 ;; This function uses a non-reentrant model
 19547 ;;
 19548                           
 19549                           	psect	text65
 19550  007178                     __ptext65:
 19551                           	opt stack 0
 19552  007178                     _strchr:
 19553                           	opt stack 0
 19554  007178  FFFF               	dw	65535	; assembler added errata NOP
 19555                           
 19556                           ; BSR set to: 0
 19557                           ;incstack = 0
 19558  00717A  C080  FFD9         	movff	strchr@ptr,fsr2l
 19559  00717E  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 19560  007182  0100               	movlb	0	; () banked
 19561  007184  5182               	movf	strchr@chr& (0+255),w,b
 19562  007186  18DE               	xorwf	postinc2,w,c
 19563  007188  A4D8               	btfss	status,2,c
 19564  00718A  D005               	goto	l1804
 19565                           
 19566                           ; BSR set to: 0
 19567  00718C  C080  F080         	movff	strchr@ptr,?_strchr
 19568  007190  C081  F081         	movff	strchr@ptr+1,?_strchr+1
 19569                           
 19570                           ; BSR set to: 0
 19571  007194  D00E               	goto	l5139
 19572  007196                     l1804:
 19573  007196  FFFF               	dw	65535	; assembler added errata NOP
 19574                           
 19575                           ; BSR set to: 0
 19576                           
 19577                           ; BSR set to: 0
 19578  007198  C080  FFD9         	movff	strchr@ptr,fsr2l
 19579  00719C  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 19580  0071A0  4B80               	infsnz	strchr@ptr& (0+255),f,b
 19581  0071A2  2B81               	incf	(strchr@ptr+1)& (0+255),f,b
 19582  0071A4  50DF               	movf	indf2,w,c
 19583  0071A6  A4D8               	btfss	status,2,c
 19584  0071A8  D7E7               	goto	_strchr
 19585                           
 19586                           ; BSR set to: 0
 19587                           
 19588                           ; BSR set to: 0
 19589  0071AA  0E00               	movlw	0
 19590  0071AC  6F80               	movwf	?_strchr& (0+255),b
 19591  0071AE  0E00               	movlw	0
 19592  0071B0  6F81               	movwf	(?_strchr+1)& (0+255),b
 19593  0071B2                     l5139:
 19594  0071B2  FFFF               	dw	65535	; assembler added errata NOP
 19595                           
 19596                           ; BSR set to: 0
 19597                           
 19598                           ; BSR set to: 0
 19599  0071B4  0012               	return		;funcret
 19600  0071B6  FFFF               	dw	65535	; errata NOP
 19601  0071B8                     __end_of_strchr:
 19602                           	opt stack 0
 19603                           tosu	equ	0xFFF
 19604                           tosh	equ	0xFFE
 19605                           tosl	equ	0xFFD
 19606                           pclath	equ	0xFFA
 19607                           tblptru	equ	0xFF8
 19608                           tblptrh	equ	0xFF7
 19609                           tblptrl	equ	0xFF6
 19610                           tablat	equ	0xFF5
 19611                           prodh	equ	0xFF4
 19612                           prodl	equ	0xFF3
 19613                           intcon	equ	0xFF2
 19614                           intcon2	equ	0xFF1
 19615                           intcon3	equ	0xFF0
 19616                           indf0	equ	0xFEF
 19617                           postinc0	equ	0xFEE
 19618                           fsr0h	equ	0xFEA
 19619                           fsr0l	equ	0xFE9
 19620                           wreg	equ	0xFE8
 19621                           postdec1	equ	0xFE5
 19622                           fsr1l	equ	0xFE1
 19623                           indf2	equ	0xFDF
 19624                           postinc2	equ	0xFDE
 19625                           postdec2	equ	0xFDD
 19626                           fsr2h	equ	0xFDA
 19627                           fsr2l	equ	0xFD9
 19628                           status	equ	0xFD8
 19629                           
 19630 ;; *************** function _delay *****************
 19631 ;; Defined at:
 19632 ;;		line 15 in file "function.c"
 19633 ;; Parameters:    Size  Location     Type
 19634 ;;  x               2    0[BANK0 ] int 
 19635 ;; Auto vars:     Size  Location     Type
 19636 ;;		None
 19637 ;; Return value:  Size  Location     Type
 19638 ;;                  1    wreg      void 
 19639 ;; Registers used:
 19640 ;;		wreg, status,2, status,0
 19641 ;; Tracked objects:
 19642 ;;		On entry : 0/0
 19643 ;;		On exit  : 0/0
 19644 ;;		Unchanged: 0/0
 19645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19646 ;;      Params:         0       2       0       0       0       0       0
 19647 ;;      Locals:         0       0       0       0       0       0       0
 19648 ;;      Temps:          0       1       0       0       0       0       0
 19649 ;;      Totals:         0       3       0       0       0       0       0
 19650 ;;Total ram usage:        3 bytes
 19651 ;; Hardware stack levels used:    1
 19652 ;; Hardware stack levels required when called:    6
 19653 ;; This function calls:
 19654 ;;		Nothing
 19655 ;; This function is called by:
 19656 ;;		_aguardaBuffer
 19657 ;;		_limparBuffer
 19658 ;;		_getSinalSIM800L
 19659 ;;		_comunicarTeste
 19660 ;;		_enviaSMS
 19661 ;;		_writeEEPROM_ext
 19662 ;;		_main
 19663 ;; This function uses a non-reentrant model
 19664 ;;
 19665                           
 19666                           	psect	text66
 19667  006E40                     __ptext66:
 19668                           	opt stack 0
 19669  006E40                     _delay:
 19670                           	opt stack 0
 19671  006E40  FFFF               	dw	65535	; assembler added errata NOP
 19672                           
 19673                           ;function.c: 16: while (x--) {
 19674                           
 19675                           ; BSR set to: 0
 19676                           ;incstack = 0
 19677  006E42  D00C               	goto	l1067
 19678  006E44  FFFF               	dw	65535	; assembler added errata NOP
 19679  006E46                     l5181:
 19680                           
 19681                           ;function.c: 17: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 19682  006E46  0E02               	movlw	2
 19683  006E48  0100               	movlb	0	; () banked
 19684  006E4A  6F82               	movwf	??_delay& (0+255),b
 19685  006E4C  0EF2               	movlw	242
 19686  006E4E                     u9197:
 19687  006E4E  FFFF               	dw	65535	; errata NOP
 19688  006E50  2EE8               	decfsz	wreg,f,c
 19689  006E52  D7FD               	bra	u9197
 19690  006E54  2F82               	decfsz	??_delay& (0+255),f,b
 19691  006E56  D7FB               	bra	u9197
 19692  006E58  F000               	nop	
 19693  006E5A  0004               	clrwdt		;# 
 19694  006E5C                     l1067:
 19695  006E5C  FFFF               	dw	65535	; assembler added errata NOP
 19696  006E5E  0100               	movlb	0	; () banked
 19697  006E60  0780               	decf	delay@x& (0+255),f,b
 19698  006E62  A0D8               	btfss	status,0,c
 19699  006E64  0781               	decf	(delay@x+1)& (0+255),f,b
 19700  006E66  2980               	incf	delay@x& (0+255),w,b
 19701  006E68  E1EE               	bnz	l5181
 19702  006E6A  2981               	incf	(delay@x+1)& (0+255),w,b
 19703  006E6C  B4D8               	btfsc	status,2,c
 19704                           
 19705                           ; BSR set to: 0
 19706                           
 19707                           ; BSR set to: 0
 19708  006E6E  0012               	return		;funcret
 19709  006E70  FFFF               	dw	65535	; assembler added errata NOP
 19710  006E72  D7E8               	goto	l1068
 19711  006E74  FFFF               	dw	65535	; errata NOP
 19712  006E76                     __end_of_delay:
 19713                           	opt stack 0
 19714                           tosu	equ	0xFFF
 19715                           tosh	equ	0xFFE
 19716                           tosl	equ	0xFFD
 19717                           pclath	equ	0xFFA
 19718                           tblptru	equ	0xFF8
 19719                           tblptrh	equ	0xFF7
 19720                           tblptrl	equ	0xFF6
 19721                           tablat	equ	0xFF5
 19722                           prodh	equ	0xFF4
 19723                           prodl	equ	0xFF3
 19724                           intcon	equ	0xFF2
 19725                           intcon2	equ	0xFF1
 19726                           intcon3	equ	0xFF0
 19727                           indf0	equ	0xFEF
 19728                           postinc0	equ	0xFEE
 19729                           fsr0h	equ	0xFEA
 19730                           fsr0l	equ	0xFE9
 19731                           wreg	equ	0xFE8
 19732                           postdec1	equ	0xFE5
 19733                           fsr1l	equ	0xFE1
 19734                           indf2	equ	0xFDF
 19735                           postinc2	equ	0xFDE
 19736                           postdec2	equ	0xFDD
 19737                           fsr2h	equ	0xFDA
 19738                           fsr2l	equ	0xFD9
 19739                           status	equ	0xFD8
 19740                           
 19741 ;; *************** function _RTC_Init *****************
 19742 ;; Defined at:
 19743 ;;		line 98 in file "ds1307.h"
 19744 ;; Parameters:    Size  Location     Type
 19745 ;;		None
 19746 ;; Auto vars:     Size  Location     Type
 19747 ;;		None
 19748 ;; Return value:  Size  Location     Type
 19749 ;;                  1    wreg      void 
 19750 ;; Registers used:
 19751 ;;		wreg, status,2, status,0, cstack
 19752 ;; Tracked objects:
 19753 ;;		On entry : 0/0
 19754 ;;		On exit  : 0/0
 19755 ;;		Unchanged: 0/0
 19756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19757 ;;      Params:         0       0       0       0       0       0       0
 19758 ;;      Locals:         0       0       0       0       0       0       0
 19759 ;;      Temps:          0       0       0       0       0       0       0
 19760 ;;      Totals:         0       0       0       0       0       0       0
 19761 ;;Total ram usage:        0 bytes
 19762 ;; Hardware stack levels used:    1
 19763 ;; Hardware stack levels required when called:    8
 19764 ;; This function calls:
 19765 ;;		_I2C_Start
 19766 ;;		_I2C_Stop
 19767 ;;		_I2C_Write
 19768 ;; This function is called by:
 19769 ;;		_main
 19770 ;; This function uses a non-reentrant model
 19771 ;;
 19772                           
 19773                           	psect	text67
 19774  006EAC                     __ptext67:
 19775                           	opt stack 0
 19776  006EAC                     _RTC_Init:
 19777                           	opt stack 0
 19778  006EAC  FFFF               	dw	65535	; assembler added errata NOP
 19779                           
 19780                           ;ds1307.h: 99: I2C_Start();
 19781                           
 19782                           ; BSR set to: 0
 19783                           ;incstack = 0
 19784  006EAE  ECC8  F035         	call	_I2C_Start	;wreg free
 19785                           
 19786                           ;ds1307.h: 100: I2C_Write(0xD0);
 19787  006EB2  0E00               	movlw	0
 19788  006EB4  0100               	movlb	0	; () banked
 19789  006EB6  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 19790  006EB8  0ED0               	movlw	208
 19791  006EBA  6F8A               	movwf	I2C_Write@d& (0+255),b
 19792  006EBC  ECE1  F035         	call	_I2C_Write	;wreg free
 19793                           
 19794                           ;ds1307.h: 101: I2C_Write(0x07);
 19795  006EC0  0E00               	movlw	0
 19796  006EC2  0100               	movlb	0	; () banked
 19797  006EC4  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 19798  006EC6  0E07               	movlw	7
 19799  006EC8  6F8A               	movwf	I2C_Write@d& (0+255),b
 19800  006ECA  ECE1  F035         	call	_I2C_Write	;wreg free
 19801                           
 19802                           ;ds1307.h: 102: I2C_Write(0x00);
 19803  006ECE  0E00               	movlw	0
 19804  006ED0  0100               	movlb	0	; () banked
 19805  006ED2  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 19806  006ED4  0E00               	movlw	0
 19807  006ED6  6F8A               	movwf	I2C_Write@d& (0+255),b
 19808  006ED8  ECE1  F035         	call	_I2C_Write	;wreg free
 19809                           
 19810                           ;ds1307.h: 103: I2C_Stop();
 19811  006EDC  ECCE  F035         	call	_I2C_Stop	;wreg free
 19812  006EE0  0012               	return		;funcret
 19813  006EE2  FFFF               	dw	65535	; errata NOP
 19814  006EE4                     __end_of_RTC_Init:
 19815                           	opt stack 0
 19816                           tosu	equ	0xFFF
 19817                           tosh	equ	0xFFE
 19818                           tosl	equ	0xFFD
 19819                           pclath	equ	0xFFA
 19820                           tblptru	equ	0xFF8
 19821                           tblptrh	equ	0xFF7
 19822                           tblptrl	equ	0xFF6
 19823                           tablat	equ	0xFF5
 19824                           prodh	equ	0xFF4
 19825                           prodl	equ	0xFF3
 19826                           intcon	equ	0xFF2
 19827                           intcon2	equ	0xFF1
 19828                           intcon3	equ	0xFF0
 19829                           indf0	equ	0xFEF
 19830                           postinc0	equ	0xFEE
 19831                           fsr0h	equ	0xFEA
 19832                           fsr0l	equ	0xFE9
 19833                           wreg	equ	0xFE8
 19834                           postdec1	equ	0xFE5
 19835                           fsr1l	equ	0xFE1
 19836                           indf2	equ	0xFDF
 19837                           postinc2	equ	0xFDE
 19838                           postdec2	equ	0xFDD
 19839                           fsr2h	equ	0xFDA
 19840                           fsr2l	equ	0xFD9
 19841                           status	equ	0xFD8
 19842                           
 19843 ;; *************** function _I2C_Write *****************
 19844 ;; Defined at:
 19845 ;;		line 42 in file "I2C.c"
 19846 ;; Parameters:    Size  Location     Type
 19847 ;;  d               2   10[BANK0 ] unsigned int 
 19848 ;; Auto vars:     Size  Location     Type
 19849 ;;		None
 19850 ;; Return value:  Size  Location     Type
 19851 ;;                  1    wreg      void 
 19852 ;; Registers used:
 19853 ;;		wreg, status,2, status,0, cstack
 19854 ;; Tracked objects:
 19855 ;;		On entry : 0/0
 19856 ;;		On exit  : 0/0
 19857 ;;		Unchanged: 0/0
 19858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19859 ;;      Params:         0       2       0       0       0       0       0
 19860 ;;      Locals:         0       0       0       0       0       0       0
 19861 ;;      Temps:          0       0       0       0       0       0       0
 19862 ;;      Totals:         0       2       0       0       0       0       0
 19863 ;;Total ram usage:        2 bytes
 19864 ;; Hardware stack levels used:    1
 19865 ;; Hardware stack levels required when called:    7
 19866 ;; This function calls:
 19867 ;;		_I2C_Wait
 19868 ;; This function is called by:
 19869 ;;		_setDS1307TimeDate
 19870 ;;		_getDS1307TimeDate
 19871 ;;		_RTC_Init
 19872 ;;		_writeEEPROM_ext
 19873 ;;		_readEEPROM_ext
 19874 ;;		_getDS1307Time
 19875 ;;		_setDS1307Time
 19876 ;; This function uses a non-reentrant model
 19877 ;;
 19878                           
 19879                           	psect	text68
 19880  006BC2                     __ptext68:
 19881                           	opt stack 0
 19882  006BC2                     _I2C_Write:
 19883                           	opt stack 0
 19884  006BC2  FFFF               	dw	65535	; assembler added errata NOP
 19885                           
 19886                           ;I2C.c: 43: I2C_Wait();
 19887                           
 19888                           ;incstack = 0
 19889  006BC4  EC19  F036         	call	_I2C_Wait	;wreg free
 19890                           
 19891                           ;I2C.c: 44: SSPBUF = d;
 19892  006BC8  C08A  FFC9         	movff	I2C_Write@d,4041	;volatile
 19893  006BCC  0012               	return		;funcret
 19894  006BCE  FFFF               	dw	65535	; errata NOP
 19895  006BD0                     __end_of_I2C_Write:
 19896                           	opt stack 0
 19897                           tosu	equ	0xFFF
 19898                           tosh	equ	0xFFE
 19899                           tosl	equ	0xFFD
 19900                           pclath	equ	0xFFA
 19901                           tblptru	equ	0xFF8
 19902                           tblptrh	equ	0xFF7
 19903                           tblptrl	equ	0xFF6
 19904                           tablat	equ	0xFF5
 19905                           prodh	equ	0xFF4
 19906                           prodl	equ	0xFF3
 19907                           intcon	equ	0xFF2
 19908                           intcon2	equ	0xFF1
 19909                           intcon3	equ	0xFF0
 19910                           indf0	equ	0xFEF
 19911                           postinc0	equ	0xFEE
 19912                           fsr0h	equ	0xFEA
 19913                           fsr0l	equ	0xFE9
 19914                           wreg	equ	0xFE8
 19915                           postdec1	equ	0xFE5
 19916                           fsr1l	equ	0xFE1
 19917                           indf2	equ	0xFDF
 19918                           postinc2	equ	0xFDE
 19919                           postdec2	equ	0xFDD
 19920                           fsr2h	equ	0xFDA
 19921                           fsr2l	equ	0xFD9
 19922                           status	equ	0xFD8
 19923                           
 19924 ;; *************** function _I2C_Stop *****************
 19925 ;; Defined at:
 19926 ;;		line 36 in file "I2C.c"
 19927 ;; Parameters:    Size  Location     Type
 19928 ;;		None
 19929 ;; Auto vars:     Size  Location     Type
 19930 ;;		None
 19931 ;; Return value:  Size  Location     Type
 19932 ;;                  1    wreg      void 
 19933 ;; Registers used:
 19934 ;;		wreg, status,2, status,0, cstack
 19935 ;; Tracked objects:
 19936 ;;		On entry : 0/0
 19937 ;;		On exit  : 0/0
 19938 ;;		Unchanged: 0/0
 19939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19940 ;;      Params:         0       0       0       0       0       0       0
 19941 ;;      Locals:         0       0       0       0       0       0       0
 19942 ;;      Temps:          0       0       0       0       0       0       0
 19943 ;;      Totals:         0       0       0       0       0       0       0
 19944 ;;Total ram usage:        0 bytes
 19945 ;; Hardware stack levels used:    1
 19946 ;; Hardware stack levels required when called:    7
 19947 ;; This function calls:
 19948 ;;		_I2C_Wait
 19949 ;; This function is called by:
 19950 ;;		_setDS1307TimeDate
 19951 ;;		_getDS1307TimeDate
 19952 ;;		_RTC_Init
 19953 ;;		_writeEEPROM_ext
 19954 ;;		_readEEPROM_ext
 19955 ;;		_getDS1307Time
 19956 ;;		_setDS1307Time
 19957 ;; This function uses a non-reentrant model
 19958 ;;
 19959                           
 19960                           	psect	text69
 19961  006B9C                     __ptext69:
 19962                           	opt stack 0
 19963  006B9C                     _I2C_Stop:
 19964                           	opt stack 0
 19965  006B9C  FFFF               	dw	65535	; assembler added errata NOP
 19966                           
 19967                           ;I2C.c: 37: I2C_Wait();
 19968                           
 19969                           ;incstack = 0
 19970  006B9E  EC19  F036         	call	_I2C_Wait	;wreg free
 19971                           
 19972                           ;I2C.c: 38: PEN = 1;
 19973  006BA2  84C5               	bsf	4037,2,c	;volatile
 19974  006BA4  0012               	return		;funcret
 19975  006BA6  FFFF               	dw	65535	; errata NOP
 19976  006BA8                     __end_of_I2C_Stop:
 19977                           	opt stack 0
 19978                           tosu	equ	0xFFF
 19979                           tosh	equ	0xFFE
 19980                           tosl	equ	0xFFD
 19981                           pclath	equ	0xFFA
 19982                           tblptru	equ	0xFF8
 19983                           tblptrh	equ	0xFF7
 19984                           tblptrl	equ	0xFF6
 19985                           tablat	equ	0xFF5
 19986                           prodh	equ	0xFF4
 19987                           prodl	equ	0xFF3
 19988                           intcon	equ	0xFF2
 19989                           intcon2	equ	0xFF1
 19990                           intcon3	equ	0xFF0
 19991                           indf0	equ	0xFEF
 19992                           postinc0	equ	0xFEE
 19993                           fsr0h	equ	0xFEA
 19994                           fsr0l	equ	0xFE9
 19995                           wreg	equ	0xFE8
 19996                           postdec1	equ	0xFE5
 19997                           fsr1l	equ	0xFE1
 19998                           indf2	equ	0xFDF
 19999                           postinc2	equ	0xFDE
 20000                           postdec2	equ	0xFDD
 20001                           fsr2h	equ	0xFDA
 20002                           fsr2l	equ	0xFD9
 20003                           status	equ	0xFD8
 20004                           
 20005 ;; *************** function _I2C_Start *****************
 20006 ;; Defined at:
 20007 ;;		line 26 in file "I2C.c"
 20008 ;; Parameters:    Size  Location     Type
 20009 ;;		None
 20010 ;; Auto vars:     Size  Location     Type
 20011 ;;		None
 20012 ;; Return value:  Size  Location     Type
 20013 ;;                  1    wreg      void 
 20014 ;; Registers used:
 20015 ;;		wreg, status,2, status,0, cstack
 20016 ;; Tracked objects:
 20017 ;;		On entry : 0/0
 20018 ;;		On exit  : 0/0
 20019 ;;		Unchanged: 0/0
 20020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20021 ;;      Params:         0       0       0       0       0       0       0
 20022 ;;      Locals:         0       0       0       0       0       0       0
 20023 ;;      Temps:          0       0       0       0       0       0       0
 20024 ;;      Totals:         0       0       0       0       0       0       0
 20025 ;;Total ram usage:        0 bytes
 20026 ;; Hardware stack levels used:    1
 20027 ;; Hardware stack levels required when called:    7
 20028 ;; This function calls:
 20029 ;;		_I2C_Wait
 20030 ;; This function is called by:
 20031 ;;		_setDS1307TimeDate
 20032 ;;		_getDS1307TimeDate
 20033 ;;		_RTC_Init
 20034 ;;		_writeEEPROM_ext
 20035 ;;		_readEEPROM_ext
 20036 ;;		_getDS1307Time
 20037 ;;		_setDS1307Time
 20038 ;; This function uses a non-reentrant model
 20039 ;;
 20040                           
 20041                           	psect	text70
 20042  006B90                     __ptext70:
 20043                           	opt stack 0
 20044  006B90                     _I2C_Start:
 20045                           	opt stack 0
 20046  006B90  FFFF               	dw	65535	; assembler added errata NOP
 20047                           
 20048                           ;I2C.c: 27: I2C_Wait();
 20049                           
 20050                           ;incstack = 0
 20051  006B92  EC19  F036         	call	_I2C_Wait	;wreg free
 20052                           
 20053                           ;I2C.c: 28: SEN = 1;
 20054  006B96  80C5               	bsf	4037,0,c	;volatile
 20055  006B98  0012               	return		;funcret
 20056  006B9A  FFFF               	dw	65535	; errata NOP
 20057  006B9C                     __end_of_I2C_Start:
 20058                           	opt stack 0
 20059                           tosu	equ	0xFFF
 20060                           tosh	equ	0xFFE
 20061                           tosl	equ	0xFFD
 20062                           pclath	equ	0xFFA
 20063                           tblptru	equ	0xFF8
 20064                           tblptrh	equ	0xFF7
 20065                           tblptrl	equ	0xFF6
 20066                           tablat	equ	0xFF5
 20067                           prodh	equ	0xFF4
 20068                           prodl	equ	0xFF3
 20069                           intcon	equ	0xFF2
 20070                           intcon2	equ	0xFF1
 20071                           intcon3	equ	0xFF0
 20072                           indf0	equ	0xFEF
 20073                           postinc0	equ	0xFEE
 20074                           fsr0h	equ	0xFEA
 20075                           fsr0l	equ	0xFE9
 20076                           wreg	equ	0xFE8
 20077                           postdec1	equ	0xFE5
 20078                           fsr1l	equ	0xFE1
 20079                           indf2	equ	0xFDF
 20080                           postinc2	equ	0xFDE
 20081                           postdec2	equ	0xFDD
 20082                           fsr2h	equ	0xFDA
 20083                           fsr2l	equ	0xFD9
 20084                           status	equ	0xFD8
 20085                           
 20086 ;; *************** function _I2C_Wait *****************
 20087 ;; Defined at:
 20088 ;;		line 22 in file "I2C.c"
 20089 ;; Parameters:    Size  Location     Type
 20090 ;;		None
 20091 ;; Auto vars:     Size  Location     Type
 20092 ;;		None
 20093 ;; Return value:  Size  Location     Type
 20094 ;;                  1    wreg      void 
 20095 ;; Registers used:
 20096 ;;		wreg, status,2, status,0
 20097 ;; Tracked objects:
 20098 ;;		On entry : 0/0
 20099 ;;		On exit  : 0/0
 20100 ;;		Unchanged: 0/0
 20101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20102 ;;      Params:         0       0       0       0       0       0       0
 20103 ;;      Locals:         0       0       0       0       0       0       0
 20104 ;;      Temps:          0       1       0       0       0       0       0
 20105 ;;      Totals:         0       1       0       0       0       0       0
 20106 ;;Total ram usage:        1 bytes
 20107 ;; Hardware stack levels used:    1
 20108 ;; Hardware stack levels required when called:    6
 20109 ;; This function calls:
 20110 ;;		Nothing
 20111 ;; This function is called by:
 20112 ;;		_I2C_Start
 20113 ;;		_I2C_Restart
 20114 ;;		_I2C_Stop
 20115 ;;		_I2C_Write
 20116 ;;		_I2C_Read
 20117 ;; This function uses a non-reentrant model
 20118 ;;
 20119                           
 20120                           	psect	text71
 20121  006C32                     __ptext71:
 20122                           	opt stack 0
 20123  006C32                     _I2C_Wait:
 20124                           	opt stack 0
 20125  006C32  FFFF               	dw	65535	; assembler added errata NOP
 20126                           
 20127                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 20128                           
 20129                           ;incstack = 0
 20130  006C34  B4C7               	btfsc	4039,2,c	;volatile
 20131  006C36  D7FD               	goto	_I2C_Wait
 20132  006C38  CFC5 F080          	movff	4037,??_I2C_Wait	;volatile
 20133  006C3C  0E1F               	movlw	31
 20134  006C3E  0100               	movlb	0	; () banked
 20135  006C40  1780               	andwf	??_I2C_Wait& (0+255),f,b
 20136  006C42  B4D8               	btfsc	status,2,c
 20137                           
 20138                           ; BSR set to: 0
 20139                           
 20140                           ; BSR set to: 0
 20141  006C44  0012               	return		;funcret
 20142  006C46  FFFF               	dw	65535	; assembler added errata NOP
 20143  006C48  D7F4               	goto	_I2C_Wait
 20144  006C4A  FFFF               	dw	65535	; errata NOP
 20145  006C4C                     __end_of_I2C_Wait:
 20146                           	opt stack 0
 20147                           tosu	equ	0xFFF
 20148                           tosh	equ	0xFFE
 20149                           tosl	equ	0xFFD
 20150                           pclath	equ	0xFFA
 20151                           tblptru	equ	0xFF8
 20152                           tblptrh	equ	0xFF7
 20153                           tblptrl	equ	0xFF6
 20154                           tablat	equ	0xFF5
 20155                           prodh	equ	0xFF4
 20156                           prodl	equ	0xFF3
 20157                           intcon	equ	0xFF2
 20158                           intcon2	equ	0xFF1
 20159                           intcon3	equ	0xFF0
 20160                           indf0	equ	0xFEF
 20161                           postinc0	equ	0xFEE
 20162                           fsr0h	equ	0xFEA
 20163                           fsr0l	equ	0xFE9
 20164                           wreg	equ	0xFE8
 20165                           postdec1	equ	0xFE5
 20166                           fsr1l	equ	0xFE1
 20167                           indf2	equ	0xFDF
 20168                           postinc2	equ	0xFDE
 20169                           postdec2	equ	0xFDD
 20170                           fsr2h	equ	0xFDA
 20171                           fsr2l	equ	0xFD9
 20172                           status	equ	0xFD8
 20173                           
 20174 ;; *************** function _Lcd_Clear *****************
 20175 ;; Defined at:
 20176 ;;		line 69 in file "lcd.h"
 20177 ;; Parameters:    Size  Location     Type
 20178 ;;		None
 20179 ;; Auto vars:     Size  Location     Type
 20180 ;;		None
 20181 ;; Return value:  Size  Location     Type
 20182 ;;                  1    wreg      void 
 20183 ;; Registers used:
 20184 ;;		wreg, status,2, cstack
 20185 ;; Tracked objects:
 20186 ;;		On entry : 0/0
 20187 ;;		On exit  : 0/0
 20188 ;;		Unchanged: 0/0
 20189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20190 ;;      Params:         0       0       0       0       0       0       0
 20191 ;;      Locals:         0       0       0       0       0       0       0
 20192 ;;      Temps:          0       0       0       0       0       0       0
 20193 ;;      Totals:         0       0       0       0       0       0       0
 20194 ;;Total ram usage:        0 bytes
 20195 ;; Hardware stack levels used:    1
 20196 ;; Hardware stack levels required when called:    8
 20197 ;; This function calls:
 20198 ;;		_Lcd_Cmd
 20199 ;; This function is called by:
 20200 ;;		_main
 20201 ;; This function uses a non-reentrant model
 20202 ;;
 20203                           
 20204                           	psect	text72
 20205  006BDE                     __ptext72:
 20206                           	opt stack 0
 20207  006BDE                     _Lcd_Clear:
 20208                           	opt stack 0
 20209  006BDE  FFFF               	dw	65535	; assembler added errata NOP
 20210                           
 20211                           ;lcd.h: 70: Lcd_Cmd(0);
 20212                           
 20213                           ; BSR set to: 0
 20214                           ;incstack = 0
 20215  006BE0  0E00               	movlw	0
 20216  006BE2  EC8F  F036         	call	_Lcd_Cmd
 20217                           
 20218                           ;lcd.h: 71: Lcd_Cmd(1);
 20219  006BE6  0E01               	movlw	1
 20220  006BE8  EC8F  F036         	call	_Lcd_Cmd
 20221  006BEC  0012               	return		;funcret
 20222  006BEE  FFFF               	dw	65535	; errata NOP
 20223  006BF0                     __end_of_Lcd_Clear:
 20224                           	opt stack 0
 20225                           tosu	equ	0xFFF
 20226                           tosh	equ	0xFFE
 20227                           tosl	equ	0xFFD
 20228                           pclath	equ	0xFFA
 20229                           tblptru	equ	0xFF8
 20230                           tblptrh	equ	0xFF7
 20231                           tblptrl	equ	0xFF6
 20232                           tablat	equ	0xFF5
 20233                           prodh	equ	0xFF4
 20234                           prodl	equ	0xFF3
 20235                           intcon	equ	0xFF2
 20236                           intcon2	equ	0xFF1
 20237                           intcon3	equ	0xFF0
 20238                           indf0	equ	0xFEF
 20239                           postinc0	equ	0xFEE
 20240                           fsr0h	equ	0xFEA
 20241                           fsr0l	equ	0xFE9
 20242                           wreg	equ	0xFE8
 20243                           postdec1	equ	0xFE5
 20244                           fsr1l	equ	0xFE1
 20245                           indf2	equ	0xFDF
 20246                           postinc2	equ	0xFDE
 20247                           postdec2	equ	0xFDD
 20248                           fsr2h	equ	0xFDA
 20249                           fsr2l	equ	0xFD9
 20250                           status	equ	0xFD8
 20251                           
 20252 ;; *************** function _Lcd_Cmd *****************
 20253 ;; Defined at:
 20254 ;;		line 61 in file "lcd.h"
 20255 ;; Parameters:    Size  Location     Type
 20256 ;;  a               1    wreg     unsigned char 
 20257 ;; Auto vars:     Size  Location     Type
 20258 ;;  a               1    2[BANK0 ] unsigned char 
 20259 ;; Return value:  Size  Location     Type
 20260 ;;                  1    wreg      void 
 20261 ;; Registers used:
 20262 ;;		wreg, status,2, cstack
 20263 ;; Tracked objects:
 20264 ;;		On entry : 0/0
 20265 ;;		On exit  : 0/0
 20266 ;;		Unchanged: 0/0
 20267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20268 ;;      Params:         0       0       0       0       0       0       0
 20269 ;;      Locals:         0       1       0       0       0       0       0
 20270 ;;      Temps:          0       1       0       0       0       0       0
 20271 ;;      Totals:         0       2       0       0       0       0       0
 20272 ;;Total ram usage:        2 bytes
 20273 ;; Hardware stack levels used:    1
 20274 ;; Hardware stack levels required when called:    7
 20275 ;; This function calls:
 20276 ;;		_Lcd_Port
 20277 ;; This function is called by:
 20278 ;;		_Lcd_Init
 20279 ;;		_Lcd_Clear
 20280 ;;		_Lcd_Set_Cursor
 20281 ;;		_criarCaracteresCGRAM
 20282 ;; This function uses a non-reentrant model
 20283 ;;
 20284                           
 20285                           	psect	text73
 20286  006D1E                     __ptext73:
 20287                           	opt stack 0
 20288  006D1E                     _Lcd_Cmd:
 20289                           	opt stack 0
 20290  006D1E  FFFF               	dw	65535	; assembler added errata NOP
 20291                           
 20292                           ;incstack = 0
 20293                           ;Lcd_Cmd@a stored from wreg
 20294  006D20  0100               	movlb	0	; () banked
 20295  006D22  6F82               	movwf	Lcd_Cmd@a& (0+255),b
 20296                           
 20297                           ;lcd.h: 62: PORTDbits.RD1 = 0;
 20298  006D24  9283               	bcf	3971,1,c	;volatile
 20299                           
 20300                           ;lcd.h: 63: Lcd_Port(a);
 20301  006D26  0100               	movlb	0	; () banked
 20302  006D28  5182               	movf	Lcd_Cmd@a& (0+255),w,b
 20303  006D2A  ECFD  F038         	call	_Lcd_Port
 20304                           
 20305                           ;lcd.h: 64: PORTDbits.RD0 = 1;
 20306  006D2E  8083               	bsf	3971,0,c	;volatile
 20307                           
 20308                           ;lcd.h: 65: _delay((unsigned long)((15)*(8000000/4000.0)));
 20309  006D30  0E1E               	movlw	30
 20310  006D32  0100               	movlb	0	; () banked
 20311  006D34  6F81               	movwf	??_Lcd_Cmd& (0+255),b
 20312  006D36  0E3C               	movlw	60
 20313  006D38                     u9207:
 20314  006D38  FFFF               	dw	65535	; errata NOP
 20315  006D3A  2EE8               	decfsz	wreg,f,c
 20316  006D3C  D7FD               	bra	u9207
 20317  006D3E  2F81               	decfsz	??_Lcd_Cmd& (0+255),f,b
 20318  006D40  D7FB               	bra	u9207
 20319  006D42  F000               	nop	
 20320                           
 20321                           ;lcd.h: 66: PORTDbits.RD0 = 0;
 20322  006D44  9083               	bcf	3971,0,c	;volatile
 20323  006D46  0012               	return		;funcret
 20324  006D48  FFFF               	dw	65535	; errata NOP
 20325  006D4A                     __end_of_Lcd_Cmd:
 20326                           	opt stack 0
 20327                           tosu	equ	0xFFF
 20328                           tosh	equ	0xFFE
 20329                           tosl	equ	0xFFD
 20330                           pclath	equ	0xFFA
 20331                           tblptru	equ	0xFF8
 20332                           tblptrh	equ	0xFF7
 20333                           tblptrl	equ	0xFF6
 20334                           tablat	equ	0xFF5
 20335                           prodh	equ	0xFF4
 20336                           prodl	equ	0xFF3
 20337                           intcon	equ	0xFF2
 20338                           intcon2	equ	0xFF1
 20339                           intcon3	equ	0xFF0
 20340                           indf0	equ	0xFEF
 20341                           postinc0	equ	0xFEE
 20342                           fsr0h	equ	0xFEA
 20343                           fsr0l	equ	0xFE9
 20344                           wreg	equ	0xFE8
 20345                           postdec1	equ	0xFE5
 20346                           fsr1l	equ	0xFE1
 20347                           indf2	equ	0xFDF
 20348                           postinc2	equ	0xFDE
 20349                           postdec2	equ	0xFDD
 20350                           fsr2h	equ	0xFDA
 20351                           fsr2l	equ	0xFD9
 20352                           status	equ	0xFD8
 20353                           
 20354 ;; *************** function _Lcd_Port *****************
 20355 ;; Defined at:
 20356 ;;		line 39 in file "lcd.h"
 20357 ;; Parameters:    Size  Location     Type
 20358 ;;  a               1    wreg     unsigned char 
 20359 ;; Auto vars:     Size  Location     Type
 20360 ;;  a               1    0[BANK0 ] unsigned char 
 20361 ;; Return value:  Size  Location     Type
 20362 ;;                  1    wreg      void 
 20363 ;; Registers used:
 20364 ;;		wreg
 20365 ;; Tracked objects:
 20366 ;;		On entry : 0/0
 20367 ;;		On exit  : 0/0
 20368 ;;		Unchanged: 0/0
 20369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20370 ;;      Params:         0       0       0       0       0       0       0
 20371 ;;      Locals:         0       1       0       0       0       0       0
 20372 ;;      Temps:          0       0       0       0       0       0       0
 20373 ;;      Totals:         0       1       0       0       0       0       0
 20374 ;;Total ram usage:        1 bytes
 20375 ;; Hardware stack levels used:    1
 20376 ;; Hardware stack levels required when called:    6
 20377 ;; This function calls:
 20378 ;;		Nothing
 20379 ;; This function is called by:
 20380 ;;		_Lcd_Init
 20381 ;;		_Lcd_Cmd
 20382 ;;		_Lcd_Write_Char
 20383 ;; This function uses a non-reentrant model
 20384 ;;
 20385                           
 20386                           	psect	text74
 20387  0071FA                     __ptext74:
 20388                           	opt stack 0
 20389  0071FA                     _Lcd_Port:
 20390                           	opt stack 0
 20391  0071FA  FFFF               	dw	65535	; assembler added errata NOP
 20392                           
 20393                           ;incstack = 0
 20394                           ;Lcd_Port@a stored from wreg
 20395  0071FC  0100               	movlb	0	; () banked
 20396  0071FE  6F80               	movwf	Lcd_Port@a& (0+255),b
 20397                           
 20398                           ;lcd.h: 40: if (a & 1)
 20399  007200  0100               	movlb	0	; () banked
 20400  007202  A180               	btfss	Lcd_Port@a& (0+255),0,b
 20401  007204  D002               	goto	l598
 20402                           
 20403                           ; BSR set to: 0
 20404                           ;lcd.h: 41: PORTDbits.RD2 = 1;
 20405  007206  8483               	bsf	3971,2,c	;volatile
 20406  007208  D002               	goto	l599
 20407  00720A                     l598:
 20408  00720A  FFFF               	dw	65535	; assembler added errata NOP
 20409                           
 20410                           ; BSR set to: 0
 20411                           ;lcd.h: 42: else
 20412                           ;lcd.h: 43: PORTDbits.RD2 = 0;
 20413  00720C  9483               	bcf	3971,2,c	;volatile
 20414  00720E                     l599:
 20415  00720E  FFFF               	dw	65535	; assembler added errata NOP
 20416                           
 20417                           ; BSR set to: 0
 20418                           ;lcd.h: 45: if (a & 2)
 20419                           
 20420                           ; BSR set to: 0
 20421  007210  A380               	btfss	Lcd_Port@a& (0+255),1,b
 20422  007212  D002               	goto	l600
 20423                           
 20424                           ; BSR set to: 0
 20425                           ;lcd.h: 46: PORTDbits.RD3 = 1;
 20426  007214  8683               	bsf	3971,3,c	;volatile
 20427  007216  D002               	goto	l601
 20428  007218                     l600:
 20429  007218  FFFF               	dw	65535	; assembler added errata NOP
 20430                           
 20431                           ; BSR set to: 0
 20432                           ;lcd.h: 47: else
 20433                           ;lcd.h: 48: PORTDbits.RD3 = 0;
 20434  00721A  9683               	bcf	3971,3,c	;volatile
 20435  00721C                     l601:
 20436  00721C  FFFF               	dw	65535	; assembler added errata NOP
 20437                           
 20438                           ; BSR set to: 0
 20439                           ;lcd.h: 50: if (a & 4)
 20440                           
 20441                           ; BSR set to: 0
 20442  00721E  A580               	btfss	Lcd_Port@a& (0+255),2,b
 20443  007220  D002               	goto	l602
 20444                           
 20445                           ; BSR set to: 0
 20446                           ;lcd.h: 51: PORTDbits.RD4 = 1;
 20447  007222  8883               	bsf	3971,4,c	;volatile
 20448  007224  D002               	goto	l603
 20449  007226                     l602:
 20450  007226  FFFF               	dw	65535	; assembler added errata NOP
 20451                           
 20452                           ; BSR set to: 0
 20453                           ;lcd.h: 52: else
 20454                           ;lcd.h: 53: PORTDbits.RD4 = 0;
 20455  007228  9883               	bcf	3971,4,c	;volatile
 20456  00722A                     l603:
 20457  00722A  FFFF               	dw	65535	; assembler added errata NOP
 20458                           
 20459                           ; BSR set to: 0
 20460                           ;lcd.h: 55: if (a & 8)
 20461                           
 20462                           ; BSR set to: 0
 20463  00722C  A780               	btfss	Lcd_Port@a& (0+255),3,b
 20464  00722E  D002               	goto	l604
 20465                           
 20466                           ; BSR set to: 0
 20467                           ;lcd.h: 56: PORTDbits.RD5 = 1;
 20468  007230  8A83               	bsf	3971,5,c	;volatile
 20469  007232  D002               	goto	l605
 20470  007234                     l604:
 20471  007234  FFFF               	dw	65535	; assembler added errata NOP
 20472                           
 20473                           ; BSR set to: 0
 20474                           ;lcd.h: 57: else
 20475                           ;lcd.h: 58: PORTDbits.RD5 = 0;
 20476  007236  9A83               	bcf	3971,5,c	;volatile
 20477  007238                     l605:
 20478  007238  FFFF               	dw	65535	; assembler added errata NOP
 20479                           
 20480                           ; BSR set to: 0
 20481                           
 20482                           ; BSR set to: 0
 20483  00723A  0012               	return		;funcret
 20484  00723C  FFFF               	dw	65535	; errata NOP
 20485  00723E                     __end_of_Lcd_Port:
 20486                           	opt stack 0
 20487                           tosu	equ	0xFFF
 20488                           tosh	equ	0xFFE
 20489                           tosl	equ	0xFFD
 20490                           pclath	equ	0xFFA
 20491                           tblptru	equ	0xFF8
 20492                           tblptrh	equ	0xFF7
 20493                           tblptrl	equ	0xFF6
 20494                           tablat	equ	0xFF5
 20495                           prodh	equ	0xFF4
 20496                           prodl	equ	0xFF3
 20497                           intcon	equ	0xFF2
 20498                           intcon2	equ	0xFF1
 20499                           intcon3	equ	0xFF0
 20500                           indf0	equ	0xFEF
 20501                           postinc0	equ	0xFEE
 20502                           fsr0h	equ	0xFEA
 20503                           fsr0l	equ	0xFE9
 20504                           wreg	equ	0xFE8
 20505                           postdec1	equ	0xFE5
 20506                           fsr1l	equ	0xFE1
 20507                           indf2	equ	0xFDF
 20508                           postinc2	equ	0xFDE
 20509                           postdec2	equ	0xFDD
 20510                           fsr2h	equ	0xFDA
 20511                           fsr2l	equ	0xFD9
 20512                           status	equ	0xFD8
 20513                           
 20514 ;; *************** function _I2C_Master_Init *****************
 20515 ;; Defined at:
 20516 ;;		line 13 in file "I2C.c"
 20517 ;; Parameters:    Size  Location     Type
 20518 ;;  c               4   13[BANK0 ] const unsigned long 
 20519 ;; Auto vars:     Size  Location     Type
 20520 ;;		None
 20521 ;; Return value:  Size  Location     Type
 20522 ;;                  1    wreg      void 
 20523 ;; Registers used:
 20524 ;;		wreg, status,2, status,0, cstack
 20525 ;; Tracked objects:
 20526 ;;		On entry : 0/0
 20527 ;;		On exit  : 0/0
 20528 ;;		Unchanged: 0/0
 20529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20530 ;;      Params:         0       4       0       0       0       0       0
 20531 ;;      Locals:         0       0       0       0       0       0       0
 20532 ;;      Temps:          0       4       0       0       0       0       0
 20533 ;;      Totals:         0       8       0       0       0       0       0
 20534 ;;Total ram usage:        8 bytes
 20535 ;; Hardware stack levels used:    1
 20536 ;; Hardware stack levels required when called:    7
 20537 ;; This function calls:
 20538 ;;		___lldiv
 20539 ;; This function is called by:
 20540 ;;		_main
 20541 ;; This function uses a non-reentrant model
 20542 ;;
 20543                           
 20544                           	psect	text75
 20545  00758A                     __ptext75:
 20546                           	opt stack 0
 20547  00758A                     _I2C_Master_Init:
 20548                           	opt stack 0
 20549  00758A  FFFF               	dw	65535	; assembler added errata NOP
 20550                           
 20551                           ;I2C.c: 14: SSPCON1 = 0b00101000;
 20552                           
 20553                           ; BSR set to: 0
 20554                           ;incstack = 0
 20555  00758C  0E28               	movlw	40
 20556  00758E  6EC6               	movwf	4038,c	;volatile
 20557                           
 20558                           ;I2C.c: 15: SSPCON2 = 0;
 20559  007590  0E00               	movlw	0
 20560  007592  6EC5               	movwf	4037,c	;volatile
 20561                           
 20562                           ;I2C.c: 16: SSPADD = (8000000 / (4 * c)) - 1;
 20563  007594  0E00               	movlw	0
 20564  007596  0100               	movlb	0	; () banked
 20565  007598  6F80               	movwf	___lldiv@dividend& (0+255),b
 20566  00759A  0E12               	movlw	18
 20567  00759C  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 20568  00759E  0E7A               	movlw	122
 20569  0075A0  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 20570  0075A2  0E00               	movlw	0
 20571  0075A4  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 20572  0075A6  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 20573  0075AA  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 20574  0075AE  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 20575  0075B2  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 20576  0075B6  0E02               	movlw	2
 20577  0075B8                     u8675:
 20578  0075B8  FFFF               	dw	65535	; assembler added errata NOP
 20579  0075BA  90D8               	bcf	status,0,c
 20580  0075BC  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 20581  0075BE  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 20582  0075C0  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 20583  0075C2  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 20584  0075C4  2EE8               	decfsz	wreg,f,c
 20585  0075C6  D7F8               	goto	u8675
 20586  0075C8  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 20587  0075CC  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 20588  0075D0  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 20589  0075D4  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 20590  0075D8  ECEF  F03C         	call	___lldiv	;wreg free
 20591  0075DC  0100               	movlb	0	; () banked
 20592  0075DE  0580               	decf	?___lldiv& (0+255),w,b
 20593  0075E0  6EC8               	movwf	4040,c	;volatile
 20594                           
 20595                           ; BSR set to: 0
 20596                           ;I2C.c: 17: SSPSTAT = 0;
 20597  0075E2  0E00               	movlw	0
 20598  0075E4  6EC7               	movwf	4039,c	;volatile
 20599                           
 20600                           ; BSR set to: 0
 20601                           ;I2C.c: 18: TRISCbits.RC3 = 1;
 20602  0075E6  8694               	bsf	3988,3,c	;volatile
 20603                           
 20604                           ; BSR set to: 0
 20605                           ;I2C.c: 19: TRISCbits.RC4 = 1;
 20606  0075E8  8894               	bsf	3988,4,c	;volatile
 20607                           
 20608                           ; BSR set to: 0
 20609  0075EA  0012               	return		;funcret
 20610  0075EC  FFFF               	dw	65535	; errata NOP
 20611  0075EE                     __end_of_I2C_Master_Init:
 20612                           	opt stack 0
 20613                           tosu	equ	0xFFF
 20614                           tosh	equ	0xFFE
 20615                           tosl	equ	0xFFD
 20616                           pclath	equ	0xFFA
 20617                           tblptru	equ	0xFF8
 20618                           tblptrh	equ	0xFF7
 20619                           tblptrl	equ	0xFF6
 20620                           tablat	equ	0xFF5
 20621                           prodh	equ	0xFF4
 20622                           prodl	equ	0xFF3
 20623                           intcon	equ	0xFF2
 20624                           intcon2	equ	0xFF1
 20625                           intcon3	equ	0xFF0
 20626                           indf0	equ	0xFEF
 20627                           postinc0	equ	0xFEE
 20628                           fsr0h	equ	0xFEA
 20629                           fsr0l	equ	0xFE9
 20630                           wreg	equ	0xFE8
 20631                           postdec1	equ	0xFE5
 20632                           fsr1l	equ	0xFE1
 20633                           indf2	equ	0xFDF
 20634                           postinc2	equ	0xFDE
 20635                           postdec2	equ	0xFDD
 20636                           fsr2h	equ	0xFDA
 20637                           fsr2l	equ	0xFD9
 20638                           status	equ	0xFD8
 20639                           
 20640 ;; *************** function ___lldiv *****************
 20641 ;; Defined at:
 20642 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 20643 ;; Parameters:    Size  Location     Type
 20644 ;;  dividend        4    0[BANK0 ] unsigned long 
 20645 ;;  divisor         4    4[BANK0 ] unsigned long 
 20646 ;; Auto vars:     Size  Location     Type
 20647 ;;  quotient        4    8[BANK0 ] unsigned long 
 20648 ;;  counter         1   12[BANK0 ] unsigned char 
 20649 ;; Return value:  Size  Location     Type
 20650 ;;                  4    0[BANK0 ] unsigned long 
 20651 ;; Registers used:
 20652 ;;		wreg, status,2, status,0
 20653 ;; Tracked objects:
 20654 ;;		On entry : 0/0
 20655 ;;		On exit  : 0/0
 20656 ;;		Unchanged: 0/0
 20657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20658 ;;      Params:         0       8       0       0       0       0       0
 20659 ;;      Locals:         0       5       0       0       0       0       0
 20660 ;;      Temps:          0       0       0       0       0       0       0
 20661 ;;      Totals:         0      13       0       0       0       0       0
 20662 ;;Total ram usage:       13 bytes
 20663 ;; Hardware stack levels used:    1
 20664 ;; Hardware stack levels required when called:    6
 20665 ;; This function calls:
 20666 ;;		Nothing
 20667 ;; This function is called by:
 20668 ;;		_I2C_Master_Init
 20669 ;; This function uses a non-reentrant model
 20670 ;;
 20671                           
 20672                           	psect	text76
 20673  0079DE                     __ptext76:
 20674                           	opt stack 0
 20675  0079DE                     ___lldiv:
 20676                           	opt stack 0
 20677  0079DE  FFFF               	dw	65535	; assembler added errata NOP
 20678                           
 20679                           ; BSR set to: 0
 20680                           ;incstack = 0
 20681  0079E0  0E00               	movlw	0
 20682  0079E2  0100               	movlb	0	; () banked
 20683  0079E4  6F88               	movwf	___lldiv@quotient& (0+255),b
 20684  0079E6  0E00               	movlw	0
 20685  0079E8  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 20686  0079EA  0E00               	movlw	0
 20687  0079EC  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 20688  0079EE  0E00               	movlw	0
 20689  0079F0  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 20690                           
 20691                           ; BSR set to: 0
 20692  0079F2  5184               	movf	___lldiv@divisor& (0+255),w,b
 20693  0079F4  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 20694  0079F6  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 20695  0079F8  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 20696  0079FA  B4D8               	btfsc	status,2,c
 20697  0079FC  D02E               	goto	l1549
 20698                           
 20699                           ; BSR set to: 0
 20700  0079FE  0E01               	movlw	1
 20701  007A00  6F8C               	movwf	___lldiv@counter& (0+255),b
 20702  007A02  D007               	goto	l1544
 20703  007A04  FFFF               	dw	65535	; assembler added errata NOP
 20704                           
 20705                           ; BSR set to: 0
 20706                           
 20707                           ; BSR set to: 0
 20708  007A06  90D8               	bcf	status,0,c
 20709  007A08  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 20710  007A0A  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 20711  007A0C  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 20712  007A0E  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 20713  007A10  2B8C               	incf	___lldiv@counter& (0+255),f,b
 20714  007A12                     l1544:
 20715  007A12  FFFF               	dw	65535	; assembler added errata NOP
 20716                           
 20717                           ; BSR set to: 0
 20718                           
 20719                           ; BSR set to: 0
 20720  007A14  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 20721  007A16  D7F6               	goto	l1545
 20722  007A18                     u6450:
 20723  007A18  FFFF               	dw	65535	; assembler added errata NOP
 20724                           
 20725                           ; BSR set to: 0
 20726                           
 20727                           ; BSR set to: 0
 20728                           
 20729                           ; BSR set to: 0
 20730  007A1A  90D8               	bcf	status,0,c
 20731  007A1C  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 20732  007A1E  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 20733  007A20  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 20734  007A22  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 20735                           
 20736                           ; BSR set to: 0
 20737  007A24  5184               	movf	___lldiv@divisor& (0+255),w,b
 20738  007A26  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 20739  007A28  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 20740  007A2A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 20741  007A2C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 20742  007A2E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 20743  007A30  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 20744  007A32  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 20745  007A34  A0D8               	btfss	status,0,c
 20746  007A36  D009               	goto	l1548
 20747                           
 20748                           ; BSR set to: 0
 20749  007A38  5184               	movf	___lldiv@divisor& (0+255),w,b
 20750  007A3A  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 20751  007A3C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 20752  007A3E  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 20753  007A40  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 20754  007A42  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 20755  007A44  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 20756  007A46  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 20757                           
 20758                           ; BSR set to: 0
 20759  007A48  8188               	bsf	___lldiv@quotient& (0+255),0,b
 20760  007A4A                     l1548:
 20761  007A4A  FFFF               	dw	65535	; assembler added errata NOP
 20762                           
 20763                           ; BSR set to: 0
 20764                           
 20765                           ; BSR set to: 0
 20766  007A4C  90D8               	bcf	status,0,c
 20767  007A4E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 20768  007A50  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 20769  007A52  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 20770  007A54  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 20771                           
 20772                           ; BSR set to: 0
 20773  007A56  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 20774  007A58  D7DF               	goto	u6450
 20775  007A5A                     l1549:
 20776  007A5A  FFFF               	dw	65535	; assembler added errata NOP
 20777                           
 20778                           ; BSR set to: 0
 20779                           
 20780                           ; BSR set to: 0
 20781  007A5C  C088  F080         	movff	___lldiv@quotient,?___lldiv
 20782  007A60  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 20783  007A64  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 20784  007A68  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 20785                           
 20786                           ; BSR set to: 0
 20787  007A6C  0012               	return		;funcret
 20788  007A6E  FFFF               	dw	65535	; errata NOP
 20789  007A70                     __end_of___lldiv:
 20790                           	opt stack 0
 20791                           tosu	equ	0xFFF
 20792                           tosh	equ	0xFFE
 20793                           tosl	equ	0xFFD
 20794                           pclath	equ	0xFFA
 20795                           tblptru	equ	0xFF8
 20796                           tblptrh	equ	0xFF7
 20797                           tblptrl	equ	0xFF6
 20798                           tablat	equ	0xFF5
 20799                           prodh	equ	0xFF4
 20800                           prodl	equ	0xFF3
 20801                           intcon	equ	0xFF2
 20802                           intcon2	equ	0xFF1
 20803                           intcon3	equ	0xFF0
 20804                           indf0	equ	0xFEF
 20805                           postinc0	equ	0xFEE
 20806                           fsr0h	equ	0xFEA
 20807                           fsr0l	equ	0xFE9
 20808                           wreg	equ	0xFE8
 20809                           postdec1	equ	0xFE5
 20810                           fsr1l	equ	0xFE1
 20811                           indf2	equ	0xFDF
 20812                           postinc2	equ	0xFDE
 20813                           postdec2	equ	0xFDD
 20814                           fsr2h	equ	0xFDA
 20815                           fsr2l	equ	0xFD9
 20816                           status	equ	0xFD8
 20817                           
 20818 ;; *************** function _TIMER *****************
 20819 ;; Defined at:
 20820 ;;		line 31 in file "Main.c"
 20821 ;; Parameters:    Size  Location     Type
 20822 ;;		None
 20823 ;; Auto vars:     Size  Location     Type
 20824 ;;  c               1   96[COMRAM] unsigned char 
 20825 ;; Return value:  Size  Location     Type
 20826 ;;                  1    wreg      void 
 20827 ;; Registers used:
 20828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20829 ;; Tracked objects:
 20830 ;;		On entry : 0/0
 20831 ;;		On exit  : 0/0
 20832 ;;		Unchanged: 0/0
 20833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20834 ;;      Params:         0       0       0       0       0       0       0
 20835 ;;      Locals:        19       0       0       0       0       0       0
 20836 ;;      Temps:         18       0       0       0       0       0       0
 20837 ;;      Totals:        37       0       0       0       0       0       0
 20838 ;;Total ram usage:       37 bytes
 20839 ;; Hardware stack levels used:    1
 20840 ;; Hardware stack levels required when called:    5
 20841 ;; This function calls:
 20842 ;;		_readButtons
 20843 ;;		_timer
 20844 ;; This function is called by:
 20845 ;;		Interrupt level 2
 20846 ;; This function uses a non-reentrant model
 20847 ;;
 20848                           
 20849                           	psect	intcode
 20850  000008                     __pintcode:
 20851                           	opt stack 0
 20852  000008                     _TIMER:
 20853                           	opt stack 0
 20854  000008  FFFF               	dw	65535	; assembler added errata NOP
 20855                           
 20856                           ; BSR set to: 0
 20857                           ;incstack = 0
 20858  00000A  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20859  00000C  CFFA F03D          	movff	pclath,??_TIMER
 20860  000010  CFFB F03E          	movff	pclatu,??_TIMER+1
 20861  000014  CFE9 F03F          	movff	fsr0l,??_TIMER+2
 20862  000018  CFEA F040          	movff	fsr0h,??_TIMER+3
 20863  00001C  CFE1 F041          	movff	fsr1l,??_TIMER+4
 20864  000020  CFE2 F042          	movff	fsr1h,??_TIMER+5
 20865  000024  CFD9 F043          	movff	fsr2l,??_TIMER+6
 20866  000028  CFDA F044          	movff	fsr2h,??_TIMER+7
 20867  00002C  CFF3 F045          	movff	prodl,??_TIMER+8
 20868  000030  CFF4 F046          	movff	prodh,??_TIMER+9
 20869  000034  CFF6 F047          	movff	tblptrl,??_TIMER+10
 20870  000038  CFF7 F048          	movff	tblptrh,??_TIMER+11
 20871  00003C  CFF8 F049          	movff	tblptru,??_TIMER+12
 20872  000040  CFF5 F04A          	movff	tablat,??_TIMER+13
 20873  000044  C07F  F04B         	movff	btemp,??_TIMER+14
 20874  000048  C080  F04C         	movff	btemp+1,??_TIMER+15
 20875  00004C  C081  F04D         	movff	btemp+2,??_TIMER+16
 20876  000050  C082  F04E         	movff	btemp+3,??_TIMER+17
 20877                           
 20878                           ;Main.c: 32: if (TMR0IF) {
 20879  000054  A4F2               	btfss	intcon,2,c	;volatile
 20880  000056  D0C4               	goto	i2l954
 20881                           
 20882                           ;Main.c: 33: TMR0IF = 0x00;
 20883  000058  94F2               	bcf	intcon,2,c	;volatile
 20884                           
 20885                           ;Main.c: 34: TMR0H = 0x3C;
 20886  00005A  0E3C               	movlw	60
 20887  00005C  6ED7               	movwf	4055,c	;volatile
 20888                           
 20889                           ;Main.c: 35: TMR0L = 0xB0;
 20890  00005E  0EB0               	movlw	176
 20891  000060  6ED6               	movwf	4054,c	;volatile
 20892                           
 20893                           ;Main.c: 37: timerBase = (unsigned char) (timerBase <= 0 ? 0 : --timerBase);
 20894  000062  5073               	movf	_timerBase,w,c
 20895  000064  B4D8               	btfsc	status,2,c
 20896  000066  D005               	goto	i2l912
 20897  000068  0673               	decf	_timerBase,f,c
 20898  00006A  C073  F04F         	movff	_timerBase,_TIMER$1667
 20899  00006E  6A50               	clrf	_TIMER$1667+1,c
 20900  000070  D005               	goto	i2l914
 20901  000072                     i2l912:
 20902  000072  FFFF               	dw	65535	; assembler added errata NOP
 20903  000074  0E00               	movlw	0
 20904  000076  6E50               	movwf	_TIMER$1667+1,c
 20905  000078  0E00               	movlw	0
 20906  00007A  6E4F               	movwf	_TIMER$1667,c
 20907  00007C                     i2l914:
 20908  00007C  FFFF               	dw	65535	; assembler added errata NOP
 20909  00007E  C04F  F073         	movff	_TIMER$1667,_timerBase
 20910                           
 20911                           ;Main.c: 38: timerPiscarLCD = (unsigned char) (timerPiscarLCD <= 0 ? 0 : --timerPiscarLC
      +                          D);
 20912  000082  5072               	movf	_timerPiscarLCD,w,c
 20913  000084  B4D8               	btfsc	status,2,c
 20914  000086  D005               	goto	i2l916
 20915  000088  0672               	decf	_timerPiscarLCD,f,c
 20916  00008A  C072  F051         	movff	_timerPiscarLCD,_TIMER$1668
 20917  00008E  6A52               	clrf	_TIMER$1668+1,c
 20918  000090  D005               	goto	i2l918
 20919  000092                     i2l916:
 20920  000092  FFFF               	dw	65535	; assembler added errata NOP
 20921  000094  0E00               	movlw	0
 20922  000096  6E52               	movwf	_TIMER$1668+1,c
 20923  000098  0E00               	movlw	0
 20924  00009A  6E51               	movwf	_TIMER$1668,c
 20925  00009C                     i2l918:
 20926  00009C  FFFF               	dw	65535	; assembler added errata NOP
 20927  00009E  C051  F072         	movff	_TIMER$1668,_timerPiscarLCD
 20928                           
 20929                           ;Main.c: 39: timerAtrasoLCD = (unsigned char) (timerAtrasoLCD <= 0 ? 0 : --timerAtrasoLC
      +                          D);
 20930  0000A2  5074               	movf	_timerAtrasoLCD,w,c
 20931  0000A4  B4D8               	btfsc	status,2,c
 20932  0000A6  D005               	goto	i2l920
 20933  0000A8  0674               	decf	_timerAtrasoLCD,f,c
 20934  0000AA  C074  F053         	movff	_timerAtrasoLCD,_TIMER$1669
 20935  0000AE  6A54               	clrf	_TIMER$1669+1,c
 20936  0000B0  D005               	goto	i2l922
 20937  0000B2                     i2l920:
 20938  0000B2  FFFF               	dw	65535	; assembler added errata NOP
 20939  0000B4  0E00               	movlw	0
 20940  0000B6  6E54               	movwf	_TIMER$1669+1,c
 20941  0000B8  0E00               	movlw	0
 20942  0000BA  6E53               	movwf	_TIMER$1669,c
 20943  0000BC                     i2l922:
 20944  0000BC  FFFF               	dw	65535	; assembler added errata NOP
 20945  0000BE  C053  F074         	movff	_TIMER$1669,_timerAtrasoLCD
 20946                           
 20947                           ;Main.c: 40: timerColetaLeitura = (unsigned char) (timerColetaLeitura <= 0 ? 0 : --timer
      +                          ColetaLeitura);
 20948  0000C2  5071               	movf	_timerColetaLeitura,w,c
 20949  0000C4  B4D8               	btfsc	status,2,c
 20950  0000C6  D005               	goto	i2l924
 20951  0000C8  0671               	decf	_timerColetaLeitura,f,c
 20952  0000CA  C071  F055         	movff	_timerColetaLeitura,_TIMER$1670
 20953  0000CE  6A56               	clrf	_TIMER$1670+1,c
 20954  0000D0  D005               	goto	i2l926
 20955  0000D2                     i2l924:
 20956  0000D2  FFFF               	dw	65535	; assembler added errata NOP
 20957  0000D4  0E00               	movlw	0
 20958  0000D6  6E56               	movwf	_TIMER$1670+1,c
 20959  0000D8  0E00               	movlw	0
 20960  0000DA  6E55               	movwf	_TIMER$1670,c
 20961  0000DC                     i2l926:
 20962  0000DC  FFFF               	dw	65535	; assembler added errata NOP
 20963  0000DE  C055  F071         	movff	_TIMER$1670,_timerColetaLeitura
 20964                           
 20965                           ;Main.c: 41: timerTrocarTextoLcd = (unsigned char) (timerTrocarTextoLcd <= 0 ? 0 : --tim
      +                          erTrocarTextoLcd);
 20966  0000E2  5075               	movf	_timerTrocarTextoLcd,w,c
 20967  0000E4  B4D8               	btfsc	status,2,c
 20968  0000E6  D005               	goto	i2l928
 20969  0000E8  0675               	decf	_timerTrocarTextoLcd,f,c
 20970  0000EA  C075  F057         	movff	_timerTrocarTextoLcd,_TIMER$1671
 20971  0000EE  6A58               	clrf	_TIMER$1671+1,c
 20972  0000F0  D005               	goto	i2l930
 20973  0000F2                     i2l928:
 20974  0000F2  FFFF               	dw	65535	; assembler added errata NOP
 20975  0000F4  0E00               	movlw	0
 20976  0000F6  6E58               	movwf	_TIMER$1671+1,c
 20977  0000F8  0E00               	movlw	0
 20978  0000FA  6E57               	movwf	_TIMER$1671,c
 20979  0000FC                     i2l930:
 20980  0000FC  FFFF               	dw	65535	; assembler added errata NOP
 20981  0000FE  C057  F075         	movff	_TIMER$1671,_timerTrocarTextoLcd
 20982                           
 20983                           ;Main.c: 42: if (timerTrocarTextoLcd == 0) {
 20984  000102  5075               	movf	_timerTrocarTextoLcd,w,c
 20985  000104  A4D8               	btfss	status,2,c
 20986  000106  D004               	goto	i2l931
 20987                           
 20988                           ;Main.c: 43: timerTrocarTextoLcd = 15;
 20989  000108  0E0F               	movlw	15
 20990  00010A  6E75               	movwf	_timerTrocarTextoLcd,c
 20991                           
 20992                           ;Main.c: 44: textoAlternativo = ~textoAlternativo;
 20993  00010C  0100               	movlb	0	; () banked
 20994  00010E  1FF3               	comf	_textoAlternativo& (0+255),f,b
 20995  000110                     i2l931:
 20996  000110  FFFF               	dw	65535	; assembler added errata NOP
 20997                           
 20998                           ;Main.c: 45: }
 20999                           ;Main.c: 46: readButtons();
 21000                           
 21001                           ; BSR set to: 0
 21002  000112  EC19  F01B         	call	_readButtons	;wreg free
 21003                           
 21004                           ;Main.c: 48: if (timerPiscarLCD == 0) {
 21005  000116  5072               	movf	_timerPiscarLCD,w,c
 21006  000118  A4D8               	btfss	status,2,c
 21007  00011A  D003               	goto	i2l932
 21008                           
 21009                           ;Main.c: 49: timerPiscarLCD = 4;
 21010  00011C  0E04               	movlw	4
 21011  00011E  6E72               	movwf	_timerPiscarLCD,c
 21012                           
 21013                           ;Main.c: 50: blinkk = ~blinkk;
 21014  000120  1E69               	comf	_blinkk,f,c
 21015  000122                     i2l932:
 21016  000122  FFFF               	dw	65535	; assembler added errata NOP
 21017                           
 21018                           ;Main.c: 51: }
 21019                           ;Main.c: 53: if (timerBase == 0) {
 21020  000124  5073               	movf	_timerBase,w,c
 21021  000126  A4D8               	btfss	status,2,c
 21022  000128  D05B               	goto	i2l954
 21023                           
 21024                           ;Main.c: 54: timer();
 21025  00012A  EC78  F01C         	call	_timer	;wreg free
 21026                           
 21027                           ;Main.c: 55: timerBase = 10;
 21028  00012E  0E0A               	movlw	10
 21029  000130  6E73               	movwf	_timerBase,c
 21030                           
 21031                           ;Main.c: 57: timerVerificarSinal = (timerVerificarSinal <= 0 ? 0 : --timerVerificarSinal
      +                          );
 21032  000132  507E               	movf	_timerVerificarSinal,w,c
 21033  000134  B4D8               	btfsc	status,2,c
 21034  000136  D005               	goto	i2l935
 21035  000138  067E               	decf	_timerVerificarSinal,f,c
 21036  00013A  C07E  F059         	movff	_timerVerificarSinal,_TIMER$1674
 21037  00013E  6A5A               	clrf	_TIMER$1674+1,c
 21038  000140  D005               	goto	i2l937
 21039  000142                     i2l935:
 21040  000142  FFFF               	dw	65535	; assembler added errata NOP
 21041  000144  0E00               	movlw	0
 21042  000146  6E5A               	movwf	_TIMER$1674+1,c
 21043  000148  0E00               	movlw	0
 21044  00014A  6E59               	movwf	_TIMER$1674,c
 21045  00014C                     i2l937:
 21046  00014C  FFFF               	dw	65535	; assembler added errata NOP
 21047  00014E  C059  F07E         	movff	_TIMER$1674,_timerVerificarSinal
 21048                           
 21049                           ;Main.c: 58: timerEtapaComunicacao = (timerEtapaComunicacao <= 0 ? 0 : --timerEtapaComun
      +                          icacao);
 21050  000152  0100               	movlb	0	; () banked
 21051  000154  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 21052  000156  B4D8               	btfsc	status,2,c
 21053  000158  D005               	goto	i2l939
 21054                           
 21055                           ; BSR set to: 0
 21056  00015A  07F5               	decf	_timerEtapaComunicacao& (0+255),f,b
 21057  00015C  C0F5  F05B         	movff	_timerEtapaComunicacao,_TIMER$1675
 21058  000160  6A5C               	clrf	_TIMER$1675+1,c
 21059  000162  D005               	goto	i2l941
 21060  000164                     i2l939:
 21061  000164  FFFF               	dw	65535	; assembler added errata NOP
 21062                           
 21063                           ; BSR set to: 0
 21064                           
 21065                           ; BSR set to: 0
 21066  000166  0E00               	movlw	0
 21067  000168  6E5C               	movwf	_TIMER$1675+1,c
 21068  00016A  0E00               	movlw	0
 21069  00016C  6E5B               	movwf	_TIMER$1675,c
 21070  00016E                     i2l941:
 21071  00016E  FFFF               	dw	65535	; assembler added errata NOP
 21072                           
 21073                           ; BSR set to: 0
 21074                           
 21075                           ; BSR set to: 0
 21076  000170  C05B  F0F5         	movff	_TIMER$1675,_timerEtapaComunicacao
 21077                           
 21078                           ; BSR set to: 0
 21079                           ;Main.c: 59: timerTesteBombas = (timerTesteBombas <= 0 ? 0 : --timerTesteBombas);
 21080  000174  51DA               	movf	_timerTesteBombas& (0+255),w,b
 21081  000176  11DB               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 21082  000178  B4D8               	btfsc	status,2,c
 21083  00017A  D008               	goto	i2l943
 21084                           
 21085                           ; BSR set to: 0
 21086  00017C  07DA               	decf	_timerTesteBombas& (0+255),f,b
 21087  00017E  A0D8               	btfss	status,0,c
 21088  000180  07DB               	decf	(_timerTesteBombas+1)& (0+255),f,b
 21089  000182  C0DA  F0DA         	movff	_timerTesteBombas,_timerTesteBombas
 21090  000186  C0DB  F0DB         	movff	_timerTesteBombas+1,_timerTesteBombas+1
 21091  00018A  D005               	goto	i2l945
 21092  00018C                     i2l943:
 21093  00018C  FFFF               	dw	65535	; assembler added errata NOP
 21094                           
 21095                           ; BSR set to: 0
 21096                           
 21097                           ; BSR set to: 0
 21098  00018E  0E00               	movlw	0
 21099  000190  6FDB               	movwf	(_timerTesteBombas+1)& (0+255),b
 21100  000192  0E00               	movlw	0
 21101  000194  6FDA               	movwf	_timerTesteBombas& (0+255),b
 21102  000196                     i2l945:
 21103  000196  FFFF               	dw	65535	; assembler added errata NOP
 21104                           
 21105                           ; BSR set to: 0
 21106                           ;Main.c: 60: timerReenvioSMS = (timerReenvioSMS <= 0 ? 0 : --timerReenvioSMS);
 21107  000198  51F6               	movf	_timerReenvioSMS& (0+255),w,b
 21108  00019A  B4D8               	btfsc	status,2,c
 21109  00019C  D005               	goto	i2l947
 21110                           
 21111                           ; BSR set to: 0
 21112  00019E  07F6               	decf	_timerReenvioSMS& (0+255),f,b
 21113  0001A0  C0F6  F05D         	movff	_timerReenvioSMS,_TIMER$1676
 21114  0001A4  6A5E               	clrf	_TIMER$1676+1,c
 21115  0001A6  D005               	goto	i2l949
 21116  0001A8                     i2l947:
 21117  0001A8  FFFF               	dw	65535	; assembler added errata NOP
 21118                           
 21119                           ; BSR set to: 0
 21120                           
 21121                           ; BSR set to: 0
 21122  0001AA  0E00               	movlw	0
 21123  0001AC  6E5E               	movwf	_TIMER$1676+1,c
 21124  0001AE  0E00               	movlw	0
 21125  0001B0  6E5D               	movwf	_TIMER$1676,c
 21126  0001B2                     i2l949:
 21127  0001B2  FFFF               	dw	65535	; assembler added errata NOP
 21128                           
 21129                           ; BSR set to: 0
 21130                           
 21131                           ; BSR set to: 0
 21132  0001B4  C05D  F0F6         	movff	_TIMER$1676,_timerReenvioSMS
 21133                           
 21134                           ;Main.c: 61: timerIntervaloEntreBombas = (timerIntervaloEntreBombas <= 0 ? 0 : --timerIn
      +                          tervaloEntreBombas);
 21135  0001B8  51FE               	movf	_timerIntervaloEntreBombas& (0+255),w,b
 21136  0001BA  B4D8               	btfsc	status,2,c
 21137  0001BC  D005               	goto	i2l951
 21138                           
 21139                           ; BSR set to: 0
 21140  0001BE  07FE               	decf	_timerIntervaloEntreBombas& (0+255),f,b
 21141  0001C0  C0FE  F05F         	movff	_timerIntervaloEntreBombas,_TIMER$1677
 21142  0001C4  6A60               	clrf	_TIMER$1677+1,c
 21143  0001C6  D005               	goto	i2l953
 21144  0001C8                     i2l951:
 21145  0001C8  FFFF               	dw	65535	; assembler added errata NOP
 21146                           
 21147                           ; BSR set to: 0
 21148                           
 21149                           ; BSR set to: 0
 21150  0001CA  0E00               	movlw	0
 21151  0001CC  6E60               	movwf	_TIMER$1677+1,c
 21152  0001CE  0E00               	movlw	0
 21153  0001D0  6E5F               	movwf	_TIMER$1677,c
 21154  0001D2                     i2l953:
 21155  0001D2  FFFF               	dw	65535	; assembler added errata NOP
 21156                           
 21157                           ; BSR set to: 0
 21158                           
 21159                           ; BSR set to: 0
 21160  0001D4  C05F  F0FE         	movff	_TIMER$1677,_timerIntervaloEntreBombas
 21161                           
 21162                           ; BSR set to: 0
 21163                           ;Main.c: 63: if (RCSTAbits.OERR) {
 21164  0001D8  A2AB               	btfss	4011,1,c	;volatile
 21165  0001DA  D002               	goto	i2l954
 21166                           
 21167                           ; BSR set to: 0
 21168                           ;Main.c: 64: RCSTAbits.CREN = 0;
 21169  0001DC  98AB               	bcf	4011,4,c	;volatile
 21170                           
 21171                           ;Main.c: 65: RCSTAbits.CREN = 1;
 21172  0001DE  88AB               	bsf	4011,4,c	;volatile
 21173  0001E0                     i2l954:
 21174  0001E0  FFFF               	dw	65535	; assembler added errata NOP
 21175                           
 21176                           ;Main.c: 66: }
 21177                           ;Main.c: 67: }
 21178                           ;Main.c: 68: }
 21179                           ;Main.c: 69: if (RCIF) {
 21180                           
 21181                           ; BSR set to: 0
 21182                           
 21183                           ; BSR set to: 0
 21184  0001E2  AA9E               	btfss	3998,5,c	;volatile
 21185  0001E4  D01B               	goto	i2l957
 21186                           
 21187                           ;Main.c: 70: char c = RCREG;
 21188  0001E6  CFAE F061          	movff	4014,TIMER@c	;volatile
 21189                           
 21190                           ;Main.c: 71: if (c != '\n' && c != '\r') {
 21191  0001EA  0E0A               	movlw	10
 21192  0001EC  1861               	xorwf	TIMER@c,w,c
 21193  0001EE  B4D8               	btfsc	status,2,c
 21194  0001F0  D00F               	goto	i2l956
 21195  0001F2  0E0D               	movlw	13
 21196  0001F4  1861               	xorwf	TIMER@c,w,c
 21197  0001F6  B4D8               	btfsc	status,2,c
 21198  0001F8  D00B               	goto	i2l956
 21199                           
 21200                           ;Main.c: 72: bufferSerial[cbf++] = c;
 21201  0001FA  5068               	movf	_cbf,w,c
 21202  0001FC  0D01               	mullw	1
 21203  0001FE  0E1E               	movlw	low _bufferSerial
 21204  000200  24F3               	addwf	prodl,w,c
 21205  000202  6ED9               	movwf	fsr2l,c
 21206  000204  0E01               	movlw	high _bufferSerial
 21207  000206  20F4               	addwfc	prodh,w,c
 21208  000208  6EDA               	movwf	fsr2h,c
 21209  00020A  C061  FFDF         	movff	TIMER@c,indf2
 21210  00020E  2A68               	incf	_cbf,f,c
 21211  000210                     i2l956:
 21212  000210  FFFF               	dw	65535	; assembler added errata NOP
 21213                           
 21214                           ;Main.c: 73: }
 21215                           ;Main.c: 74: if (cbf >= 60) cbf = 0;
 21216  000212  0E3B               	movlw	59
 21217  000214  6468               	cpfsgt	_cbf,c
 21218  000216  D002               	goto	i2l957
 21219  000218  0E00               	movlw	0
 21220  00021A  6E68               	movwf	_cbf,c
 21221  00021C                     i2l957:
 21222  00021C  FFFF               	dw	65535	; assembler added errata NOP
 21223  00021E  C04E  F082         	movff	??_TIMER+17,btemp+3
 21224  000222  C04D  F081         	movff	??_TIMER+16,btemp+2
 21225  000226  C04C  F080         	movff	??_TIMER+15,btemp+1
 21226  00022A  C04B  F07F         	movff	??_TIMER+14,btemp
 21227  00022E  C04A  FFF5         	movff	??_TIMER+13,tablat
 21228  000232  C049  FFF8         	movff	??_TIMER+12,tblptru
 21229  000236  C048  FFF7         	movff	??_TIMER+11,tblptrh
 21230  00023A  C047  FFF6         	movff	??_TIMER+10,tblptrl
 21231  00023E  C046  FFF4         	movff	??_TIMER+9,prodh
 21232  000242  C045  FFF3         	movff	??_TIMER+8,prodl
 21233  000246  C044  FFDA         	movff	??_TIMER+7,fsr2h
 21234  00024A  C043  FFD9         	movff	??_TIMER+6,fsr2l
 21235  00024E  C042  FFE2         	movff	??_TIMER+5,fsr1h
 21236  000252  C041  FFE1         	movff	??_TIMER+4,fsr1l
 21237  000256  C040  FFEA         	movff	??_TIMER+3,fsr0h
 21238  00025A  C03F  FFE9         	movff	??_TIMER+2,fsr0l
 21239  00025E  C03E  FFFB         	movff	??_TIMER+1,pclatu
 21240  000262  C03D  FFFA         	movff	??_TIMER,pclath
 21241  000266  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21242  000268  0011               	retfie		f
 21243  00026A  FFFF               	dw	65535	; errata NOP
 21244  00026C                     __end_of_TIMER:
 21245                           	opt stack 0
 21246                           tosu	equ	0xFFF
 21247                           tosh	equ	0xFFE
 21248                           tosl	equ	0xFFD
 21249                           pclatu	equ	0xFFB
 21250                           pclath	equ	0xFFA
 21251                           tblptru	equ	0xFF8
 21252                           tblptrh	equ	0xFF7
 21253                           tblptrl	equ	0xFF6
 21254                           tablat	equ	0xFF5
 21255                           prodh	equ	0xFF4
 21256                           prodl	equ	0xFF3
 21257                           intcon	equ	0xFF2
 21258                           intcon2	equ	0xFF1
 21259                           intcon3	equ	0xFF0
 21260                           indf0	equ	0xFEF
 21261                           postinc0	equ	0xFEE
 21262                           fsr0h	equ	0xFEA
 21263                           fsr0l	equ	0xFE9
 21264                           wreg	equ	0xFE8
 21265                           postdec1	equ	0xFE5
 21266                           fsr1h	equ	0xFE2
 21267                           fsr1l	equ	0xFE1
 21268                           indf2	equ	0xFDF
 21269                           postinc2	equ	0xFDE
 21270                           postdec2	equ	0xFDD
 21271                           fsr2h	equ	0xFDA
 21272                           fsr2l	equ	0xFD9
 21273                           status	equ	0xFD8
 21274                           
 21275 ;; *************** function _timer *****************
 21276 ;; Defined at:
 21277 ;;		line 10 in file "temporizador.h"
 21278 ;; Parameters:    Size  Location     Type
 21279 ;;		None
 21280 ;; Auto vars:     Size  Location     Type
 21281 ;;		None
 21282 ;; Return value:  Size  Location     Type
 21283 ;;                  1    wreg      void 
 21284 ;; Registers used:
 21285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21286 ;; Tracked objects:
 21287 ;;		On entry : 0/0
 21288 ;;		On exit  : 0/0
 21289 ;;		Unchanged: 0/0
 21290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21291 ;;      Params:         0       0       0       0       0       0       0
 21292 ;;      Locals:         0       0       0       0       0       0       0
 21293 ;;      Temps:          0       0       0       0       0       0       0
 21294 ;;      Totals:         0       0       0       0       0       0       0
 21295 ;;Total ram usage:        0 bytes
 21296 ;; Hardware stack levels used:    1
 21297 ;; Hardware stack levels required when called:    4
 21298 ;; This function calls:
 21299 ;;		_writeEEPROM16_ext
 21300 ;;		i2_RTC_Init
 21301 ;;		i2_getDS1307TimeDate
 21302 ;;		i2_reiniciaLCD
 21303 ;;		i2_writeEEPROM_ext
 21304 ;; This function is called by:
 21305 ;;		_TIMER
 21306 ;; This function uses a non-reentrant model
 21307 ;;
 21308                           
 21309                           	psect	text78
 21310  0038F0                     __ptext78:
 21311                           	opt stack 0
 21312  0038F0                     _timer:
 21313                           	opt stack 0
 21314  0038F0  FFFF               	dw	65535	; assembler added errata NOP
 21315                           
 21316                           ;temporizador.h: 13: if (out_BOMBA_ESTACIONARIA == 1 && status_estacionaria == 1 && !!PO
      +                          RTAbits.RA2) {
 21317                           
 21318                           ;incstack = 0
 21319  0038F2  0100               	movlb	0	; () banked
 21320  0038F4  05F8               	decf	_out_BOMBA_ESTACIONARIA& (0+255),w,b
 21321  0038F6  A4D8               	btfss	status,2,c
 21322  0038F8  D006               	goto	i2l665
 21323                           
 21324                           ; BSR set to: 0
 21325  0038FA  05FA               	decf	_status_estacionaria& (0+255),w,b
 21326  0038FC  B4D8               	btfsc	status,2,c
 21327                           
 21328                           ; BSR set to: 0
 21329  0038FE  A480               	btfss	3968,2,c	;volatile
 21330  003900  D002               	goto	i2l665
 21331                           
 21332                           ; BSR set to: 0
 21333                           ;temporizador.h: 14: tempo_limite_partida++;
 21334  003902  2A6C               	incf	_tempo_limite_partida,f,c
 21335                           
 21336                           ;temporizador.h: 15: tempo_partida++;
 21337  003904  2A6D               	incf	_tempo_partida,f,c
 21338  003906                     i2l665:
 21339  003906  FFFF               	dw	65535	; assembler added errata NOP
 21340                           
 21341                           ; BSR set to: 0
 21342                           ;temporizador.h: 16: }
 21343                           ;temporizador.h: 19: if (ajst_rtc) {
 21344                           
 21345                           ; BSR set to: 0
 21346  003908  506A               	movf	_ajst_rtc,w,c
 21347  00390A  A4D8               	btfss	status,2,c
 21348  00390C  D059               	goto	i2l671
 21349                           
 21350                           ; BSR set to: 0
 21351                           ;temporizador.h: 21: }
 21352                           ;temporizador.h: 23: _sec++;
 21353                           
 21354                           ; BSR set to: 0
 21355                           
 21356                           ; BSR set to: 0
 21357                           ;temporizador.h: 20: return;
 21358  00390E  2BEE               	incf	__sec& (0+255),f,b
 21359                           
 21360                           ; BSR set to: 0
 21361                           ;temporizador.h: 24: if (_sec > 59) {
 21362  003910  0E3B               	movlw	59
 21363  003912  65EE               	cpfsgt	__sec& (0+255),b
 21364  003914  D017               	goto	i2l670
 21365                           
 21366                           ; BSR set to: 0
 21367                           ;temporizador.h: 25: reiniciaLCD();
 21368  003916  EC44  F036         	call	i2_reiniciaLCD	;wreg free
 21369                           
 21370                           ;temporizador.h: 26: _sec = 0;
 21371  00391A  0E00               	movlw	0
 21372  00391C  0100               	movlb	0	; () banked
 21373  00391E  6FEE               	movwf	__sec& (0+255),b
 21374                           
 21375                           ; BSR set to: 0
 21376                           ;temporizador.h: 27: _min++;
 21377  003920  2BED               	incf	__min& (0+255),f,b
 21378                           
 21379                           ; BSR set to: 0
 21380                           ;temporizador.h: 28: if (_min > 59) {
 21381  003922  0E3B               	movlw	59
 21382  003924  65ED               	cpfsgt	__min& (0+255),b
 21383  003926  D00E               	goto	i2l670
 21384                           
 21385                           ; BSR set to: 0
 21386                           ;temporizador.h: 29: _min = 0;
 21387  003928  0E00               	movlw	0
 21388  00392A  6FED               	movwf	__min& (0+255),b
 21389                           
 21390                           ; BSR set to: 0
 21391                           ;temporizador.h: 30: _hor++;
 21392  00392C  2BEC               	incf	__hor& (0+255),f,b
 21393                           
 21394                           ; BSR set to: 0
 21395                           ;temporizador.h: 31: if (_hor > 23) {
 21396  00392E  0E17               	movlw	23
 21397  003930  65EC               	cpfsgt	__hor& (0+255),b
 21398  003932  D008               	goto	i2l670
 21399                           
 21400                           ; BSR set to: 0
 21401                           ;temporizador.h: 32: _hor = 0;
 21402  003934  0E00               	movlw	0
 21403  003936  6FEC               	movwf	__hor& (0+255),b
 21404                           
 21405                           ; BSR set to: 0
 21406                           ;temporizador.h: 33: dias_restante_teste++;
 21407  003938  2BE8               	incf	_dias_restante_teste& (0+255),f,b
 21408                           
 21409                           ; BSR set to: 0
 21410                           ;temporizador.h: 34: writeEEPROM_ext(10, dias_restante_teste);
 21411  00393A  C0E8  F004         	movff	_dias_restante_teste,i2writeEEPROM_ext@data
 21412  00393E  0E0A               	movlw	10
 21413  003940  ECE5  F037         	call	i2_writeEEPROM_ext
 21414  003944                     i2l670:
 21415  003944  FFFF               	dw	65535	; assembler added errata NOP
 21416                           
 21417                           ;temporizador.h: 35: }
 21418                           ;temporizador.h: 36: }
 21419                           ;temporizador.h: 37: }
 21420                           ;temporizador.h: 39: if (rtc.min != _min) {
 21421  003946  0100               	movlb	0	; () banked
 21422  003948  51ED               	movf	__min& (0+255),w,b
 21423  00394A  1879               	xorwf	_rtc+2,w,c
 21424  00394C  B4D8               	btfsc	status,2,c
 21425  00394E  D038               	goto	i2l671
 21426                           
 21427                           ; BSR set to: 0
 21428                           ;temporizador.h: 41: if (!PORTAbits.RA2) {
 21429  003950  B480               	btfsc	3968,2,c	;volatile
 21430  003952  D00A               	goto	i2l672
 21431                           
 21432                           ; BSR set to: 0
 21433                           ;temporizador.h: 42: horimetro++;
 21434  003954  0101               	movlb	1	; () banked
 21435  003956  4B0A               	infsnz	_horimetro& (0+255),f,b
 21436  003958  2B0B               	incf	(_horimetro+1)& (0+255),f,b
 21437                           
 21438                           ; BSR set to: 1
 21439                           ;temporizador.h: 43: writeEEPROM16_ext(8, horimetro);
 21440  00395A  C10A  F006         	movff	_horimetro,writeEEPROM16_ext@data
 21441  00395E  C10B  F007         	movff	_horimetro+1,writeEEPROM16_ext@data+1
 21442  003962  0E08               	movlw	8
 21443  003964  EC33  F036         	call	_writeEEPROM16_ext
 21444  003968                     i2l672:
 21445  003968  FFFF               	dw	65535	; assembler added errata NOP
 21446                           
 21447                           ;temporizador.h: 44: }
 21448                           ;temporizador.h: 46: getDS1307TimeDate(&rtc);
 21449  00396A  0E77               	movlw	low _rtc
 21450  00396C  6E06               	movwf	i2getDS1307TimeDate@ptrToUserVal,c
 21451  00396E  0E00               	movlw	high _rtc
 21452  003970  6E07               	movwf	i2getDS1307TimeDate@ptrToUserVal+1,c
 21453  003972  EC90  F01A         	call	i2_getDS1307TimeDate	;wreg free
 21454                           
 21455                           ;temporizador.h: 47: if ((rtc.sec > 60) && (rtc.min > 60) && (rtc.hour > 24)) {
 21456  003976  0E3C               	movlw	60
 21457  003978  6478               	cpfsgt	_rtc+1,c
 21458  00397A  D015               	goto	i2l673
 21459  00397C  0E3C               	movlw	60
 21460  00397E  6479               	cpfsgt	_rtc+2,c
 21461  003980  D012               	goto	i2l673
 21462  003982  0E18               	movlw	24
 21463  003984  647A               	cpfsgt	_rtc+3,c
 21464  003986  D00F               	goto	i2l673
 21465                           
 21466                           ;temporizador.h: 49: RTC_Init();
 21467  003988  ECEC  F036         	call	i2_RTC_Init	;wreg free
 21468                           
 21469                           ;temporizador.h: 50: rtc.sec = _sec;
 21470  00398C  C0EE  F078         	movff	__sec,_rtc+1
 21471                           
 21472                           ;temporizador.h: 51: rtc.min = _min;
 21473  003990  C0ED  F079         	movff	__min,_rtc+2
 21474                           
 21475                           ;temporizador.h: 52: rtc.hour = _hor;
 21476  003994  C0EC  F07A         	movff	__hor,_rtc+3
 21477                           
 21478                           ;temporizador.h: 53: rtc.date = _dia;
 21479  003998  C0EB  F07B         	movff	__dia,_rtc+4
 21480                           
 21481                           ;temporizador.h: 54: rtc.month = _mes;
 21482  00399C  C0EA  F07C         	movff	__mes,_rtc+5
 21483                           
 21484                           ;temporizador.h: 55: rtc.year = _ano;
 21485  0039A0  C0E9  F07D         	movff	__ano,_rtc+6
 21486                           
 21487                           ;temporizador.h: 56: return;
 21488  0039A4  D00D               	goto	i2l671
 21489  0039A6                     i2l673:
 21490  0039A6  FFFF               	dw	65535	; assembler added errata NOP
 21491                           
 21492                           ;temporizador.h: 57: }
 21493                           ;temporizador.h: 58: _sec = rtc.sec;
 21494  0039A8  C078  F0EE         	movff	_rtc+1,__sec
 21495                           
 21496                           ;temporizador.h: 59: _min = rtc.min;
 21497  0039AC  C079  F0ED         	movff	_rtc+2,__min
 21498                           
 21499                           ;temporizador.h: 60: _hor = rtc.hour;
 21500  0039B0  C07A  F0EC         	movff	_rtc+3,__hor
 21501                           
 21502                           ;temporizador.h: 61: _dia = rtc.date;
 21503  0039B4  C07B  F0EB         	movff	_rtc+4,__dia
 21504                           
 21505                           ;temporizador.h: 62: _mes = rtc.month;
 21506  0039B8  C07C  F0EA         	movff	_rtc+5,__mes
 21507                           
 21508                           ;temporizador.h: 63: _ano = rtc.year;
 21509  0039BC  C07D  F0E9         	movff	_rtc+6,__ano
 21510  0039C0                     i2l671:
 21511  0039C0  FFFF               	dw	65535	; assembler added errata NOP
 21512  0039C2  0012               	return		;funcret
 21513  0039C4  FFFF               	dw	65535	; errata NOP
 21514  0039C6                     __end_of_timer:
 21515                           	opt stack 0
 21516                           tosu	equ	0xFFF
 21517                           tosh	equ	0xFFE
 21518                           tosl	equ	0xFFD
 21519                           pclatu	equ	0xFFB
 21520                           pclath	equ	0xFFA
 21521                           tblptru	equ	0xFF8
 21522                           tblptrh	equ	0xFF7
 21523                           tblptrl	equ	0xFF6
 21524                           tablat	equ	0xFF5
 21525                           prodh	equ	0xFF4
 21526                           prodl	equ	0xFF3
 21527                           intcon	equ	0xFF2
 21528                           intcon2	equ	0xFF1
 21529                           intcon3	equ	0xFF0
 21530                           indf0	equ	0xFEF
 21531                           postinc0	equ	0xFEE
 21532                           fsr0h	equ	0xFEA
 21533                           fsr0l	equ	0xFE9
 21534                           wreg	equ	0xFE8
 21535                           postdec1	equ	0xFE5
 21536                           fsr1h	equ	0xFE2
 21537                           fsr1l	equ	0xFE1
 21538                           indf2	equ	0xFDF
 21539                           postinc2	equ	0xFDE
 21540                           postdec2	equ	0xFDD
 21541                           fsr2h	equ	0xFDA
 21542                           fsr2l	equ	0xFD9
 21543                           status	equ	0xFD8
 21544                           
 21545 ;; *************** function i2_reiniciaLCD *****************
 21546 ;; Defined at:
 21547 ;;		line 205 in file "lcd.h"
 21548 ;; Parameters:    Size  Location     Type
 21549 ;;		None
 21550 ;; Auto vars:     Size  Location     Type
 21551 ;;		None
 21552 ;; Return value:  Size  Location     Type
 21553 ;;                  1    wreg      void 
 21554 ;; Registers used:
 21555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21556 ;; Tracked objects:
 21557 ;;		On entry : 0/0
 21558 ;;		On exit  : 0/0
 21559 ;;		Unchanged: 0/0
 21560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21561 ;;      Params:         0       0       0       0       0       0       0
 21562 ;;      Locals:         0       0       0       0       0       0       0
 21563 ;;      Temps:          0       0       0       0       0       0       0
 21564 ;;      Totals:         0       0       0       0       0       0       0
 21565 ;;Total ram usage:        0 bytes
 21566 ;; Hardware stack levels used:    1
 21567 ;; Hardware stack levels required when called:    3
 21568 ;; This function calls:
 21569 ;;		i2_Lcd_Init
 21570 ;;		i2_criarCaracteresCGRAM
 21571 ;; This function is called by:
 21572 ;;		_timer
 21573 ;; This function uses a non-reentrant model
 21574 ;;
 21575                           
 21576                           	psect	text79
 21577  006C88                     __ptext79:
 21578                           	opt stack 0
 21579  006C88                     i2_reiniciaLCD:
 21580                           	opt stack 0
 21581  006C88  FFFF               	dw	65535	; assembler added errata NOP
 21582                           
 21583                           ;lcd.h: 206: Lcd_Init();
 21584                           
 21585                           ;incstack = 0
 21586  006C8A  EC2B  F03B         	call	i2_Lcd_Init	;wreg free
 21587                           
 21588                           ;lcd.h: 207: criarCaracteresCGRAM();
 21589  006C8E  EC6F  F01E         	call	i2_criarCaracteresCGRAM	;wreg free
 21590                           
 21591                           ;lcd.h: 209: timerAtrasoLCD = 1;
 21592  006C92  0E01               	movlw	1
 21593  006C94  6E74               	movwf	_timerAtrasoLCD,c
 21594                           
 21595                           ;lcd.h: 210: ultimoEstadoLCD = 0;
 21596  006C96  0E00               	movlw	0
 21597  006C98  0101               	movlb	1	; () banked
 21598  006C9A  6FDE               	movwf	_ultimoEstadoLCD& (0+255),b
 21599  006C9C  0E00               	movlw	0
 21600  006C9E  6FDF               	movwf	(_ultimoEstadoLCD+1)& (0+255),b
 21601  006CA0  0E00               	movlw	0
 21602  006CA2  6FE0               	movwf	(_ultimoEstadoLCD+2)& (0+255),b
 21603  006CA4  0E00               	movlw	0
 21604  006CA6  6FE1               	movwf	(_ultimoEstadoLCD+3)& (0+255),b
 21605                           
 21606                           ; BSR set to: 1
 21607  006CA8  0012               	return		;funcret
 21608  006CAA  FFFF               	dw	65535	; errata NOP
 21609  006CAC                     __end_ofi2_reiniciaLCD:
 21610                           	opt stack 0
 21611                           tosu	equ	0xFFF
 21612                           tosh	equ	0xFFE
 21613                           tosl	equ	0xFFD
 21614                           pclatu	equ	0xFFB
 21615                           pclath	equ	0xFFA
 21616                           tblptru	equ	0xFF8
 21617                           tblptrh	equ	0xFF7
 21618                           tblptrl	equ	0xFF6
 21619                           tablat	equ	0xFF5
 21620                           prodh	equ	0xFF4
 21621                           prodl	equ	0xFF3
 21622                           intcon	equ	0xFF2
 21623                           intcon2	equ	0xFF1
 21624                           intcon3	equ	0xFF0
 21625                           indf0	equ	0xFEF
 21626                           postinc0	equ	0xFEE
 21627                           fsr0h	equ	0xFEA
 21628                           fsr0l	equ	0xFE9
 21629                           wreg	equ	0xFE8
 21630                           postdec1	equ	0xFE5
 21631                           fsr1h	equ	0xFE2
 21632                           fsr1l	equ	0xFE1
 21633                           indf2	equ	0xFDF
 21634                           postinc2	equ	0xFDE
 21635                           postdec2	equ	0xFDD
 21636                           fsr2h	equ	0xFDA
 21637                           fsr2l	equ	0xFD9
 21638                           status	equ	0xFD8
 21639                           
 21640 ;; *************** function i2_criarCaracteresCGRAM *****************
 21641 ;; Defined at:
 21642 ;;		line 175 in file "lcd.h"
 21643 ;; Parameters:    Size  Location     Type
 21644 ;;		None
 21645 ;; Auto vars:     Size  Location     Type
 21646 ;;  criarCaracte   48    7[COMRAM] const unsigned char [8][
 21647 ;;  criarCaracte    1   59[COMRAM] unsigned char 
 21648 ;;  criarCaracte    1   58[COMRAM] unsigned char 
 21649 ;;  criarCaracte    1   57[COMRAM] unsigned char 
 21650 ;; Return value:  Size  Location     Type
 21651 ;;                  1    wreg      void 
 21652 ;; Registers used:
 21653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21654 ;; Tracked objects:
 21655 ;;		On entry : 0/0
 21656 ;;		On exit  : 0/0
 21657 ;;		Unchanged: 0/0
 21658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21659 ;;      Params:         0       0       0       0       0       0       0
 21660 ;;      Locals:        53       0       0       0       0       0       0
 21661 ;;      Temps:          3       0       0       0       0       0       0
 21662 ;;      Totals:        56       0       0       0       0       0       0
 21663 ;;Total ram usage:       56 bytes
 21664 ;; Hardware stack levels used:    1
 21665 ;; Hardware stack levels required when called:    2
 21666 ;; This function calls:
 21667 ;;		i2_Lcd_Cmd
 21668 ;;		i2_Lcd_Write_Char
 21669 ;; This function is called by:
 21670 ;;		i2_reiniciaLCD
 21671 ;; This function uses a non-reentrant model
 21672 ;;
 21673                           
 21674                           	psect	text80
 21675  003CDE                     __ptext80:
 21676                           	opt stack 0
 21677  003CDE                     i2_criarCaracteresCGRAM:
 21678                           	opt stack 0
 21679  003CDE  FFFF               	dw	65535	; assembler added errata NOP
 21680                           
 21681                           ;lcd.h: 176: const char character[6][8] = {
 21682                           ;lcd.h: 177: 0x00, 0x1F, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04,
 21683                           ;lcd.h: 178: 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10,
 21684                           ;lcd.h: 179: 0x00, 0x00, 0x00, 0x04, 0x04, 0x14, 0x14, 0x14,
 21685                           ;lcd.h: 180: 0x00, 0x01, 0x01, 0x05, 0x05, 0x15, 0x15, 0x15,
 21686                           ;lcd.h: 181: 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04,
 21687                           ;lcd.h: 182: };
 21688                           
 21689                           ; BSR set to: 1
 21690                           ;incstack = 0
 21691  003CE0  0E71               	movlw	low criarCaracteresCGRAM@F2966
 21692  003CE2  6EF6               	movwf	tblptrl,c
 21693  003CE4                     	if	1	;There is more than 1 active tblptr byte
 21694  003CE4  0E7A               	movlw	high criarCaracteresCGRAM@F2966
 21695  003CE6  6EF7               	movwf	tblptrh,c
 21696  003CE8                     	endif
 21697  003CE8                     	if	0	;There are less than 3 active tblptr bytes
 21698  003CE8                     	endif
 21699  003CE8  EE20  F008         	lfsr	2,i2criarCaracteresCGRAM@character
 21700  003CEC  0E2F               	movlw	47
 21701  003CEE                     i2u570_40:
 21702  003CEE  0009               	tblrd		*+
 21703  003CF0  FFFF               	dw	65535	; errata NOP
 21704  003CF2  CFF5 FFDE          	movff	tablat,postinc2
 21705  003CF6  06E8               	decf	wreg,f,c
 21706  003CF8  E2FA               	bc	i2u570_40
 21707                           
 21708                           ;lcd.h: 183: Lcd_Cmd(0b0100);
 21709  003CFA  0E04               	movlw	4
 21710  003CFC  EC68  F036         	call	i2_Lcd_Cmd
 21711                           
 21712                           ;lcd.h: 184: Lcd_Cmd(0b0000);
 21713  003D00  0E00               	movlw	0
 21714  003D02  EC68  F036         	call	i2_Lcd_Cmd
 21715                           
 21716                           ;lcd.h: 185: _delay((unsigned long)((100)*(8000000/4000000.0)));
 21717  003D06  0E32               	movlw	50
 21718  003D08                     i2u921_47:
 21719  003D08  FFFF               	dw	65535	; errata NOP
 21720  003D0A  2EE8               	decfsz	wreg,f,c
 21721  003D0C  D7FD               	bra	i2u921_47
 21722                           
 21723                           ;lcd.h: 186: char i = 0, j = 0, k = 0;
 21724  003D0E  0E00               	movlw	0
 21725  003D10  6E3C               	movwf	i2criarCaracteresCGRAM@i,c
 21726  003D12  0E00               	movlw	0
 21727  003D14  6E3B               	movwf	i2criarCaracteresCGRAM@j,c
 21728  003D16  0E00               	movlw	0
 21729  003D18  6E3A               	movwf	i2criarCaracteresCGRAM@k,c
 21730                           
 21731                           ;lcd.h: 187: for (i = 0; i < 5; i++) {
 21732  003D1A  0E00               	movlw	0
 21733  003D1C  6E3C               	movwf	i2criarCaracteresCGRAM@i,c
 21734  003D1E                     i2l5777:
 21735  003D1E  FFFF               	dw	65535	; assembler added errata NOP
 21736  003D20  0E04               	movlw	4
 21737  003D22  643C               	cpfsgt	i2criarCaracteresCGRAM@i,c
 21738  003D24  D001               	goto	i2l643
 21739  003D26  D039               	goto	i2u576_40
 21740  003D28                     i2l643:
 21741  003D28  FFFF               	dw	65535	; assembler added errata NOP
 21742                           
 21743                           ;lcd.h: 188: if (k == 1) i = 0;
 21744  003D2A  043A               	decf	i2criarCaracteresCGRAM@k,w,c
 21745  003D2C  A4D8               	btfss	status,2,c
 21746  003D2E  D002               	goto	i2l645
 21747  003D30  0E00               	movlw	0
 21748  003D32  6E3C               	movwf	i2criarCaracteresCGRAM@i,c
 21749  003D34                     i2l645:
 21750  003D34  FFFF               	dw	65535	; assembler added errata NOP
 21751                           
 21752                           ;lcd.h: 189: for (j = 0; j < 8; j++) {
 21753  003D36  0E00               	movlw	0
 21754  003D38  6E3B               	movwf	i2criarCaracteresCGRAM@j,c
 21755  003D3A                     i2l5785:
 21756  003D3A  FFFF               	dw	65535	; assembler added errata NOP
 21757  003D3C  0E07               	movlw	7
 21758  003D3E  643B               	cpfsgt	i2criarCaracteresCGRAM@j,c
 21759  003D40  D001               	goto	i2l646
 21760  003D42  D027               	goto	i2u575_40
 21761  003D44                     i2l646:
 21762  003D44  FFFF               	dw	65535	; assembler added errata NOP
 21763                           
 21764                           ;lcd.h: 190: Lcd_Write_Char((k) ? character[i][j] : 0);
 21765  003D46  503A               	movf	i2criarCaracteresCGRAM@k,w,c
 21766  003D48  A4D8               	btfss	status,2,c
 21767  003D4A  D005               	goto	i2l649
 21768  003D4C  0E00               	movlw	0
 21769  003D4E  6E39               	movwf	i2_criarCaracteresCGRAM$1548+1,c
 21770  003D50  0E00               	movlw	0
 21771  003D52  6E38               	movwf	i2_criarCaracteresCGRAM$1548,c
 21772  003D54  D018               	goto	i2l651
 21773  003D56                     i2l649:
 21774  003D56  FFFF               	dw	65535	; assembler added errata NOP
 21775  003D58  503C               	movf	i2criarCaracteresCGRAM@i,w,c
 21776  003D5A  0D08               	mullw	8
 21777  003D5C  0E08               	movlw	low i2criarCaracteresCGRAM@character
 21778  003D5E  6E05               	movwf	??i2_criarCaracteresCGRAM& (0+255),c
 21779  003D60  0E00               	movlw	high i2criarCaracteresCGRAM@character
 21780  003D62  6E06               	movwf	(??i2_criarCaracteresCGRAM+1)& (0+255),c
 21781  003D64  50F3               	movf	prodl,w,c
 21782  003D66  2605               	addwf	??i2_criarCaracteresCGRAM,f,c
 21783  003D68  50F4               	movf	prodh,w,c
 21784  003D6A  2206               	addwfc	??i2_criarCaracteresCGRAM+1,f,c
 21785  003D6C  503B               	movf	i2criarCaracteresCGRAM@j,w,c
 21786  003D6E  0D01               	mullw	1
 21787  003D70  50F3               	movf	prodl,w,c
 21788  003D72  2405               	addwf	??i2_criarCaracteresCGRAM,w,c
 21789  003D74  6ED9               	movwf	fsr2l,c
 21790  003D76  50F4               	movf	prodh,w,c
 21791  003D78  2006               	addwfc	??i2_criarCaracteresCGRAM+1,w,c
 21792  003D7A  6EDA               	movwf	fsr2h,c
 21793  003D7C  50DF               	movf	indf2,w,c
 21794  003D7E  6E07               	movwf	(??i2_criarCaracteresCGRAM+2)& (0+255),c
 21795  003D80  5007               	movf	??i2_criarCaracteresCGRAM+2,w,c
 21796  003D82  6E38               	movwf	i2_criarCaracteresCGRAM$1548,c
 21797  003D84  6A39               	clrf	i2_criarCaracteresCGRAM$1548+1,c
 21798  003D86                     i2l651:
 21799  003D86  FFFF               	dw	65535	; assembler added errata NOP
 21800  003D88  5038               	movf	i2_criarCaracteresCGRAM$1548,w,c
 21801  003D8A  EC8D  F039         	call	i2_Lcd_Write_Char
 21802  003D8E  2A3B               	incf	i2criarCaracteresCGRAM@j,f,c
 21803  003D90  D7D4               	goto	i2l5785
 21804  003D92                     i2u575_40:
 21805  003D92  FFFF               	dw	65535	; assembler added errata NOP
 21806                           
 21807                           ;lcd.h: 191: }
 21808                           ;lcd.h: 192: k++;
 21809  003D94  2A3A               	incf	i2criarCaracteresCGRAM@k,f,c
 21810  003D96  2A3C               	incf	i2criarCaracteresCGRAM@i,f,c
 21811  003D98  D7C2               	goto	i2l5777
 21812  003D9A                     i2u576_40:
 21813  003D9A  FFFF               	dw	65535	; assembler added errata NOP
 21814  003D9C  0012               	return		;funcret
 21815  003D9E  FFFF               	dw	65535	; errata NOP
 21816  003DA0                     __end_ofi2_criarCaracteresCGRAM:
 21817                           	opt stack 0
 21818                           tosu	equ	0xFFF
 21819                           tosh	equ	0xFFE
 21820                           tosl	equ	0xFFD
 21821                           pclatu	equ	0xFFB
 21822                           pclath	equ	0xFFA
 21823                           tblptru	equ	0xFF8
 21824                           tblptrh	equ	0xFF7
 21825                           tblptrl	equ	0xFF6
 21826                           tablat	equ	0xFF5
 21827                           prodh	equ	0xFF4
 21828                           prodl	equ	0xFF3
 21829                           intcon	equ	0xFF2
 21830                           intcon2	equ	0xFF1
 21831                           intcon3	equ	0xFF0
 21832                           indf0	equ	0xFEF
 21833                           postinc0	equ	0xFEE
 21834                           fsr0h	equ	0xFEA
 21835                           fsr0l	equ	0xFE9
 21836                           wreg	equ	0xFE8
 21837                           postdec1	equ	0xFE5
 21838                           fsr1h	equ	0xFE2
 21839                           fsr1l	equ	0xFE1
 21840                           indf2	equ	0xFDF
 21841                           postinc2	equ	0xFDE
 21842                           postdec2	equ	0xFDD
 21843                           fsr2h	equ	0xFDA
 21844                           fsr2l	equ	0xFD9
 21845                           status	equ	0xFD8
 21846                           
 21847 ;; *************** function i2_Lcd_Write_Char *****************
 21848 ;; Defined at:
 21849 ;;		line 109 in file "lcd.h"
 21850 ;; Parameters:    Size  Location     Type
 21851 ;;  a               1    wreg     unsigned char 
 21852 ;; Auto vars:     Size  Location     Type
 21853 ;;  a               1    3[COMRAM] unsigned char 
 21854 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
 21855 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
 21856 ;; Return value:  Size  Location     Type
 21857 ;;                  1    wreg      void 
 21858 ;; Registers used:
 21859 ;;		wreg, status,2, status,0, cstack
 21860 ;; Tracked objects:
 21861 ;;		On entry : 0/0
 21862 ;;		On exit  : 0/0
 21863 ;;		Unchanged: 0/0
 21864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21865 ;;      Params:         0       0       0       0       0       0       0
 21866 ;;      Locals:         3       0       0       0       0       0       0
 21867 ;;      Temps:          0       0       0       0       0       0       0
 21868 ;;      Totals:         3       0       0       0       0       0       0
 21869 ;;Total ram usage:        3 bytes
 21870 ;; Hardware stack levels used:    1
 21871 ;; Hardware stack levels required when called:    1
 21872 ;; This function calls:
 21873 ;;		i2_Lcd_Port
 21874 ;; This function is called by:
 21875 ;;		i2_criarCaracteresCGRAM
 21876 ;; This function uses a non-reentrant model
 21877 ;;
 21878                           
 21879                           	psect	text81
 21880  00731A                     __ptext81:
 21881                           	opt stack 0
 21882  00731A                     i2_Lcd_Write_Char:
 21883                           	opt stack 0
 21884  00731A  FFFF               	dw	65535	; assembler added errata NOP
 21885                           
 21886                           ;incstack = 0
 21887                           ;i2Lcd_Write_Char@a stored from wreg
 21888  00731C  6E04               	movwf	i2Lcd_Write_Char@a,c
 21889                           
 21890                           ;lcd.h: 110: char tempp, y;
 21891                           ;lcd.h: 111: tempp = a & 0x0F;
 21892  00731E  5004               	movf	i2Lcd_Write_Char@a,w,c
 21893  007320  0B0F               	andlw	15
 21894  007322  6E02               	movwf	i2Lcd_Write_Char@tempp,c
 21895                           
 21896                           ;lcd.h: 112: y = a & 0xF0;
 21897  007324  5004               	movf	i2Lcd_Write_Char@a,w,c
 21898  007326  0BF0               	andlw	240
 21899  007328  6E03               	movwf	i2Lcd_Write_Char@y,c
 21900                           
 21901                           ;lcd.h: 113: PORTDbits.RD1 = 1;
 21902  00732A  8283               	bsf	3971,1,c	;volatile
 21903                           
 21904                           ;lcd.h: 114: Lcd_Port(y >> 4);
 21905  00732C  3803               	swapf	i2Lcd_Write_Char@y,w,c
 21906  00732E  0B0F               	andlw	15
 21907  007330  EC9C  F038         	call	i2_Lcd_Port
 21908                           
 21909                           ;lcd.h: 115: PORTDbits.RD0 = 1;
 21910  007334  8083               	bsf	3971,0,c	;volatile
 21911                           
 21912                           ;lcd.h: 116: _delay((unsigned long)((150)*(8000000/4000000.0)));
 21913  007336  0E4B               	movlw	75
 21914  007338                     i2u922_47:
 21915  007338  FFFF               	dw	65535	; errata NOP
 21916  00733A  2EE8               	decfsz	wreg,f,c
 21917  00733C  D7FD               	bra	i2u922_47
 21918                           
 21919                           ;lcd.h: 117: PORTDbits.RD0 = 0;
 21920  00733E  9083               	bcf	3971,0,c	;volatile
 21921                           
 21922                           ;lcd.h: 118: Lcd_Port(tempp);
 21923  007340  5002               	movf	i2Lcd_Write_Char@tempp,w,c
 21924  007342  EC9C  F038         	call	i2_Lcd_Port
 21925                           
 21926                           ;lcd.h: 119: PORTDbits.RD0 = 1;
 21927  007346  8083               	bsf	3971,0,c	;volatile
 21928                           
 21929                           ;lcd.h: 120: _delay((unsigned long)((150)*(8000000/4000000.0)));
 21930  007348  0E4B               	movlw	75
 21931  00734A                     i2u923_47:
 21932  00734A  FFFF               	dw	65535	; errata NOP
 21933  00734C  2EE8               	decfsz	wreg,f,c
 21934  00734E  D7FD               	bra	i2u923_47
 21935                           
 21936                           ;lcd.h: 121: PORTDbits.RD0 = 0;
 21937  007350  9083               	bcf	3971,0,c	;volatile
 21938                           
 21939                           ;lcd.h: 122: _delay((unsigned long)((100)*(8000000/4000000.0)));
 21940  007352  0E32               	movlw	50
 21941  007354                     i2u924_47:
 21942  007354  FFFF               	dw	65535	; errata NOP
 21943  007356  2EE8               	decfsz	wreg,f,c
 21944  007358  D7FD               	bra	i2u924_47
 21945                           
 21946                           ;lcd.h: 125: PORTDbits.RD0 = 1;
 21947  00735A  8083               	bsf	3971,0,c	;volatile
 21948                           
 21949                           ;lcd.h: 126: PORTDbits.RD1 = 1;
 21950  00735C  8283               	bsf	3971,1,c	;volatile
 21951                           
 21952                           ;lcd.h: 127: PORTDbits.RD2 = 1;
 21953  00735E  8483               	bsf	3971,2,c	;volatile
 21954                           
 21955                           ;lcd.h: 128: PORTDbits.RD3 = 1;
 21956  007360  8683               	bsf	3971,3,c	;volatile
 21957                           
 21958                           ;lcd.h: 129: PORTDbits.RD4 = 1;
 21959  007362  8883               	bsf	3971,4,c	;volatile
 21960                           
 21961                           ;lcd.h: 130: PORTDbits.RD5 = 1;
 21962  007364  8A83               	bsf	3971,5,c	;volatile
 21963  007366  0012               	return		;funcret
 21964  007368  FFFF               	dw	65535	; errata NOP
 21965  00736A                     __end_ofi2_Lcd_Write_Char:
 21966                           	opt stack 0
 21967                           tosu	equ	0xFFF
 21968                           tosh	equ	0xFFE
 21969                           tosl	equ	0xFFD
 21970                           pclatu	equ	0xFFB
 21971                           pclath	equ	0xFFA
 21972                           tblptru	equ	0xFF8
 21973                           tblptrh	equ	0xFF7
 21974                           tblptrl	equ	0xFF6
 21975                           tablat	equ	0xFF5
 21976                           prodh	equ	0xFF4
 21977                           prodl	equ	0xFF3
 21978                           intcon	equ	0xFF2
 21979                           intcon2	equ	0xFF1
 21980                           intcon3	equ	0xFF0
 21981                           indf0	equ	0xFEF
 21982                           postinc0	equ	0xFEE
 21983                           fsr0h	equ	0xFEA
 21984                           fsr0l	equ	0xFE9
 21985                           wreg	equ	0xFE8
 21986                           postdec1	equ	0xFE5
 21987                           fsr1h	equ	0xFE2
 21988                           fsr1l	equ	0xFE1
 21989                           indf2	equ	0xFDF
 21990                           postinc2	equ	0xFDE
 21991                           postdec2	equ	0xFDD
 21992                           fsr2h	equ	0xFDA
 21993                           fsr2l	equ	0xFD9
 21994                           status	equ	0xFD8
 21995                           
 21996 ;; *************** function i2_Lcd_Init *****************
 21997 ;; Defined at:
 21998 ;;		line 13 in file "lcd.h"
 21999 ;; Parameters:    Size  Location     Type
 22000 ;;		None
 22001 ;; Auto vars:     Size  Location     Type
 22002 ;;		None
 22003 ;; Return value:  Size  Location     Type
 22004 ;;                  1    wreg      void 
 22005 ;; Registers used:
 22006 ;;		wreg, status,2, cstack
 22007 ;; Tracked objects:
 22008 ;;		On entry : 0/0
 22009 ;;		On exit  : 0/0
 22010 ;;		Unchanged: 0/0
 22011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22012 ;;      Params:         0       0       0       0       0       0       0
 22013 ;;      Locals:         0       0       0       0       0       0       0
 22014 ;;      Temps:          1       0       0       0       0       0       0
 22015 ;;      Totals:         1       0       0       0       0       0       0
 22016 ;;Total ram usage:        1 bytes
 22017 ;; Hardware stack levels used:    1
 22018 ;; Hardware stack levels required when called:    2
 22019 ;; This function calls:
 22020 ;;		i2_Lcd_Cmd
 22021 ;;		i2_Lcd_Port
 22022 ;; This function is called by:
 22023 ;;		i2_reiniciaLCD
 22024 ;; This function uses a non-reentrant model
 22025 ;;
 22026                           
 22027                           	psect	text82
 22028  007656                     __ptext82:
 22029                           	opt stack 0
 22030  007656                     i2_Lcd_Init:
 22031                           	opt stack 0
 22032  007656  FFFF               	dw	65535	; assembler added errata NOP
 22033                           
 22034                           ;lcd.h: 22: Lcd_Port(0x00);
 22035                           
 22036                           ;incstack = 0
 22037  007658  0E00               	movlw	0
 22038  00765A  EC9C  F038         	call	i2_Lcd_Port
 22039                           
 22040                           ;lcd.h: 23: _delay((unsigned long)((30)*(8000000/4000.0)));
 22041  00765E  0E3B               	movlw	59
 22042  007660  6E04               	movwf	??i2_Lcd_Init& (0+255),c
 22043  007662  0E7A               	movlw	122
 22044  007664                     i2u925_47:
 22045  007664  FFFF               	dw	65535	; errata NOP
 22046  007666  2EE8               	decfsz	wreg,f,c
 22047  007668  D7FD               	bra	i2u925_47
 22048  00766A  2E04               	decfsz	??i2_Lcd_Init& (0+255),f,c
 22049  00766C  D7FB               	bra	i2u925_47
 22050                           
 22051                           ;lcd.h: 24: Lcd_Cmd(0x03);
 22052  00766E  0E03               	movlw	3
 22053  007670  EC68  F036         	call	i2_Lcd_Cmd
 22054                           
 22055                           ;lcd.h: 25: _delay((unsigned long)((15)*(8000000/4000.0)));
 22056  007674  0E1E               	movlw	30
 22057  007676  6E04               	movwf	??i2_Lcd_Init& (0+255),c
 22058  007678  0E3C               	movlw	60
 22059  00767A                     i2u926_47:
 22060  00767A  FFFF               	dw	65535	; errata NOP
 22061  00767C  2EE8               	decfsz	wreg,f,c
 22062  00767E  D7FD               	bra	i2u926_47
 22063  007680  2E04               	decfsz	??i2_Lcd_Init& (0+255),f,c
 22064  007682  D7FB               	bra	i2u926_47
 22065  007684  D000               	nop2	
 22066                           
 22067                           ;lcd.h: 26: Lcd_Cmd(0x03);
 22068  007686  0E03               	movlw	3
 22069  007688  EC68  F036         	call	i2_Lcd_Cmd
 22070                           
 22071                           ;lcd.h: 27: _delay((unsigned long)((20)*(8000000/4000.0)));
 22072  00768C  0E27               	movlw	39
 22073  00768E  6E04               	movwf	??i2_Lcd_Init& (0+255),c
 22074  007690  0EFC               	movlw	252
 22075  007692                     i2u927_47:
 22076  007692  FFFF               	dw	65535	; errata NOP
 22077  007694  2EE8               	decfsz	wreg,f,c
 22078  007696  D7FD               	bra	i2u927_47
 22079  007698  2E04               	decfsz	??i2_Lcd_Init& (0+255),f,c
 22080  00769A  D7FB               	bra	i2u927_47
 22081                           
 22082                           ;lcd.h: 28: Lcd_Cmd(0x03);
 22083  00769C  0E03               	movlw	3
 22084  00769E  EC68  F036         	call	i2_Lcd_Cmd
 22085                           
 22086                           ;lcd.h: 30: Lcd_Cmd(0x02);
 22087  0076A2  0E02               	movlw	2
 22088  0076A4  EC68  F036         	call	i2_Lcd_Cmd
 22089                           
 22090                           ;lcd.h: 31: Lcd_Cmd(0x02);
 22091  0076A8  0E02               	movlw	2
 22092  0076AA  EC68  F036         	call	i2_Lcd_Cmd
 22093                           
 22094                           ;lcd.h: 32: Lcd_Cmd(0x08);
 22095  0076AE  0E08               	movlw	8
 22096  0076B0  EC68  F036         	call	i2_Lcd_Cmd
 22097                           
 22098                           ;lcd.h: 33: Lcd_Cmd(0x00);
 22099  0076B4  0E00               	movlw	0
 22100  0076B6  EC68  F036         	call	i2_Lcd_Cmd
 22101                           
 22102                           ;lcd.h: 34: Lcd_Cmd(0x0C);
 22103  0076BA  0E0C               	movlw	12
 22104  0076BC  EC68  F036         	call	i2_Lcd_Cmd
 22105                           
 22106                           ;lcd.h: 35: Lcd_Cmd(0x00);
 22107  0076C0  0E00               	movlw	0
 22108  0076C2  EC68  F036         	call	i2_Lcd_Cmd
 22109                           
 22110                           ;lcd.h: 36: Lcd_Cmd(0x06);
 22111  0076C6  0E06               	movlw	6
 22112  0076C8  EC68  F036         	call	i2_Lcd_Cmd
 22113  0076CC  0012               	return		;funcret
 22114  0076CE  FFFF               	dw	65535	; errata NOP
 22115  0076D0                     __end_ofi2_Lcd_Init:
 22116                           	opt stack 0
 22117                           tosu	equ	0xFFF
 22118                           tosh	equ	0xFFE
 22119                           tosl	equ	0xFFD
 22120                           pclatu	equ	0xFFB
 22121                           pclath	equ	0xFFA
 22122                           tblptru	equ	0xFF8
 22123                           tblptrh	equ	0xFF7
 22124                           tblptrl	equ	0xFF6
 22125                           tablat	equ	0xFF5
 22126                           prodh	equ	0xFF4
 22127                           prodl	equ	0xFF3
 22128                           intcon	equ	0xFF2
 22129                           intcon2	equ	0xFF1
 22130                           intcon3	equ	0xFF0
 22131                           indf0	equ	0xFEF
 22132                           postinc0	equ	0xFEE
 22133                           fsr0h	equ	0xFEA
 22134                           fsr0l	equ	0xFE9
 22135                           wreg	equ	0xFE8
 22136                           postdec1	equ	0xFE5
 22137                           fsr1h	equ	0xFE2
 22138                           fsr1l	equ	0xFE1
 22139                           indf2	equ	0xFDF
 22140                           postinc2	equ	0xFDE
 22141                           postdec2	equ	0xFDD
 22142                           fsr2h	equ	0xFDA
 22143                           fsr2l	equ	0xFD9
 22144                           status	equ	0xFD8
 22145                           
 22146 ;; *************** function i2_Lcd_Cmd *****************
 22147 ;; Defined at:
 22148 ;;		line 61 in file "lcd.h"
 22149 ;; Parameters:    Size  Location     Type
 22150 ;;  a               1    wreg     unsigned char 
 22151 ;; Auto vars:     Size  Location     Type
 22152 ;;  a               1    2[COMRAM] unsigned char 
 22153 ;; Return value:  Size  Location     Type
 22154 ;;                  1    wreg      void 
 22155 ;; Registers used:
 22156 ;;		wreg, status,2, cstack
 22157 ;; Tracked objects:
 22158 ;;		On entry : 0/0
 22159 ;;		On exit  : 0/0
 22160 ;;		Unchanged: 0/0
 22161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22162 ;;      Params:         0       0       0       0       0       0       0
 22163 ;;      Locals:         1       0       0       0       0       0       0
 22164 ;;      Temps:          1       0       0       0       0       0       0
 22165 ;;      Totals:         2       0       0       0       0       0       0
 22166 ;;Total ram usage:        2 bytes
 22167 ;; Hardware stack levels used:    1
 22168 ;; Hardware stack levels required when called:    1
 22169 ;; This function calls:
 22170 ;;		i2_Lcd_Port
 22171 ;; This function is called by:
 22172 ;;		i2_Lcd_Init
 22173 ;;		i2_criarCaracteresCGRAM
 22174 ;; This function uses a non-reentrant model
 22175 ;;
 22176                           
 22177                           	psect	text83
 22178  006CD0                     __ptext83:
 22179                           	opt stack 0
 22180  006CD0                     i2_Lcd_Cmd:
 22181                           	opt stack 0
 22182  006CD0  FFFF               	dw	65535	; assembler added errata NOP
 22183                           
 22184                           ;incstack = 0
 22185                           ;i2Lcd_Cmd@a stored from wreg
 22186  006CD2  6E03               	movwf	i2Lcd_Cmd@a,c
 22187                           
 22188                           ;lcd.h: 62: PORTDbits.RD1 = 0;
 22189  006CD4  9283               	bcf	3971,1,c	;volatile
 22190                           
 22191                           ;lcd.h: 63: Lcd_Port(a);
 22192  006CD6  5003               	movf	i2Lcd_Cmd@a,w,c
 22193  006CD8  EC9C  F038         	call	i2_Lcd_Port
 22194                           
 22195                           ;lcd.h: 64: PORTDbits.RD0 = 1;
 22196  006CDC  8083               	bsf	3971,0,c	;volatile
 22197                           
 22198                           ;lcd.h: 65: _delay((unsigned long)((15)*(8000000/4000.0)));
 22199  006CDE  0E1E               	movlw	30
 22200  006CE0  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 22201  006CE2  0E3C               	movlw	60
 22202  006CE4                     i2u928_47:
 22203  006CE4  FFFF               	dw	65535	; errata NOP
 22204  006CE6  2EE8               	decfsz	wreg,f,c
 22205  006CE8  D7FD               	bra	i2u928_47
 22206  006CEA  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 22207  006CEC  D7FB               	bra	i2u928_47
 22208  006CEE  D000               	nop2	
 22209                           
 22210                           ;lcd.h: 66: PORTDbits.RD0 = 0;
 22211  006CF0  9083               	bcf	3971,0,c	;volatile
 22212  006CF2  0012               	return		;funcret
 22213  006CF4  FFFF               	dw	65535	; errata NOP
 22214  006CF6                     __end_ofi2_Lcd_Cmd:
 22215                           	opt stack 0
 22216                           tosu	equ	0xFFF
 22217                           tosh	equ	0xFFE
 22218                           tosl	equ	0xFFD
 22219                           pclatu	equ	0xFFB
 22220                           pclath	equ	0xFFA
 22221                           tblptru	equ	0xFF8
 22222                           tblptrh	equ	0xFF7
 22223                           tblptrl	equ	0xFF6
 22224                           tablat	equ	0xFF5
 22225                           prodh	equ	0xFF4
 22226                           prodl	equ	0xFF3
 22227                           intcon	equ	0xFF2
 22228                           intcon2	equ	0xFF1
 22229                           intcon3	equ	0xFF0
 22230                           indf0	equ	0xFEF
 22231                           postinc0	equ	0xFEE
 22232                           fsr0h	equ	0xFEA
 22233                           fsr0l	equ	0xFE9
 22234                           wreg	equ	0xFE8
 22235                           postdec1	equ	0xFE5
 22236                           fsr1h	equ	0xFE2
 22237                           fsr1l	equ	0xFE1
 22238                           indf2	equ	0xFDF
 22239                           postinc2	equ	0xFDE
 22240                           postdec2	equ	0xFDD
 22241                           fsr2h	equ	0xFDA
 22242                           fsr2l	equ	0xFD9
 22243                           status	equ	0xFD8
 22244                           
 22245 ;; *************** function i2_Lcd_Port *****************
 22246 ;; Defined at:
 22247 ;;		line 39 in file "lcd.h"
 22248 ;; Parameters:    Size  Location     Type
 22249 ;;  a               1    wreg     unsigned char 
 22250 ;; Auto vars:     Size  Location     Type
 22251 ;;  a               1    0[COMRAM] unsigned char 
 22252 ;; Return value:  Size  Location     Type
 22253 ;;                  1    wreg      void 
 22254 ;; Registers used:
 22255 ;;		wreg
 22256 ;; Tracked objects:
 22257 ;;		On entry : 0/0
 22258 ;;		On exit  : 0/0
 22259 ;;		Unchanged: 0/0
 22260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22261 ;;      Params:         0       0       0       0       0       0       0
 22262 ;;      Locals:         1       0       0       0       0       0       0
 22263 ;;      Temps:          0       0       0       0       0       0       0
 22264 ;;      Totals:         1       0       0       0       0       0       0
 22265 ;;Total ram usage:        1 bytes
 22266 ;; Hardware stack levels used:    1
 22267 ;; This function calls:
 22268 ;;		Nothing
 22269 ;; This function is called by:
 22270 ;;		i2_Lcd_Init
 22271 ;;		i2_Lcd_Cmd
 22272 ;;		i2_Lcd_Write_Char
 22273 ;; This function uses a non-reentrant model
 22274 ;;
 22275                           
 22276                           	psect	text84
 22277  007138                     __ptext84:
 22278                           	opt stack 0
 22279  007138                     i2_Lcd_Port:
 22280                           	opt stack 0
 22281  007138  FFFF               	dw	65535	; assembler added errata NOP
 22282                           
 22283                           ;incstack = 0
 22284                           ;i2Lcd_Port@a stored from wreg
 22285  00713A  6E01               	movwf	i2Lcd_Port@a,c
 22286                           
 22287                           ;lcd.h: 40: if (a & 1)
 22288  00713C  A001               	btfss	i2Lcd_Port@a,0,c
 22289  00713E  D002               	goto	i2l598
 22290                           
 22291                           ;lcd.h: 41: PORTDbits.RD2 = 1;
 22292  007140  8483               	bsf	3971,2,c	;volatile
 22293  007142  D002               	goto	i2l599
 22294  007144                     i2l598:
 22295  007144  FFFF               	dw	65535	; assembler added errata NOP
 22296                           
 22297                           ;lcd.h: 42: else
 22298                           ;lcd.h: 43: PORTDbits.RD2 = 0;
 22299  007146  9483               	bcf	3971,2,c	;volatile
 22300  007148                     i2l599:
 22301  007148  FFFF               	dw	65535	; assembler added errata NOP
 22302                           
 22303                           ;lcd.h: 45: if (a & 2)
 22304  00714A  A201               	btfss	i2Lcd_Port@a,1,c
 22305  00714C  D002               	goto	i2l600
 22306                           
 22307                           ;lcd.h: 46: PORTDbits.RD3 = 1;
 22308  00714E  8683               	bsf	3971,3,c	;volatile
 22309  007150  D002               	goto	i2l601
 22310  007152                     i2l600:
 22311  007152  FFFF               	dw	65535	; assembler added errata NOP
 22312                           
 22313                           ;lcd.h: 47: else
 22314                           ;lcd.h: 48: PORTDbits.RD3 = 0;
 22315  007154  9683               	bcf	3971,3,c	;volatile
 22316  007156                     i2l601:
 22317  007156  FFFF               	dw	65535	; assembler added errata NOP
 22318                           
 22319                           ;lcd.h: 50: if (a & 4)
 22320  007158  A401               	btfss	i2Lcd_Port@a,2,c
 22321  00715A  D002               	goto	i2l602
 22322                           
 22323                           ;lcd.h: 51: PORTDbits.RD4 = 1;
 22324  00715C  8883               	bsf	3971,4,c	;volatile
 22325  00715E  D002               	goto	i2l603
 22326  007160                     i2l602:
 22327  007160  FFFF               	dw	65535	; assembler added errata NOP
 22328                           
 22329                           ;lcd.h: 52: else
 22330                           ;lcd.h: 53: PORTDbits.RD4 = 0;
 22331  007162  9883               	bcf	3971,4,c	;volatile
 22332  007164                     i2l603:
 22333  007164  FFFF               	dw	65535	; assembler added errata NOP
 22334                           
 22335                           ;lcd.h: 55: if (a & 8)
 22336  007166  A601               	btfss	i2Lcd_Port@a,3,c
 22337  007168  D002               	goto	i2l604
 22338                           
 22339                           ;lcd.h: 56: PORTDbits.RD5 = 1;
 22340  00716A  8A83               	bsf	3971,5,c	;volatile
 22341  00716C  D002               	goto	i2l605
 22342  00716E                     i2l604:
 22343  00716E  FFFF               	dw	65535	; assembler added errata NOP
 22344                           
 22345                           ;lcd.h: 57: else
 22346                           ;lcd.h: 58: PORTDbits.RD5 = 0;
 22347  007170  9A83               	bcf	3971,5,c	;volatile
 22348  007172                     i2l605:
 22349  007172  FFFF               	dw	65535	; assembler added errata NOP
 22350  007174  0012               	return		;funcret
 22351  007176  FFFF               	dw	65535	; errata NOP
 22352  007178                     __end_ofi2_Lcd_Port:
 22353                           	opt stack 0
 22354                           tosu	equ	0xFFF
 22355                           tosh	equ	0xFFE
 22356                           tosl	equ	0xFFD
 22357                           pclatu	equ	0xFFB
 22358                           pclath	equ	0xFFA
 22359                           tblptru	equ	0xFF8
 22360                           tblptrh	equ	0xFF7
 22361                           tblptrl	equ	0xFF6
 22362                           tablat	equ	0xFF5
 22363                           prodh	equ	0xFF4
 22364                           prodl	equ	0xFF3
 22365                           intcon	equ	0xFF2
 22366                           intcon2	equ	0xFF1
 22367                           intcon3	equ	0xFF0
 22368                           indf0	equ	0xFEF
 22369                           postinc0	equ	0xFEE
 22370                           fsr0h	equ	0xFEA
 22371                           fsr0l	equ	0xFE9
 22372                           wreg	equ	0xFE8
 22373                           postdec1	equ	0xFE5
 22374                           fsr1h	equ	0xFE2
 22375                           fsr1l	equ	0xFE1
 22376                           indf2	equ	0xFDF
 22377                           postinc2	equ	0xFDE
 22378                           postdec2	equ	0xFDD
 22379                           fsr2h	equ	0xFDA
 22380                           fsr2l	equ	0xFD9
 22381                           status	equ	0xFD8
 22382                           
 22383 ;; *************** function i2_getDS1307TimeDate *****************
 22384 ;; Defined at:
 22385 ;;		line 52 in file "ds1307.h"
 22386 ;; Parameters:    Size  Location     Type
 22387 ;;  ptrToUserVal    2    5[COMRAM] PTR struct .
 22388 ;;		 -> rtc(7), 
 22389 ;; Auto vars:     Size  Location     Type
 22390 ;;		None
 22391 ;; Return value:  Size  Location     Type
 22392 ;;                  1    wreg      void 
 22393 ;; Registers used:
 22394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22395 ;; Tracked objects:
 22396 ;;		On entry : 0/0
 22397 ;;		On exit  : 0/0
 22398 ;;		Unchanged: 0/0
 22399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22400 ;;      Params:         2       0       0       0       0       0       0
 22401 ;;      Locals:         0       0       0       0       0       0       0
 22402 ;;      Temps:          0       0       0       0       0       0       0
 22403 ;;      Totals:         2       0       0       0       0       0       0
 22404 ;;Total ram usage:        2 bytes
 22405 ;; Hardware stack levels used:    1
 22406 ;; Hardware stack levels required when called:    2
 22407 ;; This function calls:
 22408 ;;		i2_BCDtoDEC
 22409 ;;		i2_I2C_Read
 22410 ;;		i2_I2C_Restart
 22411 ;;		i2_I2C_Start
 22412 ;;		i2_I2C_Stop
 22413 ;;		i2_I2C_Write
 22414 ;; This function is called by:
 22415 ;;		_timer
 22416 ;; This function uses a non-reentrant model
 22417 ;;
 22418                           
 22419                           	psect	text85
 22420  003520                     __ptext85:
 22421                           	opt stack 0
 22422  003520                     i2_getDS1307TimeDate:
 22423                           	opt stack 0
 22424  003520  FFFF               	dw	65535	; assembler added errata NOP
 22425                           
 22426                           ;ds1307.h: 54: I2C_Start();
 22427                           
 22428                           ;incstack = 0
 22429  003522  ECB6  F035         	call	i2_I2C_Start	;wreg free
 22430                           
 22431                           ;ds1307.h: 55: I2C_Write(0xD0);
 22432  003526  0E00               	movlw	0
 22433  003528  6E03               	movwf	i2I2C_Write@d+1,c
 22434  00352A  0ED0               	movlw	208
 22435  00352C  6E02               	movwf	i2I2C_Write@d,c
 22436  00352E  ECDA  F035         	call	i2_I2C_Write	;wreg free
 22437                           
 22438                           ;ds1307.h: 56: I2C_Write(0x00);
 22439  003532  0E00               	movlw	0
 22440  003534  6E03               	movwf	i2I2C_Write@d+1,c
 22441  003536  0E00               	movlw	0
 22442  003538  6E02               	movwf	i2I2C_Write@d,c
 22443  00353A  ECDA  F035         	call	i2_I2C_Write	;wreg free
 22444                           
 22445                           ;ds1307.h: 57: I2C_Restart();
 22446  00353E  ECC2  F035         	call	i2_I2C_Restart	;wreg free
 22447                           
 22448                           ;ds1307.h: 58: I2C_Write(0xD1);
 22449  003542  0E00               	movlw	0
 22450  003544  6E03               	movwf	i2I2C_Write@d+1,c
 22451  003546  0ED1               	movlw	209
 22452  003548  6E02               	movwf	i2I2C_Write@d,c
 22453  00354A  ECDA  F035         	call	i2_I2C_Write	;wreg free
 22454                           
 22455                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
 22456  00354E  EE20 F001          	lfsr	2,1
 22457  003552  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 22458  003554  26D9               	addwf	fsr2l,f,c
 22459  003556  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 22460  003558  22DA               	addwfc	fsr2h,f,c
 22461  00355A  0E00               	movlw	0
 22462  00355C  6E03               	movwf	i2I2C_Read@a+1,c
 22463  00355E  0E01               	movlw	1
 22464  003560  6E02               	movwf	i2I2C_Read@a,c
 22465  003562  EC05  F037         	call	i2_I2C_Read	;wreg free
 22466  003566  5002               	movf	?i2_I2C_Read,w,c
 22467  003568  EC02  F036         	call	i2_BCDtoDEC
 22468  00356C  6EDF               	movwf	indf2,c
 22469                           
 22470                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
 22471  00356E  EE20 F002          	lfsr	2,2
 22472  003572  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 22473  003574  26D9               	addwf	fsr2l,f,c
 22474  003576  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 22475  003578  22DA               	addwfc	fsr2h,f,c
 22476  00357A  0E00               	movlw	0
 22477  00357C  6E03               	movwf	i2I2C_Read@a+1,c
 22478  00357E  0E01               	movlw	1
 22479  003580  6E02               	movwf	i2I2C_Read@a,c
 22480  003582  EC05  F037         	call	i2_I2C_Read	;wreg free
 22481  003586  5002               	movf	?i2_I2C_Read,w,c
 22482  003588  EC02  F036         	call	i2_BCDtoDEC
 22483  00358C  6EDF               	movwf	indf2,c
 22484                           
 22485                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
 22486  00358E  EE20 F003          	lfsr	2,3
 22487  003592  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 22488  003594  26D9               	addwf	fsr2l,f,c
 22489  003596  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 22490  003598  22DA               	addwfc	fsr2h,f,c
 22491  00359A  0E00               	movlw	0
 22492  00359C  6E03               	movwf	i2I2C_Read@a+1,c
 22493  00359E  0E01               	movlw	1
 22494  0035A0  6E02               	movwf	i2I2C_Read@a,c
 22495  0035A2  EC05  F037         	call	i2_I2C_Read	;wreg free
 22496  0035A6  5002               	movf	?i2_I2C_Read,w,c
 22497  0035A8  EC02  F036         	call	i2_BCDtoDEC
 22498  0035AC  6EDF               	movwf	indf2,c
 22499                           
 22500                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
 22501  0035AE  0E00               	movlw	0
 22502  0035B0  6E03               	movwf	i2I2C_Read@a+1,c
 22503  0035B2  0E01               	movlw	1
 22504  0035B4  6E02               	movwf	i2I2C_Read@a,c
 22505  0035B6  EC05  F037         	call	i2_I2C_Read	;wreg free
 22506  0035BA  5002               	movf	?i2_I2C_Read,w,c
 22507  0035BC  EC02  F036         	call	i2_BCDtoDEC
 22508  0035C0  C006  FFD9         	movff	i2getDS1307TimeDate@ptrToUserVal,fsr2l
 22509  0035C4  C007  FFDA         	movff	i2getDS1307TimeDate@ptrToUserVal+1,fsr2h
 22510  0035C8  6EDF               	movwf	indf2,c
 22511                           
 22512                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
 22513  0035CA  EE20 F004          	lfsr	2,4
 22514  0035CE  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 22515  0035D0  26D9               	addwf	fsr2l,f,c
 22516  0035D2  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 22517  0035D4  22DA               	addwfc	fsr2h,f,c
 22518  0035D6  0E00               	movlw	0
 22519  0035D8  6E03               	movwf	i2I2C_Read@a+1,c
 22520  0035DA  0E01               	movlw	1
 22521  0035DC  6E02               	movwf	i2I2C_Read@a,c
 22522  0035DE  EC05  F037         	call	i2_I2C_Read	;wreg free
 22523  0035E2  5002               	movf	?i2_I2C_Read,w,c
 22524  0035E4  EC02  F036         	call	i2_BCDtoDEC
 22525  0035E8  6EDF               	movwf	indf2,c
 22526                           
 22527                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
 22528  0035EA  EE20 F005          	lfsr	2,5
 22529  0035EE  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 22530  0035F0  26D9               	addwf	fsr2l,f,c
 22531  0035F2  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 22532  0035F4  22DA               	addwfc	fsr2h,f,c
 22533  0035F6  0E00               	movlw	0
 22534  0035F8  6E03               	movwf	i2I2C_Read@a+1,c
 22535  0035FA  0E01               	movlw	1
 22536  0035FC  6E02               	movwf	i2I2C_Read@a,c
 22537  0035FE  EC05  F037         	call	i2_I2C_Read	;wreg free
 22538  003602  5002               	movf	?i2_I2C_Read,w,c
 22539  003604  EC02  F036         	call	i2_BCDtoDEC
 22540  003608  6EDF               	movwf	indf2,c
 22541                           
 22542                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
 22543  00360A  EE20 F006          	lfsr	2,6
 22544  00360E  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 22545  003610  26D9               	addwf	fsr2l,f,c
 22546  003612  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 22547  003614  22DA               	addwfc	fsr2h,f,c
 22548  003616  0E00               	movlw	0
 22549  003618  6E03               	movwf	i2I2C_Read@a+1,c
 22550  00361A  0E00               	movlw	0
 22551  00361C  6E02               	movwf	i2I2C_Read@a,c
 22552  00361E  EC05  F037         	call	i2_I2C_Read	;wreg free
 22553  003622  5002               	movf	?i2_I2C_Read,w,c
 22554  003624  EC02  F036         	call	i2_BCDtoDEC
 22555  003628  6EDF               	movwf	indf2,c
 22556                           
 22557                           ;ds1307.h: 66: I2C_Stop();
 22558  00362A  ECBC  F035         	call	i2_I2C_Stop	;wreg free
 22559  00362E  0012               	return		;funcret
 22560  003630  FFFF               	dw	65535	; errata NOP
 22561  003632                     __end_ofi2_getDS1307TimeDate:
 22562                           	opt stack 0
 22563                           tosu	equ	0xFFF
 22564                           tosh	equ	0xFFE
 22565                           tosl	equ	0xFFD
 22566                           pclatu	equ	0xFFB
 22567                           pclath	equ	0xFFA
 22568                           tblptru	equ	0xFF8
 22569                           tblptrh	equ	0xFF7
 22570                           tblptrl	equ	0xFF6
 22571                           tablat	equ	0xFF5
 22572                           prodh	equ	0xFF4
 22573                           prodl	equ	0xFF3
 22574                           intcon	equ	0xFF2
 22575                           intcon2	equ	0xFF1
 22576                           intcon3	equ	0xFF0
 22577                           indf0	equ	0xFEF
 22578                           postinc0	equ	0xFEE
 22579                           fsr0h	equ	0xFEA
 22580                           fsr0l	equ	0xFE9
 22581                           wreg	equ	0xFE8
 22582                           postdec1	equ	0xFE5
 22583                           fsr1h	equ	0xFE2
 22584                           fsr1l	equ	0xFE1
 22585                           indf2	equ	0xFDF
 22586                           postinc2	equ	0xFDE
 22587                           postdec2	equ	0xFDD
 22588                           fsr2h	equ	0xFDA
 22589                           fsr2l	equ	0xFD9
 22590                           status	equ	0xFD8
 22591                           
 22592 ;; *************** function i2_I2C_Restart *****************
 22593 ;; Defined at:
 22594 ;;		line 31 in file "I2C.c"
 22595 ;; Parameters:    Size  Location     Type
 22596 ;;		None
 22597 ;; Auto vars:     Size  Location     Type
 22598 ;;		None
 22599 ;; Return value:  Size  Location     Type
 22600 ;;                  1    wreg      void 
 22601 ;; Registers used:
 22602 ;;		wreg, status,2, status,0, cstack
 22603 ;; Tracked objects:
 22604 ;;		On entry : 0/0
 22605 ;;		On exit  : 0/0
 22606 ;;		Unchanged: 0/0
 22607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22608 ;;      Params:         0       0       0       0       0       0       0
 22609 ;;      Locals:         0       0       0       0       0       0       0
 22610 ;;      Temps:          0       0       0       0       0       0       0
 22611 ;;      Totals:         0       0       0       0       0       0       0
 22612 ;;Total ram usage:        0 bytes
 22613 ;; Hardware stack levels used:    1
 22614 ;; Hardware stack levels required when called:    1
 22615 ;; This function calls:
 22616 ;;		i2_I2C_Wait
 22617 ;; This function is called by:
 22618 ;;		i2_getDS1307TimeDate
 22619 ;; This function uses a non-reentrant model
 22620 ;;
 22621                           
 22622                           	psect	text86
 22623  006B84                     __ptext86:
 22624                           	opt stack 0
 22625  006B84                     i2_I2C_Restart:
 22626                           	opt stack 0
 22627  006B84  FFFF               	dw	65535	; assembler added errata NOP
 22628                           
 22629                           ;I2C.c: 32: I2C_Wait();
 22630                           
 22631                           ;incstack = 0
 22632  006B86  EC0D  F036         	call	i2_I2C_Wait	;wreg free
 22633                           
 22634                           ;I2C.c: 33: RSEN = 1;
 22635  006B8A  82C5               	bsf	4037,1,c	;volatile
 22636  006B8C  0012               	return		;funcret
 22637  006B8E  FFFF               	dw	65535	; errata NOP
 22638  006B90                     __end_ofi2_I2C_Restart:
 22639                           	opt stack 0
 22640                           tosu	equ	0xFFF
 22641                           tosh	equ	0xFFE
 22642                           tosl	equ	0xFFD
 22643                           pclatu	equ	0xFFB
 22644                           pclath	equ	0xFFA
 22645                           tblptru	equ	0xFF8
 22646                           tblptrh	equ	0xFF7
 22647                           tblptrl	equ	0xFF6
 22648                           tablat	equ	0xFF5
 22649                           prodh	equ	0xFF4
 22650                           prodl	equ	0xFF3
 22651                           intcon	equ	0xFF2
 22652                           intcon2	equ	0xFF1
 22653                           intcon3	equ	0xFF0
 22654                           indf0	equ	0xFEF
 22655                           postinc0	equ	0xFEE
 22656                           fsr0h	equ	0xFEA
 22657                           fsr0l	equ	0xFE9
 22658                           wreg	equ	0xFE8
 22659                           postdec1	equ	0xFE5
 22660                           fsr1h	equ	0xFE2
 22661                           fsr1l	equ	0xFE1
 22662                           indf2	equ	0xFDF
 22663                           postinc2	equ	0xFDE
 22664                           postdec2	equ	0xFDD
 22665                           fsr2h	equ	0xFDA
 22666                           fsr2l	equ	0xFD9
 22667                           status	equ	0xFD8
 22668                           
 22669 ;; *************** function i2_I2C_Read *****************
 22670 ;; Defined at:
 22671 ;;		line 47 in file "I2C.c"
 22672 ;; Parameters:    Size  Location     Type
 22673 ;;  a               2    1[COMRAM] unsigned short 
 22674 ;; Auto vars:     Size  Location     Type
 22675 ;;  I2C_Read        2    3[COMRAM] unsigned short 
 22676 ;; Return value:  Size  Location     Type
 22677 ;;                  2    1[COMRAM] unsigned short 
 22678 ;; Registers used:
 22679 ;;		wreg, status,2, status,0, cstack
 22680 ;; Tracked objects:
 22681 ;;		On entry : 0/0
 22682 ;;		On exit  : 0/0
 22683 ;;		Unchanged: 0/0
 22684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22685 ;;      Params:         2       0       0       0       0       0       0
 22686 ;;      Locals:         2       0       0       0       0       0       0
 22687 ;;      Temps:          0       0       0       0       0       0       0
 22688 ;;      Totals:         4       0       0       0       0       0       0
 22689 ;;Total ram usage:        4 bytes
 22690 ;; Hardware stack levels used:    1
 22691 ;; Hardware stack levels required when called:    1
 22692 ;; This function calls:
 22693 ;;		i2_I2C_Wait
 22694 ;; This function is called by:
 22695 ;;		i2_getDS1307TimeDate
 22696 ;; This function uses a non-reentrant model
 22697 ;;
 22698                           
 22699                           	psect	text87
 22700  006E0A                     __ptext87:
 22701                           	opt stack 0
 22702  006E0A                     i2_I2C_Read:
 22703                           	opt stack 0
 22704  006E0A  FFFF               	dw	65535	; assembler added errata NOP
 22705                           
 22706                           ;I2C.c: 48: unsigned short temp;
 22707                           ;I2C.c: 49: I2C_Wait();
 22708                           
 22709                           ;incstack = 0
 22710  006E0C  EC0D  F036         	call	i2_I2C_Wait	;wreg free
 22711                           
 22712                           ;I2C.c: 50: RCEN = 1;
 22713  006E10  86C5               	bsf	4037,3,c	;volatile
 22714                           
 22715                           ;I2C.c: 51: I2C_Wait();
 22716  006E12  EC0D  F036         	call	i2_I2C_Wait	;wreg free
 22717                           
 22718                           ;I2C.c: 52: temp = SSPBUF;
 22719  006E16  CFC9 F004          	movff	4041,i2I2C_Read@temp	;volatile
 22720  006E1A  6A05               	clrf	i2I2C_Read@temp+1,c
 22721                           
 22722                           ;I2C.c: 53: I2C_Wait();
 22723  006E1C  EC0D  F036         	call	i2_I2C_Wait	;wreg free
 22724                           
 22725                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 22726  006E20  5002               	movf	i2I2C_Read@a,w,c
 22727  006E22  1003               	iorwf	i2I2C_Read@a+1,w,c
 22728  006E24  A4D8               	btfss	status,2,c
 22729  006E26  D002               	goto	i2u577_40
 22730  006E28  8AC5               	bsf	4037,5,c	;volatile
 22731  006E2A  D002               	goto	i2u578_45
 22732  006E2C                     i2u577_40:
 22733  006E2C  FFFF               	dw	65535	; assembler added errata NOP
 22734  006E2E  9AC5               	bcf	4037,5,c	;volatile
 22735  006E30                     i2u578_45:
 22736  006E30  FFFF               	dw	65535	; assembler added errata NOP
 22737                           
 22738                           ;I2C.c: 55: ACKEN = 1;
 22739  006E32  88C5               	bsf	4037,4,c	;volatile
 22740                           
 22741                           ;I2C.c: 56: return temp;
 22742  006E34  C004  F002         	movff	i2I2C_Read@temp,?i2_I2C_Read
 22743  006E38  C005  F003         	movff	i2I2C_Read@temp+1,?i2_I2C_Read+1
 22744  006E3C  0012               	return		;funcret
 22745  006E3E  FFFF               	dw	65535	; errata NOP
 22746  006E40                     __end_ofi2_I2C_Read:
 22747                           	opt stack 0
 22748                           tosu	equ	0xFFF
 22749                           tosh	equ	0xFFE
 22750                           tosl	equ	0xFFD
 22751                           pclatu	equ	0xFFB
 22752                           pclath	equ	0xFFA
 22753                           tblptru	equ	0xFF8
 22754                           tblptrh	equ	0xFF7
 22755                           tblptrl	equ	0xFF6
 22756                           tablat	equ	0xFF5
 22757                           prodh	equ	0xFF4
 22758                           prodl	equ	0xFF3
 22759                           intcon	equ	0xFF2
 22760                           intcon2	equ	0xFF1
 22761                           intcon3	equ	0xFF0
 22762                           indf0	equ	0xFEF
 22763                           postinc0	equ	0xFEE
 22764                           fsr0h	equ	0xFEA
 22765                           fsr0l	equ	0xFE9
 22766                           wreg	equ	0xFE8
 22767                           postdec1	equ	0xFE5
 22768                           fsr1h	equ	0xFE2
 22769                           fsr1l	equ	0xFE1
 22770                           indf2	equ	0xFDF
 22771                           postinc2	equ	0xFDE
 22772                           postdec2	equ	0xFDD
 22773                           fsr2h	equ	0xFDA
 22774                           fsr2l	equ	0xFD9
 22775                           status	equ	0xFD8
 22776                           
 22777 ;; *************** function i2_BCDtoDEC *****************
 22778 ;; Defined at:
 22779 ;;		line 33 in file "function.c"
 22780 ;; Parameters:    Size  Location     Type
 22781 ;;  val             1    wreg     unsigned char 
 22782 ;; Auto vars:     Size  Location     Type
 22783 ;;  val             1    0[COMRAM] unsigned char 
 22784 ;; Return value:  Size  Location     Type
 22785 ;;                  1    wreg      unsigned char 
 22786 ;; Registers used:
 22787 ;;		wreg, status,2, status,0, prodl, prodh
 22788 ;; Tracked objects:
 22789 ;;		On entry : 0/0
 22790 ;;		On exit  : 0/0
 22791 ;;		Unchanged: 0/0
 22792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22793 ;;      Params:         0       0       0       0       0       0       0
 22794 ;;      Locals:         1       0       0       0       0       0       0
 22795 ;;      Temps:          0       0       0       0       0       0       0
 22796 ;;      Totals:         1       0       0       0       0       0       0
 22797 ;;Total ram usage:        1 bytes
 22798 ;; Hardware stack levels used:    1
 22799 ;; This function calls:
 22800 ;;		Nothing
 22801 ;; This function is called by:
 22802 ;;		i2_getDS1307TimeDate
 22803 ;; This function uses a non-reentrant model
 22804 ;;
 22805                           
 22806                           	psect	text88
 22807  006C04                     __ptext88:
 22808                           	opt stack 0
 22809  006C04                     i2_BCDtoDEC:
 22810                           	opt stack 0
 22811  006C04  FFFF               	dw	65535	; assembler added errata NOP
 22812                           
 22813                           ;incstack = 0
 22814                           ;i2BCDtoDEC@val stored from wreg
 22815  006C06  6E01               	movwf	i2BCDtoDEC@val,c
 22816                           
 22817                           ;function.c: 34: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
 22818  006C08  3801               	swapf	i2BCDtoDEC@val,w,c
 22819  006C0A  0B0F               	andlw	15
 22820  006C0C  0B0F               	andlw	15
 22821  006C0E  0D0A               	mullw	10
 22822  006C10  5001               	movf	i2BCDtoDEC@val,w,c
 22823  006C12  0B0F               	andlw	15
 22824  006C14  24F3               	addwf	prodl,w,c
 22825  006C16  0012               	return		;funcret
 22826  006C18  FFFF               	dw	65535	; errata NOP
 22827  006C1A                     __end_ofi2_BCDtoDEC:
 22828                           	opt stack 0
 22829                           tosu	equ	0xFFF
 22830                           tosh	equ	0xFFE
 22831                           tosl	equ	0xFFD
 22832                           pclatu	equ	0xFFB
 22833                           pclath	equ	0xFFA
 22834                           tblptru	equ	0xFF8
 22835                           tblptrh	equ	0xFF7
 22836                           tblptrl	equ	0xFF6
 22837                           tablat	equ	0xFF5
 22838                           prodh	equ	0xFF4
 22839                           prodl	equ	0xFF3
 22840                           intcon	equ	0xFF2
 22841                           intcon2	equ	0xFF1
 22842                           intcon3	equ	0xFF0
 22843                           indf0	equ	0xFEF
 22844                           postinc0	equ	0xFEE
 22845                           fsr0h	equ	0xFEA
 22846                           fsr0l	equ	0xFE9
 22847                           wreg	equ	0xFE8
 22848                           postdec1	equ	0xFE5
 22849                           fsr1h	equ	0xFE2
 22850                           fsr1l	equ	0xFE1
 22851                           indf2	equ	0xFDF
 22852                           postinc2	equ	0xFDE
 22853                           postdec2	equ	0xFDD
 22854                           fsr2h	equ	0xFDA
 22855                           fsr2l	equ	0xFD9
 22856                           status	equ	0xFD8
 22857                           
 22858 ;; *************** function i2_RTC_Init *****************
 22859 ;; Defined at:
 22860 ;;		line 98 in file "ds1307.h"
 22861 ;; Parameters:    Size  Location     Type
 22862 ;;		None
 22863 ;; Auto vars:     Size  Location     Type
 22864 ;;		None
 22865 ;; Return value:  Size  Location     Type
 22866 ;;                  1    wreg      void 
 22867 ;; Registers used:
 22868 ;;		wreg, status,2, status,0, cstack
 22869 ;; Tracked objects:
 22870 ;;		On entry : 0/0
 22871 ;;		On exit  : 0/0
 22872 ;;		Unchanged: 0/0
 22873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22874 ;;      Params:         0       0       0       0       0       0       0
 22875 ;;      Locals:         0       0       0       0       0       0       0
 22876 ;;      Temps:          0       0       0       0       0       0       0
 22877 ;;      Totals:         0       0       0       0       0       0       0
 22878 ;;Total ram usage:        0 bytes
 22879 ;; Hardware stack levels used:    1
 22880 ;; Hardware stack levels required when called:    2
 22881 ;; This function calls:
 22882 ;;		i2_I2C_Start
 22883 ;;		i2_I2C_Stop
 22884 ;;		i2_I2C_Write
 22885 ;; This function is called by:
 22886 ;;		_timer
 22887 ;; This function uses a non-reentrant model
 22888 ;;
 22889                           
 22890                           	psect	text89
 22891  006DD8                     __ptext89:
 22892                           	opt stack 0
 22893  006DD8                     i2_RTC_Init:
 22894                           	opt stack 0
 22895  006DD8  FFFF               	dw	65535	; assembler added errata NOP
 22896                           
 22897                           ;ds1307.h: 99: I2C_Start();
 22898                           
 22899                           ;incstack = 0
 22900  006DDA  ECB6  F035         	call	i2_I2C_Start	;wreg free
 22901                           
 22902                           ;ds1307.h: 100: I2C_Write(0xD0);
 22903  006DDE  0E00               	movlw	0
 22904  006DE0  6E03               	movwf	i2I2C_Write@d+1,c
 22905  006DE2  0ED0               	movlw	208
 22906  006DE4  6E02               	movwf	i2I2C_Write@d,c
 22907  006DE6  ECDA  F035         	call	i2_I2C_Write	;wreg free
 22908                           
 22909                           ;ds1307.h: 101: I2C_Write(0x07);
 22910  006DEA  0E00               	movlw	0
 22911  006DEC  6E03               	movwf	i2I2C_Write@d+1,c
 22912  006DEE  0E07               	movlw	7
 22913  006DF0  6E02               	movwf	i2I2C_Write@d,c
 22914  006DF2  ECDA  F035         	call	i2_I2C_Write	;wreg free
 22915                           
 22916                           ;ds1307.h: 102: I2C_Write(0x00);
 22917  006DF6  0E00               	movlw	0
 22918  006DF8  6E03               	movwf	i2I2C_Write@d+1,c
 22919  006DFA  0E00               	movlw	0
 22920  006DFC  6E02               	movwf	i2I2C_Write@d,c
 22921  006DFE  ECDA  F035         	call	i2_I2C_Write	;wreg free
 22922                           
 22923                           ;ds1307.h: 103: I2C_Stop();
 22924  006E02  ECBC  F035         	call	i2_I2C_Stop	;wreg free
 22925  006E06  0012               	return		;funcret
 22926  006E08  FFFF               	dw	65535	; errata NOP
 22927  006E0A                     __end_ofi2_RTC_Init:
 22928                           	opt stack 0
 22929                           tosu	equ	0xFFF
 22930                           tosh	equ	0xFFE
 22931                           tosl	equ	0xFFD
 22932                           pclatu	equ	0xFFB
 22933                           pclath	equ	0xFFA
 22934                           tblptru	equ	0xFF8
 22935                           tblptrh	equ	0xFF7
 22936                           tblptrl	equ	0xFF6
 22937                           tablat	equ	0xFF5
 22938                           prodh	equ	0xFF4
 22939                           prodl	equ	0xFF3
 22940                           intcon	equ	0xFF2
 22941                           intcon2	equ	0xFF1
 22942                           intcon3	equ	0xFF0
 22943                           indf0	equ	0xFEF
 22944                           postinc0	equ	0xFEE
 22945                           fsr0h	equ	0xFEA
 22946                           fsr0l	equ	0xFE9
 22947                           wreg	equ	0xFE8
 22948                           postdec1	equ	0xFE5
 22949                           fsr1h	equ	0xFE2
 22950                           fsr1l	equ	0xFE1
 22951                           indf2	equ	0xFDF
 22952                           postinc2	equ	0xFDE
 22953                           postdec2	equ	0xFDD
 22954                           fsr2h	equ	0xFDA
 22955                           fsr2l	equ	0xFD9
 22956                           status	equ	0xFD8
 22957                           
 22958 ;; *************** function _writeEEPROM16_ext *****************
 22959 ;; Defined at:
 22960 ;;		line 40 in file "eeprom.h"
 22961 ;; Parameters:    Size  Location     Type
 22962 ;;  adress          1    wreg     unsigned char 
 22963 ;;  data            2    5[COMRAM] unsigned int 
 22964 ;; Auto vars:     Size  Location     Type
 22965 ;;  adress          1    7[COMRAM] unsigned char 
 22966 ;; Return value:  Size  Location     Type
 22967 ;;                  1    wreg      void 
 22968 ;; Registers used:
 22969 ;;		wreg, status,2, status,0, cstack
 22970 ;; Tracked objects:
 22971 ;;		On entry : 0/0
 22972 ;;		On exit  : 0/0
 22973 ;;		Unchanged: 0/0
 22974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22975 ;;      Params:         2       0       0       0       0       0       0
 22976 ;;      Locals:         1       0       0       0       0       0       0
 22977 ;;      Temps:          0       0       0       0       0       0       0
 22978 ;;      Totals:         3       0       0       0       0       0       0
 22979 ;;Total ram usage:        3 bytes
 22980 ;; Hardware stack levels used:    1
 22981 ;; Hardware stack levels required when called:    3
 22982 ;; This function calls:
 22983 ;;		i2_writeEEPROM_ext
 22984 ;; This function is called by:
 22985 ;;		_timer
 22986 ;; This function uses a non-reentrant model
 22987 ;;
 22988                           
 22989                           	psect	text90
 22990  006C66                     __ptext90:
 22991                           	opt stack 0
 22992  006C66                     _writeEEPROM16_ext:
 22993                           	opt stack 0
 22994  006C66  FFFF               	dw	65535	; assembler added errata NOP
 22995                           
 22996                           ;incstack = 0
 22997                           ;writeEEPROM16_ext@adress stored from wreg
 22998  006C68  6E08               	movwf	writeEEPROM16_ext@adress,c
 22999                           
 23000                           ;eeprom.h: 41: writeEEPROM_ext(adress, data);
 23001  006C6A  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 23002  006C6E  5008               	movf	writeEEPROM16_ext@adress,w,c
 23003  006C70  ECE5  F037         	call	i2_writeEEPROM_ext
 23004                           
 23005                           ;eeprom.h: 42: data>> = 8;
 23006  006C74  5007               	movf	writeEEPROM16_ext@data+1,w,c
 23007  006C76  6E06               	movwf	writeEEPROM16_ext@data,c
 23008  006C78  6A07               	clrf	writeEEPROM16_ext@data+1,c
 23009                           
 23010                           ;eeprom.h: 43: writeEEPROM_ext(adress + 1, data);
 23011  006C7A  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 23012  006C7E  2808               	incf	writeEEPROM16_ext@adress,w,c
 23013  006C80  ECE5  F037         	call	i2_writeEEPROM_ext
 23014  006C84  0012               	return		;funcret
 23015  006C86  FFFF               	dw	65535	; errata NOP
 23016  006C88                     __end_of_writeEEPROM16_ext:
 23017                           	opt stack 0
 23018                           tosu	equ	0xFFF
 23019                           tosh	equ	0xFFE
 23020                           tosl	equ	0xFFD
 23021                           pclatu	equ	0xFFB
 23022                           pclath	equ	0xFFA
 23023                           tblptru	equ	0xFF8
 23024                           tblptrh	equ	0xFF7
 23025                           tblptrl	equ	0xFF6
 23026                           tablat	equ	0xFF5
 23027                           prodh	equ	0xFF4
 23028                           prodl	equ	0xFF3
 23029                           intcon	equ	0xFF2
 23030                           intcon2	equ	0xFF1
 23031                           intcon3	equ	0xFF0
 23032                           indf0	equ	0xFEF
 23033                           postinc0	equ	0xFEE
 23034                           fsr0h	equ	0xFEA
 23035                           fsr0l	equ	0xFE9
 23036                           wreg	equ	0xFE8
 23037                           postdec1	equ	0xFE5
 23038                           fsr1h	equ	0xFE2
 23039                           fsr1l	equ	0xFE1
 23040                           indf2	equ	0xFDF
 23041                           postinc2	equ	0xFDE
 23042                           postdec2	equ	0xFDD
 23043                           fsr2h	equ	0xFDA
 23044                           fsr2l	equ	0xFD9
 23045                           status	equ	0xFD8
 23046                           
 23047 ;; *************** function i2_writeEEPROM_ext *****************
 23048 ;; Defined at:
 23049 ;;		line 13 in file "eeprom.h"
 23050 ;; Parameters:    Size  Location     Type
 23051 ;;  adress          1    wreg     unsigned char 
 23052 ;;  data            1    3[COMRAM] unsigned char 
 23053 ;; Auto vars:     Size  Location     Type
 23054 ;;  adress          1    4[COMRAM] unsigned char 
 23055 ;; Return value:  Size  Location     Type
 23056 ;;                  1    wreg      void 
 23057 ;; Registers used:
 23058 ;;		wreg, status,2, status,0, cstack
 23059 ;; Tracked objects:
 23060 ;;		On entry : 0/0
 23061 ;;		On exit  : 0/0
 23062 ;;		Unchanged: 0/0
 23063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23064 ;;      Params:         1       0       0       0       0       0       0
 23065 ;;      Locals:         1       0       0       0       0       0       0
 23066 ;;      Temps:          0       0       0       0       0       0       0
 23067 ;;      Totals:         2       0       0       0       0       0       0
 23068 ;;Total ram usage:        2 bytes
 23069 ;; Hardware stack levels used:    1
 23070 ;; Hardware stack levels required when called:    2
 23071 ;; This function calls:
 23072 ;;		i2_I2C_Start
 23073 ;;		i2_I2C_Stop
 23074 ;;		i2_I2C_Write
 23075 ;;		i2_delay
 23076 ;; This function is called by:
 23077 ;;		_writeEEPROM16_ext
 23078 ;;		_timer
 23079 ;; This function uses a non-reentrant model
 23080 ;;
 23081                           
 23082                           	psect	text91
 23083  006FCA                     __ptext91:
 23084                           	opt stack 0
 23085  006FCA                     i2_writeEEPROM_ext:
 23086                           	opt stack 0
 23087  006FCA  FFFF               	dw	65535	; assembler added errata NOP
 23088                           
 23089                           ;incstack = 0
 23090                           ;i2writeEEPROM_ext@adress stored from wreg
 23091  006FCC  6E05               	movwf	i2writeEEPROM_ext@adress,c
 23092                           
 23093                           ;eeprom.h: 15: I2C_Start();
 23094  006FCE  ECB6  F035         	call	i2_I2C_Start	;wreg free
 23095                           
 23096                           ;eeprom.h: 16: I2C_Write(0xA0);
 23097  006FD2  0E00               	movlw	0
 23098  006FD4  6E03               	movwf	i2I2C_Write@d+1,c
 23099  006FD6  0EA0               	movlw	160
 23100  006FD8  6E02               	movwf	i2I2C_Write@d,c
 23101  006FDA  ECDA  F035         	call	i2_I2C_Write	;wreg free
 23102                           
 23103                           ;eeprom.h: 18: I2C_Write(adress);
 23104  006FDE  C005  F002         	movff	i2writeEEPROM_ext@adress,i2I2C_Write@d
 23105  006FE2  6A03               	clrf	i2I2C_Write@d+1,c
 23106  006FE4  ECDA  F035         	call	i2_I2C_Write	;wreg free
 23107                           
 23108                           ;eeprom.h: 19: I2C_Write(data);
 23109  006FE8  C004  F002         	movff	i2writeEEPROM_ext@data,i2I2C_Write@d
 23110  006FEC  6A03               	clrf	i2I2C_Write@d+1,c
 23111  006FEE  ECDA  F035         	call	i2_I2C_Write	;wreg free
 23112                           
 23113                           ;eeprom.h: 20: I2C_Stop();
 23114  006FF2  ECBC  F035         	call	i2_I2C_Stop	;wreg free
 23115                           
 23116                           ;eeprom.h: 21: delay(15);
 23117  006FF6  0E00               	movlw	0
 23118  006FF8  6E02               	movwf	i2delay@x+1,c
 23119  006FFA  0E0F               	movlw	15
 23120  006FFC  6E01               	movwf	i2delay@x,c
 23121  006FFE  ECD3  F036         	call	i2_delay	;wreg free
 23122  007002  0012               	return		;funcret
 23123  007004  FFFF               	dw	65535	; errata NOP
 23124  007006                     __end_ofi2_writeEEPROM_ext:
 23125                           	opt stack 0
 23126                           tosu	equ	0xFFF
 23127                           tosh	equ	0xFFE
 23128                           tosl	equ	0xFFD
 23129                           pclatu	equ	0xFFB
 23130                           pclath	equ	0xFFA
 23131                           tblptru	equ	0xFF8
 23132                           tblptrh	equ	0xFF7
 23133                           tblptrl	equ	0xFF6
 23134                           tablat	equ	0xFF5
 23135                           prodh	equ	0xFF4
 23136                           prodl	equ	0xFF3
 23137                           intcon	equ	0xFF2
 23138                           intcon2	equ	0xFF1
 23139                           intcon3	equ	0xFF0
 23140                           indf0	equ	0xFEF
 23141                           postinc0	equ	0xFEE
 23142                           fsr0h	equ	0xFEA
 23143                           fsr0l	equ	0xFE9
 23144                           wreg	equ	0xFE8
 23145                           postdec1	equ	0xFE5
 23146                           fsr1h	equ	0xFE2
 23147                           fsr1l	equ	0xFE1
 23148                           indf2	equ	0xFDF
 23149                           postinc2	equ	0xFDE
 23150                           postdec2	equ	0xFDD
 23151                           fsr2h	equ	0xFDA
 23152                           fsr2l	equ	0xFD9
 23153                           status	equ	0xFD8
 23154                           
 23155 ;; *************** function i2_delay *****************
 23156 ;; Defined at:
 23157 ;;		line 15 in file "function.c"
 23158 ;; Parameters:    Size  Location     Type
 23159 ;;  x               2    0[COMRAM] int 
 23160 ;; Auto vars:     Size  Location     Type
 23161 ;;		None
 23162 ;; Return value:  Size  Location     Type
 23163 ;;                  1    wreg      void 
 23164 ;; Registers used:
 23165 ;;		wreg, status,2, status,0
 23166 ;; Tracked objects:
 23167 ;;		On entry : 0/0
 23168 ;;		On exit  : 0/0
 23169 ;;		Unchanged: 0/0
 23170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23171 ;;      Params:         2       0       0       0       0       0       0
 23172 ;;      Locals:         0       0       0       0       0       0       0
 23173 ;;      Temps:          1       0       0       0       0       0       0
 23174 ;;      Totals:         3       0       0       0       0       0       0
 23175 ;;Total ram usage:        3 bytes
 23176 ;; Hardware stack levels used:    1
 23177 ;; This function calls:
 23178 ;;		Nothing
 23179 ;; This function is called by:
 23180 ;;		i2_writeEEPROM_ext
 23181 ;; This function uses a non-reentrant model
 23182 ;;
 23183                           
 23184                           	psect	text92
 23185  006DA6                     __ptext92:
 23186                           	opt stack 0
 23187  006DA6                     i2_delay:
 23188                           	opt stack 0
 23189  006DA6  FFFF               	dw	65535	; assembler added errata NOP
 23190                           
 23191                           ;function.c: 16: while (x--) {
 23192                           
 23193                           ;incstack = 0
 23194  006DA8  D00B               	goto	i2l1067
 23195  006DAA  FFFF               	dw	65535	; assembler added errata NOP
 23196  006DAC                     i2l5617:
 23197                           
 23198                           ;function.c: 17: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 23199  006DAC  0E02               	movlw	2
 23200  006DAE  6E03               	movwf	??i2_delay& (0+255),c
 23201  006DB0  0EF2               	movlw	242
 23202  006DB2                     i2u929_47:
 23203  006DB2  FFFF               	dw	65535	; errata NOP
 23204  006DB4  2EE8               	decfsz	wreg,f,c
 23205  006DB6  D7FD               	bra	i2u929_47
 23206  006DB8  2E03               	decfsz	??i2_delay& (0+255),f,c
 23207  006DBA  D7FB               	bra	i2u929_47
 23208  006DBC  D000               	nop2	
 23209  006DBE  0004               	clrwdt		;# 
 23210  006DC0                     i2l1067:
 23211  006DC0  FFFF               	dw	65535	; assembler added errata NOP
 23212  006DC2  0601               	decf	i2delay@x,f,c
 23213  006DC4  A0D8               	btfss	status,0,c
 23214  006DC6  0602               	decf	i2delay@x+1,f,c
 23215  006DC8  2801               	incf	i2delay@x,w,c
 23216  006DCA  E1F0               	bnz	i2l5617
 23217  006DCC  2802               	incf	i2delay@x+1,w,c
 23218  006DCE  B4D8               	btfsc	status,2,c
 23219  006DD0  0012               	return		;funcret
 23220  006DD2  FFFF               	dw	65535	; assembler added errata NOP
 23221  006DD4  D7EA               	goto	i2l1068
 23222  006DD6  FFFF               	dw	65535	; errata NOP
 23223  006DD8                     __end_ofi2_delay:
 23224                           	opt stack 0
 23225                           tosu	equ	0xFFF
 23226                           tosh	equ	0xFFE
 23227                           tosl	equ	0xFFD
 23228                           pclatu	equ	0xFFB
 23229                           pclath	equ	0xFFA
 23230                           tblptru	equ	0xFF8
 23231                           tblptrh	equ	0xFF7
 23232                           tblptrl	equ	0xFF6
 23233                           tablat	equ	0xFF5
 23234                           prodh	equ	0xFF4
 23235                           prodl	equ	0xFF3
 23236                           intcon	equ	0xFF2
 23237                           intcon2	equ	0xFF1
 23238                           intcon3	equ	0xFF0
 23239                           indf0	equ	0xFEF
 23240                           postinc0	equ	0xFEE
 23241                           fsr0h	equ	0xFEA
 23242                           fsr0l	equ	0xFE9
 23243                           wreg	equ	0xFE8
 23244                           postdec1	equ	0xFE5
 23245                           fsr1h	equ	0xFE2
 23246                           fsr1l	equ	0xFE1
 23247                           indf2	equ	0xFDF
 23248                           postinc2	equ	0xFDE
 23249                           postdec2	equ	0xFDD
 23250                           fsr2h	equ	0xFDA
 23251                           fsr2l	equ	0xFD9
 23252                           status	equ	0xFD8
 23253                           
 23254 ;; *************** function i2_I2C_Write *****************
 23255 ;; Defined at:
 23256 ;;		line 42 in file "I2C.c"
 23257 ;; Parameters:    Size  Location     Type
 23258 ;;  d               2    1[COMRAM] unsigned int 
 23259 ;; Auto vars:     Size  Location     Type
 23260 ;;		None
 23261 ;; Return value:  Size  Location     Type
 23262 ;;                  1    wreg      void 
 23263 ;; Registers used:
 23264 ;;		wreg, status,2, status,0, cstack
 23265 ;; Tracked objects:
 23266 ;;		On entry : 0/0
 23267 ;;		On exit  : 0/0
 23268 ;;		Unchanged: 0/0
 23269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23270 ;;      Params:         2       0       0       0       0       0       0
 23271 ;;      Locals:         0       0       0       0       0       0       0
 23272 ;;      Temps:          0       0       0       0       0       0       0
 23273 ;;      Totals:         2       0       0       0       0       0       0
 23274 ;;Total ram usage:        2 bytes
 23275 ;; Hardware stack levels used:    1
 23276 ;; Hardware stack levels required when called:    1
 23277 ;; This function calls:
 23278 ;;		i2_I2C_Wait
 23279 ;; This function is called by:
 23280 ;;		i2_getDS1307TimeDate
 23281 ;;		i2_RTC_Init
 23282 ;;		i2_writeEEPROM_ext
 23283 ;; This function uses a non-reentrant model
 23284 ;;
 23285                           
 23286                           	psect	text93
 23287  006BB4                     __ptext93:
 23288                           	opt stack 0
 23289  006BB4                     i2_I2C_Write:
 23290                           	opt stack 0
 23291  006BB4  FFFF               	dw	65535	; assembler added errata NOP
 23292                           
 23293                           ;I2C.c: 43: I2C_Wait();
 23294                           
 23295                           ;incstack = 0
 23296  006BB6  EC0D  F036         	call	i2_I2C_Wait	;wreg free
 23297                           
 23298                           ;I2C.c: 44: SSPBUF = d;
 23299  006BBA  C002  FFC9         	movff	i2I2C_Write@d,4041	;volatile
 23300  006BBE  0012               	return		;funcret
 23301  006BC0  FFFF               	dw	65535	; errata NOP
 23302  006BC2                     __end_ofi2_I2C_Write:
 23303                           	opt stack 0
 23304                           tosu	equ	0xFFF
 23305                           tosh	equ	0xFFE
 23306                           tosl	equ	0xFFD
 23307                           pclatu	equ	0xFFB
 23308                           pclath	equ	0xFFA
 23309                           tblptru	equ	0xFF8
 23310                           tblptrh	equ	0xFF7
 23311                           tblptrl	equ	0xFF6
 23312                           tablat	equ	0xFF5
 23313                           prodh	equ	0xFF4
 23314                           prodl	equ	0xFF3
 23315                           intcon	equ	0xFF2
 23316                           intcon2	equ	0xFF1
 23317                           intcon3	equ	0xFF0
 23318                           indf0	equ	0xFEF
 23319                           postinc0	equ	0xFEE
 23320                           fsr0h	equ	0xFEA
 23321                           fsr0l	equ	0xFE9
 23322                           wreg	equ	0xFE8
 23323                           postdec1	equ	0xFE5
 23324                           fsr1h	equ	0xFE2
 23325                           fsr1l	equ	0xFE1
 23326                           indf2	equ	0xFDF
 23327                           postinc2	equ	0xFDE
 23328                           postdec2	equ	0xFDD
 23329                           fsr2h	equ	0xFDA
 23330                           fsr2l	equ	0xFD9
 23331                           status	equ	0xFD8
 23332                           
 23333 ;; *************** function i2_I2C_Stop *****************
 23334 ;; Defined at:
 23335 ;;		line 36 in file "I2C.c"
 23336 ;; Parameters:    Size  Location     Type
 23337 ;;		None
 23338 ;; Auto vars:     Size  Location     Type
 23339 ;;		None
 23340 ;; Return value:  Size  Location     Type
 23341 ;;                  1    wreg      void 
 23342 ;; Registers used:
 23343 ;;		wreg, status,2, status,0, cstack
 23344 ;; Tracked objects:
 23345 ;;		On entry : 0/0
 23346 ;;		On exit  : 0/0
 23347 ;;		Unchanged: 0/0
 23348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23349 ;;      Params:         0       0       0       0       0       0       0
 23350 ;;      Locals:         0       0       0       0       0       0       0
 23351 ;;      Temps:          0       0       0       0       0       0       0
 23352 ;;      Totals:         0       0       0       0       0       0       0
 23353 ;;Total ram usage:        0 bytes
 23354 ;; Hardware stack levels used:    1
 23355 ;; Hardware stack levels required when called:    1
 23356 ;; This function calls:
 23357 ;;		i2_I2C_Wait
 23358 ;; This function is called by:
 23359 ;;		i2_getDS1307TimeDate
 23360 ;;		i2_RTC_Init
 23361 ;;		i2_writeEEPROM_ext
 23362 ;; This function uses a non-reentrant model
 23363 ;;
 23364                           
 23365                           	psect	text94
 23366  006B78                     __ptext94:
 23367                           	opt stack 0
 23368  006B78                     i2_I2C_Stop:
 23369                           	opt stack 0
 23370  006B78  FFFF               	dw	65535	; assembler added errata NOP
 23371                           
 23372                           ;I2C.c: 37: I2C_Wait();
 23373                           
 23374                           ;incstack = 0
 23375  006B7A  EC0D  F036         	call	i2_I2C_Wait	;wreg free
 23376                           
 23377                           ;I2C.c: 38: PEN = 1;
 23378  006B7E  84C5               	bsf	4037,2,c	;volatile
 23379  006B80  0012               	return		;funcret
 23380  006B82  FFFF               	dw	65535	; errata NOP
 23381  006B84                     __end_ofi2_I2C_Stop:
 23382                           	opt stack 0
 23383                           tosu	equ	0xFFF
 23384                           tosh	equ	0xFFE
 23385                           tosl	equ	0xFFD
 23386                           pclatu	equ	0xFFB
 23387                           pclath	equ	0xFFA
 23388                           tblptru	equ	0xFF8
 23389                           tblptrh	equ	0xFF7
 23390                           tblptrl	equ	0xFF6
 23391                           tablat	equ	0xFF5
 23392                           prodh	equ	0xFF4
 23393                           prodl	equ	0xFF3
 23394                           intcon	equ	0xFF2
 23395                           intcon2	equ	0xFF1
 23396                           intcon3	equ	0xFF0
 23397                           indf0	equ	0xFEF
 23398                           postinc0	equ	0xFEE
 23399                           fsr0h	equ	0xFEA
 23400                           fsr0l	equ	0xFE9
 23401                           wreg	equ	0xFE8
 23402                           postdec1	equ	0xFE5
 23403                           fsr1h	equ	0xFE2
 23404                           fsr1l	equ	0xFE1
 23405                           indf2	equ	0xFDF
 23406                           postinc2	equ	0xFDE
 23407                           postdec2	equ	0xFDD
 23408                           fsr2h	equ	0xFDA
 23409                           fsr2l	equ	0xFD9
 23410                           status	equ	0xFD8
 23411                           
 23412 ;; *************** function i2_I2C_Start *****************
 23413 ;; Defined at:
 23414 ;;		line 26 in file "I2C.c"
 23415 ;; Parameters:    Size  Location     Type
 23416 ;;		None
 23417 ;; Auto vars:     Size  Location     Type
 23418 ;;		None
 23419 ;; Return value:  Size  Location     Type
 23420 ;;                  1    wreg      void 
 23421 ;; Registers used:
 23422 ;;		wreg, status,2, status,0, cstack
 23423 ;; Tracked objects:
 23424 ;;		On entry : 0/0
 23425 ;;		On exit  : 0/0
 23426 ;;		Unchanged: 0/0
 23427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23428 ;;      Params:         0       0       0       0       0       0       0
 23429 ;;      Locals:         0       0       0       0       0       0       0
 23430 ;;      Temps:          0       0       0       0       0       0       0
 23431 ;;      Totals:         0       0       0       0       0       0       0
 23432 ;;Total ram usage:        0 bytes
 23433 ;; Hardware stack levels used:    1
 23434 ;; Hardware stack levels required when called:    1
 23435 ;; This function calls:
 23436 ;;		i2_I2C_Wait
 23437 ;; This function is called by:
 23438 ;;		i2_getDS1307TimeDate
 23439 ;;		i2_RTC_Init
 23440 ;;		i2_writeEEPROM_ext
 23441 ;; This function uses a non-reentrant model
 23442 ;;
 23443                           
 23444                           	psect	text95
 23445  006B6C                     __ptext95:
 23446                           	opt stack 0
 23447  006B6C                     i2_I2C_Start:
 23448                           	opt stack 0
 23449  006B6C  FFFF               	dw	65535	; assembler added errata NOP
 23450                           
 23451                           ;I2C.c: 27: I2C_Wait();
 23452                           
 23453                           ;incstack = 0
 23454  006B6E  EC0D  F036         	call	i2_I2C_Wait	;wreg free
 23455                           
 23456                           ;I2C.c: 28: SEN = 1;
 23457  006B72  80C5               	bsf	4037,0,c	;volatile
 23458  006B74  0012               	return		;funcret
 23459  006B76  FFFF               	dw	65535	; errata NOP
 23460  006B78                     __end_ofi2_I2C_Start:
 23461                           	opt stack 0
 23462                           tosu	equ	0xFFF
 23463                           tosh	equ	0xFFE
 23464                           tosl	equ	0xFFD
 23465                           pclatu	equ	0xFFB
 23466                           pclath	equ	0xFFA
 23467                           tblptru	equ	0xFF8
 23468                           tblptrh	equ	0xFF7
 23469                           tblptrl	equ	0xFF6
 23470                           tablat	equ	0xFF5
 23471                           prodh	equ	0xFF4
 23472                           prodl	equ	0xFF3
 23473                           intcon	equ	0xFF2
 23474                           intcon2	equ	0xFF1
 23475                           intcon3	equ	0xFF0
 23476                           indf0	equ	0xFEF
 23477                           postinc0	equ	0xFEE
 23478                           fsr0h	equ	0xFEA
 23479                           fsr0l	equ	0xFE9
 23480                           wreg	equ	0xFE8
 23481                           postdec1	equ	0xFE5
 23482                           fsr1h	equ	0xFE2
 23483                           fsr1l	equ	0xFE1
 23484                           indf2	equ	0xFDF
 23485                           postinc2	equ	0xFDE
 23486                           postdec2	equ	0xFDD
 23487                           fsr2h	equ	0xFDA
 23488                           fsr2l	equ	0xFD9
 23489                           status	equ	0xFD8
 23490                           
 23491 ;; *************** function i2_I2C_Wait *****************
 23492 ;; Defined at:
 23493 ;;		line 22 in file "I2C.c"
 23494 ;; Parameters:    Size  Location     Type
 23495 ;;		None
 23496 ;; Auto vars:     Size  Location     Type
 23497 ;;		None
 23498 ;; Return value:  Size  Location     Type
 23499 ;;                  1    wreg      void 
 23500 ;; Registers used:
 23501 ;;		wreg, status,2, status,0
 23502 ;; Tracked objects:
 23503 ;;		On entry : 0/0
 23504 ;;		On exit  : 0/0
 23505 ;;		Unchanged: 0/0
 23506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23507 ;;      Params:         0       0       0       0       0       0       0
 23508 ;;      Locals:         0       0       0       0       0       0       0
 23509 ;;      Temps:          1       0       0       0       0       0       0
 23510 ;;      Totals:         1       0       0       0       0       0       0
 23511 ;;Total ram usage:        1 bytes
 23512 ;; Hardware stack levels used:    1
 23513 ;; This function calls:
 23514 ;;		Nothing
 23515 ;; This function is called by:
 23516 ;;		i2_I2C_Start
 23517 ;;		i2_I2C_Restart
 23518 ;;		i2_I2C_Stop
 23519 ;;		i2_I2C_Write
 23520 ;;		i2_I2C_Read
 23521 ;; This function uses a non-reentrant model
 23522 ;;
 23523                           
 23524                           	psect	text96
 23525  006C1A                     __ptext96:
 23526                           	opt stack 0
 23527  006C1A                     i2_I2C_Wait:
 23528                           	opt stack 0
 23529  006C1A  FFFF               	dw	65535	; assembler added errata NOP
 23530                           
 23531                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 23532                           
 23533                           ;incstack = 0
 23534  006C1C  B4C7               	btfsc	4039,2,c	;volatile
 23535  006C1E  D7FD               	goto	i2_I2C_Wait
 23536  006C20  CFC5 F001          	movff	4037,??i2_I2C_Wait	;volatile
 23537  006C24  0E1F               	movlw	31
 23538  006C26  1601               	andwf	??i2_I2C_Wait,f,c
 23539  006C28  B4D8               	btfsc	status,2,c
 23540  006C2A  0012               	return		;funcret
 23541  006C2C  FFFF               	dw	65535	; assembler added errata NOP
 23542  006C2E  D7F5               	goto	i2_I2C_Wait
 23543  006C30  FFFF               	dw	65535	; errata NOP
 23544  006C32                     __end_ofi2_I2C_Wait:
 23545                           	opt stack 0
 23546                           tosu	equ	0xFFF
 23547                           tosh	equ	0xFFE
 23548                           tosl	equ	0xFFD
 23549                           pclatu	equ	0xFFB
 23550                           pclath	equ	0xFFA
 23551                           tblptru	equ	0xFF8
 23552                           tblptrh	equ	0xFF7
 23553                           tblptrl	equ	0xFF6
 23554                           tablat	equ	0xFF5
 23555                           prodh	equ	0xFF4
 23556                           prodl	equ	0xFF3
 23557                           intcon	equ	0xFF2
 23558                           intcon2	equ	0xFF1
 23559                           intcon3	equ	0xFF0
 23560                           indf0	equ	0xFEF
 23561                           postinc0	equ	0xFEE
 23562                           fsr0h	equ	0xFEA
 23563                           fsr0l	equ	0xFE9
 23564                           wreg	equ	0xFE8
 23565                           postdec1	equ	0xFE5
 23566                           fsr1h	equ	0xFE2
 23567                           fsr1l	equ	0xFE1
 23568                           indf2	equ	0xFDF
 23569                           postinc2	equ	0xFDE
 23570                           postdec2	equ	0xFDD
 23571                           fsr2h	equ	0xFDA
 23572                           fsr2l	equ	0xFD9
 23573                           status	equ	0xFD8
 23574                           
 23575 ;; *************** function _readButtons *****************
 23576 ;; Defined at:
 23577 ;;		line 24 in file "teclado.h"
 23578 ;; Parameters:    Size  Location     Type
 23579 ;;		None
 23580 ;; Auto vars:     Size  Location     Type
 23581 ;;		None
 23582 ;; Return value:  Size  Location     Type
 23583 ;;                  1    wreg      void 
 23584 ;; Registers used:
 23585 ;;		wreg, status,2, status,0
 23586 ;; Tracked objects:
 23587 ;;		On entry : 0/0
 23588 ;;		On exit  : 0/0
 23589 ;;		Unchanged: 0/0
 23590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23591 ;;      Params:         0       0       0       0       0       0       0
 23592 ;;      Locals:         0       0       0       0       0       0       0
 23593 ;;      Temps:          0       0       0       0       0       0       0
 23594 ;;      Totals:         0       0       0       0       0       0       0
 23595 ;;Total ram usage:        0 bytes
 23596 ;; Hardware stack levels used:    1
 23597 ;; This function calls:
 23598 ;;		Nothing
 23599 ;; This function is called by:
 23600 ;;		_TIMER
 23601 ;; This function uses a non-reentrant model
 23602 ;;
 23603                           
 23604                           	psect	text97
 23605  003632                     __ptext97:
 23606                           	opt stack 0
 23607  003632                     _readButtons:
 23608                           	opt stack 0
 23609  003632  FFFF               	dw	65535	; assembler added errata NOP
 23610                           
 23611                           ;teclado.h: 25: if (!PORTBbits.RB2) {
 23612                           
 23613                           ;incstack = 0
 23614  003634  B481               	btfsc	3969,2,c	;volatile
 23615  003636  D009               	goto	i2l458
 23616                           
 23617                           ;teclado.h: 26: flag_b_esc = 1;
 23618  003638  0E01               	movlw	1
 23619  00363A  6E67               	movwf	_flag_b_esc,c
 23620                           
 23621                           ;teclado.h: 27: if (isPressed) {
 23622  00363C  5066               	movf	_isPressed,w,c
 23623  00363E  B4D8               	btfsc	status,2,c
 23624  003640  D00F               	goto	i2l461
 23625                           
 23626                           ;teclado.h: 28: _b_esc = 1;
 23627  003642  0E01               	movlw	1
 23628  003644  0101               	movlb	1	; () banked
 23629  003646  6F1C               	movwf	__b_esc& (0+255),b
 23630                           
 23631                           ; BSR set to: 1
 23632                           ;teclado.h: 29: }
 23633                           ;teclado.h: 30: } else if (PORTBbits.RB2 && flag_b_esc) {
 23634  003648  D00B               	goto	i2l461
 23635  00364A                     i2l458:
 23636  00364A  FFFF               	dw	65535	; assembler added errata NOP
 23637  00364C  A481               	btfss	3969,2,c	;volatile
 23638  00364E  D008               	goto	i2l461
 23639  003650  5067               	movf	_flag_b_esc,w,c
 23640  003652  B4D8               	btfsc	status,2,c
 23641  003654  D005               	goto	i2l461
 23642                           
 23643                           ;teclado.h: 31: _b_esc = 1;
 23644  003656  0E01               	movlw	1
 23645  003658  0101               	movlb	1	; () banked
 23646  00365A  6F1C               	movwf	__b_esc& (0+255),b
 23647                           
 23648                           ;teclado.h: 32: flag_b_esc = 0;
 23649  00365C  0E00               	movlw	0
 23650  00365E  6E67               	movwf	_flag_b_esc,c
 23651  003660                     i2l461:
 23652  003660  FFFF               	dw	65535	; assembler added errata NOP
 23653                           
 23654                           ;teclado.h: 33: }
 23655                           ;teclado.h: 35: if (!PORTBbits.RB4) {
 23656                           
 23657                           ; BSR set to: 1
 23658                           
 23659                           ; BSR set to: 1
 23660  003662  B881               	btfsc	3969,4,c	;volatile
 23661  003664  D009               	goto	i2l462
 23662                           
 23663                           ;teclado.h: 36: flag_b_menos = 1;
 23664  003666  0E01               	movlw	1
 23665  003668  0101               	movlb	1	; () banked
 23666  00366A  6F1B               	movwf	_flag_b_menos& (0+255),b
 23667                           
 23668                           ;teclado.h: 37: if (isPressed) {
 23669  00366C  5066               	movf	_isPressed,w,c
 23670  00366E  B4D8               	btfsc	status,2,c
 23671  003670  D00E               	goto	i2l465
 23672                           
 23673                           ; BSR set to: 1
 23674                           ;teclado.h: 38: _b_menos = 1;
 23675  003672  0E01               	movlw	1
 23676  003674  6F1A               	movwf	__b_menos& (0+255),b
 23677                           
 23678                           ; BSR set to: 1
 23679                           ;teclado.h: 39: }
 23680                           ;teclado.h: 40: } else if (PORTBbits.RB4 && flag_b_menos) {
 23681  003676  D00B               	goto	i2l465
 23682  003678                     i2l462:
 23683  003678  FFFF               	dw	65535	; assembler added errata NOP
 23684  00367A  A881               	btfss	3969,4,c	;volatile
 23685  00367C  D008               	goto	i2l465
 23686  00367E  0101               	movlb	1	; () banked
 23687  003680  511B               	movf	_flag_b_menos& (0+255),w,b
 23688  003682  B4D8               	btfsc	status,2,c
 23689  003684  D004               	goto	i2l465
 23690                           
 23691                           ; BSR set to: 1
 23692                           ;teclado.h: 41: _b_menos = 1;
 23693  003686  0E01               	movlw	1
 23694  003688  6F1A               	movwf	__b_menos& (0+255),b
 23695                           
 23696                           ;teclado.h: 42: flag_b_menos = 0;
 23697  00368A  0E00               	movlw	0
 23698  00368C  6F1B               	movwf	_flag_b_menos& (0+255),b
 23699  00368E                     i2l465:
 23700  00368E  FFFF               	dw	65535	; assembler added errata NOP
 23701                           
 23702                           ;teclado.h: 43: }
 23703                           ;teclado.h: 45: if (!PORTBbits.RB5) {
 23704                           
 23705                           ; BSR set to: 1
 23706                           
 23707                           ; BSR set to: 1
 23708  003690  BA81               	btfsc	3969,5,c	;volatile
 23709  003692  D009               	goto	i2l466
 23710                           
 23711                           ;teclado.h: 46: flag_b_mais = 1;
 23712  003694  0E01               	movlw	1
 23713  003696  0101               	movlb	1	; () banked
 23714  003698  6F19               	movwf	_flag_b_mais& (0+255),b
 23715                           
 23716                           ;teclado.h: 47: if (isPressed) {
 23717  00369A  5066               	movf	_isPressed,w,c
 23718  00369C  B4D8               	btfsc	status,2,c
 23719  00369E  D00E               	goto	i2l469
 23720                           
 23721                           ; BSR set to: 1
 23722                           ;teclado.h: 48: _b_mais = 1;
 23723  0036A0  0E01               	movlw	1
 23724  0036A2  6F18               	movwf	__b_mais& (0+255),b
 23725                           
 23726                           ; BSR set to: 1
 23727                           ;teclado.h: 49: }
 23728                           ;teclado.h: 50: } else if (PORTBbits.RB5 && flag_b_mais) {
 23729  0036A4  D00B               	goto	i2l469
 23730  0036A6                     i2l466:
 23731  0036A6  FFFF               	dw	65535	; assembler added errata NOP
 23732  0036A8  AA81               	btfss	3969,5,c	;volatile
 23733  0036AA  D008               	goto	i2l469
 23734  0036AC  0101               	movlb	1	; () banked
 23735  0036AE  5119               	movf	_flag_b_mais& (0+255),w,b
 23736  0036B0  B4D8               	btfsc	status,2,c
 23737  0036B2  D004               	goto	i2l469
 23738                           
 23739                           ; BSR set to: 1
 23740                           ;teclado.h: 51: _b_mais = 1;
 23741  0036B4  0E01               	movlw	1
 23742  0036B6  6F18               	movwf	__b_mais& (0+255),b
 23743                           
 23744                           ;teclado.h: 52: flag_b_mais = 0;
 23745  0036B8  0E00               	movlw	0
 23746  0036BA  6F19               	movwf	_flag_b_mais& (0+255),b
 23747  0036BC                     i2l469:
 23748  0036BC  FFFF               	dw	65535	; assembler added errata NOP
 23749                           
 23750                           ;teclado.h: 53: }
 23751                           ;teclado.h: 55: if (!PORTBbits.RB3) {
 23752                           
 23753                           ; BSR set to: 1
 23754                           
 23755                           ; BSR set to: 1
 23756  0036BE  B681               	btfsc	3969,3,c	;volatile
 23757  0036C0  D009               	goto	i2l470
 23758                           
 23759                           ;teclado.h: 56: flag_b_ok = 1;
 23760  0036C2  0E01               	movlw	1
 23761  0036C4  0101               	movlb	1	; () banked
 23762  0036C6  6F17               	movwf	_flag_b_ok& (0+255),b
 23763                           
 23764                           ;teclado.h: 57: if (isPressed) {
 23765  0036C8  5066               	movf	_isPressed,w,c
 23766  0036CA  B4D8               	btfsc	status,2,c
 23767  0036CC  D00E               	goto	i2l473
 23768                           
 23769                           ; BSR set to: 1
 23770                           ;teclado.h: 58: _b_ok = 1;
 23771  0036CE  0E01               	movlw	1
 23772  0036D0  6F16               	movwf	__b_ok& (0+255),b
 23773                           
 23774                           ; BSR set to: 1
 23775                           ;teclado.h: 59: }
 23776                           ;teclado.h: 60: } else if (PORTBbits.RB3 && flag_b_ok) {
 23777  0036D2  D00B               	goto	i2l473
 23778  0036D4                     i2l470:
 23779  0036D4  FFFF               	dw	65535	; assembler added errata NOP
 23780  0036D6  A681               	btfss	3969,3,c	;volatile
 23781  0036D8  D008               	goto	i2l473
 23782  0036DA  0101               	movlb	1	; () banked
 23783  0036DC  5117               	movf	_flag_b_ok& (0+255),w,b
 23784  0036DE  B4D8               	btfsc	status,2,c
 23785  0036E0  D004               	goto	i2l473
 23786                           
 23787                           ; BSR set to: 1
 23788                           ;teclado.h: 61: _b_ok = 1;
 23789  0036E2  0E01               	movlw	1
 23790  0036E4  6F16               	movwf	__b_ok& (0+255),b
 23791                           
 23792                           ;teclado.h: 62: flag_b_ok = 0;
 23793  0036E6  0E00               	movlw	0
 23794  0036E8  6F17               	movwf	_flag_b_ok& (0+255),b
 23795  0036EA                     i2l473:
 23796  0036EA  FFFF               	dw	65535	; assembler added errata NOP
 23797                           
 23798                           ;teclado.h: 63: }
 23799                           ;teclado.h: 65: if (!PORTBbits.RB2 || !PORTBbits.RB3 || !PORTBbits.RB4 || !PORTBbits.RB5
      +                          ) {
 23800                           
 23801                           ; BSR set to: 1
 23802                           
 23803                           ; BSR set to: 1
 23804  0036EC  B481               	btfsc	3969,2,c	;volatile
 23805  0036EE  A681               	btfss	3969,3,c	;volatile
 23806  0036F0  D004               	goto	i2u686_40
 23807  0036F2  A881               	btfss	3969,4,c	;volatile
 23808  0036F4  D002               	goto	i2u686_40
 23809  0036F6  BA81               	btfsc	3969,5,c	;volatile
 23810  0036F8  D00B               	goto	i2l474
 23811  0036FA                     i2u686_40:
 23812  0036FA  FFFF               	dw	65535	; assembler added errata NOP
 23813                           
 23814                           ;teclado.h: 66: counterPressedTime++;
 23815  0036FC  0101               	movlb	1	; () banked
 23816  0036FE  2B15               	incf	_counterPressedTime& (0+255),f,b
 23817                           
 23818                           ; BSR set to: 1
 23819                           ;teclado.h: 67: if (counterPressedTime >= 8) {
 23820  003700  0E07               	movlw	7
 23821  003702  6515               	cpfsgt	_counterPressedTime& (0+255),b
 23822  003704  D00B               	goto	i2l478
 23823                           
 23824                           ; BSR set to: 1
 23825                           ;teclado.h: 68: counterPressedTime = 8;
 23826  003706  0E08               	movlw	8
 23827  003708  6F15               	movwf	_counterPressedTime& (0+255),b
 23828                           
 23829                           ;teclado.h: 69: isPressed = 1;
 23830  00370A  0E01               	movlw	1
 23831  00370C  6E66               	movwf	_isPressed,c
 23832                           
 23833                           ; BSR set to: 1
 23834                           ;teclado.h: 70: }
 23835                           ;teclado.h: 71: } else {
 23836  00370E  D006               	goto	i2l478
 23837  003710                     i2l474:
 23838  003710  FFFF               	dw	65535	; assembler added errata NOP
 23839                           
 23840                           ;teclado.h: 72: isPressed = 0;
 23841                           
 23842                           ; BSR set to: 1
 23843  003712  0E00               	movlw	0
 23844  003714  6E66               	movwf	_isPressed,c
 23845                           
 23846                           ;teclado.h: 73: counterPressedTime = 0;
 23847  003716  0E00               	movlw	0
 23848  003718  0101               	movlb	1	; () banked
 23849  00371A  6F15               	movwf	_counterPressedTime& (0+255),b
 23850  00371C                     i2l478:
 23851  00371C  FFFF               	dw	65535	; assembler added errata NOP
 23852                           
 23853                           ; BSR set to: 1
 23854                           
 23855                           ; BSR set to: 1
 23856  00371E  0012               	return		;funcret
 23857  003720  FFFF               	dw	65535	; errata NOP
 23858  003722                     __end_of_readButtons:
 23859                           	opt stack 0
 23860                           tosu	equ	0xFFF
 23861                           tosh	equ	0xFFE
 23862                           tosl	equ	0xFFD
 23863                           pclatu	equ	0xFFB
 23864                           pclath	equ	0xFFA
 23865                           tblptru	equ	0xFF8
 23866                           tblptrh	equ	0xFF7
 23867                           tblptrl	equ	0xFF6
 23868                           tablat	equ	0xFF5
 23869                           prodh	equ	0xFF4
 23870                           prodl	equ	0xFF3
 23871                           intcon	equ	0xFF2
 23872                           intcon2	equ	0xFF1
 23873                           intcon3	equ	0xFF0
 23874                           indf0	equ	0xFEF
 23875                           postinc0	equ	0xFEE
 23876                           fsr0h	equ	0xFEA
 23877                           fsr0l	equ	0xFE9
 23878                           wreg	equ	0xFE8
 23879                           postdec1	equ	0xFE5
 23880                           fsr1h	equ	0xFE2
 23881                           fsr1l	equ	0xFE1
 23882                           indf2	equ	0xFDF
 23883                           postinc2	equ	0xFDE
 23884                           postdec2	equ	0xFDD
 23885                           fsr2h	equ	0xFDA
 23886                           fsr2l	equ	0xFD9
 23887                           status	equ	0xFD8
 23888                           tosu	equ	0xFFF
 23889                           tosh	equ	0xFFE
 23890                           tosl	equ	0xFFD
 23891                           pclatu	equ	0xFFB
 23892                           pclath	equ	0xFFA
 23893                           tblptru	equ	0xFF8
 23894                           tblptrh	equ	0xFF7
 23895                           tblptrl	equ	0xFF6
 23896                           tablat	equ	0xFF5
 23897                           prodh	equ	0xFF4
 23898                           prodl	equ	0xFF3
 23899                           intcon	equ	0xFF2
 23900                           intcon2	equ	0xFF1
 23901                           intcon3	equ	0xFF0
 23902                           indf0	equ	0xFEF
 23903                           postinc0	equ	0xFEE
 23904                           fsr0h	equ	0xFEA
 23905                           fsr0l	equ	0xFE9
 23906                           wreg	equ	0xFE8
 23907                           postdec1	equ	0xFE5
 23908                           fsr1h	equ	0xFE2
 23909                           fsr1l	equ	0xFE1
 23910                           indf2	equ	0xFDF
 23911                           postinc2	equ	0xFDE
 23912                           postdec2	equ	0xFDD
 23913                           fsr2h	equ	0xFDA
 23914                           fsr2l	equ	0xFD9
 23915                           status	equ	0xFD8
 23916                           
 23917                           	psect	text98
 23918  000000                     __ptext98:
 23919                           	opt stack 0
 23920                           tosu	equ	0xFFF
 23921                           tosh	equ	0xFFE
 23922                           tosl	equ	0xFFD
 23923                           pclatu	equ	0xFFB
 23924                           pclath	equ	0xFFA
 23925                           tblptru	equ	0xFF8
 23926                           tblptrh	equ	0xFF7
 23927                           tblptrl	equ	0xFF6
 23928                           tablat	equ	0xFF5
 23929                           prodh	equ	0xFF4
 23930                           prodl	equ	0xFF3
 23931                           intcon	equ	0xFF2
 23932                           intcon2	equ	0xFF1
 23933                           intcon3	equ	0xFF0
 23934                           indf0	equ	0xFEF
 23935                           postinc0	equ	0xFEE
 23936                           fsr0h	equ	0xFEA
 23937                           fsr0l	equ	0xFE9
 23938                           wreg	equ	0xFE8
 23939                           postdec1	equ	0xFE5
 23940                           fsr1h	equ	0xFE2
 23941                           fsr1l	equ	0xFE1
 23942                           indf2	equ	0xFDF
 23943                           postinc2	equ	0xFDE
 23944                           postdec2	equ	0xFDD
 23945                           fsr2h	equ	0xFDA
 23946                           fsr2l	equ	0xFD9
 23947                           status	equ	0xFD8
 23948                           
 23949                           	psect	rparam
 23950  0000                     tosu	equ	0xFFF
 23951                           tosh	equ	0xFFE
 23952                           tosl	equ	0xFFD
 23953                           pclatu	equ	0xFFB
 23954                           pclath	equ	0xFFA
 23955                           tblptru	equ	0xFF8
 23956                           tblptrh	equ	0xFF7
 23957                           tblptrl	equ	0xFF6
 23958                           tablat	equ	0xFF5
 23959                           prodh	equ	0xFF4
 23960                           prodl	equ	0xFF3
 23961                           intcon	equ	0xFF2
 23962                           intcon2	equ	0xFF1
 23963                           intcon3	equ	0xFF0
 23964                           indf0	equ	0xFEF
 23965                           postinc0	equ	0xFEE
 23966                           fsr0h	equ	0xFEA
 23967                           fsr0l	equ	0xFE9
 23968                           wreg	equ	0xFE8
 23969                           postdec1	equ	0xFE5
 23970                           fsr1h	equ	0xFE2
 23971                           fsr1l	equ	0xFE1
 23972                           indf2	equ	0xFDF
 23973                           postinc2	equ	0xFDE
 23974                           postdec2	equ	0xFDD
 23975                           fsr2h	equ	0xFDA
 23976                           fsr2l	equ	0xFD9
 23977                           status	equ	0xFD8
 23978                           
 23979                           	psect	temp
 23980  00007F                     btemp:
 23981                           	opt stack 0
 23982  00007F                     	ds	1
 23983  0000                     int$flags	set	btemp
 23984  0000                     wtemp6	set	btemp+1
 23985                           tosu	equ	0xFFF
 23986                           tosh	equ	0xFFE
 23987                           tosl	equ	0xFFD
 23988                           pclatu	equ	0xFFB
 23989                           pclath	equ	0xFFA
 23990                           tblptru	equ	0xFF8
 23991                           tblptrh	equ	0xFF7
 23992                           tblptrl	equ	0xFF6
 23993                           tablat	equ	0xFF5
 23994                           prodh	equ	0xFF4
 23995                           prodl	equ	0xFF3
 23996                           intcon	equ	0xFF2
 23997                           intcon2	equ	0xFF1
 23998                           intcon3	equ	0xFF0
 23999                           indf0	equ	0xFEF
 24000                           postinc0	equ	0xFEE
 24001                           fsr0h	equ	0xFEA
 24002                           fsr0l	equ	0xFE9
 24003                           wreg	equ	0xFE8
 24004                           postdec1	equ	0xFE5
 24005                           fsr1h	equ	0xFE2
 24006                           fsr1l	equ	0xFE1
 24007                           indf2	equ	0xFDF
 24008                           postinc2	equ	0xFDE
 24009                           postdec2	equ	0xFDD
 24010                           fsr2h	equ	0xFDA
 24011                           fsr2l	equ	0xFD9
 24012                           status	equ	0xFD8


Data Sizes:
    Strings     1363
    Constant    58
    Data        16
    BSS         279
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     97     126
    BANK0           128     88     128
    BANK1           256      0     226
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ajusteSP_Bombas$2567	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    telaPrincipal$2566	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    acaoTesteBombas$2565	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> intToFloatStr@conv(BANK0[4]), STR_126(CODE[15]), STR_125(CODE[12]), STR_124(CODE[10]), 
		 -> STR_123(CODE[18]), STR_122(CODE[10]), STR_121(CODE[18]), STR_120(CODE[16]), 
		 -> STR_119(CODE[10]), STR_117(CODE[3]), STR_116(CODE[14]), STR_115(CODE[20]), 
		 -> STR_114(CODE[8]), STR_113(CODE[10]), STR_112(CODE[11]), STR_111(CODE[9]), 
		 -> STR_110(CODE[3]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[11]), 
		 -> STR_106(CODE[11]), STR_105(CODE[18]), STR_104(CODE[5]), STR_103(CODE[12]), 
		 -> STR_102(CODE[5]), STR_101(CODE[14]), STR_100(CODE[19]), STR_97(CODE[3]), 
		 -> STR_96(CODE[7]), STR_95(CODE[7]), STR_93(CODE[12]), STR_92(CODE[26]), 
		 -> STR_91(CODE[20]), STR_90(CODE[8]), STR_87(CODE[14]), STR_84(CODE[14]), 
		 -> STR_83(CODE[11]), STR_80(CODE[10]), STR_79(CODE[31]), STR_76(CODE[11]), 
		 -> STR_75(CODE[20]), STR_74(CODE[20]), STR_73(CODE[21]), STR_72(CODE[15]), 
		 -> STR_71(CODE[6]), STR_70(CODE[15]), STR_69(CODE[6]), STR_68(CODE[20]), 
		 -> STR_67(CODE[15]), STR_66(CODE[19]), STR_65(CODE[20]), STR_64(CODE[21]), 
		 -> STR_63(CODE[21]), STR_62(CODE[18]), STR_61(CODE[20]), STR_60(CODE[12]), 
		 -> STR_59(CODE[17]), STR_58(CODE[21]), STR_57(CODE[16]), STR_54(CODE[15]), 
		 -> STR_51(CODE[15]), STR_48(CODE[11]), STR_47(CODE[17]), STR_44(CODE[9]), 
		 -> STR_43(CODE[19]), STR_42(CODE[19]), STR_41(CODE[16]), STR_40(CODE[15]), 
		 -> STR_39(CODE[15]), STR_38(CODE[20]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 126
		 -> STR_37(CODE[7]), STR_35(CODE[11]), STR_26(CODE[104]), STR_25(CODE[63]), 
		 -> STR_23(CODE[18]), STR_21(CODE[7]), STR_20(CODE[12]), STR_18(CODE[5]), 
		 -> STR_14(CODE[126]), STR_12(CODE[18]), STR_10(CODE[12]), STR_8(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    memset@p	PTR unsigned char  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), STR_127(CODE[7]), _doprnt@c(BANK0[1]), 
		 -> intToFloatStr@end(BANK0[4]), STR_118(CODE[12]), STR_99(CODE[17]), STR_98(CODE[13]), 
		 -> STR_94(CODE[12]), STR_89(CODE[5]), STR_88(CODE[3]), STR_86(CODE[5]), 
		 -> STR_85(CODE[3]), STR_82(CODE[5]), STR_81(CODE[3]), STR_78(CODE[4]), 
		 -> STR_77(CODE[4]), STR_56(CODE[5]), STR_55(CODE[3]), STR_53(CODE[5]), 
		 -> STR_52(CODE[3]), line3(BANK1[21]), STR_50(CODE[5]), STR_49(CODE[3]), 
		 -> STR_46(CODE[13]), STR_45(CODE[10]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), STR_32(CODE[6]), STR_31(CODE[3]), STR_30(CODE[6]), 
		 -> STR_29(CODE[3]), STR_28(CODE[6]), STR_27(CODE[3]), STR_15(CODE[12]), 
		 -> tel2(BANK1[12]), tel1(BANK1[12]), bufferAUX(BANK1[20]), NULL(NULL[0]), 
		 -> bufferSerial(BANK1[60]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 126
		 -> intToFloatStr@conv(BANK0[4]), STR_126(CODE[15]), STR_125(CODE[12]), STR_124(CODE[10]), 
		 -> STR_123(CODE[18]), STR_122(CODE[10]), STR_121(CODE[18]), STR_120(CODE[16]), 
		 -> STR_119(CODE[10]), STR_117(CODE[3]), STR_116(CODE[14]), STR_115(CODE[20]), 
		 -> STR_114(CODE[8]), STR_113(CODE[10]), STR_112(CODE[11]), STR_111(CODE[9]), 
		 -> STR_110(CODE[3]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[11]), 
		 -> STR_106(CODE[11]), STR_105(CODE[18]), STR_104(CODE[5]), STR_103(CODE[12]), 
		 -> STR_102(CODE[5]), STR_101(CODE[14]), STR_100(CODE[19]), STR_97(CODE[3]), 
		 -> STR_96(CODE[7]), STR_95(CODE[7]), STR_93(CODE[12]), STR_92(CODE[26]), 
		 -> STR_91(CODE[20]), STR_90(CODE[8]), STR_87(CODE[14]), STR_84(CODE[14]), 
		 -> STR_83(CODE[11]), STR_80(CODE[10]), STR_79(CODE[31]), STR_76(CODE[11]), 
		 -> STR_75(CODE[20]), STR_74(CODE[20]), STR_73(CODE[21]), STR_72(CODE[15]), 
		 -> STR_71(CODE[6]), STR_70(CODE[15]), STR_69(CODE[6]), STR_68(CODE[20]), 
		 -> STR_67(CODE[15]), STR_66(CODE[19]), STR_65(CODE[20]), STR_64(CODE[21]), 
		 -> STR_63(CODE[21]), STR_62(CODE[18]), STR_61(CODE[20]), STR_60(CODE[12]), 
		 -> STR_59(CODE[17]), STR_58(CODE[21]), STR_57(CODE[16]), STR_54(CODE[15]), 
		 -> STR_51(CODE[15]), STR_48(CODE[11]), STR_47(CODE[17]), STR_44(CODE[9]), 
		 -> STR_43(CODE[19]), STR_42(CODE[19]), STR_41(CODE[16]), STR_40(CODE[15]), 
		 -> STR_39(CODE[15]), STR_38(CODE[20]), STR_37(CODE[7]), STR_35(CODE[11]), 
		 -> STR_26(CODE[104]), STR_25(CODE[63]), STR_23(CODE[18]), STR_21(CODE[7]), 
		 -> STR_20(CODE[12]), STR_18(CODE[5]), STR_14(CODE[126]), STR_12(CODE[18]), 
		 -> STR_10(CODE[12]), STR_8(CODE[5]), STR_4(CODE[5]), STR_3(CODE[9]), 
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 

    S1796__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1796__prbuf$ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    configuraTelefones$1641	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_99(CODE[17]), STR_98(CODE[13]), 

    dataLoger$1626	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_89(CODE[5]), STR_88(CODE[3]), 

    dataLoger$1621	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_86(CODE[5]), STR_85(CODE[3]), 

    dataLoger$1615	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_82(CODE[5]), STR_81(CODE[3]), 

    tela_testeBombas$1596	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_78(CODE[4]), STR_77(CODE[4]), 

    blink@line	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    atualizarLCD@line4	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), 

    atualizarLCD@line3	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), 

    atualizarLCD@line2	PTR unsigned char  size(2) Largest target is 21
		 -> line2(BANK1[21]), 

    atualizarLCD@line1	PTR unsigned char  size(2) Largest target is 21
		 -> line1(BANK1[21]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    acaoTesteBombas$1510	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_56(CODE[5]), STR_55(CODE[3]), 

    acaoTesteBombas$1505	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_53(CODE[5]), STR_52(CODE[3]), 

    acaoTesteBombas$1500	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_50(CODE[5]), STR_49(CODE[3]), 

    acaoTesteBombas$1493	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_46(CODE[13]), STR_45(CODE[10]), 

    sp__intToFloatStr	PTR unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    enviaSMS$1403	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    enviaSMS$1398	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_28(CODE[6]), STR_27(CODE[3]), 

    enviaSMS$1397	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_30(CODE[6]), STR_29(CODE[3]), 

    enviaSMS$1396	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_32(CODE[6]), STR_31(CODE[3]), 

    enviaSMS$1383	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    comunicarTeste$1368	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    getDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    setDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    sp__getSerial	PTR unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    getSerial@ret	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    getSerial@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_7(CODE[7]), 

    sp__memset	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    aguardaBuffer@str	PTR unsigned char  size(2) Largest target is 12
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), 

    writeChar@hex	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TIMER in COMRAM

    i2_reiniciaLCD->i2_criarCaracteresCGRAM
    i2_criarCaracteresCGRAM->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Init->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port
    i2_getDS1307TimeDate->i2_I2C_Read
    i2_I2C_Restart->i2_I2C_Wait
    i2_I2C_Read->i2_I2C_Wait
    i2_RTC_Init->i2_I2C_Write
    _writeEEPROM16_ext->i2_writeEEPROM_ext
    i2_writeEEPROM_ext->i2_I2C_Write
    i2_writeEEPROM_ext->i2_delay
    i2_I2C_Write->i2_I2C_Wait
    i2_I2C_Stop->i2_I2C_Wait
    i2_I2C_Start->i2_I2C_Wait

Critical Paths under _main in BANK0

    _main->_acaoTesteBombas
    _verificarIntervaloTesteBombas->_writeEEPROM_ext
    _tela_testeBombas->_sprintf
    _tela_ajusteRTC->_sprintf
    _setDS1307TimeDate->_I2C_Write
    _DECtoBCD->___awdiv
    _telaPrincipal->_intToFloatStr
    _reiniciaLCD->_criarCaracteresCGRAM
    _criarCaracteresCGRAM->_Lcd_Write_Char
    _Lcd_Init->_Lcd_Cmd
    _lerTransdutor->_map
    _map->___aldiv
    _lerParametros->_readEEPROM16_ext
    _readEEPROM16_ext->_readEEPROM_ext
    _informacoes->_sprintf
    _getSinalSIM800L->_atoi
    _getSerial->_sprintf
    _atoi->_getSerial
    _getDS1307TimeDate->_I2C_Write
    _dataLoger->_sprintf
    _configurarEstacionaria->_sprintf
    _configuraTelefones->_comunicarTeste
    _comunicarTeste->_printf
    _atualizarLCD->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _ajusteSP_Bombas->_intToFloatStr
    _acaoTesteBombas->_enviaSMS
    _acaoTesteBombas->_intToFloatStr
    _salvarLOG->_readEEPROM_ext
    _salvarLOG->_writeEEPROM_ext
    _writeEEPROM_ext->_I2C_Write
    _readEEPROM_ext->_I2C_Write
    _I2C_Restart->_I2C_Wait
    _I2C_Read->_I2C_Wait
    _intToFloatStr->_sprintf
    _drenarPressao->_sprintf
    _sprintf->__doprnt
    _acaoBombas->_enviaSMS
    _enviaSMS->_printf
    _printf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _limparBuffer->_memset
    _aguardaBuffer->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _RTC_Init->_I2C_Write
    _I2C_Write->_DECtoBCD
    _I2C_Stop->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _I2C_Master_Init->___lldiv

Critical Paths under _TIMER in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TIMER in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TIMER in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TIMER in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TIMER in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TIMER in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  380320
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                           _RTC_Init
                         _acaoBombas
                    _acaoTesteBombas
                    _ajusteSP_Bombas
                       _atualizarLCD
                            _btPress
             _configuraRegistradores
                 _configuraTelefones
             _configurarEstacionaria
               _criarCaracteresCGRAM
                          _dataLoger
                              _delay
                  _getDS1307TimeDate
                    _getSinalSIM800L
                        _informacoes
                      _lerParametros
                      _lerTransdutor
           _monitorarAlteracaoEstado
           _partidaBombaEstacionaria
                            _sprintf
                      _telaPrincipal
                     _tela_ajusteRTC
                   _tela_testeBombas
      _verificarIntervaloTesteBombas
 ---------------------------------------------------------------------------------
 (1) _verificarIntervaloTesteBombas                        0     0      0    5406
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_testeBombas                                     4     4      0   25147
                                             59 BANK0      4     4      0
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_ajusteRTC                                       0     0      0   24379
                              _blink
                            _btPress
                  _setDS1307TimeDate
                            _sprintf
                          _validaRTC
 ---------------------------------------------------------------------------------
 (2) _validaRTC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setDS1307TimeDate                                    3     1      2    4662
                                             12 BANK0      3     1      2
                           _DECtoBCD
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DECtoBCD                                             2     2      0    2206
                                              8 BANK0      2     2      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _telaPrincipal                                        2     2      0   37400
                                             72 BANK0      2     2      0
                              _blink
                            _btPress
                      _intToFloatStr
                    _resetParametros
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _resetParametros                                      0     0      0     720
                        _reiniciaLCD
 ---------------------------------------------------------------------------------
 (3) _reiniciaLCD                                          0     0      0     720
                           _Lcd_Init
               _criarCaracteresCGRAM
 ---------------------------------------------------------------------------------
 (4) _criarCaracteresCGRAM                                56    56      0     522
                                              4 BANK0     56    56      0
                            _Lcd_Cmd
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _partidaBombaEstacionaria                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _monitorarAlteracaoEstado                             4     4      0      51
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _lerTransdutor                                        9     9      0    3200
                                             42 BANK0      9     9      0
                            ___awdiv
                                _map
 ---------------------------------------------------------------------------------
 (2) _map                                                 28    18     10    1626
                                             14 BANK0     28    18     10
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     370
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     452
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _lerParametros                                        2     2      0   12052
                                             20 BANK0      2     2      0
                   _readEEPROM16_ext
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _readEEPROM16_ext                                     6     4      2    3221
                                             14 BANK0      6     4      2
                     _readEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _informacoes                                          6     6      0   14588
                                             59 BANK0      6     6      0
                            _btPress
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _getSinalSIM800L                                      4     4      0   28795
                                             76 BANK0      4     4      0
                      _aguardaBuffer
                               _atoi
                              _delay
                          _getSerial
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _getSerial                                           10     7      3   17236
                                             59 BANK0     10     7      3
                             _memset
                            _sprintf
                             _strlen
                             _strstr
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     835
                                             69 BANK0      7     5      2
                             ___wmul
                          _getSerial (ARG)
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _getDS1307TimeDate                                    2     0      2    3431
                                             12 BANK0      2     0      2
                           _BCDtoDEC
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _BCDtoDEC                                             1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _dataLoger                                           12    12      0   19199
                                             59 BANK0     12    12      0
                            ___awdiv
                            _btPress
                     _readEEPROM_ext
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _configurarEstacionaria                               0     0      0   25123
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _configuraTelefones                                   5     5      0   35875
                                             63 BANK0      5     5      0
                              _blink
                            _btPress
                     _comunicarTeste
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _comunicarTeste                                       4     4      0   10593
                                             59 BANK0      4     4      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (1) _configuraRegistradores                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _atualizarLCD                                        18    10      8    2651
                                              8 BANK0     18    10      8
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     3     1      2     573
                                              4 BANK0      3     1      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (5) _Lcd_Write_Char                                       3     3      0     178
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     888
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _ajusteSP_Bombas                                      2     2      0   42155
                                             72 BANK0      2     2      0
                              _blink
                            _btPress
                      _intToFloatStr
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _blink                                                5     1      4    5129
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _acaoTesteBombas                                     16    16      0   71177
                                             72 BANK0     16    16      0
                            _btPress
                      _drenarPressao
                           _enviaSMS
                      _intToFloatStr
                          _salvarLOG
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _salvarLOG                                            3     3      0    8802
                                             14 BANK0      3     3      0
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM_ext                                      2     1      1    5406
                                             12 BANK0      2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _readEEPROM_ext                                       2     2      0    3152
                                             12 BANK0      2     2      0
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Restart                                          0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             4     2      2     881
                                              1 BANK0      4     2      2
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _intToFloatStr                                       13    11      2   16940
                                             59 BANK0     13    11      2
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     752
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1364
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _drenarPressao                                        0     0      0   14566
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             26     6     20   14566
                                             33 BANK0     26     6     20
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) _btPress                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _acaoBombas                                           3     3      0   10755
                                             72 BANK0      3     3      0
                           _enviaSMS
 ---------------------------------------------------------------------------------
 (2) _enviaSMS                                            13    13      0   10755
                                             59 BANK0     13    13      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeChar                                            2     0      2     402
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              26     6     20    4630
                                             33 BANK0     26     6     20
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             25    19      6    3428
                                             12 BANK0     21    15      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _limparBuffer                                         0     0      0    1410
                              _delay
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     552
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _aguardaBuffer                                        2     0      2    3269
                                             19 BANK0      2     0      2
                              _delay
                             _strstr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    1401
                                             15 BANK0      4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     362
                                              6 BANK0      9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               5     1      4     240
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _delay                                                3     1      2     858
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0    2226
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            2     0      2    2226
                                             10 BANK0      2     0      2
                           _DECtoBCD (ARG)
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Wait                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (5) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (6) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TIMER                                               37    37      0    2981
                                             60 COMRAM    37    37      0
                        _readButtons
                              _timer
 ---------------------------------------------------------------------------------
 (8) _timer                                                0     0      0    2698
                  _writeEEPROM16_ext
                         i2_RTC_Init
                i2_getDS1307TimeDate
                      i2_reiniciaLCD
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (9) i2_reiniciaLCD                                        0     0      0     718
                         i2_Lcd_Init
             i2_criarCaracteresCGRAM
 ---------------------------------------------------------------------------------
 (10) i2_criarCaracteresCGRAM                             56    56      0     520
                                              4 COMRAM    56    56      0
                          i2_Lcd_Cmd
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (11) i2_Lcd_Write_Char                                    3     3      0     178
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Init                                          1     1      0     198
                                              3 COMRAM     1     1      0
                          i2_Lcd_Cmd
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (11) i2_Lcd_Cmd                                           2     2      0     110
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (12) i2_Lcd_Port                                          1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_getDS1307TimeDate                                  2     0      2     707
                                              5 COMRAM     2     0      2
                         i2_BCDtoDEC
                         i2_I2C_Read
                      i2_I2C_Restart
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Restart                                       0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Read                                          4     2      2     227
                                              1 COMRAM     4     2      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_BCDtoDEC                                          1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_RTC_Init                                           0     0      0     256
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (9) _writeEEPROM16_ext                                    3     1      2     591
                                              5 COMRAM     3     1      2
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (9) i2_writeEEPROM_ext                                    2     1      1     426
                                              3 COMRAM     2     1      1
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
                            i2_delay
 ---------------------------------------------------------------------------------
 (10) i2_delay                                             3     1      2      48
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Write                                         2     0      2     256
                                              1 COMRAM     2     0      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Stop                                          0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Start                                         0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Wait                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _readButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _RTC_Init
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _acaoBombas
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
   _acaoTesteBombas
     _btPress
     _drenarPressao
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _salvarLOG
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
       _writeEEPROM_ext
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
         _delay
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _ajusteSP_Bombas
     _blink
     _btPress
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _atualizarLCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _btPress
   _configuraRegistradores
   _configuraTelefones
     _blink
     _btPress
     _comunicarTeste
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _configurarEstacionaria
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _criarCaracteresCGRAM
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _dataLoger
     ___awdiv
     _btPress
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _delay
   _getDS1307TimeDate
     _BCDtoDEC
     _I2C_Read
       _I2C_Wait
     _I2C_Restart
       _I2C_Wait
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _getSinalSIM800L
     _aguardaBuffer
       _delay
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _atoi
       ___wmul
       _getSerial (ARG)
         _memset
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
         _strlen
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _isdigit (ARG)
     _delay
     _getSerial
       _memset
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _strlen
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _limparBuffer
       _delay
       _memset
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeChar
   _informacoes
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _lerParametros
     _readEEPROM16_ext
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _lerTransdutor
     ___awdiv
     _map
       ___aldiv
       ___lmul
   _monitorarAlteracaoEstado
   _partidaBombaEstacionaria
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       ___wmul *
       _isdigit *
       _putch *
   _telaPrincipal
     _blink
     _btPress
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _resetParametros
       _reiniciaLCD
         _Lcd_Init
           _Lcd_Cmd
             _Lcd_Port
           _Lcd_Port
         _criarCaracteresCGRAM
           _Lcd_Cmd
             _Lcd_Port
           _Lcd_Write_Char
             _Lcd_Port
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _tela_ajusteRTC
     _blink
     _btPress
     _setDS1307TimeDate
       _DECtoBCD
         ___awdiv
         ___awmod
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _validaRTC
   _tela_testeBombas
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _verificarIntervaloTesteBombas
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay

 _TIMER (ROOT)
   _readButtons
   _timer
     _writeEEPROM16_ext
       i2_writeEEPROM_ext
         i2_I2C_Start
           i2_I2C_Wait
         i2_I2C_Stop
           i2_I2C_Wait
         i2_I2C_Write
           i2_I2C_Wait
         i2_delay
     i2_RTC_Init
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_getDS1307TimeDate
       i2_BCDtoDEC
       i2_I2C_Read
         i2_I2C_Wait
       i2_I2C_Restart
         i2_I2C_Wait
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_reiniciaLCD
       i2_Lcd_Init
         i2_Lcd_Cmd
           i2_Lcd_Port
         i2_Lcd_Port
       i2_criarCaracteresCGRAM
         i2_Lcd_Cmd
           i2_Lcd_Port
         i2_Lcd_Write_Char
           i2_Lcd_Port
     i2_writeEEPROM_ext
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
       i2_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E2       7       88.3%
BITBANK0            80      0       0       4        0.0%
BANK0               80     58      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     61      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E0      15        0.0%
DATA                 0      0     1E0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jul 18 09:57:46 2020

                                                 __size_of_readEEPROM_ext 0056  
                                                             __CFG_CP0$ON 000000  
                                                             __CFG_CP1$ON 000000  
                                                             __CFG_CP2$ON 000000  
                                                             __CFG_CP3$ON 000000  
                                                      __size_of_I2C_Start 000C  
                                                      __size_of_I2C_Write 000E  
                                                __end_of_readEEPROM16_ext 6F1C  
                                                             __CFG_CPD$ON 000000  
                                                            ___awdiv@sign 0085  
                                                             __CFG_BOR$ON 000000  
                                                     ___wmul@multiplicand 0082  
                                          __end_of_configurarEstacionaria 2D02  
                                        __end_of_partidaBombaEstacionaria 7656  
                                                             __CFG_OSC$HS 000000  
                                                             __CFG_WDT$ON 000000  
                                               __size_ofi2_Lcd_Write_Char 0050  
                                                                     l310 7314  
                                                                     l401 19B4  
                                                                     l305 72D8  
                                                                     l410 1A42  
                                                                     l314 2B22  
                                                                     l330 2B06  
                                                                     l322 2A38  
                                                                     l250 2E0C  
                                                                     l242 2D36  
                                                                     l306 72E4  
                                                                     l403 19CA  
                                                                     l331 2B16  
                                                                     l315 2990  
                                                                     l307 72F0  
                                                                     l412 1A50  
                                                                     l500 39F4  
                                                                     l316 2B46  
                                                                     l324 2A8C  
                                                                     l308 72FC  
                                                                     l341 2648  
                                                                     l325 2B08  
                                                                     l317 29B8  
                                                                     l245 2D4A  
                                                                     l309 7308  
                                                                     l406 19F6  
                                                                     l502 3A16  
                                                                     l326 2AB4  
                                                                     l510 760E  
                                                                     l503 3A4A  
                                                                     l335 277A  
                                                                     l351 2718  
                                                                     l319 2A08  
                                                                     l247 2DB6  
                                                                     l600 7218  
                                                                     l504 3A78  
                                                                     l352 274E  
                                                                     l344 2672  
                                                                     l336 25D8  
                                                                     l328 2ADC  
                                                                     l248 2DF8  
                                                                     l512 761A  
                                                                     l601 721C  
                                                                     l273 7038  
                                                                     l505 3A8A  
                                                                     l337 27B0  
                                                                     l353 273A  
                                                                     l281 33DC  
                                                                     l249 2DFC  
                                                                     l602 7226  
                                                                     l370 17EC  
                                                                     l362 1760  
                                                                     l354 2744  
                                                                     l338 25F8  
                                                                     l282 3358  
                                                                     l530 775E  
                                                                     l514 7628  
                                                                     l522 7132  
                                                                     l603 722A  
                                                                     l427 3C4E  
                                                                     l339 2628  
                                                                     l283 33A0  
                                                                     l531 776C  
                                                                     l515 762E  
                                                                     l604 7234  
                                                                     l364 1A5C  
                                                                     l380 1936  
                                                                     l540 0F28  
                                                                     l620 3BD0  
                                                                     l348 269E  
                                                                     l532 777A  
                                                                     l605 7238  
                                                                     l373 1816  
                                                                     l365 1768  
                                                                     l533 7788  
                                                                     l517 7650  
                                                                     l509 7642  
                                                                     l366 1A9C  
                                                                     l390 18E2  
                                                                     l382 18AE  
                                                                     l526 6DA0  
                                                                     l542 132A  
                                                                     l550 102A  
                                                                     l534 7796  
                                                                     l367 1788  
                                                                     l551 1032  
                                                                     l543 0F7E  
                                                                     l615 3BF6  
                                                                     l535 77A4  
                                                                     l711 2174  
                                                                     l703 2106  
                                                                     l368 17B8  
                                                                     l544 137E  
                                                                     l560 1166  
                                                                     l616 3B5E  
                                                                     l536 77C2  
                                                                     l704 211A  
                                                                     l377 1844  
                                                                     l553 1076  
                                                                     l545 0FA0  
                                                                     l617 3C14  
                                                                     l633 23DE  
                                                                     l713 2182  
                                                                     l721 2376  
                                                                     l394 1958  
                                                                     l378 194A  
                                                                     l386 18C8  
                                                                     l482 7826  
                                                                     l490 77F0  
                                                                     l554 10B4  
                                                                     l618 3B84  
                                                                     l802 1DEA  
                                                                     l706 2132  
                                                                     l722 223C  
                                                                     l379 1894  
                                                                     l483 77D0  
                                                                     l547 0FDA  
                                                                     l619 3BAA  
                                                                     l635 2566  
                                                                     l811 1F4E  
                                                                     l651 3B3A  
                                                                     l643 3ADC  
                                                                     l731 22D8  
                                                                     l396 19AC  
                                                                     l556 10D0  
                                                                     l548 1018  
                                                                     l628 6FA6  
                                                                     l636 2578  
                                                                     l708 215A  
                                                                     l740 23B2  
                                                                     l397 199C  
                                                                     l493 7800  
                                                                     l581 1252  
                                                                     l557 10D8  
                                                                     l901 1CFC  
                                                                     l821 13D2  
                                                                     l805 1ED0  
                                                                     l645 3AE8  
                                                                     l709 2168  
                                                                     l717 234A  
                                                                     l725 2270  
                                                                     l494 7820  
                                                                     l574 11D8  
                                                                     l566 1182  
                                                                     l830 145A  
                                                                     l806 1EEA  
                                                                     l646 3AF8  
                                                                     l734 230C  
                                                                     l718 2208  
                                                                     l750 2882  
                                                                     l495 781A  
                                                                     l487 77E0  
                                                                     l591 1316  
                                                                     l575 11F2  
                                                                     l559 111C  
                                                                     l568 1192  
                                                                     l656 70AC  
                                                                     l840 154E  
                                                                     l808 1F0A  
                                                                     l728 22A4  
                                                                     l752 2942  
                                                                     l760 290A  
                                                                     l497 7846  
                                                                     l585 128A  
                                                                     l577 121A  
                                                                     l657 7094  
                                                                     l841 1570  
                                                                     l833 14BE  
                                                                     l825 1414  
                                                                     l681 31A6  
                                                                     l649 3B0A  
                                                                     l737 2340  
                                                                     l753 2896  
                                                                     l745 2830  
                                                                     l850 1648  
                                                                     l842 1592  
                                                                     l690 1F94  
                                                                     l738 238E  
                                                                     l762 2920  
                                                                     l754 28BC  
                                                                     l851 166A  
                                                                     l827 1428  
                                                                     l691 205E  
                                                                     l763 2974  
                                                                     l755 28CE  
                                                                     l836 1722  
                                                                     l852 168C  
                                                                     l676 30F2  
                                                                     l692 1FAE  
                                                                     l748 2928  
                                                                     l589 12E4  
                                                                     l837 14D8  
                                                                     l829 14A2  
                                                                     l677 30D4  
                                                                     l693 1FC8  
                                                                     l765 2986  
                                                                     l749 285A  
                                                                     l598 720A  
                                                                     l846 173C  
                                                                     l838 1508  
                                                                     l694 1FE2  
                                                                     l758 28DA  
                                                                     l599 720E  
                                                                     l847 15D2  
                                                                     l863 2CA2  
                                                                     l871 2C5E  
                                                                     l679 3174  
                                                                     l695 1FFC  
                                                                     l759 28E2  
                                                                     l880 1C88  
                                                                     l856 16D6  
                                                                     l848 1602  
                                                                     l864 2BE8  
                                                                     l696 2016  
                                                                     l881 1B5E  
                                                                     l873 2C98  
                                                                     l865 2C10  
                                                                     l697 207C  
                                                                     l689 2034  
                                                                     l890 1BF0  
                                                                     l882 1B86  
                                                                     l858 171A  
                                                                     l874 2CD0  
                                                                     l794 1D4A  
                                                                     l698 20AC  
                                                                     l970 0D10  
                                                                     l891 1C16  
                                                                     l883 1B98  
                                                                     l867 2CBC  
                                                                     l699 20DA  
                                                                     l971 0BC4  
                                                                     l963 0B6A  
                                                                     l892 1C28  
                                                                     l876 2CFC  
                                                                     l868 2C24  
                                                                     l980 0CB4  
                                                                     l972 0C20  
                                                                     l964 0B7C  
                                                                     l885 1CA8  
                                                                     l869 2C4A  
                                                                     l981 0CBC  
                                                                     l973 0C7C  
                                                                     l965 0B9E  
                                                                     l894 1C38  
                                                                     l886 1BA8  
                                                                     l798 1DAE  
                                                                     l974 0C84  
                                                                     l895 1C5E  
                                                                     l887 1BCE  
                                                                     l991 0D64  
                                                                     l975 0C8C  
                                                                     l896 1C70  
                                                                     l888 1BE0  
                                                                     l968 0CC6  
                                                                     l976 0C94  
                                                                     l985 0E50  
                                                                     l993 0D84  
                                                                     l977 0C9C  
                                                                     l969 0BBC  
                                                                     l898 1C80  
                                                                     l986 0D24  
                                                                     l978 0CA4  
                                                                     l899 1CEA  
                                                                     l995 0DA4  
                                                                     l979 0CAC  
                                                                     l988 0E86  
                                                                     l997 0DC4  
                                                                     l989 0D44  
                                                                     l999 0DF0  
                                                            __CFG_CPB$OFF 000000  
                                                                     _PEN 007E2A  
                                                                     _SEN 007E28  
                                                                     _cbf 0068  
                                        __end_of_monitorarAlteracaoEstado 77C8  
                                                   __end_ofi2_reiniciaLCD 6CAC  
                                                                     _map 31CE  
                                                                     _rtc 0077  
                                                             ?i2_I2C_Read 0002  
                                                            __CFG_BORV$20 000000  
                                                            ___awmod@sign 0085  
                                                             ?i2_I2C_Wait 0001  
                                                             ?i2_I2C_Stop 0001  
                                                                     prod 000FF3  
                                                                     tosl 000FFD  
                                                                     wreg 000FE8  
                                                    __size_of_I2C_Restart 000C  
                                                             ?i2_BCDtoDEC 0001  
                                                __size_of_ajusteSP_Bombas 0260  
                                                            __CFG_LVP$OFF 000000  
                                                                    l1001 0E16  
                                                                    l1003 0E42  
                                                                    l1006 0EBA  
                                                                    l1103 0274  
                                                                    l1007 0ECA  
                                                                    l1104 02EE  
                                                                    l1121 068C  
                                                                    l1105 02C0  
                                                                    l1122 03FA  
                                                                    l1114 0368  
                                                                    l1131 04A6  
                                                                    l1123 0436  
                                                                    l1116 0634  
                                                                    l1140 05FA  
                                                                    l1132 04E8  
                                                                    l1124 044A  
                                                                    l1108 030A  
                                                                    l1141 0620  
                                                                    l1133 0514  
                                                                    l1125 0442  
                                                                    l1109 0300  
                                                                    l1142 06C8  
                                                                    l1230 3848  
                                                                    l1151 079E  
                                                                    l1152 07CA  
                                                                    l1136 052A  
                                                                    l1128 049A  
                                                                    l1232 387A  
                                                                    l1161 089C  
                                                                    l1137 0594  
                                                                    l1233 386C  
                                                                    l1170 0A16  
                                                                    l1162 08C8  
                                                                    l1146 071C  
                                                                    l1138 05E6  
                                                                    l1067 6E5C  
                                                                    l1155 0818  
                                                                    l1147 0742  
                                                                    l1083 3F82  
                                                                    l1091 32C2  
                                                                    l1068 6E44  
                                                                    l1156 0844  
                                                                    l1148 074C  
                                                                    l1340 3772  
                                                                    l1236 38B2  
                                                                    l1092 32EC  
                                                                    l1165 0928  
                                                                    l1149 0850  
                                                                    l1085 3F8C  
                                                                    l1237 38C2  
                                                                    l1229 382E  
                                                                    l1093 32E2  
                                                                    l1166 0954  
                                                                    l1238 38DA  
                                                                    l1343 37C8  
                                                                    l1168 095C  
                                                                    l1360 3DE2  
                                                                    l1344 3786  
                                                                    l1601 7570  
                                                                    l1169 09EA  
                                                                    l1337 372E  
                                                                    l1185 74DC  
                                                                    l1602 757C  
                                                                    l1370 78F6  
                                                                    l1346 37FE  
                                                                    l1338 3726  
                                                                    l1186 74F2  
                                                                    l1611 73A2  
                                                                    l1363 3E10  
                                                                    l1347 3808  
                                                                    l1612 73AE  
                                                                    l1364 3E1C  
                                                                    l1356 3DB8  
                                                                    l1372 7910  
                                                                    l1621 6F3C  
                                                                    l1365 3E2C  
                                                                    l1357 3DCA  
                                                                    l1373 7906  
                                                                    l1622 6F28  
                                                                    l1518 6D12  
                                                                    l1607 7386  
                                                                    l1359 3DEC  
                                                                    l1544 7A12  
                                                                    l1608 737C  
                                                                    l1376 792C  
                                                                    l1545 7A04  
                                                                    l1377 7938  
                                                                    l1369 78E8  
                                                                    l1810 3E3E  
                                                                    l1378 7948  
                                                                    l1811 3EA8  
                                                                    l1548 7A4A  
                                                                    l1804 7196  
                                                                    l1549 7A5A  
                                                                    l1809 3EB2  
                                                                    l5113 3E40  
                                                                    l1763 747C  
                                                                    l1764 7474  
                                                                    l1597 754C  
                                                                    l1598 7542  
                                                                    l5127 3ECE  
                                                                    l1775 3F42  
                                                                    l1776 3ED8  
                                                                    l1777 3F16  
                                                                    l6201 3C46  
                                                                    l5139 71B2  
                                                                    l5181 6E46  
                                                                    ?_map 008E  
                                                                    l5177 3F66  
                                                                    l5345 04A8  
                                                                    l7009 256E  
                                                                    l7121 319C  
                                                                    l5187 6F2A  
                                                                    l5355 052C  
                                                                    l5275 3AEE  
                                                                    l5267 3AD2  
                                                                    l6341 6F9C  
                                                                    l7109 316A  
                                                                    l5633 703C  
                                                                    l7411 1F46  
                                                                    l5389 06CE  
                                                                    l6517 2D2C  
                                                                    l7157 202E  
                                                                    l7095 30CA  
                                                                    l6551 2E02  
                                                                    l6633 2AB6  
                                                                    l6537 2DB8  
                                                                    l7443 1450  
                                                                    l6627 2A8E  
                                                                    l5935 37C2  
                                                                    l6639 2ADE  
                                                                    l4993 6BF6  
                                                                    l6981 23D4  
                                                                    STR_1 7FE7  
                                                                    STR_2 7FE7  
                                                                    STR_3 7F7F  
                                                                    STR_4 7FDD  
                                                                    STR_5 7FF9  
                                                                    STR_6 7FB0  
                                                                    STR_7 7FB0  
                                                                    STR_8 7FDD  
                                                                    STR_9 7FF9  
                                                                    u5010 032E  
                                                                    u5020 0356  
                                                                    u5040 03B4  
                                                                    u5008 02A4  
                                                                    u5017 0324  
                                                                    u5050 03F0  
                                                                    u5027 034C  
                                                                    u5230 0700  
                                                                    u5047 03AA  
                                                                    u5160 0586  
                                                                    u5128 04CC  
                                                                    u5080 047A  
                                                                    u5057 03E6  
                                                                    u4610 74A0  
                                                                    u5170 05D0  
                                                                    u5090 0480  
                                                                    u5308 0782  
                                                                    u5500 3DF2  
                                                                    u6060 276E  
                                                                    u4710 738C  
                                                                    u5350 085A  
                                                                    u5190 0666  
                                                                    u5158 0550  
                                                                    u5167 057C  
                                                                    u5159 058A  
                                                                    u5087 0470  
                                                                    u5440 0A22  
                                                                    u7040 7622  
                                                                    u4617 7496  
                                                                    u5177 05C6  
                                                                    u5450 0A54  
                                                                    u5418 090C  
                                                                    u5338 07FC  
                                                                    u6410 6FC4  
                                                                    u4740 3E70  
                                                                    u5460 0A5E  
                                                                    u5380 08DA  
                                                                    u6260 1A12  
                                                                    u8100 3012  
                                                                    _RCIF 007CF5  
                                                                    _RCEN 007E2B  
                                                                    u5197 065C  
                                                                    u5438 09CE  
                                                                    u6430 70B6  
                                                                    u8110 302A  
                                                                    u6510 2DBC  
                                                                    u4910 3AA0  
                                                                    u4680 7552  
                                                                    u5560 7916  
                                                                    u6280 3C38  
                                                                    u7320 11CC  
                                                                    u7400 24F8  
                                                                    u6600 2A86  
                                                                    u8120 3042  
                                                                    u7160 77BA  
                                                                    u5457 0A4A  
                                                                    u4905 6F80  
                                                                    u6450 7A18  
                                                                    u5378 0880  
                                                                    u6290 3C44  
                                                                    u6610 2A9E  
                                                                    u8130 3058  
                                                                    u4860 3F5C  
                                                                    u7420 25CE  
                                                                    u8300 1546  
                                                                    u6620 2AAE  
                                                                    u8140 305C  
                                                                    u8108 3018  
                                                                    u6540 2E2A  
                                                                    u7270 1154  
                                                                    u5830 33FE  
                                                                    u6630 2AC6  
                                                                    u8150 306A  
                                                                    u8118 3030  
                                                                    u8070 2FCA  
                                                                    u5670 3880  
                                                                    u8240 149C  
                                                                    u6640 2AD6  
                                                                    u8160 306E  
                                                                    u8128 3048  
                                                                    u8080 2FE2  
                                                                    u4960 3B48  
                                                                    u4890 6F7C  
                                                                    u7290 1176  
                                                                    u8410 16BC  
                                                                    u6650 2AEE  
                                                                    u8090 2FFA  
                                                                    u7610 31C8  
                                                                    u6490 2DAA  
                                                                    u4970 3B50  
                                                                    u8340 15C2  
                                                                    u6660 2AFE  
                                                                    u9117 3ABA  
                                                                    u7390 24CC  
                                                                    u8078 2FD0  
                                                                    u9207 6D38  
                                                                    u9127 7966  
                                                                    u8088 2FE8  
                                                                    u9137 7982  
                                                                    u8370 1640  
                                                                    u8098 3000  
                                                                    u7570 30E6  
                                                                    u7650 20EA  
                                                                    u9147 799C  
                                                                    u9157 2D42  
                                                                    u7590 3196  
                                                                    u9167 7434  
                                                                    u9177 7448  
                                                                    u9187 7452  
                                                                    u9197 6E4E  
                                                                    u8675 75B8  
                                                                    _RSEN 007E29  
                                                            __CFG_WRT0$ON 000000  
                                                            __CFG_WRT1$ON 000000  
                                                           _enviaSMS$1403 00C5  
                                                            __CFG_WRT2$ON 000000  
                                                           _enviaSMS$1383 00BD  
                                                            __CFG_WRT3$ON 000000  
                                                           _enviaSMS$1396 00BF  
                                                           _enviaSMS$1397 00C1  
                                                           _enviaSMS$1398 00C3  
                                                   writeEEPROM16_ext@data 0006  
                                                            __CFG_STVR$ON 000000  
                                                                    __dia 00EB  
                                                                    __ano 00E9  
                                                                    __hor 00EC  
                                                                    __mes 00EA  
                                                                    __min 00ED  
                                                       ?_Lcd_Write_String 0084  
                                                                    __sec 00EE  
                                                          ?_drenarPressao 0001  
                                                           __CFG_EBTRB$ON 000000  
                                                                    _atoi 3722  
                                                                    _main 0A6E  
                                             __end_ofi2_getDS1307TimeDate 3632  
                                                                    _tel1 01CE  
                                                                    _tel2 01C2  
                                                        __end_of_I2C_Read 6F90  
                                              __end_of_configuraTelefones 174C  
                                                                    map@a 00A2  
                                                                    map@b 00A4  
                                                                    map@c 00A6  
                                                                    map@d 009A  
                                                                    map@e 009E  
                                                                    fsr0h 000FEA  
                                                                    fsr1h 000FE2  
                                                                    indf0 000FEF  
                                                                    fsr2h 000FDA  
                                                                    fsr0l 000FE9  
                                                                    indf2 000FDF  
                                                                    fsr1l 000FE1  
                                                                    map@x 008E  
                                                                    fsr2l 000FD9  
                                                                    btemp 007F  
                                                        __end_of_I2C_Wait 6C4C  
                                                        __end_of_I2C_Stop 6BA8  
                                                 __size_of_tela_ajusteRTC 0230  
                                                        _etapaComunicacao 0062  
                                                            ?i2_I2C_Start 0001  
                                                                    prodh 000FF4  
                                                                    prodl 000FF3  
                                                            ?i2_I2C_Write 0002  
                                                         __end_ofi2_delay 6DD8  
                                                                    start 026C  
                                                      ??_Lcd_Write_String 0086  
                                                  __size_of_lerTransdutor 014A  
                                            partidaBombaEstacionaria@acao 0080  
                                                        __end_of_BCDtoDEC 6C66  
                                                         __end_of_Lcd_Cmd 6D4A  
                                                  __size_ofi2_I2C_Restart 000C  
                                                           ?_atualizarLCD 0088  
                                                            ___param_bank 000000  
                                                        __end_of_DECtoBCD 71FA  
                                               __size_of_tela_testeBombas 01D6  
                                                     _timerVerificarSinal 007E  
                                                           _lerParametros 30A8  
                                                                   ??_map 0098  
                                                        ?_I2C_Master_Init 008D  
                                                            ?_readButtons 0001  
                                                           __CFG_OSCS$OFF 000000  
                                                 _configuraTelefones$1641 00C1  
                                                             ?i2_RTC_Init 0001  
                                                         __end_of___aldiv 38F0  
                                                                   ?_atoi 00C5  
                                                                   ?_main 0001  
                                                                   _ACKEN 007E2C  
                                                                   _ACKDT 007E2D  
                                                         __end_of___awdiv 3E3A  
                                                                   STR_10 7EAD  
                                                                   STR_11 7FF9  
                                                                   STR_20 7EAD  
                                                                   STR_12 7D35  
                                                                   STR_13 7FFC  
                                                                   STR_21 7FA9  
                                                                   STR_30 7FD1  
                                                                   STR_22 7FF9  
                                                                   STR_14 7AAB  
                                                                   STR_23 7D35  
                                                                   STR_31 7FF9  
                                                                   STR_15 7EB9  
                                                                   STR_24 7FFC  
                                                                   STR_32 7FD1  
                                                                   STR_16 7FF9  
                                                                   STR_40 7DF2  
                                                                   STR_33 7FD7  
                                                                   STR_17 7FD7  
                                                                   STR_41 7DD2  
                                                                   STR_25 7B91  
                                                                   STR_18 7FDD  
                                                                   STR_34 7FF9  
                                                                   STR_50 7FE2  
                                                                   STR_42 7CE9  
                                                                   STR_26 7B29  
                                                                   STR_27 7FF9  
                                                                   STR_19 7FF9  
                                                                   STR_35 7F01  
                                                                   STR_51 7E1F  
                                                                   STR_43 7CFC  
                                                                   STR_52 7FF9  
                                                                   STR_28 7FD1  
                                                                   STR_44 7F91  
                                                                   STR_60 7EDD  
                                                                   STR_36 7ED1  
                                                         __end_of___awmod 7956  
                                                                   STR_37 7FA9  
                                                                   STR_29 7FF9  
                                                                   STR_53 7FE2  
                                                                   STR_45 7F43  
                                                                   STR_61 7C85  
                                                                   STR_46 7EA0  
                                                                   STR_54 7E2E  
                                                                   STR_70 7E01  
                                                                   STR_62 7D7D  
                                                                   STR_38 7C5D  
                                                                   STR_55 7FF9  
                                                                   STR_71 7FC5  
                                                                   STR_39 7E3D  
                                                                   STR_47 7D8F  
                                                                   STR_63 7C1E  
                                                                   STR_56 7FE2  
                                                                   STR_80 7F75  
                                                                   STR_48 7F2D  
                                                                   STR_72 7E10  
                                                                   STR_64 7C33  
                                                                   STR_81 7FF9  
                                                                   STR_49 7FF9  
                                                                   STR_57 7DC2  
                                                                   STR_65 7C71  
                                                                   STR_73 7C48  
                                                                   STR_82 7FE2  
                                                                   STR_90 7F9A  
                                                                   STR_66 7D22  
                                                                   STR_74 7C99  
                                                                   STR_58 7C09  
                                                                   STR_67 7DF2  
                                                                   STR_83 7F17  
                                                                   STR_59 7DA0  
                                                                   STR_91 7CC1  
                                                                   STR_75 7CAD  
                                                                   STR_76 7F38  
                                                                   STR_84 7E77  
                                                                   STR_68 7CD5  
                                                                   STR_92 7BEF  
                                                                   STR_85 7FF9  
                                                                   STR_77 7FF5  
                                                                   STR_69 7FCB  
                                                                   STR_93 7EF5  
                                                                   STR_94 7EB9  
                                                                   STR_86 7FE2  
                                                                   STR_78 7FF1  
                                                                   STR_95 7FB7  
                                                                   STR_87 7E85  
                                                                   STR_79 7BD0  
                                                                   STR_88 7FF9  
                                                                   STR_96 7FBE  
                                                                   STR_89 7FE2  
                                                                   STR_97 7EFE  
                                                                   STR_98 7E93  
                                                                   STR_99 7DB1  
                                                            ?_informacoes 0001  
                                                         __end_of___lldiv 7A70  
                                                                   _T0CON 000FD5  
                                                         ___awdiv@divisor 0082  
                                                         __end_of___lwdiv 758A  
                                                         __end_of___lwmod 73BC  
                                                                   i2l600 7152  
                                                                   i2l601 7156  
                                                                   i2l602 7160  
                                                                   i2l603 7164  
                                                                   i2l604 716E  
                                                                   i2l461 3660  
                                                                   i2l605 7172  
                                                                   i2l470 36D4  
                                                                   i2l462 3678  
                                                                   i2l473 36EA  
                                                                   i2l465 368E  
                                                                   i2l474 3710  
                                                                   i2l466 36A6  
                                                                   i2l458 364A  
                                                                   i2l651 3D86  
                                                                   i2l643 3D28  
                                                                   i2l469 36BC  
                                                                   i2l645 3D34  
                                                                   i2l478 371C  
                                                                   i2l646 3D44  
                                                                   i2l670 3944  
                                                                   i2l671 39C0  
                                                                   i2l672 3968  
                                                                   i2l920 00B2  
                                                                   i2l912 0072  
                                                                   i2l649 3D56  
                                                                   i2l673 39A6  
                                                                   i2l665 3906  
                                                                   i2l930 00FC  
                                                                   i2l922 00BC  
                                                                   i2l914 007C  
                                                                   i2l931 0110  
                                                                   i2l932 0122  
                                                                   i2l924 00D2  
                                                                   i2l916 0092  
                                                                   i2l941 016E  
                                                                   i2l598 7144  
                                                                   i2l926 00DC  
                                                                   i2l918 009C  
                                                                   i2l599 7148  
                                                                   i2l951 01C8  
                                                                   i2l943 018C  
                                                                   i2l935 0142  
                                                                   i2l928 00F2  
                                                                   i2l953 01D2  
                                                                   i2l945 0196  
                                                                   i2l937 014C  
                                                                   i2l954 01E0  
                                                                   i2l947 01A8  
                                                                   i2l939 0164  
                                                                   i2l956 0210  
                                                         ___awdiv@counter 0084  
                                                                   i2l957 021C  
                                                                   i2l949 01B2  
                                                                   _RCREG 000FAE  
                                                                   _TMR0H 000FD7  
                                                                   _TIMER 0008  
                                                                   _TMR0L 000FD6  
                                                                   _SPBRG 000FAF  
                                                         __end_of__doprnt 0A6E  
                                                 __size_of_Lcd_Set_Cursor 00C4  
                                                                   _TXREG 000FAD  
                                                         _writeEEPROM_ext 723E  
                                                           __CFG_PWRT$OFF 000000  
                                                         __end_of_btPress 784C  
                                                     ___lmul@multiplicand 0084  
                                                          __CFG_EBTR0$OFF 000000  
                                                          __CFG_EBTR1$OFF 000000  
                                                          __CFG_EBTR2$OFF 000000  
                                                          __CFG_EBTR3$OFF 000000  
                                                           __CFG_WRTB$OFF 000000  
                                                                   __b_ok 0116  
                                                           __CFG_WRTC$OFF 000000  
                                                           __CFG_WRTD$OFF 000000  
                                                             ?i2_Lcd_Init 0001  
                                                      __size_ofi2_Lcd_Cmd 0026  
                                                                   _delay 6E40  
                                                             ?i2_Lcd_Port 0001  
                                                                   _blink 707E  
                                                         __end_of_dpowers 7AAB  
                                                                   _line1 0199  
                                                                   _line2 0184  
                                                                   _line3 016F  
                                                                   _line4 015A  
                                                         __end_of_isdigit 6D1E  
                                                  ??_criarCaracteresCGRAM 0084  
                                                                   _timer 38F0  
                                                                   atoi@a 00CA  
                                                        __end_of_RTC_Init 6EE4  
                                                                   atoi@s 00C5  
                                                                   _putch 6BF0  
                                                       __end_of_I2C_Start 6B9C  
                                                       __end_of_I2C_Write 6BD0  
                                                                   pclath 000FFA  
                                                                   tablat 000FF5  
                                                  __size_of_intToFloatStr 0094  
                                                                   status 000FD8  
                                                   __end_of_telaPrincipal 2188  
                                                                   wtemp6 0080  
                                                         __end_of_sprintf 72CC  
                                                          _comunicarTeste 25D4  
                                                         __end_of_strncmp 3ED4  
                                                   i2writeEEPROM_ext@data 0004  
                                                        __end_of_Lcd_Init 79DE  
                                                          ??_atualizarLCD 0090  
                                              __size_of_getDS1307TimeDate 0134  
                                              __size_of_setDS1307TimeDate 0112  
                                                        __end_of_Lcd_Port 723E  
                                                     __size_ofi2_I2C_Read 0036  
                                                  _tentativasVerificarGSM 0076  
                                                     __size_ofi2_I2C_Wait 0018  
                                                         __initialization 784C  
                                                           _dtl_principal 010E  
                                                     __size_ofi2_I2C_Stop 000C  
                                                          ?_lerParametros 0001  
                                                            __end_of_atoi 380E  
                                                            __end_of_main 0F04  
                                                   __end_of_aguardaBuffer 7042  
                                                     __size_ofi2_BCDtoDEC 0016  
                                                    _posicaoColetaLeitura 006E  
                                                                  ??_atoi 00C7  
                                                                  ??_main 00D8  
                                                            i2I2C_Write@d 0002  
                                                           _status_jockey 00FC  
                                      lerParametros@verifica_memoria_nova 0094  
                                                      __size_of_Lcd_Clear 0012  
                                                           __activetblptr 000002  
                                                            ?_reiniciaLCD 0001  
                                                                  ?_TIMER 0001  
                                                           _lerTransdutor 2D02  
                                                           i2_I2C_Restart 6B84  
                                                    _tempo_limite_partida 006C  
                                                               I2C_Read@a 0081  
                                                                  TIMER@c 0061  
                                                         __CFG_CCP2MUX$ON 000000  
                                                      readEEPROM_ext@data 008D  
                                                                  ?_delay 0080  
                                                                  ?_blink 0080  
                                                                  _ADCON0 000FC2  
                                                                  _ADCON1 000FC1  
                                                                  STR_100 7D0F  
                                                                  STR_101 7E69  
                                                                  STR_102 7FEC  
                                                                  STR_111 7F88  
                                                                  STR_103 7EC5  
                                                                  STR_104 7FEC  
                                                                  STR_112 7F0C  
                                                                  STR_120 7DE2  
                                                                  STR_113 7F6B  
                                                                  STR_105 7D6B  
                                                                  STR_121 7D47  
                                                                  STR_114 7F9A  
                                                                  STR_122 7F61  
                                                                  STR_106 7F22  
                                                                  _ADRESH 000FC4  
                                                                  STR_107 7F2D  
                                                                  STR_115 7CC1  
                                                                  STR_123 7D59  
                                                                  STR_108 7E1F  
                                                                  STR_124 7F57  
                                                                  STR_116 7E5B  
                                                                  STR_117 7EFE  
                                                                  STR_109 7E2E  
                                                                  STR_125 7EE9  
                                                                  STR_118 7EB9  
                                                                  STR_126 7E4C  
                                                                  _ADRESL 000FC3  
                                                                  STR_127 7FA2  
                                                                  STR_119 7F4D  
                                                        ___awdiv@dividend 0080  
                                                                  ?_timer 0001  
                                                                  ?_putch 0001  
                                                          lerTransdutor@i 00B2  
                                                         ??_drenarPressao 00BB  
                                                               ??i2_delay 0003  
                                                  __end_of_comunicarTeste 27B6  
                                                                  i2l1067 6DC0  
                                                                  i2l1068 6DAA  
                                                                  _INTCON 000FF2  
                                                                  i2l5617 6DAC  
                                                                  i2l5785 3D3A  
                                                                  i2l5777 3D1E  
                                                               ??_Lcd_Cmd 0081  
                                                                  _TMR0IF 007F92  
                                                          __CFG_WDTPS$128 000000  
                                       __size_of_partidaBombaEstacionaria 0068  
                                                 __size_of_Lcd_Write_Char 0056  
                                                                  _SSPADD 000FC8  
                                                                  _SSPBUF 000FC9  
                                               ?_partidaBombaEstacionaria 0001  
                                                     __size_ofi2_RTC_Init 0032  
                                                       ??_ajusteSP_Bombas 00C8  
                                       __size_of_monitorarAlteracaoEstado 007E  
                                               ?_monitorarAlteracaoEstado 0001  
                                                 writeEEPROM16_ext@adress 0008  
                                                     _dias_restante_teste 00E8  
                                                ??_configuraRegistradores 0080  
                                                                  __b_esc 011C  
                                                          _readEEPROM_ext 73BC  
                                                                  ___lmul 74C8  
                                                       __end_ofi2_Lcd_Cmd 6CF6  
                                                               ??___aldiv 0088  
                                                                  ___wmul 6D4A  
                                                        __end_of_enviaSMS 1AA2  
                                                               ??___awdiv 0084  
                                                            enviaSMS@tipo 00C7  
                                                               ??___awmod 0084  
                                                         _getSinalSIM800L 298C  
                                                     __size_ofi2_Lcd_Init 007A  
                                                               ??___lldiv 0088  
                                                                  _blinkk 0069  
                                                     __size_ofi2_Lcd_Port 0040  
                                                               ??___lwdiv 0084  
                                                               ??___lwmod 008B  
                                                 _habilitaTesteAutomatico 00EF  
                                   __end_of_verificarIntervaloTesteBombas 7138  
                                  __size_of_verificarIntervaloTesteBombas 003E  
                                           _verificarIntervaloTesteBombas 70FA  
                                                 __end_of_writeEEPROM_ext 7284  
                                                           ?_limparBuffer 0001  
                                                               ??__doprnt 0092  
                                                                  _memset 6F1C  
                                                                  delay@x 0080  
                                                                  clear_0 78A4  
                                                                  clear_1 78B0  
                                                                  clear_2 78BC  
                                                        ___awdiv@quotient 0086  
                                                                  blink@i 0084  
                                                         ___awmod@divisor 0082  
                                                               ??_btPress 0080  
                                                           _intToFloatStr 3F6C  
                                                            __doprnt@flag 009B  
                                                         ___awmod@counter 0084  
                                           setDS1307TimeDate@ptrToUserVal 008C  
                                                                  _printf 7042  
                                                            __doprnt@prec 0096  
                                                                  _strchr 7178  
                                                        i2_Lcd_Write_Char 731A  
                                                                  _strlen 7468  
                                                                  _strstr 3ED4  
                                                          ?_lerTransdutor 0001  
                                                           dataLoger@logs 00C6  
                                                            __pdataCOMRAM 007E  
                                                               ??_isdigit 0080  
                                                          ?i2_I2C_Restart 0001  
                                                               ?_I2C_Read 0081  
                                                               ?_I2C_Wait 0001  
                                                               ?_I2C_Stop 0001  
                                                            __mediumconst 7A70  
                                                      _counterPressedTime 0115  
                                                                  tblptrh 000FF7  
                                                                  tblptrl 000FF6  
                                                                  tblptru 000FF8  
                                                                  putch@c 0080  
                                                               ?_BCDtoDEC 0001  
                                                               ??_sprintf 00B5  
                                                               ??_strncmp 008C  
                                                               ?_DECtoBCD 0001  
                                                         Lcd_Set_Cursor@a 0084  
                                                         Lcd_Set_Cursor@b 0083  
                                                         Lcd_Set_Cursor@y 0086  
                                                         Lcd_Set_Cursor@z 0085  
                                                         ?_comunicarTeste 0001  
                                                              __accesstop 0080  
                                                 __end_of__initialization 78C2  
                                                          _tela_ajusteRTC 2188  
                                                       __end_of_Lcd_Clear 6BF0  
                                                        _etapaTesteBombas 0070  
                                                           ___rparam_used 000001  
                                                         ??_lerParametros 0094  
                                                           __end_of_TIMER 026C  
                                                              _acaoBombas 39C6  
                                                  __end_of_readEEPROM_ext 7412  
                                                     _telefoneSelecionado 00F7  
                                                    __size_ofi2_I2C_Start 000C  
                                                    __size_ofi2_I2C_Write 000E  
                                                        _tela_testeBombas 27B6  
                                                          __pcstackCOMRAM 0001  
                                                        _status_principal 00FB  
                                                            __pidataBANK0 6B5D  
                                                            __pidataBANK1 6B64  
                                                      __size_of_dataLoger 0252  
                                                           __end_of_delay 6E76  
                                                           __end_of_blink 70BC  
                                                          ??_limparBuffer 0088  
                                                __size_of_acaoTesteBombas 0480  
                                                           __end_of_timer 39C6  
                                                ??i2_criarCaracteresCGRAM 0005  
                                                           __end_of_putch 6C04  
                                                          ?_intToFloatStr 00BB  
                                                       ?_readEEPROM16_ext 008E  
                                                               ?_RTC_Init 0001  
                                                       intToFloatStr@conv 00C1  
                                                          _tela_menu_posi 011D  
                                                       i2Lcd_Write_Char@a 0004  
                                                       i2Lcd_Write_Char@y 0003  
                                                      ??_readEEPROM16_ext 0090  
                                                    __size_of_readButtons 00F0  
                                                          _Lcd_Set_Cursor 3B56  
                                                                 ??_TIMER 003D  
                                                            ??i2_I2C_Read 0004  
                                                              ??_I2C_Read 0083  
                                                            ??i2_I2C_Wait 0001  
                                                      __size_of_getSerial 011C  
                                                              ??_I2C_Wait 0080  
                                                            ??i2_I2C_Stop 0002  
                                                              ??_I2C_Stop 0081  
                                                    __size_of_informacoes 0128  
                                                    __end_of_atualizarLCD 25D4  
                                                            ??i2_BCDtoDEC 0001  
                                                               ?_Lcd_Init 0001  
                                                              ??_BCDtoDEC 0080  
                                                                 ??_delay 0082  
                                                               ?_Lcd_Port 0001  
                                                              __doprnt@ap 0090  
                                                                 ??_blink 0084  
                                                              __doprnt@cp 009C  
                                                              __doprnt@pb 008C  
                                                   writeEEPROM_ext@adress 008D  
                                                              ??_DECtoBCD 0088  
                                                                 ??_timer 003D  
                                                                 ??_putch 0080  
                                                              __pbssBANK0 00D8  
                                                              __pbssBANK1 0100  
                                                  __end_of_tela_ajusteRTC 23B8  
                                                              __menu_posi 00DE  
                                                 __end_of_getSinalSIM800L 2B4C  
                                                     writeEEPROM_ext@data 008C  
                                                         ?_readEEPROM_ext 0001  
                                             i2_criarCaracteresCGRAM$1548 0038  
                                                __size_of_resetParametros 003E  
                                                      __end_ofi2_I2C_Read 6E40  
                                                            I2C_Read@temp 0083  
                                                      __end_ofi2_I2C_Wait 6C32  
                                                      __end_ofi2_I2C_Stop 6B84  
                                                                 ?___lmul 0080  
                                         __size_of_configuraRegistradores 007A  
                                                                 ?___wmul 0080  
                                                       _writeEEPROM16_ext 6C66  
                                                      __size_of_salvarLOG 00C4  
                                                      __end_ofi2_BCDtoDEC 6C1A  
                                                              _flag_b_esc 0067  
                                                              _codigoErro 00F2  
                                                                 ?_memset 0080  
                                                      _configuraTelefones 1384  
                                                        ?_writeEEPROM_ext 008C  
                                                          ___lmul@product 0088  
                                                      __size_of_validaRTC 004E  
                                                            ??i2_RTC_Init 0004  
                                                         ??_lerTransdutor 00AA  
                                                              ??_RTC_Init 008C  
                                               __size_of_Lcd_Write_String 003A  
                                                      ?_writeEEPROM16_ext 0006  
                                                  __end_of_Lcd_Set_Cursor 3C1A  
                                         i2criarCaracteresCGRAM@character 0008  
                                           criarCaracteresCGRAM@character 0087  
                                                              I2C_Write@d 008A  
                                                                 ?_printf 00A1  
                                                         ??i2_I2C_Restart 0002  
                                                                 ?_strchr 0080  
                                                                 ?_strlen 0080  
                                                                 ?_strstr 008F  
                                                           ??_I2C_Restart 0081  
                                          ?_verificarIntervaloTesteBombas 0001  
                                                                 _INTCON2 000FF1  
                                                                 _INTCON3 000FF0  
                                                     ?_configuraTelefones 0001  
                                                     ??_writeEEPROM16_ext 0008  
                                                    __size_of_reiniciaLCD 0024  
                                                            ??i2_Lcd_Init 0004  
                                                              ??_Lcd_Init 0083  
                                                            ??i2_Lcd_Port 0001  
                                                              ??_Lcd_Port 0080  
                                                                 _SSPCON1 000FC6  
                                                                 _SSPCON2 000FC5  
                                                       __end_of_dataLoger 1F54  
                                                                 _SSPSTAT 000FC7  
                                                                 i2_delay 6DA6  
                                                               ?_enviaSMS 0001  
                                                         ?_tela_ajusteRTC 0001  
                                                            _flag_b_menos 011B  
                                                          _Lcd_Write_Char 7412  
                                                                 _Lcd_Cmd 6D1E  
                                                              _dtl_jockey 010F  
                                                      __size_of_writeChar 000E  
                                                      __end_ofi2_RTC_Init 6E0A  
                                                               _I2C_Start 6B90  
                                                              _gsmOcupado 00F4  
                                                               _I2C_Write 6BC2  
                                                         _timerReenvioSMS 00F6  
                                                    ??_configuraTelefones 00BF  
                                                             ?_acaoBombas 0001  
                                                   atualizarLCD@lcdEstado 0095  
                                                       __end_of_getSerial 340E  
                                                                 __Hparam 0000  
                                                  __size_ofi2_reiniciaLCD 0024  
                                                                 __Lparam 0000  
                                               __end_of_writeEEPROM16_ext 6C88  
                                                         _sp_estacionaria 00E1  
                                            __size_ofi2_getDS1307TimeDate 0112  
                                                                 ___aldiv 380E  
                                                                 __b_mais 0118  
                                                         ??_intToFloatStr 00BD  
                                                                 ___awdiv 3DA0  
                                                         __size_of___lmul 0060  
                                                                 ___awmod 78D0  
                                                                 ___lldiv 79DE  
                                                         __size_of___wmul 002C  
                                                                 ___lwdiv 7528  
                                                                 ___lwmod 736A  
                                                      __end_ofi2_Lcd_Init 76D0  
                                                           atualizarLCD@i 0099  
                                                      __end_ofi2_Lcd_Port 7178  
                                                                 __doprnt 0270  
                                                                 __pcinit 784C  
                                         __size_ofi2_criarCaracteresCGRAM 00C2  
                                                         __size_of_memset 003A  
                                                                 _btPress 77C8  
                                                                 __ramtop 0600  
                                                         ?_Lcd_Set_Cursor 0083  
                                                                 __ptext0 0A6E  
                                                                 __ptext1 70FA  
                                                                 __ptext2 27B6  
                                                                 __ptext3 2188  
                                                                 __ptext4 72CC  
                                                                 __ptext5 340E  
                                                                 __ptext6 71B8  
                                                                 __ptext7 1F54  
                                                                 __ptext8 70BC  
                                                                 __ptext9 6CAC  
                                               criarCaracteresCGRAM@F2966 7A71  
                                                         __size_of_printf 003C  
                                                                 _dtl_dia 0114  
                                                                 _dtl_ano 0112  
                                                         __size_of_strchr 0040  
                                                         __size_of_strlen 0060  
                                                                 _dtl_mes 0113  
                                                                 _dtl_min 0110  
                                                           i2BCDtoDEC@val 0001  
                                                         __size_of_strstr 0098  
                                                                 _dpowers 7AA1  
                                                    readEEPROM16_ext@data 0091  
                                                            __size_of_map 0124  
                                                                 _isdigit 6CF6  
                                                       ??_acaoTesteBombas 00C8  
                                                        ___awmod@dividend 0080  
                                                        ___aldiv@dividend 0080  
                                                         _ajusteSP_Bombas 1AA2  
                                                __size_of_I2C_Master_Init 0064  
                                                        _dtl_carregar_log 010C  
                                                  _configuraRegistradores 76D0  
                                                                 _pressao 00D8  
                                                                 _sprintf 7284  
                                                           __doprnt@width 009E  
                                                     __end_of_I2C_Restart 6BB4  
                                                  __end_of_Lcd_Write_Char 7468  
                                                                 _strncmp 3E3A  
                                                    end_of_initialization 78C2  
                                                       __end_of_salvarLOG 3CDE  
                                                              ??_enviaSMS 00BB  
                                                    __end_of_limparBuffer 6EAC  
                                                            _coletaMedias 0100  
                                           __size_of_criarCaracteresCGRAM 00C6  
                                                       __end_of_validaRTC 731A  
                                                                 memset@c 0082  
                                                                 memset@n 0084  
                                                                 memset@p 0086  
                                                           __Lmediumconst 7A70  
                                                     _timerTrocarTextoLcd 0075  
                                                __end_ofi2_Lcd_Write_Char 736A  
                                                              blink@start 0082  
                                                              ?_I2C_Start 0001  
                                                              ?_I2C_Write 008A  
                                                            writeChar@hex 0080  
                                                            _bufferSerial 011E  
                                                        ?_getSinalSIM800L 0001  
                                                    _acaoTesteBombas$1500 00D2  
                                                    _acaoTesteBombas$1510 00D6  
                                                    _acaoTesteBombas$1505 00D4  
                                                    _acaoTesteBombas$1493 00D0  
                                                    _acaoTesteBombas$2565 00CE  
                                                         ___lldiv@divisor 0084  
                                                         ___lldiv@counter 008C  
                                                ??_configurarEstacionaria 00BB  
                                                               _RCSTAbits 000FAB  
                                                                 printf@f 00A1  
                                                        ___aldiv@quotient 008A  
                                                        I2C_Master_Init@c 008D  
                                                                 postdec1 000FE5  
                                                                 postdec2 000FDD  
                                                                 postinc0 000FEE  
                                                                 postinc2 000FDE  
                                                               Lcd_Port@a 0080  
                                                      _timerColetaLeitura 0071  
                                                                 strlen@s 0080  
                                                               i2_Lcd_Cmd 6CD0  
                                                       ??_resetParametros 00BC  
                                                              getSerial@i 00C2  
                                                               _PORTAbits 000F80  
                                                               _PORTBbits 000F81  
                                                               _PORTCbits 000F82  
                                                               _PORTDbits 000F83  
                                                   __size_of_atualizarLCD 021C  
                                                               _PORTEbits 000F84  
                                                       __end_of_writeChar 6BDE  
                                                  __size_of_telaPrincipal 0234  
                                                           i2_reiniciaLCD 6C88  
                                                               _TRISAbits 000F92  
                                                               _TRISBbits 000F93  
                                                               _TRISCbits 000F94  
                                                        ??_comunicarTeste 00BB  
                                                               _TRISDbits 000F95  
                                                               _TRISEbits 000F96  
                                                 i2writeEEPROM_ext@adress 0005  
                                                     __size_of_acaoBombas 00CA  
                                                __end_of_tela_testeBombas 298C  
                                                       __size_of_I2C_Read 003A  
                                                       __size_of_I2C_Wait 001A  
                                                       __size_of_I2C_Stop 000C  
                                          monitorarAlteracaoEstado@estado 0082  
                                                         ?_Lcd_Write_Char 0001  
                                                  _out_BOMBA_ESTACIONARIA 00F8  
                                                       Lcd_Write_String@a 0084  
                                                       Lcd_Write_String@i 0086  
                                                              map@out_max 0096  
                                                              map@out_min 0094  
                                                  __size_of_aguardaBuffer 003C  
                                                  i2_criarCaracteresCGRAM 3CDE  
                                                       __size_of_BCDtoDEC 001A  
                                                   __end_of_drenarPressao 6DA6  
                                                       __size_of_DECtoBCD 0042  
                                                               _TXSTAbits 000FAC  
                                              __size_of_writeEEPROM16_ext 0022  
                                                        _intensidadeSinal 00FF  
                                                         getSerial@length 00C0  
                                                            _atualizarLCD 23B8  
                                                               _Lcd_Clear 6BDE  
                                                          __end_of___lmul 7528  
                                                          i2I2C_Read@temp 0004  
                                                          __end_of___wmul 6D76  
                                                      intToFloatStr@F2544 01DA  
                                                        _Lcd_Write_String 6F90  
                                                           __pidataCOMRAM 6B5C  
                                                 __end_of_ajusteSP_Bombas 1D02  
                                                              ?i2_Lcd_Cmd 0001  
                                                          __end_of_memset 6F56  
                                                 salvarLOG@ultimoLogSalvo 008F  
                                                          __end_of_printf 707E  
                                                       __size_of_RTC_Init 0038  
                                                             _I2C_Restart 6BA8  
                                                          ?i2_reiniciaLCD 0001  
                                                          __end_of_strchr 71B8  
                                                          __end_of_strlen 74C8  
                                                          __end_of_strstr 3F6C  
                                                      _flagErroTransdutor 00F0  
                                                     start_initialization 784C  
                                                             i2I2C_Read@a 0002  
                                                             __end_of_map 32F2  
                                                   _tela_testeBombas$1596 00BD  
                                                      intToFloatStr@valor 00C5  
                                                _partidaBombaEstacionaria 75EE  
                                               __size_of_readEEPROM16_ext 0038  
                                                       __size_of_Lcd_Init 0088  
                                                       __size_of_Lcd_Port 0044  
                                                        ??_readEEPROM_ext 008C  
                                                _monitorarAlteracaoEstado 774A  
                                                       ??_I2C_Master_Init 0091  
                                                       atualizarLCD@line1 0088  
                                                       atualizarLCD@line2 008A  
                                                       atualizarLCD@line3 008C  
                                                       atualizarLCD@line4 008E  
                                                           ??i2_I2C_Start 0002  
                                                             ??_I2C_Start 0081  
                                                           ??i2_I2C_Write 0004  
                                                           _telaPrincipal 1F54  
                                                             ??_I2C_Write 008C  
                                                   __end_of_lerParametros 31CE  
                                                              ?_Lcd_Clear 0001  
                                         __size_of_configurarEstacionaria 01B6  
                                                                ??___lmul 0088  
                                                                ??___wmul 0084  
                                                             __doprnt@len 0099  
                                                             __doprnt@val 0097  
                                                             __pdataBANK0 00F9  
                                                             __pdataBANK1 01DA  
                                                           _aguardaBuffer 7006  
                                                           ??_readButtons 0001  
                                                         Lcd_Write_Char@a 0083  
                                                                ??_memset 0086  
                                                         Lcd_Write_Char@y 0082  
                                                                ??_printf 00B5  
                                                   i2Lcd_Write_Char@tempp 0002  
                                                           ??_informacoes 00BB  
                                               _timerIntervaloEntreBombas 00FE  
                                                                ??_strchr 0084  
                                                                ??_strlen 0082  
                                                                ??_strstr 0093  
                                                             __pbssCOMRAM 0062  
                                                           __pcstackBANK0 0080  
                                                   __size_of_limparBuffer 0036  
                                                        ??_tela_ajusteRTC 00BB  
                                                   lerTransdutor@_pressao 00AE  
                                                     i2_getDS1307TimeDate 3520  
                                                            _isdigit$2058 0081  
                                                        intToFloatStr@end 00BD  
                                                                ?i2_delay 0001  
                                                                ?_Lcd_Cmd 0001  
                                                               __doprnt@c 00A0  
                                                               __doprnt@f 008E  
                                         ??_verificarIntervaloTesteBombas 008E  
                                                          ?_telaPrincipal 0001  
                                                               _dataLoger 1D02  
                                                       __size_of_enviaSMS 0356  
                                                          _timerAtrasoLCD 0074  
                                                            ??_acaoBombas 00C8  
                                                        ___lwdiv@dividend 0080  
                                                        ??_Lcd_Set_Cursor 0084  
                                                               __pintcode 0008  
                                                    ?i2_getDS1307TimeDate 0006  
                                                           __pmediumconst 7A70  
                                                         _acaoTesteBombas 0F04  
                                                                ?___aldiv 0080  
                                                               _flag_b_ok 0117  
                                                     configuraTelefones@i 00C3  
                                                                ?___awdiv 0080  
                                                                ?___awmod 0080  
                                                          ?_aguardaBuffer 0093  
                                                     __end_ofi2_I2C_Start 6B78  
                                                                ?___lldiv 0080  
                                                     __end_ofi2_I2C_Write 6BC2  
                                                               _getSerial 32F2  
                                                   _timerEtapaComunicacao 00F5  
                                                                ?___lwdiv 0080  
                                                                ?___lwmod 0087  
                                                                ?__doprnt 008C  
                                                               _bufferAUX 01AE  
                                                               _ajust_tel 00DC  
                                                            _limparBuffer 6E76  
                                                    readEEPROM_ext@adress 008C  
                                                                ?_btPress 0001  
                                                             ??i2_Lcd_Cmd 0002  
                                                        ?_ajusteSP_Bombas 0001  
                                                         ??i2_reiniciaLCD 003D  
                                                   __end_of_lerTransdutor 2E4C  
                                                           ??_reiniciaLCD 00BC  
                                                             _flag_b_mais 0119  
                                                 ?_configuraRegistradores 0001  
                                                               _isPressed 0066  
                                                   __end_ofi2_I2C_Restart 6B90  
                                                          __size_of_TIMER 0264  
                                                                ?_isdigit 0001  
                                                                _I2C_Read 6F56  
                                                                _I2C_Wait 6C32  
                                                                _I2C_Stop 6B9C  
                                                     __end_of_readButtons 3722  
                                                          _timerPiscarLCD 0072  
                                                __size_of_writeEEPROM_ext 0046  
                                                  _configurarEstacionaria 2B4C  
                                                  readEEPROM16_ext@adress 0093  
                                                                _BCDtoDEC 6C4C  
                                                      __end_of_acaoBombas 3A90  
                                                     __end_of_informacoes 30A8  
                                                        ___lwdiv@quotient 0084  
                                                          __size_of_delay 0036  
                                                          __size_of_blink 003E  
                                                        lerTransdutor@adc 00B0  
                                                                ?_sprintf 00A1  
                                                                ?_strncmp 0086  
                                                                _DECtoBCD 71B8  
                                                          __size_of_timer 00D6  
                                                          __size_of_putch 0014  
                                                               _menu_posi 00DF  
                                                               _horimetro 010A  
                                       __end_ofcriarCaracteresCGRAM@F2966 7AA1  
                                                         ___aldiv@divisor 0084  
                                                         ___aldiv@counter 0088  
                                                          ___wmul@product 0084  
                                                               btPress@bt 0080  
                                                                _LATAbits 000F89  
                                                                _LATCbits 000F8B  
                                                                _LATDbits 000F8C  
                                                              ?_dataLoger 0001  
                                                                _LATEbits 000F8D  
                                                               _salvarLOG 3C1A  
                                                       ?i2_Lcd_Write_Char 0001  
                                                                _PIE1bits 000F9D  
                                                               blink@line 0080  
                                                         _sp_pressao_rede 00E4  
                                                         _ultimoEstadoLCD 01DE  
                                                               _validaRTC 72CC  
                                                         _resetParametros 70BC  
                                                        _horario_de_teste 00E7  
                                             __size_of_configuraTelefones 03C8  
                                                                Lcd_Cmd@a 0082  
                                                                _PIR1bits 000F9E  
                                                      ??i2_Lcd_Write_Char 0002  
                                                                i2u570_40 3CEE  
                                                                i2u575_40 3D92  
                                                                i2u576_40 3D9A  
                                                                i2u577_40 6E2C  
                                                                i2u921_47 3D08  
                                                                i2u578_45 6E30  
                                                   ??i2_getDS1307TimeDate 0008  
                                                                i2u922_47 7338  
                                                                i2u923_47 734A  
                                                                i2u924_47 7354  
                                                                i2u925_47 7664  
                                                                i2u686_40 36FA  
                                                                i2u926_47 767A  
                                                                i2u927_47 7692  
                                                                i2u928_47 6CE4  
                                                                i2u929_47 6DB2  
                                                             ??_Lcd_Clear 0083  
                                                               _timerBase 0073  
                                                               _sp_jockey 00E3  
                                                     _dtl_posi_visualizar 0064  
                                                              ?_getSerial 00BB  
                                            __end_of_criarCaracteresCGRAM 3B56  
                                                   __end_of_intToFloatStr 4000  
                                                                _RTC_Init 6EAC  
                                                               map@in_max 0092  
                                                               map@in_min 0090  
                                          __end_of_configuraRegistradores 774A  
                                                              _ADCON0bits 000FC2  
                                                       ___wmul@multiplier 0080  
                                                               map@result 00A8  
                                                               _totalLogs 0065  
                                                        _dtl_estacionaria 010D  
                                                        ??_Lcd_Write_Char 0081  
                                                                i2delay@x 0001  
                                                 ?i2_criarCaracteresCGRAM 0001  
                                               _tempo_limite_estacionaria 00E6  
                                                                _Lcd_Init 7956  
                                                       i2_writeEEPROM_ext 6FCA  
                                                               _writeChar 6BD0  
                                                                _Lcd_Port 71FA  
                                                       ?_tela_testeBombas 0001  
                                                     __end_of_reiniciaLCD 6CD0  
                                                       ___lmul@multiplier 0080  
                                                               copy_data0 7860  
                                                               copy_data1 7880  
                                                        _readEEPROM16_ext 6EE4  
                                                      ?i2_writeEEPROM_ext 0004  
                                                         ??_telaPrincipal 00C8  
                                                      ??_tela_testeBombas 00BB  
                                                __end_of_Lcd_Write_String 6FCA  
                                                             _dtl_posicao 00F9  
                                                        __size_ofi2_delay 0032  
                                                 __end_of_acaoTesteBombas 1384  
                                                        __size_of_Lcd_Cmd 002C  
                                                              ?_salvarLOG 0001  
                                                             i2_I2C_Start 6B6C  
                                                             i2_I2C_Write 6BB4  
                                                     ??i2_writeEEPROM_ext 0005  
                                                     _intervalo_teste_dia 00FD  
                                                              ?_validaRTC 0001  
                                                                __Hrparam 0000  
                                                         ??_aguardaBuffer 0095  
                                                                __Lrparam 0000  
                                                   criarCaracteresCGRAM@i 00BB  
                                                   criarCaracteresCGRAM@j 00BA  
                                                   criarCaracteresCGRAM@k 00B9  
                                                        __size_of___aldiv 00E2  
                                                        __size_of___awdiv 009A  
                                                        __size_of___awmod 0086  
                                                __size_of_getSinalSIM800L 01C0  
                                                        __size_of___lldiv 0092  
                                                                __b_menos 011A  
                                                        __size_of___lwdiv 0062  
                                                        __size_of___lwmod 0052  
                                                             _readButtons 3632  
                                                        __size_of__doprnt 07FE  
                                                             BCDtoDEC@val 0080  
                                                     Lcd_Write_Char@tempp 0081  
                                                        __size_of_btPress 0084  
                                              ??_partidaBombaEstacionaria 0080  
                                                         intToFloatStr@pr 00C6  
                                                             _informacoes 2F80  
                                                    _ajusteSP_Bombas$2567 00C8  
                                                            ?_I2C_Restart 0001  
                                                         _I2C_Master_Init 758A  
                                          __end_ofi2_criarCaracteresCGRAM 3DA0  
                                               __end_ofi2_writeEEPROM_ext 7006  
                                              ??_monitorarAlteracaoEstado 0080  
                                                          lerParametros@i 0095  
                                                           _tempo_partida 006D  
                                                        __size_of_isdigit 0028  
                                                         ___lwdiv@divisor 0082  
                                                         ___lwdiv@counter 0086  
                                                              ?_writeChar 0080  
                                                                __ptext10 3A90  
                                                                __ptext11 7956  
                                                                __ptext20 2F80  
                                                                __ptext12 75EE  
                                                                __ptext21 298C  
                                                                __ptext13 774A  
                                                                __ptext30 76D0  
                                                                __ptext22 32F2  
                                                                __ptext14 2D02  
                                                                __ptext31 23B8  
                                                                __ptext23 3722  
                                                                __ptext15 31CE  
                                                                __ptext40 73BC  
                                                                __ptext32 6F90  
                                                                __ptext24 2E4C  
                                                                __ptext16 74C8  
                                                                __ptext41 6BA8  
                                                                __ptext33 7412  
                                                                __ptext25 6C4C  
                                                                __ptext17 380E  
                                                                __ptext50 174C  
                                                                __ptext42 6F56  
                                                                __ptext34 3B56  
                                                                __ptext26 1D02  
                                                                __ptext18 30A8  
                                                                __ptext51 6BD0  
                                                                __ptext43 3F6C  
                                                                __ptext35 1AA2  
                                                                __ptext27 2B4C  
                                                                __ptext19 6EE4  
                                                                __ptext60 6F1C  
                                                                __ptext52 7042  
                                                                __ptext44 78D0  
                                                                __ptext36 707E  
                                                                __ptext28 1384  
                                                                __ptext61 7006  
                                                                __ptext53 0270  
                                                                __ptext45 3DA0  
                                                                __ptext37 0F04  
                                                                __ptext29 25D4  
                                                                __ptext70 6B90  
                                                                __ptext62 3ED4  
                                                                __ptext54 6BF0  
                                                                __ptext46 6D76  
                                                                __ptext38 3C1A  
                                                                __ptext71 6C32  
                                                                __ptext63 3E3A  
                                                                __ptext55 6CF6  
                                                                __ptext47 7284  
                                                                __ptext39 723E  
                                                                __ptext80 3CDE  
                                                                __ptext72 6BDE  
                                                                __ptext64 7468  
                                                                __ptext56 6D4A  
                                                                __ptext48 77C8  
                                                                __ptext81 731A  
                                                                __ptext73 6D1E  
                                                                __ptext65 7178  
                                                                __ptext57 736A  
                                                                __ptext49 39C6  
                                                                __ptext90 6C66  
                                                                __ptext82 7656  
                                                                __ptext74 71FA  
                                                                __ptext66 6E40  
                                                                __ptext58 7528  
                                                                __ptext91 6FCA  
                                                                __ptext83 6CD0  
                                                                __ptext75 758A  
                                                                __ptext67 6EAC  
                                                                __ptext59 6E76  
                                                                __ptext92 6DA6  
                                                                __ptext84 7138  
                                                                __ptext76 79DE  
                                                                __ptext68 6BC2  
                                                                __ptext93 6BB4  
                                                                __ptext85 3520  
                                                                __ptext69 6B9C  
                                                                __ptext94 6B78  
                                                                __ptext86 6B84  
                                                                __ptext78 38F0  
                                                                __ptext95 6B6C  
                                                                __ptext87 6E0A  
                                                                __ptext79 6C88  
                                                                __ptext96 6C1A  
                                                                __ptext88 6C04  
                                                                __ptext97 3632  
                                                                __ptext89 6DD8  
                                                                __ptext98 0000  
                                                                _ajst_rtc 006A  
                                                      _ultimoEstadoSaidas 006F  
                                                        __size_of_sprintf 0048  
                                                        acaoTesteBombas@i 00CD  
                                                    getSinalSIM800L@sinal 00CE  
                                                 __end_of_resetParametros 70FA  
                                                                _enviaSMS 174C  
                                                                _dtl_hora 0111  
                                                        __size_of_strncmp 009A  
                                                     _comunicarTeste$1368 00BD  
                                                       ??_writeEEPROM_ext 008D  
                                               lerTransdutor@mediaLeitura 00AC  
                                                           __size_of_atoi 00EC  
                                                           __size_of_main 0496  
                                                             ??_dataLoger 00BB  
                                                     _status_estacionaria 00FA  
                                                              strncmp@len 008A  
                                                        _timerTesteBombas 00DA  
                                                                blink@end 0083  
                                                                _tel_posi 00DD  
                                               _criarCaracteresCGRAM$1548 00B7  
                                                                int$flags 007F  
                                                                atoi@sign 00C9  
                                                             ??_getSerial 00BE  
                                                             i2Lcd_Port@a 0001  
                                                      _telaPrincipal$2566 00C8  
                                                  __size_of_drenarPressao 0030  
                                                             _reiniciaLCD 6CAC  
                                                              _INTCONbits 000FF2  
                                                              i2_I2C_Read 6E0A  
                                                              i2_I2C_Wait 6C1A  
                                                              i2_I2C_Stop 6B78  
                                                                isdigit@c 0082  
                                                                memset@p1 0080  
                                                              i2_BCDtoDEC 6C04  
                                                             DECtoBCD@res 0089  
                                                             DECtoBCD@val 0088  
                                                                intlevel2 0006  
                                                               sprintf@ap 00B5  
                                                               sprintf@pb 00B7  
                                                               sprintf@wh 00A1  
                                                       _ocorrendoIncendio 00F1  
                                                    _criarCaracteresCGRAM 3A90  
                                                               strchr@chr 0082  
                                                        ___lwmod@dividend 0087  
                                                               strchr@ptr 0080  
                                                        ___lldiv@dividend 0080  
                                         i2getDS1307TimeDate@ptrToUserVal 0006  
                                           getDS1307TimeDate@ptrToUserVal 008C  
                                                             ??_salvarLOG 008E  
                                                        ?_acaoTesteBombas 0001  
                                                 __size_of_comunicarTeste 01E2  
                                                        _textoAlternativo 00F3  
                                                             ??_validaRTC 0080  
                                                               strncmp@s1 0086  
                                                               strncmp@s2 0088  
                                                          _dataLoger$1621 00C2  
                                                          _dataLoger$1615 00C0  
                                                          _dataLoger$1626 00C4  
                                                              _TIMER$1670 0055  
                                                              _TIMER$1671 0057  
                                                              _TIMER$1674 0059  
                                                              _TIMER$1675 005B  
                                                              _TIMER$1667 004F  
                                                              _TIMER$1676 005D  
                                                              _TIMER$1668 0051  
                                                              _TIMER$1677 005F  
                                                              _TIMER$1669 0053  
                                                              i2Lcd_Cmd@a 0003  
                                                        aguardaBuffer@str 0093  
                                                       _getDS1307TimeDate 2E4C  
                                                       _setDS1307TimeDate 340E  
                                                                printf@ap 00B5  
                                                                printf@pb 00B7  
                                                            getSerial@end 00BD  
                                                            getSerial@ret 00C3  
                                                            getSerial@str 00BB  
                                                 __end_of_I2C_Master_Init 75EE  
                                                      ?_getDS1307TimeDate 008C  
                                                      ?_setDS1307TimeDate 008C  
                                                      Lcd_Set_Cursor@temp 0087  
                                                              i2_RTC_Init 6DD8  
                                                                sprintf@f 00A3  
                                                 ?_configurarEstacionaria 0001  
                                                        ___lldiv@quotient 0088  
                                                         ___lwmod@divisor 0089  
                                              __size_ofi2_writeEEPROM_ext 003C  
                                                                strlen@cp 0084  
                                                         ___lwmod@counter 008B  
                                                     ??_getDS1307TimeDate 008E  
                                                     ??_setDS1307TimeDate 008E  
                                                       ??_getSinalSIM800L 00CC  
                                                            _sp_principal 00E2  
                                                            ___aldiv@sign 0089  
                                                                strstr@s1 008F  
                                                                strstr@s2 0091  
                                                             ??_writeChar 0082  
                                                              i2_Lcd_Init 7656  
                                                              i2_Lcd_Port 7138  
                                                  __size_of_lerParametros 0126  
                                                   ?_criarCaracteresCGRAM 0001  
                                                        ?_resetParametros 0001  
                                                           _sub_menu_posi 006B  
                                                             _option_posi 00E0  
                                                           _drenarPressao 6D76  
                                         _tempo_limite_teste_estacionaria 00E5  
                                                 i2criarCaracteresCGRAM@i 003C  
                                                 i2criarCaracteresCGRAM@j 003B  
                                                 i2criarCaracteresCGRAM@k 003A  
                                               __end_of_getDS1307TimeDate 2F80  
                                               __end_of_setDS1307TimeDate 3520  
