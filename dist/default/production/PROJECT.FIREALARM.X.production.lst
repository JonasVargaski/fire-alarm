

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Aug 24 20:26:21 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   116                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   117  0000                     
   118                           ; Version 1.45
   119                           ; Generated 16/11/2017 GMT
   120                           ; 
   121                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   122                           ; All rights reserved.
   123                           ; 
   124                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   125                           ; 
   126                           ; Redistribution and use in source and binary forms, with or without modification, are
   127                           ; permitted provided that the following conditions are met:
   128                           ; 
   129                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   130                           ;        conditions and the following disclaimer.
   131                           ; 
   132                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   133                           ;        of conditions and the following disclaimer in the documentation and/or other
   134                           ;        materials provided with the distribution.
   135                           ; 
   136                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   137                           ;        software without specific prior written permission.
   138                           ; 
   139                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   140                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   141                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   142                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   143                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   144                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   145                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   146                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   147                           ; 
   148                           ; 
   149                           ; Code-generator required, PIC18F452 Definitions
   150                           ; 
   151                           ; SFR Addresses
   152  0000                     
   153                           	psect	idataCOMRAM
   154  006E03                     __pidataCOMRAM:
   155                           	opt stack 0
   156                           
   157                           ;initializer for intToFloatStr@F2544
   158  006E03  20                 	db	32
   159  006E04  20                 	db	32
   160  006E05  20                 	db	32
   161  006E06  20                 	db	32
   162                           
   163                           ;initializer for _bt_press
   164  006E07  01                 	db	1
   165                           
   166                           	psect	idataBANK0
   167  006E08                     __pidataBANK0:
   168                           	opt stack 0
   169                           
   170                           ;initializer for _pressao
   171  006E08  0062               	dw	98
   172                           
   173                           ;initializer for _dtl_posicao
   174  006E0A  3C                 	db	60
   175                           
   176                           ;initializer for _status_estacionaria
   177  006E0B  01                 	db	1
   178                           
   179                           ;initializer for _status_principal
   180  006E0C  01                 	db	1
   181                           
   182                           ;initializer for _status_jockey
   183  006E0D  01                 	db	1
   184                           
   185                           ;initializer for _timerVerificarSinal
   186  006E0E  05                 	db	5
   187                           
   188                           ;initializer for _intensidadeSinal
   189  006E0F  20                 	db	32
   190                           
   191                           	psect	mediumconst
   192  007AFA                     __pmediumconst:
   193                           	opt stack 0
   194  007AFA  00                 	db	0
   195  007AFB                     criarCaracteresCGRAM@F2954:
   196                           	opt stack 0
   197  007AFB  00                 	db	0
   198  007AFC  1F                 	db	31
   199  007AFD  0E                 	db	14
   200  007AFE  04                 	db	4
   201  007AFF  04                 	db	4
   202  007B00  04                 	db	4
   203  007B01  04                 	db	4
   204  007B02  04                 	db	4
   205  007B03  00                 	db	0
   206  007B04  00                 	db	0
   207  007B05  00                 	db	0
   208  007B06  00                 	db	0
   209  007B07  00                 	db	0
   210  007B08  10                 	db	16
   211  007B09  10                 	db	16
   212  007B0A  10                 	db	16
   213  007B0B  00                 	db	0
   214  007B0C  00                 	db	0
   215  007B0D  00                 	db	0
   216  007B0E  04                 	db	4
   217  007B0F  04                 	db	4
   218  007B10  14                 	db	20
   219  007B11  14                 	db	20
   220  007B12  14                 	db	20
   221  007B13  00                 	db	0
   222  007B14  01                 	db	1
   223  007B15  01                 	db	1
   224  007B16  05                 	db	5
   225  007B17  05                 	db	5
   226  007B18  15                 	db	21
   227  007B19  15                 	db	21
   228  007B1A  15                 	db	21
   229  007B1B  0A                 	db	10
   230  007B1C  0A                 	db	10
   231  007B1D  1F                 	db	31
   232  007B1E  11                 	db	17
   233  007B1F  11                 	db	17
   234  007B20  0E                 	db	14
   235  007B21  04                 	db	4
   236  007B22  04                 	db	4
   237  007B23  00                 	db	0
   238  007B24  00                 	db	0
   239  007B25  00                 	db	0
   240  007B26  00                 	db	0
   241  007B27  00                 	db	0
   242  007B28  00                 	db	0
   243  007B29  00                 	db	0
   244  007B2A  00                 	db	0
   245  007B2B                     __end_ofcriarCaracteresCGRAM@F2954:
   246                           	opt stack 0
   247  007B2B                     _dpowers:
   248                           	opt stack 0
   249  007B2B  0001               	dw	1
   250  007B2D  000A               	dw	10
   251  007B2F  0064               	dw	100
   252  007B31  03E8               	dw	1000
   253  007B33  2710               	dw	10000
   254  007B35                     __end_of_dpowers:
   255                           	opt stack 0
   256  0000                     _SSPBUF	set	4041
   257  0000                     _SSPSTAT	set	4039
   258  0000                     _SSPADD	set	4040
   259  0000                     _SSPCON2	set	4037
   260  0000                     _SSPCON1	set	4038
   261  0000                     _RCREG	set	4014
   262  0000                     _TMR0L	set	4054
   263  0000                     _TMR0H	set	4055
   264  0000                     _PORTDbits	set	3971
   265  0000                     _PORTCbits	set	3970
   266  0000                     _PORTBbits	set	3969
   267  0000                     _PORTEbits	set	3972
   268  0000                     _TXREG	set	4013
   269  0000                     _ADRESL	set	4035
   270  0000                     _ADRESH	set	4036
   271  0000                     _ADCON0bits	set	4034
   272  0000                     _TRISEbits	set	3990
   273  0000                     _TRISBbits	set	3987
   274  0000                     _PIE1bits	set	3997
   275  0000                     _PIR1bits	set	3998
   276  0000                     _INTCONbits	set	4082
   277  0000                     _SPBRG	set	4015
   278  0000                     _RCSTAbits	set	4011
   279  0000                     _TXSTAbits	set	4012
   280  0000                     _TRISCbits	set	3988
   281  0000                     _TRISDbits	set	3989
   282  0000                     _INTCON	set	4082
   283  0000                     _T0CON	set	4053
   284  0000                     _PORTAbits	set	3968
   285  0000                     _TRISAbits	set	3986
   286  0000                     _ADCON1	set	4033
   287  0000                     _ADCON0	set	4034
   288  0000                     _ACKEN	set	32300
   289  0000                     _ACKDT	set	32301
   290  0000                     _RCEN	set	32299
   291  0000                     _PEN	set	32298
   292  0000                     _RSEN	set	32297
   293  0000                     _SEN	set	32296
   294  0000                     _RCIF	set	31989
   295  0000                     _TMR0IF	set	32658
   296  007B35                     STR_14:
   297  007B35  54                 	db	84	;'T'
   298  007B36  45                 	db	69	;'E'
   299  007B37  43                 	db	67	;'C'
   300  007B38  48                 	db	72	;'H'
   301  007B39  4E                 	db	78	;'N'
   302  007B3A  4F                 	db	79	;'O'
   303  007B3B  57                 	db	87	;'W'
   304  007B3C  20                 	db	32
   305  007B3D  53                 	db	83	;'S'
   306  007B3E  69                 	db	105	;'i'
   307  007B3F  73                 	db	115	;'s'
   308  007B40  74                 	db	116	;'t'
   309  007B41  65                 	db	101	;'e'
   310  007B42  6D                 	db	109	;'m'
   311  007B43  61                 	db	97	;'a'
   312  007B44  73                 	db	115	;'s'
   313  007B45  20                 	db	32
   314  007B46  65                 	db	101	;'e'
   315  007B47  6D                 	db	109	;'m'
   316  007B48  62                 	db	98	;'b'
   317  007B49  61                 	db	97	;'a'
   318  007B4A  72                 	db	114	;'r'
   319  007B4B  63                 	db	99	;'c'
   320  007B4C  61                 	db	97	;'a'
   321  007B4D  64                 	db	100	;'d'
   322  007B4E  6F                 	db	111	;'o'
   323  007B4F  73                 	db	115	;'s'
   324  007B50  0D                 	db	13
   325  007B51  0A                 	db	10
   326  007B52  0D                 	db	13
   327  007B53  0A                 	db	10
   328  007B54  54                 	db	84	;'T'
   329  007B55  65                 	db	101	;'e'
   330  007B56  73                 	db	115	;'s'
   331  007B57  74                 	db	116	;'t'
   332  007B58  65                 	db	101	;'e'
   333  007B59  20                 	db	32
   334  007B5A  6D                 	db	109	;'m'
   335  007B5B  61                 	db	97	;'a'
   336  007B5C  6E                 	db	110	;'n'
   337  007B5D  75                 	db	117	;'u'
   338  007B5E  61                 	db	97	;'a'
   339  007B5F  6C                 	db	108	;'l'
   340  007B60  20                 	db	32
   341  007B61  64                 	db	100	;'d'
   342  007B62  65                 	db	101	;'e'
   343  007B63  20                 	db	32
   344  007B64  63                 	db	99	;'c'
   345  007B65  6F                 	db	111	;'o'
   346  007B66  6D                 	db	109	;'m'
   347  007B67  75                 	db	117	;'u'
   348  007B68  6E                 	db	110	;'n'
   349  007B69  69                 	db	105	;'i'
   350  007B6A  63                 	db	99	;'c'
   351  007B6B  61                 	db	97	;'a'
   352  007B6C  63                 	db	99	;'c'
   353  007B6D  61                 	db	97	;'a'
   354  007B6E  6F                 	db	111	;'o'
   355  007B6F  2E                 	db	46
   356  007B70  0D                 	db	13
   357  007B71  0A                 	db	10
   358  007B72  44                 	db	68	;'D'
   359  007B73  61                 	db	97	;'a'
   360  007B74  74                 	db	116	;'t'
   361  007B75  61                 	db	97	;'a'
   362  007B76  3A                 	db	58	;':'
   363  007B77  20                 	db	32
   364  007B78  25                 	db	37
   365  007B79  30                 	db	48	;'0'
   366  007B7A  32                 	db	50	;'2'
   367  007B7B  64                 	db	100	;'d'
   368  007B7C  2F                 	db	47
   369  007B7D  25                 	db	37
   370  007B7E  30                 	db	48	;'0'
   371  007B7F  32                 	db	50	;'2'
   372  007B80  64                 	db	100	;'d'
   373  007B81  2F                 	db	47
   374  007B82  25                 	db	37
   375  007B83  30                 	db	48	;'0'
   376  007B84  32                 	db	50	;'2'
   377  007B85  64                 	db	100	;'d'
   378  007B86  20                 	db	32
   379  007B87  25                 	db	37
   380  007B88  30                 	db	48	;'0'
   381  007B89  32                 	db	50	;'2'
   382  007B8A  64                 	db	100	;'d'
   383  007B8B  3A                 	db	58	;':'
   384  007B8C  25                 	db	37
   385  007B8D  30                 	db	48	;'0'
   386  007B8E  32                 	db	50	;'2'
   387  007B8F  64                 	db	100	;'d'
   388  007B90  3A                 	db	58	;':'
   389  007B91  25                 	db	37
   390  007B92  30                 	db	48	;'0'
   391  007B93  32                 	db	50	;'2'
   392  007B94  64                 	db	100	;'d'
   393  007B95  0D                 	db	13
   394  007B96  0A                 	db	10
   395  007B97  0D                 	db	13
   396  007B98  0A                 	db	10
   397  007B99  0D                 	db	13
   398  007B9A  0A                 	db	10
   399  007B9B  56                 	db	86	;'V'
   400  007B9C  65                 	db	101	;'e'
   401  007B9D  72                 	db	114	;'r'
   402  007B9E  73                 	db	115	;'s'
   403  007B9F  61                 	db	97	;'a'
   404  007BA0  6F                 	db	111	;'o'
   405  007BA1  20                 	db	32
   406  007BA2  64                 	db	100	;'d'
   407  007BA3  6F                 	db	111	;'o'
   408  007BA4  20                 	db	32
   409  007BA5  73                 	db	115	;'s'
   410  007BA6  69                 	db	105	;'i'
   411  007BA7  73                 	db	115	;'s'
   412  007BA8  74                 	db	116	;'t'
   413  007BA9  65                 	db	101	;'e'
   414  007BAA  6D                 	db	109	;'m'
   415  007BAB  61                 	db	97	;'a'
   416  007BAC  3A                 	db	58	;':'
   417  007BAD  20                 	db	32
   418  007BAE  25                 	db	37
   419  007BAF  73                 	db	115	;'s'
   420  007BB0  0D                 	db	13
   421  007BB1  0A                 	db	10
   422  007BB2  00                 	db	0
   423  007BB3                     STR_26:
   424  007BB3  54                 	db	84	;'T'
   425  007BB4  45                 	db	69	;'E'
   426  007BB5  53                 	db	83	;'S'
   427  007BB6  54                 	db	84	;'T'
   428  007BB7  45                 	db	69	;'E'
   429  007BB8  20                 	db	32
   430  007BB9  44                 	db	68	;'D'
   431  007BBA  45                 	db	69	;'E'
   432  007BBB  20                 	db	32
   433  007BBC  42                 	db	66	;'B'
   434  007BBD  4F                 	db	79	;'O'
   435  007BBE  4D                 	db	77	;'M'
   436  007BBF  42                 	db	66	;'B'
   437  007BC0  41                 	db	65	;'A'
   438  007BC1  53                 	db	83	;'S'
   439  007BC2  20                 	db	32
   440  007BC3  52                 	db	82	;'R'
   441  007BC4  45                 	db	69	;'E'
   442  007BC5  41                 	db	65	;'A'
   443  007BC6  4C                 	db	76	;'L'
   444  007BC7  49                 	db	73	;'I'
   445  007BC8  5A                 	db	90	;'Z'
   446  007BC9  41                 	db	65	;'A'
   447  007BCA  44                 	db	68	;'D'
   448  007BCB  4F                 	db	79	;'O'
   449  007BCC  0D                 	db	13
   450  007BCD  0A                 	db	10
   451  007BCE  45                 	db	69	;'E'
   452  007BCF  4D                 	db	77	;'M'
   453  007BD0  20                 	db	32
   454  007BD1  25                 	db	37
   455  007BD2  30                 	db	48	;'0'
   456  007BD3  32                 	db	50	;'2'
   457  007BD4  64                 	db	100	;'d'
   458  007BD5  3A                 	db	58	;':'
   459  007BD6  25                 	db	37
   460  007BD7  30                 	db	48	;'0'
   461  007BD8  32                 	db	50	;'2'
   462  007BD9  64                 	db	100	;'d'
   463  007BDA  3A                 	db	58	;':'
   464  007BDB  25                 	db	37
   465  007BDC  30                 	db	48	;'0'
   466  007BDD  32                 	db	50	;'2'
   467  007BDE  64                 	db	100	;'d'
   468  007BDF  20                 	db	32
   469  007BE0  25                 	db	37
   470  007BE1  30                 	db	48	;'0'
   471  007BE2  32                 	db	50	;'2'
   472  007BE3  64                 	db	100	;'d'
   473  007BE4  2F                 	db	47
   474  007BE5  25                 	db	37
   475  007BE6  30                 	db	48	;'0'
   476  007BE7  32                 	db	50	;'2'
   477  007BE8  64                 	db	100	;'d'
   478  007BE9  2F                 	db	47
   479  007BEA  25                 	db	37
   480  007BEB  30                 	db	48	;'0'
   481  007BEC  32                 	db	50	;'2'
   482  007BED  64                 	db	100	;'d'
   483  007BEE  0D                 	db	13
   484  007BEF  0A                 	db	10
   485  007BF0  4A                 	db	74	;'J'
   486  007BF1  4F                 	db	79	;'O'
   487  007BF2  43                 	db	67	;'C'
   488  007BF3  4B                 	db	75	;'K'
   489  007BF4  45                 	db	69	;'E'
   490  007BF5  59                 	db	89	;'Y'
   491  007BF6  3A                 	db	58	;':'
   492  007BF7  20                 	db	32
   493  007BF8  25                 	db	37
   494  007BF9  73                 	db	115	;'s'
   495  007BFA  0D                 	db	13
   496  007BFB  0A                 	db	10
   497  007BFC  50                 	db	80	;'P'
   498  007BFD  52                 	db	82	;'R'
   499  007BFE  49                 	db	73	;'I'
   500  007BFF  4E                 	db	78	;'N'
   501  007C00  43                 	db	67	;'C'
   502  007C01  49                 	db	73	;'I'
   503  007C02  50                 	db	80	;'P'
   504  007C03  41                 	db	65	;'A'
   505  007C04  4C                 	db	76	;'L'
   506  007C05  3A                 	db	58	;':'
   507  007C06  20                 	db	32
   508  007C07  25                 	db	37
   509  007C08  73                 	db	115	;'s'
   510  007C09  0D                 	db	13
   511  007C0A  0A                 	db	10
   512  007C0B  43                 	db	67	;'C'
   513  007C0C  4F                 	db	79	;'O'
   514  007C0D  4D                 	db	77	;'M'
   515  007C0E  42                 	db	66	;'B'
   516  007C0F  55                 	db	85	;'U'
   517  007C10  53                 	db	83	;'S'
   518  007C11  54                 	db	84	;'T'
   519  007C12  41                 	db	65	;'A'
   520  007C13  4F                 	db	79	;'O'
   521  007C14  3A                 	db	58	;':'
   522  007C15  20                 	db	32
   523  007C16  25                 	db	37
   524  007C17  73                 	db	115	;'s'
   525  007C18  0D                 	db	13
   526  007C19  0A                 	db	10
   527  007C1A  00                 	db	0
   528  007C1B                     STR_25:
   529  007C1B  44                 	db	68	;'D'
   530  007C1C  49                 	db	73	;'I'
   531  007C1D  53                 	db	83	;'S'
   532  007C1E  50                 	db	80	;'P'
   533  007C1F  41                 	db	65	;'A'
   534  007C20  52                 	db	82	;'R'
   535  007C21  4F                 	db	79	;'O'
   536  007C22  20                 	db	32
   537  007C23  41                 	db	65	;'A'
   538  007C24  4C                 	db	76	;'L'
   539  007C25  41                 	db	65	;'A'
   540  007C26  52                 	db	82	;'R'
   541  007C27  4D                 	db	77	;'M'
   542  007C28  45                 	db	69	;'E'
   543  007C29  20                 	db	32
   544  007C2A  44                 	db	68	;'D'
   545  007C2B  45                 	db	69	;'E'
   546  007C2C  20                 	db	32
   547  007C2D  49                 	db	73	;'I'
   548  007C2E  4E                 	db	78	;'N'
   549  007C2F  43                 	db	67	;'C'
   550  007C30  45                 	db	69	;'E'
   551  007C31  4E                 	db	78	;'N'
   552  007C32  44                 	db	68	;'D'
   553  007C33  49                 	db	73	;'I'
   554  007C34  4F                 	db	79	;'O'
   555  007C35  0D                 	db	13
   556  007C36  0A                 	db	10
   557  007C37  45                 	db	69	;'E'
   558  007C38  4D                 	db	77	;'M'
   559  007C39  20                 	db	32
   560  007C3A  25                 	db	37
   561  007C3B  30                 	db	48	;'0'
   562  007C3C  32                 	db	50	;'2'
   563  007C3D  64                 	db	100	;'d'
   564  007C3E  3A                 	db	58	;':'
   565  007C3F  25                 	db	37
   566  007C40  30                 	db	48	;'0'
   567  007C41  32                 	db	50	;'2'
   568  007C42  64                 	db	100	;'d'
   569  007C43  3A                 	db	58	;':'
   570  007C44  25                 	db	37
   571  007C45  30                 	db	48	;'0'
   572  007C46  32                 	db	50	;'2'
   573  007C47  64                 	db	100	;'d'
   574  007C48  20                 	db	32
   575  007C49  25                 	db	37
   576  007C4A  30                 	db	48	;'0'
   577  007C4B  32                 	db	50	;'2'
   578  007C4C  64                 	db	100	;'d'
   579  007C4D  2F                 	db	47
   580  007C4E  25                 	db	37
   581  007C4F  30                 	db	48	;'0'
   582  007C50  32                 	db	50	;'2'
   583  007C51  64                 	db	100	;'d'
   584  007C52  2F                 	db	47
   585  007C53  25                 	db	37
   586  007C54  30                 	db	48	;'0'
   587  007C55  32                 	db	50	;'2'
   588  007C56  64                 	db	100	;'d'
   589  007C57  0D                 	db	13
   590  007C58  0A                 	db	10
   591  007C59  00                 	db	0
   592  007C5A                     STR_72:
   593  007C5A  44                 	db	68	;'D'
   594  007C5B  61                 	db	97	;'a'
   595  007C5C  74                 	db	116	;'t'
   596  007C5D  61                 	db	97	;'a'
   597  007C5E  3A                 	db	58	;':'
   598  007C5F  20                 	db	32
   599  007C60  25                 	db	37
   600  007C61  30                 	db	48	;'0'
   601  007C62  32                 	db	50	;'2'
   602  007C63  64                 	db	100	;'d'
   603  007C64  2F                 	db	47
   604  007C65  25                 	db	37
   605  007C66  30                 	db	48	;'0'
   606  007C67  32                 	db	50	;'2'
   607  007C68  64                 	db	100	;'d'
   608  007C69  2F                 	db	47
   609  007C6A  25                 	db	37
   610  007C6B  30                 	db	48	;'0'
   611  007C6C  32                 	db	50	;'2'
   612  007C6D  64                 	db	100	;'d'
   613  007C6E  20                 	db	32
   614  007C6F  25                 	db	37
   615  007C70  30                 	db	48	;'0'
   616  007C71  32                 	db	50	;'2'
   617  007C72  64                 	db	100	;'d'
   618  007C73  3A                 	db	58	;':'
   619  007C74  25                 	db	37
   620  007C75  30                 	db	48	;'0'
   621  007C76  32                 	db	50	;'2'
   622  007C77  64                 	db	100	;'d'
   623  007C78  00                 	db	0
   624  007C79                     STR_55:
   625  007C79  20                 	db	32
   626  007C7A  25                 	db	37
   627  007C7B  30                 	db	48	;'0'
   628  007C7C  32                 	db	50	;'2'
   629  007C7D  64                 	db	100	;'d'
   630  007C7E  3A                 	db	58	;':'
   631  007C7F  25                 	db	37
   632  007C80  30                 	db	48	;'0'
   633  007C81  32                 	db	50	;'2'
   634  007C82  64                 	db	100	;'d'
   635  007C83  3A                 	db	58	;':'
   636  007C84  25                 	db	37
   637  007C85  30                 	db	48	;'0'
   638  007C86  32                 	db	50	;'2'
   639  007C87  64                 	db	100	;'d'
   640  007C88  20                 	db	32
   641  007C89  25                 	db	37
   642  007C8A  30                 	db	48	;'0'
   643  007C8B  32                 	db	50	;'2'
   644  007C8C  64                 	db	100	;'d'
   645  007C8D  2F                 	db	47
   646  007C8E  25                 	db	37
   647  007C8F  30                 	db	48	;'0'
   648  007C90  32                 	db	50	;'2'
   649  007C91  64                 	db	100	;'d'
   650  007C92  00                 	db	0
   651  007C93                     STR_66:
   652  007C93  23                 	db	35
   653  007C94  50                 	db	80	;'P'
   654  007C95  72                 	db	114	;'r'
   655  007C96  6F                 	db	111	;'o'
   656  007C97  78                 	db	120	;'x'
   657  007C98  69                 	db	105	;'i'
   658  007C99  6D                 	db	109	;'m'
   659  007C9A  6F                 	db	111	;'o'
   660  007C9B  20                 	db	32
   661  007C9C  65                 	db	101	;'e'
   662  007C9D  6D                 	db	109	;'m'
   663  007C9E  20                 	db	32
   664  007C9F  25                 	db	37
   665  007CA0  32                 	db	50	;'2'
   666  007CA1  64                 	db	100	;'d'
   667  007CA2  20                 	db	32
   668  007CA3  64                 	db	100	;'d'
   669  007CA4  69                 	db	105	;'i'
   670  007CA5  61                 	db	97	;'a'
   671  007CA6  73                 	db	115	;'s'
   672  007CA7  00                 	db	0
   673  007CA8                     STR_37:
   674  007CA8  44                 	db	68	;'D'
   675  007CA9  65                 	db	101	;'e'
   676  007CAA  73                 	db	115	;'s'
   677  007CAB  70                 	db	112	;'p'
   678  007CAC  72                 	db	114	;'r'
   679  007CAD  65                 	db	101	;'e'
   680  007CAE  73                 	db	115	;'s'
   681  007CAF  73                 	db	115	;'s'
   682  007CB0  75                 	db	117	;'u'
   683  007CB1  72                 	db	114	;'r'
   684  007CB2  69                 	db	105	;'i'
   685  007CB3  7A                 	db	122	;'z'
   686  007CB4  61                 	db	97	;'a'
   687  007CB5  6E                 	db	110	;'n'
   688  007CB6  64                 	db	100	;'d'
   689  007CB7  6F                 	db	111	;'o'
   690  007CB8  2E                 	db	46
   691  007CB9  2E                 	db	46
   692  007CBA  2E                 	db	46
   693  007CBB  00                 	db	0
   694  007CBC                     STR_67:
   695  007CBC  49                 	db	73	;'I'
   696  007CBD  4E                 	db	78	;'N'
   697  007CBE  54                 	db	84	;'T'
   698  007CBF  45                 	db	69	;'E'
   699  007CC0  52                 	db	82	;'R'
   700  007CC1  56                 	db	86	;'V'
   701  007CC2  41                 	db	65	;'A'
   702  007CC3  4C                 	db	76	;'L'
   703  007CC4  4F                 	db	79	;'O'
   704  007CC5  3A                 	db	58	;':'
   705  007CC6  20                 	db	32
   706  007CC7  25                 	db	37
   707  007CC8  32                 	db	50	;'2'
   708  007CC9  64                 	db	100	;'d'
   709  007CCA  20                 	db	32
   710  007CCB  64                 	db	100	;'d'
   711  007CCC  69                 	db	105	;'i'
   712  007CCD  61                 	db	97	;'a'
   713  007CCE  73                 	db	115	;'s'
   714  007CCF  00                 	db	0
   715  007CD0                     STR_68:
   716  007CD0  48                 	db	72	;'H'
   717  007CD1  4F                 	db	79	;'O'
   718  007CD2  52                 	db	82	;'R'
   719  007CD3  41                 	db	65	;'A'
   720  007CD4  52                 	db	82	;'R'
   721  007CD5  49                 	db	73	;'I'
   722  007CD6  4F                 	db	79	;'O'
   723  007CD7  3A                 	db	58	;':'
   724  007CD8  20                 	db	32
   725  007CD9  25                 	db	37
   726  007CDA  30                 	db	48	;'0'
   727  007CDB  32                 	db	50	;'2'
   728  007CDC  64                 	db	100	;'d'
   729  007CDD  20                 	db	32
   730  007CDE  68                 	db	104	;'h'
   731  007CDF  6F                 	db	111	;'o'
   732  007CE0  72                 	db	114	;'r'
   733  007CE1  61                 	db	97	;'a'
   734  007CE2  73                 	db	115	;'s'
   735  007CE3  00                 	db	0
   736  007CE4                     STR_84:
   737  007CE4  53                 	db	83	;'S'
   738  007CE5  69                 	db	105	;'i'
   739  007CE6  73                 	db	115	;'s'
   740  007CE7  74                 	db	116	;'t'
   741  007CE8  65                 	db	101	;'e'
   742  007CE9  6D                 	db	109	;'m'
   743  007CEA  61                 	db	97	;'a'
   744  007CEB  73                 	db	115	;'s'
   745  007CEC  20                 	db	32
   746  007CED  65                 	db	101	;'e'
   747  007CEE  6D                 	db	109	;'m'
   748  007CEF  62                 	db	98	;'b'
   749  007CF0  61                 	db	97	;'a'
   750  007CF1  72                 	db	114	;'r'
   751  007CF2  63                 	db	99	;'c'
   752  007CF3  61                 	db	97	;'a'
   753  007CF4  64                 	db	100	;'d'
   754  007CF5  6F                 	db	111	;'o'
   755  007CF6  73                 	db	115	;'s'
   756  007CF7  00                 	db	0
   757  007CF8                     STR_41:
   758  007CF8  42                 	db	66	;'B'
   759  007CF9  6F                 	db	111	;'o'
   760  007CFA  6D                 	db	109	;'m'
   761  007CFB  62                 	db	98	;'b'
   762  007CFC  61                 	db	97	;'a'
   763  007CFD  20                 	db	32
   764  007CFE  50                 	db	80	;'P'
   765  007CFF  72                 	db	114	;'r'
   766  007D00  69                 	db	105	;'i'
   767  007D01  6E                 	db	110	;'n'
   768  007D02  63                 	db	99	;'c'
   769  007D03  69                 	db	105	;'i'
   770  007D04  70                 	db	112	;'p'
   771  007D05  61                 	db	97	;'a'
   772  007D06  6C                 	db	108	;'l'
   773  007D07  2E                 	db	46
   774  007D08  2E                 	db	46
   775  007D09  2E                 	db	46
   776  007D0A  00                 	db	0
   777  007D0B                     STR_42:
   778  007D0B  42                 	db	66	;'B'
   779  007D0C  6F                 	db	111	;'o'
   780  007D0D  6D                 	db	109	;'m'
   781  007D0E  62                 	db	98	;'b'
   782  007D0F  61                 	db	97	;'a'
   783  007D10  20                 	db	32
   784  007D11  43                 	db	67	;'C'
   785  007D12  6F                 	db	111	;'o'
   786  007D13  6D                 	db	109	;'m'
   787  007D14  62                 	db	98	;'b'
   788  007D15  75                 	db	117	;'u'
   789  007D16  73                 	db	115	;'s'
   790  007D17  74                 	db	116	;'t'
   791  007D18  61                 	db	97	;'a'
   792  007D19  6F                 	db	111	;'o'
   793  007D1A  2E                 	db	46
   794  007D1B  2E                 	db	46
   795  007D1C  2E                 	db	46
   796  007D1D  00                 	db	0
   797  007D1E                     STR_98:
   798  007D1E  23                 	db	35
   799  007D1F  68                 	db	104	;'h'
   800  007D20  6F                 	db	111	;'o'
   801  007D21  72                 	db	114	;'r'
   802  007D22  69                 	db	105	;'i'
   803  007D23  6D                 	db	109	;'m'
   804  007D24  65                 	db	101	;'e'
   805  007D25  74                 	db	116	;'t'
   806  007D26  72                 	db	114	;'r'
   807  007D27  6F                 	db	111	;'o'
   808  007D28  3A                 	db	58	;':'
   809  007D29  25                 	db	37
   810  007D2A  35                 	db	53	;'5'
   811  007D2B  64                 	db	100	;'d'
   812  007D2C  20                 	db	32
   813  007D2D  6D                 	db	109	;'m'
   814  007D2E  69                 	db	105	;'i'
   815  007D2F  6E                 	db	110	;'n'
   816  007D30  00                 	db	0
   817  007D31                     STR_57:
   818  007D31  2A                 	db	42
   819  007D32  66                 	db	102	;'f'
   820  007D33  61                 	db	97	;'a'
   821  007D34  6C                 	db	108	;'l'
   822  007D35  68                 	db	104	;'h'
   823  007D36  61                 	db	97	;'a'
   824  007D37  20                 	db	32
   825  007D38  76                 	db	118	;'v'
   826  007D39  61                 	db	97	;'a'
   827  007D3A  6C                 	db	108	;'l'
   828  007D3B  2E                 	db	46
   829  007D3C  20                 	db	32
   830  007D3D  6C                 	db	108	;'l'
   831  007D3E  61                 	db	97	;'a'
   832  007D3F  64                 	db	100	;'d'
   833  007D40  72                 	db	114	;'r'
   834  007D41  61                 	db	97	;'a'
   835  007D42  6F                 	db	111	;'o'
   836  007D43  00                 	db	0
   837  007D44                     STR_93:
   838  007D44  43                 	db	67	;'C'
   839  007D45  6F                 	db	111	;'o'
   840  007D46  6E                 	db	110	;'n'
   841  007D47  66                 	db	102	;'f'
   842  007D48  69                 	db	105	;'i'
   843  007D49  67                 	db	103	;'g'
   844  007D4A  75                 	db	117	;'u'
   845  007D4B  72                 	db	114	;'r'
   846  007D4C  61                 	db	97	;'a'
   847  007D4D  63                 	db	99	;'c'
   848  007D4E  61                 	db	97	;'a'
   849  007D4F  6F                 	db	111	;'o'
   850  007D50  20                 	db	32
   851  007D51  74                 	db	116	;'t'
   852  007D52  65                 	db	101	;'e'
   853  007D53  6D                 	db	109	;'m'
   854  007D54  70                 	db	112	;'p'
   855  007D55  6F                 	db	111	;'o'
   856  007D56  00                 	db	0
   857  007D57                     STR_59:
   858  007D57  45                 	db	69	;'E'
   859  007D58  72                 	db	114	;'r'
   860  007D59  72                 	db	114	;'r'
   861  007D5A  6F                 	db	111	;'o'
   862  007D5B  20                 	db	32
   863  007D5C  6E                 	db	110	;'n'
   864  007D5D  6F                 	db	111	;'o'
   865  007D5E  20                 	db	32
   866  007D5F  54                 	db	84	;'T'
   867  007D60  72                 	db	114	;'r'
   868  007D61  61                 	db	97	;'a'
   869  007D62  6E                 	db	110	;'n'
   870  007D63  73                 	db	115	;'s'
   871  007D64  64                 	db	100	;'d'
   872  007D65  75                 	db	117	;'u'
   873  007D66  74                 	db	116	;'t'
   874  007D67  6F                 	db	111	;'o'
   875  007D68  72                 	db	114	;'r'
   876  007D69  00                 	db	0
   877  007D6A                     STR_61:
   878  007D6A  50                 	db	80	;'P'
   879  007D6B  72                 	db	114	;'r'
   880  007D6C  65                 	db	101	;'e'
   881  007D6D  73                 	db	115	;'s'
   882  007D6E  73                 	db	115	;'s'
   883  007D6F  20                 	db	32
   884  007D70  45                 	db	69	;'E'
   885  007D71  53                 	db	83	;'S'
   886  007D72  43                 	db	67	;'C'
   887  007D73  20                 	db	32
   888  007D74  70                 	db	112	;'p'
   889  007D75  2F                 	db	47
   890  007D76  20                 	db	32
   891  007D77  52                 	db	82	;'R'
   892  007D78  65                 	db	101	;'e'
   893  007D79  73                 	db	115	;'s'
   894  007D7A  65                 	db	101	;'e'
   895  007D7B  74                 	db	116	;'t'
   896  007D7C  00                 	db	0
   897  007D7D                     STR_12:
   898  007D7D  41                 	db	65	;'A'
   899  007D7E  54                 	db	84	;'T'
   900  007D7F  2B                 	db	43
   901  007D80  43                 	db	67	;'C'
   902  007D81  4D                 	db	77	;'M'
   903  007D82  47                 	db	71	;'G'
   904  007D83  53                 	db	83	;'S'
   905  007D84  3D                 	db	61	;'='
   906  007D85  22                 	db	34
   907  007D86  2B                 	db	43
   908  007D87  35                 	db	53	;'5'
   909  007D88  35                 	db	53	;'5'
   910  007D89  25                 	db	37
   911  007D8A  73                 	db	115	;'s'
   912  007D8B  22                 	db	34
   913  007D8C  0D                 	db	13
   914  007D8D  0A                 	db	10
   915  007D8E  00                 	db	0
   916  007D8F                     STR_109:
   917  007D8F  50                 	db	80	;'P'
   918  007D90  41                 	db	65	;'A'
   919  007D91  52                 	db	82	;'R'
   920  007D92  54                 	db	84	;'T'
   921  007D93  49                 	db	73	;'I'
   922  007D94  44                 	db	68	;'D'
   923  007D95  41                 	db	65	;'A'
   924  007D96  20                 	db	32
   925  007D97  43                 	db	67	;'C'
   926  007D98  4F                 	db	79	;'O'
   927  007D99  4D                 	db	77	;'M'
   928  007D9A  42                 	db	66	;'B'
   929  007D9B  55                 	db	85	;'U'
   930  007D9C  53                 	db	83	;'S'
   931  007D9D  54                 	db	84	;'T'
   932  007D9E  41                 	db	65	;'A'
   933  007D9F  4F                 	db	79	;'O'
   934  007DA0  00                 	db	0
   935  007DA1                     STR_111:
   936  007DA1  50                 	db	80	;'P'
   937  007DA2  45                 	db	69	;'E'
   938  007DA3  52                 	db	82	;'R'
   939  007DA4  49                 	db	73	;'I'
   940  007DA5  4F                 	db	79	;'O'
   941  007DA6  44                 	db	68	;'D'
   942  007DA7  4F                 	db	79	;'O'
   943  007DA8  20                 	db	32
   944  007DA9  44                 	db	68	;'D'
   945  007DAA  45                 	db	69	;'E'
   946  007DAB  20                 	db	32
   947  007DAC  54                 	db	84	;'T'
   948  007DAD  45                 	db	69	;'E'
   949  007DAE  53                 	db	83	;'S'
   950  007DAF  54                 	db	84	;'T'
   951  007DB0  45                 	db	69	;'E'
   952  007DB1  53                 	db	83	;'S'
   953  007DB2  00                 	db	0
   954  007DB3                     STR_56:
   955  007DB3  2A                 	db	42
   956  007DB4  66                 	db	102	;'f'
   957  007DB5  61                 	db	97	;'a'
   958  007DB6  6C                 	db	108	;'l'
   959  007DB7  74                 	db	116	;'t'
   960  007DB8  61                 	db	97	;'a'
   961  007DB9  20                 	db	32
   962  007DBA  64                 	db	100	;'d'
   963  007DBB  65                 	db	101	;'e'
   964  007DBC  20                 	db	32
   965  007DBD  65                 	db	101	;'e'
   966  007DBE  6E                 	db	110	;'n'
   967  007DBF  65                 	db	101	;'e'
   968  007DC0  72                 	db	114	;'r'
   969  007DC1  67                 	db	103	;'g'
   970  007DC2  69                 	db	105	;'i'
   971  007DC3  61                 	db	97	;'a'
   972  007DC4  00                 	db	0
   973  007DC5                     STR_44:
   974  007DC5  54                 	db	84	;'T'
   975  007DC6  65                 	db	101	;'e'
   976  007DC7  73                 	db	115	;'s'
   977  007DC8  74                 	db	116	;'t'
   978  007DC9  65                 	db	101	;'e'
   979  007DCA  20                 	db	32
   980  007DCB  43                 	db	67	;'C'
   981  007DCC  6F                 	db	111	;'o'
   982  007DCD  6E                 	db	110	;'n'
   983  007DCE  63                 	db	99	;'c'
   984  007DCF  6C                 	db	108	;'l'
   985  007DD0  75                 	db	117	;'u'
   986  007DD1  69                 	db	105	;'i'
   987  007DD2  64                 	db	100	;'d'
   988  007DD3  6F                 	db	111	;'o'
   989  007DD4  21                 	db	33
   990  007DD5  00                 	db	0
   991  007DD6                     STR_85:
   992  007DD6  20                 	db	32
   993  007DD7  20                 	db	32
   994  007DD8  20                 	db	32
   995  007DD9  34                 	db	52	;'4'
   996  007DDA  38                 	db	56	;'8'
   997  007DDB  20                 	db	32
   998  007DDC  39                 	db	57	;'9'
   999  007DDD  39                 	db	57	;'9'
  1000  007DDE  39                 	db	57	;'9'
  1001  007DDF  30                 	db	48	;'0'
  1002  007DE0  36                 	db	54	;'6'
  1003  007DE1  2D                 	db	45
  1004  007DE2  35                 	db	53	;'5'
  1005  007DE3  36                 	db	54	;'6'
  1006  007DE4  35                 	db	53	;'5'
  1007  007DE5  31                 	db	49	;'1'
  1008  007DE6  00                 	db	0
  1009  007DE7                     STR_92:
  1010  007DE7  45                 	db	69	;'E'
  1011  007DE8  6E                 	db	110	;'n'
  1012  007DE9  76                 	db	118	;'v'
  1013  007DEA  69                 	db	105	;'i'
  1014  007DEB  61                 	db	97	;'a'
  1015  007DEC  72                 	db	114	;'r'
  1016  007DED  20                 	db	32
  1017  007DEE  73                 	db	115	;'s'
  1018  007DEF  6D                 	db	109	;'m'
  1019  007DF0  73                 	db	115	;'s'
  1020  007DF1  20                 	db	32
  1021  007DF2  74                 	db	116	;'t'
  1022  007DF3  65                 	db	101	;'e'
  1023  007DF4  73                 	db	115	;'s'
  1024  007DF5  74                 	db	116	;'t'
  1025  007DF6  65                 	db	101	;'e'
  1026  007DF7  00                 	db	0
  1027  007DF8                     STR_54:
  1028  007DF8  65                 	db	101	;'e'
  1029  007DF9  6E                 	db	110	;'n'
  1030  007DFA  76                 	db	118	;'v'
  1031  007DFB  69                 	db	105	;'i'
  1032  007DFC  61                 	db	97	;'a'
  1033  007DFD  6E                 	db	110	;'n'
  1034  007DFE  64                 	db	100	;'d'
  1035  007DFF  6F                 	db	111	;'o'
  1036  007E00  20                 	db	32
  1037  007E01  53                 	db	83	;'S'
  1038  007E02  4D                 	db	77	;'M'
  1039  007E03  53                 	db	83	;'S'
  1040  007E04  2E                 	db	46
  1041  007E05  2E                 	db	46
  1042  007E06  2E                 	db	46
  1043  007E07  00                 	db	0
  1044  007E08                     STR_43:
  1045  007E08  42                 	db	66	;'B'
  1046  007E09  6F                 	db	111	;'o'
  1047  007E0A  6D                 	db	109	;'m'
  1048  007E0B  62                 	db	98	;'b'
  1049  007E0C  61                 	db	97	;'a'
  1050  007E0D  20                 	db	32
  1051  007E0E  4C                 	db	76	;'L'
  1052  007E0F  69                 	db	105	;'i'
  1053  007E10  67                 	db	103	;'g'
  1054  007E11  61                 	db	97	;'a'
  1055  007E12  64                 	db	100	;'d'
  1056  007E13  61                 	db	97	;'a'
  1057  007E14  2E                 	db	46
  1058  007E15  2E                 	db	46
  1059  007E16  2E                 	db	46
  1060  007E17  00                 	db	0
  1061  007E18                     STR_40:
  1062  007E18  42                 	db	66	;'B'
  1063  007E19  6F                 	db	111	;'o'
  1064  007E1A  6D                 	db	109	;'m'
  1065  007E1B  62                 	db	98	;'b'
  1066  007E1C  61                 	db	97	;'a'
  1067  007E1D  20                 	db	32
  1068  007E1E  4A                 	db	74	;'J'
  1069  007E1F  6F                 	db	111	;'o'
  1070  007E20  63                 	db	99	;'c'
  1071  007E21  6B                 	db	107	;'k'
  1072  007E22  65                 	db	101	;'e'
  1073  007E23  79                 	db	121	;'y'
  1074  007E24  2E                 	db	46
  1075  007E25  2E                 	db	46
  1076  007E26  2E                 	db	46
  1077  007E27  00                 	db	0
  1078  007E28                     STR_108:
  1079  007E28  50                 	db	80	;'P'
  1080  007E29  52                 	db	82	;'R'
  1081  007E2A  45                 	db	69	;'E'
  1082  007E2B  53                 	db	83	;'S'
  1083  007E2C  53                 	db	83	;'S'
  1084  007E2D  41                 	db	65	;'A'
  1085  007E2E  4F                 	db	79	;'O'
  1086  007E2F  20                 	db	32
  1087  007E30  44                 	db	68	;'D'
  1088  007E31  41                 	db	65	;'A'
  1089  007E32  20                 	db	32
  1090  007E33  52                 	db	82	;'R'
  1091  007E34  45                 	db	69	;'E'
  1092  007E35  44                 	db	68	;'D'
  1093  007E36  45                 	db	69	;'E'
  1094  007E37  00                 	db	0
  1095  007E38                     STR_39:
  1096  007E38  50                 	db	80	;'P'
  1097  007E39  72                 	db	114	;'r'
  1098  007E3A  65                 	db	101	;'e'
  1099  007E3B  73                 	db	115	;'s'
  1100  007E3C  73                 	db	115	;'s'
  1101  007E3D  61                 	db	97	;'a'
  1102  007E3E  6F                 	db	111	;'o'
  1103  007E3F  20                 	db	32
  1104  007E40  25                 	db	37
  1105  007E41  73                 	db	115	;'s'
  1106  007E42  20                 	db	32
  1107  007E43  42                 	db	66	;'B'
  1108  007E44  41                 	db	65	;'A'
  1109  007E45  52                 	db	82	;'R'
  1110  007E46  00                 	db	0
  1111  007E47                     STR_63:
  1112  007E47  25                 	db	37
  1113  007E48  30                 	db	48	;'0'
  1114  007E49  32                 	db	50	;'2'
  1115  007E4A  64                 	db	100	;'d'
  1116  007E4B  2F                 	db	47
  1117  007E4C  25                 	db	37
  1118  007E4D  30                 	db	48	;'0'
  1119  007E4E  32                 	db	50	;'2'
  1120  007E4F  64                 	db	100	;'d'
  1121  007E50  2F                 	db	47
  1122  007E51  25                 	db	37
  1123  007E52  30                 	db	48	;'0'
  1124  007E53  32                 	db	50	;'2'
  1125  007E54  64                 	db	100	;'d'
  1126  007E55  00                 	db	0
  1127  007E56                     STR_65:
  1128  007E56  25                 	db	37
  1129  007E57  30                 	db	48	;'0'
  1130  007E58  32                 	db	50	;'2'
  1131  007E59  64                 	db	100	;'d'
  1132  007E5A  3A                 	db	58	;':'
  1133  007E5B  25                 	db	37
  1134  007E5C  30                 	db	48	;'0'
  1135  007E5D  32                 	db	50	;'2'
  1136  007E5E  64                 	db	100	;'d'
  1137  007E5F  3A                 	db	58	;':'
  1138  007E60  25                 	db	37
  1139  007E61  30                 	db	48	;'0'
  1140  007E62  32                 	db	50	;'2'
  1141  007E63  64                 	db	100	;'d'
  1142  007E64  00                 	db	0
  1143  007E65                     STR_48:
  1144  007E65  50                 	db	80	;'P'
  1145  007E66  52                 	db	82	;'R'
  1146  007E67  49                 	db	73	;'I'
  1147  007E68  4E                 	db	78	;'N'
  1148  007E69  43                 	db	67	;'C'
  1149  007E6A  49                 	db	73	;'I'
  1150  007E6B  50                 	db	80	;'P'
  1151  007E6C  41                 	db	65	;'A'
  1152  007E6D  4C                 	db	76	;'L'
  1153  007E6E  20                 	db	32
  1154  007E6F  3A                 	db	58	;':'
  1155  007E70  20                 	db	32
  1156  007E71  25                 	db	37
  1157  007E72  73                 	db	115	;'s'
  1158  007E73  00                 	db	0
  1159  007E74                     STR_51:
  1160  007E74  43                 	db	67	;'C'
  1161  007E75  4F                 	db	79	;'O'
  1162  007E76  4D                 	db	77	;'M'
  1163  007E77  42                 	db	66	;'B'
  1164  007E78  55                 	db	85	;'U'
  1165  007E79  53                 	db	83	;'S'
  1166  007E7A  54                 	db	84	;'T'
  1167  007E7B  41                 	db	65	;'A'
  1168  007E7C  4F                 	db	79	;'O'
  1169  007E7D  20                 	db	32
  1170  007E7E  3A                 	db	58	;':'
  1171  007E7F  20                 	db	32
  1172  007E80  25                 	db	37
  1173  007E81  73                 	db	115	;'s'
  1174  007E82  00                 	db	0
  1175  007E83                     STR_38:
  1176  007E83  41                 	db	65	;'A'
  1177  007E84  67                 	db	103	;'g'
  1178  007E85  75                 	db	117	;'u'
  1179  007E86  61                 	db	97	;'a'
  1180  007E87  72                 	db	114	;'r'
  1181  007E88  64                 	db	100	;'d'
  1182  007E89  65                 	db	101	;'e'
  1183  007E8A  2E                 	db	46
  1184  007E8B  2E                 	db	46
  1185  007E8C  2E                 	db	46
  1186  007E8D  20                 	db	32
  1187  007E8E  25                 	db	37
  1188  007E8F  64                 	db	100	;'d'
  1189  007E90  73                 	db	115	;'s'
  1190  007E91  00                 	db	0
  1191  007E92                     STR_114:
  1192  007E92  49                 	db	73	;'I'
  1193  007E93  6E                 	db	110	;'n'
  1194  007E94  69                 	db	105	;'i'
  1195  007E95  63                 	db	99	;'c'
  1196  007E96  69                 	db	105	;'i'
  1197  007E97  61                 	db	97	;'a'
  1198  007E98  72                 	db	114	;'r'
  1199  007E99  20                 	db	32
  1200  007E9A  54                 	db	84	;'T'
  1201  007E9B  65                 	db	101	;'e'
  1202  007E9C  73                 	db	115	;'s'
  1203  007E9D  74                 	db	116	;'t'
  1204  007E9E  65                 	db	101	;'e'
  1205  007E9F  73                 	db	115	;'s'
  1206  007EA0  00                 	db	0
  1207  007EA1                     STR_94:
  1208  007EA1  4D                 	db	77	;'M'
  1209  007EA2  61                 	db	97	;'a'
  1210  007EA3  78                 	db	120	;'x'
  1211  007EA4  2E                 	db	46
  1212  007EA5  20                 	db	32
  1213  007EA6  50                 	db	80	;'P'
  1214  007EA7  41                 	db	65	;'A'
  1215  007EA8  52                 	db	82	;'R'
  1216  007EA9  54                 	db	84	;'T'
  1217  007EAA  49                 	db	73	;'I'
  1218  007EAB  44                 	db	68	;'D'
  1219  007EAC  41                 	db	65	;'A'
  1220  007EAD  3A                 	db	58	;':'
  1221  007EAE  00                 	db	0
  1222  007EAF                     STR_77:
  1223  007EAF  50                 	db	80	;'P'
  1224  007EB0  72                 	db	114	;'r'
  1225  007EB1  69                 	db	105	;'i'
  1226  007EB2  6E                 	db	110	;'n'
  1227  007EB3  63                 	db	99	;'c'
  1228  007EB4  69                 	db	105	;'i'
  1229  007EB5  70                 	db	112	;'p'
  1230  007EB6  61                 	db	97	;'a'
  1231  007EB7  6C                 	db	108	;'l'
  1232  007EB8  3A                 	db	58	;':'
  1233  007EB9  20                 	db	32
  1234  007EBA  25                 	db	37
  1235  007EBB  73                 	db	115	;'s'
  1236  007EBC  00                 	db	0
  1237  007EBD                     STR_80:
  1238  007EBD  43                 	db	67	;'C'
  1239  007EBE  6F                 	db	111	;'o'
  1240  007EBF  6D                 	db	109	;'m'
  1241  007EC0  62                 	db	98	;'b'
  1242  007EC1  75                 	db	117	;'u'
  1243  007EC2  73                 	db	115	;'s'
  1244  007EC3  74                 	db	116	;'t'
  1245  007EC4  61                 	db	97	;'a'
  1246  007EC5  6F                 	db	111	;'o'
  1247  007EC6  3A                 	db	58	;':'
  1248  007EC7  20                 	db	32
  1249  007EC8  25                 	db	37
  1250  007EC9  73                 	db	115	;'s'
  1251  007ECA  00                 	db	0
  1252  007ECB                     STR_91:
  1253  007ECB  20                 	db	32
  1254  007ECC  61                 	db	97	;'a'
  1255  007ECD  67                 	db	103	;'g'
  1256  007ECE  75                 	db	117	;'u'
  1257  007ECF  61                 	db	97	;'a'
  1258  007ED0  72                 	db	114	;'r'
  1259  007ED1  64                 	db	100	;'d'
  1260  007ED2  65                 	db	101	;'e'
  1261  007ED3  2E                 	db	46
  1262  007ED4  2E                 	db	46
  1263  007ED5  2E                 	db	46
  1264  007ED6  20                 	db	32
  1265  007ED7  00                 	db	0
  1266  007ED8                     STR_10:
  1267  007ED8  41                 	db	65	;'A'
  1268  007ED9  54                 	db	84	;'T'
  1269  007EDA  2B                 	db	43
  1270  007EDB  43                 	db	67	;'C'
  1271  007EDC  4D                 	db	77	;'M'
  1272  007EDD  47                 	db	71	;'G'
  1273  007EDE  46                 	db	70	;'F'
  1274  007EDF  3D                 	db	61	;'='
  1275  007EE0  31                 	db	49	;'1'
  1276  007EE1  0D                 	db	13
  1277  007EE2  0A                 	db	10
  1278  007EE3  00                 	db	0
  1279  007EE4                     STR_15:
  1280  007EE4  41                 	db	65	;'A'
  1281  007EE5  75                 	db	117	;'u'
  1282  007EE6  67                 	db	103	;'g'
  1283  007EE7  20                 	db	32
  1284  007EE8  32                 	db	50	;'2'
  1285  007EE9  34                 	db	52	;'4'
  1286  007EEA  20                 	db	32
  1287  007EEB  32                 	db	50	;'2'
  1288  007EEC  30                 	db	48	;'0'
  1289  007EED  31                 	db	49	;'1'
  1290  007EEE  39                 	db	57	;'9'
  1291  007EEF  00                 	db	0
  1292  007EF0                     STR_96:
  1293  007EF0  4D                 	db	77	;'M'
  1294  007EF1  61                 	db	97	;'a'
  1295  007EF2  78                 	db	120	;'x'
  1296  007EF3  2E                 	db	46
  1297  007EF4  20                 	db	32
  1298  007EF5  54                 	db	84	;'T'
  1299  007EF6  45                 	db	69	;'E'
  1300  007EF7  53                 	db	83	;'S'
  1301  007EF8  54                 	db	84	;'T'
  1302  007EF9  45                 	db	69	;'E'
  1303  007EFA  3A                 	db	58	;':'
  1304  007EFB  00                 	db	0
  1305  007EFC                     STR_113:
  1306  007EFC  49                 	db	73	;'I'
  1307  007EFD  4E                 	db	78	;'N'
  1308  007EFE  46                 	db	70	;'F'
  1309  007EFF  4F                 	db	79	;'O'
  1310  007F00  20                 	db	32
  1311  007F01  56                 	db	86	;'V'
  1312  007F02  45                 	db	69	;'E'
  1313  007F03  52                 	db	82	;'R'
  1314  007F04  53                 	db	83	;'S'
  1315  007F05  41                 	db	65	;'A'
  1316  007F06  4F                 	db	79	;'O'
  1317  007F07  00                 	db	0
  1318  007F08                     STR_86:
  1319  007F08  76                 	db	118	;'v'
  1320  007F09  65                 	db	101	;'e'
  1321  007F0A  72                 	db	114	;'r'
  1322  007F0B  73                 	db	115	;'s'
  1323  007F0C  61                 	db	97	;'a'
  1324  007F0D  6F                 	db	111	;'o'
  1325  007F0E  20                 	db	32
  1326  007F0F  2D                 	db	45
  1327  007F10  20                 	db	32
  1328  007F11  25                 	db	37
  1329  007F12  73                 	db	115	;'s'
  1330  007F13  00                 	db	0
  1331  007F14                     STR_35:
  1332  007F14  41                 	db	65	;'A'
  1333  007F15  54                 	db	84	;'T'
  1334  007F16  44                 	db	68	;'D'
  1335  007F17  20                 	db	32
  1336  007F18  30                 	db	48	;'0'
  1337  007F19  25                 	db	37
  1338  007F1A  73                 	db	115	;'s'
  1339  007F1B  3B                 	db	59	;';'
  1340  007F1C  0D                 	db	13
  1341  007F1D  0A                 	db	10
  1342  007F1E  00                 	db	0
  1343  007F1F  74                 	db	116	;'t'
  1344  007F20  65                 	db	101	;'e'
  1345  007F21  74                 	db	116	;'t'
  1346  007F22  61                 	db	97	;'a'
  1347  007F23  70                 	db	112	;'p'
  1348  007F24  61                 	db	97	;'a'
  1349  007F25  20                 	db	32
  1350  007F26  25                 	db	37
  1351  007F27  64                 	db	100	;'d'
  1352  007F28  20                 	db	32
  1353  007F29  00                 	db	0
  1354  007F2A                     STR_76:
  1355  007F2A  23                 	db	35
  1356  007F2B  25                 	db	37
  1357  007F2C  30                 	db	48	;'0'
  1358  007F2D  32                 	db	50	;'2'
  1359  007F2E  64                 	db	100	;'d'
  1360  007F2F  2F                 	db	47
  1361  007F30  25                 	db	37
  1362  007F31  30                 	db	48	;'0'
  1363  007F32  32                 	db	50	;'2'
  1364  007F33  64                 	db	100	;'d'
  1365  007F34  00                 	db	0
  1366  007F35                     STR_99:
  1367  007F35  47                 	db	71	;'G'
  1368  007F36  45                 	db	69	;'E'
  1369  007F37  52                 	db	82	;'R'
  1370  007F38  41                 	db	65	;'A'
  1371  007F39  4C                 	db	76	;'L'
  1372  007F3A  20                 	db	32
  1373  007F3B  3A                 	db	58	;':'
  1374  007F3C  20                 	db	32
  1375  007F3D  25                 	db	37
  1376  007F3E  73                 	db	115	;'s'
  1377  007F3F  00                 	db	0
  1378  007F40                     STR_45:
  1379  007F40  4A                 	db	74	;'J'
  1380  007F41  4F                 	db	79	;'O'
  1381  007F42  4B                 	db	75	;'K'
  1382  007F43  45                 	db	69	;'E'
  1383  007F44  59                 	db	89	;'Y'
  1384  007F45  20                 	db	32
  1385  007F46  3A                 	db	58	;':'
  1386  007F47  20                 	db	32
  1387  007F48  25                 	db	37
  1388  007F49  73                 	db	115	;'s'
  1389  007F4A  00                 	db	0
  1390  007F4B                     STR_69:
  1391  007F4B  41                 	db	65	;'A'
  1392  007F4C  54                 	db	84	;'T'
  1393  007F4D  49                 	db	73	;'I'
  1394  007F4E  56                 	db	86	;'V'
  1395  007F4F  41                 	db	65	;'A'
  1396  007F50  52                 	db	82	;'R'
  1397  007F51  3A                 	db	58	;':'
  1398  007F52  20                 	db	32
  1399  007F53  25                 	db	37
  1400  007F54  73                 	db	115	;'s'
  1401  007F55  00                 	db	0
  1402  007F56                     STR_107:
  1403  007F56  44                 	db	68	;'D'
  1404  007F57  41                 	db	65	;'A'
  1405  007F58  54                 	db	84	;'T'
  1406  007F59  41                 	db	65	;'A'
  1407  007F5A  2F                 	db	47
  1408  007F5B  48                 	db	72	;'H'
  1409  007F5C  4F                 	db	79	;'O'
  1410  007F5D  52                 	db	82	;'R'
  1411  007F5E  41                 	db	65	;'A'
  1412  007F5F  00                 	db	0
  1413  007F60                     STR_112:
  1414  007F60  44                 	db	68	;'D'
  1415  007F61  41                 	db	65	;'A'
  1416  007F62  54                 	db	84	;'T'
  1417  007F63  41                 	db	65	;'A'
  1418  007F64  4C                 	db	76	;'L'
  1419  007F65  4F                 	db	79	;'O'
  1420  007F66  47                 	db	71	;'G'
  1421  007F67  45                 	db	69	;'E'
  1422  007F68  52                 	db	82	;'R'
  1423  007F69  00                 	db	0
  1424  007F6A                     STR_110:
  1425  007F6A  54                 	db	84	;'T'
  1426  007F6B  45                 	db	69	;'E'
  1427  007F6C  4C                 	db	76	;'L'
  1428  007F6D  45                 	db	69	;'E'
  1429  007F6E  46                 	db	70	;'F'
  1430  007F6F  4F                 	db	79	;'O'
  1431  007F70  4E                 	db	78	;'N'
  1432  007F71  45                 	db	69	;'E'
  1433  007F72  53                 	db	83	;'S'
  1434  007F73  00                 	db	0
  1435  007F74  74                 	db	116	;'t'
  1436  007F75  73                 	db	115	;'s'
  1437  007F76  69                 	db	105	;'i'
  1438  007F77  6E                 	db	110	;'n'
  1439  007F78  61                 	db	97	;'a'
  1440  007F79  6C                 	db	108	;'l'
  1441  007F7A  20                 	db	32
  1442  007F7B  25                 	db	37
  1443  007F7C  64                 	db	100	;'d'
  1444  007F7D  00                 	db	0
  1445  007F7E                     STR_73:
  1446  007F7E  4A                 	db	74	;'J'
  1447  007F7F  6F                 	db	111	;'o'
  1448  007F80  6B                 	db	107	;'k'
  1449  007F81  65                 	db	101	;'e'
  1450  007F82  79                 	db	121	;'y'
  1451  007F83  3A                 	db	58	;':'
  1452  007F84  20                 	db	32
  1453  007F85  25                 	db	37
  1454  007F86  73                 	db	115	;'s'
  1455  007F87  00                 	db	0
  1456  007F88                     STR_3:
  1457  007F88  41                 	db	65	;'A'
  1458  007F89  54                 	db	84	;'T'
  1459  007F8A  2B                 	db	43
  1460  007F8B  43                 	db	67	;'C'
  1461  007F8C  53                 	db	83	;'S'
  1462  007F8D  51                 	db	81	;'Q'
  1463  007F8E  0D                 	db	13
  1464  007F8F  0A                 	db	10
  1465  007F90  00                 	db	0
  1466  007F91  65                 	db	101	;'e'
  1467  007F92  74                 	db	116	;'t'
  1468  007F93  61                 	db	97	;'a'
  1469  007F94  70                 	db	112	;'p'
  1470  007F95  61                 	db	97	;'a'
  1471  007F96  20                 	db	32
  1472  007F97  25                 	db	37
  1473  007F98  64                 	db	100	;'d'
  1474  007F99  00                 	db	0
  1475  007F9A                     STR_83:
  1476  007F9A  54                 	db	84	;'T'
  1477  007F9B  45                 	db	69	;'E'
  1478  007F9C  43                 	db	67	;'C'
  1479  007F9D  48                 	db	72	;'H'
  1480  007F9E  4E                 	db	78	;'N'
  1481  007F9F  4F                 	db	79	;'O'
  1482  007FA0  57                 	db	87	;'W'
  1483  007FA1  00                 	db	0
  1484  007FA2                     STR_115:
  1485  007FA2  28                 	db	40
  1486  007FA3  6E                 	db	110	;'n'
  1487  007FA4  75                 	db	117	;'u'
  1488  007FA5  6C                 	db	108	;'l'
  1489  007FA6  6C                 	db	108	;'l'
  1490  007FA7  29                 	db	41
  1491  007FA8  00                 	db	0
  1492  007FA9                     STR_21:
  1493  007FA9  41                 	db	65	;'A'
  1494  007FAA  54                 	db	84	;'T'
  1495  007FAB  48                 	db	72	;'H'
  1496  007FAC  30                 	db	48	;'0'
  1497  007FAD  0D                 	db	13
  1498  007FAE  0A                 	db	10
  1499  007FAF  00                 	db	0
  1500  007FB0                     STR_6:
  1501  007FB0  2B                 	db	43
  1502  007FB1  43                 	db	67	;'C'
  1503  007FB2  53                 	db	83	;'S'
  1504  007FB3  51                 	db	81	;'Q'
  1505  007FB4  3A                 	db	58	;':'
  1506  007FB5  20                 	db	32
  1507  007FB6  00                 	db	0
  1508  007FB7                     STR_88:
  1509  007FB7  54                 	db	84	;'T'
  1510  007FB8  31                 	db	49	;'1'
  1511  007FB9  3A                 	db	58	;':'
  1512  007FBA  20                 	db	32
  1513  007FBB  25                 	db	37
  1514  007FBC  73                 	db	115	;'s'
  1515  007FBD  00                 	db	0
  1516  007FBE                     STR_89:
  1517  007FBE  54                 	db	84	;'T'
  1518  007FBF  32                 	db	50	;'2'
  1519  007FC0  3A                 	db	58	;':'
  1520  007FC1  20                 	db	32
  1521  007FC2  25                 	db	37
  1522  007FC3  73                 	db	115	;'s'
  1523  007FC4  00                 	db	0
  1524  007FC5                     STR_64:
  1525  007FC5  48                 	db	72	;'H'
  1526  007FC6  4F                 	db	79	;'O'
  1527  007FC7  52                 	db	82	;'R'
  1528  007FC8  41                 	db	65	;'A'
  1529  007FC9  3A                 	db	58	;':'
  1530  007FCA  00                 	db	0
  1531  007FCB                     STR_62:
  1532  007FCB  44                 	db	68	;'D'
  1533  007FCC  41                 	db	65	;'A'
  1534  007FCD  54                 	db	84	;'T'
  1535  007FCE  41                 	db	65	;'A'
  1536  007FCF  3A                 	db	58	;':'
  1537  007FD0  00                 	db	0
  1538  007FD1                     STR_28:
  1539  007FD1  46                 	db	70	;'F'
  1540  007FD2  41                 	db	65	;'A'
  1541  007FD3  4C                 	db	76	;'L'
  1542  007FD4  48                 	db	72	;'H'
  1543  007FD5  41                 	db	65	;'A'
  1544  007FD6  00                 	db	0
  1545  007FD7                     STR_17:
  1546  007FD7  45                 	db	69	;'E'
  1547  007FD8  52                 	db	82	;'R'
  1548  007FD9  52                 	db	82	;'R'
  1549  007FDA  4F                 	db	79	;'O'
  1550  007FDB  52                 	db	82	;'R'
  1551  007FDC  00                 	db	0
  1552  007FDD                     STR_4:
  1553  007FDD  41                 	db	65	;'A'
  1554  007FDE  54                 	db	84	;'T'
  1555  007FDF  0D                 	db	13
  1556  007FE0  0A                 	db	10
  1557  007FE1  00                 	db	0
  1558  007FE2                     STR_47:
  1559  007FE2  45                 	db	69	;'E'
  1560  007FE3  52                 	db	82	;'R'
  1561  007FE4  52                 	db	82	;'R'
  1562  007FE5  4F                 	db	79	;'O'
  1563  007FE6  00                 	db	0
  1564  007FE7                     STR_1:
  1565  007FE7  25                 	db	37
  1566  007FE8  73                 	db	115	;'s'
  1567  007FE9  25                 	db	37
  1568  007FEA  63                 	db	99	;'c'
  1569  007FEB  00                 	db	0
  1570  007FEC                     STR_95:
  1571  007FEC  25                 	db	37
  1572  007FED  33                 	db	51	;'3'
  1573  007FEE  64                 	db	100	;'d'
  1574  007FEF  73                 	db	115	;'s'
  1575  007FF0  00                 	db	0
  1576  007FF1                     STR_71:
  1577  007FF1  53                 	db	83	;'S'
  1578  007FF2  69                 	db	105	;'i'
  1579  007FF3  6D                 	db	109	;'m'
  1580  007FF4  00                 	db	0
  1581  007FF5                     STR_70:
  1582  007FF5  4E                 	db	78	;'N'
  1583  007FF6  61                 	db	97	;'a'
  1584  007FF7  6F                 	db	111	;'o'
  1585  007FF8  00                 	db	0
  1586  007FF9                     STR_5:
  1587  007FF9  4F                 	db	79	;'O'
  1588  007FFA  4B                 	db	75	;'K'
  1589  007FFB  00                 	db	0
  1590  007FFC                     STR_13:
  1591  007FFC  3E                 	db	62	;'>'
  1592  007FFD  00                 	db	0
  1593  0000                     
  1594                           ; #config settings
  1595  007FFE  00                 	db	0	; dummy byte at the end
  1596  0000                     
  1597                           	psect	cinit
  1598  007814                     __pcinit:
  1599                           	opt stack 0
  1600  007814                     start_initialization:
  1601                           	opt stack 0
  1602  007814                     __initialization:
  1603                           	opt stack 0
  1604                           
  1605                           ; Initialize objects allocated to BANK0 (8 bytes)
  1606                           ; load TBLPTR registers with __pidataBANK0
  1607  007814  0E08               	movlw	low __pidataBANK0
  1608  007816  6EF6               	movwf	tblptrl,c
  1609  007818  0E6E               	movlw	high __pidataBANK0
  1610  00781A  6EF7               	movwf	tblptrh,c
  1611  00781C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1612  00781E  6EF8               	movwf	tblptru,c
  1613  007820  EE00  F0F8         	lfsr	0,__pdataBANK0
  1614  007824  EE10 F008          	lfsr	1,8
  1615  007828                     copy_data0:
  1616  007828  0009               	tblrd		*+
  1617  00782A  CFF5 FFEE          	movff	tablat,postinc0
  1618  00782E  50E5               	movf	postdec1,w,c
  1619  007830  50E1               	movf	fsr1l,w,c
  1620  007832  E1FA               	bnz	copy_data0
  1621                           
  1622                           ; Initialize objects allocated to COMRAM (5 bytes)
  1623                           ; load TBLPTR registers with __pidataCOMRAM
  1624  007834  0E03               	movlw	low __pidataCOMRAM
  1625  007836  6EF6               	movwf	tblptrl,c
  1626  007838  0E6E               	movlw	high __pidataCOMRAM
  1627  00783A  6EF7               	movwf	tblptrh,c
  1628  00783C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1629  00783E  6EF8               	movwf	tblptru,c
  1630  007840  EE00  F07A         	lfsr	0,__pdataCOMRAM
  1631  007844  EE10 F005          	lfsr	1,5
  1632  007848                     copy_data1:
  1633  007848  0009               	tblrd		*+
  1634  00784A  CFF5 FFEE          	movff	tablat,postinc0
  1635  00784E  50E5               	movf	postdec1,w,c
  1636  007850  50E1               	movf	fsr1l,w,c
  1637  007852  E1FA               	bnz	copy_data1
  1638                           
  1639                           ; Clear objects allocated to BANK1 (188 bytes)
  1640  007854  EE01  F000         	lfsr	0,__pbssBANK1
  1641  007858  0EBC               	movlw	188
  1642  00785A                     clear_0:
  1643  00785A  6AEE               	clrf	postinc0,c
  1644  00785C  06E8               	decf	wreg,f,c
  1645  00785E  E1FD               	bnz	clear_0
  1646                           
  1647                           ; Clear objects allocated to BANK0 (31 bytes)
  1648  007860  EE00  F0D9         	lfsr	0,__pbssBANK0
  1649  007864  0E1F               	movlw	31
  1650  007866                     clear_1:
  1651  007866  6AEE               	clrf	postinc0,c
  1652  007868  06E8               	decf	wreg,f,c
  1653  00786A  E1FD               	bnz	clear_1
  1654                           
  1655                           ; Clear objects allocated to COMRAM (54 bytes)
  1656  00786C  EE00  F044         	lfsr	0,__pbssCOMRAM
  1657  007870  0E36               	movlw	54
  1658  007872                     clear_2:
  1659  007872  6AEE               	clrf	postinc0,c
  1660  007874  06E8               	decf	wreg,f,c
  1661  007876  E1FD               	bnz	clear_2
  1662  007878                     end_of_initialization:
  1663                           	opt stack 0
  1664  007878                     __end_of__initialization:
  1665                           	opt stack 0
  1666  007878  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1667  00787A  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1668  00787C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1669  00787E  6EF8               	movwf	tblptru,c
  1670  007880  0100               	movlb	0
  1671  007882  EFE8  F006         	goto	_main	;jump to C main() function
  1672                           tblptru	equ	0xFF8
  1673                           tblptrh	equ	0xFF7
  1674                           tblptrl	equ	0xFF6
  1675                           tablat	equ	0xFF5
  1676                           postinc0	equ	0xFEE
  1677                           wreg	equ	0xFE8
  1678                           postdec1	equ	0xFE5
  1679                           fsr1l	equ	0xFE1
  1680                           
  1681                           	psect	bssCOMRAM
  1682  000044                     __pbssCOMRAM:
  1683                           	opt stack 0
  1684  000044                     _shift:
  1685                           	opt stack 0
  1686  000044                     	ds	8
  1687  00004C                     __tensao:
  1688                           	opt stack 0
  1689  00004C                     	ds	3
  1690  00004F                     _horimetro:
  1691                           	opt stack 0
  1692  00004F                     	ds	2
  1693  000051                     _etapaComunicacao:
  1694                           	opt stack 0
  1695  000051                     	ds	2
  1696  000053                     _dtl_posi_visualizar:
  1697                           	opt stack 0
  1698  000053                     	ds	1
  1699  000054                     _totalLogs:
  1700                           	opt stack 0
  1701  000054                     	ds	1
  1702  000055                     _dtl_carregar_log:
  1703                           	opt stack 0
  1704  000055                     	ds	1
  1705  000056                     _dtl_estacionaria:
  1706                           	opt stack 0
  1707  000056                     	ds	1
  1708  000057                     _dtl_principal:
  1709                           	opt stack 0
  1710  000057                     	ds	1
  1711  000058                     _dtl_jockey:
  1712                           	opt stack 0
  1713  000058                     	ds	1
  1714  000059                     _dtl_min:
  1715                           	opt stack 0
  1716  000059                     	ds	1
  1717  00005A                     _dtl_hora:
  1718                           	opt stack 0
  1719  00005A                     	ds	1
  1720  00005B                     _dtl_ano:
  1721                           	opt stack 0
  1722  00005B                     	ds	1
  1723  00005C                     _dtl_mes:
  1724                           	opt stack 0
  1725  00005C                     	ds	1
  1726  00005D                     _dtl_dia:
  1727                           	opt stack 0
  1728  00005D                     	ds	1
  1729  00005E                     __b_ok:
  1730                           	opt stack 0
  1731  00005E                     	ds	1
  1732  00005F                     _flag_b_ok:
  1733                           	opt stack 0
  1734  00005F                     	ds	1
  1735  000060                     __b_mais:
  1736                           	opt stack 0
  1737  000060                     	ds	1
  1738  000061                     _flag_b_mais:
  1739                           	opt stack 0
  1740  000061                     	ds	1
  1741  000062                     __b_menos:
  1742                           	opt stack 0
  1743  000062                     	ds	1
  1744  000063                     _flag_b_menos:
  1745                           	opt stack 0
  1746  000063                     	ds	1
  1747  000064                     __b_esc:
  1748                           	opt stack 0
  1749  000064                     	ds	1
  1750  000065                     _flag_b_esc:
  1751                           	opt stack 0
  1752  000065                     	ds	1
  1753  000066                     _cbf:
  1754                           	opt stack 0
  1755  000066                     	ds	1
  1756  000067                     _ajst_rtc:
  1757                           	opt stack 0
  1758  000067                     	ds	1
  1759  000068                     _tela_menu_posi:
  1760                           	opt stack 0
  1761  000068                     	ds	1
  1762  000069                     _sub_menu_posi:
  1763                           	opt stack 0
  1764  000069                     	ds	1
  1765  00006A                     _tel_selecionado:
  1766                           	opt stack 0
  1767  00006A                     	ds	1
  1768  00006B                     _tempo_limite_partida:
  1769                           	opt stack 0
  1770  00006B                     	ds	1
  1771  00006C                     _tempo_partida:
  1772                           	opt stack 0
  1773  00006C                     	ds	1
  1774  00006D                     _qtd_leitura:
  1775                           	opt stack 0
  1776  00006D                     	ds	1
  1777  00006E                     __sec_aux:
  1778                           	opt stack 0
  1779  00006E                     	ds	1
  1780  00006F                     __sec_partida:
  1781                           	opt stack 0
  1782  00006F                     	ds	1
  1783  000070                     _base_sec:
  1784                           	opt stack 0
  1785  000070                     	ds	1
  1786  000071                     _etapaTesteBombas:
  1787                           	opt stack 0
  1788  000071                     	ds	1
  1789  000072                     _codigoErro:
  1790                           	opt stack 0
  1791  000072                     	ds	1
  1792  000073                     _rtc:
  1793                           	opt stack 0
  1794  000073                     	ds	7
  1795                           tblptru	equ	0xFF8
  1796                           tblptrh	equ	0xFF7
  1797                           tblptrl	equ	0xFF6
  1798                           tablat	equ	0xFF5
  1799                           postinc0	equ	0xFEE
  1800                           wreg	equ	0xFE8
  1801                           postdec1	equ	0xFE5
  1802                           fsr1l	equ	0xFE1
  1803                           
  1804                           	psect	dataCOMRAM
  1805  00007A                     __pdataCOMRAM:
  1806                           	opt stack 0
  1807  00007A                     intToFloatStr@F2544:
  1808                           	opt stack 0
  1809  00007A                     	ds	4
  1810  00007E                     _bt_press:
  1811                           	opt stack 0
  1812  00007E                     	ds	1
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           postinc0	equ	0xFEE
  1818                           wreg	equ	0xFE8
  1819                           postdec1	equ	0xFE5
  1820                           fsr1l	equ	0xFE1
  1821                           
  1822                           	psect	bssBANK0
  1823  0000D9                     __pbssBANK0:
  1824                           	opt stack 0
  1825  0000D9                     _timerTesteBombas:
  1826                           	opt stack 0
  1827  0000D9                     	ds	2
  1828  0000DB                     _blinkk:
  1829                           	opt stack 0
  1830  0000DB                     	ds	1
  1831  0000DC                     _ajust_tel:
  1832                           	opt stack 0
  1833  0000DC                     	ds	1
  1834  0000DD                     _tel_posi:
  1835                           	opt stack 0
  1836  0000DD                     	ds	1
  1837  0000DE                     __menu_posi:
  1838                           	opt stack 0
  1839  0000DE                     	ds	1
  1840  0000DF                     _menu_posi:
  1841                           	opt stack 0
  1842  0000DF                     	ds	1
  1843  0000E0                     _option_posi:
  1844                           	opt stack 0
  1845  0000E0                     	ds	1
  1846  0000E1                     _sp_estacionaria:
  1847                           	opt stack 0
  1848  0000E1                     	ds	1
  1849  0000E2                     _sp_principal:
  1850                           	opt stack 0
  1851  0000E2                     	ds	1
  1852  0000E3                     _sp_jockey:
  1853                           	opt stack 0
  1854  0000E3                     	ds	1
  1855  0000E4                     _sp_pressao_rede:
  1856                           	opt stack 0
  1857  0000E4                     	ds	1
  1858  0000E5                     _tempo_limite_teste_estacionaria:
  1859                           	opt stack 0
  1860  0000E5                     	ds	1
  1861  0000E6                     _tempo_limite_estacionaria:
  1862                           	opt stack 0
  1863  0000E6                     	ds	1
  1864  0000E7                     _horario_de_teste:
  1865                           	opt stack 0
  1866  0000E7                     	ds	1
  1867  0000E8                     _dias_restante_teste:
  1868                           	opt stack 0
  1869  0000E8                     	ds	1
  1870  0000E9                     _intervalo_teste_dia:
  1871                           	opt stack 0
  1872  0000E9                     	ds	1
  1873  0000EA                     __ano:
  1874                           	opt stack 0
  1875  0000EA                     	ds	1
  1876  0000EB                     __mes:
  1877                           	opt stack 0
  1878  0000EB                     	ds	1
  1879  0000EC                     __dia:
  1880                           	opt stack 0
  1881  0000EC                     	ds	1
  1882  0000ED                     __hor:
  1883                           	opt stack 0
  1884  0000ED                     	ds	1
  1885  0000EE                     __min:
  1886                           	opt stack 0
  1887  0000EE                     	ds	1
  1888  0000EF                     __sec:
  1889                           	opt stack 0
  1890  0000EF                     	ds	1
  1891  0000F0                     _habilitaTesteAutomatico:
  1892                           	opt stack 0
  1893  0000F0                     	ds	1
  1894  0000F1                     _flagEstacionariaLigada:
  1895                           	opt stack 0
  1896  0000F1                     	ds	1
  1897  0000F2                     _executandoTeste:
  1898                           	opt stack 0
  1899  0000F2                     	ds	1
  1900  0000F3                     _ocorrendoIncendio:
  1901                           	opt stack 0
  1902  0000F3                     	ds	1
  1903  0000F4                     _gsmOcupado:
  1904                           	opt stack 0
  1905  0000F4                     	ds	1
  1906  0000F5                     _timerEtapaComunicacao:
  1907                           	opt stack 0
  1908  0000F5                     	ds	1
  1909  0000F6                     _timerReenvioSMS:
  1910                           	opt stack 0
  1911  0000F6                     	ds	1
  1912  0000F7                     _telefoneSelecionado:
  1913                           	opt stack 0
  1914  0000F7                     	ds	1
  1915                           tblptru	equ	0xFF8
  1916                           tblptrh	equ	0xFF7
  1917                           tblptrl	equ	0xFF6
  1918                           tablat	equ	0xFF5
  1919                           postinc0	equ	0xFEE
  1920                           wreg	equ	0xFE8
  1921                           postdec1	equ	0xFE5
  1922                           fsr1l	equ	0xFE1
  1923                           
  1924                           	psect	dataBANK0
  1925  0000F8                     __pdataBANK0:
  1926                           	opt stack 0
  1927  0000F8                     _pressao:
  1928                           	opt stack 0
  1929  0000F8                     	ds	2
  1930  0000FA                     _dtl_posicao:
  1931                           	opt stack 0
  1932  0000FA                     	ds	1
  1933  0000FB                     _status_estacionaria:
  1934                           	opt stack 0
  1935  0000FB                     	ds	1
  1936  0000FC                     _status_principal:
  1937                           	opt stack 0
  1938  0000FC                     	ds	1
  1939  0000FD                     _status_jockey:
  1940                           	opt stack 0
  1941  0000FD                     	ds	1
  1942  0000FE                     _timerVerificarSinal:
  1943                           	opt stack 0
  1944  0000FE                     	ds	1
  1945  0000FF                     _intensidadeSinal:
  1946                           	opt stack 0
  1947  0000FF                     	ds	1
  1948                           tblptru	equ	0xFF8
  1949                           tblptrh	equ	0xFF7
  1950                           tblptrl	equ	0xFF6
  1951                           tablat	equ	0xFF5
  1952                           postinc0	equ	0xFEE
  1953                           wreg	equ	0xFE8
  1954                           postdec1	equ	0xFE5
  1955                           fsr1l	equ	0xFE1
  1956                           
  1957                           	psect	bssBANK1
  1958  000100                     __pbssBANK1:
  1959                           	opt stack 0
  1960  000100                     _bufferSerial:
  1961                           	opt stack 0
  1962  000100                     	ds	60
  1963  00013C                     _line4:
  1964                           	opt stack 0
  1965  00013C                     	ds	21
  1966  000151                     _line3:
  1967                           	opt stack 0
  1968  000151                     	ds	21
  1969  000166                     _line2:
  1970                           	opt stack 0
  1971  000166                     	ds	21
  1972  00017B                     _line1:
  1973                           	opt stack 0
  1974  00017B                     	ds	21
  1975  000190                     _bufferAUX:
  1976                           	opt stack 0
  1977  000190                     	ds	20
  1978  0001A4                     _tel2:
  1979                           	opt stack 0
  1980  0001A4                     	ds	12
  1981  0001B0                     _tel1:
  1982                           	opt stack 0
  1983  0001B0                     	ds	12
  1984                           tblptru	equ	0xFF8
  1985                           tblptrh	equ	0xFF7
  1986                           tblptrl	equ	0xFF6
  1987                           tablat	equ	0xFF5
  1988                           postinc0	equ	0xFEE
  1989                           wreg	equ	0xFE8
  1990                           postdec1	equ	0xFE5
  1991                           fsr1l	equ	0xFE1
  1992                           
  1993                           	psect	cstackBANK0
  1994  000080                     __pcstackBANK0:
  1995                           	opt stack 0
  1996  000080                     ??_isdigit:
  1997  000080                     ??_setShiftREG:
  1998  000080                     ??_I2C_Wait:
  1999  000080                     ?_strlen:
  2000                           	opt stack 0
  2001  000080                     ?_strchr:
  2002                           	opt stack 0
  2003  000080                     ?___wmul:
  2004                           	opt stack 0
  2005  000080                     ?___awdiv:
  2006                           	opt stack 0
  2007  000080                     ?___awmod:
  2008                           	opt stack 0
  2009  000080                     ?___lwdiv:
  2010                           	opt stack 0
  2011  000080                     ?___lldiv:
  2012                           	opt stack 0
  2013  000080                     putch@c:
  2014                           	opt stack 0
  2015  000080                     clearShiftREG@i:
  2016                           	opt stack 0
  2017  000080                     btPress@bt:
  2018                           	opt stack 0
  2019  000080                     Lcd_Port@a:
  2020                           	opt stack 0
  2021  000080                     BCDtoDEC@val:
  2022                           	opt stack 0
  2023  000080                     writeChar@hex:
  2024                           	opt stack 0
  2025  000080                     blink@line:
  2026                           	opt stack 0
  2027  000080                     delay@x:
  2028                           	opt stack 0
  2029  000080                     ___wmul@multiplier:
  2030                           	opt stack 0
  2031  000080                     ___awdiv@dividend:
  2032                           	opt stack 0
  2033  000080                     ___awmod@dividend:
  2034                           	opt stack 0
  2035  000080                     ___lwdiv@dividend:
  2036                           	opt stack 0
  2037  000080                     memset@p1:
  2038                           	opt stack 0
  2039  000080                     strlen@s:
  2040                           	opt stack 0
  2041  000080                     strchr@ptr:
  2042                           	opt stack 0
  2043  000080                     ___lldiv@dividend:
  2044                           	opt stack 0
  2045                           
  2046                           ; 4 bytes @ 0x0
  2047  000080                     	ds	1
  2048  000081                     ??_Lcd_Cmd:
  2049  000081                     ?_I2C_Read:
  2050                           	opt stack 0
  2051  000081                     setShiftREG@i:
  2052                           	opt stack 0
  2053  000081                     Lcd_Write_Char@tempp:
  2054                           	opt stack 0
  2055  000081                     _isdigit$1855:
  2056                           	opt stack 0
  2057  000081                     I2C_Read@a:
  2058                           	opt stack 0
  2059                           
  2060                           ; 2 bytes @ 0x1
  2061  000081                     	ds	1
  2062  000082                     ??_delay:
  2063  000082                     ??_strlen:
  2064  000082                     Lcd_Cmd@a:
  2065                           	opt stack 0
  2066  000082                     Lcd_Write_Char@y:
  2067                           	opt stack 0
  2068  000082                     blink@start:
  2069                           	opt stack 0
  2070  000082                     isdigit@c:
  2071                           	opt stack 0
  2072  000082                     ___wmul@multiplicand:
  2073                           	opt stack 0
  2074  000082                     ___awdiv@divisor:
  2075                           	opt stack 0
  2076  000082                     ___awmod@divisor:
  2077                           	opt stack 0
  2078  000082                     ___lwdiv@divisor:
  2079                           	opt stack 0
  2080  000082                     memset@c:
  2081                           	opt stack 0
  2082  000082                     strchr@chr:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x2
  2086  000082                     	ds	1
  2087  000083                     ??_Lcd_Init:
  2088  000083                     partidaBombaEstacionaria@acao:
  2089                           	opt stack 0
  2090  000083                     Lcd_Set_Cursor@b:
  2091                           	opt stack 0
  2092  000083                     Lcd_Write_Char@a:
  2093                           	opt stack 0
  2094  000083                     blink@end:
  2095                           	opt stack 0
  2096  000083                     I2C_Read@temp:
  2097                           	opt stack 0
  2098                           
  2099                           ; 2 bytes @ 0x3
  2100  000083                     	ds	1
  2101  000084                     ??_criarCaracteresCGRAM:
  2102  000084                     Lcd_Set_Cursor@a:
  2103                           	opt stack 0
  2104  000084                     blink@i:
  2105                           	opt stack 0
  2106  000084                     ___awdiv@counter:
  2107                           	opt stack 0
  2108  000084                     ___awmod@counter:
  2109                           	opt stack 0
  2110  000084                     Lcd_Write_String@a:
  2111                           	opt stack 0
  2112  000084                     ___wmul@product:
  2113                           	opt stack 0
  2114  000084                     ___lwdiv@quotient:
  2115                           	opt stack 0
  2116  000084                     memset@n:
  2117                           	opt stack 0
  2118  000084                     strlen@cp:
  2119                           	opt stack 0
  2120  000084                     ___lldiv@divisor:
  2121                           	opt stack 0
  2122                           
  2123                           ; 4 bytes @ 0x4
  2124  000084                     	ds	1
  2125  000085                     Lcd_Set_Cursor@z:
  2126                           	opt stack 0
  2127  000085                     ___awdiv@sign:
  2128                           	opt stack 0
  2129  000085                     ___awmod@sign:
  2130                           	opt stack 0
  2131                           
  2132                           ; 1 bytes @ 0x5
  2133  000085                     	ds	1
  2134  000086                     ?_strncmp:
  2135                           	opt stack 0
  2136  000086                     Lcd_Set_Cursor@y:
  2137                           	opt stack 0
  2138  000086                     Lcd_Write_String@i:
  2139                           	opt stack 0
  2140  000086                     ___lwdiv@counter:
  2141                           	opt stack 0
  2142  000086                     ___awdiv@quotient:
  2143                           	opt stack 0
  2144  000086                     memset@p:
  2145                           	opt stack 0
  2146  000086                     strncmp@s1:
  2147                           	opt stack 0
  2148                           
  2149                           ; 2 bytes @ 0x6
  2150  000086                     	ds	1
  2151  000087                     ?___lwmod:
  2152                           	opt stack 0
  2153  000087                     Lcd_Set_Cursor@temp:
  2154                           	opt stack 0
  2155  000087                     ___lwmod@dividend:
  2156                           	opt stack 0
  2157  000087                     criarCaracteresCGRAM@character:
  2158                           	opt stack 0
  2159                           
  2160                           ; 48 bytes @ 0x7
  2161  000087                     	ds	1
  2162  000088                     DECtoBCD@val:
  2163                           	opt stack 0
  2164  000088                     atualizarLCD@line1:
  2165                           	opt stack 0
  2166  000088                     strncmp@s2:
  2167                           	opt stack 0
  2168  000088                     ___lldiv@quotient:
  2169                           	opt stack 0
  2170                           
  2171                           ; 4 bytes @ 0x8
  2172  000088                     	ds	1
  2173  000089                     DECtoBCD@res:
  2174                           	opt stack 0
  2175  000089                     ___lwmod@divisor:
  2176                           	opt stack 0
  2177                           
  2178                           ; 2 bytes @ 0x9
  2179  000089                     	ds	1
  2180  00008A                     atualizarLCD@line2:
  2181                           	opt stack 0
  2182  00008A                     I2C_Write@d:
  2183                           	opt stack 0
  2184  00008A                     strncmp@len:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0xA
  2188  00008A                     	ds	1
  2189  00008B                     ___lwmod@counter:
  2190                           	opt stack 0
  2191                           
  2192                           ; 1 bytes @ 0xB
  2193  00008B                     	ds	1
  2194  00008C                     ??_strncmp:
  2195  00008C                     ?__doprnt:
  2196                           	opt stack 0
  2197  00008C                     writeEEPROM_ext@data:
  2198                           	opt stack 0
  2199  00008C                     readEEPROM_ext@adress:
  2200                           	opt stack 0
  2201  00008C                     ___lldiv@counter:
  2202                           	opt stack 0
  2203  00008C                     setDS1307TimeDate@ptrToUserVal:
  2204                           	opt stack 0
  2205  00008C                     getDS1307TimeDate@ptrToUserVal:
  2206                           	opt stack 0
  2207  00008C                     atualizarLCD@line3:
  2208                           	opt stack 0
  2209  00008C                     __doprnt@pb:
  2210                           	opt stack 0
  2211                           
  2212                           ; 2 bytes @ 0xC
  2213  00008C                     	ds	1
  2214  00008D                     writeEEPROM_ext@adress:
  2215                           	opt stack 0
  2216  00008D                     readEEPROM_ext@data:
  2217                           	opt stack 0
  2218  00008D                     I2C_Master_Init@c:
  2219                           	opt stack 0
  2220                           
  2221                           ; 4 bytes @ 0xD
  2222  00008D                     	ds	1
  2223  00008E                     ??_setDS1307TimeDate:
  2224  00008E                     ??_salvarLOG:
  2225  00008E                     ?_readEEPROM16_ext:
  2226                           	opt stack 0
  2227  00008E                     atualizarLCD@line4:
  2228                           	opt stack 0
  2229  00008E                     __doprnt@f:
  2230                           	opt stack 0
  2231                           
  2232                           ; 2 bytes @ 0xE
  2233  00008E                     	ds	1
  2234  00008F                     ?_strstr:
  2235                           	opt stack 0
  2236  00008F                     salvarLOG@ultimoLogSalvo:
  2237                           	opt stack 0
  2238  00008F                     strstr@s1:
  2239                           	opt stack 0
  2240                           
  2241                           ; 2 bytes @ 0xF
  2242  00008F                     	ds	1
  2243  000090                     ??_readEEPROM16_ext:
  2244  000090                     atualizarLCD@i:
  2245                           	opt stack 0
  2246  000090                     __doprnt@ap:
  2247                           	opt stack 0
  2248                           
  2249                           ; 2 bytes @ 0x10
  2250  000090                     	ds	1
  2251  000091                     ??_I2C_Master_Init:
  2252  000091                     readEEPROM16_ext@data:
  2253                           	opt stack 0
  2254  000091                     strstr@s2:
  2255                           	opt stack 0
  2256                           
  2257                           ; 2 bytes @ 0x11
  2258  000091                     	ds	1
  2259  000092                     ??__doprnt:
  2260                           
  2261                           ; 1 bytes @ 0x12
  2262  000092                     	ds	1
  2263  000093                     readEEPROM16_ext@adress:
  2264                           	opt stack 0
  2265  000093                     aguardaBuffer@str:
  2266                           	opt stack 0
  2267                           
  2268                           ; 2 bytes @ 0x13
  2269  000093                     	ds	1
  2270  000094                     lerParametros@verifica_memoria_nova:
  2271                           	opt stack 0
  2272                           
  2273                           ; 1 bytes @ 0x14
  2274  000094                     	ds	1
  2275  000095                     lerParametros@i:
  2276                           	opt stack 0
  2277                           
  2278                           ; 1 bytes @ 0x15
  2279  000095                     	ds	1
  2280  000096                     __doprnt@prec:
  2281                           	opt stack 0
  2282                           
  2283                           ; 1 bytes @ 0x16
  2284  000096                     	ds	1
  2285  000097                     __doprnt@val:
  2286                           	opt stack 0
  2287                           
  2288                           ; 2 bytes @ 0x17
  2289  000097                     	ds	2
  2290  000099                     __doprnt@len:
  2291                           	opt stack 0
  2292                           
  2293                           ; 2 bytes @ 0x19
  2294  000099                     	ds	2
  2295  00009B                     __doprnt@flag:
  2296                           	opt stack 0
  2297                           
  2298                           ; 1 bytes @ 0x1B
  2299  00009B                     	ds	1
  2300  00009C                     __doprnt@cp:
  2301                           	opt stack 0
  2302                           
  2303                           ; 2 bytes @ 0x1C
  2304  00009C                     	ds	2
  2305  00009E                     __doprnt@width:
  2306                           	opt stack 0
  2307                           
  2308                           ; 2 bytes @ 0x1E
  2309  00009E                     	ds	2
  2310  0000A0                     __doprnt@c:
  2311                           	opt stack 0
  2312                           
  2313                           ; 1 bytes @ 0x20
  2314  0000A0                     	ds	1
  2315  0000A1                     ?_sprintf:
  2316                           	opt stack 0
  2317  0000A1                     ?_printf:
  2318                           	opt stack 0
  2319  0000A1                     printf@f:
  2320                           	opt stack 0
  2321  0000A1                     sprintf@wh:
  2322                           	opt stack 0
  2323                           
  2324                           ; 2 bytes @ 0x21
  2325  0000A1                     	ds	2
  2326  0000A3                     sprintf@f:
  2327                           	opt stack 0
  2328                           
  2329                           ; 2 bytes @ 0x23
  2330  0000A3                     	ds	12
  2331  0000AF                     sprintf@ap:
  2332                           	opt stack 0
  2333                           
  2334                           ; 2 bytes @ 0x2F
  2335  0000AF                     	ds	2
  2336  0000B1                     sprintf@pb:
  2337                           	opt stack 0
  2338                           
  2339                           ; 4 bytes @ 0x31
  2340  0000B1                     	ds	4
  2341  0000B5                     ??_tela_testeBombas:
  2342  0000B5                     ??_dataLoger:
  2343  0000B5                     ?_intToFloatStr:
  2344                           	opt stack 0
  2345  0000B5                     ?_getSerial:
  2346                           	opt stack 0
  2347  0000B5                     getSerial@str:
  2348                           	opt stack 0
  2349  0000B5                     printf@ap:
  2350                           	opt stack 0
  2351                           
  2352                           ; 2 bytes @ 0x35
  2353  0000B5                     	ds	2
  2354  0000B7                     getSerial@end:
  2355                           	opt stack 0
  2356  0000B7                     _criarCaracteresCGRAM$1380:
  2357                           	opt stack 0
  2358  0000B7                     _tela_testeBombas$1412:
  2359                           	opt stack 0
  2360  0000B7                     intToFloatStr@end:
  2361                           	opt stack 0
  2362  0000B7                     printf@pb:
  2363                           	opt stack 0
  2364                           
  2365                           ; 4 bytes @ 0x37
  2366  0000B7                     	ds	1
  2367  0000B8                     ??_getSerial:
  2368                           
  2369                           ; 1 bytes @ 0x38
  2370  0000B8                     	ds	1
  2371  0000B9                     criarCaracteresCGRAM@k:
  2372                           	opt stack 0
  2373                           
  2374                           ; 1 bytes @ 0x39
  2375  0000B9                     	ds	1
  2376  0000BA                     criarCaracteresCGRAM@j:
  2377                           	opt stack 0
  2378  0000BA                     getSerial@length:
  2379                           	opt stack 0
  2380  0000BA                     _dataLoger$1431:
  2381                           	opt stack 0
  2382                           
  2383                           ; 2 bytes @ 0x3A
  2384  0000BA                     	ds	1
  2385  0000BB                     ??_comunicarTeste:
  2386  0000BB                     ??_enviaSMS:
  2387  0000BB                     criarCaracteresCGRAM@i:
  2388                           	opt stack 0
  2389  0000BB                     intToFloatStr@conv:
  2390                           	opt stack 0
  2391                           
  2392                           ; 4 bytes @ 0x3B
  2393  0000BB                     	ds	1
  2394  0000BC                     getSerial@i:
  2395                           	opt stack 0
  2396  0000BC                     _dataLoger$1437:
  2397                           	opt stack 0
  2398                           
  2399                           ; 2 bytes @ 0x3C
  2400  0000BC                     	ds	1
  2401  0000BD                     getSerial@ret:
  2402                           	opt stack 0
  2403  0000BD                     _comunicarTeste$1190:
  2404                           	opt stack 0
  2405  0000BD                     _enviaSMS$1205:
  2406                           	opt stack 0
  2407                           
  2408                           ; 2 bytes @ 0x3D
  2409  0000BD                     	ds	1
  2410  0000BE                     _dataLoger$1442:
  2411                           	opt stack 0
  2412                           
  2413                           ; 2 bytes @ 0x3E
  2414  0000BE                     	ds	1
  2415  0000BF                     ??_configuraTelefones:
  2416  0000BF                     ?_atoi:
  2417                           	opt stack 0
  2418  0000BF                     intToFloatStr@valor:
  2419                           	opt stack 0
  2420  0000BF                     _enviaSMS$1218:
  2421                           	opt stack 0
  2422  0000BF                     atoi@s:
  2423                           	opt stack 0
  2424                           
  2425                           ; 2 bytes @ 0x3F
  2426  0000BF                     	ds	1
  2427  0000C0                     dataLoger@logs:
  2428                           	opt stack 0
  2429  0000C0                     intToFloatStr@pr:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0x40
  2433  0000C0                     	ds	1
  2434  0000C1                     ??_atoi:
  2435  0000C1                     _enviaSMS$1219:
  2436                           	opt stack 0
  2437  0000C1                     _configuraTelefones$1457:
  2438                           	opt stack 0
  2439                           
  2440                           ; 2 bytes @ 0x41
  2441  0000C1                     	ds	1
  2442  0000C2                     _telaPrincipal$2366:
  2443                           	opt stack 0
  2444  0000C2                     _ajusteSP_Bombas$2367:
  2445                           	opt stack 0
  2446                           
  2447                           ; 2 bytes @ 0x42
  2448  0000C2                     	ds	1
  2449  0000C3                     configuraTelefones@i:
  2450                           	opt stack 0
  2451  0000C3                     atoi@sign:
  2452                           	opt stack 0
  2453  0000C3                     _enviaSMS$1220:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0x43
  2457  0000C3                     	ds	1
  2458  0000C4                     atoi@a:
  2459                           	opt stack 0
  2460                           
  2461                           ; 2 bytes @ 0x44
  2462  0000C4                     	ds	1
  2463  0000C5                     _enviaSMS$1225:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x45
  2467  0000C5                     	ds	1
  2468  0000C6                     ??_getSinalSIM800L:
  2469                           
  2470                           ; 1 bytes @ 0x46
  2471  0000C6                     	ds	1
  2472  0000C7                     enviaSMS@tipo:
  2473                           	opt stack 0
  2474                           
  2475                           ; 1 bytes @ 0x47
  2476  0000C7                     	ds	1
  2477  0000C8                     ??_acaoBombas:
  2478  0000C8                     ??_acaoTesteBombas:
  2479  0000C8                     getSinalSIM800L@sinal:
  2480                           	opt stack 0
  2481                           
  2482                           ; 2 bytes @ 0x48
  2483  0000C8                     	ds	5
  2484  0000CD                     _acaoTesteBombas$2365:
  2485                           	opt stack 0
  2486                           
  2487                           ; 2 bytes @ 0x4D
  2488  0000CD                     	ds	2
  2489  0000CF                     _acaoTesteBombas$1298:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0x4F
  2493  0000CF                     	ds	2
  2494  0000D1                     _acaoTesteBombas$1314:
  2495                           	opt stack 0
  2496                           
  2497                           ; 2 bytes @ 0x51
  2498  0000D1                     	ds	2
  2499  0000D3                     _acaoTesteBombas$1319:
  2500                           	opt stack 0
  2501                           
  2502                           ; 2 bytes @ 0x53
  2503  0000D3                     	ds	2
  2504  0000D5                     _acaoTesteBombas$1324:
  2505                           	opt stack 0
  2506                           
  2507                           ; 2 bytes @ 0x55
  2508  0000D5                     	ds	2
  2509  0000D7                     acaoTesteBombas@intervalo:
  2510                           	opt stack 0
  2511                           
  2512                           ; 1 bytes @ 0x57
  2513  0000D7                     	ds	1
  2514  0000D8                     acaoTesteBombas@i:
  2515                           	opt stack 0
  2516                           
  2517                           ; 1 bytes @ 0x58
  2518  0000D8                     	ds	1
  2519  0000D9                     tblptru	equ	0xFF8
  2520                           tblptrh	equ	0xFF7
  2521                           tblptrl	equ	0xFF6
  2522                           tablat	equ	0xFF5
  2523                           postinc0	equ	0xFEE
  2524                           wreg	equ	0xFE8
  2525                           postdec1	equ	0xFE5
  2526                           fsr1l	equ	0xFE1
  2527                           
  2528                           ; 1 bytes @ 0x59
  2529                           
  2530                           	psect	cstackCOMRAM
  2531  000001                     __pcstackCOMRAM:
  2532                           	opt stack 0
  2533  000001                     ??i2_I2C_Wait:
  2534  000001                     ?_readADC:
  2535                           	opt stack 0
  2536  000001                     ?___ftpack:
  2537                           	opt stack 0
  2538  000001                     i2BCDtoDEC@val:
  2539                           	opt stack 0
  2540  000001                     i2delay@x:
  2541                           	opt stack 0
  2542  000001                     ___ftpack@arg:
  2543                           	opt stack 0
  2544  000001                     ___ftge@ff1:
  2545                           	opt stack 0
  2546                           
  2547                           ; 3 bytes @ 0x0
  2548  000001                     	ds	1
  2549  000002                     ?i2_I2C_Read:
  2550                           	opt stack 0
  2551  000002                     i2I2C_Write@d:
  2552                           	opt stack 0
  2553  000002                     i2I2C_Read@a:
  2554                           	opt stack 0
  2555                           
  2556                           ; 2 bytes @ 0x1
  2557  000002                     	ds	1
  2558  000003                     ??_readADC:
  2559  000003                     ??i2_delay:
  2560                           
  2561                           ; 1 bytes @ 0x2
  2562  000003                     	ds	1
  2563  000004                     ___ftpack@exp:
  2564                           	opt stack 0
  2565  000004                     i2writeEEPROM_ext@data:
  2566                           	opt stack 0
  2567  000004                     i2I2C_Read@temp:
  2568                           	opt stack 0
  2569  000004                     ___ftge@ff2:
  2570                           	opt stack 0
  2571                           
  2572                           ; 3 bytes @ 0x3
  2573  000004                     	ds	1
  2574  000005                     ___ftpack@sign:
  2575                           	opt stack 0
  2576  000005                     i2writeEEPROM_ext@adress:
  2577                           	opt stack 0
  2578                           
  2579                           ; 1 bytes @ 0x4
  2580  000005                     	ds	1
  2581  000006                     ??___ftpack:
  2582  000006                     writeEEPROM16_ext@data:
  2583                           	opt stack 0
  2584  000006                     i2getDS1307TimeDate@ptrToUserVal:
  2585                           	opt stack 0
  2586                           
  2587                           ; 2 bytes @ 0x5
  2588  000006                     	ds	1
  2589  000007                     ??___ftge:
  2590                           
  2591                           ; 1 bytes @ 0x6
  2592  000007                     	ds	1
  2593  000008                     writeEEPROM16_ext@adress:
  2594                           	opt stack 0
  2595                           
  2596                           ; 1 bytes @ 0x7
  2597  000008                     	ds	1
  2598  000009                     ?___lwtoft:
  2599                           	opt stack 0
  2600  000009                     _timer$1327:
  2601                           	opt stack 0
  2602  000009                     ___lwtoft@c:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x8
  2606  000009                     	ds	2
  2607  00000B                     _timer$1328:
  2608                           	opt stack 0
  2609                           
  2610                           ; 2 bytes @ 0xA
  2611  00000B                     	ds	1
  2612  00000C                     ?___ftmul:
  2613                           	opt stack 0
  2614  00000C                     ___ftmul@f1:
  2615                           	opt stack 0
  2616                           
  2617                           ; 3 bytes @ 0xB
  2618  00000C                     	ds	1
  2619  00000D                     _timer$1329:
  2620                           	opt stack 0
  2621                           
  2622                           ; 2 bytes @ 0xC
  2623  00000D                     	ds	2
  2624  00000F                     ___ftmul@f2:
  2625                           	opt stack 0
  2626                           
  2627                           ; 3 bytes @ 0xE
  2628  00000F                     	ds	3
  2629  000012                     ??___ftmul:
  2630                           
  2631                           ; 1 bytes @ 0x11
  2632  000012                     	ds	3
  2633  000015                     ___ftmul@exp:
  2634                           	opt stack 0
  2635                           
  2636                           ; 1 bytes @ 0x14
  2637  000015                     	ds	1
  2638  000016                     ___ftmul@f3_as_product:
  2639                           	opt stack 0
  2640                           
  2641                           ; 3 bytes @ 0x15
  2642  000016                     	ds	3
  2643  000019                     ___ftmul@cntr:
  2644                           	opt stack 0
  2645                           
  2646                           ; 1 bytes @ 0x18
  2647  000019                     	ds	1
  2648  00001A                     ___ftmul@sign:
  2649                           	opt stack 0
  2650                           
  2651                           ; 1 bytes @ 0x19
  2652  00001A                     	ds	1
  2653  00001B                     ?___ftadd:
  2654                           	opt stack 0
  2655  00001B                     ?___ftdiv:
  2656                           	opt stack 0
  2657  00001B                     ?___fttol:
  2658                           	opt stack 0
  2659  00001B                     ___ftadd@f1:
  2660                           	opt stack 0
  2661  00001B                     ___ftdiv@f1:
  2662                           	opt stack 0
  2663  00001B                     ___fttol@f1:
  2664                           	opt stack 0
  2665                           
  2666                           ; 3 bytes @ 0x1A
  2667  00001B                     	ds	3
  2668  00001E                     ___ftadd@f2:
  2669                           	opt stack 0
  2670  00001E                     ___ftdiv@f2:
  2671                           	opt stack 0
  2672                           
  2673                           ; 3 bytes @ 0x1D
  2674  00001E                     	ds	1
  2675  00001F                     ??___fttol:
  2676                           
  2677                           ; 1 bytes @ 0x1E
  2678  00001F                     	ds	2
  2679  000021                     ??___ftadd:
  2680  000021                     ??___ftdiv:
  2681                           
  2682                           ; 1 bytes @ 0x20
  2683  000021                     	ds	3
  2684  000024                     ___ftadd@sign:
  2685                           	opt stack 0
  2686  000024                     ___ftdiv@cntr:
  2687                           	opt stack 0
  2688  000024                     ___fttol@sign1:
  2689                           	opt stack 0
  2690                           
  2691                           ; 1 bytes @ 0x23
  2692  000024                     	ds	1
  2693  000025                     ___ftadd@exp2:
  2694                           	opt stack 0
  2695  000025                     ___ftdiv@f3:
  2696                           	opt stack 0
  2697  000025                     ___fttol@lval:
  2698                           	opt stack 0
  2699                           
  2700                           ; 4 bytes @ 0x24
  2701  000025                     	ds	1
  2702  000026                     ___ftadd@exp1:
  2703                           	opt stack 0
  2704                           
  2705                           ; 1 bytes @ 0x25
  2706  000026                     	ds	2
  2707  000028                     ___ftdiv@exp:
  2708                           	opt stack 0
  2709                           
  2710                           ; 1 bytes @ 0x27
  2711  000028                     	ds	1
  2712  000029                     ___ftdiv@sign:
  2713                           	opt stack 0
  2714  000029                     ___fttol@exp1:
  2715                           	opt stack 0
  2716                           
  2717                           ; 1 bytes @ 0x28
  2718  000029                     	ds	1
  2719  00002A                     lerTransdutor@i:
  2720                           	opt stack 0
  2721                           
  2722                           ; 1 bytes @ 0x29
  2723  00002A                     	ds	1
  2724  00002B                     lerTransdutor@_pressao:
  2725                           	opt stack 0
  2726                           
  2727                           ; 3 bytes @ 0x2A
  2728  00002B                     	ds	3
  2729  00002E                     lerTransdutor@tensao:
  2730                           	opt stack 0
  2731                           
  2732                           ; 3 bytes @ 0x2D
  2733  00002E                     	ds	3
  2734  000031                     ??_TIMER:
  2735                           
  2736                           ; 1 bytes @ 0x30
  2737  000031                     	ds	18
  2738  000043                     TIMER@c:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0x42
  2742  000043                     	ds	1
  2743                           tblptru	equ	0xFF8
  2744                           tblptrh	equ	0xFF7
  2745                           tblptrl	equ	0xFF6
  2746                           tablat	equ	0xFF5
  2747                           postinc0	equ	0xFEE
  2748                           wreg	equ	0xFE8
  2749                           postdec1	equ	0xFE5
  2750                           fsr1l	equ	0xFE1
  2751                           
  2752 ;;
  2753 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2754 ;;
  2755 ;; *************** function _main *****************
  2756 ;; Defined at:
  2757 ;;		line 66 in file "Main.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;		None
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;		None
  2762 ;; Return value:  Size  Location     Type
  2763 ;;                  1    wreg      void 
  2764 ;; Registers used:
  2765 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2766 ;; Tracked objects:
  2767 ;;		On entry : 0/0
  2768 ;;		On exit  : 0/0
  2769 ;;		Unchanged: 0/0
  2770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2771 ;;      Params:         0       0       0       0       0       0       0
  2772 ;;      Locals:         0       0       0       0       0       0       0
  2773 ;;      Temps:          0       0       0       0       0       0       0
  2774 ;;      Totals:         0       0       0       0       0       0       0
  2775 ;;Total ram usage:        0 bytes
  2776 ;; Hardware stack levels required when called:   11
  2777 ;; This function calls:
  2778 ;;		_I2C_Master_Init
  2779 ;;		_Lcd_Clear
  2780 ;;		_Lcd_Init
  2781 ;;		_RTC_Init
  2782 ;;		_acaoBombas
  2783 ;;		_acaoTesteBombas
  2784 ;;		_ajusteSP_Bombas
  2785 ;;		_atualizarLCD
  2786 ;;		_btPress
  2787 ;;		_configuraRegistradores
  2788 ;;		_configuraTelefones
  2789 ;;		_configurarEstacionaria
  2790 ;;		_criarCaracteresCGRAM
  2791 ;;		_dataLoger
  2792 ;;		_delay
  2793 ;;		_getDS1307TimeDate
  2794 ;;		_getSinalSIM800L
  2795 ;;		_informacoes
  2796 ;;		_lerParametros
  2797 ;;		_setShiftREG
  2798 ;;		_sprintf
  2799 ;;		_telaPrincipal
  2800 ;;		_tela_ajusteRTC
  2801 ;;		_tela_testeBombas
  2802 ;;		_verificarIntervaloTesteBombas
  2803 ;; This function is called by:
  2804 ;;		Startup code after reset
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text0
  2809  000DD0                     __ptext0:
  2810                           	opt stack 0
  2811  000DD0                     _main:
  2812                           	opt stack 0
  2813  000DD0  FFFF               	dw	65535	; assembler added errata NOP
  2814                           
  2815                           ;Main.c: 68: configuraRegistradores();
  2816                           
  2817                           ;incstack = 0
  2818  000DD2  EC4C  F03B         	call	_configuraRegistradores	;wreg free
  2819                           
  2820                           ;Main.c: 69: I2C_Master_Init(100000);
  2821  000DD6  0EA0               	movlw	160
  2822  000DD8  0100               	movlb	0	; () banked
  2823  000DDA  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2824  000DDC  0E86               	movlw	134
  2825  000DDE  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2826  000DE0  0E01               	movlw	1
  2827  000DE2  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2828  000DE4  0E00               	movlw	0
  2829  000DE6  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2830  000DE8  ECD8  F03B         	call	_I2C_Master_Init	;wreg free
  2831                           
  2832                           ;Main.c: 70: delay(200);
  2833  000DEC  0E00               	movlw	0
  2834  000DEE  0100               	movlb	0	; () banked
  2835  000DF0  6F81               	movwf	(delay@x+1)& (0+255),b
  2836  000DF2  0EC8               	movlw	200
  2837  000DF4  6F80               	movwf	delay@x& (0+255),b
  2838  000DF6  EC68  F038         	call	_delay	;wreg free
  2839                           
  2840                           ;Main.c: 71: RTC_Init();
  2841  000DFA  ECB9  F038         	call	_RTC_Init	;wreg free
  2842                           
  2843                           ;Main.c: 72: delay(100);
  2844  000DFE  0E00               	movlw	0
  2845  000E00  0100               	movlb	0	; () banked
  2846  000E02  6F81               	movwf	(delay@x+1)& (0+255),b
  2847  000E04  0E64               	movlw	100
  2848  000E06  6F80               	movwf	delay@x& (0+255),b
  2849  000E08  EC68  F038         	call	_delay	;wreg free
  2850                           
  2851                           ;Main.c: 73: getDS1307TimeDate(&rtc);
  2852  000E0C  0E73               	movlw	low _rtc
  2853  000E0E  0100               	movlb	0	; () banked
  2854  000E10  6F8C               	movwf	getDS1307TimeDate@ptrToUserVal& (0+255),b
  2855  000E12  0E00               	movlw	high _rtc
  2856  000E14  6F8D               	movwf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  2857  000E16  EC87  F016         	call	_getDS1307TimeDate	;wreg free
  2858                           
  2859                           ;Main.c: 74: Lcd_Init();
  2860  000E1A  EC39  F03D         	call	_Lcd_Init	;wreg free
  2861                           
  2862                           ;Main.c: 75: Lcd_Clear();
  2863  000E1E  EC41  F037         	call	_Lcd_Clear	;wreg free
  2864                           
  2865                           ;Main.c: 76: criarCaracteresCGRAM();
  2866  000E22  EC9F  F01C         	call	_criarCaracteresCGRAM	;wreg free
  2867                           
  2868                           ;Main.c: 77: delay(100);
  2869  000E26  0E00               	movlw	0
  2870  000E28  0100               	movlb	0	; () banked
  2871  000E2A  6F81               	movwf	(delay@x+1)& (0+255),b
  2872  000E2C  0E64               	movlw	100
  2873  000E2E  6F80               	movwf	delay@x& (0+255),b
  2874  000E30  EC68  F038         	call	_delay	;wreg free
  2875                           
  2876                           ;Main.c: 78: lerParametros();
  2877  000E34  ECB8  F017         	call	_lerParametros	;wreg free
  2878                           
  2879                           ;Main.c: 79: delay(50);
  2880  000E38  0E00               	movlw	0
  2881  000E3A  0100               	movlb	0	; () banked
  2882  000E3C  6F81               	movwf	(delay@x+1)& (0+255),b
  2883  000E3E  0E32               	movlw	50
  2884  000E40  6F80               	movwf	delay@x& (0+255),b
  2885  000E42  EC68  F038         	call	_delay	;wreg free
  2886  000E46                     l884:
  2887  000E46  FFFF               	dw	65535	; assembler added errata NOP
  2888  000E48  0004               	clrwdt		;# 
  2889                           
  2890                           ;Main.c: 85: if (!executandoTeste || pressao > 99 || pressao < 0) {
  2891  000E4A  0100               	movlb	0	; () banked
  2892  000E4C  51F2               	movf	_executandoTeste& (0+255),w,b
  2893  000E4E  B4D8               	btfsc	status,2,c
  2894  000E50  D00B               	goto	u8730
  2895                           
  2896                           ; BSR set to: 0
  2897  000E52  BFF9               	btfsc	(_pressao+1)& (0+255),7,b
  2898  000E54  D006               	goto	u8720
  2899  000E56  51F9               	movf	(_pressao+1)& (0+255),w,b
  2900  000E58  E108               	bnz	l7578
  2901  000E5A  0E64               	movlw	100
  2902  000E5C  5DF8               	subwf	_pressao& (0+255),w,b
  2903  000E5E  B0D8               	btfsc	status,0,c
  2904  000E60  D002               	bra	L48
  2905  000E62                     u8720:
  2906  000E62  FFFF               	dw	65535	; assembler added errata NOP
  2907                           
  2908                           ; BSR set to: 0
  2909  000E64  AFF9               	btfss	(_pressao+1)& (0+255),7,b
  2910  000E66                     L48:
  2911  000E66  D001               	bra	l7578
  2912  000E68                     u8730:
  2913  000E68  FFFF               	dw	65535	; assembler added errata NOP
  2914  000E6A                     l7578:
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;Main.c: 86: acaoBombas();
  2918  000E6A  EC21  F017         	call	_acaoBombas	;wreg free
  2919                           
  2920                           ;Main.c: 87: }
  2921                           ;Main.c: 89: verificarIntervaloTesteBombas();
  2922  000E6E  EC23  F03A         	call	_verificarIntervaloTesteBombas	;wreg free
  2923                           
  2924                           ;Main.c: 91: setShiftREG();
  2925  000E72  ECAD  F03A         	call	_setShiftREG	;wreg free
  2926                           
  2927                           ;Main.c: 92: getSinalSIM800L();
  2928  000E76  EC5D  F014         	call	_getSinalSIM800L	;wreg free
  2929                           
  2930                           ;Main.c: 95: switch (menu_posi) {
  2931  000E7A  D085               	goto	l888
  2932  000E7C  FFFF               	dw	65535	; assembler added errata NOP
  2933                           
  2934                           ;Main.c: 97: telaPrincipal();
  2935  000E7E  EC86  F013         	call	_telaPrincipal	;wreg free
  2936                           
  2937                           ;Main.c: 99: break;
  2938  000E82  D0A6               	goto	l890
  2939  000E84  FFFF               	dw	65535	; assembler added errata NOP
  2940                           
  2941                           ;Main.c: 101: sprintf(&line1[1], "DATA/HORA");
  2942  000E86  0E7C               	movlw	low (_line1+1)
  2943  000E88  0100               	movlb	0	; () banked
  2944  000E8A  6FA1               	movwf	sprintf@wh& (0+255),b
  2945  000E8C  0E01               	movlw	high (_line1+1)
  2946  000E8E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2947  000E90  0E56               	movlw	low STR_107
  2948  000E92  6FA3               	movwf	sprintf@f& (0+255),b
  2949  000E94  0E7F               	movlw	high STR_107
  2950  000E96  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2951  000E98  EC89  F03A         	call	_sprintf	;wreg free
  2952                           
  2953                           ;Main.c: 102: sprintf(&line2[1], "PRESSAO DA REDE");
  2954  000E9C  0E67               	movlw	low (_line2+1)
  2955  000E9E  0100               	movlb	0	; () banked
  2956  000EA0  6FA1               	movwf	sprintf@wh& (0+255),b
  2957  000EA2  0E01               	movlw	high (_line2+1)
  2958  000EA4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2959  000EA6  0E28               	movlw	low STR_108
  2960  000EA8  6FA3               	movwf	sprintf@f& (0+255),b
  2961  000EAA  0E7E               	movlw	high STR_108
  2962  000EAC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2963  000EAE  EC89  F03A         	call	_sprintf	;wreg free
  2964                           
  2965                           ;Main.c: 103: sprintf(&line3[1], "PARTIDA COMBUSTAO");
  2966  000EB2  0E52               	movlw	low (_line3+1)
  2967  000EB4  0100               	movlb	0	; () banked
  2968  000EB6  6FA1               	movwf	sprintf@wh& (0+255),b
  2969  000EB8  0E01               	movlw	high (_line3+1)
  2970  000EBA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2971  000EBC  0E8F               	movlw	low STR_109
  2972  000EBE  6FA3               	movwf	sprintf@f& (0+255),b
  2973  000EC0  0E7D               	movlw	high STR_109
  2974  000EC2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2975  000EC4  EC89  F03A         	call	_sprintf	;wreg free
  2976                           
  2977                           ;Main.c: 104: sprintf(&line4[1], "TELEFONES");
  2978  000EC8  0E3D               	movlw	low (_line4+1)
  2979  000ECA  0100               	movlb	0	; () banked
  2980  000ECC  6FA1               	movwf	sprintf@wh& (0+255),b
  2981  000ECE  0E01               	movlw	high (_line4+1)
  2982  000ED0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2983  000ED2  0E6A               	movlw	low STR_110
  2984  000ED4  6FA3               	movwf	sprintf@f& (0+255),b
  2985  000ED6  0E7F               	movlw	high STR_110
  2986  000ED8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  2987  000EDA  EC89  F03A         	call	_sprintf	;wreg free
  2988                           
  2989                           ;Main.c: 105: break;
  2990  000EDE  D078               	goto	l890
  2991  000EE0  FFFF               	dw	65535	; assembler added errata NOP
  2992                           
  2993                           ;Main.c: 107: sprintf(&line1[1], "PERIODO DE TESTES");
  2994  000EE2  0E7C               	movlw	low (_line1+1)
  2995  000EE4  0100               	movlb	0	; () banked
  2996  000EE6  6FA1               	movwf	sprintf@wh& (0+255),b
  2997  000EE8  0E01               	movlw	high (_line1+1)
  2998  000EEA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  2999  000EEC  0EA1               	movlw	low STR_111
  3000  000EEE  6FA3               	movwf	sprintf@f& (0+255),b
  3001  000EF0  0E7D               	movlw	high STR_111
  3002  000EF2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3003  000EF4  EC89  F03A         	call	_sprintf	;wreg free
  3004                           
  3005                           ;Main.c: 108: sprintf(&line2[1], "DATALOGER");
  3006  000EF8  0E67               	movlw	low (_line2+1)
  3007  000EFA  0100               	movlb	0	; () banked
  3008  000EFC  6FA1               	movwf	sprintf@wh& (0+255),b
  3009  000EFE  0E01               	movlw	high (_line2+1)
  3010  000F00  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3011  000F02  0E60               	movlw	low STR_112
  3012  000F04  6FA3               	movwf	sprintf@f& (0+255),b
  3013  000F06  0E7F               	movlw	high STR_112
  3014  000F08  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3015  000F0A  EC89  F03A         	call	_sprintf	;wreg free
  3016                           
  3017                           ;Main.c: 109: sprintf(&line3[1], "INFO VERSAO");
  3018  000F0E  0E52               	movlw	low (_line3+1)
  3019  000F10  0100               	movlb	0	; () banked
  3020  000F12  6FA1               	movwf	sprintf@wh& (0+255),b
  3021  000F14  0E01               	movlw	high (_line3+1)
  3022  000F16  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3023  000F18  0EFC               	movlw	low STR_113
  3024  000F1A  6FA3               	movwf	sprintf@f& (0+255),b
  3025  000F1C  0E7E               	movlw	high STR_113
  3026  000F1E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3027  000F20  EC89  F03A         	call	_sprintf	;wreg free
  3028                           
  3029                           ;Main.c: 110: sprintf(&line4[1], "Iniciar Testes");
  3030  000F24  0E3D               	movlw	low (_line4+1)
  3031  000F26  0100               	movlb	0	; () banked
  3032  000F28  6FA1               	movwf	sprintf@wh& (0+255),b
  3033  000F2A  0E01               	movlw	high (_line4+1)
  3034  000F2C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3035  000F2E  0E92               	movlw	low STR_114
  3036  000F30  6FA3               	movwf	sprintf@f& (0+255),b
  3037  000F32  0E7E               	movlw	high STR_114
  3038  000F34  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3039  000F36  EC89  F03A         	call	_sprintf	;wreg free
  3040                           
  3041                           ;Main.c: 111: break;
  3042  000F3A  D04A               	goto	l890
  3043  000F3C  FFFF               	dw	65535	; assembler added errata NOP
  3044                           
  3045                           ;Main.c: 113: tela_ajusteRTC();
  3046  000F3E  EC94  F00E         	call	_tela_ajusteRTC	;wreg free
  3047                           
  3048                           ;Main.c: 114: break;
  3049  000F42  D046               	goto	l890
  3050  000F44  FFFF               	dw	65535	; assembler added errata NOP
  3051                           
  3052                           ;Main.c: 116: ajusteSP_Bombas();
  3053  000F46  EC4B  F00C         	call	_ajusteSP_Bombas	;wreg free
  3054                           
  3055                           ;Main.c: 117: break;
  3056  000F4A  D042               	goto	l890
  3057  000F4C  FFFF               	dw	65535	; assembler added errata NOP
  3058                           
  3059                           ;Main.c: 119: configurarEstacionaria();
  3060  000F4E  EC30  F015         	call	_configurarEstacionaria	;wreg free
  3061                           
  3062                           ;Main.c: 120: break;
  3063  000F52  D03E               	goto	l890
  3064  000F54  FFFF               	dw	65535	; assembler added errata NOP
  3065                           
  3066                           ;Main.c: 122: configuraTelefones();
  3067  000F56  ECE2  F008         	call	_configuraTelefones	;wreg free
  3068                           
  3069                           ;Main.c: 123: break;
  3070  000F5A  D03A               	goto	l890
  3071  000F5C  FFFF               	dw	65535	; assembler added errata NOP
  3072                           
  3073                           ;Main.c: 125: tela_testeBombas();
  3074  000F5E  ECB6  F011         	call	_tela_testeBombas	;wreg free
  3075                           
  3076                           ;Main.c: 126: break;
  3077  000F62  D036               	goto	l890
  3078  000F64  FFFF               	dw	65535	; assembler added errata NOP
  3079                           
  3080                           ;Main.c: 128: dataLoger();
  3081  000F66  EC78  F00D         	call	_dataLoger	;wreg free
  3082                           
  3083                           ;Main.c: 129: break;
  3084  000F6A  D032               	goto	l890
  3085  000F6C  FFFF               	dw	65535	; assembler added errata NOP
  3086                           
  3087                           ;Main.c: 131: informacoes();
  3088  000F6E  EC7D  F03C         	call	_informacoes	;wreg free
  3089                           
  3090                           ;Main.c: 132: break;
  3091  000F72  D02E               	goto	l890
  3092  000F74  FFFF               	dw	65535	; assembler added errata NOP
  3093                           
  3094                           ;Main.c: 134: acaoTesteBombas();
  3095  000F76  EC91  F004         	call	_acaoTesteBombas	;wreg free
  3096                           
  3097                           ;Main.c: 135: break;
  3098  000F7A  D02A               	goto	l890
  3099  000F7C  FFFF               	dw	65535	; assembler added errata NOP
  3100  000F7E  0E00               	movlw	0
  3101  000F80  0100               	movlb	0	; () banked
  3102  000F82  6FDF               	movwf	_menu_posi& (0+255),b
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;Main.c: 139: }
  3106                           
  3107                           ;Main.c: 138: break;
  3108  000F84  D025               	goto	l890
  3109  000F86                     l888:
  3110  000F86  FFFF               	dw	65535	; assembler added errata NOP
  3111                           
  3112                           ; BSR set to: 0
  3113  000F88  0100               	movlb	0	; () banked
  3114  000F8A  51DF               	movf	_menu_posi& (0+255),w,b
  3115                           
  3116                           ; Switch size 1, requested type "space"
  3117                           ; Number of cases is 11, Range of values is 0 to 28
  3118                           ; switch strategies available:
  3119                           ; Name         Instructions Cycles
  3120                           ; simple_byte           34    18 (average)
  3121                           ;	Chosen strategy is simple_byte
  3122  000F8C  0A00               	xorlw	0	; case 0
  3123  000F8E  B4D8               	btfsc	status,2,c
  3124  000F90  D775               	goto	l889
  3125  000F92  0A01               	xorlw	1	; case 1
  3126  000F94  B4D8               	btfsc	status,2,c
  3127  000F96  D776               	goto	l891
  3128  000F98  0A03               	xorlw	3	; case 2
  3129  000F9A  B4D8               	btfsc	status,2,c
  3130  000F9C  D7A1               	goto	l892
  3131  000F9E  0A16               	xorlw	22	; case 20
  3132  000FA0  B4D8               	btfsc	status,2,c
  3133  000FA2  D7CC               	goto	l893
  3134  000FA4  0A01               	xorlw	1	; case 21
  3135  000FA6  B4D8               	btfsc	status,2,c
  3136  000FA8  D7CD               	goto	l894
  3137  000FAA  0A03               	xorlw	3	; case 22
  3138  000FAC  B4D8               	btfsc	status,2,c
  3139  000FAE  D7CE               	goto	l895
  3140  000FB0  0A01               	xorlw	1	; case 23
  3141  000FB2  B4D8               	btfsc	status,2,c
  3142  000FB4  D7CF               	goto	l896
  3143  000FB6  0A0F               	xorlw	15	; case 24
  3144  000FB8  B4D8               	btfsc	status,2,c
  3145  000FBA  D7D0               	goto	l897
  3146  000FBC  0A01               	xorlw	1	; case 25
  3147  000FBE  B4D8               	btfsc	status,2,c
  3148  000FC0  D7D1               	goto	l898
  3149  000FC2  0A02               	xorlw	2	; case 27
  3150  000FC4  B4D8               	btfsc	status,2,c
  3151  000FC6  D7D2               	goto	l899
  3152  000FC8  0A07               	xorlw	7	; case 28
  3153  000FCA  B4D8               	btfsc	status,2,c
  3154  000FCC  D7D3               	goto	l900
  3155  000FCE  D7D6               	goto	l901
  3156  000FD0                     l890:
  3157  000FD0  FFFF               	dw	65535	; assembler added errata NOP
  3158                           
  3159                           ;Main.c: 141: if (menu_posi == 1 | menu_posi == 2) {
  3160                           
  3161                           ; BSR set to: 0
  3162  000FD2  0100               	movlb	0	; () banked
  3163  000FD4  05DF               	decf	_menu_posi& (0+255),w,b
  3164  000FD6  B4D8               	btfsc	status,2,c
  3165  000FD8  D09C               	goto	l905
  3166                           
  3167                           ; BSR set to: 0
  3168  000FDA  0E02               	movlw	2
  3169  000FDC  19DF               	xorwf	_menu_posi& (0+255),w,b
  3170  000FDE  B4D8               	btfsc	status,2,c
  3171  000FE0  D098               	goto	l905
  3172  000FE2  D0D2               	goto	l929
  3173  000FE4  FFFF               	dw	65535	; assembler added errata NOP
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;Main.c: 145: menu_posi = 1;
  3177                           
  3178                           ; BSR set to: 0
  3179  000FE6  0E01               	movlw	1
  3180  000FE8  6FDF               	movwf	_menu_posi& (0+255),b
  3181                           
  3182                           ;Main.c: 146: line1[0] = '>';
  3183  000FEA  0E3E               	movlw	62
  3184  000FEC  0101               	movlb	1	; () banked
  3185  000FEE  6F7B               	movwf	_line1& (0+255),b
  3186                           
  3187                           ; BSR set to: 1
  3188                           ;Main.c: 147: if (btPress(4)) {
  3189  000FF0  0E04               	movlw	4
  3190  000FF2  EC43  F03C         	call	_btPress
  3191  000FF6  0900               	iorlw	0
  3192  000FF8  B4D8               	btfsc	status,2,c
  3193  000FFA  D0A6               	goto	l908
  3194                           
  3195                           ;Main.c: 148: _menu_posi = menu_posi;
  3196  000FFC  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3197                           
  3198                           ;Main.c: 149: menu_posi = 20;
  3199  001000  0E14               	movlw	20
  3200  001002  D065               	goto	L5
  3201  001004  FFFF               	dw	65535	; assembler added errata NOP
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;Main.c: 153: menu_posi = 1;
  3205                           
  3206                           ; BSR set to: 0
  3207  001006  0E01               	movlw	1
  3208  001008  6FDF               	movwf	_menu_posi& (0+255),b
  3209                           
  3210                           ;Main.c: 154: line2[0] = '>';
  3211  00100A  0E3E               	movlw	62
  3212  00100C  0101               	movlb	1	; () banked
  3213  00100E  6F66               	movwf	_line2& (0+255),b
  3214                           
  3215                           ; BSR set to: 1
  3216                           ;Main.c: 155: if (btPress(4)) {
  3217  001010  0E04               	movlw	4
  3218  001012  EC43  F03C         	call	_btPress
  3219  001016  0900               	iorlw	0
  3220  001018  B4D8               	btfsc	status,2,c
  3221  00101A  D096               	goto	l908
  3222                           
  3223                           ;Main.c: 156: _menu_posi = menu_posi;
  3224  00101C  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3225                           
  3226                           ;Main.c: 157: menu_posi = 21;
  3227  001020  0E15               	movlw	21
  3228  001022  D055               	goto	L5
  3229  001024  FFFF               	dw	65535	; assembler added errata NOP
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;Main.c: 161: menu_posi = 1;
  3233                           
  3234                           ; BSR set to: 0
  3235  001026  0E01               	movlw	1
  3236  001028  6FDF               	movwf	_menu_posi& (0+255),b
  3237                           
  3238                           ;Main.c: 162: line3[0] = '>';
  3239  00102A  0E3E               	movlw	62
  3240  00102C  0101               	movlb	1	; () banked
  3241  00102E  6F51               	movwf	_line3& (0+255),b
  3242                           
  3243                           ; BSR set to: 1
  3244                           ;Main.c: 163: if (btPress(4)) {
  3245  001030  0E04               	movlw	4
  3246  001032  EC43  F03C         	call	_btPress
  3247  001036  0900               	iorlw	0
  3248  001038  B4D8               	btfsc	status,2,c
  3249  00103A  D086               	goto	l908
  3250                           
  3251                           ;Main.c: 164: _menu_posi = menu_posi;
  3252  00103C  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3253                           
  3254                           ;Main.c: 165: menu_posi = 22;
  3255  001040  0E16               	movlw	22
  3256  001042  D045               	goto	L5
  3257  001044  FFFF               	dw	65535	; assembler added errata NOP
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;Main.c: 169: menu_posi = 1;
  3261                           
  3262                           ; BSR set to: 0
  3263  001046  0E01               	movlw	1
  3264  001048  6FDF               	movwf	_menu_posi& (0+255),b
  3265                           
  3266                           ;Main.c: 170: line4[0] = '>';
  3267  00104A  0E3E               	movlw	62
  3268  00104C  0101               	movlb	1	; () banked
  3269  00104E  6F3C               	movwf	_line4& (0+255),b
  3270                           
  3271                           ; BSR set to: 1
  3272                           ;Main.c: 171: if (btPress(4)) {
  3273  001050  0E04               	movlw	4
  3274  001052  EC43  F03C         	call	_btPress
  3275  001056  0900               	iorlw	0
  3276  001058  B4D8               	btfsc	status,2,c
  3277  00105A  D076               	goto	l908
  3278                           
  3279                           ;Main.c: 172: _menu_posi = menu_posi;
  3280  00105C  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3281                           
  3282                           ;Main.c: 173: menu_posi = 23;
  3283  001060  0E17               	movlw	23
  3284  001062  D035               	goto	L5
  3285  001064  FFFF               	dw	65535	; assembler added errata NOP
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;Main.c: 177: menu_posi = 2;
  3289                           
  3290                           ; BSR set to: 0
  3291  001066  0E02               	movlw	2
  3292  001068  6FDF               	movwf	_menu_posi& (0+255),b
  3293                           
  3294                           ;Main.c: 178: line1[0] = '>';
  3295  00106A  0E3E               	movlw	62
  3296  00106C  0101               	movlb	1	; () banked
  3297  00106E  6F7B               	movwf	_line1& (0+255),b
  3298                           
  3299                           ; BSR set to: 1
  3300                           ;Main.c: 179: if (btPress(4)) {
  3301  001070  0E04               	movlw	4
  3302  001072  EC43  F03C         	call	_btPress
  3303  001076  0900               	iorlw	0
  3304  001078  B4D8               	btfsc	status,2,c
  3305  00107A  D066               	goto	l908
  3306                           
  3307                           ;Main.c: 180: _menu_posi = menu_posi;
  3308  00107C  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3309                           
  3310                           ;Main.c: 181: menu_posi = 24;
  3311  001080  0E18               	movlw	24
  3312  001082  D025               	goto	L5
  3313  001084  FFFF               	dw	65535	; assembler added errata NOP
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;Main.c: 185: line2[0] = '>';
  3317                           
  3318                           ; BSR set to: 0
  3319  001086  0E3E               	movlw	62
  3320  001088  0101               	movlb	1	; () banked
  3321  00108A  6F66               	movwf	_line2& (0+255),b
  3322                           
  3323                           ;Main.c: 186: menu_posi = 2;
  3324  00108C  0E02               	movlw	2
  3325  00108E  0100               	movlb	0	; () banked
  3326  001090  6FDF               	movwf	_menu_posi& (0+255),b
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;Main.c: 187: if (btPress(4)) {
  3330  001092  0E04               	movlw	4
  3331  001094  EC43  F03C         	call	_btPress
  3332  001098  0900               	iorlw	0
  3333  00109A  B4D8               	btfsc	status,2,c
  3334  00109C  D055               	goto	l908
  3335                           
  3336                           ;Main.c: 188: _menu_posi = menu_posi;
  3337  00109E  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3338                           
  3339                           ;Main.c: 189: menu_posi = 25;
  3340  0010A2  0E19               	movlw	25
  3341  0010A4  0100               	movlb	0	; () banked
  3342  0010A6  6FDF               	movwf	_menu_posi& (0+255),b
  3343                           
  3344                           ;Main.c: 190: dtl_carregar_log = 1;
  3345  0010A8  0E01               	movlw	1
  3346  0010AA  6E55               	movwf	_dtl_carregar_log,c
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;Main.c: 191: }
  3350                           ;Main.c: 192: break;
  3351  0010AC  D04D               	goto	l908
  3352  0010AE  FFFF               	dw	65535	; assembler added errata NOP
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;Main.c: 194: line3[0] = '>';
  3356                           
  3357                           ; BSR set to: 0
  3358  0010B0  0E3E               	movlw	62
  3359  0010B2  0101               	movlb	1	; () banked
  3360  0010B4  6F51               	movwf	_line3& (0+255),b
  3361                           
  3362                           ;Main.c: 195: menu_posi = 2;
  3363  0010B6  0E02               	movlw	2
  3364  0010B8  0100               	movlb	0	; () banked
  3365  0010BA  6FDF               	movwf	_menu_posi& (0+255),b
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;Main.c: 196: if (btPress(4)) {
  3369  0010BC  0E04               	movlw	4
  3370  0010BE  EC43  F03C         	call	_btPress
  3371  0010C2  0900               	iorlw	0
  3372  0010C4  B4D8               	btfsc	status,2,c
  3373  0010C6  D040               	goto	l908
  3374                           
  3375                           ;Main.c: 197: _menu_posi = menu_posi;
  3376  0010C8  C0DF  F0DE         	movff	_menu_posi,__menu_posi
  3377                           
  3378                           ;Main.c: 198: menu_posi = 27;
  3379  0010CC  0E1B               	movlw	27
  3380  0010CE                     L5:
  3381  0010CE  FFFF               	dw	65535	; assembler added errata NOP
  3382  0010D0  0100               	movlb	0	; () banked
  3383  0010D2  D01C               	goto	L6
  3384  0010D4  FFFF               	dw	65535	; assembler added errata NOP
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;Main.c: 202: line4[0] = '>';
  3388                           
  3389                           ; BSR set to: 0
  3390  0010D6  0E3E               	movlw	62
  3391  0010D8  0101               	movlb	1	; () banked
  3392  0010DA  6F3C               	movwf	_line4& (0+255),b
  3393                           
  3394                           ;Main.c: 203: menu_posi = 2;
  3395  0010DC  0E02               	movlw	2
  3396  0010DE  0100               	movlb	0	; () banked
  3397  0010E0  6FDF               	movwf	_menu_posi& (0+255),b
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;Main.c: 204: if (btPress(4)) {
  3401  0010E2  0E04               	movlw	4
  3402  0010E4  EC43  F03C         	call	_btPress
  3403  0010E8  0900               	iorlw	0
  3404  0010EA  B4D8               	btfsc	status,2,c
  3405  0010EC  D02D               	goto	l908
  3406                           
  3407                           ;Main.c: 205: if (!ocorrendoIncendio) {
  3408  0010EE  0100               	movlb	0	; () banked
  3409  0010F0  51F3               	movf	_ocorrendoIncendio& (0+255),w,b
  3410  0010F2  A4D8               	btfss	status,2,c
  3411  0010F4  D029               	goto	l908
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;Main.c: 206: menu_posi = 28;
  3415  0010F6  0E1C               	movlw	28
  3416  0010F8  6FDF               	movwf	_menu_posi& (0+255),b
  3417                           
  3418                           ;Main.c: 207: executandoTeste = 1;
  3419  0010FA  0E01               	movlw	1
  3420  0010FC  6FF2               	movwf	_executandoTeste& (0+255),b
  3421                           
  3422                           ;Main.c: 208: etapaTesteBombas = 0;
  3423  0010FE  0E00               	movlw	0
  3424  001100  6E71               	movwf	_etapaTesteBombas,c
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;Main.c: 209: }
  3428                           ;Main.c: 210: }
  3429                           ;Main.c: 211: break;
  3430                           
  3431                           ; BSR set to: 0
  3432  001102  D022               	goto	l908
  3433  001104  FFFF               	dw	65535	; assembler added errata NOP
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;Main.c: 213: sub_menu_posi = 1;
  3437                           
  3438                           ; BSR set to: 0
  3439  001106  0E01               	movlw	1
  3440  001108  6E69               	movwf	_sub_menu_posi,c
  3441                           
  3442                           ;Main.c: 214: menu_posi = 1;
  3443  00110A  0E01               	movlw	1
  3444  00110C                     L6:
  3445  00110C  FFFF               	dw	65535	; assembler added errata NOP
  3446  00110E  6FDF               	movwf	_menu_posi& (0+255),b
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;Main.c: 216: }
  3450                           
  3451                           ;Main.c: 215: break;
  3452  001110  D01B               	goto	l908
  3453  001112                     l905:
  3454  001112  FFFF               	dw	65535	; assembler added errata NOP
  3455                           
  3456                           ; BSR set to: 0
  3457                           
  3458                           ; BSR set to: 0
  3459  001114  5069               	movf	_sub_menu_posi,w,c
  3460                           
  3461                           ; Switch size 1, requested type "space"
  3462                           ; Number of cases is 8, Range of values is 1 to 8
  3463                           ; switch strategies available:
  3464                           ; Name         Instructions Cycles
  3465                           ; simple_byte           25    13 (average)
  3466                           ;	Chosen strategy is simple_byte
  3467  001116  0A01               	xorlw	1	; case 1
  3468  001118  B4D8               	btfsc	status,2,c
  3469  00111A  D764               	goto	l906
  3470  00111C  0A03               	xorlw	3	; case 2
  3471  00111E  B4D8               	btfsc	status,2,c
  3472  001120  D771               	goto	l909
  3473  001122  0A01               	xorlw	1	; case 3
  3474  001124  B4D8               	btfsc	status,2,c
  3475  001126  D77E               	goto	l911
  3476  001128  0A07               	xorlw	7	; case 4
  3477  00112A  B4D8               	btfsc	status,2,c
  3478  00112C  D78B               	goto	l913
  3479  00112E  0A01               	xorlw	1	; case 5
  3480  001130  B4D8               	btfsc	status,2,c
  3481  001132  D798               	goto	l915
  3482  001134  0A03               	xorlw	3	; case 6
  3483  001136  B4D8               	btfsc	status,2,c
  3484  001138  D7A5               	goto	l917
  3485  00113A  0A01               	xorlw	1	; case 7
  3486  00113C  B4D8               	btfsc	status,2,c
  3487  00113E  D7B7               	goto	l919
  3488  001140  0A0F               	xorlw	15	; case 8
  3489  001142  B4D8               	btfsc	status,2,c
  3490  001144  D7C7               	goto	l921
  3491  001146  D7DE               	goto	l924
  3492  001148                     l908:
  3493  001148  FFFF               	dw	65535	; assembler added errata NOP
  3494                           
  3495                           ;Main.c: 218: if (btPress(3)) {
  3496                           
  3497                           ; BSR set to: 0
  3498  00114A  0E03               	movlw	3
  3499  00114C  EC43  F03C         	call	_btPress
  3500  001150  0900               	iorlw	0
  3501  001152  B4D8               	btfsc	status,2,c
  3502  001154  D002               	goto	l925
  3503                           
  3504                           ;Main.c: 219: sub_menu_posi--;
  3505  001156  0669               	decf	_sub_menu_posi,f,c
  3506                           
  3507                           ;Main.c: 220: } else if (btPress(2)) {
  3508  001158  D017               	goto	l929
  3509  00115A                     l925:
  3510  00115A  FFFF               	dw	65535	; assembler added errata NOP
  3511  00115C  0E02               	movlw	2
  3512  00115E  EC43  F03C         	call	_btPress
  3513  001162  0900               	iorlw	0
  3514  001164  B4D8               	btfsc	status,2,c
  3515  001166  D002               	goto	l927
  3516                           
  3517                           ;Main.c: 221: sub_menu_posi++;
  3518  001168  2A69               	incf	_sub_menu_posi,f,c
  3519                           
  3520                           ;Main.c: 222: } else if (btPress(1)) {
  3521  00116A  D00E               	goto	l929
  3522  00116C                     l927:
  3523  00116C  FFFF               	dw	65535	; assembler added errata NOP
  3524  00116E  0E01               	movlw	1
  3525  001170  EC43  F03C         	call	_btPress
  3526  001174  0900               	iorlw	0
  3527  001176  B4D8               	btfsc	status,2,c
  3528  001178  D007               	goto	l929
  3529                           
  3530                           ;Main.c: 223: menu_posi = 0;
  3531  00117A  0E00               	movlw	0
  3532  00117C  0100               	movlb	0	; () banked
  3533  00117E  6FDF               	movwf	_menu_posi& (0+255),b
  3534                           
  3535                           ;Main.c: 224: option_posi = 0;
  3536  001180  0E00               	movlw	0
  3537  001182  6FE0               	movwf	_option_posi& (0+255),b
  3538                           
  3539                           ;Main.c: 225: sub_menu_posi = 1;
  3540  001184  0E01               	movlw	1
  3541  001186  6E69               	movwf	_sub_menu_posi,c
  3542  001188                     l929:
  3543  001188  FFFF               	dw	65535	; assembler added errata NOP
  3544                           
  3545                           ;Main.c: 226: }
  3546                           ;Main.c: 227: }
  3547                           ;Main.c: 229: if (menu_posi != 28) {
  3548                           
  3549                           ; BSR set to: 0
  3550                           
  3551                           ; BSR set to: 0
  3552                           
  3553                           ; BSR set to: 0
  3554                           
  3555                           ; BSR set to: 0
  3556  00118A  0E1C               	movlw	28
  3557  00118C  0100               	movlb	0	; () banked
  3558  00118E  19DF               	xorwf	_menu_posi& (0+255),w,b
  3559  001190  B4D8               	btfsc	status,2,c
  3560  001192  D004               	goto	l930
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;Main.c: 230: executandoTeste = 0;
  3564  001194  0E00               	movlw	0
  3565  001196  6FF2               	movwf	_executandoTeste& (0+255),b
  3566                           
  3567                           ;Main.c: 231: shift[2] = 0;
  3568  001198  0E00               	movlw	0
  3569  00119A  6E46               	movwf	_shift+2,c
  3570  00119C                     l930:
  3571  00119C  FFFF               	dw	65535	; assembler added errata NOP
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;Main.c: 232: }
  3575                           ;Main.c: 233: atualizarLCD(line1, line2, line3, line4);
  3576                           
  3577                           ; BSR set to: 0
  3578  00119E  0E7B               	movlw	low _line1
  3579  0011A0  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3580  0011A2  0E01               	movlw	high _line1
  3581  0011A4  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3582  0011A6  0E66               	movlw	low _line2
  3583  0011A8  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3584  0011AA  0E01               	movlw	high _line2
  3585  0011AC  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3586  0011AE  0E51               	movlw	low _line3
  3587  0011B0  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3588  0011B2  0E01               	movlw	high _line3
  3589  0011B4  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3590  0011B6  0E3C               	movlw	low _line4
  3591  0011B8  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3592  0011BA  0E01               	movlw	high _line4
  3593  0011BC  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3594  0011BE  EC36  F01C         	call	_atualizarLCD	;wreg free
  3595  0011C2  D641               	goto	l884
  3596  0011C4                     __end_of_main:
  3597                           	opt stack 0
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           postinc0	equ	0xFEE
  3603                           wreg	equ	0xFE8
  3604                           postdec1	equ	0xFE5
  3605                           fsr1l	equ	0xFE1
  3606                           status	equ	0xFD8
  3607                           
  3608 ;; *************** function _verificarIntervaloTesteBombas *****************
  3609 ;; Defined at:
  3610 ;;		line 114 in file "controle.h"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;		None
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;		None
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  1    wreg      void 
  3617 ;; Registers used:
  3618 ;;		wreg, status,2, status,0, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3624 ;;      Params:         0       0       0       0       0       0       0
  3625 ;;      Locals:         0       0       0       0       0       0       0
  3626 ;;      Temps:          0       0       0       0       0       0       0
  3627 ;;      Totals:         0       0       0       0       0       0       0
  3628 ;;Total ram usage:        0 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    9
  3631 ;; This function calls:
  3632 ;;		_writeEEPROM_ext
  3633 ;; This function is called by:
  3634 ;;		_main
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           	psect	text1
  3639  007446                     __ptext1:
  3640                           	opt stack 0
  3641  007446                     _verificarIntervaloTesteBombas:
  3642                           	opt stack 0
  3643  007446  FFFF               	dw	65535	; assembler added errata NOP
  3644                           
  3645                           ;controle.h: 115: if (dias_restante_teste >= intervalo_teste_dia && habilitaTesteAutomat
      +                          ico == 1 && !executandoTeste) {
  3646                           
  3647                           ;incstack = 0
  3648  007448  0100               	movlb	0	; () banked
  3649  00744A  51E9               	movf	_intervalo_teste_dia& (0+255),w,b
  3650  00744C  5DE8               	subwf	_dias_restante_teste& (0+255),w,b
  3651  00744E  A0D8               	btfss	status,0,c
  3652  007450  D018               	goto	l503
  3653                           
  3654                           ; BSR set to: 0
  3655  007452  05F0               	decf	_habilitaTesteAutomatico& (0+255),w,b
  3656  007454  A4D8               	btfss	status,2,c
  3657  007456  D015               	goto	l503
  3658                           
  3659                           ; BSR set to: 0
  3660  007458  51F2               	movf	_executandoTeste& (0+255),w,b
  3661  00745A  A4D8               	btfss	status,2,c
  3662  00745C  D012               	goto	l503
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;controle.h: 116: if (_hor == horario_de_teste) {
  3666  00745E  51E7               	movf	_horario_de_teste& (0+255),w,b
  3667  007460  19ED               	xorwf	__hor& (0+255),w,b
  3668  007462  A4D8               	btfss	status,2,c
  3669  007464  D00E               	goto	l503
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;controle.h: 117: dias_restante_teste = 0;
  3673  007466  0E00               	movlw	0
  3674  007468  6FE8               	movwf	_dias_restante_teste& (0+255),b
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;controle.h: 118: writeEEPROM_ext(10, dias_restante_teste);
  3678  00746A  C0E8  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
  3679  00746E  0E0A               	movlw	10
  3680  007470  EC66  F03A         	call	_writeEEPROM_ext
  3681                           
  3682                           ;controle.h: 119: etapaTesteBombas = 0;
  3683  007474  0E00               	movlw	0
  3684  007476  6E71               	movwf	_etapaTesteBombas,c
  3685                           
  3686                           ;controle.h: 120: executandoTeste = 1;
  3687  007478  0E01               	movlw	1
  3688  00747A  0100               	movlb	0	; () banked
  3689  00747C  6FF2               	movwf	_executandoTeste& (0+255),b
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;controle.h: 121: menu_posi = 28;
  3693  00747E  0E1C               	movlw	28
  3694  007480  6FDF               	movwf	_menu_posi& (0+255),b
  3695  007482                     l503:
  3696  007482  FFFF               	dw	65535	; assembler added errata NOP
  3697                           
  3698                           ; BSR set to: 0
  3699                           
  3700                           ; BSR set to: 0
  3701                           
  3702                           ; BSR set to: 0
  3703  007484  0012               	return		;funcret
  3704  007486  FFFF               	dw	65535	; errata NOP
  3705  007488                     __end_of_verificarIntervaloTesteBombas:
  3706                           	opt stack 0
  3707                           tblptru	equ	0xFF8
  3708                           tblptrh	equ	0xFF7
  3709                           tblptrl	equ	0xFF6
  3710                           tablat	equ	0xFF5
  3711                           postinc0	equ	0xFEE
  3712                           wreg	equ	0xFE8
  3713                           postdec1	equ	0xFE5
  3714                           fsr1l	equ	0xFE1
  3715                           status	equ	0xFD8
  3716                           
  3717 ;; *************** function _tela_testeBombas *****************
  3718 ;; Defined at:
  3719 ;;		line 8 in file "tela_TESTE_BOMBAS.h"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;		None
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;		None
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  1    wreg      void 
  3726 ;; Registers used:
  3727 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3733 ;;      Params:         0       0       0       0       0       0       0
  3734 ;;      Locals:         0       2       0       0       0       0       0
  3735 ;;      Temps:          0       2       0       0       0       0       0
  3736 ;;      Totals:         0       4       0       0       0       0       0
  3737 ;;Total ram usage:        4 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; Hardware stack levels required when called:    9
  3740 ;; This function calls:
  3741 ;;		_blink
  3742 ;;		_btPress
  3743 ;;		_sprintf
  3744 ;;		_writeEEPROM_ext
  3745 ;; This function is called by:
  3746 ;;		_main
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text2
  3751  00236C                     __ptext2:
  3752                           	opt stack 0
  3753  00236C                     _tela_testeBombas:
  3754                           	opt stack 0
  3755  00236C  FFFF               	dw	65535	; assembler added errata NOP
  3756                           
  3757                           ;tela_TESTE_BOMBAS.h: 10: sprintf(line1, "#Proximo em %2d dias", (intervalo_teste_dia - 
      +                          dias_restante_teste));
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;incstack = 0
  3761  00236E  0E7B               	movlw	low _line1
  3762  002370  0100               	movlb	0	; () banked
  3763  002372  6FA1               	movwf	sprintf@wh& (0+255),b
  3764  002374  0E01               	movlw	high _line1
  3765  002376  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3766  002378  0E93               	movlw	low STR_66
  3767  00237A  6FA3               	movwf	sprintf@f& (0+255),b
  3768  00237C  0E7C               	movlw	high STR_66
  3769  00237E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3770  002380  51E8               	movf	_dias_restante_teste& (0+255),w,b
  3771  002382  6FB5               	movwf	??_tela_testeBombas& (0+255),b
  3772  002384  6BB6               	clrf	(??_tela_testeBombas+1)& (0+255),b
  3773  002386  1FB5               	comf	??_tela_testeBombas& (0+255),f,b
  3774  002388  1FB6               	comf	(??_tela_testeBombas+1)& (0+255),f,b
  3775  00238A  4BB5               	infsnz	??_tela_testeBombas& (0+255),f,b
  3776  00238C  2BB6               	incf	(??_tela_testeBombas+1)& (0+255),f,b
  3777  00238E  51E9               	movf	_intervalo_teste_dia& (0+255),w,b
  3778  002390  25B5               	addwf	??_tela_testeBombas& (0+255),w,b
  3779  002392  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3780  002394  0E00               	movlw	0
  3781  002396  21B6               	addwfc	(??_tela_testeBombas+1)& (0+255),w,b
  3782  002398  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3783  00239A  EC89  F03A         	call	_sprintf	;wreg free
  3784                           
  3785                           ;tela_TESTE_BOMBAS.h: 11: sprintf(line2, "INTERVALO: %2d dias", intervalo_teste_dia);
  3786  00239E  0E66               	movlw	low _line2
  3787  0023A0  0100               	movlb	0	; () banked
  3788  0023A2  6FA1               	movwf	sprintf@wh& (0+255),b
  3789  0023A4  0E01               	movlw	high _line2
  3790  0023A6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3791  0023A8  0EBC               	movlw	low STR_67
  3792  0023AA  6FA3               	movwf	sprintf@f& (0+255),b
  3793  0023AC  0E7C               	movlw	high STR_67
  3794  0023AE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3795  0023B0  C0E9  F0A5         	movff	_intervalo_teste_dia,?_sprintf+4
  3796  0023B4  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3797  0023B6  EC89  F03A         	call	_sprintf	;wreg free
  3798                           
  3799                           ;tela_TESTE_BOMBAS.h: 12: sprintf(line3, "HORARIO: %02d horas", horario_de_teste);
  3800  0023BA  0E51               	movlw	low _line3
  3801  0023BC  0100               	movlb	0	; () banked
  3802  0023BE  6FA1               	movwf	sprintf@wh& (0+255),b
  3803  0023C0  0E01               	movlw	high _line3
  3804  0023C2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3805  0023C4  0ED0               	movlw	low STR_68
  3806  0023C6  6FA3               	movwf	sprintf@f& (0+255),b
  3807  0023C8  0E7C               	movlw	high STR_68
  3808  0023CA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3809  0023CC  C0E7  F0A5         	movff	_horario_de_teste,?_sprintf+4
  3810  0023D0  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  3811  0023D2  EC89  F03A         	call	_sprintf	;wreg free
  3812                           
  3813                           ;tela_TESTE_BOMBAS.h: 13: sprintf(line4, "ATIVAR: %s", habilitaTesteAutomatico == 0 ? "N
      +                          ao" : "Sim");
  3814  0023D6  0100               	movlb	0	; () banked
  3815  0023D8  51F0               	movf	_habilitaTesteAutomatico& (0+255),w,b
  3816  0023DA  B4D8               	btfsc	status,2,c
  3817  0023DC  D004               	goto	l714
  3818                           
  3819                           ; BSR set to: 0
  3820  0023DE  0EF1               	movlw	low STR_71
  3821  0023E0  6FB7               	movwf	_tela_testeBombas$1412& (0+255),b
  3822  0023E2  0E7F               	movlw	high STR_71
  3823  0023E4  D004               	goto	L7
  3824  0023E6                     l714:
  3825  0023E6  FFFF               	dw	65535	; assembler added errata NOP
  3826                           
  3827                           ; BSR set to: 0
  3828                           
  3829                           ; BSR set to: 0
  3830  0023E8  0EF5               	movlw	low STR_70
  3831  0023EA  6FB7               	movwf	_tela_testeBombas$1412& (0+255),b
  3832  0023EC  0E7F               	movlw	high STR_70
  3833  0023EE                     L7:
  3834  0023EE  FFFF               	dw	65535	; assembler added errata NOP
  3835  0023F0  6FB8               	movwf	(_tela_testeBombas$1412+1)& (0+255),b
  3836                           
  3837                           ; BSR set to: 0
  3838                           
  3839                           ; BSR set to: 0
  3840  0023F2  0E3C               	movlw	low _line4
  3841  0023F4  6FA1               	movwf	sprintf@wh& (0+255),b
  3842  0023F6  0E01               	movlw	high _line4
  3843  0023F8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3844  0023FA  0E4B               	movlw	low STR_69
  3845  0023FC  6FA3               	movwf	sprintf@f& (0+255),b
  3846  0023FE  0E7F               	movlw	high STR_69
  3847  002400  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3848  002402  C0B7  F0A5         	movff	_tela_testeBombas$1412,?_sprintf+4
  3849  002406  C0B8  F0A6         	movff	_tela_testeBombas$1412+1,?_sprintf+5
  3850  00240A  EC89  F03A         	call	_sprintf	;wreg free
  3851                           
  3852                           ;tela_TESTE_BOMBAS.h: 15: if (btPress(1)) {
  3853  00240E  0E01               	movlw	1
  3854  002410  EC43  F03C         	call	_btPress
  3855  002414  0900               	iorlw	0
  3856  002416  B4D8               	btfsc	status,2,c
  3857  002418  D011               	goto	l717
  3858                           
  3859                           ;tela_TESTE_BOMBAS.h: 16: writeEEPROM_ext(6, intervalo_teste_dia);
  3860  00241A  C0E9  F08C         	movff	_intervalo_teste_dia,writeEEPROM_ext@data
  3861  00241E  0E06               	movlw	6
  3862  002420  EC66  F03A         	call	_writeEEPROM_ext
  3863                           
  3864                           ;tela_TESTE_BOMBAS.h: 17: writeEEPROM_ext(11, horario_de_teste);
  3865  002424  C0E7  F08C         	movff	_horario_de_teste,writeEEPROM_ext@data
  3866  002428  0E0B               	movlw	11
  3867  00242A  EC66  F03A         	call	_writeEEPROM_ext
  3868                           
  3869                           ;tela_TESTE_BOMBAS.h: 18: writeEEPROM_ext(15, habilitaTesteAutomatico);
  3870  00242E  C0F0  F08C         	movff	_habilitaTesteAutomatico,writeEEPROM_ext@data
  3871  002432  0E0F               	movlw	15
  3872  002434  EC66  F03A         	call	_writeEEPROM_ext
  3873                           
  3874                           ;tela_TESTE_BOMBAS.h: 19: menu_posi = _menu_posi;
  3875  002438  C0DE  F0DF         	movff	__menu_posi,_menu_posi
  3876  00243C                     l717:
  3877  00243C  FFFF               	dw	65535	; assembler added errata NOP
  3878                           
  3879                           ;tela_TESTE_BOMBAS.h: 20: }
  3880                           ;tela_TESTE_BOMBAS.h: 21: if (btPress(4)) {
  3881  00243E  0E04               	movlw	4
  3882  002440  EC43  F03C         	call	_btPress
  3883  002444  0900               	iorlw	0
  3884  002446  B4D8               	btfsc	status,2,c
  3885  002448  D069               	goto	l719
  3886                           
  3887                           ;tela_TESTE_BOMBAS.h: 22: option_posi++;
  3888  00244A  0100               	movlb	0	; () banked
  3889  00244C  2BE0               	incf	_option_posi& (0+255),f,b
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;tela_TESTE_BOMBAS.h: 23: }
  3893                           ;tela_TESTE_BOMBAS.h: 24: switch (option_posi) {
  3894  00244E  D066               	goto	l719
  3895  002450  FFFF               	dw	65535	; assembler added errata NOP
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;tela_TESTE_BOMBAS.h: 26: blink(line2, 11, 14);
  3899                           
  3900                           ; BSR set to: 0
  3901  002452  0E66               	movlw	low _line2
  3902  002454  6F80               	movwf	blink@line& (0+255),b
  3903  002456  0E01               	movlw	high _line2
  3904  002458  6F81               	movwf	(blink@line+1)& (0+255),b
  3905  00245A  0E0B               	movlw	11
  3906  00245C  6F82               	movwf	blink@start& (0+255),b
  3907  00245E  0E0E               	movlw	14
  3908  002460  6F83               	movwf	blink@end& (0+255),b
  3909  002462  ECA2  F039         	call	_blink	;wreg free
  3910                           
  3911                           ;tela_TESTE_BOMBAS.h: 27: if (btPress(3)) {
  3912  002466  0E03               	movlw	3
  3913  002468  EC43  F03C         	call	_btPress
  3914  00246C  0900               	iorlw	0
  3915  00246E  B4D8               	btfsc	status,2,c
  3916  002470  D002               	goto	l721
  3917                           
  3918                           ;tela_TESTE_BOMBAS.h: 28: intervalo_teste_dia++;
  3919  002472  0100               	movlb	0	; () banked
  3920  002474  2BE9               	incf	_intervalo_teste_dia& (0+255),f,b
  3921  002476                     l721:
  3922  002476  FFFF               	dw	65535	; assembler added errata NOP
  3923                           
  3924                           ;tela_TESTE_BOMBAS.h: 29: }
  3925                           ;tela_TESTE_BOMBAS.h: 30: if (btPress(2)) {
  3926                           
  3927                           ; BSR set to: 0
  3928  002478  0E02               	movlw	2
  3929  00247A  EC43  F03C         	call	_btPress
  3930  00247E  0900               	iorlw	0
  3931  002480  B4D8               	btfsc	status,2,c
  3932  002482  D059               	goto	l723
  3933                           
  3934                           ;tela_TESTE_BOMBAS.h: 31: intervalo_teste_dia--;
  3935  002484  0100               	movlb	0	; () banked
  3936  002486  07E9               	decf	_intervalo_teste_dia& (0+255),f,b
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;tela_TESTE_BOMBAS.h: 32: }
  3940                           ;tela_TESTE_BOMBAS.h: 33: break;
  3941  002488  D056               	goto	l723
  3942  00248A  FFFF               	dw	65535	; assembler added errata NOP
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;tela_TESTE_BOMBAS.h: 35: blink(line3, 9, 11);
  3946                           
  3947                           ; BSR set to: 0
  3948  00248C  0E51               	movlw	low _line3
  3949  00248E  6F80               	movwf	blink@line& (0+255),b
  3950  002490  0E01               	movlw	high _line3
  3951  002492  6F81               	movwf	(blink@line+1)& (0+255),b
  3952  002494  0E09               	movlw	9
  3953  002496  6F82               	movwf	blink@start& (0+255),b
  3954  002498  0E0B               	movlw	11
  3955  00249A  6F83               	movwf	blink@end& (0+255),b
  3956  00249C  ECA2  F039         	call	_blink	;wreg free
  3957                           
  3958                           ;tela_TESTE_BOMBAS.h: 36: if (btPress(3)) {
  3959  0024A0  0E03               	movlw	3
  3960  0024A2  EC43  F03C         	call	_btPress
  3961  0024A6  0900               	iorlw	0
  3962  0024A8  B4D8               	btfsc	status,2,c
  3963  0024AA  D002               	goto	l725
  3964                           
  3965                           ;tela_TESTE_BOMBAS.h: 37: horario_de_teste++;
  3966  0024AC  0100               	movlb	0	; () banked
  3967  0024AE  2BE7               	incf	_horario_de_teste& (0+255),f,b
  3968  0024B0                     l725:
  3969  0024B0  FFFF               	dw	65535	; assembler added errata NOP
  3970                           
  3971                           ;tela_TESTE_BOMBAS.h: 38: }
  3972                           ;tela_TESTE_BOMBAS.h: 39: if (btPress(2)) {
  3973                           
  3974                           ; BSR set to: 0
  3975  0024B2  0E02               	movlw	2
  3976  0024B4  EC43  F03C         	call	_btPress
  3977  0024B8  0900               	iorlw	0
  3978  0024BA  B4D8               	btfsc	status,2,c
  3979  0024BC  D002               	goto	l726
  3980                           
  3981                           ;tela_TESTE_BOMBAS.h: 40: horario_de_teste--;
  3982  0024BE  0100               	movlb	0	; () banked
  3983  0024C0  07E7               	decf	_horario_de_teste& (0+255),f,b
  3984  0024C2                     l726:
  3985  0024C2  FFFF               	dw	65535	; assembler added errata NOP
  3986                           
  3987                           ;tela_TESTE_BOMBAS.h: 41: }
  3988                           ;tela_TESTE_BOMBAS.h: 42: if (horario_de_teste > 23 || horario_de_teste < 0) {
  3989                           
  3990                           ; BSR set to: 0
  3991  0024C4  0E18               	movlw	24
  3992  0024C6  0100               	movlb	0	; () banked
  3993  0024C8  61E7               	cpfslt	_horario_de_teste& (0+255),b
  3994  0024CA  D001               	goto	l729
  3995  0024CC  D034               	goto	l723
  3996  0024CE                     l729:
  3997  0024CE  FFFF               	dw	65535	; assembler added errata NOP
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;tela_TESTE_BOMBAS.h: 43: horario_de_teste = 0;
  4001                           
  4002                           ; BSR set to: 0
  4003  0024D0  0E00               	movlw	0
  4004  0024D2  6FE7               	movwf	_horario_de_teste& (0+255),b
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;tela_TESTE_BOMBAS.h: 44: }
  4008                           ;tela_TESTE_BOMBAS.h: 45: break;
  4009  0024D4  D030               	goto	l723
  4010  0024D6  FFFF               	dw	65535	; assembler added errata NOP
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;tela_TESTE_BOMBAS.h: 47: blink(line4, 9, 11);
  4014                           
  4015                           ; BSR set to: 0
  4016  0024D8  0E3C               	movlw	low _line4
  4017  0024DA  6F80               	movwf	blink@line& (0+255),b
  4018  0024DC  0E01               	movlw	high _line4
  4019  0024DE  6F81               	movwf	(blink@line+1)& (0+255),b
  4020  0024E0  0E09               	movlw	9
  4021  0024E2  6F82               	movwf	blink@start& (0+255),b
  4022  0024E4  0E0B               	movlw	11
  4023  0024E6  6F83               	movwf	blink@end& (0+255),b
  4024  0024E8  ECA2  F039         	call	_blink	;wreg free
  4025                           
  4026                           ;tela_TESTE_BOMBAS.h: 48: if (btPress(3)) {
  4027  0024EC  0E03               	movlw	3
  4028  0024EE  EC43  F03C         	call	_btPress
  4029  0024F2  0900               	iorlw	0
  4030  0024F4  B4D8               	btfsc	status,2,c
  4031  0024F6  D003               	goto	l731
  4032                           
  4033                           ;tela_TESTE_BOMBAS.h: 49: habilitaTesteAutomatico = 1;
  4034  0024F8  0E01               	movlw	1
  4035  0024FA  0100               	movlb	0	; () banked
  4036  0024FC  6FF0               	movwf	_habilitaTesteAutomatico& (0+255),b
  4037  0024FE                     l731:
  4038  0024FE  FFFF               	dw	65535	; assembler added errata NOP
  4039                           
  4040                           ;tela_TESTE_BOMBAS.h: 50: }
  4041                           ;tela_TESTE_BOMBAS.h: 51: if (btPress(2)) {
  4042                           
  4043                           ; BSR set to: 0
  4044  002500  0E02               	movlw	2
  4045  002502  EC43  F03C         	call	_btPress
  4046  002506  0900               	iorlw	0
  4047  002508  B4D8               	btfsc	status,2,c
  4048  00250A  D015               	goto	l723
  4049                           
  4050                           ;tela_TESTE_BOMBAS.h: 52: habilitaTesteAutomatico = 0;
  4051  00250C  0E00               	movlw	0
  4052  00250E  0100               	movlb	0	; () banked
  4053  002510  6FF0               	movwf	_habilitaTesteAutomatico& (0+255),b
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;tela_TESTE_BOMBAS.h: 53: }
  4057                           ;tela_TESTE_BOMBAS.h: 54: break;
  4058  002512  D011               	goto	l723
  4059  002514  FFFF               	dw	65535	; assembler added errata NOP
  4060                           
  4061                           ; BSR set to: 0
  4062                           
  4063                           ; BSR set to: 0
  4064  002516  0E00               	movlw	0
  4065  002518  6FE0               	movwf	_option_posi& (0+255),b
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;tela_TESTE_BOMBAS.h: 57: }
  4069                           
  4070                           ;tela_TESTE_BOMBAS.h: 56: break;
  4071  00251A  D00D               	goto	l723
  4072  00251C                     l719:
  4073  00251C  FFFF               	dw	65535	; assembler added errata NOP
  4074                           
  4075                           ; BSR set to: 0
  4076  00251E  0100               	movlb	0	; () banked
  4077  002520  51E0               	movf	_option_posi& (0+255),w,b
  4078                           
  4079                           ; Switch size 1, requested type "space"
  4080                           ; Number of cases is 3, Range of values is 0 to 2
  4081                           ; switch strategies available:
  4082                           ; Name         Instructions Cycles
  4083                           ; simple_byte           10     6 (average)
  4084                           ;	Chosen strategy is simple_byte
  4085  002522  0A00               	xorlw	0	; case 0
  4086  002524  B4D8               	btfsc	status,2,c
  4087  002526  D794               	goto	l720
  4088  002528  0A01               	xorlw	1	; case 1
  4089  00252A  B4D8               	btfsc	status,2,c
  4090  00252C  D7AE               	goto	l724
  4091  00252E  0A03               	xorlw	3	; case 2
  4092  002530  B4D8               	btfsc	status,2,c
  4093  002532  D7D1               	goto	l730
  4094  002534  D7EF               	goto	l733
  4095  002536                     l723:
  4096  002536  FFFF               	dw	65535	; assembler added errata NOP
  4097                           
  4098                           ; BSR set to: 0
  4099  002538  0012               	return		;funcret
  4100  00253A  FFFF               	dw	65535	; errata NOP
  4101  00253C                     __end_of_tela_testeBombas:
  4102                           	opt stack 0
  4103                           tblptru	equ	0xFF8
  4104                           tblptrh	equ	0xFF7
  4105                           tblptrl	equ	0xFF6
  4106                           tablat	equ	0xFF5
  4107                           postinc0	equ	0xFEE
  4108                           wreg	equ	0xFE8
  4109                           postdec1	equ	0xFE5
  4110                           fsr1l	equ	0xFE1
  4111                           status	equ	0xFD8
  4112                           
  4113 ;; *************** function _tela_ajusteRTC *****************
  4114 ;; Defined at:
  4115 ;;		line 11 in file "tela_RELOGIO.h"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;		None
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;		None
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  1    wreg      void 
  4122 ;; Registers used:
  4123 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4129 ;;      Params:         0       0       0       0       0       0       0
  4130 ;;      Locals:         0       0       0       0       0       0       0
  4131 ;;      Temps:          0       0       0       0       0       0       0
  4132 ;;      Totals:         0       0       0       0       0       0       0
  4133 ;;Total ram usage:        0 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    9
  4136 ;; This function calls:
  4137 ;;		_blink
  4138 ;;		_btPress
  4139 ;;		_setDS1307TimeDate
  4140 ;;		_sprintf
  4141 ;;		_validaRTC
  4142 ;; This function is called by:
  4143 ;;		_main
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           	psect	text3
  4148  001D28                     __ptext3:
  4149                           	opt stack 0
  4150  001D28                     _tela_ajusteRTC:
  4151                           	opt stack 0
  4152  001D28  FFFF               	dw	65535	; assembler added errata NOP
  4153                           
  4154                           ;tela_RELOGIO.h: 12: sprintf(line1, "DATA:");
  4155                           
  4156                           ;incstack = 0
  4157  001D2A  0E7B               	movlw	low _line1
  4158  001D2C  0100               	movlb	0	; () banked
  4159  001D2E  6FA1               	movwf	sprintf@wh& (0+255),b
  4160  001D30  0E01               	movlw	high _line1
  4161  001D32  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4162  001D34  0ECB               	movlw	low STR_62
  4163  001D36  6FA3               	movwf	sprintf@f& (0+255),b
  4164  001D38  0E7F               	movlw	high STR_62
  4165  001D3A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4166  001D3C  EC89  F03A         	call	_sprintf	;wreg free
  4167                           
  4168                           ;tela_RELOGIO.h: 13: sprintf(line2, "%02d/%02d/%02d", rtc.date, rtc.month, rtc.year);
  4169  001D40  0E66               	movlw	low _line2
  4170  001D42  0100               	movlb	0	; () banked
  4171  001D44  6FA1               	movwf	sprintf@wh& (0+255),b
  4172  001D46  0E01               	movlw	high _line2
  4173  001D48  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4174  001D4A  0E47               	movlw	low STR_63
  4175  001D4C  6FA3               	movwf	sprintf@f& (0+255),b
  4176  001D4E  0E7E               	movlw	high STR_63
  4177  001D50  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4178  001D52  C077  F0A5         	movff	_rtc+4,?_sprintf+4
  4179  001D56  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4180  001D58  C078  F0A7         	movff	_rtc+5,?_sprintf+6
  4181  001D5C  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4182  001D5E  C079  F0A9         	movff	_rtc+6,?_sprintf+8
  4183  001D62  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4184  001D64  EC89  F03A         	call	_sprintf	;wreg free
  4185                           
  4186                           ;tela_RELOGIO.h: 14: sprintf(&line1[11], "HORA:");
  4187  001D68  0E86               	movlw	low (_line1+11)
  4188  001D6A  0100               	movlb	0	; () banked
  4189  001D6C  6FA1               	movwf	sprintf@wh& (0+255),b
  4190  001D6E  0E01               	movlw	high (_line1+11)
  4191  001D70  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4192  001D72  0EC5               	movlw	low STR_64
  4193  001D74  6FA3               	movwf	sprintf@f& (0+255),b
  4194  001D76  0E7F               	movlw	high STR_64
  4195  001D78  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4196  001D7A  EC89  F03A         	call	_sprintf	;wreg free
  4197                           
  4198                           ;tela_RELOGIO.h: 15: sprintf(&line2[11], "%02d:%02d:%02d", rtc.hour, rtc.min, rtc.sec);
  4199  001D7E  0E71               	movlw	low (_line2+11)
  4200  001D80  0100               	movlb	0	; () banked
  4201  001D82  6FA1               	movwf	sprintf@wh& (0+255),b
  4202  001D84  0E01               	movlw	high (_line2+11)
  4203  001D86  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4204  001D88  0E56               	movlw	low STR_65
  4205  001D8A  6FA3               	movwf	sprintf@f& (0+255),b
  4206  001D8C  0E7E               	movlw	high STR_65
  4207  001D8E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4208  001D90  C076  F0A5         	movff	_rtc+3,?_sprintf+4
  4209  001D94  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4210  001D96  C075  F0A7         	movff	_rtc+2,?_sprintf+6
  4211  001D9A  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4212  001D9C  C074  F0A9         	movff	_rtc+1,?_sprintf+8
  4213  001DA0  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4214  001DA2  EC89  F03A         	call	_sprintf	;wreg free
  4215                           
  4216                           ;tela_RELOGIO.h: 17: if (btPress(4)) {
  4217  001DA6  0E04               	movlw	4
  4218  001DA8  EC43  F03C         	call	_btPress
  4219  001DAC  0900               	iorlw	0
  4220  001DAE  B4D8               	btfsc	status,2,c
  4221  001DB0  D004               	goto	l687
  4222                           
  4223                           ;tela_RELOGIO.h: 18: ajst_rtc = 1;
  4224  001DB2  0E01               	movlw	1
  4225  001DB4  6E67               	movwf	_ajst_rtc,c
  4226                           
  4227                           ;tela_RELOGIO.h: 19: option_posi++;
  4228  001DB6  0100               	movlb	0	; () banked
  4229  001DB8  2BE0               	incf	_option_posi& (0+255),f,b
  4230  001DBA                     l687:
  4231  001DBA  FFFF               	dw	65535	; assembler added errata NOP
  4232                           
  4233                           ;tela_RELOGIO.h: 20: }
  4234                           ;tela_RELOGIO.h: 21: if (btPress(1)) {
  4235                           
  4236                           ; BSR set to: 0
  4237  001DBC  0E01               	movlw	1
  4238  001DBE  EC43  F03C         	call	_btPress
  4239  001DC2  0900               	iorlw	0
  4240  001DC4  B4D8               	btfsc	status,2,c
  4241  001DC6  D0B0               	goto	l689
  4242                           
  4243                           ;tela_RELOGIO.h: 22: ajst_rtc = 0;
  4244  001DC8  0E00               	movlw	0
  4245  001DCA  6E67               	movwf	_ajst_rtc,c
  4246                           
  4247                           ;tela_RELOGIO.h: 23: option_posi = 0;
  4248  001DCC  0E00               	movlw	0
  4249  001DCE  0100               	movlb	0	; () banked
  4250  001DD0  6FE0               	movwf	_option_posi& (0+255),b
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;tela_RELOGIO.h: 24: setDS1307TimeDate(&rtc);
  4254  001DD2  0E73               	movlw	low _rtc
  4255  001DD4  6F8C               	movwf	setDS1307TimeDate@ptrToUserVal& (0+255),b
  4256  001DD6  0E00               	movlw	high _rtc
  4257  001DD8  6F8D               	movwf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  4258  001DDA  ECD9  F018         	call	_setDS1307TimeDate	;wreg free
  4259                           
  4260                           ;tela_RELOGIO.h: 25: menu_posi = _menu_posi;
  4261  001DDE  C0DE  F0DF         	movff	__menu_posi,_menu_posi
  4262                           
  4263                           ;tela_RELOGIO.h: 26: _min++;
  4264  001DE2  0100               	movlb	0	; () banked
  4265  001DE4  2BEE               	incf	__min& (0+255),f,b
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;tela_RELOGIO.h: 27: }
  4269                           ;tela_RELOGIO.h: 28: switch (option_posi) {
  4270  001DE6  D0A0               	goto	l689
  4271  001DE8  FFFF               	dw	65535	; assembler added errata NOP
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;tela_RELOGIO.h: 30: blink(line2, 1, 2);
  4275                           
  4276                           ; BSR set to: 0
  4277  001DEA  0E66               	movlw	low _line2
  4278  001DEC  6F80               	movwf	blink@line& (0+255),b
  4279  001DEE  0E01               	movlw	high _line2
  4280  001DF0  6F81               	movwf	(blink@line+1)& (0+255),b
  4281  001DF2  0E01               	movlw	1
  4282  001DF4  6F82               	movwf	blink@start& (0+255),b
  4283  001DF6  0E02               	movlw	2
  4284  001DF8  6F83               	movwf	blink@end& (0+255),b
  4285  001DFA  ECA2  F039         	call	_blink	;wreg free
  4286                           
  4287                           ;tela_RELOGIO.h: 31: if (btPress(3)) {
  4288  001DFE  0E03               	movlw	3
  4289  001E00  EC43  F03C         	call	_btPress
  4290  001E04  0900               	iorlw	0
  4291  001E06  A4D8               	btfss	status,2,c
  4292                           
  4293                           ;tela_RELOGIO.h: 32: rtc.date++;
  4294  001E08  2A77               	incf	_rtc+4,f,c
  4295                           
  4296                           ;tela_RELOGIO.h: 33: }
  4297                           ;tela_RELOGIO.h: 34: if (btPress(2)) {
  4298  001E0A  0E02               	movlw	2
  4299  001E0C  EC43  F03C         	call	_btPress
  4300  001E10  0900               	iorlw	0
  4301  001E12  B4D8               	btfsc	status,2,c
  4302  001E14  D09F               	goto	l693
  4303                           
  4304                           ;tela_RELOGIO.h: 35: rtc.date--;
  4305  001E16  0677               	decf	_rtc+4,f,c
  4306                           
  4307                           ;tela_RELOGIO.h: 36: }
  4308                           ;tela_RELOGIO.h: 37: break;
  4309  001E18  D09D               	goto	l693
  4310  001E1A  FFFF               	dw	65535	; assembler added errata NOP
  4311                           
  4312                           ;tela_RELOGIO.h: 39: blink(line2, 4, 5);
  4313  001E1C  0E66               	movlw	low _line2
  4314  001E1E  0100               	movlb	0	; () banked
  4315  001E20  6F80               	movwf	blink@line& (0+255),b
  4316  001E22  0E01               	movlw	high _line2
  4317  001E24  6F81               	movwf	(blink@line+1)& (0+255),b
  4318  001E26  0E04               	movlw	4
  4319  001E28  6F82               	movwf	blink@start& (0+255),b
  4320  001E2A  0E05               	movlw	5
  4321  001E2C  6F83               	movwf	blink@end& (0+255),b
  4322  001E2E  ECA2  F039         	call	_blink	;wreg free
  4323                           
  4324                           ;tela_RELOGIO.h: 40: if (btPress(3)) {
  4325  001E32  0E03               	movlw	3
  4326  001E34  EC43  F03C         	call	_btPress
  4327  001E38  0900               	iorlw	0
  4328  001E3A  A4D8               	btfss	status,2,c
  4329                           
  4330                           ;tela_RELOGIO.h: 41: rtc.month++;
  4331  001E3C  2A78               	incf	_rtc+5,f,c
  4332                           
  4333                           ;tela_RELOGIO.h: 42: }
  4334                           ;tela_RELOGIO.h: 43: if (btPress(2)) {
  4335  001E3E  0E02               	movlw	2
  4336  001E40  EC43  F03C         	call	_btPress
  4337  001E44  0900               	iorlw	0
  4338  001E46  B4D8               	btfsc	status,2,c
  4339  001E48  D085               	goto	l693
  4340                           
  4341                           ;tela_RELOGIO.h: 44: rtc.month--;
  4342  001E4A  0678               	decf	_rtc+5,f,c
  4343                           
  4344                           ;tela_RELOGIO.h: 45: }
  4345                           ;tela_RELOGIO.h: 46: break;
  4346  001E4C  D083               	goto	l693
  4347  001E4E  FFFF               	dw	65535	; assembler added errata NOP
  4348                           
  4349                           ;tela_RELOGIO.h: 48: blink(line2, 7, 8);
  4350  001E50  0E66               	movlw	low _line2
  4351  001E52  0100               	movlb	0	; () banked
  4352  001E54  6F80               	movwf	blink@line& (0+255),b
  4353  001E56  0E01               	movlw	high _line2
  4354  001E58  6F81               	movwf	(blink@line+1)& (0+255),b
  4355  001E5A  0E07               	movlw	7
  4356  001E5C  6F82               	movwf	blink@start& (0+255),b
  4357  001E5E  0E08               	movlw	8
  4358  001E60  6F83               	movwf	blink@end& (0+255),b
  4359  001E62  ECA2  F039         	call	_blink	;wreg free
  4360                           
  4361                           ;tela_RELOGIO.h: 49: if (btPress(3)) {
  4362  001E66  0E03               	movlw	3
  4363  001E68  EC43  F03C         	call	_btPress
  4364  001E6C  0900               	iorlw	0
  4365  001E6E  A4D8               	btfss	status,2,c
  4366                           
  4367                           ;tela_RELOGIO.h: 50: rtc.year++;
  4368  001E70  2A79               	incf	_rtc+6,f,c
  4369                           
  4370                           ;tela_RELOGIO.h: 51: }
  4371                           ;tela_RELOGIO.h: 52: if (btPress(2)) {
  4372  001E72  0E02               	movlw	2
  4373  001E74  EC43  F03C         	call	_btPress
  4374  001E78  0900               	iorlw	0
  4375  001E7A  B4D8               	btfsc	status,2,c
  4376  001E7C  D06B               	goto	l693
  4377                           
  4378                           ;tela_RELOGIO.h: 53: rtc.year--;
  4379  001E7E  0679               	decf	_rtc+6,f,c
  4380                           
  4381                           ;tela_RELOGIO.h: 54: }
  4382                           ;tela_RELOGIO.h: 55: break;
  4383  001E80  D069               	goto	l693
  4384  001E82  FFFF               	dw	65535	; assembler added errata NOP
  4385                           
  4386                           ;tela_RELOGIO.h: 57: blink(line2, 12, 13);
  4387  001E84  0E66               	movlw	low _line2
  4388  001E86  0100               	movlb	0	; () banked
  4389  001E88  6F80               	movwf	blink@line& (0+255),b
  4390  001E8A  0E01               	movlw	high _line2
  4391  001E8C  6F81               	movwf	(blink@line+1)& (0+255),b
  4392  001E8E  0E0C               	movlw	12
  4393  001E90  6F82               	movwf	blink@start& (0+255),b
  4394  001E92  0E0D               	movlw	13
  4395  001E94  6F83               	movwf	blink@end& (0+255),b
  4396  001E96  ECA2  F039         	call	_blink	;wreg free
  4397                           
  4398                           ;tela_RELOGIO.h: 58: if (btPress(3)) {
  4399  001E9A  0E03               	movlw	3
  4400  001E9C  EC43  F03C         	call	_btPress
  4401  001EA0  0900               	iorlw	0
  4402  001EA2  A4D8               	btfss	status,2,c
  4403                           
  4404                           ;tela_RELOGIO.h: 59: rtc.hour++;
  4405  001EA4  2A76               	incf	_rtc+3,f,c
  4406                           
  4407                           ;tela_RELOGIO.h: 60: }
  4408                           ;tela_RELOGIO.h: 61: if (btPress(2)) {
  4409  001EA6  0E02               	movlw	2
  4410  001EA8  EC43  F03C         	call	_btPress
  4411  001EAC  0900               	iorlw	0
  4412  001EAE  B4D8               	btfsc	status,2,c
  4413  001EB0  D051               	goto	l693
  4414                           
  4415                           ;tela_RELOGIO.h: 62: rtc.hour--;
  4416  001EB2  0676               	decf	_rtc+3,f,c
  4417                           
  4418                           ;tela_RELOGIO.h: 63: }
  4419                           ;tela_RELOGIO.h: 64: break;
  4420  001EB4  D04F               	goto	l693
  4421  001EB6  FFFF               	dw	65535	; assembler added errata NOP
  4422                           
  4423                           ;tela_RELOGIO.h: 66: blink(line2, 15, 16);
  4424  001EB8  0E66               	movlw	low _line2
  4425  001EBA  0100               	movlb	0	; () banked
  4426  001EBC  6F80               	movwf	blink@line& (0+255),b
  4427  001EBE  0E01               	movlw	high _line2
  4428  001EC0  6F81               	movwf	(blink@line+1)& (0+255),b
  4429  001EC2  0E0F               	movlw	15
  4430  001EC4  6F82               	movwf	blink@start& (0+255),b
  4431  001EC6  0E10               	movlw	16
  4432  001EC8  6F83               	movwf	blink@end& (0+255),b
  4433  001ECA  ECA2  F039         	call	_blink	;wreg free
  4434                           
  4435                           ;tela_RELOGIO.h: 67: if (btPress(3)) {
  4436  001ECE  0E03               	movlw	3
  4437  001ED0  EC43  F03C         	call	_btPress
  4438  001ED4  0900               	iorlw	0
  4439  001ED6  A4D8               	btfss	status,2,c
  4440                           
  4441                           ;tela_RELOGIO.h: 68: rtc.min++;
  4442  001ED8  2A75               	incf	_rtc+2,f,c
  4443                           
  4444                           ;tela_RELOGIO.h: 69: }
  4445                           ;tela_RELOGIO.h: 70: if (btPress(2)) {
  4446  001EDA  0E02               	movlw	2
  4447  001EDC  EC43  F03C         	call	_btPress
  4448  001EE0  0900               	iorlw	0
  4449  001EE2  B4D8               	btfsc	status,2,c
  4450  001EE4  D037               	goto	l693
  4451                           
  4452                           ;tela_RELOGIO.h: 71: rtc.min--;
  4453  001EE6  0675               	decf	_rtc+2,f,c
  4454                           
  4455                           ;tela_RELOGIO.h: 72: }
  4456                           ;tela_RELOGIO.h: 73: break;
  4457  001EE8  D035               	goto	l693
  4458  001EEA  FFFF               	dw	65535	; assembler added errata NOP
  4459                           
  4460                           ;tela_RELOGIO.h: 75: blink(line2, 18, 19);
  4461  001EEC  0E66               	movlw	low _line2
  4462  001EEE  0100               	movlb	0	; () banked
  4463  001EF0  6F80               	movwf	blink@line& (0+255),b
  4464  001EF2  0E01               	movlw	high _line2
  4465  001EF4  6F81               	movwf	(blink@line+1)& (0+255),b
  4466  001EF6  0E12               	movlw	18
  4467  001EF8  6F82               	movwf	blink@start& (0+255),b
  4468  001EFA  0E13               	movlw	19
  4469  001EFC  6F83               	movwf	blink@end& (0+255),b
  4470  001EFE  ECA2  F039         	call	_blink	;wreg free
  4471                           
  4472                           ;tela_RELOGIO.h: 76: if (btPress(3)) {
  4473  001F02  0E03               	movlw	3
  4474  001F04  EC43  F03C         	call	_btPress
  4475  001F08  0900               	iorlw	0
  4476  001F0A  A4D8               	btfss	status,2,c
  4477                           
  4478                           ;tela_RELOGIO.h: 77: rtc.sec++;
  4479  001F0C  2A74               	incf	_rtc+1,f,c
  4480                           
  4481                           ;tela_RELOGIO.h: 78: }
  4482                           ;tela_RELOGIO.h: 79: if (btPress(2)) {
  4483  001F0E  0E02               	movlw	2
  4484  001F10  EC43  F03C         	call	_btPress
  4485  001F14  0900               	iorlw	0
  4486  001F16  B4D8               	btfsc	status,2,c
  4487  001F18  D01D               	goto	l693
  4488                           
  4489                           ;tela_RELOGIO.h: 80: rtc.sec--;
  4490  001F1A  0674               	decf	_rtc+1,f,c
  4491                           
  4492                           ;tela_RELOGIO.h: 81: }
  4493                           ;tela_RELOGIO.h: 82: break;
  4494  001F1C  D01B               	goto	l693
  4495  001F1E  FFFF               	dw	65535	; assembler added errata NOP
  4496  001F20  0E01               	movlw	1
  4497  001F22  0100               	movlb	0	; () banked
  4498  001F24  6FE0               	movwf	_option_posi& (0+255),b
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;tela_RELOGIO.h: 85: }
  4502                           
  4503                           ;tela_RELOGIO.h: 84: break;
  4504  001F26  D016               	goto	l693
  4505  001F28                     l689:
  4506  001F28  FFFF               	dw	65535	; assembler added errata NOP
  4507                           
  4508                           ; BSR set to: 0
  4509  001F2A  0100               	movlb	0	; () banked
  4510  001F2C  51E0               	movf	_option_posi& (0+255),w,b
  4511                           
  4512                           ; Switch size 1, requested type "space"
  4513                           ; Number of cases is 6, Range of values is 1 to 6
  4514                           ; switch strategies available:
  4515                           ; Name         Instructions Cycles
  4516                           ; simple_byte           19    10 (average)
  4517                           ;	Chosen strategy is simple_byte
  4518  001F2E  0A01               	xorlw	1	; case 1
  4519  001F30  B4D8               	btfsc	status,2,c
  4520  001F32  D75A               	goto	l690
  4521  001F34  0A03               	xorlw	3	; case 2
  4522  001F36  B4D8               	btfsc	status,2,c
  4523  001F38  D770               	goto	l694
  4524  001F3A  0A01               	xorlw	1	; case 3
  4525  001F3C  B4D8               	btfsc	status,2,c
  4526  001F3E  D787               	goto	l697
  4527  001F40  0A07               	xorlw	7	; case 4
  4528  001F42  B4D8               	btfsc	status,2,c
  4529  001F44  D79E               	goto	l700
  4530  001F46  0A01               	xorlw	1	; case 5
  4531  001F48  B4D8               	btfsc	status,2,c
  4532  001F4A  D7B5               	goto	l703
  4533  001F4C  0A03               	xorlw	3	; case 6
  4534  001F4E  B4D8               	btfsc	status,2,c
  4535  001F50  D7CC               	goto	l706
  4536  001F52  D7E5               	goto	l709
  4537  001F54                     l693:
  4538  001F54  FFFF               	dw	65535	; assembler added errata NOP
  4539                           
  4540                           ;tela_RELOGIO.h: 86: validaRTC();
  4541                           
  4542                           ; BSR set to: 0
  4543  001F56  ECD1  F03A         	call	_validaRTC	;wreg free
  4544  001F5A  0012               	return		;funcret
  4545  001F5C  FFFF               	dw	65535	; errata NOP
  4546  001F5E                     __end_of_tela_ajusteRTC:
  4547                           	opt stack 0
  4548                           tblptru	equ	0xFF8
  4549                           tblptrh	equ	0xFF7
  4550                           tblptrl	equ	0xFF6
  4551                           tablat	equ	0xFF5
  4552                           postinc0	equ	0xFEE
  4553                           wreg	equ	0xFE8
  4554                           postdec1	equ	0xFE5
  4555                           fsr1l	equ	0xFE1
  4556                           status	equ	0xFD8
  4557                           
  4558 ;; *************** function _validaRTC *****************
  4559 ;; Defined at:
  4560 ;;		line 108 in file "ds1307.h"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;		None
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;		None
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  2  284[None  ] int 
  4567 ;; Registers used:
  4568 ;;		wreg, status,2, status,0
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/0
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4574 ;;      Params:         0       0       0       0       0       0       0
  4575 ;;      Locals:         0       0       0       0       0       0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0
  4577 ;;      Totals:         0       0       0       0       0       0       0
  4578 ;;Total ram usage:        0 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:    6
  4581 ;; This function calls:
  4582 ;;		Nothing
  4583 ;; This function is called by:
  4584 ;;		_tela_ajusteRTC
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           	psect	text4
  4589  0075A2                     __ptext4:
  4590                           	opt stack 0
  4591  0075A2                     _validaRTC:
  4592                           	opt stack 0
  4593  0075A2  FFFF               	dw	65535	; assembler added errata NOP
  4594                           
  4595                           ;ds1307.h: 109: if (rtc.date > 31) rtc.date = 0;
  4596                           
  4597                           ;incstack = 0
  4598  0075A4  0E1F               	movlw	31
  4599  0075A6  6477               	cpfsgt	_rtc+4,c
  4600  0075A8  D002               	goto	l285
  4601  0075AA  0E00               	movlw	0
  4602  0075AC  6E77               	movwf	_rtc+4,c
  4603  0075AE                     l285:
  4604  0075AE  FFFF               	dw	65535	; assembler added errata NOP
  4605                           
  4606                           ;ds1307.h: 110: if (rtc.hour > 23) rtc.hour = 0;
  4607  0075B0  0E17               	movlw	23
  4608  0075B2  6476               	cpfsgt	_rtc+3,c
  4609  0075B4  D002               	goto	l286
  4610  0075B6  0E00               	movlw	0
  4611  0075B8  6E76               	movwf	_rtc+3,c
  4612  0075BA                     l286:
  4613  0075BA  FFFF               	dw	65535	; assembler added errata NOP
  4614                           
  4615                           ;ds1307.h: 111: if (rtc.min > 59) rtc.min = 0;
  4616  0075BC  0E3B               	movlw	59
  4617  0075BE  6475               	cpfsgt	_rtc+2,c
  4618  0075C0  D002               	goto	l287
  4619  0075C2  0E00               	movlw	0
  4620  0075C4  6E75               	movwf	_rtc+2,c
  4621  0075C6                     l287:
  4622  0075C6  FFFF               	dw	65535	; assembler added errata NOP
  4623                           
  4624                           ;ds1307.h: 112: if (rtc.month > 12) rtc.month = 0;
  4625  0075C8  0E0C               	movlw	12
  4626  0075CA  6478               	cpfsgt	_rtc+5,c
  4627  0075CC  D002               	goto	l288
  4628  0075CE  0E00               	movlw	0
  4629  0075D0  6E78               	movwf	_rtc+5,c
  4630  0075D2                     l288:
  4631  0075D2  FFFF               	dw	65535	; assembler added errata NOP
  4632                           
  4633                           ;ds1307.h: 113: if (rtc.sec > 59) rtc.sec = 0;
  4634  0075D4  0E3B               	movlw	59
  4635  0075D6  6474               	cpfsgt	_rtc+1,c
  4636  0075D8  D002               	goto	l289
  4637  0075DA  0E00               	movlw	0
  4638  0075DC  6E74               	movwf	_rtc+1,c
  4639  0075DE                     l289:
  4640  0075DE  FFFF               	dw	65535	; assembler added errata NOP
  4641                           
  4642                           ;ds1307.h: 114: if (rtc.year > 99) rtc.year = 0;
  4643  0075E0  0E63               	movlw	99
  4644  0075E2  6479               	cpfsgt	_rtc+6,c
  4645  0075E4  D002               	goto	l290
  4646  0075E6  0E00               	movlw	0
  4647  0075E8  6E79               	movwf	_rtc+6,c
  4648  0075EA                     l290:
  4649  0075EA  FFFF               	dw	65535	; assembler added errata NOP
  4650  0075EC  0012               	return		;funcret
  4651  0075EE  FFFF               	dw	65535	; errata NOP
  4652  0075F0                     __end_of_validaRTC:
  4653                           	opt stack 0
  4654                           tblptru	equ	0xFF8
  4655                           tblptrh	equ	0xFF7
  4656                           tblptrl	equ	0xFF6
  4657                           tablat	equ	0xFF5
  4658                           postinc0	equ	0xFEE
  4659                           wreg	equ	0xFE8
  4660                           postdec1	equ	0xFE5
  4661                           fsr1l	equ	0xFE1
  4662                           status	equ	0xFD8
  4663                           
  4664 ;; *************** function _setDS1307TimeDate *****************
  4665 ;; Defined at:
  4666 ;;		line 36 in file "ds1307.h"
  4667 ;; Parameters:    Size  Location     Type
  4668 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  4669 ;;		 -> rtc(7), 
  4670 ;; Auto vars:     Size  Location     Type
  4671 ;;		None
  4672 ;; Return value:  Size  Location     Type
  4673 ;;                  1    wreg      void 
  4674 ;; Registers used:
  4675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4676 ;; Tracked objects:
  4677 ;;		On entry : 0/0
  4678 ;;		On exit  : 0/0
  4679 ;;		Unchanged: 0/0
  4680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4681 ;;      Params:         0       2       0       0       0       0       0
  4682 ;;      Locals:         0       0       0       0       0       0       0
  4683 ;;      Temps:          0       1       0       0       0       0       0
  4684 ;;      Totals:         0       3       0       0       0       0       0
  4685 ;;Total ram usage:        3 bytes
  4686 ;; Hardware stack levels used:    1
  4687 ;; Hardware stack levels required when called:    8
  4688 ;; This function calls:
  4689 ;;		_DECtoBCD
  4690 ;;		_I2C_Start
  4691 ;;		_I2C_Stop
  4692 ;;		_I2C_Write
  4693 ;; This function is called by:
  4694 ;;		_tela_ajusteRTC
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text5
  4699  0031B2                     __ptext5:
  4700                           	opt stack 0
  4701  0031B2                     _setDS1307TimeDate:
  4702                           	opt stack 0
  4703  0031B2  FFFF               	dw	65535	; assembler added errata NOP
  4704                           
  4705                           ;ds1307.h: 38: I2C_Start();
  4706                           
  4707                           ;incstack = 0
  4708  0031B4  EC1A  F037         	call	_I2C_Start	;wreg free
  4709                           
  4710                           ;ds1307.h: 39: I2C_Write(0xD0);
  4711  0031B8  0E00               	movlw	0
  4712  0031BA  0100               	movlb	0	; () banked
  4713  0031BC  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4714  0031BE  0ED0               	movlw	208
  4715  0031C0  6F8A               	movwf	I2C_Write@d& (0+255),b
  4716  0031C2  EC33  F037         	call	_I2C_Write	;wreg free
  4717                           
  4718                           ;ds1307.h: 40: I2C_Write(0x00);
  4719  0031C6  0E00               	movlw	0
  4720  0031C8  0100               	movlb	0	; () banked
  4721  0031CA  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4722  0031CC  0E00               	movlw	0
  4723  0031CE  6F8A               	movwf	I2C_Write@d& (0+255),b
  4724  0031D0  EC33  F037         	call	_I2C_Write	;wreg free
  4725                           
  4726                           ;ds1307.h: 41: I2C_Write(DECtoBCD(ptrToUserVal-> sec));
  4727  0031D4  0100               	movlb	0	; () banked
  4728  0031D6  EE20 F001          	lfsr	2,1
  4729  0031DA  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4730  0031DC  26D9               	addwf	fsr2l,f,c
  4731  0031DE  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4732  0031E0  22DA               	addwfc	fsr2h,f,c
  4733  0031E2  50DF               	movf	indf2,w,c
  4734  0031E4  EC02  F03A         	call	_DECtoBCD
  4735  0031E8  0100               	movlb	0	; () banked
  4736  0031EA  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4737  0031EC  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4738  0031EE  6F8A               	movwf	I2C_Write@d& (0+255),b
  4739  0031F0  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4740  0031F2  EC33  F037         	call	_I2C_Write	;wreg free
  4741                           
  4742                           ;ds1307.h: 42: I2C_Write(DECtoBCD(ptrToUserVal-> min));
  4743  0031F6  0100               	movlb	0	; () banked
  4744  0031F8  EE20 F002          	lfsr	2,2
  4745  0031FC  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4746  0031FE  26D9               	addwf	fsr2l,f,c
  4747  003200  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4748  003202  22DA               	addwfc	fsr2h,f,c
  4749  003204  50DF               	movf	indf2,w,c
  4750  003206  EC02  F03A         	call	_DECtoBCD
  4751  00320A  0100               	movlb	0	; () banked
  4752  00320C  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4753  00320E  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4754  003210  6F8A               	movwf	I2C_Write@d& (0+255),b
  4755  003212  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4756  003214  EC33  F037         	call	_I2C_Write	;wreg free
  4757                           
  4758                           ;ds1307.h: 43: I2C_Write(DECtoBCD(ptrToUserVal-> hour));
  4759  003218  0100               	movlb	0	; () banked
  4760  00321A  EE20 F003          	lfsr	2,3
  4761  00321E  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4762  003220  26D9               	addwf	fsr2l,f,c
  4763  003222  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4764  003224  22DA               	addwfc	fsr2h,f,c
  4765  003226  50DF               	movf	indf2,w,c
  4766  003228  EC02  F03A         	call	_DECtoBCD
  4767  00322C  0100               	movlb	0	; () banked
  4768  00322E  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4769  003230  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4770  003232  6F8A               	movwf	I2C_Write@d& (0+255),b
  4771  003234  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4772  003236  EC33  F037         	call	_I2C_Write	;wreg free
  4773                           
  4774                           ;ds1307.h: 44: I2C_Write(DECtoBCD(ptrToUserVal-> day));
  4775  00323A  C08C  FFD9         	movff	setDS1307TimeDate@ptrToUserVal,fsr2l
  4776  00323E  C08D  FFDA         	movff	setDS1307TimeDate@ptrToUserVal+1,fsr2h
  4777  003242  50DF               	movf	indf2,w,c
  4778  003244  EC02  F03A         	call	_DECtoBCD
  4779  003248  0100               	movlb	0	; () banked
  4780  00324A  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4781  00324C  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4782  00324E  6F8A               	movwf	I2C_Write@d& (0+255),b
  4783  003250  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4784  003252  EC33  F037         	call	_I2C_Write	;wreg free
  4785                           
  4786                           ;ds1307.h: 45: I2C_Write(DECtoBCD(ptrToUserVal-> date));
  4787  003256  0100               	movlb	0	; () banked
  4788  003258  EE20 F004          	lfsr	2,4
  4789  00325C  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4790  00325E  26D9               	addwf	fsr2l,f,c
  4791  003260  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4792  003262  22DA               	addwfc	fsr2h,f,c
  4793  003264  50DF               	movf	indf2,w,c
  4794  003266  EC02  F03A         	call	_DECtoBCD
  4795  00326A  0100               	movlb	0	; () banked
  4796  00326C  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4797  00326E  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4798  003270  6F8A               	movwf	I2C_Write@d& (0+255),b
  4799  003272  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4800  003274  EC33  F037         	call	_I2C_Write	;wreg free
  4801                           
  4802                           ;ds1307.h: 46: I2C_Write(DECtoBCD(ptrToUserVal-> month));
  4803  003278  0100               	movlb	0	; () banked
  4804  00327A  EE20 F005          	lfsr	2,5
  4805  00327E  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4806  003280  26D9               	addwf	fsr2l,f,c
  4807  003282  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4808  003284  22DA               	addwfc	fsr2h,f,c
  4809  003286  50DF               	movf	indf2,w,c
  4810  003288  EC02  F03A         	call	_DECtoBCD
  4811  00328C  0100               	movlb	0	; () banked
  4812  00328E  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4813  003290  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4814  003292  6F8A               	movwf	I2C_Write@d& (0+255),b
  4815  003294  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4816  003296  EC33  F037         	call	_I2C_Write	;wreg free
  4817                           
  4818                           ;ds1307.h: 47: I2C_Write(DECtoBCD(ptrToUserVal-> year));
  4819  00329A  0100               	movlb	0	; () banked
  4820  00329C  EE20 F006          	lfsr	2,6
  4821  0032A0  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4822  0032A2  26D9               	addwf	fsr2l,f,c
  4823  0032A4  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4824  0032A6  22DA               	addwfc	fsr2h,f,c
  4825  0032A8  50DF               	movf	indf2,w,c
  4826  0032AA  EC02  F03A         	call	_DECtoBCD
  4827  0032AE  0100               	movlb	0	; () banked
  4828  0032B0  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4829  0032B2  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4830  0032B4  6F8A               	movwf	I2C_Write@d& (0+255),b
  4831  0032B6  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4832  0032B8  EC33  F037         	call	_I2C_Write	;wreg free
  4833                           
  4834                           ;ds1307.h: 48: I2C_Stop();
  4835  0032BC  EC20  F037         	call	_I2C_Stop	;wreg free
  4836  0032C0  0012               	return		;funcret
  4837  0032C2  FFFF               	dw	65535	; errata NOP
  4838  0032C4                     __end_of_setDS1307TimeDate:
  4839                           	opt stack 0
  4840                           tblptru	equ	0xFF8
  4841                           tblptrh	equ	0xFF7
  4842                           tblptrl	equ	0xFF6
  4843                           tablat	equ	0xFF5
  4844                           postinc0	equ	0xFEE
  4845                           wreg	equ	0xFE8
  4846                           postdec1	equ	0xFE5
  4847                           fsr1l	equ	0xFE1
  4848                           indf2	equ	0xFDF
  4849                           fsr2h	equ	0xFDA
  4850                           fsr2l	equ	0xFD9
  4851                           status	equ	0xFD8
  4852                           
  4853 ;; *************** function _DECtoBCD *****************
  4854 ;; Defined at:
  4855 ;;		line 25 in file "function.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;  val             1    wreg     unsigned char 
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;  val             1    8[BANK0 ] unsigned char 
  4860 ;;  res             1    9[BANK0 ] unsigned char 
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  1    wreg      unsigned char 
  4863 ;; Registers used:
  4864 ;;		wreg, status,2, status,0, cstack
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4870 ;;      Params:         0       0       0       0       0       0       0
  4871 ;;      Locals:         0       2       0       0       0       0       0
  4872 ;;      Temps:          0       0       0       0       0       0       0
  4873 ;;      Totals:         0       2       0       0       0       0       0
  4874 ;;Total ram usage:        2 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; Hardware stack levels required when called:    7
  4877 ;; This function calls:
  4878 ;;		___awdiv
  4879 ;;		___awmod
  4880 ;; This function is called by:
  4881 ;;		_setDS1307TimeDate
  4882 ;;		_setDS1307Time
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           	psect	text6
  4887  007404                     __ptext6:
  4888                           	opt stack 0
  4889  007404                     _DECtoBCD:
  4890                           	opt stack 0
  4891  007404  FFFF               	dw	65535	; assembler added errata NOP
  4892                           
  4893                           ;incstack = 0
  4894                           ;DECtoBCD@val stored from wreg
  4895  007406  0100               	movlb	0	; () banked
  4896  007408  6F88               	movwf	DECtoBCD@val& (0+255),b
  4897                           
  4898                           ;function.c: 26: char res;
  4899                           ;function.c: 27: res = (val / 10) << 4;
  4900  00740A  C088  F080         	movff	DECtoBCD@val,___awdiv@dividend
  4901  00740E  0100               	movlb	0	; () banked
  4902  007410  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  4903  007412  0E00               	movlw	0
  4904  007414  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  4905  007416  0E0A               	movlw	10
  4906  007418  6F82               	movwf	___awdiv@divisor& (0+255),b
  4907  00741A  EC76  F01E         	call	___awdiv	;wreg free
  4908  00741E  0100               	movlb	0	; () banked
  4909  007420  3980               	swapf	?___awdiv& (0+255),w,b
  4910  007422  0BF0               	andlw	240
  4911  007424  6F89               	movwf	DECtoBCD@res& (0+255),b
  4912                           
  4913                           ;function.c: 28: res = res | (val % 10);
  4914  007426  C088  F080         	movff	DECtoBCD@val,___awmod@dividend
  4915  00742A  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  4916  00742C  0E00               	movlw	0
  4917  00742E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4918  007430  0E0A               	movlw	10
  4919  007432  6F82               	movwf	___awmod@divisor& (0+255),b
  4920  007434  ECF6  F03C         	call	___awmod	;wreg free
  4921  007438  0100               	movlb	0	; () banked
  4922  00743A  5180               	movf	?___awmod& (0+255),w,b
  4923  00743C  1189               	iorwf	DECtoBCD@res& (0+255),w,b
  4924  00743E  6F89               	movwf	DECtoBCD@res& (0+255),b
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;function.c: 29: return res;
  4928  007440  5189               	movf	DECtoBCD@res& (0+255),w,b
  4929                           
  4930                           ; BSR set to: 0
  4931                           
  4932                           ; BSR set to: 0
  4933  007442  0012               	return		;funcret
  4934  007444  FFFF               	dw	65535	; errata NOP
  4935  007446                     __end_of_DECtoBCD:
  4936                           	opt stack 0
  4937                           tblptru	equ	0xFF8
  4938                           tblptrh	equ	0xFF7
  4939                           tblptrl	equ	0xFF6
  4940                           tablat	equ	0xFF5
  4941                           postinc0	equ	0xFEE
  4942                           wreg	equ	0xFE8
  4943                           postdec1	equ	0xFE5
  4944                           fsr1l	equ	0xFE1
  4945                           indf2	equ	0xFDF
  4946                           fsr2h	equ	0xFDA
  4947                           fsr2l	equ	0xFD9
  4948                           status	equ	0xFD8
  4949                           
  4950 ;; *************** function _telaPrincipal *****************
  4951 ;; Defined at:
  4952 ;;		line 21 in file "tela_PRINCIPAL.h"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;		None
  4955 ;; Auto vars:     Size  Location     Type
  4956 ;;		None
  4957 ;; Return value:  Size  Location     Type
  4958 ;;                  1    wreg      void 
  4959 ;; Registers used:
  4960 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4966 ;;      Params:         0       0       0       0       0       0       0
  4967 ;;      Locals:         0       2       0       0       0       0       0
  4968 ;;      Temps:          0       0       0       0       0       0       0
  4969 ;;      Totals:         0       2       0       0       0       0       0
  4970 ;;Total ram usage:        2 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; Hardware stack levels required when called:   10
  4973 ;; This function calls:
  4974 ;;		_blink
  4975 ;;		_btPress
  4976 ;;		_clearShiftREG
  4977 ;;		_intToFloatStr
  4978 ;;		_resetParametros
  4979 ;;		_sprintf
  4980 ;; This function is called by:
  4981 ;;		_main
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text7
  4986  00270C                     __ptext7:
  4987                           	opt stack 0
  4988  00270C                     _telaPrincipal:
  4989                           	opt stack 0
  4990  00270C  FFFF               	dw	65535	; assembler added errata NOP
  4991                           
  4992                           ;tela_PRINCIPAL.h: 23: sprintf(&line1[2], " %02d:%02d:%02d %02d/%02d", _hor, _min, _sec,
      +                           _dia, _mes);
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;incstack = 0
  4996  00270E  0E7D               	movlw	low (_line1+2)
  4997  002710  0100               	movlb	0	; () banked
  4998  002712  6FA1               	movwf	sprintf@wh& (0+255),b
  4999  002714  0E01               	movlw	high (_line1+2)
  5000  002716  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5001  002718  0E79               	movlw	low STR_55
  5002  00271A  6FA3               	movwf	sprintf@f& (0+255),b
  5003  00271C  0E7C               	movlw	high STR_55
  5004  00271E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5005  002720  C0ED  F0A5         	movff	__hor,?_sprintf+4
  5006  002724  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  5007  002726  C0EE  F0A7         	movff	__min,?_sprintf+6
  5008  00272A  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  5009  00272C  C0EF  F0A9         	movff	__sec,?_sprintf+8
  5010  002730  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  5011  002732  C0EC  F0AB         	movff	__dia,?_sprintf+10
  5012  002736  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  5013  002738  C0EB  F0AD         	movff	__mes,?_sprintf+12
  5014  00273C  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  5015  00273E  EC89  F03A         	call	_sprintf	;wreg free
  5016                           
  5017                           ;tela_PRINCIPAL.h: 25: line1[0] = 0x01;
  5018  002742  0E01               	movlw	1
  5019  002744  0101               	movlb	1	; () banked
  5020  002746  6F7B               	movwf	_line1& (0+255),b
  5021                           
  5022                           ; BSR set to: 1
  5023                           ;tela_PRINCIPAL.h: 26: line1[1] = intensidadeSinal;
  5024  002748  C0FF  F17C         	movff	_intensidadeSinal,_line1+1
  5025                           
  5026                           ; BSR set to: 1
  5027                           ;tela_PRINCIPAL.h: 27: line1[19] = 0x05;
  5028  00274C  0E05               	movlw	5
  5029  00274E  6F8E               	movwf	(_line1+19)& (0+255),b
  5030                           
  5031                           ; BSR set to: 1
  5032                           ;tela_PRINCIPAL.h: 29: if (!PORTCbits.RC0) {
  5033  002750  B082               	btfsc	3970,0,c	;volatile
  5034  002752  D028               	goto	l670
  5035                           
  5036                           ; BSR set to: 1
  5037                           ;tela_PRINCIPAL.h: 30: blink(line1, 20, 20);
  5038  002754  0E7B               	movlw	low _line1
  5039  002756  0100               	movlb	0	; () banked
  5040  002758  6F80               	movwf	blink@line& (0+255),b
  5041  00275A  0E01               	movlw	high _line1
  5042  00275C  6F81               	movwf	(blink@line+1)& (0+255),b
  5043  00275E  0E14               	movlw	20
  5044  002760  6F82               	movwf	blink@start& (0+255),b
  5045  002762  0E14               	movlw	20
  5046  002764  6F83               	movwf	blink@end& (0+255),b
  5047  002766  ECA2  F039         	call	_blink	;wreg free
  5048                           
  5049                           ;tela_PRINCIPAL.h: 32: }
  5050                           ;tela_PRINCIPAL.h: 34: switch (codigoErro) {
  5051  00276A  D01C               	goto	l670
  5052  00276C  FFFF               	dw	65535	; assembler added errata NOP
  5053                           
  5054                           ;tela_PRINCIPAL.h: 36: sprintf(&line3[1], "*falta de energia");
  5055  00276E  0E52               	movlw	low (_line3+1)
  5056  002770  0100               	movlb	0	; () banked
  5057  002772  6FA1               	movwf	sprintf@wh& (0+255),b
  5058  002774  0E01               	movlw	high (_line3+1)
  5059  002776  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5060  002778  0EB3               	movlw	low STR_56
  5061  00277A  6FA3               	movwf	sprintf@f& (0+255),b
  5062  00277C  0E7D               	movlw	high STR_56
  5063  00277E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5064  002780  EC89  F03A         	call	_sprintf	;wreg free
  5065                           
  5066                           ;tela_PRINCIPAL.h: 37: codigoErro = 0;
  5067  002784  0E00               	movlw	0
  5068  002786  6E72               	movwf	_codigoErro,c
  5069                           
  5070                           ;tela_PRINCIPAL.h: 38: break;
  5071  002788  D015               	goto	l672
  5072  00278A  FFFF               	dw	65535	; assembler added errata NOP
  5073                           
  5074                           ;tela_PRINCIPAL.h: 40: sprintf(&line3[1], "*falha val. ladrao");
  5075  00278C  0E52               	movlw	low (_line3+1)
  5076  00278E  0100               	movlb	0	; () banked
  5077  002790  6FA1               	movwf	sprintf@wh& (0+255),b
  5078  002792  0E01               	movlw	high (_line3+1)
  5079  002794  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5080  002796  0E31               	movlw	low STR_57
  5081  002798  6FA3               	movwf	sprintf@f& (0+255),b
  5082  00279A  0E7D               	movlw	high STR_57
  5083  00279C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5084  00279E  EC89  F03A         	call	_sprintf	;wreg free
  5085                           
  5086                           ;tela_PRINCIPAL.h: 42: }
  5087                           
  5088                           ;tela_PRINCIPAL.h: 41: break;
  5089  0027A2  D008               	goto	l672
  5090  0027A4                     l670:
  5091  0027A4  FFFF               	dw	65535	; assembler added errata NOP
  5092  0027A6  5072               	movf	_codigoErro,w,c
  5093                           
  5094                           ; Switch size 1, requested type "space"
  5095                           ; Number of cases is 2, Range of values is 1 to 3
  5096                           ; switch strategies available:
  5097                           ; Name         Instructions Cycles
  5098                           ; simple_byte            7     4 (average)
  5099                           ;	Chosen strategy is simple_byte
  5100  0027A8  0A01               	xorlw	1	; case 1
  5101  0027AA  B4D8               	btfsc	status,2,c
  5102  0027AC  D7DF               	goto	l671
  5103  0027AE  0A02               	xorlw	2	; case 3
  5104  0027B0  B4D8               	btfsc	status,2,c
  5105  0027B2  D7EB               	goto	l673
  5106  0027B4                     l672:
  5107  0027B4  FFFF               	dw	65535	; assembler added errata NOP
  5108                           
  5109                           ;tela_PRINCIPAL.h: 44: if (ocorrendoIncendio) {
  5110  0027B6  0100               	movlb	0	; () banked
  5111  0027B8  51F3               	movf	_ocorrendoIncendio& (0+255),w,b
  5112  0027BA  B4D8               	btfsc	status,2,c
  5113  0027BC  D016               	goto	l674
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;tela_PRINCIPAL.h: 46: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
  5117  0027BE  51F8               	movf	_pressao& (0+255),w,b
  5118  0027C0  EC5C  F01F         	call	_intToFloatStr
  5119  0027C4  C0B5  F0C2         	movff	?_intToFloatStr,_telaPrincipal$2366
  5120  0027C8  C0B6  F0C3         	movff	?_intToFloatStr+1,_telaPrincipal$2366+1
  5121                           
  5122                           ;tela_PRINCIPAL.h: 46: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
  5123  0027CC  0E68               	movlw	low (_line2+2)
  5124  0027CE  0100               	movlb	0	; () banked
  5125  0027D0  6FA1               	movwf	sprintf@wh& (0+255),b
  5126  0027D2  0E01               	movlw	high (_line2+2)
  5127  0027D4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5128  0027D6  0E38               	movlw	low STR_39
  5129  0027D8  6FA3               	movwf	sprintf@f& (0+255),b
  5130  0027DA  0E7E               	movlw	high STR_39
  5131  0027DC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5132  0027DE  C0C2  F0A5         	movff	_telaPrincipal$2366,?_sprintf+4
  5133  0027E2  C0C3  F0A6         	movff	_telaPrincipal$2366+1,?_sprintf+5
  5134  0027E6  EC89  F03A         	call	_sprintf	;wreg free
  5135  0027EA                     l674:
  5136  0027EA  FFFF               	dw	65535	; assembler added errata NOP
  5137                           
  5138                           ;tela_PRINCIPAL.h: 47: }
  5139                           ;tela_PRINCIPAL.h: 48: if (pressao > 99 || pressao < 0) {
  5140  0027EC  0100               	movlb	0	; () banked
  5141  0027EE  BFF9               	btfsc	(_pressao+1)& (0+255),7,b
  5142  0027F0  D006               	goto	u7720
  5143  0027F2  51F9               	movf	(_pressao+1)& (0+255),w,b
  5144  0027F4  E108               	bnz	l6992
  5145  0027F6  0E64               	movlw	100
  5146  0027F8  5DF8               	subwf	_pressao& (0+255),w,b
  5147  0027FA  B0D8               	btfsc	status,0,c
  5148  0027FC  D003               	goto	u7730
  5149  0027FE                     u7720:
  5150  0027FE  FFFF               	dw	65535	; assembler added errata NOP
  5151                           
  5152                           ; BSR set to: 0
  5153  002800  AFF9               	btfss	(_pressao+1)& (0+255),7,b
  5154  002802  D00E               	goto	l675
  5155  002804                     u7730:
  5156  002804  FFFF               	dw	65535	; assembler added errata NOP
  5157  002806                     l6992:
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;tela_PRINCIPAL.h: 49: sprintf(&line2[1], "Erro no Transdutor");
  5161  002806  0E67               	movlw	low (_line2+1)
  5162  002808  6FA1               	movwf	sprintf@wh& (0+255),b
  5163  00280A  0E01               	movlw	high (_line2+1)
  5164  00280C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5165  00280E  0E57               	movlw	low STR_59
  5166  002810  6FA3               	movwf	sprintf@f& (0+255),b
  5167  002812  0E7D               	movlw	high STR_59
  5168  002814  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5169  002816  EC89  F03A         	call	_sprintf	;wreg free
  5170                           
  5171                           ;tela_PRINCIPAL.h: 50: clearShiftREG();
  5172  00281A  EC9E  F038         	call	_clearShiftREG	;wreg free
  5173                           
  5174                           ;tela_PRINCIPAL.h: 51: } else {
  5175  00281E  D018               	goto	l678
  5176  002820                     l675:
  5177  002820  FFFF               	dw	65535	; assembler added errata NOP
  5178                           
  5179                           ;tela_PRINCIPAL.h: 52: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
  5180  002822  0100               	movlb	0	; () banked
  5181  002824  51F8               	movf	_pressao& (0+255),w,b
  5182  002826  EC5C  F01F         	call	_intToFloatStr
  5183  00282A  C0B5  F0C2         	movff	?_intToFloatStr,_telaPrincipal$2366
  5184  00282E  C0B6  F0C3         	movff	?_intToFloatStr+1,_telaPrincipal$2366+1
  5185                           
  5186                           ;tela_PRINCIPAL.h: 52: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
  5187  002832  0E68               	movlw	low (_line2+2)
  5188  002834  0100               	movlb	0	; () banked
  5189  002836  6FA1               	movwf	sprintf@wh& (0+255),b
  5190  002838  0E01               	movlw	high (_line2+2)
  5191  00283A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5192  00283C  0E38               	movlw	low STR_39
  5193  00283E  6FA3               	movwf	sprintf@f& (0+255),b
  5194  002840  0E7E               	movlw	high STR_39
  5195  002842  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5196  002844  C0C2  F0A5         	movff	_telaPrincipal$2366,?_sprintf+4
  5197  002848  C0C3  F0A6         	movff	_telaPrincipal$2366+1,?_sprintf+5
  5198  00284C  EC89  F03A         	call	_sprintf	;wreg free
  5199  002850                     l678:
  5200  002850  FFFF               	dw	65535	; assembler added errata NOP
  5201                           
  5202                           ;tela_PRINCIPAL.h: 53: }
  5203                           ;tela_PRINCIPAL.h: 56: if (codigoErro > 1 || ocorrendoIncendio) {
  5204  002852  0E02               	movlw	2
  5205  002854  6072               	cpfslt	_codigoErro,c
  5206  002856  D004               	goto	u7750
  5207  002858  0100               	movlb	0	; () banked
  5208  00285A  51F3               	movf	_ocorrendoIncendio& (0+255),w,b
  5209  00285C  B4D8               	btfsc	status,2,c
  5210  00285E  D01E               	goto	l682
  5211  002860                     u7750:
  5212  002860  FFFF               	dw	65535	; assembler added errata NOP
  5213                           
  5214                           ;tela_PRINCIPAL.h: 57: blink(line3, 1, 19);
  5215                           
  5216                           ; BSR set to: 0
  5217  002862  0E51               	movlw	low _line3
  5218  002864  0100               	movlb	0	; () banked
  5219  002866  6F80               	movwf	blink@line& (0+255),b
  5220  002868  0E01               	movlw	high _line3
  5221  00286A  6F81               	movwf	(blink@line+1)& (0+255),b
  5222  00286C  0E01               	movlw	1
  5223  00286E  6F82               	movwf	blink@start& (0+255),b
  5224  002870  0E13               	movlw	19
  5225  002872  6F83               	movwf	blink@end& (0+255),b
  5226  002874  ECA2  F039         	call	_blink	;wreg free
  5227                           
  5228                           ;tela_PRINCIPAL.h: 58: sprintf(&line4[1], "Press ESC p/ Reset");
  5229  002878  0E3D               	movlw	low (_line4+1)
  5230  00287A  0100               	movlb	0	; () banked
  5231  00287C  6FA1               	movwf	sprintf@wh& (0+255),b
  5232  00287E  0E01               	movlw	high (_line4+1)
  5233  002880  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5234  002882  0E6A               	movlw	low STR_61
  5235  002884  6FA3               	movwf	sprintf@f& (0+255),b
  5236  002886  0E7D               	movlw	high STR_61
  5237  002888  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5238  00288A  EC89  F03A         	call	_sprintf	;wreg free
  5239                           
  5240                           ;tela_PRINCIPAL.h: 59: if (btPress(1)) {
  5241  00288E  0E01               	movlw	1
  5242  002890  EC43  F03C         	call	_btPress
  5243  002894  0900               	iorlw	0
  5244  002896  A4D8               	btfss	status,2,c
  5245                           
  5246                           ;tela_PRINCIPAL.h: 60: resetParametros();
  5247  002898  ECC1  F037         	call	_resetParametros	;wreg free
  5248  00289C                     l682:
  5249  00289C  FFFF               	dw	65535	; assembler added errata NOP
  5250                           
  5251                           ;tela_PRINCIPAL.h: 61: }
  5252                           ;tela_PRINCIPAL.h: 62: }
  5253                           ;tela_PRINCIPAL.h: 64: if (btPress(4)) {
  5254  00289E  0E04               	movlw	4
  5255  0028A0  EC43  F03C         	call	_btPress
  5256  0028A4  0900               	iorlw	0
  5257  0028A6  B4D8               	btfsc	status,2,c
  5258  0028A8  D005               	goto	l683
  5259                           
  5260                           ;tela_PRINCIPAL.h: 65: menu_posi = 1;
  5261  0028AA  0E01               	movlw	1
  5262  0028AC  0100               	movlb	0	; () banked
  5263  0028AE  6FDF               	movwf	_menu_posi& (0+255),b
  5264                           
  5265                           ;tela_PRINCIPAL.h: 66: sub_menu_posi = 1;
  5266  0028B0  0E01               	movlw	1
  5267  0028B2  6E69               	movwf	_sub_menu_posi,c
  5268  0028B4                     l683:
  5269  0028B4  FFFF               	dw	65535	; assembler added errata NOP
  5270                           
  5271                           ; BSR set to: 0
  5272  0028B6  0012               	return		;funcret
  5273  0028B8  FFFF               	dw	65535	; errata NOP
  5274  0028BA                     __end_of_telaPrincipal:
  5275                           	opt stack 0
  5276                           tblptru	equ	0xFF8
  5277                           tblptrh	equ	0xFF7
  5278                           tblptrl	equ	0xFF6
  5279                           tablat	equ	0xFF5
  5280                           postinc0	equ	0xFEE
  5281                           wreg	equ	0xFE8
  5282                           postdec1	equ	0xFE5
  5283                           fsr1l	equ	0xFE1
  5284                           indf2	equ	0xFDF
  5285                           fsr2h	equ	0xFDA
  5286                           fsr2l	equ	0xFD9
  5287                           status	equ	0xFD8
  5288                           
  5289 ;; *************** function _resetParametros *****************
  5290 ;; Defined at:
  5291 ;;		line 10 in file "tela_PRINCIPAL.h"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5305 ;;      Params:         0       0       0       0       0       0       0
  5306 ;;      Locals:         0       0       0       0       0       0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0
  5308 ;;      Totals:         0       0       0       0       0       0       0
  5309 ;;Total ram usage:        0 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    7
  5312 ;; This function calls:
  5313 ;;		_clearShiftREG
  5314 ;; This function is called by:
  5315 ;;		_telaPrincipal
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text8
  5320  006F82                     __ptext8:
  5321                           	opt stack 0
  5322  006F82                     _resetParametros:
  5323                           	opt stack 0
  5324  006F82  FFFF               	dw	65535	; assembler added errata NOP
  5325                           
  5326                           ;tela_PRINCIPAL.h: 11: ocorrendoIncendio = 0;
  5327                           
  5328                           ;incstack = 0
  5329  006F84  0E00               	movlw	0
  5330  006F86  0100               	movlb	0	; () banked
  5331  006F88  6FF3               	movwf	_ocorrendoIncendio& (0+255),b
  5332                           
  5333                           ;tela_PRINCIPAL.h: 12: codigoErro = 0;
  5334  006F8A  0E00               	movlw	0
  5335  006F8C  6E72               	movwf	_codigoErro,c
  5336                           
  5337                           ;tela_PRINCIPAL.h: 13: status_estacionaria = 1;
  5338  006F8E  0E01               	movlw	1
  5339  006F90  6FFB               	movwf	_status_estacionaria& (0+255),b
  5340                           
  5341                           ;tela_PRINCIPAL.h: 14: status_jockey = 1;
  5342  006F92  0E01               	movlw	1
  5343  006F94  6FFD               	movwf	_status_jockey& (0+255),b
  5344                           
  5345                           ;tela_PRINCIPAL.h: 15: status_principal = 1;
  5346  006F96  0E01               	movlw	1
  5347  006F98  6FFC               	movwf	_status_principal& (0+255),b
  5348                           
  5349                           ;tela_PRINCIPAL.h: 16: tempo_limite_partida = 0;
  5350  006F9A  0E00               	movlw	0
  5351  006F9C  6E6B               	movwf	_tempo_limite_partida,c
  5352                           
  5353                           ;tela_PRINCIPAL.h: 17: tempo_partida = 0;
  5354  006F9E  0E00               	movlw	0
  5355  006FA0  6E6C               	movwf	_tempo_partida,c
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;tela_PRINCIPAL.h: 18: clearShiftREG();
  5359  006FA2  EC9E  F038         	call	_clearShiftREG	;wreg free
  5360  006FA6  0012               	return		;funcret
  5361  006FA8  FFFF               	dw	65535	; errata NOP
  5362  006FAA                     __end_of_resetParametros:
  5363                           	opt stack 0
  5364                           tblptru	equ	0xFF8
  5365                           tblptrh	equ	0xFF7
  5366                           tblptrl	equ	0xFF6
  5367                           tablat	equ	0xFF5
  5368                           postinc0	equ	0xFEE
  5369                           wreg	equ	0xFE8
  5370                           postdec1	equ	0xFE5
  5371                           fsr1l	equ	0xFE1
  5372                           indf2	equ	0xFDF
  5373                           fsr2h	equ	0xFDA
  5374                           fsr2l	equ	0xFD9
  5375                           status	equ	0xFD8
  5376                           
  5377 ;; *************** function _setShiftREG *****************
  5378 ;; Defined at:
  5379 ;;		line 37 in file "shift595.h"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  i               1    1[BANK0 ] unsigned char 
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      void 
  5386 ;; Registers used:
  5387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5393 ;;      Params:         0       0       0       0       0       0       0
  5394 ;;      Locals:         0       1       0       0       0       0       0
  5395 ;;      Temps:          0       1       0       0       0       0       0
  5396 ;;      Totals:         0       2       0       0       0       0       0
  5397 ;;Total ram usage:        2 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    6
  5400 ;; This function calls:
  5401 ;;		Nothing
  5402 ;; This function is called by:
  5403 ;;		_main
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           	psect	text9
  5408  00755A                     __ptext9:
  5409                           	opt stack 0
  5410  00755A                     _setShiftREG:
  5411                           	opt stack 0
  5412  00755A  FFFF               	dw	65535	; assembler added errata NOP
  5413                           
  5414                           ;shift595.h: 38: unsigned char i = 0;
  5415                           
  5416                           ;incstack = 0
  5417  00755C  0E00               	movlw	0
  5418  00755E  0100               	movlb	0	; () banked
  5419  007560  6F81               	movwf	setShiftREG@i& (0+255),b
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;shift595.h: 39: PORTEbits.RE1 = 0;
  5423  007562  9284               	bcf	3972,1,c	;volatile
  5424                           
  5425                           ;shift595.h: 40: for (i = 0; i < 8; i++) {
  5426  007564  0E00               	movlw	0
  5427  007566  6F81               	movwf	setShiftREG@i& (0+255),b
  5428  007568  D015               	goto	l6464
  5429  00756A                     l425:
  5430  00756A  FFFF               	dw	65535	; assembler added errata NOP
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;shift595.h: 41: PORTEbits.RE0 = 0;
  5434  00756C  9084               	bcf	3972,0,c	;volatile
  5435                           
  5436                           ; BSR set to: 0
  5437                           ;shift595.h: 42: PORTEbits.RE2 = shift[i];
  5438  00756E  5181               	movf	setShiftREG@i& (0+255),w,b
  5439  007570  0D01               	mullw	1
  5440  007572  0E44               	movlw	low _shift
  5441  007574  24F3               	addwf	prodl,w,c
  5442  007576  6ED9               	movwf	fsr2l,c
  5443  007578  0E00               	movlw	high _shift
  5444  00757A  20F4               	addwfc	prodh,w,c
  5445  00757C  6EDA               	movwf	fsr2h,c
  5446  00757E  50DF               	movf	indf2,w,c
  5447  007580  6F80               	movwf	??_setShiftREG& (0+255),b
  5448  007582  4780               	rlncf	??_setShiftREG& (0+255),f,b
  5449  007584  4780               	rlncf	??_setShiftREG& (0+255),f,b
  5450  007586  5084               	movf	3972,w,c	;volatile
  5451  007588  1980               	xorwf	??_setShiftREG& (0+255),w,b
  5452  00758A  0BFB               	andlw	-5
  5453  00758C  1980               	xorwf	??_setShiftREG& (0+255),w,b
  5454  00758E  6E84               	movwf	3972,c	;volatile
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;shift595.h: 43: PORTEbits.RE0 = 1;
  5458  007590  8084               	bsf	3972,0,c	;volatile
  5459                           
  5460                           ; BSR set to: 0
  5461  007592  2B81               	incf	setShiftREG@i& (0+255),f,b
  5462  007594                     l6464:
  5463  007594  FFFF               	dw	65535	; assembler added errata NOP
  5464                           
  5465                           ; BSR set to: 0
  5466  007596  0E07               	movlw	7
  5467  007598  6581               	cpfsgt	setShiftREG@i& (0+255),b
  5468  00759A  D7E7               	goto	l425
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;shift595.h: 44: }
  5472                           ;shift595.h: 45: PORTEbits.RE1 = 1;
  5473  00759C  8284               	bsf	3972,1,c	;volatile
  5474                           
  5475                           ; BSR set to: 0
  5476  00759E  0012               	return		;funcret
  5477  0075A0  FFFF               	dw	65535	; errata NOP
  5478  0075A2                     __end_of_setShiftREG:
  5479                           	opt stack 0
  5480                           tblptru	equ	0xFF8
  5481                           tblptrh	equ	0xFF7
  5482                           tblptrl	equ	0xFF6
  5483                           tablat	equ	0xFF5
  5484                           prodh	equ	0xFF4
  5485                           prodl	equ	0xFF3
  5486                           postinc0	equ	0xFEE
  5487                           wreg	equ	0xFE8
  5488                           postdec1	equ	0xFE5
  5489                           fsr1l	equ	0xFE1
  5490                           indf2	equ	0xFDF
  5491                           fsr2h	equ	0xFDA
  5492                           fsr2l	equ	0xFD9
  5493                           status	equ	0xFD8
  5494                           
  5495 ;; *************** function _lerParametros *****************
  5496 ;; Defined at:
  5497 ;;		line 9 in file "util.h"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;		None
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  i               1   21[BANK0 ] unsigned char 
  5502 ;;  verifica_mem    1   20[BANK0 ] unsigned char 
  5503 ;; Return value:  Size  Location     Type
  5504 ;;                  1    wreg      void 
  5505 ;; Registers used:
  5506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5512 ;;      Params:         0       0       0       0       0       0       0
  5513 ;;      Locals:         0       2       0       0       0       0       0
  5514 ;;      Temps:          0       0       0       0       0       0       0
  5515 ;;      Totals:         0       2       0       0       0       0       0
  5516 ;;Total ram usage:        2 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; Hardware stack levels required when called:   10
  5519 ;; This function calls:
  5520 ;;		_readEEPROM16_ext
  5521 ;;		_readEEPROM_ext
  5522 ;;		_writeEEPROM_ext
  5523 ;; This function is called by:
  5524 ;;		_main
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           	psect	text10
  5529  002F70                     __ptext10:
  5530                           	opt stack 0
  5531  002F70                     _lerParametros:
  5532                           	opt stack 0
  5533  002F70  FFFF               	dw	65535	; assembler added errata NOP
  5534                           
  5535                           ;util.h: 10: char i = 0;
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;incstack = 0
  5539  002F72  0E00               	movlw	0
  5540  002F74  0100               	movlb	0	; () banked
  5541  002F76  6F95               	movwf	lerParametros@i& (0+255),b
  5542                           
  5543                           ;util.h: 11: char verifica_memoria_nova = 0;
  5544  002F78  0E00               	movlw	0
  5545  002F7A  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;util.h: 12: verifica_memoria_nova = readEEPROM_ext(12);
  5549  002F7C  0E0C               	movlw	12
  5550  002F7E  EC21  F03B         	call	_readEEPROM_ext
  5551  002F82  0100               	movlb	0	; () banked
  5552  002F84  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;util.h: 13: if (verifica_memoria_nova != 20) {
  5556  002F86  0E14               	movlw	20
  5557  002F88  1994               	xorwf	lerParametros@verifica_memoria_nova& (0+255),w,b
  5558  002F8A  B4D8               	btfsc	status,2,c
  5559  002F8C  D016               	goto	l592
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;util.h: 14: for (i = 0; i < 100; i++) {
  5563  002F8E  0E00               	movlw	0
  5564  002F90  6F95               	movwf	lerParametros@i& (0+255),b
  5565  002F92                     l6826:
  5566  002F92  FFFF               	dw	65535	; assembler added errata NOP
  5567                           
  5568                           ; BSR set to: 0
  5569  002F94  0E63               	movlw	99
  5570  002F96  6595               	cpfsgt	lerParametros@i& (0+255),b
  5571  002F98  D001               	goto	l593
  5572  002F9A  D009               	goto	u7560
  5573  002F9C                     l593:
  5574  002F9C  FFFF               	dw	65535	; assembler added errata NOP
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;util.h: 15: writeEEPROM_ext(i, 0);
  5578                           
  5579                           ; BSR set to: 0
  5580  002F9E  0E00               	movlw	0
  5581  002FA0  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  5582  002FA2  5195               	movf	lerParametros@i& (0+255),w,b
  5583  002FA4  EC66  F03A         	call	_writeEEPROM_ext
  5584  002FA8  0100               	movlb	0	; () banked
  5585  002FAA  2B95               	incf	lerParametros@i& (0+255),f,b
  5586  002FAC  D7F2               	goto	l6826
  5587  002FAE                     u7560:
  5588  002FAE  FFFF               	dw	65535	; assembler added errata NOP
  5589                           
  5590                           ; BSR set to: 0
  5591                           ;util.h: 16: }
  5592                           ;util.h: 17: writeEEPROM_ext(12, 20);
  5593                           
  5594                           ; BSR set to: 0
  5595  002FB0  0E14               	movlw	20
  5596  002FB2  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  5597  002FB4  0E0C               	movlw	12
  5598  002FB6  EC66  F03A         	call	_writeEEPROM_ext
  5599  002FBA                     l592:
  5600  002FBA  FFFF               	dw	65535	; assembler added errata NOP
  5601                           
  5602                           ;util.h: 18: }
  5603                           ;util.h: 20: sp_jockey = readEEPROM_ext(0);
  5604  002FBC  0E00               	movlw	0
  5605  002FBE  EC21  F03B         	call	_readEEPROM_ext
  5606  002FC2  0100               	movlb	0	; () banked
  5607  002FC4  6FE3               	movwf	_sp_jockey& (0+255),b
  5608                           
  5609                           ;util.h: 21: sp_principal = readEEPROM_ext(1);
  5610  002FC6  0E01               	movlw	1
  5611  002FC8  EC21  F03B         	call	_readEEPROM_ext
  5612  002FCC  0100               	movlb	0	; () banked
  5613  002FCE  6FE2               	movwf	_sp_principal& (0+255),b
  5614                           
  5615                           ;util.h: 22: sp_estacionaria = readEEPROM_ext(2);
  5616  002FD0  0E02               	movlw	2
  5617  002FD2  EC21  F03B         	call	_readEEPROM_ext
  5618  002FD6  0100               	movlb	0	; () banked
  5619  002FD8  6FE1               	movwf	_sp_estacionaria& (0+255),b
  5620                           
  5621                           ;util.h: 23: horimetro = readEEPROM16_ext(8);
  5622  002FDA  0E08               	movlw	8
  5623  002FDC  ECD5  F038         	call	_readEEPROM16_ext
  5624  002FE0  C08E  F04F         	movff	?_readEEPROM16_ext,_horimetro
  5625  002FE4  C08F  F050         	movff	?_readEEPROM16_ext+1,_horimetro+1
  5626                           
  5627                           ;util.h: 24: sp_pressao_rede = readEEPROM_ext(4);
  5628  002FE8  0E04               	movlw	4
  5629  002FEA  EC21  F03B         	call	_readEEPROM_ext
  5630  002FEE  0100               	movlb	0	; () banked
  5631  002FF0  6FE4               	movwf	_sp_pressao_rede& (0+255),b
  5632                           
  5633                           ;util.h: 25: intervalo_teste_dia = readEEPROM_ext(6);
  5634  002FF2  0E06               	movlw	6
  5635  002FF4  EC21  F03B         	call	_readEEPROM_ext
  5636  002FF8  0100               	movlb	0	; () banked
  5637  002FFA  6FE9               	movwf	_intervalo_teste_dia& (0+255),b
  5638                           
  5639                           ;util.h: 26: tempo_limite_estacionaria = readEEPROM_ext(7);
  5640  002FFC  0E07               	movlw	7
  5641  002FFE  EC21  F03B         	call	_readEEPROM_ext
  5642  003002  0100               	movlb	0	; () banked
  5643  003004  6FE6               	movwf	_tempo_limite_estacionaria& (0+255),b
  5644                           
  5645                           ;util.h: 27: dias_restante_teste = readEEPROM_ext(10);
  5646  003006  0E0A               	movlw	10
  5647  003008  EC21  F03B         	call	_readEEPROM_ext
  5648  00300C  0100               	movlb	0	; () banked
  5649  00300E  6FE8               	movwf	_dias_restante_teste& (0+255),b
  5650                           
  5651                           ;util.h: 28: horario_de_teste = readEEPROM_ext(11);
  5652  003010  0E0B               	movlw	11
  5653  003012  EC21  F03B         	call	_readEEPROM_ext
  5654  003016  0100               	movlb	0	; () banked
  5655  003018  6FE7               	movwf	_horario_de_teste& (0+255),b
  5656                           
  5657                           ;util.h: 29: tempo_limite_teste_estacionaria = readEEPROM_ext(13);
  5658  00301A  0E0D               	movlw	13
  5659  00301C  EC21  F03B         	call	_readEEPROM_ext
  5660  003020  0100               	movlb	0	; () banked
  5661  003022  6FE5               	movwf	_tempo_limite_teste_estacionaria& (0+255),b
  5662                           
  5663                           ;util.h: 31: habilitaTesteAutomatico = readEEPROM_ext(15);
  5664  003024  0E0F               	movlw	15
  5665  003026  EC21  F03B         	call	_readEEPROM_ext
  5666  00302A  0100               	movlb	0	; () banked
  5667  00302C  6FF0               	movwf	_habilitaTesteAutomatico& (0+255),b
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;util.h: 33: for (i = 0; i < 11; i++) {
  5671  00302E  0E00               	movlw	0
  5672  003030  6F95               	movwf	lerParametros@i& (0+255),b
  5673  003032                     l6840:
  5674  003032  FFFF               	dw	65535	; assembler added errata NOP
  5675                           
  5676                           ; BSR set to: 0
  5677  003034  0E0A               	movlw	10
  5678  003036  6595               	cpfsgt	lerParametros@i& (0+255),b
  5679  003038  D001               	goto	l595
  5680  00303A  D011               	goto	u7580
  5681  00303C                     l595:
  5682  00303C  FFFF               	dw	65535	; assembler added errata NOP
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;util.h: 34: tel1[i] = readEEPROM_ext(20 + i);
  5686                           
  5687                           ; BSR set to: 0
  5688  00303E  5195               	movf	lerParametros@i& (0+255),w,b
  5689  003040  0D01               	mullw	1
  5690  003042  0EB0               	movlw	low _tel1
  5691  003044  24F3               	addwf	prodl,w,c
  5692  003046  6ED9               	movwf	fsr2l,c
  5693  003048  0E01               	movlw	high _tel1
  5694  00304A  20F4               	addwfc	prodh,w,c
  5695  00304C  6EDA               	movwf	fsr2h,c
  5696  00304E  5195               	movf	lerParametros@i& (0+255),w,b
  5697  003050  0F14               	addlw	20
  5698  003052  EC21  F03B         	call	_readEEPROM_ext
  5699  003056  6EDF               	movwf	indf2,c
  5700  003058  0100               	movlb	0	; () banked
  5701  00305A  2B95               	incf	lerParametros@i& (0+255),f,b
  5702  00305C  D7EA               	goto	l6840
  5703  00305E                     u7580:
  5704  00305E  FFFF               	dw	65535	; assembler added errata NOP
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;util.h: 35: }
  5708                           ;util.h: 36: for (i = 0; i < 11; i++) {
  5709                           
  5710                           ; BSR set to: 0
  5711  003060  0E00               	movlw	0
  5712  003062  6F95               	movwf	lerParametros@i& (0+255),b
  5713  003064                     l6852:
  5714  003064  FFFF               	dw	65535	; assembler added errata NOP
  5715                           
  5716                           ; BSR set to: 0
  5717  003066  0E0A               	movlw	10
  5718  003068  6595               	cpfsgt	lerParametros@i& (0+255),b
  5719  00306A  D001               	goto	l597
  5720  00306C  D011               	goto	u7600
  5721  00306E                     l597:
  5722  00306E  FFFF               	dw	65535	; assembler added errata NOP
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;util.h: 37: tel2[i] = readEEPROM_ext(40 + i);
  5726                           
  5727                           ; BSR set to: 0
  5728  003070  5195               	movf	lerParametros@i& (0+255),w,b
  5729  003072  0D01               	mullw	1
  5730  003074  0EA4               	movlw	low _tel2
  5731  003076  24F3               	addwf	prodl,w,c
  5732  003078  6ED9               	movwf	fsr2l,c
  5733  00307A  0E01               	movlw	high _tel2
  5734  00307C  20F4               	addwfc	prodh,w,c
  5735  00307E  6EDA               	movwf	fsr2h,c
  5736  003080  5195               	movf	lerParametros@i& (0+255),w,b
  5737  003082  0F28               	addlw	40
  5738  003084  EC21  F03B         	call	_readEEPROM_ext
  5739  003088  6EDF               	movwf	indf2,c
  5740  00308A  0100               	movlb	0	; () banked
  5741  00308C  2B95               	incf	lerParametros@i& (0+255),f,b
  5742  00308E  D7EA               	goto	l6852
  5743  003090                     u7600:
  5744  003090  FFFF               	dw	65535	; assembler added errata NOP
  5745                           
  5746                           ; BSR set to: 0
  5747                           
  5748                           ; BSR set to: 0
  5749  003092  0012               	return		;funcret
  5750  003094  FFFF               	dw	65535	; errata NOP
  5751  003096                     __end_of_lerParametros:
  5752                           	opt stack 0
  5753                           tblptru	equ	0xFF8
  5754                           tblptrh	equ	0xFF7
  5755                           tblptrl	equ	0xFF6
  5756                           tablat	equ	0xFF5
  5757                           prodh	equ	0xFF4
  5758                           prodl	equ	0xFF3
  5759                           postinc0	equ	0xFEE
  5760                           wreg	equ	0xFE8
  5761                           postdec1	equ	0xFE5
  5762                           fsr1l	equ	0xFE1
  5763                           indf2	equ	0xFDF
  5764                           fsr2h	equ	0xFDA
  5765                           fsr2l	equ	0xFD9
  5766                           status	equ	0xFD8
  5767                           
  5768 ;; *************** function _readEEPROM16_ext *****************
  5769 ;; Defined at:
  5770 ;;		line 48 in file "eeprom.h"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;  adress          1    wreg     unsigned char 
  5773 ;; Auto vars:     Size  Location     Type
  5774 ;;  adress          1   19[BANK0 ] unsigned char 
  5775 ;;  data            2   17[BANK0 ] unsigned int 
  5776 ;; Return value:  Size  Location     Type
  5777 ;;                  2   14[BANK0 ] unsigned int 
  5778 ;; Registers used:
  5779 ;;		wreg, status,2, status,0, cstack
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/0
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5785 ;;      Params:         0       2       0       0       0       0       0
  5786 ;;      Locals:         0       3       0       0       0       0       0
  5787 ;;      Temps:          0       1       0       0       0       0       0
  5788 ;;      Totals:         0       6       0       0       0       0       0
  5789 ;;Total ram usage:        6 bytes
  5790 ;; Hardware stack levels used:    1
  5791 ;; Hardware stack levels required when called:    9
  5792 ;; This function calls:
  5793 ;;		_readEEPROM_ext
  5794 ;; This function is called by:
  5795 ;;		_lerParametros
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text11
  5800  0071AA                     __ptext11:
  5801                           	opt stack 0
  5802  0071AA                     _readEEPROM16_ext:
  5803                           	opt stack 0
  5804  0071AA  FFFF               	dw	65535	; assembler added errata NOP
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;incstack = 0
  5808                           ;readEEPROM16_ext@adress stored from wreg
  5809  0071AC  0100               	movlb	0	; () banked
  5810  0071AE  6F93               	movwf	readEEPROM16_ext@adress& (0+255),b
  5811                           
  5812                           ;eeprom.h: 49: unsigned int data;
  5813                           ;eeprom.h: 50: data = readEEPROM_ext(adress + 1);
  5814  0071B0  0100               	movlb	0	; () banked
  5815  0071B2  2993               	incf	readEEPROM16_ext@adress& (0+255),w,b
  5816  0071B4  EC21  F03B         	call	_readEEPROM_ext
  5817  0071B8  0100               	movlb	0	; () banked
  5818  0071BA  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  5819  0071BC  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  5820  0071BE  6F91               	movwf	readEEPROM16_ext@data& (0+255),b
  5821  0071C0  6B92               	clrf	(readEEPROM16_ext@data+1)& (0+255),b
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;eeprom.h: 51: data <<= 8;
  5825  0071C2  5191               	movf	readEEPROM16_ext@data& (0+255),w,b
  5826  0071C4  6F92               	movwf	(readEEPROM16_ext@data+1)& (0+255),b
  5827  0071C6  6B91               	clrf	readEEPROM16_ext@data& (0+255),b
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;eeprom.h: 52: data |= readEEPROM_ext(adress);
  5831  0071C8  5193               	movf	readEEPROM16_ext@adress& (0+255),w,b
  5832  0071CA  EC21  F03B         	call	_readEEPROM_ext
  5833  0071CE  0100               	movlb	0	; () banked
  5834  0071D0  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  5835  0071D2  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  5836  0071D4  1391               	iorwf	readEEPROM16_ext@data& (0+255),f,b
  5837                           
  5838                           ; BSR set to: 0
  5839                           ;eeprom.h: 53: return data;
  5840  0071D6  C091  F08E         	movff	readEEPROM16_ext@data,?_readEEPROM16_ext
  5841  0071DA  C092  F08F         	movff	readEEPROM16_ext@data+1,?_readEEPROM16_ext+1
  5842                           
  5843                           ; BSR set to: 0
  5844                           
  5845                           ; BSR set to: 0
  5846  0071DE  0012               	return		;funcret
  5847  0071E0  FFFF               	dw	65535	; errata NOP
  5848  0071E2                     __end_of_readEEPROM16_ext:
  5849                           	opt stack 0
  5850                           tblptru	equ	0xFF8
  5851                           tblptrh	equ	0xFF7
  5852                           tblptrl	equ	0xFF6
  5853                           tablat	equ	0xFF5
  5854                           prodh	equ	0xFF4
  5855                           prodl	equ	0xFF3
  5856                           postinc0	equ	0xFEE
  5857                           wreg	equ	0xFE8
  5858                           postdec1	equ	0xFE5
  5859                           fsr1l	equ	0xFE1
  5860                           indf2	equ	0xFDF
  5861                           fsr2h	equ	0xFDA
  5862                           fsr2l	equ	0xFD9
  5863                           status	equ	0xFD8
  5864                           
  5865 ;; *************** function _informacoes *****************
  5866 ;; Defined at:
  5867 ;;		line 7 in file "tela_INFORMACOES.h"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;		None
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;		None
  5872 ;; Return value:  Size  Location     Type
  5873 ;;                  1    wreg      void 
  5874 ;; Registers used:
  5875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5881 ;;      Params:         0       0       0       0       0       0       0
  5882 ;;      Locals:         0       0       0       0       0       0       0
  5883 ;;      Temps:          0       0       0       0       0       0       0
  5884 ;;      Totals:         0       0       0       0       0       0       0
  5885 ;;Total ram usage:        0 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; Hardware stack levels required when called:    9
  5888 ;; This function calls:
  5889 ;;		_btPress
  5890 ;;		_sprintf
  5891 ;; This function is called by:
  5892 ;;		_main
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           	psect	text12
  5897  0078FA                     __ptext12:
  5898                           	opt stack 0
  5899  0078FA                     _informacoes:
  5900                           	opt stack 0
  5901  0078FA  FFFF               	dw	65535	; assembler added errata NOP
  5902                           
  5903                           ;tela_INFORMACOES.h: 8: sprintf(line1, "TECHNOW");
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;incstack = 0
  5907  0078FC  0E7B               	movlw	low _line1
  5908  0078FE  0100               	movlb	0	; () banked
  5909  007900  6FA1               	movwf	sprintf@wh& (0+255),b
  5910  007902  0E01               	movlw	high _line1
  5911  007904  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5912  007906  0E9A               	movlw	low STR_83
  5913  007908  6FA3               	movwf	sprintf@f& (0+255),b
  5914  00790A  0E7F               	movlw	high STR_83
  5915  00790C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5916  00790E  EC89  F03A         	call	_sprintf	;wreg free
  5917                           
  5918                           ;tela_INFORMACOES.h: 9: sprintf(line2, "Sistemas embarcados");
  5919  007912  0E66               	movlw	low _line2
  5920  007914  0100               	movlb	0	; () banked
  5921  007916  6FA1               	movwf	sprintf@wh& (0+255),b
  5922  007918  0E01               	movlw	high _line2
  5923  00791A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5924  00791C  0EE4               	movlw	low STR_84
  5925  00791E  6FA3               	movwf	sprintf@f& (0+255),b
  5926  007920  0E7C               	movlw	high STR_84
  5927  007922  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5928  007924  EC89  F03A         	call	_sprintf	;wreg free
  5929                           
  5930                           ;tela_INFORMACOES.h: 10: sprintf(line3, "   48 99906-5651");
  5931  007928  0E51               	movlw	low _line3
  5932  00792A  0100               	movlb	0	; () banked
  5933  00792C  6FA1               	movwf	sprintf@wh& (0+255),b
  5934  00792E  0E01               	movlw	high _line3
  5935  007930  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5936  007932  0ED6               	movlw	low STR_85
  5937  007934  6FA3               	movwf	sprintf@f& (0+255),b
  5938  007936  0E7D               	movlw	high STR_85
  5939  007938  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5940  00793A  EC89  F03A         	call	_sprintf	;wreg free
  5941                           
  5942                           ;tela_INFORMACOES.h: 11: sprintf(line4, "versao - %s", "Aug 24 2019");
  5943  00793E  0E3C               	movlw	low _line4
  5944  007940  0100               	movlb	0	; () banked
  5945  007942  6FA1               	movwf	sprintf@wh& (0+255),b
  5946  007944  0E01               	movlw	high _line4
  5947  007946  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5948  007948  0E08               	movlw	low STR_86
  5949  00794A  6FA3               	movwf	sprintf@f& (0+255),b
  5950  00794C  0E7F               	movlw	high STR_86
  5951  00794E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5952  007950  0EE4               	movlw	low STR_15
  5953  007952  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  5954  007954  0E7E               	movlw	high STR_15
  5955  007956  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  5956  007958  EC89  F03A         	call	_sprintf	;wreg free
  5957                           
  5958                           ;tela_INFORMACOES.h: 12: if (btPress(1)) {
  5959  00795C  0E01               	movlw	1
  5960  00795E  EC43  F03C         	call	_btPress
  5961  007962  0900               	iorlw	0
  5962  007964  A4D8               	btfss	status,2,c
  5963                           
  5964                           ;tela_INFORMACOES.h: 13: menu_posi = _menu_posi;
  5965  007966  C0DE  F0DF         	movff	__menu_posi,_menu_posi
  5966  00796A  0012               	return		;funcret
  5967  00796C  FFFF               	dw	65535	; errata NOP
  5968  00796E                     __end_of_informacoes:
  5969                           	opt stack 0
  5970                           tblptru	equ	0xFF8
  5971                           tblptrh	equ	0xFF7
  5972                           tblptrl	equ	0xFF6
  5973                           tablat	equ	0xFF5
  5974                           prodh	equ	0xFF4
  5975                           prodl	equ	0xFF3
  5976                           postinc0	equ	0xFEE
  5977                           wreg	equ	0xFE8
  5978                           postdec1	equ	0xFE5
  5979                           fsr1l	equ	0xFE1
  5980                           indf2	equ	0xFDF
  5981                           fsr2h	equ	0xFDA
  5982                           fsr2l	equ	0xFD9
  5983                           status	equ	0xFD8
  5984                           
  5985 ;; *************** function _getSinalSIM800L *****************
  5986 ;; Defined at:
  5987 ;;		line 13 in file "comunicacao.h"
  5988 ;; Parameters:    Size  Location     Type
  5989 ;;		None
  5990 ;; Auto vars:     Size  Location     Type
  5991 ;;  sinal           2   72[BANK0 ] int 
  5992 ;; Return value:  Size  Location     Type
  5993 ;;                  1    wreg      void 
  5994 ;; Registers used:
  5995 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5996 ;; Tracked objects:
  5997 ;;		On entry : 0/0
  5998 ;;		On exit  : 0/0
  5999 ;;		Unchanged: 0/0
  6000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6001 ;;      Params:         0       0       0       0       0       0       0
  6002 ;;      Locals:         0       2       0       0       0       0       0
  6003 ;;      Temps:          0       2       0       0       0       0       0
  6004 ;;      Totals:         0       4       0       0       0       0       0
  6005 ;;Total ram usage:        4 bytes
  6006 ;; Hardware stack levels used:    1
  6007 ;; Hardware stack levels required when called:   10
  6008 ;; This function calls:
  6009 ;;		_aguardaBuffer
  6010 ;;		_atoi
  6011 ;;		_delay
  6012 ;;		_getSerial
  6013 ;;		_limparBuffer
  6014 ;;		_printf
  6015 ;;		_writeChar
  6016 ;; This function is called by:
  6017 ;;		_main
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           	psect	text13
  6022  0028BA                     __ptext13:
  6023                           	opt stack 0
  6024  0028BA                     _getSinalSIM800L:
  6025                           	opt stack 0
  6026  0028BA  FFFF               	dw	65535	; assembler added errata NOP
  6027                           
  6028                           ;comunicacao.h: 14: if (!timerVerificarSinal) {
  6029                           
  6030                           ;incstack = 0
  6031  0028BC  0100               	movlb	0	; () banked
  6032  0028BE  51FE               	movf	_timerVerificarSinal& (0+255),w,b
  6033  0028C0  A4D8               	btfss	status,2,c
  6034  0028C2  D0CB               	goto	l298
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;comunicacao.h: 15: if (!gsmOcupado) {
  6038  0028C4  51F4               	movf	_gsmOcupado& (0+255),w,b
  6039  0028C6  B4D8               	btfsc	status,2,c
  6040  0028C8  D0B7               	goto	l296
  6041  0028CA  D0C7               	goto	l298
  6042  0028CC  FFFF               	dw	65535	; assembler added errata NOP
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;comunicacao.h: 18: limparBuffer();
  6046                           
  6047                           ; BSR set to: 0
  6048  0028CE  EC83  F038         	call	_limparBuffer	;wreg free
  6049                           
  6050                           ;comunicacao.h: 19: printf("AT+CSQ\r\n");
  6051  0028D2  0E88               	movlw	low STR_3
  6052  0028D4  0100               	movlb	0	; () banked
  6053  0028D6  6FA1               	movwf	printf@f& (0+255),b
  6054  0028D8  0E7F               	movlw	high STR_3
  6055  0028DA  6FA2               	movwf	(printf@f+1)& (0+255),b
  6056  0028DC  EC84  F039         	call	_printf	;wreg free
  6057                           
  6058                           ;comunicacao.h: 20: timerEtapaComunicacao = 10;
  6059  0028E0  0E0A               	movlw	10
  6060  0028E2  0100               	movlb	0	; () banked
  6061  0028E4  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;comunicacao.h: 21: etapaComunicacao = 1;
  6065  0028E6  0E00               	movlw	0
  6066  0028E8  6E52               	movwf	_etapaComunicacao+1,c
  6067  0028EA  0E01               	movlw	1
  6068  0028EC  D0A2               	goto	L8
  6069  0028EE  FFFF               	dw	65535	; assembler added errata NOP
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;comunicacao.h: 24: if (!timerEtapaComunicacao) {
  6073                           
  6074                           ; BSR set to: 0
  6075  0028F0  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  6076  0028F2  A4D8               	btfss	status,2,c
  6077  0028F4  D02B               	goto	l302
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;comunicacao.h: 25: printf("AT\r\n");
  6081  0028F6  0EDD               	movlw	low STR_4
  6082  0028F8  6FA1               	movwf	printf@f& (0+255),b
  6083  0028FA  0E7F               	movlw	high STR_4
  6084  0028FC  6FA2               	movwf	(printf@f+1)& (0+255),b
  6085  0028FE  EC84  F039         	call	_printf	;wreg free
  6086                           
  6087                           ;comunicacao.h: 26: delay(100);
  6088  002902  0E00               	movlw	0
  6089  002904  0100               	movlb	0	; () banked
  6090  002906  6F81               	movwf	(delay@x+1)& (0+255),b
  6091  002908  0E64               	movlw	100
  6092  00290A  6F80               	movwf	delay@x& (0+255),b
  6093  00290C  EC68  F038         	call	_delay	;wreg free
  6094                           
  6095                           ;comunicacao.h: 27: if (aguardaBuffer("OK")) {
  6096  002910  0EF9               	movlw	low STR_5
  6097  002912  0100               	movlb	0	; () banked
  6098  002914  6F93               	movwf	aguardaBuffer@str& (0+255),b
  6099  002916  0E7F               	movlw	high STR_5
  6100  002918  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  6101  00291A  EC66  F039         	call	_aguardaBuffer	;wreg free
  6102  00291E  0900               	iorlw	0
  6103  002920  B4D8               	btfsc	status,2,c
  6104  002922  D005               	goto	l301
  6105                           
  6106                           ;comunicacao.h: 28: etapaComunicacao = 0;
  6107  002924  0E00               	movlw	0
  6108  002926  6E52               	movwf	_etapaComunicacao+1,c
  6109  002928  0E00               	movlw	0
  6110  00292A  6E51               	movwf	_etapaComunicacao,c
  6111                           
  6112                           ;comunicacao.h: 29: } else {
  6113  00292C  D00F               	goto	l302
  6114  00292E                     l301:
  6115  00292E  FFFF               	dw	65535	; assembler added errata NOP
  6116                           
  6117                           ;comunicacao.h: 30: etapaComunicacao = 0;
  6118  002930  0E00               	movlw	0
  6119  002932  6E52               	movwf	_etapaComunicacao+1,c
  6120  002934  0E00               	movlw	0
  6121  002936  6E51               	movwf	_etapaComunicacao,c
  6122                           
  6123                           ;comunicacao.h: 31: writeChar(0x1A);
  6124  002938  0E1A               	movlw	26
  6125  00293A  0100               	movlb	0	; () banked
  6126  00293C  6F80               	movwf	writeChar@hex& (0+255),b
  6127  00293E  0E00               	movlw	0
  6128  002940  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  6129  002942  EC3A  F037         	call	_writeChar	;wreg free
  6130                           
  6131                           ;comunicacao.h: 32: intensidadeSinal = 'x';
  6132  002946  0E78               	movlw	120
  6133  002948  0100               	movlb	0	; () banked
  6134  00294A  6FFF               	movwf	_intensidadeSinal& (0+255),b
  6135  00294C                     l302:
  6136  00294C  FFFF               	dw	65535	; assembler added errata NOP
  6137                           
  6138                           ;comunicacao.h: 33: }
  6139                           ;comunicacao.h: 34: }
  6140                           ;comunicacao.h: 35: if (aguardaBuffer("+CSQ: ")) {
  6141                           
  6142                           ; BSR set to: 0
  6143                           
  6144                           ; BSR set to: 0
  6145  00294E  0EB0               	movlw	low STR_6
  6146  002950  0100               	movlb	0	; () banked
  6147  002952  6F93               	movwf	aguardaBuffer@str& (0+255),b
  6148  002954  0E7F               	movlw	high STR_6
  6149  002956  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  6150  002958  EC66  F039         	call	_aguardaBuffer	;wreg free
  6151  00295C  0900               	iorlw	0
  6152  00295E  B4D8               	btfsc	status,2,c
  6153  002960  D07C               	goto	l298
  6154                           
  6155                           ;comunicacao.h: 36: int sinal = atoi(getSerial("+CSQ: ", ','));
  6156  002962  0EB0               	movlw	low STR_6
  6157  002964  0100               	movlb	0	; () banked
  6158  002966  6FB5               	movwf	getSerial@str& (0+255),b
  6159  002968  0E7F               	movlw	high STR_6
  6160  00296A  6FB6               	movwf	(getSerial@str+1)& (0+255),b
  6161  00296C  0E2C               	movlw	44
  6162  00296E  6FB7               	movwf	getSerial@end& (0+255),b
  6163  002970  EC4B  F018         	call	_getSerial	;wreg free
  6164  002974  C0B5  F0BF         	movff	?_getSerial,atoi@s
  6165  002978  C0B6  F0C0         	movff	?_getSerial+1,atoi@s+1
  6166  00297C  EC67  F01A         	call	_atoi	;wreg free
  6167  002980  C0BF  F0C8         	movff	?_atoi,getSinalSIM800L@sinal
  6168  002984  C0C0  F0C9         	movff	?_atoi+1,getSinalSIM800L@sinal+1
  6169                           
  6170                           ;comunicacao.h: 37: if (sinal < 10) {
  6171  002988  0100               	movlb	0	; () banked
  6172  00298A  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6173  00298C  D006               	goto	u6820
  6174  00298E  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6175  002990  E108               	bnz	l6422
  6176  002992  0E0A               	movlw	10
  6177  002994  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6178  002996  B0D8               	btfsc	status,0,c
  6179  002998  D003               	goto	l304
  6180  00299A                     u6820:
  6181  00299A  FFFF               	dw	65535	; assembler added errata NOP
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;comunicacao.h: 38: intensidadeSinal = ' ';
  6185  00299C  0E20               	movlw	32
  6186  00299E  D03B               	goto	L11
  6187  0029A0                     l304:
  6188  0029A0  FFFF               	dw	65535	; assembler added errata NOP
  6189  0029A2                     l6422:
  6190                           
  6191                           ; BSR set to: 0
  6192  0029A2  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6193  0029A4  D011               	goto	l306
  6194  0029A6  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6195  0029A8  E104               	bnz	u6830
  6196  0029AA  0E0A               	movlw	10
  6197  0029AC  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6198  0029AE  A0D8               	btfss	status,0,c
  6199  0029B0  D00B               	goto	l306
  6200  0029B2                     u6830:
  6201                           
  6202                           ; BSR set to: 0
  6203  0029B2  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6204  0029B4  D006               	goto	u6840
  6205  0029B6  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6206  0029B8  E108               	bnz	l6428
  6207  0029BA  0E0F               	movlw	15
  6208  0029BC  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6209  0029BE  B0D8               	btfsc	status,0,c
  6210  0029C0  D003               	goto	l306
  6211  0029C2                     u6840:
  6212  0029C2  FFFF               	dw	65535	; assembler added errata NOP
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;comunicacao.h: 40: intensidadeSinal = 0x02;
  6216  0029C4  0E02               	movlw	2
  6217  0029C6  D027               	goto	L11
  6218  0029C8                     l306:
  6219  0029C8  FFFF               	dw	65535	; assembler added errata NOP
  6220  0029CA                     l6428:
  6221                           
  6222                           ; BSR set to: 0
  6223  0029CA  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6224  0029CC  D011               	goto	l308
  6225  0029CE  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6226  0029D0  E104               	bnz	u6850
  6227  0029D2  0E10               	movlw	16
  6228  0029D4  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6229  0029D6  A0D8               	btfss	status,0,c
  6230  0029D8  D00B               	goto	l308
  6231  0029DA                     u6850:
  6232                           
  6233                           ; BSR set to: 0
  6234  0029DA  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6235  0029DC  D006               	goto	u6860
  6236  0029DE  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6237  0029E0  E108               	bnz	l6434
  6238  0029E2  0E14               	movlw	20
  6239  0029E4  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6240  0029E6  B0D8               	btfsc	status,0,c
  6241  0029E8  D003               	goto	l308
  6242  0029EA                     u6860:
  6243  0029EA  FFFF               	dw	65535	; assembler added errata NOP
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;comunicacao.h: 42: intensidadeSinal = 0x03;
  6247  0029EC  0E03               	movlw	3
  6248  0029EE  D013               	goto	L11
  6249  0029F0                     l308:
  6250  0029F0  FFFF               	dw	65535	; assembler added errata NOP
  6251  0029F2                     l6434:
  6252                           
  6253                           ; BSR set to: 0
  6254  0029F2  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6255  0029F4  D012               	goto	l310
  6256  0029F6  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6257  0029F8  E104               	bnz	u6870
  6258  0029FA  0E14               	movlw	20
  6259  0029FC  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6260  0029FE  A0D8               	btfss	status,0,c
  6261  002A00  D00C               	goto	l310
  6262  002A02                     u6870:
  6263                           
  6264                           ; BSR set to: 0
  6265  002A02  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6266  002A04  D006               	goto	u6880
  6267  002A06  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6268  002A08  E109               	bnz	l305
  6269  002A0A  0E1F               	movlw	31
  6270  002A0C  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6271  002A0E  B0D8               	btfsc	status,0,c
  6272  002A10  D004               	goto	l310
  6273  002A12                     u6880:
  6274  002A12  FFFF               	dw	65535	; assembler added errata NOP
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;comunicacao.h: 44: intensidadeSinal = 0x04;
  6278  002A14  0E04               	movlw	4
  6279  002A16                     L11:
  6280  002A16  FFFF               	dw	65535	; assembler added errata NOP
  6281  002A18  6FFF               	movwf	_intensidadeSinal& (0+255),b
  6282  002A1A                     l310:
  6283  002A1A  FFFF               	dw	65535	; assembler added errata NOP
  6284  002A1C                     l305:
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;comunicacao.h: 45: }
  6288                           ;comunicacao.h: 46: etapaComunicacao = 0;
  6289  002A1C  0E00               	movlw	0
  6290  002A1E  6E52               	movwf	_etapaComunicacao+1,c
  6291  002A20  0E00               	movlw	0
  6292  002A22  6E51               	movwf	_etapaComunicacao,c
  6293                           
  6294                           ;comunicacao.h: 47: timerVerificarSinal = 6;
  6295  002A24  0E06               	movlw	6
  6296  002A26  6FFE               	movwf	_timerVerificarSinal& (0+255),b
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;comunicacao.h: 48: }
  6300                           ;comunicacao.h: 49: break;
  6301  002A28  D018               	goto	l298
  6302  002A2A  FFFF               	dw	65535	; assembler added errata NOP
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;comunicacao.h: 51: etapaComunicacao = 0;
  6306                           
  6307                           ; BSR set to: 0
  6308  002A2C  0E00               	movlw	0
  6309  002A2E  6E52               	movwf	_etapaComunicacao+1,c
  6310  002A30  0E00               	movlw	0
  6311  002A32                     L8:
  6312  002A32  FFFF               	dw	65535	; assembler added errata NOP
  6313  002A34  6E51               	movwf	_etapaComunicacao,c
  6314                           
  6315                           ;comunicacao.h: 52: }
  6316  002A36  D011               	goto	l298
  6317  002A38                     l296:
  6318  002A38  FFFF               	dw	65535	; assembler added errata NOP
  6319                           
  6320                           ; BSR set to: 0
  6321                           
  6322                           ; BSR set to: 0
  6323  002A3A  C051  F0C6         	movff	_etapaComunicacao,??_getSinalSIM800L
  6324  002A3E  C052  F0C7         	movff	_etapaComunicacao+1,??_getSinalSIM800L+1
  6325                           
  6326                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6327                           ; Switch size 1, requested type "space"
  6328                           ; Number of cases is 1, Range of values is 0 to 0
  6329                           ; switch strategies available:
  6330                           ; Name         Instructions Cycles
  6331                           ; simple_byte            4     3 (average)
  6332                           ;	Chosen strategy is simple_byte
  6333  002A42  51C7               	movf	(??_getSinalSIM800L+1)& (0+255),w,b
  6334  002A44  0A00               	xorlw	0	; case 0
  6335  002A46  A4D8               	btfss	status,2,c
  6336  002A48  D7F0               	goto	l311
  6337                           
  6338                           ; BSR set to: 0
  6339                           ; Switch size 1, requested type "space"
  6340                           ; Number of cases is 2, Range of values is 0 to 1
  6341                           ; switch strategies available:
  6342                           ; Name         Instructions Cycles
  6343                           ; simple_byte            7     4 (average)
  6344                           ;	Chosen strategy is simple_byte
  6345  002A4A  51C6               	movf	??_getSinalSIM800L& (0+255),w,b
  6346  002A4C  0A00               	xorlw	0	; case 0
  6347  002A4E  B4D8               	btfsc	status,2,c
  6348  002A50  D73D               	goto	l297
  6349  002A52  0A01               	xorlw	1	; case 1
  6350  002A54  B4D8               	btfsc	status,2,c
  6351  002A56  D74B               	goto	l299
  6352  002A58  D7E8               	goto	l311
  6353  002A5A                     l298:
  6354  002A5A  FFFF               	dw	65535	; assembler added errata NOP
  6355                           
  6356                           ; BSR set to: 0
  6357                           
  6358                           ; BSR set to: 0
  6359                           
  6360                           ; BSR set to: 0
  6361  002A5C  0012               	return		;funcret
  6362  002A5E  FFFF               	dw	65535	; errata NOP
  6363  002A60                     __end_of_getSinalSIM800L:
  6364                           	opt stack 0
  6365                           tblptru	equ	0xFF8
  6366                           tblptrh	equ	0xFF7
  6367                           tblptrl	equ	0xFF6
  6368                           tablat	equ	0xFF5
  6369                           prodh	equ	0xFF4
  6370                           prodl	equ	0xFF3
  6371                           postinc0	equ	0xFEE
  6372                           wreg	equ	0xFE8
  6373                           postdec1	equ	0xFE5
  6374                           fsr1l	equ	0xFE1
  6375                           indf2	equ	0xFDF
  6376                           fsr2h	equ	0xFDA
  6377                           fsr2l	equ	0xFD9
  6378                           status	equ	0xFD8
  6379                           
  6380 ;; *************** function _getSerial *****************
  6381 ;; Defined at:
  6382 ;;		line 40 in file "serial.h"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;  str             2   53[BANK0 ] PTR unsigned char 
  6385 ;;		 -> STR_7(7), 
  6386 ;;  end             1   55[BANK0 ] unsigned char 
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;  i               1   60[BANK0 ] unsigned char 
  6389 ;;  ret             2   61[BANK0 ] PTR unsigned char 
  6390 ;;		 -> NULL(0), bufferSerial(60), 
  6391 ;;  length          2   58[BANK0 ] unsigned int 
  6392 ;; Return value:  Size  Location     Type
  6393 ;;                  2   53[BANK0 ] PTR unsigned char 
  6394 ;; Registers used:
  6395 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6396 ;; Tracked objects:
  6397 ;;		On entry : 0/0
  6398 ;;		On exit  : 0/0
  6399 ;;		Unchanged: 0/0
  6400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6401 ;;      Params:         0       3       0       0       0       0       0
  6402 ;;      Locals:         0       5       0       0       0       0       0
  6403 ;;      Temps:          0       2       0       0       0       0       0
  6404 ;;      Totals:         0      10       0       0       0       0       0
  6405 ;;Total ram usage:       10 bytes
  6406 ;; Hardware stack levels used:    1
  6407 ;; Hardware stack levels required when called:    9
  6408 ;; This function calls:
  6409 ;;		_memset
  6410 ;;		_sprintf
  6411 ;;		_strlen
  6412 ;;		_strstr
  6413 ;; This function is called by:
  6414 ;;		_getSinalSIM800L
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           	psect	text14
  6419  003096                     __ptext14:
  6420                           	opt stack 0
  6421  003096                     _getSerial:
  6422                           	opt stack 0
  6423  003096  FFFF               	dw	65535	; assembler added errata NOP
  6424                           
  6425                           ;serial.h: 41: memset(bufferAUX, 0, sizeof (bufferAUX));
  6426                           
  6427                           ;incstack = 0
  6428  003098  0E90               	movlw	low _bufferAUX
  6429  00309A  0100               	movlb	0	; () banked
  6430  00309C  6F80               	movwf	memset@p1& (0+255),b
  6431  00309E  0E01               	movlw	high _bufferAUX
  6432  0030A0  6F81               	movwf	(memset@p1+1)& (0+255),b
  6433  0030A2  0E00               	movlw	0
  6434  0030A4  6F83               	movwf	(memset@c+1)& (0+255),b
  6435  0030A6  0E00               	movlw	0
  6436  0030A8  6F82               	movwf	memset@c& (0+255),b
  6437  0030AA  0E00               	movlw	0
  6438  0030AC  6F85               	movwf	(memset@n+1)& (0+255),b
  6439  0030AE  0E14               	movlw	20
  6440  0030B0  6F84               	movwf	memset@n& (0+255),b
  6441  0030B2  ECF1  F038         	call	_memset	;wreg free
  6442                           
  6443                           ;serial.h: 42: unsigned int length = strlen(str);
  6444  0030B6  C0B5  F080         	movff	getSerial@str,strlen@s
  6445  0030BA  C0B6  F081         	movff	getSerial@str+1,strlen@s+1
  6446  0030BE  EC77  F03B         	call	_strlen	;wreg free
  6447  0030C2  C080  F0BA         	movff	?_strlen,getSerial@length
  6448  0030C6  C081  F0BB         	movff	?_strlen+1,getSerial@length+1
  6449                           
  6450                           ;serial.h: 43: char* ret;
  6451                           ;serial.h: 44: ret = strstr(bufferSerial, str);
  6452  0030CA  0E00               	movlw	low _bufferSerial
  6453  0030CC  0100               	movlb	0	; () banked
  6454  0030CE  6F8F               	movwf	strstr@s1& (0+255),b
  6455  0030D0  0E01               	movlw	high _bufferSerial
  6456  0030D2  6F90               	movwf	(strstr@s1+1)& (0+255),b
  6457  0030D4  C0B5  F091         	movff	getSerial@str,strstr@s2
  6458  0030D8  C0B6  F092         	movff	getSerial@str+1,strstr@s2+1
  6459  0030DC  EC10  F01F         	call	_strstr	;wreg free
  6460  0030E0  C08F  F0BD         	movff	?_strstr,getSerial@ret
  6461  0030E4  C090  F0BE         	movff	?_strstr+1,getSerial@ret+1
  6462                           
  6463                           ;serial.h: 45: if (ret) {
  6464  0030E8  0100               	movlb	0	; () banked
  6465  0030EA  51BD               	movf	getSerial@ret& (0+255),w,b
  6466  0030EC  11BE               	iorwf	(getSerial@ret+1)& (0+255),w,b
  6467  0030EE  B4D8               	btfsc	status,2,c
  6468  0030F0  D058               	goto	u5550
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;serial.h: 46: unsigned char i = 0;
  6472  0030F2  0E00               	movlw	0
  6473  0030F4  6FBC               	movwf	getSerial@i& (0+255),b
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;serial.h: 47: for (i = length; i < strlen(ret); i++) {
  6477  0030F6  C0BA  F0BC         	movff	getSerial@length,getSerial@i
  6478  0030FA  D042               	goto	l261
  6479  0030FC  FFFF               	dw	65535	; assembler added errata NOP
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;serial.h: 48: if (ret[i] == end) {
  6483                           
  6484                           ; BSR set to: 0
  6485  0030FE  51BC               	movf	getSerial@i& (0+255),w,b
  6486  003100  0D01               	mullw	1
  6487  003102  50F3               	movf	prodl,w,c
  6488  003104  25BD               	addwf	getSerial@ret& (0+255),w,b
  6489  003106  6ED9               	movwf	fsr2l,c
  6490  003108  50F4               	movf	prodh,w,c
  6491  00310A  21BE               	addwfc	(getSerial@ret+1)& (0+255),w,b
  6492  00310C  6EDA               	movwf	fsr2h,c
  6493  00310E  51B7               	movf	getSerial@end& (0+255),w,b
  6494  003110  18DE               	xorwf	postinc2,w,c
  6495  003112  A4D8               	btfss	status,2,c
  6496  003114  D017               	goto	l263
  6497                           
  6498                           ; BSR set to: 0
  6499                           ;serial.h: 49: sprintf(bufferAUX, "%s%c", bufferAUX, '\0');
  6500  003116  0E90               	movlw	low _bufferAUX
  6501  003118  6FA1               	movwf	sprintf@wh& (0+255),b
  6502  00311A  0E01               	movlw	high _bufferAUX
  6503  00311C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6504  00311E  0EE7               	movlw	low STR_1
  6505  003120  6FA3               	movwf	sprintf@f& (0+255),b
  6506  003122  0E7F               	movlw	high STR_1
  6507  003124  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6508  003126  0E90               	movlw	low _bufferAUX
  6509  003128  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6510  00312A  0E01               	movlw	high _bufferAUX
  6511  00312C  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6512  00312E  0E00               	movlw	0
  6513  003130  6FA8               	movwf	(?_sprintf+7)& (0+255),b
  6514  003132  0E00               	movlw	0
  6515  003134  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  6516  003136  EC89  F03A         	call	_sprintf	;wreg free
  6517                           
  6518                           ;serial.h: 50: return bufferAUX;
  6519  00313A  0E90               	movlw	low _bufferAUX
  6520  00313C  0100               	movlb	0	; () banked
  6521  00313E  6FB5               	movwf	?_getSerial& (0+255),b
  6522  003140  0E01               	movlw	high _bufferAUX
  6523  003142  D033               	goto	L12
  6524  003144                     l263:
  6525  003144  FFFF               	dw	65535	; assembler added errata NOP
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;serial.h: 51: }
  6529                           ;serial.h: 52: sprintf(bufferAUX, "%s%c", bufferAUX, ret[i]);
  6530                           
  6531                           ; BSR set to: 0
  6532  003146  0E90               	movlw	low _bufferAUX
  6533  003148  6FA1               	movwf	sprintf@wh& (0+255),b
  6534  00314A  0E01               	movlw	high _bufferAUX
  6535  00314C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6536  00314E  0EE7               	movlw	low STR_1
  6537  003150  6FA3               	movwf	sprintf@f& (0+255),b
  6538  003152  0E7F               	movlw	high STR_1
  6539  003154  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6540  003156  0E90               	movlw	low _bufferAUX
  6541  003158  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6542  00315A  0E01               	movlw	high _bufferAUX
  6543  00315C  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6544  00315E  51BC               	movf	getSerial@i& (0+255),w,b
  6545  003160  0D01               	mullw	1
  6546  003162  50F3               	movf	prodl,w,c
  6547  003164  25BD               	addwf	getSerial@ret& (0+255),w,b
  6548  003166  6ED9               	movwf	fsr2l,c
  6549  003168  50F4               	movf	prodh,w,c
  6550  00316A  21BE               	addwfc	(getSerial@ret+1)& (0+255),w,b
  6551  00316C  6EDA               	movwf	fsr2h,c
  6552  00316E  50DF               	movf	indf2,w,c
  6553  003170  6FB8               	movwf	??_getSerial& (0+255),b
  6554  003172  51B8               	movf	??_getSerial& (0+255),w,b
  6555  003174  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  6556  003176  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  6557  003178  EC89  F03A         	call	_sprintf	;wreg free
  6558  00317C  0100               	movlb	0	; () banked
  6559  00317E  2BBC               	incf	getSerial@i& (0+255),f,b
  6560  003180                     l261:
  6561  003180  FFFF               	dw	65535	; assembler added errata NOP
  6562                           
  6563                           ; BSR set to: 0
  6564                           
  6565                           ; BSR set to: 0
  6566  003182  C0BD  F080         	movff	getSerial@ret,strlen@s
  6567  003186  C0BE  F081         	movff	getSerial@ret+1,strlen@s+1
  6568  00318A  EC77  F03B         	call	_strlen	;wreg free
  6569  00318E  0100               	movlb	0	; () banked
  6570  003190  51BC               	movf	getSerial@i& (0+255),w,b
  6571  003192  6FB8               	movwf	??_getSerial& (0+255),b
  6572  003194  6BB9               	clrf	(??_getSerial+1)& (0+255),b
  6573  003196  5180               	movf	?_strlen& (0+255),w,b
  6574  003198  5DB8               	subwf	??_getSerial& (0+255),w,b
  6575  00319A  5181               	movf	(?_strlen+1)& (0+255),w,b
  6576  00319C  59B9               	subwfb	(??_getSerial+1)& (0+255),w,b
  6577  00319E  A0D8               	btfss	status,0,c
  6578  0031A0  D7AD               	goto	l262
  6579  0031A2                     u5550:
  6580  0031A2  FFFF               	dw	65535	; assembler added errata NOP
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;serial.h: 53: }
  6584                           ;serial.h: 54: }
  6585                           ;serial.h: 55: return 0;
  6586                           
  6587                           ; BSR set to: 0
  6588                           
  6589                           ; BSR set to: 0
  6590  0031A4  0E00               	movlw	0
  6591  0031A6  6FB5               	movwf	?_getSerial& (0+255),b
  6592  0031A8  0E00               	movlw	0
  6593  0031AA                     L12:
  6594  0031AA  FFFF               	dw	65535	; assembler added errata NOP
  6595  0031AC  6FB6               	movwf	(?_getSerial+1)& (0+255),b
  6596                           
  6597                           ; BSR set to: 0
  6598                           
  6599                           ; BSR set to: 0
  6600  0031AE  0012               	return		;funcret
  6601  0031B0  FFFF               	dw	65535	; errata NOP
  6602  0031B2                     __end_of_getSerial:
  6603                           	opt stack 0
  6604                           tblptru	equ	0xFF8
  6605                           tblptrh	equ	0xFF7
  6606                           tblptrl	equ	0xFF6
  6607                           tablat	equ	0xFF5
  6608                           prodh	equ	0xFF4
  6609                           prodl	equ	0xFF3
  6610                           postinc0	equ	0xFEE
  6611                           wreg	equ	0xFE8
  6612                           postdec1	equ	0xFE5
  6613                           fsr1l	equ	0xFE1
  6614                           indf2	equ	0xFDF
  6615                           postinc2	equ	0xFDE
  6616                           fsr2h	equ	0xFDA
  6617                           fsr2l	equ	0xFD9
  6618                           status	equ	0xFD8
  6619                           
  6620 ;; *************** function _atoi *****************
  6621 ;; Defined at:
  6622 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;  s               2   63[BANK0 ] PTR const unsigned char 
  6625 ;;		 -> bufferAUX(20), NULL(0), 
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;  a               2   68[BANK0 ] int 
  6628 ;;  sign            1   67[BANK0 ] unsigned char 
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  2   63[BANK0 ] int 
  6631 ;; Registers used:
  6632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6638 ;;      Params:         0       2       0       0       0       0       0
  6639 ;;      Locals:         0       3       0       0       0       0       0
  6640 ;;      Temps:          0       2       0       0       0       0       0
  6641 ;;      Totals:         0       7       0       0       0       0       0
  6642 ;;Total ram usage:        7 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:    7
  6645 ;; This function calls:
  6646 ;;		___wmul
  6647 ;;		_isdigit
  6648 ;; This function is called by:
  6649 ;;		_getSinalSIM800L
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           	psect	text15
  6654  0034CE                     __ptext15:
  6655                           	opt stack 0
  6656  0034CE                     _atoi:
  6657                           	opt stack 0
  6658  0034CE  FFFF               	dw	65535	; assembler added errata NOP
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;incstack = 0
  6662  0034D0  D004               	goto	l1256
  6663  0034D2  FFFF               	dw	65535	; assembler added errata NOP
  6664  0034D4  0100               	movlb	0	; () banked
  6665  0034D6  4BBF               	infsnz	atoi@s& (0+255),f,b
  6666  0034D8  2BC0               	incf	(atoi@s+1)& (0+255),f,b
  6667  0034DA                     l1256:
  6668  0034DA  FFFF               	dw	65535	; assembler added errata NOP
  6669                           
  6670                           ; BSR set to: 0
  6671  0034DC  C0BF  FFD9         	movff	atoi@s,fsr2l
  6672  0034E0  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6673  0034E4  0E20               	movlw	32
  6674  0034E6  18DE               	xorwf	postinc2,w,c
  6675  0034E8  B4D8               	btfsc	status,2,c
  6676  0034EA  D7F3               	goto	l1257
  6677  0034EC  C0BF  FFD9         	movff	atoi@s,fsr2l
  6678  0034F0  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6679  0034F4  0E09               	movlw	9
  6680  0034F6  18DE               	xorwf	postinc2,w,c
  6681  0034F8  B4D8               	btfsc	status,2,c
  6682  0034FA  D7EB               	goto	l1257
  6683  0034FC  0E00               	movlw	0
  6684  0034FE  0100               	movlb	0	; () banked
  6685  003500  6FC5               	movwf	(atoi@a+1)& (0+255),b
  6686  003502  0E00               	movlw	0
  6687  003504  6FC4               	movwf	atoi@a& (0+255),b
  6688  003506  0E00               	movlw	0
  6689  003508  6FC3               	movwf	atoi@sign& (0+255),b
  6690                           
  6691                           ; BSR set to: 0
  6692  00350A  C0BF  FFD9         	movff	atoi@s,fsr2l
  6693  00350E  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6694  003512  0E2D               	movlw	45
  6695  003514  18DE               	xorwf	postinc2,w,c
  6696  003516  A4D8               	btfss	status,2,c
  6697  003518  D002               	goto	l1259
  6698                           
  6699                           ; BSR set to: 0
  6700  00351A  2BC3               	incf	atoi@sign& (0+255),f,b
  6701  00351C  D028               	goto	l5512
  6702  00351E                     l1259:
  6703  00351E  FFFF               	dw	65535	; assembler added errata NOP
  6704                           
  6705                           ; BSR set to: 0
  6706                           
  6707                           ; BSR set to: 0
  6708  003520  C0BF  FFD9         	movff	atoi@s,fsr2l
  6709  003524  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6710  003528  0E2B               	movlw	43
  6711  00352A  18DE               	xorwf	postinc2,w,c
  6712  00352C  A4D8               	btfss	status,2,c
  6713  00352E  D022               	goto	l1262
  6714  003530  D01E               	goto	l5512
  6715  003532  FFFF               	dw	65535	; assembler added errata NOP
  6716                           
  6717                           ; BSR set to: 0
  6718  003534  C0C4  F080         	movff	atoi@a,___wmul@multiplier
  6719  003538  C0C5  F081         	movff	atoi@a+1,___wmul@multiplier+1
  6720  00353C  0E00               	movlw	0
  6721  00353E  0100               	movlb	0	; () banked
  6722  003540  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6723  003542  0E0A               	movlw	10
  6724  003544  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6725  003546  ECEB  F037         	call	___wmul	;wreg free
  6726  00354A  C0BF  FFD9         	movff	atoi@s,fsr2l
  6727  00354E  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6728  003552  50DF               	movf	indf2,w,c
  6729  003554  0100               	movlb	0	; () banked
  6730  003556  6FC1               	movwf	??_atoi& (0+255),b
  6731  003558  6BC2               	clrf	(??_atoi+1)& (0+255),b
  6732  00355A  5180               	movf	?___wmul& (0+255),w,b
  6733  00355C  27C1               	addwf	??_atoi& (0+255),f,b
  6734  00355E  5181               	movf	(?___wmul+1)& (0+255),w,b
  6735  003560  23C2               	addwfc	(??_atoi+1)& (0+255),f,b
  6736  003562  0ED0               	movlw	208
  6737  003564  25C1               	addwf	??_atoi& (0+255),w,b
  6738  003566  6FC4               	movwf	atoi@a& (0+255),b
  6739  003568  0EFF               	movlw	255
  6740  00356A  21C2               	addwfc	(??_atoi+1)& (0+255),w,b
  6741  00356C  6FC5               	movwf	(atoi@a+1)& (0+255),b
  6742  00356E                     l5512:
  6743  00356E  FFFF               	dw	65535	; assembler added errata NOP
  6744                           
  6745                           ; BSR set to: 0
  6746  003570  4BBF               	infsnz	atoi@s& (0+255),f,b
  6747  003572  2BC0               	incf	(atoi@s+1)& (0+255),f,b
  6748  003574                     l1262:
  6749  003574  FFFF               	dw	65535	; assembler added errata NOP
  6750                           
  6751                           ; BSR set to: 0
  6752                           
  6753                           ; BSR set to: 0
  6754  003576  C0BF  FFD9         	movff	atoi@s,fsr2l
  6755  00357A  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  6756  00357E  50DF               	movf	indf2,w,c
  6757  003580  ECAD  F037         	call	_isdigit
  6758  003584  B0D8               	btfsc	status,0,c
  6759  003586  D7D5               	goto	l1263
  6760  003588  0100               	movlb	0	; () banked
  6761  00358A  51C3               	movf	atoi@sign& (0+255),w,b
  6762  00358C  B4D8               	btfsc	status,2,c
  6763  00358E  D00D               	goto	l1265
  6764                           
  6765                           ; BSR set to: 0
  6766  003590  C0C4  F0C1         	movff	atoi@a,??_atoi
  6767  003594  C0C5  F0C2         	movff	atoi@a+1,??_atoi+1
  6768  003598  1FC1               	comf	??_atoi& (0+255),f,b
  6769  00359A  1FC2               	comf	(??_atoi+1)& (0+255),f,b
  6770  00359C  4BC1               	infsnz	??_atoi& (0+255),f,b
  6771  00359E  2BC2               	incf	(??_atoi+1)& (0+255),f,b
  6772  0035A0  C0C1  F0BF         	movff	??_atoi,?_atoi
  6773  0035A4  C0C2  F0C0         	movff	??_atoi+1,?_atoi+1
  6774  0035A8  D005               	goto	l1266
  6775  0035AA                     l1265:
  6776  0035AA  FFFF               	dw	65535	; assembler added errata NOP
  6777                           
  6778                           ; BSR set to: 0
  6779  0035AC  C0C4  F0BF         	movff	atoi@a,?_atoi
  6780  0035B0  C0C5  F0C0         	movff	atoi@a+1,?_atoi+1
  6781  0035B4                     l1266:
  6782  0035B4  FFFF               	dw	65535	; assembler added errata NOP
  6783                           
  6784                           ; BSR set to: 0
  6785  0035B6  0012               	return		;funcret
  6786  0035B8  FFFF               	dw	65535	; errata NOP
  6787  0035BA                     __end_of_atoi:
  6788                           	opt stack 0
  6789                           tblptru	equ	0xFF8
  6790                           tblptrh	equ	0xFF7
  6791                           tblptrl	equ	0xFF6
  6792                           tablat	equ	0xFF5
  6793                           prodh	equ	0xFF4
  6794                           prodl	equ	0xFF3
  6795                           postinc0	equ	0xFEE
  6796                           wreg	equ	0xFE8
  6797                           postdec1	equ	0xFE5
  6798                           fsr1l	equ	0xFE1
  6799                           indf2	equ	0xFDF
  6800                           postinc2	equ	0xFDE
  6801                           fsr2h	equ	0xFDA
  6802                           fsr2l	equ	0xFD9
  6803                           status	equ	0xFD8
  6804                           
  6805 ;; *************** function _getDS1307TimeDate *****************
  6806 ;; Defined at:
  6807 ;;		line 52 in file "ds1307.h"
  6808 ;; Parameters:    Size  Location     Type
  6809 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  6810 ;;		 -> rtc(7), 
  6811 ;; Auto vars:     Size  Location     Type
  6812 ;;		None
  6813 ;; Return value:  Size  Location     Type
  6814 ;;                  1    wreg      void 
  6815 ;; Registers used:
  6816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6817 ;; Tracked objects:
  6818 ;;		On entry : 0/0
  6819 ;;		On exit  : 0/0
  6820 ;;		Unchanged: 0/0
  6821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6822 ;;      Params:         0       2       0       0       0       0       0
  6823 ;;      Locals:         0       0       0       0       0       0       0
  6824 ;;      Temps:          0       0       0       0       0       0       0
  6825 ;;      Totals:         0       2       0       0       0       0       0
  6826 ;;Total ram usage:        2 bytes
  6827 ;; Hardware stack levels used:    1
  6828 ;; Hardware stack levels required when called:    8
  6829 ;; This function calls:
  6830 ;;		_BCDtoDEC
  6831 ;;		_I2C_Read
  6832 ;;		_I2C_Restart
  6833 ;;		_I2C_Start
  6834 ;;		_I2C_Stop
  6835 ;;		_I2C_Write
  6836 ;; This function is called by:
  6837 ;;		_main
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           	psect	text16
  6842  002D0E                     __ptext16:
  6843                           	opt stack 0
  6844  002D0E                     _getDS1307TimeDate:
  6845                           	opt stack 0
  6846  002D0E  FFFF               	dw	65535	; assembler added errata NOP
  6847                           
  6848                           ;ds1307.h: 54: I2C_Start();
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;incstack = 0
  6852  002D10  EC1A  F037         	call	_I2C_Start	;wreg free
  6853                           
  6854                           ;ds1307.h: 55: I2C_Write(0xD0);
  6855  002D14  0E00               	movlw	0
  6856  002D16  0100               	movlb	0	; () banked
  6857  002D18  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  6858  002D1A  0ED0               	movlw	208
  6859  002D1C  6F8A               	movwf	I2C_Write@d& (0+255),b
  6860  002D1E  EC33  F037         	call	_I2C_Write	;wreg free
  6861                           
  6862                           ;ds1307.h: 56: I2C_Write(0x00);
  6863  002D22  0E00               	movlw	0
  6864  002D24  0100               	movlb	0	; () banked
  6865  002D26  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  6866  002D28  0E00               	movlw	0
  6867  002D2A  6F8A               	movwf	I2C_Write@d& (0+255),b
  6868  002D2C  EC33  F037         	call	_I2C_Write	;wreg free
  6869                           
  6870                           ;ds1307.h: 57: I2C_Restart();
  6871  002D30  EC26  F037         	call	_I2C_Restart	;wreg free
  6872                           
  6873                           ;ds1307.h: 58: I2C_Write(0xD1);
  6874  002D34  0E00               	movlw	0
  6875  002D36  0100               	movlb	0	; () banked
  6876  002D38  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  6877  002D3A  0ED1               	movlw	209
  6878  002D3C  6F8A               	movwf	I2C_Write@d& (0+255),b
  6879  002D3E  EC33  F037         	call	_I2C_Write	;wreg free
  6880                           
  6881                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
  6882  002D42  0100               	movlb	0	; () banked
  6883  002D44  EE20 F001          	lfsr	2,1
  6884  002D48  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6885  002D4A  26D9               	addwf	fsr2l,f,c
  6886  002D4C  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6887  002D4E  22DA               	addwfc	fsr2h,f,c
  6888  002D50  0E00               	movlw	0
  6889  002D52  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6890  002D54  0E01               	movlw	1
  6891  002D56  6F81               	movwf	I2C_Read@a& (0+255),b
  6892  002D58  EC0E  F039         	call	_I2C_Read	;wreg free
  6893  002D5C  0100               	movlb	0	; () banked
  6894  002D5E  5181               	movf	?_I2C_Read& (0+255),w,b
  6895  002D60  EC78  F037         	call	_BCDtoDEC
  6896  002D64  6EDF               	movwf	indf2,c
  6897                           
  6898                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
  6899  002D66  0100               	movlb	0	; () banked
  6900  002D68  EE20 F002          	lfsr	2,2
  6901  002D6C  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6902  002D6E  26D9               	addwf	fsr2l,f,c
  6903  002D70  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6904  002D72  22DA               	addwfc	fsr2h,f,c
  6905  002D74  0E00               	movlw	0
  6906  002D76  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6907  002D78  0E01               	movlw	1
  6908  002D7A  6F81               	movwf	I2C_Read@a& (0+255),b
  6909  002D7C  EC0E  F039         	call	_I2C_Read	;wreg free
  6910  002D80  0100               	movlb	0	; () banked
  6911  002D82  5181               	movf	?_I2C_Read& (0+255),w,b
  6912  002D84  EC78  F037         	call	_BCDtoDEC
  6913  002D88  6EDF               	movwf	indf2,c
  6914                           
  6915                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
  6916  002D8A  0100               	movlb	0	; () banked
  6917  002D8C  EE20 F003          	lfsr	2,3
  6918  002D90  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6919  002D92  26D9               	addwf	fsr2l,f,c
  6920  002D94  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6921  002D96  22DA               	addwfc	fsr2h,f,c
  6922  002D98  0E00               	movlw	0
  6923  002D9A  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6924  002D9C  0E01               	movlw	1
  6925  002D9E  6F81               	movwf	I2C_Read@a& (0+255),b
  6926  002DA0  EC0E  F039         	call	_I2C_Read	;wreg free
  6927  002DA4  0100               	movlb	0	; () banked
  6928  002DA6  5181               	movf	?_I2C_Read& (0+255),w,b
  6929  002DA8  EC78  F037         	call	_BCDtoDEC
  6930  002DAC  6EDF               	movwf	indf2,c
  6931                           
  6932                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
  6933  002DAE  0E00               	movlw	0
  6934  002DB0  0100               	movlb	0	; () banked
  6935  002DB2  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6936  002DB4  0E01               	movlw	1
  6937  002DB6  6F81               	movwf	I2C_Read@a& (0+255),b
  6938  002DB8  EC0E  F039         	call	_I2C_Read	;wreg free
  6939  002DBC  0100               	movlb	0	; () banked
  6940  002DBE  5181               	movf	?_I2C_Read& (0+255),w,b
  6941  002DC0  EC78  F037         	call	_BCDtoDEC
  6942  002DC4  C08C  FFD9         	movff	getDS1307TimeDate@ptrToUserVal,fsr2l
  6943  002DC8  C08D  FFDA         	movff	getDS1307TimeDate@ptrToUserVal+1,fsr2h
  6944  002DCC  6EDF               	movwf	indf2,c
  6945                           
  6946                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
  6947  002DCE  0100               	movlb	0	; () banked
  6948  002DD0  EE20 F004          	lfsr	2,4
  6949  002DD4  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6950  002DD6  26D9               	addwf	fsr2l,f,c
  6951  002DD8  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6952  002DDA  22DA               	addwfc	fsr2h,f,c
  6953  002DDC  0E00               	movlw	0
  6954  002DDE  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6955  002DE0  0E01               	movlw	1
  6956  002DE2  6F81               	movwf	I2C_Read@a& (0+255),b
  6957  002DE4  EC0E  F039         	call	_I2C_Read	;wreg free
  6958  002DE8  0100               	movlb	0	; () banked
  6959  002DEA  5181               	movf	?_I2C_Read& (0+255),w,b
  6960  002DEC  EC78  F037         	call	_BCDtoDEC
  6961  002DF0  6EDF               	movwf	indf2,c
  6962                           
  6963                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
  6964  002DF2  0100               	movlb	0	; () banked
  6965  002DF4  EE20 F005          	lfsr	2,5
  6966  002DF8  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6967  002DFA  26D9               	addwf	fsr2l,f,c
  6968  002DFC  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6969  002DFE  22DA               	addwfc	fsr2h,f,c
  6970  002E00  0E00               	movlw	0
  6971  002E02  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6972  002E04  0E01               	movlw	1
  6973  002E06  6F81               	movwf	I2C_Read@a& (0+255),b
  6974  002E08  EC0E  F039         	call	_I2C_Read	;wreg free
  6975  002E0C  0100               	movlb	0	; () banked
  6976  002E0E  5181               	movf	?_I2C_Read& (0+255),w,b
  6977  002E10  EC78  F037         	call	_BCDtoDEC
  6978  002E14  6EDF               	movwf	indf2,c
  6979                           
  6980                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
  6981  002E16  0100               	movlb	0	; () banked
  6982  002E18  EE20 F006          	lfsr	2,6
  6983  002E1C  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  6984  002E1E  26D9               	addwf	fsr2l,f,c
  6985  002E20  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  6986  002E22  22DA               	addwfc	fsr2h,f,c
  6987  002E24  0E00               	movlw	0
  6988  002E26  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  6989  002E28  0E00               	movlw	0
  6990  002E2A  6F81               	movwf	I2C_Read@a& (0+255),b
  6991  002E2C  EC0E  F039         	call	_I2C_Read	;wreg free
  6992  002E30  0100               	movlb	0	; () banked
  6993  002E32  5181               	movf	?_I2C_Read& (0+255),w,b
  6994  002E34  EC78  F037         	call	_BCDtoDEC
  6995  002E38  6EDF               	movwf	indf2,c
  6996                           
  6997                           ;ds1307.h: 66: I2C_Stop();
  6998  002E3A  EC20  F037         	call	_I2C_Stop	;wreg free
  6999  002E3E  0012               	return		;funcret
  7000  002E40  FFFF               	dw	65535	; errata NOP
  7001  002E42                     __end_of_getDS1307TimeDate:
  7002                           	opt stack 0
  7003                           tblptru	equ	0xFF8
  7004                           tblptrh	equ	0xFF7
  7005                           tblptrl	equ	0xFF6
  7006                           tablat	equ	0xFF5
  7007                           prodh	equ	0xFF4
  7008                           prodl	equ	0xFF3
  7009                           postinc0	equ	0xFEE
  7010                           wreg	equ	0xFE8
  7011                           postdec1	equ	0xFE5
  7012                           fsr1l	equ	0xFE1
  7013                           indf2	equ	0xFDF
  7014                           postinc2	equ	0xFDE
  7015                           fsr2h	equ	0xFDA
  7016                           fsr2l	equ	0xFD9
  7017                           status	equ	0xFD8
  7018                           
  7019 ;; *************** function _BCDtoDEC *****************
  7020 ;; Defined at:
  7021 ;;		line 34 in file "function.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;  val             1    wreg     unsigned char 
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;  val             1    0[BANK0 ] unsigned char 
  7026 ;; Return value:  Size  Location     Type
  7027 ;;                  1    wreg      unsigned char 
  7028 ;; Registers used:
  7029 ;;		wreg, status,2, status,0, prodl, prodh
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7035 ;;      Params:         0       0       0       0       0       0       0
  7036 ;;      Locals:         0       1       0       0       0       0       0
  7037 ;;      Temps:          0       0       0       0       0       0       0
  7038 ;;      Totals:         0       1       0       0       0       0       0
  7039 ;;Total ram usage:        1 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    6
  7042 ;; This function calls:
  7043 ;;		Nothing
  7044 ;; This function is called by:
  7045 ;;		_getDS1307TimeDate
  7046 ;;		_getDS1307Time
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text17
  7051  006EF0                     __ptext17:
  7052                           	opt stack 0
  7053  006EF0                     _BCDtoDEC:
  7054                           	opt stack 0
  7055  006EF0  FFFF               	dw	65535	; assembler added errata NOP
  7056                           
  7057                           ;incstack = 0
  7058                           ;BCDtoDEC@val stored from wreg
  7059  006EF2  0100               	movlb	0	; () banked
  7060  006EF4  6F80               	movwf	BCDtoDEC@val& (0+255),b
  7061                           
  7062                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
  7063  006EF6  0100               	movlb	0	; () banked
  7064  006EF8  3980               	swapf	BCDtoDEC@val& (0+255),w,b
  7065  006EFA  0B0F               	andlw	15
  7066  006EFC  0B0F               	andlw	15
  7067  006EFE  0D0A               	mullw	10
  7068  006F00  5180               	movf	BCDtoDEC@val& (0+255),w,b
  7069  006F02  0B0F               	andlw	15
  7070  006F04  24F3               	addwf	prodl,w,c
  7071                           
  7072                           ; BSR set to: 0
  7073                           
  7074                           ; BSR set to: 0
  7075  006F06  0012               	return		;funcret
  7076  006F08  FFFF               	dw	65535	; errata NOP
  7077  006F0A                     __end_of_BCDtoDEC:
  7078                           	opt stack 0
  7079                           tblptru	equ	0xFF8
  7080                           tblptrh	equ	0xFF7
  7081                           tblptrl	equ	0xFF6
  7082                           tablat	equ	0xFF5
  7083                           prodh	equ	0xFF4
  7084                           prodl	equ	0xFF3
  7085                           postinc0	equ	0xFEE
  7086                           wreg	equ	0xFE8
  7087                           postdec1	equ	0xFE5
  7088                           fsr1l	equ	0xFE1
  7089                           indf2	equ	0xFDF
  7090                           postinc2	equ	0xFDE
  7091                           fsr2h	equ	0xFDA
  7092                           fsr2l	equ	0xFD9
  7093                           status	equ	0xFD8
  7094                           
  7095 ;; *************** function _dataLoger *****************
  7096 ;; Defined at:
  7097 ;;		line 12 in file "tela_DATALOGER.h"
  7098 ;; Parameters:    Size  Location     Type
  7099 ;;		None
  7100 ;; Auto vars:     Size  Location     Type
  7101 ;;  logs            1   64[BANK0 ] unsigned char 
  7102 ;; Return value:  Size  Location     Type
  7103 ;;                  1    wreg      void 
  7104 ;; Registers used:
  7105 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7106 ;; Tracked objects:
  7107 ;;		On entry : 0/0
  7108 ;;		On exit  : 0/0
  7109 ;;		Unchanged: 0/0
  7110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7111 ;;      Params:         0       0       0       0       0       0       0
  7112 ;;      Locals:         0       7       0       0       0       0       0
  7113 ;;      Temps:          0       5       0       0       0       0       0
  7114 ;;      Totals:         0      12       0       0       0       0       0
  7115 ;;Total ram usage:       12 bytes
  7116 ;; Hardware stack levels used:    1
  7117 ;; Hardware stack levels required when called:    9
  7118 ;; This function calls:
  7119 ;;		___awdiv
  7120 ;;		_btPress
  7121 ;;		_readEEPROM_ext
  7122 ;;		_sprintf
  7123 ;; This function is called by:
  7124 ;;		_main
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           	psect	text18
  7129  001AF0                     __ptext18:
  7130                           	opt stack 0
  7131  001AF0                     _dataLoger:
  7132                           	opt stack 0
  7133  001AF0  FFFF               	dw	65535	; assembler added errata NOP
  7134                           
  7135                           ;tela_DATALOGER.h: 13: sprintf(line1, "Data: %02d/%02d/%02d %02d:%02d", dtl_dia, dtl_mes
      +                          , dtl_ano, dtl_hora, dtl_min);
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;incstack = 0
  7139  001AF2  0E7B               	movlw	low _line1
  7140  001AF4  0100               	movlb	0	; () banked
  7141  001AF6  6FA1               	movwf	sprintf@wh& (0+255),b
  7142  001AF8  0E01               	movlw	high _line1
  7143  001AFA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7144  001AFC  0E5A               	movlw	low STR_72
  7145  001AFE  6FA3               	movwf	sprintf@f& (0+255),b
  7146  001B00  0E7C               	movlw	high STR_72
  7147  001B02  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7148  001B04  C05D  F0A5         	movff	_dtl_dia,?_sprintf+4
  7149  001B08  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7150  001B0A  C05C  F0A7         	movff	_dtl_mes,?_sprintf+6
  7151  001B0E  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  7152  001B10  C05B  F0A9         	movff	_dtl_ano,?_sprintf+8
  7153  001B14  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  7154  001B16  C05A  F0AB         	movff	_dtl_hora,?_sprintf+10
  7155  001B1A  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  7156  001B1C  C059  F0AD         	movff	_dtl_min,?_sprintf+12
  7157  001B20  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  7158  001B22  EC89  F03A         	call	_sprintf	;wreg free
  7159                           
  7160                           ;tela_DATALOGER.h: 14: sprintf(line2, "Jokey: %s", dtl_jockey == 1 ? "OK" : "ERRO");
  7161  001B26  0458               	decf	_dtl_jockey,w,c
  7162  001B28  B4D8               	btfsc	status,2,c
  7163  001B2A  D005               	goto	l762
  7164  001B2C  0EE2               	movlw	low STR_47
  7165  001B2E  0100               	movlb	0	; () banked
  7166  001B30  6FBA               	movwf	_dataLoger$1431& (0+255),b
  7167  001B32  0E7F               	movlw	high STR_47
  7168  001B34  D005               	goto	L13
  7169  001B36                     l762:
  7170  001B36  FFFF               	dw	65535	; assembler added errata NOP
  7171                           
  7172                           ; BSR set to: 0
  7173  001B38  0EF9               	movlw	low STR_5
  7174  001B3A  0100               	movlb	0	; () banked
  7175  001B3C  6FBA               	movwf	_dataLoger$1431& (0+255),b
  7176  001B3E  0E7F               	movlw	high STR_5
  7177  001B40                     L13:
  7178  001B40  FFFF               	dw	65535	; assembler added errata NOP
  7179  001B42  6FBB               	movwf	(_dataLoger$1431+1)& (0+255),b
  7180                           
  7181                           ; BSR set to: 0
  7182                           
  7183                           ; BSR set to: 0
  7184  001B44  0E66               	movlw	low _line2
  7185  001B46  6FA1               	movwf	sprintf@wh& (0+255),b
  7186  001B48  0E01               	movlw	high _line2
  7187  001B4A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7188  001B4C  0E7E               	movlw	low STR_73
  7189  001B4E  6FA3               	movwf	sprintf@f& (0+255),b
  7190  001B50  0E7F               	movlw	high STR_73
  7191  001B52  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7192  001B54  C0BA  F0A5         	movff	_dataLoger$1431,?_sprintf+4
  7193  001B58  C0BB  F0A6         	movff	_dataLoger$1431+1,?_sprintf+5
  7194  001B5C  EC89  F03A         	call	_sprintf	;wreg free
  7195                           
  7196                           ;tela_DATALOGER.h: 15: sprintf(&line2[14], "#%02d/%02d", (dtl_posi_visualizar + 1), tota
      +                          lLogs);
  7197  001B60  0E74               	movlw	low (_line2+14)
  7198  001B62  0100               	movlb	0	; () banked
  7199  001B64  6FA1               	movwf	sprintf@wh& (0+255),b
  7200  001B66  0E01               	movlw	high (_line2+14)
  7201  001B68  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7202  001B6A  0E2A               	movlw	low STR_76
  7203  001B6C  6FA3               	movwf	sprintf@f& (0+255),b
  7204  001B6E  0E7F               	movlw	high STR_76
  7205  001B70  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7206  001B72  0E01               	movlw	1
  7207  001B74  2453               	addwf	_dtl_posi_visualizar,w,c
  7208  001B76  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  7209  001B78  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7210  001B7A  0E00               	movlw	0
  7211  001B7C  23A6               	addwfc	(?_sprintf+5)& (0+255),f,b
  7212  001B7E  C054  F0A7         	movff	_totalLogs,?_sprintf+6
  7213  001B82  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  7214  001B84  EC89  F03A         	call	_sprintf	;wreg free
  7215                           
  7216                           ;tela_DATALOGER.h: 16: sprintf(line3, "Principal: %s", dtl_principal == 1 ? "OK" : "ERRO
      +                          ");
  7217  001B88  0457               	decf	_dtl_principal,w,c
  7218  001B8A  B4D8               	btfsc	status,2,c
  7219  001B8C  D005               	goto	l766
  7220  001B8E  0EE2               	movlw	low STR_47
  7221  001B90  0100               	movlb	0	; () banked
  7222  001B92  6FBC               	movwf	_dataLoger$1437& (0+255),b
  7223  001B94  0E7F               	movlw	high STR_47
  7224  001B96  D005               	goto	L14
  7225  001B98                     l766:
  7226  001B98  FFFF               	dw	65535	; assembler added errata NOP
  7227                           
  7228                           ; BSR set to: 0
  7229  001B9A  0EF9               	movlw	low STR_5
  7230  001B9C  0100               	movlb	0	; () banked
  7231  001B9E  6FBC               	movwf	_dataLoger$1437& (0+255),b
  7232  001BA0  0E7F               	movlw	high STR_5
  7233  001BA2                     L14:
  7234  001BA2  FFFF               	dw	65535	; assembler added errata NOP
  7235  001BA4  6FBD               	movwf	(_dataLoger$1437+1)& (0+255),b
  7236                           
  7237                           ; BSR set to: 0
  7238                           
  7239                           ; BSR set to: 0
  7240  001BA6  0E51               	movlw	low _line3
  7241  001BA8  6FA1               	movwf	sprintf@wh& (0+255),b
  7242  001BAA  0E01               	movlw	high _line3
  7243  001BAC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7244  001BAE  0EAF               	movlw	low STR_77
  7245  001BB0  6FA3               	movwf	sprintf@f& (0+255),b
  7246  001BB2  0E7E               	movlw	high STR_77
  7247  001BB4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7248  001BB6  C0BC  F0A5         	movff	_dataLoger$1437,?_sprintf+4
  7249  001BBA  C0BD  F0A6         	movff	_dataLoger$1437+1,?_sprintf+5
  7250  001BBE  EC89  F03A         	call	_sprintf	;wreg free
  7251                           
  7252                           ;tela_DATALOGER.h: 17: sprintf(line4, "Combustao: %s", dtl_estacionaria == 1 ? "OK" : "E
      +                          RRO");
  7253  001BC2  0456               	decf	_dtl_estacionaria,w,c
  7254  001BC4  B4D8               	btfsc	status,2,c
  7255  001BC6  D005               	goto	l770
  7256  001BC8  0EE2               	movlw	low STR_47
  7257  001BCA  0100               	movlb	0	; () banked
  7258  001BCC  6FBE               	movwf	_dataLoger$1442& (0+255),b
  7259  001BCE  0E7F               	movlw	high STR_47
  7260  001BD0  D005               	goto	L15
  7261  001BD2                     l770:
  7262  001BD2  FFFF               	dw	65535	; assembler added errata NOP
  7263                           
  7264                           ; BSR set to: 0
  7265  001BD4  0EF9               	movlw	low STR_5
  7266  001BD6  0100               	movlb	0	; () banked
  7267  001BD8  6FBE               	movwf	_dataLoger$1442& (0+255),b
  7268  001BDA  0E7F               	movlw	high STR_5
  7269  001BDC                     L15:
  7270  001BDC  FFFF               	dw	65535	; assembler added errata NOP
  7271  001BDE  6FBF               	movwf	(_dataLoger$1442+1)& (0+255),b
  7272                           
  7273                           ; BSR set to: 0
  7274                           
  7275                           ; BSR set to: 0
  7276  001BE0  0E3C               	movlw	low _line4
  7277  001BE2  6FA1               	movwf	sprintf@wh& (0+255),b
  7278  001BE4  0E01               	movlw	high _line4
  7279  001BE6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7280  001BE8  0EBD               	movlw	low STR_80
  7281  001BEA  6FA3               	movwf	sprintf@f& (0+255),b
  7282  001BEC  0E7E               	movlw	high STR_80
  7283  001BEE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7284  001BF0  C0BE  F0A5         	movff	_dataLoger$1442,?_sprintf+4
  7285  001BF4  C0BF  F0A6         	movff	_dataLoger$1442+1,?_sprintf+5
  7286  001BF8  EC89  F03A         	call	_sprintf	;wreg free
  7287                           
  7288                           ;tela_DATALOGER.h: 19: if (btPress(1)) {
  7289  001BFC  0E01               	movlw	1
  7290  001BFE  EC43  F03C         	call	_btPress
  7291  001C02  0900               	iorlw	0
  7292  001C04  B4D8               	btfsc	status,2,c
  7293  001C06  D005               	goto	l773
  7294                           
  7295                           ;tela_DATALOGER.h: 20: option_posi = 0;
  7296  001C08  0E00               	movlw	0
  7297  001C0A  0100               	movlb	0	; () banked
  7298  001C0C  6FE0               	movwf	_option_posi& (0+255),b
  7299                           
  7300                           ; BSR set to: 0
  7301                           ;tela_DATALOGER.h: 21: menu_posi = _menu_posi;
  7302  001C0E  C0DE  F0DF         	movff	__menu_posi,_menu_posi
  7303  001C12                     l773:
  7304  001C12  FFFF               	dw	65535	; assembler added errata NOP
  7305                           
  7306                           ;tela_DATALOGER.h: 22: }
  7307                           ;tela_DATALOGER.h: 27: if (btPress(2)) {
  7308                           
  7309                           ; BSR set to: 0
  7310  001C14  0E02               	movlw	2
  7311  001C16  EC43  F03C         	call	_btPress
  7312  001C1A  0900               	iorlw	0
  7313  001C1C  B4D8               	btfsc	status,2,c
  7314  001C1E  D00B               	goto	l774
  7315                           
  7316                           ;tela_DATALOGER.h: 28: dtl_posicao -= 8;
  7317  001C20  0E08               	movlw	8
  7318  001C22  0100               	movlb	0	; () banked
  7319  001C24  5FFA               	subwf	_dtl_posicao& (0+255),f,b
  7320                           
  7321                           ;tela_DATALOGER.h: 29: if (dtl_posicao < 60) {
  7322  001C26  0E3C               	movlw	60
  7323  001C28  61FA               	cpfslt	_dtl_posicao& (0+255),b
  7324  001C2A  D002               	goto	l775
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;tela_DATALOGER.h: 30: dtl_posicao = 60;
  7328  001C2C  0E3C               	movlw	60
  7329  001C2E  6FFA               	movwf	_dtl_posicao& (0+255),b
  7330  001C30                     l775:
  7331  001C30  FFFF               	dw	65535	; assembler added errata NOP
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;tela_DATALOGER.h: 31: }
  7335                           ;tela_DATALOGER.h: 32: dtl_carregar_log = 1;
  7336  001C32  0E01               	movlw	1
  7337  001C34  6E55               	movwf	_dtl_carregar_log,c
  7338  001C36                     l774:
  7339  001C36  FFFF               	dw	65535	; assembler added errata NOP
  7340                           
  7341                           ;tela_DATALOGER.h: 33: }
  7342                           ;tela_DATALOGER.h: 34: if (btPress(3)) {
  7343                           
  7344                           ; BSR set to: 0
  7345  001C38  0E03               	movlw	3
  7346  001C3A  EC43  F03C         	call	_btPress
  7347  001C3E  0900               	iorlw	0
  7348  001C40  B4D8               	btfsc	status,2,c
  7349  001C42  D019               	goto	l776
  7350                           
  7351                           ;tela_DATALOGER.h: 35: if ((dtl_posi_visualizar + 1) >= totalLogs) {
  7352  001C44  5054               	movf	_totalLogs,w,c
  7353  001C46  0100               	movlb	0	; () banked
  7354  001C48  6FB5               	movwf	??_dataLoger& (0+255),b
  7355  001C4A  6BB6               	clrf	(??_dataLoger+1)& (0+255),b
  7356  001C4C  5053               	movf	_dtl_posi_visualizar,w,c
  7357  001C4E  6FB7               	movwf	(??_dataLoger+2)& (0+255),b
  7358  001C50  6BB8               	clrf	(??_dataLoger+3)& (0+255),b
  7359  001C52  0E01               	movlw	1
  7360  001C54  27B7               	addwf	(??_dataLoger+2)& (0+255),f,b
  7361  001C56  0E00               	movlw	0
  7362  001C58  23B8               	addwfc	(??_dataLoger+3)& (0+255),f,b
  7363  001C5A  51B5               	movf	??_dataLoger& (0+255),w,b
  7364  001C5C  5DB7               	subwf	(??_dataLoger+2)& (0+255),w,b
  7365  001C5E  51B8               	movf	(??_dataLoger+3)& (0+255),w,b
  7366  001C60  0A80               	xorlw	128
  7367  001C62  6FB9               	movwf	(??_dataLoger+4)& (0+255),b
  7368  001C64  51B6               	movf	(??_dataLoger+1)& (0+255),w,b
  7369  001C66  0A80               	xorlw	128
  7370  001C68  59B9               	subwfb	(??_dataLoger+4)& (0+255),w,b
  7371  001C6A  B0D8               	btfsc	status,0,c
  7372  001C6C  D05A               	goto	l779
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;tela_DATALOGER.h: 37: }
  7376                           ;tela_DATALOGER.h: 38: dtl_posicao += 8;
  7377                           
  7378                           ; BSR set to: 0
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;tela_DATALOGER.h: 36: return;
  7382  001C6E  0E08               	movlw	8
  7383  001C70  27FA               	addwf	_dtl_posicao& (0+255),f,b
  7384                           
  7385                           ; BSR set to: 0
  7386                           ;tela_DATALOGER.h: 39: dtl_carregar_log = 1;
  7387  001C72  0E01               	movlw	1
  7388  001C74  6E55               	movwf	_dtl_carregar_log,c
  7389  001C76                     l776:
  7390  001C76  FFFF               	dw	65535	; assembler added errata NOP
  7391                           
  7392                           ;tela_DATALOGER.h: 40: }
  7393                           ;tela_DATALOGER.h: 42: if (dtl_carregar_log == 1) {
  7394                           
  7395                           ; BSR set to: 0
  7396  001C78  0455               	decf	_dtl_carregar_log,w,c
  7397  001C7A  A4D8               	btfss	status,2,c
  7398  001C7C  D052               	goto	l779
  7399                           
  7400                           ;tela_DATALOGER.h: 43: char logs = readEEPROM_ext(14);
  7401  001C7E  0E0E               	movlw	14
  7402  001C80  EC21  F03B         	call	_readEEPROM_ext
  7403  001C84  0100               	movlb	0	; () banked
  7404  001C86  6FC0               	movwf	dataLoger@logs& (0+255),b
  7405                           
  7406                           ;tela_DATALOGER.h: 44: totalLogs = (logs - 60) / 8;
  7407  001C88  0EC4               	movlw	196
  7408  001C8A  25C0               	addwf	dataLoger@logs& (0+255),w,b
  7409  001C8C  6F80               	movwf	___awdiv@dividend& (0+255),b
  7410  001C8E  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  7411  001C90  0EFF               	movlw	255
  7412  001C92  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  7413  001C94  0E00               	movlw	0
  7414  001C96  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7415  001C98  0E08               	movlw	8
  7416  001C9A  6F82               	movwf	___awdiv@divisor& (0+255),b
  7417  001C9C  EC76  F01E         	call	___awdiv	;wreg free
  7418  001CA0  0100               	movlb	0	; () banked
  7419  001CA2  5180               	movf	?___awdiv& (0+255),w,b
  7420  001CA4  6E54               	movwf	_totalLogs,c
  7421                           
  7422                           ;tela_DATALOGER.h: 46: dtl_posi_visualizar = (dtl_posicao - 60) / 8;
  7423  001CA6  0EC4               	movlw	196
  7424  001CA8  25FA               	addwf	_dtl_posicao& (0+255),w,b
  7425  001CAA  6F80               	movwf	___awdiv@dividend& (0+255),b
  7426  001CAC  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  7427  001CAE  0EFF               	movlw	255
  7428  001CB0  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  7429  001CB2  0E00               	movlw	0
  7430  001CB4  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7431  001CB6  0E08               	movlw	8
  7432  001CB8  6F82               	movwf	___awdiv@divisor& (0+255),b
  7433  001CBA  EC76  F01E         	call	___awdiv	;wreg free
  7434  001CBE  0100               	movlb	0	; () banked
  7435  001CC0  5180               	movf	?___awdiv& (0+255),w,b
  7436  001CC2  6E53               	movwf	_dtl_posi_visualizar,c
  7437                           
  7438                           ;tela_DATALOGER.h: 48: dtl_dia = readEEPROM_ext(dtl_posicao);
  7439  001CC4  51FA               	movf	_dtl_posicao& (0+255),w,b
  7440  001CC6  EC21  F03B         	call	_readEEPROM_ext
  7441  001CCA  6E5D               	movwf	_dtl_dia,c
  7442                           
  7443                           ;tela_DATALOGER.h: 49: dtl_mes = readEEPROM_ext((dtl_posicao + 1));
  7444  001CCC  0100               	movlb	0	; () banked
  7445  001CCE  29FA               	incf	_dtl_posicao& (0+255),w,b
  7446  001CD0  EC21  F03B         	call	_readEEPROM_ext
  7447  001CD4  6E5C               	movwf	_dtl_mes,c
  7448                           
  7449                           ;tela_DATALOGER.h: 50: dtl_ano = readEEPROM_ext((dtl_posicao + 2));
  7450  001CD6  0100               	movlb	0	; () banked
  7451  001CD8  51FA               	movf	_dtl_posicao& (0+255),w,b
  7452  001CDA  0F02               	addlw	2
  7453  001CDC  EC21  F03B         	call	_readEEPROM_ext
  7454  001CE0  6E5B               	movwf	_dtl_ano,c
  7455                           
  7456                           ;tela_DATALOGER.h: 51: dtl_hora = readEEPROM_ext((dtl_posicao + 3));
  7457  001CE2  0100               	movlb	0	; () banked
  7458  001CE4  51FA               	movf	_dtl_posicao& (0+255),w,b
  7459  001CE6  0F03               	addlw	3
  7460  001CE8  EC21  F03B         	call	_readEEPROM_ext
  7461  001CEC  6E5A               	movwf	_dtl_hora,c
  7462                           
  7463                           ;tela_DATALOGER.h: 52: dtl_min = readEEPROM_ext((dtl_posicao + 4));
  7464  001CEE  0100               	movlb	0	; () banked
  7465  001CF0  51FA               	movf	_dtl_posicao& (0+255),w,b
  7466  001CF2  0F04               	addlw	4
  7467  001CF4  EC21  F03B         	call	_readEEPROM_ext
  7468  001CF8  6E59               	movwf	_dtl_min,c
  7469                           
  7470                           ;tela_DATALOGER.h: 53: dtl_jockey = readEEPROM_ext((dtl_posicao + 5));
  7471  001CFA  0100               	movlb	0	; () banked
  7472  001CFC  51FA               	movf	_dtl_posicao& (0+255),w,b
  7473  001CFE  0F05               	addlw	5
  7474  001D00  EC21  F03B         	call	_readEEPROM_ext
  7475  001D04  6E58               	movwf	_dtl_jockey,c
  7476                           
  7477                           ;tela_DATALOGER.h: 54: dtl_principal = readEEPROM_ext((dtl_posicao + 6));
  7478  001D06  0100               	movlb	0	; () banked
  7479  001D08  51FA               	movf	_dtl_posicao& (0+255),w,b
  7480  001D0A  0F06               	addlw	6
  7481  001D0C  EC21  F03B         	call	_readEEPROM_ext
  7482  001D10  6E57               	movwf	_dtl_principal,c
  7483                           
  7484                           ;tela_DATALOGER.h: 55: dtl_estacionaria = readEEPROM_ext((dtl_posicao + 7));
  7485  001D12  0100               	movlb	0	; () banked
  7486  001D14  51FA               	movf	_dtl_posicao& (0+255),w,b
  7487  001D16  0F07               	addlw	7
  7488  001D18  EC21  F03B         	call	_readEEPROM_ext
  7489  001D1C  6E56               	movwf	_dtl_estacionaria,c
  7490                           
  7491                           ;tela_DATALOGER.h: 56: dtl_carregar_log = 0;
  7492  001D1E  0E00               	movlw	0
  7493  001D20  6E55               	movwf	_dtl_carregar_log,c
  7494  001D22                     l779:
  7495  001D22  FFFF               	dw	65535	; assembler added errata NOP
  7496  001D24  0012               	return		;funcret
  7497  001D26  FFFF               	dw	65535	; errata NOP
  7498  001D28                     __end_of_dataLoger:
  7499                           	opt stack 0
  7500                           tblptru	equ	0xFF8
  7501                           tblptrh	equ	0xFF7
  7502                           tblptrl	equ	0xFF6
  7503                           tablat	equ	0xFF5
  7504                           prodh	equ	0xFF4
  7505                           prodl	equ	0xFF3
  7506                           postinc0	equ	0xFEE
  7507                           wreg	equ	0xFE8
  7508                           postdec1	equ	0xFE5
  7509                           fsr1l	equ	0xFE1
  7510                           indf2	equ	0xFDF
  7511                           postinc2	equ	0xFDE
  7512                           fsr2h	equ	0xFDA
  7513                           fsr2l	equ	0xFD9
  7514                           status	equ	0xFD8
  7515                           
  7516 ;; *************** function _criarCaracteresCGRAM *****************
  7517 ;; Defined at:
  7518 ;;		line 152 in file "lcd.h"
  7519 ;; Parameters:    Size  Location     Type
  7520 ;;		None
  7521 ;; Auto vars:     Size  Location     Type
  7522 ;;  character      48    7[BANK0 ] const unsigned char [8][
  7523 ;;  i               1   59[BANK0 ] unsigned char 
  7524 ;;  j               1   58[BANK0 ] unsigned char 
  7525 ;;  k               1   57[BANK0 ] unsigned char 
  7526 ;; Return value:  Size  Location     Type
  7527 ;;                  1    wreg      void 
  7528 ;; Registers used:
  7529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7530 ;; Tracked objects:
  7531 ;;		On entry : 0/0
  7532 ;;		On exit  : 0/0
  7533 ;;		Unchanged: 0/0
  7534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7535 ;;      Params:         0       0       0       0       0       0       0
  7536 ;;      Locals:         0      53       0       0       0       0       0
  7537 ;;      Temps:          0       3       0       0       0       0       0
  7538 ;;      Totals:         0      56       0       0       0       0       0
  7539 ;;Total ram usage:       56 bytes
  7540 ;; Hardware stack levels used:    1
  7541 ;; Hardware stack levels required when called:    8
  7542 ;; This function calls:
  7543 ;;		_Lcd_Cmd
  7544 ;;		_Lcd_Write_Char
  7545 ;; This function is called by:
  7546 ;;		_main
  7547 ;; This function uses a non-reentrant model
  7548 ;;
  7549                           
  7550                           	psect	text19
  7551  00393E                     __ptext19:
  7552                           	opt stack 0
  7553  00393E                     _criarCaracteresCGRAM:
  7554                           	opt stack 0
  7555  00393E  FFFF               	dw	65535	; assembler added errata NOP
  7556                           
  7557                           ;lcd.h: 153: const char character[6][8] = {
  7558                           ;lcd.h: 154: 0x00, 0x1F, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04,
  7559                           ;lcd.h: 155: 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10,
  7560                           ;lcd.h: 156: 0x00, 0x00, 0x00, 0x04, 0x04, 0x14, 0x14, 0x14,
  7561                           ;lcd.h: 157: 0x00, 0x01, 0x01, 0x05, 0x05, 0x15, 0x15, 0x15,
  7562                           ;lcd.h: 158: 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04,
  7563                           ;lcd.h: 159: };
  7564                           
  7565                           ;incstack = 0
  7566  003940  0EFB               	movlw	low criarCaracteresCGRAM@F2954
  7567  003942  6EF6               	movwf	tblptrl,c
  7568  003944                     	if	1	;There is more than 1 active tblptr byte
  7569  003944  0E7A               	movlw	high criarCaracteresCGRAM@F2954
  7570  003946  6EF7               	movwf	tblptrh,c
  7571  003948                     	endif
  7572  003948                     	if	0	;There are less than 3 active tblptr bytes
  7573  003948                     	endif
  7574  003948  EE20  F087         	lfsr	2,criarCaracteresCGRAM@character
  7575  00394C  0E2F               	movlw	47
  7576  00394E                     u7630:
  7577  00394E  0009               	tblrd		*+
  7578  003950  FFFF               	dw	65535	; errata NOP
  7579  003952  CFF5 FFDE          	movff	tablat,postinc2
  7580  003956  06E8               	decf	wreg,f,c
  7581  003958  E2FA               	bc	u7630
  7582                           
  7583                           ;lcd.h: 160: Lcd_Cmd(0b0100);
  7584  00395A  0E04               	movlw	4
  7585  00395C  ECD5  F037         	call	_Lcd_Cmd
  7586                           
  7587                           ;lcd.h: 161: Lcd_Cmd(0b0000);
  7588  003960  0E00               	movlw	0
  7589  003962  ECD5  F037         	call	_Lcd_Cmd
  7590                           
  7591                           ;lcd.h: 162: _delay((unsigned long)((100)*(8000000/4000000.0)));
  7592  003966  0E32               	movlw	50
  7593  003968                     u8897:
  7594  003968  FFFF               	dw	65535	; errata NOP
  7595  00396A  2EE8               	decfsz	wreg,f,c
  7596  00396C  D7FD               	bra	u8897
  7597                           
  7598                           ;lcd.h: 163: char i = 0, j = 0, k = 0;
  7599  00396E  0E00               	movlw	0
  7600  003970  0100               	movlb	0	; () banked
  7601  003972  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7602                           
  7603                           ; BSR set to: 0
  7604  003974  0E00               	movlw	0
  7605  003976  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  7606                           
  7607                           ; BSR set to: 0
  7608  003978  0E00               	movlw	0
  7609  00397A  6FB9               	movwf	criarCaracteresCGRAM@k& (0+255),b
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;lcd.h: 164: for (i = 0; i < 5; i++) {
  7613  00397C  0E00               	movlw	0
  7614  00397E  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7615  003980                     l6934:
  7616  003980  FFFF               	dw	65535	; assembler added errata NOP
  7617                           
  7618                           ; BSR set to: 0
  7619  003982  0E04               	movlw	4
  7620  003984  65BB               	cpfsgt	criarCaracteresCGRAM@i& (0+255),b
  7621  003986  D001               	goto	l647
  7622  003988  D03A               	goto	u7690
  7623  00398A                     l647:
  7624  00398A  FFFF               	dw	65535	; assembler added errata NOP
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;lcd.h: 165: if (k == 1) i = 0;
  7628                           
  7629                           ; BSR set to: 0
  7630  00398C  05B9               	decf	criarCaracteresCGRAM@k& (0+255),w,b
  7631  00398E  A4D8               	btfss	status,2,c
  7632  003990  D002               	goto	l649
  7633                           
  7634                           ; BSR set to: 0
  7635  003992  0E00               	movlw	0
  7636  003994  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7637  003996                     l649:
  7638  003996  FFFF               	dw	65535	; assembler added errata NOP
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;lcd.h: 166: for (j = 0; j < 8; j++) {
  7642  003998  0E00               	movlw	0
  7643  00399A  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  7644  00399C                     l6942:
  7645  00399C  FFFF               	dw	65535	; assembler added errata NOP
  7646                           
  7647                           ; BSR set to: 0
  7648  00399E  0E07               	movlw	7
  7649  0039A0  65BA               	cpfsgt	criarCaracteresCGRAM@j& (0+255),b
  7650  0039A2  D001               	goto	l650
  7651  0039A4  D028               	goto	u7680
  7652  0039A6                     l650:
  7653  0039A6  FFFF               	dw	65535	; assembler added errata NOP
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;lcd.h: 167: Lcd_Write_Char((k) ? character[i][j] : 0);
  7657                           
  7658                           ; BSR set to: 0
  7659  0039A8  51B9               	movf	criarCaracteresCGRAM@k& (0+255),w,b
  7660  0039AA  A4D8               	btfss	status,2,c
  7661  0039AC  D005               	goto	l653
  7662                           
  7663                           ; BSR set to: 0
  7664  0039AE  0E00               	movlw	0
  7665  0039B0  6FB8               	movwf	(_criarCaracteresCGRAM$1380+1)& (0+255),b
  7666  0039B2  0E00               	movlw	0
  7667  0039B4  6FB7               	movwf	_criarCaracteresCGRAM$1380& (0+255),b
  7668  0039B6  D018               	goto	l655
  7669  0039B8                     l653:
  7670  0039B8  FFFF               	dw	65535	; assembler added errata NOP
  7671                           
  7672                           ; BSR set to: 0
  7673                           
  7674                           ; BSR set to: 0
  7675  0039BA  51BB               	movf	criarCaracteresCGRAM@i& (0+255),w,b
  7676  0039BC  0D08               	mullw	8
  7677  0039BE  0E87               	movlw	low criarCaracteresCGRAM@character
  7678  0039C0  6F84               	movwf	??_criarCaracteresCGRAM& (0+255),b
  7679  0039C2  0E00               	movlw	high criarCaracteresCGRAM@character
  7680  0039C4  6F85               	movwf	(??_criarCaracteresCGRAM+1)& (0+255),b
  7681  0039C6  50F3               	movf	prodl,w,c
  7682  0039C8  2784               	addwf	??_criarCaracteresCGRAM& (0+255),f,b
  7683  0039CA  50F4               	movf	prodh,w,c
  7684  0039CC  2385               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),f,b
  7685  0039CE  51BA               	movf	criarCaracteresCGRAM@j& (0+255),w,b
  7686  0039D0  0D01               	mullw	1
  7687  0039D2  50F3               	movf	prodl,w,c
  7688  0039D4  2584               	addwf	??_criarCaracteresCGRAM& (0+255),w,b
  7689  0039D6  6ED9               	movwf	fsr2l,c
  7690  0039D8  50F4               	movf	prodh,w,c
  7691  0039DA  2185               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),w,b
  7692  0039DC  6EDA               	movwf	fsr2h,c
  7693  0039DE  50DF               	movf	indf2,w,c
  7694  0039E0  6F86               	movwf	(??_criarCaracteresCGRAM+2)& (0+255),b
  7695  0039E2  5186               	movf	(??_criarCaracteresCGRAM+2)& (0+255),w,b
  7696  0039E4  6FB7               	movwf	_criarCaracteresCGRAM$1380& (0+255),b
  7697  0039E6  6BB8               	clrf	(_criarCaracteresCGRAM$1380+1)& (0+255),b
  7698  0039E8                     l655:
  7699  0039E8  FFFF               	dw	65535	; assembler added errata NOP
  7700                           
  7701                           ; BSR set to: 0
  7702                           
  7703                           ; BSR set to: 0
  7704  0039EA  51B7               	movf	_criarCaracteresCGRAM$1380& (0+255),w,b
  7705  0039EC  ECE1  F039         	call	_Lcd_Write_Char
  7706  0039F0  0100               	movlb	0	; () banked
  7707  0039F2  2BBA               	incf	criarCaracteresCGRAM@j& (0+255),f,b
  7708  0039F4  D7D3               	goto	l6942
  7709  0039F6                     u7680:
  7710  0039F6  FFFF               	dw	65535	; assembler added errata NOP
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;lcd.h: 168: }
  7714                           ;lcd.h: 169: k++;
  7715                           
  7716                           ; BSR set to: 0
  7717  0039F8  2BB9               	incf	criarCaracteresCGRAM@k& (0+255),f,b
  7718  0039FA  2BBB               	incf	criarCaracteresCGRAM@i& (0+255),f,b
  7719  0039FC  D7C1               	goto	l6934
  7720  0039FE                     u7690:
  7721  0039FE  FFFF               	dw	65535	; assembler added errata NOP
  7722                           
  7723                           ; BSR set to: 0
  7724                           
  7725                           ; BSR set to: 0
  7726  003A00  0012               	return		;funcret
  7727  003A02  FFFF               	dw	65535	; errata NOP
  7728  003A04                     __end_of_criarCaracteresCGRAM:
  7729                           	opt stack 0
  7730                           tblptru	equ	0xFF8
  7731                           tblptrh	equ	0xFF7
  7732                           tblptrl	equ	0xFF6
  7733                           tablat	equ	0xFF5
  7734                           prodh	equ	0xFF4
  7735                           prodl	equ	0xFF3
  7736                           postinc0	equ	0xFEE
  7737                           wreg	equ	0xFE8
  7738                           postdec1	equ	0xFE5
  7739                           fsr1l	equ	0xFE1
  7740                           indf2	equ	0xFDF
  7741                           postinc2	equ	0xFDE
  7742                           fsr2h	equ	0xFDA
  7743                           fsr2l	equ	0xFD9
  7744                           status	equ	0xFD8
  7745                           
  7746 ;; *************** function _configurarEstacionaria *****************
  7747 ;; Defined at:
  7748 ;;		line 7 in file "tela_ESTACIONARIA.h"
  7749 ;; Parameters:    Size  Location     Type
  7750 ;;		None
  7751 ;; Auto vars:     Size  Location     Type
  7752 ;;		None
  7753 ;; Return value:  Size  Location     Type
  7754 ;;                  1    wreg      void 
  7755 ;; Registers used:
  7756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7757 ;; Tracked objects:
  7758 ;;		On entry : 0/0
  7759 ;;		On exit  : 0/0
  7760 ;;		Unchanged: 0/0
  7761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7762 ;;      Params:         0       0       0       0       0       0       0
  7763 ;;      Locals:         0       0       0       0       0       0       0
  7764 ;;      Temps:          0       0       0       0       0       0       0
  7765 ;;      Totals:         0       0       0       0       0       0       0
  7766 ;;Total ram usage:        0 bytes
  7767 ;; Hardware stack levels used:    1
  7768 ;; Hardware stack levels required when called:    9
  7769 ;; This function calls:
  7770 ;;		_blink
  7771 ;;		_btPress
  7772 ;;		_sprintf
  7773 ;;		_writeEEPROM_ext
  7774 ;; This function is called by:
  7775 ;;		_main
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           	psect	text20
  7780  002A60                     __ptext20:
  7781                           	opt stack 0
  7782  002A60                     _configurarEstacionaria:
  7783                           	opt stack 0
  7784  002A60  FFFF               	dw	65535	; assembler added errata NOP
  7785                           
  7786                           ;tela_ESTACIONARIA.h: 9: sprintf(line1, "Configuracao tempo");
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;incstack = 0
  7790  002A62  0E7B               	movlw	low _line1
  7791  002A64  0100               	movlb	0	; () banked
  7792  002A66  6FA1               	movwf	sprintf@wh& (0+255),b
  7793  002A68  0E01               	movlw	high _line1
  7794  002A6A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7795  002A6C  0E44               	movlw	low STR_93
  7796  002A6E  6FA3               	movwf	sprintf@f& (0+255),b
  7797  002A70  0E7D               	movlw	high STR_93
  7798  002A72  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7799  002A74  EC89  F03A         	call	_sprintf	;wreg free
  7800                           
  7801                           ;tela_ESTACIONARIA.h: 10: sprintf(line2, "Max. PARTIDA:");
  7802  002A78  0E66               	movlw	low _line2
  7803  002A7A  0100               	movlb	0	; () banked
  7804  002A7C  6FA1               	movwf	sprintf@wh& (0+255),b
  7805  002A7E  0E01               	movlw	high _line2
  7806  002A80  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7807  002A82  0EA1               	movlw	low STR_94
  7808  002A84  6FA3               	movwf	sprintf@f& (0+255),b
  7809  002A86  0E7E               	movlw	high STR_94
  7810  002A88  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7811  002A8A  EC89  F03A         	call	_sprintf	;wreg free
  7812                           
  7813                           ;tela_ESTACIONARIA.h: 11: sprintf(&line2[16], "%3ds", tempo_limite_estacionaria);
  7814  002A8E  0E76               	movlw	low (_line2+16)
  7815  002A90  0100               	movlb	0	; () banked
  7816  002A92  6FA1               	movwf	sprintf@wh& (0+255),b
  7817  002A94  0E01               	movlw	high (_line2+16)
  7818  002A96  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7819  002A98  0EEC               	movlw	low STR_95
  7820  002A9A  6FA3               	movwf	sprintf@f& (0+255),b
  7821  002A9C  0E7F               	movlw	high STR_95
  7822  002A9E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7823  002AA0  C0E6  F0A5         	movff	_tempo_limite_estacionaria,?_sprintf+4
  7824  002AA4  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7825  002AA6  EC89  F03A         	call	_sprintf	;wreg free
  7826                           
  7827                           ;tela_ESTACIONARIA.h: 12: sprintf(line3, "Max. TESTE:");
  7828  002AAA  0E51               	movlw	low _line3
  7829  002AAC  0100               	movlb	0	; () banked
  7830  002AAE  6FA1               	movwf	sprintf@wh& (0+255),b
  7831  002AB0  0E01               	movlw	high _line3
  7832  002AB2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7833  002AB4  0EF0               	movlw	low STR_96
  7834  002AB6  6FA3               	movwf	sprintf@f& (0+255),b
  7835  002AB8  0E7E               	movlw	high STR_96
  7836  002ABA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7837  002ABC  EC89  F03A         	call	_sprintf	;wreg free
  7838                           
  7839                           ;tela_ESTACIONARIA.h: 13: sprintf(&line3[16], "%3ds", tempo_limite_teste_estacionaria);
  7840  002AC0  0E61               	movlw	low (_line3+16)
  7841  002AC2  0100               	movlb	0	; () banked
  7842  002AC4  6FA1               	movwf	sprintf@wh& (0+255),b
  7843  002AC6  0E01               	movlw	high (_line3+16)
  7844  002AC8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7845  002ACA  0EEC               	movlw	low STR_95
  7846  002ACC  6FA3               	movwf	sprintf@f& (0+255),b
  7847  002ACE  0E7F               	movlw	high STR_95
  7848  002AD0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7849  002AD2  C0E5  F0A5         	movff	_tempo_limite_teste_estacionaria,?_sprintf+4
  7850  002AD6  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7851  002AD8  EC89  F03A         	call	_sprintf	;wreg free
  7852                           
  7853                           ;tela_ESTACIONARIA.h: 14: sprintf(line4, "#horimetro:%5d min", horimetro);
  7854  002ADC  0E3C               	movlw	low _line4
  7855  002ADE  0100               	movlb	0	; () banked
  7856  002AE0  6FA1               	movwf	sprintf@wh& (0+255),b
  7857  002AE2  0E01               	movlw	high _line4
  7858  002AE4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7859  002AE6  0E1E               	movlw	low STR_98
  7860  002AE8  6FA3               	movwf	sprintf@f& (0+255),b
  7861  002AEA  0E7D               	movlw	high STR_98
  7862  002AEC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7863  002AEE  C04F  F0A5         	movff	_horimetro,?_sprintf+4
  7864  002AF2  C050  F0A6         	movff	_horimetro+1,?_sprintf+5
  7865  002AF6  EC89  F03A         	call	_sprintf	;wreg free
  7866                           
  7867                           ;tela_ESTACIONARIA.h: 16: if (btPress(4)) {
  7868  002AFA  0E04               	movlw	4
  7869  002AFC  EC43  F03C         	call	_btPress
  7870  002B00  0900               	iorlw	0
  7871  002B02  B4D8               	btfsc	status,2,c
  7872  002B04  D002               	goto	l829
  7873                           
  7874                           ;tela_ESTACIONARIA.h: 17: option_posi++;
  7875  002B06  0100               	movlb	0	; () banked
  7876  002B08  2BE0               	incf	_option_posi& (0+255),f,b
  7877  002B0A                     l829:
  7878  002B0A  FFFF               	dw	65535	; assembler added errata NOP
  7879                           
  7880                           ;tela_ESTACIONARIA.h: 18: }
  7881                           ;tela_ESTACIONARIA.h: 19: if (btPress(1)) {
  7882                           
  7883                           ; BSR set to: 0
  7884  002B0C  0E01               	movlw	1
  7885  002B0E  EC43  F03C         	call	_btPress
  7886  002B12  0900               	iorlw	0
  7887  002B14  B4D8               	btfsc	status,2,c
  7888  002B16  D04E               	goto	l831
  7889                           
  7890                           ;tela_ESTACIONARIA.h: 20: writeEEPROM_ext(7, tempo_limite_estacionaria);
  7891  002B18  C0E6  F08C         	movff	_tempo_limite_estacionaria,writeEEPROM_ext@data
  7892  002B1C  0E07               	movlw	7
  7893  002B1E  EC66  F03A         	call	_writeEEPROM_ext
  7894                           
  7895                           ;tela_ESTACIONARIA.h: 21: writeEEPROM_ext(13, tempo_limite_teste_estacionaria);
  7896  002B22  C0E5  F08C         	movff	_tempo_limite_teste_estacionaria,writeEEPROM_ext@data
  7897  002B26  0E0D               	movlw	13
  7898  002B28  EC66  F03A         	call	_writeEEPROM_ext
  7899                           
  7900                           ;tela_ESTACIONARIA.h: 22: option_posi = 0;
  7901  002B2C  0E00               	movlw	0
  7902  002B2E  0100               	movlb	0	; () banked
  7903  002B30  6FE0               	movwf	_option_posi& (0+255),b
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;tela_ESTACIONARIA.h: 23: menu_posi = _menu_posi;
  7907  002B32  C0DE  F0DF         	movff	__menu_posi,_menu_posi
  7908                           
  7909                           ; BSR set to: 0
  7910                           ;tela_ESTACIONARIA.h: 24: }
  7911                           ;tela_ESTACIONARIA.h: 25: switch (option_posi) {
  7912  002B36  D03E               	goto	l831
  7913  002B38  FFFF               	dw	65535	; assembler added errata NOP
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;tela_ESTACIONARIA.h: 27: blink(line2, 16,20 );
  7917                           
  7918                           ; BSR set to: 0
  7919  002B3A  0E66               	movlw	low _line2
  7920  002B3C  6F80               	movwf	blink@line& (0+255),b
  7921  002B3E  0E01               	movlw	high _line2
  7922  002B40  6F81               	movwf	(blink@line+1)& (0+255),b
  7923  002B42  0E10               	movlw	16
  7924  002B44  6F82               	movwf	blink@start& (0+255),b
  7925  002B46  0E14               	movlw	20
  7926  002B48  6F83               	movwf	blink@end& (0+255),b
  7927  002B4A  ECA2  F039         	call	_blink	;wreg free
  7928                           
  7929                           ;tela_ESTACIONARIA.h: 28: if (btPress(3)) {
  7930  002B4E  0E03               	movlw	3
  7931  002B50  EC43  F03C         	call	_btPress
  7932  002B54  0900               	iorlw	0
  7933  002B56  B4D8               	btfsc	status,2,c
  7934  002B58  D002               	goto	l833
  7935                           
  7936                           ;tela_ESTACIONARIA.h: 29: tempo_limite_estacionaria++;
  7937  002B5A  0100               	movlb	0	; () banked
  7938  002B5C  2BE6               	incf	_tempo_limite_estacionaria& (0+255),f,b
  7939  002B5E                     l833:
  7940  002B5E  FFFF               	dw	65535	; assembler added errata NOP
  7941                           
  7942                           ;tela_ESTACIONARIA.h: 30: }
  7943                           ;tela_ESTACIONARIA.h: 31: if (btPress(2)) {
  7944                           
  7945                           ; BSR set to: 0
  7946  002B60  0E02               	movlw	2
  7947  002B62  EC43  F03C         	call	_btPress
  7948  002B66  0900               	iorlw	0
  7949  002B68  B4D8               	btfsc	status,2,c
  7950  002B6A  D02E               	goto	l835
  7951                           
  7952                           ;tela_ESTACIONARIA.h: 32: tempo_limite_estacionaria--;
  7953  002B6C  0100               	movlb	0	; () banked
  7954  002B6E  07E6               	decf	_tempo_limite_estacionaria& (0+255),f,b
  7955                           
  7956                           ; BSR set to: 0
  7957                           ;tela_ESTACIONARIA.h: 33: }
  7958                           ;tela_ESTACIONARIA.h: 34: break;
  7959  002B70  D02B               	goto	l835
  7960  002B72  FFFF               	dw	65535	; assembler added errata NOP
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;tela_ESTACIONARIA.h: 36: blink(line3, 16,20 );
  7964                           
  7965                           ; BSR set to: 0
  7966  002B74  0E51               	movlw	low _line3
  7967  002B76  6F80               	movwf	blink@line& (0+255),b
  7968  002B78  0E01               	movlw	high _line3
  7969  002B7A  6F81               	movwf	(blink@line+1)& (0+255),b
  7970  002B7C  0E10               	movlw	16
  7971  002B7E  6F82               	movwf	blink@start& (0+255),b
  7972  002B80  0E14               	movlw	20
  7973  002B82  6F83               	movwf	blink@end& (0+255),b
  7974  002B84  ECA2  F039         	call	_blink	;wreg free
  7975                           
  7976                           ;tela_ESTACIONARIA.h: 37: if (btPress(3)) {
  7977  002B88  0E03               	movlw	3
  7978  002B8A  EC43  F03C         	call	_btPress
  7979  002B8E  0900               	iorlw	0
  7980  002B90  B4D8               	btfsc	status,2,c
  7981  002B92  D002               	goto	l837
  7982                           
  7983                           ;tela_ESTACIONARIA.h: 38: tempo_limite_teste_estacionaria++;
  7984  002B94  0100               	movlb	0	; () banked
  7985  002B96  2BE5               	incf	_tempo_limite_teste_estacionaria& (0+255),f,b
  7986  002B98                     l837:
  7987  002B98  FFFF               	dw	65535	; assembler added errata NOP
  7988                           
  7989                           ;tela_ESTACIONARIA.h: 39: }
  7990                           ;tela_ESTACIONARIA.h: 40: if (btPress(2)) {
  7991                           
  7992                           ; BSR set to: 0
  7993  002B9A  0E02               	movlw	2
  7994  002B9C  EC43  F03C         	call	_btPress
  7995  002BA0  0900               	iorlw	0
  7996  002BA2  B4D8               	btfsc	status,2,c
  7997  002BA4  D011               	goto	l835
  7998                           
  7999                           ;tela_ESTACIONARIA.h: 41: tempo_limite_teste_estacionaria--;
  8000  002BA6  0100               	movlb	0	; () banked
  8001  002BA8  07E5               	decf	_tempo_limite_teste_estacionaria& (0+255),f,b
  8002                           
  8003                           ; BSR set to: 0
  8004                           ;tela_ESTACIONARIA.h: 42: }
  8005                           ;tela_ESTACIONARIA.h: 43: break;
  8006  002BAA  D00E               	goto	l835
  8007  002BAC  FFFF               	dw	65535	; assembler added errata NOP
  8008                           
  8009                           ; BSR set to: 0
  8010                           
  8011                           ; BSR set to: 0
  8012  002BAE  0E00               	movlw	0
  8013  002BB0  6FE0               	movwf	_option_posi& (0+255),b
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;tela_ESTACIONARIA.h: 46: }
  8017                           
  8018                           ;tela_ESTACIONARIA.h: 45: break;
  8019  002BB2  D00A               	goto	l835
  8020  002BB4                     l831:
  8021  002BB4  FFFF               	dw	65535	; assembler added errata NOP
  8022                           
  8023                           ; BSR set to: 0
  8024  002BB6  0100               	movlb	0	; () banked
  8025  002BB8  51E0               	movf	_option_posi& (0+255),w,b
  8026                           
  8027                           ; Switch size 1, requested type "space"
  8028                           ; Number of cases is 2, Range of values is 0 to 1
  8029                           ; switch strategies available:
  8030                           ; Name         Instructions Cycles
  8031                           ; simple_byte            7     4 (average)
  8032                           ;	Chosen strategy is simple_byte
  8033  002BBA  0A00               	xorlw	0	; case 0
  8034  002BBC  B4D8               	btfsc	status,2,c
  8035  002BBE  D7BC               	goto	l832
  8036  002BC0  0A01               	xorlw	1	; case 1
  8037  002BC2  B4D8               	btfsc	status,2,c
  8038  002BC4  D7D6               	goto	l836
  8039  002BC6  D7F2               	goto	l839
  8040  002BC8                     l835:
  8041  002BC8  FFFF               	dw	65535	; assembler added errata NOP
  8042                           
  8043                           ; BSR set to: 0
  8044  002BCA  0012               	return		;funcret
  8045  002BCC  FFFF               	dw	65535	; errata NOP
  8046  002BCE                     __end_of_configurarEstacionaria:
  8047                           	opt stack 0
  8048                           tblptru	equ	0xFF8
  8049                           tblptrh	equ	0xFF7
  8050                           tblptrl	equ	0xFF6
  8051                           tablat	equ	0xFF5
  8052                           prodh	equ	0xFF4
  8053                           prodl	equ	0xFF3
  8054                           postinc0	equ	0xFEE
  8055                           wreg	equ	0xFE8
  8056                           postdec1	equ	0xFE5
  8057                           fsr1l	equ	0xFE1
  8058                           indf2	equ	0xFDF
  8059                           postinc2	equ	0xFDE
  8060                           fsr2h	equ	0xFDA
  8061                           fsr2l	equ	0xFD9
  8062                           status	equ	0xFD8
  8063                           
  8064 ;; *************** function _configuraTelefones *****************
  8065 ;; Defined at:
  8066 ;;		line 9 in file "tela_TELEFONES.h"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;		None
  8069 ;; Auto vars:     Size  Location     Type
  8070 ;;  i               1   67[BANK0 ] unsigned char 
  8071 ;; Return value:  Size  Location     Type
  8072 ;;                  1    wreg      void 
  8073 ;; Registers used:
  8074 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8075 ;; Tracked objects:
  8076 ;;		On entry : 0/0
  8077 ;;		On exit  : 0/0
  8078 ;;		Unchanged: 0/0
  8079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8080 ;;      Params:         0       0       0       0       0       0       0
  8081 ;;      Locals:         0       3       0       0       0       0       0
  8082 ;;      Temps:          0       2       0       0       0       0       0
  8083 ;;      Totals:         0       5       0       0       0       0       0
  8084 ;;Total ram usage:        5 bytes
  8085 ;; Hardware stack levels used:    1
  8086 ;; Hardware stack levels required when called:   10
  8087 ;; This function calls:
  8088 ;;		_blink
  8089 ;;		_btPress
  8090 ;;		_comunicarTeste
  8091 ;;		_sprintf
  8092 ;;		_writeEEPROM_ext
  8093 ;; This function is called by:
  8094 ;;		_main
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           	psect	text21
  8099  0011C4                     __ptext21:
  8100                           	opt stack 0
  8101  0011C4                     _configuraTelefones:
  8102                           	opt stack 0
  8103  0011C4  FFFF               	dw	65535	; assembler added errata NOP
  8104                           
  8105                           ;tela_TELEFONES.h: 10: sprintf(&line1[1], "T1: %s", tel1);
  8106                           
  8107                           ;incstack = 0
  8108  0011C6  0E7C               	movlw	low (_line1+1)
  8109  0011C8  0100               	movlb	0	; () banked
  8110  0011CA  6FA1               	movwf	sprintf@wh& (0+255),b
  8111  0011CC  0E01               	movlw	high (_line1+1)
  8112  0011CE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8113  0011D0  0EB7               	movlw	low STR_88
  8114  0011D2  6FA3               	movwf	sprintf@f& (0+255),b
  8115  0011D4  0E7F               	movlw	high STR_88
  8116  0011D6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8117  0011D8  0EB0               	movlw	low _tel1
  8118  0011DA  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8119  0011DC  0E01               	movlw	high _tel1
  8120  0011DE  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8121  0011E0  EC89  F03A         	call	_sprintf	;wreg free
  8122                           
  8123                           ;tela_TELEFONES.h: 11: sprintf(&line2[1], "T2: %s", tel2);
  8124  0011E4  0E67               	movlw	low (_line2+1)
  8125  0011E6  0100               	movlb	0	; () banked
  8126  0011E8  6FA1               	movwf	sprintf@wh& (0+255),b
  8127  0011EA  0E01               	movlw	high (_line2+1)
  8128  0011EC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8129  0011EE  0EBE               	movlw	low STR_89
  8130  0011F0  6FA3               	movwf	sprintf@f& (0+255),b
  8131  0011F2  0E7F               	movlw	high STR_89
  8132  0011F4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8133  0011F6  0EA4               	movlw	low _tel2
  8134  0011F8  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8135  0011FA  0E01               	movlw	high _tel2
  8136  0011FC  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8137  0011FE  EC89  F03A         	call	_sprintf	;wreg free
  8138                           
  8139                           ;tela_TELEFONES.h: 12: sprintf(&line3[1], "%s", gsmOcupado ? " aguarde... " : "Enviar sm
      +                          s teste");
  8140  001202  0100               	movlb	0	; () banked
  8141  001204  51F4               	movf	_gsmOcupado& (0+255),w,b
  8142  001206  A4D8               	btfss	status,2,c
  8143  001208  D004               	goto	l787
  8144                           
  8145                           ; BSR set to: 0
  8146  00120A  0EE7               	movlw	low STR_92
  8147  00120C  6FC1               	movwf	_configuraTelefones$1457& (0+255),b
  8148  00120E  0E7D               	movlw	high STR_92
  8149  001210  D004               	goto	L16
  8150  001212                     l787:
  8151  001212  FFFF               	dw	65535	; assembler added errata NOP
  8152                           
  8153                           ; BSR set to: 0
  8154                           
  8155                           ; BSR set to: 0
  8156  001214  0ECB               	movlw	low STR_91
  8157  001216  6FC1               	movwf	_configuraTelefones$1457& (0+255),b
  8158  001218  0E7E               	movlw	high STR_91
  8159  00121A                     L16:
  8160  00121A  FFFF               	dw	65535	; assembler added errata NOP
  8161  00121C  6FC2               	movwf	(_configuraTelefones$1457+1)& (0+255),b
  8162                           
  8163                           ; BSR set to: 0
  8164                           
  8165                           ; BSR set to: 0
  8166  00121E  0E52               	movlw	low (_line3+1)
  8167  001220  6FA1               	movwf	sprintf@wh& (0+255),b
  8168  001222  0E01               	movlw	high (_line3+1)
  8169  001224  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8170  001226  0E11               	movlw	low (STR_86+9)
  8171  001228  6FA3               	movwf	sprintf@f& (0+255),b
  8172  00122A  0E7F               	movlw	high (STR_86+9)
  8173  00122C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8174  00122E  C0C1  F0A5         	movff	_configuraTelefones$1457,?_sprintf+4
  8175  001232  C0C2  F0A6         	movff	_configuraTelefones$1457+1,?_sprintf+5
  8176  001236  EC89  F03A         	call	_sprintf	;wreg free
  8177                           
  8178                           ;tela_TELEFONES.h: 14: if (ajust_tel == 0) {
  8179  00123A  0100               	movlb	0	; () banked
  8180  00123C  51DC               	movf	_ajust_tel& (0+255),w,b
  8181  00123E  A4D8               	btfss	status,2,c
  8182  001240  D050               	goto	l795
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;tela_TELEFONES.h: 15: if (btPress(3)) {
  8186  001242  0E03               	movlw	3
  8187  001244  EC43  F03C         	call	_btPress
  8188  001248  0900               	iorlw	0
  8189  00124A  B4D8               	btfsc	status,2,c
  8190  00124C  D003               	goto	l791
  8191                           
  8192                           ;tela_TELEFONES.h: 16: option_posi--;
  8193  00124E  0100               	movlb	0	; () banked
  8194  001250  07E0               	decf	_option_posi& (0+255),f,b
  8195                           
  8196                           ;tela_TELEFONES.h: 17: } else if (btPress(2)) {
  8197  001252  D047               	goto	l795
  8198  001254                     l791:
  8199  001254  FFFF               	dw	65535	; assembler added errata NOP
  8200                           
  8201                           ; BSR set to: 0
  8202  001256  0E02               	movlw	2
  8203  001258  EC43  F03C         	call	_btPress
  8204  00125C  0900               	iorlw	0
  8205  00125E  B4D8               	btfsc	status,2,c
  8206  001260  D003               	goto	l793
  8207                           
  8208                           ;tela_TELEFONES.h: 18: option_posi++;
  8209  001262  0100               	movlb	0	; () banked
  8210  001264  2BE0               	incf	_option_posi& (0+255),f,b
  8211                           
  8212                           ;tela_TELEFONES.h: 19: } else if (btPress(1)) {
  8213  001266  D03D               	goto	l795
  8214  001268                     l793:
  8215  001268  FFFF               	dw	65535	; assembler added errata NOP
  8216                           
  8217                           ; BSR set to: 0
  8218  00126A  0E01               	movlw	1
  8219  00126C  EC43  F03C         	call	_btPress
  8220  001270  0900               	iorlw	0
  8221  001272  B4D8               	btfsc	status,2,c
  8222  001274  D036               	goto	l795
  8223                           
  8224                           ;tela_TELEFONES.h: 20: gsmOcupado = 0;
  8225  001276  0E00               	movlw	0
  8226  001278  0100               	movlb	0	; () banked
  8227  00127A  6FF4               	movwf	_gsmOcupado& (0+255),b
  8228                           
  8229                           ;tela_TELEFONES.h: 21: option_posi = 0;
  8230  00127C  0E00               	movlw	0
  8231  00127E  6FE0               	movwf	_option_posi& (0+255),b
  8232                           
  8233                           ;tela_TELEFONES.h: 22: tel_posi = 0;
  8234  001280  0E00               	movlw	0
  8235  001282  6FDD               	movwf	_tel_posi& (0+255),b
  8236                           
  8237                           ;tela_TELEFONES.h: 23: ajust_tel = 0;
  8238  001284  0E00               	movlw	0
  8239  001286  6FDC               	movwf	_ajust_tel& (0+255),b
  8240                           
  8241                           ;tela_TELEFONES.h: 24: char i = 0;
  8242  001288  0E00               	movlw	0
  8243  00128A  6FC3               	movwf	configuraTelefones@i& (0+255),b
  8244                           
  8245                           ;tela_TELEFONES.h: 25: for (i = 0; i < 11; i++) {
  8246  00128C  0E00               	movlw	0
  8247  00128E  6FC3               	movwf	configuraTelefones@i& (0+255),b
  8248  001290                     l7244:
  8249  001290  FFFF               	dw	65535	; assembler added errata NOP
  8250                           
  8251                           ; BSR set to: 0
  8252  001292  0E0A               	movlw	10
  8253  001294  65C3               	cpfsgt	configuraTelefones@i& (0+255),b
  8254  001296  D001               	goto	l796
  8255  001298  D021               	goto	u8180
  8256  00129A                     l796:
  8257  00129A  FFFF               	dw	65535	; assembler added errata NOP
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;tela_TELEFONES.h: 26: writeEEPROM_ext((20 + i), tel1[i]);
  8261                           
  8262                           ; BSR set to: 0
  8263  00129C  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8264  00129E  0D01               	mullw	1
  8265  0012A0  0EB0               	movlw	low _tel1
  8266  0012A2  24F3               	addwf	prodl,w,c
  8267  0012A4  6ED9               	movwf	fsr2l,c
  8268  0012A6  0E01               	movlw	high _tel1
  8269  0012A8  20F4               	addwfc	prodh,w,c
  8270  0012AA  6EDA               	movwf	fsr2h,c
  8271  0012AC  50DF               	movf	indf2,w,c
  8272  0012AE  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8273  0012B0  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8274  0012B2  0F14               	addlw	20
  8275  0012B4  EC66  F03A         	call	_writeEEPROM_ext
  8276                           
  8277                           ;tela_TELEFONES.h: 27: writeEEPROM_ext((40 + i), tel2[i]);
  8278  0012B8  0100               	movlb	0	; () banked
  8279  0012BA  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8280  0012BC  0D01               	mullw	1
  8281  0012BE  0EA4               	movlw	low _tel2
  8282  0012C0  24F3               	addwf	prodl,w,c
  8283  0012C2  6ED9               	movwf	fsr2l,c
  8284  0012C4  0E01               	movlw	high _tel2
  8285  0012C6  20F4               	addwfc	prodh,w,c
  8286  0012C8  6EDA               	movwf	fsr2h,c
  8287  0012CA  50DF               	movf	indf2,w,c
  8288  0012CC  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8289  0012CE  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8290  0012D0  0F28               	addlw	40
  8291  0012D2  EC66  F03A         	call	_writeEEPROM_ext
  8292  0012D6  0100               	movlb	0	; () banked
  8293  0012D8  2BC3               	incf	configuraTelefones@i& (0+255),f,b
  8294  0012DA  D7DA               	goto	l7244
  8295  0012DC                     u8180:
  8296  0012DC  FFFF               	dw	65535	; assembler added errata NOP
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;tela_TELEFONES.h: 28: }
  8300                           ;tela_TELEFONES.h: 29: menu_posi = _menu_posi;
  8301  0012DE  C0DE  F0DF         	movff	__menu_posi,_menu_posi
  8302  0012E2                     l795:
  8303  0012E2  FFFF               	dw	65535	; assembler added errata NOP
  8304                           
  8305                           ;tela_TELEFONES.h: 30: }
  8306                           ;tela_TELEFONES.h: 31: }
  8307                           ;tela_TELEFONES.h: 32: if (ajust_tel == 1) {
  8308                           
  8309                           ; BSR set to: 0
  8310                           
  8311                           ; BSR set to: 0
  8312                           
  8313                           ; BSR set to: 0
  8314                           
  8315                           ; BSR set to: 0
  8316  0012E4  0100               	movlb	0	; () banked
  8317  0012E6  05DC               	decf	_ajust_tel& (0+255),w,b
  8318  0012E8  A4D8               	btfss	status,2,c
  8319  0012EA  D11A               	goto	l802
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;tela_TELEFONES.h: 33: if (btPress(4)) {
  8323  0012EC  0E04               	movlw	4
  8324  0012EE  EC43  F03C         	call	_btPress
  8325  0012F2  0900               	iorlw	0
  8326  0012F4  B4D8               	btfsc	status,2,c
  8327  0012F6  D003               	goto	l799
  8328                           
  8329                           ;tela_TELEFONES.h: 34: tel_posi++;
  8330  0012F8  0100               	movlb	0	; () banked
  8331  0012FA  2BDD               	incf	_tel_posi& (0+255),f,b
  8332                           
  8333                           ;tela_TELEFONES.h: 35: } else if (btPress(1)) {
  8334  0012FC  D111               	goto	l802
  8335  0012FE                     l799:
  8336  0012FE  FFFF               	dw	65535	; assembler added errata NOP
  8337                           
  8338                           ; BSR set to: 0
  8339  001300  0E01               	movlw	1
  8340  001302  EC43  F03C         	call	_btPress
  8341  001306  0900               	iorlw	0
  8342  001308  B4D8               	btfsc	status,2,c
  8343  00130A  D10A               	goto	l802
  8344                           
  8345                           ;tela_TELEFONES.h: 36: tel_posi = 0;
  8346  00130C  0E00               	movlw	0
  8347  00130E  0100               	movlb	0	; () banked
  8348  001310  6FDD               	movwf	_tel_posi& (0+255),b
  8349                           
  8350                           ;tela_TELEFONES.h: 37: ajust_tel = 0;
  8351  001312  0E00               	movlw	0
  8352  001314  6FDC               	movwf	_ajust_tel& (0+255),b
  8353                           
  8354                           ; BSR set to: 0
  8355                           ;tela_TELEFONES.h: 38: }
  8356                           ;tela_TELEFONES.h: 39: }
  8357                           ;tela_TELEFONES.h: 41: switch (option_posi) {
  8358                           
  8359                           ; BSR set to: 0
  8360                           
  8361                           ; BSR set to: 0
  8362  001316  D104               	goto	l802
  8363  001318  FFFF               	dw	65535	; assembler added errata NOP
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;tela_TELEFONES.h: 43: line1[0] = '>';
  8367                           
  8368                           ; BSR set to: 0
  8369  00131A  0E3E               	movlw	62
  8370  00131C  0101               	movlb	1	; () banked
  8371  00131E  6F7B               	movwf	_line1& (0+255),b
  8372                           
  8373                           ; BSR set to: 1
  8374                           ;tela_TELEFONES.h: 44: if (btPress(4)) {
  8375  001320  0E04               	movlw	4
  8376  001322  EC43  F03C         	call	_btPress
  8377  001326  0900               	iorlw	0
  8378  001328  B4D8               	btfsc	status,2,c
  8379  00132A  D003               	goto	l804
  8380                           
  8381                           ;tela_TELEFONES.h: 45: ajust_tel = 1;
  8382  00132C  0E01               	movlw	1
  8383  00132E  0100               	movlb	0	; () banked
  8384  001330  6FDC               	movwf	_ajust_tel& (0+255),b
  8385  001332                     l804:
  8386  001332  FFFF               	dw	65535	; assembler added errata NOP
  8387                           
  8388                           ;tela_TELEFONES.h: 46: }
  8389                           ;tela_TELEFONES.h: 47: if (ajust_tel) {
  8390  001334  0100               	movlb	0	; () banked
  8391  001336  51DC               	movf	_ajust_tel& (0+255),w,b
  8392  001338  B4D8               	btfsc	status,2,c
  8393  00133A  D0FF               	goto	l812
  8394                           
  8395                           ; BSR set to: 0
  8396                           ;tela_TELEFONES.h: 48: blink(line1, (tel_posi + 6), (tel_posi + 6));
  8397  00133C  0E7B               	movlw	low _line1
  8398  00133E  6F80               	movwf	blink@line& (0+255),b
  8399  001340  0E01               	movlw	high _line1
  8400  001342  6F81               	movwf	(blink@line+1)& (0+255),b
  8401  001344  51DD               	movf	_tel_posi& (0+255),w,b
  8402  001346  0F06               	addlw	6
  8403  001348  6F82               	movwf	blink@start& (0+255),b
  8404  00134A  51DD               	movf	_tel_posi& (0+255),w,b
  8405  00134C  0F06               	addlw	6
  8406  00134E  6F83               	movwf	blink@end& (0+255),b
  8407  001350  ECA2  F039         	call	_blink	;wreg free
  8408                           
  8409                           ;tela_TELEFONES.h: 49: if ((tel_posi + 2) > sizeof (tel1)) {
  8410  001354  0100               	movlb	0	; () banked
  8411  001356  51DD               	movf	_tel_posi& (0+255),w,b
  8412  001358  6FBF               	movwf	??_configuraTelefones& (0+255),b
  8413  00135A  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
  8414  00135C  0E02               	movlw	2
  8415  00135E  27BF               	addwf	??_configuraTelefones& (0+255),f,b
  8416  001360  0E00               	movlw	0
  8417  001362  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8418  001364  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8419  001366  E104               	bnz	u8240
  8420  001368  0E0D               	movlw	13
  8421  00136A  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
  8422  00136C  A0D8               	btfss	status,0,c
  8423  00136E  D004               	goto	l806
  8424  001370                     u8240:
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;tela_TELEFONES.h: 50: tel_posi = 0;
  8428  001370  0E00               	movlw	0
  8429  001372  6FDD               	movwf	_tel_posi& (0+255),b
  8430                           
  8431                           ;tela_TELEFONES.h: 51: ajust_tel = 0;
  8432  001374  0E00               	movlw	0
  8433  001376  6FDC               	movwf	_ajust_tel& (0+255),b
  8434  001378                     l806:
  8435  001378  FFFF               	dw	65535	; assembler added errata NOP
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;tela_TELEFONES.h: 52: }
  8439                           ;tela_TELEFONES.h: 53: if (btPress(3)) {
  8440                           
  8441                           ; BSR set to: 0
  8442  00137A  0E03               	movlw	3
  8443  00137C  EC43  F03C         	call	_btPress
  8444  001380  0900               	iorlw	0
  8445  001382  B4D8               	btfsc	status,2,c
  8446  001384  D00A               	goto	l807
  8447                           
  8448                           ;tela_TELEFONES.h: 54: tel1[tel_posi]++;
  8449  001386  0100               	movlb	0	; () banked
  8450  001388  51DD               	movf	_tel_posi& (0+255),w,b
  8451  00138A  0D01               	mullw	1
  8452  00138C  0EB0               	movlw	low _tel1
  8453  00138E  24F3               	addwf	prodl,w,c
  8454  001390  6ED9               	movwf	fsr2l,c
  8455  001392  0E01               	movlw	high _tel1
  8456  001394  20F4               	addwfc	prodh,w,c
  8457  001396  6EDA               	movwf	fsr2h,c
  8458  001398  2ADF               	incf	indf2,f,c
  8459  00139A                     l807:
  8460  00139A  FFFF               	dw	65535	; assembler added errata NOP
  8461                           
  8462                           ;tela_TELEFONES.h: 55: }
  8463                           ;tela_TELEFONES.h: 56: if (btPress(2)) {
  8464                           
  8465                           ; BSR set to: 0
  8466  00139C  0E02               	movlw	2
  8467  00139E  EC43  F03C         	call	_btPress
  8468  0013A2  0900               	iorlw	0
  8469  0013A4  B4D8               	btfsc	status,2,c
  8470  0013A6  D00A               	goto	l808
  8471                           
  8472                           ;tela_TELEFONES.h: 57: tel1[tel_posi]--;
  8473  0013A8  0100               	movlb	0	; () banked
  8474  0013AA  51DD               	movf	_tel_posi& (0+255),w,b
  8475  0013AC  0D01               	mullw	1
  8476  0013AE  0EB0               	movlw	low _tel1
  8477  0013B0  24F3               	addwf	prodl,w,c
  8478  0013B2  6ED9               	movwf	fsr2l,c
  8479  0013B4  0E01               	movlw	high _tel1
  8480  0013B6  20F4               	addwfc	prodh,w,c
  8481  0013B8  6EDA               	movwf	fsr2h,c
  8482  0013BA  06DF               	decf	indf2,f,c
  8483  0013BC                     l808:
  8484  0013BC  FFFF               	dw	65535	; assembler added errata NOP
  8485                           
  8486                           ;tela_TELEFONES.h: 58: }
  8487                           ;tela_TELEFONES.h: 59: if ((tel1[tel_posi] > 57) | (tel1[tel_posi] < 48)) {
  8488  0013BE  0100               	movlb	0	; () banked
  8489  0013C0  51DD               	movf	_tel_posi& (0+255),w,b
  8490  0013C2  0D01               	mullw	1
  8491  0013C4  0EB0               	movlw	low _tel1
  8492  0013C6  24F3               	addwf	prodl,w,c
  8493  0013C8  6ED9               	movwf	fsr2l,c
  8494  0013CA  0E01               	movlw	high _tel1
  8495  0013CC  20F4               	addwfc	prodh,w,c
  8496  0013CE  6EDA               	movwf	fsr2h,c
  8497  0013D0  0E3A               	movlw	58
  8498  0013D2  60DF               	cpfslt	indf2,c
  8499  0013D4  D00B               	goto	u8280
  8500                           
  8501                           ; BSR set to: 0
  8502  0013D6  51DD               	movf	_tel_posi& (0+255),w,b
  8503  0013D8  0D01               	mullw	1
  8504  0013DA  0EB0               	movlw	low _tel1
  8505  0013DC  24F3               	addwf	prodl,w,c
  8506  0013DE  6ED9               	movwf	fsr2l,c
  8507  0013E0  0E01               	movlw	high _tel1
  8508  0013E2  20F4               	addwfc	prodh,w,c
  8509  0013E4  6EDA               	movwf	fsr2h,c
  8510  0013E6  0E30               	movlw	48
  8511  0013E8  60DF               	cpfslt	indf2,c
  8512  0013EA  D0A7               	goto	l812
  8513  0013EC                     u8280:
  8514  0013EC  FFFF               	dw	65535	; assembler added errata NOP
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;tela_TELEFONES.h: 60: tel1[tel_posi] = 48;
  8518                           
  8519                           ; BSR set to: 0
  8520  0013EE  51DD               	movf	_tel_posi& (0+255),w,b
  8521  0013F0  0D01               	mullw	1
  8522  0013F2  0EB0               	movlw	low _tel1
  8523  0013F4  24F3               	addwf	prodl,w,c
  8524  0013F6  6ED9               	movwf	fsr2l,c
  8525  0013F8  0E01               	movlw	high _tel1
  8526  0013FA  D071               	goto	L17
  8527  0013FC  FFFF               	dw	65535	; assembler added errata NOP
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;tela_TELEFONES.h: 65: line2[0] = '>';
  8531                           
  8532                           ; BSR set to: 0
  8533  0013FE  0E3E               	movlw	62
  8534  001400  0101               	movlb	1	; () banked
  8535  001402  6F66               	movwf	_line2& (0+255),b
  8536                           
  8537                           ; BSR set to: 1
  8538                           ;tela_TELEFONES.h: 66: if (btPress(4)) {
  8539  001404  0E04               	movlw	4
  8540  001406  EC43  F03C         	call	_btPress
  8541  00140A  0900               	iorlw	0
  8542  00140C  B4D8               	btfsc	status,2,c
  8543  00140E  D003               	goto	l814
  8544                           
  8545                           ;tela_TELEFONES.h: 67: ajust_tel = 1;
  8546  001410  0E01               	movlw	1
  8547  001412  0100               	movlb	0	; () banked
  8548  001414  6FDC               	movwf	_ajust_tel& (0+255),b
  8549  001416                     l814:
  8550  001416  FFFF               	dw	65535	; assembler added errata NOP
  8551                           
  8552                           ;tela_TELEFONES.h: 68: }
  8553                           ;tela_TELEFONES.h: 69: if (ajust_tel) {
  8554  001418  0100               	movlb	0	; () banked
  8555  00141A  51DC               	movf	_ajust_tel& (0+255),w,b
  8556  00141C  B4D8               	btfsc	status,2,c
  8557  00141E  D08D               	goto	l812
  8558                           
  8559                           ; BSR set to: 0
  8560                           ;tela_TELEFONES.h: 70: blink(line2, (tel_posi + 6), (tel_posi + 6));
  8561  001420  0E66               	movlw	low _line2
  8562  001422  6F80               	movwf	blink@line& (0+255),b
  8563  001424  0E01               	movlw	high _line2
  8564  001426  6F81               	movwf	(blink@line+1)& (0+255),b
  8565  001428  51DD               	movf	_tel_posi& (0+255),w,b
  8566  00142A  0F06               	addlw	6
  8567  00142C  6F82               	movwf	blink@start& (0+255),b
  8568  00142E  51DD               	movf	_tel_posi& (0+255),w,b
  8569  001430  0F06               	addlw	6
  8570  001432  6F83               	movwf	blink@end& (0+255),b
  8571  001434  ECA2  F039         	call	_blink	;wreg free
  8572                           
  8573                           ;tela_TELEFONES.h: 71: if ((tel_posi + 2) > sizeof (tel2)) {
  8574  001438  0100               	movlb	0	; () banked
  8575  00143A  51DD               	movf	_tel_posi& (0+255),w,b
  8576  00143C  6FBF               	movwf	??_configuraTelefones& (0+255),b
  8577  00143E  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
  8578  001440  0E02               	movlw	2
  8579  001442  27BF               	addwf	??_configuraTelefones& (0+255),f,b
  8580  001444  0E00               	movlw	0
  8581  001446  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8582  001448  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8583  00144A  E104               	bnz	u8310
  8584  00144C  0E0D               	movlw	13
  8585  00144E  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
  8586  001450  A0D8               	btfss	status,0,c
  8587  001452  D004               	goto	l816
  8588  001454                     u8310:
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;tela_TELEFONES.h: 72: tel_posi = 0;
  8592  001454  0E00               	movlw	0
  8593  001456  6FDD               	movwf	_tel_posi& (0+255),b
  8594                           
  8595                           ;tela_TELEFONES.h: 73: ajust_tel = 0;
  8596  001458  0E00               	movlw	0
  8597  00145A  6FDC               	movwf	_ajust_tel& (0+255),b
  8598  00145C                     l816:
  8599  00145C  FFFF               	dw	65535	; assembler added errata NOP
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;tela_TELEFONES.h: 74: }
  8603                           ;tela_TELEFONES.h: 75: if (btPress(3)) {
  8604                           
  8605                           ; BSR set to: 0
  8606  00145E  0E03               	movlw	3
  8607  001460  EC43  F03C         	call	_btPress
  8608  001464  0900               	iorlw	0
  8609  001466  B4D8               	btfsc	status,2,c
  8610  001468  D00A               	goto	l817
  8611                           
  8612                           ;tela_TELEFONES.h: 76: tel2[tel_posi]++;
  8613  00146A  0100               	movlb	0	; () banked
  8614  00146C  51DD               	movf	_tel_posi& (0+255),w,b
  8615  00146E  0D01               	mullw	1
  8616  001470  0EA4               	movlw	low _tel2
  8617  001472  24F3               	addwf	prodl,w,c
  8618  001474  6ED9               	movwf	fsr2l,c
  8619  001476  0E01               	movlw	high _tel2
  8620  001478  20F4               	addwfc	prodh,w,c
  8621  00147A  6EDA               	movwf	fsr2h,c
  8622  00147C  2ADF               	incf	indf2,f,c
  8623  00147E                     l817:
  8624  00147E  FFFF               	dw	65535	; assembler added errata NOP
  8625                           
  8626                           ;tela_TELEFONES.h: 77: }
  8627                           ;tela_TELEFONES.h: 78: if (btPress(2)) {
  8628                           
  8629                           ; BSR set to: 0
  8630  001480  0E02               	movlw	2
  8631  001482  EC43  F03C         	call	_btPress
  8632  001486  0900               	iorlw	0
  8633  001488  B4D8               	btfsc	status,2,c
  8634  00148A  D00A               	goto	l818
  8635                           
  8636                           ;tela_TELEFONES.h: 79: tel2[tel_posi]--;
  8637  00148C  0100               	movlb	0	; () banked
  8638  00148E  51DD               	movf	_tel_posi& (0+255),w,b
  8639  001490  0D01               	mullw	1
  8640  001492  0EA4               	movlw	low _tel2
  8641  001494  24F3               	addwf	prodl,w,c
  8642  001496  6ED9               	movwf	fsr2l,c
  8643  001498  0E01               	movlw	high _tel2
  8644  00149A  20F4               	addwfc	prodh,w,c
  8645  00149C  6EDA               	movwf	fsr2h,c
  8646  00149E  06DF               	decf	indf2,f,c
  8647  0014A0                     l818:
  8648  0014A0  FFFF               	dw	65535	; assembler added errata NOP
  8649                           
  8650                           ;tela_TELEFONES.h: 80: }
  8651                           ;tela_TELEFONES.h: 81: if ((tel2[tel_posi] > 57) | (tel2[tel_posi] < 48)) {
  8652  0014A2  0100               	movlb	0	; () banked
  8653  0014A4  51DD               	movf	_tel_posi& (0+255),w,b
  8654  0014A6  0D01               	mullw	1
  8655  0014A8  0EA4               	movlw	low _tel2
  8656  0014AA  24F3               	addwf	prodl,w,c
  8657  0014AC  6ED9               	movwf	fsr2l,c
  8658  0014AE  0E01               	movlw	high _tel2
  8659  0014B0  20F4               	addwfc	prodh,w,c
  8660  0014B2  6EDA               	movwf	fsr2h,c
  8661  0014B4  0E3A               	movlw	58
  8662  0014B6  60DF               	cpfslt	indf2,c
  8663  0014B8  D00B               	goto	u8350
  8664                           
  8665                           ; BSR set to: 0
  8666  0014BA  51DD               	movf	_tel_posi& (0+255),w,b
  8667  0014BC  0D01               	mullw	1
  8668  0014BE  0EA4               	movlw	low _tel2
  8669  0014C0  24F3               	addwf	prodl,w,c
  8670  0014C2  6ED9               	movwf	fsr2l,c
  8671  0014C4  0E01               	movlw	high _tel2
  8672  0014C6  20F4               	addwfc	prodh,w,c
  8673  0014C8  6EDA               	movwf	fsr2h,c
  8674  0014CA  0E30               	movlw	48
  8675  0014CC  60DF               	cpfslt	indf2,c
  8676  0014CE  D035               	goto	l812
  8677  0014D0                     u8350:
  8678  0014D0  FFFF               	dw	65535	; assembler added errata NOP
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;tela_TELEFONES.h: 82: tel2[tel_posi] = 48;
  8682                           
  8683                           ; BSR set to: 0
  8684  0014D2  51DD               	movf	_tel_posi& (0+255),w,b
  8685  0014D4  0D01               	mullw	1
  8686  0014D6  0EA4               	movlw	low _tel2
  8687  0014D8  24F3               	addwf	prodl,w,c
  8688  0014DA  6ED9               	movwf	fsr2l,c
  8689  0014DC  0E01               	movlw	high _tel2
  8690  0014DE                     L17:
  8691  0014DE  FFFF               	dw	65535	; assembler added errata NOP
  8692  0014E0  20F4               	addwfc	prodh,w,c
  8693  0014E2  6EDA               	movwf	fsr2h,c
  8694  0014E4  0E30               	movlw	48
  8695  0014E6  6EDF               	movwf	indf2,c
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;tela_TELEFONES.h: 83: }
  8699                           ;tela_TELEFONES.h: 84: }
  8700                           ;tela_TELEFONES.h: 85: break;
  8701                           
  8702                           ; BSR set to: 0
  8703  0014E8  D028               	goto	l812
  8704  0014EA  FFFF               	dw	65535	; assembler added errata NOP
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;tela_TELEFONES.h: 87: line3[0] = '>';
  8708                           
  8709                           ; BSR set to: 0
  8710  0014EC  0E3E               	movlw	62
  8711  0014EE  0101               	movlb	1	; () banked
  8712  0014F0  6F51               	movwf	_line3& (0+255),b
  8713                           
  8714                           ; BSR set to: 1
  8715                           ;tela_TELEFONES.h: 88: if (btPress(4) && intensidadeSinal != 'x' && !gsmOcupado) {
  8716  0014F2  0E04               	movlw	4
  8717  0014F4  EC43  F03C         	call	_btPress
  8718  0014F8  0900               	iorlw	0
  8719  0014FA  B4D8               	btfsc	status,2,c
  8720  0014FC  D01E               	goto	l812
  8721  0014FE  0E78               	movlw	120
  8722  001500  0100               	movlb	0	; () banked
  8723  001502  19FF               	xorwf	_intensidadeSinal& (0+255),w,b
  8724  001504  B4D8               	btfsc	status,2,c
  8725  001506  D019               	goto	l812
  8726                           
  8727                           ; BSR set to: 0
  8728  001508  51F4               	movf	_gsmOcupado& (0+255),w,b
  8729  00150A  A4D8               	btfss	status,2,c
  8730  00150C  D016               	goto	l812
  8731                           
  8732                           ; BSR set to: 0
  8733                           ;tela_TELEFONES.h: 89: gsmOcupado = 1;
  8734  00150E  0E01               	movlw	1
  8735  001510  6FF4               	movwf	_gsmOcupado& (0+255),b
  8736                           
  8737                           ;tela_TELEFONES.h: 90: telefoneSelecionado = 0;
  8738  001512  0E00               	movlw	0
  8739  001514  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;tela_TELEFONES.h: 91: }
  8743                           ;tela_TELEFONES.h: 92: break;
  8744  001516  D011               	goto	l812
  8745  001518  FFFF               	dw	65535	; assembler added errata NOP
  8746                           
  8747                           ; BSR set to: 0
  8748                           
  8749                           ; BSR set to: 0
  8750  00151A  0E00               	movlw	0
  8751  00151C  6FE0               	movwf	_option_posi& (0+255),b
  8752                           
  8753                           ; BSR set to: 0
  8754                           ;tela_TELEFONES.h: 96: }
  8755                           
  8756                           ;tela_TELEFONES.h: 95: break;
  8757  00151E  D00D               	goto	l812
  8758  001520                     l802:
  8759  001520  FFFF               	dw	65535	; assembler added errata NOP
  8760                           
  8761                           ; BSR set to: 0
  8762  001522  0100               	movlb	0	; () banked
  8763  001524  51E0               	movf	_option_posi& (0+255),w,b
  8764                           
  8765                           ; Switch size 1, requested type "space"
  8766                           ; Number of cases is 3, Range of values is 0 to 2
  8767                           ; switch strategies available:
  8768                           ; Name         Instructions Cycles
  8769                           ; simple_byte           10     6 (average)
  8770                           ;	Chosen strategy is simple_byte
  8771  001526  0A00               	xorlw	0	; case 0
  8772  001528  B4D8               	btfsc	status,2,c
  8773  00152A  D6F6               	goto	l803
  8774  00152C  0A01               	xorlw	1	; case 1
  8775  00152E  B4D8               	btfsc	status,2,c
  8776  001530  D765               	goto	l813
  8777  001532  0A03               	xorlw	3	; case 2
  8778  001534  B4D8               	btfsc	status,2,c
  8779  001536  D7D9               	goto	l822
  8780  001538  D7EF               	goto	l824
  8781  00153A                     l812:
  8782  00153A  FFFF               	dw	65535	; assembler added errata NOP
  8783                           
  8784                           ;tela_TELEFONES.h: 97: if (gsmOcupado) {
  8785                           
  8786                           ; BSR set to: 0
  8787  00153C  0100               	movlb	0	; () banked
  8788  00153E  51F4               	movf	_gsmOcupado& (0+255),w,b
  8789  001540  A4D8               	btfss	status,2,c
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;tela_TELEFONES.h: 98: comunicarTeste();
  8793  001542  ECC5  F010         	call	_comunicarTeste	;wreg free
  8794  001546  0012               	return		;funcret
  8795  001548  FFFF               	dw	65535	; errata NOP
  8796  00154A                     __end_of_configuraTelefones:
  8797                           	opt stack 0
  8798                           tblptru	equ	0xFF8
  8799                           tblptrh	equ	0xFF7
  8800                           tblptrl	equ	0xFF6
  8801                           tablat	equ	0xFF5
  8802                           prodh	equ	0xFF4
  8803                           prodl	equ	0xFF3
  8804                           postinc0	equ	0xFEE
  8805                           wreg	equ	0xFE8
  8806                           postdec1	equ	0xFE5
  8807                           fsr1l	equ	0xFE1
  8808                           indf2	equ	0xFDF
  8809                           postinc2	equ	0xFDE
  8810                           fsr2h	equ	0xFDA
  8811                           fsr2l	equ	0xFD9
  8812                           status	equ	0xFD8
  8813                           
  8814 ;; *************** function _comunicarTeste *****************
  8815 ;; Defined at:
  8816 ;;		line 57 in file "comunicacao.h"
  8817 ;; Parameters:    Size  Location     Type
  8818 ;;		None
  8819 ;; Auto vars:     Size  Location     Type
  8820 ;;		None
  8821 ;; Return value:  Size  Location     Type
  8822 ;;                  1    wreg      void 
  8823 ;; Registers used:
  8824 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8825 ;; Tracked objects:
  8826 ;;		On entry : 0/0
  8827 ;;		On exit  : 0/0
  8828 ;;		Unchanged: 0/0
  8829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8830 ;;      Params:         0       0       0       0       0       0       0
  8831 ;;      Locals:         0       2       0       0       0       0       0
  8832 ;;      Temps:          0       2       0       0       0       0       0
  8833 ;;      Totals:         0       4       0       0       0       0       0
  8834 ;;Total ram usage:        4 bytes
  8835 ;; Hardware stack levels used:    1
  8836 ;; Hardware stack levels required when called:    9
  8837 ;; This function calls:
  8838 ;;		_aguardaBuffer
  8839 ;;		_delay
  8840 ;;		_limparBuffer
  8841 ;;		_printf
  8842 ;;		_writeChar
  8843 ;; This function is called by:
  8844 ;;		_configuraTelefones
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           	psect	text22
  8849  00218A                     __ptext22:
  8850                           	opt stack 0
  8851  00218A                     _comunicarTeste:
  8852                           	opt stack 0
  8853  00218A  FFFF               	dw	65535	; assembler added errata NOP
  8854                           
  8855                           ;comunicacao.h: 58: switch (etapaComunicacao) {
  8856                           
  8857                           ;incstack = 0
  8858  00218C  D0D1               	goto	l315
  8859  00218E  FFFF               	dw	65535	; assembler added errata NOP
  8860                           
  8861                           ;comunicacao.h: 60: limparBuffer();
  8862  002190  EC83  F038         	call	_limparBuffer	;wreg free
  8863                           
  8864                           ;comunicacao.h: 61: printf("AT\r\n");
  8865  002194  0EDD               	movlw	low STR_4
  8866  002196  0100               	movlb	0	; () banked
  8867  002198  6FA1               	movwf	printf@f& (0+255),b
  8868  00219A  0E7F               	movlw	high STR_4
  8869  00219C  6FA2               	movwf	(printf@f+1)& (0+255),b
  8870  00219E  EC84  F039         	call	_printf	;wreg free
  8871                           
  8872                           ;comunicacao.h: 62: etapaComunicacao++;
  8873  0021A2  4A51               	infsnz	_etapaComunicacao,f,c
  8874  0021A4  2A52               	incf	_etapaComunicacao+1,f,c
  8875                           
  8876                           ;comunicacao.h: 63: timerEtapaComunicacao = 5;
  8877  0021A6  0E05               	movlw	5
  8878  0021A8  0100               	movlb	0	; () banked
  8879  0021AA  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  8880                           
  8881                           ;comunicacao.h: 64: break;
  8882  0021AC  D0DC               	goto	l317
  8883  0021AE  FFFF               	dw	65535	; assembler added errata NOP
  8884                           
  8885                           ; BSR set to: 0
  8886                           ;comunicacao.h: 66: if (aguardaBuffer("OK")) {
  8887                           
  8888                           ; BSR set to: 0
  8889  0021B0  0EF9               	movlw	low STR_5
  8890  0021B2  6F93               	movwf	aguardaBuffer@str& (0+255),b
  8891  0021B4  0E7F               	movlw	high STR_5
  8892  0021B6  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  8893  0021B8  EC66  F039         	call	_aguardaBuffer	;wreg free
  8894  0021BC  0900               	iorlw	0
  8895  0021BE  B4D8               	btfsc	status,2,c
  8896  0021C0  D00E               	goto	l319
  8897                           
  8898                           ;comunicacao.h: 67: limparBuffer();
  8899  0021C2  EC83  F038         	call	_limparBuffer	;wreg free
  8900                           
  8901                           ;comunicacao.h: 68: printf("AT+CMGF=1\r\n");
  8902  0021C6  0ED8               	movlw	low STR_10
  8903  0021C8  0100               	movlb	0	; () banked
  8904  0021CA  6FA1               	movwf	printf@f& (0+255),b
  8905  0021CC  0E7E               	movlw	high STR_10
  8906  0021CE  6FA2               	movwf	(printf@f+1)& (0+255),b
  8907  0021D0  EC84  F039         	call	_printf	;wreg free
  8908                           
  8909                           ;comunicacao.h: 69: etapaComunicacao++;
  8910  0021D4  4A51               	infsnz	_etapaComunicacao,f,c
  8911  0021D6  2A52               	incf	_etapaComunicacao+1,f,c
  8912                           
  8913                           ;comunicacao.h: 70: timerEtapaComunicacao = 5;
  8914  0021D8  0E05               	movlw	5
  8915  0021DA  0100               	movlb	0	; () banked
  8916  0021DC  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  8917  0021DE                     l319:
  8918  0021DE  FFFF               	dw	65535	; assembler added errata NOP
  8919                           
  8920                           ;comunicacao.h: 71: }
  8921                           ;comunicacao.h: 72: if (!timerEtapaComunicacao) {
  8922                           
  8923                           ; BSR set to: 0
  8924  0021E0  0100               	movlb	0	; () banked
  8925  0021E2  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  8926  0021E4  A4D8               	btfss	status,2,c
  8927  0021E6  D0BF               	goto	l317
  8928                           
  8929                           ; BSR set to: 0
  8930                           ;comunicacao.h: 73: etapaComunicacao = 0;
  8931  0021E8  0E00               	movlw	0
  8932  0021EA  6E52               	movwf	_etapaComunicacao+1,c
  8933  0021EC  0E00               	movlw	0
  8934  0021EE  6E51               	movwf	_etapaComunicacao,c
  8935                           
  8936                           ; BSR set to: 0
  8937                           ;comunicacao.h: 74: writeChar(0x1A);
  8938  0021F0  0E1A               	movlw	26
  8939  0021F2  6F80               	movwf	writeChar@hex& (0+255),b
  8940  0021F4  0E00               	movlw	0
  8941  0021F6  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  8942  0021F8  EC3A  F037         	call	_writeChar	;wreg free
  8943                           
  8944                           ;comunicacao.h: 75: }
  8945                           ;comunicacao.h: 76: break;
  8946  0021FC  D0B4               	goto	l317
  8947  0021FE  FFFF               	dw	65535	; assembler added errata NOP
  8948                           
  8949                           ;comunicacao.h: 78: if (aguardaBuffer("OK")) {
  8950  002200  0EF9               	movlw	low STR_5
  8951  002202  0100               	movlb	0	; () banked
  8952  002204  6F93               	movwf	aguardaBuffer@str& (0+255),b
  8953  002206  0E7F               	movlw	high STR_5
  8954  002208  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  8955  00220A  EC66  F039         	call	_aguardaBuffer	;wreg free
  8956  00220E  0900               	iorlw	0
  8957  002210  B4D8               	btfsc	status,2,c
  8958  002212  D083               	goto	L45
  8959                           
  8960                           ;comunicacao.h: 79: limparBuffer();
  8961  002214  EC83  F038         	call	_limparBuffer	;wreg free
  8962                           
  8963                           ;comunicacao.h: 80: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : te
      +                          l2);
  8964  002218  0100               	movlb	0	; () banked
  8965  00221A  51F7               	movf	_telefoneSelecionado& (0+255),w,b
  8966  00221C  B4D8               	btfsc	status,2,c
  8967  00221E  D004               	goto	l324
  8968                           
  8969                           ; BSR set to: 0
  8970  002220  0EA4               	movlw	low _tel2
  8971  002222  6FBD               	movwf	_comunicarTeste$1190& (0+255),b
  8972  002224  0E01               	movlw	high _tel2
  8973  002226  D004               	goto	L18
  8974  002228                     l324:
  8975  002228  FFFF               	dw	65535	; assembler added errata NOP
  8976                           
  8977                           ; BSR set to: 0
  8978                           
  8979                           ; BSR set to: 0
  8980  00222A  0EB0               	movlw	low _tel1
  8981  00222C  6FBD               	movwf	_comunicarTeste$1190& (0+255),b
  8982  00222E  0E01               	movlw	high _tel1
  8983  002230                     L18:
  8984  002230  FFFF               	dw	65535	; assembler added errata NOP
  8985  002232  6FBE               	movwf	(_comunicarTeste$1190+1)& (0+255),b
  8986                           
  8987                           ; BSR set to: 0
  8988                           
  8989                           ; BSR set to: 0
  8990  002234  0E7D               	movlw	low STR_12
  8991  002236  6FA1               	movwf	printf@f& (0+255),b
  8992  002238  0E7D               	movlw	high STR_12
  8993  00223A  6FA2               	movwf	(printf@f+1)& (0+255),b
  8994  00223C  C0BD  F0A3         	movff	_comunicarTeste$1190,?_printf+2
  8995  002240  C0BE  F0A4         	movff	_comunicarTeste$1190+1,?_printf+3
  8996  002244  EC84  F039         	call	_printf	;wreg free
  8997                           
  8998                           ;comunicacao.h: 81: timerEtapaComunicacao = 5;
  8999  002248  0E05               	movlw	5
  9000  00224A  0100               	movlb	0	; () banked
  9001  00224C  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9002                           
  9003                           ; BSR set to: 0
  9004                           ;comunicacao.h: 82: etapaComunicacao++;
  9005  00224E  4A51               	infsnz	_etapaComunicacao,f,c
  9006  002250  2A52               	incf	_etapaComunicacao+1,f,c
  9007                           
  9008                           ;comunicacao.h: 83: break;
  9009  002252  D089               	goto	l317
  9010  002254  FFFF               	dw	65535	; assembler added errata NOP
  9011                           
  9012                           ; BSR set to: 0
  9013                           ;comunicacao.h: 90: if (aguardaBuffer(">")) {
  9014                           
  9015                           ; BSR set to: 0
  9016  002256  0EFC               	movlw	low STR_13
  9017  002258  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9018  00225A  0E7F               	movlw	high STR_13
  9019  00225C  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9020  00225E  EC66  F039         	call	_aguardaBuffer	;wreg free
  9021  002262  0900               	iorlw	0
  9022  002264  B4D8               	btfsc	status,2,c
  9023  002266  D059               	goto	L45
  9024                           
  9025                           ;comunicacao.h: 91: limparBuffer();
  9026  002268  EC83  F038         	call	_limparBuffer	;wreg free
  9027                           
  9028                           ;comunicacao.h: 92: printf("TECHNOW Sistemas embarcados\r\n\r\nTeste manual de comunicac
      +                          ao.\r\nData: %02d/%02d/%02d %02d:%02d:%02d\r\n\r\n\r\nVersao do sistema: %s\r\n",
  9029                           ;comunicacao.h: 93: _dia, _mes, _ano, _hor, _min, _sec, "Aug 24 2019");
  9030  00226C  0E35               	movlw	low STR_14
  9031  00226E  0100               	movlb	0	; () banked
  9032  002270  6FA1               	movwf	printf@f& (0+255),b
  9033  002272  0E7B               	movlw	high STR_14
  9034  002274  6FA2               	movwf	(printf@f+1)& (0+255),b
  9035  002276  C0EC  F0A3         	movff	__dia,?_printf+2
  9036  00227A  6BA4               	clrf	(?_printf+3)& (0+255),b
  9037  00227C  C0EB  F0A5         	movff	__mes,?_printf+4
  9038  002280  6BA6               	clrf	(?_printf+5)& (0+255),b
  9039  002282  C0EA  F0A7         	movff	__ano,?_printf+6
  9040  002286  6BA8               	clrf	(?_printf+7)& (0+255),b
  9041  002288  C0ED  F0A9         	movff	__hor,?_printf+8
  9042  00228C  6BAA               	clrf	(?_printf+9)& (0+255),b
  9043  00228E  C0EE  F0AB         	movff	__min,?_printf+10
  9044  002292  6BAC               	clrf	(?_printf+11)& (0+255),b
  9045  002294  C0EF  F0AD         	movff	__sec,?_printf+12
  9046  002298  6BAE               	clrf	(?_printf+13)& (0+255),b
  9047  00229A  0EE4               	movlw	low STR_15
  9048  00229C  6FAF               	movwf	(?_printf+14)& (0+255),b
  9049  00229E  0E7E               	movlw	high STR_15
  9050  0022A0  6FB0               	movwf	(?_printf+15)& (0+255),b
  9051  0022A2  EC84  F039         	call	_printf	;wreg free
  9052                           
  9053                           ;comunicacao.h: 94: delay(1000);
  9054  0022A6  0E03               	movlw	3
  9055  0022A8  0100               	movlb	0	; () banked
  9056  0022AA  6F81               	movwf	(delay@x+1)& (0+255),b
  9057  0022AC  0EE8               	movlw	232
  9058  0022AE  6F80               	movwf	delay@x& (0+255),b
  9059  0022B0  EC68  F038         	call	_delay	;wreg free
  9060                           
  9061                           ;comunicacao.h: 95: writeChar(0x1A);
  9062  0022B4  0E1A               	movlw	26
  9063  0022B6  0100               	movlb	0	; () banked
  9064  0022B8  6F80               	movwf	writeChar@hex& (0+255),b
  9065  0022BA  0E00               	movlw	0
  9066  0022BC  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  9067  0022BE  EC3A  F037         	call	_writeChar	;wreg free
  9068                           
  9069                           ;comunicacao.h: 96: etapaComunicacao++;
  9070  0022C2  4A51               	infsnz	_etapaComunicacao,f,c
  9071  0022C4  2A52               	incf	_etapaComunicacao+1,f,c
  9072                           
  9073                           ;comunicacao.h: 97: timerEtapaComunicacao = 30;
  9074  0022C6  0E1E               	movlw	30
  9075  0022C8  0100               	movlb	0	; () banked
  9076  0022CA  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9077                           
  9078                           ; BSR set to: 0
  9079  0022CC  D026               	goto	L45
  9080  0022CE  FFFF               	dw	65535	; assembler added errata NOP
  9081                           
  9082                           ; BSR set to: 0
  9083                           ;comunicacao.h: 104: if (aguardaBuffer("OK")) {
  9084                           
  9085                           ; BSR set to: 0
  9086  0022D0  0EF9               	movlw	low STR_5
  9087  0022D2  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9088  0022D4  0E7F               	movlw	high STR_5
  9089  0022D6  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9090  0022D8  EC66  F039         	call	_aguardaBuffer	;wreg free
  9091  0022DC  0900               	iorlw	0
  9092  0022DE  B4D8               	btfsc	status,2,c
  9093  0022E0  D011               	goto	l332
  9094                           
  9095                           ;comunicacao.h: 105: if (telefoneSelecionado == 0) {
  9096  0022E2  0100               	movlb	0	; () banked
  9097  0022E4  51F7               	movf	_telefoneSelecionado& (0+255),w,b
  9098  0022E6  A4D8               	btfss	status,2,c
  9099  0022E8  D003               	goto	l333
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;comunicacao.h: 106: telefoneSelecionado = 1;
  9103  0022EA  0E01               	movlw	1
  9104  0022EC  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9105                           
  9106                           ;comunicacao.h: 107: } else {
  9107  0022EE  D005               	goto	l334
  9108  0022F0                     l333:
  9109  0022F0  FFFF               	dw	65535	; assembler added errata NOP
  9110                           
  9111                           ; BSR set to: 0
  9112                           ;comunicacao.h: 108: telefoneSelecionado = 0;
  9113                           
  9114                           ; BSR set to: 0
  9115  0022F2  0E00               	movlw	0
  9116  0022F4  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9117                           
  9118                           ;comunicacao.h: 109: gsmOcupado = 0;
  9119  0022F6  0E00               	movlw	0
  9120  0022F8  6FF4               	movwf	_gsmOcupado& (0+255),b
  9121  0022FA                     l334:
  9122  0022FA  FFFF               	dw	65535	; assembler added errata NOP
  9123                           
  9124                           ; BSR set to: 0
  9125                           ;comunicacao.h: 110: }
  9126                           ;comunicacao.h: 111: etapaComunicacao = 0;
  9127  0022FC  0E00               	movlw	0
  9128  0022FE  6E52               	movwf	_etapaComunicacao+1,c
  9129  002300  0E00               	movlw	0
  9130  002302  6E51               	movwf	_etapaComunicacao,c
  9131  002304                     l332:
  9132  002304  FFFF               	dw	65535	; assembler added errata NOP
  9133                           
  9134                           ;comunicacao.h: 112: }
  9135                           ;comunicacao.h: 113: if (aguardaBuffer("ERROR") || !timerEtapaComunicacao) {
  9136                           
  9137                           ; BSR set to: 0
  9138  002306  0ED7               	movlw	low STR_17
  9139  002308  0100               	movlb	0	; () banked
  9140  00230A  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9141  00230C  0E7F               	movlw	high STR_17
  9142  00230E  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9143  002310  EC66  F039         	call	_aguardaBuffer	;wreg free
  9144  002314  0900               	iorlw	0
  9145  002316  A4D8               	btfss	status,2,c
  9146  002318  D005               	goto	u5780
  9147  00231A                     L45:
  9148  00231A  FFFF               	dw	65535	; assembler added errata NOP
  9149  00231C  0100               	movlb	0	; () banked
  9150  00231E  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  9151  002320  A4D8               	btfss	status,2,c
  9152  002322  D021               	goto	l317
  9153  002324                     u5780:
  9154  002324  FFFF               	dw	65535	; assembler added errata NOP
  9155                           
  9156                           ;comunicacao.h: 118: etapaComunicacao = 0;
  9157                           
  9158                           ;comunicacao.h: 117: default:
  9159                           
  9160                           ;comunicacao.h: 115: }
  9161                           ;comunicacao.h: 116: break;
  9162                           
  9163                           ;comunicacao.h: 114: etapaComunicacao = 0;
  9164                           
  9165                           ; BSR set to: 0
  9166  002326  0E00               	movlw	0
  9167  002328  6E52               	movwf	_etapaComunicacao+1,c
  9168  00232A  0E00               	movlw	0
  9169  00232C  6E51               	movwf	_etapaComunicacao,c
  9170                           
  9171                           ;comunicacao.h: 121: }
  9172                           
  9173                           ;comunicacao.h: 119: break;
  9174  00232E  D01B               	goto	l317
  9175  002330                     l315:
  9176  002330  FFFF               	dw	65535	; assembler added errata NOP
  9177  002332  C051  F0BB         	movff	_etapaComunicacao,??_comunicarTeste
  9178  002336  C052  F0BC         	movff	_etapaComunicacao+1,??_comunicarTeste+1
  9179                           
  9180                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9181                           ; Switch size 1, requested type "space"
  9182                           ; Number of cases is 1, Range of values is 0 to 0
  9183                           ; switch strategies available:
  9184                           ; Name         Instructions Cycles
  9185                           ; simple_byte            4     3 (average)
  9186                           ;	Chosen strategy is simple_byte
  9187  00233A  0100               	movlb	0	; () banked
  9188  00233C  51BC               	movf	(??_comunicarTeste+1)& (0+255),w,b
  9189  00233E  0A00               	xorlw	0	; case 0
  9190  002340  A4D8               	btfss	status,2,c
  9191  002342  D7F0               	goto	u5780
  9192                           
  9193                           ; BSR set to: 0
  9194                           ; Switch size 1, requested type "space"
  9195                           ; Number of cases is 5, Range of values is 0 to 4
  9196                           ; switch strategies available:
  9197                           ; Name         Instructions Cycles
  9198                           ; simple_byte           16     9 (average)
  9199                           ;	Chosen strategy is simple_byte
  9200  002344  51BB               	movf	??_comunicarTeste& (0+255),w,b
  9201  002346  0A00               	xorlw	0	; case 0
  9202  002348  B4D8               	btfsc	status,2,c
  9203  00234A  D721               	goto	l316
  9204  00234C  0A01               	xorlw	1	; case 1
  9205  00234E  B4D8               	btfsc	status,2,c
  9206  002350  D72E               	goto	l318
  9207  002352  0A03               	xorlw	3	; case 2
  9208  002354  B4D8               	btfsc	status,2,c
  9209  002356  D753               	goto	l321
  9210  002358  0A01               	xorlw	1	; case 3
  9211  00235A  B4D8               	btfsc	status,2,c
  9212  00235C  D77B               	goto	l328
  9213  00235E  0A07               	xorlw	7	; case 4
  9214  002360  B4D8               	btfsc	status,2,c
  9215  002362  D7B5               	goto	l331
  9216  002364  D7DF               	goto	u5780
  9217  002366                     l317:
  9218  002366  FFFF               	dw	65535	; assembler added errata NOP
  9219                           
  9220                           ; BSR set to: 0
  9221  002368  0012               	return		;funcret
  9222  00236A  FFFF               	dw	65535	; errata NOP
  9223  00236C                     __end_of_comunicarTeste:
  9224                           	opt stack 0
  9225                           tblptru	equ	0xFF8
  9226                           tblptrh	equ	0xFF7
  9227                           tblptrl	equ	0xFF6
  9228                           tablat	equ	0xFF5
  9229                           prodh	equ	0xFF4
  9230                           prodl	equ	0xFF3
  9231                           postinc0	equ	0xFEE
  9232                           wreg	equ	0xFE8
  9233                           postdec1	equ	0xFE5
  9234                           fsr1l	equ	0xFE1
  9235                           indf2	equ	0xFDF
  9236                           postinc2	equ	0xFDE
  9237                           fsr2h	equ	0xFDA
  9238                           fsr2l	equ	0xFD9
  9239                           status	equ	0xFD8
  9240                           
  9241 ;; *************** function _configuraRegistradores *****************
  9242 ;; Defined at:
  9243 ;;		line 7 in file "registradores.h"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;		None
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;		None
  9248 ;; Return value:  Size  Location     Type
  9249 ;;                  1    wreg      void 
  9250 ;; Registers used:
  9251 ;;		wreg, status,2
  9252 ;; Tracked objects:
  9253 ;;		On entry : 0/0
  9254 ;;		On exit  : 0/0
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9257 ;;      Params:         0       0       0       0       0       0       0
  9258 ;;      Locals:         0       0       0       0       0       0       0
  9259 ;;      Temps:          0       0       0       0       0       0       0
  9260 ;;      Totals:         0       0       0       0       0       0       0
  9261 ;;Total ram usage:        0 bytes
  9262 ;; Hardware stack levels used:    1
  9263 ;; Hardware stack levels required when called:    6
  9264 ;; This function calls:
  9265 ;;		Nothing
  9266 ;; This function is called by:
  9267 ;;		_main
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           	psect	text23
  9272  007698                     __ptext23:
  9273                           	opt stack 0
  9274  007698                     _configuraRegistradores:
  9275                           	opt stack 0
  9276  007698  FFFF               	dw	65535	; assembler added errata NOP
  9277                           
  9278                           ;registradores.h: 9: ADCON0 = 0b10000001;
  9279                           
  9280                           ;incstack = 0
  9281  00769A  0E81               	movlw	129
  9282  00769C  6EC2               	movwf	4034,c	;volatile
  9283                           
  9284                           ;registradores.h: 10: ADCON1 = 0b11001110;
  9285  00769E  0ECE               	movlw	206
  9286  0076A0  6EC1               	movwf	4033,c	;volatile
  9287                           
  9288                           ;registradores.h: 11: TRISAbits.RA0 = 1;
  9289  0076A2  8092               	bsf	3986,0,c	;volatile
  9290                           
  9291                           ;registradores.h: 12: PORTAbits.AN0 = 0;
  9292  0076A4  9080               	bcf	3968,0,c	;volatile
  9293                           
  9294                           ;registradores.h: 15: T0CON = 0x81;
  9295  0076A6  0E81               	movlw	129
  9296  0076A8  6ED5               	movwf	4053,c	;volatile
  9297                           
  9298                           ;registradores.h: 16: INTCON = 0xE4;
  9299  0076AA  0EE4               	movlw	228
  9300  0076AC  6EF2               	movwf	intcon,c	;volatile
  9301                           
  9302                           ;registradores.h: 19: TRISDbits.RD5 = 0;
  9303  0076AE  9A95               	bcf	3989,5,c	;volatile
  9304                           
  9305                           ;registradores.h: 20: TRISDbits.RD4 = 0;
  9306  0076B0  9895               	bcf	3989,4,c	;volatile
  9307                           
  9308                           ;registradores.h: 21: TRISDbits.RD3 = 0;
  9309  0076B2  9695               	bcf	3989,3,c	;volatile
  9310                           
  9311                           ;registradores.h: 22: TRISDbits.RD2 = 0;
  9312  0076B4  9495               	bcf	3989,2,c	;volatile
  9313                           
  9314                           ;registradores.h: 23: TRISDbits.RD1 = 0;
  9315  0076B6  9295               	bcf	3989,1,c	;volatile
  9316                           
  9317                           ;registradores.h: 24: TRISDbits.RD0 = 0;
  9318  0076B8  9095               	bcf	3989,0,c	;volatile
  9319                           
  9320                           ;registradores.h: 27: TRISCbits.TRISC6 = 0;
  9321  0076BA  9C94               	bcf	3988,6,c	;volatile
  9322                           
  9323                           ;registradores.h: 28: TRISCbits.TRISC7 = 1;
  9324  0076BC  8E94               	bsf	3988,7,c	;volatile
  9325                           
  9326                           ;registradores.h: 29: TXSTAbits.TXEN = 1;
  9327  0076BE  8AAC               	bsf	4012,5,c	;volatile
  9328                           
  9329                           ;registradores.h: 30: TXSTAbits.BRGH = 1;
  9330  0076C0  84AC               	bsf	4012,2,c	;volatile
  9331                           
  9332                           ;registradores.h: 31: TXSTAbits.SYNC = 0;
  9333  0076C2  98AC               	bcf	4012,4,c	;volatile
  9334                           
  9335                           ;registradores.h: 32: RCSTAbits.SPEN = 1;
  9336  0076C4  8EAB               	bsf	4011,7,c	;volatile
  9337                           
  9338                           ;registradores.h: 33: RCSTAbits.CREN = 1;
  9339  0076C6  88AB               	bsf	4011,4,c	;volatile
  9340                           
  9341                           ;registradores.h: 36: SPBRG = 25;
  9342  0076C8  0E19               	movlw	25
  9343  0076CA  6EAF               	movwf	4015,c	;volatile
  9344                           
  9345                           ;registradores.h: 37: INTCONbits.GIE = 1;
  9346  0076CC  8EF2               	bsf	intcon,7,c	;volatile
  9347                           
  9348                           ;registradores.h: 38: INTCONbits.PEIE = 1;
  9349  0076CE  8CF2               	bsf	intcon,6,c	;volatile
  9350                           
  9351                           ;registradores.h: 39: PIR1bits.RCIF = 0;
  9352  0076D0  9A9E               	bcf	3998,5,c	;volatile
  9353                           
  9354                           ;registradores.h: 40: PIE1bits.RCIE = 1;
  9355  0076D2  8A9D               	bsf	3997,5,c	;volatile
  9356                           
  9357                           ;registradores.h: 43: INTCONbits.RBIE = 0;
  9358  0076D4  96F2               	bcf	intcon,3,c	;volatile
  9359                           
  9360                           ;registradores.h: 44: TRISAbits.RA2 = 1;
  9361  0076D6  8492               	bsf	3986,2,c	;volatile
  9362                           
  9363                           ;registradores.h: 45: TRISAbits.RA5 = 1;
  9364  0076D8  8A92               	bsf	3986,5,c	;volatile
  9365                           
  9366                           ;registradores.h: 46: TRISCbits.RC0 = 1;
  9367  0076DA  8094               	bsf	3988,0,c	;volatile
  9368                           
  9369                           ;registradores.h: 49: TRISBbits.RB2 = 1;
  9370  0076DC  8493               	bsf	3987,2,c	;volatile
  9371                           
  9372                           ;registradores.h: 50: TRISBbits.RB3 = 1;
  9373  0076DE  8693               	bsf	3987,3,c	;volatile
  9374                           
  9375                           ;registradores.h: 51: TRISBbits.RB4 = 1;
  9376  0076E0  8893               	bsf	3987,4,c	;volatile
  9377                           
  9378                           ;registradores.h: 52: TRISBbits.RB5 = 1;
  9379  0076E2  8A93               	bsf	3987,5,c	;volatile
  9380                           
  9381                           ;registradores.h: 55: TRISEbits.RE0 = 0;
  9382  0076E4  9096               	bcf	3990,0,c	;volatile
  9383                           
  9384                           ;registradores.h: 56: TRISEbits.RE1 = 0;
  9385  0076E6  9296               	bcf	3990,1,c	;volatile
  9386                           
  9387                           ;registradores.h: 57: TRISEbits.RE2 = 0;
  9388  0076E8  9496               	bcf	3990,2,c	;volatile
  9389  0076EA  0012               	return		;funcret
  9390  0076EC  FFFF               	dw	65535	; errata NOP
  9391  0076EE                     __end_of_configuraRegistradores:
  9392                           	opt stack 0
  9393                           tblptru	equ	0xFF8
  9394                           tblptrh	equ	0xFF7
  9395                           tblptrl	equ	0xFF6
  9396                           tablat	equ	0xFF5
  9397                           prodh	equ	0xFF4
  9398                           prodl	equ	0xFF3
  9399                           intcon	equ	0xFF2
  9400                           postinc0	equ	0xFEE
  9401                           wreg	equ	0xFE8
  9402                           postdec1	equ	0xFE5
  9403                           fsr1l	equ	0xFE1
  9404                           indf2	equ	0xFDF
  9405                           postinc2	equ	0xFDE
  9406                           fsr2h	equ	0xFDA
  9407                           fsr2l	equ	0xFD9
  9408                           status	equ	0xFD8
  9409                           
  9410 ;; *************** function _atualizarLCD *****************
  9411 ;; Defined at:
  9412 ;;		line 132 in file "lcd.h"
  9413 ;; Parameters:    Size  Location     Type
  9414 ;;  line1           2    8[BANK0 ] PTR unsigned char 
  9415 ;;		 -> line1(21), 
  9416 ;;  line2           2   10[BANK0 ] PTR unsigned char 
  9417 ;;		 -> line2(21), 
  9418 ;;  line3           2   12[BANK0 ] PTR unsigned char 
  9419 ;;		 -> line3(21), 
  9420 ;;  line4           2   14[BANK0 ] PTR unsigned char 
  9421 ;;		 -> line4(21), 
  9422 ;; Auto vars:     Size  Location     Type
  9423 ;;  i               1   16[BANK0 ] unsigned char 
  9424 ;; Return value:  Size  Location     Type
  9425 ;;                  1    wreg      void 
  9426 ;; Registers used:
  9427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9428 ;; Tracked objects:
  9429 ;;		On entry : 0/0
  9430 ;;		On exit  : 0/0
  9431 ;;		Unchanged: 0/0
  9432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9433 ;;      Params:         0       8       0       0       0       0       0
  9434 ;;      Locals:         0       1       0       0       0       0       0
  9435 ;;      Temps:          0       0       0       0       0       0       0
  9436 ;;      Totals:         0       9       0       0       0       0       0
  9437 ;;Total ram usage:        9 bytes
  9438 ;; Hardware stack levels used:    1
  9439 ;; Hardware stack levels required when called:    9
  9440 ;; This function calls:
  9441 ;;		_Lcd_Set_Cursor
  9442 ;;		_Lcd_Write_String
  9443 ;; This function is called by:
  9444 ;;		_main
  9445 ;; This function uses a non-reentrant model
  9446 ;;
  9447                           
  9448                           	psect	text24
  9449  00386C                     __ptext24:
  9450                           	opt stack 0
  9451  00386C                     _atualizarLCD:
  9452                           	opt stack 0
  9453  00386C  FFFF               	dw	65535	; assembler added errata NOP
  9454                           
  9455                           ;lcd.h: 134: Lcd_Set_Cursor(1, 1);
  9456                           
  9457                           ;incstack = 0
  9458  00386E  0E01               	movlw	1
  9459  003870  0100               	movlb	0	; () banked
  9460  003872  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9461  003874  0E01               	movlw	1
  9462  003876  EC02  F01D         	call	_Lcd_Set_Cursor
  9463                           
  9464                           ;lcd.h: 135: Lcd_Write_String(line1);
  9465  00387A  C088  F084         	movff	atualizarLCD@line1,Lcd_Write_String@a
  9466  00387E  C089  F085         	movff	atualizarLCD@line1+1,Lcd_Write_String@a+1
  9467  003882  EC2B  F039         	call	_Lcd_Write_String	;wreg free
  9468                           
  9469                           ;lcd.h: 136: Lcd_Set_Cursor(2, 1);
  9470  003886  0E01               	movlw	1
  9471  003888  0100               	movlb	0	; () banked
  9472  00388A  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9473  00388C  0E02               	movlw	2
  9474  00388E  EC02  F01D         	call	_Lcd_Set_Cursor
  9475                           
  9476                           ;lcd.h: 137: Lcd_Write_String(line2);
  9477  003892  C08A  F084         	movff	atualizarLCD@line2,Lcd_Write_String@a
  9478  003896  C08B  F085         	movff	atualizarLCD@line2+1,Lcd_Write_String@a+1
  9479  00389A  EC2B  F039         	call	_Lcd_Write_String	;wreg free
  9480                           
  9481                           ;lcd.h: 138: Lcd_Set_Cursor(3, 0);
  9482  00389E  0E00               	movlw	0
  9483  0038A0  0100               	movlb	0	; () banked
  9484  0038A2  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9485  0038A4  0E03               	movlw	3
  9486  0038A6  EC02  F01D         	call	_Lcd_Set_Cursor
  9487                           
  9488                           ;lcd.h: 139: Lcd_Write_String(line3);
  9489  0038AA  C08C  F084         	movff	atualizarLCD@line3,Lcd_Write_String@a
  9490  0038AE  C08D  F085         	movff	atualizarLCD@line3+1,Lcd_Write_String@a+1
  9491  0038B2  EC2B  F039         	call	_Lcd_Write_String	;wreg free
  9492                           
  9493                           ;lcd.h: 140: Lcd_Set_Cursor(4, 0);
  9494  0038B6  0E00               	movlw	0
  9495  0038B8  0100               	movlb	0	; () banked
  9496  0038BA  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9497  0038BC  0E04               	movlw	4
  9498  0038BE  EC02  F01D         	call	_Lcd_Set_Cursor
  9499                           
  9500                           ;lcd.h: 141: Lcd_Write_String(line4);
  9501  0038C2  C08E  F084         	movff	atualizarLCD@line4,Lcd_Write_String@a
  9502  0038C6  C08F  F085         	movff	atualizarLCD@line4+1,Lcd_Write_String@a+1
  9503  0038CA  EC2B  F039         	call	_Lcd_Write_String	;wreg free
  9504                           
  9505                           ;lcd.h: 143: char i = 0;
  9506  0038CE  0E00               	movlw	0
  9507  0038D0  0100               	movlb	0	; () banked
  9508  0038D2  6F90               	movwf	atualizarLCD@i& (0+255),b
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;lcd.h: 144: for (i = 0; i < 20; i++) {
  9512  0038D4  0E00               	movlw	0
  9513  0038D6  6F90               	movwf	atualizarLCD@i& (0+255),b
  9514  0038D8                     l6908:
  9515  0038D8  FFFF               	dw	65535	; assembler added errata NOP
  9516                           
  9517                           ; BSR set to: 0
  9518  0038DA  0E13               	movlw	19
  9519  0038DC  6590               	cpfsgt	atualizarLCD@i& (0+255),b
  9520  0038DE  D001               	goto	l640
  9521  0038E0  D02B               	goto	u7620
  9522  0038E2                     l640:
  9523  0038E2  FFFF               	dw	65535	; assembler added errata NOP
  9524                           
  9525                           ; BSR set to: 0
  9526                           ;lcd.h: 145: line1[i] = ' ';
  9527                           
  9528                           ; BSR set to: 0
  9529  0038E4  5190               	movf	atualizarLCD@i& (0+255),w,b
  9530  0038E6  0D01               	mullw	1
  9531  0038E8  50F3               	movf	prodl,w,c
  9532  0038EA  2588               	addwf	atualizarLCD@line1& (0+255),w,b
  9533  0038EC  6ED9               	movwf	fsr2l,c
  9534  0038EE  50F4               	movf	prodh,w,c
  9535  0038F0  2189               	addwfc	(atualizarLCD@line1+1)& (0+255),w,b
  9536  0038F2  6EDA               	movwf	fsr2h,c
  9537  0038F4  0E20               	movlw	32
  9538  0038F6  6EDF               	movwf	indf2,c
  9539                           
  9540                           ;lcd.h: 146: line2[i] = ' ';
  9541  0038F8  5190               	movf	atualizarLCD@i& (0+255),w,b
  9542  0038FA  0D01               	mullw	1
  9543  0038FC  50F3               	movf	prodl,w,c
  9544  0038FE  258A               	addwf	atualizarLCD@line2& (0+255),w,b
  9545  003900  6ED9               	movwf	fsr2l,c
  9546  003902  50F4               	movf	prodh,w,c
  9547  003904  218B               	addwfc	(atualizarLCD@line2+1)& (0+255),w,b
  9548  003906  6EDA               	movwf	fsr2h,c
  9549  003908  0E20               	movlw	32
  9550  00390A  6EDF               	movwf	indf2,c
  9551                           
  9552                           ;lcd.h: 147: line3[i] = ' ';
  9553  00390C  5190               	movf	atualizarLCD@i& (0+255),w,b
  9554  00390E  0D01               	mullw	1
  9555  003910  50F3               	movf	prodl,w,c
  9556  003912  258C               	addwf	atualizarLCD@line3& (0+255),w,b
  9557  003914  6ED9               	movwf	fsr2l,c
  9558  003916  50F4               	movf	prodh,w,c
  9559  003918  218D               	addwfc	(atualizarLCD@line3+1)& (0+255),w,b
  9560  00391A  6EDA               	movwf	fsr2h,c
  9561  00391C  0E20               	movlw	32
  9562  00391E  6EDF               	movwf	indf2,c
  9563                           
  9564                           ;lcd.h: 148: line4[i] = ' ';
  9565  003920  5190               	movf	atualizarLCD@i& (0+255),w,b
  9566  003922  0D01               	mullw	1
  9567  003924  50F3               	movf	prodl,w,c
  9568  003926  258E               	addwf	atualizarLCD@line4& (0+255),w,b
  9569  003928  6ED9               	movwf	fsr2l,c
  9570  00392A  50F4               	movf	prodh,w,c
  9571  00392C  218F               	addwfc	(atualizarLCD@line4+1)& (0+255),w,b
  9572  00392E  6EDA               	movwf	fsr2h,c
  9573  003930  0E20               	movlw	32
  9574  003932  6EDF               	movwf	indf2,c
  9575                           
  9576                           ; BSR set to: 0
  9577  003934  2B90               	incf	atualizarLCD@i& (0+255),f,b
  9578  003936  D7D0               	goto	l6908
  9579  003938                     u7620:
  9580  003938  FFFF               	dw	65535	; assembler added errata NOP
  9581                           
  9582                           ; BSR set to: 0
  9583                           
  9584                           ; BSR set to: 0
  9585  00393A  0012               	return		;funcret
  9586  00393C  FFFF               	dw	65535	; errata NOP
  9587  00393E                     __end_of_atualizarLCD:
  9588                           	opt stack 0
  9589                           tblptru	equ	0xFF8
  9590                           tblptrh	equ	0xFF7
  9591                           tblptrl	equ	0xFF6
  9592                           tablat	equ	0xFF5
  9593                           prodh	equ	0xFF4
  9594                           prodl	equ	0xFF3
  9595                           intcon	equ	0xFF2
  9596                           postinc0	equ	0xFEE
  9597                           wreg	equ	0xFE8
  9598                           postdec1	equ	0xFE5
  9599                           fsr1l	equ	0xFE1
  9600                           indf2	equ	0xFDF
  9601                           postinc2	equ	0xFDE
  9602                           fsr2h	equ	0xFDA
  9603                           fsr2l	equ	0xFD9
  9604                           status	equ	0xFD8
  9605                           
  9606 ;; *************** function _Lcd_Write_String *****************
  9607 ;; Defined at:
  9608 ;;		line 123 in file "lcd.h"
  9609 ;; Parameters:    Size  Location     Type
  9610 ;;  a               2    4[BANK0 ] PTR unsigned char 
  9611 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;  i               1    6[BANK0 ] unsigned char 
  9614 ;; Return value:  Size  Location     Type
  9615 ;;                  1    wreg      void 
  9616 ;; Registers used:
  9617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9623 ;;      Params:         0       2       0       0       0       0       0
  9624 ;;      Locals:         0       1       0       0       0       0       0
  9625 ;;      Temps:          0       0       0       0       0       0       0
  9626 ;;      Totals:         0       3       0       0       0       0       0
  9627 ;;Total ram usage:        3 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; Hardware stack levels required when called:    8
  9630 ;; This function calls:
  9631 ;;		_Lcd_Write_Char
  9632 ;; This function is called by:
  9633 ;;		_atualizarLCD
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           	psect	text25
  9638  007256                     __ptext25:
  9639                           	opt stack 0
  9640  007256                     _Lcd_Write_String:
  9641                           	opt stack 0
  9642  007256  FFFF               	dw	65535	; assembler added errata NOP
  9643                           
  9644                           ;lcd.h: 124: unsigned char i = 0;
  9645                           
  9646                           ; BSR set to: 0
  9647                           ;incstack = 0
  9648  007258  0E00               	movlw	0
  9649  00725A  0100               	movlb	0	; () banked
  9650  00725C  6F86               	movwf	Lcd_Write_String@i& (0+255),b
  9651                           
  9652                           ;lcd.h: 126: for (i = 0; i < 20; i++) {
  9653  00725E  0E00               	movlw	0
  9654  007260  6F86               	movwf	Lcd_Write_String@i& (0+255),b
  9655  007262                     l5964:
  9656  007262  FFFF               	dw	65535	; assembler added errata NOP
  9657                           
  9658                           ; BSR set to: 0
  9659  007264  0E13               	movlw	19
  9660  007266  6586               	cpfsgt	Lcd_Write_String@i& (0+255),b
  9661  007268  D001               	goto	l635
  9662  00726A  D00F               	goto	u6220
  9663  00726C                     l635:
  9664  00726C  FFFF               	dw	65535	; assembler added errata NOP
  9665                           
  9666                           ; BSR set to: 0
  9667                           ;lcd.h: 127: Lcd_Write_Char(a[i]);
  9668                           
  9669                           ; BSR set to: 0
  9670  00726E  5186               	movf	Lcd_Write_String@i& (0+255),w,b
  9671  007270  0D01               	mullw	1
  9672  007272  50F3               	movf	prodl,w,c
  9673  007274  2584               	addwf	Lcd_Write_String@a& (0+255),w,b
  9674  007276  6ED9               	movwf	fsr2l,c
  9675  007278  50F4               	movf	prodh,w,c
  9676  00727A  2185               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
  9677  00727C  6EDA               	movwf	fsr2h,c
  9678  00727E  50DF               	movf	indf2,w,c
  9679  007280  ECE1  F039         	call	_Lcd_Write_Char
  9680  007284  0100               	movlb	0	; () banked
  9681  007286  2B86               	incf	Lcd_Write_String@i& (0+255),f,b
  9682  007288  D7EC               	goto	l5964
  9683  00728A                     u6220:
  9684  00728A  FFFF               	dw	65535	; assembler added errata NOP
  9685                           
  9686                           ; BSR set to: 0
  9687                           
  9688                           ; BSR set to: 0
  9689  00728C  0012               	return		;funcret
  9690  00728E  FFFF               	dw	65535	; errata NOP
  9691  007290                     __end_of_Lcd_Write_String:
  9692                           	opt stack 0
  9693                           tblptru	equ	0xFF8
  9694                           tblptrh	equ	0xFF7
  9695                           tblptrl	equ	0xFF6
  9696                           tablat	equ	0xFF5
  9697                           prodh	equ	0xFF4
  9698                           prodl	equ	0xFF3
  9699                           intcon	equ	0xFF2
  9700                           postinc0	equ	0xFEE
  9701                           wreg	equ	0xFE8
  9702                           postdec1	equ	0xFE5
  9703                           fsr1l	equ	0xFE1
  9704                           indf2	equ	0xFDF
  9705                           postinc2	equ	0xFDE
  9706                           fsr2h	equ	0xFDA
  9707                           fsr2l	equ	0xFD9
  9708                           status	equ	0xFD8
  9709                           
  9710 ;; *************** function _Lcd_Write_Char *****************
  9711 ;; Defined at:
  9712 ;;		line 108 in file "lcd.h"
  9713 ;; Parameters:    Size  Location     Type
  9714 ;;  a               1    wreg     unsigned char 
  9715 ;; Auto vars:     Size  Location     Type
  9716 ;;  a               1    3[BANK0 ] unsigned char 
  9717 ;;  y               1    2[BANK0 ] unsigned char 
  9718 ;;  tempp           1    1[BANK0 ] unsigned char 
  9719 ;; Return value:  Size  Location     Type
  9720 ;;                  1    wreg      void 
  9721 ;; Registers used:
  9722 ;;		wreg, status,2, status,0, cstack
  9723 ;; Tracked objects:
  9724 ;;		On entry : 0/0
  9725 ;;		On exit  : 0/0
  9726 ;;		Unchanged: 0/0
  9727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9728 ;;      Params:         0       0       0       0       0       0       0
  9729 ;;      Locals:         0       3       0       0       0       0       0
  9730 ;;      Temps:          0       0       0       0       0       0       0
  9731 ;;      Totals:         0       3       0       0       0       0       0
  9732 ;;Total ram usage:        3 bytes
  9733 ;; Hardware stack levels used:    1
  9734 ;; Hardware stack levels required when called:    7
  9735 ;; This function calls:
  9736 ;;		_Lcd_Port
  9737 ;; This function is called by:
  9738 ;;		_Lcd_Write_String
  9739 ;;		_criarCaracteresCGRAM
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           	psect	text26
  9744  0073C2                     __ptext26:
  9745                           	opt stack 0
  9746  0073C2                     _Lcd_Write_Char:
  9747                           	opt stack 0
  9748  0073C2  FFFF               	dw	65535	; assembler added errata NOP
  9749                           
  9750                           ; BSR set to: 0
  9751                           ;incstack = 0
  9752                           ;Lcd_Write_Char@a stored from wreg
  9753  0073C4  0100               	movlb	0	; () banked
  9754  0073C6  6F83               	movwf	Lcd_Write_Char@a& (0+255),b
  9755                           
  9756                           ;lcd.h: 109: char tempp, y;
  9757                           ;lcd.h: 110: tempp = a & 0x0F;
  9758  0073C8  0100               	movlb	0	; () banked
  9759  0073CA  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
  9760  0073CC  0B0F               	andlw	15
  9761  0073CE  6F81               	movwf	Lcd_Write_Char@tempp& (0+255),b
  9762                           
  9763                           ;lcd.h: 111: y = a & 0xF0;
  9764  0073D0  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
  9765  0073D2  0BF0               	andlw	240
  9766  0073D4  6F82               	movwf	Lcd_Write_Char@y& (0+255),b
  9767                           
  9768                           ; BSR set to: 0
  9769                           ;lcd.h: 112: PORTDbits.RD1 = 1;
  9770  0073D6  8283               	bsf	3971,1,c	;volatile
  9771                           
  9772                           ; BSR set to: 0
  9773                           ;lcd.h: 113: Lcd_Port(y >> 4);
  9774  0073D8  3982               	swapf	Lcd_Write_Char@y& (0+255),w,b
  9775  0073DA  0B0F               	andlw	15
  9776  0073DC  EC44  F03A         	call	_Lcd_Port
  9777                           
  9778                           ;lcd.h: 114: PORTDbits.RD0 = 1;
  9779  0073E0  8083               	bsf	3971,0,c	;volatile
  9780                           
  9781                           ;lcd.h: 115: _delay((unsigned long)((150)*(8000000/4000000.0)));
  9782  0073E2  0E4B               	movlw	75
  9783  0073E4                     u8907:
  9784  0073E4  FFFF               	dw	65535	; errata NOP
  9785  0073E6  2EE8               	decfsz	wreg,f,c
  9786  0073E8  D7FD               	bra	u8907
  9787                           
  9788                           ;lcd.h: 116: PORTDbits.RD0 = 0;
  9789  0073EA  9083               	bcf	3971,0,c	;volatile
  9790                           
  9791                           ;lcd.h: 117: Lcd_Port(tempp);
  9792  0073EC  0100               	movlb	0	; () banked
  9793  0073EE  5181               	movf	Lcd_Write_Char@tempp& (0+255),w,b
  9794  0073F0  EC44  F03A         	call	_Lcd_Port
  9795                           
  9796                           ;lcd.h: 118: PORTDbits.RD0 = 1;
  9797  0073F4  8083               	bsf	3971,0,c	;volatile
  9798                           
  9799                           ;lcd.h: 119: _delay((unsigned long)((150)*(8000000/4000000.0)));
  9800  0073F6  0E4B               	movlw	75
  9801  0073F8                     u8917:
  9802  0073F8  FFFF               	dw	65535	; errata NOP
  9803  0073FA  2EE8               	decfsz	wreg,f,c
  9804  0073FC  D7FD               	bra	u8917
  9805                           
  9806                           ;lcd.h: 120: PORTDbits.RD0 = 0;
  9807  0073FE  9083               	bcf	3971,0,c	;volatile
  9808  007400  0012               	return		;funcret
  9809  007402  FFFF               	dw	65535	; errata NOP
  9810  007404                     __end_of_Lcd_Write_Char:
  9811                           	opt stack 0
  9812                           tblptru	equ	0xFF8
  9813                           tblptrh	equ	0xFF7
  9814                           tblptrl	equ	0xFF6
  9815                           tablat	equ	0xFF5
  9816                           prodh	equ	0xFF4
  9817                           prodl	equ	0xFF3
  9818                           intcon	equ	0xFF2
  9819                           postinc0	equ	0xFEE
  9820                           wreg	equ	0xFE8
  9821                           postdec1	equ	0xFE5
  9822                           fsr1l	equ	0xFE1
  9823                           indf2	equ	0xFDF
  9824                           postinc2	equ	0xFDE
  9825                           fsr2h	equ	0xFDA
  9826                           fsr2l	equ	0xFD9
  9827                           status	equ	0xFD8
  9828                           
  9829 ;; *************** function _Lcd_Set_Cursor *****************
  9830 ;; Defined at:
  9831 ;;		line 73 in file "lcd.h"
  9832 ;; Parameters:    Size  Location     Type
  9833 ;;  a               1    wreg     unsigned char 
  9834 ;;  b               1    3[BANK0 ] unsigned char 
  9835 ;; Auto vars:     Size  Location     Type
  9836 ;;  a               1    4[BANK0 ] unsigned char 
  9837 ;;  temp            1    7[BANK0 ] unsigned char 
  9838 ;;  y               1    6[BANK0 ] unsigned char 
  9839 ;;  z               1    5[BANK0 ] unsigned char 
  9840 ;; Return value:  Size  Location     Type
  9841 ;;                  1    wreg      void 
  9842 ;; Registers used:
  9843 ;;		wreg, status,2, status,0, cstack
  9844 ;; Tracked objects:
  9845 ;;		On entry : 0/0
  9846 ;;		On exit  : 0/0
  9847 ;;		Unchanged: 0/0
  9848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9849 ;;      Params:         0       1       0       0       0       0       0
  9850 ;;      Locals:         0       4       0       0       0       0       0
  9851 ;;      Temps:          0       0       0       0       0       0       0
  9852 ;;      Totals:         0       5       0       0       0       0       0
  9853 ;;Total ram usage:        5 bytes
  9854 ;; Hardware stack levels used:    1
  9855 ;; Hardware stack levels required when called:    8
  9856 ;; This function calls:
  9857 ;;		_Lcd_Cmd
  9858 ;; This function is called by:
  9859 ;;		_atualizarLCD
  9860 ;; This function uses a non-reentrant model
  9861 ;;
  9862                           
  9863                           	psect	text27
  9864  003A04                     __ptext27:
  9865                           	opt stack 0
  9866  003A04                     _Lcd_Set_Cursor:
  9867                           	opt stack 0
  9868  003A04  FFFF               	dw	65535	; assembler added errata NOP
  9869                           
  9870                           ;incstack = 0
  9871                           ;Lcd_Set_Cursor@a stored from wreg
  9872  003A06  0100               	movlb	0	; () banked
  9873  003A08  6F84               	movwf	Lcd_Set_Cursor@a& (0+255),b
  9874                           
  9875                           ;lcd.h: 74: char temp, z, y;
  9876                           ;lcd.h: 75: switch (a) {
  9877  003A0A  D04C               	goto	l622
  9878  003A0C  FFFF               	dw	65535	; assembler added errata NOP
  9879                           
  9880                           ;lcd.h: 77: temp = 0x80 + b - 1;
  9881  003A0E  0100               	movlb	0	; () banked
  9882  003A10  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
  9883  003A12  0F7F               	addlw	127
  9884  003A14  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
  9885                           
  9886                           ;lcd.h: 78: z = temp >> 4;
  9887  003A16  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
  9888  003A18  0B0F               	andlw	15
  9889  003A1A  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
  9890                           
  9891                           ;lcd.h: 79: y = temp & 0x0F;
  9892  003A1C  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
  9893  003A1E  0B0F               	andlw	15
  9894  003A20  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
  9895                           
  9896                           ; BSR set to: 0
  9897                           ;lcd.h: 80: Lcd_Cmd(z);
  9898  003A22  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
  9899  003A24  ECD5  F037         	call	_Lcd_Cmd
  9900                           
  9901                           ;lcd.h: 81: Lcd_Cmd(y);
  9902  003A28  0100               	movlb	0	; () banked
  9903  003A2A  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
  9904  003A2C  ECD5  F037         	call	_Lcd_Cmd
  9905                           
  9906                           ;lcd.h: 82: break;
  9907  003A30  D048               	goto	l624
  9908  003A32  FFFF               	dw	65535	; assembler added errata NOP
  9909                           
  9910                           ;lcd.h: 84: temp = 0xC0 + b - 1;
  9911  003A34  0100               	movlb	0	; () banked
  9912  003A36  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
  9913  003A38  0FBF               	addlw	191
  9914  003A3A  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
  9915                           
  9916                           ;lcd.h: 85: z = temp >> 4;
  9917  003A3C  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
  9918  003A3E  0B0F               	andlw	15
  9919  003A40  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
  9920                           
  9921                           ;lcd.h: 86: y = temp & 0x0F;
  9922  003A42  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
  9923  003A44  0B0F               	andlw	15
  9924  003A46  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
  9925                           
  9926                           ; BSR set to: 0
  9927                           ;lcd.h: 87: Lcd_Cmd(z);
  9928  003A48  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
  9929  003A4A  ECD5  F037         	call	_Lcd_Cmd
  9930                           
  9931                           ;lcd.h: 88: Lcd_Cmd(y);
  9932  003A4E  0100               	movlb	0	; () banked
  9933  003A50  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
  9934  003A52  ECD5  F037         	call	_Lcd_Cmd
  9935                           
  9936                           ;lcd.h: 89: break;
  9937  003A56  D035               	goto	l624
  9938  003A58  FFFF               	dw	65535	; assembler added errata NOP
  9939                           
  9940                           ;lcd.h: 91: temp = 0x94 + b;
  9941  003A5A  0100               	movlb	0	; () banked
  9942  003A5C  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
  9943  003A5E  0F94               	addlw	148
  9944  003A60  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
  9945                           
  9946                           ;lcd.h: 92: z = temp >> 4;
  9947  003A62  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
  9948  003A64  0B0F               	andlw	15
  9949  003A66  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
  9950                           
  9951                           ;lcd.h: 93: y = temp & 0x0F;
  9952  003A68  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
  9953  003A6A  0B0F               	andlw	15
  9954  003A6C  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
  9955                           
  9956                           ; BSR set to: 0
  9957                           ;lcd.h: 94: Lcd_Cmd(z);
  9958  003A6E  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
  9959  003A70  ECD5  F037         	call	_Lcd_Cmd
  9960                           
  9961                           ;lcd.h: 95: Lcd_Cmd(y);
  9962  003A74  0100               	movlb	0	; () banked
  9963  003A76  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
  9964  003A78  ECD5  F037         	call	_Lcd_Cmd
  9965                           
  9966                           ;lcd.h: 96: break;
  9967  003A7C  D022               	goto	l624
  9968  003A7E  FFFF               	dw	65535	; assembler added errata NOP
  9969                           
  9970                           ;lcd.h: 98: temp = 0xD4 + b;
  9971  003A80  0100               	movlb	0	; () banked
  9972  003A82  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
  9973  003A84  0FD4               	addlw	212
  9974  003A86  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
  9975                           
  9976                           ;lcd.h: 99: z = temp >> 4;
  9977  003A88  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
  9978  003A8A  0B0F               	andlw	15
  9979  003A8C  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
  9980                           
  9981                           ;lcd.h: 100: y = temp & 0x0F;
  9982  003A8E  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
  9983  003A90  0B0F               	andlw	15
  9984  003A92  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;lcd.h: 101: Lcd_Cmd(z);
  9988  003A94  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
  9989  003A96  ECD5  F037         	call	_Lcd_Cmd
  9990                           
  9991                           ;lcd.h: 102: Lcd_Cmd(y);
  9992  003A9A  0100               	movlb	0	; () banked
  9993  003A9C  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
  9994  003A9E  ECD5  F037         	call	_Lcd_Cmd
  9995                           
  9996                           ;lcd.h: 105: }
  9997                           
  9998                           ;lcd.h: 104: default:return;
  9999                           
 10000                           ;lcd.h: 103: break;
 10001  003AA2  D00F               	goto	l624
 10002  003AA4                     l622:
 10003  003AA4  FFFF               	dw	65535	; assembler added errata NOP
 10004  003AA6  0100               	movlb	0	; () banked
 10005  003AA8  5184               	movf	Lcd_Set_Cursor@a& (0+255),w,b
 10006                           
 10007                           ; Switch size 1, requested type "space"
 10008                           ; Number of cases is 4, Range of values is 1 to 4
 10009                           ; switch strategies available:
 10010                           ; Name         Instructions Cycles
 10011                           ; simple_byte           13     7 (average)
 10012                           ;	Chosen strategy is simple_byte
 10013  003AAA  0A01               	xorlw	1	; case 1
 10014  003AAC  B4D8               	btfsc	status,2,c
 10015  003AAE  D7AE               	goto	l623
 10016  003AB0  0A03               	xorlw	3	; case 2
 10017  003AB2  B4D8               	btfsc	status,2,c
 10018  003AB4  D7BE               	goto	l625
 10019  003AB6  0A01               	xorlw	1	; case 3
 10020  003AB8  B4D8               	btfsc	status,2,c
 10021  003ABA  D7CE               	goto	l626
 10022  003ABC  0A07               	xorlw	7	; case 4
 10023  003ABE  B4D8               	btfsc	status,2,c
 10024  003AC0  D7DE               	goto	l627
 10025  003AC2                     l624:
 10026  003AC2  FFFF               	dw	65535	; assembler added errata NOP
 10027                           
 10028                           ; BSR set to: 0
 10029  003AC4  0012               	return		;funcret
 10030  003AC6  FFFF               	dw	65535	; errata NOP
 10031  003AC8                     __end_of_Lcd_Set_Cursor:
 10032                           	opt stack 0
 10033                           tblptru	equ	0xFF8
 10034                           tblptrh	equ	0xFF7
 10035                           tblptrl	equ	0xFF6
 10036                           tablat	equ	0xFF5
 10037                           prodh	equ	0xFF4
 10038                           prodl	equ	0xFF3
 10039                           intcon	equ	0xFF2
 10040                           postinc0	equ	0xFEE
 10041                           wreg	equ	0xFE8
 10042                           postdec1	equ	0xFE5
 10043                           fsr1l	equ	0xFE1
 10044                           indf2	equ	0xFDF
 10045                           postinc2	equ	0xFDE
 10046                           fsr2h	equ	0xFDA
 10047                           fsr2l	equ	0xFD9
 10048                           status	equ	0xFD8
 10049                           
 10050 ;; *************** function _ajusteSP_Bombas *****************
 10051 ;; Defined at:
 10052 ;;		line 7 in file "tela_CONFIG_PRESSAO.h"
 10053 ;; Parameters:    Size  Location     Type
 10054 ;;		None
 10055 ;; Auto vars:     Size  Location     Type
 10056 ;;		None
 10057 ;; Return value:  Size  Location     Type
 10058 ;;                  1    wreg      void 
 10059 ;; Registers used:
 10060 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10061 ;; Tracked objects:
 10062 ;;		On entry : 0/0
 10063 ;;		On exit  : 0/0
 10064 ;;		Unchanged: 0/0
 10065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10066 ;;      Params:         0       0       0       0       0       0       0
 10067 ;;      Locals:         0       2       0       0       0       0       0
 10068 ;;      Temps:          0       0       0       0       0       0       0
 10069 ;;      Totals:         0       2       0       0       0       0       0
 10070 ;;Total ram usage:        2 bytes
 10071 ;; Hardware stack levels used:    1
 10072 ;; Hardware stack levels required when called:   10
 10073 ;; This function calls:
 10074 ;;		_blink
 10075 ;;		_btPress
 10076 ;;		_intToFloatStr
 10077 ;;		_sprintf
 10078 ;;		_writeEEPROM_ext
 10079 ;; This function is called by:
 10080 ;;		_main
 10081 ;; This function uses a non-reentrant model
 10082 ;;
 10083                           
 10084                           	psect	text28
 10085  001896                     __ptext28:
 10086                           	opt stack 0
 10087  001896                     _ajusteSP_Bombas:
 10088                           	opt stack 0
 10089  001896  FFFF               	dw	65535	; assembler added errata NOP
 10090                           
 10091                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10092                           
 10093                           ;incstack = 0
 10094  001898  0100               	movlb	0	; () banked
 10095  00189A  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 10096  00189C  EC5C  F01F         	call	_intToFloatStr
 10097  0018A0  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2367
 10098  0018A4  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2367+1
 10099                           
 10100                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10101  0018A8  0E7B               	movlw	low _line1
 10102  0018AA  0100               	movlb	0	; () banked
 10103  0018AC  6FA1               	movwf	sprintf@wh& (0+255),b
 10104  0018AE  0E01               	movlw	high _line1
 10105  0018B0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10106  0018B2  0E35               	movlw	low STR_99
 10107  0018B4  6FA3               	movwf	sprintf@f& (0+255),b
 10108  0018B6  0E7F               	movlw	high STR_99
 10109  0018B8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10110  0018BA  C0C2  F0A5         	movff	_ajusteSP_Bombas$2367,?_sprintf+4
 10111  0018BE  C0C3  F0A6         	movff	_ajusteSP_Bombas$2367+1,?_sprintf+5
 10112  0018C2  EC89  F03A         	call	_sprintf	;wreg free
 10113                           
 10114                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10115  0018C6  0100               	movlb	0	; () banked
 10116  0018C8  51E3               	movf	_sp_jockey& (0+255),w,b
 10117  0018CA  EC5C  F01F         	call	_intToFloatStr
 10118  0018CE  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2367
 10119  0018D2  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2367+1
 10120                           
 10121                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10122  0018D6  0E66               	movlw	low _line2
 10123  0018D8  0100               	movlb	0	; () banked
 10124  0018DA  6FA1               	movwf	sprintf@wh& (0+255),b
 10125  0018DC  0E01               	movlw	high _line2
 10126  0018DE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10127  0018E0  0E40               	movlw	low STR_45
 10128  0018E2  6FA3               	movwf	sprintf@f& (0+255),b
 10129  0018E4  0E7F               	movlw	high STR_45
 10130  0018E6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10131  0018E8  C0C2  F0A5         	movff	_ajusteSP_Bombas$2367,?_sprintf+4
 10132  0018EC  C0C3  F0A6         	movff	_ajusteSP_Bombas$2367+1,?_sprintf+5
 10133  0018F0  EC89  F03A         	call	_sprintf	;wreg free
 10134                           
 10135                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10136  0018F4  0100               	movlb	0	; () banked
 10137  0018F6  51E2               	movf	_sp_principal& (0+255),w,b
 10138  0018F8  EC5C  F01F         	call	_intToFloatStr
 10139  0018FC  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2367
 10140  001900  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2367+1
 10141                           
 10142                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10143  001904  0E51               	movlw	low _line3
 10144  001906  0100               	movlb	0	; () banked
 10145  001908  6FA1               	movwf	sprintf@wh& (0+255),b
 10146  00190A  0E01               	movlw	high _line3
 10147  00190C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10148  00190E  0E65               	movlw	low STR_48
 10149  001910  6FA3               	movwf	sprintf@f& (0+255),b
 10150  001912  0E7E               	movlw	high STR_48
 10151  001914  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10152  001916  C0C2  F0A5         	movff	_ajusteSP_Bombas$2367,?_sprintf+4
 10153  00191A  C0C3  F0A6         	movff	_ajusteSP_Bombas$2367+1,?_sprintf+5
 10154  00191E  EC89  F03A         	call	_sprintf	;wreg free
 10155                           
 10156                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10157  001922  0100               	movlb	0	; () banked
 10158  001924  51E1               	movf	_sp_estacionaria& (0+255),w,b
 10159  001926  EC5C  F01F         	call	_intToFloatStr
 10160  00192A  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2367
 10161  00192E  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2367+1
 10162                           
 10163                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10164  001932  0E3C               	movlw	low _line4
 10165  001934  0100               	movlb	0	; () banked
 10166  001936  6FA1               	movwf	sprintf@wh& (0+255),b
 10167  001938  0E01               	movlw	high _line4
 10168  00193A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10169  00193C  0E74               	movlw	low STR_51
 10170  00193E  6FA3               	movwf	sprintf@f& (0+255),b
 10171  001940  0E7E               	movlw	high STR_51
 10172  001942  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10173  001944  C0C2  F0A5         	movff	_ajusteSP_Bombas$2367,?_sprintf+4
 10174  001948  C0C3  F0A6         	movff	_ajusteSP_Bombas$2367+1,?_sprintf+5
 10175  00194C  EC89  F03A         	call	_sprintf	;wreg free
 10176                           
 10177                           ;tela_CONFIG_PRESSAO.h: 14: if (btPress(1)) {
 10178  001950  0E01               	movlw	1
 10179  001952  EC43  F03C         	call	_btPress
 10180  001956  0900               	iorlw	0
 10181  001958  B4D8               	btfsc	status,2,c
 10182  00195A  D019               	goto	l843
 10183                           
 10184                           ;tela_CONFIG_PRESSAO.h: 15: writeEEPROM_ext(0, sp_jockey);
 10185  00195C  C0E3  F08C         	movff	_sp_jockey,writeEEPROM_ext@data
 10186  001960  0E00               	movlw	0
 10187  001962  EC66  F03A         	call	_writeEEPROM_ext
 10188                           
 10189                           ;tela_CONFIG_PRESSAO.h: 16: writeEEPROM_ext(1, sp_principal);
 10190  001966  C0E2  F08C         	movff	_sp_principal,writeEEPROM_ext@data
 10191  00196A  0E01               	movlw	1
 10192  00196C  EC66  F03A         	call	_writeEEPROM_ext
 10193                           
 10194                           ;tela_CONFIG_PRESSAO.h: 17: writeEEPROM_ext(2, sp_estacionaria);
 10195  001970  C0E1  F08C         	movff	_sp_estacionaria,writeEEPROM_ext@data
 10196  001974  0E02               	movlw	2
 10197  001976  EC66  F03A         	call	_writeEEPROM_ext
 10198                           
 10199                           ;tela_CONFIG_PRESSAO.h: 18: writeEEPROM_ext(4, sp_pressao_rede);
 10200  00197A  C0E4  F08C         	movff	_sp_pressao_rede,writeEEPROM_ext@data
 10201  00197E  0E04               	movlw	4
 10202  001980  EC66  F03A         	call	_writeEEPROM_ext
 10203                           
 10204                           ;tela_CONFIG_PRESSAO.h: 19: option_posi = 0;
 10205  001984  0E00               	movlw	0
 10206  001986  0100               	movlb	0	; () banked
 10207  001988  6FE0               	movwf	_option_posi& (0+255),b
 10208                           
 10209                           ; BSR set to: 0
 10210                           ;tela_CONFIG_PRESSAO.h: 20: menu_posi = _menu_posi;
 10211  00198A  C0DE  F0DF         	movff	__menu_posi,_menu_posi
 10212  00198E                     l843:
 10213  00198E  FFFF               	dw	65535	; assembler added errata NOP
 10214                           
 10215                           ;tela_CONFIG_PRESSAO.h: 21: }
 10216                           ;tela_CONFIG_PRESSAO.h: 23: if (btPress(4)) {
 10217                           
 10218                           ; BSR set to: 0
 10219  001990  0E04               	movlw	4
 10220  001992  EC43  F03C         	call	_btPress
 10221  001996  0900               	iorlw	0
 10222  001998  B4D8               	btfsc	status,2,c
 10223  00199A  D097               	goto	l845
 10224                           
 10225                           ;tela_CONFIG_PRESSAO.h: 24: option_posi++;
 10226  00199C  0100               	movlb	0	; () banked
 10227  00199E  2BE0               	incf	_option_posi& (0+255),f,b
 10228                           
 10229                           ; BSR set to: 0
 10230                           ;tela_CONFIG_PRESSAO.h: 25: }
 10231                           ;tela_CONFIG_PRESSAO.h: 27: switch (option_posi) {
 10232  0019A0  D094               	goto	l845
 10233  0019A2  FFFF               	dw	65535	; assembler added errata NOP
 10234                           
 10235                           ; BSR set to: 0
 10236                           ;tela_CONFIG_PRESSAO.h: 29: blink(line1, 8, 15);
 10237                           
 10238                           ; BSR set to: 0
 10239  0019A4  0E7B               	movlw	low _line1
 10240  0019A6  6F80               	movwf	blink@line& (0+255),b
 10241  0019A8  0E01               	movlw	high _line1
 10242  0019AA  6F81               	movwf	(blink@line+1)& (0+255),b
 10243  0019AC  0E08               	movlw	8
 10244  0019AE  6F82               	movwf	blink@start& (0+255),b
 10245  0019B0  0E0F               	movlw	15
 10246  0019B2  6F83               	movwf	blink@end& (0+255),b
 10247  0019B4  ECA2  F039         	call	_blink	;wreg free
 10248                           
 10249                           ;tela_CONFIG_PRESSAO.h: 30: if (btPress(3)) {
 10250  0019B8  0E03               	movlw	3
 10251  0019BA  EC43  F03C         	call	_btPress
 10252  0019BE  0900               	iorlw	0
 10253  0019C0  B4D8               	btfsc	status,2,c
 10254  0019C2  D002               	goto	l847
 10255                           
 10256                           ;tela_CONFIG_PRESSAO.h: 31: sp_pressao_rede++;
 10257  0019C4  0100               	movlb	0	; () banked
 10258  0019C6  2BE4               	incf	_sp_pressao_rede& (0+255),f,b
 10259  0019C8                     l847:
 10260  0019C8  FFFF               	dw	65535	; assembler added errata NOP
 10261                           
 10262                           ;tela_CONFIG_PRESSAO.h: 32: }
 10263                           ;tela_CONFIG_PRESSAO.h: 33: if (btPress(2)) {
 10264                           
 10265                           ; BSR set to: 0
 10266  0019CA  0E02               	movlw	2
 10267  0019CC  EC43  F03C         	call	_btPress
 10268  0019D0  0900               	iorlw	0
 10269  0019D2  B4D8               	btfsc	status,2,c
 10270  0019D4  D002               	goto	l848
 10271                           
 10272                           ;tela_CONFIG_PRESSAO.h: 34: sp_pressao_rede--;
 10273  0019D6  0100               	movlb	0	; () banked
 10274  0019D8  07E4               	decf	_sp_pressao_rede& (0+255),f,b
 10275  0019DA                     l848:
 10276  0019DA  FFFF               	dw	65535	; assembler added errata NOP
 10277                           
 10278                           ;tela_CONFIG_PRESSAO.h: 35: }
 10279                           ;tela_CONFIG_PRESSAO.h: 36: if (sp_pressao_rede > 99) {
 10280                           
 10281                           ; BSR set to: 0
 10282  0019DC  0E63               	movlw	99
 10283  0019DE  0100               	movlb	0	; () banked
 10284  0019E0  65E4               	cpfsgt	_sp_pressao_rede& (0+255),b
 10285  0019E2  D083               	goto	l850
 10286                           
 10287                           ; BSR set to: 0
 10288                           ;tela_CONFIG_PRESSAO.h: 37: sp_pressao_rede = 0;
 10289  0019E4  0E00               	movlw	0
 10290  0019E6  6FE4               	movwf	_sp_pressao_rede& (0+255),b
 10291                           
 10292                           ; BSR set to: 0
 10293                           ;tela_CONFIG_PRESSAO.h: 38: }
 10294                           ;tela_CONFIG_PRESSAO.h: 39: break;
 10295  0019E8  D080               	goto	l850
 10296  0019EA  FFFF               	dw	65535	; assembler added errata NOP
 10297                           
 10298                           ; BSR set to: 0
 10299                           ;tela_CONFIG_PRESSAO.h: 41: blink(line2, 8, 15);
 10300                           
 10301                           ; BSR set to: 0
 10302  0019EC  0E66               	movlw	low _line2
 10303  0019EE  6F80               	movwf	blink@line& (0+255),b
 10304  0019F0  0E01               	movlw	high _line2
 10305  0019F2  6F81               	movwf	(blink@line+1)& (0+255),b
 10306  0019F4  0E08               	movlw	8
 10307  0019F6  6F82               	movwf	blink@start& (0+255),b
 10308  0019F8  0E0F               	movlw	15
 10309  0019FA  6F83               	movwf	blink@end& (0+255),b
 10310  0019FC  ECA2  F039         	call	_blink	;wreg free
 10311                           
 10312                           ;tela_CONFIG_PRESSAO.h: 42: if (btPress(3)) {
 10313  001A00  0E03               	movlw	3
 10314  001A02  EC43  F03C         	call	_btPress
 10315  001A06  0900               	iorlw	0
 10316  001A08  B4D8               	btfsc	status,2,c
 10317  001A0A  D002               	goto	l852
 10318                           
 10319                           ;tela_CONFIG_PRESSAO.h: 43: sp_jockey++;
 10320  001A0C  0100               	movlb	0	; () banked
 10321  001A0E  2BE3               	incf	_sp_jockey& (0+255),f,b
 10322  001A10                     l852:
 10323  001A10  FFFF               	dw	65535	; assembler added errata NOP
 10324                           
 10325                           ;tela_CONFIG_PRESSAO.h: 44: }
 10326                           ;tela_CONFIG_PRESSAO.h: 45: if (btPress(2)) {
 10327                           
 10328                           ; BSR set to: 0
 10329  001A12  0E02               	movlw	2
 10330  001A14  EC43  F03C         	call	_btPress
 10331  001A18  0900               	iorlw	0
 10332  001A1A  B4D8               	btfsc	status,2,c
 10333  001A1C  D002               	goto	l853
 10334                           
 10335                           ;tela_CONFIG_PRESSAO.h: 46: sp_jockey--;
 10336  001A1E  0100               	movlb	0	; () banked
 10337  001A20  07E3               	decf	_sp_jockey& (0+255),f,b
 10338  001A22                     l853:
 10339  001A22  FFFF               	dw	65535	; assembler added errata NOP
 10340                           
 10341                           ;tela_CONFIG_PRESSAO.h: 47: }
 10342                           ;tela_CONFIG_PRESSAO.h: 48: if (sp_jockey > 99) {
 10343                           
 10344                           ; BSR set to: 0
 10345  001A24  0E63               	movlw	99
 10346  001A26  0100               	movlb	0	; () banked
 10347  001A28  65E3               	cpfsgt	_sp_jockey& (0+255),b
 10348  001A2A  D05F               	goto	l850
 10349                           
 10350                           ; BSR set to: 0
 10351                           ;tela_CONFIG_PRESSAO.h: 49: sp_jockey = 0;
 10352  001A2C  0E00               	movlw	0
 10353  001A2E  6FE3               	movwf	_sp_jockey& (0+255),b
 10354                           
 10355                           ; BSR set to: 0
 10356                           ;tela_CONFIG_PRESSAO.h: 50: }
 10357                           ;tela_CONFIG_PRESSAO.h: 51: break;
 10358  001A30  D05C               	goto	l850
 10359  001A32  FFFF               	dw	65535	; assembler added errata NOP
 10360                           
 10361                           ; BSR set to: 0
 10362                           ;tela_CONFIG_PRESSAO.h: 53: blink(line3, 12, 18);
 10363                           
 10364                           ; BSR set to: 0
 10365  001A34  0E51               	movlw	low _line3
 10366  001A36  6F80               	movwf	blink@line& (0+255),b
 10367  001A38  0E01               	movlw	high _line3
 10368  001A3A  6F81               	movwf	(blink@line+1)& (0+255),b
 10369  001A3C  0E0C               	movlw	12
 10370  001A3E  6F82               	movwf	blink@start& (0+255),b
 10371  001A40  0E12               	movlw	18
 10372  001A42  6F83               	movwf	blink@end& (0+255),b
 10373  001A44  ECA2  F039         	call	_blink	;wreg free
 10374                           
 10375                           ;tela_CONFIG_PRESSAO.h: 54: if (btPress(3)) {
 10376  001A48  0E03               	movlw	3
 10377  001A4A  EC43  F03C         	call	_btPress
 10378  001A4E  0900               	iorlw	0
 10379  001A50  B4D8               	btfsc	status,2,c
 10380  001A52  D002               	goto	l856
 10381                           
 10382                           ;tela_CONFIG_PRESSAO.h: 55: sp_principal++;
 10383  001A54  0100               	movlb	0	; () banked
 10384  001A56  2BE2               	incf	_sp_principal& (0+255),f,b
 10385  001A58                     l856:
 10386  001A58  FFFF               	dw	65535	; assembler added errata NOP
 10387                           
 10388                           ;tela_CONFIG_PRESSAO.h: 56: }
 10389                           ;tela_CONFIG_PRESSAO.h: 57: if (btPress(2)) {
 10390                           
 10391                           ; BSR set to: 0
 10392  001A5A  0E02               	movlw	2
 10393  001A5C  EC43  F03C         	call	_btPress
 10394  001A60  0900               	iorlw	0
 10395  001A62  B4D8               	btfsc	status,2,c
 10396  001A64  D002               	goto	l857
 10397                           
 10398                           ;tela_CONFIG_PRESSAO.h: 58: sp_principal--;
 10399  001A66  0100               	movlb	0	; () banked
 10400  001A68  07E2               	decf	_sp_principal& (0+255),f,b
 10401  001A6A                     l857:
 10402  001A6A  FFFF               	dw	65535	; assembler added errata NOP
 10403                           
 10404                           ;tela_CONFIG_PRESSAO.h: 59: }
 10405                           ;tela_CONFIG_PRESSAO.h: 60: if (sp_principal > 99) {
 10406                           
 10407                           ; BSR set to: 0
 10408  001A6C  0E63               	movlw	99
 10409  001A6E  0100               	movlb	0	; () banked
 10410  001A70  65E2               	cpfsgt	_sp_principal& (0+255),b
 10411  001A72  D03B               	goto	l850
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;tela_CONFIG_PRESSAO.h: 61: sp_principal = 0;
 10415  001A74  0E00               	movlw	0
 10416  001A76  6FE2               	movwf	_sp_principal& (0+255),b
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;tela_CONFIG_PRESSAO.h: 62: }
 10420                           ;tela_CONFIG_PRESSAO.h: 63: break;
 10421  001A78  D038               	goto	l850
 10422  001A7A  FFFF               	dw	65535	; assembler added errata NOP
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;tela_CONFIG_PRESSAO.h: 65: blink(line4, 12, 18);
 10426                           
 10427                           ; BSR set to: 0
 10428  001A7C  0E3C               	movlw	low _line4
 10429  001A7E  6F80               	movwf	blink@line& (0+255),b
 10430  001A80  0E01               	movlw	high _line4
 10431  001A82  6F81               	movwf	(blink@line+1)& (0+255),b
 10432  001A84  0E0C               	movlw	12
 10433  001A86  6F82               	movwf	blink@start& (0+255),b
 10434  001A88  0E12               	movlw	18
 10435  001A8A  6F83               	movwf	blink@end& (0+255),b
 10436  001A8C  ECA2  F039         	call	_blink	;wreg free
 10437                           
 10438                           ;tela_CONFIG_PRESSAO.h: 66: if (btPress(3)) {
 10439  001A90  0E03               	movlw	3
 10440  001A92  EC43  F03C         	call	_btPress
 10441  001A96  0900               	iorlw	0
 10442  001A98  B4D8               	btfsc	status,2,c
 10443  001A9A  D002               	goto	l860
 10444                           
 10445                           ;tela_CONFIG_PRESSAO.h: 67: sp_estacionaria++;
 10446  001A9C  0100               	movlb	0	; () banked
 10447  001A9E  2BE1               	incf	_sp_estacionaria& (0+255),f,b
 10448  001AA0                     l860:
 10449  001AA0  FFFF               	dw	65535	; assembler added errata NOP
 10450                           
 10451                           ;tela_CONFIG_PRESSAO.h: 68: }
 10452                           ;tela_CONFIG_PRESSAO.h: 69: if (btPress(2)) {
 10453                           
 10454                           ; BSR set to: 0
 10455  001AA2  0E02               	movlw	2
 10456  001AA4  EC43  F03C         	call	_btPress
 10457  001AA8  0900               	iorlw	0
 10458  001AAA  B4D8               	btfsc	status,2,c
 10459  001AAC  D002               	goto	l861
 10460                           
 10461                           ;tela_CONFIG_PRESSAO.h: 70: sp_estacionaria--;
 10462  001AAE  0100               	movlb	0	; () banked
 10463  001AB0  07E1               	decf	_sp_estacionaria& (0+255),f,b
 10464  001AB2                     l861:
 10465  001AB2  FFFF               	dw	65535	; assembler added errata NOP
 10466                           
 10467                           ;tela_CONFIG_PRESSAO.h: 71: }
 10468                           ;tela_CONFIG_PRESSAO.h: 72: if (sp_estacionaria > 99) {
 10469                           
 10470                           ; BSR set to: 0
 10471  001AB4  0E63               	movlw	99
 10472  001AB6  0100               	movlb	0	; () banked
 10473  001AB8  65E1               	cpfsgt	_sp_estacionaria& (0+255),b
 10474  001ABA  D017               	goto	l850
 10475                           
 10476                           ; BSR set to: 0
 10477                           ;tela_CONFIG_PRESSAO.h: 73: sp_estacionaria = 0;
 10478  001ABC  0E00               	movlw	0
 10479  001ABE  6FE1               	movwf	_sp_estacionaria& (0+255),b
 10480                           
 10481                           ; BSR set to: 0
 10482                           ;tela_CONFIG_PRESSAO.h: 74: }
 10483                           ;tela_CONFIG_PRESSAO.h: 75: break;
 10484  001AC0  D014               	goto	l850
 10485  001AC2  FFFF               	dw	65535	; assembler added errata NOP
 10486                           
 10487                           ; BSR set to: 0
 10488                           
 10489                           ; BSR set to: 0
 10490  001AC4  0E00               	movlw	0
 10491  001AC6  6FE0               	movwf	_option_posi& (0+255),b
 10492                           
 10493                           ; BSR set to: 0
 10494                           ;tela_CONFIG_PRESSAO.h: 78: }
 10495                           
 10496                           ;tela_CONFIG_PRESSAO.h: 77: break;
 10497  001AC8  D010               	goto	l850
 10498  001ACA                     l845:
 10499  001ACA  FFFF               	dw	65535	; assembler added errata NOP
 10500                           
 10501                           ; BSR set to: 0
 10502  001ACC  0100               	movlb	0	; () banked
 10503  001ACE  51E0               	movf	_option_posi& (0+255),w,b
 10504                           
 10505                           ; Switch size 1, requested type "space"
 10506                           ; Number of cases is 4, Range of values is 0 to 3
 10507                           ; switch strategies available:
 10508                           ; Name         Instructions Cycles
 10509                           ; simple_byte           13     7 (average)
 10510                           ;	Chosen strategy is simple_byte
 10511  001AD0  0A00               	xorlw	0	; case 0
 10512  001AD2  B4D8               	btfsc	status,2,c
 10513  001AD4  D766               	goto	l846
 10514  001AD6  0A01               	xorlw	1	; case 1
 10515  001AD8  B4D8               	btfsc	status,2,c
 10516  001ADA  D787               	goto	l851
 10517  001ADC  0A03               	xorlw	3	; case 2
 10518  001ADE  B4D8               	btfsc	status,2,c
 10519  001AE0  D7A8               	goto	l855
 10520  001AE2  0A01               	xorlw	1	; case 3
 10521  001AE4  B4D8               	btfsc	status,2,c
 10522  001AE6  D7C9               	goto	l859
 10523  001AE8  D7EC               	goto	l863
 10524  001AEA                     l850:
 10525  001AEA  FFFF               	dw	65535	; assembler added errata NOP
 10526                           
 10527                           ; BSR set to: 0
 10528                           
 10529                           ; BSR set to: 0
 10530  001AEC  0012               	return		;funcret
 10531  001AEE  FFFF               	dw	65535	; errata NOP
 10532  001AF0                     __end_of_ajusteSP_Bombas:
 10533                           	opt stack 0
 10534                           tblptru	equ	0xFF8
 10535                           tblptrh	equ	0xFF7
 10536                           tblptrl	equ	0xFF6
 10537                           tablat	equ	0xFF5
 10538                           prodh	equ	0xFF4
 10539                           prodl	equ	0xFF3
 10540                           intcon	equ	0xFF2
 10541                           postinc0	equ	0xFEE
 10542                           wreg	equ	0xFE8
 10543                           postdec1	equ	0xFE5
 10544                           fsr1l	equ	0xFE1
 10545                           indf2	equ	0xFDF
 10546                           postinc2	equ	0xFDE
 10547                           fsr2h	equ	0xFDA
 10548                           fsr2l	equ	0xFD9
 10549                           status	equ	0xFD8
 10550                           
 10551 ;; *************** function _blink *****************
 10552 ;; Defined at:
 10553 ;;		line 173 in file "lcd.h"
 10554 ;; Parameters:    Size  Location     Type
 10555 ;;  line            2    0[BANK0 ] PTR unsigned char 
 10556 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
 10557 ;;  start           1    2[BANK0 ] unsigned char 
 10558 ;;  end             1    3[BANK0 ] unsigned char 
 10559 ;; Auto vars:     Size  Location     Type
 10560 ;;  i               1    4[BANK0 ] unsigned char 
 10561 ;; Return value:  Size  Location     Type
 10562 ;;                  1    wreg      void 
 10563 ;; Registers used:
 10564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10565 ;; Tracked objects:
 10566 ;;		On entry : 0/0
 10567 ;;		On exit  : 0/0
 10568 ;;		Unchanged: 0/0
 10569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10570 ;;      Params:         0       4       0       0       0       0       0
 10571 ;;      Locals:         0       1       0       0       0       0       0
 10572 ;;      Temps:          0       0       0       0       0       0       0
 10573 ;;      Totals:         0       5       0       0       0       0       0
 10574 ;;Total ram usage:        5 bytes
 10575 ;; Hardware stack levels used:    1
 10576 ;; Hardware stack levels required when called:    6
 10577 ;; This function calls:
 10578 ;;		Nothing
 10579 ;; This function is called by:
 10580 ;;		_telaPrincipal
 10581 ;;		_tela_ajusteRTC
 10582 ;;		_tela_testeBombas
 10583 ;;		_configuraTelefones
 10584 ;;		_configurarEstacionaria
 10585 ;;		_ajusteSP_Bombas
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           	psect	text29
 10590  007344                     __ptext29:
 10591                           	opt stack 0
 10592  007344                     _blink:
 10593                           	opt stack 0
 10594  007344  FFFF               	dw	65535	; assembler added errata NOP
 10595                           
 10596                           ;lcd.h: 174: if (blinkk) {
 10597                           
 10598                           ; BSR set to: 0
 10599                           ;incstack = 0
 10600  007346  0100               	movlb	0	; () banked
 10601  007348  51DB               	movf	_blinkk& (0+255),w,b
 10602  00734A  B4D8               	btfsc	status,2,c
 10603  00734C  D017               	goto	u6240
 10604                           
 10605                           ; BSR set to: 0
 10606                           ;lcd.h: 175: char i = 0;
 10607  00734E  0E00               	movlw	0
 10608  007350  6F84               	movwf	blink@i& (0+255),b
 10609                           
 10610                           ; BSR set to: 0
 10611                           ;lcd.h: 176: for (i = (--start); i < end; i++) {
 10612  007352  0782               	decf	blink@start& (0+255),f,b
 10613  007354  C082  F084         	movff	blink@start,blink@i
 10614  007358  D00C               	goto	l660
 10615  00735A  FFFF               	dw	65535	; assembler added errata NOP
 10616                           
 10617                           ; BSR set to: 0
 10618                           ;lcd.h: 177: line[i] = ' ';
 10619                           
 10620                           ; BSR set to: 0
 10621  00735C  5184               	movf	blink@i& (0+255),w,b
 10622  00735E  0D01               	mullw	1
 10623  007360  50F3               	movf	prodl,w,c
 10624  007362  2580               	addwf	blink@line& (0+255),w,b
 10625  007364  6ED9               	movwf	fsr2l,c
 10626  007366  50F4               	movf	prodh,w,c
 10627  007368  2181               	addwfc	(blink@line+1)& (0+255),w,b
 10628  00736A  6EDA               	movwf	fsr2h,c
 10629  00736C  0E20               	movlw	32
 10630  00736E  6EDF               	movwf	indf2,c
 10631                           
 10632                           ; BSR set to: 0
 10633  007370  2B84               	incf	blink@i& (0+255),f,b
 10634  007372                     l660:
 10635  007372  FFFF               	dw	65535	; assembler added errata NOP
 10636                           
 10637                           ; BSR set to: 0
 10638                           
 10639                           ; BSR set to: 0
 10640  007374  5183               	movf	blink@end& (0+255),w,b
 10641  007376  5D84               	subwf	blink@i& (0+255),w,b
 10642  007378  A0D8               	btfss	status,0,c
 10643  00737A  D7EF               	goto	l661
 10644  00737C                     u6240:
 10645  00737C  FFFF               	dw	65535	; assembler added errata NOP
 10646                           
 10647                           ; BSR set to: 0
 10648                           
 10649                           ; BSR set to: 0
 10650                           
 10651                           ; BSR set to: 0
 10652  00737E  0012               	return		;funcret
 10653  007380  FFFF               	dw	65535	; errata NOP
 10654  007382                     __end_of_blink:
 10655                           	opt stack 0
 10656                           tblptru	equ	0xFF8
 10657                           tblptrh	equ	0xFF7
 10658                           tblptrl	equ	0xFF6
 10659                           tablat	equ	0xFF5
 10660                           prodh	equ	0xFF4
 10661                           prodl	equ	0xFF3
 10662                           intcon	equ	0xFF2
 10663                           postinc0	equ	0xFEE
 10664                           wreg	equ	0xFE8
 10665                           postdec1	equ	0xFE5
 10666                           fsr1l	equ	0xFE1
 10667                           indf2	equ	0xFDF
 10668                           postinc2	equ	0xFDE
 10669                           fsr2h	equ	0xFDA
 10670                           fsr2l	equ	0xFD9
 10671                           status	equ	0xFD8
 10672                           
 10673 ;; *************** function _acaoTesteBombas *****************
 10674 ;; Defined at:
 10675 ;;		line 135 in file "controle.h"
 10676 ;; Parameters:    Size  Location     Type
 10677 ;;		None
 10678 ;; Auto vars:     Size  Location     Type
 10679 ;;  i               1   88[BANK0 ] unsigned char 
 10680 ;;  intervalo       1   87[BANK0 ] unsigned char 
 10681 ;; Return value:  Size  Location     Type
 10682 ;;                  1    wreg      void 
 10683 ;; Registers used:
 10684 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10685 ;; Tracked objects:
 10686 ;;		On entry : 0/0
 10687 ;;		On exit  : 0/0
 10688 ;;		Unchanged: 0/0
 10689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10690 ;;      Params:         0       0       0       0       0       0       0
 10691 ;;      Locals:         0      12       0       0       0       0       0
 10692 ;;      Temps:          0       5       0       0       0       0       0
 10693 ;;      Totals:         0      17       0       0       0       0       0
 10694 ;;Total ram usage:       17 bytes
 10695 ;; Hardware stack levels used:    1
 10696 ;; Hardware stack levels required when called:   10
 10697 ;; This function calls:
 10698 ;;		_btPress
 10699 ;;		_clearShiftREG
 10700 ;;		_drenarPressao
 10701 ;;		_enviaSMS
 10702 ;;		_intToFloatStr
 10703 ;;		_partidaBombaEstacionaria
 10704 ;;		_readEEPROM_ext
 10705 ;;		_salvarLOG
 10706 ;;		_sprintf
 10707 ;;		_writeEEPROM_ext
 10708 ;; This function is called by:
 10709 ;;		_main
 10710 ;; This function uses a non-reentrant model
 10711 ;;
 10712                           
 10713                           	psect	text30
 10714  000922                     __ptext30:
 10715                           	opt stack 0
 10716  000922                     _acaoTesteBombas:
 10717                           	opt stack 0
 10718  000922  FFFF               	dw	65535	; assembler added errata NOP
 10719                           
 10720                           ;controle.h: 136: if (btPress(1)) {
 10721                           
 10722                           ; BSR set to: 0
 10723                           ;incstack = 0
 10724  000924  0E01               	movlw	1
 10725  000926  EC43  F03C         	call	_btPress
 10726  00092A  0900               	iorlw	0
 10727  00092C  B4D8               	btfsc	status,2,c
 10728  00092E  D033               	goto	u7220
 10729                           
 10730                           ;controle.h: 137: executandoTeste = 0;
 10731  000930  0E00               	movlw	0
 10732  000932  0100               	movlb	0	; () banked
 10733  000934  6FF2               	movwf	_executandoTeste& (0+255),b
 10734                           
 10735                           ;controle.h: 138: gsmOcupado = 0;
 10736  000936  0E00               	movlw	0
 10737  000938  6FF4               	movwf	_gsmOcupado& (0+255),b
 10738                           
 10739                           ;controle.h: 139: etapaTesteBombas = 0;
 10740  00093A  0E00               	movlw	0
 10741  00093C  6E71               	movwf	_etapaTesteBombas,c
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;controle.h: 140: unsigned char intervalo = readEEPROM_ext(6);
 10745  00093E  0E06               	movlw	6
 10746  000940  EC21  F03B         	call	_readEEPROM_ext
 10747  000944  0100               	movlb	0	; () banked
 10748  000946  6FD7               	movwf	acaoTesteBombas@intervalo& (0+255),b
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;controle.h: 141: intervalo_teste_dia = intervalo > 0 ? intervalo : 1;
 10752  000948  51D7               	movf	acaoTesteBombas@intervalo& (0+255),w,b
 10753  00094A  A4D8               	btfss	status,2,c
 10754  00094C  D005               	goto	l513
 10755                           
 10756                           ; BSR set to: 0
 10757  00094E  0E00               	movlw	0
 10758  000950  6FD0               	movwf	(_acaoTesteBombas$1298+1)& (0+255),b
 10759  000952  0E01               	movlw	1
 10760  000954  6FCF               	movwf	_acaoTesteBombas$1298& (0+255),b
 10761  000956  D004               	goto	l515
 10762  000958                     l513:
 10763  000958  FFFF               	dw	65535	; assembler added errata NOP
 10764                           
 10765                           ; BSR set to: 0
 10766  00095A  C0D7  F0CF         	movff	acaoTesteBombas@intervalo,_acaoTesteBombas$1298
 10767  00095E  6BD0               	clrf	(_acaoTesteBombas$1298+1)& (0+255),b
 10768  000960                     l515:
 10769  000960  FFFF               	dw	65535	; assembler added errata NOP
 10770                           
 10771                           ; BSR set to: 0
 10772  000962  C0CF  F0E9         	movff	_acaoTesteBombas$1298,_intervalo_teste_dia
 10773                           
 10774                           ;controle.h: 142: menu_posi = _menu_posi;
 10775  000966  C0DE  F0DF         	movff	__menu_posi,_menu_posi
 10776                           
 10777                           ; BSR set to: 0
 10778                           ;controle.h: 143: char i = 0;
 10779  00096A  0E00               	movlw	0
 10780  00096C  6FD8               	movwf	acaoTesteBombas@i& (0+255),b
 10781                           
 10782                           ;controle.h: 144: for (i = 0; i < 8; i++) {
 10783  00096E  0E00               	movlw	0
 10784  000970  6FD8               	movwf	acaoTesteBombas@i& (0+255),b
 10785  000972                     l6592:
 10786  000972  FFFF               	dw	65535	; assembler added errata NOP
 10787                           
 10788                           ; BSR set to: 0
 10789  000974  0E07               	movlw	7
 10790  000976  65D8               	cpfsgt	acaoTesteBombas@i& (0+255),b
 10791  000978  D001               	goto	l516
 10792  00097A  D00D               	goto	u7220
 10793  00097C                     l516:
 10794  00097C  FFFF               	dw	65535	; assembler added errata NOP
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;controle.h: 145: shift[i] = 0;
 10798                           
 10799                           ; BSR set to: 0
 10800  00097E  51D8               	movf	acaoTesteBombas@i& (0+255),w,b
 10801  000980  0D01               	mullw	1
 10802  000982  0E44               	movlw	low _shift
 10803  000984  24F3               	addwf	prodl,w,c
 10804  000986  6ED9               	movwf	fsr2l,c
 10805  000988  0E00               	movlw	high _shift
 10806  00098A  20F4               	addwfc	prodh,w,c
 10807  00098C  6EDA               	movwf	fsr2h,c
 10808  00098E  0E00               	movlw	0
 10809  000990  6EDF               	movwf	indf2,c
 10810                           
 10811                           ; BSR set to: 0
 10812  000992  2BD8               	incf	acaoTesteBombas@i& (0+255),f,b
 10813  000994  D7EE               	goto	l6592
 10814  000996                     u7220:
 10815  000996  FFFF               	dw	65535	; assembler added errata NOP
 10816                           
 10817                           ;controle.h: 146: }
 10818                           ;controle.h: 147: }
 10819                           ;controle.h: 149: if (etapaTesteBombas < 10) {
 10820                           
 10821                           ; BSR set to: 0
 10822                           
 10823                           ; BSR set to: 0
 10824  000998  0E0A               	movlw	10
 10825  00099A  6071               	cpfslt	_etapaTesteBombas,c
 10826  00099C  D1EC               	goto	l519
 10827                           
 10828                           ;controle.h: 150: sprintf(&line1[4], "Aguarde... %ds", timerTesteBombas);
 10829  00099E  0E7F               	movlw	low (_line1+4)
 10830  0009A0  0100               	movlb	0	; () banked
 10831  0009A2  6FA1               	movwf	sprintf@wh& (0+255),b
 10832  0009A4  0E01               	movlw	high (_line1+4)
 10833  0009A6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10834  0009A8  0E83               	movlw	low STR_38
 10835  0009AA  6FA3               	movwf	sprintf@f& (0+255),b
 10836  0009AC  0E7E               	movlw	high STR_38
 10837  0009AE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10838  0009B0  C0D9  F0A5         	movff	_timerTesteBombas,?_sprintf+4
 10839  0009B4  C0DA  F0A6         	movff	_timerTesteBombas+1,?_sprintf+5
 10840  0009B8  EC89  F03A         	call	_sprintf	;wreg free
 10841                           
 10842                           ;controle.h: 151: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 10843  0009BC  0100               	movlb	0	; () banked
 10844  0009BE  51F8               	movf	_pressao& (0+255),w,b
 10845  0009C0  EC5C  F01F         	call	_intToFloatStr
 10846  0009C4  C0B5  F0CD         	movff	?_intToFloatStr,_acaoTesteBombas$2365
 10847  0009C8  C0B6  F0CE         	movff	?_intToFloatStr+1,_acaoTesteBombas$2365+1
 10848                           
 10849                           ;controle.h: 151: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 10850  0009CC  0E68               	movlw	low (_line2+2)
 10851  0009CE  0100               	movlb	0	; () banked
 10852  0009D0  6FA1               	movwf	sprintf@wh& (0+255),b
 10853  0009D2  0E01               	movlw	high (_line2+2)
 10854  0009D4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10855  0009D6  0E38               	movlw	low STR_39
 10856  0009D8  6FA3               	movwf	sprintf@f& (0+255),b
 10857  0009DA  0E7E               	movlw	high STR_39
 10858  0009DC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10859  0009DE  C0CD  F0A5         	movff	_acaoTesteBombas$2365,?_sprintf+4
 10860  0009E2  C0CE  F0A6         	movff	_acaoTesteBombas$2365+1,?_sprintf+5
 10861  0009E6  EC89  F03A         	call	_sprintf	;wreg free
 10862                           
 10863                           ;controle.h: 152: }
 10864                           ;controle.h: 154: switch (etapaTesteBombas) {
 10865  0009EA  D1C5               	goto	l519
 10866  0009EC  FFFF               	dw	65535	; assembler added errata NOP
 10867                           
 10868                           ;controle.h: 156: dias_restante_teste = 0;
 10869  0009EE  0E00               	movlw	0
 10870  0009F0  0100               	movlb	0	; () banked
 10871  0009F2  6FE8               	movwf	_dias_restante_teste& (0+255),b
 10872                           
 10873                           ; BSR set to: 0
 10874                           ;controle.h: 157: writeEEPROM_ext(10, dias_restante_teste);
 10875  0009F4  C0E8  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
 10876  0009F8  0E0A               	movlw	10
 10877  0009FA  EC66  F03A         	call	_writeEEPROM_ext
 10878                           
 10879                           ;controle.h: 158: shift[2] = 1;
 10880  0009FE  0E01               	movlw	1
 10881  000A00  6E46               	movwf	_shift+2,c
 10882                           
 10883                           ;controle.h: 159: timerTesteBombas = 30;
 10884  000A02  0E00               	movlw	0
 10885  000A04  0100               	movlb	0	; () banked
 10886  000A06  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 10887  000A08  0E1E               	movlw	30
 10888  000A0A  6FD9               	movwf	_timerTesteBombas& (0+255),b
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;controle.h: 160: etapaTesteBombas = 1;
 10892  000A0C  0E01               	movlw	1
 10893  000A0E  D112               	goto	L24
 10894  000A10  FFFF               	dw	65535	; assembler added errata NOP
 10895                           
 10896                           ;controle.h: 163: drenarPressao();
 10897                           
 10898                           ; BSR set to: 0
 10899  000A12  EC33  F038         	call	_drenarPressao	;wreg free
 10900                           
 10901                           ;controle.h: 164: if (pressao <= (sp_pressao_rede - 10)) {
 10902  000A16  0EF6               	movlw	246
 10903  000A18  0100               	movlb	0	; () banked
 10904  000A1A  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 10905  000A1C  0EFF               	movlw	255
 10906  000A1E  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 10907  000A20  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 10908  000A22  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 10909  000A24  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 10910  000A26  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 10911  000A28  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 10912  000A2A  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 10913  000A2C  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 10914  000A2E  51F8               	movf	_pressao& (0+255),w,b
 10915  000A30  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 10916  000A32  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 10917  000A34  0A80               	xorlw	128
 10918  000A36  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 10919  000A38  51F9               	movf	(_pressao+1)& (0+255),w,b
 10920  000A3A  0A80               	xorlw	128
 10921  000A3C  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 10922  000A3E  A0D8               	btfss	status,0,c
 10923  000A40  D1C4               	goto	l521
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;controle.h: 165: shift[2] = 0;
 10927  000A42  0E00               	movlw	0
 10928  000A44  6E46               	movwf	_shift+2,c
 10929                           
 10930                           ;controle.h: 166: shift[6] = 1;
 10931  000A46  0E01               	movlw	1
 10932  000A48  6E4A               	movwf	_shift+6,c
 10933                           
 10934                           ;controle.h: 167: etapaTesteBombas = 2;
 10935  000A4A  0E02               	movlw	2
 10936  000A4C  D04C               	goto	L29
 10937  000A4E  FFFF               	dw	65535	; assembler added errata NOP
 10938                           
 10939                           ;controle.h: 172: sprintf(line4, "Bomba Jockey...");
 10940                           
 10941                           ; BSR set to: 0
 10942  000A50  0E3C               	movlw	low _line4
 10943  000A52  0100               	movlb	0	; () banked
 10944  000A54  6FA1               	movwf	sprintf@wh& (0+255),b
 10945  000A56  0E01               	movlw	high _line4
 10946  000A58  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10947  000A5A  0E18               	movlw	low STR_40
 10948  000A5C  6FA3               	movwf	sprintf@f& (0+255),b
 10949  000A5E  0E7E               	movlw	high STR_40
 10950  000A60  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10951  000A62  EC89  F03A         	call	_sprintf	;wreg free
 10952                           
 10953                           ;controle.h: 173: if (pressao >= sp_pressao_rede) {
 10954  000A66  0100               	movlb	0	; () banked
 10955  000A68  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 10956  000A6A  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 10957  000A6C  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 10958  000A6E  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 10959  000A70  5DF8               	subwf	_pressao& (0+255),w,b
 10960  000A72  51F9               	movf	(_pressao+1)& (0+255),w,b
 10961  000A74  0A80               	xorlw	128
 10962  000A76  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 10963  000A78  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 10964  000A7A  0A80               	xorlw	128
 10965  000A7C  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 10966  000A7E  A0D8               	btfss	status,0,c
 10967  000A80  D006               	goto	l525
 10968                           
 10969                           ; BSR set to: 0
 10970                           ;controle.h: 174: shift[6] = 0;
 10971  000A82  0E00               	movlw	0
 10972  000A84  6E4A               	movwf	_shift+6,c
 10973                           
 10974                           ;controle.h: 175: status_jockey = 1;
 10975  000A86  0E01               	movlw	1
 10976  000A88  6FFD               	movwf	_status_jockey& (0+255),b
 10977                           
 10978                           ;controle.h: 176: etapaTesteBombas = 3;
 10979  000A8A  0E03               	movlw	3
 10980  000A8C  6E71               	movwf	_etapaTesteBombas,c
 10981  000A8E                     l525:
 10982  000A8E  FFFF               	dw	65535	; assembler added errata NOP
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;controle.h: 177: }
 10986                           ;controle.h: 178: if (!timerTesteBombas) {
 10987                           
 10988                           ; BSR set to: 0
 10989  000A90  51D9               	movf	_timerTesteBombas& (0+255),w,b
 10990  000A92  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 10991  000A94  A4D8               	btfss	status,2,c
 10992  000A96  D199               	goto	l521
 10993                           
 10994                           ; BSR set to: 0
 10995                           ;controle.h: 179: status_jockey = 0;
 10996  000A98  0E00               	movlw	0
 10997  000A9A  6FFD               	movwf	_status_jockey& (0+255),b
 10998                           
 10999                           ;controle.h: 180: etapaTesteBombas = 3;
 11000  000A9C  0E03               	movlw	3
 11001  000A9E  D051               	goto	L46
 11002  000AA0  FFFF               	dw	65535	; assembler added errata NOP
 11003                           
 11004                           ;controle.h: 185: shift[2] = 1;
 11005                           
 11006                           ; BSR set to: 0
 11007  000AA2  0E01               	movlw	1
 11008  000AA4  6E46               	movwf	_shift+2,c
 11009                           
 11010                           ;controle.h: 186: etapaTesteBombas = 4;
 11011  000AA6  0E04               	movlw	4
 11012  000AA8  D0C5               	goto	L24
 11013  000AAA  FFFF               	dw	65535	; assembler added errata NOP
 11014                           
 11015                           ;controle.h: 189: drenarPressao();
 11016  000AAC  EC33  F038         	call	_drenarPressao	;wreg free
 11017                           
 11018                           ;controle.h: 190: if (pressao <= (sp_pressao_rede - 10)) {
 11019  000AB0  0EF6               	movlw	246
 11020  000AB2  0100               	movlb	0	; () banked
 11021  000AB4  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11022  000AB6  0EFF               	movlw	255
 11023  000AB8  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11024  000ABA  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 11025  000ABC  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11026  000ABE  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11027  000AC0  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11028  000AC2  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11029  000AC4  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11030  000AC6  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11031  000AC8  51F8               	movf	_pressao& (0+255),w,b
 11032  000ACA  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11033  000ACC  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11034  000ACE  0A80               	xorlw	128
 11035  000AD0  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11036  000AD2  51F9               	movf	(_pressao+1)& (0+255),w,b
 11037  000AD4  0A80               	xorlw	128
 11038  000AD6  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11039  000AD8  A0D8               	btfss	status,0,c
 11040  000ADA  D177               	goto	l521
 11041                           
 11042                           ; BSR set to: 0
 11043                           ;controle.h: 191: shift[5] = 1;
 11044  000ADC  0E01               	movlw	1
 11045  000ADE  6E49               	movwf	_shift+5,c
 11046                           
 11047                           ;controle.h: 192: shift[2] = 0;
 11048  000AE0  0E00               	movlw	0
 11049  000AE2  6E46               	movwf	_shift+2,c
 11050                           
 11051                           ;controle.h: 193: etapaTesteBombas = 5;
 11052  000AE4  0E05               	movlw	5
 11053  000AE6                     L29:
 11054  000AE6  FFFF               	dw	65535	; assembler added errata NOP
 11055  000AE8  6E71               	movwf	_etapaTesteBombas,c
 11056                           
 11057                           ;controle.h: 194: timerTesteBombas = 50;
 11058  000AEA  0E00               	movlw	0
 11059  000AEC  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11060  000AEE  0E32               	movlw	50
 11061  000AF0  D02D               	goto	L23
 11062  000AF2  FFFF               	dw	65535	; assembler added errata NOP
 11063                           
 11064                           ;controle.h: 198: sprintf(line4, "Bomba Principal...");
 11065                           
 11066                           ; BSR set to: 0
 11067  000AF4  0E3C               	movlw	low _line4
 11068  000AF6  0100               	movlb	0	; () banked
 11069  000AF8  6FA1               	movwf	sprintf@wh& (0+255),b
 11070  000AFA  0E01               	movlw	high _line4
 11071  000AFC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11072  000AFE  0EF8               	movlw	low STR_41
 11073  000B00  6FA3               	movwf	sprintf@f& (0+255),b
 11074  000B02  0E7C               	movlw	high STR_41
 11075  000B04  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11076  000B06  EC89  F03A         	call	_sprintf	;wreg free
 11077                           
 11078                           ;controle.h: 199: if (pressao >= sp_pressao_rede) {
 11079  000B0A  0100               	movlb	0	; () banked
 11080  000B0C  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 11081  000B0E  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11082  000B10  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11083  000B12  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11084  000B14  5DF8               	subwf	_pressao& (0+255),w,b
 11085  000B16  51F9               	movf	(_pressao+1)& (0+255),w,b
 11086  000B18  0A80               	xorlw	128
 11087  000B1A  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11088  000B1C  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11089  000B1E  0A80               	xorlw	128
 11090  000B20  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11091  000B22  A0D8               	btfss	status,0,c
 11092  000B24  D006               	goto	l531
 11093                           
 11094                           ; BSR set to: 0
 11095                           ;controle.h: 200: shift[5] = 0;
 11096  000B26  0E00               	movlw	0
 11097  000B28  6E49               	movwf	_shift+5,c
 11098                           
 11099                           ;controle.h: 201: status_principal = 1;
 11100  000B2A  0E01               	movlw	1
 11101  000B2C  6FFC               	movwf	_status_principal& (0+255),b
 11102                           
 11103                           ;controle.h: 202: etapaTesteBombas = 6;
 11104  000B2E  0E06               	movlw	6
 11105  000B30  6E71               	movwf	_etapaTesteBombas,c
 11106  000B32                     l531:
 11107  000B32  FFFF               	dw	65535	; assembler added errata NOP
 11108                           
 11109                           ; BSR set to: 0
 11110                           ;controle.h: 203: }
 11111                           ;controle.h: 204: if (!timerTesteBombas) {
 11112                           
 11113                           ; BSR set to: 0
 11114  000B34  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11115  000B36  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11116  000B38  A4D8               	btfss	status,2,c
 11117  000B3A  D147               	goto	l521
 11118                           
 11119                           ; BSR set to: 0
 11120                           ;controle.h: 205: status_principal = 0;
 11121  000B3C  0E00               	movlw	0
 11122  000B3E  6FFC               	movwf	_status_principal& (0+255),b
 11123                           
 11124                           ;controle.h: 206: etapaTesteBombas = 6;
 11125  000B40  0E06               	movlw	6
 11126  000B42                     L46:
 11127  000B42  FFFF               	dw	65535	; assembler added errata NOP
 11128  000B44  6E71               	movwf	_etapaTesteBombas,c
 11129                           
 11130                           ;controle.h: 207: timerTesteBombas = 30;
 11131  000B46  0E00               	movlw	0
 11132  000B48  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11133  000B4A  0E1E               	movlw	30
 11134  000B4C                     L23:
 11135  000B4C  FFFF               	dw	65535	; assembler added errata NOP
 11136  000B4E  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11137                           
 11138                           ; BSR set to: 0
 11139                           ;controle.h: 208: }
 11140                           ;controle.h: 209: break;
 11141  000B50  D13C               	goto	l521
 11142  000B52  FFFF               	dw	65535	; assembler added errata NOP
 11143                           
 11144                           ;controle.h: 211: shift[2] = 1;
 11145                           
 11146                           ; BSR set to: 0
 11147  000B54  0E01               	movlw	1
 11148  000B56  6E46               	movwf	_shift+2,c
 11149                           
 11150                           ;controle.h: 212: etapaTesteBombas = 7;
 11151  000B58  0E07               	movlw	7
 11152  000B5A  D06C               	goto	L24
 11153  000B5C  FFFF               	dw	65535	; assembler added errata NOP
 11154                           
 11155                           ;controle.h: 215: drenarPressao();
 11156  000B5E  EC33  F038         	call	_drenarPressao	;wreg free
 11157                           
 11158                           ;controle.h: 216: if (pressao <= (sp_pressao_rede - 10)) {
 11159  000B62  0EF6               	movlw	246
 11160  000B64  0100               	movlb	0	; () banked
 11161  000B66  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11162  000B68  0EFF               	movlw	255
 11163  000B6A  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11164  000B6C  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 11165  000B6E  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11166  000B70  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11167  000B72  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11168  000B74  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11169  000B76  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11170  000B78  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11171  000B7A  51F8               	movf	_pressao& (0+255),w,b
 11172  000B7C  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11173  000B7E  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11174  000B80  0A80               	xorlw	128
 11175  000B82  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11176  000B84  51F9               	movf	(_pressao+1)& (0+255),w,b
 11177  000B86  0A80               	xorlw	128
 11178  000B88  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11179  000B8A  A0D8               	btfss	status,0,c
 11180  000B8C  D11E               	goto	l521
 11181                           
 11182                           ; BSR set to: 0
 11183                           ;controle.h: 217: shift[2] = 0;
 11184  000B8E  0E00               	movlw	0
 11185  000B90  6E46               	movwf	_shift+2,c
 11186                           
 11187                           ;controle.h: 218: etapaTesteBombas = 8;
 11188  000B92  0E08               	movlw	8
 11189  000B94  6E71               	movwf	_etapaTesteBombas,c
 11190                           
 11191                           ; BSR set to: 0
 11192                           ;controle.h: 219: timerTesteBombas = tempo_limite_partida;
 11193  000B96  C06B  F0D9         	movff	_tempo_limite_partida,_timerTesteBombas
 11194  000B9A  6BDA               	clrf	(_timerTesteBombas+1)& (0+255),b
 11195                           
 11196                           ; BSR set to: 0
 11197                           ;controle.h: 220: }
 11198                           ;controle.h: 221: break;
 11199  000B9C  D116               	goto	l521
 11200  000B9E  FFFF               	dw	65535	; assembler added errata NOP
 11201                           
 11202                           ;controle.h: 223: sprintf(line4, "Bomba Combustao...");
 11203                           
 11204                           ; BSR set to: 0
 11205  000BA0  0E3C               	movlw	low _line4
 11206  000BA2  0100               	movlb	0	; () banked
 11207  000BA4  6FA1               	movwf	sprintf@wh& (0+255),b
 11208  000BA6  0E01               	movlw	high _line4
 11209  000BA8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11210  000BAA  0E0B               	movlw	low STR_42
 11211  000BAC  6FA3               	movwf	sprintf@f& (0+255),b
 11212  000BAE  0E7D               	movlw	high STR_42
 11213  000BB0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11214  000BB2  EC89  F03A         	call	_sprintf	;wreg free
 11215                           
 11216                           ;controle.h: 224: partidaBombaEstacionaria(1);
 11217  000BB6  0E01               	movlw	1
 11218  000BB8  ECC4  F01B         	call	_partidaBombaEstacionaria
 11219                           
 11220                           ;controle.h: 226: if (flagEstacionariaLigada || pressao >= sp_pressao_rede) {
 11221  000BBC  0100               	movlb	0	; () banked
 11222  000BBE  51F1               	movf	_flagEstacionariaLigada& (0+255),w,b
 11223  000BC0  A4D8               	btfss	status,2,c
 11224  000BC2  D00D               	goto	u7320
 11225                           
 11226                           ; BSR set to: 0
 11227  000BC4  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 11228  000BC6  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11229  000BC8  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11230  000BCA  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11231  000BCC  5DF8               	subwf	_pressao& (0+255),w,b
 11232  000BCE  51F9               	movf	(_pressao+1)& (0+255),w,b
 11233  000BD0  0A80               	xorlw	128
 11234  000BD2  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11235  000BD4  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11236  000BD6  0A80               	xorlw	128
 11237  000BD8  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11238  000BDA  A0D8               	btfss	status,0,c
 11239  000BDC  D008               	goto	l537
 11240  000BDE                     u7320:
 11241  000BDE  FFFF               	dw	65535	; assembler added errata NOP
 11242                           
 11243                           ; BSR set to: 0
 11244                           ;controle.h: 227: status_estacionaria = 1;
 11245                           
 11246                           ; BSR set to: 0
 11247  000BE0  0E01               	movlw	1
 11248  000BE2  6FFB               	movwf	_status_estacionaria& (0+255),b
 11249                           
 11250                           ; BSR set to: 0
 11251                           ;controle.h: 228: timerTesteBombas = tempo_limite_teste_estacionaria;
 11252  000BE4  C0E5  F0D9         	movff	_tempo_limite_teste_estacionaria,_timerTesteBombas
 11253  000BE8  6BDA               	clrf	(_timerTesteBombas+1)& (0+255),b
 11254                           
 11255                           ;controle.h: 229: etapaTesteBombas = 9;
 11256  000BEA  0E09               	movlw	9
 11257  000BEC  6E71               	movwf	_etapaTesteBombas,c
 11258  000BEE                     l537:
 11259  000BEE  FFFF               	dw	65535	; assembler added errata NOP
 11260                           
 11261                           ; BSR set to: 0
 11262                           ;controle.h: 230: }
 11263                           ;controle.h: 231: if (status_estacionaria == 0 || !timerTesteBombas) {
 11264  000BF0  51FB               	movf	_status_estacionaria& (0+255),w,b
 11265  000BF2  B4D8               	btfsc	status,2,c
 11266  000BF4  D004               	goto	u7340
 11267                           
 11268                           ; BSR set to: 0
 11269  000BF6  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11270  000BF8  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11271  000BFA  A4D8               	btfss	status,2,c
 11272  000BFC  D0E6               	goto	l521
 11273  000BFE                     u7340:
 11274  000BFE  FFFF               	dw	65535	; assembler added errata NOP
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;controle.h: 232: etapaTesteBombas = 10;
 11278                           
 11279                           ; BSR set to: 0
 11280  000C00  0E0A               	movlw	10
 11281  000C02  6E71               	movwf	_etapaTesteBombas,c
 11282                           
 11283                           ;controle.h: 233: status_estacionaria = 0;
 11284  000C04  0E00               	movlw	0
 11285  000C06  6FFB               	movwf	_status_estacionaria& (0+255),b
 11286                           
 11287                           ; BSR set to: 0
 11288                           ;controle.h: 234: }
 11289                           ;controle.h: 235: break;
 11290  000C08  D0E0               	goto	l521
 11291  000C0A  FFFF               	dw	65535	; assembler added errata NOP
 11292                           
 11293                           ;controle.h: 237: sprintf(line4, "Bomba Ligada...");
 11294                           
 11295                           ; BSR set to: 0
 11296  000C0C  0E3C               	movlw	low _line4
 11297  000C0E  0100               	movlb	0	; () banked
 11298  000C10  6FA1               	movwf	sprintf@wh& (0+255),b
 11299  000C12  0E01               	movlw	high _line4
 11300  000C14  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11301  000C16  0E08               	movlw	low STR_43
 11302  000C18  6FA3               	movwf	sprintf@f& (0+255),b
 11303  000C1A  0E7E               	movlw	high STR_43
 11304  000C1C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11305  000C1E  EC89  F03A         	call	_sprintf	;wreg free
 11306                           
 11307                           ;controle.h: 238: partidaBombaEstacionaria(1);
 11308  000C22  0E01               	movlw	1
 11309  000C24  ECC4  F01B         	call	_partidaBombaEstacionaria
 11310                           
 11311                           ;controle.h: 239: if (!timerTesteBombas) {
 11312  000C28  0100               	movlb	0	; () banked
 11313  000C2A  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11314  000C2C  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11315  000C2E  A4D8               	btfss	status,2,c
 11316  000C30  D0CC               	goto	l521
 11317                           
 11318                           ; BSR set to: 0
 11319                           ;controle.h: 240: etapaTesteBombas = 10;
 11320  000C32  0E0A               	movlw	10
 11321  000C34                     L24:
 11322  000C34  FFFF               	dw	65535	; assembler added errata NOP
 11323  000C36  6E71               	movwf	_etapaTesteBombas,c
 11324                           
 11325                           ; BSR set to: 0
 11326                           ;controle.h: 241: }
 11327                           ;controle.h: 242: break;
 11328  000C38  D0C8               	goto	l521
 11329  000C3A  FFFF               	dw	65535	; assembler added errata NOP
 11330                           
 11331                           ;controle.h: 244: salvarLOG();
 11332                           
 11333                           ; BSR set to: 0
 11334  000C3C  EC64  F01D         	call	_salvarLOG	;wreg free
 11335                           
 11336                           ;controle.h: 245: partidaBombaEstacionaria(2);
 11337  000C40  0E02               	movlw	2
 11338  000C42  ECC4  F01B         	call	_partidaBombaEstacionaria
 11339                           
 11340                           ;controle.h: 246: clearShiftREG();
 11341  000C46  EC9E  F038         	call	_clearShiftREG	;wreg free
 11342                           
 11343                           ;controle.h: 247: etapaTesteBombas = 11;
 11344  000C4A  0E0B               	movlw	11
 11345  000C4C  6E71               	movwf	_etapaTesteBombas,c
 11346                           
 11347                           ;controle.h: 248: timerTesteBombas = 10;
 11348  000C4E  0E00               	movlw	0
 11349  000C50  0100               	movlb	0	; () banked
 11350  000C52  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11351  000C54  0E0A               	movlw	10
 11352  000C56  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11353                           
 11354                           ; BSR set to: 0
 11355                           ;controle.h: 249: executandoTeste = 0;
 11356  000C58  0E00               	movlw	0
 11357  000C5A  6FF2               	movwf	_executandoTeste& (0+255),b
 11358                           
 11359                           ;controle.h: 250: break;
 11360  000C5C  D0B6               	goto	l521
 11361  000C5E  FFFF               	dw	65535	; assembler added errata NOP
 11362                           
 11363                           ;controle.h: 252: sprintf(&line1[2], "Teste Concluido!");
 11364                           
 11365                           ; BSR set to: 0
 11366  000C60  0E7D               	movlw	low (_line1+2)
 11367  000C62  0100               	movlb	0	; () banked
 11368  000C64  6FA1               	movwf	sprintf@wh& (0+255),b
 11369  000C66  0E01               	movlw	high (_line1+2)
 11370  000C68  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11371  000C6A  0EC5               	movlw	low STR_44
 11372  000C6C  6FA3               	movwf	sprintf@f& (0+255),b
 11373  000C6E  0E7D               	movlw	high STR_44
 11374  000C70  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11375  000C72  EC89  F03A         	call	_sprintf	;wreg free
 11376                           
 11377                           ;controle.h: 253: sprintf(line2, "JOKEY : %s", status_jockey == 1 ? "OK" : "ERRO");
 11378  000C76  0100               	movlb	0	; () banked
 11379  000C78  05FD               	decf	_status_jockey& (0+255),w,b
 11380  000C7A  B4D8               	btfsc	status,2,c
 11381  000C7C  D004               	goto	l548
 11382                           
 11383                           ; BSR set to: 0
 11384  000C7E  0EE2               	movlw	low STR_47
 11385  000C80  6FD1               	movwf	_acaoTesteBombas$1314& (0+255),b
 11386  000C82  0E7F               	movlw	high STR_47
 11387  000C84  D004               	goto	L25
 11388  000C86                     l548:
 11389  000C86  FFFF               	dw	65535	; assembler added errata NOP
 11390                           
 11391                           ; BSR set to: 0
 11392                           
 11393                           ; BSR set to: 0
 11394  000C88  0EF9               	movlw	low STR_5
 11395  000C8A  6FD1               	movwf	_acaoTesteBombas$1314& (0+255),b
 11396  000C8C  0E7F               	movlw	high STR_5
 11397  000C8E                     L25:
 11398  000C8E  FFFF               	dw	65535	; assembler added errata NOP
 11399  000C90  6FD2               	movwf	(_acaoTesteBombas$1314+1)& (0+255),b
 11400                           
 11401                           ; BSR set to: 0
 11402                           
 11403                           ; BSR set to: 0
 11404  000C92  0E66               	movlw	low _line2
 11405  000C94  6FA1               	movwf	sprintf@wh& (0+255),b
 11406  000C96  0E01               	movlw	high _line2
 11407  000C98  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11408  000C9A  0E40               	movlw	low STR_45
 11409  000C9C  6FA3               	movwf	sprintf@f& (0+255),b
 11410  000C9E  0E7F               	movlw	high STR_45
 11411  000CA0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11412  000CA2  C0D1  F0A5         	movff	_acaoTesteBombas$1314,?_sprintf+4
 11413  000CA6  C0D2  F0A6         	movff	_acaoTesteBombas$1314+1,?_sprintf+5
 11414  000CAA  EC89  F03A         	call	_sprintf	;wreg free
 11415                           
 11416                           ;controle.h: 254: sprintf(line3, "PRINCIPAL : %s", status_principal == 1 ? "OK" : "ERRO"
      +                          );
 11417  000CAE  0100               	movlb	0	; () banked
 11418  000CB0  05FC               	decf	_status_principal& (0+255),w,b
 11419  000CB2  B4D8               	btfsc	status,2,c
 11420  000CB4  D004               	goto	l552
 11421                           
 11422                           ; BSR set to: 0
 11423  000CB6  0EE2               	movlw	low STR_47
 11424  000CB8  6FD3               	movwf	_acaoTesteBombas$1319& (0+255),b
 11425  000CBA  0E7F               	movlw	high STR_47
 11426  000CBC  D004               	goto	L26
 11427  000CBE                     l552:
 11428  000CBE  FFFF               	dw	65535	; assembler added errata NOP
 11429                           
 11430                           ; BSR set to: 0
 11431                           
 11432                           ; BSR set to: 0
 11433  000CC0  0EF9               	movlw	low STR_5
 11434  000CC2  6FD3               	movwf	_acaoTesteBombas$1319& (0+255),b
 11435  000CC4  0E7F               	movlw	high STR_5
 11436  000CC6                     L26:
 11437  000CC6  FFFF               	dw	65535	; assembler added errata NOP
 11438  000CC8  6FD4               	movwf	(_acaoTesteBombas$1319+1)& (0+255),b
 11439                           
 11440                           ; BSR set to: 0
 11441                           
 11442                           ; BSR set to: 0
 11443  000CCA  0E51               	movlw	low _line3
 11444  000CCC  6FA1               	movwf	sprintf@wh& (0+255),b
 11445  000CCE  0E01               	movlw	high _line3
 11446  000CD0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11447  000CD2  0E65               	movlw	low STR_48
 11448  000CD4  6FA3               	movwf	sprintf@f& (0+255),b
 11449  000CD6  0E7E               	movlw	high STR_48
 11450  000CD8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11451  000CDA  C0D3  F0A5         	movff	_acaoTesteBombas$1319,?_sprintf+4
 11452  000CDE  C0D4  F0A6         	movff	_acaoTesteBombas$1319+1,?_sprintf+5
 11453  000CE2  EC89  F03A         	call	_sprintf	;wreg free
 11454                           
 11455                           ;controle.h: 255: sprintf(line4, "COMBUSTAO : %s", status_estacionaria == 1 ? "OK" : "ER
      +                          RO");
 11456  000CE6  0100               	movlb	0	; () banked
 11457  000CE8  05FB               	decf	_status_estacionaria& (0+255),w,b
 11458  000CEA  B4D8               	btfsc	status,2,c
 11459  000CEC  D004               	goto	l556
 11460                           
 11461                           ; BSR set to: 0
 11462  000CEE  0EE2               	movlw	low STR_47
 11463  000CF0  6FD5               	movwf	_acaoTesteBombas$1324& (0+255),b
 11464  000CF2  0E7F               	movlw	high STR_47
 11465  000CF4  D004               	goto	L27
 11466  000CF6                     l556:
 11467  000CF6  FFFF               	dw	65535	; assembler added errata NOP
 11468                           
 11469                           ; BSR set to: 0
 11470                           
 11471                           ; BSR set to: 0
 11472  000CF8  0EF9               	movlw	low STR_5
 11473  000CFA  6FD5               	movwf	_acaoTesteBombas$1324& (0+255),b
 11474  000CFC  0E7F               	movlw	high STR_5
 11475  000CFE                     L27:
 11476  000CFE  FFFF               	dw	65535	; assembler added errata NOP
 11477  000D00  6FD6               	movwf	(_acaoTesteBombas$1324+1)& (0+255),b
 11478                           
 11479                           ; BSR set to: 0
 11480                           
 11481                           ; BSR set to: 0
 11482  000D02  0E3C               	movlw	low _line4
 11483  000D04  6FA1               	movwf	sprintf@wh& (0+255),b
 11484  000D06  0E01               	movlw	high _line4
 11485  000D08  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11486  000D0A  0E74               	movlw	low STR_51
 11487  000D0C  6FA3               	movwf	sprintf@f& (0+255),b
 11488  000D0E  0E7E               	movlw	high STR_51
 11489  000D10  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11490  000D12  C0D5  F0A5         	movff	_acaoTesteBombas$1324,?_sprintf+4
 11491  000D16  C0D6  F0A6         	movff	_acaoTesteBombas$1324+1,?_sprintf+5
 11492  000D1A  EC89  F03A         	call	_sprintf	;wreg free
 11493                           
 11494                           ;controle.h: 256: if (!timerTesteBombas) {
 11495  000D1E  0100               	movlb	0	; () banked
 11496  000D20  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11497  000D22  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11498  000D24  A4D8               	btfss	status,2,c
 11499  000D26  D051               	goto	l521
 11500                           
 11501                           ; BSR set to: 0
 11502                           ;controle.h: 257: etapaTesteBombas = 12;
 11503  000D28  0E0C               	movlw	12
 11504  000D2A  6E71               	movwf	_etapaTesteBombas,c
 11505                           
 11506                           ;controle.h: 258: timerTesteBombas = 150;
 11507  000D2C  0E00               	movlw	0
 11508  000D2E  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 11509  000D30  0E96               	movlw	150
 11510  000D32  6FD9               	movwf	_timerTesteBombas& (0+255),b
 11511                           
 11512                           ;controle.h: 259: gsmOcupado = 1;
 11513  000D34  0E01               	movlw	1
 11514  000D36  6FF4               	movwf	_gsmOcupado& (0+255),b
 11515                           
 11516                           ; BSR set to: 0
 11517                           ;controle.h: 260: }
 11518                           ;controle.h: 261: break;
 11519  000D38  D048               	goto	l521
 11520  000D3A  FFFF               	dw	65535	; assembler added errata NOP
 11521                           
 11522                           ;controle.h: 263: sprintf(&line4[2], "enviando SMS...");
 11523                           
 11524                           ; BSR set to: 0
 11525  000D3C  0E3E               	movlw	low (_line4+2)
 11526  000D3E  0100               	movlb	0	; () banked
 11527  000D40  6FA1               	movwf	sprintf@wh& (0+255),b
 11528  000D42  0E01               	movlw	high (_line4+2)
 11529  000D44  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11530  000D46  0EF8               	movlw	low STR_54
 11531  000D48  6FA3               	movwf	sprintf@f& (0+255),b
 11532  000D4A  0E7D               	movlw	high STR_54
 11533  000D4C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11534  000D4E  EC89  F03A         	call	_sprintf	;wreg free
 11535                           
 11536                           ;controle.h: 264: enviaSMS(1);
 11537  000D52  0E01               	movlw	1
 11538  000D54  ECA5  F00A         	call	_enviaSMS
 11539                           
 11540                           ;controle.h: 265: if (!timerTesteBombas) {
 11541  000D58  0100               	movlb	0	; () banked
 11542  000D5A  51D9               	movf	_timerTesteBombas& (0+255),w,b
 11543  000D5C  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11544  000D5E  A4D8               	btfss	status,2,c
 11545  000D60  D034               	goto	l521
 11546                           
 11547                           ; BSR set to: 0
 11548                           ;controle.h: 266: menu_posi = 0;
 11549  000D62  0E00               	movlw	0
 11550  000D64  D005               	goto	L28
 11551  000D66  FFFF               	dw	65535	; assembler added errata NOP
 11552                           
 11553                           ;controle.h: 270: etapaTesteBombas = 0;
 11554                           
 11555                           ; BSR set to: 0
 11556  000D68  0E00               	movlw	0
 11557  000D6A  6E71               	movwf	_etapaTesteBombas,c
 11558                           
 11559                           ;controle.h: 271: menu_posi = 0;
 11560  000D6C  0E00               	movlw	0
 11561  000D6E  0100               	movlb	0	; () banked
 11562  000D70                     L28:
 11563  000D70  FFFF               	dw	65535	; assembler added errata NOP
 11564  000D72  6FDF               	movwf	_menu_posi& (0+255),b
 11565                           
 11566                           ; BSR set to: 0
 11567                           ;controle.h: 273: }
 11568                           
 11569                           ;controle.h: 272: break;
 11570  000D74  D02A               	goto	l521
 11571  000D76                     l519:
 11572  000D76  FFFF               	dw	65535	; assembler added errata NOP
 11573                           
 11574                           ; BSR set to: 0
 11575  000D78  5071               	movf	_etapaTesteBombas,w,c
 11576                           
 11577                           ; Switch size 1, requested type "space"
 11578                           ; Number of cases is 13, Range of values is 0 to 12
 11579                           ; switch strategies available:
 11580                           ; Name         Instructions Cycles
 11581                           ; simple_byte           40    21 (average)
 11582                           ;	Chosen strategy is simple_byte
 11583  000D7A  0A00               	xorlw	0	; case 0
 11584  000D7C  B4D8               	btfsc	status,2,c
 11585  000D7E  D636               	goto	l520
 11586  000D80  0A01               	xorlw	1	; case 1
 11587  000D82  B4D8               	btfsc	status,2,c
 11588  000D84  D645               	goto	l522
 11589  000D86  0A03               	xorlw	3	; case 2
 11590  000D88  B4D8               	btfsc	status,2,c
 11591  000D8A  D661               	goto	l524
 11592  000D8C  0A01               	xorlw	1	; case 3
 11593  000D8E  B4D8               	btfsc	status,2,c
 11594  000D90  D687               	goto	l527
 11595  000D92  0A07               	xorlw	7	; case 4
 11596  000D94  B4D8               	btfsc	status,2,c
 11597  000D96  D689               	goto	l528
 11598  000D98  0A01               	xorlw	1	; case 5
 11599  000D9A  B4D8               	btfsc	status,2,c
 11600  000D9C  D6AA               	goto	l530
 11601  000D9E  0A03               	xorlw	3	; case 6
 11602  000DA0  B4D8               	btfsc	status,2,c
 11603  000DA2  D6D7               	goto	l533
 11604  000DA4  0A01               	xorlw	1	; case 7
 11605  000DA6  B4D8               	btfsc	status,2,c
 11606  000DA8  D6D9               	goto	l534
 11607  000DAA  0A0F               	xorlw	15	; case 8
 11608  000DAC  B4D8               	btfsc	status,2,c
 11609  000DAE  D6F7               	goto	l536
 11610  000DB0  0A01               	xorlw	1	; case 9
 11611  000DB2  B4D8               	btfsc	status,2,c
 11612  000DB4  D72A               	goto	l543
 11613  000DB6  0A03               	xorlw	3	; case 10
 11614  000DB8  B4D8               	btfsc	status,2,c
 11615  000DBA  D73F               	goto	l545
 11616  000DBC  0A01               	xorlw	1	; case 11
 11617  000DBE  B4D8               	btfsc	status,2,c
 11618  000DC0  D74E               	goto	l546
 11619  000DC2  0A07               	xorlw	7	; case 12
 11620  000DC4  B4D8               	btfsc	status,2,c
 11621  000DC6  D7B9               	goto	l560
 11622  000DC8  D7CE               	goto	l562
 11623  000DCA                     l521:
 11624  000DCA  FFFF               	dw	65535	; assembler added errata NOP
 11625  000DCC  0012               	return		;funcret
 11626  000DCE  FFFF               	dw	65535	; errata NOP
 11627  000DD0                     __end_of_acaoTesteBombas:
 11628                           	opt stack 0
 11629                           tblptru	equ	0xFF8
 11630                           tblptrh	equ	0xFF7
 11631                           tblptrl	equ	0xFF6
 11632                           tablat	equ	0xFF5
 11633                           prodh	equ	0xFF4
 11634                           prodl	equ	0xFF3
 11635                           intcon	equ	0xFF2
 11636                           postinc0	equ	0xFEE
 11637                           wreg	equ	0xFE8
 11638                           postdec1	equ	0xFE5
 11639                           fsr1l	equ	0xFE1
 11640                           indf2	equ	0xFDF
 11641                           postinc2	equ	0xFDE
 11642                           fsr2h	equ	0xFDA
 11643                           fsr2l	equ	0xFD9
 11644                           status	equ	0xFD8
 11645                           
 11646 ;; *************** function _salvarLOG *****************
 11647 ;; Defined at:
 11648 ;;		line 9 in file "logs.h"
 11649 ;; Parameters:    Size  Location     Type
 11650 ;;		None
 11651 ;; Auto vars:     Size  Location     Type
 11652 ;;  ultimoLogSal    2   15[BANK0 ] unsigned int 
 11653 ;; Return value:  Size  Location     Type
 11654 ;;                  1    wreg      void 
 11655 ;; Registers used:
 11656 ;;		wreg, status,2, status,0, cstack
 11657 ;; Tracked objects:
 11658 ;;		On entry : 0/0
 11659 ;;		On exit  : 0/0
 11660 ;;		Unchanged: 0/0
 11661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11662 ;;      Params:         0       0       0       0       0       0       0
 11663 ;;      Locals:         0       2       0       0       0       0       0
 11664 ;;      Temps:          0       1       0       0       0       0       0
 11665 ;;      Totals:         0       3       0       0       0       0       0
 11666 ;;Total ram usage:        3 bytes
 11667 ;; Hardware stack levels used:    1
 11668 ;; Hardware stack levels required when called:    9
 11669 ;; This function calls:
 11670 ;;		_readEEPROM_ext
 11671 ;;		_writeEEPROM_ext
 11672 ;; This function is called by:
 11673 ;;		_acaoTesteBombas
 11674 ;; This function uses a non-reentrant model
 11675 ;;
 11676                           
 11677                           	psect	text31
 11678  003AC8                     __ptext31:
 11679                           	opt stack 0
 11680  003AC8                     _salvarLOG:
 11681                           	opt stack 0
 11682  003AC8  FFFF               	dw	65535	; assembler added errata NOP
 11683                           
 11684                           ;logs.h: 10: unsigned int ultimoLogSalvo = readEEPROM_ext(14);
 11685                           
 11686                           ;incstack = 0
 11687  003ACA  0E0E               	movlw	14
 11688  003ACC  EC21  F03B         	call	_readEEPROM_ext
 11689  003AD0  0100               	movlb	0	; () banked
 11690  003AD2  6F8E               	movwf	??_salvarLOG& (0+255),b
 11691  003AD4  518E               	movf	??_salvarLOG& (0+255),w,b
 11692  003AD6  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 11693  003AD8  6B90               	clrf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 11694                           
 11695                           ; BSR set to: 0
 11696                           ;logs.h: 11: if (ultimoLogSalvo < 60 || ultimoLogSalvo > 250) {
 11697  003ADA  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 11698  003ADC  E104               	bnz	u6000
 11699  003ADE  0E3C               	movlw	60
 11700  003AE0  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11701  003AE2  A0D8               	btfss	status,0,c
 11702  003AE4  D006               	goto	u6010
 11703  003AE6                     u6000:
 11704                           
 11705                           ; BSR set to: 0
 11706  003AE6  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 11707  003AE8  E105               	bnz	l5778
 11708  003AEA  0EFB               	movlw	251
 11709  003AEC  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11710  003AEE  A0D8               	btfss	status,0,c
 11711  003AF0  D005               	goto	l407
 11712  003AF2                     u6010:
 11713  003AF2  FFFF               	dw	65535	; assembler added errata NOP
 11714  003AF4                     l5778:
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;logs.h: 12: ultimoLogSalvo = 60;
 11718  003AF4  0E00               	movlw	0
 11719  003AF6  6F90               	movwf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 11720  003AF8  0E3C               	movlw	60
 11721  003AFA  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 11722  003AFC                     l407:
 11723  003AFC  FFFF               	dw	65535	; assembler added errata NOP
 11724                           
 11725                           ; BSR set to: 0
 11726                           ;logs.h: 13: }
 11727                           ;logs.h: 14: writeEEPROM_ext(ultimoLogSalvo, _dia);
 11728                           
 11729                           ; BSR set to: 0
 11730  003AFE  C0EC  F08C         	movff	__dia,writeEEPROM_ext@data
 11731  003B02  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11732  003B04  EC66  F03A         	call	_writeEEPROM_ext
 11733                           
 11734                           ;logs.h: 15: writeEEPROM_ext(++ultimoLogSalvo, _mes);
 11735  003B08  C0EB  F08C         	movff	__mes,writeEEPROM_ext@data
 11736  003B0C  0100               	movlb	0	; () banked
 11737  003B0E  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 11738  003B10  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 11739  003B12  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11740  003B14  EC66  F03A         	call	_writeEEPROM_ext
 11741                           
 11742                           ;logs.h: 16: writeEEPROM_ext(++ultimoLogSalvo, _ano);
 11743  003B18  C0EA  F08C         	movff	__ano,writeEEPROM_ext@data
 11744  003B1C  0100               	movlb	0	; () banked
 11745  003B1E  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 11746  003B20  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 11747  003B22  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11748  003B24  EC66  F03A         	call	_writeEEPROM_ext
 11749                           
 11750                           ;logs.h: 17: writeEEPROM_ext(++ultimoLogSalvo, _hor);
 11751  003B28  C0ED  F08C         	movff	__hor,writeEEPROM_ext@data
 11752  003B2C  0100               	movlb	0	; () banked
 11753  003B2E  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 11754  003B30  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 11755  003B32  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11756  003B34  EC66  F03A         	call	_writeEEPROM_ext
 11757                           
 11758                           ;logs.h: 18: writeEEPROM_ext(++ultimoLogSalvo, _min);
 11759  003B38  C0EE  F08C         	movff	__min,writeEEPROM_ext@data
 11760  003B3C  0100               	movlb	0	; () banked
 11761  003B3E  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 11762  003B40  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 11763  003B42  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11764  003B44  EC66  F03A         	call	_writeEEPROM_ext
 11765                           
 11766                           ;logs.h: 19: writeEEPROM_ext(++ultimoLogSalvo, status_jockey);
 11767  003B48  C0FD  F08C         	movff	_status_jockey,writeEEPROM_ext@data
 11768  003B4C  0100               	movlb	0	; () banked
 11769  003B4E  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 11770  003B50  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 11771  003B52  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11772  003B54  EC66  F03A         	call	_writeEEPROM_ext
 11773                           
 11774                           ;logs.h: 20: writeEEPROM_ext(++ultimoLogSalvo, status_principal);
 11775  003B58  C0FC  F08C         	movff	_status_principal,writeEEPROM_ext@data
 11776  003B5C  0100               	movlb	0	; () banked
 11777  003B5E  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 11778  003B60  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 11779  003B62  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11780  003B64  EC66  F03A         	call	_writeEEPROM_ext
 11781                           
 11782                           ;logs.h: 21: writeEEPROM_ext(++ultimoLogSalvo, status_estacionaria);
 11783  003B68  C0FB  F08C         	movff	_status_estacionaria,writeEEPROM_ext@data
 11784  003B6C  0100               	movlb	0	; () banked
 11785  003B6E  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 11786  003B70  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 11787  003B72  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 11788  003B74  EC66  F03A         	call	_writeEEPROM_ext
 11789                           
 11790                           ;logs.h: 23: writeEEPROM_ext(14, ++ultimoLogSalvo);
 11791  003B78  0100               	movlb	0	; () banked
 11792  003B7A  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 11793  003B7C  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 11794  003B7E  C08F  F08C         	movff	salvarLOG@ultimoLogSalvo,writeEEPROM_ext@data
 11795  003B82  0E0E               	movlw	14
 11796  003B84  EC66  F03A         	call	_writeEEPROM_ext
 11797  003B88  0012               	return		;funcret
 11798  003B8A  FFFF               	dw	65535	; errata NOP
 11799  003B8C                     __end_of_salvarLOG:
 11800                           	opt stack 0
 11801                           tblptru	equ	0xFF8
 11802                           tblptrh	equ	0xFF7
 11803                           tblptrl	equ	0xFF6
 11804                           tablat	equ	0xFF5
 11805                           prodh	equ	0xFF4
 11806                           prodl	equ	0xFF3
 11807                           intcon	equ	0xFF2
 11808                           postinc0	equ	0xFEE
 11809                           wreg	equ	0xFE8
 11810                           postdec1	equ	0xFE5
 11811                           fsr1l	equ	0xFE1
 11812                           indf2	equ	0xFDF
 11813                           postinc2	equ	0xFDE
 11814                           fsr2h	equ	0xFDA
 11815                           fsr2l	equ	0xFD9
 11816                           status	equ	0xFD8
 11817                           
 11818 ;; *************** function _writeEEPROM_ext *****************
 11819 ;; Defined at:
 11820 ;;		line 13 in file "eeprom.h"
 11821 ;; Parameters:    Size  Location     Type
 11822 ;;  adress          1    wreg     unsigned char 
 11823 ;;  data            1   12[BANK0 ] unsigned char 
 11824 ;; Auto vars:     Size  Location     Type
 11825 ;;  adress          1   13[BANK0 ] unsigned char 
 11826 ;; Return value:  Size  Location     Type
 11827 ;;                  1    wreg      void 
 11828 ;; Registers used:
 11829 ;;		wreg, status,2, status,0, cstack
 11830 ;; Tracked objects:
 11831 ;;		On entry : 0/0
 11832 ;;		On exit  : 0/0
 11833 ;;		Unchanged: 0/0
 11834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11835 ;;      Params:         0       1       0       0       0       0       0
 11836 ;;      Locals:         0       1       0       0       0       0       0
 11837 ;;      Temps:          0       0       0       0       0       0       0
 11838 ;;      Totals:         0       2       0       0       0       0       0
 11839 ;;Total ram usage:        2 bytes
 11840 ;; Hardware stack levels used:    1
 11841 ;; Hardware stack levels required when called:    8
 11842 ;; This function calls:
 11843 ;;		_I2C_Start
 11844 ;;		_I2C_Stop
 11845 ;;		_I2C_Write
 11846 ;;		_delay
 11847 ;; This function is called by:
 11848 ;;		_salvarLOG
 11849 ;;		_verificarIntervaloTesteBombas
 11850 ;;		_acaoTesteBombas
 11851 ;;		_lerParametros
 11852 ;;		_tela_testeBombas
 11853 ;;		_configuraTelefones
 11854 ;;		_configurarEstacionaria
 11855 ;;		_ajusteSP_Bombas
 11856 ;;		_apagarLOGS
 11857 ;; This function uses a non-reentrant model
 11858 ;;
 11859                           
 11860                           	psect	text32
 11861  0074CC                     __ptext32:
 11862                           	opt stack 0
 11863  0074CC                     _writeEEPROM_ext:
 11864                           	opt stack 0
 11865  0074CC  FFFF               	dw	65535	; assembler added errata NOP
 11866                           
 11867                           ;incstack = 0
 11868                           ;writeEEPROM_ext@adress stored from wreg
 11869  0074CE  0100               	movlb	0	; () banked
 11870  0074D0  6F8D               	movwf	writeEEPROM_ext@adress& (0+255),b
 11871                           
 11872                           ;eeprom.h: 15: I2C_Start();
 11873  0074D2  EC1A  F037         	call	_I2C_Start	;wreg free
 11874                           
 11875                           ;eeprom.h: 16: I2C_Write(0xA0);
 11876  0074D6  0E00               	movlw	0
 11877  0074D8  0100               	movlb	0	; () banked
 11878  0074DA  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 11879  0074DC  0EA0               	movlw	160
 11880  0074DE  6F8A               	movwf	I2C_Write@d& (0+255),b
 11881  0074E0  EC33  F037         	call	_I2C_Write	;wreg free
 11882                           
 11883                           ;eeprom.h: 18: I2C_Write(adress);
 11884  0074E4  C08D  F08A         	movff	writeEEPROM_ext@adress,I2C_Write@d
 11885  0074E8  0100               	movlb	0	; () banked
 11886  0074EA  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 11887  0074EC  EC33  F037         	call	_I2C_Write	;wreg free
 11888                           
 11889                           ;eeprom.h: 19: I2C_Write(data);
 11890  0074F0  C08C  F08A         	movff	writeEEPROM_ext@data,I2C_Write@d
 11891  0074F4  0100               	movlb	0	; () banked
 11892  0074F6  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 11893  0074F8  EC33  F037         	call	_I2C_Write	;wreg free
 11894                           
 11895                           ;eeprom.h: 20: I2C_Stop();
 11896  0074FC  EC20  F037         	call	_I2C_Stop	;wreg free
 11897                           
 11898                           ;eeprom.h: 21: delay(15);
 11899  007500  0E00               	movlw	0
 11900  007502  0100               	movlb	0	; () banked
 11901  007504  6F81               	movwf	(delay@x+1)& (0+255),b
 11902  007506  0E0F               	movlw	15
 11903  007508  6F80               	movwf	delay@x& (0+255),b
 11904  00750A  EC68  F038         	call	_delay	;wreg free
 11905  00750E  0012               	return		;funcret
 11906  007510  FFFF               	dw	65535	; errata NOP
 11907  007512                     __end_of_writeEEPROM_ext:
 11908                           	opt stack 0
 11909                           tblptru	equ	0xFF8
 11910                           tblptrh	equ	0xFF7
 11911                           tblptrl	equ	0xFF6
 11912                           tablat	equ	0xFF5
 11913                           prodh	equ	0xFF4
 11914                           prodl	equ	0xFF3
 11915                           intcon	equ	0xFF2
 11916                           postinc0	equ	0xFEE
 11917                           wreg	equ	0xFE8
 11918                           postdec1	equ	0xFE5
 11919                           fsr1l	equ	0xFE1
 11920                           indf2	equ	0xFDF
 11921                           postinc2	equ	0xFDE
 11922                           fsr2h	equ	0xFDA
 11923                           fsr2l	equ	0xFD9
 11924                           status	equ	0xFD8
 11925                           
 11926 ;; *************** function _readEEPROM_ext *****************
 11927 ;; Defined at:
 11928 ;;		line 26 in file "eeprom.h"
 11929 ;; Parameters:    Size  Location     Type
 11930 ;;  adress          1    wreg     unsigned char 
 11931 ;; Auto vars:     Size  Location     Type
 11932 ;;  adress          1   12[BANK0 ] unsigned char 
 11933 ;;  data            1   13[BANK0 ] unsigned char 
 11934 ;; Return value:  Size  Location     Type
 11935 ;;                  1    wreg      unsigned char 
 11936 ;; Registers used:
 11937 ;;		wreg, status,2, status,0, cstack
 11938 ;; Tracked objects:
 11939 ;;		On entry : 0/0
 11940 ;;		On exit  : 0/0
 11941 ;;		Unchanged: 0/0
 11942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11943 ;;      Params:         0       0       0       0       0       0       0
 11944 ;;      Locals:         0       2       0       0       0       0       0
 11945 ;;      Temps:          0       0       0       0       0       0       0
 11946 ;;      Totals:         0       2       0       0       0       0       0
 11947 ;;Total ram usage:        2 bytes
 11948 ;; Hardware stack levels used:    1
 11949 ;; Hardware stack levels required when called:    8
 11950 ;; This function calls:
 11951 ;;		_I2C_Read
 11952 ;;		_I2C_Restart
 11953 ;;		_I2C_Start
 11954 ;;		_I2C_Stop
 11955 ;;		_I2C_Write
 11956 ;; This function is called by:
 11957 ;;		_readEEPROM16_ext
 11958 ;;		_salvarLOG
 11959 ;;		_acaoTesteBombas
 11960 ;;		_lerParametros
 11961 ;;		_dataLoger
 11962 ;; This function uses a non-reentrant model
 11963 ;;
 11964                           
 11965                           	psect	text33
 11966  007642                     __ptext33:
 11967                           	opt stack 0
 11968  007642                     _readEEPROM_ext:
 11969                           	opt stack 0
 11970  007642  FFFF               	dw	65535	; assembler added errata NOP
 11971                           
 11972                           ;incstack = 0
 11973                           ;readEEPROM_ext@adress stored from wreg
 11974  007644  0100               	movlb	0	; () banked
 11975  007646  6F8C               	movwf	readEEPROM_ext@adress& (0+255),b
 11976                           
 11977                           ;eeprom.h: 27: I2C_Start();
 11978  007648  EC1A  F037         	call	_I2C_Start	;wreg free
 11979                           
 11980                           ;eeprom.h: 28: I2C_Write(0xA0);
 11981  00764C  0E00               	movlw	0
 11982  00764E  0100               	movlb	0	; () banked
 11983  007650  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 11984  007652  0EA0               	movlw	160
 11985  007654  6F8A               	movwf	I2C_Write@d& (0+255),b
 11986  007656  EC33  F037         	call	_I2C_Write	;wreg free
 11987                           
 11988                           ;eeprom.h: 30: I2C_Write(adress);
 11989  00765A  C08C  F08A         	movff	readEEPROM_ext@adress,I2C_Write@d
 11990  00765E  0100               	movlb	0	; () banked
 11991  007660  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 11992  007662  EC33  F037         	call	_I2C_Write	;wreg free
 11993                           
 11994                           ;eeprom.h: 31: I2C_Restart();
 11995  007666  EC26  F037         	call	_I2C_Restart	;wreg free
 11996                           
 11997                           ;eeprom.h: 32: I2C_Write(0xA1);
 11998  00766A  0E00               	movlw	0
 11999  00766C  0100               	movlb	0	; () banked
 12000  00766E  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12001  007670  0EA1               	movlw	161
 12002  007672  6F8A               	movwf	I2C_Write@d& (0+255),b
 12003  007674  EC33  F037         	call	_I2C_Write	;wreg free
 12004                           
 12005                           ;eeprom.h: 33: unsigned char data = I2C_Read(0);
 12006  007678  0E00               	movlw	0
 12007  00767A  0100               	movlb	0	; () banked
 12008  00767C  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
 12009  00767E  0E00               	movlw	0
 12010  007680  6F81               	movwf	I2C_Read@a& (0+255),b
 12011  007682  EC0E  F039         	call	_I2C_Read	;wreg free
 12012  007686  0100               	movlb	0	; () banked
 12013  007688  5181               	movf	?_I2C_Read& (0+255),w,b
 12014  00768A  6F8D               	movwf	readEEPROM_ext@data& (0+255),b
 12015                           
 12016                           ;eeprom.h: 34: I2C_Stop();
 12017  00768C  EC20  F037         	call	_I2C_Stop	;wreg free
 12018                           
 12019                           ;eeprom.h: 35: return data;
 12020  007690  0100               	movlb	0	; () banked
 12021  007692  518D               	movf	readEEPROM_ext@data& (0+255),w,b
 12022                           
 12023                           ; BSR set to: 0
 12024                           
 12025                           ; BSR set to: 0
 12026  007694  0012               	return		;funcret
 12027  007696  FFFF               	dw	65535	; errata NOP
 12028  007698                     __end_of_readEEPROM_ext:
 12029                           	opt stack 0
 12030                           tblptru	equ	0xFF8
 12031                           tblptrh	equ	0xFF7
 12032                           tblptrl	equ	0xFF6
 12033                           tablat	equ	0xFF5
 12034                           prodh	equ	0xFF4
 12035                           prodl	equ	0xFF3
 12036                           intcon	equ	0xFF2
 12037                           postinc0	equ	0xFEE
 12038                           wreg	equ	0xFE8
 12039                           postdec1	equ	0xFE5
 12040                           fsr1l	equ	0xFE1
 12041                           indf2	equ	0xFDF
 12042                           postinc2	equ	0xFDE
 12043                           fsr2h	equ	0xFDA
 12044                           fsr2l	equ	0xFD9
 12045                           status	equ	0xFD8
 12046                           
 12047 ;; *************** function _I2C_Restart *****************
 12048 ;; Defined at:
 12049 ;;		line 31 in file "I2C.c"
 12050 ;; Parameters:    Size  Location     Type
 12051 ;;		None
 12052 ;; Auto vars:     Size  Location     Type
 12053 ;;		None
 12054 ;; Return value:  Size  Location     Type
 12055 ;;                  1    wreg      void 
 12056 ;; Registers used:
 12057 ;;		wreg, status,2, status,0, cstack
 12058 ;; Tracked objects:
 12059 ;;		On entry : 0/0
 12060 ;;		On exit  : 0/0
 12061 ;;		Unchanged: 0/0
 12062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12063 ;;      Params:         0       0       0       0       0       0       0
 12064 ;;      Locals:         0       0       0       0       0       0       0
 12065 ;;      Temps:          0       0       0       0       0       0       0
 12066 ;;      Totals:         0       0       0       0       0       0       0
 12067 ;;Total ram usage:        0 bytes
 12068 ;; Hardware stack levels used:    1
 12069 ;; Hardware stack levels required when called:    7
 12070 ;; This function calls:
 12071 ;;		_I2C_Wait
 12072 ;; This function is called by:
 12073 ;;		_getDS1307TimeDate
 12074 ;;		_readEEPROM_ext
 12075 ;;		_getDS1307Time
 12076 ;; This function uses a non-reentrant model
 12077 ;;
 12078                           
 12079                           	psect	text34
 12080  006E4C                     __ptext34:
 12081                           	opt stack 0
 12082  006E4C                     _I2C_Restart:
 12083                           	opt stack 0
 12084  006E4C  FFFF               	dw	65535	; assembler added errata NOP
 12085                           
 12086                           ;I2C.c: 32: I2C_Wait();
 12087                           
 12088                           ; BSR set to: 0
 12089                           ;incstack = 0
 12090  006E4E  EC6B  F037         	call	_I2C_Wait	;wreg free
 12091                           
 12092                           ;I2C.c: 33: RSEN = 1;
 12093  006E52  82C5               	bsf	4037,1,c	;volatile
 12094  006E54  0012               	return		;funcret
 12095  006E56  FFFF               	dw	65535	; errata NOP
 12096  006E58                     __end_of_I2C_Restart:
 12097                           	opt stack 0
 12098                           tblptru	equ	0xFF8
 12099                           tblptrh	equ	0xFF7
 12100                           tblptrl	equ	0xFF6
 12101                           tablat	equ	0xFF5
 12102                           prodh	equ	0xFF4
 12103                           prodl	equ	0xFF3
 12104                           intcon	equ	0xFF2
 12105                           postinc0	equ	0xFEE
 12106                           wreg	equ	0xFE8
 12107                           postdec1	equ	0xFE5
 12108                           fsr1l	equ	0xFE1
 12109                           indf2	equ	0xFDF
 12110                           postinc2	equ	0xFDE
 12111                           fsr2h	equ	0xFDA
 12112                           fsr2l	equ	0xFD9
 12113                           status	equ	0xFD8
 12114                           
 12115 ;; *************** function _I2C_Read *****************
 12116 ;; Defined at:
 12117 ;;		line 47 in file "I2C.c"
 12118 ;; Parameters:    Size  Location     Type
 12119 ;;  a               2    1[BANK0 ] unsigned short 
 12120 ;; Auto vars:     Size  Location     Type
 12121 ;;  temp            2    3[BANK0 ] unsigned short 
 12122 ;; Return value:  Size  Location     Type
 12123 ;;                  2    1[BANK0 ] unsigned short 
 12124 ;; Registers used:
 12125 ;;		wreg, status,2, status,0, cstack
 12126 ;; Tracked objects:
 12127 ;;		On entry : 0/0
 12128 ;;		On exit  : 0/0
 12129 ;;		Unchanged: 0/0
 12130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12131 ;;      Params:         0       2       0       0       0       0       0
 12132 ;;      Locals:         0       2       0       0       0       0       0
 12133 ;;      Temps:          0       0       0       0       0       0       0
 12134 ;;      Totals:         0       4       0       0       0       0       0
 12135 ;;Total ram usage:        4 bytes
 12136 ;; Hardware stack levels used:    1
 12137 ;; Hardware stack levels required when called:    7
 12138 ;; This function calls:
 12139 ;;		_I2C_Wait
 12140 ;; This function is called by:
 12141 ;;		_getDS1307TimeDate
 12142 ;;		_readEEPROM_ext
 12143 ;;		_getDS1307Time
 12144 ;; This function uses a non-reentrant model
 12145 ;;
 12146                           
 12147                           	psect	text35
 12148  00721C                     __ptext35:
 12149                           	opt stack 0
 12150  00721C                     _I2C_Read:
 12151                           	opt stack 0
 12152  00721C  FFFF               	dw	65535	; assembler added errata NOP
 12153                           
 12154                           ;I2C.c: 48: unsigned short temp;
 12155                           ;I2C.c: 49: I2C_Wait();
 12156                           
 12157                           ;incstack = 0
 12158  00721E  EC6B  F037         	call	_I2C_Wait	;wreg free
 12159                           
 12160                           ;I2C.c: 50: RCEN = 1;
 12161  007222  86C5               	bsf	4037,3,c	;volatile
 12162                           
 12163                           ;I2C.c: 51: I2C_Wait();
 12164  007224  EC6B  F037         	call	_I2C_Wait	;wreg free
 12165                           
 12166                           ;I2C.c: 52: temp = SSPBUF;
 12167  007228  CFC9 F083          	movff	4041,I2C_Read@temp	;volatile
 12168  00722C  0100               	movlb	0	; () banked
 12169  00722E  6B84               	clrf	(I2C_Read@temp+1)& (0+255),b
 12170                           
 12171                           ;I2C.c: 53: I2C_Wait();
 12172  007230  EC6B  F037         	call	_I2C_Wait	;wreg free
 12173                           
 12174                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 12175  007234  0100               	movlb	0	; () banked
 12176  007236  5181               	movf	I2C_Read@a& (0+255),w,b
 12177  007238  1182               	iorwf	(I2C_Read@a+1)& (0+255),w,b
 12178  00723A  A4D8               	btfss	status,2,c
 12179  00723C  D002               	goto	u4700
 12180  00723E  8AC5               	bsf	4037,5,c	;volatile
 12181  007240  D002               	goto	u4715
 12182  007242                     u4700:
 12183  007242  FFFF               	dw	65535	; assembler added errata NOP
 12184  007244  9AC5               	bcf	4037,5,c	;volatile
 12185  007246                     u4715:
 12186  007246  FFFF               	dw	65535	; assembler added errata NOP
 12187                           
 12188                           ;I2C.c: 55: ACKEN = 1;
 12189  007248  88C5               	bsf	4037,4,c	;volatile
 12190                           
 12191                           ;I2C.c: 56: return temp;
 12192  00724A  C083  F081         	movff	I2C_Read@temp,?_I2C_Read
 12193  00724E  C084  F082         	movff	I2C_Read@temp+1,?_I2C_Read+1
 12194  007252  0012               	return		;funcret
 12195  007254  FFFF               	dw	65535	; errata NOP
 12196  007256                     __end_of_I2C_Read:
 12197                           	opt stack 0
 12198                           tblptru	equ	0xFF8
 12199                           tblptrh	equ	0xFF7
 12200                           tblptrl	equ	0xFF6
 12201                           tablat	equ	0xFF5
 12202                           prodh	equ	0xFF4
 12203                           prodl	equ	0xFF3
 12204                           intcon	equ	0xFF2
 12205                           postinc0	equ	0xFEE
 12206                           wreg	equ	0xFE8
 12207                           postdec1	equ	0xFE5
 12208                           fsr1l	equ	0xFE1
 12209                           indf2	equ	0xFDF
 12210                           postinc2	equ	0xFDE
 12211                           fsr2h	equ	0xFDA
 12212                           fsr2l	equ	0xFD9
 12213                           status	equ	0xFD8
 12214                           
 12215 ;; *************** function _intToFloatStr *****************
 12216 ;; Defined at:
 12217 ;;		line 48 in file "function.c"
 12218 ;; Parameters:    Size  Location     Type
 12219 ;;  valor           1    wreg     unsigned char 
 12220 ;; Auto vars:     Size  Location     Type
 12221 ;;  valor           1   63[BANK0 ] unsigned char 
 12222 ;;  conv            4   59[BANK0 ] unsigned char [4]
 12223 ;;  end             4   55[BANK0 ] unsigned char [4]
 12224 ;;  pr              2   64[BANK0 ] int 
 12225 ;; Return value:  Size  Location     Type
 12226 ;;                  2   53[BANK0 ] PTR unsigned char 
 12227 ;; Registers used:
 12228 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12229 ;; Tracked objects:
 12230 ;;		On entry : 0/0
 12231 ;;		On exit  : 0/0
 12232 ;;		Unchanged: 0/0
 12233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12234 ;;      Params:         0       2       0       0       0       0       0
 12235 ;;      Locals:         0      11       0       0       0       0       0
 12236 ;;      Temps:          0       0       0       0       0       0       0
 12237 ;;      Totals:         0      13       0       0       0       0       0
 12238 ;;Total ram usage:       13 bytes
 12239 ;; Hardware stack levels used:    1
 12240 ;; Hardware stack levels required when called:    9
 12241 ;; This function calls:
 12242 ;;		___awdiv
 12243 ;;		___awmod
 12244 ;;		_sprintf
 12245 ;; This function is called by:
 12246 ;;		_acaoTesteBombas
 12247 ;;		_telaPrincipal
 12248 ;;		_ajusteSP_Bombas
 12249 ;; This function uses a non-reentrant model
 12250 ;;
 12251                           
 12252                           	psect	text36
 12253  003EB8                     __ptext36:
 12254                           	opt stack 0
 12255  003EB8                     _intToFloatStr:
 12256                           	opt stack 0
 12257  003EB8  FFFF               	dw	65535	; assembler added errata NOP
 12258                           
 12259                           ;incstack = 0
 12260                           ;intToFloatStr@valor stored from wreg
 12261  003EBA  0100               	movlb	0	; () banked
 12262  003EBC  6FBF               	movwf	intToFloatStr@valor& (0+255),b
 12263                           
 12264                           ;function.c: 49: int pr = valor >= 99 ? 99 : valor;
 12265  003EBE  0E63               	movlw	99
 12266  003EC0  0100               	movlb	0	; () banked
 12267  003EC2  61BF               	cpfslt	intToFloatStr@valor& (0+255),b
 12268  003EC4  D004               	goto	l1004
 12269                           
 12270                           ; BSR set to: 0
 12271  003EC6  C0BF  F0C0         	movff	intToFloatStr@valor,intToFloatStr@pr
 12272  003ECA  6BC1               	clrf	(intToFloatStr@pr+1)& (0+255),b
 12273  003ECC  D005               	goto	l1006
 12274  003ECE                     l1004:
 12275  003ECE  FFFF               	dw	65535	; assembler added errata NOP
 12276                           
 12277                           ; BSR set to: 0
 12278                           
 12279                           ; BSR set to: 0
 12280  003ED0  0E00               	movlw	0
 12281  003ED2  6FC1               	movwf	(intToFloatStr@pr+1)& (0+255),b
 12282  003ED4  0E63               	movlw	99
 12283  003ED6  6FC0               	movwf	intToFloatStr@pr& (0+255),b
 12284  003ED8                     l1006:
 12285  003ED8  FFFF               	dw	65535	; assembler added errata NOP
 12286                           
 12287                           ; BSR set to: 0
 12288                           ;function.c: 50: unsigned char conv[4] = {' ', ' ', ' ', ' '};
 12289                           
 12290                           ; BSR set to: 0
 12291  003EDA  C07A  F0BB         	movff	intToFloatStr@F2544,intToFloatStr@conv
 12292  003EDE  C07B  F0BC         	movff	intToFloatStr@F2544+1,intToFloatStr@conv+1
 12293  003EE2  C07C  F0BD         	movff	intToFloatStr@F2544+2,intToFloatStr@conv+2
 12294  003EE6  C07D  F0BE         	movff	intToFloatStr@F2544+3,intToFloatStr@conv+3
 12295                           
 12296                           ; BSR set to: 0
 12297                           ;function.c: 51: conv[0] = (char) ((pr / 10) + 48);
 12298  003EEA  C0C0  F080         	movff	intToFloatStr@pr,___awdiv@dividend
 12299  003EEE  C0C1  F081         	movff	intToFloatStr@pr+1,___awdiv@dividend+1
 12300  003EF2  0E00               	movlw	0
 12301  003EF4  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
 12302  003EF6  0E0A               	movlw	10
 12303  003EF8  6F82               	movwf	___awdiv@divisor& (0+255),b
 12304  003EFA  EC76  F01E         	call	___awdiv	;wreg free
 12305  003EFE  0100               	movlb	0	; () banked
 12306  003F00  5180               	movf	?___awdiv& (0+255),w,b
 12307  003F02  0F30               	addlw	48
 12308  003F04  6FBB               	movwf	intToFloatStr@conv& (0+255),b
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;function.c: 52: conv[1] = (char) '.';
 12312  003F06  0E2E               	movlw	46
 12313  003F08  6FBC               	movwf	(intToFloatStr@conv+1)& (0+255),b
 12314                           
 12315                           ;function.c: 53: conv[2] = (char) ((pr % 10) + 48);
 12316  003F0A  C0C0  F080         	movff	intToFloatStr@pr,___awmod@dividend
 12317  003F0E  C0C1  F081         	movff	intToFloatStr@pr+1,___awmod@dividend+1
 12318  003F12  0E00               	movlw	0
 12319  003F14  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 12320  003F16  0E0A               	movlw	10
 12321  003F18  6F82               	movwf	___awmod@divisor& (0+255),b
 12322  003F1A  ECF6  F03C         	call	___awmod	;wreg free
 12323  003F1E  0100               	movlb	0	; () banked
 12324  003F20  5180               	movf	?___awmod& (0+255),w,b
 12325  003F22  0F30               	addlw	48
 12326  003F24  6FBD               	movwf	(intToFloatStr@conv+2)& (0+255),b
 12327                           
 12328                           ; BSR set to: 0
 12329                           ;function.c: 54: conv[3] = '\0';
 12330  003F26  0E00               	movlw	0
 12331  003F28  6FBE               	movwf	(intToFloatStr@conv+3)& (0+255),b
 12332                           
 12333                           ; BSR set to: 0
 12334                           ;function.c: 55: char end[4];
 12335                           ;function.c: 56: sprintf(end , conv);
 12336  003F2A  0EB7               	movlw	low intToFloatStr@end
 12337  003F2C  6FA1               	movwf	sprintf@wh& (0+255),b
 12338  003F2E  0E00               	movlw	high intToFloatStr@end
 12339  003F30  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12340  003F32  0EBB               	movlw	low intToFloatStr@conv
 12341  003F34  6FA3               	movwf	sprintf@f& (0+255),b
 12342  003F36  0E00               	movlw	high intToFloatStr@conv
 12343  003F38  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12344  003F3A  EC89  F03A         	call	_sprintf	;wreg free
 12345                           
 12346                           ;function.c: 57: return end;
 12347  003F3E  0EB7               	movlw	low intToFloatStr@end
 12348  003F40  0100               	movlb	0	; () banked
 12349  003F42  6FB5               	movwf	?_intToFloatStr& (0+255),b
 12350  003F44  0E00               	movlw	high intToFloatStr@end
 12351  003F46  6FB6               	movwf	(?_intToFloatStr+1)& (0+255),b
 12352                           
 12353                           ; BSR set to: 0
 12354                           
 12355                           ; BSR set to: 0
 12356  003F48  0012               	return		;funcret
 12357  003F4A  FFFF               	dw	65535	; errata NOP
 12358  003F4C                     __end_of_intToFloatStr:
 12359                           	opt stack 0
 12360                           tblptru	equ	0xFF8
 12361                           tblptrh	equ	0xFF7
 12362                           tblptrl	equ	0xFF6
 12363                           tablat	equ	0xFF5
 12364                           prodh	equ	0xFF4
 12365                           prodl	equ	0xFF3
 12366                           intcon	equ	0xFF2
 12367                           postinc0	equ	0xFEE
 12368                           wreg	equ	0xFE8
 12369                           postdec1	equ	0xFE5
 12370                           fsr1l	equ	0xFE1
 12371                           indf2	equ	0xFDF
 12372                           postinc2	equ	0xFDE
 12373                           fsr2h	equ	0xFDA
 12374                           fsr2l	equ	0xFD9
 12375                           status	equ	0xFD8
 12376                           
 12377 ;; *************** function ___awmod *****************
 12378 ;; Defined at:
 12379 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 12380 ;; Parameters:    Size  Location     Type
 12381 ;;  dividend        2    0[BANK0 ] int 
 12382 ;;  divisor         2    2[BANK0 ] int 
 12383 ;; Auto vars:     Size  Location     Type
 12384 ;;  sign            1    5[BANK0 ] unsigned char 
 12385 ;;  counter         1    4[BANK0 ] unsigned char 
 12386 ;; Return value:  Size  Location     Type
 12387 ;;                  2    0[BANK0 ] int 
 12388 ;; Registers used:
 12389 ;;		wreg, status,2, status,0
 12390 ;; Tracked objects:
 12391 ;;		On entry : 0/0
 12392 ;;		On exit  : 0/0
 12393 ;;		Unchanged: 0/0
 12394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12395 ;;      Params:         0       4       0       0       0       0       0
 12396 ;;      Locals:         0       2       0       0       0       0       0
 12397 ;;      Temps:          0       0       0       0       0       0       0
 12398 ;;      Totals:         0       6       0       0       0       0       0
 12399 ;;Total ram usage:        6 bytes
 12400 ;; Hardware stack levels used:    1
 12401 ;; Hardware stack levels required when called:    6
 12402 ;; This function calls:
 12403 ;;		Nothing
 12404 ;; This function is called by:
 12405 ;;		_DECtoBCD
 12406 ;;		_intToFloatStr
 12407 ;;		_DECtoHEX
 12408 ;; This function uses a non-reentrant model
 12409 ;;
 12410                           
 12411                           	psect	text37
 12412  0079EC                     __ptext37:
 12413                           	opt stack 0
 12414  0079EC                     ___awmod:
 12415                           	opt stack 0
 12416  0079EC  FFFF               	dw	65535	; assembler added errata NOP
 12417                           
 12418                           ; BSR set to: 0
 12419                           ;incstack = 0
 12420  0079EE  0E00               	movlw	0
 12421  0079F0  0100               	movlb	0	; () banked
 12422  0079F2  6F85               	movwf	___awmod@sign& (0+255),b
 12423                           
 12424                           ; BSR set to: 0
 12425  0079F4  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 12426  0079F6  D006               	goto	l1288
 12427                           
 12428                           ; BSR set to: 0
 12429  0079F8  6D80               	negf	___awmod@dividend& (0+255),b
 12430  0079FA  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12431  0079FC  B0D8               	btfsc	status,0,c
 12432  0079FE  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12433                           
 12434                           ; BSR set to: 0
 12435  007A00  0E01               	movlw	1
 12436  007A02  6F85               	movwf	___awmod@sign& (0+255),b
 12437  007A04                     l1288:
 12438  007A04  FFFF               	dw	65535	; assembler added errata NOP
 12439                           
 12440                           ; BSR set to: 0
 12441                           
 12442                           ; BSR set to: 0
 12443  007A06  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12444  007A08  D004               	goto	l1289
 12445                           
 12446                           ; BSR set to: 0
 12447  007A0A  6D82               	negf	___awmod@divisor& (0+255),b
 12448  007A0C  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 12449  007A0E  B0D8               	btfsc	status,0,c
 12450  007A10  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 12451  007A12                     l1289:
 12452  007A12  FFFF               	dw	65535	; assembler added errata NOP
 12453                           
 12454                           ; BSR set to: 0
 12455                           
 12456                           ; BSR set to: 0
 12457  007A14  5182               	movf	___awmod@divisor& (0+255),w,b
 12458  007A16  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 12459  007A18  B4D8               	btfsc	status,2,c
 12460  007A1A  D01C               	goto	l1296
 12461                           
 12462                           ; BSR set to: 0
 12463  007A1C  0E01               	movlw	1
 12464  007A1E  6F84               	movwf	___awmod@counter& (0+255),b
 12465  007A20  D005               	goto	l1291
 12466  007A22  FFFF               	dw	65535	; assembler added errata NOP
 12467                           
 12468                           ; BSR set to: 0
 12469                           
 12470                           ; BSR set to: 0
 12471  007A24  90D8               	bcf	status,0,c
 12472  007A26  3782               	rlcf	___awmod@divisor& (0+255),f,b
 12473  007A28  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 12474  007A2A  2B84               	incf	___awmod@counter& (0+255),f,b
 12475  007A2C                     l1291:
 12476  007A2C  FFFF               	dw	65535	; assembler added errata NOP
 12477                           
 12478                           ; BSR set to: 0
 12479                           
 12480                           ; BSR set to: 0
 12481  007A2E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12482  007A30  D7F8               	goto	l1292
 12483  007A32                     u5340:
 12484  007A32  FFFF               	dw	65535	; assembler added errata NOP
 12485                           
 12486                           ; BSR set to: 0
 12487                           
 12488                           ; BSR set to: 0
 12489                           
 12490                           ; BSR set to: 0
 12491  007A34  5182               	movf	___awmod@divisor& (0+255),w,b
 12492  007A36  5D80               	subwf	___awmod@dividend& (0+255),w,b
 12493  007A38  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12494  007A3A  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 12495  007A3C  A0D8               	btfss	status,0,c
 12496  007A3E  D004               	goto	l1295
 12497                           
 12498                           ; BSR set to: 0
 12499  007A40  5182               	movf	___awmod@divisor& (0+255),w,b
 12500  007A42  5F80               	subwf	___awmod@dividend& (0+255),f,b
 12501  007A44  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12502  007A46  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 12503  007A48                     l1295:
 12504  007A48  FFFF               	dw	65535	; assembler added errata NOP
 12505                           
 12506                           ; BSR set to: 0
 12507                           
 12508                           ; BSR set to: 0
 12509  007A4A  90D8               	bcf	status,0,c
 12510  007A4C  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 12511  007A4E  3382               	rrcf	___awmod@divisor& (0+255),f,b
 12512                           
 12513                           ; BSR set to: 0
 12514  007A50  2F84               	decfsz	___awmod@counter& (0+255),f,b
 12515  007A52  D7EF               	goto	u5340
 12516  007A54                     l1296:
 12517  007A54  FFFF               	dw	65535	; assembler added errata NOP
 12518                           
 12519                           ; BSR set to: 0
 12520                           
 12521                           ; BSR set to: 0
 12522                           
 12523                           ; BSR set to: 0
 12524  007A56  5185               	movf	___awmod@sign& (0+255),w,b
 12525  007A58  B4D8               	btfsc	status,2,c
 12526  007A5A  D004               	goto	l1297
 12527                           
 12528                           ; BSR set to: 0
 12529  007A5C  6D80               	negf	___awmod@dividend& (0+255),b
 12530  007A5E  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12531  007A60  B0D8               	btfsc	status,0,c
 12532  007A62  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12533  007A64                     l1297:
 12534  007A64  FFFF               	dw	65535	; assembler added errata NOP
 12535                           
 12536                           ; BSR set to: 0
 12537                           
 12538                           ; BSR set to: 0
 12539  007A66  C080  F080         	movff	___awmod@dividend,?___awmod
 12540  007A6A  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 12541                           
 12542                           ; BSR set to: 0
 12543                           
 12544                           ; BSR set to: 0
 12545  007A6E  0012               	return		;funcret
 12546  007A70  FFFF               	dw	65535	; errata NOP
 12547  007A72                     __end_of___awmod:
 12548                           	opt stack 0
 12549                           tblptru	equ	0xFF8
 12550                           tblptrh	equ	0xFF7
 12551                           tblptrl	equ	0xFF6
 12552                           tablat	equ	0xFF5
 12553                           prodh	equ	0xFF4
 12554                           prodl	equ	0xFF3
 12555                           intcon	equ	0xFF2
 12556                           postinc0	equ	0xFEE
 12557                           wreg	equ	0xFE8
 12558                           postdec1	equ	0xFE5
 12559                           fsr1l	equ	0xFE1
 12560                           indf2	equ	0xFDF
 12561                           postinc2	equ	0xFDE
 12562                           fsr2h	equ	0xFDA
 12563                           fsr2l	equ	0xFD9
 12564                           status	equ	0xFD8
 12565                           
 12566 ;; *************** function ___awdiv *****************
 12567 ;; Defined at:
 12568 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 12569 ;; Parameters:    Size  Location     Type
 12570 ;;  dividend        2    0[BANK0 ] int 
 12571 ;;  divisor         2    2[BANK0 ] int 
 12572 ;; Auto vars:     Size  Location     Type
 12573 ;;  quotient        2    6[BANK0 ] int 
 12574 ;;  sign            1    5[BANK0 ] unsigned char 
 12575 ;;  counter         1    4[BANK0 ] unsigned char 
 12576 ;; Return value:  Size  Location     Type
 12577 ;;                  2    0[BANK0 ] int 
 12578 ;; Registers used:
 12579 ;;		wreg, status,2, status,0
 12580 ;; Tracked objects:
 12581 ;;		On entry : 0/0
 12582 ;;		On exit  : 0/0
 12583 ;;		Unchanged: 0/0
 12584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12585 ;;      Params:         0       4       0       0       0       0       0
 12586 ;;      Locals:         0       4       0       0       0       0       0
 12587 ;;      Temps:          0       0       0       0       0       0       0
 12588 ;;      Totals:         0       8       0       0       0       0       0
 12589 ;;Total ram usage:        8 bytes
 12590 ;; Hardware stack levels used:    1
 12591 ;; Hardware stack levels required when called:    6
 12592 ;; This function calls:
 12593 ;;		Nothing
 12594 ;; This function is called by:
 12595 ;;		_dataLoger
 12596 ;;		_DECtoBCD
 12597 ;;		_intToFloatStr
 12598 ;;		_DECtoHEX
 12599 ;; This function uses a non-reentrant model
 12600 ;;
 12601                           
 12602                           	psect	text38
 12603  003CEC                     __ptext38:
 12604                           	opt stack 0
 12605  003CEC                     ___awdiv:
 12606                           	opt stack 0
 12607  003CEC  FFFF               	dw	65535	; assembler added errata NOP
 12608                           
 12609                           ; BSR set to: 0
 12610                           ;incstack = 0
 12611  003CEE  0E00               	movlw	0
 12612  003CF0  0100               	movlb	0	; () banked
 12613  003CF2  6F85               	movwf	___awdiv@sign& (0+255),b
 12614                           
 12615                           ; BSR set to: 0
 12616  003CF4  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12617  003CF6  D006               	goto	l1275
 12618                           
 12619                           ; BSR set to: 0
 12620  003CF8  6D82               	negf	___awdiv@divisor& (0+255),b
 12621  003CFA  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
 12622  003CFC  B0D8               	btfsc	status,0,c
 12623  003CFE  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
 12624                           
 12625                           ; BSR set to: 0
 12626  003D00  0E01               	movlw	1
 12627  003D02  6F85               	movwf	___awdiv@sign& (0+255),b
 12628  003D04                     l1275:
 12629  003D04  FFFF               	dw	65535	; assembler added errata NOP
 12630                           
 12631                           ; BSR set to: 0
 12632                           
 12633                           ; BSR set to: 0
 12634  003D06  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 12635  003D08  D006               	goto	l1276
 12636                           
 12637                           ; BSR set to: 0
 12638  003D0A  6D80               	negf	___awdiv@dividend& (0+255),b
 12639  003D0C  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
 12640  003D0E  B0D8               	btfsc	status,0,c
 12641  003D10  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
 12642                           
 12643                           ; BSR set to: 0
 12644  003D12  0E01               	movlw	1
 12645  003D14  1B85               	xorwf	___awdiv@sign& (0+255),f,b
 12646  003D16                     l1276:
 12647  003D16  FFFF               	dw	65535	; assembler added errata NOP
 12648                           
 12649                           ; BSR set to: 0
 12650                           
 12651                           ; BSR set to: 0
 12652  003D18  0E00               	movlw	0
 12653  003D1A  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
 12654  003D1C  0E00               	movlw	0
 12655  003D1E  6F86               	movwf	___awdiv@quotient& (0+255),b
 12656                           
 12657                           ; BSR set to: 0
 12658  003D20  5182               	movf	___awdiv@divisor& (0+255),w,b
 12659  003D22  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12660  003D24  B4D8               	btfsc	status,2,c
 12661  003D26  D020               	goto	l1283
 12662                           
 12663                           ; BSR set to: 0
 12664  003D28  0E01               	movlw	1
 12665  003D2A  6F84               	movwf	___awdiv@counter& (0+255),b
 12666  003D2C  D005               	goto	l1278
 12667  003D2E  FFFF               	dw	65535	; assembler added errata NOP
 12668                           
 12669                           ; BSR set to: 0
 12670                           
 12671                           ; BSR set to: 0
 12672  003D30  90D8               	bcf	status,0,c
 12673  003D32  3782               	rlcf	___awdiv@divisor& (0+255),f,b
 12674  003D34  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12675  003D36  2B84               	incf	___awdiv@counter& (0+255),f,b
 12676  003D38                     l1278:
 12677  003D38  FFFF               	dw	65535	; assembler added errata NOP
 12678                           
 12679                           ; BSR set to: 0
 12680                           
 12681                           ; BSR set to: 0
 12682  003D3A  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12683  003D3C  D7F8               	goto	l1279
 12684  003D3E                     u5280:
 12685  003D3E  FFFF               	dw	65535	; assembler added errata NOP
 12686                           
 12687                           ; BSR set to: 0
 12688                           
 12689                           ; BSR set to: 0
 12690                           
 12691                           ; BSR set to: 0
 12692  003D40  90D8               	bcf	status,0,c
 12693  003D42  3786               	rlcf	___awdiv@quotient& (0+255),f,b
 12694  003D44  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12695                           
 12696                           ; BSR set to: 0
 12697  003D46  5182               	movf	___awdiv@divisor& (0+255),w,b
 12698  003D48  5D80               	subwf	___awdiv@dividend& (0+255),w,b
 12699  003D4A  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12700  003D4C  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12701  003D4E  A0D8               	btfss	status,0,c
 12702  003D50  D005               	goto	l1282
 12703                           
 12704                           ; BSR set to: 0
 12705  003D52  5182               	movf	___awdiv@divisor& (0+255),w,b
 12706  003D54  5F80               	subwf	___awdiv@dividend& (0+255),f,b
 12707  003D56  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12708  003D58  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12709                           
 12710                           ; BSR set to: 0
 12711  003D5A  8186               	bsf	___awdiv@quotient& (0+255),0,b
 12712  003D5C                     l1282:
 12713  003D5C  FFFF               	dw	65535	; assembler added errata NOP
 12714                           
 12715                           ; BSR set to: 0
 12716                           
 12717                           ; BSR set to: 0
 12718  003D5E  90D8               	bcf	status,0,c
 12719  003D60  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12720  003D62  3382               	rrcf	___awdiv@divisor& (0+255),f,b
 12721                           
 12722                           ; BSR set to: 0
 12723  003D64  2F84               	decfsz	___awdiv@counter& (0+255),f,b
 12724  003D66  D7EB               	goto	u5280
 12725  003D68                     l1283:
 12726  003D68  FFFF               	dw	65535	; assembler added errata NOP
 12727                           
 12728                           ; BSR set to: 0
 12729                           
 12730                           ; BSR set to: 0
 12731                           
 12732                           ; BSR set to: 0
 12733  003D6A  5185               	movf	___awdiv@sign& (0+255),w,b
 12734  003D6C  B4D8               	btfsc	status,2,c
 12735  003D6E  D004               	goto	l1284
 12736                           
 12737                           ; BSR set to: 0
 12738  003D70  6D86               	negf	___awdiv@quotient& (0+255),b
 12739  003D72  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
 12740  003D74  B0D8               	btfsc	status,0,c
 12741  003D76  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
 12742  003D78                     l1284:
 12743  003D78  FFFF               	dw	65535	; assembler added errata NOP
 12744                           
 12745                           ; BSR set to: 0
 12746                           
 12747                           ; BSR set to: 0
 12748  003D7A  C086  F080         	movff	___awdiv@quotient,?___awdiv
 12749  003D7E  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
 12750                           
 12751                           ; BSR set to: 0
 12752                           
 12753                           ; BSR set to: 0
 12754  003D82  0012               	return		;funcret
 12755  003D84  FFFF               	dw	65535	; errata NOP
 12756  003D86                     __end_of___awdiv:
 12757                           	opt stack 0
 12758                           tblptru	equ	0xFF8
 12759                           tblptrh	equ	0xFF7
 12760                           tblptrl	equ	0xFF6
 12761                           tablat	equ	0xFF5
 12762                           prodh	equ	0xFF4
 12763                           prodl	equ	0xFF3
 12764                           intcon	equ	0xFF2
 12765                           postinc0	equ	0xFEE
 12766                           wreg	equ	0xFE8
 12767                           postdec1	equ	0xFE5
 12768                           fsr1l	equ	0xFE1
 12769                           indf2	equ	0xFDF
 12770                           postinc2	equ	0xFDE
 12771                           fsr2h	equ	0xFDA
 12772                           fsr2l	equ	0xFD9
 12773                           status	equ	0xFD8
 12774                           
 12775 ;; *************** function _drenarPressao *****************
 12776 ;; Defined at:
 12777 ;;		line 126 in file "controle.h"
 12778 ;; Parameters:    Size  Location     Type
 12779 ;;		None
 12780 ;; Auto vars:     Size  Location     Type
 12781 ;;		None
 12782 ;; Return value:  Size  Location     Type
 12783 ;;                  1    wreg      void 
 12784 ;; Registers used:
 12785 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12786 ;; Tracked objects:
 12787 ;;		On entry : 0/0
 12788 ;;		On exit  : 0/0
 12789 ;;		Unchanged: 0/0
 12790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12791 ;;      Params:         0       0       0       0       0       0       0
 12792 ;;      Locals:         0       0       0       0       0       0       0
 12793 ;;      Temps:          0       0       0       0       0       0       0
 12794 ;;      Totals:         0       0       0       0       0       0       0
 12795 ;;Total ram usage:        0 bytes
 12796 ;; Hardware stack levels used:    1
 12797 ;; Hardware stack levels required when called:    9
 12798 ;; This function calls:
 12799 ;;		_sprintf
 12800 ;; This function is called by:
 12801 ;;		_acaoTesteBombas
 12802 ;; This function uses a non-reentrant model
 12803 ;;
 12804                           
 12805                           	psect	text39
 12806  007066                     __ptext39:
 12807                           	opt stack 0
 12808  007066                     _drenarPressao:
 12809                           	opt stack 0
 12810  007066  FFFF               	dw	65535	; assembler added errata NOP
 12811                           
 12812                           ;controle.h: 127: sprintf(line4, "Despressurizando...");
 12813                           
 12814                           ; BSR set to: 0
 12815                           ;incstack = 0
 12816  007068  0E3C               	movlw	low _line4
 12817  00706A  0100               	movlb	0	; () banked
 12818  00706C  6FA1               	movwf	sprintf@wh& (0+255),b
 12819  00706E  0E01               	movlw	high _line4
 12820  007070  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12821  007072  0EA8               	movlw	low STR_37
 12822  007074  6FA3               	movwf	sprintf@f& (0+255),b
 12823  007076  0E7C               	movlw	high STR_37
 12824  007078  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12825  00707A  EC89  F03A         	call	_sprintf	;wreg free
 12826                           
 12827                           ;controle.h: 128: if (!timerTesteBombas) {
 12828  00707E  0100               	movlb	0	; () banked
 12829  007080  51D9               	movf	_timerTesteBombas& (0+255),w,b
 12830  007082  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 12831  007084  A4D8               	btfss	status,2,c
 12832  007086  D006               	goto	l507
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;controle.h: 129: executandoTeste = 0;
 12836  007088  0E00               	movlw	0
 12837  00708A  6FF2               	movwf	_executandoTeste& (0+255),b
 12838                           
 12839                           ;controle.h: 130: codigoErro = 3;
 12840  00708C  0E03               	movlw	3
 12841  00708E  6E72               	movwf	_codigoErro,c
 12842                           
 12843                           ;controle.h: 131: menu_posi = 0;
 12844  007090  0E00               	movlw	0
 12845  007092  6FDF               	movwf	_menu_posi& (0+255),b
 12846  007094                     l507:
 12847  007094  FFFF               	dw	65535	; assembler added errata NOP
 12848                           
 12849                           ; BSR set to: 0
 12850                           
 12851                           ; BSR set to: 0
 12852  007096  0012               	return		;funcret
 12853  007098  FFFF               	dw	65535	; errata NOP
 12854  00709A                     __end_of_drenarPressao:
 12855                           	opt stack 0
 12856                           tblptru	equ	0xFF8
 12857                           tblptrh	equ	0xFF7
 12858                           tblptrl	equ	0xFF6
 12859                           tablat	equ	0xFF5
 12860                           prodh	equ	0xFF4
 12861                           prodl	equ	0xFF3
 12862                           intcon	equ	0xFF2
 12863                           postinc0	equ	0xFEE
 12864                           wreg	equ	0xFE8
 12865                           postdec1	equ	0xFE5
 12866                           fsr1l	equ	0xFE1
 12867                           indf2	equ	0xFDF
 12868                           postinc2	equ	0xFDE
 12869                           fsr2h	equ	0xFDA
 12870                           fsr2l	equ	0xFD9
 12871                           status	equ	0xFD8
 12872                           
 12873 ;; *************** function _sprintf *****************
 12874 ;; Defined at:
 12875 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
 12876 ;; Parameters:    Size  Location     Type
 12877 ;;  wh              2   33[BANK0 ] PTR unsigned char 
 12878 ;;		 -> intToFloatStr@end(4), line3(21), line2(21), line1(21), 
 12879 ;;		 -> line4(21), bufferAUX(20), 
 12880 ;;  f               2   35[BANK0 ] PTR const unsigned char 
 12881 ;;		 -> intToFloatStr@conv(4), STR_114(15), STR_113(12), STR_112(10), 
 12882 ;;		 -> STR_111(18), STR_110(10), STR_109(18), STR_108(16), 
 12883 ;;		 -> STR_107(10), STR_106(10), STR_105(11), STR_104(9), 
 12884 ;;		 -> STR_103(3), STR_102(15), STR_101(15), STR_100(11), 
 12885 ;;		 -> STR_99(11), STR_98(19), STR_97(5), STR_96(12), 
 12886 ;;		 -> STR_95(5), STR_94(14), STR_93(19), STR_90(3), 
 12887 ;;		 -> STR_89(7), STR_88(7), STR_86(12), STR_85(17), 
 12888 ;;		 -> STR_84(20), STR_83(8), STR_80(14), STR_77(14), 
 12889 ;;		 -> STR_76(11), STR_73(10), STR_72(31), STR_69(11), 
 12890 ;;		 -> STR_68(20), STR_67(20), STR_66(21), STR_65(15), 
 12891 ;;		 -> STR_64(6), STR_63(15), STR_62(6), STR_61(19), 
 12892 ;;		 -> STR_60(15), STR_59(19), STR_58(15), STR_57(19), 
 12893 ;;		 -> STR_56(18), STR_55(26), STR_54(16), STR_51(15), 
 12894 ;;		 -> STR_48(15), STR_45(11), STR_44(17), STR_43(16), 
 12895 ;;		 -> STR_42(19), STR_41(19), STR_40(16), STR_39(15), 
 12896 ;;		 -> STR_38(15), STR_37(20), STR_2(5), STR_1(5), 
 12897 ;; Auto vars:     Size  Location     Type
 12898 ;;  pb              4   49[BANK0 ] struct __prbuf
 12899 ;;  ap              2   47[BANK0 ] PTR void [1]
 12900 ;;		 -> ?_sprintf(2), ?_printf(2), 
 12901 ;; Return value:  Size  Location     Type
 12902 ;;                  2   33[BANK0 ] int 
 12903 ;; Registers used:
 12904 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12905 ;; Tracked objects:
 12906 ;;		On entry : 0/0
 12907 ;;		On exit  : 0/0
 12908 ;;		Unchanged: 0/0
 12909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12910 ;;      Params:         0      14       0       0       0       0       0
 12911 ;;      Locals:         0       6       0       0       0       0       0
 12912 ;;      Temps:          0       0       0       0       0       0       0
 12913 ;;      Totals:         0      20       0       0       0       0       0
 12914 ;;Total ram usage:       20 bytes
 12915 ;; Hardware stack levels used:    1
 12916 ;; Hardware stack levels required when called:    8
 12917 ;; This function calls:
 12918 ;;		__doprnt
 12919 ;; This function is called by:
 12920 ;;		_getSerial
 12921 ;;		_drenarPressao
 12922 ;;		_acaoTesteBombas
 12923 ;;		_telaPrincipal
 12924 ;;		_tela_ajusteRTC
 12925 ;;		_tela_testeBombas
 12926 ;;		_dataLoger
 12927 ;;		_informacoes
 12928 ;;		_configuraTelefones
 12929 ;;		_configurarEstacionaria
 12930 ;;		_ajusteSP_Bombas
 12931 ;;		_main
 12932 ;;		_intToFloatStr
 12933 ;;		_telaTeste
 12934 ;; This function uses a non-reentrant model
 12935 ;;
 12936                           
 12937                           	psect	text40
 12938  007512                     __ptext40:
 12939                           	opt stack 0
 12940  007512                     _sprintf:
 12941                           	opt stack 0
 12942  007512  FFFF               	dw	65535	; assembler added errata NOP
 12943                           
 12944                           ; BSR set to: 0
 12945                           ;incstack = 0
 12946  007514  C0A1  F0B1         	movff	sprintf@wh,sprintf@pb
 12947  007518  C0A2  F0B2         	movff	sprintf@wh+1,sprintf@pb+1
 12948  00751C  0E00               	movlw	0
 12949  00751E  0100               	movlb	0	; () banked
 12950  007520  6FB3               	movwf	(sprintf@pb+2)& (0+255),b
 12951  007522  0E00               	movlw	0
 12952  007524  6FB4               	movwf	(sprintf@pb+3)& (0+255),b
 12953  007526  0EA5               	movlw	low (?_sprintf+4)
 12954  007528  6FAF               	movwf	sprintf@ap& (0+255),b
 12955  00752A  0E00               	movlw	high (?_sprintf+4)
 12956  00752C  6FB0               	movwf	(sprintf@ap+1)& (0+255),b
 12957                           
 12958                           ; BSR set to: 0
 12959  00752E  0EB1               	movlw	low sprintf@pb
 12960  007530  6F8C               	movwf	__doprnt@pb& (0+255),b
 12961  007532  0E00               	movlw	high sprintf@pb
 12962  007534  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 12963  007536  C0A3  F08E         	movff	sprintf@f,__doprnt@f
 12964  00753A  C0A4  F08F         	movff	sprintf@f+1,__doprnt@f+1
 12965  00753E  0EAF               	movlw	low sprintf@ap
 12966  007540  6F90               	movwf	__doprnt@ap& (0+255),b
 12967  007542  0E00               	movlw	high sprintf@ap
 12968  007544  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 12969  007546  EC92  F000         	call	__doprnt	;wreg free
 12970  00754A  C0B1  FFD9         	movff	sprintf@pb,fsr2l
 12971  00754E  C0B2  FFDA         	movff	sprintf@pb+1,fsr2h
 12972  007552  0E00               	movlw	0
 12973  007554  6EDF               	movwf	indf2,c
 12974                           
 12975                           ;	Return value of _sprintf is never used
 12976  007556  0012               	return		;funcret
 12977  007558  FFFF               	dw	65535	; errata NOP
 12978  00755A                     __end_of_sprintf:
 12979                           	opt stack 0
 12980                           tblptru	equ	0xFF8
 12981                           tblptrh	equ	0xFF7
 12982                           tblptrl	equ	0xFF6
 12983                           tablat	equ	0xFF5
 12984                           prodh	equ	0xFF4
 12985                           prodl	equ	0xFF3
 12986                           intcon	equ	0xFF2
 12987                           postinc0	equ	0xFEE
 12988                           wreg	equ	0xFE8
 12989                           postdec1	equ	0xFE5
 12990                           fsr1l	equ	0xFE1
 12991                           indf2	equ	0xFDF
 12992                           postinc2	equ	0xFDE
 12993                           fsr2h	equ	0xFDA
 12994                           fsr2l	equ	0xFD9
 12995                           status	equ	0xFD8
 12996                           
 12997 ;; *************** function _clearShiftREG *****************
 12998 ;; Defined at:
 12999 ;;		line 30 in file "shift595.h"
 13000 ;; Parameters:    Size  Location     Type
 13001 ;;		None
 13002 ;; Auto vars:     Size  Location     Type
 13003 ;;  i               1    0[BANK0 ] unsigned char 
 13004 ;; Return value:  Size  Location     Type
 13005 ;;                  1    wreg      void 
 13006 ;; Registers used:
 13007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13008 ;; Tracked objects:
 13009 ;;		On entry : 0/0
 13010 ;;		On exit  : 0/0
 13011 ;;		Unchanged: 0/0
 13012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13013 ;;      Params:         0       0       0       0       0       0       0
 13014 ;;      Locals:         0       1       0       0       0       0       0
 13015 ;;      Temps:          0       0       0       0       0       0       0
 13016 ;;      Totals:         0       1       0       0       0       0       0
 13017 ;;Total ram usage:        1 bytes
 13018 ;; Hardware stack levels used:    1
 13019 ;; Hardware stack levels required when called:    6
 13020 ;; This function calls:
 13021 ;;		Nothing
 13022 ;; This function is called by:
 13023 ;;		_acaoTesteBombas
 13024 ;;		_resetParametros
 13025 ;;		_telaPrincipal
 13026 ;; This function uses a non-reentrant model
 13027 ;;
 13028                           
 13029                           	psect	text41
 13030  00713C                     __ptext41:
 13031                           	opt stack 0
 13032  00713C                     _clearShiftREG:
 13033                           	opt stack 0
 13034  00713C  FFFF               	dw	65535	; assembler added errata NOP
 13035                           
 13036                           ;shift595.h: 31: char i = 0;
 13037                           
 13038                           ;incstack = 0
 13039  00713E  0E00               	movlw	0
 13040  007140  0100               	movlb	0	; () banked
 13041  007142  6F80               	movwf	clearShiftREG@i& (0+255),b
 13042                           
 13043                           ;shift595.h: 32: for (i = 0; i < 8; i++) {
 13044  007144  0E00               	movlw	0
 13045  007146  6F80               	movwf	clearShiftREG@i& (0+255),b
 13046  007148                     l5308:
 13047  007148  FFFF               	dw	65535	; assembler added errata NOP
 13048                           
 13049                           ; BSR set to: 0
 13050  00714A  0E07               	movlw	7
 13051  00714C  6580               	cpfsgt	clearShiftREG@i& (0+255),b
 13052  00714E  D001               	goto	l420
 13053  007150  D00D               	goto	u5410
 13054  007152                     l420:
 13055  007152  FFFF               	dw	65535	; assembler added errata NOP
 13056                           
 13057                           ; BSR set to: 0
 13058                           ;shift595.h: 33: shift[i] = 0;
 13059                           
 13060                           ; BSR set to: 0
 13061  007154  5180               	movf	clearShiftREG@i& (0+255),w,b
 13062  007156  0D01               	mullw	1
 13063  007158  0E44               	movlw	low _shift
 13064  00715A  24F3               	addwf	prodl,w,c
 13065  00715C  6ED9               	movwf	fsr2l,c
 13066  00715E  0E00               	movlw	high _shift
 13067  007160  20F4               	addwfc	prodh,w,c
 13068  007162  6EDA               	movwf	fsr2h,c
 13069  007164  0E00               	movlw	0
 13070  007166  6EDF               	movwf	indf2,c
 13071                           
 13072                           ; BSR set to: 0
 13073  007168  2B80               	incf	clearShiftREG@i& (0+255),f,b
 13074  00716A  D7EE               	goto	l5308
 13075  00716C                     u5410:
 13076  00716C  FFFF               	dw	65535	; assembler added errata NOP
 13077                           
 13078                           ; BSR set to: 0
 13079                           
 13080                           ; BSR set to: 0
 13081  00716E  0012               	return		;funcret
 13082  007170  FFFF               	dw	65535	; errata NOP
 13083  007172                     __end_of_clearShiftREG:
 13084                           	opt stack 0
 13085                           tblptru	equ	0xFF8
 13086                           tblptrh	equ	0xFF7
 13087                           tblptrl	equ	0xFF6
 13088                           tablat	equ	0xFF5
 13089                           prodh	equ	0xFF4
 13090                           prodl	equ	0xFF3
 13091                           intcon	equ	0xFF2
 13092                           postinc0	equ	0xFEE
 13093                           wreg	equ	0xFE8
 13094                           postdec1	equ	0xFE5
 13095                           fsr1l	equ	0xFE1
 13096                           indf2	equ	0xFDF
 13097                           postinc2	equ	0xFDE
 13098                           fsr2h	equ	0xFDA
 13099                           fsr2l	equ	0xFD9
 13100                           status	equ	0xFD8
 13101                           
 13102 ;; *************** function _btPress *****************
 13103 ;; Defined at:
 13104 ;;		line 59 in file "teclado.h"
 13105 ;; Parameters:    Size  Location     Type
 13106 ;;  bt              1    wreg     unsigned char 
 13107 ;; Auto vars:     Size  Location     Type
 13108 ;;  bt              1    0[BANK0 ] unsigned char 
 13109 ;; Return value:  Size  Location     Type
 13110 ;;                  1    wreg      unsigned char 
 13111 ;; Registers used:
 13112 ;;		wreg, status,2, status,0
 13113 ;; Tracked objects:
 13114 ;;		On entry : 0/0
 13115 ;;		On exit  : 0/0
 13116 ;;		Unchanged: 0/0
 13117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13118 ;;      Params:         0       0       0       0       0       0       0
 13119 ;;      Locals:         0       1       0       0       0       0       0
 13120 ;;      Temps:          0       0       0       0       0       0       0
 13121 ;;      Totals:         0       1       0       0       0       0       0
 13122 ;;Total ram usage:        1 bytes
 13123 ;; Hardware stack levels used:    1
 13124 ;; Hardware stack levels required when called:    6
 13125 ;; This function calls:
 13126 ;;		Nothing
 13127 ;; This function is called by:
 13128 ;;		_acaoTesteBombas
 13129 ;;		_telaPrincipal
 13130 ;;		_tela_ajusteRTC
 13131 ;;		_tela_testeBombas
 13132 ;;		_dataLoger
 13133 ;;		_informacoes
 13134 ;;		_configuraTelefones
 13135 ;;		_configurarEstacionaria
 13136 ;;		_ajusteSP_Bombas
 13137 ;;		_main
 13138 ;; This function uses a non-reentrant model
 13139 ;;
 13140                           
 13141                           	psect	text42
 13142  007886                     __ptext42:
 13143                           	opt stack 0
 13144  007886                     _btPress:
 13145                           	opt stack 0
 13146  007886  FFFF               	dw	65535	; assembler added errata NOP
 13147                           
 13148                           ; BSR set to: 0
 13149                           ;incstack = 0
 13150                           ;btPress@bt stored from wreg
 13151  007888  0100               	movlb	0	; () banked
 13152  00788A  6F80               	movwf	btPress@bt& (0+255),b
 13153                           
 13154                           ;teclado.h: 60: switch (bt) {
 13155  00788C  D023               	goto	l459
 13156  00788E  FFFF               	dw	65535	; assembler added errata NOP
 13157  007890  5064               	movf	__b_esc,w,c
 13158  007892  B4D8               	btfsc	status,2,c
 13159  007894  D01C               	goto	l468
 13160                           
 13161                           ;teclado.h: 62: _b_esc = 0;
 13162  007896  0E00               	movlw	0
 13163  007898  6E64               	movwf	__b_esc,c
 13164  00789A  D014               	goto	L32
 13165  00789C  FFFF               	dw	65535	; assembler added errata NOP
 13166  00789E  5060               	movf	__b_mais,w,c
 13167  0078A0  B4D8               	btfsc	status,2,c
 13168  0078A2  D015               	goto	l468
 13169                           
 13170                           ;teclado.h: 68: _b_mais = 0;
 13171  0078A4  0E00               	movlw	0
 13172  0078A6  6E60               	movwf	__b_mais,c
 13173  0078A8  D00D               	goto	L32
 13174  0078AA  FFFF               	dw	65535	; assembler added errata NOP
 13175  0078AC  5062               	movf	__b_menos,w,c
 13176  0078AE  B4D8               	btfsc	status,2,c
 13177  0078B0  D00E               	goto	l468
 13178                           
 13179                           ;teclado.h: 74: _b_menos = 0;
 13180  0078B2  0E00               	movlw	0
 13181  0078B4  6E62               	movwf	__b_menos,c
 13182  0078B6  D006               	goto	L32
 13183  0078B8  FFFF               	dw	65535	; assembler added errata NOP
 13184  0078BA  505E               	movf	__b_ok,w,c
 13185  0078BC  B4D8               	btfsc	status,2,c
 13186  0078BE  D007               	goto	l468
 13187                           
 13188                           ;teclado.h: 80: _b_ok = 0;
 13189  0078C0  0E00               	movlw	0
 13190  0078C2  6E5E               	movwf	__b_ok,c
 13191  0078C4                     L32:
 13192  0078C4  FFFF               	dw	65535	; assembler added errata NOP
 13193                           
 13194                           ;teclado.h: 81: bt_press = 1;
 13195  0078C6  0E01               	movlw	1
 13196  0078C8  6E7E               	movwf	_bt_press,c
 13197                           
 13198                           ;teclado.h: 82: return 1;
 13199  0078CA  0E01               	movlw	1
 13200  0078CC  D013               	goto	l470
 13201  0078CE                     l468:
 13202  0078CE  FFFF               	dw	65535	; assembler added errata NOP
 13203                           
 13204                           ;teclado.h: 85: default: return 0;
 13205                           
 13206                           ;teclado.h: 83: }
 13207                           ;teclado.h: 84: return 0;
 13208  0078D0  0E00               	movlw	0
 13209                           
 13210                           ;teclado.h: 86: }
 13211  0078D2  D010               	goto	l470
 13212  0078D4                     l459:
 13213  0078D4  FFFF               	dw	65535	; assembler added errata NOP
 13214  0078D6  0100               	movlb	0	; () banked
 13215  0078D8  5180               	movf	btPress@bt& (0+255),w,b
 13216                           
 13217                           ; Switch size 1, requested type "space"
 13218                           ; Number of cases is 4, Range of values is 1 to 4
 13219                           ; switch strategies available:
 13220                           ; Name         Instructions Cycles
 13221                           ; simple_byte           13     7 (average)
 13222                           ;	Chosen strategy is simple_byte
 13223  0078DA  0A01               	xorlw	1	; case 1
 13224  0078DC  B4D8               	btfsc	status,2,c
 13225  0078DE  D7D7               	goto	l460
 13226  0078E0  0A03               	xorlw	3	; case 2
 13227  0078E2  B4D8               	btfsc	status,2,c
 13228  0078E4  D7E2               	goto	l465
 13229  0078E6  0A01               	xorlw	1	; case 3
 13230  0078E8  B4D8               	btfsc	status,2,c
 13231  0078EA  D7D8               	goto	l463
 13232  0078EC  0A07               	xorlw	7	; case 4
 13233  0078EE  B4D8               	btfsc	status,2,c
 13234  0078F0  D7E3               	goto	l467
 13235  0078F2  D7ED               	goto	l468
 13236  0078F4                     l470:
 13237  0078F4  FFFF               	dw	65535	; assembler added errata NOP
 13238                           
 13239                           ; BSR set to: 0
 13240  0078F6  0012               	return		;funcret
 13241  0078F8  FFFF               	dw	65535	; errata NOP
 13242  0078FA                     __end_of_btPress:
 13243                           	opt stack 0
 13244                           tblptru	equ	0xFF8
 13245                           tblptrh	equ	0xFF7
 13246                           tblptrl	equ	0xFF6
 13247                           tablat	equ	0xFF5
 13248                           prodh	equ	0xFF4
 13249                           prodl	equ	0xFF3
 13250                           intcon	equ	0xFF2
 13251                           postinc0	equ	0xFEE
 13252                           wreg	equ	0xFE8
 13253                           postdec1	equ	0xFE5
 13254                           fsr1l	equ	0xFE1
 13255                           indf2	equ	0xFDF
 13256                           postinc2	equ	0xFDE
 13257                           fsr2h	equ	0xFDA
 13258                           fsr2l	equ	0xFD9
 13259                           status	equ	0xFD8
 13260                           
 13261 ;; *************** function _acaoBombas *****************
 13262 ;; Defined at:
 13263 ;;		line 18 in file "controle.h"
 13264 ;; Parameters:    Size  Location     Type
 13265 ;;		None
 13266 ;; Auto vars:     Size  Location     Type
 13267 ;;		None
 13268 ;; Return value:  Size  Location     Type
 13269 ;;                  1    wreg      void 
 13270 ;; Registers used:
 13271 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13272 ;; Tracked objects:
 13273 ;;		On entry : 0/0
 13274 ;;		On exit  : 0/0
 13275 ;;		Unchanged: 0/0
 13276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13277 ;;      Params:         0       0       0       0       0       0       0
 13278 ;;      Locals:         0       0       0       0       0       0       0
 13279 ;;      Temps:          0       3       0       0       0       0       0
 13280 ;;      Totals:         0       3       0       0       0       0       0
 13281 ;;Total ram usage:        3 bytes
 13282 ;; Hardware stack levels used:    1
 13283 ;; Hardware stack levels required when called:   10
 13284 ;; This function calls:
 13285 ;;		_enviaSMS
 13286 ;;		_partidaBombaEstacionaria
 13287 ;; This function is called by:
 13288 ;;		_main
 13289 ;; This function uses a non-reentrant model
 13290 ;;
 13291                           
 13292                           	psect	text43
 13293  002E42                     __ptext43:
 13294                           	opt stack 0
 13295  002E42                     _acaoBombas:
 13296                           	opt stack 0
 13297  002E42  FFFF               	dw	65535	; assembler added errata NOP
 13298                           
 13299                           ;controle.h: 19: if (pressao >= sp_pressao_rede && !ocorrendoIncendio && !executandoTest
      +                          e) {
 13300                           
 13301                           ;incstack = 0
 13302  002E44  0100               	movlb	0	; () banked
 13303  002E46  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 13304  002E48  6FC8               	movwf	??_acaoBombas& (0+255),b
 13305  002E4A  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13306  002E4C  51C8               	movf	??_acaoBombas& (0+255),w,b
 13307  002E4E  5DF8               	subwf	_pressao& (0+255),w,b
 13308  002E50  51F9               	movf	(_pressao+1)& (0+255),w,b
 13309  002E52  0A80               	xorlw	128
 13310  002E54  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13311  002E56  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13312  002E58  0A80               	xorlw	128
 13313  002E5A  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13314  002E5C  A0D8               	btfss	status,0,c
 13315  002E5E  D00F               	goto	l473
 13316                           
 13317                           ; BSR set to: 0
 13318  002E60  51F3               	movf	_ocorrendoIncendio& (0+255),w,b
 13319  002E62  A4D8               	btfss	status,2,c
 13320  002E64  D00C               	goto	l473
 13321                           
 13322                           ; BSR set to: 0
 13323  002E66  51F2               	movf	_executandoTeste& (0+255),w,b
 13324  002E68  A4D8               	btfss	status,2,c
 13325  002E6A  D009               	goto	l473
 13326                           
 13327                           ; BSR set to: 0
 13328                           ;controle.h: 20: shift[6] = 0;
 13329  002E6C  0E00               	movlw	0
 13330  002E6E  6E4A               	movwf	_shift+6,c
 13331                           
 13332                           ;controle.h: 21: shift[5] = 0;
 13333  002E70  0E00               	movlw	0
 13334  002E72  6E49               	movwf	_shift+5,c
 13335                           
 13336                           ; BSR set to: 0
 13337                           ;controle.h: 22: partidaBombaEstacionaria(0);
 13338  002E74  0E00               	movlw	0
 13339  002E76  ECC4  F01B         	call	_partidaBombaEstacionaria
 13340                           
 13341                           ;controle.h: 23: shift[1] = 0;
 13342  002E7A  0E00               	movlw	0
 13343  002E7C  D074               	goto	L33
 13344  002E7E                     l473:
 13345  002E7E  FFFF               	dw	65535	; assembler added errata NOP
 13346                           
 13347                           ;controle.h: 25: }
 13348                           ;controle.h: 27: shift[2] = 0;
 13349  002E80  0E00               	movlw	0
 13350  002E82  6E46               	movwf	_shift+2,c
 13351                           
 13352                           ;controle.h: 28: if (pressao <= sp_jockey) {
 13353  002E84  0100               	movlb	0	; () banked
 13354  002E86  51E3               	movf	_sp_jockey& (0+255),w,b
 13355  002E88  6FC8               	movwf	??_acaoBombas& (0+255),b
 13356  002E8A  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13357  002E8C  51F8               	movf	_pressao& (0+255),w,b
 13358  002E8E  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13359  002E90  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13360  002E92  0A80               	xorlw	128
 13361  002E94  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13362  002E96  51F9               	movf	(_pressao+1)& (0+255),w,b
 13363  002E98  0A80               	xorlw	128
 13364  002E9A  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13365  002E9C  A0D8               	btfss	status,0,c
 13366  002E9E  D002               	goto	l475
 13367                           
 13368                           ; BSR set to: 0
 13369                           ;controle.h: 29: shift[6] = 1;
 13370  002EA0  0E01               	movlw	1
 13371  002EA2  D012               	goto	L34
 13372  002EA4                     l475:
 13373  002EA4  FFFF               	dw	65535	; assembler added errata NOP
 13374                           
 13375                           ; BSR set to: 0
 13376                           
 13377                           ; BSR set to: 0
 13378  002EA6  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 13379  002EA8  6FC8               	movwf	??_acaoBombas& (0+255),b
 13380  002EAA  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13381  002EAC  51C8               	movf	??_acaoBombas& (0+255),w,b
 13382  002EAE  5DF8               	subwf	_pressao& (0+255),w,b
 13383  002EB0  51F9               	movf	(_pressao+1)& (0+255),w,b
 13384  002EB2  0A80               	xorlw	128
 13385  002EB4  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13386  002EB6  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13387  002EB8  0A80               	xorlw	128
 13388  002EBA  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13389  002EBC  A0D8               	btfss	status,0,c
 13390  002EBE  D006               	goto	l477
 13391                           
 13392                           ; BSR set to: 0
 13393  002EC0  51F3               	movf	_ocorrendoIncendio& (0+255),w,b
 13394  002EC2  A4D8               	btfss	status,2,c
 13395  002EC4  D003               	goto	l477
 13396                           
 13397                           ; BSR set to: 0
 13398                           ;controle.h: 31: shift[6] = 0;
 13399  002EC6  0E00               	movlw	0
 13400  002EC8                     L34:
 13401  002EC8  FFFF               	dw	65535	; assembler added errata NOP
 13402  002ECA  6E4A               	movwf	_shift+6,c
 13403  002ECC                     l477:
 13404  002ECC  FFFF               	dw	65535	; assembler added errata NOP
 13405                           
 13406                           ; BSR set to: 0
 13407                           ;controle.h: 32: }
 13408                           ;controle.h: 34: if (pressao <= sp_principal) {
 13409                           
 13410                           ; BSR set to: 0
 13411                           
 13412                           ; BSR set to: 0
 13413  002ECE  51E2               	movf	_sp_principal& (0+255),w,b
 13414  002ED0  6FC8               	movwf	??_acaoBombas& (0+255),b
 13415  002ED2  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13416  002ED4  51F8               	movf	_pressao& (0+255),w,b
 13417  002ED6  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13418  002ED8  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13419  002EDA  0A80               	xorlw	128
 13420  002EDC  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13421  002EDE  51F9               	movf	(_pressao+1)& (0+255),w,b
 13422  002EE0  0A80               	xorlw	128
 13423  002EE2  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13424  002EE4  A0D8               	btfss	status,0,c
 13425  002EE6  D009               	goto	l479
 13426                           
 13427                           ; BSR set to: 0
 13428                           ;controle.h: 35: ocorrendoIncendio = 1;
 13429  002EE8  0E01               	movlw	1
 13430  002EEA  6FF3               	movwf	_ocorrendoIncendio& (0+255),b
 13431                           
 13432                           ;controle.h: 36: shift[5] = 1;
 13433  002EEC  0E01               	movlw	1
 13434  002EEE  6E49               	movwf	_shift+5,c
 13435                           
 13436                           ; BSR set to: 0
 13437                           ;controle.h: 37: if (!PORTCbits.RC0) {
 13438  002EF0  B082               	btfsc	3970,0,c	;volatile
 13439  002EF2  D003               	goto	l479
 13440                           
 13441                           ; BSR set to: 0
 13442                           ;controle.h: 38: partidaBombaEstacionaria(1);
 13443  002EF4  0E01               	movlw	1
 13444  002EF6  ECC4  F01B         	call	_partidaBombaEstacionaria
 13445  002EFA                     l479:
 13446  002EFA  FFFF               	dw	65535	; assembler added errata NOP
 13447                           
 13448                           ;controle.h: 39: }
 13449                           ;controle.h: 40: }
 13450                           ;controle.h: 41: if (pressao >= sp_pressao_rede && !ocorrendoIncendio) {
 13451  002EFC  0100               	movlb	0	; () banked
 13452  002EFE  51E4               	movf	_sp_pressao_rede& (0+255),w,b
 13453  002F00  6FC8               	movwf	??_acaoBombas& (0+255),b
 13454  002F02  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13455  002F04  51C8               	movf	??_acaoBombas& (0+255),w,b
 13456  002F06  5DF8               	subwf	_pressao& (0+255),w,b
 13457  002F08  51F9               	movf	(_pressao+1)& (0+255),w,b
 13458  002F0A  0A80               	xorlw	128
 13459  002F0C  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13460  002F0E  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13461  002F10  0A80               	xorlw	128
 13462  002F12  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13463  002F14  A0D8               	btfss	status,0,c
 13464  002F16  D008               	goto	l480
 13465                           
 13466                           ; BSR set to: 0
 13467  002F18  51F3               	movf	_ocorrendoIncendio& (0+255),w,b
 13468  002F1A  A4D8               	btfss	status,2,c
 13469  002F1C  D005               	goto	l480
 13470                           
 13471                           ; BSR set to: 0
 13472                           ;controle.h: 42: shift[5] = 0;
 13473  002F1E  0E00               	movlw	0
 13474  002F20  6E49               	movwf	_shift+5,c
 13475                           
 13476                           ; BSR set to: 0
 13477                           ;controle.h: 43: partidaBombaEstacionaria(0);
 13478  002F22  0E00               	movlw	0
 13479  002F24  ECC4  F01B         	call	_partidaBombaEstacionaria
 13480  002F28                     l480:
 13481  002F28  FFFF               	dw	65535	; assembler added errata NOP
 13482                           
 13483                           ;controle.h: 44: }
 13484                           ;controle.h: 46: if (pressao <= sp_estacionaria) {
 13485  002F2A  0100               	movlb	0	; () banked
 13486  002F2C  51E1               	movf	_sp_estacionaria& (0+255),w,b
 13487  002F2E  6FC8               	movwf	??_acaoBombas& (0+255),b
 13488  002F30  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13489  002F32  51F8               	movf	_pressao& (0+255),w,b
 13490  002F34  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13491  002F36  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13492  002F38  0A80               	xorlw	128
 13493  002F3A  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13494  002F3C  51F9               	movf	(_pressao+1)& (0+255),w,b
 13495  002F3E  0A80               	xorlw	128
 13496  002F40  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13497  002F42  A0D8               	btfss	status,0,c
 13498  002F44  D006               	goto	l481
 13499                           
 13500                           ; BSR set to: 0
 13501                           ;controle.h: 47: partidaBombaEstacionaria(1);
 13502  002F46  0E01               	movlw	1
 13503  002F48  ECC4  F01B         	call	_partidaBombaEstacionaria
 13504                           
 13505                           ;controle.h: 48: ocorrendoIncendio = 1;
 13506  002F4C  0E01               	movlw	1
 13507  002F4E  0100               	movlb	0	; () banked
 13508  002F50  6FF3               	movwf	_ocorrendoIncendio& (0+255),b
 13509  002F52                     l481:
 13510  002F52  FFFF               	dw	65535	; assembler added errata NOP
 13511                           
 13512                           ; BSR set to: 0
 13513                           ;controle.h: 49: }
 13514                           ;controle.h: 51: if (ocorrendoIncendio) {
 13515                           
 13516                           ; BSR set to: 0
 13517  002F54  51F3               	movf	_ocorrendoIncendio& (0+255),w,b
 13518  002F56  B4D8               	btfsc	status,2,c
 13519  002F58  D008               	goto	l482
 13520                           
 13521                           ; BSR set to: 0
 13522                           ;controle.h: 52: gsmOcupado = 1;
 13523  002F5A  0E01               	movlw	1
 13524  002F5C  6FF4               	movwf	_gsmOcupado& (0+255),b
 13525                           
 13526                           ; BSR set to: 0
 13527                           ;controle.h: 53: enviaSMS(1);
 13528  002F5E  0E01               	movlw	1
 13529  002F60  ECA5  F00A         	call	_enviaSMS
 13530                           
 13531                           ;controle.h: 54: shift[1] = 1;
 13532  002F64  0E01               	movlw	1
 13533  002F66                     L33:
 13534  002F66  FFFF               	dw	65535	; assembler added errata NOP
 13535  002F68  6E45               	movwf	_shift+1,c
 13536  002F6A                     l482:
 13537  002F6A  FFFF               	dw	65535	; assembler added errata NOP
 13538  002F6C  0012               	return		;funcret
 13539  002F6E  FFFF               	dw	65535	; errata NOP
 13540  002F70                     __end_of_acaoBombas:
 13541                           	opt stack 0
 13542                           tblptru	equ	0xFF8
 13543                           tblptrh	equ	0xFF7
 13544                           tblptrl	equ	0xFF6
 13545                           tablat	equ	0xFF5
 13546                           prodh	equ	0xFF4
 13547                           prodl	equ	0xFF3
 13548                           intcon	equ	0xFF2
 13549                           postinc0	equ	0xFEE
 13550                           wreg	equ	0xFE8
 13551                           postdec1	equ	0xFE5
 13552                           fsr1l	equ	0xFE1
 13553                           indf2	equ	0xFDF
 13554                           postinc2	equ	0xFDE
 13555                           fsr2h	equ	0xFDA
 13556                           fsr2l	equ	0xFD9
 13557                           status	equ	0xFD8
 13558                           
 13559 ;; *************** function _partidaBombaEstacionaria *****************
 13560 ;; Defined at:
 13561 ;;		line 58 in file "controle.h"
 13562 ;; Parameters:    Size  Location     Type
 13563 ;;  acao            1    wreg     unsigned char 
 13564 ;; Auto vars:     Size  Location     Type
 13565 ;;  acao            1    3[BANK0 ] unsigned char 
 13566 ;; Return value:  Size  Location     Type
 13567 ;;                  1    wreg      void 
 13568 ;; Registers used:
 13569 ;;		wreg, status,2, status,0, cstack
 13570 ;; Tracked objects:
 13571 ;;		On entry : 0/0
 13572 ;;		On exit  : 0/0
 13573 ;;		Unchanged: 0/0
 13574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13575 ;;      Params:         0       0       0       0       0       0       0
 13576 ;;      Locals:         0       1       0       0       0       0       0
 13577 ;;      Temps:          0       0       0       0       0       0       0
 13578 ;;      Totals:         0       1       0       0       0       0       0
 13579 ;;Total ram usage:        1 bytes
 13580 ;; Hardware stack levels used:    1
 13581 ;; Hardware stack levels required when called:    7
 13582 ;; This function calls:
 13583 ;;		_delay
 13584 ;; This function is called by:
 13585 ;;		_acaoBombas
 13586 ;;		_acaoTesteBombas
 13587 ;; This function uses a non-reentrant model
 13588 ;;
 13589                           
 13590                           	psect	text44
 13591  003788                     __ptext44:
 13592                           	opt stack 0
 13593  003788                     _partidaBombaEstacionaria:
 13594                           	opt stack 0
 13595  003788  FFFF               	dw	65535	; assembler added errata NOP
 13596                           
 13597                           ;incstack = 0
 13598                           ;partidaBombaEstacionaria@acao stored from wreg
 13599  00378A  0100               	movlb	0	; () banked
 13600  00378C  6F83               	movwf	partidaBombaEstacionaria@acao& (0+255),b
 13601                           
 13602                           ;controle.h: 59: if (acao == 1 && !flagEstacionariaLigada) {
 13603  00378E  0100               	movlb	0	; () banked
 13604  003790  0583               	decf	partidaBombaEstacionaria@acao& (0+255),w,b
 13605  003792  A4D8               	btfss	status,2,c
 13606  003794  D01A               	goto	l487
 13607                           
 13608                           ; BSR set to: 0
 13609  003796  51F1               	movf	_flagEstacionariaLigada& (0+255),w,b
 13610  003798  A4D8               	btfss	status,2,c
 13611  00379A  D017               	goto	l487
 13612                           
 13613                           ; BSR set to: 0
 13614                           ;controle.h: 60: if (_sec_partida != _sec) {
 13615  00379C  51EF               	movf	__sec& (0+255),w,b
 13616  00379E  186F               	xorwf	__sec_partida,w,c
 13617  0037A0  B4D8               	btfsc	status,2,c
 13618  0037A2  D013               	goto	l487
 13619                           
 13620                           ; BSR set to: 0
 13621                           ;controle.h: 61: _sec_partida = _sec;
 13622  0037A4  C0EF  F06F         	movff	__sec,__sec_partida
 13623                           
 13624                           ; BSR set to: 0
 13625                           ;controle.h: 62: tempo_limite_partida++;
 13626  0037A8  2A6B               	incf	_tempo_limite_partida,f,c
 13627                           
 13628                           ;controle.h: 63: tempo_partida++;
 13629  0037AA  2A6C               	incf	_tempo_partida,f,c
 13630                           
 13631                           ; BSR set to: 0
 13632                           ;controle.h: 64: if (!PORTAbits.RA5) {
 13633  0037AC  BA80               	btfsc	3968,5,c	;volatile
 13634  0037AE  D00D               	goto	l487
 13635                           
 13636                           ; BSR set to: 0
 13637                           ;controle.h: 65: delay(700);
 13638  0037B0  0E02               	movlw	2
 13639  0037B2  6F81               	movwf	(delay@x+1)& (0+255),b
 13640  0037B4  0EBC               	movlw	188
 13641  0037B6  6F80               	movwf	delay@x& (0+255),b
 13642  0037B8  EC68  F038         	call	_delay	;wreg free
 13643                           
 13644                           ;controle.h: 66: flagEstacionariaLigada = 1;
 13645  0037BC  0E01               	movlw	1
 13646  0037BE  0100               	movlb	0	; () banked
 13647  0037C0  6FF1               	movwf	_flagEstacionariaLigada& (0+255),b
 13648                           
 13649                           ; BSR set to: 0
 13650                           ;controle.h: 67: tempo_partida = 0;
 13651  0037C2  0E00               	movlw	0
 13652  0037C4  6E6C               	movwf	_tempo_partida,c
 13653                           
 13654                           ; BSR set to: 0
 13655                           ;controle.h: 68: shift[4] = 0;
 13656  0037C6  0E00               	movlw	0
 13657  0037C8  6E48               	movwf	_shift+4,c
 13658  0037CA                     l487:
 13659  0037CA  FFFF               	dw	65535	; assembler added errata NOP
 13660                           
 13661                           ; BSR set to: 0
 13662                           ;controle.h: 69: }
 13663                           ;controle.h: 70: }
 13664                           ;controle.h: 71: }
 13665                           ;controle.h: 72: if (!flagEstacionariaLigada && status_estacionaria == 1) {
 13666                           
 13667                           ; BSR set to: 0
 13668                           
 13669                           ; BSR set to: 0
 13670                           
 13671                           ; BSR set to: 0
 13672  0037CC  51F1               	movf	_flagEstacionariaLigada& (0+255),w,b
 13673  0037CE  A4D8               	btfss	status,2,c
 13674  0037D0  D015               	goto	l492
 13675                           
 13676                           ; BSR set to: 0
 13677  0037D2  05FB               	decf	_status_estacionaria& (0+255),w,b
 13678  0037D4  A4D8               	btfss	status,2,c
 13679  0037D6  D012               	goto	l492
 13680                           
 13681                           ; BSR set to: 0
 13682                           ;controle.h: 73: shift[3] = 1;
 13683  0037D8  0E01               	movlw	1
 13684  0037DA  6E47               	movwf	_shift+3,c
 13685                           
 13686                           ; BSR set to: 0
 13687                           ;controle.h: 74: if (tempo_partida <= 7) {
 13688  0037DC  0E08               	movlw	8
 13689  0037DE  606C               	cpfslt	_tempo_partida,c
 13690  0037E0  D002               	goto	l489
 13691                           
 13692                           ; BSR set to: 0
 13693                           ;controle.h: 75: shift[4] = 1;
 13694  0037E2  0E01               	movlw	1
 13695  0037E4  D005               	goto	L35
 13696  0037E6                     l489:
 13697  0037E6  FFFF               	dw	65535	; assembler added errata NOP
 13698                           
 13699                           ; BSR set to: 0
 13700                           
 13701                           ; BSR set to: 0
 13702  0037E8  0E10               	movlw	16
 13703  0037EA  606C               	cpfslt	_tempo_partida,c
 13704  0037EC  D004               	goto	l491
 13705                           
 13706                           ; BSR set to: 0
 13707                           ;controle.h: 77: shift[4] = 0;
 13708  0037EE  0E00               	movlw	0
 13709  0037F0                     L35:
 13710  0037F0  FFFF               	dw	65535	; assembler added errata NOP
 13711  0037F2  6E48               	movwf	_shift+4,c
 13712                           
 13713                           ;controle.h: 78: } else {
 13714  0037F4  D003               	goto	l492
 13715  0037F6                     l491:
 13716  0037F6  FFFF               	dw	65535	; assembler added errata NOP
 13717                           
 13718                           ; BSR set to: 0
 13719                           ;controle.h: 79: tempo_partida = 0;
 13720                           
 13721                           ; BSR set to: 0
 13722  0037F8  0E00               	movlw	0
 13723  0037FA  6E6C               	movwf	_tempo_partida,c
 13724  0037FC                     l492:
 13725  0037FC  FFFF               	dw	65535	; assembler added errata NOP
 13726                           
 13727                           ; BSR set to: 0
 13728                           ;controle.h: 80: }
 13729                           ;controle.h: 81: }
 13730                           ;controle.h: 82: if (tempo_limite_partida > tempo_limite_estacionaria) {
 13731                           
 13732                           ; BSR set to: 0
 13733                           
 13734                           ; BSR set to: 0
 13735                           
 13736                           ; BSR set to: 0
 13737  0037FE  506B               	movf	_tempo_limite_partida,w,c
 13738  003800  5DE6               	subwf	_tempo_limite_estacionaria& (0+255),w,b
 13739  003802  B0D8               	btfsc	status,0,c
 13740  003804  D00A               	goto	l493
 13741                           
 13742                           ; BSR set to: 0
 13743                           ;controle.h: 83: tempo_limite_partida = 0;
 13744  003806  0E00               	movlw	0
 13745  003808  6E6B               	movwf	_tempo_limite_partida,c
 13746                           
 13747                           ;controle.h: 84: status_estacionaria = 0;
 13748  00380A  0E00               	movlw	0
 13749  00380C  6FFB               	movwf	_status_estacionaria& (0+255),b
 13750                           
 13751                           ;controle.h: 85: flagEstacionariaLigada = 0;
 13752  00380E  0E00               	movlw	0
 13753  003810  6FF1               	movwf	_flagEstacionariaLigada& (0+255),b
 13754                           
 13755                           ;controle.h: 86: shift[3] = 0;
 13756  003812  0E00               	movlw	0
 13757  003814  6E47               	movwf	_shift+3,c
 13758                           
 13759                           ;controle.h: 87: shift[4] = 0;
 13760  003816  0E00               	movlw	0
 13761  003818  6E48               	movwf	_shift+4,c
 13762  00381A                     l493:
 13763  00381A  FFFF               	dw	65535	; assembler added errata NOP
 13764                           
 13765                           ; BSR set to: 0
 13766                           ;controle.h: 88: }
 13767                           ;controle.h: 91: if (acao == 0) {
 13768  00381C  5183               	movf	partidaBombaEstacionaria@acao& (0+255),w,b
 13769  00381E  A4D8               	btfss	status,2,c
 13770  003820  D00A               	goto	l494
 13771                           
 13772                           ; BSR set to: 0
 13773                           ;controle.h: 92: flagEstacionariaLigada = 0;
 13774  003822  0E00               	movlw	0
 13775  003824  6FF1               	movwf	_flagEstacionariaLigada& (0+255),b
 13776                           
 13777                           ;controle.h: 93: shift[4] = 0;
 13778  003826  0E00               	movlw	0
 13779  003828  6E48               	movwf	_shift+4,c
 13780                           
 13781                           ;controle.h: 94: shift[3] = 0;
 13782  00382A  0E00               	movlw	0
 13783  00382C  6E47               	movwf	_shift+3,c
 13784                           
 13785                           ;controle.h: 95: tempo_partida = 0;
 13786  00382E  0E00               	movlw	0
 13787  003830  6E6C               	movwf	_tempo_partida,c
 13788                           
 13789                           ;controle.h: 96: tempo_limite_partida = 0;
 13790  003832  0E00               	movlw	0
 13791  003834  6E6B               	movwf	_tempo_limite_partida,c
 13792  003836                     l494:
 13793  003836  FFFF               	dw	65535	; assembler added errata NOP
 13794                           
 13795                           ; BSR set to: 0
 13796                           ;controle.h: 97: }
 13797                           ;controle.h: 99: if (status_estacionaria == 0) {
 13798  003838  51FB               	movf	_status_estacionaria& (0+255),w,b
 13799  00383A  A4D8               	btfss	status,2,c
 13800  00383C  D006               	goto	l495
 13801                           
 13802                           ; BSR set to: 0
 13803                           ;controle.h: 100: shift[3] = 0;
 13804  00383E  0E00               	movlw	0
 13805  003840  6E47               	movwf	_shift+3,c
 13806                           
 13807                           ;controle.h: 101: shift[4] = 0;
 13808  003842  0E00               	movlw	0
 13809  003844  6E48               	movwf	_shift+4,c
 13810                           
 13811                           ;controle.h: 102: tempo_partida = 0;
 13812  003846  0E00               	movlw	0
 13813  003848  6E6C               	movwf	_tempo_partida,c
 13814  00384A                     l495:
 13815  00384A  FFFF               	dw	65535	; assembler added errata NOP
 13816                           
 13817                           ; BSR set to: 0
 13818                           ;controle.h: 103: }
 13819                           ;controle.h: 104: if (flagEstacionariaLigada) {
 13820  00384C  51F1               	movf	_flagEstacionariaLigada& (0+255),w,b
 13821  00384E  B4D8               	btfsc	status,2,c
 13822  003850  D00A               	goto	l498
 13823                           
 13824                           ; BSR set to: 0
 13825                           ;controle.h: 105: if (!PORTAbits.RA5) {
 13826  003852  BA80               	btfsc	3968,5,c	;volatile
 13827  003854  D005               	goto	l497
 13828                           
 13829                           ; BSR set to: 0
 13830                           ;controle.h: 106: shift[4] = 0;
 13831  003856  0E00               	movlw	0
 13832  003858  6E48               	movwf	_shift+4,c
 13833                           
 13834                           ;controle.h: 107: tempo_limite_partida = 0;
 13835  00385A  0E00               	movlw	0
 13836  00385C  6E6B               	movwf	_tempo_limite_partida,c
 13837                           
 13838                           ;controle.h: 108: } else {
 13839  00385E  D003               	goto	l498
 13840  003860                     l497:
 13841  003860  FFFF               	dw	65535	; assembler added errata NOP
 13842                           
 13843                           ; BSR set to: 0
 13844                           ;controle.h: 109: flagEstacionariaLigada = 0;
 13845                           
 13846                           ; BSR set to: 0
 13847  003862  0E00               	movlw	0
 13848  003864  6FF1               	movwf	_flagEstacionariaLigada& (0+255),b
 13849  003866                     l498:
 13850  003866  FFFF               	dw	65535	; assembler added errata NOP
 13851                           
 13852                           ; BSR set to: 0
 13853                           
 13854                           ; BSR set to: 0
 13855                           
 13856                           ; BSR set to: 0
 13857  003868  0012               	return		;funcret
 13858  00386A  FFFF               	dw	65535	; errata NOP
 13859  00386C                     __end_of_partidaBombaEstacionaria:
 13860                           	opt stack 0
 13861                           tblptru	equ	0xFF8
 13862                           tblptrh	equ	0xFF7
 13863                           tblptrl	equ	0xFF6
 13864                           tablat	equ	0xFF5
 13865                           prodh	equ	0xFF4
 13866                           prodl	equ	0xFF3
 13867                           intcon	equ	0xFF2
 13868                           postinc0	equ	0xFEE
 13869                           wreg	equ	0xFE8
 13870                           postdec1	equ	0xFE5
 13871                           fsr1l	equ	0xFE1
 13872                           indf2	equ	0xFDF
 13873                           postinc2	equ	0xFDE
 13874                           fsr2h	equ	0xFDA
 13875                           fsr2l	equ	0xFD9
 13876                           status	equ	0xFD8
 13877                           
 13878 ;; *************** function _enviaSMS *****************
 13879 ;; Defined at:
 13880 ;;		line 124 in file "comunicacao.h"
 13881 ;; Parameters:    Size  Location     Type
 13882 ;;  tipo            1    wreg     unsigned char 
 13883 ;; Auto vars:     Size  Location     Type
 13884 ;;  tipo            1   71[BANK0 ] unsigned char 
 13885 ;; Return value:  Size  Location     Type
 13886 ;;                  1    wreg      void 
 13887 ;; Registers used:
 13888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13889 ;; Tracked objects:
 13890 ;;		On entry : 0/0
 13891 ;;		On exit  : 0/0
 13892 ;;		Unchanged: 0/0
 13893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13894 ;;      Params:         0       0       0       0       0       0       0
 13895 ;;      Locals:         0      11       0       0       0       0       0
 13896 ;;      Temps:          0       2       0       0       0       0       0
 13897 ;;      Totals:         0      13       0       0       0       0       0
 13898 ;;Total ram usage:       13 bytes
 13899 ;; Hardware stack levels used:    1
 13900 ;; Hardware stack levels required when called:    9
 13901 ;; This function calls:
 13902 ;;		_aguardaBuffer
 13903 ;;		_delay
 13904 ;;		_limparBuffer
 13905 ;;		_printf
 13906 ;;		_writeChar
 13907 ;; This function is called by:
 13908 ;;		_acaoBombas
 13909 ;;		_acaoTesteBombas
 13910 ;; This function uses a non-reentrant model
 13911 ;;
 13912                           
 13913                           	psect	text45
 13914  00154A                     __ptext45:
 13915                           	opt stack 0
 13916  00154A                     _enviaSMS:
 13917                           	opt stack 0
 13918  00154A  FFFF               	dw	65535	; assembler added errata NOP
 13919                           
 13920                           ; BSR set to: 0
 13921                           ;incstack = 0
 13922                           ;enviaSMS@tipo stored from wreg
 13923  00154C  0100               	movlb	0	; () banked
 13924  00154E  6FC7               	movwf	enviaSMS@tipo& (0+255),b
 13925                           
 13926                           ;comunicacao.h: 125: if (timerReenvioSMS) return;
 13927  001550  0100               	movlb	0	; () banked
 13928  001552  51F6               	movf	_timerReenvioSMS& (0+255),w,b
 13929  001554  A4D8               	btfss	status,2,c
 13930  001556  D19C               	goto	l346
 13931  001558  D17B               	goto	l344
 13932  00155A  FFFF               	dw	65535	; assembler added errata NOP
 13933                           
 13934                           ; BSR set to: 0
 13935                           ;comunicacao.h: 129: limparBuffer();
 13936                           
 13937                           ; BSR set to: 0
 13938  00155C  EC83  F038         	call	_limparBuffer	;wreg free
 13939                           
 13940                           ;comunicacao.h: 130: printf("AT\r\n");
 13941  001560  0EDD               	movlw	low STR_4
 13942  001562  0100               	movlb	0	; () banked
 13943  001564  6FA1               	movwf	printf@f& (0+255),b
 13944  001566  0E7F               	movlw	high STR_4
 13945  001568  6FA2               	movwf	(printf@f+1)& (0+255),b
 13946  00156A  EC84  F039         	call	_printf	;wreg free
 13947                           
 13948                           ;comunicacao.h: 131: etapaComunicacao++;
 13949  00156E  4A51               	infsnz	_etapaComunicacao,f,c
 13950  001570  2A52               	incf	_etapaComunicacao+1,f,c
 13951                           
 13952                           ;comunicacao.h: 132: timerEtapaComunicacao = 6;
 13953  001572  0E06               	movlw	6
 13954  001574  0100               	movlb	0	; () banked
 13955  001576  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 13956                           
 13957                           ;comunicacao.h: 133: break;
 13958  001578  D18B               	goto	l346
 13959  00157A  FFFF               	dw	65535	; assembler added errata NOP
 13960                           
 13961                           ; BSR set to: 0
 13962                           ;comunicacao.h: 135: if (aguardaBuffer("OK")) {
 13963                           
 13964                           ; BSR set to: 0
 13965  00157C  0EF9               	movlw	low STR_5
 13966  00157E  6F93               	movwf	aguardaBuffer@str& (0+255),b
 13967  001580  0E7F               	movlw	high STR_5
 13968  001582  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 13969  001584  EC66  F039         	call	_aguardaBuffer	;wreg free
 13970  001588  0900               	iorlw	0
 13971  00158A  B4D8               	btfsc	status,2,c
 13972  00158C  D00E               	goto	l348
 13973                           
 13974                           ;comunicacao.h: 136: limparBuffer();
 13975  00158E  EC83  F038         	call	_limparBuffer	;wreg free
 13976                           
 13977                           ;comunicacao.h: 137: printf("AT+CMGF=1\r\n");
 13978  001592  0ED8               	movlw	low STR_10
 13979  001594  0100               	movlb	0	; () banked
 13980  001596  6FA1               	movwf	printf@f& (0+255),b
 13981  001598  0E7E               	movlw	high STR_10
 13982  00159A  6FA2               	movwf	(printf@f+1)& (0+255),b
 13983  00159C  EC84  F039         	call	_printf	;wreg free
 13984                           
 13985                           ;comunicacao.h: 138: etapaComunicacao++;
 13986  0015A0  4A51               	infsnz	_etapaComunicacao,f,c
 13987  0015A2  2A52               	incf	_etapaComunicacao+1,f,c
 13988                           
 13989                           ;comunicacao.h: 139: timerEtapaComunicacao = 6;
 13990  0015A4  0E06               	movlw	6
 13991  0015A6  0100               	movlb	0	; () banked
 13992  0015A8  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 13993  0015AA                     l348:
 13994  0015AA  FFFF               	dw	65535	; assembler added errata NOP
 13995                           
 13996                           ;comunicacao.h: 140: }
 13997                           ;comunicacao.h: 141: if (!timerEtapaComunicacao) {
 13998                           
 13999                           ; BSR set to: 0
 14000  0015AC  0100               	movlb	0	; () banked
 14001  0015AE  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14002  0015B0  A4D8               	btfss	status,2,c
 14003  0015B2  D16E               	goto	l346
 14004                           
 14005                           ; BSR set to: 0
 14006                           ;comunicacao.h: 142: writeChar(0x1A);
 14007  0015B4  0E1A               	movlw	26
 14008  0015B6  6F80               	movwf	writeChar@hex& (0+255),b
 14009  0015B8  0E00               	movlw	0
 14010  0015BA  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 14011  0015BC  EC3A  F037         	call	_writeChar	;wreg free
 14012                           
 14013                           ;comunicacao.h: 143: delay(15);
 14014  0015C0  0E00               	movlw	0
 14015  0015C2  0100               	movlb	0	; () banked
 14016  0015C4  6F81               	movwf	(delay@x+1)& (0+255),b
 14017  0015C6  0E0F               	movlw	15
 14018  0015C8  6F80               	movwf	delay@x& (0+255),b
 14019  0015CA  EC68  F038         	call	_delay	;wreg free
 14020                           
 14021                           ;comunicacao.h: 144: printf("ATH0\r\n");
 14022  0015CE  0EA9               	movlw	low STR_21
 14023  0015D0  0100               	movlb	0	; () banked
 14024  0015D2  6FA1               	movwf	printf@f& (0+255),b
 14025  0015D4  0E7F               	movlw	high STR_21
 14026  0015D6  6FA2               	movwf	(printf@f+1)& (0+255),b
 14027  0015D8  EC84  F039         	call	_printf	;wreg free
 14028  0015DC  D133               	goto	l392
 14029  0015DE  FFFF               	dw	65535	; assembler added errata NOP
 14030                           
 14031                           ;comunicacao.h: 149: if (aguardaBuffer("OK")) {
 14032  0015E0  0EF9               	movlw	low STR_5
 14033  0015E2  0100               	movlb	0	; () banked
 14034  0015E4  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14035  0015E6  0E7F               	movlw	high STR_5
 14036  0015E8  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14037  0015EA  EC66  F039         	call	_aguardaBuffer	;wreg free
 14038  0015EE  0900               	iorlw	0
 14039  0015F0  B4D8               	btfsc	status,2,c
 14040  0015F2  D0B2               	goto	l358
 14041                           
 14042                           ;comunicacao.h: 150: limparBuffer();
 14043  0015F4  EC83  F038         	call	_limparBuffer	;wreg free
 14044                           
 14045                           ;comunicacao.h: 151: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : t
      +                          el2);
 14046  0015F8  0100               	movlb	0	; () banked
 14047  0015FA  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14048  0015FC  B4D8               	btfsc	status,2,c
 14049  0015FE  D004               	goto	l353
 14050                           
 14051                           ; BSR set to: 0
 14052  001600  0EA4               	movlw	low _tel2
 14053  001602  6FBD               	movwf	_enviaSMS$1205& (0+255),b
 14054  001604  0E01               	movlw	high _tel2
 14055  001606  D004               	goto	L38
 14056  001608                     l353:
 14057  001608  FFFF               	dw	65535	; assembler added errata NOP
 14058                           
 14059                           ; BSR set to: 0
 14060                           
 14061                           ; BSR set to: 0
 14062  00160A  0EB0               	movlw	low _tel1
 14063  00160C  6FBD               	movwf	_enviaSMS$1205& (0+255),b
 14064  00160E  0E01               	movlw	high _tel1
 14065  001610                     L38:
 14066  001610  FFFF               	dw	65535	; assembler added errata NOP
 14067  001612  6FBE               	movwf	(_enviaSMS$1205+1)& (0+255),b
 14068                           
 14069                           ; BSR set to: 0
 14070                           
 14071                           ; BSR set to: 0
 14072  001614  0E7D               	movlw	low STR_12
 14073  001616  6FA1               	movwf	printf@f& (0+255),b
 14074  001618  0E7D               	movlw	high STR_12
 14075  00161A  6FA2               	movwf	(printf@f+1)& (0+255),b
 14076  00161C  C0BD  F0A3         	movff	_enviaSMS$1205,?_printf+2
 14077  001620  C0BE  F0A4         	movff	_enviaSMS$1205+1,?_printf+3
 14078  001624  EC84  F039         	call	_printf	;wreg free
 14079                           
 14080                           ;comunicacao.h: 152: delay(120);
 14081  001628  0E00               	movlw	0
 14082  00162A  0100               	movlb	0	; () banked
 14083  00162C  6F81               	movwf	(delay@x+1)& (0+255),b
 14084  00162E  0E78               	movlw	120
 14085  001630  6F80               	movwf	delay@x& (0+255),b
 14086  001632  EC68  F038         	call	_delay	;wreg free
 14087                           
 14088                           ;comunicacao.h: 153: timerEtapaComunicacao = 8;
 14089  001636  0E08               	movlw	8
 14090  001638  FFFF               	dw	65535	; assembler added errata NOP
 14091  00163A  0100               	movlb	0	; () banked
 14092  00163C  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;comunicacao.h: 154: etapaComunicacao++;
 14096  00163E  4A51               	infsnz	_etapaComunicacao,f,c
 14097  001640  2A52               	incf	_etapaComunicacao+1,f,c
 14098                           
 14099                           ; BSR set to: 0
 14100  001642  D08A               	goto	l358
 14101  001644  FFFF               	dw	65535	; assembler added errata NOP
 14102                           
 14103                           ; BSR set to: 0
 14104                           ;comunicacao.h: 162: if (aguardaBuffer(">")) {
 14105                           
 14106                           ; BSR set to: 0
 14107  001646  0EFC               	movlw	low STR_13
 14108  001648  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14109  00164A  0E7F               	movlw	high STR_13
 14110  00164C  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14111  00164E  EC66  F039         	call	_aguardaBuffer	;wreg free
 14112  001652  0900               	iorlw	0
 14113  001654  B4D8               	btfsc	status,2,c
 14114  001656  D080               	goto	l358
 14115                           
 14116                           ;comunicacao.h: 163: limparBuffer();
 14117  001658  EC83  F038         	call	_limparBuffer	;wreg free
 14118                           
 14119                           ;comunicacao.h: 164: if (tipo == 1) {
 14120  00165C  0100               	movlb	0	; () banked
 14121  00165E  05C7               	decf	enviaSMS@tipo& (0+255),w,b
 14122  001660  A4D8               	btfss	status,2,c
 14123  001662  D018               	goto	l359
 14124                           
 14125                           ; BSR set to: 0
 14126                           ;comunicacao.h: 165: printf("DISPARO ALARME DE INCENDIO\r\nEM %02d:%02d:%02d %02d/%02d/%
      +                          02d\r\n", _hor, _min, _sec, _dia, _mes, _ano);
 14127  001664  0E1B               	movlw	low STR_25
 14128  001666  6FA1               	movwf	printf@f& (0+255),b
 14129  001668  0E7C               	movlw	high STR_25
 14130  00166A  6FA2               	movwf	(printf@f+1)& (0+255),b
 14131  00166C  C0ED  F0A3         	movff	__hor,?_printf+2
 14132  001670  6BA4               	clrf	(?_printf+3)& (0+255),b
 14133  001672  C0EE  F0A5         	movff	__min,?_printf+4
 14134  001676  6BA6               	clrf	(?_printf+5)& (0+255),b
 14135  001678  C0EF  F0A7         	movff	__sec,?_printf+6
 14136  00167C  6BA8               	clrf	(?_printf+7)& (0+255),b
 14137  00167E  C0EC  F0A9         	movff	__dia,?_printf+8
 14138  001682  6BAA               	clrf	(?_printf+9)& (0+255),b
 14139  001684  C0EB  F0AB         	movff	__mes,?_printf+10
 14140  001688  6BAC               	clrf	(?_printf+11)& (0+255),b
 14141  00168A  C0EA  F0AD         	movff	__ano,?_printf+12
 14142  00168E  6BAE               	clrf	(?_printf+13)& (0+255),b
 14143  001690  EC84  F039         	call	_printf	;wreg free
 14144  001694                     l359:
 14145  001694  FFFF               	dw	65535	; assembler added errata NOP
 14146                           
 14147                           ;comunicacao.h: 166: }
 14148                           ;comunicacao.h: 167: if (tipo == 2) {
 14149  001696  0E02               	movlw	2
 14150  001698  0100               	movlb	0	; () banked
 14151  00169A  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 14152  00169C  A4D8               	btfss	status,2,c
 14153  00169E  D04B               	goto	l360
 14154                           
 14155                           ; BSR set to: 0
 14156                           ;comunicacao.h: 168: printf("TESTE DE BOMBAS REALIZADO\r\nEM %02d:%02d:%02d %02d/%02d/%0
      +                          2d\r\nJOCKEY: %s\r\nPRINCIPAL: %s\r\nCOMBUSTAO: %s\r\n",
 14157                           ;comunicacao.h: 169: _hor, _min, _sec, _dia, _mes, _ano, status_jockey == 1 ? "OK" : "FA
      +                          LHA", status_principal == 1 ? "OK" : "FALHA", status_estacionaria == 1 ? "OK" : "FALHA")
      +                          ;
 14158  0016A0  05FB               	decf	_status_estacionaria& (0+255),w,b
 14159  0016A2  B4D8               	btfsc	status,2,c
 14160  0016A4  D004               	goto	l362
 14161                           
 14162                           ; BSR set to: 0
 14163  0016A6  0ED1               	movlw	low STR_28
 14164  0016A8  6FBF               	movwf	_enviaSMS$1218& (0+255),b
 14165  0016AA  0E7F               	movlw	high STR_28
 14166  0016AC  D004               	goto	L36
 14167  0016AE                     l362:
 14168  0016AE  FFFF               	dw	65535	; assembler added errata NOP
 14169                           
 14170                           ; BSR set to: 0
 14171                           
 14172                           ; BSR set to: 0
 14173  0016B0  0EF9               	movlw	low STR_5
 14174  0016B2  6FBF               	movwf	_enviaSMS$1218& (0+255),b
 14175  0016B4  0E7F               	movlw	high STR_5
 14176  0016B6                     L36:
 14177  0016B6  FFFF               	dw	65535	; assembler added errata NOP
 14178  0016B8  6FC0               	movwf	(_enviaSMS$1218+1)& (0+255),b
 14179                           
 14180                           ; BSR set to: 0
 14181  0016BA  05FC               	decf	_status_principal& (0+255),w,b
 14182  0016BC  B4D8               	btfsc	status,2,c
 14183  0016BE  D004               	goto	l366
 14184                           
 14185                           ; BSR set to: 0
 14186  0016C0  0ED1               	movlw	low STR_28
 14187  0016C2  6FC1               	movwf	_enviaSMS$1219& (0+255),b
 14188  0016C4  0E7F               	movlw	high STR_28
 14189  0016C6  D004               	goto	L37
 14190  0016C8                     l366:
 14191  0016C8  FFFF               	dw	65535	; assembler added errata NOP
 14192                           
 14193                           ; BSR set to: 0
 14194                           
 14195                           ; BSR set to: 0
 14196  0016CA  0EF9               	movlw	low STR_5
 14197  0016CC  6FC1               	movwf	_enviaSMS$1219& (0+255),b
 14198  0016CE  0E7F               	movlw	high STR_5
 14199  0016D0                     L37:
 14200  0016D0  FFFF               	dw	65535	; assembler added errata NOP
 14201  0016D2  6FC2               	movwf	(_enviaSMS$1219+1)& (0+255),b
 14202                           
 14203                           ; BSR set to: 0
 14204  0016D4  05FD               	decf	_status_jockey& (0+255),w,b
 14205  0016D6  B4D8               	btfsc	status,2,c
 14206  0016D8  D004               	goto	l370
 14207                           
 14208                           ; BSR set to: 0
 14209  0016DA  0ED1               	movlw	low STR_28
 14210  0016DC  6FC3               	movwf	_enviaSMS$1220& (0+255),b
 14211  0016DE  0E7F               	movlw	high STR_28
 14212  0016E0  D004               	goto	L39
 14213  0016E2                     l370:
 14214  0016E2  FFFF               	dw	65535	; assembler added errata NOP
 14215                           
 14216                           ; BSR set to: 0
 14217                           
 14218                           ; BSR set to: 0
 14219  0016E4  0EF9               	movlw	low STR_5
 14220  0016E6  6FC3               	movwf	_enviaSMS$1220& (0+255),b
 14221  0016E8  0E7F               	movlw	high STR_5
 14222  0016EA                     L39:
 14223  0016EA  FFFF               	dw	65535	; assembler added errata NOP
 14224  0016EC  6FC4               	movwf	(_enviaSMS$1220+1)& (0+255),b
 14225                           
 14226                           ; BSR set to: 0
 14227                           
 14228                           ; BSR set to: 0
 14229  0016EE  0EB3               	movlw	low STR_26
 14230  0016F0  6FA1               	movwf	printf@f& (0+255),b
 14231  0016F2  0E7B               	movlw	high STR_26
 14232  0016F4  6FA2               	movwf	(printf@f+1)& (0+255),b
 14233  0016F6  C0ED  F0A3         	movff	__hor,?_printf+2
 14234  0016FA  6BA4               	clrf	(?_printf+3)& (0+255),b
 14235  0016FC  C0EE  F0A5         	movff	__min,?_printf+4
 14236  001700  6BA6               	clrf	(?_printf+5)& (0+255),b
 14237  001702  C0EF  F0A7         	movff	__sec,?_printf+6
 14238  001706  6BA8               	clrf	(?_printf+7)& (0+255),b
 14239  001708  C0EC  F0A9         	movff	__dia,?_printf+8
 14240  00170C  6BAA               	clrf	(?_printf+9)& (0+255),b
 14241  00170E  C0EB  F0AB         	movff	__mes,?_printf+10
 14242  001712  6BAC               	clrf	(?_printf+11)& (0+255),b
 14243  001714  C0EA  F0AD         	movff	__ano,?_printf+12
 14244  001718  6BAE               	clrf	(?_printf+13)& (0+255),b
 14245  00171A  C0C3  F0AF         	movff	_enviaSMS$1220,?_printf+14
 14246  00171E  C0C4  F0B0         	movff	_enviaSMS$1220+1,?_printf+15
 14247  001722  C0C1  F0B1         	movff	_enviaSMS$1219,?_printf+16
 14248  001726  C0C2  F0B2         	movff	_enviaSMS$1219+1,?_printf+17
 14249  00172A  C0BF  F0B3         	movff	_enviaSMS$1218,?_printf+18
 14250  00172E  C0C0  F0B4         	movff	_enviaSMS$1218+1,?_printf+19
 14251  001732  EC84  F039         	call	_printf	;wreg free
 14252  001736                     l360:
 14253  001736  FFFF               	dw	65535	; assembler added errata NOP
 14254                           
 14255                           ;comunicacao.h: 170: }
 14256                           ;comunicacao.h: 171: delay(150);
 14257  001738  0E00               	movlw	0
 14258  00173A  0100               	movlb	0	; () banked
 14259  00173C  6F81               	movwf	(delay@x+1)& (0+255),b
 14260  00173E  0E96               	movlw	150
 14261  001740  6F80               	movwf	delay@x& (0+255),b
 14262  001742  EC68  F038         	call	_delay	;wreg free
 14263                           
 14264                           ;comunicacao.h: 172: writeChar(0x1A);
 14265  001746  0E1A               	movlw	26
 14266  001748  0100               	movlb	0	; () banked
 14267  00174A  6F80               	movwf	writeChar@hex& (0+255),b
 14268  00174C  0E00               	movlw	0
 14269  00174E  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 14270  001750  EC3A  F037         	call	_writeChar	;wreg free
 14271                           
 14272                           ;comunicacao.h: 173: timerEtapaComunicacao = 30;
 14273  001754  0E1E               	movlw	30
 14274  001756  D770               	goto	L41
 14275  001758                     l358:
 14276  001758  FFFF               	dw	65535	; assembler added errata NOP
 14277                           
 14278                           ;comunicacao.h: 175: }
 14279                           ;comunicacao.h: 176: if (!timerEtapaComunicacao) {
 14280                           
 14281                           ; BSR set to: 0
 14282  00175A  0100               	movlb	0	; () banked
 14283  00175C  FFFF               	dw	65535	; assembler added errata NOP
 14284  00175E  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14285  001760  A4D8               	btfss	status,2,c
 14286  001762  D096               	goto	l346
 14287  001764  D06F               	goto	l392
 14288  001766  FFFF               	dw	65535	; assembler added errata NOP
 14289                           
 14290                           ; BSR set to: 0
 14291                           ;comunicacao.h: 181: if (aguardaBuffer("OK") || aguardaBuffer("ERROR")) {
 14292                           
 14293                           ; BSR set to: 0
 14294  001768  0EF9               	movlw	low STR_5
 14295  00176A  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14296  00176C  0E7F               	movlw	high STR_5
 14297  00176E  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14298  001770  EC66  F039         	call	_aguardaBuffer	;wreg free
 14299  001774  0900               	iorlw	0
 14300  001776  A4D8               	btfss	status,2,c
 14301  001778  D00A               	goto	u5930
 14302  00177A  0ED7               	movlw	low STR_17
 14303  00177C  0100               	movlb	0	; () banked
 14304  00177E  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14305  001780  0E7F               	movlw	high STR_17
 14306  001782  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14307  001784  EC66  F039         	call	_aguardaBuffer	;wreg free
 14308  001788  0900               	iorlw	0
 14309  00178A  B4D8               	btfsc	status,2,c
 14310  00178C  D081               	goto	l346
 14311  00178E                     u5930:
 14312  00178E  FFFF               	dw	65535	; assembler added errata NOP
 14313                           
 14314                           ;comunicacao.h: 182: if (tipo == 2) {
 14315  001790  0E02               	movlw	2
 14316  001792  0100               	movlb	0	; () banked
 14317  001794  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 14318  001796  A4D8               	btfss	status,2,c
 14319  001798  D00E               	goto	l378
 14320                           
 14321                           ; BSR set to: 0
 14322                           ;comunicacao.h: 183: if (telefoneSelecionado == 0) {
 14323  00179A  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14324  00179C  A4D8               	btfss	status,2,c
 14325  00179E  D003               	goto	l379
 14326                           
 14327                           ; BSR set to: 0
 14328                           ;comunicacao.h: 184: telefoneSelecionado = 1;
 14329  0017A0  0E01               	movlw	1
 14330  0017A2  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14331                           
 14332                           ;comunicacao.h: 185: } else {
 14333  0017A4  D7DB               	goto	L43
 14334  0017A6                     l379:
 14335  0017A6  FFFF               	dw	65535	; assembler added errata NOP
 14336                           
 14337                           ; BSR set to: 0
 14338                           ;comunicacao.h: 186: telefoneSelecionado = 0;
 14339                           
 14340                           ; BSR set to: 0
 14341  0017A8  0E00               	movlw	0
 14342  0017AA  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14343                           
 14344                           ;comunicacao.h: 187: gsmOcupado = 0;
 14345  0017AC  0E00               	movlw	0
 14346  0017AE  6FF4               	movwf	_gsmOcupado& (0+255),b
 14347                           
 14348                           ;comunicacao.h: 188: menu_posi = 0;
 14349  0017B0  0E00               	movlw	0
 14350  0017B2  6FDF               	movwf	_menu_posi& (0+255),b
 14351                           
 14352                           ; BSR set to: 0
 14353                           ;comunicacao.h: 189: }
 14354                           ;comunicacao.h: 190: } else {
 14355  0017B4  D7D3               	goto	L43
 14356  0017B6                     l378:
 14357  0017B6  FFFF               	dw	65535	; assembler added errata NOP
 14358                           
 14359                           ; BSR set to: 0
 14360                           ;comunicacao.h: 191: etapaComunicacao++;
 14361                           
 14362                           ; BSR set to: 0
 14363  0017B8  4A51               	infsnz	_etapaComunicacao,f,c
 14364  0017BA  2A52               	incf	_etapaComunicacao+1,f,c
 14365                           
 14366                           ; BSR set to: 0
 14367  0017BC  D7CF               	goto	L43
 14368  0017BE  FFFF               	dw	65535	; assembler added errata NOP
 14369                           
 14370                           ; BSR set to: 0
 14371                           ;comunicacao.h: 199: limparBuffer();
 14372                           
 14373                           ; BSR set to: 0
 14374  0017C0  EC83  F038         	call	_limparBuffer	;wreg free
 14375                           
 14376                           ;comunicacao.h: 200: printf("ATD 0%s;\r\n", telefoneSelecionado == 0 ? tel1 : tel2);
 14377  0017C4  0100               	movlb	0	; () banked
 14378  0017C6  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14379  0017C8  B4D8               	btfsc	status,2,c
 14380  0017CA  D004               	goto	l385
 14381                           
 14382                           ; BSR set to: 0
 14383  0017CC  0EA4               	movlw	low _tel2
 14384  0017CE  6FC5               	movwf	_enviaSMS$1225& (0+255),b
 14385  0017D0  0E01               	movlw	high _tel2
 14386  0017D2  D004               	goto	L40
 14387  0017D4                     l385:
 14388  0017D4  FFFF               	dw	65535	; assembler added errata NOP
 14389                           
 14390                           ; BSR set to: 0
 14391                           
 14392                           ; BSR set to: 0
 14393  0017D6  0EB0               	movlw	low _tel1
 14394  0017D8  6FC5               	movwf	_enviaSMS$1225& (0+255),b
 14395  0017DA  0E01               	movlw	high _tel1
 14396  0017DC                     L40:
 14397  0017DC  FFFF               	dw	65535	; assembler added errata NOP
 14398  0017DE  6FC6               	movwf	(_enviaSMS$1225+1)& (0+255),b
 14399                           
 14400                           ; BSR set to: 0
 14401                           
 14402                           ; BSR set to: 0
 14403  0017E0  0E14               	movlw	low STR_35
 14404  0017E2  6FA1               	movwf	printf@f& (0+255),b
 14405  0017E4  0E7F               	movlw	high STR_35
 14406  0017E6  6FA2               	movwf	(printf@f+1)& (0+255),b
 14407  0017E8  C0C5  F0A3         	movff	_enviaSMS$1225,?_printf+2
 14408  0017EC  C0C6  F0A4         	movff	_enviaSMS$1225+1,?_printf+3
 14409  0017F0  EC84  F039         	call	_printf	;wreg free
 14410                           
 14411                           ;comunicacao.h: 201: timerEtapaComunicacao = 30;
 14412  0017F4  0E1E               	movlw	30
 14413  0017F6  0100               	movlb	0	; () banked
 14414  0017F8  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14415                           
 14416                           ; BSR set to: 0
 14417                           ;comunicacao.h: 202: etapaComunicacao++;
 14418  0017FA  4A51               	infsnz	_etapaComunicacao,f,c
 14419  0017FC  2A52               	incf	_etapaComunicacao+1,f,c
 14420                           
 14421                           ;comunicacao.h: 203: break;
 14422  0017FE  D048               	goto	l346
 14423  001800  FFFF               	dw	65535	; assembler added errata NOP
 14424                           
 14425                           ; BSR set to: 0
 14426                           ;comunicacao.h: 205: if (!timerEtapaComunicacao) {
 14427                           
 14428                           ; BSR set to: 0
 14429  001802  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14430  001804  A4D8               	btfss	status,2,c
 14431  001806  D044               	goto	l346
 14432                           
 14433                           ; BSR set to: 0
 14434                           ;comunicacao.h: 206: limparBuffer();
 14435  001808  EC83  F038         	call	_limparBuffer	;wreg free
 14436                           
 14437                           ;comunicacao.h: 207: printf("ATH0\r\n");
 14438  00180C  0EA9               	movlw	low STR_21
 14439  00180E  0100               	movlb	0	; () banked
 14440  001810  6FA1               	movwf	printf@f& (0+255),b
 14441  001812  0E7F               	movlw	high STR_21
 14442  001814  6FA2               	movwf	(printf@f+1)& (0+255),b
 14443  001816  EC84  F039         	call	_printf	;wreg free
 14444                           
 14445                           ;comunicacao.h: 208: delay(550);
 14446  00181A  0E02               	movlw	2
 14447  00181C  0100               	movlb	0	; () banked
 14448  00181E  6F81               	movwf	(delay@x+1)& (0+255),b
 14449  001820  0E26               	movlw	38
 14450  001822  6F80               	movwf	delay@x& (0+255),b
 14451  001824  EC68  F038         	call	_delay	;wreg free
 14452                           
 14453                           ;comunicacao.h: 209: if (telefoneSelecionado == 0) {
 14454  001828  0100               	movlb	0	; () banked
 14455  00182A  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14456  00182C  A4D8               	btfss	status,2,c
 14457  00182E  D003               	goto	l390
 14458                           
 14459                           ; BSR set to: 0
 14460                           ;comunicacao.h: 210: telefoneSelecionado = 1;
 14461  001830  0E01               	movlw	1
 14462  001832  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14463                           
 14464                           ;comunicacao.h: 211: } else {
 14465  001834  D007               	goto	l392
 14466  001836                     l390:
 14467  001836  FFFF               	dw	65535	; assembler added errata NOP
 14468                           
 14469                           ; BSR set to: 0
 14470                           ;comunicacao.h: 212: telefoneSelecionado = 0;
 14471                           
 14472                           ; BSR set to: 0
 14473  001838  0E00               	movlw	0
 14474  00183A  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14475                           
 14476                           ;comunicacao.h: 213: gsmOcupado = 0;
 14477  00183C  0E00               	movlw	0
 14478  00183E  6FF4               	movwf	_gsmOcupado& (0+255),b
 14479                           
 14480                           ;comunicacao.h: 214: timerReenvioSMS = 2;
 14481  001840  0E02               	movlw	2
 14482  001842  6FF6               	movwf	_timerReenvioSMS& (0+255),b
 14483  001844                     l392:
 14484  001844  FFFF               	dw	65535	; assembler added errata NOP
 14485                           
 14486                           ; BSR set to: 0
 14487                           
 14488                           ; BSR set to: 0
 14489  001846  0E00               	movlw	0
 14490  001848  6E52               	movwf	_etapaComunicacao+1,c
 14491  00184A  0E00               	movlw	0
 14492  00184C  6E51               	movwf	_etapaComunicacao,c
 14493                           
 14494                           ; BSR set to: 0
 14495                           ;comunicacao.h: 222: }
 14496                           
 14497                           ;comunicacao.h: 221: break;
 14498  00184E  D020               	goto	l346
 14499  001850                     l344:
 14500  001850  FFFF               	dw	65535	; assembler added errata NOP
 14501                           
 14502                           ; BSR set to: 0
 14503                           
 14504                           ; BSR set to: 0
 14505  001852  C051  F0BB         	movff	_etapaComunicacao,??_enviaSMS
 14506  001856  C052  F0BC         	movff	_etapaComunicacao+1,??_enviaSMS+1
 14507                           
 14508                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14509                           ; Switch size 1, requested type "space"
 14510                           ; Number of cases is 1, Range of values is 0 to 0
 14511                           ; switch strategies available:
 14512                           ; Name         Instructions Cycles
 14513                           ; simple_byte            4     3 (average)
 14514                           ;	Chosen strategy is simple_byte
 14515  00185A  51BC               	movf	(??_enviaSMS+1)& (0+255),w,b
 14516  00185C  0A00               	xorlw	0	; case 0
 14517  00185E  A4D8               	btfss	status,2,c
 14518  001860  D7F1               	goto	l392
 14519                           
 14520                           ; BSR set to: 0
 14521                           ; Switch size 1, requested type "space"
 14522                           ; Number of cases is 7, Range of values is 0 to 6
 14523                           ; switch strategies available:
 14524                           ; Name         Instructions Cycles
 14525                           ; simple_byte           22    12 (average)
 14526                           ;	Chosen strategy is simple_byte
 14527  001862  51BB               	movf	??_enviaSMS& (0+255),w,b
 14528  001864  0A00               	xorlw	0	; case 0
 14529  001866  B4D8               	btfsc	status,2,c
 14530  001868  D678               	goto	l345
 14531  00186A  0A01               	xorlw	1	; case 1
 14532  00186C  B4D8               	btfsc	status,2,c
 14533  00186E  D685               	goto	l347
 14534  001870  0A03               	xorlw	3	; case 2
 14535  001872  B4D8               	btfsc	status,2,c
 14536  001874  D6B4               	goto	l350
 14537  001876  0A01               	xorlw	1	; case 3
 14538  001878  B4D8               	btfsc	status,2,c
 14539  00187A  D6E4               	goto	l357
 14540  00187C  0A07               	xorlw	7	; case 4
 14541  00187E  B4D8               	btfsc	status,2,c
 14542  001880  D772               	goto	l374
 14543  001882  0A01               	xorlw	1	; case 5
 14544  001884  B4D8               	btfsc	status,2,c
 14545  001886  D79B               	goto	l383
 14546  001888  0A03               	xorlw	3	; case 6
 14547  00188A  B4D8               	btfsc	status,2,c
 14548  00188C  D7B9               	goto	l388
 14549  00188E  D7DA               	goto	l392
 14550  001890                     l346:
 14551  001890  FFFF               	dw	65535	; assembler added errata NOP
 14552                           
 14553                           ; BSR set to: 0
 14554  001892  0012               	return		;funcret
 14555  001894  FFFF               	dw	65535	; errata NOP
 14556  001896                     __end_of_enviaSMS:
 14557                           	opt stack 0
 14558                           tblptru	equ	0xFF8
 14559                           tblptrh	equ	0xFF7
 14560                           tblptrl	equ	0xFF6
 14561                           tablat	equ	0xFF5
 14562                           prodh	equ	0xFF4
 14563                           prodl	equ	0xFF3
 14564                           intcon	equ	0xFF2
 14565                           postinc0	equ	0xFEE
 14566                           wreg	equ	0xFE8
 14567                           postdec1	equ	0xFE5
 14568                           fsr1l	equ	0xFE1
 14569                           indf2	equ	0xFDF
 14570                           postinc2	equ	0xFDE
 14571                           fsr2h	equ	0xFDA
 14572                           fsr2l	equ	0xFD9
 14573                           status	equ	0xFD8
 14574                           
 14575 ;; *************** function _writeChar *****************
 14576 ;; Defined at:
 14577 ;;		line 21 in file "serial.h"
 14578 ;; Parameters:    Size  Location     Type
 14579 ;;  hex             2    0[BANK0 ] PTR unsigned char 
 14580 ;;		 -> RAM(1535), 
 14581 ;; Auto vars:     Size  Location     Type
 14582 ;;		None
 14583 ;; Return value:  Size  Location     Type
 14584 ;;                  1    wreg      void 
 14585 ;; Registers used:
 14586 ;;		None
 14587 ;; Tracked objects:
 14588 ;;		On entry : 0/0
 14589 ;;		On exit  : 0/0
 14590 ;;		Unchanged: 0/0
 14591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14592 ;;      Params:         0       2       0       0       0       0       0
 14593 ;;      Locals:         0       0       0       0       0       0       0
 14594 ;;      Temps:          0       0       0       0       0       0       0
 14595 ;;      Totals:         0       2       0       0       0       0       0
 14596 ;;Total ram usage:        2 bytes
 14597 ;; Hardware stack levels used:    1
 14598 ;; Hardware stack levels required when called:    6
 14599 ;; This function calls:
 14600 ;;		Nothing
 14601 ;; This function is called by:
 14602 ;;		_getSinalSIM800L
 14603 ;;		_comunicarTeste
 14604 ;;		_enviaSMS
 14605 ;; This function uses a non-reentrant model
 14606 ;;
 14607                           
 14608                           	psect	text46
 14609  006E74                     __ptext46:
 14610                           	opt stack 0
 14611  006E74                     _writeChar:
 14612                           	opt stack 0
 14613  006E74  FFFF               	dw	65535	; assembler added errata NOP
 14614                           
 14615                           ;serial.h: 22: while (!TXSTAbits.TRMT);
 14616                           
 14617                           ;incstack = 0
 14618  006E76  A2AC               	btfss	4012,1,c	;volatile
 14619  006E78  D7FD               	goto	_writeChar
 14620                           
 14621                           ;serial.h: 23: TXREG = hex;
 14622  006E7A  C080  FFAD         	movff	writeChar@hex,4013	;volatile
 14623  006E7E  0012               	return		;funcret
 14624  006E80  FFFF               	dw	65535	; errata NOP
 14625  006E82                     __end_of_writeChar:
 14626                           	opt stack 0
 14627                           tblptru	equ	0xFF8
 14628                           tblptrh	equ	0xFF7
 14629                           tblptrl	equ	0xFF6
 14630                           tablat	equ	0xFF5
 14631                           prodh	equ	0xFF4
 14632                           prodl	equ	0xFF3
 14633                           intcon	equ	0xFF2
 14634                           postinc0	equ	0xFEE
 14635                           wreg	equ	0xFE8
 14636                           postdec1	equ	0xFE5
 14637                           fsr1l	equ	0xFE1
 14638                           indf2	equ	0xFDF
 14639                           postinc2	equ	0xFDE
 14640                           fsr2h	equ	0xFDA
 14641                           fsr2l	equ	0xFD9
 14642                           status	equ	0xFD8
 14643                           
 14644 ;; *************** function _printf *****************
 14645 ;; Defined at:
 14646 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
 14647 ;; Parameters:    Size  Location     Type
 14648 ;;  f               2   33[BANK0 ] PTR const unsigned char 
 14649 ;;		 -> STR_36(7), STR_35(11), STR_26(104), STR_25(63), 
 14650 ;;		 -> STR_23(18), STR_21(7), STR_20(12), STR_18(5), 
 14651 ;;		 -> STR_14(126), STR_12(18), STR_10(12), STR_8(5), 
 14652 ;;		 -> STR_4(5), STR_3(9), 
 14653 ;; Auto vars:     Size  Location     Type
 14654 ;;  pb              4   55[BANK0 ] struct __prbuf
 14655 ;;  ap              2   53[BANK0 ] PTR void [1]
 14656 ;;		 -> ?_sprintf(2), ?_printf(2), 
 14657 ;; Return value:  Size  Location     Type
 14658 ;;                  2   33[BANK0 ] int 
 14659 ;; Registers used:
 14660 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14661 ;; Tracked objects:
 14662 ;;		On entry : 0/0
 14663 ;;		On exit  : 0/0
 14664 ;;		Unchanged: 0/0
 14665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14666 ;;      Params:         0      20       0       0       0       0       0
 14667 ;;      Locals:         0       6       0       0       0       0       0
 14668 ;;      Temps:          0       0       0       0       0       0       0
 14669 ;;      Totals:         0      26       0       0       0       0       0
 14670 ;;Total ram usage:       26 bytes
 14671 ;; Hardware stack levels used:    1
 14672 ;; Hardware stack levels required when called:    8
 14673 ;; This function calls:
 14674 ;;		__doprnt
 14675 ;; This function is called by:
 14676 ;;		_getSinalSIM800L
 14677 ;;		_comunicarTeste
 14678 ;;		_enviaSMS
 14679 ;; This function uses a non-reentrant model
 14680 ;;
 14681                           
 14682                           	psect	text47
 14683  007308                     __ptext47:
 14684                           	opt stack 0
 14685  007308                     _printf:
 14686                           	opt stack 0
 14687  007308  FFFF               	dw	65535	; assembler added errata NOP
 14688                           
 14689                           ;incstack = 0
 14690  00730A  0E00               	movlw	0
 14691  00730C  0100               	movlb	0	; () banked
 14692  00730E  6FB7               	movwf	printf@pb& (0+255),b
 14693  007310  0E00               	movlw	0
 14694  007312  6FB8               	movwf	(printf@pb+1)& (0+255),b
 14695  007314  0E94               	movlw	low _putch
 14696  007316  6FB9               	movwf	(printf@pb+2)& (0+255),b
 14697  007318  0E6E               	movlw	high _putch
 14698  00731A  6FBA               	movwf	(printf@pb+3)& (0+255),b
 14699  00731C  0EA3               	movlw	low (?_printf+2)
 14700  00731E  6FB5               	movwf	printf@ap& (0+255),b
 14701  007320  0E00               	movlw	high (?_printf+2)
 14702  007322  6FB6               	movwf	(printf@ap+1)& (0+255),b
 14703                           
 14704                           ; BSR set to: 0
 14705                           ;	Return value of _printf is never used
 14706  007324  0EB7               	movlw	low printf@pb
 14707  007326  6F8C               	movwf	__doprnt@pb& (0+255),b
 14708  007328  0E00               	movlw	high printf@pb
 14709  00732A  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 14710  00732C  C0A1  F08E         	movff	printf@f,__doprnt@f
 14711  007330  C0A2  F08F         	movff	printf@f+1,__doprnt@f+1
 14712  007334  0EB5               	movlw	low printf@ap
 14713  007336  6F90               	movwf	__doprnt@ap& (0+255),b
 14714  007338  0E00               	movlw	high printf@ap
 14715  00733A  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 14716  00733C  EC92  F000         	call	__doprnt	;wreg free
 14717  007340  0012               	return		;funcret
 14718  007342  FFFF               	dw	65535	; errata NOP
 14719  007344                     __end_of_printf:
 14720                           	opt stack 0
 14721                           tblptru	equ	0xFF8
 14722                           tblptrh	equ	0xFF7
 14723                           tblptrl	equ	0xFF6
 14724                           tablat	equ	0xFF5
 14725                           prodh	equ	0xFF4
 14726                           prodl	equ	0xFF3
 14727                           intcon	equ	0xFF2
 14728                           postinc0	equ	0xFEE
 14729                           wreg	equ	0xFE8
 14730                           postdec1	equ	0xFE5
 14731                           fsr1l	equ	0xFE1
 14732                           indf2	equ	0xFDF
 14733                           postinc2	equ	0xFDE
 14734                           fsr2h	equ	0xFDA
 14735                           fsr2l	equ	0xFD9
 14736                           status	equ	0xFD8
 14737                           
 14738 ;; *************** function __doprnt *****************
 14739 ;; Defined at:
 14740 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 14741 ;; Parameters:    Size  Location     Type
 14742 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
 14743 ;;		 -> sprintf@pb(4), printf@pb(4), 
 14744 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 14745 ;;		 -> intToFloatStr@conv(4), STR_114(15), STR_113(12), STR_112(10), 
 14746 ;;		 -> STR_111(18), STR_110(10), STR_109(18), STR_108(16), 
 14747 ;;		 -> STR_107(10), STR_106(10), STR_105(11), STR_104(9), 
 14748 ;;		 -> STR_103(3), STR_102(15), STR_101(15), STR_100(11), 
 14749 ;;		 -> STR_99(11), STR_98(19), STR_97(5), STR_96(12), 
 14750 ;;		 -> STR_95(5), STR_94(14), STR_93(19), STR_90(3), 
 14751 ;;		 -> STR_89(7), STR_88(7), STR_86(12), STR_85(17), 
 14752 ;;		 -> STR_84(20), STR_83(8), STR_80(14), STR_77(14), 
 14753 ;;		 -> STR_76(11), STR_73(10), STR_72(31), STR_69(11), 
 14754 ;;		 -> STR_68(20), STR_67(20), STR_66(21), STR_65(15), 
 14755 ;;		 -> STR_64(6), STR_63(15), STR_62(6), STR_61(19), 
 14756 ;;		 -> STR_60(15), STR_59(19), STR_58(15), STR_57(19), 
 14757 ;;		 -> STR_56(18), STR_55(26), STR_54(16), STR_51(15), 
 14758 ;;		 -> STR_48(15), STR_45(11), STR_44(17), STR_43(16), 
 14759 ;;		 -> STR_42(19), STR_41(19), STR_40(16), STR_39(15), 
 14760 ;;		 -> STR_38(15), STR_37(20), STR_36(7), STR_35(11), 
 14761 ;;		 -> STR_26(104), STR_25(63), STR_23(18), STR_21(7), 
 14762 ;;		 -> STR_20(12), STR_18(5), STR_14(126), STR_12(18), 
 14763 ;;		 -> STR_10(12), STR_8(5), STR_4(5), STR_3(9), 
 14764 ;;		 -> STR_2(5), STR_1(5), 
 14765 ;;  ap              2   16[BANK0 ] PTR PTR void 
 14766 ;;		 -> sprintf@ap(2), printf@ap(2), 
 14767 ;; Auto vars:     Size  Location     Type
 14768 ;;  tmpval          4    0        struct .
 14769 ;;  width           2   30[BANK0 ] int 
 14770 ;;  cp              2   28[BANK0 ] PTR const unsigned char 
 14771 ;;		 -> ?_sprintf(2), ?_printf(2), STR_115(7), _doprnt@c(1), 
 14772 ;;		 -> intToFloatStr@end(4), STR_92(17), STR_91(13), STR_87(12), 
 14773 ;;		 -> STR_82(5), STR_81(3), STR_79(5), STR_78(3), 
 14774 ;;		 -> STR_75(5), STR_74(3), STR_71(4), STR_70(4), 
 14775 ;;		 -> STR_53(5), STR_52(3), STR_50(5), STR_49(3), 
 14776 ;;		 -> line3(21), STR_47(5), STR_46(3), line2(21), 
 14777 ;;		 -> line1(21), line4(21), STR_32(6), STR_31(3), 
 14778 ;;		 -> STR_30(6), STR_29(3), STR_28(6), STR_27(3), 
 14779 ;;		 -> STR_15(12), tel2(12), tel1(12), bufferAUX(20), 
 14780 ;;		 -> NULL(0), bufferSerial(60), 
 14781 ;;  len             2   25[BANK0 ] unsigned int 
 14782 ;;  val             2   23[BANK0 ] unsigned int 
 14783 ;;  c               1   32[BANK0 ] char 
 14784 ;;  flag            1   27[BANK0 ] unsigned char 
 14785 ;;  prec            1   22[BANK0 ] char 
 14786 ;; Return value:  Size  Location     Type
 14787 ;;                  2   12[BANK0 ] int 
 14788 ;; Registers used:
 14789 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14790 ;; Tracked objects:
 14791 ;;		On entry : 0/0
 14792 ;;		On exit  : 0/0
 14793 ;;		Unchanged: 0/0
 14794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14795 ;;      Params:         0       6       0       0       0       0       0
 14796 ;;      Locals:         0      11       0       0       0       0       0
 14797 ;;      Temps:          0       4       0       0       0       0       0
 14798 ;;      Totals:         0      21       0       0       0       0       0
 14799 ;;Total ram usage:       21 bytes
 14800 ;; Hardware stack levels used:    1
 14801 ;; Hardware stack levels required when called:    7
 14802 ;; This function calls:
 14803 ;;		Absolute function
 14804 ;;		___lwdiv
 14805 ;;		___lwmod
 14806 ;;		___wmul
 14807 ;;		_isdigit
 14808 ;;		_putch
 14809 ;; This function is called by:
 14810 ;;		_printf
 14811 ;;		_sprintf
 14812 ;; This function uses a non-reentrant model
 14813 ;;
 14814                           
 14815                           	psect	text48
 14816  000124                     __ptext48:
 14817                           	opt stack 0
 14818  000124                     __doprnt:
 14819                           	opt stack 0
 14820  000124  FFFF               	dw	65535	; assembler added errata NOP
 14821                           
 14822                           ;doprnt.c: 499: signed char c;
 14823                           ;doprnt.c: 501: int width;
 14824                           ;doprnt.c: 506: signed char prec;
 14825                           ;doprnt.c: 508: unsigned char flag;
 14826                           ;doprnt.c: 523: union {
 14827                           ;doprnt.c: 524: unsigned long vd;
 14828                           ;doprnt.c: 525: double integ;
 14829                           ;doprnt.c: 526: } tmpval;
 14830                           ;doprnt.c: 528: unsigned int val;
 14831                           ;doprnt.c: 529: unsigned len;
 14832                           ;doprnt.c: 530: const char * cp;
 14833                           ;doprnt.c: 536: while(c = *f++) {
 14834                           
 14835                           ;incstack = 0
 14836  000126  D3D7               	goto	u5220
 14837  000128  FFFF               	dw	65535	; assembler added errata NOP
 14838                           
 14839                           ;doprnt.c: 538: if(c != '%')
 14840  00012A  0E25               	movlw	37
 14841  00012C  0100               	movlb	0	; () banked
 14842  00012E  19A0               	xorwf	__doprnt@c& (0+255),w,b
 14843  000130  B4D8               	btfsc	status,2,c
 14844  000132  D037               	goto	l1023
 14845                           
 14846                           ; BSR set to: 0
 14847                           ;doprnt.c: 540: {
 14848                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 14849  000134  EE20 F002          	lfsr	2,2
 14850  000138  518C               	movf	__doprnt@pb& (0+255),w,b
 14851  00013A  26D9               	addwf	fsr2l,f,c
 14852  00013C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 14853  00013E  22DA               	addwfc	fsr2h,f,c
 14854  000140  50DE               	movf	postinc2,w,c
 14855  000142  10DE               	iorwf	postinc2,w,c
 14856  000144  B4D8               	btfsc	status,2,c
 14857  000146  D016               	goto	l1024
 14858                           
 14859                           ; BSR set to: 0
 14860  000148  EE20 F002          	lfsr	2,2
 14861  00014C  518C               	movf	__doprnt@pb& (0+255),w,b
 14862  00014E  26D9               	addwf	fsr2l,f,c
 14863  000150  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 14864  000152  22DA               	addwfc	fsr2h,f,c
 14865  000154  D801               	call	u4788
 14866  000156  D3BF               	goto	u5220
 14867  000158                     u4788:
 14868  000158  FFFF               	dw	65535	; assembler added errata NOP
 14869  00015A  0005               	push	
 14870  00015C  6EFA               	movwf	pclath,c
 14871  00015E  50DE               	movf	postinc2,w,c
 14872  000160  6EFD               	movwf	tosl,c
 14873  000162  50DE               	movf	postinc2,w,c
 14874  000164  6EFE               	movwf	tosh,c
 14875  000166  50F8               	movf	tblptru,w,c
 14876  000168  6EFF               	movwf	tosu,c
 14877  00016A  50FA               	movf	pclath,w,c
 14878  00016C  51A0               	movf	__doprnt@c& (0+255),w,b
 14879  00016E  0012               	return		;indir
 14880  000170  FFFF               	dw	65535	; errata NOP
 14881  000172  D3B1               	goto	u5220
 14882  000174                     l1024:
 14883  000174  FFFF               	dw	65535	; assembler added errata NOP
 14884  000176  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 14885  00017A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 14886  00017E  CFDE F092          	movff	postinc2,??__doprnt
 14887  000182  CFDD F093          	movff	postdec2,??__doprnt+1
 14888  000186  C092  FFD9         	movff	??__doprnt,fsr2l
 14889  00018A  C093  FFDA         	movff	??__doprnt+1,fsr2h
 14890  00018E  C0A0  FFDF         	movff	__doprnt@c,indf2
 14891  000192  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 14892  000196  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 14893  00019A  2ADE               	incf	postinc2,f,c
 14894  00019C  0E00               	movlw	0
 14895  00019E  22DD               	addwfc	postdec2,f,c
 14896                           
 14897                           ;doprnt.c: 542: continue;
 14898  0001A0  D39A               	goto	u5220
 14899  0001A2                     l1023:
 14900  0001A2  FFFF               	dw	65535	; assembler added errata NOP
 14901                           
 14902                           ;doprnt.c: 543: }
 14903                           ;doprnt.c: 546: width = 0;
 14904  0001A4  0E00               	movlw	0
 14905  0001A6  0100               	movlb	0	; () banked
 14906  0001A8  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 14907  0001AA  0E00               	movlw	0
 14908  0001AC  6F9E               	movwf	__doprnt@width& (0+255),b
 14909                           
 14910                           ;doprnt.c: 548: flag = 0;
 14911  0001AE  0E00               	movlw	0
 14912  0001B0  6F9B               	movwf	__doprnt@flag& (0+255),b
 14913                           
 14914                           ; BSR set to: 0
 14915                           ;doprnt.c: 551: switch(*f) {
 14916                           
 14917                           ;doprnt.c: 550: for(;;) {
 14918  0001B2  D005               	goto	l1027
 14919  0001B4  FFFF               	dw	65535	; assembler added errata NOP
 14920                           
 14921                           ;doprnt.c: 580: flag |= 0x04;
 14922                           
 14923                           ; BSR set to: 0
 14924  0001B6  0100               	movlb	0	; () banked
 14925  0001B8  859B               	bsf	__doprnt@flag& (0+255),2,b
 14926                           
 14927                           ;doprnt.c: 581: f++;
 14928  0001BA  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 14929  0001BC  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 14930  0001BE                     l1027:
 14931  0001BE  FFFF               	dw	65535	; assembler added errata NOP
 14932                           
 14933                           ; BSR set to: 0
 14934  0001C0  C08E  FFF6         	movff	__doprnt@f,tblptrl
 14935  0001C4  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 14936  0001C8  6AF8               	clrf	tblptru,c
 14937  0001CA  0E05               	movlw	(high __ramtop+-1)
 14938  0001CC  64F7               	cpfsgt	tblptrh,c
 14939  0001CE  D004               	bra	u4797
 14940  0001D0  0008               	tblrd		*
 14941  0001D2  FFFF               	dw	65535	; errata NOP
 14942  0001D4  50F5               	movf	tablat,w,c
 14943  0001D6  D005               	bra	u4790
 14944  0001D8                     u4797:
 14945  0001D8  CFF6 FFE9          	movff	tblptrl,fsr0l
 14946  0001DC  CFF7 FFEA          	movff	tblptrh,fsr0h
 14947  0001E0  50EF               	movf	indf0,w,c
 14948  0001E2                     u4790:
 14949                           
 14950                           ; Switch size 1, requested type "space"
 14951                           ; Number of cases is 1, Range of values is 48 to 48
 14952                           ; switch strategies available:
 14953                           ; Name         Instructions Cycles
 14954                           ; simple_byte            4     3 (average)
 14955                           ;	Chosen strategy is simple_byte
 14956  0001E2  0A30               	xorlw	48	; case 48
 14957  0001E4  B4D8               	btfsc	status,2,c
 14958  0001E6  D7E6               	goto	l1028
 14959                           
 14960                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14961                           
 14962                           ;doprnt.c: 586: }
 14963                           
 14964                           ;doprnt.c: 585: break;
 14965  0001E8  C08E  FFF6         	movff	__doprnt@f,tblptrl
 14966  0001EC  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 14967  0001F0  6AF8               	clrf	tblptru,c
 14968  0001F2  0E05               	movlw	(high __ramtop+-1)
 14969  0001F4  64F7               	cpfsgt	tblptrh,c
 14970  0001F6  D004               	bra	u4807
 14971  0001F8  0008               	tblrd		*
 14972  0001FA  FFFF               	dw	65535	; errata NOP
 14973  0001FC  50F5               	movf	tablat,w,c
 14974  0001FE  D005               	bra	u4800
 14975  000200                     u4807:
 14976  000200  CFF6 FFE9          	movff	tblptrl,fsr0l
 14977  000204  CFF7 FFEA          	movff	tblptrh,fsr0h
 14978  000208  50EF               	movf	indf0,w,c
 14979  00020A                     u4800:
 14980  00020A  ECAD  F037         	call	_isdigit
 14981  00020E  A0D8               	btfss	status,0,c
 14982  000210  D16B               	goto	l1035
 14983                           
 14984                           ;doprnt.c: 598: width = 0;
 14985  000212  0E00               	movlw	0
 14986  000214  0100               	movlb	0	; () banked
 14987  000216  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 14988  000218  0E00               	movlw	0
 14989  00021A  6F9E               	movwf	__doprnt@width& (0+255),b
 14990  00021C  FFFF               	dw	65535	; assembler added errata NOP
 14991                           
 14992                           ;doprnt.c: 600: width *= 10;
 14993                           
 14994                           ; BSR set to: 0
 14995  00021E  C09E  F080         	movff	__doprnt@width,___wmul@multiplier
 14996  000222  C09F  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
 14997  000226  0E00               	movlw	0
 14998  000228  0100               	movlb	0	; () banked
 14999  00022A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15000  00022C  0E0A               	movlw	10
 15001  00022E  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15002  000230  ECEB  F037         	call	___wmul	;wreg free
 15003  000234  C080  F09E         	movff	?___wmul,__doprnt@width
 15004  000238  C081  F09F         	movff	?___wmul+1,__doprnt@width+1
 15005                           
 15006                           ;doprnt.c: 601: width += *f++ - '0';
 15007  00023C  0ED0               	movlw	208
 15008  00023E  0100               	movlb	0	; () banked
 15009  000240  6F92               	movwf	??__doprnt& (0+255),b
 15010  000242  0EFF               	movlw	255
 15011  000244  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15012  000246  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15013  00024A  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15014  00024E  6AF8               	clrf	tblptru,c
 15015  000250  0E05               	movlw	(high __ramtop+-1)
 15016  000252  64F7               	cpfsgt	tblptrh,c
 15017  000254  D004               	bra	u4827
 15018  000256  0008               	tblrd		*
 15019  000258  FFFF               	dw	65535	; errata NOP
 15020  00025A  50F5               	movf	tablat,w,c
 15021  00025C  D005               	bra	u4820
 15022  00025E                     u4827:
 15023  00025E  CFF6 FFE9          	movff	tblptrl,fsr0l
 15024  000262  CFF7 FFEA          	movff	tblptrh,fsr0h
 15025  000266  50EF               	movf	indf0,w,c
 15026  000268                     u4820:
 15027  000268  0100               	movlb	0	; () banked
 15028  00026A  6F94               	movwf	(??__doprnt+2)& (0+255),b
 15029  00026C  6B95               	clrf	(??__doprnt+3)& (0+255),b
 15030  00026E  5192               	movf	??__doprnt& (0+255),w,b
 15031  000270  2794               	addwf	(??__doprnt+2)& (0+255),f,b
 15032  000272  5193               	movf	(??__doprnt+1)& (0+255),w,b
 15033  000274  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
 15034  000276  5194               	movf	(??__doprnt+2)& (0+255),w,b
 15035  000278  279E               	addwf	__doprnt@width& (0+255),f,b
 15036  00027A  5195               	movf	(??__doprnt+3)& (0+255),w,b
 15037  00027C  239F               	addwfc	(__doprnt@width+1)& (0+255),f,b
 15038                           
 15039                           ; BSR set to: 0
 15040  00027E  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15041  000280  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15042                           
 15043                           ; BSR set to: 0
 15044                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15045  000282  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15046  000286  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15047  00028A  6AF8               	clrf	tblptru,c
 15048  00028C  0E05               	movlw	(high __ramtop+-1)
 15049  00028E  64F7               	cpfsgt	tblptrh,c
 15050  000290  D004               	bra	u4837
 15051  000292  0008               	tblrd		*
 15052  000294  FFFF               	dw	65535	; errata NOP
 15053  000296  50F5               	movf	tablat,w,c
 15054  000298  D005               	bra	u4830
 15055  00029A                     u4837:
 15056  00029A  CFF6 FFE9          	movff	tblptrl,fsr0l
 15057  00029E  CFF7 FFEA          	movff	tblptrh,fsr0h
 15058  0002A2  50EF               	movf	indf0,w,c
 15059  0002A4                     u4830:
 15060  0002A4  ECAD  F037         	call	_isdigit
 15061  0002A8  A0D8               	btfss	status,0,c
 15062  0002AA  D11E               	goto	l1035
 15063  0002AC  D7B7               	goto	l1033
 15064  0002AE  FFFF               	dw	65535	; assembler added errata NOP
 15065                           
 15066                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15067  0002B0  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15068  0002B4  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15069  0002B8  CFDF F092          	movff	indf2,??__doprnt
 15070  0002BC  0E02               	movlw	2
 15071  0002BE  26DE               	addwf	postinc2,f,c
 15072  0002C0  CFDF F093          	movff	indf2,??__doprnt+1
 15073  0002C4  0E00               	movlw	0
 15074  0002C6  22DD               	addwfc	postdec2,f,c
 15075  0002C8  C092  FFD9         	movff	??__doprnt,fsr2l
 15076  0002CC  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15077  0002D0  CFDE F09C          	movff	postinc2,__doprnt@cp
 15078  0002D4  CFDD F09D          	movff	postdec2,__doprnt@cp+1
 15079                           
 15080                           ;doprnt.c: 740: if(!cp)
 15081  0002D8  0100               	movlb	0	; () banked
 15082  0002DA  519C               	movf	__doprnt@cp& (0+255),w,b
 15083  0002DC  119D               	iorwf	(__doprnt@cp+1)& (0+255),w,b
 15084  0002DE  A4D8               	btfss	status,2,c
 15085  0002E0  D004               	goto	l1042
 15086                           
 15087                           ; BSR set to: 0
 15088                           ;doprnt.c: 741: cp = "(null)";
 15089  0002E2  0EA2               	movlw	low STR_115
 15090  0002E4  6F9C               	movwf	__doprnt@cp& (0+255),b
 15091  0002E6  0E7F               	movlw	high STR_115
 15092  0002E8  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 15093  0002EA                     l1042:
 15094  0002EA  FFFF               	dw	65535	; assembler added errata NOP
 15095                           
 15096                           ; BSR set to: 0
 15097                           ;doprnt.c: 745: len = 0;
 15098                           
 15099                           ; BSR set to: 0
 15100  0002EC  0E00               	movlw	0
 15101  0002EE  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 15102  0002F0  0E00               	movlw	0
 15103  0002F2  6F99               	movwf	__doprnt@len& (0+255),b
 15104                           
 15105                           ;doprnt.c: 746: while(cp[len])
 15106  0002F4  D004               	goto	l1043
 15107  0002F6  FFFF               	dw	65535	; assembler added errata NOP
 15108                           
 15109                           ;doprnt.c: 747: len++;
 15110                           
 15111                           ; BSR set to: 0
 15112  0002F8  0100               	movlb	0	; () banked
 15113  0002FA  4B99               	infsnz	__doprnt@len& (0+255),f,b
 15114  0002FC  2B9A               	incf	(__doprnt@len+1)& (0+255),f,b
 15115  0002FE                     l1043:
 15116  0002FE  FFFF               	dw	65535	; assembler added errata NOP
 15117                           
 15118                           ; BSR set to: 0
 15119                           
 15120                           ; BSR set to: 0
 15121  000300  5199               	movf	__doprnt@len& (0+255),w,b
 15122  000302  259C               	addwf	__doprnt@cp& (0+255),w,b
 15123  000304  6F92               	movwf	??__doprnt& (0+255),b
 15124  000306  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 15125  000308  219D               	addwfc	(__doprnt@cp+1)& (0+255),w,b
 15126  00030A  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15127  00030C  C092  FFF6         	movff	??__doprnt,tblptrl
 15128  000310  C093  FFF7         	movff	??__doprnt+1,tblptrh
 15129  000314  6AF8               	clrf	tblptru,c
 15130  000316  0E05               	movlw	(high __ramtop+-1)
 15131  000318  64F7               	cpfsgt	tblptrh,c
 15132  00031A  D004               	bra	u4867
 15133  00031C  0008               	tblrd		*
 15134  00031E  FFFF               	dw	65535	; errata NOP
 15135  000320  50F5               	movf	tablat,w,c
 15136  000322  D005               	bra	u4860
 15137  000324                     u4867:
 15138  000324  CFF6 FFE9          	movff	tblptrl,fsr0l
 15139  000328  CFF7 FFEA          	movff	tblptrh,fsr0h
 15140  00032C  50EF               	movf	indf0,w,c
 15141  00032E                     u4860:
 15142  00032E  0900               	iorlw	0
 15143  000330  A4D8               	btfss	status,2,c
 15144  000332  D7E1               	goto	l1044
 15145  000334                     u4870:
 15146  000334  FFFF               	dw	65535	; assembler added errata NOP
 15147                           
 15148                           ;doprnt.c: 757: if(width > len)
 15149                           
 15150                           ;doprnt.c: 750: dostring:
 15151  000336  0100               	movlb	0	; () banked
 15152  000338  519E               	movf	__doprnt@width& (0+255),w,b
 15153  00033A  5D99               	subwf	__doprnt@len& (0+255),w,b
 15154  00033C  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 15155  00033E  599A               	subwfb	(__doprnt@len+1)& (0+255),w,b
 15156  000340  B0D8               	btfsc	status,0,c
 15157  000342  D005               	goto	l1047
 15158                           
 15159                           ; BSR set to: 0
 15160                           ;doprnt.c: 758: width -= len;
 15161  000344  5199               	movf	__doprnt@len& (0+255),w,b
 15162  000346  5F9E               	subwf	__doprnt@width& (0+255),f,b
 15163  000348  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 15164  00034A  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 15165  00034C  D03D               	goto	l1052
 15166  00034E                     l1047:
 15167  00034E  FFFF               	dw	65535	; assembler added errata NOP
 15168                           
 15169                           ; BSR set to: 0
 15170                           ;doprnt.c: 759: else
 15171                           ;doprnt.c: 760: width = 0;
 15172                           
 15173                           ; BSR set to: 0
 15174  000350  0E00               	movlw	0
 15175  000352  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15176  000354  0E00               	movlw	0
 15177  000356  6F9E               	movwf	__doprnt@width& (0+255),b
 15178                           
 15179                           ; BSR set to: 0
 15180                           ;doprnt.c: 764: while(width--)
 15181  000358  D037               	goto	l1052
 15182  00035A  FFFF               	dw	65535	; assembler added errata NOP
 15183  00035C                     l5026:
 15184                           
 15185                           ; BSR set to: 0
 15186                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 15187  00035C  EE20 F002          	lfsr	2,2
 15188  000360  518C               	movf	__doprnt@pb& (0+255),w,b
 15189  000362  26D9               	addwf	fsr2l,f,c
 15190  000364  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15191  000366  22DA               	addwfc	fsr2h,f,c
 15192  000368  50DE               	movf	postinc2,w,c
 15193  00036A  10DE               	iorwf	postinc2,w,c
 15194  00036C  B4D8               	btfsc	status,2,c
 15195  00036E  D016               	goto	l1051
 15196                           
 15197                           ; BSR set to: 0
 15198  000370  EE20 F002          	lfsr	2,2
 15199  000374  518C               	movf	__doprnt@pb& (0+255),w,b
 15200  000376  26D9               	addwf	fsr2l,f,c
 15201  000378  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15202  00037A  22DA               	addwfc	fsr2h,f,c
 15203  00037C  D801               	call	u4908
 15204  00037E  D024               	goto	l1052
 15205  000380                     u4908:
 15206  000380  FFFF               	dw	65535	; assembler added errata NOP
 15207  000382  0005               	push	
 15208  000384  6EFA               	movwf	pclath,c
 15209  000386  50DE               	movf	postinc2,w,c
 15210  000388  6EFD               	movwf	tosl,c
 15211  00038A  50DE               	movf	postinc2,w,c
 15212  00038C  6EFE               	movwf	tosh,c
 15213  00038E  50F8               	movf	tblptru,w,c
 15214  000390  6EFF               	movwf	tosu,c
 15215  000392  50FA               	movf	pclath,w,c
 15216  000394  0E20               	movlw	32
 15217  000396  0012               	return		;indir
 15218  000398  FFFF               	dw	65535	; errata NOP
 15219  00039A  D016               	goto	l1052
 15220  00039C                     l1051:
 15221  00039C  FFFF               	dw	65535	; assembler added errata NOP
 15222  00039E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15223  0003A2  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15224  0003A6  CFDE F092          	movff	postinc2,??__doprnt
 15225  0003AA  CFDD F093          	movff	postdec2,??__doprnt+1
 15226  0003AE  C092  FFD9         	movff	??__doprnt,fsr2l
 15227  0003B2  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15228  0003B6  0E20               	movlw	32
 15229  0003B8  6EDF               	movwf	indf2,c
 15230  0003BA  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15231  0003BE  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15232  0003C2  2ADE               	incf	postinc2,f,c
 15233  0003C4  0E00               	movlw	0
 15234  0003C6  22DD               	addwfc	postdec2,f,c
 15235  0003C8                     l1052:
 15236  0003C8  FFFF               	dw	65535	; assembler added errata NOP
 15237  0003CA  0100               	movlb	0	; () banked
 15238  0003CC  079E               	decf	__doprnt@width& (0+255),f,b
 15239  0003CE  A0D8               	btfss	status,0,c
 15240  0003D0  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 15241  0003D2  299E               	incf	__doprnt@width& (0+255),w,b
 15242  0003D4  E1C3               	bnz	l5026
 15243  0003D6  299F               	incf	(__doprnt@width+1)& (0+255),w,b
 15244  0003D8  B4D8               	btfsc	status,2,c
 15245  0003DA  D05F               	goto	l1057
 15246  0003DC  D7BE               	goto	l1050
 15247  0003DE  FFFF               	dw	65535	; assembler added errata NOP
 15248  0003E0                     l5036:
 15249                           
 15250                           ; BSR set to: 0
 15251                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 15252  0003E0  EE20 F002          	lfsr	2,2
 15253  0003E4  518C               	movf	__doprnt@pb& (0+255),w,b
 15254  0003E6  26D9               	addwf	fsr2l,f,c
 15255  0003E8  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15256  0003EA  22DA               	addwfc	fsr2h,f,c
 15257  0003EC  50DE               	movf	postinc2,w,c
 15258  0003EE  10DE               	iorwf	postinc2,w,c
 15259  0003F0  B4D8               	btfsc	status,2,c
 15260  0003F2  D02A               	goto	l1056
 15261                           
 15262                           ; BSR set to: 0
 15263  0003F4  EE20 F002          	lfsr	2,2
 15264  0003F8  518C               	movf	__doprnt@pb& (0+255),w,b
 15265  0003FA  26D9               	addwf	fsr2l,f,c
 15266  0003FC  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15267  0003FE  22DA               	addwfc	fsr2h,f,c
 15268  000400  D801               	call	u4938
 15269  000402  D01D               	goto	u4939
 15270  000404                     u4938:
 15271  000404  FFFF               	dw	65535	; assembler added errata NOP
 15272  000406  0005               	push	
 15273  000408  6EFA               	movwf	pclath,c
 15274  00040A  50DE               	movf	postinc2,w,c
 15275  00040C  6EFD               	movwf	tosl,c
 15276  00040E  50DE               	movf	postinc2,w,c
 15277  000410  6EFE               	movwf	tosh,c
 15278  000412  50F8               	movf	tblptru,w,c
 15279  000414  6EFF               	movwf	tosu,c
 15280  000416  50FA               	movf	pclath,w,c
 15281  000418  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 15282  00041C  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 15283  000420  6AF8               	clrf	tblptru,c
 15284  000422  0E05               	movlw	(high __ramtop+-1)
 15285  000424  64F7               	cpfsgt	tblptrh,c
 15286  000426  D004               	bra	u4947
 15287  000428  0008               	tblrd		*
 15288  00042A  FFFF               	dw	65535	; errata NOP
 15289  00042C  50F5               	movf	tablat,w,c
 15290  00042E  D005               	bra	u4940
 15291  000430                     u4947:
 15292  000430  CFF6 FFE9          	movff	tblptrl,fsr0l
 15293  000434  CFF7 FFEA          	movff	tblptrh,fsr0h
 15294  000438  50EF               	movf	indf0,w,c
 15295  00043A                     u4940:
 15296  00043A  0012               	return		;indir
 15297  00043C  FFFF               	dw	65535	; errata NOP
 15298  00043E                     u4939:
 15299  00043E  FFFF               	dw	65535	; assembler added errata NOP
 15300  000440  0100               	movlb	0	; () banked
 15301  000442  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 15302  000444  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 15303  000446  D029               	goto	l1057
 15304  000448                     l1056:
 15305  000448  FFFF               	dw	65535	; assembler added errata NOP
 15306                           
 15307                           ; BSR set to: 0
 15308                           
 15309                           ; BSR set to: 0
 15310  00044A  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 15311  00044E  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 15312  000452  6AF8               	clrf	tblptru,c
 15313  000454  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15314  000458  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15315  00045C  CFDE F092          	movff	postinc2,??__doprnt
 15316  000460  CFDD F093          	movff	postdec2,??__doprnt+1
 15317  000464  C092  FFD9         	movff	??__doprnt,fsr2l
 15318  000468  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15319  00046C  0E05               	movlw	(high __ramtop+-1)
 15320  00046E  64F7               	cpfsgt	tblptrh,c
 15321  000470  D004               	bra	u4957
 15322  000472  0008               	tblrd		*
 15323  000474  FFFF               	dw	65535	; errata NOP
 15324  000476  50F5               	movf	tablat,w,c
 15325  000478  D005               	bra	u4950
 15326  00047A                     u4957:
 15327  00047A  CFF6 FFE9          	movff	tblptrl,fsr0l
 15328  00047E  CFF7 FFEA          	movff	tblptrh,fsr0h
 15329  000482  50EF               	movf	indf0,w,c
 15330  000484                     u4950:
 15331  000484  6EDF               	movwf	indf2,c
 15332  000486  0100               	movlb	0	; () banked
 15333  000488  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 15334  00048A  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 15335                           
 15336                           ; BSR set to: 0
 15337  00048C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15338  000490  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15339  000494  2ADE               	incf	postinc2,f,c
 15340  000496  0E00               	movlw	0
 15341  000498  22DD               	addwfc	postdec2,f,c
 15342  00049A                     l1057:
 15343  00049A  FFFF               	dw	65535	; assembler added errata NOP
 15344                           
 15345                           ; BSR set to: 0
 15346                           
 15347                           ; BSR set to: 0
 15348                           
 15349                           ; BSR set to: 0
 15350  00049C  0799               	decf	__doprnt@len& (0+255),f,b
 15351  00049E  A0D8               	btfss	status,0,c
 15352  0004A0  079A               	decf	(__doprnt@len+1)& (0+255),f,b
 15353  0004A2  2999               	incf	__doprnt@len& (0+255),w,b
 15354  0004A4  E19D               	bnz	l5036
 15355  0004A6  299A               	incf	(__doprnt@len+1)& (0+255),w,b
 15356  0004A8  B4D8               	btfsc	status,2,c
 15357  0004AA  D215               	goto	u5220
 15358  0004AC  D798               	goto	l1055
 15359  0004AE  FFFF               	dw	65535	; assembler added errata NOP
 15360                           
 15361                           ; BSR set to: 0
 15362                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 15363                           
 15364                           ; BSR set to: 0
 15365  0004B0  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15366  0004B4  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15367  0004B8  CFDF F092          	movff	indf2,??__doprnt
 15368  0004BC  0E02               	movlw	2
 15369  0004BE  26DE               	addwf	postinc2,f,c
 15370  0004C0  CFDF F093          	movff	indf2,??__doprnt+1
 15371  0004C4  0E00               	movlw	0
 15372  0004C6  22DD               	addwfc	postdec2,f,c
 15373  0004C8  C092  FFD9         	movff	??__doprnt,fsr2l
 15374  0004CC  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15375  0004D0  50DF               	movf	indf2,w,c
 15376  0004D2  6FA0               	movwf	__doprnt@c& (0+255),b
 15377  0004D4  FFFF               	dw	65535	; assembler added errata NOP
 15378                           
 15379                           ; BSR set to: 0
 15380                           ;doprnt.c: 805: cp = (char *)&c;
 15381                           
 15382                           ; BSR set to: 0
 15383  0004D6  0EA0               	movlw	low __doprnt@c
 15384  0004D8  6F9C               	movwf	__doprnt@cp& (0+255),b
 15385  0004DA  0E00               	movlw	high __doprnt@c
 15386  0004DC  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 15387                           
 15388                           ; BSR set to: 0
 15389                           ;doprnt.c: 806: len = 1;
 15390  0004DE  0E00               	movlw	0
 15391  0004E0  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 15392  0004E2  0E01               	movlw	1
 15393  0004E4  6F99               	movwf	__doprnt@len& (0+255),b
 15394                           
 15395                           ;doprnt.c: 807: goto dostring;
 15396  0004E6  D726               	goto	u4870
 15397  0004E8                     l1035:
 15398  0004E8  FFFF               	dw	65535	; assembler added errata NOP
 15399                           
 15400                           ; BSR set to: 0
 15401  0004EA  0100               	movlb	0	; () banked
 15402  0004EC  518E               	movf	__doprnt@f& (0+255),w,b
 15403  0004EE  6F92               	movwf	??__doprnt& (0+255),b
 15404  0004F0  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 15405  0004F2  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15406  0004F4  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15407  0004F6  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15408  0004F8  C092  FFF6         	movff	??__doprnt,tblptrl
 15409  0004FC  C093  FFF7         	movff	??__doprnt+1,tblptrh
 15410  000500  6AF8               	clrf	tblptru,c
 15411  000502  0E05               	movlw	(high __ramtop+-1)
 15412  000504  64F7               	cpfsgt	tblptrh,c
 15413  000506  D004               	bra	u4977
 15414  000508  0008               	tblrd		*
 15415  00050A  FFFF               	dw	65535	; errata NOP
 15416  00050C  50F5               	movf	tablat,w,c
 15417  00050E  D005               	bra	u4970
 15418  000510                     u4977:
 15419  000510  CFF6 FFE9          	movff	tblptrl,fsr0l
 15420  000514  CFF7 FFEA          	movff	tblptrh,fsr0h
 15421  000518  50EF               	movf	indf0,w,c
 15422  00051A                     u4970:
 15423  00051A  0100               	movlb	0	; () banked
 15424  00051C  6FA0               	movwf	__doprnt@c& (0+255),b
 15425  00051E  51A0               	movf	__doprnt@c& (0+255),w,b
 15426                           
 15427                           ; Switch size 1, requested type "space"
 15428                           ; Number of cases is 5, Range of values is 0 to 115
 15429                           ; switch strategies available:
 15430                           ; Name         Instructions Cycles
 15431                           ; simple_byte           16     9 (average)
 15432                           ;	Chosen strategy is simple_byte
 15433  000520  0A00               	xorlw	0	; case 0
 15434  000522  B4D8               	btfsc	status,2,c
 15435  000524  D1F6               	goto	u5240
 15436  000526  0A63               	xorlw	99	; case 99
 15437  000528  B4D8               	btfsc	status,2,c
 15438  00052A  D7C1               	goto	l1059
 15439  00052C  0A07               	xorlw	7	; case 100
 15440  00052E  B4D8               	btfsc	status,2,c
 15441  000530  D007               	goto	l1040
 15442  000532  0A0D               	xorlw	13	; case 105
 15443  000534  B4D8               	btfsc	status,2,c
 15444  000536  D004               	goto	l1040
 15445  000538  0A1A               	xorlw	26	; case 115
 15446  00053A  B4D8               	btfsc	status,2,c
 15447  00053C  D6B8               	goto	l1041
 15448  00053E  D7CA               	goto	l1060
 15449  000540                     l1040:
 15450  000540  FFFF               	dw	65535	; assembler added errata NOP
 15451                           
 15452                           ;doprnt.c: 1253: {
 15453                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15454                           
 15455                           ; BSR set to: 0
 15456  000542  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15457  000546  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15458  00054A  CFDF F092          	movff	indf2,??__doprnt
 15459  00054E  0E02               	movlw	2
 15460  000550  26DE               	addwf	postinc2,f,c
 15461  000552  CFDF F093          	movff	indf2,??__doprnt+1
 15462  000556  0E00               	movlw	0
 15463  000558  22DD               	addwfc	postdec2,f,c
 15464  00055A  C092  FFD9         	movff	??__doprnt,fsr2l
 15465  00055E  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15466  000562  CFDE F097          	movff	postinc2,__doprnt@val
 15467  000566  CFDD F098          	movff	postdec2,__doprnt@val+1
 15468                           
 15469                           ;doprnt.c: 1261: if((int)val < 0) {
 15470  00056A  0100               	movlb	0	; () banked
 15471  00056C  AF98               	btfss	(__doprnt@val+1)& (0+255),7,b
 15472  00056E  D006               	goto	l1061
 15473                           
 15474                           ; BSR set to: 0
 15475                           ;doprnt.c: 1262: flag |= 0x03;
 15476  000570  0E03               	movlw	3
 15477  000572  139B               	iorwf	__doprnt@flag& (0+255),f,b
 15478                           
 15479                           ; BSR set to: 0
 15480                           ;doprnt.c: 1263: val = -val;
 15481  000574  6D97               	negf	__doprnt@val& (0+255),b
 15482  000576  1F98               	comf	(__doprnt@val+1)& (0+255),f,b
 15483  000578  B0D8               	btfsc	status,0,c
 15484  00057A  2B98               	incf	(__doprnt@val+1)& (0+255),f,b
 15485  00057C                     l1061:
 15486  00057C  FFFF               	dw	65535	; assembler added errata NOP
 15487                           
 15488                           ; BSR set to: 0
 15489                           ;doprnt.c: 1264: }
 15490                           ;doprnt.c: 1266: }
 15491                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15492                           
 15493                           ; BSR set to: 0
 15494  00057E  0E01               	movlw	1
 15495  000580  6FA0               	movwf	__doprnt@c& (0+255),b
 15496  000582                     l5070:
 15497  000582  FFFF               	dw	65535	; assembler added errata NOP
 15498                           
 15499                           ; BSR set to: 0
 15500  000584  0E05               	movlw	5
 15501  000586  19A0               	xorwf	__doprnt@c& (0+255),w,b
 15502  000588  B4D8               	btfsc	status,2,c
 15503  00058A  D014               	goto	u5010
 15504                           
 15505                           ; BSR set to: 0
 15506                           ;doprnt.c: 1306: if(val < dpowers[c])
 15507                           
 15508                           ; BSR set to: 0
 15509                           
 15510                           ; BSR set to: 0
 15511  00058C  51A0               	movf	__doprnt@c& (0+255),w,b
 15512  00058E  0D02               	mullw	2
 15513  000590  0E2B               	movlw	low _dpowers
 15514  000592  24F3               	addwf	prodl,w,c
 15515  000594  6EF6               	movwf	tblptrl,c
 15516  000596  0E7B               	movlw	high _dpowers
 15517  000598  20F4               	addwfc	prodh,w,c
 15518  00059A  6EF7               	movwf	tblptrh,c
 15519  00059C                     	if	0	;There are less than 3 active tblptr bytes
 15520  00059C                     	endif
 15521  00059C  0009               	tblrd		*+
 15522  00059E  FFFF               	dw	65535	; errata NOP
 15523  0005A0  50F5               	movf	tablat,w,c
 15524  0005A2  5D97               	subwf	__doprnt@val& (0+255),w,b
 15525  0005A4  0009               	tblrd		*+
 15526  0005A6  FFFF               	dw	65535	; errata NOP
 15527  0005A8  50F5               	movf	tablat,w,c
 15528  0005AA  5998               	subwfb	(__doprnt@val+1)& (0+255),w,b
 15529  0005AC  A0D8               	btfss	status,0,c
 15530  0005AE  D002               	goto	u5010
 15531                           
 15532                           ; BSR set to: 0
 15533                           
 15534                           ; BSR set to: 0
 15535                           
 15536                           ; BSR set to: 0
 15537                           ;doprnt.c: 1307: break;
 15538  0005B0  2BA0               	incf	__doprnt@c& (0+255),f,b
 15539  0005B2  D7E7               	goto	l5070
 15540  0005B4                     u5010:
 15541  0005B4  FFFF               	dw	65535	; assembler added errata NOP
 15542                           
 15543                           ; BSR set to: 0
 15544                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15545                           
 15546                           ; BSR set to: 0
 15547  0005B6  519E               	movf	__doprnt@width& (0+255),w,b
 15548  0005B8  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 15549  0005BA  B4D8               	btfsc	status,2,c
 15550  0005BC  D009               	goto	l1065
 15551                           
 15552                           ; BSR set to: 0
 15553  0005BE  C09B  F092         	movff	__doprnt@flag,??__doprnt
 15554  0005C2  0E03               	movlw	3
 15555  0005C4  1792               	andwf	??__doprnt& (0+255),f,b
 15556  0005C6  B4D8               	btfsc	status,2,c
 15557  0005C8  D003               	goto	l1065
 15558                           
 15559                           ; BSR set to: 0
 15560                           ;doprnt.c: 1346: width--;
 15561  0005CA  079E               	decf	__doprnt@width& (0+255),f,b
 15562  0005CC  A0D8               	btfss	status,0,c
 15563  0005CE  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 15564  0005D0                     l1065:
 15565  0005D0  FFFF               	dw	65535	; assembler added errata NOP
 15566                           
 15567                           ; BSR set to: 0
 15568                           ;doprnt.c: 1381: if(width > c)
 15569                           
 15570                           ; BSR set to: 0
 15571  0005D2  0E80               	movlw	128
 15572  0005D4  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 15573  0005D6  0E7F               	movlw	127
 15574  0005D8  6F92               	movwf	??__doprnt& (0+255),b
 15575  0005DA  519E               	movf	__doprnt@width& (0+255),w,b
 15576  0005DC  5DA0               	subwf	__doprnt@c& (0+255),w,b
 15577  0005DE  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 15578  0005E0  0A80               	xorlw	128
 15579  0005E2  5992               	subwfb	??__doprnt& (0+255),w,b
 15580  0005E4  B0D8               	btfsc	status,0,c
 15581  0005E6  D007               	goto	l1066
 15582                           
 15583                           ; BSR set to: 0
 15584                           ;doprnt.c: 1382: width -= c;
 15585  0005E8  51A0               	movf	__doprnt@c& (0+255),w,b
 15586  0005EA  5F9E               	subwf	__doprnt@width& (0+255),f,b
 15587  0005EC  0E00               	movlw	0
 15588  0005EE  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 15589  0005F0  0EFF               	movlw	255
 15590  0005F2  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 15591  0005F4  D005               	goto	l1067
 15592  0005F6                     l1066:
 15593  0005F6  FFFF               	dw	65535	; assembler added errata NOP
 15594                           
 15595                           ; BSR set to: 0
 15596                           ;doprnt.c: 1383: else
 15597                           ;doprnt.c: 1384: width = 0;
 15598                           
 15599                           ; BSR set to: 0
 15600  0005F8  0E00               	movlw	0
 15601  0005FA  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15602  0005FC  0E00               	movlw	0
 15603  0005FE  6F9E               	movwf	__doprnt@width& (0+255),b
 15604  000600                     l1067:
 15605  000600  FFFF               	dw	65535	; assembler added errata NOP
 15606                           
 15607                           ; BSR set to: 0
 15608                           ;doprnt.c: 1387: if(flag & 0x04) {
 15609                           
 15610                           ; BSR set to: 0
 15611  000602  A59B               	btfss	__doprnt@flag& (0+255),2,b
 15612  000604  D07F               	goto	l1068
 15613                           
 15614                           ; BSR set to: 0
 15615                           ;doprnt.c: 1392: if(flag & 0x03)
 15616  000606  C09B  F092         	movff	__doprnt@flag,??__doprnt
 15617  00060A  0E03               	movlw	3
 15618  00060C  1792               	andwf	??__doprnt& (0+255),f,b
 15619  00060E  B4D8               	btfsc	status,2,c
 15620  000610  D036               	goto	l1071
 15621                           
 15622                           ; BSR set to: 0
 15623                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 15624  000612  EE20 F002          	lfsr	2,2
 15625  000616  518C               	movf	__doprnt@pb& (0+255),w,b
 15626  000618  26D9               	addwf	fsr2l,f,c
 15627  00061A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15628  00061C  22DA               	addwfc	fsr2h,f,c
 15629  00061E  50DE               	movf	postinc2,w,c
 15630  000620  10DE               	iorwf	postinc2,w,c
 15631  000622  B4D8               	btfsc	status,2,c
 15632  000624  D016               	goto	l1070
 15633                           
 15634                           ; BSR set to: 0
 15635  000626  EE20 F002          	lfsr	2,2
 15636  00062A  518C               	movf	__doprnt@pb& (0+255),w,b
 15637  00062C  26D9               	addwf	fsr2l,f,c
 15638  00062E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15639  000630  22DA               	addwfc	fsr2h,f,c
 15640  000632  D801               	call	u5088
 15641  000634  D024               	goto	l1071
 15642  000636                     u5088:
 15643  000636  FFFF               	dw	65535	; assembler added errata NOP
 15644  000638  0005               	push	
 15645  00063A  6EFA               	movwf	pclath,c
 15646  00063C  50DE               	movf	postinc2,w,c
 15647  00063E  6EFD               	movwf	tosl,c
 15648  000640  50DE               	movf	postinc2,w,c
 15649  000642  6EFE               	movwf	tosh,c
 15650  000644  50F8               	movf	tblptru,w,c
 15651  000646  6EFF               	movwf	tosu,c
 15652  000648  50FA               	movf	pclath,w,c
 15653  00064A  0E2D               	movlw	45
 15654  00064C  0012               	return		;indir
 15655  00064E  FFFF               	dw	65535	; errata NOP
 15656  000650  D016               	goto	l1071
 15657  000652                     l1070:
 15658  000652  FFFF               	dw	65535	; assembler added errata NOP
 15659  000654  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15660  000658  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15661  00065C  CFDE F092          	movff	postinc2,??__doprnt
 15662  000660  CFDD F093          	movff	postdec2,??__doprnt+1
 15663  000664  C092  FFD9         	movff	??__doprnt,fsr2l
 15664  000668  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15665  00066C  0E2D               	movlw	45
 15666  00066E  6EDF               	movwf	indf2,c
 15667  000670  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15668  000674  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15669  000678  2ADE               	incf	postinc2,f,c
 15670  00067A  0E00               	movlw	0
 15671  00067C  22DD               	addwfc	postdec2,f,c
 15672  00067E                     l1071:
 15673  00067E  FFFF               	dw	65535	; assembler added errata NOP
 15674                           
 15675                           ;doprnt.c: 1415: if(width)
 15676  000680  0100               	movlb	0	; () banked
 15677  000682  FFFF               	dw	65535	; assembler added errata NOP
 15678  000684  519E               	movf	__doprnt@width& (0+255),w,b
 15679  000686  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 15680  000688  B4D8               	btfsc	status,2,c
 15681  00068A  D0BE               	goto	l1085
 15682                           
 15683                           ; BSR set to: 0
 15684                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 15685                           
 15686                           ; BSR set to: 0
 15687                           
 15688                           ;doprnt.c: 1416: do
 15689  00068C  EE20 F002          	lfsr	2,2
 15690  000690  518C               	movf	__doprnt@pb& (0+255),w,b
 15691  000692  26D9               	addwf	fsr2l,f,c
 15692  000694  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15693  000696  22DA               	addwfc	fsr2h,f,c
 15694  000698  50DE               	movf	postinc2,w,c
 15695  00069A  10DE               	iorwf	postinc2,w,c
 15696  00069C  B4D8               	btfsc	status,2,c
 15697  00069E  D016               	goto	l1074
 15698                           
 15699                           ; BSR set to: 0
 15700  0006A0  EE20 F002          	lfsr	2,2
 15701  0006A4  518C               	movf	__doprnt@pb& (0+255),w,b
 15702  0006A6  26D9               	addwf	fsr2l,f,c
 15703  0006A8  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15704  0006AA  22DA               	addwfc	fsr2h,f,c
 15705  0006AC  D801               	call	u5118
 15706  0006AE  D024               	goto	l1075
 15707  0006B0                     u5118:
 15708  0006B0  FFFF               	dw	65535	; assembler added errata NOP
 15709  0006B2  0005               	push	
 15710  0006B4  6EFA               	movwf	pclath,c
 15711  0006B6  50DE               	movf	postinc2,w,c
 15712  0006B8  6EFD               	movwf	tosl,c
 15713  0006BA  50DE               	movf	postinc2,w,c
 15714  0006BC  6EFE               	movwf	tosh,c
 15715  0006BE  50F8               	movf	tblptru,w,c
 15716  0006C0  6EFF               	movwf	tosu,c
 15717  0006C2  50FA               	movf	pclath,w,c
 15718  0006C4  0E30               	movlw	48
 15719  0006C6  0012               	return		;indir
 15720  0006C8  FFFF               	dw	65535	; errata NOP
 15721  0006CA  D016               	goto	l1075
 15722  0006CC                     l1074:
 15723  0006CC  FFFF               	dw	65535	; assembler added errata NOP
 15724  0006CE  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15725  0006D2  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15726  0006D6  CFDE F092          	movff	postinc2,??__doprnt
 15727  0006DA  CFDD F093          	movff	postdec2,??__doprnt+1
 15728  0006DE  C092  FFD9         	movff	??__doprnt,fsr2l
 15729  0006E2  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15730  0006E6  0E30               	movlw	48
 15731  0006E8  6EDF               	movwf	indf2,c
 15732  0006EA  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15733  0006EE  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15734  0006F2  2ADE               	incf	postinc2,f,c
 15735  0006F4  0E00               	movlw	0
 15736  0006F6  22DD               	addwfc	postdec2,f,c
 15737  0006F8                     l1075:
 15738  0006F8  FFFF               	dw	65535	; assembler added errata NOP
 15739                           
 15740                           ;doprnt.c: 1418: while(--width);
 15741  0006FA  0100               	movlb	0	; () banked
 15742  0006FC  079E               	decf	__doprnt@width& (0+255),f,b
 15743  0006FE  A0D8               	btfss	status,0,c
 15744  000700  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 15745  000702  D7BF               	goto	L47
 15746  000704                     l1068:
 15747  000704  FFFF               	dw	65535	; assembler added errata NOP
 15748                           
 15749                           ; BSR set to: 0
 15750                           ;doprnt.c: 1422: {
 15751                           ;doprnt.c: 1424: if(width
 15752                           ;doprnt.c: 1428: )
 15753                           
 15754                           ; BSR set to: 0
 15755  000706  519E               	movf	__doprnt@width& (0+255),w,b
 15756  000708  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 15757  00070A  B4D8               	btfsc	status,2,c
 15758  00070C  D040               	goto	u5160
 15759  00070E                     u5130:
 15760  00070E  FFFF               	dw	65535	; assembler added errata NOP
 15761                           
 15762                           ; BSR set to: 0
 15763                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 15764                           
 15765                           ; BSR set to: 0
 15766                           
 15767                           ;doprnt.c: 1429: do
 15768  000710  EE20 F002          	lfsr	2,2
 15769  000714  518C               	movf	__doprnt@pb& (0+255),w,b
 15770  000716  26D9               	addwf	fsr2l,f,c
 15771  000718  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15772  00071A  22DA               	addwfc	fsr2h,f,c
 15773  00071C  50DE               	movf	postinc2,w,c
 15774  00071E  10DE               	iorwf	postinc2,w,c
 15775  000720  B4D8               	btfsc	status,2,c
 15776  000722  D016               	goto	l1080
 15777                           
 15778                           ; BSR set to: 0
 15779  000724  EE20 F002          	lfsr	2,2
 15780  000728  518C               	movf	__doprnt@pb& (0+255),w,b
 15781  00072A  26D9               	addwf	fsr2l,f,c
 15782  00072C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15783  00072E  22DA               	addwfc	fsr2h,f,c
 15784  000730  D801               	call	u5158
 15785  000732  D024               	goto	l1081
 15786  000734                     u5158:
 15787  000734  FFFF               	dw	65535	; assembler added errata NOP
 15788  000736  0005               	push	
 15789  000738  6EFA               	movwf	pclath,c
 15790  00073A  50DE               	movf	postinc2,w,c
 15791  00073C  6EFD               	movwf	tosl,c
 15792  00073E  50DE               	movf	postinc2,w,c
 15793  000740  6EFE               	movwf	tosh,c
 15794  000742  50F8               	movf	tblptru,w,c
 15795  000744  6EFF               	movwf	tosu,c
 15796  000746  50FA               	movf	pclath,w,c
 15797  000748  0E20               	movlw	32
 15798  00074A  0012               	return		;indir
 15799  00074C  FFFF               	dw	65535	; errata NOP
 15800  00074E  D016               	goto	l1081
 15801  000750                     l1080:
 15802  000750  FFFF               	dw	65535	; assembler added errata NOP
 15803  000752  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15804  000756  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15805  00075A  CFDE F092          	movff	postinc2,??__doprnt
 15806  00075E  CFDD F093          	movff	postdec2,??__doprnt+1
 15807  000762  C092  FFD9         	movff	??__doprnt,fsr2l
 15808  000766  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15809  00076A  0E20               	movlw	32
 15810  00076C  6EDF               	movwf	indf2,c
 15811  00076E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15812  000772  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15813  000776  2ADE               	incf	postinc2,f,c
 15814  000778  0E00               	movlw	0
 15815  00077A  22DD               	addwfc	postdec2,f,c
 15816  00077C                     l1081:
 15817  00077C  FFFF               	dw	65535	; assembler added errata NOP
 15818                           
 15819                           ;doprnt.c: 1431: while(--width);
 15820  00077E  0100               	movlb	0	; () banked
 15821  000780  079E               	decf	__doprnt@width& (0+255),f,b
 15822  000782  A0D8               	btfss	status,0,c
 15823  000784  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 15824  000786  519E               	movf	__doprnt@width& (0+255),w,b
 15825  000788  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 15826  00078A  A4D8               	btfss	status,2,c
 15827  00078C  D7C0               	goto	u5130
 15828  00078E                     u5160:
 15829  00078E  FFFF               	dw	65535	; assembler added errata NOP
 15830                           
 15831                           ; BSR set to: 0
 15832                           ;doprnt.c: 1438: if(flag & 0x03)
 15833                           
 15834                           ; BSR set to: 0
 15835                           
 15836                           ; BSR set to: 0
 15837  000790  C09B  F092         	movff	__doprnt@flag,??__doprnt
 15838  000794  0E03               	movlw	3
 15839  000796  1792               	andwf	??__doprnt& (0+255),f,b
 15840  000798  B4D8               	btfsc	status,2,c
 15841  00079A  D036               	goto	l1085
 15842                           
 15843                           ; BSR set to: 0
 15844                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 15845  00079C  EE20 F002          	lfsr	2,2
 15846  0007A0  518C               	movf	__doprnt@pb& (0+255),w,b
 15847  0007A2  26D9               	addwf	fsr2l,f,c
 15848  0007A4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15849  0007A6  22DA               	addwfc	fsr2h,f,c
 15850  0007A8  50DE               	movf	postinc2,w,c
 15851  0007AA  10DE               	iorwf	postinc2,w,c
 15852  0007AC  B4D8               	btfsc	status,2,c
 15853  0007AE  D016               	goto	l1084
 15854                           
 15855                           ; BSR set to: 0
 15856  0007B0  EE20 F002          	lfsr	2,2
 15857  0007B4  518C               	movf	__doprnt@pb& (0+255),w,b
 15858  0007B6  26D9               	addwf	fsr2l,f,c
 15859  0007B8  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15860  0007BA  22DA               	addwfc	fsr2h,f,c
 15861  0007BC  D801               	call	u5198
 15862  0007BE  D024               	goto	l1085
 15863  0007C0                     u5198:
 15864  0007C0  FFFF               	dw	65535	; assembler added errata NOP
 15865  0007C2  0005               	push	
 15866  0007C4  6EFA               	movwf	pclath,c
 15867  0007C6  50DE               	movf	postinc2,w,c
 15868  0007C8  6EFD               	movwf	tosl,c
 15869  0007CA  50DE               	movf	postinc2,w,c
 15870  0007CC  6EFE               	movwf	tosh,c
 15871  0007CE  50F8               	movf	tblptru,w,c
 15872  0007D0  6EFF               	movwf	tosu,c
 15873  0007D2  50FA               	movf	pclath,w,c
 15874  0007D4  0E2D               	movlw	45
 15875  0007D6  0012               	return		;indir
 15876  0007D8  FFFF               	dw	65535	; errata NOP
 15877  0007DA  D016               	goto	l1085
 15878  0007DC                     l1084:
 15879  0007DC  FFFF               	dw	65535	; assembler added errata NOP
 15880  0007DE  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15881  0007E2  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15882  0007E6  CFDE F092          	movff	postinc2,??__doprnt
 15883  0007EA  CFDD F093          	movff	postdec2,??__doprnt+1
 15884  0007EE  C092  FFD9         	movff	??__doprnt,fsr2l
 15885  0007F2  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15886  0007F6  0E2D               	movlw	45
 15887  0007F8  6EDF               	movwf	indf2,c
 15888  0007FA  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15889  0007FE  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15890  000802  2ADE               	incf	postinc2,f,c
 15891  000804  0E00               	movlw	0
 15892  000806  22DD               	addwfc	postdec2,f,c
 15893  000808                     l1085:
 15894  000808  FFFF               	dw	65535	; assembler added errata NOP
 15895                           
 15896                           ;doprnt.c: 1469: }
 15897                           ;doprnt.c: 1472: prec = c;
 15898  00080A  C0A0  F096         	movff	__doprnt@c,__doprnt@prec
 15899                           
 15900                           ;doprnt.c: 1474: while(prec--) {
 15901  00080E  D05D               	goto	l1089
 15902  000810  FFFF               	dw	65535	; assembler added errata NOP
 15903                           
 15904                           ;doprnt.c: 1478: {
 15905                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15906  000812  0100               	movlb	0	; () banked
 15907  000814  5196               	movf	__doprnt@prec& (0+255),w,b
 15908  000816  0D02               	mullw	2
 15909  000818  0E2B               	movlw	low _dpowers
 15910  00081A  24F3               	addwf	prodl,w,c
 15911  00081C  6EF6               	movwf	tblptrl,c
 15912  00081E  0E7B               	movlw	high _dpowers
 15913  000820  20F4               	addwfc	prodh,w,c
 15914  000822  6EF7               	movwf	tblptrh,c
 15915  000824                     	if	0	;There are less than 3 active tblptr bytes
 15916  000824                     	endif
 15917  000824  0009               	tblrd		*+
 15918  000826  FFFF               	dw	65535	; errata NOP
 15919  000828  CFF5 F082          	movff	tablat,___lwdiv@divisor
 15920  00082C  000A               	tblrd		*-
 15921  00082E  FFFF               	dw	65535	; errata NOP
 15922  000830  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 15923  000834  C097  F080         	movff	__doprnt@val,___lwdiv@dividend
 15924  000838  C098  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
 15925  00083C  ECA7  F03B         	call	___lwdiv
 15926  000840  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 15927  000844  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 15928  000848  0E00               	movlw	0
 15929  00084A  0100               	movlb	0	; () banked
 15930  00084C  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 15931  00084E  0E0A               	movlw	10
 15932  000850  6F89               	movwf	___lwmod@divisor& (0+255),b
 15933  000852  ECF8  F03A         	call	___lwmod	;wreg free
 15934  000856  0100               	movlb	0	; () banked
 15935  000858  5187               	movf	?___lwmod& (0+255),w,b
 15936  00085A  0F30               	addlw	48
 15937  00085C  6FA0               	movwf	__doprnt@c& (0+255),b
 15938                           
 15939                           ; BSR set to: 0
 15940                           ;doprnt.c: 1523: }
 15941                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 15942  00085E  EE20 F002          	lfsr	2,2
 15943  000862  518C               	movf	__doprnt@pb& (0+255),w,b
 15944  000864  26D9               	addwf	fsr2l,f,c
 15945  000866  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15946  000868  22DA               	addwfc	fsr2h,f,c
 15947  00086A  50DE               	movf	postinc2,w,c
 15948  00086C  10DE               	iorwf	postinc2,w,c
 15949  00086E  B4D8               	btfsc	status,2,c
 15950  000870  D016               	goto	l1088
 15951                           
 15952                           ; BSR set to: 0
 15953  000872  EE20 F002          	lfsr	2,2
 15954  000876  518C               	movf	__doprnt@pb& (0+255),w,b
 15955  000878  26D9               	addwf	fsr2l,f,c
 15956  00087A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15957  00087C  22DA               	addwfc	fsr2h,f,c
 15958  00087E  D801               	call	u5218
 15959  000880  D024               	goto	l1089
 15960  000882                     u5218:
 15961  000882  FFFF               	dw	65535	; assembler added errata NOP
 15962  000884  0005               	push	
 15963  000886  6EFA               	movwf	pclath,c
 15964  000888  50DE               	movf	postinc2,w,c
 15965  00088A  6EFD               	movwf	tosl,c
 15966  00088C  50DE               	movf	postinc2,w,c
 15967  00088E  6EFE               	movwf	tosh,c
 15968  000890  50F8               	movf	tblptru,w,c
 15969  000892  6EFF               	movwf	tosu,c
 15970  000894  50FA               	movf	pclath,w,c
 15971  000896  51A0               	movf	__doprnt@c& (0+255),w,b
 15972  000898  0012               	return		;indir
 15973  00089A  FFFF               	dw	65535	; errata NOP
 15974  00089C  D016               	goto	l1089
 15975  00089E                     l1088:
 15976  00089E  FFFF               	dw	65535	; assembler added errata NOP
 15977  0008A0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15978  0008A4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15979  0008A8  CFDE F092          	movff	postinc2,??__doprnt
 15980  0008AC  CFDD F093          	movff	postdec2,??__doprnt+1
 15981  0008B0  C092  FFD9         	movff	??__doprnt,fsr2l
 15982  0008B4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15983  0008B8  C0A0  FFDF         	movff	__doprnt@c,indf2
 15984  0008BC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15985  0008C0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15986  0008C4  2ADE               	incf	postinc2,f,c
 15987  0008C6  0E00               	movlw	0
 15988  0008C8  22DD               	addwfc	postdec2,f,c
 15989  0008CA                     l1089:
 15990  0008CA  FFFF               	dw	65535	; assembler added errata NOP
 15991  0008CC  0100               	movlb	0	; () banked
 15992  0008CE  0796               	decf	__doprnt@prec& (0+255),f,b
 15993  0008D0  2996               	incf	__doprnt@prec& (0+255),w,b
 15994  0008D2  A4D8               	btfss	status,2,c
 15995  0008D4  D79D               	goto	l1087
 15996  0008D6                     u5220:
 15997  0008D6  FFFF               	dw	65535	; assembler added errata NOP
 15998                           
 15999                           ; BSR set to: 0
 16000                           
 16001                           ; BSR set to: 0
 16002  0008D8  0100               	movlb	0	; () banked
 16003  0008DA  518E               	movf	__doprnt@f& (0+255),w,b
 16004  0008DC  6F92               	movwf	??__doprnt& (0+255),b
 16005  0008DE  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 16006  0008E0  6F93               	movwf	(??__doprnt+1)& (0+255),b
 16007  0008E2  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 16008  0008E4  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 16009  0008E6  C092  FFF6         	movff	??__doprnt,tblptrl
 16010  0008EA  C093  FFF7         	movff	??__doprnt+1,tblptrh
 16011  0008EE  6AF8               	clrf	tblptru,c
 16012  0008F0  0E05               	movlw	(high __ramtop+-1)
 16013  0008F2  64F7               	cpfsgt	tblptrh,c
 16014  0008F4  D004               	bra	u5237
 16015  0008F6  0008               	tblrd		*
 16016  0008F8  FFFF               	dw	65535	; errata NOP
 16017  0008FA  50F5               	movf	tablat,w,c
 16018  0008FC  D005               	bra	u5230
 16019  0008FE                     u5237:
 16020  0008FE  CFF6 FFE9          	movff	tblptrl,fsr0l
 16021  000902  CFF7 FFEA          	movff	tblptrh,fsr0h
 16022  000906  50EF               	movf	indf0,w,c
 16023  000908                     u5230:
 16024  000908  0100               	movlb	0	; () banked
 16025  00090A  6FA0               	movwf	__doprnt@c& (0+255),b
 16026  00090C  51A0               	movf	__doprnt@c& (0+255),w,b
 16027  00090E  A4D8               	btfss	status,2,c
 16028  000910  D40B               	goto	l1022
 16029  000912                     u5240:
 16030  000912  FFFF               	dw	65535	; assembler added errata NOP
 16031                           
 16032                           ;doprnt.c: 1540: return 0;
 16033                           
 16034                           ; BSR set to: 0
 16035                           
 16036                           ;doprnt.c: 1525: }
 16037                           ;doprnt.c: 1533: }
 16038                           ;doprnt.c: 1535: alldone:
 16039                           
 16040                           ; BSR set to: 0
 16041  000914  0E00               	movlw	0
 16042  000916  0100               	movlb	0	; () banked
 16043  000918  6F8D               	movwf	(?__doprnt+1)& (0+255),b
 16044  00091A  0E00               	movlw	0
 16045  00091C  6F8C               	movwf	?__doprnt& (0+255),b
 16046                           
 16047                           ; BSR set to: 0
 16048                           
 16049                           ; BSR set to: 0
 16050  00091E  0012               	return		;funcret
 16051  000920  FFFF               	dw	65535	; errata NOP
 16052  000922                     __end_of__doprnt:
 16053                           	opt stack 0
 16054                           tosu	equ	0xFFF
 16055                           tosh	equ	0xFFE
 16056                           tosl	equ	0xFFD
 16057                           pclath	equ	0xFFA
 16058                           tblptru	equ	0xFF8
 16059                           tblptrh	equ	0xFF7
 16060                           tblptrl	equ	0xFF6
 16061                           tablat	equ	0xFF5
 16062                           prodh	equ	0xFF4
 16063                           prodl	equ	0xFF3
 16064                           intcon	equ	0xFF2
 16065                           indf0	equ	0xFEF
 16066                           postinc0	equ	0xFEE
 16067                           fsr0h	equ	0xFEA
 16068                           fsr0l	equ	0xFE9
 16069                           wreg	equ	0xFE8
 16070                           postdec1	equ	0xFE5
 16071                           fsr1l	equ	0xFE1
 16072                           indf2	equ	0xFDF
 16073                           postinc2	equ	0xFDE
 16074                           postdec2	equ	0xFDD
 16075                           fsr2h	equ	0xFDA
 16076                           fsr2l	equ	0xFD9
 16077                           status	equ	0xFD8
 16078                           
 16079 ;; *************** function _putch *****************
 16080 ;; Defined at:
 16081 ;;		line 16 in file "serial.h"
 16082 ;; Parameters:    Size  Location     Type
 16083 ;;  c               1    wreg     unsigned char 
 16084 ;; Auto vars:     Size  Location     Type
 16085 ;;  c               1    0[BANK0 ] unsigned char 
 16086 ;; Return value:  Size  Location     Type
 16087 ;;                  1    wreg      void 
 16088 ;; Registers used:
 16089 ;;		wreg
 16090 ;; Tracked objects:
 16091 ;;		On entry : 0/0
 16092 ;;		On exit  : 0/0
 16093 ;;		Unchanged: 0/0
 16094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16095 ;;      Params:         0       0       0       0       0       0       0
 16096 ;;      Locals:         0       1       0       0       0       0       0
 16097 ;;      Temps:          0       0       0       0       0       0       0
 16098 ;;      Totals:         0       1       0       0       0       0       0
 16099 ;;Total ram usage:        1 bytes
 16100 ;; Hardware stack levels used:    1
 16101 ;; Hardware stack levels required when called:    6
 16102 ;; This function calls:
 16103 ;;		Nothing
 16104 ;; This function is called by:
 16105 ;;		_printf
 16106 ;;		__doprnt
 16107 ;; This function uses a non-reentrant model
 16108 ;;
 16109                           
 16110                           	psect	text49
 16111  006E94                     __ptext49:
 16112                           	opt stack 0
 16113  006E94                     _putch:
 16114                           	opt stack 0
 16115  006E94  FFFF               	dw	65535	; assembler added errata NOP
 16116                           
 16117                           ; BSR set to: 0
 16118                           ;incstack = 0
 16119                           ;putch@c stored from wreg
 16120  006E96  0100               	movlb	0	; () banked
 16121  006E98  6F80               	movwf	putch@c& (0+255),b
 16122  006E9A  FFFF               	dw	65535	; assembler added errata NOP
 16123                           
 16124                           ;serial.h: 17: while (!TXSTAbits.TRMT);
 16125  006E9C  A2AC               	btfss	4012,1,c	;volatile
 16126  006E9E  D7FD               	goto	l4790
 16127                           
 16128                           ;serial.h: 18: TXREG = c;
 16129  006EA0  C080  FFAD         	movff	putch@c,4013	;volatile
 16130  006EA4  0012               	return		;funcret
 16131  006EA6  FFFF               	dw	65535	; errata NOP
 16132  006EA8                     __end_of_putch:
 16133                           	opt stack 0
 16134                           tosu	equ	0xFFF
 16135                           tosh	equ	0xFFE
 16136                           tosl	equ	0xFFD
 16137                           pclath	equ	0xFFA
 16138                           tblptru	equ	0xFF8
 16139                           tblptrh	equ	0xFF7
 16140                           tblptrl	equ	0xFF6
 16141                           tablat	equ	0xFF5
 16142                           prodh	equ	0xFF4
 16143                           prodl	equ	0xFF3
 16144                           intcon	equ	0xFF2
 16145                           indf0	equ	0xFEF
 16146                           postinc0	equ	0xFEE
 16147                           fsr0h	equ	0xFEA
 16148                           fsr0l	equ	0xFE9
 16149                           wreg	equ	0xFE8
 16150                           postdec1	equ	0xFE5
 16151                           fsr1l	equ	0xFE1
 16152                           indf2	equ	0xFDF
 16153                           postinc2	equ	0xFDE
 16154                           postdec2	equ	0xFDD
 16155                           fsr2h	equ	0xFDA
 16156                           fsr2l	equ	0xFD9
 16157                           status	equ	0xFD8
 16158                           
 16159 ;; *************** function _isdigit *****************
 16160 ;; Defined at:
 16161 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 16162 ;; Parameters:    Size  Location     Type
 16163 ;;  c               1    wreg     unsigned char 
 16164 ;; Auto vars:     Size  Location     Type
 16165 ;;  c               1    2[BANK0 ] unsigned char 
 16166 ;; Return value:  Size  Location     Type
 16167 ;;		None               void
 16168 ;; Registers used:
 16169 ;;		wreg, status,2, status,0
 16170 ;; Tracked objects:
 16171 ;;		On entry : 0/0
 16172 ;;		On exit  : 0/0
 16173 ;;		Unchanged: 0/0
 16174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16175 ;;      Params:         0       0       0       0       0       0       0
 16176 ;;      Locals:         0       2       0       0       0       0       0
 16177 ;;      Temps:          0       1       0       0       0       0       0
 16178 ;;      Totals:         0       3       0       0       0       0       0
 16179 ;;Total ram usage:        3 bytes
 16180 ;; Hardware stack levels used:    1
 16181 ;; Hardware stack levels required when called:    6
 16182 ;; This function calls:
 16183 ;;		Nothing
 16184 ;; This function is called by:
 16185 ;;		__doprnt
 16186 ;;		_atoi
 16187 ;; This function uses a non-reentrant model
 16188 ;;
 16189                           
 16190                           	psect	text50
 16191  006F5A                     __ptext50:
 16192                           	opt stack 0
 16193  006F5A                     _isdigit:
 16194                           	opt stack 0
 16195  006F5A  FFFF               	dw	65535	; assembler added errata NOP
 16196                           
 16197                           ;incstack = 0
 16198                           ;isdigit@c stored from wreg
 16199  006F5C  0100               	movlb	0	; () banked
 16200  006F5E  6F82               	movwf	isdigit@c& (0+255),b
 16201  006F60  0E00               	movlw	0
 16202  006F62  0100               	movlb	0	; () banked
 16203  006F64  6F81               	movwf	_isdigit$1855& (0+255),b
 16204                           
 16205                           ; BSR set to: 0
 16206  006F66  0E3A               	movlw	58
 16207  006F68  6182               	cpfslt	isdigit@c& (0+255),b
 16208  006F6A  D005               	goto	l1437
 16209                           
 16210                           ; BSR set to: 0
 16211  006F6C  0E2F               	movlw	47
 16212  006F6E  6582               	cpfsgt	isdigit@c& (0+255),b
 16213  006F70  D002               	goto	l1437
 16214                           
 16215                           ; BSR set to: 0
 16216  006F72  0E01               	movlw	1
 16217  006F74  6F81               	movwf	_isdigit$1855& (0+255),b
 16218  006F76                     l1437:
 16219  006F76  FFFF               	dw	65535	; assembler added errata NOP
 16220                           
 16221                           ; BSR set to: 0
 16222                           
 16223                           ; BSR set to: 0
 16224  006F78  C081  F080         	movff	_isdigit$1855,??_isdigit
 16225  006F7C  3180               	rrcf	??_isdigit& (0+255),w,b
 16226                           
 16227                           ; BSR set to: 0
 16228                           
 16229                           ; BSR set to: 0
 16230  006F7E  0012               	return		;funcret
 16231  006F80  FFFF               	dw	65535	; errata NOP
 16232  006F82                     __end_of_isdigit:
 16233                           	opt stack 0
 16234                           tosu	equ	0xFFF
 16235                           tosh	equ	0xFFE
 16236                           tosl	equ	0xFFD
 16237                           pclath	equ	0xFFA
 16238                           tblptru	equ	0xFF8
 16239                           tblptrh	equ	0xFF7
 16240                           tblptrl	equ	0xFF6
 16241                           tablat	equ	0xFF5
 16242                           prodh	equ	0xFF4
 16243                           prodl	equ	0xFF3
 16244                           intcon	equ	0xFF2
 16245                           indf0	equ	0xFEF
 16246                           postinc0	equ	0xFEE
 16247                           fsr0h	equ	0xFEA
 16248                           fsr0l	equ	0xFE9
 16249                           wreg	equ	0xFE8
 16250                           postdec1	equ	0xFE5
 16251                           fsr1l	equ	0xFE1
 16252                           indf2	equ	0xFDF
 16253                           postinc2	equ	0xFDE
 16254                           postdec2	equ	0xFDD
 16255                           fsr2h	equ	0xFDA
 16256                           fsr2l	equ	0xFD9
 16257                           status	equ	0xFD8
 16258                           
 16259 ;; *************** function ___wmul *****************
 16260 ;; Defined at:
 16261 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16262 ;; Parameters:    Size  Location     Type
 16263 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16264 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16265 ;; Auto vars:     Size  Location     Type
 16266 ;;  product         2    4[BANK0 ] unsigned int 
 16267 ;; Return value:  Size  Location     Type
 16268 ;;                  2    0[BANK0 ] unsigned int 
 16269 ;; Registers used:
 16270 ;;		wreg, status,2, status,0, prodl, prodh
 16271 ;; Tracked objects:
 16272 ;;		On entry : 0/0
 16273 ;;		On exit  : 0/0
 16274 ;;		Unchanged: 0/0
 16275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16276 ;;      Params:         0       4       0       0       0       0       0
 16277 ;;      Locals:         0       2       0       0       0       0       0
 16278 ;;      Temps:          0       0       0       0       0       0       0
 16279 ;;      Totals:         0       6       0       0       0       0       0
 16280 ;;Total ram usage:        6 bytes
 16281 ;; Hardware stack levels used:    1
 16282 ;; Hardware stack levels required when called:    6
 16283 ;; This function calls:
 16284 ;;		Nothing
 16285 ;; This function is called by:
 16286 ;;		__doprnt
 16287 ;;		_atoi
 16288 ;; This function uses a non-reentrant model
 16289 ;;
 16290                           
 16291                           	psect	text51
 16292  006FD6                     __ptext51:
 16293                           	opt stack 0
 16294  006FD6                     ___wmul:
 16295                           	opt stack 0
 16296  006FD6  FFFF               	dw	65535	; assembler added errata NOP
 16297                           
 16298                           ; BSR set to: 0
 16299                           ;incstack = 0
 16300  006FD8  0100               	movlb	0	; () banked
 16301  006FDA  5180               	movf	___wmul@multiplier& (0+255),w,b
 16302  006FDC  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16303  006FDE  CFF3 F084          	movff	prodl,___wmul@product
 16304  006FE2  CFF4 F085          	movff	prodh,___wmul@product+1
 16305  006FE6  5180               	movf	___wmul@multiplier& (0+255),w,b
 16306  006FE8  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16307  006FEA  50F3               	movf	prodl,w,c
 16308  006FEC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16309  006FEE  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16310  006FF0  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16311  006FF2  50F3               	movf	prodl,w,c
 16312  006FF4  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16313                           
 16314                           ; BSR set to: 0
 16315  006FF6  C084  F080         	movff	___wmul@product,?___wmul
 16316  006FFA  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16317                           
 16318                           ; BSR set to: 0
 16319                           
 16320                           ; BSR set to: 0
 16321  006FFE  0012               	return		;funcret
 16322  007000  FFFF               	dw	65535	; errata NOP
 16323  007002                     __end_of___wmul:
 16324                           	opt stack 0
 16325                           tosu	equ	0xFFF
 16326                           tosh	equ	0xFFE
 16327                           tosl	equ	0xFFD
 16328                           pclath	equ	0xFFA
 16329                           tblptru	equ	0xFF8
 16330                           tblptrh	equ	0xFF7
 16331                           tblptrl	equ	0xFF6
 16332                           tablat	equ	0xFF5
 16333                           prodh	equ	0xFF4
 16334                           prodl	equ	0xFF3
 16335                           intcon	equ	0xFF2
 16336                           indf0	equ	0xFEF
 16337                           postinc0	equ	0xFEE
 16338                           fsr0h	equ	0xFEA
 16339                           fsr0l	equ	0xFE9
 16340                           wreg	equ	0xFE8
 16341                           postdec1	equ	0xFE5
 16342                           fsr1l	equ	0xFE1
 16343                           indf2	equ	0xFDF
 16344                           postinc2	equ	0xFDE
 16345                           postdec2	equ	0xFDD
 16346                           fsr2h	equ	0xFDA
 16347                           fsr2l	equ	0xFD9
 16348                           status	equ	0xFD8
 16349                           
 16350 ;; *************** function ___lwmod *****************
 16351 ;; Defined at:
 16352 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 16353 ;; Parameters:    Size  Location     Type
 16354 ;;  dividend        2    7[BANK0 ] unsigned int 
 16355 ;;  divisor         2    9[BANK0 ] unsigned int 
 16356 ;; Auto vars:     Size  Location     Type
 16357 ;;  counter         1   11[BANK0 ] unsigned char 
 16358 ;; Return value:  Size  Location     Type
 16359 ;;                  2    7[BANK0 ] unsigned int 
 16360 ;; Registers used:
 16361 ;;		wreg, status,2, status,0
 16362 ;; Tracked objects:
 16363 ;;		On entry : 0/0
 16364 ;;		On exit  : 0/0
 16365 ;;		Unchanged: 0/0
 16366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16367 ;;      Params:         0       4       0       0       0       0       0
 16368 ;;      Locals:         0       1       0       0       0       0       0
 16369 ;;      Temps:          0       0       0       0       0       0       0
 16370 ;;      Totals:         0       5       0       0       0       0       0
 16371 ;;Total ram usage:        5 bytes
 16372 ;; Hardware stack levels used:    1
 16373 ;; Hardware stack levels required when called:    6
 16374 ;; This function calls:
 16375 ;;		Nothing
 16376 ;; This function is called by:
 16377 ;;		__doprnt
 16378 ;; This function uses a non-reentrant model
 16379 ;;
 16380                           
 16381                           	psect	text52
 16382  0075F0                     __ptext52:
 16383                           	opt stack 0
 16384  0075F0                     ___lwmod:
 16385                           	opt stack 0
 16386  0075F0  FFFF               	dw	65535	; assembler added errata NOP
 16387                           
 16388                           ; BSR set to: 0
 16389                           ;incstack = 0
 16390  0075F2  0100               	movlb	0	; () banked
 16391  0075F4  5189               	movf	___lwmod@divisor& (0+255),w,b
 16392  0075F6  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16393  0075F8  B4D8               	btfsc	status,2,c
 16394  0075FA  D01C               	goto	l1531
 16395                           
 16396                           ; BSR set to: 0
 16397  0075FC  0E01               	movlw	1
 16398  0075FE  6F8B               	movwf	___lwmod@counter& (0+255),b
 16399  007600  D005               	goto	l1526
 16400  007602  FFFF               	dw	65535	; assembler added errata NOP
 16401                           
 16402                           ; BSR set to: 0
 16403                           
 16404                           ; BSR set to: 0
 16405  007604  90D8               	bcf	status,0,c
 16406  007606  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16407  007608  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16408  00760A  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16409  00760C                     l1526:
 16410  00760C  FFFF               	dw	65535	; assembler added errata NOP
 16411                           
 16412                           ; BSR set to: 0
 16413                           
 16414                           ; BSR set to: 0
 16415  00760E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16416  007610  D7F8               	goto	l1527
 16417  007612                     u4560:
 16418  007612  FFFF               	dw	65535	; assembler added errata NOP
 16419                           
 16420                           ; BSR set to: 0
 16421                           
 16422                           ; BSR set to: 0
 16423                           
 16424                           ; BSR set to: 0
 16425  007614  5189               	movf	___lwmod@divisor& (0+255),w,b
 16426  007616  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16427  007618  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16428  00761A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16429  00761C  A0D8               	btfss	status,0,c
 16430  00761E  D004               	goto	l1530
 16431                           
 16432                           ; BSR set to: 0
 16433  007620  5189               	movf	___lwmod@divisor& (0+255),w,b
 16434  007622  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16435  007624  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16436  007626  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16437  007628                     l1530:
 16438  007628  FFFF               	dw	65535	; assembler added errata NOP
 16439                           
 16440                           ; BSR set to: 0
 16441                           
 16442                           ; BSR set to: 0
 16443  00762A  90D8               	bcf	status,0,c
 16444  00762C  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16445  00762E  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16446                           
 16447                           ; BSR set to: 0
 16448  007630  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16449  007632  D7EF               	goto	u4560
 16450  007634                     l1531:
 16451  007634  FFFF               	dw	65535	; assembler added errata NOP
 16452                           
 16453                           ; BSR set to: 0
 16454                           
 16455                           ; BSR set to: 0
 16456  007636  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16457  00763A  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16458                           
 16459                           ; BSR set to: 0
 16460  00763E  0012               	return		;funcret
 16461  007640  FFFF               	dw	65535	; errata NOP
 16462  007642                     __end_of___lwmod:
 16463                           	opt stack 0
 16464                           tosu	equ	0xFFF
 16465                           tosh	equ	0xFFE
 16466                           tosl	equ	0xFFD
 16467                           pclath	equ	0xFFA
 16468                           tblptru	equ	0xFF8
 16469                           tblptrh	equ	0xFF7
 16470                           tblptrl	equ	0xFF6
 16471                           tablat	equ	0xFF5
 16472                           prodh	equ	0xFF4
 16473                           prodl	equ	0xFF3
 16474                           intcon	equ	0xFF2
 16475                           indf0	equ	0xFEF
 16476                           postinc0	equ	0xFEE
 16477                           fsr0h	equ	0xFEA
 16478                           fsr0l	equ	0xFE9
 16479                           wreg	equ	0xFE8
 16480                           postdec1	equ	0xFE5
 16481                           fsr1l	equ	0xFE1
 16482                           indf2	equ	0xFDF
 16483                           postinc2	equ	0xFDE
 16484                           postdec2	equ	0xFDD
 16485                           fsr2h	equ	0xFDA
 16486                           fsr2l	equ	0xFD9
 16487                           status	equ	0xFD8
 16488                           
 16489 ;; *************** function ___lwdiv *****************
 16490 ;; Defined at:
 16491 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 16492 ;; Parameters:    Size  Location     Type
 16493 ;;  dividend        2    0[BANK0 ] unsigned int 
 16494 ;;  divisor         2    2[BANK0 ] unsigned int 
 16495 ;; Auto vars:     Size  Location     Type
 16496 ;;  quotient        2    4[BANK0 ] unsigned int 
 16497 ;;  counter         1    6[BANK0 ] unsigned char 
 16498 ;; Return value:  Size  Location     Type
 16499 ;;                  2    0[BANK0 ] unsigned int 
 16500 ;; Registers used:
 16501 ;;		wreg, status,2, status,0
 16502 ;; Tracked objects:
 16503 ;;		On entry : 0/0
 16504 ;;		On exit  : 0/0
 16505 ;;		Unchanged: 0/0
 16506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16507 ;;      Params:         0       4       0       0       0       0       0
 16508 ;;      Locals:         0       3       0       0       0       0       0
 16509 ;;      Temps:          0       0       0       0       0       0       0
 16510 ;;      Totals:         0       7       0       0       0       0       0
 16511 ;;Total ram usage:        7 bytes
 16512 ;; Hardware stack levels used:    1
 16513 ;; Hardware stack levels required when called:    6
 16514 ;; This function calls:
 16515 ;;		Nothing
 16516 ;; This function is called by:
 16517 ;;		__doprnt
 16518 ;; This function uses a non-reentrant model
 16519 ;;
 16520                           
 16521                           	psect	text53
 16522  00774E                     __ptext53:
 16523                           	opt stack 0
 16524  00774E                     ___lwdiv:
 16525                           	opt stack 0
 16526  00774E  FFFF               	dw	65535	; assembler added errata NOP
 16527                           
 16528                           ; BSR set to: 0
 16529                           ;incstack = 0
 16530  007750  0E00               	movlw	0
 16531  007752  0100               	movlb	0	; () banked
 16532  007754  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16533  007756  0E00               	movlw	0
 16534  007758  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16535                           
 16536                           ; BSR set to: 0
 16537  00775A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16538  00775C  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16539  00775E  B4D8               	btfsc	status,2,c
 16540  007760  D020               	goto	l1521
 16541                           
 16542                           ; BSR set to: 0
 16543  007762  0E01               	movlw	1
 16544  007764  6F86               	movwf	___lwdiv@counter& (0+255),b
 16545  007766  D005               	goto	l1516
 16546  007768  FFFF               	dw	65535	; assembler added errata NOP
 16547                           
 16548                           ; BSR set to: 0
 16549                           
 16550                           ; BSR set to: 0
 16551  00776A  90D8               	bcf	status,0,c
 16552  00776C  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16553  00776E  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16554  007770  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16555  007772                     l1516:
 16556  007772  FFFF               	dw	65535	; assembler added errata NOP
 16557                           
 16558                           ; BSR set to: 0
 16559                           
 16560                           ; BSR set to: 0
 16561  007774  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16562  007776  D7F8               	goto	l1517
 16563  007778                     u4530:
 16564  007778  FFFF               	dw	65535	; assembler added errata NOP
 16565                           
 16566                           ; BSR set to: 0
 16567                           
 16568                           ; BSR set to: 0
 16569                           
 16570                           ; BSR set to: 0
 16571  00777A  90D8               	bcf	status,0,c
 16572  00777C  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16573  00777E  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16574                           
 16575                           ; BSR set to: 0
 16576  007780  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16577  007782  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16578  007784  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16579  007786  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16580  007788  A0D8               	btfss	status,0,c
 16581  00778A  D005               	goto	l1520
 16582                           
 16583                           ; BSR set to: 0
 16584  00778C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16585  00778E  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16586  007790  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16587  007792  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16588                           
 16589                           ; BSR set to: 0
 16590  007794  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16591  007796                     l1520:
 16592  007796  FFFF               	dw	65535	; assembler added errata NOP
 16593                           
 16594                           ; BSR set to: 0
 16595                           
 16596                           ; BSR set to: 0
 16597  007798  90D8               	bcf	status,0,c
 16598  00779A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16599  00779C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16600                           
 16601                           ; BSR set to: 0
 16602  00779E  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16603  0077A0  D7EB               	goto	u4530
 16604  0077A2                     l1521:
 16605  0077A2  FFFF               	dw	65535	; assembler added errata NOP
 16606                           
 16607                           ; BSR set to: 0
 16608                           
 16609                           ; BSR set to: 0
 16610  0077A4  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16611  0077A8  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16612                           
 16613                           ; BSR set to: 0
 16614  0077AC  0012               	return		;funcret
 16615  0077AE  FFFF               	dw	65535	; errata NOP
 16616  0077B0                     __end_of___lwdiv:
 16617                           	opt stack 0
 16618                           tosu	equ	0xFFF
 16619                           tosh	equ	0xFFE
 16620                           tosl	equ	0xFFD
 16621                           pclath	equ	0xFFA
 16622                           tblptru	equ	0xFF8
 16623                           tblptrh	equ	0xFF7
 16624                           tblptrl	equ	0xFF6
 16625                           tablat	equ	0xFF5
 16626                           prodh	equ	0xFF4
 16627                           prodl	equ	0xFF3
 16628                           intcon	equ	0xFF2
 16629                           indf0	equ	0xFEF
 16630                           postinc0	equ	0xFEE
 16631                           fsr0h	equ	0xFEA
 16632                           fsr0l	equ	0xFE9
 16633                           wreg	equ	0xFE8
 16634                           postdec1	equ	0xFE5
 16635                           fsr1l	equ	0xFE1
 16636                           indf2	equ	0xFDF
 16637                           postinc2	equ	0xFDE
 16638                           postdec2	equ	0xFDD
 16639                           fsr2h	equ	0xFDA
 16640                           fsr2l	equ	0xFD9
 16641                           status	equ	0xFD8
 16642                           
 16643 ;; *************** function _limparBuffer *****************
 16644 ;; Defined at:
 16645 ;;		line 34 in file "serial.h"
 16646 ;; Parameters:    Size  Location     Type
 16647 ;;		None
 16648 ;; Auto vars:     Size  Location     Type
 16649 ;;		None
 16650 ;; Return value:  Size  Location     Type
 16651 ;;                  1    wreg      void 
 16652 ;; Registers used:
 16653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16654 ;; Tracked objects:
 16655 ;;		On entry : 0/0
 16656 ;;		On exit  : 0/0
 16657 ;;		Unchanged: 0/0
 16658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16659 ;;      Params:         0       0       0       0       0       0       0
 16660 ;;      Locals:         0       0       0       0       0       0       0
 16661 ;;      Temps:          0       0       0       0       0       0       0
 16662 ;;      Totals:         0       0       0       0       0       0       0
 16663 ;;Total ram usage:        0 bytes
 16664 ;; Hardware stack levels used:    1
 16665 ;; Hardware stack levels required when called:    7
 16666 ;; This function calls:
 16667 ;;		_delay
 16668 ;;		_memset
 16669 ;; This function is called by:
 16670 ;;		_getSinalSIM800L
 16671 ;;		_comunicarTeste
 16672 ;;		_enviaSMS
 16673 ;; This function uses a non-reentrant model
 16674 ;;
 16675                           
 16676                           	psect	text54
 16677  007106                     __ptext54:
 16678                           	opt stack 0
 16679  007106                     _limparBuffer:
 16680                           	opt stack 0
 16681  007106  FFFF               	dw	65535	; assembler added errata NOP
 16682                           
 16683                           ;serial.h: 35: cbf = 0;
 16684                           
 16685                           ; BSR set to: 0
 16686                           ;incstack = 0
 16687  007108  0E00               	movlw	0
 16688  00710A  6E66               	movwf	_cbf,c
 16689                           
 16690                           ;serial.h: 36: memset(bufferSerial, 0, sizeof (bufferSerial));
 16691  00710C  0E00               	movlw	low _bufferSerial
 16692  00710E  0100               	movlb	0	; () banked
 16693  007110  6F80               	movwf	memset@p1& (0+255),b
 16694  007112  0E01               	movlw	high _bufferSerial
 16695  007114  6F81               	movwf	(memset@p1+1)& (0+255),b
 16696  007116  0E00               	movlw	0
 16697  007118  6F83               	movwf	(memset@c+1)& (0+255),b
 16698  00711A  0E00               	movlw	0
 16699  00711C  6F82               	movwf	memset@c& (0+255),b
 16700  00711E  0E00               	movlw	0
 16701  007120  6F85               	movwf	(memset@n+1)& (0+255),b
 16702  007122  0E3C               	movlw	60
 16703  007124  6F84               	movwf	memset@n& (0+255),b
 16704  007126  ECF1  F038         	call	_memset
 16705                           
 16706                           ;serial.h: 37: delay(150);
 16707  00712A  0E00               	movlw	0
 16708  00712C  0100               	movlb	0	; () banked
 16709  00712E  6F81               	movwf	(delay@x+1)& (0+255),b
 16710  007130  0E96               	movlw	150
 16711  007132  6F80               	movwf	delay@x& (0+255),b
 16712  007134  EC68  F038         	call	_delay	;wreg free
 16713  007138  0012               	return		;funcret
 16714  00713A  FFFF               	dw	65535	; errata NOP
 16715  00713C                     __end_of_limparBuffer:
 16716                           	opt stack 0
 16717                           tosu	equ	0xFFF
 16718                           tosh	equ	0xFFE
 16719                           tosl	equ	0xFFD
 16720                           pclath	equ	0xFFA
 16721                           tblptru	equ	0xFF8
 16722                           tblptrh	equ	0xFF7
 16723                           tblptrl	equ	0xFF6
 16724                           tablat	equ	0xFF5
 16725                           prodh	equ	0xFF4
 16726                           prodl	equ	0xFF3
 16727                           intcon	equ	0xFF2
 16728                           indf0	equ	0xFEF
 16729                           postinc0	equ	0xFEE
 16730                           fsr0h	equ	0xFEA
 16731                           fsr0l	equ	0xFE9
 16732                           wreg	equ	0xFE8
 16733                           postdec1	equ	0xFE5
 16734                           fsr1l	equ	0xFE1
 16735                           indf2	equ	0xFDF
 16736                           postinc2	equ	0xFDE
 16737                           postdec2	equ	0xFDD
 16738                           fsr2h	equ	0xFDA
 16739                           fsr2l	equ	0xFD9
 16740                           status	equ	0xFD8
 16741                           
 16742 ;; *************** function _memset *****************
 16743 ;; Defined at:
 16744 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 16745 ;; Parameters:    Size  Location     Type
 16746 ;;  p1              2    0[BANK0 ] PTR void 
 16747 ;;		 -> bufferAUX(20), bufferSerial(60), 
 16748 ;;  c               2    2[BANK0 ] int 
 16749 ;;  n               2    4[BANK0 ] unsigned int 
 16750 ;; Auto vars:     Size  Location     Type
 16751 ;;  p               2    6[BANK0 ] PTR unsigned char 
 16752 ;;		 -> bufferAUX(20), bufferSerial(60), 
 16753 ;; Return value:  Size  Location     Type
 16754 ;;                  2    0[BANK0 ] PTR void 
 16755 ;; Registers used:
 16756 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16757 ;; Tracked objects:
 16758 ;;		On entry : 0/0
 16759 ;;		On exit  : 0/0
 16760 ;;		Unchanged: 0/0
 16761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16762 ;;      Params:         0       6       0       0       0       0       0
 16763 ;;      Locals:         0       2       0       0       0       0       0
 16764 ;;      Temps:          0       0       0       0       0       0       0
 16765 ;;      Totals:         0       8       0       0       0       0       0
 16766 ;;Total ram usage:        8 bytes
 16767 ;; Hardware stack levels used:    1
 16768 ;; Hardware stack levels required when called:    6
 16769 ;; This function calls:
 16770 ;;		Nothing
 16771 ;; This function is called by:
 16772 ;;		_limparBuffer
 16773 ;;		_getSerial
 16774 ;; This function uses a non-reentrant model
 16775 ;;
 16776                           
 16777                           	psect	text55
 16778  0071E2                     __ptext55:
 16779                           	opt stack 0
 16780  0071E2                     _memset:
 16781                           	opt stack 0
 16782  0071E2  FFFF               	dw	65535	; assembler added errata NOP
 16783                           
 16784                           ;incstack = 0
 16785  0071E4  C080  F086         	movff	memset@p1,memset@p
 16786  0071E8  C081  F087         	movff	memset@p1+1,memset@p+1
 16787  0071EC  D00A               	goto	l1540
 16788  0071EE  FFFF               	dw	65535	; assembler added errata NOP
 16789  0071F0                     l4924:
 16790  0071F0  C086  FFD9         	movff	memset@p,fsr2l
 16791  0071F4  C087  FFDA         	movff	memset@p+1,fsr2h
 16792  0071F8  C082  FFDF         	movff	memset@c,indf2
 16793  0071FC  0100               	movlb	0	; () banked
 16794  0071FE  4B86               	infsnz	memset@p& (0+255),f,b
 16795  007200  2B87               	incf	(memset@p+1)& (0+255),f,b
 16796  007202                     l1540:
 16797  007202  FFFF               	dw	65535	; assembler added errata NOP
 16798                           
 16799                           ; BSR set to: 0
 16800  007204  0100               	movlb	0	; () banked
 16801  007206  0784               	decf	memset@n& (0+255),f,b
 16802  007208  A0D8               	btfss	status,0,c
 16803  00720A  0785               	decf	(memset@n+1)& (0+255),f,b
 16804  00720C  2984               	incf	memset@n& (0+255),w,b
 16805  00720E  E1F0               	bnz	l4924
 16806  007210  2985               	incf	(memset@n+1)& (0+255),w,b
 16807  007212  B4D8               	btfsc	status,2,c
 16808                           
 16809                           ; BSR set to: 0
 16810                           
 16811                           ; BSR set to: 0
 16812                           ;	Return value of _memset is never used
 16813  007214  0012               	return		;funcret
 16814  007216  FFFF               	dw	65535	; assembler added errata NOP
 16815  007218  D7EA               	goto	l1541
 16816  00721A  FFFF               	dw	65535	; errata NOP
 16817  00721C                     __end_of_memset:
 16818                           	opt stack 0
 16819                           tosu	equ	0xFFF
 16820                           tosh	equ	0xFFE
 16821                           tosl	equ	0xFFD
 16822                           pclath	equ	0xFFA
 16823                           tblptru	equ	0xFF8
 16824                           tblptrh	equ	0xFF7
 16825                           tblptrl	equ	0xFF6
 16826                           tablat	equ	0xFF5
 16827                           prodh	equ	0xFF4
 16828                           prodl	equ	0xFF3
 16829                           intcon	equ	0xFF2
 16830                           indf0	equ	0xFEF
 16831                           postinc0	equ	0xFEE
 16832                           fsr0h	equ	0xFEA
 16833                           fsr0l	equ	0xFE9
 16834                           wreg	equ	0xFE8
 16835                           postdec1	equ	0xFE5
 16836                           fsr1l	equ	0xFE1
 16837                           indf2	equ	0xFDF
 16838                           postinc2	equ	0xFDE
 16839                           postdec2	equ	0xFDD
 16840                           fsr2h	equ	0xFDA
 16841                           fsr2l	equ	0xFD9
 16842                           status	equ	0xFD8
 16843                           
 16844 ;; *************** function _aguardaBuffer *****************
 16845 ;; Defined at:
 16846 ;;		line 26 in file "serial.h"
 16847 ;; Parameters:    Size  Location     Type
 16848 ;;  str             2   19[BANK0 ] PTR unsigned char 
 16849 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 16850 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 16851 ;;		 -> STR_11(3), STR_9(3), STR_6(7), STR_5(3), 
 16852 ;; Auto vars:     Size  Location     Type
 16853 ;;		None
 16854 ;; Return value:  Size  Location     Type
 16855 ;;                  1    wreg      unsigned char 
 16856 ;; Registers used:
 16857 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16858 ;; Tracked objects:
 16859 ;;		On entry : 0/0
 16860 ;;		On exit  : 0/0
 16861 ;;		Unchanged: 0/0
 16862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16863 ;;      Params:         0       2       0       0       0       0       0
 16864 ;;      Locals:         0       0       0       0       0       0       0
 16865 ;;      Temps:          0       0       0       0       0       0       0
 16866 ;;      Totals:         0       2       0       0       0       0       0
 16867 ;;Total ram usage:        2 bytes
 16868 ;; Hardware stack levels used:    1
 16869 ;; Hardware stack levels required when called:    8
 16870 ;; This function calls:
 16871 ;;		_delay
 16872 ;;		_strstr
 16873 ;; This function is called by:
 16874 ;;		_getSinalSIM800L
 16875 ;;		_comunicarTeste
 16876 ;;		_enviaSMS
 16877 ;; This function uses a non-reentrant model
 16878 ;;
 16879                           
 16880                           	psect	text56
 16881  0072CC                     __ptext56:
 16882                           	opt stack 0
 16883  0072CC                     _aguardaBuffer:
 16884                           	opt stack 0
 16885  0072CC  FFFF               	dw	65535	; assembler added errata NOP
 16886                           
 16887                           ;serial.h: 27: if (strstr(bufferSerial, str) != (0)) {
 16888                           
 16889                           ; BSR set to: 0
 16890                           ;incstack = 0
 16891  0072CE  0E00               	movlw	low _bufferSerial
 16892  0072D0  0100               	movlb	0	; () banked
 16893  0072D2  6F8F               	movwf	strstr@s1& (0+255),b
 16894  0072D4  0E01               	movlw	high _bufferSerial
 16895  0072D6  6F90               	movwf	(strstr@s1+1)& (0+255),b
 16896  0072D8  C093  F091         	movff	aguardaBuffer@str,strstr@s2
 16897  0072DC  C094  F092         	movff	aguardaBuffer@str+1,strstr@s2+1
 16898  0072E0  EC10  F01F         	call	_strstr	;wreg free
 16899  0072E4  0100               	movlb	0	; () banked
 16900  0072E6  518F               	movf	?_strstr& (0+255),w,b
 16901  0072E8  1190               	iorwf	(?_strstr+1)& (0+255),w,b
 16902  0072EA  B4D8               	btfsc	status,2,c
 16903  0072EC  D008               	goto	l253
 16904                           
 16905                           ; BSR set to: 0
 16906                           ;serial.h: 28: delay(150);
 16907  0072EE  0E00               	movlw	0
 16908  0072F0  6F81               	movwf	(delay@x+1)& (0+255),b
 16909  0072F2  0E96               	movlw	150
 16910  0072F4  6F80               	movwf	delay@x& (0+255),b
 16911  0072F6  EC68  F038         	call	_delay	;wreg free
 16912                           
 16913                           ;serial.h: 29: return 1;
 16914  0072FA  0E01               	movlw	1
 16915  0072FC  D002               	goto	l5270
 16916  0072FE                     l253:
 16917  0072FE  FFFF               	dw	65535	; assembler added errata NOP
 16918                           
 16919                           ;serial.h: 30: }
 16920                           ;serial.h: 31: return 0;
 16921  007300  0E00               	movlw	0
 16922  007302                     l5270:
 16923  007302  FFFF               	dw	65535	; assembler added errata NOP
 16924  007304  0012               	return		;funcret
 16925  007306  FFFF               	dw	65535	; errata NOP
 16926  007308                     __end_of_aguardaBuffer:
 16927                           	opt stack 0
 16928                           tosu	equ	0xFFF
 16929                           tosh	equ	0xFFE
 16930                           tosl	equ	0xFFD
 16931                           pclath	equ	0xFFA
 16932                           tblptru	equ	0xFF8
 16933                           tblptrh	equ	0xFF7
 16934                           tblptrl	equ	0xFF6
 16935                           tablat	equ	0xFF5
 16936                           prodh	equ	0xFF4
 16937                           prodl	equ	0xFF3
 16938                           intcon	equ	0xFF2
 16939                           indf0	equ	0xFEF
 16940                           postinc0	equ	0xFEE
 16941                           fsr0h	equ	0xFEA
 16942                           fsr0l	equ	0xFE9
 16943                           wreg	equ	0xFE8
 16944                           postdec1	equ	0xFE5
 16945                           fsr1l	equ	0xFE1
 16946                           indf2	equ	0xFDF
 16947                           postinc2	equ	0xFDE
 16948                           postdec2	equ	0xFDD
 16949                           fsr2h	equ	0xFDA
 16950                           fsr2l	equ	0xFD9
 16951                           status	equ	0xFD8
 16952                           
 16953 ;; *************** function _strstr *****************
 16954 ;; Defined at:
 16955 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strstr.c"
 16956 ;; Parameters:    Size  Location     Type
 16957 ;;  s1              2   15[BANK0 ] PTR const unsigned char 
 16958 ;;		 -> NULL(0), bufferSerial(60), 
 16959 ;;  s2              2   17[BANK0 ] PTR const unsigned char 
 16960 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 16961 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 16962 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 16963 ;;		 -> STR_5(3), 
 16964 ;; Auto vars:     Size  Location     Type
 16965 ;;		None
 16966 ;; Return value:  Size  Location     Type
 16967 ;;                  2   15[BANK0 ] PTR unsigned char 
 16968 ;; Registers used:
 16969 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16970 ;; Tracked objects:
 16971 ;;		On entry : 0/0
 16972 ;;		On exit  : 0/0
 16973 ;;		Unchanged: 0/0
 16974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16975 ;;      Params:         0       4       0       0       0       0       0
 16976 ;;      Locals:         0       0       0       0       0       0       0
 16977 ;;      Temps:          0       0       0       0       0       0       0
 16978 ;;      Totals:         0       4       0       0       0       0       0
 16979 ;;Total ram usage:        4 bytes
 16980 ;; Hardware stack levels used:    1
 16981 ;; Hardware stack levels required when called:    7
 16982 ;; This function calls:
 16983 ;;		_strchr
 16984 ;;		_strlen
 16985 ;;		_strncmp
 16986 ;; This function is called by:
 16987 ;;		_aguardaBuffer
 16988 ;;		_getSerial
 16989 ;; This function uses a non-reentrant model
 16990 ;;
 16991                           
 16992                           	psect	text57
 16993  003E20                     __ptext57:
 16994                           	opt stack 0
 16995  003E20                     _strstr:
 16996                           	opt stack 0
 16997  003E20  FFFF               	dw	65535	; assembler added errata NOP
 16998                           
 16999                           ;incstack = 0
 17000  003E22  D035               	goto	l1694
 17001  003E24  FFFF               	dw	65535	; assembler added errata NOP
 17002  003E26  C08F  F086         	movff	strstr@s1,strncmp@s1
 17003  003E2A  C090  F087         	movff	strstr@s1+1,strncmp@s1+1
 17004  003E2E  C091  F088         	movff	strstr@s2,strncmp@s2
 17005  003E32  C092  F089         	movff	strstr@s2+1,strncmp@s2+1
 17006  003E36  C091  F080         	movff	strstr@s2,strlen@s
 17007  003E3A  C092  F081         	movff	strstr@s2+1,strlen@s+1
 17008  003E3E  EC77  F03B         	call	_strlen	;wreg free
 17009  003E42  C080  F08A         	movff	?_strlen,strncmp@len
 17010  003E46  C081  F08B         	movff	?_strlen+1,strncmp@len+1
 17011  003E4A  ECC3  F01E         	call	_strncmp	;wreg free
 17012  003E4E  0100               	movlb	0	; () banked
 17013  003E50  5186               	movf	?_strncmp& (0+255),w,b
 17014  003E52  1187               	iorwf	(?_strncmp+1)& (0+255),w,b
 17015  003E54  A4D8               	btfss	status,2,c
 17016  003E56  D005               	goto	l1696
 17017                           
 17018                           ; BSR set to: 0
 17019  003E58  C08F  F08F         	movff	strstr@s1,?_strstr
 17020  003E5C  C090  F090         	movff	strstr@s1+1,?_strstr+1
 17021                           
 17022                           ; BSR set to: 0
 17023  003E60  D028               	goto	l4914
 17024  003E62                     l1696:
 17025  003E62  FFFF               	dw	65535	; assembler added errata NOP
 17026                           
 17027                           ; BSR set to: 0
 17028                           
 17029                           ; BSR set to: 0
 17030  003E64  0E01               	movlw	1
 17031  003E66  258F               	addwf	strstr@s1& (0+255),w,b
 17032  003E68  6F80               	movwf	strchr@ptr& (0+255),b
 17033  003E6A  0E00               	movlw	0
 17034  003E6C  2190               	addwfc	(strstr@s1+1)& (0+255),w,b
 17035  003E6E  6F81               	movwf	(strchr@ptr+1)& (0+255),b
 17036  003E70  C091  FFF6         	movff	strstr@s2,tblptrl
 17037  003E74  C092  FFF7         	movff	strstr@s2+1,tblptrh
 17038  003E78                     	if	0	;tblptru may be non-zero
 17039  003E78                     	endif
 17040  003E78                     	if	0	;tblptru may be non-zero
 17041  003E78                     	endif
 17042  003E78  0008               	tblrd		*
 17043  003E7A  FFFF               	dw	65535	; errata NOP
 17044  003E7C  50F5               	movf	tablat,w,c
 17045  003E7E  6F82               	movwf	strchr@chr& (0+255),b
 17046  003E80  6B83               	clrf	(strchr@chr+1)& (0+255),b
 17047  003E82  ECC1  F039         	call	_strchr	;wreg free
 17048  003E86  C080  F08F         	movff	?_strchr,strstr@s1
 17049  003E8A  C081  F090         	movff	?_strchr+1,strstr@s1+1
 17050  003E8E                     l1694:
 17051  003E8E  FFFF               	dw	65535	; assembler added errata NOP
 17052  003E90  0100               	movlb	0	; () banked
 17053  003E92  518F               	movf	strstr@s1& (0+255),w,b
 17054  003E94  1190               	iorwf	(strstr@s1+1)& (0+255),w,b
 17055  003E96  B4D8               	btfsc	status,2,c
 17056  003E98  D007               	goto	u4670
 17057                           
 17058                           ; BSR set to: 0
 17059  003E9A  C08F  FFD9         	movff	strstr@s1,fsr2l
 17060  003E9E  C090  FFDA         	movff	strstr@s1+1,fsr2h
 17061  003EA2  50DF               	movf	indf2,w,c
 17062  003EA4  A4D8               	btfss	status,2,c
 17063  003EA6  D7BE               	goto	l1695
 17064  003EA8                     u4670:
 17065  003EA8  FFFF               	dw	65535	; assembler added errata NOP
 17066                           
 17067                           ; BSR set to: 0
 17068                           
 17069                           ; BSR set to: 0
 17070                           
 17071                           ; BSR set to: 0
 17072  003EAA  0E00               	movlw	0
 17073  003EAC  6F8F               	movwf	?_strstr& (0+255),b
 17074  003EAE  0E00               	movlw	0
 17075  003EB0  6F90               	movwf	(?_strstr+1)& (0+255),b
 17076  003EB2                     l4914:
 17077  003EB2  FFFF               	dw	65535	; assembler added errata NOP
 17078                           
 17079                           ; BSR set to: 0
 17080                           
 17081                           ; BSR set to: 0
 17082  003EB4  0012               	return		;funcret
 17083  003EB6  FFFF               	dw	65535	; errata NOP
 17084  003EB8                     __end_of_strstr:
 17085                           	opt stack 0
 17086                           tosu	equ	0xFFF
 17087                           tosh	equ	0xFFE
 17088                           tosl	equ	0xFFD
 17089                           pclath	equ	0xFFA
 17090                           tblptru	equ	0xFF8
 17091                           tblptrh	equ	0xFF7
 17092                           tblptrl	equ	0xFF6
 17093                           tablat	equ	0xFF5
 17094                           prodh	equ	0xFF4
 17095                           prodl	equ	0xFF3
 17096                           intcon	equ	0xFF2
 17097                           indf0	equ	0xFEF
 17098                           postinc0	equ	0xFEE
 17099                           fsr0h	equ	0xFEA
 17100                           fsr0l	equ	0xFE9
 17101                           wreg	equ	0xFE8
 17102                           postdec1	equ	0xFE5
 17103                           fsr1l	equ	0xFE1
 17104                           indf2	equ	0xFDF
 17105                           postinc2	equ	0xFDE
 17106                           postdec2	equ	0xFDD
 17107                           fsr2h	equ	0xFDA
 17108                           fsr2l	equ	0xFD9
 17109                           status	equ	0xFD8
 17110                           
 17111 ;; *************** function _strncmp *****************
 17112 ;; Defined at:
 17113 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncmp.c"
 17114 ;; Parameters:    Size  Location     Type
 17115 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 17116 ;;		 -> NULL(0), bufferSerial(60), 
 17117 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 17118 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17119 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17120 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17121 ;;		 -> STR_5(3), 
 17122 ;;  len             2   10[BANK0 ] unsigned int 
 17123 ;; Auto vars:     Size  Location     Type
 17124 ;;		None
 17125 ;; Return value:  Size  Location     Type
 17126 ;;                  2    6[BANK0 ] int 
 17127 ;; Registers used:
 17128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17129 ;; Tracked objects:
 17130 ;;		On entry : 0/0
 17131 ;;		On exit  : 0/0
 17132 ;;		Unchanged: 0/0
 17133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17134 ;;      Params:         0       6       0       0       0       0       0
 17135 ;;      Locals:         0       0       0       0       0       0       0
 17136 ;;      Temps:          0       3       0       0       0       0       0
 17137 ;;      Totals:         0       9       0       0       0       0       0
 17138 ;;Total ram usage:        9 bytes
 17139 ;; Hardware stack levels used:    1
 17140 ;; Hardware stack levels required when called:    6
 17141 ;; This function calls:
 17142 ;;		Nothing
 17143 ;; This function is called by:
 17144 ;;		_strstr
 17145 ;; This function uses a non-reentrant model
 17146 ;;
 17147                           
 17148                           	psect	text58
 17149  003D86                     __ptext58:
 17150                           	opt stack 0
 17151  003D86                     _strncmp:
 17152                           	opt stack 0
 17153  003D86  FFFF               	dw	65535	; assembler added errata NOP
 17154                           
 17155                           ; BSR set to: 0
 17156                           ;incstack = 0
 17157  003D88  D03A               	goto	l1728
 17158  003D8A  FFFF               	dw	65535	; assembler added errata NOP
 17159  003D8C                     l4866:
 17160  003D8C  C086  FFD9         	movff	strncmp@s1,fsr2l
 17161  003D90  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17162  003D94  50DF               	movf	indf2,w,c
 17163  003D96  B4D8               	btfsc	status,2,c
 17164  003D98  D011               	goto	u4590
 17165  003D9A  C086  FFD9         	movff	strncmp@s1,fsr2l
 17166  003D9E  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17167  003DA2  50DF               	movf	indf2,w,c
 17168  003DA4  0100               	movlb	0	; () banked
 17169  003DA6  6F8C               	movwf	??_strncmp& (0+255),b
 17170  003DA8  C088  FFF6         	movff	strncmp@s2,tblptrl
 17171  003DAC  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 17172  003DB0                     	if	0	;tblptru may be non-zero
 17173  003DB0                     	endif
 17174  003DB0                     	if	0	;tblptru may be non-zero
 17175  003DB0                     	endif
 17176  003DB0  0008               	tblrd		*
 17177  003DB2  FFFF               	dw	65535	; errata NOP
 17178  003DB4  50F5               	movf	tablat,w,c
 17179  003DB6  198C               	xorwf	??_strncmp& (0+255),w,b
 17180  003DB8  B4D8               	btfsc	status,2,c
 17181  003DBA  D01C               	goto	l1730
 17182  003DBC                     u4590:
 17183  003DBC  FFFF               	dw	65535	; assembler added errata NOP
 17184                           
 17185                           ; BSR set to: 0
 17186  003DBE  C088  FFF6         	movff	strncmp@s2,tblptrl
 17187  003DC2  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 17188  003DC6                     	if	0	;tblptru may be non-zero
 17189  003DC6                     	endif
 17190  003DC6                     	if	0	;tblptru may be non-zero
 17191  003DC6                     	endif
 17192  003DC6  0008               	tblrd		*
 17193  003DC8  FFFF               	dw	65535	; errata NOP
 17194  003DCA  50F5               	movf	tablat,w,c
 17195  003DCC  0100               	movlb	0	; () banked
 17196  003DCE  6F8C               	movwf	??_strncmp& (0+255),b
 17197  003DD0  6B8D               	clrf	(??_strncmp+1)& (0+255),b
 17198  003DD2  1F8C               	comf	??_strncmp& (0+255),f,b
 17199  003DD4  1F8D               	comf	(??_strncmp+1)& (0+255),f,b
 17200  003DD6  4B8C               	infsnz	??_strncmp& (0+255),f,b
 17201  003DD8  2B8D               	incf	(??_strncmp+1)& (0+255),f,b
 17202  003DDA  C086  FFD9         	movff	strncmp@s1,fsr2l
 17203  003DDE  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17204  003DE2  50DF               	movf	indf2,w,c
 17205  003DE4  6F8E               	movwf	(??_strncmp+2)& (0+255),b
 17206  003DE6  518E               	movf	(??_strncmp+2)& (0+255),w,b
 17207  003DE8  258C               	addwf	??_strncmp& (0+255),w,b
 17208  003DEA  6F86               	movwf	?_strncmp& (0+255),b
 17209  003DEC  0E00               	movlw	0
 17210  003DEE  218D               	addwfc	(??_strncmp+1)& (0+255),w,b
 17211  003DF0  6F87               	movwf	(?_strncmp+1)& (0+255),b
 17212                           
 17213                           ; BSR set to: 0
 17214  003DF2  D013               	goto	l4880
 17215  003DF4                     l1730:
 17216  003DF4  FFFF               	dw	65535	; assembler added errata NOP
 17217                           
 17218                           ; BSR set to: 0
 17219                           
 17220                           ; BSR set to: 0
 17221  003DF6  4B86               	infsnz	strncmp@s1& (0+255),f,b
 17222  003DF8  2B87               	incf	(strncmp@s1+1)& (0+255),f,b
 17223  003DFA  4B88               	infsnz	strncmp@s2& (0+255),f,b
 17224  003DFC  2B89               	incf	(strncmp@s2+1)& (0+255),f,b
 17225  003DFE                     l1728:
 17226  003DFE  FFFF               	dw	65535	; assembler added errata NOP
 17227                           
 17228                           ; BSR set to: 0
 17229  003E00  0100               	movlb	0	; () banked
 17230  003E02  078A               	decf	strncmp@len& (0+255),f,b
 17231  003E04  A0D8               	btfss	status,0,c
 17232  003E06  078B               	decf	(strncmp@len+1)& (0+255),f,b
 17233  003E08  298A               	incf	strncmp@len& (0+255),w,b
 17234  003E0A  E1C0               	bnz	l4866
 17235  003E0C  298B               	incf	(strncmp@len+1)& (0+255),w,b
 17236  003E0E  A4D8               	btfss	status,2,c
 17237  003E10  D7BC               	goto	l1729
 17238                           
 17239                           ; BSR set to: 0
 17240                           
 17241                           ; BSR set to: 0
 17242  003E12  0E00               	movlw	0
 17243  003E14  6F87               	movwf	(?_strncmp+1)& (0+255),b
 17244  003E16  0E00               	movlw	0
 17245  003E18  6F86               	movwf	?_strncmp& (0+255),b
 17246  003E1A                     l4880:
 17247  003E1A  FFFF               	dw	65535	; assembler added errata NOP
 17248                           
 17249                           ; BSR set to: 0
 17250                           
 17251                           ; BSR set to: 0
 17252  003E1C  0012               	return		;funcret
 17253  003E1E  FFFF               	dw	65535	; errata NOP
 17254  003E20                     __end_of_strncmp:
 17255                           	opt stack 0
 17256                           tosu	equ	0xFFF
 17257                           tosh	equ	0xFFE
 17258                           tosl	equ	0xFFD
 17259                           pclath	equ	0xFFA
 17260                           tblptru	equ	0xFF8
 17261                           tblptrh	equ	0xFF7
 17262                           tblptrl	equ	0xFF6
 17263                           tablat	equ	0xFF5
 17264                           prodh	equ	0xFF4
 17265                           prodl	equ	0xFF3
 17266                           intcon	equ	0xFF2
 17267                           indf0	equ	0xFEF
 17268                           postinc0	equ	0xFEE
 17269                           fsr0h	equ	0xFEA
 17270                           fsr0l	equ	0xFE9
 17271                           wreg	equ	0xFE8
 17272                           postdec1	equ	0xFE5
 17273                           fsr1l	equ	0xFE1
 17274                           indf2	equ	0xFDF
 17275                           postinc2	equ	0xFDE
 17276                           postdec2	equ	0xFDD
 17277                           fsr2h	equ	0xFDA
 17278                           fsr2l	equ	0xFD9
 17279                           status	equ	0xFD8
 17280                           
 17281 ;; *************** function _strlen *****************
 17282 ;; Defined at:
 17283 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 17284 ;; Parameters:    Size  Location     Type
 17285 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 17286 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17287 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17288 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17289 ;;		 -> STR_5(3), NULL(0), bufferSerial(60), 
 17290 ;; Auto vars:     Size  Location     Type
 17291 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 17292 ;;		 -> STR_34(6), STR_33(3), STR_24(2), STR_22(3), 
 17293 ;;		 -> STR_19(3), STR_17(6), STR_16(3), STR_13(2), 
 17294 ;;		 -> STR_11(3), STR_9(3), STR_7(7), STR_6(7), 
 17295 ;;		 -> STR_5(3), NULL(0), bufferSerial(60), 
 17296 ;; Return value:  Size  Location     Type
 17297 ;;                  2    0[BANK0 ] unsigned int 
 17298 ;; Registers used:
 17299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 17300 ;; Tracked objects:
 17301 ;;		On entry : 0/0
 17302 ;;		On exit  : 0/0
 17303 ;;		Unchanged: 0/0
 17304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17305 ;;      Params:         0       2       0       0       0       0       0
 17306 ;;      Locals:         0       2       0       0       0       0       0
 17307 ;;      Temps:          0       2       0       0       0       0       0
 17308 ;;      Totals:         0       6       0       0       0       0       0
 17309 ;;Total ram usage:        6 bytes
 17310 ;; Hardware stack levels used:    1
 17311 ;; Hardware stack levels required when called:    6
 17312 ;; This function calls:
 17313 ;;		Nothing
 17314 ;; This function is called by:
 17315 ;;		_getSerial
 17316 ;;		_strstr
 17317 ;; This function uses a non-reentrant model
 17318 ;;
 17319                           
 17320                           	psect	text59
 17321  0076EE                     __ptext59:
 17322                           	opt stack 0
 17323  0076EE                     _strlen:
 17324                           	opt stack 0
 17325  0076EE  FFFF               	dw	65535	; assembler added errata NOP
 17326                           
 17327                           ; BSR set to: 0
 17328                           ;incstack = 0
 17329  0076F0  C080  F084         	movff	strlen@s,strlen@cp
 17330  0076F4  C081  F085         	movff	strlen@s+1,strlen@cp+1
 17331  0076F8  D004               	goto	l1682
 17332  0076FA  FFFF               	dw	65535	; assembler added errata NOP
 17333  0076FC  0100               	movlb	0	; () banked
 17334  0076FE  4B84               	infsnz	strlen@cp& (0+255),f,b
 17335  007700  2B85               	incf	(strlen@cp+1)& (0+255),f,b
 17336  007702                     l1682:
 17337  007702  FFFF               	dw	65535	; assembler added errata NOP
 17338                           
 17339                           ; BSR set to: 0
 17340  007704  C084  FFF6         	movff	strlen@cp,tblptrl
 17341  007708  C085  FFF7         	movff	strlen@cp+1,tblptrh
 17342  00770C  6AF8               	clrf	tblptru,c
 17343  00770E  0E05               	movlw	(high __ramtop+-1)
 17344  007710  64F7               	cpfsgt	tblptrh,c
 17345  007712  D004               	bra	u4467
 17346  007714  0008               	tblrd		*
 17347  007716  FFFF               	dw	65535	; errata NOP
 17348  007718  50F5               	movf	tablat,w,c
 17349  00771A  D005               	bra	u4460
 17350  00771C                     u4467:
 17351  00771C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17352  007720  CFF7 FFEA          	movff	tblptrh,fsr0h
 17353  007724  50EF               	movf	indf0,w,c
 17354  007726                     u4460:
 17355  007726  0900               	iorlw	0
 17356  007728  A4D8               	btfss	status,2,c
 17357  00772A  D7E7               	goto	l1683
 17358  00772C  C080  F082         	movff	strlen@s,??_strlen
 17359  007730  C081  F083         	movff	strlen@s+1,??_strlen+1
 17360  007734  0100               	movlb	0	; () banked
 17361  007736  1F82               	comf	??_strlen& (0+255),f,b
 17362  007738  1F83               	comf	(??_strlen+1)& (0+255),f,b
 17363  00773A  4B82               	infsnz	??_strlen& (0+255),f,b
 17364  00773C  2B83               	incf	(??_strlen+1)& (0+255),f,b
 17365  00773E  5184               	movf	strlen@cp& (0+255),w,b
 17366  007740  2582               	addwf	??_strlen& (0+255),w,b
 17367  007742  6F80               	movwf	?_strlen& (0+255),b
 17368  007744  5185               	movf	(strlen@cp+1)& (0+255),w,b
 17369  007746  2183               	addwfc	(??_strlen+1)& (0+255),w,b
 17370  007748  6F81               	movwf	(?_strlen+1)& (0+255),b
 17371                           
 17372                           ; BSR set to: 0
 17373                           
 17374                           ; BSR set to: 0
 17375  00774A  0012               	return		;funcret
 17376  00774C  FFFF               	dw	65535	; errata NOP
 17377  00774E                     __end_of_strlen:
 17378                           	opt stack 0
 17379                           tosu	equ	0xFFF
 17380                           tosh	equ	0xFFE
 17381                           tosl	equ	0xFFD
 17382                           pclath	equ	0xFFA
 17383                           tblptru	equ	0xFF8
 17384                           tblptrh	equ	0xFF7
 17385                           tblptrl	equ	0xFF6
 17386                           tablat	equ	0xFF5
 17387                           prodh	equ	0xFF4
 17388                           prodl	equ	0xFF3
 17389                           intcon	equ	0xFF2
 17390                           indf0	equ	0xFEF
 17391                           postinc0	equ	0xFEE
 17392                           fsr0h	equ	0xFEA
 17393                           fsr0l	equ	0xFE9
 17394                           wreg	equ	0xFE8
 17395                           postdec1	equ	0xFE5
 17396                           fsr1l	equ	0xFE1
 17397                           indf2	equ	0xFDF
 17398                           postinc2	equ	0xFDE
 17399                           postdec2	equ	0xFDD
 17400                           fsr2h	equ	0xFDA
 17401                           fsr2l	equ	0xFD9
 17402                           status	equ	0xFD8
 17403                           
 17404 ;; *************** function _strchr *****************
 17405 ;; Defined at:
 17406 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
 17407 ;; Parameters:    Size  Location     Type
 17408 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 17409 ;;		 -> NULL(0), bufferSerial(60), 
 17410 ;;  chr             2    2[BANK0 ] int 
 17411 ;; Auto vars:     Size  Location     Type
 17412 ;;		None
 17413 ;; Return value:  Size  Location     Type
 17414 ;;                  2    0[BANK0 ] PTR unsigned char 
 17415 ;; Registers used:
 17416 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17417 ;; Tracked objects:
 17418 ;;		On entry : 0/0
 17419 ;;		On exit  : 0/0
 17420 ;;		Unchanged: 0/0
 17421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17422 ;;      Params:         0       4       0       0       0       0       0
 17423 ;;      Locals:         0       0       0       0       0       0       0
 17424 ;;      Temps:          0       1       0       0       0       0       0
 17425 ;;      Totals:         0       5       0       0       0       0       0
 17426 ;;Total ram usage:        5 bytes
 17427 ;; Hardware stack levels used:    1
 17428 ;; Hardware stack levels required when called:    6
 17429 ;; This function calls:
 17430 ;;		Nothing
 17431 ;; This function is called by:
 17432 ;;		_strstr
 17433 ;; This function uses a non-reentrant model
 17434 ;;
 17435                           
 17436                           	psect	text60
 17437  007382                     __ptext60:
 17438                           	opt stack 0
 17439  007382                     _strchr:
 17440                           	opt stack 0
 17441  007382  FFFF               	dw	65535	; assembler added errata NOP
 17442                           
 17443                           ; BSR set to: 0
 17444                           ;incstack = 0
 17445  007384  C080  FFD9         	movff	strchr@ptr,fsr2l
 17446  007388  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 17447  00738C  0100               	movlb	0	; () banked
 17448  00738E  5182               	movf	strchr@chr& (0+255),w,b
 17449  007390  18DE               	xorwf	postinc2,w,c
 17450  007392  A4D8               	btfss	status,2,c
 17451  007394  D005               	goto	l1723
 17452                           
 17453                           ; BSR set to: 0
 17454  007396  C080  F080         	movff	strchr@ptr,?_strchr
 17455  00739A  C081  F081         	movff	strchr@ptr+1,?_strchr+1
 17456                           
 17457                           ; BSR set to: 0
 17458  00739E  D00E               	goto	l4892
 17459  0073A0                     l1723:
 17460  0073A0  FFFF               	dw	65535	; assembler added errata NOP
 17461                           
 17462                           ; BSR set to: 0
 17463                           
 17464                           ; BSR set to: 0
 17465  0073A2  C080  FFD9         	movff	strchr@ptr,fsr2l
 17466  0073A6  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 17467  0073AA  4B80               	infsnz	strchr@ptr& (0+255),f,b
 17468  0073AC  2B81               	incf	(strchr@ptr+1)& (0+255),f,b
 17469  0073AE  50DF               	movf	indf2,w,c
 17470  0073B0  A4D8               	btfss	status,2,c
 17471  0073B2  D7E7               	goto	_strchr
 17472                           
 17473                           ; BSR set to: 0
 17474                           
 17475                           ; BSR set to: 0
 17476  0073B4  0E00               	movlw	0
 17477  0073B6  6F80               	movwf	?_strchr& (0+255),b
 17478  0073B8  0E00               	movlw	0
 17479  0073BA  6F81               	movwf	(?_strchr+1)& (0+255),b
 17480  0073BC                     l4892:
 17481  0073BC  FFFF               	dw	65535	; assembler added errata NOP
 17482                           
 17483                           ; BSR set to: 0
 17484                           
 17485                           ; BSR set to: 0
 17486  0073BE  0012               	return		;funcret
 17487  0073C0  FFFF               	dw	65535	; errata NOP
 17488  0073C2                     __end_of_strchr:
 17489                           	opt stack 0
 17490                           tosu	equ	0xFFF
 17491                           tosh	equ	0xFFE
 17492                           tosl	equ	0xFFD
 17493                           pclath	equ	0xFFA
 17494                           tblptru	equ	0xFF8
 17495                           tblptrh	equ	0xFF7
 17496                           tblptrl	equ	0xFF6
 17497                           tablat	equ	0xFF5
 17498                           prodh	equ	0xFF4
 17499                           prodl	equ	0xFF3
 17500                           intcon	equ	0xFF2
 17501                           indf0	equ	0xFEF
 17502                           postinc0	equ	0xFEE
 17503                           fsr0h	equ	0xFEA
 17504                           fsr0l	equ	0xFE9
 17505                           wreg	equ	0xFE8
 17506                           postdec1	equ	0xFE5
 17507                           fsr1l	equ	0xFE1
 17508                           indf2	equ	0xFDF
 17509                           postinc2	equ	0xFDE
 17510                           postdec2	equ	0xFDD
 17511                           fsr2h	equ	0xFDA
 17512                           fsr2l	equ	0xFD9
 17513                           status	equ	0xFD8
 17514                           
 17515 ;; *************** function _delay *****************
 17516 ;; Defined at:
 17517 ;;		line 16 in file "function.c"
 17518 ;; Parameters:    Size  Location     Type
 17519 ;;  x               2    0[BANK0 ] int 
 17520 ;; Auto vars:     Size  Location     Type
 17521 ;;		None
 17522 ;; Return value:  Size  Location     Type
 17523 ;;                  1    wreg      void 
 17524 ;; Registers used:
 17525 ;;		wreg, status,2, status,0
 17526 ;; Tracked objects:
 17527 ;;		On entry : 0/0
 17528 ;;		On exit  : 0/0
 17529 ;;		Unchanged: 0/0
 17530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17531 ;;      Params:         0       2       0       0       0       0       0
 17532 ;;      Locals:         0       0       0       0       0       0       0
 17533 ;;      Temps:          0       1       0       0       0       0       0
 17534 ;;      Totals:         0       3       0       0       0       0       0
 17535 ;;Total ram usage:        3 bytes
 17536 ;; Hardware stack levels used:    1
 17537 ;; Hardware stack levels required when called:    6
 17538 ;; This function calls:
 17539 ;;		Nothing
 17540 ;; This function is called by:
 17541 ;;		_aguardaBuffer
 17542 ;;		_limparBuffer
 17543 ;;		_getSinalSIM800L
 17544 ;;		_comunicarTeste
 17545 ;;		_enviaSMS
 17546 ;;		_writeEEPROM_ext
 17547 ;;		_partidaBombaEstacionaria
 17548 ;;		_main
 17549 ;; This function uses a non-reentrant model
 17550 ;;
 17551                           
 17552                           	psect	text61
 17553  0070D0                     __ptext61:
 17554                           	opt stack 0
 17555  0070D0                     _delay:
 17556                           	opt stack 0
 17557  0070D0  FFFF               	dw	65535	; assembler added errata NOP
 17558                           
 17559                           ;function.c: 17: while (x--) {
 17560                           
 17561                           ; BSR set to: 0
 17562                           ;incstack = 0
 17563  0070D2  D00C               	goto	l988
 17564  0070D4  FFFF               	dw	65535	; assembler added errata NOP
 17565  0070D6                     l4918:
 17566                           
 17567                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 17568  0070D6  0E02               	movlw	2
 17569  0070D8  0100               	movlb	0	; () banked
 17570  0070DA  6F82               	movwf	??_delay& (0+255),b
 17571  0070DC  0EF2               	movlw	242
 17572  0070DE                     u8927:
 17573  0070DE  FFFF               	dw	65535	; errata NOP
 17574  0070E0  2EE8               	decfsz	wreg,f,c
 17575  0070E2  D7FD               	bra	u8927
 17576  0070E4  2F82               	decfsz	??_delay& (0+255),f,b
 17577  0070E6  D7FB               	bra	u8927
 17578  0070E8  F000               	nop	
 17579  0070EA  0004               	clrwdt		;# 
 17580  0070EC                     l988:
 17581  0070EC  FFFF               	dw	65535	; assembler added errata NOP
 17582  0070EE  0100               	movlb	0	; () banked
 17583  0070F0  0780               	decf	delay@x& (0+255),f,b
 17584  0070F2  A0D8               	btfss	status,0,c
 17585  0070F4  0781               	decf	(delay@x+1)& (0+255),f,b
 17586  0070F6  2980               	incf	delay@x& (0+255),w,b
 17587  0070F8  E1EE               	bnz	l4918
 17588  0070FA  2981               	incf	(delay@x+1)& (0+255),w,b
 17589  0070FC  B4D8               	btfsc	status,2,c
 17590                           
 17591                           ; BSR set to: 0
 17592                           
 17593                           ; BSR set to: 0
 17594  0070FE  0012               	return		;funcret
 17595  007100  FFFF               	dw	65535	; assembler added errata NOP
 17596  007102  D7E8               	goto	l989
 17597  007104  FFFF               	dw	65535	; errata NOP
 17598  007106                     __end_of_delay:
 17599                           	opt stack 0
 17600                           tosu	equ	0xFFF
 17601                           tosh	equ	0xFFE
 17602                           tosl	equ	0xFFD
 17603                           pclath	equ	0xFFA
 17604                           tblptru	equ	0xFF8
 17605                           tblptrh	equ	0xFF7
 17606                           tblptrl	equ	0xFF6
 17607                           tablat	equ	0xFF5
 17608                           prodh	equ	0xFF4
 17609                           prodl	equ	0xFF3
 17610                           intcon	equ	0xFF2
 17611                           indf0	equ	0xFEF
 17612                           postinc0	equ	0xFEE
 17613                           fsr0h	equ	0xFEA
 17614                           fsr0l	equ	0xFE9
 17615                           wreg	equ	0xFE8
 17616                           postdec1	equ	0xFE5
 17617                           fsr1l	equ	0xFE1
 17618                           indf2	equ	0xFDF
 17619                           postinc2	equ	0xFDE
 17620                           postdec2	equ	0xFDD
 17621                           fsr2h	equ	0xFDA
 17622                           fsr2l	equ	0xFD9
 17623                           status	equ	0xFD8
 17624                           
 17625 ;; *************** function _RTC_Init *****************
 17626 ;; Defined at:
 17627 ;;		line 98 in file "ds1307.h"
 17628 ;; Parameters:    Size  Location     Type
 17629 ;;		None
 17630 ;; Auto vars:     Size  Location     Type
 17631 ;;		None
 17632 ;; Return value:  Size  Location     Type
 17633 ;;                  1    wreg      void 
 17634 ;; Registers used:
 17635 ;;		wreg, status,2, status,0, cstack
 17636 ;; Tracked objects:
 17637 ;;		On entry : 0/0
 17638 ;;		On exit  : 0/0
 17639 ;;		Unchanged: 0/0
 17640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17641 ;;      Params:         0       0       0       0       0       0       0
 17642 ;;      Locals:         0       0       0       0       0       0       0
 17643 ;;      Temps:          0       0       0       0       0       0       0
 17644 ;;      Totals:         0       0       0       0       0       0       0
 17645 ;;Total ram usage:        0 bytes
 17646 ;; Hardware stack levels used:    1
 17647 ;; Hardware stack levels required when called:    8
 17648 ;; This function calls:
 17649 ;;		_I2C_Start
 17650 ;;		_I2C_Stop
 17651 ;;		_I2C_Write
 17652 ;; This function is called by:
 17653 ;;		_main
 17654 ;; This function uses a non-reentrant model
 17655 ;;
 17656                           
 17657                           	psect	text62
 17658  007172                     __ptext62:
 17659                           	opt stack 0
 17660  007172                     _RTC_Init:
 17661                           	opt stack 0
 17662  007172  FFFF               	dw	65535	; assembler added errata NOP
 17663                           
 17664                           ;ds1307.h: 100: I2C_Start();
 17665                           
 17666                           ; BSR set to: 0
 17667                           ;incstack = 0
 17668  007174  EC1A  F037         	call	_I2C_Start	;wreg free
 17669                           
 17670                           ;ds1307.h: 101: I2C_Write(0xD0);
 17671  007178  0E00               	movlw	0
 17672  00717A  0100               	movlb	0	; () banked
 17673  00717C  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 17674  00717E  0ED0               	movlw	208
 17675  007180  6F8A               	movwf	I2C_Write@d& (0+255),b
 17676  007182  EC33  F037         	call	_I2C_Write	;wreg free
 17677                           
 17678                           ;ds1307.h: 102: I2C_Write(0x07);
 17679  007186  0E00               	movlw	0
 17680  007188  0100               	movlb	0	; () banked
 17681  00718A  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 17682  00718C  0E07               	movlw	7
 17683  00718E  6F8A               	movwf	I2C_Write@d& (0+255),b
 17684  007190  EC33  F037         	call	_I2C_Write	;wreg free
 17685                           
 17686                           ;ds1307.h: 103: I2C_Write(0x00);
 17687  007194  0E00               	movlw	0
 17688  007196  0100               	movlb	0	; () banked
 17689  007198  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 17690  00719A  0E00               	movlw	0
 17691  00719C  6F8A               	movwf	I2C_Write@d& (0+255),b
 17692  00719E  EC33  F037         	call	_I2C_Write	;wreg free
 17693                           
 17694                           ;ds1307.h: 104: I2C_Stop();
 17695  0071A2  EC20  F037         	call	_I2C_Stop	;wreg free
 17696  0071A6  0012               	return		;funcret
 17697  0071A8  FFFF               	dw	65535	; errata NOP
 17698  0071AA                     __end_of_RTC_Init:
 17699                           	opt stack 0
 17700                           tosu	equ	0xFFF
 17701                           tosh	equ	0xFFE
 17702                           tosl	equ	0xFFD
 17703                           pclath	equ	0xFFA
 17704                           tblptru	equ	0xFF8
 17705                           tblptrh	equ	0xFF7
 17706                           tblptrl	equ	0xFF6
 17707                           tablat	equ	0xFF5
 17708                           prodh	equ	0xFF4
 17709                           prodl	equ	0xFF3
 17710                           intcon	equ	0xFF2
 17711                           indf0	equ	0xFEF
 17712                           postinc0	equ	0xFEE
 17713                           fsr0h	equ	0xFEA
 17714                           fsr0l	equ	0xFE9
 17715                           wreg	equ	0xFE8
 17716                           postdec1	equ	0xFE5
 17717                           fsr1l	equ	0xFE1
 17718                           indf2	equ	0xFDF
 17719                           postinc2	equ	0xFDE
 17720                           postdec2	equ	0xFDD
 17721                           fsr2h	equ	0xFDA
 17722                           fsr2l	equ	0xFD9
 17723                           status	equ	0xFD8
 17724                           
 17725 ;; *************** function _I2C_Write *****************
 17726 ;; Defined at:
 17727 ;;		line 42 in file "I2C.c"
 17728 ;; Parameters:    Size  Location     Type
 17729 ;;  d               2   10[BANK0 ] unsigned int 
 17730 ;; Auto vars:     Size  Location     Type
 17731 ;;		None
 17732 ;; Return value:  Size  Location     Type
 17733 ;;                  1    wreg      void 
 17734 ;; Registers used:
 17735 ;;		wreg, status,2, status,0, cstack
 17736 ;; Tracked objects:
 17737 ;;		On entry : 0/0
 17738 ;;		On exit  : 0/0
 17739 ;;		Unchanged: 0/0
 17740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17741 ;;      Params:         0       2       0       0       0       0       0
 17742 ;;      Locals:         0       0       0       0       0       0       0
 17743 ;;      Temps:          0       0       0       0       0       0       0
 17744 ;;      Totals:         0       2       0       0       0       0       0
 17745 ;;Total ram usage:        2 bytes
 17746 ;; Hardware stack levels used:    1
 17747 ;; Hardware stack levels required when called:    7
 17748 ;; This function calls:
 17749 ;;		_I2C_Wait
 17750 ;; This function is called by:
 17751 ;;		_setDS1307TimeDate
 17752 ;;		_getDS1307TimeDate
 17753 ;;		_RTC_Init
 17754 ;;		_writeEEPROM_ext
 17755 ;;		_readEEPROM_ext
 17756 ;;		_getDS1307Time
 17757 ;;		_setDS1307Time
 17758 ;; This function uses a non-reentrant model
 17759 ;;
 17760                           
 17761                           	psect	text63
 17762  006E66                     __ptext63:
 17763                           	opt stack 0
 17764  006E66                     _I2C_Write:
 17765                           	opt stack 0
 17766  006E66  FFFF               	dw	65535	; assembler added errata NOP
 17767                           
 17768                           ;I2C.c: 43: I2C_Wait();
 17769                           
 17770                           ;incstack = 0
 17771  006E68  EC6B  F037         	call	_I2C_Wait	;wreg free
 17772                           
 17773                           ;I2C.c: 44: SSPBUF = d;
 17774  006E6C  C08A  FFC9         	movff	I2C_Write@d,4041	;volatile
 17775  006E70  0012               	return		;funcret
 17776  006E72  FFFF               	dw	65535	; errata NOP
 17777  006E74                     __end_of_I2C_Write:
 17778                           	opt stack 0
 17779                           tosu	equ	0xFFF
 17780                           tosh	equ	0xFFE
 17781                           tosl	equ	0xFFD
 17782                           pclath	equ	0xFFA
 17783                           tblptru	equ	0xFF8
 17784                           tblptrh	equ	0xFF7
 17785                           tblptrl	equ	0xFF6
 17786                           tablat	equ	0xFF5
 17787                           prodh	equ	0xFF4
 17788                           prodl	equ	0xFF3
 17789                           intcon	equ	0xFF2
 17790                           indf0	equ	0xFEF
 17791                           postinc0	equ	0xFEE
 17792                           fsr0h	equ	0xFEA
 17793                           fsr0l	equ	0xFE9
 17794                           wreg	equ	0xFE8
 17795                           postdec1	equ	0xFE5
 17796                           fsr1l	equ	0xFE1
 17797                           indf2	equ	0xFDF
 17798                           postinc2	equ	0xFDE
 17799                           postdec2	equ	0xFDD
 17800                           fsr2h	equ	0xFDA
 17801                           fsr2l	equ	0xFD9
 17802                           status	equ	0xFD8
 17803                           
 17804 ;; *************** function _I2C_Stop *****************
 17805 ;; Defined at:
 17806 ;;		line 36 in file "I2C.c"
 17807 ;; Parameters:    Size  Location     Type
 17808 ;;		None
 17809 ;; Auto vars:     Size  Location     Type
 17810 ;;		None
 17811 ;; Return value:  Size  Location     Type
 17812 ;;                  1    wreg      void 
 17813 ;; Registers used:
 17814 ;;		wreg, status,2, status,0, cstack
 17815 ;; Tracked objects:
 17816 ;;		On entry : 0/0
 17817 ;;		On exit  : 0/0
 17818 ;;		Unchanged: 0/0
 17819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17820 ;;      Params:         0       0       0       0       0       0       0
 17821 ;;      Locals:         0       0       0       0       0       0       0
 17822 ;;      Temps:          0       0       0       0       0       0       0
 17823 ;;      Totals:         0       0       0       0       0       0       0
 17824 ;;Total ram usage:        0 bytes
 17825 ;; Hardware stack levels used:    1
 17826 ;; Hardware stack levels required when called:    7
 17827 ;; This function calls:
 17828 ;;		_I2C_Wait
 17829 ;; This function is called by:
 17830 ;;		_setDS1307TimeDate
 17831 ;;		_getDS1307TimeDate
 17832 ;;		_RTC_Init
 17833 ;;		_writeEEPROM_ext
 17834 ;;		_readEEPROM_ext
 17835 ;;		_getDS1307Time
 17836 ;;		_setDS1307Time
 17837 ;; This function uses a non-reentrant model
 17838 ;;
 17839                           
 17840                           	psect	text64
 17841  006E40                     __ptext64:
 17842                           	opt stack 0
 17843  006E40                     _I2C_Stop:
 17844                           	opt stack 0
 17845  006E40  FFFF               	dw	65535	; assembler added errata NOP
 17846                           
 17847                           ;I2C.c: 37: I2C_Wait();
 17848                           
 17849                           ;incstack = 0
 17850  006E42  EC6B  F037         	call	_I2C_Wait	;wreg free
 17851                           
 17852                           ;I2C.c: 38: PEN = 1;
 17853  006E46  84C5               	bsf	4037,2,c	;volatile
 17854  006E48  0012               	return		;funcret
 17855  006E4A  FFFF               	dw	65535	; errata NOP
 17856  006E4C                     __end_of_I2C_Stop:
 17857                           	opt stack 0
 17858                           tosu	equ	0xFFF
 17859                           tosh	equ	0xFFE
 17860                           tosl	equ	0xFFD
 17861                           pclath	equ	0xFFA
 17862                           tblptru	equ	0xFF8
 17863                           tblptrh	equ	0xFF7
 17864                           tblptrl	equ	0xFF6
 17865                           tablat	equ	0xFF5
 17866                           prodh	equ	0xFF4
 17867                           prodl	equ	0xFF3
 17868                           intcon	equ	0xFF2
 17869                           indf0	equ	0xFEF
 17870                           postinc0	equ	0xFEE
 17871                           fsr0h	equ	0xFEA
 17872                           fsr0l	equ	0xFE9
 17873                           wreg	equ	0xFE8
 17874                           postdec1	equ	0xFE5
 17875                           fsr1l	equ	0xFE1
 17876                           indf2	equ	0xFDF
 17877                           postinc2	equ	0xFDE
 17878                           postdec2	equ	0xFDD
 17879                           fsr2h	equ	0xFDA
 17880                           fsr2l	equ	0xFD9
 17881                           status	equ	0xFD8
 17882                           
 17883 ;; *************** function _I2C_Start *****************
 17884 ;; Defined at:
 17885 ;;		line 26 in file "I2C.c"
 17886 ;; Parameters:    Size  Location     Type
 17887 ;;		None
 17888 ;; Auto vars:     Size  Location     Type
 17889 ;;		None
 17890 ;; Return value:  Size  Location     Type
 17891 ;;                  1    wreg      void 
 17892 ;; Registers used:
 17893 ;;		wreg, status,2, status,0, cstack
 17894 ;; Tracked objects:
 17895 ;;		On entry : 0/0
 17896 ;;		On exit  : 0/0
 17897 ;;		Unchanged: 0/0
 17898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17899 ;;      Params:         0       0       0       0       0       0       0
 17900 ;;      Locals:         0       0       0       0       0       0       0
 17901 ;;      Temps:          0       0       0       0       0       0       0
 17902 ;;      Totals:         0       0       0       0       0       0       0
 17903 ;;Total ram usage:        0 bytes
 17904 ;; Hardware stack levels used:    1
 17905 ;; Hardware stack levels required when called:    7
 17906 ;; This function calls:
 17907 ;;		_I2C_Wait
 17908 ;; This function is called by:
 17909 ;;		_setDS1307TimeDate
 17910 ;;		_getDS1307TimeDate
 17911 ;;		_RTC_Init
 17912 ;;		_writeEEPROM_ext
 17913 ;;		_readEEPROM_ext
 17914 ;;		_getDS1307Time
 17915 ;;		_setDS1307Time
 17916 ;; This function uses a non-reentrant model
 17917 ;;
 17918                           
 17919                           	psect	text65
 17920  006E34                     __ptext65:
 17921                           	opt stack 0
 17922  006E34                     _I2C_Start:
 17923                           	opt stack 0
 17924  006E34  FFFF               	dw	65535	; assembler added errata NOP
 17925                           
 17926                           ;I2C.c: 27: I2C_Wait();
 17927                           
 17928                           ;incstack = 0
 17929  006E36  EC6B  F037         	call	_I2C_Wait	;wreg free
 17930                           
 17931                           ;I2C.c: 28: SEN = 1;
 17932  006E3A  80C5               	bsf	4037,0,c	;volatile
 17933  006E3C  0012               	return		;funcret
 17934  006E3E  FFFF               	dw	65535	; errata NOP
 17935  006E40                     __end_of_I2C_Start:
 17936                           	opt stack 0
 17937                           tosu	equ	0xFFF
 17938                           tosh	equ	0xFFE
 17939                           tosl	equ	0xFFD
 17940                           pclath	equ	0xFFA
 17941                           tblptru	equ	0xFF8
 17942                           tblptrh	equ	0xFF7
 17943                           tblptrl	equ	0xFF6
 17944                           tablat	equ	0xFF5
 17945                           prodh	equ	0xFF4
 17946                           prodl	equ	0xFF3
 17947                           intcon	equ	0xFF2
 17948                           indf0	equ	0xFEF
 17949                           postinc0	equ	0xFEE
 17950                           fsr0h	equ	0xFEA
 17951                           fsr0l	equ	0xFE9
 17952                           wreg	equ	0xFE8
 17953                           postdec1	equ	0xFE5
 17954                           fsr1l	equ	0xFE1
 17955                           indf2	equ	0xFDF
 17956                           postinc2	equ	0xFDE
 17957                           postdec2	equ	0xFDD
 17958                           fsr2h	equ	0xFDA
 17959                           fsr2l	equ	0xFD9
 17960                           status	equ	0xFD8
 17961                           
 17962 ;; *************** function _I2C_Wait *****************
 17963 ;; Defined at:
 17964 ;;		line 22 in file "I2C.c"
 17965 ;; Parameters:    Size  Location     Type
 17966 ;;		None
 17967 ;; Auto vars:     Size  Location     Type
 17968 ;;		None
 17969 ;; Return value:  Size  Location     Type
 17970 ;;                  1    wreg      void 
 17971 ;; Registers used:
 17972 ;;		wreg, status,2, status,0
 17973 ;; Tracked objects:
 17974 ;;		On entry : 0/0
 17975 ;;		On exit  : 0/0
 17976 ;;		Unchanged: 0/0
 17977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17978 ;;      Params:         0       0       0       0       0       0       0
 17979 ;;      Locals:         0       0       0       0       0       0       0
 17980 ;;      Temps:          0       1       0       0       0       0       0
 17981 ;;      Totals:         0       1       0       0       0       0       0
 17982 ;;Total ram usage:        1 bytes
 17983 ;; Hardware stack levels used:    1
 17984 ;; Hardware stack levels required when called:    6
 17985 ;; This function calls:
 17986 ;;		Nothing
 17987 ;; This function is called by:
 17988 ;;		_I2C_Start
 17989 ;;		_I2C_Restart
 17990 ;;		_I2C_Stop
 17991 ;;		_I2C_Write
 17992 ;;		_I2C_Read
 17993 ;; This function uses a non-reentrant model
 17994 ;;
 17995                           
 17996                           	psect	text66
 17997  006ED6                     __ptext66:
 17998                           	opt stack 0
 17999  006ED6                     _I2C_Wait:
 18000                           	opt stack 0
 18001  006ED6  FFFF               	dw	65535	; assembler added errata NOP
 18002                           
 18003                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 18004                           
 18005                           ;incstack = 0
 18006  006ED8  B4C7               	btfsc	4039,2,c	;volatile
 18007  006EDA  D7FD               	goto	_I2C_Wait
 18008  006EDC  CFC5 F080          	movff	4037,??_I2C_Wait	;volatile
 18009  006EE0  0E1F               	movlw	31
 18010  006EE2  0100               	movlb	0	; () banked
 18011  006EE4  1780               	andwf	??_I2C_Wait& (0+255),f,b
 18012  006EE6  B4D8               	btfsc	status,2,c
 18013                           
 18014                           ; BSR set to: 0
 18015                           
 18016                           ; BSR set to: 0
 18017  006EE8  0012               	return		;funcret
 18018  006EEA  FFFF               	dw	65535	; assembler added errata NOP
 18019  006EEC  D7F4               	goto	_I2C_Wait
 18020  006EEE  FFFF               	dw	65535	; errata NOP
 18021  006EF0                     __end_of_I2C_Wait:
 18022                           	opt stack 0
 18023                           tosu	equ	0xFFF
 18024                           tosh	equ	0xFFE
 18025                           tosl	equ	0xFFD
 18026                           pclath	equ	0xFFA
 18027                           tblptru	equ	0xFF8
 18028                           tblptrh	equ	0xFF7
 18029                           tblptrl	equ	0xFF6
 18030                           tablat	equ	0xFF5
 18031                           prodh	equ	0xFF4
 18032                           prodl	equ	0xFF3
 18033                           intcon	equ	0xFF2
 18034                           indf0	equ	0xFEF
 18035                           postinc0	equ	0xFEE
 18036                           fsr0h	equ	0xFEA
 18037                           fsr0l	equ	0xFE9
 18038                           wreg	equ	0xFE8
 18039                           postdec1	equ	0xFE5
 18040                           fsr1l	equ	0xFE1
 18041                           indf2	equ	0xFDF
 18042                           postinc2	equ	0xFDE
 18043                           postdec2	equ	0xFDD
 18044                           fsr2h	equ	0xFDA
 18045                           fsr2l	equ	0xFD9
 18046                           status	equ	0xFD8
 18047                           
 18048 ;; *************** function _Lcd_Init *****************
 18049 ;; Defined at:
 18050 ;;		line 12 in file "lcd.h"
 18051 ;; Parameters:    Size  Location     Type
 18052 ;;		None
 18053 ;; Auto vars:     Size  Location     Type
 18054 ;;		None
 18055 ;; Return value:  Size  Location     Type
 18056 ;;                  1    wreg      void 
 18057 ;; Registers used:
 18058 ;;		wreg, status,2, cstack
 18059 ;; Tracked objects:
 18060 ;;		On entry : 0/0
 18061 ;;		On exit  : 0/0
 18062 ;;		Unchanged: 0/0
 18063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18064 ;;      Params:         0       0       0       0       0       0       0
 18065 ;;      Locals:         0       0       0       0       0       0       0
 18066 ;;      Temps:          0       1       0       0       0       0       0
 18067 ;;      Totals:         0       1       0       0       0       0       0
 18068 ;;Total ram usage:        1 bytes
 18069 ;; Hardware stack levels used:    1
 18070 ;; Hardware stack levels required when called:    8
 18071 ;; This function calls:
 18072 ;;		_Lcd_Cmd
 18073 ;;		_Lcd_Port
 18074 ;; This function is called by:
 18075 ;;		_main
 18076 ;; This function uses a non-reentrant model
 18077 ;;
 18078                           
 18079                           	psect	text67
 18080  007A72                     __ptext67:
 18081                           	opt stack 0
 18082  007A72                     _Lcd_Init:
 18083                           	opt stack 0
 18084  007A72  FFFF               	dw	65535	; assembler added errata NOP
 18085                           
 18086                           ;lcd.h: 21: Lcd_Port(0x00);
 18087                           
 18088                           ; BSR set to: 0
 18089                           ;incstack = 0
 18090  007A74  0E00               	movlw	0
 18091  007A76  EC44  F03A         	call	_Lcd_Port
 18092                           
 18093                           ;lcd.h: 22: _delay((unsigned long)((30)*(8000000/4000.0)));
 18094  007A7A  0E3B               	movlw	59
 18095  007A7C  0100               	movlb	0	; () banked
 18096  007A7E  6F83               	movwf	??_Lcd_Init& (0+255),b
 18097  007A80  0E79               	movlw	121
 18098  007A82                     u8937:
 18099  007A82  FFFF               	dw	65535	; errata NOP
 18100  007A84  2EE8               	decfsz	wreg,f,c
 18101  007A86  D7FD               	bra	u8937
 18102  007A88  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18103  007A8A  D7FB               	bra	u8937
 18104  007A8C  D000               	nop2	
 18105  007A8E  F000               	nop	
 18106                           
 18107                           ;lcd.h: 23: Lcd_Cmd(0x03);
 18108  007A90  0E03               	movlw	3
 18109  007A92  ECD5  F037         	call	_Lcd_Cmd
 18110                           
 18111                           ;lcd.h: 24: _delay((unsigned long)((15)*(8000000/4000.0)));
 18112  007A96  0E1E               	movlw	30
 18113  007A98  0100               	movlb	0	; () banked
 18114  007A9A  6F83               	movwf	??_Lcd_Init& (0+255),b
 18115  007A9C  0E3C               	movlw	60
 18116  007A9E                     u8947:
 18117  007A9E  FFFF               	dw	65535	; errata NOP
 18118  007AA0  2EE8               	decfsz	wreg,f,c
 18119  007AA2  D7FD               	bra	u8947
 18120  007AA4  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18121  007AA6  D7FB               	bra	u8947
 18122  007AA8  F000               	nop	
 18123                           
 18124                           ;lcd.h: 25: Lcd_Cmd(0x03);
 18125  007AAA  0E03               	movlw	3
 18126  007AAC  ECD5  F037         	call	_Lcd_Cmd
 18127                           
 18128                           ;lcd.h: 26: _delay((unsigned long)((20)*(8000000/4000.0)));
 18129  007AB0  0E27               	movlw	39
 18130  007AB2  0100               	movlb	0	; () banked
 18131  007AB4  6F83               	movwf	??_Lcd_Init& (0+255),b
 18132  007AB6  0EFB               	movlw	251
 18133  007AB8                     u8957:
 18134  007AB8  FFFF               	dw	65535	; errata NOP
 18135  007ABA  2EE8               	decfsz	wreg,f,c
 18136  007ABC  D7FD               	bra	u8957
 18137  007ABE  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18138  007AC0  D7FB               	bra	u8957
 18139  007AC2  D000               	nop2	
 18140  007AC4  F000               	nop	
 18141                           
 18142                           ;lcd.h: 27: Lcd_Cmd(0x03);
 18143  007AC6  0E03               	movlw	3
 18144  007AC8  ECD5  F037         	call	_Lcd_Cmd
 18145                           
 18146                           ;lcd.h: 29: Lcd_Cmd(0x02);
 18147  007ACC  0E02               	movlw	2
 18148  007ACE  ECD5  F037         	call	_Lcd_Cmd
 18149                           
 18150                           ;lcd.h: 30: Lcd_Cmd(0x02);
 18151  007AD2  0E02               	movlw	2
 18152  007AD4  ECD5  F037         	call	_Lcd_Cmd
 18153                           
 18154                           ;lcd.h: 31: Lcd_Cmd(0x08);
 18155  007AD8  0E08               	movlw	8
 18156  007ADA  ECD5  F037         	call	_Lcd_Cmd
 18157                           
 18158                           ;lcd.h: 32: Lcd_Cmd(0x00);
 18159  007ADE  0E00               	movlw	0
 18160  007AE0  ECD5  F037         	call	_Lcd_Cmd
 18161                           
 18162                           ;lcd.h: 33: Lcd_Cmd(0x0C);
 18163  007AE4  0E0C               	movlw	12
 18164  007AE6  ECD5  F037         	call	_Lcd_Cmd
 18165                           
 18166                           ;lcd.h: 34: Lcd_Cmd(0x00);
 18167  007AEA  0E00               	movlw	0
 18168  007AEC  ECD5  F037         	call	_Lcd_Cmd
 18169                           
 18170                           ;lcd.h: 35: Lcd_Cmd(0x06);
 18171  007AF0  0E06               	movlw	6
 18172  007AF2  ECD5  F037         	call	_Lcd_Cmd
 18173  007AF6  0012               	return		;funcret
 18174  007AF8  FFFF               	dw	65535	; errata NOP
 18175  007AFA                     __end_of_Lcd_Init:
 18176                           	opt stack 0
 18177                           tosu	equ	0xFFF
 18178                           tosh	equ	0xFFE
 18179                           tosl	equ	0xFFD
 18180                           pclath	equ	0xFFA
 18181                           tblptru	equ	0xFF8
 18182                           tblptrh	equ	0xFF7
 18183                           tblptrl	equ	0xFF6
 18184                           tablat	equ	0xFF5
 18185                           prodh	equ	0xFF4
 18186                           prodl	equ	0xFF3
 18187                           intcon	equ	0xFF2
 18188                           indf0	equ	0xFEF
 18189                           postinc0	equ	0xFEE
 18190                           fsr0h	equ	0xFEA
 18191                           fsr0l	equ	0xFE9
 18192                           wreg	equ	0xFE8
 18193                           postdec1	equ	0xFE5
 18194                           fsr1l	equ	0xFE1
 18195                           indf2	equ	0xFDF
 18196                           postinc2	equ	0xFDE
 18197                           postdec2	equ	0xFDD
 18198                           fsr2h	equ	0xFDA
 18199                           fsr2l	equ	0xFD9
 18200                           status	equ	0xFD8
 18201                           
 18202 ;; *************** function _Lcd_Clear *****************
 18203 ;; Defined at:
 18204 ;;		line 68 in file "lcd.h"
 18205 ;; Parameters:    Size  Location     Type
 18206 ;;		None
 18207 ;; Auto vars:     Size  Location     Type
 18208 ;;		None
 18209 ;; Return value:  Size  Location     Type
 18210 ;;                  1    wreg      void 
 18211 ;; Registers used:
 18212 ;;		wreg, status,2, cstack
 18213 ;; Tracked objects:
 18214 ;;		On entry : 0/0
 18215 ;;		On exit  : 0/0
 18216 ;;		Unchanged: 0/0
 18217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18218 ;;      Params:         0       0       0       0       0       0       0
 18219 ;;      Locals:         0       0       0       0       0       0       0
 18220 ;;      Temps:          0       0       0       0       0       0       0
 18221 ;;      Totals:         0       0       0       0       0       0       0
 18222 ;;Total ram usage:        0 bytes
 18223 ;; Hardware stack levels used:    1
 18224 ;; Hardware stack levels required when called:    8
 18225 ;; This function calls:
 18226 ;;		_Lcd_Cmd
 18227 ;; This function is called by:
 18228 ;;		_main
 18229 ;; This function uses a non-reentrant model
 18230 ;;
 18231                           
 18232                           	psect	text68
 18233  006E82                     __ptext68:
 18234                           	opt stack 0
 18235  006E82                     _Lcd_Clear:
 18236                           	opt stack 0
 18237  006E82  FFFF               	dw	65535	; assembler added errata NOP
 18238                           
 18239                           ;lcd.h: 69: Lcd_Cmd(0);
 18240                           
 18241                           ;incstack = 0
 18242  006E84  0E00               	movlw	0
 18243  006E86  ECD5  F037         	call	_Lcd_Cmd
 18244                           
 18245                           ;lcd.h: 70: Lcd_Cmd(1);
 18246  006E8A  0E01               	movlw	1
 18247  006E8C  ECD5  F037         	call	_Lcd_Cmd
 18248  006E90  0012               	return		;funcret
 18249  006E92  FFFF               	dw	65535	; errata NOP
 18250  006E94                     __end_of_Lcd_Clear:
 18251                           	opt stack 0
 18252                           tosu	equ	0xFFF
 18253                           tosh	equ	0xFFE
 18254                           tosl	equ	0xFFD
 18255                           pclath	equ	0xFFA
 18256                           tblptru	equ	0xFF8
 18257                           tblptrh	equ	0xFF7
 18258                           tblptrl	equ	0xFF6
 18259                           tablat	equ	0xFF5
 18260                           prodh	equ	0xFF4
 18261                           prodl	equ	0xFF3
 18262                           intcon	equ	0xFF2
 18263                           indf0	equ	0xFEF
 18264                           postinc0	equ	0xFEE
 18265                           fsr0h	equ	0xFEA
 18266                           fsr0l	equ	0xFE9
 18267                           wreg	equ	0xFE8
 18268                           postdec1	equ	0xFE5
 18269                           fsr1l	equ	0xFE1
 18270                           indf2	equ	0xFDF
 18271                           postinc2	equ	0xFDE
 18272                           postdec2	equ	0xFDD
 18273                           fsr2h	equ	0xFDA
 18274                           fsr2l	equ	0xFD9
 18275                           status	equ	0xFD8
 18276                           
 18277 ;; *************** function _Lcd_Cmd *****************
 18278 ;; Defined at:
 18279 ;;		line 60 in file "lcd.h"
 18280 ;; Parameters:    Size  Location     Type
 18281 ;;  a               1    wreg     unsigned char 
 18282 ;; Auto vars:     Size  Location     Type
 18283 ;;  a               1    2[BANK0 ] unsigned char 
 18284 ;; Return value:  Size  Location     Type
 18285 ;;                  1    wreg      void 
 18286 ;; Registers used:
 18287 ;;		wreg, status,2, cstack
 18288 ;; Tracked objects:
 18289 ;;		On entry : 0/0
 18290 ;;		On exit  : 0/0
 18291 ;;		Unchanged: 0/0
 18292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18293 ;;      Params:         0       0       0       0       0       0       0
 18294 ;;      Locals:         0       1       0       0       0       0       0
 18295 ;;      Temps:          0       1       0       0       0       0       0
 18296 ;;      Totals:         0       2       0       0       0       0       0
 18297 ;;Total ram usage:        2 bytes
 18298 ;; Hardware stack levels used:    1
 18299 ;; Hardware stack levels required when called:    7
 18300 ;; This function calls:
 18301 ;;		_Lcd_Port
 18302 ;; This function is called by:
 18303 ;;		_Lcd_Init
 18304 ;;		_Lcd_Clear
 18305 ;;		_Lcd_Set_Cursor
 18306 ;;		_criarCaracteresCGRAM
 18307 ;; This function uses a non-reentrant model
 18308 ;;
 18309                           
 18310                           	psect	text69
 18311  006FAA                     __ptext69:
 18312                           	opt stack 0
 18313  006FAA                     _Lcd_Cmd:
 18314                           	opt stack 0
 18315  006FAA  FFFF               	dw	65535	; assembler added errata NOP
 18316                           
 18317                           ;incstack = 0
 18318                           ;Lcd_Cmd@a stored from wreg
 18319  006FAC  0100               	movlb	0	; () banked
 18320  006FAE  6F82               	movwf	Lcd_Cmd@a& (0+255),b
 18321                           
 18322                           ;lcd.h: 61: PORTDbits.RD1 = 0;
 18323  006FB0  9283               	bcf	3971,1,c	;volatile
 18324                           
 18325                           ;lcd.h: 62: Lcd_Port(a);
 18326  006FB2  0100               	movlb	0	; () banked
 18327  006FB4  5182               	movf	Lcd_Cmd@a& (0+255),w,b
 18328  006FB6  EC44  F03A         	call	_Lcd_Port
 18329                           
 18330                           ;lcd.h: 63: PORTDbits.RD0 = 1;
 18331  006FBA  8083               	bsf	3971,0,c	;volatile
 18332                           
 18333                           ;lcd.h: 64: _delay((unsigned long)((15)*(8000000/4000.0)));
 18334  006FBC  0E1E               	movlw	30
 18335  006FBE  0100               	movlb	0	; () banked
 18336  006FC0  6F81               	movwf	??_Lcd_Cmd& (0+255),b
 18337  006FC2  0E3C               	movlw	60
 18338  006FC4                     u8967:
 18339  006FC4  FFFF               	dw	65535	; errata NOP
 18340  006FC6  2EE8               	decfsz	wreg,f,c
 18341  006FC8  D7FD               	bra	u8967
 18342  006FCA  2F81               	decfsz	??_Lcd_Cmd& (0+255),f,b
 18343  006FCC  D7FB               	bra	u8967
 18344  006FCE  F000               	nop	
 18345                           
 18346                           ;lcd.h: 65: PORTDbits.RD0 = 0;
 18347  006FD0  9083               	bcf	3971,0,c	;volatile
 18348  006FD2  0012               	return		;funcret
 18349  006FD4  FFFF               	dw	65535	; errata NOP
 18350  006FD6                     __end_of_Lcd_Cmd:
 18351                           	opt stack 0
 18352                           tosu	equ	0xFFF
 18353                           tosh	equ	0xFFE
 18354                           tosl	equ	0xFFD
 18355                           pclath	equ	0xFFA
 18356                           tblptru	equ	0xFF8
 18357                           tblptrh	equ	0xFF7
 18358                           tblptrl	equ	0xFF6
 18359                           tablat	equ	0xFF5
 18360                           prodh	equ	0xFF4
 18361                           prodl	equ	0xFF3
 18362                           intcon	equ	0xFF2
 18363                           indf0	equ	0xFEF
 18364                           postinc0	equ	0xFEE
 18365                           fsr0h	equ	0xFEA
 18366                           fsr0l	equ	0xFE9
 18367                           wreg	equ	0xFE8
 18368                           postdec1	equ	0xFE5
 18369                           fsr1l	equ	0xFE1
 18370                           indf2	equ	0xFDF
 18371                           postinc2	equ	0xFDE
 18372                           postdec2	equ	0xFDD
 18373                           fsr2h	equ	0xFDA
 18374                           fsr2l	equ	0xFD9
 18375                           status	equ	0xFD8
 18376                           
 18377 ;; *************** function _Lcd_Port *****************
 18378 ;; Defined at:
 18379 ;;		line 38 in file "lcd.h"
 18380 ;; Parameters:    Size  Location     Type
 18381 ;;  a               1    wreg     unsigned char 
 18382 ;; Auto vars:     Size  Location     Type
 18383 ;;  a               1    0[BANK0 ] unsigned char 
 18384 ;; Return value:  Size  Location     Type
 18385 ;;                  1    wreg      void 
 18386 ;; Registers used:
 18387 ;;		wreg
 18388 ;; Tracked objects:
 18389 ;;		On entry : 0/0
 18390 ;;		On exit  : 0/0
 18391 ;;		Unchanged: 0/0
 18392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18393 ;;      Params:         0       0       0       0       0       0       0
 18394 ;;      Locals:         0       1       0       0       0       0       0
 18395 ;;      Temps:          0       0       0       0       0       0       0
 18396 ;;      Totals:         0       1       0       0       0       0       0
 18397 ;;Total ram usage:        1 bytes
 18398 ;; Hardware stack levels used:    1
 18399 ;; Hardware stack levels required when called:    6
 18400 ;; This function calls:
 18401 ;;		Nothing
 18402 ;; This function is called by:
 18403 ;;		_Lcd_Init
 18404 ;;		_Lcd_Cmd
 18405 ;;		_Lcd_Write_Char
 18406 ;; This function uses a non-reentrant model
 18407 ;;
 18408                           
 18409                           	psect	text70
 18410  007488                     __ptext70:
 18411                           	opt stack 0
 18412  007488                     _Lcd_Port:
 18413                           	opt stack 0
 18414  007488  FFFF               	dw	65535	; assembler added errata NOP
 18415                           
 18416                           ;incstack = 0
 18417                           ;Lcd_Port@a stored from wreg
 18418  00748A  0100               	movlb	0	; () banked
 18419  00748C  6F80               	movwf	Lcd_Port@a& (0+255),b
 18420                           
 18421                           ;lcd.h: 39: if (a & 1)
 18422  00748E  0100               	movlb	0	; () banked
 18423  007490  A180               	btfss	Lcd_Port@a& (0+255),0,b
 18424  007492  D002               	goto	l605
 18425                           
 18426                           ; BSR set to: 0
 18427                           ;lcd.h: 40: PORTDbits.RD2 = 1;
 18428  007494  8483               	bsf	3971,2,c	;volatile
 18429  007496  D002               	goto	l606
 18430  007498                     l605:
 18431  007498  FFFF               	dw	65535	; assembler added errata NOP
 18432                           
 18433                           ; BSR set to: 0
 18434                           ;lcd.h: 41: else
 18435                           ;lcd.h: 42: PORTDbits.RD2 = 0;
 18436  00749A  9483               	bcf	3971,2,c	;volatile
 18437  00749C                     l606:
 18438  00749C  FFFF               	dw	65535	; assembler added errata NOP
 18439                           
 18440                           ; BSR set to: 0
 18441                           ;lcd.h: 44: if (a & 2)
 18442                           
 18443                           ; BSR set to: 0
 18444  00749E  A380               	btfss	Lcd_Port@a& (0+255),1,b
 18445  0074A0  D002               	goto	l607
 18446                           
 18447                           ; BSR set to: 0
 18448                           ;lcd.h: 45: PORTDbits.RD3 = 1;
 18449  0074A2  8683               	bsf	3971,3,c	;volatile
 18450  0074A4  D002               	goto	l608
 18451  0074A6                     l607:
 18452  0074A6  FFFF               	dw	65535	; assembler added errata NOP
 18453                           
 18454                           ; BSR set to: 0
 18455                           ;lcd.h: 46: else
 18456                           ;lcd.h: 47: PORTDbits.RD3 = 0;
 18457  0074A8  9683               	bcf	3971,3,c	;volatile
 18458  0074AA                     l608:
 18459  0074AA  FFFF               	dw	65535	; assembler added errata NOP
 18460                           
 18461                           ; BSR set to: 0
 18462                           ;lcd.h: 49: if (a & 4)
 18463                           
 18464                           ; BSR set to: 0
 18465  0074AC  A580               	btfss	Lcd_Port@a& (0+255),2,b
 18466  0074AE  D002               	goto	l609
 18467                           
 18468                           ; BSR set to: 0
 18469                           ;lcd.h: 50: PORTDbits.RD4 = 1;
 18470  0074B0  8883               	bsf	3971,4,c	;volatile
 18471  0074B2  D002               	goto	l610
 18472  0074B4                     l609:
 18473  0074B4  FFFF               	dw	65535	; assembler added errata NOP
 18474                           
 18475                           ; BSR set to: 0
 18476                           ;lcd.h: 51: else
 18477                           ;lcd.h: 52: PORTDbits.RD4 = 0;
 18478  0074B6  9883               	bcf	3971,4,c	;volatile
 18479  0074B8                     l610:
 18480  0074B8  FFFF               	dw	65535	; assembler added errata NOP
 18481                           
 18482                           ; BSR set to: 0
 18483                           ;lcd.h: 54: if (a & 8)
 18484                           
 18485                           ; BSR set to: 0
 18486  0074BA  A780               	btfss	Lcd_Port@a& (0+255),3,b
 18487  0074BC  D002               	goto	l611
 18488                           
 18489                           ; BSR set to: 0
 18490                           ;lcd.h: 55: PORTDbits.RD5 = 1;
 18491  0074BE  8A83               	bsf	3971,5,c	;volatile
 18492  0074C0  D002               	goto	l612
 18493  0074C2                     l611:
 18494  0074C2  FFFF               	dw	65535	; assembler added errata NOP
 18495                           
 18496                           ; BSR set to: 0
 18497                           ;lcd.h: 56: else
 18498                           ;lcd.h: 57: PORTDbits.RD5 = 0;
 18499  0074C4  9A83               	bcf	3971,5,c	;volatile
 18500  0074C6                     l612:
 18501  0074C6  FFFF               	dw	65535	; assembler added errata NOP
 18502                           
 18503                           ; BSR set to: 0
 18504                           
 18505                           ; BSR set to: 0
 18506  0074C8  0012               	return		;funcret
 18507  0074CA  FFFF               	dw	65535	; errata NOP
 18508  0074CC                     __end_of_Lcd_Port:
 18509                           	opt stack 0
 18510                           tosu	equ	0xFFF
 18511                           tosh	equ	0xFFE
 18512                           tosl	equ	0xFFD
 18513                           pclath	equ	0xFFA
 18514                           tblptru	equ	0xFF8
 18515                           tblptrh	equ	0xFF7
 18516                           tblptrl	equ	0xFF6
 18517                           tablat	equ	0xFF5
 18518                           prodh	equ	0xFF4
 18519                           prodl	equ	0xFF3
 18520                           intcon	equ	0xFF2
 18521                           indf0	equ	0xFEF
 18522                           postinc0	equ	0xFEE
 18523                           fsr0h	equ	0xFEA
 18524                           fsr0l	equ	0xFE9
 18525                           wreg	equ	0xFE8
 18526                           postdec1	equ	0xFE5
 18527                           fsr1l	equ	0xFE1
 18528                           indf2	equ	0xFDF
 18529                           postinc2	equ	0xFDE
 18530                           postdec2	equ	0xFDD
 18531                           fsr2h	equ	0xFDA
 18532                           fsr2l	equ	0xFD9
 18533                           status	equ	0xFD8
 18534                           
 18535 ;; *************** function _I2C_Master_Init *****************
 18536 ;; Defined at:
 18537 ;;		line 13 in file "I2C.c"
 18538 ;; Parameters:    Size  Location     Type
 18539 ;;  c               4   13[BANK0 ] const unsigned long 
 18540 ;; Auto vars:     Size  Location     Type
 18541 ;;		None
 18542 ;; Return value:  Size  Location     Type
 18543 ;;                  1    wreg      void 
 18544 ;; Registers used:
 18545 ;;		wreg, status,2, status,0, cstack
 18546 ;; Tracked objects:
 18547 ;;		On entry : 0/0
 18548 ;;		On exit  : 0/0
 18549 ;;		Unchanged: 0/0
 18550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18551 ;;      Params:         0       4       0       0       0       0       0
 18552 ;;      Locals:         0       0       0       0       0       0       0
 18553 ;;      Temps:          0       4       0       0       0       0       0
 18554 ;;      Totals:         0       8       0       0       0       0       0
 18555 ;;Total ram usage:        8 bytes
 18556 ;; Hardware stack levels used:    1
 18557 ;; Hardware stack levels required when called:    7
 18558 ;; This function calls:
 18559 ;;		___lldiv
 18560 ;; This function is called by:
 18561 ;;		_main
 18562 ;; This function uses a non-reentrant model
 18563 ;;
 18564                           
 18565                           	psect	text71
 18566  0077B0                     __ptext71:
 18567                           	opt stack 0
 18568  0077B0                     _I2C_Master_Init:
 18569                           	opt stack 0
 18570  0077B0  FFFF               	dw	65535	; assembler added errata NOP
 18571                           
 18572                           ;I2C.c: 14: SSPCON1 = 0b00101000;
 18573                           
 18574                           ; BSR set to: 0
 18575                           ;incstack = 0
 18576  0077B2  0E28               	movlw	40
 18577  0077B4  6EC6               	movwf	4038,c	;volatile
 18578                           
 18579                           ;I2C.c: 15: SSPCON2 = 0;
 18580  0077B6  0E00               	movlw	0
 18581  0077B8  6EC5               	movwf	4037,c	;volatile
 18582                           
 18583                           ;I2C.c: 16: SSPADD = (8000000 / (4 * c)) - 1;
 18584  0077BA  0E00               	movlw	0
 18585  0077BC  0100               	movlb	0	; () banked
 18586  0077BE  6F80               	movwf	___lldiv@dividend& (0+255),b
 18587  0077C0  0E12               	movlw	18
 18588  0077C2  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 18589  0077C4  0E7A               	movlw	122
 18590  0077C6  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 18591  0077C8  0E00               	movlw	0
 18592  0077CA  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 18593  0077CC  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 18594  0077D0  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 18595  0077D4  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 18596  0077D8  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 18597  0077DC  0E02               	movlw	2
 18598  0077DE                     u8605:
 18599  0077DE  FFFF               	dw	65535	; assembler added errata NOP
 18600  0077E0  90D8               	bcf	status,0,c
 18601  0077E2  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 18602  0077E4  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 18603  0077E6  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 18604  0077E8  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 18605  0077EA  2EE8               	decfsz	wreg,f,c
 18606  0077EC  D7F8               	goto	u8605
 18607  0077EE  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 18608  0077F2  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 18609  0077F6  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 18610  0077FA  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 18611  0077FE  ECA6  F01F         	call	___lldiv	;wreg free
 18612  007802  0100               	movlb	0	; () banked
 18613  007804  0580               	decf	?___lldiv& (0+255),w,b
 18614  007806  6EC8               	movwf	4040,c	;volatile
 18615                           
 18616                           ; BSR set to: 0
 18617                           ;I2C.c: 17: SSPSTAT = 0;
 18618  007808  0E00               	movlw	0
 18619  00780A  6EC7               	movwf	4039,c	;volatile
 18620                           
 18621                           ; BSR set to: 0
 18622                           ;I2C.c: 18: TRISCbits.RC3 = 1;
 18623  00780C  8694               	bsf	3988,3,c	;volatile
 18624                           
 18625                           ; BSR set to: 0
 18626                           ;I2C.c: 19: TRISCbits.RC4 = 1;
 18627  00780E  8894               	bsf	3988,4,c	;volatile
 18628                           
 18629                           ; BSR set to: 0
 18630  007810  0012               	return		;funcret
 18631  007812  FFFF               	dw	65535	; errata NOP
 18632  007814                     __end_of_I2C_Master_Init:
 18633                           	opt stack 0
 18634                           tosu	equ	0xFFF
 18635                           tosh	equ	0xFFE
 18636                           tosl	equ	0xFFD
 18637                           pclath	equ	0xFFA
 18638                           tblptru	equ	0xFF8
 18639                           tblptrh	equ	0xFF7
 18640                           tblptrl	equ	0xFF6
 18641                           tablat	equ	0xFF5
 18642                           prodh	equ	0xFF4
 18643                           prodl	equ	0xFF3
 18644                           intcon	equ	0xFF2
 18645                           indf0	equ	0xFEF
 18646                           postinc0	equ	0xFEE
 18647                           fsr0h	equ	0xFEA
 18648                           fsr0l	equ	0xFE9
 18649                           wreg	equ	0xFE8
 18650                           postdec1	equ	0xFE5
 18651                           fsr1l	equ	0xFE1
 18652                           indf2	equ	0xFDF
 18653                           postinc2	equ	0xFDE
 18654                           postdec2	equ	0xFDD
 18655                           fsr2h	equ	0xFDA
 18656                           fsr2l	equ	0xFD9
 18657                           status	equ	0xFD8
 18658                           
 18659 ;; *************** function ___lldiv *****************
 18660 ;; Defined at:
 18661 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 18662 ;; Parameters:    Size  Location     Type
 18663 ;;  dividend        4    0[BANK0 ] unsigned long 
 18664 ;;  divisor         4    4[BANK0 ] unsigned long 
 18665 ;; Auto vars:     Size  Location     Type
 18666 ;;  quotient        4    8[BANK0 ] unsigned long 
 18667 ;;  counter         1   12[BANK0 ] unsigned char 
 18668 ;; Return value:  Size  Location     Type
 18669 ;;                  4    0[BANK0 ] unsigned long 
 18670 ;; Registers used:
 18671 ;;		wreg, status,2, status,0
 18672 ;; Tracked objects:
 18673 ;;		On entry : 0/0
 18674 ;;		On exit  : 0/0
 18675 ;;		Unchanged: 0/0
 18676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18677 ;;      Params:         0       8       0       0       0       0       0
 18678 ;;      Locals:         0       5       0       0       0       0       0
 18679 ;;      Temps:          0       0       0       0       0       0       0
 18680 ;;      Totals:         0      13       0       0       0       0       0
 18681 ;;Total ram usage:       13 bytes
 18682 ;; Hardware stack levels used:    1
 18683 ;; Hardware stack levels required when called:    6
 18684 ;; This function calls:
 18685 ;;		Nothing
 18686 ;; This function is called by:
 18687 ;;		_I2C_Master_Init
 18688 ;; This function uses a non-reentrant model
 18689 ;;
 18690                           
 18691                           	psect	text72
 18692  003F4C                     __ptext72:
 18693                           	opt stack 0
 18694  003F4C                     ___lldiv:
 18695                           	opt stack 0
 18696  003F4C  FFFF               	dw	65535	; assembler added errata NOP
 18697                           
 18698                           ; BSR set to: 0
 18699                           ;incstack = 0
 18700  003F4E  0E00               	movlw	0
 18701  003F50  0100               	movlb	0	; () banked
 18702  003F52  6F88               	movwf	___lldiv@quotient& (0+255),b
 18703  003F54  0E00               	movlw	0
 18704  003F56  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 18705  003F58  0E00               	movlw	0
 18706  003F5A  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 18707  003F5C  0E00               	movlw	0
 18708  003F5E  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 18709                           
 18710                           ; BSR set to: 0
 18711  003F60  5184               	movf	___lldiv@divisor& (0+255),w,b
 18712  003F62  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 18713  003F64  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 18714  003F66  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 18715  003F68  B4D8               	btfsc	status,2,c
 18716  003F6A  D02E               	goto	l1468
 18717                           
 18718                           ; BSR set to: 0
 18719  003F6C  0E01               	movlw	1
 18720  003F6E  6F8C               	movwf	___lldiv@counter& (0+255),b
 18721  003F70  D007               	goto	l1463
 18722  003F72  FFFF               	dw	65535	; assembler added errata NOP
 18723                           
 18724                           ; BSR set to: 0
 18725                           
 18726                           ; BSR set to: 0
 18727  003F74  90D8               	bcf	status,0,c
 18728  003F76  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 18729  003F78  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 18730  003F7A  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 18731  003F7C  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 18732  003F7E  2B8C               	incf	___lldiv@counter& (0+255),f,b
 18733  003F80                     l1463:
 18734  003F80  FFFF               	dw	65535	; assembler added errata NOP
 18735                           
 18736                           ; BSR set to: 0
 18737                           
 18738                           ; BSR set to: 0
 18739  003F82  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 18740  003F84  D7F6               	goto	l1464
 18741  003F86                     u6690:
 18742  003F86  FFFF               	dw	65535	; assembler added errata NOP
 18743                           
 18744                           ; BSR set to: 0
 18745                           
 18746                           ; BSR set to: 0
 18747                           
 18748                           ; BSR set to: 0
 18749  003F88  90D8               	bcf	status,0,c
 18750  003F8A  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 18751  003F8C  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 18752  003F8E  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 18753  003F90  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 18754                           
 18755                           ; BSR set to: 0
 18756  003F92  5184               	movf	___lldiv@divisor& (0+255),w,b
 18757  003F94  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 18758  003F96  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 18759  003F98  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 18760  003F9A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 18761  003F9C  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 18762  003F9E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 18763  003FA0  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 18764  003FA2  A0D8               	btfss	status,0,c
 18765  003FA4  D009               	goto	l1467
 18766                           
 18767                           ; BSR set to: 0
 18768  003FA6  5184               	movf	___lldiv@divisor& (0+255),w,b
 18769  003FA8  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 18770  003FAA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 18771  003FAC  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 18772  003FAE  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 18773  003FB0  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 18774  003FB2  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 18775  003FB4  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 18776                           
 18777                           ; BSR set to: 0
 18778  003FB6  8188               	bsf	___lldiv@quotient& (0+255),0,b
 18779  003FB8                     l1467:
 18780  003FB8  FFFF               	dw	65535	; assembler added errata NOP
 18781                           
 18782                           ; BSR set to: 0
 18783                           
 18784                           ; BSR set to: 0
 18785  003FBA  90D8               	bcf	status,0,c
 18786  003FBC  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 18787  003FBE  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 18788  003FC0  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 18789  003FC2  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 18790                           
 18791                           ; BSR set to: 0
 18792  003FC4  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 18793  003FC6  D7DF               	goto	u6690
 18794  003FC8                     l1468:
 18795  003FC8  FFFF               	dw	65535	; assembler added errata NOP
 18796                           
 18797                           ; BSR set to: 0
 18798                           
 18799                           ; BSR set to: 0
 18800  003FCA  C088  F080         	movff	___lldiv@quotient,?___lldiv
 18801  003FCE  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 18802  003FD2  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 18803  003FD6  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 18804                           
 18805                           ; BSR set to: 0
 18806  003FDA  0012               	return		;funcret
 18807  003FDC  FFFF               	dw	65535	; errata NOP
 18808  003FDE                     __end_of___lldiv:
 18809                           	opt stack 0
 18810                           tosu	equ	0xFFF
 18811                           tosh	equ	0xFFE
 18812                           tosl	equ	0xFFD
 18813                           pclath	equ	0xFFA
 18814                           tblptru	equ	0xFF8
 18815                           tblptrh	equ	0xFF7
 18816                           tblptrl	equ	0xFF6
 18817                           tablat	equ	0xFF5
 18818                           prodh	equ	0xFF4
 18819                           prodl	equ	0xFF3
 18820                           intcon	equ	0xFF2
 18821                           indf0	equ	0xFEF
 18822                           postinc0	equ	0xFEE
 18823                           fsr0h	equ	0xFEA
 18824                           fsr0l	equ	0xFE9
 18825                           wreg	equ	0xFE8
 18826                           postdec1	equ	0xFE5
 18827                           fsr1l	equ	0xFE1
 18828                           indf2	equ	0xFDF
 18829                           postinc2	equ	0xFDE
 18830                           postdec2	equ	0xFDD
 18831                           fsr2h	equ	0xFDA
 18832                           fsr2l	equ	0xFD9
 18833                           status	equ	0xFD8
 18834                           
 18835 ;; *************** function _TIMER *****************
 18836 ;; Defined at:
 18837 ;;		line 32 in file "Main.c"
 18838 ;; Parameters:    Size  Location     Type
 18839 ;;		None
 18840 ;; Auto vars:     Size  Location     Type
 18841 ;;  c               1   66[COMRAM] unsigned char 
 18842 ;; Return value:  Size  Location     Type
 18843 ;;                  1    wreg      void 
 18844 ;; Registers used:
 18845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18846 ;; Tracked objects:
 18847 ;;		On entry : 0/0
 18848 ;;		On exit  : 0/0
 18849 ;;		Unchanged: 0/0
 18850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18851 ;;      Params:         0       0       0       0       0       0       0
 18852 ;;      Locals:         1       0       0       0       0       0       0
 18853 ;;      Temps:         18       0       0       0       0       0       0
 18854 ;;      Totals:        19       0       0       0       0       0       0
 18855 ;;Total ram usage:       19 bytes
 18856 ;; Hardware stack levels used:    1
 18857 ;; Hardware stack levels required when called:    5
 18858 ;; This function calls:
 18859 ;;		_lerTransdutor
 18860 ;;		_readButtons
 18861 ;;		_timer
 18862 ;; This function is called by:
 18863 ;;		Interrupt level 2
 18864 ;; This function uses a non-reentrant model
 18865 ;;
 18866                           
 18867                           	psect	intcode
 18868  000008                     __pintcode:
 18869                           	opt stack 0
 18870  000008                     _TIMER:
 18871                           	opt stack 0
 18872  000008  FFFF               	dw	65535	; assembler added errata NOP
 18873                           
 18874                           ; BSR set to: 0
 18875                           ;incstack = 0
 18876  00000A  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 18877  00000C  CFFA F031          	movff	pclath,??_TIMER
 18878  000010  CFFB F032          	movff	pclatu,??_TIMER+1
 18879  000014  CFE9 F033          	movff	fsr0l,??_TIMER+2
 18880  000018  CFEA F034          	movff	fsr0h,??_TIMER+3
 18881  00001C  CFE1 F035          	movff	fsr1l,??_TIMER+4
 18882  000020  CFE2 F036          	movff	fsr1h,??_TIMER+5
 18883  000024  CFD9 F037          	movff	fsr2l,??_TIMER+6
 18884  000028  CFDA F038          	movff	fsr2h,??_TIMER+7
 18885  00002C  CFF3 F039          	movff	prodl,??_TIMER+8
 18886  000030  CFF4 F03A          	movff	prodh,??_TIMER+9
 18887  000034  CFF6 F03B          	movff	tblptrl,??_TIMER+10
 18888  000038  CFF7 F03C          	movff	tblptrh,??_TIMER+11
 18889  00003C  CFF8 F03D          	movff	tblptru,??_TIMER+12
 18890  000040  CFF5 F03E          	movff	tablat,??_TIMER+13
 18891  000044  C07F  F03F         	movff	btemp,??_TIMER+14
 18892  000048  C080  F040         	movff	btemp+1,??_TIMER+15
 18893  00004C  C081  F041         	movff	btemp+2,??_TIMER+16
 18894  000050  C082  F042         	movff	btemp+3,??_TIMER+17
 18895                           
 18896                           ;Main.c: 33: if (TMR0IF) {
 18897  000054  A4F2               	btfss	intcon,2,c	;volatile
 18898  000056  D01E               	goto	i2l875
 18899                           
 18900                           ;Main.c: 34: TMR0IF = 0x00;
 18901  000058  94F2               	bcf	intcon,2,c	;volatile
 18902                           
 18903                           ;Main.c: 35: TMR0H = 0x3C;
 18904  00005A  0E3C               	movlw	60
 18905  00005C  6ED7               	movwf	4055,c	;volatile
 18906                           
 18907                           ;Main.c: 36: TMR0L = 0xB0;
 18908  00005E  0EB0               	movlw	176
 18909  000060  6ED6               	movwf	4054,c	;volatile
 18910                           
 18911                           ;Main.c: 38: base_sec++;
 18912  000062  2A70               	incf	_base_sec,f,c
 18913                           
 18914                           ;Main.c: 40: if (base_sec == 5) {
 18915  000064  0E05               	movlw	5
 18916  000066  1870               	xorwf	_base_sec,w,c
 18917  000068  A4D8               	btfss	status,2,c
 18918  00006A  D002               	goto	i2l873
 18919                           
 18920                           ;Main.c: 41: blinkk = ~blinkk;
 18921  00006C  0100               	movlb	0	; () banked
 18922  00006E  1FDB               	comf	_blinkk& (0+255),f,b
 18923  000070                     i2l873:
 18924  000070  FFFF               	dw	65535	; assembler added errata NOP
 18925                           
 18926                           ;Main.c: 42: }
 18927                           ;Main.c: 44: lerTransdutor();
 18928                           
 18929                           ; BSR set to: 0
 18930  000072  ECAF  F00F         	call	_lerTransdutor	;wreg free
 18931                           
 18932                           ;Main.c: 45: readButtons();
 18933  000076  ECB7  F03C         	call	_readButtons	;wreg free
 18934                           
 18935                           ;Main.c: 47: if (base_sec > 9) {
 18936  00007A  0E09               	movlw	9
 18937  00007C  6470               	cpfsgt	_base_sec,c
 18938  00007E  D00A               	goto	i2l875
 18939                           
 18940                           ;Main.c: 48: base_sec = 0;
 18941  000080  0E00               	movlw	0
 18942  000082  6E70               	movwf	_base_sec,c
 18943                           
 18944                           ;Main.c: 49: blinkk = ~blinkk;
 18945  000084  0100               	movlb	0	; () banked
 18946  000086  1FDB               	comf	_blinkk& (0+255),f,b
 18947                           
 18948                           ; BSR set to: 0
 18949                           ;Main.c: 50: timer();
 18950  000088  ECE7  F015         	call	_timer	;wreg free
 18951                           
 18952                           ;Main.c: 51: if (RCSTAbits.OERR) {
 18953  00008C  A2AB               	btfss	4011,1,c	;volatile
 18954  00008E  D002               	goto	i2l875
 18955                           
 18956                           ;Main.c: 52: RCSTAbits.CREN = 0;
 18957  000090  98AB               	bcf	4011,4,c	;volatile
 18958                           
 18959                           ;Main.c: 53: RCSTAbits.CREN = 1;
 18960  000092  88AB               	bsf	4011,4,c	;volatile
 18961  000094                     i2l875:
 18962  000094  FFFF               	dw	65535	; assembler added errata NOP
 18963                           
 18964                           ;Main.c: 54: }
 18965                           ;Main.c: 55: }
 18966                           ;Main.c: 56: }
 18967                           ;Main.c: 57: if (RCIF) {
 18968  000096  AA9E               	btfss	3998,5,c	;volatile
 18969  000098  D01B               	goto	i2l878
 18970                           
 18971                           ;Main.c: 58: char c = RCREG;
 18972  00009A  CFAE F043          	movff	4014,TIMER@c	;volatile
 18973                           
 18974                           ;Main.c: 59: if (c != '\n' && c != '\r') {
 18975  00009E  0E0A               	movlw	10
 18976  0000A0  1843               	xorwf	TIMER@c,w,c
 18977  0000A2  B4D8               	btfsc	status,2,c
 18978  0000A4  D00F               	goto	i2l877
 18979  0000A6  0E0D               	movlw	13
 18980  0000A8  1843               	xorwf	TIMER@c,w,c
 18981  0000AA  B4D8               	btfsc	status,2,c
 18982  0000AC  D00B               	goto	i2l877
 18983                           
 18984                           ;Main.c: 60: bufferSerial[cbf++] = c;
 18985  0000AE  5066               	movf	_cbf,w,c
 18986  0000B0  0D01               	mullw	1
 18987  0000B2  0E00               	movlw	low _bufferSerial
 18988  0000B4  24F3               	addwf	prodl,w,c
 18989  0000B6  6ED9               	movwf	fsr2l,c
 18990  0000B8  0E01               	movlw	high _bufferSerial
 18991  0000BA  20F4               	addwfc	prodh,w,c
 18992  0000BC  6EDA               	movwf	fsr2h,c
 18993  0000BE  C043  FFDF         	movff	TIMER@c,indf2
 18994  0000C2  2A66               	incf	_cbf,f,c
 18995  0000C4                     i2l877:
 18996  0000C4  FFFF               	dw	65535	; assembler added errata NOP
 18997                           
 18998                           ;Main.c: 61: }
 18999                           ;Main.c: 62: if (cbf >= 60) cbf = 0;
 19000  0000C6  0E3B               	movlw	59
 19001  0000C8  6466               	cpfsgt	_cbf,c
 19002  0000CA  D002               	goto	i2l878
 19003  0000CC  0E00               	movlw	0
 19004  0000CE  6E66               	movwf	_cbf,c
 19005  0000D0                     i2l878:
 19006  0000D0  FFFF               	dw	65535	; assembler added errata NOP
 19007  0000D2  C042  F082         	movff	??_TIMER+17,btemp+3
 19008  0000D6  C041  F081         	movff	??_TIMER+16,btemp+2
 19009  0000DA  C040  F080         	movff	??_TIMER+15,btemp+1
 19010  0000DE  C03F  F07F         	movff	??_TIMER+14,btemp
 19011  0000E2  C03E  FFF5         	movff	??_TIMER+13,tablat
 19012  0000E6  C03D  FFF8         	movff	??_TIMER+12,tblptru
 19013  0000EA  C03C  FFF7         	movff	??_TIMER+11,tblptrh
 19014  0000EE  C03B  FFF6         	movff	??_TIMER+10,tblptrl
 19015  0000F2  C03A  FFF4         	movff	??_TIMER+9,prodh
 19016  0000F6  C039  FFF3         	movff	??_TIMER+8,prodl
 19017  0000FA  C038  FFDA         	movff	??_TIMER+7,fsr2h
 19018  0000FE  C037  FFD9         	movff	??_TIMER+6,fsr2l
 19019  000102  C036  FFE2         	movff	??_TIMER+5,fsr1h
 19020  000106  C035  FFE1         	movff	??_TIMER+4,fsr1l
 19021  00010A  C034  FFEA         	movff	??_TIMER+3,fsr0h
 19022  00010E  C033  FFE9         	movff	??_TIMER+2,fsr0l
 19023  000112  C032  FFFB         	movff	??_TIMER+1,pclatu
 19024  000116  C031  FFFA         	movff	??_TIMER,pclath
 19025  00011A  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19026  00011C  0011               	retfie		f
 19027  00011E  FFFF               	dw	65535	; errata NOP
 19028  000120                     __end_of_TIMER:
 19029                           	opt stack 0
 19030                           tosu	equ	0xFFF
 19031                           tosh	equ	0xFFE
 19032                           tosl	equ	0xFFD
 19033                           pclatu	equ	0xFFB
 19034                           pclath	equ	0xFFA
 19035                           tblptru	equ	0xFF8
 19036                           tblptrh	equ	0xFF7
 19037                           tblptrl	equ	0xFF6
 19038                           tablat	equ	0xFF5
 19039                           prodh	equ	0xFF4
 19040                           prodl	equ	0xFF3
 19041                           intcon	equ	0xFF2
 19042                           indf0	equ	0xFEF
 19043                           postinc0	equ	0xFEE
 19044                           fsr0h	equ	0xFEA
 19045                           fsr0l	equ	0xFE9
 19046                           wreg	equ	0xFE8
 19047                           postdec1	equ	0xFE5
 19048                           fsr1h	equ	0xFE2
 19049                           fsr1l	equ	0xFE1
 19050                           indf2	equ	0xFDF
 19051                           postinc2	equ	0xFDE
 19052                           postdec2	equ	0xFDD
 19053                           fsr2h	equ	0xFDA
 19054                           fsr2l	equ	0xFD9
 19055                           status	equ	0xFD8
 19056                           
 19057 ;; *************** function _timer *****************
 19058 ;; Defined at:
 19059 ;;		line 9 in file "temporizador.h"
 19060 ;; Parameters:    Size  Location     Type
 19061 ;;		None
 19062 ;; Auto vars:     Size  Location     Type
 19063 ;;		None
 19064 ;; Return value:  Size  Location     Type
 19065 ;;                  1    wreg      void 
 19066 ;; Registers used:
 19067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19068 ;; Tracked objects:
 19069 ;;		On entry : 0/0
 19070 ;;		On exit  : 0/0
 19071 ;;		Unchanged: 0/0
 19072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19073 ;;      Params:         0       0       0       0       0       0       0
 19074 ;;      Locals:         6       0       0       0       0       0       0
 19075 ;;      Temps:          0       0       0       0       0       0       0
 19076 ;;      Totals:         6       0       0       0       0       0       0
 19077 ;;Total ram usage:        6 bytes
 19078 ;; Hardware stack levels used:    1
 19079 ;; Hardware stack levels required when called:    4
 19080 ;; This function calls:
 19081 ;;		_writeEEPROM16_ext
 19082 ;;		i2_RTC_Init
 19083 ;;		i2_getDS1307TimeDate
 19084 ;;		i2_writeEEPROM_ext
 19085 ;; This function is called by:
 19086 ;;		_TIMER
 19087 ;; This function uses a non-reentrant model
 19088 ;;
 19089                           
 19090                           	psect	text74
 19091  002BCE                     __ptext74:
 19092                           	opt stack 0
 19093  002BCE                     _timer:
 19094                           	opt stack 0
 19095  002BCE  FFFF               	dw	65535	; assembler added errata NOP
 19096                           
 19097                           ;temporizador.h: 11: timerVerificarSinal = (timerVerificarSinal <= 0 ? 0 : --timerVerifi
      +                          carSinal);
 19098                           
 19099                           ;incstack = 0
 19100  002BD0  0100               	movlb	0	; () banked
 19101  002BD2  51FE               	movf	_timerVerificarSinal& (0+255),w,b
 19102  002BD4  B4D8               	btfsc	status,2,c
 19103  002BD6  D005               	goto	i2l567
 19104                           
 19105                           ; BSR set to: 0
 19106  002BD8  07FE               	decf	_timerVerificarSinal& (0+255),f,b
 19107  002BDA  C0FE  F009         	movff	_timerVerificarSinal,_timer$1327
 19108  002BDE  6A0A               	clrf	_timer$1327+1,c
 19109  002BE0  D005               	goto	i2l569
 19110  002BE2                     i2l567:
 19111  002BE2  FFFF               	dw	65535	; assembler added errata NOP
 19112                           
 19113                           ; BSR set to: 0
 19114                           
 19115                           ; BSR set to: 0
 19116  002BE4  0E00               	movlw	0
 19117  002BE6  6E0A               	movwf	_timer$1327+1,c
 19118  002BE8  0E00               	movlw	0
 19119  002BEA  6E09               	movwf	_timer$1327,c
 19120  002BEC                     i2l569:
 19121  002BEC  FFFF               	dw	65535	; assembler added errata NOP
 19122                           
 19123                           ; BSR set to: 0
 19124                           
 19125                           ; BSR set to: 0
 19126  002BEE  C009  F0FE         	movff	_timer$1327,_timerVerificarSinal
 19127                           
 19128                           ;temporizador.h: 12: timerEtapaComunicacao = (timerEtapaComunicacao <= 0 ? 0 : --timerEt
      +                          apaComunicacao);
 19129  002BF2  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 19130  002BF4  B4D8               	btfsc	status,2,c
 19131  002BF6  D005               	goto	i2l571
 19132                           
 19133                           ; BSR set to: 0
 19134  002BF8  07F5               	decf	_timerEtapaComunicacao& (0+255),f,b
 19135  002BFA  C0F5  F00B         	movff	_timerEtapaComunicacao,_timer$1328
 19136  002BFE  6A0C               	clrf	_timer$1328+1,c
 19137  002C00  D005               	goto	i2l573
 19138  002C02                     i2l571:
 19139  002C02  FFFF               	dw	65535	; assembler added errata NOP
 19140                           
 19141                           ; BSR set to: 0
 19142                           
 19143                           ; BSR set to: 0
 19144  002C04  0E00               	movlw	0
 19145  002C06  6E0C               	movwf	_timer$1328+1,c
 19146  002C08  0E00               	movlw	0
 19147  002C0A  6E0B               	movwf	_timer$1328,c
 19148  002C0C                     i2l573:
 19149  002C0C  FFFF               	dw	65535	; assembler added errata NOP
 19150                           
 19151                           ; BSR set to: 0
 19152                           
 19153                           ; BSR set to: 0
 19154  002C0E  C00B  F0F5         	movff	_timer$1328,_timerEtapaComunicacao
 19155                           
 19156                           ; BSR set to: 0
 19157                           ;temporizador.h: 13: timerTesteBombas = (timerTesteBombas <= 0 ? 0 : --timerTesteBombas)
      +                          ;
 19158  002C12  51D9               	movf	_timerTesteBombas& (0+255),w,b
 19159  002C14  11DA               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 19160  002C16  B4D8               	btfsc	status,2,c
 19161  002C18  D008               	goto	i2l575
 19162                           
 19163                           ; BSR set to: 0
 19164  002C1A  07D9               	decf	_timerTesteBombas& (0+255),f,b
 19165  002C1C  A0D8               	btfss	status,0,c
 19166  002C1E  07DA               	decf	(_timerTesteBombas+1)& (0+255),f,b
 19167  002C20  C0D9  F0D9         	movff	_timerTesteBombas,_timerTesteBombas
 19168  002C24  C0DA  F0DA         	movff	_timerTesteBombas+1,_timerTesteBombas+1
 19169  002C28  D005               	goto	i2l577
 19170  002C2A                     i2l575:
 19171  002C2A  FFFF               	dw	65535	; assembler added errata NOP
 19172                           
 19173                           ; BSR set to: 0
 19174                           
 19175                           ; BSR set to: 0
 19176  002C2C  0E00               	movlw	0
 19177  002C2E  6FDA               	movwf	(_timerTesteBombas+1)& (0+255),b
 19178  002C30  0E00               	movlw	0
 19179  002C32  6FD9               	movwf	_timerTesteBombas& (0+255),b
 19180  002C34                     i2l577:
 19181  002C34  FFFF               	dw	65535	; assembler added errata NOP
 19182                           
 19183                           ; BSR set to: 0
 19184                           ;temporizador.h: 14: timerReenvioSMS = (timerReenvioSMS <= 0 ? 0 : --timerReenvioSMS);
 19185  002C36  51F6               	movf	_timerReenvioSMS& (0+255),w,b
 19186  002C38  B4D8               	btfsc	status,2,c
 19187  002C3A  D005               	goto	i2l579
 19188                           
 19189                           ; BSR set to: 0
 19190  002C3C  07F6               	decf	_timerReenvioSMS& (0+255),f,b
 19191  002C3E  C0F6  F00D         	movff	_timerReenvioSMS,_timer$1329
 19192  002C42  6A0E               	clrf	_timer$1329+1,c
 19193  002C44  D005               	goto	i2l581
 19194  002C46                     i2l579:
 19195  002C46  FFFF               	dw	65535	; assembler added errata NOP
 19196                           
 19197                           ; BSR set to: 0
 19198                           
 19199                           ; BSR set to: 0
 19200  002C48  0E00               	movlw	0
 19201  002C4A  6E0E               	movwf	_timer$1329+1,c
 19202  002C4C  0E00               	movlw	0
 19203  002C4E  6E0D               	movwf	_timer$1329,c
 19204  002C50                     i2l581:
 19205  002C50  FFFF               	dw	65535	; assembler added errata NOP
 19206                           
 19207                           ; BSR set to: 0
 19208                           
 19209                           ; BSR set to: 0
 19210  002C52  C00D  F0F6         	movff	_timer$1329,_timerReenvioSMS
 19211                           
 19212                           ;temporizador.h: 16: if (ajst_rtc) {
 19213  002C56  5067               	movf	_ajst_rtc,w,c
 19214  002C58  A4D8               	btfss	status,2,c
 19215  002C5A  D056               	goto	i2l587
 19216                           
 19217                           ; BSR set to: 0
 19218                           ;temporizador.h: 18: }
 19219                           ;temporizador.h: 19: _sec++;
 19220                           
 19221                           ; BSR set to: 0
 19222                           
 19223                           ; BSR set to: 0
 19224                           ;temporizador.h: 17: return;
 19225  002C5C  2BEF               	incf	__sec& (0+255),f,b
 19226                           
 19227                           ; BSR set to: 0
 19228                           ;temporizador.h: 20: if (_sec > 59) {
 19229  002C5E  0E3B               	movlw	59
 19230  002C60  65EF               	cpfsgt	__sec& (0+255),b
 19231  002C62  D014               	goto	i2l586
 19232                           
 19233                           ; BSR set to: 0
 19234                           ;temporizador.h: 21: _sec = 0;
 19235  002C64  0E00               	movlw	0
 19236  002C66  6FEF               	movwf	__sec& (0+255),b
 19237                           
 19238                           ; BSR set to: 0
 19239                           ;temporizador.h: 22: _min++;
 19240  002C68  2BEE               	incf	__min& (0+255),f,b
 19241                           
 19242                           ; BSR set to: 0
 19243                           ;temporizador.h: 23: if (_min > 59) {
 19244  002C6A  0E3B               	movlw	59
 19245  002C6C  65EE               	cpfsgt	__min& (0+255),b
 19246  002C6E  D00E               	goto	i2l586
 19247                           
 19248                           ; BSR set to: 0
 19249                           ;temporizador.h: 24: _min = 0;
 19250  002C70  0E00               	movlw	0
 19251  002C72  6FEE               	movwf	__min& (0+255),b
 19252                           
 19253                           ; BSR set to: 0
 19254                           ;temporizador.h: 25: _hor++;
 19255  002C74  2BED               	incf	__hor& (0+255),f,b
 19256                           
 19257                           ; BSR set to: 0
 19258                           ;temporizador.h: 26: if (_hor > 23) {
 19259  002C76  0E17               	movlw	23
 19260  002C78  65ED               	cpfsgt	__hor& (0+255),b
 19261  002C7A  D008               	goto	i2l586
 19262                           
 19263                           ; BSR set to: 0
 19264                           ;temporizador.h: 27: _hor = 0;
 19265  002C7C  0E00               	movlw	0
 19266  002C7E  6FED               	movwf	__hor& (0+255),b
 19267                           
 19268                           ; BSR set to: 0
 19269                           ;temporizador.h: 28: dias_restante_teste++;
 19270  002C80  2BE8               	incf	_dias_restante_teste& (0+255),f,b
 19271                           
 19272                           ; BSR set to: 0
 19273                           ;temporizador.h: 29: writeEEPROM_ext(10, dias_restante_teste);
 19274  002C82  C0E8  F004         	movff	_dias_restante_teste,i2writeEEPROM_ext@data
 19275  002C86  0E0A               	movlw	10
 19276  002C88  EC48  F039         	call	i2_writeEEPROM_ext
 19277  002C8C                     i2l586:
 19278  002C8C  FFFF               	dw	65535	; assembler added errata NOP
 19279                           
 19280                           ;temporizador.h: 30: }
 19281                           ;temporizador.h: 31: }
 19282                           ;temporizador.h: 32: }
 19283                           ;temporizador.h: 34: if (rtc.min != _min) {
 19284  002C8E  0100               	movlb	0	; () banked
 19285  002C90  51EE               	movf	__min& (0+255),w,b
 19286  002C92  1875               	xorwf	_rtc+2,w,c
 19287  002C94  B4D8               	btfsc	status,2,c
 19288  002C96  D038               	goto	i2l587
 19289                           
 19290                           ; BSR set to: 0
 19291                           ;temporizador.h: 36: if (flagEstacionariaLigada) {
 19292  002C98  51F1               	movf	_flagEstacionariaLigada& (0+255),w,b
 19293  002C9A  B4D8               	btfsc	status,2,c
 19294  002C9C  D009               	goto	i2l588
 19295                           
 19296                           ; BSR set to: 0
 19297                           ;temporizador.h: 37: horimetro++;
 19298  002C9E  4A4F               	infsnz	_horimetro,f,c
 19299  002CA0  2A50               	incf	_horimetro+1,f,c
 19300                           
 19301                           ; BSR set to: 0
 19302                           ;temporizador.h: 38: writeEEPROM16_ext(8, horimetro);
 19303  002CA2  C04F  F006         	movff	_horimetro,writeEEPROM16_ext@data
 19304  002CA6  C050  F007         	movff	_horimetro+1,writeEEPROM16_ext@data+1
 19305  002CAA  0E08               	movlw	8
 19306  002CAC  ECEF  F01F         	call	_writeEEPROM16_ext
 19307  002CB0                     i2l588:
 19308  002CB0  FFFF               	dw	65535	; assembler added errata NOP
 19309                           
 19310                           ;temporizador.h: 39: }
 19311                           ;temporizador.h: 40: getDS1307TimeDate(&rtc);
 19312  002CB2  0E73               	movlw	low _rtc
 19313  002CB4  6E06               	movwf	i2getDS1307TimeDate@ptrToUserVal,c
 19314  002CB6  0E00               	movlw	high _rtc
 19315  002CB8  6E07               	movwf	i2getDS1307TimeDate@ptrToUserVal+1,c
 19316  002CBA  EC62  F019         	call	i2_getDS1307TimeDate	;wreg free
 19317                           
 19318                           ;temporizador.h: 41: if ((rtc.sec > 60) && (rtc.min > 60) && (rtc.hour > 24)) {
 19319  002CBE  0E3C               	movlw	60
 19320  002CC0  6474               	cpfsgt	_rtc+1,c
 19321  002CC2  D015               	goto	i2l589
 19322  002CC4  0E3C               	movlw	60
 19323  002CC6  6475               	cpfsgt	_rtc+2,c
 19324  002CC8  D012               	goto	i2l589
 19325  002CCA  0E18               	movlw	24
 19326  002CCC  6476               	cpfsgt	_rtc+3,c
 19327  002CCE  D00F               	goto	i2l589
 19328                           
 19329                           ;temporizador.h: 43: RTC_Init();
 19330  002CD0  EC1A  F038         	call	i2_RTC_Init	;wreg free
 19331                           
 19332                           ;temporizador.h: 44: rtc.sec = _sec;
 19333  002CD4  C0EF  F074         	movff	__sec,_rtc+1
 19334                           
 19335                           ;temporizador.h: 45: rtc.min = _min;
 19336  002CD8  C0EE  F075         	movff	__min,_rtc+2
 19337                           
 19338                           ;temporizador.h: 46: rtc.hour = _hor;
 19339  002CDC  C0ED  F076         	movff	__hor,_rtc+3
 19340                           
 19341                           ;temporizador.h: 47: rtc.date = _dia;
 19342  002CE0  C0EC  F077         	movff	__dia,_rtc+4
 19343                           
 19344                           ;temporizador.h: 48: rtc.month = _mes;
 19345  002CE4  C0EB  F078         	movff	__mes,_rtc+5
 19346                           
 19347                           ;temporizador.h: 49: rtc.year = _ano;
 19348  002CE8  C0EA  F079         	movff	__ano,_rtc+6
 19349                           
 19350                           ;temporizador.h: 50: return;
 19351  002CEC  D00D               	goto	i2l587
 19352  002CEE                     i2l589:
 19353  002CEE  FFFF               	dw	65535	; assembler added errata NOP
 19354                           
 19355                           ;temporizador.h: 51: }
 19356                           ;temporizador.h: 52: _sec = rtc.sec;
 19357  002CF0  C074  F0EF         	movff	_rtc+1,__sec
 19358                           
 19359                           ;temporizador.h: 53: _min = rtc.min;
 19360  002CF4  C075  F0EE         	movff	_rtc+2,__min
 19361                           
 19362                           ;temporizador.h: 54: _hor = rtc.hour;
 19363  002CF8  C076  F0ED         	movff	_rtc+3,__hor
 19364                           
 19365                           ;temporizador.h: 55: _dia = rtc.date;
 19366  002CFC  C077  F0EC         	movff	_rtc+4,__dia
 19367                           
 19368                           ;temporizador.h: 56: _mes = rtc.month;
 19369  002D00  C078  F0EB         	movff	_rtc+5,__mes
 19370                           
 19371                           ;temporizador.h: 57: _ano = rtc.year;
 19372  002D04  C079  F0EA         	movff	_rtc+6,__ano
 19373  002D08                     i2l587:
 19374  002D08  FFFF               	dw	65535	; assembler added errata NOP
 19375  002D0A  0012               	return		;funcret
 19376  002D0C  FFFF               	dw	65535	; errata NOP
 19377  002D0E                     __end_of_timer:
 19378                           	opt stack 0
 19379                           tosu	equ	0xFFF
 19380                           tosh	equ	0xFFE
 19381                           tosl	equ	0xFFD
 19382                           pclatu	equ	0xFFB
 19383                           pclath	equ	0xFFA
 19384                           tblptru	equ	0xFF8
 19385                           tblptrh	equ	0xFF7
 19386                           tblptrl	equ	0xFF6
 19387                           tablat	equ	0xFF5
 19388                           prodh	equ	0xFF4
 19389                           prodl	equ	0xFF3
 19390                           intcon	equ	0xFF2
 19391                           indf0	equ	0xFEF
 19392                           postinc0	equ	0xFEE
 19393                           fsr0h	equ	0xFEA
 19394                           fsr0l	equ	0xFE9
 19395                           wreg	equ	0xFE8
 19396                           postdec1	equ	0xFE5
 19397                           fsr1h	equ	0xFE2
 19398                           fsr1l	equ	0xFE1
 19399                           indf2	equ	0xFDF
 19400                           postinc2	equ	0xFDE
 19401                           postdec2	equ	0xFDD
 19402                           fsr2h	equ	0xFDA
 19403                           fsr2l	equ	0xFD9
 19404                           status	equ	0xFD8
 19405                           
 19406 ;; *************** function i2_getDS1307TimeDate *****************
 19407 ;; Defined at:
 19408 ;;		line 52 in file "ds1307.h"
 19409 ;; Parameters:    Size  Location     Type
 19410 ;;  ptrToUserVal    2    5[COMRAM] PTR struct .
 19411 ;;		 -> rtc(7), 
 19412 ;; Auto vars:     Size  Location     Type
 19413 ;;		None
 19414 ;; Return value:  Size  Location     Type
 19415 ;;                  1    wreg      void 
 19416 ;; Registers used:
 19417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19418 ;; Tracked objects:
 19419 ;;		On entry : 0/0
 19420 ;;		On exit  : 0/0
 19421 ;;		Unchanged: 0/0
 19422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19423 ;;      Params:         2       0       0       0       0       0       0
 19424 ;;      Locals:         0       0       0       0       0       0       0
 19425 ;;      Temps:          0       0       0       0       0       0       0
 19426 ;;      Totals:         2       0       0       0       0       0       0
 19427 ;;Total ram usage:        2 bytes
 19428 ;; Hardware stack levels used:    1
 19429 ;; Hardware stack levels required when called:    2
 19430 ;; This function calls:
 19431 ;;		i2_BCDtoDEC
 19432 ;;		i2_I2C_Read
 19433 ;;		i2_I2C_Restart
 19434 ;;		i2_I2C_Start
 19435 ;;		i2_I2C_Stop
 19436 ;;		i2_I2C_Write
 19437 ;; This function is called by:
 19438 ;;		_timer
 19439 ;; This function uses a non-reentrant model
 19440 ;;
 19441                           
 19442                           	psect	text75
 19443  0032C4                     __ptext75:
 19444                           	opt stack 0
 19445  0032C4                     i2_getDS1307TimeDate:
 19446                           	opt stack 0
 19447  0032C4  FFFF               	dw	65535	; assembler added errata NOP
 19448                           
 19449                           ;ds1307.h: 54: I2C_Start();
 19450                           
 19451                           ;incstack = 0
 19452  0032C6  EC08  F037         	call	i2_I2C_Start	;wreg free
 19453                           
 19454                           ;ds1307.h: 55: I2C_Write(0xD0);
 19455  0032CA  0E00               	movlw	0
 19456  0032CC  6E03               	movwf	i2I2C_Write@d+1,c
 19457  0032CE  0ED0               	movlw	208
 19458  0032D0  6E02               	movwf	i2I2C_Write@d,c
 19459  0032D2  EC2C  F037         	call	i2_I2C_Write	;wreg free
 19460                           
 19461                           ;ds1307.h: 56: I2C_Write(0x00);
 19462  0032D6  0E00               	movlw	0
 19463  0032D8  6E03               	movwf	i2I2C_Write@d+1,c
 19464  0032DA  0E00               	movlw	0
 19465  0032DC  6E02               	movwf	i2I2C_Write@d,c
 19466  0032DE  EC2C  F037         	call	i2_I2C_Write	;wreg free
 19467                           
 19468                           ;ds1307.h: 57: I2C_Restart();
 19469  0032E2  EC14  F037         	call	i2_I2C_Restart	;wreg free
 19470                           
 19471                           ;ds1307.h: 58: I2C_Write(0xD1);
 19472  0032E6  0E00               	movlw	0
 19473  0032E8  6E03               	movwf	i2I2C_Write@d+1,c
 19474  0032EA  0ED1               	movlw	209
 19475  0032EC  6E02               	movwf	i2I2C_Write@d,c
 19476  0032EE  EC2C  F037         	call	i2_I2C_Write	;wreg free
 19477                           
 19478                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
 19479  0032F2  EE20 F001          	lfsr	2,1
 19480  0032F6  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19481  0032F8  26D9               	addwf	fsr2l,f,c
 19482  0032FA  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19483  0032FC  22DA               	addwfc	fsr2h,f,c
 19484  0032FE  0E00               	movlw	0
 19485  003300  6E03               	movwf	i2I2C_Read@a+1,c
 19486  003302  0E01               	movlw	1
 19487  003304  6E02               	movwf	i2I2C_Read@a,c
 19488  003306  EC4D  F038         	call	i2_I2C_Read	;wreg free
 19489  00330A  5002               	movf	?i2_I2C_Read,w,c
 19490  00330C  EC54  F037         	call	i2_BCDtoDEC
 19491  003310  6EDF               	movwf	indf2,c
 19492                           
 19493                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
 19494  003312  EE20 F002          	lfsr	2,2
 19495  003316  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19496  003318  26D9               	addwf	fsr2l,f,c
 19497  00331A  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19498  00331C  22DA               	addwfc	fsr2h,f,c
 19499  00331E  0E00               	movlw	0
 19500  003320  6E03               	movwf	i2I2C_Read@a+1,c
 19501  003322  0E01               	movlw	1
 19502  003324  6E02               	movwf	i2I2C_Read@a,c
 19503  003326  EC4D  F038         	call	i2_I2C_Read	;wreg free
 19504  00332A  5002               	movf	?i2_I2C_Read,w,c
 19505  00332C  EC54  F037         	call	i2_BCDtoDEC
 19506  003330  6EDF               	movwf	indf2,c
 19507                           
 19508                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
 19509  003332  EE20 F003          	lfsr	2,3
 19510  003336  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19511  003338  26D9               	addwf	fsr2l,f,c
 19512  00333A  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19513  00333C  22DA               	addwfc	fsr2h,f,c
 19514  00333E  0E00               	movlw	0
 19515  003340  6E03               	movwf	i2I2C_Read@a+1,c
 19516  003342  0E01               	movlw	1
 19517  003344  6E02               	movwf	i2I2C_Read@a,c
 19518  003346  EC4D  F038         	call	i2_I2C_Read	;wreg free
 19519  00334A  5002               	movf	?i2_I2C_Read,w,c
 19520  00334C  EC54  F037         	call	i2_BCDtoDEC
 19521  003350  6EDF               	movwf	indf2,c
 19522                           
 19523                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
 19524  003352  0E00               	movlw	0
 19525  003354  6E03               	movwf	i2I2C_Read@a+1,c
 19526  003356  0E01               	movlw	1
 19527  003358  6E02               	movwf	i2I2C_Read@a,c
 19528  00335A  EC4D  F038         	call	i2_I2C_Read	;wreg free
 19529  00335E  5002               	movf	?i2_I2C_Read,w,c
 19530  003360  EC54  F037         	call	i2_BCDtoDEC
 19531  003364  C006  FFD9         	movff	i2getDS1307TimeDate@ptrToUserVal,fsr2l
 19532  003368  C007  FFDA         	movff	i2getDS1307TimeDate@ptrToUserVal+1,fsr2h
 19533  00336C  6EDF               	movwf	indf2,c
 19534                           
 19535                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
 19536  00336E  EE20 F004          	lfsr	2,4
 19537  003372  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19538  003374  26D9               	addwf	fsr2l,f,c
 19539  003376  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19540  003378  22DA               	addwfc	fsr2h,f,c
 19541  00337A  0E00               	movlw	0
 19542  00337C  6E03               	movwf	i2I2C_Read@a+1,c
 19543  00337E  0E01               	movlw	1
 19544  003380  6E02               	movwf	i2I2C_Read@a,c
 19545  003382  EC4D  F038         	call	i2_I2C_Read	;wreg free
 19546  003386  5002               	movf	?i2_I2C_Read,w,c
 19547  003388  EC54  F037         	call	i2_BCDtoDEC
 19548  00338C  6EDF               	movwf	indf2,c
 19549                           
 19550                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
 19551  00338E  EE20 F005          	lfsr	2,5
 19552  003392  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19553  003394  26D9               	addwf	fsr2l,f,c
 19554  003396  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19555  003398  22DA               	addwfc	fsr2h,f,c
 19556  00339A  0E00               	movlw	0
 19557  00339C  6E03               	movwf	i2I2C_Read@a+1,c
 19558  00339E  0E01               	movlw	1
 19559  0033A0  6E02               	movwf	i2I2C_Read@a,c
 19560  0033A2  EC4D  F038         	call	i2_I2C_Read	;wreg free
 19561  0033A6  5002               	movf	?i2_I2C_Read,w,c
 19562  0033A8  EC54  F037         	call	i2_BCDtoDEC
 19563  0033AC  6EDF               	movwf	indf2,c
 19564                           
 19565                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
 19566  0033AE  EE20 F006          	lfsr	2,6
 19567  0033B2  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19568  0033B4  26D9               	addwf	fsr2l,f,c
 19569  0033B6  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19570  0033B8  22DA               	addwfc	fsr2h,f,c
 19571  0033BA  0E00               	movlw	0
 19572  0033BC  6E03               	movwf	i2I2C_Read@a+1,c
 19573  0033BE  0E00               	movlw	0
 19574  0033C0  6E02               	movwf	i2I2C_Read@a,c
 19575  0033C2  EC4D  F038         	call	i2_I2C_Read	;wreg free
 19576  0033C6  5002               	movf	?i2_I2C_Read,w,c
 19577  0033C8  EC54  F037         	call	i2_BCDtoDEC
 19578  0033CC  6EDF               	movwf	indf2,c
 19579                           
 19580                           ;ds1307.h: 66: I2C_Stop();
 19581  0033CE  EC0E  F037         	call	i2_I2C_Stop	;wreg free
 19582  0033D2  0012               	return		;funcret
 19583  0033D4  FFFF               	dw	65535	; errata NOP
 19584  0033D6                     __end_ofi2_getDS1307TimeDate:
 19585                           	opt stack 0
 19586                           tosu	equ	0xFFF
 19587                           tosh	equ	0xFFE
 19588                           tosl	equ	0xFFD
 19589                           pclatu	equ	0xFFB
 19590                           pclath	equ	0xFFA
 19591                           tblptru	equ	0xFF8
 19592                           tblptrh	equ	0xFF7
 19593                           tblptrl	equ	0xFF6
 19594                           tablat	equ	0xFF5
 19595                           prodh	equ	0xFF4
 19596                           prodl	equ	0xFF3
 19597                           intcon	equ	0xFF2
 19598                           indf0	equ	0xFEF
 19599                           postinc0	equ	0xFEE
 19600                           fsr0h	equ	0xFEA
 19601                           fsr0l	equ	0xFE9
 19602                           wreg	equ	0xFE8
 19603                           postdec1	equ	0xFE5
 19604                           fsr1h	equ	0xFE2
 19605                           fsr1l	equ	0xFE1
 19606                           indf2	equ	0xFDF
 19607                           postinc2	equ	0xFDE
 19608                           postdec2	equ	0xFDD
 19609                           fsr2h	equ	0xFDA
 19610                           fsr2l	equ	0xFD9
 19611                           status	equ	0xFD8
 19612                           
 19613 ;; *************** function i2_I2C_Restart *****************
 19614 ;; Defined at:
 19615 ;;		line 31 in file "I2C.c"
 19616 ;; Parameters:    Size  Location     Type
 19617 ;;		None
 19618 ;; Auto vars:     Size  Location     Type
 19619 ;;		None
 19620 ;; Return value:  Size  Location     Type
 19621 ;;                  1    wreg      void 
 19622 ;; Registers used:
 19623 ;;		wreg, status,2, status,0, cstack
 19624 ;; Tracked objects:
 19625 ;;		On entry : 0/0
 19626 ;;		On exit  : 0/0
 19627 ;;		Unchanged: 0/0
 19628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19629 ;;      Params:         0       0       0       0       0       0       0
 19630 ;;      Locals:         0       0       0       0       0       0       0
 19631 ;;      Temps:          0       0       0       0       0       0       0
 19632 ;;      Totals:         0       0       0       0       0       0       0
 19633 ;;Total ram usage:        0 bytes
 19634 ;; Hardware stack levels used:    1
 19635 ;; Hardware stack levels required when called:    1
 19636 ;; This function calls:
 19637 ;;		i2_I2C_Wait
 19638 ;; This function is called by:
 19639 ;;		i2_getDS1307TimeDate
 19640 ;; This function uses a non-reentrant model
 19641 ;;
 19642                           
 19643                           	psect	text76
 19644  006E28                     __ptext76:
 19645                           	opt stack 0
 19646  006E28                     i2_I2C_Restart:
 19647                           	opt stack 0
 19648  006E28  FFFF               	dw	65535	; assembler added errata NOP
 19649                           
 19650                           ;I2C.c: 32: I2C_Wait();
 19651                           
 19652                           ;incstack = 0
 19653  006E2A  EC5F  F037         	call	i2_I2C_Wait	;wreg free
 19654                           
 19655                           ;I2C.c: 33: RSEN = 1;
 19656  006E2E  82C5               	bsf	4037,1,c	;volatile
 19657  006E30  0012               	return		;funcret
 19658  006E32  FFFF               	dw	65535	; errata NOP
 19659  006E34                     __end_ofi2_I2C_Restart:
 19660                           	opt stack 0
 19661                           tosu	equ	0xFFF
 19662                           tosh	equ	0xFFE
 19663                           tosl	equ	0xFFD
 19664                           pclatu	equ	0xFFB
 19665                           pclath	equ	0xFFA
 19666                           tblptru	equ	0xFF8
 19667                           tblptrh	equ	0xFF7
 19668                           tblptrl	equ	0xFF6
 19669                           tablat	equ	0xFF5
 19670                           prodh	equ	0xFF4
 19671                           prodl	equ	0xFF3
 19672                           intcon	equ	0xFF2
 19673                           indf0	equ	0xFEF
 19674                           postinc0	equ	0xFEE
 19675                           fsr0h	equ	0xFEA
 19676                           fsr0l	equ	0xFE9
 19677                           wreg	equ	0xFE8
 19678                           postdec1	equ	0xFE5
 19679                           fsr1h	equ	0xFE2
 19680                           fsr1l	equ	0xFE1
 19681                           indf2	equ	0xFDF
 19682                           postinc2	equ	0xFDE
 19683                           postdec2	equ	0xFDD
 19684                           fsr2h	equ	0xFDA
 19685                           fsr2l	equ	0xFD9
 19686                           status	equ	0xFD8
 19687                           
 19688 ;; *************** function i2_I2C_Read *****************
 19689 ;; Defined at:
 19690 ;;		line 47 in file "I2C.c"
 19691 ;; Parameters:    Size  Location     Type
 19692 ;;  a               2    1[COMRAM] unsigned short 
 19693 ;; Auto vars:     Size  Location     Type
 19694 ;;  I2C_Read        2    3[COMRAM] unsigned short 
 19695 ;; Return value:  Size  Location     Type
 19696 ;;                  2    1[COMRAM] unsigned short 
 19697 ;; Registers used:
 19698 ;;		wreg, status,2, status,0, cstack
 19699 ;; Tracked objects:
 19700 ;;		On entry : 0/0
 19701 ;;		On exit  : 0/0
 19702 ;;		Unchanged: 0/0
 19703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19704 ;;      Params:         2       0       0       0       0       0       0
 19705 ;;      Locals:         2       0       0       0       0       0       0
 19706 ;;      Temps:          0       0       0       0       0       0       0
 19707 ;;      Totals:         4       0       0       0       0       0       0
 19708 ;;Total ram usage:        4 bytes
 19709 ;; Hardware stack levels used:    1
 19710 ;; Hardware stack levels required when called:    1
 19711 ;; This function calls:
 19712 ;;		i2_I2C_Wait
 19713 ;; This function is called by:
 19714 ;;		i2_getDS1307TimeDate
 19715 ;; This function uses a non-reentrant model
 19716 ;;
 19717                           
 19718                           	psect	text77
 19719  00709A                     __ptext77:
 19720                           	opt stack 0
 19721  00709A                     i2_I2C_Read:
 19722                           	opt stack 0
 19723  00709A  FFFF               	dw	65535	; assembler added errata NOP
 19724                           
 19725                           ;I2C.c: 48: unsigned short temp;
 19726                           ;I2C.c: 49: I2C_Wait();
 19727                           
 19728                           ;incstack = 0
 19729  00709C  EC5F  F037         	call	i2_I2C_Wait	;wreg free
 19730                           
 19731                           ;I2C.c: 50: RCEN = 1;
 19732  0070A0  86C5               	bsf	4037,3,c	;volatile
 19733                           
 19734                           ;I2C.c: 51: I2C_Wait();
 19735  0070A2  EC5F  F037         	call	i2_I2C_Wait	;wreg free
 19736                           
 19737                           ;I2C.c: 52: temp = SSPBUF;
 19738  0070A6  CFC9 F004          	movff	4041,i2I2C_Read@temp	;volatile
 19739  0070AA  6A05               	clrf	i2I2C_Read@temp+1,c
 19740                           
 19741                           ;I2C.c: 53: I2C_Wait();
 19742  0070AC  EC5F  F037         	call	i2_I2C_Wait	;wreg free
 19743                           
 19744                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 19745  0070B0  5002               	movf	i2I2C_Read@a,w,c
 19746  0070B2  1003               	iorwf	i2I2C_Read@a+1,w,c
 19747  0070B4  A4D8               	btfss	status,2,c
 19748  0070B6  D002               	goto	i2u550_40
 19749  0070B8  8AC5               	bsf	4037,5,c	;volatile
 19750  0070BA  D002               	goto	i2u551_45
 19751  0070BC                     i2u550_40:
 19752  0070BC  FFFF               	dw	65535	; assembler added errata NOP
 19753  0070BE  9AC5               	bcf	4037,5,c	;volatile
 19754  0070C0                     i2u551_45:
 19755  0070C0  FFFF               	dw	65535	; assembler added errata NOP
 19756                           
 19757                           ;I2C.c: 55: ACKEN = 1;
 19758  0070C2  88C5               	bsf	4037,4,c	;volatile
 19759                           
 19760                           ;I2C.c: 56: return temp;
 19761  0070C4  C004  F002         	movff	i2I2C_Read@temp,?i2_I2C_Read
 19762  0070C8  C005  F003         	movff	i2I2C_Read@temp+1,?i2_I2C_Read+1
 19763  0070CC  0012               	return		;funcret
 19764  0070CE  FFFF               	dw	65535	; errata NOP
 19765  0070D0                     __end_ofi2_I2C_Read:
 19766                           	opt stack 0
 19767                           tosu	equ	0xFFF
 19768                           tosh	equ	0xFFE
 19769                           tosl	equ	0xFFD
 19770                           pclatu	equ	0xFFB
 19771                           pclath	equ	0xFFA
 19772                           tblptru	equ	0xFF8
 19773                           tblptrh	equ	0xFF7
 19774                           tblptrl	equ	0xFF6
 19775                           tablat	equ	0xFF5
 19776                           prodh	equ	0xFF4
 19777                           prodl	equ	0xFF3
 19778                           intcon	equ	0xFF2
 19779                           indf0	equ	0xFEF
 19780                           postinc0	equ	0xFEE
 19781                           fsr0h	equ	0xFEA
 19782                           fsr0l	equ	0xFE9
 19783                           wreg	equ	0xFE8
 19784                           postdec1	equ	0xFE5
 19785                           fsr1h	equ	0xFE2
 19786                           fsr1l	equ	0xFE1
 19787                           indf2	equ	0xFDF
 19788                           postinc2	equ	0xFDE
 19789                           postdec2	equ	0xFDD
 19790                           fsr2h	equ	0xFDA
 19791                           fsr2l	equ	0xFD9
 19792                           status	equ	0xFD8
 19793                           
 19794 ;; *************** function i2_BCDtoDEC *****************
 19795 ;; Defined at:
 19796 ;;		line 34 in file "function.c"
 19797 ;; Parameters:    Size  Location     Type
 19798 ;;  val             1    wreg     unsigned char 
 19799 ;; Auto vars:     Size  Location     Type
 19800 ;;  val             1    0[COMRAM] unsigned char 
 19801 ;; Return value:  Size  Location     Type
 19802 ;;                  1    wreg      unsigned char 
 19803 ;; Registers used:
 19804 ;;		wreg, status,2, status,0, prodl, prodh
 19805 ;; Tracked objects:
 19806 ;;		On entry : 0/0
 19807 ;;		On exit  : 0/0
 19808 ;;		Unchanged: 0/0
 19809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19810 ;;      Params:         0       0       0       0       0       0       0
 19811 ;;      Locals:         1       0       0       0       0       0       0
 19812 ;;      Temps:          0       0       0       0       0       0       0
 19813 ;;      Totals:         1       0       0       0       0       0       0
 19814 ;;Total ram usage:        1 bytes
 19815 ;; Hardware stack levels used:    1
 19816 ;; This function calls:
 19817 ;;		Nothing
 19818 ;; This function is called by:
 19819 ;;		i2_getDS1307TimeDate
 19820 ;; This function uses a non-reentrant model
 19821 ;;
 19822                           
 19823                           	psect	text78
 19824  006EA8                     __ptext78:
 19825                           	opt stack 0
 19826  006EA8                     i2_BCDtoDEC:
 19827                           	opt stack 0
 19828  006EA8  FFFF               	dw	65535	; assembler added errata NOP
 19829                           
 19830                           ;incstack = 0
 19831                           ;i2BCDtoDEC@val stored from wreg
 19832  006EAA  6E01               	movwf	i2BCDtoDEC@val,c
 19833                           
 19834                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
 19835  006EAC  3801               	swapf	i2BCDtoDEC@val,w,c
 19836  006EAE  0B0F               	andlw	15
 19837  006EB0  0B0F               	andlw	15
 19838  006EB2  0D0A               	mullw	10
 19839  006EB4  5001               	movf	i2BCDtoDEC@val,w,c
 19840  006EB6  0B0F               	andlw	15
 19841  006EB8  24F3               	addwf	prodl,w,c
 19842  006EBA  0012               	return		;funcret
 19843  006EBC  FFFF               	dw	65535	; errata NOP
 19844  006EBE                     __end_ofi2_BCDtoDEC:
 19845                           	opt stack 0
 19846                           tosu	equ	0xFFF
 19847                           tosh	equ	0xFFE
 19848                           tosl	equ	0xFFD
 19849                           pclatu	equ	0xFFB
 19850                           pclath	equ	0xFFA
 19851                           tblptru	equ	0xFF8
 19852                           tblptrh	equ	0xFF7
 19853                           tblptrl	equ	0xFF6
 19854                           tablat	equ	0xFF5
 19855                           prodh	equ	0xFF4
 19856                           prodl	equ	0xFF3
 19857                           intcon	equ	0xFF2
 19858                           indf0	equ	0xFEF
 19859                           postinc0	equ	0xFEE
 19860                           fsr0h	equ	0xFEA
 19861                           fsr0l	equ	0xFE9
 19862                           wreg	equ	0xFE8
 19863                           postdec1	equ	0xFE5
 19864                           fsr1h	equ	0xFE2
 19865                           fsr1l	equ	0xFE1
 19866                           indf2	equ	0xFDF
 19867                           postinc2	equ	0xFDE
 19868                           postdec2	equ	0xFDD
 19869                           fsr2h	equ	0xFDA
 19870                           fsr2l	equ	0xFD9
 19871                           status	equ	0xFD8
 19872                           
 19873 ;; *************** function i2_RTC_Init *****************
 19874 ;; Defined at:
 19875 ;;		line 98 in file "ds1307.h"
 19876 ;; Parameters:    Size  Location     Type
 19877 ;;		None
 19878 ;; Auto vars:     Size  Location     Type
 19879 ;;		None
 19880 ;; Return value:  Size  Location     Type
 19881 ;;                  1    wreg      void 
 19882 ;; Registers used:
 19883 ;;		wreg, status,2, status,0, cstack
 19884 ;; Tracked objects:
 19885 ;;		On entry : 0/0
 19886 ;;		On exit  : 0/0
 19887 ;;		Unchanged: 0/0
 19888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19889 ;;      Params:         0       0       0       0       0       0       0
 19890 ;;      Locals:         0       0       0       0       0       0       0
 19891 ;;      Temps:          0       0       0       0       0       0       0
 19892 ;;      Totals:         0       0       0       0       0       0       0
 19893 ;;Total ram usage:        0 bytes
 19894 ;; Hardware stack levels used:    1
 19895 ;; Hardware stack levels required when called:    2
 19896 ;; This function calls:
 19897 ;;		i2_I2C_Start
 19898 ;;		i2_I2C_Stop
 19899 ;;		i2_I2C_Write
 19900 ;; This function is called by:
 19901 ;;		_timer
 19902 ;; This function uses a non-reentrant model
 19903 ;;
 19904                           
 19905                           	psect	text79
 19906  007034                     __ptext79:
 19907                           	opt stack 0
 19908  007034                     i2_RTC_Init:
 19909                           	opt stack 0
 19910  007034  FFFF               	dw	65535	; assembler added errata NOP
 19911                           
 19912                           ;ds1307.h: 100: I2C_Start();
 19913                           
 19914                           ;incstack = 0
 19915  007036  EC08  F037         	call	i2_I2C_Start	;wreg free
 19916                           
 19917                           ;ds1307.h: 101: I2C_Write(0xD0);
 19918  00703A  0E00               	movlw	0
 19919  00703C  6E03               	movwf	i2I2C_Write@d+1,c
 19920  00703E  0ED0               	movlw	208
 19921  007040  6E02               	movwf	i2I2C_Write@d,c
 19922  007042  EC2C  F037         	call	i2_I2C_Write	;wreg free
 19923                           
 19924                           ;ds1307.h: 102: I2C_Write(0x07);
 19925  007046  0E00               	movlw	0
 19926  007048  6E03               	movwf	i2I2C_Write@d+1,c
 19927  00704A  0E07               	movlw	7
 19928  00704C  6E02               	movwf	i2I2C_Write@d,c
 19929  00704E  EC2C  F037         	call	i2_I2C_Write	;wreg free
 19930                           
 19931                           ;ds1307.h: 103: I2C_Write(0x00);
 19932  007052  0E00               	movlw	0
 19933  007054  6E03               	movwf	i2I2C_Write@d+1,c
 19934  007056  0E00               	movlw	0
 19935  007058  6E02               	movwf	i2I2C_Write@d,c
 19936  00705A  EC2C  F037         	call	i2_I2C_Write	;wreg free
 19937                           
 19938                           ;ds1307.h: 104: I2C_Stop();
 19939  00705E  EC0E  F037         	call	i2_I2C_Stop	;wreg free
 19940  007062  0012               	return		;funcret
 19941  007064  FFFF               	dw	65535	; errata NOP
 19942  007066                     __end_ofi2_RTC_Init:
 19943                           	opt stack 0
 19944                           tosu	equ	0xFFF
 19945                           tosh	equ	0xFFE
 19946                           tosl	equ	0xFFD
 19947                           pclatu	equ	0xFFB
 19948                           pclath	equ	0xFFA
 19949                           tblptru	equ	0xFF8
 19950                           tblptrh	equ	0xFF7
 19951                           tblptrl	equ	0xFF6
 19952                           tablat	equ	0xFF5
 19953                           prodh	equ	0xFF4
 19954                           prodl	equ	0xFF3
 19955                           intcon	equ	0xFF2
 19956                           indf0	equ	0xFEF
 19957                           postinc0	equ	0xFEE
 19958                           fsr0h	equ	0xFEA
 19959                           fsr0l	equ	0xFE9
 19960                           wreg	equ	0xFE8
 19961                           postdec1	equ	0xFE5
 19962                           fsr1h	equ	0xFE2
 19963                           fsr1l	equ	0xFE1
 19964                           indf2	equ	0xFDF
 19965                           postinc2	equ	0xFDE
 19966                           postdec2	equ	0xFDD
 19967                           fsr2h	equ	0xFDA
 19968                           fsr2l	equ	0xFD9
 19969                           status	equ	0xFD8
 19970                           
 19971 ;; *************** function _writeEEPROM16_ext *****************
 19972 ;; Defined at:
 19973 ;;		line 40 in file "eeprom.h"
 19974 ;; Parameters:    Size  Location     Type
 19975 ;;  adress          1    wreg     unsigned char 
 19976 ;;  data            2    5[COMRAM] unsigned int 
 19977 ;; Auto vars:     Size  Location     Type
 19978 ;;  adress          1    7[COMRAM] unsigned char 
 19979 ;; Return value:  Size  Location     Type
 19980 ;;                  1    wreg      void 
 19981 ;; Registers used:
 19982 ;;		wreg, status,2, status,0, cstack
 19983 ;; Tracked objects:
 19984 ;;		On entry : 0/0
 19985 ;;		On exit  : 0/0
 19986 ;;		Unchanged: 0/0
 19987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19988 ;;      Params:         2       0       0       0       0       0       0
 19989 ;;      Locals:         1       0       0       0       0       0       0
 19990 ;;      Temps:          0       0       0       0       0       0       0
 19991 ;;      Totals:         3       0       0       0       0       0       0
 19992 ;;Total ram usage:        3 bytes
 19993 ;; Hardware stack levels used:    1
 19994 ;; Hardware stack levels required when called:    3
 19995 ;; This function calls:
 19996 ;;		i2_writeEEPROM_ext
 19997 ;; This function is called by:
 19998 ;;		_timer
 19999 ;; This function uses a non-reentrant model
 20000 ;;
 20001                           
 20002                           	psect	text80
 20003  003FDE                     __ptext80:
 20004                           	opt stack 0
 20005  003FDE                     _writeEEPROM16_ext:
 20006                           	opt stack 0
 20007  003FDE  FFFF               	dw	65535	; assembler added errata NOP
 20008                           
 20009                           ;incstack = 0
 20010                           ;writeEEPROM16_ext@adress stored from wreg
 20011  003FE0  6E08               	movwf	writeEEPROM16_ext@adress,c
 20012                           
 20013                           ;eeprom.h: 41: writeEEPROM_ext(adress, data);
 20014  003FE2  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 20015  003FE6  5008               	movf	writeEEPROM16_ext@adress,w,c
 20016  003FE8  EC48  F039         	call	i2_writeEEPROM_ext
 20017                           
 20018                           ;eeprom.h: 42: data>> = 8;
 20019  003FEC  5007               	movf	writeEEPROM16_ext@data+1,w,c
 20020  003FEE  6E06               	movwf	writeEEPROM16_ext@data,c
 20021  003FF0  6A07               	clrf	writeEEPROM16_ext@data+1,c
 20022                           
 20023                           ;eeprom.h: 43: writeEEPROM_ext(adress + 1, data);
 20024  003FF2  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 20025  003FF6  2808               	incf	writeEEPROM16_ext@adress,w,c
 20026  003FF8  EC48  F039         	call	i2_writeEEPROM_ext
 20027  003FFC  0012               	return		;funcret
 20028  003FFE  FFFF               	dw	65535	; errata NOP
 20029  004000                     __end_of_writeEEPROM16_ext:
 20030                           	opt stack 0
 20031                           tosu	equ	0xFFF
 20032                           tosh	equ	0xFFE
 20033                           tosl	equ	0xFFD
 20034                           pclatu	equ	0xFFB
 20035                           pclath	equ	0xFFA
 20036                           tblptru	equ	0xFF8
 20037                           tblptrh	equ	0xFF7
 20038                           tblptrl	equ	0xFF6
 20039                           tablat	equ	0xFF5
 20040                           prodh	equ	0xFF4
 20041                           prodl	equ	0xFF3
 20042                           intcon	equ	0xFF2
 20043                           indf0	equ	0xFEF
 20044                           postinc0	equ	0xFEE
 20045                           fsr0h	equ	0xFEA
 20046                           fsr0l	equ	0xFE9
 20047                           wreg	equ	0xFE8
 20048                           postdec1	equ	0xFE5
 20049                           fsr1h	equ	0xFE2
 20050                           fsr1l	equ	0xFE1
 20051                           indf2	equ	0xFDF
 20052                           postinc2	equ	0xFDE
 20053                           postdec2	equ	0xFDD
 20054                           fsr2h	equ	0xFDA
 20055                           fsr2l	equ	0xFD9
 20056                           status	equ	0xFD8
 20057                           
 20058 ;; *************** function i2_writeEEPROM_ext *****************
 20059 ;; Defined at:
 20060 ;;		line 13 in file "eeprom.h"
 20061 ;; Parameters:    Size  Location     Type
 20062 ;;  adress          1    wreg     unsigned char 
 20063 ;;  data            1    3[COMRAM] unsigned char 
 20064 ;; Auto vars:     Size  Location     Type
 20065 ;;  adress          1    4[COMRAM] unsigned char 
 20066 ;; Return value:  Size  Location     Type
 20067 ;;                  1    wreg      void 
 20068 ;; Registers used:
 20069 ;;		wreg, status,2, status,0, cstack
 20070 ;; Tracked objects:
 20071 ;;		On entry : 0/0
 20072 ;;		On exit  : 0/0
 20073 ;;		Unchanged: 0/0
 20074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20075 ;;      Params:         1       0       0       0       0       0       0
 20076 ;;      Locals:         1       0       0       0       0       0       0
 20077 ;;      Temps:          0       0       0       0       0       0       0
 20078 ;;      Totals:         2       0       0       0       0       0       0
 20079 ;;Total ram usage:        2 bytes
 20080 ;; Hardware stack levels used:    1
 20081 ;; Hardware stack levels required when called:    2
 20082 ;; This function calls:
 20083 ;;		i2_I2C_Start
 20084 ;;		i2_I2C_Stop
 20085 ;;		i2_I2C_Write
 20086 ;;		i2_delay
 20087 ;; This function is called by:
 20088 ;;		_writeEEPROM16_ext
 20089 ;;		_timer
 20090 ;; This function uses a non-reentrant model
 20091 ;;
 20092                           
 20093                           	psect	text81
 20094  007290                     __ptext81:
 20095                           	opt stack 0
 20096  007290                     i2_writeEEPROM_ext:
 20097                           	opt stack 0
 20098  007290  FFFF               	dw	65535	; assembler added errata NOP
 20099                           
 20100                           ;incstack = 0
 20101                           ;i2writeEEPROM_ext@adress stored from wreg
 20102  007292  6E05               	movwf	i2writeEEPROM_ext@adress,c
 20103                           
 20104                           ;eeprom.h: 15: I2C_Start();
 20105  007294  EC08  F037         	call	i2_I2C_Start	;wreg free
 20106                           
 20107                           ;eeprom.h: 16: I2C_Write(0xA0);
 20108  007298  0E00               	movlw	0
 20109  00729A  6E03               	movwf	i2I2C_Write@d+1,c
 20110  00729C  0EA0               	movlw	160
 20111  00729E  6E02               	movwf	i2I2C_Write@d,c
 20112  0072A0  EC2C  F037         	call	i2_I2C_Write	;wreg free
 20113                           
 20114                           ;eeprom.h: 18: I2C_Write(adress);
 20115  0072A4  C005  F002         	movff	i2writeEEPROM_ext@adress,i2I2C_Write@d
 20116  0072A8  6A03               	clrf	i2I2C_Write@d+1,c
 20117  0072AA  EC2C  F037         	call	i2_I2C_Write	;wreg free
 20118                           
 20119                           ;eeprom.h: 19: I2C_Write(data);
 20120  0072AE  C004  F002         	movff	i2writeEEPROM_ext@data,i2I2C_Write@d
 20121  0072B2  6A03               	clrf	i2I2C_Write@d+1,c
 20122  0072B4  EC2C  F037         	call	i2_I2C_Write	;wreg free
 20123                           
 20124                           ;eeprom.h: 20: I2C_Stop();
 20125  0072B8  EC0E  F037         	call	i2_I2C_Stop	;wreg free
 20126                           
 20127                           ;eeprom.h: 21: delay(15);
 20128  0072BC  0E00               	movlw	0
 20129  0072BE  6E02               	movwf	i2delay@x+1,c
 20130  0072C0  0E0F               	movlw	15
 20131  0072C2  6E01               	movwf	i2delay@x,c
 20132  0072C4  EC01  F038         	call	i2_delay	;wreg free
 20133  0072C8  0012               	return		;funcret
 20134  0072CA  FFFF               	dw	65535	; errata NOP
 20135  0072CC                     __end_ofi2_writeEEPROM_ext:
 20136                           	opt stack 0
 20137                           tosu	equ	0xFFF
 20138                           tosh	equ	0xFFE
 20139                           tosl	equ	0xFFD
 20140                           pclatu	equ	0xFFB
 20141                           pclath	equ	0xFFA
 20142                           tblptru	equ	0xFF8
 20143                           tblptrh	equ	0xFF7
 20144                           tblptrl	equ	0xFF6
 20145                           tablat	equ	0xFF5
 20146                           prodh	equ	0xFF4
 20147                           prodl	equ	0xFF3
 20148                           intcon	equ	0xFF2
 20149                           indf0	equ	0xFEF
 20150                           postinc0	equ	0xFEE
 20151                           fsr0h	equ	0xFEA
 20152                           fsr0l	equ	0xFE9
 20153                           wreg	equ	0xFE8
 20154                           postdec1	equ	0xFE5
 20155                           fsr1h	equ	0xFE2
 20156                           fsr1l	equ	0xFE1
 20157                           indf2	equ	0xFDF
 20158                           postinc2	equ	0xFDE
 20159                           postdec2	equ	0xFDD
 20160                           fsr2h	equ	0xFDA
 20161                           fsr2l	equ	0xFD9
 20162                           status	equ	0xFD8
 20163                           
 20164 ;; *************** function i2_delay *****************
 20165 ;; Defined at:
 20166 ;;		line 16 in file "function.c"
 20167 ;; Parameters:    Size  Location     Type
 20168 ;;  x               2    0[COMRAM] int 
 20169 ;; Auto vars:     Size  Location     Type
 20170 ;;		None
 20171 ;; Return value:  Size  Location     Type
 20172 ;;                  1    wreg      void 
 20173 ;; Registers used:
 20174 ;;		wreg, status,2, status,0
 20175 ;; Tracked objects:
 20176 ;;		On entry : 0/0
 20177 ;;		On exit  : 0/0
 20178 ;;		Unchanged: 0/0
 20179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20180 ;;      Params:         2       0       0       0       0       0       0
 20181 ;;      Locals:         0       0       0       0       0       0       0
 20182 ;;      Temps:          1       0       0       0       0       0       0
 20183 ;;      Totals:         3       0       0       0       0       0       0
 20184 ;;Total ram usage:        3 bytes
 20185 ;; Hardware stack levels used:    1
 20186 ;; This function calls:
 20187 ;;		Nothing
 20188 ;; This function is called by:
 20189 ;;		i2_writeEEPROM_ext
 20190 ;; This function uses a non-reentrant model
 20191 ;;
 20192                           
 20193                           	psect	text82
 20194  007002                     __ptext82:
 20195                           	opt stack 0
 20196  007002                     i2_delay:
 20197                           	opt stack 0
 20198  007002  FFFF               	dw	65535	; assembler added errata NOP
 20199                           
 20200                           ;function.c: 17: while (x--) {
 20201                           
 20202                           ;incstack = 0
 20203  007004  D00B               	goto	i2l988
 20204  007006  FFFF               	dw	65535	; assembler added errata NOP
 20205  007008                     i2l5254:
 20206                           
 20207                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 20208  007008  0E02               	movlw	2
 20209  00700A  6E03               	movwf	??i2_delay& (0+255),c
 20210  00700C  0EF2               	movlw	242
 20211  00700E                     i2u897_47:
 20212  00700E  FFFF               	dw	65535	; errata NOP
 20213  007010  2EE8               	decfsz	wreg,f,c
 20214  007012  D7FD               	bra	i2u897_47
 20215  007014  2E03               	decfsz	??i2_delay& (0+255),f,c
 20216  007016  D7FB               	bra	i2u897_47
 20217  007018  D000               	nop2	
 20218  00701A  0004               	clrwdt		;# 
 20219  00701C                     i2l988:
 20220  00701C  FFFF               	dw	65535	; assembler added errata NOP
 20221  00701E  0601               	decf	i2delay@x,f,c
 20222  007020  A0D8               	btfss	status,0,c
 20223  007022  0602               	decf	i2delay@x+1,f,c
 20224  007024  2801               	incf	i2delay@x,w,c
 20225  007026  E1F0               	bnz	i2l5254
 20226  007028  2802               	incf	i2delay@x+1,w,c
 20227  00702A  B4D8               	btfsc	status,2,c
 20228  00702C  0012               	return		;funcret
 20229  00702E  FFFF               	dw	65535	; assembler added errata NOP
 20230  007030  D7EA               	goto	i2l989
 20231  007032  FFFF               	dw	65535	; errata NOP
 20232  007034                     __end_ofi2_delay:
 20233                           	opt stack 0
 20234                           tosu	equ	0xFFF
 20235                           tosh	equ	0xFFE
 20236                           tosl	equ	0xFFD
 20237                           pclatu	equ	0xFFB
 20238                           pclath	equ	0xFFA
 20239                           tblptru	equ	0xFF8
 20240                           tblptrh	equ	0xFF7
 20241                           tblptrl	equ	0xFF6
 20242                           tablat	equ	0xFF5
 20243                           prodh	equ	0xFF4
 20244                           prodl	equ	0xFF3
 20245                           intcon	equ	0xFF2
 20246                           indf0	equ	0xFEF
 20247                           postinc0	equ	0xFEE
 20248                           fsr0h	equ	0xFEA
 20249                           fsr0l	equ	0xFE9
 20250                           wreg	equ	0xFE8
 20251                           postdec1	equ	0xFE5
 20252                           fsr1h	equ	0xFE2
 20253                           fsr1l	equ	0xFE1
 20254                           indf2	equ	0xFDF
 20255                           postinc2	equ	0xFDE
 20256                           postdec2	equ	0xFDD
 20257                           fsr2h	equ	0xFDA
 20258                           fsr2l	equ	0xFD9
 20259                           status	equ	0xFD8
 20260                           
 20261 ;; *************** function i2_I2C_Write *****************
 20262 ;; Defined at:
 20263 ;;		line 42 in file "I2C.c"
 20264 ;; Parameters:    Size  Location     Type
 20265 ;;  d               2    1[COMRAM] unsigned int 
 20266 ;; Auto vars:     Size  Location     Type
 20267 ;;		None
 20268 ;; Return value:  Size  Location     Type
 20269 ;;                  1    wreg      void 
 20270 ;; Registers used:
 20271 ;;		wreg, status,2, status,0, cstack
 20272 ;; Tracked objects:
 20273 ;;		On entry : 0/0
 20274 ;;		On exit  : 0/0
 20275 ;;		Unchanged: 0/0
 20276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20277 ;;      Params:         2       0       0       0       0       0       0
 20278 ;;      Locals:         0       0       0       0       0       0       0
 20279 ;;      Temps:          0       0       0       0       0       0       0
 20280 ;;      Totals:         2       0       0       0       0       0       0
 20281 ;;Total ram usage:        2 bytes
 20282 ;; Hardware stack levels used:    1
 20283 ;; Hardware stack levels required when called:    1
 20284 ;; This function calls:
 20285 ;;		i2_I2C_Wait
 20286 ;; This function is called by:
 20287 ;;		i2_getDS1307TimeDate
 20288 ;;		i2_RTC_Init
 20289 ;;		i2_writeEEPROM_ext
 20290 ;; This function uses a non-reentrant model
 20291 ;;
 20292                           
 20293                           	psect	text83
 20294  006E58                     __ptext83:
 20295                           	opt stack 0
 20296  006E58                     i2_I2C_Write:
 20297                           	opt stack 0
 20298  006E58  FFFF               	dw	65535	; assembler added errata NOP
 20299                           
 20300                           ;I2C.c: 43: I2C_Wait();
 20301                           
 20302                           ;incstack = 0
 20303  006E5A  EC5F  F037         	call	i2_I2C_Wait	;wreg free
 20304                           
 20305                           ;I2C.c: 44: SSPBUF = d;
 20306  006E5E  C002  FFC9         	movff	i2I2C_Write@d,4041	;volatile
 20307  006E62  0012               	return		;funcret
 20308  006E64  FFFF               	dw	65535	; errata NOP
 20309  006E66                     __end_ofi2_I2C_Write:
 20310                           	opt stack 0
 20311                           tosu	equ	0xFFF
 20312                           tosh	equ	0xFFE
 20313                           tosl	equ	0xFFD
 20314                           pclatu	equ	0xFFB
 20315                           pclath	equ	0xFFA
 20316                           tblptru	equ	0xFF8
 20317                           tblptrh	equ	0xFF7
 20318                           tblptrl	equ	0xFF6
 20319                           tablat	equ	0xFF5
 20320                           prodh	equ	0xFF4
 20321                           prodl	equ	0xFF3
 20322                           intcon	equ	0xFF2
 20323                           indf0	equ	0xFEF
 20324                           postinc0	equ	0xFEE
 20325                           fsr0h	equ	0xFEA
 20326                           fsr0l	equ	0xFE9
 20327                           wreg	equ	0xFE8
 20328                           postdec1	equ	0xFE5
 20329                           fsr1h	equ	0xFE2
 20330                           fsr1l	equ	0xFE1
 20331                           indf2	equ	0xFDF
 20332                           postinc2	equ	0xFDE
 20333                           postdec2	equ	0xFDD
 20334                           fsr2h	equ	0xFDA
 20335                           fsr2l	equ	0xFD9
 20336                           status	equ	0xFD8
 20337                           
 20338 ;; *************** function i2_I2C_Stop *****************
 20339 ;; Defined at:
 20340 ;;		line 36 in file "I2C.c"
 20341 ;; Parameters:    Size  Location     Type
 20342 ;;		None
 20343 ;; Auto vars:     Size  Location     Type
 20344 ;;		None
 20345 ;; Return value:  Size  Location     Type
 20346 ;;                  1    wreg      void 
 20347 ;; Registers used:
 20348 ;;		wreg, status,2, status,0, cstack
 20349 ;; Tracked objects:
 20350 ;;		On entry : 0/0
 20351 ;;		On exit  : 0/0
 20352 ;;		Unchanged: 0/0
 20353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20354 ;;      Params:         0       0       0       0       0       0       0
 20355 ;;      Locals:         0       0       0       0       0       0       0
 20356 ;;      Temps:          0       0       0       0       0       0       0
 20357 ;;      Totals:         0       0       0       0       0       0       0
 20358 ;;Total ram usage:        0 bytes
 20359 ;; Hardware stack levels used:    1
 20360 ;; Hardware stack levels required when called:    1
 20361 ;; This function calls:
 20362 ;;		i2_I2C_Wait
 20363 ;; This function is called by:
 20364 ;;		i2_getDS1307TimeDate
 20365 ;;		i2_RTC_Init
 20366 ;;		i2_writeEEPROM_ext
 20367 ;; This function uses a non-reentrant model
 20368 ;;
 20369                           
 20370                           	psect	text84
 20371  006E1C                     __ptext84:
 20372                           	opt stack 0
 20373  006E1C                     i2_I2C_Stop:
 20374                           	opt stack 0
 20375  006E1C  FFFF               	dw	65535	; assembler added errata NOP
 20376                           
 20377                           ;I2C.c: 37: I2C_Wait();
 20378                           
 20379                           ;incstack = 0
 20380  006E1E  EC5F  F037         	call	i2_I2C_Wait	;wreg free
 20381                           
 20382                           ;I2C.c: 38: PEN = 1;
 20383  006E22  84C5               	bsf	4037,2,c	;volatile
 20384  006E24  0012               	return		;funcret
 20385  006E26  FFFF               	dw	65535	; errata NOP
 20386  006E28                     __end_ofi2_I2C_Stop:
 20387                           	opt stack 0
 20388                           tosu	equ	0xFFF
 20389                           tosh	equ	0xFFE
 20390                           tosl	equ	0xFFD
 20391                           pclatu	equ	0xFFB
 20392                           pclath	equ	0xFFA
 20393                           tblptru	equ	0xFF8
 20394                           tblptrh	equ	0xFF7
 20395                           tblptrl	equ	0xFF6
 20396                           tablat	equ	0xFF5
 20397                           prodh	equ	0xFF4
 20398                           prodl	equ	0xFF3
 20399                           intcon	equ	0xFF2
 20400                           indf0	equ	0xFEF
 20401                           postinc0	equ	0xFEE
 20402                           fsr0h	equ	0xFEA
 20403                           fsr0l	equ	0xFE9
 20404                           wreg	equ	0xFE8
 20405                           postdec1	equ	0xFE5
 20406                           fsr1h	equ	0xFE2
 20407                           fsr1l	equ	0xFE1
 20408                           indf2	equ	0xFDF
 20409                           postinc2	equ	0xFDE
 20410                           postdec2	equ	0xFDD
 20411                           fsr2h	equ	0xFDA
 20412                           fsr2l	equ	0xFD9
 20413                           status	equ	0xFD8
 20414                           
 20415 ;; *************** function i2_I2C_Start *****************
 20416 ;; Defined at:
 20417 ;;		line 26 in file "I2C.c"
 20418 ;; Parameters:    Size  Location     Type
 20419 ;;		None
 20420 ;; Auto vars:     Size  Location     Type
 20421 ;;		None
 20422 ;; Return value:  Size  Location     Type
 20423 ;;                  1    wreg      void 
 20424 ;; Registers used:
 20425 ;;		wreg, status,2, status,0, cstack
 20426 ;; Tracked objects:
 20427 ;;		On entry : 0/0
 20428 ;;		On exit  : 0/0
 20429 ;;		Unchanged: 0/0
 20430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20431 ;;      Params:         0       0       0       0       0       0       0
 20432 ;;      Locals:         0       0       0       0       0       0       0
 20433 ;;      Temps:          0       0       0       0       0       0       0
 20434 ;;      Totals:         0       0       0       0       0       0       0
 20435 ;;Total ram usage:        0 bytes
 20436 ;; Hardware stack levels used:    1
 20437 ;; Hardware stack levels required when called:    1
 20438 ;; This function calls:
 20439 ;;		i2_I2C_Wait
 20440 ;; This function is called by:
 20441 ;;		i2_getDS1307TimeDate
 20442 ;;		i2_RTC_Init
 20443 ;;		i2_writeEEPROM_ext
 20444 ;; This function uses a non-reentrant model
 20445 ;;
 20446                           
 20447                           	psect	text85
 20448  006E10                     __ptext85:
 20449                           	opt stack 0
 20450  006E10                     i2_I2C_Start:
 20451                           	opt stack 0
 20452  006E10  FFFF               	dw	65535	; assembler added errata NOP
 20453                           
 20454                           ;I2C.c: 27: I2C_Wait();
 20455                           
 20456                           ;incstack = 0
 20457  006E12  EC5F  F037         	call	i2_I2C_Wait	;wreg free
 20458                           
 20459                           ;I2C.c: 28: SEN = 1;
 20460  006E16  80C5               	bsf	4037,0,c	;volatile
 20461  006E18  0012               	return		;funcret
 20462  006E1A  FFFF               	dw	65535	; errata NOP
 20463  006E1C                     __end_ofi2_I2C_Start:
 20464                           	opt stack 0
 20465                           tosu	equ	0xFFF
 20466                           tosh	equ	0xFFE
 20467                           tosl	equ	0xFFD
 20468                           pclatu	equ	0xFFB
 20469                           pclath	equ	0xFFA
 20470                           tblptru	equ	0xFF8
 20471                           tblptrh	equ	0xFF7
 20472                           tblptrl	equ	0xFF6
 20473                           tablat	equ	0xFF5
 20474                           prodh	equ	0xFF4
 20475                           prodl	equ	0xFF3
 20476                           intcon	equ	0xFF2
 20477                           indf0	equ	0xFEF
 20478                           postinc0	equ	0xFEE
 20479                           fsr0h	equ	0xFEA
 20480                           fsr0l	equ	0xFE9
 20481                           wreg	equ	0xFE8
 20482                           postdec1	equ	0xFE5
 20483                           fsr1h	equ	0xFE2
 20484                           fsr1l	equ	0xFE1
 20485                           indf2	equ	0xFDF
 20486                           postinc2	equ	0xFDE
 20487                           postdec2	equ	0xFDD
 20488                           fsr2h	equ	0xFDA
 20489                           fsr2l	equ	0xFD9
 20490                           status	equ	0xFD8
 20491                           
 20492 ;; *************** function i2_I2C_Wait *****************
 20493 ;; Defined at:
 20494 ;;		line 22 in file "I2C.c"
 20495 ;; Parameters:    Size  Location     Type
 20496 ;;		None
 20497 ;; Auto vars:     Size  Location     Type
 20498 ;;		None
 20499 ;; Return value:  Size  Location     Type
 20500 ;;                  1    wreg      void 
 20501 ;; Registers used:
 20502 ;;		wreg, status,2, status,0
 20503 ;; Tracked objects:
 20504 ;;		On entry : 0/0
 20505 ;;		On exit  : 0/0
 20506 ;;		Unchanged: 0/0
 20507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20508 ;;      Params:         0       0       0       0       0       0       0
 20509 ;;      Locals:         0       0       0       0       0       0       0
 20510 ;;      Temps:          1       0       0       0       0       0       0
 20511 ;;      Totals:         1       0       0       0       0       0       0
 20512 ;;Total ram usage:        1 bytes
 20513 ;; Hardware stack levels used:    1
 20514 ;; This function calls:
 20515 ;;		Nothing
 20516 ;; This function is called by:
 20517 ;;		i2_I2C_Start
 20518 ;;		i2_I2C_Restart
 20519 ;;		i2_I2C_Stop
 20520 ;;		i2_I2C_Write
 20521 ;;		i2_I2C_Read
 20522 ;; This function uses a non-reentrant model
 20523 ;;
 20524                           
 20525                           	psect	text86
 20526  006EBE                     __ptext86:
 20527                           	opt stack 0
 20528  006EBE                     i2_I2C_Wait:
 20529                           	opt stack 0
 20530  006EBE  FFFF               	dw	65535	; assembler added errata NOP
 20531                           
 20532                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 20533                           
 20534                           ;incstack = 0
 20535  006EC0  B4C7               	btfsc	4039,2,c	;volatile
 20536  006EC2  D7FD               	goto	i2_I2C_Wait
 20537  006EC4  CFC5 F001          	movff	4037,??i2_I2C_Wait	;volatile
 20538  006EC8  0E1F               	movlw	31
 20539  006ECA  1601               	andwf	??i2_I2C_Wait,f,c
 20540  006ECC  B4D8               	btfsc	status,2,c
 20541  006ECE  0012               	return		;funcret
 20542  006ED0  FFFF               	dw	65535	; assembler added errata NOP
 20543  006ED2  D7F5               	goto	i2_I2C_Wait
 20544  006ED4  FFFF               	dw	65535	; errata NOP
 20545  006ED6                     __end_ofi2_I2C_Wait:
 20546                           	opt stack 0
 20547                           tosu	equ	0xFFF
 20548                           tosh	equ	0xFFE
 20549                           tosl	equ	0xFFD
 20550                           pclatu	equ	0xFFB
 20551                           pclath	equ	0xFFA
 20552                           tblptru	equ	0xFF8
 20553                           tblptrh	equ	0xFF7
 20554                           tblptrl	equ	0xFF6
 20555                           tablat	equ	0xFF5
 20556                           prodh	equ	0xFF4
 20557                           prodl	equ	0xFF3
 20558                           intcon	equ	0xFF2
 20559                           indf0	equ	0xFEF
 20560                           postinc0	equ	0xFEE
 20561                           fsr0h	equ	0xFEA
 20562                           fsr0l	equ	0xFE9
 20563                           wreg	equ	0xFE8
 20564                           postdec1	equ	0xFE5
 20565                           fsr1h	equ	0xFE2
 20566                           fsr1l	equ	0xFE1
 20567                           indf2	equ	0xFDF
 20568                           postinc2	equ	0xFDE
 20569                           postdec2	equ	0xFDD
 20570                           fsr2h	equ	0xFDA
 20571                           fsr2l	equ	0xFD9
 20572                           status	equ	0xFD8
 20573                           
 20574 ;; *************** function _readButtons *****************
 20575 ;; Defined at:
 20576 ;;		line 25 in file "teclado.h"
 20577 ;; Parameters:    Size  Location     Type
 20578 ;;		None
 20579 ;; Auto vars:     Size  Location     Type
 20580 ;;		None
 20581 ;; Return value:  Size  Location     Type
 20582 ;;                  1    wreg      void 
 20583 ;; Registers used:
 20584 ;;		wreg, status,2
 20585 ;; Tracked objects:
 20586 ;;		On entry : 0/0
 20587 ;;		On exit  : 0/0
 20588 ;;		Unchanged: 0/0
 20589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20590 ;;      Params:         0       0       0       0       0       0       0
 20591 ;;      Locals:         0       0       0       0       0       0       0
 20592 ;;      Temps:          0       0       0       0       0       0       0
 20593 ;;      Totals:         0       0       0       0       0       0       0
 20594 ;;Total ram usage:        0 bytes
 20595 ;; Hardware stack levels used:    1
 20596 ;; This function calls:
 20597 ;;		Nothing
 20598 ;; This function is called by:
 20599 ;;		_TIMER
 20600 ;; This function uses a non-reentrant model
 20601 ;;
 20602                           
 20603                           	psect	text87
 20604  00796E                     __ptext87:
 20605                           	opt stack 0
 20606  00796E                     _readButtons:
 20607                           	opt stack 0
 20608  00796E  FFFF               	dw	65535	; assembler added errata NOP
 20609                           
 20610                           ;teclado.h: 26: if (!PORTBbits.RB2) {
 20611                           
 20612                           ;incstack = 0
 20613  007970  B481               	btfsc	3969,2,c	;volatile
 20614  007972  D002               	goto	i2l448
 20615                           
 20616                           ;teclado.h: 27: flag_b_esc = 1;
 20617  007974  0E01               	movlw	1
 20618  007976  6E65               	movwf	_flag_b_esc,c
 20619  007978                     i2l448:
 20620  007978  FFFF               	dw	65535	; assembler added errata NOP
 20621                           
 20622                           ;teclado.h: 28: }
 20623                           ;teclado.h: 29: if (PORTBbits.RB2 && flag_b_esc) {
 20624  00797A  A481               	btfss	3969,2,c	;volatile
 20625  00797C  D007               	goto	i2l449
 20626  00797E  5065               	movf	_flag_b_esc,w,c
 20627  007980  B4D8               	btfsc	status,2,c
 20628  007982  D004               	goto	i2l449
 20629                           
 20630                           ;teclado.h: 30: _b_esc = 1;
 20631  007984  0E01               	movlw	1
 20632  007986  6E64               	movwf	__b_esc,c
 20633                           
 20634                           ;teclado.h: 31: flag_b_esc = 0;
 20635  007988  0E00               	movlw	0
 20636  00798A  6E65               	movwf	_flag_b_esc,c
 20637  00798C                     i2l449:
 20638  00798C  FFFF               	dw	65535	; assembler added errata NOP
 20639                           
 20640                           ;teclado.h: 32: }
 20641                           ;teclado.h: 34: if (!PORTBbits.RB4) {
 20642  00798E  B881               	btfsc	3969,4,c	;volatile
 20643  007990  D002               	goto	i2l450
 20644                           
 20645                           ;teclado.h: 35: flag_b_menos = 1;
 20646  007992  0E01               	movlw	1
 20647  007994  6E63               	movwf	_flag_b_menos,c
 20648  007996                     i2l450:
 20649  007996  FFFF               	dw	65535	; assembler added errata NOP
 20650                           
 20651                           ;teclado.h: 36: }
 20652                           ;teclado.h: 37: if (PORTBbits.RB4 && flag_b_menos) {
 20653  007998  A881               	btfss	3969,4,c	;volatile
 20654  00799A  D007               	goto	i2l451
 20655  00799C  5063               	movf	_flag_b_menos,w,c
 20656  00799E  B4D8               	btfsc	status,2,c
 20657  0079A0  D004               	goto	i2l451
 20658                           
 20659                           ;teclado.h: 38: _b_menos = 1;
 20660  0079A2  0E01               	movlw	1
 20661  0079A4  6E62               	movwf	__b_menos,c
 20662                           
 20663                           ;teclado.h: 39: flag_b_menos = 0;
 20664  0079A6  0E00               	movlw	0
 20665  0079A8  6E63               	movwf	_flag_b_menos,c
 20666  0079AA                     i2l451:
 20667  0079AA  FFFF               	dw	65535	; assembler added errata NOP
 20668                           
 20669                           ;teclado.h: 40: }
 20670                           ;teclado.h: 42: if (!PORTBbits.RB5) {
 20671  0079AC  BA81               	btfsc	3969,5,c	;volatile
 20672  0079AE  D002               	goto	i2l452
 20673                           
 20674                           ;teclado.h: 43: flag_b_mais = 1;
 20675  0079B0  0E01               	movlw	1
 20676  0079B2  6E61               	movwf	_flag_b_mais,c
 20677  0079B4                     i2l452:
 20678  0079B4  FFFF               	dw	65535	; assembler added errata NOP
 20679                           
 20680                           ;teclado.h: 44: }
 20681                           ;teclado.h: 45: if (PORTBbits.RB5 && flag_b_mais) {
 20682  0079B6  AA81               	btfss	3969,5,c	;volatile
 20683  0079B8  D007               	goto	i2l453
 20684  0079BA  5061               	movf	_flag_b_mais,w,c
 20685  0079BC  B4D8               	btfsc	status,2,c
 20686  0079BE  D004               	goto	i2l453
 20687                           
 20688                           ;teclado.h: 46: _b_mais = 1;
 20689  0079C0  0E01               	movlw	1
 20690  0079C2  6E60               	movwf	__b_mais,c
 20691                           
 20692                           ;teclado.h: 47: flag_b_mais = 0;
 20693  0079C4  0E00               	movlw	0
 20694  0079C6  6E61               	movwf	_flag_b_mais,c
 20695  0079C8                     i2l453:
 20696  0079C8  FFFF               	dw	65535	; assembler added errata NOP
 20697                           
 20698                           ;teclado.h: 48: }
 20699                           ;teclado.h: 50: if (!PORTBbits.RB3) {
 20700  0079CA  B681               	btfsc	3969,3,c	;volatile
 20701  0079CC  D002               	goto	i2l454
 20702                           
 20703                           ;teclado.h: 51: flag_b_ok = 1;
 20704  0079CE  0E01               	movlw	1
 20705  0079D0  6E5F               	movwf	_flag_b_ok,c
 20706  0079D2                     i2l454:
 20707  0079D2  FFFF               	dw	65535	; assembler added errata NOP
 20708                           
 20709                           ;teclado.h: 52: }
 20710                           ;teclado.h: 53: if (PORTBbits.RB3 && flag_b_ok) {
 20711  0079D4  A681               	btfss	3969,3,c	;volatile
 20712  0079D6  D007               	goto	i2l455
 20713  0079D8  505F               	movf	_flag_b_ok,w,c
 20714  0079DA  B4D8               	btfsc	status,2,c
 20715  0079DC  D004               	goto	i2l455
 20716                           
 20717                           ;teclado.h: 54: _b_ok = 1;
 20718  0079DE  0E01               	movlw	1
 20719  0079E0  6E5E               	movwf	__b_ok,c
 20720                           
 20721                           ;teclado.h: 55: flag_b_ok = 0;
 20722  0079E2  0E00               	movlw	0
 20723  0079E4  6E5F               	movwf	_flag_b_ok,c
 20724  0079E6                     i2l455:
 20725  0079E6  FFFF               	dw	65535	; assembler added errata NOP
 20726  0079E8  0012               	return		;funcret
 20727  0079EA  FFFF               	dw	65535	; errata NOP
 20728  0079EC                     __end_of_readButtons:
 20729                           	opt stack 0
 20730                           tosu	equ	0xFFF
 20731                           tosh	equ	0xFFE
 20732                           tosl	equ	0xFFD
 20733                           pclatu	equ	0xFFB
 20734                           pclath	equ	0xFFA
 20735                           tblptru	equ	0xFF8
 20736                           tblptrh	equ	0xFF7
 20737                           tblptrl	equ	0xFF6
 20738                           tablat	equ	0xFF5
 20739                           prodh	equ	0xFF4
 20740                           prodl	equ	0xFF3
 20741                           intcon	equ	0xFF2
 20742                           indf0	equ	0xFEF
 20743                           postinc0	equ	0xFEE
 20744                           fsr0h	equ	0xFEA
 20745                           fsr0l	equ	0xFE9
 20746                           wreg	equ	0xFE8
 20747                           postdec1	equ	0xFE5
 20748                           fsr1h	equ	0xFE2
 20749                           fsr1l	equ	0xFE1
 20750                           indf2	equ	0xFDF
 20751                           postinc2	equ	0xFDE
 20752                           postdec2	equ	0xFDD
 20753                           fsr2h	equ	0xFDA
 20754                           fsr2l	equ	0xFD9
 20755                           status	equ	0xFD8
 20756                           
 20757 ;; *************** function _lerTransdutor *****************
 20758 ;; Defined at:
 20759 ;;		line 7 in file "transdutor.h"
 20760 ;; Parameters:    Size  Location     Type
 20761 ;;		None
 20762 ;; Auto vars:     Size  Location     Type
 20763 ;;  tensao          3   45[COMRAM] float 
 20764 ;;  _pressao        3   42[COMRAM] float 
 20765 ;;  i               1   41[COMRAM] unsigned char 
 20766 ;; Return value:  Size  Location     Type
 20767 ;;                  1    wreg      void 
 20768 ;; Registers used:
 20769 ;;		wreg, status,2, status,0, cstack
 20770 ;; Tracked objects:
 20771 ;;		On entry : 0/0
 20772 ;;		On exit  : 0/0
 20773 ;;		Unchanged: 0/0
 20774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20775 ;;      Params:         0       0       0       0       0       0       0
 20776 ;;      Locals:         7       0       0       0       0       0       0
 20777 ;;      Temps:          0       0       0       0       0       0       0
 20778 ;;      Totals:         7       0       0       0       0       0       0
 20779 ;;Total ram usage:        7 bytes
 20780 ;; Hardware stack levels used:    1
 20781 ;; Hardware stack levels required when called:    2
 20782 ;; This function calls:
 20783 ;;		___ftadd
 20784 ;;		___ftdiv
 20785 ;;		___ftge
 20786 ;;		___ftmul
 20787 ;;		___fttol
 20788 ;;		___lwtoft
 20789 ;;		_readADC
 20790 ;; This function is called by:
 20791 ;;		_TIMER
 20792 ;; This function uses a non-reentrant model
 20793 ;;
 20794                           
 20795                           	psect	text88
 20796  001F5E                     __ptext88:
 20797                           	opt stack 0
 20798  001F5E                     _lerTransdutor:
 20799                           	opt stack 0
 20800  001F5E  FFFF               	dw	65535	; assembler added errata NOP
 20801                           
 20802                           ;transdutor.h: 8: char i = 0;
 20803                           
 20804                           ;incstack = 0
 20805  001F60  0E00               	movlw	0
 20806  001F62  6E2A               	movwf	lerTransdutor@i,c
 20807                           
 20808                           ;transdutor.h: 9: float tensao = 0, _pressao = 0;
 20809  001F64  0E00               	movlw	0
 20810  001F66  6E2E               	movwf	lerTransdutor@tensao,c
 20811  001F68  0E00               	movlw	0
 20812  001F6A  6E2F               	movwf	lerTransdutor@tensao+1,c
 20813  001F6C  0E00               	movlw	0
 20814  001F6E  6E30               	movwf	lerTransdutor@tensao+2,c
 20815  001F70  0E00               	movlw	0
 20816  001F72  6E2B               	movwf	lerTransdutor@_pressao,c
 20817  001F74  0E00               	movlw	0
 20818  001F76  6E2C               	movwf	lerTransdutor@_pressao+1,c
 20819  001F78  0E00               	movlw	0
 20820  001F7A  6E2D               	movwf	lerTransdutor@_pressao+2,c
 20821                           
 20822                           ;transdutor.h: 10: for (i = 0; i < 9; i++) {
 20823  001F7C  0E00               	movlw	0
 20824  001F7E  6E2A               	movwf	lerTransdutor@i,c
 20825  001F80                     i2l6328:
 20826  001F80  FFFF               	dw	65535	; assembler added errata NOP
 20827  001F82  0E08               	movlw	8
 20828  001F84  642A               	cpfsgt	lerTransdutor@i,c
 20829  001F86  D001               	goto	i2l224
 20830  001F88  D02D               	goto	i2u672_40
 20831  001F8A                     i2l224:
 20832  001F8A  FFFF               	dw	65535	; assembler added errata NOP
 20833                           
 20834                           ;transdutor.h: 11: tensao += readADC()*0.004887586;
 20835  001F8C  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 20836  001F90  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 20837  001F94  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 20838  001F98  0E28               	movlw	40
 20839  001F9A  6E0F               	movwf	___ftmul@f2,c
 20840  001F9C  0EA0               	movlw	160
 20841  001F9E  6E10               	movwf	___ftmul@f2+1,c
 20842  001FA0  0E3B               	movlw	59
 20843  001FA2  6E11               	movwf	___ftmul@f2+2,c
 20844  001FA4  EC99  F037         	call	_readADC	;wreg free
 20845  001FA8  C001  F009         	movff	?_readADC,___lwtoft@c
 20846  001FAC  C002  F00A         	movff	?_readADC+1,___lwtoft@c+1
 20847  001FB0  EC85  F037         	call	___lwtoft	;wreg free
 20848  001FB4  C009  F00C         	movff	?___lwtoft,___ftmul@f1
 20849  001FB8  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
 20850  001FBC  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
 20851  001FC0  ECEB  F019         	call	___ftmul	;wreg free
 20852  001FC4  C00C  F01E         	movff	?___ftmul,___ftadd@f2
 20853  001FC8  C00D  F01F         	movff	?___ftmul+1,___ftadd@f2+1
 20854  001FCC  C00E  F020         	movff	?___ftmul+2,___ftadd@f2+2
 20855  001FD0  EC9E  F012         	call	___ftadd	;wreg free
 20856  001FD4  C01B  F02E         	movff	?___ftadd,lerTransdutor@tensao
 20857  001FD8  C01C  F02F         	movff	?___ftadd+1,lerTransdutor@tensao+1
 20858  001FDC  C01D  F030         	movff	?___ftadd+2,lerTransdutor@tensao+2
 20859  001FE0  2A2A               	incf	lerTransdutor@i,f,c
 20860  001FE2  D7CE               	goto	i2l6328
 20861  001FE4                     i2u672_40:
 20862  001FE4  FFFF               	dw	65535	; assembler added errata NOP
 20863                           
 20864                           ;transdutor.h: 12: }
 20865                           ;transdutor.h: 13: tensao = tensao / 10;
 20866  001FE6  C02E  F01B         	movff	lerTransdutor@tensao,___ftdiv@f1
 20867  001FEA  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftdiv@f1+1
 20868  001FEE  C030  F01D         	movff	lerTransdutor@tensao+2,___ftdiv@f1+2
 20869  001FF2  0E00               	movlw	0
 20870  001FF4  6E1E               	movwf	___ftdiv@f2,c
 20871  001FF6  0E20               	movlw	32
 20872  001FF8  6E1F               	movwf	___ftdiv@f2+1,c
 20873  001FFA  0E41               	movlw	65
 20874  001FFC  6E20               	movwf	___ftdiv@f2+2,c
 20875  001FFE  EC51  F01B         	call	___ftdiv	;wreg free
 20876  002002  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 20877  002006  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 20878  00200A  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 20879                           
 20880                           ;transdutor.h: 14: _tensao += (float) tensao;
 20881  00200E  C04C  F01B         	movff	__tensao,___ftadd@f1
 20882  002012  C04D  F01C         	movff	__tensao+1,___ftadd@f1+1
 20883  002016  C04E  F01D         	movff	__tensao+2,___ftadd@f1+2
 20884  00201A  C02E  F01E         	movff	lerTransdutor@tensao,___ftadd@f2
 20885  00201E  C02F  F01F         	movff	lerTransdutor@tensao+1,___ftadd@f2+1
 20886  002022  C030  F020         	movff	lerTransdutor@tensao+2,___ftadd@f2+2
 20887  002026  EC9E  F012         	call	___ftadd	;wreg free
 20888  00202A  C01B  F04C         	movff	?___ftadd,__tensao
 20889  00202E  C01C  F04D         	movff	?___ftadd+1,__tensao+1
 20890  002032  C01D  F04E         	movff	?___ftadd+2,__tensao+2
 20891                           
 20892                           ;transdutor.h: 15: qtd_leitura++;
 20893  002036  2A6D               	incf	_qtd_leitura,f,c
 20894                           
 20895                           ;transdutor.h: 17: if (tensao < 0.4) {
 20896  002038  C02E  F001         	movff	lerTransdutor@tensao,___ftge@ff1
 20897  00203C  C02F  F002         	movff	lerTransdutor@tensao+1,___ftge@ff1+1
 20898  002040  C030  F003         	movff	lerTransdutor@tensao+2,___ftge@ff1+2
 20899  002044  0ECD               	movlw	205
 20900  002046  6E04               	movwf	___ftge@ff2,c
 20901  002048  0ECC               	movlw	204
 20902  00204A  6E05               	movwf	___ftge@ff2+1,c
 20903  00204C  0E3E               	movlw	62
 20904  00204E  6E06               	movwf	___ftge@ff2+2,c
 20905  002050  EC28  F01E         	call	___ftge	;wreg free
 20906  002054  B0D8               	btfsc	status,0,c
 20907  002056  D005               	goto	i2l226
 20908                           
 20909                           ;transdutor.h: 18: pressao = -10;
 20910  002058  0EFF               	movlw	255
 20911  00205A  0100               	movlb	0	; () banked
 20912  00205C  6FF9               	movwf	(_pressao+1)& (0+255),b
 20913  00205E  0EF6               	movlw	246
 20914  002060  D015               	goto	L44
 20915  002062                     i2l226:
 20916  002062  FFFF               	dw	65535	; assembler added errata NOP
 20917                           
 20918                           ; BSR set to: 0
 20919  002064  0E00               	movlw	0
 20920  002066  6E01               	movwf	___ftge@ff1,c
 20921  002068  0E90               	movlw	144
 20922  00206A  6E02               	movwf	___ftge@ff1+1,c
 20923  00206C  0E40               	movlw	64
 20924  00206E  6E03               	movwf	___ftge@ff1+2,c
 20925  002070  C02E  F004         	movff	lerTransdutor@tensao,___ftge@ff2
 20926  002074  C02F  F005         	movff	lerTransdutor@tensao+1,___ftge@ff2+1
 20927  002078  C030  F006         	movff	lerTransdutor@tensao+2,___ftge@ff2+2
 20928  00207C  EC28  F01E         	call	___ftge	;wreg free
 20929  002080  B0D8               	btfsc	status,0,c
 20930  002082  D007               	goto	i2l228
 20931                           
 20932                           ;transdutor.h: 20: pressao = 99;
 20933  002084  0E00               	movlw	0
 20934  002086  0100               	movlb	0	; () banked
 20935  002088  6FF9               	movwf	(_pressao+1)& (0+255),b
 20936  00208A  0E63               	movlw	99
 20937  00208C                     L44:
 20938  00208C  FFFF               	dw	65535	; assembler added errata NOP
 20939  00208E  6FF8               	movwf	_pressao& (0+255),b
 20940                           
 20941                           ;transdutor.h: 21: } else if (qtd_leitura >= 6) {
 20942  002090  D079               	goto	i2l230
 20943  002092                     i2l228:
 20944  002092  FFFF               	dw	65535	; assembler added errata NOP
 20945                           
 20946                           ; BSR set to: 0
 20947  002094  0E05               	movlw	5
 20948  002096  646D               	cpfsgt	_qtd_leitura,c
 20949  002098  D075               	goto	i2l230
 20950                           
 20951                           ;transdutor.h: 22: qtd_leitura = 0;
 20952  00209A  0E00               	movlw	0
 20953  00209C  6E6D               	movwf	_qtd_leitura,c
 20954                           
 20955                           ;transdutor.h: 23: tensao = (float) (_tensao / 6);
 20956  00209E  C04C  F01B         	movff	__tensao,___ftdiv@f1
 20957  0020A2  C04D  F01C         	movff	__tensao+1,___ftdiv@f1+1
 20958  0020A6  C04E  F01D         	movff	__tensao+2,___ftdiv@f1+2
 20959  0020AA  0E00               	movlw	0
 20960  0020AC  6E1E               	movwf	___ftdiv@f2,c
 20961  0020AE  0EC0               	movlw	192
 20962  0020B0  6E1F               	movwf	___ftdiv@f2+1,c
 20963  0020B2  0E40               	movlw	64
 20964  0020B4  6E20               	movwf	___ftdiv@f2+2,c
 20965  0020B6  EC51  F01B         	call	___ftdiv	;wreg free
 20966  0020BA  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 20967  0020BE  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 20968  0020C2  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 20969                           
 20970                           ;transdutor.h: 24: _tensao = 0;
 20971  0020C6  0E00               	movlw	0
 20972  0020C8  6E4C               	movwf	__tensao,c
 20973  0020CA  0E00               	movlw	0
 20974  0020CC  6E4D               	movwf	__tensao+1,c
 20975  0020CE  0E00               	movlw	0
 20976  0020D0  6E4E               	movwf	__tensao+2,c
 20977                           
 20978                           ;transdutor.h: 25: _pressao = tensao - 0.5;
 20979  0020D2  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 20980  0020D6  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 20981  0020DA  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 20982  0020DE  0E00               	movlw	0
 20983  0020E0  6E1E               	movwf	___ftadd@f2,c
 20984  0020E2  0E00               	movlw	0
 20985  0020E4  6E1F               	movwf	___ftadd@f2+1,c
 20986  0020E6  0EBF               	movlw	191
 20987  0020E8  6E20               	movwf	___ftadd@f2+2,c
 20988  0020EA  EC9E  F012         	call	___ftadd	;wreg free
 20989  0020EE  C01B  F02B         	movff	?___ftadd,lerTransdutor@_pressao
 20990  0020F2  C01C  F02C         	movff	?___ftadd+1,lerTransdutor@_pressao+1
 20991  0020F6  C01D  F02D         	movff	?___ftadd+2,lerTransdutor@_pressao+2
 20992                           
 20993                           ;transdutor.h: 26: _pressao = _pressao * 10 / 4;
 20994  0020FA  0E00               	movlw	0
 20995  0020FC  6E0F               	movwf	___ftmul@f2,c
 20996  0020FE  0E20               	movlw	32
 20997  002100  6E10               	movwf	___ftmul@f2+1,c
 20998  002102  0E41               	movlw	65
 20999  002104  6E11               	movwf	___ftmul@f2+2,c
 21000  002106  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 21001  00210A  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 21002  00210E  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 21003  002112  ECEB  F019         	call	___ftmul	;wreg free
 21004  002116  C00C  F01B         	movff	?___ftmul,___ftdiv@f1
 21005  00211A  C00D  F01C         	movff	?___ftmul+1,___ftdiv@f1+1
 21006  00211E  C00E  F01D         	movff	?___ftmul+2,___ftdiv@f1+2
 21007  002122  0E00               	movlw	0
 21008  002124  6E1E               	movwf	___ftdiv@f2,c
 21009  002126  0E80               	movlw	128
 21010  002128  6E1F               	movwf	___ftdiv@f2+1,c
 21011  00212A  0E40               	movlw	64
 21012  00212C  6E20               	movwf	___ftdiv@f2+2,c
 21013  00212E  EC51  F01B         	call	___ftdiv	;wreg free
 21014  002132  C01B  F02B         	movff	?___ftdiv,lerTransdutor@_pressao
 21015  002136  C01C  F02C         	movff	?___ftdiv+1,lerTransdutor@_pressao+1
 21016  00213A  C01D  F02D         	movff	?___ftdiv+2,lerTransdutor@_pressao+2
 21017                           
 21018                           ;transdutor.h: 27: if (_pressao < 0) {
 21019  00213E  AE2D               	btfss	lerTransdutor@_pressao+2,7,c
 21020  002140  D006               	goto	i2l231
 21021                           
 21022                           ;transdutor.h: 28: _pressao = 0;
 21023  002142  0E00               	movlw	0
 21024  002144  6E2B               	movwf	lerTransdutor@_pressao,c
 21025  002146  0E00               	movlw	0
 21026  002148  6E2C               	movwf	lerTransdutor@_pressao+1,c
 21027  00214A  0E00               	movlw	0
 21028  00214C  6E2D               	movwf	lerTransdutor@_pressao+2,c
 21029  00214E                     i2l231:
 21030  00214E  FFFF               	dw	65535	; assembler added errata NOP
 21031                           
 21032                           ;transdutor.h: 29: }
 21033                           ;transdutor.h: 30: pressao = _pressao * 10;
 21034  002150  0E00               	movlw	0
 21035  002152  6E0F               	movwf	___ftmul@f2,c
 21036  002154  0E20               	movlw	32
 21037  002156  6E10               	movwf	___ftmul@f2+1,c
 21038  002158  0E41               	movlw	65
 21039  00215A  6E11               	movwf	___ftmul@f2+2,c
 21040  00215C  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 21041  002160  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 21042  002164  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 21043  002168  ECEB  F019         	call	___ftmul	;wreg free
 21044  00216C  C00C  F01B         	movff	?___ftmul,___fttol@f1
 21045  002170  C00D  F01C         	movff	?___ftmul+1,___fttol@f1+1
 21046  002174  C00E  F01D         	movff	?___ftmul+2,___fttol@f1+2
 21047  002178  ECDD  F01A         	call	___fttol	;wreg free
 21048  00217C  C01B  F0F8         	movff	?___fttol,_pressao
 21049  002180  C01C  F0F9         	movff	?___fttol+1,_pressao+1
 21050  002184                     i2l230:
 21051  002184  FFFF               	dw	65535	; assembler added errata NOP
 21052  002186  0012               	return		;funcret
 21053  002188  FFFF               	dw	65535	; errata NOP
 21054  00218A                     __end_of_lerTransdutor:
 21055                           	opt stack 0
 21056                           tosu	equ	0xFFF
 21057                           tosh	equ	0xFFE
 21058                           tosl	equ	0xFFD
 21059                           pclatu	equ	0xFFB
 21060                           pclath	equ	0xFFA
 21061                           tblptru	equ	0xFF8
 21062                           tblptrh	equ	0xFF7
 21063                           tblptrl	equ	0xFF6
 21064                           tablat	equ	0xFF5
 21065                           prodh	equ	0xFF4
 21066                           prodl	equ	0xFF3
 21067                           intcon	equ	0xFF2
 21068                           indf0	equ	0xFEF
 21069                           postinc0	equ	0xFEE
 21070                           fsr0h	equ	0xFEA
 21071                           fsr0l	equ	0xFE9
 21072                           wreg	equ	0xFE8
 21073                           postdec1	equ	0xFE5
 21074                           fsr1h	equ	0xFE2
 21075                           fsr1l	equ	0xFE1
 21076                           indf2	equ	0xFDF
 21077                           postinc2	equ	0xFDE
 21078                           postdec2	equ	0xFDD
 21079                           fsr2h	equ	0xFDA
 21080                           fsr2l	equ	0xFD9
 21081                           status	equ	0xFD8
 21082                           
 21083 ;; *************** function _readADC *****************
 21084 ;; Defined at:
 21085 ;;		line 8 in file "adc.h"
 21086 ;; Parameters:    Size  Location     Type
 21087 ;;		None
 21088 ;; Auto vars:     Size  Location     Type
 21089 ;;		None
 21090 ;; Return value:  Size  Location     Type
 21091 ;;                  2    0[COMRAM] unsigned int 
 21092 ;; Registers used:
 21093 ;;		wreg, status,2, status,0
 21094 ;; Tracked objects:
 21095 ;;		On entry : 0/0
 21096 ;;		On exit  : 0/0
 21097 ;;		Unchanged: 0/0
 21098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21099 ;;      Params:         2       0       0       0       0       0       0
 21100 ;;      Locals:         0       0       0       0       0       0       0
 21101 ;;      Temps:          2       0       0       0       0       0       0
 21102 ;;      Totals:         4       0       0       0       0       0       0
 21103 ;;Total ram usage:        4 bytes
 21104 ;; Hardware stack levels used:    1
 21105 ;; This function calls:
 21106 ;;		Nothing
 21107 ;; This function is called by:
 21108 ;;		_lerTransdutor
 21109 ;; This function uses a non-reentrant model
 21110 ;;
 21111                           
 21112                           	psect	text89
 21113  006F32                     __ptext89:
 21114                           	opt stack 0
 21115  006F32                     _readADC:
 21116                           	opt stack 0
 21117  006F32  FFFF               	dw	65535	; assembler added errata NOP
 21118                           
 21119                           ;adc.h: 9: ADCON0bits.GO = 1;
 21120                           
 21121                           ;incstack = 0
 21122  006F34  84C2               	bsf	4034,2,c	;volatile
 21123                           
 21124                           ;adc.h: 10: _delay((unsigned long)((50)*(8000000/4000000.0)));
 21125  006F36  0E19               	movlw	25
 21126  006F38                     i2u898_47:
 21127  006F38  FFFF               	dw	65535	; errata NOP
 21128  006F3A  2EE8               	decfsz	wreg,f,c
 21129  006F3C  D7FD               	bra	i2u898_47
 21130  006F3E  FFFF               	dw	65535	; assembler added errata NOP
 21131  006F40  A4C2               	btfss	4034,2,c	;volatile
 21132  006F42  D7FD               	goto	i2l219
 21133                           
 21134                           ;adc.h: 12: }
 21135                           ;adc.h: 13: return((ADRESH<<8)+ ADRESL);
 21136  006F44  50C4               	movf	4036,w,c	;volatile
 21137  006F46  6E04               	movwf	(??_readADC+1)& (0+255),c
 21138  006F48  6A03               	clrf	??_readADC& (0+255),c
 21139  006F4A  50C3               	movf	4035,w,c	;volatile
 21140  006F4C  2403               	addwf	??_readADC,w,c
 21141  006F4E  6E01               	movwf	?_readADC,c
 21142  006F50  0E00               	movlw	0
 21143  006F52  2004               	addwfc	??_readADC+1,w,c
 21144  006F54  6E02               	movwf	?_readADC+1,c
 21145  006F56  0012               	return		;funcret
 21146  006F58  FFFF               	dw	65535	; errata NOP
 21147  006F5A                     __end_of_readADC:
 21148                           	opt stack 0
 21149                           tosu	equ	0xFFF
 21150                           tosh	equ	0xFFE
 21151                           tosl	equ	0xFFD
 21152                           pclatu	equ	0xFFB
 21153                           pclath	equ	0xFFA
 21154                           tblptru	equ	0xFF8
 21155                           tblptrh	equ	0xFF7
 21156                           tblptrl	equ	0xFF6
 21157                           tablat	equ	0xFF5
 21158                           prodh	equ	0xFF4
 21159                           prodl	equ	0xFF3
 21160                           intcon	equ	0xFF2
 21161                           indf0	equ	0xFEF
 21162                           postinc0	equ	0xFEE
 21163                           fsr0h	equ	0xFEA
 21164                           fsr0l	equ	0xFE9
 21165                           wreg	equ	0xFE8
 21166                           postdec1	equ	0xFE5
 21167                           fsr1h	equ	0xFE2
 21168                           fsr1l	equ	0xFE1
 21169                           indf2	equ	0xFDF
 21170                           postinc2	equ	0xFDE
 21171                           postdec2	equ	0xFDD
 21172                           fsr2h	equ	0xFDA
 21173                           fsr2l	equ	0xFD9
 21174                           status	equ	0xFD8
 21175                           
 21176 ;; *************** function ___lwtoft *****************
 21177 ;; Defined at:
 21178 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 21179 ;; Parameters:    Size  Location     Type
 21180 ;;  c               2    8[COMRAM] unsigned int 
 21181 ;; Auto vars:     Size  Location     Type
 21182 ;;		None
 21183 ;; Return value:  Size  Location     Type
 21184 ;;                  3    8[COMRAM] float 
 21185 ;; Registers used:
 21186 ;;		wreg, status,2, status,0, cstack
 21187 ;; Tracked objects:
 21188 ;;		On entry : 0/0
 21189 ;;		On exit  : 0/0
 21190 ;;		Unchanged: 0/0
 21191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21192 ;;      Params:         3       0       0       0       0       0       0
 21193 ;;      Locals:         0       0       0       0       0       0       0
 21194 ;;      Temps:          0       0       0       0       0       0       0
 21195 ;;      Totals:         3       0       0       0       0       0       0
 21196 ;;Total ram usage:        3 bytes
 21197 ;; Hardware stack levels used:    1
 21198 ;; Hardware stack levels required when called:    1
 21199 ;; This function calls:
 21200 ;;		___ftpack
 21201 ;; This function is called by:
 21202 ;;		_lerTransdutor
 21203 ;; This function uses a non-reentrant model
 21204 ;;
 21205                           
 21206                           	psect	text90
 21207  006F0A                     __ptext90:
 21208                           	opt stack 0
 21209  006F0A                     ___lwtoft:
 21210                           	opt stack 0
 21211  006F0A  FFFF               	dw	65535	; assembler added errata NOP
 21212                           
 21213                           ;incstack = 0
 21214  006F0C  C009  F001         	movff	___lwtoft@c,___ftpack@arg
 21215  006F10  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 21216  006F14  6A03               	clrf	___ftpack@arg+2,c
 21217  006F16  0E8E               	movlw	142
 21218  006F18  6E04               	movwf	___ftpack@exp,c
 21219  006F1A  0E00               	movlw	0
 21220  006F1C  6E05               	movwf	___ftpack@sign,c
 21221  006F1E  ECC6  F01D         	call	___ftpack	;wreg free
 21222  006F22  C001  F009         	movff	?___ftpack,?___lwtoft
 21223  006F26  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
 21224  006F2A  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
 21225  006F2E  0012               	return		;funcret
 21226  006F30  FFFF               	dw	65535	; errata NOP
 21227  006F32                     __end_of___lwtoft:
 21228                           	opt stack 0
 21229                           tosu	equ	0xFFF
 21230                           tosh	equ	0xFFE
 21231                           tosl	equ	0xFFD
 21232                           pclatu	equ	0xFFB
 21233                           pclath	equ	0xFFA
 21234                           tblptru	equ	0xFF8
 21235                           tblptrh	equ	0xFF7
 21236                           tblptrl	equ	0xFF6
 21237                           tablat	equ	0xFF5
 21238                           prodh	equ	0xFF4
 21239                           prodl	equ	0xFF3
 21240                           intcon	equ	0xFF2
 21241                           indf0	equ	0xFEF
 21242                           postinc0	equ	0xFEE
 21243                           fsr0h	equ	0xFEA
 21244                           fsr0l	equ	0xFE9
 21245                           wreg	equ	0xFE8
 21246                           postdec1	equ	0xFE5
 21247                           fsr1h	equ	0xFE2
 21248                           fsr1l	equ	0xFE1
 21249                           indf2	equ	0xFDF
 21250                           postinc2	equ	0xFDE
 21251                           postdec2	equ	0xFDD
 21252                           fsr2h	equ	0xFDA
 21253                           fsr2l	equ	0xFD9
 21254                           status	equ	0xFD8
 21255                           
 21256 ;; *************** function ___fttol *****************
 21257 ;; Defined at:
 21258 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 21259 ;; Parameters:    Size  Location     Type
 21260 ;;  f1              3   26[COMRAM] float 
 21261 ;; Auto vars:     Size  Location     Type
 21262 ;;  lval            4   36[COMRAM] unsigned long 
 21263 ;;  exp1            1   40[COMRAM] unsigned char 
 21264 ;;  sign1           1   35[COMRAM] unsigned char 
 21265 ;; Return value:  Size  Location     Type
 21266 ;;                  4   26[COMRAM] long 
 21267 ;; Registers used:
 21268 ;;		wreg, status,2, status,0
 21269 ;; Tracked objects:
 21270 ;;		On entry : 0/0
 21271 ;;		On exit  : 0/0
 21272 ;;		Unchanged: 0/0
 21273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21274 ;;      Params:         4       0       0       0       0       0       0
 21275 ;;      Locals:         6       0       0       0       0       0       0
 21276 ;;      Temps:          5       0       0       0       0       0       0
 21277 ;;      Totals:        15       0       0       0       0       0       0
 21278 ;;Total ram usage:       15 bytes
 21279 ;; Hardware stack levels used:    1
 21280 ;; This function calls:
 21281 ;;		Nothing
 21282 ;; This function is called by:
 21283 ;;		_lerTransdutor
 21284 ;; This function uses a non-reentrant model
 21285 ;;
 21286                           
 21287                           	psect	text91
 21288  0035BA                     __ptext91:
 21289                           	opt stack 0
 21290  0035BA                     ___fttol:
 21291                           	opt stack 0
 21292  0035BA  FFFF               	dw	65535	; assembler added errata NOP
 21293                           
 21294                           ;incstack = 0
 21295  0035BC  C01D  F01F         	movff	___fttol@f1+2,??___fttol
 21296  0035C0  6A20               	clrf	(??___fttol+1)& (0+255),c
 21297  0035C2  6A21               	clrf	(??___fttol+2)& (0+255),c
 21298  0035C4  341C               	rlcf	___fttol@f1+1,w,c
 21299  0035C6  361F               	rlcf	??___fttol& (0+255),f,c
 21300  0035C8  E301               	bnc	u660_41
 21301  0035CA  8020               	bsf	(??___fttol+1)& (0+255),0,c
 21302  0035CC                     u660_41:
 21303  0035CC  501F               	movf	??___fttol,w,c
 21304  0035CE  6E29               	movwf	___fttol@exp1,c
 21305  0035D0  5029               	movf	___fttol@exp1,w,c
 21306  0035D2  B4D8               	btfsc	status,2,c
 21307  0035D4  D039               	goto	i2u665_40
 21308  0035D6  0E17               	movlw	23
 21309  0035D8  6E1F               	movwf	??___fttol& (0+255),c
 21310  0035DA  C01B  F020         	movff	___fttol@f1,??___fttol+1
 21311  0035DE  C01C  F021         	movff	___fttol@f1+1,??___fttol+2
 21312  0035E2  C01D  F022         	movff	___fttol@f1+2,??___fttol+3
 21313  0035E6  281F               	incf	??___fttol,w,c
 21314  0035E8  6E23               	movwf	(??___fttol+4)& (0+255),c
 21315  0035EA  D005               	goto	i2u662_40
 21316  0035EC                     i2u662_45:
 21317  0035EC  FFFF               	dw	65535	; assembler added errata NOP
 21318  0035EE  90D8               	bcf	status,0,c
 21319  0035F0  3222               	rrcf	??___fttol+3,f,c
 21320  0035F2  3221               	rrcf	??___fttol+2,f,c
 21321  0035F4  3220               	rrcf	??___fttol+1,f,c
 21322  0035F6                     i2u662_40:
 21323  0035F6  FFFF               	dw	65535	; assembler added errata NOP
 21324  0035F8  2E23               	decfsz	(??___fttol+4)& (0+255),f,c
 21325  0035FA  D7F8               	goto	i2u662_45
 21326  0035FC  5020               	movf	??___fttol+1,w,c
 21327  0035FE  6E24               	movwf	___fttol@sign1,c
 21328  003600  8E1C               	bsf	___fttol@f1+1,7,c
 21329  003602  0EFF               	movlw	255
 21330  003604  161B               	andwf	___fttol@f1,f,c
 21331  003606  0EFF               	movlw	255
 21332  003608  161C               	andwf	___fttol@f1+1,f,c
 21333  00360A  0E00               	movlw	0
 21334  00360C  161D               	andwf	___fttol@f1+2,f,c
 21335  00360E  501B               	movf	___fttol@f1,w,c
 21336  003610  6E25               	movwf	___fttol@lval,c
 21337  003612  501C               	movf	___fttol@f1+1,w,c
 21338  003614  6E26               	movwf	___fttol@lval+1,c
 21339  003616  501D               	movf	___fttol@f1+2,w,c
 21340  003618  6E27               	movwf	___fttol@lval+2,c
 21341  00361A  6A28               	clrf	___fttol@lval+3,c
 21342  00361C  0E8E               	movlw	142
 21343  00361E  5E29               	subwf	___fttol@exp1,f,c
 21344  003620  AE29               	btfss	___fttol@exp1,7,c
 21345  003622  D00E               	goto	i2l1424
 21346  003624  5029               	movf	___fttol@exp1,w,c
 21347  003626  0A80               	xorlw	128
 21348  003628  0F8F               	addlw	143
 21349  00362A  A0D8               	btfss	status,0,c
 21350  00362C  D00D               	goto	i2u665_40
 21351  00362E  FFFF               	dw	65535	; assembler added errata NOP
 21352  003630  90D8               	bcf	status,0,c
 21353  003632  3228               	rrcf	___fttol@lval+3,f,c
 21354  003634  3227               	rrcf	___fttol@lval+2,f,c
 21355  003636  3226               	rrcf	___fttol@lval+1,f,c
 21356  003638  3225               	rrcf	___fttol@lval,f,c
 21357  00363A  3E29               	incfsz	___fttol@exp1,f,c
 21358  00363C  D7F8               	goto	i2l1425
 21359  00363E  D019               	goto	i2u666_40
 21360  003640                     i2l1424:
 21361  003640  FFFF               	dw	65535	; assembler added errata NOP
 21362  003642  0E17               	movlw	23
 21363  003644  6429               	cpfsgt	___fttol@exp1,c
 21364  003646  D011               	goto	i2l1430
 21365  003648                     i2u665_40:
 21366  003648  FFFF               	dw	65535	; assembler added errata NOP
 21367  00364A  0E00               	movlw	0
 21368  00364C  6E1B               	movwf	?___fttol,c
 21369  00364E  0E00               	movlw	0
 21370  003650  6E1C               	movwf	?___fttol+1,c
 21371  003652  0E00               	movlw	0
 21372  003654  6E1D               	movwf	?___fttol+2,c
 21373  003656  0E00               	movlw	0
 21374  003658  6E1E               	movwf	?___fttol+3,c
 21375  00365A  D020               	goto	i2l6216
 21376  00365C  FFFF               	dw	65535	; assembler added errata NOP
 21377  00365E  90D8               	bcf	status,0,c
 21378  003660  3625               	rlcf	___fttol@lval,f,c
 21379  003662  3626               	rlcf	___fttol@lval+1,f,c
 21380  003664  3627               	rlcf	___fttol@lval+2,f,c
 21381  003666  3628               	rlcf	___fttol@lval+3,f,c
 21382  003668  0629               	decf	___fttol@exp1,f,c
 21383  00366A                     i2l1430:
 21384  00366A  FFFF               	dw	65535	; assembler added errata NOP
 21385  00366C  5029               	movf	___fttol@exp1,w,c
 21386  00366E  A4D8               	btfss	status,2,c
 21387  003670  D7F5               	goto	i2l1431
 21388  003672                     i2u666_40:
 21389  003672  FFFF               	dw	65535	; assembler added errata NOP
 21390  003674  5024               	movf	___fttol@sign1,w,c
 21391  003676  B4D8               	btfsc	status,2,c
 21392  003678  D008               	goto	i2l1433
 21393  00367A  1E28               	comf	___fttol@lval+3,f,c
 21394  00367C  1E27               	comf	___fttol@lval+2,f,c
 21395  00367E  1E26               	comf	___fttol@lval+1,f,c
 21396  003680  6C25               	negf	___fttol@lval,c
 21397  003682  0E00               	movlw	0
 21398  003684  2226               	addwfc	___fttol@lval+1,f,c
 21399  003686  2227               	addwfc	___fttol@lval+2,f,c
 21400  003688  2228               	addwfc	___fttol@lval+3,f,c
 21401  00368A                     i2l1433:
 21402  00368A  FFFF               	dw	65535	; assembler added errata NOP
 21403  00368C  C025  F01B         	movff	___fttol@lval,?___fttol
 21404  003690  C026  F01C         	movff	___fttol@lval+1,?___fttol+1
 21405  003694  C027  F01D         	movff	___fttol@lval+2,?___fttol+2
 21406  003698  C028  F01E         	movff	___fttol@lval+3,?___fttol+3
 21407  00369C                     i2l6216:
 21408  00369C  FFFF               	dw	65535	; assembler added errata NOP
 21409  00369E  0012               	return		;funcret
 21410  0036A0  FFFF               	dw	65535	; errata NOP
 21411  0036A2                     __end_of___fttol:
 21412                           	opt stack 0
 21413                           tosu	equ	0xFFF
 21414                           tosh	equ	0xFFE
 21415                           tosl	equ	0xFFD
 21416                           pclatu	equ	0xFFB
 21417                           pclath	equ	0xFFA
 21418                           tblptru	equ	0xFF8
 21419                           tblptrh	equ	0xFF7
 21420                           tblptrl	equ	0xFF6
 21421                           tablat	equ	0xFF5
 21422                           prodh	equ	0xFF4
 21423                           prodl	equ	0xFF3
 21424                           intcon	equ	0xFF2
 21425                           indf0	equ	0xFEF
 21426                           postinc0	equ	0xFEE
 21427                           fsr0h	equ	0xFEA
 21428                           fsr0l	equ	0xFE9
 21429                           wreg	equ	0xFE8
 21430                           postdec1	equ	0xFE5
 21431                           fsr1h	equ	0xFE2
 21432                           fsr1l	equ	0xFE1
 21433                           indf2	equ	0xFDF
 21434                           postinc2	equ	0xFDE
 21435                           postdec2	equ	0xFDD
 21436                           fsr2h	equ	0xFDA
 21437                           fsr2l	equ	0xFD9
 21438                           status	equ	0xFD8
 21439                           
 21440 ;; *************** function ___ftmul *****************
 21441 ;; Defined at:
 21442 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 21443 ;; Parameters:    Size  Location     Type
 21444 ;;  f1              3   11[COMRAM] float 
 21445 ;;  f2              3   14[COMRAM] float 
 21446 ;; Auto vars:     Size  Location     Type
 21447 ;;  f3_as_produc    3   21[COMRAM] unsigned um
 21448 ;;  sign            1   25[COMRAM] unsigned char 
 21449 ;;  cntr            1   24[COMRAM] unsigned char 
 21450 ;;  exp             1   20[COMRAM] unsigned char 
 21451 ;; Return value:  Size  Location     Type
 21452 ;;                  3   11[COMRAM] float 
 21453 ;; Registers used:
 21454 ;;		wreg, status,2, status,0, cstack
 21455 ;; Tracked objects:
 21456 ;;		On entry : 0/0
 21457 ;;		On exit  : 0/0
 21458 ;;		Unchanged: 0/0
 21459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21460 ;;      Params:         6       0       0       0       0       0       0
 21461 ;;      Locals:         6       0       0       0       0       0       0
 21462 ;;      Temps:          3       0       0       0       0       0       0
 21463 ;;      Totals:        15       0       0       0       0       0       0
 21464 ;;Total ram usage:       15 bytes
 21465 ;; Hardware stack levels used:    1
 21466 ;; Hardware stack levels required when called:    1
 21467 ;; This function calls:
 21468 ;;		___ftpack
 21469 ;; This function is called by:
 21470 ;;		_lerTransdutor
 21471 ;;		_map
 21472 ;; This function uses a non-reentrant model
 21473 ;;
 21474                           
 21475                           	psect	text92
 21476  0033D6                     __ptext92:
 21477                           	opt stack 0
 21478  0033D6                     ___ftmul:
 21479                           	opt stack 0
 21480  0033D6  FFFF               	dw	65535	; assembler added errata NOP
 21481                           
 21482                           ;incstack = 0
 21483  0033D8  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
 21484  0033DC  6A13               	clrf	(??___ftmul+1)& (0+255),c
 21485  0033DE  6A14               	clrf	(??___ftmul+2)& (0+255),c
 21486  0033E0  340D               	rlcf	___ftmul@f1+1,w,c
 21487  0033E2  3612               	rlcf	??___ftmul& (0+255),f,c
 21488  0033E4  E301               	bnc	u651_41
 21489  0033E6  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 21490  0033E8                     u651_41:
 21491  0033E8  5012               	movf	??___ftmul,w,c
 21492  0033EA  6E15               	movwf	___ftmul@exp,c
 21493  0033EC  5015               	movf	___ftmul@exp,w,c
 21494  0033EE  B4D8               	btfsc	status,2,c
 21495  0033F0  D00D               	goto	i2u654_40
 21496  0033F2  C011  F012         	movff	___ftmul@f2+2,??___ftmul
 21497  0033F6  6A13               	clrf	(??___ftmul+1)& (0+255),c
 21498  0033F8  6A14               	clrf	(??___ftmul+2)& (0+255),c
 21499  0033FA  3410               	rlcf	___ftmul@f2+1,w,c
 21500  0033FC  3612               	rlcf	??___ftmul& (0+255),f,c
 21501  0033FE  E301               	bnc	u653_41
 21502  003400  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 21503  003402                     u653_41:
 21504  003402  5012               	movf	??___ftmul,w,c
 21505  003404  6E1A               	movwf	___ftmul@sign,c
 21506  003406  501A               	movf	___ftmul@sign,w,c
 21507  003408  A4D8               	btfss	status,2,c
 21508  00340A  D008               	goto	i2l1403
 21509  00340C                     i2u654_40:
 21510  00340C  FFFF               	dw	65535	; assembler added errata NOP
 21511  00340E  0E00               	movlw	0
 21512  003410  6E0C               	movwf	?___ftmul,c
 21513  003412  0E00               	movlw	0
 21514  003414  6E0D               	movwf	?___ftmul+1,c
 21515  003416  0E00               	movlw	0
 21516  003418  6E0E               	movwf	?___ftmul+2,c
 21517  00341A  D056               	goto	i2l6152
 21518  00341C                     i2l1403:
 21519  00341C  FFFF               	dw	65535	; assembler added errata NOP
 21520  00341E  501A               	movf	___ftmul@sign,w,c
 21521  003420  0F7B               	addlw	123
 21522  003422  2615               	addwf	___ftmul@exp,f,c
 21523  003424  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
 21524  003428  5011               	movf	___ftmul@f2+2,w,c
 21525  00342A  1A1A               	xorwf	___ftmul@sign,f,c
 21526  00342C  0E80               	movlw	128
 21527  00342E  161A               	andwf	___ftmul@sign,f,c
 21528  003430  8E0D               	bsf	___ftmul@f1+1,7,c
 21529  003432  8E10               	bsf	___ftmul@f2+1,7,c
 21530  003434  0EFF               	movlw	255
 21531  003436  160F               	andwf	___ftmul@f2,f,c
 21532  003438  0EFF               	movlw	255
 21533  00343A  1610               	andwf	___ftmul@f2+1,f,c
 21534  00343C  0E00               	movlw	0
 21535  00343E  1611               	andwf	___ftmul@f2+2,f,c
 21536  003440  0E00               	movlw	0
 21537  003442  6E16               	movwf	___ftmul@f3_as_product,c
 21538  003444  0E00               	movlw	0
 21539  003446  6E17               	movwf	___ftmul@f3_as_product+1,c
 21540  003448  0E00               	movlw	0
 21541  00344A  6E18               	movwf	___ftmul@f3_as_product+2,c
 21542  00344C  0E07               	movlw	7
 21543  00344E  6E19               	movwf	___ftmul@cntr,c
 21544  003450  FFFF               	dw	65535	; assembler added errata NOP
 21545  003452  A00C               	btfss	___ftmul@f1,0,c
 21546  003454  D006               	goto	i2l1405
 21547  003456  500F               	movf	___ftmul@f2,w,c
 21548  003458  2616               	addwf	___ftmul@f3_as_product,f,c
 21549  00345A  5010               	movf	___ftmul@f2+1,w,c
 21550  00345C  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 21551  00345E  5011               	movf	___ftmul@f2+2,w,c
 21552  003460  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 21553  003462                     i2l1405:
 21554  003462  FFFF               	dw	65535	; assembler added errata NOP
 21555  003464  90D8               	bcf	status,0,c
 21556  003466  320E               	rrcf	___ftmul@f1+2,f,c
 21557  003468  320D               	rrcf	___ftmul@f1+1,f,c
 21558  00346A  320C               	rrcf	___ftmul@f1,f,c
 21559  00346C  90D8               	bcf	status,0,c
 21560  00346E  360F               	rlcf	___ftmul@f2,f,c
 21561  003470  3610               	rlcf	___ftmul@f2+1,f,c
 21562  003472  3611               	rlcf	___ftmul@f2+2,f,c
 21563  003474  2E19               	decfsz	___ftmul@cntr,f,c
 21564  003476  D7EC               	goto	i2l1404
 21565  003478  0E09               	movlw	9
 21566  00347A  6E19               	movwf	___ftmul@cntr,c
 21567  00347C  FFFF               	dw	65535	; assembler added errata NOP
 21568  00347E  A00C               	btfss	___ftmul@f1,0,c
 21569  003480  D006               	goto	i2l1408
 21570  003482  500F               	movf	___ftmul@f2,w,c
 21571  003484  2616               	addwf	___ftmul@f3_as_product,f,c
 21572  003486  5010               	movf	___ftmul@f2+1,w,c
 21573  003488  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 21574  00348A  5011               	movf	___ftmul@f2+2,w,c
 21575  00348C  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 21576  00348E                     i2l1408:
 21577  00348E  FFFF               	dw	65535	; assembler added errata NOP
 21578  003490  90D8               	bcf	status,0,c
 21579  003492  320E               	rrcf	___ftmul@f1+2,f,c
 21580  003494  320D               	rrcf	___ftmul@f1+1,f,c
 21581  003496  320C               	rrcf	___ftmul@f1,f,c
 21582  003498  90D8               	bcf	status,0,c
 21583  00349A  3218               	rrcf	___ftmul@f3_as_product+2,f,c
 21584  00349C  3217               	rrcf	___ftmul@f3_as_product+1,f,c
 21585  00349E  3216               	rrcf	___ftmul@f3_as_product,f,c
 21586  0034A0  2E19               	decfsz	___ftmul@cntr,f,c
 21587  0034A2  D7EC               	goto	i2l1407
 21588  0034A4  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 21589  0034A8  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 21590  0034AC  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 21591  0034B0  C015  F004         	movff	___ftmul@exp,___ftpack@exp
 21592  0034B4  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
 21593  0034B8  ECC6  F01D         	call	___ftpack	;wreg free
 21594  0034BC  C001  F00C         	movff	?___ftpack,?___ftmul
 21595  0034C0  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
 21596  0034C4  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
 21597  0034C8                     i2l6152:
 21598  0034C8  FFFF               	dw	65535	; assembler added errata NOP
 21599  0034CA  0012               	return		;funcret
 21600  0034CC  FFFF               	dw	65535	; errata NOP
 21601  0034CE                     __end_of___ftmul:
 21602                           	opt stack 0
 21603                           tosu	equ	0xFFF
 21604                           tosh	equ	0xFFE
 21605                           tosl	equ	0xFFD
 21606                           pclatu	equ	0xFFB
 21607                           pclath	equ	0xFFA
 21608                           tblptru	equ	0xFF8
 21609                           tblptrh	equ	0xFF7
 21610                           tblptrl	equ	0xFF6
 21611                           tablat	equ	0xFF5
 21612                           prodh	equ	0xFF4
 21613                           prodl	equ	0xFF3
 21614                           intcon	equ	0xFF2
 21615                           indf0	equ	0xFEF
 21616                           postinc0	equ	0xFEE
 21617                           fsr0h	equ	0xFEA
 21618                           fsr0l	equ	0xFE9
 21619                           wreg	equ	0xFE8
 21620                           postdec1	equ	0xFE5
 21621                           fsr1h	equ	0xFE2
 21622                           fsr1l	equ	0xFE1
 21623                           indf2	equ	0xFDF
 21624                           postinc2	equ	0xFDE
 21625                           postdec2	equ	0xFDD
 21626                           fsr2h	equ	0xFDA
 21627                           fsr2l	equ	0xFD9
 21628                           status	equ	0xFD8
 21629                           
 21630 ;; *************** function ___ftge *****************
 21631 ;; Defined at:
 21632 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 21633 ;; Parameters:    Size  Location     Type
 21634 ;;  ff1             3    0[COMRAM] float 
 21635 ;;  ff2             3    3[COMRAM] float 
 21636 ;; Auto vars:     Size  Location     Type
 21637 ;;		None
 21638 ;; Return value:  Size  Location     Type
 21639 ;;		None               void
 21640 ;; Registers used:
 21641 ;;		wreg, status,2, status,0
 21642 ;; Tracked objects:
 21643 ;;		On entry : 0/0
 21644 ;;		On exit  : 0/0
 21645 ;;		Unchanged: 0/0
 21646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21647 ;;      Params:         6       0       0       0       0       0       0
 21648 ;;      Locals:         0       0       0       0       0       0       0
 21649 ;;      Temps:          3       0       0       0       0       0       0
 21650 ;;      Totals:         9       0       0       0       0       0       0
 21651 ;;Total ram usage:        9 bytes
 21652 ;; Hardware stack levels used:    1
 21653 ;; This function calls:
 21654 ;;		Nothing
 21655 ;; This function is called by:
 21656 ;;		_lerTransdutor
 21657 ;; This function uses a non-reentrant model
 21658 ;;
 21659                           
 21660                           	psect	text93
 21661  003C50                     __ptext93:
 21662                           	opt stack 0
 21663  003C50                     ___ftge:
 21664                           	opt stack 0
 21665  003C50  FFFF               	dw	65535	; assembler added errata NOP
 21666                           
 21667                           ;incstack = 0
 21668  003C52  AE03               	btfss	___ftge@ff1+2,7,c
 21669  003C54  D016               	goto	i2l1394
 21670  003C56  C001  F007         	movff	___ftge@ff1,??___ftge
 21671  003C5A  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 21672  003C5E  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 21673  003C62  1E07               	comf	??___ftge,f,c
 21674  003C64  1E08               	comf	??___ftge+1,f,c
 21675  003C66  1E09               	comf	??___ftge+2,f,c
 21676  003C68  2A07               	incf	??___ftge,f,c
 21677  003C6A  0E00               	movlw	0
 21678  003C6C  2208               	addwfc	??___ftge+1,f,c
 21679  003C6E  2209               	addwfc	??___ftge+2,f,c
 21680  003C70  0E00               	movlw	0
 21681  003C72  2407               	addwf	??___ftge,w,c
 21682  003C74  6E01               	movwf	___ftge@ff1,c
 21683  003C76  0E00               	movlw	0
 21684  003C78  2008               	addwfc	??___ftge+1,w,c
 21685  003C7A  6E02               	movwf	___ftge@ff1+1,c
 21686  003C7C  0E80               	movlw	128
 21687  003C7E  2009               	addwfc	??___ftge+2,w,c
 21688  003C80  6E03               	movwf	___ftge@ff1+2,c
 21689  003C82                     i2l1394:
 21690  003C82  FFFF               	dw	65535	; assembler added errata NOP
 21691  003C84  AE06               	btfss	___ftge@ff2+2,7,c
 21692  003C86  D016               	goto	i2l1395
 21693  003C88  C004  F007         	movff	___ftge@ff2,??___ftge
 21694  003C8C  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 21695  003C90  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 21696  003C94  1E07               	comf	??___ftge,f,c
 21697  003C96  1E08               	comf	??___ftge+1,f,c
 21698  003C98  1E09               	comf	??___ftge+2,f,c
 21699  003C9A  2A07               	incf	??___ftge,f,c
 21700  003C9C  0E00               	movlw	0
 21701  003C9E  2208               	addwfc	??___ftge+1,f,c
 21702  003CA0  2209               	addwfc	??___ftge+2,f,c
 21703  003CA2  0E00               	movlw	0
 21704  003CA4  2407               	addwf	??___ftge,w,c
 21705  003CA6  6E04               	movwf	___ftge@ff2,c
 21706  003CA8  0E00               	movlw	0
 21707  003CAA  2008               	addwfc	??___ftge+1,w,c
 21708  003CAC  6E05               	movwf	___ftge@ff2+1,c
 21709  003CAE  0E80               	movlw	128
 21710  003CB0  2009               	addwfc	??___ftge+2,w,c
 21711  003CB2  6E06               	movwf	___ftge@ff2+2,c
 21712  003CB4                     i2l1395:
 21713  003CB4  FFFF               	dw	65535	; assembler added errata NOP
 21714  003CB6  0E00               	movlw	0
 21715  003CB8  1A01               	xorwf	___ftge@ff1,f,c
 21716  003CBA  0E00               	movlw	0
 21717  003CBC  1A02               	xorwf	___ftge@ff1+1,f,c
 21718  003CBE  0E80               	movlw	128
 21719  003CC0  1A03               	xorwf	___ftge@ff1+2,f,c
 21720  003CC2  0E00               	movlw	0
 21721  003CC4  1A04               	xorwf	___ftge@ff2,f,c
 21722  003CC6  0E00               	movlw	0
 21723  003CC8  1A05               	xorwf	___ftge@ff2+1,f,c
 21724  003CCA  0E80               	movlw	128
 21725  003CCC  1A06               	xorwf	___ftge@ff2+2,f,c
 21726  003CCE  5004               	movf	___ftge@ff2,w,c
 21727  003CD0  5C01               	subwf	___ftge@ff1,w,c
 21728  003CD2  5005               	movf	___ftge@ff2+1,w,c
 21729  003CD4  5802               	subwfb	___ftge@ff1+1,w,c
 21730  003CD6  5006               	movf	___ftge@ff2+2,w,c
 21731  003CD8  5803               	subwfb	___ftge@ff1+2,w,c
 21732  003CDA  B0D8               	btfsc	status,0,c
 21733  003CDC  D002               	goto	i2l4786
 21734  003CDE  90D8               	bcf	status,0,c
 21735  003CE0  D002               	goto	i2l4788
 21736  003CE2                     i2l4786:
 21737  003CE2  FFFF               	dw	65535	; assembler added errata NOP
 21738  003CE4  80D8               	bsf	status,0,c
 21739  003CE6                     i2l4788:
 21740  003CE6  FFFF               	dw	65535	; assembler added errata NOP
 21741  003CE8  0012               	return		;funcret
 21742  003CEA  FFFF               	dw	65535	; errata NOP
 21743  003CEC                     __end_of___ftge:
 21744                           	opt stack 0
 21745                           tosu	equ	0xFFF
 21746                           tosh	equ	0xFFE
 21747                           tosl	equ	0xFFD
 21748                           pclatu	equ	0xFFB
 21749                           pclath	equ	0xFFA
 21750                           tblptru	equ	0xFF8
 21751                           tblptrh	equ	0xFF7
 21752                           tblptrl	equ	0xFF6
 21753                           tablat	equ	0xFF5
 21754                           prodh	equ	0xFF4
 21755                           prodl	equ	0xFF3
 21756                           intcon	equ	0xFF2
 21757                           indf0	equ	0xFEF
 21758                           postinc0	equ	0xFEE
 21759                           fsr0h	equ	0xFEA
 21760                           fsr0l	equ	0xFE9
 21761                           wreg	equ	0xFE8
 21762                           postdec1	equ	0xFE5
 21763                           fsr1h	equ	0xFE2
 21764                           fsr1l	equ	0xFE1
 21765                           indf2	equ	0xFDF
 21766                           postinc2	equ	0xFDE
 21767                           postdec2	equ	0xFDD
 21768                           fsr2h	equ	0xFDA
 21769                           fsr2l	equ	0xFD9
 21770                           status	equ	0xFD8
 21771                           
 21772 ;; *************** function ___ftdiv *****************
 21773 ;; Defined at:
 21774 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 21775 ;; Parameters:    Size  Location     Type
 21776 ;;  f1              3   26[COMRAM] float 
 21777 ;;  f2              3   29[COMRAM] float 
 21778 ;; Auto vars:     Size  Location     Type
 21779 ;;  f3              3   36[COMRAM] float 
 21780 ;;  sign            1   40[COMRAM] unsigned char 
 21781 ;;  exp             1   39[COMRAM] unsigned char 
 21782 ;;  cntr            1   35[COMRAM] unsigned char 
 21783 ;; Return value:  Size  Location     Type
 21784 ;;                  3   26[COMRAM] float 
 21785 ;; Registers used:
 21786 ;;		wreg, status,2, status,0, cstack
 21787 ;; Tracked objects:
 21788 ;;		On entry : 0/0
 21789 ;;		On exit  : 0/0
 21790 ;;		Unchanged: 0/0
 21791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21792 ;;      Params:         6       0       0       0       0       0       0
 21793 ;;      Locals:         6       0       0       0       0       0       0
 21794 ;;      Temps:          3       0       0       0       0       0       0
 21795 ;;      Totals:        15       0       0       0       0       0       0
 21796 ;;Total ram usage:       15 bytes
 21797 ;; Hardware stack levels used:    1
 21798 ;; Hardware stack levels required when called:    1
 21799 ;; This function calls:
 21800 ;;		___ftpack
 21801 ;; This function is called by:
 21802 ;;		_lerTransdutor
 21803 ;;		_map
 21804 ;; This function uses a non-reentrant model
 21805 ;;
 21806                           
 21807                           	psect	text94
 21808  0036A2                     __ptext94:
 21809                           	opt stack 0
 21810  0036A2                     ___ftdiv:
 21811                           	opt stack 0
 21812  0036A2  FFFF               	dw	65535	; assembler added errata NOP
 21813                           
 21814                           ;incstack = 0
 21815  0036A4  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
 21816  0036A8  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 21817  0036AA  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 21818  0036AC  341C               	rlcf	___ftdiv@f1+1,w,c
 21819  0036AE  3621               	rlcf	??___ftdiv& (0+255),f,c
 21820  0036B0  E301               	bnc	u646_41
 21821  0036B2  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 21822  0036B4                     u646_41:
 21823  0036B4  5021               	movf	??___ftdiv,w,c
 21824  0036B6  6E28               	movwf	___ftdiv@exp,c
 21825  0036B8  5028               	movf	___ftdiv@exp,w,c
 21826  0036BA  B4D8               	btfsc	status,2,c
 21827  0036BC  D00D               	goto	i2u649_40
 21828  0036BE  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
 21829  0036C2  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 21830  0036C4  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 21831  0036C6  341F               	rlcf	___ftdiv@f2+1,w,c
 21832  0036C8  3621               	rlcf	??___ftdiv& (0+255),f,c
 21833  0036CA  E301               	bnc	u648_41
 21834  0036CC  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 21835  0036CE                     u648_41:
 21836  0036CE  5021               	movf	??___ftdiv,w,c
 21837  0036D0  6E29               	movwf	___ftdiv@sign,c
 21838  0036D2  5029               	movf	___ftdiv@sign,w,c
 21839  0036D4  A4D8               	btfss	status,2,c
 21840  0036D6  D008               	goto	i2l1388
 21841  0036D8                     i2u649_40:
 21842  0036D8  FFFF               	dw	65535	; assembler added errata NOP
 21843  0036DA  0E00               	movlw	0
 21844  0036DC  6E1B               	movwf	?___ftdiv,c
 21845  0036DE  0E00               	movlw	0
 21846  0036E0  6E1C               	movwf	?___ftdiv+1,c
 21847  0036E2  0E00               	movlw	0
 21848  0036E4  6E1D               	movwf	?___ftdiv+2,c
 21849  0036E6  D04D               	goto	i2l6104
 21850  0036E8                     i2l1388:
 21851  0036E8  FFFF               	dw	65535	; assembler added errata NOP
 21852  0036EA  0E00               	movlw	0
 21853  0036EC  6E25               	movwf	___ftdiv@f3,c
 21854  0036EE  0E00               	movlw	0
 21855  0036F0  6E26               	movwf	___ftdiv@f3+1,c
 21856  0036F2  0E00               	movlw	0
 21857  0036F4  6E27               	movwf	___ftdiv@f3+2,c
 21858  0036F6  5029               	movf	___ftdiv@sign,w,c
 21859  0036F8  0F89               	addlw	137
 21860  0036FA  5E28               	subwf	___ftdiv@exp,f,c
 21861  0036FC  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
 21862  003700  5020               	movf	___ftdiv@f2+2,w,c
 21863  003702  1A29               	xorwf	___ftdiv@sign,f,c
 21864  003704  0E80               	movlw	128
 21865  003706  1629               	andwf	___ftdiv@sign,f,c
 21866  003708  8E1C               	bsf	___ftdiv@f1+1,7,c
 21867  00370A  0EFF               	movlw	255
 21868  00370C  161B               	andwf	___ftdiv@f1,f,c
 21869  00370E  0EFF               	movlw	255
 21870  003710  161C               	andwf	___ftdiv@f1+1,f,c
 21871  003712  0E00               	movlw	0
 21872  003714  161D               	andwf	___ftdiv@f1+2,f,c
 21873  003716  8E1F               	bsf	___ftdiv@f2+1,7,c
 21874  003718  0EFF               	movlw	255
 21875  00371A  161E               	andwf	___ftdiv@f2,f,c
 21876  00371C  0EFF               	movlw	255
 21877  00371E  161F               	andwf	___ftdiv@f2+1,f,c
 21878  003720  0E00               	movlw	0
 21879  003722  1620               	andwf	___ftdiv@f2+2,f,c
 21880  003724  0E18               	movlw	24
 21881  003726  6E24               	movwf	___ftdiv@cntr,c
 21882  003728  FFFF               	dw	65535	; assembler added errata NOP
 21883  00372A  90D8               	bcf	status,0,c
 21884  00372C  3625               	rlcf	___ftdiv@f3,f,c
 21885  00372E  3626               	rlcf	___ftdiv@f3+1,f,c
 21886  003730  3627               	rlcf	___ftdiv@f3+2,f,c
 21887  003732  501E               	movf	___ftdiv@f2,w,c
 21888  003734  5C1B               	subwf	___ftdiv@f1,w,c
 21889  003736  501F               	movf	___ftdiv@f2+1,w,c
 21890  003738  581C               	subwfb	___ftdiv@f1+1,w,c
 21891  00373A  5020               	movf	___ftdiv@f2+2,w,c
 21892  00373C  581D               	subwfb	___ftdiv@f1+2,w,c
 21893  00373E  A0D8               	btfss	status,0,c
 21894  003740  D007               	goto	i2l1390
 21895  003742  501E               	movf	___ftdiv@f2,w,c
 21896  003744  5E1B               	subwf	___ftdiv@f1,f,c
 21897  003746  501F               	movf	___ftdiv@f2+1,w,c
 21898  003748  5A1C               	subwfb	___ftdiv@f1+1,f,c
 21899  00374A  5020               	movf	___ftdiv@f2+2,w,c
 21900  00374C  5A1D               	subwfb	___ftdiv@f1+2,f,c
 21901  00374E  8025               	bsf	___ftdiv@f3,0,c
 21902  003750                     i2l1390:
 21903  003750  FFFF               	dw	65535	; assembler added errata NOP
 21904  003752  90D8               	bcf	status,0,c
 21905  003754  361B               	rlcf	___ftdiv@f1,f,c
 21906  003756  361C               	rlcf	___ftdiv@f1+1,f,c
 21907  003758  361D               	rlcf	___ftdiv@f1+2,f,c
 21908  00375A  2E24               	decfsz	___ftdiv@cntr,f,c
 21909  00375C  D7E5               	goto	i2l1389
 21910  00375E  C025  F001         	movff	___ftdiv@f3,___ftpack@arg
 21911  003762  C026  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 21912  003766  C027  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 21913  00376A  C028  F004         	movff	___ftdiv@exp,___ftpack@exp
 21914  00376E  C029  F005         	movff	___ftdiv@sign,___ftpack@sign
 21915  003772  ECC6  F01D         	call	___ftpack	;wreg free
 21916  003776  C001  F01B         	movff	?___ftpack,?___ftdiv
 21917  00377A  C002  F01C         	movff	?___ftpack+1,?___ftdiv+1
 21918  00377E  C003  F01D         	movff	?___ftpack+2,?___ftdiv+2
 21919  003782                     i2l6104:
 21920  003782  FFFF               	dw	65535	; assembler added errata NOP
 21921  003784  0012               	return		;funcret
 21922  003786  FFFF               	dw	65535	; errata NOP
 21923  003788                     __end_of___ftdiv:
 21924                           	opt stack 0
 21925                           tosu	equ	0xFFF
 21926                           tosh	equ	0xFFE
 21927                           tosl	equ	0xFFD
 21928                           pclatu	equ	0xFFB
 21929                           pclath	equ	0xFFA
 21930                           tblptru	equ	0xFF8
 21931                           tblptrh	equ	0xFF7
 21932                           tblptrl	equ	0xFF6
 21933                           tablat	equ	0xFF5
 21934                           prodh	equ	0xFF4
 21935                           prodl	equ	0xFF3
 21936                           intcon	equ	0xFF2
 21937                           indf0	equ	0xFEF
 21938                           postinc0	equ	0xFEE
 21939                           fsr0h	equ	0xFEA
 21940                           fsr0l	equ	0xFE9
 21941                           wreg	equ	0xFE8
 21942                           postdec1	equ	0xFE5
 21943                           fsr1h	equ	0xFE2
 21944                           fsr1l	equ	0xFE1
 21945                           indf2	equ	0xFDF
 21946                           postinc2	equ	0xFDE
 21947                           postdec2	equ	0xFDD
 21948                           fsr2h	equ	0xFDA
 21949                           fsr2l	equ	0xFD9
 21950                           status	equ	0xFD8
 21951                           
 21952 ;; *************** function ___ftadd *****************
 21953 ;; Defined at:
 21954 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 21955 ;; Parameters:    Size  Location     Type
 21956 ;;  f1              3   26[COMRAM] float 
 21957 ;;  f2              3   29[COMRAM] float 
 21958 ;; Auto vars:     Size  Location     Type
 21959 ;;  exp1            1   37[COMRAM] unsigned char 
 21960 ;;  exp2            1   36[COMRAM] unsigned char 
 21961 ;;  sign            1   35[COMRAM] unsigned char 
 21962 ;; Return value:  Size  Location     Type
 21963 ;;                  3   26[COMRAM] float 
 21964 ;; Registers used:
 21965 ;;		wreg, status,2, status,0, cstack
 21966 ;; Tracked objects:
 21967 ;;		On entry : 0/0
 21968 ;;		On exit  : 0/0
 21969 ;;		Unchanged: 0/0
 21970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21971 ;;      Params:         6       0       0       0       0       0       0
 21972 ;;      Locals:         3       0       0       0       0       0       0
 21973 ;;      Temps:          3       0       0       0       0       0       0
 21974 ;;      Totals:        12       0       0       0       0       0       0
 21975 ;;Total ram usage:       12 bytes
 21976 ;; Hardware stack levels used:    1
 21977 ;; Hardware stack levels required when called:    1
 21978 ;; This function calls:
 21979 ;;		___ftpack
 21980 ;; This function is called by:
 21981 ;;		_lerTransdutor
 21982 ;;		_map
 21983 ;; This function uses a non-reentrant model
 21984 ;;
 21985                           
 21986                           	psect	text95
 21987  00253C                     __ptext95:
 21988                           	opt stack 0
 21989  00253C                     ___ftadd:
 21990                           	opt stack 0
 21991  00253C  FFFF               	dw	65535	; assembler added errata NOP
 21992                           
 21993                           ;incstack = 0
 21994  00253E  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
 21995  002542  6A22               	clrf	(??___ftadd+1)& (0+255),c
 21996  002544  6A23               	clrf	(??___ftadd+2)& (0+255),c
 21997  002546  341C               	rlcf	___ftadd@f1+1,w,c
 21998  002548  3621               	rlcf	??___ftadd& (0+255),f,c
 21999  00254A  E301               	bnc	u625_41
 22000  00254C  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 22001  00254E                     u625_41:
 22002  00254E  5021               	movf	??___ftadd,w,c
 22003  002550  6E26               	movwf	___ftadd@exp1,c
 22004  002552  C020  F021         	movff	___ftadd@f2+2,??___ftadd
 22005  002556  6A22               	clrf	(??___ftadd+1)& (0+255),c
 22006  002558  6A23               	clrf	(??___ftadd+2)& (0+255),c
 22007  00255A  341F               	rlcf	___ftadd@f2+1,w,c
 22008  00255C  3621               	rlcf	??___ftadd& (0+255),f,c
 22009  00255E  E301               	bnc	u626_41
 22010  002560  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 22011  002562                     u626_41:
 22012  002562  5021               	movf	??___ftadd,w,c
 22013  002564  6E25               	movwf	___ftadd@exp2,c
 22014  002566  5026               	movf	___ftadd@exp1,w,c
 22015  002568  B4D8               	btfsc	status,2,c
 22016  00256A  D00B               	goto	i2u629_40
 22017  00256C  5025               	movf	___ftadd@exp2,w,c
 22018  00256E  5C26               	subwf	___ftadd@exp1,w,c
 22019  002570  B0D8               	btfsc	status,0,c
 22020  002572  D00F               	goto	i2l1353
 22021  002574  5026               	movf	___ftadd@exp1,w,c
 22022  002576  0800               	sublw	0
 22023  002578  2425               	addwf	___ftadd@exp2,w,c
 22024  00257A  6E21               	movwf	??___ftadd& (0+255),c
 22025  00257C  0E18               	movlw	24
 22026  00257E  6421               	cpfsgt	??___ftadd,c
 22027  002580  D008               	goto	i2l1353
 22028  002582                     i2u629_40:
 22029  002582  FFFF               	dw	65535	; assembler added errata NOP
 22030  002584  C01E  F01B         	movff	___ftadd@f2,?___ftadd
 22031  002588  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
 22032  00258C  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
 22033  002590  D0BA               	goto	i2l6058
 22034  002592                     i2l1353:
 22035  002592  FFFF               	dw	65535	; assembler added errata NOP
 22036  002594  5025               	movf	___ftadd@exp2,w,c
 22037  002596  B4D8               	btfsc	status,2,c
 22038  002598  D00B               	goto	i2u632_40
 22039  00259A  5026               	movf	___ftadd@exp1,w,c
 22040  00259C  5C25               	subwf	___ftadd@exp2,w,c
 22041  00259E  B0D8               	btfsc	status,0,c
 22042  0025A0  D00F               	goto	i2l1357
 22043  0025A2  5025               	movf	___ftadd@exp2,w,c
 22044  0025A4  0800               	sublw	0
 22045  0025A6  2426               	addwf	___ftadd@exp1,w,c
 22046  0025A8  6E21               	movwf	??___ftadd& (0+255),c
 22047  0025AA  0E18               	movlw	24
 22048  0025AC  6421               	cpfsgt	??___ftadd,c
 22049  0025AE  D008               	goto	i2l1357
 22050  0025B0                     i2u632_40:
 22051  0025B0  FFFF               	dw	65535	; assembler added errata NOP
 22052  0025B2  C01B  F01B         	movff	___ftadd@f1,?___ftadd
 22053  0025B6  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
 22054  0025BA  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
 22055  0025BE  D0A3               	goto	i2l6058
 22056  0025C0                     i2l1357:
 22057  0025C0  FFFF               	dw	65535	; assembler added errata NOP
 22058  0025C2  0E06               	movlw	6
 22059  0025C4  6E24               	movwf	___ftadd@sign,c
 22060  0025C6  BE1D               	btfsc	___ftadd@f1+2,7,c
 22061  0025C8  8E24               	bsf	___ftadd@sign,7,c
 22062  0025CA  BE20               	btfsc	___ftadd@f2+2,7,c
 22063  0025CC  8C24               	bsf	___ftadd@sign,6,c
 22064  0025CE  8E1C               	bsf	___ftadd@f1+1,7,c
 22065  0025D0  0EFF               	movlw	255
 22066  0025D2  161B               	andwf	___ftadd@f1,f,c
 22067  0025D4  0EFF               	movlw	255
 22068  0025D6  161C               	andwf	___ftadd@f1+1,f,c
 22069  0025D8  0E00               	movlw	0
 22070  0025DA  161D               	andwf	___ftadd@f1+2,f,c
 22071  0025DC  8E1F               	bsf	___ftadd@f2+1,7,c
 22072  0025DE  0EFF               	movlw	255
 22073  0025E0  161E               	andwf	___ftadd@f2,f,c
 22074  0025E2  0EFF               	movlw	255
 22075  0025E4  161F               	andwf	___ftadd@f2+1,f,c
 22076  0025E6  0E00               	movlw	0
 22077  0025E8  1620               	andwf	___ftadd@f2+2,f,c
 22078  0025EA  5025               	movf	___ftadd@exp2,w,c
 22079  0025EC  5C26               	subwf	___ftadd@exp1,w,c
 22080  0025EE  B0D8               	btfsc	status,0,c
 22081  0025F0  D01E               	goto	i2l1362
 22082  0025F2                     i2u635_40:
 22083  0025F2  FFFF               	dw	65535	; assembler added errata NOP
 22084  0025F4  90D8               	bcf	status,0,c
 22085  0025F6  361E               	rlcf	___ftadd@f2,f,c
 22086  0025F8  361F               	rlcf	___ftadd@f2+1,f,c
 22087  0025FA  3620               	rlcf	___ftadd@f2+2,f,c
 22088  0025FC  0625               	decf	___ftadd@exp2,f,c
 22089  0025FE  5026               	movf	___ftadd@exp1,w,c
 22090  002600  1825               	xorwf	___ftadd@exp2,w,c
 22091  002602  B4D8               	btfsc	status,2,c
 22092  002604  D00E               	goto	i2l1367
 22093  002606  0624               	decf	___ftadd@sign,f,c
 22094  002608  C024  F021         	movff	___ftadd@sign,??___ftadd
 22095  00260C  0E07               	movlw	7
 22096  00260E  1621               	andwf	??___ftadd,f,c
 22097  002610  B4D8               	btfsc	status,2,c
 22098  002612  D007               	goto	i2l1367
 22099  002614  D7EE               	goto	i2u635_40
 22100  002616  FFFF               	dw	65535	; assembler added errata NOP
 22101  002618  90D8               	bcf	status,0,c
 22102  00261A  321D               	rrcf	___ftadd@f1+2,f,c
 22103  00261C  321C               	rrcf	___ftadd@f1+1,f,c
 22104  00261E  321B               	rrcf	___ftadd@f1,f,c
 22105  002620  2A26               	incf	___ftadd@exp1,f,c
 22106  002622                     i2l1367:
 22107  002622  FFFF               	dw	65535	; assembler added errata NOP
 22108  002624  5025               	movf	___ftadd@exp2,w,c
 22109  002626  1826               	xorwf	___ftadd@exp1,w,c
 22110  002628  B4D8               	btfsc	status,2,c
 22111  00262A  D023               	goto	i2u642_40
 22112  00262C  D7F4               	goto	i2l1368
 22113  00262E                     i2l1362:
 22114  00262E  FFFF               	dw	65535	; assembler added errata NOP
 22115  002630  5026               	movf	___ftadd@exp1,w,c
 22116  002632  5C25               	subwf	___ftadd@exp2,w,c
 22117  002634  B0D8               	btfsc	status,0,c
 22118  002636  D01D               	goto	i2u642_40
 22119  002638                     i2u639_40:
 22120  002638  FFFF               	dw	65535	; assembler added errata NOP
 22121  00263A  90D8               	bcf	status,0,c
 22122  00263C  361B               	rlcf	___ftadd@f1,f,c
 22123  00263E  361C               	rlcf	___ftadd@f1+1,f,c
 22124  002640  361D               	rlcf	___ftadd@f1+2,f,c
 22125  002642  0626               	decf	___ftadd@exp1,f,c
 22126  002644  5026               	movf	___ftadd@exp1,w,c
 22127  002646  1825               	xorwf	___ftadd@exp2,w,c
 22128  002648  B4D8               	btfsc	status,2,c
 22129  00264A  D00E               	goto	i2l1376
 22130  00264C  0624               	decf	___ftadd@sign,f,c
 22131  00264E  C024  F021         	movff	___ftadd@sign,??___ftadd
 22132  002652  0E07               	movlw	7
 22133  002654  1621               	andwf	??___ftadd,f,c
 22134  002656  B4D8               	btfsc	status,2,c
 22135  002658  D007               	goto	i2l1376
 22136  00265A  D7EE               	goto	i2u639_40
 22137  00265C  FFFF               	dw	65535	; assembler added errata NOP
 22138  00265E  90D8               	bcf	status,0,c
 22139  002660  3220               	rrcf	___ftadd@f2+2,f,c
 22140  002662  321F               	rrcf	___ftadd@f2+1,f,c
 22141  002664  321E               	rrcf	___ftadd@f2,f,c
 22142  002666  2A25               	incf	___ftadd@exp2,f,c
 22143  002668                     i2l1376:
 22144  002668  FFFF               	dw	65535	; assembler added errata NOP
 22145  00266A  5025               	movf	___ftadd@exp2,w,c
 22146  00266C  1826               	xorwf	___ftadd@exp1,w,c
 22147  00266E  A4D8               	btfss	status,2,c
 22148  002670  D7F5               	goto	i2l1377
 22149  002672                     i2u642_40:
 22150  002672  FFFF               	dw	65535	; assembler added errata NOP
 22151  002674  AE24               	btfss	___ftadd@sign,7,c
 22152  002676  D00C               	goto	i2l1379
 22153  002678  0EFF               	movlw	255
 22154  00267A  1A1B               	xorwf	___ftadd@f1,f,c
 22155  00267C  0EFF               	movlw	255
 22156  00267E  1A1C               	xorwf	___ftadd@f1+1,f,c
 22157  002680  0EFF               	movlw	255
 22158  002682  1A1D               	xorwf	___ftadd@f1+2,f,c
 22159  002684  0E01               	movlw	1
 22160  002686  261B               	addwf	___ftadd@f1,f,c
 22161  002688  0E00               	movlw	0
 22162  00268A  221C               	addwfc	___ftadd@f1+1,f,c
 22163  00268C  0E00               	movlw	0
 22164  00268E  221D               	addwfc	___ftadd@f1+2,f,c
 22165  002690                     i2l1379:
 22166  002690  FFFF               	dw	65535	; assembler added errata NOP
 22167  002692  AC24               	btfss	___ftadd@sign,6,c
 22168  002694  D00C               	goto	i2l1380
 22169  002696  0EFF               	movlw	255
 22170  002698  1A1E               	xorwf	___ftadd@f2,f,c
 22171  00269A  0EFF               	movlw	255
 22172  00269C  1A1F               	xorwf	___ftadd@f2+1,f,c
 22173  00269E  0EFF               	movlw	255
 22174  0026A0  1A20               	xorwf	___ftadd@f2+2,f,c
 22175  0026A2  0E01               	movlw	1
 22176  0026A4  261E               	addwf	___ftadd@f2,f,c
 22177  0026A6  0E00               	movlw	0
 22178  0026A8  221F               	addwfc	___ftadd@f2+1,f,c
 22179  0026AA  0E00               	movlw	0
 22180  0026AC  2220               	addwfc	___ftadd@f2+2,f,c
 22181  0026AE                     i2l1380:
 22182  0026AE  FFFF               	dw	65535	; assembler added errata NOP
 22183  0026B0  0E00               	movlw	0
 22184  0026B2  6E24               	movwf	___ftadd@sign,c
 22185  0026B4  501B               	movf	___ftadd@f1,w,c
 22186  0026B6  261E               	addwf	___ftadd@f2,f,c
 22187  0026B8  501C               	movf	___ftadd@f1+1,w,c
 22188  0026BA  221F               	addwfc	___ftadd@f2+1,f,c
 22189  0026BC  501D               	movf	___ftadd@f1+2,w,c
 22190  0026BE  2220               	addwfc	___ftadd@f2+2,f,c
 22191  0026C0  AE20               	btfss	___ftadd@f2+2,7,c
 22192  0026C2  D00E               	goto	i2l1381
 22193  0026C4  0EFF               	movlw	255
 22194  0026C6  1A1E               	xorwf	___ftadd@f2,f,c
 22195  0026C8  0EFF               	movlw	255
 22196  0026CA  1A1F               	xorwf	___ftadd@f2+1,f,c
 22197  0026CC  0EFF               	movlw	255
 22198  0026CE  1A20               	xorwf	___ftadd@f2+2,f,c
 22199  0026D0  0E01               	movlw	1
 22200  0026D2  261E               	addwf	___ftadd@f2,f,c
 22201  0026D4  0E00               	movlw	0
 22202  0026D6  221F               	addwfc	___ftadd@f2+1,f,c
 22203  0026D8  0E00               	movlw	0
 22204  0026DA  2220               	addwfc	___ftadd@f2+2,f,c
 22205  0026DC  0E01               	movlw	1
 22206  0026DE  6E24               	movwf	___ftadd@sign,c
 22207  0026E0                     i2l1381:
 22208  0026E0  FFFF               	dw	65535	; assembler added errata NOP
 22209  0026E2  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
 22210  0026E6  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 22211  0026EA  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 22212  0026EE  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
 22213  0026F2  C024  F005         	movff	___ftadd@sign,___ftpack@sign
 22214  0026F6  ECC6  F01D         	call	___ftpack	;wreg free
 22215  0026FA  C001  F01B         	movff	?___ftpack,?___ftadd
 22216  0026FE  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
 22217  002702  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
 22218  002706                     i2l6058:
 22219  002706  FFFF               	dw	65535	; assembler added errata NOP
 22220  002708  0012               	return		;funcret
 22221  00270A  FFFF               	dw	65535	; errata NOP
 22222  00270C                     __end_of___ftadd:
 22223                           	opt stack 0
 22224                           tosu	equ	0xFFF
 22225                           tosh	equ	0xFFE
 22226                           tosl	equ	0xFFD
 22227                           pclatu	equ	0xFFB
 22228                           pclath	equ	0xFFA
 22229                           tblptru	equ	0xFF8
 22230                           tblptrh	equ	0xFF7
 22231                           tblptrl	equ	0xFF6
 22232                           tablat	equ	0xFF5
 22233                           prodh	equ	0xFF4
 22234                           prodl	equ	0xFF3
 22235                           intcon	equ	0xFF2
 22236                           indf0	equ	0xFEF
 22237                           postinc0	equ	0xFEE
 22238                           fsr0h	equ	0xFEA
 22239                           fsr0l	equ	0xFE9
 22240                           wreg	equ	0xFE8
 22241                           postdec1	equ	0xFE5
 22242                           fsr1h	equ	0xFE2
 22243                           fsr1l	equ	0xFE1
 22244                           indf2	equ	0xFDF
 22245                           postinc2	equ	0xFDE
 22246                           postdec2	equ	0xFDD
 22247                           fsr2h	equ	0xFDA
 22248                           fsr2l	equ	0xFD9
 22249                           status	equ	0xFD8
 22250                           
 22251 ;; *************** function ___ftpack *****************
 22252 ;; Defined at:
 22253 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 22254 ;; Parameters:    Size  Location     Type
 22255 ;;  arg             3    0[COMRAM] unsigned um
 22256 ;;  exp             1    3[COMRAM] unsigned char 
 22257 ;;  sign            1    4[COMRAM] unsigned char 
 22258 ;; Auto vars:     Size  Location     Type
 22259 ;;		None
 22260 ;; Return value:  Size  Location     Type
 22261 ;;                  3    0[COMRAM] float 
 22262 ;; Registers used:
 22263 ;;		wreg, status,2, status,0
 22264 ;; Tracked objects:
 22265 ;;		On entry : 0/0
 22266 ;;		On exit  : 0/0
 22267 ;;		Unchanged: 0/0
 22268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22269 ;;      Params:         5       0       0       0       0       0       0
 22270 ;;      Locals:         0       0       0       0       0       0       0
 22271 ;;      Temps:          3       0       0       0       0       0       0
 22272 ;;      Totals:         8       0       0       0       0       0       0
 22273 ;;Total ram usage:        8 bytes
 22274 ;; Hardware stack levels used:    1
 22275 ;; This function calls:
 22276 ;;		Nothing
 22277 ;; This function is called by:
 22278 ;;		___ftadd
 22279 ;;		___ftdiv
 22280 ;;		___ftmul
 22281 ;;		___lwtoft
 22282 ;; This function uses a non-reentrant model
 22283 ;;
 22284                           
 22285                           	psect	text96
 22286  003B8C                     __ptext96:
 22287                           	opt stack 0
 22288  003B8C                     ___ftpack:
 22289                           	opt stack 0
 22290  003B8C  FFFF               	dw	65535	; assembler added errata NOP
 22291                           
 22292                           ;incstack = 0
 22293  003B8E  5004               	movf	___ftpack@exp,w,c
 22294  003B90  B4D8               	btfsc	status,2,c
 22295  003B92  D005               	goto	i2u543_40
 22296  003B94  5001               	movf	___ftpack@arg,w,c
 22297  003B96  1002               	iorwf	___ftpack@arg+1,w,c
 22298  003B98  1003               	iorwf	___ftpack@arg+2,w,c
 22299  003B9A  A4D8               	btfss	status,2,c
 22300  003B9C  D00E               	goto	i2l1322
 22301  003B9E                     i2u543_40:
 22302  003B9E  FFFF               	dw	65535	; assembler added errata NOP
 22303  003BA0  0E00               	movlw	0
 22304  003BA2  6E01               	movwf	?___ftpack,c
 22305  003BA4  0E00               	movlw	0
 22306  003BA6  6E02               	movwf	?___ftpack+1,c
 22307  003BA8  0E00               	movlw	0
 22308  003BAA  6E03               	movwf	?___ftpack+2,c
 22309  003BAC  D04E               	goto	i2l5382
 22310  003BAE  FFFF               	dw	65535	; assembler added errata NOP
 22311  003BB0  2A04               	incf	___ftpack@exp,f,c
 22312  003BB2  90D8               	bcf	status,0,c
 22313  003BB4  3203               	rrcf	___ftpack@arg+2,f,c
 22314  003BB6  3202               	rrcf	___ftpack@arg+1,f,c
 22315  003BB8  3201               	rrcf	___ftpack@arg,f,c
 22316  003BBA                     i2l1322:
 22317  003BBA  FFFF               	dw	65535	; assembler added errata NOP
 22318  003BBC  0E00               	movlw	0
 22319  003BBE  1401               	andwf	___ftpack@arg,w,c
 22320  003BC0  6E06               	movwf	??___ftpack& (0+255),c
 22321  003BC2  0E00               	movlw	0
 22322  003BC4  1402               	andwf	___ftpack@arg+1,w,c
 22323  003BC6  6E07               	movwf	(??___ftpack+1)& (0+255),c
 22324  003BC8  0EFE               	movlw	254
 22325  003BCA  1403               	andwf	___ftpack@arg+2,w,c
 22326  003BCC  6E08               	movwf	(??___ftpack+2)& (0+255),c
 22327  003BCE  5006               	movf	??___ftpack,w,c
 22328  003BD0  1007               	iorwf	??___ftpack+1,w,c
 22329  003BD2  1008               	iorwf	??___ftpack+2,w,c
 22330  003BD4  B4D8               	btfsc	status,2,c
 22331  003BD6  D00D               	goto	i2l1325
 22332  003BD8  D7EA               	goto	i2l1323
 22333  003BDA  FFFF               	dw	65535	; assembler added errata NOP
 22334  003BDC  2A04               	incf	___ftpack@exp,f,c
 22335  003BDE  0E01               	movlw	1
 22336  003BE0  2601               	addwf	___ftpack@arg,f,c
 22337  003BE2  0E00               	movlw	0
 22338  003BE4  2202               	addwfc	___ftpack@arg+1,f,c
 22339  003BE6  0E00               	movlw	0
 22340  003BE8  2203               	addwfc	___ftpack@arg+2,f,c
 22341  003BEA  90D8               	bcf	status,0,c
 22342  003BEC  3203               	rrcf	___ftpack@arg+2,f,c
 22343  003BEE  3202               	rrcf	___ftpack@arg+1,f,c
 22344  003BF0  3201               	rrcf	___ftpack@arg,f,c
 22345  003BF2                     i2l1325:
 22346  003BF2  FFFF               	dw	65535	; assembler added errata NOP
 22347  003BF4  0E00               	movlw	0
 22348  003BF6  1401               	andwf	___ftpack@arg,w,c
 22349  003BF8  6E06               	movwf	??___ftpack& (0+255),c
 22350  003BFA  0E00               	movlw	0
 22351  003BFC  1402               	andwf	___ftpack@arg+1,w,c
 22352  003BFE  6E07               	movwf	(??___ftpack+1)& (0+255),c
 22353  003C00  0EFF               	movlw	255
 22354  003C02  1403               	andwf	___ftpack@arg+2,w,c
 22355  003C04  6E08               	movwf	(??___ftpack+2)& (0+255),c
 22356  003C06  5006               	movf	??___ftpack,w,c
 22357  003C08  1007               	iorwf	??___ftpack+1,w,c
 22358  003C0A  1008               	iorwf	??___ftpack+2,w,c
 22359  003C0C  B4D8               	btfsc	status,2,c
 22360  003C0E  D007               	goto	i2l1328
 22361  003C10  D7E4               	goto	i2l1326
 22362  003C12  FFFF               	dw	65535	; assembler added errata NOP
 22363  003C14  0604               	decf	___ftpack@exp,f,c
 22364  003C16  90D8               	bcf	status,0,c
 22365  003C18  3601               	rlcf	___ftpack@arg,f,c
 22366  003C1A  3602               	rlcf	___ftpack@arg+1,f,c
 22367  003C1C  3603               	rlcf	___ftpack@arg+2,f,c
 22368  003C1E                     i2l1328:
 22369  003C1E  FFFF               	dw	65535	; assembler added errata NOP
 22370  003C20  BE02               	btfsc	___ftpack@arg+1,7,c
 22371  003C22  D003               	goto	i2u547_40
 22372  003C24  0E02               	movlw	2
 22373  003C26  6004               	cpfslt	___ftpack@exp,c
 22374  003C28  D7F4               	goto	i2l1329
 22375  003C2A                     i2u547_40:
 22376  003C2A  FFFF               	dw	65535	; assembler added errata NOP
 22377  003C2C  A004               	btfss	___ftpack@exp,0,c
 22378  003C2E  9E02               	bcf	___ftpack@arg+1,7,c
 22379  003C30  90D8               	bcf	status,0,c
 22380  003C32  3204               	rrcf	___ftpack@exp,f,c
 22381  003C34  5004               	movf	___ftpack@exp,w,c
 22382  003C36  1203               	iorwf	___ftpack@arg+2,f,c
 22383  003C38  5005               	movf	___ftpack@sign,w,c
 22384  003C3A  A4D8               	btfss	status,2,c
 22385  003C3C  8E03               	bsf	___ftpack@arg+2,7,c
 22386  003C3E  C001  F001         	movff	___ftpack@arg,?___ftpack
 22387  003C42  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 22388  003C46  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 22389  003C4A                     i2l5382:
 22390  003C4A  FFFF               	dw	65535	; assembler added errata NOP
 22391  003C4C  0012               	return		;funcret
 22392  003C4E  FFFF               	dw	65535	; errata NOP
 22393  003C50                     __end_of___ftpack:
 22394                           	opt stack 0
 22395                           tosu	equ	0xFFF
 22396                           tosh	equ	0xFFE
 22397                           tosl	equ	0xFFD
 22398                           pclatu	equ	0xFFB
 22399                           pclath	equ	0xFFA
 22400                           tblptru	equ	0xFF8
 22401                           tblptrh	equ	0xFF7
 22402                           tblptrl	equ	0xFF6
 22403                           tablat	equ	0xFF5
 22404                           prodh	equ	0xFF4
 22405                           prodl	equ	0xFF3
 22406                           intcon	equ	0xFF2
 22407                           indf0	equ	0xFEF
 22408                           postinc0	equ	0xFEE
 22409                           fsr0h	equ	0xFEA
 22410                           fsr0l	equ	0xFE9
 22411                           wreg	equ	0xFE8
 22412                           postdec1	equ	0xFE5
 22413                           fsr1h	equ	0xFE2
 22414                           fsr1l	equ	0xFE1
 22415                           indf2	equ	0xFDF
 22416                           postinc2	equ	0xFDE
 22417                           postdec2	equ	0xFDD
 22418                           fsr2h	equ	0xFDA
 22419                           fsr2l	equ	0xFD9
 22420                           status	equ	0xFD8
 22421                           tosu	equ	0xFFF
 22422                           tosh	equ	0xFFE
 22423                           tosl	equ	0xFFD
 22424                           pclatu	equ	0xFFB
 22425                           pclath	equ	0xFFA
 22426                           tblptru	equ	0xFF8
 22427                           tblptrh	equ	0xFF7
 22428                           tblptrl	equ	0xFF6
 22429                           tablat	equ	0xFF5
 22430                           prodh	equ	0xFF4
 22431                           prodl	equ	0xFF3
 22432                           intcon	equ	0xFF2
 22433                           indf0	equ	0xFEF
 22434                           postinc0	equ	0xFEE
 22435                           fsr0h	equ	0xFEA
 22436                           fsr0l	equ	0xFE9
 22437                           wreg	equ	0xFE8
 22438                           postdec1	equ	0xFE5
 22439                           fsr1h	equ	0xFE2
 22440                           fsr1l	equ	0xFE1
 22441                           indf2	equ	0xFDF
 22442                           postinc2	equ	0xFDE
 22443                           postdec2	equ	0xFDD
 22444                           fsr2h	equ	0xFDA
 22445                           fsr2l	equ	0xFD9
 22446                           status	equ	0xFD8
 22447                           
 22448                           	psect	text97
 22449  000000                     __ptext97:
 22450                           	opt stack 0
 22451                           tosu	equ	0xFFF
 22452                           tosh	equ	0xFFE
 22453                           tosl	equ	0xFFD
 22454                           pclatu	equ	0xFFB
 22455                           pclath	equ	0xFFA
 22456                           tblptru	equ	0xFF8
 22457                           tblptrh	equ	0xFF7
 22458                           tblptrl	equ	0xFF6
 22459                           tablat	equ	0xFF5
 22460                           prodh	equ	0xFF4
 22461                           prodl	equ	0xFF3
 22462                           intcon	equ	0xFF2
 22463                           indf0	equ	0xFEF
 22464                           postinc0	equ	0xFEE
 22465                           fsr0h	equ	0xFEA
 22466                           fsr0l	equ	0xFE9
 22467                           wreg	equ	0xFE8
 22468                           postdec1	equ	0xFE5
 22469                           fsr1h	equ	0xFE2
 22470                           fsr1l	equ	0xFE1
 22471                           indf2	equ	0xFDF
 22472                           postinc2	equ	0xFDE
 22473                           postdec2	equ	0xFDD
 22474                           fsr2h	equ	0xFDA
 22475                           fsr2l	equ	0xFD9
 22476                           status	equ	0xFD8
 22477                           
 22478                           	psect	rparam
 22479  0000                     tosu	equ	0xFFF
 22480                           tosh	equ	0xFFE
 22481                           tosl	equ	0xFFD
 22482                           pclatu	equ	0xFFB
 22483                           pclath	equ	0xFFA
 22484                           tblptru	equ	0xFF8
 22485                           tblptrh	equ	0xFF7
 22486                           tblptrl	equ	0xFF6
 22487                           tablat	equ	0xFF5
 22488                           prodh	equ	0xFF4
 22489                           prodl	equ	0xFF3
 22490                           intcon	equ	0xFF2
 22491                           indf0	equ	0xFEF
 22492                           postinc0	equ	0xFEE
 22493                           fsr0h	equ	0xFEA
 22494                           fsr0l	equ	0xFE9
 22495                           wreg	equ	0xFE8
 22496                           postdec1	equ	0xFE5
 22497                           fsr1h	equ	0xFE2
 22498                           fsr1l	equ	0xFE1
 22499                           indf2	equ	0xFDF
 22500                           postinc2	equ	0xFDE
 22501                           postdec2	equ	0xFDD
 22502                           fsr2h	equ	0xFDA
 22503                           fsr2l	equ	0xFD9
 22504                           status	equ	0xFD8
 22505                           
 22506                           	psect	temp
 22507  00007F                     btemp:
 22508                           	opt stack 0
 22509  00007F                     	ds	1
 22510  0000                     int$flags	set	btemp
 22511  0000                     wtemp6	set	btemp+1
 22512                           tosu	equ	0xFFF
 22513                           tosh	equ	0xFFE
 22514                           tosl	equ	0xFFD
 22515                           pclatu	equ	0xFFB
 22516                           pclath	equ	0xFFA
 22517                           tblptru	equ	0xFF8
 22518                           tblptrh	equ	0xFF7
 22519                           tblptrl	equ	0xFF6
 22520                           tablat	equ	0xFF5
 22521                           prodh	equ	0xFF4
 22522                           prodl	equ	0xFF3
 22523                           intcon	equ	0xFF2
 22524                           indf0	equ	0xFEF
 22525                           postinc0	equ	0xFEE
 22526                           fsr0h	equ	0xFEA
 22527                           fsr0l	equ	0xFE9
 22528                           wreg	equ	0xFE8
 22529                           postdec1	equ	0xFE5
 22530                           fsr1h	equ	0xFE2
 22531                           fsr1l	equ	0xFE1
 22532                           indf2	equ	0xFDF
 22533                           postinc2	equ	0xFDE
 22534                           postdec2	equ	0xFDD
 22535                           fsr2h	equ	0xFDA
 22536                           fsr2l	equ	0xFD9
 22537                           status	equ	0xFD8


Data Sizes:
    Strings     1225
    Constant    58
    Data        13
    BSS         273
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     67     126
    BANK0           128     89     128
    BANK1           256      0     188
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ajusteSP_Bombas$2367	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    telaPrincipal$2366	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    acaoTesteBombas$2365	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> intToFloatStr@conv(BANK0[4]), STR_114(CODE[15]), STR_113(CODE[12]), STR_112(CODE[10]), 
		 -> STR_111(CODE[18]), STR_110(CODE[10]), STR_109(CODE[18]), STR_108(CODE[16]), 
		 -> STR_107(CODE[10]), STR_106(CODE[10]), STR_105(CODE[11]), STR_104(CODE[9]), 
		 -> STR_103(CODE[3]), STR_102(CODE[15]), STR_101(CODE[15]), STR_100(CODE[11]), 
		 -> STR_99(CODE[11]), STR_98(CODE[19]), STR_97(CODE[5]), STR_96(CODE[12]), 
		 -> STR_95(CODE[5]), STR_94(CODE[14]), STR_93(CODE[19]), STR_90(CODE[3]), 
		 -> STR_89(CODE[7]), STR_88(CODE[7]), STR_86(CODE[12]), STR_85(CODE[17]), 
		 -> STR_84(CODE[20]), STR_83(CODE[8]), STR_80(CODE[14]), STR_77(CODE[14]), 
		 -> STR_76(CODE[11]), STR_73(CODE[10]), STR_72(CODE[31]), STR_69(CODE[11]), 
		 -> STR_68(CODE[20]), STR_67(CODE[20]), STR_66(CODE[21]), STR_65(CODE[15]), 
		 -> STR_64(CODE[6]), STR_63(CODE[15]), STR_62(CODE[6]), STR_61(CODE[19]), 
		 -> STR_60(CODE[15]), STR_59(CODE[19]), STR_58(CODE[15]), STR_57(CODE[19]), 
		 -> STR_56(CODE[18]), STR_55(CODE[26]), STR_54(CODE[16]), STR_51(CODE[15]), 
		 -> STR_48(CODE[15]), STR_45(CODE[11]), STR_44(CODE[17]), STR_43(CODE[16]), 
		 -> STR_42(CODE[19]), STR_41(CODE[19]), STR_40(CODE[16]), STR_39(CODE[15]), 
		 -> STR_38(CODE[15]), STR_37(CODE[20]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 126
		 -> STR_36(CODE[7]), STR_35(CODE[11]), STR_26(CODE[104]), STR_25(CODE[63]), 
		 -> STR_23(CODE[18]), STR_21(CODE[7]), STR_20(CODE[12]), STR_18(CODE[5]), 
		 -> STR_14(CODE[126]), STR_12(CODE[18]), STR_10(CODE[12]), STR_8(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    memset@p	PTR unsigned char  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), STR_115(CODE[7]), _doprnt@c(BANK0[1]), 
		 -> intToFloatStr@end(BANK0[4]), STR_92(CODE[17]), STR_91(CODE[13]), STR_87(CODE[12]), 
		 -> STR_82(CODE[5]), STR_81(CODE[3]), STR_79(CODE[5]), STR_78(CODE[3]), 
		 -> STR_75(CODE[5]), STR_74(CODE[3]), STR_71(CODE[4]), STR_70(CODE[4]), 
		 -> STR_53(CODE[5]), STR_52(CODE[3]), STR_50(CODE[5]), STR_49(CODE[3]), 
		 -> line3(BANK1[21]), STR_47(CODE[5]), STR_46(CODE[3]), line2(BANK1[21]), 
		 -> line1(BANK1[21]), line4(BANK1[21]), STR_32(CODE[6]), STR_31(CODE[3]), 
		 -> STR_30(CODE[6]), STR_29(CODE[3]), STR_28(CODE[6]), STR_27(CODE[3]), 
		 -> STR_15(CODE[12]), tel2(BANK1[12]), tel1(BANK1[12]), bufferAUX(BANK1[20]), 
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 126
		 -> intToFloatStr@conv(BANK0[4]), STR_114(CODE[15]), STR_113(CODE[12]), STR_112(CODE[10]), 
		 -> STR_111(CODE[18]), STR_110(CODE[10]), STR_109(CODE[18]), STR_108(CODE[16]), 
		 -> STR_107(CODE[10]), STR_106(CODE[10]), STR_105(CODE[11]), STR_104(CODE[9]), 
		 -> STR_103(CODE[3]), STR_102(CODE[15]), STR_101(CODE[15]), STR_100(CODE[11]), 
		 -> STR_99(CODE[11]), STR_98(CODE[19]), STR_97(CODE[5]), STR_96(CODE[12]), 
		 -> STR_95(CODE[5]), STR_94(CODE[14]), STR_93(CODE[19]), STR_90(CODE[3]), 
		 -> STR_89(CODE[7]), STR_88(CODE[7]), STR_86(CODE[12]), STR_85(CODE[17]), 
		 -> STR_84(CODE[20]), STR_83(CODE[8]), STR_80(CODE[14]), STR_77(CODE[14]), 
		 -> STR_76(CODE[11]), STR_73(CODE[10]), STR_72(CODE[31]), STR_69(CODE[11]), 
		 -> STR_68(CODE[20]), STR_67(CODE[20]), STR_66(CODE[21]), STR_65(CODE[15]), 
		 -> STR_64(CODE[6]), STR_63(CODE[15]), STR_62(CODE[6]), STR_61(CODE[19]), 
		 -> STR_60(CODE[15]), STR_59(CODE[19]), STR_58(CODE[15]), STR_57(CODE[19]), 
		 -> STR_56(CODE[18]), STR_55(CODE[26]), STR_54(CODE[16]), STR_51(CODE[15]), 
		 -> STR_48(CODE[15]), STR_45(CODE[11]), STR_44(CODE[17]), STR_43(CODE[16]), 
		 -> STR_42(CODE[19]), STR_41(CODE[19]), STR_40(CODE[16]), STR_39(CODE[15]), 
		 -> STR_38(CODE[15]), STR_37(CODE[20]), STR_36(CODE[7]), STR_35(CODE[11]), 
		 -> STR_26(CODE[104]), STR_25(CODE[63]), STR_23(CODE[18]), STR_21(CODE[7]), 
		 -> STR_20(CODE[12]), STR_18(CODE[5]), STR_14(CODE[126]), STR_12(CODE[18]), 
		 -> STR_10(CODE[12]), STR_8(CODE[5]), STR_4(CODE[5]), STR_3(CODE[9]), 
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 

    S1593__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1593__prbuf$ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    configuraTelefones$1457	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_92(CODE[17]), STR_91(CODE[13]), 

    dataLoger$1442	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_82(CODE[5]), STR_81(CODE[3]), 

    dataLoger$1437	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_79(CODE[5]), STR_78(CODE[3]), 

    dataLoger$1431	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_75(CODE[5]), STR_74(CODE[3]), 

    tela_testeBombas$1412	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_71(CODE[4]), STR_70(CODE[4]), 

    blink@line	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    atualizarLCD@line4	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), 

    atualizarLCD@line3	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), 

    atualizarLCD@line2	PTR unsigned char  size(2) Largest target is 21
		 -> line2(BANK1[21]), 

    atualizarLCD@line1	PTR unsigned char  size(2) Largest target is 21
		 -> line1(BANK1[21]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    acaoTesteBombas$1324	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_53(CODE[5]), STR_52(CODE[3]), 

    acaoTesteBombas$1319	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_50(CODE[5]), STR_49(CODE[3]), 

    acaoTesteBombas$1314	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_47(CODE[5]), STR_46(CODE[3]), 

    sp__intToFloatStr	PTR unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    enviaSMS$1225	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    enviaSMS$1220	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_28(CODE[6]), STR_27(CODE[3]), 

    enviaSMS$1219	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_30(CODE[6]), STR_29(CODE[3]), 

    enviaSMS$1218	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_32(CODE[6]), STR_31(CODE[3]), 

    enviaSMS$1205	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    comunicarTeste$1190	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    getDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    setDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    sp__getSerial	PTR unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    getSerial@ret	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    getSerial@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_7(CODE[7]), 

    sp__memset	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    aguardaBuffer@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[6]), STR_33(CODE[3]), STR_24(CODE[2]), STR_22(CODE[3]), 
		 -> STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_13(CODE[2]), 
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_6(CODE[7]), STR_5(CODE[3]), 

    writeChar@hex	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TIMER in COMRAM

    _TIMER->_lerTransdutor
    _timer->_writeEEPROM16_ext
    i2_getDS1307TimeDate->i2_I2C_Read
    i2_I2C_Restart->i2_I2C_Wait
    i2_I2C_Read->i2_I2C_Wait
    i2_RTC_Init->i2_I2C_Write
    _writeEEPROM16_ext->i2_writeEEPROM_ext
    i2_writeEEPROM_ext->i2_I2C_Write
    i2_writeEEPROM_ext->i2_delay
    i2_I2C_Write->i2_I2C_Wait
    i2_I2C_Stop->i2_I2C_Wait
    i2_I2C_Start->i2_I2C_Wait
    _lerTransdutor->___ftdiv
    _lerTransdutor->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftmul

Critical Paths under _main in BANK0

    _main->_acaoTesteBombas
    _verificarIntervaloTesteBombas->_writeEEPROM_ext
    _tela_testeBombas->_sprintf
    _tela_ajusteRTC->_sprintf
    _setDS1307TimeDate->_I2C_Write
    _DECtoBCD->___awdiv
    _telaPrincipal->_intToFloatStr
    _resetParametros->_clearShiftREG
    _lerParametros->_readEEPROM16_ext
    _readEEPROM16_ext->_readEEPROM_ext
    _informacoes->_sprintf
    _getSinalSIM800L->_atoi
    _getSerial->_sprintf
    _atoi->_getSerial
    _getDS1307TimeDate->_I2C_Write
    _dataLoger->_sprintf
    _criarCaracteresCGRAM->_Lcd_Write_Char
    _configurarEstacionaria->_sprintf
    _configuraTelefones->_comunicarTeste
    _comunicarTeste->_printf
    _atualizarLCD->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _ajusteSP_Bombas->_intToFloatStr
    _acaoTesteBombas->_enviaSMS
    _salvarLOG->_readEEPROM_ext
    _salvarLOG->_writeEEPROM_ext
    _writeEEPROM_ext->_I2C_Write
    _readEEPROM_ext->_I2C_Write
    _I2C_Restart->_I2C_Wait
    _I2C_Read->_I2C_Wait
    _intToFloatStr->_sprintf
    _drenarPressao->_sprintf
    _sprintf->__doprnt
    _acaoBombas->_enviaSMS
    _partidaBombaEstacionaria->_delay
    _enviaSMS->_printf
    _printf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _limparBuffer->_memset
    _aguardaBuffer->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _RTC_Init->_I2C_Write
    _I2C_Write->_DECtoBCD
    _I2C_Stop->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _I2C_Master_Init->___lldiv

Critical Paths under _TIMER in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TIMER in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TIMER in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TIMER in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TIMER in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TIMER in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  360979
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                           _RTC_Init
                         _acaoBombas
                    _acaoTesteBombas
                    _ajusteSP_Bombas
                       _atualizarLCD
                            _btPress
             _configuraRegistradores
                 _configuraTelefones
             _configurarEstacionaria
               _criarCaracteresCGRAM
                          _dataLoger
                              _delay
                  _getDS1307TimeDate
                    _getSinalSIM800L
                        _informacoes
                      _lerParametros
                        _setShiftREG
                            _sprintf
                      _telaPrincipal
                     _tela_ajusteRTC
                   _tela_testeBombas
      _verificarIntervaloTesteBombas
 ---------------------------------------------------------------------------------
 (1) _verificarIntervaloTesteBombas                        0     0      0    5482
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_testeBombas                                     4     4      0   23323
                                             53 BANK0      4     4      0
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_ajusteRTC                                       0     0      0   22175
                              _blink
                            _btPress
                  _setDS1307TimeDate
                            _sprintf
                          _validaRTC
 ---------------------------------------------------------------------------------
 (2) _validaRTC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setDS1307TimeDate                                    3     1      2    4358
                                             12 BANK0      3     1      2
                           _DECtoBCD
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DECtoBCD                                             2     2      0    1902
                                              8 BANK0      2     2      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _telaPrincipal                                        2     2      0   33421
                                             66 BANK0      2     2      0
                              _blink
                            _btPress
                      _clearShiftREG
                      _intToFloatStr
                    _resetParametros
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _resetParametros                                      0     0      0      69
                      _clearShiftREG
 ---------------------------------------------------------------------------------
 (1) _setShiftREG                                          2     2      0      69
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _lerParametros                                        2     2      0   12128
                                             20 BANK0      2     2      0
                   _readEEPROM16_ext
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _readEEPROM16_ext                                     6     4      2    3221
                                             14 BANK0      6     4      2
                     _readEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _informacoes                                          0     0      0   13372
                            _btPress
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _getSinalSIM800L                                      4     4      0   28187
                                             70 BANK0      4     4      0
                      _aguardaBuffer
                               _atoi
                              _delay
                          _getSerial
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _getSerial                                           10     7      3   16020
                                             53 BANK0     10     7      3
                             _memset
                            _sprintf
                             _strlen
                             _strstr
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     835
                                             63 BANK0      7     5      2
                             ___wmul
                          _getSerial (ARG)
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _getDS1307TimeDate                                    2     0      2    3431
                                             12 BANK0      2     0      2
                           _BCDtoDEC
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _BCDtoDEC                                             1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _dataLoger                                           12    12      0   17679
                                             53 BANK0     12    12      0
                            ___awdiv
                            _btPress
                     _readEEPROM_ext
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _criarCaracteresCGRAM                                56    56      0     521
                                              4 BANK0     56    56      0
                            _Lcd_Cmd
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _configurarEstacionaria                               0     0      0   23299
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _configuraTelefones                                   5     5      0   34659
                                             63 BANK0      5     5      0
                              _blink
                            _btPress
                     _comunicarTeste
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _comunicarTeste                                       4     4      0   11201
                                             59 BANK0      4     4      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (1) _configuraRegistradores                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _atualizarLCD                                         9     1      8    2076
                                              8 BANK0      9     1      8
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     3     1      2     573
                                              4 BANK0      3     1      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     888
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _ajusteSP_Bombas                                      2     2      0   38811
                                             66 BANK0      2     2      0
                              _blink
                            _btPress
                      _intToFloatStr
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _blink                                                5     1      4    4445
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _acaoTesteBombas                                     17    17      0   72449
                                             72 BANK0     17    17      0
                            _btPress
                      _clearShiftREG
                      _drenarPressao
                           _enviaSMS
                      _intToFloatStr
           _partidaBombaEstacionaria
                     _readEEPROM_ext
                          _salvarLOG
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _salvarLOG                                            3     3      0    8878
                                             14 BANK0      3     3      0
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM_ext                                      2     1      1    5482
                                             12 BANK0      2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _readEEPROM_ext                                       2     2      0    3152
                                             12 BANK0      2     2      0
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Restart                                          0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             4     2      2     881
                                              1 BANK0      4     2      2
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _intToFloatStr                                       13    11      2   15420
                                             53 BANK0     13    11      2
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     752
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1060
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _drenarPressao                                        0     0      0   13350
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             20     6     14   13350
                                             33 BANK0     20     6     14
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) _clearShiftREG                                        1     1      0      69
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _btPress                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _acaoBombas                                           3     3      0   12493
                                             72 BANK0      3     3      0
                           _enviaSMS
           _partidaBombaEstacionaria
 ---------------------------------------------------------------------------------
 (2) _partidaBombaEstacionaria                             1     1      0    1130
                                              3 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _enviaSMS                                            13    13      0   11363
                                             59 BANK0     13    13      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeChar                                            2     0      2     402
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              26     6     20    4630
                                             33 BANK0     26     6     20
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             25    19      6    3428
                                             12 BANK0     21    15      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _limparBuffer                                         0     0      0    1638
                              _delay
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     552
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _aguardaBuffer                                        2     0      2    3421
                                             19 BANK0      2     0      2
                              _delay
                             _strstr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    1401
                                             15 BANK0      4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     362
                                              6 BANK0      9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               5     1      4     240
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _delay                                                3     1      2    1086
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0    2226
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            2     0      2    2226
                                             10 BANK0      2     0      2
                           _DECtoBCD (ARG)
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Wait                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _TIMER                                               19    19      0   17332
                                             48 COMRAM    19    19      0
                      _lerTransdutor
                        _readButtons
                              _timer
 ---------------------------------------------------------------------------------
 (7) _timer                                                6     6      0    2052
                                              8 COMRAM     6     6      0
                  _writeEEPROM16_ext
                         i2_RTC_Init
                i2_getDS1307TimeDate
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (8) i2_getDS1307TimeDate                                  2     0      2     707
                                              5 COMRAM     2     0      2
                         i2_BCDtoDEC
                         i2_I2C_Read
                      i2_I2C_Restart
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Restart                                        0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Read                                           4     2      2     227
                                              1 COMRAM     4     2      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_BCDtoDEC                                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_RTC_Init                                           0     0      0     256
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (8) _writeEEPROM16_ext                                    3     1      2     591
                                              5 COMRAM     3     1      2
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (8) i2_writeEEPROM_ext                                    2     1      1     426
                                              3 COMRAM     2     1      1
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
                            i2_delay
 ---------------------------------------------------------------------------------
 (9) i2_delay                                              3     1      2      48
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Write                                          2     0      2     256
                                              1 COMRAM     2     0      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Stop                                           0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Start                                          0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Wait                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _readButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _lerTransdutor                                        7     7      0   15213
                                             41 COMRAM     7     7      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
                            _readADC
 ---------------------------------------------------------------------------------
 (8) _readADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) ___lwtoft                                             3     0      3    2564
                                              8 COMRAM     3     0      3
                           ___ftpack
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     328
                                             26 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    3526
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             15     9      6    3480
                                             26 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    4622
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _RTC_Init
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _acaoBombas
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _partidaBombaEstacionaria
       _delay
   _acaoTesteBombas
     _btPress
     _clearShiftREG
     _drenarPressao
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _partidaBombaEstacionaria
       _delay
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _salvarLOG
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
       _writeEEPROM_ext
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
         _delay
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _ajusteSP_Bombas
     _blink
     _btPress
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _atualizarLCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _btPress
   _configuraRegistradores
   _configuraTelefones
     _blink
     _btPress
     _comunicarTeste
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _configurarEstacionaria
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _criarCaracteresCGRAM
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _dataLoger
     ___awdiv
     _btPress
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _delay
   _getDS1307TimeDate
     _BCDtoDEC
     _I2C_Read
       _I2C_Wait
     _I2C_Restart
       _I2C_Wait
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _getSinalSIM800L
     _aguardaBuffer
       _delay
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _atoi
       ___wmul
       _getSerial (ARG)
         _memset
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
         _strlen
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _isdigit (ARG)
     _delay
     _getSerial
       _memset
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _strlen
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _limparBuffer
       _delay
       _memset
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeChar
   _informacoes
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _lerParametros
     _readEEPROM16_ext
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _setShiftREG
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       ___wmul *
       _isdigit *
       _putch *
   _telaPrincipal
     _blink
     _btPress
     _clearShiftREG
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _resetParametros
       _clearShiftREG
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _tela_ajusteRTC
     _blink
     _btPress
     _setDS1307TimeDate
       _DECtoBCD
         ___awdiv
         ___awmod
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _validaRTC
   _tela_testeBombas
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _verificarIntervaloTesteBombas
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay

 _TIMER (ROOT)
   _lerTransdutor
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
     ___lwtoft
       ___ftpack
       _readADC (ARG)
     _readADC
   _readButtons
   _timer
     _writeEEPROM16_ext
       i2_writeEEPROM_ext
         i2_I2C_Start
           i2_I2C_Wait
         i2_I2C_Stop
           i2_I2C_Wait
         i2_I2C_Write
           i2_I2C_Wait
         i2_delay
     i2_RTC_Init
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_getDS1307TimeDate
       i2_BCDtoDEC
       i2_I2C_Read
         i2_I2C_Wait
       i2_I2C_Restart
         i2_I2C_Wait
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_writeEEPROM_ext
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
       i2_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      BC       7       73.4%
BITBANK0            80      0       0       4        0.0%
BANK0               80     59      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     43      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BA      15        0.0%
DATA                 0      0     1BA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Aug 24 20:26:21 2019

                                                 __size_of_readEEPROM_ext 0056  
                                                             __CFG_CP0$ON 000000  
                                                             __CFG_CP1$ON 000000  
                                                             __CFG_CP2$ON 000000  
                                                             __CFG_CP3$ON 000000  
                                                      __size_of_I2C_Start 000C  
                                                      __size_of_I2C_Write 000E  
                                                __end_of_readEEPROM16_ext 71E2  
                                                             __CFG_CPD$ON 000000  
                                                            ___awdiv@sign 0085  
                                                             __CFG_BOR$ON 000000  
                                                     ___wmul@multiplicand 0082  
                                          __end_of_configurarEstacionaria 2BCE  
                                        __end_of_partidaBombaEstacionaria 386C  
                                                             __CFG_OSC$HS 000000  
                                                            ___ftadd@exp1 0026  
                                                            ___ftadd@exp2 0025  
                                                            ___ftadd@sign 0024  
                                                             __CFG_WDT$ON 000000  
                                                                     l301 292E  
                                                                     l310 2A1A  
                                                                     l302 294C  
                                                                     l311 2A2A  
                                                                     l304 29A0  
                                                                     l321 21FE  
                                                                     l305 2A1C  
                                                                     l306 29C8  
                                                                     l315 2330  
                                                                     l331 22CE  
                                                                     l420 7152  
                                                                     l332 2304  
                                                                     l324 2228  
                                                                     l316 218E  
                                                                     l308 29F0  
                                                                     l253 72FE  
                                                                     l317 2366  
                                                                     l333 22F0  
                                                                     l261 3180  
                                                                     l350 15DE  
                                                                     l334 22FA  
                                                                     l318 21AE  
                                                                     l262 30FC  
                                                                     l407 3AFC  
                                                                     l319 21DE  
                                                                     l263 3144  
                                                                     l503 7482  
                                                                     l344 1850  
                                                                     l360 1736  
                                                                     l520 09EC  
                                                                     l328 2254  
                                                                     l353 1608  
                                                                     l345 155A  
                                                                     l521 0DCA  
                                                                     l513 0958  
                                                                     l425 756A  
                                                                     l610 74B8  
                                                                     l346 1890  
                                                                     l370 16E2  
                                                                     l362 16AE  
                                                                     l530 0AF2  
                                                                     l522 0A10  
                                                                     l290 75EA  
                                                                     l611 74C2  
                                                                     l347 157A  
                                                                     l507 7094  
                                                                     l531 0B32  
                                                                     l515 0960  
                                                                     l612 74C6  
                                                                     l348 15AA  
                                                                     l460 788E  
                                                                     l524 0A4E  
                                                                     l516 097C  
                                                                     l700 1E82  
                                                                     l605 7498  
                                                                     l357 1644  
                                                                     l533 0B52  
                                                                     l525 0A8E  
                                                                     l285 75AE  
                                                                     l606 749C  
                                                                     l390 1836  
                                                                     l374 1766  
                                                                     l358 1758  
                                                                     l366 16C8  
                                                                     l470 78F4  
                                                                     l534 0B5C  
                                                                     l622 3AA4  
                                                                     l286 75BA  
                                                                     l607 74A6  
                                                                     l383 17BE  
                                                                     l359 1694  
                                                                     l463 789C  
                                                                     l519 0D76  
                                                                     l543 0C0A  
                                                                     l527 0AA0  
                                                                     l623 3A0C  
                                                                     l287 75C6  
                                                                     l703 1EB6  
                                                                     l608 74AA  
                                                                     l392 1844  
                                                                     l480 2F28  
                                                                     l560 0D3A  
                                                                     l552 0CBE  
                                                                     l536 0B9E  
                                                                     l528 0AAA  
                                                                     l624 3AC2  
                                                                     l640 38E2  
                                                                     l296 2A38  
                                                                     l288 75D2  
                                                                     l720 2450  
                                                                     l609 74B4  
                                                                     l385 17D4  
                                                                     l481 2F52  
                                                                     l473 2E7E  
                                                                     l465 78AA  
                                                                     l545 0C3A  
                                                                     l537 0BEE  
                                                                     l625 3A32  
                                                                     l297 28CC  
                                                                     l289 75DE  
                                                                     l721 2476  
                                                                     l378 17B6  
                                                                     l482 2F6A  
                                                                     l562 0D66  
                                                                     l546 0C5E  
                                                                     l626 3A58  
                                                                     l802 1520  
                                                                     l650 39A6  
                                                                     l298 2A5A  
                                                                     l706 1EEA  
                                                                     l730 24D6  
                                                                     l714 23E6  
                                                                     l379 17A6  
                                                                     l491 37F6  
                                                                     l475 2EA4  
                                                                     l459 78D4  
                                                                     l467 78B8  
                                                                     l627 3A7E  
                                                                     l635 726C  
                                                                     l803 1318  
                                                                     l299 28EE  
                                                                     l723 2536  
                                                                     l731 24FE  
                                                                     l388 1800  
                                                                     l492 37FC  
                                                                     l468 78CE  
                                                                     l556 0CF6  
                                                                     l548 0C86  
                                                                     l660 7372  
                                                                     l812 153A  
                                                                     l804 1332  
                                                                     l724 248A  
                                                                     l900 0F74  
                                                                     l493 381A  
                                                                     l477 2ECC  
                                                                     l661 735A  
                                                                     l813 13FC  
                                                                     l653 39B8  
                                                                     l709 1F1E  
                                                                     l733 2514  
                                                                     l725 24B0  
                                                                     l717 243C  
                                                                     l901 0F7C  
                                                                     l494 3836  
                                                                     l822 14EA  
                                                                     l814 1416  
                                                                     l806 1378  
                                                                     l670 27A4  
                                                                     l726 24C2  
                                                                     l495 384A  
                                                                     l487 37CA  
                                                                     l479 2EFA  
                                                                     l807 139A  
                                                                     l831 2BB4  
                                                                     l655 39E8  
                                                                     l647 398A  
                                                                     l671 276C  
                                                                     l719 251C  
                                                                     l911 1024  
                                                                     l824 1518  
                                                                     l816 145C  
                                                                     l808 13BC  
                                                                     l832 2B38  
                                                                     l592 2FBA  
                                                                     l672 27B4  
                                                                     l497 3860  
                                                                     l489 37E6  
                                                                     l817 147E  
                                                                     l833 2B5E  
                                                                     l649 3996  
                                                                     l593 2F9C  
                                                                     l673 278A  
                                                                     l729 24CE  
                                                                     l905 1112  
                                                                     l921 10D4  
                                                                     l913 1044  
                                                                     l498 3866  
                                                                     l850 1AEA  
                                                                     l818 14A0  
                                                                     l770 1BD2  
                                                                     l762 1B36  
                                                                     l682 289C  
                                                                     l674 27EA  
                                                                     l690 1DE8  
                                                                     l930 119C  
                                                                     l906 0FE4  
                                                                     l851 19EA  
                                                                     l843 198E  
                                                                     l835 2BC8  
                                                                     l595 303C  
                                                                     l683 28B4  
                                                                     l675 2820  
                                                                     l915 1064  
                                                                     l860 1AA0  
                                                                     l852 1A10  
                                                                     l836 2B72  
                                                                     l908 1148  
                                                                     l924 1104  
                                                                     l845 1ACA  
                                                                     l861 1AB2  
                                                                     l853 1A22  
                                                                     l837 2B98  
                                                                     l829 2B0A  
                                                                     l773 1C12  
                                                                     l597 306E  
                                                                     l693 1F54  
                                                                     l925 115A  
                                                                     l917 1084  
                                                                     l909 1004  
                                                                     l846 19A2  
                                                                     l774 1C36  
                                                                     l766 1B98  
                                                                     l678 2850  
                                                                     l694 1E1A  
                                                                     l863 1AC2  
                                                                     l855 1A32  
                                                                     l847 19C8  
                                                                     l791 1254  
                                                                     l839 2BAC  
                                                                     l775 1C30  
                                                                     l687 1DBA  
                                                                     l927 116C  
                                                                     l919 10AE  
                                                                     l856 1A58  
                                                                     l848 19DA  
                                                                     l776 1C76  
                                                                     l857 1A6A  
                                                                     l793 1268  
                                                                     l689 1F28  
                                                                     l697 1E4E  
                                                                     l929 1188  
                                                                     l890 0FD0  
                                                                     l859 1A7A  
                                                                     l795 12E2  
                                                                     l787 1212  
                                                                     l779 1D22  
                                                                     l891 0E84  
                                                                     l796 129A  
                                                                     l892 0EE0  
                                                                     l884 0E46  
                                                                     l893 0F3C  
                                                                     l894 0F44  
                                                                     l799 12FE  
                                                                     l895 0F4C  
                                                                     l888 0F86  
                                                                     l896 0F54  
                                                                     l897 0F5C  
                                                                     l889 0E7C  
                                                                     l898 0F64  
                                                                     l899 0F6C  
                                                                     l988 70EC  
                                                                     l989 70D4  
                                                            __CFG_CPB$OFF 000000  
                                                                     _PEN 007E2A  
                                                                     _SEN 007E28  
                                                                     _cbf 0066  
                                                                     _rtc 0073  
                                                             ?i2_I2C_Read 0002  
                                                            __CFG_BORV$20 000000  
                                                            ___awmod@sign 0085  
                                                             ?i2_I2C_Wait 0001  
                                                             ?i2_I2C_Stop 0001  
                                                                     prod 000FF3  
                                                                     tosl 000FFD  
                                                                     wreg 000FE8  
                                                    __size_of_I2C_Restart 000C  
                                                             ?i2_BCDtoDEC 0001  
                                                __size_of_ajusteSP_Bombas 025A  
                                                            __CFG_LVP$OFF 000000  
                                                            ___ftdiv@cntr 0024  
                                                            ___ftdiv@sign 0029  
                                                                    l1004 3ECE  
                                                                    l1022 0128  
                                                                    l1006 3ED8  
                                                                    l1023 01A2  
                                                                    l1040 0540  
                                                                    l1024 0174  
                                                                    l1041 02AE  
                                                                    l1033 021C  
                                                                    l1050 035A  
                                                                    l1042 02EA  
                                                                    l1035 04E8  
                                                                    l1051 039C  
                                                                    l1043 02FE  
                                                                    l1027 01BE  
                                                                    l1060 04D4  
                                                                    l1052 03C8  
                                                                    l1044 02F6  
                                                                    l1028 01B4  
                                                                    l1061 057C  
                                                                    l1070 0652  
                                                                    l1071 067E  
                                                                    l1055 03DE  
                                                                    l1047 034E  
                                                                    l1080 0750  
                                                                    l1056 0448  
                                                                    l1081 077C  
                                                                    l1065 05D0  
                                                                    l1057 049A  
                                                                    l1074 06CC  
                                                                    l1066 05F6  
                                                                    l1075 06F8  
                                                                    l1067 0600  
                                                                    l1059 04AE  
                                                                    l1084 07DC  
                                                                    l1068 0704  
                                                                    l1085 0808  
                                                                    l1262 3574  
                                                                    l1087 0810  
                                                                    l1263 3532  
                                                                    l1520 7796  
                                                                    l1088 089E  
                                                                    l1256 34DA  
                                                                    l1521 77A2  
                                                                    l1089 08CA  
                                                                    l1265 35AA  
                                                                    l1257 34D2  
                                                                    l1530 7628  
                                                                    l1282 3D5C  
                                                                    l1266 35B4  
                                                                    l1531 7634  
                                                                    l1283 3D68  
                                                                    l1275 3D04  
                                                                    l1291 7A2C  
                                                                    l1259 351E  
                                                                    l1540 7202  
                                                                    l1516 7772  
                                                                    l1284 3D78  
                                                                    l1276 3D16  
                                                                    l1292 7A22  
                                                                    l1541 71EE  
                                                                    l1517 7768  
                                                                    l1437 6F76  
                                                                    l1526 760C  
                                                                    l1278 3D38  
                                                                    l1463 3F80  
                                                                    l1527 7602  
                                                                    l1279 3D2E  
                                                                    l1295 7A48  
                                                                    l1464 3F72  
                                                                    l1296 7A54  
                                                                    l1288 7A04  
                                                                    l1297 7A64  
                                                                    l1289 7A12  
                                                                    l1730 3DF4  
                                                                    l1467 3FB8  
                                                                    l1723 73A0  
                                                                    l1468 3FC8  
                                                                    l1728 3DFE  
                                                                    l1729 3D8A  
                                                                    l1682 7702  
                                                                    l5026 035C  
                                                                    l1683 76FA  
                                                                    l5036 03E0  
                                                                    l1694 3E8E  
                                                                    l5070 0582  
                                                                    l1695 3E24  
                                                                    l1696 3E62  
                                                                    l5308 7148  
                                                                    l5270 7302  
                                                                    l5512 356E  
                                                                    l6422 29A2  
                                                                    l4914 3EB2  
                                                                    l6434 29F2  
                                                                    l4924 71F0  
                                                                    l7244 1290  
                                                                    l6428 29CA  
                                                                    l4918 70D6  
                                                                    l4790 6E9A  
                                                                    l4880 3E1A  
                                                                    l6464 7594  
                                                                    l4866 3D8C  
                                                                    l4892 73BC  
                                                                    l6592 0972  
                                                                    l6840 3032  
                                                                    l5778 3AF4  
                                                                    l6826 2F92  
                                                                    l5964 7262  
                                                                    l6908 38D8  
                                                                    l6852 3064  
                                                                    l6942 399C  
                                                                    l6934 3980  
                                                                    l7578 0E6A  
                                                                    l6992 2806  
                                                                    STR_1 7FE7  
                                                                    STR_2 7FE7  
                                                                    STR_3 7F88  
                                                                    STR_4 7FDD  
                                                                    STR_5 7FF9  
                                                                    STR_6 7FB0  
                                                                    STR_7 7FB0  
                                                                    STR_8 7FDD  
                                                                    STR_9 7FF9  
                                                                    u5010 05B4  
                                                                    u6000 3AE6  
                                                                    u5130 070E  
                                                                    u6010 3AF2  
                                                                    u5220 08D6  
                                                                    u5230 0908  
                                                                    u5118 06B0  
                                                                    u5240 0912  
                                                                    u5160 078E  
                                                                    u4530 7778  
                                                                    u5218 0882  
                                                                    u5410 716C  
                                                                    u4460 7726  
                                                                    u5340 7A32  
                                                                    u4700 7242  
                                                                    u6220 728A  
                                                                    u5237 08FE  
                                                                    u5158 0734  
                                                                    u4560 7612  
                                                                    u5088 0636  
                                                                    u4800 020A  
                                                                    u5280 3D3E  
                                                                    u6240 737C  
                                                                    u4467 771C  
                                                                    u4715 7246  
                                                                    u4820 0268  
                                                                    u7220 0996  
                                                                    _RCIF 007CF5  
                                                                    _RCEN 007E2B  
                                                                    u4590 3DBC  
                                                                    u4670 3EA8  
                                                                    u5198 07C0  
                                                                    u4830 02A4  
                                                                    u5550 31A2  
                                                                    u4807 0200  
                                                                    u7320 0BDE  
                                                                    u4827 025E  
                                                                    u4940 043A  
                                                                    u4908 0380  
                                                                    u4860 032E  
                                                                    u7340 0BFE  
                                                                    u4837 029A  
                                                                    u4950 0484  
                                                                    u4870 0334  
                                                                    u4790 01E2  
                                                                    u8310 1454  
                                                                    u8240 1370  
                                                                    u7600 3090  
                                                                    u4970 051A  
                                                                    u4938 0404  
                                                                    u5930 178E  
                                                                    u4947 0430  
                                                                    u4939 043E  
                                                                    u4867 0324  
                                                                    u4788 0158  
                                                                    u7620 3938  
                                                                    u5780 2324  
                                                                    u8180 12DC  
                                                                    u6820 299A  
                                                                    u4957 047A  
                                                                    u4797 01D8  
                                                                    u8350 14D0  
                                                                    u7630 394E  
                                                                    u6830 29B2  
                                                                    u8280 13EC  
                                                                    u6840 29C2  
                                                                    u7560 2FAE  
                                                                    u7720 27FE  
                                                                    u4977 0510  
                                                                    u6690 3F86  
                                                                    u6850 29DA  
                                                                    u7730 2804  
                                                                    u6860 29EA  
                                                                    u7580 305E  
                                                                    u8605 77DE  
                                                                    u6870 2A02  
                                                                    u7750 2860  
                                                                    u7680 39F6  
                                                                    u6880 2A12  
                                                                    u8720 0E62  
                                                                    u7690 39FE  
                                                                    u8730 0E68  
                                                                    u8907 73E4  
                                                                    u8917 73F8  
                                                                    u8927 70DE  
                                                                    u8937 7A82  
                                                                    u8947 7A9E  
                                                                    u8957 7AB8  
                                                                    u8967 6FC4  
                                                                    u8897 3968  
                                                                    _RSEN 007E29  
                                                            __CFG_WRT0$ON 000000  
                                                           _enviaSMS$1220 00C3  
                                                           _enviaSMS$1205 00BD  
                                                            __CFG_WRT1$ON 000000  
                                                           _enviaSMS$1225 00C5  
                                                           _enviaSMS$1218 00BF  
                                                           _enviaSMS$1219 00C1  
                                                            __CFG_WRT2$ON 000000  
                                                            __CFG_WRT3$ON 000000  
                                                   writeEEPROM16_ext@data 0006  
                                                            __CFG_STVR$ON 000000  
                                                                    __dia 00EC  
                                                                    __ano 00EA  
                                                                    __hor 00ED  
                                                                    __mes 00EB  
                                                                    __min 00EE  
                                                       ?_Lcd_Write_String 0084  
                                                                    __sec 00EF  
                                                          ?_drenarPressao 0001  
                                                           __CFG_EBTRB$ON 000000  
                                                                    _atoi 34CE  
                                                                    _main 0DD0  
                                             __end_ofi2_getDS1307TimeDate 33D6  
                                                                    _tel1 01B0  
                                                                    _tel2 01A4  
                                                            ___ftpack@arg 0001  
                                                            ___ftpack@exp 0004  
                                                        __end_of_I2C_Read 7256  
                                              __end_of_configuraTelefones 154A  
                                                                    fsr0h 000FEA  
                                                                    fsr1h 000FE2  
                                                                    indf0 000FEF  
                                                                    fsr2h 000FDA  
                                                                    fsr0l 000FE9  
                                                                    indf2 000FDF  
                                                                    fsr1l 000FE1  
                                                                    fsr2l 000FD9  
                                                                    btemp 007F  
                                                        __end_of_I2C_Wait 6EF0  
                                                        __end_of_I2C_Stop 6E4C  
                                                 __size_of_tela_ajusteRTC 0236  
                                                        _etapaComunicacao 0051  
                                                            ?i2_I2C_Start 0001  
                                                                    prodh 000FF4  
                                                                    prodl 000FF3  
                                                            ?i2_I2C_Write 0002  
                                                         __end_ofi2_delay 7034  
                                                                    start 0120  
                                                      ??_Lcd_Write_String 0086  
                                                  __size_of_lerTransdutor 022C  
                                            partidaBombaEstacionaria@acao 0083  
                                                        __end_of_BCDtoDEC 6F0A  
                                                         __end_of_Lcd_Cmd 6FD6  
                                                  __size_ofi2_I2C_Restart 000C  
                                                          clearShiftREG@i 0080  
                                                           ?_atualizarLCD 0088  
                                                            ___ftmul@cntr 0019  
                                                            ___param_bank 000000  
                                                            ___ftmul@sign 001A  
                                                        __end_of_DECtoBCD 7446  
                                               __size_of_tela_testeBombas 01D0  
                                                     _timerVerificarSinal 00FE  
                                                           _lerParametros 2F70  
                                                            ___fttol@exp1 0029  
                                                         _executandoTeste 00F2  
                                                            ___fttol@lval 0025  
                                                        ?_I2C_Master_Init 008D  
                                                            ?_readButtons 0001  
                                                           __CFG_OSCS$OFF 000000  
                                                 _configuraTelefones$1457 00C1  
                                                             ?i2_RTC_Init 0001  
                                                                   ?_atoi 00BF  
                                                                   ?_main 0001  
                                                                   _ACKEN 007E2C  
                                                                   _ACKDT 007E2D  
                                                         __end_of___awdiv 3D86  
                                                         __end_of___ftadd 270C  
                                                                   STR_10 7ED8  
                                                                   STR_11 7FF9  
                                                                   STR_20 7ED8  
                                                                   STR_12 7D7D  
                                                                   STR_13 7FFC  
                                                                   STR_21 7FA9  
                                                                   STR_30 7FD1  
                                                                   STR_22 7FF9  
                                                                   STR_14 7B35  
                                                                   STR_23 7D7D  
                                                                   STR_31 7FF9  
                                                                   STR_15 7EE4  
                                                                   STR_24 7FFC  
                                                                   STR_32 7FD1  
                                                                   STR_16 7FF9  
                                                                   STR_40 7E18  
                                                                   STR_33 7FF9  
                                                                   STR_17 7FD7  
                                                                   STR_41 7CF8  
                                                                   STR_25 7C1B  
                                                                   STR_18 7FDD  
                                                                   STR_50 7FE2  
                                                                   STR_34 7FD7  
                                                                   STR_42 7D0B  
                                                                   STR_26 7BB3  
                                                                   STR_27 7FF9  
                                                                   STR_19 7FF9  
                                                                   STR_35 7F14  
                                                                   STR_51 7E74  
                                                                   STR_43 7E08  
                                                                   STR_36 7FA9  
                                                                   STR_52 7FF9  
                                                                   STR_60 7E38  
                                                                   STR_28 7FD1  
                                                                   STR_44 7DC5  
                                                         __end_of___awmod 7A72  
                                                                   STR_29 7FF9  
                                                                   STR_53 7FE2  
                                                                   STR_45 7F40  
                                                                   STR_61 7D6A  
                                                                   STR_37 7CA8  
                                                                   STR_46 7FF9  
                                                                   STR_70 7FF5  
                                                                   STR_62 7FCB  
                                                                   STR_38 7E83  
                                                                   STR_54 7DF8  
                                                                   STR_71 7FF1  
                                                                   STR_47 7FE2  
                                                                   STR_63 7E47  
                                                                   STR_39 7E38  
                                                                   STR_55 7C79  
                                                                   STR_64 7FC5  
                                                                   STR_80 7EBD  
                                                                   STR_48 7E65  
                                                                   STR_56 7DB3  
                                                                   STR_72 7C5A  
                                                                   STR_81 7FF9  
                                                                   STR_49 7FF9  
                                                                   STR_73 7F7E  
                                                                   STR_65 7E56  
                                                                   STR_57 7D31  
                                                                   STR_74 7FF9  
                                                                   STR_82 7FE2  
                                                                   STR_58 7E38  
                                                                   STR_90 7F11  
                                                                   STR_66 7C93  
                                                                   STR_75 7FE2  
                                                                   STR_83 7F9A  
                                                                   STR_91 7ECB  
                                                                   STR_59 7D57  
                                                                   STR_67 7CBC  
                                                                   STR_76 7F2A  
                                                                   STR_92 7DE7  
                                                                   STR_84 7CE4  
                                                                   STR_68 7CD0  
                                                                   STR_69 7F4B  
                                                                   STR_77 7EAF  
                                                                   STR_85 7DD6  
                                                                   STR_93 7D44  
                                                                   STR_78 7FF9  
                                                                   STR_86 7F08  
                                                                   STR_94 7EA1  
                                                                   STR_87 7EE4  
                                                                   STR_79 7FE2  
                                                                   STR_95 7FEC  
                                                                   STR_88 7FB7  
                                                                   STR_96 7EF0  
                                                                   STR_97 7FEC  
                                                                   STR_89 7FBE  
                                                                   STR_98 7D1E  
                                                                   STR_99 7F35  
                                                         __end_of___ftdiv 3788  
                                                            ?_informacoes 0001  
                                                         __end_of___lldiv 3FDE  
                                                         __end_of___ftmul 34CE  
                                                                   _T0CON 000FD5  
                                                         ___awdiv@divisor 0082  
                                                         __end_of___fttol 36A2  
                                                         __end_of___lwdiv 77B0  
                                                         __end_of___lwmod 7642  
                                                                   i2l230 2184  
                                                                   i2l231 214E  
                                                                   i2l224 1F8A  
                                                                   i2l226 2062  
                                                                   i2l219 6F3E  
                                                                   i2l228 2092  
                                                                   i2l450 7996  
                                                                   i2l451 79AA  
                                                                   i2l452 79B4  
                                                                   i2l453 79C8  
                                                                   i2l454 79D2  
                                                                   i2l455 79E6  
                                                                   i2l448 7978  
                                                                   i2l449 798C  
                                                                   i2l571 2C02  
                                                                   i2l581 2C50  
                                                                   i2l573 2C0C  
                                                                   i2l575 2C2A  
                                                                   i2l567 2BE2  
                                                                   i2l577 2C34  
                                                                   i2l569 2BEC  
                                                                   i2l586 2C8C  
                                                                   i2l587 2D08  
                                                                   i2l579 2C46  
                                                                   i2l588 2CB0  
                                                                   i2l589 2CEE  
                                                                   i2l873 0070  
                                                                   i2l875 0094  
                                                         ___awdiv@counter 0084  
                                                                   i2l877 00C4  
                                                                   i2l878 00D0  
                                                                   i2l988 701C  
                                                                   i2l989 7006  
                                                                   _RCREG 000FAE  
                                                                   _TMR0H 000FD7  
                                                                   _TIMER 0008  
                                                                   _TMR0L 000FD6  
                                                                   _SPBRG 000FAF  
                                                         __end_of__doprnt 0922  
                                                 __size_of_Lcd_Set_Cursor 00C4  
                                                                   _TXREG 000FAD  
                                                         _writeEEPROM_ext 74CC  
                                                           __CFG_PWRT$OFF 000000  
                                                         __end_of_btPress 78FA  
                                                          __CFG_EBTR0$OFF 000000  
                                                          __CFG_EBTR1$OFF 000000  
                                                          __CFG_EBTR2$OFF 000000  
                                                          __CFG_EBTR3$OFF 000000  
                                                           __CFG_WRTB$OFF 000000  
                                                                   __b_ok 005E  
                                                           __CFG_WRTC$OFF 000000  
                                                           __CFG_WRTD$OFF 000000  
                                                         __end_of_readADC 6F5A  
                                                                   _delay 70D0  
                                                                   _blink 7344  
                                                         __end_of_dpowers 7B35  
                                                                   _line1 017B  
                                                                   _line2 0166  
                                                                   _line3 0151  
                                                                   _line4 013C  
                                                         __end_of_isdigit 6F82  
                                                  ??_criarCaracteresCGRAM 0084  
                                                                   _shift 0044  
                                                           ___ftpack@sign 0005  
                                                                   _timer 2BCE  
                                                                   atoi@a 00C4  
                                                        __end_of_RTC_Init 71AA  
                                                                   atoi@s 00BF  
                                                                   _putch 6E94  
                                                       __end_of_I2C_Start 6E40  
                                                  _flagEstacionariaLigada 00F1  
                                                       __end_of_I2C_Write 6E74  
                                                                   pclath 000FFA  
                                                                   tablat 000FF5  
                                                  __size_of_intToFloatStr 0094  
                                                                   status 000FD8  
                                                   __end_of_telaPrincipal 28BA  
                                                                   wtemp6 0080  
                                                         __end_of_sprintf 755A  
                                                          _comunicarTeste 218A  
                                                         __end_of_strncmp 3E20  
                                                   i2writeEEPROM_ext@data 0004  
                                                        __end_of_Lcd_Init 7AFA  
                                                          ??_atualizarLCD 0090  
                                              __size_of_getDS1307TimeDate 0134  
                                              __size_of_setDS1307TimeDate 0112  
                                                        __end_of_Lcd_Port 74CC  
                                                     __size_ofi2_I2C_Read 0036  
                                                     __size_ofi2_I2C_Wait 0018  
                                                         __initialization 7814  
                                                           _dtl_principal 0057  
                                                     __size_ofi2_I2C_Stop 000C  
                                                          ?_lerParametros 0001  
                                                            __end_of_atoi 35BA  
                                                            __end_of_main 11C4  
                                                   __end_of_aguardaBuffer 7308  
                                                     __size_ofi2_BCDtoDEC 0016  
                                                                  ??_atoi 00C1  
                                                                  ??_main 00D9  
                                                           ___fttol@sign1 0024  
                                                            i2I2C_Write@d 0002  
                                                           _status_jockey 00FD  
                                      lerParametros@verifica_memoria_nova 0094  
                                                      __size_of_Lcd_Clear 0012  
                                                           __activetblptr 000002  
                                                                  ?_TIMER 0001  
                                                           _lerTransdutor 1F5E  
                                                   __end_of_clearShiftREG 7172  
                                                           i2_I2C_Restart 6E28  
                                                    _tempo_limite_partida 006B  
                                                               I2C_Read@a 0081  
                                                                  TIMER@c 0043  
                                                            ?_setShiftREG 0001  
                                                         __CFG_CCP2MUX$ON 000000  
                                                      readEEPROM_ext@data 008D  
                                                                  ?_delay 0080  
                                                                  ?_blink 0080  
                                                                  _ADCON0 000FC2  
                                                                  _ADCON1 000FC1  
                                                                  STR_100 7F40  
                                                                  STR_101 7E65  
                                                                  STR_102 7E74  
                                                                  STR_110 7F6A  
                                                                  STR_111 7DA1  
                                                                  STR_104 7F91  
                                                                  STR_112 7F60  
                                                                  STR_105 7F1F  
                                                                  STR_113 7EFC  
                                                                  STR_106 7F74  
                                                                  STR_114 7E92  
                                                                  _ADRESH 000FC4  
                                                                  STR_115 7FA2  
                                                                  STR_107 7F56  
                                                                  STR_108 7E28  
                                                                  STR_109 7D8F  
                                                                  _ADRESL 000FC3  
                                                        ___awdiv@dividend 0080  
                                                                  ?_timer 0001  
                                                                  ?_putch 0001  
                                                        __end_of___ftpack 3C50  
                                                          lerTransdutor@i 002A  
                                                         ??_drenarPressao 00B5  
                                                               ??i2_delay 0003  
                                                  __end_of_comunicarTeste 236C  
                                                                  i2l1322 3BBA  
                                                                  i2l1323 3BAE  
                                                                  i2l1403 341C  
                                                                  i2l1404 3450  
                                                                  i2l1325 3BF2  
                                                                  i2l1405 3462  
                                                                  i2l1326 3BDA  
                                                                  i2l1430 366A  
                                                                  i2l1407 347C  
                                                                  i2l1431 365C  
                                                                  i2l1328 3C1E  
                                                                  i2l1408 348E  
                                                                  i2l1424 3640  
                                                                  i2l1329 3C12  
                                                                  i2l1353 2592  
                                                                  i2l1433 368A  
                                                                  i2l1425 362E  
                                                                  i2l1362 262E  
                                                                  i2l1380 26AE  
                                                                  i2l1381 26E0  
                                                                  i2l1357 25C0  
                                                                  i2l1390 3750  
                                                                  i2l1367 2622  
                                                                  i2l1376 2668  
                                                                  i2l1368 2616  
                                                                  i2l1377 265C  
                                                                  i2l1394 3C82  
                                                                  i2l1379 2690  
                                                                  i2l1395 3CB4  
                                                                  i2l1388 36E8  
                                                                  i2l1389 3728  
                                                                  i2l6104 3782  
                                                                  i2l5254 7008  
                                                                  i2l6152 34C8  
                                                                  i2l6216 369C  
                                                                  i2l6058 2706  
                                                                  i2l5382 3C4A  
                                                                  i2l6328 1F80  
                                                                  _INTCON 000FF2  
                                                                  i2l4786 3CE2  
                                                                  i2l4788 3CE6  
                                                        __end_of___lwtoft 6F32  
                                                                  u625_41 254E  
                                                                  u626_41 2562  
                                                                  u651_41 33E8  
                                                                  u660_41 35CC  
                                                                  u653_41 3402  
                                                                  u646_41 36B4  
                                                                  u648_41 36CE  
                                                               ??_Lcd_Cmd 0081  
                                                                  _TMR0IF 007F92  
                                                          __CFG_WDTPS$128 000000  
                                       __size_of_partidaBombaEstacionaria 00E4  
                                                 __size_of_Lcd_Write_Char 0042  
                                                                  _SSPADD 000FC8  
                                                                  _SSPBUF 000FC9  
                                               ?_partidaBombaEstacionaria 0001  
                                                     __size_ofi2_RTC_Init 0032  
                                                       ??_ajusteSP_Bombas 00C2  
                                                 writeEEPROM16_ext@adress 0008  
                                                     _dias_restante_teste 00E8  
                                                ??_configuraRegistradores 0080  
                                                                  __b_esc 0064  
                                                                  ___ftge 3C50  
                                                          _readEEPROM_ext 7642  
                                                                  ___wmul 6FD6  
                                                        __end_of_enviaSMS 1896  
                                                               ??___awdiv 0084  
                                                            enviaSMS@tipo 00C7  
                                                               ??___ftadd 0021  
                                                               ??___awmod 0084  
                                                               ??___ftdiv 0021  
                                                         _getSinalSIM800L 28BA  
                                                               ??___lldiv 0088  
                                                               ??___ftmul 0012  
                                                               ??___fttol 001F  
                                                                  _blinkk 00DB  
                                                               ??___lwdiv 0084  
                                                               ??___lwmod 008B  
                                                 _habilitaTesteAutomatico 00F0  
                                   __end_of_verificarIntervaloTesteBombas 7488  
                                  __size_of_verificarIntervaloTesteBombas 0042  
                                           _verificarIntervaloTesteBombas 7446  
                                                 __end_of_writeEEPROM_ext 7512  
                                                           ?_limparBuffer 0001  
                                                               ??__doprnt 0092  
                                                                  _memset 71E2  
                                                                  delay@x 0080  
                                                                  clear_0 785A  
                                                                  clear_1 7866  
                                                                  clear_2 7872  
                                                        ___awdiv@quotient 0086  
                                                                  blink@i 0084  
                                                         ___awmod@divisor 0082  
                                                               ??_btPress 0080  
                                                           _intToFloatStr 3EB8  
                                                            __doprnt@flag 009B  
                                                         ___awmod@counter 0084  
                                           setDS1307TimeDate@ptrToUserVal 008C  
                                                                  _printf 7308  
                                                            __doprnt@prec 0096  
                                                                  _strchr 7382  
                                                                  _strlen 76EE  
                                                                  _strstr 3E20  
                                                          ?_lerTransdutor 0001  
                                                   ___ftmul@f3_as_product 0016  
                                                           dataLoger@logs 00C0  
                                                               ??_readADC 0003  
                                                            __pdataCOMRAM 007A  
                                                               ??_isdigit 0080  
                                                          ?i2_I2C_Restart 0001  
                                                               ?_I2C_Read 0081  
                                                               ?_I2C_Wait 0001  
                                                               ?_I2C_Stop 0001  
                                                            __mediumconst 7AFA  
                                                                  tblptrh 000FF7  
                                                                  tblptrl 000FF6  
                                                                  tblptru 000FF8  
                                                                  putch@c 0080  
                                                               ?_BCDtoDEC 0001  
                                                               ??_sprintf 00AF  
                                                               ??_strncmp 008C  
                                                               ?_DECtoBCD 0001  
                                                         Lcd_Set_Cursor@a 0084  
                                                         Lcd_Set_Cursor@b 0083  
                                                         Lcd_Set_Cursor@y 0086  
                                                         Lcd_Set_Cursor@z 0085  
                                                         ?_comunicarTeste 0001  
                                                              __accesstop 0080  
                                                 __end_of__initialization 7878  
                                                              ___ftadd@f1 001B  
                                                              ___ftadd@f2 001E  
                                                          _tela_ajusteRTC 1D28  
                                                              ___ftge@ff1 0001  
                                                              ___ftge@ff2 0004  
                                                       __end_of_Lcd_Clear 6E94  
                                                        _etapaTesteBombas 0071  
                                                           ___rparam_used 000001  
                                                              ___ftdiv@f1 001B  
                                                              ___ftdiv@f2 001E  
                                                              ___ftdiv@f3 0025  
                                                         ??_lerParametros 0094  
                                                           __end_of_TIMER 0120  
                                                              _acaoBombas 2E42  
                                                  __end_of_readEEPROM_ext 7698  
                                                     _telefoneSelecionado 00F7  
                                                              ___ftmul@f1 000C  
                                                              ___ftmul@f2 000F  
                                                    __size_ofi2_I2C_Start 000C  
                                                              ___fttol@f1 001B  
                                                    __size_ofi2_I2C_Write 000E  
                                                        _tela_testeBombas 236C  
                                                          __pcstackCOMRAM 0001  
                                                        _status_principal 00FC  
                                                            __pidataBANK0 6E08  
                                                      __size_of_dataLoger 0238  
                                                           __end_of_delay 7106  
                                                           __end_of_blink 7382  
                                                          ??_limparBuffer 0088  
                                                __size_of_acaoTesteBombas 04AE  
                                                           __end_of_timer 2D0E  
                                                           __end_of_putch 6EA8  
                                                          ?_intToFloatStr 00B5  
                                                       ?_readEEPROM16_ext 008E  
                                                               ?_RTC_Init 0001  
                                                       intToFloatStr@conv 00BB  
                                                              ___lwtoft@c 0009  
                                                          _tela_menu_posi 0068  
                                                      ??_readEEPROM16_ext 0090  
                                                    __size_of_readButtons 007E  
                                                          _Lcd_Set_Cursor 3A04  
                                                                 ??_TIMER 0031  
                                                            ??i2_I2C_Read 0004  
                                                              ??_I2C_Read 0083  
                                                            ??i2_I2C_Wait 0001  
                                                      __size_of_getSerial 011C  
                                                              ??_I2C_Wait 0080  
                                                            ??i2_I2C_Stop 0002  
                                                              ??_I2C_Stop 0081  
                                                    __size_of_informacoes 0074  
                                                            __sec_partida 006F  
                                                    __end_of_atualizarLCD 393E  
                                                            ??i2_BCDtoDEC 0001  
                                                               ?_Lcd_Init 0001  
                                                              ??_BCDtoDEC 0080  
                                                                 ??_delay 0082  
                                                               ?_Lcd_Port 0001  
                                                              __doprnt@ap 0090  
                                                                 ??_blink 0084  
                                                              __doprnt@cp 009C  
                                                              __doprnt@pb 008C  
                                                   writeEEPROM_ext@adress 008D  
                                                              ??_DECtoBCD 0088  
                                                                 ??_timer 0009  
                                                                 ??_putch 0080  
                                                              __pbssBANK0 00D9  
                                                              __pbssBANK1 0100  
                                                  __end_of_tela_ajusteRTC 1F5E  
                                                              __menu_posi 00DE  
                                                 __end_of_getSinalSIM800L 2A60  
                                                     writeEEPROM_ext@data 008C  
                                                         ?_readEEPROM_ext 0001  
                                                __size_of_resetParametros 0028  
                                                      __end_ofi2_I2C_Read 70D0  
                                                            I2C_Read@temp 0083  
                                                      __end_ofi2_I2C_Wait 6ED6  
                                                                 ?___ftge 0001  
                                                      __end_ofi2_I2C_Stop 6E28  
                                         __size_of_configuraRegistradores 0056  
                                                                 ?___wmul 0080  
                                                       _writeEEPROM16_ext 3FDE  
                                                      __size_of_salvarLOG 00C4  
                                                      __end_ofi2_BCDtoDEC 6EBE  
                                                              _flag_b_esc 0065  
                                                              _codigoErro 0072  
                                                                 ?_memset 0080  
                                                      _configuraTelefones 11C4  
                                                        ?_writeEEPROM_ext 008C  
                                                      __size_of_validaRTC 004E  
                                                            ??i2_RTC_Init 0004  
                                                         ??_lerTransdutor 002A  
                                                              ??_RTC_Init 008C  
                                               __size_of_Lcd_Write_String 003A  
                                                      ?_writeEEPROM16_ext 0006  
                                                               ?___ftpack 0001  
                                                  __end_of_Lcd_Set_Cursor 3AC8  
                                           criarCaracteresCGRAM@character 0087  
                                                              I2C_Write@d 008A  
                                                                 ?_printf 00A1  
                                                         ??i2_I2C_Restart 0002  
                                                                 ?_strchr 0080  
                                                                 ?_strlen 0080  
                                                               ?___lwtoft 0009  
                                                                 ?_strstr 008F  
                                                           ??_I2C_Restart 0081  
                                          ?_verificarIntervaloTesteBombas 0001  
                                                     ?_configuraTelefones 0001  
                                                     ??_writeEEPROM16_ext 0008  
                                                              ??_Lcd_Init 0083  
                                                              ??_Lcd_Port 0080  
                                                                 _SSPCON1 000FC6  
                                                                 _SSPCON2 000FC5  
                                                       __end_of_dataLoger 1D28  
                                                                 _SSPSTAT 000FC7  
                                                    __size_of_setShiftREG 0048  
                                                                 i2_delay 7002  
                                                               ?_enviaSMS 0001  
                                                         ?_tela_ajusteRTC 0001  
                                                            _flag_b_menos 0063  
                                                          _Lcd_Write_Char 73C2  
                                                                 _Lcd_Cmd 6FAA  
                                                              _dtl_jockey 0058  
                                                      __size_of_writeChar 000E  
                                                      __end_ofi2_RTC_Init 7066  
                                                               _I2C_Start 6E34  
                                                              _gsmOcupado 00F4  
                                                               _I2C_Write 6E66  
                                                         _timerReenvioSMS 00F6  
                                                    ??_configuraTelefones 00BF  
                                                             ?_acaoBombas 0001  
                                                       __end_of_getSerial 31B2  
                                                                 __Hparam 0000  
                                                                 __Lparam 0000  
                                               __end_of_writeEEPROM16_ext 4000  
                                                         _sp_estacionaria 00E1  
                                            __size_ofi2_getDS1307TimeDate 0112  
                                                         __size_of___ftge 009C  
                                                                 __b_mais 0060  
                                                         ??_intToFloatStr 00B7  
                                                                 ___awdiv 3CEC  
                                                                 ___ftadd 253C  
                                                                 ___awmod 79EC  
                                                                 ___ftdiv 36A2  
                                                                 ___lldiv 3F4C  
                                                         __size_of___wmul 002C  
                                                                 ___ftmul 33D6  
                                                                 ___fttol 35BA  
                                                                 ___lwdiv 774E  
                                                                 ___lwmod 75F0  
                                                           atualizarLCD@i 0090  
                                                                 __doprnt 0124  
                                                                 __pcinit 7814  
                                                              ??___ftpack 0006  
                                                         __size_of_memset 003A  
                                                                 _btPress 7886  
                                                                 __ramtop 0600  
                                                         ?_Lcd_Set_Cursor 0083  
                                                                 __tensao 004C  
                                                                 __ptext0 0DD0  
                                                                 __ptext1 7446  
                                                                 __ptext2 236C  
                                                                 __ptext3 1D28  
                                                                 __ptext4 75A2  
                                                                 __ptext5 31B2  
                                                                 __ptext6 7404  
                                                                 __ptext7 270C  
                                                                 __ptext8 6F82  
                                                                 __ptext9 755A  
                                               criarCaracteresCGRAM@F2954 7AFB  
                                                         __size_of_printf 003C  
                                                              ??___lwtoft 000C  
                                                                 _dtl_dia 005D  
                                                                 _dtl_ano 005B  
                                                         __size_of_strchr 0040  
                                                                 _readADC 6F32  
                                                         __size_of_strlen 0060  
                                                                 _dtl_mes 005C  
                                                                 _dtl_min 0059  
                                                           i2BCDtoDEC@val 0001  
                                                         __size_of_strstr 0098  
                                                                 _dpowers 7B2B  
                                                    readEEPROM16_ext@data 0091  
                                                                 _isdigit 6F5A  
                                                       ??_acaoTesteBombas 00C8  
                                                        ___awmod@dividend 0080  
                                                         _ajusteSP_Bombas 1896  
                                                __size_of_I2C_Master_Init 0064  
                                                        _dtl_carregar_log 0055  
                                                  _configuraRegistradores 7698  
                                                                 _pressao 00F8  
                                                                 _sprintf 7512  
                                                           __doprnt@width 009E  
                                                     __end_of_I2C_Restart 6E58  
                                                  __end_of_Lcd_Write_Char 7404  
                                                                 _strncmp 3D86  
                                                    end_of_initialization 7878  
                                                       __end_of_salvarLOG 3B8C  
                                                              ??_enviaSMS 00BB  
                                                    __end_of_limparBuffer 713C  
                                           __size_of_criarCaracteresCGRAM 00C6  
                                                       __end_of_validaRTC 75F0  
                                                                 memset@c 0082  
                                                                 memset@n 0084  
                                                                 memset@p 0086  
                                                           __Lmediumconst 7AFA  
                                                              _timer$1327 0009  
                                                              _timer$1328 000B  
                                                              _timer$1329 000D  
                                                              blink@start 0082  
                                                              ?_I2C_Start 0001  
                                                              ?_I2C_Write 008A  
                                                            writeChar@hex 0080  
                                                            _bufferSerial 0100  
                                                        ?_getSinalSIM800L 0001  
                                                    _acaoTesteBombas$1314 00D1  
                                                    _acaoTesteBombas$1324 00D5  
                                                    _acaoTesteBombas$1319 00D3  
                                                    _acaoTesteBombas$1298 00CF  
                                                    _acaoTesteBombas$2365 00CD  
                                                         ___lldiv@divisor 0084  
                                                         ___lldiv@counter 008C  
                                                ??_configurarEstacionaria 00B5  
                                                               _RCSTAbits 000FAB  
                                                                 printf@f 00A1  
                                                        I2C_Master_Init@c 008D  
                                                                 postdec1 000FE5  
                                                                 postdec2 000FDD  
                                                                 postinc0 000FEE  
                                                                 postinc2 000FDE  
                                                               Lcd_Port@a 0080  
                                                                 strlen@s 0080  
                                                       ??_resetParametros 0081  
                                                              getSerial@i 00BC  
                                                               _PORTAbits 000F80  
                                                               _PORTBbits 000F81  
                                                               _PORTCbits 000F82  
                                                               _PORTDbits 000F83  
                                                   __size_of_atualizarLCD 00D2  
                                                               _PORTEbits 000F84  
                                                       __end_of_writeChar 6E82  
                                                  __size_of_telaPrincipal 01AE  
                                                               _TRISAbits 000F92  
                                                               _TRISBbits 000F93  
                                                               _TRISCbits 000F94  
                                                        ??_comunicarTeste 00BB  
                                                               _TRISDbits 000F95  
                                                               _TRISEbits 000F96  
                                                 i2writeEEPROM_ext@adress 0005  
                                                     __size_of_acaoBombas 012E  
                                                __end_of_tela_testeBombas 253C  
                                                       __size_of_I2C_Read 003A  
                                                       __size_of_I2C_Wait 001A  
                                                       __size_of_I2C_Stop 000C  
                                                         ?_Lcd_Write_Char 0001  
                                                       Lcd_Write_String@a 0084  
                                                       Lcd_Write_String@i 0086  
                                                  __size_of_aguardaBuffer 003C  
                                                       __size_of_BCDtoDEC 001A  
                                                   __end_of_drenarPressao 709A  
                                                       __size_of_DECtoBCD 0042  
                                                             ___ftdiv@exp 0028  
                                                               _TXSTAbits 000FAC  
                                              __size_of_writeEEPROM16_ext 0022  
                                                  __size_of_clearShiftREG 0036  
                                                        _intensidadeSinal 00FF  
                                                             ___ftmul@exp 0015  
                                                         getSerial@length 00BA  
                                                            _atualizarLCD 386C  
                                                               _Lcd_Clear 6E82  
                                                          __end_of___ftge 3CEC  
                                                          i2I2C_Read@temp 0004  
                                                          __end_of___wmul 7002  
                                                      intToFloatStr@F2544 007A  
                                                        _Lcd_Write_String 7256  
                                                           __pidataCOMRAM 6E03  
                                                 __end_of_ajusteSP_Bombas 1AF0  
                                                          __end_of_memset 721C  
                                                 salvarLOG@ultimoLogSalvo 008F  
                                                          __end_of_printf 7344  
                                                       __size_of_RTC_Init 0038  
                                                             _I2C_Restart 6E4C  
                                                          __end_of_strchr 73C2  
                                                          __end_of_strlen 774E  
                                                          __end_of_strstr 3EB8  
                                                     start_initialization 7814  
                                                             i2I2C_Read@a 0002  
                                                acaoTesteBombas@intervalo 00D7  
                                                   _tela_testeBombas$1412 00B7  
                                                      intToFloatStr@valor 00BF  
                                                _partidaBombaEstacionaria 3788  
                                               __size_of_readEEPROM16_ext 0038  
                                                       __size_of_Lcd_Init 0088  
                                                       __size_of_Lcd_Port 0044  
                                                        ??_readEEPROM_ext 008C  
                                                       ??_I2C_Master_Init 0091  
                                                       atualizarLCD@line1 0088  
                                                       atualizarLCD@line2 008A  
                                                       atualizarLCD@line3 008C  
                                                       atualizarLCD@line4 008E  
                                                           ??i2_I2C_Start 0002  
                                                             ??_I2C_Start 0081  
                                                           ??i2_I2C_Write 0004  
                                                           _telaPrincipal 270C  
                                                             ??_I2C_Write 008C  
                                                   __end_of_lerParametros 3096  
                                                              ?_Lcd_Clear 0001  
                                                                ??___ftge 0007  
                                         __size_of_configurarEstacionaria 016E  
                                                                ??___wmul 0084  
                                                             __doprnt@len 0099  
                                                             __doprnt@val 0097  
                                                             __pdataBANK0 00F8  
                                                           _aguardaBuffer 72CC  
                                                           ??_readButtons 0001  
                                                         Lcd_Write_Char@a 0083  
                                                                ??_memset 0086  
                                                         Lcd_Write_Char@y 0082  
                                                                ??_printf 00B5  
                                                           ??_informacoes 00B5  
                                                                ??_strchr 0084  
                                                                ??_strlen 0082  
                                                                ??_strstr 0093  
                                                       __size_of___ftpack 00C4  
                                                             __pbssCOMRAM 0044  
                                                       __size_of___lwtoft 0028  
                                                           _clearShiftREG 713C  
                                                           __pcstackBANK0 0080  
                                                   __size_of_limparBuffer 0036  
                                                        ??_tela_ajusteRTC 00B5  
                                                   lerTransdutor@_pressao 002B  
                                                     i2_getDS1307TimeDate 32C4  
                                                            _isdigit$1855 0081  
                                                        intToFloatStr@end 00B7  
                                                                ?i2_delay 0001  
                                                                ?_Lcd_Cmd 0001  
                                                               __doprnt@c 00A0  
                                                               __doprnt@f 008E  
                                         ??_verificarIntervaloTesteBombas 008E  
                                                          ?_telaPrincipal 0001  
                                                               _dataLoger 1AF0  
                                                       __size_of_enviaSMS 034C  
                                                            ??_acaoBombas 00C8  
                                                        ___lwdiv@dividend 0080  
                                                     lerTransdutor@tensao 002E  
                                                        ??_Lcd_Set_Cursor 0084  
                                                               __pintcode 0008  
                                                    ?i2_getDS1307TimeDate 0006  
                                                           __pmediumconst 7AFA  
                                                         _acaoTesteBombas 0922  
                                                               _flag_b_ok 005F  
                                                     configuraTelefones@i 00C3  
                                                                ?___awdiv 0080  
                                                                ?___ftadd 001B  
                                                                ?___awmod 0080  
                                                          ?_aguardaBuffer 0093  
                                                                ?___ftdiv 001B  
                                                     __end_ofi2_I2C_Start 6E1C  
                                                                ?___lldiv 0080  
                                                                ?___ftmul 000C  
                                                                ?___fttol 001B  
                                                     __end_ofi2_I2C_Write 6E66  
                                                               _getSerial 3096  
                                                   _timerEtapaComunicacao 00F5  
                                                                ?___lwdiv 0080  
                                                                ?___lwmod 0087  
                                                                ?__doprnt 008C  
                                                               _bufferAUX 0190  
                                                               _ajust_tel 00DC  
                                                            _limparBuffer 7106  
                                                    readEEPROM_ext@adress 008C  
                                                                ?_btPress 0001  
                                                        ?_ajusteSP_Bombas 0001  
                                                   __end_of_lerTransdutor 218A  
                                                                ?_readADC 0001  
                                                             _flag_b_mais 0061  
                                                 ?_configuraRegistradores 0001  
                                                   __end_ofi2_I2C_Restart 6E34  
                                                          __size_of_TIMER 0118  
                                                                ?_isdigit 0001  
                                                                _I2C_Read 721C  
                                                          ?_clearShiftREG 0001  
                                                                _I2C_Wait 6ED6  
                                                                _I2C_Stop 6E40  
                                                     __end_of_readButtons 79EC  
                                                           ??_setShiftREG 0080  
                                                __size_of_writeEEPROM_ext 0046  
                                                  _configurarEstacionaria 2A60  
                                                  readEEPROM16_ext@adress 0093  
                                                                _BCDtoDEC 6EF0  
                                                      __end_of_acaoBombas 2F70  
                                                     __end_of_informacoes 796E  
                                                        ___lwdiv@quotient 0084  
                                                          __size_of_delay 0036  
                                                          __size_of_blink 003E  
                                                                ?_sprintf 00A1  
                                                                ?_strncmp 0086  
                                                                _DECtoBCD 7404  
                                                          __size_of_timer 0140  
                                                          __size_of_putch 0014  
                                                               _menu_posi 00DF  
                                                               _horimetro 004F  
                                       __end_ofcriarCaracteresCGRAM@F2954 7B2B  
                                                          ___wmul@product 0084  
                                                               btPress@bt 0080  
                                                              ?_dataLoger 0001  
                                                               _salvarLOG 3AC8  
                                                                _PIE1bits 000F9D  
                                                               blink@line 0080  
                                                         _sp_pressao_rede 00E4  
                                                               _validaRTC 75A2  
                                                         _resetParametros 6F82  
                                                        _horario_de_teste 00E7  
                                             __size_of_configuraTelefones 0386  
                                                                Lcd_Cmd@a 0082  
                                                                _PIR1bits 000F9E  
                                                                i2u550_40 70BC  
                                                                i2u543_40 3B9E  
                                                                i2u551_45 70C0  
                                                                i2u632_40 25B0  
                                                                i2u642_40 2672  
                                                                i2u547_40 3C2A  
                                                                i2u635_40 25F2  
                                                                i2u629_40 2582  
                                                                i2u654_40 340C  
                                                                i2u662_40 35F6  
                                                                i2u662_45 35EC  
                                                                i2u639_40 2638  
                                                                i2u672_40 1FE4  
                                                                i2u649_40 36D8  
                                                                i2u665_40 3648  
                                                                i2u666_40 3672  
                                                   ??i2_getDS1307TimeDate 0008  
                                                             ??_Lcd_Clear 0083  
                                                                i2u897_47 700E  
                                                                i2u898_47 6F38  
                                                               _sp_jockey 00E3  
                                                     _dtl_posi_visualizar 0053  
                                                              ?_getSerial 00B5  
                                                            setShiftREG@i 0081  
                                            __end_of_criarCaracteresCGRAM 3A04  
                                                   __end_of_intToFloatStr 3F4C  
                                                                _RTC_Init 7172  
                                          __end_of_configuraRegistradores 76EE  
                                                              _ADCON0bits 000FC2  
                                                       ___wmul@multiplier 0080  
                                                               _totalLogs 0054  
                                                        _dtl_estacionaria 0056  
                                                        ??_Lcd_Write_Char 0081  
                                                                i2delay@x 0001  
                                               _tempo_limite_estacionaria 00E6  
                                                                _Lcd_Init 7A72  
                                                       i2_writeEEPROM_ext 7290  
                                                               _writeChar 6E74  
                                                                _Lcd_Port 7488  
                                                       ?_tela_testeBombas 0001  
                                                         _tel_selecionado 006A  
                                                               copy_data0 7828  
                                                               copy_data1 7848  
                                                        _readEEPROM16_ext 71AA  
                                                      ?i2_writeEEPROM_ext 0004  
                                                         ??_telaPrincipal 00C2  
                                                      ??_tela_testeBombas 00B5  
                                                __end_of_Lcd_Write_String 7290  
                                                             _dtl_posicao 00FA  
                                                        __size_ofi2_delay 0032  
                                                     __end_of_setShiftREG 75A2  
                                                 __end_of_acaoTesteBombas 0DD0  
                                                        __size_of_Lcd_Cmd 002C  
                                                              ?_salvarLOG 0001  
                                                             i2_I2C_Start 6E10  
                                                             i2_I2C_Write 6E58  
                                                     ??i2_writeEEPROM_ext 0005  
                                                     _intervalo_teste_dia 00E9  
                                                              ?_validaRTC 0001  
                                                                __Hrparam 0000  
                                                         ??_aguardaBuffer 0095  
                                                                __Lrparam 0000  
                                                   criarCaracteresCGRAM@i 00BB  
                                                   criarCaracteresCGRAM@j 00BA  
                                                   criarCaracteresCGRAM@k 00B9  
                                                        __size_of___awdiv 009A  
                                                        __size_of___ftadd 01D0  
                                                        __size_of___awmod 0086  
                                                        __size_of___ftdiv 00E6  
                                                __size_of_getSinalSIM800L 01A6  
                                                        __size_of___lldiv 0092  
                                                        __size_of___ftmul 00F8  
                                                        __size_of___fttol 00E8  
                                                                __b_menos 0062  
                                                        __size_of___lwdiv 0062  
                                                        __size_of___lwmod 0052  
                                                             _readButtons 796E  
                                                                ___ftpack 3B8C  
                                                        __size_of__doprnt 07FE  
                                                             BCDtoDEC@val 0080  
                                                     Lcd_Write_Char@tempp 0081  
                                                         ??_clearShiftREG 0080  
                                                        __size_of_btPress 0074  
                                              ??_partidaBombaEstacionaria 0083  
                                                         intToFloatStr@pr 00C0  
                                                                ___lwtoft 6F0A  
                                                             _informacoes 78FA  
                                                    _ajusteSP_Bombas$2367 00C2  
                                                            ?_I2C_Restart 0001  
                                                                _base_sec 0070  
                                                         _I2C_Master_Init 77B0  
                                                        __size_of_readADC 0028  
                                               __end_ofi2_writeEEPROM_ext 72CC  
                                                          lerParametros@i 0095  
                                                                __sec_aux 006E  
                                                           _tempo_partida 006C  
                                                        __size_of_isdigit 0028  
                                                         ___lwdiv@divisor 0082  
                                                         ___lwdiv@counter 0086  
                                                              ?_writeChar 0080  
                                                                __ptext10 2F70  
                                                                __ptext11 71AA  
                                                                __ptext20 2A60  
                                                                __ptext12 78FA  
                                                                __ptext21 11C4  
                                                                __ptext13 28BA  
                                                                __ptext30 0922  
                                                                __ptext22 218A  
                                                                __ptext14 3096  
                                                                __ptext31 3AC8  
                                                                __ptext23 7698  
                                                                __ptext15 34CE  
                                                                __ptext40 7512  
                                                                __ptext32 74CC  
                                                                __ptext24 386C  
                                                                __ptext16 2D0E  
                                                                __ptext41 713C  
                                                                __ptext33 7642  
                                                                __ptext25 7256  
                                                                __ptext17 6EF0  
                                                                __ptext50 6F5A  
                                                                __ptext42 7886  
                                                                __ptext34 6E4C  
                                                                __ptext26 73C2  
                                                                __ptext18 1AF0  
                                                                __ptext51 6FD6  
                                                                __ptext43 2E42  
                                                                __ptext35 721C  
                                                                __ptext27 3A04  
                                                                __ptext19 393E  
                                                                __ptext60 7382  
                                                                __ptext52 75F0  
                                                                __ptext44 3788  
                                                                __ptext36 3EB8  
                                                                __ptext28 1896  
                                                                __ptext61 70D0  
                                                                __ptext53 774E  
                                                                __ptext45 154A  
                                                                __ptext37 79EC  
                                                                __ptext29 7344  
                                                                __ptext70 7488  
                                                                __ptext62 7172  
                                                                __ptext54 7106  
                                                                __ptext46 6E74  
                                                                __ptext38 3CEC  
                                                                __ptext71 77B0  
                                                                __ptext63 6E66  
                                                                __ptext55 71E2  
                                                                __ptext47 7308  
                                                                __ptext39 7066  
                                                                __ptext80 3FDE  
                                                                __ptext72 3F4C  
                                                                __ptext64 6E40  
                                                                __ptext56 72CC  
                                                                __ptext48 0124  
                                                                __ptext81 7290  
                                                                __ptext65 6E34  
                                                                __ptext57 3E20  
                                                                __ptext49 6E94  
                                                                __ptext90 6F0A  
                                                                __ptext82 7002  
                                                                __ptext74 2BCE  
                                                                __ptext66 6ED6  
                                                                __ptext58 3D86  
                                                                __ptext91 35BA  
                                                                __ptext83 6E58  
                                                                __ptext75 32C4  
                                                                __ptext67 7A72  
                                                                __ptext59 76EE  
                                                                __ptext92 33D6  
                                                                __ptext84 6E1C  
                                                                __ptext76 6E28  
                                                                __ptext68 6E82  
                                                                __ptext93 3C50  
                                                                __ptext85 6E10  
                                                                __ptext77 709A  
                                                                __ptext69 6FAA  
                                                                __ptext94 36A2  
                                                                __ptext86 6EBE  
                                                                __ptext78 6EA8  
                                                                __ptext95 253C  
                                                                __ptext87 796E  
                                                                __ptext79 7034  
                                                                __ptext96 3B8C  
                                                                __ptext88 1F5E  
                                                                __ptext97 0000  
                                                                __ptext89 6F32  
                                                                _ajst_rtc 0067  
                                                                _bt_press 007E  
                                                        __size_of_sprintf 0048  
                                                        acaoTesteBombas@i 00D8  
                                                    getSinalSIM800L@sinal 00C8  
                                                 __end_of_resetParametros 6FAA  
                                                                _enviaSMS 154A  
                                                                _dtl_hora 005A  
                                                        __size_of_strncmp 009A  
                                                     _comunicarTeste$1190 00BD  
                                                       ??_writeEEPROM_ext 008D  
                                                           __size_of_atoi 00EC  
                                                           __size_of_main 03F4  
                                                             ??_dataLoger 00B5  
                                                     _status_estacionaria 00FB  
                                                              strncmp@len 008A  
                                                        _timerTesteBombas 00D9  
                                                                blink@end 0083  
                                                                _tel_posi 00DD  
                                               _criarCaracteresCGRAM$1380 00B7  
                                                                int$flags 007F  
                                                                atoi@sign 00C3  
                                                             ??_getSerial 00B8  
                                                      _telaPrincipal$2366 00C2  
                                                  __size_of_drenarPressao 0034  
                                                              _INTCONbits 000FF2  
                                                              i2_I2C_Read 709A  
                                                              i2_I2C_Wait 6EBE  
                                                              i2_I2C_Stop 6E1C  
                                                             _setShiftREG 755A  
                                                                isdigit@c 0082  
                                                                memset@p1 0080  
                                                              i2_BCDtoDEC 6EA8  
                                                             DECtoBCD@res 0089  
                                                             DECtoBCD@val 0088  
                                                                intlevel2 0006  
                                                               sprintf@ap 00AF  
                                                               sprintf@pb 00B1  
                                                               sprintf@wh 00A1  
                                                       _ocorrendoIncendio 00F3  
                                                    _criarCaracteresCGRAM 393E  
                                                               strchr@chr 0082  
                                                        ___lwmod@dividend 0087  
                                                               strchr@ptr 0080  
                                                        ___lldiv@dividend 0080  
                                         i2getDS1307TimeDate@ptrToUserVal 0006  
                                           getDS1307TimeDate@ptrToUserVal 008C  
                                                             ??_salvarLOG 008E  
                                                        ?_acaoTesteBombas 0001  
                                                 __size_of_comunicarTeste 01E2  
                                                             ??_validaRTC 0080  
                                                               strncmp@s1 0086  
                                                               strncmp@s2 0088  
                                                          _dataLoger$1431 00BA  
                                                          _dataLoger$1442 00BE  
                                                          _dataLoger$1437 00BC  
                                                        aguardaBuffer@str 0093  
                                                       _getDS1307TimeDate 2D0E  
                                                       _setDS1307TimeDate 31B2  
                                                                printf@ap 00B5  
                                                                printf@pb 00B7  
                                                            getSerial@end 00B7  
                                                            getSerial@ret 00BD  
                                                            getSerial@str 00B5  
                                                 __end_of_I2C_Master_Init 7814  
                                                      ?_getDS1307TimeDate 008C  
                                                      ?_setDS1307TimeDate 008C  
                                                      Lcd_Set_Cursor@temp 0087  
                                                              i2_RTC_Init 7034  
                                                                sprintf@f 00A3  
                                                 ?_configurarEstacionaria 0001  
                                                        ___lldiv@quotient 0088  
                                                             _qtd_leitura 006D  
                                                         ___lwmod@divisor 0089  
                                              __size_ofi2_writeEEPROM_ext 003C  
                                                                strlen@cp 0084  
                                                         ___lwmod@counter 008B  
                                                     ??_getDS1307TimeDate 008E  
                                                     ??_setDS1307TimeDate 008E  
                                                       ??_getSinalSIM800L 00C6  
                                                            _sp_principal 00E2  
                                                                strstr@s1 008F  
                                                                strstr@s2 0091  
                                                             ??_writeChar 0082  
                                                  __size_of_lerParametros 0126  
                                                   ?_criarCaracteresCGRAM 0001  
                                                        ?_resetParametros 0001  
                                                           _sub_menu_posi 0069  
                                                             _option_posi 00E0  
                                                           _drenarPressao 7066  
                                         _tempo_limite_teste_estacionaria 00E5  
                                               __end_of_getDS1307TimeDate 2E42  
                                               __end_of_setDS1307TimeDate 32C4  
