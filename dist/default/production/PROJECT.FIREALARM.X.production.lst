

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Nov 25 20:56:03 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   114                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   116                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   117  0000                     
   118                           ; Version 1.45
   119                           ; Generated 16/11/2017 GMT
   120                           ; 
   121                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   122                           ; All rights reserved.
   123                           ; 
   124                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   125                           ; 
   126                           ; Redistribution and use in source and binary forms, with or without modification, are
   127                           ; permitted provided that the following conditions are met:
   128                           ; 
   129                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   130                           ;        conditions and the following disclaimer.
   131                           ; 
   132                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   133                           ;        of conditions and the following disclaimer in the documentation and/or other
   134                           ;        materials provided with the distribution.
   135                           ; 
   136                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   137                           ;        software without specific prior written permission.
   138                           ; 
   139                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   140                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   141                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   142                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   143                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   144                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   145                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   146                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   147                           ; 
   148                           ; 
   149                           ; Code-generator required, PIC18F452 Definitions
   150                           ; 
   151                           ; SFR Addresses
   152  0000                     
   153                           	psect	idataBANK0
   154  006BF6                     __pidataBANK0:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _pressao
   158  006BF6  0062               	dw	98
   159                           
   160                           ;initializer for _dtl_posicao
   161  006BF8  3C                 	db	60
   162                           
   163                           ;initializer for _status_estacionaria
   164  006BF9  01                 	db	1
   165                           
   166                           ;initializer for _status_principal
   167  006BFA  01                 	db	1
   168                           
   169                           ;initializer for _status_jockey
   170  006BFB  01                 	db	1
   171                           
   172                           ;initializer for _timerVerificarSinal
   173  006BFC  05                 	db	5
   174                           
   175                           ;initializer for _intensidadeSinal
   176  006BFD  20                 	db	32
   177                           
   178                           	psect	idataBANK1
   179  006BF2                     __pidataBANK1:
   180                           	opt stack 0
   181                           
   182                           ;initializer for intToFloatStr@F2544
   183  006BF2  20                 	db	32
   184  006BF3  20                 	db	32
   185  006BF4  20                 	db	32
   186  006BF5  20                 	db	32
   187                           
   188                           	psect	mediumconst
   189  007A74                     __pmediumconst:
   190                           	opt stack 0
   191  007A74  00                 	db	0
   192  007A75                     criarCaracteresCGRAM@F2956:
   193                           	opt stack 0
   194  007A75  00                 	db	0
   195  007A76  1F                 	db	31
   196  007A77  0E                 	db	14
   197  007A78  04                 	db	4
   198  007A79  04                 	db	4
   199  007A7A  04                 	db	4
   200  007A7B  04                 	db	4
   201  007A7C  04                 	db	4
   202  007A7D  00                 	db	0
   203  007A7E  00                 	db	0
   204  007A7F  00                 	db	0
   205  007A80  00                 	db	0
   206  007A81  00                 	db	0
   207  007A82  10                 	db	16
   208  007A83  10                 	db	16
   209  007A84  10                 	db	16
   210  007A85  00                 	db	0
   211  007A86  00                 	db	0
   212  007A87  00                 	db	0
   213  007A88  04                 	db	4
   214  007A89  04                 	db	4
   215  007A8A  14                 	db	20
   216  007A8B  14                 	db	20
   217  007A8C  14                 	db	20
   218  007A8D  00                 	db	0
   219  007A8E  01                 	db	1
   220  007A8F  01                 	db	1
   221  007A90  05                 	db	5
   222  007A91  05                 	db	5
   223  007A92  15                 	db	21
   224  007A93  15                 	db	21
   225  007A94  15                 	db	21
   226  007A95  0A                 	db	10
   227  007A96  0A                 	db	10
   228  007A97  1F                 	db	31
   229  007A98  11                 	db	17
   230  007A99  11                 	db	17
   231  007A9A  0E                 	db	14
   232  007A9B  04                 	db	4
   233  007A9C  04                 	db	4
   234  007A9D  00                 	db	0
   235  007A9E  00                 	db	0
   236  007A9F  00                 	db	0
   237  007AA0  00                 	db	0
   238  007AA1  00                 	db	0
   239  007AA2  00                 	db	0
   240  007AA3  00                 	db	0
   241  007AA4  00                 	db	0
   242  007AA5                     __end_ofcriarCaracteresCGRAM@F2956:
   243                           	opt stack 0
   244  007AA5                     _dpowers:
   245                           	opt stack 0
   246  007AA5  0001               	dw	1
   247  007AA7  000A               	dw	10
   248  007AA9  0064               	dw	100
   249  007AAB  03E8               	dw	1000
   250  007AAD  2710               	dw	10000
   251  007AAF                     __end_of_dpowers:
   252                           	opt stack 0
   253  0000                     _SSPBUF	set	4041
   254  0000                     _SSPSTAT	set	4039
   255  0000                     _SSPADD	set	4040
   256  0000                     _SSPCON2	set	4037
   257  0000                     _SSPCON1	set	4038
   258  0000                     _RCREG	set	4014
   259  0000                     _TMR0L	set	4054
   260  0000                     _TMR0H	set	4055
   261  0000                     _PORTCbits	set	3970
   262  0000                     _PORTDbits	set	3971
   263  0000                     _PORTBbits	set	3969
   264  0000                     _PORTEbits	set	3972
   265  0000                     _TXREG	set	4013
   266  0000                     _ADRESL	set	4035
   267  0000                     _ADRESH	set	4036
   268  0000                     _ADCON0bits	set	4034
   269  0000                     _TRISEbits	set	3990
   270  0000                     _TRISBbits	set	3987
   271  0000                     _PIE1bits	set	3997
   272  0000                     _PIR1bits	set	3998
   273  0000                     _INTCONbits	set	4082
   274  0000                     _SPBRG	set	4015
   275  0000                     _RCSTAbits	set	4011
   276  0000                     _TXSTAbits	set	4012
   277  0000                     _TRISCbits	set	3988
   278  0000                     _TRISDbits	set	3989
   279  0000                     _INTCON	set	4082
   280  0000                     _T0CON	set	4053
   281  0000                     _PORTAbits	set	3968
   282  0000                     _TRISAbits	set	3986
   283  0000                     _ADCON1	set	4033
   284  0000                     _ADCON0	set	4034
   285  0000                     _ACKEN	set	32300
   286  0000                     _ACKDT	set	32301
   287  0000                     _RCEN	set	32299
   288  0000                     _PEN	set	32298
   289  0000                     _RSEN	set	32297
   290  0000                     _SEN	set	32296
   291  0000                     _RCIF	set	31989
   292  0000                     _TMR0IF	set	32658
   293  007AAF                     STR_14:
   294  007AAF  54                 	db	84	;'T'
   295  007AB0  45                 	db	69	;'E'
   296  007AB1  43                 	db	67	;'C'
   297  007AB2  48                 	db	72	;'H'
   298  007AB3  4E                 	db	78	;'N'
   299  007AB4  4F                 	db	79	;'O'
   300  007AB5  57                 	db	87	;'W'
   301  007AB6  20                 	db	32
   302  007AB7  53                 	db	83	;'S'
   303  007AB8  69                 	db	105	;'i'
   304  007AB9  73                 	db	115	;'s'
   305  007ABA  74                 	db	116	;'t'
   306  007ABB  65                 	db	101	;'e'
   307  007ABC  6D                 	db	109	;'m'
   308  007ABD  61                 	db	97	;'a'
   309  007ABE  73                 	db	115	;'s'
   310  007ABF  20                 	db	32
   311  007AC0  65                 	db	101	;'e'
   312  007AC1  6D                 	db	109	;'m'
   313  007AC2  62                 	db	98	;'b'
   314  007AC3  61                 	db	97	;'a'
   315  007AC4  72                 	db	114	;'r'
   316  007AC5  63                 	db	99	;'c'
   317  007AC6  61                 	db	97	;'a'
   318  007AC7  64                 	db	100	;'d'
   319  007AC8  6F                 	db	111	;'o'
   320  007AC9  73                 	db	115	;'s'
   321  007ACA  0D                 	db	13
   322  007ACB  0A                 	db	10
   323  007ACC  0D                 	db	13
   324  007ACD  0A                 	db	10
   325  007ACE  54                 	db	84	;'T'
   326  007ACF  65                 	db	101	;'e'
   327  007AD0  73                 	db	115	;'s'
   328  007AD1  74                 	db	116	;'t'
   329  007AD2  65                 	db	101	;'e'
   330  007AD3  20                 	db	32
   331  007AD4  6D                 	db	109	;'m'
   332  007AD5  61                 	db	97	;'a'
   333  007AD6  6E                 	db	110	;'n'
   334  007AD7  75                 	db	117	;'u'
   335  007AD8  61                 	db	97	;'a'
   336  007AD9  6C                 	db	108	;'l'
   337  007ADA  20                 	db	32
   338  007ADB  64                 	db	100	;'d'
   339  007ADC  65                 	db	101	;'e'
   340  007ADD  20                 	db	32
   341  007ADE  63                 	db	99	;'c'
   342  007ADF  6F                 	db	111	;'o'
   343  007AE0  6D                 	db	109	;'m'
   344  007AE1  75                 	db	117	;'u'
   345  007AE2  6E                 	db	110	;'n'
   346  007AE3  69                 	db	105	;'i'
   347  007AE4  63                 	db	99	;'c'
   348  007AE5  61                 	db	97	;'a'
   349  007AE6  63                 	db	99	;'c'
   350  007AE7  61                 	db	97	;'a'
   351  007AE8  6F                 	db	111	;'o'
   352  007AE9  2E                 	db	46
   353  007AEA  0D                 	db	13
   354  007AEB  0A                 	db	10
   355  007AEC  44                 	db	68	;'D'
   356  007AED  61                 	db	97	;'a'
   357  007AEE  74                 	db	116	;'t'
   358  007AEF  61                 	db	97	;'a'
   359  007AF0  3A                 	db	58	;':'
   360  007AF1  20                 	db	32
   361  007AF2  25                 	db	37
   362  007AF3  30                 	db	48	;'0'
   363  007AF4  32                 	db	50	;'2'
   364  007AF5  64                 	db	100	;'d'
   365  007AF6  2F                 	db	47
   366  007AF7  25                 	db	37
   367  007AF8  30                 	db	48	;'0'
   368  007AF9  32                 	db	50	;'2'
   369  007AFA  64                 	db	100	;'d'
   370  007AFB  2F                 	db	47
   371  007AFC  25                 	db	37
   372  007AFD  30                 	db	48	;'0'
   373  007AFE  32                 	db	50	;'2'
   374  007AFF  64                 	db	100	;'d'
   375  007B00  20                 	db	32
   376  007B01  25                 	db	37
   377  007B02  30                 	db	48	;'0'
   378  007B03  32                 	db	50	;'2'
   379  007B04  64                 	db	100	;'d'
   380  007B05  3A                 	db	58	;':'
   381  007B06  25                 	db	37
   382  007B07  30                 	db	48	;'0'
   383  007B08  32                 	db	50	;'2'
   384  007B09  64                 	db	100	;'d'
   385  007B0A  3A                 	db	58	;':'
   386  007B0B  25                 	db	37
   387  007B0C  30                 	db	48	;'0'
   388  007B0D  32                 	db	50	;'2'
   389  007B0E  64                 	db	100	;'d'
   390  007B0F  0D                 	db	13
   391  007B10  0A                 	db	10
   392  007B11  0D                 	db	13
   393  007B12  0A                 	db	10
   394  007B13  0D                 	db	13
   395  007B14  0A                 	db	10
   396  007B15  56                 	db	86	;'V'
   397  007B16  65                 	db	101	;'e'
   398  007B17  72                 	db	114	;'r'
   399  007B18  73                 	db	115	;'s'
   400  007B19  61                 	db	97	;'a'
   401  007B1A  6F                 	db	111	;'o'
   402  007B1B  20                 	db	32
   403  007B1C  64                 	db	100	;'d'
   404  007B1D  6F                 	db	111	;'o'
   405  007B1E  20                 	db	32
   406  007B1F  73                 	db	115	;'s'
   407  007B20  69                 	db	105	;'i'
   408  007B21  73                 	db	115	;'s'
   409  007B22  74                 	db	116	;'t'
   410  007B23  65                 	db	101	;'e'
   411  007B24  6D                 	db	109	;'m'
   412  007B25  61                 	db	97	;'a'
   413  007B26  3A                 	db	58	;':'
   414  007B27  20                 	db	32
   415  007B28  25                 	db	37
   416  007B29  73                 	db	115	;'s'
   417  007B2A  0D                 	db	13
   418  007B2B  0A                 	db	10
   419  007B2C  00                 	db	0
   420  007B2D                     STR_26:
   421  007B2D  54                 	db	84	;'T'
   422  007B2E  45                 	db	69	;'E'
   423  007B2F  53                 	db	83	;'S'
   424  007B30  54                 	db	84	;'T'
   425  007B31  45                 	db	69	;'E'
   426  007B32  20                 	db	32
   427  007B33  44                 	db	68	;'D'
   428  007B34  45                 	db	69	;'E'
   429  007B35  20                 	db	32
   430  007B36  42                 	db	66	;'B'
   431  007B37  4F                 	db	79	;'O'
   432  007B38  4D                 	db	77	;'M'
   433  007B39  42                 	db	66	;'B'
   434  007B3A  41                 	db	65	;'A'
   435  007B3B  53                 	db	83	;'S'
   436  007B3C  20                 	db	32
   437  007B3D  52                 	db	82	;'R'
   438  007B3E  45                 	db	69	;'E'
   439  007B3F  41                 	db	65	;'A'
   440  007B40  4C                 	db	76	;'L'
   441  007B41  49                 	db	73	;'I'
   442  007B42  5A                 	db	90	;'Z'
   443  007B43  41                 	db	65	;'A'
   444  007B44  44                 	db	68	;'D'
   445  007B45  4F                 	db	79	;'O'
   446  007B46  0D                 	db	13
   447  007B47  0A                 	db	10
   448  007B48  45                 	db	69	;'E'
   449  007B49  4D                 	db	77	;'M'
   450  007B4A  20                 	db	32
   451  007B4B  25                 	db	37
   452  007B4C  30                 	db	48	;'0'
   453  007B4D  32                 	db	50	;'2'
   454  007B4E  64                 	db	100	;'d'
   455  007B4F  3A                 	db	58	;':'
   456  007B50  25                 	db	37
   457  007B51  30                 	db	48	;'0'
   458  007B52  32                 	db	50	;'2'
   459  007B53  64                 	db	100	;'d'
   460  007B54  3A                 	db	58	;':'
   461  007B55  25                 	db	37
   462  007B56  30                 	db	48	;'0'
   463  007B57  32                 	db	50	;'2'
   464  007B58  64                 	db	100	;'d'
   465  007B59  20                 	db	32
   466  007B5A  25                 	db	37
   467  007B5B  30                 	db	48	;'0'
   468  007B5C  32                 	db	50	;'2'
   469  007B5D  64                 	db	100	;'d'
   470  007B5E  2F                 	db	47
   471  007B5F  25                 	db	37
   472  007B60  30                 	db	48	;'0'
   473  007B61  32                 	db	50	;'2'
   474  007B62  64                 	db	100	;'d'
   475  007B63  2F                 	db	47
   476  007B64  25                 	db	37
   477  007B65  30                 	db	48	;'0'
   478  007B66  32                 	db	50	;'2'
   479  007B67  64                 	db	100	;'d'
   480  007B68  0D                 	db	13
   481  007B69  0A                 	db	10
   482  007B6A  4A                 	db	74	;'J'
   483  007B6B  4F                 	db	79	;'O'
   484  007B6C  43                 	db	67	;'C'
   485  007B6D  4B                 	db	75	;'K'
   486  007B6E  45                 	db	69	;'E'
   487  007B6F  59                 	db	89	;'Y'
   488  007B70  3A                 	db	58	;':'
   489  007B71  20                 	db	32
   490  007B72  25                 	db	37
   491  007B73  73                 	db	115	;'s'
   492  007B74  0D                 	db	13
   493  007B75  0A                 	db	10
   494  007B76  50                 	db	80	;'P'
   495  007B77  52                 	db	82	;'R'
   496  007B78  49                 	db	73	;'I'
   497  007B79  4E                 	db	78	;'N'
   498  007B7A  43                 	db	67	;'C'
   499  007B7B  49                 	db	73	;'I'
   500  007B7C  50                 	db	80	;'P'
   501  007B7D  41                 	db	65	;'A'
   502  007B7E  4C                 	db	76	;'L'
   503  007B7F  3A                 	db	58	;':'
   504  007B80  20                 	db	32
   505  007B81  25                 	db	37
   506  007B82  73                 	db	115	;'s'
   507  007B83  0D                 	db	13
   508  007B84  0A                 	db	10
   509  007B85  43                 	db	67	;'C'
   510  007B86  4F                 	db	79	;'O'
   511  007B87  4D                 	db	77	;'M'
   512  007B88  42                 	db	66	;'B'
   513  007B89  55                 	db	85	;'U'
   514  007B8A  53                 	db	83	;'S'
   515  007B8B  54                 	db	84	;'T'
   516  007B8C  41                 	db	65	;'A'
   517  007B8D  4F                 	db	79	;'O'
   518  007B8E  3A                 	db	58	;':'
   519  007B8F  20                 	db	32
   520  007B90  25                 	db	37
   521  007B91  73                 	db	115	;'s'
   522  007B92  0D                 	db	13
   523  007B93  0A                 	db	10
   524  007B94  00                 	db	0
   525  007B95                     STR_25:
   526  007B95  44                 	db	68	;'D'
   527  007B96  49                 	db	73	;'I'
   528  007B97  53                 	db	83	;'S'
   529  007B98  50                 	db	80	;'P'
   530  007B99  41                 	db	65	;'A'
   531  007B9A  52                 	db	82	;'R'
   532  007B9B  4F                 	db	79	;'O'
   533  007B9C  20                 	db	32
   534  007B9D  41                 	db	65	;'A'
   535  007B9E  4C                 	db	76	;'L'
   536  007B9F  41                 	db	65	;'A'
   537  007BA0  52                 	db	82	;'R'
   538  007BA1  4D                 	db	77	;'M'
   539  007BA2  45                 	db	69	;'E'
   540  007BA3  20                 	db	32
   541  007BA4  44                 	db	68	;'D'
   542  007BA5  45                 	db	69	;'E'
   543  007BA6  20                 	db	32
   544  007BA7  49                 	db	73	;'I'
   545  007BA8  4E                 	db	78	;'N'
   546  007BA9  43                 	db	67	;'C'
   547  007BAA  45                 	db	69	;'E'
   548  007BAB  4E                 	db	78	;'N'
   549  007BAC  44                 	db	68	;'D'
   550  007BAD  49                 	db	73	;'I'
   551  007BAE  4F                 	db	79	;'O'
   552  007BAF  0D                 	db	13
   553  007BB0  0A                 	db	10
   554  007BB1  45                 	db	69	;'E'
   555  007BB2  4D                 	db	77	;'M'
   556  007BB3  20                 	db	32
   557  007BB4  25                 	db	37
   558  007BB5  30                 	db	48	;'0'
   559  007BB6  32                 	db	50	;'2'
   560  007BB7  64                 	db	100	;'d'
   561  007BB8  3A                 	db	58	;':'
   562  007BB9  25                 	db	37
   563  007BBA  30                 	db	48	;'0'
   564  007BBB  32                 	db	50	;'2'
   565  007BBC  64                 	db	100	;'d'
   566  007BBD  3A                 	db	58	;':'
   567  007BBE  25                 	db	37
   568  007BBF  30                 	db	48	;'0'
   569  007BC0  32                 	db	50	;'2'
   570  007BC1  64                 	db	100	;'d'
   571  007BC2  20                 	db	32
   572  007BC3  25                 	db	37
   573  007BC4  30                 	db	48	;'0'
   574  007BC5  32                 	db	50	;'2'
   575  007BC6  64                 	db	100	;'d'
   576  007BC7  2F                 	db	47
   577  007BC8  25                 	db	37
   578  007BC9  30                 	db	48	;'0'
   579  007BCA  32                 	db	50	;'2'
   580  007BCB  64                 	db	100	;'d'
   581  007BCC  2F                 	db	47
   582  007BCD  25                 	db	37
   583  007BCE  30                 	db	48	;'0'
   584  007BCF  32                 	db	50	;'2'
   585  007BD0  64                 	db	100	;'d'
   586  007BD1  0D                 	db	13
   587  007BD2  0A                 	db	10
   588  007BD3  00                 	db	0
   589  007BD4                     STR_79:
   590  007BD4  44                 	db	68	;'D'
   591  007BD5  61                 	db	97	;'a'
   592  007BD6  74                 	db	116	;'t'
   593  007BD7  61                 	db	97	;'a'
   594  007BD8  3A                 	db	58	;':'
   595  007BD9  20                 	db	32
   596  007BDA  25                 	db	37
   597  007BDB  30                 	db	48	;'0'
   598  007BDC  32                 	db	50	;'2'
   599  007BDD  64                 	db	100	;'d'
   600  007BDE  2F                 	db	47
   601  007BDF  25                 	db	37
   602  007BE0  30                 	db	48	;'0'
   603  007BE1  32                 	db	50	;'2'
   604  007BE2  64                 	db	100	;'d'
   605  007BE3  2F                 	db	47
   606  007BE4  25                 	db	37
   607  007BE5  30                 	db	48	;'0'
   608  007BE6  32                 	db	50	;'2'
   609  007BE7  64                 	db	100	;'d'
   610  007BE8  20                 	db	32
   611  007BE9  25                 	db	37
   612  007BEA  30                 	db	48	;'0'
   613  007BEB  32                 	db	50	;'2'
   614  007BEC  64                 	db	100	;'d'
   615  007BED  3A                 	db	58	;':'
   616  007BEE  25                 	db	37
   617  007BEF  30                 	db	48	;'0'
   618  007BF0  32                 	db	50	;'2'
   619  007BF1  64                 	db	100	;'d'
   620  007BF2  00                 	db	0
   621  007BF3                     STR_58:
   622  007BF3  20                 	db	32
   623  007BF4  25                 	db	37
   624  007BF5  30                 	db	48	;'0'
   625  007BF6  32                 	db	50	;'2'
   626  007BF7  64                 	db	100	;'d'
   627  007BF8  3A                 	db	58	;':'
   628  007BF9  25                 	db	37
   629  007BFA  30                 	db	48	;'0'
   630  007BFB  32                 	db	50	;'2'
   631  007BFC  64                 	db	100	;'d'
   632  007BFD  3A                 	db	58	;':'
   633  007BFE  25                 	db	37
   634  007BFF  30                 	db	48	;'0'
   635  007C00  32                 	db	50	;'2'
   636  007C01  64                 	db	100	;'d'
   637  007C02  20                 	db	32
   638  007C03  25                 	db	37
   639  007C04  30                 	db	48	;'0'
   640  007C05  32                 	db	50	;'2'
   641  007C06  64                 	db	100	;'d'
   642  007C07  2F                 	db	47
   643  007C08  25                 	db	37
   644  007C09  30                 	db	48	;'0'
   645  007C0A  32                 	db	50	;'2'
   646  007C0B  64                 	db	100	;'d'
   647  007C0C  00                 	db	0
   648  007C0D                     STR_63:
   649  007C0D  20                 	db	32
   650  007C0E  2A                 	db	42
   651  007C0F  66                 	db	102	;'f'
   652  007C10  61                 	db	97	;'a'
   653  007C11  6C                 	db	108	;'l'
   654  007C12  68                 	db	104	;'h'
   655  007C13  61                 	db	97	;'a'
   656  007C14  20                 	db	32
   657  007C15  42                 	db	66	;'B'
   658  007C16  2E                 	db	46
   659  007C17  20                 	db	32
   660  007C18  70                 	db	112	;'p'
   661  007C19  72                 	db	114	;'r'
   662  007C1A  69                 	db	105	;'i'
   663  007C1B  6E                 	db	110	;'n'
   664  007C1C  63                 	db	99	;'c'
   665  007C1D  69                 	db	105	;'i'
   666  007C1E  70                 	db	112	;'p'
   667  007C1F  61                 	db	97	;'a'
   668  007C20  6C                 	db	108	;'l'
   669  007C21  00                 	db	0
   670  007C22                     STR_64:
   671  007C22  20                 	db	32
   672  007C23  2A                 	db	42
   673  007C24  66                 	db	102	;'f'
   674  007C25  61                 	db	97	;'a'
   675  007C26  6C                 	db	108	;'l'
   676  007C27  68                 	db	104	;'h'
   677  007C28  61                 	db	97	;'a'
   678  007C29  20                 	db	32
   679  007C2A  42                 	db	66	;'B'
   680  007C2B  2E                 	db	46
   681  007C2C  20                 	db	32
   682  007C2D  63                 	db	99	;'c'
   683  007C2E  6F                 	db	111	;'o'
   684  007C2F  6D                 	db	109	;'m'
   685  007C30  62                 	db	98	;'b'
   686  007C31  75                 	db	117	;'u'
   687  007C32  73                 	db	115	;'s'
   688  007C33  74                 	db	116	;'t'
   689  007C34  61                 	db	97	;'a'
   690  007C35  6F                 	db	111	;'o'
   691  007C36  00                 	db	0
   692  007C37                     STR_73:
   693  007C37  23                 	db	35
   694  007C38  50                 	db	80	;'P'
   695  007C39  72                 	db	114	;'r'
   696  007C3A  6F                 	db	111	;'o'
   697  007C3B  78                 	db	120	;'x'
   698  007C3C  69                 	db	105	;'i'
   699  007C3D  6D                 	db	109	;'m'
   700  007C3E  6F                 	db	111	;'o'
   701  007C3F  20                 	db	32
   702  007C40  65                 	db	101	;'e'
   703  007C41  6D                 	db	109	;'m'
   704  007C42  20                 	db	32
   705  007C43  25                 	db	37
   706  007C44  32                 	db	50	;'2'
   707  007C45  64                 	db	100	;'d'
   708  007C46  20                 	db	32
   709  007C47  64                 	db	100	;'d'
   710  007C48  69                 	db	105	;'i'
   711  007C49  61                 	db	97	;'a'
   712  007C4A  73                 	db	115	;'s'
   713  007C4B  00                 	db	0
   714  007C4C                     STR_38:
   715  007C4C  44                 	db	68	;'D'
   716  007C4D  65                 	db	101	;'e'
   717  007C4E  73                 	db	115	;'s'
   718  007C4F  70                 	db	112	;'p'
   719  007C50  72                 	db	114	;'r'
   720  007C51  65                 	db	101	;'e'
   721  007C52  73                 	db	115	;'s'
   722  007C53  73                 	db	115	;'s'
   723  007C54  75                 	db	117	;'u'
   724  007C55  72                 	db	114	;'r'
   725  007C56  69                 	db	105	;'i'
   726  007C57  7A                 	db	122	;'z'
   727  007C58  61                 	db	97	;'a'
   728  007C59  6E                 	db	110	;'n'
   729  007C5A  64                 	db	100	;'d'
   730  007C5B  6F                 	db	111	;'o'
   731  007C5C  2E                 	db	46
   732  007C5D  2E                 	db	46
   733  007C5E  2E                 	db	46
   734  007C5F  00                 	db	0
   735  007C60                     STR_65:
   736  007C60  20                 	db	32
   737  007C61  41                 	db	65	;'A'
   738  007C62  4C                 	db	76	;'L'
   739  007C63  45                 	db	69	;'E'
   740  007C64  52                 	db	82	;'R'
   741  007C65  54                 	db	84	;'T'
   742  007C66  41                 	db	65	;'A'
   743  007C67  20                 	db	32
   744  007C68  44                 	db	68	;'D'
   745  007C69  45                 	db	69	;'E'
   746  007C6A  20                 	db	32
   747  007C6B  49                 	db	73	;'I'
   748  007C6C  4E                 	db	78	;'N'
   749  007C6D  43                 	db	67	;'C'
   750  007C6E  45                 	db	69	;'E'
   751  007C6F  4E                 	db	78	;'N'
   752  007C70  44                 	db	68	;'D'
   753  007C71  49                 	db	73	;'I'
   754  007C72  4F                 	db	79	;'O'
   755  007C73  00                 	db	0
   756  007C74                     STR_61:
   757  007C74  20                 	db	32
   758  007C75  2A                 	db	42
   759  007C76  66                 	db	102	;'f'
   760  007C77  61                 	db	97	;'a'
   761  007C78  6C                 	db	108	;'l'
   762  007C79  68                 	db	104	;'h'
   763  007C7A  61                 	db	97	;'a'
   764  007C7B  20                 	db	32
   765  007C7C  76                 	db	118	;'v'
   766  007C7D  61                 	db	97	;'a'
   767  007C7E  6C                 	db	108	;'l'
   768  007C7F  2E                 	db	46
   769  007C80  20                 	db	32
   770  007C81  6C                 	db	108	;'l'
   771  007C82  61                 	db	97	;'a'
   772  007C83  64                 	db	100	;'d'
   773  007C84  72                 	db	114	;'r'
   774  007C85  61                 	db	97	;'a'
   775  007C86  6F                 	db	111	;'o'
   776  007C87  00                 	db	0
   777  007C88                     STR_74:
   778  007C88  49                 	db	73	;'I'
   779  007C89  4E                 	db	78	;'N'
   780  007C8A  54                 	db	84	;'T'
   781  007C8B  45                 	db	69	;'E'
   782  007C8C  52                 	db	82	;'R'
   783  007C8D  56                 	db	86	;'V'
   784  007C8E  41                 	db	65	;'A'
   785  007C8F  4C                 	db	76	;'L'
   786  007C90  4F                 	db	79	;'O'
   787  007C91  3A                 	db	58	;':'
   788  007C92  20                 	db	32
   789  007C93  25                 	db	37
   790  007C94  32                 	db	50	;'2'
   791  007C95  64                 	db	100	;'d'
   792  007C96  20                 	db	32
   793  007C97  64                 	db	100	;'d'
   794  007C98  69                 	db	105	;'i'
   795  007C99  61                 	db	97	;'a'
   796  007C9A  73                 	db	115	;'s'
   797  007C9B  00                 	db	0
   798  007C9C                     STR_75:
   799  007C9C  48                 	db	72	;'H'
   800  007C9D  4F                 	db	79	;'O'
   801  007C9E  52                 	db	82	;'R'
   802  007C9F  41                 	db	65	;'A'
   803  007CA0  52                 	db	82	;'R'
   804  007CA1  49                 	db	73	;'I'
   805  007CA2  4F                 	db	79	;'O'
   806  007CA3  3A                 	db	58	;':'
   807  007CA4  20                 	db	32
   808  007CA5  25                 	db	37
   809  007CA6  30                 	db	48	;'0'
   810  007CA7  32                 	db	50	;'2'
   811  007CA8  64                 	db	100	;'d'
   812  007CA9  20                 	db	32
   813  007CAA  68                 	db	104	;'h'
   814  007CAB  6F                 	db	111	;'o'
   815  007CAC  72                 	db	114	;'r'
   816  007CAD  61                 	db	97	;'a'
   817  007CAE  73                 	db	115	;'s'
   818  007CAF  00                 	db	0
   819  007CB0                     STR_91:
   820  007CB0  53                 	db	83	;'S'
   821  007CB1  69                 	db	105	;'i'
   822  007CB2  73                 	db	115	;'s'
   823  007CB3  74                 	db	116	;'t'
   824  007CB4  65                 	db	101	;'e'
   825  007CB5  6D                 	db	109	;'m'
   826  007CB6  61                 	db	97	;'a'
   827  007CB7  73                 	db	115	;'s'
   828  007CB8  20                 	db	32
   829  007CB9  65                 	db	101	;'e'
   830  007CBA  6D                 	db	109	;'m'
   831  007CBB  62                 	db	98	;'b'
   832  007CBC  61                 	db	97	;'a'
   833  007CBD  72                 	db	114	;'r'
   834  007CBE  63                 	db	99	;'c'
   835  007CBF  61                 	db	97	;'a'
   836  007CC0  64                 	db	100	;'d'
   837  007CC1  6F                 	db	111	;'o'
   838  007CC2  73                 	db	115	;'s'
   839  007CC3  00                 	db	0
   840  007CC4                     STR_68:
   841  007CC4  20                 	db	32
   842  007CC5  50                 	db	80	;'P'
   843  007CC6  72                 	db	114	;'r'
   844  007CC7  65                 	db	101	;'e'
   845  007CC8  73                 	db	115	;'s'
   846  007CC9  73                 	db	115	;'s'
   847  007CCA  20                 	db	32
   848  007CCB  45                 	db	69	;'E'
   849  007CCC  53                 	db	83	;'S'
   850  007CCD  43                 	db	67	;'C'
   851  007CCE  20                 	db	32
   852  007CCF  70                 	db	112	;'p'
   853  007CD0  2F                 	db	47
   854  007CD1  20                 	db	32
   855  007CD2  52                 	db	82	;'R'
   856  007CD3  65                 	db	101	;'e'
   857  007CD4  73                 	db	115	;'s'
   858  007CD5  65                 	db	101	;'e'
   859  007CD6  74                 	db	116	;'t'
   860  007CD7  00                 	db	0
   861  007CD8                     STR_42:
   862  007CD8  42                 	db	66	;'B'
   863  007CD9  6F                 	db	111	;'o'
   864  007CDA  6D                 	db	109	;'m'
   865  007CDB  62                 	db	98	;'b'
   866  007CDC  61                 	db	97	;'a'
   867  007CDD  20                 	db	32
   868  007CDE  50                 	db	80	;'P'
   869  007CDF  72                 	db	114	;'r'
   870  007CE0  69                 	db	105	;'i'
   871  007CE1  6E                 	db	110	;'n'
   872  007CE2  63                 	db	99	;'c'
   873  007CE3  69                 	db	105	;'i'
   874  007CE4  70                 	db	112	;'p'
   875  007CE5  61                 	db	97	;'a'
   876  007CE6  6C                 	db	108	;'l'
   877  007CE7  2E                 	db	46
   878  007CE8  2E                 	db	46
   879  007CE9  2E                 	db	46
   880  007CEA  00                 	db	0
   881  007CEB                     STR_43:
   882  007CEB  42                 	db	66	;'B'
   883  007CEC  6F                 	db	111	;'o'
   884  007CED  6D                 	db	109	;'m'
   885  007CEE  62                 	db	98	;'b'
   886  007CEF  61                 	db	97	;'a'
   887  007CF0  20                 	db	32
   888  007CF1  43                 	db	67	;'C'
   889  007CF2  6F                 	db	111	;'o'
   890  007CF3  6D                 	db	109	;'m'
   891  007CF4  62                 	db	98	;'b'
   892  007CF5  75                 	db	117	;'u'
   893  007CF6  73                 	db	115	;'s'
   894  007CF7  74                 	db	116	;'t'
   895  007CF8  61                 	db	97	;'a'
   896  007CF9  6F                 	db	111	;'o'
   897  007CFA  2E                 	db	46
   898  007CFB  2E                 	db	46
   899  007CFC  2E                 	db	46
   900  007CFD  00                 	db	0
   901  007CFE                     STR_100:
   902  007CFE  43                 	db	67	;'C'
   903  007CFF  6F                 	db	111	;'o'
   904  007D00  6E                 	db	110	;'n'
   905  007D01  66                 	db	102	;'f'
   906  007D02  69                 	db	105	;'i'
   907  007D03  67                 	db	103	;'g'
   908  007D04  75                 	db	117	;'u'
   909  007D05  72                 	db	114	;'r'
   910  007D06  61                 	db	97	;'a'
   911  007D07  63                 	db	99	;'c'
   912  007D08  61                 	db	97	;'a'
   913  007D09  6F                 	db	111	;'o'
   914  007D0A  20                 	db	32
   915  007D0B  74                 	db	116	;'t'
   916  007D0C  65                 	db	101	;'e'
   917  007D0D  6D                 	db	109	;'m'
   918  007D0E  70                 	db	112	;'p'
   919  007D0F  6F                 	db	111	;'o'
   920  007D10  00                 	db	0
   921  007D11                     STR_66:
   922  007D11  45                 	db	69	;'E'
   923  007D12  72                 	db	114	;'r'
   924  007D13  72                 	db	114	;'r'
   925  007D14  6F                 	db	111	;'o'
   926  007D15  20                 	db	32
   927  007D16  6E                 	db	110	;'n'
   928  007D17  6F                 	db	111	;'o'
   929  007D18  20                 	db	32
   930  007D19  54                 	db	84	;'T'
   931  007D1A  72                 	db	114	;'r'
   932  007D1B  61                 	db	97	;'a'
   933  007D1C  6E                 	db	110	;'n'
   934  007D1D  73                 	db	115	;'s'
   935  007D1E  64                 	db	100	;'d'
   936  007D1F  75                 	db	117	;'u'
   937  007D20  74                 	db	116	;'t'
   938  007D21  6F                 	db	111	;'o'
   939  007D22  72                 	db	114	;'r'
   940  007D23  00                 	db	0
   941  007D24                     STR_12:
   942  007D24  41                 	db	65	;'A'
   943  007D25  54                 	db	84	;'T'
   944  007D26  2B                 	db	43
   945  007D27  43                 	db	67	;'C'
   946  007D28  4D                 	db	77	;'M'
   947  007D29  47                 	db	71	;'G'
   948  007D2A  53                 	db	83	;'S'
   949  007D2B  3D                 	db	61	;'='
   950  007D2C  22                 	db	34
   951  007D2D  2B                 	db	43
   952  007D2E  35                 	db	53	;'5'
   953  007D2F  35                 	db	53	;'5'
   954  007D30  25                 	db	37
   955  007D31  73                 	db	115	;'s'
   956  007D32  22                 	db	34
   957  007D33  0D                 	db	13
   958  007D34  0A                 	db	10
   959  007D35  00                 	db	0
   960  007D36                     STR_121:
   961  007D36  50                 	db	80	;'P'
   962  007D37  41                 	db	65	;'A'
   963  007D38  52                 	db	82	;'R'
   964  007D39  54                 	db	84	;'T'
   965  007D3A  49                 	db	73	;'I'
   966  007D3B  44                 	db	68	;'D'
   967  007D3C  41                 	db	65	;'A'
   968  007D3D  20                 	db	32
   969  007D3E  43                 	db	67	;'C'
   970  007D3F  4F                 	db	79	;'O'
   971  007D40  4D                 	db	77	;'M'
   972  007D41  42                 	db	66	;'B'
   973  007D42  55                 	db	85	;'U'
   974  007D43  53                 	db	83	;'S'
   975  007D44  54                 	db	84	;'T'
   976  007D45  41                 	db	65	;'A'
   977  007D46  4F                 	db	79	;'O'
   978  007D47  00                 	db	0
   979  007D48                     STR_123:
   980  007D48  50                 	db	80	;'P'
   981  007D49  45                 	db	69	;'E'
   982  007D4A  52                 	db	82	;'R'
   983  007D4B  49                 	db	73	;'I'
   984  007D4C  4F                 	db	79	;'O'
   985  007D4D  44                 	db	68	;'D'
   986  007D4E  4F                 	db	79	;'O'
   987  007D4F  20                 	db	32
   988  007D50  44                 	db	68	;'D'
   989  007D51  45                 	db	69	;'E'
   990  007D52  20                 	db	32
   991  007D53  54                 	db	84	;'T'
   992  007D54  45                 	db	69	;'E'
   993  007D55  53                 	db	83	;'S'
   994  007D56  54                 	db	84	;'T'
   995  007D57  45                 	db	69	;'E'
   996  007D58  53                 	db	83	;'S'
   997  007D59  00                 	db	0
   998  007D5A                     STR_105:
   999  007D5A  68                 	db	104	;'h'
  1000  007D5B  6F                 	db	111	;'o'
  1001  007D5C  72                 	db	114	;'r'
  1002  007D5D  69                 	db	105	;'i'
  1003  007D5E  6D                 	db	109	;'m'
  1004  007D5F  65                 	db	101	;'e'
  1005  007D60  74                 	db	116	;'t'
  1006  007D61  72                 	db	114	;'r'
  1007  007D62  6F                 	db	111	;'o'
  1008  007D63  3A                 	db	58	;':'
  1009  007D64  25                 	db	37
  1010  007D65  35                 	db	53	;'5'
  1011  007D66  64                 	db	100	;'d'
  1012  007D67  20                 	db	32
  1013  007D68  6D                 	db	109	;'m'
  1014  007D69  69                 	db	105	;'i'
  1015  007D6A  6E                 	db	110	;'n'
  1016  007D6B  00                 	db	0
  1017  007D6C                     STR_62:
  1018  007D6C  20                 	db	32
  1019  007D6D  2A                 	db	42
  1020  007D6E  66                 	db	102	;'f'
  1021  007D6F  61                 	db	97	;'a'
  1022  007D70  6C                 	db	108	;'l'
  1023  007D71  68                 	db	104	;'h'
  1024  007D72  61                 	db	97	;'a'
  1025  007D73  20                 	db	32
  1026  007D74  42                 	db	66	;'B'
  1027  007D75  2E                 	db	46
  1028  007D76  20                 	db	32
  1029  007D77  6A                 	db	106	;'j'
  1030  007D78  6F                 	db	111	;'o'
  1031  007D79  63                 	db	99	;'c'
  1032  007D7A  6B                 	db	107	;'k'
  1033  007D7B  65                 	db	101	;'e'
  1034  007D7C  79                 	db	121	;'y'
  1035  007D7D  00                 	db	0
  1036  007D7E                     STR_47:
  1037  007D7E  54                 	db	84	;'T'
  1038  007D7F  65                 	db	101	;'e'
  1039  007D80  73                 	db	115	;'s'
  1040  007D81  74                 	db	116	;'t'
  1041  007D82  65                 	db	101	;'e'
  1042  007D83  20                 	db	32
  1043  007D84  43                 	db	67	;'C'
  1044  007D85  6F                 	db	111	;'o'
  1045  007D86  6E                 	db	110	;'n'
  1046  007D87  63                 	db	99	;'c'
  1047  007D88  6C                 	db	108	;'l'
  1048  007D89  75                 	db	117	;'u'
  1049  007D8A  69                 	db	105	;'i'
  1050  007D8B  64                 	db	100	;'d'
  1051  007D8C  6F                 	db	111	;'o'
  1052  007D8D  21                 	db	33
  1053  007D8E  00                 	db	0
  1054  007D8F                     STR_92:
  1055  007D8F  20                 	db	32
  1056  007D90  20                 	db	32
  1057  007D91  20                 	db	32
  1058  007D92  34                 	db	52	;'4'
  1059  007D93  38                 	db	56	;'8'
  1060  007D94  20                 	db	32
  1061  007D95  39                 	db	57	;'9'
  1062  007D96  39                 	db	57	;'9'
  1063  007D97  39                 	db	57	;'9'
  1064  007D98  30                 	db	48	;'0'
  1065  007D99  36                 	db	54	;'6'
  1066  007D9A  2D                 	db	45
  1067  007D9B  35                 	db	53	;'5'
  1068  007D9C  36                 	db	54	;'6'
  1069  007D9D  35                 	db	53	;'5'
  1070  007D9E  31                 	db	49	;'1'
  1071  007D9F  00                 	db	0
  1072  007DA0                     STR_59:
  1073  007DA0  20                 	db	32
  1074  007DA1  2A                 	db	42
  1075  007DA2  66                 	db	102	;'f'
  1076  007DA3  61                 	db	97	;'a'
  1077  007DA4  6C                 	db	108	;'l'
  1078  007DA5  68                 	db	104	;'h'
  1079  007DA6  61                 	db	97	;'a'
  1080  007DA7  20                 	db	32
  1081  007DA8  65                 	db	101	;'e'
  1082  007DA9  6C                 	db	108	;'l'
  1083  007DAA  65                 	db	101	;'e'
  1084  007DAB  74                 	db	116	;'t'
  1085  007DAC  72                 	db	114	;'r'
  1086  007DAD  69                 	db	105	;'i'
  1087  007DAE  63                 	db	99	;'c'
  1088  007DAF  61                 	db	97	;'a'
  1089  007DB0  00                 	db	0
  1090  007DB1                     STR_99:
  1091  007DB1  45                 	db	69	;'E'
  1092  007DB2  6E                 	db	110	;'n'
  1093  007DB3  76                 	db	118	;'v'
  1094  007DB4  69                 	db	105	;'i'
  1095  007DB5  61                 	db	97	;'a'
  1096  007DB6  72                 	db	114	;'r'
  1097  007DB7  20                 	db	32
  1098  007DB8  73                 	db	115	;'s'
  1099  007DB9  6D                 	db	109	;'m'
  1100  007DBA  73                 	db	115	;'s'
  1101  007DBB  20                 	db	32
  1102  007DBC  74                 	db	116	;'t'
  1103  007DBD  65                 	db	101	;'e'
  1104  007DBE  73                 	db	115	;'s'
  1105  007DBF  74                 	db	116	;'t'
  1106  007DC0  65                 	db	101	;'e'
  1107  007DC1  00                 	db	0
  1108  007DC2                     STR_57:
  1109  007DC2  65                 	db	101	;'e'
  1110  007DC3  6E                 	db	110	;'n'
  1111  007DC4  76                 	db	118	;'v'
  1112  007DC5  69                 	db	105	;'i'
  1113  007DC6  61                 	db	97	;'a'
  1114  007DC7  6E                 	db	110	;'n'
  1115  007DC8  64                 	db	100	;'d'
  1116  007DC9  6F                 	db	111	;'o'
  1117  007DCA  20                 	db	32
  1118  007DCB  53                 	db	83	;'S'
  1119  007DCC  4D                 	db	77	;'M'
  1120  007DCD  53                 	db	83	;'S'
  1121  007DCE  2E                 	db	46
  1122  007DCF  2E                 	db	46
  1123  007DD0  2E                 	db	46
  1124  007DD1  00                 	db	0
  1125  007DD2                     STR_41:
  1126  007DD2  42                 	db	66	;'B'
  1127  007DD3  6F                 	db	111	;'o'
  1128  007DD4  6D                 	db	109	;'m'
  1129  007DD5  62                 	db	98	;'b'
  1130  007DD6  61                 	db	97	;'a'
  1131  007DD7  20                 	db	32
  1132  007DD8  4A                 	db	74	;'J'
  1133  007DD9  6F                 	db	111	;'o'
  1134  007DDA  63                 	db	99	;'c'
  1135  007DDB  6B                 	db	107	;'k'
  1136  007DDC  65                 	db	101	;'e'
  1137  007DDD  79                 	db	121	;'y'
  1138  007DDE  2E                 	db	46
  1139  007DDF  2E                 	db	46
  1140  007DE0  2E                 	db	46
  1141  007DE1  00                 	db	0
  1142  007DE2                     STR_120:
  1143  007DE2  50                 	db	80	;'P'
  1144  007DE3  52                 	db	82	;'R'
  1145  007DE4  45                 	db	69	;'E'
  1146  007DE5  53                 	db	83	;'S'
  1147  007DE6  53                 	db	83	;'S'
  1148  007DE7  41                 	db	65	;'A'
  1149  007DE8  4F                 	db	79	;'O'
  1150  007DE9  20                 	db	32
  1151  007DEA  44                 	db	68	;'D'
  1152  007DEB  41                 	db	65	;'A'
  1153  007DEC  20                 	db	32
  1154  007DED  52                 	db	82	;'R'
  1155  007DEE  45                 	db	69	;'E'
  1156  007DEF  44                 	db	68	;'D'
  1157  007DF0  45                 	db	69	;'E'
  1158  007DF1  00                 	db	0
  1159  007DF2                     STR_40:
  1160  007DF2  50                 	db	80	;'P'
  1161  007DF3  72                 	db	114	;'r'
  1162  007DF4  65                 	db	101	;'e'
  1163  007DF5  73                 	db	115	;'s'
  1164  007DF6  73                 	db	115	;'s'
  1165  007DF7  61                 	db	97	;'a'
  1166  007DF8  6F                 	db	111	;'o'
  1167  007DF9  20                 	db	32
  1168  007DFA  25                 	db	37
  1169  007DFB  73                 	db	115	;'s'
  1170  007DFC  20                 	db	32
  1171  007DFD  42                 	db	66	;'B'
  1172  007DFE  41                 	db	65	;'A'
  1173  007DFF  52                 	db	82	;'R'
  1174  007E00  00                 	db	0
  1175  007E01                     STR_70:
  1176  007E01  25                 	db	37
  1177  007E02  30                 	db	48	;'0'
  1178  007E03  32                 	db	50	;'2'
  1179  007E04  64                 	db	100	;'d'
  1180  007E05  2F                 	db	47
  1181  007E06  25                 	db	37
  1182  007E07  30                 	db	48	;'0'
  1183  007E08  32                 	db	50	;'2'
  1184  007E09  64                 	db	100	;'d'
  1185  007E0A  2F                 	db	47
  1186  007E0B  25                 	db	37
  1187  007E0C  30                 	db	48	;'0'
  1188  007E0D  32                 	db	50	;'2'
  1189  007E0E  64                 	db	100	;'d'
  1190  007E0F  00                 	db	0
  1191  007E10                     STR_72:
  1192  007E10  25                 	db	37
  1193  007E11  30                 	db	48	;'0'
  1194  007E12  32                 	db	50	;'2'
  1195  007E13  64                 	db	100	;'d'
  1196  007E14  3A                 	db	58	;':'
  1197  007E15  25                 	db	37
  1198  007E16  30                 	db	48	;'0'
  1199  007E17  32                 	db	50	;'2'
  1200  007E18  64                 	db	100	;'d'
  1201  007E19  3A                 	db	58	;':'
  1202  007E1A  25                 	db	37
  1203  007E1B  30                 	db	48	;'0'
  1204  007E1C  32                 	db	50	;'2'
  1205  007E1D  64                 	db	100	;'d'
  1206  007E1E  00                 	db	0
  1207  007E1F                     STR_51:
  1208  007E1F  50                 	db	80	;'P'
  1209  007E20  52                 	db	82	;'R'
  1210  007E21  49                 	db	73	;'I'
  1211  007E22  4E                 	db	78	;'N'
  1212  007E23  43                 	db	67	;'C'
  1213  007E24  49                 	db	73	;'I'
  1214  007E25  50                 	db	80	;'P'
  1215  007E26  41                 	db	65	;'A'
  1216  007E27  4C                 	db	76	;'L'
  1217  007E28  20                 	db	32
  1218  007E29  3A                 	db	58	;':'
  1219  007E2A  20                 	db	32
  1220  007E2B  25                 	db	37
  1221  007E2C  73                 	db	115	;'s'
  1222  007E2D  00                 	db	0
  1223  007E2E                     STR_54:
  1224  007E2E  43                 	db	67	;'C'
  1225  007E2F  4F                 	db	79	;'O'
  1226  007E30  4D                 	db	77	;'M'
  1227  007E31  42                 	db	66	;'B'
  1228  007E32  55                 	db	85	;'U'
  1229  007E33  53                 	db	83	;'S'
  1230  007E34  54                 	db	84	;'T'
  1231  007E35  41                 	db	65	;'A'
  1232  007E36  4F                 	db	79	;'O'
  1233  007E37  20                 	db	32
  1234  007E38  3A                 	db	58	;':'
  1235  007E39  20                 	db	32
  1236  007E3A  25                 	db	37
  1237  007E3B  73                 	db	115	;'s'
  1238  007E3C  00                 	db	0
  1239  007E3D                     STR_39:
  1240  007E3D  41                 	db	65	;'A'
  1241  007E3E  67                 	db	103	;'g'
  1242  007E3F  75                 	db	117	;'u'
  1243  007E40  61                 	db	97	;'a'
  1244  007E41  72                 	db	114	;'r'
  1245  007E42  64                 	db	100	;'d'
  1246  007E43  65                 	db	101	;'e'
  1247  007E44  2E                 	db	46
  1248  007E45  2E                 	db	46
  1249  007E46  2E                 	db	46
  1250  007E47  20                 	db	32
  1251  007E48  25                 	db	37
  1252  007E49  64                 	db	100	;'d'
  1253  007E4A  73                 	db	115	;'s'
  1254  007E4B  00                 	db	0
  1255  007E4C                     STR_126:
  1256  007E4C  49                 	db	73	;'I'
  1257  007E4D  6E                 	db	110	;'n'
  1258  007E4E  69                 	db	105	;'i'
  1259  007E4F  63                 	db	99	;'c'
  1260  007E50  69                 	db	105	;'i'
  1261  007E51  61                 	db	97	;'a'
  1262  007E52  72                 	db	114	;'r'
  1263  007E53  20                 	db	32
  1264  007E54  54                 	db	84	;'T'
  1265  007E55  65                 	db	101	;'e'
  1266  007E56  73                 	db	115	;'s'
  1267  007E57  74                 	db	116	;'t'
  1268  007E58  65                 	db	101	;'e'
  1269  007E59  73                 	db	115	;'s'
  1270  007E5A  00                 	db	0
  1271  007E5B                     STR_116:
  1272  007E5B  56                 	db	86	;'V'
  1273  007E5C  65                 	db	101	;'e'
  1274  007E5D  72                 	db	114	;'r'
  1275  007E5E  73                 	db	115	;'s'
  1276  007E5F  61                 	db	97	;'a'
  1277  007E60  6F                 	db	111	;'o'
  1278  007E61  20                 	db	32
  1279  007E62  53                 	db	83	;'S'
  1280  007E63  6F                 	db	111	;'o'
  1281  007E64  66                 	db	102	;'f'
  1282  007E65  74                 	db	116	;'t'
  1283  007E66  2E                 	db	46
  1284  007E67  3A                 	db	58	;':'
  1285  007E68  00                 	db	0
  1286  007E69                     STR_101:
  1287  007E69  4D                 	db	77	;'M'
  1288  007E6A  61                 	db	97	;'a'
  1289  007E6B  78                 	db	120	;'x'
  1290  007E6C  2E                 	db	46
  1291  007E6D  20                 	db	32
  1292  007E6E  50                 	db	80	;'P'
  1293  007E6F  41                 	db	65	;'A'
  1294  007E70  52                 	db	82	;'R'
  1295  007E71  54                 	db	84	;'T'
  1296  007E72  49                 	db	73	;'I'
  1297  007E73  44                 	db	68	;'D'
  1298  007E74  41                 	db	65	;'A'
  1299  007E75  3A                 	db	58	;':'
  1300  007E76  00                 	db	0
  1301  007E77                     STR_84:
  1302  007E77  50                 	db	80	;'P'
  1303  007E78  72                 	db	114	;'r'
  1304  007E79  69                 	db	105	;'i'
  1305  007E7A  6E                 	db	110	;'n'
  1306  007E7B  63                 	db	99	;'c'
  1307  007E7C  69                 	db	105	;'i'
  1308  007E7D  70                 	db	112	;'p'
  1309  007E7E  61                 	db	97	;'a'
  1310  007E7F  6C                 	db	108	;'l'
  1311  007E80  3A                 	db	58	;':'
  1312  007E81  20                 	db	32
  1313  007E82  25                 	db	37
  1314  007E83  73                 	db	115	;'s'
  1315  007E84  00                 	db	0
  1316  007E85                     STR_87:
  1317  007E85  43                 	db	67	;'C'
  1318  007E86  6F                 	db	111	;'o'
  1319  007E87  6D                 	db	109	;'m'
  1320  007E88  62                 	db	98	;'b'
  1321  007E89  75                 	db	117	;'u'
  1322  007E8A  73                 	db	115	;'s'
  1323  007E8B  74                 	db	116	;'t'
  1324  007E8C  61                 	db	97	;'a'
  1325  007E8D  6F                 	db	111	;'o'
  1326  007E8E  3A                 	db	58	;':'
  1327  007E8F  20                 	db	32
  1328  007E90  25                 	db	37
  1329  007E91  73                 	db	115	;'s'
  1330  007E92  00                 	db	0
  1331  007E93                     STR_98:
  1332  007E93  20                 	db	32
  1333  007E94  61                 	db	97	;'a'
  1334  007E95  67                 	db	103	;'g'
  1335  007E96  75                 	db	117	;'u'
  1336  007E97  61                 	db	97	;'a'
  1337  007E98  72                 	db	114	;'r'
  1338  007E99  64                 	db	100	;'d'
  1339  007E9A  65                 	db	101	;'e'
  1340  007E9B  2E                 	db	46
  1341  007E9C  2E                 	db	46
  1342  007E9D  2E                 	db	46
  1343  007E9E  20                 	db	32
  1344  007E9F  00                 	db	0
  1345  007EA0                     STR_46:
  1346  007EA0  52                 	db	82	;'R'
  1347  007EA1  65                 	db	101	;'e'
  1348  007EA2  6C                 	db	108	;'l'
  1349  007EA3  69                 	db	105	;'i'
  1350  007EA4  67                 	db	103	;'g'
  1351  007EA5  61                 	db	97	;'a'
  1352  007EA6  6E                 	db	110	;'n'
  1353  007EA7  64                 	db	100	;'d'
  1354  007EA8  6F                 	db	111	;'o'
  1355  007EA9  2E                 	db	46
  1356  007EAA  2E                 	db	46
  1357  007EAB  2E                 	db	46
  1358  007EAC  00                 	db	0
  1359  007EAD                     STR_10:
  1360  007EAD  41                 	db	65	;'A'
  1361  007EAE  54                 	db	84	;'T'
  1362  007EAF  2B                 	db	43
  1363  007EB0  43                 	db	67	;'C'
  1364  007EB1  4D                 	db	77	;'M'
  1365  007EB2  47                 	db	71	;'G'
  1366  007EB3  46                 	db	70	;'F'
  1367  007EB4  3D                 	db	61	;'='
  1368  007EB5  31                 	db	49	;'1'
  1369  007EB6  0D                 	db	13
  1370  007EB7  0A                 	db	10
  1371  007EB8  00                 	db	0
  1372  007EB9                     STR_15:
  1373  007EB9  4E                 	db	78	;'N'
  1374  007EBA  6F                 	db	111	;'o'
  1375  007EBB  76                 	db	118	;'v'
  1376  007EBC  20                 	db	32
  1377  007EBD  32                 	db	50	;'2'
  1378  007EBE  35                 	db	53	;'5'
  1379  007EBF  20                 	db	32
  1380  007EC0  32                 	db	50	;'2'
  1381  007EC1  30                 	db	48	;'0'
  1382  007EC2  31                 	db	49	;'1'
  1383  007EC3  39                 	db	57	;'9'
  1384  007EC4  00                 	db	0
  1385  007EC5                     STR_103:
  1386  007EC5  4D                 	db	77	;'M'
  1387  007EC6  61                 	db	97	;'a'
  1388  007EC7  78                 	db	120	;'x'
  1389  007EC8  2E                 	db	46
  1390  007EC9  20                 	db	32
  1391  007ECA  54                 	db	84	;'T'
  1392  007ECB  45                 	db	69	;'E'
  1393  007ECC  53                 	db	83	;'S'
  1394  007ECD  54                 	db	84	;'T'
  1395  007ECE  45                 	db	69	;'E'
  1396  007ECF  3A                 	db	58	;':'
  1397  007ED0  00                 	db	0
  1398  007ED1                     STR_36:
  1399  007ED1  4E                 	db	78	;'N'
  1400  007ED2  4F                 	db	79	;'O'
  1401  007ED3  20                 	db	32
  1402  007ED4  44                 	db	68	;'D'
  1403  007ED5  49                 	db	73	;'I'
  1404  007ED6  41                 	db	65	;'A'
  1405  007ED7  4C                 	db	76	;'L'
  1406  007ED8  54                 	db	84	;'T'
  1407  007ED9  4F                 	db	79	;'O'
  1408  007EDA  4E                 	db	78	;'N'
  1409  007EDB  45                 	db	69	;'E'
  1410  007EDC  00                 	db	0
  1411  007EDD                     STR_60:
  1412  007EDD  20                 	db	32
  1413  007EDE  2A                 	db	42
  1414  007EDF  66                 	db	102	;'f'
  1415  007EE0  61                 	db	97	;'a'
  1416  007EE1  6C                 	db	108	;'l'
  1417  007EE2  68                 	db	104	;'h'
  1418  007EE3  61                 	db	97	;'a'
  1419  007EE4  20                 	db	32
  1420  007EE5  47                 	db	71	;'G'
  1421  007EE6  53                 	db	83	;'S'
  1422  007EE7  4D                 	db	77	;'M'
  1423  007EE8  00                 	db	0
  1424  007EE9                     STR_125:
  1425  007EE9  49                 	db	73	;'I'
  1426  007EEA  4E                 	db	78	;'N'
  1427  007EEB  46                 	db	70	;'F'
  1428  007EEC  4F                 	db	79	;'O'
  1429  007EED  20                 	db	32
  1430  007EEE  56                 	db	86	;'V'
  1431  007EEF  45                 	db	69	;'E'
  1432  007EF0  52                 	db	82	;'R'
  1433  007EF1  53                 	db	83	;'S'
  1434  007EF2  41                 	db	65	;'A'
  1435  007EF3  4F                 	db	79	;'O'
  1436  007EF4  00                 	db	0
  1437  007EF5                     STR_93:
  1438  007EF5  76                 	db	118	;'v'
  1439  007EF6  65                 	db	101	;'e'
  1440  007EF7  72                 	db	114	;'r'
  1441  007EF8  73                 	db	115	;'s'
  1442  007EF9  61                 	db	97	;'a'
  1443  007EFA  6F                 	db	111	;'o'
  1444  007EFB  20                 	db	32
  1445  007EFC  2D                 	db	45
  1446  007EFD  20                 	db	32
  1447  007EFE  25                 	db	37
  1448  007EFF  73                 	db	115	;'s'
  1449  007F00  00                 	db	0
  1450  007F01                     STR_35:
  1451  007F01  41                 	db	65	;'A'
  1452  007F02  54                 	db	84	;'T'
  1453  007F03  44                 	db	68	;'D'
  1454  007F04  20                 	db	32
  1455  007F05  30                 	db	48	;'0'
  1456  007F06  25                 	db	37
  1457  007F07  73                 	db	115	;'s'
  1458  007F08  3B                 	db	59	;';'
  1459  007F09  0D                 	db	13
  1460  007F0A  0A                 	db	10
  1461  007F0B  00                 	db	0
  1462  007F0C  74                 	db	116	;'t'
  1463  007F0D  65                 	db	101	;'e'
  1464  007F0E  74                 	db	116	;'t'
  1465  007F0F  61                 	db	97	;'a'
  1466  007F10  70                 	db	112	;'p'
  1467  007F11  61                 	db	97	;'a'
  1468  007F12  20                 	db	32
  1469  007F13  25                 	db	37
  1470  007F14  64                 	db	100	;'d'
  1471  007F15  20                 	db	32
  1472  007F16  00                 	db	0
  1473  007F17                     STR_83:
  1474  007F17  23                 	db	35
  1475  007F18  25                 	db	37
  1476  007F19  30                 	db	48	;'0'
  1477  007F1A  32                 	db	50	;'2'
  1478  007F1B  64                 	db	100	;'d'
  1479  007F1C  2F                 	db	47
  1480  007F1D  25                 	db	37
  1481  007F1E  30                 	db	48	;'0'
  1482  007F1F  32                 	db	50	;'2'
  1483  007F20  64                 	db	100	;'d'
  1484  007F21  00                 	db	0
  1485  007F22                     STR_106:
  1486  007F22  47                 	db	71	;'G'
  1487  007F23  45                 	db	69	;'E'
  1488  007F24  52                 	db	82	;'R'
  1489  007F25  41                 	db	65	;'A'
  1490  007F26  4C                 	db	76	;'L'
  1491  007F27  20                 	db	32
  1492  007F28  3A                 	db	58	;':'
  1493  007F29  20                 	db	32
  1494  007F2A  25                 	db	37
  1495  007F2B  73                 	db	115	;'s'
  1496  007F2C  00                 	db	0
  1497  007F2D                     STR_48:
  1498  007F2D  4A                 	db	74	;'J'
  1499  007F2E  4F                 	db	79	;'O'
  1500  007F2F  4B                 	db	75	;'K'
  1501  007F30  45                 	db	69	;'E'
  1502  007F31  59                 	db	89	;'Y'
  1503  007F32  20                 	db	32
  1504  007F33  3A                 	db	58	;':'
  1505  007F34  20                 	db	32
  1506  007F35  25                 	db	37
  1507  007F36  73                 	db	115	;'s'
  1508  007F37  00                 	db	0
  1509  007F38                     STR_76:
  1510  007F38  41                 	db	65	;'A'
  1511  007F39  54                 	db	84	;'T'
  1512  007F3A  49                 	db	73	;'I'
  1513  007F3B  56                 	db	86	;'V'
  1514  007F3C  41                 	db	65	;'A'
  1515  007F3D  52                 	db	82	;'R'
  1516  007F3E  3A                 	db	58	;':'
  1517  007F3F  20                 	db	32
  1518  007F40  25                 	db	37
  1519  007F41  73                 	db	115	;'s'
  1520  007F42  00                 	db	0
  1521  007F43                     STR_45:
  1522  007F43  4C                 	db	76	;'L'
  1523  007F44  69                 	db	105	;'i'
  1524  007F45  67                 	db	103	;'g'
  1525  007F46  61                 	db	97	;'a'
  1526  007F47  64                 	db	100	;'d'
  1527  007F48  61                 	db	97	;'a'
  1528  007F49  2E                 	db	46
  1529  007F4A  2E                 	db	46
  1530  007F4B  2E                 	db	46
  1531  007F4C  00                 	db	0
  1532  007F4D                     STR_119:
  1533  007F4D  44                 	db	68	;'D'
  1534  007F4E  41                 	db	65	;'A'
  1535  007F4F  54                 	db	84	;'T'
  1536  007F50  41                 	db	65	;'A'
  1537  007F51  2F                 	db	47
  1538  007F52  48                 	db	72	;'H'
  1539  007F53  4F                 	db	79	;'O'
  1540  007F54  52                 	db	82	;'R'
  1541  007F55  41                 	db	65	;'A'
  1542  007F56  00                 	db	0
  1543  007F57                     STR_124:
  1544  007F57  44                 	db	68	;'D'
  1545  007F58  41                 	db	65	;'A'
  1546  007F59  54                 	db	84	;'T'
  1547  007F5A  41                 	db	65	;'A'
  1548  007F5B  4C                 	db	76	;'L'
  1549  007F5C  4F                 	db	79	;'O'
  1550  007F5D  47                 	db	71	;'G'
  1551  007F5E  45                 	db	69	;'E'
  1552  007F5F  52                 	db	82	;'R'
  1553  007F60  00                 	db	0
  1554  007F61                     STR_122:
  1555  007F61  54                 	db	84	;'T'
  1556  007F62  45                 	db	69	;'E'
  1557  007F63  4C                 	db	76	;'L'
  1558  007F64  45                 	db	69	;'E'
  1559  007F65  46                 	db	70	;'F'
  1560  007F66  4F                 	db	79	;'O'
  1561  007F67  4E                 	db	78	;'N'
  1562  007F68  45                 	db	69	;'E'
  1563  007F69  53                 	db	83	;'S'
  1564  007F6A  00                 	db	0
  1565  007F6B  74                 	db	116	;'t'
  1566  007F6C  73                 	db	115	;'s'
  1567  007F6D  69                 	db	105	;'i'
  1568  007F6E  6E                 	db	110	;'n'
  1569  007F6F  61                 	db	97	;'a'
  1570  007F70  6C                 	db	108	;'l'
  1571  007F71  20                 	db	32
  1572  007F72  25                 	db	37
  1573  007F73  64                 	db	100	;'d'
  1574  007F74  00                 	db	0
  1575  007F75                     STR_80:
  1576  007F75  4A                 	db	74	;'J'
  1577  007F76  6F                 	db	111	;'o'
  1578  007F77  6B                 	db	107	;'k'
  1579  007F78  65                 	db	101	;'e'
  1580  007F79  79                 	db	121	;'y'
  1581  007F7A  3A                 	db	58	;':'
  1582  007F7B  20                 	db	32
  1583  007F7C  25                 	db	37
  1584  007F7D  73                 	db	115	;'s'
  1585  007F7E  00                 	db	0
  1586  007F7F                     STR_3:
  1587  007F7F  41                 	db	65	;'A'
  1588  007F80  54                 	db	84	;'T'
  1589  007F81  2B                 	db	43
  1590  007F82  43                 	db	67	;'C'
  1591  007F83  53                 	db	83	;'S'
  1592  007F84  51                 	db	81	;'Q'
  1593  007F85  0D                 	db	13
  1594  007F86  0A                 	db	10
  1595  007F87  00                 	db	0
  1596  007F88  65                 	db	101	;'e'
  1597  007F89  74                 	db	116	;'t'
  1598  007F8A  61                 	db	97	;'a'
  1599  007F8B  70                 	db	112	;'p'
  1600  007F8C  61                 	db	97	;'a'
  1601  007F8D  20                 	db	32
  1602  007F8E  25                 	db	37
  1603  007F8F  64                 	db	100	;'d'
  1604  007F90  00                 	db	0
  1605  007F91                     STR_44:
  1606  007F91  42                 	db	66	;'B'
  1607  007F92  6F                 	db	111	;'o'
  1608  007F93  6D                 	db	109	;'m'
  1609  007F94  62                 	db	98	;'b'
  1610  007F95  61                 	db	97	;'a'
  1611  007F96  20                 	db	32
  1612  007F97  25                 	db	37
  1613  007F98  73                 	db	115	;'s'
  1614  007F99  00                 	db	0
  1615  007F9A                     STR_90:
  1616  007F9A  54                 	db	84	;'T'
  1617  007F9B  45                 	db	69	;'E'
  1618  007F9C  43                 	db	67	;'C'
  1619  007F9D  48                 	db	72	;'H'
  1620  007F9E  4E                 	db	78	;'N'
  1621  007F9F  4F                 	db	79	;'O'
  1622  007FA0  57                 	db	87	;'W'
  1623  007FA1  00                 	db	0
  1624  007FA2                     STR_127:
  1625  007FA2  28                 	db	40
  1626  007FA3  6E                 	db	110	;'n'
  1627  007FA4  75                 	db	117	;'u'
  1628  007FA5  6C                 	db	108	;'l'
  1629  007FA6  6C                 	db	108	;'l'
  1630  007FA7  29                 	db	41
  1631  007FA8  00                 	db	0
  1632  007FA9                     STR_21:
  1633  007FA9  41                 	db	65	;'A'
  1634  007FAA  54                 	db	84	;'T'
  1635  007FAB  48                 	db	72	;'H'
  1636  007FAC  30                 	db	48	;'0'
  1637  007FAD  0D                 	db	13
  1638  007FAE  0A                 	db	10
  1639  007FAF  00                 	db	0
  1640  007FB0                     STR_6:
  1641  007FB0  2B                 	db	43
  1642  007FB1  43                 	db	67	;'C'
  1643  007FB2  53                 	db	83	;'S'
  1644  007FB3  51                 	db	81	;'Q'
  1645  007FB4  3A                 	db	58	;':'
  1646  007FB5  20                 	db	32
  1647  007FB6  00                 	db	0
  1648  007FB7                     STR_95:
  1649  007FB7  54                 	db	84	;'T'
  1650  007FB8  31                 	db	49	;'1'
  1651  007FB9  3A                 	db	58	;':'
  1652  007FBA  20                 	db	32
  1653  007FBB  25                 	db	37
  1654  007FBC  73                 	db	115	;'s'
  1655  007FBD  00                 	db	0
  1656  007FBE                     STR_96:
  1657  007FBE  54                 	db	84	;'T'
  1658  007FBF  32                 	db	50	;'2'
  1659  007FC0  3A                 	db	58	;':'
  1660  007FC1  20                 	db	32
  1661  007FC2  25                 	db	37
  1662  007FC3  73                 	db	115	;'s'
  1663  007FC4  00                 	db	0
  1664  007FC5                     STR_71:
  1665  007FC5  48                 	db	72	;'H'
  1666  007FC6  4F                 	db	79	;'O'
  1667  007FC7  52                 	db	82	;'R'
  1668  007FC8  41                 	db	65	;'A'
  1669  007FC9  3A                 	db	58	;':'
  1670  007FCA  00                 	db	0
  1671  007FCB                     STR_69:
  1672  007FCB  44                 	db	68	;'D'
  1673  007FCC  41                 	db	65	;'A'
  1674  007FCD  54                 	db	84	;'T'
  1675  007FCE  41                 	db	65	;'A'
  1676  007FCF  3A                 	db	58	;':'
  1677  007FD0  00                 	db	0
  1678  007FD1                     STR_28:
  1679  007FD1  46                 	db	70	;'F'
  1680  007FD2  41                 	db	65	;'A'
  1681  007FD3  4C                 	db	76	;'L'
  1682  007FD4  48                 	db	72	;'H'
  1683  007FD5  41                 	db	65	;'A'
  1684  007FD6  00                 	db	0
  1685  007FD7                     STR_17:
  1686  007FD7  45                 	db	69	;'E'
  1687  007FD8  52                 	db	82	;'R'
  1688  007FD9  52                 	db	82	;'R'
  1689  007FDA  4F                 	db	79	;'O'
  1690  007FDB  52                 	db	82	;'R'
  1691  007FDC  00                 	db	0
  1692  007FDD                     STR_4:
  1693  007FDD  41                 	db	65	;'A'
  1694  007FDE  54                 	db	84	;'T'
  1695  007FDF  0D                 	db	13
  1696  007FE0  0A                 	db	10
  1697  007FE1  00                 	db	0
  1698  007FE2                     STR_50:
  1699  007FE2  45                 	db	69	;'E'
  1700  007FE3  52                 	db	82	;'R'
  1701  007FE4  52                 	db	82	;'R'
  1702  007FE5  4F                 	db	79	;'O'
  1703  007FE6  00                 	db	0
  1704  007FE7                     STR_1:
  1705  007FE7  25                 	db	37
  1706  007FE8  73                 	db	115	;'s'
  1707  007FE9  25                 	db	37
  1708  007FEA  63                 	db	99	;'c'
  1709  007FEB  00                 	db	0
  1710  007FEC                     STR_102:
  1711  007FEC  25                 	db	37
  1712  007FED  33                 	db	51	;'3'
  1713  007FEE  64                 	db	100	;'d'
  1714  007FEF  73                 	db	115	;'s'
  1715  007FF0  00                 	db	0
  1716  007FF1                     STR_78:
  1717  007FF1  53                 	db	83	;'S'
  1718  007FF2  69                 	db	105	;'i'
  1719  007FF3  6D                 	db	109	;'m'
  1720  007FF4  00                 	db	0
  1721  007FF5                     STR_77:
  1722  007FF5  4E                 	db	78	;'N'
  1723  007FF6  61                 	db	97	;'a'
  1724  007FF7  6F                 	db	111	;'o'
  1725  007FF8  00                 	db	0
  1726  007FF9                     STR_5:
  1727  007FF9  4F                 	db	79	;'O'
  1728  007FFA  4B                 	db	75	;'K'
  1729  007FFB  00                 	db	0
  1730  007FFC                     STR_13:
  1731  007FFC  3E                 	db	62	;'>'
  1732  007FFD  00                 	db	0
  1733  0000                     
  1734                           ; #config settings
  1735  007FFE  00                 	db	0	; dummy byte at the end
  1736  0000                     
  1737                           	psect	cinit
  1738  00763C                     __pcinit:
  1739                           	opt stack 0
  1740  00763C                     start_initialization:
  1741                           	opt stack 0
  1742  00763C                     __initialization:
  1743                           	opt stack 0
  1744                           
  1745                           ; Initialize objects allocated to BANK1 (4 bytes)
  1746                           ; load TBLPTR registers with __pidataBANK1
  1747  00763C  0EF2               	movlw	low __pidataBANK1
  1748  00763E  6EF6               	movwf	tblptrl,c
  1749  007640  0E6B               	movlw	high __pidataBANK1
  1750  007642  6EF7               	movwf	tblptrh,c
  1751  007644  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1752  007646  6EF8               	movwf	tblptru,c
  1753  007648  EE01  F0BC         	lfsr	0,__pdataBANK1
  1754  00764C  EE10 F004          	lfsr	1,4
  1755  007650                     copy_data0:
  1756  007650  0009               	tblrd		*+
  1757  007652  CFF5 FFEE          	movff	tablat,postinc0
  1758  007656  50E5               	movf	postdec1,w,c
  1759  007658  50E1               	movf	fsr1l,w,c
  1760  00765A  E1FA               	bnz	copy_data0
  1761                           
  1762                           ; Initialize objects allocated to BANK0 (8 bytes)
  1763                           ; load TBLPTR registers with __pidataBANK0
  1764  00765C  0EF6               	movlw	low __pidataBANK0
  1765  00765E  6EF6               	movwf	tblptrl,c
  1766  007660  0E6B               	movlw	high __pidataBANK0
  1767  007662  6EF7               	movwf	tblptrh,c
  1768  007664  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1769  007666  6EF8               	movwf	tblptru,c
  1770  007668  EE00  F0F8         	lfsr	0,__pdataBANK0
  1771  00766C  EE10 F008          	lfsr	1,8
  1772  007670                     copy_data1:
  1773  007670  0009               	tblrd		*+
  1774  007672  CFF5 FFEE          	movff	tablat,postinc0
  1775  007676  50E5               	movf	postdec1,w,c
  1776  007678  50E1               	movf	fsr1l,w,c
  1777  00767A  E1FA               	bnz	copy_data1
  1778                           
  1779                           ; Clear objects allocated to BANK1 (188 bytes)
  1780  00767C  EE01  F000         	lfsr	0,__pbssBANK1
  1781  007680  0EBC               	movlw	188
  1782  007682                     clear_0:
  1783  007682  6AEE               	clrf	postinc0,c
  1784  007684  06E8               	decf	wreg,f,c
  1785  007686  E1FD               	bnz	clear_0
  1786                           
  1787                           ; Clear objects allocated to BANK0 (29 bytes)
  1788  007688  EE00  F0DB         	lfsr	0,__pbssBANK0
  1789  00768C  0E1D               	movlw	29
  1790  00768E                     clear_1:
  1791  00768E  6AEE               	clrf	postinc0,c
  1792  007690  06E8               	decf	wreg,f,c
  1793  007692  E1FD               	bnz	clear_1
  1794                           
  1795                           ; Clear objects allocated to COMRAM (59 bytes)
  1796  007694  EE00  F044         	lfsr	0,__pbssCOMRAM
  1797  007698  0E3B               	movlw	59
  1798  00769A                     clear_2:
  1799  00769A  6AEE               	clrf	postinc0,c
  1800  00769C  06E8               	decf	wreg,f,c
  1801  00769E  E1FD               	bnz	clear_2
  1802  0076A0                     end_of_initialization:
  1803                           	opt stack 0
  1804  0076A0                     __end_of__initialization:
  1805                           	opt stack 0
  1806  0076A0  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1807  0076A2  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1808  0076A4  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1809  0076A6  6EF8               	movwf	tblptru,c
  1810  0076A8  0100               	movlb	0
  1811  0076AA  EFFA  F006         	goto	_main	;jump to C main() function
  1812                           tblptru	equ	0xFF8
  1813                           tblptrh	equ	0xFF7
  1814                           tblptrl	equ	0xFF6
  1815                           tablat	equ	0xFF5
  1816                           postinc0	equ	0xFEE
  1817                           wreg	equ	0xFE8
  1818                           postdec1	equ	0xFE5
  1819                           fsr1l	equ	0xFE1
  1820                           
  1821                           	psect	bssCOMRAM
  1822  000044                     __pbssCOMRAM:
  1823                           	opt stack 0
  1824  000044                     _shift:
  1825                           	opt stack 0
  1826  000044                     	ds	8
  1827  00004C                     __tensao:
  1828                           	opt stack 0
  1829  00004C                     	ds	3
  1830  00004F                     _horimetro:
  1831                           	opt stack 0
  1832  00004F                     	ds	2
  1833  000051                     _etapaComunicacao:
  1834                           	opt stack 0
  1835  000051                     	ds	2
  1836  000053                     _dtl_posi_visualizar:
  1837                           	opt stack 0
  1838  000053                     	ds	1
  1839  000054                     _totalLogs:
  1840                           	opt stack 0
  1841  000054                     	ds	1
  1842  000055                     _dtl_carregar_log:
  1843                           	opt stack 0
  1844  000055                     	ds	1
  1845  000056                     _dtl_estacionaria:
  1846                           	opt stack 0
  1847  000056                     	ds	1
  1848  000057                     _dtl_principal:
  1849                           	opt stack 0
  1850  000057                     	ds	1
  1851  000058                     _dtl_jockey:
  1852                           	opt stack 0
  1853  000058                     	ds	1
  1854  000059                     _dtl_min:
  1855                           	opt stack 0
  1856  000059                     	ds	1
  1857  00005A                     _dtl_hora:
  1858                           	opt stack 0
  1859  00005A                     	ds	1
  1860  00005B                     _dtl_ano:
  1861                           	opt stack 0
  1862  00005B                     	ds	1
  1863  00005C                     _dtl_mes:
  1864                           	opt stack 0
  1865  00005C                     	ds	1
  1866  00005D                     _dtl_dia:
  1867                           	opt stack 0
  1868  00005D                     	ds	1
  1869  00005E                     __b_ok:
  1870                           	opt stack 0
  1871  00005E                     	ds	1
  1872  00005F                     _flag_b_ok:
  1873                           	opt stack 0
  1874  00005F                     	ds	1
  1875  000060                     __b_mais:
  1876                           	opt stack 0
  1877  000060                     	ds	1
  1878  000061                     _flag_b_mais:
  1879                           	opt stack 0
  1880  000061                     	ds	1
  1881  000062                     __b_menos:
  1882                           	opt stack 0
  1883  000062                     	ds	1
  1884  000063                     _flag_b_menos:
  1885                           	opt stack 0
  1886  000063                     	ds	1
  1887  000064                     __b_esc:
  1888                           	opt stack 0
  1889  000064                     	ds	1
  1890  000065                     _flag_b_esc:
  1891                           	opt stack 0
  1892  000065                     	ds	1
  1893  000066                     _cbf:
  1894                           	opt stack 0
  1895  000066                     	ds	1
  1896  000067                     _blinkk:
  1897                           	opt stack 0
  1898  000067                     	ds	1
  1899  000068                     _ajst_rtc:
  1900                           	opt stack 0
  1901  000068                     	ds	1
  1902  000069                     _tela_menu_posi:
  1903                           	opt stack 0
  1904  000069                     	ds	1
  1905  00006A                     _sub_menu_posi:
  1906                           	opt stack 0
  1907  00006A                     	ds	1
  1908  00006B                     _tempo_limite_teste_estacionaria:
  1909                           	opt stack 0
  1910  00006B                     	ds	1
  1911  00006C                     _tempo_limite_partida:
  1912                           	opt stack 0
  1913  00006C                     	ds	1
  1914  00006D                     _tempo_partida:
  1915                           	opt stack 0
  1916  00006D                     	ds	1
  1917  00006E                     _qtd_leitura:
  1918                           	opt stack 0
  1919  00006E                     	ds	1
  1920  00006F                     __sec_aux:
  1921                           	opt stack 0
  1922  00006F                     	ds	1
  1923  000070                     __sec_partida:
  1924                           	opt stack 0
  1925  000070                     	ds	1
  1926  000071                     _base_sec:
  1927                           	opt stack 0
  1928  000071                     	ds	1
  1929  000072                     _etapaTesteBombas:
  1930                           	opt stack 0
  1931  000072                     	ds	1
  1932  000073                     _habilitaTesteAutomatico:
  1933                           	opt stack 0
  1934  000073                     	ds	1
  1935  000074                     _flagErroTransdutor:
  1936                           	opt stack 0
  1937  000074                     	ds	1
  1938  000075                     _flagTexto:
  1939                           	opt stack 0
  1940  000075                     	ds	1
  1941  000076                     _timerTrocarTextoLcd:
  1942                           	opt stack 0
  1943  000076                     	ds	1
  1944  000077                     _tentativasVerificarGSM:
  1945                           	opt stack 0
  1946  000077                     	ds	1
  1947  000078                     _rtc:
  1948                           	opt stack 0
  1949  000078                     	ds	7
  1950                           tblptru	equ	0xFF8
  1951                           tblptrh	equ	0xFF7
  1952                           tblptrl	equ	0xFF6
  1953                           tablat	equ	0xFF5
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           fsr1l	equ	0xFE1
  1958                           
  1959                           	psect	bssBANK0
  1960  0000DB                     __pbssBANK0:
  1961                           	opt stack 0
  1962  0000DB                     _timerTesteBombas:
  1963                           	opt stack 0
  1964  0000DB                     	ds	2
  1965  0000DD                     _ajust_tel:
  1966                           	opt stack 0
  1967  0000DD                     	ds	1
  1968  0000DE                     _tel_posi:
  1969                           	opt stack 0
  1970  0000DE                     	ds	1
  1971  0000DF                     __menu_posi:
  1972                           	opt stack 0
  1973  0000DF                     	ds	1
  1974  0000E0                     _menu_posi:
  1975                           	opt stack 0
  1976  0000E0                     	ds	1
  1977  0000E1                     _option_posi:
  1978                           	opt stack 0
  1979  0000E1                     	ds	1
  1980  0000E2                     _sp_estacionaria:
  1981                           	opt stack 0
  1982  0000E2                     	ds	1
  1983  0000E3                     _sp_principal:
  1984                           	opt stack 0
  1985  0000E3                     	ds	1
  1986  0000E4                     _sp_jockey:
  1987                           	opt stack 0
  1988  0000E4                     	ds	1
  1989  0000E5                     _sp_pressao_rede:
  1990                           	opt stack 0
  1991  0000E5                     	ds	1
  1992  0000E6                     _tempo_limite_estacionaria:
  1993                           	opt stack 0
  1994  0000E6                     	ds	1
  1995  0000E7                     _horario_de_teste:
  1996                           	opt stack 0
  1997  0000E7                     	ds	1
  1998  0000E8                     _dias_restante_teste:
  1999                           	opt stack 0
  2000  0000E8                     	ds	1
  2001  0000E9                     _intervalo_teste_dia:
  2002                           	opt stack 0
  2003  0000E9                     	ds	1
  2004  0000EA                     __ano:
  2005                           	opt stack 0
  2006  0000EA                     	ds	1
  2007  0000EB                     __mes:
  2008                           	opt stack 0
  2009  0000EB                     	ds	1
  2010  0000EC                     __dia:
  2011                           	opt stack 0
  2012  0000EC                     	ds	1
  2013  0000ED                     __hor:
  2014                           	opt stack 0
  2015  0000ED                     	ds	1
  2016  0000EE                     __min:
  2017                           	opt stack 0
  2018  0000EE                     	ds	1
  2019  0000EF                     __sec:
  2020                           	opt stack 0
  2021  0000EF                     	ds	1
  2022  0000F0                     _flagEstacionariaLigada:
  2023                           	opt stack 0
  2024  0000F0                     	ds	1
  2025  0000F1                     _executandoTeste:
  2026                           	opt stack 0
  2027  0000F1                     	ds	1
  2028  0000F2                     _ocorrendoIncendio:
  2029                           	opt stack 0
  2030  0000F2                     	ds	1
  2031  0000F3                     _codigoErro:
  2032                           	opt stack 0
  2033  0000F3                     	ds	1
  2034  0000F4                     _gsmOcupado:
  2035                           	opt stack 0
  2036  0000F4                     	ds	1
  2037  0000F5                     _timerEtapaComunicacao:
  2038                           	opt stack 0
  2039  0000F5                     	ds	1
  2040  0000F6                     _timerReenvioSMS:
  2041                           	opt stack 0
  2042  0000F6                     	ds	1
  2043  0000F7                     _telefoneSelecionado:
  2044                           	opt stack 0
  2045  0000F7                     	ds	1
  2046                           tblptru	equ	0xFF8
  2047                           tblptrh	equ	0xFF7
  2048                           tblptrl	equ	0xFF6
  2049                           tablat	equ	0xFF5
  2050                           postinc0	equ	0xFEE
  2051                           wreg	equ	0xFE8
  2052                           postdec1	equ	0xFE5
  2053                           fsr1l	equ	0xFE1
  2054                           
  2055                           	psect	dataBANK0
  2056  0000F8                     __pdataBANK0:
  2057                           	opt stack 0
  2058  0000F8                     _pressao:
  2059                           	opt stack 0
  2060  0000F8                     	ds	2
  2061  0000FA                     _dtl_posicao:
  2062                           	opt stack 0
  2063  0000FA                     	ds	1
  2064  0000FB                     _status_estacionaria:
  2065                           	opt stack 0
  2066  0000FB                     	ds	1
  2067  0000FC                     _status_principal:
  2068                           	opt stack 0
  2069  0000FC                     	ds	1
  2070  0000FD                     _status_jockey:
  2071                           	opt stack 0
  2072  0000FD                     	ds	1
  2073  0000FE                     _timerVerificarSinal:
  2074                           	opt stack 0
  2075  0000FE                     	ds	1
  2076  0000FF                     _intensidadeSinal:
  2077                           	opt stack 0
  2078  0000FF                     	ds	1
  2079                           tblptru	equ	0xFF8
  2080                           tblptrh	equ	0xFF7
  2081                           tblptrl	equ	0xFF6
  2082                           tablat	equ	0xFF5
  2083                           postinc0	equ	0xFEE
  2084                           wreg	equ	0xFE8
  2085                           postdec1	equ	0xFE5
  2086                           fsr1l	equ	0xFE1
  2087                           
  2088                           	psect	bssBANK1
  2089  000100                     __pbssBANK1:
  2090                           	opt stack 0
  2091  000100                     _bufferSerial:
  2092                           	opt stack 0
  2093  000100                     	ds	60
  2094  00013C                     _line4:
  2095                           	opt stack 0
  2096  00013C                     	ds	21
  2097  000151                     _line3:
  2098                           	opt stack 0
  2099  000151                     	ds	21
  2100  000166                     _line2:
  2101                           	opt stack 0
  2102  000166                     	ds	21
  2103  00017B                     _line1:
  2104                           	opt stack 0
  2105  00017B                     	ds	21
  2106  000190                     _bufferAUX:
  2107                           	opt stack 0
  2108  000190                     	ds	20
  2109  0001A4                     _tel2:
  2110                           	opt stack 0
  2111  0001A4                     	ds	12
  2112  0001B0                     _tel1:
  2113                           	opt stack 0
  2114  0001B0                     	ds	12
  2115                           tblptru	equ	0xFF8
  2116                           tblptrh	equ	0xFF7
  2117                           tblptrl	equ	0xFF6
  2118                           tablat	equ	0xFF5
  2119                           postinc0	equ	0xFEE
  2120                           wreg	equ	0xFE8
  2121                           postdec1	equ	0xFE5
  2122                           fsr1l	equ	0xFE1
  2123                           
  2124                           	psect	dataBANK1
  2125  0001BC                     __pdataBANK1:
  2126                           	opt stack 0
  2127  0001BC                     intToFloatStr@F2544:
  2128                           	opt stack 0
  2129  0001BC                     	ds	4
  2130                           tblptru	equ	0xFF8
  2131                           tblptrh	equ	0xFF7
  2132                           tblptrl	equ	0xFF6
  2133                           tablat	equ	0xFF5
  2134                           postinc0	equ	0xFEE
  2135                           wreg	equ	0xFE8
  2136                           postdec1	equ	0xFE5
  2137                           fsr1l	equ	0xFE1
  2138                           
  2139                           	psect	cstackBANK0
  2140  000080                     __pcstackBANK0:
  2141                           	opt stack 0
  2142  000080                     ??_isdigit:
  2143  000080                     ??_setShiftREG:
  2144  000080                     ??_I2C_Wait:
  2145  000080                     ?_strlen:
  2146                           	opt stack 0
  2147  000080                     ?_strchr:
  2148                           	opt stack 0
  2149  000080                     ?___wmul:
  2150                           	opt stack 0
  2151  000080                     ?___awdiv:
  2152                           	opt stack 0
  2153  000080                     ?___awmod:
  2154                           	opt stack 0
  2155  000080                     ?___lwdiv:
  2156                           	opt stack 0
  2157  000080                     ?___lldiv:
  2158                           	opt stack 0
  2159  000080                     putch@c:
  2160                           	opt stack 0
  2161  000080                     clearShiftREG@i:
  2162                           	opt stack 0
  2163  000080                     btPress@bt:
  2164                           	opt stack 0
  2165  000080                     Lcd_Port@a:
  2166                           	opt stack 0
  2167  000080                     BCDtoDEC@val:
  2168                           	opt stack 0
  2169  000080                     writeChar@hex:
  2170                           	opt stack 0
  2171  000080                     blink@line:
  2172                           	opt stack 0
  2173  000080                     delay@x:
  2174                           	opt stack 0
  2175  000080                     ___wmul@multiplier:
  2176                           	opt stack 0
  2177  000080                     ___awdiv@dividend:
  2178                           	opt stack 0
  2179  000080                     ___awmod@dividend:
  2180                           	opt stack 0
  2181  000080                     ___lwdiv@dividend:
  2182                           	opt stack 0
  2183  000080                     memset@p1:
  2184                           	opt stack 0
  2185  000080                     strlen@s:
  2186                           	opt stack 0
  2187  000080                     strchr@ptr:
  2188                           	opt stack 0
  2189  000080                     ___lldiv@dividend:
  2190                           	opt stack 0
  2191                           
  2192                           ; 4 bytes @ 0x0
  2193  000080                     	ds	1
  2194  000081                     ??_Lcd_Cmd:
  2195  000081                     ?_I2C_Read:
  2196                           	opt stack 0
  2197  000081                     setShiftREG@i:
  2198                           	opt stack 0
  2199  000081                     Lcd_Write_Char@tempp:
  2200                           	opt stack 0
  2201  000081                     _isdigit$1872:
  2202                           	opt stack 0
  2203  000081                     I2C_Read@a:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x1
  2207  000081                     	ds	1
  2208  000082                     ??_delay:
  2209  000082                     ??_strlen:
  2210  000082                     Lcd_Cmd@a:
  2211                           	opt stack 0
  2212  000082                     Lcd_Write_Char@y:
  2213                           	opt stack 0
  2214  000082                     blink@start:
  2215                           	opt stack 0
  2216  000082                     isdigit@c:
  2217                           	opt stack 0
  2218  000082                     ___wmul@multiplicand:
  2219                           	opt stack 0
  2220  000082                     ___awdiv@divisor:
  2221                           	opt stack 0
  2222  000082                     ___awmod@divisor:
  2223                           	opt stack 0
  2224  000082                     ___lwdiv@divisor:
  2225                           	opt stack 0
  2226  000082                     memset@c:
  2227                           	opt stack 0
  2228  000082                     strchr@chr:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x2
  2232  000082                     	ds	1
  2233  000083                     ??_Lcd_Init:
  2234  000083                     partidaBombaEstacionaria@acao:
  2235                           	opt stack 0
  2236  000083                     Lcd_Set_Cursor@b:
  2237                           	opt stack 0
  2238  000083                     Lcd_Write_Char@a:
  2239                           	opt stack 0
  2240  000083                     blink@end:
  2241                           	opt stack 0
  2242  000083                     I2C_Read@temp:
  2243                           	opt stack 0
  2244                           
  2245                           ; 2 bytes @ 0x3
  2246  000083                     	ds	1
  2247  000084                     ??_criarCaracteresCGRAM:
  2248  000084                     Lcd_Set_Cursor@a:
  2249                           	opt stack 0
  2250  000084                     blink@i:
  2251                           	opt stack 0
  2252  000084                     ___awdiv@counter:
  2253                           	opt stack 0
  2254  000084                     ___awmod@counter:
  2255                           	opt stack 0
  2256  000084                     Lcd_Write_String@a:
  2257                           	opt stack 0
  2258  000084                     ___wmul@product:
  2259                           	opt stack 0
  2260  000084                     ___lwdiv@quotient:
  2261                           	opt stack 0
  2262  000084                     memset@n:
  2263                           	opt stack 0
  2264  000084                     strlen@cp:
  2265                           	opt stack 0
  2266  000084                     ___lldiv@divisor:
  2267                           	opt stack 0
  2268                           
  2269                           ; 4 bytes @ 0x4
  2270  000084                     	ds	1
  2271  000085                     Lcd_Set_Cursor@z:
  2272                           	opt stack 0
  2273  000085                     ___awdiv@sign:
  2274                           	opt stack 0
  2275  000085                     ___awmod@sign:
  2276                           	opt stack 0
  2277                           
  2278                           ; 1 bytes @ 0x5
  2279  000085                     	ds	1
  2280  000086                     ?_strncmp:
  2281                           	opt stack 0
  2282  000086                     Lcd_Set_Cursor@y:
  2283                           	opt stack 0
  2284  000086                     Lcd_Write_String@i:
  2285                           	opt stack 0
  2286  000086                     ___lwdiv@counter:
  2287                           	opt stack 0
  2288  000086                     ___awdiv@quotient:
  2289                           	opt stack 0
  2290  000086                     memset@p:
  2291                           	opt stack 0
  2292  000086                     strncmp@s1:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x6
  2296  000086                     	ds	1
  2297  000087                     ?___lwmod:
  2298                           	opt stack 0
  2299  000087                     Lcd_Set_Cursor@temp:
  2300                           	opt stack 0
  2301  000087                     ___lwmod@dividend:
  2302                           	opt stack 0
  2303  000087                     criarCaracteresCGRAM@character:
  2304                           	opt stack 0
  2305                           
  2306                           ; 48 bytes @ 0x7
  2307  000087                     	ds	1
  2308  000088                     DECtoBCD@val:
  2309                           	opt stack 0
  2310  000088                     atualizarLCD@line1:
  2311                           	opt stack 0
  2312  000088                     strncmp@s2:
  2313                           	opt stack 0
  2314  000088                     ___lldiv@quotient:
  2315                           	opt stack 0
  2316                           
  2317                           ; 4 bytes @ 0x8
  2318  000088                     	ds	1
  2319  000089                     DECtoBCD@res:
  2320                           	opt stack 0
  2321  000089                     ___lwmod@divisor:
  2322                           	opt stack 0
  2323                           
  2324                           ; 2 bytes @ 0x9
  2325  000089                     	ds	1
  2326  00008A                     atualizarLCD@line2:
  2327                           	opt stack 0
  2328  00008A                     I2C_Write@d:
  2329                           	opt stack 0
  2330  00008A                     strncmp@len:
  2331                           	opt stack 0
  2332                           
  2333                           ; 2 bytes @ 0xA
  2334  00008A                     	ds	1
  2335  00008B                     ___lwmod@counter:
  2336                           	opt stack 0
  2337                           
  2338                           ; 1 bytes @ 0xB
  2339  00008B                     	ds	1
  2340  00008C                     ??_strncmp:
  2341  00008C                     ?__doprnt:
  2342                           	opt stack 0
  2343  00008C                     writeEEPROM_ext@data:
  2344                           	opt stack 0
  2345  00008C                     readEEPROM_ext@adress:
  2346                           	opt stack 0
  2347  00008C                     ___lldiv@counter:
  2348                           	opt stack 0
  2349  00008C                     setDS1307TimeDate@ptrToUserVal:
  2350                           	opt stack 0
  2351  00008C                     getDS1307TimeDate@ptrToUserVal:
  2352                           	opt stack 0
  2353  00008C                     atualizarLCD@line3:
  2354                           	opt stack 0
  2355  00008C                     __doprnt@pb:
  2356                           	opt stack 0
  2357                           
  2358                           ; 2 bytes @ 0xC
  2359  00008C                     	ds	1
  2360  00008D                     writeEEPROM_ext@adress:
  2361                           	opt stack 0
  2362  00008D                     readEEPROM_ext@data:
  2363                           	opt stack 0
  2364  00008D                     I2C_Master_Init@c:
  2365                           	opt stack 0
  2366                           
  2367                           ; 4 bytes @ 0xD
  2368  00008D                     	ds	1
  2369  00008E                     ??_setDS1307TimeDate:
  2370  00008E                     ??_salvarLOG:
  2371  00008E                     ?_readEEPROM16_ext:
  2372                           	opt stack 0
  2373  00008E                     atualizarLCD@line4:
  2374                           	opt stack 0
  2375  00008E                     __doprnt@f:
  2376                           	opt stack 0
  2377                           
  2378                           ; 2 bytes @ 0xE
  2379  00008E                     	ds	1
  2380  00008F                     ?_strstr:
  2381                           	opt stack 0
  2382  00008F                     salvarLOG@ultimoLogSalvo:
  2383                           	opt stack 0
  2384  00008F                     strstr@s1:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0xF
  2388  00008F                     	ds	1
  2389  000090                     ??_readEEPROM16_ext:
  2390  000090                     atualizarLCD@i:
  2391                           	opt stack 0
  2392  000090                     __doprnt@ap:
  2393                           	opt stack 0
  2394                           
  2395                           ; 2 bytes @ 0x10
  2396  000090                     	ds	1
  2397  000091                     ??_I2C_Master_Init:
  2398  000091                     readEEPROM16_ext@data:
  2399                           	opt stack 0
  2400  000091                     strstr@s2:
  2401                           	opt stack 0
  2402                           
  2403                           ; 2 bytes @ 0x11
  2404  000091                     	ds	1
  2405  000092                     ??__doprnt:
  2406                           
  2407                           ; 1 bytes @ 0x12
  2408  000092                     	ds	1
  2409  000093                     readEEPROM16_ext@adress:
  2410                           	opt stack 0
  2411  000093                     aguardaBuffer@str:
  2412                           	opt stack 0
  2413                           
  2414                           ; 2 bytes @ 0x13
  2415  000093                     	ds	1
  2416  000094                     lerParametros@verifica_memoria_nova:
  2417                           	opt stack 0
  2418                           
  2419                           ; 1 bytes @ 0x14
  2420  000094                     	ds	1
  2421  000095                     lerParametros@i:
  2422                           	opt stack 0
  2423                           
  2424                           ; 1 bytes @ 0x15
  2425  000095                     	ds	1
  2426  000096                     __doprnt@prec:
  2427                           	opt stack 0
  2428                           
  2429                           ; 1 bytes @ 0x16
  2430  000096                     	ds	1
  2431  000097                     __doprnt@val:
  2432                           	opt stack 0
  2433                           
  2434                           ; 2 bytes @ 0x17
  2435  000097                     	ds	2
  2436  000099                     __doprnt@len:
  2437                           	opt stack 0
  2438                           
  2439                           ; 2 bytes @ 0x19
  2440  000099                     	ds	2
  2441  00009B                     __doprnt@flag:
  2442                           	opt stack 0
  2443                           
  2444                           ; 1 bytes @ 0x1B
  2445  00009B                     	ds	1
  2446  00009C                     __doprnt@cp:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x1C
  2450  00009C                     	ds	2
  2451  00009E                     __doprnt@width:
  2452                           	opt stack 0
  2453                           
  2454                           ; 2 bytes @ 0x1E
  2455  00009E                     	ds	2
  2456  0000A0                     __doprnt@c:
  2457                           	opt stack 0
  2458                           
  2459                           ; 1 bytes @ 0x20
  2460  0000A0                     	ds	1
  2461  0000A1                     ?_sprintf:
  2462                           	opt stack 0
  2463  0000A1                     ?_printf:
  2464                           	opt stack 0
  2465  0000A1                     printf@f:
  2466                           	opt stack 0
  2467  0000A1                     sprintf@wh:
  2468                           	opt stack 0
  2469                           
  2470                           ; 2 bytes @ 0x21
  2471  0000A1                     	ds	2
  2472  0000A3                     sprintf@f:
  2473                           	opt stack 0
  2474                           
  2475                           ; 2 bytes @ 0x23
  2476  0000A3                     	ds	12
  2477  0000AF                     sprintf@ap:
  2478                           	opt stack 0
  2479                           
  2480                           ; 2 bytes @ 0x2F
  2481  0000AF                     	ds	2
  2482  0000B1                     sprintf@pb:
  2483                           	opt stack 0
  2484                           
  2485                           ; 4 bytes @ 0x31
  2486  0000B1                     	ds	4
  2487  0000B5                     ??_tela_testeBombas:
  2488  0000B5                     ??_dataLoger:
  2489  0000B5                     ?_intToFloatStr:
  2490                           	opt stack 0
  2491  0000B5                     ?_getSerial:
  2492                           	opt stack 0
  2493  0000B5                     getSerial@str:
  2494                           	opt stack 0
  2495  0000B5                     printf@ap:
  2496                           	opt stack 0
  2497                           
  2498                           ; 2 bytes @ 0x35
  2499  0000B5                     	ds	2
  2500  0000B7                     getSerial@end:
  2501                           	opt stack 0
  2502  0000B7                     _criarCaracteresCGRAM$1380:
  2503                           	opt stack 0
  2504  0000B7                     _tela_testeBombas$1424:
  2505                           	opt stack 0
  2506  0000B7                     intToFloatStr@end:
  2507                           	opt stack 0
  2508  0000B7                     printf@pb:
  2509                           	opt stack 0
  2510                           
  2511                           ; 4 bytes @ 0x37
  2512  0000B7                     	ds	1
  2513  0000B8                     ??_getSerial:
  2514                           
  2515                           ; 1 bytes @ 0x38
  2516  0000B8                     	ds	1
  2517  0000B9                     criarCaracteresCGRAM@k:
  2518                           	opt stack 0
  2519                           
  2520                           ; 1 bytes @ 0x39
  2521  0000B9                     	ds	1
  2522  0000BA                     criarCaracteresCGRAM@j:
  2523                           	opt stack 0
  2524  0000BA                     getSerial@length:
  2525                           	opt stack 0
  2526  0000BA                     _dataLoger$1443:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x3A
  2530  0000BA                     	ds	1
  2531  0000BB                     ??_comunicarTeste:
  2532  0000BB                     ??_enviaSMS:
  2533  0000BB                     criarCaracteresCGRAM@i:
  2534                           	opt stack 0
  2535  0000BB                     intToFloatStr@conv:
  2536                           	opt stack 0
  2537                           
  2538                           ; 4 bytes @ 0x3B
  2539  0000BB                     	ds	1
  2540  0000BC                     getSerial@i:
  2541                           	opt stack 0
  2542  0000BC                     _dataLoger$1449:
  2543                           	opt stack 0
  2544                           
  2545                           ; 2 bytes @ 0x3C
  2546  0000BC                     	ds	1
  2547  0000BD                     getSerial@ret:
  2548                           	opt stack 0
  2549  0000BD                     _comunicarTeste$1193:
  2550                           	opt stack 0
  2551  0000BD                     _enviaSMS$1208:
  2552                           	opt stack 0
  2553                           
  2554                           ; 2 bytes @ 0x3D
  2555  0000BD                     	ds	1
  2556  0000BE                     _dataLoger$1454:
  2557                           	opt stack 0
  2558                           
  2559                           ; 2 bytes @ 0x3E
  2560  0000BE                     	ds	1
  2561  0000BF                     ??_configuraTelefones:
  2562  0000BF                     ?_atoi:
  2563                           	opt stack 0
  2564  0000BF                     intToFloatStr@valor:
  2565                           	opt stack 0
  2566  0000BF                     _enviaSMS$1221:
  2567                           	opt stack 0
  2568  0000BF                     atoi@s:
  2569                           	opt stack 0
  2570                           
  2571                           ; 2 bytes @ 0x3F
  2572  0000BF                     	ds	1
  2573  0000C0                     dataLoger@logs:
  2574                           	opt stack 0
  2575  0000C0                     intToFloatStr@pr:
  2576                           	opt stack 0
  2577                           
  2578                           ; 2 bytes @ 0x40
  2579  0000C0                     	ds	1
  2580  0000C1                     ??_atoi:
  2581  0000C1                     _enviaSMS$1222:
  2582                           	opt stack 0
  2583  0000C1                     _configuraTelefones$1469:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0x41
  2587  0000C1                     	ds	1
  2588  0000C2                     _telaPrincipal$2383:
  2589                           	opt stack 0
  2590  0000C2                     _ajusteSP_Bombas$2384:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x42
  2594  0000C2                     	ds	1
  2595  0000C3                     configuraTelefones@i:
  2596                           	opt stack 0
  2597  0000C3                     atoi@sign:
  2598                           	opt stack 0
  2599  0000C3                     _enviaSMS$1223:
  2600                           	opt stack 0
  2601                           
  2602                           ; 2 bytes @ 0x43
  2603  0000C3                     	ds	1
  2604  0000C4                     atoi@a:
  2605                           	opt stack 0
  2606                           
  2607                           ; 2 bytes @ 0x44
  2608  0000C4                     	ds	1
  2609  0000C5                     _enviaSMS$1228:
  2610                           	opt stack 0
  2611                           
  2612                           ; 2 bytes @ 0x45
  2613  0000C5                     	ds	1
  2614  0000C6                     ??_getSinalSIM800L:
  2615                           
  2616                           ; 1 bytes @ 0x46
  2617  0000C6                     	ds	1
  2618  0000C7                     enviaSMS@tipo:
  2619                           	opt stack 0
  2620                           
  2621                           ; 1 bytes @ 0x47
  2622  0000C7                     	ds	1
  2623  0000C8                     ??_acaoBombas:
  2624  0000C8                     ??_acaoTesteBombas:
  2625  0000C8                     getSinalSIM800L@sinal:
  2626                           	opt stack 0
  2627                           
  2628                           ; 2 bytes @ 0x48
  2629  0000C8                     	ds	5
  2630  0000CD                     _acaoTesteBombas$2382:
  2631                           	opt stack 0
  2632                           
  2633                           ; 2 bytes @ 0x4D
  2634  0000CD                     	ds	2
  2635  0000CF                     _acaoTesteBombas$1293:
  2636                           	opt stack 0
  2637                           
  2638                           ; 2 bytes @ 0x4F
  2639  0000CF                     	ds	2
  2640  0000D1                     _acaoTesteBombas$1305:
  2641                           	opt stack 0
  2642                           
  2643                           ; 2 bytes @ 0x51
  2644  0000D1                     	ds	2
  2645  0000D3                     _acaoTesteBombas$1313:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0x53
  2649  0000D3                     	ds	2
  2650  0000D5                     _acaoTesteBombas$1318:
  2651                           	opt stack 0
  2652                           
  2653                           ; 2 bytes @ 0x55
  2654  0000D5                     	ds	2
  2655  0000D7                     _acaoTesteBombas$1323:
  2656                           	opt stack 0
  2657                           
  2658                           ; 2 bytes @ 0x57
  2659  0000D7                     	ds	2
  2660  0000D9                     acaoTesteBombas@intervalo:
  2661                           	opt stack 0
  2662                           
  2663                           ; 1 bytes @ 0x59
  2664  0000D9                     	ds	1
  2665  0000DA                     acaoTesteBombas@i:
  2666                           	opt stack 0
  2667                           
  2668                           ; 1 bytes @ 0x5A
  2669  0000DA                     	ds	1
  2670  0000DB                     tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           postinc0	equ	0xFEE
  2675                           wreg	equ	0xFE8
  2676                           postdec1	equ	0xFE5
  2677                           fsr1l	equ	0xFE1
  2678                           
  2679                           ; 1 bytes @ 0x5B
  2680                           
  2681                           	psect	cstackCOMRAM
  2682  000001                     __pcstackCOMRAM:
  2683                           	opt stack 0
  2684  000001                     ??i2_I2C_Wait:
  2685  000001                     ?_readADC:
  2686                           	opt stack 0
  2687  000001                     ?___ftpack:
  2688                           	opt stack 0
  2689  000001                     i2BCDtoDEC@val:
  2690                           	opt stack 0
  2691  000001                     i2delay@x:
  2692                           	opt stack 0
  2693  000001                     ___ftpack@arg:
  2694                           	opt stack 0
  2695  000001                     ___ftge@ff1:
  2696                           	opt stack 0
  2697                           
  2698                           ; 3 bytes @ 0x0
  2699  000001                     	ds	1
  2700  000002                     ?i2_I2C_Read:
  2701                           	opt stack 0
  2702  000002                     i2I2C_Write@d:
  2703                           	opt stack 0
  2704  000002                     i2I2C_Read@a:
  2705                           	opt stack 0
  2706                           
  2707                           ; 2 bytes @ 0x1
  2708  000002                     	ds	1
  2709  000003                     ??_readADC:
  2710  000003                     ??i2_delay:
  2711                           
  2712                           ; 1 bytes @ 0x2
  2713  000003                     	ds	1
  2714  000004                     ___ftpack@exp:
  2715                           	opt stack 0
  2716  000004                     i2writeEEPROM_ext@data:
  2717                           	opt stack 0
  2718  000004                     i2I2C_Read@temp:
  2719                           	opt stack 0
  2720  000004                     ___ftge@ff2:
  2721                           	opt stack 0
  2722                           
  2723                           ; 3 bytes @ 0x3
  2724  000004                     	ds	1
  2725  000005                     ___ftpack@sign:
  2726                           	opt stack 0
  2727  000005                     i2writeEEPROM_ext@adress:
  2728                           	opt stack 0
  2729                           
  2730                           ; 1 bytes @ 0x4
  2731  000005                     	ds	1
  2732  000006                     ??___ftpack:
  2733  000006                     writeEEPROM16_ext@data:
  2734                           	opt stack 0
  2735  000006                     i2getDS1307TimeDate@ptrToUserVal:
  2736                           	opt stack 0
  2737                           
  2738                           ; 2 bytes @ 0x5
  2739  000006                     	ds	1
  2740  000007                     ??___ftge:
  2741                           
  2742                           ; 1 bytes @ 0x6
  2743  000007                     	ds	1
  2744  000008                     writeEEPROM16_ext@adress:
  2745                           	opt stack 0
  2746                           
  2747                           ; 1 bytes @ 0x7
  2748  000008                     	ds	1
  2749  000009                     ?___lwtoft:
  2750                           	opt stack 0
  2751  000009                     _timer$1326:
  2752                           	opt stack 0
  2753  000009                     ___lwtoft@c:
  2754                           	opt stack 0
  2755                           
  2756                           ; 2 bytes @ 0x8
  2757  000009                     	ds	2
  2758  00000B                     _timer$1327:
  2759                           	opt stack 0
  2760                           
  2761                           ; 2 bytes @ 0xA
  2762  00000B                     	ds	1
  2763  00000C                     ?___ftmul:
  2764                           	opt stack 0
  2765  00000C                     ___ftmul@f1:
  2766                           	opt stack 0
  2767                           
  2768                           ; 3 bytes @ 0xB
  2769  00000C                     	ds	1
  2770  00000D                     _timer$1328:
  2771                           	opt stack 0
  2772                           
  2773                           ; 2 bytes @ 0xC
  2774  00000D                     	ds	2
  2775  00000F                     _timer$1329:
  2776                           	opt stack 0
  2777  00000F                     ___ftmul@f2:
  2778                           	opt stack 0
  2779                           
  2780                           ; 3 bytes @ 0xE
  2781  00000F                     	ds	3
  2782  000012                     ??___ftmul:
  2783                           
  2784                           ; 1 bytes @ 0x11
  2785  000012                     	ds	3
  2786  000015                     ___ftmul@exp:
  2787                           	opt stack 0
  2788                           
  2789                           ; 1 bytes @ 0x14
  2790  000015                     	ds	1
  2791  000016                     ___ftmul@f3_as_product:
  2792                           	opt stack 0
  2793                           
  2794                           ; 3 bytes @ 0x15
  2795  000016                     	ds	3
  2796  000019                     ___ftmul@cntr:
  2797                           	opt stack 0
  2798                           
  2799                           ; 1 bytes @ 0x18
  2800  000019                     	ds	1
  2801  00001A                     ___ftmul@sign:
  2802                           	opt stack 0
  2803                           
  2804                           ; 1 bytes @ 0x19
  2805  00001A                     	ds	1
  2806  00001B                     ?___ftadd:
  2807                           	opt stack 0
  2808  00001B                     ?___ftdiv:
  2809                           	opt stack 0
  2810  00001B                     ?___fttol:
  2811                           	opt stack 0
  2812  00001B                     ___ftadd@f1:
  2813                           	opt stack 0
  2814  00001B                     ___ftdiv@f1:
  2815                           	opt stack 0
  2816  00001B                     ___fttol@f1:
  2817                           	opt stack 0
  2818                           
  2819                           ; 3 bytes @ 0x1A
  2820  00001B                     	ds	3
  2821  00001E                     ___ftadd@f2:
  2822                           	opt stack 0
  2823  00001E                     ___ftdiv@f2:
  2824                           	opt stack 0
  2825                           
  2826                           ; 3 bytes @ 0x1D
  2827  00001E                     	ds	1
  2828  00001F                     ??___fttol:
  2829                           
  2830                           ; 1 bytes @ 0x1E
  2831  00001F                     	ds	2
  2832  000021                     ??___ftadd:
  2833  000021                     ??___ftdiv:
  2834                           
  2835                           ; 1 bytes @ 0x20
  2836  000021                     	ds	3
  2837  000024                     ___ftadd@sign:
  2838                           	opt stack 0
  2839  000024                     ___ftdiv@cntr:
  2840                           	opt stack 0
  2841  000024                     ___fttol@sign1:
  2842                           	opt stack 0
  2843                           
  2844                           ; 1 bytes @ 0x23
  2845  000024                     	ds	1
  2846  000025                     ___ftadd@exp2:
  2847                           	opt stack 0
  2848  000025                     ___ftdiv@f3:
  2849                           	opt stack 0
  2850  000025                     ___fttol@lval:
  2851                           	opt stack 0
  2852                           
  2853                           ; 4 bytes @ 0x24
  2854  000025                     	ds	1
  2855  000026                     ___ftadd@exp1:
  2856                           	opt stack 0
  2857                           
  2858                           ; 1 bytes @ 0x25
  2859  000026                     	ds	2
  2860  000028                     ___ftdiv@exp:
  2861                           	opt stack 0
  2862                           
  2863                           ; 1 bytes @ 0x27
  2864  000028                     	ds	1
  2865  000029                     ___ftdiv@sign:
  2866                           	opt stack 0
  2867  000029                     ___fttol@exp1:
  2868                           	opt stack 0
  2869                           
  2870                           ; 1 bytes @ 0x28
  2871  000029                     	ds	1
  2872  00002A                     lerTransdutor@i:
  2873                           	opt stack 0
  2874                           
  2875                           ; 1 bytes @ 0x29
  2876  00002A                     	ds	1
  2877  00002B                     lerTransdutor@_pressao:
  2878                           	opt stack 0
  2879                           
  2880                           ; 3 bytes @ 0x2A
  2881  00002B                     	ds	3
  2882  00002E                     lerTransdutor@tensao:
  2883                           	opt stack 0
  2884                           
  2885                           ; 3 bytes @ 0x2D
  2886  00002E                     	ds	3
  2887  000031                     ??_TIMER:
  2888                           
  2889                           ; 1 bytes @ 0x30
  2890  000031                     	ds	18
  2891  000043                     TIMER@c:
  2892                           	opt stack 0
  2893                           
  2894                           ; 1 bytes @ 0x42
  2895  000043                     	ds	1
  2896                           tblptru	equ	0xFF8
  2897                           tblptrh	equ	0xFF7
  2898                           tblptrl	equ	0xFF6
  2899                           tablat	equ	0xFF5
  2900                           postinc0	equ	0xFEE
  2901                           wreg	equ	0xFE8
  2902                           postdec1	equ	0xFE5
  2903                           fsr1l	equ	0xFE1
  2904                           
  2905 ;;
  2906 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2907 ;;
  2908 ;; *************** function _main *****************
  2909 ;; Defined at:
  2910 ;;		line 66 in file "Main.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;		None
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;		None
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  1    wreg      void 
  2917 ;; Registers used:
  2918 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2924 ;;      Params:         0       0       0       0       0       0       0
  2925 ;;      Locals:         0       0       0       0       0       0       0
  2926 ;;      Temps:          0       0       0       0       0       0       0
  2927 ;;      Totals:         0       0       0       0       0       0       0
  2928 ;;Total ram usage:        0 bytes
  2929 ;; Hardware stack levels required when called:   11
  2930 ;; This function calls:
  2931 ;;		_I2C_Master_Init
  2932 ;;		_Lcd_Clear
  2933 ;;		_Lcd_Init
  2934 ;;		_RTC_Init
  2935 ;;		_acaoBombas
  2936 ;;		_acaoTesteBombas
  2937 ;;		_ajusteSP_Bombas
  2938 ;;		_atualizarLCD
  2939 ;;		_btPress
  2940 ;;		_configuraRegistradores
  2941 ;;		_configuraTelefones
  2942 ;;		_configurarEstacionaria
  2943 ;;		_criarCaracteresCGRAM
  2944 ;;		_dataLoger
  2945 ;;		_delay
  2946 ;;		_getDS1307TimeDate
  2947 ;;		_getSinalSIM800L
  2948 ;;		_informacoes
  2949 ;;		_lerParametros
  2950 ;;		_setShiftREG
  2951 ;;		_sprintf
  2952 ;;		_telaPrincipal
  2953 ;;		_tela_ajusteRTC
  2954 ;;		_tela_testeBombas
  2955 ;;		_verificarIntervaloTesteBombas
  2956 ;; This function is called by:
  2957 ;;		Startup code after reset
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           	psect	text0
  2962  000DF4                     __ptext0:
  2963                           	opt stack 0
  2964  000DF4                     _main:
  2965                           	opt stack 0
  2966  000DF4  FFFF               	dw	65535	; assembler added errata NOP
  2967                           
  2968                           ;Main.c: 68: configuraRegistradores();
  2969                           
  2970                           ;incstack = 0
  2971  000DF6  EC58  F03A         	call	_configuraRegistradores	;wreg free
  2972                           
  2973                           ;Main.c: 69: I2C_Master_Init(100000);
  2974  000DFA  0EA0               	movlw	160
  2975  000DFC  0100               	movlb	0	; () banked
  2976  000DFE  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2977  000E00  0E86               	movlw	134
  2978  000E02  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2979  000E04  0E01               	movlw	1
  2980  000E06  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2981  000E08  0E00               	movlw	0
  2982  000E0A  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2983  000E0C  ECB4  F03A         	call	_I2C_Master_Init	;wreg free
  2984                           
  2985                           ;Main.c: 70: delay(200);
  2986  000E10  0E00               	movlw	0
  2987  000E12  0100               	movlb	0	; () banked
  2988  000E14  6F81               	movwf	(delay@x+1)& (0+255),b
  2989  000E16  0EC8               	movlw	200
  2990  000E18  6F80               	movwf	delay@x& (0+255),b
  2991  000E1A  EC74  F037         	call	_delay	;wreg free
  2992                           
  2993                           ;Main.c: 71: RTC_Init();
  2994  000E1E  ECC5  F037         	call	_RTC_Init	;wreg free
  2995                           
  2996                           ;Main.c: 72: delay(100);
  2997  000E22  0E00               	movlw	0
  2998  000E24  0100               	movlb	0	; () banked
  2999  000E26  6F81               	movwf	(delay@x+1)& (0+255),b
  3000  000E28  0E64               	movlw	100
  3001  000E2A  6F80               	movwf	delay@x& (0+255),b
  3002  000E2C  EC74  F037         	call	_delay	;wreg free
  3003                           
  3004                           ;Main.c: 73: getDS1307TimeDate(&rtc);
  3005  000E30  0E78               	movlw	low _rtc
  3006  000E32  0100               	movlb	0	; () banked
  3007  000E34  6F8C               	movwf	getDS1307TimeDate@ptrToUserVal& (0+255),b
  3008  000E36  0E00               	movlw	high _rtc
  3009  000E38  6F8D               	movwf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  3010  000E3A  EC50  F017         	call	_getDS1307TimeDate	;wreg free
  3011                           
  3012                           ;Main.c: 74: Lcd_Init();
  3013  000E3E  EC17  F03C         	call	_Lcd_Init	;wreg free
  3014                           
  3015                           ;Main.c: 75: Lcd_Clear();
  3016  000E42  EC38  F036         	call	_Lcd_Clear	;wreg free
  3017                           
  3018                           ;Main.c: 76: criarCaracteresCGRAM();
  3019  000E46  EC5F  F01D         	call	_criarCaracteresCGRAM	;wreg free
  3020                           
  3021                           ;Main.c: 77: delay(100);
  3022  000E4A  0E00               	movlw	0
  3023  000E4C  0100               	movlb	0	; () banked
  3024  000E4E  6F81               	movwf	(delay@x+1)& (0+255),b
  3025  000E50  0E64               	movlw	100
  3026  000E52  6F80               	movwf	delay@x& (0+255),b
  3027  000E54  EC74  F037         	call	_delay	;wreg free
  3028                           
  3029                           ;Main.c: 78: lerParametros();
  3030  000E58  ECEA  F017         	call	_lerParametros	;wreg free
  3031                           
  3032                           ;Main.c: 79: sprintf(line1, "TECHNOW");
  3033  000E5C  0E7B               	movlw	low _line1
  3034  000E5E  0100               	movlb	0	; () banked
  3035  000E60  6FA1               	movwf	sprintf@wh& (0+255),b
  3036  000E62  0E01               	movlw	high _line1
  3037  000E64  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3038  000E66  0E9A               	movlw	low STR_90
  3039  000E68  6FA3               	movwf	sprintf@f& (0+255),b
  3040  000E6A  0E7F               	movlw	high STR_90
  3041  000E6C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3042  000E6E  EC95  F039         	call	_sprintf	;wreg free
  3043                           
  3044                           ;Main.c: 80: sprintf(line2, "Sistemas embarcados");
  3045  000E72  0E66               	movlw	low _line2
  3046  000E74  0100               	movlb	0	; () banked
  3047  000E76  6FA1               	movwf	sprintf@wh& (0+255),b
  3048  000E78  0E01               	movlw	high _line2
  3049  000E7A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3050  000E7C  0EB0               	movlw	low STR_91
  3051  000E7E  6FA3               	movwf	sprintf@f& (0+255),b
  3052  000E80  0E7C               	movlw	high STR_91
  3053  000E82  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3054  000E84  EC95  F039         	call	_sprintf	;wreg free
  3055                           
  3056                           ;Main.c: 81: sprintf(line3, "Versao Soft.:");
  3057  000E88  0E51               	movlw	low _line3
  3058  000E8A  0100               	movlb	0	; () banked
  3059  000E8C  6FA1               	movwf	sprintf@wh& (0+255),b
  3060  000E8E  0E01               	movlw	high _line3
  3061  000E90  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3062  000E92  0E5B               	movlw	low STR_116
  3063  000E94  6FA3               	movwf	sprintf@f& (0+255),b
  3064  000E96  0E7E               	movlw	high STR_116
  3065  000E98  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3066  000E9A  EC95  F039         	call	_sprintf	;wreg free
  3067                           
  3068                           ;Main.c: 82: sprintf(&line4[9], "%s", "Nov 25 2019");
  3069  000E9E  0E45               	movlw	low (_line4+9)
  3070  000EA0  0100               	movlb	0	; () banked
  3071  000EA2  6FA1               	movwf	sprintf@wh& (0+255),b
  3072  000EA4  0E01               	movlw	high (_line4+9)
  3073  000EA6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3074  000EA8  0EFE               	movlw	low (STR_93+9)
  3075  000EAA  6FA3               	movwf	sprintf@f& (0+255),b
  3076  000EAC  0E7E               	movlw	high (STR_93+9)
  3077  000EAE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3078  000EB0  0EB9               	movlw	low STR_15
  3079  000EB2  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3080  000EB4  0E7E               	movlw	high STR_15
  3081  000EB6  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3082  000EB8  EC95  F039         	call	_sprintf	;wreg free
  3083                           
  3084                           ;Main.c: 83: atualizarLCD(line1, line2, line3, line4);
  3085  000EBC  0E7B               	movlw	low _line1
  3086  000EBE  0100               	movlb	0	; () banked
  3087  000EC0  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3088  000EC2  0E01               	movlw	high _line1
  3089  000EC4  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3090  000EC6  0E66               	movlw	low _line2
  3091  000EC8  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3092  000ECA  0E01               	movlw	high _line2
  3093  000ECC  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3094  000ECE  0E51               	movlw	low _line3
  3095  000ED0  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3096  000ED2  0E01               	movlw	high _line3
  3097  000ED4  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3098  000ED6  0E3C               	movlw	low _line4
  3099  000ED8  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3100  000EDA  0E01               	movlw	high _line4
  3101  000EDC  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3102  000EDE  ECF6  F01C         	call	_atualizarLCD	;wreg free
  3103                           
  3104                           ;Main.c: 84: delay(2500);
  3105  000EE2  0E09               	movlw	9
  3106  000EE4  0100               	movlb	0	; () banked
  3107  000EE6  6F81               	movwf	(delay@x+1)& (0+255),b
  3108  000EE8  0EC4               	movlw	196
  3109  000EEA  6F80               	movwf	delay@x& (0+255),b
  3110  000EEC  EC74  F037         	call	_delay	;wreg free
  3111  000EF0                     l914:
  3112  000EF0  FFFF               	dw	65535	; assembler added errata NOP
  3113  000EF2  0004               	clrwdt		;# 
  3114                           
  3115                           ;Main.c: 90: if (!executandoTeste && !flagErroTransdutor) {
  3116  000EF4  0100               	movlb	0	; () banked
  3117  000EF6  51F1               	movf	_executandoTeste& (0+255),w,b
  3118  000EF8  A4D8               	btfss	status,2,c
  3119  000EFA  D004               	goto	l915
  3120                           
  3121                           ; BSR set to: 0
  3122  000EFC  5074               	movf	_flagErroTransdutor,w,c
  3123  000EFE  B4D8               	btfsc	status,2,c
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;Main.c: 91: acaoBombas();
  3127  000F00  EC7C  F018         	call	_acaoBombas	;wreg free
  3128  000F04                     l915:
  3129  000F04  FFFF               	dw	65535	; assembler added errata NOP
  3130                           
  3131                           ;Main.c: 92: }
  3132                           ;Main.c: 94: verificarIntervaloTesteBombas();
  3133  000F06  EC2F  F039         	call	_verificarIntervaloTesteBombas	;wreg free
  3134                           
  3135                           ;Main.c: 96: setShiftREG();
  3136  000F0A  ECB9  F039         	call	_setShiftREG	;wreg free
  3137                           
  3138                           ;Main.c: 97: getSinalSIM800L();
  3139  000F0E  ECF7  F014         	call	_getSinalSIM800L	;wreg free
  3140                           
  3141                           ;Main.c: 100: switch (menu_posi) {
  3142  000F12  D085               	goto	l916
  3143  000F14  FFFF               	dw	65535	; assembler added errata NOP
  3144                           
  3145                           ;Main.c: 102: telaPrincipal();
  3146  000F16  ECC9  F00D         	call	_telaPrincipal	;wreg free
  3147                           
  3148                           ;Main.c: 104: break;
  3149  000F1A  D0A6               	goto	l918
  3150  000F1C  FFFF               	dw	65535	; assembler added errata NOP
  3151                           
  3152                           ;Main.c: 106: sprintf(&line1[1], "DATA/HORA");
  3153  000F1E  0E7C               	movlw	low (_line1+1)
  3154  000F20  0100               	movlb	0	; () banked
  3155  000F22  6FA1               	movwf	sprintf@wh& (0+255),b
  3156  000F24  0E01               	movlw	high (_line1+1)
  3157  000F26  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3158  000F28  0E4D               	movlw	low STR_119
  3159  000F2A  6FA3               	movwf	sprintf@f& (0+255),b
  3160  000F2C  0E7F               	movlw	high STR_119
  3161  000F2E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3162  000F30  EC95  F039         	call	_sprintf	;wreg free
  3163                           
  3164                           ;Main.c: 107: sprintf(&line2[1], "PRESSAO DA REDE");
  3165  000F34  0E67               	movlw	low (_line2+1)
  3166  000F36  0100               	movlb	0	; () banked
  3167  000F38  6FA1               	movwf	sprintf@wh& (0+255),b
  3168  000F3A  0E01               	movlw	high (_line2+1)
  3169  000F3C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3170  000F3E  0EE2               	movlw	low STR_120
  3171  000F40  6FA3               	movwf	sprintf@f& (0+255),b
  3172  000F42  0E7D               	movlw	high STR_120
  3173  000F44  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3174  000F46  EC95  F039         	call	_sprintf	;wreg free
  3175                           
  3176                           ;Main.c: 108: sprintf(&line3[1], "PARTIDA COMBUSTAO");
  3177  000F4A  0E52               	movlw	low (_line3+1)
  3178  000F4C  0100               	movlb	0	; () banked
  3179  000F4E  6FA1               	movwf	sprintf@wh& (0+255),b
  3180  000F50  0E01               	movlw	high (_line3+1)
  3181  000F52  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3182  000F54  0E36               	movlw	low STR_121
  3183  000F56  6FA3               	movwf	sprintf@f& (0+255),b
  3184  000F58  0E7D               	movlw	high STR_121
  3185  000F5A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3186  000F5C  EC95  F039         	call	_sprintf	;wreg free
  3187                           
  3188                           ;Main.c: 109: sprintf(&line4[1], "TELEFONES");
  3189  000F60  0E3D               	movlw	low (_line4+1)
  3190  000F62  0100               	movlb	0	; () banked
  3191  000F64  6FA1               	movwf	sprintf@wh& (0+255),b
  3192  000F66  0E01               	movlw	high (_line4+1)
  3193  000F68  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3194  000F6A  0E61               	movlw	low STR_122
  3195  000F6C  6FA3               	movwf	sprintf@f& (0+255),b
  3196  000F6E  0E7F               	movlw	high STR_122
  3197  000F70  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3198  000F72  EC95  F039         	call	_sprintf	;wreg free
  3199                           
  3200                           ;Main.c: 110: break;
  3201  000F76  D078               	goto	l918
  3202  000F78  FFFF               	dw	65535	; assembler added errata NOP
  3203                           
  3204                           ;Main.c: 112: sprintf(&line1[1], "PERIODO DE TESTES");
  3205  000F7A  0E7C               	movlw	low (_line1+1)
  3206  000F7C  0100               	movlb	0	; () banked
  3207  000F7E  6FA1               	movwf	sprintf@wh& (0+255),b
  3208  000F80  0E01               	movlw	high (_line1+1)
  3209  000F82  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3210  000F84  0E48               	movlw	low STR_123
  3211  000F86  6FA3               	movwf	sprintf@f& (0+255),b
  3212  000F88  0E7D               	movlw	high STR_123
  3213  000F8A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3214  000F8C  EC95  F039         	call	_sprintf	;wreg free
  3215                           
  3216                           ;Main.c: 113: sprintf(&line2[1], "DATALOGER");
  3217  000F90  0E67               	movlw	low (_line2+1)
  3218  000F92  0100               	movlb	0	; () banked
  3219  000F94  6FA1               	movwf	sprintf@wh& (0+255),b
  3220  000F96  0E01               	movlw	high (_line2+1)
  3221  000F98  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3222  000F9A  0E57               	movlw	low STR_124
  3223  000F9C  6FA3               	movwf	sprintf@f& (0+255),b
  3224  000F9E  0E7F               	movlw	high STR_124
  3225  000FA0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3226  000FA2  EC95  F039         	call	_sprintf	;wreg free
  3227                           
  3228                           ;Main.c: 114: sprintf(&line3[1], "INFO VERSAO");
  3229  000FA6  0E52               	movlw	low (_line3+1)
  3230  000FA8  0100               	movlb	0	; () banked
  3231  000FAA  6FA1               	movwf	sprintf@wh& (0+255),b
  3232  000FAC  0E01               	movlw	high (_line3+1)
  3233  000FAE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3234  000FB0  0EE9               	movlw	low STR_125
  3235  000FB2  6FA3               	movwf	sprintf@f& (0+255),b
  3236  000FB4  0E7E               	movlw	high STR_125
  3237  000FB6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3238  000FB8  EC95  F039         	call	_sprintf	;wreg free
  3239                           
  3240                           ;Main.c: 115: sprintf(&line4[1], "Iniciar Testes");
  3241  000FBC  0E3D               	movlw	low (_line4+1)
  3242  000FBE  0100               	movlb	0	; () banked
  3243  000FC0  6FA1               	movwf	sprintf@wh& (0+255),b
  3244  000FC2  0E01               	movlw	high (_line4+1)
  3245  000FC4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3246  000FC6  0E4C               	movlw	low STR_126
  3247  000FC8  6FA3               	movwf	sprintf@f& (0+255),b
  3248  000FCA  0E7E               	movlw	high STR_126
  3249  000FCC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3250  000FCE  EC95  F039         	call	_sprintf	;wreg free
  3251                           
  3252                           ;Main.c: 116: break;
  3253  000FD2  D04A               	goto	l918
  3254  000FD4  FFFF               	dw	65535	; assembler added errata NOP
  3255                           
  3256                           ;Main.c: 118: tela_ajusteRTC();
  3257  000FD6  EC01  F010         	call	_tela_ajusteRTC	;wreg free
  3258                           
  3259                           ;Main.c: 119: break;
  3260  000FDA  D046               	goto	l918
  3261  000FDC  FFFF               	dw	65535	; assembler added errata NOP
  3262                           
  3263                           ;Main.c: 121: ajusteSP_Bombas();
  3264  000FDE  EC9C  F00C         	call	_ajusteSP_Bombas	;wreg free
  3265                           
  3266                           ;Main.c: 122: break;
  3267  000FE2  D042               	goto	l918
  3268  000FE4  FFFF               	dw	65535	; assembler added errata NOP
  3269                           
  3270                           ;Main.c: 124: configurarEstacionaria();
  3271  000FE6  EC9C  F016         	call	_configurarEstacionaria	;wreg free
  3272                           
  3273                           ;Main.c: 125: break;
  3274  000FEA  D03E               	goto	l918
  3275  000FEC  FFFF               	dw	65535	; assembler added errata NOP
  3276                           
  3277                           ;Main.c: 127: configuraTelefones();
  3278  000FEE  EC2E  F009         	call	_configuraTelefones	;wreg free
  3279                           
  3280                           ;Main.c: 128: break;
  3281  000FF2  D03A               	goto	l918
  3282  000FF4  FFFF               	dw	65535	; assembler added errata NOP
  3283                           
  3284                           ;Main.c: 130: tela_testeBombas();
  3285  000FF6  EC27  F013         	call	_tela_testeBombas	;wreg free
  3286                           
  3287                           ;Main.c: 131: break;
  3288  000FFA  D036               	goto	l918
  3289  000FFC  FFFF               	dw	65535	; assembler added errata NOP
  3290                           
  3291                           ;Main.c: 133: dataLoger();
  3292  000FFE  ECE5  F00E         	call	_dataLoger	;wreg free
  3293                           
  3294                           ;Main.c: 134: break;
  3295  001002  D032               	goto	l918
  3296  001004  FFFF               	dw	65535	; assembler added errata NOP
  3297                           
  3298                           ;Main.c: 136: informacoes();
  3299  001006  EC57  F03B         	call	_informacoes	;wreg free
  3300                           
  3301                           ;Main.c: 137: break;
  3302  00100A  D02E               	goto	l918
  3303  00100C  FFFF               	dw	65535	; assembler added errata NOP
  3304                           
  3305                           ;Main.c: 139: acaoTesteBombas();
  3306  00100E  EC8D  F004         	call	_acaoTesteBombas	;wreg free
  3307                           
  3308                           ;Main.c: 140: break;
  3309  001012  D02A               	goto	l918
  3310  001014  FFFF               	dw	65535	; assembler added errata NOP
  3311  001016  0E00               	movlw	0
  3312  001018  0100               	movlb	0	; () banked
  3313  00101A  6FE0               	movwf	_menu_posi& (0+255),b
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;Main.c: 144: }
  3317                           
  3318                           ;Main.c: 143: break;
  3319  00101C  D025               	goto	l918
  3320  00101E                     l916:
  3321  00101E  FFFF               	dw	65535	; assembler added errata NOP
  3322                           
  3323                           ; BSR set to: 0
  3324  001020  0100               	movlb	0	; () banked
  3325  001022  51E0               	movf	_menu_posi& (0+255),w,b
  3326                           
  3327                           ; Switch size 1, requested type "space"
  3328                           ; Number of cases is 11, Range of values is 0 to 28
  3329                           ; switch strategies available:
  3330                           ; Name         Instructions Cycles
  3331                           ; simple_byte           34    18 (average)
  3332                           ;	Chosen strategy is simple_byte
  3333  001024  0A00               	xorlw	0	; case 0
  3334  001026  B4D8               	btfsc	status,2,c
  3335  001028  D775               	goto	l917
  3336  00102A  0A01               	xorlw	1	; case 1
  3337  00102C  B4D8               	btfsc	status,2,c
  3338  00102E  D776               	goto	l919
  3339  001030  0A03               	xorlw	3	; case 2
  3340  001032  B4D8               	btfsc	status,2,c
  3341  001034  D7A1               	goto	l920
  3342  001036  0A16               	xorlw	22	; case 20
  3343  001038  B4D8               	btfsc	status,2,c
  3344  00103A  D7CC               	goto	l921
  3345  00103C  0A01               	xorlw	1	; case 21
  3346  00103E  B4D8               	btfsc	status,2,c
  3347  001040  D7CD               	goto	l922
  3348  001042  0A03               	xorlw	3	; case 22
  3349  001044  B4D8               	btfsc	status,2,c
  3350  001046  D7CE               	goto	l923
  3351  001048  0A01               	xorlw	1	; case 23
  3352  00104A  B4D8               	btfsc	status,2,c
  3353  00104C  D7CF               	goto	l924
  3354  00104E  0A0F               	xorlw	15	; case 24
  3355  001050  B4D8               	btfsc	status,2,c
  3356  001052  D7D0               	goto	l925
  3357  001054  0A01               	xorlw	1	; case 25
  3358  001056  B4D8               	btfsc	status,2,c
  3359  001058  D7D1               	goto	l926
  3360  00105A  0A02               	xorlw	2	; case 27
  3361  00105C  B4D8               	btfsc	status,2,c
  3362  00105E  D7D2               	goto	l927
  3363  001060  0A07               	xorlw	7	; case 28
  3364  001062  B4D8               	btfsc	status,2,c
  3365  001064  D7D3               	goto	l928
  3366  001066  D7D6               	goto	l929
  3367  001068                     l918:
  3368  001068  FFFF               	dw	65535	; assembler added errata NOP
  3369                           
  3370                           ;Main.c: 146: if (menu_posi == 1 | menu_posi == 2) {
  3371                           
  3372                           ; BSR set to: 0
  3373  00106A  0100               	movlb	0	; () banked
  3374  00106C  05E0               	decf	_menu_posi& (0+255),w,b
  3375  00106E  B4D8               	btfsc	status,2,c
  3376  001070  D09C               	goto	l933
  3377                           
  3378                           ; BSR set to: 0
  3379  001072  0E02               	movlw	2
  3380  001074  19E0               	xorwf	_menu_posi& (0+255),w,b
  3381  001076  B4D8               	btfsc	status,2,c
  3382  001078  D098               	goto	l933
  3383  00107A  D0D2               	goto	l957
  3384  00107C  FFFF               	dw	65535	; assembler added errata NOP
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;Main.c: 150: menu_posi = 1;
  3388                           
  3389                           ; BSR set to: 0
  3390  00107E  0E01               	movlw	1
  3391  001080  6FE0               	movwf	_menu_posi& (0+255),b
  3392                           
  3393                           ;Main.c: 151: line1[0] = '>';
  3394  001082  0E3E               	movlw	62
  3395  001084  0101               	movlb	1	; () banked
  3396  001086  6F7B               	movwf	_line1& (0+255),b
  3397                           
  3398                           ; BSR set to: 1
  3399                           ;Main.c: 152: if (btPress(4)) {
  3400  001088  0E04               	movlw	4
  3401  00108A  ECE6  F03A         	call	_btPress
  3402  00108E  0900               	iorlw	0
  3403  001090  B4D8               	btfsc	status,2,c
  3404  001092  D0A6               	goto	l936
  3405                           
  3406                           ;Main.c: 153: _menu_posi = menu_posi;
  3407  001094  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3408                           
  3409                           ;Main.c: 154: menu_posi = 20;
  3410  001098  0E14               	movlw	20
  3411  00109A  D065               	goto	L5
  3412  00109C  FFFF               	dw	65535	; assembler added errata NOP
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;Main.c: 158: menu_posi = 1;
  3416                           
  3417                           ; BSR set to: 0
  3418  00109E  0E01               	movlw	1
  3419  0010A0  6FE0               	movwf	_menu_posi& (0+255),b
  3420                           
  3421                           ;Main.c: 159: line2[0] = '>';
  3422  0010A2  0E3E               	movlw	62
  3423  0010A4  0101               	movlb	1	; () banked
  3424  0010A6  6F66               	movwf	_line2& (0+255),b
  3425                           
  3426                           ; BSR set to: 1
  3427                           ;Main.c: 160: if (btPress(4)) {
  3428  0010A8  0E04               	movlw	4
  3429  0010AA  ECE6  F03A         	call	_btPress
  3430  0010AE  0900               	iorlw	0
  3431  0010B0  B4D8               	btfsc	status,2,c
  3432  0010B2  D096               	goto	l936
  3433                           
  3434                           ;Main.c: 161: _menu_posi = menu_posi;
  3435  0010B4  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3436                           
  3437                           ;Main.c: 162: menu_posi = 21;
  3438  0010B8  0E15               	movlw	21
  3439  0010BA  D055               	goto	L5
  3440  0010BC  FFFF               	dw	65535	; assembler added errata NOP
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;Main.c: 166: menu_posi = 1;
  3444                           
  3445                           ; BSR set to: 0
  3446  0010BE  0E01               	movlw	1
  3447  0010C0  6FE0               	movwf	_menu_posi& (0+255),b
  3448                           
  3449                           ;Main.c: 167: line3[0] = '>';
  3450  0010C2  0E3E               	movlw	62
  3451  0010C4  0101               	movlb	1	; () banked
  3452  0010C6  6F51               	movwf	_line3& (0+255),b
  3453                           
  3454                           ; BSR set to: 1
  3455                           ;Main.c: 168: if (btPress(4)) {
  3456  0010C8  0E04               	movlw	4
  3457  0010CA  ECE6  F03A         	call	_btPress
  3458  0010CE  0900               	iorlw	0
  3459  0010D0  B4D8               	btfsc	status,2,c
  3460  0010D2  D086               	goto	l936
  3461                           
  3462                           ;Main.c: 169: _menu_posi = menu_posi;
  3463  0010D4  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3464                           
  3465                           ;Main.c: 170: menu_posi = 22;
  3466  0010D8  0E16               	movlw	22
  3467  0010DA  D045               	goto	L5
  3468  0010DC  FFFF               	dw	65535	; assembler added errata NOP
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;Main.c: 174: menu_posi = 1;
  3472                           
  3473                           ; BSR set to: 0
  3474  0010DE  0E01               	movlw	1
  3475  0010E0  6FE0               	movwf	_menu_posi& (0+255),b
  3476                           
  3477                           ;Main.c: 175: line4[0] = '>';
  3478  0010E2  0E3E               	movlw	62
  3479  0010E4  0101               	movlb	1	; () banked
  3480  0010E6  6F3C               	movwf	_line4& (0+255),b
  3481                           
  3482                           ; BSR set to: 1
  3483                           ;Main.c: 176: if (btPress(4)) {
  3484  0010E8  0E04               	movlw	4
  3485  0010EA  ECE6  F03A         	call	_btPress
  3486  0010EE  0900               	iorlw	0
  3487  0010F0  B4D8               	btfsc	status,2,c
  3488  0010F2  D076               	goto	l936
  3489                           
  3490                           ;Main.c: 177: _menu_posi = menu_posi;
  3491  0010F4  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3492                           
  3493                           ;Main.c: 178: menu_posi = 23;
  3494  0010F8  0E17               	movlw	23
  3495  0010FA  D035               	goto	L5
  3496  0010FC  FFFF               	dw	65535	; assembler added errata NOP
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;Main.c: 182: menu_posi = 2;
  3500                           
  3501                           ; BSR set to: 0
  3502  0010FE  0E02               	movlw	2
  3503  001100  6FE0               	movwf	_menu_posi& (0+255),b
  3504                           
  3505                           ;Main.c: 183: line1[0] = '>';
  3506  001102  0E3E               	movlw	62
  3507  001104  0101               	movlb	1	; () banked
  3508  001106  6F7B               	movwf	_line1& (0+255),b
  3509                           
  3510                           ; BSR set to: 1
  3511                           ;Main.c: 184: if (btPress(4)) {
  3512  001108  0E04               	movlw	4
  3513  00110A  ECE6  F03A         	call	_btPress
  3514  00110E  0900               	iorlw	0
  3515  001110  B4D8               	btfsc	status,2,c
  3516  001112  D066               	goto	l936
  3517                           
  3518                           ;Main.c: 185: _menu_posi = menu_posi;
  3519  001114  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3520                           
  3521                           ;Main.c: 186: menu_posi = 24;
  3522  001118  0E18               	movlw	24
  3523  00111A  D025               	goto	L5
  3524  00111C  FFFF               	dw	65535	; assembler added errata NOP
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;Main.c: 190: line2[0] = '>';
  3528                           
  3529                           ; BSR set to: 0
  3530  00111E  0E3E               	movlw	62
  3531  001120  0101               	movlb	1	; () banked
  3532  001122  6F66               	movwf	_line2& (0+255),b
  3533                           
  3534                           ;Main.c: 191: menu_posi = 2;
  3535  001124  0E02               	movlw	2
  3536  001126  0100               	movlb	0	; () banked
  3537  001128  6FE0               	movwf	_menu_posi& (0+255),b
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;Main.c: 192: if (btPress(4)) {
  3541  00112A  0E04               	movlw	4
  3542  00112C  ECE6  F03A         	call	_btPress
  3543  001130  0900               	iorlw	0
  3544  001132  B4D8               	btfsc	status,2,c
  3545  001134  D055               	goto	l936
  3546                           
  3547                           ;Main.c: 193: _menu_posi = menu_posi;
  3548  001136  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3549                           
  3550                           ;Main.c: 194: menu_posi = 25;
  3551  00113A  0E19               	movlw	25
  3552  00113C  0100               	movlb	0	; () banked
  3553  00113E  6FE0               	movwf	_menu_posi& (0+255),b
  3554                           
  3555                           ;Main.c: 195: dtl_carregar_log = 1;
  3556  001140  0E01               	movlw	1
  3557  001142  6E55               	movwf	_dtl_carregar_log,c
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;Main.c: 196: }
  3561                           ;Main.c: 197: break;
  3562  001144  D04D               	goto	l936
  3563  001146  FFFF               	dw	65535	; assembler added errata NOP
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;Main.c: 199: line3[0] = '>';
  3567                           
  3568                           ; BSR set to: 0
  3569  001148  0E3E               	movlw	62
  3570  00114A  0101               	movlb	1	; () banked
  3571  00114C  6F51               	movwf	_line3& (0+255),b
  3572                           
  3573                           ;Main.c: 200: menu_posi = 2;
  3574  00114E  0E02               	movlw	2
  3575  001150  0100               	movlb	0	; () banked
  3576  001152  6FE0               	movwf	_menu_posi& (0+255),b
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;Main.c: 201: if (btPress(4)) {
  3580  001154  0E04               	movlw	4
  3581  001156  ECE6  F03A         	call	_btPress
  3582  00115A  0900               	iorlw	0
  3583  00115C  B4D8               	btfsc	status,2,c
  3584  00115E  D040               	goto	l936
  3585                           
  3586                           ;Main.c: 202: _menu_posi = menu_posi;
  3587  001160  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3588                           
  3589                           ;Main.c: 203: menu_posi = 27;
  3590  001164  0E1B               	movlw	27
  3591  001166                     L5:
  3592  001166  FFFF               	dw	65535	; assembler added errata NOP
  3593  001168  0100               	movlb	0	; () banked
  3594  00116A  D01C               	goto	L6
  3595  00116C  FFFF               	dw	65535	; assembler added errata NOP
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;Main.c: 207: line4[0] = '>';
  3599                           
  3600                           ; BSR set to: 0
  3601  00116E  0E3E               	movlw	62
  3602  001170  0101               	movlb	1	; () banked
  3603  001172  6F3C               	movwf	_line4& (0+255),b
  3604                           
  3605                           ;Main.c: 208: menu_posi = 2;
  3606  001174  0E02               	movlw	2
  3607  001176  0100               	movlb	0	; () banked
  3608  001178  6FE0               	movwf	_menu_posi& (0+255),b
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;Main.c: 209: if (btPress(4)) {
  3612  00117A  0E04               	movlw	4
  3613  00117C  ECE6  F03A         	call	_btPress
  3614  001180  0900               	iorlw	0
  3615  001182  B4D8               	btfsc	status,2,c
  3616  001184  D02D               	goto	l936
  3617                           
  3618                           ;Main.c: 210: if (!ocorrendoIncendio) {
  3619  001186  0100               	movlb	0	; () banked
  3620  001188  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  3621  00118A  A4D8               	btfss	status,2,c
  3622  00118C  D029               	goto	l936
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;Main.c: 211: menu_posi = 28;
  3626  00118E  0E1C               	movlw	28
  3627  001190  6FE0               	movwf	_menu_posi& (0+255),b
  3628                           
  3629                           ;Main.c: 212: executandoTeste = 1;
  3630  001192  0E01               	movlw	1
  3631  001194  6FF1               	movwf	_executandoTeste& (0+255),b
  3632                           
  3633                           ;Main.c: 213: etapaTesteBombas = 0;
  3634  001196  0E00               	movlw	0
  3635  001198  6E72               	movwf	_etapaTesteBombas,c
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;Main.c: 214: }
  3639                           ;Main.c: 215: }
  3640                           ;Main.c: 216: break;
  3641                           
  3642                           ; BSR set to: 0
  3643  00119A  D022               	goto	l936
  3644  00119C  FFFF               	dw	65535	; assembler added errata NOP
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;Main.c: 218: sub_menu_posi = 1;
  3648                           
  3649                           ; BSR set to: 0
  3650  00119E  0E01               	movlw	1
  3651  0011A0  6E6A               	movwf	_sub_menu_posi,c
  3652                           
  3653                           ;Main.c: 219: menu_posi = 1;
  3654  0011A2  0E01               	movlw	1
  3655  0011A4                     L6:
  3656  0011A4  FFFF               	dw	65535	; assembler added errata NOP
  3657  0011A6  6FE0               	movwf	_menu_posi& (0+255),b
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;Main.c: 221: }
  3661                           
  3662                           ;Main.c: 220: break;
  3663  0011A8  D01B               	goto	l936
  3664  0011AA                     l933:
  3665  0011AA  FFFF               	dw	65535	; assembler added errata NOP
  3666                           
  3667                           ; BSR set to: 0
  3668                           
  3669                           ; BSR set to: 0
  3670  0011AC  506A               	movf	_sub_menu_posi,w,c
  3671                           
  3672                           ; Switch size 1, requested type "space"
  3673                           ; Number of cases is 8, Range of values is 1 to 8
  3674                           ; switch strategies available:
  3675                           ; Name         Instructions Cycles
  3676                           ; simple_byte           25    13 (average)
  3677                           ;	Chosen strategy is simple_byte
  3678  0011AE  0A01               	xorlw	1	; case 1
  3679  0011B0  B4D8               	btfsc	status,2,c
  3680  0011B2  D764               	goto	l934
  3681  0011B4  0A03               	xorlw	3	; case 2
  3682  0011B6  B4D8               	btfsc	status,2,c
  3683  0011B8  D771               	goto	l937
  3684  0011BA  0A01               	xorlw	1	; case 3
  3685  0011BC  B4D8               	btfsc	status,2,c
  3686  0011BE  D77E               	goto	l939
  3687  0011C0  0A07               	xorlw	7	; case 4
  3688  0011C2  B4D8               	btfsc	status,2,c
  3689  0011C4  D78B               	goto	l941
  3690  0011C6  0A01               	xorlw	1	; case 5
  3691  0011C8  B4D8               	btfsc	status,2,c
  3692  0011CA  D798               	goto	l943
  3693  0011CC  0A03               	xorlw	3	; case 6
  3694  0011CE  B4D8               	btfsc	status,2,c
  3695  0011D0  D7A5               	goto	l945
  3696  0011D2  0A01               	xorlw	1	; case 7
  3697  0011D4  B4D8               	btfsc	status,2,c
  3698  0011D6  D7B7               	goto	l947
  3699  0011D8  0A0F               	xorlw	15	; case 8
  3700  0011DA  B4D8               	btfsc	status,2,c
  3701  0011DC  D7C7               	goto	l949
  3702  0011DE  D7DE               	goto	l952
  3703  0011E0                     l936:
  3704  0011E0  FFFF               	dw	65535	; assembler added errata NOP
  3705                           
  3706                           ;Main.c: 223: if (btPress(3)) {
  3707                           
  3708                           ; BSR set to: 0
  3709  0011E2  0E03               	movlw	3
  3710  0011E4  ECE6  F03A         	call	_btPress
  3711  0011E8  0900               	iorlw	0
  3712  0011EA  B4D8               	btfsc	status,2,c
  3713  0011EC  D002               	goto	l953
  3714                           
  3715                           ;Main.c: 224: sub_menu_posi--;
  3716  0011EE  066A               	decf	_sub_menu_posi,f,c
  3717                           
  3718                           ;Main.c: 225: } else if (btPress(2)) {
  3719  0011F0  D017               	goto	l957
  3720  0011F2                     l953:
  3721  0011F2  FFFF               	dw	65535	; assembler added errata NOP
  3722  0011F4  0E02               	movlw	2
  3723  0011F6  ECE6  F03A         	call	_btPress
  3724  0011FA  0900               	iorlw	0
  3725  0011FC  B4D8               	btfsc	status,2,c
  3726  0011FE  D002               	goto	l955
  3727                           
  3728                           ;Main.c: 226: sub_menu_posi++;
  3729  001200  2A6A               	incf	_sub_menu_posi,f,c
  3730                           
  3731                           ;Main.c: 227: } else if (btPress(1)) {
  3732  001202  D00E               	goto	l957
  3733  001204                     l955:
  3734  001204  FFFF               	dw	65535	; assembler added errata NOP
  3735  001206  0E01               	movlw	1
  3736  001208  ECE6  F03A         	call	_btPress
  3737  00120C  0900               	iorlw	0
  3738  00120E  B4D8               	btfsc	status,2,c
  3739  001210  D007               	goto	l957
  3740                           
  3741                           ;Main.c: 228: menu_posi = 0;
  3742  001212  0E00               	movlw	0
  3743  001214  0100               	movlb	0	; () banked
  3744  001216  6FE0               	movwf	_menu_posi& (0+255),b
  3745                           
  3746                           ;Main.c: 229: option_posi = 0;
  3747  001218  0E00               	movlw	0
  3748  00121A  6FE1               	movwf	_option_posi& (0+255),b
  3749                           
  3750                           ;Main.c: 230: sub_menu_posi = 1;
  3751  00121C  0E01               	movlw	1
  3752  00121E  6E6A               	movwf	_sub_menu_posi,c
  3753  001220                     l957:
  3754  001220  FFFF               	dw	65535	; assembler added errata NOP
  3755                           
  3756                           ;Main.c: 231: }
  3757                           ;Main.c: 232: }
  3758                           ;Main.c: 234: if (menu_posi != 28) {
  3759                           
  3760                           ; BSR set to: 0
  3761                           
  3762                           ; BSR set to: 0
  3763                           
  3764                           ; BSR set to: 0
  3765                           
  3766                           ; BSR set to: 0
  3767  001222  0E1C               	movlw	28
  3768  001224  0100               	movlb	0	; () banked
  3769  001226  19E0               	xorwf	_menu_posi& (0+255),w,b
  3770  001228  B4D8               	btfsc	status,2,c
  3771  00122A  D004               	goto	l958
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;Main.c: 235: executandoTeste = 0;
  3775  00122C  0E00               	movlw	0
  3776  00122E  6FF1               	movwf	_executandoTeste& (0+255),b
  3777                           
  3778                           ;Main.c: 236: shift[2] = 0;
  3779  001230  0E00               	movlw	0
  3780  001232  6E46               	movwf	_shift+2,c
  3781  001234                     l958:
  3782  001234  FFFF               	dw	65535	; assembler added errata NOP
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;Main.c: 237: }
  3786                           ;Main.c: 238: atualizarLCD(line1, line2, line3, line4);
  3787                           
  3788                           ; BSR set to: 0
  3789  001236  0E7B               	movlw	low _line1
  3790  001238  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3791  00123A  0E01               	movlw	high _line1
  3792  00123C  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3793  00123E  0E66               	movlw	low _line2
  3794  001240  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3795  001242  0E01               	movlw	high _line2
  3796  001244  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3797  001246  0E51               	movlw	low _line3
  3798  001248  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3799  00124A  0E01               	movlw	high _line3
  3800  00124C  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3801  00124E  0E3C               	movlw	low _line4
  3802  001250  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3803  001252  0E01               	movlw	high _line4
  3804  001254  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3805  001256  ECF6  F01C         	call	_atualizarLCD	;wreg free
  3806  00125A  D64A               	goto	l914
  3807  00125C                     __end_of_main:
  3808                           	opt stack 0
  3809                           tblptru	equ	0xFF8
  3810                           tblptrh	equ	0xFF7
  3811                           tblptrl	equ	0xFF6
  3812                           tablat	equ	0xFF5
  3813                           postinc0	equ	0xFEE
  3814                           wreg	equ	0xFE8
  3815                           postdec1	equ	0xFE5
  3816                           fsr1l	equ	0xFE1
  3817                           status	equ	0xFD8
  3818                           
  3819 ;; *************** function _verificarIntervaloTesteBombas *****************
  3820 ;; Defined at:
  3821 ;;		line 117 in file "controle.h"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;		None
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;		None
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  1    wreg      void 
  3828 ;; Registers used:
  3829 ;;		wreg, status,2, status,0, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3835 ;;      Params:         0       0       0       0       0       0       0
  3836 ;;      Locals:         0       0       0       0       0       0       0
  3837 ;;      Temps:          0       0       0       0       0       0       0
  3838 ;;      Totals:         0       0       0       0       0       0       0
  3839 ;;Total ram usage:        0 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    9
  3842 ;; This function calls:
  3843 ;;		_writeEEPROM_ext
  3844 ;; This function is called by:
  3845 ;;		_main
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           	psect	text1
  3850  00725E                     __ptext1:
  3851                           	opt stack 0
  3852  00725E                     _verificarIntervaloTesteBombas:
  3853                           	opt stack 0
  3854  00725E  FFFF               	dw	65535	; assembler added errata NOP
  3855                           
  3856                           ;controle.h: 118: if (dias_restante_teste >= intervalo_teste_dia && habilitaTesteAutomat
      +                          ico == 1 && !executandoTeste) {
  3857                           
  3858                           ;incstack = 0
  3859  007260  0100               	movlb	0	; () banked
  3860  007262  51E9               	movf	_intervalo_teste_dia& (0+255),w,b
  3861  007264  5DE8               	subwf	_dias_restante_teste& (0+255),w,b
  3862  007266  A0D8               	btfss	status,0,c
  3863  007268  D018               	goto	l513
  3864                           
  3865                           ; BSR set to: 0
  3866  00726A  0473               	decf	_habilitaTesteAutomatico,w,c
  3867  00726C  A4D8               	btfss	status,2,c
  3868  00726E  D015               	goto	l513
  3869                           
  3870                           ; BSR set to: 0
  3871  007270  51F1               	movf	_executandoTeste& (0+255),w,b
  3872  007272  A4D8               	btfss	status,2,c
  3873  007274  D012               	goto	l513
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;controle.h: 119: if (_hor == horario_de_teste) {
  3877  007276  51E7               	movf	_horario_de_teste& (0+255),w,b
  3878  007278  19ED               	xorwf	__hor& (0+255),w,b
  3879  00727A  A4D8               	btfss	status,2,c
  3880  00727C  D00E               	goto	l513
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;controle.h: 120: dias_restante_teste = 0;
  3884  00727E  0E00               	movlw	0
  3885  007280  6FE8               	movwf	_dias_restante_teste& (0+255),b
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;controle.h: 121: writeEEPROM_ext(10, dias_restante_teste);
  3889  007282  C0E8  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
  3890  007286  0E0A               	movlw	10
  3891  007288  EC72  F039         	call	_writeEEPROM_ext
  3892                           
  3893                           ;controle.h: 122: etapaTesteBombas = 0;
  3894  00728C  0E00               	movlw	0
  3895  00728E  6E72               	movwf	_etapaTesteBombas,c
  3896                           
  3897                           ;controle.h: 123: executandoTeste = 1;
  3898  007290  0E01               	movlw	1
  3899  007292  0100               	movlb	0	; () banked
  3900  007294  6FF1               	movwf	_executandoTeste& (0+255),b
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;controle.h: 124: menu_posi = 28;
  3904  007296  0E1C               	movlw	28
  3905  007298  6FE0               	movwf	_menu_posi& (0+255),b
  3906  00729A                     l513:
  3907  00729A  FFFF               	dw	65535	; assembler added errata NOP
  3908                           
  3909                           ; BSR set to: 0
  3910                           
  3911                           ; BSR set to: 0
  3912                           
  3913                           ; BSR set to: 0
  3914  00729C  0012               	return		;funcret
  3915  00729E  FFFF               	dw	65535	; errata NOP
  3916  0072A0                     __end_of_verificarIntervaloTesteBombas:
  3917                           	opt stack 0
  3918                           tblptru	equ	0xFF8
  3919                           tblptrh	equ	0xFF7
  3920                           tblptrl	equ	0xFF6
  3921                           tablat	equ	0xFF5
  3922                           postinc0	equ	0xFEE
  3923                           wreg	equ	0xFE8
  3924                           postdec1	equ	0xFE5
  3925                           fsr1l	equ	0xFE1
  3926                           status	equ	0xFD8
  3927                           
  3928 ;; *************** function _tela_testeBombas *****************
  3929 ;; Defined at:
  3930 ;;		line 8 in file "tela_TESTE_BOMBAS.h"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;		None
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;		None
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      void 
  3937 ;; Registers used:
  3938 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3944 ;;      Params:         0       0       0       0       0       0       0
  3945 ;;      Locals:         0       2       0       0       0       0       0
  3946 ;;      Temps:          0       2       0       0       0       0       0
  3947 ;;      Totals:         0       4       0       0       0       0       0
  3948 ;;Total ram usage:        4 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; Hardware stack levels required when called:    9
  3951 ;; This function calls:
  3952 ;;		_blink
  3953 ;;		_btPress
  3954 ;;		_sprintf
  3955 ;;		_writeEEPROM_ext
  3956 ;; This function is called by:
  3957 ;;		_main
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           	psect	text2
  3962  00264E                     __ptext2:
  3963                           	opt stack 0
  3964  00264E                     _tela_testeBombas:
  3965                           	opt stack 0
  3966  00264E  FFFF               	dw	65535	; assembler added errata NOP
  3967                           
  3968                           ;tela_TESTE_BOMBAS.h: 10: sprintf(line1, "#Proximo em %2d dias", (intervalo_teste_dia - 
      +                          dias_restante_teste));
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;incstack = 0
  3972  002650  0E7B               	movlw	low _line1
  3973  002652  0100               	movlb	0	; () banked
  3974  002654  6FA1               	movwf	sprintf@wh& (0+255),b
  3975  002656  0E01               	movlw	high _line1
  3976  002658  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3977  00265A  0E37               	movlw	low STR_73
  3978  00265C  6FA3               	movwf	sprintf@f& (0+255),b
  3979  00265E  0E7C               	movlw	high STR_73
  3980  002660  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3981  002662  51E8               	movf	_dias_restante_teste& (0+255),w,b
  3982  002664  6FB5               	movwf	??_tela_testeBombas& (0+255),b
  3983  002666  6BB6               	clrf	(??_tela_testeBombas+1)& (0+255),b
  3984  002668  1FB5               	comf	??_tela_testeBombas& (0+255),f,b
  3985  00266A  1FB6               	comf	(??_tela_testeBombas+1)& (0+255),f,b
  3986  00266C  4BB5               	infsnz	??_tela_testeBombas& (0+255),f,b
  3987  00266E  2BB6               	incf	(??_tela_testeBombas+1)& (0+255),f,b
  3988  002670  51E9               	movf	_intervalo_teste_dia& (0+255),w,b
  3989  002672  25B5               	addwf	??_tela_testeBombas& (0+255),w,b
  3990  002674  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3991  002676  0E00               	movlw	0
  3992  002678  21B6               	addwfc	(??_tela_testeBombas+1)& (0+255),w,b
  3993  00267A  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3994  00267C  EC95  F039         	call	_sprintf	;wreg free
  3995                           
  3996                           ;tela_TESTE_BOMBAS.h: 11: sprintf(line2, "INTERVALO: %2d dias", intervalo_teste_dia);
  3997  002680  0E66               	movlw	low _line2
  3998  002682  0100               	movlb	0	; () banked
  3999  002684  6FA1               	movwf	sprintf@wh& (0+255),b
  4000  002686  0E01               	movlw	high _line2
  4001  002688  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4002  00268A  0E88               	movlw	low STR_74
  4003  00268C  6FA3               	movwf	sprintf@f& (0+255),b
  4004  00268E  0E7C               	movlw	high STR_74
  4005  002690  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4006  002692  C0E9  F0A5         	movff	_intervalo_teste_dia,?_sprintf+4
  4007  002696  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4008  002698  EC95  F039         	call	_sprintf	;wreg free
  4009                           
  4010                           ;tela_TESTE_BOMBAS.h: 12: sprintf(line3, "HORARIO: %02d horas", horario_de_teste);
  4011  00269C  0E51               	movlw	low _line3
  4012  00269E  0100               	movlb	0	; () banked
  4013  0026A0  6FA1               	movwf	sprintf@wh& (0+255),b
  4014  0026A2  0E01               	movlw	high _line3
  4015  0026A4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4016  0026A6  0E9C               	movlw	low STR_75
  4017  0026A8  6FA3               	movwf	sprintf@f& (0+255),b
  4018  0026AA  0E7C               	movlw	high STR_75
  4019  0026AC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4020  0026AE  C0E7  F0A5         	movff	_horario_de_teste,?_sprintf+4
  4021  0026B2  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4022  0026B4  EC95  F039         	call	_sprintf	;wreg free
  4023                           
  4024                           ;tela_TESTE_BOMBAS.h: 13: sprintf(line4, "ATIVAR: %s", habilitaTesteAutomatico == 0 ? "N
      +                          ao" : "Sim");
  4025  0026B8  5073               	movf	_habilitaTesteAutomatico,w,c
  4026  0026BA  B4D8               	btfsc	status,2,c
  4027  0026BC  D005               	goto	l744
  4028  0026BE  0EF1               	movlw	low STR_78
  4029  0026C0  0100               	movlb	0	; () banked
  4030  0026C2  6FB7               	movwf	_tela_testeBombas$1424& (0+255),b
  4031  0026C4  0E7F               	movlw	high STR_78
  4032  0026C6  D005               	goto	L7
  4033  0026C8                     l744:
  4034  0026C8  FFFF               	dw	65535	; assembler added errata NOP
  4035                           
  4036                           ; BSR set to: 0
  4037  0026CA  0EF5               	movlw	low STR_77
  4038  0026CC  0100               	movlb	0	; () banked
  4039  0026CE  6FB7               	movwf	_tela_testeBombas$1424& (0+255),b
  4040  0026D0  0E7F               	movlw	high STR_77
  4041  0026D2                     L7:
  4042  0026D2  FFFF               	dw	65535	; assembler added errata NOP
  4043  0026D4  6FB8               	movwf	(_tela_testeBombas$1424+1)& (0+255),b
  4044                           
  4045                           ; BSR set to: 0
  4046                           
  4047                           ; BSR set to: 0
  4048  0026D6  0E3C               	movlw	low _line4
  4049  0026D8  6FA1               	movwf	sprintf@wh& (0+255),b
  4050  0026DA  0E01               	movlw	high _line4
  4051  0026DC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4052  0026DE  0E38               	movlw	low STR_76
  4053  0026E0  6FA3               	movwf	sprintf@f& (0+255),b
  4054  0026E2  0E7F               	movlw	high STR_76
  4055  0026E4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4056  0026E6  C0B7  F0A5         	movff	_tela_testeBombas$1424,?_sprintf+4
  4057  0026EA  C0B8  F0A6         	movff	_tela_testeBombas$1424+1,?_sprintf+5
  4058  0026EE  EC95  F039         	call	_sprintf	;wreg free
  4059                           
  4060                           ;tela_TESTE_BOMBAS.h: 15: if (btPress(1)) {
  4061  0026F2  0E01               	movlw	1
  4062  0026F4  ECE6  F03A         	call	_btPress
  4063  0026F8  0900               	iorlw	0
  4064  0026FA  B4D8               	btfsc	status,2,c
  4065  0026FC  D011               	goto	l747
  4066                           
  4067                           ;tela_TESTE_BOMBAS.h: 16: writeEEPROM_ext(6, intervalo_teste_dia);
  4068  0026FE  C0E9  F08C         	movff	_intervalo_teste_dia,writeEEPROM_ext@data
  4069  002702  0E06               	movlw	6
  4070  002704  EC72  F039         	call	_writeEEPROM_ext
  4071                           
  4072                           ;tela_TESTE_BOMBAS.h: 17: writeEEPROM_ext(11, horario_de_teste);
  4073  002708  C0E7  F08C         	movff	_horario_de_teste,writeEEPROM_ext@data
  4074  00270C  0E0B               	movlw	11
  4075  00270E  EC72  F039         	call	_writeEEPROM_ext
  4076                           
  4077                           ;tela_TESTE_BOMBAS.h: 18: writeEEPROM_ext(15, habilitaTesteAutomatico);
  4078  002712  C073  F08C         	movff	_habilitaTesteAutomatico,writeEEPROM_ext@data
  4079  002716  0E0F               	movlw	15
  4080  002718  EC72  F039         	call	_writeEEPROM_ext
  4081                           
  4082                           ;tela_TESTE_BOMBAS.h: 19: menu_posi = _menu_posi;
  4083  00271C  C0DF  F0E0         	movff	__menu_posi,_menu_posi
  4084  002720                     l747:
  4085  002720  FFFF               	dw	65535	; assembler added errata NOP
  4086                           
  4087                           ;tela_TESTE_BOMBAS.h: 20: }
  4088                           ;tela_TESTE_BOMBAS.h: 21: if (btPress(4)) {
  4089  002722  0E04               	movlw	4
  4090  002724  ECE6  F03A         	call	_btPress
  4091  002728  0900               	iorlw	0
  4092  00272A  B4D8               	btfsc	status,2,c
  4093  00272C  D068               	goto	l749
  4094                           
  4095                           ;tela_TESTE_BOMBAS.h: 22: option_posi++;
  4096  00272E  0100               	movlb	0	; () banked
  4097  002730  2BE1               	incf	_option_posi& (0+255),f,b
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;tela_TESTE_BOMBAS.h: 23: }
  4101                           ;tela_TESTE_BOMBAS.h: 24: switch (option_posi) {
  4102  002732  D065               	goto	l749
  4103  002734  FFFF               	dw	65535	; assembler added errata NOP
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;tela_TESTE_BOMBAS.h: 26: blink(line2, 11, 14);
  4107                           
  4108                           ; BSR set to: 0
  4109  002736  0E66               	movlw	low _line2
  4110  002738  6F80               	movwf	blink@line& (0+255),b
  4111  00273A  0E01               	movlw	high _line2
  4112  00273C  6F81               	movwf	(blink@line+1)& (0+255),b
  4113  00273E  0E0B               	movlw	11
  4114  002740  6F82               	movwf	blink@start& (0+255),b
  4115  002742  0E0E               	movlw	14
  4116  002744  6F83               	movwf	blink@end& (0+255),b
  4117  002746  ECAE  F038         	call	_blink	;wreg free
  4118                           
  4119                           ;tela_TESTE_BOMBAS.h: 27: if (btPress(3)) {
  4120  00274A  0E03               	movlw	3
  4121  00274C  ECE6  F03A         	call	_btPress
  4122  002750  0900               	iorlw	0
  4123  002752  B4D8               	btfsc	status,2,c
  4124  002754  D002               	goto	l751
  4125                           
  4126                           ;tela_TESTE_BOMBAS.h: 28: intervalo_teste_dia++;
  4127  002756  0100               	movlb	0	; () banked
  4128  002758  2BE9               	incf	_intervalo_teste_dia& (0+255),f,b
  4129  00275A                     l751:
  4130  00275A  FFFF               	dw	65535	; assembler added errata NOP
  4131                           
  4132                           ;tela_TESTE_BOMBAS.h: 29: }
  4133                           ;tela_TESTE_BOMBAS.h: 30: if (btPress(2)) {
  4134                           
  4135                           ; BSR set to: 0
  4136  00275C  0E02               	movlw	2
  4137  00275E  ECE6  F03A         	call	_btPress
  4138  002762  0900               	iorlw	0
  4139  002764  B4D8               	btfsc	status,2,c
  4140  002766  D058               	goto	l753
  4141                           
  4142                           ;tela_TESTE_BOMBAS.h: 31: intervalo_teste_dia--;
  4143  002768  0100               	movlb	0	; () banked
  4144  00276A  07E9               	decf	_intervalo_teste_dia& (0+255),f,b
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;tela_TESTE_BOMBAS.h: 32: }
  4148                           ;tela_TESTE_BOMBAS.h: 33: break;
  4149  00276C  D055               	goto	l753
  4150  00276E  FFFF               	dw	65535	; assembler added errata NOP
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;tela_TESTE_BOMBAS.h: 35: blink(line3, 9, 11);
  4154                           
  4155                           ; BSR set to: 0
  4156  002770  0E51               	movlw	low _line3
  4157  002772  6F80               	movwf	blink@line& (0+255),b
  4158  002774  0E01               	movlw	high _line3
  4159  002776  6F81               	movwf	(blink@line+1)& (0+255),b
  4160  002778  0E09               	movlw	9
  4161  00277A  6F82               	movwf	blink@start& (0+255),b
  4162  00277C  0E0B               	movlw	11
  4163  00277E  6F83               	movwf	blink@end& (0+255),b
  4164  002780  ECAE  F038         	call	_blink	;wreg free
  4165                           
  4166                           ;tela_TESTE_BOMBAS.h: 36: if (btPress(3)) {
  4167  002784  0E03               	movlw	3
  4168  002786  ECE6  F03A         	call	_btPress
  4169  00278A  0900               	iorlw	0
  4170  00278C  B4D8               	btfsc	status,2,c
  4171  00278E  D002               	goto	l755
  4172                           
  4173                           ;tela_TESTE_BOMBAS.h: 37: horario_de_teste++;
  4174  002790  0100               	movlb	0	; () banked
  4175  002792  2BE7               	incf	_horario_de_teste& (0+255),f,b
  4176  002794                     l755:
  4177  002794  FFFF               	dw	65535	; assembler added errata NOP
  4178                           
  4179                           ;tela_TESTE_BOMBAS.h: 38: }
  4180                           ;tela_TESTE_BOMBAS.h: 39: if (btPress(2)) {
  4181                           
  4182                           ; BSR set to: 0
  4183  002796  0E02               	movlw	2
  4184  002798  ECE6  F03A         	call	_btPress
  4185  00279C  0900               	iorlw	0
  4186  00279E  B4D8               	btfsc	status,2,c
  4187  0027A0  D002               	goto	l756
  4188                           
  4189                           ;tela_TESTE_BOMBAS.h: 40: horario_de_teste--;
  4190  0027A2  0100               	movlb	0	; () banked
  4191  0027A4  07E7               	decf	_horario_de_teste& (0+255),f,b
  4192  0027A6                     l756:
  4193  0027A6  FFFF               	dw	65535	; assembler added errata NOP
  4194                           
  4195                           ;tela_TESTE_BOMBAS.h: 41: }
  4196                           ;tela_TESTE_BOMBAS.h: 42: if (horario_de_teste > 23 || horario_de_teste < 0) {
  4197                           
  4198                           ; BSR set to: 0
  4199  0027A8  0E18               	movlw	24
  4200  0027AA  0100               	movlb	0	; () banked
  4201  0027AC  61E7               	cpfslt	_horario_de_teste& (0+255),b
  4202  0027AE  D001               	goto	l759
  4203  0027B0  D033               	goto	l753
  4204  0027B2                     l759:
  4205  0027B2  FFFF               	dw	65535	; assembler added errata NOP
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;tela_TESTE_BOMBAS.h: 43: horario_de_teste = 0;
  4209                           
  4210                           ; BSR set to: 0
  4211  0027B4  0E00               	movlw	0
  4212  0027B6  6FE7               	movwf	_horario_de_teste& (0+255),b
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;tela_TESTE_BOMBAS.h: 44: }
  4216                           ;tela_TESTE_BOMBAS.h: 45: break;
  4217  0027B8  D02F               	goto	l753
  4218  0027BA  FFFF               	dw	65535	; assembler added errata NOP
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;tela_TESTE_BOMBAS.h: 47: blink(line4, 9, 11);
  4222                           
  4223                           ; BSR set to: 0
  4224  0027BC  0E3C               	movlw	low _line4
  4225  0027BE  6F80               	movwf	blink@line& (0+255),b
  4226  0027C0  0E01               	movlw	high _line4
  4227  0027C2  6F81               	movwf	(blink@line+1)& (0+255),b
  4228  0027C4  0E09               	movlw	9
  4229  0027C6  6F82               	movwf	blink@start& (0+255),b
  4230  0027C8  0E0B               	movlw	11
  4231  0027CA  6F83               	movwf	blink@end& (0+255),b
  4232  0027CC  ECAE  F038         	call	_blink	;wreg free
  4233                           
  4234                           ;tela_TESTE_BOMBAS.h: 48: if (btPress(3)) {
  4235  0027D0  0E03               	movlw	3
  4236  0027D2  ECE6  F03A         	call	_btPress
  4237  0027D6  0900               	iorlw	0
  4238  0027D8  B4D8               	btfsc	status,2,c
  4239  0027DA  D002               	goto	l761
  4240                           
  4241                           ;tela_TESTE_BOMBAS.h: 49: habilitaTesteAutomatico = 1;
  4242  0027DC  0E01               	movlw	1
  4243  0027DE  6E73               	movwf	_habilitaTesteAutomatico,c
  4244  0027E0                     l761:
  4245  0027E0  FFFF               	dw	65535	; assembler added errata NOP
  4246                           
  4247                           ;tela_TESTE_BOMBAS.h: 50: }
  4248                           ;tela_TESTE_BOMBAS.h: 51: if (btPress(2)) {
  4249  0027E2  0E02               	movlw	2
  4250  0027E4  ECE6  F03A         	call	_btPress
  4251  0027E8  0900               	iorlw	0
  4252  0027EA  B4D8               	btfsc	status,2,c
  4253  0027EC  D015               	goto	l753
  4254                           
  4255                           ;tela_TESTE_BOMBAS.h: 52: habilitaTesteAutomatico = 0;
  4256  0027EE  0E00               	movlw	0
  4257  0027F0  6E73               	movwf	_habilitaTesteAutomatico,c
  4258                           
  4259                           ;tela_TESTE_BOMBAS.h: 53: }
  4260                           ;tela_TESTE_BOMBAS.h: 54: break;
  4261  0027F2  D012               	goto	l753
  4262  0027F4  FFFF               	dw	65535	; assembler added errata NOP
  4263  0027F6  0E00               	movlw	0
  4264  0027F8  0100               	movlb	0	; () banked
  4265  0027FA  6FE1               	movwf	_option_posi& (0+255),b
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;tela_TESTE_BOMBAS.h: 57: }
  4269                           
  4270                           ;tela_TESTE_BOMBAS.h: 56: break;
  4271  0027FC  D00D               	goto	l753
  4272  0027FE                     l749:
  4273  0027FE  FFFF               	dw	65535	; assembler added errata NOP
  4274                           
  4275                           ; BSR set to: 0
  4276  002800  0100               	movlb	0	; () banked
  4277  002802  51E1               	movf	_option_posi& (0+255),w,b
  4278                           
  4279                           ; Switch size 1, requested type "space"
  4280                           ; Number of cases is 3, Range of values is 0 to 2
  4281                           ; switch strategies available:
  4282                           ; Name         Instructions Cycles
  4283                           ; simple_byte           10     6 (average)
  4284                           ;	Chosen strategy is simple_byte
  4285  002804  0A00               	xorlw	0	; case 0
  4286  002806  B4D8               	btfsc	status,2,c
  4287  002808  D795               	goto	l750
  4288  00280A  0A01               	xorlw	1	; case 1
  4289  00280C  B4D8               	btfsc	status,2,c
  4290  00280E  D7AF               	goto	l754
  4291  002810  0A03               	xorlw	3	; case 2
  4292  002812  B4D8               	btfsc	status,2,c
  4293  002814  D7D2               	goto	l760
  4294  002816  D7EE               	goto	l763
  4295  002818                     l753:
  4296  002818  FFFF               	dw	65535	; assembler added errata NOP
  4297                           
  4298                           ; BSR set to: 0
  4299  00281A  0012               	return		;funcret
  4300  00281C  FFFF               	dw	65535	; errata NOP
  4301  00281E                     __end_of_tela_testeBombas:
  4302                           	opt stack 0
  4303                           tblptru	equ	0xFF8
  4304                           tblptrh	equ	0xFF7
  4305                           tblptrl	equ	0xFF6
  4306                           tablat	equ	0xFF5
  4307                           postinc0	equ	0xFEE
  4308                           wreg	equ	0xFE8
  4309                           postdec1	equ	0xFE5
  4310                           fsr1l	equ	0xFE1
  4311                           status	equ	0xFD8
  4312                           
  4313 ;; *************** function _tela_ajusteRTC *****************
  4314 ;; Defined at:
  4315 ;;		line 11 in file "tela_RELOGIO.h"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;		None
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4329 ;;      Params:         0       0       0       0       0       0       0
  4330 ;;      Locals:         0       0       0       0       0       0       0
  4331 ;;      Temps:          0       0       0       0       0       0       0
  4332 ;;      Totals:         0       0       0       0       0       0       0
  4333 ;;Total ram usage:        0 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    9
  4336 ;; This function calls:
  4337 ;;		_blink
  4338 ;;		_btPress
  4339 ;;		_setDS1307TimeDate
  4340 ;;		_sprintf
  4341 ;;		_validaRTC
  4342 ;; This function is called by:
  4343 ;;		_main
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text3
  4348  002002                     __ptext3:
  4349                           	opt stack 0
  4350  002002                     _tela_ajusteRTC:
  4351                           	opt stack 0
  4352  002002  FFFF               	dw	65535	; assembler added errata NOP
  4353                           
  4354                           ;tela_RELOGIO.h: 12: sprintf(line1, "DATA:");
  4355                           
  4356                           ;incstack = 0
  4357  002004  0E7B               	movlw	low _line1
  4358  002006  0100               	movlb	0	; () banked
  4359  002008  6FA1               	movwf	sprintf@wh& (0+255),b
  4360  00200A  0E01               	movlw	high _line1
  4361  00200C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4362  00200E  0ECB               	movlw	low STR_69
  4363  002010  6FA3               	movwf	sprintf@f& (0+255),b
  4364  002012  0E7F               	movlw	high STR_69
  4365  002014  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4366  002016  EC95  F039         	call	_sprintf	;wreg free
  4367                           
  4368                           ;tela_RELOGIO.h: 13: sprintf(line2, "%02d/%02d/%02d", rtc.date, rtc.month, rtc.year);
  4369  00201A  0E66               	movlw	low _line2
  4370  00201C  0100               	movlb	0	; () banked
  4371  00201E  6FA1               	movwf	sprintf@wh& (0+255),b
  4372  002020  0E01               	movlw	high _line2
  4373  002022  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4374  002024  0E01               	movlw	low STR_70
  4375  002026  6FA3               	movwf	sprintf@f& (0+255),b
  4376  002028  0E7E               	movlw	high STR_70
  4377  00202A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4378  00202C  C07C  F0A5         	movff	_rtc+4,?_sprintf+4
  4379  002030  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4380  002032  C07D  F0A7         	movff	_rtc+5,?_sprintf+6
  4381  002036  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4382  002038  C07E  F0A9         	movff	_rtc+6,?_sprintf+8
  4383  00203C  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4384  00203E  EC95  F039         	call	_sprintf	;wreg free
  4385                           
  4386                           ;tela_RELOGIO.h: 14: sprintf(&line1[11], "HORA:");
  4387  002042  0E86               	movlw	low (_line1+11)
  4388  002044  0100               	movlb	0	; () banked
  4389  002046  6FA1               	movwf	sprintf@wh& (0+255),b
  4390  002048  0E01               	movlw	high (_line1+11)
  4391  00204A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4392  00204C  0EC5               	movlw	low STR_71
  4393  00204E  6FA3               	movwf	sprintf@f& (0+255),b
  4394  002050  0E7F               	movlw	high STR_71
  4395  002052  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4396  002054  EC95  F039         	call	_sprintf	;wreg free
  4397                           
  4398                           ;tela_RELOGIO.h: 15: sprintf(&line2[11], "%02d:%02d:%02d", rtc.hour, rtc.min, rtc.sec);
  4399  002058  0E71               	movlw	low (_line2+11)
  4400  00205A  0100               	movlb	0	; () banked
  4401  00205C  6FA1               	movwf	sprintf@wh& (0+255),b
  4402  00205E  0E01               	movlw	high (_line2+11)
  4403  002060  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4404  002062  0E10               	movlw	low STR_72
  4405  002064  6FA3               	movwf	sprintf@f& (0+255),b
  4406  002066  0E7E               	movlw	high STR_72
  4407  002068  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4408  00206A  C07B  F0A5         	movff	_rtc+3,?_sprintf+4
  4409  00206E  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4410  002070  C07A  F0A7         	movff	_rtc+2,?_sprintf+6
  4411  002074  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4412  002076  C079  F0A9         	movff	_rtc+1,?_sprintf+8
  4413  00207A  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4414  00207C  EC95  F039         	call	_sprintf	;wreg free
  4415                           
  4416                           ;tela_RELOGIO.h: 17: if (btPress(4)) {
  4417  002080  0E04               	movlw	4
  4418  002082  ECE6  F03A         	call	_btPress
  4419  002086  0900               	iorlw	0
  4420  002088  B4D8               	btfsc	status,2,c
  4421  00208A  D004               	goto	l717
  4422                           
  4423                           ;tela_RELOGIO.h: 18: ajst_rtc = 1;
  4424  00208C  0E01               	movlw	1
  4425  00208E  6E68               	movwf	_ajst_rtc,c
  4426                           
  4427                           ;tela_RELOGIO.h: 19: option_posi++;
  4428  002090  0100               	movlb	0	; () banked
  4429  002092  2BE1               	incf	_option_posi& (0+255),f,b
  4430  002094                     l717:
  4431  002094  FFFF               	dw	65535	; assembler added errata NOP
  4432                           
  4433                           ;tela_RELOGIO.h: 20: }
  4434                           ;tela_RELOGIO.h: 21: if (btPress(1)) {
  4435                           
  4436                           ; BSR set to: 0
  4437  002096  0E01               	movlw	1
  4438  002098  ECE6  F03A         	call	_btPress
  4439  00209C  0900               	iorlw	0
  4440  00209E  B4D8               	btfsc	status,2,c
  4441  0020A0  D0B0               	goto	l719
  4442                           
  4443                           ;tela_RELOGIO.h: 22: ajst_rtc = 0;
  4444  0020A2  0E00               	movlw	0
  4445  0020A4  6E68               	movwf	_ajst_rtc,c
  4446                           
  4447                           ;tela_RELOGIO.h: 23: option_posi = 0;
  4448  0020A6  0E00               	movlw	0
  4449  0020A8  0100               	movlb	0	; () banked
  4450  0020AA  6FE1               	movwf	_option_posi& (0+255),b
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;tela_RELOGIO.h: 24: setDS1307TimeDate(&rtc);
  4454  0020AC  0E78               	movlw	low _rtc
  4455  0020AE  6F8C               	movwf	setDS1307TimeDate@ptrToUserVal& (0+255),b
  4456  0020B0  0E00               	movlw	high _rtc
  4457  0020B2  6F8D               	movwf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  4458  0020B4  EC99  F019         	call	_setDS1307TimeDate	;wreg free
  4459                           
  4460                           ;tela_RELOGIO.h: 25: menu_posi = _menu_posi;
  4461  0020B8  C0DF  F0E0         	movff	__menu_posi,_menu_posi
  4462                           
  4463                           ;tela_RELOGIO.h: 26: _min++;
  4464  0020BC  0100               	movlb	0	; () banked
  4465  0020BE  2BEE               	incf	__min& (0+255),f,b
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;tela_RELOGIO.h: 27: }
  4469                           ;tela_RELOGIO.h: 28: switch (option_posi) {
  4470  0020C0  D0A0               	goto	l719
  4471  0020C2  FFFF               	dw	65535	; assembler added errata NOP
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;tela_RELOGIO.h: 30: blink(line2, 1, 2);
  4475                           
  4476                           ; BSR set to: 0
  4477  0020C4  0E66               	movlw	low _line2
  4478  0020C6  6F80               	movwf	blink@line& (0+255),b
  4479  0020C8  0E01               	movlw	high _line2
  4480  0020CA  6F81               	movwf	(blink@line+1)& (0+255),b
  4481  0020CC  0E01               	movlw	1
  4482  0020CE  6F82               	movwf	blink@start& (0+255),b
  4483  0020D0  0E02               	movlw	2
  4484  0020D2  6F83               	movwf	blink@end& (0+255),b
  4485  0020D4  ECAE  F038         	call	_blink	;wreg free
  4486                           
  4487                           ;tela_RELOGIO.h: 31: if (btPress(3)) {
  4488  0020D8  0E03               	movlw	3
  4489  0020DA  ECE6  F03A         	call	_btPress
  4490  0020DE  0900               	iorlw	0
  4491  0020E0  A4D8               	btfss	status,2,c
  4492                           
  4493                           ;tela_RELOGIO.h: 32: rtc.date++;
  4494  0020E2  2A7C               	incf	_rtc+4,f,c
  4495                           
  4496                           ;tela_RELOGIO.h: 33: }
  4497                           ;tela_RELOGIO.h: 34: if (btPress(2)) {
  4498  0020E4  0E02               	movlw	2
  4499  0020E6  ECE6  F03A         	call	_btPress
  4500  0020EA  0900               	iorlw	0
  4501  0020EC  B4D8               	btfsc	status,2,c
  4502  0020EE  D09F               	goto	l723
  4503                           
  4504                           ;tela_RELOGIO.h: 35: rtc.date--;
  4505  0020F0  067C               	decf	_rtc+4,f,c
  4506                           
  4507                           ;tela_RELOGIO.h: 36: }
  4508                           ;tela_RELOGIO.h: 37: break;
  4509  0020F2  D09D               	goto	l723
  4510  0020F4  FFFF               	dw	65535	; assembler added errata NOP
  4511                           
  4512                           ;tela_RELOGIO.h: 39: blink(line2, 4, 5);
  4513  0020F6  0E66               	movlw	low _line2
  4514  0020F8  0100               	movlb	0	; () banked
  4515  0020FA  6F80               	movwf	blink@line& (0+255),b
  4516  0020FC  0E01               	movlw	high _line2
  4517  0020FE  6F81               	movwf	(blink@line+1)& (0+255),b
  4518  002100  0E04               	movlw	4
  4519  002102  6F82               	movwf	blink@start& (0+255),b
  4520  002104  0E05               	movlw	5
  4521  002106  6F83               	movwf	blink@end& (0+255),b
  4522  002108  ECAE  F038         	call	_blink	;wreg free
  4523                           
  4524                           ;tela_RELOGIO.h: 40: if (btPress(3)) {
  4525  00210C  0E03               	movlw	3
  4526  00210E  ECE6  F03A         	call	_btPress
  4527  002112  0900               	iorlw	0
  4528  002114  A4D8               	btfss	status,2,c
  4529                           
  4530                           ;tela_RELOGIO.h: 41: rtc.month++;
  4531  002116  2A7D               	incf	_rtc+5,f,c
  4532                           
  4533                           ;tela_RELOGIO.h: 42: }
  4534                           ;tela_RELOGIO.h: 43: if (btPress(2)) {
  4535  002118  0E02               	movlw	2
  4536  00211A  ECE6  F03A         	call	_btPress
  4537  00211E  0900               	iorlw	0
  4538  002120  B4D8               	btfsc	status,2,c
  4539  002122  D085               	goto	l723
  4540                           
  4541                           ;tela_RELOGIO.h: 44: rtc.month--;
  4542  002124  067D               	decf	_rtc+5,f,c
  4543                           
  4544                           ;tela_RELOGIO.h: 45: }
  4545                           ;tela_RELOGIO.h: 46: break;
  4546  002126  D083               	goto	l723
  4547  002128  FFFF               	dw	65535	; assembler added errata NOP
  4548                           
  4549                           ;tela_RELOGIO.h: 48: blink(line2, 7, 8);
  4550  00212A  0E66               	movlw	low _line2
  4551  00212C  0100               	movlb	0	; () banked
  4552  00212E  6F80               	movwf	blink@line& (0+255),b
  4553  002130  0E01               	movlw	high _line2
  4554  002132  6F81               	movwf	(blink@line+1)& (0+255),b
  4555  002134  0E07               	movlw	7
  4556  002136  6F82               	movwf	blink@start& (0+255),b
  4557  002138  0E08               	movlw	8
  4558  00213A  6F83               	movwf	blink@end& (0+255),b
  4559  00213C  ECAE  F038         	call	_blink	;wreg free
  4560                           
  4561                           ;tela_RELOGIO.h: 49: if (btPress(3)) {
  4562  002140  0E03               	movlw	3
  4563  002142  ECE6  F03A         	call	_btPress
  4564  002146  0900               	iorlw	0
  4565  002148  A4D8               	btfss	status,2,c
  4566                           
  4567                           ;tela_RELOGIO.h: 50: rtc.year++;
  4568  00214A  2A7E               	incf	_rtc+6,f,c
  4569                           
  4570                           ;tela_RELOGIO.h: 51: }
  4571                           ;tela_RELOGIO.h: 52: if (btPress(2)) {
  4572  00214C  0E02               	movlw	2
  4573  00214E  ECE6  F03A         	call	_btPress
  4574  002152  0900               	iorlw	0
  4575  002154  B4D8               	btfsc	status,2,c
  4576  002156  D06B               	goto	l723
  4577                           
  4578                           ;tela_RELOGIO.h: 53: rtc.year--;
  4579  002158  067E               	decf	_rtc+6,f,c
  4580                           
  4581                           ;tela_RELOGIO.h: 54: }
  4582                           ;tela_RELOGIO.h: 55: break;
  4583  00215A  D069               	goto	l723
  4584  00215C  FFFF               	dw	65535	; assembler added errata NOP
  4585                           
  4586                           ;tela_RELOGIO.h: 57: blink(line2, 12, 13);
  4587  00215E  0E66               	movlw	low _line2
  4588  002160  0100               	movlb	0	; () banked
  4589  002162  6F80               	movwf	blink@line& (0+255),b
  4590  002164  0E01               	movlw	high _line2
  4591  002166  6F81               	movwf	(blink@line+1)& (0+255),b
  4592  002168  0E0C               	movlw	12
  4593  00216A  6F82               	movwf	blink@start& (0+255),b
  4594  00216C  0E0D               	movlw	13
  4595  00216E  6F83               	movwf	blink@end& (0+255),b
  4596  002170  ECAE  F038         	call	_blink	;wreg free
  4597                           
  4598                           ;tela_RELOGIO.h: 58: if (btPress(3)) {
  4599  002174  0E03               	movlw	3
  4600  002176  ECE6  F03A         	call	_btPress
  4601  00217A  0900               	iorlw	0
  4602  00217C  A4D8               	btfss	status,2,c
  4603                           
  4604                           ;tela_RELOGIO.h: 59: rtc.hour++;
  4605  00217E  2A7B               	incf	_rtc+3,f,c
  4606                           
  4607                           ;tela_RELOGIO.h: 60: }
  4608                           ;tela_RELOGIO.h: 61: if (btPress(2)) {
  4609  002180  0E02               	movlw	2
  4610  002182  ECE6  F03A         	call	_btPress
  4611  002186  0900               	iorlw	0
  4612  002188  B4D8               	btfsc	status,2,c
  4613  00218A  D051               	goto	l723
  4614                           
  4615                           ;tela_RELOGIO.h: 62: rtc.hour--;
  4616  00218C  067B               	decf	_rtc+3,f,c
  4617                           
  4618                           ;tela_RELOGIO.h: 63: }
  4619                           ;tela_RELOGIO.h: 64: break;
  4620  00218E  D04F               	goto	l723
  4621  002190  FFFF               	dw	65535	; assembler added errata NOP
  4622                           
  4623                           ;tela_RELOGIO.h: 66: blink(line2, 15, 16);
  4624  002192  0E66               	movlw	low _line2
  4625  002194  0100               	movlb	0	; () banked
  4626  002196  6F80               	movwf	blink@line& (0+255),b
  4627  002198  0E01               	movlw	high _line2
  4628  00219A  6F81               	movwf	(blink@line+1)& (0+255),b
  4629  00219C  0E0F               	movlw	15
  4630  00219E  6F82               	movwf	blink@start& (0+255),b
  4631  0021A0  0E10               	movlw	16
  4632  0021A2  6F83               	movwf	blink@end& (0+255),b
  4633  0021A4  ECAE  F038         	call	_blink	;wreg free
  4634                           
  4635                           ;tela_RELOGIO.h: 67: if (btPress(3)) {
  4636  0021A8  0E03               	movlw	3
  4637  0021AA  ECE6  F03A         	call	_btPress
  4638  0021AE  0900               	iorlw	0
  4639  0021B0  A4D8               	btfss	status,2,c
  4640                           
  4641                           ;tela_RELOGIO.h: 68: rtc.min++;
  4642  0021B2  2A7A               	incf	_rtc+2,f,c
  4643                           
  4644                           ;tela_RELOGIO.h: 69: }
  4645                           ;tela_RELOGIO.h: 70: if (btPress(2)) {
  4646  0021B4  0E02               	movlw	2
  4647  0021B6  ECE6  F03A         	call	_btPress
  4648  0021BA  0900               	iorlw	0
  4649  0021BC  B4D8               	btfsc	status,2,c
  4650  0021BE  D037               	goto	l723
  4651                           
  4652                           ;tela_RELOGIO.h: 71: rtc.min--;
  4653  0021C0  067A               	decf	_rtc+2,f,c
  4654                           
  4655                           ;tela_RELOGIO.h: 72: }
  4656                           ;tela_RELOGIO.h: 73: break;
  4657  0021C2  D035               	goto	l723
  4658  0021C4  FFFF               	dw	65535	; assembler added errata NOP
  4659                           
  4660                           ;tela_RELOGIO.h: 75: blink(line2, 18, 19);
  4661  0021C6  0E66               	movlw	low _line2
  4662  0021C8  0100               	movlb	0	; () banked
  4663  0021CA  6F80               	movwf	blink@line& (0+255),b
  4664  0021CC  0E01               	movlw	high _line2
  4665  0021CE  6F81               	movwf	(blink@line+1)& (0+255),b
  4666  0021D0  0E12               	movlw	18
  4667  0021D2  6F82               	movwf	blink@start& (0+255),b
  4668  0021D4  0E13               	movlw	19
  4669  0021D6  6F83               	movwf	blink@end& (0+255),b
  4670  0021D8  ECAE  F038         	call	_blink	;wreg free
  4671                           
  4672                           ;tela_RELOGIO.h: 76: if (btPress(3)) {
  4673  0021DC  0E03               	movlw	3
  4674  0021DE  ECE6  F03A         	call	_btPress
  4675  0021E2  0900               	iorlw	0
  4676  0021E4  A4D8               	btfss	status,2,c
  4677                           
  4678                           ;tela_RELOGIO.h: 77: rtc.sec++;
  4679  0021E6  2A79               	incf	_rtc+1,f,c
  4680                           
  4681                           ;tela_RELOGIO.h: 78: }
  4682                           ;tela_RELOGIO.h: 79: if (btPress(2)) {
  4683  0021E8  0E02               	movlw	2
  4684  0021EA  ECE6  F03A         	call	_btPress
  4685  0021EE  0900               	iorlw	0
  4686  0021F0  B4D8               	btfsc	status,2,c
  4687  0021F2  D01D               	goto	l723
  4688                           
  4689                           ;tela_RELOGIO.h: 80: rtc.sec--;
  4690  0021F4  0679               	decf	_rtc+1,f,c
  4691                           
  4692                           ;tela_RELOGIO.h: 81: }
  4693                           ;tela_RELOGIO.h: 82: break;
  4694  0021F6  D01B               	goto	l723
  4695  0021F8  FFFF               	dw	65535	; assembler added errata NOP
  4696  0021FA  0E01               	movlw	1
  4697  0021FC  0100               	movlb	0	; () banked
  4698  0021FE  6FE1               	movwf	_option_posi& (0+255),b
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;tela_RELOGIO.h: 85: }
  4702                           
  4703                           ;tela_RELOGIO.h: 84: break;
  4704  002200  D016               	goto	l723
  4705  002202                     l719:
  4706  002202  FFFF               	dw	65535	; assembler added errata NOP
  4707                           
  4708                           ; BSR set to: 0
  4709  002204  0100               	movlb	0	; () banked
  4710  002206  51E1               	movf	_option_posi& (0+255),w,b
  4711                           
  4712                           ; Switch size 1, requested type "space"
  4713                           ; Number of cases is 6, Range of values is 1 to 6
  4714                           ; switch strategies available:
  4715                           ; Name         Instructions Cycles
  4716                           ; simple_byte           19    10 (average)
  4717                           ;	Chosen strategy is simple_byte
  4718  002208  0A01               	xorlw	1	; case 1
  4719  00220A  B4D8               	btfsc	status,2,c
  4720  00220C  D75A               	goto	l720
  4721  00220E  0A03               	xorlw	3	; case 2
  4722  002210  B4D8               	btfsc	status,2,c
  4723  002212  D770               	goto	l724
  4724  002214  0A01               	xorlw	1	; case 3
  4725  002216  B4D8               	btfsc	status,2,c
  4726  002218  D787               	goto	l727
  4727  00221A  0A07               	xorlw	7	; case 4
  4728  00221C  B4D8               	btfsc	status,2,c
  4729  00221E  D79E               	goto	l730
  4730  002220  0A01               	xorlw	1	; case 5
  4731  002222  B4D8               	btfsc	status,2,c
  4732  002224  D7B5               	goto	l733
  4733  002226  0A03               	xorlw	3	; case 6
  4734  002228  B4D8               	btfsc	status,2,c
  4735  00222A  D7CC               	goto	l736
  4736  00222C  D7E5               	goto	l739
  4737  00222E                     l723:
  4738  00222E  FFFF               	dw	65535	; assembler added errata NOP
  4739                           
  4740                           ;tela_RELOGIO.h: 86: validaRTC();
  4741                           
  4742                           ; BSR set to: 0
  4743  002230  ECDD  F039         	call	_validaRTC	;wreg free
  4744  002234  0012               	return		;funcret
  4745  002236  FFFF               	dw	65535	; errata NOP
  4746  002238                     __end_of_tela_ajusteRTC:
  4747                           	opt stack 0
  4748                           tblptru	equ	0xFF8
  4749                           tblptrh	equ	0xFF7
  4750                           tblptrl	equ	0xFF6
  4751                           tablat	equ	0xFF5
  4752                           postinc0	equ	0xFEE
  4753                           wreg	equ	0xFE8
  4754                           postdec1	equ	0xFE5
  4755                           fsr1l	equ	0xFE1
  4756                           status	equ	0xFD8
  4757                           
  4758 ;; *************** function _validaRTC *****************
  4759 ;; Defined at:
  4760 ;;		line 108 in file "ds1307.h"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;		None
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;		None
  4765 ;; Return value:  Size  Location     Type
  4766 ;;                  2  290[None  ] int 
  4767 ;; Registers used:
  4768 ;;		wreg, status,2, status,0
  4769 ;; Tracked objects:
  4770 ;;		On entry : 0/0
  4771 ;;		On exit  : 0/0
  4772 ;;		Unchanged: 0/0
  4773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4774 ;;      Params:         0       0       0       0       0       0       0
  4775 ;;      Locals:         0       0       0       0       0       0       0
  4776 ;;      Temps:          0       0       0       0       0       0       0
  4777 ;;      Totals:         0       0       0       0       0       0       0
  4778 ;;Total ram usage:        0 bytes
  4779 ;; Hardware stack levels used:    1
  4780 ;; Hardware stack levels required when called:    6
  4781 ;; This function calls:
  4782 ;;		Nothing
  4783 ;; This function is called by:
  4784 ;;		_tela_ajusteRTC
  4785 ;; This function uses a non-reentrant model
  4786 ;;
  4787                           
  4788                           	psect	text4
  4789  0073BA                     __ptext4:
  4790                           	opt stack 0
  4791  0073BA                     _validaRTC:
  4792                           	opt stack 0
  4793  0073BA  FFFF               	dw	65535	; assembler added errata NOP
  4794                           
  4795                           ;ds1307.h: 109: if (rtc.date > 31) rtc.date = 0;
  4796                           
  4797                           ;incstack = 0
  4798  0073BC  0E1F               	movlw	31
  4799  0073BE  647C               	cpfsgt	_rtc+4,c
  4800  0073C0  D002               	goto	l291
  4801  0073C2  0E00               	movlw	0
  4802  0073C4  6E7C               	movwf	_rtc+4,c
  4803  0073C6                     l291:
  4804  0073C6  FFFF               	dw	65535	; assembler added errata NOP
  4805                           
  4806                           ;ds1307.h: 110: if (rtc.hour > 23) rtc.hour = 0;
  4807  0073C8  0E17               	movlw	23
  4808  0073CA  647B               	cpfsgt	_rtc+3,c
  4809  0073CC  D002               	goto	l292
  4810  0073CE  0E00               	movlw	0
  4811  0073D0  6E7B               	movwf	_rtc+3,c
  4812  0073D2                     l292:
  4813  0073D2  FFFF               	dw	65535	; assembler added errata NOP
  4814                           
  4815                           ;ds1307.h: 111: if (rtc.min > 59) rtc.min = 0;
  4816  0073D4  0E3B               	movlw	59
  4817  0073D6  647A               	cpfsgt	_rtc+2,c
  4818  0073D8  D002               	goto	l293
  4819  0073DA  0E00               	movlw	0
  4820  0073DC  6E7A               	movwf	_rtc+2,c
  4821  0073DE                     l293:
  4822  0073DE  FFFF               	dw	65535	; assembler added errata NOP
  4823                           
  4824                           ;ds1307.h: 112: if (rtc.month > 12) rtc.month = 0;
  4825  0073E0  0E0C               	movlw	12
  4826  0073E2  647D               	cpfsgt	_rtc+5,c
  4827  0073E4  D002               	goto	l294
  4828  0073E6  0E00               	movlw	0
  4829  0073E8  6E7D               	movwf	_rtc+5,c
  4830  0073EA                     l294:
  4831  0073EA  FFFF               	dw	65535	; assembler added errata NOP
  4832                           
  4833                           ;ds1307.h: 113: if (rtc.sec > 59) rtc.sec = 0;
  4834  0073EC  0E3B               	movlw	59
  4835  0073EE  6479               	cpfsgt	_rtc+1,c
  4836  0073F0  D002               	goto	l295
  4837  0073F2  0E00               	movlw	0
  4838  0073F4  6E79               	movwf	_rtc+1,c
  4839  0073F6                     l295:
  4840  0073F6  FFFF               	dw	65535	; assembler added errata NOP
  4841                           
  4842                           ;ds1307.h: 114: if (rtc.year > 99) rtc.year = 0;
  4843  0073F8  0E63               	movlw	99
  4844  0073FA  647E               	cpfsgt	_rtc+6,c
  4845  0073FC  D002               	goto	l296
  4846  0073FE  0E00               	movlw	0
  4847  007400  6E7E               	movwf	_rtc+6,c
  4848  007402                     l296:
  4849  007402  FFFF               	dw	65535	; assembler added errata NOP
  4850  007404  0012               	return		;funcret
  4851  007406  FFFF               	dw	65535	; errata NOP
  4852  007408                     __end_of_validaRTC:
  4853                           	opt stack 0
  4854                           tblptru	equ	0xFF8
  4855                           tblptrh	equ	0xFF7
  4856                           tblptrl	equ	0xFF6
  4857                           tablat	equ	0xFF5
  4858                           postinc0	equ	0xFEE
  4859                           wreg	equ	0xFE8
  4860                           postdec1	equ	0xFE5
  4861                           fsr1l	equ	0xFE1
  4862                           status	equ	0xFD8
  4863                           
  4864 ;; *************** function _setDS1307TimeDate *****************
  4865 ;; Defined at:
  4866 ;;		line 36 in file "ds1307.h"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  4869 ;;		 -> rtc(7), 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;		None
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      void 
  4874 ;; Registers used:
  4875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4881 ;;      Params:         0       2       0       0       0       0       0
  4882 ;;      Locals:         0       0       0       0       0       0       0
  4883 ;;      Temps:          0       1       0       0       0       0       0
  4884 ;;      Totals:         0       3       0       0       0       0       0
  4885 ;;Total ram usage:        3 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    8
  4888 ;; This function calls:
  4889 ;;		_DECtoBCD
  4890 ;;		_I2C_Start
  4891 ;;		_I2C_Stop
  4892 ;;		_I2C_Write
  4893 ;; This function is called by:
  4894 ;;		_tela_ajusteRTC
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           	psect	text5
  4899  003332                     __ptext5:
  4900                           	opt stack 0
  4901  003332                     _setDS1307TimeDate:
  4902                           	opt stack 0
  4903  003332  FFFF               	dw	65535	; assembler added errata NOP
  4904                           
  4905                           ;ds1307.h: 38: I2C_Start();
  4906                           
  4907                           ;incstack = 0
  4908  003334  EC11  F036         	call	_I2C_Start	;wreg free
  4909                           
  4910                           ;ds1307.h: 39: I2C_Write(0xD0);
  4911  003338  0E00               	movlw	0
  4912  00333A  0100               	movlb	0	; () banked
  4913  00333C  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4914  00333E  0ED0               	movlw	208
  4915  003340  6F8A               	movwf	I2C_Write@d& (0+255),b
  4916  003342  EC2A  F036         	call	_I2C_Write	;wreg free
  4917                           
  4918                           ;ds1307.h: 40: I2C_Write(0x00);
  4919  003346  0E00               	movlw	0
  4920  003348  0100               	movlb	0	; () banked
  4921  00334A  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4922  00334C  0E00               	movlw	0
  4923  00334E  6F8A               	movwf	I2C_Write@d& (0+255),b
  4924  003350  EC2A  F036         	call	_I2C_Write	;wreg free
  4925                           
  4926                           ;ds1307.h: 41: I2C_Write(DECtoBCD(ptrToUserVal-> sec));
  4927  003354  0100               	movlb	0	; () banked
  4928  003356  EE20 F001          	lfsr	2,1
  4929  00335A  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4930  00335C  26D9               	addwf	fsr2l,f,c
  4931  00335E  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4932  003360  22DA               	addwfc	fsr2h,f,c
  4933  003362  50DF               	movf	indf2,w,c
  4934  003364  EC0E  F039         	call	_DECtoBCD
  4935  003368  0100               	movlb	0	; () banked
  4936  00336A  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4937  00336C  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4938  00336E  6F8A               	movwf	I2C_Write@d& (0+255),b
  4939  003370  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4940  003372  EC2A  F036         	call	_I2C_Write	;wreg free
  4941                           
  4942                           ;ds1307.h: 42: I2C_Write(DECtoBCD(ptrToUserVal-> min));
  4943  003376  0100               	movlb	0	; () banked
  4944  003378  EE20 F002          	lfsr	2,2
  4945  00337C  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4946  00337E  26D9               	addwf	fsr2l,f,c
  4947  003380  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4948  003382  22DA               	addwfc	fsr2h,f,c
  4949  003384  50DF               	movf	indf2,w,c
  4950  003386  EC0E  F039         	call	_DECtoBCD
  4951  00338A  0100               	movlb	0	; () banked
  4952  00338C  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4953  00338E  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4954  003390  6F8A               	movwf	I2C_Write@d& (0+255),b
  4955  003392  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4956  003394  EC2A  F036         	call	_I2C_Write	;wreg free
  4957                           
  4958                           ;ds1307.h: 43: I2C_Write(DECtoBCD(ptrToUserVal-> hour));
  4959  003398  0100               	movlb	0	; () banked
  4960  00339A  EE20 F003          	lfsr	2,3
  4961  00339E  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4962  0033A0  26D9               	addwf	fsr2l,f,c
  4963  0033A2  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4964  0033A4  22DA               	addwfc	fsr2h,f,c
  4965  0033A6  50DF               	movf	indf2,w,c
  4966  0033A8  EC0E  F039         	call	_DECtoBCD
  4967  0033AC  0100               	movlb	0	; () banked
  4968  0033AE  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4969  0033B0  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4970  0033B2  6F8A               	movwf	I2C_Write@d& (0+255),b
  4971  0033B4  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4972  0033B6  EC2A  F036         	call	_I2C_Write	;wreg free
  4973                           
  4974                           ;ds1307.h: 44: I2C_Write(DECtoBCD(ptrToUserVal-> day));
  4975  0033BA  C08C  FFD9         	movff	setDS1307TimeDate@ptrToUserVal,fsr2l
  4976  0033BE  C08D  FFDA         	movff	setDS1307TimeDate@ptrToUserVal+1,fsr2h
  4977  0033C2  50DF               	movf	indf2,w,c
  4978  0033C4  EC0E  F039         	call	_DECtoBCD
  4979  0033C8  0100               	movlb	0	; () banked
  4980  0033CA  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4981  0033CC  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4982  0033CE  6F8A               	movwf	I2C_Write@d& (0+255),b
  4983  0033D0  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4984  0033D2  EC2A  F036         	call	_I2C_Write	;wreg free
  4985                           
  4986                           ;ds1307.h: 45: I2C_Write(DECtoBCD(ptrToUserVal-> date));
  4987  0033D6  0100               	movlb	0	; () banked
  4988  0033D8  EE20 F004          	lfsr	2,4
  4989  0033DC  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4990  0033DE  26D9               	addwf	fsr2l,f,c
  4991  0033E0  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4992  0033E2  22DA               	addwfc	fsr2h,f,c
  4993  0033E4  50DF               	movf	indf2,w,c
  4994  0033E6  EC0E  F039         	call	_DECtoBCD
  4995  0033EA  0100               	movlb	0	; () banked
  4996  0033EC  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4997  0033EE  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4998  0033F0  6F8A               	movwf	I2C_Write@d& (0+255),b
  4999  0033F2  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5000  0033F4  EC2A  F036         	call	_I2C_Write	;wreg free
  5001                           
  5002                           ;ds1307.h: 46: I2C_Write(DECtoBCD(ptrToUserVal-> month));
  5003  0033F8  0100               	movlb	0	; () banked
  5004  0033FA  EE20 F005          	lfsr	2,5
  5005  0033FE  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5006  003400  26D9               	addwf	fsr2l,f,c
  5007  003402  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5008  003404  22DA               	addwfc	fsr2h,f,c
  5009  003406  50DF               	movf	indf2,w,c
  5010  003408  EC0E  F039         	call	_DECtoBCD
  5011  00340C  0100               	movlb	0	; () banked
  5012  00340E  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5013  003410  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5014  003412  6F8A               	movwf	I2C_Write@d& (0+255),b
  5015  003414  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5016  003416  EC2A  F036         	call	_I2C_Write	;wreg free
  5017                           
  5018                           ;ds1307.h: 47: I2C_Write(DECtoBCD(ptrToUserVal-> year));
  5019  00341A  0100               	movlb	0	; () banked
  5020  00341C  EE20 F006          	lfsr	2,6
  5021  003420  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5022  003422  26D9               	addwf	fsr2l,f,c
  5023  003424  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5024  003426  22DA               	addwfc	fsr2h,f,c
  5025  003428  50DF               	movf	indf2,w,c
  5026  00342A  EC0E  F039         	call	_DECtoBCD
  5027  00342E  0100               	movlb	0	; () banked
  5028  003430  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5029  003432  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5030  003434  6F8A               	movwf	I2C_Write@d& (0+255),b
  5031  003436  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5032  003438  EC2A  F036         	call	_I2C_Write	;wreg free
  5033                           
  5034                           ;ds1307.h: 48: I2C_Stop();
  5035  00343C  EC17  F036         	call	_I2C_Stop	;wreg free
  5036  003440  0012               	return		;funcret
  5037  003442  FFFF               	dw	65535	; errata NOP
  5038  003444                     __end_of_setDS1307TimeDate:
  5039                           	opt stack 0
  5040                           tblptru	equ	0xFF8
  5041                           tblptrh	equ	0xFF7
  5042                           tblptrl	equ	0xFF6
  5043                           tablat	equ	0xFF5
  5044                           postinc0	equ	0xFEE
  5045                           wreg	equ	0xFE8
  5046                           postdec1	equ	0xFE5
  5047                           fsr1l	equ	0xFE1
  5048                           indf2	equ	0xFDF
  5049                           fsr2h	equ	0xFDA
  5050                           fsr2l	equ	0xFD9
  5051                           status	equ	0xFD8
  5052                           
  5053 ;; *************** function _DECtoBCD *****************
  5054 ;; Defined at:
  5055 ;;		line 25 in file "function.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  val             1    wreg     unsigned char 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  val             1    8[BANK0 ] unsigned char 
  5060 ;;  res             1    9[BANK0 ] unsigned char 
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      unsigned char 
  5063 ;; Registers used:
  5064 ;;		wreg, status,2, status,0, cstack
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5070 ;;      Params:         0       0       0       0       0       0       0
  5071 ;;      Locals:         0       2       0       0       0       0       0
  5072 ;;      Temps:          0       0       0       0       0       0       0
  5073 ;;      Totals:         0       2       0       0       0       0       0
  5074 ;;Total ram usage:        2 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:    7
  5077 ;; This function calls:
  5078 ;;		___awdiv
  5079 ;;		___awmod
  5080 ;; This function is called by:
  5081 ;;		_setDS1307TimeDate
  5082 ;;		_setDS1307Time
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text6
  5087  00721C                     __ptext6:
  5088                           	opt stack 0
  5089  00721C                     _DECtoBCD:
  5090                           	opt stack 0
  5091  00721C  FFFF               	dw	65535	; assembler added errata NOP
  5092                           
  5093                           ;incstack = 0
  5094                           ;DECtoBCD@val stored from wreg
  5095  00721E  0100               	movlb	0	; () banked
  5096  007220  6F88               	movwf	DECtoBCD@val& (0+255),b
  5097                           
  5098                           ;function.c: 26: char res;
  5099                           ;function.c: 27: res = (val / 10) << 4;
  5100  007222  C088  F080         	movff	DECtoBCD@val,___awdiv@dividend
  5101  007226  0100               	movlb	0	; () banked
  5102  007228  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5103  00722A  0E00               	movlw	0
  5104  00722C  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5105  00722E  0E0A               	movlw	10
  5106  007230  6F82               	movwf	___awdiv@divisor& (0+255),b
  5107  007232  EC36  F01F         	call	___awdiv	;wreg free
  5108  007236  0100               	movlb	0	; () banked
  5109  007238  3980               	swapf	?___awdiv& (0+255),w,b
  5110  00723A  0BF0               	andlw	240
  5111  00723C  6F89               	movwf	DECtoBCD@res& (0+255),b
  5112                           
  5113                           ;function.c: 28: res = res | (val % 10);
  5114  00723E  C088  F080         	movff	DECtoBCD@val,___awmod@dividend
  5115  007242  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5116  007244  0E00               	movlw	0
  5117  007246  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5118  007248  0E0A               	movlw	10
  5119  00724A  6F82               	movwf	___awmod@divisor& (0+255),b
  5120  00724C  ECD4  F03B         	call	___awmod	;wreg free
  5121  007250  0100               	movlb	0	; () banked
  5122  007252  5180               	movf	?___awmod& (0+255),w,b
  5123  007254  1189               	iorwf	DECtoBCD@res& (0+255),w,b
  5124  007256  6F89               	movwf	DECtoBCD@res& (0+255),b
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;function.c: 29: return res;
  5128  007258  5189               	movf	DECtoBCD@res& (0+255),w,b
  5129                           
  5130                           ; BSR set to: 0
  5131                           
  5132                           ; BSR set to: 0
  5133  00725A  0012               	return		;funcret
  5134  00725C  FFFF               	dw	65535	; errata NOP
  5135  00725E                     __end_of_DECtoBCD:
  5136                           	opt stack 0
  5137                           tblptru	equ	0xFF8
  5138                           tblptrh	equ	0xFF7
  5139                           tblptrl	equ	0xFF6
  5140                           tablat	equ	0xFF5
  5141                           postinc0	equ	0xFEE
  5142                           wreg	equ	0xFE8
  5143                           postdec1	equ	0xFE5
  5144                           fsr1l	equ	0xFE1
  5145                           indf2	equ	0xFDF
  5146                           fsr2h	equ	0xFDA
  5147                           fsr2l	equ	0xFD9
  5148                           status	equ	0xFD8
  5149                           
  5150 ;; *************** function _telaPrincipal *****************
  5151 ;; Defined at:
  5152 ;;		line 25 in file "tela_PRINCIPAL.h"
  5153 ;; Parameters:    Size  Location     Type
  5154 ;;		None
  5155 ;; Auto vars:     Size  Location     Type
  5156 ;;		None
  5157 ;; Return value:  Size  Location     Type
  5158 ;;                  1    wreg      void 
  5159 ;; Registers used:
  5160 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5161 ;; Tracked objects:
  5162 ;;		On entry : 0/0
  5163 ;;		On exit  : 0/0
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5166 ;;      Params:         0       0       0       0       0       0       0
  5167 ;;      Locals:         0       2       0       0       0       0       0
  5168 ;;      Temps:          0       0       0       0       0       0       0
  5169 ;;      Totals:         0       2       0       0       0       0       0
  5170 ;;Total ram usage:        2 bytes
  5171 ;; Hardware stack levels used:    1
  5172 ;; Hardware stack levels required when called:   10
  5173 ;; This function calls:
  5174 ;;		_blink
  5175 ;;		_btPress
  5176 ;;		_clearShiftREG
  5177 ;;		_intToFloatStr
  5178 ;;		_resetParametros
  5179 ;;		_sprintf
  5180 ;; This function is called by:
  5181 ;;		_main
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           	psect	text7
  5186  001B92                     __ptext7:
  5187                           	opt stack 0
  5188  001B92                     _telaPrincipal:
  5189                           	opt stack 0
  5190  001B92  FFFF               	dw	65535	; assembler added errata NOP
  5191                           
  5192                           ;tela_PRINCIPAL.h: 27: sprintf(&line1[2], " %02d:%02d:%02d %02d/%02d", _hor, _min, _sec,
      +                           _dia, _mes);
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;incstack = 0
  5196  001B94  0E7D               	movlw	low (_line1+2)
  5197  001B96  0100               	movlb	0	; () banked
  5198  001B98  6FA1               	movwf	sprintf@wh& (0+255),b
  5199  001B9A  0E01               	movlw	high (_line1+2)
  5200  001B9C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5201  001B9E  0EF3               	movlw	low STR_58
  5202  001BA0  6FA3               	movwf	sprintf@f& (0+255),b
  5203  001BA2  0E7B               	movlw	high STR_58
  5204  001BA4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5205  001BA6  C0ED  F0A5         	movff	__hor,?_sprintf+4
  5206  001BAA  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  5207  001BAC  C0EE  F0A7         	movff	__min,?_sprintf+6
  5208  001BB0  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  5209  001BB2  C0EF  F0A9         	movff	__sec,?_sprintf+8
  5210  001BB6  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  5211  001BB8  C0EC  F0AB         	movff	__dia,?_sprintf+10
  5212  001BBC  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  5213  001BBE  C0EB  F0AD         	movff	__mes,?_sprintf+12
  5214  001BC2  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  5215  001BC4  EC95  F039         	call	_sprintf	;wreg free
  5216                           
  5217                           ;tela_PRINCIPAL.h: 29: line1[0] = 0x01;
  5218  001BC8  0E01               	movlw	1
  5219  001BCA  0101               	movlb	1	; () banked
  5220  001BCC  6F7B               	movwf	_line1& (0+255),b
  5221                           
  5222                           ; BSR set to: 1
  5223                           ;tela_PRINCIPAL.h: 30: line1[1] = intensidadeSinal;
  5224  001BCE  C0FF  F17C         	movff	_intensidadeSinal,_line1+1
  5225                           
  5226                           ; BSR set to: 1
  5227                           ;tela_PRINCIPAL.h: 31: line1[19] = 0x05;
  5228  001BD2  0E05               	movlw	5
  5229  001BD4  6F8E               	movwf	(_line1+19)& (0+255),b
  5230                           
  5231                           ;tela_PRINCIPAL.h: 33: switch (codigoErro) {
  5232  001BD6  D051               	goto	l690
  5233  001BD8  FFFF               	dw	65535	; assembler added errata NOP
  5234                           
  5235                           ;tela_PRINCIPAL.h: 35: sprintf(line4, " *falha eletrica");
  5236                           
  5237                           ; BSR set to: 1
  5238  001BDA  0E3C               	movlw	low _line4
  5239  001BDC  0100               	movlb	0	; () banked
  5240  001BDE  6FA1               	movwf	sprintf@wh& (0+255),b
  5241  001BE0  0E01               	movlw	high _line4
  5242  001BE2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5243  001BE4  0EA0               	movlw	low STR_59
  5244  001BE6  6FA3               	movwf	sprintf@f& (0+255),b
  5245  001BE8  0E7D               	movlw	high STR_59
  5246  001BEA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5247  001BEC  EC95  F039         	call	_sprintf	;wreg free
  5248                           
  5249                           ;tela_PRINCIPAL.h: 36: break;
  5250  001BF0  D059               	goto	l692
  5251  001BF2  FFFF               	dw	65535	; assembler added errata NOP
  5252                           
  5253                           ;tela_PRINCIPAL.h: 38: sprintf(line4, " *falha GSM");
  5254  001BF4  0E3C               	movlw	low _line4
  5255  001BF6  0100               	movlb	0	; () banked
  5256  001BF8  6FA1               	movwf	sprintf@wh& (0+255),b
  5257  001BFA  0E01               	movlw	high _line4
  5258  001BFC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5259  001BFE  0EDD               	movlw	low STR_60
  5260  001C00  6FA3               	movwf	sprintf@f& (0+255),b
  5261  001C02  0E7E               	movlw	high STR_60
  5262  001C04  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5263  001C06  EC95  F039         	call	_sprintf	;wreg free
  5264                           
  5265                           ;tela_PRINCIPAL.h: 39: break;
  5266  001C0A  D04C               	goto	l692
  5267  001C0C  FFFF               	dw	65535	; assembler added errata NOP
  5268                           
  5269                           ;tela_PRINCIPAL.h: 41: sprintf(line4, " *falha val. ladrao");
  5270  001C0E  0E3C               	movlw	low _line4
  5271  001C10  0100               	movlb	0	; () banked
  5272  001C12  6FA1               	movwf	sprintf@wh& (0+255),b
  5273  001C14  0E01               	movlw	high _line4
  5274  001C16  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5275  001C18  0E74               	movlw	low STR_61
  5276  001C1A  6FA3               	movwf	sprintf@f& (0+255),b
  5277  001C1C  0E7C               	movlw	high STR_61
  5278  001C1E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5279  001C20  EC95  F039         	call	_sprintf	;wreg free
  5280  001C24  D026               	goto	l7074
  5281  001C26  FFFF               	dw	65535	; assembler added errata NOP
  5282                           
  5283                           ;tela_PRINCIPAL.h: 45: sprintf(line4, " *falha B. jockey");
  5284  001C28  0E3C               	movlw	low _line4
  5285  001C2A  0100               	movlb	0	; () banked
  5286  001C2C  6FA1               	movwf	sprintf@wh& (0+255),b
  5287  001C2E  0E01               	movlw	high _line4
  5288  001C30  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5289  001C32  0E6C               	movlw	low STR_62
  5290  001C34  6FA3               	movwf	sprintf@f& (0+255),b
  5291  001C36  0E7D               	movlw	high STR_62
  5292  001C38  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5293  001C3A  EC95  F039         	call	_sprintf	;wreg free
  5294  001C3E  D019               	goto	l7074
  5295  001C40  FFFF               	dw	65535	; assembler added errata NOP
  5296                           
  5297                           ;tela_PRINCIPAL.h: 49: sprintf(line4, " *falha B. principal");
  5298  001C42  0E3C               	movlw	low _line4
  5299  001C44  0100               	movlb	0	; () banked
  5300  001C46  6FA1               	movwf	sprintf@wh& (0+255),b
  5301  001C48  0E01               	movlw	high _line4
  5302  001C4A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5303  001C4C  0E0D               	movlw	low STR_63
  5304  001C4E  6FA3               	movwf	sprintf@f& (0+255),b
  5305  001C50  0E7C               	movlw	high STR_63
  5306  001C52  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5307  001C54  EC95  F039         	call	_sprintf	;wreg free
  5308  001C58  D00C               	goto	l7074
  5309  001C5A  FFFF               	dw	65535	; assembler added errata NOP
  5310                           
  5311                           ;tela_PRINCIPAL.h: 53: sprintf(line4, " *falha B. combustao");
  5312  001C5C  0E3C               	movlw	low _line4
  5313  001C5E  0100               	movlb	0	; () banked
  5314  001C60  6FA1               	movwf	sprintf@wh& (0+255),b
  5315  001C62  0E01               	movlw	high _line4
  5316  001C64  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5317  001C66  0E22               	movlw	low STR_64
  5318  001C68  6FA3               	movwf	sprintf@f& (0+255),b
  5319  001C6A  0E7C               	movlw	high STR_64
  5320  001C6C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5321  001C6E  EC95  F039         	call	_sprintf	;wreg free
  5322  001C72                     l7074:
  5323  001C72  FFFF               	dw	65535	; assembler added errata NOP
  5324                           
  5325                           ;tela_PRINCIPAL.h: 54: shift[1] = 1;
  5326  001C74  0E01               	movlw	1
  5327  001C76  6E45               	movwf	_shift+1,c
  5328                           
  5329                           ;tela_PRINCIPAL.h: 56: }
  5330                           
  5331                           ;tela_PRINCIPAL.h: 55: break;
  5332  001C78  D015               	goto	l692
  5333  001C7A                     l690:
  5334  001C7A  FFFF               	dw	65535	; assembler added errata NOP
  5335  001C7C  0100               	movlb	0	; () banked
  5336  001C7E  51F3               	movf	_codigoErro& (0+255),w,b
  5337                           
  5338                           ; Switch size 1, requested type "space"
  5339                           ; Number of cases is 6, Range of values is 1 to 6
  5340                           ; switch strategies available:
  5341                           ; Name         Instructions Cycles
  5342                           ; simple_byte           19    10 (average)
  5343                           ;	Chosen strategy is simple_byte
  5344  001C80  0A01               	xorlw	1	; case 1
  5345  001C82  B4D8               	btfsc	status,2,c
  5346  001C84  D7A9               	goto	l691
  5347  001C86  0A03               	xorlw	3	; case 2
  5348  001C88  B4D8               	btfsc	status,2,c
  5349  001C8A  D7B3               	goto	l693
  5350  001C8C  0A01               	xorlw	1	; case 3
  5351  001C8E  B4D8               	btfsc	status,2,c
  5352  001C90  D7BD               	goto	l694
  5353  001C92  0A07               	xorlw	7	; case 4
  5354  001C94  B4D8               	btfsc	status,2,c
  5355  001C96  D7C7               	goto	l695
  5356  001C98  0A01               	xorlw	1	; case 5
  5357  001C9A  B4D8               	btfsc	status,2,c
  5358  001C9C  D7D1               	goto	l696
  5359  001C9E  0A03               	xorlw	3	; case 6
  5360  001CA0  B4D8               	btfsc	status,2,c
  5361  001CA2  D7DB               	goto	l697
  5362  001CA4                     l692:
  5363  001CA4  FFFF               	dw	65535	; assembler added errata NOP
  5364                           
  5365                           ;tela_PRINCIPAL.h: 58: if (ocorrendoIncendio) {
  5366                           
  5367                           ; BSR set to: 0
  5368  001CA6  0100               	movlb	0	; () banked
  5369  001CA8  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  5370  001CAA  B4D8               	btfsc	status,2,c
  5371  001CAC  D00A               	goto	l698
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;tela_PRINCIPAL.h: 59: sprintf(line2, " ALERTA DE INCENDIO");
  5375  001CAE  0E66               	movlw	low _line2
  5376  001CB0  6FA1               	movwf	sprintf@wh& (0+255),b
  5377  001CB2  0E01               	movlw	high _line2
  5378  001CB4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5379  001CB6  0E60               	movlw	low STR_65
  5380  001CB8  6FA3               	movwf	sprintf@f& (0+255),b
  5381  001CBA  0E7C               	movlw	high STR_65
  5382  001CBC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5383  001CBE  EC95  F039         	call	_sprintf	;wreg free
  5384  001CC2                     l698:
  5385  001CC2  FFFF               	dw	65535	; assembler added errata NOP
  5386                           
  5387                           ;tela_PRINCIPAL.h: 60: }
  5388                           ;tela_PRINCIPAL.h: 62: if (flagErroTransdutor) {
  5389  001CC4  5074               	movf	_flagErroTransdutor,w,c
  5390  001CC6  B4D8               	btfsc	status,2,c
  5391  001CC8  D013               	goto	l699
  5392                           
  5393                           ;tela_PRINCIPAL.h: 63: clearShiftREG();
  5394  001CCA  ECAA  F037         	call	_clearShiftREG	;wreg free
  5395                           
  5396                           ;tela_PRINCIPAL.h: 64: sprintf(&line3[1], "Erro no Transdutor");
  5397  001CCE  0E52               	movlw	low (_line3+1)
  5398  001CD0  0100               	movlb	0	; () banked
  5399  001CD2  6FA1               	movwf	sprintf@wh& (0+255),b
  5400  001CD4  0E01               	movlw	high (_line3+1)
  5401  001CD6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5402  001CD8  0E11               	movlw	low STR_66
  5403  001CDA  6FA3               	movwf	sprintf@f& (0+255),b
  5404  001CDC  0E7D               	movlw	high STR_66
  5405  001CDE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5406  001CE0  EC95  F039         	call	_sprintf	;wreg free
  5407                           
  5408                           ;tela_PRINCIPAL.h: 65: ocorrendoIncendio = 0;
  5409  001CE4  0E00               	movlw	0
  5410  001CE6  0100               	movlb	0	; () banked
  5411  001CE8  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;tela_PRINCIPAL.h: 66: shift[1] = 1;
  5415  001CEA  0E01               	movlw	1
  5416  001CEC  6E45               	movwf	_shift+1,c
  5417                           
  5418                           ;tela_PRINCIPAL.h: 67: } else {
  5419  001CEE  D018               	goto	l700
  5420  001CF0                     l699:
  5421  001CF0  FFFF               	dw	65535	; assembler added errata NOP
  5422                           
  5423                           ;tela_PRINCIPAL.h: 68: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5424                           
  5425                           ; BSR set to: 0
  5426  001CF2  0100               	movlb	0	; () banked
  5427  001CF4  51F8               	movf	_pressao& (0+255),w,b
  5428  001CF6  ECA4  F03C         	call	_intToFloatStr
  5429  001CFA  C0B5  F0C2         	movff	?_intToFloatStr,_telaPrincipal$2383
  5430  001CFE  C0B6  F0C3         	movff	?_intToFloatStr+1,_telaPrincipal$2383+1
  5431                           
  5432                           ;tela_PRINCIPAL.h: 68: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5433  001D02  0E53               	movlw	low (_line3+2)
  5434  001D04  0100               	movlb	0	; () banked
  5435  001D06  6FA1               	movwf	sprintf@wh& (0+255),b
  5436  001D08  0E01               	movlw	high (_line3+2)
  5437  001D0A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5438  001D0C  0EF2               	movlw	low STR_40
  5439  001D0E  6FA3               	movwf	sprintf@f& (0+255),b
  5440  001D10  0E7D               	movlw	high STR_40
  5441  001D12  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5442  001D14  C0C2  F0A5         	movff	_telaPrincipal$2383,?_sprintf+4
  5443  001D18  C0C3  F0A6         	movff	_telaPrincipal$2383+1,?_sprintf+5
  5444  001D1C  EC95  F039         	call	_sprintf	;wreg free
  5445  001D20                     l700:
  5446  001D20  FFFF               	dw	65535	; assembler added errata NOP
  5447                           
  5448                           ;tela_PRINCIPAL.h: 69: }
  5449                           ;tela_PRINCIPAL.h: 72: if (codigoErro > 1 || ocorrendoIncendio) {
  5450  001D22  0E02               	movlw	2
  5451  001D24  0100               	movlb	0	; () banked
  5452  001D26  61F3               	cpfslt	_codigoErro& (0+255),b
  5453  001D28  D003               	goto	u7900
  5454                           
  5455                           ; BSR set to: 0
  5456  001D2A  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  5457  001D2C  B4D8               	btfsc	status,2,c
  5458  001D2E  D016               	goto	l705
  5459  001D30                     u7900:
  5460  001D30  FFFF               	dw	65535	; assembler added errata NOP
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;tela_PRINCIPAL.h: 73: if (flagTexto) {
  5464                           
  5465                           ; BSR set to: 0
  5466  001D32  5075               	movf	_flagTexto,w,c
  5467  001D34  B4D8               	btfsc	status,2,c
  5468  001D36  D00A               	goto	l704
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;tela_PRINCIPAL.h: 74: sprintf(line4, " Press ESC p/ Reset");
  5472  001D38  0E3C               	movlw	low _line4
  5473  001D3A  6FA1               	movwf	sprintf@wh& (0+255),b
  5474  001D3C  0E01               	movlw	high _line4
  5475  001D3E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5476  001D40  0EC4               	movlw	low STR_68
  5477  001D42  6FA3               	movwf	sprintf@f& (0+255),b
  5478  001D44  0E7C               	movlw	high STR_68
  5479  001D46  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5480  001D48  EC95  F039         	call	_sprintf	;wreg free
  5481  001D4C                     l704:
  5482  001D4C  FFFF               	dw	65535	; assembler added errata NOP
  5483                           
  5484                           ;tela_PRINCIPAL.h: 75: }
  5485                           ;tela_PRINCIPAL.h: 76: if (btPress(1)) {
  5486  001D4E  0E01               	movlw	1
  5487  001D50  ECE6  F03A         	call	_btPress
  5488  001D54  0900               	iorlw	0
  5489  001D56  A4D8               	btfss	status,2,c
  5490                           
  5491                           ;tela_PRINCIPAL.h: 77: resetParametros();
  5492  001D58  ECF5  F036         	call	_resetParametros	;wreg free
  5493  001D5C                     l705:
  5494  001D5C  FFFF               	dw	65535	; assembler added errata NOP
  5495                           
  5496                           ;tela_PRINCIPAL.h: 78: }
  5497                           ;tela_PRINCIPAL.h: 79: }
  5498                           ;tela_PRINCIPAL.h: 81: if (btPress(4)) {
  5499  001D5E  0E04               	movlw	4
  5500  001D60  ECE6  F03A         	call	_btPress
  5501  001D64  0900               	iorlw	0
  5502  001D66  B4D8               	btfsc	status,2,c
  5503  001D68  D005               	goto	l706
  5504                           
  5505                           ;tela_PRINCIPAL.h: 82: menu_posi = 1;
  5506  001D6A  0E01               	movlw	1
  5507  001D6C  0100               	movlb	0	; () banked
  5508  001D6E  6FE0               	movwf	_menu_posi& (0+255),b
  5509                           
  5510                           ;tela_PRINCIPAL.h: 83: sub_menu_posi = 1;
  5511  001D70  0E01               	movlw	1
  5512  001D72  6E6A               	movwf	_sub_menu_posi,c
  5513  001D74                     l706:
  5514  001D74  FFFF               	dw	65535	; assembler added errata NOP
  5515                           
  5516                           ;tela_PRINCIPAL.h: 84: }
  5517                           ;tela_PRINCIPAL.h: 87: if (!PORTCbits.RC0) {
  5518                           
  5519                           ; BSR set to: 0
  5520  001D76  B082               	btfsc	3970,0,c	;volatile
  5521  001D78  D011               	goto	l708
  5522                           
  5523                           ;tela_PRINCIPAL.h: 88: blink(line1, 20, 20);
  5524  001D7A  0E7B               	movlw	low _line1
  5525  001D7C  0100               	movlb	0	; () banked
  5526  001D7E  6F80               	movwf	blink@line& (0+255),b
  5527  001D80  0E01               	movlw	high _line1
  5528  001D82  6F81               	movwf	(blink@line+1)& (0+255),b
  5529  001D84  0E14               	movlw	20
  5530  001D86  6F82               	movwf	blink@start& (0+255),b
  5531  001D88  0E14               	movlw	20
  5532  001D8A  6F83               	movwf	blink@end& (0+255),b
  5533  001D8C  ECAE  F038         	call	_blink	;wreg free
  5534                           
  5535                           ;tela_PRINCIPAL.h: 89: if (codigoErro == 0) {
  5536  001D90  0100               	movlb	0	; () banked
  5537  001D92  51F3               	movf	_codigoErro& (0+255),w,b
  5538  001D94  A4D8               	btfss	status,2,c
  5539  001D96  D002               	goto	l708
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;tela_PRINCIPAL.h: 90: codigoErro = 1;
  5543  001D98  0E01               	movlw	1
  5544  001D9A  6FF3               	movwf	_codigoErro& (0+255),b
  5545  001D9C                     l708:
  5546  001D9C  FFFF               	dw	65535	; assembler added errata NOP
  5547                           
  5548                           ;tela_PRINCIPAL.h: 91: }
  5549                           ;tela_PRINCIPAL.h: 92: }
  5550                           ;tela_PRINCIPAL.h: 93: if (status_jockey == 0) {
  5551                           
  5552                           ; BSR set to: 0
  5553  001D9E  0100               	movlb	0	; () banked
  5554  001DA0  51FD               	movf	_status_jockey& (0+255),w,b
  5555  001DA2  A4D8               	btfss	status,2,c
  5556  001DA4  D002               	goto	l709
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;tela_PRINCIPAL.h: 94: codigoErro = 4;
  5560  001DA6  0E04               	movlw	4
  5561  001DA8  D00B               	goto	L9
  5562  001DAA                     l709:
  5563  001DAA  FFFF               	dw	65535	; assembler added errata NOP
  5564                           
  5565                           ; BSR set to: 0
  5566                           
  5567                           ; BSR set to: 0
  5568  001DAC  51FC               	movf	_status_principal& (0+255),w,b
  5569  001DAE  A4D8               	btfss	status,2,c
  5570  001DB0  D002               	goto	l711
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;tela_PRINCIPAL.h: 96: codigoErro = 5;
  5574  001DB2  0E05               	movlw	5
  5575  001DB4  D005               	goto	L9
  5576  001DB6                     l711:
  5577  001DB6  FFFF               	dw	65535	; assembler added errata NOP
  5578                           
  5579                           ; BSR set to: 0
  5580                           
  5581                           ; BSR set to: 0
  5582  001DB8  51FB               	movf	_status_estacionaria& (0+255),w,b
  5583  001DBA  A4D8               	btfss	status,2,c
  5584  001DBC  D003               	goto	l713
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;tela_PRINCIPAL.h: 98: codigoErro = 6;
  5588  001DBE  0E06               	movlw	6
  5589  001DC0                     L9:
  5590  001DC0  FFFF               	dw	65535	; assembler added errata NOP
  5591  001DC2  6FF3               	movwf	_codigoErro& (0+255),b
  5592  001DC4                     l713:
  5593  001DC4  FFFF               	dw	65535	; assembler added errata NOP
  5594                           
  5595                           ; BSR set to: 0
  5596                           
  5597                           ; BSR set to: 0
  5598                           
  5599                           ; BSR set to: 0
  5600                           
  5601                           ; BSR set to: 0
  5602  001DC6  0012               	return		;funcret
  5603  001DC8  FFFF               	dw	65535	; errata NOP
  5604  001DCA                     __end_of_telaPrincipal:
  5605                           	opt stack 0
  5606                           tblptru	equ	0xFF8
  5607                           tblptrh	equ	0xFF7
  5608                           tblptrl	equ	0xFF6
  5609                           tablat	equ	0xFF5
  5610                           postinc0	equ	0xFEE
  5611                           wreg	equ	0xFE8
  5612                           postdec1	equ	0xFE5
  5613                           fsr1l	equ	0xFE1
  5614                           indf2	equ	0xFDF
  5615                           fsr2h	equ	0xFDA
  5616                           fsr2l	equ	0xFD9
  5617                           status	equ	0xFD8
  5618                           
  5619 ;; *************** function _resetParametros *****************
  5620 ;; Defined at:
  5621 ;;		line 12 in file "tela_PRINCIPAL.h"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;		None
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;		None
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  1    wreg      void 
  5628 ;; Registers used:
  5629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5635 ;;      Params:         0       0       0       0       0       0       0
  5636 ;;      Locals:         0       0       0       0       0       0       0
  5637 ;;      Temps:          0       0       0       0       0       0       0
  5638 ;;      Totals:         0       0       0       0       0       0       0
  5639 ;;Total ram usage:        0 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    7
  5642 ;; This function calls:
  5643 ;;		_clearShiftREG
  5644 ;; This function is called by:
  5645 ;;		_telaPrincipal
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           	psect	text8
  5650  006DEA                     __ptext8:
  5651                           	opt stack 0
  5652  006DEA                     _resetParametros:
  5653                           	opt stack 0
  5654  006DEA  FFFF               	dw	65535	; assembler added errata NOP
  5655                           
  5656                           ;tela_PRINCIPAL.h: 13: ocorrendoIncendio = 0;
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;incstack = 0
  5660  006DEC  0E00               	movlw	0
  5661  006DEE  0100               	movlb	0	; () banked
  5662  006DF0  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
  5663                           
  5664                           ;tela_PRINCIPAL.h: 14: codigoErro = 0;
  5665  006DF2  0E00               	movlw	0
  5666  006DF4  6FF3               	movwf	_codigoErro& (0+255),b
  5667                           
  5668                           ;tela_PRINCIPAL.h: 15: status_estacionaria = 1;
  5669  006DF6  0E01               	movlw	1
  5670  006DF8  6FFB               	movwf	_status_estacionaria& (0+255),b
  5671                           
  5672                           ;tela_PRINCIPAL.h: 16: status_jockey = 1;
  5673  006DFA  0E01               	movlw	1
  5674  006DFC  6FFD               	movwf	_status_jockey& (0+255),b
  5675                           
  5676                           ;tela_PRINCIPAL.h: 17: status_principal = 1;
  5677  006DFE  0E01               	movlw	1
  5678  006E00  6FFC               	movwf	_status_principal& (0+255),b
  5679                           
  5680                           ;tela_PRINCIPAL.h: 18: gsmOcupado = 0;
  5681  006E02  0E00               	movlw	0
  5682  006E04  6FF4               	movwf	_gsmOcupado& (0+255),b
  5683                           
  5684                           ;tela_PRINCIPAL.h: 19: shift[1] = 0;
  5685  006E06  0E00               	movlw	0
  5686  006E08  6E45               	movwf	_shift+1,c
  5687                           
  5688                           ;tela_PRINCIPAL.h: 20: tempo_limite_partida = 0;
  5689  006E0A  0E00               	movlw	0
  5690  006E0C  6E6C               	movwf	_tempo_limite_partida,c
  5691                           
  5692                           ;tela_PRINCIPAL.h: 21: tempo_partida = 0;
  5693  006E0E  0E00               	movlw	0
  5694  006E10  6E6D               	movwf	_tempo_partida,c
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;tela_PRINCIPAL.h: 22: clearShiftREG();
  5698  006E12  ECAA  F037         	call	_clearShiftREG	;wreg free
  5699  006E16  0012               	return		;funcret
  5700  006E18  FFFF               	dw	65535	; errata NOP
  5701  006E1A                     __end_of_resetParametros:
  5702                           	opt stack 0
  5703                           tblptru	equ	0xFF8
  5704                           tblptrh	equ	0xFF7
  5705                           tblptrl	equ	0xFF6
  5706                           tablat	equ	0xFF5
  5707                           postinc0	equ	0xFEE
  5708                           wreg	equ	0xFE8
  5709                           postdec1	equ	0xFE5
  5710                           fsr1l	equ	0xFE1
  5711                           indf2	equ	0xFDF
  5712                           fsr2h	equ	0xFDA
  5713                           fsr2l	equ	0xFD9
  5714                           status	equ	0xFD8
  5715                           
  5716 ;; *************** function _setShiftREG *****************
  5717 ;; Defined at:
  5718 ;;		line 37 in file "shift595.h"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;		None
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;  i               1    1[BANK0 ] unsigned char 
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  1    wreg      void 
  5725 ;; Registers used:
  5726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5732 ;;      Params:         0       0       0       0       0       0       0
  5733 ;;      Locals:         0       1       0       0       0       0       0
  5734 ;;      Temps:          0       1       0       0       0       0       0
  5735 ;;      Totals:         0       2       0       0       0       0       0
  5736 ;;Total ram usage:        2 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    6
  5739 ;; This function calls:
  5740 ;;		Nothing
  5741 ;; This function is called by:
  5742 ;;		_main
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           	psect	text9
  5747  007372                     __ptext9:
  5748                           	opt stack 0
  5749  007372                     _setShiftREG:
  5750                           	opt stack 0
  5751  007372  FFFF               	dw	65535	; assembler added errata NOP
  5752                           
  5753                           ;shift595.h: 38: unsigned char i = 0;
  5754                           
  5755                           ;incstack = 0
  5756  007374  0E00               	movlw	0
  5757  007376  0100               	movlb	0	; () banked
  5758  007378  6F81               	movwf	setShiftREG@i& (0+255),b
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;shift595.h: 39: PORTEbits.RE1 = 0;
  5762  00737A  9284               	bcf	3972,1,c	;volatile
  5763                           
  5764                           ;shift595.h: 40: for (i = 0; i < 8; i++) {
  5765  00737C  0E00               	movlw	0
  5766  00737E  6F81               	movwf	setShiftREG@i& (0+255),b
  5767  007380  D015               	goto	l6550
  5768  007382                     l433:
  5769  007382  FFFF               	dw	65535	; assembler added errata NOP
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;shift595.h: 41: PORTEbits.RE0 = 0;
  5773  007384  9084               	bcf	3972,0,c	;volatile
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;shift595.h: 42: PORTEbits.RE2 = shift[i];
  5777  007386  5181               	movf	setShiftREG@i& (0+255),w,b
  5778  007388  0D01               	mullw	1
  5779  00738A  0E44               	movlw	low _shift
  5780  00738C  24F3               	addwf	prodl,w,c
  5781  00738E  6ED9               	movwf	fsr2l,c
  5782  007390  0E00               	movlw	high _shift
  5783  007392  20F4               	addwfc	prodh,w,c
  5784  007394  6EDA               	movwf	fsr2h,c
  5785  007396  50DF               	movf	indf2,w,c
  5786  007398  6F80               	movwf	??_setShiftREG& (0+255),b
  5787  00739A  4780               	rlncf	??_setShiftREG& (0+255),f,b
  5788  00739C  4780               	rlncf	??_setShiftREG& (0+255),f,b
  5789  00739E  5084               	movf	3972,w,c	;volatile
  5790  0073A0  1980               	xorwf	??_setShiftREG& (0+255),w,b
  5791  0073A2  0BFB               	andlw	-5
  5792  0073A4  1980               	xorwf	??_setShiftREG& (0+255),w,b
  5793  0073A6  6E84               	movwf	3972,c	;volatile
  5794                           
  5795                           ; BSR set to: 0
  5796                           ;shift595.h: 43: PORTEbits.RE0 = 1;
  5797  0073A8  8084               	bsf	3972,0,c	;volatile
  5798                           
  5799                           ; BSR set to: 0
  5800  0073AA  2B81               	incf	setShiftREG@i& (0+255),f,b
  5801  0073AC                     l6550:
  5802  0073AC  FFFF               	dw	65535	; assembler added errata NOP
  5803                           
  5804                           ; BSR set to: 0
  5805  0073AE  0E07               	movlw	7
  5806  0073B0  6581               	cpfsgt	setShiftREG@i& (0+255),b
  5807  0073B2  D7E7               	goto	l433
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;shift595.h: 44: }
  5811                           ;shift595.h: 45: PORTEbits.RE1 = 1;
  5812  0073B4  8284               	bsf	3972,1,c	;volatile
  5813                           
  5814                           ; BSR set to: 0
  5815  0073B6  0012               	return		;funcret
  5816  0073B8  FFFF               	dw	65535	; errata NOP
  5817  0073BA                     __end_of_setShiftREG:
  5818                           	opt stack 0
  5819                           tblptru	equ	0xFF8
  5820                           tblptrh	equ	0xFF7
  5821                           tblptrl	equ	0xFF6
  5822                           tablat	equ	0xFF5
  5823                           prodh	equ	0xFF4
  5824                           prodl	equ	0xFF3
  5825                           postinc0	equ	0xFEE
  5826                           wreg	equ	0xFE8
  5827                           postdec1	equ	0xFE5
  5828                           fsr1l	equ	0xFE1
  5829                           indf2	equ	0xFDF
  5830                           fsr2h	equ	0xFDA
  5831                           fsr2l	equ	0xFD9
  5832                           status	equ	0xFD8
  5833                           
  5834 ;; *************** function _lerParametros *****************
  5835 ;; Defined at:
  5836 ;;		line 9 in file "util.h"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;		None
  5839 ;; Auto vars:     Size  Location     Type
  5840 ;;  i               1   21[BANK0 ] unsigned char 
  5841 ;;  verifica_mem    1   20[BANK0 ] unsigned char 
  5842 ;; Return value:  Size  Location     Type
  5843 ;;                  1    wreg      void 
  5844 ;; Registers used:
  5845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5846 ;; Tracked objects:
  5847 ;;		On entry : 0/0
  5848 ;;		On exit  : 0/0
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5851 ;;      Params:         0       0       0       0       0       0       0
  5852 ;;      Locals:         0       2       0       0       0       0       0
  5853 ;;      Temps:          0       0       0       0       0       0       0
  5854 ;;      Totals:         0       2       0       0       0       0       0
  5855 ;;Total ram usage:        2 bytes
  5856 ;; Hardware stack levels used:    1
  5857 ;; Hardware stack levels required when called:   10
  5858 ;; This function calls:
  5859 ;;		_readEEPROM16_ext
  5860 ;;		_readEEPROM_ext
  5861 ;;		_writeEEPROM_ext
  5862 ;; This function is called by:
  5863 ;;		_main
  5864 ;; This function uses a non-reentrant model
  5865 ;;
  5866                           
  5867                           	psect	text10
  5868  002FD4                     __ptext10:
  5869                           	opt stack 0
  5870  002FD4                     _lerParametros:
  5871                           	opt stack 0
  5872  002FD4  FFFF               	dw	65535	; assembler added errata NOP
  5873                           
  5874                           ;util.h: 10: char i = 0;
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;incstack = 0
  5878  002FD6  0E00               	movlw	0
  5879  002FD8  0100               	movlb	0	; () banked
  5880  002FDA  6F95               	movwf	lerParametros@i& (0+255),b
  5881                           
  5882                           ;util.h: 11: char verifica_memoria_nova = 0;
  5883  002FDC  0E00               	movlw	0
  5884  002FDE  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;util.h: 12: verifica_memoria_nova = readEEPROM_ext(12);
  5888  002FE0  0E0C               	movlw	12
  5889  002FE2  EC2D  F03A         	call	_readEEPROM_ext
  5890  002FE6  0100               	movlb	0	; () banked
  5891  002FE8  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;util.h: 13: if (verifica_memoria_nova != 20) {
  5895  002FEA  0E14               	movlw	20
  5896  002FEC  1994               	xorwf	lerParametros@verifica_memoria_nova& (0+255),w,b
  5897  002FEE  B4D8               	btfsc	status,2,c
  5898  002FF0  D016               	goto	l613
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;util.h: 14: for (i = 0; i < 100; i++) {
  5902  002FF2  0E00               	movlw	0
  5903  002FF4  6F95               	movwf	lerParametros@i& (0+255),b
  5904  002FF6                     l6912:
  5905  002FF6  FFFF               	dw	65535	; assembler added errata NOP
  5906                           
  5907                           ; BSR set to: 0
  5908  002FF8  0E63               	movlw	99
  5909  002FFA  6595               	cpfsgt	lerParametros@i& (0+255),b
  5910  002FFC  D001               	goto	l614
  5911  002FFE  D009               	goto	u7730
  5912  003000                     l614:
  5913  003000  FFFF               	dw	65535	; assembler added errata NOP
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;util.h: 15: writeEEPROM_ext(i, 0);
  5917                           
  5918                           ; BSR set to: 0
  5919  003002  0E00               	movlw	0
  5920  003004  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  5921  003006  5195               	movf	lerParametros@i& (0+255),w,b
  5922  003008  EC72  F039         	call	_writeEEPROM_ext
  5923  00300C  0100               	movlb	0	; () banked
  5924  00300E  2B95               	incf	lerParametros@i& (0+255),f,b
  5925  003010  D7F2               	goto	l6912
  5926  003012                     u7730:
  5927  003012  FFFF               	dw	65535	; assembler added errata NOP
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;util.h: 16: }
  5931                           ;util.h: 17: writeEEPROM_ext(12, 20);
  5932                           
  5933                           ; BSR set to: 0
  5934  003014  0E14               	movlw	20
  5935  003016  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  5936  003018  0E0C               	movlw	12
  5937  00301A  EC72  F039         	call	_writeEEPROM_ext
  5938  00301E                     l613:
  5939  00301E  FFFF               	dw	65535	; assembler added errata NOP
  5940                           
  5941                           ;util.h: 18: }
  5942                           ;util.h: 20: sp_jockey = readEEPROM_ext(0);
  5943  003020  0E00               	movlw	0
  5944  003022  EC2D  F03A         	call	_readEEPROM_ext
  5945  003026  0100               	movlb	0	; () banked
  5946  003028  6FE4               	movwf	_sp_jockey& (0+255),b
  5947                           
  5948                           ;util.h: 21: sp_principal = readEEPROM_ext(1);
  5949  00302A  0E01               	movlw	1
  5950  00302C  EC2D  F03A         	call	_readEEPROM_ext
  5951  003030  0100               	movlb	0	; () banked
  5952  003032  6FE3               	movwf	_sp_principal& (0+255),b
  5953                           
  5954                           ;util.h: 22: sp_estacionaria = readEEPROM_ext(2);
  5955  003034  0E02               	movlw	2
  5956  003036  EC2D  F03A         	call	_readEEPROM_ext
  5957  00303A  0100               	movlb	0	; () banked
  5958  00303C  6FE2               	movwf	_sp_estacionaria& (0+255),b
  5959                           
  5960                           ;util.h: 23: horimetro = readEEPROM16_ext(8);
  5961  00303E  0E08               	movlw	8
  5962  003040  ECE1  F037         	call	_readEEPROM16_ext
  5963  003044  C08E  F04F         	movff	?_readEEPROM16_ext,_horimetro
  5964  003048  C08F  F050         	movff	?_readEEPROM16_ext+1,_horimetro+1
  5965                           
  5966                           ;util.h: 24: sp_pressao_rede = readEEPROM_ext(4);
  5967  00304C  0E04               	movlw	4
  5968  00304E  EC2D  F03A         	call	_readEEPROM_ext
  5969  003052  0100               	movlb	0	; () banked
  5970  003054  6FE5               	movwf	_sp_pressao_rede& (0+255),b
  5971                           
  5972                           ;util.h: 25: intervalo_teste_dia = readEEPROM_ext(6);
  5973  003056  0E06               	movlw	6
  5974  003058  EC2D  F03A         	call	_readEEPROM_ext
  5975  00305C  0100               	movlb	0	; () banked
  5976  00305E  6FE9               	movwf	_intervalo_teste_dia& (0+255),b
  5977                           
  5978                           ;util.h: 26: tempo_limite_estacionaria = readEEPROM_ext(7);
  5979  003060  0E07               	movlw	7
  5980  003062  EC2D  F03A         	call	_readEEPROM_ext
  5981  003066  0100               	movlb	0	; () banked
  5982  003068  6FE6               	movwf	_tempo_limite_estacionaria& (0+255),b
  5983                           
  5984                           ;util.h: 27: dias_restante_teste = readEEPROM_ext(10);
  5985  00306A  0E0A               	movlw	10
  5986  00306C  EC2D  F03A         	call	_readEEPROM_ext
  5987  003070  0100               	movlb	0	; () banked
  5988  003072  6FE8               	movwf	_dias_restante_teste& (0+255),b
  5989                           
  5990                           ;util.h: 28: horario_de_teste = readEEPROM_ext(11);
  5991  003074  0E0B               	movlw	11
  5992  003076  EC2D  F03A         	call	_readEEPROM_ext
  5993  00307A  0100               	movlb	0	; () banked
  5994  00307C  6FE7               	movwf	_horario_de_teste& (0+255),b
  5995                           
  5996                           ;util.h: 29: tempo_limite_teste_estacionaria = readEEPROM_ext(13);
  5997  00307E  0E0D               	movlw	13
  5998  003080  EC2D  F03A         	call	_readEEPROM_ext
  5999  003084  6E6B               	movwf	_tempo_limite_teste_estacionaria,c
  6000                           
  6001                           ;util.h: 31: habilitaTesteAutomatico = readEEPROM_ext(15);
  6002  003086  0E0F               	movlw	15
  6003  003088  EC2D  F03A         	call	_readEEPROM_ext
  6004  00308C  6E73               	movwf	_habilitaTesteAutomatico,c
  6005                           
  6006                           ;util.h: 33: for (i = 0; i < 11; i++) {
  6007  00308E  0E00               	movlw	0
  6008  003090  0100               	movlb	0	; () banked
  6009  003092  6F95               	movwf	lerParametros@i& (0+255),b
  6010  003094                     l6926:
  6011  003094  FFFF               	dw	65535	; assembler added errata NOP
  6012                           
  6013                           ; BSR set to: 0
  6014  003096  0E0A               	movlw	10
  6015  003098  6595               	cpfsgt	lerParametros@i& (0+255),b
  6016  00309A  D001               	goto	l616
  6017  00309C  D011               	goto	u7750
  6018  00309E                     l616:
  6019  00309E  FFFF               	dw	65535	; assembler added errata NOP
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;util.h: 34: tel1[i] = readEEPROM_ext(20 + i);
  6023                           
  6024                           ; BSR set to: 0
  6025  0030A0  5195               	movf	lerParametros@i& (0+255),w,b
  6026  0030A2  0D01               	mullw	1
  6027  0030A4  0EB0               	movlw	low _tel1
  6028  0030A6  24F3               	addwf	prodl,w,c
  6029  0030A8  6ED9               	movwf	fsr2l,c
  6030  0030AA  0E01               	movlw	high _tel1
  6031  0030AC  20F4               	addwfc	prodh,w,c
  6032  0030AE  6EDA               	movwf	fsr2h,c
  6033  0030B0  5195               	movf	lerParametros@i& (0+255),w,b
  6034  0030B2  0F14               	addlw	20
  6035  0030B4  EC2D  F03A         	call	_readEEPROM_ext
  6036  0030B8  6EDF               	movwf	indf2,c
  6037  0030BA  0100               	movlb	0	; () banked
  6038  0030BC  2B95               	incf	lerParametros@i& (0+255),f,b
  6039  0030BE  D7EA               	goto	l6926
  6040  0030C0                     u7750:
  6041  0030C0  FFFF               	dw	65535	; assembler added errata NOP
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;util.h: 35: }
  6045                           ;util.h: 36: for (i = 0; i < 11; i++) {
  6046                           
  6047                           ; BSR set to: 0
  6048  0030C2  0E00               	movlw	0
  6049  0030C4  6F95               	movwf	lerParametros@i& (0+255),b
  6050  0030C6                     l6938:
  6051  0030C6  FFFF               	dw	65535	; assembler added errata NOP
  6052                           
  6053                           ; BSR set to: 0
  6054  0030C8  0E0A               	movlw	10
  6055  0030CA  6595               	cpfsgt	lerParametros@i& (0+255),b
  6056  0030CC  D001               	goto	l618
  6057  0030CE  D011               	goto	u7770
  6058  0030D0                     l618:
  6059  0030D0  FFFF               	dw	65535	; assembler added errata NOP
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;util.h: 37: tel2[i] = readEEPROM_ext(40 + i);
  6063                           
  6064                           ; BSR set to: 0
  6065  0030D2  5195               	movf	lerParametros@i& (0+255),w,b
  6066  0030D4  0D01               	mullw	1
  6067  0030D6  0EA4               	movlw	low _tel2
  6068  0030D8  24F3               	addwf	prodl,w,c
  6069  0030DA  6ED9               	movwf	fsr2l,c
  6070  0030DC  0E01               	movlw	high _tel2
  6071  0030DE  20F4               	addwfc	prodh,w,c
  6072  0030E0  6EDA               	movwf	fsr2h,c
  6073  0030E2  5195               	movf	lerParametros@i& (0+255),w,b
  6074  0030E4  0F28               	addlw	40
  6075  0030E6  EC2D  F03A         	call	_readEEPROM_ext
  6076  0030EA  6EDF               	movwf	indf2,c
  6077  0030EC  0100               	movlb	0	; () banked
  6078  0030EE  2B95               	incf	lerParametros@i& (0+255),f,b
  6079  0030F0  D7EA               	goto	l6938
  6080  0030F2                     u7770:
  6081  0030F2  FFFF               	dw	65535	; assembler added errata NOP
  6082                           
  6083                           ; BSR set to: 0
  6084                           
  6085                           ; BSR set to: 0
  6086  0030F4  0012               	return		;funcret
  6087  0030F6  FFFF               	dw	65535	; errata NOP
  6088  0030F8                     __end_of_lerParametros:
  6089                           	opt stack 0
  6090                           tblptru	equ	0xFF8
  6091                           tblptrh	equ	0xFF7
  6092                           tblptrl	equ	0xFF6
  6093                           tablat	equ	0xFF5
  6094                           prodh	equ	0xFF4
  6095                           prodl	equ	0xFF3
  6096                           postinc0	equ	0xFEE
  6097                           wreg	equ	0xFE8
  6098                           postdec1	equ	0xFE5
  6099                           fsr1l	equ	0xFE1
  6100                           indf2	equ	0xFDF
  6101                           fsr2h	equ	0xFDA
  6102                           fsr2l	equ	0xFD9
  6103                           status	equ	0xFD8
  6104                           
  6105 ;; *************** function _readEEPROM16_ext *****************
  6106 ;; Defined at:
  6107 ;;		line 48 in file "eeprom.h"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;  adress          1    wreg     unsigned char 
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  adress          1   19[BANK0 ] unsigned char 
  6112 ;;  data            2   17[BANK0 ] unsigned int 
  6113 ;; Return value:  Size  Location     Type
  6114 ;;                  2   14[BANK0 ] unsigned int 
  6115 ;; Registers used:
  6116 ;;		wreg, status,2, status,0, cstack
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6122 ;;      Params:         0       2       0       0       0       0       0
  6123 ;;      Locals:         0       3       0       0       0       0       0
  6124 ;;      Temps:          0       1       0       0       0       0       0
  6125 ;;      Totals:         0       6       0       0       0       0       0
  6126 ;;Total ram usage:        6 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    9
  6129 ;; This function calls:
  6130 ;;		_readEEPROM_ext
  6131 ;; This function is called by:
  6132 ;;		_lerParametros
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           	psect	text11
  6137  006FC2                     __ptext11:
  6138                           	opt stack 0
  6139  006FC2                     _readEEPROM16_ext:
  6140                           	opt stack 0
  6141  006FC2  FFFF               	dw	65535	; assembler added errata NOP
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;incstack = 0
  6145                           ;readEEPROM16_ext@adress stored from wreg
  6146  006FC4  0100               	movlb	0	; () banked
  6147  006FC6  6F93               	movwf	readEEPROM16_ext@adress& (0+255),b
  6148                           
  6149                           ;eeprom.h: 49: unsigned int data;
  6150                           ;eeprom.h: 50: data = readEEPROM_ext(adress + 1);
  6151  006FC8  0100               	movlb	0	; () banked
  6152  006FCA  2993               	incf	readEEPROM16_ext@adress& (0+255),w,b
  6153  006FCC  EC2D  F03A         	call	_readEEPROM_ext
  6154  006FD0  0100               	movlb	0	; () banked
  6155  006FD2  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  6156  006FD4  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  6157  006FD6  6F91               	movwf	readEEPROM16_ext@data& (0+255),b
  6158  006FD8  6B92               	clrf	(readEEPROM16_ext@data+1)& (0+255),b
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;eeprom.h: 51: data <<= 8;
  6162  006FDA  5191               	movf	readEEPROM16_ext@data& (0+255),w,b
  6163  006FDC  6F92               	movwf	(readEEPROM16_ext@data+1)& (0+255),b
  6164  006FDE  6B91               	clrf	readEEPROM16_ext@data& (0+255),b
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;eeprom.h: 52: data |= readEEPROM_ext(adress);
  6168  006FE0  5193               	movf	readEEPROM16_ext@adress& (0+255),w,b
  6169  006FE2  EC2D  F03A         	call	_readEEPROM_ext
  6170  006FE6  0100               	movlb	0	; () banked
  6171  006FE8  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  6172  006FEA  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  6173  006FEC  1391               	iorwf	readEEPROM16_ext@data& (0+255),f,b
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;eeprom.h: 53: return data;
  6177  006FEE  C091  F08E         	movff	readEEPROM16_ext@data,?_readEEPROM16_ext
  6178  006FF2  C092  F08F         	movff	readEEPROM16_ext@data+1,?_readEEPROM16_ext+1
  6179                           
  6180                           ; BSR set to: 0
  6181                           
  6182                           ; BSR set to: 0
  6183  006FF6  0012               	return		;funcret
  6184  006FF8  FFFF               	dw	65535	; errata NOP
  6185  006FFA                     __end_of_readEEPROM16_ext:
  6186                           	opt stack 0
  6187                           tblptru	equ	0xFF8
  6188                           tblptrh	equ	0xFF7
  6189                           tblptrl	equ	0xFF6
  6190                           tablat	equ	0xFF5
  6191                           prodh	equ	0xFF4
  6192                           prodl	equ	0xFF3
  6193                           postinc0	equ	0xFEE
  6194                           wreg	equ	0xFE8
  6195                           postdec1	equ	0xFE5
  6196                           fsr1l	equ	0xFE1
  6197                           indf2	equ	0xFDF
  6198                           fsr2h	equ	0xFDA
  6199                           fsr2l	equ	0xFD9
  6200                           status	equ	0xFD8
  6201                           
  6202 ;; *************** function _informacoes *****************
  6203 ;; Defined at:
  6204 ;;		line 7 in file "tela_INFORMACOES.h"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;		None
  6207 ;; Auto vars:     Size  Location     Type
  6208 ;;		None
  6209 ;; Return value:  Size  Location     Type
  6210 ;;                  1    wreg      void 
  6211 ;; Registers used:
  6212 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6213 ;; Tracked objects:
  6214 ;;		On entry : 0/0
  6215 ;;		On exit  : 0/0
  6216 ;;		Unchanged: 0/0
  6217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6218 ;;      Params:         0       0       0       0       0       0       0
  6219 ;;      Locals:         0       0       0       0       0       0       0
  6220 ;;      Temps:          0       0       0       0       0       0       0
  6221 ;;      Totals:         0       0       0       0       0       0       0
  6222 ;;Total ram usage:        0 bytes
  6223 ;; Hardware stack levels used:    1
  6224 ;; Hardware stack levels required when called:    9
  6225 ;; This function calls:
  6226 ;;		_btPress
  6227 ;;		_sprintf
  6228 ;; This function is called by:
  6229 ;;		_main
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           	psect	text12
  6234  0076AE                     __ptext12:
  6235                           	opt stack 0
  6236  0076AE                     _informacoes:
  6237                           	opt stack 0
  6238  0076AE  FFFF               	dw	65535	; assembler added errata NOP
  6239                           
  6240                           ;tela_INFORMACOES.h: 8: sprintf(line1, "TECHNOW");
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;incstack = 0
  6244  0076B0  0E7B               	movlw	low _line1
  6245  0076B2  0100               	movlb	0	; () banked
  6246  0076B4  6FA1               	movwf	sprintf@wh& (0+255),b
  6247  0076B6  0E01               	movlw	high _line1
  6248  0076B8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6249  0076BA  0E9A               	movlw	low STR_90
  6250  0076BC  6FA3               	movwf	sprintf@f& (0+255),b
  6251  0076BE  0E7F               	movlw	high STR_90
  6252  0076C0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6253  0076C2  EC95  F039         	call	_sprintf	;wreg free
  6254                           
  6255                           ;tela_INFORMACOES.h: 9: sprintf(line2, "Sistemas embarcados");
  6256  0076C6  0E66               	movlw	low _line2
  6257  0076C8  0100               	movlb	0	; () banked
  6258  0076CA  6FA1               	movwf	sprintf@wh& (0+255),b
  6259  0076CC  0E01               	movlw	high _line2
  6260  0076CE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6261  0076D0  0EB0               	movlw	low STR_91
  6262  0076D2  6FA3               	movwf	sprintf@f& (0+255),b
  6263  0076D4  0E7C               	movlw	high STR_91
  6264  0076D6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6265  0076D8  EC95  F039         	call	_sprintf	;wreg free
  6266                           
  6267                           ;tela_INFORMACOES.h: 10: sprintf(line3, "   48 99906-5651");
  6268  0076DC  0E51               	movlw	low _line3
  6269  0076DE  0100               	movlb	0	; () banked
  6270  0076E0  6FA1               	movwf	sprintf@wh& (0+255),b
  6271  0076E2  0E01               	movlw	high _line3
  6272  0076E4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6273  0076E6  0E8F               	movlw	low STR_92
  6274  0076E8  6FA3               	movwf	sprintf@f& (0+255),b
  6275  0076EA  0E7D               	movlw	high STR_92
  6276  0076EC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6277  0076EE  EC95  F039         	call	_sprintf	;wreg free
  6278                           
  6279                           ;tela_INFORMACOES.h: 11: sprintf(line4, "versao - %s", "Nov 25 2019");
  6280  0076F2  0E3C               	movlw	low _line4
  6281  0076F4  0100               	movlb	0	; () banked
  6282  0076F6  6FA1               	movwf	sprintf@wh& (0+255),b
  6283  0076F8  0E01               	movlw	high _line4
  6284  0076FA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6285  0076FC  0EF5               	movlw	low STR_93
  6286  0076FE  6FA3               	movwf	sprintf@f& (0+255),b
  6287  007700  0E7E               	movlw	high STR_93
  6288  007702  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6289  007704  0EB9               	movlw	low STR_15
  6290  007706  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6291  007708  0E7E               	movlw	high STR_15
  6292  00770A  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6293  00770C  EC95  F039         	call	_sprintf	;wreg free
  6294                           
  6295                           ;tela_INFORMACOES.h: 12: if (btPress(1)) {
  6296  007710  0E01               	movlw	1
  6297  007712  ECE6  F03A         	call	_btPress
  6298  007716  0900               	iorlw	0
  6299  007718  A4D8               	btfss	status,2,c
  6300                           
  6301                           ;tela_INFORMACOES.h: 13: menu_posi = _menu_posi;
  6302  00771A  C0DF  F0E0         	movff	__menu_posi,_menu_posi
  6303  00771E  0012               	return		;funcret
  6304  007720  FFFF               	dw	65535	; errata NOP
  6305  007722                     __end_of_informacoes:
  6306                           	opt stack 0
  6307                           tblptru	equ	0xFF8
  6308                           tblptrh	equ	0xFF7
  6309                           tblptrl	equ	0xFF6
  6310                           tablat	equ	0xFF5
  6311                           prodh	equ	0xFF4
  6312                           prodl	equ	0xFF3
  6313                           postinc0	equ	0xFEE
  6314                           wreg	equ	0xFE8
  6315                           postdec1	equ	0xFE5
  6316                           fsr1l	equ	0xFE1
  6317                           indf2	equ	0xFDF
  6318                           fsr2h	equ	0xFDA
  6319                           fsr2l	equ	0xFD9
  6320                           status	equ	0xFD8
  6321                           
  6322 ;; *************** function _getSinalSIM800L *****************
  6323 ;; Defined at:
  6324 ;;		line 13 in file "comunicacao.h"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;		None
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;  sinal           2   72[BANK0 ] int 
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      void 
  6331 ;; Registers used:
  6332 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6338 ;;      Params:         0       0       0       0       0       0       0
  6339 ;;      Locals:         0       2       0       0       0       0       0
  6340 ;;      Temps:          0       2       0       0       0       0       0
  6341 ;;      Totals:         0       4       0       0       0       0       0
  6342 ;;Total ram usage:        4 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; Hardware stack levels required when called:   10
  6345 ;; This function calls:
  6346 ;;		_aguardaBuffer
  6347 ;;		_atoi
  6348 ;;		_delay
  6349 ;;		_getSerial
  6350 ;;		_limparBuffer
  6351 ;;		_printf
  6352 ;;		_writeChar
  6353 ;; This function is called by:
  6354 ;;		_main
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           
  6358                           	psect	text13
  6359  0029EE                     __ptext13:
  6360                           	opt stack 0
  6361  0029EE                     _getSinalSIM800L:
  6362                           	opt stack 0
  6363  0029EE  FFFF               	dw	65535	; assembler added errata NOP
  6364                           
  6365                           ;comunicacao.h: 14: if (!timerVerificarSinal) {
  6366                           
  6367                           ;incstack = 0
  6368  0029F0  0100               	movlb	0	; () banked
  6369  0029F2  51FE               	movf	_timerVerificarSinal& (0+255),w,b
  6370  0029F4  A4D8               	btfss	status,2,c
  6371  0029F6  D0DE               	goto	l304
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;comunicacao.h: 15: if (!gsmOcupado) {
  6375  0029F8  51F4               	movf	_gsmOcupado& (0+255),w,b
  6376  0029FA  B4D8               	btfsc	status,2,c
  6377  0029FC  D0CA               	goto	l302
  6378  0029FE  D0DA               	goto	l304
  6379  002A00  FFFF               	dw	65535	; assembler added errata NOP
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;comunicacao.h: 18: limparBuffer();
  6383                           
  6384                           ; BSR set to: 0
  6385  002A02  EC8F  F037         	call	_limparBuffer	;wreg free
  6386                           
  6387                           ;comunicacao.h: 19: printf("AT+CSQ\r\n");
  6388  002A06  0E7F               	movlw	low STR_3
  6389  002A08  0100               	movlb	0	; () banked
  6390  002A0A  6FA1               	movwf	printf@f& (0+255),b
  6391  002A0C  0E7F               	movlw	high STR_3
  6392  002A0E  6FA2               	movwf	(printf@f+1)& (0+255),b
  6393  002A10  EC90  F038         	call	_printf	;wreg free
  6394                           
  6395                           ;comunicacao.h: 20: timerEtapaComunicacao = 5;
  6396  002A14  0E05               	movlw	5
  6397  002A16  0100               	movlb	0	; () banked
  6398  002A18  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;comunicacao.h: 21: etapaComunicacao = 1;
  6402  002A1A  0E00               	movlw	0
  6403  002A1C  6E52               	movwf	_etapaComunicacao+1,c
  6404  002A1E  0E01               	movlw	1
  6405  002A20  6E51               	movwf	_etapaComunicacao,c
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;comunicacao.h: 22: telefoneSelecionado = 0;
  6409  002A22  0E00               	movlw	0
  6410  002A24  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  6411                           
  6412                           ;comunicacao.h: 23: break;
  6413  002A26  D0C6               	goto	l304
  6414  002A28  FFFF               	dw	65535	; assembler added errata NOP
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;comunicacao.h: 25: if (!timerEtapaComunicacao) {
  6418                           
  6419                           ; BSR set to: 0
  6420  002A2A  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  6421  002A2C  A4D8               	btfss	status,2,c
  6422  002A2E  D03C               	goto	l310
  6423                           
  6424                           ; BSR set to: 0
  6425                           ;comunicacao.h: 26: printf("AT\r\n");
  6426  002A30  0EDD               	movlw	low STR_4
  6427  002A32  6FA1               	movwf	printf@f& (0+255),b
  6428  002A34  0E7F               	movlw	high STR_4
  6429  002A36  6FA2               	movwf	(printf@f+1)& (0+255),b
  6430  002A38  EC90  F038         	call	_printf	;wreg free
  6431                           
  6432                           ;comunicacao.h: 27: delay(100);
  6433  002A3C  0E00               	movlw	0
  6434  002A3E  0100               	movlb	0	; () banked
  6435  002A40  6F81               	movwf	(delay@x+1)& (0+255),b
  6436  002A42  0E64               	movlw	100
  6437  002A44  6F80               	movwf	delay@x& (0+255),b
  6438  002A46  EC74  F037         	call	_delay	;wreg free
  6439                           
  6440                           ;comunicacao.h: 28: if (aguardaBuffer("OK")) {
  6441  002A4A  0EF9               	movlw	low STR_5
  6442  002A4C  0100               	movlb	0	; () banked
  6443  002A4E  6F93               	movwf	aguardaBuffer@str& (0+255),b
  6444  002A50  0E7F               	movlw	high STR_5
  6445  002A52  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  6446  002A54  EC72  F038         	call	_aguardaBuffer	;wreg free
  6447  002A58  0900               	iorlw	0
  6448  002A5A  B4D8               	btfsc	status,2,c
  6449  002A5C  D00D               	goto	l307
  6450                           
  6451                           ;comunicacao.h: 29: etapaComunicacao = 0;
  6452  002A5E  0E00               	movlw	0
  6453  002A60  6E52               	movwf	_etapaComunicacao+1,c
  6454  002A62  0E00               	movlw	0
  6455  002A64  6E51               	movwf	_etapaComunicacao,c
  6456                           
  6457                           ;comunicacao.h: 30: tentativasVerificarGSM = 0;
  6458  002A66  0E00               	movlw	0
  6459  002A68  6E77               	movwf	_tentativasVerificarGSM,c
  6460                           
  6461                           ;comunicacao.h: 32: if (codigoErro == 2) {
  6462  002A6A  0E02               	movlw	2
  6463  002A6C  0100               	movlb	0	; () banked
  6464  002A6E  19F3               	xorwf	_codigoErro& (0+255),w,b
  6465  002A70  A4D8               	btfss	status,2,c
  6466  002A72  D01A               	goto	l310
  6467                           
  6468                           ; BSR set to: 0
  6469                           ;comunicacao.h: 33: codigoErro = 0;
  6470  002A74  0E00               	movlw	0
  6471  002A76  D016               	goto	L10
  6472  002A78                     l307:
  6473  002A78  FFFF               	dw	65535	; assembler added errata NOP
  6474                           
  6475                           ;comunicacao.h: 37: etapaComunicacao = 0;
  6476                           
  6477                           ; BSR set to: 0
  6478  002A7A  0E00               	movlw	0
  6479  002A7C  6E52               	movwf	_etapaComunicacao+1,c
  6480  002A7E  0E00               	movlw	0
  6481  002A80  6E51               	movwf	_etapaComunicacao,c
  6482                           
  6483                           ;comunicacao.h: 38: writeChar(0x1A);
  6484  002A82  0E1A               	movlw	26
  6485  002A84  0100               	movlb	0	; () banked
  6486  002A86  6F80               	movwf	writeChar@hex& (0+255),b
  6487  002A88  0E00               	movlw	0
  6488  002A8A  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  6489  002A8C  EC31  F036         	call	_writeChar	;wreg free
  6490                           
  6491                           ;comunicacao.h: 39: tentativasVerificarGSM++;
  6492  002A90  2A77               	incf	_tentativasVerificarGSM,f,c
  6493                           
  6494                           ;comunicacao.h: 41: if (tentativasVerificarGSM >= 3) {
  6495  002A92  0E02               	movlw	2
  6496  002A94  6477               	cpfsgt	_tentativasVerificarGSM,c
  6497  002A96  D008               	goto	l310
  6498                           
  6499                           ;comunicacao.h: 42: tentativasVerificarGSM = 0;
  6500  002A98  0E00               	movlw	0
  6501  002A9A  6E77               	movwf	_tentativasVerificarGSM,c
  6502                           
  6503                           ;comunicacao.h: 43: intensidadeSinal = 'x';
  6504  002A9C  0E78               	movlw	120
  6505  002A9E  0100               	movlb	0	; () banked
  6506  002AA0  6FFF               	movwf	_intensidadeSinal& (0+255),b
  6507                           
  6508                           ;comunicacao.h: 44: codigoErro = 2;
  6509  002AA2  0E02               	movlw	2
  6510  002AA4                     L10:
  6511  002AA4  FFFF               	dw	65535	; assembler added errata NOP
  6512  002AA6  6FF3               	movwf	_codigoErro& (0+255),b
  6513  002AA8                     l310:
  6514  002AA8  FFFF               	dw	65535	; assembler added errata NOP
  6515                           
  6516                           ;comunicacao.h: 45: }
  6517                           ;comunicacao.h: 46: }
  6518                           ;comunicacao.h: 47: }
  6519                           ;comunicacao.h: 48: if (aguardaBuffer("+CSQ: ")) {
  6520                           
  6521                           ; BSR set to: 0
  6522                           
  6523                           ; BSR set to: 0
  6524                           
  6525                           ; BSR set to: 0
  6526  002AAA  0EB0               	movlw	low STR_6
  6527  002AAC  0100               	movlb	0	; () banked
  6528  002AAE  6F93               	movwf	aguardaBuffer@str& (0+255),b
  6529  002AB0  0E7F               	movlw	high STR_6
  6530  002AB2  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  6531  002AB4  EC72  F038         	call	_aguardaBuffer	;wreg free
  6532  002AB8  0900               	iorlw	0
  6533  002ABA  B4D8               	btfsc	status,2,c
  6534  002ABC  D07B               	goto	l304
  6535                           
  6536                           ;comunicacao.h: 49: int sinal = atoi(getSerial("+CSQ: ", ','));
  6537  002ABE  0EB0               	movlw	low STR_6
  6538  002AC0  0100               	movlb	0	; () banked
  6539  002AC2  6FB5               	movwf	getSerial@str& (0+255),b
  6540  002AC4  0E7F               	movlw	high STR_6
  6541  002AC6  6FB6               	movwf	(getSerial@str+1)& (0+255),b
  6542  002AC8  0E2C               	movlw	44
  6543  002ACA  6FB7               	movwf	getSerial@end& (0+255),b
  6544  002ACC  EC0B  F019         	call	_getSerial	;wreg free
  6545  002AD0  C0B5  F0BF         	movff	?_getSerial,atoi@s
  6546  002AD4  C0B6  F0C0         	movff	?_getSerial+1,atoi@s+1
  6547  002AD8  EC27  F01B         	call	_atoi	;wreg free
  6548  002ADC  C0BF  F0C8         	movff	?_atoi,getSinalSIM800L@sinal
  6549  002AE0  C0C0  F0C9         	movff	?_atoi+1,getSinalSIM800L@sinal+1
  6550                           
  6551                           ;comunicacao.h: 50: if (sinal < 8) {
  6552  002AE4  0100               	movlb	0	; () banked
  6553  002AE6  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6554  002AE8  D006               	goto	u6940
  6555  002AEA  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6556  002AEC  E108               	bnz	l6508
  6557  002AEE  0E08               	movlw	8
  6558  002AF0  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6559  002AF2  B0D8               	btfsc	status,0,c
  6560  002AF4  D003               	goto	l312
  6561  002AF6                     u6940:
  6562  002AF6  FFFF               	dw	65535	; assembler added errata NOP
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;comunicacao.h: 51: intensidadeSinal = ' ';
  6566  002AF8  0E20               	movlw	32
  6567  002AFA  D03B               	goto	L13
  6568  002AFC                     l312:
  6569  002AFC  FFFF               	dw	65535	; assembler added errata NOP
  6570  002AFE                     l6508:
  6571                           
  6572                           ; BSR set to: 0
  6573  002AFE  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6574  002B00  D011               	goto	l314
  6575  002B02  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6576  002B04  E104               	bnz	u6950
  6577  002B06  0E08               	movlw	8
  6578  002B08  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6579  002B0A  A0D8               	btfss	status,0,c
  6580  002B0C  D00B               	goto	l314
  6581  002B0E                     u6950:
  6582                           
  6583                           ; BSR set to: 0
  6584  002B0E  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6585  002B10  D006               	goto	u6960
  6586  002B12  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6587  002B14  E108               	bnz	l6514
  6588  002B16  0E0C               	movlw	12
  6589  002B18  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6590  002B1A  B0D8               	btfsc	status,0,c
  6591  002B1C  D003               	goto	l314
  6592  002B1E                     u6960:
  6593  002B1E  FFFF               	dw	65535	; assembler added errata NOP
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;comunicacao.h: 53: intensidadeSinal = 0x02;
  6597  002B20  0E02               	movlw	2
  6598  002B22  D027               	goto	L13
  6599  002B24                     l314:
  6600  002B24  FFFF               	dw	65535	; assembler added errata NOP
  6601  002B26                     l6514:
  6602                           
  6603                           ; BSR set to: 0
  6604  002B26  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6605  002B28  D011               	goto	l316
  6606  002B2A  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6607  002B2C  E104               	bnz	u6970
  6608  002B2E  0E0C               	movlw	12
  6609  002B30  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6610  002B32  A0D8               	btfss	status,0,c
  6611  002B34  D00B               	goto	l316
  6612  002B36                     u6970:
  6613                           
  6614                           ; BSR set to: 0
  6615  002B36  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6616  002B38  D006               	goto	u6980
  6617  002B3A  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6618  002B3C  E108               	bnz	l6520
  6619  002B3E  0E11               	movlw	17
  6620  002B40  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6621  002B42  B0D8               	btfsc	status,0,c
  6622  002B44  D003               	goto	l316
  6623  002B46                     u6980:
  6624  002B46  FFFF               	dw	65535	; assembler added errata NOP
  6625                           
  6626                           ; BSR set to: 0
  6627                           ;comunicacao.h: 55: intensidadeSinal = 0x03;
  6628  002B48  0E03               	movlw	3
  6629  002B4A  D013               	goto	L13
  6630  002B4C                     l316:
  6631  002B4C  FFFF               	dw	65535	; assembler added errata NOP
  6632  002B4E                     l6520:
  6633                           
  6634                           ; BSR set to: 0
  6635  002B4E  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6636  002B50  D012               	goto	l318
  6637  002B52  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6638  002B54  E104               	bnz	u6990
  6639  002B56  0E11               	movlw	17
  6640  002B58  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6641  002B5A  A0D8               	btfss	status,0,c
  6642  002B5C  D00C               	goto	l318
  6643  002B5E                     u6990:
  6644                           
  6645                           ; BSR set to: 0
  6646  002B5E  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6647  002B60  D006               	goto	u7000
  6648  002B62  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6649  002B64  E109               	bnz	l313
  6650  002B66  0E1F               	movlw	31
  6651  002B68  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6652  002B6A  B0D8               	btfsc	status,0,c
  6653  002B6C  D004               	goto	l318
  6654  002B6E                     u7000:
  6655  002B6E  FFFF               	dw	65535	; assembler added errata NOP
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;comunicacao.h: 57: intensidadeSinal = 0x04;
  6659  002B70  0E04               	movlw	4
  6660  002B72                     L13:
  6661  002B72  FFFF               	dw	65535	; assembler added errata NOP
  6662  002B74  6FFF               	movwf	_intensidadeSinal& (0+255),b
  6663  002B76                     l318:
  6664  002B76  FFFF               	dw	65535	; assembler added errata NOP
  6665  002B78                     l313:
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;comunicacao.h: 58: }
  6669                           ;comunicacao.h: 59: etapaComunicacao = 0;
  6670  002B78  0E00               	movlw	0
  6671  002B7A  6E52               	movwf	_etapaComunicacao+1,c
  6672  002B7C  0E00               	movlw	0
  6673  002B7E  6E51               	movwf	_etapaComunicacao,c
  6674                           
  6675                           ;comunicacao.h: 60: timerVerificarSinal = 5;
  6676  002B80  0E05               	movlw	5
  6677  002B82  6FFE               	movwf	_timerVerificarSinal& (0+255),b
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;comunicacao.h: 61: }
  6681                           ;comunicacao.h: 62: break;
  6682  002B84  D017               	goto	l304
  6683  002B86  FFFF               	dw	65535	; assembler added errata NOP
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;comunicacao.h: 64: etapaComunicacao = 0;
  6687                           
  6688                           ; BSR set to: 0
  6689  002B88  0E00               	movlw	0
  6690  002B8A  6E52               	movwf	_etapaComunicacao+1,c
  6691  002B8C  0E00               	movlw	0
  6692  002B8E  6E51               	movwf	_etapaComunicacao,c
  6693                           
  6694                           ;comunicacao.h: 65: }
  6695  002B90  D011               	goto	l304
  6696  002B92                     l302:
  6697  002B92  FFFF               	dw	65535	; assembler added errata NOP
  6698                           
  6699                           ; BSR set to: 0
  6700                           
  6701                           ; BSR set to: 0
  6702  002B94  C051  F0C6         	movff	_etapaComunicacao,??_getSinalSIM800L
  6703  002B98  C052  F0C7         	movff	_etapaComunicacao+1,??_getSinalSIM800L+1
  6704                           
  6705                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6706                           ; Switch size 1, requested type "space"
  6707                           ; Number of cases is 1, Range of values is 0 to 0
  6708                           ; switch strategies available:
  6709                           ; Name         Instructions Cycles
  6710                           ; simple_byte            4     3 (average)
  6711                           ;	Chosen strategy is simple_byte
  6712  002B9C  51C7               	movf	(??_getSinalSIM800L+1)& (0+255),w,b
  6713  002B9E  0A00               	xorlw	0	; case 0
  6714  002BA0  A4D8               	btfss	status,2,c
  6715  002BA2  D7F1               	goto	l319
  6716                           
  6717                           ; BSR set to: 0
  6718                           ; Switch size 1, requested type "space"
  6719                           ; Number of cases is 2, Range of values is 0 to 1
  6720                           ; switch strategies available:
  6721                           ; Name         Instructions Cycles
  6722                           ; simple_byte            7     4 (average)
  6723                           ;	Chosen strategy is simple_byte
  6724  002BA4  51C6               	movf	??_getSinalSIM800L& (0+255),w,b
  6725  002BA6  0A00               	xorlw	0	; case 0
  6726  002BA8  B4D8               	btfsc	status,2,c
  6727  002BAA  D72A               	goto	l303
  6728  002BAC  0A01               	xorlw	1	; case 1
  6729  002BAE  B4D8               	btfsc	status,2,c
  6730  002BB0  D73B               	goto	l305
  6731  002BB2  D7E9               	goto	l319
  6732  002BB4                     l304:
  6733  002BB4  FFFF               	dw	65535	; assembler added errata NOP
  6734                           
  6735                           ; BSR set to: 0
  6736                           
  6737                           ; BSR set to: 0
  6738                           
  6739                           ; BSR set to: 0
  6740  002BB6  0012               	return		;funcret
  6741  002BB8  FFFF               	dw	65535	; errata NOP
  6742  002BBA                     __end_of_getSinalSIM800L:
  6743                           	opt stack 0
  6744                           tblptru	equ	0xFF8
  6745                           tblptrh	equ	0xFF7
  6746                           tblptrl	equ	0xFF6
  6747                           tablat	equ	0xFF5
  6748                           prodh	equ	0xFF4
  6749                           prodl	equ	0xFF3
  6750                           postinc0	equ	0xFEE
  6751                           wreg	equ	0xFE8
  6752                           postdec1	equ	0xFE5
  6753                           fsr1l	equ	0xFE1
  6754                           indf2	equ	0xFDF
  6755                           fsr2h	equ	0xFDA
  6756                           fsr2l	equ	0xFD9
  6757                           status	equ	0xFD8
  6758                           
  6759 ;; *************** function _getSerial *****************
  6760 ;; Defined at:
  6761 ;;		line 40 in file "serial.h"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;  str             2   53[BANK0 ] PTR unsigned char 
  6764 ;;		 -> STR_7(7), 
  6765 ;;  end             1   55[BANK0 ] unsigned char 
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;  i               1   60[BANK0 ] unsigned char 
  6768 ;;  ret             2   61[BANK0 ] PTR unsigned char 
  6769 ;;		 -> NULL(0), bufferSerial(60), 
  6770 ;;  length          2   58[BANK0 ] unsigned int 
  6771 ;; Return value:  Size  Location     Type
  6772 ;;                  2   53[BANK0 ] PTR unsigned char 
  6773 ;; Registers used:
  6774 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6775 ;; Tracked objects:
  6776 ;;		On entry : 0/0
  6777 ;;		On exit  : 0/0
  6778 ;;		Unchanged: 0/0
  6779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6780 ;;      Params:         0       3       0       0       0       0       0
  6781 ;;      Locals:         0       5       0       0       0       0       0
  6782 ;;      Temps:          0       2       0       0       0       0       0
  6783 ;;      Totals:         0      10       0       0       0       0       0
  6784 ;;Total ram usage:       10 bytes
  6785 ;; Hardware stack levels used:    1
  6786 ;; Hardware stack levels required when called:    9
  6787 ;; This function calls:
  6788 ;;		_memset
  6789 ;;		_sprintf
  6790 ;;		_strlen
  6791 ;;		_strstr
  6792 ;; This function is called by:
  6793 ;;		_getSinalSIM800L
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           	psect	text14
  6798  003216                     __ptext14:
  6799                           	opt stack 0
  6800  003216                     _getSerial:
  6801                           	opt stack 0
  6802  003216  FFFF               	dw	65535	; assembler added errata NOP
  6803                           
  6804                           ;serial.h: 41: memset(bufferAUX, 0, sizeof (bufferAUX));
  6805                           
  6806                           ;incstack = 0
  6807  003218  0E90               	movlw	low _bufferAUX
  6808  00321A  0100               	movlb	0	; () banked
  6809  00321C  6F80               	movwf	memset@p1& (0+255),b
  6810  00321E  0E01               	movlw	high _bufferAUX
  6811  003220  6F81               	movwf	(memset@p1+1)& (0+255),b
  6812  003222  0E00               	movlw	0
  6813  003224  6F83               	movwf	(memset@c+1)& (0+255),b
  6814  003226  0E00               	movlw	0
  6815  003228  6F82               	movwf	memset@c& (0+255),b
  6816  00322A  0E00               	movlw	0
  6817  00322C  6F85               	movwf	(memset@n+1)& (0+255),b
  6818  00322E  0E14               	movlw	20
  6819  003230  6F84               	movwf	memset@n& (0+255),b
  6820  003232  ECFD  F037         	call	_memset	;wreg free
  6821                           
  6822                           ;serial.h: 42: unsigned int length = strlen(str);
  6823  003236  C0B5  F080         	movff	getSerial@str,strlen@s
  6824  00323A  C0B6  F081         	movff	getSerial@str+1,strlen@s+1
  6825  00323E  ECD0  F01F         	call	_strlen	;wreg free
  6826  003242  C080  F0BA         	movff	?_strlen,getSerial@length
  6827  003246  C081  F0BB         	movff	?_strlen+1,getSerial@length+1
  6828                           
  6829                           ;serial.h: 43: char* ret;
  6830                           ;serial.h: 44: ret = strstr(bufferSerial, str);
  6831  00324A  0E00               	movlw	low _bufferSerial
  6832  00324C  0100               	movlb	0	; () banked
  6833  00324E  6F8F               	movwf	strstr@s1& (0+255),b
  6834  003250  0E01               	movlw	high _bufferSerial
  6835  003252  6F90               	movwf	(strstr@s1+1)& (0+255),b
  6836  003254  C0B5  F091         	movff	getSerial@str,strstr@s2
  6837  003258  C0B6  F092         	movff	getSerial@str+1,strstr@s2+1
  6838  00325C  ECEE  F03C         	call	_strstr	;wreg free
  6839  003260  C08F  F0BD         	movff	?_strstr,getSerial@ret
  6840  003264  C090  F0BE         	movff	?_strstr+1,getSerial@ret+1
  6841                           
  6842                           ;serial.h: 45: if (ret) {
  6843  003268  0100               	movlb	0	; () banked
  6844  00326A  51BD               	movf	getSerial@ret& (0+255),w,b
  6845  00326C  11BE               	iorwf	(getSerial@ret+1)& (0+255),w,b
  6846  00326E  B4D8               	btfsc	status,2,c
  6847  003270  D058               	goto	u5650
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;serial.h: 46: unsigned char i = 0;
  6851  003272  0E00               	movlw	0
  6852  003274  6FBC               	movwf	getSerial@i& (0+255),b
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;serial.h: 47: for (i = length; i < strlen(ret); i++) {
  6856  003276  C0BA  F0BC         	movff	getSerial@length,getSerial@i
  6857  00327A  D042               	goto	l267
  6858  00327C  FFFF               	dw	65535	; assembler added errata NOP
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;serial.h: 48: if (ret[i] == end) {
  6862                           
  6863                           ; BSR set to: 0
  6864  00327E  51BC               	movf	getSerial@i& (0+255),w,b
  6865  003280  0D01               	mullw	1
  6866  003282  50F3               	movf	prodl,w,c
  6867  003284  25BD               	addwf	getSerial@ret& (0+255),w,b
  6868  003286  6ED9               	movwf	fsr2l,c
  6869  003288  50F4               	movf	prodh,w,c
  6870  00328A  21BE               	addwfc	(getSerial@ret+1)& (0+255),w,b
  6871  00328C  6EDA               	movwf	fsr2h,c
  6872  00328E  51B7               	movf	getSerial@end& (0+255),w,b
  6873  003290  18DE               	xorwf	postinc2,w,c
  6874  003292  A4D8               	btfss	status,2,c
  6875  003294  D017               	goto	l269
  6876                           
  6877                           ; BSR set to: 0
  6878                           ;serial.h: 49: sprintf(bufferAUX, "%s%c", bufferAUX, '\0');
  6879  003296  0E90               	movlw	low _bufferAUX
  6880  003298  6FA1               	movwf	sprintf@wh& (0+255),b
  6881  00329A  0E01               	movlw	high _bufferAUX
  6882  00329C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6883  00329E  0EE7               	movlw	low STR_1
  6884  0032A0  6FA3               	movwf	sprintf@f& (0+255),b
  6885  0032A2  0E7F               	movlw	high STR_1
  6886  0032A4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6887  0032A6  0E90               	movlw	low _bufferAUX
  6888  0032A8  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6889  0032AA  0E01               	movlw	high _bufferAUX
  6890  0032AC  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6891  0032AE  0E00               	movlw	0
  6892  0032B0  6FA8               	movwf	(?_sprintf+7)& (0+255),b
  6893  0032B2  0E00               	movlw	0
  6894  0032B4  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  6895  0032B6  EC95  F039         	call	_sprintf	;wreg free
  6896                           
  6897                           ;serial.h: 50: return bufferAUX;
  6898  0032BA  0E90               	movlw	low _bufferAUX
  6899  0032BC  0100               	movlb	0	; () banked
  6900  0032BE  6FB5               	movwf	?_getSerial& (0+255),b
  6901  0032C0  0E01               	movlw	high _bufferAUX
  6902  0032C2  D033               	goto	L14
  6903  0032C4                     l269:
  6904  0032C4  FFFF               	dw	65535	; assembler added errata NOP
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;serial.h: 51: }
  6908                           ;serial.h: 52: sprintf(bufferAUX, "%s%c", bufferAUX, ret[i]);
  6909                           
  6910                           ; BSR set to: 0
  6911  0032C6  0E90               	movlw	low _bufferAUX
  6912  0032C8  6FA1               	movwf	sprintf@wh& (0+255),b
  6913  0032CA  0E01               	movlw	high _bufferAUX
  6914  0032CC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6915  0032CE  0EE7               	movlw	low STR_1
  6916  0032D0  6FA3               	movwf	sprintf@f& (0+255),b
  6917  0032D2  0E7F               	movlw	high STR_1
  6918  0032D4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6919  0032D6  0E90               	movlw	low _bufferAUX
  6920  0032D8  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6921  0032DA  0E01               	movlw	high _bufferAUX
  6922  0032DC  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6923  0032DE  51BC               	movf	getSerial@i& (0+255),w,b
  6924  0032E0  0D01               	mullw	1
  6925  0032E2  50F3               	movf	prodl,w,c
  6926  0032E4  25BD               	addwf	getSerial@ret& (0+255),w,b
  6927  0032E6  6ED9               	movwf	fsr2l,c
  6928  0032E8  50F4               	movf	prodh,w,c
  6929  0032EA  21BE               	addwfc	(getSerial@ret+1)& (0+255),w,b
  6930  0032EC  6EDA               	movwf	fsr2h,c
  6931  0032EE  50DF               	movf	indf2,w,c
  6932  0032F0  6FB8               	movwf	??_getSerial& (0+255),b
  6933  0032F2  51B8               	movf	??_getSerial& (0+255),w,b
  6934  0032F4  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  6935  0032F6  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  6936  0032F8  EC95  F039         	call	_sprintf	;wreg free
  6937  0032FC  0100               	movlb	0	; () banked
  6938  0032FE  2BBC               	incf	getSerial@i& (0+255),f,b
  6939  003300                     l267:
  6940  003300  FFFF               	dw	65535	; assembler added errata NOP
  6941                           
  6942                           ; BSR set to: 0
  6943                           
  6944                           ; BSR set to: 0
  6945  003302  C0BD  F080         	movff	getSerial@ret,strlen@s
  6946  003306  C0BE  F081         	movff	getSerial@ret+1,strlen@s+1
  6947  00330A  ECD0  F01F         	call	_strlen	;wreg free
  6948  00330E  0100               	movlb	0	; () banked
  6949  003310  51BC               	movf	getSerial@i& (0+255),w,b
  6950  003312  6FB8               	movwf	??_getSerial& (0+255),b
  6951  003314  6BB9               	clrf	(??_getSerial+1)& (0+255),b
  6952  003316  5180               	movf	?_strlen& (0+255),w,b
  6953  003318  5DB8               	subwf	??_getSerial& (0+255),w,b
  6954  00331A  5181               	movf	(?_strlen+1)& (0+255),w,b
  6955  00331C  59B9               	subwfb	(??_getSerial+1)& (0+255),w,b
  6956  00331E  A0D8               	btfss	status,0,c
  6957  003320  D7AD               	goto	l268
  6958  003322                     u5650:
  6959  003322  FFFF               	dw	65535	; assembler added errata NOP
  6960                           
  6961                           ; BSR set to: 0
  6962                           ;serial.h: 53: }
  6963                           ;serial.h: 54: }
  6964                           ;serial.h: 55: return 0;
  6965                           
  6966                           ; BSR set to: 0
  6967                           
  6968                           ; BSR set to: 0
  6969  003324  0E00               	movlw	0
  6970  003326  6FB5               	movwf	?_getSerial& (0+255),b
  6971  003328  0E00               	movlw	0
  6972  00332A                     L14:
  6973  00332A  FFFF               	dw	65535	; assembler added errata NOP
  6974  00332C  6FB6               	movwf	(?_getSerial+1)& (0+255),b
  6975                           
  6976                           ; BSR set to: 0
  6977                           
  6978                           ; BSR set to: 0
  6979  00332E  0012               	return		;funcret
  6980  003330  FFFF               	dw	65535	; errata NOP
  6981  003332                     __end_of_getSerial:
  6982                           	opt stack 0
  6983                           tblptru	equ	0xFF8
  6984                           tblptrh	equ	0xFF7
  6985                           tblptrl	equ	0xFF6
  6986                           tablat	equ	0xFF5
  6987                           prodh	equ	0xFF4
  6988                           prodl	equ	0xFF3
  6989                           postinc0	equ	0xFEE
  6990                           wreg	equ	0xFE8
  6991                           postdec1	equ	0xFE5
  6992                           fsr1l	equ	0xFE1
  6993                           indf2	equ	0xFDF
  6994                           postinc2	equ	0xFDE
  6995                           fsr2h	equ	0xFDA
  6996                           fsr2l	equ	0xFD9
  6997                           status	equ	0xFD8
  6998                           
  6999 ;; *************** function _atoi *****************
  7000 ;; Defined at:
  7001 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;  s               2   63[BANK0 ] PTR const unsigned char 
  7004 ;;		 -> bufferAUX(20), NULL(0), 
  7005 ;; Auto vars:     Size  Location     Type
  7006 ;;  a               2   68[BANK0 ] int 
  7007 ;;  sign            1   67[BANK0 ] unsigned char 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  2   63[BANK0 ] int 
  7010 ;; Registers used:
  7011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7017 ;;      Params:         0       2       0       0       0       0       0
  7018 ;;      Locals:         0       3       0       0       0       0       0
  7019 ;;      Temps:          0       2       0       0       0       0       0
  7020 ;;      Totals:         0       7       0       0       0       0       0
  7021 ;;Total ram usage:        7 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; Hardware stack levels required when called:    7
  7024 ;; This function calls:
  7025 ;;		___wmul
  7026 ;;		_isdigit
  7027 ;; This function is called by:
  7028 ;;		_getSinalSIM800L
  7029 ;; This function uses a non-reentrant model
  7030 ;;
  7031                           
  7032                           	psect	text15
  7033  00364E                     __ptext15:
  7034                           	opt stack 0
  7035  00364E                     _atoi:
  7036                           	opt stack 0
  7037  00364E  FFFF               	dw	65535	; assembler added errata NOP
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;incstack = 0
  7041  003650  D004               	goto	l1284
  7042  003652  FFFF               	dw	65535	; assembler added errata NOP
  7043  003654  0100               	movlb	0	; () banked
  7044  003656  4BBF               	infsnz	atoi@s& (0+255),f,b
  7045  003658  2BC0               	incf	(atoi@s+1)& (0+255),f,b
  7046  00365A                     l1284:
  7047  00365A  FFFF               	dw	65535	; assembler added errata NOP
  7048                           
  7049                           ; BSR set to: 0
  7050  00365C  C0BF  FFD9         	movff	atoi@s,fsr2l
  7051  003660  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7052  003664  0E20               	movlw	32
  7053  003666  18DE               	xorwf	postinc2,w,c
  7054  003668  B4D8               	btfsc	status,2,c
  7055  00366A  D7F3               	goto	l1285
  7056  00366C  C0BF  FFD9         	movff	atoi@s,fsr2l
  7057  003670  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7058  003674  0E09               	movlw	9
  7059  003676  18DE               	xorwf	postinc2,w,c
  7060  003678  B4D8               	btfsc	status,2,c
  7061  00367A  D7EB               	goto	l1285
  7062  00367C  0E00               	movlw	0
  7063  00367E  0100               	movlb	0	; () banked
  7064  003680  6FC5               	movwf	(atoi@a+1)& (0+255),b
  7065  003682  0E00               	movlw	0
  7066  003684  6FC4               	movwf	atoi@a& (0+255),b
  7067  003686  0E00               	movlw	0
  7068  003688  6FC3               	movwf	atoi@sign& (0+255),b
  7069                           
  7070                           ; BSR set to: 0
  7071  00368A  C0BF  FFD9         	movff	atoi@s,fsr2l
  7072  00368E  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7073  003692  0E2D               	movlw	45
  7074  003694  18DE               	xorwf	postinc2,w,c
  7075  003696  A4D8               	btfss	status,2,c
  7076  003698  D002               	goto	l1287
  7077                           
  7078                           ; BSR set to: 0
  7079  00369A  2BC3               	incf	atoi@sign& (0+255),f,b
  7080  00369C  D028               	goto	l5588
  7081  00369E                     l1287:
  7082  00369E  FFFF               	dw	65535	; assembler added errata NOP
  7083                           
  7084                           ; BSR set to: 0
  7085                           
  7086                           ; BSR set to: 0
  7087  0036A0  C0BF  FFD9         	movff	atoi@s,fsr2l
  7088  0036A4  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7089  0036A8  0E2B               	movlw	43
  7090  0036AA  18DE               	xorwf	postinc2,w,c
  7091  0036AC  A4D8               	btfss	status,2,c
  7092  0036AE  D022               	goto	l1290
  7093  0036B0  D01E               	goto	l5588
  7094  0036B2  FFFF               	dw	65535	; assembler added errata NOP
  7095                           
  7096                           ; BSR set to: 0
  7097  0036B4  C0C4  F080         	movff	atoi@a,___wmul@multiplier
  7098  0036B8  C0C5  F081         	movff	atoi@a+1,___wmul@multiplier+1
  7099  0036BC  0E00               	movlw	0
  7100  0036BE  0100               	movlb	0	; () banked
  7101  0036C0  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7102  0036C2  0E0A               	movlw	10
  7103  0036C4  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7104  0036C6  ECDF  F036         	call	___wmul	;wreg free
  7105  0036CA  C0BF  FFD9         	movff	atoi@s,fsr2l
  7106  0036CE  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7107  0036D2  50DF               	movf	indf2,w,c
  7108  0036D4  0100               	movlb	0	; () banked
  7109  0036D6  6FC1               	movwf	??_atoi& (0+255),b
  7110  0036D8  6BC2               	clrf	(??_atoi+1)& (0+255),b
  7111  0036DA  5180               	movf	?___wmul& (0+255),w,b
  7112  0036DC  27C1               	addwf	??_atoi& (0+255),f,b
  7113  0036DE  5181               	movf	(?___wmul+1)& (0+255),w,b
  7114  0036E0  23C2               	addwfc	(??_atoi+1)& (0+255),f,b
  7115  0036E2  0ED0               	movlw	208
  7116  0036E4  25C1               	addwf	??_atoi& (0+255),w,b
  7117  0036E6  6FC4               	movwf	atoi@a& (0+255),b
  7118  0036E8  0EFF               	movlw	255
  7119  0036EA  21C2               	addwfc	(??_atoi+1)& (0+255),w,b
  7120  0036EC  6FC5               	movwf	(atoi@a+1)& (0+255),b
  7121  0036EE                     l5588:
  7122  0036EE  FFFF               	dw	65535	; assembler added errata NOP
  7123                           
  7124                           ; BSR set to: 0
  7125  0036F0  4BBF               	infsnz	atoi@s& (0+255),f,b
  7126  0036F2  2BC0               	incf	(atoi@s+1)& (0+255),f,b
  7127  0036F4                     l1290:
  7128  0036F4  FFFF               	dw	65535	; assembler added errata NOP
  7129                           
  7130                           ; BSR set to: 0
  7131                           
  7132                           ; BSR set to: 0
  7133  0036F6  C0BF  FFD9         	movff	atoi@s,fsr2l
  7134  0036FA  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7135  0036FE  50DF               	movf	indf2,w,c
  7136  003700  ECB5  F036         	call	_isdigit
  7137  003704  B0D8               	btfsc	status,0,c
  7138  003706  D7D5               	goto	l1291
  7139  003708  0100               	movlb	0	; () banked
  7140  00370A  51C3               	movf	atoi@sign& (0+255),w,b
  7141  00370C  B4D8               	btfsc	status,2,c
  7142  00370E  D00D               	goto	l1293
  7143                           
  7144                           ; BSR set to: 0
  7145  003710  C0C4  F0C1         	movff	atoi@a,??_atoi
  7146  003714  C0C5  F0C2         	movff	atoi@a+1,??_atoi+1
  7147  003718  1FC1               	comf	??_atoi& (0+255),f,b
  7148  00371A  1FC2               	comf	(??_atoi+1)& (0+255),f,b
  7149  00371C  4BC1               	infsnz	??_atoi& (0+255),f,b
  7150  00371E  2BC2               	incf	(??_atoi+1)& (0+255),f,b
  7151  003720  C0C1  F0BF         	movff	??_atoi,?_atoi
  7152  003724  C0C2  F0C0         	movff	??_atoi+1,?_atoi+1
  7153  003728  D005               	goto	l1294
  7154  00372A                     l1293:
  7155  00372A  FFFF               	dw	65535	; assembler added errata NOP
  7156                           
  7157                           ; BSR set to: 0
  7158  00372C  C0C4  F0BF         	movff	atoi@a,?_atoi
  7159  003730  C0C5  F0C0         	movff	atoi@a+1,?_atoi+1
  7160  003734                     l1294:
  7161  003734  FFFF               	dw	65535	; assembler added errata NOP
  7162                           
  7163                           ; BSR set to: 0
  7164  003736  0012               	return		;funcret
  7165  003738  FFFF               	dw	65535	; errata NOP
  7166  00373A                     __end_of_atoi:
  7167                           	opt stack 0
  7168                           tblptru	equ	0xFF8
  7169                           tblptrh	equ	0xFF7
  7170                           tblptrl	equ	0xFF6
  7171                           tablat	equ	0xFF5
  7172                           prodh	equ	0xFF4
  7173                           prodl	equ	0xFF3
  7174                           postinc0	equ	0xFEE
  7175                           wreg	equ	0xFE8
  7176                           postdec1	equ	0xFE5
  7177                           fsr1l	equ	0xFE1
  7178                           indf2	equ	0xFDF
  7179                           postinc2	equ	0xFDE
  7180                           fsr2h	equ	0xFDA
  7181                           fsr2l	equ	0xFD9
  7182                           status	equ	0xFD8
  7183                           
  7184 ;; *************** function _getDS1307TimeDate *****************
  7185 ;; Defined at:
  7186 ;;		line 52 in file "ds1307.h"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  7189 ;;		 -> rtc(7), 
  7190 ;; Auto vars:     Size  Location     Type
  7191 ;;		None
  7192 ;; Return value:  Size  Location     Type
  7193 ;;                  1    wreg      void 
  7194 ;; Registers used:
  7195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7196 ;; Tracked objects:
  7197 ;;		On entry : 0/0
  7198 ;;		On exit  : 0/0
  7199 ;;		Unchanged: 0/0
  7200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7201 ;;      Params:         0       2       0       0       0       0       0
  7202 ;;      Locals:         0       0       0       0       0       0       0
  7203 ;;      Temps:          0       0       0       0       0       0       0
  7204 ;;      Totals:         0       2       0       0       0       0       0
  7205 ;;Total ram usage:        2 bytes
  7206 ;; Hardware stack levels used:    1
  7207 ;; Hardware stack levels required when called:    8
  7208 ;; This function calls:
  7209 ;;		_BCDtoDEC
  7210 ;;		_I2C_Read
  7211 ;;		_I2C_Restart
  7212 ;;		_I2C_Start
  7213 ;;		_I2C_Stop
  7214 ;;		_I2C_Write
  7215 ;; This function is called by:
  7216 ;;		_main
  7217 ;; This function uses a non-reentrant model
  7218 ;;
  7219                           
  7220                           	psect	text16
  7221  002EA0                     __ptext16:
  7222                           	opt stack 0
  7223  002EA0                     _getDS1307TimeDate:
  7224                           	opt stack 0
  7225  002EA0  FFFF               	dw	65535	; assembler added errata NOP
  7226                           
  7227                           ;ds1307.h: 54: I2C_Start();
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;incstack = 0
  7231  002EA2  EC11  F036         	call	_I2C_Start	;wreg free
  7232                           
  7233                           ;ds1307.h: 55: I2C_Write(0xD0);
  7234  002EA6  0E00               	movlw	0
  7235  002EA8  0100               	movlb	0	; () banked
  7236  002EAA  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7237  002EAC  0ED0               	movlw	208
  7238  002EAE  6F8A               	movwf	I2C_Write@d& (0+255),b
  7239  002EB0  EC2A  F036         	call	_I2C_Write	;wreg free
  7240                           
  7241                           ;ds1307.h: 56: I2C_Write(0x00);
  7242  002EB4  0E00               	movlw	0
  7243  002EB6  0100               	movlb	0	; () banked
  7244  002EB8  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7245  002EBA  0E00               	movlw	0
  7246  002EBC  6F8A               	movwf	I2C_Write@d& (0+255),b
  7247  002EBE  EC2A  F036         	call	_I2C_Write	;wreg free
  7248                           
  7249                           ;ds1307.h: 57: I2C_Restart();
  7250  002EC2  EC1D  F036         	call	_I2C_Restart	;wreg free
  7251                           
  7252                           ;ds1307.h: 58: I2C_Write(0xD1);
  7253  002EC6  0E00               	movlw	0
  7254  002EC8  0100               	movlb	0	; () banked
  7255  002ECA  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7256  002ECC  0ED1               	movlw	209
  7257  002ECE  6F8A               	movwf	I2C_Write@d& (0+255),b
  7258  002ED0  EC2A  F036         	call	_I2C_Write	;wreg free
  7259                           
  7260                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
  7261  002ED4  0100               	movlb	0	; () banked
  7262  002ED6  EE20 F001          	lfsr	2,1
  7263  002EDA  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7264  002EDC  26D9               	addwf	fsr2l,f,c
  7265  002EDE  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7266  002EE0  22DA               	addwfc	fsr2h,f,c
  7267  002EE2  0E00               	movlw	0
  7268  002EE4  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7269  002EE6  0E01               	movlw	1
  7270  002EE8  6F81               	movwf	I2C_Read@a& (0+255),b
  7271  002EEA  EC1A  F038         	call	_I2C_Read	;wreg free
  7272  002EEE  0100               	movlb	0	; () banked
  7273  002EF0  5181               	movf	?_I2C_Read& (0+255),w,b
  7274  002EF2  EC6F  F036         	call	_BCDtoDEC
  7275  002EF6  6EDF               	movwf	indf2,c
  7276                           
  7277                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
  7278  002EF8  0100               	movlb	0	; () banked
  7279  002EFA  EE20 F002          	lfsr	2,2
  7280  002EFE  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7281  002F00  26D9               	addwf	fsr2l,f,c
  7282  002F02  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7283  002F04  22DA               	addwfc	fsr2h,f,c
  7284  002F06  0E00               	movlw	0
  7285  002F08  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7286  002F0A  0E01               	movlw	1
  7287  002F0C  6F81               	movwf	I2C_Read@a& (0+255),b
  7288  002F0E  EC1A  F038         	call	_I2C_Read	;wreg free
  7289  002F12  0100               	movlb	0	; () banked
  7290  002F14  5181               	movf	?_I2C_Read& (0+255),w,b
  7291  002F16  EC6F  F036         	call	_BCDtoDEC
  7292  002F1A  6EDF               	movwf	indf2,c
  7293                           
  7294                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
  7295  002F1C  0100               	movlb	0	; () banked
  7296  002F1E  EE20 F003          	lfsr	2,3
  7297  002F22  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7298  002F24  26D9               	addwf	fsr2l,f,c
  7299  002F26  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7300  002F28  22DA               	addwfc	fsr2h,f,c
  7301  002F2A  0E00               	movlw	0
  7302  002F2C  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7303  002F2E  0E01               	movlw	1
  7304  002F30  6F81               	movwf	I2C_Read@a& (0+255),b
  7305  002F32  EC1A  F038         	call	_I2C_Read	;wreg free
  7306  002F36  0100               	movlb	0	; () banked
  7307  002F38  5181               	movf	?_I2C_Read& (0+255),w,b
  7308  002F3A  EC6F  F036         	call	_BCDtoDEC
  7309  002F3E  6EDF               	movwf	indf2,c
  7310                           
  7311                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
  7312  002F40  0E00               	movlw	0
  7313  002F42  0100               	movlb	0	; () banked
  7314  002F44  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7315  002F46  0E01               	movlw	1
  7316  002F48  6F81               	movwf	I2C_Read@a& (0+255),b
  7317  002F4A  EC1A  F038         	call	_I2C_Read	;wreg free
  7318  002F4E  0100               	movlb	0	; () banked
  7319  002F50  5181               	movf	?_I2C_Read& (0+255),w,b
  7320  002F52  EC6F  F036         	call	_BCDtoDEC
  7321  002F56  C08C  FFD9         	movff	getDS1307TimeDate@ptrToUserVal,fsr2l
  7322  002F5A  C08D  FFDA         	movff	getDS1307TimeDate@ptrToUserVal+1,fsr2h
  7323  002F5E  6EDF               	movwf	indf2,c
  7324                           
  7325                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
  7326  002F60  0100               	movlb	0	; () banked
  7327  002F62  EE20 F004          	lfsr	2,4
  7328  002F66  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7329  002F68  26D9               	addwf	fsr2l,f,c
  7330  002F6A  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7331  002F6C  22DA               	addwfc	fsr2h,f,c
  7332  002F6E  0E00               	movlw	0
  7333  002F70  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7334  002F72  0E01               	movlw	1
  7335  002F74  6F81               	movwf	I2C_Read@a& (0+255),b
  7336  002F76  EC1A  F038         	call	_I2C_Read	;wreg free
  7337  002F7A  0100               	movlb	0	; () banked
  7338  002F7C  5181               	movf	?_I2C_Read& (0+255),w,b
  7339  002F7E  EC6F  F036         	call	_BCDtoDEC
  7340  002F82  6EDF               	movwf	indf2,c
  7341                           
  7342                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
  7343  002F84  0100               	movlb	0	; () banked
  7344  002F86  EE20 F005          	lfsr	2,5
  7345  002F8A  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7346  002F8C  26D9               	addwf	fsr2l,f,c
  7347  002F8E  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7348  002F90  22DA               	addwfc	fsr2h,f,c
  7349  002F92  0E00               	movlw	0
  7350  002F94  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7351  002F96  0E01               	movlw	1
  7352  002F98  6F81               	movwf	I2C_Read@a& (0+255),b
  7353  002F9A  EC1A  F038         	call	_I2C_Read	;wreg free
  7354  002F9E  0100               	movlb	0	; () banked
  7355  002FA0  5181               	movf	?_I2C_Read& (0+255),w,b
  7356  002FA2  EC6F  F036         	call	_BCDtoDEC
  7357  002FA6  6EDF               	movwf	indf2,c
  7358                           
  7359                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
  7360  002FA8  0100               	movlb	0	; () banked
  7361  002FAA  EE20 F006          	lfsr	2,6
  7362  002FAE  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7363  002FB0  26D9               	addwf	fsr2l,f,c
  7364  002FB2  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7365  002FB4  22DA               	addwfc	fsr2h,f,c
  7366  002FB6  0E00               	movlw	0
  7367  002FB8  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7368  002FBA  0E00               	movlw	0
  7369  002FBC  6F81               	movwf	I2C_Read@a& (0+255),b
  7370  002FBE  EC1A  F038         	call	_I2C_Read	;wreg free
  7371  002FC2  0100               	movlb	0	; () banked
  7372  002FC4  5181               	movf	?_I2C_Read& (0+255),w,b
  7373  002FC6  EC6F  F036         	call	_BCDtoDEC
  7374  002FCA  6EDF               	movwf	indf2,c
  7375                           
  7376                           ;ds1307.h: 66: I2C_Stop();
  7377  002FCC  EC17  F036         	call	_I2C_Stop	;wreg free
  7378  002FD0  0012               	return		;funcret
  7379  002FD2  FFFF               	dw	65535	; errata NOP
  7380  002FD4                     __end_of_getDS1307TimeDate:
  7381                           	opt stack 0
  7382                           tblptru	equ	0xFF8
  7383                           tblptrh	equ	0xFF7
  7384                           tblptrl	equ	0xFF6
  7385                           tablat	equ	0xFF5
  7386                           prodh	equ	0xFF4
  7387                           prodl	equ	0xFF3
  7388                           postinc0	equ	0xFEE
  7389                           wreg	equ	0xFE8
  7390                           postdec1	equ	0xFE5
  7391                           fsr1l	equ	0xFE1
  7392                           indf2	equ	0xFDF
  7393                           postinc2	equ	0xFDE
  7394                           fsr2h	equ	0xFDA
  7395                           fsr2l	equ	0xFD9
  7396                           status	equ	0xFD8
  7397                           
  7398 ;; *************** function _BCDtoDEC *****************
  7399 ;; Defined at:
  7400 ;;		line 34 in file "function.c"
  7401 ;; Parameters:    Size  Location     Type
  7402 ;;  val             1    wreg     unsigned char 
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;  val             1    0[BANK0 ] unsigned char 
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  1    wreg      unsigned char 
  7407 ;; Registers used:
  7408 ;;		wreg, status,2, status,0, prodl, prodh
  7409 ;; Tracked objects:
  7410 ;;		On entry : 0/0
  7411 ;;		On exit  : 0/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7414 ;;      Params:         0       0       0       0       0       0       0
  7415 ;;      Locals:         0       1       0       0       0       0       0
  7416 ;;      Temps:          0       0       0       0       0       0       0
  7417 ;;      Totals:         0       1       0       0       0       0       0
  7418 ;;Total ram usage:        1 bytes
  7419 ;; Hardware stack levels used:    1
  7420 ;; Hardware stack levels required when called:    6
  7421 ;; This function calls:
  7422 ;;		Nothing
  7423 ;; This function is called by:
  7424 ;;		_getDS1307TimeDate
  7425 ;;		_getDS1307Time
  7426 ;; This function uses a non-reentrant model
  7427 ;;
  7428                           
  7429                           	psect	text17
  7430  006CDE                     __ptext17:
  7431                           	opt stack 0
  7432  006CDE                     _BCDtoDEC:
  7433                           	opt stack 0
  7434  006CDE  FFFF               	dw	65535	; assembler added errata NOP
  7435                           
  7436                           ;incstack = 0
  7437                           ;BCDtoDEC@val stored from wreg
  7438  006CE0  0100               	movlb	0	; () banked
  7439  006CE2  6F80               	movwf	BCDtoDEC@val& (0+255),b
  7440                           
  7441                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
  7442  006CE4  0100               	movlb	0	; () banked
  7443  006CE6  3980               	swapf	BCDtoDEC@val& (0+255),w,b
  7444  006CE8  0B0F               	andlw	15
  7445  006CEA  0B0F               	andlw	15
  7446  006CEC  0D0A               	mullw	10
  7447  006CEE  5180               	movf	BCDtoDEC@val& (0+255),w,b
  7448  006CF0  0B0F               	andlw	15
  7449  006CF2  24F3               	addwf	prodl,w,c
  7450                           
  7451                           ; BSR set to: 0
  7452                           
  7453                           ; BSR set to: 0
  7454  006CF4  0012               	return		;funcret
  7455  006CF6  FFFF               	dw	65535	; errata NOP
  7456  006CF8                     __end_of_BCDtoDEC:
  7457                           	opt stack 0
  7458                           tblptru	equ	0xFF8
  7459                           tblptrh	equ	0xFF7
  7460                           tblptrl	equ	0xFF6
  7461                           tablat	equ	0xFF5
  7462                           prodh	equ	0xFF4
  7463                           prodl	equ	0xFF3
  7464                           postinc0	equ	0xFEE
  7465                           wreg	equ	0xFE8
  7466                           postdec1	equ	0xFE5
  7467                           fsr1l	equ	0xFE1
  7468                           indf2	equ	0xFDF
  7469                           postinc2	equ	0xFDE
  7470                           fsr2h	equ	0xFDA
  7471                           fsr2l	equ	0xFD9
  7472                           status	equ	0xFD8
  7473                           
  7474 ;; *************** function _dataLoger *****************
  7475 ;; Defined at:
  7476 ;;		line 12 in file "tela_DATALOGER.h"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;		None
  7479 ;; Auto vars:     Size  Location     Type
  7480 ;;  logs            1   64[BANK0 ] unsigned char 
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  1    wreg      void 
  7483 ;; Registers used:
  7484 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7490 ;;      Params:         0       0       0       0       0       0       0
  7491 ;;      Locals:         0       7       0       0       0       0       0
  7492 ;;      Temps:          0       5       0       0       0       0       0
  7493 ;;      Totals:         0      12       0       0       0       0       0
  7494 ;;Total ram usage:       12 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:    9
  7497 ;; This function calls:
  7498 ;;		___awdiv
  7499 ;;		_btPress
  7500 ;;		_readEEPROM_ext
  7501 ;;		_sprintf
  7502 ;; This function is called by:
  7503 ;;		_main
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           	psect	text18
  7508  001DCA                     __ptext18:
  7509                           	opt stack 0
  7510  001DCA                     _dataLoger:
  7511                           	opt stack 0
  7512  001DCA  FFFF               	dw	65535	; assembler added errata NOP
  7513                           
  7514                           ;tela_DATALOGER.h: 13: sprintf(line1, "Data: %02d/%02d/%02d %02d:%02d", dtl_dia, dtl_mes
      +                          , dtl_ano, dtl_hora, dtl_min);
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;incstack = 0
  7518  001DCC  0E7B               	movlw	low _line1
  7519  001DCE  0100               	movlb	0	; () banked
  7520  001DD0  6FA1               	movwf	sprintf@wh& (0+255),b
  7521  001DD2  0E01               	movlw	high _line1
  7522  001DD4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7523  001DD6  0ED4               	movlw	low STR_79
  7524  001DD8  6FA3               	movwf	sprintf@f& (0+255),b
  7525  001DDA  0E7B               	movlw	high STR_79
  7526  001DDC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7527  001DDE  C05D  F0A5         	movff	_dtl_dia,?_sprintf+4
  7528  001DE2  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7529  001DE4  C05C  F0A7         	movff	_dtl_mes,?_sprintf+6
  7530  001DE8  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  7531  001DEA  C05B  F0A9         	movff	_dtl_ano,?_sprintf+8
  7532  001DEE  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  7533  001DF0  C05A  F0AB         	movff	_dtl_hora,?_sprintf+10
  7534  001DF4  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  7535  001DF6  C059  F0AD         	movff	_dtl_min,?_sprintf+12
  7536  001DFA  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  7537  001DFC  EC95  F039         	call	_sprintf	;wreg free
  7538                           
  7539                           ;tela_DATALOGER.h: 14: sprintf(line2, "Jokey: %s", dtl_jockey == 1 ? "OK" : "ERRO");
  7540  001E00  0458               	decf	_dtl_jockey,w,c
  7541  001E02  B4D8               	btfsc	status,2,c
  7542  001E04  D005               	goto	l792
  7543  001E06  0EE2               	movlw	low STR_50
  7544  001E08  0100               	movlb	0	; () banked
  7545  001E0A  6FBA               	movwf	_dataLoger$1443& (0+255),b
  7546  001E0C  0E7F               	movlw	high STR_50
  7547  001E0E  D005               	goto	L15
  7548  001E10                     l792:
  7549  001E10  FFFF               	dw	65535	; assembler added errata NOP
  7550                           
  7551                           ; BSR set to: 0
  7552  001E12  0EF9               	movlw	low STR_5
  7553  001E14  0100               	movlb	0	; () banked
  7554  001E16  6FBA               	movwf	_dataLoger$1443& (0+255),b
  7555  001E18  0E7F               	movlw	high STR_5
  7556  001E1A                     L15:
  7557  001E1A  FFFF               	dw	65535	; assembler added errata NOP
  7558  001E1C  6FBB               	movwf	(_dataLoger$1443+1)& (0+255),b
  7559                           
  7560                           ; BSR set to: 0
  7561                           
  7562                           ; BSR set to: 0
  7563  001E1E  0E66               	movlw	low _line2
  7564  001E20  6FA1               	movwf	sprintf@wh& (0+255),b
  7565  001E22  0E01               	movlw	high _line2
  7566  001E24  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7567  001E26  0E75               	movlw	low STR_80
  7568  001E28  6FA3               	movwf	sprintf@f& (0+255),b
  7569  001E2A  0E7F               	movlw	high STR_80
  7570  001E2C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7571  001E2E  C0BA  F0A5         	movff	_dataLoger$1443,?_sprintf+4
  7572  001E32  C0BB  F0A6         	movff	_dataLoger$1443+1,?_sprintf+5
  7573  001E36  EC95  F039         	call	_sprintf	;wreg free
  7574                           
  7575                           ;tela_DATALOGER.h: 15: sprintf(&line2[14], "#%02d/%02d", (dtl_posi_visualizar + 1), tota
      +                          lLogs);
  7576  001E3A  0E74               	movlw	low (_line2+14)
  7577  001E3C  0100               	movlb	0	; () banked
  7578  001E3E  6FA1               	movwf	sprintf@wh& (0+255),b
  7579  001E40  0E01               	movlw	high (_line2+14)
  7580  001E42  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7581  001E44  0E17               	movlw	low STR_83
  7582  001E46  6FA3               	movwf	sprintf@f& (0+255),b
  7583  001E48  0E7F               	movlw	high STR_83
  7584  001E4A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7585  001E4C  0E01               	movlw	1
  7586  001E4E  2453               	addwf	_dtl_posi_visualizar,w,c
  7587  001E50  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  7588  001E52  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7589  001E54  0E00               	movlw	0
  7590  001E56  23A6               	addwfc	(?_sprintf+5)& (0+255),f,b
  7591  001E58  C054  F0A7         	movff	_totalLogs,?_sprintf+6
  7592  001E5C  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  7593  001E5E  EC95  F039         	call	_sprintf	;wreg free
  7594                           
  7595                           ;tela_DATALOGER.h: 16: sprintf(line3, "Principal: %s", dtl_principal == 1 ? "OK" : "ERRO
      +                          ");
  7596  001E62  0457               	decf	_dtl_principal,w,c
  7597  001E64  B4D8               	btfsc	status,2,c
  7598  001E66  D005               	goto	l796
  7599  001E68  0EE2               	movlw	low STR_50
  7600  001E6A  0100               	movlb	0	; () banked
  7601  001E6C  6FBC               	movwf	_dataLoger$1449& (0+255),b
  7602  001E6E  0E7F               	movlw	high STR_50
  7603  001E70  D005               	goto	L16
  7604  001E72                     l796:
  7605  001E72  FFFF               	dw	65535	; assembler added errata NOP
  7606                           
  7607                           ; BSR set to: 0
  7608  001E74  0EF9               	movlw	low STR_5
  7609  001E76  0100               	movlb	0	; () banked
  7610  001E78  6FBC               	movwf	_dataLoger$1449& (0+255),b
  7611  001E7A  0E7F               	movlw	high STR_5
  7612  001E7C                     L16:
  7613  001E7C  FFFF               	dw	65535	; assembler added errata NOP
  7614  001E7E  6FBD               	movwf	(_dataLoger$1449+1)& (0+255),b
  7615                           
  7616                           ; BSR set to: 0
  7617                           
  7618                           ; BSR set to: 0
  7619  001E80  0E51               	movlw	low _line3
  7620  001E82  6FA1               	movwf	sprintf@wh& (0+255),b
  7621  001E84  0E01               	movlw	high _line3
  7622  001E86  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7623  001E88  0E77               	movlw	low STR_84
  7624  001E8A  6FA3               	movwf	sprintf@f& (0+255),b
  7625  001E8C  0E7E               	movlw	high STR_84
  7626  001E8E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7627  001E90  C0BC  F0A5         	movff	_dataLoger$1449,?_sprintf+4
  7628  001E94  C0BD  F0A6         	movff	_dataLoger$1449+1,?_sprintf+5
  7629  001E98  EC95  F039         	call	_sprintf	;wreg free
  7630                           
  7631                           ;tela_DATALOGER.h: 17: sprintf(line4, "Combustao: %s", dtl_estacionaria == 1 ? "OK" : "E
      +                          RRO");
  7632  001E9C  0456               	decf	_dtl_estacionaria,w,c
  7633  001E9E  B4D8               	btfsc	status,2,c
  7634  001EA0  D005               	goto	l800
  7635  001EA2  0EE2               	movlw	low STR_50
  7636  001EA4  0100               	movlb	0	; () banked
  7637  001EA6  6FBE               	movwf	_dataLoger$1454& (0+255),b
  7638  001EA8  0E7F               	movlw	high STR_50
  7639  001EAA  D005               	goto	L17
  7640  001EAC                     l800:
  7641  001EAC  FFFF               	dw	65535	; assembler added errata NOP
  7642                           
  7643                           ; BSR set to: 0
  7644  001EAE  0EF9               	movlw	low STR_5
  7645  001EB0  0100               	movlb	0	; () banked
  7646  001EB2  6FBE               	movwf	_dataLoger$1454& (0+255),b
  7647  001EB4  0E7F               	movlw	high STR_5
  7648  001EB6                     L17:
  7649  001EB6  FFFF               	dw	65535	; assembler added errata NOP
  7650  001EB8  6FBF               	movwf	(_dataLoger$1454+1)& (0+255),b
  7651                           
  7652                           ; BSR set to: 0
  7653                           
  7654                           ; BSR set to: 0
  7655  001EBA  0E3C               	movlw	low _line4
  7656  001EBC  6FA1               	movwf	sprintf@wh& (0+255),b
  7657  001EBE  0E01               	movlw	high _line4
  7658  001EC0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7659  001EC2  0E85               	movlw	low STR_87
  7660  001EC4  6FA3               	movwf	sprintf@f& (0+255),b
  7661  001EC6  0E7E               	movlw	high STR_87
  7662  001EC8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7663  001ECA  C0BE  F0A5         	movff	_dataLoger$1454,?_sprintf+4
  7664  001ECE  C0BF  F0A6         	movff	_dataLoger$1454+1,?_sprintf+5
  7665  001ED2  EC95  F039         	call	_sprintf	;wreg free
  7666                           
  7667                           ;tela_DATALOGER.h: 19: if (btPress(1)) {
  7668  001ED6  0E01               	movlw	1
  7669  001ED8  ECE6  F03A         	call	_btPress
  7670  001EDC  0900               	iorlw	0
  7671  001EDE  B4D8               	btfsc	status,2,c
  7672  001EE0  D005               	goto	l803
  7673                           
  7674                           ;tela_DATALOGER.h: 20: option_posi = 0;
  7675  001EE2  0E00               	movlw	0
  7676  001EE4  0100               	movlb	0	; () banked
  7677  001EE6  6FE1               	movwf	_option_posi& (0+255),b
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;tela_DATALOGER.h: 21: menu_posi = _menu_posi;
  7681  001EE8  C0DF  F0E0         	movff	__menu_posi,_menu_posi
  7682  001EEC                     l803:
  7683  001EEC  FFFF               	dw	65535	; assembler added errata NOP
  7684                           
  7685                           ;tela_DATALOGER.h: 22: }
  7686                           ;tela_DATALOGER.h: 27: if (btPress(2)) {
  7687                           
  7688                           ; BSR set to: 0
  7689  001EEE  0E02               	movlw	2
  7690  001EF0  ECE6  F03A         	call	_btPress
  7691  001EF4  0900               	iorlw	0
  7692  001EF6  B4D8               	btfsc	status,2,c
  7693  001EF8  D00B               	goto	l804
  7694                           
  7695                           ;tela_DATALOGER.h: 28: dtl_posicao -= 8;
  7696  001EFA  0E08               	movlw	8
  7697  001EFC  0100               	movlb	0	; () banked
  7698  001EFE  5FFA               	subwf	_dtl_posicao& (0+255),f,b
  7699                           
  7700                           ;tela_DATALOGER.h: 29: if (dtl_posicao < 60) {
  7701  001F00  0E3C               	movlw	60
  7702  001F02  61FA               	cpfslt	_dtl_posicao& (0+255),b
  7703  001F04  D002               	goto	l805
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;tela_DATALOGER.h: 30: dtl_posicao = 60;
  7707  001F06  0E3C               	movlw	60
  7708  001F08  6FFA               	movwf	_dtl_posicao& (0+255),b
  7709  001F0A                     l805:
  7710  001F0A  FFFF               	dw	65535	; assembler added errata NOP
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;tela_DATALOGER.h: 31: }
  7714                           ;tela_DATALOGER.h: 32: dtl_carregar_log = 1;
  7715  001F0C  0E01               	movlw	1
  7716  001F0E  6E55               	movwf	_dtl_carregar_log,c
  7717  001F10                     l804:
  7718  001F10  FFFF               	dw	65535	; assembler added errata NOP
  7719                           
  7720                           ;tela_DATALOGER.h: 33: }
  7721                           ;tela_DATALOGER.h: 34: if (btPress(3)) {
  7722                           
  7723                           ; BSR set to: 0
  7724  001F12  0E03               	movlw	3
  7725  001F14  ECE6  F03A         	call	_btPress
  7726  001F18  0900               	iorlw	0
  7727  001F1A  B4D8               	btfsc	status,2,c
  7728  001F1C  D019               	goto	l806
  7729                           
  7730                           ;tela_DATALOGER.h: 35: if ((dtl_posi_visualizar + 1) >= totalLogs) {
  7731  001F1E  5054               	movf	_totalLogs,w,c
  7732  001F20  0100               	movlb	0	; () banked
  7733  001F22  6FB5               	movwf	??_dataLoger& (0+255),b
  7734  001F24  6BB6               	clrf	(??_dataLoger+1)& (0+255),b
  7735  001F26  5053               	movf	_dtl_posi_visualizar,w,c
  7736  001F28  6FB7               	movwf	(??_dataLoger+2)& (0+255),b
  7737  001F2A  6BB8               	clrf	(??_dataLoger+3)& (0+255),b
  7738  001F2C  0E01               	movlw	1
  7739  001F2E  27B7               	addwf	(??_dataLoger+2)& (0+255),f,b
  7740  001F30  0E00               	movlw	0
  7741  001F32  23B8               	addwfc	(??_dataLoger+3)& (0+255),f,b
  7742  001F34  51B5               	movf	??_dataLoger& (0+255),w,b
  7743  001F36  5DB7               	subwf	(??_dataLoger+2)& (0+255),w,b
  7744  001F38  51B8               	movf	(??_dataLoger+3)& (0+255),w,b
  7745  001F3A  0A80               	xorlw	128
  7746  001F3C  6FB9               	movwf	(??_dataLoger+4)& (0+255),b
  7747  001F3E  51B6               	movf	(??_dataLoger+1)& (0+255),w,b
  7748  001F40  0A80               	xorlw	128
  7749  001F42  59B9               	subwfb	(??_dataLoger+4)& (0+255),w,b
  7750  001F44  B0D8               	btfsc	status,0,c
  7751  001F46  D05A               	goto	l809
  7752                           
  7753                           ; BSR set to: 0
  7754                           ;tela_DATALOGER.h: 37: }
  7755                           ;tela_DATALOGER.h: 38: dtl_posicao += 8;
  7756                           
  7757                           ; BSR set to: 0
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;tela_DATALOGER.h: 36: return;
  7761  001F48  0E08               	movlw	8
  7762  001F4A  27FA               	addwf	_dtl_posicao& (0+255),f,b
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;tela_DATALOGER.h: 39: dtl_carregar_log = 1;
  7766  001F4C  0E01               	movlw	1
  7767  001F4E  6E55               	movwf	_dtl_carregar_log,c
  7768  001F50                     l806:
  7769  001F50  FFFF               	dw	65535	; assembler added errata NOP
  7770                           
  7771                           ;tela_DATALOGER.h: 40: }
  7772                           ;tela_DATALOGER.h: 42: if (dtl_carregar_log == 1) {
  7773                           
  7774                           ; BSR set to: 0
  7775  001F52  0455               	decf	_dtl_carregar_log,w,c
  7776  001F54  A4D8               	btfss	status,2,c
  7777  001F56  D052               	goto	l809
  7778                           
  7779                           ;tela_DATALOGER.h: 43: char logs = readEEPROM_ext(14);
  7780  001F58  0E0E               	movlw	14
  7781  001F5A  EC2D  F03A         	call	_readEEPROM_ext
  7782  001F5E  0100               	movlb	0	; () banked
  7783  001F60  6FC0               	movwf	dataLoger@logs& (0+255),b
  7784                           
  7785                           ;tela_DATALOGER.h: 44: totalLogs = (logs - 60) / 8;
  7786  001F62  0EC4               	movlw	196
  7787  001F64  25C0               	addwf	dataLoger@logs& (0+255),w,b
  7788  001F66  6F80               	movwf	___awdiv@dividend& (0+255),b
  7789  001F68  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  7790  001F6A  0EFF               	movlw	255
  7791  001F6C  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  7792  001F6E  0E00               	movlw	0
  7793  001F70  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7794  001F72  0E08               	movlw	8
  7795  001F74  6F82               	movwf	___awdiv@divisor& (0+255),b
  7796  001F76  EC36  F01F         	call	___awdiv	;wreg free
  7797  001F7A  0100               	movlb	0	; () banked
  7798  001F7C  5180               	movf	?___awdiv& (0+255),w,b
  7799  001F7E  6E54               	movwf	_totalLogs,c
  7800                           
  7801                           ;tela_DATALOGER.h: 46: dtl_posi_visualizar = (dtl_posicao - 60) / 8;
  7802  001F80  0EC4               	movlw	196
  7803  001F82  25FA               	addwf	_dtl_posicao& (0+255),w,b
  7804  001F84  6F80               	movwf	___awdiv@dividend& (0+255),b
  7805  001F86  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  7806  001F88  0EFF               	movlw	255
  7807  001F8A  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  7808  001F8C  0E00               	movlw	0
  7809  001F8E  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7810  001F90  0E08               	movlw	8
  7811  001F92  6F82               	movwf	___awdiv@divisor& (0+255),b
  7812  001F94  EC36  F01F         	call	___awdiv	;wreg free
  7813  001F98  0100               	movlb	0	; () banked
  7814  001F9A  5180               	movf	?___awdiv& (0+255),w,b
  7815  001F9C  6E53               	movwf	_dtl_posi_visualizar,c
  7816                           
  7817                           ;tela_DATALOGER.h: 48: dtl_dia = readEEPROM_ext(dtl_posicao);
  7818  001F9E  51FA               	movf	_dtl_posicao& (0+255),w,b
  7819  001FA0  EC2D  F03A         	call	_readEEPROM_ext
  7820  001FA4  6E5D               	movwf	_dtl_dia,c
  7821                           
  7822                           ;tela_DATALOGER.h: 49: dtl_mes = readEEPROM_ext((dtl_posicao + 1));
  7823  001FA6  0100               	movlb	0	; () banked
  7824  001FA8  29FA               	incf	_dtl_posicao& (0+255),w,b
  7825  001FAA  EC2D  F03A         	call	_readEEPROM_ext
  7826  001FAE  6E5C               	movwf	_dtl_mes,c
  7827                           
  7828                           ;tela_DATALOGER.h: 50: dtl_ano = readEEPROM_ext((dtl_posicao + 2));
  7829  001FB0  0100               	movlb	0	; () banked
  7830  001FB2  51FA               	movf	_dtl_posicao& (0+255),w,b
  7831  001FB4  0F02               	addlw	2
  7832  001FB6  EC2D  F03A         	call	_readEEPROM_ext
  7833  001FBA  6E5B               	movwf	_dtl_ano,c
  7834                           
  7835                           ;tela_DATALOGER.h: 51: dtl_hora = readEEPROM_ext((dtl_posicao + 3));
  7836  001FBC  0100               	movlb	0	; () banked
  7837  001FBE  51FA               	movf	_dtl_posicao& (0+255),w,b
  7838  001FC0  0F03               	addlw	3
  7839  001FC2  EC2D  F03A         	call	_readEEPROM_ext
  7840  001FC6  6E5A               	movwf	_dtl_hora,c
  7841                           
  7842                           ;tela_DATALOGER.h: 52: dtl_min = readEEPROM_ext((dtl_posicao + 4));
  7843  001FC8  0100               	movlb	0	; () banked
  7844  001FCA  51FA               	movf	_dtl_posicao& (0+255),w,b
  7845  001FCC  0F04               	addlw	4
  7846  001FCE  EC2D  F03A         	call	_readEEPROM_ext
  7847  001FD2  6E59               	movwf	_dtl_min,c
  7848                           
  7849                           ;tela_DATALOGER.h: 53: dtl_jockey = readEEPROM_ext((dtl_posicao + 5));
  7850  001FD4  0100               	movlb	0	; () banked
  7851  001FD6  51FA               	movf	_dtl_posicao& (0+255),w,b
  7852  001FD8  0F05               	addlw	5
  7853  001FDA  EC2D  F03A         	call	_readEEPROM_ext
  7854  001FDE  6E58               	movwf	_dtl_jockey,c
  7855                           
  7856                           ;tela_DATALOGER.h: 54: dtl_principal = readEEPROM_ext((dtl_posicao + 6));
  7857  001FE0  0100               	movlb	0	; () banked
  7858  001FE2  51FA               	movf	_dtl_posicao& (0+255),w,b
  7859  001FE4  0F06               	addlw	6
  7860  001FE6  EC2D  F03A         	call	_readEEPROM_ext
  7861  001FEA  6E57               	movwf	_dtl_principal,c
  7862                           
  7863                           ;tela_DATALOGER.h: 55: dtl_estacionaria = readEEPROM_ext((dtl_posicao + 7));
  7864  001FEC  0100               	movlb	0	; () banked
  7865  001FEE  51FA               	movf	_dtl_posicao& (0+255),w,b
  7866  001FF0  0F07               	addlw	7
  7867  001FF2  EC2D  F03A         	call	_readEEPROM_ext
  7868  001FF6  6E56               	movwf	_dtl_estacionaria,c
  7869                           
  7870                           ;tela_DATALOGER.h: 56: dtl_carregar_log = 0;
  7871  001FF8  0E00               	movlw	0
  7872  001FFA  6E55               	movwf	_dtl_carregar_log,c
  7873  001FFC                     l809:
  7874  001FFC  FFFF               	dw	65535	; assembler added errata NOP
  7875  001FFE  0012               	return		;funcret
  7876  002000  FFFF               	dw	65535	; errata NOP
  7877  002002                     __end_of_dataLoger:
  7878                           	opt stack 0
  7879                           tblptru	equ	0xFF8
  7880                           tblptrh	equ	0xFF7
  7881                           tblptrl	equ	0xFF6
  7882                           tablat	equ	0xFF5
  7883                           prodh	equ	0xFF4
  7884                           prodl	equ	0xFF3
  7885                           postinc0	equ	0xFEE
  7886                           wreg	equ	0xFE8
  7887                           postdec1	equ	0xFE5
  7888                           fsr1l	equ	0xFE1
  7889                           indf2	equ	0xFDF
  7890                           postinc2	equ	0xFDE
  7891                           fsr2h	equ	0xFDA
  7892                           fsr2l	equ	0xFD9
  7893                           status	equ	0xFD8
  7894                           
  7895 ;; *************** function _criarCaracteresCGRAM *****************
  7896 ;; Defined at:
  7897 ;;		line 152 in file "lcd.h"
  7898 ;; Parameters:    Size  Location     Type
  7899 ;;		None
  7900 ;; Auto vars:     Size  Location     Type
  7901 ;;  character      48    7[BANK0 ] const unsigned char [8][
  7902 ;;  i               1   59[BANK0 ] unsigned char 
  7903 ;;  j               1   58[BANK0 ] unsigned char 
  7904 ;;  k               1   57[BANK0 ] unsigned char 
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  1    wreg      void 
  7907 ;; Registers used:
  7908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7914 ;;      Params:         0       0       0       0       0       0       0
  7915 ;;      Locals:         0      53       0       0       0       0       0
  7916 ;;      Temps:          0       3       0       0       0       0       0
  7917 ;;      Totals:         0      56       0       0       0       0       0
  7918 ;;Total ram usage:       56 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    8
  7921 ;; This function calls:
  7922 ;;		_Lcd_Cmd
  7923 ;;		_Lcd_Write_Char
  7924 ;; This function is called by:
  7925 ;;		_main
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           	psect	text19
  7930  003ABE                     __ptext19:
  7931                           	opt stack 0
  7932  003ABE                     _criarCaracteresCGRAM:
  7933                           	opt stack 0
  7934  003ABE  FFFF               	dw	65535	; assembler added errata NOP
  7935                           
  7936                           ;lcd.h: 153: const char character[6][8] = {
  7937                           ;lcd.h: 154: 0x00, 0x1F, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04,
  7938                           ;lcd.h: 155: 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10,
  7939                           ;lcd.h: 156: 0x00, 0x00, 0x00, 0x04, 0x04, 0x14, 0x14, 0x14,
  7940                           ;lcd.h: 157: 0x00, 0x01, 0x01, 0x05, 0x05, 0x15, 0x15, 0x15,
  7941                           ;lcd.h: 158: 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04,
  7942                           ;lcd.h: 159: };
  7943                           
  7944                           ;incstack = 0
  7945  003AC0  0E75               	movlw	low criarCaracteresCGRAM@F2956
  7946  003AC2  6EF6               	movwf	tblptrl,c
  7947  003AC4                     	if	1	;There is more than 1 active tblptr byte
  7948  003AC4  0E7A               	movlw	high criarCaracteresCGRAM@F2956
  7949  003AC6  6EF7               	movwf	tblptrh,c
  7950  003AC8                     	endif
  7951  003AC8                     	if	0	;There are less than 3 active tblptr bytes
  7952  003AC8                     	endif
  7953  003AC8  EE20  F087         	lfsr	2,criarCaracteresCGRAM@character
  7954  003ACC  0E2F               	movlw	47
  7955  003ACE                     u7800:
  7956  003ACE  0009               	tblrd		*+
  7957  003AD0  FFFF               	dw	65535	; errata NOP
  7958  003AD2  CFF5 FFDE          	movff	tablat,postinc2
  7959  003AD6  06E8               	decf	wreg,f,c
  7960  003AD8  E2FA               	bc	u7800
  7961                           
  7962                           ;lcd.h: 160: Lcd_Cmd(0b0100);
  7963  003ADA  0E04               	movlw	4
  7964  003ADC  ECC9  F036         	call	_Lcd_Cmd
  7965                           
  7966                           ;lcd.h: 161: Lcd_Cmd(0b0000);
  7967  003AE0  0E00               	movlw	0
  7968  003AE2  ECC9  F036         	call	_Lcd_Cmd
  7969                           
  7970                           ;lcd.h: 162: _delay((unsigned long)((100)*(8000000/4000000.0)));
  7971  003AE6  0E32               	movlw	50
  7972  003AE8                     u9097:
  7973  003AE8  FFFF               	dw	65535	; errata NOP
  7974  003AEA  2EE8               	decfsz	wreg,f,c
  7975  003AEC  D7FD               	bra	u9097
  7976                           
  7977                           ;lcd.h: 163: char i = 0, j = 0, k = 0;
  7978  003AEE  0E00               	movlw	0
  7979  003AF0  0100               	movlb	0	; () banked
  7980  003AF2  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7981                           
  7982                           ; BSR set to: 0
  7983  003AF4  0E00               	movlw	0
  7984  003AF6  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  7985                           
  7986                           ; BSR set to: 0
  7987  003AF8  0E00               	movlw	0
  7988  003AFA  6FB9               	movwf	criarCaracteresCGRAM@k& (0+255),b
  7989                           
  7990                           ; BSR set to: 0
  7991                           ;lcd.h: 164: for (i = 0; i < 5; i++) {
  7992  003AFC  0E00               	movlw	0
  7993  003AFE  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  7994  003B00                     l7020:
  7995  003B00  FFFF               	dw	65535	; assembler added errata NOP
  7996                           
  7997                           ; BSR set to: 0
  7998  003B02  0E04               	movlw	4
  7999  003B04  65BB               	cpfsgt	criarCaracteresCGRAM@i& (0+255),b
  8000  003B06  D001               	goto	l668
  8001  003B08  D03A               	goto	u7860
  8002  003B0A                     l668:
  8003  003B0A  FFFF               	dw	65535	; assembler added errata NOP
  8004                           
  8005                           ; BSR set to: 0
  8006                           ;lcd.h: 165: if (k == 1) i = 0;
  8007                           
  8008                           ; BSR set to: 0
  8009  003B0C  05B9               	decf	criarCaracteresCGRAM@k& (0+255),w,b
  8010  003B0E  A4D8               	btfss	status,2,c
  8011  003B10  D002               	goto	l670
  8012                           
  8013                           ; BSR set to: 0
  8014  003B12  0E00               	movlw	0
  8015  003B14  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  8016  003B16                     l670:
  8017  003B16  FFFF               	dw	65535	; assembler added errata NOP
  8018                           
  8019                           ; BSR set to: 0
  8020                           ;lcd.h: 166: for (j = 0; j < 8; j++) {
  8021  003B18  0E00               	movlw	0
  8022  003B1A  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  8023  003B1C                     l7028:
  8024  003B1C  FFFF               	dw	65535	; assembler added errata NOP
  8025                           
  8026                           ; BSR set to: 0
  8027  003B1E  0E07               	movlw	7
  8028  003B20  65BA               	cpfsgt	criarCaracteresCGRAM@j& (0+255),b
  8029  003B22  D001               	goto	l671
  8030  003B24  D028               	goto	u7850
  8031  003B26                     l671:
  8032  003B26  FFFF               	dw	65535	; assembler added errata NOP
  8033                           
  8034                           ; BSR set to: 0
  8035                           ;lcd.h: 167: Lcd_Write_Char((k) ? character[i][j] : 0);
  8036                           
  8037                           ; BSR set to: 0
  8038  003B28  51B9               	movf	criarCaracteresCGRAM@k& (0+255),w,b
  8039  003B2A  A4D8               	btfss	status,2,c
  8040  003B2C  D005               	goto	l674
  8041                           
  8042                           ; BSR set to: 0
  8043  003B2E  0E00               	movlw	0
  8044  003B30  6FB8               	movwf	(_criarCaracteresCGRAM$1380+1)& (0+255),b
  8045  003B32  0E00               	movlw	0
  8046  003B34  6FB7               	movwf	_criarCaracteresCGRAM$1380& (0+255),b
  8047  003B36  D018               	goto	l676
  8048  003B38                     l674:
  8049  003B38  FFFF               	dw	65535	; assembler added errata NOP
  8050                           
  8051                           ; BSR set to: 0
  8052                           
  8053                           ; BSR set to: 0
  8054  003B3A  51BB               	movf	criarCaracteresCGRAM@i& (0+255),w,b
  8055  003B3C  0D08               	mullw	8
  8056  003B3E  0E87               	movlw	low criarCaracteresCGRAM@character
  8057  003B40  6F84               	movwf	??_criarCaracteresCGRAM& (0+255),b
  8058  003B42  0E00               	movlw	high criarCaracteresCGRAM@character
  8059  003B44  6F85               	movwf	(??_criarCaracteresCGRAM+1)& (0+255),b
  8060  003B46  50F3               	movf	prodl,w,c
  8061  003B48  2784               	addwf	??_criarCaracteresCGRAM& (0+255),f,b
  8062  003B4A  50F4               	movf	prodh,w,c
  8063  003B4C  2385               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),f,b
  8064  003B4E  51BA               	movf	criarCaracteresCGRAM@j& (0+255),w,b
  8065  003B50  0D01               	mullw	1
  8066  003B52  50F3               	movf	prodl,w,c
  8067  003B54  2584               	addwf	??_criarCaracteresCGRAM& (0+255),w,b
  8068  003B56  6ED9               	movwf	fsr2l,c
  8069  003B58  50F4               	movf	prodh,w,c
  8070  003B5A  2185               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),w,b
  8071  003B5C  6EDA               	movwf	fsr2h,c
  8072  003B5E  50DF               	movf	indf2,w,c
  8073  003B60  6F86               	movwf	(??_criarCaracteresCGRAM+2)& (0+255),b
  8074  003B62  5186               	movf	(??_criarCaracteresCGRAM+2)& (0+255),w,b
  8075  003B64  6FB7               	movwf	_criarCaracteresCGRAM$1380& (0+255),b
  8076  003B66  6BB8               	clrf	(_criarCaracteresCGRAM$1380+1)& (0+255),b
  8077  003B68                     l676:
  8078  003B68  FFFF               	dw	65535	; assembler added errata NOP
  8079                           
  8080                           ; BSR set to: 0
  8081                           
  8082                           ; BSR set to: 0
  8083  003B6A  51B7               	movf	_criarCaracteresCGRAM$1380& (0+255),w,b
  8084  003B6C  ECED  F038         	call	_Lcd_Write_Char
  8085  003B70  0100               	movlb	0	; () banked
  8086  003B72  2BBA               	incf	criarCaracteresCGRAM@j& (0+255),f,b
  8087  003B74  D7D3               	goto	l7028
  8088  003B76                     u7850:
  8089  003B76  FFFF               	dw	65535	; assembler added errata NOP
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;lcd.h: 168: }
  8093                           ;lcd.h: 169: k++;
  8094                           
  8095                           ; BSR set to: 0
  8096  003B78  2BB9               	incf	criarCaracteresCGRAM@k& (0+255),f,b
  8097  003B7A  2BBB               	incf	criarCaracteresCGRAM@i& (0+255),f,b
  8098  003B7C  D7C1               	goto	l7020
  8099  003B7E                     u7860:
  8100  003B7E  FFFF               	dw	65535	; assembler added errata NOP
  8101                           
  8102                           ; BSR set to: 0
  8103                           
  8104                           ; BSR set to: 0
  8105  003B80  0012               	return		;funcret
  8106  003B82  FFFF               	dw	65535	; errata NOP
  8107  003B84                     __end_of_criarCaracteresCGRAM:
  8108                           	opt stack 0
  8109                           tblptru	equ	0xFF8
  8110                           tblptrh	equ	0xFF7
  8111                           tblptrl	equ	0xFF6
  8112                           tablat	equ	0xFF5
  8113                           prodh	equ	0xFF4
  8114                           prodl	equ	0xFF3
  8115                           postinc0	equ	0xFEE
  8116                           wreg	equ	0xFE8
  8117                           postdec1	equ	0xFE5
  8118                           fsr1l	equ	0xFE1
  8119                           indf2	equ	0xFDF
  8120                           postinc2	equ	0xFDE
  8121                           fsr2h	equ	0xFDA
  8122                           fsr2l	equ	0xFD9
  8123                           status	equ	0xFD8
  8124                           
  8125 ;; *************** function _configurarEstacionaria *****************
  8126 ;; Defined at:
  8127 ;;		line 7 in file "tela_ESTACIONARIA.h"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;		None
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;		None
  8132 ;; Return value:  Size  Location     Type
  8133 ;;                  1    wreg      void 
  8134 ;; Registers used:
  8135 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8141 ;;      Params:         0       0       0       0       0       0       0
  8142 ;;      Locals:         0       0       0       0       0       0       0
  8143 ;;      Temps:          0       0       0       0       0       0       0
  8144 ;;      Totals:         0       0       0       0       0       0       0
  8145 ;;Total ram usage:        0 bytes
  8146 ;; Hardware stack levels used:    1
  8147 ;; Hardware stack levels required when called:    9
  8148 ;; This function calls:
  8149 ;;		_blink
  8150 ;;		_btPress
  8151 ;;		_sprintf
  8152 ;;		_writeEEPROM_ext
  8153 ;; This function is called by:
  8154 ;;		_main
  8155 ;; This function uses a non-reentrant model
  8156 ;;
  8157                           
  8158                           	psect	text20
  8159  002D38                     __ptext20:
  8160                           	opt stack 0
  8161  002D38                     _configurarEstacionaria:
  8162                           	opt stack 0
  8163  002D38  FFFF               	dw	65535	; assembler added errata NOP
  8164                           
  8165                           ;tela_ESTACIONARIA.h: 9: sprintf(line1, "Configuracao tempo");
  8166                           
  8167                           ; BSR set to: 0
  8168                           ;incstack = 0
  8169  002D3A  0E7B               	movlw	low _line1
  8170  002D3C  0100               	movlb	0	; () banked
  8171  002D3E  6FA1               	movwf	sprintf@wh& (0+255),b
  8172  002D40  0E01               	movlw	high _line1
  8173  002D42  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8174  002D44  0EFE               	movlw	low STR_100
  8175  002D46  6FA3               	movwf	sprintf@f& (0+255),b
  8176  002D48  0E7C               	movlw	high STR_100
  8177  002D4A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8178  002D4C  EC95  F039         	call	_sprintf	;wreg free
  8179                           
  8180                           ;tela_ESTACIONARIA.h: 10: sprintf(line2, "Max. PARTIDA:");
  8181  002D50  0E66               	movlw	low _line2
  8182  002D52  0100               	movlb	0	; () banked
  8183  002D54  6FA1               	movwf	sprintf@wh& (0+255),b
  8184  002D56  0E01               	movlw	high _line2
  8185  002D58  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8186  002D5A  0E69               	movlw	low STR_101
  8187  002D5C  6FA3               	movwf	sprintf@f& (0+255),b
  8188  002D5E  0E7E               	movlw	high STR_101
  8189  002D60  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8190  002D62  EC95  F039         	call	_sprintf	;wreg free
  8191                           
  8192                           ;tela_ESTACIONARIA.h: 11: sprintf(&line2[16], "%3ds", tempo_limite_estacionaria);
  8193  002D66  0E76               	movlw	low (_line2+16)
  8194  002D68  0100               	movlb	0	; () banked
  8195  002D6A  6FA1               	movwf	sprintf@wh& (0+255),b
  8196  002D6C  0E01               	movlw	high (_line2+16)
  8197  002D6E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8198  002D70  0EEC               	movlw	low STR_102
  8199  002D72  6FA3               	movwf	sprintf@f& (0+255),b
  8200  002D74  0E7F               	movlw	high STR_102
  8201  002D76  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8202  002D78  C0E6  F0A5         	movff	_tempo_limite_estacionaria,?_sprintf+4
  8203  002D7C  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  8204  002D7E  EC95  F039         	call	_sprintf	;wreg free
  8205                           
  8206                           ;tela_ESTACIONARIA.h: 12: sprintf(line3, "Max. TESTE:");
  8207  002D82  0E51               	movlw	low _line3
  8208  002D84  0100               	movlb	0	; () banked
  8209  002D86  6FA1               	movwf	sprintf@wh& (0+255),b
  8210  002D88  0E01               	movlw	high _line3
  8211  002D8A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8212  002D8C  0EC5               	movlw	low STR_103
  8213  002D8E  6FA3               	movwf	sprintf@f& (0+255),b
  8214  002D90  0E7E               	movlw	high STR_103
  8215  002D92  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8216  002D94  EC95  F039         	call	_sprintf	;wreg free
  8217                           
  8218                           ;tela_ESTACIONARIA.h: 13: sprintf(&line3[16], "%3ds", tempo_limite_teste_estacionaria);
  8219  002D98  0E61               	movlw	low (_line3+16)
  8220  002D9A  0100               	movlb	0	; () banked
  8221  002D9C  6FA1               	movwf	sprintf@wh& (0+255),b
  8222  002D9E  0E01               	movlw	high (_line3+16)
  8223  002DA0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8224  002DA2  0EEC               	movlw	low STR_102
  8225  002DA4  6FA3               	movwf	sprintf@f& (0+255),b
  8226  002DA6  0E7F               	movlw	high STR_102
  8227  002DA8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8228  002DAA  C06B  F0A5         	movff	_tempo_limite_teste_estacionaria,?_sprintf+4
  8229  002DAE  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  8230  002DB0  EC95  F039         	call	_sprintf	;wreg free
  8231                           
  8232                           ;tela_ESTACIONARIA.h: 14: sprintf(line4, "horimetro:%5d min", horimetro);
  8233  002DB4  0E3C               	movlw	low _line4
  8234  002DB6  0100               	movlb	0	; () banked
  8235  002DB8  6FA1               	movwf	sprintf@wh& (0+255),b
  8236  002DBA  0E01               	movlw	high _line4
  8237  002DBC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8238  002DBE  0E5A               	movlw	low STR_105
  8239  002DC0  6FA3               	movwf	sprintf@f& (0+255),b
  8240  002DC2  0E7D               	movlw	high STR_105
  8241  002DC4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8242  002DC6  C04F  F0A5         	movff	_horimetro,?_sprintf+4
  8243  002DCA  C050  F0A6         	movff	_horimetro+1,?_sprintf+5
  8244  002DCE  EC95  F039         	call	_sprintf	;wreg free
  8245                           
  8246                           ;tela_ESTACIONARIA.h: 16: if (btPress(4)) {
  8247  002DD2  0E04               	movlw	4
  8248  002DD4  ECE6  F03A         	call	_btPress
  8249  002DD8  0900               	iorlw	0
  8250  002DDA  B4D8               	btfsc	status,2,c
  8251  002DDC  D002               	goto	l859
  8252                           
  8253                           ;tela_ESTACIONARIA.h: 17: option_posi++;
  8254  002DDE  0100               	movlb	0	; () banked
  8255  002DE0  2BE1               	incf	_option_posi& (0+255),f,b
  8256  002DE2                     l859:
  8257  002DE2  FFFF               	dw	65535	; assembler added errata NOP
  8258                           
  8259                           ;tela_ESTACIONARIA.h: 18: }
  8260                           ;tela_ESTACIONARIA.h: 19: if (btPress(1)) {
  8261                           
  8262                           ; BSR set to: 0
  8263  002DE4  0E01               	movlw	1
  8264  002DE6  ECE6  F03A         	call	_btPress
  8265  002DEA  0900               	iorlw	0
  8266  002DEC  B4D8               	btfsc	status,2,c
  8267  002DEE  D04B               	goto	l861
  8268                           
  8269                           ;tela_ESTACIONARIA.h: 20: writeEEPROM_ext(7, tempo_limite_estacionaria);
  8270  002DF0  C0E6  F08C         	movff	_tempo_limite_estacionaria,writeEEPROM_ext@data
  8271  002DF4  0E07               	movlw	7
  8272  002DF6  EC72  F039         	call	_writeEEPROM_ext
  8273                           
  8274                           ;tela_ESTACIONARIA.h: 21: writeEEPROM_ext(13, tempo_limite_teste_estacionaria);
  8275  002DFA  C06B  F08C         	movff	_tempo_limite_teste_estacionaria,writeEEPROM_ext@data
  8276  002DFE  0E0D               	movlw	13
  8277  002E00  EC72  F039         	call	_writeEEPROM_ext
  8278                           
  8279                           ;tela_ESTACIONARIA.h: 22: option_posi = 0;
  8280  002E04  0E00               	movlw	0
  8281  002E06  0100               	movlb	0	; () banked
  8282  002E08  6FE1               	movwf	_option_posi& (0+255),b
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;tela_ESTACIONARIA.h: 23: menu_posi = _menu_posi;
  8286  002E0A  C0DF  F0E0         	movff	__menu_posi,_menu_posi
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;tela_ESTACIONARIA.h: 24: }
  8290                           ;tela_ESTACIONARIA.h: 25: switch (option_posi) {
  8291  002E0E  D03B               	goto	l861
  8292  002E10  FFFF               	dw	65535	; assembler added errata NOP
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;tela_ESTACIONARIA.h: 27: blink(line2, 16,20 );
  8296                           
  8297                           ; BSR set to: 0
  8298  002E12  0E66               	movlw	low _line2
  8299  002E14  6F80               	movwf	blink@line& (0+255),b
  8300  002E16  0E01               	movlw	high _line2
  8301  002E18  6F81               	movwf	(blink@line+1)& (0+255),b
  8302  002E1A  0E10               	movlw	16
  8303  002E1C  6F82               	movwf	blink@start& (0+255),b
  8304  002E1E  0E14               	movlw	20
  8305  002E20  6F83               	movwf	blink@end& (0+255),b
  8306  002E22  ECAE  F038         	call	_blink	;wreg free
  8307                           
  8308                           ;tela_ESTACIONARIA.h: 28: if (btPress(3)) {
  8309  002E26  0E03               	movlw	3
  8310  002E28  ECE6  F03A         	call	_btPress
  8311  002E2C  0900               	iorlw	0
  8312  002E2E  B4D8               	btfsc	status,2,c
  8313  002E30  D002               	goto	l863
  8314                           
  8315                           ;tela_ESTACIONARIA.h: 29: tempo_limite_estacionaria++;
  8316  002E32  0100               	movlb	0	; () banked
  8317  002E34  2BE6               	incf	_tempo_limite_estacionaria& (0+255),f,b
  8318  002E36                     l863:
  8319  002E36  FFFF               	dw	65535	; assembler added errata NOP
  8320                           
  8321                           ;tela_ESTACIONARIA.h: 30: }
  8322                           ;tela_ESTACIONARIA.h: 31: if (btPress(2)) {
  8323                           
  8324                           ; BSR set to: 0
  8325  002E38  0E02               	movlw	2
  8326  002E3A  ECE6  F03A         	call	_btPress
  8327  002E3E  0900               	iorlw	0
  8328  002E40  B4D8               	btfsc	status,2,c
  8329  002E42  D02B               	goto	l865
  8330                           
  8331                           ;tela_ESTACIONARIA.h: 32: tempo_limite_estacionaria--;
  8332  002E44  0100               	movlb	0	; () banked
  8333  002E46  07E6               	decf	_tempo_limite_estacionaria& (0+255),f,b
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;tela_ESTACIONARIA.h: 33: }
  8337                           ;tela_ESTACIONARIA.h: 34: break;
  8338  002E48  D028               	goto	l865
  8339  002E4A  FFFF               	dw	65535	; assembler added errata NOP
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;tela_ESTACIONARIA.h: 36: blink(line3, 16,20 );
  8343                           
  8344                           ; BSR set to: 0
  8345  002E4C  0E51               	movlw	low _line3
  8346  002E4E  6F80               	movwf	blink@line& (0+255),b
  8347  002E50  0E01               	movlw	high _line3
  8348  002E52  6F81               	movwf	(blink@line+1)& (0+255),b
  8349  002E54  0E10               	movlw	16
  8350  002E56  6F82               	movwf	blink@start& (0+255),b
  8351  002E58  0E14               	movlw	20
  8352  002E5A  6F83               	movwf	blink@end& (0+255),b
  8353  002E5C  ECAE  F038         	call	_blink	;wreg free
  8354                           
  8355                           ;tela_ESTACIONARIA.h: 37: if (btPress(3)) {
  8356  002E60  0E03               	movlw	3
  8357  002E62  ECE6  F03A         	call	_btPress
  8358  002E66  0900               	iorlw	0
  8359  002E68  A4D8               	btfss	status,2,c
  8360                           
  8361                           ;tela_ESTACIONARIA.h: 38: tempo_limite_teste_estacionaria++;
  8362  002E6A  2A6B               	incf	_tempo_limite_teste_estacionaria,f,c
  8363                           
  8364                           ;tela_ESTACIONARIA.h: 39: }
  8365                           ;tela_ESTACIONARIA.h: 40: if (btPress(2)) {
  8366  002E6C  0E02               	movlw	2
  8367  002E6E  ECE6  F03A         	call	_btPress
  8368  002E72  0900               	iorlw	0
  8369  002E74  B4D8               	btfsc	status,2,c
  8370  002E76  D011               	goto	l865
  8371                           
  8372                           ;tela_ESTACIONARIA.h: 41: tempo_limite_teste_estacionaria--;
  8373  002E78  066B               	decf	_tempo_limite_teste_estacionaria,f,c
  8374                           
  8375                           ;tela_ESTACIONARIA.h: 42: }
  8376                           ;tela_ESTACIONARIA.h: 43: break;
  8377  002E7A  D00F               	goto	l865
  8378  002E7C  FFFF               	dw	65535	; assembler added errata NOP
  8379  002E7E  0E00               	movlw	0
  8380  002E80  0100               	movlb	0	; () banked
  8381  002E82  6FE1               	movwf	_option_posi& (0+255),b
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;tela_ESTACIONARIA.h: 46: }
  8385                           
  8386                           ;tela_ESTACIONARIA.h: 45: break;
  8387  002E84  D00A               	goto	l865
  8388  002E86                     l861:
  8389  002E86  FFFF               	dw	65535	; assembler added errata NOP
  8390                           
  8391                           ; BSR set to: 0
  8392  002E88  0100               	movlb	0	; () banked
  8393  002E8A  51E1               	movf	_option_posi& (0+255),w,b
  8394                           
  8395                           ; Switch size 1, requested type "space"
  8396                           ; Number of cases is 2, Range of values is 0 to 1
  8397                           ; switch strategies available:
  8398                           ; Name         Instructions Cycles
  8399                           ; simple_byte            7     4 (average)
  8400                           ;	Chosen strategy is simple_byte
  8401  002E8C  0A00               	xorlw	0	; case 0
  8402  002E8E  B4D8               	btfsc	status,2,c
  8403  002E90  D7BF               	goto	l862
  8404  002E92  0A01               	xorlw	1	; case 1
  8405  002E94  B4D8               	btfsc	status,2,c
  8406  002E96  D7D9               	goto	l866
  8407  002E98  D7F1               	goto	l869
  8408  002E9A                     l865:
  8409  002E9A  FFFF               	dw	65535	; assembler added errata NOP
  8410                           
  8411                           ; BSR set to: 0
  8412  002E9C  0012               	return		;funcret
  8413  002E9E  FFFF               	dw	65535	; errata NOP
  8414  002EA0                     __end_of_configurarEstacionaria:
  8415                           	opt stack 0
  8416                           tblptru	equ	0xFF8
  8417                           tblptrh	equ	0xFF7
  8418                           tblptrl	equ	0xFF6
  8419                           tablat	equ	0xFF5
  8420                           prodh	equ	0xFF4
  8421                           prodl	equ	0xFF3
  8422                           postinc0	equ	0xFEE
  8423                           wreg	equ	0xFE8
  8424                           postdec1	equ	0xFE5
  8425                           fsr1l	equ	0xFE1
  8426                           indf2	equ	0xFDF
  8427                           postinc2	equ	0xFDE
  8428                           fsr2h	equ	0xFDA
  8429                           fsr2l	equ	0xFD9
  8430                           status	equ	0xFD8
  8431                           
  8432 ;; *************** function _configuraTelefones *****************
  8433 ;; Defined at:
  8434 ;;		line 9 in file "tela_TELEFONES.h"
  8435 ;; Parameters:    Size  Location     Type
  8436 ;;		None
  8437 ;; Auto vars:     Size  Location     Type
  8438 ;;  i               1   67[BANK0 ] unsigned char 
  8439 ;; Return value:  Size  Location     Type
  8440 ;;                  1    wreg      void 
  8441 ;; Registers used:
  8442 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8443 ;; Tracked objects:
  8444 ;;		On entry : 0/0
  8445 ;;		On exit  : 0/0
  8446 ;;		Unchanged: 0/0
  8447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8448 ;;      Params:         0       0       0       0       0       0       0
  8449 ;;      Locals:         0       3       0       0       0       0       0
  8450 ;;      Temps:          0       2       0       0       0       0       0
  8451 ;;      Totals:         0       5       0       0       0       0       0
  8452 ;;Total ram usage:        5 bytes
  8453 ;; Hardware stack levels used:    1
  8454 ;; Hardware stack levels required when called:   10
  8455 ;; This function calls:
  8456 ;;		_blink
  8457 ;;		_btPress
  8458 ;;		_comunicarTeste
  8459 ;;		_sprintf
  8460 ;;		_writeEEPROM_ext
  8461 ;; This function is called by:
  8462 ;;		_main
  8463 ;; This function uses a non-reentrant model
  8464 ;;
  8465                           
  8466                           	psect	text21
  8467  00125C                     __ptext21:
  8468                           	opt stack 0
  8469  00125C                     _configuraTelefones:
  8470                           	opt stack 0
  8471  00125C  FFFF               	dw	65535	; assembler added errata NOP
  8472                           
  8473                           ;tela_TELEFONES.h: 10: sprintf(&line1[1], "T1: %s", tel1);
  8474                           
  8475                           ;incstack = 0
  8476  00125E  0E7C               	movlw	low (_line1+1)
  8477  001260  0100               	movlb	0	; () banked
  8478  001262  6FA1               	movwf	sprintf@wh& (0+255),b
  8479  001264  0E01               	movlw	high (_line1+1)
  8480  001266  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8481  001268  0EB7               	movlw	low STR_95
  8482  00126A  6FA3               	movwf	sprintf@f& (0+255),b
  8483  00126C  0E7F               	movlw	high STR_95
  8484  00126E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8485  001270  0EB0               	movlw	low _tel1
  8486  001272  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8487  001274  0E01               	movlw	high _tel1
  8488  001276  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8489  001278  EC95  F039         	call	_sprintf	;wreg free
  8490                           
  8491                           ;tela_TELEFONES.h: 11: sprintf(&line2[1], "T2: %s", tel2);
  8492  00127C  0E67               	movlw	low (_line2+1)
  8493  00127E  0100               	movlb	0	; () banked
  8494  001280  6FA1               	movwf	sprintf@wh& (0+255),b
  8495  001282  0E01               	movlw	high (_line2+1)
  8496  001284  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8497  001286  0EBE               	movlw	low STR_96
  8498  001288  6FA3               	movwf	sprintf@f& (0+255),b
  8499  00128A  0E7F               	movlw	high STR_96
  8500  00128C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8501  00128E  0EA4               	movlw	low _tel2
  8502  001290  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8503  001292  0E01               	movlw	high _tel2
  8504  001294  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8505  001296  EC95  F039         	call	_sprintf	;wreg free
  8506                           
  8507                           ;tela_TELEFONES.h: 12: sprintf(&line3[1], "%s", gsmOcupado ? " aguarde... " : "Enviar sm
      +                          s teste");
  8508  00129A  0100               	movlb	0	; () banked
  8509  00129C  51F4               	movf	_gsmOcupado& (0+255),w,b
  8510  00129E  A4D8               	btfss	status,2,c
  8511  0012A0  D004               	goto	l817
  8512                           
  8513                           ; BSR set to: 0
  8514  0012A2  0EB1               	movlw	low STR_99
  8515  0012A4  6FC1               	movwf	_configuraTelefones$1469& (0+255),b
  8516  0012A6  0E7D               	movlw	high STR_99
  8517  0012A8  D004               	goto	L18
  8518  0012AA                     l817:
  8519  0012AA  FFFF               	dw	65535	; assembler added errata NOP
  8520                           
  8521                           ; BSR set to: 0
  8522                           
  8523                           ; BSR set to: 0
  8524  0012AC  0E93               	movlw	low STR_98
  8525  0012AE  6FC1               	movwf	_configuraTelefones$1469& (0+255),b
  8526  0012B0  0E7E               	movlw	high STR_98
  8527  0012B2                     L18:
  8528  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  8529  0012B4  6FC2               	movwf	(_configuraTelefones$1469+1)& (0+255),b
  8530                           
  8531                           ; BSR set to: 0
  8532                           
  8533                           ; BSR set to: 0
  8534  0012B6  0E52               	movlw	low (_line3+1)
  8535  0012B8  6FA1               	movwf	sprintf@wh& (0+255),b
  8536  0012BA  0E01               	movlw	high (_line3+1)
  8537  0012BC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8538  0012BE  0EFE               	movlw	low (STR_93+9)
  8539  0012C0  6FA3               	movwf	sprintf@f& (0+255),b
  8540  0012C2  0E7E               	movlw	high (STR_93+9)
  8541  0012C4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8542  0012C6  C0C1  F0A5         	movff	_configuraTelefones$1469,?_sprintf+4
  8543  0012CA  C0C2  F0A6         	movff	_configuraTelefones$1469+1,?_sprintf+5
  8544  0012CE  EC95  F039         	call	_sprintf	;wreg free
  8545                           
  8546                           ;tela_TELEFONES.h: 14: if (ajust_tel == 0) {
  8547  0012D2  0100               	movlb	0	; () banked
  8548  0012D4  51DD               	movf	_ajust_tel& (0+255),w,b
  8549  0012D6  A4D8               	btfss	status,2,c
  8550  0012D8  D050               	goto	l825
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;tela_TELEFONES.h: 15: if (btPress(3)) {
  8554  0012DA  0E03               	movlw	3
  8555  0012DC  ECE6  F03A         	call	_btPress
  8556  0012E0  0900               	iorlw	0
  8557  0012E2  B4D8               	btfsc	status,2,c
  8558  0012E4  D003               	goto	l821
  8559                           
  8560                           ;tela_TELEFONES.h: 16: option_posi--;
  8561  0012E6  0100               	movlb	0	; () banked
  8562  0012E8  07E1               	decf	_option_posi& (0+255),f,b
  8563                           
  8564                           ;tela_TELEFONES.h: 17: } else if (btPress(2)) {
  8565  0012EA  D047               	goto	l825
  8566  0012EC                     l821:
  8567  0012EC  FFFF               	dw	65535	; assembler added errata NOP
  8568                           
  8569                           ; BSR set to: 0
  8570  0012EE  0E02               	movlw	2
  8571  0012F0  ECE6  F03A         	call	_btPress
  8572  0012F4  0900               	iorlw	0
  8573  0012F6  B4D8               	btfsc	status,2,c
  8574  0012F8  D003               	goto	l823
  8575                           
  8576                           ;tela_TELEFONES.h: 18: option_posi++;
  8577  0012FA  0100               	movlb	0	; () banked
  8578  0012FC  2BE1               	incf	_option_posi& (0+255),f,b
  8579                           
  8580                           ;tela_TELEFONES.h: 19: } else if (btPress(1)) {
  8581  0012FE  D03D               	goto	l825
  8582  001300                     l823:
  8583  001300  FFFF               	dw	65535	; assembler added errata NOP
  8584                           
  8585                           ; BSR set to: 0
  8586  001302  0E01               	movlw	1
  8587  001304  ECE6  F03A         	call	_btPress
  8588  001308  0900               	iorlw	0
  8589  00130A  B4D8               	btfsc	status,2,c
  8590  00130C  D036               	goto	l825
  8591                           
  8592                           ;tela_TELEFONES.h: 20: gsmOcupado = 0;
  8593  00130E  0E00               	movlw	0
  8594  001310  0100               	movlb	0	; () banked
  8595  001312  6FF4               	movwf	_gsmOcupado& (0+255),b
  8596                           
  8597                           ;tela_TELEFONES.h: 21: option_posi = 0;
  8598  001314  0E00               	movlw	0
  8599  001316  6FE1               	movwf	_option_posi& (0+255),b
  8600                           
  8601                           ;tela_TELEFONES.h: 22: tel_posi = 0;
  8602  001318  0E00               	movlw	0
  8603  00131A  6FDE               	movwf	_tel_posi& (0+255),b
  8604                           
  8605                           ;tela_TELEFONES.h: 23: ajust_tel = 0;
  8606  00131C  0E00               	movlw	0
  8607  00131E  6FDD               	movwf	_ajust_tel& (0+255),b
  8608                           
  8609                           ;tela_TELEFONES.h: 24: char i = 0;
  8610  001320  0E00               	movlw	0
  8611  001322  6FC3               	movwf	configuraTelefones@i& (0+255),b
  8612                           
  8613                           ;tela_TELEFONES.h: 25: for (i = 0; i < 11; i++) {
  8614  001324  0E00               	movlw	0
  8615  001326  6FC3               	movwf	configuraTelefones@i& (0+255),b
  8616  001328                     l7360:
  8617  001328  FFFF               	dw	65535	; assembler added errata NOP
  8618                           
  8619                           ; BSR set to: 0
  8620  00132A  0E0A               	movlw	10
  8621  00132C  65C3               	cpfsgt	configuraTelefones@i& (0+255),b
  8622  00132E  D001               	goto	l826
  8623  001330  D021               	goto	u8390
  8624  001332                     l826:
  8625  001332  FFFF               	dw	65535	; assembler added errata NOP
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;tela_TELEFONES.h: 26: writeEEPROM_ext((20 + i), tel1[i]);
  8629                           
  8630                           ; BSR set to: 0
  8631  001334  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8632  001336  0D01               	mullw	1
  8633  001338  0EB0               	movlw	low _tel1
  8634  00133A  24F3               	addwf	prodl,w,c
  8635  00133C  6ED9               	movwf	fsr2l,c
  8636  00133E  0E01               	movlw	high _tel1
  8637  001340  20F4               	addwfc	prodh,w,c
  8638  001342  6EDA               	movwf	fsr2h,c
  8639  001344  50DF               	movf	indf2,w,c
  8640  001346  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8641  001348  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8642  00134A  0F14               	addlw	20
  8643  00134C  EC72  F039         	call	_writeEEPROM_ext
  8644                           
  8645                           ;tela_TELEFONES.h: 27: writeEEPROM_ext((40 + i), tel2[i]);
  8646  001350  0100               	movlb	0	; () banked
  8647  001352  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8648  001354  0D01               	mullw	1
  8649  001356  0EA4               	movlw	low _tel2
  8650  001358  24F3               	addwf	prodl,w,c
  8651  00135A  6ED9               	movwf	fsr2l,c
  8652  00135C  0E01               	movlw	high _tel2
  8653  00135E  20F4               	addwfc	prodh,w,c
  8654  001360  6EDA               	movwf	fsr2h,c
  8655  001362  50DF               	movf	indf2,w,c
  8656  001364  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8657  001366  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8658  001368  0F28               	addlw	40
  8659  00136A  EC72  F039         	call	_writeEEPROM_ext
  8660  00136E  0100               	movlb	0	; () banked
  8661  001370  2BC3               	incf	configuraTelefones@i& (0+255),f,b
  8662  001372  D7DA               	goto	l7360
  8663  001374                     u8390:
  8664  001374  FFFF               	dw	65535	; assembler added errata NOP
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;tela_TELEFONES.h: 28: }
  8668                           ;tela_TELEFONES.h: 29: menu_posi = _menu_posi;
  8669  001376  C0DF  F0E0         	movff	__menu_posi,_menu_posi
  8670  00137A                     l825:
  8671  00137A  FFFF               	dw	65535	; assembler added errata NOP
  8672                           
  8673                           ;tela_TELEFONES.h: 30: }
  8674                           ;tela_TELEFONES.h: 31: }
  8675                           ;tela_TELEFONES.h: 32: if (ajust_tel == 1) {
  8676                           
  8677                           ; BSR set to: 0
  8678                           
  8679                           ; BSR set to: 0
  8680                           
  8681                           ; BSR set to: 0
  8682                           
  8683                           ; BSR set to: 0
  8684  00137C  0100               	movlb	0	; () banked
  8685  00137E  05DD               	decf	_ajust_tel& (0+255),w,b
  8686  001380  A4D8               	btfss	status,2,c
  8687  001382  D11A               	goto	l832
  8688                           
  8689                           ; BSR set to: 0
  8690                           ;tela_TELEFONES.h: 33: if (btPress(4)) {
  8691  001384  0E04               	movlw	4
  8692  001386  ECE6  F03A         	call	_btPress
  8693  00138A  0900               	iorlw	0
  8694  00138C  B4D8               	btfsc	status,2,c
  8695  00138E  D003               	goto	l829
  8696                           
  8697                           ;tela_TELEFONES.h: 34: tel_posi++;
  8698  001390  0100               	movlb	0	; () banked
  8699  001392  2BDE               	incf	_tel_posi& (0+255),f,b
  8700                           
  8701                           ;tela_TELEFONES.h: 35: } else if (btPress(1)) {
  8702  001394  D111               	goto	l832
  8703  001396                     l829:
  8704  001396  FFFF               	dw	65535	; assembler added errata NOP
  8705                           
  8706                           ; BSR set to: 0
  8707  001398  0E01               	movlw	1
  8708  00139A  ECE6  F03A         	call	_btPress
  8709  00139E  0900               	iorlw	0
  8710  0013A0  B4D8               	btfsc	status,2,c
  8711  0013A2  D10A               	goto	l832
  8712                           
  8713                           ;tela_TELEFONES.h: 36: tel_posi = 0;
  8714  0013A4  0E00               	movlw	0
  8715  0013A6  0100               	movlb	0	; () banked
  8716  0013A8  6FDE               	movwf	_tel_posi& (0+255),b
  8717                           
  8718                           ;tela_TELEFONES.h: 37: ajust_tel = 0;
  8719  0013AA  0E00               	movlw	0
  8720  0013AC  6FDD               	movwf	_ajust_tel& (0+255),b
  8721                           
  8722                           ; BSR set to: 0
  8723                           ;tela_TELEFONES.h: 38: }
  8724                           ;tela_TELEFONES.h: 39: }
  8725                           ;tela_TELEFONES.h: 41: switch (option_posi) {
  8726                           
  8727                           ; BSR set to: 0
  8728                           
  8729                           ; BSR set to: 0
  8730  0013AE  D104               	goto	l832
  8731  0013B0  FFFF               	dw	65535	; assembler added errata NOP
  8732                           
  8733                           ; BSR set to: 0
  8734                           ;tela_TELEFONES.h: 43: line1[0] = '>';
  8735                           
  8736                           ; BSR set to: 0
  8737  0013B2  0E3E               	movlw	62
  8738  0013B4  0101               	movlb	1	; () banked
  8739  0013B6  6F7B               	movwf	_line1& (0+255),b
  8740                           
  8741                           ; BSR set to: 1
  8742                           ;tela_TELEFONES.h: 44: if (btPress(4)) {
  8743  0013B8  0E04               	movlw	4
  8744  0013BA  ECE6  F03A         	call	_btPress
  8745  0013BE  0900               	iorlw	0
  8746  0013C0  B4D8               	btfsc	status,2,c
  8747  0013C2  D003               	goto	l834
  8748                           
  8749                           ;tela_TELEFONES.h: 45: ajust_tel = 1;
  8750  0013C4  0E01               	movlw	1
  8751  0013C6  0100               	movlb	0	; () banked
  8752  0013C8  6FDD               	movwf	_ajust_tel& (0+255),b
  8753  0013CA                     l834:
  8754  0013CA  FFFF               	dw	65535	; assembler added errata NOP
  8755                           
  8756                           ;tela_TELEFONES.h: 46: }
  8757                           ;tela_TELEFONES.h: 47: if (ajust_tel) {
  8758  0013CC  0100               	movlb	0	; () banked
  8759  0013CE  51DD               	movf	_ajust_tel& (0+255),w,b
  8760  0013D0  B4D8               	btfsc	status,2,c
  8761  0013D2  D0FF               	goto	l842
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;tela_TELEFONES.h: 48: blink(line1, (tel_posi + 6), (tel_posi + 6));
  8765  0013D4  0E7B               	movlw	low _line1
  8766  0013D6  6F80               	movwf	blink@line& (0+255),b
  8767  0013D8  0E01               	movlw	high _line1
  8768  0013DA  6F81               	movwf	(blink@line+1)& (0+255),b
  8769  0013DC  51DE               	movf	_tel_posi& (0+255),w,b
  8770  0013DE  0F06               	addlw	6
  8771  0013E0  6F82               	movwf	blink@start& (0+255),b
  8772  0013E2  51DE               	movf	_tel_posi& (0+255),w,b
  8773  0013E4  0F06               	addlw	6
  8774  0013E6  6F83               	movwf	blink@end& (0+255),b
  8775  0013E8  ECAE  F038         	call	_blink	;wreg free
  8776                           
  8777                           ;tela_TELEFONES.h: 49: if ((tel_posi + 2) > sizeof (tel1)) {
  8778  0013EC  0100               	movlb	0	; () banked
  8779  0013EE  51DE               	movf	_tel_posi& (0+255),w,b
  8780  0013F0  6FBF               	movwf	??_configuraTelefones& (0+255),b
  8781  0013F2  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
  8782  0013F4  0E02               	movlw	2
  8783  0013F6  27BF               	addwf	??_configuraTelefones& (0+255),f,b
  8784  0013F8  0E00               	movlw	0
  8785  0013FA  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8786  0013FC  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8787  0013FE  E104               	bnz	u8450
  8788  001400  0E0D               	movlw	13
  8789  001402  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
  8790  001404  A0D8               	btfss	status,0,c
  8791  001406  D004               	goto	l836
  8792  001408                     u8450:
  8793                           
  8794                           ; BSR set to: 0
  8795                           ;tela_TELEFONES.h: 50: tel_posi = 0;
  8796  001408  0E00               	movlw	0
  8797  00140A  6FDE               	movwf	_tel_posi& (0+255),b
  8798                           
  8799                           ;tela_TELEFONES.h: 51: ajust_tel = 0;
  8800  00140C  0E00               	movlw	0
  8801  00140E  6FDD               	movwf	_ajust_tel& (0+255),b
  8802  001410                     l836:
  8803  001410  FFFF               	dw	65535	; assembler added errata NOP
  8804                           
  8805                           ; BSR set to: 0
  8806                           ;tela_TELEFONES.h: 52: }
  8807                           ;tela_TELEFONES.h: 53: if (btPress(3)) {
  8808                           
  8809                           ; BSR set to: 0
  8810  001412  0E03               	movlw	3
  8811  001414  ECE6  F03A         	call	_btPress
  8812  001418  0900               	iorlw	0
  8813  00141A  B4D8               	btfsc	status,2,c
  8814  00141C  D00A               	goto	l837
  8815                           
  8816                           ;tela_TELEFONES.h: 54: tel1[tel_posi]++;
  8817  00141E  0100               	movlb	0	; () banked
  8818  001420  51DE               	movf	_tel_posi& (0+255),w,b
  8819  001422  0D01               	mullw	1
  8820  001424  0EB0               	movlw	low _tel1
  8821  001426  24F3               	addwf	prodl,w,c
  8822  001428  6ED9               	movwf	fsr2l,c
  8823  00142A  0E01               	movlw	high _tel1
  8824  00142C  20F4               	addwfc	prodh,w,c
  8825  00142E  6EDA               	movwf	fsr2h,c
  8826  001430  2ADF               	incf	indf2,f,c
  8827  001432                     l837:
  8828  001432  FFFF               	dw	65535	; assembler added errata NOP
  8829                           
  8830                           ;tela_TELEFONES.h: 55: }
  8831                           ;tela_TELEFONES.h: 56: if (btPress(2)) {
  8832                           
  8833                           ; BSR set to: 0
  8834  001434  0E02               	movlw	2
  8835  001436  ECE6  F03A         	call	_btPress
  8836  00143A  0900               	iorlw	0
  8837  00143C  B4D8               	btfsc	status,2,c
  8838  00143E  D00A               	goto	l838
  8839                           
  8840                           ;tela_TELEFONES.h: 57: tel1[tel_posi]--;
  8841  001440  0100               	movlb	0	; () banked
  8842  001442  51DE               	movf	_tel_posi& (0+255),w,b
  8843  001444  0D01               	mullw	1
  8844  001446  0EB0               	movlw	low _tel1
  8845  001448  24F3               	addwf	prodl,w,c
  8846  00144A  6ED9               	movwf	fsr2l,c
  8847  00144C  0E01               	movlw	high _tel1
  8848  00144E  20F4               	addwfc	prodh,w,c
  8849  001450  6EDA               	movwf	fsr2h,c
  8850  001452  06DF               	decf	indf2,f,c
  8851  001454                     l838:
  8852  001454  FFFF               	dw	65535	; assembler added errata NOP
  8853                           
  8854                           ;tela_TELEFONES.h: 58: }
  8855                           ;tela_TELEFONES.h: 59: if ((tel1[tel_posi] > 57) | (tel1[tel_posi] < 48)) {
  8856  001456  0100               	movlb	0	; () banked
  8857  001458  51DE               	movf	_tel_posi& (0+255),w,b
  8858  00145A  0D01               	mullw	1
  8859  00145C  0EB0               	movlw	low _tel1
  8860  00145E  24F3               	addwf	prodl,w,c
  8861  001460  6ED9               	movwf	fsr2l,c
  8862  001462  0E01               	movlw	high _tel1
  8863  001464  20F4               	addwfc	prodh,w,c
  8864  001466  6EDA               	movwf	fsr2h,c
  8865  001468  0E3A               	movlw	58
  8866  00146A  60DF               	cpfslt	indf2,c
  8867  00146C  D00B               	goto	u8490
  8868                           
  8869                           ; BSR set to: 0
  8870  00146E  51DE               	movf	_tel_posi& (0+255),w,b
  8871  001470  0D01               	mullw	1
  8872  001472  0EB0               	movlw	low _tel1
  8873  001474  24F3               	addwf	prodl,w,c
  8874  001476  6ED9               	movwf	fsr2l,c
  8875  001478  0E01               	movlw	high _tel1
  8876  00147A  20F4               	addwfc	prodh,w,c
  8877  00147C  6EDA               	movwf	fsr2h,c
  8878  00147E  0E30               	movlw	48
  8879  001480  60DF               	cpfslt	indf2,c
  8880  001482  D0A7               	goto	l842
  8881  001484                     u8490:
  8882  001484  FFFF               	dw	65535	; assembler added errata NOP
  8883                           
  8884                           ; BSR set to: 0
  8885                           ;tela_TELEFONES.h: 60: tel1[tel_posi] = 48;
  8886                           
  8887                           ; BSR set to: 0
  8888  001486  51DE               	movf	_tel_posi& (0+255),w,b
  8889  001488  0D01               	mullw	1
  8890  00148A  0EB0               	movlw	low _tel1
  8891  00148C  24F3               	addwf	prodl,w,c
  8892  00148E  6ED9               	movwf	fsr2l,c
  8893  001490  0E01               	movlw	high _tel1
  8894  001492  D071               	goto	L19
  8895  001494  FFFF               	dw	65535	; assembler added errata NOP
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;tela_TELEFONES.h: 65: line2[0] = '>';
  8899                           
  8900                           ; BSR set to: 0
  8901  001496  0E3E               	movlw	62
  8902  001498  0101               	movlb	1	; () banked
  8903  00149A  6F66               	movwf	_line2& (0+255),b
  8904                           
  8905                           ; BSR set to: 1
  8906                           ;tela_TELEFONES.h: 66: if (btPress(4)) {
  8907  00149C  0E04               	movlw	4
  8908  00149E  ECE6  F03A         	call	_btPress
  8909  0014A2  0900               	iorlw	0
  8910  0014A4  B4D8               	btfsc	status,2,c
  8911  0014A6  D003               	goto	l844
  8912                           
  8913                           ;tela_TELEFONES.h: 67: ajust_tel = 1;
  8914  0014A8  0E01               	movlw	1
  8915  0014AA  0100               	movlb	0	; () banked
  8916  0014AC  6FDD               	movwf	_ajust_tel& (0+255),b
  8917  0014AE                     l844:
  8918  0014AE  FFFF               	dw	65535	; assembler added errata NOP
  8919                           
  8920                           ;tela_TELEFONES.h: 68: }
  8921                           ;tela_TELEFONES.h: 69: if (ajust_tel) {
  8922  0014B0  0100               	movlb	0	; () banked
  8923  0014B2  51DD               	movf	_ajust_tel& (0+255),w,b
  8924  0014B4  B4D8               	btfsc	status,2,c
  8925  0014B6  D08D               	goto	l842
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;tela_TELEFONES.h: 70: blink(line2, (tel_posi + 6), (tel_posi + 6));
  8929  0014B8  0E66               	movlw	low _line2
  8930  0014BA  6F80               	movwf	blink@line& (0+255),b
  8931  0014BC  0E01               	movlw	high _line2
  8932  0014BE  6F81               	movwf	(blink@line+1)& (0+255),b
  8933  0014C0  51DE               	movf	_tel_posi& (0+255),w,b
  8934  0014C2  0F06               	addlw	6
  8935  0014C4  6F82               	movwf	blink@start& (0+255),b
  8936  0014C6  51DE               	movf	_tel_posi& (0+255),w,b
  8937  0014C8  0F06               	addlw	6
  8938  0014CA  6F83               	movwf	blink@end& (0+255),b
  8939  0014CC  ECAE  F038         	call	_blink	;wreg free
  8940                           
  8941                           ;tela_TELEFONES.h: 71: if ((tel_posi + 2) > sizeof (tel2)) {
  8942  0014D0  0100               	movlb	0	; () banked
  8943  0014D2  51DE               	movf	_tel_posi& (0+255),w,b
  8944  0014D4  6FBF               	movwf	??_configuraTelefones& (0+255),b
  8945  0014D6  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
  8946  0014D8  0E02               	movlw	2
  8947  0014DA  27BF               	addwf	??_configuraTelefones& (0+255),f,b
  8948  0014DC  0E00               	movlw	0
  8949  0014DE  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8950  0014E0  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8951  0014E2  E104               	bnz	u8520
  8952  0014E4  0E0D               	movlw	13
  8953  0014E6  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
  8954  0014E8  A0D8               	btfss	status,0,c
  8955  0014EA  D004               	goto	l846
  8956  0014EC                     u8520:
  8957                           
  8958                           ; BSR set to: 0
  8959                           ;tela_TELEFONES.h: 72: tel_posi = 0;
  8960  0014EC  0E00               	movlw	0
  8961  0014EE  6FDE               	movwf	_tel_posi& (0+255),b
  8962                           
  8963                           ;tela_TELEFONES.h: 73: ajust_tel = 0;
  8964  0014F0  0E00               	movlw	0
  8965  0014F2  6FDD               	movwf	_ajust_tel& (0+255),b
  8966  0014F4                     l846:
  8967  0014F4  FFFF               	dw	65535	; assembler added errata NOP
  8968                           
  8969                           ; BSR set to: 0
  8970                           ;tela_TELEFONES.h: 74: }
  8971                           ;tela_TELEFONES.h: 75: if (btPress(3)) {
  8972                           
  8973                           ; BSR set to: 0
  8974  0014F6  0E03               	movlw	3
  8975  0014F8  ECE6  F03A         	call	_btPress
  8976  0014FC  0900               	iorlw	0
  8977  0014FE  B4D8               	btfsc	status,2,c
  8978  001500  D00A               	goto	l847
  8979                           
  8980                           ;tela_TELEFONES.h: 76: tel2[tel_posi]++;
  8981  001502  0100               	movlb	0	; () banked
  8982  001504  51DE               	movf	_tel_posi& (0+255),w,b
  8983  001506  0D01               	mullw	1
  8984  001508  0EA4               	movlw	low _tel2
  8985  00150A  24F3               	addwf	prodl,w,c
  8986  00150C  6ED9               	movwf	fsr2l,c
  8987  00150E  0E01               	movlw	high _tel2
  8988  001510  20F4               	addwfc	prodh,w,c
  8989  001512  6EDA               	movwf	fsr2h,c
  8990  001514  2ADF               	incf	indf2,f,c
  8991  001516                     l847:
  8992  001516  FFFF               	dw	65535	; assembler added errata NOP
  8993                           
  8994                           ;tela_TELEFONES.h: 77: }
  8995                           ;tela_TELEFONES.h: 78: if (btPress(2)) {
  8996                           
  8997                           ; BSR set to: 0
  8998  001518  0E02               	movlw	2
  8999  00151A  ECE6  F03A         	call	_btPress
  9000  00151E  0900               	iorlw	0
  9001  001520  B4D8               	btfsc	status,2,c
  9002  001522  D00A               	goto	l848
  9003                           
  9004                           ;tela_TELEFONES.h: 79: tel2[tel_posi]--;
  9005  001524  0100               	movlb	0	; () banked
  9006  001526  51DE               	movf	_tel_posi& (0+255),w,b
  9007  001528  0D01               	mullw	1
  9008  00152A  0EA4               	movlw	low _tel2
  9009  00152C  24F3               	addwf	prodl,w,c
  9010  00152E  6ED9               	movwf	fsr2l,c
  9011  001530  0E01               	movlw	high _tel2
  9012  001532  20F4               	addwfc	prodh,w,c
  9013  001534  6EDA               	movwf	fsr2h,c
  9014  001536  06DF               	decf	indf2,f,c
  9015  001538                     l848:
  9016  001538  FFFF               	dw	65535	; assembler added errata NOP
  9017                           
  9018                           ;tela_TELEFONES.h: 80: }
  9019                           ;tela_TELEFONES.h: 81: if ((tel2[tel_posi] > 57) | (tel2[tel_posi] < 48)) {
  9020  00153A  0100               	movlb	0	; () banked
  9021  00153C  51DE               	movf	_tel_posi& (0+255),w,b
  9022  00153E  0D01               	mullw	1
  9023  001540  0EA4               	movlw	low _tel2
  9024  001542  24F3               	addwf	prodl,w,c
  9025  001544  6ED9               	movwf	fsr2l,c
  9026  001546  0E01               	movlw	high _tel2
  9027  001548  20F4               	addwfc	prodh,w,c
  9028  00154A  6EDA               	movwf	fsr2h,c
  9029  00154C  0E3A               	movlw	58
  9030  00154E  60DF               	cpfslt	indf2,c
  9031  001550  D00B               	goto	u8560
  9032                           
  9033                           ; BSR set to: 0
  9034  001552  51DE               	movf	_tel_posi& (0+255),w,b
  9035  001554  0D01               	mullw	1
  9036  001556  0EA4               	movlw	low _tel2
  9037  001558  24F3               	addwf	prodl,w,c
  9038  00155A  6ED9               	movwf	fsr2l,c
  9039  00155C  0E01               	movlw	high _tel2
  9040  00155E  20F4               	addwfc	prodh,w,c
  9041  001560  6EDA               	movwf	fsr2h,c
  9042  001562  0E30               	movlw	48
  9043  001564  60DF               	cpfslt	indf2,c
  9044  001566  D035               	goto	l842
  9045  001568                     u8560:
  9046  001568  FFFF               	dw	65535	; assembler added errata NOP
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;tela_TELEFONES.h: 82: tel2[tel_posi] = 48;
  9050                           
  9051                           ; BSR set to: 0
  9052  00156A  51DE               	movf	_tel_posi& (0+255),w,b
  9053  00156C  0D01               	mullw	1
  9054  00156E  0EA4               	movlw	low _tel2
  9055  001570  24F3               	addwf	prodl,w,c
  9056  001572  6ED9               	movwf	fsr2l,c
  9057  001574  0E01               	movlw	high _tel2
  9058  001576                     L19:
  9059  001576  FFFF               	dw	65535	; assembler added errata NOP
  9060  001578  20F4               	addwfc	prodh,w,c
  9061  00157A  6EDA               	movwf	fsr2h,c
  9062  00157C  0E30               	movlw	48
  9063  00157E  6EDF               	movwf	indf2,c
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;tela_TELEFONES.h: 83: }
  9067                           ;tela_TELEFONES.h: 84: }
  9068                           ;tela_TELEFONES.h: 85: break;
  9069                           
  9070                           ; BSR set to: 0
  9071  001580  D028               	goto	l842
  9072  001582  FFFF               	dw	65535	; assembler added errata NOP
  9073                           
  9074                           ; BSR set to: 0
  9075                           ;tela_TELEFONES.h: 87: line3[0] = '>';
  9076                           
  9077                           ; BSR set to: 0
  9078  001584  0E3E               	movlw	62
  9079  001586  0101               	movlb	1	; () banked
  9080  001588  6F51               	movwf	_line3& (0+255),b
  9081                           
  9082                           ; BSR set to: 1
  9083                           ;tela_TELEFONES.h: 88: if (btPress(4) && intensidadeSinal != 'x' && !gsmOcupado) {
  9084  00158A  0E04               	movlw	4
  9085  00158C  ECE6  F03A         	call	_btPress
  9086  001590  0900               	iorlw	0
  9087  001592  B4D8               	btfsc	status,2,c
  9088  001594  D01E               	goto	l842
  9089  001596  0E78               	movlw	120
  9090  001598  0100               	movlb	0	; () banked
  9091  00159A  19FF               	xorwf	_intensidadeSinal& (0+255),w,b
  9092  00159C  B4D8               	btfsc	status,2,c
  9093  00159E  D019               	goto	l842
  9094                           
  9095                           ; BSR set to: 0
  9096  0015A0  51F4               	movf	_gsmOcupado& (0+255),w,b
  9097  0015A2  A4D8               	btfss	status,2,c
  9098  0015A4  D016               	goto	l842
  9099                           
  9100                           ; BSR set to: 0
  9101                           ;tela_TELEFONES.h: 89: gsmOcupado = 1;
  9102  0015A6  0E01               	movlw	1
  9103  0015A8  6FF4               	movwf	_gsmOcupado& (0+255),b
  9104                           
  9105                           ;tela_TELEFONES.h: 90: telefoneSelecionado = 0;
  9106  0015AA  0E00               	movlw	0
  9107  0015AC  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9108                           
  9109                           ; BSR set to: 0
  9110                           ;tela_TELEFONES.h: 91: }
  9111                           ;tela_TELEFONES.h: 92: break;
  9112  0015AE  D011               	goto	l842
  9113  0015B0  FFFF               	dw	65535	; assembler added errata NOP
  9114                           
  9115                           ; BSR set to: 0
  9116                           
  9117                           ; BSR set to: 0
  9118  0015B2  0E00               	movlw	0
  9119  0015B4  6FE1               	movwf	_option_posi& (0+255),b
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;tela_TELEFONES.h: 96: }
  9123                           
  9124                           ;tela_TELEFONES.h: 95: break;
  9125  0015B6  D00D               	goto	l842
  9126  0015B8                     l832:
  9127  0015B8  FFFF               	dw	65535	; assembler added errata NOP
  9128                           
  9129                           ; BSR set to: 0
  9130  0015BA  0100               	movlb	0	; () banked
  9131  0015BC  51E1               	movf	_option_posi& (0+255),w,b
  9132                           
  9133                           ; Switch size 1, requested type "space"
  9134                           ; Number of cases is 3, Range of values is 0 to 2
  9135                           ; switch strategies available:
  9136                           ; Name         Instructions Cycles
  9137                           ; simple_byte           10     6 (average)
  9138                           ;	Chosen strategy is simple_byte
  9139  0015BE  0A00               	xorlw	0	; case 0
  9140  0015C0  B4D8               	btfsc	status,2,c
  9141  0015C2  D6F6               	goto	l833
  9142  0015C4  0A01               	xorlw	1	; case 1
  9143  0015C6  B4D8               	btfsc	status,2,c
  9144  0015C8  D765               	goto	l843
  9145  0015CA  0A03               	xorlw	3	; case 2
  9146  0015CC  B4D8               	btfsc	status,2,c
  9147  0015CE  D7D9               	goto	l852
  9148  0015D0  D7EF               	goto	l854
  9149  0015D2                     l842:
  9150  0015D2  FFFF               	dw	65535	; assembler added errata NOP
  9151                           
  9152                           ;tela_TELEFONES.h: 97: if (gsmOcupado) {
  9153                           
  9154                           ; BSR set to: 0
  9155  0015D4  0100               	movlb	0	; () banked
  9156  0015D6  51F4               	movf	_gsmOcupado& (0+255),w,b
  9157  0015D8  A4D8               	btfss	status,2,c
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;tela_TELEFONES.h: 98: comunicarTeste();
  9161  0015DA  EC36  F012         	call	_comunicarTeste	;wreg free
  9162  0015DE  0012               	return		;funcret
  9163  0015E0  FFFF               	dw	65535	; errata NOP
  9164  0015E2                     __end_of_configuraTelefones:
  9165                           	opt stack 0
  9166                           tblptru	equ	0xFF8
  9167                           tblptrh	equ	0xFF7
  9168                           tblptrl	equ	0xFF6
  9169                           tablat	equ	0xFF5
  9170                           prodh	equ	0xFF4
  9171                           prodl	equ	0xFF3
  9172                           postinc0	equ	0xFEE
  9173                           wreg	equ	0xFE8
  9174                           postdec1	equ	0xFE5
  9175                           fsr1l	equ	0xFE1
  9176                           indf2	equ	0xFDF
  9177                           postinc2	equ	0xFDE
  9178                           fsr2h	equ	0xFDA
  9179                           fsr2l	equ	0xFD9
  9180                           status	equ	0xFD8
  9181                           
  9182 ;; *************** function _comunicarTeste *****************
  9183 ;; Defined at:
  9184 ;;		line 70 in file "comunicacao.h"
  9185 ;; Parameters:    Size  Location     Type
  9186 ;;		None
  9187 ;; Auto vars:     Size  Location     Type
  9188 ;;		None
  9189 ;; Return value:  Size  Location     Type
  9190 ;;                  1    wreg      void 
  9191 ;; Registers used:
  9192 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9193 ;; Tracked objects:
  9194 ;;		On entry : 0/0
  9195 ;;		On exit  : 0/0
  9196 ;;		Unchanged: 0/0
  9197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9198 ;;      Params:         0       0       0       0       0       0       0
  9199 ;;      Locals:         0       2       0       0       0       0       0
  9200 ;;      Temps:          0       2       0       0       0       0       0
  9201 ;;      Totals:         0       4       0       0       0       0       0
  9202 ;;Total ram usage:        4 bytes
  9203 ;; Hardware stack levels used:    1
  9204 ;; Hardware stack levels required when called:    9
  9205 ;; This function calls:
  9206 ;;		_aguardaBuffer
  9207 ;;		_delay
  9208 ;;		_limparBuffer
  9209 ;;		_printf
  9210 ;;		_writeChar
  9211 ;; This function is called by:
  9212 ;;		_configuraTelefones
  9213 ;; This function uses a non-reentrant model
  9214 ;;
  9215                           
  9216                           	psect	text22
  9217  00246C                     __ptext22:
  9218                           	opt stack 0
  9219  00246C                     _comunicarTeste:
  9220                           	opt stack 0
  9221  00246C  FFFF               	dw	65535	; assembler added errata NOP
  9222                           
  9223                           ;comunicacao.h: 71: switch (etapaComunicacao) {
  9224                           
  9225                           ;incstack = 0
  9226  00246E  D0D1               	goto	l323
  9227  002470  FFFF               	dw	65535	; assembler added errata NOP
  9228                           
  9229                           ;comunicacao.h: 73: limparBuffer();
  9230  002472  EC8F  F037         	call	_limparBuffer	;wreg free
  9231                           
  9232                           ;comunicacao.h: 74: printf("AT\r\n");
  9233  002476  0EDD               	movlw	low STR_4
  9234  002478  0100               	movlb	0	; () banked
  9235  00247A  6FA1               	movwf	printf@f& (0+255),b
  9236  00247C  0E7F               	movlw	high STR_4
  9237  00247E  6FA2               	movwf	(printf@f+1)& (0+255),b
  9238  002480  EC90  F038         	call	_printf	;wreg free
  9239                           
  9240                           ;comunicacao.h: 75: etapaComunicacao++;
  9241  002484  4A51               	infsnz	_etapaComunicacao,f,c
  9242  002486  2A52               	incf	_etapaComunicacao+1,f,c
  9243                           
  9244                           ;comunicacao.h: 76: timerEtapaComunicacao = 5;
  9245  002488  0E05               	movlw	5
  9246  00248A  0100               	movlb	0	; () banked
  9247  00248C  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9248                           
  9249                           ;comunicacao.h: 77: break;
  9250  00248E  D0DC               	goto	l325
  9251  002490  FFFF               	dw	65535	; assembler added errata NOP
  9252                           
  9253                           ; BSR set to: 0
  9254                           ;comunicacao.h: 79: if (aguardaBuffer("OK")) {
  9255                           
  9256                           ; BSR set to: 0
  9257  002492  0EF9               	movlw	low STR_5
  9258  002494  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9259  002496  0E7F               	movlw	high STR_5
  9260  002498  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9261  00249A  EC72  F038         	call	_aguardaBuffer	;wreg free
  9262  00249E  0900               	iorlw	0
  9263  0024A0  B4D8               	btfsc	status,2,c
  9264  0024A2  D00E               	goto	l327
  9265                           
  9266                           ;comunicacao.h: 80: limparBuffer();
  9267  0024A4  EC8F  F037         	call	_limparBuffer	;wreg free
  9268                           
  9269                           ;comunicacao.h: 81: printf("AT+CMGF=1\r\n");
  9270  0024A8  0EAD               	movlw	low STR_10
  9271  0024AA  0100               	movlb	0	; () banked
  9272  0024AC  6FA1               	movwf	printf@f& (0+255),b
  9273  0024AE  0E7E               	movlw	high STR_10
  9274  0024B0  6FA2               	movwf	(printf@f+1)& (0+255),b
  9275  0024B2  EC90  F038         	call	_printf	;wreg free
  9276                           
  9277                           ;comunicacao.h: 82: etapaComunicacao++;
  9278  0024B6  4A51               	infsnz	_etapaComunicacao,f,c
  9279  0024B8  2A52               	incf	_etapaComunicacao+1,f,c
  9280                           
  9281                           ;comunicacao.h: 83: timerEtapaComunicacao = 5;
  9282  0024BA  0E05               	movlw	5
  9283  0024BC  0100               	movlb	0	; () banked
  9284  0024BE  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9285  0024C0                     l327:
  9286  0024C0  FFFF               	dw	65535	; assembler added errata NOP
  9287                           
  9288                           ;comunicacao.h: 84: }
  9289                           ;comunicacao.h: 85: if (!timerEtapaComunicacao) {
  9290                           
  9291                           ; BSR set to: 0
  9292  0024C2  0100               	movlb	0	; () banked
  9293  0024C4  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  9294  0024C6  A4D8               	btfss	status,2,c
  9295  0024C8  D0BF               	goto	l325
  9296                           
  9297                           ; BSR set to: 0
  9298                           ;comunicacao.h: 86: etapaComunicacao = 0;
  9299  0024CA  0E00               	movlw	0
  9300  0024CC  6E52               	movwf	_etapaComunicacao+1,c
  9301  0024CE  0E00               	movlw	0
  9302  0024D0  6E51               	movwf	_etapaComunicacao,c
  9303                           
  9304                           ; BSR set to: 0
  9305                           ;comunicacao.h: 87: writeChar(0x1A);
  9306  0024D2  0E1A               	movlw	26
  9307  0024D4  6F80               	movwf	writeChar@hex& (0+255),b
  9308  0024D6  0E00               	movlw	0
  9309  0024D8  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  9310  0024DA  EC31  F036         	call	_writeChar	;wreg free
  9311                           
  9312                           ;comunicacao.h: 88: }
  9313                           ;comunicacao.h: 89: break;
  9314  0024DE  D0B4               	goto	l325
  9315  0024E0  FFFF               	dw	65535	; assembler added errata NOP
  9316                           
  9317                           ;comunicacao.h: 91: if (aguardaBuffer("OK")) {
  9318  0024E2  0EF9               	movlw	low STR_5
  9319  0024E4  0100               	movlb	0	; () banked
  9320  0024E6  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9321  0024E8  0E7F               	movlw	high STR_5
  9322  0024EA  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9323  0024EC  EC72  F038         	call	_aguardaBuffer	;wreg free
  9324  0024F0  0900               	iorlw	0
  9325  0024F2  B4D8               	btfsc	status,2,c
  9326  0024F4  D083               	goto	L50
  9327                           
  9328                           ;comunicacao.h: 92: limparBuffer();
  9329  0024F6  EC8F  F037         	call	_limparBuffer	;wreg free
  9330                           
  9331                           ;comunicacao.h: 93: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : te
      +                          l2);
  9332  0024FA  0100               	movlb	0	; () banked
  9333  0024FC  51F7               	movf	_telefoneSelecionado& (0+255),w,b
  9334  0024FE  B4D8               	btfsc	status,2,c
  9335  002500  D004               	goto	l332
  9336                           
  9337                           ; BSR set to: 0
  9338  002502  0EA4               	movlw	low _tel2
  9339  002504  6FBD               	movwf	_comunicarTeste$1193& (0+255),b
  9340  002506  0E01               	movlw	high _tel2
  9341  002508  D004               	goto	L20
  9342  00250A                     l332:
  9343  00250A  FFFF               	dw	65535	; assembler added errata NOP
  9344                           
  9345                           ; BSR set to: 0
  9346                           
  9347                           ; BSR set to: 0
  9348  00250C  0EB0               	movlw	low _tel1
  9349  00250E  6FBD               	movwf	_comunicarTeste$1193& (0+255),b
  9350  002510  0E01               	movlw	high _tel1
  9351  002512                     L20:
  9352  002512  FFFF               	dw	65535	; assembler added errata NOP
  9353  002514  6FBE               	movwf	(_comunicarTeste$1193+1)& (0+255),b
  9354                           
  9355                           ; BSR set to: 0
  9356                           
  9357                           ; BSR set to: 0
  9358  002516  0E24               	movlw	low STR_12
  9359  002518  6FA1               	movwf	printf@f& (0+255),b
  9360  00251A  0E7D               	movlw	high STR_12
  9361  00251C  6FA2               	movwf	(printf@f+1)& (0+255),b
  9362  00251E  C0BD  F0A3         	movff	_comunicarTeste$1193,?_printf+2
  9363  002522  C0BE  F0A4         	movff	_comunicarTeste$1193+1,?_printf+3
  9364  002526  EC90  F038         	call	_printf	;wreg free
  9365                           
  9366                           ;comunicacao.h: 94: timerEtapaComunicacao = 5;
  9367  00252A  0E05               	movlw	5
  9368  00252C  0100               	movlb	0	; () banked
  9369  00252E  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9370                           
  9371                           ; BSR set to: 0
  9372                           ;comunicacao.h: 95: etapaComunicacao++;
  9373  002530  4A51               	infsnz	_etapaComunicacao,f,c
  9374  002532  2A52               	incf	_etapaComunicacao+1,f,c
  9375                           
  9376                           ;comunicacao.h: 96: break;
  9377  002534  D089               	goto	l325
  9378  002536  FFFF               	dw	65535	; assembler added errata NOP
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;comunicacao.h: 103: if (aguardaBuffer(">")) {
  9382                           
  9383                           ; BSR set to: 0
  9384  002538  0EFC               	movlw	low STR_13
  9385  00253A  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9386  00253C  0E7F               	movlw	high STR_13
  9387  00253E  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9388  002540  EC72  F038         	call	_aguardaBuffer	;wreg free
  9389  002544  0900               	iorlw	0
  9390  002546  B4D8               	btfsc	status,2,c
  9391  002548  D059               	goto	L50
  9392                           
  9393                           ;comunicacao.h: 104: limparBuffer();
  9394  00254A  EC8F  F037         	call	_limparBuffer	;wreg free
  9395                           
  9396                           ;comunicacao.h: 105: printf("TECHNOW Sistemas embarcados\r\n\r\nTeste manual de comunica
      +                          cao.\r\nData: %02d/%02d/%02d %02d:%02d:%02d\r\n\r\n\r\nVersao do sistema: %s\r\n",
  9397                           ;comunicacao.h: 106: _dia, _mes, _ano, _hor, _min, _sec, "Nov 25 2019");
  9398  00254E  0EAF               	movlw	low STR_14
  9399  002550  0100               	movlb	0	; () banked
  9400  002552  6FA1               	movwf	printf@f& (0+255),b
  9401  002554  0E7A               	movlw	high STR_14
  9402  002556  6FA2               	movwf	(printf@f+1)& (0+255),b
  9403  002558  C0EC  F0A3         	movff	__dia,?_printf+2
  9404  00255C  6BA4               	clrf	(?_printf+3)& (0+255),b
  9405  00255E  C0EB  F0A5         	movff	__mes,?_printf+4
  9406  002562  6BA6               	clrf	(?_printf+5)& (0+255),b
  9407  002564  C0EA  F0A7         	movff	__ano,?_printf+6
  9408  002568  6BA8               	clrf	(?_printf+7)& (0+255),b
  9409  00256A  C0ED  F0A9         	movff	__hor,?_printf+8
  9410  00256E  6BAA               	clrf	(?_printf+9)& (0+255),b
  9411  002570  C0EE  F0AB         	movff	__min,?_printf+10
  9412  002574  6BAC               	clrf	(?_printf+11)& (0+255),b
  9413  002576  C0EF  F0AD         	movff	__sec,?_printf+12
  9414  00257A  6BAE               	clrf	(?_printf+13)& (0+255),b
  9415  00257C  0EB9               	movlw	low STR_15
  9416  00257E  6FAF               	movwf	(?_printf+14)& (0+255),b
  9417  002580  0E7E               	movlw	high STR_15
  9418  002582  6FB0               	movwf	(?_printf+15)& (0+255),b
  9419  002584  EC90  F038         	call	_printf	;wreg free
  9420                           
  9421                           ;comunicacao.h: 107: delay(1000);
  9422  002588  0E03               	movlw	3
  9423  00258A  0100               	movlb	0	; () banked
  9424  00258C  6F81               	movwf	(delay@x+1)& (0+255),b
  9425  00258E  0EE8               	movlw	232
  9426  002590  6F80               	movwf	delay@x& (0+255),b
  9427  002592  EC74  F037         	call	_delay	;wreg free
  9428                           
  9429                           ;comunicacao.h: 108: writeChar(0x1A);
  9430  002596  0E1A               	movlw	26
  9431  002598  0100               	movlb	0	; () banked
  9432  00259A  6F80               	movwf	writeChar@hex& (0+255),b
  9433  00259C  0E00               	movlw	0
  9434  00259E  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  9435  0025A0  EC31  F036         	call	_writeChar	;wreg free
  9436                           
  9437                           ;comunicacao.h: 109: etapaComunicacao++;
  9438  0025A4  4A51               	infsnz	_etapaComunicacao,f,c
  9439  0025A6  2A52               	incf	_etapaComunicacao+1,f,c
  9440                           
  9441                           ;comunicacao.h: 110: timerEtapaComunicacao = 30;
  9442  0025A8  0E1E               	movlw	30
  9443  0025AA  0100               	movlb	0	; () banked
  9444  0025AC  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
  9445                           
  9446                           ; BSR set to: 0
  9447  0025AE  D026               	goto	L50
  9448  0025B0  FFFF               	dw	65535	; assembler added errata NOP
  9449                           
  9450                           ; BSR set to: 0
  9451                           ;comunicacao.h: 117: if (aguardaBuffer("OK")) {
  9452                           
  9453                           ; BSR set to: 0
  9454  0025B2  0EF9               	movlw	low STR_5
  9455  0025B4  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9456  0025B6  0E7F               	movlw	high STR_5
  9457  0025B8  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9458  0025BA  EC72  F038         	call	_aguardaBuffer	;wreg free
  9459  0025BE  0900               	iorlw	0
  9460  0025C0  B4D8               	btfsc	status,2,c
  9461  0025C2  D011               	goto	l340
  9462                           
  9463                           ;comunicacao.h: 118: if (telefoneSelecionado == 0) {
  9464  0025C4  0100               	movlb	0	; () banked
  9465  0025C6  51F7               	movf	_telefoneSelecionado& (0+255),w,b
  9466  0025C8  A4D8               	btfss	status,2,c
  9467  0025CA  D003               	goto	l341
  9468                           
  9469                           ; BSR set to: 0
  9470                           ;comunicacao.h: 119: telefoneSelecionado = 1;
  9471  0025CC  0E01               	movlw	1
  9472  0025CE  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9473                           
  9474                           ;comunicacao.h: 120: } else {
  9475  0025D0  D005               	goto	l342
  9476  0025D2                     l341:
  9477  0025D2  FFFF               	dw	65535	; assembler added errata NOP
  9478                           
  9479                           ; BSR set to: 0
  9480                           ;comunicacao.h: 121: telefoneSelecionado = 0;
  9481                           
  9482                           ; BSR set to: 0
  9483  0025D4  0E00               	movlw	0
  9484  0025D6  6FF7               	movwf	_telefoneSelecionado& (0+255),b
  9485                           
  9486                           ;comunicacao.h: 122: gsmOcupado = 0;
  9487  0025D8  0E00               	movlw	0
  9488  0025DA  6FF4               	movwf	_gsmOcupado& (0+255),b
  9489  0025DC                     l342:
  9490  0025DC  FFFF               	dw	65535	; assembler added errata NOP
  9491                           
  9492                           ; BSR set to: 0
  9493                           ;comunicacao.h: 123: }
  9494                           ;comunicacao.h: 124: etapaComunicacao = 0;
  9495  0025DE  0E00               	movlw	0
  9496  0025E0  6E52               	movwf	_etapaComunicacao+1,c
  9497  0025E2  0E00               	movlw	0
  9498  0025E4  6E51               	movwf	_etapaComunicacao,c
  9499  0025E6                     l340:
  9500  0025E6  FFFF               	dw	65535	; assembler added errata NOP
  9501                           
  9502                           ;comunicacao.h: 125: }
  9503                           ;comunicacao.h: 126: if (aguardaBuffer("ERROR") || !timerEtapaComunicacao) {
  9504                           
  9505                           ; BSR set to: 0
  9506  0025E8  0ED7               	movlw	low STR_17
  9507  0025EA  0100               	movlb	0	; () banked
  9508  0025EC  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9509  0025EE  0E7F               	movlw	high STR_17
  9510  0025F0  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9511  0025F2  EC72  F038         	call	_aguardaBuffer	;wreg free
  9512  0025F6  0900               	iorlw	0
  9513  0025F8  A4D8               	btfss	status,2,c
  9514  0025FA  D005               	goto	u5880
  9515  0025FC                     L50:
  9516  0025FC  FFFF               	dw	65535	; assembler added errata NOP
  9517  0025FE  0100               	movlb	0	; () banked
  9518  002600  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
  9519  002602  A4D8               	btfss	status,2,c
  9520  002604  D021               	goto	l325
  9521  002606                     u5880:
  9522  002606  FFFF               	dw	65535	; assembler added errata NOP
  9523                           
  9524                           ;comunicacao.h: 131: etapaComunicacao = 0;
  9525                           
  9526                           ;comunicacao.h: 130: default:
  9527                           
  9528                           ;comunicacao.h: 128: }
  9529                           ;comunicacao.h: 129: break;
  9530                           
  9531                           ;comunicacao.h: 127: etapaComunicacao = 0;
  9532                           
  9533                           ; BSR set to: 0
  9534  002608  0E00               	movlw	0
  9535  00260A  6E52               	movwf	_etapaComunicacao+1,c
  9536  00260C  0E00               	movlw	0
  9537  00260E  6E51               	movwf	_etapaComunicacao,c
  9538                           
  9539                           ;comunicacao.h: 134: }
  9540                           
  9541                           ;comunicacao.h: 132: break;
  9542  002610  D01B               	goto	l325
  9543  002612                     l323:
  9544  002612  FFFF               	dw	65535	; assembler added errata NOP
  9545  002614  C051  F0BB         	movff	_etapaComunicacao,??_comunicarTeste
  9546  002618  C052  F0BC         	movff	_etapaComunicacao+1,??_comunicarTeste+1
  9547                           
  9548                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9549                           ; Switch size 1, requested type "space"
  9550                           ; Number of cases is 1, Range of values is 0 to 0
  9551                           ; switch strategies available:
  9552                           ; Name         Instructions Cycles
  9553                           ; simple_byte            4     3 (average)
  9554                           ;	Chosen strategy is simple_byte
  9555  00261C  0100               	movlb	0	; () banked
  9556  00261E  51BC               	movf	(??_comunicarTeste+1)& (0+255),w,b
  9557  002620  0A00               	xorlw	0	; case 0
  9558  002622  A4D8               	btfss	status,2,c
  9559  002624  D7F0               	goto	u5880
  9560                           
  9561                           ; BSR set to: 0
  9562                           ; Switch size 1, requested type "space"
  9563                           ; Number of cases is 5, Range of values is 0 to 4
  9564                           ; switch strategies available:
  9565                           ; Name         Instructions Cycles
  9566                           ; simple_byte           16     9 (average)
  9567                           ;	Chosen strategy is simple_byte
  9568  002626  51BB               	movf	??_comunicarTeste& (0+255),w,b
  9569  002628  0A00               	xorlw	0	; case 0
  9570  00262A  B4D8               	btfsc	status,2,c
  9571  00262C  D721               	goto	l324
  9572  00262E  0A01               	xorlw	1	; case 1
  9573  002630  B4D8               	btfsc	status,2,c
  9574  002632  D72E               	goto	l326
  9575  002634  0A03               	xorlw	3	; case 2
  9576  002636  B4D8               	btfsc	status,2,c
  9577  002638  D753               	goto	l329
  9578  00263A  0A01               	xorlw	1	; case 3
  9579  00263C  B4D8               	btfsc	status,2,c
  9580  00263E  D77B               	goto	l336
  9581  002640  0A07               	xorlw	7	; case 4
  9582  002642  B4D8               	btfsc	status,2,c
  9583  002644  D7B5               	goto	l339
  9584  002646  D7DF               	goto	u5880
  9585  002648                     l325:
  9586  002648  FFFF               	dw	65535	; assembler added errata NOP
  9587                           
  9588                           ; BSR set to: 0
  9589  00264A  0012               	return		;funcret
  9590  00264C  FFFF               	dw	65535	; errata NOP
  9591  00264E                     __end_of_comunicarTeste:
  9592                           	opt stack 0
  9593                           tblptru	equ	0xFF8
  9594                           tblptrh	equ	0xFF7
  9595                           tblptrl	equ	0xFF6
  9596                           tablat	equ	0xFF5
  9597                           prodh	equ	0xFF4
  9598                           prodl	equ	0xFF3
  9599                           postinc0	equ	0xFEE
  9600                           wreg	equ	0xFE8
  9601                           postdec1	equ	0xFE5
  9602                           fsr1l	equ	0xFE1
  9603                           indf2	equ	0xFDF
  9604                           postinc2	equ	0xFDE
  9605                           fsr2h	equ	0xFDA
  9606                           fsr2l	equ	0xFD9
  9607                           status	equ	0xFD8
  9608                           
  9609 ;; *************** function _configuraRegistradores *****************
  9610 ;; Defined at:
  9611 ;;		line 7 in file "registradores.h"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;		None
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;		None
  9616 ;; Return value:  Size  Location     Type
  9617 ;;                  1    wreg      void 
  9618 ;; Registers used:
  9619 ;;		wreg, status,2
  9620 ;; Tracked objects:
  9621 ;;		On entry : 0/0
  9622 ;;		On exit  : 0/0
  9623 ;;		Unchanged: 0/0
  9624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9625 ;;      Params:         0       0       0       0       0       0       0
  9626 ;;      Locals:         0       0       0       0       0       0       0
  9627 ;;      Temps:          0       0       0       0       0       0       0
  9628 ;;      Totals:         0       0       0       0       0       0       0
  9629 ;;Total ram usage:        0 bytes
  9630 ;; Hardware stack levels used:    1
  9631 ;; Hardware stack levels required when called:    6
  9632 ;; This function calls:
  9633 ;;		Nothing
  9634 ;; This function is called by:
  9635 ;;		_main
  9636 ;; This function uses a non-reentrant model
  9637 ;;
  9638                           
  9639                           	psect	text23
  9640  0074B0                     __ptext23:
  9641                           	opt stack 0
  9642  0074B0                     _configuraRegistradores:
  9643                           	opt stack 0
  9644  0074B0  FFFF               	dw	65535	; assembler added errata NOP
  9645                           
  9646                           ;registradores.h: 9: ADCON0 = 0b10000001;
  9647                           
  9648                           ;incstack = 0
  9649  0074B2  0E81               	movlw	129
  9650  0074B4  6EC2               	movwf	4034,c	;volatile
  9651                           
  9652                           ;registradores.h: 10: ADCON1 = 0b11001110;
  9653  0074B6  0ECE               	movlw	206
  9654  0074B8  6EC1               	movwf	4033,c	;volatile
  9655                           
  9656                           ;registradores.h: 11: TRISAbits.RA0 = 1;
  9657  0074BA  8092               	bsf	3986,0,c	;volatile
  9658                           
  9659                           ;registradores.h: 12: PORTAbits.AN0 = 0;
  9660  0074BC  9080               	bcf	3968,0,c	;volatile
  9661                           
  9662                           ;registradores.h: 15: T0CON = 0x81;
  9663  0074BE  0E81               	movlw	129
  9664  0074C0  6ED5               	movwf	4053,c	;volatile
  9665                           
  9666                           ;registradores.h: 16: INTCON = 0xE4;
  9667  0074C2  0EE4               	movlw	228
  9668  0074C4  6EF2               	movwf	intcon,c	;volatile
  9669                           
  9670                           ;registradores.h: 19: TRISDbits.RD5 = 0;
  9671  0074C6  9A95               	bcf	3989,5,c	;volatile
  9672                           
  9673                           ;registradores.h: 20: TRISDbits.RD4 = 0;
  9674  0074C8  9895               	bcf	3989,4,c	;volatile
  9675                           
  9676                           ;registradores.h: 21: TRISDbits.RD3 = 0;
  9677  0074CA  9695               	bcf	3989,3,c	;volatile
  9678                           
  9679                           ;registradores.h: 22: TRISDbits.RD2 = 0;
  9680  0074CC  9495               	bcf	3989,2,c	;volatile
  9681                           
  9682                           ;registradores.h: 23: TRISDbits.RD1 = 0;
  9683  0074CE  9295               	bcf	3989,1,c	;volatile
  9684                           
  9685                           ;registradores.h: 24: TRISDbits.RD0 = 0;
  9686  0074D0  9095               	bcf	3989,0,c	;volatile
  9687                           
  9688                           ;registradores.h: 27: TRISCbits.TRISC6 = 0;
  9689  0074D2  9C94               	bcf	3988,6,c	;volatile
  9690                           
  9691                           ;registradores.h: 28: TRISCbits.TRISC7 = 1;
  9692  0074D4  8E94               	bsf	3988,7,c	;volatile
  9693                           
  9694                           ;registradores.h: 29: TXSTAbits.TXEN = 1;
  9695  0074D6  8AAC               	bsf	4012,5,c	;volatile
  9696                           
  9697                           ;registradores.h: 30: TXSTAbits.BRGH = 1;
  9698  0074D8  84AC               	bsf	4012,2,c	;volatile
  9699                           
  9700                           ;registradores.h: 31: TXSTAbits.SYNC = 0;
  9701  0074DA  98AC               	bcf	4012,4,c	;volatile
  9702                           
  9703                           ;registradores.h: 32: RCSTAbits.SPEN = 1;
  9704  0074DC  8EAB               	bsf	4011,7,c	;volatile
  9705                           
  9706                           ;registradores.h: 33: RCSTAbits.CREN = 1;
  9707  0074DE  88AB               	bsf	4011,4,c	;volatile
  9708                           
  9709                           ;registradores.h: 36: SPBRG = 25;
  9710  0074E0  0E19               	movlw	25
  9711  0074E2  6EAF               	movwf	4015,c	;volatile
  9712                           
  9713                           ;registradores.h: 37: INTCONbits.GIE = 1;
  9714  0074E4  8EF2               	bsf	intcon,7,c	;volatile
  9715                           
  9716                           ;registradores.h: 38: INTCONbits.PEIE = 1;
  9717  0074E6  8CF2               	bsf	intcon,6,c	;volatile
  9718                           
  9719                           ;registradores.h: 39: PIR1bits.RCIF = 0;
  9720  0074E8  9A9E               	bcf	3998,5,c	;volatile
  9721                           
  9722                           ;registradores.h: 40: PIE1bits.RCIE = 1;
  9723  0074EA  8A9D               	bsf	3997,5,c	;volatile
  9724                           
  9725                           ;registradores.h: 43: INTCONbits.RBIE = 0;
  9726  0074EC  96F2               	bcf	intcon,3,c	;volatile
  9727                           
  9728                           ;registradores.h: 44: TRISAbits.RA2 = 1;
  9729  0074EE  8492               	bsf	3986,2,c	;volatile
  9730                           
  9731                           ;registradores.h: 45: TRISAbits.RA5 = 1;
  9732  0074F0  8A92               	bsf	3986,5,c	;volatile
  9733                           
  9734                           ;registradores.h: 46: TRISCbits.RC0 = 1;
  9735  0074F2  8094               	bsf	3988,0,c	;volatile
  9736                           
  9737                           ;registradores.h: 49: TRISBbits.RB2 = 1;
  9738  0074F4  8493               	bsf	3987,2,c	;volatile
  9739                           
  9740                           ;registradores.h: 50: TRISBbits.RB3 = 1;
  9741  0074F6  8693               	bsf	3987,3,c	;volatile
  9742                           
  9743                           ;registradores.h: 51: TRISBbits.RB4 = 1;
  9744  0074F8  8893               	bsf	3987,4,c	;volatile
  9745                           
  9746                           ;registradores.h: 52: TRISBbits.RB5 = 1;
  9747  0074FA  8A93               	bsf	3987,5,c	;volatile
  9748                           
  9749                           ;registradores.h: 55: TRISEbits.RE0 = 0;
  9750  0074FC  9096               	bcf	3990,0,c	;volatile
  9751                           
  9752                           ;registradores.h: 56: TRISEbits.RE1 = 0;
  9753  0074FE  9296               	bcf	3990,1,c	;volatile
  9754                           
  9755                           ;registradores.h: 57: TRISEbits.RE2 = 0;
  9756  007500  9496               	bcf	3990,2,c	;volatile
  9757  007502  0012               	return		;funcret
  9758  007504  FFFF               	dw	65535	; errata NOP
  9759  007506                     __end_of_configuraRegistradores:
  9760                           	opt stack 0
  9761                           tblptru	equ	0xFF8
  9762                           tblptrh	equ	0xFF7
  9763                           tblptrl	equ	0xFF6
  9764                           tablat	equ	0xFF5
  9765                           prodh	equ	0xFF4
  9766                           prodl	equ	0xFF3
  9767                           intcon	equ	0xFF2
  9768                           postinc0	equ	0xFEE
  9769                           wreg	equ	0xFE8
  9770                           postdec1	equ	0xFE5
  9771                           fsr1l	equ	0xFE1
  9772                           indf2	equ	0xFDF
  9773                           postinc2	equ	0xFDE
  9774                           fsr2h	equ	0xFDA
  9775                           fsr2l	equ	0xFD9
  9776                           status	equ	0xFD8
  9777                           
  9778 ;; *************** function _atualizarLCD *****************
  9779 ;; Defined at:
  9780 ;;		line 132 in file "lcd.h"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;  line1           2    8[BANK0 ] PTR unsigned char 
  9783 ;;		 -> line1(21), 
  9784 ;;  line2           2   10[BANK0 ] PTR unsigned char 
  9785 ;;		 -> line2(21), 
  9786 ;;  line3           2   12[BANK0 ] PTR unsigned char 
  9787 ;;		 -> line3(21), 
  9788 ;;  line4           2   14[BANK0 ] PTR unsigned char 
  9789 ;;		 -> line4(21), 
  9790 ;; Auto vars:     Size  Location     Type
  9791 ;;  i               1   16[BANK0 ] unsigned char 
  9792 ;; Return value:  Size  Location     Type
  9793 ;;                  1    wreg      void 
  9794 ;; Registers used:
  9795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9796 ;; Tracked objects:
  9797 ;;		On entry : 0/0
  9798 ;;		On exit  : 0/0
  9799 ;;		Unchanged: 0/0
  9800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9801 ;;      Params:         0       8       0       0       0       0       0
  9802 ;;      Locals:         0       1       0       0       0       0       0
  9803 ;;      Temps:          0       0       0       0       0       0       0
  9804 ;;      Totals:         0       9       0       0       0       0       0
  9805 ;;Total ram usage:        9 bytes
  9806 ;; Hardware stack levels used:    1
  9807 ;; Hardware stack levels required when called:    9
  9808 ;; This function calls:
  9809 ;;		_Lcd_Set_Cursor
  9810 ;;		_Lcd_Write_String
  9811 ;; This function is called by:
  9812 ;;		_main
  9813 ;; This function uses a non-reentrant model
  9814 ;;
  9815                           
  9816                           	psect	text24
  9817  0039EC                     __ptext24:
  9818                           	opt stack 0
  9819  0039EC                     _atualizarLCD:
  9820                           	opt stack 0
  9821  0039EC  FFFF               	dw	65535	; assembler added errata NOP
  9822                           
  9823                           ;lcd.h: 134: Lcd_Set_Cursor(1, 1);
  9824                           
  9825                           ;incstack = 0
  9826  0039EE  0E01               	movlw	1
  9827  0039F0  0100               	movlb	0	; () banked
  9828  0039F2  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9829  0039F4  0E01               	movlw	1
  9830  0039F6  ECC2  F01D         	call	_Lcd_Set_Cursor
  9831                           
  9832                           ;lcd.h: 135: Lcd_Write_String(line1);
  9833  0039FA  C088  F084         	movff	atualizarLCD@line1,Lcd_Write_String@a
  9834  0039FE  C089  F085         	movff	atualizarLCD@line1+1,Lcd_Write_String@a+1
  9835  003A02  EC37  F038         	call	_Lcd_Write_String	;wreg free
  9836                           
  9837                           ;lcd.h: 136: Lcd_Set_Cursor(2, 1);
  9838  003A06  0E01               	movlw	1
  9839  003A08  0100               	movlb	0	; () banked
  9840  003A0A  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9841  003A0C  0E02               	movlw	2
  9842  003A0E  ECC2  F01D         	call	_Lcd_Set_Cursor
  9843                           
  9844                           ;lcd.h: 137: Lcd_Write_String(line2);
  9845  003A12  C08A  F084         	movff	atualizarLCD@line2,Lcd_Write_String@a
  9846  003A16  C08B  F085         	movff	atualizarLCD@line2+1,Lcd_Write_String@a+1
  9847  003A1A  EC37  F038         	call	_Lcd_Write_String	;wreg free
  9848                           
  9849                           ;lcd.h: 138: Lcd_Set_Cursor(3, 0);
  9850  003A1E  0E00               	movlw	0
  9851  003A20  0100               	movlb	0	; () banked
  9852  003A22  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9853  003A24  0E03               	movlw	3
  9854  003A26  ECC2  F01D         	call	_Lcd_Set_Cursor
  9855                           
  9856                           ;lcd.h: 139: Lcd_Write_String(line3);
  9857  003A2A  C08C  F084         	movff	atualizarLCD@line3,Lcd_Write_String@a
  9858  003A2E  C08D  F085         	movff	atualizarLCD@line3+1,Lcd_Write_String@a+1
  9859  003A32  EC37  F038         	call	_Lcd_Write_String	;wreg free
  9860                           
  9861                           ;lcd.h: 140: Lcd_Set_Cursor(4, 0);
  9862  003A36  0E00               	movlw	0
  9863  003A38  0100               	movlb	0	; () banked
  9864  003A3A  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9865  003A3C  0E04               	movlw	4
  9866  003A3E  ECC2  F01D         	call	_Lcd_Set_Cursor
  9867                           
  9868                           ;lcd.h: 141: Lcd_Write_String(line4);
  9869  003A42  C08E  F084         	movff	atualizarLCD@line4,Lcd_Write_String@a
  9870  003A46  C08F  F085         	movff	atualizarLCD@line4+1,Lcd_Write_String@a+1
  9871  003A4A  EC37  F038         	call	_Lcd_Write_String	;wreg free
  9872                           
  9873                           ;lcd.h: 143: char i = 0;
  9874  003A4E  0E00               	movlw	0
  9875  003A50  0100               	movlb	0	; () banked
  9876  003A52  6F90               	movwf	atualizarLCD@i& (0+255),b
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;lcd.h: 144: for (i = 0; i < 20; i++) {
  9880  003A54  0E00               	movlw	0
  9881  003A56  6F90               	movwf	atualizarLCD@i& (0+255),b
  9882  003A58                     l6994:
  9883  003A58  FFFF               	dw	65535	; assembler added errata NOP
  9884                           
  9885                           ; BSR set to: 0
  9886  003A5A  0E13               	movlw	19
  9887  003A5C  6590               	cpfsgt	atualizarLCD@i& (0+255),b
  9888  003A5E  D001               	goto	l661
  9889  003A60  D02B               	goto	u7790
  9890  003A62                     l661:
  9891  003A62  FFFF               	dw	65535	; assembler added errata NOP
  9892                           
  9893                           ; BSR set to: 0
  9894                           ;lcd.h: 145: line1[i] = ' ';
  9895                           
  9896                           ; BSR set to: 0
  9897  003A64  5190               	movf	atualizarLCD@i& (0+255),w,b
  9898  003A66  0D01               	mullw	1
  9899  003A68  50F3               	movf	prodl,w,c
  9900  003A6A  2588               	addwf	atualizarLCD@line1& (0+255),w,b
  9901  003A6C  6ED9               	movwf	fsr2l,c
  9902  003A6E  50F4               	movf	prodh,w,c
  9903  003A70  2189               	addwfc	(atualizarLCD@line1+1)& (0+255),w,b
  9904  003A72  6EDA               	movwf	fsr2h,c
  9905  003A74  0E20               	movlw	32
  9906  003A76  6EDF               	movwf	indf2,c
  9907                           
  9908                           ;lcd.h: 146: line2[i] = ' ';
  9909  003A78  5190               	movf	atualizarLCD@i& (0+255),w,b
  9910  003A7A  0D01               	mullw	1
  9911  003A7C  50F3               	movf	prodl,w,c
  9912  003A7E  258A               	addwf	atualizarLCD@line2& (0+255),w,b
  9913  003A80  6ED9               	movwf	fsr2l,c
  9914  003A82  50F4               	movf	prodh,w,c
  9915  003A84  218B               	addwfc	(atualizarLCD@line2+1)& (0+255),w,b
  9916  003A86  6EDA               	movwf	fsr2h,c
  9917  003A88  0E20               	movlw	32
  9918  003A8A  6EDF               	movwf	indf2,c
  9919                           
  9920                           ;lcd.h: 147: line3[i] = ' ';
  9921  003A8C  5190               	movf	atualizarLCD@i& (0+255),w,b
  9922  003A8E  0D01               	mullw	1
  9923  003A90  50F3               	movf	prodl,w,c
  9924  003A92  258C               	addwf	atualizarLCD@line3& (0+255),w,b
  9925  003A94  6ED9               	movwf	fsr2l,c
  9926  003A96  50F4               	movf	prodh,w,c
  9927  003A98  218D               	addwfc	(atualizarLCD@line3+1)& (0+255),w,b
  9928  003A9A  6EDA               	movwf	fsr2h,c
  9929  003A9C  0E20               	movlw	32
  9930  003A9E  6EDF               	movwf	indf2,c
  9931                           
  9932                           ;lcd.h: 148: line4[i] = ' ';
  9933  003AA0  5190               	movf	atualizarLCD@i& (0+255),w,b
  9934  003AA2  0D01               	mullw	1
  9935  003AA4  50F3               	movf	prodl,w,c
  9936  003AA6  258E               	addwf	atualizarLCD@line4& (0+255),w,b
  9937  003AA8  6ED9               	movwf	fsr2l,c
  9938  003AAA  50F4               	movf	prodh,w,c
  9939  003AAC  218F               	addwfc	(atualizarLCD@line4+1)& (0+255),w,b
  9940  003AAE  6EDA               	movwf	fsr2h,c
  9941  003AB0  0E20               	movlw	32
  9942  003AB2  6EDF               	movwf	indf2,c
  9943                           
  9944                           ; BSR set to: 0
  9945  003AB4  2B90               	incf	atualizarLCD@i& (0+255),f,b
  9946  003AB6  D7D0               	goto	l6994
  9947  003AB8                     u7790:
  9948  003AB8  FFFF               	dw	65535	; assembler added errata NOP
  9949                           
  9950                           ; BSR set to: 0
  9951                           
  9952                           ; BSR set to: 0
  9953  003ABA  0012               	return		;funcret
  9954  003ABC  FFFF               	dw	65535	; errata NOP
  9955  003ABE                     __end_of_atualizarLCD:
  9956                           	opt stack 0
  9957                           tblptru	equ	0xFF8
  9958                           tblptrh	equ	0xFF7
  9959                           tblptrl	equ	0xFF6
  9960                           tablat	equ	0xFF5
  9961                           prodh	equ	0xFF4
  9962                           prodl	equ	0xFF3
  9963                           intcon	equ	0xFF2
  9964                           postinc0	equ	0xFEE
  9965                           wreg	equ	0xFE8
  9966                           postdec1	equ	0xFE5
  9967                           fsr1l	equ	0xFE1
  9968                           indf2	equ	0xFDF
  9969                           postinc2	equ	0xFDE
  9970                           fsr2h	equ	0xFDA
  9971                           fsr2l	equ	0xFD9
  9972                           status	equ	0xFD8
  9973                           
  9974 ;; *************** function _Lcd_Write_String *****************
  9975 ;; Defined at:
  9976 ;;		line 123 in file "lcd.h"
  9977 ;; Parameters:    Size  Location     Type
  9978 ;;  a               2    4[BANK0 ] PTR unsigned char 
  9979 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
  9980 ;; Auto vars:     Size  Location     Type
  9981 ;;  i               1    6[BANK0 ] unsigned char 
  9982 ;; Return value:  Size  Location     Type
  9983 ;;                  1    wreg      void 
  9984 ;; Registers used:
  9985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9991 ;;      Params:         0       2       0       0       0       0       0
  9992 ;;      Locals:         0       1       0       0       0       0       0
  9993 ;;      Temps:          0       0       0       0       0       0       0
  9994 ;;      Totals:         0       3       0       0       0       0       0
  9995 ;;Total ram usage:        3 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; Hardware stack levels required when called:    8
  9998 ;; This function calls:
  9999 ;;		_Lcd_Write_Char
 10000 ;; This function is called by:
 10001 ;;		_atualizarLCD
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           	psect	text25
 10006  00706E                     __ptext25:
 10007                           	opt stack 0
 10008  00706E                     _Lcd_Write_String:
 10009                           	opt stack 0
 10010  00706E  FFFF               	dw	65535	; assembler added errata NOP
 10011                           
 10012                           ;lcd.h: 124: unsigned char i = 0;
 10013                           
 10014                           ; BSR set to: 0
 10015                           ;incstack = 0
 10016  007070  0E00               	movlw	0
 10017  007072  0100               	movlb	0	; () banked
 10018  007074  6F86               	movwf	Lcd_Write_String@i& (0+255),b
 10019                           
 10020                           ;lcd.h: 126: for (i = 0; i < 20; i++) {
 10021  007076  0E00               	movlw	0
 10022  007078  6F86               	movwf	Lcd_Write_String@i& (0+255),b
 10023  00707A                     l6040:
 10024  00707A  FFFF               	dw	65535	; assembler added errata NOP
 10025                           
 10026                           ; BSR set to: 0
 10027  00707C  0E13               	movlw	19
 10028  00707E  6586               	cpfsgt	Lcd_Write_String@i& (0+255),b
 10029  007080  D001               	goto	l656
 10030  007082  D00F               	goto	u6320
 10031  007084                     l656:
 10032  007084  FFFF               	dw	65535	; assembler added errata NOP
 10033                           
 10034                           ; BSR set to: 0
 10035                           ;lcd.h: 127: Lcd_Write_Char(a[i]);
 10036                           
 10037                           ; BSR set to: 0
 10038  007086  5186               	movf	Lcd_Write_String@i& (0+255),w,b
 10039  007088  0D01               	mullw	1
 10040  00708A  50F3               	movf	prodl,w,c
 10041  00708C  2584               	addwf	Lcd_Write_String@a& (0+255),w,b
 10042  00708E  6ED9               	movwf	fsr2l,c
 10043  007090  50F4               	movf	prodh,w,c
 10044  007092  2185               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
 10045  007094  6EDA               	movwf	fsr2h,c
 10046  007096  50DF               	movf	indf2,w,c
 10047  007098  ECED  F038         	call	_Lcd_Write_Char
 10048  00709C  0100               	movlb	0	; () banked
 10049  00709E  2B86               	incf	Lcd_Write_String@i& (0+255),f,b
 10050  0070A0  D7EC               	goto	l6040
 10051  0070A2                     u6320:
 10052  0070A2  FFFF               	dw	65535	; assembler added errata NOP
 10053                           
 10054                           ; BSR set to: 0
 10055                           
 10056                           ; BSR set to: 0
 10057  0070A4  0012               	return		;funcret
 10058  0070A6  FFFF               	dw	65535	; errata NOP
 10059  0070A8                     __end_of_Lcd_Write_String:
 10060                           	opt stack 0
 10061                           tblptru	equ	0xFF8
 10062                           tblptrh	equ	0xFF7
 10063                           tblptrl	equ	0xFF6
 10064                           tablat	equ	0xFF5
 10065                           prodh	equ	0xFF4
 10066                           prodl	equ	0xFF3
 10067                           intcon	equ	0xFF2
 10068                           postinc0	equ	0xFEE
 10069                           wreg	equ	0xFE8
 10070                           postdec1	equ	0xFE5
 10071                           fsr1l	equ	0xFE1
 10072                           indf2	equ	0xFDF
 10073                           postinc2	equ	0xFDE
 10074                           fsr2h	equ	0xFDA
 10075                           fsr2l	equ	0xFD9
 10076                           status	equ	0xFD8
 10077                           
 10078 ;; *************** function _Lcd_Write_Char *****************
 10079 ;; Defined at:
 10080 ;;		line 108 in file "lcd.h"
 10081 ;; Parameters:    Size  Location     Type
 10082 ;;  a               1    wreg     unsigned char 
 10083 ;; Auto vars:     Size  Location     Type
 10084 ;;  a               1    3[BANK0 ] unsigned char 
 10085 ;;  y               1    2[BANK0 ] unsigned char 
 10086 ;;  tempp           1    1[BANK0 ] unsigned char 
 10087 ;; Return value:  Size  Location     Type
 10088 ;;                  1    wreg      void 
 10089 ;; Registers used:
 10090 ;;		wreg, status,2, status,0, cstack
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10096 ;;      Params:         0       0       0       0       0       0       0
 10097 ;;      Locals:         0       3       0       0       0       0       0
 10098 ;;      Temps:          0       0       0       0       0       0       0
 10099 ;;      Totals:         0       3       0       0       0       0       0
 10100 ;;Total ram usage:        3 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; Hardware stack levels required when called:    7
 10103 ;; This function calls:
 10104 ;;		_Lcd_Port
 10105 ;; This function is called by:
 10106 ;;		_Lcd_Write_String
 10107 ;;		_criarCaracteresCGRAM
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111                           	psect	text26
 10112  0071DA                     __ptext26:
 10113                           	opt stack 0
 10114  0071DA                     _Lcd_Write_Char:
 10115                           	opt stack 0
 10116  0071DA  FFFF               	dw	65535	; assembler added errata NOP
 10117                           
 10118                           ; BSR set to: 0
 10119                           ;incstack = 0
 10120                           ;Lcd_Write_Char@a stored from wreg
 10121  0071DC  0100               	movlb	0	; () banked
 10122  0071DE  6F83               	movwf	Lcd_Write_Char@a& (0+255),b
 10123                           
 10124                           ;lcd.h: 109: char tempp, y;
 10125                           ;lcd.h: 110: tempp = a & 0x0F;
 10126  0071E0  0100               	movlb	0	; () banked
 10127  0071E2  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 10128  0071E4  0B0F               	andlw	15
 10129  0071E6  6F81               	movwf	Lcd_Write_Char@tempp& (0+255),b
 10130                           
 10131                           ;lcd.h: 111: y = a & 0xF0;
 10132  0071E8  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 10133  0071EA  0BF0               	andlw	240
 10134  0071EC  6F82               	movwf	Lcd_Write_Char@y& (0+255),b
 10135                           
 10136                           ; BSR set to: 0
 10137                           ;lcd.h: 112: PORTDbits.RD1 = 1;
 10138  0071EE  8283               	bsf	3971,1,c	;volatile
 10139                           
 10140                           ; BSR set to: 0
 10141                           ;lcd.h: 113: Lcd_Port(y >> 4);
 10142  0071F0  3982               	swapf	Lcd_Write_Char@y& (0+255),w,b
 10143  0071F2  0B0F               	andlw	15
 10144  0071F4  EC50  F039         	call	_Lcd_Port
 10145                           
 10146                           ;lcd.h: 114: PORTDbits.RD0 = 1;
 10147  0071F8  8083               	bsf	3971,0,c	;volatile
 10148                           
 10149                           ;lcd.h: 115: _delay((unsigned long)((150)*(8000000/4000000.0)));
 10150  0071FA  0E4B               	movlw	75
 10151  0071FC                     u9107:
 10152  0071FC  FFFF               	dw	65535	; errata NOP
 10153  0071FE  2EE8               	decfsz	wreg,f,c
 10154  007200  D7FD               	bra	u9107
 10155                           
 10156                           ;lcd.h: 116: PORTDbits.RD0 = 0;
 10157  007202  9083               	bcf	3971,0,c	;volatile
 10158                           
 10159                           ;lcd.h: 117: Lcd_Port(tempp);
 10160  007204  0100               	movlb	0	; () banked
 10161  007206  5181               	movf	Lcd_Write_Char@tempp& (0+255),w,b
 10162  007208  EC50  F039         	call	_Lcd_Port
 10163                           
 10164                           ;lcd.h: 118: PORTDbits.RD0 = 1;
 10165  00720C  8083               	bsf	3971,0,c	;volatile
 10166                           
 10167                           ;lcd.h: 119: _delay((unsigned long)((150)*(8000000/4000000.0)));
 10168  00720E  0E4B               	movlw	75
 10169  007210                     u9117:
 10170  007210  FFFF               	dw	65535	; errata NOP
 10171  007212  2EE8               	decfsz	wreg,f,c
 10172  007214  D7FD               	bra	u9117
 10173                           
 10174                           ;lcd.h: 120: PORTDbits.RD0 = 0;
 10175  007216  9083               	bcf	3971,0,c	;volatile
 10176  007218  0012               	return		;funcret
 10177  00721A  FFFF               	dw	65535	; errata NOP
 10178  00721C                     __end_of_Lcd_Write_Char:
 10179                           	opt stack 0
 10180                           tblptru	equ	0xFF8
 10181                           tblptrh	equ	0xFF7
 10182                           tblptrl	equ	0xFF6
 10183                           tablat	equ	0xFF5
 10184                           prodh	equ	0xFF4
 10185                           prodl	equ	0xFF3
 10186                           intcon	equ	0xFF2
 10187                           postinc0	equ	0xFEE
 10188                           wreg	equ	0xFE8
 10189                           postdec1	equ	0xFE5
 10190                           fsr1l	equ	0xFE1
 10191                           indf2	equ	0xFDF
 10192                           postinc2	equ	0xFDE
 10193                           fsr2h	equ	0xFDA
 10194                           fsr2l	equ	0xFD9
 10195                           status	equ	0xFD8
 10196                           
 10197 ;; *************** function _Lcd_Set_Cursor *****************
 10198 ;; Defined at:
 10199 ;;		line 73 in file "lcd.h"
 10200 ;; Parameters:    Size  Location     Type
 10201 ;;  a               1    wreg     unsigned char 
 10202 ;;  b               1    3[BANK0 ] unsigned char 
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;  a               1    4[BANK0 ] unsigned char 
 10205 ;;  temp            1    7[BANK0 ] unsigned char 
 10206 ;;  y               1    6[BANK0 ] unsigned char 
 10207 ;;  z               1    5[BANK0 ] unsigned char 
 10208 ;; Return value:  Size  Location     Type
 10209 ;;                  1    wreg      void 
 10210 ;; Registers used:
 10211 ;;		wreg, status,2, status,0, cstack
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 0/0
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10217 ;;      Params:         0       1       0       0       0       0       0
 10218 ;;      Locals:         0       4       0       0       0       0       0
 10219 ;;      Temps:          0       0       0       0       0       0       0
 10220 ;;      Totals:         0       5       0       0       0       0       0
 10221 ;;Total ram usage:        5 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; Hardware stack levels required when called:    8
 10224 ;; This function calls:
 10225 ;;		_Lcd_Cmd
 10226 ;; This function is called by:
 10227 ;;		_atualizarLCD
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           	psect	text27
 10232  003B84                     __ptext27:
 10233                           	opt stack 0
 10234  003B84                     _Lcd_Set_Cursor:
 10235                           	opt stack 0
 10236  003B84  FFFF               	dw	65535	; assembler added errata NOP
 10237                           
 10238                           ;incstack = 0
 10239                           ;Lcd_Set_Cursor@a stored from wreg
 10240  003B86  0100               	movlb	0	; () banked
 10241  003B88  6F84               	movwf	Lcd_Set_Cursor@a& (0+255),b
 10242                           
 10243                           ;lcd.h: 74: char temp, z, y;
 10244                           ;lcd.h: 75: switch (a) {
 10245  003B8A  D04C               	goto	l643
 10246  003B8C  FFFF               	dw	65535	; assembler added errata NOP
 10247                           
 10248                           ;lcd.h: 77: temp = 0x80 + b - 1;
 10249  003B8E  0100               	movlb	0	; () banked
 10250  003B90  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10251  003B92  0F7F               	addlw	127
 10252  003B94  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10253                           
 10254                           ;lcd.h: 78: z = temp >> 4;
 10255  003B96  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10256  003B98  0B0F               	andlw	15
 10257  003B9A  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10258                           
 10259                           ;lcd.h: 79: y = temp & 0x0F;
 10260  003B9C  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10261  003B9E  0B0F               	andlw	15
 10262  003BA0  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10263                           
 10264                           ; BSR set to: 0
 10265                           ;lcd.h: 80: Lcd_Cmd(z);
 10266  003BA2  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10267  003BA4  ECC9  F036         	call	_Lcd_Cmd
 10268                           
 10269                           ;lcd.h: 81: Lcd_Cmd(y);
 10270  003BA8  0100               	movlb	0	; () banked
 10271  003BAA  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10272  003BAC  ECC9  F036         	call	_Lcd_Cmd
 10273                           
 10274                           ;lcd.h: 82: break;
 10275  003BB0  D048               	goto	l645
 10276  003BB2  FFFF               	dw	65535	; assembler added errata NOP
 10277                           
 10278                           ;lcd.h: 84: temp = 0xC0 + b - 1;
 10279  003BB4  0100               	movlb	0	; () banked
 10280  003BB6  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10281  003BB8  0FBF               	addlw	191
 10282  003BBA  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10283                           
 10284                           ;lcd.h: 85: z = temp >> 4;
 10285  003BBC  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10286  003BBE  0B0F               	andlw	15
 10287  003BC0  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10288                           
 10289                           ;lcd.h: 86: y = temp & 0x0F;
 10290  003BC2  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10291  003BC4  0B0F               	andlw	15
 10292  003BC6  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10293                           
 10294                           ; BSR set to: 0
 10295                           ;lcd.h: 87: Lcd_Cmd(z);
 10296  003BC8  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10297  003BCA  ECC9  F036         	call	_Lcd_Cmd
 10298                           
 10299                           ;lcd.h: 88: Lcd_Cmd(y);
 10300  003BCE  0100               	movlb	0	; () banked
 10301  003BD0  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10302  003BD2  ECC9  F036         	call	_Lcd_Cmd
 10303                           
 10304                           ;lcd.h: 89: break;
 10305  003BD6  D035               	goto	l645
 10306  003BD8  FFFF               	dw	65535	; assembler added errata NOP
 10307                           
 10308                           ;lcd.h: 91: temp = 0x94 + b;
 10309  003BDA  0100               	movlb	0	; () banked
 10310  003BDC  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10311  003BDE  0F94               	addlw	148
 10312  003BE0  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10313                           
 10314                           ;lcd.h: 92: z = temp >> 4;
 10315  003BE2  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10316  003BE4  0B0F               	andlw	15
 10317  003BE6  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10318                           
 10319                           ;lcd.h: 93: y = temp & 0x0F;
 10320  003BE8  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10321  003BEA  0B0F               	andlw	15
 10322  003BEC  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10323                           
 10324                           ; BSR set to: 0
 10325                           ;lcd.h: 94: Lcd_Cmd(z);
 10326  003BEE  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10327  003BF0  ECC9  F036         	call	_Lcd_Cmd
 10328                           
 10329                           ;lcd.h: 95: Lcd_Cmd(y);
 10330  003BF4  0100               	movlb	0	; () banked
 10331  003BF6  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10332  003BF8  ECC9  F036         	call	_Lcd_Cmd
 10333                           
 10334                           ;lcd.h: 96: break;
 10335  003BFC  D022               	goto	l645
 10336  003BFE  FFFF               	dw	65535	; assembler added errata NOP
 10337                           
 10338                           ;lcd.h: 98: temp = 0xD4 + b;
 10339  003C00  0100               	movlb	0	; () banked
 10340  003C02  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10341  003C04  0FD4               	addlw	212
 10342  003C06  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10343                           
 10344                           ;lcd.h: 99: z = temp >> 4;
 10345  003C08  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10346  003C0A  0B0F               	andlw	15
 10347  003C0C  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10348                           
 10349                           ;lcd.h: 100: y = temp & 0x0F;
 10350  003C0E  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10351  003C10  0B0F               	andlw	15
 10352  003C12  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10353                           
 10354                           ; BSR set to: 0
 10355                           ;lcd.h: 101: Lcd_Cmd(z);
 10356  003C14  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10357  003C16  ECC9  F036         	call	_Lcd_Cmd
 10358                           
 10359                           ;lcd.h: 102: Lcd_Cmd(y);
 10360  003C1A  0100               	movlb	0	; () banked
 10361  003C1C  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10362  003C1E  ECC9  F036         	call	_Lcd_Cmd
 10363                           
 10364                           ;lcd.h: 105: }
 10365                           
 10366                           ;lcd.h: 104: default:return;
 10367                           
 10368                           ;lcd.h: 103: break;
 10369  003C22  D00F               	goto	l645
 10370  003C24                     l643:
 10371  003C24  FFFF               	dw	65535	; assembler added errata NOP
 10372  003C26  0100               	movlb	0	; () banked
 10373  003C28  5184               	movf	Lcd_Set_Cursor@a& (0+255),w,b
 10374                           
 10375                           ; Switch size 1, requested type "space"
 10376                           ; Number of cases is 4, Range of values is 1 to 4
 10377                           ; switch strategies available:
 10378                           ; Name         Instructions Cycles
 10379                           ; simple_byte           13     7 (average)
 10380                           ;	Chosen strategy is simple_byte
 10381  003C2A  0A01               	xorlw	1	; case 1
 10382  003C2C  B4D8               	btfsc	status,2,c
 10383  003C2E  D7AE               	goto	l644
 10384  003C30  0A03               	xorlw	3	; case 2
 10385  003C32  B4D8               	btfsc	status,2,c
 10386  003C34  D7BE               	goto	l646
 10387  003C36  0A01               	xorlw	1	; case 3
 10388  003C38  B4D8               	btfsc	status,2,c
 10389  003C3A  D7CE               	goto	l647
 10390  003C3C  0A07               	xorlw	7	; case 4
 10391  003C3E  B4D8               	btfsc	status,2,c
 10392  003C40  D7DE               	goto	l648
 10393  003C42                     l645:
 10394  003C42  FFFF               	dw	65535	; assembler added errata NOP
 10395                           
 10396                           ; BSR set to: 0
 10397  003C44  0012               	return		;funcret
 10398  003C46  FFFF               	dw	65535	; errata NOP
 10399  003C48                     __end_of_Lcd_Set_Cursor:
 10400                           	opt stack 0
 10401                           tblptru	equ	0xFF8
 10402                           tblptrh	equ	0xFF7
 10403                           tblptrl	equ	0xFF6
 10404                           tablat	equ	0xFF5
 10405                           prodh	equ	0xFF4
 10406                           prodl	equ	0xFF3
 10407                           intcon	equ	0xFF2
 10408                           postinc0	equ	0xFEE
 10409                           wreg	equ	0xFE8
 10410                           postdec1	equ	0xFE5
 10411                           fsr1l	equ	0xFE1
 10412                           indf2	equ	0xFDF
 10413                           postinc2	equ	0xFDE
 10414                           fsr2h	equ	0xFDA
 10415                           fsr2l	equ	0xFD9
 10416                           status	equ	0xFD8
 10417                           
 10418 ;; *************** function _ajusteSP_Bombas *****************
 10419 ;; Defined at:
 10420 ;;		line 7 in file "tela_CONFIG_PRESSAO.h"
 10421 ;; Parameters:    Size  Location     Type
 10422 ;;		None
 10423 ;; Auto vars:     Size  Location     Type
 10424 ;;		None
 10425 ;; Return value:  Size  Location     Type
 10426 ;;                  1    wreg      void 
 10427 ;; Registers used:
 10428 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10429 ;; Tracked objects:
 10430 ;;		On entry : 0/0
 10431 ;;		On exit  : 0/0
 10432 ;;		Unchanged: 0/0
 10433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10434 ;;      Params:         0       0       0       0       0       0       0
 10435 ;;      Locals:         0       2       0       0       0       0       0
 10436 ;;      Temps:          0       0       0       0       0       0       0
 10437 ;;      Totals:         0       2       0       0       0       0       0
 10438 ;;Total ram usage:        2 bytes
 10439 ;; Hardware stack levels used:    1
 10440 ;; Hardware stack levels required when called:   10
 10441 ;; This function calls:
 10442 ;;		_blink
 10443 ;;		_btPress
 10444 ;;		_intToFloatStr
 10445 ;;		_sprintf
 10446 ;;		_writeEEPROM_ext
 10447 ;; This function is called by:
 10448 ;;		_main
 10449 ;; This function uses a non-reentrant model
 10450 ;;
 10451                           
 10452                           	psect	text28
 10453  001938                     __ptext28:
 10454                           	opt stack 0
 10455  001938                     _ajusteSP_Bombas:
 10456                           	opt stack 0
 10457  001938  FFFF               	dw	65535	; assembler added errata NOP
 10458                           
 10459                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10460                           
 10461                           ;incstack = 0
 10462  00193A  0100               	movlb	0	; () banked
 10463  00193C  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 10464  00193E  ECA4  F03C         	call	_intToFloatStr
 10465  001942  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2384
 10466  001946  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2384+1
 10467                           
 10468                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10469  00194A  0E7B               	movlw	low _line1
 10470  00194C  0100               	movlb	0	; () banked
 10471  00194E  6FA1               	movwf	sprintf@wh& (0+255),b
 10472  001950  0E01               	movlw	high _line1
 10473  001952  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10474  001954  0E22               	movlw	low STR_106
 10475  001956  6FA3               	movwf	sprintf@f& (0+255),b
 10476  001958  0E7F               	movlw	high STR_106
 10477  00195A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10478  00195C  C0C2  F0A5         	movff	_ajusteSP_Bombas$2384,?_sprintf+4
 10479  001960  C0C3  F0A6         	movff	_ajusteSP_Bombas$2384+1,?_sprintf+5
 10480  001964  EC95  F039         	call	_sprintf	;wreg free
 10481                           
 10482                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10483  001968  0100               	movlb	0	; () banked
 10484  00196A  51E4               	movf	_sp_jockey& (0+255),w,b
 10485  00196C  ECA4  F03C         	call	_intToFloatStr
 10486  001970  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2384
 10487  001974  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2384+1
 10488                           
 10489                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10490  001978  0E66               	movlw	low _line2
 10491  00197A  0100               	movlb	0	; () banked
 10492  00197C  6FA1               	movwf	sprintf@wh& (0+255),b
 10493  00197E  0E01               	movlw	high _line2
 10494  001980  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10495  001982  0E2D               	movlw	low STR_48
 10496  001984  6FA3               	movwf	sprintf@f& (0+255),b
 10497  001986  0E7F               	movlw	high STR_48
 10498  001988  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10499  00198A  C0C2  F0A5         	movff	_ajusteSP_Bombas$2384,?_sprintf+4
 10500  00198E  C0C3  F0A6         	movff	_ajusteSP_Bombas$2384+1,?_sprintf+5
 10501  001992  EC95  F039         	call	_sprintf	;wreg free
 10502                           
 10503                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10504  001996  0100               	movlb	0	; () banked
 10505  001998  51E3               	movf	_sp_principal& (0+255),w,b
 10506  00199A  ECA4  F03C         	call	_intToFloatStr
 10507  00199E  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2384
 10508  0019A2  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2384+1
 10509                           
 10510                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10511  0019A6  0E51               	movlw	low _line3
 10512  0019A8  0100               	movlb	0	; () banked
 10513  0019AA  6FA1               	movwf	sprintf@wh& (0+255),b
 10514  0019AC  0E01               	movlw	high _line3
 10515  0019AE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10516  0019B0  0E1F               	movlw	low STR_51
 10517  0019B2  6FA3               	movwf	sprintf@f& (0+255),b
 10518  0019B4  0E7E               	movlw	high STR_51
 10519  0019B6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10520  0019B8  C0C2  F0A5         	movff	_ajusteSP_Bombas$2384,?_sprintf+4
 10521  0019BC  C0C3  F0A6         	movff	_ajusteSP_Bombas$2384+1,?_sprintf+5
 10522  0019C0  EC95  F039         	call	_sprintf	;wreg free
 10523                           
 10524                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10525  0019C4  0100               	movlb	0	; () banked
 10526  0019C6  51E2               	movf	_sp_estacionaria& (0+255),w,b
 10527  0019C8  ECA4  F03C         	call	_intToFloatStr
 10528  0019CC  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2384
 10529  0019D0  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2384+1
 10530                           
 10531                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10532  0019D4  0E3C               	movlw	low _line4
 10533  0019D6  0100               	movlb	0	; () banked
 10534  0019D8  6FA1               	movwf	sprintf@wh& (0+255),b
 10535  0019DA  0E01               	movlw	high _line4
 10536  0019DC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10537  0019DE  0E2E               	movlw	low STR_54
 10538  0019E0  6FA3               	movwf	sprintf@f& (0+255),b
 10539  0019E2  0E7E               	movlw	high STR_54
 10540  0019E4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10541  0019E6  C0C2  F0A5         	movff	_ajusteSP_Bombas$2384,?_sprintf+4
 10542  0019EA  C0C3  F0A6         	movff	_ajusteSP_Bombas$2384+1,?_sprintf+5
 10543  0019EE  EC95  F039         	call	_sprintf	;wreg free
 10544                           
 10545                           ;tela_CONFIG_PRESSAO.h: 14: if (btPress(1)) {
 10546  0019F2  0E01               	movlw	1
 10547  0019F4  ECE6  F03A         	call	_btPress
 10548  0019F8  0900               	iorlw	0
 10549  0019FA  B4D8               	btfsc	status,2,c
 10550  0019FC  D019               	goto	l873
 10551                           
 10552                           ;tela_CONFIG_PRESSAO.h: 15: writeEEPROM_ext(0, sp_jockey);
 10553  0019FE  C0E4  F08C         	movff	_sp_jockey,writeEEPROM_ext@data
 10554  001A02  0E00               	movlw	0
 10555  001A04  EC72  F039         	call	_writeEEPROM_ext
 10556                           
 10557                           ;tela_CONFIG_PRESSAO.h: 16: writeEEPROM_ext(1, sp_principal);
 10558  001A08  C0E3  F08C         	movff	_sp_principal,writeEEPROM_ext@data
 10559  001A0C  0E01               	movlw	1
 10560  001A0E  EC72  F039         	call	_writeEEPROM_ext
 10561                           
 10562                           ;tela_CONFIG_PRESSAO.h: 17: writeEEPROM_ext(2, sp_estacionaria);
 10563  001A12  C0E2  F08C         	movff	_sp_estacionaria,writeEEPROM_ext@data
 10564  001A16  0E02               	movlw	2
 10565  001A18  EC72  F039         	call	_writeEEPROM_ext
 10566                           
 10567                           ;tela_CONFIG_PRESSAO.h: 18: writeEEPROM_ext(4, sp_pressao_rede);
 10568  001A1C  C0E5  F08C         	movff	_sp_pressao_rede,writeEEPROM_ext@data
 10569  001A20  0E04               	movlw	4
 10570  001A22  EC72  F039         	call	_writeEEPROM_ext
 10571                           
 10572                           ;tela_CONFIG_PRESSAO.h: 19: option_posi = 0;
 10573  001A26  0E00               	movlw	0
 10574  001A28  0100               	movlb	0	; () banked
 10575  001A2A  6FE1               	movwf	_option_posi& (0+255),b
 10576                           
 10577                           ; BSR set to: 0
 10578                           ;tela_CONFIG_PRESSAO.h: 20: menu_posi = _menu_posi;
 10579  001A2C  C0DF  F0E0         	movff	__menu_posi,_menu_posi
 10580  001A30                     l873:
 10581  001A30  FFFF               	dw	65535	; assembler added errata NOP
 10582                           
 10583                           ;tela_CONFIG_PRESSAO.h: 21: }
 10584                           ;tela_CONFIG_PRESSAO.h: 23: if (btPress(4)) {
 10585                           
 10586                           ; BSR set to: 0
 10587  001A32  0E04               	movlw	4
 10588  001A34  ECE6  F03A         	call	_btPress
 10589  001A38  0900               	iorlw	0
 10590  001A3A  B4D8               	btfsc	status,2,c
 10591  001A3C  D097               	goto	l875
 10592                           
 10593                           ;tela_CONFIG_PRESSAO.h: 24: option_posi++;
 10594  001A3E  0100               	movlb	0	; () banked
 10595  001A40  2BE1               	incf	_option_posi& (0+255),f,b
 10596                           
 10597                           ; BSR set to: 0
 10598                           ;tela_CONFIG_PRESSAO.h: 25: }
 10599                           ;tela_CONFIG_PRESSAO.h: 27: switch (option_posi) {
 10600  001A42  D094               	goto	l875
 10601  001A44  FFFF               	dw	65535	; assembler added errata NOP
 10602                           
 10603                           ; BSR set to: 0
 10604                           ;tela_CONFIG_PRESSAO.h: 29: blink(line1, 8, 15);
 10605                           
 10606                           ; BSR set to: 0
 10607  001A46  0E7B               	movlw	low _line1
 10608  001A48  6F80               	movwf	blink@line& (0+255),b
 10609  001A4A  0E01               	movlw	high _line1
 10610  001A4C  6F81               	movwf	(blink@line+1)& (0+255),b
 10611  001A4E  0E08               	movlw	8
 10612  001A50  6F82               	movwf	blink@start& (0+255),b
 10613  001A52  0E0F               	movlw	15
 10614  001A54  6F83               	movwf	blink@end& (0+255),b
 10615  001A56  ECAE  F038         	call	_blink	;wreg free
 10616                           
 10617                           ;tela_CONFIG_PRESSAO.h: 30: if (btPress(3)) {
 10618  001A5A  0E03               	movlw	3
 10619  001A5C  ECE6  F03A         	call	_btPress
 10620  001A60  0900               	iorlw	0
 10621  001A62  B4D8               	btfsc	status,2,c
 10622  001A64  D002               	goto	l877
 10623                           
 10624                           ;tela_CONFIG_PRESSAO.h: 31: sp_pressao_rede++;
 10625  001A66  0100               	movlb	0	; () banked
 10626  001A68  2BE5               	incf	_sp_pressao_rede& (0+255),f,b
 10627  001A6A                     l877:
 10628  001A6A  FFFF               	dw	65535	; assembler added errata NOP
 10629                           
 10630                           ;tela_CONFIG_PRESSAO.h: 32: }
 10631                           ;tela_CONFIG_PRESSAO.h: 33: if (btPress(2)) {
 10632                           
 10633                           ; BSR set to: 0
 10634  001A6C  0E02               	movlw	2
 10635  001A6E  ECE6  F03A         	call	_btPress
 10636  001A72  0900               	iorlw	0
 10637  001A74  B4D8               	btfsc	status,2,c
 10638  001A76  D002               	goto	l878
 10639                           
 10640                           ;tela_CONFIG_PRESSAO.h: 34: sp_pressao_rede--;
 10641  001A78  0100               	movlb	0	; () banked
 10642  001A7A  07E5               	decf	_sp_pressao_rede& (0+255),f,b
 10643  001A7C                     l878:
 10644  001A7C  FFFF               	dw	65535	; assembler added errata NOP
 10645                           
 10646                           ;tela_CONFIG_PRESSAO.h: 35: }
 10647                           ;tela_CONFIG_PRESSAO.h: 36: if (sp_pressao_rede > 99) {
 10648                           
 10649                           ; BSR set to: 0
 10650  001A7E  0E63               	movlw	99
 10651  001A80  0100               	movlb	0	; () banked
 10652  001A82  65E5               	cpfsgt	_sp_pressao_rede& (0+255),b
 10653  001A84  D083               	goto	l880
 10654                           
 10655                           ; BSR set to: 0
 10656                           ;tela_CONFIG_PRESSAO.h: 37: sp_pressao_rede = 0;
 10657  001A86  0E00               	movlw	0
 10658  001A88  6FE5               	movwf	_sp_pressao_rede& (0+255),b
 10659                           
 10660                           ; BSR set to: 0
 10661                           ;tela_CONFIG_PRESSAO.h: 38: }
 10662                           ;tela_CONFIG_PRESSAO.h: 39: break;
 10663  001A8A  D080               	goto	l880
 10664  001A8C  FFFF               	dw	65535	; assembler added errata NOP
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;tela_CONFIG_PRESSAO.h: 41: blink(line2, 8, 15);
 10668                           
 10669                           ; BSR set to: 0
 10670  001A8E  0E66               	movlw	low _line2
 10671  001A90  6F80               	movwf	blink@line& (0+255),b
 10672  001A92  0E01               	movlw	high _line2
 10673  001A94  6F81               	movwf	(blink@line+1)& (0+255),b
 10674  001A96  0E08               	movlw	8
 10675  001A98  6F82               	movwf	blink@start& (0+255),b
 10676  001A9A  0E0F               	movlw	15
 10677  001A9C  6F83               	movwf	blink@end& (0+255),b
 10678  001A9E  ECAE  F038         	call	_blink	;wreg free
 10679                           
 10680                           ;tela_CONFIG_PRESSAO.h: 42: if (btPress(3)) {
 10681  001AA2  0E03               	movlw	3
 10682  001AA4  ECE6  F03A         	call	_btPress
 10683  001AA8  0900               	iorlw	0
 10684  001AAA  B4D8               	btfsc	status,2,c
 10685  001AAC  D002               	goto	l882
 10686                           
 10687                           ;tela_CONFIG_PRESSAO.h: 43: sp_jockey++;
 10688  001AAE  0100               	movlb	0	; () banked
 10689  001AB0  2BE4               	incf	_sp_jockey& (0+255),f,b
 10690  001AB2                     l882:
 10691  001AB2  FFFF               	dw	65535	; assembler added errata NOP
 10692                           
 10693                           ;tela_CONFIG_PRESSAO.h: 44: }
 10694                           ;tela_CONFIG_PRESSAO.h: 45: if (btPress(2)) {
 10695                           
 10696                           ; BSR set to: 0
 10697  001AB4  0E02               	movlw	2
 10698  001AB6  ECE6  F03A         	call	_btPress
 10699  001ABA  0900               	iorlw	0
 10700  001ABC  B4D8               	btfsc	status,2,c
 10701  001ABE  D002               	goto	l883
 10702                           
 10703                           ;tela_CONFIG_PRESSAO.h: 46: sp_jockey--;
 10704  001AC0  0100               	movlb	0	; () banked
 10705  001AC2  07E4               	decf	_sp_jockey& (0+255),f,b
 10706  001AC4                     l883:
 10707  001AC4  FFFF               	dw	65535	; assembler added errata NOP
 10708                           
 10709                           ;tela_CONFIG_PRESSAO.h: 47: }
 10710                           ;tela_CONFIG_PRESSAO.h: 48: if (sp_jockey > 99) {
 10711                           
 10712                           ; BSR set to: 0
 10713  001AC6  0E63               	movlw	99
 10714  001AC8  0100               	movlb	0	; () banked
 10715  001ACA  65E4               	cpfsgt	_sp_jockey& (0+255),b
 10716  001ACC  D05F               	goto	l880
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;tela_CONFIG_PRESSAO.h: 49: sp_jockey = 0;
 10720  001ACE  0E00               	movlw	0
 10721  001AD0  6FE4               	movwf	_sp_jockey& (0+255),b
 10722                           
 10723                           ; BSR set to: 0
 10724                           ;tela_CONFIG_PRESSAO.h: 50: }
 10725                           ;tela_CONFIG_PRESSAO.h: 51: break;
 10726  001AD2  D05C               	goto	l880
 10727  001AD4  FFFF               	dw	65535	; assembler added errata NOP
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;tela_CONFIG_PRESSAO.h: 53: blink(line3, 12, 18);
 10731                           
 10732                           ; BSR set to: 0
 10733  001AD6  0E51               	movlw	low _line3
 10734  001AD8  6F80               	movwf	blink@line& (0+255),b
 10735  001ADA  0E01               	movlw	high _line3
 10736  001ADC  6F81               	movwf	(blink@line+1)& (0+255),b
 10737  001ADE  0E0C               	movlw	12
 10738  001AE0  6F82               	movwf	blink@start& (0+255),b
 10739  001AE2  0E12               	movlw	18
 10740  001AE4  6F83               	movwf	blink@end& (0+255),b
 10741  001AE6  ECAE  F038         	call	_blink	;wreg free
 10742                           
 10743                           ;tela_CONFIG_PRESSAO.h: 54: if (btPress(3)) {
 10744  001AEA  0E03               	movlw	3
 10745  001AEC  ECE6  F03A         	call	_btPress
 10746  001AF0  0900               	iorlw	0
 10747  001AF2  B4D8               	btfsc	status,2,c
 10748  001AF4  D002               	goto	l886
 10749                           
 10750                           ;tela_CONFIG_PRESSAO.h: 55: sp_principal++;
 10751  001AF6  0100               	movlb	0	; () banked
 10752  001AF8  2BE3               	incf	_sp_principal& (0+255),f,b
 10753  001AFA                     l886:
 10754  001AFA  FFFF               	dw	65535	; assembler added errata NOP
 10755                           
 10756                           ;tela_CONFIG_PRESSAO.h: 56: }
 10757                           ;tela_CONFIG_PRESSAO.h: 57: if (btPress(2)) {
 10758                           
 10759                           ; BSR set to: 0
 10760  001AFC  0E02               	movlw	2
 10761  001AFE  ECE6  F03A         	call	_btPress
 10762  001B02  0900               	iorlw	0
 10763  001B04  B4D8               	btfsc	status,2,c
 10764  001B06  D002               	goto	l887
 10765                           
 10766                           ;tela_CONFIG_PRESSAO.h: 58: sp_principal--;
 10767  001B08  0100               	movlb	0	; () banked
 10768  001B0A  07E3               	decf	_sp_principal& (0+255),f,b
 10769  001B0C                     l887:
 10770  001B0C  FFFF               	dw	65535	; assembler added errata NOP
 10771                           
 10772                           ;tela_CONFIG_PRESSAO.h: 59: }
 10773                           ;tela_CONFIG_PRESSAO.h: 60: if (sp_principal > 99) {
 10774                           
 10775                           ; BSR set to: 0
 10776  001B0E  0E63               	movlw	99
 10777  001B10  0100               	movlb	0	; () banked
 10778  001B12  65E3               	cpfsgt	_sp_principal& (0+255),b
 10779  001B14  D03B               	goto	l880
 10780                           
 10781                           ; BSR set to: 0
 10782                           ;tela_CONFIG_PRESSAO.h: 61: sp_principal = 0;
 10783  001B16  0E00               	movlw	0
 10784  001B18  6FE3               	movwf	_sp_principal& (0+255),b
 10785                           
 10786                           ; BSR set to: 0
 10787                           ;tela_CONFIG_PRESSAO.h: 62: }
 10788                           ;tela_CONFIG_PRESSAO.h: 63: break;
 10789  001B1A  D038               	goto	l880
 10790  001B1C  FFFF               	dw	65535	; assembler added errata NOP
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;tela_CONFIG_PRESSAO.h: 65: blink(line4, 12, 18);
 10794                           
 10795                           ; BSR set to: 0
 10796  001B1E  0E3C               	movlw	low _line4
 10797  001B20  6F80               	movwf	blink@line& (0+255),b
 10798  001B22  0E01               	movlw	high _line4
 10799  001B24  6F81               	movwf	(blink@line+1)& (0+255),b
 10800  001B26  0E0C               	movlw	12
 10801  001B28  6F82               	movwf	blink@start& (0+255),b
 10802  001B2A  0E12               	movlw	18
 10803  001B2C  6F83               	movwf	blink@end& (0+255),b
 10804  001B2E  ECAE  F038         	call	_blink	;wreg free
 10805                           
 10806                           ;tela_CONFIG_PRESSAO.h: 66: if (btPress(3)) {
 10807  001B32  0E03               	movlw	3
 10808  001B34  ECE6  F03A         	call	_btPress
 10809  001B38  0900               	iorlw	0
 10810  001B3A  B4D8               	btfsc	status,2,c
 10811  001B3C  D002               	goto	l890
 10812                           
 10813                           ;tela_CONFIG_PRESSAO.h: 67: sp_estacionaria++;
 10814  001B3E  0100               	movlb	0	; () banked
 10815  001B40  2BE2               	incf	_sp_estacionaria& (0+255),f,b
 10816  001B42                     l890:
 10817  001B42  FFFF               	dw	65535	; assembler added errata NOP
 10818                           
 10819                           ;tela_CONFIG_PRESSAO.h: 68: }
 10820                           ;tela_CONFIG_PRESSAO.h: 69: if (btPress(2)) {
 10821                           
 10822                           ; BSR set to: 0
 10823  001B44  0E02               	movlw	2
 10824  001B46  ECE6  F03A         	call	_btPress
 10825  001B4A  0900               	iorlw	0
 10826  001B4C  B4D8               	btfsc	status,2,c
 10827  001B4E  D002               	goto	l891
 10828                           
 10829                           ;tela_CONFIG_PRESSAO.h: 70: sp_estacionaria--;
 10830  001B50  0100               	movlb	0	; () banked
 10831  001B52  07E2               	decf	_sp_estacionaria& (0+255),f,b
 10832  001B54                     l891:
 10833  001B54  FFFF               	dw	65535	; assembler added errata NOP
 10834                           
 10835                           ;tela_CONFIG_PRESSAO.h: 71: }
 10836                           ;tela_CONFIG_PRESSAO.h: 72: if (sp_estacionaria > 99) {
 10837                           
 10838                           ; BSR set to: 0
 10839  001B56  0E63               	movlw	99
 10840  001B58  0100               	movlb	0	; () banked
 10841  001B5A  65E2               	cpfsgt	_sp_estacionaria& (0+255),b
 10842  001B5C  D017               	goto	l880
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;tela_CONFIG_PRESSAO.h: 73: sp_estacionaria = 0;
 10846  001B5E  0E00               	movlw	0
 10847  001B60  6FE2               	movwf	_sp_estacionaria& (0+255),b
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;tela_CONFIG_PRESSAO.h: 74: }
 10851                           ;tela_CONFIG_PRESSAO.h: 75: break;
 10852  001B62  D014               	goto	l880
 10853  001B64  FFFF               	dw	65535	; assembler added errata NOP
 10854                           
 10855                           ; BSR set to: 0
 10856                           
 10857                           ; BSR set to: 0
 10858  001B66  0E00               	movlw	0
 10859  001B68  6FE1               	movwf	_option_posi& (0+255),b
 10860                           
 10861                           ; BSR set to: 0
 10862                           ;tela_CONFIG_PRESSAO.h: 78: }
 10863                           
 10864                           ;tela_CONFIG_PRESSAO.h: 77: break;
 10865  001B6A  D010               	goto	l880
 10866  001B6C                     l875:
 10867  001B6C  FFFF               	dw	65535	; assembler added errata NOP
 10868                           
 10869                           ; BSR set to: 0
 10870  001B6E  0100               	movlb	0	; () banked
 10871  001B70  51E1               	movf	_option_posi& (0+255),w,b
 10872                           
 10873                           ; Switch size 1, requested type "space"
 10874                           ; Number of cases is 4, Range of values is 0 to 3
 10875                           ; switch strategies available:
 10876                           ; Name         Instructions Cycles
 10877                           ; simple_byte           13     7 (average)
 10878                           ;	Chosen strategy is simple_byte
 10879  001B72  0A00               	xorlw	0	; case 0
 10880  001B74  B4D8               	btfsc	status,2,c
 10881  001B76  D766               	goto	l876
 10882  001B78  0A01               	xorlw	1	; case 1
 10883  001B7A  B4D8               	btfsc	status,2,c
 10884  001B7C  D787               	goto	l881
 10885  001B7E  0A03               	xorlw	3	; case 2
 10886  001B80  B4D8               	btfsc	status,2,c
 10887  001B82  D7A8               	goto	l885
 10888  001B84  0A01               	xorlw	1	; case 3
 10889  001B86  B4D8               	btfsc	status,2,c
 10890  001B88  D7C9               	goto	l889
 10891  001B8A  D7EC               	goto	l893
 10892  001B8C                     l880:
 10893  001B8C  FFFF               	dw	65535	; assembler added errata NOP
 10894                           
 10895                           ; BSR set to: 0
 10896                           
 10897                           ; BSR set to: 0
 10898  001B8E  0012               	return		;funcret
 10899  001B90  FFFF               	dw	65535	; errata NOP
 10900  001B92                     __end_of_ajusteSP_Bombas:
 10901                           	opt stack 0
 10902                           tblptru	equ	0xFF8
 10903                           tblptrh	equ	0xFF7
 10904                           tblptrl	equ	0xFF6
 10905                           tablat	equ	0xFF5
 10906                           prodh	equ	0xFF4
 10907                           prodl	equ	0xFF3
 10908                           intcon	equ	0xFF2
 10909                           postinc0	equ	0xFEE
 10910                           wreg	equ	0xFE8
 10911                           postdec1	equ	0xFE5
 10912                           fsr1l	equ	0xFE1
 10913                           indf2	equ	0xFDF
 10914                           postinc2	equ	0xFDE
 10915                           fsr2h	equ	0xFDA
 10916                           fsr2l	equ	0xFD9
 10917                           status	equ	0xFD8
 10918                           
 10919 ;; *************** function _blink *****************
 10920 ;; Defined at:
 10921 ;;		line 173 in file "lcd.h"
 10922 ;; Parameters:    Size  Location     Type
 10923 ;;  line            2    0[BANK0 ] PTR unsigned char 
 10924 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
 10925 ;;  start           1    2[BANK0 ] unsigned char 
 10926 ;;  end             1    3[BANK0 ] unsigned char 
 10927 ;; Auto vars:     Size  Location     Type
 10928 ;;  i               1    4[BANK0 ] unsigned char 
 10929 ;; Return value:  Size  Location     Type
 10930 ;;                  1    wreg      void 
 10931 ;; Registers used:
 10932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10933 ;; Tracked objects:
 10934 ;;		On entry : 0/0
 10935 ;;		On exit  : 0/0
 10936 ;;		Unchanged: 0/0
 10937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10938 ;;      Params:         0       4       0       0       0       0       0
 10939 ;;      Locals:         0       1       0       0       0       0       0
 10940 ;;      Temps:          0       0       0       0       0       0       0
 10941 ;;      Totals:         0       5       0       0       0       0       0
 10942 ;;Total ram usage:        5 bytes
 10943 ;; Hardware stack levels used:    1
 10944 ;; Hardware stack levels required when called:    6
 10945 ;; This function calls:
 10946 ;;		Nothing
 10947 ;; This function is called by:
 10948 ;;		_telaPrincipal
 10949 ;;		_tela_ajusteRTC
 10950 ;;		_tela_testeBombas
 10951 ;;		_configuraTelefones
 10952 ;;		_configurarEstacionaria
 10953 ;;		_ajusteSP_Bombas
 10954 ;; This function uses a non-reentrant model
 10955 ;;
 10956                           
 10957                           	psect	text29
 10958  00715C                     __ptext29:
 10959                           	opt stack 0
 10960  00715C                     _blink:
 10961                           	opt stack 0
 10962  00715C  FFFF               	dw	65535	; assembler added errata NOP
 10963                           
 10964                           ;lcd.h: 174: if (blinkk) {
 10965                           
 10966                           ; BSR set to: 0
 10967                           ;incstack = 0
 10968  00715E  5067               	movf	_blinkk,w,c
 10969  007160  B4D8               	btfsc	status,2,c
 10970  007162  D018               	goto	u6340
 10971                           
 10972                           ;lcd.h: 175: char i = 0;
 10973  007164  0E00               	movlw	0
 10974  007166  0100               	movlb	0	; () banked
 10975  007168  6F84               	movwf	blink@i& (0+255),b
 10976                           
 10977                           ; BSR set to: 0
 10978                           ;lcd.h: 176: for (i = (--start); i < end; i++) {
 10979  00716A  0782               	decf	blink@start& (0+255),f,b
 10980  00716C  C082  F084         	movff	blink@start,blink@i
 10981  007170  D00C               	goto	l681
 10982  007172  FFFF               	dw	65535	; assembler added errata NOP
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;lcd.h: 177: line[i] = ' ';
 10986                           
 10987                           ; BSR set to: 0
 10988  007174  5184               	movf	blink@i& (0+255),w,b
 10989  007176  0D01               	mullw	1
 10990  007178  50F3               	movf	prodl,w,c
 10991  00717A  2580               	addwf	blink@line& (0+255),w,b
 10992  00717C  6ED9               	movwf	fsr2l,c
 10993  00717E  50F4               	movf	prodh,w,c
 10994  007180  2181               	addwfc	(blink@line+1)& (0+255),w,b
 10995  007182  6EDA               	movwf	fsr2h,c
 10996  007184  0E20               	movlw	32
 10997  007186  6EDF               	movwf	indf2,c
 10998                           
 10999                           ; BSR set to: 0
 11000  007188  2B84               	incf	blink@i& (0+255),f,b
 11001  00718A                     l681:
 11002  00718A  FFFF               	dw	65535	; assembler added errata NOP
 11003                           
 11004                           ; BSR set to: 0
 11005                           
 11006                           ; BSR set to: 0
 11007  00718C  5183               	movf	blink@end& (0+255),w,b
 11008  00718E  5D84               	subwf	blink@i& (0+255),w,b
 11009  007190  A0D8               	btfss	status,0,c
 11010  007192  D7EF               	goto	l682
 11011  007194                     u6340:
 11012  007194  FFFF               	dw	65535	; assembler added errata NOP
 11013                           
 11014                           ; BSR set to: 0
 11015                           
 11016                           ; BSR set to: 0
 11017  007196  0012               	return		;funcret
 11018  007198  FFFF               	dw	65535	; errata NOP
 11019  00719A                     __end_of_blink:
 11020                           	opt stack 0
 11021                           tblptru	equ	0xFF8
 11022                           tblptrh	equ	0xFF7
 11023                           tblptrl	equ	0xFF6
 11024                           tablat	equ	0xFF5
 11025                           prodh	equ	0xFF4
 11026                           prodl	equ	0xFF3
 11027                           intcon	equ	0xFF2
 11028                           postinc0	equ	0xFEE
 11029                           wreg	equ	0xFE8
 11030                           postdec1	equ	0xFE5
 11031                           fsr1l	equ	0xFE1
 11032                           indf2	equ	0xFDF
 11033                           postinc2	equ	0xFDE
 11034                           fsr2h	equ	0xFDA
 11035                           fsr2l	equ	0xFD9
 11036                           status	equ	0xFD8
 11037                           
 11038 ;; *************** function _acaoTesteBombas *****************
 11039 ;; Defined at:
 11040 ;;		line 138 in file "controle.h"
 11041 ;; Parameters:    Size  Location     Type
 11042 ;;		None
 11043 ;; Auto vars:     Size  Location     Type
 11044 ;;  i               1   90[BANK0 ] unsigned char 
 11045 ;;  intervalo       1   89[BANK0 ] unsigned char 
 11046 ;; Return value:  Size  Location     Type
 11047 ;;                  1    wreg      void 
 11048 ;; Registers used:
 11049 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11050 ;; Tracked objects:
 11051 ;;		On entry : 0/0
 11052 ;;		On exit  : 0/0
 11053 ;;		Unchanged: 0/0
 11054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11055 ;;      Params:         0       0       0       0       0       0       0
 11056 ;;      Locals:         0      14       0       0       0       0       0
 11057 ;;      Temps:          0       5       0       0       0       0       0
 11058 ;;      Totals:         0      19       0       0       0       0       0
 11059 ;;Total ram usage:       19 bytes
 11060 ;; Hardware stack levels used:    1
 11061 ;; Hardware stack levels required when called:   10
 11062 ;; This function calls:
 11063 ;;		_btPress
 11064 ;;		_clearShiftREG
 11065 ;;		_drenarPressao
 11066 ;;		_enviaSMS
 11067 ;;		_intToFloatStr
 11068 ;;		_partidaBombaEstacionaria
 11069 ;;		_readEEPROM_ext
 11070 ;;		_salvarLOG
 11071 ;;		_sprintf
 11072 ;;		_writeEEPROM_ext
 11073 ;; This function is called by:
 11074 ;;		_main
 11075 ;; This function uses a non-reentrant model
 11076 ;;
 11077                           
 11078                           	psect	text30
 11079  00091A                     __ptext30:
 11080                           	opt stack 0
 11081  00091A                     _acaoTesteBombas:
 11082                           	opt stack 0
 11083  00091A  FFFF               	dw	65535	; assembler added errata NOP
 11084                           
 11085                           ;controle.h: 139: if (btPress(1)) {
 11086                           
 11087                           ;incstack = 0
 11088  00091C  0E01               	movlw	1
 11089  00091E  ECE6  F03A         	call	_btPress
 11090  000922  0900               	iorlw	0
 11091  000924  B4D8               	btfsc	status,2,c
 11092  000926  D033               	goto	u7330
 11093                           
 11094                           ;controle.h: 140: executandoTeste = 0;
 11095  000928  0E00               	movlw	0
 11096  00092A  0100               	movlb	0	; () banked
 11097  00092C  6FF1               	movwf	_executandoTeste& (0+255),b
 11098                           
 11099                           ;controle.h: 141: gsmOcupado = 0;
 11100  00092E  0E00               	movlw	0
 11101  000930  6FF4               	movwf	_gsmOcupado& (0+255),b
 11102                           
 11103                           ;controle.h: 142: etapaTesteBombas = 0;
 11104  000932  0E00               	movlw	0
 11105  000934  6E72               	movwf	_etapaTesteBombas,c
 11106                           
 11107                           ; BSR set to: 0
 11108                           ;controle.h: 143: unsigned char intervalo = readEEPROM_ext(6);
 11109  000936  0E06               	movlw	6
 11110  000938  EC2D  F03A         	call	_readEEPROM_ext
 11111  00093C  0100               	movlb	0	; () banked
 11112  00093E  6FD9               	movwf	acaoTesteBombas@intervalo& (0+255),b
 11113                           
 11114                           ; BSR set to: 0
 11115                           ;controle.h: 144: intervalo_teste_dia = intervalo > 0 ? intervalo : 1;
 11116  000940  51D9               	movf	acaoTesteBombas@intervalo& (0+255),w,b
 11117  000942  A4D8               	btfss	status,2,c
 11118  000944  D005               	goto	l523
 11119                           
 11120                           ; BSR set to: 0
 11121  000946  0E00               	movlw	0
 11122  000948  6FD0               	movwf	(_acaoTesteBombas$1293+1)& (0+255),b
 11123  00094A  0E01               	movlw	1
 11124  00094C  6FCF               	movwf	_acaoTesteBombas$1293& (0+255),b
 11125  00094E  D004               	goto	l525
 11126  000950                     l523:
 11127  000950  FFFF               	dw	65535	; assembler added errata NOP
 11128                           
 11129                           ; BSR set to: 0
 11130  000952  C0D9  F0CF         	movff	acaoTesteBombas@intervalo,_acaoTesteBombas$1293
 11131  000956  6BD0               	clrf	(_acaoTesteBombas$1293+1)& (0+255),b
 11132  000958                     l525:
 11133  000958  FFFF               	dw	65535	; assembler added errata NOP
 11134                           
 11135                           ; BSR set to: 0
 11136  00095A  C0CF  F0E9         	movff	_acaoTesteBombas$1293,_intervalo_teste_dia
 11137                           
 11138                           ;controle.h: 145: menu_posi = _menu_posi;
 11139  00095E  C0DF  F0E0         	movff	__menu_posi,_menu_posi
 11140                           
 11141                           ; BSR set to: 0
 11142                           ;controle.h: 146: char i = 0;
 11143  000962  0E00               	movlw	0
 11144  000964  6FDA               	movwf	acaoTesteBombas@i& (0+255),b
 11145                           
 11146                           ;controle.h: 147: for (i = 0; i < 8; i++) {
 11147  000966  0E00               	movlw	0
 11148  000968  6FDA               	movwf	acaoTesteBombas@i& (0+255),b
 11149  00096A                     l6666:
 11150  00096A  FFFF               	dw	65535	; assembler added errata NOP
 11151                           
 11152                           ; BSR set to: 0
 11153  00096C  0E07               	movlw	7
 11154  00096E  65DA               	cpfsgt	acaoTesteBombas@i& (0+255),b
 11155  000970  D001               	goto	l526
 11156  000972  D00D               	goto	u7330
 11157  000974                     l526:
 11158  000974  FFFF               	dw	65535	; assembler added errata NOP
 11159                           
 11160                           ; BSR set to: 0
 11161                           ;controle.h: 148: shift[i] = 0;
 11162                           
 11163                           ; BSR set to: 0
 11164  000976  51DA               	movf	acaoTesteBombas@i& (0+255),w,b
 11165  000978  0D01               	mullw	1
 11166  00097A  0E44               	movlw	low _shift
 11167  00097C  24F3               	addwf	prodl,w,c
 11168  00097E  6ED9               	movwf	fsr2l,c
 11169  000980  0E00               	movlw	high _shift
 11170  000982  20F4               	addwfc	prodh,w,c
 11171  000984  6EDA               	movwf	fsr2h,c
 11172  000986  0E00               	movlw	0
 11173  000988  6EDF               	movwf	indf2,c
 11174                           
 11175                           ; BSR set to: 0
 11176  00098A  2BDA               	incf	acaoTesteBombas@i& (0+255),f,b
 11177  00098C  D7EE               	goto	l6666
 11178  00098E                     u7330:
 11179  00098E  FFFF               	dw	65535	; assembler added errata NOP
 11180                           
 11181                           ;controle.h: 149: }
 11182                           ;controle.h: 150: }
 11183                           ;controle.h: 152: if (etapaTesteBombas < 10) {
 11184                           
 11185                           ; BSR set to: 0
 11186                           
 11187                           ; BSR set to: 0
 11188  000990  0E0A               	movlw	10
 11189  000992  6072               	cpfslt	_etapaTesteBombas,c
 11190  000994  D202               	goto	l529
 11191                           
 11192                           ;controle.h: 153: sprintf(&line1[3], "Aguarde... %ds", timerTesteBombas);
 11193  000996  0E7E               	movlw	low (_line1+3)
 11194  000998  0100               	movlb	0	; () banked
 11195  00099A  6FA1               	movwf	sprintf@wh& (0+255),b
 11196  00099C  0E01               	movlw	high (_line1+3)
 11197  00099E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11198  0009A0  0E3D               	movlw	low STR_39
 11199  0009A2  6FA3               	movwf	sprintf@f& (0+255),b
 11200  0009A4  0E7E               	movlw	high STR_39
 11201  0009A6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11202  0009A8  C0DB  F0A5         	movff	_timerTesteBombas,?_sprintf+4
 11203  0009AC  C0DC  F0A6         	movff	_timerTesteBombas+1,?_sprintf+5
 11204  0009B0  EC95  F039         	call	_sprintf	;wreg free
 11205                           
 11206                           ;controle.h: 154: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 11207  0009B4  0100               	movlb	0	; () banked
 11208  0009B6  51F8               	movf	_pressao& (0+255),w,b
 11209  0009B8  ECA4  F03C         	call	_intToFloatStr
 11210  0009BC  C0B5  F0CD         	movff	?_intToFloatStr,_acaoTesteBombas$2382
 11211  0009C0  C0B6  F0CE         	movff	?_intToFloatStr+1,_acaoTesteBombas$2382+1
 11212                           
 11213                           ;controle.h: 154: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 11214  0009C4  0E68               	movlw	low (_line2+2)
 11215  0009C6  0100               	movlb	0	; () banked
 11216  0009C8  6FA1               	movwf	sprintf@wh& (0+255),b
 11217  0009CA  0E01               	movlw	high (_line2+2)
 11218  0009CC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11219  0009CE  0EF2               	movlw	low STR_40
 11220  0009D0  6FA3               	movwf	sprintf@f& (0+255),b
 11221  0009D2  0E7D               	movlw	high STR_40
 11222  0009D4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11223  0009D6  C0CD  F0A5         	movff	_acaoTesteBombas$2382,?_sprintf+4
 11224  0009DA  C0CE  F0A6         	movff	_acaoTesteBombas$2382+1,?_sprintf+5
 11225  0009DE  EC95  F039         	call	_sprintf	;wreg free
 11226                           
 11227                           ;controle.h: 155: }
 11228                           ;controle.h: 157: switch (etapaTesteBombas) {
 11229  0009E2  D1DB               	goto	l529
 11230  0009E4  FFFF               	dw	65535	; assembler added errata NOP
 11231                           
 11232                           ;controle.h: 159: dias_restante_teste = 0;
 11233  0009E6  0E00               	movlw	0
 11234  0009E8  0100               	movlb	0	; () banked
 11235  0009EA  6FE8               	movwf	_dias_restante_teste& (0+255),b
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;controle.h: 160: writeEEPROM_ext(10, dias_restante_teste);
 11239  0009EC  C0E8  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
 11240  0009F0  0E0A               	movlw	10
 11241  0009F2  EC72  F039         	call	_writeEEPROM_ext
 11242                           
 11243                           ;controle.h: 161: shift[2] = 1;
 11244  0009F6  0E01               	movlw	1
 11245  0009F8  6E46               	movwf	_shift+2,c
 11246                           
 11247                           ;controle.h: 162: timerTesteBombas = 30;
 11248  0009FA  0E00               	movlw	0
 11249  0009FC  0100               	movlb	0	; () banked
 11250  0009FE  6FDC               	movwf	(_timerTesteBombas+1)& (0+255),b
 11251  000A00  0E1E               	movlw	30
 11252  000A02  6FDB               	movwf	_timerTesteBombas& (0+255),b
 11253                           
 11254                           ; BSR set to: 0
 11255                           ;controle.h: 163: etapaTesteBombas = 1;
 11256  000A04  0E01               	movlw	1
 11257  000A06  D125               	goto	L27
 11258  000A08  FFFF               	dw	65535	; assembler added errata NOP
 11259                           
 11260                           ;controle.h: 166: drenarPressao();
 11261                           
 11262                           ; BSR set to: 0
 11263  000A0A  EC3F  F037         	call	_drenarPressao	;wreg free
 11264                           
 11265                           ;controle.h: 167: if (pressao <= (sp_pressao_rede - 10)) {
 11266  000A0E  0EF6               	movlw	246
 11267  000A10  0100               	movlb	0	; () banked
 11268  000A12  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11269  000A14  0EFF               	movlw	255
 11270  000A16  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11271  000A18  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 11272  000A1A  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11273  000A1C  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11274  000A1E  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11275  000A20  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11276  000A22  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11277  000A24  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11278  000A26  51F8               	movf	_pressao& (0+255),w,b
 11279  000A28  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11280  000A2A  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11281  000A2C  0A80               	xorlw	128
 11282  000A2E  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11283  000A30  51F9               	movf	(_pressao+1)& (0+255),w,b
 11284  000A32  0A80               	xorlw	128
 11285  000A34  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11286  000A36  A0D8               	btfss	status,0,c
 11287  000A38  D1DA               	goto	l531
 11288                           
 11289                           ; BSR set to: 0
 11290                           ;controle.h: 168: shift[2] = 0;
 11291  000A3A  0E00               	movlw	0
 11292  000A3C  6E46               	movwf	_shift+2,c
 11293                           
 11294                           ;controle.h: 169: shift[6] = 1;
 11295  000A3E  0E01               	movlw	1
 11296  000A40  6E4A               	movwf	_shift+6,c
 11297                           
 11298                           ;controle.h: 170: etapaTesteBombas = 2;
 11299  000A42  0E02               	movlw	2
 11300  000A44  D04C               	goto	L33
 11301  000A46  FFFF               	dw	65535	; assembler added errata NOP
 11302                           
 11303                           ;controle.h: 175: sprintf(line4, "Bomba Jockey...");
 11304                           
 11305                           ; BSR set to: 0
 11306  000A48  0E3C               	movlw	low _line4
 11307  000A4A  0100               	movlb	0	; () banked
 11308  000A4C  6FA1               	movwf	sprintf@wh& (0+255),b
 11309  000A4E  0E01               	movlw	high _line4
 11310  000A50  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11311  000A52  0ED2               	movlw	low STR_41
 11312  000A54  6FA3               	movwf	sprintf@f& (0+255),b
 11313  000A56  0E7D               	movlw	high STR_41
 11314  000A58  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11315  000A5A  EC95  F039         	call	_sprintf	;wreg free
 11316                           
 11317                           ;controle.h: 176: if (pressao >= sp_pressao_rede) {
 11318  000A5E  0100               	movlb	0	; () banked
 11319  000A60  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 11320  000A62  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11321  000A64  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11322  000A66  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11323  000A68  5DF8               	subwf	_pressao& (0+255),w,b
 11324  000A6A  51F9               	movf	(_pressao+1)& (0+255),w,b
 11325  000A6C  0A80               	xorlw	128
 11326  000A6E  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11327  000A70  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11328  000A72  0A80               	xorlw	128
 11329  000A74  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11330  000A76  A0D8               	btfss	status,0,c
 11331  000A78  D006               	goto	l535
 11332                           
 11333                           ; BSR set to: 0
 11334                           ;controle.h: 177: shift[6] = 0;
 11335  000A7A  0E00               	movlw	0
 11336  000A7C  6E4A               	movwf	_shift+6,c
 11337                           
 11338                           ;controle.h: 178: status_jockey = 1;
 11339  000A7E  0E01               	movlw	1
 11340  000A80  6FFD               	movwf	_status_jockey& (0+255),b
 11341                           
 11342                           ;controle.h: 179: etapaTesteBombas = 3;
 11343  000A82  0E03               	movlw	3
 11344  000A84  6E72               	movwf	_etapaTesteBombas,c
 11345  000A86                     l535:
 11346  000A86  FFFF               	dw	65535	; assembler added errata NOP
 11347                           
 11348                           ; BSR set to: 0
 11349                           ;controle.h: 180: }
 11350                           ;controle.h: 181: if (!timerTesteBombas) {
 11351                           
 11352                           ; BSR set to: 0
 11353  000A88  51DB               	movf	_timerTesteBombas& (0+255),w,b
 11354  000A8A  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11355  000A8C  A4D8               	btfss	status,2,c
 11356  000A8E  D1AF               	goto	l531
 11357                           
 11358                           ; BSR set to: 0
 11359                           ;controle.h: 182: status_jockey = 0;
 11360  000A90  0E00               	movlw	0
 11361  000A92  6FFD               	movwf	_status_jockey& (0+255),b
 11362                           
 11363                           ;controle.h: 183: etapaTesteBombas = 3;
 11364  000A94  0E03               	movlw	3
 11365  000A96  D051               	goto	L34
 11366  000A98  FFFF               	dw	65535	; assembler added errata NOP
 11367                           
 11368                           ;controle.h: 188: shift[2] = 1;
 11369                           
 11370                           ; BSR set to: 0
 11371  000A9A  0E01               	movlw	1
 11372  000A9C  6E46               	movwf	_shift+2,c
 11373                           
 11374                           ;controle.h: 189: etapaTesteBombas = 4;
 11375  000A9E  0E04               	movlw	4
 11376  000AA0  D0D8               	goto	L27
 11377  000AA2  FFFF               	dw	65535	; assembler added errata NOP
 11378                           
 11379                           ;controle.h: 192: drenarPressao();
 11380  000AA4  EC3F  F037         	call	_drenarPressao	;wreg free
 11381                           
 11382                           ;controle.h: 193: if (pressao <= (sp_pressao_rede - 10)) {
 11383  000AA8  0EF6               	movlw	246
 11384  000AAA  0100               	movlb	0	; () banked
 11385  000AAC  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11386  000AAE  0EFF               	movlw	255
 11387  000AB0  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11388  000AB2  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 11389  000AB4  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11390  000AB6  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11391  000AB8  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11392  000ABA  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11393  000ABC  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11394  000ABE  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11395  000AC0  51F8               	movf	_pressao& (0+255),w,b
 11396  000AC2  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11397  000AC4  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11398  000AC6  0A80               	xorlw	128
 11399  000AC8  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11400  000ACA  51F9               	movf	(_pressao+1)& (0+255),w,b
 11401  000ACC  0A80               	xorlw	128
 11402  000ACE  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11403  000AD0  A0D8               	btfss	status,0,c
 11404  000AD2  D18D               	goto	l531
 11405                           
 11406                           ; BSR set to: 0
 11407                           ;controle.h: 194: shift[5] = 1;
 11408  000AD4  0E01               	movlw	1
 11409  000AD6  6E49               	movwf	_shift+5,c
 11410                           
 11411                           ;controle.h: 195: shift[2] = 0;
 11412  000AD8  0E00               	movlw	0
 11413  000ADA  6E46               	movwf	_shift+2,c
 11414                           
 11415                           ;controle.h: 196: etapaTesteBombas = 5;
 11416  000ADC  0E05               	movlw	5
 11417  000ADE                     L33:
 11418  000ADE  FFFF               	dw	65535	; assembler added errata NOP
 11419  000AE0  6E72               	movwf	_etapaTesteBombas,c
 11420                           
 11421                           ;controle.h: 197: timerTesteBombas = 50;
 11422  000AE2  0E00               	movlw	0
 11423  000AE4  6FDC               	movwf	(_timerTesteBombas+1)& (0+255),b
 11424  000AE6  0E32               	movlw	50
 11425  000AE8  D0C5               	goto	L26
 11426  000AEA  FFFF               	dw	65535	; assembler added errata NOP
 11427                           
 11428                           ;controle.h: 201: sprintf(line4, "Bomba Principal...");
 11429                           
 11430                           ; BSR set to: 0
 11431  000AEC  0E3C               	movlw	low _line4
 11432  000AEE  0100               	movlb	0	; () banked
 11433  000AF0  6FA1               	movwf	sprintf@wh& (0+255),b
 11434  000AF2  0E01               	movlw	high _line4
 11435  000AF4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11436  000AF6  0ED8               	movlw	low STR_42
 11437  000AF8  6FA3               	movwf	sprintf@f& (0+255),b
 11438  000AFA  0E7C               	movlw	high STR_42
 11439  000AFC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11440  000AFE  EC95  F039         	call	_sprintf	;wreg free
 11441                           
 11442                           ;controle.h: 202: if (pressao >= sp_pressao_rede) {
 11443  000B02  0100               	movlb	0	; () banked
 11444  000B04  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 11445  000B06  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11446  000B08  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11447  000B0A  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11448  000B0C  5DF8               	subwf	_pressao& (0+255),w,b
 11449  000B0E  51F9               	movf	(_pressao+1)& (0+255),w,b
 11450  000B10  0A80               	xorlw	128
 11451  000B12  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11452  000B14  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11453  000B16  0A80               	xorlw	128
 11454  000B18  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11455  000B1A  A0D8               	btfss	status,0,c
 11456  000B1C  D006               	goto	l541
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;controle.h: 203: shift[5] = 0;
 11460  000B1E  0E00               	movlw	0
 11461  000B20  6E49               	movwf	_shift+5,c
 11462                           
 11463                           ;controle.h: 204: status_principal = 1;
 11464  000B22  0E01               	movlw	1
 11465  000B24  6FFC               	movwf	_status_principal& (0+255),b
 11466                           
 11467                           ;controle.h: 205: etapaTesteBombas = 6;
 11468  000B26  0E06               	movlw	6
 11469  000B28  6E72               	movwf	_etapaTesteBombas,c
 11470  000B2A                     l541:
 11471  000B2A  FFFF               	dw	65535	; assembler added errata NOP
 11472                           
 11473                           ; BSR set to: 0
 11474                           ;controle.h: 206: }
 11475                           ;controle.h: 207: if (!timerTesteBombas) {
 11476                           
 11477                           ; BSR set to: 0
 11478  000B2C  51DB               	movf	_timerTesteBombas& (0+255),w,b
 11479  000B2E  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11480  000B30  A4D8               	btfss	status,2,c
 11481  000B32  D15D               	goto	l531
 11482                           
 11483                           ; BSR set to: 0
 11484                           ;controle.h: 208: status_principal = 0;
 11485  000B34  0E00               	movlw	0
 11486  000B36  6FFC               	movwf	_status_principal& (0+255),b
 11487                           
 11488                           ;controle.h: 209: etapaTesteBombas = 6;
 11489  000B38  0E06               	movlw	6
 11490  000B3A                     L34:
 11491  000B3A  FFFF               	dw	65535	; assembler added errata NOP
 11492  000B3C  6E72               	movwf	_etapaTesteBombas,c
 11493                           
 11494                           ;controle.h: 210: timerTesteBombas = 30;
 11495  000B3E  0E00               	movlw	0
 11496  000B40  6FDC               	movwf	(_timerTesteBombas+1)& (0+255),b
 11497  000B42  0E1E               	movlw	30
 11498  000B44  D097               	goto	L26
 11499  000B46  FFFF               	dw	65535	; assembler added errata NOP
 11500                           
 11501                           ;controle.h: 214: shift[2] = 1;
 11502                           
 11503                           ; BSR set to: 0
 11504  000B48  0E01               	movlw	1
 11505  000B4A  6E46               	movwf	_shift+2,c
 11506                           
 11507                           ;controle.h: 215: etapaTesteBombas = 7;
 11508  000B4C  0E07               	movlw	7
 11509  000B4E  D081               	goto	L27
 11510  000B50  FFFF               	dw	65535	; assembler added errata NOP
 11511                           
 11512                           ;controle.h: 218: drenarPressao();
 11513  000B52  EC3F  F037         	call	_drenarPressao	;wreg free
 11514                           
 11515                           ;controle.h: 219: if (pressao <= (sp_pressao_rede - 10)) {
 11516  000B56  0EF6               	movlw	246
 11517  000B58  0100               	movlb	0	; () banked
 11518  000B5A  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11519  000B5C  0EFF               	movlw	255
 11520  000B5E  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11521  000B60  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 11522  000B62  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11523  000B64  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11524  000B66  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11525  000B68  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11526  000B6A  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11527  000B6C  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11528  000B6E  51F8               	movf	_pressao& (0+255),w,b
 11529  000B70  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11530  000B72  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11531  000B74  0A80               	xorlw	128
 11532  000B76  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11533  000B78  51F9               	movf	(_pressao+1)& (0+255),w,b
 11534  000B7A  0A80               	xorlw	128
 11535  000B7C  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11536  000B7E  A0D8               	btfss	status,0,c
 11537  000B80  D136               	goto	l531
 11538                           
 11539                           ; BSR set to: 0
 11540                           ;controle.h: 220: shift[2] = 0;
 11541  000B82  0E00               	movlw	0
 11542  000B84  6E46               	movwf	_shift+2,c
 11543                           
 11544                           ;controle.h: 221: etapaTesteBombas = 8;
 11545  000B86  0E08               	movlw	8
 11546  000B88  6E72               	movwf	_etapaTesteBombas,c
 11547                           
 11548                           ; BSR set to: 0
 11549                           ;controle.h: 222: timerTesteBombas = tempo_limite_estacionaria;
 11550  000B8A  C0E6  F0DB         	movff	_tempo_limite_estacionaria,_timerTesteBombas
 11551  000B8E  6BDC               	clrf	(_timerTesteBombas+1)& (0+255),b
 11552                           
 11553                           ; BSR set to: 0
 11554                           ;controle.h: 223: }
 11555                           ;controle.h: 224: break;
 11556  000B90  D12E               	goto	l531
 11557  000B92  FFFF               	dw	65535	; assembler added errata NOP
 11558                           
 11559                           ;controle.h: 226: sprintf(line4, "Bomba Combustao...");
 11560                           
 11561                           ; BSR set to: 0
 11562  000B94  0E3C               	movlw	low _line4
 11563  000B96  0100               	movlb	0	; () banked
 11564  000B98  6FA1               	movwf	sprintf@wh& (0+255),b
 11565  000B9A  0E01               	movlw	high _line4
 11566  000B9C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11567  000B9E  0EEB               	movlw	low STR_43
 11568  000BA0  6FA3               	movwf	sprintf@f& (0+255),b
 11569  000BA2  0E7C               	movlw	high STR_43
 11570  000BA4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11571  000BA6  EC95  F039         	call	_sprintf	;wreg free
 11572                           
 11573                           ;controle.h: 227: partidaBombaEstacionaria(1);
 11574  000BAA  0E01               	movlw	1
 11575  000BAC  EC84  F01C         	call	_partidaBombaEstacionaria
 11576                           
 11577                           ;controle.h: 229: if (flagEstacionariaLigada || pressao >= sp_pressao_rede) {
 11578  000BB0  0100               	movlb	0	; () banked
 11579  000BB2  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 11580  000BB4  A4D8               	btfss	status,2,c
 11581  000BB6  D00D               	goto	u7430
 11582                           
 11583                           ; BSR set to: 0
 11584  000BB8  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 11585  000BBA  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11586  000BBC  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11587  000BBE  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11588  000BC0  5DF8               	subwf	_pressao& (0+255),w,b
 11589  000BC2  51F9               	movf	(_pressao+1)& (0+255),w,b
 11590  000BC4  0A80               	xorlw	128
 11591  000BC6  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11592  000BC8  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11593  000BCA  0A80               	xorlw	128
 11594  000BCC  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11595  000BCE  A0D8               	btfss	status,0,c
 11596  000BD0  D008               	goto	l547
 11597  000BD2                     u7430:
 11598  000BD2  FFFF               	dw	65535	; assembler added errata NOP
 11599                           
 11600                           ; BSR set to: 0
 11601                           ;controle.h: 230: status_estacionaria = 1;
 11602                           
 11603                           ; BSR set to: 0
 11604  000BD4  0E01               	movlw	1
 11605  000BD6  6FFB               	movwf	_status_estacionaria& (0+255),b
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;controle.h: 231: timerTesteBombas = tempo_limite_teste_estacionaria;
 11609  000BD8  C06B  F0DB         	movff	_tempo_limite_teste_estacionaria,_timerTesteBombas
 11610  000BDC  6BDC               	clrf	(_timerTesteBombas+1)& (0+255),b
 11611                           
 11612                           ;controle.h: 232: etapaTesteBombas = 9;
 11613  000BDE  0E09               	movlw	9
 11614  000BE0  6E72               	movwf	_etapaTesteBombas,c
 11615  000BE2                     l547:
 11616  000BE2  FFFF               	dw	65535	; assembler added errata NOP
 11617                           
 11618                           ; BSR set to: 0
 11619                           ;controle.h: 233: }
 11620                           ;controle.h: 234: if (status_estacionaria == 0 || !timerTesteBombas) {
 11621  000BE4  51FB               	movf	_status_estacionaria& (0+255),w,b
 11622  000BE6  B4D8               	btfsc	status,2,c
 11623  000BE8  D004               	goto	u7450
 11624                           
 11625                           ; BSR set to: 0
 11626  000BEA  51DB               	movf	_timerTesteBombas& (0+255),w,b
 11627  000BEC  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11628  000BEE  A4D8               	btfss	status,2,c
 11629  000BF0  D0FE               	goto	l531
 11630  000BF2                     u7450:
 11631  000BF2  FFFF               	dw	65535	; assembler added errata NOP
 11632                           
 11633                           ; BSR set to: 0
 11634                           ;controle.h: 235: etapaTesteBombas = 10;
 11635                           
 11636                           ; BSR set to: 0
 11637  000BF4  0E0A               	movlw	10
 11638  000BF6  6E72               	movwf	_etapaTesteBombas,c
 11639                           
 11640                           ;controle.h: 236: status_estacionaria = 0;
 11641  000BF8  0E00               	movlw	0
 11642  000BFA  6FFB               	movwf	_status_estacionaria& (0+255),b
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;controle.h: 237: }
 11646                           ;controle.h: 238: break;
 11647  000BFC  D0F8               	goto	l531
 11648  000BFE                     l553:
 11649  000BFE  FFFF               	dw	65535	; assembler added errata NOP
 11650                           
 11651                           ;controle.h: 240: sprintf(line4, "Bomba %s", !PORTAbits.RA5 ? "Ligada...": "Religando...
      +                          ");
 11652  000C00  AA80               	btfss	3968,5,c	;volatile
 11653  000C02  D005               	goto	l555
 11654  000C04  0EA0               	movlw	low STR_46
 11655  000C06  0100               	movlb	0	; () banked
 11656  000C08  6FD1               	movwf	_acaoTesteBombas$1305& (0+255),b
 11657  000C0A  0E7E               	movlw	high STR_46
 11658  000C0C  D005               	goto	L28
 11659  000C0E                     l555:
 11660  000C0E  FFFF               	dw	65535	; assembler added errata NOP
 11661                           
 11662                           ; BSR set to: 0
 11663  000C10  0E43               	movlw	low STR_45
 11664  000C12  0100               	movlb	0	; () banked
 11665  000C14  6FD1               	movwf	_acaoTesteBombas$1305& (0+255),b
 11666  000C16  0E7F               	movlw	high STR_45
 11667  000C18                     L28:
 11668  000C18  FFFF               	dw	65535	; assembler added errata NOP
 11669  000C1A  6FD2               	movwf	(_acaoTesteBombas$1305+1)& (0+255),b
 11670                           
 11671                           ; BSR set to: 0
 11672                           
 11673                           ; BSR set to: 0
 11674  000C1C  0E3C               	movlw	low _line4
 11675  000C1E  6FA1               	movwf	sprintf@wh& (0+255),b
 11676  000C20  0E01               	movlw	high _line4
 11677  000C22  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11678  000C24  0E91               	movlw	low STR_44
 11679  000C26  6FA3               	movwf	sprintf@f& (0+255),b
 11680  000C28  0E7F               	movlw	high STR_44
 11681  000C2A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11682  000C2C  C0D1  F0A5         	movff	_acaoTesteBombas$1305,?_sprintf+4
 11683  000C30  C0D2  F0A6         	movff	_acaoTesteBombas$1305+1,?_sprintf+5
 11684  000C34  EC95  F039         	call	_sprintf	;wreg free
 11685                           
 11686                           ;controle.h: 241: partidaBombaEstacionaria(1);
 11687  000C38  0E01               	movlw	1
 11688  000C3A  EC84  F01C         	call	_partidaBombaEstacionaria
 11689                           
 11690                           ;controle.h: 242: if (!timerTesteBombas || status_estacionaria == 0) {
 11691  000C3E  0100               	movlb	0	; () banked
 11692  000C40  51DB               	movf	_timerTesteBombas& (0+255),w,b
 11693  000C42  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11694  000C44  B4D8               	btfsc	status,2,c
 11695  000C46  D003               	goto	u7480
 11696                           
 11697                           ; BSR set to: 0
 11698  000C48  51FB               	movf	_status_estacionaria& (0+255),w,b
 11699  000C4A  A4D8               	btfss	status,2,c
 11700  000C4C  D0D0               	goto	l531
 11701  000C4E                     u7480:
 11702  000C4E  FFFF               	dw	65535	; assembler added errata NOP
 11703                           
 11704                           ; BSR set to: 0
 11705                           ;controle.h: 243: etapaTesteBombas = 10;
 11706                           
 11707                           ; BSR set to: 0
 11708  000C50  0E0A               	movlw	10
 11709  000C52                     L27:
 11710  000C52  FFFF               	dw	65535	; assembler added errata NOP
 11711  000C54  6E72               	movwf	_etapaTesteBombas,c
 11712                           
 11713                           ; BSR set to: 0
 11714                           ;controle.h: 244: }
 11715                           ;controle.h: 245: break;
 11716  000C56  D0CB               	goto	l531
 11717  000C58  FFFF               	dw	65535	; assembler added errata NOP
 11718                           
 11719                           ;controle.h: 247: salvarLOG();
 11720                           
 11721                           ; BSR set to: 0
 11722  000C5A  EC24  F01E         	call	_salvarLOG	;wreg free
 11723                           
 11724                           ;controle.h: 248: partidaBombaEstacionaria(2);
 11725  000C5E  0E02               	movlw	2
 11726  000C60  EC84  F01C         	call	_partidaBombaEstacionaria
 11727                           
 11728                           ;controle.h: 249: clearShiftREG();
 11729  000C64  ECAA  F037         	call	_clearShiftREG	;wreg free
 11730                           
 11731                           ;controle.h: 250: etapaTesteBombas = 11;
 11732  000C68  0E0B               	movlw	11
 11733  000C6A  6E72               	movwf	_etapaTesteBombas,c
 11734                           
 11735                           ;controle.h: 251: timerTesteBombas = 10;
 11736  000C6C  0E00               	movlw	0
 11737  000C6E  0100               	movlb	0	; () banked
 11738  000C70  6FDC               	movwf	(_timerTesteBombas+1)& (0+255),b
 11739  000C72  0E0A               	movlw	10
 11740  000C74                     L26:
 11741  000C74  FFFF               	dw	65535	; assembler added errata NOP
 11742  000C76  6FDB               	movwf	_timerTesteBombas& (0+255),b
 11743                           
 11744                           ;controle.h: 252: break;
 11745  000C78  D0BA               	goto	l531
 11746  000C7A  FFFF               	dw	65535	; assembler added errata NOP
 11747                           
 11748                           ;controle.h: 254: sprintf(&line1[2], "Teste Concluido!");
 11749                           
 11750                           ; BSR set to: 0
 11751  000C7C  0E7D               	movlw	low (_line1+2)
 11752  000C7E  0100               	movlb	0	; () banked
 11753  000C80  6FA1               	movwf	sprintf@wh& (0+255),b
 11754  000C82  0E01               	movlw	high (_line1+2)
 11755  000C84  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11756  000C86  0E7E               	movlw	low STR_47
 11757  000C88  6FA3               	movwf	sprintf@f& (0+255),b
 11758  000C8A  0E7D               	movlw	high STR_47
 11759  000C8C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11760  000C8E  EC95  F039         	call	_sprintf	;wreg free
 11761                           
 11762                           ;controle.h: 255: sprintf(line2, "JOKEY : %s", status_jockey == 1 ? "OK" : "ERRO");
 11763  000C92  0100               	movlb	0	; () banked
 11764  000C94  05FD               	decf	_status_jockey& (0+255),w,b
 11765  000C96  B4D8               	btfsc	status,2,c
 11766  000C98  D004               	goto	l564
 11767                           
 11768                           ; BSR set to: 0
 11769  000C9A  0EE2               	movlw	low STR_50
 11770  000C9C  6FD3               	movwf	_acaoTesteBombas$1313& (0+255),b
 11771  000C9E  0E7F               	movlw	high STR_50
 11772  000CA0  D004               	goto	L29
 11773  000CA2                     l564:
 11774  000CA2  FFFF               	dw	65535	; assembler added errata NOP
 11775                           
 11776                           ; BSR set to: 0
 11777                           
 11778                           ; BSR set to: 0
 11779  000CA4  0EF9               	movlw	low STR_5
 11780  000CA6  6FD3               	movwf	_acaoTesteBombas$1313& (0+255),b
 11781  000CA8  0E7F               	movlw	high STR_5
 11782  000CAA                     L29:
 11783  000CAA  FFFF               	dw	65535	; assembler added errata NOP
 11784  000CAC  6FD4               	movwf	(_acaoTesteBombas$1313+1)& (0+255),b
 11785                           
 11786                           ; BSR set to: 0
 11787                           
 11788                           ; BSR set to: 0
 11789  000CAE  0E66               	movlw	low _line2
 11790  000CB0  6FA1               	movwf	sprintf@wh& (0+255),b
 11791  000CB2  0E01               	movlw	high _line2
 11792  000CB4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11793  000CB6  0E2D               	movlw	low STR_48
 11794  000CB8  6FA3               	movwf	sprintf@f& (0+255),b
 11795  000CBA  0E7F               	movlw	high STR_48
 11796  000CBC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11797  000CBE  C0D3  F0A5         	movff	_acaoTesteBombas$1313,?_sprintf+4
 11798  000CC2  C0D4  F0A6         	movff	_acaoTesteBombas$1313+1,?_sprintf+5
 11799  000CC6  EC95  F039         	call	_sprintf	;wreg free
 11800                           
 11801                           ;controle.h: 256: sprintf(line3, "PRINCIPAL : %s", status_principal == 1 ? "OK" : "ERRO"
      +                          );
 11802  000CCA  0100               	movlb	0	; () banked
 11803  000CCC  05FC               	decf	_status_principal& (0+255),w,b
 11804  000CCE  B4D8               	btfsc	status,2,c
 11805  000CD0  D004               	goto	l568
 11806                           
 11807                           ; BSR set to: 0
 11808  000CD2  0EE2               	movlw	low STR_50
 11809  000CD4  6FD5               	movwf	_acaoTesteBombas$1318& (0+255),b
 11810  000CD6  0E7F               	movlw	high STR_50
 11811  000CD8  D004               	goto	L30
 11812  000CDA                     l568:
 11813  000CDA  FFFF               	dw	65535	; assembler added errata NOP
 11814                           
 11815                           ; BSR set to: 0
 11816                           
 11817                           ; BSR set to: 0
 11818  000CDC  0EF9               	movlw	low STR_5
 11819  000CDE  6FD5               	movwf	_acaoTesteBombas$1318& (0+255),b
 11820  000CE0  0E7F               	movlw	high STR_5
 11821  000CE2                     L30:
 11822  000CE2  FFFF               	dw	65535	; assembler added errata NOP
 11823  000CE4  6FD6               	movwf	(_acaoTesteBombas$1318+1)& (0+255),b
 11824                           
 11825                           ; BSR set to: 0
 11826                           
 11827                           ; BSR set to: 0
 11828  000CE6  0E51               	movlw	low _line3
 11829  000CE8  6FA1               	movwf	sprintf@wh& (0+255),b
 11830  000CEA  0E01               	movlw	high _line3
 11831  000CEC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11832  000CEE  0E1F               	movlw	low STR_51
 11833  000CF0  6FA3               	movwf	sprintf@f& (0+255),b
 11834  000CF2  0E7E               	movlw	high STR_51
 11835  000CF4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11836  000CF6  C0D5  F0A5         	movff	_acaoTesteBombas$1318,?_sprintf+4
 11837  000CFA  C0D6  F0A6         	movff	_acaoTesteBombas$1318+1,?_sprintf+5
 11838  000CFE  EC95  F039         	call	_sprintf	;wreg free
 11839                           
 11840                           ;controle.h: 257: sprintf(line4, "COMBUSTAO : %s", status_estacionaria == 1 ? "OK" : "ER
      +                          RO");
 11841  000D02  0100               	movlb	0	; () banked
 11842  000D04  05FB               	decf	_status_estacionaria& (0+255),w,b
 11843  000D06  B4D8               	btfsc	status,2,c
 11844  000D08  D004               	goto	l572
 11845                           
 11846                           ; BSR set to: 0
 11847  000D0A  0EE2               	movlw	low STR_50
 11848  000D0C  6FD7               	movwf	_acaoTesteBombas$1323& (0+255),b
 11849  000D0E  0E7F               	movlw	high STR_50
 11850  000D10  D004               	goto	L31
 11851  000D12                     l572:
 11852  000D12  FFFF               	dw	65535	; assembler added errata NOP
 11853                           
 11854                           ; BSR set to: 0
 11855                           
 11856                           ; BSR set to: 0
 11857  000D14  0EF9               	movlw	low STR_5
 11858  000D16  6FD7               	movwf	_acaoTesteBombas$1323& (0+255),b
 11859  000D18  0E7F               	movlw	high STR_5
 11860  000D1A                     L31:
 11861  000D1A  FFFF               	dw	65535	; assembler added errata NOP
 11862  000D1C  6FD8               	movwf	(_acaoTesteBombas$1323+1)& (0+255),b
 11863                           
 11864                           ; BSR set to: 0
 11865                           
 11866                           ; BSR set to: 0
 11867  000D1E  0E3C               	movlw	low _line4
 11868  000D20  6FA1               	movwf	sprintf@wh& (0+255),b
 11869  000D22  0E01               	movlw	high _line4
 11870  000D24  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11871  000D26  0E2E               	movlw	low STR_54
 11872  000D28  6FA3               	movwf	sprintf@f& (0+255),b
 11873  000D2A  0E7E               	movlw	high STR_54
 11874  000D2C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11875  000D2E  C0D7  F0A5         	movff	_acaoTesteBombas$1323,?_sprintf+4
 11876  000D32  C0D8  F0A6         	movff	_acaoTesteBombas$1323+1,?_sprintf+5
 11877  000D36  EC95  F039         	call	_sprintf	;wreg free
 11878                           
 11879                           ;controle.h: 258: if (!timerTesteBombas) {
 11880  000D3A  0100               	movlb	0	; () banked
 11881  000D3C  51DB               	movf	_timerTesteBombas& (0+255),w,b
 11882  000D3E  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11883  000D40  A4D8               	btfss	status,2,c
 11884  000D42  D055               	goto	l531
 11885                           
 11886                           ; BSR set to: 0
 11887                           ;controle.h: 259: etapaTesteBombas = 12;
 11888  000D44  0E0C               	movlw	12
 11889  000D46  6E72               	movwf	_etapaTesteBombas,c
 11890                           
 11891                           ;controle.h: 260: timerTesteBombas = 120;
 11892  000D48  0E00               	movlw	0
 11893  000D4A  6FDC               	movwf	(_timerTesteBombas+1)& (0+255),b
 11894  000D4C  0E78               	movlw	120
 11895  000D4E  6FDB               	movwf	_timerTesteBombas& (0+255),b
 11896                           
 11897                           ;controle.h: 261: timerReenvioSMS = 0;
 11898  000D50  0E00               	movlw	0
 11899  000D52  6FF6               	movwf	_timerReenvioSMS& (0+255),b
 11900                           
 11901                           ;controle.h: 262: gsmOcupado = 1;
 11902  000D54  0E01               	movlw	1
 11903  000D56  D017               	goto	L32
 11904  000D58  FFFF               	dw	65535	; assembler added errata NOP
 11905                           
 11906                           ;controle.h: 266: sprintf(&line4[2], "enviando SMS...");
 11907                           
 11908                           ; BSR set to: 0
 11909  000D5A  0E3E               	movlw	low (_line4+2)
 11910  000D5C  0100               	movlb	0	; () banked
 11911  000D5E  6FA1               	movwf	sprintf@wh& (0+255),b
 11912  000D60  0E01               	movlw	high (_line4+2)
 11913  000D62  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11914  000D64  0EC2               	movlw	low STR_57
 11915  000D66  6FA3               	movwf	sprintf@f& (0+255),b
 11916  000D68  0E7D               	movlw	high STR_57
 11917  000D6A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11918  000D6C  EC95  F039         	call	_sprintf	;wreg free
 11919                           
 11920                           ;controle.h: 267: enviaSMS(2);
 11921  000D70  0E02               	movlw	2
 11922  000D72  ECF1  F00A         	call	_enviaSMS
 11923                           
 11924                           ;controle.h: 268: if (!timerTesteBombas) {
 11925  000D76  0100               	movlb	0	; () banked
 11926  000D78  51DB               	movf	_timerTesteBombas& (0+255),w,b
 11927  000D7A  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11928  000D7C  A4D8               	btfss	status,2,c
 11929  000D7E  D037               	goto	l531
 11930                           
 11931                           ; BSR set to: 0
 11932                           ;controle.h: 269: menu_posi = 0;
 11933  000D80  0E00               	movlw	0
 11934  000D82  6FE0               	movwf	_menu_posi& (0+255),b
 11935                           
 11936                           ;controle.h: 270: gsmOcupado = 0;
 11937  000D84  0E00               	movlw	0
 11938  000D86                     L32:
 11939  000D86  FFFF               	dw	65535	; assembler added errata NOP
 11940  000D88  6FF4               	movwf	_gsmOcupado& (0+255),b
 11941                           
 11942                           ; BSR set to: 0
 11943                           ;controle.h: 271: }
 11944                           ;controle.h: 272: break;
 11945  000D8A  D031               	goto	l531
 11946  000D8C  FFFF               	dw	65535	; assembler added errata NOP
 11947                           
 11948                           ;controle.h: 274: etapaTesteBombas = 0;
 11949                           
 11950                           ; BSR set to: 0
 11951  000D8E  0E00               	movlw	0
 11952  000D90  6E72               	movwf	_etapaTesteBombas,c
 11953                           
 11954                           ;controle.h: 275: menu_posi = 0;
 11955  000D92  0E00               	movlw	0
 11956  000D94  0100               	movlb	0	; () banked
 11957  000D96  6FE0               	movwf	_menu_posi& (0+255),b
 11958                           
 11959                           ; BSR set to: 0
 11960                           ;controle.h: 277: }
 11961                           
 11962                           ;controle.h: 276: break;
 11963  000D98  D02A               	goto	l531
 11964  000D9A                     l529:
 11965  000D9A  FFFF               	dw	65535	; assembler added errata NOP
 11966                           
 11967                           ; BSR set to: 0
 11968  000D9C  5072               	movf	_etapaTesteBombas,w,c
 11969                           
 11970                           ; Switch size 1, requested type "space"
 11971                           ; Number of cases is 13, Range of values is 0 to 12
 11972                           ; switch strategies available:
 11973                           ; Name         Instructions Cycles
 11974                           ; simple_byte           40    21 (average)
 11975                           ;	Chosen strategy is simple_byte
 11976  000D9E  0A00               	xorlw	0	; case 0
 11977  000DA0  B4D8               	btfsc	status,2,c
 11978  000DA2  D620               	goto	l530
 11979  000DA4  0A01               	xorlw	1	; case 1
 11980  000DA6  B4D8               	btfsc	status,2,c
 11981  000DA8  D62F               	goto	l532
 11982  000DAA  0A03               	xorlw	3	; case 2
 11983  000DAC  B4D8               	btfsc	status,2,c
 11984  000DAE  D64B               	goto	l534
 11985  000DB0  0A01               	xorlw	1	; case 3
 11986  000DB2  B4D8               	btfsc	status,2,c
 11987  000DB4  D671               	goto	l537
 11988  000DB6  0A07               	xorlw	7	; case 4
 11989  000DB8  B4D8               	btfsc	status,2,c
 11990  000DBA  D673               	goto	l538
 11991  000DBC  0A01               	xorlw	1	; case 5
 11992  000DBE  B4D8               	btfsc	status,2,c
 11993  000DC0  D694               	goto	l540
 11994  000DC2  0A03               	xorlw	3	; case 6
 11995  000DC4  B4D8               	btfsc	status,2,c
 11996  000DC6  D6BF               	goto	l543
 11997  000DC8  0A01               	xorlw	1	; case 7
 11998  000DCA  B4D8               	btfsc	status,2,c
 11999  000DCC  D6C1               	goto	l544
 12000  000DCE  0A0F               	xorlw	15	; case 8
 12001  000DD0  B4D8               	btfsc	status,2,c
 12002  000DD2  D6DF               	goto	l546
 12003  000DD4  0A01               	xorlw	1	; case 9
 12004  000DD6  B4D8               	btfsc	status,2,c
 12005  000DD8  D712               	goto	l553
 12006  000DDA  0A03               	xorlw	3	; case 10
 12007  000DDC  B4D8               	btfsc	status,2,c
 12008  000DDE  D73C               	goto	l561
 12009  000DE0  0A01               	xorlw	1	; case 11
 12010  000DE2  B4D8               	btfsc	status,2,c
 12011  000DE4  D74A               	goto	l562
 12012  000DE6  0A07               	xorlw	7	; case 12
 12013  000DE8  B4D8               	btfsc	status,2,c
 12014  000DEA  D7B6               	goto	l576
 12015  000DEC  D7CF               	goto	l578
 12016  000DEE                     l531:
 12017  000DEE  FFFF               	dw	65535	; assembler added errata NOP
 12018  000DF0  0012               	return		;funcret
 12019  000DF2  FFFF               	dw	65535	; errata NOP
 12020  000DF4                     __end_of_acaoTesteBombas:
 12021                           	opt stack 0
 12022                           tblptru	equ	0xFF8
 12023                           tblptrh	equ	0xFF7
 12024                           tblptrl	equ	0xFF6
 12025                           tablat	equ	0xFF5
 12026                           prodh	equ	0xFF4
 12027                           prodl	equ	0xFF3
 12028                           intcon	equ	0xFF2
 12029                           postinc0	equ	0xFEE
 12030                           wreg	equ	0xFE8
 12031                           postdec1	equ	0xFE5
 12032                           fsr1l	equ	0xFE1
 12033                           indf2	equ	0xFDF
 12034                           postinc2	equ	0xFDE
 12035                           fsr2h	equ	0xFDA
 12036                           fsr2l	equ	0xFD9
 12037                           status	equ	0xFD8
 12038                           
 12039 ;; *************** function _salvarLOG *****************
 12040 ;; Defined at:
 12041 ;;		line 9 in file "logs.h"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;		None
 12044 ;; Auto vars:     Size  Location     Type
 12045 ;;  ultimoLogSal    2   15[BANK0 ] unsigned int 
 12046 ;; Return value:  Size  Location     Type
 12047 ;;                  1    wreg      void 
 12048 ;; Registers used:
 12049 ;;		wreg, status,2, status,0, cstack
 12050 ;; Tracked objects:
 12051 ;;		On entry : 0/0
 12052 ;;		On exit  : 0/0
 12053 ;;		Unchanged: 0/0
 12054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12055 ;;      Params:         0       0       0       0       0       0       0
 12056 ;;      Locals:         0       2       0       0       0       0       0
 12057 ;;      Temps:          0       1       0       0       0       0       0
 12058 ;;      Totals:         0       3       0       0       0       0       0
 12059 ;;Total ram usage:        3 bytes
 12060 ;; Hardware stack levels used:    1
 12061 ;; Hardware stack levels required when called:    9
 12062 ;; This function calls:
 12063 ;;		_readEEPROM_ext
 12064 ;;		_writeEEPROM_ext
 12065 ;; This function is called by:
 12066 ;;		_acaoTesteBombas
 12067 ;; This function uses a non-reentrant model
 12068 ;;
 12069                           
 12070                           	psect	text31
 12071  003C48                     __ptext31:
 12072                           	opt stack 0
 12073  003C48                     _salvarLOG:
 12074                           	opt stack 0
 12075  003C48  FFFF               	dw	65535	; assembler added errata NOP
 12076                           
 12077                           ;logs.h: 10: unsigned int ultimoLogSalvo = readEEPROM_ext(14);
 12078                           
 12079                           ;incstack = 0
 12080  003C4A  0E0E               	movlw	14
 12081  003C4C  EC2D  F03A         	call	_readEEPROM_ext
 12082  003C50  0100               	movlb	0	; () banked
 12083  003C52  6F8E               	movwf	??_salvarLOG& (0+255),b
 12084  003C54  518E               	movf	??_salvarLOG& (0+255),w,b
 12085  003C56  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 12086  003C58  6B90               	clrf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 12087                           
 12088                           ; BSR set to: 0
 12089                           ;logs.h: 11: if (ultimoLogSalvo < 60 || ultimoLogSalvo > 250) {
 12090  003C5A  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 12091  003C5C  E104               	bnz	u6100
 12092  003C5E  0E3C               	movlw	60
 12093  003C60  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12094  003C62  A0D8               	btfss	status,0,c
 12095  003C64  D006               	goto	u6110
 12096  003C66                     u6100:
 12097                           
 12098                           ; BSR set to: 0
 12099  003C66  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 12100  003C68  E105               	bnz	l5854
 12101  003C6A  0EFB               	movlw	251
 12102  003C6C  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12103  003C6E  A0D8               	btfss	status,0,c
 12104  003C70  D005               	goto	l415
 12105  003C72                     u6110:
 12106  003C72  FFFF               	dw	65535	; assembler added errata NOP
 12107  003C74                     l5854:
 12108                           
 12109                           ; BSR set to: 0
 12110                           ;logs.h: 12: ultimoLogSalvo = 60;
 12111  003C74  0E00               	movlw	0
 12112  003C76  6F90               	movwf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 12113  003C78  0E3C               	movlw	60
 12114  003C7A  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 12115  003C7C                     l415:
 12116  003C7C  FFFF               	dw	65535	; assembler added errata NOP
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;logs.h: 13: }
 12120                           ;logs.h: 14: writeEEPROM_ext(ultimoLogSalvo, _dia);
 12121                           
 12122                           ; BSR set to: 0
 12123  003C7E  C0EC  F08C         	movff	__dia,writeEEPROM_ext@data
 12124  003C82  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12125  003C84  EC72  F039         	call	_writeEEPROM_ext
 12126                           
 12127                           ;logs.h: 15: writeEEPROM_ext(++ultimoLogSalvo, _mes);
 12128  003C88  C0EB  F08C         	movff	__mes,writeEEPROM_ext@data
 12129  003C8C  0100               	movlb	0	; () banked
 12130  003C8E  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12131  003C90  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12132  003C92  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12133  003C94  EC72  F039         	call	_writeEEPROM_ext
 12134                           
 12135                           ;logs.h: 16: writeEEPROM_ext(++ultimoLogSalvo, _ano);
 12136  003C98  C0EA  F08C         	movff	__ano,writeEEPROM_ext@data
 12137  003C9C  0100               	movlb	0	; () banked
 12138  003C9E  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12139  003CA0  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12140  003CA2  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12141  003CA4  EC72  F039         	call	_writeEEPROM_ext
 12142                           
 12143                           ;logs.h: 17: writeEEPROM_ext(++ultimoLogSalvo, _hor);
 12144  003CA8  C0ED  F08C         	movff	__hor,writeEEPROM_ext@data
 12145  003CAC  0100               	movlb	0	; () banked
 12146  003CAE  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12147  003CB0  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12148  003CB2  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12149  003CB4  EC72  F039         	call	_writeEEPROM_ext
 12150                           
 12151                           ;logs.h: 18: writeEEPROM_ext(++ultimoLogSalvo, _min);
 12152  003CB8  C0EE  F08C         	movff	__min,writeEEPROM_ext@data
 12153  003CBC  0100               	movlb	0	; () banked
 12154  003CBE  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12155  003CC0  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12156  003CC2  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12157  003CC4  EC72  F039         	call	_writeEEPROM_ext
 12158                           
 12159                           ;logs.h: 19: writeEEPROM_ext(++ultimoLogSalvo, status_jockey);
 12160  003CC8  C0FD  F08C         	movff	_status_jockey,writeEEPROM_ext@data
 12161  003CCC  0100               	movlb	0	; () banked
 12162  003CCE  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12163  003CD0  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12164  003CD2  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12165  003CD4  EC72  F039         	call	_writeEEPROM_ext
 12166                           
 12167                           ;logs.h: 20: writeEEPROM_ext(++ultimoLogSalvo, status_principal);
 12168  003CD8  C0FC  F08C         	movff	_status_principal,writeEEPROM_ext@data
 12169  003CDC  0100               	movlb	0	; () banked
 12170  003CDE  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12171  003CE0  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12172  003CE2  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12173  003CE4  EC72  F039         	call	_writeEEPROM_ext
 12174                           
 12175                           ;logs.h: 21: writeEEPROM_ext(++ultimoLogSalvo, status_estacionaria);
 12176  003CE8  C0FB  F08C         	movff	_status_estacionaria,writeEEPROM_ext@data
 12177  003CEC  0100               	movlb	0	; () banked
 12178  003CEE  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12179  003CF0  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12180  003CF2  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12181  003CF4  EC72  F039         	call	_writeEEPROM_ext
 12182                           
 12183                           ;logs.h: 23: writeEEPROM_ext(14, ++ultimoLogSalvo);
 12184  003CF8  0100               	movlb	0	; () banked
 12185  003CFA  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12186  003CFC  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12187  003CFE  C08F  F08C         	movff	salvarLOG@ultimoLogSalvo,writeEEPROM_ext@data
 12188  003D02  0E0E               	movlw	14
 12189  003D04  EC72  F039         	call	_writeEEPROM_ext
 12190  003D08  0012               	return		;funcret
 12191  003D0A  FFFF               	dw	65535	; errata NOP
 12192  003D0C                     __end_of_salvarLOG:
 12193                           	opt stack 0
 12194                           tblptru	equ	0xFF8
 12195                           tblptrh	equ	0xFF7
 12196                           tblptrl	equ	0xFF6
 12197                           tablat	equ	0xFF5
 12198                           prodh	equ	0xFF4
 12199                           prodl	equ	0xFF3
 12200                           intcon	equ	0xFF2
 12201                           postinc0	equ	0xFEE
 12202                           wreg	equ	0xFE8
 12203                           postdec1	equ	0xFE5
 12204                           fsr1l	equ	0xFE1
 12205                           indf2	equ	0xFDF
 12206                           postinc2	equ	0xFDE
 12207                           fsr2h	equ	0xFDA
 12208                           fsr2l	equ	0xFD9
 12209                           status	equ	0xFD8
 12210                           
 12211 ;; *************** function _writeEEPROM_ext *****************
 12212 ;; Defined at:
 12213 ;;		line 13 in file "eeprom.h"
 12214 ;; Parameters:    Size  Location     Type
 12215 ;;  adress          1    wreg     unsigned char 
 12216 ;;  data            1   12[BANK0 ] unsigned char 
 12217 ;; Auto vars:     Size  Location     Type
 12218 ;;  adress          1   13[BANK0 ] unsigned char 
 12219 ;; Return value:  Size  Location     Type
 12220 ;;                  1    wreg      void 
 12221 ;; Registers used:
 12222 ;;		wreg, status,2, status,0, cstack
 12223 ;; Tracked objects:
 12224 ;;		On entry : 0/0
 12225 ;;		On exit  : 0/0
 12226 ;;		Unchanged: 0/0
 12227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12228 ;;      Params:         0       1       0       0       0       0       0
 12229 ;;      Locals:         0       1       0       0       0       0       0
 12230 ;;      Temps:          0       0       0       0       0       0       0
 12231 ;;      Totals:         0       2       0       0       0       0       0
 12232 ;;Total ram usage:        2 bytes
 12233 ;; Hardware stack levels used:    1
 12234 ;; Hardware stack levels required when called:    8
 12235 ;; This function calls:
 12236 ;;		_I2C_Start
 12237 ;;		_I2C_Stop
 12238 ;;		_I2C_Write
 12239 ;;		_delay
 12240 ;; This function is called by:
 12241 ;;		_salvarLOG
 12242 ;;		_verificarIntervaloTesteBombas
 12243 ;;		_acaoTesteBombas
 12244 ;;		_lerParametros
 12245 ;;		_tela_testeBombas
 12246 ;;		_configuraTelefones
 12247 ;;		_configurarEstacionaria
 12248 ;;		_ajusteSP_Bombas
 12249 ;;		_apagarLOGS
 12250 ;; This function uses a non-reentrant model
 12251 ;;
 12252                           
 12253                           	psect	text32
 12254  0072E4                     __ptext32:
 12255                           	opt stack 0
 12256  0072E4                     _writeEEPROM_ext:
 12257                           	opt stack 0
 12258  0072E4  FFFF               	dw	65535	; assembler added errata NOP
 12259                           
 12260                           ;incstack = 0
 12261                           ;writeEEPROM_ext@adress stored from wreg
 12262  0072E6  0100               	movlb	0	; () banked
 12263  0072E8  6F8D               	movwf	writeEEPROM_ext@adress& (0+255),b
 12264                           
 12265                           ;eeprom.h: 15: I2C_Start();
 12266  0072EA  EC11  F036         	call	_I2C_Start	;wreg free
 12267                           
 12268                           ;eeprom.h: 16: I2C_Write(0xA0);
 12269  0072EE  0E00               	movlw	0
 12270  0072F0  0100               	movlb	0	; () banked
 12271  0072F2  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12272  0072F4  0EA0               	movlw	160
 12273  0072F6  6F8A               	movwf	I2C_Write@d& (0+255),b
 12274  0072F8  EC2A  F036         	call	_I2C_Write	;wreg free
 12275                           
 12276                           ;eeprom.h: 18: I2C_Write(adress);
 12277  0072FC  C08D  F08A         	movff	writeEEPROM_ext@adress,I2C_Write@d
 12278  007300  0100               	movlb	0	; () banked
 12279  007302  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12280  007304  EC2A  F036         	call	_I2C_Write	;wreg free
 12281                           
 12282                           ;eeprom.h: 19: I2C_Write(data);
 12283  007308  C08C  F08A         	movff	writeEEPROM_ext@data,I2C_Write@d
 12284  00730C  0100               	movlb	0	; () banked
 12285  00730E  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12286  007310  EC2A  F036         	call	_I2C_Write	;wreg free
 12287                           
 12288                           ;eeprom.h: 20: I2C_Stop();
 12289  007314  EC17  F036         	call	_I2C_Stop	;wreg free
 12290                           
 12291                           ;eeprom.h: 21: delay(15);
 12292  007318  0E00               	movlw	0
 12293  00731A  0100               	movlb	0	; () banked
 12294  00731C  6F81               	movwf	(delay@x+1)& (0+255),b
 12295  00731E  0E0F               	movlw	15
 12296  007320  6F80               	movwf	delay@x& (0+255),b
 12297  007322  EC74  F037         	call	_delay	;wreg free
 12298  007326  0012               	return		;funcret
 12299  007328  FFFF               	dw	65535	; errata NOP
 12300  00732A                     __end_of_writeEEPROM_ext:
 12301                           	opt stack 0
 12302                           tblptru	equ	0xFF8
 12303                           tblptrh	equ	0xFF7
 12304                           tblptrl	equ	0xFF6
 12305                           tablat	equ	0xFF5
 12306                           prodh	equ	0xFF4
 12307                           prodl	equ	0xFF3
 12308                           intcon	equ	0xFF2
 12309                           postinc0	equ	0xFEE
 12310                           wreg	equ	0xFE8
 12311                           postdec1	equ	0xFE5
 12312                           fsr1l	equ	0xFE1
 12313                           indf2	equ	0xFDF
 12314                           postinc2	equ	0xFDE
 12315                           fsr2h	equ	0xFDA
 12316                           fsr2l	equ	0xFD9
 12317                           status	equ	0xFD8
 12318                           
 12319 ;; *************** function _readEEPROM_ext *****************
 12320 ;; Defined at:
 12321 ;;		line 26 in file "eeprom.h"
 12322 ;; Parameters:    Size  Location     Type
 12323 ;;  adress          1    wreg     unsigned char 
 12324 ;; Auto vars:     Size  Location     Type
 12325 ;;  adress          1   12[BANK0 ] unsigned char 
 12326 ;;  data            1   13[BANK0 ] unsigned char 
 12327 ;; Return value:  Size  Location     Type
 12328 ;;                  1    wreg      unsigned char 
 12329 ;; Registers used:
 12330 ;;		wreg, status,2, status,0, cstack
 12331 ;; Tracked objects:
 12332 ;;		On entry : 0/0
 12333 ;;		On exit  : 0/0
 12334 ;;		Unchanged: 0/0
 12335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12336 ;;      Params:         0       0       0       0       0       0       0
 12337 ;;      Locals:         0       2       0       0       0       0       0
 12338 ;;      Temps:          0       0       0       0       0       0       0
 12339 ;;      Totals:         0       2       0       0       0       0       0
 12340 ;;Total ram usage:        2 bytes
 12341 ;; Hardware stack levels used:    1
 12342 ;; Hardware stack levels required when called:    8
 12343 ;; This function calls:
 12344 ;;		_I2C_Read
 12345 ;;		_I2C_Restart
 12346 ;;		_I2C_Start
 12347 ;;		_I2C_Stop
 12348 ;;		_I2C_Write
 12349 ;; This function is called by:
 12350 ;;		_readEEPROM16_ext
 12351 ;;		_salvarLOG
 12352 ;;		_acaoTesteBombas
 12353 ;;		_lerParametros
 12354 ;;		_dataLoger
 12355 ;; This function uses a non-reentrant model
 12356 ;;
 12357                           
 12358                           	psect	text33
 12359  00745A                     __ptext33:
 12360                           	opt stack 0
 12361  00745A                     _readEEPROM_ext:
 12362                           	opt stack 0
 12363  00745A  FFFF               	dw	65535	; assembler added errata NOP
 12364                           
 12365                           ;incstack = 0
 12366                           ;readEEPROM_ext@adress stored from wreg
 12367  00745C  0100               	movlb	0	; () banked
 12368  00745E  6F8C               	movwf	readEEPROM_ext@adress& (0+255),b
 12369                           
 12370                           ;eeprom.h: 27: I2C_Start();
 12371  007460  EC11  F036         	call	_I2C_Start	;wreg free
 12372                           
 12373                           ;eeprom.h: 28: I2C_Write(0xA0);
 12374  007464  0E00               	movlw	0
 12375  007466  0100               	movlb	0	; () banked
 12376  007468  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12377  00746A  0EA0               	movlw	160
 12378  00746C  6F8A               	movwf	I2C_Write@d& (0+255),b
 12379  00746E  EC2A  F036         	call	_I2C_Write	;wreg free
 12380                           
 12381                           ;eeprom.h: 30: I2C_Write(adress);
 12382  007472  C08C  F08A         	movff	readEEPROM_ext@adress,I2C_Write@d
 12383  007476  0100               	movlb	0	; () banked
 12384  007478  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12385  00747A  EC2A  F036         	call	_I2C_Write	;wreg free
 12386                           
 12387                           ;eeprom.h: 31: I2C_Restart();
 12388  00747E  EC1D  F036         	call	_I2C_Restart	;wreg free
 12389                           
 12390                           ;eeprom.h: 32: I2C_Write(0xA1);
 12391  007482  0E00               	movlw	0
 12392  007484  0100               	movlb	0	; () banked
 12393  007486  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12394  007488  0EA1               	movlw	161
 12395  00748A  6F8A               	movwf	I2C_Write@d& (0+255),b
 12396  00748C  EC2A  F036         	call	_I2C_Write	;wreg free
 12397                           
 12398                           ;eeprom.h: 33: unsigned char data = I2C_Read(0);
 12399  007490  0E00               	movlw	0
 12400  007492  0100               	movlb	0	; () banked
 12401  007494  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
 12402  007496  0E00               	movlw	0
 12403  007498  6F81               	movwf	I2C_Read@a& (0+255),b
 12404  00749A  EC1A  F038         	call	_I2C_Read	;wreg free
 12405  00749E  0100               	movlb	0	; () banked
 12406  0074A0  5181               	movf	?_I2C_Read& (0+255),w,b
 12407  0074A2  6F8D               	movwf	readEEPROM_ext@data& (0+255),b
 12408                           
 12409                           ;eeprom.h: 34: I2C_Stop();
 12410  0074A4  EC17  F036         	call	_I2C_Stop	;wreg free
 12411                           
 12412                           ;eeprom.h: 35: return data;
 12413  0074A8  0100               	movlb	0	; () banked
 12414  0074AA  518D               	movf	readEEPROM_ext@data& (0+255),w,b
 12415                           
 12416                           ; BSR set to: 0
 12417                           
 12418                           ; BSR set to: 0
 12419  0074AC  0012               	return		;funcret
 12420  0074AE  FFFF               	dw	65535	; errata NOP
 12421  0074B0                     __end_of_readEEPROM_ext:
 12422                           	opt stack 0
 12423                           tblptru	equ	0xFF8
 12424                           tblptrh	equ	0xFF7
 12425                           tblptrl	equ	0xFF6
 12426                           tablat	equ	0xFF5
 12427                           prodh	equ	0xFF4
 12428                           prodl	equ	0xFF3
 12429                           intcon	equ	0xFF2
 12430                           postinc0	equ	0xFEE
 12431                           wreg	equ	0xFE8
 12432                           postdec1	equ	0xFE5
 12433                           fsr1l	equ	0xFE1
 12434                           indf2	equ	0xFDF
 12435                           postinc2	equ	0xFDE
 12436                           fsr2h	equ	0xFDA
 12437                           fsr2l	equ	0xFD9
 12438                           status	equ	0xFD8
 12439                           
 12440 ;; *************** function _I2C_Restart *****************
 12441 ;; Defined at:
 12442 ;;		line 31 in file "I2C.c"
 12443 ;; Parameters:    Size  Location     Type
 12444 ;;		None
 12445 ;; Auto vars:     Size  Location     Type
 12446 ;;		None
 12447 ;; Return value:  Size  Location     Type
 12448 ;;                  1    wreg      void 
 12449 ;; Registers used:
 12450 ;;		wreg, status,2, status,0, cstack
 12451 ;; Tracked objects:
 12452 ;;		On entry : 0/0
 12453 ;;		On exit  : 0/0
 12454 ;;		Unchanged: 0/0
 12455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12456 ;;      Params:         0       0       0       0       0       0       0
 12457 ;;      Locals:         0       0       0       0       0       0       0
 12458 ;;      Temps:          0       0       0       0       0       0       0
 12459 ;;      Totals:         0       0       0       0       0       0       0
 12460 ;;Total ram usage:        0 bytes
 12461 ;; Hardware stack levels used:    1
 12462 ;; Hardware stack levels required when called:    7
 12463 ;; This function calls:
 12464 ;;		_I2C_Wait
 12465 ;; This function is called by:
 12466 ;;		_getDS1307TimeDate
 12467 ;;		_readEEPROM_ext
 12468 ;;		_getDS1307Time
 12469 ;; This function uses a non-reentrant model
 12470 ;;
 12471                           
 12472                           	psect	text34
 12473  006C3A                     __ptext34:
 12474                           	opt stack 0
 12475  006C3A                     _I2C_Restart:
 12476                           	opt stack 0
 12477  006C3A  FFFF               	dw	65535	; assembler added errata NOP
 12478                           
 12479                           ;I2C.c: 32: I2C_Wait();
 12480                           
 12481                           ; BSR set to: 0
 12482                           ;incstack = 0
 12483  006C3C  EC62  F036         	call	_I2C_Wait	;wreg free
 12484                           
 12485                           ;I2C.c: 33: RSEN = 1;
 12486  006C40  82C5               	bsf	4037,1,c	;volatile
 12487  006C42  0012               	return		;funcret
 12488  006C44  FFFF               	dw	65535	; errata NOP
 12489  006C46                     __end_of_I2C_Restart:
 12490                           	opt stack 0
 12491                           tblptru	equ	0xFF8
 12492                           tblptrh	equ	0xFF7
 12493                           tblptrl	equ	0xFF6
 12494                           tablat	equ	0xFF5
 12495                           prodh	equ	0xFF4
 12496                           prodl	equ	0xFF3
 12497                           intcon	equ	0xFF2
 12498                           postinc0	equ	0xFEE
 12499                           wreg	equ	0xFE8
 12500                           postdec1	equ	0xFE5
 12501                           fsr1l	equ	0xFE1
 12502                           indf2	equ	0xFDF
 12503                           postinc2	equ	0xFDE
 12504                           fsr2h	equ	0xFDA
 12505                           fsr2l	equ	0xFD9
 12506                           status	equ	0xFD8
 12507                           
 12508 ;; *************** function _I2C_Read *****************
 12509 ;; Defined at:
 12510 ;;		line 47 in file "I2C.c"
 12511 ;; Parameters:    Size  Location     Type
 12512 ;;  a               2    1[BANK0 ] unsigned short 
 12513 ;; Auto vars:     Size  Location     Type
 12514 ;;  temp            2    3[BANK0 ] unsigned short 
 12515 ;; Return value:  Size  Location     Type
 12516 ;;                  2    1[BANK0 ] unsigned short 
 12517 ;; Registers used:
 12518 ;;		wreg, status,2, status,0, cstack
 12519 ;; Tracked objects:
 12520 ;;		On entry : 0/0
 12521 ;;		On exit  : 0/0
 12522 ;;		Unchanged: 0/0
 12523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12524 ;;      Params:         0       2       0       0       0       0       0
 12525 ;;      Locals:         0       2       0       0       0       0       0
 12526 ;;      Temps:          0       0       0       0       0       0       0
 12527 ;;      Totals:         0       4       0       0       0       0       0
 12528 ;;Total ram usage:        4 bytes
 12529 ;; Hardware stack levels used:    1
 12530 ;; Hardware stack levels required when called:    7
 12531 ;; This function calls:
 12532 ;;		_I2C_Wait
 12533 ;; This function is called by:
 12534 ;;		_getDS1307TimeDate
 12535 ;;		_readEEPROM_ext
 12536 ;;		_getDS1307Time
 12537 ;; This function uses a non-reentrant model
 12538 ;;
 12539                           
 12540                           	psect	text35
 12541  007034                     __ptext35:
 12542                           	opt stack 0
 12543  007034                     _I2C_Read:
 12544                           	opt stack 0
 12545  007034  FFFF               	dw	65535	; assembler added errata NOP
 12546                           
 12547                           ;I2C.c: 48: unsigned short temp;
 12548                           ;I2C.c: 49: I2C_Wait();
 12549                           
 12550                           ;incstack = 0
 12551  007036  EC62  F036         	call	_I2C_Wait	;wreg free
 12552                           
 12553                           ;I2C.c: 50: RCEN = 1;
 12554  00703A  86C5               	bsf	4037,3,c	;volatile
 12555                           
 12556                           ;I2C.c: 51: I2C_Wait();
 12557  00703C  EC62  F036         	call	_I2C_Wait	;wreg free
 12558                           
 12559                           ;I2C.c: 52: temp = SSPBUF;
 12560  007040  CFC9 F083          	movff	4041,I2C_Read@temp	;volatile
 12561  007044  0100               	movlb	0	; () banked
 12562  007046  6B84               	clrf	(I2C_Read@temp+1)& (0+255),b
 12563                           
 12564                           ;I2C.c: 53: I2C_Wait();
 12565  007048  EC62  F036         	call	_I2C_Wait	;wreg free
 12566                           
 12567                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 12568  00704C  0100               	movlb	0	; () banked
 12569  00704E  5181               	movf	I2C_Read@a& (0+255),w,b
 12570  007050  1182               	iorwf	(I2C_Read@a+1)& (0+255),w,b
 12571  007052  A4D8               	btfss	status,2,c
 12572  007054  D002               	goto	u4800
 12573  007056  8AC5               	bsf	4037,5,c	;volatile
 12574  007058  D002               	goto	u4815
 12575  00705A                     u4800:
 12576  00705A  FFFF               	dw	65535	; assembler added errata NOP
 12577  00705C  9AC5               	bcf	4037,5,c	;volatile
 12578  00705E                     u4815:
 12579  00705E  FFFF               	dw	65535	; assembler added errata NOP
 12580                           
 12581                           ;I2C.c: 55: ACKEN = 1;
 12582  007060  88C5               	bsf	4037,4,c	;volatile
 12583                           
 12584                           ;I2C.c: 56: return temp;
 12585  007062  C083  F081         	movff	I2C_Read@temp,?_I2C_Read
 12586  007066  C084  F082         	movff	I2C_Read@temp+1,?_I2C_Read+1
 12587  00706A  0012               	return		;funcret
 12588  00706C  FFFF               	dw	65535	; errata NOP
 12589  00706E                     __end_of_I2C_Read:
 12590                           	opt stack 0
 12591                           tblptru	equ	0xFF8
 12592                           tblptrh	equ	0xFF7
 12593                           tblptrl	equ	0xFF6
 12594                           tablat	equ	0xFF5
 12595                           prodh	equ	0xFF4
 12596                           prodl	equ	0xFF3
 12597                           intcon	equ	0xFF2
 12598                           postinc0	equ	0xFEE
 12599                           wreg	equ	0xFE8
 12600                           postdec1	equ	0xFE5
 12601                           fsr1l	equ	0xFE1
 12602                           indf2	equ	0xFDF
 12603                           postinc2	equ	0xFDE
 12604                           fsr2h	equ	0xFDA
 12605                           fsr2l	equ	0xFD9
 12606                           status	equ	0xFD8
 12607                           
 12608 ;; *************** function _intToFloatStr *****************
 12609 ;; Defined at:
 12610 ;;		line 48 in file "function.c"
 12611 ;; Parameters:    Size  Location     Type
 12612 ;;  valor           1    wreg     unsigned char 
 12613 ;; Auto vars:     Size  Location     Type
 12614 ;;  valor           1   63[BANK0 ] unsigned char 
 12615 ;;  conv            4   59[BANK0 ] unsigned char [4]
 12616 ;;  end             4   55[BANK0 ] unsigned char [4]
 12617 ;;  pr              2   64[BANK0 ] int 
 12618 ;; Return value:  Size  Location     Type
 12619 ;;                  2   53[BANK0 ] PTR unsigned char 
 12620 ;; Registers used:
 12621 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12622 ;; Tracked objects:
 12623 ;;		On entry : 0/0
 12624 ;;		On exit  : 0/0
 12625 ;;		Unchanged: 0/0
 12626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12627 ;;      Params:         0       2       0       0       0       0       0
 12628 ;;      Locals:         0      11       0       0       0       0       0
 12629 ;;      Temps:          0       0       0       0       0       0       0
 12630 ;;      Totals:         0      13       0       0       0       0       0
 12631 ;;Total ram usage:       13 bytes
 12632 ;; Hardware stack levels used:    1
 12633 ;; Hardware stack levels required when called:    9
 12634 ;; This function calls:
 12635 ;;		___awdiv
 12636 ;;		___awmod
 12637 ;;		_sprintf
 12638 ;; This function is called by:
 12639 ;;		_acaoTesteBombas
 12640 ;;		_telaPrincipal
 12641 ;;		_ajusteSP_Bombas
 12642 ;; This function uses a non-reentrant model
 12643 ;;
 12644                           
 12645                           	psect	text36
 12646  007948                     __ptext36:
 12647                           	opt stack 0
 12648  007948                     _intToFloatStr:
 12649                           	opt stack 0
 12650  007948  FFFF               	dw	65535	; assembler added errata NOP
 12651                           
 12652                           ;incstack = 0
 12653                           ;intToFloatStr@valor stored from wreg
 12654  00794A  0100               	movlb	0	; () banked
 12655  00794C  6FBF               	movwf	intToFloatStr@valor& (0+255),b
 12656                           
 12657                           ;function.c: 49: int pr = valor >= 99 ? 0 : valor;
 12658  00794E  0E63               	movlw	99
 12659  007950  0100               	movlb	0	; () banked
 12660  007952  61BF               	cpfslt	intToFloatStr@valor& (0+255),b
 12661  007954  D004               	goto	l1032
 12662                           
 12663                           ; BSR set to: 0
 12664  007956  C0BF  F0C0         	movff	intToFloatStr@valor,intToFloatStr@pr
 12665  00795A  6BC1               	clrf	(intToFloatStr@pr+1)& (0+255),b
 12666  00795C  D005               	goto	l1034
 12667  00795E                     l1032:
 12668  00795E  FFFF               	dw	65535	; assembler added errata NOP
 12669                           
 12670                           ; BSR set to: 0
 12671                           
 12672                           ; BSR set to: 0
 12673  007960  0E00               	movlw	0
 12674  007962  6FC1               	movwf	(intToFloatStr@pr+1)& (0+255),b
 12675  007964  0E00               	movlw	0
 12676  007966  6FC0               	movwf	intToFloatStr@pr& (0+255),b
 12677  007968                     l1034:
 12678  007968  FFFF               	dw	65535	; assembler added errata NOP
 12679                           
 12680                           ; BSR set to: 0
 12681                           ;function.c: 50: unsigned char conv[4] = {' ', ' ', ' ', ' '};
 12682                           
 12683                           ; BSR set to: 0
 12684  00796A  C1BC  F0BB         	movff	intToFloatStr@F2544,intToFloatStr@conv
 12685  00796E  C1BD  F0BC         	movff	intToFloatStr@F2544+1,intToFloatStr@conv+1
 12686  007972  C1BE  F0BD         	movff	intToFloatStr@F2544+2,intToFloatStr@conv+2
 12687  007976  C1BF  F0BE         	movff	intToFloatStr@F2544+3,intToFloatStr@conv+3
 12688                           
 12689                           ; BSR set to: 0
 12690                           ;function.c: 51: conv[0] = (char) ((pr / 10) + 48);
 12691  00797A  C0C0  F080         	movff	intToFloatStr@pr,___awdiv@dividend
 12692  00797E  C0C1  F081         	movff	intToFloatStr@pr+1,___awdiv@dividend+1
 12693  007982  0E00               	movlw	0
 12694  007984  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
 12695  007986  0E0A               	movlw	10
 12696  007988  6F82               	movwf	___awdiv@divisor& (0+255),b
 12697  00798A  EC36  F01F         	call	___awdiv	;wreg free
 12698  00798E  0100               	movlb	0	; () banked
 12699  007990  5180               	movf	?___awdiv& (0+255),w,b
 12700  007992  0F30               	addlw	48
 12701  007994  6FBB               	movwf	intToFloatStr@conv& (0+255),b
 12702                           
 12703                           ; BSR set to: 0
 12704                           ;function.c: 52: conv[1] = (char) '.';
 12705  007996  0E2E               	movlw	46
 12706  007998  6FBC               	movwf	(intToFloatStr@conv+1)& (0+255),b
 12707                           
 12708                           ;function.c: 53: conv[2] = (char) ((pr % 10) + 48);
 12709  00799A  C0C0  F080         	movff	intToFloatStr@pr,___awmod@dividend
 12710  00799E  C0C1  F081         	movff	intToFloatStr@pr+1,___awmod@dividend+1
 12711  0079A2  0E00               	movlw	0
 12712  0079A4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 12713  0079A6  0E0A               	movlw	10
 12714  0079A8  6F82               	movwf	___awmod@divisor& (0+255),b
 12715  0079AA  ECD4  F03B         	call	___awmod	;wreg free
 12716  0079AE  0100               	movlb	0	; () banked
 12717  0079B0  5180               	movf	?___awmod& (0+255),w,b
 12718  0079B2  0F30               	addlw	48
 12719  0079B4  6FBD               	movwf	(intToFloatStr@conv+2)& (0+255),b
 12720                           
 12721                           ; BSR set to: 0
 12722                           ;function.c: 54: conv[3] = '\0';
 12723  0079B6  0E00               	movlw	0
 12724  0079B8  6FBE               	movwf	(intToFloatStr@conv+3)& (0+255),b
 12725                           
 12726                           ; BSR set to: 0
 12727                           ;function.c: 55: char end[4];
 12728                           ;function.c: 56: sprintf(end , conv);
 12729  0079BA  0EB7               	movlw	low intToFloatStr@end
 12730  0079BC  6FA1               	movwf	sprintf@wh& (0+255),b
 12731  0079BE  0E00               	movlw	high intToFloatStr@end
 12732  0079C0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12733  0079C2  0EBB               	movlw	low intToFloatStr@conv
 12734  0079C4  6FA3               	movwf	sprintf@f& (0+255),b
 12735  0079C6  0E00               	movlw	high intToFloatStr@conv
 12736  0079C8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12737  0079CA  EC95  F039         	call	_sprintf	;wreg free
 12738                           
 12739                           ;function.c: 57: return end;
 12740  0079CE  0EB7               	movlw	low intToFloatStr@end
 12741  0079D0  0100               	movlb	0	; () banked
 12742  0079D2  6FB5               	movwf	?_intToFloatStr& (0+255),b
 12743  0079D4  0E00               	movlw	high intToFloatStr@end
 12744  0079D6  6FB6               	movwf	(?_intToFloatStr+1)& (0+255),b
 12745                           
 12746                           ; BSR set to: 0
 12747                           
 12748                           ; BSR set to: 0
 12749  0079D8  0012               	return		;funcret
 12750  0079DA  FFFF               	dw	65535	; errata NOP
 12751  0079DC                     __end_of_intToFloatStr:
 12752                           	opt stack 0
 12753                           tblptru	equ	0xFF8
 12754                           tblptrh	equ	0xFF7
 12755                           tblptrl	equ	0xFF6
 12756                           tablat	equ	0xFF5
 12757                           prodh	equ	0xFF4
 12758                           prodl	equ	0xFF3
 12759                           intcon	equ	0xFF2
 12760                           postinc0	equ	0xFEE
 12761                           wreg	equ	0xFE8
 12762                           postdec1	equ	0xFE5
 12763                           fsr1l	equ	0xFE1
 12764                           indf2	equ	0xFDF
 12765                           postinc2	equ	0xFDE
 12766                           fsr2h	equ	0xFDA
 12767                           fsr2l	equ	0xFD9
 12768                           status	equ	0xFD8
 12769                           
 12770 ;; *************** function ___awmod *****************
 12771 ;; Defined at:
 12772 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 12773 ;; Parameters:    Size  Location     Type
 12774 ;;  dividend        2    0[BANK0 ] int 
 12775 ;;  divisor         2    2[BANK0 ] int 
 12776 ;; Auto vars:     Size  Location     Type
 12777 ;;  sign            1    5[BANK0 ] unsigned char 
 12778 ;;  counter         1    4[BANK0 ] unsigned char 
 12779 ;; Return value:  Size  Location     Type
 12780 ;;                  2    0[BANK0 ] int 
 12781 ;; Registers used:
 12782 ;;		wreg, status,2, status,0
 12783 ;; Tracked objects:
 12784 ;;		On entry : 0/0
 12785 ;;		On exit  : 0/0
 12786 ;;		Unchanged: 0/0
 12787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12788 ;;      Params:         0       4       0       0       0       0       0
 12789 ;;      Locals:         0       2       0       0       0       0       0
 12790 ;;      Temps:          0       0       0       0       0       0       0
 12791 ;;      Totals:         0       6       0       0       0       0       0
 12792 ;;Total ram usage:        6 bytes
 12793 ;; Hardware stack levels used:    1
 12794 ;; Hardware stack levels required when called:    6
 12795 ;; This function calls:
 12796 ;;		Nothing
 12797 ;; This function is called by:
 12798 ;;		_DECtoBCD
 12799 ;;		_intToFloatStr
 12800 ;;		_DECtoHEX
 12801 ;; This function uses a non-reentrant model
 12802 ;;
 12803                           
 12804                           	psect	text37
 12805  0077A8                     __ptext37:
 12806                           	opt stack 0
 12807  0077A8                     ___awmod:
 12808                           	opt stack 0
 12809  0077A8  FFFF               	dw	65535	; assembler added errata NOP
 12810                           
 12811                           ; BSR set to: 0
 12812                           ;incstack = 0
 12813  0077AA  0E00               	movlw	0
 12814  0077AC  0100               	movlb	0	; () banked
 12815  0077AE  6F85               	movwf	___awmod@sign& (0+255),b
 12816                           
 12817                           ; BSR set to: 0
 12818  0077B0  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 12819  0077B2  D006               	goto	l1316
 12820                           
 12821                           ; BSR set to: 0
 12822  0077B4  6D80               	negf	___awmod@dividend& (0+255),b
 12823  0077B6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12824  0077B8  B0D8               	btfsc	status,0,c
 12825  0077BA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12826                           
 12827                           ; BSR set to: 0
 12828  0077BC  0E01               	movlw	1
 12829  0077BE  6F85               	movwf	___awmod@sign& (0+255),b
 12830  0077C0                     l1316:
 12831  0077C0  FFFF               	dw	65535	; assembler added errata NOP
 12832                           
 12833                           ; BSR set to: 0
 12834                           
 12835                           ; BSR set to: 0
 12836  0077C2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12837  0077C4  D004               	goto	l1317
 12838                           
 12839                           ; BSR set to: 0
 12840  0077C6  6D82               	negf	___awmod@divisor& (0+255),b
 12841  0077C8  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 12842  0077CA  B0D8               	btfsc	status,0,c
 12843  0077CC  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 12844  0077CE                     l1317:
 12845  0077CE  FFFF               	dw	65535	; assembler added errata NOP
 12846                           
 12847                           ; BSR set to: 0
 12848                           
 12849                           ; BSR set to: 0
 12850  0077D0  5182               	movf	___awmod@divisor& (0+255),w,b
 12851  0077D2  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 12852  0077D4  B4D8               	btfsc	status,2,c
 12853  0077D6  D01C               	goto	l1324
 12854                           
 12855                           ; BSR set to: 0
 12856  0077D8  0E01               	movlw	1
 12857  0077DA  6F84               	movwf	___awmod@counter& (0+255),b
 12858  0077DC  D005               	goto	l1319
 12859  0077DE  FFFF               	dw	65535	; assembler added errata NOP
 12860                           
 12861                           ; BSR set to: 0
 12862                           
 12863                           ; BSR set to: 0
 12864  0077E0  90D8               	bcf	status,0,c
 12865  0077E2  3782               	rlcf	___awmod@divisor& (0+255),f,b
 12866  0077E4  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 12867  0077E6  2B84               	incf	___awmod@counter& (0+255),f,b
 12868  0077E8                     l1319:
 12869  0077E8  FFFF               	dw	65535	; assembler added errata NOP
 12870                           
 12871                           ; BSR set to: 0
 12872                           
 12873                           ; BSR set to: 0
 12874  0077EA  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12875  0077EC  D7F8               	goto	l1320
 12876  0077EE                     u5440:
 12877  0077EE  FFFF               	dw	65535	; assembler added errata NOP
 12878                           
 12879                           ; BSR set to: 0
 12880                           
 12881                           ; BSR set to: 0
 12882                           
 12883                           ; BSR set to: 0
 12884  0077F0  5182               	movf	___awmod@divisor& (0+255),w,b
 12885  0077F2  5D80               	subwf	___awmod@dividend& (0+255),w,b
 12886  0077F4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12887  0077F6  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 12888  0077F8  A0D8               	btfss	status,0,c
 12889  0077FA  D004               	goto	l1323
 12890                           
 12891                           ; BSR set to: 0
 12892  0077FC  5182               	movf	___awmod@divisor& (0+255),w,b
 12893  0077FE  5F80               	subwf	___awmod@dividend& (0+255),f,b
 12894  007800  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 12895  007802  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 12896  007804                     l1323:
 12897  007804  FFFF               	dw	65535	; assembler added errata NOP
 12898                           
 12899                           ; BSR set to: 0
 12900                           
 12901                           ; BSR set to: 0
 12902  007806  90D8               	bcf	status,0,c
 12903  007808  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 12904  00780A  3382               	rrcf	___awmod@divisor& (0+255),f,b
 12905                           
 12906                           ; BSR set to: 0
 12907  00780C  2F84               	decfsz	___awmod@counter& (0+255),f,b
 12908  00780E  D7EF               	goto	u5440
 12909  007810                     l1324:
 12910  007810  FFFF               	dw	65535	; assembler added errata NOP
 12911                           
 12912                           ; BSR set to: 0
 12913                           
 12914                           ; BSR set to: 0
 12915                           
 12916                           ; BSR set to: 0
 12917  007812  5185               	movf	___awmod@sign& (0+255),w,b
 12918  007814  B4D8               	btfsc	status,2,c
 12919  007816  D004               	goto	l1325
 12920                           
 12921                           ; BSR set to: 0
 12922  007818  6D80               	negf	___awmod@dividend& (0+255),b
 12923  00781A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12924  00781C  B0D8               	btfsc	status,0,c
 12925  00781E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12926  007820                     l1325:
 12927  007820  FFFF               	dw	65535	; assembler added errata NOP
 12928                           
 12929                           ; BSR set to: 0
 12930                           
 12931                           ; BSR set to: 0
 12932  007822  C080  F080         	movff	___awmod@dividend,?___awmod
 12933  007826  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 12934                           
 12935                           ; BSR set to: 0
 12936                           
 12937                           ; BSR set to: 0
 12938  00782A  0012               	return		;funcret
 12939  00782C  FFFF               	dw	65535	; errata NOP
 12940  00782E                     __end_of___awmod:
 12941                           	opt stack 0
 12942                           tblptru	equ	0xFF8
 12943                           tblptrh	equ	0xFF7
 12944                           tblptrl	equ	0xFF6
 12945                           tablat	equ	0xFF5
 12946                           prodh	equ	0xFF4
 12947                           prodl	equ	0xFF3
 12948                           intcon	equ	0xFF2
 12949                           postinc0	equ	0xFEE
 12950                           wreg	equ	0xFE8
 12951                           postdec1	equ	0xFE5
 12952                           fsr1l	equ	0xFE1
 12953                           indf2	equ	0xFDF
 12954                           postinc2	equ	0xFDE
 12955                           fsr2h	equ	0xFDA
 12956                           fsr2l	equ	0xFD9
 12957                           status	equ	0xFD8
 12958                           
 12959 ;; *************** function ___awdiv *****************
 12960 ;; Defined at:
 12961 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 12962 ;; Parameters:    Size  Location     Type
 12963 ;;  dividend        2    0[BANK0 ] int 
 12964 ;;  divisor         2    2[BANK0 ] int 
 12965 ;; Auto vars:     Size  Location     Type
 12966 ;;  quotient        2    6[BANK0 ] int 
 12967 ;;  sign            1    5[BANK0 ] unsigned char 
 12968 ;;  counter         1    4[BANK0 ] unsigned char 
 12969 ;; Return value:  Size  Location     Type
 12970 ;;                  2    0[BANK0 ] int 
 12971 ;; Registers used:
 12972 ;;		wreg, status,2, status,0
 12973 ;; Tracked objects:
 12974 ;;		On entry : 0/0
 12975 ;;		On exit  : 0/0
 12976 ;;		Unchanged: 0/0
 12977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12978 ;;      Params:         0       4       0       0       0       0       0
 12979 ;;      Locals:         0       4       0       0       0       0       0
 12980 ;;      Temps:          0       0       0       0       0       0       0
 12981 ;;      Totals:         0       8       0       0       0       0       0
 12982 ;;Total ram usage:        8 bytes
 12983 ;; Hardware stack levels used:    1
 12984 ;; Hardware stack levels required when called:    6
 12985 ;; This function calls:
 12986 ;;		Nothing
 12987 ;; This function is called by:
 12988 ;;		_dataLoger
 12989 ;;		_DECtoBCD
 12990 ;;		_intToFloatStr
 12991 ;;		_DECtoHEX
 12992 ;; This function uses a non-reentrant model
 12993 ;;
 12994                           
 12995                           	psect	text38
 12996  003E6C                     __ptext38:
 12997                           	opt stack 0
 12998  003E6C                     ___awdiv:
 12999                           	opt stack 0
 13000  003E6C  FFFF               	dw	65535	; assembler added errata NOP
 13001                           
 13002                           ; BSR set to: 0
 13003                           ;incstack = 0
 13004  003E6E  0E00               	movlw	0
 13005  003E70  0100               	movlb	0	; () banked
 13006  003E72  6F85               	movwf	___awdiv@sign& (0+255),b
 13007                           
 13008                           ; BSR set to: 0
 13009  003E74  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 13010  003E76  D006               	goto	l1303
 13011                           
 13012                           ; BSR set to: 0
 13013  003E78  6D82               	negf	___awdiv@divisor& (0+255),b
 13014  003E7A  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
 13015  003E7C  B0D8               	btfsc	status,0,c
 13016  003E7E  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
 13017                           
 13018                           ; BSR set to: 0
 13019  003E80  0E01               	movlw	1
 13020  003E82  6F85               	movwf	___awdiv@sign& (0+255),b
 13021  003E84                     l1303:
 13022  003E84  FFFF               	dw	65535	; assembler added errata NOP
 13023                           
 13024                           ; BSR set to: 0
 13025                           
 13026                           ; BSR set to: 0
 13027  003E86  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 13028  003E88  D006               	goto	l1304
 13029                           
 13030                           ; BSR set to: 0
 13031  003E8A  6D80               	negf	___awdiv@dividend& (0+255),b
 13032  003E8C  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
 13033  003E8E  B0D8               	btfsc	status,0,c
 13034  003E90  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
 13035                           
 13036                           ; BSR set to: 0
 13037  003E92  0E01               	movlw	1
 13038  003E94  1B85               	xorwf	___awdiv@sign& (0+255),f,b
 13039  003E96                     l1304:
 13040  003E96  FFFF               	dw	65535	; assembler added errata NOP
 13041                           
 13042                           ; BSR set to: 0
 13043                           
 13044                           ; BSR set to: 0
 13045  003E98  0E00               	movlw	0
 13046  003E9A  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
 13047  003E9C  0E00               	movlw	0
 13048  003E9E  6F86               	movwf	___awdiv@quotient& (0+255),b
 13049                           
 13050                           ; BSR set to: 0
 13051  003EA0  5182               	movf	___awdiv@divisor& (0+255),w,b
 13052  003EA2  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 13053  003EA4  B4D8               	btfsc	status,2,c
 13054  003EA6  D020               	goto	l1311
 13055                           
 13056                           ; BSR set to: 0
 13057  003EA8  0E01               	movlw	1
 13058  003EAA  6F84               	movwf	___awdiv@counter& (0+255),b
 13059  003EAC  D005               	goto	l1306
 13060  003EAE  FFFF               	dw	65535	; assembler added errata NOP
 13061                           
 13062                           ; BSR set to: 0
 13063                           
 13064                           ; BSR set to: 0
 13065  003EB0  90D8               	bcf	status,0,c
 13066  003EB2  3782               	rlcf	___awdiv@divisor& (0+255),f,b
 13067  003EB4  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 13068  003EB6  2B84               	incf	___awdiv@counter& (0+255),f,b
 13069  003EB8                     l1306:
 13070  003EB8  FFFF               	dw	65535	; assembler added errata NOP
 13071                           
 13072                           ; BSR set to: 0
 13073                           
 13074                           ; BSR set to: 0
 13075  003EBA  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 13076  003EBC  D7F8               	goto	l1307
 13077  003EBE                     u5380:
 13078  003EBE  FFFF               	dw	65535	; assembler added errata NOP
 13079                           
 13080                           ; BSR set to: 0
 13081                           
 13082                           ; BSR set to: 0
 13083                           
 13084                           ; BSR set to: 0
 13085  003EC0  90D8               	bcf	status,0,c
 13086  003EC2  3786               	rlcf	___awdiv@quotient& (0+255),f,b
 13087  003EC4  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 13088                           
 13089                           ; BSR set to: 0
 13090  003EC6  5182               	movf	___awdiv@divisor& (0+255),w,b
 13091  003EC8  5D80               	subwf	___awdiv@dividend& (0+255),w,b
 13092  003ECA  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 13093  003ECC  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 13094  003ECE  A0D8               	btfss	status,0,c
 13095  003ED0  D005               	goto	l1310
 13096                           
 13097                           ; BSR set to: 0
 13098  003ED2  5182               	movf	___awdiv@divisor& (0+255),w,b
 13099  003ED4  5F80               	subwf	___awdiv@dividend& (0+255),f,b
 13100  003ED6  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 13101  003ED8  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 13102                           
 13103                           ; BSR set to: 0
 13104  003EDA  8186               	bsf	___awdiv@quotient& (0+255),0,b
 13105  003EDC                     l1310:
 13106  003EDC  FFFF               	dw	65535	; assembler added errata NOP
 13107                           
 13108                           ; BSR set to: 0
 13109                           
 13110                           ; BSR set to: 0
 13111  003EDE  90D8               	bcf	status,0,c
 13112  003EE0  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 13113  003EE2  3382               	rrcf	___awdiv@divisor& (0+255),f,b
 13114                           
 13115                           ; BSR set to: 0
 13116  003EE4  2F84               	decfsz	___awdiv@counter& (0+255),f,b
 13117  003EE6  D7EB               	goto	u5380
 13118  003EE8                     l1311:
 13119  003EE8  FFFF               	dw	65535	; assembler added errata NOP
 13120                           
 13121                           ; BSR set to: 0
 13122                           
 13123                           ; BSR set to: 0
 13124                           
 13125                           ; BSR set to: 0
 13126  003EEA  5185               	movf	___awdiv@sign& (0+255),w,b
 13127  003EEC  B4D8               	btfsc	status,2,c
 13128  003EEE  D004               	goto	l1312
 13129                           
 13130                           ; BSR set to: 0
 13131  003EF0  6D86               	negf	___awdiv@quotient& (0+255),b
 13132  003EF2  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
 13133  003EF4  B0D8               	btfsc	status,0,c
 13134  003EF6  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
 13135  003EF8                     l1312:
 13136  003EF8  FFFF               	dw	65535	; assembler added errata NOP
 13137                           
 13138                           ; BSR set to: 0
 13139                           
 13140                           ; BSR set to: 0
 13141  003EFA  C086  F080         	movff	___awdiv@quotient,?___awdiv
 13142  003EFE  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
 13143                           
 13144                           ; BSR set to: 0
 13145                           
 13146                           ; BSR set to: 0
 13147  003F02  0012               	return		;funcret
 13148  003F04  FFFF               	dw	65535	; errata NOP
 13149  003F06                     __end_of___awdiv:
 13150                           	opt stack 0
 13151                           tblptru	equ	0xFF8
 13152                           tblptrh	equ	0xFF7
 13153                           tblptrl	equ	0xFF6
 13154                           tablat	equ	0xFF5
 13155                           prodh	equ	0xFF4
 13156                           prodl	equ	0xFF3
 13157                           intcon	equ	0xFF2
 13158                           postinc0	equ	0xFEE
 13159                           wreg	equ	0xFE8
 13160                           postdec1	equ	0xFE5
 13161                           fsr1l	equ	0xFE1
 13162                           indf2	equ	0xFDF
 13163                           postinc2	equ	0xFDE
 13164                           fsr2h	equ	0xFDA
 13165                           fsr2l	equ	0xFD9
 13166                           status	equ	0xFD8
 13167                           
 13168 ;; *************** function _drenarPressao *****************
 13169 ;; Defined at:
 13170 ;;		line 129 in file "controle.h"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;		None
 13173 ;; Auto vars:     Size  Location     Type
 13174 ;;		None
 13175 ;; Return value:  Size  Location     Type
 13176 ;;                  1    wreg      void 
 13177 ;; Registers used:
 13178 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13179 ;; Tracked objects:
 13180 ;;		On entry : 0/0
 13181 ;;		On exit  : 0/0
 13182 ;;		Unchanged: 0/0
 13183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13184 ;;      Params:         0       0       0       0       0       0       0
 13185 ;;      Locals:         0       0       0       0       0       0       0
 13186 ;;      Temps:          0       0       0       0       0       0       0
 13187 ;;      Totals:         0       0       0       0       0       0       0
 13188 ;;Total ram usage:        0 bytes
 13189 ;; Hardware stack levels used:    1
 13190 ;; Hardware stack levels required when called:    9
 13191 ;; This function calls:
 13192 ;;		_sprintf
 13193 ;; This function is called by:
 13194 ;;		_acaoTesteBombas
 13195 ;; This function uses a non-reentrant model
 13196 ;;
 13197                           
 13198                           	psect	text39
 13199  006E7E                     __ptext39:
 13200                           	opt stack 0
 13201  006E7E                     _drenarPressao:
 13202                           	opt stack 0
 13203  006E7E  FFFF               	dw	65535	; assembler added errata NOP
 13204                           
 13205                           ;controle.h: 130: sprintf(line4, "Despressurizando...");
 13206                           
 13207                           ; BSR set to: 0
 13208                           ;incstack = 0
 13209  006E80  0E3C               	movlw	low _line4
 13210  006E82  0100               	movlb	0	; () banked
 13211  006E84  6FA1               	movwf	sprintf@wh& (0+255),b
 13212  006E86  0E01               	movlw	high _line4
 13213  006E88  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13214  006E8A  0E4C               	movlw	low STR_38
 13215  006E8C  6FA3               	movwf	sprintf@f& (0+255),b
 13216  006E8E  0E7C               	movlw	high STR_38
 13217  006E90  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13218  006E92  EC95  F039         	call	_sprintf	;wreg free
 13219                           
 13220                           ;controle.h: 131: if (!timerTesteBombas) {
 13221  006E96  0100               	movlb	0	; () banked
 13222  006E98  51DB               	movf	_timerTesteBombas& (0+255),w,b
 13223  006E9A  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13224  006E9C  A4D8               	btfss	status,2,c
 13225  006E9E  D006               	goto	l517
 13226                           
 13227                           ; BSR set to: 0
 13228                           ;controle.h: 132: executandoTeste = 0;
 13229  006EA0  0E00               	movlw	0
 13230  006EA2  6FF1               	movwf	_executandoTeste& (0+255),b
 13231                           
 13232                           ;controle.h: 133: codigoErro = 3;
 13233  006EA4  0E03               	movlw	3
 13234  006EA6  6FF3               	movwf	_codigoErro& (0+255),b
 13235                           
 13236                           ;controle.h: 134: menu_posi = 0;
 13237  006EA8  0E00               	movlw	0
 13238  006EAA  6FE0               	movwf	_menu_posi& (0+255),b
 13239  006EAC                     l517:
 13240  006EAC  FFFF               	dw	65535	; assembler added errata NOP
 13241                           
 13242                           ; BSR set to: 0
 13243                           
 13244                           ; BSR set to: 0
 13245  006EAE  0012               	return		;funcret
 13246  006EB0  FFFF               	dw	65535	; errata NOP
 13247  006EB2                     __end_of_drenarPressao:
 13248                           	opt stack 0
 13249                           tblptru	equ	0xFF8
 13250                           tblptrh	equ	0xFF7
 13251                           tblptrl	equ	0xFF6
 13252                           tablat	equ	0xFF5
 13253                           prodh	equ	0xFF4
 13254                           prodl	equ	0xFF3
 13255                           intcon	equ	0xFF2
 13256                           postinc0	equ	0xFEE
 13257                           wreg	equ	0xFE8
 13258                           postdec1	equ	0xFE5
 13259                           fsr1l	equ	0xFE1
 13260                           indf2	equ	0xFDF
 13261                           postinc2	equ	0xFDE
 13262                           fsr2h	equ	0xFDA
 13263                           fsr2l	equ	0xFD9
 13264                           status	equ	0xFD8
 13265                           
 13266 ;; *************** function _sprintf *****************
 13267 ;; Defined at:
 13268 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
 13269 ;; Parameters:    Size  Location     Type
 13270 ;;  wh              2   33[BANK0 ] PTR unsigned char 
 13271 ;;		 -> intToFloatStr@end(4), line3(21), line2(21), line1(21), 
 13272 ;;		 -> line4(21), bufferAUX(20), 
 13273 ;;  f               2   35[BANK0 ] PTR const unsigned char 
 13274 ;;		 -> intToFloatStr@conv(4), STR_126(15), STR_125(12), STR_124(10), 
 13275 ;;		 -> STR_123(18), STR_122(10), STR_121(18), STR_120(16), 
 13276 ;;		 -> STR_119(10), STR_117(3), STR_116(14), STR_115(20), 
 13277 ;;		 -> STR_114(8), STR_113(10), STR_112(11), STR_111(9), 
 13278 ;;		 -> STR_110(3), STR_109(15), STR_108(15), STR_107(11), 
 13279 ;;		 -> STR_106(11), STR_105(18), STR_104(5), STR_103(12), 
 13280 ;;		 -> STR_102(5), STR_101(14), STR_100(19), STR_97(3), 
 13281 ;;		 -> STR_96(7), STR_95(7), STR_93(12), STR_92(17), 
 13282 ;;		 -> STR_91(20), STR_90(8), STR_87(14), STR_84(14), 
 13283 ;;		 -> STR_83(11), STR_80(10), STR_79(31), STR_76(11), 
 13284 ;;		 -> STR_75(20), STR_74(20), STR_73(21), STR_72(15), 
 13285 ;;		 -> STR_71(6), STR_70(15), STR_69(6), STR_68(20), 
 13286 ;;		 -> STR_67(15), STR_66(19), STR_65(20), STR_64(21), 
 13287 ;;		 -> STR_63(21), STR_62(18), STR_61(20), STR_60(12), 
 13288 ;;		 -> STR_59(17), STR_58(26), STR_57(16), STR_54(15), 
 13289 ;;		 -> STR_51(15), STR_48(11), STR_47(17), STR_44(9), 
 13290 ;;		 -> STR_43(19), STR_42(19), STR_41(16), STR_40(15), 
 13291 ;;		 -> STR_39(15), STR_38(20), STR_2(5), STR_1(5), 
 13292 ;; Auto vars:     Size  Location     Type
 13293 ;;  pb              4   49[BANK0 ] struct __prbuf
 13294 ;;  ap              2   47[BANK0 ] PTR void [1]
 13295 ;;		 -> ?_sprintf(2), ?_printf(2), 
 13296 ;; Return value:  Size  Location     Type
 13297 ;;                  2   33[BANK0 ] int 
 13298 ;; Registers used:
 13299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13300 ;; Tracked objects:
 13301 ;;		On entry : 0/0
 13302 ;;		On exit  : 0/0
 13303 ;;		Unchanged: 0/0
 13304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13305 ;;      Params:         0      14       0       0       0       0       0
 13306 ;;      Locals:         0       6       0       0       0       0       0
 13307 ;;      Temps:          0       0       0       0       0       0       0
 13308 ;;      Totals:         0      20       0       0       0       0       0
 13309 ;;Total ram usage:       20 bytes
 13310 ;; Hardware stack levels used:    1
 13311 ;; Hardware stack levels required when called:    8
 13312 ;; This function calls:
 13313 ;;		__doprnt
 13314 ;; This function is called by:
 13315 ;;		_getSerial
 13316 ;;		_drenarPressao
 13317 ;;		_acaoTesteBombas
 13318 ;;		_telaPrincipal
 13319 ;;		_tela_ajusteRTC
 13320 ;;		_tela_testeBombas
 13321 ;;		_dataLoger
 13322 ;;		_informacoes
 13323 ;;		_configuraTelefones
 13324 ;;		_configurarEstacionaria
 13325 ;;		_ajusteSP_Bombas
 13326 ;;		_main
 13327 ;;		_intToFloatStr
 13328 ;;		_telaTeste
 13329 ;; This function uses a non-reentrant model
 13330 ;;
 13331                           
 13332                           	psect	text40
 13333  00732A                     __ptext40:
 13334                           	opt stack 0
 13335  00732A                     _sprintf:
 13336                           	opt stack 0
 13337  00732A  FFFF               	dw	65535	; assembler added errata NOP
 13338                           
 13339                           ; BSR set to: 0
 13340                           ;incstack = 0
 13341  00732C  C0A1  F0B1         	movff	sprintf@wh,sprintf@pb
 13342  007330  C0A2  F0B2         	movff	sprintf@wh+1,sprintf@pb+1
 13343  007334  0E00               	movlw	0
 13344  007336  0100               	movlb	0	; () banked
 13345  007338  6FB3               	movwf	(sprintf@pb+2)& (0+255),b
 13346  00733A  0E00               	movlw	0
 13347  00733C  6FB4               	movwf	(sprintf@pb+3)& (0+255),b
 13348  00733E  0EA5               	movlw	low (?_sprintf+4)
 13349  007340  6FAF               	movwf	sprintf@ap& (0+255),b
 13350  007342  0E00               	movlw	high (?_sprintf+4)
 13351  007344  6FB0               	movwf	(sprintf@ap+1)& (0+255),b
 13352                           
 13353                           ; BSR set to: 0
 13354  007346  0EB1               	movlw	low sprintf@pb
 13355  007348  6F8C               	movwf	__doprnt@pb& (0+255),b
 13356  00734A  0E00               	movlw	high sprintf@pb
 13357  00734C  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 13358  00734E  C0A3  F08E         	movff	sprintf@f,__doprnt@f
 13359  007352  C0A4  F08F         	movff	sprintf@f+1,__doprnt@f+1
 13360  007356  0EAF               	movlw	low sprintf@ap
 13361  007358  6F90               	movwf	__doprnt@ap& (0+255),b
 13362  00735A  0E00               	movlw	high sprintf@ap
 13363  00735C  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 13364  00735E  EC8E  F000         	call	__doprnt	;wreg free
 13365  007362  C0B1  FFD9         	movff	sprintf@pb,fsr2l
 13366  007366  C0B2  FFDA         	movff	sprintf@pb+1,fsr2h
 13367  00736A  0E00               	movlw	0
 13368  00736C  6EDF               	movwf	indf2,c
 13369                           
 13370                           ;	Return value of _sprintf is never used
 13371  00736E  0012               	return		;funcret
 13372  007370  FFFF               	dw	65535	; errata NOP
 13373  007372                     __end_of_sprintf:
 13374                           	opt stack 0
 13375                           tblptru	equ	0xFF8
 13376                           tblptrh	equ	0xFF7
 13377                           tblptrl	equ	0xFF6
 13378                           tablat	equ	0xFF5
 13379                           prodh	equ	0xFF4
 13380                           prodl	equ	0xFF3
 13381                           intcon	equ	0xFF2
 13382                           postinc0	equ	0xFEE
 13383                           wreg	equ	0xFE8
 13384                           postdec1	equ	0xFE5
 13385                           fsr1l	equ	0xFE1
 13386                           indf2	equ	0xFDF
 13387                           postinc2	equ	0xFDE
 13388                           fsr2h	equ	0xFDA
 13389                           fsr2l	equ	0xFD9
 13390                           status	equ	0xFD8
 13391                           
 13392 ;; *************** function _clearShiftREG *****************
 13393 ;; Defined at:
 13394 ;;		line 30 in file "shift595.h"
 13395 ;; Parameters:    Size  Location     Type
 13396 ;;		None
 13397 ;; Auto vars:     Size  Location     Type
 13398 ;;  i               1    0[BANK0 ] unsigned char 
 13399 ;; Return value:  Size  Location     Type
 13400 ;;                  1    wreg      void 
 13401 ;; Registers used:
 13402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13403 ;; Tracked objects:
 13404 ;;		On entry : 0/0
 13405 ;;		On exit  : 0/0
 13406 ;;		Unchanged: 0/0
 13407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13408 ;;      Params:         0       0       0       0       0       0       0
 13409 ;;      Locals:         0       1       0       0       0       0       0
 13410 ;;      Temps:          0       0       0       0       0       0       0
 13411 ;;      Totals:         0       1       0       0       0       0       0
 13412 ;;Total ram usage:        1 bytes
 13413 ;; Hardware stack levels used:    1
 13414 ;; Hardware stack levels required when called:    6
 13415 ;; This function calls:
 13416 ;;		Nothing
 13417 ;; This function is called by:
 13418 ;;		_acaoTesteBombas
 13419 ;;		_resetParametros
 13420 ;;		_telaPrincipal
 13421 ;; This function uses a non-reentrant model
 13422 ;;
 13423                           
 13424                           	psect	text41
 13425  006F54                     __ptext41:
 13426                           	opt stack 0
 13427  006F54                     _clearShiftREG:
 13428                           	opt stack 0
 13429  006F54  FFFF               	dw	65535	; assembler added errata NOP
 13430                           
 13431                           ;shift595.h: 31: char i = 0;
 13432                           
 13433                           ;incstack = 0
 13434  006F56  0E00               	movlw	0
 13435  006F58  0100               	movlb	0	; () banked
 13436  006F5A  6F80               	movwf	clearShiftREG@i& (0+255),b
 13437                           
 13438                           ;shift595.h: 32: for (i = 0; i < 8; i++) {
 13439  006F5C  0E00               	movlw	0
 13440  006F5E  6F80               	movwf	clearShiftREG@i& (0+255),b
 13441  006F60                     l5384:
 13442  006F60  FFFF               	dw	65535	; assembler added errata NOP
 13443                           
 13444                           ; BSR set to: 0
 13445  006F62  0E07               	movlw	7
 13446  006F64  6580               	cpfsgt	clearShiftREG@i& (0+255),b
 13447  006F66  D001               	goto	l428
 13448  006F68  D00D               	goto	u5510
 13449  006F6A                     l428:
 13450  006F6A  FFFF               	dw	65535	; assembler added errata NOP
 13451                           
 13452                           ; BSR set to: 0
 13453                           ;shift595.h: 33: shift[i] = 0;
 13454                           
 13455                           ; BSR set to: 0
 13456  006F6C  5180               	movf	clearShiftREG@i& (0+255),w,b
 13457  006F6E  0D01               	mullw	1
 13458  006F70  0E44               	movlw	low _shift
 13459  006F72  24F3               	addwf	prodl,w,c
 13460  006F74  6ED9               	movwf	fsr2l,c
 13461  006F76  0E00               	movlw	high _shift
 13462  006F78  20F4               	addwfc	prodh,w,c
 13463  006F7A  6EDA               	movwf	fsr2h,c
 13464  006F7C  0E00               	movlw	0
 13465  006F7E  6EDF               	movwf	indf2,c
 13466                           
 13467                           ; BSR set to: 0
 13468  006F80  2B80               	incf	clearShiftREG@i& (0+255),f,b
 13469  006F82  D7EE               	goto	l5384
 13470  006F84                     u5510:
 13471  006F84  FFFF               	dw	65535	; assembler added errata NOP
 13472                           
 13473                           ; BSR set to: 0
 13474                           
 13475                           ; BSR set to: 0
 13476  006F86  0012               	return		;funcret
 13477  006F88  FFFF               	dw	65535	; errata NOP
 13478  006F8A                     __end_of_clearShiftREG:
 13479                           	opt stack 0
 13480                           tblptru	equ	0xFF8
 13481                           tblptrh	equ	0xFF7
 13482                           tblptrl	equ	0xFF6
 13483                           tablat	equ	0xFF5
 13484                           prodh	equ	0xFF4
 13485                           prodl	equ	0xFF3
 13486                           intcon	equ	0xFF2
 13487                           postinc0	equ	0xFEE
 13488                           wreg	equ	0xFE8
 13489                           postdec1	equ	0xFE5
 13490                           fsr1l	equ	0xFE1
 13491                           indf2	equ	0xFDF
 13492                           postinc2	equ	0xFDE
 13493                           fsr2h	equ	0xFDA
 13494                           fsr2l	equ	0xFD9
 13495                           status	equ	0xFD8
 13496                           
 13497 ;; *************** function _btPress *****************
 13498 ;; Defined at:
 13499 ;;		line 53 in file "teclado.h"
 13500 ;; Parameters:    Size  Location     Type
 13501 ;;  bt              1    wreg     unsigned char 
 13502 ;; Auto vars:     Size  Location     Type
 13503 ;;  bt              1    0[BANK0 ] unsigned char 
 13504 ;; Return value:  Size  Location     Type
 13505 ;;                  1    wreg      unsigned char 
 13506 ;; Registers used:
 13507 ;;		wreg, status,2, status,0
 13508 ;; Tracked objects:
 13509 ;;		On entry : 0/0
 13510 ;;		On exit  : 0/0
 13511 ;;		Unchanged: 0/0
 13512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13513 ;;      Params:         0       0       0       0       0       0       0
 13514 ;;      Locals:         0       1       0       0       0       0       0
 13515 ;;      Temps:          0       0       0       0       0       0       0
 13516 ;;      Totals:         0       1       0       0       0       0       0
 13517 ;;Total ram usage:        1 bytes
 13518 ;; Hardware stack levels used:    1
 13519 ;; Hardware stack levels required when called:    6
 13520 ;; This function calls:
 13521 ;;		Nothing
 13522 ;; This function is called by:
 13523 ;;		_acaoTesteBombas
 13524 ;;		_telaPrincipal
 13525 ;;		_tela_ajusteRTC
 13526 ;;		_tela_testeBombas
 13527 ;;		_dataLoger
 13528 ;;		_informacoes
 13529 ;;		_configuraTelefones
 13530 ;;		_configurarEstacionaria
 13531 ;;		_ajusteSP_Bombas
 13532 ;;		_main
 13533 ;; This function uses a non-reentrant model
 13534 ;;
 13535                           
 13536                           	psect	text42
 13537  0075CC                     __ptext42:
 13538                           	opt stack 0
 13539  0075CC                     _btPress:
 13540                           	opt stack 0
 13541  0075CC  FFFF               	dw	65535	; assembler added errata NOP
 13542                           
 13543                           ; BSR set to: 0
 13544                           ;incstack = 0
 13545                           ;btPress@bt stored from wreg
 13546  0075CE  0100               	movlb	0	; () banked
 13547  0075D0  6F80               	movwf	btPress@bt& (0+255),b
 13548                           
 13549                           ;teclado.h: 54: switch (bt) {
 13550  0075D2  D021               	goto	l469
 13551  0075D4  FFFF               	dw	65535	; assembler added errata NOP
 13552  0075D6  5064               	movf	__b_esc,w,c
 13553  0075D8  B4D8               	btfsc	status,2,c
 13554  0075DA  D01A               	goto	l478
 13555                           
 13556                           ;teclado.h: 56: _b_esc = 0;
 13557  0075DC  0E00               	movlw	0
 13558  0075DE  6E64               	movwf	__b_esc,c
 13559  0075E0  D014               	goto	l5916
 13560  0075E2  FFFF               	dw	65535	; assembler added errata NOP
 13561                           
 13562                           ;teclado.h: 61: if (_b_mais) {
 13563  0075E4  5060               	movf	__b_mais,w,c
 13564  0075E6  B4D8               	btfsc	status,2,c
 13565  0075E8  D013               	goto	l478
 13566                           
 13567                           ;teclado.h: 62: _b_mais = 0;
 13568  0075EA  0E00               	movlw	0
 13569  0075EC  6E60               	movwf	__b_mais,c
 13570  0075EE  D00D               	goto	l5916
 13571  0075F0  FFFF               	dw	65535	; assembler added errata NOP
 13572  0075F2  5062               	movf	__b_menos,w,c
 13573  0075F4  B4D8               	btfsc	status,2,c
 13574  0075F6  D00C               	goto	l478
 13575                           
 13576                           ;teclado.h: 67: _b_menos = 0;
 13577  0075F8  0E00               	movlw	0
 13578  0075FA  6E62               	movwf	__b_menos,c
 13579  0075FC  D006               	goto	l5916
 13580  0075FE  FFFF               	dw	65535	; assembler added errata NOP
 13581  007600  505E               	movf	__b_ok,w,c
 13582  007602  B4D8               	btfsc	status,2,c
 13583  007604  D005               	goto	l478
 13584                           
 13585                           ;teclado.h: 72: _b_ok = 0;
 13586  007606  0E00               	movlw	0
 13587  007608  6E5E               	movwf	__b_ok,c
 13588  00760A                     l5916:
 13589  00760A  FFFF               	dw	65535	; assembler added errata NOP
 13590                           
 13591                           ;teclado.h: 73: return 1;
 13592  00760C  0E01               	movlw	1
 13593  00760E  D013               	goto	l480
 13594  007610                     l478:
 13595  007610  FFFF               	dw	65535	; assembler added errata NOP
 13596                           
 13597                           ;teclado.h: 76: default: return 0;
 13598                           
 13599                           ;teclado.h: 74: }
 13600                           ;teclado.h: 75: return 0;
 13601  007612  0E00               	movlw	0
 13602                           
 13603                           ;teclado.h: 77: }
 13604  007614  D010               	goto	l480
 13605  007616                     l469:
 13606  007616  FFFF               	dw	65535	; assembler added errata NOP
 13607  007618  0100               	movlb	0	; () banked
 13608  00761A  5180               	movf	btPress@bt& (0+255),w,b
 13609                           
 13610                           ; Switch size 1, requested type "space"
 13611                           ; Number of cases is 4, Range of values is 1 to 4
 13612                           ; switch strategies available:
 13613                           ; Name         Instructions Cycles
 13614                           ; simple_byte           13     7 (average)
 13615                           ;	Chosen strategy is simple_byte
 13616  00761C  0A01               	xorlw	1	; case 1
 13617  00761E  B4D8               	btfsc	status,2,c
 13618  007620  D7D9               	goto	l470
 13619  007622  0A03               	xorlw	3	; case 2
 13620  007624  B4D8               	btfsc	status,2,c
 13621  007626  D7E4               	goto	l475
 13622  007628  0A01               	xorlw	1	; case 3
 13623  00762A  B4D8               	btfsc	status,2,c
 13624  00762C  D7DA               	goto	l473
 13625  00762E  0A07               	xorlw	7	; case 4
 13626  007630  B4D8               	btfsc	status,2,c
 13627  007632  D7E5               	goto	l477
 13628  007634  D7ED               	goto	l478
 13629  007636                     l480:
 13630  007636  FFFF               	dw	65535	; assembler added errata NOP
 13631                           
 13632                           ; BSR set to: 0
 13633  007638  0012               	return		;funcret
 13634  00763A  FFFF               	dw	65535	; errata NOP
 13635  00763C                     __end_of_btPress:
 13636                           	opt stack 0
 13637                           tblptru	equ	0xFF8
 13638                           tblptrh	equ	0xFF7
 13639                           tblptrl	equ	0xFF6
 13640                           tablat	equ	0xFF5
 13641                           prodh	equ	0xFF4
 13642                           prodl	equ	0xFF3
 13643                           intcon	equ	0xFF2
 13644                           postinc0	equ	0xFEE
 13645                           wreg	equ	0xFE8
 13646                           postdec1	equ	0xFE5
 13647                           fsr1l	equ	0xFE1
 13648                           indf2	equ	0xFDF
 13649                           postinc2	equ	0xFDE
 13650                           fsr2h	equ	0xFDA
 13651                           fsr2l	equ	0xFD9
 13652                           status	equ	0xFD8
 13653                           
 13654 ;; *************** function _acaoBombas *****************
 13655 ;; Defined at:
 13656 ;;		line 18 in file "controle.h"
 13657 ;; Parameters:    Size  Location     Type
 13658 ;;		None
 13659 ;; Auto vars:     Size  Location     Type
 13660 ;;		None
 13661 ;; Return value:  Size  Location     Type
 13662 ;;                  1    wreg      void 
 13663 ;; Registers used:
 13664 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13665 ;; Tracked objects:
 13666 ;;		On entry : 0/0
 13667 ;;		On exit  : 0/0
 13668 ;;		Unchanged: 0/0
 13669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13670 ;;      Params:         0       0       0       0       0       0       0
 13671 ;;      Locals:         0       0       0       0       0       0       0
 13672 ;;      Temps:          0       3       0       0       0       0       0
 13673 ;;      Totals:         0       3       0       0       0       0       0
 13674 ;;Total ram usage:        3 bytes
 13675 ;; Hardware stack levels used:    1
 13676 ;; Hardware stack levels required when called:   10
 13677 ;; This function calls:
 13678 ;;		_enviaSMS
 13679 ;;		_partidaBombaEstacionaria
 13680 ;; This function is called by:
 13681 ;;		_main
 13682 ;; This function uses a non-reentrant model
 13683 ;;
 13684                           
 13685                           	psect	text43
 13686  0030F8                     __ptext43:
 13687                           	opt stack 0
 13688  0030F8                     _acaoBombas:
 13689                           	opt stack 0
 13690  0030F8  FFFF               	dw	65535	; assembler added errata NOP
 13691                           
 13692                           ;controle.h: 19: if(executandoTeste){
 13693                           
 13694                           ;incstack = 0
 13695  0030FA  0100               	movlb	0	; () banked
 13696  0030FC  51F1               	movf	_executandoTeste& (0+255),w,b
 13697  0030FE  A4D8               	btfss	status,2,c
 13698  003100  D087               	goto	l492
 13699                           
 13700                           ; BSR set to: 0
 13701                           ;controle.h: 21: }
 13702                           ;controle.h: 23: if (pressao >= sp_pressao_rede && !ocorrendoIncendio) {
 13703                           
 13704                           ; BSR set to: 0
 13705                           
 13706                           ; BSR set to: 0
 13707                           ;controle.h: 20: return;
 13708  003102  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 13709  003104  6FC8               	movwf	??_acaoBombas& (0+255),b
 13710  003106  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13711  003108  51C8               	movf	??_acaoBombas& (0+255),w,b
 13712  00310A  5DF8               	subwf	_pressao& (0+255),w,b
 13713  00310C  51F9               	movf	(_pressao+1)& (0+255),w,b
 13714  00310E  0A80               	xorlw	128
 13715  003110  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13716  003112  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13717  003114  0A80               	xorlw	128
 13718  003116  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13719  003118  A0D8               	btfss	status,0,c
 13720  00311A  D00B               	goto	l485
 13721                           
 13722                           ; BSR set to: 0
 13723  00311C  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13724  00311E  A4D8               	btfss	status,2,c
 13725  003120  D008               	goto	l485
 13726                           
 13727                           ; BSR set to: 0
 13728                           ;controle.h: 24: shift[6] = 0;
 13729  003122  0E00               	movlw	0
 13730  003124  6E4A               	movwf	_shift+6,c
 13731                           
 13732                           ;controle.h: 25: shift[5] = 0;
 13733  003126  0E00               	movlw	0
 13734  003128  6E49               	movwf	_shift+5,c
 13735                           
 13736                           ; BSR set to: 0
 13737                           ;controle.h: 26: partidaBombaEstacionaria(0);
 13738  00312A  0E00               	movlw	0
 13739  00312C  EC84  F01C         	call	_partidaBombaEstacionaria
 13740                           
 13741                           ;controle.h: 27: return;
 13742  003130  D06F               	goto	l492
 13743  003132                     l485:
 13744  003132  FFFF               	dw	65535	; assembler added errata NOP
 13745                           
 13746                           ;controle.h: 28: }
 13747                           ;controle.h: 30: shift[2] = 0;
 13748  003134  0E00               	movlw	0
 13749  003136  6E46               	movwf	_shift+2,c
 13750                           
 13751                           ;controle.h: 31: if (pressao <= sp_jockey) {
 13752  003138  0100               	movlb	0	; () banked
 13753  00313A  51E4               	movf	_sp_jockey& (0+255),w,b
 13754  00313C  6FC8               	movwf	??_acaoBombas& (0+255),b
 13755  00313E  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13756  003140  51F8               	movf	_pressao& (0+255),w,b
 13757  003142  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13758  003144  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13759  003146  0A80               	xorlw	128
 13760  003148  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13761  00314A  51F9               	movf	(_pressao+1)& (0+255),w,b
 13762  00314C  0A80               	xorlw	128
 13763  00314E  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13764  003150  A0D8               	btfss	status,0,c
 13765  003152  D002               	goto	l486
 13766                           
 13767                           ; BSR set to: 0
 13768                           ;controle.h: 32: shift[6] = 1;
 13769  003154  0E01               	movlw	1
 13770  003156  D012               	goto	L35
 13771  003158                     l486:
 13772  003158  FFFF               	dw	65535	; assembler added errata NOP
 13773                           
 13774                           ; BSR set to: 0
 13775                           
 13776                           ; BSR set to: 0
 13777  00315A  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 13778  00315C  6FC8               	movwf	??_acaoBombas& (0+255),b
 13779  00315E  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13780  003160  51C8               	movf	??_acaoBombas& (0+255),w,b
 13781  003162  5DF8               	subwf	_pressao& (0+255),w,b
 13782  003164  51F9               	movf	(_pressao+1)& (0+255),w,b
 13783  003166  0A80               	xorlw	128
 13784  003168  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13785  00316A  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13786  00316C  0A80               	xorlw	128
 13787  00316E  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13788  003170  A0D8               	btfss	status,0,c
 13789  003172  D006               	goto	l488
 13790                           
 13791                           ; BSR set to: 0
 13792  003174  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13793  003176  A4D8               	btfss	status,2,c
 13794  003178  D003               	goto	l488
 13795                           
 13796                           ; BSR set to: 0
 13797                           ;controle.h: 34: shift[6] = 0;
 13798  00317A  0E00               	movlw	0
 13799  00317C                     L35:
 13800  00317C  FFFF               	dw	65535	; assembler added errata NOP
 13801  00317E  6E4A               	movwf	_shift+6,c
 13802  003180                     l488:
 13803  003180  FFFF               	dw	65535	; assembler added errata NOP
 13804                           
 13805                           ; BSR set to: 0
 13806                           ;controle.h: 35: }
 13807                           ;controle.h: 37: if (pressao <= sp_principal) {
 13808                           
 13809                           ; BSR set to: 0
 13810                           
 13811                           ; BSR set to: 0
 13812  003182  51E3               	movf	_sp_principal& (0+255),w,b
 13813  003184  6FC8               	movwf	??_acaoBombas& (0+255),b
 13814  003186  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13815  003188  51F8               	movf	_pressao& (0+255),w,b
 13816  00318A  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13817  00318C  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13818  00318E  0A80               	xorlw	128
 13819  003190  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13820  003192  51F9               	movf	(_pressao+1)& (0+255),w,b
 13821  003194  0A80               	xorlw	128
 13822  003196  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13823  003198  A0D8               	btfss	status,0,c
 13824  00319A  D004               	goto	l489
 13825                           
 13826                           ; BSR set to: 0
 13827                           ;controle.h: 38: ocorrendoIncendio = 1;
 13828  00319C  0E01               	movlw	1
 13829  00319E  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
 13830                           
 13831                           ;controle.h: 39: shift[5] = 1;
 13832  0031A0  0E01               	movlw	1
 13833  0031A2  6E49               	movwf	_shift+5,c
 13834  0031A4                     l489:
 13835  0031A4  FFFF               	dw	65535	; assembler added errata NOP
 13836                           
 13837                           ; BSR set to: 0
 13838                           ;controle.h: 43: }
 13839                           ;controle.h: 44: if (pressao >= sp_pressao_rede && !ocorrendoIncendio) {
 13840                           
 13841                           ; BSR set to: 0
 13842  0031A6  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 13843  0031A8  6FC8               	movwf	??_acaoBombas& (0+255),b
 13844  0031AA  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13845  0031AC  51C8               	movf	??_acaoBombas& (0+255),w,b
 13846  0031AE  5DF8               	subwf	_pressao& (0+255),w,b
 13847  0031B0  51F9               	movf	(_pressao+1)& (0+255),w,b
 13848  0031B2  0A80               	xorlw	128
 13849  0031B4  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13850  0031B6  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13851  0031B8  0A80               	xorlw	128
 13852  0031BA  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13853  0031BC  A0D8               	btfss	status,0,c
 13854  0031BE  D008               	goto	l490
 13855                           
 13856                           ; BSR set to: 0
 13857  0031C0  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13858  0031C2  A4D8               	btfss	status,2,c
 13859  0031C4  D005               	goto	l490
 13860                           
 13861                           ; BSR set to: 0
 13862                           ;controle.h: 45: shift[5] = 0;
 13863  0031C6  0E00               	movlw	0
 13864  0031C8  6E49               	movwf	_shift+5,c
 13865                           
 13866                           ; BSR set to: 0
 13867                           ;controle.h: 46: partidaBombaEstacionaria(0);
 13868  0031CA  0E00               	movlw	0
 13869  0031CC  EC84  F01C         	call	_partidaBombaEstacionaria
 13870  0031D0                     l490:
 13871  0031D0  FFFF               	dw	65535	; assembler added errata NOP
 13872                           
 13873                           ;controle.h: 47: }
 13874                           ;controle.h: 49: if (pressao <= sp_estacionaria) {
 13875  0031D2  0100               	movlb	0	; () banked
 13876  0031D4  51E2               	movf	_sp_estacionaria& (0+255),w,b
 13877  0031D6  6FC8               	movwf	??_acaoBombas& (0+255),b
 13878  0031D8  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13879  0031DA  51F8               	movf	_pressao& (0+255),w,b
 13880  0031DC  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13881  0031DE  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13882  0031E0  0A80               	xorlw	128
 13883  0031E2  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13884  0031E4  51F9               	movf	(_pressao+1)& (0+255),w,b
 13885  0031E6  0A80               	xorlw	128
 13886  0031E8  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13887  0031EA  A0D8               	btfss	status,0,c
 13888  0031EC  D006               	goto	l491
 13889                           
 13890                           ; BSR set to: 0
 13891                           ;controle.h: 50: partidaBombaEstacionaria(1);
 13892  0031EE  0E01               	movlw	1
 13893  0031F0  EC84  F01C         	call	_partidaBombaEstacionaria
 13894                           
 13895                           ;controle.h: 51: ocorrendoIncendio = 1;
 13896  0031F4  0E01               	movlw	1
 13897  0031F6  0100               	movlb	0	; () banked
 13898  0031F8  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
 13899  0031FA                     l491:
 13900  0031FA  FFFF               	dw	65535	; assembler added errata NOP
 13901                           
 13902                           ; BSR set to: 0
 13903                           ;controle.h: 52: }
 13904                           ;controle.h: 54: if (ocorrendoIncendio) {
 13905                           
 13906                           ; BSR set to: 0
 13907  0031FC  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13908  0031FE  B4D8               	btfsc	status,2,c
 13909  003200  D007               	goto	l492
 13910                           
 13911                           ; BSR set to: 0
 13912                           ;controle.h: 55: gsmOcupado = 1;
 13913  003202  0E01               	movlw	1
 13914  003204  6FF4               	movwf	_gsmOcupado& (0+255),b
 13915                           
 13916                           ; BSR set to: 0
 13917                           ;controle.h: 56: enviaSMS(1);
 13918  003206  0E01               	movlw	1
 13919  003208  ECF1  F00A         	call	_enviaSMS
 13920                           
 13921                           ;controle.h: 57: shift[1] = 1;
 13922  00320C  0E01               	movlw	1
 13923  00320E  6E45               	movwf	_shift+1,c
 13924  003210                     l492:
 13925  003210  FFFF               	dw	65535	; assembler added errata NOP
 13926  003212  0012               	return		;funcret
 13927  003214  FFFF               	dw	65535	; errata NOP
 13928  003216                     __end_of_acaoBombas:
 13929                           	opt stack 0
 13930                           tblptru	equ	0xFF8
 13931                           tblptrh	equ	0xFF7
 13932                           tblptrl	equ	0xFF6
 13933                           tablat	equ	0xFF5
 13934                           prodh	equ	0xFF4
 13935                           prodl	equ	0xFF3
 13936                           intcon	equ	0xFF2
 13937                           postinc0	equ	0xFEE
 13938                           wreg	equ	0xFE8
 13939                           postdec1	equ	0xFE5
 13940                           fsr1l	equ	0xFE1
 13941                           indf2	equ	0xFDF
 13942                           postinc2	equ	0xFDE
 13943                           fsr2h	equ	0xFDA
 13944                           fsr2l	equ	0xFD9
 13945                           status	equ	0xFD8
 13946                           
 13947 ;; *************** function _partidaBombaEstacionaria *****************
 13948 ;; Defined at:
 13949 ;;		line 61 in file "controle.h"
 13950 ;; Parameters:    Size  Location     Type
 13951 ;;  acao            1    wreg     unsigned char 
 13952 ;; Auto vars:     Size  Location     Type
 13953 ;;  acao            1    3[BANK0 ] unsigned char 
 13954 ;; Return value:  Size  Location     Type
 13955 ;;                  1    wreg      void 
 13956 ;; Registers used:
 13957 ;;		wreg, status,2, status,0, cstack
 13958 ;; Tracked objects:
 13959 ;;		On entry : 0/0
 13960 ;;		On exit  : 0/0
 13961 ;;		Unchanged: 0/0
 13962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13963 ;;      Params:         0       0       0       0       0       0       0
 13964 ;;      Locals:         0       1       0       0       0       0       0
 13965 ;;      Temps:          0       0       0       0       0       0       0
 13966 ;;      Totals:         0       1       0       0       0       0       0
 13967 ;;Total ram usage:        1 bytes
 13968 ;; Hardware stack levels used:    1
 13969 ;; Hardware stack levels required when called:    7
 13970 ;; This function calls:
 13971 ;;		_delay
 13972 ;; This function is called by:
 13973 ;;		_acaoBombas
 13974 ;;		_acaoTesteBombas
 13975 ;; This function uses a non-reentrant model
 13976 ;;
 13977                           
 13978                           	psect	text44
 13979  003908                     __ptext44:
 13980                           	opt stack 0
 13981  003908                     _partidaBombaEstacionaria:
 13982                           	opt stack 0
 13983  003908  FFFF               	dw	65535	; assembler added errata NOP
 13984                           
 13985                           ;incstack = 0
 13986                           ;partidaBombaEstacionaria@acao stored from wreg
 13987  00390A  0100               	movlb	0	; () banked
 13988  00390C  6F83               	movwf	partidaBombaEstacionaria@acao& (0+255),b
 13989                           
 13990                           ;controle.h: 62: if (acao == 1 && !flagEstacionariaLigada) {
 13991  00390E  0100               	movlb	0	; () banked
 13992  003910  0583               	decf	partidaBombaEstacionaria@acao& (0+255),w,b
 13993  003912  A4D8               	btfss	status,2,c
 13994  003914  D01A               	goto	l497
 13995                           
 13996                           ; BSR set to: 0
 13997  003916  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 13998  003918  A4D8               	btfss	status,2,c
 13999  00391A  D017               	goto	l497
 14000                           
 14001                           ; BSR set to: 0
 14002                           ;controle.h: 63: if (_sec_partida != _sec) {
 14003  00391C  51EF               	movf	__sec& (0+255),w,b
 14004  00391E  1870               	xorwf	__sec_partida,w,c
 14005  003920  B4D8               	btfsc	status,2,c
 14006  003922  D013               	goto	l497
 14007                           
 14008                           ; BSR set to: 0
 14009                           ;controle.h: 64: _sec_partida = _sec;
 14010  003924  C0EF  F070         	movff	__sec,__sec_partida
 14011                           
 14012                           ; BSR set to: 0
 14013                           ;controle.h: 65: tempo_limite_partida++;
 14014  003928  2A6C               	incf	_tempo_limite_partida,f,c
 14015                           
 14016                           ;controle.h: 66: tempo_partida++;
 14017  00392A  2A6D               	incf	_tempo_partida,f,c
 14018                           
 14019                           ; BSR set to: 0
 14020                           ;controle.h: 67: if (!PORTAbits.RA5) {
 14021  00392C  BA80               	btfsc	3968,5,c	;volatile
 14022  00392E  D00D               	goto	l497
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;controle.h: 68: delay(700);
 14026  003930  0E02               	movlw	2
 14027  003932  6F81               	movwf	(delay@x+1)& (0+255),b
 14028  003934  0EBC               	movlw	188
 14029  003936  6F80               	movwf	delay@x& (0+255),b
 14030  003938  EC74  F037         	call	_delay	;wreg free
 14031                           
 14032                           ;controle.h: 69: flagEstacionariaLigada = 1;
 14033  00393C  0E01               	movlw	1
 14034  00393E  0100               	movlb	0	; () banked
 14035  003940  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14036                           
 14037                           ; BSR set to: 0
 14038                           ;controle.h: 70: tempo_partida = 0;
 14039  003942  0E00               	movlw	0
 14040  003944  6E6D               	movwf	_tempo_partida,c
 14041                           
 14042                           ; BSR set to: 0
 14043                           ;controle.h: 71: shift[4] = 0;
 14044  003946  0E00               	movlw	0
 14045  003948  6E48               	movwf	_shift+4,c
 14046  00394A                     l497:
 14047  00394A  FFFF               	dw	65535	; assembler added errata NOP
 14048                           
 14049                           ; BSR set to: 0
 14050                           ;controle.h: 72: }
 14051                           ;controle.h: 73: }
 14052                           ;controle.h: 74: }
 14053                           ;controle.h: 75: if (!flagEstacionariaLigada && status_estacionaria == 1) {
 14054                           
 14055                           ; BSR set to: 0
 14056                           
 14057                           ; BSR set to: 0
 14058                           
 14059                           ; BSR set to: 0
 14060  00394C  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 14061  00394E  A4D8               	btfss	status,2,c
 14062  003950  D015               	goto	l502
 14063                           
 14064                           ; BSR set to: 0
 14065  003952  05FB               	decf	_status_estacionaria& (0+255),w,b
 14066  003954  A4D8               	btfss	status,2,c
 14067  003956  D012               	goto	l502
 14068                           
 14069                           ; BSR set to: 0
 14070                           ;controle.h: 76: shift[3] = 1;
 14071  003958  0E01               	movlw	1
 14072  00395A  6E47               	movwf	_shift+3,c
 14073                           
 14074                           ; BSR set to: 0
 14075                           ;controle.h: 77: if (tempo_partida <= 7) {
 14076  00395C  0E08               	movlw	8
 14077  00395E  606D               	cpfslt	_tempo_partida,c
 14078  003960  D002               	goto	l499
 14079                           
 14080                           ; BSR set to: 0
 14081                           ;controle.h: 78: shift[4] = 1;
 14082  003962  0E01               	movlw	1
 14083  003964  D005               	goto	L36
 14084  003966                     l499:
 14085  003966  FFFF               	dw	65535	; assembler added errata NOP
 14086                           
 14087                           ; BSR set to: 0
 14088                           
 14089                           ; BSR set to: 0
 14090  003968  0E10               	movlw	16
 14091  00396A  606D               	cpfslt	_tempo_partida,c
 14092  00396C  D004               	goto	l501
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;controle.h: 80: shift[4] = 0;
 14096  00396E  0E00               	movlw	0
 14097  003970                     L36:
 14098  003970  FFFF               	dw	65535	; assembler added errata NOP
 14099  003972  6E48               	movwf	_shift+4,c
 14100                           
 14101                           ;controle.h: 81: } else {
 14102  003974  D003               	goto	l502
 14103  003976                     l501:
 14104  003976  FFFF               	dw	65535	; assembler added errata NOP
 14105                           
 14106                           ; BSR set to: 0
 14107                           ;controle.h: 82: tempo_partida = 0;
 14108                           
 14109                           ; BSR set to: 0
 14110  003978  0E00               	movlw	0
 14111  00397A  6E6D               	movwf	_tempo_partida,c
 14112  00397C                     l502:
 14113  00397C  FFFF               	dw	65535	; assembler added errata NOP
 14114                           
 14115                           ; BSR set to: 0
 14116                           ;controle.h: 83: }
 14117                           ;controle.h: 84: }
 14118                           ;controle.h: 85: if (tempo_limite_partida > tempo_limite_estacionaria) {
 14119                           
 14120                           ; BSR set to: 0
 14121                           
 14122                           ; BSR set to: 0
 14123                           
 14124                           ; BSR set to: 0
 14125  00397E  506C               	movf	_tempo_limite_partida,w,c
 14126  003980  5DE6               	subwf	_tempo_limite_estacionaria& (0+255),w,b
 14127  003982  B0D8               	btfsc	status,0,c
 14128  003984  D00A               	goto	l503
 14129                           
 14130                           ; BSR set to: 0
 14131                           ;controle.h: 86: tempo_limite_partida = 0;
 14132  003986  0E00               	movlw	0
 14133  003988  6E6C               	movwf	_tempo_limite_partida,c
 14134                           
 14135                           ;controle.h: 87: status_estacionaria = 0;
 14136  00398A  0E00               	movlw	0
 14137  00398C  6FFB               	movwf	_status_estacionaria& (0+255),b
 14138                           
 14139                           ;controle.h: 88: flagEstacionariaLigada = 0;
 14140  00398E  0E00               	movlw	0
 14141  003990  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14142                           
 14143                           ;controle.h: 89: shift[3] = 0;
 14144  003992  0E00               	movlw	0
 14145  003994  6E47               	movwf	_shift+3,c
 14146                           
 14147                           ;controle.h: 90: shift[4] = 0;
 14148  003996  0E00               	movlw	0
 14149  003998  6E48               	movwf	_shift+4,c
 14150  00399A                     l503:
 14151  00399A  FFFF               	dw	65535	; assembler added errata NOP
 14152                           
 14153                           ; BSR set to: 0
 14154                           ;controle.h: 91: }
 14155                           ;controle.h: 94: if (acao == 0) {
 14156  00399C  5183               	movf	partidaBombaEstacionaria@acao& (0+255),w,b
 14157  00399E  A4D8               	btfss	status,2,c
 14158  0039A0  D00A               	goto	l504
 14159                           
 14160                           ; BSR set to: 0
 14161                           ;controle.h: 95: flagEstacionariaLigada = 0;
 14162  0039A2  0E00               	movlw	0
 14163  0039A4  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14164                           
 14165                           ;controle.h: 96: shift[4] = 0;
 14166  0039A6  0E00               	movlw	0
 14167  0039A8  6E48               	movwf	_shift+4,c
 14168                           
 14169                           ;controle.h: 97: shift[3] = 0;
 14170  0039AA  0E00               	movlw	0
 14171  0039AC  6E47               	movwf	_shift+3,c
 14172                           
 14173                           ;controle.h: 98: tempo_partida = 0;
 14174  0039AE  0E00               	movlw	0
 14175  0039B0  6E6D               	movwf	_tempo_partida,c
 14176                           
 14177                           ;controle.h: 99: tempo_limite_partida = 0;
 14178  0039B2  0E00               	movlw	0
 14179  0039B4  6E6C               	movwf	_tempo_limite_partida,c
 14180  0039B6                     l504:
 14181  0039B6  FFFF               	dw	65535	; assembler added errata NOP
 14182                           
 14183                           ; BSR set to: 0
 14184                           ;controle.h: 100: }
 14185                           ;controle.h: 102: if (status_estacionaria == 0) {
 14186  0039B8  51FB               	movf	_status_estacionaria& (0+255),w,b
 14187  0039BA  A4D8               	btfss	status,2,c
 14188  0039BC  D006               	goto	l505
 14189                           
 14190                           ; BSR set to: 0
 14191                           ;controle.h: 103: shift[3] = 0;
 14192  0039BE  0E00               	movlw	0
 14193  0039C0  6E47               	movwf	_shift+3,c
 14194                           
 14195                           ;controle.h: 104: shift[4] = 0;
 14196  0039C2  0E00               	movlw	0
 14197  0039C4  6E48               	movwf	_shift+4,c
 14198                           
 14199                           ;controle.h: 105: tempo_partida = 0;
 14200  0039C6  0E00               	movlw	0
 14201  0039C8  6E6D               	movwf	_tempo_partida,c
 14202  0039CA                     l505:
 14203  0039CA  FFFF               	dw	65535	; assembler added errata NOP
 14204                           
 14205                           ; BSR set to: 0
 14206                           ;controle.h: 106: }
 14207                           ;controle.h: 107: if (flagEstacionariaLigada) {
 14208  0039CC  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 14209  0039CE  B4D8               	btfsc	status,2,c
 14210  0039D0  D00A               	goto	l508
 14211                           
 14212                           ; BSR set to: 0
 14213                           ;controle.h: 108: if (!PORTAbits.RA5) {
 14214  0039D2  BA80               	btfsc	3968,5,c	;volatile
 14215  0039D4  D005               	goto	l507
 14216                           
 14217                           ; BSR set to: 0
 14218                           ;controle.h: 109: shift[4] = 0;
 14219  0039D6  0E00               	movlw	0
 14220  0039D8  6E48               	movwf	_shift+4,c
 14221                           
 14222                           ;controle.h: 110: tempo_limite_partida = 0;
 14223  0039DA  0E00               	movlw	0
 14224  0039DC  6E6C               	movwf	_tempo_limite_partida,c
 14225                           
 14226                           ;controle.h: 111: } else {
 14227  0039DE  D003               	goto	l508
 14228  0039E0                     l507:
 14229  0039E0  FFFF               	dw	65535	; assembler added errata NOP
 14230                           
 14231                           ; BSR set to: 0
 14232                           ;controle.h: 112: flagEstacionariaLigada = 0;
 14233                           
 14234                           ; BSR set to: 0
 14235  0039E2  0E00               	movlw	0
 14236  0039E4  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14237  0039E6                     l508:
 14238  0039E6  FFFF               	dw	65535	; assembler added errata NOP
 14239                           
 14240                           ; BSR set to: 0
 14241                           
 14242                           ; BSR set to: 0
 14243                           
 14244                           ; BSR set to: 0
 14245  0039E8  0012               	return		;funcret
 14246  0039EA  FFFF               	dw	65535	; errata NOP
 14247  0039EC                     __end_of_partidaBombaEstacionaria:
 14248                           	opt stack 0
 14249                           tblptru	equ	0xFF8
 14250                           tblptrh	equ	0xFF7
 14251                           tblptrl	equ	0xFF6
 14252                           tablat	equ	0xFF5
 14253                           prodh	equ	0xFF4
 14254                           prodl	equ	0xFF3
 14255                           intcon	equ	0xFF2
 14256                           postinc0	equ	0xFEE
 14257                           wreg	equ	0xFE8
 14258                           postdec1	equ	0xFE5
 14259                           fsr1l	equ	0xFE1
 14260                           indf2	equ	0xFDF
 14261                           postinc2	equ	0xFDE
 14262                           fsr2h	equ	0xFDA
 14263                           fsr2l	equ	0xFD9
 14264                           status	equ	0xFD8
 14265                           
 14266 ;; *************** function _enviaSMS *****************
 14267 ;; Defined at:
 14268 ;;		line 137 in file "comunicacao.h"
 14269 ;; Parameters:    Size  Location     Type
 14270 ;;  tipo            1    wreg     unsigned char 
 14271 ;; Auto vars:     Size  Location     Type
 14272 ;;  tipo            1   71[BANK0 ] unsigned char 
 14273 ;; Return value:  Size  Location     Type
 14274 ;;                  1    wreg      void 
 14275 ;; Registers used:
 14276 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14277 ;; Tracked objects:
 14278 ;;		On entry : 0/0
 14279 ;;		On exit  : 0/0
 14280 ;;		Unchanged: 0/0
 14281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14282 ;;      Params:         0       0       0       0       0       0       0
 14283 ;;      Locals:         0      11       0       0       0       0       0
 14284 ;;      Temps:          0       2       0       0       0       0       0
 14285 ;;      Totals:         0      13       0       0       0       0       0
 14286 ;;Total ram usage:       13 bytes
 14287 ;; Hardware stack levels used:    1
 14288 ;; Hardware stack levels required when called:    9
 14289 ;; This function calls:
 14290 ;;		_aguardaBuffer
 14291 ;;		_delay
 14292 ;;		_limparBuffer
 14293 ;;		_printf
 14294 ;;		_writeChar
 14295 ;; This function is called by:
 14296 ;;		_acaoBombas
 14297 ;;		_acaoTesteBombas
 14298 ;; This function uses a non-reentrant model
 14299 ;;
 14300                           
 14301                           	psect	text45
 14302  0015E2                     __ptext45:
 14303                           	opt stack 0
 14304  0015E2                     _enviaSMS:
 14305                           	opt stack 0
 14306  0015E2  FFFF               	dw	65535	; assembler added errata NOP
 14307                           
 14308                           ; BSR set to: 0
 14309                           ;incstack = 0
 14310                           ;enviaSMS@tipo stored from wreg
 14311  0015E4  0100               	movlb	0	; () banked
 14312  0015E6  6FC7               	movwf	enviaSMS@tipo& (0+255),b
 14313                           
 14314                           ;comunicacao.h: 138: if (timerReenvioSMS) {
 14315  0015E8  0100               	movlb	0	; () banked
 14316  0015EA  51F6               	movf	_timerReenvioSMS& (0+255),w,b
 14317  0015EC  B4D8               	btfsc	status,2,c
 14318  0015EE  D003               	goto	l350
 14319                           
 14320                           ; BSR set to: 0
 14321                           ;comunicacao.h: 139: gsmOcupado = 0;
 14322  0015F0  0E00               	movlw	0
 14323  0015F2  6FF4               	movwf	_gsmOcupado& (0+255),b
 14324                           
 14325                           ; BSR set to: 0
 14326                           ;comunicacao.h: 140: return;
 14327  0015F4  D19E               	goto	l354
 14328  0015F6                     l350:
 14329  0015F6  FFFF               	dw	65535	; assembler added errata NOP
 14330                           
 14331                           ; BSR set to: 0
 14332                           ;comunicacao.h: 141: };
 14333                           ;comunicacao.h: 142: gsmOcupado = 1;
 14334                           
 14335                           ; BSR set to: 0
 14336  0015F8  0E01               	movlw	1
 14337  0015FA  6FF4               	movwf	_gsmOcupado& (0+255),b
 14338                           
 14339                           ;comunicacao.h: 144: switch (etapaComunicacao) {
 14340  0015FC  D17A               	goto	l352
 14341  0015FE  FFFF               	dw	65535	; assembler added errata NOP
 14342                           
 14343                           ; BSR set to: 0
 14344                           ;comunicacao.h: 146: limparBuffer();
 14345                           
 14346                           ; BSR set to: 0
 14347  001600  EC8F  F037         	call	_limparBuffer	;wreg free
 14348                           
 14349                           ;comunicacao.h: 147: printf("AT\r\n");
 14350  001604  0EDD               	movlw	low STR_4
 14351  001606  0100               	movlb	0	; () banked
 14352  001608  6FA1               	movwf	printf@f& (0+255),b
 14353  00160A  0E7F               	movlw	high STR_4
 14354  00160C  6FA2               	movwf	(printf@f+1)& (0+255),b
 14355  00160E  EC90  F038         	call	_printf	;wreg free
 14356                           
 14357                           ;comunicacao.h: 148: etapaComunicacao++;
 14358  001612  4A51               	infsnz	_etapaComunicacao,f,c
 14359  001614  2A52               	incf	_etapaComunicacao+1,f,c
 14360                           
 14361                           ;comunicacao.h: 149: timerEtapaComunicacao = 6;
 14362  001616  0E06               	movlw	6
 14363  001618  0100               	movlb	0	; () banked
 14364  00161A  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14365                           
 14366                           ;comunicacao.h: 150: break;
 14367  00161C  D18A               	goto	l354
 14368  00161E  FFFF               	dw	65535	; assembler added errata NOP
 14369                           
 14370                           ; BSR set to: 0
 14371                           ;comunicacao.h: 152: if (aguardaBuffer("OK")) {
 14372                           
 14373                           ; BSR set to: 0
 14374  001620  0EF9               	movlw	low STR_5
 14375  001622  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14376  001624  0E7F               	movlw	high STR_5
 14377  001626  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14378  001628  EC72  F038         	call	_aguardaBuffer	;wreg free
 14379  00162C  0900               	iorlw	0
 14380  00162E  B4D8               	btfsc	status,2,c
 14381  001630  D00E               	goto	l356
 14382                           
 14383                           ;comunicacao.h: 153: limparBuffer();
 14384  001632  EC8F  F037         	call	_limparBuffer	;wreg free
 14385                           
 14386                           ;comunicacao.h: 154: printf("AT+CMGF=1\r\n");
 14387  001636  0EAD               	movlw	low STR_10
 14388  001638  0100               	movlb	0	; () banked
 14389  00163A  6FA1               	movwf	printf@f& (0+255),b
 14390  00163C  0E7E               	movlw	high STR_10
 14391  00163E  6FA2               	movwf	(printf@f+1)& (0+255),b
 14392  001640  EC90  F038         	call	_printf	;wreg free
 14393                           
 14394                           ;comunicacao.h: 155: etapaComunicacao++;
 14395  001644  4A51               	infsnz	_etapaComunicacao,f,c
 14396  001646  2A52               	incf	_etapaComunicacao+1,f,c
 14397                           
 14398                           ;comunicacao.h: 156: timerEtapaComunicacao = 6;
 14399  001648  0E06               	movlw	6
 14400  00164A  0100               	movlb	0	; () banked
 14401  00164C  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14402  00164E                     l356:
 14403  00164E  FFFF               	dw	65535	; assembler added errata NOP
 14404                           
 14405                           ;comunicacao.h: 157: }
 14406                           ;comunicacao.h: 158: if (!timerEtapaComunicacao) {
 14407                           
 14408                           ; BSR set to: 0
 14409  001650  0100               	movlb	0	; () banked
 14410  001652  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14411  001654  A4D8               	btfss	status,2,c
 14412  001656  D16D               	goto	l354
 14413                           
 14414                           ; BSR set to: 0
 14415                           ;comunicacao.h: 159: writeChar(0x1A);
 14416  001658  0E1A               	movlw	26
 14417  00165A  6F80               	movwf	writeChar@hex& (0+255),b
 14418  00165C  0E00               	movlw	0
 14419  00165E  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 14420  001660  EC31  F036         	call	_writeChar	;wreg free
 14421                           
 14422                           ;comunicacao.h: 160: delay(15);
 14423  001664  0E00               	movlw	0
 14424  001666  0100               	movlb	0	; () banked
 14425  001668  6F81               	movwf	(delay@x+1)& (0+255),b
 14426  00166A  0E0F               	movlw	15
 14427  00166C  6F80               	movwf	delay@x& (0+255),b
 14428  00166E  EC74  F037         	call	_delay	;wreg free
 14429                           
 14430                           ;comunicacao.h: 161: printf("ATH0\r\n");
 14431  001672  0EA9               	movlw	low STR_21
 14432  001674  0100               	movlb	0	; () banked
 14433  001676  6FA1               	movwf	printf@f& (0+255),b
 14434  001678  0E7F               	movlw	high STR_21
 14435  00167A  6FA2               	movwf	(printf@f+1)& (0+255),b
 14436  00167C  EC90  F038         	call	_printf	;wreg free
 14437  001680  D132               	goto	l400
 14438  001682  FFFF               	dw	65535	; assembler added errata NOP
 14439                           
 14440                           ;comunicacao.h: 166: if (aguardaBuffer("OK")) {
 14441  001684  0EF9               	movlw	low STR_5
 14442  001686  0100               	movlb	0	; () banked
 14443  001688  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14444  00168A  0E7F               	movlw	high STR_5
 14445  00168C  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14446  00168E  EC72  F038         	call	_aguardaBuffer	;wreg free
 14447  001692  0900               	iorlw	0
 14448  001694  B4D8               	btfsc	status,2,c
 14449  001696  D0A4               	goto	l366
 14450                           
 14451                           ;comunicacao.h: 167: limparBuffer();
 14452  001698  EC8F  F037         	call	_limparBuffer	;wreg free
 14453                           
 14454                           ;comunicacao.h: 168: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : t
      +                          el2);
 14455  00169C  0100               	movlb	0	; () banked
 14456  00169E  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14457  0016A0  B4D8               	btfsc	status,2,c
 14458  0016A2  D004               	goto	l361
 14459                           
 14460                           ; BSR set to: 0
 14461  0016A4  0EA4               	movlw	low _tel2
 14462  0016A6  6FBD               	movwf	_enviaSMS$1208& (0+255),b
 14463  0016A8  0E01               	movlw	high _tel2
 14464  0016AA  D004               	goto	L39
 14465  0016AC                     l361:
 14466  0016AC  FFFF               	dw	65535	; assembler added errata NOP
 14467                           
 14468                           ; BSR set to: 0
 14469                           
 14470                           ; BSR set to: 0
 14471  0016AE  0EB0               	movlw	low _tel1
 14472  0016B0  6FBD               	movwf	_enviaSMS$1208& (0+255),b
 14473  0016B2  0E01               	movlw	high _tel1
 14474  0016B4                     L39:
 14475  0016B4  FFFF               	dw	65535	; assembler added errata NOP
 14476  0016B6  6FBE               	movwf	(_enviaSMS$1208+1)& (0+255),b
 14477                           
 14478                           ; BSR set to: 0
 14479                           
 14480                           ; BSR set to: 0
 14481  0016B8  0E24               	movlw	low STR_12
 14482  0016BA  6FA1               	movwf	printf@f& (0+255),b
 14483  0016BC  0E7D               	movlw	high STR_12
 14484  0016BE  6FA2               	movwf	(printf@f+1)& (0+255),b
 14485  0016C0  C0BD  F0A3         	movff	_enviaSMS$1208,?_printf+2
 14486  0016C4  C0BE  F0A4         	movff	_enviaSMS$1208+1,?_printf+3
 14487  0016C8  EC90  F038         	call	_printf	;wreg free
 14488                           
 14489                           ;comunicacao.h: 169: timerEtapaComunicacao = 8;
 14490  0016CC  0E08               	movlw	8
 14491  0016CE  FFFF               	dw	65535	; assembler added errata NOP
 14492  0016D0  0100               	movlb	0	; () banked
 14493  0016D2  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14494                           
 14495                           ; BSR set to: 0
 14496                           ;comunicacao.h: 170: etapaComunicacao++;
 14497  0016D4  4A51               	infsnz	_etapaComunicacao,f,c
 14498  0016D6  2A52               	incf	_etapaComunicacao+1,f,c
 14499                           
 14500                           ; BSR set to: 0
 14501  0016D8  D083               	goto	l366
 14502  0016DA  FFFF               	dw	65535	; assembler added errata NOP
 14503                           
 14504                           ; BSR set to: 0
 14505                           ;comunicacao.h: 178: if (aguardaBuffer(">")) {
 14506                           
 14507                           ; BSR set to: 0
 14508  0016DC  0EFC               	movlw	low STR_13
 14509  0016DE  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14510  0016E0  0E7F               	movlw	high STR_13
 14511  0016E2  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14512  0016E4  EC72  F038         	call	_aguardaBuffer	;wreg free
 14513  0016E8  0900               	iorlw	0
 14514  0016EA  B4D8               	btfsc	status,2,c
 14515  0016EC  D079               	goto	l366
 14516                           
 14517                           ;comunicacao.h: 179: limparBuffer();
 14518  0016EE  EC8F  F037         	call	_limparBuffer	;wreg free
 14519                           
 14520                           ;comunicacao.h: 180: if (tipo == 1) {
 14521  0016F2  0100               	movlb	0	; () banked
 14522  0016F4  05C7               	decf	enviaSMS@tipo& (0+255),w,b
 14523  0016F6  A4D8               	btfss	status,2,c
 14524  0016F8  D018               	goto	l367
 14525                           
 14526                           ; BSR set to: 0
 14527                           ;comunicacao.h: 181: printf("DISPARO ALARME DE INCENDIO\r\nEM %02d:%02d:%02d %02d/%02d/%
      +                          02d\r\n", _hor, _min, _sec, _dia, _mes, _ano);
 14528  0016FA  0E95               	movlw	low STR_25
 14529  0016FC  6FA1               	movwf	printf@f& (0+255),b
 14530  0016FE  0E7B               	movlw	high STR_25
 14531  001700  6FA2               	movwf	(printf@f+1)& (0+255),b
 14532  001702  C0ED  F0A3         	movff	__hor,?_printf+2
 14533  001706  6BA4               	clrf	(?_printf+3)& (0+255),b
 14534  001708  C0EE  F0A5         	movff	__min,?_printf+4
 14535  00170C  6BA6               	clrf	(?_printf+5)& (0+255),b
 14536  00170E  C0EF  F0A7         	movff	__sec,?_printf+6
 14537  001712  6BA8               	clrf	(?_printf+7)& (0+255),b
 14538  001714  C0EC  F0A9         	movff	__dia,?_printf+8
 14539  001718  6BAA               	clrf	(?_printf+9)& (0+255),b
 14540  00171A  C0EB  F0AB         	movff	__mes,?_printf+10
 14541  00171E  6BAC               	clrf	(?_printf+11)& (0+255),b
 14542  001720  C0EA  F0AD         	movff	__ano,?_printf+12
 14543  001724  6BAE               	clrf	(?_printf+13)& (0+255),b
 14544  001726  EC90  F038         	call	_printf	;wreg free
 14545  00172A                     l367:
 14546  00172A  FFFF               	dw	65535	; assembler added errata NOP
 14547                           
 14548                           ;comunicacao.h: 182: }
 14549                           ;comunicacao.h: 183: if (tipo == 2) {
 14550  00172C  0E02               	movlw	2
 14551  00172E  0100               	movlb	0	; () banked
 14552  001730  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 14553  001732  A4D8               	btfss	status,2,c
 14554  001734  D04B               	goto	l368
 14555                           
 14556                           ; BSR set to: 0
 14557                           ;comunicacao.h: 184: printf("TESTE DE BOMBAS REALIZADO\r\nEM %02d:%02d:%02d %02d/%02d/%0
      +                          2d\r\nJOCKEY: %s\r\nPRINCIPAL: %s\r\nCOMBUSTAO: %s\r\n",
 14558                           ;comunicacao.h: 185: _hor, _min, _sec, _dia, _mes, _ano, status_jockey == 1 ? "OK" : "FA
      +                          LHA", status_principal == 1 ? "OK" : "FALHA", status_estacionaria == 1 ? "OK" : "FALHA")
      +                          ;
 14559  001736  05FB               	decf	_status_estacionaria& (0+255),w,b
 14560  001738  B4D8               	btfsc	status,2,c
 14561  00173A  D004               	goto	l370
 14562                           
 14563                           ; BSR set to: 0
 14564  00173C  0ED1               	movlw	low STR_28
 14565  00173E  6FBF               	movwf	_enviaSMS$1221& (0+255),b
 14566  001740  0E7F               	movlw	high STR_28
 14567  001742  D004               	goto	L37
 14568  001744                     l370:
 14569  001744  FFFF               	dw	65535	; assembler added errata NOP
 14570                           
 14571                           ; BSR set to: 0
 14572                           
 14573                           ; BSR set to: 0
 14574  001746  0EF9               	movlw	low STR_5
 14575  001748  6FBF               	movwf	_enviaSMS$1221& (0+255),b
 14576  00174A  0E7F               	movlw	high STR_5
 14577  00174C                     L37:
 14578  00174C  FFFF               	dw	65535	; assembler added errata NOP
 14579  00174E  6FC0               	movwf	(_enviaSMS$1221+1)& (0+255),b
 14580                           
 14581                           ; BSR set to: 0
 14582  001750  05FC               	decf	_status_principal& (0+255),w,b
 14583  001752  B4D8               	btfsc	status,2,c
 14584  001754  D004               	goto	l374
 14585                           
 14586                           ; BSR set to: 0
 14587  001756  0ED1               	movlw	low STR_28
 14588  001758  6FC1               	movwf	_enviaSMS$1222& (0+255),b
 14589  00175A  0E7F               	movlw	high STR_28
 14590  00175C  D004               	goto	L38
 14591  00175E                     l374:
 14592  00175E  FFFF               	dw	65535	; assembler added errata NOP
 14593                           
 14594                           ; BSR set to: 0
 14595                           
 14596                           ; BSR set to: 0
 14597  001760  0EF9               	movlw	low STR_5
 14598  001762  6FC1               	movwf	_enviaSMS$1222& (0+255),b
 14599  001764  0E7F               	movlw	high STR_5
 14600  001766                     L38:
 14601  001766  FFFF               	dw	65535	; assembler added errata NOP
 14602  001768  6FC2               	movwf	(_enviaSMS$1222+1)& (0+255),b
 14603                           
 14604                           ; BSR set to: 0
 14605  00176A  05FD               	decf	_status_jockey& (0+255),w,b
 14606  00176C  B4D8               	btfsc	status,2,c
 14607  00176E  D004               	goto	l378
 14608                           
 14609                           ; BSR set to: 0
 14610  001770  0ED1               	movlw	low STR_28
 14611  001772  6FC3               	movwf	_enviaSMS$1223& (0+255),b
 14612  001774  0E7F               	movlw	high STR_28
 14613  001776  D004               	goto	L40
 14614  001778                     l378:
 14615  001778  FFFF               	dw	65535	; assembler added errata NOP
 14616                           
 14617                           ; BSR set to: 0
 14618                           
 14619                           ; BSR set to: 0
 14620  00177A  0EF9               	movlw	low STR_5
 14621  00177C  6FC3               	movwf	_enviaSMS$1223& (0+255),b
 14622  00177E  0E7F               	movlw	high STR_5
 14623  001780                     L40:
 14624  001780  FFFF               	dw	65535	; assembler added errata NOP
 14625  001782  6FC4               	movwf	(_enviaSMS$1223+1)& (0+255),b
 14626                           
 14627                           ; BSR set to: 0
 14628                           
 14629                           ; BSR set to: 0
 14630  001784  0E2D               	movlw	low STR_26
 14631  001786  6FA1               	movwf	printf@f& (0+255),b
 14632  001788  0E7B               	movlw	high STR_26
 14633  00178A  6FA2               	movwf	(printf@f+1)& (0+255),b
 14634  00178C  C0ED  F0A3         	movff	__hor,?_printf+2
 14635  001790  6BA4               	clrf	(?_printf+3)& (0+255),b
 14636  001792  C0EE  F0A5         	movff	__min,?_printf+4
 14637  001796  6BA6               	clrf	(?_printf+5)& (0+255),b
 14638  001798  C0EF  F0A7         	movff	__sec,?_printf+6
 14639  00179C  6BA8               	clrf	(?_printf+7)& (0+255),b
 14640  00179E  C0EC  F0A9         	movff	__dia,?_printf+8
 14641  0017A2  6BAA               	clrf	(?_printf+9)& (0+255),b
 14642  0017A4  C0EB  F0AB         	movff	__mes,?_printf+10
 14643  0017A8  6BAC               	clrf	(?_printf+11)& (0+255),b
 14644  0017AA  C0EA  F0AD         	movff	__ano,?_printf+12
 14645  0017AE  6BAE               	clrf	(?_printf+13)& (0+255),b
 14646  0017B0  C0C3  F0AF         	movff	_enviaSMS$1223,?_printf+14
 14647  0017B4  C0C4  F0B0         	movff	_enviaSMS$1223+1,?_printf+15
 14648  0017B8  C0C1  F0B1         	movff	_enviaSMS$1222,?_printf+16
 14649  0017BC  C0C2  F0B2         	movff	_enviaSMS$1222+1,?_printf+17
 14650  0017C0  C0BF  F0B3         	movff	_enviaSMS$1221,?_printf+18
 14651  0017C4  C0C0  F0B4         	movff	_enviaSMS$1221+1,?_printf+19
 14652  0017C8  EC90  F038         	call	_printf	;wreg free
 14653  0017CC                     l368:
 14654  0017CC  FFFF               	dw	65535	; assembler added errata NOP
 14655                           
 14656                           ;comunicacao.h: 186: }
 14657                           ;comunicacao.h: 187: writeChar(0x1A);
 14658  0017CE  0E1A               	movlw	26
 14659  0017D0  0100               	movlb	0	; () banked
 14660  0017D2  6F80               	movwf	writeChar@hex& (0+255),b
 14661  0017D4  0E00               	movlw	0
 14662  0017D6  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 14663  0017D8  EC31  F036         	call	_writeChar	;wreg free
 14664                           
 14665                           ;comunicacao.h: 188: timerEtapaComunicacao = 30;
 14666  0017DC  0E1E               	movlw	30
 14667  0017DE  D777               	goto	L42
 14668  0017E0                     l366:
 14669  0017E0  FFFF               	dw	65535	; assembler added errata NOP
 14670                           
 14671                           ;comunicacao.h: 190: }
 14672                           ;comunicacao.h: 191: if (!timerEtapaComunicacao) {
 14673                           
 14674                           ; BSR set to: 0
 14675  0017E2  0100               	movlb	0	; () banked
 14676  0017E4  FFFF               	dw	65535	; assembler added errata NOP
 14677  0017E6  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14678  0017E8  A4D8               	btfss	status,2,c
 14679  0017EA  D0A3               	goto	l354
 14680  0017EC  D07C               	goto	l400
 14681  0017EE  FFFF               	dw	65535	; assembler added errata NOP
 14682                           
 14683                           ; BSR set to: 0
 14684                           ;comunicacao.h: 196: if (aguardaBuffer("ERROR") | aguardaBuffer("OK")) {
 14685                           
 14686                           ; BSR set to: 0
 14687  0017F0  0EF9               	movlw	low STR_5
 14688  0017F2  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14689  0017F4  0E7F               	movlw	high STR_5
 14690  0017F6  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14691  0017F8  EC72  F038         	call	_aguardaBuffer	;wreg free
 14692  0017FC  0100               	movlb	0	; () banked
 14693  0017FE  6FBB               	movwf	??_enviaSMS& (0+255),b
 14694  001800  0ED7               	movlw	low STR_17
 14695  001802  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14696  001804  0E7F               	movlw	high STR_17
 14697  001806  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14698  001808  EC72  F038         	call	_aguardaBuffer	;wreg free
 14699  00180C  0100               	movlb	0	; () banked
 14700  00180E  11BB               	iorwf	??_enviaSMS& (0+255),w,b
 14701  001810  0900               	iorlw	0
 14702  001812  B4D8               	btfsc	status,2,c
 14703  001814  D7E7               	goto	L44
 14704                           
 14705                           ; BSR set to: 0
 14706                           ;comunicacao.h: 197: if (tipo == 2) {
 14707  001816  0E02               	movlw	2
 14708  001818  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 14709  00181A  A4D8               	btfss	status,2,c
 14710  00181C  D012               	goto	l384
 14711                           
 14712                           ; BSR set to: 0
 14713                           ;comunicacao.h: 198: if (telefoneSelecionado == 0) {
 14714  00181E  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14715  001820  A4D8               	btfss	status,2,c
 14716  001822  D007               	goto	l385
 14717                           
 14718                           ; BSR set to: 0
 14719                           ;comunicacao.h: 199: telefoneSelecionado = 1;
 14720  001824  0E01               	movlw	1
 14721  001826  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14722                           
 14723                           ;comunicacao.h: 200: etapaComunicacao = 0;
 14724  001828  0E00               	movlw	0
 14725  00182A  6E52               	movwf	_etapaComunicacao+1,c
 14726  00182C  0E00               	movlw	0
 14727  00182E  6E51               	movwf	_etapaComunicacao,c
 14728                           
 14729                           ;comunicacao.h: 201: } else {
 14730  001830  D7D9               	goto	L44
 14731  001832                     l385:
 14732  001832  FFFF               	dw	65535	; assembler added errata NOP
 14733                           
 14734                           ; BSR set to: 0
 14735                           ;comunicacao.h: 202: telefoneSelecionado = 0;
 14736                           
 14737                           ; BSR set to: 0
 14738  001834  0E00               	movlw	0
 14739  001836  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14740                           
 14741                           ;comunicacao.h: 203: gsmOcupado = 0;
 14742  001838  0E00               	movlw	0
 14743  00183A  6FF4               	movwf	_gsmOcupado& (0+255),b
 14744                           
 14745                           ;comunicacao.h: 204: menu_posi = 0;
 14746  00183C  0E00               	movlw	0
 14747  00183E  6FE0               	movwf	_menu_posi& (0+255),b
 14748                           
 14749                           ; BSR set to: 0
 14750                           ;comunicacao.h: 205: }
 14751                           ;comunicacao.h: 206: } else {
 14752  001840  D7D1               	goto	L44
 14753  001842                     l384:
 14754  001842  FFFF               	dw	65535	; assembler added errata NOP
 14755                           
 14756                           ; BSR set to: 0
 14757                           ;comunicacao.h: 207: etapaComunicacao++;
 14758                           
 14759                           ; BSR set to: 0
 14760  001844  4A51               	infsnz	_etapaComunicacao,f,c
 14761  001846  2A52               	incf	_etapaComunicacao+1,f,c
 14762                           
 14763                           ; BSR set to: 0
 14764                           
 14765                           ; BSR set to: 0
 14766  001848  D7CD               	goto	L44
 14767  00184A  FFFF               	dw	65535	; assembler added errata NOP
 14768                           
 14769                           ; BSR set to: 0
 14770                           ;comunicacao.h: 215: limparBuffer();
 14771                           
 14772                           ; BSR set to: 0
 14773  00184C  EC8F  F037         	call	_limparBuffer	;wreg free
 14774                           
 14775                           ;comunicacao.h: 216: printf("ATD 0%s;\r\n", telefoneSelecionado == 0 ? tel1 : tel2);
 14776  001850  0100               	movlb	0	; () banked
 14777  001852  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14778  001854  B4D8               	btfsc	status,2,c
 14779  001856  D004               	goto	l391
 14780                           
 14781                           ; BSR set to: 0
 14782  001858  0EA4               	movlw	low _tel2
 14783  00185A  6FC5               	movwf	_enviaSMS$1228& (0+255),b
 14784  00185C  0E01               	movlw	high _tel2
 14785  00185E  D004               	goto	L41
 14786  001860                     l391:
 14787  001860  FFFF               	dw	65535	; assembler added errata NOP
 14788                           
 14789                           ; BSR set to: 0
 14790                           
 14791                           ; BSR set to: 0
 14792  001862  0EB0               	movlw	low _tel1
 14793  001864  6FC5               	movwf	_enviaSMS$1228& (0+255),b
 14794  001866  0E01               	movlw	high _tel1
 14795  001868                     L41:
 14796  001868  FFFF               	dw	65535	; assembler added errata NOP
 14797  00186A  6FC6               	movwf	(_enviaSMS$1228+1)& (0+255),b
 14798                           
 14799                           ; BSR set to: 0
 14800                           
 14801                           ; BSR set to: 0
 14802  00186C  0E01               	movlw	low STR_35
 14803  00186E  6FA1               	movwf	printf@f& (0+255),b
 14804  001870  0E7F               	movlw	high STR_35
 14805  001872  6FA2               	movwf	(printf@f+1)& (0+255),b
 14806  001874  C0C5  F0A3         	movff	_enviaSMS$1228,?_printf+2
 14807  001878  C0C6  F0A4         	movff	_enviaSMS$1228+1,?_printf+3
 14808  00187C  EC90  F038         	call	_printf	;wreg free
 14809                           
 14810                           ;comunicacao.h: 217: timerEtapaComunicacao = 35;
 14811  001880  0E23               	movlw	35
 14812  001882  0100               	movlb	0	; () banked
 14813  001884  6FF5               	movwf	_timerEtapaComunicacao& (0+255),b
 14814                           
 14815                           ; BSR set to: 0
 14816                           ;comunicacao.h: 218: etapaComunicacao++;
 14817  001886  4A51               	infsnz	_etapaComunicacao,f,c
 14818  001888  2A52               	incf	_etapaComunicacao+1,f,c
 14819                           
 14820                           ;comunicacao.h: 219: break;
 14821  00188A  D053               	goto	l354
 14822  00188C  FFFF               	dw	65535	; assembler added errata NOP
 14823                           
 14824                           ; BSR set to: 0
 14825                           ;comunicacao.h: 221: if (aguardaBuffer("NO DIALTONE") || !timerEtapaComunicacao) {
 14826                           
 14827                           ; BSR set to: 0
 14828  00188E  0ED1               	movlw	low STR_36
 14829  001890  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14830  001892  0E7E               	movlw	high STR_36
 14831  001894  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14832  001896  EC72  F038         	call	_aguardaBuffer	;wreg free
 14833  00189A  0900               	iorlw	0
 14834  00189C  A4D8               	btfss	status,2,c
 14835  00189E  D004               	goto	u6080
 14836  0018A0  0100               	movlb	0	; () banked
 14837  0018A2  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 14838  0018A4  A4D8               	btfss	status,2,c
 14839  0018A6  D045               	goto	l354
 14840  0018A8                     u6080:
 14841  0018A8  FFFF               	dw	65535	; assembler added errata NOP
 14842                           
 14843                           ;comunicacao.h: 222: limparBuffer();
 14844                           
 14845                           ; BSR set to: 0
 14846  0018AA  EC8F  F037         	call	_limparBuffer	;wreg free
 14847                           
 14848                           ;comunicacao.h: 223: printf("ATH0\r\n");
 14849  0018AE  0EA9               	movlw	low STR_21
 14850  0018B0  0100               	movlb	0	; () banked
 14851  0018B2  6FA1               	movwf	printf@f& (0+255),b
 14852  0018B4  0E7F               	movlw	high STR_21
 14853  0018B6  6FA2               	movwf	(printf@f+1)& (0+255),b
 14854  0018B8  EC90  F038         	call	_printf	;wreg free
 14855                           
 14856                           ;comunicacao.h: 224: delay(550);
 14857  0018BC  0E02               	movlw	2
 14858  0018BE  0100               	movlb	0	; () banked
 14859  0018C0  6F81               	movwf	(delay@x+1)& (0+255),b
 14860  0018C2  0E26               	movlw	38
 14861  0018C4  6F80               	movwf	delay@x& (0+255),b
 14862  0018C6  EC74  F037         	call	_delay	;wreg free
 14863                           
 14864                           ;comunicacao.h: 225: if (telefoneSelecionado == 0) {
 14865  0018CA  0100               	movlb	0	; () banked
 14866  0018CC  51F7               	movf	_telefoneSelecionado& (0+255),w,b
 14867  0018CE  A4D8               	btfss	status,2,c
 14868  0018D0  D003               	goto	l398
 14869                           
 14870                           ; BSR set to: 0
 14871                           ;comunicacao.h: 226: telefoneSelecionado = 1;
 14872  0018D2  0E01               	movlw	1
 14873  0018D4  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14874                           
 14875                           ;comunicacao.h: 227: } else {
 14876  0018D6  D007               	goto	l400
 14877  0018D8                     l398:
 14878  0018D8  FFFF               	dw	65535	; assembler added errata NOP
 14879                           
 14880                           ; BSR set to: 0
 14881                           ;comunicacao.h: 228: telefoneSelecionado = 0;
 14882                           
 14883                           ; BSR set to: 0
 14884  0018DA  0E00               	movlw	0
 14885  0018DC  6FF7               	movwf	_telefoneSelecionado& (0+255),b
 14886                           
 14887                           ;comunicacao.h: 229: gsmOcupado = 0;
 14888  0018DE  0E00               	movlw	0
 14889  0018E0  6FF4               	movwf	_gsmOcupado& (0+255),b
 14890                           
 14891                           ;comunicacao.h: 230: timerReenvioSMS = 100;
 14892  0018E2  0E64               	movlw	100
 14893  0018E4  6FF6               	movwf	_timerReenvioSMS& (0+255),b
 14894  0018E6                     l400:
 14895  0018E6  FFFF               	dw	65535	; assembler added errata NOP
 14896                           
 14897                           ; BSR set to: 0
 14898                           
 14899                           ; BSR set to: 0
 14900  0018E8  0E00               	movlw	0
 14901  0018EA  6E52               	movwf	_etapaComunicacao+1,c
 14902  0018EC  0E00               	movlw	0
 14903  0018EE  6E51               	movwf	_etapaComunicacao,c
 14904                           
 14905                           ; BSR set to: 0
 14906                           ;comunicacao.h: 238: }
 14907                           
 14908                           ;comunicacao.h: 237: break;
 14909  0018F0  D020               	goto	l354
 14910  0018F2                     l352:
 14911  0018F2  FFFF               	dw	65535	; assembler added errata NOP
 14912                           
 14913                           ; BSR set to: 0
 14914                           
 14915                           ; BSR set to: 0
 14916  0018F4  C051  F0BB         	movff	_etapaComunicacao,??_enviaSMS
 14917  0018F8  C052  F0BC         	movff	_etapaComunicacao+1,??_enviaSMS+1
 14918                           
 14919                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14920                           ; Switch size 1, requested type "space"
 14921                           ; Number of cases is 1, Range of values is 0 to 0
 14922                           ; switch strategies available:
 14923                           ; Name         Instructions Cycles
 14924                           ; simple_byte            4     3 (average)
 14925                           ;	Chosen strategy is simple_byte
 14926  0018FC  51BC               	movf	(??_enviaSMS+1)& (0+255),w,b
 14927  0018FE  0A00               	xorlw	0	; case 0
 14928  001900  A4D8               	btfss	status,2,c
 14929  001902  D7F1               	goto	l400
 14930                           
 14931                           ; BSR set to: 0
 14932                           ; Switch size 1, requested type "space"
 14933                           ; Number of cases is 7, Range of values is 0 to 6
 14934                           ; switch strategies available:
 14935                           ; Name         Instructions Cycles
 14936                           ; simple_byte           22    12 (average)
 14937                           ;	Chosen strategy is simple_byte
 14938  001904  51BB               	movf	??_enviaSMS& (0+255),w,b
 14939  001906  0A00               	xorlw	0	; case 0
 14940  001908  B4D8               	btfsc	status,2,c
 14941  00190A  D679               	goto	l353
 14942  00190C  0A01               	xorlw	1	; case 1
 14943  00190E  B4D8               	btfsc	status,2,c
 14944  001910  D686               	goto	l355
 14945  001912  0A03               	xorlw	3	; case 2
 14946  001914  B4D8               	btfsc	status,2,c
 14947  001916  D6B5               	goto	l358
 14948  001918  0A01               	xorlw	1	; case 3
 14949  00191A  B4D8               	btfsc	status,2,c
 14950  00191C  D6DE               	goto	l365
 14951  00191E  0A07               	xorlw	7	; case 4
 14952  001920  B4D8               	btfsc	status,2,c
 14953  001922  D765               	goto	l382
 14954  001924  0A01               	xorlw	1	; case 5
 14955  001926  B4D8               	btfsc	status,2,c
 14956  001928  D790               	goto	l389
 14957  00192A  0A03               	xorlw	3	; case 6
 14958  00192C  B4D8               	btfsc	status,2,c
 14959  00192E  D7AE               	goto	l394
 14960  001930  D7DA               	goto	l400
 14961  001932                     l354:
 14962  001932  FFFF               	dw	65535	; assembler added errata NOP
 14963                           
 14964                           ; BSR set to: 0
 14965  001934  0012               	return		;funcret
 14966  001936  FFFF               	dw	65535	; errata NOP
 14967  001938                     __end_of_enviaSMS:
 14968                           	opt stack 0
 14969                           tblptru	equ	0xFF8
 14970                           tblptrh	equ	0xFF7
 14971                           tblptrl	equ	0xFF6
 14972                           tablat	equ	0xFF5
 14973                           prodh	equ	0xFF4
 14974                           prodl	equ	0xFF3
 14975                           intcon	equ	0xFF2
 14976                           postinc0	equ	0xFEE
 14977                           wreg	equ	0xFE8
 14978                           postdec1	equ	0xFE5
 14979                           fsr1l	equ	0xFE1
 14980                           indf2	equ	0xFDF
 14981                           postinc2	equ	0xFDE
 14982                           fsr2h	equ	0xFDA
 14983                           fsr2l	equ	0xFD9
 14984                           status	equ	0xFD8
 14985                           
 14986 ;; *************** function _writeChar *****************
 14987 ;; Defined at:
 14988 ;;		line 21 in file "serial.h"
 14989 ;; Parameters:    Size  Location     Type
 14990 ;;  hex             2    0[BANK0 ] PTR unsigned char 
 14991 ;;		 -> RAM(1535), 
 14992 ;; Auto vars:     Size  Location     Type
 14993 ;;		None
 14994 ;; Return value:  Size  Location     Type
 14995 ;;                  1    wreg      void 
 14996 ;; Registers used:
 14997 ;;		None
 14998 ;; Tracked objects:
 14999 ;;		On entry : 0/0
 15000 ;;		On exit  : 0/0
 15001 ;;		Unchanged: 0/0
 15002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15003 ;;      Params:         0       2       0       0       0       0       0
 15004 ;;      Locals:         0       0       0       0       0       0       0
 15005 ;;      Temps:          0       0       0       0       0       0       0
 15006 ;;      Totals:         0       2       0       0       0       0       0
 15007 ;;Total ram usage:        2 bytes
 15008 ;; Hardware stack levels used:    1
 15009 ;; Hardware stack levels required when called:    6
 15010 ;; This function calls:
 15011 ;;		Nothing
 15012 ;; This function is called by:
 15013 ;;		_getSinalSIM800L
 15014 ;;		_comunicarTeste
 15015 ;;		_enviaSMS
 15016 ;; This function uses a non-reentrant model
 15017 ;;
 15018                           
 15019                           	psect	text46
 15020  006C62                     __ptext46:
 15021                           	opt stack 0
 15022  006C62                     _writeChar:
 15023                           	opt stack 0
 15024  006C62  FFFF               	dw	65535	; assembler added errata NOP
 15025                           
 15026                           ;serial.h: 22: while (!TXSTAbits.TRMT);
 15027                           
 15028                           ;incstack = 0
 15029  006C64  A2AC               	btfss	4012,1,c	;volatile
 15030  006C66  D7FD               	goto	_writeChar
 15031                           
 15032                           ;serial.h: 23: TXREG = hex;
 15033  006C68  C080  FFAD         	movff	writeChar@hex,4013	;volatile
 15034  006C6C  0012               	return		;funcret
 15035  006C6E  FFFF               	dw	65535	; errata NOP
 15036  006C70                     __end_of_writeChar:
 15037                           	opt stack 0
 15038                           tblptru	equ	0xFF8
 15039                           tblptrh	equ	0xFF7
 15040                           tblptrl	equ	0xFF6
 15041                           tablat	equ	0xFF5
 15042                           prodh	equ	0xFF4
 15043                           prodl	equ	0xFF3
 15044                           intcon	equ	0xFF2
 15045                           postinc0	equ	0xFEE
 15046                           wreg	equ	0xFE8
 15047                           postdec1	equ	0xFE5
 15048                           fsr1l	equ	0xFE1
 15049                           indf2	equ	0xFDF
 15050                           postinc2	equ	0xFDE
 15051                           fsr2h	equ	0xFDA
 15052                           fsr2l	equ	0xFD9
 15053                           status	equ	0xFD8
 15054                           
 15055 ;; *************** function _printf *****************
 15056 ;; Defined at:
 15057 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
 15058 ;; Parameters:    Size  Location     Type
 15059 ;;  f               2   33[BANK0 ] PTR const unsigned char 
 15060 ;;		 -> STR_37(7), STR_35(11), STR_26(104), STR_25(63), 
 15061 ;;		 -> STR_23(18), STR_21(7), STR_20(12), STR_18(5), 
 15062 ;;		 -> STR_14(126), STR_12(18), STR_10(12), STR_8(5), 
 15063 ;;		 -> STR_4(5), STR_3(9), 
 15064 ;; Auto vars:     Size  Location     Type
 15065 ;;  pb              4   55[BANK0 ] struct __prbuf
 15066 ;;  ap              2   53[BANK0 ] PTR void [1]
 15067 ;;		 -> ?_sprintf(2), ?_printf(2), 
 15068 ;; Return value:  Size  Location     Type
 15069 ;;                  2   33[BANK0 ] int 
 15070 ;; Registers used:
 15071 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15072 ;; Tracked objects:
 15073 ;;		On entry : 0/0
 15074 ;;		On exit  : 0/0
 15075 ;;		Unchanged: 0/0
 15076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15077 ;;      Params:         0      20       0       0       0       0       0
 15078 ;;      Locals:         0       6       0       0       0       0       0
 15079 ;;      Temps:          0       0       0       0       0       0       0
 15080 ;;      Totals:         0      26       0       0       0       0       0
 15081 ;;Total ram usage:       26 bytes
 15082 ;; Hardware stack levels used:    1
 15083 ;; Hardware stack levels required when called:    8
 15084 ;; This function calls:
 15085 ;;		__doprnt
 15086 ;; This function is called by:
 15087 ;;		_getSinalSIM800L
 15088 ;;		_comunicarTeste
 15089 ;;		_enviaSMS
 15090 ;; This function uses a non-reentrant model
 15091 ;;
 15092                           
 15093                           	psect	text47
 15094  007120                     __ptext47:
 15095                           	opt stack 0
 15096  007120                     _printf:
 15097                           	opt stack 0
 15098  007120  FFFF               	dw	65535	; assembler added errata NOP
 15099                           
 15100                           ;incstack = 0
 15101  007122  0E00               	movlw	0
 15102  007124  0100               	movlb	0	; () banked
 15103  007126  6FB7               	movwf	printf@pb& (0+255),b
 15104  007128  0E00               	movlw	0
 15105  00712A  6FB8               	movwf	(printf@pb+1)& (0+255),b
 15106  00712C  0E82               	movlw	low _putch
 15107  00712E  6FB9               	movwf	(printf@pb+2)& (0+255),b
 15108  007130  0E6C               	movlw	high _putch
 15109  007132  6FBA               	movwf	(printf@pb+3)& (0+255),b
 15110  007134  0EA3               	movlw	low (?_printf+2)
 15111  007136  6FB5               	movwf	printf@ap& (0+255),b
 15112  007138  0E00               	movlw	high (?_printf+2)
 15113  00713A  6FB6               	movwf	(printf@ap+1)& (0+255),b
 15114                           
 15115                           ; BSR set to: 0
 15116                           ;	Return value of _printf is never used
 15117  00713C  0EB7               	movlw	low printf@pb
 15118  00713E  6F8C               	movwf	__doprnt@pb& (0+255),b
 15119  007140  0E00               	movlw	high printf@pb
 15120  007142  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 15121  007144  C0A1  F08E         	movff	printf@f,__doprnt@f
 15122  007148  C0A2  F08F         	movff	printf@f+1,__doprnt@f+1
 15123  00714C  0EB5               	movlw	low printf@ap
 15124  00714E  6F90               	movwf	__doprnt@ap& (0+255),b
 15125  007150  0E00               	movlw	high printf@ap
 15126  007152  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 15127  007154  EC8E  F000         	call	__doprnt	;wreg free
 15128  007158  0012               	return		;funcret
 15129  00715A  FFFF               	dw	65535	; errata NOP
 15130  00715C                     __end_of_printf:
 15131                           	opt stack 0
 15132                           tblptru	equ	0xFF8
 15133                           tblptrh	equ	0xFF7
 15134                           tblptrl	equ	0xFF6
 15135                           tablat	equ	0xFF5
 15136                           prodh	equ	0xFF4
 15137                           prodl	equ	0xFF3
 15138                           intcon	equ	0xFF2
 15139                           postinc0	equ	0xFEE
 15140                           wreg	equ	0xFE8
 15141                           postdec1	equ	0xFE5
 15142                           fsr1l	equ	0xFE1
 15143                           indf2	equ	0xFDF
 15144                           postinc2	equ	0xFDE
 15145                           fsr2h	equ	0xFDA
 15146                           fsr2l	equ	0xFD9
 15147                           status	equ	0xFD8
 15148                           
 15149 ;; *************** function __doprnt *****************
 15150 ;; Defined at:
 15151 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 15152 ;; Parameters:    Size  Location     Type
 15153 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
 15154 ;;		 -> sprintf@pb(4), printf@pb(4), 
 15155 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15156 ;;		 -> intToFloatStr@conv(4), STR_126(15), STR_125(12), STR_124(10), 
 15157 ;;		 -> STR_123(18), STR_122(10), STR_121(18), STR_120(16), 
 15158 ;;		 -> STR_119(10), STR_117(3), STR_116(14), STR_115(20), 
 15159 ;;		 -> STR_114(8), STR_113(10), STR_112(11), STR_111(9), 
 15160 ;;		 -> STR_110(3), STR_109(15), STR_108(15), STR_107(11), 
 15161 ;;		 -> STR_106(11), STR_105(18), STR_104(5), STR_103(12), 
 15162 ;;		 -> STR_102(5), STR_101(14), STR_100(19), STR_97(3), 
 15163 ;;		 -> STR_96(7), STR_95(7), STR_93(12), STR_92(17), 
 15164 ;;		 -> STR_91(20), STR_90(8), STR_87(14), STR_84(14), 
 15165 ;;		 -> STR_83(11), STR_80(10), STR_79(31), STR_76(11), 
 15166 ;;		 -> STR_75(20), STR_74(20), STR_73(21), STR_72(15), 
 15167 ;;		 -> STR_71(6), STR_70(15), STR_69(6), STR_68(20), 
 15168 ;;		 -> STR_67(15), STR_66(19), STR_65(20), STR_64(21), 
 15169 ;;		 -> STR_63(21), STR_62(18), STR_61(20), STR_60(12), 
 15170 ;;		 -> STR_59(17), STR_58(26), STR_57(16), STR_54(15), 
 15171 ;;		 -> STR_51(15), STR_48(11), STR_47(17), STR_44(9), 
 15172 ;;		 -> STR_43(19), STR_42(19), STR_41(16), STR_40(15), 
 15173 ;;		 -> STR_39(15), STR_38(20), STR_37(7), STR_35(11), 
 15174 ;;		 -> STR_26(104), STR_25(63), STR_23(18), STR_21(7), 
 15175 ;;		 -> STR_20(12), STR_18(5), STR_14(126), STR_12(18), 
 15176 ;;		 -> STR_10(12), STR_8(5), STR_4(5), STR_3(9), 
 15177 ;;		 -> STR_2(5), STR_1(5), 
 15178 ;;  ap              2   16[BANK0 ] PTR PTR void 
 15179 ;;		 -> sprintf@ap(2), printf@ap(2), 
 15180 ;; Auto vars:     Size  Location     Type
 15181 ;;  tmpval          4    0        struct .
 15182 ;;  width           2   30[BANK0 ] int 
 15183 ;;  cp              2   28[BANK0 ] PTR const unsigned char 
 15184 ;;		 -> ?_sprintf(2), ?_printf(2), STR_127(7), _doprnt@c(1), 
 15185 ;;		 -> intToFloatStr@end(4), STR_118(12), STR_99(17), STR_98(13), 
 15186 ;;		 -> STR_94(12), STR_89(5), STR_88(3), STR_86(5), 
 15187 ;;		 -> STR_85(3), STR_82(5), STR_81(3), STR_78(4), 
 15188 ;;		 -> STR_77(4), STR_56(5), STR_55(3), STR_53(5), 
 15189 ;;		 -> STR_52(3), line3(21), STR_50(5), STR_49(3), 
 15190 ;;		 -> STR_46(13), STR_45(10), line2(21), line1(21), 
 15191 ;;		 -> line4(21), STR_32(6), STR_31(3), STR_30(6), 
 15192 ;;		 -> STR_29(3), STR_28(6), STR_27(3), STR_15(12), 
 15193 ;;		 -> tel2(12), tel1(12), bufferAUX(20), NULL(0), 
 15194 ;;		 -> bufferSerial(60), 
 15195 ;;  len             2   25[BANK0 ] unsigned int 
 15196 ;;  val             2   23[BANK0 ] unsigned int 
 15197 ;;  c               1   32[BANK0 ] char 
 15198 ;;  flag            1   27[BANK0 ] unsigned char 
 15199 ;;  prec            1   22[BANK0 ] char 
 15200 ;; Return value:  Size  Location     Type
 15201 ;;                  2   12[BANK0 ] int 
 15202 ;; Registers used:
 15203 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15204 ;; Tracked objects:
 15205 ;;		On entry : 0/0
 15206 ;;		On exit  : 0/0
 15207 ;;		Unchanged: 0/0
 15208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15209 ;;      Params:         0       6       0       0       0       0       0
 15210 ;;      Locals:         0      11       0       0       0       0       0
 15211 ;;      Temps:          0       4       0       0       0       0       0
 15212 ;;      Totals:         0      21       0       0       0       0       0
 15213 ;;Total ram usage:       21 bytes
 15214 ;; Hardware stack levels used:    1
 15215 ;; Hardware stack levels required when called:    7
 15216 ;; This function calls:
 15217 ;;		Absolute function
 15218 ;;		___lwdiv
 15219 ;;		___lwmod
 15220 ;;		___wmul
 15221 ;;		_isdigit
 15222 ;;		_putch
 15223 ;; This function is called by:
 15224 ;;		_printf
 15225 ;;		_sprintf
 15226 ;; This function uses a non-reentrant model
 15227 ;;
 15228                           
 15229                           	psect	text48
 15230  00011C                     __ptext48:
 15231                           	opt stack 0
 15232  00011C                     __doprnt:
 15233                           	opt stack 0
 15234  00011C  FFFF               	dw	65535	; assembler added errata NOP
 15235                           
 15236                           ;doprnt.c: 499: signed char c;
 15237                           ;doprnt.c: 501: int width;
 15238                           ;doprnt.c: 506: signed char prec;
 15239                           ;doprnt.c: 508: unsigned char flag;
 15240                           ;doprnt.c: 523: union {
 15241                           ;doprnt.c: 524: unsigned long vd;
 15242                           ;doprnt.c: 525: double integ;
 15243                           ;doprnt.c: 526: } tmpval;
 15244                           ;doprnt.c: 528: unsigned int val;
 15245                           ;doprnt.c: 529: unsigned len;
 15246                           ;doprnt.c: 530: const char * cp;
 15247                           ;doprnt.c: 536: while(c = *f++) {
 15248                           
 15249                           ;incstack = 0
 15250  00011E  D3D7               	goto	u5320
 15251  000120  FFFF               	dw	65535	; assembler added errata NOP
 15252                           
 15253                           ;doprnt.c: 538: if(c != '%')
 15254  000122  0E25               	movlw	37
 15255  000124  0100               	movlb	0	; () banked
 15256  000126  19A0               	xorwf	__doprnt@c& (0+255),w,b
 15257  000128  B4D8               	btfsc	status,2,c
 15258  00012A  D037               	goto	l1051
 15259                           
 15260                           ; BSR set to: 0
 15261                           ;doprnt.c: 540: {
 15262                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 15263  00012C  EE20 F002          	lfsr	2,2
 15264  000130  518C               	movf	__doprnt@pb& (0+255),w,b
 15265  000132  26D9               	addwf	fsr2l,f,c
 15266  000134  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15267  000136  22DA               	addwfc	fsr2h,f,c
 15268  000138  50DE               	movf	postinc2,w,c
 15269  00013A  10DE               	iorwf	postinc2,w,c
 15270  00013C  B4D8               	btfsc	status,2,c
 15271  00013E  D016               	goto	l1052
 15272                           
 15273                           ; BSR set to: 0
 15274  000140  EE20 F002          	lfsr	2,2
 15275  000144  518C               	movf	__doprnt@pb& (0+255),w,b
 15276  000146  26D9               	addwf	fsr2l,f,c
 15277  000148  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15278  00014A  22DA               	addwfc	fsr2h,f,c
 15279  00014C  D801               	call	u4888
 15280  00014E  D3BF               	goto	u5320
 15281  000150                     u4888:
 15282  000150  FFFF               	dw	65535	; assembler added errata NOP
 15283  000152  0005               	push	
 15284  000154  6EFA               	movwf	pclath,c
 15285  000156  50DE               	movf	postinc2,w,c
 15286  000158  6EFD               	movwf	tosl,c
 15287  00015A  50DE               	movf	postinc2,w,c
 15288  00015C  6EFE               	movwf	tosh,c
 15289  00015E  50F8               	movf	tblptru,w,c
 15290  000160  6EFF               	movwf	tosu,c
 15291  000162  50FA               	movf	pclath,w,c
 15292  000164  51A0               	movf	__doprnt@c& (0+255),w,b
 15293  000166  0012               	return		;indir
 15294  000168  FFFF               	dw	65535	; errata NOP
 15295  00016A  D3B1               	goto	u5320
 15296  00016C                     l1052:
 15297  00016C  FFFF               	dw	65535	; assembler added errata NOP
 15298  00016E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15299  000172  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15300  000176  CFDE F092          	movff	postinc2,??__doprnt
 15301  00017A  CFDD F093          	movff	postdec2,??__doprnt+1
 15302  00017E  C092  FFD9         	movff	??__doprnt,fsr2l
 15303  000182  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15304  000186  C0A0  FFDF         	movff	__doprnt@c,indf2
 15305  00018A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15306  00018E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15307  000192  2ADE               	incf	postinc2,f,c
 15308  000194  0E00               	movlw	0
 15309  000196  22DD               	addwfc	postdec2,f,c
 15310                           
 15311                           ;doprnt.c: 542: continue;
 15312  000198  D39A               	goto	u5320
 15313  00019A                     l1051:
 15314  00019A  FFFF               	dw	65535	; assembler added errata NOP
 15315                           
 15316                           ;doprnt.c: 543: }
 15317                           ;doprnt.c: 546: width = 0;
 15318  00019C  0E00               	movlw	0
 15319  00019E  0100               	movlb	0	; () banked
 15320  0001A0  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15321  0001A2  0E00               	movlw	0
 15322  0001A4  6F9E               	movwf	__doprnt@width& (0+255),b
 15323                           
 15324                           ;doprnt.c: 548: flag = 0;
 15325  0001A6  0E00               	movlw	0
 15326  0001A8  6F9B               	movwf	__doprnt@flag& (0+255),b
 15327                           
 15328                           ; BSR set to: 0
 15329                           ;doprnt.c: 551: switch(*f) {
 15330                           
 15331                           ;doprnt.c: 550: for(;;) {
 15332  0001AA  D005               	goto	l1055
 15333  0001AC  FFFF               	dw	65535	; assembler added errata NOP
 15334                           
 15335                           ;doprnt.c: 580: flag |= 0x04;
 15336                           
 15337                           ; BSR set to: 0
 15338  0001AE  0100               	movlb	0	; () banked
 15339  0001B0  859B               	bsf	__doprnt@flag& (0+255),2,b
 15340                           
 15341                           ;doprnt.c: 581: f++;
 15342  0001B2  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15343  0001B4  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15344  0001B6                     l1055:
 15345  0001B6  FFFF               	dw	65535	; assembler added errata NOP
 15346                           
 15347                           ; BSR set to: 0
 15348  0001B8  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15349  0001BC  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15350  0001C0  6AF8               	clrf	tblptru,c
 15351  0001C2  0E05               	movlw	(high __ramtop+-1)
 15352  0001C4  64F7               	cpfsgt	tblptrh,c
 15353  0001C6  D004               	bra	u4897
 15354  0001C8  0008               	tblrd		*
 15355  0001CA  FFFF               	dw	65535	; errata NOP
 15356  0001CC  50F5               	movf	tablat,w,c
 15357  0001CE  D005               	bra	u4890
 15358  0001D0                     u4897:
 15359  0001D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 15360  0001D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 15361  0001D8  50EF               	movf	indf0,w,c
 15362  0001DA                     u4890:
 15363                           
 15364                           ; Switch size 1, requested type "space"
 15365                           ; Number of cases is 1, Range of values is 48 to 48
 15366                           ; switch strategies available:
 15367                           ; Name         Instructions Cycles
 15368                           ; simple_byte            4     3 (average)
 15369                           ;	Chosen strategy is simple_byte
 15370  0001DA  0A30               	xorlw	48	; case 48
 15371  0001DC  B4D8               	btfsc	status,2,c
 15372  0001DE  D7E6               	goto	l1056
 15373                           
 15374                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15375                           
 15376                           ;doprnt.c: 586: }
 15377                           
 15378                           ;doprnt.c: 585: break;
 15379  0001E0  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15380  0001E4  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15381  0001E8  6AF8               	clrf	tblptru,c
 15382  0001EA  0E05               	movlw	(high __ramtop+-1)
 15383  0001EC  64F7               	cpfsgt	tblptrh,c
 15384  0001EE  D004               	bra	u4907
 15385  0001F0  0008               	tblrd		*
 15386  0001F2  FFFF               	dw	65535	; errata NOP
 15387  0001F4  50F5               	movf	tablat,w,c
 15388  0001F6  D005               	bra	u4900
 15389  0001F8                     u4907:
 15390  0001F8  CFF6 FFE9          	movff	tblptrl,fsr0l
 15391  0001FC  CFF7 FFEA          	movff	tblptrh,fsr0h
 15392  000200  50EF               	movf	indf0,w,c
 15393  000202                     u4900:
 15394  000202  ECB5  F036         	call	_isdigit
 15395  000206  A0D8               	btfss	status,0,c
 15396  000208  D16B               	goto	l1063
 15397                           
 15398                           ;doprnt.c: 598: width = 0;
 15399  00020A  0E00               	movlw	0
 15400  00020C  0100               	movlb	0	; () banked
 15401  00020E  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15402  000210  0E00               	movlw	0
 15403  000212  6F9E               	movwf	__doprnt@width& (0+255),b
 15404  000214  FFFF               	dw	65535	; assembler added errata NOP
 15405                           
 15406                           ;doprnt.c: 600: width *= 10;
 15407                           
 15408                           ; BSR set to: 0
 15409  000216  C09E  F080         	movff	__doprnt@width,___wmul@multiplier
 15410  00021A  C09F  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
 15411  00021E  0E00               	movlw	0
 15412  000220  0100               	movlb	0	; () banked
 15413  000222  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15414  000224  0E0A               	movlw	10
 15415  000226  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15416  000228  ECDF  F036         	call	___wmul	;wreg free
 15417  00022C  C080  F09E         	movff	?___wmul,__doprnt@width
 15418  000230  C081  F09F         	movff	?___wmul+1,__doprnt@width+1
 15419                           
 15420                           ;doprnt.c: 601: width += *f++ - '0';
 15421  000234  0ED0               	movlw	208
 15422  000236  0100               	movlb	0	; () banked
 15423  000238  6F92               	movwf	??__doprnt& (0+255),b
 15424  00023A  0EFF               	movlw	255
 15425  00023C  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15426  00023E  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15427  000242  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15428  000246  6AF8               	clrf	tblptru,c
 15429  000248  0E05               	movlw	(high __ramtop+-1)
 15430  00024A  64F7               	cpfsgt	tblptrh,c
 15431  00024C  D004               	bra	u4927
 15432  00024E  0008               	tblrd		*
 15433  000250  FFFF               	dw	65535	; errata NOP
 15434  000252  50F5               	movf	tablat,w,c
 15435  000254  D005               	bra	u4920
 15436  000256                     u4927:
 15437  000256  CFF6 FFE9          	movff	tblptrl,fsr0l
 15438  00025A  CFF7 FFEA          	movff	tblptrh,fsr0h
 15439  00025E  50EF               	movf	indf0,w,c
 15440  000260                     u4920:
 15441  000260  0100               	movlb	0	; () banked
 15442  000262  6F94               	movwf	(??__doprnt+2)& (0+255),b
 15443  000264  6B95               	clrf	(??__doprnt+3)& (0+255),b
 15444  000266  5192               	movf	??__doprnt& (0+255),w,b
 15445  000268  2794               	addwf	(??__doprnt+2)& (0+255),f,b
 15446  00026A  5193               	movf	(??__doprnt+1)& (0+255),w,b
 15447  00026C  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
 15448  00026E  5194               	movf	(??__doprnt+2)& (0+255),w,b
 15449  000270  279E               	addwf	__doprnt@width& (0+255),f,b
 15450  000272  5195               	movf	(??__doprnt+3)& (0+255),w,b
 15451  000274  239F               	addwfc	(__doprnt@width+1)& (0+255),f,b
 15452                           
 15453                           ; BSR set to: 0
 15454  000276  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15455  000278  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15456                           
 15457                           ; BSR set to: 0
 15458                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15459  00027A  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15460  00027E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15461  000282  6AF8               	clrf	tblptru,c
 15462  000284  0E05               	movlw	(high __ramtop+-1)
 15463  000286  64F7               	cpfsgt	tblptrh,c
 15464  000288  D004               	bra	u4937
 15465  00028A  0008               	tblrd		*
 15466  00028C  FFFF               	dw	65535	; errata NOP
 15467  00028E  50F5               	movf	tablat,w,c
 15468  000290  D005               	bra	u4930
 15469  000292                     u4937:
 15470  000292  CFF6 FFE9          	movff	tblptrl,fsr0l
 15471  000296  CFF7 FFEA          	movff	tblptrh,fsr0h
 15472  00029A  50EF               	movf	indf0,w,c
 15473  00029C                     u4930:
 15474  00029C  ECB5  F036         	call	_isdigit
 15475  0002A0  A0D8               	btfss	status,0,c
 15476  0002A2  D11E               	goto	l1063
 15477  0002A4  D7B7               	goto	l1061
 15478  0002A6  FFFF               	dw	65535	; assembler added errata NOP
 15479                           
 15480                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15481  0002A8  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15482  0002AC  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15483  0002B0  CFDF F092          	movff	indf2,??__doprnt
 15484  0002B4  0E02               	movlw	2
 15485  0002B6  26DE               	addwf	postinc2,f,c
 15486  0002B8  CFDF F093          	movff	indf2,??__doprnt+1
 15487  0002BC  0E00               	movlw	0
 15488  0002BE  22DD               	addwfc	postdec2,f,c
 15489  0002C0  C092  FFD9         	movff	??__doprnt,fsr2l
 15490  0002C4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15491  0002C8  CFDE F09C          	movff	postinc2,__doprnt@cp
 15492  0002CC  CFDD F09D          	movff	postdec2,__doprnt@cp+1
 15493                           
 15494                           ;doprnt.c: 740: if(!cp)
 15495  0002D0  0100               	movlb	0	; () banked
 15496  0002D2  519C               	movf	__doprnt@cp& (0+255),w,b
 15497  0002D4  119D               	iorwf	(__doprnt@cp+1)& (0+255),w,b
 15498  0002D6  A4D8               	btfss	status,2,c
 15499  0002D8  D004               	goto	l1070
 15500                           
 15501                           ; BSR set to: 0
 15502                           ;doprnt.c: 741: cp = "(null)";
 15503  0002DA  0EA2               	movlw	low STR_127
 15504  0002DC  6F9C               	movwf	__doprnt@cp& (0+255),b
 15505  0002DE  0E7F               	movlw	high STR_127
 15506  0002E0  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 15507  0002E2                     l1070:
 15508  0002E2  FFFF               	dw	65535	; assembler added errata NOP
 15509                           
 15510                           ; BSR set to: 0
 15511                           ;doprnt.c: 745: len = 0;
 15512                           
 15513                           ; BSR set to: 0
 15514  0002E4  0E00               	movlw	0
 15515  0002E6  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 15516  0002E8  0E00               	movlw	0
 15517  0002EA  6F99               	movwf	__doprnt@len& (0+255),b
 15518                           
 15519                           ;doprnt.c: 746: while(cp[len])
 15520  0002EC  D004               	goto	l1071
 15521  0002EE  FFFF               	dw	65535	; assembler added errata NOP
 15522                           
 15523                           ;doprnt.c: 747: len++;
 15524                           
 15525                           ; BSR set to: 0
 15526  0002F0  0100               	movlb	0	; () banked
 15527  0002F2  4B99               	infsnz	__doprnt@len& (0+255),f,b
 15528  0002F4  2B9A               	incf	(__doprnt@len+1)& (0+255),f,b
 15529  0002F6                     l1071:
 15530  0002F6  FFFF               	dw	65535	; assembler added errata NOP
 15531                           
 15532                           ; BSR set to: 0
 15533                           
 15534                           ; BSR set to: 0
 15535  0002F8  5199               	movf	__doprnt@len& (0+255),w,b
 15536  0002FA  259C               	addwf	__doprnt@cp& (0+255),w,b
 15537  0002FC  6F92               	movwf	??__doprnt& (0+255),b
 15538  0002FE  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 15539  000300  219D               	addwfc	(__doprnt@cp+1)& (0+255),w,b
 15540  000302  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15541  000304  C092  FFF6         	movff	??__doprnt,tblptrl
 15542  000308  C093  FFF7         	movff	??__doprnt+1,tblptrh
 15543  00030C  6AF8               	clrf	tblptru,c
 15544  00030E  0E05               	movlw	(high __ramtop+-1)
 15545  000310  64F7               	cpfsgt	tblptrh,c
 15546  000312  D004               	bra	u4967
 15547  000314  0008               	tblrd		*
 15548  000316  FFFF               	dw	65535	; errata NOP
 15549  000318  50F5               	movf	tablat,w,c
 15550  00031A  D005               	bra	u4960
 15551  00031C                     u4967:
 15552  00031C  CFF6 FFE9          	movff	tblptrl,fsr0l
 15553  000320  CFF7 FFEA          	movff	tblptrh,fsr0h
 15554  000324  50EF               	movf	indf0,w,c
 15555  000326                     u4960:
 15556  000326  0900               	iorlw	0
 15557  000328  A4D8               	btfss	status,2,c
 15558  00032A  D7E1               	goto	l1072
 15559  00032C                     u4970:
 15560  00032C  FFFF               	dw	65535	; assembler added errata NOP
 15561                           
 15562                           ;doprnt.c: 757: if(width > len)
 15563                           
 15564                           ;doprnt.c: 750: dostring:
 15565  00032E  0100               	movlb	0	; () banked
 15566  000330  519E               	movf	__doprnt@width& (0+255),w,b
 15567  000332  5D99               	subwf	__doprnt@len& (0+255),w,b
 15568  000334  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 15569  000336  599A               	subwfb	(__doprnt@len+1)& (0+255),w,b
 15570  000338  B0D8               	btfsc	status,0,c
 15571  00033A  D005               	goto	l1075
 15572                           
 15573                           ; BSR set to: 0
 15574                           ;doprnt.c: 758: width -= len;
 15575  00033C  5199               	movf	__doprnt@len& (0+255),w,b
 15576  00033E  5F9E               	subwf	__doprnt@width& (0+255),f,b
 15577  000340  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 15578  000342  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 15579  000344  D03D               	goto	l1080
 15580  000346                     l1075:
 15581  000346  FFFF               	dw	65535	; assembler added errata NOP
 15582                           
 15583                           ; BSR set to: 0
 15584                           ;doprnt.c: 759: else
 15585                           ;doprnt.c: 760: width = 0;
 15586                           
 15587                           ; BSR set to: 0
 15588  000348  0E00               	movlw	0
 15589  00034A  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15590  00034C  0E00               	movlw	0
 15591  00034E  6F9E               	movwf	__doprnt@width& (0+255),b
 15592                           
 15593                           ; BSR set to: 0
 15594                           ;doprnt.c: 764: while(width--)
 15595  000350  D037               	goto	l1080
 15596  000352  FFFF               	dw	65535	; assembler added errata NOP
 15597  000354                     l5102:
 15598                           
 15599                           ; BSR set to: 0
 15600                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 15601  000354  EE20 F002          	lfsr	2,2
 15602  000358  518C               	movf	__doprnt@pb& (0+255),w,b
 15603  00035A  26D9               	addwf	fsr2l,f,c
 15604  00035C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15605  00035E  22DA               	addwfc	fsr2h,f,c
 15606  000360  50DE               	movf	postinc2,w,c
 15607  000362  10DE               	iorwf	postinc2,w,c
 15608  000364  B4D8               	btfsc	status,2,c
 15609  000366  D016               	goto	l1079
 15610                           
 15611                           ; BSR set to: 0
 15612  000368  EE20 F002          	lfsr	2,2
 15613  00036C  518C               	movf	__doprnt@pb& (0+255),w,b
 15614  00036E  26D9               	addwf	fsr2l,f,c
 15615  000370  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15616  000372  22DA               	addwfc	fsr2h,f,c
 15617  000374  D801               	call	u5008
 15618  000376  D024               	goto	l1080
 15619  000378                     u5008:
 15620  000378  FFFF               	dw	65535	; assembler added errata NOP
 15621  00037A  0005               	push	
 15622  00037C  6EFA               	movwf	pclath,c
 15623  00037E  50DE               	movf	postinc2,w,c
 15624  000380  6EFD               	movwf	tosl,c
 15625  000382  50DE               	movf	postinc2,w,c
 15626  000384  6EFE               	movwf	tosh,c
 15627  000386  50F8               	movf	tblptru,w,c
 15628  000388  6EFF               	movwf	tosu,c
 15629  00038A  50FA               	movf	pclath,w,c
 15630  00038C  0E20               	movlw	32
 15631  00038E  0012               	return		;indir
 15632  000390  FFFF               	dw	65535	; errata NOP
 15633  000392  D016               	goto	l1080
 15634  000394                     l1079:
 15635  000394  FFFF               	dw	65535	; assembler added errata NOP
 15636  000396  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15637  00039A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15638  00039E  CFDE F092          	movff	postinc2,??__doprnt
 15639  0003A2  CFDD F093          	movff	postdec2,??__doprnt+1
 15640  0003A6  C092  FFD9         	movff	??__doprnt,fsr2l
 15641  0003AA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15642  0003AE  0E20               	movlw	32
 15643  0003B0  6EDF               	movwf	indf2,c
 15644  0003B2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15645  0003B6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15646  0003BA  2ADE               	incf	postinc2,f,c
 15647  0003BC  0E00               	movlw	0
 15648  0003BE  22DD               	addwfc	postdec2,f,c
 15649  0003C0                     l1080:
 15650  0003C0  FFFF               	dw	65535	; assembler added errata NOP
 15651  0003C2  0100               	movlb	0	; () banked
 15652  0003C4  079E               	decf	__doprnt@width& (0+255),f,b
 15653  0003C6  A0D8               	btfss	status,0,c
 15654  0003C8  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 15655  0003CA  299E               	incf	__doprnt@width& (0+255),w,b
 15656  0003CC  E1C3               	bnz	l5102
 15657  0003CE  299F               	incf	(__doprnt@width+1)& (0+255),w,b
 15658  0003D0  B4D8               	btfsc	status,2,c
 15659  0003D2  D05F               	goto	l1085
 15660  0003D4  D7BE               	goto	l1078
 15661  0003D6  FFFF               	dw	65535	; assembler added errata NOP
 15662  0003D8                     l5112:
 15663                           
 15664                           ; BSR set to: 0
 15665                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 15666  0003D8  EE20 F002          	lfsr	2,2
 15667  0003DC  518C               	movf	__doprnt@pb& (0+255),w,b
 15668  0003DE  26D9               	addwf	fsr2l,f,c
 15669  0003E0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15670  0003E2  22DA               	addwfc	fsr2h,f,c
 15671  0003E4  50DE               	movf	postinc2,w,c
 15672  0003E6  10DE               	iorwf	postinc2,w,c
 15673  0003E8  B4D8               	btfsc	status,2,c
 15674  0003EA  D02A               	goto	l1084
 15675                           
 15676                           ; BSR set to: 0
 15677  0003EC  EE20 F002          	lfsr	2,2
 15678  0003F0  518C               	movf	__doprnt@pb& (0+255),w,b
 15679  0003F2  26D9               	addwf	fsr2l,f,c
 15680  0003F4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15681  0003F6  22DA               	addwfc	fsr2h,f,c
 15682  0003F8  D801               	call	u5038
 15683  0003FA  D01D               	goto	u5039
 15684  0003FC                     u5038:
 15685  0003FC  FFFF               	dw	65535	; assembler added errata NOP
 15686  0003FE  0005               	push	
 15687  000400  6EFA               	movwf	pclath,c
 15688  000402  50DE               	movf	postinc2,w,c
 15689  000404  6EFD               	movwf	tosl,c
 15690  000406  50DE               	movf	postinc2,w,c
 15691  000408  6EFE               	movwf	tosh,c
 15692  00040A  50F8               	movf	tblptru,w,c
 15693  00040C  6EFF               	movwf	tosu,c
 15694  00040E  50FA               	movf	pclath,w,c
 15695  000410  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 15696  000414  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 15697  000418  6AF8               	clrf	tblptru,c
 15698  00041A  0E05               	movlw	(high __ramtop+-1)
 15699  00041C  64F7               	cpfsgt	tblptrh,c
 15700  00041E  D004               	bra	u5047
 15701  000420  0008               	tblrd		*
 15702  000422  FFFF               	dw	65535	; errata NOP
 15703  000424  50F5               	movf	tablat,w,c
 15704  000426  D005               	bra	u5040
 15705  000428                     u5047:
 15706  000428  CFF6 FFE9          	movff	tblptrl,fsr0l
 15707  00042C  CFF7 FFEA          	movff	tblptrh,fsr0h
 15708  000430  50EF               	movf	indf0,w,c
 15709  000432                     u5040:
 15710  000432  0012               	return		;indir
 15711  000434  FFFF               	dw	65535	; errata NOP
 15712  000436                     u5039:
 15713  000436  FFFF               	dw	65535	; assembler added errata NOP
 15714  000438  0100               	movlb	0	; () banked
 15715  00043A  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 15716  00043C  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 15717  00043E  D029               	goto	l1085
 15718  000440                     l1084:
 15719  000440  FFFF               	dw	65535	; assembler added errata NOP
 15720                           
 15721                           ; BSR set to: 0
 15722                           
 15723                           ; BSR set to: 0
 15724  000442  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 15725  000446  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 15726  00044A  6AF8               	clrf	tblptru,c
 15727  00044C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15728  000450  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15729  000454  CFDE F092          	movff	postinc2,??__doprnt
 15730  000458  CFDD F093          	movff	postdec2,??__doprnt+1
 15731  00045C  C092  FFD9         	movff	??__doprnt,fsr2l
 15732  000460  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15733  000464  0E05               	movlw	(high __ramtop+-1)
 15734  000466  64F7               	cpfsgt	tblptrh,c
 15735  000468  D004               	bra	u5057
 15736  00046A  0008               	tblrd		*
 15737  00046C  FFFF               	dw	65535	; errata NOP
 15738  00046E  50F5               	movf	tablat,w,c
 15739  000470  D005               	bra	u5050
 15740  000472                     u5057:
 15741  000472  CFF6 FFE9          	movff	tblptrl,fsr0l
 15742  000476  CFF7 FFEA          	movff	tblptrh,fsr0h
 15743  00047A  50EF               	movf	indf0,w,c
 15744  00047C                     u5050:
 15745  00047C  6EDF               	movwf	indf2,c
 15746  00047E  0100               	movlb	0	; () banked
 15747  000480  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 15748  000482  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 15749                           
 15750                           ; BSR set to: 0
 15751  000484  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15752  000488  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15753  00048C  2ADE               	incf	postinc2,f,c
 15754  00048E  0E00               	movlw	0
 15755  000490  22DD               	addwfc	postdec2,f,c
 15756  000492                     l1085:
 15757  000492  FFFF               	dw	65535	; assembler added errata NOP
 15758                           
 15759                           ; BSR set to: 0
 15760                           
 15761                           ; BSR set to: 0
 15762                           
 15763                           ; BSR set to: 0
 15764  000494  0799               	decf	__doprnt@len& (0+255),f,b
 15765  000496  A0D8               	btfss	status,0,c
 15766  000498  079A               	decf	(__doprnt@len+1)& (0+255),f,b
 15767  00049A  2999               	incf	__doprnt@len& (0+255),w,b
 15768  00049C  E19D               	bnz	l5112
 15769  00049E  299A               	incf	(__doprnt@len+1)& (0+255),w,b
 15770  0004A0  B4D8               	btfsc	status,2,c
 15771  0004A2  D215               	goto	u5320
 15772  0004A4  D798               	goto	l1083
 15773  0004A6  FFFF               	dw	65535	; assembler added errata NOP
 15774                           
 15775                           ; BSR set to: 0
 15776                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 15777                           
 15778                           ; BSR set to: 0
 15779  0004A8  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15780  0004AC  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15781  0004B0  CFDF F092          	movff	indf2,??__doprnt
 15782  0004B4  0E02               	movlw	2
 15783  0004B6  26DE               	addwf	postinc2,f,c
 15784  0004B8  CFDF F093          	movff	indf2,??__doprnt+1
 15785  0004BC  0E00               	movlw	0
 15786  0004BE  22DD               	addwfc	postdec2,f,c
 15787  0004C0  C092  FFD9         	movff	??__doprnt,fsr2l
 15788  0004C4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15789  0004C8  50DF               	movf	indf2,w,c
 15790  0004CA  6FA0               	movwf	__doprnt@c& (0+255),b
 15791  0004CC  FFFF               	dw	65535	; assembler added errata NOP
 15792                           
 15793                           ; BSR set to: 0
 15794                           ;doprnt.c: 805: cp = (char *)&c;
 15795                           
 15796                           ; BSR set to: 0
 15797  0004CE  0EA0               	movlw	low __doprnt@c
 15798  0004D0  6F9C               	movwf	__doprnt@cp& (0+255),b
 15799  0004D2  0E00               	movlw	high __doprnt@c
 15800  0004D4  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 15801                           
 15802                           ; BSR set to: 0
 15803                           ;doprnt.c: 806: len = 1;
 15804  0004D6  0E00               	movlw	0
 15805  0004D8  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 15806  0004DA  0E01               	movlw	1
 15807  0004DC  6F99               	movwf	__doprnt@len& (0+255),b
 15808                           
 15809                           ;doprnt.c: 807: goto dostring;
 15810  0004DE  D726               	goto	u4970
 15811  0004E0                     l1063:
 15812  0004E0  FFFF               	dw	65535	; assembler added errata NOP
 15813                           
 15814                           ; BSR set to: 0
 15815  0004E2  0100               	movlb	0	; () banked
 15816  0004E4  518E               	movf	__doprnt@f& (0+255),w,b
 15817  0004E6  6F92               	movwf	??__doprnt& (0+255),b
 15818  0004E8  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 15819  0004EA  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15820  0004EC  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15821  0004EE  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15822  0004F0  C092  FFF6         	movff	??__doprnt,tblptrl
 15823  0004F4  C093  FFF7         	movff	??__doprnt+1,tblptrh
 15824  0004F8  6AF8               	clrf	tblptru,c
 15825  0004FA  0E05               	movlw	(high __ramtop+-1)
 15826  0004FC  64F7               	cpfsgt	tblptrh,c
 15827  0004FE  D004               	bra	u5077
 15828  000500  0008               	tblrd		*
 15829  000502  FFFF               	dw	65535	; errata NOP
 15830  000504  50F5               	movf	tablat,w,c
 15831  000506  D005               	bra	u5070
 15832  000508                     u5077:
 15833  000508  CFF6 FFE9          	movff	tblptrl,fsr0l
 15834  00050C  CFF7 FFEA          	movff	tblptrh,fsr0h
 15835  000510  50EF               	movf	indf0,w,c
 15836  000512                     u5070:
 15837  000512  0100               	movlb	0	; () banked
 15838  000514  6FA0               	movwf	__doprnt@c& (0+255),b
 15839  000516  51A0               	movf	__doprnt@c& (0+255),w,b
 15840                           
 15841                           ; Switch size 1, requested type "space"
 15842                           ; Number of cases is 5, Range of values is 0 to 115
 15843                           ; switch strategies available:
 15844                           ; Name         Instructions Cycles
 15845                           ; simple_byte           16     9 (average)
 15846                           ;	Chosen strategy is simple_byte
 15847  000518  0A00               	xorlw	0	; case 0
 15848  00051A  B4D8               	btfsc	status,2,c
 15849  00051C  D1F6               	goto	u5340
 15850  00051E  0A63               	xorlw	99	; case 99
 15851  000520  B4D8               	btfsc	status,2,c
 15852  000522  D7C1               	goto	l1087
 15853  000524  0A07               	xorlw	7	; case 100
 15854  000526  B4D8               	btfsc	status,2,c
 15855  000528  D007               	goto	l1068
 15856  00052A  0A0D               	xorlw	13	; case 105
 15857  00052C  B4D8               	btfsc	status,2,c
 15858  00052E  D004               	goto	l1068
 15859  000530  0A1A               	xorlw	26	; case 115
 15860  000532  B4D8               	btfsc	status,2,c
 15861  000534  D6B8               	goto	l1069
 15862  000536  D7CA               	goto	l1088
 15863  000538                     l1068:
 15864  000538  FFFF               	dw	65535	; assembler added errata NOP
 15865                           
 15866                           ;doprnt.c: 1253: {
 15867                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15868                           
 15869                           ; BSR set to: 0
 15870  00053A  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15871  00053E  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15872  000542  CFDF F092          	movff	indf2,??__doprnt
 15873  000546  0E02               	movlw	2
 15874  000548  26DE               	addwf	postinc2,f,c
 15875  00054A  CFDF F093          	movff	indf2,??__doprnt+1
 15876  00054E  0E00               	movlw	0
 15877  000550  22DD               	addwfc	postdec2,f,c
 15878  000552  C092  FFD9         	movff	??__doprnt,fsr2l
 15879  000556  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15880  00055A  CFDE F097          	movff	postinc2,__doprnt@val
 15881  00055E  CFDD F098          	movff	postdec2,__doprnt@val+1
 15882                           
 15883                           ;doprnt.c: 1261: if((int)val < 0) {
 15884  000562  0100               	movlb	0	; () banked
 15885  000564  AF98               	btfss	(__doprnt@val+1)& (0+255),7,b
 15886  000566  D006               	goto	l1089
 15887                           
 15888                           ; BSR set to: 0
 15889                           ;doprnt.c: 1262: flag |= 0x03;
 15890  000568  0E03               	movlw	3
 15891  00056A  139B               	iorwf	__doprnt@flag& (0+255),f,b
 15892                           
 15893                           ; BSR set to: 0
 15894                           ;doprnt.c: 1263: val = -val;
 15895  00056C  6D97               	negf	__doprnt@val& (0+255),b
 15896  00056E  1F98               	comf	(__doprnt@val+1)& (0+255),f,b
 15897  000570  B0D8               	btfsc	status,0,c
 15898  000572  2B98               	incf	(__doprnt@val+1)& (0+255),f,b
 15899  000574                     l1089:
 15900  000574  FFFF               	dw	65535	; assembler added errata NOP
 15901                           
 15902                           ; BSR set to: 0
 15903                           ;doprnt.c: 1264: }
 15904                           ;doprnt.c: 1266: }
 15905                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15906                           
 15907                           ; BSR set to: 0
 15908  000576  0E01               	movlw	1
 15909  000578  6FA0               	movwf	__doprnt@c& (0+255),b
 15910  00057A                     l5146:
 15911  00057A  FFFF               	dw	65535	; assembler added errata NOP
 15912                           
 15913                           ; BSR set to: 0
 15914  00057C  0E05               	movlw	5
 15915  00057E  19A0               	xorwf	__doprnt@c& (0+255),w,b
 15916  000580  B4D8               	btfsc	status,2,c
 15917  000582  D014               	goto	u5110
 15918                           
 15919                           ; BSR set to: 0
 15920                           ;doprnt.c: 1306: if(val < dpowers[c])
 15921                           
 15922                           ; BSR set to: 0
 15923                           
 15924                           ; BSR set to: 0
 15925  000584  51A0               	movf	__doprnt@c& (0+255),w,b
 15926  000586  0D02               	mullw	2
 15927  000588  0EA5               	movlw	low _dpowers
 15928  00058A  24F3               	addwf	prodl,w,c
 15929  00058C  6EF6               	movwf	tblptrl,c
 15930  00058E  0E7A               	movlw	high _dpowers
 15931  000590  20F4               	addwfc	prodh,w,c
 15932  000592  6EF7               	movwf	tblptrh,c
 15933  000594                     	if	0	;There are less than 3 active tblptr bytes
 15934  000594                     	endif
 15935  000594  0009               	tblrd		*+
 15936  000596  FFFF               	dw	65535	; errata NOP
 15937  000598  50F5               	movf	tablat,w,c
 15938  00059A  5D97               	subwf	__doprnt@val& (0+255),w,b
 15939  00059C  0009               	tblrd		*+
 15940  00059E  FFFF               	dw	65535	; errata NOP
 15941  0005A0  50F5               	movf	tablat,w,c
 15942  0005A2  5998               	subwfb	(__doprnt@val+1)& (0+255),w,b
 15943  0005A4  A0D8               	btfss	status,0,c
 15944  0005A6  D002               	goto	u5110
 15945                           
 15946                           ; BSR set to: 0
 15947                           
 15948                           ; BSR set to: 0
 15949                           
 15950                           ; BSR set to: 0
 15951                           ;doprnt.c: 1307: break;
 15952  0005A8  2BA0               	incf	__doprnt@c& (0+255),f,b
 15953  0005AA  D7E7               	goto	l5146
 15954  0005AC                     u5110:
 15955  0005AC  FFFF               	dw	65535	; assembler added errata NOP
 15956                           
 15957                           ; BSR set to: 0
 15958                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15959                           
 15960                           ; BSR set to: 0
 15961  0005AE  519E               	movf	__doprnt@width& (0+255),w,b
 15962  0005B0  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 15963  0005B2  B4D8               	btfsc	status,2,c
 15964  0005B4  D009               	goto	l1093
 15965                           
 15966                           ; BSR set to: 0
 15967  0005B6  C09B  F092         	movff	__doprnt@flag,??__doprnt
 15968  0005BA  0E03               	movlw	3
 15969  0005BC  1792               	andwf	??__doprnt& (0+255),f,b
 15970  0005BE  B4D8               	btfsc	status,2,c
 15971  0005C0  D003               	goto	l1093
 15972                           
 15973                           ; BSR set to: 0
 15974                           ;doprnt.c: 1346: width--;
 15975  0005C2  079E               	decf	__doprnt@width& (0+255),f,b
 15976  0005C4  A0D8               	btfss	status,0,c
 15977  0005C6  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 15978  0005C8                     l1093:
 15979  0005C8  FFFF               	dw	65535	; assembler added errata NOP
 15980                           
 15981                           ; BSR set to: 0
 15982                           ;doprnt.c: 1381: if(width > c)
 15983                           
 15984                           ; BSR set to: 0
 15985  0005CA  0E80               	movlw	128
 15986  0005CC  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 15987  0005CE  0E7F               	movlw	127
 15988  0005D0  6F92               	movwf	??__doprnt& (0+255),b
 15989  0005D2  519E               	movf	__doprnt@width& (0+255),w,b
 15990  0005D4  5DA0               	subwf	__doprnt@c& (0+255),w,b
 15991  0005D6  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 15992  0005D8  0A80               	xorlw	128
 15993  0005DA  5992               	subwfb	??__doprnt& (0+255),w,b
 15994  0005DC  B0D8               	btfsc	status,0,c
 15995  0005DE  D007               	goto	l1094
 15996                           
 15997                           ; BSR set to: 0
 15998                           ;doprnt.c: 1382: width -= c;
 15999  0005E0  51A0               	movf	__doprnt@c& (0+255),w,b
 16000  0005E2  5F9E               	subwf	__doprnt@width& (0+255),f,b
 16001  0005E4  0E00               	movlw	0
 16002  0005E6  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 16003  0005E8  0EFF               	movlw	255
 16004  0005EA  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 16005  0005EC  D005               	goto	l1095
 16006  0005EE                     l1094:
 16007  0005EE  FFFF               	dw	65535	; assembler added errata NOP
 16008                           
 16009                           ; BSR set to: 0
 16010                           ;doprnt.c: 1383: else
 16011                           ;doprnt.c: 1384: width = 0;
 16012                           
 16013                           ; BSR set to: 0
 16014  0005F0  0E00               	movlw	0
 16015  0005F2  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 16016  0005F4  0E00               	movlw	0
 16017  0005F6  6F9E               	movwf	__doprnt@width& (0+255),b
 16018  0005F8                     l1095:
 16019  0005F8  FFFF               	dw	65535	; assembler added errata NOP
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;doprnt.c: 1387: if(flag & 0x04) {
 16023                           
 16024                           ; BSR set to: 0
 16025  0005FA  A59B               	btfss	__doprnt@flag& (0+255),2,b
 16026  0005FC  D07F               	goto	l1096
 16027                           
 16028                           ; BSR set to: 0
 16029                           ;doprnt.c: 1392: if(flag & 0x03)
 16030  0005FE  C09B  F092         	movff	__doprnt@flag,??__doprnt
 16031  000602  0E03               	movlw	3
 16032  000604  1792               	andwf	??__doprnt& (0+255),f,b
 16033  000606  B4D8               	btfsc	status,2,c
 16034  000608  D036               	goto	l1099
 16035                           
 16036                           ; BSR set to: 0
 16037                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 16038  00060A  EE20 F002          	lfsr	2,2
 16039  00060E  518C               	movf	__doprnt@pb& (0+255),w,b
 16040  000610  26D9               	addwf	fsr2l,f,c
 16041  000612  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16042  000614  22DA               	addwfc	fsr2h,f,c
 16043  000616  50DE               	movf	postinc2,w,c
 16044  000618  10DE               	iorwf	postinc2,w,c
 16045  00061A  B4D8               	btfsc	status,2,c
 16046  00061C  D016               	goto	l1098
 16047                           
 16048                           ; BSR set to: 0
 16049  00061E  EE20 F002          	lfsr	2,2
 16050  000622  518C               	movf	__doprnt@pb& (0+255),w,b
 16051  000624  26D9               	addwf	fsr2l,f,c
 16052  000626  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16053  000628  22DA               	addwfc	fsr2h,f,c
 16054  00062A  D801               	call	u5188
 16055  00062C  D024               	goto	l1099
 16056  00062E                     u5188:
 16057  00062E  FFFF               	dw	65535	; assembler added errata NOP
 16058  000630  0005               	push	
 16059  000632  6EFA               	movwf	pclath,c
 16060  000634  50DE               	movf	postinc2,w,c
 16061  000636  6EFD               	movwf	tosl,c
 16062  000638  50DE               	movf	postinc2,w,c
 16063  00063A  6EFE               	movwf	tosh,c
 16064  00063C  50F8               	movf	tblptru,w,c
 16065  00063E  6EFF               	movwf	tosu,c
 16066  000640  50FA               	movf	pclath,w,c
 16067  000642  0E2D               	movlw	45
 16068  000644  0012               	return		;indir
 16069  000646  FFFF               	dw	65535	; errata NOP
 16070  000648  D016               	goto	l1099
 16071  00064A                     l1098:
 16072  00064A  FFFF               	dw	65535	; assembler added errata NOP
 16073  00064C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16074  000650  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16075  000654  CFDE F092          	movff	postinc2,??__doprnt
 16076  000658  CFDD F093          	movff	postdec2,??__doprnt+1
 16077  00065C  C092  FFD9         	movff	??__doprnt,fsr2l
 16078  000660  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16079  000664  0E2D               	movlw	45
 16080  000666  6EDF               	movwf	indf2,c
 16081  000668  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16082  00066C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16083  000670  2ADE               	incf	postinc2,f,c
 16084  000672  0E00               	movlw	0
 16085  000674  22DD               	addwfc	postdec2,f,c
 16086  000676                     l1099:
 16087  000676  FFFF               	dw	65535	; assembler added errata NOP
 16088                           
 16089                           ;doprnt.c: 1415: if(width)
 16090  000678  0100               	movlb	0	; () banked
 16091  00067A  FFFF               	dw	65535	; assembler added errata NOP
 16092  00067C  519E               	movf	__doprnt@width& (0+255),w,b
 16093  00067E  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 16094  000680  B4D8               	btfsc	status,2,c
 16095  000682  D0BE               	goto	l1113
 16096                           
 16097                           ; BSR set to: 0
 16098                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 16099                           
 16100                           ; BSR set to: 0
 16101                           
 16102                           ;doprnt.c: 1416: do
 16103  000684  EE20 F002          	lfsr	2,2
 16104  000688  518C               	movf	__doprnt@pb& (0+255),w,b
 16105  00068A  26D9               	addwf	fsr2l,f,c
 16106  00068C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16107  00068E  22DA               	addwfc	fsr2h,f,c
 16108  000690  50DE               	movf	postinc2,w,c
 16109  000692  10DE               	iorwf	postinc2,w,c
 16110  000694  B4D8               	btfsc	status,2,c
 16111  000696  D016               	goto	l1102
 16112                           
 16113                           ; BSR set to: 0
 16114  000698  EE20 F002          	lfsr	2,2
 16115  00069C  518C               	movf	__doprnt@pb& (0+255),w,b
 16116  00069E  26D9               	addwf	fsr2l,f,c
 16117  0006A0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16118  0006A2  22DA               	addwfc	fsr2h,f,c
 16119  0006A4  D801               	call	u5218
 16120  0006A6  D024               	goto	l1103
 16121  0006A8                     u5218:
 16122  0006A8  FFFF               	dw	65535	; assembler added errata NOP
 16123  0006AA  0005               	push	
 16124  0006AC  6EFA               	movwf	pclath,c
 16125  0006AE  50DE               	movf	postinc2,w,c
 16126  0006B0  6EFD               	movwf	tosl,c
 16127  0006B2  50DE               	movf	postinc2,w,c
 16128  0006B4  6EFE               	movwf	tosh,c
 16129  0006B6  50F8               	movf	tblptru,w,c
 16130  0006B8  6EFF               	movwf	tosu,c
 16131  0006BA  50FA               	movf	pclath,w,c
 16132  0006BC  0E30               	movlw	48
 16133  0006BE  0012               	return		;indir
 16134  0006C0  FFFF               	dw	65535	; errata NOP
 16135  0006C2  D016               	goto	l1103
 16136  0006C4                     l1102:
 16137  0006C4  FFFF               	dw	65535	; assembler added errata NOP
 16138  0006C6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16139  0006CA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16140  0006CE  CFDE F092          	movff	postinc2,??__doprnt
 16141  0006D2  CFDD F093          	movff	postdec2,??__doprnt+1
 16142  0006D6  C092  FFD9         	movff	??__doprnt,fsr2l
 16143  0006DA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16144  0006DE  0E30               	movlw	48
 16145  0006E0  6EDF               	movwf	indf2,c
 16146  0006E2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16147  0006E6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16148  0006EA  2ADE               	incf	postinc2,f,c
 16149  0006EC  0E00               	movlw	0
 16150  0006EE  22DD               	addwfc	postdec2,f,c
 16151  0006F0                     l1103:
 16152  0006F0  FFFF               	dw	65535	; assembler added errata NOP
 16153                           
 16154                           ;doprnt.c: 1418: while(--width);
 16155  0006F2  0100               	movlb	0	; () banked
 16156  0006F4  079E               	decf	__doprnt@width& (0+255),f,b
 16157  0006F6  A0D8               	btfss	status,0,c
 16158  0006F8  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 16159  0006FA  D7BF               	goto	L51
 16160  0006FC                     l1096:
 16161  0006FC  FFFF               	dw	65535	; assembler added errata NOP
 16162                           
 16163                           ; BSR set to: 0
 16164                           ;doprnt.c: 1422: {
 16165                           ;doprnt.c: 1424: if(width
 16166                           ;doprnt.c: 1428: )
 16167                           
 16168                           ; BSR set to: 0
 16169  0006FE  519E               	movf	__doprnt@width& (0+255),w,b
 16170  000700  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 16171  000702  B4D8               	btfsc	status,2,c
 16172  000704  D040               	goto	u5260
 16173  000706                     u5230:
 16174  000706  FFFF               	dw	65535	; assembler added errata NOP
 16175                           
 16176                           ; BSR set to: 0
 16177                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 16178                           
 16179                           ; BSR set to: 0
 16180                           
 16181                           ;doprnt.c: 1429: do
 16182  000708  EE20 F002          	lfsr	2,2
 16183  00070C  518C               	movf	__doprnt@pb& (0+255),w,b
 16184  00070E  26D9               	addwf	fsr2l,f,c
 16185  000710  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16186  000712  22DA               	addwfc	fsr2h,f,c
 16187  000714  50DE               	movf	postinc2,w,c
 16188  000716  10DE               	iorwf	postinc2,w,c
 16189  000718  B4D8               	btfsc	status,2,c
 16190  00071A  D016               	goto	l1108
 16191                           
 16192                           ; BSR set to: 0
 16193  00071C  EE20 F002          	lfsr	2,2
 16194  000720  518C               	movf	__doprnt@pb& (0+255),w,b
 16195  000722  26D9               	addwf	fsr2l,f,c
 16196  000724  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16197  000726  22DA               	addwfc	fsr2h,f,c
 16198  000728  D801               	call	u5258
 16199  00072A  D024               	goto	l1109
 16200  00072C                     u5258:
 16201  00072C  FFFF               	dw	65535	; assembler added errata NOP
 16202  00072E  0005               	push	
 16203  000730  6EFA               	movwf	pclath,c
 16204  000732  50DE               	movf	postinc2,w,c
 16205  000734  6EFD               	movwf	tosl,c
 16206  000736  50DE               	movf	postinc2,w,c
 16207  000738  6EFE               	movwf	tosh,c
 16208  00073A  50F8               	movf	tblptru,w,c
 16209  00073C  6EFF               	movwf	tosu,c
 16210  00073E  50FA               	movf	pclath,w,c
 16211  000740  0E20               	movlw	32
 16212  000742  0012               	return		;indir
 16213  000744  FFFF               	dw	65535	; errata NOP
 16214  000746  D016               	goto	l1109
 16215  000748                     l1108:
 16216  000748  FFFF               	dw	65535	; assembler added errata NOP
 16217  00074A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16218  00074E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16219  000752  CFDE F092          	movff	postinc2,??__doprnt
 16220  000756  CFDD F093          	movff	postdec2,??__doprnt+1
 16221  00075A  C092  FFD9         	movff	??__doprnt,fsr2l
 16222  00075E  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16223  000762  0E20               	movlw	32
 16224  000764  6EDF               	movwf	indf2,c
 16225  000766  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16226  00076A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16227  00076E  2ADE               	incf	postinc2,f,c
 16228  000770  0E00               	movlw	0
 16229  000772  22DD               	addwfc	postdec2,f,c
 16230  000774                     l1109:
 16231  000774  FFFF               	dw	65535	; assembler added errata NOP
 16232                           
 16233                           ;doprnt.c: 1431: while(--width);
 16234  000776  0100               	movlb	0	; () banked
 16235  000778  079E               	decf	__doprnt@width& (0+255),f,b
 16236  00077A  A0D8               	btfss	status,0,c
 16237  00077C  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 16238  00077E  519E               	movf	__doprnt@width& (0+255),w,b
 16239  000780  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 16240  000782  A4D8               	btfss	status,2,c
 16241  000784  D7C0               	goto	u5230
 16242  000786                     u5260:
 16243  000786  FFFF               	dw	65535	; assembler added errata NOP
 16244                           
 16245                           ; BSR set to: 0
 16246                           ;doprnt.c: 1438: if(flag & 0x03)
 16247                           
 16248                           ; BSR set to: 0
 16249                           
 16250                           ; BSR set to: 0
 16251  000788  C09B  F092         	movff	__doprnt@flag,??__doprnt
 16252  00078C  0E03               	movlw	3
 16253  00078E  1792               	andwf	??__doprnt& (0+255),f,b
 16254  000790  B4D8               	btfsc	status,2,c
 16255  000792  D036               	goto	l1113
 16256                           
 16257                           ; BSR set to: 0
 16258                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 16259  000794  EE20 F002          	lfsr	2,2
 16260  000798  518C               	movf	__doprnt@pb& (0+255),w,b
 16261  00079A  26D9               	addwf	fsr2l,f,c
 16262  00079C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16263  00079E  22DA               	addwfc	fsr2h,f,c
 16264  0007A0  50DE               	movf	postinc2,w,c
 16265  0007A2  10DE               	iorwf	postinc2,w,c
 16266  0007A4  B4D8               	btfsc	status,2,c
 16267  0007A6  D016               	goto	l1112
 16268                           
 16269                           ; BSR set to: 0
 16270  0007A8  EE20 F002          	lfsr	2,2
 16271  0007AC  518C               	movf	__doprnt@pb& (0+255),w,b
 16272  0007AE  26D9               	addwf	fsr2l,f,c
 16273  0007B0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16274  0007B2  22DA               	addwfc	fsr2h,f,c
 16275  0007B4  D801               	call	u5298
 16276  0007B6  D024               	goto	l1113
 16277  0007B8                     u5298:
 16278  0007B8  FFFF               	dw	65535	; assembler added errata NOP
 16279  0007BA  0005               	push	
 16280  0007BC  6EFA               	movwf	pclath,c
 16281  0007BE  50DE               	movf	postinc2,w,c
 16282  0007C0  6EFD               	movwf	tosl,c
 16283  0007C2  50DE               	movf	postinc2,w,c
 16284  0007C4  6EFE               	movwf	tosh,c
 16285  0007C6  50F8               	movf	tblptru,w,c
 16286  0007C8  6EFF               	movwf	tosu,c
 16287  0007CA  50FA               	movf	pclath,w,c
 16288  0007CC  0E2D               	movlw	45
 16289  0007CE  0012               	return		;indir
 16290  0007D0  FFFF               	dw	65535	; errata NOP
 16291  0007D2  D016               	goto	l1113
 16292  0007D4                     l1112:
 16293  0007D4  FFFF               	dw	65535	; assembler added errata NOP
 16294  0007D6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16295  0007DA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16296  0007DE  CFDE F092          	movff	postinc2,??__doprnt
 16297  0007E2  CFDD F093          	movff	postdec2,??__doprnt+1
 16298  0007E6  C092  FFD9         	movff	??__doprnt,fsr2l
 16299  0007EA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16300  0007EE  0E2D               	movlw	45
 16301  0007F0  6EDF               	movwf	indf2,c
 16302  0007F2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16303  0007F6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16304  0007FA  2ADE               	incf	postinc2,f,c
 16305  0007FC  0E00               	movlw	0
 16306  0007FE  22DD               	addwfc	postdec2,f,c
 16307  000800                     l1113:
 16308  000800  FFFF               	dw	65535	; assembler added errata NOP
 16309                           
 16310                           ;doprnt.c: 1469: }
 16311                           ;doprnt.c: 1472: prec = c;
 16312  000802  C0A0  F096         	movff	__doprnt@c,__doprnt@prec
 16313                           
 16314                           ;doprnt.c: 1474: while(prec--) {
 16315  000806  D05D               	goto	l1117
 16316  000808  FFFF               	dw	65535	; assembler added errata NOP
 16317                           
 16318                           ;doprnt.c: 1478: {
 16319                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16320  00080A  0100               	movlb	0	; () banked
 16321  00080C  5196               	movf	__doprnt@prec& (0+255),w,b
 16322  00080E  0D02               	mullw	2
 16323  000810  0EA5               	movlw	low _dpowers
 16324  000812  24F3               	addwf	prodl,w,c
 16325  000814  6EF6               	movwf	tblptrl,c
 16326  000816  0E7A               	movlw	high _dpowers
 16327  000818  20F4               	addwfc	prodh,w,c
 16328  00081A  6EF7               	movwf	tblptrh,c
 16329  00081C                     	if	0	;There are less than 3 active tblptr bytes
 16330  00081C                     	endif
 16331  00081C  0009               	tblrd		*+
 16332  00081E  FFFF               	dw	65535	; errata NOP
 16333  000820  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16334  000824  000A               	tblrd		*-
 16335  000826  FFFF               	dw	65535	; errata NOP
 16336  000828  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16337  00082C  C097  F080         	movff	__doprnt@val,___lwdiv@dividend
 16338  000830  C098  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
 16339  000834  EC83  F03A         	call	___lwdiv
 16340  000838  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16341  00083C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16342  000840  0E00               	movlw	0
 16343  000842  0100               	movlb	0	; () banked
 16344  000844  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16345  000846  0E0A               	movlw	10
 16346  000848  6F89               	movwf	___lwmod@divisor& (0+255),b
 16347  00084A  EC04  F03A         	call	___lwmod	;wreg free
 16348  00084E  0100               	movlb	0	; () banked
 16349  000850  5187               	movf	?___lwmod& (0+255),w,b
 16350  000852  0F30               	addlw	48
 16351  000854  6FA0               	movwf	__doprnt@c& (0+255),b
 16352                           
 16353                           ; BSR set to: 0
 16354                           ;doprnt.c: 1523: }
 16355                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 16356  000856  EE20 F002          	lfsr	2,2
 16357  00085A  518C               	movf	__doprnt@pb& (0+255),w,b
 16358  00085C  26D9               	addwf	fsr2l,f,c
 16359  00085E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16360  000860  22DA               	addwfc	fsr2h,f,c
 16361  000862  50DE               	movf	postinc2,w,c
 16362  000864  10DE               	iorwf	postinc2,w,c
 16363  000866  B4D8               	btfsc	status,2,c
 16364  000868  D016               	goto	l1116
 16365                           
 16366                           ; BSR set to: 0
 16367  00086A  EE20 F002          	lfsr	2,2
 16368  00086E  518C               	movf	__doprnt@pb& (0+255),w,b
 16369  000870  26D9               	addwf	fsr2l,f,c
 16370  000872  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16371  000874  22DA               	addwfc	fsr2h,f,c
 16372  000876  D801               	call	u5318
 16373  000878  D024               	goto	l1117
 16374  00087A                     u5318:
 16375  00087A  FFFF               	dw	65535	; assembler added errata NOP
 16376  00087C  0005               	push	
 16377  00087E  6EFA               	movwf	pclath,c
 16378  000880  50DE               	movf	postinc2,w,c
 16379  000882  6EFD               	movwf	tosl,c
 16380  000884  50DE               	movf	postinc2,w,c
 16381  000886  6EFE               	movwf	tosh,c
 16382  000888  50F8               	movf	tblptru,w,c
 16383  00088A  6EFF               	movwf	tosu,c
 16384  00088C  50FA               	movf	pclath,w,c
 16385  00088E  51A0               	movf	__doprnt@c& (0+255),w,b
 16386  000890  0012               	return		;indir
 16387  000892  FFFF               	dw	65535	; errata NOP
 16388  000894  D016               	goto	l1117
 16389  000896                     l1116:
 16390  000896  FFFF               	dw	65535	; assembler added errata NOP
 16391  000898  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16392  00089C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16393  0008A0  CFDE F092          	movff	postinc2,??__doprnt
 16394  0008A4  CFDD F093          	movff	postdec2,??__doprnt+1
 16395  0008A8  C092  FFD9         	movff	??__doprnt,fsr2l
 16396  0008AC  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16397  0008B0  C0A0  FFDF         	movff	__doprnt@c,indf2
 16398  0008B4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16399  0008B8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16400  0008BC  2ADE               	incf	postinc2,f,c
 16401  0008BE  0E00               	movlw	0
 16402  0008C0  22DD               	addwfc	postdec2,f,c
 16403  0008C2                     l1117:
 16404  0008C2  FFFF               	dw	65535	; assembler added errata NOP
 16405  0008C4  0100               	movlb	0	; () banked
 16406  0008C6  0796               	decf	__doprnt@prec& (0+255),f,b
 16407  0008C8  2996               	incf	__doprnt@prec& (0+255),w,b
 16408  0008CA  A4D8               	btfss	status,2,c
 16409  0008CC  D79D               	goto	l1115
 16410  0008CE                     u5320:
 16411  0008CE  FFFF               	dw	65535	; assembler added errata NOP
 16412                           
 16413                           ; BSR set to: 0
 16414                           
 16415                           ; BSR set to: 0
 16416  0008D0  0100               	movlb	0	; () banked
 16417  0008D2  518E               	movf	__doprnt@f& (0+255),w,b
 16418  0008D4  6F92               	movwf	??__doprnt& (0+255),b
 16419  0008D6  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 16420  0008D8  6F93               	movwf	(??__doprnt+1)& (0+255),b
 16421  0008DA  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 16422  0008DC  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 16423  0008DE  C092  FFF6         	movff	??__doprnt,tblptrl
 16424  0008E2  C093  FFF7         	movff	??__doprnt+1,tblptrh
 16425  0008E6  6AF8               	clrf	tblptru,c
 16426  0008E8  0E05               	movlw	(high __ramtop+-1)
 16427  0008EA  64F7               	cpfsgt	tblptrh,c
 16428  0008EC  D004               	bra	u5337
 16429  0008EE  0008               	tblrd		*
 16430  0008F0  FFFF               	dw	65535	; errata NOP
 16431  0008F2  50F5               	movf	tablat,w,c
 16432  0008F4  D005               	bra	u5330
 16433  0008F6                     u5337:
 16434  0008F6  CFF6 FFE9          	movff	tblptrl,fsr0l
 16435  0008FA  CFF7 FFEA          	movff	tblptrh,fsr0h
 16436  0008FE  50EF               	movf	indf0,w,c
 16437  000900                     u5330:
 16438  000900  0100               	movlb	0	; () banked
 16439  000902  6FA0               	movwf	__doprnt@c& (0+255),b
 16440  000904  51A0               	movf	__doprnt@c& (0+255),w,b
 16441  000906  A4D8               	btfss	status,2,c
 16442  000908  D40B               	goto	l1050
 16443  00090A                     u5340:
 16444  00090A  FFFF               	dw	65535	; assembler added errata NOP
 16445                           
 16446                           ;doprnt.c: 1540: return 0;
 16447                           
 16448                           ; BSR set to: 0
 16449                           
 16450                           ;doprnt.c: 1525: }
 16451                           ;doprnt.c: 1533: }
 16452                           ;doprnt.c: 1535: alldone:
 16453                           
 16454                           ; BSR set to: 0
 16455  00090C  0E00               	movlw	0
 16456  00090E  0100               	movlb	0	; () banked
 16457  000910  6F8D               	movwf	(?__doprnt+1)& (0+255),b
 16458  000912  0E00               	movlw	0
 16459  000914  6F8C               	movwf	?__doprnt& (0+255),b
 16460                           
 16461                           ; BSR set to: 0
 16462                           
 16463                           ; BSR set to: 0
 16464  000916  0012               	return		;funcret
 16465  000918  FFFF               	dw	65535	; errata NOP
 16466  00091A                     __end_of__doprnt:
 16467                           	opt stack 0
 16468                           tosu	equ	0xFFF
 16469                           tosh	equ	0xFFE
 16470                           tosl	equ	0xFFD
 16471                           pclath	equ	0xFFA
 16472                           tblptru	equ	0xFF8
 16473                           tblptrh	equ	0xFF7
 16474                           tblptrl	equ	0xFF6
 16475                           tablat	equ	0xFF5
 16476                           prodh	equ	0xFF4
 16477                           prodl	equ	0xFF3
 16478                           intcon	equ	0xFF2
 16479                           indf0	equ	0xFEF
 16480                           postinc0	equ	0xFEE
 16481                           fsr0h	equ	0xFEA
 16482                           fsr0l	equ	0xFE9
 16483                           wreg	equ	0xFE8
 16484                           postdec1	equ	0xFE5
 16485                           fsr1l	equ	0xFE1
 16486                           indf2	equ	0xFDF
 16487                           postinc2	equ	0xFDE
 16488                           postdec2	equ	0xFDD
 16489                           fsr2h	equ	0xFDA
 16490                           fsr2l	equ	0xFD9
 16491                           status	equ	0xFD8
 16492                           
 16493 ;; *************** function _putch *****************
 16494 ;; Defined at:
 16495 ;;		line 16 in file "serial.h"
 16496 ;; Parameters:    Size  Location     Type
 16497 ;;  c               1    wreg     unsigned char 
 16498 ;; Auto vars:     Size  Location     Type
 16499 ;;  c               1    0[BANK0 ] unsigned char 
 16500 ;; Return value:  Size  Location     Type
 16501 ;;                  1    wreg      void 
 16502 ;; Registers used:
 16503 ;;		wreg
 16504 ;; Tracked objects:
 16505 ;;		On entry : 0/0
 16506 ;;		On exit  : 0/0
 16507 ;;		Unchanged: 0/0
 16508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16509 ;;      Params:         0       0       0       0       0       0       0
 16510 ;;      Locals:         0       1       0       0       0       0       0
 16511 ;;      Temps:          0       0       0       0       0       0       0
 16512 ;;      Totals:         0       1       0       0       0       0       0
 16513 ;;Total ram usage:        1 bytes
 16514 ;; Hardware stack levels used:    1
 16515 ;; Hardware stack levels required when called:    6
 16516 ;; This function calls:
 16517 ;;		Nothing
 16518 ;; This function is called by:
 16519 ;;		_printf
 16520 ;;		__doprnt
 16521 ;; This function uses a non-reentrant model
 16522 ;;
 16523                           
 16524                           	psect	text49
 16525  006C82                     __ptext49:
 16526                           	opt stack 0
 16527  006C82                     _putch:
 16528                           	opt stack 0
 16529  006C82  FFFF               	dw	65535	; assembler added errata NOP
 16530                           
 16531                           ; BSR set to: 0
 16532                           ;incstack = 0
 16533                           ;putch@c stored from wreg
 16534  006C84  0100               	movlb	0	; () banked
 16535  006C86  6F80               	movwf	putch@c& (0+255),b
 16536  006C88  FFFF               	dw	65535	; assembler added errata NOP
 16537                           
 16538                           ;serial.h: 17: while (!TXSTAbits.TRMT);
 16539  006C8A  A2AC               	btfss	4012,1,c	;volatile
 16540  006C8C  D7FD               	goto	l4866
 16541                           
 16542                           ;serial.h: 18: TXREG = c;
 16543  006C8E  C080  FFAD         	movff	putch@c,4013	;volatile
 16544  006C92  0012               	return		;funcret
 16545  006C94  FFFF               	dw	65535	; errata NOP
 16546  006C96                     __end_of_putch:
 16547                           	opt stack 0
 16548                           tosu	equ	0xFFF
 16549                           tosh	equ	0xFFE
 16550                           tosl	equ	0xFFD
 16551                           pclath	equ	0xFFA
 16552                           tblptru	equ	0xFF8
 16553                           tblptrh	equ	0xFF7
 16554                           tblptrl	equ	0xFF6
 16555                           tablat	equ	0xFF5
 16556                           prodh	equ	0xFF4
 16557                           prodl	equ	0xFF3
 16558                           intcon	equ	0xFF2
 16559                           indf0	equ	0xFEF
 16560                           postinc0	equ	0xFEE
 16561                           fsr0h	equ	0xFEA
 16562                           fsr0l	equ	0xFE9
 16563                           wreg	equ	0xFE8
 16564                           postdec1	equ	0xFE5
 16565                           fsr1l	equ	0xFE1
 16566                           indf2	equ	0xFDF
 16567                           postinc2	equ	0xFDE
 16568                           postdec2	equ	0xFDD
 16569                           fsr2h	equ	0xFDA
 16570                           fsr2l	equ	0xFD9
 16571                           status	equ	0xFD8
 16572                           
 16573 ;; *************** function _isdigit *****************
 16574 ;; Defined at:
 16575 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 16576 ;; Parameters:    Size  Location     Type
 16577 ;;  c               1    wreg     unsigned char 
 16578 ;; Auto vars:     Size  Location     Type
 16579 ;;  c               1    2[BANK0 ] unsigned char 
 16580 ;; Return value:  Size  Location     Type
 16581 ;;		None               void
 16582 ;; Registers used:
 16583 ;;		wreg, status,2, status,0
 16584 ;; Tracked objects:
 16585 ;;		On entry : 0/0
 16586 ;;		On exit  : 0/0
 16587 ;;		Unchanged: 0/0
 16588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16589 ;;      Params:         0       0       0       0       0       0       0
 16590 ;;      Locals:         0       2       0       0       0       0       0
 16591 ;;      Temps:          0       1       0       0       0       0       0
 16592 ;;      Totals:         0       3       0       0       0       0       0
 16593 ;;Total ram usage:        3 bytes
 16594 ;; Hardware stack levels used:    1
 16595 ;; Hardware stack levels required when called:    6
 16596 ;; This function calls:
 16597 ;;		Nothing
 16598 ;; This function is called by:
 16599 ;;		__doprnt
 16600 ;;		_atoi
 16601 ;; This function uses a non-reentrant model
 16602 ;;
 16603                           
 16604                           	psect	text50
 16605  006D6A                     __ptext50:
 16606                           	opt stack 0
 16607  006D6A                     _isdigit:
 16608                           	opt stack 0
 16609  006D6A  FFFF               	dw	65535	; assembler added errata NOP
 16610                           
 16611                           ;incstack = 0
 16612                           ;isdigit@c stored from wreg
 16613  006D6C  0100               	movlb	0	; () banked
 16614  006D6E  6F82               	movwf	isdigit@c& (0+255),b
 16615  006D70  0E00               	movlw	0
 16616  006D72  0100               	movlb	0	; () banked
 16617  006D74  6F81               	movwf	_isdigit$1872& (0+255),b
 16618                           
 16619                           ; BSR set to: 0
 16620  006D76  0E3A               	movlw	58
 16621  006D78  6182               	cpfslt	isdigit@c& (0+255),b
 16622  006D7A  D005               	goto	l1465
 16623                           
 16624                           ; BSR set to: 0
 16625  006D7C  0E2F               	movlw	47
 16626  006D7E  6582               	cpfsgt	isdigit@c& (0+255),b
 16627  006D80  D002               	goto	l1465
 16628                           
 16629                           ; BSR set to: 0
 16630  006D82  0E01               	movlw	1
 16631  006D84  6F81               	movwf	_isdigit$1872& (0+255),b
 16632  006D86                     l1465:
 16633  006D86  FFFF               	dw	65535	; assembler added errata NOP
 16634                           
 16635                           ; BSR set to: 0
 16636                           
 16637                           ; BSR set to: 0
 16638  006D88  C081  F080         	movff	_isdigit$1872,??_isdigit
 16639  006D8C  3180               	rrcf	??_isdigit& (0+255),w,b
 16640                           
 16641                           ; BSR set to: 0
 16642                           
 16643                           ; BSR set to: 0
 16644  006D8E  0012               	return		;funcret
 16645  006D90  FFFF               	dw	65535	; errata NOP
 16646  006D92                     __end_of_isdigit:
 16647                           	opt stack 0
 16648                           tosu	equ	0xFFF
 16649                           tosh	equ	0xFFE
 16650                           tosl	equ	0xFFD
 16651                           pclath	equ	0xFFA
 16652                           tblptru	equ	0xFF8
 16653                           tblptrh	equ	0xFF7
 16654                           tblptrl	equ	0xFF6
 16655                           tablat	equ	0xFF5
 16656                           prodh	equ	0xFF4
 16657                           prodl	equ	0xFF3
 16658                           intcon	equ	0xFF2
 16659                           indf0	equ	0xFEF
 16660                           postinc0	equ	0xFEE
 16661                           fsr0h	equ	0xFEA
 16662                           fsr0l	equ	0xFE9
 16663                           wreg	equ	0xFE8
 16664                           postdec1	equ	0xFE5
 16665                           fsr1l	equ	0xFE1
 16666                           indf2	equ	0xFDF
 16667                           postinc2	equ	0xFDE
 16668                           postdec2	equ	0xFDD
 16669                           fsr2h	equ	0xFDA
 16670                           fsr2l	equ	0xFD9
 16671                           status	equ	0xFD8
 16672                           
 16673 ;; *************** function ___wmul *****************
 16674 ;; Defined at:
 16675 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16676 ;; Parameters:    Size  Location     Type
 16677 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16678 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16679 ;; Auto vars:     Size  Location     Type
 16680 ;;  product         2    4[BANK0 ] unsigned int 
 16681 ;; Return value:  Size  Location     Type
 16682 ;;                  2    0[BANK0 ] unsigned int 
 16683 ;; Registers used:
 16684 ;;		wreg, status,2, status,0, prodl, prodh
 16685 ;; Tracked objects:
 16686 ;;		On entry : 0/0
 16687 ;;		On exit  : 0/0
 16688 ;;		Unchanged: 0/0
 16689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16690 ;;      Params:         0       4       0       0       0       0       0
 16691 ;;      Locals:         0       2       0       0       0       0       0
 16692 ;;      Temps:          0       0       0       0       0       0       0
 16693 ;;      Totals:         0       6       0       0       0       0       0
 16694 ;;Total ram usage:        6 bytes
 16695 ;; Hardware stack levels used:    1
 16696 ;; Hardware stack levels required when called:    6
 16697 ;; This function calls:
 16698 ;;		Nothing
 16699 ;; This function is called by:
 16700 ;;		__doprnt
 16701 ;;		_atoi
 16702 ;; This function uses a non-reentrant model
 16703 ;;
 16704                           
 16705                           	psect	text51
 16706  006DBE                     __ptext51:
 16707                           	opt stack 0
 16708  006DBE                     ___wmul:
 16709                           	opt stack 0
 16710  006DBE  FFFF               	dw	65535	; assembler added errata NOP
 16711                           
 16712                           ; BSR set to: 0
 16713                           ;incstack = 0
 16714  006DC0  0100               	movlb	0	; () banked
 16715  006DC2  5180               	movf	___wmul@multiplier& (0+255),w,b
 16716  006DC4  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16717  006DC6  CFF3 F084          	movff	prodl,___wmul@product
 16718  006DCA  CFF4 F085          	movff	prodh,___wmul@product+1
 16719  006DCE  5180               	movf	___wmul@multiplier& (0+255),w,b
 16720  006DD0  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16721  006DD2  50F3               	movf	prodl,w,c
 16722  006DD4  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16723  006DD6  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16724  006DD8  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16725  006DDA  50F3               	movf	prodl,w,c
 16726  006DDC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16727                           
 16728                           ; BSR set to: 0
 16729  006DDE  C084  F080         	movff	___wmul@product,?___wmul
 16730  006DE2  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16731                           
 16732                           ; BSR set to: 0
 16733                           
 16734                           ; BSR set to: 0
 16735  006DE6  0012               	return		;funcret
 16736  006DE8  FFFF               	dw	65535	; errata NOP
 16737  006DEA                     __end_of___wmul:
 16738                           	opt stack 0
 16739                           tosu	equ	0xFFF
 16740                           tosh	equ	0xFFE
 16741                           tosl	equ	0xFFD
 16742                           pclath	equ	0xFFA
 16743                           tblptru	equ	0xFF8
 16744                           tblptrh	equ	0xFF7
 16745                           tblptrl	equ	0xFF6
 16746                           tablat	equ	0xFF5
 16747                           prodh	equ	0xFF4
 16748                           prodl	equ	0xFF3
 16749                           intcon	equ	0xFF2
 16750                           indf0	equ	0xFEF
 16751                           postinc0	equ	0xFEE
 16752                           fsr0h	equ	0xFEA
 16753                           fsr0l	equ	0xFE9
 16754                           wreg	equ	0xFE8
 16755                           postdec1	equ	0xFE5
 16756                           fsr1l	equ	0xFE1
 16757                           indf2	equ	0xFDF
 16758                           postinc2	equ	0xFDE
 16759                           postdec2	equ	0xFDD
 16760                           fsr2h	equ	0xFDA
 16761                           fsr2l	equ	0xFD9
 16762                           status	equ	0xFD8
 16763                           
 16764 ;; *************** function ___lwmod *****************
 16765 ;; Defined at:
 16766 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 16767 ;; Parameters:    Size  Location     Type
 16768 ;;  dividend        2    7[BANK0 ] unsigned int 
 16769 ;;  divisor         2    9[BANK0 ] unsigned int 
 16770 ;; Auto vars:     Size  Location     Type
 16771 ;;  counter         1   11[BANK0 ] unsigned char 
 16772 ;; Return value:  Size  Location     Type
 16773 ;;                  2    7[BANK0 ] unsigned int 
 16774 ;; Registers used:
 16775 ;;		wreg, status,2, status,0
 16776 ;; Tracked objects:
 16777 ;;		On entry : 0/0
 16778 ;;		On exit  : 0/0
 16779 ;;		Unchanged: 0/0
 16780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16781 ;;      Params:         0       4       0       0       0       0       0
 16782 ;;      Locals:         0       1       0       0       0       0       0
 16783 ;;      Temps:          0       0       0       0       0       0       0
 16784 ;;      Totals:         0       5       0       0       0       0       0
 16785 ;;Total ram usage:        5 bytes
 16786 ;; Hardware stack levels used:    1
 16787 ;; Hardware stack levels required when called:    6
 16788 ;; This function calls:
 16789 ;;		Nothing
 16790 ;; This function is called by:
 16791 ;;		__doprnt
 16792 ;; This function uses a non-reentrant model
 16793 ;;
 16794                           
 16795                           	psect	text52
 16796  007408                     __ptext52:
 16797                           	opt stack 0
 16798  007408                     ___lwmod:
 16799                           	opt stack 0
 16800  007408  FFFF               	dw	65535	; assembler added errata NOP
 16801                           
 16802                           ; BSR set to: 0
 16803                           ;incstack = 0
 16804  00740A  0100               	movlb	0	; () banked
 16805  00740C  5189               	movf	___lwmod@divisor& (0+255),w,b
 16806  00740E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16807  007410  B4D8               	btfsc	status,2,c
 16808  007412  D01C               	goto	l1559
 16809                           
 16810                           ; BSR set to: 0
 16811  007414  0E01               	movlw	1
 16812  007416  6F8B               	movwf	___lwmod@counter& (0+255),b
 16813  007418  D005               	goto	l1554
 16814  00741A  FFFF               	dw	65535	; assembler added errata NOP
 16815                           
 16816                           ; BSR set to: 0
 16817                           
 16818                           ; BSR set to: 0
 16819  00741C  90D8               	bcf	status,0,c
 16820  00741E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16821  007420  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16822  007422  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16823  007424                     l1554:
 16824  007424  FFFF               	dw	65535	; assembler added errata NOP
 16825                           
 16826                           ; BSR set to: 0
 16827                           
 16828                           ; BSR set to: 0
 16829  007426  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16830  007428  D7F8               	goto	l1555
 16831  00742A                     u4660:
 16832  00742A  FFFF               	dw	65535	; assembler added errata NOP
 16833                           
 16834                           ; BSR set to: 0
 16835                           
 16836                           ; BSR set to: 0
 16837                           
 16838                           ; BSR set to: 0
 16839  00742C  5189               	movf	___lwmod@divisor& (0+255),w,b
 16840  00742E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16841  007430  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16842  007432  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16843  007434  A0D8               	btfss	status,0,c
 16844  007436  D004               	goto	l1558
 16845                           
 16846                           ; BSR set to: 0
 16847  007438  5189               	movf	___lwmod@divisor& (0+255),w,b
 16848  00743A  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16849  00743C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16850  00743E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16851  007440                     l1558:
 16852  007440  FFFF               	dw	65535	; assembler added errata NOP
 16853                           
 16854                           ; BSR set to: 0
 16855                           
 16856                           ; BSR set to: 0
 16857  007442  90D8               	bcf	status,0,c
 16858  007444  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16859  007446  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16860                           
 16861                           ; BSR set to: 0
 16862  007448  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16863  00744A  D7EF               	goto	u4660
 16864  00744C                     l1559:
 16865  00744C  FFFF               	dw	65535	; assembler added errata NOP
 16866                           
 16867                           ; BSR set to: 0
 16868                           
 16869                           ; BSR set to: 0
 16870  00744E  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16871  007452  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16872                           
 16873                           ; BSR set to: 0
 16874  007456  0012               	return		;funcret
 16875  007458  FFFF               	dw	65535	; errata NOP
 16876  00745A                     __end_of___lwmod:
 16877                           	opt stack 0
 16878                           tosu	equ	0xFFF
 16879                           tosh	equ	0xFFE
 16880                           tosl	equ	0xFFD
 16881                           pclath	equ	0xFFA
 16882                           tblptru	equ	0xFF8
 16883                           tblptrh	equ	0xFF7
 16884                           tblptrl	equ	0xFF6
 16885                           tablat	equ	0xFF5
 16886                           prodh	equ	0xFF4
 16887                           prodl	equ	0xFF3
 16888                           intcon	equ	0xFF2
 16889                           indf0	equ	0xFEF
 16890                           postinc0	equ	0xFEE
 16891                           fsr0h	equ	0xFEA
 16892                           fsr0l	equ	0xFE9
 16893                           wreg	equ	0xFE8
 16894                           postdec1	equ	0xFE5
 16895                           fsr1l	equ	0xFE1
 16896                           indf2	equ	0xFDF
 16897                           postinc2	equ	0xFDE
 16898                           postdec2	equ	0xFDD
 16899                           fsr2h	equ	0xFDA
 16900                           fsr2l	equ	0xFD9
 16901                           status	equ	0xFD8
 16902                           
 16903 ;; *************** function ___lwdiv *****************
 16904 ;; Defined at:
 16905 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 16906 ;; Parameters:    Size  Location     Type
 16907 ;;  dividend        2    0[BANK0 ] unsigned int 
 16908 ;;  divisor         2    2[BANK0 ] unsigned int 
 16909 ;; Auto vars:     Size  Location     Type
 16910 ;;  quotient        2    4[BANK0 ] unsigned int 
 16911 ;;  counter         1    6[BANK0 ] unsigned char 
 16912 ;; Return value:  Size  Location     Type
 16913 ;;                  2    0[BANK0 ] unsigned int 
 16914 ;; Registers used:
 16915 ;;		wreg, status,2, status,0
 16916 ;; Tracked objects:
 16917 ;;		On entry : 0/0
 16918 ;;		On exit  : 0/0
 16919 ;;		Unchanged: 0/0
 16920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16921 ;;      Params:         0       4       0       0       0       0       0
 16922 ;;      Locals:         0       3       0       0       0       0       0
 16923 ;;      Temps:          0       0       0       0       0       0       0
 16924 ;;      Totals:         0       7       0       0       0       0       0
 16925 ;;Total ram usage:        7 bytes
 16926 ;; Hardware stack levels used:    1
 16927 ;; Hardware stack levels required when called:    6
 16928 ;; This function calls:
 16929 ;;		Nothing
 16930 ;; This function is called by:
 16931 ;;		__doprnt
 16932 ;; This function uses a non-reentrant model
 16933 ;;
 16934                           
 16935                           	psect	text53
 16936  007506                     __ptext53:
 16937                           	opt stack 0
 16938  007506                     ___lwdiv:
 16939                           	opt stack 0
 16940  007506  FFFF               	dw	65535	; assembler added errata NOP
 16941                           
 16942                           ; BSR set to: 0
 16943                           ;incstack = 0
 16944  007508  0E00               	movlw	0
 16945  00750A  0100               	movlb	0	; () banked
 16946  00750C  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16947  00750E  0E00               	movlw	0
 16948  007510  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16949                           
 16950                           ; BSR set to: 0
 16951  007512  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16952  007514  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16953  007516  B4D8               	btfsc	status,2,c
 16954  007518  D020               	goto	l1549
 16955                           
 16956                           ; BSR set to: 0
 16957  00751A  0E01               	movlw	1
 16958  00751C  6F86               	movwf	___lwdiv@counter& (0+255),b
 16959  00751E  D005               	goto	l1544
 16960  007520  FFFF               	dw	65535	; assembler added errata NOP
 16961                           
 16962                           ; BSR set to: 0
 16963                           
 16964                           ; BSR set to: 0
 16965  007522  90D8               	bcf	status,0,c
 16966  007524  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16967  007526  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16968  007528  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16969  00752A                     l1544:
 16970  00752A  FFFF               	dw	65535	; assembler added errata NOP
 16971                           
 16972                           ; BSR set to: 0
 16973                           
 16974                           ; BSR set to: 0
 16975  00752C  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16976  00752E  D7F8               	goto	l1545
 16977  007530                     u4630:
 16978  007530  FFFF               	dw	65535	; assembler added errata NOP
 16979                           
 16980                           ; BSR set to: 0
 16981                           
 16982                           ; BSR set to: 0
 16983                           
 16984                           ; BSR set to: 0
 16985  007532  90D8               	bcf	status,0,c
 16986  007534  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16987  007536  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16988                           
 16989                           ; BSR set to: 0
 16990  007538  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16991  00753A  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16992  00753C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16993  00753E  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16994  007540  A0D8               	btfss	status,0,c
 16995  007542  D005               	goto	l1548
 16996                           
 16997                           ; BSR set to: 0
 16998  007544  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16999  007546  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 17000  007548  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17001  00754A  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17002                           
 17003                           ; BSR set to: 0
 17004  00754C  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 17005  00754E                     l1548:
 17006  00754E  FFFF               	dw	65535	; assembler added errata NOP
 17007                           
 17008                           ; BSR set to: 0
 17009                           
 17010                           ; BSR set to: 0
 17011  007550  90D8               	bcf	status,0,c
 17012  007552  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17013  007554  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 17014                           
 17015                           ; BSR set to: 0
 17016  007556  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 17017  007558  D7EB               	goto	u4630
 17018  00755A                     l1549:
 17019  00755A  FFFF               	dw	65535	; assembler added errata NOP
 17020                           
 17021                           ; BSR set to: 0
 17022                           
 17023                           ; BSR set to: 0
 17024  00755C  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 17025  007560  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17026                           
 17027                           ; BSR set to: 0
 17028  007564  0012               	return		;funcret
 17029  007566  FFFF               	dw	65535	; errata NOP
 17030  007568                     __end_of___lwdiv:
 17031                           	opt stack 0
 17032                           tosu	equ	0xFFF
 17033                           tosh	equ	0xFFE
 17034                           tosl	equ	0xFFD
 17035                           pclath	equ	0xFFA
 17036                           tblptru	equ	0xFF8
 17037                           tblptrh	equ	0xFF7
 17038                           tblptrl	equ	0xFF6
 17039                           tablat	equ	0xFF5
 17040                           prodh	equ	0xFF4
 17041                           prodl	equ	0xFF3
 17042                           intcon	equ	0xFF2
 17043                           indf0	equ	0xFEF
 17044                           postinc0	equ	0xFEE
 17045                           fsr0h	equ	0xFEA
 17046                           fsr0l	equ	0xFE9
 17047                           wreg	equ	0xFE8
 17048                           postdec1	equ	0xFE5
 17049                           fsr1l	equ	0xFE1
 17050                           indf2	equ	0xFDF
 17051                           postinc2	equ	0xFDE
 17052                           postdec2	equ	0xFDD
 17053                           fsr2h	equ	0xFDA
 17054                           fsr2l	equ	0xFD9
 17055                           status	equ	0xFD8
 17056                           
 17057 ;; *************** function _limparBuffer *****************
 17058 ;; Defined at:
 17059 ;;		line 34 in file "serial.h"
 17060 ;; Parameters:    Size  Location     Type
 17061 ;;		None
 17062 ;; Auto vars:     Size  Location     Type
 17063 ;;		None
 17064 ;; Return value:  Size  Location     Type
 17065 ;;                  1    wreg      void 
 17066 ;; Registers used:
 17067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17068 ;; Tracked objects:
 17069 ;;		On entry : 0/0
 17070 ;;		On exit  : 0/0
 17071 ;;		Unchanged: 0/0
 17072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17073 ;;      Params:         0       0       0       0       0       0       0
 17074 ;;      Locals:         0       0       0       0       0       0       0
 17075 ;;      Temps:          0       0       0       0       0       0       0
 17076 ;;      Totals:         0       0       0       0       0       0       0
 17077 ;;Total ram usage:        0 bytes
 17078 ;; Hardware stack levels used:    1
 17079 ;; Hardware stack levels required when called:    7
 17080 ;; This function calls:
 17081 ;;		_delay
 17082 ;;		_memset
 17083 ;; This function is called by:
 17084 ;;		_getSinalSIM800L
 17085 ;;		_comunicarTeste
 17086 ;;		_enviaSMS
 17087 ;; This function uses a non-reentrant model
 17088 ;;
 17089                           
 17090                           	psect	text54
 17091  006F1E                     __ptext54:
 17092                           	opt stack 0
 17093  006F1E                     _limparBuffer:
 17094                           	opt stack 0
 17095  006F1E  FFFF               	dw	65535	; assembler added errata NOP
 17096                           
 17097                           ;serial.h: 35: cbf = 0;
 17098                           
 17099                           ; BSR set to: 0
 17100                           ;incstack = 0
 17101  006F20  0E00               	movlw	0
 17102  006F22  6E66               	movwf	_cbf,c
 17103                           
 17104                           ;serial.h: 36: memset(bufferSerial, 0, sizeof (bufferSerial));
 17105  006F24  0E00               	movlw	low _bufferSerial
 17106  006F26  0100               	movlb	0	; () banked
 17107  006F28  6F80               	movwf	memset@p1& (0+255),b
 17108  006F2A  0E01               	movlw	high _bufferSerial
 17109  006F2C  6F81               	movwf	(memset@p1+1)& (0+255),b
 17110  006F2E  0E00               	movlw	0
 17111  006F30  6F83               	movwf	(memset@c+1)& (0+255),b
 17112  006F32  0E00               	movlw	0
 17113  006F34  6F82               	movwf	memset@c& (0+255),b
 17114  006F36  0E00               	movlw	0
 17115  006F38  6F85               	movwf	(memset@n+1)& (0+255),b
 17116  006F3A  0E3C               	movlw	60
 17117  006F3C  6F84               	movwf	memset@n& (0+255),b
 17118  006F3E  ECFD  F037         	call	_memset
 17119                           
 17120                           ;serial.h: 37: delay(150);
 17121  006F42  0E00               	movlw	0
 17122  006F44  0100               	movlb	0	; () banked
 17123  006F46  6F81               	movwf	(delay@x+1)& (0+255),b
 17124  006F48  0E96               	movlw	150
 17125  006F4A  6F80               	movwf	delay@x& (0+255),b
 17126  006F4C  EC74  F037         	call	_delay	;wreg free
 17127  006F50  0012               	return		;funcret
 17128  006F52  FFFF               	dw	65535	; errata NOP
 17129  006F54                     __end_of_limparBuffer:
 17130                           	opt stack 0
 17131                           tosu	equ	0xFFF
 17132                           tosh	equ	0xFFE
 17133                           tosl	equ	0xFFD
 17134                           pclath	equ	0xFFA
 17135                           tblptru	equ	0xFF8
 17136                           tblptrh	equ	0xFF7
 17137                           tblptrl	equ	0xFF6
 17138                           tablat	equ	0xFF5
 17139                           prodh	equ	0xFF4
 17140                           prodl	equ	0xFF3
 17141                           intcon	equ	0xFF2
 17142                           indf0	equ	0xFEF
 17143                           postinc0	equ	0xFEE
 17144                           fsr0h	equ	0xFEA
 17145                           fsr0l	equ	0xFE9
 17146                           wreg	equ	0xFE8
 17147                           postdec1	equ	0xFE5
 17148                           fsr1l	equ	0xFE1
 17149                           indf2	equ	0xFDF
 17150                           postinc2	equ	0xFDE
 17151                           postdec2	equ	0xFDD
 17152                           fsr2h	equ	0xFDA
 17153                           fsr2l	equ	0xFD9
 17154                           status	equ	0xFD8
 17155                           
 17156 ;; *************** function _memset *****************
 17157 ;; Defined at:
 17158 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 17159 ;; Parameters:    Size  Location     Type
 17160 ;;  p1              2    0[BANK0 ] PTR void 
 17161 ;;		 -> bufferAUX(20), bufferSerial(60), 
 17162 ;;  c               2    2[BANK0 ] int 
 17163 ;;  n               2    4[BANK0 ] unsigned int 
 17164 ;; Auto vars:     Size  Location     Type
 17165 ;;  p               2    6[BANK0 ] PTR unsigned char 
 17166 ;;		 -> bufferAUX(20), bufferSerial(60), 
 17167 ;; Return value:  Size  Location     Type
 17168 ;;                  2    0[BANK0 ] PTR void 
 17169 ;; Registers used:
 17170 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17171 ;; Tracked objects:
 17172 ;;		On entry : 0/0
 17173 ;;		On exit  : 0/0
 17174 ;;		Unchanged: 0/0
 17175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17176 ;;      Params:         0       6       0       0       0       0       0
 17177 ;;      Locals:         0       2       0       0       0       0       0
 17178 ;;      Temps:          0       0       0       0       0       0       0
 17179 ;;      Totals:         0       8       0       0       0       0       0
 17180 ;;Total ram usage:        8 bytes
 17181 ;; Hardware stack levels used:    1
 17182 ;; Hardware stack levels required when called:    6
 17183 ;; This function calls:
 17184 ;;		Nothing
 17185 ;; This function is called by:
 17186 ;;		_limparBuffer
 17187 ;;		_getSerial
 17188 ;; This function uses a non-reentrant model
 17189 ;;
 17190                           
 17191                           	psect	text55
 17192  006FFA                     __ptext55:
 17193                           	opt stack 0
 17194  006FFA                     _memset:
 17195                           	opt stack 0
 17196  006FFA  FFFF               	dw	65535	; assembler added errata NOP
 17197                           
 17198                           ;incstack = 0
 17199  006FFC  C080  F086         	movff	memset@p1,memset@p
 17200  007000  C081  F087         	movff	memset@p1+1,memset@p+1
 17201  007004  D00A               	goto	l1568
 17202  007006  FFFF               	dw	65535	; assembler added errata NOP
 17203  007008                     l5000:
 17204  007008  C086  FFD9         	movff	memset@p,fsr2l
 17205  00700C  C087  FFDA         	movff	memset@p+1,fsr2h
 17206  007010  C082  FFDF         	movff	memset@c,indf2
 17207  007014  0100               	movlb	0	; () banked
 17208  007016  4B86               	infsnz	memset@p& (0+255),f,b
 17209  007018  2B87               	incf	(memset@p+1)& (0+255),f,b
 17210  00701A                     l1568:
 17211  00701A  FFFF               	dw	65535	; assembler added errata NOP
 17212                           
 17213                           ; BSR set to: 0
 17214  00701C  0100               	movlb	0	; () banked
 17215  00701E  0784               	decf	memset@n& (0+255),f,b
 17216  007020  A0D8               	btfss	status,0,c
 17217  007022  0785               	decf	(memset@n+1)& (0+255),f,b
 17218  007024  2984               	incf	memset@n& (0+255),w,b
 17219  007026  E1F0               	bnz	l5000
 17220  007028  2985               	incf	(memset@n+1)& (0+255),w,b
 17221  00702A  B4D8               	btfsc	status,2,c
 17222                           
 17223                           ; BSR set to: 0
 17224                           
 17225                           ; BSR set to: 0
 17226                           ;	Return value of _memset is never used
 17227  00702C  0012               	return		;funcret
 17228  00702E  FFFF               	dw	65535	; assembler added errata NOP
 17229  007030  D7EA               	goto	l1569
 17230  007032  FFFF               	dw	65535	; errata NOP
 17231  007034                     __end_of_memset:
 17232                           	opt stack 0
 17233                           tosu	equ	0xFFF
 17234                           tosh	equ	0xFFE
 17235                           tosl	equ	0xFFD
 17236                           pclath	equ	0xFFA
 17237                           tblptru	equ	0xFF8
 17238                           tblptrh	equ	0xFF7
 17239                           tblptrl	equ	0xFF6
 17240                           tablat	equ	0xFF5
 17241                           prodh	equ	0xFF4
 17242                           prodl	equ	0xFF3
 17243                           intcon	equ	0xFF2
 17244                           indf0	equ	0xFEF
 17245                           postinc0	equ	0xFEE
 17246                           fsr0h	equ	0xFEA
 17247                           fsr0l	equ	0xFE9
 17248                           wreg	equ	0xFE8
 17249                           postdec1	equ	0xFE5
 17250                           fsr1l	equ	0xFE1
 17251                           indf2	equ	0xFDF
 17252                           postinc2	equ	0xFDE
 17253                           postdec2	equ	0xFDD
 17254                           fsr2h	equ	0xFDA
 17255                           fsr2l	equ	0xFD9
 17256                           status	equ	0xFD8
 17257                           
 17258 ;; *************** function _aguardaBuffer *****************
 17259 ;; Defined at:
 17260 ;;		line 26 in file "serial.h"
 17261 ;; Parameters:    Size  Location     Type
 17262 ;;  str             2   19[BANK0 ] PTR unsigned char 
 17263 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 17264 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 17265 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_6(7), 
 17266 ;;		 -> STR_5(3), 
 17267 ;; Auto vars:     Size  Location     Type
 17268 ;;		None
 17269 ;; Return value:  Size  Location     Type
 17270 ;;                  1    wreg      unsigned char 
 17271 ;; Registers used:
 17272 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17273 ;; Tracked objects:
 17274 ;;		On entry : 0/0
 17275 ;;		On exit  : 0/0
 17276 ;;		Unchanged: 0/0
 17277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17278 ;;      Params:         0       2       0       0       0       0       0
 17279 ;;      Locals:         0       0       0       0       0       0       0
 17280 ;;      Temps:          0       0       0       0       0       0       0
 17281 ;;      Totals:         0       2       0       0       0       0       0
 17282 ;;Total ram usage:        2 bytes
 17283 ;; Hardware stack levels used:    1
 17284 ;; Hardware stack levels required when called:    8
 17285 ;; This function calls:
 17286 ;;		_delay
 17287 ;;		_strstr
 17288 ;; This function is called by:
 17289 ;;		_getSinalSIM800L
 17290 ;;		_comunicarTeste
 17291 ;;		_enviaSMS
 17292 ;; This function uses a non-reentrant model
 17293 ;;
 17294                           
 17295                           	psect	text56
 17296  0070E4                     __ptext56:
 17297                           	opt stack 0
 17298  0070E4                     _aguardaBuffer:
 17299                           	opt stack 0
 17300  0070E4  FFFF               	dw	65535	; assembler added errata NOP
 17301                           
 17302                           ;serial.h: 27: if (strstr(bufferSerial, str) != (0)) {
 17303                           
 17304                           ; BSR set to: 0
 17305                           ;incstack = 0
 17306  0070E6  0E00               	movlw	low _bufferSerial
 17307  0070E8  0100               	movlb	0	; () banked
 17308  0070EA  6F8F               	movwf	strstr@s1& (0+255),b
 17309  0070EC  0E01               	movlw	high _bufferSerial
 17310  0070EE  6F90               	movwf	(strstr@s1+1)& (0+255),b
 17311  0070F0  C093  F091         	movff	aguardaBuffer@str,strstr@s2
 17312  0070F4  C094  F092         	movff	aguardaBuffer@str+1,strstr@s2+1
 17313  0070F8  ECEE  F03C         	call	_strstr	;wreg free
 17314  0070FC  0100               	movlb	0	; () banked
 17315  0070FE  518F               	movf	?_strstr& (0+255),w,b
 17316  007100  1190               	iorwf	(?_strstr+1)& (0+255),w,b
 17317  007102  B4D8               	btfsc	status,2,c
 17318  007104  D008               	goto	l259
 17319                           
 17320                           ; BSR set to: 0
 17321                           ;serial.h: 28: delay(150);
 17322  007106  0E00               	movlw	0
 17323  007108  6F81               	movwf	(delay@x+1)& (0+255),b
 17324  00710A  0E96               	movlw	150
 17325  00710C  6F80               	movwf	delay@x& (0+255),b
 17326  00710E  EC74  F037         	call	_delay	;wreg free
 17327                           
 17328                           ;serial.h: 29: return 1;
 17329  007112  0E01               	movlw	1
 17330  007114  D002               	goto	l5346
 17331  007116                     l259:
 17332  007116  FFFF               	dw	65535	; assembler added errata NOP
 17333                           
 17334                           ;serial.h: 30: }
 17335                           ;serial.h: 31: return 0;
 17336  007118  0E00               	movlw	0
 17337  00711A                     l5346:
 17338  00711A  FFFF               	dw	65535	; assembler added errata NOP
 17339  00711C  0012               	return		;funcret
 17340  00711E  FFFF               	dw	65535	; errata NOP
 17341  007120                     __end_of_aguardaBuffer:
 17342                           	opt stack 0
 17343                           tosu	equ	0xFFF
 17344                           tosh	equ	0xFFE
 17345                           tosl	equ	0xFFD
 17346                           pclath	equ	0xFFA
 17347                           tblptru	equ	0xFF8
 17348                           tblptrh	equ	0xFF7
 17349                           tblptrl	equ	0xFF6
 17350                           tablat	equ	0xFF5
 17351                           prodh	equ	0xFF4
 17352                           prodl	equ	0xFF3
 17353                           intcon	equ	0xFF2
 17354                           indf0	equ	0xFEF
 17355                           postinc0	equ	0xFEE
 17356                           fsr0h	equ	0xFEA
 17357                           fsr0l	equ	0xFE9
 17358                           wreg	equ	0xFE8
 17359                           postdec1	equ	0xFE5
 17360                           fsr1l	equ	0xFE1
 17361                           indf2	equ	0xFDF
 17362                           postinc2	equ	0xFDE
 17363                           postdec2	equ	0xFDD
 17364                           fsr2h	equ	0xFDA
 17365                           fsr2l	equ	0xFD9
 17366                           status	equ	0xFD8
 17367                           
 17368 ;; *************** function _strstr *****************
 17369 ;; Defined at:
 17370 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strstr.c"
 17371 ;; Parameters:    Size  Location     Type
 17372 ;;  s1              2   15[BANK0 ] PTR const unsigned char 
 17373 ;;		 -> NULL(0), bufferSerial(60), 
 17374 ;;  s2              2   17[BANK0 ] PTR const unsigned char 
 17375 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 17376 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 17377 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 17378 ;;		 -> STR_6(7), STR_5(3), 
 17379 ;; Auto vars:     Size  Location     Type
 17380 ;;		None
 17381 ;; Return value:  Size  Location     Type
 17382 ;;                  2   15[BANK0 ] PTR unsigned char 
 17383 ;; Registers used:
 17384 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17385 ;; Tracked objects:
 17386 ;;		On entry : 0/0
 17387 ;;		On exit  : 0/0
 17388 ;;		Unchanged: 0/0
 17389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17390 ;;      Params:         0       4       0       0       0       0       0
 17391 ;;      Locals:         0       0       0       0       0       0       0
 17392 ;;      Temps:          0       0       0       0       0       0       0
 17393 ;;      Totals:         0       4       0       0       0       0       0
 17394 ;;Total ram usage:        4 bytes
 17395 ;; Hardware stack levels used:    1
 17396 ;; Hardware stack levels required when called:    7
 17397 ;; This function calls:
 17398 ;;		_strchr
 17399 ;;		_strlen
 17400 ;;		_strncmp
 17401 ;; This function is called by:
 17402 ;;		_aguardaBuffer
 17403 ;;		_getSerial
 17404 ;; This function uses a non-reentrant model
 17405 ;;
 17406                           
 17407                           	psect	text57
 17408  0079DC                     __ptext57:
 17409                           	opt stack 0
 17410  0079DC                     _strstr:
 17411                           	opt stack 0
 17412  0079DC  FFFF               	dw	65535	; assembler added errata NOP
 17413                           
 17414                           ;incstack = 0
 17415  0079DE  D035               	goto	l1722
 17416  0079E0  FFFF               	dw	65535	; assembler added errata NOP
 17417  0079E2  C08F  F086         	movff	strstr@s1,strncmp@s1
 17418  0079E6  C090  F087         	movff	strstr@s1+1,strncmp@s1+1
 17419  0079EA  C091  F088         	movff	strstr@s2,strncmp@s2
 17420  0079EE  C092  F089         	movff	strstr@s2+1,strncmp@s2+1
 17421  0079F2  C091  F080         	movff	strstr@s2,strlen@s
 17422  0079F6  C092  F081         	movff	strstr@s2+1,strlen@s+1
 17423  0079FA  ECD0  F01F         	call	_strlen	;wreg free
 17424  0079FE  C080  F08A         	movff	?_strlen,strncmp@len
 17425  007A02  C081  F08B         	movff	?_strlen+1,strncmp@len+1
 17426  007A06  EC83  F01F         	call	_strncmp	;wreg free
 17427  007A0A  0100               	movlb	0	; () banked
 17428  007A0C  5186               	movf	?_strncmp& (0+255),w,b
 17429  007A0E  1187               	iorwf	(?_strncmp+1)& (0+255),w,b
 17430  007A10  A4D8               	btfss	status,2,c
 17431  007A12  D005               	goto	l1724
 17432                           
 17433                           ; BSR set to: 0
 17434  007A14  C08F  F08F         	movff	strstr@s1,?_strstr
 17435  007A18  C090  F090         	movff	strstr@s1+1,?_strstr+1
 17436                           
 17437                           ; BSR set to: 0
 17438  007A1C  D028               	goto	l4990
 17439  007A1E                     l1724:
 17440  007A1E  FFFF               	dw	65535	; assembler added errata NOP
 17441                           
 17442                           ; BSR set to: 0
 17443                           
 17444                           ; BSR set to: 0
 17445  007A20  0E01               	movlw	1
 17446  007A22  258F               	addwf	strstr@s1& (0+255),w,b
 17447  007A24  6F80               	movwf	strchr@ptr& (0+255),b
 17448  007A26  0E00               	movlw	0
 17449  007A28  2190               	addwfc	(strstr@s1+1)& (0+255),w,b
 17450  007A2A  6F81               	movwf	(strchr@ptr+1)& (0+255),b
 17451  007A2C  C091  FFF6         	movff	strstr@s2,tblptrl
 17452  007A30  C092  FFF7         	movff	strstr@s2+1,tblptrh
 17453  007A34                     	if	0	;tblptru may be non-zero
 17454  007A34                     	endif
 17455  007A34                     	if	0	;tblptru may be non-zero
 17456  007A34                     	endif
 17457  007A34  0008               	tblrd		*
 17458  007A36  FFFF               	dw	65535	; errata NOP
 17459  007A38  50F5               	movf	tablat,w,c
 17460  007A3A  6F82               	movwf	strchr@chr& (0+255),b
 17461  007A3C  6B83               	clrf	(strchr@chr+1)& (0+255),b
 17462  007A3E  ECCD  F038         	call	_strchr	;wreg free
 17463  007A42  C080  F08F         	movff	?_strchr,strstr@s1
 17464  007A46  C081  F090         	movff	?_strchr+1,strstr@s1+1
 17465  007A4A                     l1722:
 17466  007A4A  FFFF               	dw	65535	; assembler added errata NOP
 17467  007A4C  0100               	movlb	0	; () banked
 17468  007A4E  518F               	movf	strstr@s1& (0+255),w,b
 17469  007A50  1190               	iorwf	(strstr@s1+1)& (0+255),w,b
 17470  007A52  B4D8               	btfsc	status,2,c
 17471  007A54  D007               	goto	u4770
 17472                           
 17473                           ; BSR set to: 0
 17474  007A56  C08F  FFD9         	movff	strstr@s1,fsr2l
 17475  007A5A  C090  FFDA         	movff	strstr@s1+1,fsr2h
 17476  007A5E  50DF               	movf	indf2,w,c
 17477  007A60  A4D8               	btfss	status,2,c
 17478  007A62  D7BE               	goto	l1723
 17479  007A64                     u4770:
 17480  007A64  FFFF               	dw	65535	; assembler added errata NOP
 17481                           
 17482                           ; BSR set to: 0
 17483                           
 17484                           ; BSR set to: 0
 17485                           
 17486                           ; BSR set to: 0
 17487  007A66  0E00               	movlw	0
 17488  007A68  6F8F               	movwf	?_strstr& (0+255),b
 17489  007A6A  0E00               	movlw	0
 17490  007A6C  6F90               	movwf	(?_strstr+1)& (0+255),b
 17491  007A6E                     l4990:
 17492  007A6E  FFFF               	dw	65535	; assembler added errata NOP
 17493                           
 17494                           ; BSR set to: 0
 17495                           
 17496                           ; BSR set to: 0
 17497  007A70  0012               	return		;funcret
 17498  007A72  FFFF               	dw	65535	; errata NOP
 17499  007A74                     __end_of_strstr:
 17500                           	opt stack 0
 17501                           tosu	equ	0xFFF
 17502                           tosh	equ	0xFFE
 17503                           tosl	equ	0xFFD
 17504                           pclath	equ	0xFFA
 17505                           tblptru	equ	0xFF8
 17506                           tblptrh	equ	0xFF7
 17507                           tblptrl	equ	0xFF6
 17508                           tablat	equ	0xFF5
 17509                           prodh	equ	0xFF4
 17510                           prodl	equ	0xFF3
 17511                           intcon	equ	0xFF2
 17512                           indf0	equ	0xFEF
 17513                           postinc0	equ	0xFEE
 17514                           fsr0h	equ	0xFEA
 17515                           fsr0l	equ	0xFE9
 17516                           wreg	equ	0xFE8
 17517                           postdec1	equ	0xFE5
 17518                           fsr1l	equ	0xFE1
 17519                           indf2	equ	0xFDF
 17520                           postinc2	equ	0xFDE
 17521                           postdec2	equ	0xFDD
 17522                           fsr2h	equ	0xFDA
 17523                           fsr2l	equ	0xFD9
 17524                           status	equ	0xFD8
 17525                           
 17526 ;; *************** function _strncmp *****************
 17527 ;; Defined at:
 17528 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncmp.c"
 17529 ;; Parameters:    Size  Location     Type
 17530 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 17531 ;;		 -> NULL(0), bufferSerial(60), 
 17532 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 17533 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 17534 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 17535 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 17536 ;;		 -> STR_6(7), STR_5(3), 
 17537 ;;  len             2   10[BANK0 ] unsigned int 
 17538 ;; Auto vars:     Size  Location     Type
 17539 ;;		None
 17540 ;; Return value:  Size  Location     Type
 17541 ;;                  2    6[BANK0 ] int 
 17542 ;; Registers used:
 17543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17544 ;; Tracked objects:
 17545 ;;		On entry : 0/0
 17546 ;;		On exit  : 0/0
 17547 ;;		Unchanged: 0/0
 17548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17549 ;;      Params:         0       6       0       0       0       0       0
 17550 ;;      Locals:         0       0       0       0       0       0       0
 17551 ;;      Temps:          0       3       0       0       0       0       0
 17552 ;;      Totals:         0       9       0       0       0       0       0
 17553 ;;Total ram usage:        9 bytes
 17554 ;; Hardware stack levels used:    1
 17555 ;; Hardware stack levels required when called:    6
 17556 ;; This function calls:
 17557 ;;		Nothing
 17558 ;; This function is called by:
 17559 ;;		_strstr
 17560 ;; This function uses a non-reentrant model
 17561 ;;
 17562                           
 17563                           	psect	text58
 17564  003F06                     __ptext58:
 17565                           	opt stack 0
 17566  003F06                     _strncmp:
 17567                           	opt stack 0
 17568  003F06  FFFF               	dw	65535	; assembler added errata NOP
 17569                           
 17570                           ; BSR set to: 0
 17571                           ;incstack = 0
 17572  003F08  D03A               	goto	l1756
 17573  003F0A  FFFF               	dw	65535	; assembler added errata NOP
 17574  003F0C                     l4942:
 17575  003F0C  C086  FFD9         	movff	strncmp@s1,fsr2l
 17576  003F10  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17577  003F14  50DF               	movf	indf2,w,c
 17578  003F16  B4D8               	btfsc	status,2,c
 17579  003F18  D011               	goto	u4690
 17580  003F1A  C086  FFD9         	movff	strncmp@s1,fsr2l
 17581  003F1E  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17582  003F22  50DF               	movf	indf2,w,c
 17583  003F24  0100               	movlb	0	; () banked
 17584  003F26  6F8C               	movwf	??_strncmp& (0+255),b
 17585  003F28  C088  FFF6         	movff	strncmp@s2,tblptrl
 17586  003F2C  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 17587  003F30                     	if	0	;tblptru may be non-zero
 17588  003F30                     	endif
 17589  003F30                     	if	0	;tblptru may be non-zero
 17590  003F30                     	endif
 17591  003F30  0008               	tblrd		*
 17592  003F32  FFFF               	dw	65535	; errata NOP
 17593  003F34  50F5               	movf	tablat,w,c
 17594  003F36  198C               	xorwf	??_strncmp& (0+255),w,b
 17595  003F38  B4D8               	btfsc	status,2,c
 17596  003F3A  D01C               	goto	l1758
 17597  003F3C                     u4690:
 17598  003F3C  FFFF               	dw	65535	; assembler added errata NOP
 17599                           
 17600                           ; BSR set to: 0
 17601  003F3E  C088  FFF6         	movff	strncmp@s2,tblptrl
 17602  003F42  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 17603  003F46                     	if	0	;tblptru may be non-zero
 17604  003F46                     	endif
 17605  003F46                     	if	0	;tblptru may be non-zero
 17606  003F46                     	endif
 17607  003F46  0008               	tblrd		*
 17608  003F48  FFFF               	dw	65535	; errata NOP
 17609  003F4A  50F5               	movf	tablat,w,c
 17610  003F4C  0100               	movlb	0	; () banked
 17611  003F4E  6F8C               	movwf	??_strncmp& (0+255),b
 17612  003F50  6B8D               	clrf	(??_strncmp+1)& (0+255),b
 17613  003F52  1F8C               	comf	??_strncmp& (0+255),f,b
 17614  003F54  1F8D               	comf	(??_strncmp+1)& (0+255),f,b
 17615  003F56  4B8C               	infsnz	??_strncmp& (0+255),f,b
 17616  003F58  2B8D               	incf	(??_strncmp+1)& (0+255),f,b
 17617  003F5A  C086  FFD9         	movff	strncmp@s1,fsr2l
 17618  003F5E  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17619  003F62  50DF               	movf	indf2,w,c
 17620  003F64  6F8E               	movwf	(??_strncmp+2)& (0+255),b
 17621  003F66  518E               	movf	(??_strncmp+2)& (0+255),w,b
 17622  003F68  258C               	addwf	??_strncmp& (0+255),w,b
 17623  003F6A  6F86               	movwf	?_strncmp& (0+255),b
 17624  003F6C  0E00               	movlw	0
 17625  003F6E  218D               	addwfc	(??_strncmp+1)& (0+255),w,b
 17626  003F70  6F87               	movwf	(?_strncmp+1)& (0+255),b
 17627                           
 17628                           ; BSR set to: 0
 17629  003F72  D013               	goto	l4956
 17630  003F74                     l1758:
 17631  003F74  FFFF               	dw	65535	; assembler added errata NOP
 17632                           
 17633                           ; BSR set to: 0
 17634                           
 17635                           ; BSR set to: 0
 17636  003F76  4B86               	infsnz	strncmp@s1& (0+255),f,b
 17637  003F78  2B87               	incf	(strncmp@s1+1)& (0+255),f,b
 17638  003F7A  4B88               	infsnz	strncmp@s2& (0+255),f,b
 17639  003F7C  2B89               	incf	(strncmp@s2+1)& (0+255),f,b
 17640  003F7E                     l1756:
 17641  003F7E  FFFF               	dw	65535	; assembler added errata NOP
 17642                           
 17643                           ; BSR set to: 0
 17644  003F80  0100               	movlb	0	; () banked
 17645  003F82  078A               	decf	strncmp@len& (0+255),f,b
 17646  003F84  A0D8               	btfss	status,0,c
 17647  003F86  078B               	decf	(strncmp@len+1)& (0+255),f,b
 17648  003F88  298A               	incf	strncmp@len& (0+255),w,b
 17649  003F8A  E1C0               	bnz	l4942
 17650  003F8C  298B               	incf	(strncmp@len+1)& (0+255),w,b
 17651  003F8E  A4D8               	btfss	status,2,c
 17652  003F90  D7BC               	goto	l1757
 17653                           
 17654                           ; BSR set to: 0
 17655                           
 17656                           ; BSR set to: 0
 17657  003F92  0E00               	movlw	0
 17658  003F94  6F87               	movwf	(?_strncmp+1)& (0+255),b
 17659  003F96  0E00               	movlw	0
 17660  003F98  6F86               	movwf	?_strncmp& (0+255),b
 17661  003F9A                     l4956:
 17662  003F9A  FFFF               	dw	65535	; assembler added errata NOP
 17663                           
 17664                           ; BSR set to: 0
 17665                           
 17666                           ; BSR set to: 0
 17667  003F9C  0012               	return		;funcret
 17668  003F9E  FFFF               	dw	65535	; errata NOP
 17669  003FA0                     __end_of_strncmp:
 17670                           	opt stack 0
 17671                           tosu	equ	0xFFF
 17672                           tosh	equ	0xFFE
 17673                           tosl	equ	0xFFD
 17674                           pclath	equ	0xFFA
 17675                           tblptru	equ	0xFF8
 17676                           tblptrh	equ	0xFF7
 17677                           tblptrl	equ	0xFF6
 17678                           tablat	equ	0xFF5
 17679                           prodh	equ	0xFF4
 17680                           prodl	equ	0xFF3
 17681                           intcon	equ	0xFF2
 17682                           indf0	equ	0xFEF
 17683                           postinc0	equ	0xFEE
 17684                           fsr0h	equ	0xFEA
 17685                           fsr0l	equ	0xFE9
 17686                           wreg	equ	0xFE8
 17687                           postdec1	equ	0xFE5
 17688                           fsr1l	equ	0xFE1
 17689                           indf2	equ	0xFDF
 17690                           postinc2	equ	0xFDE
 17691                           postdec2	equ	0xFDD
 17692                           fsr2h	equ	0xFDA
 17693                           fsr2l	equ	0xFD9
 17694                           status	equ	0xFD8
 17695                           
 17696 ;; *************** function _strlen *****************
 17697 ;; Defined at:
 17698 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 17699 ;; Parameters:    Size  Location     Type
 17700 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 17701 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 17702 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 17703 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 17704 ;;		 -> STR_6(7), STR_5(3), NULL(0), bufferSerial(60), 
 17705 ;; Auto vars:     Size  Location     Type
 17706 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 17707 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 17708 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 17709 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 17710 ;;		 -> STR_6(7), STR_5(3), NULL(0), bufferSerial(60), 
 17711 ;; Return value:  Size  Location     Type
 17712 ;;                  2    0[BANK0 ] unsigned int 
 17713 ;; Registers used:
 17714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 17715 ;; Tracked objects:
 17716 ;;		On entry : 0/0
 17717 ;;		On exit  : 0/0
 17718 ;;		Unchanged: 0/0
 17719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17720 ;;      Params:         0       2       0       0       0       0       0
 17721 ;;      Locals:         0       2       0       0       0       0       0
 17722 ;;      Temps:          0       2       0       0       0       0       0
 17723 ;;      Totals:         0       6       0       0       0       0       0
 17724 ;;Total ram usage:        6 bytes
 17725 ;; Hardware stack levels used:    1
 17726 ;; Hardware stack levels required when called:    6
 17727 ;; This function calls:
 17728 ;;		Nothing
 17729 ;; This function is called by:
 17730 ;;		_getSerial
 17731 ;;		_strstr
 17732 ;; This function uses a non-reentrant model
 17733 ;;
 17734                           
 17735                           	psect	text59
 17736  003FA0                     __ptext59:
 17737                           	opt stack 0
 17738  003FA0                     _strlen:
 17739                           	opt stack 0
 17740  003FA0  FFFF               	dw	65535	; assembler added errata NOP
 17741                           
 17742                           ; BSR set to: 0
 17743                           ;incstack = 0
 17744  003FA2  C080  F084         	movff	strlen@s,strlen@cp
 17745  003FA6  C081  F085         	movff	strlen@s+1,strlen@cp+1
 17746  003FAA  D004               	goto	l1710
 17747  003FAC  FFFF               	dw	65535	; assembler added errata NOP
 17748  003FAE  0100               	movlb	0	; () banked
 17749  003FB0  4B84               	infsnz	strlen@cp& (0+255),f,b
 17750  003FB2  2B85               	incf	(strlen@cp+1)& (0+255),f,b
 17751  003FB4                     l1710:
 17752  003FB4  FFFF               	dw	65535	; assembler added errata NOP
 17753                           
 17754                           ; BSR set to: 0
 17755  003FB6  C084  FFF6         	movff	strlen@cp,tblptrl
 17756  003FBA  C085  FFF7         	movff	strlen@cp+1,tblptrh
 17757  003FBE  6AF8               	clrf	tblptru,c
 17758  003FC0  0E05               	movlw	(high __ramtop+-1)
 17759  003FC2  64F7               	cpfsgt	tblptrh,c
 17760  003FC4  D004               	bra	u4567
 17761  003FC6  0008               	tblrd		*
 17762  003FC8  FFFF               	dw	65535	; errata NOP
 17763  003FCA  50F5               	movf	tablat,w,c
 17764  003FCC  D005               	bra	u4560
 17765  003FCE                     u4567:
 17766  003FCE  CFF6 FFE9          	movff	tblptrl,fsr0l
 17767  003FD2  CFF7 FFEA          	movff	tblptrh,fsr0h
 17768  003FD6  50EF               	movf	indf0,w,c
 17769  003FD8                     u4560:
 17770  003FD8  0900               	iorlw	0
 17771  003FDA  A4D8               	btfss	status,2,c
 17772  003FDC  D7E7               	goto	l1711
 17773  003FDE  C080  F082         	movff	strlen@s,??_strlen
 17774  003FE2  C081  F083         	movff	strlen@s+1,??_strlen+1
 17775  003FE6  0100               	movlb	0	; () banked
 17776  003FE8  1F82               	comf	??_strlen& (0+255),f,b
 17777  003FEA  1F83               	comf	(??_strlen+1)& (0+255),f,b
 17778  003FEC  4B82               	infsnz	??_strlen& (0+255),f,b
 17779  003FEE  2B83               	incf	(??_strlen+1)& (0+255),f,b
 17780  003FF0  5184               	movf	strlen@cp& (0+255),w,b
 17781  003FF2  2582               	addwf	??_strlen& (0+255),w,b
 17782  003FF4  6F80               	movwf	?_strlen& (0+255),b
 17783  003FF6  5185               	movf	(strlen@cp+1)& (0+255),w,b
 17784  003FF8  2183               	addwfc	(??_strlen+1)& (0+255),w,b
 17785  003FFA  6F81               	movwf	(?_strlen+1)& (0+255),b
 17786                           
 17787                           ; BSR set to: 0
 17788                           
 17789                           ; BSR set to: 0
 17790  003FFC  0012               	return		;funcret
 17791  003FFE  FFFF               	dw	65535	; errata NOP
 17792  004000                     __end_of_strlen:
 17793                           	opt stack 0
 17794                           tosu	equ	0xFFF
 17795                           tosh	equ	0xFFE
 17796                           tosl	equ	0xFFD
 17797                           pclath	equ	0xFFA
 17798                           tblptru	equ	0xFF8
 17799                           tblptrh	equ	0xFF7
 17800                           tblptrl	equ	0xFF6
 17801                           tablat	equ	0xFF5
 17802                           prodh	equ	0xFF4
 17803                           prodl	equ	0xFF3
 17804                           intcon	equ	0xFF2
 17805                           indf0	equ	0xFEF
 17806                           postinc0	equ	0xFEE
 17807                           fsr0h	equ	0xFEA
 17808                           fsr0l	equ	0xFE9
 17809                           wreg	equ	0xFE8
 17810                           postdec1	equ	0xFE5
 17811                           fsr1l	equ	0xFE1
 17812                           indf2	equ	0xFDF
 17813                           postinc2	equ	0xFDE
 17814                           postdec2	equ	0xFDD
 17815                           fsr2h	equ	0xFDA
 17816                           fsr2l	equ	0xFD9
 17817                           status	equ	0xFD8
 17818                           
 17819 ;; *************** function _strchr *****************
 17820 ;; Defined at:
 17821 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
 17822 ;; Parameters:    Size  Location     Type
 17823 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 17824 ;;		 -> NULL(0), bufferSerial(60), 
 17825 ;;  chr             2    2[BANK0 ] int 
 17826 ;; Auto vars:     Size  Location     Type
 17827 ;;		None
 17828 ;; Return value:  Size  Location     Type
 17829 ;;                  2    0[BANK0 ] PTR unsigned char 
 17830 ;; Registers used:
 17831 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17832 ;; Tracked objects:
 17833 ;;		On entry : 0/0
 17834 ;;		On exit  : 0/0
 17835 ;;		Unchanged: 0/0
 17836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17837 ;;      Params:         0       4       0       0       0       0       0
 17838 ;;      Locals:         0       0       0       0       0       0       0
 17839 ;;      Temps:          0       1       0       0       0       0       0
 17840 ;;      Totals:         0       5       0       0       0       0       0
 17841 ;;Total ram usage:        5 bytes
 17842 ;; Hardware stack levels used:    1
 17843 ;; Hardware stack levels required when called:    6
 17844 ;; This function calls:
 17845 ;;		Nothing
 17846 ;; This function is called by:
 17847 ;;		_strstr
 17848 ;; This function uses a non-reentrant model
 17849 ;;
 17850                           
 17851                           	psect	text60
 17852  00719A                     __ptext60:
 17853                           	opt stack 0
 17854  00719A                     _strchr:
 17855                           	opt stack 0
 17856  00719A  FFFF               	dw	65535	; assembler added errata NOP
 17857                           
 17858                           ; BSR set to: 0
 17859                           ;incstack = 0
 17860  00719C  C080  FFD9         	movff	strchr@ptr,fsr2l
 17861  0071A0  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 17862  0071A4  0100               	movlb	0	; () banked
 17863  0071A6  5182               	movf	strchr@chr& (0+255),w,b
 17864  0071A8  18DE               	xorwf	postinc2,w,c
 17865  0071AA  A4D8               	btfss	status,2,c
 17866  0071AC  D005               	goto	l1751
 17867                           
 17868                           ; BSR set to: 0
 17869  0071AE  C080  F080         	movff	strchr@ptr,?_strchr
 17870  0071B2  C081  F081         	movff	strchr@ptr+1,?_strchr+1
 17871                           
 17872                           ; BSR set to: 0
 17873  0071B6  D00E               	goto	l4968
 17874  0071B8                     l1751:
 17875  0071B8  FFFF               	dw	65535	; assembler added errata NOP
 17876                           
 17877                           ; BSR set to: 0
 17878                           
 17879                           ; BSR set to: 0
 17880  0071BA  C080  FFD9         	movff	strchr@ptr,fsr2l
 17881  0071BE  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 17882  0071C2  4B80               	infsnz	strchr@ptr& (0+255),f,b
 17883  0071C4  2B81               	incf	(strchr@ptr+1)& (0+255),f,b
 17884  0071C6  50DF               	movf	indf2,w,c
 17885  0071C8  A4D8               	btfss	status,2,c
 17886  0071CA  D7E7               	goto	_strchr
 17887                           
 17888                           ; BSR set to: 0
 17889                           
 17890                           ; BSR set to: 0
 17891  0071CC  0E00               	movlw	0
 17892  0071CE  6F80               	movwf	?_strchr& (0+255),b
 17893  0071D0  0E00               	movlw	0
 17894  0071D2  6F81               	movwf	(?_strchr+1)& (0+255),b
 17895  0071D4                     l4968:
 17896  0071D4  FFFF               	dw	65535	; assembler added errata NOP
 17897                           
 17898                           ; BSR set to: 0
 17899                           
 17900                           ; BSR set to: 0
 17901  0071D6  0012               	return		;funcret
 17902  0071D8  FFFF               	dw	65535	; errata NOP
 17903  0071DA                     __end_of_strchr:
 17904                           	opt stack 0
 17905                           tosu	equ	0xFFF
 17906                           tosh	equ	0xFFE
 17907                           tosl	equ	0xFFD
 17908                           pclath	equ	0xFFA
 17909                           tblptru	equ	0xFF8
 17910                           tblptrh	equ	0xFF7
 17911                           tblptrl	equ	0xFF6
 17912                           tablat	equ	0xFF5
 17913                           prodh	equ	0xFF4
 17914                           prodl	equ	0xFF3
 17915                           intcon	equ	0xFF2
 17916                           indf0	equ	0xFEF
 17917                           postinc0	equ	0xFEE
 17918                           fsr0h	equ	0xFEA
 17919                           fsr0l	equ	0xFE9
 17920                           wreg	equ	0xFE8
 17921                           postdec1	equ	0xFE5
 17922                           fsr1l	equ	0xFE1
 17923                           indf2	equ	0xFDF
 17924                           postinc2	equ	0xFDE
 17925                           postdec2	equ	0xFDD
 17926                           fsr2h	equ	0xFDA
 17927                           fsr2l	equ	0xFD9
 17928                           status	equ	0xFD8
 17929                           
 17930 ;; *************** function _delay *****************
 17931 ;; Defined at:
 17932 ;;		line 16 in file "function.c"
 17933 ;; Parameters:    Size  Location     Type
 17934 ;;  x               2    0[BANK0 ] int 
 17935 ;; Auto vars:     Size  Location     Type
 17936 ;;		None
 17937 ;; Return value:  Size  Location     Type
 17938 ;;                  1    wreg      void 
 17939 ;; Registers used:
 17940 ;;		wreg, status,2, status,0
 17941 ;; Tracked objects:
 17942 ;;		On entry : 0/0
 17943 ;;		On exit  : 0/0
 17944 ;;		Unchanged: 0/0
 17945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17946 ;;      Params:         0       2       0       0       0       0       0
 17947 ;;      Locals:         0       0       0       0       0       0       0
 17948 ;;      Temps:          0       1       0       0       0       0       0
 17949 ;;      Totals:         0       3       0       0       0       0       0
 17950 ;;Total ram usage:        3 bytes
 17951 ;; Hardware stack levels used:    1
 17952 ;; Hardware stack levels required when called:    6
 17953 ;; This function calls:
 17954 ;;		Nothing
 17955 ;; This function is called by:
 17956 ;;		_aguardaBuffer
 17957 ;;		_limparBuffer
 17958 ;;		_getSinalSIM800L
 17959 ;;		_comunicarTeste
 17960 ;;		_enviaSMS
 17961 ;;		_writeEEPROM_ext
 17962 ;;		_partidaBombaEstacionaria
 17963 ;;		_main
 17964 ;; This function uses a non-reentrant model
 17965 ;;
 17966                           
 17967                           	psect	text61
 17968  006EE8                     __ptext61:
 17969                           	opt stack 0
 17970  006EE8                     _delay:
 17971                           	opt stack 0
 17972  006EE8  FFFF               	dw	65535	; assembler added errata NOP
 17973                           
 17974                           ;function.c: 17: while (x--) {
 17975                           
 17976                           ; BSR set to: 0
 17977                           ;incstack = 0
 17978  006EEA  D00C               	goto	l1016
 17979  006EEC  FFFF               	dw	65535	; assembler added errata NOP
 17980  006EEE                     l4994:
 17981                           
 17982                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 17983  006EEE  0E02               	movlw	2
 17984  006EF0  0100               	movlb	0	; () banked
 17985  006EF2  6F82               	movwf	??_delay& (0+255),b
 17986  006EF4  0EF2               	movlw	242
 17987  006EF6                     u9127:
 17988  006EF6  FFFF               	dw	65535	; errata NOP
 17989  006EF8  2EE8               	decfsz	wreg,f,c
 17990  006EFA  D7FD               	bra	u9127
 17991  006EFC  2F82               	decfsz	??_delay& (0+255),f,b
 17992  006EFE  D7FB               	bra	u9127
 17993  006F00  F000               	nop	
 17994  006F02  0004               	clrwdt		;# 
 17995  006F04                     l1016:
 17996  006F04  FFFF               	dw	65535	; assembler added errata NOP
 17997  006F06  0100               	movlb	0	; () banked
 17998  006F08  0780               	decf	delay@x& (0+255),f,b
 17999  006F0A  A0D8               	btfss	status,0,c
 18000  006F0C  0781               	decf	(delay@x+1)& (0+255),f,b
 18001  006F0E  2980               	incf	delay@x& (0+255),w,b
 18002  006F10  E1EE               	bnz	l4994
 18003  006F12  2981               	incf	(delay@x+1)& (0+255),w,b
 18004  006F14  B4D8               	btfsc	status,2,c
 18005                           
 18006                           ; BSR set to: 0
 18007                           
 18008                           ; BSR set to: 0
 18009  006F16  0012               	return		;funcret
 18010  006F18  FFFF               	dw	65535	; assembler added errata NOP
 18011  006F1A  D7E8               	goto	l1017
 18012  006F1C  FFFF               	dw	65535	; errata NOP
 18013  006F1E                     __end_of_delay:
 18014                           	opt stack 0
 18015                           tosu	equ	0xFFF
 18016                           tosh	equ	0xFFE
 18017                           tosl	equ	0xFFD
 18018                           pclath	equ	0xFFA
 18019                           tblptru	equ	0xFF8
 18020                           tblptrh	equ	0xFF7
 18021                           tblptrl	equ	0xFF6
 18022                           tablat	equ	0xFF5
 18023                           prodh	equ	0xFF4
 18024                           prodl	equ	0xFF3
 18025                           intcon	equ	0xFF2
 18026                           indf0	equ	0xFEF
 18027                           postinc0	equ	0xFEE
 18028                           fsr0h	equ	0xFEA
 18029                           fsr0l	equ	0xFE9
 18030                           wreg	equ	0xFE8
 18031                           postdec1	equ	0xFE5
 18032                           fsr1l	equ	0xFE1
 18033                           indf2	equ	0xFDF
 18034                           postinc2	equ	0xFDE
 18035                           postdec2	equ	0xFDD
 18036                           fsr2h	equ	0xFDA
 18037                           fsr2l	equ	0xFD9
 18038                           status	equ	0xFD8
 18039                           
 18040 ;; *************** function _RTC_Init *****************
 18041 ;; Defined at:
 18042 ;;		line 98 in file "ds1307.h"
 18043 ;; Parameters:    Size  Location     Type
 18044 ;;		None
 18045 ;; Auto vars:     Size  Location     Type
 18046 ;;		None
 18047 ;; Return value:  Size  Location     Type
 18048 ;;                  1    wreg      void 
 18049 ;; Registers used:
 18050 ;;		wreg, status,2, status,0, cstack
 18051 ;; Tracked objects:
 18052 ;;		On entry : 0/0
 18053 ;;		On exit  : 0/0
 18054 ;;		Unchanged: 0/0
 18055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18056 ;;      Params:         0       0       0       0       0       0       0
 18057 ;;      Locals:         0       0       0       0       0       0       0
 18058 ;;      Temps:          0       0       0       0       0       0       0
 18059 ;;      Totals:         0       0       0       0       0       0       0
 18060 ;;Total ram usage:        0 bytes
 18061 ;; Hardware stack levels used:    1
 18062 ;; Hardware stack levels required when called:    8
 18063 ;; This function calls:
 18064 ;;		_I2C_Start
 18065 ;;		_I2C_Stop
 18066 ;;		_I2C_Write
 18067 ;; This function is called by:
 18068 ;;		_main
 18069 ;; This function uses a non-reentrant model
 18070 ;;
 18071                           
 18072                           	psect	text62
 18073  006F8A                     __ptext62:
 18074                           	opt stack 0
 18075  006F8A                     _RTC_Init:
 18076                           	opt stack 0
 18077  006F8A  FFFF               	dw	65535	; assembler added errata NOP
 18078                           
 18079                           ;ds1307.h: 100: I2C_Start();
 18080                           
 18081                           ; BSR set to: 0
 18082                           ;incstack = 0
 18083  006F8C  EC11  F036         	call	_I2C_Start	;wreg free
 18084                           
 18085                           ;ds1307.h: 101: I2C_Write(0xD0);
 18086  006F90  0E00               	movlw	0
 18087  006F92  0100               	movlb	0	; () banked
 18088  006F94  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 18089  006F96  0ED0               	movlw	208
 18090  006F98  6F8A               	movwf	I2C_Write@d& (0+255),b
 18091  006F9A  EC2A  F036         	call	_I2C_Write	;wreg free
 18092                           
 18093                           ;ds1307.h: 102: I2C_Write(0x07);
 18094  006F9E  0E00               	movlw	0
 18095  006FA0  0100               	movlb	0	; () banked
 18096  006FA2  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 18097  006FA4  0E07               	movlw	7
 18098  006FA6  6F8A               	movwf	I2C_Write@d& (0+255),b
 18099  006FA8  EC2A  F036         	call	_I2C_Write	;wreg free
 18100                           
 18101                           ;ds1307.h: 103: I2C_Write(0x00);
 18102  006FAC  0E00               	movlw	0
 18103  006FAE  0100               	movlb	0	; () banked
 18104  006FB0  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 18105  006FB2  0E00               	movlw	0
 18106  006FB4  6F8A               	movwf	I2C_Write@d& (0+255),b
 18107  006FB6  EC2A  F036         	call	_I2C_Write	;wreg free
 18108                           
 18109                           ;ds1307.h: 104: I2C_Stop();
 18110  006FBA  EC17  F036         	call	_I2C_Stop	;wreg free
 18111  006FBE  0012               	return		;funcret
 18112  006FC0  FFFF               	dw	65535	; errata NOP
 18113  006FC2                     __end_of_RTC_Init:
 18114                           	opt stack 0
 18115                           tosu	equ	0xFFF
 18116                           tosh	equ	0xFFE
 18117                           tosl	equ	0xFFD
 18118                           pclath	equ	0xFFA
 18119                           tblptru	equ	0xFF8
 18120                           tblptrh	equ	0xFF7
 18121                           tblptrl	equ	0xFF6
 18122                           tablat	equ	0xFF5
 18123                           prodh	equ	0xFF4
 18124                           prodl	equ	0xFF3
 18125                           intcon	equ	0xFF2
 18126                           indf0	equ	0xFEF
 18127                           postinc0	equ	0xFEE
 18128                           fsr0h	equ	0xFEA
 18129                           fsr0l	equ	0xFE9
 18130                           wreg	equ	0xFE8
 18131                           postdec1	equ	0xFE5
 18132                           fsr1l	equ	0xFE1
 18133                           indf2	equ	0xFDF
 18134                           postinc2	equ	0xFDE
 18135                           postdec2	equ	0xFDD
 18136                           fsr2h	equ	0xFDA
 18137                           fsr2l	equ	0xFD9
 18138                           status	equ	0xFD8
 18139                           
 18140 ;; *************** function _I2C_Write *****************
 18141 ;; Defined at:
 18142 ;;		line 42 in file "I2C.c"
 18143 ;; Parameters:    Size  Location     Type
 18144 ;;  d               2   10[BANK0 ] unsigned int 
 18145 ;; Auto vars:     Size  Location     Type
 18146 ;;		None
 18147 ;; Return value:  Size  Location     Type
 18148 ;;                  1    wreg      void 
 18149 ;; Registers used:
 18150 ;;		wreg, status,2, status,0, cstack
 18151 ;; Tracked objects:
 18152 ;;		On entry : 0/0
 18153 ;;		On exit  : 0/0
 18154 ;;		Unchanged: 0/0
 18155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18156 ;;      Params:         0       2       0       0       0       0       0
 18157 ;;      Locals:         0       0       0       0       0       0       0
 18158 ;;      Temps:          0       0       0       0       0       0       0
 18159 ;;      Totals:         0       2       0       0       0       0       0
 18160 ;;Total ram usage:        2 bytes
 18161 ;; Hardware stack levels used:    1
 18162 ;; Hardware stack levels required when called:    7
 18163 ;; This function calls:
 18164 ;;		_I2C_Wait
 18165 ;; This function is called by:
 18166 ;;		_setDS1307TimeDate
 18167 ;;		_getDS1307TimeDate
 18168 ;;		_RTC_Init
 18169 ;;		_writeEEPROM_ext
 18170 ;;		_readEEPROM_ext
 18171 ;;		_getDS1307Time
 18172 ;;		_setDS1307Time
 18173 ;; This function uses a non-reentrant model
 18174 ;;
 18175                           
 18176                           	psect	text63
 18177  006C54                     __ptext63:
 18178                           	opt stack 0
 18179  006C54                     _I2C_Write:
 18180                           	opt stack 0
 18181  006C54  FFFF               	dw	65535	; assembler added errata NOP
 18182                           
 18183                           ;I2C.c: 43: I2C_Wait();
 18184                           
 18185                           ;incstack = 0
 18186  006C56  EC62  F036         	call	_I2C_Wait	;wreg free
 18187                           
 18188                           ;I2C.c: 44: SSPBUF = d;
 18189  006C5A  C08A  FFC9         	movff	I2C_Write@d,4041	;volatile
 18190  006C5E  0012               	return		;funcret
 18191  006C60  FFFF               	dw	65535	; errata NOP
 18192  006C62                     __end_of_I2C_Write:
 18193                           	opt stack 0
 18194                           tosu	equ	0xFFF
 18195                           tosh	equ	0xFFE
 18196                           tosl	equ	0xFFD
 18197                           pclath	equ	0xFFA
 18198                           tblptru	equ	0xFF8
 18199                           tblptrh	equ	0xFF7
 18200                           tblptrl	equ	0xFF6
 18201                           tablat	equ	0xFF5
 18202                           prodh	equ	0xFF4
 18203                           prodl	equ	0xFF3
 18204                           intcon	equ	0xFF2
 18205                           indf0	equ	0xFEF
 18206                           postinc0	equ	0xFEE
 18207                           fsr0h	equ	0xFEA
 18208                           fsr0l	equ	0xFE9
 18209                           wreg	equ	0xFE8
 18210                           postdec1	equ	0xFE5
 18211                           fsr1l	equ	0xFE1
 18212                           indf2	equ	0xFDF
 18213                           postinc2	equ	0xFDE
 18214                           postdec2	equ	0xFDD
 18215                           fsr2h	equ	0xFDA
 18216                           fsr2l	equ	0xFD9
 18217                           status	equ	0xFD8
 18218                           
 18219 ;; *************** function _I2C_Stop *****************
 18220 ;; Defined at:
 18221 ;;		line 36 in file "I2C.c"
 18222 ;; Parameters:    Size  Location     Type
 18223 ;;		None
 18224 ;; Auto vars:     Size  Location     Type
 18225 ;;		None
 18226 ;; Return value:  Size  Location     Type
 18227 ;;                  1    wreg      void 
 18228 ;; Registers used:
 18229 ;;		wreg, status,2, status,0, cstack
 18230 ;; Tracked objects:
 18231 ;;		On entry : 0/0
 18232 ;;		On exit  : 0/0
 18233 ;;		Unchanged: 0/0
 18234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18235 ;;      Params:         0       0       0       0       0       0       0
 18236 ;;      Locals:         0       0       0       0       0       0       0
 18237 ;;      Temps:          0       0       0       0       0       0       0
 18238 ;;      Totals:         0       0       0       0       0       0       0
 18239 ;;Total ram usage:        0 bytes
 18240 ;; Hardware stack levels used:    1
 18241 ;; Hardware stack levels required when called:    7
 18242 ;; This function calls:
 18243 ;;		_I2C_Wait
 18244 ;; This function is called by:
 18245 ;;		_setDS1307TimeDate
 18246 ;;		_getDS1307TimeDate
 18247 ;;		_RTC_Init
 18248 ;;		_writeEEPROM_ext
 18249 ;;		_readEEPROM_ext
 18250 ;;		_getDS1307Time
 18251 ;;		_setDS1307Time
 18252 ;; This function uses a non-reentrant model
 18253 ;;
 18254                           
 18255                           	psect	text64
 18256  006C2E                     __ptext64:
 18257                           	opt stack 0
 18258  006C2E                     _I2C_Stop:
 18259                           	opt stack 0
 18260  006C2E  FFFF               	dw	65535	; assembler added errata NOP
 18261                           
 18262                           ;I2C.c: 37: I2C_Wait();
 18263                           
 18264                           ;incstack = 0
 18265  006C30  EC62  F036         	call	_I2C_Wait	;wreg free
 18266                           
 18267                           ;I2C.c: 38: PEN = 1;
 18268  006C34  84C5               	bsf	4037,2,c	;volatile
 18269  006C36  0012               	return		;funcret
 18270  006C38  FFFF               	dw	65535	; errata NOP
 18271  006C3A                     __end_of_I2C_Stop:
 18272                           	opt stack 0
 18273                           tosu	equ	0xFFF
 18274                           tosh	equ	0xFFE
 18275                           tosl	equ	0xFFD
 18276                           pclath	equ	0xFFA
 18277                           tblptru	equ	0xFF8
 18278                           tblptrh	equ	0xFF7
 18279                           tblptrl	equ	0xFF6
 18280                           tablat	equ	0xFF5
 18281                           prodh	equ	0xFF4
 18282                           prodl	equ	0xFF3
 18283                           intcon	equ	0xFF2
 18284                           indf0	equ	0xFEF
 18285                           postinc0	equ	0xFEE
 18286                           fsr0h	equ	0xFEA
 18287                           fsr0l	equ	0xFE9
 18288                           wreg	equ	0xFE8
 18289                           postdec1	equ	0xFE5
 18290                           fsr1l	equ	0xFE1
 18291                           indf2	equ	0xFDF
 18292                           postinc2	equ	0xFDE
 18293                           postdec2	equ	0xFDD
 18294                           fsr2h	equ	0xFDA
 18295                           fsr2l	equ	0xFD9
 18296                           status	equ	0xFD8
 18297                           
 18298 ;; *************** function _I2C_Start *****************
 18299 ;; Defined at:
 18300 ;;		line 26 in file "I2C.c"
 18301 ;; Parameters:    Size  Location     Type
 18302 ;;		None
 18303 ;; Auto vars:     Size  Location     Type
 18304 ;;		None
 18305 ;; Return value:  Size  Location     Type
 18306 ;;                  1    wreg      void 
 18307 ;; Registers used:
 18308 ;;		wreg, status,2, status,0, cstack
 18309 ;; Tracked objects:
 18310 ;;		On entry : 0/0
 18311 ;;		On exit  : 0/0
 18312 ;;		Unchanged: 0/0
 18313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18314 ;;      Params:         0       0       0       0       0       0       0
 18315 ;;      Locals:         0       0       0       0       0       0       0
 18316 ;;      Temps:          0       0       0       0       0       0       0
 18317 ;;      Totals:         0       0       0       0       0       0       0
 18318 ;;Total ram usage:        0 bytes
 18319 ;; Hardware stack levels used:    1
 18320 ;; Hardware stack levels required when called:    7
 18321 ;; This function calls:
 18322 ;;		_I2C_Wait
 18323 ;; This function is called by:
 18324 ;;		_setDS1307TimeDate
 18325 ;;		_getDS1307TimeDate
 18326 ;;		_RTC_Init
 18327 ;;		_writeEEPROM_ext
 18328 ;;		_readEEPROM_ext
 18329 ;;		_getDS1307Time
 18330 ;;		_setDS1307Time
 18331 ;; This function uses a non-reentrant model
 18332 ;;
 18333                           
 18334                           	psect	text65
 18335  006C22                     __ptext65:
 18336                           	opt stack 0
 18337  006C22                     _I2C_Start:
 18338                           	opt stack 0
 18339  006C22  FFFF               	dw	65535	; assembler added errata NOP
 18340                           
 18341                           ;I2C.c: 27: I2C_Wait();
 18342                           
 18343                           ;incstack = 0
 18344  006C24  EC62  F036         	call	_I2C_Wait	;wreg free
 18345                           
 18346                           ;I2C.c: 28: SEN = 1;
 18347  006C28  80C5               	bsf	4037,0,c	;volatile
 18348  006C2A  0012               	return		;funcret
 18349  006C2C  FFFF               	dw	65535	; errata NOP
 18350  006C2E                     __end_of_I2C_Start:
 18351                           	opt stack 0
 18352                           tosu	equ	0xFFF
 18353                           tosh	equ	0xFFE
 18354                           tosl	equ	0xFFD
 18355                           pclath	equ	0xFFA
 18356                           tblptru	equ	0xFF8
 18357                           tblptrh	equ	0xFF7
 18358                           tblptrl	equ	0xFF6
 18359                           tablat	equ	0xFF5
 18360                           prodh	equ	0xFF4
 18361                           prodl	equ	0xFF3
 18362                           intcon	equ	0xFF2
 18363                           indf0	equ	0xFEF
 18364                           postinc0	equ	0xFEE
 18365                           fsr0h	equ	0xFEA
 18366                           fsr0l	equ	0xFE9
 18367                           wreg	equ	0xFE8
 18368                           postdec1	equ	0xFE5
 18369                           fsr1l	equ	0xFE1
 18370                           indf2	equ	0xFDF
 18371                           postinc2	equ	0xFDE
 18372                           postdec2	equ	0xFDD
 18373                           fsr2h	equ	0xFDA
 18374                           fsr2l	equ	0xFD9
 18375                           status	equ	0xFD8
 18376                           
 18377 ;; *************** function _I2C_Wait *****************
 18378 ;; Defined at:
 18379 ;;		line 22 in file "I2C.c"
 18380 ;; Parameters:    Size  Location     Type
 18381 ;;		None
 18382 ;; Auto vars:     Size  Location     Type
 18383 ;;		None
 18384 ;; Return value:  Size  Location     Type
 18385 ;;                  1    wreg      void 
 18386 ;; Registers used:
 18387 ;;		wreg, status,2, status,0
 18388 ;; Tracked objects:
 18389 ;;		On entry : 0/0
 18390 ;;		On exit  : 0/0
 18391 ;;		Unchanged: 0/0
 18392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18393 ;;      Params:         0       0       0       0       0       0       0
 18394 ;;      Locals:         0       0       0       0       0       0       0
 18395 ;;      Temps:          0       1       0       0       0       0       0
 18396 ;;      Totals:         0       1       0       0       0       0       0
 18397 ;;Total ram usage:        1 bytes
 18398 ;; Hardware stack levels used:    1
 18399 ;; Hardware stack levels required when called:    6
 18400 ;; This function calls:
 18401 ;;		Nothing
 18402 ;; This function is called by:
 18403 ;;		_I2C_Start
 18404 ;;		_I2C_Restart
 18405 ;;		_I2C_Stop
 18406 ;;		_I2C_Write
 18407 ;;		_I2C_Read
 18408 ;; This function uses a non-reentrant model
 18409 ;;
 18410                           
 18411                           	psect	text66
 18412  006CC4                     __ptext66:
 18413                           	opt stack 0
 18414  006CC4                     _I2C_Wait:
 18415                           	opt stack 0
 18416  006CC4  FFFF               	dw	65535	; assembler added errata NOP
 18417                           
 18418                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 18419                           
 18420                           ;incstack = 0
 18421  006CC6  B4C7               	btfsc	4039,2,c	;volatile
 18422  006CC8  D7FD               	goto	_I2C_Wait
 18423  006CCA  CFC5 F080          	movff	4037,??_I2C_Wait	;volatile
 18424  006CCE  0E1F               	movlw	31
 18425  006CD0  0100               	movlb	0	; () banked
 18426  006CD2  1780               	andwf	??_I2C_Wait& (0+255),f,b
 18427  006CD4  B4D8               	btfsc	status,2,c
 18428                           
 18429                           ; BSR set to: 0
 18430                           
 18431                           ; BSR set to: 0
 18432  006CD6  0012               	return		;funcret
 18433  006CD8  FFFF               	dw	65535	; assembler added errata NOP
 18434  006CDA  D7F4               	goto	_I2C_Wait
 18435  006CDC  FFFF               	dw	65535	; errata NOP
 18436  006CDE                     __end_of_I2C_Wait:
 18437                           	opt stack 0
 18438                           tosu	equ	0xFFF
 18439                           tosh	equ	0xFFE
 18440                           tosl	equ	0xFFD
 18441                           pclath	equ	0xFFA
 18442                           tblptru	equ	0xFF8
 18443                           tblptrh	equ	0xFF7
 18444                           tblptrl	equ	0xFF6
 18445                           tablat	equ	0xFF5
 18446                           prodh	equ	0xFF4
 18447                           prodl	equ	0xFF3
 18448                           intcon	equ	0xFF2
 18449                           indf0	equ	0xFEF
 18450                           postinc0	equ	0xFEE
 18451                           fsr0h	equ	0xFEA
 18452                           fsr0l	equ	0xFE9
 18453                           wreg	equ	0xFE8
 18454                           postdec1	equ	0xFE5
 18455                           fsr1l	equ	0xFE1
 18456                           indf2	equ	0xFDF
 18457                           postinc2	equ	0xFDE
 18458                           postdec2	equ	0xFDD
 18459                           fsr2h	equ	0xFDA
 18460                           fsr2l	equ	0xFD9
 18461                           status	equ	0xFD8
 18462                           
 18463 ;; *************** function _Lcd_Init *****************
 18464 ;; Defined at:
 18465 ;;		line 12 in file "lcd.h"
 18466 ;; Parameters:    Size  Location     Type
 18467 ;;		None
 18468 ;; Auto vars:     Size  Location     Type
 18469 ;;		None
 18470 ;; Return value:  Size  Location     Type
 18471 ;;                  1    wreg      void 
 18472 ;; Registers used:
 18473 ;;		wreg, status,2, cstack
 18474 ;; Tracked objects:
 18475 ;;		On entry : 0/0
 18476 ;;		On exit  : 0/0
 18477 ;;		Unchanged: 0/0
 18478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18479 ;;      Params:         0       0       0       0       0       0       0
 18480 ;;      Locals:         0       0       0       0       0       0       0
 18481 ;;      Temps:          0       1       0       0       0       0       0
 18482 ;;      Totals:         0       1       0       0       0       0       0
 18483 ;;Total ram usage:        1 bytes
 18484 ;; Hardware stack levels used:    1
 18485 ;; Hardware stack levels required when called:    8
 18486 ;; This function calls:
 18487 ;;		_Lcd_Cmd
 18488 ;;		_Lcd_Port
 18489 ;; This function is called by:
 18490 ;;		_main
 18491 ;; This function uses a non-reentrant model
 18492 ;;
 18493                           
 18494                           	psect	text67
 18495  00782E                     __ptext67:
 18496                           	opt stack 0
 18497  00782E                     _Lcd_Init:
 18498                           	opt stack 0
 18499  00782E  FFFF               	dw	65535	; assembler added errata NOP
 18500                           
 18501                           ;lcd.h: 21: Lcd_Port(0x00);
 18502                           
 18503                           ; BSR set to: 0
 18504                           ;incstack = 0
 18505  007830  0E00               	movlw	0
 18506  007832  EC50  F039         	call	_Lcd_Port
 18507                           
 18508                           ;lcd.h: 22: _delay((unsigned long)((30)*(8000000/4000.0)));
 18509  007836  0E3B               	movlw	59
 18510  007838  0100               	movlb	0	; () banked
 18511  00783A  6F83               	movwf	??_Lcd_Init& (0+255),b
 18512  00783C  0E79               	movlw	121
 18513  00783E                     u9137:
 18514  00783E  FFFF               	dw	65535	; errata NOP
 18515  007840  2EE8               	decfsz	wreg,f,c
 18516  007842  D7FD               	bra	u9137
 18517  007844  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18518  007846  D7FB               	bra	u9137
 18519  007848  D000               	nop2	
 18520  00784A  F000               	nop	
 18521                           
 18522                           ;lcd.h: 23: Lcd_Cmd(0x03);
 18523  00784C  0E03               	movlw	3
 18524  00784E  ECC9  F036         	call	_Lcd_Cmd
 18525                           
 18526                           ;lcd.h: 24: _delay((unsigned long)((15)*(8000000/4000.0)));
 18527  007852  0E1E               	movlw	30
 18528  007854  0100               	movlb	0	; () banked
 18529  007856  6F83               	movwf	??_Lcd_Init& (0+255),b
 18530  007858  0E3C               	movlw	60
 18531  00785A                     u9147:
 18532  00785A  FFFF               	dw	65535	; errata NOP
 18533  00785C  2EE8               	decfsz	wreg,f,c
 18534  00785E  D7FD               	bra	u9147
 18535  007860  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18536  007862  D7FB               	bra	u9147
 18537  007864  F000               	nop	
 18538                           
 18539                           ;lcd.h: 25: Lcd_Cmd(0x03);
 18540  007866  0E03               	movlw	3
 18541  007868  ECC9  F036         	call	_Lcd_Cmd
 18542                           
 18543                           ;lcd.h: 26: _delay((unsigned long)((20)*(8000000/4000.0)));
 18544  00786C  0E27               	movlw	39
 18545  00786E  0100               	movlb	0	; () banked
 18546  007870  6F83               	movwf	??_Lcd_Init& (0+255),b
 18547  007872  0EFB               	movlw	251
 18548  007874                     u9157:
 18549  007874  FFFF               	dw	65535	; errata NOP
 18550  007876  2EE8               	decfsz	wreg,f,c
 18551  007878  D7FD               	bra	u9157
 18552  00787A  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18553  00787C  D7FB               	bra	u9157
 18554  00787E  D000               	nop2	
 18555  007880  F000               	nop	
 18556                           
 18557                           ;lcd.h: 27: Lcd_Cmd(0x03);
 18558  007882  0E03               	movlw	3
 18559  007884  ECC9  F036         	call	_Lcd_Cmd
 18560                           
 18561                           ;lcd.h: 29: Lcd_Cmd(0x02);
 18562  007888  0E02               	movlw	2
 18563  00788A  ECC9  F036         	call	_Lcd_Cmd
 18564                           
 18565                           ;lcd.h: 30: Lcd_Cmd(0x02);
 18566  00788E  0E02               	movlw	2
 18567  007890  ECC9  F036         	call	_Lcd_Cmd
 18568                           
 18569                           ;lcd.h: 31: Lcd_Cmd(0x08);
 18570  007894  0E08               	movlw	8
 18571  007896  ECC9  F036         	call	_Lcd_Cmd
 18572                           
 18573                           ;lcd.h: 32: Lcd_Cmd(0x00);
 18574  00789A  0E00               	movlw	0
 18575  00789C  ECC9  F036         	call	_Lcd_Cmd
 18576                           
 18577                           ;lcd.h: 33: Lcd_Cmd(0x0C);
 18578  0078A0  0E0C               	movlw	12
 18579  0078A2  ECC9  F036         	call	_Lcd_Cmd
 18580                           
 18581                           ;lcd.h: 34: Lcd_Cmd(0x00);
 18582  0078A6  0E00               	movlw	0
 18583  0078A8  ECC9  F036         	call	_Lcd_Cmd
 18584                           
 18585                           ;lcd.h: 35: Lcd_Cmd(0x06);
 18586  0078AC  0E06               	movlw	6
 18587  0078AE  ECC9  F036         	call	_Lcd_Cmd
 18588  0078B2  0012               	return		;funcret
 18589  0078B4  FFFF               	dw	65535	; errata NOP
 18590  0078B6                     __end_of_Lcd_Init:
 18591                           	opt stack 0
 18592                           tosu	equ	0xFFF
 18593                           tosh	equ	0xFFE
 18594                           tosl	equ	0xFFD
 18595                           pclath	equ	0xFFA
 18596                           tblptru	equ	0xFF8
 18597                           tblptrh	equ	0xFF7
 18598                           tblptrl	equ	0xFF6
 18599                           tablat	equ	0xFF5
 18600                           prodh	equ	0xFF4
 18601                           prodl	equ	0xFF3
 18602                           intcon	equ	0xFF2
 18603                           indf0	equ	0xFEF
 18604                           postinc0	equ	0xFEE
 18605                           fsr0h	equ	0xFEA
 18606                           fsr0l	equ	0xFE9
 18607                           wreg	equ	0xFE8
 18608                           postdec1	equ	0xFE5
 18609                           fsr1l	equ	0xFE1
 18610                           indf2	equ	0xFDF
 18611                           postinc2	equ	0xFDE
 18612                           postdec2	equ	0xFDD
 18613                           fsr2h	equ	0xFDA
 18614                           fsr2l	equ	0xFD9
 18615                           status	equ	0xFD8
 18616                           
 18617 ;; *************** function _Lcd_Clear *****************
 18618 ;; Defined at:
 18619 ;;		line 68 in file "lcd.h"
 18620 ;; Parameters:    Size  Location     Type
 18621 ;;		None
 18622 ;; Auto vars:     Size  Location     Type
 18623 ;;		None
 18624 ;; Return value:  Size  Location     Type
 18625 ;;                  1    wreg      void 
 18626 ;; Registers used:
 18627 ;;		wreg, status,2, cstack
 18628 ;; Tracked objects:
 18629 ;;		On entry : 0/0
 18630 ;;		On exit  : 0/0
 18631 ;;		Unchanged: 0/0
 18632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18633 ;;      Params:         0       0       0       0       0       0       0
 18634 ;;      Locals:         0       0       0       0       0       0       0
 18635 ;;      Temps:          0       0       0       0       0       0       0
 18636 ;;      Totals:         0       0       0       0       0       0       0
 18637 ;;Total ram usage:        0 bytes
 18638 ;; Hardware stack levels used:    1
 18639 ;; Hardware stack levels required when called:    8
 18640 ;; This function calls:
 18641 ;;		_Lcd_Cmd
 18642 ;; This function is called by:
 18643 ;;		_main
 18644 ;; This function uses a non-reentrant model
 18645 ;;
 18646                           
 18647                           	psect	text68
 18648  006C70                     __ptext68:
 18649                           	opt stack 0
 18650  006C70                     _Lcd_Clear:
 18651                           	opt stack 0
 18652  006C70  FFFF               	dw	65535	; assembler added errata NOP
 18653                           
 18654                           ;lcd.h: 69: Lcd_Cmd(0);
 18655                           
 18656                           ;incstack = 0
 18657  006C72  0E00               	movlw	0
 18658  006C74  ECC9  F036         	call	_Lcd_Cmd
 18659                           
 18660                           ;lcd.h: 70: Lcd_Cmd(1);
 18661  006C78  0E01               	movlw	1
 18662  006C7A  ECC9  F036         	call	_Lcd_Cmd
 18663  006C7E  0012               	return		;funcret
 18664  006C80  FFFF               	dw	65535	; errata NOP
 18665  006C82                     __end_of_Lcd_Clear:
 18666                           	opt stack 0
 18667                           tosu	equ	0xFFF
 18668                           tosh	equ	0xFFE
 18669                           tosl	equ	0xFFD
 18670                           pclath	equ	0xFFA
 18671                           tblptru	equ	0xFF8
 18672                           tblptrh	equ	0xFF7
 18673                           tblptrl	equ	0xFF6
 18674                           tablat	equ	0xFF5
 18675                           prodh	equ	0xFF4
 18676                           prodl	equ	0xFF3
 18677                           intcon	equ	0xFF2
 18678                           indf0	equ	0xFEF
 18679                           postinc0	equ	0xFEE
 18680                           fsr0h	equ	0xFEA
 18681                           fsr0l	equ	0xFE9
 18682                           wreg	equ	0xFE8
 18683                           postdec1	equ	0xFE5
 18684                           fsr1l	equ	0xFE1
 18685                           indf2	equ	0xFDF
 18686                           postinc2	equ	0xFDE
 18687                           postdec2	equ	0xFDD
 18688                           fsr2h	equ	0xFDA
 18689                           fsr2l	equ	0xFD9
 18690                           status	equ	0xFD8
 18691                           
 18692 ;; *************** function _Lcd_Cmd *****************
 18693 ;; Defined at:
 18694 ;;		line 60 in file "lcd.h"
 18695 ;; Parameters:    Size  Location     Type
 18696 ;;  a               1    wreg     unsigned char 
 18697 ;; Auto vars:     Size  Location     Type
 18698 ;;  a               1    2[BANK0 ] unsigned char 
 18699 ;; Return value:  Size  Location     Type
 18700 ;;                  1    wreg      void 
 18701 ;; Registers used:
 18702 ;;		wreg, status,2, cstack
 18703 ;; Tracked objects:
 18704 ;;		On entry : 0/0
 18705 ;;		On exit  : 0/0
 18706 ;;		Unchanged: 0/0
 18707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18708 ;;      Params:         0       0       0       0       0       0       0
 18709 ;;      Locals:         0       1       0       0       0       0       0
 18710 ;;      Temps:          0       1       0       0       0       0       0
 18711 ;;      Totals:         0       2       0       0       0       0       0
 18712 ;;Total ram usage:        2 bytes
 18713 ;; Hardware stack levels used:    1
 18714 ;; Hardware stack levels required when called:    7
 18715 ;; This function calls:
 18716 ;;		_Lcd_Port
 18717 ;; This function is called by:
 18718 ;;		_Lcd_Init
 18719 ;;		_Lcd_Clear
 18720 ;;		_Lcd_Set_Cursor
 18721 ;;		_criarCaracteresCGRAM
 18722 ;; This function uses a non-reentrant model
 18723 ;;
 18724                           
 18725                           	psect	text69
 18726  006D92                     __ptext69:
 18727                           	opt stack 0
 18728  006D92                     _Lcd_Cmd:
 18729                           	opt stack 0
 18730  006D92  FFFF               	dw	65535	; assembler added errata NOP
 18731                           
 18732                           ;incstack = 0
 18733                           ;Lcd_Cmd@a stored from wreg
 18734  006D94  0100               	movlb	0	; () banked
 18735  006D96  6F82               	movwf	Lcd_Cmd@a& (0+255),b
 18736                           
 18737                           ;lcd.h: 61: PORTDbits.RD1 = 0;
 18738  006D98  9283               	bcf	3971,1,c	;volatile
 18739                           
 18740                           ;lcd.h: 62: Lcd_Port(a);
 18741  006D9A  0100               	movlb	0	; () banked
 18742  006D9C  5182               	movf	Lcd_Cmd@a& (0+255),w,b
 18743  006D9E  EC50  F039         	call	_Lcd_Port
 18744                           
 18745                           ;lcd.h: 63: PORTDbits.RD0 = 1;
 18746  006DA2  8083               	bsf	3971,0,c	;volatile
 18747                           
 18748                           ;lcd.h: 64: _delay((unsigned long)((15)*(8000000/4000.0)));
 18749  006DA4  0E1E               	movlw	30
 18750  006DA6  0100               	movlb	0	; () banked
 18751  006DA8  6F81               	movwf	??_Lcd_Cmd& (0+255),b
 18752  006DAA  0E3C               	movlw	60
 18753  006DAC                     u9167:
 18754  006DAC  FFFF               	dw	65535	; errata NOP
 18755  006DAE  2EE8               	decfsz	wreg,f,c
 18756  006DB0  D7FD               	bra	u9167
 18757  006DB2  2F81               	decfsz	??_Lcd_Cmd& (0+255),f,b
 18758  006DB4  D7FB               	bra	u9167
 18759  006DB6  F000               	nop	
 18760                           
 18761                           ;lcd.h: 65: PORTDbits.RD0 = 0;
 18762  006DB8  9083               	bcf	3971,0,c	;volatile
 18763  006DBA  0012               	return		;funcret
 18764  006DBC  FFFF               	dw	65535	; errata NOP
 18765  006DBE                     __end_of_Lcd_Cmd:
 18766                           	opt stack 0
 18767                           tosu	equ	0xFFF
 18768                           tosh	equ	0xFFE
 18769                           tosl	equ	0xFFD
 18770                           pclath	equ	0xFFA
 18771                           tblptru	equ	0xFF8
 18772                           tblptrh	equ	0xFF7
 18773                           tblptrl	equ	0xFF6
 18774                           tablat	equ	0xFF5
 18775                           prodh	equ	0xFF4
 18776                           prodl	equ	0xFF3
 18777                           intcon	equ	0xFF2
 18778                           indf0	equ	0xFEF
 18779                           postinc0	equ	0xFEE
 18780                           fsr0h	equ	0xFEA
 18781                           fsr0l	equ	0xFE9
 18782                           wreg	equ	0xFE8
 18783                           postdec1	equ	0xFE5
 18784                           fsr1l	equ	0xFE1
 18785                           indf2	equ	0xFDF
 18786                           postinc2	equ	0xFDE
 18787                           postdec2	equ	0xFDD
 18788                           fsr2h	equ	0xFDA
 18789                           fsr2l	equ	0xFD9
 18790                           status	equ	0xFD8
 18791                           
 18792 ;; *************** function _Lcd_Port *****************
 18793 ;; Defined at:
 18794 ;;		line 38 in file "lcd.h"
 18795 ;; Parameters:    Size  Location     Type
 18796 ;;  a               1    wreg     unsigned char 
 18797 ;; Auto vars:     Size  Location     Type
 18798 ;;  a               1    0[BANK0 ] unsigned char 
 18799 ;; Return value:  Size  Location     Type
 18800 ;;                  1    wreg      void 
 18801 ;; Registers used:
 18802 ;;		wreg
 18803 ;; Tracked objects:
 18804 ;;		On entry : 0/0
 18805 ;;		On exit  : 0/0
 18806 ;;		Unchanged: 0/0
 18807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18808 ;;      Params:         0       0       0       0       0       0       0
 18809 ;;      Locals:         0       1       0       0       0       0       0
 18810 ;;      Temps:          0       0       0       0       0       0       0
 18811 ;;      Totals:         0       1       0       0       0       0       0
 18812 ;;Total ram usage:        1 bytes
 18813 ;; Hardware stack levels used:    1
 18814 ;; Hardware stack levels required when called:    6
 18815 ;; This function calls:
 18816 ;;		Nothing
 18817 ;; This function is called by:
 18818 ;;		_Lcd_Init
 18819 ;;		_Lcd_Cmd
 18820 ;;		_Lcd_Write_Char
 18821 ;; This function uses a non-reentrant model
 18822 ;;
 18823                           
 18824                           	psect	text70
 18825  0072A0                     __ptext70:
 18826                           	opt stack 0
 18827  0072A0                     _Lcd_Port:
 18828                           	opt stack 0
 18829  0072A0  FFFF               	dw	65535	; assembler added errata NOP
 18830                           
 18831                           ;incstack = 0
 18832                           ;Lcd_Port@a stored from wreg
 18833  0072A2  0100               	movlb	0	; () banked
 18834  0072A4  6F80               	movwf	Lcd_Port@a& (0+255),b
 18835                           
 18836                           ;lcd.h: 39: if (a & 1)
 18837  0072A6  0100               	movlb	0	; () banked
 18838  0072A8  A180               	btfss	Lcd_Port@a& (0+255),0,b
 18839  0072AA  D002               	goto	l626
 18840                           
 18841                           ; BSR set to: 0
 18842                           ;lcd.h: 40: PORTDbits.RD2 = 1;
 18843  0072AC  8483               	bsf	3971,2,c	;volatile
 18844  0072AE  D002               	goto	l627
 18845  0072B0                     l626:
 18846  0072B0  FFFF               	dw	65535	; assembler added errata NOP
 18847                           
 18848                           ; BSR set to: 0
 18849                           ;lcd.h: 41: else
 18850                           ;lcd.h: 42: PORTDbits.RD2 = 0;
 18851  0072B2  9483               	bcf	3971,2,c	;volatile
 18852  0072B4                     l627:
 18853  0072B4  FFFF               	dw	65535	; assembler added errata NOP
 18854                           
 18855                           ; BSR set to: 0
 18856                           ;lcd.h: 44: if (a & 2)
 18857                           
 18858                           ; BSR set to: 0
 18859  0072B6  A380               	btfss	Lcd_Port@a& (0+255),1,b
 18860  0072B8  D002               	goto	l628
 18861                           
 18862                           ; BSR set to: 0
 18863                           ;lcd.h: 45: PORTDbits.RD3 = 1;
 18864  0072BA  8683               	bsf	3971,3,c	;volatile
 18865  0072BC  D002               	goto	l629
 18866  0072BE                     l628:
 18867  0072BE  FFFF               	dw	65535	; assembler added errata NOP
 18868                           
 18869                           ; BSR set to: 0
 18870                           ;lcd.h: 46: else
 18871                           ;lcd.h: 47: PORTDbits.RD3 = 0;
 18872  0072C0  9683               	bcf	3971,3,c	;volatile
 18873  0072C2                     l629:
 18874  0072C2  FFFF               	dw	65535	; assembler added errata NOP
 18875                           
 18876                           ; BSR set to: 0
 18877                           ;lcd.h: 49: if (a & 4)
 18878                           
 18879                           ; BSR set to: 0
 18880  0072C4  A580               	btfss	Lcd_Port@a& (0+255),2,b
 18881  0072C6  D002               	goto	l630
 18882                           
 18883                           ; BSR set to: 0
 18884                           ;lcd.h: 50: PORTDbits.RD4 = 1;
 18885  0072C8  8883               	bsf	3971,4,c	;volatile
 18886  0072CA  D002               	goto	l631
 18887  0072CC                     l630:
 18888  0072CC  FFFF               	dw	65535	; assembler added errata NOP
 18889                           
 18890                           ; BSR set to: 0
 18891                           ;lcd.h: 51: else
 18892                           ;lcd.h: 52: PORTDbits.RD4 = 0;
 18893  0072CE  9883               	bcf	3971,4,c	;volatile
 18894  0072D0                     l631:
 18895  0072D0  FFFF               	dw	65535	; assembler added errata NOP
 18896                           
 18897                           ; BSR set to: 0
 18898                           ;lcd.h: 54: if (a & 8)
 18899                           
 18900                           ; BSR set to: 0
 18901  0072D2  A780               	btfss	Lcd_Port@a& (0+255),3,b
 18902  0072D4  D002               	goto	l632
 18903                           
 18904                           ; BSR set to: 0
 18905                           ;lcd.h: 55: PORTDbits.RD5 = 1;
 18906  0072D6  8A83               	bsf	3971,5,c	;volatile
 18907  0072D8  D002               	goto	l633
 18908  0072DA                     l632:
 18909  0072DA  FFFF               	dw	65535	; assembler added errata NOP
 18910                           
 18911                           ; BSR set to: 0
 18912                           ;lcd.h: 56: else
 18913                           ;lcd.h: 57: PORTDbits.RD5 = 0;
 18914  0072DC  9A83               	bcf	3971,5,c	;volatile
 18915  0072DE                     l633:
 18916  0072DE  FFFF               	dw	65535	; assembler added errata NOP
 18917                           
 18918                           ; BSR set to: 0
 18919                           
 18920                           ; BSR set to: 0
 18921  0072E0  0012               	return		;funcret
 18922  0072E2  FFFF               	dw	65535	; errata NOP
 18923  0072E4                     __end_of_Lcd_Port:
 18924                           	opt stack 0
 18925                           tosu	equ	0xFFF
 18926                           tosh	equ	0xFFE
 18927                           tosl	equ	0xFFD
 18928                           pclath	equ	0xFFA
 18929                           tblptru	equ	0xFF8
 18930                           tblptrh	equ	0xFF7
 18931                           tblptrl	equ	0xFF6
 18932                           tablat	equ	0xFF5
 18933                           prodh	equ	0xFF4
 18934                           prodl	equ	0xFF3
 18935                           intcon	equ	0xFF2
 18936                           indf0	equ	0xFEF
 18937                           postinc0	equ	0xFEE
 18938                           fsr0h	equ	0xFEA
 18939                           fsr0l	equ	0xFE9
 18940                           wreg	equ	0xFE8
 18941                           postdec1	equ	0xFE5
 18942                           fsr1l	equ	0xFE1
 18943                           indf2	equ	0xFDF
 18944                           postinc2	equ	0xFDE
 18945                           postdec2	equ	0xFDD
 18946                           fsr2h	equ	0xFDA
 18947                           fsr2l	equ	0xFD9
 18948                           status	equ	0xFD8
 18949                           
 18950 ;; *************** function _I2C_Master_Init *****************
 18951 ;; Defined at:
 18952 ;;		line 13 in file "I2C.c"
 18953 ;; Parameters:    Size  Location     Type
 18954 ;;  c               4   13[BANK0 ] const unsigned long 
 18955 ;; Auto vars:     Size  Location     Type
 18956 ;;		None
 18957 ;; Return value:  Size  Location     Type
 18958 ;;                  1    wreg      void 
 18959 ;; Registers used:
 18960 ;;		wreg, status,2, status,0, cstack
 18961 ;; Tracked objects:
 18962 ;;		On entry : 0/0
 18963 ;;		On exit  : 0/0
 18964 ;;		Unchanged: 0/0
 18965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18966 ;;      Params:         0       4       0       0       0       0       0
 18967 ;;      Locals:         0       0       0       0       0       0       0
 18968 ;;      Temps:          0       4       0       0       0       0       0
 18969 ;;      Totals:         0       8       0       0       0       0       0
 18970 ;;Total ram usage:        8 bytes
 18971 ;; Hardware stack levels used:    1
 18972 ;; Hardware stack levels required when called:    7
 18973 ;; This function calls:
 18974 ;;		___lldiv
 18975 ;; This function is called by:
 18976 ;;		_main
 18977 ;; This function uses a non-reentrant model
 18978 ;;
 18979                           
 18980                           	psect	text71
 18981  007568                     __ptext71:
 18982                           	opt stack 0
 18983  007568                     _I2C_Master_Init:
 18984                           	opt stack 0
 18985  007568  FFFF               	dw	65535	; assembler added errata NOP
 18986                           
 18987                           ;I2C.c: 14: SSPCON1 = 0b00101000;
 18988                           
 18989                           ; BSR set to: 0
 18990                           ;incstack = 0
 18991  00756A  0E28               	movlw	40
 18992  00756C  6EC6               	movwf	4038,c	;volatile
 18993                           
 18994                           ;I2C.c: 15: SSPCON2 = 0;
 18995  00756E  0E00               	movlw	0
 18996  007570  6EC5               	movwf	4037,c	;volatile
 18997                           
 18998                           ;I2C.c: 16: SSPADD = (8000000 / (4 * c)) - 1;
 18999  007572  0E00               	movlw	0
 19000  007574  0100               	movlb	0	; () banked
 19001  007576  6F80               	movwf	___lldiv@dividend& (0+255),b
 19002  007578  0E12               	movlw	18
 19003  00757A  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 19004  00757C  0E7A               	movlw	122
 19005  00757E  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 19006  007580  0E00               	movlw	0
 19007  007582  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 19008  007584  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 19009  007588  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 19010  00758C  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 19011  007590  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 19012  007594  0E02               	movlw	2
 19013  007596                     u8815:
 19014  007596  FFFF               	dw	65535	; assembler added errata NOP
 19015  007598  90D8               	bcf	status,0,c
 19016  00759A  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 19017  00759C  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 19018  00759E  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 19019  0075A0  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 19020  0075A2  2EE8               	decfsz	wreg,f,c
 19021  0075A4  D7F8               	goto	u8815
 19022  0075A6  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 19023  0075AA  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 19024  0075AE  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 19025  0075B2  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 19026  0075B6  EC5B  F03C         	call	___lldiv	;wreg free
 19027  0075BA  0100               	movlb	0	; () banked
 19028  0075BC  0580               	decf	?___lldiv& (0+255),w,b
 19029  0075BE  6EC8               	movwf	4040,c	;volatile
 19030                           
 19031                           ; BSR set to: 0
 19032                           ;I2C.c: 17: SSPSTAT = 0;
 19033  0075C0  0E00               	movlw	0
 19034  0075C2  6EC7               	movwf	4039,c	;volatile
 19035                           
 19036                           ; BSR set to: 0
 19037                           ;I2C.c: 18: TRISCbits.RC3 = 1;
 19038  0075C4  8694               	bsf	3988,3,c	;volatile
 19039                           
 19040                           ; BSR set to: 0
 19041                           ;I2C.c: 19: TRISCbits.RC4 = 1;
 19042  0075C6  8894               	bsf	3988,4,c	;volatile
 19043                           
 19044                           ; BSR set to: 0
 19045  0075C8  0012               	return		;funcret
 19046  0075CA  FFFF               	dw	65535	; errata NOP
 19047  0075CC                     __end_of_I2C_Master_Init:
 19048                           	opt stack 0
 19049                           tosu	equ	0xFFF
 19050                           tosh	equ	0xFFE
 19051                           tosl	equ	0xFFD
 19052                           pclath	equ	0xFFA
 19053                           tblptru	equ	0xFF8
 19054                           tblptrh	equ	0xFF7
 19055                           tblptrl	equ	0xFF6
 19056                           tablat	equ	0xFF5
 19057                           prodh	equ	0xFF4
 19058                           prodl	equ	0xFF3
 19059                           intcon	equ	0xFF2
 19060                           indf0	equ	0xFEF
 19061                           postinc0	equ	0xFEE
 19062                           fsr0h	equ	0xFEA
 19063                           fsr0l	equ	0xFE9
 19064                           wreg	equ	0xFE8
 19065                           postdec1	equ	0xFE5
 19066                           fsr1l	equ	0xFE1
 19067                           indf2	equ	0xFDF
 19068                           postinc2	equ	0xFDE
 19069                           postdec2	equ	0xFDD
 19070                           fsr2h	equ	0xFDA
 19071                           fsr2l	equ	0xFD9
 19072                           status	equ	0xFD8
 19073                           
 19074 ;; *************** function ___lldiv *****************
 19075 ;; Defined at:
 19076 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 19077 ;; Parameters:    Size  Location     Type
 19078 ;;  dividend        4    0[BANK0 ] unsigned long 
 19079 ;;  divisor         4    4[BANK0 ] unsigned long 
 19080 ;; Auto vars:     Size  Location     Type
 19081 ;;  quotient        4    8[BANK0 ] unsigned long 
 19082 ;;  counter         1   12[BANK0 ] unsigned char 
 19083 ;; Return value:  Size  Location     Type
 19084 ;;                  4    0[BANK0 ] unsigned long 
 19085 ;; Registers used:
 19086 ;;		wreg, status,2, status,0
 19087 ;; Tracked objects:
 19088 ;;		On entry : 0/0
 19089 ;;		On exit  : 0/0
 19090 ;;		Unchanged: 0/0
 19091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19092 ;;      Params:         0       8       0       0       0       0       0
 19093 ;;      Locals:         0       5       0       0       0       0       0
 19094 ;;      Temps:          0       0       0       0       0       0       0
 19095 ;;      Totals:         0      13       0       0       0       0       0
 19096 ;;Total ram usage:       13 bytes
 19097 ;; Hardware stack levels used:    1
 19098 ;; Hardware stack levels required when called:    6
 19099 ;; This function calls:
 19100 ;;		Nothing
 19101 ;; This function is called by:
 19102 ;;		_I2C_Master_Init
 19103 ;; This function uses a non-reentrant model
 19104 ;;
 19105                           
 19106                           	psect	text72
 19107  0078B6                     __ptext72:
 19108                           	opt stack 0
 19109  0078B6                     ___lldiv:
 19110                           	opt stack 0
 19111  0078B6  FFFF               	dw	65535	; assembler added errata NOP
 19112                           
 19113                           ; BSR set to: 0
 19114                           ;incstack = 0
 19115  0078B8  0E00               	movlw	0
 19116  0078BA  0100               	movlb	0	; () banked
 19117  0078BC  6F88               	movwf	___lldiv@quotient& (0+255),b
 19118  0078BE  0E00               	movlw	0
 19119  0078C0  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 19120  0078C2  0E00               	movlw	0
 19121  0078C4  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 19122  0078C6  0E00               	movlw	0
 19123  0078C8  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 19124                           
 19125                           ; BSR set to: 0
 19126  0078CA  5184               	movf	___lldiv@divisor& (0+255),w,b
 19127  0078CC  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 19128  0078CE  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 19129  0078D0  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 19130  0078D2  B4D8               	btfsc	status,2,c
 19131  0078D4  D02E               	goto	l1496
 19132                           
 19133                           ; BSR set to: 0
 19134  0078D6  0E01               	movlw	1
 19135  0078D8  6F8C               	movwf	___lldiv@counter& (0+255),b
 19136  0078DA  D007               	goto	l1491
 19137  0078DC  FFFF               	dw	65535	; assembler added errata NOP
 19138                           
 19139                           ; BSR set to: 0
 19140                           
 19141                           ; BSR set to: 0
 19142  0078DE  90D8               	bcf	status,0,c
 19143  0078E0  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 19144  0078E2  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 19145  0078E4  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 19146  0078E6  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 19147  0078E8  2B8C               	incf	___lldiv@counter& (0+255),f,b
 19148  0078EA                     l1491:
 19149  0078EA  FFFF               	dw	65535	; assembler added errata NOP
 19150                           
 19151                           ; BSR set to: 0
 19152                           
 19153                           ; BSR set to: 0
 19154  0078EC  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 19155  0078EE  D7F6               	goto	l1492
 19156  0078F0                     u6790:
 19157  0078F0  FFFF               	dw	65535	; assembler added errata NOP
 19158                           
 19159                           ; BSR set to: 0
 19160                           
 19161                           ; BSR set to: 0
 19162                           
 19163                           ; BSR set to: 0
 19164  0078F2  90D8               	bcf	status,0,c
 19165  0078F4  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 19166  0078F6  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 19167  0078F8  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 19168  0078FA  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 19169                           
 19170                           ; BSR set to: 0
 19171  0078FC  5184               	movf	___lldiv@divisor& (0+255),w,b
 19172  0078FE  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 19173  007900  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19174  007902  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 19175  007904  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19176  007906  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 19177  007908  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19178  00790A  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 19179  00790C  A0D8               	btfss	status,0,c
 19180  00790E  D009               	goto	l1495
 19181                           
 19182                           ; BSR set to: 0
 19183  007910  5184               	movf	___lldiv@divisor& (0+255),w,b
 19184  007912  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 19185  007914  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19186  007916  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 19187  007918  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19188  00791A  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 19189  00791C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19190  00791E  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 19191                           
 19192                           ; BSR set to: 0
 19193  007920  8188               	bsf	___lldiv@quotient& (0+255),0,b
 19194  007922                     l1495:
 19195  007922  FFFF               	dw	65535	; assembler added errata NOP
 19196                           
 19197                           ; BSR set to: 0
 19198                           
 19199                           ; BSR set to: 0
 19200  007924  90D8               	bcf	status,0,c
 19201  007926  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 19202  007928  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 19203  00792A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 19204  00792C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 19205                           
 19206                           ; BSR set to: 0
 19207  00792E  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 19208  007930  D7DF               	goto	u6790
 19209  007932                     l1496:
 19210  007932  FFFF               	dw	65535	; assembler added errata NOP
 19211                           
 19212                           ; BSR set to: 0
 19213                           
 19214                           ; BSR set to: 0
 19215  007934  C088  F080         	movff	___lldiv@quotient,?___lldiv
 19216  007938  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 19217  00793C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 19218  007940  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 19219                           
 19220                           ; BSR set to: 0
 19221  007944  0012               	return		;funcret
 19222  007946  FFFF               	dw	65535	; errata NOP
 19223  007948                     __end_of___lldiv:
 19224                           	opt stack 0
 19225                           tosu	equ	0xFFF
 19226                           tosh	equ	0xFFE
 19227                           tosl	equ	0xFFD
 19228                           pclath	equ	0xFFA
 19229                           tblptru	equ	0xFF8
 19230                           tblptrh	equ	0xFF7
 19231                           tblptrl	equ	0xFF6
 19232                           tablat	equ	0xFF5
 19233                           prodh	equ	0xFF4
 19234                           prodl	equ	0xFF3
 19235                           intcon	equ	0xFF2
 19236                           indf0	equ	0xFEF
 19237                           postinc0	equ	0xFEE
 19238                           fsr0h	equ	0xFEA
 19239                           fsr0l	equ	0xFE9
 19240                           wreg	equ	0xFE8
 19241                           postdec1	equ	0xFE5
 19242                           fsr1l	equ	0xFE1
 19243                           indf2	equ	0xFDF
 19244                           postinc2	equ	0xFDE
 19245                           postdec2	equ	0xFDD
 19246                           fsr2h	equ	0xFDA
 19247                           fsr2l	equ	0xFD9
 19248                           status	equ	0xFD8
 19249                           
 19250 ;; *************** function _TIMER *****************
 19251 ;; Defined at:
 19252 ;;		line 32 in file "Main.c"
 19253 ;; Parameters:    Size  Location     Type
 19254 ;;		None
 19255 ;; Auto vars:     Size  Location     Type
 19256 ;;  c               1   66[COMRAM] unsigned char 
 19257 ;; Return value:  Size  Location     Type
 19258 ;;                  1    wreg      void 
 19259 ;; Registers used:
 19260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19261 ;; Tracked objects:
 19262 ;;		On entry : 0/0
 19263 ;;		On exit  : 0/0
 19264 ;;		Unchanged: 0/0
 19265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19266 ;;      Params:         0       0       0       0       0       0       0
 19267 ;;      Locals:         1       0       0       0       0       0       0
 19268 ;;      Temps:         18       0       0       0       0       0       0
 19269 ;;      Totals:        19       0       0       0       0       0       0
 19270 ;;Total ram usage:       19 bytes
 19271 ;; Hardware stack levels used:    1
 19272 ;; Hardware stack levels required when called:    5
 19273 ;; This function calls:
 19274 ;;		_lerTransdutor
 19275 ;;		_readButtons
 19276 ;;		_timer
 19277 ;; This function is called by:
 19278 ;;		Interrupt level 2
 19279 ;; This function uses a non-reentrant model
 19280 ;;
 19281                           
 19282                           	psect	intcode
 19283  000008                     __pintcode:
 19284                           	opt stack 0
 19285  000008                     _TIMER:
 19286                           	opt stack 0
 19287  000008  FFFF               	dw	65535	; assembler added errata NOP
 19288                           
 19289                           ; BSR set to: 0
 19290                           ;incstack = 0
 19291  00000A  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19292  00000C  CFFA F031          	movff	pclath,??_TIMER
 19293  000010  CFFB F032          	movff	pclatu,??_TIMER+1
 19294  000014  CFE9 F033          	movff	fsr0l,??_TIMER+2
 19295  000018  CFEA F034          	movff	fsr0h,??_TIMER+3
 19296  00001C  CFE1 F035          	movff	fsr1l,??_TIMER+4
 19297  000020  CFE2 F036          	movff	fsr1h,??_TIMER+5
 19298  000024  CFD9 F037          	movff	fsr2l,??_TIMER+6
 19299  000028  CFDA F038          	movff	fsr2h,??_TIMER+7
 19300  00002C  CFF3 F039          	movff	prodl,??_TIMER+8
 19301  000030  CFF4 F03A          	movff	prodh,??_TIMER+9
 19302  000034  CFF6 F03B          	movff	tblptrl,??_TIMER+10
 19303  000038  CFF7 F03C          	movff	tblptrh,??_TIMER+11
 19304  00003C  CFF8 F03D          	movff	tblptru,??_TIMER+12
 19305  000040  CFF5 F03E          	movff	tablat,??_TIMER+13
 19306  000044  C07F  F03F         	movff	btemp,??_TIMER+14
 19307  000048  C080  F040         	movff	btemp+1,??_TIMER+15
 19308  00004C  C081  F041         	movff	btemp+2,??_TIMER+16
 19309  000050  C082  F042         	movff	btemp+3,??_TIMER+17
 19310                           
 19311                           ;Main.c: 33: if (TMR0IF) {
 19312  000054  A4F2               	btfss	intcon,2,c	;volatile
 19313  000056  D01A               	goto	i2l905
 19314                           
 19315                           ;Main.c: 34: TMR0IF = 0x00;
 19316  000058  94F2               	bcf	intcon,2,c	;volatile
 19317                           
 19318                           ;Main.c: 35: TMR0H = 0x3C;
 19319  00005A  0E3C               	movlw	60
 19320  00005C  6ED7               	movwf	4055,c	;volatile
 19321                           
 19322                           ;Main.c: 36: TMR0L = 0xB0;
 19323  00005E  0EB0               	movlw	176
 19324  000060  6ED6               	movwf	4054,c	;volatile
 19325                           
 19326                           ;Main.c: 38: base_sec++;
 19327  000062  2A71               	incf	_base_sec,f,c
 19328                           
 19329                           ;Main.c: 40: if (base_sec == 5) {
 19330  000064  0E05               	movlw	5
 19331  000066  1871               	xorwf	_base_sec,w,c
 19332  000068  B4D8               	btfsc	status,2,c
 19333                           
 19334                           ;Main.c: 41: blinkk = ~blinkk;
 19335  00006A  1E67               	comf	_blinkk,f,c
 19336                           
 19337                           ;Main.c: 42: }
 19338                           ;Main.c: 44: lerTransdutor();
 19339  00006C  EC1C  F011         	call	_lerTransdutor	;wreg free
 19340                           
 19341                           ;Main.c: 45: readButtons();
 19342  000070  EC91  F03B         	call	_readButtons	;wreg free
 19343                           
 19344                           ;Main.c: 47: if (base_sec > 9) {
 19345  000074  0E09               	movlw	9
 19346  000076  6471               	cpfsgt	_base_sec,c
 19347  000078  D009               	goto	i2l905
 19348                           
 19349                           ;Main.c: 48: base_sec = 0;
 19350  00007A  0E00               	movlw	0
 19351  00007C  6E71               	movwf	_base_sec,c
 19352                           
 19353                           ;Main.c: 49: blinkk = ~blinkk;
 19354  00007E  1E67               	comf	_blinkk,f,c
 19355                           
 19356                           ;Main.c: 50: timer();
 19357  000080  ECDD  F015         	call	_timer	;wreg free
 19358                           
 19359                           ;Main.c: 51: if (RCSTAbits.OERR) {
 19360  000084  A2AB               	btfss	4011,1,c	;volatile
 19361  000086  D002               	goto	i2l905
 19362                           
 19363                           ;Main.c: 52: RCSTAbits.CREN = 0;
 19364  000088  98AB               	bcf	4011,4,c	;volatile
 19365                           
 19366                           ;Main.c: 53: RCSTAbits.CREN = 1;
 19367  00008A  88AB               	bsf	4011,4,c	;volatile
 19368  00008C                     i2l905:
 19369  00008C  FFFF               	dw	65535	; assembler added errata NOP
 19370                           
 19371                           ;Main.c: 54: }
 19372                           ;Main.c: 55: }
 19373                           ;Main.c: 56: }
 19374                           ;Main.c: 57: if (RCIF) {
 19375  00008E  AA9E               	btfss	3998,5,c	;volatile
 19376  000090  D01B               	goto	i2l908
 19377                           
 19378                           ;Main.c: 58: char c = RCREG;
 19379  000092  CFAE F043          	movff	4014,TIMER@c	;volatile
 19380                           
 19381                           ;Main.c: 59: if (c != '\n' && c != '\r') {
 19382  000096  0E0A               	movlw	10
 19383  000098  1843               	xorwf	TIMER@c,w,c
 19384  00009A  B4D8               	btfsc	status,2,c
 19385  00009C  D00F               	goto	i2l907
 19386  00009E  0E0D               	movlw	13
 19387  0000A0  1843               	xorwf	TIMER@c,w,c
 19388  0000A2  B4D8               	btfsc	status,2,c
 19389  0000A4  D00B               	goto	i2l907
 19390                           
 19391                           ;Main.c: 60: bufferSerial[cbf++] = c;
 19392  0000A6  5066               	movf	_cbf,w,c
 19393  0000A8  0D01               	mullw	1
 19394  0000AA  0E00               	movlw	low _bufferSerial
 19395  0000AC  24F3               	addwf	prodl,w,c
 19396  0000AE  6ED9               	movwf	fsr2l,c
 19397  0000B0  0E01               	movlw	high _bufferSerial
 19398  0000B2  20F4               	addwfc	prodh,w,c
 19399  0000B4  6EDA               	movwf	fsr2h,c
 19400  0000B6  C043  FFDF         	movff	TIMER@c,indf2
 19401  0000BA  2A66               	incf	_cbf,f,c
 19402  0000BC                     i2l907:
 19403  0000BC  FFFF               	dw	65535	; assembler added errata NOP
 19404                           
 19405                           ;Main.c: 61: }
 19406                           ;Main.c: 62: if (cbf >= 60) cbf = 0;
 19407  0000BE  0E3B               	movlw	59
 19408  0000C0  6466               	cpfsgt	_cbf,c
 19409  0000C2  D002               	goto	i2l908
 19410  0000C4  0E00               	movlw	0
 19411  0000C6  6E66               	movwf	_cbf,c
 19412  0000C8                     i2l908:
 19413  0000C8  FFFF               	dw	65535	; assembler added errata NOP
 19414  0000CA  C042  F082         	movff	??_TIMER+17,btemp+3
 19415  0000CE  C041  F081         	movff	??_TIMER+16,btemp+2
 19416  0000D2  C040  F080         	movff	??_TIMER+15,btemp+1
 19417  0000D6  C03F  F07F         	movff	??_TIMER+14,btemp
 19418  0000DA  C03E  FFF5         	movff	??_TIMER+13,tablat
 19419  0000DE  C03D  FFF8         	movff	??_TIMER+12,tblptru
 19420  0000E2  C03C  FFF7         	movff	??_TIMER+11,tblptrh
 19421  0000E6  C03B  FFF6         	movff	??_TIMER+10,tblptrl
 19422  0000EA  C03A  FFF4         	movff	??_TIMER+9,prodh
 19423  0000EE  C039  FFF3         	movff	??_TIMER+8,prodl
 19424  0000F2  C038  FFDA         	movff	??_TIMER+7,fsr2h
 19425  0000F6  C037  FFD9         	movff	??_TIMER+6,fsr2l
 19426  0000FA  C036  FFE2         	movff	??_TIMER+5,fsr1h
 19427  0000FE  C035  FFE1         	movff	??_TIMER+4,fsr1l
 19428  000102  C034  FFEA         	movff	??_TIMER+3,fsr0h
 19429  000106  C033  FFE9         	movff	??_TIMER+2,fsr0l
 19430  00010A  C032  FFFB         	movff	??_TIMER+1,pclatu
 19431  00010E  C031  FFFA         	movff	??_TIMER,pclath
 19432  000112  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19433  000114  0011               	retfie		f
 19434  000116  FFFF               	dw	65535	; errata NOP
 19435  000118                     __end_of_TIMER:
 19436                           	opt stack 0
 19437                           tosu	equ	0xFFF
 19438                           tosh	equ	0xFFE
 19439                           tosl	equ	0xFFD
 19440                           pclatu	equ	0xFFB
 19441                           pclath	equ	0xFFA
 19442                           tblptru	equ	0xFF8
 19443                           tblptrh	equ	0xFF7
 19444                           tblptrl	equ	0xFF6
 19445                           tablat	equ	0xFF5
 19446                           prodh	equ	0xFF4
 19447                           prodl	equ	0xFF3
 19448                           intcon	equ	0xFF2
 19449                           indf0	equ	0xFEF
 19450                           postinc0	equ	0xFEE
 19451                           fsr0h	equ	0xFEA
 19452                           fsr0l	equ	0xFE9
 19453                           wreg	equ	0xFE8
 19454                           postdec1	equ	0xFE5
 19455                           fsr1h	equ	0xFE2
 19456                           fsr1l	equ	0xFE1
 19457                           indf2	equ	0xFDF
 19458                           postinc2	equ	0xFDE
 19459                           postdec2	equ	0xFDD
 19460                           fsr2h	equ	0xFDA
 19461                           fsr2l	equ	0xFD9
 19462                           status	equ	0xFD8
 19463                           
 19464 ;; *************** function _timer *****************
 19465 ;; Defined at:
 19466 ;;		line 9 in file "temporizador.h"
 19467 ;; Parameters:    Size  Location     Type
 19468 ;;		None
 19469 ;; Auto vars:     Size  Location     Type
 19470 ;;		None
 19471 ;; Return value:  Size  Location     Type
 19472 ;;                  1    wreg      void 
 19473 ;; Registers used:
 19474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19475 ;; Tracked objects:
 19476 ;;		On entry : 0/0
 19477 ;;		On exit  : 0/0
 19478 ;;		Unchanged: 0/0
 19479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19480 ;;      Params:         0       0       0       0       0       0       0
 19481 ;;      Locals:         8       0       0       0       0       0       0
 19482 ;;      Temps:          0       0       0       0       0       0       0
 19483 ;;      Totals:         8       0       0       0       0       0       0
 19484 ;;Total ram usage:        8 bytes
 19485 ;; Hardware stack levels used:    1
 19486 ;; Hardware stack levels required when called:    4
 19487 ;; This function calls:
 19488 ;;		_writeEEPROM16_ext
 19489 ;;		i2_RTC_Init
 19490 ;;		i2_getDS1307TimeDate
 19491 ;;		i2_writeEEPROM_ext
 19492 ;; This function is called by:
 19493 ;;		_TIMER
 19494 ;; This function uses a non-reentrant model
 19495 ;;
 19496                           
 19497                           	psect	text74
 19498  002BBA                     __ptext74:
 19499                           	opt stack 0
 19500  002BBA                     _timer:
 19501                           	opt stack 0
 19502  002BBA  FFFF               	dw	65535	; assembler added errata NOP
 19503                           
 19504                           ;temporizador.h: 11: timerVerificarSinal = (timerVerificarSinal <= 0 ? 0 : --timerVerifi
      +                          carSinal);
 19505                           
 19506                           ;incstack = 0
 19507  002BBC  0100               	movlb	0	; () banked
 19508  002BBE  51FE               	movf	_timerVerificarSinal& (0+255),w,b
 19509  002BC0  B4D8               	btfsc	status,2,c
 19510  002BC2  D005               	goto	i2l583
 19511                           
 19512                           ; BSR set to: 0
 19513  002BC4  07FE               	decf	_timerVerificarSinal& (0+255),f,b
 19514  002BC6  C0FE  F009         	movff	_timerVerificarSinal,_timer$1326
 19515  002BCA  6A0A               	clrf	_timer$1326+1,c
 19516  002BCC  D005               	goto	i2l585
 19517  002BCE                     i2l583:
 19518  002BCE  FFFF               	dw	65535	; assembler added errata NOP
 19519                           
 19520                           ; BSR set to: 0
 19521                           
 19522                           ; BSR set to: 0
 19523  002BD0  0E00               	movlw	0
 19524  002BD2  6E0A               	movwf	_timer$1326+1,c
 19525  002BD4  0E00               	movlw	0
 19526  002BD6  6E09               	movwf	_timer$1326,c
 19527  002BD8                     i2l585:
 19528  002BD8  FFFF               	dw	65535	; assembler added errata NOP
 19529                           
 19530                           ; BSR set to: 0
 19531                           
 19532                           ; BSR set to: 0
 19533  002BDA  C009  F0FE         	movff	_timer$1326,_timerVerificarSinal
 19534                           
 19535                           ;temporizador.h: 12: timerEtapaComunicacao = (timerEtapaComunicacao <= 0 ? 0 : --timerEt
      +                          apaComunicacao);
 19536  002BDE  51F5               	movf	_timerEtapaComunicacao& (0+255),w,b
 19537  002BE0  B4D8               	btfsc	status,2,c
 19538  002BE2  D005               	goto	i2l587
 19539                           
 19540                           ; BSR set to: 0
 19541  002BE4  07F5               	decf	_timerEtapaComunicacao& (0+255),f,b
 19542  002BE6  C0F5  F00B         	movff	_timerEtapaComunicacao,_timer$1327
 19543  002BEA  6A0C               	clrf	_timer$1327+1,c
 19544  002BEC  D005               	goto	i2l589
 19545  002BEE                     i2l587:
 19546  002BEE  FFFF               	dw	65535	; assembler added errata NOP
 19547                           
 19548                           ; BSR set to: 0
 19549                           
 19550                           ; BSR set to: 0
 19551  002BF0  0E00               	movlw	0
 19552  002BF2  6E0C               	movwf	_timer$1327+1,c
 19553  002BF4  0E00               	movlw	0
 19554  002BF6  6E0B               	movwf	_timer$1327,c
 19555  002BF8                     i2l589:
 19556  002BF8  FFFF               	dw	65535	; assembler added errata NOP
 19557                           
 19558                           ; BSR set to: 0
 19559                           
 19560                           ; BSR set to: 0
 19561  002BFA  C00B  F0F5         	movff	_timer$1327,_timerEtapaComunicacao
 19562                           
 19563                           ; BSR set to: 0
 19564                           ;temporizador.h: 13: timerTesteBombas = (timerTesteBombas <= 0 ? 0 : --timerTesteBombas)
      +                          ;
 19565  002BFE  51DB               	movf	_timerTesteBombas& (0+255),w,b
 19566  002C00  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 19567  002C02  B4D8               	btfsc	status,2,c
 19568  002C04  D008               	goto	i2l591
 19569                           
 19570                           ; BSR set to: 0
 19571  002C06  07DB               	decf	_timerTesteBombas& (0+255),f,b
 19572  002C08  A0D8               	btfss	status,0,c
 19573  002C0A  07DC               	decf	(_timerTesteBombas+1)& (0+255),f,b
 19574  002C0C  C0DB  F0DB         	movff	_timerTesteBombas,_timerTesteBombas
 19575  002C10  C0DC  F0DC         	movff	_timerTesteBombas+1,_timerTesteBombas+1
 19576  002C14  D005               	goto	i2l593
 19577  002C16                     i2l591:
 19578  002C16  FFFF               	dw	65535	; assembler added errata NOP
 19579                           
 19580                           ; BSR set to: 0
 19581                           
 19582                           ; BSR set to: 0
 19583  002C18  0E00               	movlw	0
 19584  002C1A  6FDC               	movwf	(_timerTesteBombas+1)& (0+255),b
 19585  002C1C  0E00               	movlw	0
 19586  002C1E  6FDB               	movwf	_timerTesteBombas& (0+255),b
 19587  002C20                     i2l593:
 19588  002C20  FFFF               	dw	65535	; assembler added errata NOP
 19589                           
 19590                           ; BSR set to: 0
 19591                           ;temporizador.h: 14: timerReenvioSMS = (timerReenvioSMS <= 0 ? 0 : --timerReenvioSMS);
 19592  002C22  51F6               	movf	_timerReenvioSMS& (0+255),w,b
 19593  002C24  B4D8               	btfsc	status,2,c
 19594  002C26  D005               	goto	i2l595
 19595                           
 19596                           ; BSR set to: 0
 19597  002C28  07F6               	decf	_timerReenvioSMS& (0+255),f,b
 19598  002C2A  C0F6  F00D         	movff	_timerReenvioSMS,_timer$1328
 19599  002C2E  6A0E               	clrf	_timer$1328+1,c
 19600  002C30  D005               	goto	i2l597
 19601  002C32                     i2l595:
 19602  002C32  FFFF               	dw	65535	; assembler added errata NOP
 19603                           
 19604                           ; BSR set to: 0
 19605                           
 19606                           ; BSR set to: 0
 19607  002C34  0E00               	movlw	0
 19608  002C36  6E0E               	movwf	_timer$1328+1,c
 19609  002C38  0E00               	movlw	0
 19610  002C3A  6E0D               	movwf	_timer$1328,c
 19611  002C3C                     i2l597:
 19612  002C3C  FFFF               	dw	65535	; assembler added errata NOP
 19613                           
 19614                           ; BSR set to: 0
 19615                           
 19616                           ; BSR set to: 0
 19617  002C3E  C00D  F0F6         	movff	_timer$1328,_timerReenvioSMS
 19618                           
 19619                           ;temporizador.h: 15: timerTrocarTextoLcd = (timerTrocarTextoLcd <= 0 ? 0 : --timerTrocar
      +                          TextoLcd);
 19620  002C42  5076               	movf	_timerTrocarTextoLcd,w,c
 19621  002C44  B4D8               	btfsc	status,2,c
 19622  002C46  D005               	goto	i2l599
 19623                           
 19624                           ; BSR set to: 0
 19625  002C48  0676               	decf	_timerTrocarTextoLcd,f,c
 19626  002C4A  C076  F00F         	movff	_timerTrocarTextoLcd,_timer$1329
 19627  002C4E  6A10               	clrf	_timer$1329+1,c
 19628  002C50  D005               	goto	i2l601
 19629  002C52                     i2l599:
 19630  002C52  FFFF               	dw	65535	; assembler added errata NOP
 19631                           
 19632                           ; BSR set to: 0
 19633                           
 19634                           ; BSR set to: 0
 19635  002C54  0E00               	movlw	0
 19636  002C56  6E10               	movwf	_timer$1329+1,c
 19637  002C58  0E00               	movlw	0
 19638  002C5A  6E0F               	movwf	_timer$1329,c
 19639  002C5C                     i2l601:
 19640  002C5C  FFFF               	dw	65535	; assembler added errata NOP
 19641                           
 19642                           ; BSR set to: 0
 19643                           
 19644                           ; BSR set to: 0
 19645  002C5E  C00F  F076         	movff	_timer$1329,_timerTrocarTextoLcd
 19646                           
 19647                           ;temporizador.h: 17: if(!timerTrocarTextoLcd){
 19648  002C62  5076               	movf	_timerTrocarTextoLcd,w,c
 19649  002C64  A4D8               	btfss	status,2,c
 19650  002C66  D00B               	goto	i2l602
 19651                           
 19652                           ; BSR set to: 0
 19653                           ;temporizador.h: 18: timerTrocarTextoLcd = 2;
 19654  002C68  0E02               	movlw	2
 19655  002C6A  6E76               	movwf	_timerTrocarTextoLcd,c
 19656                           
 19657                           ;temporizador.h: 19: flagTexto = !flagTexto;
 19658  002C6C  5075               	movf	_flagTexto,w,c
 19659  002C6E  A4D8               	btfss	status,2,c
 19660  002C70  D002               	goto	i2u760_40
 19661  002C72  0E01               	movlw	1
 19662  002C74  D002               	goto	i2u761_40
 19663  002C76                     i2u760_40:
 19664  002C76  FFFF               	dw	65535	; assembler added errata NOP
 19665  002C78  0E00               	movlw	0
 19666  002C7A                     i2u761_40:
 19667  002C7A  FFFF               	dw	65535	; assembler added errata NOP
 19668  002C7C  6E75               	movwf	_flagTexto,c
 19669  002C7E                     i2l602:
 19670  002C7E  FFFF               	dw	65535	; assembler added errata NOP
 19671                           
 19672                           ; BSR set to: 0
 19673                           ;temporizador.h: 20: }
 19674                           ;temporizador.h: 22: if (ajst_rtc) {
 19675  002C80  5068               	movf	_ajst_rtc,w,c
 19676  002C82  A4D8               	btfss	status,2,c
 19677  002C84  D056               	goto	i2l608
 19678                           
 19679                           ; BSR set to: 0
 19680                           ;temporizador.h: 24: }
 19681                           ;temporizador.h: 25: _sec++;
 19682                           
 19683                           ; BSR set to: 0
 19684                           
 19685                           ; BSR set to: 0
 19686                           ;temporizador.h: 23: return;
 19687  002C86  2BEF               	incf	__sec& (0+255),f,b
 19688                           
 19689                           ; BSR set to: 0
 19690                           ;temporizador.h: 26: if (_sec > 59) {
 19691  002C88  0E3B               	movlw	59
 19692  002C8A  65EF               	cpfsgt	__sec& (0+255),b
 19693  002C8C  D014               	goto	i2l607
 19694                           
 19695                           ; BSR set to: 0
 19696                           ;temporizador.h: 27: _sec = 0;
 19697  002C8E  0E00               	movlw	0
 19698  002C90  6FEF               	movwf	__sec& (0+255),b
 19699                           
 19700                           ; BSR set to: 0
 19701                           ;temporizador.h: 28: _min++;
 19702  002C92  2BEE               	incf	__min& (0+255),f,b
 19703                           
 19704                           ; BSR set to: 0
 19705                           ;temporizador.h: 29: if (_min > 59) {
 19706  002C94  0E3B               	movlw	59
 19707  002C96  65EE               	cpfsgt	__min& (0+255),b
 19708  002C98  D00E               	goto	i2l607
 19709                           
 19710                           ; BSR set to: 0
 19711                           ;temporizador.h: 30: _min = 0;
 19712  002C9A  0E00               	movlw	0
 19713  002C9C  6FEE               	movwf	__min& (0+255),b
 19714                           
 19715                           ; BSR set to: 0
 19716                           ;temporizador.h: 31: _hor++;
 19717  002C9E  2BED               	incf	__hor& (0+255),f,b
 19718                           
 19719                           ; BSR set to: 0
 19720                           ;temporizador.h: 32: if (_hor > 23) {
 19721  002CA0  0E17               	movlw	23
 19722  002CA2  65ED               	cpfsgt	__hor& (0+255),b
 19723  002CA4  D008               	goto	i2l607
 19724                           
 19725                           ; BSR set to: 0
 19726                           ;temporizador.h: 33: _hor = 0;
 19727  002CA6  0E00               	movlw	0
 19728  002CA8  6FED               	movwf	__hor& (0+255),b
 19729                           
 19730                           ; BSR set to: 0
 19731                           ;temporizador.h: 34: dias_restante_teste++;
 19732  002CAA  2BE8               	incf	_dias_restante_teste& (0+255),f,b
 19733                           
 19734                           ; BSR set to: 0
 19735                           ;temporizador.h: 35: writeEEPROM_ext(10, dias_restante_teste);
 19736  002CAC  C0E8  F004         	movff	_dias_restante_teste,i2writeEEPROM_ext@data
 19737  002CB0  0E0A               	movlw	10
 19738  002CB2  EC54  F038         	call	i2_writeEEPROM_ext
 19739  002CB6                     i2l607:
 19740  002CB6  FFFF               	dw	65535	; assembler added errata NOP
 19741                           
 19742                           ;temporizador.h: 36: }
 19743                           ;temporizador.h: 37: }
 19744                           ;temporizador.h: 38: }
 19745                           ;temporizador.h: 40: if (rtc.min != _min) {
 19746  002CB8  0100               	movlb	0	; () banked
 19747  002CBA  51EE               	movf	__min& (0+255),w,b
 19748  002CBC  187A               	xorwf	_rtc+2,w,c
 19749  002CBE  B4D8               	btfsc	status,2,c
 19750  002CC0  D038               	goto	i2l608
 19751                           
 19752                           ; BSR set to: 0
 19753                           ;temporizador.h: 42: if (flagEstacionariaLigada) {
 19754  002CC2  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 19755  002CC4  B4D8               	btfsc	status,2,c
 19756  002CC6  D009               	goto	i2l609
 19757                           
 19758                           ; BSR set to: 0
 19759                           ;temporizador.h: 43: horimetro++;
 19760  002CC8  4A4F               	infsnz	_horimetro,f,c
 19761  002CCA  2A50               	incf	_horimetro+1,f,c
 19762                           
 19763                           ; BSR set to: 0
 19764                           ;temporizador.h: 44: writeEEPROM16_ext(8, horimetro);
 19765  002CCC  C04F  F006         	movff	_horimetro,writeEEPROM16_ext@data
 19766  002CD0  C050  F007         	movff	_horimetro+1,writeEEPROM16_ext@data+1
 19767  002CD4  0E08               	movlw	8
 19768  002CD6  EC7C  F036         	call	_writeEEPROM16_ext
 19769  002CDA                     i2l609:
 19770  002CDA  FFFF               	dw	65535	; assembler added errata NOP
 19771                           
 19772                           ;temporizador.h: 45: }
 19773                           ;temporizador.h: 46: getDS1307TimeDate(&rtc);
 19774  002CDC  0E78               	movlw	low _rtc
 19775  002CDE  6E06               	movwf	i2getDS1307TimeDate@ptrToUserVal,c
 19776  002CE0  0E00               	movlw	high _rtc
 19777  002CE2  6E07               	movwf	i2getDS1307TimeDate@ptrToUserVal+1,c
 19778  002CE4  EC22  F01A         	call	i2_getDS1307TimeDate	;wreg free
 19779                           
 19780                           ;temporizador.h: 47: if ((rtc.sec > 60) && (rtc.min > 60) && (rtc.hour > 24)) {
 19781  002CE8  0E3C               	movlw	60
 19782  002CEA  6479               	cpfsgt	_rtc+1,c
 19783  002CEC  D015               	goto	i2l610
 19784  002CEE  0E3C               	movlw	60
 19785  002CF0  647A               	cpfsgt	_rtc+2,c
 19786  002CF2  D012               	goto	i2l610
 19787  002CF4  0E18               	movlw	24
 19788  002CF6  647B               	cpfsgt	_rtc+3,c
 19789  002CF8  D00F               	goto	i2l610
 19790                           
 19791                           ;temporizador.h: 49: RTC_Init();
 19792  002CFA  EC26  F037         	call	i2_RTC_Init	;wreg free
 19793                           
 19794                           ;temporizador.h: 50: rtc.sec = _sec;
 19795  002CFE  C0EF  F079         	movff	__sec,_rtc+1
 19796                           
 19797                           ;temporizador.h: 51: rtc.min = _min;
 19798  002D02  C0EE  F07A         	movff	__min,_rtc+2
 19799                           
 19800                           ;temporizador.h: 52: rtc.hour = _hor;
 19801  002D06  C0ED  F07B         	movff	__hor,_rtc+3
 19802                           
 19803                           ;temporizador.h: 53: rtc.date = _dia;
 19804  002D0A  C0EC  F07C         	movff	__dia,_rtc+4
 19805                           
 19806                           ;temporizador.h: 54: rtc.month = _mes;
 19807  002D0E  C0EB  F07D         	movff	__mes,_rtc+5
 19808                           
 19809                           ;temporizador.h: 55: rtc.year = _ano;
 19810  002D12  C0EA  F07E         	movff	__ano,_rtc+6
 19811                           
 19812                           ;temporizador.h: 56: return;
 19813  002D16  D00D               	goto	i2l608
 19814  002D18                     i2l610:
 19815  002D18  FFFF               	dw	65535	; assembler added errata NOP
 19816                           
 19817                           ;temporizador.h: 57: }
 19818                           ;temporizador.h: 58: _sec = rtc.sec;
 19819  002D1A  C079  F0EF         	movff	_rtc+1,__sec
 19820                           
 19821                           ;temporizador.h: 59: _min = rtc.min;
 19822  002D1E  C07A  F0EE         	movff	_rtc+2,__min
 19823                           
 19824                           ;temporizador.h: 60: _hor = rtc.hour;
 19825  002D22  C07B  F0ED         	movff	_rtc+3,__hor
 19826                           
 19827                           ;temporizador.h: 61: _dia = rtc.date;
 19828  002D26  C07C  F0EC         	movff	_rtc+4,__dia
 19829                           
 19830                           ;temporizador.h: 62: _mes = rtc.month;
 19831  002D2A  C07D  F0EB         	movff	_rtc+5,__mes
 19832                           
 19833                           ;temporizador.h: 63: _ano = rtc.year;
 19834  002D2E  C07E  F0EA         	movff	_rtc+6,__ano
 19835  002D32                     i2l608:
 19836  002D32  FFFF               	dw	65535	; assembler added errata NOP
 19837  002D34  0012               	return		;funcret
 19838  002D36  FFFF               	dw	65535	; errata NOP
 19839  002D38                     __end_of_timer:
 19840                           	opt stack 0
 19841                           tosu	equ	0xFFF
 19842                           tosh	equ	0xFFE
 19843                           tosl	equ	0xFFD
 19844                           pclatu	equ	0xFFB
 19845                           pclath	equ	0xFFA
 19846                           tblptru	equ	0xFF8
 19847                           tblptrh	equ	0xFF7
 19848                           tblptrl	equ	0xFF6
 19849                           tablat	equ	0xFF5
 19850                           prodh	equ	0xFF4
 19851                           prodl	equ	0xFF3
 19852                           intcon	equ	0xFF2
 19853                           indf0	equ	0xFEF
 19854                           postinc0	equ	0xFEE
 19855                           fsr0h	equ	0xFEA
 19856                           fsr0l	equ	0xFE9
 19857                           wreg	equ	0xFE8
 19858                           postdec1	equ	0xFE5
 19859                           fsr1h	equ	0xFE2
 19860                           fsr1l	equ	0xFE1
 19861                           indf2	equ	0xFDF
 19862                           postinc2	equ	0xFDE
 19863                           postdec2	equ	0xFDD
 19864                           fsr2h	equ	0xFDA
 19865                           fsr2l	equ	0xFD9
 19866                           status	equ	0xFD8
 19867                           
 19868 ;; *************** function i2_getDS1307TimeDate *****************
 19869 ;; Defined at:
 19870 ;;		line 52 in file "ds1307.h"
 19871 ;; Parameters:    Size  Location     Type
 19872 ;;  ptrToUserVal    2    5[COMRAM] PTR struct .
 19873 ;;		 -> rtc(7), 
 19874 ;; Auto vars:     Size  Location     Type
 19875 ;;		None
 19876 ;; Return value:  Size  Location     Type
 19877 ;;                  1    wreg      void 
 19878 ;; Registers used:
 19879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19880 ;; Tracked objects:
 19881 ;;		On entry : 0/0
 19882 ;;		On exit  : 0/0
 19883 ;;		Unchanged: 0/0
 19884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19885 ;;      Params:         2       0       0       0       0       0       0
 19886 ;;      Locals:         0       0       0       0       0       0       0
 19887 ;;      Temps:          0       0       0       0       0       0       0
 19888 ;;      Totals:         2       0       0       0       0       0       0
 19889 ;;Total ram usage:        2 bytes
 19890 ;; Hardware stack levels used:    1
 19891 ;; Hardware stack levels required when called:    2
 19892 ;; This function calls:
 19893 ;;		i2_BCDtoDEC
 19894 ;;		i2_I2C_Read
 19895 ;;		i2_I2C_Restart
 19896 ;;		i2_I2C_Start
 19897 ;;		i2_I2C_Stop
 19898 ;;		i2_I2C_Write
 19899 ;; This function is called by:
 19900 ;;		_timer
 19901 ;; This function uses a non-reentrant model
 19902 ;;
 19903                           
 19904                           	psect	text75
 19905  003444                     __ptext75:
 19906                           	opt stack 0
 19907  003444                     i2_getDS1307TimeDate:
 19908                           	opt stack 0
 19909  003444  FFFF               	dw	65535	; assembler added errata NOP
 19910                           
 19911                           ;ds1307.h: 54: I2C_Start();
 19912                           
 19913                           ;incstack = 0
 19914  003446  ECFF  F035         	call	i2_I2C_Start	;wreg free
 19915                           
 19916                           ;ds1307.h: 55: I2C_Write(0xD0);
 19917  00344A  0E00               	movlw	0
 19918  00344C  6E03               	movwf	i2I2C_Write@d+1,c
 19919  00344E  0ED0               	movlw	208
 19920  003450  6E02               	movwf	i2I2C_Write@d,c
 19921  003452  EC23  F036         	call	i2_I2C_Write	;wreg free
 19922                           
 19923                           ;ds1307.h: 56: I2C_Write(0x00);
 19924  003456  0E00               	movlw	0
 19925  003458  6E03               	movwf	i2I2C_Write@d+1,c
 19926  00345A  0E00               	movlw	0
 19927  00345C  6E02               	movwf	i2I2C_Write@d,c
 19928  00345E  EC23  F036         	call	i2_I2C_Write	;wreg free
 19929                           
 19930                           ;ds1307.h: 57: I2C_Restart();
 19931  003462  EC0B  F036         	call	i2_I2C_Restart	;wreg free
 19932                           
 19933                           ;ds1307.h: 58: I2C_Write(0xD1);
 19934  003466  0E00               	movlw	0
 19935  003468  6E03               	movwf	i2I2C_Write@d+1,c
 19936  00346A  0ED1               	movlw	209
 19937  00346C  6E02               	movwf	i2I2C_Write@d,c
 19938  00346E  EC23  F036         	call	i2_I2C_Write	;wreg free
 19939                           
 19940                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
 19941  003472  EE20 F001          	lfsr	2,1
 19942  003476  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19943  003478  26D9               	addwf	fsr2l,f,c
 19944  00347A  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19945  00347C  22DA               	addwfc	fsr2h,f,c
 19946  00347E  0E00               	movlw	0
 19947  003480  6E03               	movwf	i2I2C_Read@a+1,c
 19948  003482  0E01               	movlw	1
 19949  003484  6E02               	movwf	i2I2C_Read@a,c
 19950  003486  EC59  F037         	call	i2_I2C_Read	;wreg free
 19951  00348A  5002               	movf	?i2_I2C_Read,w,c
 19952  00348C  EC4B  F036         	call	i2_BCDtoDEC
 19953  003490  6EDF               	movwf	indf2,c
 19954                           
 19955                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
 19956  003492  EE20 F002          	lfsr	2,2
 19957  003496  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19958  003498  26D9               	addwf	fsr2l,f,c
 19959  00349A  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19960  00349C  22DA               	addwfc	fsr2h,f,c
 19961  00349E  0E00               	movlw	0
 19962  0034A0  6E03               	movwf	i2I2C_Read@a+1,c
 19963  0034A2  0E01               	movlw	1
 19964  0034A4  6E02               	movwf	i2I2C_Read@a,c
 19965  0034A6  EC59  F037         	call	i2_I2C_Read	;wreg free
 19966  0034AA  5002               	movf	?i2_I2C_Read,w,c
 19967  0034AC  EC4B  F036         	call	i2_BCDtoDEC
 19968  0034B0  6EDF               	movwf	indf2,c
 19969                           
 19970                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
 19971  0034B2  EE20 F003          	lfsr	2,3
 19972  0034B6  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 19973  0034B8  26D9               	addwf	fsr2l,f,c
 19974  0034BA  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 19975  0034BC  22DA               	addwfc	fsr2h,f,c
 19976  0034BE  0E00               	movlw	0
 19977  0034C0  6E03               	movwf	i2I2C_Read@a+1,c
 19978  0034C2  0E01               	movlw	1
 19979  0034C4  6E02               	movwf	i2I2C_Read@a,c
 19980  0034C6  EC59  F037         	call	i2_I2C_Read	;wreg free
 19981  0034CA  5002               	movf	?i2_I2C_Read,w,c
 19982  0034CC  EC4B  F036         	call	i2_BCDtoDEC
 19983  0034D0  6EDF               	movwf	indf2,c
 19984                           
 19985                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
 19986  0034D2  0E00               	movlw	0
 19987  0034D4  6E03               	movwf	i2I2C_Read@a+1,c
 19988  0034D6  0E01               	movlw	1
 19989  0034D8  6E02               	movwf	i2I2C_Read@a,c
 19990  0034DA  EC59  F037         	call	i2_I2C_Read	;wreg free
 19991  0034DE  5002               	movf	?i2_I2C_Read,w,c
 19992  0034E0  EC4B  F036         	call	i2_BCDtoDEC
 19993  0034E4  C006  FFD9         	movff	i2getDS1307TimeDate@ptrToUserVal,fsr2l
 19994  0034E8  C007  FFDA         	movff	i2getDS1307TimeDate@ptrToUserVal+1,fsr2h
 19995  0034EC  6EDF               	movwf	indf2,c
 19996                           
 19997                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
 19998  0034EE  EE20 F004          	lfsr	2,4
 19999  0034F2  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 20000  0034F4  26D9               	addwf	fsr2l,f,c
 20001  0034F6  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 20002  0034F8  22DA               	addwfc	fsr2h,f,c
 20003  0034FA  0E00               	movlw	0
 20004  0034FC  6E03               	movwf	i2I2C_Read@a+1,c
 20005  0034FE  0E01               	movlw	1
 20006  003500  6E02               	movwf	i2I2C_Read@a,c
 20007  003502  EC59  F037         	call	i2_I2C_Read	;wreg free
 20008  003506  5002               	movf	?i2_I2C_Read,w,c
 20009  003508  EC4B  F036         	call	i2_BCDtoDEC
 20010  00350C  6EDF               	movwf	indf2,c
 20011                           
 20012                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
 20013  00350E  EE20 F005          	lfsr	2,5
 20014  003512  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 20015  003514  26D9               	addwf	fsr2l,f,c
 20016  003516  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 20017  003518  22DA               	addwfc	fsr2h,f,c
 20018  00351A  0E00               	movlw	0
 20019  00351C  6E03               	movwf	i2I2C_Read@a+1,c
 20020  00351E  0E01               	movlw	1
 20021  003520  6E02               	movwf	i2I2C_Read@a,c
 20022  003522  EC59  F037         	call	i2_I2C_Read	;wreg free
 20023  003526  5002               	movf	?i2_I2C_Read,w,c
 20024  003528  EC4B  F036         	call	i2_BCDtoDEC
 20025  00352C  6EDF               	movwf	indf2,c
 20026                           
 20027                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
 20028  00352E  EE20 F006          	lfsr	2,6
 20029  003532  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 20030  003534  26D9               	addwf	fsr2l,f,c
 20031  003536  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 20032  003538  22DA               	addwfc	fsr2h,f,c
 20033  00353A  0E00               	movlw	0
 20034  00353C  6E03               	movwf	i2I2C_Read@a+1,c
 20035  00353E  0E00               	movlw	0
 20036  003540  6E02               	movwf	i2I2C_Read@a,c
 20037  003542  EC59  F037         	call	i2_I2C_Read	;wreg free
 20038  003546  5002               	movf	?i2_I2C_Read,w,c
 20039  003548  EC4B  F036         	call	i2_BCDtoDEC
 20040  00354C  6EDF               	movwf	indf2,c
 20041                           
 20042                           ;ds1307.h: 66: I2C_Stop();
 20043  00354E  EC05  F036         	call	i2_I2C_Stop	;wreg free
 20044  003552  0012               	return		;funcret
 20045  003554  FFFF               	dw	65535	; errata NOP
 20046  003556                     __end_ofi2_getDS1307TimeDate:
 20047                           	opt stack 0
 20048                           tosu	equ	0xFFF
 20049                           tosh	equ	0xFFE
 20050                           tosl	equ	0xFFD
 20051                           pclatu	equ	0xFFB
 20052                           pclath	equ	0xFFA
 20053                           tblptru	equ	0xFF8
 20054                           tblptrh	equ	0xFF7
 20055                           tblptrl	equ	0xFF6
 20056                           tablat	equ	0xFF5
 20057                           prodh	equ	0xFF4
 20058                           prodl	equ	0xFF3
 20059                           intcon	equ	0xFF2
 20060                           indf0	equ	0xFEF
 20061                           postinc0	equ	0xFEE
 20062                           fsr0h	equ	0xFEA
 20063                           fsr0l	equ	0xFE9
 20064                           wreg	equ	0xFE8
 20065                           postdec1	equ	0xFE5
 20066                           fsr1h	equ	0xFE2
 20067                           fsr1l	equ	0xFE1
 20068                           indf2	equ	0xFDF
 20069                           postinc2	equ	0xFDE
 20070                           postdec2	equ	0xFDD
 20071                           fsr2h	equ	0xFDA
 20072                           fsr2l	equ	0xFD9
 20073                           status	equ	0xFD8
 20074                           
 20075 ;; *************** function i2_I2C_Restart *****************
 20076 ;; Defined at:
 20077 ;;		line 31 in file "I2C.c"
 20078 ;; Parameters:    Size  Location     Type
 20079 ;;		None
 20080 ;; Auto vars:     Size  Location     Type
 20081 ;;		None
 20082 ;; Return value:  Size  Location     Type
 20083 ;;                  1    wreg      void 
 20084 ;; Registers used:
 20085 ;;		wreg, status,2, status,0, cstack
 20086 ;; Tracked objects:
 20087 ;;		On entry : 0/0
 20088 ;;		On exit  : 0/0
 20089 ;;		Unchanged: 0/0
 20090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20091 ;;      Params:         0       0       0       0       0       0       0
 20092 ;;      Locals:         0       0       0       0       0       0       0
 20093 ;;      Temps:          0       0       0       0       0       0       0
 20094 ;;      Totals:         0       0       0       0       0       0       0
 20095 ;;Total ram usage:        0 bytes
 20096 ;; Hardware stack levels used:    1
 20097 ;; Hardware stack levels required when called:    1
 20098 ;; This function calls:
 20099 ;;		i2_I2C_Wait
 20100 ;; This function is called by:
 20101 ;;		i2_getDS1307TimeDate
 20102 ;; This function uses a non-reentrant model
 20103 ;;
 20104                           
 20105                           	psect	text76
 20106  006C16                     __ptext76:
 20107                           	opt stack 0
 20108  006C16                     i2_I2C_Restart:
 20109                           	opt stack 0
 20110  006C16  FFFF               	dw	65535	; assembler added errata NOP
 20111                           
 20112                           ;I2C.c: 32: I2C_Wait();
 20113                           
 20114                           ;incstack = 0
 20115  006C18  EC56  F036         	call	i2_I2C_Wait	;wreg free
 20116                           
 20117                           ;I2C.c: 33: RSEN = 1;
 20118  006C1C  82C5               	bsf	4037,1,c	;volatile
 20119  006C1E  0012               	return		;funcret
 20120  006C20  FFFF               	dw	65535	; errata NOP
 20121  006C22                     __end_ofi2_I2C_Restart:
 20122                           	opt stack 0
 20123                           tosu	equ	0xFFF
 20124                           tosh	equ	0xFFE
 20125                           tosl	equ	0xFFD
 20126                           pclatu	equ	0xFFB
 20127                           pclath	equ	0xFFA
 20128                           tblptru	equ	0xFF8
 20129                           tblptrh	equ	0xFF7
 20130                           tblptrl	equ	0xFF6
 20131                           tablat	equ	0xFF5
 20132                           prodh	equ	0xFF4
 20133                           prodl	equ	0xFF3
 20134                           intcon	equ	0xFF2
 20135                           indf0	equ	0xFEF
 20136                           postinc0	equ	0xFEE
 20137                           fsr0h	equ	0xFEA
 20138                           fsr0l	equ	0xFE9
 20139                           wreg	equ	0xFE8
 20140                           postdec1	equ	0xFE5
 20141                           fsr1h	equ	0xFE2
 20142                           fsr1l	equ	0xFE1
 20143                           indf2	equ	0xFDF
 20144                           postinc2	equ	0xFDE
 20145                           postdec2	equ	0xFDD
 20146                           fsr2h	equ	0xFDA
 20147                           fsr2l	equ	0xFD9
 20148                           status	equ	0xFD8
 20149                           
 20150 ;; *************** function i2_I2C_Read *****************
 20151 ;; Defined at:
 20152 ;;		line 47 in file "I2C.c"
 20153 ;; Parameters:    Size  Location     Type
 20154 ;;  a               2    1[COMRAM] unsigned short 
 20155 ;; Auto vars:     Size  Location     Type
 20156 ;;  I2C_Read        2    3[COMRAM] unsigned short 
 20157 ;; Return value:  Size  Location     Type
 20158 ;;                  2    1[COMRAM] unsigned short 
 20159 ;; Registers used:
 20160 ;;		wreg, status,2, status,0, cstack
 20161 ;; Tracked objects:
 20162 ;;		On entry : 0/0
 20163 ;;		On exit  : 0/0
 20164 ;;		Unchanged: 0/0
 20165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20166 ;;      Params:         2       0       0       0       0       0       0
 20167 ;;      Locals:         2       0       0       0       0       0       0
 20168 ;;      Temps:          0       0       0       0       0       0       0
 20169 ;;      Totals:         4       0       0       0       0       0       0
 20170 ;;Total ram usage:        4 bytes
 20171 ;; Hardware stack levels used:    1
 20172 ;; Hardware stack levels required when called:    1
 20173 ;; This function calls:
 20174 ;;		i2_I2C_Wait
 20175 ;; This function is called by:
 20176 ;;		i2_getDS1307TimeDate
 20177 ;; This function uses a non-reentrant model
 20178 ;;
 20179                           
 20180                           	psect	text77
 20181  006EB2                     __ptext77:
 20182                           	opt stack 0
 20183  006EB2                     i2_I2C_Read:
 20184                           	opt stack 0
 20185  006EB2  FFFF               	dw	65535	; assembler added errata NOP
 20186                           
 20187                           ;I2C.c: 48: unsigned short temp;
 20188                           ;I2C.c: 49: I2C_Wait();
 20189                           
 20190                           ;incstack = 0
 20191  006EB4  EC56  F036         	call	i2_I2C_Wait	;wreg free
 20192                           
 20193                           ;I2C.c: 50: RCEN = 1;
 20194  006EB8  86C5               	bsf	4037,3,c	;volatile
 20195                           
 20196                           ;I2C.c: 51: I2C_Wait();
 20197  006EBA  EC56  F036         	call	i2_I2C_Wait	;wreg free
 20198                           
 20199                           ;I2C.c: 52: temp = SSPBUF;
 20200  006EBE  CFC9 F004          	movff	4041,i2I2C_Read@temp	;volatile
 20201  006EC2  6A05               	clrf	i2I2C_Read@temp+1,c
 20202                           
 20203                           ;I2C.c: 53: I2C_Wait();
 20204  006EC4  EC56  F036         	call	i2_I2C_Wait	;wreg free
 20205                           
 20206                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 20207  006EC8  5002               	movf	i2I2C_Read@a,w,c
 20208  006ECA  1003               	iorwf	i2I2C_Read@a+1,w,c
 20209  006ECC  A4D8               	btfss	status,2,c
 20210  006ECE  D002               	goto	i2u560_40
 20211  006ED0  8AC5               	bsf	4037,5,c	;volatile
 20212  006ED2  D002               	goto	i2u561_45
 20213  006ED4                     i2u560_40:
 20214  006ED4  FFFF               	dw	65535	; assembler added errata NOP
 20215  006ED6  9AC5               	bcf	4037,5,c	;volatile
 20216  006ED8                     i2u561_45:
 20217  006ED8  FFFF               	dw	65535	; assembler added errata NOP
 20218                           
 20219                           ;I2C.c: 55: ACKEN = 1;
 20220  006EDA  88C5               	bsf	4037,4,c	;volatile
 20221                           
 20222                           ;I2C.c: 56: return temp;
 20223  006EDC  C004  F002         	movff	i2I2C_Read@temp,?i2_I2C_Read
 20224  006EE0  C005  F003         	movff	i2I2C_Read@temp+1,?i2_I2C_Read+1
 20225  006EE4  0012               	return		;funcret
 20226  006EE6  FFFF               	dw	65535	; errata NOP
 20227  006EE8                     __end_ofi2_I2C_Read:
 20228                           	opt stack 0
 20229                           tosu	equ	0xFFF
 20230                           tosh	equ	0xFFE
 20231                           tosl	equ	0xFFD
 20232                           pclatu	equ	0xFFB
 20233                           pclath	equ	0xFFA
 20234                           tblptru	equ	0xFF8
 20235                           tblptrh	equ	0xFF7
 20236                           tblptrl	equ	0xFF6
 20237                           tablat	equ	0xFF5
 20238                           prodh	equ	0xFF4
 20239                           prodl	equ	0xFF3
 20240                           intcon	equ	0xFF2
 20241                           indf0	equ	0xFEF
 20242                           postinc0	equ	0xFEE
 20243                           fsr0h	equ	0xFEA
 20244                           fsr0l	equ	0xFE9
 20245                           wreg	equ	0xFE8
 20246                           postdec1	equ	0xFE5
 20247                           fsr1h	equ	0xFE2
 20248                           fsr1l	equ	0xFE1
 20249                           indf2	equ	0xFDF
 20250                           postinc2	equ	0xFDE
 20251                           postdec2	equ	0xFDD
 20252                           fsr2h	equ	0xFDA
 20253                           fsr2l	equ	0xFD9
 20254                           status	equ	0xFD8
 20255                           
 20256 ;; *************** function i2_BCDtoDEC *****************
 20257 ;; Defined at:
 20258 ;;		line 34 in file "function.c"
 20259 ;; Parameters:    Size  Location     Type
 20260 ;;  val             1    wreg     unsigned char 
 20261 ;; Auto vars:     Size  Location     Type
 20262 ;;  val             1    0[COMRAM] unsigned char 
 20263 ;; Return value:  Size  Location     Type
 20264 ;;                  1    wreg      unsigned char 
 20265 ;; Registers used:
 20266 ;;		wreg, status,2, status,0, prodl, prodh
 20267 ;; Tracked objects:
 20268 ;;		On entry : 0/0
 20269 ;;		On exit  : 0/0
 20270 ;;		Unchanged: 0/0
 20271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20272 ;;      Params:         0       0       0       0       0       0       0
 20273 ;;      Locals:         1       0       0       0       0       0       0
 20274 ;;      Temps:          0       0       0       0       0       0       0
 20275 ;;      Totals:         1       0       0       0       0       0       0
 20276 ;;Total ram usage:        1 bytes
 20277 ;; Hardware stack levels used:    1
 20278 ;; This function calls:
 20279 ;;		Nothing
 20280 ;; This function is called by:
 20281 ;;		i2_getDS1307TimeDate
 20282 ;; This function uses a non-reentrant model
 20283 ;;
 20284                           
 20285                           	psect	text78
 20286  006C96                     __ptext78:
 20287                           	opt stack 0
 20288  006C96                     i2_BCDtoDEC:
 20289                           	opt stack 0
 20290  006C96  FFFF               	dw	65535	; assembler added errata NOP
 20291                           
 20292                           ;incstack = 0
 20293                           ;i2BCDtoDEC@val stored from wreg
 20294  006C98  6E01               	movwf	i2BCDtoDEC@val,c
 20295                           
 20296                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
 20297  006C9A  3801               	swapf	i2BCDtoDEC@val,w,c
 20298  006C9C  0B0F               	andlw	15
 20299  006C9E  0B0F               	andlw	15
 20300  006CA0  0D0A               	mullw	10
 20301  006CA2  5001               	movf	i2BCDtoDEC@val,w,c
 20302  006CA4  0B0F               	andlw	15
 20303  006CA6  24F3               	addwf	prodl,w,c
 20304  006CA8  0012               	return		;funcret
 20305  006CAA  FFFF               	dw	65535	; errata NOP
 20306  006CAC                     __end_ofi2_BCDtoDEC:
 20307                           	opt stack 0
 20308                           tosu	equ	0xFFF
 20309                           tosh	equ	0xFFE
 20310                           tosl	equ	0xFFD
 20311                           pclatu	equ	0xFFB
 20312                           pclath	equ	0xFFA
 20313                           tblptru	equ	0xFF8
 20314                           tblptrh	equ	0xFF7
 20315                           tblptrl	equ	0xFF6
 20316                           tablat	equ	0xFF5
 20317                           prodh	equ	0xFF4
 20318                           prodl	equ	0xFF3
 20319                           intcon	equ	0xFF2
 20320                           indf0	equ	0xFEF
 20321                           postinc0	equ	0xFEE
 20322                           fsr0h	equ	0xFEA
 20323                           fsr0l	equ	0xFE9
 20324                           wreg	equ	0xFE8
 20325                           postdec1	equ	0xFE5
 20326                           fsr1h	equ	0xFE2
 20327                           fsr1l	equ	0xFE1
 20328                           indf2	equ	0xFDF
 20329                           postinc2	equ	0xFDE
 20330                           postdec2	equ	0xFDD
 20331                           fsr2h	equ	0xFDA
 20332                           fsr2l	equ	0xFD9
 20333                           status	equ	0xFD8
 20334                           
 20335 ;; *************** function i2_RTC_Init *****************
 20336 ;; Defined at:
 20337 ;;		line 98 in file "ds1307.h"
 20338 ;; Parameters:    Size  Location     Type
 20339 ;;		None
 20340 ;; Auto vars:     Size  Location     Type
 20341 ;;		None
 20342 ;; Return value:  Size  Location     Type
 20343 ;;                  1    wreg      void 
 20344 ;; Registers used:
 20345 ;;		wreg, status,2, status,0, cstack
 20346 ;; Tracked objects:
 20347 ;;		On entry : 0/0
 20348 ;;		On exit  : 0/0
 20349 ;;		Unchanged: 0/0
 20350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20351 ;;      Params:         0       0       0       0       0       0       0
 20352 ;;      Locals:         0       0       0       0       0       0       0
 20353 ;;      Temps:          0       0       0       0       0       0       0
 20354 ;;      Totals:         0       0       0       0       0       0       0
 20355 ;;Total ram usage:        0 bytes
 20356 ;; Hardware stack levels used:    1
 20357 ;; Hardware stack levels required when called:    2
 20358 ;; This function calls:
 20359 ;;		i2_I2C_Start
 20360 ;;		i2_I2C_Stop
 20361 ;;		i2_I2C_Write
 20362 ;; This function is called by:
 20363 ;;		_timer
 20364 ;; This function uses a non-reentrant model
 20365 ;;
 20366                           
 20367                           	psect	text79
 20368  006E4C                     __ptext79:
 20369                           	opt stack 0
 20370  006E4C                     i2_RTC_Init:
 20371                           	opt stack 0
 20372  006E4C  FFFF               	dw	65535	; assembler added errata NOP
 20373                           
 20374                           ;ds1307.h: 100: I2C_Start();
 20375                           
 20376                           ;incstack = 0
 20377  006E4E  ECFF  F035         	call	i2_I2C_Start	;wreg free
 20378                           
 20379                           ;ds1307.h: 101: I2C_Write(0xD0);
 20380  006E52  0E00               	movlw	0
 20381  006E54  6E03               	movwf	i2I2C_Write@d+1,c
 20382  006E56  0ED0               	movlw	208
 20383  006E58  6E02               	movwf	i2I2C_Write@d,c
 20384  006E5A  EC23  F036         	call	i2_I2C_Write	;wreg free
 20385                           
 20386                           ;ds1307.h: 102: I2C_Write(0x07);
 20387  006E5E  0E00               	movlw	0
 20388  006E60  6E03               	movwf	i2I2C_Write@d+1,c
 20389  006E62  0E07               	movlw	7
 20390  006E64  6E02               	movwf	i2I2C_Write@d,c
 20391  006E66  EC23  F036         	call	i2_I2C_Write	;wreg free
 20392                           
 20393                           ;ds1307.h: 103: I2C_Write(0x00);
 20394  006E6A  0E00               	movlw	0
 20395  006E6C  6E03               	movwf	i2I2C_Write@d+1,c
 20396  006E6E  0E00               	movlw	0
 20397  006E70  6E02               	movwf	i2I2C_Write@d,c
 20398  006E72  EC23  F036         	call	i2_I2C_Write	;wreg free
 20399                           
 20400                           ;ds1307.h: 104: I2C_Stop();
 20401  006E76  EC05  F036         	call	i2_I2C_Stop	;wreg free
 20402  006E7A  0012               	return		;funcret
 20403  006E7C  FFFF               	dw	65535	; errata NOP
 20404  006E7E                     __end_ofi2_RTC_Init:
 20405                           	opt stack 0
 20406                           tosu	equ	0xFFF
 20407                           tosh	equ	0xFFE
 20408                           tosl	equ	0xFFD
 20409                           pclatu	equ	0xFFB
 20410                           pclath	equ	0xFFA
 20411                           tblptru	equ	0xFF8
 20412                           tblptrh	equ	0xFF7
 20413                           tblptrl	equ	0xFF6
 20414                           tablat	equ	0xFF5
 20415                           prodh	equ	0xFF4
 20416                           prodl	equ	0xFF3
 20417                           intcon	equ	0xFF2
 20418                           indf0	equ	0xFEF
 20419                           postinc0	equ	0xFEE
 20420                           fsr0h	equ	0xFEA
 20421                           fsr0l	equ	0xFE9
 20422                           wreg	equ	0xFE8
 20423                           postdec1	equ	0xFE5
 20424                           fsr1h	equ	0xFE2
 20425                           fsr1l	equ	0xFE1
 20426                           indf2	equ	0xFDF
 20427                           postinc2	equ	0xFDE
 20428                           postdec2	equ	0xFDD
 20429                           fsr2h	equ	0xFDA
 20430                           fsr2l	equ	0xFD9
 20431                           status	equ	0xFD8
 20432                           
 20433 ;; *************** function _writeEEPROM16_ext *****************
 20434 ;; Defined at:
 20435 ;;		line 40 in file "eeprom.h"
 20436 ;; Parameters:    Size  Location     Type
 20437 ;;  adress          1    wreg     unsigned char 
 20438 ;;  data            2    5[COMRAM] unsigned int 
 20439 ;; Auto vars:     Size  Location     Type
 20440 ;;  adress          1    7[COMRAM] unsigned char 
 20441 ;; Return value:  Size  Location     Type
 20442 ;;                  1    wreg      void 
 20443 ;; Registers used:
 20444 ;;		wreg, status,2, status,0, cstack
 20445 ;; Tracked objects:
 20446 ;;		On entry : 0/0
 20447 ;;		On exit  : 0/0
 20448 ;;		Unchanged: 0/0
 20449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20450 ;;      Params:         2       0       0       0       0       0       0
 20451 ;;      Locals:         1       0       0       0       0       0       0
 20452 ;;      Temps:          0       0       0       0       0       0       0
 20453 ;;      Totals:         3       0       0       0       0       0       0
 20454 ;;Total ram usage:        3 bytes
 20455 ;; Hardware stack levels used:    1
 20456 ;; Hardware stack levels required when called:    3
 20457 ;; This function calls:
 20458 ;;		i2_writeEEPROM_ext
 20459 ;; This function is called by:
 20460 ;;		_timer
 20461 ;; This function uses a non-reentrant model
 20462 ;;
 20463                           
 20464                           	psect	text80
 20465  006CF8                     __ptext80:
 20466                           	opt stack 0
 20467  006CF8                     _writeEEPROM16_ext:
 20468                           	opt stack 0
 20469  006CF8  FFFF               	dw	65535	; assembler added errata NOP
 20470                           
 20471                           ;incstack = 0
 20472                           ;writeEEPROM16_ext@adress stored from wreg
 20473  006CFA  6E08               	movwf	writeEEPROM16_ext@adress,c
 20474                           
 20475                           ;eeprom.h: 41: writeEEPROM_ext(adress, data);
 20476  006CFC  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 20477  006D00  5008               	movf	writeEEPROM16_ext@adress,w,c
 20478  006D02  EC54  F038         	call	i2_writeEEPROM_ext
 20479                           
 20480                           ;eeprom.h: 42: data>> = 8;
 20481  006D06  5007               	movf	writeEEPROM16_ext@data+1,w,c
 20482  006D08  6E06               	movwf	writeEEPROM16_ext@data,c
 20483  006D0A  6A07               	clrf	writeEEPROM16_ext@data+1,c
 20484                           
 20485                           ;eeprom.h: 43: writeEEPROM_ext(adress + 1, data);
 20486  006D0C  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 20487  006D10  2808               	incf	writeEEPROM16_ext@adress,w,c
 20488  006D12  EC54  F038         	call	i2_writeEEPROM_ext
 20489  006D16  0012               	return		;funcret
 20490  006D18  FFFF               	dw	65535	; errata NOP
 20491  006D1A                     __end_of_writeEEPROM16_ext:
 20492                           	opt stack 0
 20493                           tosu	equ	0xFFF
 20494                           tosh	equ	0xFFE
 20495                           tosl	equ	0xFFD
 20496                           pclatu	equ	0xFFB
 20497                           pclath	equ	0xFFA
 20498                           tblptru	equ	0xFF8
 20499                           tblptrh	equ	0xFF7
 20500                           tblptrl	equ	0xFF6
 20501                           tablat	equ	0xFF5
 20502                           prodh	equ	0xFF4
 20503                           prodl	equ	0xFF3
 20504                           intcon	equ	0xFF2
 20505                           indf0	equ	0xFEF
 20506                           postinc0	equ	0xFEE
 20507                           fsr0h	equ	0xFEA
 20508                           fsr0l	equ	0xFE9
 20509                           wreg	equ	0xFE8
 20510                           postdec1	equ	0xFE5
 20511                           fsr1h	equ	0xFE2
 20512                           fsr1l	equ	0xFE1
 20513                           indf2	equ	0xFDF
 20514                           postinc2	equ	0xFDE
 20515                           postdec2	equ	0xFDD
 20516                           fsr2h	equ	0xFDA
 20517                           fsr2l	equ	0xFD9
 20518                           status	equ	0xFD8
 20519                           
 20520 ;; *************** function i2_writeEEPROM_ext *****************
 20521 ;; Defined at:
 20522 ;;		line 13 in file "eeprom.h"
 20523 ;; Parameters:    Size  Location     Type
 20524 ;;  adress          1    wreg     unsigned char 
 20525 ;;  data            1    3[COMRAM] unsigned char 
 20526 ;; Auto vars:     Size  Location     Type
 20527 ;;  adress          1    4[COMRAM] unsigned char 
 20528 ;; Return value:  Size  Location     Type
 20529 ;;                  1    wreg      void 
 20530 ;; Registers used:
 20531 ;;		wreg, status,2, status,0, cstack
 20532 ;; Tracked objects:
 20533 ;;		On entry : 0/0
 20534 ;;		On exit  : 0/0
 20535 ;;		Unchanged: 0/0
 20536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20537 ;;      Params:         1       0       0       0       0       0       0
 20538 ;;      Locals:         1       0       0       0       0       0       0
 20539 ;;      Temps:          0       0       0       0       0       0       0
 20540 ;;      Totals:         2       0       0       0       0       0       0
 20541 ;;Total ram usage:        2 bytes
 20542 ;; Hardware stack levels used:    1
 20543 ;; Hardware stack levels required when called:    2
 20544 ;; This function calls:
 20545 ;;		i2_I2C_Start
 20546 ;;		i2_I2C_Stop
 20547 ;;		i2_I2C_Write
 20548 ;;		i2_delay
 20549 ;; This function is called by:
 20550 ;;		_writeEEPROM16_ext
 20551 ;;		_timer
 20552 ;; This function uses a non-reentrant model
 20553 ;;
 20554                           
 20555                           	psect	text81
 20556  0070A8                     __ptext81:
 20557                           	opt stack 0
 20558  0070A8                     i2_writeEEPROM_ext:
 20559                           	opt stack 0
 20560  0070A8  FFFF               	dw	65535	; assembler added errata NOP
 20561                           
 20562                           ;incstack = 0
 20563                           ;i2writeEEPROM_ext@adress stored from wreg
 20564  0070AA  6E05               	movwf	i2writeEEPROM_ext@adress,c
 20565                           
 20566                           ;eeprom.h: 15: I2C_Start();
 20567  0070AC  ECFF  F035         	call	i2_I2C_Start	;wreg free
 20568                           
 20569                           ;eeprom.h: 16: I2C_Write(0xA0);
 20570  0070B0  0E00               	movlw	0
 20571  0070B2  6E03               	movwf	i2I2C_Write@d+1,c
 20572  0070B4  0EA0               	movlw	160
 20573  0070B6  6E02               	movwf	i2I2C_Write@d,c
 20574  0070B8  EC23  F036         	call	i2_I2C_Write	;wreg free
 20575                           
 20576                           ;eeprom.h: 18: I2C_Write(adress);
 20577  0070BC  C005  F002         	movff	i2writeEEPROM_ext@adress,i2I2C_Write@d
 20578  0070C0  6A03               	clrf	i2I2C_Write@d+1,c
 20579  0070C2  EC23  F036         	call	i2_I2C_Write	;wreg free
 20580                           
 20581                           ;eeprom.h: 19: I2C_Write(data);
 20582  0070C6  C004  F002         	movff	i2writeEEPROM_ext@data,i2I2C_Write@d
 20583  0070CA  6A03               	clrf	i2I2C_Write@d+1,c
 20584  0070CC  EC23  F036         	call	i2_I2C_Write	;wreg free
 20585                           
 20586                           ;eeprom.h: 20: I2C_Stop();
 20587  0070D0  EC05  F036         	call	i2_I2C_Stop	;wreg free
 20588                           
 20589                           ;eeprom.h: 21: delay(15);
 20590  0070D4  0E00               	movlw	0
 20591  0070D6  6E02               	movwf	i2delay@x+1,c
 20592  0070D8  0E0F               	movlw	15
 20593  0070DA  6E01               	movwf	i2delay@x,c
 20594  0070DC  EC0D  F037         	call	i2_delay	;wreg free
 20595  0070E0  0012               	return		;funcret
 20596  0070E2  FFFF               	dw	65535	; errata NOP
 20597  0070E4                     __end_ofi2_writeEEPROM_ext:
 20598                           	opt stack 0
 20599                           tosu	equ	0xFFF
 20600                           tosh	equ	0xFFE
 20601                           tosl	equ	0xFFD
 20602                           pclatu	equ	0xFFB
 20603                           pclath	equ	0xFFA
 20604                           tblptru	equ	0xFF8
 20605                           tblptrh	equ	0xFF7
 20606                           tblptrl	equ	0xFF6
 20607                           tablat	equ	0xFF5
 20608                           prodh	equ	0xFF4
 20609                           prodl	equ	0xFF3
 20610                           intcon	equ	0xFF2
 20611                           indf0	equ	0xFEF
 20612                           postinc0	equ	0xFEE
 20613                           fsr0h	equ	0xFEA
 20614                           fsr0l	equ	0xFE9
 20615                           wreg	equ	0xFE8
 20616                           postdec1	equ	0xFE5
 20617                           fsr1h	equ	0xFE2
 20618                           fsr1l	equ	0xFE1
 20619                           indf2	equ	0xFDF
 20620                           postinc2	equ	0xFDE
 20621                           postdec2	equ	0xFDD
 20622                           fsr2h	equ	0xFDA
 20623                           fsr2l	equ	0xFD9
 20624                           status	equ	0xFD8
 20625                           
 20626 ;; *************** function i2_delay *****************
 20627 ;; Defined at:
 20628 ;;		line 16 in file "function.c"
 20629 ;; Parameters:    Size  Location     Type
 20630 ;;  x               2    0[COMRAM] int 
 20631 ;; Auto vars:     Size  Location     Type
 20632 ;;		None
 20633 ;; Return value:  Size  Location     Type
 20634 ;;                  1    wreg      void 
 20635 ;; Registers used:
 20636 ;;		wreg, status,2, status,0
 20637 ;; Tracked objects:
 20638 ;;		On entry : 0/0
 20639 ;;		On exit  : 0/0
 20640 ;;		Unchanged: 0/0
 20641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20642 ;;      Params:         2       0       0       0       0       0       0
 20643 ;;      Locals:         0       0       0       0       0       0       0
 20644 ;;      Temps:          1       0       0       0       0       0       0
 20645 ;;      Totals:         3       0       0       0       0       0       0
 20646 ;;Total ram usage:        3 bytes
 20647 ;; Hardware stack levels used:    1
 20648 ;; This function calls:
 20649 ;;		Nothing
 20650 ;; This function is called by:
 20651 ;;		i2_writeEEPROM_ext
 20652 ;; This function uses a non-reentrant model
 20653 ;;
 20654                           
 20655                           	psect	text82
 20656  006E1A                     __ptext82:
 20657                           	opt stack 0
 20658  006E1A                     i2_delay:
 20659                           	opt stack 0
 20660  006E1A  FFFF               	dw	65535	; assembler added errata NOP
 20661                           
 20662                           ;function.c: 17: while (x--) {
 20663                           
 20664                           ;incstack = 0
 20665  006E1C  D00B               	goto	i2l1016
 20666  006E1E  FFFF               	dw	65535	; assembler added errata NOP
 20667  006E20                     i2l5330:
 20668                           
 20669                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 20670  006E20  0E02               	movlw	2
 20671  006E22  6E03               	movwf	??i2_delay& (0+255),c
 20672  006E24  0EF2               	movlw	242
 20673  006E26                     i2u917_47:
 20674  006E26  FFFF               	dw	65535	; errata NOP
 20675  006E28  2EE8               	decfsz	wreg,f,c
 20676  006E2A  D7FD               	bra	i2u917_47
 20677  006E2C  2E03               	decfsz	??i2_delay& (0+255),f,c
 20678  006E2E  D7FB               	bra	i2u917_47
 20679  006E30  D000               	nop2	
 20680  006E32  0004               	clrwdt		;# 
 20681  006E34                     i2l1016:
 20682  006E34  FFFF               	dw	65535	; assembler added errata NOP
 20683  006E36  0601               	decf	i2delay@x,f,c
 20684  006E38  A0D8               	btfss	status,0,c
 20685  006E3A  0602               	decf	i2delay@x+1,f,c
 20686  006E3C  2801               	incf	i2delay@x,w,c
 20687  006E3E  E1F0               	bnz	i2l5330
 20688  006E40  2802               	incf	i2delay@x+1,w,c
 20689  006E42  B4D8               	btfsc	status,2,c
 20690  006E44  0012               	return		;funcret
 20691  006E46  FFFF               	dw	65535	; assembler added errata NOP
 20692  006E48  D7EA               	goto	i2l1017
 20693  006E4A  FFFF               	dw	65535	; errata NOP
 20694  006E4C                     __end_ofi2_delay:
 20695                           	opt stack 0
 20696                           tosu	equ	0xFFF
 20697                           tosh	equ	0xFFE
 20698                           tosl	equ	0xFFD
 20699                           pclatu	equ	0xFFB
 20700                           pclath	equ	0xFFA
 20701                           tblptru	equ	0xFF8
 20702                           tblptrh	equ	0xFF7
 20703                           tblptrl	equ	0xFF6
 20704                           tablat	equ	0xFF5
 20705                           prodh	equ	0xFF4
 20706                           prodl	equ	0xFF3
 20707                           intcon	equ	0xFF2
 20708                           indf0	equ	0xFEF
 20709                           postinc0	equ	0xFEE
 20710                           fsr0h	equ	0xFEA
 20711                           fsr0l	equ	0xFE9
 20712                           wreg	equ	0xFE8
 20713                           postdec1	equ	0xFE5
 20714                           fsr1h	equ	0xFE2
 20715                           fsr1l	equ	0xFE1
 20716                           indf2	equ	0xFDF
 20717                           postinc2	equ	0xFDE
 20718                           postdec2	equ	0xFDD
 20719                           fsr2h	equ	0xFDA
 20720                           fsr2l	equ	0xFD9
 20721                           status	equ	0xFD8
 20722                           
 20723 ;; *************** function i2_I2C_Write *****************
 20724 ;; Defined at:
 20725 ;;		line 42 in file "I2C.c"
 20726 ;; Parameters:    Size  Location     Type
 20727 ;;  d               2    1[COMRAM] unsigned int 
 20728 ;; Auto vars:     Size  Location     Type
 20729 ;;		None
 20730 ;; Return value:  Size  Location     Type
 20731 ;;                  1    wreg      void 
 20732 ;; Registers used:
 20733 ;;		wreg, status,2, status,0, cstack
 20734 ;; Tracked objects:
 20735 ;;		On entry : 0/0
 20736 ;;		On exit  : 0/0
 20737 ;;		Unchanged: 0/0
 20738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20739 ;;      Params:         2       0       0       0       0       0       0
 20740 ;;      Locals:         0       0       0       0       0       0       0
 20741 ;;      Temps:          0       0       0       0       0       0       0
 20742 ;;      Totals:         2       0       0       0       0       0       0
 20743 ;;Total ram usage:        2 bytes
 20744 ;; Hardware stack levels used:    1
 20745 ;; Hardware stack levels required when called:    1
 20746 ;; This function calls:
 20747 ;;		i2_I2C_Wait
 20748 ;; This function is called by:
 20749 ;;		i2_getDS1307TimeDate
 20750 ;;		i2_RTC_Init
 20751 ;;		i2_writeEEPROM_ext
 20752 ;; This function uses a non-reentrant model
 20753 ;;
 20754                           
 20755                           	psect	text83
 20756  006C46                     __ptext83:
 20757                           	opt stack 0
 20758  006C46                     i2_I2C_Write:
 20759                           	opt stack 0
 20760  006C46  FFFF               	dw	65535	; assembler added errata NOP
 20761                           
 20762                           ;I2C.c: 43: I2C_Wait();
 20763                           
 20764                           ;incstack = 0
 20765  006C48  EC56  F036         	call	i2_I2C_Wait	;wreg free
 20766                           
 20767                           ;I2C.c: 44: SSPBUF = d;
 20768  006C4C  C002  FFC9         	movff	i2I2C_Write@d,4041	;volatile
 20769  006C50  0012               	return		;funcret
 20770  006C52  FFFF               	dw	65535	; errata NOP
 20771  006C54                     __end_ofi2_I2C_Write:
 20772                           	opt stack 0
 20773                           tosu	equ	0xFFF
 20774                           tosh	equ	0xFFE
 20775                           tosl	equ	0xFFD
 20776                           pclatu	equ	0xFFB
 20777                           pclath	equ	0xFFA
 20778                           tblptru	equ	0xFF8
 20779                           tblptrh	equ	0xFF7
 20780                           tblptrl	equ	0xFF6
 20781                           tablat	equ	0xFF5
 20782                           prodh	equ	0xFF4
 20783                           prodl	equ	0xFF3
 20784                           intcon	equ	0xFF2
 20785                           indf0	equ	0xFEF
 20786                           postinc0	equ	0xFEE
 20787                           fsr0h	equ	0xFEA
 20788                           fsr0l	equ	0xFE9
 20789                           wreg	equ	0xFE8
 20790                           postdec1	equ	0xFE5
 20791                           fsr1h	equ	0xFE2
 20792                           fsr1l	equ	0xFE1
 20793                           indf2	equ	0xFDF
 20794                           postinc2	equ	0xFDE
 20795                           postdec2	equ	0xFDD
 20796                           fsr2h	equ	0xFDA
 20797                           fsr2l	equ	0xFD9
 20798                           status	equ	0xFD8
 20799                           
 20800 ;; *************** function i2_I2C_Stop *****************
 20801 ;; Defined at:
 20802 ;;		line 36 in file "I2C.c"
 20803 ;; Parameters:    Size  Location     Type
 20804 ;;		None
 20805 ;; Auto vars:     Size  Location     Type
 20806 ;;		None
 20807 ;; Return value:  Size  Location     Type
 20808 ;;                  1    wreg      void 
 20809 ;; Registers used:
 20810 ;;		wreg, status,2, status,0, cstack
 20811 ;; Tracked objects:
 20812 ;;		On entry : 0/0
 20813 ;;		On exit  : 0/0
 20814 ;;		Unchanged: 0/0
 20815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20816 ;;      Params:         0       0       0       0       0       0       0
 20817 ;;      Locals:         0       0       0       0       0       0       0
 20818 ;;      Temps:          0       0       0       0       0       0       0
 20819 ;;      Totals:         0       0       0       0       0       0       0
 20820 ;;Total ram usage:        0 bytes
 20821 ;; Hardware stack levels used:    1
 20822 ;; Hardware stack levels required when called:    1
 20823 ;; This function calls:
 20824 ;;		i2_I2C_Wait
 20825 ;; This function is called by:
 20826 ;;		i2_getDS1307TimeDate
 20827 ;;		i2_RTC_Init
 20828 ;;		i2_writeEEPROM_ext
 20829 ;; This function uses a non-reentrant model
 20830 ;;
 20831                           
 20832                           	psect	text84
 20833  006C0A                     __ptext84:
 20834                           	opt stack 0
 20835  006C0A                     i2_I2C_Stop:
 20836                           	opt stack 0
 20837  006C0A  FFFF               	dw	65535	; assembler added errata NOP
 20838                           
 20839                           ;I2C.c: 37: I2C_Wait();
 20840                           
 20841                           ;incstack = 0
 20842  006C0C  EC56  F036         	call	i2_I2C_Wait	;wreg free
 20843                           
 20844                           ;I2C.c: 38: PEN = 1;
 20845  006C10  84C5               	bsf	4037,2,c	;volatile
 20846  006C12  0012               	return		;funcret
 20847  006C14  FFFF               	dw	65535	; errata NOP
 20848  006C16                     __end_ofi2_I2C_Stop:
 20849                           	opt stack 0
 20850                           tosu	equ	0xFFF
 20851                           tosh	equ	0xFFE
 20852                           tosl	equ	0xFFD
 20853                           pclatu	equ	0xFFB
 20854                           pclath	equ	0xFFA
 20855                           tblptru	equ	0xFF8
 20856                           tblptrh	equ	0xFF7
 20857                           tblptrl	equ	0xFF6
 20858                           tablat	equ	0xFF5
 20859                           prodh	equ	0xFF4
 20860                           prodl	equ	0xFF3
 20861                           intcon	equ	0xFF2
 20862                           indf0	equ	0xFEF
 20863                           postinc0	equ	0xFEE
 20864                           fsr0h	equ	0xFEA
 20865                           fsr0l	equ	0xFE9
 20866                           wreg	equ	0xFE8
 20867                           postdec1	equ	0xFE5
 20868                           fsr1h	equ	0xFE2
 20869                           fsr1l	equ	0xFE1
 20870                           indf2	equ	0xFDF
 20871                           postinc2	equ	0xFDE
 20872                           postdec2	equ	0xFDD
 20873                           fsr2h	equ	0xFDA
 20874                           fsr2l	equ	0xFD9
 20875                           status	equ	0xFD8
 20876                           
 20877 ;; *************** function i2_I2C_Start *****************
 20878 ;; Defined at:
 20879 ;;		line 26 in file "I2C.c"
 20880 ;; Parameters:    Size  Location     Type
 20881 ;;		None
 20882 ;; Auto vars:     Size  Location     Type
 20883 ;;		None
 20884 ;; Return value:  Size  Location     Type
 20885 ;;                  1    wreg      void 
 20886 ;; Registers used:
 20887 ;;		wreg, status,2, status,0, cstack
 20888 ;; Tracked objects:
 20889 ;;		On entry : 0/0
 20890 ;;		On exit  : 0/0
 20891 ;;		Unchanged: 0/0
 20892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20893 ;;      Params:         0       0       0       0       0       0       0
 20894 ;;      Locals:         0       0       0       0       0       0       0
 20895 ;;      Temps:          0       0       0       0       0       0       0
 20896 ;;      Totals:         0       0       0       0       0       0       0
 20897 ;;Total ram usage:        0 bytes
 20898 ;; Hardware stack levels used:    1
 20899 ;; Hardware stack levels required when called:    1
 20900 ;; This function calls:
 20901 ;;		i2_I2C_Wait
 20902 ;; This function is called by:
 20903 ;;		i2_getDS1307TimeDate
 20904 ;;		i2_RTC_Init
 20905 ;;		i2_writeEEPROM_ext
 20906 ;; This function uses a non-reentrant model
 20907 ;;
 20908                           
 20909                           	psect	text85
 20910  006BFE                     __ptext85:
 20911                           	opt stack 0
 20912  006BFE                     i2_I2C_Start:
 20913                           	opt stack 0
 20914  006BFE  FFFF               	dw	65535	; assembler added errata NOP
 20915                           
 20916                           ;I2C.c: 27: I2C_Wait();
 20917                           
 20918                           ;incstack = 0
 20919  006C00  EC56  F036         	call	i2_I2C_Wait	;wreg free
 20920                           
 20921                           ;I2C.c: 28: SEN = 1;
 20922  006C04  80C5               	bsf	4037,0,c	;volatile
 20923  006C06  0012               	return		;funcret
 20924  006C08  FFFF               	dw	65535	; errata NOP
 20925  006C0A                     __end_ofi2_I2C_Start:
 20926                           	opt stack 0
 20927                           tosu	equ	0xFFF
 20928                           tosh	equ	0xFFE
 20929                           tosl	equ	0xFFD
 20930                           pclatu	equ	0xFFB
 20931                           pclath	equ	0xFFA
 20932                           tblptru	equ	0xFF8
 20933                           tblptrh	equ	0xFF7
 20934                           tblptrl	equ	0xFF6
 20935                           tablat	equ	0xFF5
 20936                           prodh	equ	0xFF4
 20937                           prodl	equ	0xFF3
 20938                           intcon	equ	0xFF2
 20939                           indf0	equ	0xFEF
 20940                           postinc0	equ	0xFEE
 20941                           fsr0h	equ	0xFEA
 20942                           fsr0l	equ	0xFE9
 20943                           wreg	equ	0xFE8
 20944                           postdec1	equ	0xFE5
 20945                           fsr1h	equ	0xFE2
 20946                           fsr1l	equ	0xFE1
 20947                           indf2	equ	0xFDF
 20948                           postinc2	equ	0xFDE
 20949                           postdec2	equ	0xFDD
 20950                           fsr2h	equ	0xFDA
 20951                           fsr2l	equ	0xFD9
 20952                           status	equ	0xFD8
 20953                           
 20954 ;; *************** function i2_I2C_Wait *****************
 20955 ;; Defined at:
 20956 ;;		line 22 in file "I2C.c"
 20957 ;; Parameters:    Size  Location     Type
 20958 ;;		None
 20959 ;; Auto vars:     Size  Location     Type
 20960 ;;		None
 20961 ;; Return value:  Size  Location     Type
 20962 ;;                  1    wreg      void 
 20963 ;; Registers used:
 20964 ;;		wreg, status,2, status,0
 20965 ;; Tracked objects:
 20966 ;;		On entry : 0/0
 20967 ;;		On exit  : 0/0
 20968 ;;		Unchanged: 0/0
 20969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20970 ;;      Params:         0       0       0       0       0       0       0
 20971 ;;      Locals:         0       0       0       0       0       0       0
 20972 ;;      Temps:          1       0       0       0       0       0       0
 20973 ;;      Totals:         1       0       0       0       0       0       0
 20974 ;;Total ram usage:        1 bytes
 20975 ;; Hardware stack levels used:    1
 20976 ;; This function calls:
 20977 ;;		Nothing
 20978 ;; This function is called by:
 20979 ;;		i2_I2C_Start
 20980 ;;		i2_I2C_Restart
 20981 ;;		i2_I2C_Stop
 20982 ;;		i2_I2C_Write
 20983 ;;		i2_I2C_Read
 20984 ;; This function uses a non-reentrant model
 20985 ;;
 20986                           
 20987                           	psect	text86
 20988  006CAC                     __ptext86:
 20989                           	opt stack 0
 20990  006CAC                     i2_I2C_Wait:
 20991                           	opt stack 0
 20992  006CAC  FFFF               	dw	65535	; assembler added errata NOP
 20993                           
 20994                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 20995                           
 20996                           ;incstack = 0
 20997  006CAE  B4C7               	btfsc	4039,2,c	;volatile
 20998  006CB0  D7FD               	goto	i2_I2C_Wait
 20999  006CB2  CFC5 F001          	movff	4037,??i2_I2C_Wait	;volatile
 21000  006CB6  0E1F               	movlw	31
 21001  006CB8  1601               	andwf	??i2_I2C_Wait,f,c
 21002  006CBA  B4D8               	btfsc	status,2,c
 21003  006CBC  0012               	return		;funcret
 21004  006CBE  FFFF               	dw	65535	; assembler added errata NOP
 21005  006CC0  D7F5               	goto	i2_I2C_Wait
 21006  006CC2  FFFF               	dw	65535	; errata NOP
 21007  006CC4                     __end_ofi2_I2C_Wait:
 21008                           	opt stack 0
 21009                           tosu	equ	0xFFF
 21010                           tosh	equ	0xFFE
 21011                           tosl	equ	0xFFD
 21012                           pclatu	equ	0xFFB
 21013                           pclath	equ	0xFFA
 21014                           tblptru	equ	0xFF8
 21015                           tblptrh	equ	0xFF7
 21016                           tblptrl	equ	0xFF6
 21017                           tablat	equ	0xFF5
 21018                           prodh	equ	0xFF4
 21019                           prodl	equ	0xFF3
 21020                           intcon	equ	0xFF2
 21021                           indf0	equ	0xFEF
 21022                           postinc0	equ	0xFEE
 21023                           fsr0h	equ	0xFEA
 21024                           fsr0l	equ	0xFE9
 21025                           wreg	equ	0xFE8
 21026                           postdec1	equ	0xFE5
 21027                           fsr1h	equ	0xFE2
 21028                           fsr1l	equ	0xFE1
 21029                           indf2	equ	0xFDF
 21030                           postinc2	equ	0xFDE
 21031                           postdec2	equ	0xFDD
 21032                           fsr2h	equ	0xFDA
 21033                           fsr2l	equ	0xFD9
 21034                           status	equ	0xFD8
 21035                           
 21036 ;; *************** function _readButtons *****************
 21037 ;; Defined at:
 21038 ;;		line 23 in file "teclado.h"
 21039 ;; Parameters:    Size  Location     Type
 21040 ;;		None
 21041 ;; Auto vars:     Size  Location     Type
 21042 ;;		None
 21043 ;; Return value:  Size  Location     Type
 21044 ;;                  1    wreg      void 
 21045 ;; Registers used:
 21046 ;;		wreg, status,2
 21047 ;; Tracked objects:
 21048 ;;		On entry : 0/0
 21049 ;;		On exit  : 0/0
 21050 ;;		Unchanged: 0/0
 21051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21052 ;;      Params:         0       0       0       0       0       0       0
 21053 ;;      Locals:         0       0       0       0       0       0       0
 21054 ;;      Temps:          0       0       0       0       0       0       0
 21055 ;;      Totals:         0       0       0       0       0       0       0
 21056 ;;Total ram usage:        0 bytes
 21057 ;; Hardware stack levels used:    1
 21058 ;; This function calls:
 21059 ;;		Nothing
 21060 ;; This function is called by:
 21061 ;;		_TIMER
 21062 ;; This function uses a non-reentrant model
 21063 ;;
 21064                           
 21065                           	psect	text87
 21066  007722                     __ptext87:
 21067                           	opt stack 0
 21068  007722                     _readButtons:
 21069                           	opt stack 0
 21070  007722  FFFF               	dw	65535	; assembler added errata NOP
 21071                           
 21072                           ;teclado.h: 24: if (!PORTBbits.RB2) {
 21073                           
 21074                           ;incstack = 0
 21075  007724  B481               	btfsc	3969,2,c	;volatile
 21076  007726  D002               	goto	i2l454
 21077                           
 21078                           ;teclado.h: 25: flag_b_esc = 1;
 21079  007728  0E01               	movlw	1
 21080  00772A  D009               	goto	L45
 21081  00772C                     i2l454:
 21082  00772C  FFFF               	dw	65535	; assembler added errata NOP
 21083  00772E  A481               	btfss	3969,2,c	;volatile
 21084  007730  D008               	goto	i2l456
 21085  007732  5065               	movf	_flag_b_esc,w,c
 21086  007734  B4D8               	btfsc	status,2,c
 21087  007736  D005               	goto	i2l456
 21088                           
 21089                           ;teclado.h: 27: _b_esc = 1;
 21090  007738  0E01               	movlw	1
 21091  00773A  6E64               	movwf	__b_esc,c
 21092                           
 21093                           ;teclado.h: 28: flag_b_esc = 0;
 21094  00773C  0E00               	movlw	0
 21095  00773E                     L45:
 21096  00773E  FFFF               	dw	65535	; assembler added errata NOP
 21097  007740  6E65               	movwf	_flag_b_esc,c
 21098  007742                     i2l456:
 21099  007742  FFFF               	dw	65535	; assembler added errata NOP
 21100                           
 21101                           ;teclado.h: 29: }
 21102                           ;teclado.h: 31: if (!PORTBbits.RB4) {
 21103  007744  B881               	btfsc	3969,4,c	;volatile
 21104  007746  D002               	goto	i2l457
 21105                           
 21106                           ;teclado.h: 32: flag_b_menos = 1;
 21107  007748  0E01               	movlw	1
 21108  00774A  D009               	goto	L46
 21109  00774C                     i2l457:
 21110  00774C  FFFF               	dw	65535	; assembler added errata NOP
 21111  00774E  A881               	btfss	3969,4,c	;volatile
 21112  007750  D008               	goto	i2l459
 21113  007752  5063               	movf	_flag_b_menos,w,c
 21114  007754  B4D8               	btfsc	status,2,c
 21115  007756  D005               	goto	i2l459
 21116                           
 21117                           ;teclado.h: 34: _b_menos = 1;
 21118  007758  0E01               	movlw	1
 21119  00775A  6E62               	movwf	__b_menos,c
 21120                           
 21121                           ;teclado.h: 35: flag_b_menos = 0;
 21122  00775C  0E00               	movlw	0
 21123  00775E                     L46:
 21124  00775E  FFFF               	dw	65535	; assembler added errata NOP
 21125  007760  6E63               	movwf	_flag_b_menos,c
 21126  007762                     i2l459:
 21127  007762  FFFF               	dw	65535	; assembler added errata NOP
 21128                           
 21129                           ;teclado.h: 36: }
 21130                           ;teclado.h: 38: if (!PORTBbits.RB5) {
 21131  007764  BA81               	btfsc	3969,5,c	;volatile
 21132  007766  D002               	goto	i2l460
 21133                           
 21134                           ;teclado.h: 39: flag_b_mais = 1;
 21135  007768  0E01               	movlw	1
 21136  00776A  D009               	goto	L47
 21137  00776C                     i2l460:
 21138  00776C  FFFF               	dw	65535	; assembler added errata NOP
 21139  00776E  AA81               	btfss	3969,5,c	;volatile
 21140  007770  D008               	goto	i2l462
 21141  007772  5061               	movf	_flag_b_mais,w,c
 21142  007774  B4D8               	btfsc	status,2,c
 21143  007776  D005               	goto	i2l462
 21144                           
 21145                           ;teclado.h: 41: _b_mais = 1;
 21146  007778  0E01               	movlw	1
 21147  00777A  6E60               	movwf	__b_mais,c
 21148                           
 21149                           ;teclado.h: 42: flag_b_mais = 0;
 21150  00777C  0E00               	movlw	0
 21151  00777E                     L47:
 21152  00777E  FFFF               	dw	65535	; assembler added errata NOP
 21153  007780  6E61               	movwf	_flag_b_mais,c
 21154  007782                     i2l462:
 21155  007782  FFFF               	dw	65535	; assembler added errata NOP
 21156                           
 21157                           ;teclado.h: 43: }
 21158                           ;teclado.h: 45: if (!PORTBbits.RB3) {
 21159  007784  B681               	btfsc	3969,3,c	;volatile
 21160  007786  D002               	goto	i2l463
 21161                           
 21162                           ;teclado.h: 46: flag_b_ok = 1;
 21163  007788  0E01               	movlw	1
 21164  00778A  D009               	goto	L48
 21165  00778C                     i2l463:
 21166  00778C  FFFF               	dw	65535	; assembler added errata NOP
 21167  00778E  A681               	btfss	3969,3,c	;volatile
 21168  007790  D008               	goto	i2l465
 21169  007792  505F               	movf	_flag_b_ok,w,c
 21170  007794  B4D8               	btfsc	status,2,c
 21171  007796  D005               	goto	i2l465
 21172                           
 21173                           ;teclado.h: 48: _b_ok = 1;
 21174  007798  0E01               	movlw	1
 21175  00779A  6E5E               	movwf	__b_ok,c
 21176                           
 21177                           ;teclado.h: 49: flag_b_ok = 0;
 21178  00779C  0E00               	movlw	0
 21179  00779E                     L48:
 21180  00779E  FFFF               	dw	65535	; assembler added errata NOP
 21181  0077A0  6E5F               	movwf	_flag_b_ok,c
 21182  0077A2                     i2l465:
 21183  0077A2  FFFF               	dw	65535	; assembler added errata NOP
 21184  0077A4  0012               	return		;funcret
 21185  0077A6  FFFF               	dw	65535	; errata NOP
 21186  0077A8                     __end_of_readButtons:
 21187                           	opt stack 0
 21188                           tosu	equ	0xFFF
 21189                           tosh	equ	0xFFE
 21190                           tosl	equ	0xFFD
 21191                           pclatu	equ	0xFFB
 21192                           pclath	equ	0xFFA
 21193                           tblptru	equ	0xFF8
 21194                           tblptrh	equ	0xFF7
 21195                           tblptrl	equ	0xFF6
 21196                           tablat	equ	0xFF5
 21197                           prodh	equ	0xFF4
 21198                           prodl	equ	0xFF3
 21199                           intcon	equ	0xFF2
 21200                           indf0	equ	0xFEF
 21201                           postinc0	equ	0xFEE
 21202                           fsr0h	equ	0xFEA
 21203                           fsr0l	equ	0xFE9
 21204                           wreg	equ	0xFE8
 21205                           postdec1	equ	0xFE5
 21206                           fsr1h	equ	0xFE2
 21207                           fsr1l	equ	0xFE1
 21208                           indf2	equ	0xFDF
 21209                           postinc2	equ	0xFDE
 21210                           postdec2	equ	0xFDD
 21211                           fsr2h	equ	0xFDA
 21212                           fsr2l	equ	0xFD9
 21213                           status	equ	0xFD8
 21214                           
 21215 ;; *************** function _lerTransdutor *****************
 21216 ;; Defined at:
 21217 ;;		line 7 in file "transdutor.h"
 21218 ;; Parameters:    Size  Location     Type
 21219 ;;		None
 21220 ;; Auto vars:     Size  Location     Type
 21221 ;;  tensao          3   45[COMRAM] float 
 21222 ;;  _pressao        3   42[COMRAM] float 
 21223 ;;  i               1   41[COMRAM] unsigned char 
 21224 ;; Return value:  Size  Location     Type
 21225 ;;                  1    wreg      void 
 21226 ;; Registers used:
 21227 ;;		wreg, status,2, status,0, cstack
 21228 ;; Tracked objects:
 21229 ;;		On entry : 0/0
 21230 ;;		On exit  : 0/0
 21231 ;;		Unchanged: 0/0
 21232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21233 ;;      Params:         0       0       0       0       0       0       0
 21234 ;;      Locals:         7       0       0       0       0       0       0
 21235 ;;      Temps:          0       0       0       0       0       0       0
 21236 ;;      Totals:         7       0       0       0       0       0       0
 21237 ;;Total ram usage:        7 bytes
 21238 ;; Hardware stack levels used:    1
 21239 ;; Hardware stack levels required when called:    2
 21240 ;; This function calls:
 21241 ;;		___ftadd
 21242 ;;		___ftdiv
 21243 ;;		___ftge
 21244 ;;		___ftmul
 21245 ;;		___fttol
 21246 ;;		___lwtoft
 21247 ;;		_readADC
 21248 ;; This function is called by:
 21249 ;;		_TIMER
 21250 ;; This function uses a non-reentrant model
 21251 ;;
 21252                           
 21253                           	psect	text88
 21254  002238                     __ptext88:
 21255                           	opt stack 0
 21256  002238                     _lerTransdutor:
 21257                           	opt stack 0
 21258  002238  FFFF               	dw	65535	; assembler added errata NOP
 21259                           
 21260                           ;transdutor.h: 8: char i = 0;
 21261                           
 21262                           ;incstack = 0
 21263  00223A  0E00               	movlw	0
 21264  00223C  6E2A               	movwf	lerTransdutor@i,c
 21265                           
 21266                           ;transdutor.h: 9: float tensao = 0, _pressao = 0;
 21267  00223E  0E00               	movlw	0
 21268  002240  6E2E               	movwf	lerTransdutor@tensao,c
 21269  002242  0E00               	movlw	0
 21270  002244  6E2F               	movwf	lerTransdutor@tensao+1,c
 21271  002246  0E00               	movlw	0
 21272  002248  6E30               	movwf	lerTransdutor@tensao+2,c
 21273  00224A  0E00               	movlw	0
 21274  00224C  6E2B               	movwf	lerTransdutor@_pressao,c
 21275  00224E  0E00               	movlw	0
 21276  002250  6E2C               	movwf	lerTransdutor@_pressao+1,c
 21277  002252  0E00               	movlw	0
 21278  002254  6E2D               	movwf	lerTransdutor@_pressao+2,c
 21279                           
 21280                           ;transdutor.h: 10: for (i = 0; i < 9; i++) {
 21281  002256  0E00               	movlw	0
 21282  002258  6E2A               	movwf	lerTransdutor@i,c
 21283  00225A                     i2l6404:
 21284  00225A  FFFF               	dw	65535	; assembler added errata NOP
 21285  00225C  0E08               	movlw	8
 21286  00225E  642A               	cpfsgt	lerTransdutor@i,c
 21287  002260  D001               	goto	i2l230
 21288  002262  D02D               	goto	i2u682_40
 21289  002264                     i2l230:
 21290  002264  FFFF               	dw	65535	; assembler added errata NOP
 21291                           
 21292                           ;transdutor.h: 11: tensao += readADC()*0.004887586;
 21293  002266  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 21294  00226A  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 21295  00226E  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 21296  002272  0E28               	movlw	40
 21297  002274  6E0F               	movwf	___ftmul@f2,c
 21298  002276  0EA0               	movlw	160
 21299  002278  6E10               	movwf	___ftmul@f2+1,c
 21300  00227A  0E3B               	movlw	59
 21301  00227C  6E11               	movwf	___ftmul@f2+2,c
 21302  00227E  ECA1  F036         	call	_readADC	;wreg free
 21303  002282  C001  F009         	movff	?_readADC,___lwtoft@c
 21304  002286  C002  F00A         	movff	?_readADC+1,___lwtoft@c+1
 21305  00228A  EC8D  F036         	call	___lwtoft	;wreg free
 21306  00228E  C009  F00C         	movff	?___lwtoft,___ftmul@f1
 21307  002292  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
 21308  002296  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
 21309  00229A  ECAB  F01A         	call	___ftmul	;wreg free
 21310  00229E  C00C  F01E         	movff	?___ftmul,___ftadd@f2
 21311  0022A2  C00D  F01F         	movff	?___ftmul+1,___ftadd@f2+1
 21312  0022A6  C00E  F020         	movff	?___ftmul+2,___ftadd@f2+2
 21313  0022AA  EC0F  F014         	call	___ftadd	;wreg free
 21314  0022AE  C01B  F02E         	movff	?___ftadd,lerTransdutor@tensao
 21315  0022B2  C01C  F02F         	movff	?___ftadd+1,lerTransdutor@tensao+1
 21316  0022B6  C01D  F030         	movff	?___ftadd+2,lerTransdutor@tensao+2
 21317  0022BA  2A2A               	incf	lerTransdutor@i,f,c
 21318  0022BC  D7CE               	goto	i2l6404
 21319  0022BE                     i2u682_40:
 21320  0022BE  FFFF               	dw	65535	; assembler added errata NOP
 21321                           
 21322                           ;transdutor.h: 12: }
 21323                           ;transdutor.h: 13: tensao = tensao / 10;
 21324  0022C0  C02E  F01B         	movff	lerTransdutor@tensao,___ftdiv@f1
 21325  0022C4  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftdiv@f1+1
 21326  0022C8  C030  F01D         	movff	lerTransdutor@tensao+2,___ftdiv@f1+2
 21327  0022CC  0E00               	movlw	0
 21328  0022CE  6E1E               	movwf	___ftdiv@f2,c
 21329  0022D0  0E20               	movlw	32
 21330  0022D2  6E1F               	movwf	___ftdiv@f2+1,c
 21331  0022D4  0E41               	movlw	65
 21332  0022D6  6E20               	movwf	___ftdiv@f2+2,c
 21333  0022D8  EC11  F01C         	call	___ftdiv	;wreg free
 21334  0022DC  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 21335  0022E0  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 21336  0022E4  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 21337                           
 21338                           ;transdutor.h: 14: _tensao += (float) tensao;
 21339  0022E8  C04C  F01B         	movff	__tensao,___ftadd@f1
 21340  0022EC  C04D  F01C         	movff	__tensao+1,___ftadd@f1+1
 21341  0022F0  C04E  F01D         	movff	__tensao+2,___ftadd@f1+2
 21342  0022F4  C02E  F01E         	movff	lerTransdutor@tensao,___ftadd@f2
 21343  0022F8  C02F  F01F         	movff	lerTransdutor@tensao+1,___ftadd@f2+1
 21344  0022FC  C030  F020         	movff	lerTransdutor@tensao+2,___ftadd@f2+2
 21345  002300  EC0F  F014         	call	___ftadd	;wreg free
 21346  002304  C01B  F04C         	movff	?___ftadd,__tensao
 21347  002308  C01C  F04D         	movff	?___ftadd+1,__tensao+1
 21348  00230C  C01D  F04E         	movff	?___ftadd+2,__tensao+2
 21349                           
 21350                           ;transdutor.h: 15: qtd_leitura++;
 21351  002310  2A6E               	incf	_qtd_leitura,f,c
 21352                           
 21353                           ;transdutor.h: 17: if (tensao < 0.4) {
 21354  002312  C02E  F001         	movff	lerTransdutor@tensao,___ftge@ff1
 21355  002316  C02F  F002         	movff	lerTransdutor@tensao+1,___ftge@ff1+1
 21356  00231A  C030  F003         	movff	lerTransdutor@tensao+2,___ftge@ff1+2
 21357  00231E  0ECD               	movlw	205
 21358  002320  6E04               	movwf	___ftge@ff2,c
 21359  002322  0ECC               	movlw	204
 21360  002324  6E05               	movwf	___ftge@ff2+1,c
 21361  002326  0E3E               	movlw	62
 21362  002328  6E06               	movwf	___ftge@ff2+2,c
 21363  00232A  ECE8  F01E         	call	___ftge	;wreg free
 21364  00232E  B0D8               	btfsc	status,0,c
 21365  002330  D005               	goto	i2l232
 21366                           
 21367                           ;transdutor.h: 18: pressao = -10;
 21368  002332  0EFF               	movlw	255
 21369  002334  0100               	movlb	0	; () banked
 21370  002336  6FF9               	movwf	(_pressao+1)& (0+255),b
 21371  002338  0EF6               	movlw	246
 21372  00233A  D015               	goto	L49
 21373  00233C                     i2l232:
 21374  00233C  FFFF               	dw	65535	; assembler added errata NOP
 21375                           
 21376                           ; BSR set to: 0
 21377  00233E  0E00               	movlw	0
 21378  002340  6E01               	movwf	___ftge@ff1,c
 21379  002342  0E90               	movlw	144
 21380  002344  6E02               	movwf	___ftge@ff1+1,c
 21381  002346  0E40               	movlw	64
 21382  002348  6E03               	movwf	___ftge@ff1+2,c
 21383  00234A  C02E  F004         	movff	lerTransdutor@tensao,___ftge@ff2
 21384  00234E  C02F  F005         	movff	lerTransdutor@tensao+1,___ftge@ff2+1
 21385  002352  C030  F006         	movff	lerTransdutor@tensao+2,___ftge@ff2+2
 21386  002356  ECE8  F01E         	call	___ftge	;wreg free
 21387  00235A  B0D8               	btfsc	status,0,c
 21388  00235C  D009               	goto	i2l234
 21389                           
 21390                           ;transdutor.h: 21: pressao = 99;
 21391  00235E  0E00               	movlw	0
 21392  002360  0100               	movlb	0	; () banked
 21393  002362  6FF9               	movwf	(_pressao+1)& (0+255),b
 21394  002364  0E63               	movlw	99
 21395  002366                     L49:
 21396  002366  FFFF               	dw	65535	; assembler added errata NOP
 21397  002368  6FF8               	movwf	_pressao& (0+255),b
 21398                           
 21399                           ;transdutor.h: 22: flagErroTransdutor = 1;
 21400  00236A  0E01               	movlw	1
 21401  00236C  6E74               	movwf	_flagErroTransdutor,c
 21402                           
 21403                           ;transdutor.h: 23: } else if (qtd_leitura >= 6) {
 21404  00236E  D07B               	goto	i2l236
 21405  002370                     i2l234:
 21406  002370  FFFF               	dw	65535	; assembler added errata NOP
 21407                           
 21408                           ; BSR set to: 0
 21409  002372  0E05               	movlw	5
 21410  002374  646E               	cpfsgt	_qtd_leitura,c
 21411  002376  D077               	goto	i2l236
 21412                           
 21413                           ;transdutor.h: 24: flagErroTransdutor = 0;
 21414  002378  0E00               	movlw	0
 21415  00237A  6E74               	movwf	_flagErroTransdutor,c
 21416                           
 21417                           ;transdutor.h: 25: qtd_leitura = 0;
 21418  00237C  0E00               	movlw	0
 21419  00237E  6E6E               	movwf	_qtd_leitura,c
 21420                           
 21421                           ;transdutor.h: 26: tensao = (float) (_tensao / 6);
 21422  002380  C04C  F01B         	movff	__tensao,___ftdiv@f1
 21423  002384  C04D  F01C         	movff	__tensao+1,___ftdiv@f1+1
 21424  002388  C04E  F01D         	movff	__tensao+2,___ftdiv@f1+2
 21425  00238C  0E00               	movlw	0
 21426  00238E  6E1E               	movwf	___ftdiv@f2,c
 21427  002390  0EC0               	movlw	192
 21428  002392  6E1F               	movwf	___ftdiv@f2+1,c
 21429  002394  0E40               	movlw	64
 21430  002396  6E20               	movwf	___ftdiv@f2+2,c
 21431  002398  EC11  F01C         	call	___ftdiv	;wreg free
 21432  00239C  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 21433  0023A0  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 21434  0023A4  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 21435                           
 21436                           ;transdutor.h: 27: _tensao = 0;
 21437  0023A8  0E00               	movlw	0
 21438  0023AA  6E4C               	movwf	__tensao,c
 21439  0023AC  0E00               	movlw	0
 21440  0023AE  6E4D               	movwf	__tensao+1,c
 21441  0023B0  0E00               	movlw	0
 21442  0023B2  6E4E               	movwf	__tensao+2,c
 21443                           
 21444                           ;transdutor.h: 28: _pressao = tensao - 0.5;
 21445  0023B4  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 21446  0023B8  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 21447  0023BC  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 21448  0023C0  0E00               	movlw	0
 21449  0023C2  6E1E               	movwf	___ftadd@f2,c
 21450  0023C4  0E00               	movlw	0
 21451  0023C6  6E1F               	movwf	___ftadd@f2+1,c
 21452  0023C8  0EBF               	movlw	191
 21453  0023CA  6E20               	movwf	___ftadd@f2+2,c
 21454  0023CC  EC0F  F014         	call	___ftadd	;wreg free
 21455  0023D0  C01B  F02B         	movff	?___ftadd,lerTransdutor@_pressao
 21456  0023D4  C01C  F02C         	movff	?___ftadd+1,lerTransdutor@_pressao+1
 21457  0023D8  C01D  F02D         	movff	?___ftadd+2,lerTransdutor@_pressao+2
 21458                           
 21459                           ;transdutor.h: 29: _pressao = _pressao * 10 / 4;
 21460  0023DC  0E00               	movlw	0
 21461  0023DE  6E0F               	movwf	___ftmul@f2,c
 21462  0023E0  0E20               	movlw	32
 21463  0023E2  6E10               	movwf	___ftmul@f2+1,c
 21464  0023E4  0E41               	movlw	65
 21465  0023E6  6E11               	movwf	___ftmul@f2+2,c
 21466  0023E8  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 21467  0023EC  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 21468  0023F0  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 21469  0023F4  ECAB  F01A         	call	___ftmul	;wreg free
 21470  0023F8  C00C  F01B         	movff	?___ftmul,___ftdiv@f1
 21471  0023FC  C00D  F01C         	movff	?___ftmul+1,___ftdiv@f1+1
 21472  002400  C00E  F01D         	movff	?___ftmul+2,___ftdiv@f1+2
 21473  002404  0E00               	movlw	0
 21474  002406  6E1E               	movwf	___ftdiv@f2,c
 21475  002408  0E80               	movlw	128
 21476  00240A  6E1F               	movwf	___ftdiv@f2+1,c
 21477  00240C  0E40               	movlw	64
 21478  00240E  6E20               	movwf	___ftdiv@f2+2,c
 21479  002410  EC11  F01C         	call	___ftdiv	;wreg free
 21480  002414  C01B  F02B         	movff	?___ftdiv,lerTransdutor@_pressao
 21481  002418  C01C  F02C         	movff	?___ftdiv+1,lerTransdutor@_pressao+1
 21482  00241C  C01D  F02D         	movff	?___ftdiv+2,lerTransdutor@_pressao+2
 21483                           
 21484                           ;transdutor.h: 30: if (_pressao < 0) {
 21485  002420  AE2D               	btfss	lerTransdutor@_pressao+2,7,c
 21486  002422  D006               	goto	i2l237
 21487                           
 21488                           ;transdutor.h: 31: _pressao = 0;
 21489  002424  0E00               	movlw	0
 21490  002426  6E2B               	movwf	lerTransdutor@_pressao,c
 21491  002428  0E00               	movlw	0
 21492  00242A  6E2C               	movwf	lerTransdutor@_pressao+1,c
 21493  00242C  0E00               	movlw	0
 21494  00242E  6E2D               	movwf	lerTransdutor@_pressao+2,c
 21495  002430                     i2l237:
 21496  002430  FFFF               	dw	65535	; assembler added errata NOP
 21497                           
 21498                           ;transdutor.h: 32: }
 21499                           ;transdutor.h: 33: pressao = _pressao * 10;
 21500  002432  0E00               	movlw	0
 21501  002434  6E0F               	movwf	___ftmul@f2,c
 21502  002436  0E20               	movlw	32
 21503  002438  6E10               	movwf	___ftmul@f2+1,c
 21504  00243A  0E41               	movlw	65
 21505  00243C  6E11               	movwf	___ftmul@f2+2,c
 21506  00243E  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 21507  002442  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 21508  002446  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 21509  00244A  ECAB  F01A         	call	___ftmul	;wreg free
 21510  00244E  C00C  F01B         	movff	?___ftmul,___fttol@f1
 21511  002452  C00D  F01C         	movff	?___ftmul+1,___fttol@f1+1
 21512  002456  C00E  F01D         	movff	?___ftmul+2,___fttol@f1+2
 21513  00245A  EC9D  F01B         	call	___fttol	;wreg free
 21514  00245E  C01B  F0F8         	movff	?___fttol,_pressao
 21515  002462  C01C  F0F9         	movff	?___fttol+1,_pressao+1
 21516  002466                     i2l236:
 21517  002466  FFFF               	dw	65535	; assembler added errata NOP
 21518  002468  0012               	return		;funcret
 21519  00246A  FFFF               	dw	65535	; errata NOP
 21520  00246C                     __end_of_lerTransdutor:
 21521                           	opt stack 0
 21522                           tosu	equ	0xFFF
 21523                           tosh	equ	0xFFE
 21524                           tosl	equ	0xFFD
 21525                           pclatu	equ	0xFFB
 21526                           pclath	equ	0xFFA
 21527                           tblptru	equ	0xFF8
 21528                           tblptrh	equ	0xFF7
 21529                           tblptrl	equ	0xFF6
 21530                           tablat	equ	0xFF5
 21531                           prodh	equ	0xFF4
 21532                           prodl	equ	0xFF3
 21533                           intcon	equ	0xFF2
 21534                           indf0	equ	0xFEF
 21535                           postinc0	equ	0xFEE
 21536                           fsr0h	equ	0xFEA
 21537                           fsr0l	equ	0xFE9
 21538                           wreg	equ	0xFE8
 21539                           postdec1	equ	0xFE5
 21540                           fsr1h	equ	0xFE2
 21541                           fsr1l	equ	0xFE1
 21542                           indf2	equ	0xFDF
 21543                           postinc2	equ	0xFDE
 21544                           postdec2	equ	0xFDD
 21545                           fsr2h	equ	0xFDA
 21546                           fsr2l	equ	0xFD9
 21547                           status	equ	0xFD8
 21548                           
 21549 ;; *************** function _readADC *****************
 21550 ;; Defined at:
 21551 ;;		line 8 in file "adc.h"
 21552 ;; Parameters:    Size  Location     Type
 21553 ;;		None
 21554 ;; Auto vars:     Size  Location     Type
 21555 ;;		None
 21556 ;; Return value:  Size  Location     Type
 21557 ;;                  2    0[COMRAM] unsigned int 
 21558 ;; Registers used:
 21559 ;;		wreg, status,2, status,0
 21560 ;; Tracked objects:
 21561 ;;		On entry : 0/0
 21562 ;;		On exit  : 0/0
 21563 ;;		Unchanged: 0/0
 21564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21565 ;;      Params:         2       0       0       0       0       0       0
 21566 ;;      Locals:         0       0       0       0       0       0       0
 21567 ;;      Temps:          2       0       0       0       0       0       0
 21568 ;;      Totals:         4       0       0       0       0       0       0
 21569 ;;Total ram usage:        4 bytes
 21570 ;; Hardware stack levels used:    1
 21571 ;; This function calls:
 21572 ;;		Nothing
 21573 ;; This function is called by:
 21574 ;;		_lerTransdutor
 21575 ;; This function uses a non-reentrant model
 21576 ;;
 21577                           
 21578                           	psect	text89
 21579  006D42                     __ptext89:
 21580                           	opt stack 0
 21581  006D42                     _readADC:
 21582                           	opt stack 0
 21583  006D42  FFFF               	dw	65535	; assembler added errata NOP
 21584                           
 21585                           ;adc.h: 9: ADCON0bits.GO = 1;
 21586                           
 21587                           ;incstack = 0
 21588  006D44  84C2               	bsf	4034,2,c	;volatile
 21589                           
 21590                           ;adc.h: 10: _delay((unsigned long)((50)*(8000000/4000000.0)));
 21591  006D46  0E19               	movlw	25
 21592  006D48                     i2u918_47:
 21593  006D48  FFFF               	dw	65535	; errata NOP
 21594  006D4A  2EE8               	decfsz	wreg,f,c
 21595  006D4C  D7FD               	bra	i2u918_47
 21596  006D4E  FFFF               	dw	65535	; assembler added errata NOP
 21597  006D50  A4C2               	btfss	4034,2,c	;volatile
 21598  006D52  D7FD               	goto	i2l225
 21599                           
 21600                           ;adc.h: 12: }
 21601                           ;adc.h: 13: return((ADRESH<<8)+ ADRESL);
 21602  006D54  50C4               	movf	4036,w,c	;volatile
 21603  006D56  6E04               	movwf	(??_readADC+1)& (0+255),c
 21604  006D58  6A03               	clrf	??_readADC& (0+255),c
 21605  006D5A  50C3               	movf	4035,w,c	;volatile
 21606  006D5C  2403               	addwf	??_readADC,w,c
 21607  006D5E  6E01               	movwf	?_readADC,c
 21608  006D60  0E00               	movlw	0
 21609  006D62  2004               	addwfc	??_readADC+1,w,c
 21610  006D64  6E02               	movwf	?_readADC+1,c
 21611  006D66  0012               	return		;funcret
 21612  006D68  FFFF               	dw	65535	; errata NOP
 21613  006D6A                     __end_of_readADC:
 21614                           	opt stack 0
 21615                           tosu	equ	0xFFF
 21616                           tosh	equ	0xFFE
 21617                           tosl	equ	0xFFD
 21618                           pclatu	equ	0xFFB
 21619                           pclath	equ	0xFFA
 21620                           tblptru	equ	0xFF8
 21621                           tblptrh	equ	0xFF7
 21622                           tblptrl	equ	0xFF6
 21623                           tablat	equ	0xFF5
 21624                           prodh	equ	0xFF4
 21625                           prodl	equ	0xFF3
 21626                           intcon	equ	0xFF2
 21627                           indf0	equ	0xFEF
 21628                           postinc0	equ	0xFEE
 21629                           fsr0h	equ	0xFEA
 21630                           fsr0l	equ	0xFE9
 21631                           wreg	equ	0xFE8
 21632                           postdec1	equ	0xFE5
 21633                           fsr1h	equ	0xFE2
 21634                           fsr1l	equ	0xFE1
 21635                           indf2	equ	0xFDF
 21636                           postinc2	equ	0xFDE
 21637                           postdec2	equ	0xFDD
 21638                           fsr2h	equ	0xFDA
 21639                           fsr2l	equ	0xFD9
 21640                           status	equ	0xFD8
 21641                           
 21642 ;; *************** function ___lwtoft *****************
 21643 ;; Defined at:
 21644 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 21645 ;; Parameters:    Size  Location     Type
 21646 ;;  c               2    8[COMRAM] unsigned int 
 21647 ;; Auto vars:     Size  Location     Type
 21648 ;;		None
 21649 ;; Return value:  Size  Location     Type
 21650 ;;                  3    8[COMRAM] float 
 21651 ;; Registers used:
 21652 ;;		wreg, status,2, status,0, cstack
 21653 ;; Tracked objects:
 21654 ;;		On entry : 0/0
 21655 ;;		On exit  : 0/0
 21656 ;;		Unchanged: 0/0
 21657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21658 ;;      Params:         3       0       0       0       0       0       0
 21659 ;;      Locals:         0       0       0       0       0       0       0
 21660 ;;      Temps:          0       0       0       0       0       0       0
 21661 ;;      Totals:         3       0       0       0       0       0       0
 21662 ;;Total ram usage:        3 bytes
 21663 ;; Hardware stack levels used:    1
 21664 ;; Hardware stack levels required when called:    1
 21665 ;; This function calls:
 21666 ;;		___ftpack
 21667 ;; This function is called by:
 21668 ;;		_lerTransdutor
 21669 ;; This function uses a non-reentrant model
 21670 ;;
 21671                           
 21672                           	psect	text90
 21673  006D1A                     __ptext90:
 21674                           	opt stack 0
 21675  006D1A                     ___lwtoft:
 21676                           	opt stack 0
 21677  006D1A  FFFF               	dw	65535	; assembler added errata NOP
 21678                           
 21679                           ;incstack = 0
 21680  006D1C  C009  F001         	movff	___lwtoft@c,___ftpack@arg
 21681  006D20  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 21682  006D24  6A03               	clrf	___ftpack@arg+2,c
 21683  006D26  0E8E               	movlw	142
 21684  006D28  6E04               	movwf	___ftpack@exp,c
 21685  006D2A  0E00               	movlw	0
 21686  006D2C  6E05               	movwf	___ftpack@sign,c
 21687  006D2E  EC86  F01E         	call	___ftpack	;wreg free
 21688  006D32  C001  F009         	movff	?___ftpack,?___lwtoft
 21689  006D36  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
 21690  006D3A  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
 21691  006D3E  0012               	return		;funcret
 21692  006D40  FFFF               	dw	65535	; errata NOP
 21693  006D42                     __end_of___lwtoft:
 21694                           	opt stack 0
 21695                           tosu	equ	0xFFF
 21696                           tosh	equ	0xFFE
 21697                           tosl	equ	0xFFD
 21698                           pclatu	equ	0xFFB
 21699                           pclath	equ	0xFFA
 21700                           tblptru	equ	0xFF8
 21701                           tblptrh	equ	0xFF7
 21702                           tblptrl	equ	0xFF6
 21703                           tablat	equ	0xFF5
 21704                           prodh	equ	0xFF4
 21705                           prodl	equ	0xFF3
 21706                           intcon	equ	0xFF2
 21707                           indf0	equ	0xFEF
 21708                           postinc0	equ	0xFEE
 21709                           fsr0h	equ	0xFEA
 21710                           fsr0l	equ	0xFE9
 21711                           wreg	equ	0xFE8
 21712                           postdec1	equ	0xFE5
 21713                           fsr1h	equ	0xFE2
 21714                           fsr1l	equ	0xFE1
 21715                           indf2	equ	0xFDF
 21716                           postinc2	equ	0xFDE
 21717                           postdec2	equ	0xFDD
 21718                           fsr2h	equ	0xFDA
 21719                           fsr2l	equ	0xFD9
 21720                           status	equ	0xFD8
 21721                           
 21722 ;; *************** function ___fttol *****************
 21723 ;; Defined at:
 21724 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 21725 ;; Parameters:    Size  Location     Type
 21726 ;;  f1              3   26[COMRAM] float 
 21727 ;; Auto vars:     Size  Location     Type
 21728 ;;  lval            4   36[COMRAM] unsigned long 
 21729 ;;  exp1            1   40[COMRAM] unsigned char 
 21730 ;;  sign1           1   35[COMRAM] unsigned char 
 21731 ;; Return value:  Size  Location     Type
 21732 ;;                  4   26[COMRAM] long 
 21733 ;; Registers used:
 21734 ;;		wreg, status,2, status,0
 21735 ;; Tracked objects:
 21736 ;;		On entry : 0/0
 21737 ;;		On exit  : 0/0
 21738 ;;		Unchanged: 0/0
 21739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21740 ;;      Params:         4       0       0       0       0       0       0
 21741 ;;      Locals:         6       0       0       0       0       0       0
 21742 ;;      Temps:          5       0       0       0       0       0       0
 21743 ;;      Totals:        15       0       0       0       0       0       0
 21744 ;;Total ram usage:       15 bytes
 21745 ;; Hardware stack levels used:    1
 21746 ;; This function calls:
 21747 ;;		Nothing
 21748 ;; This function is called by:
 21749 ;;		_lerTransdutor
 21750 ;; This function uses a non-reentrant model
 21751 ;;
 21752                           
 21753                           	psect	text91
 21754  00373A                     __ptext91:
 21755                           	opt stack 0
 21756  00373A                     ___fttol:
 21757                           	opt stack 0
 21758  00373A  FFFF               	dw	65535	; assembler added errata NOP
 21759                           
 21760                           ;incstack = 0
 21761  00373C  C01D  F01F         	movff	___fttol@f1+2,??___fttol
 21762  003740  6A20               	clrf	(??___fttol+1)& (0+255),c
 21763  003742  6A21               	clrf	(??___fttol+2)& (0+255),c
 21764  003744  341C               	rlcf	___fttol@f1+1,w,c
 21765  003746  361F               	rlcf	??___fttol& (0+255),f,c
 21766  003748  E301               	bnc	u670_41
 21767  00374A  8020               	bsf	(??___fttol+1)& (0+255),0,c
 21768  00374C                     u670_41:
 21769  00374C  501F               	movf	??___fttol,w,c
 21770  00374E  6E29               	movwf	___fttol@exp1,c
 21771  003750  5029               	movf	___fttol@exp1,w,c
 21772  003752  B4D8               	btfsc	status,2,c
 21773  003754  D039               	goto	i2u675_40
 21774  003756  0E17               	movlw	23
 21775  003758  6E1F               	movwf	??___fttol& (0+255),c
 21776  00375A  C01B  F020         	movff	___fttol@f1,??___fttol+1
 21777  00375E  C01C  F021         	movff	___fttol@f1+1,??___fttol+2
 21778  003762  C01D  F022         	movff	___fttol@f1+2,??___fttol+3
 21779  003766  281F               	incf	??___fttol,w,c
 21780  003768  6E23               	movwf	(??___fttol+4)& (0+255),c
 21781  00376A  D005               	goto	i2u672_40
 21782  00376C                     i2u672_45:
 21783  00376C  FFFF               	dw	65535	; assembler added errata NOP
 21784  00376E  90D8               	bcf	status,0,c
 21785  003770  3222               	rrcf	??___fttol+3,f,c
 21786  003772  3221               	rrcf	??___fttol+2,f,c
 21787  003774  3220               	rrcf	??___fttol+1,f,c
 21788  003776                     i2u672_40:
 21789  003776  FFFF               	dw	65535	; assembler added errata NOP
 21790  003778  2E23               	decfsz	(??___fttol+4)& (0+255),f,c
 21791  00377A  D7F8               	goto	i2u672_45
 21792  00377C  5020               	movf	??___fttol+1,w,c
 21793  00377E  6E24               	movwf	___fttol@sign1,c
 21794  003780  8E1C               	bsf	___fttol@f1+1,7,c
 21795  003782  0EFF               	movlw	255
 21796  003784  161B               	andwf	___fttol@f1,f,c
 21797  003786  0EFF               	movlw	255
 21798  003788  161C               	andwf	___fttol@f1+1,f,c
 21799  00378A  0E00               	movlw	0
 21800  00378C  161D               	andwf	___fttol@f1+2,f,c
 21801  00378E  501B               	movf	___fttol@f1,w,c
 21802  003790  6E25               	movwf	___fttol@lval,c
 21803  003792  501C               	movf	___fttol@f1+1,w,c
 21804  003794  6E26               	movwf	___fttol@lval+1,c
 21805  003796  501D               	movf	___fttol@f1+2,w,c
 21806  003798  6E27               	movwf	___fttol@lval+2,c
 21807  00379A  6A28               	clrf	___fttol@lval+3,c
 21808  00379C  0E8E               	movlw	142
 21809  00379E  5E29               	subwf	___fttol@exp1,f,c
 21810  0037A0  AE29               	btfss	___fttol@exp1,7,c
 21811  0037A2  D00E               	goto	i2l1452
 21812  0037A4  5029               	movf	___fttol@exp1,w,c
 21813  0037A6  0A80               	xorlw	128
 21814  0037A8  0F8F               	addlw	143
 21815  0037AA  A0D8               	btfss	status,0,c
 21816  0037AC  D00D               	goto	i2u675_40
 21817  0037AE  FFFF               	dw	65535	; assembler added errata NOP
 21818  0037B0  90D8               	bcf	status,0,c
 21819  0037B2  3228               	rrcf	___fttol@lval+3,f,c
 21820  0037B4  3227               	rrcf	___fttol@lval+2,f,c
 21821  0037B6  3226               	rrcf	___fttol@lval+1,f,c
 21822  0037B8  3225               	rrcf	___fttol@lval,f,c
 21823  0037BA  3E29               	incfsz	___fttol@exp1,f,c
 21824  0037BC  D7F8               	goto	i2l1453
 21825  0037BE  D019               	goto	i2u676_40
 21826  0037C0                     i2l1452:
 21827  0037C0  FFFF               	dw	65535	; assembler added errata NOP
 21828  0037C2  0E17               	movlw	23
 21829  0037C4  6429               	cpfsgt	___fttol@exp1,c
 21830  0037C6  D011               	goto	i2l1458
 21831  0037C8                     i2u675_40:
 21832  0037C8  FFFF               	dw	65535	; assembler added errata NOP
 21833  0037CA  0E00               	movlw	0
 21834  0037CC  6E1B               	movwf	?___fttol,c
 21835  0037CE  0E00               	movlw	0
 21836  0037D0  6E1C               	movwf	?___fttol+1,c
 21837  0037D2  0E00               	movlw	0
 21838  0037D4  6E1D               	movwf	?___fttol+2,c
 21839  0037D6  0E00               	movlw	0
 21840  0037D8  6E1E               	movwf	?___fttol+3,c
 21841  0037DA  D020               	goto	i2l6292
 21842  0037DC  FFFF               	dw	65535	; assembler added errata NOP
 21843  0037DE  90D8               	bcf	status,0,c
 21844  0037E0  3625               	rlcf	___fttol@lval,f,c
 21845  0037E2  3626               	rlcf	___fttol@lval+1,f,c
 21846  0037E4  3627               	rlcf	___fttol@lval+2,f,c
 21847  0037E6  3628               	rlcf	___fttol@lval+3,f,c
 21848  0037E8  0629               	decf	___fttol@exp1,f,c
 21849  0037EA                     i2l1458:
 21850  0037EA  FFFF               	dw	65535	; assembler added errata NOP
 21851  0037EC  5029               	movf	___fttol@exp1,w,c
 21852  0037EE  A4D8               	btfss	status,2,c
 21853  0037F0  D7F5               	goto	i2l1459
 21854  0037F2                     i2u676_40:
 21855  0037F2  FFFF               	dw	65535	; assembler added errata NOP
 21856  0037F4  5024               	movf	___fttol@sign1,w,c
 21857  0037F6  B4D8               	btfsc	status,2,c
 21858  0037F8  D008               	goto	i2l1461
 21859  0037FA  1E28               	comf	___fttol@lval+3,f,c
 21860  0037FC  1E27               	comf	___fttol@lval+2,f,c
 21861  0037FE  1E26               	comf	___fttol@lval+1,f,c
 21862  003800  6C25               	negf	___fttol@lval,c
 21863  003802  0E00               	movlw	0
 21864  003804  2226               	addwfc	___fttol@lval+1,f,c
 21865  003806  2227               	addwfc	___fttol@lval+2,f,c
 21866  003808  2228               	addwfc	___fttol@lval+3,f,c
 21867  00380A                     i2l1461:
 21868  00380A  FFFF               	dw	65535	; assembler added errata NOP
 21869  00380C  C025  F01B         	movff	___fttol@lval,?___fttol
 21870  003810  C026  F01C         	movff	___fttol@lval+1,?___fttol+1
 21871  003814  C027  F01D         	movff	___fttol@lval+2,?___fttol+2
 21872  003818  C028  F01E         	movff	___fttol@lval+3,?___fttol+3
 21873  00381C                     i2l6292:
 21874  00381C  FFFF               	dw	65535	; assembler added errata NOP
 21875  00381E  0012               	return		;funcret
 21876  003820  FFFF               	dw	65535	; errata NOP
 21877  003822                     __end_of___fttol:
 21878                           	opt stack 0
 21879                           tosu	equ	0xFFF
 21880                           tosh	equ	0xFFE
 21881                           tosl	equ	0xFFD
 21882                           pclatu	equ	0xFFB
 21883                           pclath	equ	0xFFA
 21884                           tblptru	equ	0xFF8
 21885                           tblptrh	equ	0xFF7
 21886                           tblptrl	equ	0xFF6
 21887                           tablat	equ	0xFF5
 21888                           prodh	equ	0xFF4
 21889                           prodl	equ	0xFF3
 21890                           intcon	equ	0xFF2
 21891                           indf0	equ	0xFEF
 21892                           postinc0	equ	0xFEE
 21893                           fsr0h	equ	0xFEA
 21894                           fsr0l	equ	0xFE9
 21895                           wreg	equ	0xFE8
 21896                           postdec1	equ	0xFE5
 21897                           fsr1h	equ	0xFE2
 21898                           fsr1l	equ	0xFE1
 21899                           indf2	equ	0xFDF
 21900                           postinc2	equ	0xFDE
 21901                           postdec2	equ	0xFDD
 21902                           fsr2h	equ	0xFDA
 21903                           fsr2l	equ	0xFD9
 21904                           status	equ	0xFD8
 21905                           
 21906 ;; *************** function ___ftmul *****************
 21907 ;; Defined at:
 21908 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 21909 ;; Parameters:    Size  Location     Type
 21910 ;;  f1              3   11[COMRAM] float 
 21911 ;;  f2              3   14[COMRAM] float 
 21912 ;; Auto vars:     Size  Location     Type
 21913 ;;  f3_as_produc    3   21[COMRAM] unsigned um
 21914 ;;  sign            1   25[COMRAM] unsigned char 
 21915 ;;  cntr            1   24[COMRAM] unsigned char 
 21916 ;;  exp             1   20[COMRAM] unsigned char 
 21917 ;; Return value:  Size  Location     Type
 21918 ;;                  3   11[COMRAM] float 
 21919 ;; Registers used:
 21920 ;;		wreg, status,2, status,0, cstack
 21921 ;; Tracked objects:
 21922 ;;		On entry : 0/0
 21923 ;;		On exit  : 0/0
 21924 ;;		Unchanged: 0/0
 21925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21926 ;;      Params:         6       0       0       0       0       0       0
 21927 ;;      Locals:         6       0       0       0       0       0       0
 21928 ;;      Temps:          3       0       0       0       0       0       0
 21929 ;;      Totals:        15       0       0       0       0       0       0
 21930 ;;Total ram usage:       15 bytes
 21931 ;; Hardware stack levels used:    1
 21932 ;; Hardware stack levels required when called:    1
 21933 ;; This function calls:
 21934 ;;		___ftpack
 21935 ;; This function is called by:
 21936 ;;		_lerTransdutor
 21937 ;;		_map
 21938 ;; This function uses a non-reentrant model
 21939 ;;
 21940                           
 21941                           	psect	text92
 21942  003556                     __ptext92:
 21943                           	opt stack 0
 21944  003556                     ___ftmul:
 21945                           	opt stack 0
 21946  003556  FFFF               	dw	65535	; assembler added errata NOP
 21947                           
 21948                           ;incstack = 0
 21949  003558  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
 21950  00355C  6A13               	clrf	(??___ftmul+1)& (0+255),c
 21951  00355E  6A14               	clrf	(??___ftmul+2)& (0+255),c
 21952  003560  340D               	rlcf	___ftmul@f1+1,w,c
 21953  003562  3612               	rlcf	??___ftmul& (0+255),f,c
 21954  003564  E301               	bnc	u661_41
 21955  003566  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 21956  003568                     u661_41:
 21957  003568  5012               	movf	??___ftmul,w,c
 21958  00356A  6E15               	movwf	___ftmul@exp,c
 21959  00356C  5015               	movf	___ftmul@exp,w,c
 21960  00356E  B4D8               	btfsc	status,2,c
 21961  003570  D00D               	goto	i2u664_40
 21962  003572  C011  F012         	movff	___ftmul@f2+2,??___ftmul
 21963  003576  6A13               	clrf	(??___ftmul+1)& (0+255),c
 21964  003578  6A14               	clrf	(??___ftmul+2)& (0+255),c
 21965  00357A  3410               	rlcf	___ftmul@f2+1,w,c
 21966  00357C  3612               	rlcf	??___ftmul& (0+255),f,c
 21967  00357E  E301               	bnc	u663_41
 21968  003580  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 21969  003582                     u663_41:
 21970  003582  5012               	movf	??___ftmul,w,c
 21971  003584  6E1A               	movwf	___ftmul@sign,c
 21972  003586  501A               	movf	___ftmul@sign,w,c
 21973  003588  A4D8               	btfss	status,2,c
 21974  00358A  D008               	goto	i2l1431
 21975  00358C                     i2u664_40:
 21976  00358C  FFFF               	dw	65535	; assembler added errata NOP
 21977  00358E  0E00               	movlw	0
 21978  003590  6E0C               	movwf	?___ftmul,c
 21979  003592  0E00               	movlw	0
 21980  003594  6E0D               	movwf	?___ftmul+1,c
 21981  003596  0E00               	movlw	0
 21982  003598  6E0E               	movwf	?___ftmul+2,c
 21983  00359A  D056               	goto	i2l6228
 21984  00359C                     i2l1431:
 21985  00359C  FFFF               	dw	65535	; assembler added errata NOP
 21986  00359E  501A               	movf	___ftmul@sign,w,c
 21987  0035A0  0F7B               	addlw	123
 21988  0035A2  2615               	addwf	___ftmul@exp,f,c
 21989  0035A4  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
 21990  0035A8  5011               	movf	___ftmul@f2+2,w,c
 21991  0035AA  1A1A               	xorwf	___ftmul@sign,f,c
 21992  0035AC  0E80               	movlw	128
 21993  0035AE  161A               	andwf	___ftmul@sign,f,c
 21994  0035B0  8E0D               	bsf	___ftmul@f1+1,7,c
 21995  0035B2  8E10               	bsf	___ftmul@f2+1,7,c
 21996  0035B4  0EFF               	movlw	255
 21997  0035B6  160F               	andwf	___ftmul@f2,f,c
 21998  0035B8  0EFF               	movlw	255
 21999  0035BA  1610               	andwf	___ftmul@f2+1,f,c
 22000  0035BC  0E00               	movlw	0
 22001  0035BE  1611               	andwf	___ftmul@f2+2,f,c
 22002  0035C0  0E00               	movlw	0
 22003  0035C2  6E16               	movwf	___ftmul@f3_as_product,c
 22004  0035C4  0E00               	movlw	0
 22005  0035C6  6E17               	movwf	___ftmul@f3_as_product+1,c
 22006  0035C8  0E00               	movlw	0
 22007  0035CA  6E18               	movwf	___ftmul@f3_as_product+2,c
 22008  0035CC  0E07               	movlw	7
 22009  0035CE  6E19               	movwf	___ftmul@cntr,c
 22010  0035D0  FFFF               	dw	65535	; assembler added errata NOP
 22011  0035D2  A00C               	btfss	___ftmul@f1,0,c
 22012  0035D4  D006               	goto	i2l1433
 22013  0035D6  500F               	movf	___ftmul@f2,w,c
 22014  0035D8  2616               	addwf	___ftmul@f3_as_product,f,c
 22015  0035DA  5010               	movf	___ftmul@f2+1,w,c
 22016  0035DC  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 22017  0035DE  5011               	movf	___ftmul@f2+2,w,c
 22018  0035E0  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 22019  0035E2                     i2l1433:
 22020  0035E2  FFFF               	dw	65535	; assembler added errata NOP
 22021  0035E4  90D8               	bcf	status,0,c
 22022  0035E6  320E               	rrcf	___ftmul@f1+2,f,c
 22023  0035E8  320D               	rrcf	___ftmul@f1+1,f,c
 22024  0035EA  320C               	rrcf	___ftmul@f1,f,c
 22025  0035EC  90D8               	bcf	status,0,c
 22026  0035EE  360F               	rlcf	___ftmul@f2,f,c
 22027  0035F0  3610               	rlcf	___ftmul@f2+1,f,c
 22028  0035F2  3611               	rlcf	___ftmul@f2+2,f,c
 22029  0035F4  2E19               	decfsz	___ftmul@cntr,f,c
 22030  0035F6  D7EC               	goto	i2l1432
 22031  0035F8  0E09               	movlw	9
 22032  0035FA  6E19               	movwf	___ftmul@cntr,c
 22033  0035FC  FFFF               	dw	65535	; assembler added errata NOP
 22034  0035FE  A00C               	btfss	___ftmul@f1,0,c
 22035  003600  D006               	goto	i2l1436
 22036  003602  500F               	movf	___ftmul@f2,w,c
 22037  003604  2616               	addwf	___ftmul@f3_as_product,f,c
 22038  003606  5010               	movf	___ftmul@f2+1,w,c
 22039  003608  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 22040  00360A  5011               	movf	___ftmul@f2+2,w,c
 22041  00360C  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 22042  00360E                     i2l1436:
 22043  00360E  FFFF               	dw	65535	; assembler added errata NOP
 22044  003610  90D8               	bcf	status,0,c
 22045  003612  320E               	rrcf	___ftmul@f1+2,f,c
 22046  003614  320D               	rrcf	___ftmul@f1+1,f,c
 22047  003616  320C               	rrcf	___ftmul@f1,f,c
 22048  003618  90D8               	bcf	status,0,c
 22049  00361A  3218               	rrcf	___ftmul@f3_as_product+2,f,c
 22050  00361C  3217               	rrcf	___ftmul@f3_as_product+1,f,c
 22051  00361E  3216               	rrcf	___ftmul@f3_as_product,f,c
 22052  003620  2E19               	decfsz	___ftmul@cntr,f,c
 22053  003622  D7EC               	goto	i2l1435
 22054  003624  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 22055  003628  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 22056  00362C  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 22057  003630  C015  F004         	movff	___ftmul@exp,___ftpack@exp
 22058  003634  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
 22059  003638  EC86  F01E         	call	___ftpack	;wreg free
 22060  00363C  C001  F00C         	movff	?___ftpack,?___ftmul
 22061  003640  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
 22062  003644  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
 22063  003648                     i2l6228:
 22064  003648  FFFF               	dw	65535	; assembler added errata NOP
 22065  00364A  0012               	return		;funcret
 22066  00364C  FFFF               	dw	65535	; errata NOP
 22067  00364E                     __end_of___ftmul:
 22068                           	opt stack 0
 22069                           tosu	equ	0xFFF
 22070                           tosh	equ	0xFFE
 22071                           tosl	equ	0xFFD
 22072                           pclatu	equ	0xFFB
 22073                           pclath	equ	0xFFA
 22074                           tblptru	equ	0xFF8
 22075                           tblptrh	equ	0xFF7
 22076                           tblptrl	equ	0xFF6
 22077                           tablat	equ	0xFF5
 22078                           prodh	equ	0xFF4
 22079                           prodl	equ	0xFF3
 22080                           intcon	equ	0xFF2
 22081                           indf0	equ	0xFEF
 22082                           postinc0	equ	0xFEE
 22083                           fsr0h	equ	0xFEA
 22084                           fsr0l	equ	0xFE9
 22085                           wreg	equ	0xFE8
 22086                           postdec1	equ	0xFE5
 22087                           fsr1h	equ	0xFE2
 22088                           fsr1l	equ	0xFE1
 22089                           indf2	equ	0xFDF
 22090                           postinc2	equ	0xFDE
 22091                           postdec2	equ	0xFDD
 22092                           fsr2h	equ	0xFDA
 22093                           fsr2l	equ	0xFD9
 22094                           status	equ	0xFD8
 22095                           
 22096 ;; *************** function ___ftge *****************
 22097 ;; Defined at:
 22098 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 22099 ;; Parameters:    Size  Location     Type
 22100 ;;  ff1             3    0[COMRAM] float 
 22101 ;;  ff2             3    3[COMRAM] float 
 22102 ;; Auto vars:     Size  Location     Type
 22103 ;;		None
 22104 ;; Return value:  Size  Location     Type
 22105 ;;		None               void
 22106 ;; Registers used:
 22107 ;;		wreg, status,2, status,0
 22108 ;; Tracked objects:
 22109 ;;		On entry : 0/0
 22110 ;;		On exit  : 0/0
 22111 ;;		Unchanged: 0/0
 22112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22113 ;;      Params:         6       0       0       0       0       0       0
 22114 ;;      Locals:         0       0       0       0       0       0       0
 22115 ;;      Temps:          3       0       0       0       0       0       0
 22116 ;;      Totals:         9       0       0       0       0       0       0
 22117 ;;Total ram usage:        9 bytes
 22118 ;; Hardware stack levels used:    1
 22119 ;; This function calls:
 22120 ;;		Nothing
 22121 ;; This function is called by:
 22122 ;;		_lerTransdutor
 22123 ;; This function uses a non-reentrant model
 22124 ;;
 22125                           
 22126                           	psect	text93
 22127  003DD0                     __ptext93:
 22128                           	opt stack 0
 22129  003DD0                     ___ftge:
 22130                           	opt stack 0
 22131  003DD0  FFFF               	dw	65535	; assembler added errata NOP
 22132                           
 22133                           ;incstack = 0
 22134  003DD2  AE03               	btfss	___ftge@ff1+2,7,c
 22135  003DD4  D016               	goto	i2l1422
 22136  003DD6  C001  F007         	movff	___ftge@ff1,??___ftge
 22137  003DDA  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 22138  003DDE  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 22139  003DE2  1E07               	comf	??___ftge,f,c
 22140  003DE4  1E08               	comf	??___ftge+1,f,c
 22141  003DE6  1E09               	comf	??___ftge+2,f,c
 22142  003DE8  2A07               	incf	??___ftge,f,c
 22143  003DEA  0E00               	movlw	0
 22144  003DEC  2208               	addwfc	??___ftge+1,f,c
 22145  003DEE  2209               	addwfc	??___ftge+2,f,c
 22146  003DF0  0E00               	movlw	0
 22147  003DF2  2407               	addwf	??___ftge,w,c
 22148  003DF4  6E01               	movwf	___ftge@ff1,c
 22149  003DF6  0E00               	movlw	0
 22150  003DF8  2008               	addwfc	??___ftge+1,w,c
 22151  003DFA  6E02               	movwf	___ftge@ff1+1,c
 22152  003DFC  0E80               	movlw	128
 22153  003DFE  2009               	addwfc	??___ftge+2,w,c
 22154  003E00  6E03               	movwf	___ftge@ff1+2,c
 22155  003E02                     i2l1422:
 22156  003E02  FFFF               	dw	65535	; assembler added errata NOP
 22157  003E04  AE06               	btfss	___ftge@ff2+2,7,c
 22158  003E06  D016               	goto	i2l1423
 22159  003E08  C004  F007         	movff	___ftge@ff2,??___ftge
 22160  003E0C  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 22161  003E10  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 22162  003E14  1E07               	comf	??___ftge,f,c
 22163  003E16  1E08               	comf	??___ftge+1,f,c
 22164  003E18  1E09               	comf	??___ftge+2,f,c
 22165  003E1A  2A07               	incf	??___ftge,f,c
 22166  003E1C  0E00               	movlw	0
 22167  003E1E  2208               	addwfc	??___ftge+1,f,c
 22168  003E20  2209               	addwfc	??___ftge+2,f,c
 22169  003E22  0E00               	movlw	0
 22170  003E24  2407               	addwf	??___ftge,w,c
 22171  003E26  6E04               	movwf	___ftge@ff2,c
 22172  003E28  0E00               	movlw	0
 22173  003E2A  2008               	addwfc	??___ftge+1,w,c
 22174  003E2C  6E05               	movwf	___ftge@ff2+1,c
 22175  003E2E  0E80               	movlw	128
 22176  003E30  2009               	addwfc	??___ftge+2,w,c
 22177  003E32  6E06               	movwf	___ftge@ff2+2,c
 22178  003E34                     i2l1423:
 22179  003E34  FFFF               	dw	65535	; assembler added errata NOP
 22180  003E36  0E00               	movlw	0
 22181  003E38  1A01               	xorwf	___ftge@ff1,f,c
 22182  003E3A  0E00               	movlw	0
 22183  003E3C  1A02               	xorwf	___ftge@ff1+1,f,c
 22184  003E3E  0E80               	movlw	128
 22185  003E40  1A03               	xorwf	___ftge@ff1+2,f,c
 22186  003E42  0E00               	movlw	0
 22187  003E44  1A04               	xorwf	___ftge@ff2,f,c
 22188  003E46  0E00               	movlw	0
 22189  003E48  1A05               	xorwf	___ftge@ff2+1,f,c
 22190  003E4A  0E80               	movlw	128
 22191  003E4C  1A06               	xorwf	___ftge@ff2+2,f,c
 22192  003E4E  5004               	movf	___ftge@ff2,w,c
 22193  003E50  5C01               	subwf	___ftge@ff1,w,c
 22194  003E52  5005               	movf	___ftge@ff2+1,w,c
 22195  003E54  5802               	subwfb	___ftge@ff1+1,w,c
 22196  003E56  5006               	movf	___ftge@ff2+2,w,c
 22197  003E58  5803               	subwfb	___ftge@ff1+2,w,c
 22198  003E5A  B0D8               	btfsc	status,0,c
 22199  003E5C  D002               	goto	i2l4862
 22200  003E5E  90D8               	bcf	status,0,c
 22201  003E60  D002               	goto	i2l4864
 22202  003E62                     i2l4862:
 22203  003E62  FFFF               	dw	65535	; assembler added errata NOP
 22204  003E64  80D8               	bsf	status,0,c
 22205  003E66                     i2l4864:
 22206  003E66  FFFF               	dw	65535	; assembler added errata NOP
 22207  003E68  0012               	return		;funcret
 22208  003E6A  FFFF               	dw	65535	; errata NOP
 22209  003E6C                     __end_of___ftge:
 22210                           	opt stack 0
 22211                           tosu	equ	0xFFF
 22212                           tosh	equ	0xFFE
 22213                           tosl	equ	0xFFD
 22214                           pclatu	equ	0xFFB
 22215                           pclath	equ	0xFFA
 22216                           tblptru	equ	0xFF8
 22217                           tblptrh	equ	0xFF7
 22218                           tblptrl	equ	0xFF6
 22219                           tablat	equ	0xFF5
 22220                           prodh	equ	0xFF4
 22221                           prodl	equ	0xFF3
 22222                           intcon	equ	0xFF2
 22223                           indf0	equ	0xFEF
 22224                           postinc0	equ	0xFEE
 22225                           fsr0h	equ	0xFEA
 22226                           fsr0l	equ	0xFE9
 22227                           wreg	equ	0xFE8
 22228                           postdec1	equ	0xFE5
 22229                           fsr1h	equ	0xFE2
 22230                           fsr1l	equ	0xFE1
 22231                           indf2	equ	0xFDF
 22232                           postinc2	equ	0xFDE
 22233                           postdec2	equ	0xFDD
 22234                           fsr2h	equ	0xFDA
 22235                           fsr2l	equ	0xFD9
 22236                           status	equ	0xFD8
 22237                           
 22238 ;; *************** function ___ftdiv *****************
 22239 ;; Defined at:
 22240 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 22241 ;; Parameters:    Size  Location     Type
 22242 ;;  f1              3   26[COMRAM] float 
 22243 ;;  f2              3   29[COMRAM] float 
 22244 ;; Auto vars:     Size  Location     Type
 22245 ;;  f3              3   36[COMRAM] float 
 22246 ;;  sign            1   40[COMRAM] unsigned char 
 22247 ;;  exp             1   39[COMRAM] unsigned char 
 22248 ;;  cntr            1   35[COMRAM] unsigned char 
 22249 ;; Return value:  Size  Location     Type
 22250 ;;                  3   26[COMRAM] float 
 22251 ;; Registers used:
 22252 ;;		wreg, status,2, status,0, cstack
 22253 ;; Tracked objects:
 22254 ;;		On entry : 0/0
 22255 ;;		On exit  : 0/0
 22256 ;;		Unchanged: 0/0
 22257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22258 ;;      Params:         6       0       0       0       0       0       0
 22259 ;;      Locals:         6       0       0       0       0       0       0
 22260 ;;      Temps:          3       0       0       0       0       0       0
 22261 ;;      Totals:        15       0       0       0       0       0       0
 22262 ;;Total ram usage:       15 bytes
 22263 ;; Hardware stack levels used:    1
 22264 ;; Hardware stack levels required when called:    1
 22265 ;; This function calls:
 22266 ;;		___ftpack
 22267 ;; This function is called by:
 22268 ;;		_lerTransdutor
 22269 ;;		_map
 22270 ;; This function uses a non-reentrant model
 22271 ;;
 22272                           
 22273                           	psect	text94
 22274  003822                     __ptext94:
 22275                           	opt stack 0
 22276  003822                     ___ftdiv:
 22277                           	opt stack 0
 22278  003822  FFFF               	dw	65535	; assembler added errata NOP
 22279                           
 22280                           ;incstack = 0
 22281  003824  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
 22282  003828  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 22283  00382A  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 22284  00382C  341C               	rlcf	___ftdiv@f1+1,w,c
 22285  00382E  3621               	rlcf	??___ftdiv& (0+255),f,c
 22286  003830  E301               	bnc	u656_41
 22287  003832  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 22288  003834                     u656_41:
 22289  003834  5021               	movf	??___ftdiv,w,c
 22290  003836  6E28               	movwf	___ftdiv@exp,c
 22291  003838  5028               	movf	___ftdiv@exp,w,c
 22292  00383A  B4D8               	btfsc	status,2,c
 22293  00383C  D00D               	goto	i2u659_40
 22294  00383E  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
 22295  003842  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 22296  003844  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 22297  003846  341F               	rlcf	___ftdiv@f2+1,w,c
 22298  003848  3621               	rlcf	??___ftdiv& (0+255),f,c
 22299  00384A  E301               	bnc	u658_41
 22300  00384C  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 22301  00384E                     u658_41:
 22302  00384E  5021               	movf	??___ftdiv,w,c
 22303  003850  6E29               	movwf	___ftdiv@sign,c
 22304  003852  5029               	movf	___ftdiv@sign,w,c
 22305  003854  A4D8               	btfss	status,2,c
 22306  003856  D008               	goto	i2l1416
 22307  003858                     i2u659_40:
 22308  003858  FFFF               	dw	65535	; assembler added errata NOP
 22309  00385A  0E00               	movlw	0
 22310  00385C  6E1B               	movwf	?___ftdiv,c
 22311  00385E  0E00               	movlw	0
 22312  003860  6E1C               	movwf	?___ftdiv+1,c
 22313  003862  0E00               	movlw	0
 22314  003864  6E1D               	movwf	?___ftdiv+2,c
 22315  003866  D04D               	goto	i2l6180
 22316  003868                     i2l1416:
 22317  003868  FFFF               	dw	65535	; assembler added errata NOP
 22318  00386A  0E00               	movlw	0
 22319  00386C  6E25               	movwf	___ftdiv@f3,c
 22320  00386E  0E00               	movlw	0
 22321  003870  6E26               	movwf	___ftdiv@f3+1,c
 22322  003872  0E00               	movlw	0
 22323  003874  6E27               	movwf	___ftdiv@f3+2,c
 22324  003876  5029               	movf	___ftdiv@sign,w,c
 22325  003878  0F89               	addlw	137
 22326  00387A  5E28               	subwf	___ftdiv@exp,f,c
 22327  00387C  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
 22328  003880  5020               	movf	___ftdiv@f2+2,w,c
 22329  003882  1A29               	xorwf	___ftdiv@sign,f,c
 22330  003884  0E80               	movlw	128
 22331  003886  1629               	andwf	___ftdiv@sign,f,c
 22332  003888  8E1C               	bsf	___ftdiv@f1+1,7,c
 22333  00388A  0EFF               	movlw	255
 22334  00388C  161B               	andwf	___ftdiv@f1,f,c
 22335  00388E  0EFF               	movlw	255
 22336  003890  161C               	andwf	___ftdiv@f1+1,f,c
 22337  003892  0E00               	movlw	0
 22338  003894  161D               	andwf	___ftdiv@f1+2,f,c
 22339  003896  8E1F               	bsf	___ftdiv@f2+1,7,c
 22340  003898  0EFF               	movlw	255
 22341  00389A  161E               	andwf	___ftdiv@f2,f,c
 22342  00389C  0EFF               	movlw	255
 22343  00389E  161F               	andwf	___ftdiv@f2+1,f,c
 22344  0038A0  0E00               	movlw	0
 22345  0038A2  1620               	andwf	___ftdiv@f2+2,f,c
 22346  0038A4  0E18               	movlw	24
 22347  0038A6  6E24               	movwf	___ftdiv@cntr,c
 22348  0038A8  FFFF               	dw	65535	; assembler added errata NOP
 22349  0038AA  90D8               	bcf	status,0,c
 22350  0038AC  3625               	rlcf	___ftdiv@f3,f,c
 22351  0038AE  3626               	rlcf	___ftdiv@f3+1,f,c
 22352  0038B0  3627               	rlcf	___ftdiv@f3+2,f,c
 22353  0038B2  501E               	movf	___ftdiv@f2,w,c
 22354  0038B4  5C1B               	subwf	___ftdiv@f1,w,c
 22355  0038B6  501F               	movf	___ftdiv@f2+1,w,c
 22356  0038B8  581C               	subwfb	___ftdiv@f1+1,w,c
 22357  0038BA  5020               	movf	___ftdiv@f2+2,w,c
 22358  0038BC  581D               	subwfb	___ftdiv@f1+2,w,c
 22359  0038BE  A0D8               	btfss	status,0,c
 22360  0038C0  D007               	goto	i2l1418
 22361  0038C2  501E               	movf	___ftdiv@f2,w,c
 22362  0038C4  5E1B               	subwf	___ftdiv@f1,f,c
 22363  0038C6  501F               	movf	___ftdiv@f2+1,w,c
 22364  0038C8  5A1C               	subwfb	___ftdiv@f1+1,f,c
 22365  0038CA  5020               	movf	___ftdiv@f2+2,w,c
 22366  0038CC  5A1D               	subwfb	___ftdiv@f1+2,f,c
 22367  0038CE  8025               	bsf	___ftdiv@f3,0,c
 22368  0038D0                     i2l1418:
 22369  0038D0  FFFF               	dw	65535	; assembler added errata NOP
 22370  0038D2  90D8               	bcf	status,0,c
 22371  0038D4  361B               	rlcf	___ftdiv@f1,f,c
 22372  0038D6  361C               	rlcf	___ftdiv@f1+1,f,c
 22373  0038D8  361D               	rlcf	___ftdiv@f1+2,f,c
 22374  0038DA  2E24               	decfsz	___ftdiv@cntr,f,c
 22375  0038DC  D7E5               	goto	i2l1417
 22376  0038DE  C025  F001         	movff	___ftdiv@f3,___ftpack@arg
 22377  0038E2  C026  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 22378  0038E6  C027  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 22379  0038EA  C028  F004         	movff	___ftdiv@exp,___ftpack@exp
 22380  0038EE  C029  F005         	movff	___ftdiv@sign,___ftpack@sign
 22381  0038F2  EC86  F01E         	call	___ftpack	;wreg free
 22382  0038F6  C001  F01B         	movff	?___ftpack,?___ftdiv
 22383  0038FA  C002  F01C         	movff	?___ftpack+1,?___ftdiv+1
 22384  0038FE  C003  F01D         	movff	?___ftpack+2,?___ftdiv+2
 22385  003902                     i2l6180:
 22386  003902  FFFF               	dw	65535	; assembler added errata NOP
 22387  003904  0012               	return		;funcret
 22388  003906  FFFF               	dw	65535	; errata NOP
 22389  003908                     __end_of___ftdiv:
 22390                           	opt stack 0
 22391                           tosu	equ	0xFFF
 22392                           tosh	equ	0xFFE
 22393                           tosl	equ	0xFFD
 22394                           pclatu	equ	0xFFB
 22395                           pclath	equ	0xFFA
 22396                           tblptru	equ	0xFF8
 22397                           tblptrh	equ	0xFF7
 22398                           tblptrl	equ	0xFF6
 22399                           tablat	equ	0xFF5
 22400                           prodh	equ	0xFF4
 22401                           prodl	equ	0xFF3
 22402                           intcon	equ	0xFF2
 22403                           indf0	equ	0xFEF
 22404                           postinc0	equ	0xFEE
 22405                           fsr0h	equ	0xFEA
 22406                           fsr0l	equ	0xFE9
 22407                           wreg	equ	0xFE8
 22408                           postdec1	equ	0xFE5
 22409                           fsr1h	equ	0xFE2
 22410                           fsr1l	equ	0xFE1
 22411                           indf2	equ	0xFDF
 22412                           postinc2	equ	0xFDE
 22413                           postdec2	equ	0xFDD
 22414                           fsr2h	equ	0xFDA
 22415                           fsr2l	equ	0xFD9
 22416                           status	equ	0xFD8
 22417                           
 22418 ;; *************** function ___ftadd *****************
 22419 ;; Defined at:
 22420 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 22421 ;; Parameters:    Size  Location     Type
 22422 ;;  f1              3   26[COMRAM] float 
 22423 ;;  f2              3   29[COMRAM] float 
 22424 ;; Auto vars:     Size  Location     Type
 22425 ;;  exp1            1   37[COMRAM] unsigned char 
 22426 ;;  exp2            1   36[COMRAM] unsigned char 
 22427 ;;  sign            1   35[COMRAM] unsigned char 
 22428 ;; Return value:  Size  Location     Type
 22429 ;;                  3   26[COMRAM] float 
 22430 ;; Registers used:
 22431 ;;		wreg, status,2, status,0, cstack
 22432 ;; Tracked objects:
 22433 ;;		On entry : 0/0
 22434 ;;		On exit  : 0/0
 22435 ;;		Unchanged: 0/0
 22436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22437 ;;      Params:         6       0       0       0       0       0       0
 22438 ;;      Locals:         3       0       0       0       0       0       0
 22439 ;;      Temps:          3       0       0       0       0       0       0
 22440 ;;      Totals:        12       0       0       0       0       0       0
 22441 ;;Total ram usage:       12 bytes
 22442 ;; Hardware stack levels used:    1
 22443 ;; Hardware stack levels required when called:    1
 22444 ;; This function calls:
 22445 ;;		___ftpack
 22446 ;; This function is called by:
 22447 ;;		_lerTransdutor
 22448 ;;		_map
 22449 ;; This function uses a non-reentrant model
 22450 ;;
 22451                           
 22452                           	psect	text95
 22453  00281E                     __ptext95:
 22454                           	opt stack 0
 22455  00281E                     ___ftadd:
 22456                           	opt stack 0
 22457  00281E  FFFF               	dw	65535	; assembler added errata NOP
 22458                           
 22459                           ;incstack = 0
 22460  002820  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
 22461  002824  6A22               	clrf	(??___ftadd+1)& (0+255),c
 22462  002826  6A23               	clrf	(??___ftadd+2)& (0+255),c
 22463  002828  341C               	rlcf	___ftadd@f1+1,w,c
 22464  00282A  3621               	rlcf	??___ftadd& (0+255),f,c
 22465  00282C  E301               	bnc	u635_41
 22466  00282E  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 22467  002830                     u635_41:
 22468  002830  5021               	movf	??___ftadd,w,c
 22469  002832  6E26               	movwf	___ftadd@exp1,c
 22470  002834  C020  F021         	movff	___ftadd@f2+2,??___ftadd
 22471  002838  6A22               	clrf	(??___ftadd+1)& (0+255),c
 22472  00283A  6A23               	clrf	(??___ftadd+2)& (0+255),c
 22473  00283C  341F               	rlcf	___ftadd@f2+1,w,c
 22474  00283E  3621               	rlcf	??___ftadd& (0+255),f,c
 22475  002840  E301               	bnc	u636_41
 22476  002842  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 22477  002844                     u636_41:
 22478  002844  5021               	movf	??___ftadd,w,c
 22479  002846  6E25               	movwf	___ftadd@exp2,c
 22480  002848  5026               	movf	___ftadd@exp1,w,c
 22481  00284A  B4D8               	btfsc	status,2,c
 22482  00284C  D00B               	goto	i2u639_40
 22483  00284E  5025               	movf	___ftadd@exp2,w,c
 22484  002850  5C26               	subwf	___ftadd@exp1,w,c
 22485  002852  B0D8               	btfsc	status,0,c
 22486  002854  D00F               	goto	i2l1381
 22487  002856  5026               	movf	___ftadd@exp1,w,c
 22488  002858  0800               	sublw	0
 22489  00285A  2425               	addwf	___ftadd@exp2,w,c
 22490  00285C  6E21               	movwf	??___ftadd& (0+255),c
 22491  00285E  0E18               	movlw	24
 22492  002860  6421               	cpfsgt	??___ftadd,c
 22493  002862  D008               	goto	i2l1381
 22494  002864                     i2u639_40:
 22495  002864  FFFF               	dw	65535	; assembler added errata NOP
 22496  002866  C01E  F01B         	movff	___ftadd@f2,?___ftadd
 22497  00286A  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
 22498  00286E  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
 22499  002872  D0BA               	goto	i2l6134
 22500  002874                     i2l1381:
 22501  002874  FFFF               	dw	65535	; assembler added errata NOP
 22502  002876  5025               	movf	___ftadd@exp2,w,c
 22503  002878  B4D8               	btfsc	status,2,c
 22504  00287A  D00B               	goto	i2u642_40
 22505  00287C  5026               	movf	___ftadd@exp1,w,c
 22506  00287E  5C25               	subwf	___ftadd@exp2,w,c
 22507  002880  B0D8               	btfsc	status,0,c
 22508  002882  D00F               	goto	i2l1385
 22509  002884  5025               	movf	___ftadd@exp2,w,c
 22510  002886  0800               	sublw	0
 22511  002888  2426               	addwf	___ftadd@exp1,w,c
 22512  00288A  6E21               	movwf	??___ftadd& (0+255),c
 22513  00288C  0E18               	movlw	24
 22514  00288E  6421               	cpfsgt	??___ftadd,c
 22515  002890  D008               	goto	i2l1385
 22516  002892                     i2u642_40:
 22517  002892  FFFF               	dw	65535	; assembler added errata NOP
 22518  002894  C01B  F01B         	movff	___ftadd@f1,?___ftadd
 22519  002898  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
 22520  00289C  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
 22521  0028A0  D0A3               	goto	i2l6134
 22522  0028A2                     i2l1385:
 22523  0028A2  FFFF               	dw	65535	; assembler added errata NOP
 22524  0028A4  0E06               	movlw	6
 22525  0028A6  6E24               	movwf	___ftadd@sign,c
 22526  0028A8  BE1D               	btfsc	___ftadd@f1+2,7,c
 22527  0028AA  8E24               	bsf	___ftadd@sign,7,c
 22528  0028AC  BE20               	btfsc	___ftadd@f2+2,7,c
 22529  0028AE  8C24               	bsf	___ftadd@sign,6,c
 22530  0028B0  8E1C               	bsf	___ftadd@f1+1,7,c
 22531  0028B2  0EFF               	movlw	255
 22532  0028B4  161B               	andwf	___ftadd@f1,f,c
 22533  0028B6  0EFF               	movlw	255
 22534  0028B8  161C               	andwf	___ftadd@f1+1,f,c
 22535  0028BA  0E00               	movlw	0
 22536  0028BC  161D               	andwf	___ftadd@f1+2,f,c
 22537  0028BE  8E1F               	bsf	___ftadd@f2+1,7,c
 22538  0028C0  0EFF               	movlw	255
 22539  0028C2  161E               	andwf	___ftadd@f2,f,c
 22540  0028C4  0EFF               	movlw	255
 22541  0028C6  161F               	andwf	___ftadd@f2+1,f,c
 22542  0028C8  0E00               	movlw	0
 22543  0028CA  1620               	andwf	___ftadd@f2+2,f,c
 22544  0028CC  5025               	movf	___ftadd@exp2,w,c
 22545  0028CE  5C26               	subwf	___ftadd@exp1,w,c
 22546  0028D0  B0D8               	btfsc	status,0,c
 22547  0028D2  D01E               	goto	i2l1390
 22548  0028D4                     i2u645_40:
 22549  0028D4  FFFF               	dw	65535	; assembler added errata NOP
 22550  0028D6  90D8               	bcf	status,0,c
 22551  0028D8  361E               	rlcf	___ftadd@f2,f,c
 22552  0028DA  361F               	rlcf	___ftadd@f2+1,f,c
 22553  0028DC  3620               	rlcf	___ftadd@f2+2,f,c
 22554  0028DE  0625               	decf	___ftadd@exp2,f,c
 22555  0028E0  5026               	movf	___ftadd@exp1,w,c
 22556  0028E2  1825               	xorwf	___ftadd@exp2,w,c
 22557  0028E4  B4D8               	btfsc	status,2,c
 22558  0028E6  D00E               	goto	i2l1395
 22559  0028E8  0624               	decf	___ftadd@sign,f,c
 22560  0028EA  C024  F021         	movff	___ftadd@sign,??___ftadd
 22561  0028EE  0E07               	movlw	7
 22562  0028F0  1621               	andwf	??___ftadd,f,c
 22563  0028F2  B4D8               	btfsc	status,2,c
 22564  0028F4  D007               	goto	i2l1395
 22565  0028F6  D7EE               	goto	i2u645_40
 22566  0028F8  FFFF               	dw	65535	; assembler added errata NOP
 22567  0028FA  90D8               	bcf	status,0,c
 22568  0028FC  321D               	rrcf	___ftadd@f1+2,f,c
 22569  0028FE  321C               	rrcf	___ftadd@f1+1,f,c
 22570  002900  321B               	rrcf	___ftadd@f1,f,c
 22571  002902  2A26               	incf	___ftadd@exp1,f,c
 22572  002904                     i2l1395:
 22573  002904  FFFF               	dw	65535	; assembler added errata NOP
 22574  002906  5025               	movf	___ftadd@exp2,w,c
 22575  002908  1826               	xorwf	___ftadd@exp1,w,c
 22576  00290A  B4D8               	btfsc	status,2,c
 22577  00290C  D023               	goto	i2u652_40
 22578  00290E  D7F4               	goto	i2l1396
 22579  002910                     i2l1390:
 22580  002910  FFFF               	dw	65535	; assembler added errata NOP
 22581  002912  5026               	movf	___ftadd@exp1,w,c
 22582  002914  5C25               	subwf	___ftadd@exp2,w,c
 22583  002916  B0D8               	btfsc	status,0,c
 22584  002918  D01D               	goto	i2u652_40
 22585  00291A                     i2u649_40:
 22586  00291A  FFFF               	dw	65535	; assembler added errata NOP
 22587  00291C  90D8               	bcf	status,0,c
 22588  00291E  361B               	rlcf	___ftadd@f1,f,c
 22589  002920  361C               	rlcf	___ftadd@f1+1,f,c
 22590  002922  361D               	rlcf	___ftadd@f1+2,f,c
 22591  002924  0626               	decf	___ftadd@exp1,f,c
 22592  002926  5026               	movf	___ftadd@exp1,w,c
 22593  002928  1825               	xorwf	___ftadd@exp2,w,c
 22594  00292A  B4D8               	btfsc	status,2,c
 22595  00292C  D00E               	goto	i2l1404
 22596  00292E  0624               	decf	___ftadd@sign,f,c
 22597  002930  C024  F021         	movff	___ftadd@sign,??___ftadd
 22598  002934  0E07               	movlw	7
 22599  002936  1621               	andwf	??___ftadd,f,c
 22600  002938  B4D8               	btfsc	status,2,c
 22601  00293A  D007               	goto	i2l1404
 22602  00293C  D7EE               	goto	i2u649_40
 22603  00293E  FFFF               	dw	65535	; assembler added errata NOP
 22604  002940  90D8               	bcf	status,0,c
 22605  002942  3220               	rrcf	___ftadd@f2+2,f,c
 22606  002944  321F               	rrcf	___ftadd@f2+1,f,c
 22607  002946  321E               	rrcf	___ftadd@f2,f,c
 22608  002948  2A25               	incf	___ftadd@exp2,f,c
 22609  00294A                     i2l1404:
 22610  00294A  FFFF               	dw	65535	; assembler added errata NOP
 22611  00294C  5025               	movf	___ftadd@exp2,w,c
 22612  00294E  1826               	xorwf	___ftadd@exp1,w,c
 22613  002950  A4D8               	btfss	status,2,c
 22614  002952  D7F5               	goto	i2l1405
 22615  002954                     i2u652_40:
 22616  002954  FFFF               	dw	65535	; assembler added errata NOP
 22617  002956  AE24               	btfss	___ftadd@sign,7,c
 22618  002958  D00C               	goto	i2l1407
 22619  00295A  0EFF               	movlw	255
 22620  00295C  1A1B               	xorwf	___ftadd@f1,f,c
 22621  00295E  0EFF               	movlw	255
 22622  002960  1A1C               	xorwf	___ftadd@f1+1,f,c
 22623  002962  0EFF               	movlw	255
 22624  002964  1A1D               	xorwf	___ftadd@f1+2,f,c
 22625  002966  0E01               	movlw	1
 22626  002968  261B               	addwf	___ftadd@f1,f,c
 22627  00296A  0E00               	movlw	0
 22628  00296C  221C               	addwfc	___ftadd@f1+1,f,c
 22629  00296E  0E00               	movlw	0
 22630  002970  221D               	addwfc	___ftadd@f1+2,f,c
 22631  002972                     i2l1407:
 22632  002972  FFFF               	dw	65535	; assembler added errata NOP
 22633  002974  AC24               	btfss	___ftadd@sign,6,c
 22634  002976  D00C               	goto	i2l1408
 22635  002978  0EFF               	movlw	255
 22636  00297A  1A1E               	xorwf	___ftadd@f2,f,c
 22637  00297C  0EFF               	movlw	255
 22638  00297E  1A1F               	xorwf	___ftadd@f2+1,f,c
 22639  002980  0EFF               	movlw	255
 22640  002982  1A20               	xorwf	___ftadd@f2+2,f,c
 22641  002984  0E01               	movlw	1
 22642  002986  261E               	addwf	___ftadd@f2,f,c
 22643  002988  0E00               	movlw	0
 22644  00298A  221F               	addwfc	___ftadd@f2+1,f,c
 22645  00298C  0E00               	movlw	0
 22646  00298E  2220               	addwfc	___ftadd@f2+2,f,c
 22647  002990                     i2l1408:
 22648  002990  FFFF               	dw	65535	; assembler added errata NOP
 22649  002992  0E00               	movlw	0
 22650  002994  6E24               	movwf	___ftadd@sign,c
 22651  002996  501B               	movf	___ftadd@f1,w,c
 22652  002998  261E               	addwf	___ftadd@f2,f,c
 22653  00299A  501C               	movf	___ftadd@f1+1,w,c
 22654  00299C  221F               	addwfc	___ftadd@f2+1,f,c
 22655  00299E  501D               	movf	___ftadd@f1+2,w,c
 22656  0029A0  2220               	addwfc	___ftadd@f2+2,f,c
 22657  0029A2  AE20               	btfss	___ftadd@f2+2,7,c
 22658  0029A4  D00E               	goto	i2l1409
 22659  0029A6  0EFF               	movlw	255
 22660  0029A8  1A1E               	xorwf	___ftadd@f2,f,c
 22661  0029AA  0EFF               	movlw	255
 22662  0029AC  1A1F               	xorwf	___ftadd@f2+1,f,c
 22663  0029AE  0EFF               	movlw	255
 22664  0029B0  1A20               	xorwf	___ftadd@f2+2,f,c
 22665  0029B2  0E01               	movlw	1
 22666  0029B4  261E               	addwf	___ftadd@f2,f,c
 22667  0029B6  0E00               	movlw	0
 22668  0029B8  221F               	addwfc	___ftadd@f2+1,f,c
 22669  0029BA  0E00               	movlw	0
 22670  0029BC  2220               	addwfc	___ftadd@f2+2,f,c
 22671  0029BE  0E01               	movlw	1
 22672  0029C0  6E24               	movwf	___ftadd@sign,c
 22673  0029C2                     i2l1409:
 22674  0029C2  FFFF               	dw	65535	; assembler added errata NOP
 22675  0029C4  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
 22676  0029C8  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 22677  0029CC  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 22678  0029D0  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
 22679  0029D4  C024  F005         	movff	___ftadd@sign,___ftpack@sign
 22680  0029D8  EC86  F01E         	call	___ftpack	;wreg free
 22681  0029DC  C001  F01B         	movff	?___ftpack,?___ftadd
 22682  0029E0  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
 22683  0029E4  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
 22684  0029E8                     i2l6134:
 22685  0029E8  FFFF               	dw	65535	; assembler added errata NOP
 22686  0029EA  0012               	return		;funcret
 22687  0029EC  FFFF               	dw	65535	; errata NOP
 22688  0029EE                     __end_of___ftadd:
 22689                           	opt stack 0
 22690                           tosu	equ	0xFFF
 22691                           tosh	equ	0xFFE
 22692                           tosl	equ	0xFFD
 22693                           pclatu	equ	0xFFB
 22694                           pclath	equ	0xFFA
 22695                           tblptru	equ	0xFF8
 22696                           tblptrh	equ	0xFF7
 22697                           tblptrl	equ	0xFF6
 22698                           tablat	equ	0xFF5
 22699                           prodh	equ	0xFF4
 22700                           prodl	equ	0xFF3
 22701                           intcon	equ	0xFF2
 22702                           indf0	equ	0xFEF
 22703                           postinc0	equ	0xFEE
 22704                           fsr0h	equ	0xFEA
 22705                           fsr0l	equ	0xFE9
 22706                           wreg	equ	0xFE8
 22707                           postdec1	equ	0xFE5
 22708                           fsr1h	equ	0xFE2
 22709                           fsr1l	equ	0xFE1
 22710                           indf2	equ	0xFDF
 22711                           postinc2	equ	0xFDE
 22712                           postdec2	equ	0xFDD
 22713                           fsr2h	equ	0xFDA
 22714                           fsr2l	equ	0xFD9
 22715                           status	equ	0xFD8
 22716                           
 22717 ;; *************** function ___ftpack *****************
 22718 ;; Defined at:
 22719 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 22720 ;; Parameters:    Size  Location     Type
 22721 ;;  arg             3    0[COMRAM] unsigned um
 22722 ;;  exp             1    3[COMRAM] unsigned char 
 22723 ;;  sign            1    4[COMRAM] unsigned char 
 22724 ;; Auto vars:     Size  Location     Type
 22725 ;;		None
 22726 ;; Return value:  Size  Location     Type
 22727 ;;                  3    0[COMRAM] float 
 22728 ;; Registers used:
 22729 ;;		wreg, status,2, status,0
 22730 ;; Tracked objects:
 22731 ;;		On entry : 0/0
 22732 ;;		On exit  : 0/0
 22733 ;;		Unchanged: 0/0
 22734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22735 ;;      Params:         5       0       0       0       0       0       0
 22736 ;;      Locals:         0       0       0       0       0       0       0
 22737 ;;      Temps:          3       0       0       0       0       0       0
 22738 ;;      Totals:         8       0       0       0       0       0       0
 22739 ;;Total ram usage:        8 bytes
 22740 ;; Hardware stack levels used:    1
 22741 ;; This function calls:
 22742 ;;		Nothing
 22743 ;; This function is called by:
 22744 ;;		___ftadd
 22745 ;;		___ftdiv
 22746 ;;		___ftmul
 22747 ;;		___lwtoft
 22748 ;; This function uses a non-reentrant model
 22749 ;;
 22750                           
 22751                           	psect	text96
 22752  003D0C                     __ptext96:
 22753                           	opt stack 0
 22754  003D0C                     ___ftpack:
 22755                           	opt stack 0
 22756  003D0C  FFFF               	dw	65535	; assembler added errata NOP
 22757                           
 22758                           ;incstack = 0
 22759  003D0E  5004               	movf	___ftpack@exp,w,c
 22760  003D10  B4D8               	btfsc	status,2,c
 22761  003D12  D005               	goto	i2u553_40
 22762  003D14  5001               	movf	___ftpack@arg,w,c
 22763  003D16  1002               	iorwf	___ftpack@arg+1,w,c
 22764  003D18  1003               	iorwf	___ftpack@arg+2,w,c
 22765  003D1A  A4D8               	btfss	status,2,c
 22766  003D1C  D00E               	goto	i2l1350
 22767  003D1E                     i2u553_40:
 22768  003D1E  FFFF               	dw	65535	; assembler added errata NOP
 22769  003D20  0E00               	movlw	0
 22770  003D22  6E01               	movwf	?___ftpack,c
 22771  003D24  0E00               	movlw	0
 22772  003D26  6E02               	movwf	?___ftpack+1,c
 22773  003D28  0E00               	movlw	0
 22774  003D2A  6E03               	movwf	?___ftpack+2,c
 22775  003D2C  D04E               	goto	i2l5458
 22776  003D2E  FFFF               	dw	65535	; assembler added errata NOP
 22777  003D30  2A04               	incf	___ftpack@exp,f,c
 22778  003D32  90D8               	bcf	status,0,c
 22779  003D34  3203               	rrcf	___ftpack@arg+2,f,c
 22780  003D36  3202               	rrcf	___ftpack@arg+1,f,c
 22781  003D38  3201               	rrcf	___ftpack@arg,f,c
 22782  003D3A                     i2l1350:
 22783  003D3A  FFFF               	dw	65535	; assembler added errata NOP
 22784  003D3C  0E00               	movlw	0
 22785  003D3E  1401               	andwf	___ftpack@arg,w,c
 22786  003D40  6E06               	movwf	??___ftpack& (0+255),c
 22787  003D42  0E00               	movlw	0
 22788  003D44  1402               	andwf	___ftpack@arg+1,w,c
 22789  003D46  6E07               	movwf	(??___ftpack+1)& (0+255),c
 22790  003D48  0EFE               	movlw	254
 22791  003D4A  1403               	andwf	___ftpack@arg+2,w,c
 22792  003D4C  6E08               	movwf	(??___ftpack+2)& (0+255),c
 22793  003D4E  5006               	movf	??___ftpack,w,c
 22794  003D50  1007               	iorwf	??___ftpack+1,w,c
 22795  003D52  1008               	iorwf	??___ftpack+2,w,c
 22796  003D54  B4D8               	btfsc	status,2,c
 22797  003D56  D00D               	goto	i2l1353
 22798  003D58  D7EA               	goto	i2l1351
 22799  003D5A  FFFF               	dw	65535	; assembler added errata NOP
 22800  003D5C  2A04               	incf	___ftpack@exp,f,c
 22801  003D5E  0E01               	movlw	1
 22802  003D60  2601               	addwf	___ftpack@arg,f,c
 22803  003D62  0E00               	movlw	0
 22804  003D64  2202               	addwfc	___ftpack@arg+1,f,c
 22805  003D66  0E00               	movlw	0
 22806  003D68  2203               	addwfc	___ftpack@arg+2,f,c
 22807  003D6A  90D8               	bcf	status,0,c
 22808  003D6C  3203               	rrcf	___ftpack@arg+2,f,c
 22809  003D6E  3202               	rrcf	___ftpack@arg+1,f,c
 22810  003D70  3201               	rrcf	___ftpack@arg,f,c
 22811  003D72                     i2l1353:
 22812  003D72  FFFF               	dw	65535	; assembler added errata NOP
 22813  003D74  0E00               	movlw	0
 22814  003D76  1401               	andwf	___ftpack@arg,w,c
 22815  003D78  6E06               	movwf	??___ftpack& (0+255),c
 22816  003D7A  0E00               	movlw	0
 22817  003D7C  1402               	andwf	___ftpack@arg+1,w,c
 22818  003D7E  6E07               	movwf	(??___ftpack+1)& (0+255),c
 22819  003D80  0EFF               	movlw	255
 22820  003D82  1403               	andwf	___ftpack@arg+2,w,c
 22821  003D84  6E08               	movwf	(??___ftpack+2)& (0+255),c
 22822  003D86  5006               	movf	??___ftpack,w,c
 22823  003D88  1007               	iorwf	??___ftpack+1,w,c
 22824  003D8A  1008               	iorwf	??___ftpack+2,w,c
 22825  003D8C  B4D8               	btfsc	status,2,c
 22826  003D8E  D007               	goto	i2l1356
 22827  003D90  D7E4               	goto	i2l1354
 22828  003D92  FFFF               	dw	65535	; assembler added errata NOP
 22829  003D94  0604               	decf	___ftpack@exp,f,c
 22830  003D96  90D8               	bcf	status,0,c
 22831  003D98  3601               	rlcf	___ftpack@arg,f,c
 22832  003D9A  3602               	rlcf	___ftpack@arg+1,f,c
 22833  003D9C  3603               	rlcf	___ftpack@arg+2,f,c
 22834  003D9E                     i2l1356:
 22835  003D9E  FFFF               	dw	65535	; assembler added errata NOP
 22836  003DA0  BE02               	btfsc	___ftpack@arg+1,7,c
 22837  003DA2  D003               	goto	i2u557_40
 22838  003DA4  0E02               	movlw	2
 22839  003DA6  6004               	cpfslt	___ftpack@exp,c
 22840  003DA8  D7F4               	goto	i2l1357
 22841  003DAA                     i2u557_40:
 22842  003DAA  FFFF               	dw	65535	; assembler added errata NOP
 22843  003DAC  A004               	btfss	___ftpack@exp,0,c
 22844  003DAE  9E02               	bcf	___ftpack@arg+1,7,c
 22845  003DB0  90D8               	bcf	status,0,c
 22846  003DB2  3204               	rrcf	___ftpack@exp,f,c
 22847  003DB4  5004               	movf	___ftpack@exp,w,c
 22848  003DB6  1203               	iorwf	___ftpack@arg+2,f,c
 22849  003DB8  5005               	movf	___ftpack@sign,w,c
 22850  003DBA  A4D8               	btfss	status,2,c
 22851  003DBC  8E03               	bsf	___ftpack@arg+2,7,c
 22852  003DBE  C001  F001         	movff	___ftpack@arg,?___ftpack
 22853  003DC2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 22854  003DC6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 22855  003DCA                     i2l5458:
 22856  003DCA  FFFF               	dw	65535	; assembler added errata NOP
 22857  003DCC  0012               	return		;funcret
 22858  003DCE  FFFF               	dw	65535	; errata NOP
 22859  003DD0                     __end_of___ftpack:
 22860                           	opt stack 0
 22861                           tosu	equ	0xFFF
 22862                           tosh	equ	0xFFE
 22863                           tosl	equ	0xFFD
 22864                           pclatu	equ	0xFFB
 22865                           pclath	equ	0xFFA
 22866                           tblptru	equ	0xFF8
 22867                           tblptrh	equ	0xFF7
 22868                           tblptrl	equ	0xFF6
 22869                           tablat	equ	0xFF5
 22870                           prodh	equ	0xFF4
 22871                           prodl	equ	0xFF3
 22872                           intcon	equ	0xFF2
 22873                           indf0	equ	0xFEF
 22874                           postinc0	equ	0xFEE
 22875                           fsr0h	equ	0xFEA
 22876                           fsr0l	equ	0xFE9
 22877                           wreg	equ	0xFE8
 22878                           postdec1	equ	0xFE5
 22879                           fsr1h	equ	0xFE2
 22880                           fsr1l	equ	0xFE1
 22881                           indf2	equ	0xFDF
 22882                           postinc2	equ	0xFDE
 22883                           postdec2	equ	0xFDD
 22884                           fsr2h	equ	0xFDA
 22885                           fsr2l	equ	0xFD9
 22886                           status	equ	0xFD8
 22887                           tosu	equ	0xFFF
 22888                           tosh	equ	0xFFE
 22889                           tosl	equ	0xFFD
 22890                           pclatu	equ	0xFFB
 22891                           pclath	equ	0xFFA
 22892                           tblptru	equ	0xFF8
 22893                           tblptrh	equ	0xFF7
 22894                           tblptrl	equ	0xFF6
 22895                           tablat	equ	0xFF5
 22896                           prodh	equ	0xFF4
 22897                           prodl	equ	0xFF3
 22898                           intcon	equ	0xFF2
 22899                           indf0	equ	0xFEF
 22900                           postinc0	equ	0xFEE
 22901                           fsr0h	equ	0xFEA
 22902                           fsr0l	equ	0xFE9
 22903                           wreg	equ	0xFE8
 22904                           postdec1	equ	0xFE5
 22905                           fsr1h	equ	0xFE2
 22906                           fsr1l	equ	0xFE1
 22907                           indf2	equ	0xFDF
 22908                           postinc2	equ	0xFDE
 22909                           postdec2	equ	0xFDD
 22910                           fsr2h	equ	0xFDA
 22911                           fsr2l	equ	0xFD9
 22912                           status	equ	0xFD8
 22913                           
 22914                           	psect	text97
 22915  000000                     __ptext97:
 22916                           	opt stack 0
 22917                           tosu	equ	0xFFF
 22918                           tosh	equ	0xFFE
 22919                           tosl	equ	0xFFD
 22920                           pclatu	equ	0xFFB
 22921                           pclath	equ	0xFFA
 22922                           tblptru	equ	0xFF8
 22923                           tblptrh	equ	0xFF7
 22924                           tblptrl	equ	0xFF6
 22925                           tablat	equ	0xFF5
 22926                           prodh	equ	0xFF4
 22927                           prodl	equ	0xFF3
 22928                           intcon	equ	0xFF2
 22929                           indf0	equ	0xFEF
 22930                           postinc0	equ	0xFEE
 22931                           fsr0h	equ	0xFEA
 22932                           fsr0l	equ	0xFE9
 22933                           wreg	equ	0xFE8
 22934                           postdec1	equ	0xFE5
 22935                           fsr1h	equ	0xFE2
 22936                           fsr1l	equ	0xFE1
 22937                           indf2	equ	0xFDF
 22938                           postinc2	equ	0xFDE
 22939                           postdec2	equ	0xFDD
 22940                           fsr2h	equ	0xFDA
 22941                           fsr2l	equ	0xFD9
 22942                           status	equ	0xFD8
 22943                           
 22944                           	psect	rparam
 22945  0000                     tosu	equ	0xFFF
 22946                           tosh	equ	0xFFE
 22947                           tosl	equ	0xFFD
 22948                           pclatu	equ	0xFFB
 22949                           pclath	equ	0xFFA
 22950                           tblptru	equ	0xFF8
 22951                           tblptrh	equ	0xFF7
 22952                           tblptrl	equ	0xFF6
 22953                           tablat	equ	0xFF5
 22954                           prodh	equ	0xFF4
 22955                           prodl	equ	0xFF3
 22956                           intcon	equ	0xFF2
 22957                           indf0	equ	0xFEF
 22958                           postinc0	equ	0xFEE
 22959                           fsr0h	equ	0xFEA
 22960                           fsr0l	equ	0xFE9
 22961                           wreg	equ	0xFE8
 22962                           postdec1	equ	0xFE5
 22963                           fsr1h	equ	0xFE2
 22964                           fsr1l	equ	0xFE1
 22965                           indf2	equ	0xFDF
 22966                           postinc2	equ	0xFDE
 22967                           postdec2	equ	0xFDD
 22968                           fsr2h	equ	0xFDA
 22969                           fsr2l	equ	0xFD9
 22970                           status	equ	0xFD8
 22971                           
 22972                           	psect	temp
 22973  00007F                     btemp:
 22974                           	opt stack 0
 22975  00007F                     	ds	1
 22976  0000                     int$flags	set	btemp
 22977  0000                     wtemp6	set	btemp+1
 22978                           tosu	equ	0xFFF
 22979                           tosh	equ	0xFFE
 22980                           tosl	equ	0xFFD
 22981                           pclatu	equ	0xFFB
 22982                           pclath	equ	0xFFA
 22983                           tblptru	equ	0xFF8
 22984                           tblptrh	equ	0xFF7
 22985                           tblptrl	equ	0xFF6
 22986                           tablat	equ	0xFF5
 22987                           prodh	equ	0xFF4
 22988                           prodl	equ	0xFF3
 22989                           intcon	equ	0xFF2
 22990                           indf0	equ	0xFEF
 22991                           postinc0	equ	0xFEE
 22992                           fsr0h	equ	0xFEA
 22993                           fsr0l	equ	0xFE9
 22994                           wreg	equ	0xFE8
 22995                           postdec1	equ	0xFE5
 22996                           fsr1h	equ	0xFE2
 22997                           fsr1l	equ	0xFE1
 22998                           indf2	equ	0xFDF
 22999                           postinc2	equ	0xFDE
 23000                           postdec2	equ	0xFDD
 23001                           fsr2h	equ	0xFDA
 23002                           fsr2l	equ	0xFD9
 23003                           status	equ	0xFD8


Data Sizes:
    Strings     1359
    Constant    58
    Data        12
    BSS         276
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     67     126
    BANK0           128     91     128
    BANK1           256      0     192
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ajusteSP_Bombas$2384	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    telaPrincipal$2383	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    acaoTesteBombas$2382	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> intToFloatStr@conv(BANK0[4]), STR_126(CODE[15]), STR_125(CODE[12]), STR_124(CODE[10]), 
		 -> STR_123(CODE[18]), STR_122(CODE[10]), STR_121(CODE[18]), STR_120(CODE[16]), 
		 -> STR_119(CODE[10]), STR_117(CODE[3]), STR_116(CODE[14]), STR_115(CODE[20]), 
		 -> STR_114(CODE[8]), STR_113(CODE[10]), STR_112(CODE[11]), STR_111(CODE[9]), 
		 -> STR_110(CODE[3]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[11]), 
		 -> STR_106(CODE[11]), STR_105(CODE[18]), STR_104(CODE[5]), STR_103(CODE[12]), 
		 -> STR_102(CODE[5]), STR_101(CODE[14]), STR_100(CODE[19]), STR_97(CODE[3]), 
		 -> STR_96(CODE[7]), STR_95(CODE[7]), STR_93(CODE[12]), STR_92(CODE[17]), 
		 -> STR_91(CODE[20]), STR_90(CODE[8]), STR_87(CODE[14]), STR_84(CODE[14]), 
		 -> STR_83(CODE[11]), STR_80(CODE[10]), STR_79(CODE[31]), STR_76(CODE[11]), 
		 -> STR_75(CODE[20]), STR_74(CODE[20]), STR_73(CODE[21]), STR_72(CODE[15]), 
		 -> STR_71(CODE[6]), STR_70(CODE[15]), STR_69(CODE[6]), STR_68(CODE[20]), 
		 -> STR_67(CODE[15]), STR_66(CODE[19]), STR_65(CODE[20]), STR_64(CODE[21]), 
		 -> STR_63(CODE[21]), STR_62(CODE[18]), STR_61(CODE[20]), STR_60(CODE[12]), 
		 -> STR_59(CODE[17]), STR_58(CODE[26]), STR_57(CODE[16]), STR_54(CODE[15]), 
		 -> STR_51(CODE[15]), STR_48(CODE[11]), STR_47(CODE[17]), STR_44(CODE[9]), 
		 -> STR_43(CODE[19]), STR_42(CODE[19]), STR_41(CODE[16]), STR_40(CODE[15]), 
		 -> STR_39(CODE[15]), STR_38(CODE[20]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 126
		 -> STR_37(CODE[7]), STR_35(CODE[11]), STR_26(CODE[104]), STR_25(CODE[63]), 
		 -> STR_23(CODE[18]), STR_21(CODE[7]), STR_20(CODE[12]), STR_18(CODE[5]), 
		 -> STR_14(CODE[126]), STR_12(CODE[18]), STR_10(CODE[12]), STR_8(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    memset@p	PTR unsigned char  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), STR_127(CODE[7]), _doprnt@c(BANK0[1]), 
		 -> intToFloatStr@end(BANK0[4]), STR_118(CODE[12]), STR_99(CODE[17]), STR_98(CODE[13]), 
		 -> STR_94(CODE[12]), STR_89(CODE[5]), STR_88(CODE[3]), STR_86(CODE[5]), 
		 -> STR_85(CODE[3]), STR_82(CODE[5]), STR_81(CODE[3]), STR_78(CODE[4]), 
		 -> STR_77(CODE[4]), STR_56(CODE[5]), STR_55(CODE[3]), STR_53(CODE[5]), 
		 -> STR_52(CODE[3]), line3(BANK1[21]), STR_50(CODE[5]), STR_49(CODE[3]), 
		 -> STR_46(CODE[13]), STR_45(CODE[10]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), STR_32(CODE[6]), STR_31(CODE[3]), STR_30(CODE[6]), 
		 -> STR_29(CODE[3]), STR_28(CODE[6]), STR_27(CODE[3]), STR_15(CODE[12]), 
		 -> tel2(BANK1[12]), tel1(BANK1[12]), bufferAUX(BANK1[20]), NULL(NULL[0]), 
		 -> bufferSerial(BANK1[60]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 126
		 -> intToFloatStr@conv(BANK0[4]), STR_126(CODE[15]), STR_125(CODE[12]), STR_124(CODE[10]), 
		 -> STR_123(CODE[18]), STR_122(CODE[10]), STR_121(CODE[18]), STR_120(CODE[16]), 
		 -> STR_119(CODE[10]), STR_117(CODE[3]), STR_116(CODE[14]), STR_115(CODE[20]), 
		 -> STR_114(CODE[8]), STR_113(CODE[10]), STR_112(CODE[11]), STR_111(CODE[9]), 
		 -> STR_110(CODE[3]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[11]), 
		 -> STR_106(CODE[11]), STR_105(CODE[18]), STR_104(CODE[5]), STR_103(CODE[12]), 
		 -> STR_102(CODE[5]), STR_101(CODE[14]), STR_100(CODE[19]), STR_97(CODE[3]), 
		 -> STR_96(CODE[7]), STR_95(CODE[7]), STR_93(CODE[12]), STR_92(CODE[17]), 
		 -> STR_91(CODE[20]), STR_90(CODE[8]), STR_87(CODE[14]), STR_84(CODE[14]), 
		 -> STR_83(CODE[11]), STR_80(CODE[10]), STR_79(CODE[31]), STR_76(CODE[11]), 
		 -> STR_75(CODE[20]), STR_74(CODE[20]), STR_73(CODE[21]), STR_72(CODE[15]), 
		 -> STR_71(CODE[6]), STR_70(CODE[15]), STR_69(CODE[6]), STR_68(CODE[20]), 
		 -> STR_67(CODE[15]), STR_66(CODE[19]), STR_65(CODE[20]), STR_64(CODE[21]), 
		 -> STR_63(CODE[21]), STR_62(CODE[18]), STR_61(CODE[20]), STR_60(CODE[12]), 
		 -> STR_59(CODE[17]), STR_58(CODE[26]), STR_57(CODE[16]), STR_54(CODE[15]), 
		 -> STR_51(CODE[15]), STR_48(CODE[11]), STR_47(CODE[17]), STR_44(CODE[9]), 
		 -> STR_43(CODE[19]), STR_42(CODE[19]), STR_41(CODE[16]), STR_40(CODE[15]), 
		 -> STR_39(CODE[15]), STR_38(CODE[20]), STR_37(CODE[7]), STR_35(CODE[11]), 
		 -> STR_26(CODE[104]), STR_25(CODE[63]), STR_23(CODE[18]), STR_21(CODE[7]), 
		 -> STR_20(CODE[12]), STR_18(CODE[5]), STR_14(CODE[126]), STR_12(CODE[18]), 
		 -> STR_10(CODE[12]), STR_8(CODE[5]), STR_4(CODE[5]), STR_3(CODE[9]), 
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 

    S1610__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1610__prbuf$ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    configuraTelefones$1469	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_99(CODE[17]), STR_98(CODE[13]), 

    dataLoger$1454	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_89(CODE[5]), STR_88(CODE[3]), 

    dataLoger$1449	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_86(CODE[5]), STR_85(CODE[3]), 

    dataLoger$1443	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_82(CODE[5]), STR_81(CODE[3]), 

    tela_testeBombas$1424	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_78(CODE[4]), STR_77(CODE[4]), 

    blink@line	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    atualizarLCD@line4	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), 

    atualizarLCD@line3	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), 

    atualizarLCD@line2	PTR unsigned char  size(2) Largest target is 21
		 -> line2(BANK1[21]), 

    atualizarLCD@line1	PTR unsigned char  size(2) Largest target is 21
		 -> line1(BANK1[21]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    acaoTesteBombas$1323	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_56(CODE[5]), STR_55(CODE[3]), 

    acaoTesteBombas$1318	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_53(CODE[5]), STR_52(CODE[3]), 

    acaoTesteBombas$1313	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_50(CODE[5]), STR_49(CODE[3]), 

    acaoTesteBombas$1305	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_46(CODE[13]), STR_45(CODE[10]), 

    sp__intToFloatStr	PTR unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    enviaSMS$1228	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    enviaSMS$1223	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_28(CODE[6]), STR_27(CODE[3]), 

    enviaSMS$1222	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_30(CODE[6]), STR_29(CODE[3]), 

    enviaSMS$1221	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_32(CODE[6]), STR_31(CODE[3]), 

    enviaSMS$1208	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    comunicarTeste$1193	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    getDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    setDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    sp__getSerial	PTR unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    getSerial@ret	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    getSerial@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_7(CODE[7]), 

    sp__memset	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    aguardaBuffer@str	PTR unsigned char  size(2) Largest target is 12
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), 

    writeChar@hex	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TIMER in COMRAM

    _TIMER->_lerTransdutor
    _timer->_writeEEPROM16_ext
    i2_getDS1307TimeDate->i2_I2C_Read
    i2_I2C_Restart->i2_I2C_Wait
    i2_I2C_Read->i2_I2C_Wait
    i2_RTC_Init->i2_I2C_Write
    _writeEEPROM16_ext->i2_writeEEPROM_ext
    i2_writeEEPROM_ext->i2_I2C_Write
    i2_writeEEPROM_ext->i2_delay
    i2_I2C_Write->i2_I2C_Wait
    i2_I2C_Stop->i2_I2C_Wait
    i2_I2C_Start->i2_I2C_Wait
    _lerTransdutor->___ftdiv
    _lerTransdutor->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftmul

Critical Paths under _main in BANK0

    _main->_acaoTesteBombas
    _verificarIntervaloTesteBombas->_writeEEPROM_ext
    _tela_testeBombas->_sprintf
    _tela_ajusteRTC->_sprintf
    _setDS1307TimeDate->_I2C_Write
    _DECtoBCD->___awdiv
    _telaPrincipal->_intToFloatStr
    _resetParametros->_clearShiftREG
    _lerParametros->_readEEPROM16_ext
    _readEEPROM16_ext->_readEEPROM_ext
    _informacoes->_sprintf
    _getSinalSIM800L->_atoi
    _getSerial->_sprintf
    _atoi->_getSerial
    _getDS1307TimeDate->_I2C_Write
    _dataLoger->_sprintf
    _criarCaracteresCGRAM->_Lcd_Write_Char
    _configurarEstacionaria->_sprintf
    _configuraTelefones->_comunicarTeste
    _comunicarTeste->_printf
    _atualizarLCD->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _ajusteSP_Bombas->_intToFloatStr
    _acaoTesteBombas->_enviaSMS
    _salvarLOG->_readEEPROM_ext
    _salvarLOG->_writeEEPROM_ext
    _writeEEPROM_ext->_I2C_Write
    _readEEPROM_ext->_I2C_Write
    _I2C_Restart->_I2C_Wait
    _I2C_Read->_I2C_Wait
    _intToFloatStr->_sprintf
    _drenarPressao->_sprintf
    _sprintf->__doprnt
    _acaoBombas->_enviaSMS
    _partidaBombaEstacionaria->_delay
    _enviaSMS->_printf
    _printf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _limparBuffer->_memset
    _aguardaBuffer->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _RTC_Init->_I2C_Write
    _I2C_Write->_DECtoBCD
    _I2C_Stop->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _I2C_Master_Init->___lldiv

Critical Paths under _TIMER in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TIMER in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TIMER in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TIMER in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TIMER in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TIMER in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  374964
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                           _RTC_Init
                         _acaoBombas
                    _acaoTesteBombas
                    _ajusteSP_Bombas
                       _atualizarLCD
                            _btPress
             _configuraRegistradores
                 _configuraTelefones
             _configurarEstacionaria
               _criarCaracteresCGRAM
                          _dataLoger
                              _delay
                  _getDS1307TimeDate
                    _getSinalSIM800L
                        _informacoes
                      _lerParametros
                        _setShiftREG
                            _sprintf
                      _telaPrincipal
                     _tela_ajusteRTC
                   _tela_testeBombas
      _verificarIntervaloTesteBombas
 ---------------------------------------------------------------------------------
 (1) _verificarIntervaloTesteBombas                        0     0      0    5330
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_testeBombas                                     4     4      0   24159
                                             53 BANK0      4     4      0
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_ajusteRTC                                       0     0      0   23163
                              _blink
                            _btPress
                  _setDS1307TimeDate
                            _sprintf
                          _validaRTC
 ---------------------------------------------------------------------------------
 (2) _validaRTC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setDS1307TimeDate                                    3     1      2    4358
                                             12 BANK0      3     1      2
                           _DECtoBCD
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DECtoBCD                                             2     2      0    1902
                                              8 BANK0      2     2      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _telaPrincipal                                        2     2      0   35602
                                             66 BANK0      2     2      0
                              _blink
                            _btPress
                      _clearShiftREG
                      _intToFloatStr
                    _resetParametros
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _resetParametros                                      0     0      0      69
                      _clearShiftREG
 ---------------------------------------------------------------------------------
 (1) _setShiftREG                                          2     2      0      69
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _lerParametros                                        2     2      0   11976
                                             20 BANK0      2     2      0
                   _readEEPROM16_ext
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _readEEPROM16_ext                                     6     4      2    3221
                                             14 BANK0      6     4      2
                     _readEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _informacoes                                          0     0      0   14588
                            _btPress
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _getSinalSIM800L                                      4     4      0   29023
                                             70 BANK0      4     4      0
                      _aguardaBuffer
                               _atoi
                              _delay
                          _getSerial
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _getSerial                                           10     7      3   17236
                                             53 BANK0     10     7      3
                             _memset
                            _sprintf
                             _strlen
                             _strstr
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     835
                                             63 BANK0      7     5      2
                             ___wmul
                          _getSerial (ARG)
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _getDS1307TimeDate                                    2     0      2    3431
                                             12 BANK0      2     0      2
                           _BCDtoDEC
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _BCDtoDEC                                             1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _dataLoger                                           12    12      0   18895
                                             53 BANK0     12    12      0
                            ___awdiv
                            _btPress
                     _readEEPROM_ext
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _criarCaracteresCGRAM                                56    56      0     521
                                              4 BANK0     56    56      0
                            _Lcd_Cmd
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _configurarEstacionaria                               0     0      0   24135
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _configuraTelefones                                   5     5      0   35115
                                             63 BANK0      5     5      0
                              _blink
                            _btPress
                     _comunicarTeste
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _comunicarTeste                                       4     4      0   10821
                                             59 BANK0      4     4      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (1) _configuraRegistradores                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _atualizarLCD                                         9     1      8    2380
                                              8 BANK0      9     1      8
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     3     1      2     573
                                              4 BANK0      3     1      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     888
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _ajusteSP_Bombas                                      2     2      0   40863
                                             66 BANK0      2     2      0
                              _blink
                            _btPress
                      _intToFloatStr
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _blink                                                5     1      4    4217
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _acaoTesteBombas                                     19    19      0   75285
                                             72 BANK0     19    19      0
                            _btPress
                      _clearShiftREG
                      _drenarPressao
                           _enviaSMS
                      _intToFloatStr
           _partidaBombaEstacionaria
                     _readEEPROM_ext
                          _salvarLOG
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _salvarLOG                                            3     3      0    8726
                                             14 BANK0      3     3      0
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM_ext                                      2     1      1    5330
                                             12 BANK0      2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _readEEPROM_ext                                       2     2      0    3152
                                             12 BANK0      2     2      0
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Restart                                          0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             4     2      2     881
                                              1 BANK0      4     2      2
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _intToFloatStr                                       13    11      2   16636
                                             53 BANK0     13    11      2
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     752
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1060
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _drenarPressao                                        0     0      0   14566
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             20     6     14   14566
                                             33 BANK0     20     6     14
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) _clearShiftREG                                        1     1      0      69
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _btPress                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _acaoBombas                                           3     3      0   11961
                                             72 BANK0      3     3      0
                           _enviaSMS
           _partidaBombaEstacionaria
 ---------------------------------------------------------------------------------
 (2) _partidaBombaEstacionaria                             1     1      0     978
                                              3 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _enviaSMS                                            13    13      0   10983
                                             59 BANK0     13    13      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeChar                                            2     0      2     402
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              26     6     20    4630
                                             33 BANK0     26     6     20
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             25    19      6    3428
                                             12 BANK0     21    15      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _limparBuffer                                         0     0      0    1486
                              _delay
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     552
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _aguardaBuffer                                        2     0      2    3345
                                             19 BANK0      2     0      2
                              _delay
                             _strstr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    1401
                                             15 BANK0      4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     362
                                              6 BANK0      9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               5     1      4     240
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _delay                                                3     1      2     934
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0    2226
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            2     0      2    2226
                                             10 BANK0      2     0      2
                           _DECtoBCD (ARG)
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Wait                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _TIMER                                               19    19      0   17356
                                             48 COMRAM    19    19      0
                      _lerTransdutor
                        _readButtons
                              _timer
 ---------------------------------------------------------------------------------
 (7) _timer                                                8     8      0    2076
                                              8 COMRAM     8     8      0
                  _writeEEPROM16_ext
                         i2_RTC_Init
                i2_getDS1307TimeDate
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (8) i2_getDS1307TimeDate                                  2     0      2     707
                                              5 COMRAM     2     0      2
                         i2_BCDtoDEC
                         i2_I2C_Read
                      i2_I2C_Restart
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Restart                                        0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Read                                           4     2      2     227
                                              1 COMRAM     4     2      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_BCDtoDEC                                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_RTC_Init                                           0     0      0     256
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (8) _writeEEPROM16_ext                                    3     1      2     591
                                              5 COMRAM     3     1      2
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (8) i2_writeEEPROM_ext                                    2     1      1     426
                                              3 COMRAM     2     1      1
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
                            i2_delay
 ---------------------------------------------------------------------------------
 (9) i2_delay                                              3     1      2      48
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Write                                          2     0      2     256
                                              1 COMRAM     2     0      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Stop                                           0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Start                                          0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Wait                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _readButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _lerTransdutor                                        7     7      0   15213
                                             41 COMRAM     7     7      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
                            _readADC
 ---------------------------------------------------------------------------------
 (8) _readADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) ___lwtoft                                             3     0      3    2564
                                              8 COMRAM     3     0      3
                           ___ftpack
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     328
                                             26 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    3526
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             15     9      6    3480
                                             26 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    4622
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _RTC_Init
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _acaoBombas
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _partidaBombaEstacionaria
       _delay
   _acaoTesteBombas
     _btPress
     _clearShiftREG
     _drenarPressao
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _partidaBombaEstacionaria
       _delay
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _salvarLOG
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
       _writeEEPROM_ext
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
         _delay
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _ajusteSP_Bombas
     _blink
     _btPress
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _atualizarLCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _btPress
   _configuraRegistradores
   _configuraTelefones
     _blink
     _btPress
     _comunicarTeste
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _configurarEstacionaria
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _criarCaracteresCGRAM
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _dataLoger
     ___awdiv
     _btPress
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _delay
   _getDS1307TimeDate
     _BCDtoDEC
     _I2C_Read
       _I2C_Wait
     _I2C_Restart
       _I2C_Wait
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _getSinalSIM800L
     _aguardaBuffer
       _delay
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _atoi
       ___wmul
       _getSerial (ARG)
         _memset
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
         _strlen
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _isdigit (ARG)
     _delay
     _getSerial
       _memset
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _strlen
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _limparBuffer
       _delay
       _memset
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeChar
   _informacoes
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _lerParametros
     _readEEPROM16_ext
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _setShiftREG
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       ___wmul *
       _isdigit *
       _putch *
   _telaPrincipal
     _blink
     _btPress
     _clearShiftREG
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _resetParametros
       _clearShiftREG
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _tela_ajusteRTC
     _blink
     _btPress
     _setDS1307TimeDate
       _DECtoBCD
         ___awdiv
         ___awmod
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _validaRTC
   _tela_testeBombas
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _verificarIntervaloTesteBombas
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay

 _TIMER (ROOT)
   _lerTransdutor
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
     ___lwtoft
       ___ftpack
       _readADC (ARG)
     _readADC
   _readButtons
   _timer
     _writeEEPROM16_ext
       i2_writeEEPROM_ext
         i2_I2C_Start
           i2_I2C_Wait
         i2_I2C_Stop
           i2_I2C_Wait
         i2_I2C_Write
           i2_I2C_Wait
         i2_delay
     i2_RTC_Init
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_getDS1307TimeDate
       i2_BCDtoDEC
       i2_I2C_Read
         i2_I2C_Wait
       i2_I2C_Restart
         i2_I2C_Wait
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_writeEEPROM_ext
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
       i2_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C0       7       75.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5B      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     43      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BE      15        0.0%
DATA                 0      0     1BE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Nov 25 20:56:03 2019

                                                 __size_of_readEEPROM_ext 0056  
                                                             __CFG_CP0$ON 000000  
                                                             __CFG_CP1$ON 000000  
                                                             __CFG_CP2$ON 000000  
                                                             __CFG_CP3$ON 000000  
                                                      __size_of_I2C_Start 000C  
                                                      __size_of_I2C_Write 000E  
                                                __end_of_readEEPROM16_ext 6FFA  
                                                             __CFG_CPD$ON 000000  
                                                            ___awdiv@sign 0085  
                                                             __CFG_BOR$ON 000000  
                                                     ___wmul@multiplicand 0082  
                                          __end_of_configurarEstacionaria 2EA0  
                                        __end_of_partidaBombaEstacionaria 39EC  
                                                             __CFG_OSC$HS 000000  
                                                            ___ftadd@exp1 0026  
                                                            ___ftadd@exp2 0025  
                                                            ___ftadd@sign 0024  
                                                             __CFG_WDT$ON 000000  
                                                                     l302 2B92  
                                                                     l310 2AA8  
                                                                     l303 2A00  
                                                                     l400 18E6  
                                                                     l304 2BB4  
                                                                     l312 2AFC  
                                                                     l313 2B78  
                                                                     l305 2A28  
                                                                     l314 2B24  
                                                                     l323 2612  
                                                                     l307 2A78  
                                                                     l340 25E6  
                                                                     l332 250A  
                                                                     l324 2470  
                                                                     l316 2B4C  
                                                                     l501 3976  
                                                                     l325 2648  
                                                                     l341 25D2  
                                                                     l350 15F6  
                                                                     l502 397C  
                                                                     l342 25DC  
                                                                     l326 2490  
                                                                     l318 2B76  
                                                                     l503 399A  
                                                                     l415 3C7C  
                                                                     l327 24C0  
                                                                     l319 2B86  
                                                                     l352 18F2  
                                                                     l504 39B6  
                                                                     l336 2536  
                                                                     l361 16AC  
                                                                     l353 15FE  
                                                                     l505 39CA  
                                                                     l329 24E0  
                                                                     l433 7382  
                                                                     l513 729A  
                                                                     l354 1932  
                                                                     l370 1744  
                                                                     l530 09E4  
                                                                     l259 7116  
                                                                     l355 161E  
                                                                     l507 39E0  
                                                                     l531 0DEE  
                                                                     l523 0950  
                                                                     l339 25B0  
                                                                     l267 3300  
                                                                     l291 73C6  
                                                                     l356 164E  
                                                                     l508 39E6  
                                                                     l428 6F6A  
                                                                     l540 0AEA  
                                                                     l532 0A08  
                                                                     l268 327C  
                                                                     l700 1D20  
                                                                     l292 73D2  
                                                                     l365 16DA  
                                                                     l517 6EAC  
                                                                     l541 0B2A  
                                                                     l525 0958  
                                                                     l269 32C4  
                                                                     l613 301E  
                                                                     l293 73DE  
                                                                     l630 72CC  
                                                                     l382 17EE  
                                                                     l366 17E0  
                                                                     l374 175E  
                                                                     l358 1682  
                                                                     l470 75D4  
                                                                     l534 0A46  
                                                                     l526 0974  
                                                                     l614 3000  
                                                                     l294 73EA  
                                                                     l631 72D0  
                                                                     l391 1860  
                                                                     l367 172A  
                                                                     l543 0B46  
                                                                     l535 0A86  
                                                                     l711 1DB6  
                                                                     l295 73F6  
                                                                     l632 72DA  
                                                                     l384 1842  
                                                                     l368 17CC  
                                                                     l480 7636  
                                                                     l544 0B50  
                                                                     l800 1EAC  
                                                                     l616 309E  
                                                                     l704 1D4C  
                                                                     l296 7402  
                                                                     l720 20C2  
                                                                     l633 72DE  
                                                                     l385 1832  
                                                                     l473 75E2  
                                                                     l529 0D9A  
                                                                     l561 0C58  
                                                                     l553 0BFE  
                                                                     l537 0A98  
                                                                     l713 1DC4  
                                                                     l705 1D5C  
                                                                     l626 72B0  
                                                                     l394 188C  
                                                                     l378 1778  
                                                                     l490 31D0  
                                                                     l562 0C7A  
                                                                     l546 0B92  
                                                                     l538 0AA2  
                                                                     l618 30D0  
                                                                     l706 1D74  
                                                                     l730 215C  
                                                                     l627 72B4  
                                                                     l491 31FA  
                                                                     l475 75F0  
                                                                     l555 0C0E  
                                                                     l547 0BE2  
                                                                     l643 3C24  
                                                                     l803 1EEC  
                                                                     l723 222E  
                                                                     l628 72BE  
                                                                     l492 3210  
                                                                     l572 0D12  
                                                                     l564 0CA2  
                                                                     l644 3B8C  
                                                                     l804 1F10  
                                                                     l708 1D9C  
                                                                     l724 20F4  
                                                                     l629 72C2  
                                                                     l389 184A  
                                                                     l485 3132  
                                                                     l469 7616  
                                                                     l477 75FE  
                                                                     l645 3C42  
                                                                     l661 3A62  
                                                                     l821 12EC  
                                                                     l805 1F0A  
                                                                     l709 1DAA  
                                                                     l733 2190  
                                                                     l717 2094  
                                                                     l398 18D8  
                                                                     l486 3158  
                                                                     l478 7610  
                                                                     l646 3BB2  
                                                                     l670 3B16  
                                                                     l806 1F50  
                                                                     l750 2734  
                                                                     l647 3BD8  
                                                                     l823 1300  
                                                                     l671 3B26  
                                                                     l719 2202  
                                                                     l727 2128  
                                                                     l751 275A  
                                                                     l488 3180  
                                                                     l576 0D58  
                                                                     l568 0CDA  
                                                                     l648 3BFE  
                                                                     l656 7084  
                                                                     l832 15B8  
                                                                     l736 21C4  
                                                                     l760 27BA  
                                                                     l744 26C8  
                                                                     l920 0F78  
                                                                     l497 394A  
                                                                     l489 31A4  
                                                                     l681 718A  
                                                                     l833 13B0  
                                                                     l825 137A  
                                                                     l817 12AA  
                                                                     l809 1FFC  
                                                                     l753 2818  
                                                                     l761 27E0  
                                                                     l921 0FD4  
                                                                     l578 0D8C  
                                                                     l682 7172  
                                                                     l842 15D2  
                                                                     l834 13CA  
                                                                     l826 1332  
                                                                     l674 3B38  
                                                                     l690 1C7A  
                                                                     l754 276E  
                                                                     l922 0FDC  
                                                                     l914 0EF0  
                                                                     l499 3966  
                                                                     l843 1494  
                                                                     l691 1BD8  
                                                                     l739 21F8  
                                                                     l763 27F4  
                                                                     l755 2794  
                                                                     l747 2720  
                                                                     l923 0FE4  
                                                                     l915 0F04  
                                                                     l852 1582  
                                                                     l844 14AE  
                                                                     l836 1410  
                                                                     l676 3B68  
                                                                     l668 3B0A  
                                                                     l692 1CA4  
                                                                     l756 27A6  
                                                                     l916 101E  
                                                                     l924 0FEC  
                                                                     l837 1432  
                                                                     l829 1396  
                                                                     l861 2E86  
                                                                     l693 1BF2  
                                                                     l749 27FE  
                                                                     l933 11AA  
                                                                     l941 10DC  
                                                                     l925 0FF4  
                                                                     l917 0F14  
                                                                     l854 15B0  
                                                                     l846 14F4  
                                                                     l838 1454  
                                                                     l862 2E10  
                                                                     l694 1C0C  
                                                                     l934 107C  
                                                                     l918 1068  
                                                                     l926 0FFC  
                                                                     l847 1516  
                                                                     l863 2E36  
                                                                     l695 1C26  
                                                                     l759 27B2  
                                                                     l943 10FC  
                                                                     l927 1004  
                                                                     l919 0F1C  
                                                                     l880 1B8C  
                                                                     l848 1538  
                                                                     l792 1E10  
                                                                     l696 1C40  
                                                                     l936 11E0  
                                                                     l952 119C  
                                                                     l928 100C  
                                                                     l881 1A8C  
                                                                     l873 1A30  
                                                                     l865 2E9A  
                                                                     l697 1C5A  
                                                                     l953 11F2  
                                                                     l945 111C  
                                                                     l937 109C  
                                                                     l929 1014  
                                                                     l890 1B42  
                                                                     l882 1AB2  
                                                                     l866 2E4A  
                                                                     l698 1CC2  
                                                                     l875 1B6C  
                                                                     l891 1B54  
                                                                     l883 1AC4  
                                                                     l859 2DE2  
                                                                     l699 1CF0  
                                                                     l955 1204  
                                                                     l947 1146  
                                                                     l939 10BC  
                                                                     l876 1A44  
                                                                     l796 1E72  
                                                                     l893 1B64  
                                                                     l885 1AD4  
                                                                     l877 1A6A  
                                                                     l869 2E7C  
                                                                     l957 1220  
                                                                     l949 116C  
                                                                     l886 1AFA  
                                                                     l878 1A7C  
                                                                     l958 1234  
                                                                     l887 1B0C  
                                                                     l889 1B1C  
                                                            __CFG_CPB$OFF 000000  
                                                                     _PEN 007E2A  
                                                                     _SEN 007E28  
                                                                     _cbf 0066  
                                                                     _rtc 0078  
                                                             ?i2_I2C_Read 0002  
                                                            __CFG_BORV$20 000000  
                                                            ___awmod@sign 0085  
                                                             ?i2_I2C_Wait 0001  
                                                             ?i2_I2C_Stop 0001  
                                                                     prod 000FF3  
                                                                     tosl 000FFD  
                                                                     wreg 000FE8  
                                                    __size_of_I2C_Restart 000C  
                                                             ?i2_BCDtoDEC 0001  
                                                __size_of_ajusteSP_Bombas 025A  
                                                            __CFG_LVP$OFF 000000  
                                                            ___ftdiv@cntr 0024  
                                                            ___ftdiv@sign 0029  
                                                                    l1102 06C4  
                                                                    l1103 06F0  
                                                                    l1016 6F04  
                                                                    l1112 07D4  
                                                                    l1032 795E  
                                                                    l1017 6EEC  
                                                                    l1113 0800  
                                                                    l1050 0120  
                                                                    l1034 7968  
                                                                    l1115 0808  
                                                                    l1051 019A  
                                                                    l1116 0896  
                                                                    l1108 0748  
                                                                    l1052 016C  
                                                                    l1117 08C2  
                                                                    l1109 0774  
                                                                    l1061 0214  
                                                                    l1070 02E2  
                                                                    l1310 3EDC  
                                                                    l1063 04E0  
                                                                    l1071 02F6  
                                                                    l1055 01B6  
                                                                    l1311 3EE8  
                                                                    l1303 3E84  
                                                                    l1080 03C0  
                                                                    l1072 02EE  
                                                                    l1056 01AC  
                                                                    l1312 3EF8  
                                                                    l1304 3E96  
                                                                    l1320 77DE  
                                                                    l1306 3EB8  
                                                                    l1083 03D6  
                                                                    l1075 0346  
                                                                    l1307 3EAE  
                                                                    l1323 7804  
                                                                    l1068 0538  
                                                                    l1084 0440  
                                                                    l1324 7810  
                                                                    l1316 77C0  
                                                                    l1093 05C8  
                                                                    l1085 0492  
                                                                    l1069 02A6  
                                                                    l1325 7820  
                                                                    l1317 77CE  
                                                                    l1094 05EE  
                                                                    l1078 0352  
                                                                    l1095 05F8  
                                                                    l1087 04A6  
                                                                    l1079 0394  
                                                                    l1319 77E8  
                                                                    l1096 06FC  
                                                                    l1088 04CC  
                                                                    l1089 0574  
                                                                    l1098 064A  
                                                                    l1290 36F4  
                                                                    l1099 0676  
                                                                    l1291 36B2  
                                                                    l1284 365A  
                                                                    l1293 372A  
                                                                    l1285 3652  
                                                                    l1710 3FB4  
                                                                    l1294 3734  
                                                                    l1711 3FAC  
                                                                    l1287 369E  
                                                                    l5000 7008  
                                                                    l1544 752A  
                                                                    l1545 7520  
                                                                    l1465 6D86  
                                                                    l1722 7A4A  
                                                                    l1554 7424  
                                                                    l1491 78EA  
                                                                    l1723 79E0  
                                                                    l1555 741A  
                                                                    l1492 78DC  
                                                                    l1724 7A1E  
                                                                    l1548 754E  
                                                                    l1549 755A  
                                                                    l1558 7440  
                                                                    l5102 0354  
                                                                    l1495 7922  
                                                                    l1751 71B8  
                                                                    l1559 744C  
                                                                    l1496 7932  
                                                                    l1568 701A  
                                                                    l5112 03D8  
                                                                    l1569 7006  
                                                                    l1756 3F7E  
                                                                    l1757 3F0A  
                                                                    l1758 3F74  
                                                                    l6040 707A  
                                                                    l5146 057A  
                                                                    l7020 3B00  
                                                                    l5346 711A  
                                                                    l7028 3B1C  
                                                                    l5384 6F60  
                                                                    l6520 2B4E  
                                                                    l6514 2B26  
                                                                    l7074 1C72  
                                                                    l6508 2AFE  
                                                                    l4942 3F0C  
                                                                    l6550 73AC  
                                                                    l7360 1328  
                                                                    l4866 6C88  
                                                                    l4956 3F9A  
                                                                    l5916 760A  
                                                                    l5588 36EE  
                                                                    l4990 7A6E  
                                                                    l5854 3C74  
                                                                    l4968 71D4  
                                                                    l6912 2FF6  
                                                                    l4994 6EEE  
                                                                    l6666 096A  
                                                                    l6926 3094  
                                                                    l6938 30C6  
                                                                    l6994 3A58  
                                                                    STR_1 7FE7  
                                                                    STR_2 7FE7  
                                                                    STR_3 7F7F  
                                                                    STR_4 7FDD  
                                                                    STR_5 7FF9  
                                                                    STR_6 7FB0  
                                                                    STR_7 7FB0  
                                                                    STR_8 7FDD  
                                                                    STR_9 7FF9  
                                                                    u5110 05AC  
                                                                    u5040 0432  
                                                                    u5008 0378  
                                                                    u5050 047C  
                                                                    u6100 3C66  
                                                                    u5230 0706  
                                                                    u5070 0512  
                                                                    u5038 03FC  
                                                                    u6110 3C72  
                                                                    u5047 0428  
                                                                    u5039 0436  
                                                                    u5320 08CE  
                                                                    u7000 2B6E  
                                                                    u5057 0472  
                                                                    u5330 0900  
                                                                    u5218 06A8  
                                                                    u5340 090A  
                                                                    u5260 0786  
                                                                    u5077 0508  
                                                                    u4630 7530  
                                                                    u5318 087A  
                                                                    u5510 6F84  
                                                                    u4560 3FD8  
                                                                    u6080 18A8  
                                                                    u5440 77EE  
                                                                    u4800 705A  
                                                                    u6320 70A2  
                                                                    u5337 08F6  
                                                                    u5258 072C  
                                                                    u4660 742A  
                                                                    u5188 062E  
                                                                    u4900 0202  
                                                                    u5380 3EBE  
                                                                    u6340 7194  
                                                                    _RCIF 007CF5  
                                                                    _RCEN 007E2B  
                                                                    u4567 3FCE  
                                                                    u4815 705E  
                                                                    u4920 0260  
                                                                    u4690 3F3C  
                                                                    u4770 7A64  
                                                                    u5298 07B8  
                                                                    u4930 029C  
                                                                    u7330 098E  
                                                                    u5650 3322  
                                                                    u4907 01F8  
                                                                    u7430 0BD2  
                                                                    u4927 0256  
                                                                    u4960 0326  
                                                                    u4937 0292  
                                                                    u4970 032C  
                                                                    u4890 01DA  
                                                                    u7450 0BF2  
                                                                    u9107 71FC  
                                                                    u9117 7210  
                                                                    u9127 6EF6  
                                                                    u4967 031C  
                                                                    u4888 0150  
                                                                    u7480 0C4E  
                                                                    u5880 2606  
                                                                    u8520 14EC  
                                                                    u7800 3ACE  
                                                                    u9137 783E  
                                                                    u4897 01D0  
                                                                    u8450 1408  
                                                                    u7730 3012  
                                                                    u9147 785A  
                                                                    u6940 2AF6  
                                                                    u7900 1D30  
                                                                    u9157 7874  
                                                                    u6790 78F0  
                                                                    u8390 1374  
                                                                    u6950 2B0E  
                                                                    u7750 30C0  
                                                                    u9167 6DAC  
                                                                    u8560 1568  
                                                                    u6960 2B1E  
                                                                    u9097 3AE8  
                                                                    u8490 1484  
                                                                    u7850 3B76  
                                                                    u6970 2B36  
                                                                    u7770 30F2  
                                                                    u7860 3B7E  
                                                                    u6980 2B46  
                                                                    u7790 3AB8  
                                                                    u6990 2B5E  
                                                                    u8815 7596  
                                                                    _RSEN 007E29  
                                                            __CFG_WRT0$ON 000000  
                                                           _enviaSMS$1221 00BF  
                                                           _enviaSMS$1222 00C1  
                                                           _enviaSMS$1223 00C3  
                                                            __CFG_WRT1$ON 000000  
                                                           _enviaSMS$1208 00BD  
                                                           _enviaSMS$1228 00C5  
                                                            __CFG_WRT2$ON 000000  
                                                            __CFG_WRT3$ON 000000  
                                                   writeEEPROM16_ext@data 0006  
                                                            __CFG_STVR$ON 000000  
                                                                    __dia 00EC  
                                                                    __ano 00EA  
                                                                    __hor 00ED  
                                                                    __mes 00EB  
                                                                    __min 00EE  
                                                       ?_Lcd_Write_String 0084  
                                                                    __sec 00EF  
                                                          ?_drenarPressao 0001  
                                                           __CFG_EBTRB$ON 000000  
                                                                    _atoi 364E  
                                                                    _main 0DF4  
                                             __end_ofi2_getDS1307TimeDate 3556  
                                                                    _tel1 01B0  
                                                                    _tel2 01A4  
                                                            ___ftpack@arg 0001  
                                                            ___ftpack@exp 0004  
                                                        __end_of_I2C_Read 706E  
                                              __end_of_configuraTelefones 15E2  
                                                                    fsr0h 000FEA  
                                                                    fsr1h 000FE2  
                                                                    indf0 000FEF  
                                                                    fsr2h 000FDA  
                                                                    fsr0l 000FE9  
                                                                    indf2 000FDF  
                                                                    fsr1l 000FE1  
                                                                    fsr2l 000FD9  
                                                                    btemp 007F  
                                                        __end_of_I2C_Wait 6CDE  
                                                        __end_of_I2C_Stop 6C3A  
                                                 __size_of_tela_ajusteRTC 0236  
                                                        _etapaComunicacao 0051  
                                                            ?i2_I2C_Start 0001  
                                                                    prodh 000FF4  
                                                                    prodl 000FF3  
                                                            ?i2_I2C_Write 0002  
                                                         __end_ofi2_delay 6E4C  
                                                                    start 0118  
                                                      ??_Lcd_Write_String 0086  
                                                  __size_of_lerTransdutor 0234  
                                            partidaBombaEstacionaria@acao 0083  
                                                        __end_of_BCDtoDEC 6CF8  
                                                         __end_of_Lcd_Cmd 6DBE  
                                                  __size_ofi2_I2C_Restart 000C  
                                                          clearShiftREG@i 0080  
                                                           ?_atualizarLCD 0088  
                                                            ___ftmul@cntr 0019  
                                                            ___param_bank 000000  
                                                            ___ftmul@sign 001A  
                                                        __end_of_DECtoBCD 725E  
                                               __size_of_tela_testeBombas 01D0  
                                                     _timerVerificarSinal 00FE  
                                                           _lerParametros 2FD4  
                                                            ___fttol@exp1 0029  
                                                         _executandoTeste 00F1  
                                                            ___fttol@lval 0025  
                                                        ?_I2C_Master_Init 008D  
                                                            ?_readButtons 0001  
                                                           __CFG_OSCS$OFF 000000  
                                                 _configuraTelefones$1469 00C1  
                                                             ?i2_RTC_Init 0001  
                                                                   ?_atoi 00BF  
                                                                   ?_main 0001  
                                                                   _ACKEN 007E2C  
                                                                   _ACKDT 007E2D  
                                                         __end_of___awdiv 3F06  
                                                         __end_of___ftadd 29EE  
                                                                   STR_10 7EAD  
                                                                   STR_11 7FF9  
                                                                   STR_20 7EAD  
                                                                   STR_12 7D24  
                                                                   STR_13 7FFC  
                                                                   STR_21 7FA9  
                                                                   STR_30 7FD1  
                                                                   STR_22 7FF9  
                                                                   STR_14 7AAF  
                                                                   STR_23 7D24  
                                                                   STR_31 7FF9  
                                                                   STR_15 7EB9  
                                                                   STR_24 7FFC  
                                                                   STR_32 7FD1  
                                                                   STR_16 7FF9  
                                                                   STR_40 7DF2  
                                                                   STR_33 7FD7  
                                                                   STR_17 7FD7  
                                                                   STR_41 7DD2  
                                                                   STR_25 7B95  
                                                                   STR_18 7FDD  
                                                                   STR_34 7FF9  
                                                                   STR_50 7FE2  
                                                                   STR_42 7CD8  
                                                                   STR_26 7B2D  
                                                                   STR_27 7FF9  
                                                                   STR_19 7FF9  
                                                                   STR_35 7F01  
                                                                   STR_51 7E1F  
                                                                   STR_43 7CEB  
                                                                   STR_52 7FF9  
                                                                   STR_28 7FD1  
                                                                   STR_44 7F91  
                                                                   STR_60 7EDD  
                                                                   STR_36 7ED1  
                                                         __end_of___awmod 782E  
                                                                   STR_37 7FA9  
                                                                   STR_29 7FF9  
                                                                   STR_53 7FE2  
                                                                   STR_45 7F43  
                                                                   STR_61 7C74  
                                                                   STR_46 7EA0  
                                                                   STR_54 7E2E  
                                                                   STR_70 7E01  
                                                                   STR_62 7D6C  
                                                                   STR_38 7C4C  
                                                                   STR_55 7FF9  
                                                                   STR_71 7FC5  
                                                                   STR_39 7E3D  
                                                                   STR_47 7D7E  
                                                                   STR_63 7C0D  
                                                                   STR_56 7FE2  
                                                                   STR_80 7F75  
                                                                   STR_48 7F2D  
                                                                   STR_72 7E10  
                                                                   STR_64 7C22  
                                                                   STR_81 7FF9  
                                                                   STR_49 7FF9  
                                                                   STR_57 7DC2  
                                                                   STR_65 7C60  
                                                                   STR_73 7C37  
                                                                   STR_82 7FE2  
                                                                   STR_90 7F9A  
                                                                   STR_66 7D11  
                                                                   STR_74 7C88  
                                                                   STR_58 7BF3  
                                                                   STR_67 7DF2  
                                                                   STR_83 7F17  
                                                                   STR_59 7DA0  
                                                                   STR_91 7CB0  
                                                                   STR_75 7C9C  
                                                                   STR_76 7F38  
                                                                   STR_84 7E77  
                                                                   STR_92 7D8F  
                                                                   STR_68 7CC4  
                                                                   STR_85 7FF9  
                                                                   STR_77 7FF5  
                                                                   STR_69 7FCB  
                                                                   STR_93 7EF5  
                                                                   STR_94 7EB9  
                                                                   STR_86 7FE2  
                                                                   STR_78 7FF1  
                                                                   STR_95 7FB7  
                                                                   STR_87 7E85  
                                                                   STR_79 7BD4  
                                                                   STR_88 7FF9  
                                                                   STR_96 7FBE  
                                                                   STR_89 7FE2  
                                                                   STR_97 7EFE  
                                                                   STR_98 7E93  
                                                                   STR_99 7DB1  
                                                         __end_of___ftdiv 3908  
                                                            ?_informacoes 0001  
                                                         __end_of___lldiv 7948  
                                                         __end_of___ftmul 364E  
                                                                   _T0CON 000FD5  
                                                         ___awdiv@divisor 0082  
                                                         __end_of___fttol 3822  
                                                         __end_of___lwdiv 7568  
                                                         __end_of___lwmod 745A  
                                                                   i2l230 2264  
                                                                   i2l232 233C  
                                                                   i2l225 6D4E  
                                                                   i2l234 2370  
                                                                   i2l236 2466  
                                                                   i2l237 2430  
                                                                   i2l601 2C5C  
                                                                   i2l610 2D18  
                                                                   i2l602 2C7E  
                                                                   i2l460 776C  
                                                                   i2l462 7782  
                                                                   i2l454 772C  
                                                                   i2l463 778C  
                                                                   i2l607 2CB6  
                                                                   i2l456 7742  
                                                                   i2l608 2D32  
                                                                   i2l465 77A2  
                                                                   i2l457 774C  
                                                                   i2l609 2CDA  
                                                                   i2l459 7762  
                                                                   i2l591 2C16  
                                                                   i2l583 2BCE  
                                                                   i2l593 2C20  
                                                                   i2l585 2BD8  
                                                                   i2l905 008C  
                                                                   i2l595 2C32  
                                                                   i2l587 2BEE  
                                                                   i2l907 00BC  
                                                                   i2l908 00C8  
                                                                   i2l597 2C3C  
                                                                   i2l589 2BF8  
                                                                   i2l599 2C52  
                                                         ___awdiv@counter 0084  
                                                                   _RCREG 000FAE  
                                                                   _TMR0H 000FD7  
                                                                   _TIMER 0008  
                                                                   _TMR0L 000FD6  
                                                                   _SPBRG 000FAF  
                                                         __end_of__doprnt 091A  
                                                 __size_of_Lcd_Set_Cursor 00C4  
                                                                   _TXREG 000FAD  
                                                         _writeEEPROM_ext 72E4  
                                                           __CFG_PWRT$OFF 000000  
                                                         __end_of_btPress 763C  
                                                          __CFG_EBTR0$OFF 000000  
                                                          __CFG_EBTR1$OFF 000000  
                                                          __CFG_EBTR2$OFF 000000  
                                                          __CFG_EBTR3$OFF 000000  
                                                           __CFG_WRTB$OFF 000000  
                                                                   __b_ok 005E  
                                                           __CFG_WRTC$OFF 000000  
                                                           __CFG_WRTD$OFF 000000  
                                                         __end_of_readADC 6D6A  
                                                                   _delay 6EE8  
                                                                   _blink 715C  
                                                         __end_of_dpowers 7AAF  
                                                                   _line1 017B  
                                                                   _line2 0166  
                                                                   _line3 0151  
                                                                   _line4 013C  
                                                         __end_of_isdigit 6D92  
                                                  ??_criarCaracteresCGRAM 0084  
                                                                   _shift 0044  
                                                           ___ftpack@sign 0005  
                                                                   _timer 2BBA  
                                                                   atoi@a 00C4  
                                                        __end_of_RTC_Init 6FC2  
                                                                   atoi@s 00BF  
                                                                   _putch 6C82  
                                                       __end_of_I2C_Start 6C2E  
                                                  _flagEstacionariaLigada 00F0  
                                                       __end_of_I2C_Write 6C62  
                                                                   pclath 000FFA  
                                                                   tablat 000FF5  
                                                  __size_of_intToFloatStr 0094  
                                                                   status 000FD8  
                                                   __end_of_telaPrincipal 1DCA  
                                                                   wtemp6 0080  
                                                         __end_of_sprintf 7372  
                                                          _comunicarTeste 246C  
                                                         __end_of_strncmp 3FA0  
                                                   i2writeEEPROM_ext@data 0004  
                                                        __end_of_Lcd_Init 78B6  
                                                          ??_atualizarLCD 0090  
                                              __size_of_getDS1307TimeDate 0134  
                                              __size_of_setDS1307TimeDate 0112  
                                                        __end_of_Lcd_Port 72E4  
                                                     __size_ofi2_I2C_Read 0036  
                                                  _tentativasVerificarGSM 0077  
                                                     __size_ofi2_I2C_Wait 0018  
                                                         __initialization 763C  
                                                           _dtl_principal 0057  
                                                     __size_ofi2_I2C_Stop 000C  
                                                          ?_lerParametros 0001  
                                                            __end_of_atoi 373A  
                                                            __end_of_main 125C  
                                                   __end_of_aguardaBuffer 7120  
                                                     __size_ofi2_BCDtoDEC 0016  
                                                                  ??_atoi 00C1  
                                                                  ??_main 00DB  
                                                           ___fttol@sign1 0024  
                                                            i2I2C_Write@d 0002  
                                                           _status_jockey 00FD  
                                      lerParametros@verifica_memoria_nova 0094  
                                                      __size_of_Lcd_Clear 0012  
                                                           __activetblptr 000002  
                                                                  ?_TIMER 0001  
                                                           _lerTransdutor 2238  
                                                   __end_of_clearShiftREG 6F8A  
                                                           i2_I2C_Restart 6C16  
                                                    _tempo_limite_partida 006C  
                                                               I2C_Read@a 0081  
                                                                  TIMER@c 0043  
                                                            ?_setShiftREG 0001  
                                                         __CFG_CCP2MUX$ON 000000  
                                                      readEEPROM_ext@data 008D  
                                                                  ?_delay 0080  
                                                                  ?_blink 0080  
                                                                  _ADCON0 000FC2  
                                                                  _ADCON1 000FC1  
                                                                  STR_100 7CFE  
                                                                  STR_101 7E69  
                                                                  STR_102 7FEC  
                                                                  STR_111 7F88  
                                                                  STR_103 7EC5  
                                                                  STR_104 7FEC  
                                                                  STR_112 7F0C  
                                                                  STR_120 7DE2  
                                                                  STR_113 7F6B  
                                                                  STR_105 7D5A  
                                                                  STR_121 7D36  
                                                                  STR_114 7F9A  
                                                                  STR_122 7F61  
                                                                  STR_106 7F22  
                                                                  _ADRESH 000FC4  
                                                                  STR_107 7F2D  
                                                                  STR_115 7CB0  
                                                                  STR_123 7D48  
                                                                  STR_108 7E1F  
                                                                  STR_124 7F57  
                                                                  STR_116 7E5B  
                                                                  STR_117 7EFE  
                                                                  STR_109 7E2E  
                                                                  STR_125 7EE9  
                                                                  STR_118 7EB9  
                                                                  STR_126 7E4C  
                                                                  _ADRESL 000FC3  
                                                                  STR_127 7FA2  
                                                                  STR_119 7F4D  
                                                        ___awdiv@dividend 0080  
                                                                  ?_timer 0001  
                                                                  ?_putch 0001  
                                                        __end_of___ftpack 3DD0  
                                                          lerTransdutor@i 002A  
                                                         ??_drenarPressao 00B5  
                                                               ??i2_delay 0003  
                                                  __end_of_comunicarTeste 264E  
                                                                  i2l1016 6E34  
                                                                  i2l1017 6E1E  
                                                                  i2l1404 294A  
                                                                  i2l1405 293E  
                                                                  i2l1350 3D3A  
                                                                  i2l1422 3E02  
                                                                  i2l1351 3D2E  
                                                                  i2l1407 2972  
                                                                  i2l1423 3E34  
                                                                  i2l1431 359C  
                                                                  i2l1408 2990  
                                                                  i2l1416 3868  
                                                                  i2l1432 35D0  
                                                                  i2l1353 3D72  
                                                                  i2l1409 29C2  
                                                                  i2l1417 38A8  
                                                                  i2l1433 35E2  
                                                                  i2l1354 3D5A  
                                                                  i2l1418 38D0  
                                                                  i2l1435 35FC  
                                                                  i2l1356 3D9E  
                                                                  i2l1436 360E  
                                                                  i2l1452 37C0  
                                                                  i2l1357 3D92  
                                                                  i2l1381 2874  
                                                                  i2l1461 380A  
                                                                  i2l1453 37AE  
                                                                  i2l1390 2910  
                                                                  i2l1385 28A2  
                                                                  i2l1458 37EA  
                                                                  i2l1395 2904  
                                                                  i2l1459 37DC  
                                                                  i2l1396 28F8  
                                                                  i2l5330 6E20  
                                                                  i2l6134 29E8  
                                                                  i2l6180 3902  
                                                                  i2l6228 3648  
                                                                  i2l6404 225A  
                                                                  _INTCON 000FF2  
                                                                  i2l5458 3DCA  
                                                                  i2l6292 381C  
                                                                  i2l4862 3E62  
                                                                  i2l4864 3E66  
                                                        __end_of___lwtoft 6D42  
                                                                  u635_41 2830  
                                                                  u636_41 2844  
                                                                  u661_41 3568  
                                                                  u670_41 374C  
                                                                  u663_41 3582  
                                                                  u656_41 3834  
                                                               ??_Lcd_Cmd 0081  
                                                                  u658_41 384E  
                                                                  _TMR0IF 007F92  
                                                          __CFG_WDTPS$128 000000  
                                       __size_of_partidaBombaEstacionaria 00E4  
                                                 __size_of_Lcd_Write_Char 0042  
                                                                  _SSPADD 000FC8  
                                                                  _SSPBUF 000FC9  
                                               ?_partidaBombaEstacionaria 0001  
                                                     __size_ofi2_RTC_Init 0032  
                                                       ??_ajusteSP_Bombas 00C2  
                                                 writeEEPROM16_ext@adress 0008  
                                                     _dias_restante_teste 00E8  
                                                ??_configuraRegistradores 0080  
                                                                  __b_esc 0064  
                                                                  ___ftge 3DD0  
                                                          _readEEPROM_ext 745A  
                                                                  ___wmul 6DBE  
                                                        __end_of_enviaSMS 1938  
                                                               ??___awdiv 0084  
                                                            enviaSMS@tipo 00C7  
                                                               ??___ftadd 0021  
                                                               ??___awmod 0084  
                                                               ??___ftdiv 0021  
                                                         _getSinalSIM800L 29EE  
                                                               ??___lldiv 0088  
                                                               ??___ftmul 0012  
                                                               ??___fttol 001F  
                                                                  _blinkk 0067  
                                                               ??___lwdiv 0084  
                                                               ??___lwmod 008B  
                                                 _habilitaTesteAutomatico 0073  
                                   __end_of_verificarIntervaloTesteBombas 72A0  
                                  __size_of_verificarIntervaloTesteBombas 0042  
                                           _verificarIntervaloTesteBombas 725E  
                                                 __end_of_writeEEPROM_ext 732A  
                                                           ?_limparBuffer 0001  
                                                               ??__doprnt 0092  
                                                                  _memset 6FFA  
                                                                  delay@x 0080  
                                                                  clear_0 7682  
                                                                  clear_1 768E  
                                                                  clear_2 769A  
                                                        ___awdiv@quotient 0086  
                                                                  blink@i 0084  
                                                         ___awmod@divisor 0082  
                                                               ??_btPress 0080  
                                                           _intToFloatStr 7948  
                                                            __doprnt@flag 009B  
                                                         ___awmod@counter 0084  
                                           setDS1307TimeDate@ptrToUserVal 008C  
                                                                  _printf 7120  
                                                            __doprnt@prec 0096  
                                                                  _strchr 719A  
                                                                  _strlen 3FA0  
                                                                  _strstr 79DC  
                                                          ?_lerTransdutor 0001  
                                                   ___ftmul@f3_as_product 0016  
                                                           dataLoger@logs 00C0  
                                                               ??_readADC 0003  
                                                               ??_isdigit 0080  
                                                          ?i2_I2C_Restart 0001  
                                                               ?_I2C_Read 0081  
                                                               ?_I2C_Wait 0001  
                                                               ?_I2C_Stop 0001  
                                                            __mediumconst 7A74  
                                                                  tblptrh 000FF7  
                                                                  tblptrl 000FF6  
                                                                  tblptru 000FF8  
                                                                  putch@c 0080  
                                                               ?_BCDtoDEC 0001  
                                                               ??_sprintf 00AF  
                                                               ??_strncmp 008C  
                                                               ?_DECtoBCD 0001  
                                                         Lcd_Set_Cursor@a 0084  
                                                         Lcd_Set_Cursor@b 0083  
                                                         Lcd_Set_Cursor@y 0086  
                                                         Lcd_Set_Cursor@z 0085  
                                                         ?_comunicarTeste 0001  
                                                              __accesstop 0080  
                                                 __end_of__initialization 76A0  
                                                              ___ftadd@f1 001B  
                                                              ___ftadd@f2 001E  
                                                          _tela_ajusteRTC 2002  
                                                              ___ftge@ff1 0001  
                                                              ___ftge@ff2 0004  
                                                       __end_of_Lcd_Clear 6C82  
                                                        _etapaTesteBombas 0072  
                                                           ___rparam_used 000001  
                                                              ___ftdiv@f1 001B  
                                                              ___ftdiv@f2 001E  
                                                              ___ftdiv@f3 0025  
                                                         ??_lerParametros 0094  
                                                           __end_of_TIMER 0118  
                                                              _acaoBombas 30F8  
                                                  __end_of_readEEPROM_ext 74B0  
                                                     _telefoneSelecionado 00F7  
                                                              ___ftmul@f1 000C  
                                                              ___ftmul@f2 000F  
                                                    __size_ofi2_I2C_Start 000C  
                                                              ___fttol@f1 001B  
                                                    __size_ofi2_I2C_Write 000E  
                                                        _tela_testeBombas 264E  
                                                          __pcstackCOMRAM 0001  
                                                        _status_principal 00FC  
                                                            __pidataBANK0 6BF6  
                                                            __pidataBANK1 6BF2  
                                                      __size_of_dataLoger 0238  
                                                           __end_of_delay 6F1E  
                                                           __end_of_blink 719A  
                                                          ??_limparBuffer 0088  
                                                __size_of_acaoTesteBombas 04DA  
                                                           __end_of_timer 2D38  
                                                           __end_of_putch 6C96  
                                                          ?_intToFloatStr 00B5  
                                                       ?_readEEPROM16_ext 008E  
                                                               ?_RTC_Init 0001  
                                                       intToFloatStr@conv 00BB  
                                                              ___lwtoft@c 0009  
                                                          _tela_menu_posi 0069  
                                                      ??_readEEPROM16_ext 0090  
                                                    __size_of_readButtons 0086  
                                                          _Lcd_Set_Cursor 3B84  
                                                                 ??_TIMER 0031  
                                                            ??i2_I2C_Read 0004  
                                                              ??_I2C_Read 0083  
                                                            ??i2_I2C_Wait 0001  
                                                      __size_of_getSerial 011C  
                                                              ??_I2C_Wait 0080  
                                                            ??i2_I2C_Stop 0002  
                                                              ??_I2C_Stop 0081  
                                                    __size_of_informacoes 0074  
                                                            __sec_partida 0070  
                                                    __end_of_atualizarLCD 3ABE  
                                                            ??i2_BCDtoDEC 0001  
                                                               ?_Lcd_Init 0001  
                                                              ??_BCDtoDEC 0080  
                                                                 ??_delay 0082  
                                                               ?_Lcd_Port 0001  
                                                              __doprnt@ap 0090  
                                                                 ??_blink 0084  
                                                              __doprnt@cp 009C  
                                                              __doprnt@pb 008C  
                                                   writeEEPROM_ext@adress 008D  
                                                              ??_DECtoBCD 0088  
                                                                 ??_timer 0009  
                                                                 ??_putch 0080  
                                                              __pbssBANK0 00DB  
                                                              __pbssBANK1 0100  
                                                  __end_of_tela_ajusteRTC 2238  
                                                              __menu_posi 00DF  
                                                 __end_of_getSinalSIM800L 2BBA  
                                                     writeEEPROM_ext@data 008C  
                                                         ?_readEEPROM_ext 0001  
                                                __size_of_resetParametros 0030  
                                                      __end_ofi2_I2C_Read 6EE8  
                                                            I2C_Read@temp 0083  
                                                      __end_ofi2_I2C_Wait 6CC4  
                                                                 ?___ftge 0001  
                                                      __end_ofi2_I2C_Stop 6C16  
                                         __size_of_configuraRegistradores 0056  
                                                                 ?___wmul 0080  
                                                       _writeEEPROM16_ext 6CF8  
                                                      __size_of_salvarLOG 00C4  
                                                      __end_ofi2_BCDtoDEC 6CAC  
                                                              _flag_b_esc 0065  
                                                              _codigoErro 00F3  
                                                                 ?_memset 0080  
                                                      _configuraTelefones 125C  
                                                        ?_writeEEPROM_ext 008C  
                                                      __size_of_validaRTC 004E  
                                                            ??i2_RTC_Init 0004  
                                                         ??_lerTransdutor 002A  
                                                              ??_RTC_Init 008C  
                                               __size_of_Lcd_Write_String 003A  
                                                      ?_writeEEPROM16_ext 0006  
                                                               ?___ftpack 0001  
                                                  __end_of_Lcd_Set_Cursor 3C48  
                                           criarCaracteresCGRAM@character 0087  
                                                              I2C_Write@d 008A  
                                                                 ?_printf 00A1  
                                                         ??i2_I2C_Restart 0002  
                                                                 ?_strchr 0080  
                                                                 ?_strlen 0080  
                                                               ?___lwtoft 0009  
                                                                 ?_strstr 008F  
                                                           ??_I2C_Restart 0081  
                                          ?_verificarIntervaloTesteBombas 0001  
                                                     ?_configuraTelefones 0001  
                                                     ??_writeEEPROM16_ext 0008  
                                                              ??_Lcd_Init 0083  
                                                              ??_Lcd_Port 0080  
                                                                 _SSPCON1 000FC6  
                                                                 _SSPCON2 000FC5  
                                                       __end_of_dataLoger 2002  
                                                                 _SSPSTAT 000FC7  
                                                    __size_of_setShiftREG 0048  
                                                                 i2_delay 6E1A  
                                                               ?_enviaSMS 0001  
                                                         ?_tela_ajusteRTC 0001  
                                                            _flag_b_menos 0063  
                                                          _Lcd_Write_Char 71DA  
                                                                 _Lcd_Cmd 6D92  
                                                              _dtl_jockey 0058  
                                                      __size_of_writeChar 000E  
                                                      __end_ofi2_RTC_Init 6E7E  
                                                               _I2C_Start 6C22  
                                                              _gsmOcupado 00F4  
                                                               _I2C_Write 6C54  
                                                         _timerReenvioSMS 00F6  
                                                    ??_configuraTelefones 00BF  
                                                             ?_acaoBombas 0001  
                                                       __end_of_getSerial 3332  
                                                                 __Hparam 0000  
                                                                 __Lparam 0000  
                                               __end_of_writeEEPROM16_ext 6D1A  
                                                         _sp_estacionaria 00E2  
                                            __size_ofi2_getDS1307TimeDate 0112  
                                                         __size_of___ftge 009C  
                                                                 __b_mais 0060  
                                                         ??_intToFloatStr 00B7  
                                                                 ___awdiv 3E6C  
                                                                 ___ftadd 281E  
                                                                 ___awmod 77A8  
                                                                 ___ftdiv 3822  
                                                                 ___lldiv 78B6  
                                                         __size_of___wmul 002C  
                                                                 ___ftmul 3556  
                                                                 ___fttol 373A  
                                                                 ___lwdiv 7506  
                                                                 ___lwmod 7408  
                                                           atualizarLCD@i 0090  
                                                                 __doprnt 011C  
                                                                 __pcinit 763C  
                                                              ??___ftpack 0006  
                                                         __size_of_memset 003A  
                                                                 _btPress 75CC  
                                                                 __ramtop 0600  
                                                         ?_Lcd_Set_Cursor 0083  
                                                                 __tensao 004C  
                                                                 __ptext0 0DF4  
                                                                 __ptext1 725E  
                                                                 __ptext2 264E  
                                                                 __ptext3 2002  
                                                                 __ptext4 73BA  
                                                                 __ptext5 3332  
                                                                 __ptext6 721C  
                                                                 __ptext7 1B92  
                                                                 __ptext8 6DEA  
                                                                 __ptext9 7372  
                                               criarCaracteresCGRAM@F2956 7A75  
                                                         __size_of_printf 003C  
                                                              ??___lwtoft 000C  
                                                                 _dtl_dia 005D  
                                                                 _dtl_ano 005B  
                                                         __size_of_strchr 0040  
                                                                 _readADC 6D42  
                                                         __size_of_strlen 0060  
                                                                 _dtl_mes 005C  
                                                                 _dtl_min 0059  
                                                           i2BCDtoDEC@val 0001  
                                                         __size_of_strstr 0098  
                                                                 _dpowers 7AA5  
                                                    readEEPROM16_ext@data 0091  
                                                                 _isdigit 6D6A  
                                                       ??_acaoTesteBombas 00C8  
                                                        ___awmod@dividend 0080  
                                                         _ajusteSP_Bombas 1938  
                                                __size_of_I2C_Master_Init 0064  
                                                        _dtl_carregar_log 0055  
                                                  _configuraRegistradores 74B0  
                                                                 _pressao 00F8  
                                                                 _sprintf 732A  
                                                           __doprnt@width 009E  
                                                     __end_of_I2C_Restart 6C46  
                                                  __end_of_Lcd_Write_Char 721C  
                                                                 _strncmp 3F06  
                                                    end_of_initialization 76A0  
                                                       __end_of_salvarLOG 3D0C  
                                                              ??_enviaSMS 00BB  
                                                    __end_of_limparBuffer 6F54  
                                           __size_of_criarCaracteresCGRAM 00C6  
                                                       __end_of_validaRTC 7408  
                                                                 memset@c 0082  
                                                                 memset@n 0084  
                                                                 memset@p 0086  
                                                           __Lmediumconst 7A74  
                                                     _timerTrocarTextoLcd 0076  
                                                              _timer$1326 0009  
                                                              _timer$1327 000B  
                                                              _timer$1328 000D  
                                                              _timer$1329 000F  
                                                              blink@start 0082  
                                                              ?_I2C_Start 0001  
                                                              ?_I2C_Write 008A  
                                                            writeChar@hex 0080  
                                                            _bufferSerial 0100  
                                                        ?_getSinalSIM800L 0001  
                                                    _acaoTesteBombas$1313 00D3  
                                                    _acaoTesteBombas$1305 00D1  
                                                    _acaoTesteBombas$1323 00D7  
                                                    _acaoTesteBombas$1318 00D5  
                                                    _acaoTesteBombas$1293 00CF  
                                                    _acaoTesteBombas$2382 00CD  
                                                         ___lldiv@divisor 0084  
                                                         ___lldiv@counter 008C  
                                                ??_configurarEstacionaria 00B5  
                                                               _RCSTAbits 000FAB  
                                                                 printf@f 00A1  
                                                        I2C_Master_Init@c 008D  
                                                                 postdec1 000FE5  
                                                                 postdec2 000FDD  
                                                                 postinc0 000FEE  
                                                                 postinc2 000FDE  
                                                               Lcd_Port@a 0080  
                                                                 strlen@s 0080  
                                                       ??_resetParametros 0081  
                                                              getSerial@i 00BC  
                                                               _PORTAbits 000F80  
                                                               _PORTBbits 000F81  
                                                               _PORTCbits 000F82  
                                                               _PORTDbits 000F83  
                                                   __size_of_atualizarLCD 00D2  
                                                               _PORTEbits 000F84  
                                                       __end_of_writeChar 6C70  
                                                  __size_of_telaPrincipal 0238  
                                                               _TRISAbits 000F92  
                                                               _TRISBbits 000F93  
                                                               _TRISCbits 000F94  
                                                        ??_comunicarTeste 00BB  
                                                               _TRISDbits 000F95  
                                                               _TRISEbits 000F96  
                                                 i2writeEEPROM_ext@adress 0005  
                                                     __size_of_acaoBombas 011E  
                                                __end_of_tela_testeBombas 281E  
                                                       __size_of_I2C_Read 003A  
                                                       __size_of_I2C_Wait 001A  
                                                       __size_of_I2C_Stop 000C  
                                                         ?_Lcd_Write_Char 0001  
                                                       Lcd_Write_String@a 0084  
                                                       Lcd_Write_String@i 0086  
                                                  __size_of_aguardaBuffer 003C  
                                                       __size_of_BCDtoDEC 001A  
                                                   __end_of_drenarPressao 6EB2  
                                                       __size_of_DECtoBCD 0042  
                                                             ___ftdiv@exp 0028  
                                                               _TXSTAbits 000FAC  
                                              __size_of_writeEEPROM16_ext 0022  
                                                  __size_of_clearShiftREG 0036  
                                                        _intensidadeSinal 00FF  
                                                             ___ftmul@exp 0015  
                                                         getSerial@length 00BA  
                                                            _atualizarLCD 39EC  
                                                               _Lcd_Clear 6C70  
                                                          __end_of___ftge 3E6C  
                                                          i2I2C_Read@temp 0004  
                                                          __end_of___wmul 6DEA  
                                                      intToFloatStr@F2544 01BC  
                                                        _Lcd_Write_String 706E  
                                                 __end_of_ajusteSP_Bombas 1B92  
                                                          __end_of_memset 7034  
                                                 salvarLOG@ultimoLogSalvo 008F  
                                                          __end_of_printf 715C  
                                                       __size_of_RTC_Init 0038  
                                                             _I2C_Restart 6C3A  
                                                          __end_of_strchr 71DA  
                                                          __end_of_strlen 4000  
                                                          __end_of_strstr 7A74  
                                                      _flagErroTransdutor 0074  
                                                     start_initialization 763C  
                                                             i2I2C_Read@a 0002  
                                                acaoTesteBombas@intervalo 00D9  
                                                   _tela_testeBombas$1424 00B7  
                                                      intToFloatStr@valor 00BF  
                                                _partidaBombaEstacionaria 3908  
                                               __size_of_readEEPROM16_ext 0038  
                                                       __size_of_Lcd_Init 0088  
                                                       __size_of_Lcd_Port 0044  
                                                        ??_readEEPROM_ext 008C  
                                                       ??_I2C_Master_Init 0091  
                                                       atualizarLCD@line1 0088  
                                                       atualizarLCD@line2 008A  
                                                       atualizarLCD@line3 008C  
                                                       atualizarLCD@line4 008E  
                                                           ??i2_I2C_Start 0002  
                                                             ??_I2C_Start 0081  
                                                           ??i2_I2C_Write 0004  
                                                           _telaPrincipal 1B92  
                                                             ??_I2C_Write 008C  
                                                   __end_of_lerParametros 30F8  
                                                              ?_Lcd_Clear 0001  
                                                                ??___ftge 0007  
                                         __size_of_configurarEstacionaria 0168  
                                                                ??___wmul 0084  
                                                             __doprnt@len 0099  
                                                             __doprnt@val 0097  
                                                             __pdataBANK0 00F8  
                                                             __pdataBANK1 01BC  
                                                           _aguardaBuffer 70E4  
                                                           ??_readButtons 0001  
                                                         Lcd_Write_Char@a 0083  
                                                                ??_memset 0086  
                                                         Lcd_Write_Char@y 0082  
                                                                ??_printf 00B5  
                                                           ??_informacoes 00B5  
                                                                ??_strchr 0084  
                                                                ??_strlen 0082  
                                                                ??_strstr 0093  
                                                       __size_of___ftpack 00C4  
                                                             __pbssCOMRAM 0044  
                                                       __size_of___lwtoft 0028  
                                                           _clearShiftREG 6F54  
                                                           __pcstackBANK0 0080  
                                                   __size_of_limparBuffer 0036  
                                                        ??_tela_ajusteRTC 00B5  
                                                   lerTransdutor@_pressao 002B  
                                                     i2_getDS1307TimeDate 3444  
                                                            _isdigit$1872 0081  
                                                        intToFloatStr@end 00B7  
                                                                ?i2_delay 0001  
                                                                ?_Lcd_Cmd 0001  
                                                               __doprnt@c 00A0  
                                                               __doprnt@f 008E  
                                         ??_verificarIntervaloTesteBombas 008E  
                                                          ?_telaPrincipal 0001  
                                                               _dataLoger 1DCA  
                                                       __size_of_enviaSMS 0356  
                                                            ??_acaoBombas 00C8  
                                                        ___lwdiv@dividend 0080  
                                                     lerTransdutor@tensao 002E  
                                                        ??_Lcd_Set_Cursor 0084  
                                                               __pintcode 0008  
                                                    ?i2_getDS1307TimeDate 0006  
                                                           __pmediumconst 7A74  
                                                         _acaoTesteBombas 091A  
                                                               _flagTexto 0075  
                                                               _flag_b_ok 005F  
                                                     configuraTelefones@i 00C3  
                                                                ?___awdiv 0080  
                                                                ?___ftadd 001B  
                                                                ?___awmod 0080  
                                                          ?_aguardaBuffer 0093  
                                                                ?___ftdiv 001B  
                                                     __end_ofi2_I2C_Start 6C0A  
                                                                ?___lldiv 0080  
                                                                ?___ftmul 000C  
                                                                ?___fttol 001B  
                                                     __end_ofi2_I2C_Write 6C54  
                                                               _getSerial 3216  
                                                   _timerEtapaComunicacao 00F5  
                                                                ?___lwdiv 0080  
                                                                ?___lwmod 0087  
                                                                ?__doprnt 008C  
                                                               _bufferAUX 0190  
                                                               _ajust_tel 00DD  
                                                            _limparBuffer 6F1E  
                                                    readEEPROM_ext@adress 008C  
                                                                ?_btPress 0001  
                                                        ?_ajusteSP_Bombas 0001  
                                                   __end_of_lerTransdutor 246C  
                                                                ?_readADC 0001  
                                                             _flag_b_mais 0061  
                                                 ?_configuraRegistradores 0001  
                                                   __end_ofi2_I2C_Restart 6C22  
                                                          __size_of_TIMER 0110  
                                                                ?_isdigit 0001  
                                                                _I2C_Read 7034  
                                                          ?_clearShiftREG 0001  
                                                                _I2C_Wait 6CC4  
                                                                _I2C_Stop 6C2E  
                                                     __end_of_readButtons 77A8  
                                                           ??_setShiftREG 0080  
                                                __size_of_writeEEPROM_ext 0046  
                                                  _configurarEstacionaria 2D38  
                                                  readEEPROM16_ext@adress 0093  
                                                                _BCDtoDEC 6CDE  
                                                      __end_of_acaoBombas 3216  
                                                     __end_of_informacoes 7722  
                                                        ___lwdiv@quotient 0084  
                                                          __size_of_delay 0036  
                                                          __size_of_blink 003E  
                                                                ?_sprintf 00A1  
                                                                ?_strncmp 0086  
                                                                _DECtoBCD 721C  
                                                          __size_of_timer 017E  
                                                          __size_of_putch 0014  
                                                               _menu_posi 00E0  
                                                               _horimetro 004F  
                                       __end_ofcriarCaracteresCGRAM@F2956 7AA5  
                                                          ___wmul@product 0084  
                                                               btPress@bt 0080  
                                                              ?_dataLoger 0001  
                                                               _salvarLOG 3C48  
                                                                _PIE1bits 000F9D  
                                                               blink@line 0080  
                                                         _sp_pressao_rede 00E5  
                                                               _validaRTC 73BA  
                                                         _resetParametros 6DEA  
                                                        _horario_de_teste 00E7  
                                             __size_of_configuraTelefones 0386  
                                                                Lcd_Cmd@a 0082  
                                                                _PIR1bits 000F9E  
                                                                i2u560_40 6ED4  
                                                                i2u553_40 3D1E  
                                                                i2u561_45 6ED8  
                                                                i2u642_40 2892  
                                                                i2u652_40 2954  
                                                                i2u557_40 3DAA  
                                                                i2u645_40 28D4  
                                                                i2u639_40 2864  
                                                                i2u664_40 358C  
                                                                i2u672_40 3776  
                                                                i2u760_40 2C76  
                                                                i2u672_45 376C  
                                                                i2u649_40 291A  
                                                                i2u761_40 2C7A  
                                                                i2u682_40 22BE  
                                                   ??i2_getDS1307TimeDate 0008  
                                                                i2u659_40 3858  
                                                                i2u675_40 37C8  
                                                                i2u676_40 37F2  
                                                                i2u917_47 6E26  
                                                                i2u918_47 6D48  
                                                             ??_Lcd_Clear 0083  
                                                               _sp_jockey 00E4  
                                                     _dtl_posi_visualizar 0053  
                                                              ?_getSerial 00B5  
                                                            setShiftREG@i 0081  
                                            __end_of_criarCaracteresCGRAM 3B84  
                                                   __end_of_intToFloatStr 79DC  
                                                                _RTC_Init 6F8A  
                                          __end_of_configuraRegistradores 7506  
                                                              _ADCON0bits 000FC2  
                                                       ___wmul@multiplier 0080  
                                                               _totalLogs 0054  
                                                        _dtl_estacionaria 0056  
                                                        ??_Lcd_Write_Char 0081  
                                                                i2delay@x 0001  
                                               _tempo_limite_estacionaria 00E6  
                                                                _Lcd_Init 782E  
                                                       i2_writeEEPROM_ext 70A8  
                                                               _writeChar 6C62  
                                                                _Lcd_Port 72A0  
                                                       ?_tela_testeBombas 0001  
                                                               copy_data0 7650  
                                                               copy_data1 7670  
                                                        _readEEPROM16_ext 6FC2  
                                                      ?i2_writeEEPROM_ext 0004  
                                                         ??_telaPrincipal 00C2  
                                                      ??_tela_testeBombas 00B5  
                                                __end_of_Lcd_Write_String 70A8  
                                                             _dtl_posicao 00FA  
                                                        __size_ofi2_delay 0032  
                                                     __end_of_setShiftREG 73BA  
                                                 __end_of_acaoTesteBombas 0DF4  
                                                        __size_of_Lcd_Cmd 002C  
                                                              ?_salvarLOG 0001  
                                                             i2_I2C_Start 6BFE  
                                                             i2_I2C_Write 6C46  
                                                     ??i2_writeEEPROM_ext 0005  
                                                     _intervalo_teste_dia 00E9  
                                                              ?_validaRTC 0001  
                                                                __Hrparam 0000  
                                                         ??_aguardaBuffer 0095  
                                                                __Lrparam 0000  
                                                   criarCaracteresCGRAM@i 00BB  
                                                   criarCaracteresCGRAM@j 00BA  
                                                   criarCaracteresCGRAM@k 00B9  
                                                        __size_of___awdiv 009A  
                                                        __size_of___ftadd 01D0  
                                                        __size_of___awmod 0086  
                                                        __size_of___ftdiv 00E6  
                                                __size_of_getSinalSIM800L 01CC  
                                                        __size_of___lldiv 0092  
                                                        __size_of___ftmul 00F8  
                                                        __size_of___fttol 00E8  
                                                                __b_menos 0062  
                                                        __size_of___lwdiv 0062  
                                                        __size_of___lwmod 0052  
                                                             _readButtons 7722  
                                                                ___ftpack 3D0C  
                                                        __size_of__doprnt 07FE  
                                                             BCDtoDEC@val 0080  
                                                     Lcd_Write_Char@tempp 0081  
                                                         ??_clearShiftREG 0080  
                                                        __size_of_btPress 0070  
                                              ??_partidaBombaEstacionaria 0083  
                                                         intToFloatStr@pr 00C0  
                                                                ___lwtoft 6D1A  
                                                             _informacoes 76AE  
                                                    _ajusteSP_Bombas$2384 00C2  
                                                            ?_I2C_Restart 0001  
                                                                _base_sec 0071  
                                                         _I2C_Master_Init 7568  
                                                        __size_of_readADC 0028  
                                               __end_ofi2_writeEEPROM_ext 70E4  
                                                          lerParametros@i 0095  
                                                                __sec_aux 006F  
                                                           _tempo_partida 006D  
                                                        __size_of_isdigit 0028  
                                                         ___lwdiv@divisor 0082  
                                                         ___lwdiv@counter 0086  
                                                              ?_writeChar 0080  
                                                                __ptext10 2FD4  
                                                                __ptext11 6FC2  
                                                                __ptext20 2D38  
                                                                __ptext12 76AE  
                                                                __ptext21 125C  
                                                                __ptext13 29EE  
                                                                __ptext30 091A  
                                                                __ptext22 246C  
                                                                __ptext14 3216  
                                                                __ptext31 3C48  
                                                                __ptext23 74B0  
                                                                __ptext15 364E  
                                                                __ptext40 732A  
                                                                __ptext32 72E4  
                                                                __ptext24 39EC  
                                                                __ptext16 2EA0  
                                                                __ptext41 6F54  
                                                                __ptext33 745A  
                                                                __ptext25 706E  
                                                                __ptext17 6CDE  
                                                                __ptext50 6D6A  
                                                                __ptext42 75CC  
                                                                __ptext34 6C3A  
                                                                __ptext26 71DA  
                                                                __ptext18 1DCA  
                                                                __ptext51 6DBE  
                                                                __ptext43 30F8  
                                                                __ptext35 7034  
                                                                __ptext27 3B84  
                                                                __ptext19 3ABE  
                                                                __ptext60 719A  
                                                                __ptext52 7408  
                                                                __ptext44 3908  
                                                                __ptext36 7948  
                                                                __ptext28 1938  
                                                                __ptext61 6EE8  
                                                                __ptext53 7506  
                                                                __ptext45 15E2  
                                                                __ptext37 77A8  
                                                                __ptext29 715C  
                                                                __ptext70 72A0  
                                                                __ptext62 6F8A  
                                                                __ptext54 6F1E  
                                                                __ptext46 6C62  
                                                                __ptext38 3E6C  
                                                                __ptext71 7568  
                                                                __ptext63 6C54  
                                                                __ptext55 6FFA  
                                                                __ptext47 7120  
                                                                __ptext39 6E7E  
                                                                __ptext80 6CF8  
                                                                __ptext72 78B6  
                                                                __ptext64 6C2E  
                                                                __ptext56 70E4  
                                                                __ptext48 011C  
                                                                __ptext81 70A8  
                                                                __ptext65 6C22  
                                                                __ptext57 79DC  
                                                                __ptext49 6C82  
                                                                __ptext90 6D1A  
                                                                __ptext82 6E1A  
                                                                __ptext74 2BBA  
                                                                __ptext66 6CC4  
                                                                __ptext58 3F06  
                                                                __ptext91 373A  
                                                                __ptext83 6C46  
                                                                __ptext75 3444  
                                                                __ptext67 782E  
                                                                __ptext59 3FA0  
                                                                __ptext92 3556  
                                                                __ptext84 6C0A  
                                                                __ptext76 6C16  
                                                                __ptext68 6C70  
                                                                __ptext93 3DD0  
                                                                __ptext85 6BFE  
                                                                __ptext77 6EB2  
                                                                __ptext69 6D92  
                                                                __ptext94 3822  
                                                                __ptext86 6CAC  
                                                                __ptext78 6C96  
                                                                __ptext95 281E  
                                                                __ptext87 7722  
                                                                __ptext79 6E4C  
                                                                __ptext96 3D0C  
                                                                __ptext88 2238  
                                                                __ptext97 0000  
                                                                __ptext89 6D42  
                                                                _ajst_rtc 0068  
                                                        __size_of_sprintf 0048  
                                                        acaoTesteBombas@i 00DA  
                                                    getSinalSIM800L@sinal 00C8  
                                                 __end_of_resetParametros 6E1A  
                                                                _enviaSMS 15E2  
                                                                _dtl_hora 005A  
                                                        __size_of_strncmp 009A  
                                                     _comunicarTeste$1193 00BD  
                                                       ??_writeEEPROM_ext 008D  
                                                           __size_of_atoi 00EC  
                                                           __size_of_main 0468  
                                                             ??_dataLoger 00B5  
                                                     _status_estacionaria 00FB  
                                                              strncmp@len 008A  
                                                        _timerTesteBombas 00DB  
                                                                blink@end 0083  
                                                                _tel_posi 00DE  
                                               _criarCaracteresCGRAM$1380 00B7  
                                                                int$flags 007F  
                                                                atoi@sign 00C3  
                                                             ??_getSerial 00B8  
                                                      _telaPrincipal$2383 00C2  
                                                  __size_of_drenarPressao 0034  
                                                              _INTCONbits 000FF2  
                                                              i2_I2C_Read 6EB2  
                                                              i2_I2C_Wait 6CAC  
                                                              i2_I2C_Stop 6C0A  
                                                             _setShiftREG 7372  
                                                                isdigit@c 0082  
                                                                memset@p1 0080  
                                                              i2_BCDtoDEC 6C96  
                                                             DECtoBCD@res 0089  
                                                             DECtoBCD@val 0088  
                                                                intlevel2 0006  
                                                               sprintf@ap 00AF  
                                                               sprintf@pb 00B1  
                                                               sprintf@wh 00A1  
                                                       _ocorrendoIncendio 00F2  
                                                    _criarCaracteresCGRAM 3ABE  
                                                               strchr@chr 0082  
                                                        ___lwmod@dividend 0087  
                                                               strchr@ptr 0080  
                                                        ___lldiv@dividend 0080  
                                         i2getDS1307TimeDate@ptrToUserVal 0006  
                                           getDS1307TimeDate@ptrToUserVal 008C  
                                                             ??_salvarLOG 008E  
                                                        ?_acaoTesteBombas 0001  
                                                 __size_of_comunicarTeste 01E2  
                                                             ??_validaRTC 0080  
                                                               strncmp@s1 0086  
                                                               strncmp@s2 0088  
                                                          _dataLoger$1443 00BA  
                                                          _dataLoger$1454 00BE  
                                                          _dataLoger$1449 00BC  
                                                        aguardaBuffer@str 0093  
                                                       _getDS1307TimeDate 2EA0  
                                                       _setDS1307TimeDate 3332  
                                                                printf@ap 00B5  
                                                                printf@pb 00B7  
                                                            getSerial@end 00B7  
                                                            getSerial@ret 00BD  
                                                            getSerial@str 00B5  
                                                 __end_of_I2C_Master_Init 75CC  
                                                      ?_getDS1307TimeDate 008C  
                                                      ?_setDS1307TimeDate 008C  
                                                      Lcd_Set_Cursor@temp 0087  
                                                              i2_RTC_Init 6E4C  
                                                                sprintf@f 00A3  
                                                 ?_configurarEstacionaria 0001  
                                                        ___lldiv@quotient 0088  
                                                             _qtd_leitura 006E  
                                                         ___lwmod@divisor 0089  
                                              __size_ofi2_writeEEPROM_ext 003C  
                                                                strlen@cp 0084  
                                                         ___lwmod@counter 008B  
                                                     ??_getDS1307TimeDate 008E  
                                                     ??_setDS1307TimeDate 008E  
                                                       ??_getSinalSIM800L 00C6  
                                                            _sp_principal 00E3  
                                                                strstr@s1 008F  
                                                                strstr@s2 0091  
                                                             ??_writeChar 0082  
                                                  __size_of_lerParametros 0124  
                                                   ?_criarCaracteresCGRAM 0001  
                                                        ?_resetParametros 0001  
                                                           _sub_menu_posi 006A  
                                                             _option_posi 00E1  
                                                           _drenarPressao 6E7E  
                                         _tempo_limite_teste_estacionaria 006B  
                                               __end_of_getDS1307TimeDate 2FD4  
                                               __end_of_setDS1307TimeDate 3444  
