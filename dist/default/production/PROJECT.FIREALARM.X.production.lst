

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 01 21:45:54 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    91                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   118                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   119  0000                     
   120                           ; Version 1.45
   121                           ; Generated 16/11/2017 GMT
   122                           ; 
   123                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   124                           ; All rights reserved.
   125                           ; 
   126                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   127                           ; 
   128                           ; Redistribution and use in source and binary forms, with or without modification, are
   129                           ; permitted provided that the following conditions are met:
   130                           ; 
   131                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   132                           ;        conditions and the following disclaimer.
   133                           ; 
   134                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   135                           ;        of conditions and the following disclaimer in the documentation and/or other
   136                           ;        materials provided with the distribution.
   137                           ; 
   138                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   139                           ;        software without specific prior written permission.
   140                           ; 
   141                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   142                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   143                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   144                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   145                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   146                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   147                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   148                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   149                           ; 
   150                           ; 
   151                           ; Code-generator required, PIC18F452 Definitions
   152                           ; 
   153                           ; SFR Addresses
   154  0000                     
   155                           	psect	idataCOMRAM
   156  000006                     __pidataCOMRAM:
   157                           	opt stack 0
   158                           
   159                           ;initializer for _timerAtualizacaoLCD
   160  000006  01                 	db	1
   161                           
   162                           ;initializer for _intensidadeSinal
   163  000007  20                 	db	32
   164                           
   165                           	psect	idataBANK0
   166  006B05                     __pidataBANK0:
   167                           	opt stack 0
   168                           
   169                           ;initializer for _pressao
   170  006B05  0062               	dw	98
   171                           
   172                           ;initializer for _dtl_posicao
   173  006B07  3C                 	db	60
   174                           
   175                           ;initializer for _status_estacionaria
   176  006B08  01                 	db	1
   177                           
   178                           ;initializer for _status_principal
   179  006B09  01                 	db	1
   180                           
   181                           ;initializer for _status_jockey
   182  006B0A  01                 	db	1
   183                           
   184                           ;initializer for _timerVerificarSinal
   185  006B0B  05                 	db	5
   186                           
   187                           	psect	idataBANK1
   188  006B01                     __pidataBANK1:
   189                           	opt stack 0
   190                           
   191                           ;initializer for intToFloatStr@F2544
   192  006B01  20                 	db	32
   193  006B02  20                 	db	32
   194  006B03  20                 	db	32
   195  006B04  20                 	db	32
   196                           
   197                           	psect	mediumconst
   198  007A98                     __pmediumconst:
   199                           	opt stack 0
   200  007A98  00                 	db	0
   201  007A99                     criarCaracteresCGRAM@F2962:
   202                           	opt stack 0
   203  007A99  00                 	db	0
   204  007A9A  1F                 	db	31
   205  007A9B  0E                 	db	14
   206  007A9C  04                 	db	4
   207  007A9D  04                 	db	4
   208  007A9E  04                 	db	4
   209  007A9F  04                 	db	4
   210  007AA0  04                 	db	4
   211  007AA1  00                 	db	0
   212  007AA2  00                 	db	0
   213  007AA3  00                 	db	0
   214  007AA4  00                 	db	0
   215  007AA5  00                 	db	0
   216  007AA6  10                 	db	16
   217  007AA7  10                 	db	16
   218  007AA8  10                 	db	16
   219  007AA9  00                 	db	0
   220  007AAA  00                 	db	0
   221  007AAB  00                 	db	0
   222  007AAC  04                 	db	4
   223  007AAD  04                 	db	4
   224  007AAE  14                 	db	20
   225  007AAF  14                 	db	20
   226  007AB0  14                 	db	20
   227  007AB1  00                 	db	0
   228  007AB2  01                 	db	1
   229  007AB3  01                 	db	1
   230  007AB4  05                 	db	5
   231  007AB5  05                 	db	5
   232  007AB6  15                 	db	21
   233  007AB7  15                 	db	21
   234  007AB8  15                 	db	21
   235  007AB9  0A                 	db	10
   236  007ABA  0A                 	db	10
   237  007ABB  1F                 	db	31
   238  007ABC  11                 	db	17
   239  007ABD  11                 	db	17
   240  007ABE  0E                 	db	14
   241  007ABF  04                 	db	4
   242  007AC0  04                 	db	4
   243  007AC1  00                 	db	0
   244  007AC2  00                 	db	0
   245  007AC3  00                 	db	0
   246  007AC4  00                 	db	0
   247  007AC5  00                 	db	0
   248  007AC6  00                 	db	0
   249  007AC7  00                 	db	0
   250  007AC8  00                 	db	0
   251  007AC9                     __end_ofcriarCaracteresCGRAM@F2962:
   252                           	opt stack 0
   253  007AC9                     _dpowers:
   254                           	opt stack 0
   255  007AC9  0001               	dw	1
   256  007ACB  000A               	dw	10
   257  007ACD  0064               	dw	100
   258  007ACF  03E8               	dw	1000
   259  007AD1  2710               	dw	10000
   260  007AD3                     __end_of_dpowers:
   261                           	opt stack 0
   262  0000                     _SSPBUF	set	4041
   263  0000                     _SSPSTAT	set	4039
   264  0000                     _SSPADD	set	4040
   265  0000                     _SSPCON2	set	4037
   266  0000                     _SSPCON1	set	4038
   267  0000                     _RCREG	set	4014
   268  0000                     _TMR0L	set	4054
   269  0000                     _TMR0H	set	4055
   270  0000                     _PORTCbits	set	3970
   271  0000                     _PORTDbits	set	3971
   272  0000                     _PORTBbits	set	3969
   273  0000                     _PORTEbits	set	3972
   274  0000                     _TXREG	set	4013
   275  0000                     _ADRESL	set	4035
   276  0000                     _ADRESH	set	4036
   277  0000                     _ADCON0bits	set	4034
   278  0000                     _TRISEbits	set	3990
   279  0000                     _TRISBbits	set	3987
   280  0000                     _PIE1bits	set	3997
   281  0000                     _PIR1bits	set	3998
   282  0000                     _INTCONbits	set	4082
   283  0000                     _SPBRG	set	4015
   284  0000                     _RCSTAbits	set	4011
   285  0000                     _TXSTAbits	set	4012
   286  0000                     _TRISCbits	set	3988
   287  0000                     _TRISDbits	set	3989
   288  0000                     _INTCON	set	4082
   289  0000                     _T0CON	set	4053
   290  0000                     _PORTAbits	set	3968
   291  0000                     _TRISAbits	set	3986
   292  0000                     _ADCON1	set	4033
   293  0000                     _ADCON0	set	4034
   294  0000                     _ACKEN	set	32300
   295  0000                     _ACKDT	set	32301
   296  0000                     _RCEN	set	32299
   297  0000                     _PEN	set	32298
   298  0000                     _RSEN	set	32297
   299  0000                     _SEN	set	32296
   300  0000                     _RCIF	set	31989
   301  0000                     _TMR0IF	set	32658
   302  007AD3                     STR_14:
   303  007AD3  54                 	db	84	;'T'
   304  007AD4  45                 	db	69	;'E'
   305  007AD5  43                 	db	67	;'C'
   306  007AD6  48                 	db	72	;'H'
   307  007AD7  4E                 	db	78	;'N'
   308  007AD8  4F                 	db	79	;'O'
   309  007AD9  57                 	db	87	;'W'
   310  007ADA  20                 	db	32
   311  007ADB  53                 	db	83	;'S'
   312  007ADC  69                 	db	105	;'i'
   313  007ADD  73                 	db	115	;'s'
   314  007ADE  74                 	db	116	;'t'
   315  007ADF  65                 	db	101	;'e'
   316  007AE0  6D                 	db	109	;'m'
   317  007AE1  61                 	db	97	;'a'
   318  007AE2  73                 	db	115	;'s'
   319  007AE3  20                 	db	32
   320  007AE4  65                 	db	101	;'e'
   321  007AE5  6D                 	db	109	;'m'
   322  007AE6  62                 	db	98	;'b'
   323  007AE7  61                 	db	97	;'a'
   324  007AE8  72                 	db	114	;'r'
   325  007AE9  63                 	db	99	;'c'
   326  007AEA  61                 	db	97	;'a'
   327  007AEB  64                 	db	100	;'d'
   328  007AEC  6F                 	db	111	;'o'
   329  007AED  73                 	db	115	;'s'
   330  007AEE  0D                 	db	13
   331  007AEF  0A                 	db	10
   332  007AF0  0D                 	db	13
   333  007AF1  0A                 	db	10
   334  007AF2  54                 	db	84	;'T'
   335  007AF3  65                 	db	101	;'e'
   336  007AF4  73                 	db	115	;'s'
   337  007AF5  74                 	db	116	;'t'
   338  007AF6  65                 	db	101	;'e'
   339  007AF7  20                 	db	32
   340  007AF8  6D                 	db	109	;'m'
   341  007AF9  61                 	db	97	;'a'
   342  007AFA  6E                 	db	110	;'n'
   343  007AFB  75                 	db	117	;'u'
   344  007AFC  61                 	db	97	;'a'
   345  007AFD  6C                 	db	108	;'l'
   346  007AFE  20                 	db	32
   347  007AFF  64                 	db	100	;'d'
   348  007B00  65                 	db	101	;'e'
   349  007B01  20                 	db	32
   350  007B02  63                 	db	99	;'c'
   351  007B03  6F                 	db	111	;'o'
   352  007B04  6D                 	db	109	;'m'
   353  007B05  75                 	db	117	;'u'
   354  007B06  6E                 	db	110	;'n'
   355  007B07  69                 	db	105	;'i'
   356  007B08  63                 	db	99	;'c'
   357  007B09  61                 	db	97	;'a'
   358  007B0A  63                 	db	99	;'c'
   359  007B0B  61                 	db	97	;'a'
   360  007B0C  6F                 	db	111	;'o'
   361  007B0D  2E                 	db	46
   362  007B0E  0D                 	db	13
   363  007B0F  0A                 	db	10
   364  007B10  44                 	db	68	;'D'
   365  007B11  61                 	db	97	;'a'
   366  007B12  74                 	db	116	;'t'
   367  007B13  61                 	db	97	;'a'
   368  007B14  3A                 	db	58	;':'
   369  007B15  20                 	db	32
   370  007B16  25                 	db	37
   371  007B17  30                 	db	48	;'0'
   372  007B18  32                 	db	50	;'2'
   373  007B19  64                 	db	100	;'d'
   374  007B1A  2F                 	db	47
   375  007B1B  25                 	db	37
   376  007B1C  30                 	db	48	;'0'
   377  007B1D  32                 	db	50	;'2'
   378  007B1E  64                 	db	100	;'d'
   379  007B1F  2F                 	db	47
   380  007B20  25                 	db	37
   381  007B21  30                 	db	48	;'0'
   382  007B22  32                 	db	50	;'2'
   383  007B23  64                 	db	100	;'d'
   384  007B24  20                 	db	32
   385  007B25  25                 	db	37
   386  007B26  30                 	db	48	;'0'
   387  007B27  32                 	db	50	;'2'
   388  007B28  64                 	db	100	;'d'
   389  007B29  3A                 	db	58	;':'
   390  007B2A  25                 	db	37
   391  007B2B  30                 	db	48	;'0'
   392  007B2C  32                 	db	50	;'2'
   393  007B2D  64                 	db	100	;'d'
   394  007B2E  3A                 	db	58	;':'
   395  007B2F  25                 	db	37
   396  007B30  30                 	db	48	;'0'
   397  007B31  32                 	db	50	;'2'
   398  007B32  64                 	db	100	;'d'
   399  007B33  0D                 	db	13
   400  007B34  0A                 	db	10
   401  007B35  0D                 	db	13
   402  007B36  0A                 	db	10
   403  007B37  0D                 	db	13
   404  007B38  0A                 	db	10
   405  007B39  56                 	db	86	;'V'
   406  007B3A  65                 	db	101	;'e'
   407  007B3B  72                 	db	114	;'r'
   408  007B3C  73                 	db	115	;'s'
   409  007B3D  61                 	db	97	;'a'
   410  007B3E  6F                 	db	111	;'o'
   411  007B3F  20                 	db	32
   412  007B40  64                 	db	100	;'d'
   413  007B41  6F                 	db	111	;'o'
   414  007B42  20                 	db	32
   415  007B43  73                 	db	115	;'s'
   416  007B44  69                 	db	105	;'i'
   417  007B45  73                 	db	115	;'s'
   418  007B46  74                 	db	116	;'t'
   419  007B47  65                 	db	101	;'e'
   420  007B48  6D                 	db	109	;'m'
   421  007B49  61                 	db	97	;'a'
   422  007B4A  3A                 	db	58	;':'
   423  007B4B  20                 	db	32
   424  007B4C  25                 	db	37
   425  007B4D  73                 	db	115	;'s'
   426  007B4E  0D                 	db	13
   427  007B4F  0A                 	db	10
   428  007B50  00                 	db	0
   429  007B51                     STR_26:
   430  007B51  54                 	db	84	;'T'
   431  007B52  45                 	db	69	;'E'
   432  007B53  53                 	db	83	;'S'
   433  007B54  54                 	db	84	;'T'
   434  007B55  45                 	db	69	;'E'
   435  007B56  20                 	db	32
   436  007B57  44                 	db	68	;'D'
   437  007B58  45                 	db	69	;'E'
   438  007B59  20                 	db	32
   439  007B5A  42                 	db	66	;'B'
   440  007B5B  4F                 	db	79	;'O'
   441  007B5C  4D                 	db	77	;'M'
   442  007B5D  42                 	db	66	;'B'
   443  007B5E  41                 	db	65	;'A'
   444  007B5F  53                 	db	83	;'S'
   445  007B60  20                 	db	32
   446  007B61  52                 	db	82	;'R'
   447  007B62  45                 	db	69	;'E'
   448  007B63  41                 	db	65	;'A'
   449  007B64  4C                 	db	76	;'L'
   450  007B65  49                 	db	73	;'I'
   451  007B66  5A                 	db	90	;'Z'
   452  007B67  41                 	db	65	;'A'
   453  007B68  44                 	db	68	;'D'
   454  007B69  4F                 	db	79	;'O'
   455  007B6A  0D                 	db	13
   456  007B6B  0A                 	db	10
   457  007B6C  45                 	db	69	;'E'
   458  007B6D  4D                 	db	77	;'M'
   459  007B6E  20                 	db	32
   460  007B6F  25                 	db	37
   461  007B70  30                 	db	48	;'0'
   462  007B71  32                 	db	50	;'2'
   463  007B72  64                 	db	100	;'d'
   464  007B73  3A                 	db	58	;':'
   465  007B74  25                 	db	37
   466  007B75  30                 	db	48	;'0'
   467  007B76  32                 	db	50	;'2'
   468  007B77  64                 	db	100	;'d'
   469  007B78  3A                 	db	58	;':'
   470  007B79  25                 	db	37
   471  007B7A  30                 	db	48	;'0'
   472  007B7B  32                 	db	50	;'2'
   473  007B7C  64                 	db	100	;'d'
   474  007B7D  20                 	db	32
   475  007B7E  25                 	db	37
   476  007B7F  30                 	db	48	;'0'
   477  007B80  32                 	db	50	;'2'
   478  007B81  64                 	db	100	;'d'
   479  007B82  2F                 	db	47
   480  007B83  25                 	db	37
   481  007B84  30                 	db	48	;'0'
   482  007B85  32                 	db	50	;'2'
   483  007B86  64                 	db	100	;'d'
   484  007B87  2F                 	db	47
   485  007B88  25                 	db	37
   486  007B89  30                 	db	48	;'0'
   487  007B8A  32                 	db	50	;'2'
   488  007B8B  64                 	db	100	;'d'
   489  007B8C  0D                 	db	13
   490  007B8D  0A                 	db	10
   491  007B8E  4A                 	db	74	;'J'
   492  007B8F  4F                 	db	79	;'O'
   493  007B90  43                 	db	67	;'C'
   494  007B91  4B                 	db	75	;'K'
   495  007B92  45                 	db	69	;'E'
   496  007B93  59                 	db	89	;'Y'
   497  007B94  3A                 	db	58	;':'
   498  007B95  20                 	db	32
   499  007B96  25                 	db	37
   500  007B97  73                 	db	115	;'s'
   501  007B98  0D                 	db	13
   502  007B99  0A                 	db	10
   503  007B9A  50                 	db	80	;'P'
   504  007B9B  52                 	db	82	;'R'
   505  007B9C  49                 	db	73	;'I'
   506  007B9D  4E                 	db	78	;'N'
   507  007B9E  43                 	db	67	;'C'
   508  007B9F  49                 	db	73	;'I'
   509  007BA0  50                 	db	80	;'P'
   510  007BA1  41                 	db	65	;'A'
   511  007BA2  4C                 	db	76	;'L'
   512  007BA3  3A                 	db	58	;':'
   513  007BA4  20                 	db	32
   514  007BA5  25                 	db	37
   515  007BA6  73                 	db	115	;'s'
   516  007BA7  0D                 	db	13
   517  007BA8  0A                 	db	10
   518  007BA9  43                 	db	67	;'C'
   519  007BAA  4F                 	db	79	;'O'
   520  007BAB  4D                 	db	77	;'M'
   521  007BAC  42                 	db	66	;'B'
   522  007BAD  55                 	db	85	;'U'
   523  007BAE  53                 	db	83	;'S'
   524  007BAF  54                 	db	84	;'T'
   525  007BB0  41                 	db	65	;'A'
   526  007BB1  4F                 	db	79	;'O'
   527  007BB2  3A                 	db	58	;':'
   528  007BB3  20                 	db	32
   529  007BB4  25                 	db	37
   530  007BB5  73                 	db	115	;'s'
   531  007BB6  0D                 	db	13
   532  007BB7  0A                 	db	10
   533  007BB8  00                 	db	0
   534  007BB9                     STR_25:
   535  007BB9  44                 	db	68	;'D'
   536  007BBA  49                 	db	73	;'I'
   537  007BBB  53                 	db	83	;'S'
   538  007BBC  50                 	db	80	;'P'
   539  007BBD  41                 	db	65	;'A'
   540  007BBE  52                 	db	82	;'R'
   541  007BBF  4F                 	db	79	;'O'
   542  007BC0  20                 	db	32
   543  007BC1  41                 	db	65	;'A'
   544  007BC2  4C                 	db	76	;'L'
   545  007BC3  41                 	db	65	;'A'
   546  007BC4  52                 	db	82	;'R'
   547  007BC5  4D                 	db	77	;'M'
   548  007BC6  45                 	db	69	;'E'
   549  007BC7  20                 	db	32
   550  007BC8  44                 	db	68	;'D'
   551  007BC9  45                 	db	69	;'E'
   552  007BCA  20                 	db	32
   553  007BCB  49                 	db	73	;'I'
   554  007BCC  4E                 	db	78	;'N'
   555  007BCD  43                 	db	67	;'C'
   556  007BCE  45                 	db	69	;'E'
   557  007BCF  4E                 	db	78	;'N'
   558  007BD0  44                 	db	68	;'D'
   559  007BD1  49                 	db	73	;'I'
   560  007BD2  4F                 	db	79	;'O'
   561  007BD3  0D                 	db	13
   562  007BD4  0A                 	db	10
   563  007BD5  45                 	db	69	;'E'
   564  007BD6  4D                 	db	77	;'M'
   565  007BD7  20                 	db	32
   566  007BD8  25                 	db	37
   567  007BD9  30                 	db	48	;'0'
   568  007BDA  32                 	db	50	;'2'
   569  007BDB  64                 	db	100	;'d'
   570  007BDC  3A                 	db	58	;':'
   571  007BDD  25                 	db	37
   572  007BDE  30                 	db	48	;'0'
   573  007BDF  32                 	db	50	;'2'
   574  007BE0  64                 	db	100	;'d'
   575  007BE1  3A                 	db	58	;':'
   576  007BE2  25                 	db	37
   577  007BE3  30                 	db	48	;'0'
   578  007BE4  32                 	db	50	;'2'
   579  007BE5  64                 	db	100	;'d'
   580  007BE6  20                 	db	32
   581  007BE7  25                 	db	37
   582  007BE8  30                 	db	48	;'0'
   583  007BE9  32                 	db	50	;'2'
   584  007BEA  64                 	db	100	;'d'
   585  007BEB  2F                 	db	47
   586  007BEC  25                 	db	37
   587  007BED  30                 	db	48	;'0'
   588  007BEE  32                 	db	50	;'2'
   589  007BEF  64                 	db	100	;'d'
   590  007BF0  2F                 	db	47
   591  007BF1  25                 	db	37
   592  007BF2  30                 	db	48	;'0'
   593  007BF3  32                 	db	50	;'2'
   594  007BF4  64                 	db	100	;'d'
   595  007BF5  0D                 	db	13
   596  007BF6  0A                 	db	10
   597  007BF7  00                 	db	0
   598  007BF8                     STR_79:
   599  007BF8  44                 	db	68	;'D'
   600  007BF9  61                 	db	97	;'a'
   601  007BFA  74                 	db	116	;'t'
   602  007BFB  61                 	db	97	;'a'
   603  007BFC  3A                 	db	58	;':'
   604  007BFD  20                 	db	32
   605  007BFE  25                 	db	37
   606  007BFF  30                 	db	48	;'0'
   607  007C00  32                 	db	50	;'2'
   608  007C01  64                 	db	100	;'d'
   609  007C02  2F                 	db	47
   610  007C03  25                 	db	37
   611  007C04  30                 	db	48	;'0'
   612  007C05  32                 	db	50	;'2'
   613  007C06  64                 	db	100	;'d'
   614  007C07  2F                 	db	47
   615  007C08  25                 	db	37
   616  007C09  30                 	db	48	;'0'
   617  007C0A  32                 	db	50	;'2'
   618  007C0B  64                 	db	100	;'d'
   619  007C0C  20                 	db	32
   620  007C0D  25                 	db	37
   621  007C0E  30                 	db	48	;'0'
   622  007C0F  32                 	db	50	;'2'
   623  007C10  64                 	db	100	;'d'
   624  007C11  3A                 	db	58	;':'
   625  007C12  25                 	db	37
   626  007C13  30                 	db	48	;'0'
   627  007C14  32                 	db	50	;'2'
   628  007C15  64                 	db	100	;'d'
   629  007C16  00                 	db	0
   630  007C17                     STR_58:
   631  007C17  20                 	db	32
   632  007C18  25                 	db	37
   633  007C19  30                 	db	48	;'0'
   634  007C1A  32                 	db	50	;'2'
   635  007C1B  64                 	db	100	;'d'
   636  007C1C  3A                 	db	58	;':'
   637  007C1D  25                 	db	37
   638  007C1E  30                 	db	48	;'0'
   639  007C1F  32                 	db	50	;'2'
   640  007C20  64                 	db	100	;'d'
   641  007C21  20                 	db	32
   642  007C22  25                 	db	37
   643  007C23  30                 	db	48	;'0'
   644  007C24  32                 	db	50	;'2'
   645  007C25  64                 	db	100	;'d'
   646  007C26  2F                 	db	47
   647  007C27  25                 	db	37
   648  007C28  30                 	db	48	;'0'
   649  007C29  32                 	db	50	;'2'
   650  007C2A  64                 	db	100	;'d'
   651  007C2B  00                 	db	0
   652  007C2C                     STR_63:
   653  007C2C  20                 	db	32
   654  007C2D  2A                 	db	42
   655  007C2E  66                 	db	102	;'f'
   656  007C2F  61                 	db	97	;'a'
   657  007C30  6C                 	db	108	;'l'
   658  007C31  68                 	db	104	;'h'
   659  007C32  61                 	db	97	;'a'
   660  007C33  20                 	db	32
   661  007C34  42                 	db	66	;'B'
   662  007C35  2E                 	db	46
   663  007C36  20                 	db	32
   664  007C37  70                 	db	112	;'p'
   665  007C38  72                 	db	114	;'r'
   666  007C39  69                 	db	105	;'i'
   667  007C3A  6E                 	db	110	;'n'
   668  007C3B  63                 	db	99	;'c'
   669  007C3C  69                 	db	105	;'i'
   670  007C3D  70                 	db	112	;'p'
   671  007C3E  61                 	db	97	;'a'
   672  007C3F  6C                 	db	108	;'l'
   673  007C40  00                 	db	0
   674  007C41                     STR_64:
   675  007C41  20                 	db	32
   676  007C42  2A                 	db	42
   677  007C43  66                 	db	102	;'f'
   678  007C44  61                 	db	97	;'a'
   679  007C45  6C                 	db	108	;'l'
   680  007C46  68                 	db	104	;'h'
   681  007C47  61                 	db	97	;'a'
   682  007C48  20                 	db	32
   683  007C49  42                 	db	66	;'B'
   684  007C4A  2E                 	db	46
   685  007C4B  20                 	db	32
   686  007C4C  63                 	db	99	;'c'
   687  007C4D  6F                 	db	111	;'o'
   688  007C4E  6D                 	db	109	;'m'
   689  007C4F  62                 	db	98	;'b'
   690  007C50  75                 	db	117	;'u'
   691  007C51  73                 	db	115	;'s'
   692  007C52  74                 	db	116	;'t'
   693  007C53  61                 	db	97	;'a'
   694  007C54  6F                 	db	111	;'o'
   695  007C55  00                 	db	0
   696  007C56                     STR_73:
   697  007C56  23                 	db	35
   698  007C57  50                 	db	80	;'P'
   699  007C58  72                 	db	114	;'r'
   700  007C59  6F                 	db	111	;'o'
   701  007C5A  78                 	db	120	;'x'
   702  007C5B  69                 	db	105	;'i'
   703  007C5C  6D                 	db	109	;'m'
   704  007C5D  6F                 	db	111	;'o'
   705  007C5E  20                 	db	32
   706  007C5F  65                 	db	101	;'e'
   707  007C60  6D                 	db	109	;'m'
   708  007C61  20                 	db	32
   709  007C62  25                 	db	37
   710  007C63  32                 	db	50	;'2'
   711  007C64  64                 	db	100	;'d'
   712  007C65  20                 	db	32
   713  007C66  64                 	db	100	;'d'
   714  007C67  69                 	db	105	;'i'
   715  007C68  61                 	db	97	;'a'
   716  007C69  73                 	db	115	;'s'
   717  007C6A  00                 	db	0
   718  007C6B                     STR_38:
   719  007C6B  44                 	db	68	;'D'
   720  007C6C  65                 	db	101	;'e'
   721  007C6D  73                 	db	115	;'s'
   722  007C6E  70                 	db	112	;'p'
   723  007C6F  72                 	db	114	;'r'
   724  007C70  65                 	db	101	;'e'
   725  007C71  73                 	db	115	;'s'
   726  007C72  73                 	db	115	;'s'
   727  007C73  75                 	db	117	;'u'
   728  007C74  72                 	db	114	;'r'
   729  007C75  69                 	db	105	;'i'
   730  007C76  7A                 	db	122	;'z'
   731  007C77  61                 	db	97	;'a'
   732  007C78  6E                 	db	110	;'n'
   733  007C79  64                 	db	100	;'d'
   734  007C7A  6F                 	db	111	;'o'
   735  007C7B  2E                 	db	46
   736  007C7C  2E                 	db	46
   737  007C7D  2E                 	db	46
   738  007C7E  00                 	db	0
   739  007C7F                     STR_65:
   740  007C7F  20                 	db	32
   741  007C80  41                 	db	65	;'A'
   742  007C81  4C                 	db	76	;'L'
   743  007C82  45                 	db	69	;'E'
   744  007C83  52                 	db	82	;'R'
   745  007C84  54                 	db	84	;'T'
   746  007C85  41                 	db	65	;'A'
   747  007C86  20                 	db	32
   748  007C87  44                 	db	68	;'D'
   749  007C88  45                 	db	69	;'E'
   750  007C89  20                 	db	32
   751  007C8A  49                 	db	73	;'I'
   752  007C8B  4E                 	db	78	;'N'
   753  007C8C  43                 	db	67	;'C'
   754  007C8D  45                 	db	69	;'E'
   755  007C8E  4E                 	db	78	;'N'
   756  007C8F  44                 	db	68	;'D'
   757  007C90  49                 	db	73	;'I'
   758  007C91  4F                 	db	79	;'O'
   759  007C92  00                 	db	0
   760  007C93                     STR_61:
   761  007C93  20                 	db	32
   762  007C94  2A                 	db	42
   763  007C95  66                 	db	102	;'f'
   764  007C96  61                 	db	97	;'a'
   765  007C97  6C                 	db	108	;'l'
   766  007C98  68                 	db	104	;'h'
   767  007C99  61                 	db	97	;'a'
   768  007C9A  20                 	db	32
   769  007C9B  76                 	db	118	;'v'
   770  007C9C  61                 	db	97	;'a'
   771  007C9D  6C                 	db	108	;'l'
   772  007C9E  2E                 	db	46
   773  007C9F  20                 	db	32
   774  007CA0  6C                 	db	108	;'l'
   775  007CA1  61                 	db	97	;'a'
   776  007CA2  64                 	db	100	;'d'
   777  007CA3  72                 	db	114	;'r'
   778  007CA4  61                 	db	97	;'a'
   779  007CA5  6F                 	db	111	;'o'
   780  007CA6  00                 	db	0
   781  007CA7                     STR_74:
   782  007CA7  49                 	db	73	;'I'
   783  007CA8  4E                 	db	78	;'N'
   784  007CA9  54                 	db	84	;'T'
   785  007CAA  45                 	db	69	;'E'
   786  007CAB  52                 	db	82	;'R'
   787  007CAC  56                 	db	86	;'V'
   788  007CAD  41                 	db	65	;'A'
   789  007CAE  4C                 	db	76	;'L'
   790  007CAF  4F                 	db	79	;'O'
   791  007CB0  3A                 	db	58	;':'
   792  007CB1  20                 	db	32
   793  007CB2  25                 	db	37
   794  007CB3  32                 	db	50	;'2'
   795  007CB4  64                 	db	100	;'d'
   796  007CB5  20                 	db	32
   797  007CB6  64                 	db	100	;'d'
   798  007CB7  69                 	db	105	;'i'
   799  007CB8  61                 	db	97	;'a'
   800  007CB9  73                 	db	115	;'s'
   801  007CBA  00                 	db	0
   802  007CBB                     STR_75:
   803  007CBB  48                 	db	72	;'H'
   804  007CBC  4F                 	db	79	;'O'
   805  007CBD  52                 	db	82	;'R'
   806  007CBE  41                 	db	65	;'A'
   807  007CBF  52                 	db	82	;'R'
   808  007CC0  49                 	db	73	;'I'
   809  007CC1  4F                 	db	79	;'O'
   810  007CC2  3A                 	db	58	;':'
   811  007CC3  20                 	db	32
   812  007CC4  25                 	db	37
   813  007CC5  30                 	db	48	;'0'
   814  007CC6  32                 	db	50	;'2'
   815  007CC7  64                 	db	100	;'d'
   816  007CC8  20                 	db	32
   817  007CC9  68                 	db	104	;'h'
   818  007CCA  6F                 	db	111	;'o'
   819  007CCB  72                 	db	114	;'r'
   820  007CCC  61                 	db	97	;'a'
   821  007CCD  73                 	db	115	;'s'
   822  007CCE  00                 	db	0
   823  007CCF                     STR_91:
   824  007CCF  53                 	db	83	;'S'
   825  007CD0  69                 	db	105	;'i'
   826  007CD1  73                 	db	115	;'s'
   827  007CD2  74                 	db	116	;'t'
   828  007CD3  65                 	db	101	;'e'
   829  007CD4  6D                 	db	109	;'m'
   830  007CD5  61                 	db	97	;'a'
   831  007CD6  73                 	db	115	;'s'
   832  007CD7  20                 	db	32
   833  007CD8  65                 	db	101	;'e'
   834  007CD9  6D                 	db	109	;'m'
   835  007CDA  62                 	db	98	;'b'
   836  007CDB  61                 	db	97	;'a'
   837  007CDC  72                 	db	114	;'r'
   838  007CDD  63                 	db	99	;'c'
   839  007CDE  61                 	db	97	;'a'
   840  007CDF  64                 	db	100	;'d'
   841  007CE0  6F                 	db	111	;'o'
   842  007CE1  73                 	db	115	;'s'
   843  007CE2  00                 	db	0
   844  007CE3                     STR_68:
   845  007CE3  20                 	db	32
   846  007CE4  50                 	db	80	;'P'
   847  007CE5  72                 	db	114	;'r'
   848  007CE6  65                 	db	101	;'e'
   849  007CE7  73                 	db	115	;'s'
   850  007CE8  73                 	db	115	;'s'
   851  007CE9  20                 	db	32
   852  007CEA  45                 	db	69	;'E'
   853  007CEB  53                 	db	83	;'S'
   854  007CEC  43                 	db	67	;'C'
   855  007CED  20                 	db	32
   856  007CEE  70                 	db	112	;'p'
   857  007CEF  2F                 	db	47
   858  007CF0  20                 	db	32
   859  007CF1  52                 	db	82	;'R'
   860  007CF2  65                 	db	101	;'e'
   861  007CF3  73                 	db	115	;'s'
   862  007CF4  65                 	db	101	;'e'
   863  007CF5  74                 	db	116	;'t'
   864  007CF6  00                 	db	0
   865  007CF7                     STR_42:
   866  007CF7  42                 	db	66	;'B'
   867  007CF8  6F                 	db	111	;'o'
   868  007CF9  6D                 	db	109	;'m'
   869  007CFA  62                 	db	98	;'b'
   870  007CFB  61                 	db	97	;'a'
   871  007CFC  20                 	db	32
   872  007CFD  50                 	db	80	;'P'
   873  007CFE  72                 	db	114	;'r'
   874  007CFF  69                 	db	105	;'i'
   875  007D00  6E                 	db	110	;'n'
   876  007D01  63                 	db	99	;'c'
   877  007D02  69                 	db	105	;'i'
   878  007D03  70                 	db	112	;'p'
   879  007D04  61                 	db	97	;'a'
   880  007D05  6C                 	db	108	;'l'
   881  007D06  2E                 	db	46
   882  007D07  2E                 	db	46
   883  007D08  2E                 	db	46
   884  007D09  00                 	db	0
   885  007D0A                     STR_43:
   886  007D0A  42                 	db	66	;'B'
   887  007D0B  6F                 	db	111	;'o'
   888  007D0C  6D                 	db	109	;'m'
   889  007D0D  62                 	db	98	;'b'
   890  007D0E  61                 	db	97	;'a'
   891  007D0F  20                 	db	32
   892  007D10  43                 	db	67	;'C'
   893  007D11  6F                 	db	111	;'o'
   894  007D12  6D                 	db	109	;'m'
   895  007D13  62                 	db	98	;'b'
   896  007D14  75                 	db	117	;'u'
   897  007D15  73                 	db	115	;'s'
   898  007D16  74                 	db	116	;'t'
   899  007D17  61                 	db	97	;'a'
   900  007D18  6F                 	db	111	;'o'
   901  007D19  2E                 	db	46
   902  007D1A  2E                 	db	46
   903  007D1B  2E                 	db	46
   904  007D1C  00                 	db	0
   905  007D1D                     STR_100:
   906  007D1D  43                 	db	67	;'C'
   907  007D1E  6F                 	db	111	;'o'
   908  007D1F  6E                 	db	110	;'n'
   909  007D20  66                 	db	102	;'f'
   910  007D21  69                 	db	105	;'i'
   911  007D22  67                 	db	103	;'g'
   912  007D23  75                 	db	117	;'u'
   913  007D24  72                 	db	114	;'r'
   914  007D25  61                 	db	97	;'a'
   915  007D26  63                 	db	99	;'c'
   916  007D27  61                 	db	97	;'a'
   917  007D28  6F                 	db	111	;'o'
   918  007D29  20                 	db	32
   919  007D2A  74                 	db	116	;'t'
   920  007D2B  65                 	db	101	;'e'
   921  007D2C  6D                 	db	109	;'m'
   922  007D2D  70                 	db	112	;'p'
   923  007D2E  6F                 	db	111	;'o'
   924  007D2F  00                 	db	0
   925  007D30                     STR_66:
   926  007D30  45                 	db	69	;'E'
   927  007D31  72                 	db	114	;'r'
   928  007D32  72                 	db	114	;'r'
   929  007D33  6F                 	db	111	;'o'
   930  007D34  20                 	db	32
   931  007D35  6E                 	db	110	;'n'
   932  007D36  6F                 	db	111	;'o'
   933  007D37  20                 	db	32
   934  007D38  54                 	db	84	;'T'
   935  007D39  72                 	db	114	;'r'
   936  007D3A  61                 	db	97	;'a'
   937  007D3B  6E                 	db	110	;'n'
   938  007D3C  73                 	db	115	;'s'
   939  007D3D  64                 	db	100	;'d'
   940  007D3E  75                 	db	117	;'u'
   941  007D3F  74                 	db	116	;'t'
   942  007D40  6F                 	db	111	;'o'
   943  007D41  72                 	db	114	;'r'
   944  007D42  00                 	db	0
   945  007D43                     STR_12:
   946  007D43  41                 	db	65	;'A'
   947  007D44  54                 	db	84	;'T'
   948  007D45  2B                 	db	43
   949  007D46  43                 	db	67	;'C'
   950  007D47  4D                 	db	77	;'M'
   951  007D48  47                 	db	71	;'G'
   952  007D49  53                 	db	83	;'S'
   953  007D4A  3D                 	db	61	;'='
   954  007D4B  22                 	db	34
   955  007D4C  2B                 	db	43
   956  007D4D  35                 	db	53	;'5'
   957  007D4E  35                 	db	53	;'5'
   958  007D4F  25                 	db	37
   959  007D50  73                 	db	115	;'s'
   960  007D51  22                 	db	34
   961  007D52  0D                 	db	13
   962  007D53  0A                 	db	10
   963  007D54  00                 	db	0
   964  007D55                     STR_117:
   965  007D55  50                 	db	80	;'P'
   966  007D56  41                 	db	65	;'A'
   967  007D57  52                 	db	82	;'R'
   968  007D58  54                 	db	84	;'T'
   969  007D59  49                 	db	73	;'I'
   970  007D5A  44                 	db	68	;'D'
   971  007D5B  41                 	db	65	;'A'
   972  007D5C  20                 	db	32
   973  007D5D  43                 	db	67	;'C'
   974  007D5E  4F                 	db	79	;'O'
   975  007D5F  4D                 	db	77	;'M'
   976  007D60  42                 	db	66	;'B'
   977  007D61  55                 	db	85	;'U'
   978  007D62  53                 	db	83	;'S'
   979  007D63  54                 	db	84	;'T'
   980  007D64  41                 	db	65	;'A'
   981  007D65  4F                 	db	79	;'O'
   982  007D66  00                 	db	0
   983  007D67                     STR_119:
   984  007D67  50                 	db	80	;'P'
   985  007D68  45                 	db	69	;'E'
   986  007D69  52                 	db	82	;'R'
   987  007D6A  49                 	db	73	;'I'
   988  007D6B  4F                 	db	79	;'O'
   989  007D6C  44                 	db	68	;'D'
   990  007D6D  4F                 	db	79	;'O'
   991  007D6E  20                 	db	32
   992  007D6F  44                 	db	68	;'D'
   993  007D70  45                 	db	69	;'E'
   994  007D71  20                 	db	32
   995  007D72  54                 	db	84	;'T'
   996  007D73  45                 	db	69	;'E'
   997  007D74  53                 	db	83	;'S'
   998  007D75  54                 	db	84	;'T'
   999  007D76  45                 	db	69	;'E'
  1000  007D77  53                 	db	83	;'S'
  1001  007D78  00                 	db	0
  1002  007D79                     STR_105:
  1003  007D79  68                 	db	104	;'h'
  1004  007D7A  6F                 	db	111	;'o'
  1005  007D7B  72                 	db	114	;'r'
  1006  007D7C  69                 	db	105	;'i'
  1007  007D7D  6D                 	db	109	;'m'
  1008  007D7E  65                 	db	101	;'e'
  1009  007D7F  74                 	db	116	;'t'
  1010  007D80  72                 	db	114	;'r'
  1011  007D81  6F                 	db	111	;'o'
  1012  007D82  3A                 	db	58	;':'
  1013  007D83  25                 	db	37
  1014  007D84  35                 	db	53	;'5'
  1015  007D85  64                 	db	100	;'d'
  1016  007D86  20                 	db	32
  1017  007D87  6D                 	db	109	;'m'
  1018  007D88  69                 	db	105	;'i'
  1019  007D89  6E                 	db	110	;'n'
  1020  007D8A  00                 	db	0
  1021  007D8B                     STR_62:
  1022  007D8B  20                 	db	32
  1023  007D8C  2A                 	db	42
  1024  007D8D  66                 	db	102	;'f'
  1025  007D8E  61                 	db	97	;'a'
  1026  007D8F  6C                 	db	108	;'l'
  1027  007D90  68                 	db	104	;'h'
  1028  007D91  61                 	db	97	;'a'
  1029  007D92  20                 	db	32
  1030  007D93  42                 	db	66	;'B'
  1031  007D94  2E                 	db	46
  1032  007D95  20                 	db	32
  1033  007D96  6A                 	db	106	;'j'
  1034  007D97  6F                 	db	111	;'o'
  1035  007D98  63                 	db	99	;'c'
  1036  007D99  6B                 	db	107	;'k'
  1037  007D9A  65                 	db	101	;'e'
  1038  007D9B  79                 	db	121	;'y'
  1039  007D9C  00                 	db	0
  1040  007D9D                     STR_47:
  1041  007D9D  54                 	db	84	;'T'
  1042  007D9E  65                 	db	101	;'e'
  1043  007D9F  73                 	db	115	;'s'
  1044  007DA0  74                 	db	116	;'t'
  1045  007DA1  65                 	db	101	;'e'
  1046  007DA2  20                 	db	32
  1047  007DA3  43                 	db	67	;'C'
  1048  007DA4  6F                 	db	111	;'o'
  1049  007DA5  6E                 	db	110	;'n'
  1050  007DA6  63                 	db	99	;'c'
  1051  007DA7  6C                 	db	108	;'l'
  1052  007DA8  75                 	db	117	;'u'
  1053  007DA9  69                 	db	105	;'i'
  1054  007DAA  64                 	db	100	;'d'
  1055  007DAB  6F                 	db	111	;'o'
  1056  007DAC  21                 	db	33
  1057  007DAD  00                 	db	0
  1058  007DAE                     STR_92:
  1059  007DAE  20                 	db	32
  1060  007DAF  20                 	db	32
  1061  007DB0  20                 	db	32
  1062  007DB1  34                 	db	52	;'4'
  1063  007DB2  38                 	db	56	;'8'
  1064  007DB3  20                 	db	32
  1065  007DB4  39                 	db	57	;'9'
  1066  007DB5  39                 	db	57	;'9'
  1067  007DB6  39                 	db	57	;'9'
  1068  007DB7  30                 	db	48	;'0'
  1069  007DB8  36                 	db	54	;'6'
  1070  007DB9  2D                 	db	45
  1071  007DBA  35                 	db	53	;'5'
  1072  007DBB  36                 	db	54	;'6'
  1073  007DBC  35                 	db	53	;'5'
  1074  007DBD  31                 	db	49	;'1'
  1075  007DBE  00                 	db	0
  1076  007DBF                     STR_59:
  1077  007DBF  20                 	db	32
  1078  007DC0  2A                 	db	42
  1079  007DC1  66                 	db	102	;'f'
  1080  007DC2  61                 	db	97	;'a'
  1081  007DC3  6C                 	db	108	;'l'
  1082  007DC4  68                 	db	104	;'h'
  1083  007DC5  61                 	db	97	;'a'
  1084  007DC6  20                 	db	32
  1085  007DC7  65                 	db	101	;'e'
  1086  007DC8  6C                 	db	108	;'l'
  1087  007DC9  65                 	db	101	;'e'
  1088  007DCA  74                 	db	116	;'t'
  1089  007DCB  72                 	db	114	;'r'
  1090  007DCC  69                 	db	105	;'i'
  1091  007DCD  63                 	db	99	;'c'
  1092  007DCE  61                 	db	97	;'a'
  1093  007DCF  00                 	db	0
  1094  007DD0                     STR_99:
  1095  007DD0  45                 	db	69	;'E'
  1096  007DD1  6E                 	db	110	;'n'
  1097  007DD2  76                 	db	118	;'v'
  1098  007DD3  69                 	db	105	;'i'
  1099  007DD4  61                 	db	97	;'a'
  1100  007DD5  72                 	db	114	;'r'
  1101  007DD6  20                 	db	32
  1102  007DD7  73                 	db	115	;'s'
  1103  007DD8  6D                 	db	109	;'m'
  1104  007DD9  73                 	db	115	;'s'
  1105  007DDA  20                 	db	32
  1106  007DDB  74                 	db	116	;'t'
  1107  007DDC  65                 	db	101	;'e'
  1108  007DDD  73                 	db	115	;'s'
  1109  007DDE  74                 	db	116	;'t'
  1110  007DDF  65                 	db	101	;'e'
  1111  007DE0  00                 	db	0
  1112  007DE1                     STR_57:
  1113  007DE1  65                 	db	101	;'e'
  1114  007DE2  6E                 	db	110	;'n'
  1115  007DE3  76                 	db	118	;'v'
  1116  007DE4  69                 	db	105	;'i'
  1117  007DE5  61                 	db	97	;'a'
  1118  007DE6  6E                 	db	110	;'n'
  1119  007DE7  64                 	db	100	;'d'
  1120  007DE8  6F                 	db	111	;'o'
  1121  007DE9  20                 	db	32
  1122  007DEA  53                 	db	83	;'S'
  1123  007DEB  4D                 	db	77	;'M'
  1124  007DEC  53                 	db	83	;'S'
  1125  007DED  2E                 	db	46
  1126  007DEE  2E                 	db	46
  1127  007DEF  2E                 	db	46
  1128  007DF0  00                 	db	0
  1129  007DF1                     STR_41:
  1130  007DF1  42                 	db	66	;'B'
  1131  007DF2  6F                 	db	111	;'o'
  1132  007DF3  6D                 	db	109	;'m'
  1133  007DF4  62                 	db	98	;'b'
  1134  007DF5  61                 	db	97	;'a'
  1135  007DF6  20                 	db	32
  1136  007DF7  4A                 	db	74	;'J'
  1137  007DF8  6F                 	db	111	;'o'
  1138  007DF9  63                 	db	99	;'c'
  1139  007DFA  6B                 	db	107	;'k'
  1140  007DFB  65                 	db	101	;'e'
  1141  007DFC  79                 	db	121	;'y'
  1142  007DFD  2E                 	db	46
  1143  007DFE  2E                 	db	46
  1144  007DFF  2E                 	db	46
  1145  007E00  00                 	db	0
  1146  007E01                     STR_116:
  1147  007E01  50                 	db	80	;'P'
  1148  007E02  52                 	db	82	;'R'
  1149  007E03  45                 	db	69	;'E'
  1150  007E04  53                 	db	83	;'S'
  1151  007E05  53                 	db	83	;'S'
  1152  007E06  41                 	db	65	;'A'
  1153  007E07  4F                 	db	79	;'O'
  1154  007E08  20                 	db	32
  1155  007E09  44                 	db	68	;'D'
  1156  007E0A  41                 	db	65	;'A'
  1157  007E0B  20                 	db	32
  1158  007E0C  52                 	db	82	;'R'
  1159  007E0D  45                 	db	69	;'E'
  1160  007E0E  44                 	db	68	;'D'
  1161  007E0F  45                 	db	69	;'E'
  1162  007E10  00                 	db	0
  1163  007E11                     STR_40:
  1164  007E11  50                 	db	80	;'P'
  1165  007E12  72                 	db	114	;'r'
  1166  007E13  65                 	db	101	;'e'
  1167  007E14  73                 	db	115	;'s'
  1168  007E15  73                 	db	115	;'s'
  1169  007E16  61                 	db	97	;'a'
  1170  007E17  6F                 	db	111	;'o'
  1171  007E18  20                 	db	32
  1172  007E19  25                 	db	37
  1173  007E1A  73                 	db	115	;'s'
  1174  007E1B  20                 	db	32
  1175  007E1C  42                 	db	66	;'B'
  1176  007E1D  41                 	db	65	;'A'
  1177  007E1E  52                 	db	82	;'R'
  1178  007E1F  00                 	db	0
  1179  007E20                     STR_70:
  1180  007E20  25                 	db	37
  1181  007E21  30                 	db	48	;'0'
  1182  007E22  32                 	db	50	;'2'
  1183  007E23  64                 	db	100	;'d'
  1184  007E24  2F                 	db	47
  1185  007E25  25                 	db	37
  1186  007E26  30                 	db	48	;'0'
  1187  007E27  32                 	db	50	;'2'
  1188  007E28  64                 	db	100	;'d'
  1189  007E29  2F                 	db	47
  1190  007E2A  25                 	db	37
  1191  007E2B  30                 	db	48	;'0'
  1192  007E2C  32                 	db	50	;'2'
  1193  007E2D  64                 	db	100	;'d'
  1194  007E2E  00                 	db	0
  1195  007E2F                     STR_72:
  1196  007E2F  25                 	db	37
  1197  007E30  30                 	db	48	;'0'
  1198  007E31  32                 	db	50	;'2'
  1199  007E32  64                 	db	100	;'d'
  1200  007E33  3A                 	db	58	;':'
  1201  007E34  25                 	db	37
  1202  007E35  30                 	db	48	;'0'
  1203  007E36  32                 	db	50	;'2'
  1204  007E37  64                 	db	100	;'d'
  1205  007E38  3A                 	db	58	;':'
  1206  007E39  25                 	db	37
  1207  007E3A  30                 	db	48	;'0'
  1208  007E3B  32                 	db	50	;'2'
  1209  007E3C  64                 	db	100	;'d'
  1210  007E3D  00                 	db	0
  1211  007E3E                     STR_51:
  1212  007E3E  50                 	db	80	;'P'
  1213  007E3F  52                 	db	82	;'R'
  1214  007E40  49                 	db	73	;'I'
  1215  007E41  4E                 	db	78	;'N'
  1216  007E42  43                 	db	67	;'C'
  1217  007E43  49                 	db	73	;'I'
  1218  007E44  50                 	db	80	;'P'
  1219  007E45  41                 	db	65	;'A'
  1220  007E46  4C                 	db	76	;'L'
  1221  007E47  20                 	db	32
  1222  007E48  3A                 	db	58	;':'
  1223  007E49  20                 	db	32
  1224  007E4A  25                 	db	37
  1225  007E4B  73                 	db	115	;'s'
  1226  007E4C  00                 	db	0
  1227  007E4D                     STR_54:
  1228  007E4D  43                 	db	67	;'C'
  1229  007E4E  4F                 	db	79	;'O'
  1230  007E4F  4D                 	db	77	;'M'
  1231  007E50  42                 	db	66	;'B'
  1232  007E51  55                 	db	85	;'U'
  1233  007E52  53                 	db	83	;'S'
  1234  007E53  54                 	db	84	;'T'
  1235  007E54  41                 	db	65	;'A'
  1236  007E55  4F                 	db	79	;'O'
  1237  007E56  20                 	db	32
  1238  007E57  3A                 	db	58	;':'
  1239  007E58  20                 	db	32
  1240  007E59  25                 	db	37
  1241  007E5A  73                 	db	115	;'s'
  1242  007E5B  00                 	db	0
  1243  007E5C                     STR_39:
  1244  007E5C  41                 	db	65	;'A'
  1245  007E5D  67                 	db	103	;'g'
  1246  007E5E  75                 	db	117	;'u'
  1247  007E5F  61                 	db	97	;'a'
  1248  007E60  72                 	db	114	;'r'
  1249  007E61  64                 	db	100	;'d'
  1250  007E62  65                 	db	101	;'e'
  1251  007E63  2E                 	db	46
  1252  007E64  2E                 	db	46
  1253  007E65  2E                 	db	46
  1254  007E66  20                 	db	32
  1255  007E67  25                 	db	37
  1256  007E68  64                 	db	100	;'d'
  1257  007E69  73                 	db	115	;'s'
  1258  007E6A  00                 	db	0
  1259  007E6B                     STR_122:
  1260  007E6B  49                 	db	73	;'I'
  1261  007E6C  6E                 	db	110	;'n'
  1262  007E6D  69                 	db	105	;'i'
  1263  007E6E  63                 	db	99	;'c'
  1264  007E6F  69                 	db	105	;'i'
  1265  007E70  61                 	db	97	;'a'
  1266  007E71  72                 	db	114	;'r'
  1267  007E72  20                 	db	32
  1268  007E73  54                 	db	84	;'T'
  1269  007E74  65                 	db	101	;'e'
  1270  007E75  73                 	db	115	;'s'
  1271  007E76  74                 	db	116	;'t'
  1272  007E77  65                 	db	101	;'e'
  1273  007E78  73                 	db	115	;'s'
  1274  007E79  00                 	db	0
  1275  007E7A                     STR_112:
  1276  007E7A  56                 	db	86	;'V'
  1277  007E7B  65                 	db	101	;'e'
  1278  007E7C  72                 	db	114	;'r'
  1279  007E7D  73                 	db	115	;'s'
  1280  007E7E  61                 	db	97	;'a'
  1281  007E7F  6F                 	db	111	;'o'
  1282  007E80  20                 	db	32
  1283  007E81  53                 	db	83	;'S'
  1284  007E82  6F                 	db	111	;'o'
  1285  007E83  66                 	db	102	;'f'
  1286  007E84  74                 	db	116	;'t'
  1287  007E85  2E                 	db	46
  1288  007E86  3A                 	db	58	;':'
  1289  007E87  00                 	db	0
  1290  007E88                     STR_101:
  1291  007E88  4D                 	db	77	;'M'
  1292  007E89  61                 	db	97	;'a'
  1293  007E8A  78                 	db	120	;'x'
  1294  007E8B  2E                 	db	46
  1295  007E8C  20                 	db	32
  1296  007E8D  50                 	db	80	;'P'
  1297  007E8E  41                 	db	65	;'A'
  1298  007E8F  52                 	db	82	;'R'
  1299  007E90  54                 	db	84	;'T'
  1300  007E91  49                 	db	73	;'I'
  1301  007E92  44                 	db	68	;'D'
  1302  007E93  41                 	db	65	;'A'
  1303  007E94  3A                 	db	58	;':'
  1304  007E95  00                 	db	0
  1305  007E96                     STR_84:
  1306  007E96  50                 	db	80	;'P'
  1307  007E97  72                 	db	114	;'r'
  1308  007E98  69                 	db	105	;'i'
  1309  007E99  6E                 	db	110	;'n'
  1310  007E9A  63                 	db	99	;'c'
  1311  007E9B  69                 	db	105	;'i'
  1312  007E9C  70                 	db	112	;'p'
  1313  007E9D  61                 	db	97	;'a'
  1314  007E9E  6C                 	db	108	;'l'
  1315  007E9F  3A                 	db	58	;':'
  1316  007EA0  20                 	db	32
  1317  007EA1  25                 	db	37
  1318  007EA2  73                 	db	115	;'s'
  1319  007EA3  00                 	db	0
  1320  007EA4                     STR_87:
  1321  007EA4  43                 	db	67	;'C'
  1322  007EA5  6F                 	db	111	;'o'
  1323  007EA6  6D                 	db	109	;'m'
  1324  007EA7  62                 	db	98	;'b'
  1325  007EA8  75                 	db	117	;'u'
  1326  007EA9  73                 	db	115	;'s'
  1327  007EAA  74                 	db	116	;'t'
  1328  007EAB  61                 	db	97	;'a'
  1329  007EAC  6F                 	db	111	;'o'
  1330  007EAD  3A                 	db	58	;':'
  1331  007EAE  20                 	db	32
  1332  007EAF  25                 	db	37
  1333  007EB0  73                 	db	115	;'s'
  1334  007EB1  00                 	db	0
  1335  007EB2                     STR_98:
  1336  007EB2  20                 	db	32
  1337  007EB3  61                 	db	97	;'a'
  1338  007EB4  67                 	db	103	;'g'
  1339  007EB5  75                 	db	117	;'u'
  1340  007EB6  61                 	db	97	;'a'
  1341  007EB7  72                 	db	114	;'r'
  1342  007EB8  64                 	db	100	;'d'
  1343  007EB9  65                 	db	101	;'e'
  1344  007EBA  2E                 	db	46
  1345  007EBB  2E                 	db	46
  1346  007EBC  2E                 	db	46
  1347  007EBD  20                 	db	32
  1348  007EBE  00                 	db	0
  1349  007EBF                     STR_46:
  1350  007EBF  52                 	db	82	;'R'
  1351  007EC0  65                 	db	101	;'e'
  1352  007EC1  6C                 	db	108	;'l'
  1353  007EC2  69                 	db	105	;'i'
  1354  007EC3  67                 	db	103	;'g'
  1355  007EC4  61                 	db	97	;'a'
  1356  007EC5  6E                 	db	110	;'n'
  1357  007EC6  64                 	db	100	;'d'
  1358  007EC7  6F                 	db	111	;'o'
  1359  007EC8  2E                 	db	46
  1360  007EC9  2E                 	db	46
  1361  007ECA  2E                 	db	46
  1362  007ECB  00                 	db	0
  1363  007ECC                     STR_10:
  1364  007ECC  41                 	db	65	;'A'
  1365  007ECD  54                 	db	84	;'T'
  1366  007ECE  2B                 	db	43
  1367  007ECF  43                 	db	67	;'C'
  1368  007ED0  4D                 	db	77	;'M'
  1369  007ED1  47                 	db	71	;'G'
  1370  007ED2  46                 	db	70	;'F'
  1371  007ED3  3D                 	db	61	;'='
  1372  007ED4  31                 	db	49	;'1'
  1373  007ED5  0D                 	db	13
  1374  007ED6  0A                 	db	10
  1375  007ED7  00                 	db	0
  1376  007ED8                     STR_15:
  1377  007ED8  4A                 	db	74	;'J'
  1378  007ED9  75                 	db	117	;'u'
  1379  007EDA  6E                 	db	110	;'n'
  1380  007EDB  20                 	db	32
  1381  007EDC  30                 	db	48	;'0'
  1382  007EDD  31                 	db	49	;'1'
  1383  007EDE  20                 	db	32
  1384  007EDF  32                 	db	50	;'2'
  1385  007EE0  30                 	db	48	;'0'
  1386  007EE1  32                 	db	50	;'2'
  1387  007EE2  30                 	db	48	;'0'
  1388  007EE3  00                 	db	0
  1389  007EE4                     STR_103:
  1390  007EE4  4D                 	db	77	;'M'
  1391  007EE5  61                 	db	97	;'a'
  1392  007EE6  78                 	db	120	;'x'
  1393  007EE7  2E                 	db	46
  1394  007EE8  20                 	db	32
  1395  007EE9  54                 	db	84	;'T'
  1396  007EEA  45                 	db	69	;'E'
  1397  007EEB  53                 	db	83	;'S'
  1398  007EEC  54                 	db	84	;'T'
  1399  007EED  45                 	db	69	;'E'
  1400  007EEE  3A                 	db	58	;':'
  1401  007EEF  00                 	db	0
  1402  007EF0                     STR_36:
  1403  007EF0  4E                 	db	78	;'N'
  1404  007EF1  4F                 	db	79	;'O'
  1405  007EF2  20                 	db	32
  1406  007EF3  44                 	db	68	;'D'
  1407  007EF4  49                 	db	73	;'I'
  1408  007EF5  41                 	db	65	;'A'
  1409  007EF6  4C                 	db	76	;'L'
  1410  007EF7  54                 	db	84	;'T'
  1411  007EF8  4F                 	db	79	;'O'
  1412  007EF9  4E                 	db	78	;'N'
  1413  007EFA  45                 	db	69	;'E'
  1414  007EFB  00                 	db	0
  1415  007EFC                     STR_60:
  1416  007EFC  20                 	db	32
  1417  007EFD  2A                 	db	42
  1418  007EFE  66                 	db	102	;'f'
  1419  007EFF  61                 	db	97	;'a'
  1420  007F00  6C                 	db	108	;'l'
  1421  007F01  68                 	db	104	;'h'
  1422  007F02  61                 	db	97	;'a'
  1423  007F03  20                 	db	32
  1424  007F04  47                 	db	71	;'G'
  1425  007F05  53                 	db	83	;'S'
  1426  007F06  4D                 	db	77	;'M'
  1427  007F07  00                 	db	0
  1428  007F08                     STR_121:
  1429  007F08  49                 	db	73	;'I'
  1430  007F09  4E                 	db	78	;'N'
  1431  007F0A  46                 	db	70	;'F'
  1432  007F0B  4F                 	db	79	;'O'
  1433  007F0C  20                 	db	32
  1434  007F0D  56                 	db	86	;'V'
  1435  007F0E  45                 	db	69	;'E'
  1436  007F0F  52                 	db	82	;'R'
  1437  007F10  53                 	db	83	;'S'
  1438  007F11  41                 	db	65	;'A'
  1439  007F12  4F                 	db	79	;'O'
  1440  007F13  00                 	db	0
  1441  007F14                     STR_93:
  1442  007F14  76                 	db	118	;'v'
  1443  007F15  65                 	db	101	;'e'
  1444  007F16  72                 	db	114	;'r'
  1445  007F17  73                 	db	115	;'s'
  1446  007F18  61                 	db	97	;'a'
  1447  007F19  6F                 	db	111	;'o'
  1448  007F1A  20                 	db	32
  1449  007F1B  2D                 	db	45
  1450  007F1C  20                 	db	32
  1451  007F1D  25                 	db	37
  1452  007F1E  73                 	db	115	;'s'
  1453  007F1F  00                 	db	0
  1454  007F20                     STR_35:
  1455  007F20  41                 	db	65	;'A'
  1456  007F21  54                 	db	84	;'T'
  1457  007F22  44                 	db	68	;'D'
  1458  007F23  20                 	db	32
  1459  007F24  30                 	db	48	;'0'
  1460  007F25  25                 	db	37
  1461  007F26  73                 	db	115	;'s'
  1462  007F27  3B                 	db	59	;';'
  1463  007F28  0D                 	db	13
  1464  007F29  0A                 	db	10
  1465  007F2A  00                 	db	0
  1466  007F2B                     STR_83:
  1467  007F2B  23                 	db	35
  1468  007F2C  25                 	db	37
  1469  007F2D  30                 	db	48	;'0'
  1470  007F2E  32                 	db	50	;'2'
  1471  007F2F  64                 	db	100	;'d'
  1472  007F30  2F                 	db	47
  1473  007F31  25                 	db	37
  1474  007F32  30                 	db	48	;'0'
  1475  007F33  32                 	db	50	;'2'
  1476  007F34  64                 	db	100	;'d'
  1477  007F35  00                 	db	0
  1478  007F36                     STR_106:
  1479  007F36  47                 	db	71	;'G'
  1480  007F37  45                 	db	69	;'E'
  1481  007F38  52                 	db	82	;'R'
  1482  007F39  41                 	db	65	;'A'
  1483  007F3A  4C                 	db	76	;'L'
  1484  007F3B  20                 	db	32
  1485  007F3C  3A                 	db	58	;':'
  1486  007F3D  20                 	db	32
  1487  007F3E  25                 	db	37
  1488  007F3F  73                 	db	115	;'s'
  1489  007F40  00                 	db	0
  1490  007F41                     STR_48:
  1491  007F41  4A                 	db	74	;'J'
  1492  007F42  4F                 	db	79	;'O'
  1493  007F43  4B                 	db	75	;'K'
  1494  007F44  45                 	db	69	;'E'
  1495  007F45  59                 	db	89	;'Y'
  1496  007F46  20                 	db	32
  1497  007F47  3A                 	db	58	;':'
  1498  007F48  20                 	db	32
  1499  007F49  25                 	db	37
  1500  007F4A  73                 	db	115	;'s'
  1501  007F4B  00                 	db	0
  1502  007F4C                     STR_76:
  1503  007F4C  41                 	db	65	;'A'
  1504  007F4D  54                 	db	84	;'T'
  1505  007F4E  49                 	db	73	;'I'
  1506  007F4F  56                 	db	86	;'V'
  1507  007F50  41                 	db	65	;'A'
  1508  007F51  52                 	db	82	;'R'
  1509  007F52  3A                 	db	58	;':'
  1510  007F53  20                 	db	32
  1511  007F54  25                 	db	37
  1512  007F55  73                 	db	115	;'s'
  1513  007F56  00                 	db	0
  1514  007F57                     STR_45:
  1515  007F57  4C                 	db	76	;'L'
  1516  007F58  69                 	db	105	;'i'
  1517  007F59  67                 	db	103	;'g'
  1518  007F5A  61                 	db	97	;'a'
  1519  007F5B  64                 	db	100	;'d'
  1520  007F5C  61                 	db	97	;'a'
  1521  007F5D  2E                 	db	46
  1522  007F5E  2E                 	db	46
  1523  007F5F  2E                 	db	46
  1524  007F60  00                 	db	0
  1525  007F61                     STR_115:
  1526  007F61  44                 	db	68	;'D'
  1527  007F62  41                 	db	65	;'A'
  1528  007F63  54                 	db	84	;'T'
  1529  007F64  41                 	db	65	;'A'
  1530  007F65  2F                 	db	47
  1531  007F66  48                 	db	72	;'H'
  1532  007F67  4F                 	db	79	;'O'
  1533  007F68  52                 	db	82	;'R'
  1534  007F69  41                 	db	65	;'A'
  1535  007F6A  00                 	db	0
  1536  007F6B                     STR_120:
  1537  007F6B  44                 	db	68	;'D'
  1538  007F6C  41                 	db	65	;'A'
  1539  007F6D  54                 	db	84	;'T'
  1540  007F6E  41                 	db	65	;'A'
  1541  007F6F  4C                 	db	76	;'L'
  1542  007F70  4F                 	db	79	;'O'
  1543  007F71  47                 	db	71	;'G'
  1544  007F72  45                 	db	69	;'E'
  1545  007F73  52                 	db	82	;'R'
  1546  007F74  00                 	db	0
  1547  007F75                     STR_118:
  1548  007F75  54                 	db	84	;'T'
  1549  007F76  45                 	db	69	;'E'
  1550  007F77  4C                 	db	76	;'L'
  1551  007F78  45                 	db	69	;'E'
  1552  007F79  46                 	db	70	;'F'
  1553  007F7A  4F                 	db	79	;'O'
  1554  007F7B  4E                 	db	78	;'N'
  1555  007F7C  45                 	db	69	;'E'
  1556  007F7D  53                 	db	83	;'S'
  1557  007F7E  00                 	db	0
  1558  007F7F                     STR_80:
  1559  007F7F  4A                 	db	74	;'J'
  1560  007F80  6F                 	db	111	;'o'
  1561  007F81  6B                 	db	107	;'k'
  1562  007F82  65                 	db	101	;'e'
  1563  007F83  79                 	db	121	;'y'
  1564  007F84  3A                 	db	58	;':'
  1565  007F85  20                 	db	32
  1566  007F86  25                 	db	37
  1567  007F87  73                 	db	115	;'s'
  1568  007F88  00                 	db	0
  1569  007F89                     STR_3:
  1570  007F89  41                 	db	65	;'A'
  1571  007F8A  54                 	db	84	;'T'
  1572  007F8B  2B                 	db	43
  1573  007F8C  43                 	db	67	;'C'
  1574  007F8D  53                 	db	83	;'S'
  1575  007F8E  51                 	db	81	;'Q'
  1576  007F8F  0D                 	db	13
  1577  007F90  0A                 	db	10
  1578  007F91  00                 	db	0
  1579  007F92                     STR_44:
  1580  007F92  42                 	db	66	;'B'
  1581  007F93  6F                 	db	111	;'o'
  1582  007F94  6D                 	db	109	;'m'
  1583  007F95  62                 	db	98	;'b'
  1584  007F96  61                 	db	97	;'a'
  1585  007F97  20                 	db	32
  1586  007F98  25                 	db	37
  1587  007F99  73                 	db	115	;'s'
  1588  007F9A  00                 	db	0
  1589  007F9B                     STR_90:
  1590  007F9B  54                 	db	84	;'T'
  1591  007F9C  45                 	db	69	;'E'
  1592  007F9D  43                 	db	67	;'C'
  1593  007F9E  48                 	db	72	;'H'
  1594  007F9F  4E                 	db	78	;'N'
  1595  007FA0  4F                 	db	79	;'O'
  1596  007FA1  57                 	db	87	;'W'
  1597  007FA2  00                 	db	0
  1598  007FA3                     STR_123:
  1599  007FA3  28                 	db	40
  1600  007FA4  6E                 	db	110	;'n'
  1601  007FA5  75                 	db	117	;'u'
  1602  007FA6  6C                 	db	108	;'l'
  1603  007FA7  6C                 	db	108	;'l'
  1604  007FA8  29                 	db	41
  1605  007FA9  00                 	db	0
  1606  007FAA                     STR_21:
  1607  007FAA  41                 	db	65	;'A'
  1608  007FAB  54                 	db	84	;'T'
  1609  007FAC  48                 	db	72	;'H'
  1610  007FAD  30                 	db	48	;'0'
  1611  007FAE  0D                 	db	13
  1612  007FAF  0A                 	db	10
  1613  007FB0  00                 	db	0
  1614  007FB1                     STR_6:
  1615  007FB1  2B                 	db	43
  1616  007FB2  43                 	db	67	;'C'
  1617  007FB3  53                 	db	83	;'S'
  1618  007FB4  51                 	db	81	;'Q'
  1619  007FB5  3A                 	db	58	;':'
  1620  007FB6  20                 	db	32
  1621  007FB7  00                 	db	0
  1622  007FB8                     STR_95:
  1623  007FB8  54                 	db	84	;'T'
  1624  007FB9  31                 	db	49	;'1'
  1625  007FBA  3A                 	db	58	;':'
  1626  007FBB  20                 	db	32
  1627  007FBC  25                 	db	37
  1628  007FBD  73                 	db	115	;'s'
  1629  007FBE  00                 	db	0
  1630  007FBF                     STR_96:
  1631  007FBF  54                 	db	84	;'T'
  1632  007FC0  32                 	db	50	;'2'
  1633  007FC1  3A                 	db	58	;':'
  1634  007FC2  20                 	db	32
  1635  007FC3  25                 	db	37
  1636  007FC4  73                 	db	115	;'s'
  1637  007FC5  00                 	db	0
  1638  007FC6                     STR_71:
  1639  007FC6  48                 	db	72	;'H'
  1640  007FC7  4F                 	db	79	;'O'
  1641  007FC8  52                 	db	82	;'R'
  1642  007FC9  41                 	db	65	;'A'
  1643  007FCA  3A                 	db	58	;':'
  1644  007FCB  00                 	db	0
  1645  007FCC                     STR_69:
  1646  007FCC  44                 	db	68	;'D'
  1647  007FCD  41                 	db	65	;'A'
  1648  007FCE  54                 	db	84	;'T'
  1649  007FCF  41                 	db	65	;'A'
  1650  007FD0  3A                 	db	58	;':'
  1651  007FD1  00                 	db	0
  1652  007FD2                     STR_28:
  1653  007FD2  46                 	db	70	;'F'
  1654  007FD3  41                 	db	65	;'A'
  1655  007FD4  4C                 	db	76	;'L'
  1656  007FD5  48                 	db	72	;'H'
  1657  007FD6  41                 	db	65	;'A'
  1658  007FD7  00                 	db	0
  1659  007FD8                     STR_17:
  1660  007FD8  45                 	db	69	;'E'
  1661  007FD9  52                 	db	82	;'R'
  1662  007FDA  52                 	db	82	;'R'
  1663  007FDB  4F                 	db	79	;'O'
  1664  007FDC  52                 	db	82	;'R'
  1665  007FDD  00                 	db	0
  1666  007FDE                     STR_4:
  1667  007FDE  41                 	db	65	;'A'
  1668  007FDF  54                 	db	84	;'T'
  1669  007FE0  0D                 	db	13
  1670  007FE1  0A                 	db	10
  1671  007FE2  00                 	db	0
  1672  007FE3                     STR_50:
  1673  007FE3  45                 	db	69	;'E'
  1674  007FE4  52                 	db	82	;'R'
  1675  007FE5  52                 	db	82	;'R'
  1676  007FE6  4F                 	db	79	;'O'
  1677  007FE7  00                 	db	0
  1678  007FE8                     STR_1:
  1679  007FE8  25                 	db	37
  1680  007FE9  73                 	db	115	;'s'
  1681  007FEA  25                 	db	37
  1682  007FEB  63                 	db	99	;'c'
  1683  007FEC  00                 	db	0
  1684  007FED                     STR_102:
  1685  007FED  25                 	db	37
  1686  007FEE  33                 	db	51	;'3'
  1687  007FEF  64                 	db	100	;'d'
  1688  007FF0  73                 	db	115	;'s'
  1689  007FF1  00                 	db	0
  1690  007FF2                     STR_78:
  1691  007FF2  53                 	db	83	;'S'
  1692  007FF3  69                 	db	105	;'i'
  1693  007FF4  6D                 	db	109	;'m'
  1694  007FF5  00                 	db	0
  1695  007FF6                     STR_77:
  1696  007FF6  4E                 	db	78	;'N'
  1697  007FF7  61                 	db	97	;'a'
  1698  007FF8  6F                 	db	111	;'o'
  1699  007FF9  00                 	db	0
  1700  007FFA                     STR_5:
  1701  007FFA  4F                 	db	79	;'O'
  1702  007FFB  4B                 	db	75	;'K'
  1703  007FFC  00                 	db	0
  1704  007FFD                     STR_13:
  1705  007FFD  3E                 	db	62	;'>'
  1706  007FFE  00                 	db	0
  1707  0000                     
  1708                           ; #config settings
  1709  007FFF  00                 	db	0	; dummy byte at the end
  1710  0000                     
  1711                           	psect	cinit
  1712  007722                     __pcinit:
  1713                           	opt stack 0
  1714  007722                     start_initialization:
  1715                           	opt stack 0
  1716  007722                     __initialization:
  1717                           	opt stack 0
  1718                           
  1719                           ; Initialize objects allocated to BANK1 (4 bytes)
  1720                           ; load TBLPTR registers with __pidataBANK1
  1721  007722  0E01               	movlw	low __pidataBANK1
  1722  007724  6EF6               	movwf	tblptrl,c
  1723  007726  0E6B               	movlw	high __pidataBANK1
  1724  007728  6EF7               	movwf	tblptrh,c
  1725  00772A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1726  00772C  6EF8               	movwf	tblptru,c
  1727  00772E  EE01  F0C1         	lfsr	0,__pdataBANK1
  1728  007732  EE10 F004          	lfsr	1,4
  1729  007736                     copy_data0:
  1730  007736  0009               	tblrd		*+
  1731  007738  CFF5 FFEE          	movff	tablat,postinc0
  1732  00773C  50E5               	movf	postdec1,w,c
  1733  00773E  50E1               	movf	fsr1l,w,c
  1734  007740  E1FA               	bnz	copy_data0
  1735                           
  1736                           ; Initialize objects allocated to BANK0 (7 bytes)
  1737                           ; load TBLPTR registers with __pidataBANK0
  1738  007742  0E05               	movlw	low __pidataBANK0
  1739  007744  6EF6               	movwf	tblptrl,c
  1740  007746  0E6B               	movlw	high __pidataBANK0
  1741  007748  6EF7               	movwf	tblptrh,c
  1742  00774A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1743  00774C  6EF8               	movwf	tblptru,c
  1744  00774E  EE00  F0F9         	lfsr	0,__pdataBANK0
  1745  007752  EE10 F007          	lfsr	1,7
  1746  007756                     copy_data1:
  1747  007756  0009               	tblrd		*+
  1748  007758  CFF5 FFEE          	movff	tablat,postinc0
  1749  00775C  50E5               	movf	postdec1,w,c
  1750  00775E  50E1               	movf	fsr1l,w,c
  1751  007760  E1FA               	bnz	copy_data1
  1752                           
  1753                           ; Initialize objects allocated to COMRAM (2 bytes)
  1754                           ; load TBLPTR registers with __pidataCOMRAM
  1755  007762  0E06               	movlw	low __pidataCOMRAM
  1756  007764  6EF6               	movwf	tblptrl,c
  1757  007766  0E00               	movlw	high __pidataCOMRAM
  1758  007768  6EF7               	movwf	tblptrh,c
  1759  00776A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1760  00776C  6EF8               	movwf	tblptru,c
  1761  00776E  0009               	tblrd		*+	;fetch initializer
  1762  007770  CFF5 F07C          	movff	tablat,__pdataCOMRAM
  1763  007774  0009               	tblrd		*+	;fetch initializer
  1764  007776  CFF5 F07D          	movff	tablat,__pdataCOMRAM+1
  1765                           
  1766                           ; Clear objects allocated to BANK1 (193 bytes)
  1767  00777A  EE01  F000         	lfsr	0,__pbssBANK1
  1768  00777E  0EC1               	movlw	193
  1769  007780                     clear_0:
  1770  007780  6AEE               	clrf	postinc0,c
  1771  007782  06E8               	decf	wreg,f,c
  1772  007784  E1FD               	bnz	clear_0
  1773                           
  1774                           ; Clear objects allocated to BANK0 (30 bytes)
  1775  007786  EE00  F0DB         	lfsr	0,__pbssBANK0
  1776  00778A  0E1E               	movlw	30
  1777  00778C                     clear_1:
  1778  00778C  6AEE               	clrf	postinc0,c
  1779  00778E  06E8               	decf	wreg,f,c
  1780  007790  E1FD               	bnz	clear_1
  1781                           
  1782                           ; Clear objects allocated to COMRAM (56 bytes)
  1783  007792  EE00  F044         	lfsr	0,__pbssCOMRAM
  1784  007796  0E38               	movlw	56
  1785  007798                     clear_2:
  1786  007798  6AEE               	clrf	postinc0,c
  1787  00779A  06E8               	decf	wreg,f,c
  1788  00779C  E1FD               	bnz	clear_2
  1789  00779E                     end_of_initialization:
  1790                           	opt stack 0
  1791  00779E                     __end_of__initialization:
  1792                           	opt stack 0
  1793  00779E  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1794  0077A0  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1795  0077A2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1796  0077A4  6EF8               	movwf	tblptru,c
  1797  0077A6  0100               	movlb	0
  1798  0077A8  EF0E  F007         	goto	_main	;jump to C main() function
  1799                           tblptru	equ	0xFF8
  1800                           tblptrh	equ	0xFF7
  1801                           tblptrl	equ	0xFF6
  1802                           tablat	equ	0xFF5
  1803                           postinc0	equ	0xFEE
  1804                           wreg	equ	0xFE8
  1805                           postdec1	equ	0xFE5
  1806                           fsr1l	equ	0xFE1
  1807                           
  1808                           	psect	bssCOMRAM
  1809  000044                     __pbssCOMRAM:
  1810                           	opt stack 0
  1811  000044                     _shift:
  1812                           	opt stack 0
  1813  000044                     	ds	8
  1814  00004C                     _etapaComunicacao:
  1815                           	opt stack 0
  1816  00004C                     	ds	2
  1817  00004E                     _dtl_posi_visualizar:
  1818                           	opt stack 0
  1819  00004E                     	ds	1
  1820  00004F                     _totalLogs:
  1821                           	opt stack 0
  1822  00004F                     	ds	1
  1823  000050                     _dtl_carregar_log:
  1824                           	opt stack 0
  1825  000050                     	ds	1
  1826  000051                     _dtl_estacionaria:
  1827                           	opt stack 0
  1828  000051                     	ds	1
  1829  000052                     _dtl_principal:
  1830                           	opt stack 0
  1831  000052                     	ds	1
  1832  000053                     _dtl_jockey:
  1833                           	opt stack 0
  1834  000053                     	ds	1
  1835  000054                     _dtl_min:
  1836                           	opt stack 0
  1837  000054                     	ds	1
  1838  000055                     _dtl_hora:
  1839                           	opt stack 0
  1840  000055                     	ds	1
  1841  000056                     _dtl_ano:
  1842                           	opt stack 0
  1843  000056                     	ds	1
  1844  000057                     _dtl_mes:
  1845                           	opt stack 0
  1846  000057                     	ds	1
  1847  000058                     _dtl_dia:
  1848                           	opt stack 0
  1849  000058                     	ds	1
  1850  000059                     __b_ok:
  1851                           	opt stack 0
  1852  000059                     	ds	1
  1853  00005A                     _flag_b_ok:
  1854                           	opt stack 0
  1855  00005A                     	ds	1
  1856  00005B                     __b_mais:
  1857                           	opt stack 0
  1858  00005B                     	ds	1
  1859  00005C                     _flag_b_mais:
  1860                           	opt stack 0
  1861  00005C                     	ds	1
  1862  00005D                     __b_menos:
  1863                           	opt stack 0
  1864  00005D                     	ds	1
  1865  00005E                     _flag_b_menos:
  1866                           	opt stack 0
  1867  00005E                     	ds	1
  1868  00005F                     __b_esc:
  1869                           	opt stack 0
  1870  00005F                     	ds	1
  1871  000060                     _flag_b_esc:
  1872                           	opt stack 0
  1873  000060                     	ds	1
  1874  000061                     __ultimoEstado:
  1875                           	opt stack 0
  1876  000061                     	ds	1
  1877  000062                     _cbf:
  1878                           	opt stack 0
  1879  000062                     	ds	1
  1880  000063                     _blinkk:
  1881                           	opt stack 0
  1882  000063                     	ds	1
  1883  000064                     _ajst_rtc:
  1884                           	opt stack 0
  1885  000064                     	ds	1
  1886  000065                     _tela_menu_posi:
  1887                           	opt stack 0
  1888  000065                     	ds	1
  1889  000066                     _sub_menu_posi:
  1890                           	opt stack 0
  1891  000066                     	ds	1
  1892  000067                     _tempo_limite_teste_estacionaria:
  1893                           	opt stack 0
  1894  000067                     	ds	1
  1895  000068                     _tempo_limite_partida:
  1896                           	opt stack 0
  1897  000068                     	ds	1
  1898  000069                     _tempo_partida:
  1899                           	opt stack 0
  1900  000069                     	ds	1
  1901  00006A                     _qtd_leitura:
  1902                           	opt stack 0
  1903  00006A                     	ds	1
  1904  00006B                     __sec_aux:
  1905                           	opt stack 0
  1906  00006B                     	ds	1
  1907  00006C                     __sec_partida:
  1908                           	opt stack 0
  1909  00006C                     	ds	1
  1910  00006D                     _base_sec:
  1911                           	opt stack 0
  1912  00006D                     	ds	1
  1913  00006E                     _etapaTesteBombas:
  1914                           	opt stack 0
  1915  00006E                     	ds	1
  1916  00006F                     _habilitaTesteAutomatico:
  1917                           	opt stack 0
  1918  00006F                     	ds	1
  1919  000070                     _flagMudancaEstadoSaidas:
  1920                           	opt stack 0
  1921  000070                     	ds	1
  1922  000071                     _flagErroTransdutor:
  1923                           	opt stack 0
  1924  000071                     	ds	1
  1925  000072                     _flagTexto:
  1926                           	opt stack 0
  1927  000072                     	ds	1
  1928  000073                     _timerTrocarTextoLcd:
  1929                           	opt stack 0
  1930  000073                     	ds	1
  1931  000074                     _tentativasVerificarGSM:
  1932                           	opt stack 0
  1933  000074                     	ds	1
  1934  000075                     _rtc:
  1935                           	opt stack 0
  1936  000075                     	ds	7
  1937                           tblptru	equ	0xFF8
  1938                           tblptrh	equ	0xFF7
  1939                           tblptrl	equ	0xFF6
  1940                           tablat	equ	0xFF5
  1941                           postinc0	equ	0xFEE
  1942                           wreg	equ	0xFE8
  1943                           postdec1	equ	0xFE5
  1944                           fsr1l	equ	0xFE1
  1945                           
  1946                           	psect	dataCOMRAM
  1947  00007C                     __pdataCOMRAM:
  1948                           	opt stack 0
  1949  00007C                     _timerAtualizacaoLCD:
  1950                           	opt stack 0
  1951  00007C                     	ds	1
  1952  00007D                     _intensidadeSinal:
  1953                           	opt stack 0
  1954  00007D                     	ds	1
  1955                           tblptru	equ	0xFF8
  1956                           tblptrh	equ	0xFF7
  1957                           tblptrl	equ	0xFF6
  1958                           tablat	equ	0xFF5
  1959                           postinc0	equ	0xFEE
  1960                           wreg	equ	0xFE8
  1961                           postdec1	equ	0xFE5
  1962                           fsr1l	equ	0xFE1
  1963                           
  1964                           	psect	bssBANK0
  1965  0000DB                     __pbssBANK0:
  1966                           	opt stack 0
  1967  0000DB                     _timerTesteBombas:
  1968                           	opt stack 0
  1969  0000DB                     	ds	2
  1970  0000DD                     _ajust_tel:
  1971                           	opt stack 0
  1972  0000DD                     	ds	1
  1973  0000DE                     _tel_posi:
  1974                           	opt stack 0
  1975  0000DE                     	ds	1
  1976  0000DF                     __menu_posi:
  1977                           	opt stack 0
  1978  0000DF                     	ds	1
  1979  0000E0                     _menu_posi:
  1980                           	opt stack 0
  1981  0000E0                     	ds	1
  1982  0000E1                     _option_posi:
  1983                           	opt stack 0
  1984  0000E1                     	ds	1
  1985  0000E2                     _sp_estacionaria:
  1986                           	opt stack 0
  1987  0000E2                     	ds	1
  1988  0000E3                     _sp_principal:
  1989                           	opt stack 0
  1990  0000E3                     	ds	1
  1991  0000E4                     _sp_jockey:
  1992                           	opt stack 0
  1993  0000E4                     	ds	1
  1994  0000E5                     _sp_pressao_rede:
  1995                           	opt stack 0
  1996  0000E5                     	ds	1
  1997  0000E6                     _tempo_limite_estacionaria:
  1998                           	opt stack 0
  1999  0000E6                     	ds	1
  2000  0000E7                     _horario_de_teste:
  2001                           	opt stack 0
  2002  0000E7                     	ds	1
  2003  0000E8                     _dias_restante_teste:
  2004                           	opt stack 0
  2005  0000E8                     	ds	1
  2006  0000E9                     _intervalo_teste_dia:
  2007                           	opt stack 0
  2008  0000E9                     	ds	1
  2009  0000EA                     __ano:
  2010                           	opt stack 0
  2011  0000EA                     	ds	1
  2012  0000EB                     __mes:
  2013                           	opt stack 0
  2014  0000EB                     	ds	1
  2015  0000EC                     __dia:
  2016                           	opt stack 0
  2017  0000EC                     	ds	1
  2018  0000ED                     __hor:
  2019                           	opt stack 0
  2020  0000ED                     	ds	1
  2021  0000EE                     __min:
  2022                           	opt stack 0
  2023  0000EE                     	ds	1
  2024  0000EF                     __sec:
  2025                           	opt stack 0
  2026  0000EF                     	ds	1
  2027  0000F0                     _flagEstacionariaLigada:
  2028                           	opt stack 0
  2029  0000F0                     	ds	1
  2030  0000F1                     _executandoTeste:
  2031                           	opt stack 0
  2032  0000F1                     	ds	1
  2033  0000F2                     _ocorrendoIncendio:
  2034                           	opt stack 0
  2035  0000F2                     	ds	1
  2036  0000F3                     _codigoErro:
  2037                           	opt stack 0
  2038  0000F3                     	ds	1
  2039  0000F4                     _gsmOcupado:
  2040                           	opt stack 0
  2041  0000F4                     	ds	1
  2042  0000F5                     _timerIntervaloLigarBomba:
  2043                           	opt stack 0
  2044  0000F5                     	ds	1
  2045  0000F6                     _timerEtapaComunicacao:
  2046                           	opt stack 0
  2047  0000F6                     	ds	1
  2048  0000F7                     _timerReenvioSMS:
  2049                           	opt stack 0
  2050  0000F7                     	ds	1
  2051  0000F8                     _telefoneSelecionado:
  2052                           	opt stack 0
  2053  0000F8                     	ds	1
  2054                           tblptru	equ	0xFF8
  2055                           tblptrh	equ	0xFF7
  2056                           tblptrl	equ	0xFF6
  2057                           tablat	equ	0xFF5
  2058                           postinc0	equ	0xFEE
  2059                           wreg	equ	0xFE8
  2060                           postdec1	equ	0xFE5
  2061                           fsr1l	equ	0xFE1
  2062                           
  2063                           	psect	dataBANK0
  2064  0000F9                     __pdataBANK0:
  2065                           	opt stack 0
  2066  0000F9                     _pressao:
  2067                           	opt stack 0
  2068  0000F9                     	ds	2
  2069  0000FB                     _dtl_posicao:
  2070                           	opt stack 0
  2071  0000FB                     	ds	1
  2072  0000FC                     _status_estacionaria:
  2073                           	opt stack 0
  2074  0000FC                     	ds	1
  2075  0000FD                     _status_principal:
  2076                           	opt stack 0
  2077  0000FD                     	ds	1
  2078  0000FE                     _status_jockey:
  2079                           	opt stack 0
  2080  0000FE                     	ds	1
  2081  0000FF                     _timerVerificarSinal:
  2082                           	opt stack 0
  2083  0000FF                     	ds	1
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           postinc0	equ	0xFEE
  2089                           wreg	equ	0xFE8
  2090                           postdec1	equ	0xFE5
  2091                           fsr1l	equ	0xFE1
  2092                           
  2093                           	psect	bssBANK1
  2094  000100                     __pbssBANK1:
  2095                           	opt stack 0
  2096  000100                     __tensao:
  2097                           	opt stack 0
  2098  000100                     	ds	3
  2099  000103                     _horimetro:
  2100                           	opt stack 0
  2101  000103                     	ds	2
  2102  000105                     _bufferSerial:
  2103                           	opt stack 0
  2104  000105                     	ds	60
  2105  000141                     _line4:
  2106                           	opt stack 0
  2107  000141                     	ds	21
  2108  000156                     _line3:
  2109                           	opt stack 0
  2110  000156                     	ds	21
  2111  00016B                     _line2:
  2112                           	opt stack 0
  2113  00016B                     	ds	21
  2114  000180                     _line1:
  2115                           	opt stack 0
  2116  000180                     	ds	21
  2117  000195                     _bufferAUX:
  2118                           	opt stack 0
  2119  000195                     	ds	20
  2120  0001A9                     _tel2:
  2121                           	opt stack 0
  2122  0001A9                     	ds	12
  2123  0001B5                     _tel1:
  2124                           	opt stack 0
  2125  0001B5                     	ds	12
  2126                           tblptru	equ	0xFF8
  2127                           tblptrh	equ	0xFF7
  2128                           tblptrl	equ	0xFF6
  2129                           tablat	equ	0xFF5
  2130                           postinc0	equ	0xFEE
  2131                           wreg	equ	0xFE8
  2132                           postdec1	equ	0xFE5
  2133                           fsr1l	equ	0xFE1
  2134                           
  2135                           	psect	dataBANK1
  2136  0001C1                     __pdataBANK1:
  2137                           	opt stack 0
  2138  0001C1                     intToFloatStr@F2544:
  2139                           	opt stack 0
  2140  0001C1                     	ds	4
  2141                           tblptru	equ	0xFF8
  2142                           tblptrh	equ	0xFF7
  2143                           tblptrl	equ	0xFF6
  2144                           tablat	equ	0xFF5
  2145                           postinc0	equ	0xFEE
  2146                           wreg	equ	0xFE8
  2147                           postdec1	equ	0xFE5
  2148                           fsr1l	equ	0xFE1
  2149                           
  2150                           	psect	cstackBANK0
  2151  000080                     __pcstackBANK0:
  2152                           	opt stack 0
  2153  000080                     ??_isdigit:
  2154  000080                     ??_setShiftREG:
  2155  000080                     ??_I2C_Wait:
  2156  000080                     ?_strlen:
  2157                           	opt stack 0
  2158  000080                     ?_strchr:
  2159                           	opt stack 0
  2160  000080                     ?___wmul:
  2161                           	opt stack 0
  2162  000080                     ?___awdiv:
  2163                           	opt stack 0
  2164  000080                     ?___awmod:
  2165                           	opt stack 0
  2166  000080                     ?___lwdiv:
  2167                           	opt stack 0
  2168  000080                     ?___lldiv:
  2169                           	opt stack 0
  2170  000080                     putch@c:
  2171                           	opt stack 0
  2172  000080                     clearShiftREG@i:
  2173                           	opt stack 0
  2174  000080                     btPress@bt:
  2175                           	opt stack 0
  2176  000080                     Lcd_Port@a:
  2177                           	opt stack 0
  2178  000080                     BCDtoDEC@val:
  2179                           	opt stack 0
  2180  000080                     writeChar@hex:
  2181                           	opt stack 0
  2182  000080                     blink@line:
  2183                           	opt stack 0
  2184  000080                     delay@x:
  2185                           	opt stack 0
  2186  000080                     ___wmul@multiplier:
  2187                           	opt stack 0
  2188  000080                     ___awdiv@dividend:
  2189                           	opt stack 0
  2190  000080                     ___awmod@dividend:
  2191                           	opt stack 0
  2192  000080                     ___lwdiv@dividend:
  2193                           	opt stack 0
  2194  000080                     memset@p1:
  2195                           	opt stack 0
  2196  000080                     strlen@s:
  2197                           	opt stack 0
  2198  000080                     strchr@ptr:
  2199                           	opt stack 0
  2200  000080                     ___lldiv@dividend:
  2201                           	opt stack 0
  2202                           
  2203                           ; 4 bytes @ 0x0
  2204  000080                     	ds	1
  2205  000081                     ??_Lcd_Cmd:
  2206  000081                     ?_I2C_Read:
  2207                           	opt stack 0
  2208  000081                     setShiftREG@estado:
  2209                           	opt stack 0
  2210  000081                     Lcd_Write_Char@tempp:
  2211                           	opt stack 0
  2212  000081                     _isdigit$1874:
  2213                           	opt stack 0
  2214  000081                     I2C_Read@a:
  2215                           	opt stack 0
  2216                           
  2217                           ; 2 bytes @ 0x1
  2218  000081                     	ds	1
  2219  000082                     ??_delay:
  2220  000082                     ??_strlen:
  2221  000082                     setShiftREG@i:
  2222                           	opt stack 0
  2223  000082                     Lcd_Cmd@a:
  2224                           	opt stack 0
  2225  000082                     Lcd_Write_Char@y:
  2226                           	opt stack 0
  2227  000082                     blink@start:
  2228                           	opt stack 0
  2229  000082                     isdigit@c:
  2230                           	opt stack 0
  2231  000082                     ___wmul@multiplicand:
  2232                           	opt stack 0
  2233  000082                     ___awdiv@divisor:
  2234                           	opt stack 0
  2235  000082                     ___awmod@divisor:
  2236                           	opt stack 0
  2237  000082                     ___lwdiv@divisor:
  2238                           	opt stack 0
  2239  000082                     memset@c:
  2240                           	opt stack 0
  2241  000082                     strchr@chr:
  2242                           	opt stack 0
  2243                           
  2244                           ; 2 bytes @ 0x2
  2245  000082                     	ds	1
  2246  000083                     ??_Lcd_Init:
  2247  000083                     partidaBombaEstacionaria@acao:
  2248                           	opt stack 0
  2249  000083                     Lcd_Set_Cursor@b:
  2250                           	opt stack 0
  2251  000083                     Lcd_Write_Char@a:
  2252                           	opt stack 0
  2253  000083                     blink@end:
  2254                           	opt stack 0
  2255  000083                     I2C_Read@temp:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0x3
  2259  000083                     	ds	1
  2260  000084                     ??_criarCaracteresCGRAM:
  2261  000084                     Lcd_Set_Cursor@a:
  2262                           	opt stack 0
  2263  000084                     blink@i:
  2264                           	opt stack 0
  2265  000084                     ___awdiv@counter:
  2266                           	opt stack 0
  2267  000084                     ___awmod@counter:
  2268                           	opt stack 0
  2269  000084                     Lcd_Write_String@a:
  2270                           	opt stack 0
  2271  000084                     ___wmul@product:
  2272                           	opt stack 0
  2273  000084                     ___lwdiv@quotient:
  2274                           	opt stack 0
  2275  000084                     memset@n:
  2276                           	opt stack 0
  2277  000084                     strlen@cp:
  2278                           	opt stack 0
  2279  000084                     ___lldiv@divisor:
  2280                           	opt stack 0
  2281                           
  2282                           ; 4 bytes @ 0x4
  2283  000084                     	ds	1
  2284  000085                     Lcd_Set_Cursor@z:
  2285                           	opt stack 0
  2286  000085                     ___awdiv@sign:
  2287                           	opt stack 0
  2288  000085                     ___awmod@sign:
  2289                           	opt stack 0
  2290                           
  2291                           ; 1 bytes @ 0x5
  2292  000085                     	ds	1
  2293  000086                     ?_strncmp:
  2294                           	opt stack 0
  2295  000086                     Lcd_Set_Cursor@y:
  2296                           	opt stack 0
  2297  000086                     Lcd_Write_String@i:
  2298                           	opt stack 0
  2299  000086                     ___lwdiv@counter:
  2300                           	opt stack 0
  2301  000086                     ___awdiv@quotient:
  2302                           	opt stack 0
  2303  000086                     memset@p:
  2304                           	opt stack 0
  2305  000086                     strncmp@s1:
  2306                           	opt stack 0
  2307                           
  2308                           ; 2 bytes @ 0x6
  2309  000086                     	ds	1
  2310  000087                     ?___lwmod:
  2311                           	opt stack 0
  2312  000087                     Lcd_Set_Cursor@temp:
  2313                           	opt stack 0
  2314  000087                     ___lwmod@dividend:
  2315                           	opt stack 0
  2316  000087                     criarCaracteresCGRAM@character:
  2317                           	opt stack 0
  2318                           
  2319                           ; 48 bytes @ 0x7
  2320  000087                     	ds	1
  2321  000088                     DECtoBCD@val:
  2322                           	opt stack 0
  2323  000088                     atualizarLCD@line1:
  2324                           	opt stack 0
  2325  000088                     strncmp@s2:
  2326                           	opt stack 0
  2327  000088                     ___lldiv@quotient:
  2328                           	opt stack 0
  2329                           
  2330                           ; 4 bytes @ 0x8
  2331  000088                     	ds	1
  2332  000089                     DECtoBCD@res:
  2333                           	opt stack 0
  2334  000089                     ___lwmod@divisor:
  2335                           	opt stack 0
  2336                           
  2337                           ; 2 bytes @ 0x9
  2338  000089                     	ds	1
  2339  00008A                     atualizarLCD@line2:
  2340                           	opt stack 0
  2341  00008A                     I2C_Write@d:
  2342                           	opt stack 0
  2343  00008A                     strncmp@len:
  2344                           	opt stack 0
  2345                           
  2346                           ; 2 bytes @ 0xA
  2347  00008A                     	ds	1
  2348  00008B                     ___lwmod@counter:
  2349                           	opt stack 0
  2350                           
  2351                           ; 1 bytes @ 0xB
  2352  00008B                     	ds	1
  2353  00008C                     ??_strncmp:
  2354  00008C                     ?__doprnt:
  2355                           	opt stack 0
  2356  00008C                     writeEEPROM_ext@data:
  2357                           	opt stack 0
  2358  00008C                     readEEPROM_ext@adress:
  2359                           	opt stack 0
  2360  00008C                     ___lldiv@counter:
  2361                           	opt stack 0
  2362  00008C                     setDS1307TimeDate@ptrToUserVal:
  2363                           	opt stack 0
  2364  00008C                     getDS1307TimeDate@ptrToUserVal:
  2365                           	opt stack 0
  2366  00008C                     atualizarLCD@line3:
  2367                           	opt stack 0
  2368  00008C                     __doprnt@pb:
  2369                           	opt stack 0
  2370                           
  2371                           ; 2 bytes @ 0xC
  2372  00008C                     	ds	1
  2373  00008D                     writeEEPROM_ext@adress:
  2374                           	opt stack 0
  2375  00008D                     readEEPROM_ext@data:
  2376                           	opt stack 0
  2377  00008D                     I2C_Master_Init@c:
  2378                           	opt stack 0
  2379                           
  2380                           ; 4 bytes @ 0xD
  2381  00008D                     	ds	1
  2382  00008E                     ??_setDS1307TimeDate:
  2383  00008E                     ??_salvarLOG:
  2384  00008E                     ?_readEEPROM16_ext:
  2385                           	opt stack 0
  2386  00008E                     atualizarLCD@line4:
  2387                           	opt stack 0
  2388  00008E                     __doprnt@f:
  2389                           	opt stack 0
  2390                           
  2391                           ; 2 bytes @ 0xE
  2392  00008E                     	ds	1
  2393  00008F                     ?_strstr:
  2394                           	opt stack 0
  2395  00008F                     salvarLOG@ultimoLogSalvo:
  2396                           	opt stack 0
  2397  00008F                     strstr@s1:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0xF
  2401  00008F                     	ds	1
  2402  000090                     ??_readEEPROM16_ext:
  2403  000090                     atualizarLCD@i:
  2404                           	opt stack 0
  2405  000090                     __doprnt@ap:
  2406                           	opt stack 0
  2407                           
  2408                           ; 2 bytes @ 0x10
  2409  000090                     	ds	1
  2410  000091                     ??_I2C_Master_Init:
  2411  000091                     readEEPROM16_ext@data:
  2412                           	opt stack 0
  2413  000091                     strstr@s2:
  2414                           	opt stack 0
  2415                           
  2416                           ; 2 bytes @ 0x11
  2417  000091                     	ds	1
  2418  000092                     ??__doprnt:
  2419                           
  2420                           ; 1 bytes @ 0x12
  2421  000092                     	ds	1
  2422  000093                     readEEPROM16_ext@adress:
  2423                           	opt stack 0
  2424  000093                     aguardaBuffer@str:
  2425                           	opt stack 0
  2426                           
  2427                           ; 2 bytes @ 0x13
  2428  000093                     	ds	1
  2429  000094                     lerParametros@verifica_memoria_nova:
  2430                           	opt stack 0
  2431                           
  2432                           ; 1 bytes @ 0x14
  2433  000094                     	ds	1
  2434  000095                     lerParametros@i:
  2435                           	opt stack 0
  2436                           
  2437                           ; 1 bytes @ 0x15
  2438  000095                     	ds	1
  2439  000096                     __doprnt@prec:
  2440                           	opt stack 0
  2441                           
  2442                           ; 1 bytes @ 0x16
  2443  000096                     	ds	1
  2444  000097                     __doprnt@val:
  2445                           	opt stack 0
  2446                           
  2447                           ; 2 bytes @ 0x17
  2448  000097                     	ds	2
  2449  000099                     __doprnt@len:
  2450                           	opt stack 0
  2451                           
  2452                           ; 2 bytes @ 0x19
  2453  000099                     	ds	2
  2454  00009B                     __doprnt@flag:
  2455                           	opt stack 0
  2456                           
  2457                           ; 1 bytes @ 0x1B
  2458  00009B                     	ds	1
  2459  00009C                     __doprnt@cp:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x1C
  2463  00009C                     	ds	2
  2464  00009E                     __doprnt@width:
  2465                           	opt stack 0
  2466                           
  2467                           ; 2 bytes @ 0x1E
  2468  00009E                     	ds	2
  2469  0000A0                     __doprnt@c:
  2470                           	opt stack 0
  2471                           
  2472                           ; 1 bytes @ 0x20
  2473  0000A0                     	ds	1
  2474  0000A1                     ?_sprintf:
  2475                           	opt stack 0
  2476  0000A1                     ?_printf:
  2477                           	opt stack 0
  2478  0000A1                     printf@f:
  2479                           	opt stack 0
  2480  0000A1                     sprintf@wh:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0x21
  2484  0000A1                     	ds	2
  2485  0000A3                     sprintf@f:
  2486                           	opt stack 0
  2487                           
  2488                           ; 2 bytes @ 0x23
  2489  0000A3                     	ds	12
  2490  0000AF                     sprintf@ap:
  2491                           	opt stack 0
  2492                           
  2493                           ; 2 bytes @ 0x2F
  2494  0000AF                     	ds	2
  2495  0000B1                     sprintf@pb:
  2496                           	opt stack 0
  2497                           
  2498                           ; 4 bytes @ 0x31
  2499  0000B1                     	ds	4
  2500  0000B5                     ??_tela_testeBombas:
  2501  0000B5                     ??_dataLoger:
  2502  0000B5                     ?_intToFloatStr:
  2503                           	opt stack 0
  2504  0000B5                     ?_getSerial:
  2505                           	opt stack 0
  2506  0000B5                     getSerial@str:
  2507                           	opt stack 0
  2508  0000B5                     printf@ap:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0x35
  2512  0000B5                     	ds	2
  2513  0000B7                     getSerial@end:
  2514                           	opt stack 0
  2515  0000B7                     _criarCaracteresCGRAM$1387:
  2516                           	opt stack 0
  2517  0000B7                     _tela_testeBombas$1431:
  2518                           	opt stack 0
  2519  0000B7                     intToFloatStr@end:
  2520                           	opt stack 0
  2521  0000B7                     printf@pb:
  2522                           	opt stack 0
  2523                           
  2524                           ; 4 bytes @ 0x37
  2525  0000B7                     	ds	1
  2526  0000B8                     ??_getSerial:
  2527                           
  2528                           ; 1 bytes @ 0x38
  2529  0000B8                     	ds	1
  2530  0000B9                     criarCaracteresCGRAM@k:
  2531                           	opt stack 0
  2532                           
  2533                           ; 1 bytes @ 0x39
  2534  0000B9                     	ds	1
  2535  0000BA                     criarCaracteresCGRAM@j:
  2536                           	opt stack 0
  2537  0000BA                     getSerial@length:
  2538                           	opt stack 0
  2539  0000BA                     _dataLoger$1450:
  2540                           	opt stack 0
  2541                           
  2542                           ; 2 bytes @ 0x3A
  2543  0000BA                     	ds	1
  2544  0000BB                     ??_comunicarTeste:
  2545  0000BB                     ??_enviaSMS:
  2546  0000BB                     criarCaracteresCGRAM@i:
  2547                           	opt stack 0
  2548  0000BB                     intToFloatStr@conv:
  2549                           	opt stack 0
  2550                           
  2551                           ; 4 bytes @ 0x3B
  2552  0000BB                     	ds	1
  2553  0000BC                     getSerial@i:
  2554                           	opt stack 0
  2555  0000BC                     _dataLoger$1456:
  2556                           	opt stack 0
  2557                           
  2558                           ; 2 bytes @ 0x3C
  2559  0000BC                     	ds	1
  2560  0000BD                     getSerial@ret:
  2561                           	opt stack 0
  2562  0000BD                     _comunicarTeste$1196:
  2563                           	opt stack 0
  2564  0000BD                     _enviaSMS$1211:
  2565                           	opt stack 0
  2566                           
  2567                           ; 2 bytes @ 0x3D
  2568  0000BD                     	ds	1
  2569  0000BE                     _dataLoger$1461:
  2570                           	opt stack 0
  2571                           
  2572                           ; 2 bytes @ 0x3E
  2573  0000BE                     	ds	1
  2574  0000BF                     ??_configuraTelefones:
  2575  0000BF                     ?_atoi:
  2576                           	opt stack 0
  2577  0000BF                     intToFloatStr@valor:
  2578                           	opt stack 0
  2579  0000BF                     _enviaSMS$1224:
  2580                           	opt stack 0
  2581  0000BF                     atoi@s:
  2582                           	opt stack 0
  2583                           
  2584                           ; 2 bytes @ 0x3F
  2585  0000BF                     	ds	1
  2586  0000C0                     dataLoger@logs:
  2587                           	opt stack 0
  2588  0000C0                     intToFloatStr@pr:
  2589                           	opt stack 0
  2590                           
  2591                           ; 2 bytes @ 0x40
  2592  0000C0                     	ds	1
  2593  0000C1                     ??_atoi:
  2594  0000C1                     _enviaSMS$1225:
  2595                           	opt stack 0
  2596  0000C1                     _configuraTelefones$1476:
  2597                           	opt stack 0
  2598                           
  2599                           ; 2 bytes @ 0x41
  2600  0000C1                     	ds	1
  2601  0000C2                     _telaPrincipal$2382:
  2602                           	opt stack 0
  2603  0000C2                     _ajusteSP_Bombas$2383:
  2604                           	opt stack 0
  2605                           
  2606                           ; 2 bytes @ 0x42
  2607  0000C2                     	ds	1
  2608  0000C3                     configuraTelefones@i:
  2609                           	opt stack 0
  2610  0000C3                     atoi@sign:
  2611                           	opt stack 0
  2612  0000C3                     _enviaSMS$1226:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0x43
  2616  0000C3                     	ds	1
  2617  0000C4                     atoi@a:
  2618                           	opt stack 0
  2619                           
  2620                           ; 2 bytes @ 0x44
  2621  0000C4                     	ds	1
  2622  0000C5                     _enviaSMS$1231:
  2623                           	opt stack 0
  2624                           
  2625                           ; 2 bytes @ 0x45
  2626  0000C5                     	ds	1
  2627  0000C6                     ??_getSinalSIM800L:
  2628                           
  2629                           ; 1 bytes @ 0x46
  2630  0000C6                     	ds	1
  2631  0000C7                     enviaSMS@tipo:
  2632                           	opt stack 0
  2633                           
  2634                           ; 1 bytes @ 0x47
  2635  0000C7                     	ds	1
  2636  0000C8                     ??_acaoBombas:
  2637  0000C8                     ??_acaoTesteBombas:
  2638  0000C8                     getSinalSIM800L@sinal:
  2639                           	opt stack 0
  2640                           
  2641                           ; 2 bytes @ 0x48
  2642  0000C8                     	ds	5
  2643  0000CD                     _acaoTesteBombas$2381:
  2644                           	opt stack 0
  2645                           
  2646                           ; 2 bytes @ 0x4D
  2647  0000CD                     	ds	2
  2648  0000CF                     _acaoTesteBombas$1298:
  2649                           	opt stack 0
  2650                           
  2651                           ; 2 bytes @ 0x4F
  2652  0000CF                     	ds	2
  2653  0000D1                     _acaoTesteBombas$1310:
  2654                           	opt stack 0
  2655                           
  2656                           ; 2 bytes @ 0x51
  2657  0000D1                     	ds	2
  2658  0000D3                     _acaoTesteBombas$1318:
  2659                           	opt stack 0
  2660                           
  2661                           ; 2 bytes @ 0x53
  2662  0000D3                     	ds	2
  2663  0000D5                     _acaoTesteBombas$1323:
  2664                           	opt stack 0
  2665                           
  2666                           ; 2 bytes @ 0x55
  2667  0000D5                     	ds	2
  2668  0000D7                     _acaoTesteBombas$1328:
  2669                           	opt stack 0
  2670                           
  2671                           ; 2 bytes @ 0x57
  2672  0000D7                     	ds	2
  2673  0000D9                     acaoTesteBombas@intervalo:
  2674                           	opt stack 0
  2675                           
  2676                           ; 1 bytes @ 0x59
  2677  0000D9                     	ds	1
  2678  0000DA                     acaoTesteBombas@i:
  2679                           	opt stack 0
  2680                           
  2681                           ; 1 bytes @ 0x5A
  2682  0000DA                     	ds	1
  2683  0000DB                     tblptru	equ	0xFF8
  2684                           tblptrh	equ	0xFF7
  2685                           tblptrl	equ	0xFF6
  2686                           tablat	equ	0xFF5
  2687                           postinc0	equ	0xFEE
  2688                           wreg	equ	0xFE8
  2689                           postdec1	equ	0xFE5
  2690                           fsr1l	equ	0xFE1
  2691                           
  2692                           ; 1 bytes @ 0x5B
  2693                           
  2694                           	psect	cstackCOMRAM
  2695  000001                     __pcstackCOMRAM:
  2696                           	opt stack 0
  2697  000001                     ??i2_I2C_Wait:
  2698  000001                     ?_readADC:
  2699                           	opt stack 0
  2700  000001                     ?___ftpack:
  2701                           	opt stack 0
  2702  000001                     i2BCDtoDEC@val:
  2703                           	opt stack 0
  2704  000001                     i2delay@x:
  2705                           	opt stack 0
  2706  000001                     ___ftpack@arg:
  2707                           	opt stack 0
  2708  000001                     ___ftge@ff1:
  2709                           	opt stack 0
  2710                           
  2711                           ; 3 bytes @ 0x0
  2712  000001                     	ds	1
  2713  000002                     ?i2_I2C_Read:
  2714                           	opt stack 0
  2715  000002                     i2I2C_Write@d:
  2716                           	opt stack 0
  2717  000002                     i2I2C_Read@a:
  2718                           	opt stack 0
  2719                           
  2720                           ; 2 bytes @ 0x1
  2721  000002                     	ds	1
  2722  000003                     ??_readADC:
  2723  000003                     ??i2_delay:
  2724                           
  2725                           ; 1 bytes @ 0x2
  2726  000003                     	ds	1
  2727  000004                     ___ftpack@exp:
  2728                           	opt stack 0
  2729  000004                     i2writeEEPROM_ext@data:
  2730                           	opt stack 0
  2731  000004                     i2I2C_Read@temp:
  2732                           	opt stack 0
  2733  000004                     ___ftge@ff2:
  2734                           	opt stack 0
  2735                           
  2736                           ; 3 bytes @ 0x3
  2737  000004                     	ds	1
  2738  000005                     ___ftpack@sign:
  2739                           	opt stack 0
  2740  000005                     i2writeEEPROM_ext@adress:
  2741                           	opt stack 0
  2742                           
  2743                           ; 1 bytes @ 0x4
  2744  000005                     	ds	1
  2745  000006                     ??___ftpack:
  2746  000006                     writeEEPROM16_ext@data:
  2747                           	opt stack 0
  2748  000006                     i2getDS1307TimeDate@ptrToUserVal:
  2749                           	opt stack 0
  2750                           
  2751                           ; 2 bytes @ 0x5
  2752  000006                     	ds	1
  2753  000007                     ??___ftge:
  2754                           
  2755                           ; 1 bytes @ 0x6
  2756  000007                     	ds	1
  2757  000008                     writeEEPROM16_ext@adress:
  2758                           	opt stack 0
  2759                           
  2760                           ; 1 bytes @ 0x7
  2761  000008                     	ds	1
  2762  000009                     ?___lwtoft:
  2763                           	opt stack 0
  2764  000009                     _timer$1331:
  2765                           	opt stack 0
  2766  000009                     ___lwtoft@c:
  2767                           	opt stack 0
  2768                           
  2769                           ; 2 bytes @ 0x8
  2770  000009                     	ds	2
  2771  00000B                     _timer$1332:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0xA
  2775  00000B                     	ds	1
  2776  00000C                     ?___ftmul:
  2777                           	opt stack 0
  2778  00000C                     ___ftmul@f1:
  2779                           	opt stack 0
  2780                           
  2781                           ; 3 bytes @ 0xB
  2782  00000C                     	ds	1
  2783  00000D                     _timer$1333:
  2784                           	opt stack 0
  2785                           
  2786                           ; 2 bytes @ 0xC
  2787  00000D                     	ds	2
  2788  00000F                     _timer$1334:
  2789                           	opt stack 0
  2790  00000F                     ___ftmul@f2:
  2791                           	opt stack 0
  2792                           
  2793                           ; 3 bytes @ 0xE
  2794  00000F                     	ds	2
  2795  000011                     _timer$1335:
  2796                           	opt stack 0
  2797                           
  2798                           ; 2 bytes @ 0x10
  2799  000011                     	ds	1
  2800  000012                     ??___ftmul:
  2801                           
  2802                           ; 1 bytes @ 0x11
  2803  000012                     	ds	1
  2804  000013                     _timer$1336:
  2805                           	opt stack 0
  2806                           
  2807                           ; 2 bytes @ 0x12
  2808  000013                     	ds	2
  2809  000015                     ___ftmul@exp:
  2810                           	opt stack 0
  2811                           
  2812                           ; 1 bytes @ 0x14
  2813  000015                     	ds	1
  2814  000016                     ___ftmul@f3_as_product:
  2815                           	opt stack 0
  2816                           
  2817                           ; 3 bytes @ 0x15
  2818  000016                     	ds	3
  2819  000019                     ___ftmul@cntr:
  2820                           	opt stack 0
  2821                           
  2822                           ; 1 bytes @ 0x18
  2823  000019                     	ds	1
  2824  00001A                     ___ftmul@sign:
  2825                           	opt stack 0
  2826                           
  2827                           ; 1 bytes @ 0x19
  2828  00001A                     	ds	1
  2829  00001B                     ?___ftadd:
  2830                           	opt stack 0
  2831  00001B                     ?___ftdiv:
  2832                           	opt stack 0
  2833  00001B                     ?___fttol:
  2834                           	opt stack 0
  2835  00001B                     ___ftadd@f1:
  2836                           	opt stack 0
  2837  00001B                     ___ftdiv@f1:
  2838                           	opt stack 0
  2839  00001B                     ___fttol@f1:
  2840                           	opt stack 0
  2841                           
  2842                           ; 3 bytes @ 0x1A
  2843  00001B                     	ds	3
  2844  00001E                     ___ftadd@f2:
  2845                           	opt stack 0
  2846  00001E                     ___ftdiv@f2:
  2847                           	opt stack 0
  2848                           
  2849                           ; 3 bytes @ 0x1D
  2850  00001E                     	ds	1
  2851  00001F                     ??___fttol:
  2852                           
  2853                           ; 1 bytes @ 0x1E
  2854  00001F                     	ds	2
  2855  000021                     ??___ftadd:
  2856  000021                     ??___ftdiv:
  2857                           
  2858                           ; 1 bytes @ 0x20
  2859  000021                     	ds	3
  2860  000024                     ___ftadd@sign:
  2861                           	opt stack 0
  2862  000024                     ___ftdiv@cntr:
  2863                           	opt stack 0
  2864  000024                     ___fttol@sign1:
  2865                           	opt stack 0
  2866                           
  2867                           ; 1 bytes @ 0x23
  2868  000024                     	ds	1
  2869  000025                     ___ftadd@exp2:
  2870                           	opt stack 0
  2871  000025                     ___ftdiv@f3:
  2872                           	opt stack 0
  2873  000025                     ___fttol@lval:
  2874                           	opt stack 0
  2875                           
  2876                           ; 4 bytes @ 0x24
  2877  000025                     	ds	1
  2878  000026                     ___ftadd@exp1:
  2879                           	opt stack 0
  2880                           
  2881                           ; 1 bytes @ 0x25
  2882  000026                     	ds	2
  2883  000028                     ___ftdiv@exp:
  2884                           	opt stack 0
  2885                           
  2886                           ; 1 bytes @ 0x27
  2887  000028                     	ds	1
  2888  000029                     ___ftdiv@sign:
  2889                           	opt stack 0
  2890  000029                     ___fttol@exp1:
  2891                           	opt stack 0
  2892                           
  2893                           ; 1 bytes @ 0x28
  2894  000029                     	ds	1
  2895  00002A                     lerTransdutor@i:
  2896                           	opt stack 0
  2897                           
  2898                           ; 1 bytes @ 0x29
  2899  00002A                     	ds	1
  2900  00002B                     lerTransdutor@_pressao:
  2901                           	opt stack 0
  2902                           
  2903                           ; 3 bytes @ 0x2A
  2904  00002B                     	ds	3
  2905  00002E                     lerTransdutor@tensao:
  2906                           	opt stack 0
  2907                           
  2908                           ; 3 bytes @ 0x2D
  2909  00002E                     	ds	3
  2910  000031                     ??_TIMER:
  2911                           
  2912                           ; 1 bytes @ 0x30
  2913  000031                     	ds	18
  2914  000043                     TIMER@c:
  2915                           	opt stack 0
  2916                           
  2917                           ; 1 bytes @ 0x42
  2918  000043                     	ds	1
  2919                           tblptru	equ	0xFF8
  2920                           tblptrh	equ	0xFF7
  2921                           tblptrl	equ	0xFF6
  2922                           tablat	equ	0xFF5
  2923                           postinc0	equ	0xFEE
  2924                           wreg	equ	0xFE8
  2925                           postdec1	equ	0xFE5
  2926                           fsr1l	equ	0xFE1
  2927                           
  2928 ;;
  2929 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2930 ;;
  2931 ;; *************** function _main *****************
  2932 ;; Defined at:
  2933 ;;		line 64 in file "Main.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;		None
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;		None
  2938 ;; Return value:  Size  Location     Type
  2939 ;;                  1    wreg      void 
  2940 ;; Registers used:
  2941 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2947 ;;      Params:         0       0       0       0       0       0       0
  2948 ;;      Locals:         0       0       0       0       0       0       0
  2949 ;;      Temps:          0       0       0       0       0       0       0
  2950 ;;      Totals:         0       0       0       0       0       0       0
  2951 ;;Total ram usage:        0 bytes
  2952 ;; Hardware stack levels required when called:   11
  2953 ;; This function calls:
  2954 ;;		_I2C_Master_Init
  2955 ;;		_Lcd_Clear
  2956 ;;		_Lcd_Init
  2957 ;;		_RTC_Init
  2958 ;;		_acaoBombas
  2959 ;;		_acaoTesteBombas
  2960 ;;		_ajusteSP_Bombas
  2961 ;;		_atualizarLCD
  2962 ;;		_btPress
  2963 ;;		_configuraRegistradores
  2964 ;;		_configuraTelefones
  2965 ;;		_configurarEstacionaria
  2966 ;;		_criarCaracteresCGRAM
  2967 ;;		_dataLoger
  2968 ;;		_delay
  2969 ;;		_getDS1307TimeDate
  2970 ;;		_getSinalSIM800L
  2971 ;;		_informacoes
  2972 ;;		_lerParametros
  2973 ;;		_setShiftREG
  2974 ;;		_sprintf
  2975 ;;		_telaPrincipal
  2976 ;;		_tela_ajusteRTC
  2977 ;;		_tela_testeBombas
  2978 ;;		_verificarIntervaloTesteBombas
  2979 ;; This function is called by:
  2980 ;;		Startup code after reset
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text0
  2985  000E1C                     __ptext0:
  2986                           	opt stack 0
  2987  000E1C                     _main:
  2988                           	opt stack 0
  2989  000E1C  FFFF               	dw	65535	; assembler added errata NOP
  2990                           
  2991                           ;Main.c: 66: configuraRegistradores();
  2992                           
  2993                           ;incstack = 0
  2994  000E1E  EC97  F039         	call	_configuraRegistradores	;wreg free
  2995                           
  2996                           ;Main.c: 67: I2C_Master_Init(100000);
  2997  000E22  0EA0               	movlw	160
  2998  000E24  0100               	movlb	0	; () banked
  2999  000E26  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3000  000E28  0E86               	movlw	134
  3001  000E2A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3002  000E2C  0E01               	movlw	1
  3003  000E2E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3004  000E30  0E00               	movlw	0
  3005  000E32  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3006  000E34  EC23  F03A         	call	_I2C_Master_Init	;wreg free
  3007                           
  3008                           ;Main.c: 68: delay(200);
  3009  000E38  0E00               	movlw	0
  3010  000E3A  0100               	movlb	0	; () banked
  3011  000E3C  6F81               	movwf	(delay@x+1)& (0+255),b
  3012  000E3E  0EC8               	movlw	200
  3013  000E40  6F80               	movwf	delay@x& (0+255),b
  3014  000E42  ECFB  F036         	call	_delay	;wreg free
  3015                           
  3016                           ;Main.c: 69: RTC_Init();
  3017  000E46  EC4C  F037         	call	_RTC_Init	;wreg free
  3018                           
  3019                           ;Main.c: 70: delay(100);
  3020  000E4A  0E00               	movlw	0
  3021  000E4C  0100               	movlb	0	; () banked
  3022  000E4E  6F81               	movwf	(delay@x+1)& (0+255),b
  3023  000E50  0E64               	movlw	100
  3024  000E52  6F80               	movwf	delay@x& (0+255),b
  3025  000E54  ECFB  F036         	call	_delay	;wreg free
  3026                           
  3027                           ;Main.c: 71: getDS1307TimeDate(&rtc);
  3028  000E58  0E75               	movlw	low _rtc
  3029  000E5A  0100               	movlb	0	; () banked
  3030  000E5C  6F8C               	movwf	getDS1307TimeDate@ptrToUserVal& (0+255),b
  3031  000E5E  0E00               	movlw	high _rtc
  3032  000E60  6F8D               	movwf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  3033  000E62  EC38  F018         	call	_getDS1307TimeDate	;wreg free
  3034                           
  3035                           ;Main.c: 72: Lcd_Init();
  3036  000E66  EC4D  F03B         	call	_Lcd_Init	;wreg free
  3037                           
  3038                           ;Main.c: 73: Lcd_Clear();
  3039  000E6A  ECBF  F035         	call	_Lcd_Clear	;wreg free
  3040                           
  3041                           ;Main.c: 74: criarCaracteresCGRAM();
  3042  000E6E  ECB8  F01D         	call	_criarCaracteresCGRAM	;wreg free
  3043                           
  3044                           ;Main.c: 75: delay(100);
  3045  000E72  0E00               	movlw	0
  3046  000E74  0100               	movlb	0	; () banked
  3047  000E76  6F81               	movwf	(delay@x+1)& (0+255),b
  3048  000E78  0E64               	movlw	100
  3049  000E7A  6F80               	movwf	delay@x& (0+255),b
  3050  000E7C  ECFB  F036         	call	_delay	;wreg free
  3051                           
  3052                           ;Main.c: 76: lerParametros();
  3053  000E80  ECD2  F018         	call	_lerParametros	;wreg free
  3054                           
  3055                           ;Main.c: 77: sprintf(line1, "TECHNOW");
  3056  000E84  0E80               	movlw	low _line1
  3057  000E86  0100               	movlb	0	; () banked
  3058  000E88  6FA1               	movwf	sprintf@wh& (0+255),b
  3059  000E8A  0E01               	movlw	high _line1
  3060  000E8C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3061  000E8E  0E9B               	movlw	low STR_90
  3062  000E90  6FA3               	movwf	sprintf@f& (0+255),b
  3063  000E92  0E7F               	movlw	high STR_90
  3064  000E94  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3065  000E96  ECDC  F01F         	call	_sprintf	;wreg free
  3066                           
  3067                           ;Main.c: 78: sprintf(line2, "Sistemas embarcados");
  3068  000E9A  0E6B               	movlw	low _line2
  3069  000E9C  0100               	movlb	0	; () banked
  3070  000E9E  6FA1               	movwf	sprintf@wh& (0+255),b
  3071  000EA0  0E01               	movlw	high _line2
  3072  000EA2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3073  000EA4  0ECF               	movlw	low STR_91
  3074  000EA6  6FA3               	movwf	sprintf@f& (0+255),b
  3075  000EA8  0E7C               	movlw	high STR_91
  3076  000EAA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3077  000EAC  ECDC  F01F         	call	_sprintf	;wreg free
  3078                           
  3079                           ;Main.c: 79: sprintf(line3, "Versao Soft.:");
  3080  000EB0  0E56               	movlw	low _line3
  3081  000EB2  0100               	movlb	0	; () banked
  3082  000EB4  6FA1               	movwf	sprintf@wh& (0+255),b
  3083  000EB6  0E01               	movlw	high _line3
  3084  000EB8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3085  000EBA  0E7A               	movlw	low STR_112
  3086  000EBC  6FA3               	movwf	sprintf@f& (0+255),b
  3087  000EBE  0E7E               	movlw	high STR_112
  3088  000EC0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3089  000EC2  ECDC  F01F         	call	_sprintf	;wreg free
  3090                           
  3091                           ;Main.c: 80: sprintf(&line4[9], "%s", "Jun 01 2020");
  3092  000EC6  0E4A               	movlw	low (_line4+9)
  3093  000EC8  0100               	movlb	0	; () banked
  3094  000ECA  6FA1               	movwf	sprintf@wh& (0+255),b
  3095  000ECC  0E01               	movlw	high (_line4+9)
  3096  000ECE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3097  000ED0  0E1D               	movlw	low (STR_93+9)
  3098  000ED2  6FA3               	movwf	sprintf@f& (0+255),b
  3099  000ED4  0E7F               	movlw	high (STR_93+9)
  3100  000ED6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3101  000ED8  0ED8               	movlw	low STR_15
  3102  000EDA  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  3103  000EDC  0E7E               	movlw	high STR_15
  3104  000EDE  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  3105  000EE0  ECDC  F01F         	call	_sprintf	;wreg free
  3106                           
  3107                           ;Main.c: 81: atualizarLCD(line1, line2, line3, line4);
  3108  000EE4  0E80               	movlw	low _line1
  3109  000EE6  0100               	movlb	0	; () banked
  3110  000EE8  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3111  000EEA  0E01               	movlw	high _line1
  3112  000EEC  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3113  000EEE  0E6B               	movlw	low _line2
  3114  000EF0  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3115  000EF2  0E01               	movlw	high _line2
  3116  000EF4  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3117  000EF6  0E56               	movlw	low _line3
  3118  000EF8  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3119  000EFA  0E01               	movlw	high _line3
  3120  000EFC  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3121  000EFE  0E41               	movlw	low _line4
  3122  000F00  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3123  000F02  0E01               	movlw	high _line4
  3124  000F04  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3125  000F06  EC4F  F01D         	call	_atualizarLCD	;wreg free
  3126                           
  3127                           ;Main.c: 82: delay(2500);
  3128  000F0A  0E09               	movlw	9
  3129  000F0C  0100               	movlb	0	; () banked
  3130  000F0E  6F81               	movwf	(delay@x+1)& (0+255),b
  3131  000F10  0EC4               	movlw	196
  3132  000F12  6F80               	movwf	delay@x& (0+255),b
  3133  000F14  ECFB  F036         	call	_delay	;wreg free
  3134  000F18                     l937:
  3135  000F18  FFFF               	dw	65535	; assembler added errata NOP
  3136  000F1A  0004               	clrwdt		;# 
  3137                           
  3138                           ;Main.c: 88: if (!executandoTeste && !flagErroTransdutor) {
  3139  000F1C  0100               	movlb	0	; () banked
  3140  000F1E  51F1               	movf	_executandoTeste& (0+255),w,b
  3141  000F20  A4D8               	btfss	status,2,c
  3142  000F22  D004               	goto	l938
  3143                           
  3144                           ; BSR set to: 0
  3145  000F24  5071               	movf	_flagErroTransdutor,w,c
  3146  000F26  B4D8               	btfsc	status,2,c
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;Main.c: 89: acaoBombas();
  3150  000F28  EC93  F017         	call	_acaoBombas	;wreg free
  3151  000F2C                     l938:
  3152  000F2C  FFFF               	dw	65535	; assembler added errata NOP
  3153                           
  3154                           ;Main.c: 90: }
  3155                           ;Main.c: 92: verificarIntervaloTesteBombas();
  3156  000F2E  ECB6  F038         	call	_verificarIntervaloTesteBombas	;wreg free
  3157                           
  3158                           ;Main.c: 94: setShiftREG();
  3159  000F32  EC69  F03C         	call	_setShiftREG	;wreg free
  3160                           
  3161                           ;Main.c: 95: getSinalSIM800L();
  3162  000F36  EC19  F015         	call	_getSinalSIM800L	;wreg free
  3163                           
  3164                           ;Main.c: 98: switch (menu_posi) {
  3165  000F3A  D085               	goto	l939
  3166  000F3C  FFFF               	dw	65535	; assembler added errata NOP
  3167                           
  3168                           ;Main.c: 100: telaPrincipal();
  3169  000F3E  EC3F  F011         	call	_telaPrincipal	;wreg free
  3170                           
  3171                           ;Main.c: 101: break;
  3172  000F42  D0A6               	goto	l941
  3173  000F44  FFFF               	dw	65535	; assembler added errata NOP
  3174                           
  3175                           ;Main.c: 103: sprintf(&line1[1], "DATA/HORA");
  3176  000F46  0E81               	movlw	low (_line1+1)
  3177  000F48  0100               	movlb	0	; () banked
  3178  000F4A  6FA1               	movwf	sprintf@wh& (0+255),b
  3179  000F4C  0E01               	movlw	high (_line1+1)
  3180  000F4E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3181  000F50  0E61               	movlw	low STR_115
  3182  000F52  6FA3               	movwf	sprintf@f& (0+255),b
  3183  000F54  0E7F               	movlw	high STR_115
  3184  000F56  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3185  000F58  ECDC  F01F         	call	_sprintf	;wreg free
  3186                           
  3187                           ;Main.c: 104: sprintf(&line2[1], "PRESSAO DA REDE");
  3188  000F5C  0E6C               	movlw	low (_line2+1)
  3189  000F5E  0100               	movlb	0	; () banked
  3190  000F60  6FA1               	movwf	sprintf@wh& (0+255),b
  3191  000F62  0E01               	movlw	high (_line2+1)
  3192  000F64  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3193  000F66  0E01               	movlw	low STR_116
  3194  000F68  6FA3               	movwf	sprintf@f& (0+255),b
  3195  000F6A  0E7E               	movlw	high STR_116
  3196  000F6C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3197  000F6E  ECDC  F01F         	call	_sprintf	;wreg free
  3198                           
  3199                           ;Main.c: 105: sprintf(&line3[1], "PARTIDA COMBUSTAO");
  3200  000F72  0E57               	movlw	low (_line3+1)
  3201  000F74  0100               	movlb	0	; () banked
  3202  000F76  6FA1               	movwf	sprintf@wh& (0+255),b
  3203  000F78  0E01               	movlw	high (_line3+1)
  3204  000F7A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3205  000F7C  0E55               	movlw	low STR_117
  3206  000F7E  6FA3               	movwf	sprintf@f& (0+255),b
  3207  000F80  0E7D               	movlw	high STR_117
  3208  000F82  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3209  000F84  ECDC  F01F         	call	_sprintf	;wreg free
  3210                           
  3211                           ;Main.c: 106: sprintf(&line4[1], "TELEFONES");
  3212  000F88  0E42               	movlw	low (_line4+1)
  3213  000F8A  0100               	movlb	0	; () banked
  3214  000F8C  6FA1               	movwf	sprintf@wh& (0+255),b
  3215  000F8E  0E01               	movlw	high (_line4+1)
  3216  000F90  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3217  000F92  0E75               	movlw	low STR_118
  3218  000F94  6FA3               	movwf	sprintf@f& (0+255),b
  3219  000F96  0E7F               	movlw	high STR_118
  3220  000F98  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3221  000F9A  ECDC  F01F         	call	_sprintf	;wreg free
  3222                           
  3223                           ;Main.c: 107: break;
  3224  000F9E  D078               	goto	l941
  3225  000FA0  FFFF               	dw	65535	; assembler added errata NOP
  3226                           
  3227                           ;Main.c: 109: sprintf(&line1[1], "PERIODO DE TESTES");
  3228  000FA2  0E81               	movlw	low (_line1+1)
  3229  000FA4  0100               	movlb	0	; () banked
  3230  000FA6  6FA1               	movwf	sprintf@wh& (0+255),b
  3231  000FA8  0E01               	movlw	high (_line1+1)
  3232  000FAA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3233  000FAC  0E67               	movlw	low STR_119
  3234  000FAE  6FA3               	movwf	sprintf@f& (0+255),b
  3235  000FB0  0E7D               	movlw	high STR_119
  3236  000FB2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3237  000FB4  ECDC  F01F         	call	_sprintf	;wreg free
  3238                           
  3239                           ;Main.c: 110: sprintf(&line2[1], "DATALOGER");
  3240  000FB8  0E6C               	movlw	low (_line2+1)
  3241  000FBA  0100               	movlb	0	; () banked
  3242  000FBC  6FA1               	movwf	sprintf@wh& (0+255),b
  3243  000FBE  0E01               	movlw	high (_line2+1)
  3244  000FC0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3245  000FC2  0E6B               	movlw	low STR_120
  3246  000FC4  6FA3               	movwf	sprintf@f& (0+255),b
  3247  000FC6  0E7F               	movlw	high STR_120
  3248  000FC8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3249  000FCA  ECDC  F01F         	call	_sprintf	;wreg free
  3250                           
  3251                           ;Main.c: 111: sprintf(&line3[1], "INFO VERSAO");
  3252  000FCE  0E57               	movlw	low (_line3+1)
  3253  000FD0  0100               	movlb	0	; () banked
  3254  000FD2  6FA1               	movwf	sprintf@wh& (0+255),b
  3255  000FD4  0E01               	movlw	high (_line3+1)
  3256  000FD6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3257  000FD8  0E08               	movlw	low STR_121
  3258  000FDA  6FA3               	movwf	sprintf@f& (0+255),b
  3259  000FDC  0E7F               	movlw	high STR_121
  3260  000FDE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3261  000FE0  ECDC  F01F         	call	_sprintf	;wreg free
  3262                           
  3263                           ;Main.c: 112: sprintf(&line4[1], "Iniciar Testes");
  3264  000FE4  0E42               	movlw	low (_line4+1)
  3265  000FE6  0100               	movlb	0	; () banked
  3266  000FE8  6FA1               	movwf	sprintf@wh& (0+255),b
  3267  000FEA  0E01               	movlw	high (_line4+1)
  3268  000FEC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3269  000FEE  0E6B               	movlw	low STR_122
  3270  000FF0  6FA3               	movwf	sprintf@f& (0+255),b
  3271  000FF2  0E7E               	movlw	high STR_122
  3272  000FF4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3273  000FF6  ECDC  F01F         	call	_sprintf	;wreg free
  3274                           
  3275                           ;Main.c: 113: break;
  3276  000FFA  D04A               	goto	l941
  3277  000FFC  FFFF               	dw	65535	; assembler added errata NOP
  3278                           
  3279                           ;Main.c: 115: tela_ajusteRTC();
  3280  000FFE  EC24  F010         	call	_tela_ajusteRTC	;wreg free
  3281                           
  3282                           ;Main.c: 116: break;
  3283  001002  D046               	goto	l941
  3284  001004  FFFF               	dw	65535	; assembler added errata NOP
  3285                           
  3286                           ;Main.c: 118: ajusteSP_Bombas();
  3287  001006  ECBB  F00C         	call	_ajusteSP_Bombas	;wreg free
  3288                           
  3289                           ;Main.c: 119: break;
  3290  00100A  D042               	goto	l941
  3291  00100C  FFFF               	dw	65535	; assembler added errata NOP
  3292                           
  3293                           ;Main.c: 121: configurarEstacionaria();
  3294  00100E  ECDF  F016         	call	_configurarEstacionaria	;wreg free
  3295                           
  3296                           ;Main.c: 122: break;
  3297  001012  D03E               	goto	l941
  3298  001014  FFFF               	dw	65535	; assembler added errata NOP
  3299                           
  3300                           ;Main.c: 124: configuraTelefones();
  3301  001016  EC4D  F009         	call	_configuraTelefones	;wreg free
  3302                           
  3303                           ;Main.c: 125: break;
  3304  00101A  D03A               	goto	l941
  3305  00101C  FFFF               	dw	65535	; assembler added errata NOP
  3306                           
  3307                           ;Main.c: 127: tela_testeBombas();
  3308  00101E  EC49  F013         	call	_tela_testeBombas	;wreg free
  3309                           
  3310                           ;Main.c: 128: break;
  3311  001022  D036               	goto	l941
  3312  001024  FFFF               	dw	65535	; assembler added errata NOP
  3313                           
  3314                           ;Main.c: 130: dataLoger();
  3315  001026  EC08  F00F         	call	_dataLoger	;wreg free
  3316                           
  3317                           ;Main.c: 131: break;
  3318  00102A  D032               	goto	l941
  3319  00102C  FFFF               	dw	65535	; assembler added errata NOP
  3320                           
  3321                           ;Main.c: 133: informacoes();
  3322  00102E  EC8D  F03A         	call	_informacoes	;wreg free
  3323                           
  3324                           ;Main.c: 134: break;
  3325  001032  D02E               	goto	l941
  3326  001034  FFFF               	dw	65535	; assembler added errata NOP
  3327                           
  3328                           ;Main.c: 136: acaoTesteBombas();
  3329  001036  EC8D  F004         	call	_acaoTesteBombas	;wreg free
  3330                           
  3331                           ;Main.c: 137: break;
  3332  00103A  D02A               	goto	l941
  3333  00103C  FFFF               	dw	65535	; assembler added errata NOP
  3334  00103E  0E00               	movlw	0
  3335  001040  0100               	movlb	0	; () banked
  3336  001042  6FE0               	movwf	_menu_posi& (0+255),b
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;Main.c: 141: }
  3340                           
  3341                           ;Main.c: 140: break;
  3342  001044  D025               	goto	l941
  3343  001046                     l939:
  3344  001046  FFFF               	dw	65535	; assembler added errata NOP
  3345                           
  3346                           ; BSR set to: 0
  3347  001048  0100               	movlb	0	; () banked
  3348  00104A  51E0               	movf	_menu_posi& (0+255),w,b
  3349                           
  3350                           ; Switch size 1, requested type "space"
  3351                           ; Number of cases is 11, Range of values is 0 to 28
  3352                           ; switch strategies available:
  3353                           ; Name         Instructions Cycles
  3354                           ; simple_byte           34    18 (average)
  3355                           ;	Chosen strategy is simple_byte
  3356  00104C  0A00               	xorlw	0	; case 0
  3357  00104E  B4D8               	btfsc	status,2,c
  3358  001050  D775               	goto	l940
  3359  001052  0A01               	xorlw	1	; case 1
  3360  001054  B4D8               	btfsc	status,2,c
  3361  001056  D776               	goto	l942
  3362  001058  0A03               	xorlw	3	; case 2
  3363  00105A  B4D8               	btfsc	status,2,c
  3364  00105C  D7A1               	goto	l943
  3365  00105E  0A16               	xorlw	22	; case 20
  3366  001060  B4D8               	btfsc	status,2,c
  3367  001062  D7CC               	goto	l944
  3368  001064  0A01               	xorlw	1	; case 21
  3369  001066  B4D8               	btfsc	status,2,c
  3370  001068  D7CD               	goto	l945
  3371  00106A  0A03               	xorlw	3	; case 22
  3372  00106C  B4D8               	btfsc	status,2,c
  3373  00106E  D7CE               	goto	l946
  3374  001070  0A01               	xorlw	1	; case 23
  3375  001072  B4D8               	btfsc	status,2,c
  3376  001074  D7CF               	goto	l947
  3377  001076  0A0F               	xorlw	15	; case 24
  3378  001078  B4D8               	btfsc	status,2,c
  3379  00107A  D7D0               	goto	l948
  3380  00107C  0A01               	xorlw	1	; case 25
  3381  00107E  B4D8               	btfsc	status,2,c
  3382  001080  D7D1               	goto	l949
  3383  001082  0A02               	xorlw	2	; case 27
  3384  001084  B4D8               	btfsc	status,2,c
  3385  001086  D7D2               	goto	l950
  3386  001088  0A07               	xorlw	7	; case 28
  3387  00108A  B4D8               	btfsc	status,2,c
  3388  00108C  D7D3               	goto	l951
  3389  00108E  D7D6               	goto	l952
  3390  001090                     l941:
  3391  001090  FFFF               	dw	65535	; assembler added errata NOP
  3392                           
  3393                           ;Main.c: 143: if (menu_posi == 1 | menu_posi == 2) {
  3394                           
  3395                           ; BSR set to: 0
  3396  001092  0100               	movlb	0	; () banked
  3397  001094  05E0               	decf	_menu_posi& (0+255),w,b
  3398  001096  B4D8               	btfsc	status,2,c
  3399  001098  D09C               	goto	l956
  3400                           
  3401                           ; BSR set to: 0
  3402  00109A  0E02               	movlw	2
  3403  00109C  19E0               	xorwf	_menu_posi& (0+255),w,b
  3404  00109E  B4D8               	btfsc	status,2,c
  3405  0010A0  D098               	goto	l956
  3406  0010A2  D0D2               	goto	l980
  3407  0010A4  FFFF               	dw	65535	; assembler added errata NOP
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;Main.c: 147: menu_posi = 1;
  3411                           
  3412                           ; BSR set to: 0
  3413  0010A6  0E01               	movlw	1
  3414  0010A8  6FE0               	movwf	_menu_posi& (0+255),b
  3415                           
  3416                           ;Main.c: 148: line1[0] = '>';
  3417  0010AA  0E3E               	movlw	62
  3418  0010AC  0101               	movlb	1	; () banked
  3419  0010AE  6F80               	movwf	_line1& (0+255),b
  3420                           
  3421                           ; BSR set to: 1
  3422                           ;Main.c: 149: if (btPress(4)) {
  3423  0010B0  0E04               	movlw	4
  3424  0010B2  EC55  F03A         	call	_btPress
  3425  0010B6  0900               	iorlw	0
  3426  0010B8  B4D8               	btfsc	status,2,c
  3427  0010BA  D0A6               	goto	l959
  3428                           
  3429                           ;Main.c: 150: _menu_posi = menu_posi;
  3430  0010BC  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3431                           
  3432                           ;Main.c: 151: menu_posi = 20;
  3433  0010C0  0E14               	movlw	20
  3434  0010C2  D065               	goto	L5
  3435  0010C4  FFFF               	dw	65535	; assembler added errata NOP
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;Main.c: 155: menu_posi = 1;
  3439                           
  3440                           ; BSR set to: 0
  3441  0010C6  0E01               	movlw	1
  3442  0010C8  6FE0               	movwf	_menu_posi& (0+255),b
  3443                           
  3444                           ;Main.c: 156: line2[0] = '>';
  3445  0010CA  0E3E               	movlw	62
  3446  0010CC  0101               	movlb	1	; () banked
  3447  0010CE  6F6B               	movwf	_line2& (0+255),b
  3448                           
  3449                           ; BSR set to: 1
  3450                           ;Main.c: 157: if (btPress(4)) {
  3451  0010D0  0E04               	movlw	4
  3452  0010D2  EC55  F03A         	call	_btPress
  3453  0010D6  0900               	iorlw	0
  3454  0010D8  B4D8               	btfsc	status,2,c
  3455  0010DA  D096               	goto	l959
  3456                           
  3457                           ;Main.c: 158: _menu_posi = menu_posi;
  3458  0010DC  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3459                           
  3460                           ;Main.c: 159: menu_posi = 21;
  3461  0010E0  0E15               	movlw	21
  3462  0010E2  D055               	goto	L5
  3463  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;Main.c: 163: menu_posi = 1;
  3467                           
  3468                           ; BSR set to: 0
  3469  0010E6  0E01               	movlw	1
  3470  0010E8  6FE0               	movwf	_menu_posi& (0+255),b
  3471                           
  3472                           ;Main.c: 164: line3[0] = '>';
  3473  0010EA  0E3E               	movlw	62
  3474  0010EC  0101               	movlb	1	; () banked
  3475  0010EE  6F56               	movwf	_line3& (0+255),b
  3476                           
  3477                           ; BSR set to: 1
  3478                           ;Main.c: 165: if (btPress(4)) {
  3479  0010F0  0E04               	movlw	4
  3480  0010F2  EC55  F03A         	call	_btPress
  3481  0010F6  0900               	iorlw	0
  3482  0010F8  B4D8               	btfsc	status,2,c
  3483  0010FA  D086               	goto	l959
  3484                           
  3485                           ;Main.c: 166: _menu_posi = menu_posi;
  3486  0010FC  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3487                           
  3488                           ;Main.c: 167: menu_posi = 22;
  3489  001100  0E16               	movlw	22
  3490  001102  D045               	goto	L5
  3491  001104  FFFF               	dw	65535	; assembler added errata NOP
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;Main.c: 171: menu_posi = 1;
  3495                           
  3496                           ; BSR set to: 0
  3497  001106  0E01               	movlw	1
  3498  001108  6FE0               	movwf	_menu_posi& (0+255),b
  3499                           
  3500                           ;Main.c: 172: line4[0] = '>';
  3501  00110A  0E3E               	movlw	62
  3502  00110C  0101               	movlb	1	; () banked
  3503  00110E  6F41               	movwf	_line4& (0+255),b
  3504                           
  3505                           ; BSR set to: 1
  3506                           ;Main.c: 173: if (btPress(4)) {
  3507  001110  0E04               	movlw	4
  3508  001112  EC55  F03A         	call	_btPress
  3509  001116  0900               	iorlw	0
  3510  001118  B4D8               	btfsc	status,2,c
  3511  00111A  D076               	goto	l959
  3512                           
  3513                           ;Main.c: 174: _menu_posi = menu_posi;
  3514  00111C  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3515                           
  3516                           ;Main.c: 175: menu_posi = 23;
  3517  001120  0E17               	movlw	23
  3518  001122  D035               	goto	L5
  3519  001124  FFFF               	dw	65535	; assembler added errata NOP
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;Main.c: 179: menu_posi = 2;
  3523                           
  3524                           ; BSR set to: 0
  3525  001126  0E02               	movlw	2
  3526  001128  6FE0               	movwf	_menu_posi& (0+255),b
  3527                           
  3528                           ;Main.c: 180: line1[0] = '>';
  3529  00112A  0E3E               	movlw	62
  3530  00112C  0101               	movlb	1	; () banked
  3531  00112E  6F80               	movwf	_line1& (0+255),b
  3532                           
  3533                           ; BSR set to: 1
  3534                           ;Main.c: 181: if (btPress(4)) {
  3535  001130  0E04               	movlw	4
  3536  001132  EC55  F03A         	call	_btPress
  3537  001136  0900               	iorlw	0
  3538  001138  B4D8               	btfsc	status,2,c
  3539  00113A  D066               	goto	l959
  3540                           
  3541                           ;Main.c: 182: _menu_posi = menu_posi;
  3542  00113C  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3543                           
  3544                           ;Main.c: 183: menu_posi = 24;
  3545  001140  0E18               	movlw	24
  3546  001142  D025               	goto	L5
  3547  001144  FFFF               	dw	65535	; assembler added errata NOP
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;Main.c: 187: line2[0] = '>';
  3551                           
  3552                           ; BSR set to: 0
  3553  001146  0E3E               	movlw	62
  3554  001148  0101               	movlb	1	; () banked
  3555  00114A  6F6B               	movwf	_line2& (0+255),b
  3556                           
  3557                           ;Main.c: 188: menu_posi = 2;
  3558  00114C  0E02               	movlw	2
  3559  00114E  0100               	movlb	0	; () banked
  3560  001150  6FE0               	movwf	_menu_posi& (0+255),b
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;Main.c: 189: if (btPress(4)) {
  3564  001152  0E04               	movlw	4
  3565  001154  EC55  F03A         	call	_btPress
  3566  001158  0900               	iorlw	0
  3567  00115A  B4D8               	btfsc	status,2,c
  3568  00115C  D055               	goto	l959
  3569                           
  3570                           ;Main.c: 190: _menu_posi = menu_posi;
  3571  00115E  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3572                           
  3573                           ;Main.c: 191: menu_posi = 25;
  3574  001162  0E19               	movlw	25
  3575  001164  0100               	movlb	0	; () banked
  3576  001166  6FE0               	movwf	_menu_posi& (0+255),b
  3577                           
  3578                           ;Main.c: 192: dtl_carregar_log = 1;
  3579  001168  0E01               	movlw	1
  3580  00116A  6E50               	movwf	_dtl_carregar_log,c
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;Main.c: 193: }
  3584                           ;Main.c: 194: break;
  3585  00116C  D04D               	goto	l959
  3586  00116E  FFFF               	dw	65535	; assembler added errata NOP
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;Main.c: 196: line3[0] = '>';
  3590                           
  3591                           ; BSR set to: 0
  3592  001170  0E3E               	movlw	62
  3593  001172  0101               	movlb	1	; () banked
  3594  001174  6F56               	movwf	_line3& (0+255),b
  3595                           
  3596                           ;Main.c: 197: menu_posi = 2;
  3597  001176  0E02               	movlw	2
  3598  001178  0100               	movlb	0	; () banked
  3599  00117A  6FE0               	movwf	_menu_posi& (0+255),b
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;Main.c: 198: if (btPress(4)) {
  3603  00117C  0E04               	movlw	4
  3604  00117E  EC55  F03A         	call	_btPress
  3605  001182  0900               	iorlw	0
  3606  001184  B4D8               	btfsc	status,2,c
  3607  001186  D040               	goto	l959
  3608                           
  3609                           ;Main.c: 199: _menu_posi = menu_posi;
  3610  001188  C0E0  F0DF         	movff	_menu_posi,__menu_posi
  3611                           
  3612                           ;Main.c: 200: menu_posi = 27;
  3613  00118C  0E1B               	movlw	27
  3614  00118E                     L5:
  3615  00118E  FFFF               	dw	65535	; assembler added errata NOP
  3616  001190  0100               	movlb	0	; () banked
  3617  001192  D01C               	goto	L6
  3618  001194  FFFF               	dw	65535	; assembler added errata NOP
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;Main.c: 204: line4[0] = '>';
  3622                           
  3623                           ; BSR set to: 0
  3624  001196  0E3E               	movlw	62
  3625  001198  0101               	movlb	1	; () banked
  3626  00119A  6F41               	movwf	_line4& (0+255),b
  3627                           
  3628                           ;Main.c: 205: menu_posi = 2;
  3629  00119C  0E02               	movlw	2
  3630  00119E  0100               	movlb	0	; () banked
  3631  0011A0  6FE0               	movwf	_menu_posi& (0+255),b
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;Main.c: 206: if (btPress(4)) {
  3635  0011A2  0E04               	movlw	4
  3636  0011A4  EC55  F03A         	call	_btPress
  3637  0011A8  0900               	iorlw	0
  3638  0011AA  B4D8               	btfsc	status,2,c
  3639  0011AC  D02D               	goto	l959
  3640                           
  3641                           ;Main.c: 207: if (!ocorrendoIncendio) {
  3642  0011AE  0100               	movlb	0	; () banked
  3643  0011B0  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  3644  0011B2  A4D8               	btfss	status,2,c
  3645  0011B4  D029               	goto	l959
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;Main.c: 208: menu_posi = 28;
  3649  0011B6  0E1C               	movlw	28
  3650  0011B8  6FE0               	movwf	_menu_posi& (0+255),b
  3651                           
  3652                           ;Main.c: 209: executandoTeste = 1;
  3653  0011BA  0E01               	movlw	1
  3654  0011BC  6FF1               	movwf	_executandoTeste& (0+255),b
  3655                           
  3656                           ;Main.c: 210: etapaTesteBombas = 0;
  3657  0011BE  0E00               	movlw	0
  3658  0011C0  6E6E               	movwf	_etapaTesteBombas,c
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;Main.c: 211: }
  3662                           ;Main.c: 212: }
  3663                           ;Main.c: 213: break;
  3664                           
  3665                           ; BSR set to: 0
  3666  0011C2  D022               	goto	l959
  3667  0011C4  FFFF               	dw	65535	; assembler added errata NOP
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;Main.c: 215: sub_menu_posi = 1;
  3671                           
  3672                           ; BSR set to: 0
  3673  0011C6  0E01               	movlw	1
  3674  0011C8  6E66               	movwf	_sub_menu_posi,c
  3675                           
  3676                           ;Main.c: 216: menu_posi = 1;
  3677  0011CA  0E01               	movlw	1
  3678  0011CC                     L6:
  3679  0011CC  FFFF               	dw	65535	; assembler added errata NOP
  3680  0011CE  6FE0               	movwf	_menu_posi& (0+255),b
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;Main.c: 218: }
  3684                           
  3685                           ;Main.c: 217: break;
  3686  0011D0  D01B               	goto	l959
  3687  0011D2                     l956:
  3688  0011D2  FFFF               	dw	65535	; assembler added errata NOP
  3689                           
  3690                           ; BSR set to: 0
  3691                           
  3692                           ; BSR set to: 0
  3693  0011D4  5066               	movf	_sub_menu_posi,w,c
  3694                           
  3695                           ; Switch size 1, requested type "space"
  3696                           ; Number of cases is 8, Range of values is 1 to 8
  3697                           ; switch strategies available:
  3698                           ; Name         Instructions Cycles
  3699                           ; simple_byte           25    13 (average)
  3700                           ;	Chosen strategy is simple_byte
  3701  0011D6  0A01               	xorlw	1	; case 1
  3702  0011D8  B4D8               	btfsc	status,2,c
  3703  0011DA  D764               	goto	l957
  3704  0011DC  0A03               	xorlw	3	; case 2
  3705  0011DE  B4D8               	btfsc	status,2,c
  3706  0011E0  D771               	goto	l960
  3707  0011E2  0A01               	xorlw	1	; case 3
  3708  0011E4  B4D8               	btfsc	status,2,c
  3709  0011E6  D77E               	goto	l962
  3710  0011E8  0A07               	xorlw	7	; case 4
  3711  0011EA  B4D8               	btfsc	status,2,c
  3712  0011EC  D78B               	goto	l964
  3713  0011EE  0A01               	xorlw	1	; case 5
  3714  0011F0  B4D8               	btfsc	status,2,c
  3715  0011F2  D798               	goto	l966
  3716  0011F4  0A03               	xorlw	3	; case 6
  3717  0011F6  B4D8               	btfsc	status,2,c
  3718  0011F8  D7A5               	goto	l968
  3719  0011FA  0A01               	xorlw	1	; case 7
  3720  0011FC  B4D8               	btfsc	status,2,c
  3721  0011FE  D7B7               	goto	l970
  3722  001200  0A0F               	xorlw	15	; case 8
  3723  001202  B4D8               	btfsc	status,2,c
  3724  001204  D7C7               	goto	l972
  3725  001206  D7DE               	goto	l975
  3726  001208                     l959:
  3727  001208  FFFF               	dw	65535	; assembler added errata NOP
  3728                           
  3729                           ;Main.c: 220: if (btPress(3)) {
  3730                           
  3731                           ; BSR set to: 0
  3732  00120A  0E03               	movlw	3
  3733  00120C  EC55  F03A         	call	_btPress
  3734  001210  0900               	iorlw	0
  3735  001212  B4D8               	btfsc	status,2,c
  3736  001214  D002               	goto	l976
  3737                           
  3738                           ;Main.c: 221: sub_menu_posi--;
  3739  001216  0666               	decf	_sub_menu_posi,f,c
  3740                           
  3741                           ;Main.c: 222: } else if (btPress(2)) {
  3742  001218  D017               	goto	l980
  3743  00121A                     l976:
  3744  00121A  FFFF               	dw	65535	; assembler added errata NOP
  3745  00121C  0E02               	movlw	2
  3746  00121E  EC55  F03A         	call	_btPress
  3747  001222  0900               	iorlw	0
  3748  001224  B4D8               	btfsc	status,2,c
  3749  001226  D002               	goto	l978
  3750                           
  3751                           ;Main.c: 223: sub_menu_posi++;
  3752  001228  2A66               	incf	_sub_menu_posi,f,c
  3753                           
  3754                           ;Main.c: 224: } else if (btPress(1)) {
  3755  00122A  D00E               	goto	l980
  3756  00122C                     l978:
  3757  00122C  FFFF               	dw	65535	; assembler added errata NOP
  3758  00122E  0E01               	movlw	1
  3759  001230  EC55  F03A         	call	_btPress
  3760  001234  0900               	iorlw	0
  3761  001236  B4D8               	btfsc	status,2,c
  3762  001238  D007               	goto	l980
  3763                           
  3764                           ;Main.c: 225: menu_posi = 0;
  3765  00123A  0E00               	movlw	0
  3766  00123C  0100               	movlb	0	; () banked
  3767  00123E  6FE0               	movwf	_menu_posi& (0+255),b
  3768                           
  3769                           ;Main.c: 226: option_posi = 0;
  3770  001240  0E00               	movlw	0
  3771  001242  6FE1               	movwf	_option_posi& (0+255),b
  3772                           
  3773                           ;Main.c: 227: sub_menu_posi = 1;
  3774  001244  0E01               	movlw	1
  3775  001246  6E66               	movwf	_sub_menu_posi,c
  3776  001248                     l980:
  3777  001248  FFFF               	dw	65535	; assembler added errata NOP
  3778                           
  3779                           ;Main.c: 228: }
  3780                           ;Main.c: 229: }
  3781                           ;Main.c: 231: if (menu_posi != 28) {
  3782                           
  3783                           ; BSR set to: 0
  3784                           
  3785                           ; BSR set to: 0
  3786                           
  3787                           ; BSR set to: 0
  3788                           
  3789                           ; BSR set to: 0
  3790  00124A  0E1C               	movlw	28
  3791  00124C  0100               	movlb	0	; () banked
  3792  00124E  19E0               	xorwf	_menu_posi& (0+255),w,b
  3793  001250  B4D8               	btfsc	status,2,c
  3794  001252  D004               	goto	l981
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;Main.c: 232: executandoTeste = 0;
  3798  001254  0E00               	movlw	0
  3799  001256  6FF1               	movwf	_executandoTeste& (0+255),b
  3800                           
  3801                           ;Main.c: 233: shift[2] = 0;
  3802  001258  0E00               	movlw	0
  3803  00125A  6E46               	movwf	_shift+2,c
  3804  00125C                     l981:
  3805  00125C  FFFF               	dw	65535	; assembler added errata NOP
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;Main.c: 234: }
  3809                           ;Main.c: 236: if(flagMudancaEstadoSaidas){
  3810  00125E  5070               	movf	_flagMudancaEstadoSaidas,w,c
  3811  001260  B4D8               	btfsc	status,2,c
  3812  001262  D004               	goto	l982
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;Main.c: 237: timerAtualizacaoLCD = 2;
  3816  001264  0E02               	movlw	2
  3817  001266  6E7C               	movwf	_timerAtualizacaoLCD,c
  3818                           
  3819                           ;Main.c: 238: flagMudancaEstadoSaidas = 0;
  3820  001268  0E00               	movlw	0
  3821  00126A  6E70               	movwf	_flagMudancaEstadoSaidas,c
  3822  00126C                     l982:
  3823  00126C  FFFF               	dw	65535	; assembler added errata NOP
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;Main.c: 239: }
  3827                           ;Main.c: 241: if (timerAtualizacaoLCD == 0) {
  3828  00126E  507C               	movf	_timerAtualizacaoLCD,w,c
  3829  001270  A4D8               	btfss	status,2,c
  3830  001272  D652               	goto	l937
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;Main.c: 242: atualizarLCD(&line1, &line2, &line3, &line4);
  3834  001274  0E80               	movlw	low _line1
  3835  001276  6F88               	movwf	atualizarLCD@line1& (0+255),b
  3836  001278  0E01               	movlw	high _line1
  3837  00127A  6F89               	movwf	(atualizarLCD@line1+1)& (0+255),b
  3838  00127C  0E6B               	movlw	low _line2
  3839  00127E  6F8A               	movwf	atualizarLCD@line2& (0+255),b
  3840  001280  0E01               	movlw	high _line2
  3841  001282  6F8B               	movwf	(atualizarLCD@line2+1)& (0+255),b
  3842  001284  0E56               	movlw	low _line3
  3843  001286  6F8C               	movwf	atualizarLCD@line3& (0+255),b
  3844  001288  0E01               	movlw	high _line3
  3845  00128A  6F8D               	movwf	(atualizarLCD@line3+1)& (0+255),b
  3846  00128C  0E41               	movlw	low _line4
  3847  00128E  6F8E               	movwf	atualizarLCD@line4& (0+255),b
  3848  001290  0E01               	movlw	high _line4
  3849  001292  6F8F               	movwf	(atualizarLCD@line4+1)& (0+255),b
  3850  001294  EC4F  F01D         	call	_atualizarLCD	;wreg free
  3851  001298  D63F               	goto	l937
  3852  00129A                     __end_of_main:
  3853                           	opt stack 0
  3854                           tblptru	equ	0xFF8
  3855                           tblptrh	equ	0xFF7
  3856                           tblptrl	equ	0xFF6
  3857                           tablat	equ	0xFF5
  3858                           postinc0	equ	0xFEE
  3859                           wreg	equ	0xFE8
  3860                           postdec1	equ	0xFE5
  3861                           fsr1l	equ	0xFE1
  3862                           status	equ	0xFD8
  3863                           
  3864 ;; *************** function _verificarIntervaloTesteBombas *****************
  3865 ;; Defined at:
  3866 ;;		line 126 in file "controle.h"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;		None
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;		None
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      void 
  3873 ;; Registers used:
  3874 ;;		wreg, status,2, status,0, cstack
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3880 ;;      Params:         0       0       0       0       0       0       0
  3881 ;;      Locals:         0       0       0       0       0       0       0
  3882 ;;      Temps:          0       0       0       0       0       0       0
  3883 ;;      Totals:         0       0       0       0       0       0       0
  3884 ;;Total ram usage:        0 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; Hardware stack levels required when called:    9
  3887 ;; This function calls:
  3888 ;;		_writeEEPROM_ext
  3889 ;; This function is called by:
  3890 ;;		_main
  3891 ;; This function uses a non-reentrant model
  3892 ;;
  3893                           
  3894                           	psect	text1
  3895  00716C                     __ptext1:
  3896                           	opt stack 0
  3897  00716C                     _verificarIntervaloTesteBombas:
  3898                           	opt stack 0
  3899  00716C  FFFF               	dw	65535	; assembler added errata NOP
  3900                           
  3901                           ;controle.h: 127: if (dias_restante_teste >= intervalo_teste_dia && habilitaTesteAutomat
      +                          ico == 1 && !executandoTeste) {
  3902                           
  3903                           ;incstack = 0
  3904  00716E  0100               	movlb	0	; () banked
  3905  007170  51E9               	movf	_intervalo_teste_dia& (0+255),w,b
  3906  007172  5DE8               	subwf	_dias_restante_teste& (0+255),w,b
  3907  007174  A0D8               	btfss	status,0,c
  3908  007176  D018               	goto	l528
  3909                           
  3910                           ; BSR set to: 0
  3911  007178  046F               	decf	_habilitaTesteAutomatico,w,c
  3912  00717A  A4D8               	btfss	status,2,c
  3913  00717C  D015               	goto	l528
  3914                           
  3915                           ; BSR set to: 0
  3916  00717E  51F1               	movf	_executandoTeste& (0+255),w,b
  3917  007180  A4D8               	btfss	status,2,c
  3918  007182  D012               	goto	l528
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;controle.h: 128: if (_hor == horario_de_teste) {
  3922  007184  51E7               	movf	_horario_de_teste& (0+255),w,b
  3923  007186  19ED               	xorwf	__hor& (0+255),w,b
  3924  007188  A4D8               	btfss	status,2,c
  3925  00718A  D00E               	goto	l528
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;controle.h: 129: dias_restante_teste = 0;
  3929  00718C  0E00               	movlw	0
  3930  00718E  6FE8               	movwf	_dias_restante_teste& (0+255),b
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;controle.h: 130: writeEEPROM_ext(10, dias_restante_teste);
  3934  007190  C0E8  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
  3935  007194  0E0A               	movlw	10
  3936  007196  ECF9  F038         	call	_writeEEPROM_ext
  3937                           
  3938                           ;controle.h: 131: etapaTesteBombas = 0;
  3939  00719A  0E00               	movlw	0
  3940  00719C  6E6E               	movwf	_etapaTesteBombas,c
  3941                           
  3942                           ;controle.h: 132: executandoTeste = 1;
  3943  00719E  0E01               	movlw	1
  3944  0071A0  0100               	movlb	0	; () banked
  3945  0071A2  6FF1               	movwf	_executandoTeste& (0+255),b
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;controle.h: 133: menu_posi = 28;
  3949  0071A4  0E1C               	movlw	28
  3950  0071A6  6FE0               	movwf	_menu_posi& (0+255),b
  3951  0071A8                     l528:
  3952  0071A8  FFFF               	dw	65535	; assembler added errata NOP
  3953                           
  3954                           ; BSR set to: 0
  3955                           
  3956                           ; BSR set to: 0
  3957                           
  3958                           ; BSR set to: 0
  3959  0071AA  0012               	return		;funcret
  3960  0071AC  FFFF               	dw	65535	; errata NOP
  3961  0071AE                     __end_of_verificarIntervaloTesteBombas:
  3962                           	opt stack 0
  3963                           tblptru	equ	0xFF8
  3964                           tblptrh	equ	0xFF7
  3965                           tblptrl	equ	0xFF6
  3966                           tablat	equ	0xFF5
  3967                           postinc0	equ	0xFEE
  3968                           wreg	equ	0xFE8
  3969                           postdec1	equ	0xFE5
  3970                           fsr1l	equ	0xFE1
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function _tela_testeBombas *****************
  3974 ;; Defined at:
  3975 ;;		line 8 in file "tela_TESTE_BOMBAS.h"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;		None
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;		None
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3989 ;;      Params:         0       0       0       0       0       0       0
  3990 ;;      Locals:         0       2       0       0       0       0       0
  3991 ;;      Temps:          0       2       0       0       0       0       0
  3992 ;;      Totals:         0       4       0       0       0       0       0
  3993 ;;Total ram usage:        4 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    9
  3996 ;; This function calls:
  3997 ;;		_blink
  3998 ;;		_btPress
  3999 ;;		_sprintf
  4000 ;;		_writeEEPROM_ext
  4001 ;; This function is called by:
  4002 ;;		_main
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text2
  4007  002692                     __ptext2:
  4008                           	opt stack 0
  4009  002692                     _tela_testeBombas:
  4010                           	opt stack 0
  4011  002692  FFFF               	dw	65535	; assembler added errata NOP
  4012                           
  4013                           ;tela_TESTE_BOMBAS.h: 10: sprintf(line1, "#Proximo em %2d dias", (intervalo_teste_dia - 
      +                          dias_restante_teste));
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;incstack = 0
  4017  002694  0E80               	movlw	low _line1
  4018  002696  0100               	movlb	0	; () banked
  4019  002698  6FA1               	movwf	sprintf@wh& (0+255),b
  4020  00269A  0E01               	movlw	high _line1
  4021  00269C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4022  00269E  0E56               	movlw	low STR_73
  4023  0026A0  6FA3               	movwf	sprintf@f& (0+255),b
  4024  0026A2  0E7C               	movlw	high STR_73
  4025  0026A4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4026  0026A6  51E8               	movf	_dias_restante_teste& (0+255),w,b
  4027  0026A8  6FB5               	movwf	??_tela_testeBombas& (0+255),b
  4028  0026AA  6BB6               	clrf	(??_tela_testeBombas+1)& (0+255),b
  4029  0026AC  1FB5               	comf	??_tela_testeBombas& (0+255),f,b
  4030  0026AE  1FB6               	comf	(??_tela_testeBombas+1)& (0+255),f,b
  4031  0026B0  4BB5               	infsnz	??_tela_testeBombas& (0+255),f,b
  4032  0026B2  2BB6               	incf	(??_tela_testeBombas+1)& (0+255),f,b
  4033  0026B4  51E9               	movf	_intervalo_teste_dia& (0+255),w,b
  4034  0026B6  25B5               	addwf	??_tela_testeBombas& (0+255),w,b
  4035  0026B8  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  4036  0026BA  0E00               	movlw	0
  4037  0026BC  21B6               	addwfc	(??_tela_testeBombas+1)& (0+255),w,b
  4038  0026BE  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  4039  0026C0  ECDC  F01F         	call	_sprintf	;wreg free
  4040                           
  4041                           ;tela_TESTE_BOMBAS.h: 11: sprintf(line2, "INTERVALO: %2d dias", intervalo_teste_dia);
  4042  0026C4  0E6B               	movlw	low _line2
  4043  0026C6  0100               	movlb	0	; () banked
  4044  0026C8  6FA1               	movwf	sprintf@wh& (0+255),b
  4045  0026CA  0E01               	movlw	high _line2
  4046  0026CC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4047  0026CE  0EA7               	movlw	low STR_74
  4048  0026D0  6FA3               	movwf	sprintf@f& (0+255),b
  4049  0026D2  0E7C               	movlw	high STR_74
  4050  0026D4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4051  0026D6  C0E9  F0A5         	movff	_intervalo_teste_dia,?_sprintf+4
  4052  0026DA  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4053  0026DC  ECDC  F01F         	call	_sprintf	;wreg free
  4054                           
  4055                           ;tela_TESTE_BOMBAS.h: 12: sprintf(line3, "HORARIO: %02d horas", horario_de_teste);
  4056  0026E0  0E56               	movlw	low _line3
  4057  0026E2  0100               	movlb	0	; () banked
  4058  0026E4  6FA1               	movwf	sprintf@wh& (0+255),b
  4059  0026E6  0E01               	movlw	high _line3
  4060  0026E8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4061  0026EA  0EBB               	movlw	low STR_75
  4062  0026EC  6FA3               	movwf	sprintf@f& (0+255),b
  4063  0026EE  0E7C               	movlw	high STR_75
  4064  0026F0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4065  0026F2  C0E7  F0A5         	movff	_horario_de_teste,?_sprintf+4
  4066  0026F6  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4067  0026F8  ECDC  F01F         	call	_sprintf	;wreg free
  4068                           
  4069                           ;tela_TESTE_BOMBAS.h: 13: sprintf(line4, "ATIVAR: %s", habilitaTesteAutomatico == 0 ? "N
      +                          ao" : "Sim");
  4070  0026FC  506F               	movf	_habilitaTesteAutomatico,w,c
  4071  0026FE  B4D8               	btfsc	status,2,c
  4072  002700  D005               	goto	l770
  4073  002702  0EF2               	movlw	low STR_78
  4074  002704  0100               	movlb	0	; () banked
  4075  002706  6FB7               	movwf	_tela_testeBombas$1431& (0+255),b
  4076  002708  0E7F               	movlw	high STR_78
  4077  00270A  D005               	goto	L7
  4078  00270C                     l770:
  4079  00270C  FFFF               	dw	65535	; assembler added errata NOP
  4080                           
  4081                           ; BSR set to: 0
  4082  00270E  0EF6               	movlw	low STR_77
  4083  002710  0100               	movlb	0	; () banked
  4084  002712  6FB7               	movwf	_tela_testeBombas$1431& (0+255),b
  4085  002714  0E7F               	movlw	high STR_77
  4086  002716                     L7:
  4087  002716  FFFF               	dw	65535	; assembler added errata NOP
  4088  002718  6FB8               	movwf	(_tela_testeBombas$1431+1)& (0+255),b
  4089                           
  4090                           ; BSR set to: 0
  4091                           
  4092                           ; BSR set to: 0
  4093  00271A  0E41               	movlw	low _line4
  4094  00271C  6FA1               	movwf	sprintf@wh& (0+255),b
  4095  00271E  0E01               	movlw	high _line4
  4096  002720  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4097  002722  0E4C               	movlw	low STR_76
  4098  002724  6FA3               	movwf	sprintf@f& (0+255),b
  4099  002726  0E7F               	movlw	high STR_76
  4100  002728  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4101  00272A  C0B7  F0A5         	movff	_tela_testeBombas$1431,?_sprintf+4
  4102  00272E  C0B8  F0A6         	movff	_tela_testeBombas$1431+1,?_sprintf+5
  4103  002732  ECDC  F01F         	call	_sprintf	;wreg free
  4104                           
  4105                           ;tela_TESTE_BOMBAS.h: 15: if (btPress(1)) {
  4106  002736  0E01               	movlw	1
  4107  002738  EC55  F03A         	call	_btPress
  4108  00273C  0900               	iorlw	0
  4109  00273E  B4D8               	btfsc	status,2,c
  4110  002740  D011               	goto	l773
  4111                           
  4112                           ;tela_TESTE_BOMBAS.h: 16: writeEEPROM_ext(6, intervalo_teste_dia);
  4113  002742  C0E9  F08C         	movff	_intervalo_teste_dia,writeEEPROM_ext@data
  4114  002746  0E06               	movlw	6
  4115  002748  ECF9  F038         	call	_writeEEPROM_ext
  4116                           
  4117                           ;tela_TESTE_BOMBAS.h: 17: writeEEPROM_ext(11, horario_de_teste);
  4118  00274C  C0E7  F08C         	movff	_horario_de_teste,writeEEPROM_ext@data
  4119  002750  0E0B               	movlw	11
  4120  002752  ECF9  F038         	call	_writeEEPROM_ext
  4121                           
  4122                           ;tela_TESTE_BOMBAS.h: 18: writeEEPROM_ext(15, habilitaTesteAutomatico);
  4123  002756  C06F  F08C         	movff	_habilitaTesteAutomatico,writeEEPROM_ext@data
  4124  00275A  0E0F               	movlw	15
  4125  00275C  ECF9  F038         	call	_writeEEPROM_ext
  4126                           
  4127                           ;tela_TESTE_BOMBAS.h: 19: menu_posi = _menu_posi;
  4128  002760  C0DF  F0E0         	movff	__menu_posi,_menu_posi
  4129  002764                     l773:
  4130  002764  FFFF               	dw	65535	; assembler added errata NOP
  4131                           
  4132                           ;tela_TESTE_BOMBAS.h: 20: }
  4133                           ;tela_TESTE_BOMBAS.h: 21: if (btPress(4)) {
  4134  002766  0E04               	movlw	4
  4135  002768  EC55  F03A         	call	_btPress
  4136  00276C  0900               	iorlw	0
  4137  00276E  B4D8               	btfsc	status,2,c
  4138  002770  D068               	goto	l775
  4139                           
  4140                           ;tela_TESTE_BOMBAS.h: 22: option_posi++;
  4141  002772  0100               	movlb	0	; () banked
  4142  002774  2BE1               	incf	_option_posi& (0+255),f,b
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;tela_TESTE_BOMBAS.h: 23: }
  4146                           ;tela_TESTE_BOMBAS.h: 24: switch (option_posi) {
  4147  002776  D065               	goto	l775
  4148  002778  FFFF               	dw	65535	; assembler added errata NOP
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;tela_TESTE_BOMBAS.h: 26: blink(line2, 11, 14);
  4152                           
  4153                           ; BSR set to: 0
  4154  00277A  0E6B               	movlw	low _line2
  4155  00277C  6F80               	movwf	blink@line& (0+255),b
  4156  00277E  0E01               	movlw	high _line2
  4157  002780  6F81               	movwf	(blink@line+1)& (0+255),b
  4158  002782  0E0B               	movlw	11
  4159  002784  6F82               	movwf	blink@start& (0+255),b
  4160  002786  0E0E               	movlw	14
  4161  002788  6F83               	movwf	blink@end& (0+255),b
  4162  00278A  EC35  F038         	call	_blink	;wreg free
  4163                           
  4164                           ;tela_TESTE_BOMBAS.h: 27: if (btPress(3)) {
  4165  00278E  0E03               	movlw	3
  4166  002790  EC55  F03A         	call	_btPress
  4167  002794  0900               	iorlw	0
  4168  002796  B4D8               	btfsc	status,2,c
  4169  002798  D002               	goto	l777
  4170                           
  4171                           ;tela_TESTE_BOMBAS.h: 28: intervalo_teste_dia++;
  4172  00279A  0100               	movlb	0	; () banked
  4173  00279C  2BE9               	incf	_intervalo_teste_dia& (0+255),f,b
  4174  00279E                     l777:
  4175  00279E  FFFF               	dw	65535	; assembler added errata NOP
  4176                           
  4177                           ;tela_TESTE_BOMBAS.h: 29: }
  4178                           ;tela_TESTE_BOMBAS.h: 30: if (btPress(2)) {
  4179                           
  4180                           ; BSR set to: 0
  4181  0027A0  0E02               	movlw	2
  4182  0027A2  EC55  F03A         	call	_btPress
  4183  0027A6  0900               	iorlw	0
  4184  0027A8  B4D8               	btfsc	status,2,c
  4185  0027AA  D058               	goto	l779
  4186                           
  4187                           ;tela_TESTE_BOMBAS.h: 31: intervalo_teste_dia--;
  4188  0027AC  0100               	movlb	0	; () banked
  4189  0027AE  07E9               	decf	_intervalo_teste_dia& (0+255),f,b
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;tela_TESTE_BOMBAS.h: 32: }
  4193                           ;tela_TESTE_BOMBAS.h: 33: break;
  4194  0027B0  D055               	goto	l779
  4195  0027B2  FFFF               	dw	65535	; assembler added errata NOP
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;tela_TESTE_BOMBAS.h: 35: blink(line3, 9, 11);
  4199                           
  4200                           ; BSR set to: 0
  4201  0027B4  0E56               	movlw	low _line3
  4202  0027B6  6F80               	movwf	blink@line& (0+255),b
  4203  0027B8  0E01               	movlw	high _line3
  4204  0027BA  6F81               	movwf	(blink@line+1)& (0+255),b
  4205  0027BC  0E09               	movlw	9
  4206  0027BE  6F82               	movwf	blink@start& (0+255),b
  4207  0027C0  0E0B               	movlw	11
  4208  0027C2  6F83               	movwf	blink@end& (0+255),b
  4209  0027C4  EC35  F038         	call	_blink	;wreg free
  4210                           
  4211                           ;tela_TESTE_BOMBAS.h: 36: if (btPress(3)) {
  4212  0027C8  0E03               	movlw	3
  4213  0027CA  EC55  F03A         	call	_btPress
  4214  0027CE  0900               	iorlw	0
  4215  0027D0  B4D8               	btfsc	status,2,c
  4216  0027D2  D002               	goto	l781
  4217                           
  4218                           ;tela_TESTE_BOMBAS.h: 37: horario_de_teste++;
  4219  0027D4  0100               	movlb	0	; () banked
  4220  0027D6  2BE7               	incf	_horario_de_teste& (0+255),f,b
  4221  0027D8                     l781:
  4222  0027D8  FFFF               	dw	65535	; assembler added errata NOP
  4223                           
  4224                           ;tela_TESTE_BOMBAS.h: 38: }
  4225                           ;tela_TESTE_BOMBAS.h: 39: if (btPress(2)) {
  4226                           
  4227                           ; BSR set to: 0
  4228  0027DA  0E02               	movlw	2
  4229  0027DC  EC55  F03A         	call	_btPress
  4230  0027E0  0900               	iorlw	0
  4231  0027E2  B4D8               	btfsc	status,2,c
  4232  0027E4  D002               	goto	l782
  4233                           
  4234                           ;tela_TESTE_BOMBAS.h: 40: horario_de_teste--;
  4235  0027E6  0100               	movlb	0	; () banked
  4236  0027E8  07E7               	decf	_horario_de_teste& (0+255),f,b
  4237  0027EA                     l782:
  4238  0027EA  FFFF               	dw	65535	; assembler added errata NOP
  4239                           
  4240                           ;tela_TESTE_BOMBAS.h: 41: }
  4241                           ;tela_TESTE_BOMBAS.h: 42: if (horario_de_teste > 23 || horario_de_teste < 0) {
  4242                           
  4243                           ; BSR set to: 0
  4244  0027EC  0E18               	movlw	24
  4245  0027EE  0100               	movlb	0	; () banked
  4246  0027F0  61E7               	cpfslt	_horario_de_teste& (0+255),b
  4247  0027F2  D001               	goto	l785
  4248  0027F4  D033               	goto	l779
  4249  0027F6                     l785:
  4250  0027F6  FFFF               	dw	65535	; assembler added errata NOP
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;tela_TESTE_BOMBAS.h: 43: horario_de_teste = 0;
  4254                           
  4255                           ; BSR set to: 0
  4256  0027F8  0E00               	movlw	0
  4257  0027FA  6FE7               	movwf	_horario_de_teste& (0+255),b
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;tela_TESTE_BOMBAS.h: 44: }
  4261                           ;tela_TESTE_BOMBAS.h: 45: break;
  4262  0027FC  D02F               	goto	l779
  4263  0027FE  FFFF               	dw	65535	; assembler added errata NOP
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;tela_TESTE_BOMBAS.h: 47: blink(line4, 9, 11);
  4267                           
  4268                           ; BSR set to: 0
  4269  002800  0E41               	movlw	low _line4
  4270  002802  6F80               	movwf	blink@line& (0+255),b
  4271  002804  0E01               	movlw	high _line4
  4272  002806  6F81               	movwf	(blink@line+1)& (0+255),b
  4273  002808  0E09               	movlw	9
  4274  00280A  6F82               	movwf	blink@start& (0+255),b
  4275  00280C  0E0B               	movlw	11
  4276  00280E  6F83               	movwf	blink@end& (0+255),b
  4277  002810  EC35  F038         	call	_blink	;wreg free
  4278                           
  4279                           ;tela_TESTE_BOMBAS.h: 48: if (btPress(3)) {
  4280  002814  0E03               	movlw	3
  4281  002816  EC55  F03A         	call	_btPress
  4282  00281A  0900               	iorlw	0
  4283  00281C  B4D8               	btfsc	status,2,c
  4284  00281E  D002               	goto	l787
  4285                           
  4286                           ;tela_TESTE_BOMBAS.h: 49: habilitaTesteAutomatico = 1;
  4287  002820  0E01               	movlw	1
  4288  002822  6E6F               	movwf	_habilitaTesteAutomatico,c
  4289  002824                     l787:
  4290  002824  FFFF               	dw	65535	; assembler added errata NOP
  4291                           
  4292                           ;tela_TESTE_BOMBAS.h: 50: }
  4293                           ;tela_TESTE_BOMBAS.h: 51: if (btPress(2)) {
  4294  002826  0E02               	movlw	2
  4295  002828  EC55  F03A         	call	_btPress
  4296  00282C  0900               	iorlw	0
  4297  00282E  B4D8               	btfsc	status,2,c
  4298  002830  D015               	goto	l779
  4299                           
  4300                           ;tela_TESTE_BOMBAS.h: 52: habilitaTesteAutomatico = 0;
  4301  002832  0E00               	movlw	0
  4302  002834  6E6F               	movwf	_habilitaTesteAutomatico,c
  4303                           
  4304                           ;tela_TESTE_BOMBAS.h: 53: }
  4305                           ;tela_TESTE_BOMBAS.h: 54: break;
  4306  002836  D012               	goto	l779
  4307  002838  FFFF               	dw	65535	; assembler added errata NOP
  4308  00283A  0E00               	movlw	0
  4309  00283C  0100               	movlb	0	; () banked
  4310  00283E  6FE1               	movwf	_option_posi& (0+255),b
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;tela_TESTE_BOMBAS.h: 57: }
  4314                           
  4315                           ;tela_TESTE_BOMBAS.h: 56: break;
  4316  002840  D00D               	goto	l779
  4317  002842                     l775:
  4318  002842  FFFF               	dw	65535	; assembler added errata NOP
  4319                           
  4320                           ; BSR set to: 0
  4321  002844  0100               	movlb	0	; () banked
  4322  002846  51E1               	movf	_option_posi& (0+255),w,b
  4323                           
  4324                           ; Switch size 1, requested type "space"
  4325                           ; Number of cases is 3, Range of values is 0 to 2
  4326                           ; switch strategies available:
  4327                           ; Name         Instructions Cycles
  4328                           ; simple_byte           10     6 (average)
  4329                           ;	Chosen strategy is simple_byte
  4330  002848  0A00               	xorlw	0	; case 0
  4331  00284A  B4D8               	btfsc	status,2,c
  4332  00284C  D795               	goto	l776
  4333  00284E  0A01               	xorlw	1	; case 1
  4334  002850  B4D8               	btfsc	status,2,c
  4335  002852  D7AF               	goto	l780
  4336  002854  0A03               	xorlw	3	; case 2
  4337  002856  B4D8               	btfsc	status,2,c
  4338  002858  D7D2               	goto	l786
  4339  00285A  D7EE               	goto	l789
  4340  00285C                     l779:
  4341  00285C  FFFF               	dw	65535	; assembler added errata NOP
  4342                           
  4343                           ; BSR set to: 0
  4344  00285E  0012               	return		;funcret
  4345  002860  FFFF               	dw	65535	; errata NOP
  4346  002862                     __end_of_tela_testeBombas:
  4347                           	opt stack 0
  4348                           tblptru	equ	0xFF8
  4349                           tblptrh	equ	0xFF7
  4350                           tblptrl	equ	0xFF6
  4351                           tablat	equ	0xFF5
  4352                           postinc0	equ	0xFEE
  4353                           wreg	equ	0xFE8
  4354                           postdec1	equ	0xFE5
  4355                           fsr1l	equ	0xFE1
  4356                           status	equ	0xFD8
  4357                           
  4358 ;; *************** function _tela_ajusteRTC *****************
  4359 ;; Defined at:
  4360 ;;		line 11 in file "tela_RELOGIO.h"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;		None
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;		None
  4365 ;; Return value:  Size  Location     Type
  4366 ;;                  1    wreg      void 
  4367 ;; Registers used:
  4368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4374 ;;      Params:         0       0       0       0       0       0       0
  4375 ;;      Locals:         0       0       0       0       0       0       0
  4376 ;;      Temps:          0       0       0       0       0       0       0
  4377 ;;      Totals:         0       0       0       0       0       0       0
  4378 ;;Total ram usage:        0 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    9
  4381 ;; This function calls:
  4382 ;;		_blink
  4383 ;;		_btPress
  4384 ;;		_setDS1307TimeDate
  4385 ;;		_sprintf
  4386 ;;		_validaRTC
  4387 ;; This function is called by:
  4388 ;;		_main
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           	psect	text3
  4393  002048                     __ptext3:
  4394                           	opt stack 0
  4395  002048                     _tela_ajusteRTC:
  4396                           	opt stack 0
  4397  002048  FFFF               	dw	65535	; assembler added errata NOP
  4398                           
  4399                           ;tela_RELOGIO.h: 12: sprintf(line1, "DATA:");
  4400                           
  4401                           ;incstack = 0
  4402  00204A  0E80               	movlw	low _line1
  4403  00204C  0100               	movlb	0	; () banked
  4404  00204E  6FA1               	movwf	sprintf@wh& (0+255),b
  4405  002050  0E01               	movlw	high _line1
  4406  002052  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4407  002054  0ECC               	movlw	low STR_69
  4408  002056  6FA3               	movwf	sprintf@f& (0+255),b
  4409  002058  0E7F               	movlw	high STR_69
  4410  00205A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4411  00205C  ECDC  F01F         	call	_sprintf	;wreg free
  4412                           
  4413                           ;tela_RELOGIO.h: 13: sprintf(line2, "%02d/%02d/%02d", rtc.date, rtc.month, rtc.year);
  4414  002060  0E6B               	movlw	low _line2
  4415  002062  0100               	movlb	0	; () banked
  4416  002064  6FA1               	movwf	sprintf@wh& (0+255),b
  4417  002066  0E01               	movlw	high _line2
  4418  002068  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4419  00206A  0E20               	movlw	low STR_70
  4420  00206C  6FA3               	movwf	sprintf@f& (0+255),b
  4421  00206E  0E7E               	movlw	high STR_70
  4422  002070  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4423  002072  C079  F0A5         	movff	_rtc+4,?_sprintf+4
  4424  002076  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4425  002078  C07A  F0A7         	movff	_rtc+5,?_sprintf+6
  4426  00207C  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4427  00207E  C07B  F0A9         	movff	_rtc+6,?_sprintf+8
  4428  002082  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4429  002084  ECDC  F01F         	call	_sprintf	;wreg free
  4430                           
  4431                           ;tela_RELOGIO.h: 14: sprintf(&line1[11], "HORA:");
  4432  002088  0E8B               	movlw	low (_line1+11)
  4433  00208A  0100               	movlb	0	; () banked
  4434  00208C  6FA1               	movwf	sprintf@wh& (0+255),b
  4435  00208E  0E01               	movlw	high (_line1+11)
  4436  002090  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4437  002092  0EC6               	movlw	low STR_71
  4438  002094  6FA3               	movwf	sprintf@f& (0+255),b
  4439  002096  0E7F               	movlw	high STR_71
  4440  002098  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4441  00209A  ECDC  F01F         	call	_sprintf	;wreg free
  4442                           
  4443                           ;tela_RELOGIO.h: 15: sprintf(&line2[11], "%02d:%02d:%02d", rtc.hour, rtc.min, rtc.sec);
  4444  00209E  0E76               	movlw	low (_line2+11)
  4445  0020A0  0100               	movlb	0	; () banked
  4446  0020A2  6FA1               	movwf	sprintf@wh& (0+255),b
  4447  0020A4  0E01               	movlw	high (_line2+11)
  4448  0020A6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4449  0020A8  0E2F               	movlw	low STR_72
  4450  0020AA  6FA3               	movwf	sprintf@f& (0+255),b
  4451  0020AC  0E7E               	movlw	high STR_72
  4452  0020AE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4453  0020B0  C078  F0A5         	movff	_rtc+3,?_sprintf+4
  4454  0020B4  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4455  0020B6  C077  F0A7         	movff	_rtc+2,?_sprintf+6
  4456  0020BA  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4457  0020BC  C076  F0A9         	movff	_rtc+1,?_sprintf+8
  4458  0020C0  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4459  0020C2  ECDC  F01F         	call	_sprintf	;wreg free
  4460                           
  4461                           ;tela_RELOGIO.h: 17: if (btPress(4)) {
  4462  0020C6  0E04               	movlw	4
  4463  0020C8  EC55  F03A         	call	_btPress
  4464  0020CC  0900               	iorlw	0
  4465  0020CE  B4D8               	btfsc	status,2,c
  4466  0020D0  D004               	goto	l743
  4467                           
  4468                           ;tela_RELOGIO.h: 18: ajst_rtc = 1;
  4469  0020D2  0E01               	movlw	1
  4470  0020D4  6E64               	movwf	_ajst_rtc,c
  4471                           
  4472                           ;tela_RELOGIO.h: 19: option_posi++;
  4473  0020D6  0100               	movlb	0	; () banked
  4474  0020D8  2BE1               	incf	_option_posi& (0+255),f,b
  4475  0020DA                     l743:
  4476  0020DA  FFFF               	dw	65535	; assembler added errata NOP
  4477                           
  4478                           ;tela_RELOGIO.h: 20: }
  4479                           ;tela_RELOGIO.h: 21: if (btPress(1)) {
  4480                           
  4481                           ; BSR set to: 0
  4482  0020DC  0E01               	movlw	1
  4483  0020DE  EC55  F03A         	call	_btPress
  4484  0020E2  0900               	iorlw	0
  4485  0020E4  B4D8               	btfsc	status,2,c
  4486  0020E6  D0B0               	goto	l745
  4487                           
  4488                           ;tela_RELOGIO.h: 22: ajst_rtc = 0;
  4489  0020E8  0E00               	movlw	0
  4490  0020EA  6E64               	movwf	_ajst_rtc,c
  4491                           
  4492                           ;tela_RELOGIO.h: 23: option_posi = 0;
  4493  0020EC  0E00               	movlw	0
  4494  0020EE  0100               	movlb	0	; () banked
  4495  0020F0  6FE1               	movwf	_option_posi& (0+255),b
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;tela_RELOGIO.h: 24: setDS1307TimeDate(&rtc);
  4499  0020F2  0E75               	movlw	low _rtc
  4500  0020F4  6F8C               	movwf	setDS1307TimeDate@ptrToUserVal& (0+255),b
  4501  0020F6  0E00               	movlw	high _rtc
  4502  0020F8  6F8D               	movwf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),b
  4503  0020FA  ECF2  F019         	call	_setDS1307TimeDate	;wreg free
  4504                           
  4505                           ;tela_RELOGIO.h: 25: menu_posi = _menu_posi;
  4506  0020FE  C0DF  F0E0         	movff	__menu_posi,_menu_posi
  4507                           
  4508                           ;tela_RELOGIO.h: 26: _min++;
  4509  002102  0100               	movlb	0	; () banked
  4510  002104  2BEE               	incf	__min& (0+255),f,b
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;tela_RELOGIO.h: 27: }
  4514                           ;tela_RELOGIO.h: 28: switch (option_posi) {
  4515  002106  D0A0               	goto	l745
  4516  002108  FFFF               	dw	65535	; assembler added errata NOP
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;tela_RELOGIO.h: 30: blink(line2, 1, 2);
  4520                           
  4521                           ; BSR set to: 0
  4522  00210A  0E6B               	movlw	low _line2
  4523  00210C  6F80               	movwf	blink@line& (0+255),b
  4524  00210E  0E01               	movlw	high _line2
  4525  002110  6F81               	movwf	(blink@line+1)& (0+255),b
  4526  002112  0E01               	movlw	1
  4527  002114  6F82               	movwf	blink@start& (0+255),b
  4528  002116  0E02               	movlw	2
  4529  002118  6F83               	movwf	blink@end& (0+255),b
  4530  00211A  EC35  F038         	call	_blink	;wreg free
  4531                           
  4532                           ;tela_RELOGIO.h: 31: if (btPress(3)) {
  4533  00211E  0E03               	movlw	3
  4534  002120  EC55  F03A         	call	_btPress
  4535  002124  0900               	iorlw	0
  4536  002126  A4D8               	btfss	status,2,c
  4537                           
  4538                           ;tela_RELOGIO.h: 32: rtc.date++;
  4539  002128  2A79               	incf	_rtc+4,f,c
  4540                           
  4541                           ;tela_RELOGIO.h: 33: }
  4542                           ;tela_RELOGIO.h: 34: if (btPress(2)) {
  4543  00212A  0E02               	movlw	2
  4544  00212C  EC55  F03A         	call	_btPress
  4545  002130  0900               	iorlw	0
  4546  002132  B4D8               	btfsc	status,2,c
  4547  002134  D09F               	goto	l749
  4548                           
  4549                           ;tela_RELOGIO.h: 35: rtc.date--;
  4550  002136  0679               	decf	_rtc+4,f,c
  4551                           
  4552                           ;tela_RELOGIO.h: 36: }
  4553                           ;tela_RELOGIO.h: 37: break;
  4554  002138  D09D               	goto	l749
  4555  00213A  FFFF               	dw	65535	; assembler added errata NOP
  4556                           
  4557                           ;tela_RELOGIO.h: 39: blink(line2, 4, 5);
  4558  00213C  0E6B               	movlw	low _line2
  4559  00213E  0100               	movlb	0	; () banked
  4560  002140  6F80               	movwf	blink@line& (0+255),b
  4561  002142  0E01               	movlw	high _line2
  4562  002144  6F81               	movwf	(blink@line+1)& (0+255),b
  4563  002146  0E04               	movlw	4
  4564  002148  6F82               	movwf	blink@start& (0+255),b
  4565  00214A  0E05               	movlw	5
  4566  00214C  6F83               	movwf	blink@end& (0+255),b
  4567  00214E  EC35  F038         	call	_blink	;wreg free
  4568                           
  4569                           ;tela_RELOGIO.h: 40: if (btPress(3)) {
  4570  002152  0E03               	movlw	3
  4571  002154  EC55  F03A         	call	_btPress
  4572  002158  0900               	iorlw	0
  4573  00215A  A4D8               	btfss	status,2,c
  4574                           
  4575                           ;tela_RELOGIO.h: 41: rtc.month++;
  4576  00215C  2A7A               	incf	_rtc+5,f,c
  4577                           
  4578                           ;tela_RELOGIO.h: 42: }
  4579                           ;tela_RELOGIO.h: 43: if (btPress(2)) {
  4580  00215E  0E02               	movlw	2
  4581  002160  EC55  F03A         	call	_btPress
  4582  002164  0900               	iorlw	0
  4583  002166  B4D8               	btfsc	status,2,c
  4584  002168  D085               	goto	l749
  4585                           
  4586                           ;tela_RELOGIO.h: 44: rtc.month--;
  4587  00216A  067A               	decf	_rtc+5,f,c
  4588                           
  4589                           ;tela_RELOGIO.h: 45: }
  4590                           ;tela_RELOGIO.h: 46: break;
  4591  00216C  D083               	goto	l749
  4592  00216E  FFFF               	dw	65535	; assembler added errata NOP
  4593                           
  4594                           ;tela_RELOGIO.h: 48: blink(line2, 7, 8);
  4595  002170  0E6B               	movlw	low _line2
  4596  002172  0100               	movlb	0	; () banked
  4597  002174  6F80               	movwf	blink@line& (0+255),b
  4598  002176  0E01               	movlw	high _line2
  4599  002178  6F81               	movwf	(blink@line+1)& (0+255),b
  4600  00217A  0E07               	movlw	7
  4601  00217C  6F82               	movwf	blink@start& (0+255),b
  4602  00217E  0E08               	movlw	8
  4603  002180  6F83               	movwf	blink@end& (0+255),b
  4604  002182  EC35  F038         	call	_blink	;wreg free
  4605                           
  4606                           ;tela_RELOGIO.h: 49: if (btPress(3)) {
  4607  002186  0E03               	movlw	3
  4608  002188  EC55  F03A         	call	_btPress
  4609  00218C  0900               	iorlw	0
  4610  00218E  A4D8               	btfss	status,2,c
  4611                           
  4612                           ;tela_RELOGIO.h: 50: rtc.year++;
  4613  002190  2A7B               	incf	_rtc+6,f,c
  4614                           
  4615                           ;tela_RELOGIO.h: 51: }
  4616                           ;tela_RELOGIO.h: 52: if (btPress(2)) {
  4617  002192  0E02               	movlw	2
  4618  002194  EC55  F03A         	call	_btPress
  4619  002198  0900               	iorlw	0
  4620  00219A  B4D8               	btfsc	status,2,c
  4621  00219C  D06B               	goto	l749
  4622                           
  4623                           ;tela_RELOGIO.h: 53: rtc.year--;
  4624  00219E  067B               	decf	_rtc+6,f,c
  4625                           
  4626                           ;tela_RELOGIO.h: 54: }
  4627                           ;tela_RELOGIO.h: 55: break;
  4628  0021A0  D069               	goto	l749
  4629  0021A2  FFFF               	dw	65535	; assembler added errata NOP
  4630                           
  4631                           ;tela_RELOGIO.h: 57: blink(line2, 12, 13);
  4632  0021A4  0E6B               	movlw	low _line2
  4633  0021A6  0100               	movlb	0	; () banked
  4634  0021A8  6F80               	movwf	blink@line& (0+255),b
  4635  0021AA  0E01               	movlw	high _line2
  4636  0021AC  6F81               	movwf	(blink@line+1)& (0+255),b
  4637  0021AE  0E0C               	movlw	12
  4638  0021B0  6F82               	movwf	blink@start& (0+255),b
  4639  0021B2  0E0D               	movlw	13
  4640  0021B4  6F83               	movwf	blink@end& (0+255),b
  4641  0021B6  EC35  F038         	call	_blink	;wreg free
  4642                           
  4643                           ;tela_RELOGIO.h: 58: if (btPress(3)) {
  4644  0021BA  0E03               	movlw	3
  4645  0021BC  EC55  F03A         	call	_btPress
  4646  0021C0  0900               	iorlw	0
  4647  0021C2  A4D8               	btfss	status,2,c
  4648                           
  4649                           ;tela_RELOGIO.h: 59: rtc.hour++;
  4650  0021C4  2A78               	incf	_rtc+3,f,c
  4651                           
  4652                           ;tela_RELOGIO.h: 60: }
  4653                           ;tela_RELOGIO.h: 61: if (btPress(2)) {
  4654  0021C6  0E02               	movlw	2
  4655  0021C8  EC55  F03A         	call	_btPress
  4656  0021CC  0900               	iorlw	0
  4657  0021CE  B4D8               	btfsc	status,2,c
  4658  0021D0  D051               	goto	l749
  4659                           
  4660                           ;tela_RELOGIO.h: 62: rtc.hour--;
  4661  0021D2  0678               	decf	_rtc+3,f,c
  4662                           
  4663                           ;tela_RELOGIO.h: 63: }
  4664                           ;tela_RELOGIO.h: 64: break;
  4665  0021D4  D04F               	goto	l749
  4666  0021D6  FFFF               	dw	65535	; assembler added errata NOP
  4667                           
  4668                           ;tela_RELOGIO.h: 66: blink(line2, 15, 16);
  4669  0021D8  0E6B               	movlw	low _line2
  4670  0021DA  0100               	movlb	0	; () banked
  4671  0021DC  6F80               	movwf	blink@line& (0+255),b
  4672  0021DE  0E01               	movlw	high _line2
  4673  0021E0  6F81               	movwf	(blink@line+1)& (0+255),b
  4674  0021E2  0E0F               	movlw	15
  4675  0021E4  6F82               	movwf	blink@start& (0+255),b
  4676  0021E6  0E10               	movlw	16
  4677  0021E8  6F83               	movwf	blink@end& (0+255),b
  4678  0021EA  EC35  F038         	call	_blink	;wreg free
  4679                           
  4680                           ;tela_RELOGIO.h: 67: if (btPress(3)) {
  4681  0021EE  0E03               	movlw	3
  4682  0021F0  EC55  F03A         	call	_btPress
  4683  0021F4  0900               	iorlw	0
  4684  0021F6  A4D8               	btfss	status,2,c
  4685                           
  4686                           ;tela_RELOGIO.h: 68: rtc.min++;
  4687  0021F8  2A77               	incf	_rtc+2,f,c
  4688                           
  4689                           ;tela_RELOGIO.h: 69: }
  4690                           ;tela_RELOGIO.h: 70: if (btPress(2)) {
  4691  0021FA  0E02               	movlw	2
  4692  0021FC  EC55  F03A         	call	_btPress
  4693  002200  0900               	iorlw	0
  4694  002202  B4D8               	btfsc	status,2,c
  4695  002204  D037               	goto	l749
  4696                           
  4697                           ;tela_RELOGIO.h: 71: rtc.min--;
  4698  002206  0677               	decf	_rtc+2,f,c
  4699                           
  4700                           ;tela_RELOGIO.h: 72: }
  4701                           ;tela_RELOGIO.h: 73: break;
  4702  002208  D035               	goto	l749
  4703  00220A  FFFF               	dw	65535	; assembler added errata NOP
  4704                           
  4705                           ;tela_RELOGIO.h: 75: blink(line2, 18, 19);
  4706  00220C  0E6B               	movlw	low _line2
  4707  00220E  0100               	movlb	0	; () banked
  4708  002210  6F80               	movwf	blink@line& (0+255),b
  4709  002212  0E01               	movlw	high _line2
  4710  002214  6F81               	movwf	(blink@line+1)& (0+255),b
  4711  002216  0E12               	movlw	18
  4712  002218  6F82               	movwf	blink@start& (0+255),b
  4713  00221A  0E13               	movlw	19
  4714  00221C  6F83               	movwf	blink@end& (0+255),b
  4715  00221E  EC35  F038         	call	_blink	;wreg free
  4716                           
  4717                           ;tela_RELOGIO.h: 76: if (btPress(3)) {
  4718  002222  0E03               	movlw	3
  4719  002224  EC55  F03A         	call	_btPress
  4720  002228  0900               	iorlw	0
  4721  00222A  A4D8               	btfss	status,2,c
  4722                           
  4723                           ;tela_RELOGIO.h: 77: rtc.sec++;
  4724  00222C  2A76               	incf	_rtc+1,f,c
  4725                           
  4726                           ;tela_RELOGIO.h: 78: }
  4727                           ;tela_RELOGIO.h: 79: if (btPress(2)) {
  4728  00222E  0E02               	movlw	2
  4729  002230  EC55  F03A         	call	_btPress
  4730  002234  0900               	iorlw	0
  4731  002236  B4D8               	btfsc	status,2,c
  4732  002238  D01D               	goto	l749
  4733                           
  4734                           ;tela_RELOGIO.h: 80: rtc.sec--;
  4735  00223A  0676               	decf	_rtc+1,f,c
  4736                           
  4737                           ;tela_RELOGIO.h: 81: }
  4738                           ;tela_RELOGIO.h: 82: break;
  4739  00223C  D01B               	goto	l749
  4740  00223E  FFFF               	dw	65535	; assembler added errata NOP
  4741  002240  0E01               	movlw	1
  4742  002242  0100               	movlb	0	; () banked
  4743  002244  6FE1               	movwf	_option_posi& (0+255),b
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;tela_RELOGIO.h: 85: }
  4747                           
  4748                           ;tela_RELOGIO.h: 84: break;
  4749  002246  D016               	goto	l749
  4750  002248                     l745:
  4751  002248  FFFF               	dw	65535	; assembler added errata NOP
  4752                           
  4753                           ; BSR set to: 0
  4754  00224A  0100               	movlb	0	; () banked
  4755  00224C  51E1               	movf	_option_posi& (0+255),w,b
  4756                           
  4757                           ; Switch size 1, requested type "space"
  4758                           ; Number of cases is 6, Range of values is 1 to 6
  4759                           ; switch strategies available:
  4760                           ; Name         Instructions Cycles
  4761                           ; simple_byte           19    10 (average)
  4762                           ;	Chosen strategy is simple_byte
  4763  00224E  0A01               	xorlw	1	; case 1
  4764  002250  B4D8               	btfsc	status,2,c
  4765  002252  D75A               	goto	l746
  4766  002254  0A03               	xorlw	3	; case 2
  4767  002256  B4D8               	btfsc	status,2,c
  4768  002258  D770               	goto	l750
  4769  00225A  0A01               	xorlw	1	; case 3
  4770  00225C  B4D8               	btfsc	status,2,c
  4771  00225E  D787               	goto	l753
  4772  002260  0A07               	xorlw	7	; case 4
  4773  002262  B4D8               	btfsc	status,2,c
  4774  002264  D79E               	goto	l756
  4775  002266  0A01               	xorlw	1	; case 5
  4776  002268  B4D8               	btfsc	status,2,c
  4777  00226A  D7B5               	goto	l759
  4778  00226C  0A03               	xorlw	3	; case 6
  4779  00226E  B4D8               	btfsc	status,2,c
  4780  002270  D7CC               	goto	l762
  4781  002272  D7E5               	goto	l765
  4782  002274                     l749:
  4783  002274  FFFF               	dw	65535	; assembler added errata NOP
  4784                           
  4785                           ;tela_RELOGIO.h: 86: validaRTC();
  4786                           
  4787                           ; BSR set to: 0
  4788  002276  EC1C  F039         	call	_validaRTC	;wreg free
  4789  00227A  0012               	return		;funcret
  4790  00227C  FFFF               	dw	65535	; errata NOP
  4791  00227E                     __end_of_tela_ajusteRTC:
  4792                           	opt stack 0
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           postinc0	equ	0xFEE
  4798                           wreg	equ	0xFE8
  4799                           postdec1	equ	0xFE5
  4800                           fsr1l	equ	0xFE1
  4801                           status	equ	0xFD8
  4802                           
  4803 ;; *************** function _validaRTC *****************
  4804 ;; Defined at:
  4805 ;;		line 108 in file "ds1307.h"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;		None
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;		None
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  2  296[None  ] int 
  4812 ;; Registers used:
  4813 ;;		wreg, status,2, status,0
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4819 ;;      Params:         0       0       0       0       0       0       0
  4820 ;;      Locals:         0       0       0       0       0       0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0
  4822 ;;      Totals:         0       0       0       0       0       0       0
  4823 ;;Total ram usage:        0 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    6
  4826 ;; This function calls:
  4827 ;;		Nothing
  4828 ;; This function is called by:
  4829 ;;		_tela_ajusteRTC
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           	psect	text4
  4834  007238                     __ptext4:
  4835                           	opt stack 0
  4836  007238                     _validaRTC:
  4837                           	opt stack 0
  4838  007238  FFFF               	dw	65535	; assembler added errata NOP
  4839                           
  4840                           ;ds1307.h: 109: if (rtc.date > 31) rtc.date = 0;
  4841                           
  4842                           ;incstack = 0
  4843  00723A  0E1F               	movlw	31
  4844  00723C  6479               	cpfsgt	_rtc+4,c
  4845  00723E  D002               	goto	l297
  4846  007240  0E00               	movlw	0
  4847  007242  6E79               	movwf	_rtc+4,c
  4848  007244                     l297:
  4849  007244  FFFF               	dw	65535	; assembler added errata NOP
  4850                           
  4851                           ;ds1307.h: 110: if (rtc.hour > 23) rtc.hour = 0;
  4852  007246  0E17               	movlw	23
  4853  007248  6478               	cpfsgt	_rtc+3,c
  4854  00724A  D002               	goto	l298
  4855  00724C  0E00               	movlw	0
  4856  00724E  6E78               	movwf	_rtc+3,c
  4857  007250                     l298:
  4858  007250  FFFF               	dw	65535	; assembler added errata NOP
  4859                           
  4860                           ;ds1307.h: 111: if (rtc.min > 59) rtc.min = 0;
  4861  007252  0E3B               	movlw	59
  4862  007254  6477               	cpfsgt	_rtc+2,c
  4863  007256  D002               	goto	l299
  4864  007258  0E00               	movlw	0
  4865  00725A  6E77               	movwf	_rtc+2,c
  4866  00725C                     l299:
  4867  00725C  FFFF               	dw	65535	; assembler added errata NOP
  4868                           
  4869                           ;ds1307.h: 112: if (rtc.month > 12) rtc.month = 0;
  4870  00725E  0E0C               	movlw	12
  4871  007260  647A               	cpfsgt	_rtc+5,c
  4872  007262  D002               	goto	l300
  4873  007264  0E00               	movlw	0
  4874  007266  6E7A               	movwf	_rtc+5,c
  4875  007268                     l300:
  4876  007268  FFFF               	dw	65535	; assembler added errata NOP
  4877                           
  4878                           ;ds1307.h: 113: if (rtc.sec > 59) rtc.sec = 0;
  4879  00726A  0E3B               	movlw	59
  4880  00726C  6476               	cpfsgt	_rtc+1,c
  4881  00726E  D002               	goto	l301
  4882  007270  0E00               	movlw	0
  4883  007272  6E76               	movwf	_rtc+1,c
  4884  007274                     l301:
  4885  007274  FFFF               	dw	65535	; assembler added errata NOP
  4886                           
  4887                           ;ds1307.h: 114: if (rtc.year > 99) rtc.year = 0;
  4888  007276  0E63               	movlw	99
  4889  007278  647B               	cpfsgt	_rtc+6,c
  4890  00727A  D002               	goto	l302
  4891  00727C  0E00               	movlw	0
  4892  00727E  6E7B               	movwf	_rtc+6,c
  4893  007280                     l302:
  4894  007280  FFFF               	dw	65535	; assembler added errata NOP
  4895  007282  0012               	return		;funcret
  4896  007284  FFFF               	dw	65535	; errata NOP
  4897  007286                     __end_of_validaRTC:
  4898                           	opt stack 0
  4899                           tblptru	equ	0xFF8
  4900                           tblptrh	equ	0xFF7
  4901                           tblptrl	equ	0xFF6
  4902                           tablat	equ	0xFF5
  4903                           postinc0	equ	0xFEE
  4904                           wreg	equ	0xFE8
  4905                           postdec1	equ	0xFE5
  4906                           fsr1l	equ	0xFE1
  4907                           status	equ	0xFD8
  4908                           
  4909 ;; *************** function _setDS1307TimeDate *****************
  4910 ;; Defined at:
  4911 ;;		line 36 in file "ds1307.h"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  4914 ;;		 -> rtc(7), 
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;		None
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  1    wreg      void 
  4919 ;; Registers used:
  4920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4926 ;;      Params:         0       2       0       0       0       0       0
  4927 ;;      Locals:         0       0       0       0       0       0       0
  4928 ;;      Temps:          0       1       0       0       0       0       0
  4929 ;;      Totals:         0       3       0       0       0       0       0
  4930 ;;Total ram usage:        3 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:    8
  4933 ;; This function calls:
  4934 ;;		_DECtoBCD
  4935 ;;		_I2C_Start
  4936 ;;		_I2C_Stop
  4937 ;;		_I2C_Write
  4938 ;; This function is called by:
  4939 ;;		_tela_ajusteRTC
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           	psect	text5
  4944  0033E4                     __ptext5:
  4945                           	opt stack 0
  4946  0033E4                     _setDS1307TimeDate:
  4947                           	opt stack 0
  4948  0033E4  FFFF               	dw	65535	; assembler added errata NOP
  4949                           
  4950                           ;ds1307.h: 38: I2C_Start();
  4951                           
  4952                           ;incstack = 0
  4953  0033E6  EC98  F035         	call	_I2C_Start	;wreg free
  4954                           
  4955                           ;ds1307.h: 39: I2C_Write(0xD0);
  4956  0033EA  0E00               	movlw	0
  4957  0033EC  0100               	movlb	0	; () banked
  4958  0033EE  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4959  0033F0  0ED0               	movlw	208
  4960  0033F2  6F8A               	movwf	I2C_Write@d& (0+255),b
  4961  0033F4  ECB1  F035         	call	_I2C_Write	;wreg free
  4962                           
  4963                           ;ds1307.h: 40: I2C_Write(0x00);
  4964  0033F8  0E00               	movlw	0
  4965  0033FA  0100               	movlb	0	; () banked
  4966  0033FC  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  4967  0033FE  0E00               	movlw	0
  4968  003400  6F8A               	movwf	I2C_Write@d& (0+255),b
  4969  003402  ECB1  F035         	call	_I2C_Write	;wreg free
  4970                           
  4971                           ;ds1307.h: 41: I2C_Write(DECtoBCD(ptrToUserVal-> sec));
  4972  003406  0100               	movlb	0	; () banked
  4973  003408  EE20 F001          	lfsr	2,1
  4974  00340C  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4975  00340E  26D9               	addwf	fsr2l,f,c
  4976  003410  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4977  003412  22DA               	addwfc	fsr2h,f,c
  4978  003414  50DF               	movf	indf2,w,c
  4979  003416  EC95  F038         	call	_DECtoBCD
  4980  00341A  0100               	movlb	0	; () banked
  4981  00341C  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4982  00341E  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4983  003420  6F8A               	movwf	I2C_Write@d& (0+255),b
  4984  003422  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  4985  003424  ECB1  F035         	call	_I2C_Write	;wreg free
  4986                           
  4987                           ;ds1307.h: 42: I2C_Write(DECtoBCD(ptrToUserVal-> min));
  4988  003428  0100               	movlb	0	; () banked
  4989  00342A  EE20 F002          	lfsr	2,2
  4990  00342E  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  4991  003430  26D9               	addwf	fsr2l,f,c
  4992  003432  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  4993  003434  22DA               	addwfc	fsr2h,f,c
  4994  003436  50DF               	movf	indf2,w,c
  4995  003438  EC95  F038         	call	_DECtoBCD
  4996  00343C  0100               	movlb	0	; () banked
  4997  00343E  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  4998  003440  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  4999  003442  6F8A               	movwf	I2C_Write@d& (0+255),b
  5000  003444  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5001  003446  ECB1  F035         	call	_I2C_Write	;wreg free
  5002                           
  5003                           ;ds1307.h: 43: I2C_Write(DECtoBCD(ptrToUserVal-> hour));
  5004  00344A  0100               	movlb	0	; () banked
  5005  00344C  EE20 F003          	lfsr	2,3
  5006  003450  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5007  003452  26D9               	addwf	fsr2l,f,c
  5008  003454  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5009  003456  22DA               	addwfc	fsr2h,f,c
  5010  003458  50DF               	movf	indf2,w,c
  5011  00345A  EC95  F038         	call	_DECtoBCD
  5012  00345E  0100               	movlb	0	; () banked
  5013  003460  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5014  003462  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5015  003464  6F8A               	movwf	I2C_Write@d& (0+255),b
  5016  003466  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5017  003468  ECB1  F035         	call	_I2C_Write	;wreg free
  5018                           
  5019                           ;ds1307.h: 44: I2C_Write(DECtoBCD(ptrToUserVal-> day));
  5020  00346C  C08C  FFD9         	movff	setDS1307TimeDate@ptrToUserVal,fsr2l
  5021  003470  C08D  FFDA         	movff	setDS1307TimeDate@ptrToUserVal+1,fsr2h
  5022  003474  50DF               	movf	indf2,w,c
  5023  003476  EC95  F038         	call	_DECtoBCD
  5024  00347A  0100               	movlb	0	; () banked
  5025  00347C  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5026  00347E  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5027  003480  6F8A               	movwf	I2C_Write@d& (0+255),b
  5028  003482  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5029  003484  ECB1  F035         	call	_I2C_Write	;wreg free
  5030                           
  5031                           ;ds1307.h: 45: I2C_Write(DECtoBCD(ptrToUserVal-> date));
  5032  003488  0100               	movlb	0	; () banked
  5033  00348A  EE20 F004          	lfsr	2,4
  5034  00348E  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5035  003490  26D9               	addwf	fsr2l,f,c
  5036  003492  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5037  003494  22DA               	addwfc	fsr2h,f,c
  5038  003496  50DF               	movf	indf2,w,c
  5039  003498  EC95  F038         	call	_DECtoBCD
  5040  00349C  0100               	movlb	0	; () banked
  5041  00349E  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5042  0034A0  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5043  0034A2  6F8A               	movwf	I2C_Write@d& (0+255),b
  5044  0034A4  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5045  0034A6  ECB1  F035         	call	_I2C_Write	;wreg free
  5046                           
  5047                           ;ds1307.h: 46: I2C_Write(DECtoBCD(ptrToUserVal-> month));
  5048  0034AA  0100               	movlb	0	; () banked
  5049  0034AC  EE20 F005          	lfsr	2,5
  5050  0034B0  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5051  0034B2  26D9               	addwf	fsr2l,f,c
  5052  0034B4  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5053  0034B6  22DA               	addwfc	fsr2h,f,c
  5054  0034B8  50DF               	movf	indf2,w,c
  5055  0034BA  EC95  F038         	call	_DECtoBCD
  5056  0034BE  0100               	movlb	0	; () banked
  5057  0034C0  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5058  0034C2  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5059  0034C4  6F8A               	movwf	I2C_Write@d& (0+255),b
  5060  0034C6  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5061  0034C8  ECB1  F035         	call	_I2C_Write	;wreg free
  5062                           
  5063                           ;ds1307.h: 47: I2C_Write(DECtoBCD(ptrToUserVal-> year));
  5064  0034CC  0100               	movlb	0	; () banked
  5065  0034CE  EE20 F006          	lfsr	2,6
  5066  0034D2  518C               	movf	setDS1307TimeDate@ptrToUserVal& (0+255),w,b
  5067  0034D4  26D9               	addwf	fsr2l,f,c
  5068  0034D6  518D               	movf	(setDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  5069  0034D8  22DA               	addwfc	fsr2h,f,c
  5070  0034DA  50DF               	movf	indf2,w,c
  5071  0034DC  EC95  F038         	call	_DECtoBCD
  5072  0034E0  0100               	movlb	0	; () banked
  5073  0034E2  6F8E               	movwf	??_setDS1307TimeDate& (0+255),b
  5074  0034E4  518E               	movf	??_setDS1307TimeDate& (0+255),w,b
  5075  0034E6  6F8A               	movwf	I2C_Write@d& (0+255),b
  5076  0034E8  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
  5077  0034EA  ECB1  F035         	call	_I2C_Write	;wreg free
  5078                           
  5079                           ;ds1307.h: 48: I2C_Stop();
  5080  0034EE  EC9E  F035         	call	_I2C_Stop	;wreg free
  5081  0034F2  0012               	return		;funcret
  5082  0034F4  FFFF               	dw	65535	; errata NOP
  5083  0034F6                     __end_of_setDS1307TimeDate:
  5084                           	opt stack 0
  5085                           tblptru	equ	0xFF8
  5086                           tblptrh	equ	0xFF7
  5087                           tblptrl	equ	0xFF6
  5088                           tablat	equ	0xFF5
  5089                           postinc0	equ	0xFEE
  5090                           wreg	equ	0xFE8
  5091                           postdec1	equ	0xFE5
  5092                           fsr1l	equ	0xFE1
  5093                           indf2	equ	0xFDF
  5094                           fsr2h	equ	0xFDA
  5095                           fsr2l	equ	0xFD9
  5096                           status	equ	0xFD8
  5097                           
  5098 ;; *************** function _DECtoBCD *****************
  5099 ;; Defined at:
  5100 ;;		line 25 in file "function.c"
  5101 ;; Parameters:    Size  Location     Type
  5102 ;;  val             1    wreg     unsigned char 
  5103 ;; Auto vars:     Size  Location     Type
  5104 ;;  val             1    8[BANK0 ] unsigned char 
  5105 ;;  res             1    9[BANK0 ] unsigned char 
  5106 ;; Return value:  Size  Location     Type
  5107 ;;                  1    wreg      unsigned char 
  5108 ;; Registers used:
  5109 ;;		wreg, status,2, status,0, cstack
  5110 ;; Tracked objects:
  5111 ;;		On entry : 0/0
  5112 ;;		On exit  : 0/0
  5113 ;;		Unchanged: 0/0
  5114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5115 ;;      Params:         0       0       0       0       0       0       0
  5116 ;;      Locals:         0       2       0       0       0       0       0
  5117 ;;      Temps:          0       0       0       0       0       0       0
  5118 ;;      Totals:         0       2       0       0       0       0       0
  5119 ;;Total ram usage:        2 bytes
  5120 ;; Hardware stack levels used:    1
  5121 ;; Hardware stack levels required when called:    7
  5122 ;; This function calls:
  5123 ;;		___awdiv
  5124 ;;		___awmod
  5125 ;; This function is called by:
  5126 ;;		_setDS1307TimeDate
  5127 ;;		_setDS1307Time
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           	psect	text6
  5132  00712A                     __ptext6:
  5133                           	opt stack 0
  5134  00712A                     _DECtoBCD:
  5135                           	opt stack 0
  5136  00712A  FFFF               	dw	65535	; assembler added errata NOP
  5137                           
  5138                           ;incstack = 0
  5139                           ;DECtoBCD@val stored from wreg
  5140  00712C  0100               	movlb	0	; () banked
  5141  00712E  6F88               	movwf	DECtoBCD@val& (0+255),b
  5142                           
  5143                           ;function.c: 26: char res;
  5144                           ;function.c: 27: res = (val / 10) << 4;
  5145  007130  C088  F080         	movff	DECtoBCD@val,___awdiv@dividend
  5146  007134  0100               	movlb	0	; () banked
  5147  007136  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  5148  007138  0E00               	movlw	0
  5149  00713A  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  5150  00713C  0E0A               	movlw	10
  5151  00713E  6F82               	movwf	___awdiv@divisor& (0+255),b
  5152  007140  EC8F  F01F         	call	___awdiv	;wreg free
  5153  007144  0100               	movlb	0	; () banked
  5154  007146  3980               	swapf	?___awdiv& (0+255),w,b
  5155  007148  0BF0               	andlw	240
  5156  00714A  6F89               	movwf	DECtoBCD@res& (0+255),b
  5157                           
  5158                           ;function.c: 28: res = res | (val % 10);
  5159  00714C  C088  F080         	movff	DECtoBCD@val,___awmod@dividend
  5160  007150  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  5161  007152  0E00               	movlw	0
  5162  007154  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5163  007156  0E0A               	movlw	10
  5164  007158  6F82               	movwf	___awmod@divisor& (0+255),b
  5165  00715A  EC0A  F03B         	call	___awmod	;wreg free
  5166  00715E  0100               	movlb	0	; () banked
  5167  007160  5180               	movf	?___awmod& (0+255),w,b
  5168  007162  1189               	iorwf	DECtoBCD@res& (0+255),w,b
  5169  007164  6F89               	movwf	DECtoBCD@res& (0+255),b
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;function.c: 29: return res;
  5173  007166  5189               	movf	DECtoBCD@res& (0+255),w,b
  5174                           
  5175                           ; BSR set to: 0
  5176                           
  5177                           ; BSR set to: 0
  5178  007168  0012               	return		;funcret
  5179  00716A  FFFF               	dw	65535	; errata NOP
  5180  00716C                     __end_of_DECtoBCD:
  5181                           	opt stack 0
  5182                           tblptru	equ	0xFF8
  5183                           tblptrh	equ	0xFF7
  5184                           tblptrl	equ	0xFF6
  5185                           tablat	equ	0xFF5
  5186                           postinc0	equ	0xFEE
  5187                           wreg	equ	0xFE8
  5188                           postdec1	equ	0xFE5
  5189                           fsr1l	equ	0xFE1
  5190                           indf2	equ	0xFDF
  5191                           fsr2h	equ	0xFDA
  5192                           fsr2l	equ	0xFD9
  5193                           status	equ	0xFD8
  5194                           
  5195 ;; *************** function _telaPrincipal *****************
  5196 ;; Defined at:
  5197 ;;		line 25 in file "tela_PRINCIPAL.h"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;		None
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;		None
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      void 
  5204 ;; Registers used:
  5205 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5211 ;;      Params:         0       0       0       0       0       0       0
  5212 ;;      Locals:         0       2       0       0       0       0       0
  5213 ;;      Temps:          0       0       0       0       0       0       0
  5214 ;;      Totals:         0       2       0       0       0       0       0
  5215 ;;Total ram usage:        2 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:   10
  5218 ;; This function calls:
  5219 ;;		_blink
  5220 ;;		_btPress
  5221 ;;		_clearShiftREG
  5222 ;;		_intToFloatStr
  5223 ;;		_resetParametros
  5224 ;;		_sprintf
  5225 ;; This function is called by:
  5226 ;;		_main
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text7
  5231  00227E                     __ptext7:
  5232                           	opt stack 0
  5233  00227E                     _telaPrincipal:
  5234                           	opt stack 0
  5235  00227E  FFFF               	dw	65535	; assembler added errata NOP
  5236                           
  5237                           ;tela_PRINCIPAL.h: 27: sprintf(&line1[4], " %02d:%02d %02d/%02d", _hor, _min, _dia, _mes
      +                          );
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;incstack = 0
  5241  002280  0E84               	movlw	low (_line1+4)
  5242  002282  0100               	movlb	0	; () banked
  5243  002284  6FA1               	movwf	sprintf@wh& (0+255),b
  5244  002286  0E01               	movlw	high (_line1+4)
  5245  002288  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5246  00228A  0E17               	movlw	low STR_58
  5247  00228C  6FA3               	movwf	sprintf@f& (0+255),b
  5248  00228E  0E7C               	movlw	high STR_58
  5249  002290  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5250  002292  C0ED  F0A5         	movff	__hor,?_sprintf+4
  5251  002296  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  5252  002298  C0EE  F0A7         	movff	__min,?_sprintf+6
  5253  00229C  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  5254  00229E  C0EC  F0A9         	movff	__dia,?_sprintf+8
  5255  0022A2  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  5256  0022A4  C0EB  F0AB         	movff	__mes,?_sprintf+10
  5257  0022A8  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  5258  0022AA  ECDC  F01F         	call	_sprintf	;wreg free
  5259                           
  5260                           ;tela_PRINCIPAL.h: 29: line1[0] = 0x01;
  5261  0022AE  0E01               	movlw	1
  5262  0022B0  0101               	movlb	1	; () banked
  5263  0022B2  6F80               	movwf	_line1& (0+255),b
  5264                           
  5265                           ; BSR set to: 1
  5266                           ;tela_PRINCIPAL.h: 30: line1[1] = intensidadeSinal;
  5267  0022B4  C07D  F181         	movff	_intensidadeSinal,_line1+1
  5268                           
  5269                           ; BSR set to: 1
  5270                           ;tela_PRINCIPAL.h: 31: line1[19] = 0x05;
  5271  0022B8  0E05               	movlw	5
  5272  0022BA  6F93               	movwf	(_line1+19)& (0+255),b
  5273                           
  5274                           ;tela_PRINCIPAL.h: 33: switch (codigoErro) {
  5275  0022BC  D051               	goto	l716
  5276  0022BE  FFFF               	dw	65535	; assembler added errata NOP
  5277                           
  5278                           ;tela_PRINCIPAL.h: 35: sprintf(line4, " *falha eletrica");
  5279                           
  5280                           ; BSR set to: 1
  5281  0022C0  0E41               	movlw	low _line4
  5282  0022C2  0100               	movlb	0	; () banked
  5283  0022C4  6FA1               	movwf	sprintf@wh& (0+255),b
  5284  0022C6  0E01               	movlw	high _line4
  5285  0022C8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5286  0022CA  0EBF               	movlw	low STR_59
  5287  0022CC  6FA3               	movwf	sprintf@f& (0+255),b
  5288  0022CE  0E7D               	movlw	high STR_59
  5289  0022D0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5290  0022D2  ECDC  F01F         	call	_sprintf	;wreg free
  5291                           
  5292                           ;tela_PRINCIPAL.h: 36: break;
  5293  0022D6  D059               	goto	l718
  5294  0022D8  FFFF               	dw	65535	; assembler added errata NOP
  5295                           
  5296                           ;tela_PRINCIPAL.h: 38: sprintf(line4, " *falha GSM");
  5297  0022DA  0E41               	movlw	low _line4
  5298  0022DC  0100               	movlb	0	; () banked
  5299  0022DE  6FA1               	movwf	sprintf@wh& (0+255),b
  5300  0022E0  0E01               	movlw	high _line4
  5301  0022E2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5302  0022E4  0EFC               	movlw	low STR_60
  5303  0022E6  6FA3               	movwf	sprintf@f& (0+255),b
  5304  0022E8  0E7E               	movlw	high STR_60
  5305  0022EA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5306  0022EC  ECDC  F01F         	call	_sprintf	;wreg free
  5307                           
  5308                           ;tela_PRINCIPAL.h: 39: break;
  5309  0022F0  D04C               	goto	l718
  5310  0022F2  FFFF               	dw	65535	; assembler added errata NOP
  5311                           
  5312                           ;tela_PRINCIPAL.h: 41: sprintf(line4, " *falha val. ladrao");
  5313  0022F4  0E41               	movlw	low _line4
  5314  0022F6  0100               	movlb	0	; () banked
  5315  0022F8  6FA1               	movwf	sprintf@wh& (0+255),b
  5316  0022FA  0E01               	movlw	high _line4
  5317  0022FC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5318  0022FE  0E93               	movlw	low STR_61
  5319  002300  6FA3               	movwf	sprintf@f& (0+255),b
  5320  002302  0E7C               	movlw	high STR_61
  5321  002304  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5322  002306  ECDC  F01F         	call	_sprintf	;wreg free
  5323  00230A  D026               	goto	l7229
  5324  00230C  FFFF               	dw	65535	; assembler added errata NOP
  5325                           
  5326                           ;tela_PRINCIPAL.h: 45: sprintf(line4, " *falha B. jockey");
  5327  00230E  0E41               	movlw	low _line4
  5328  002310  0100               	movlb	0	; () banked
  5329  002312  6FA1               	movwf	sprintf@wh& (0+255),b
  5330  002314  0E01               	movlw	high _line4
  5331  002316  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5332  002318  0E8B               	movlw	low STR_62
  5333  00231A  6FA3               	movwf	sprintf@f& (0+255),b
  5334  00231C  0E7D               	movlw	high STR_62
  5335  00231E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5336  002320  ECDC  F01F         	call	_sprintf	;wreg free
  5337  002324  D019               	goto	l7229
  5338  002326  FFFF               	dw	65535	; assembler added errata NOP
  5339                           
  5340                           ;tela_PRINCIPAL.h: 49: sprintf(line4, " *falha B. principal");
  5341  002328  0E41               	movlw	low _line4
  5342  00232A  0100               	movlb	0	; () banked
  5343  00232C  6FA1               	movwf	sprintf@wh& (0+255),b
  5344  00232E  0E01               	movlw	high _line4
  5345  002330  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5346  002332  0E2C               	movlw	low STR_63
  5347  002334  6FA3               	movwf	sprintf@f& (0+255),b
  5348  002336  0E7C               	movlw	high STR_63
  5349  002338  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5350  00233A  ECDC  F01F         	call	_sprintf	;wreg free
  5351  00233E  D00C               	goto	l7229
  5352  002340  FFFF               	dw	65535	; assembler added errata NOP
  5353                           
  5354                           ;tela_PRINCIPAL.h: 53: sprintf(line4, " *falha B. combustao");
  5355  002342  0E41               	movlw	low _line4
  5356  002344  0100               	movlb	0	; () banked
  5357  002346  6FA1               	movwf	sprintf@wh& (0+255),b
  5358  002348  0E01               	movlw	high _line4
  5359  00234A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5360  00234C  0E41               	movlw	low STR_64
  5361  00234E  6FA3               	movwf	sprintf@f& (0+255),b
  5362  002350  0E7C               	movlw	high STR_64
  5363  002352  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5364  002354  ECDC  F01F         	call	_sprintf	;wreg free
  5365  002358                     l7229:
  5366  002358  FFFF               	dw	65535	; assembler added errata NOP
  5367                           
  5368                           ;tela_PRINCIPAL.h: 54: shift[1] = 1;
  5369  00235A  0E01               	movlw	1
  5370  00235C  6E45               	movwf	_shift+1,c
  5371                           
  5372                           ;tela_PRINCIPAL.h: 56: }
  5373                           
  5374                           ;tela_PRINCIPAL.h: 55: break;
  5375  00235E  D015               	goto	l718
  5376  002360                     l716:
  5377  002360  FFFF               	dw	65535	; assembler added errata NOP
  5378  002362  0100               	movlb	0	; () banked
  5379  002364  51F3               	movf	_codigoErro& (0+255),w,b
  5380                           
  5381                           ; Switch size 1, requested type "space"
  5382                           ; Number of cases is 6, Range of values is 1 to 6
  5383                           ; switch strategies available:
  5384                           ; Name         Instructions Cycles
  5385                           ; simple_byte           19    10 (average)
  5386                           ;	Chosen strategy is simple_byte
  5387  002366  0A01               	xorlw	1	; case 1
  5388  002368  B4D8               	btfsc	status,2,c
  5389  00236A  D7A9               	goto	l717
  5390  00236C  0A03               	xorlw	3	; case 2
  5391  00236E  B4D8               	btfsc	status,2,c
  5392  002370  D7B3               	goto	l719
  5393  002372  0A01               	xorlw	1	; case 3
  5394  002374  B4D8               	btfsc	status,2,c
  5395  002376  D7BD               	goto	l720
  5396  002378  0A07               	xorlw	7	; case 4
  5397  00237A  B4D8               	btfsc	status,2,c
  5398  00237C  D7C7               	goto	l721
  5399  00237E  0A01               	xorlw	1	; case 5
  5400  002380  B4D8               	btfsc	status,2,c
  5401  002382  D7D1               	goto	l722
  5402  002384  0A03               	xorlw	3	; case 6
  5403  002386  B4D8               	btfsc	status,2,c
  5404  002388  D7DB               	goto	l723
  5405  00238A                     l718:
  5406  00238A  FFFF               	dw	65535	; assembler added errata NOP
  5407                           
  5408                           ;tela_PRINCIPAL.h: 58: if (ocorrendoIncendio) {
  5409                           
  5410                           ; BSR set to: 0
  5411  00238C  0100               	movlb	0	; () banked
  5412  00238E  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  5413  002390  B4D8               	btfsc	status,2,c
  5414  002392  D00A               	goto	l724
  5415                           
  5416                           ; BSR set to: 0
  5417                           ;tela_PRINCIPAL.h: 59: sprintf(line2, " ALERTA DE INCENDIO");
  5418  002394  0E6B               	movlw	low _line2
  5419  002396  6FA1               	movwf	sprintf@wh& (0+255),b
  5420  002398  0E01               	movlw	high _line2
  5421  00239A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5422  00239C  0E7F               	movlw	low STR_65
  5423  00239E  6FA3               	movwf	sprintf@f& (0+255),b
  5424  0023A0  0E7C               	movlw	high STR_65
  5425  0023A2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5426  0023A4  ECDC  F01F         	call	_sprintf	;wreg free
  5427  0023A8                     l724:
  5428  0023A8  FFFF               	dw	65535	; assembler added errata NOP
  5429                           
  5430                           ;tela_PRINCIPAL.h: 60: }
  5431                           ;tela_PRINCIPAL.h: 62: if (flagErroTransdutor) {
  5432  0023AA  5071               	movf	_flagErroTransdutor,w,c
  5433  0023AC  B4D8               	btfsc	status,2,c
  5434  0023AE  D013               	goto	l725
  5435                           
  5436                           ;tela_PRINCIPAL.h: 63: clearShiftREG();
  5437  0023B0  EC31  F037         	call	_clearShiftREG	;wreg free
  5438                           
  5439                           ;tela_PRINCIPAL.h: 64: sprintf(&line3[1], "Erro no Transdutor");
  5440  0023B4  0E57               	movlw	low (_line3+1)
  5441  0023B6  0100               	movlb	0	; () banked
  5442  0023B8  6FA1               	movwf	sprintf@wh& (0+255),b
  5443  0023BA  0E01               	movlw	high (_line3+1)
  5444  0023BC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5445  0023BE  0E30               	movlw	low STR_66
  5446  0023C0  6FA3               	movwf	sprintf@f& (0+255),b
  5447  0023C2  0E7D               	movlw	high STR_66
  5448  0023C4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5449  0023C6  ECDC  F01F         	call	_sprintf	;wreg free
  5450                           
  5451                           ;tela_PRINCIPAL.h: 65: ocorrendoIncendio = 0;
  5452  0023CA  0E00               	movlw	0
  5453  0023CC  0100               	movlb	0	; () banked
  5454  0023CE  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;tela_PRINCIPAL.h: 66: shift[1] = 1;
  5458  0023D0  0E01               	movlw	1
  5459  0023D2  6E45               	movwf	_shift+1,c
  5460                           
  5461                           ;tela_PRINCIPAL.h: 67: } else {
  5462  0023D4  D018               	goto	l726
  5463  0023D6                     l725:
  5464  0023D6  FFFF               	dw	65535	; assembler added errata NOP
  5465                           
  5466                           ;tela_PRINCIPAL.h: 68: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5467                           
  5468                           ; BSR set to: 0
  5469  0023D8  0100               	movlb	0	; () banked
  5470  0023DA  51F9               	movf	_pressao& (0+255),w,b
  5471  0023DC  EC1F  F03C         	call	_intToFloatStr
  5472  0023E0  C0B5  F0C2         	movff	?_intToFloatStr,_telaPrincipal$2382
  5473  0023E4  C0B6  F0C3         	movff	?_intToFloatStr+1,_telaPrincipal$2382+1
  5474                           
  5475                           ;tela_PRINCIPAL.h: 68: sprintf(&line3[2], "Pressao %s BAR", intToFloatStr(pressao));
  5476  0023E8  0E58               	movlw	low (_line3+2)
  5477  0023EA  0100               	movlb	0	; () banked
  5478  0023EC  6FA1               	movwf	sprintf@wh& (0+255),b
  5479  0023EE  0E01               	movlw	high (_line3+2)
  5480  0023F0  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5481  0023F2  0E11               	movlw	low STR_40
  5482  0023F4  6FA3               	movwf	sprintf@f& (0+255),b
  5483  0023F6  0E7E               	movlw	high STR_40
  5484  0023F8  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5485  0023FA  C0C2  F0A5         	movff	_telaPrincipal$2382,?_sprintf+4
  5486  0023FE  C0C3  F0A6         	movff	_telaPrincipal$2382+1,?_sprintf+5
  5487  002402  ECDC  F01F         	call	_sprintf	;wreg free
  5488  002406                     l726:
  5489  002406  FFFF               	dw	65535	; assembler added errata NOP
  5490                           
  5491                           ;tela_PRINCIPAL.h: 69: }
  5492                           ;tela_PRINCIPAL.h: 72: if (codigoErro > 1 || ocorrendoIncendio) {
  5493  002408  0E02               	movlw	2
  5494  00240A  0100               	movlb	0	; () banked
  5495  00240C  61F3               	cpfslt	_codigoErro& (0+255),b
  5496  00240E  D003               	goto	u8160
  5497                           
  5498                           ; BSR set to: 0
  5499  002410  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
  5500  002412  B4D8               	btfsc	status,2,c
  5501  002414  D016               	goto	l731
  5502  002416                     u8160:
  5503  002416  FFFF               	dw	65535	; assembler added errata NOP
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;tela_PRINCIPAL.h: 73: if (flagTexto) {
  5507                           
  5508                           ; BSR set to: 0
  5509  002418  5072               	movf	_flagTexto,w,c
  5510  00241A  B4D8               	btfsc	status,2,c
  5511  00241C  D00A               	goto	l730
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;tela_PRINCIPAL.h: 74: sprintf(line4, " Press ESC p/ Reset");
  5515  00241E  0E41               	movlw	low _line4
  5516  002420  6FA1               	movwf	sprintf@wh& (0+255),b
  5517  002422  0E01               	movlw	high _line4
  5518  002424  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5519  002426  0EE3               	movlw	low STR_68
  5520  002428  6FA3               	movwf	sprintf@f& (0+255),b
  5521  00242A  0E7C               	movlw	high STR_68
  5522  00242C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5523  00242E  ECDC  F01F         	call	_sprintf	;wreg free
  5524  002432                     l730:
  5525  002432  FFFF               	dw	65535	; assembler added errata NOP
  5526                           
  5527                           ;tela_PRINCIPAL.h: 75: }
  5528                           ;tela_PRINCIPAL.h: 76: if (btPress(1)) {
  5529  002434  0E01               	movlw	1
  5530  002436  EC55  F03A         	call	_btPress
  5531  00243A  0900               	iorlw	0
  5532  00243C  A4D8               	btfss	status,2,c
  5533                           
  5534                           ;tela_PRINCIPAL.h: 77: resetParametros();
  5535  00243E  EC7C  F036         	call	_resetParametros	;wreg free
  5536  002442                     l731:
  5537  002442  FFFF               	dw	65535	; assembler added errata NOP
  5538                           
  5539                           ;tela_PRINCIPAL.h: 78: }
  5540                           ;tela_PRINCIPAL.h: 79: }
  5541                           ;tela_PRINCIPAL.h: 81: if (btPress(4)) {
  5542  002444  0E04               	movlw	4
  5543  002446  EC55  F03A         	call	_btPress
  5544  00244A  0900               	iorlw	0
  5545  00244C  B4D8               	btfsc	status,2,c
  5546  00244E  D005               	goto	l732
  5547                           
  5548                           ;tela_PRINCIPAL.h: 82: menu_posi = 1;
  5549  002450  0E01               	movlw	1
  5550  002452  0100               	movlb	0	; () banked
  5551  002454  6FE0               	movwf	_menu_posi& (0+255),b
  5552                           
  5553                           ;tela_PRINCIPAL.h: 83: sub_menu_posi = 1;
  5554  002456  0E01               	movlw	1
  5555  002458  6E66               	movwf	_sub_menu_posi,c
  5556  00245A                     l732:
  5557  00245A  FFFF               	dw	65535	; assembler added errata NOP
  5558                           
  5559                           ;tela_PRINCIPAL.h: 84: }
  5560                           ;tela_PRINCIPAL.h: 87: if (!PORTCbits.RC0) {
  5561                           
  5562                           ; BSR set to: 0
  5563  00245C  B082               	btfsc	3970,0,c	;volatile
  5564  00245E  D011               	goto	l734
  5565                           
  5566                           ;tela_PRINCIPAL.h: 88: blink(line1, 20, 20);
  5567  002460  0E80               	movlw	low _line1
  5568  002462  0100               	movlb	0	; () banked
  5569  002464  6F80               	movwf	blink@line& (0+255),b
  5570  002466  0E01               	movlw	high _line1
  5571  002468  6F81               	movwf	(blink@line+1)& (0+255),b
  5572  00246A  0E14               	movlw	20
  5573  00246C  6F82               	movwf	blink@start& (0+255),b
  5574  00246E  0E14               	movlw	20
  5575  002470  6F83               	movwf	blink@end& (0+255),b
  5576  002472  EC35  F038         	call	_blink	;wreg free
  5577                           
  5578                           ;tela_PRINCIPAL.h: 89: if (codigoErro == 0) {
  5579  002476  0100               	movlb	0	; () banked
  5580  002478  51F3               	movf	_codigoErro& (0+255),w,b
  5581  00247A  A4D8               	btfss	status,2,c
  5582  00247C  D002               	goto	l734
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;tela_PRINCIPAL.h: 90: codigoErro = 1;
  5586  00247E  0E01               	movlw	1
  5587  002480  6FF3               	movwf	_codigoErro& (0+255),b
  5588  002482                     l734:
  5589  002482  FFFF               	dw	65535	; assembler added errata NOP
  5590                           
  5591                           ;tela_PRINCIPAL.h: 91: }
  5592                           ;tela_PRINCIPAL.h: 92: }
  5593                           ;tela_PRINCIPAL.h: 93: if (status_jockey == 0) {
  5594                           
  5595                           ; BSR set to: 0
  5596  002484  0100               	movlb	0	; () banked
  5597  002486  51FE               	movf	_status_jockey& (0+255),w,b
  5598  002488  A4D8               	btfss	status,2,c
  5599  00248A  D002               	goto	l735
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;tela_PRINCIPAL.h: 94: codigoErro = 4;
  5603  00248C  0E04               	movlw	4
  5604  00248E  D00B               	goto	L9
  5605  002490                     l735:
  5606  002490  FFFF               	dw	65535	; assembler added errata NOP
  5607                           
  5608                           ; BSR set to: 0
  5609                           
  5610                           ; BSR set to: 0
  5611  002492  51FD               	movf	_status_principal& (0+255),w,b
  5612  002494  A4D8               	btfss	status,2,c
  5613  002496  D002               	goto	l737
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;tela_PRINCIPAL.h: 96: codigoErro = 5;
  5617  002498  0E05               	movlw	5
  5618  00249A  D005               	goto	L9
  5619  00249C                     l737:
  5620  00249C  FFFF               	dw	65535	; assembler added errata NOP
  5621                           
  5622                           ; BSR set to: 0
  5623                           
  5624                           ; BSR set to: 0
  5625  00249E  51FC               	movf	_status_estacionaria& (0+255),w,b
  5626  0024A0  A4D8               	btfss	status,2,c
  5627  0024A2  D003               	goto	l739
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;tela_PRINCIPAL.h: 98: codigoErro = 6;
  5631  0024A4  0E06               	movlw	6
  5632  0024A6                     L9:
  5633  0024A6  FFFF               	dw	65535	; assembler added errata NOP
  5634  0024A8  6FF3               	movwf	_codigoErro& (0+255),b
  5635  0024AA                     l739:
  5636  0024AA  FFFF               	dw	65535	; assembler added errata NOP
  5637                           
  5638                           ; BSR set to: 0
  5639                           
  5640                           ; BSR set to: 0
  5641                           
  5642                           ; BSR set to: 0
  5643                           
  5644                           ; BSR set to: 0
  5645  0024AC  0012               	return		;funcret
  5646  0024AE  FFFF               	dw	65535	; errata NOP
  5647  0024B0                     __end_of_telaPrincipal:
  5648                           	opt stack 0
  5649                           tblptru	equ	0xFF8
  5650                           tblptrh	equ	0xFF7
  5651                           tblptrl	equ	0xFF6
  5652                           tablat	equ	0xFF5
  5653                           postinc0	equ	0xFEE
  5654                           wreg	equ	0xFE8
  5655                           postdec1	equ	0xFE5
  5656                           fsr1l	equ	0xFE1
  5657                           indf2	equ	0xFDF
  5658                           fsr2h	equ	0xFDA
  5659                           fsr2l	equ	0xFD9
  5660                           status	equ	0xFD8
  5661                           
  5662 ;; *************** function _resetParametros *****************
  5663 ;; Defined at:
  5664 ;;		line 12 in file "tela_PRINCIPAL.h"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;		None
  5667 ;; Auto vars:     Size  Location     Type
  5668 ;;		None
  5669 ;; Return value:  Size  Location     Type
  5670 ;;                  1    wreg      void 
  5671 ;; Registers used:
  5672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5673 ;; Tracked objects:
  5674 ;;		On entry : 0/0
  5675 ;;		On exit  : 0/0
  5676 ;;		Unchanged: 0/0
  5677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5678 ;;      Params:         0       0       0       0       0       0       0
  5679 ;;      Locals:         0       0       0       0       0       0       0
  5680 ;;      Temps:          0       0       0       0       0       0       0
  5681 ;;      Totals:         0       0       0       0       0       0       0
  5682 ;;Total ram usage:        0 bytes
  5683 ;; Hardware stack levels used:    1
  5684 ;; Hardware stack levels required when called:    7
  5685 ;; This function calls:
  5686 ;;		_clearShiftREG
  5687 ;; This function is called by:
  5688 ;;		_telaPrincipal
  5689 ;; This function uses a non-reentrant model
  5690 ;;
  5691                           
  5692                           	psect	text8
  5693  006CF8                     __ptext8:
  5694                           	opt stack 0
  5695  006CF8                     _resetParametros:
  5696                           	opt stack 0
  5697  006CF8  FFFF               	dw	65535	; assembler added errata NOP
  5698                           
  5699                           ;tela_PRINCIPAL.h: 13: ocorrendoIncendio = 0;
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;incstack = 0
  5703  006CFA  0E00               	movlw	0
  5704  006CFC  0100               	movlb	0	; () banked
  5705  006CFE  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
  5706                           
  5707                           ;tela_PRINCIPAL.h: 14: codigoErro = 0;
  5708  006D00  0E00               	movlw	0
  5709  006D02  6FF3               	movwf	_codigoErro& (0+255),b
  5710                           
  5711                           ;tela_PRINCIPAL.h: 15: status_estacionaria = 1;
  5712  006D04  0E01               	movlw	1
  5713  006D06  6FFC               	movwf	_status_estacionaria& (0+255),b
  5714                           
  5715                           ;tela_PRINCIPAL.h: 16: status_jockey = 1;
  5716  006D08  0E01               	movlw	1
  5717  006D0A  6FFE               	movwf	_status_jockey& (0+255),b
  5718                           
  5719                           ;tela_PRINCIPAL.h: 17: status_principal = 1;
  5720  006D0C  0E01               	movlw	1
  5721  006D0E  6FFD               	movwf	_status_principal& (0+255),b
  5722                           
  5723                           ;tela_PRINCIPAL.h: 18: gsmOcupado = 0;
  5724  006D10  0E00               	movlw	0
  5725  006D12  6FF4               	movwf	_gsmOcupado& (0+255),b
  5726                           
  5727                           ;tela_PRINCIPAL.h: 19: shift[1] = 0;
  5728  006D14  0E00               	movlw	0
  5729  006D16  6E45               	movwf	_shift+1,c
  5730                           
  5731                           ;tela_PRINCIPAL.h: 20: tempo_limite_partida = 0;
  5732  006D18  0E00               	movlw	0
  5733  006D1A  6E68               	movwf	_tempo_limite_partida,c
  5734                           
  5735                           ;tela_PRINCIPAL.h: 21: tempo_partida = 0;
  5736  006D1C  0E00               	movlw	0
  5737  006D1E  6E69               	movwf	_tempo_partida,c
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;tela_PRINCIPAL.h: 22: clearShiftREG();
  5741  006D20  EC31  F037         	call	_clearShiftREG	;wreg free
  5742  006D24  0012               	return		;funcret
  5743  006D26  FFFF               	dw	65535	; errata NOP
  5744  006D28                     __end_of_resetParametros:
  5745                           	opt stack 0
  5746                           tblptru	equ	0xFF8
  5747                           tblptrh	equ	0xFF7
  5748                           tblptrl	equ	0xFF6
  5749                           tablat	equ	0xFF5
  5750                           postinc0	equ	0xFEE
  5751                           wreg	equ	0xFE8
  5752                           postdec1	equ	0xFE5
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           fsr2h	equ	0xFDA
  5756                           fsr2l	equ	0xFD9
  5757                           status	equ	0xFD8
  5758                           
  5759 ;; *************** function _setShiftREG *****************
  5760 ;; Defined at:
  5761 ;;		line 38 in file "shift595.h"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;		None
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;  i               1    2[BANK0 ] unsigned char 
  5766 ;;  estado          1    1[BANK0 ] unsigned char 
  5767 ;; Return value:  Size  Location     Type
  5768 ;;                  1    wreg      void 
  5769 ;; Registers used:
  5770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5771 ;; Tracked objects:
  5772 ;;		On entry : 0/0
  5773 ;;		On exit  : 0/0
  5774 ;;		Unchanged: 0/0
  5775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5776 ;;      Params:         0       0       0       0       0       0       0
  5777 ;;      Locals:         0       2       0       0       0       0       0
  5778 ;;      Temps:          0       1       0       0       0       0       0
  5779 ;;      Totals:         0       3       0       0       0       0       0
  5780 ;;Total ram usage:        3 bytes
  5781 ;; Hardware stack levels used:    1
  5782 ;; Hardware stack levels required when called:    6
  5783 ;; This function calls:
  5784 ;;		Nothing
  5785 ;; This function is called by:
  5786 ;;		_main
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           	psect	text9
  5791  0078D2                     __ptext9:
  5792                           	opt stack 0
  5793  0078D2                     _setShiftREG:
  5794                           	opt stack 0
  5795  0078D2  FFFF               	dw	65535	; assembler added errata NOP
  5796                           
  5797                           ;shift595.h: 39: unsigned char estado = 0;
  5798                           
  5799                           ;incstack = 0
  5800  0078D4  0E00               	movlw	0
  5801  0078D6  0100               	movlb	0	; () banked
  5802  0078D8  6F81               	movwf	setShiftREG@estado& (0+255),b
  5803                           
  5804                           ;shift595.h: 40: unsigned char i = 0;
  5805  0078DA  0E00               	movlw	0
  5806  0078DC  6F82               	movwf	setShiftREG@i& (0+255),b
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;shift595.h: 41: PORTEbits.RE1 = 0;
  5810  0078DE  9284               	bcf	3972,1,c	;volatile
  5811                           
  5812                           ;shift595.h: 42: for (i = 0; i < 8; i++) {
  5813  0078E0  0E00               	movlw	0
  5814  0078E2  6F82               	movwf	setShiftREG@i& (0+255),b
  5815  0078E4                     l6625:
  5816  0078E4  FFFF               	dw	65535	; assembler added errata NOP
  5817                           
  5818                           ; BSR set to: 0
  5819  0078E6  0E07               	movlw	7
  5820  0078E8  6582               	cpfsgt	setShiftREG@i& (0+255),b
  5821  0078EA  D001               	goto	l441
  5822  0078EC  D02F               	goto	u7170
  5823  0078EE                     l441:
  5824  0078EE  FFFF               	dw	65535	; assembler added errata NOP
  5825                           
  5826                           ; BSR set to: 0
  5827                           ;shift595.h: 43: if(shift[i]){
  5828                           
  5829                           ; BSR set to: 0
  5830  0078F0  5182               	movf	setShiftREG@i& (0+255),w,b
  5831  0078F2  0D01               	mullw	1
  5832  0078F4  0E44               	movlw	low _shift
  5833  0078F6  24F3               	addwf	prodl,w,c
  5834  0078F8  6ED9               	movwf	fsr2l,c
  5835  0078FA  0E00               	movlw	high _shift
  5836  0078FC  20F4               	addwfc	prodh,w,c
  5837  0078FE  6EDA               	movwf	fsr2h,c
  5838  007900  50DF               	movf	indf2,w,c
  5839  007902  B4D8               	btfsc	status,2,c
  5840  007904  D002               	goto	l443
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;shift595.h: 44: estado += i;
  5844  007906  5182               	movf	setShiftREG@i& (0+255),w,b
  5845  007908  2781               	addwf	setShiftREG@estado& (0+255),f,b
  5846  00790A                     l443:
  5847  00790A  FFFF               	dw	65535	; assembler added errata NOP
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;shift595.h: 45: }
  5851                           ;shift595.h: 47: PORTEbits.RE0 = 0;
  5852                           
  5853                           ; BSR set to: 0
  5854  00790C  9084               	bcf	3972,0,c	;volatile
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;shift595.h: 48: PORTEbits.RE2 = shift[i];
  5858  00790E  5182               	movf	setShiftREG@i& (0+255),w,b
  5859  007910  0D01               	mullw	1
  5860  007912  0E44               	movlw	low _shift
  5861  007914  24F3               	addwf	prodl,w,c
  5862  007916  6ED9               	movwf	fsr2l,c
  5863  007918  0E00               	movlw	high _shift
  5864  00791A  20F4               	addwfc	prodh,w,c
  5865  00791C  6EDA               	movwf	fsr2h,c
  5866  00791E  50DF               	movf	indf2,w,c
  5867  007920  6F80               	movwf	??_setShiftREG& (0+255),b
  5868  007922  4780               	rlncf	??_setShiftREG& (0+255),f,b
  5869  007924  4780               	rlncf	??_setShiftREG& (0+255),f,b
  5870  007926  5084               	movf	3972,w,c	;volatile
  5871  007928  1980               	xorwf	??_setShiftREG& (0+255),w,b
  5872  00792A  0BFB               	andlw	-5
  5873  00792C  1980               	xorwf	??_setShiftREG& (0+255),w,b
  5874  00792E  6E84               	movwf	3972,c	;volatile
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;shift595.h: 49: _delay((unsigned long)((3)*(8000000/4000.0)));
  5878  007930  0E06               	movlw	6
  5879  007932  0100               	movlb	0	; () banked
  5880  007934  6F80               	movwf	??_setShiftREG& (0+255),b
  5881  007936  0ED8               	movlw	216
  5882  007938                     u9377:
  5883  007938  FFFF               	dw	65535	; errata NOP
  5884  00793A  2EE8               	decfsz	wreg,f,c
  5885  00793C  D7FD               	bra	u9377
  5886  00793E  2F80               	decfsz	??_setShiftREG& (0+255),f,b
  5887  007940  D7FB               	bra	u9377
  5888  007942  F000               	nop	
  5889                           
  5890                           ;shift595.h: 50: PORTEbits.RE0 = 1;
  5891  007944  8084               	bsf	3972,0,c	;volatile
  5892  007946  0100               	movlb	0	; () banked
  5893  007948  2B82               	incf	setShiftREG@i& (0+255),f,b
  5894  00794A  D7CC               	goto	l6625
  5895  00794C                     u7170:
  5896  00794C  FFFF               	dw	65535	; assembler added errata NOP
  5897                           
  5898                           ; BSR set to: 0
  5899                           ;shift595.h: 51: }
  5900                           ;shift595.h: 52: PORTEbits.RE1 = 1;
  5901  00794E  8284               	bsf	3972,1,c	;volatile
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;shift595.h: 54: if(estado != _ultimoEstado){
  5905  007950  5061               	movf	__ultimoEstado,w,c
  5906  007952  1981               	xorwf	setShiftREG@estado& (0+255),w,b
  5907  007954  B4D8               	btfsc	status,2,c
  5908  007956  D004               	goto	l444
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;shift595.h: 55: _ultimoEstado = estado;
  5912  007958  C081  F061         	movff	setShiftREG@estado,__ultimoEstado
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;shift595.h: 56: flagMudancaEstadoSaidas = 1;
  5916  00795C  0E01               	movlw	1
  5917  00795E  6E70               	movwf	_flagMudancaEstadoSaidas,c
  5918  007960                     l444:
  5919  007960  FFFF               	dw	65535	; assembler added errata NOP
  5920                           
  5921                           ; BSR set to: 0
  5922                           
  5923                           ; BSR set to: 0
  5924  007962  0012               	return		;funcret
  5925  007964  FFFF               	dw	65535	; errata NOP
  5926  007966                     __end_of_setShiftREG:
  5927                           	opt stack 0
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           prodh	equ	0xFF4
  5933                           prodl	equ	0xFF3
  5934                           postinc0	equ	0xFEE
  5935                           wreg	equ	0xFE8
  5936                           postdec1	equ	0xFE5
  5937                           fsr1l	equ	0xFE1
  5938                           indf2	equ	0xFDF
  5939                           fsr2h	equ	0xFDA
  5940                           fsr2l	equ	0xFD9
  5941                           status	equ	0xFD8
  5942                           
  5943 ;; *************** function _lerParametros *****************
  5944 ;; Defined at:
  5945 ;;		line 9 in file "util.h"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;		None
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;  i               1   21[BANK0 ] unsigned char 
  5950 ;;  verifica_mem    1   20[BANK0 ] unsigned char 
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      void 
  5953 ;; Registers used:
  5954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5960 ;;      Params:         0       0       0       0       0       0       0
  5961 ;;      Locals:         0       2       0       0       0       0       0
  5962 ;;      Temps:          0       0       0       0       0       0       0
  5963 ;;      Totals:         0       2       0       0       0       0       0
  5964 ;;Total ram usage:        2 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:   10
  5967 ;; This function calls:
  5968 ;;		_readEEPROM16_ext
  5969 ;;		_readEEPROM_ext
  5970 ;;		_writeEEPROM_ext
  5971 ;; This function is called by:
  5972 ;;		_main
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976                           	psect	text10
  5977  0031A4                     __ptext10:
  5978                           	opt stack 0
  5979  0031A4                     _lerParametros:
  5980                           	opt stack 0
  5981  0031A4  FFFF               	dw	65535	; assembler added errata NOP
  5982                           
  5983                           ;util.h: 10: char i = 0;
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;incstack = 0
  5987  0031A6  0E00               	movlw	0
  5988  0031A8  0100               	movlb	0	; () banked
  5989  0031AA  6F95               	movwf	lerParametros@i& (0+255),b
  5990                           
  5991                           ;util.h: 11: char verifica_memoria_nova = 0;
  5992  0031AC  0E00               	movlw	0
  5993  0031AE  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;util.h: 12: verifica_memoria_nova = readEEPROM_ext(12);
  5997  0031B0  0E0C               	movlw	12
  5998  0031B2  EC6C  F039         	call	_readEEPROM_ext
  5999  0031B6  0100               	movlb	0	; () banked
  6000  0031B8  6F94               	movwf	lerParametros@verifica_memoria_nova& (0+255),b
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;util.h: 13: if (verifica_memoria_nova != 20) {
  6004  0031BA  0E14               	movlw	20
  6005  0031BC  1994               	xorwf	lerParametros@verifica_memoria_nova& (0+255),w,b
  6006  0031BE  B4D8               	btfsc	status,2,c
  6007  0031C0  D016               	goto	l639
  6008                           
  6009                           ; BSR set to: 0
  6010                           ;util.h: 14: for (i = 0; i < 100; i++) {
  6011  0031C2  0E00               	movlw	0
  6012  0031C4  6F95               	movwf	lerParametros@i& (0+255),b
  6013  0031C6                     l7067:
  6014  0031C6  FFFF               	dw	65535	; assembler added errata NOP
  6015                           
  6016                           ; BSR set to: 0
  6017  0031C8  0E63               	movlw	99
  6018  0031CA  6595               	cpfsgt	lerParametros@i& (0+255),b
  6019  0031CC  D001               	goto	l640
  6020  0031CE  D009               	goto	u7990
  6021  0031D0                     l640:
  6022  0031D0  FFFF               	dw	65535	; assembler added errata NOP
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;util.h: 15: writeEEPROM_ext(i, 0);
  6026                           
  6027                           ; BSR set to: 0
  6028  0031D2  0E00               	movlw	0
  6029  0031D4  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  6030  0031D6  5195               	movf	lerParametros@i& (0+255),w,b
  6031  0031D8  ECF9  F038         	call	_writeEEPROM_ext
  6032  0031DC  0100               	movlb	0	; () banked
  6033  0031DE  2B95               	incf	lerParametros@i& (0+255),f,b
  6034  0031E0  D7F2               	goto	l7067
  6035  0031E2                     u7990:
  6036  0031E2  FFFF               	dw	65535	; assembler added errata NOP
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;util.h: 16: }
  6040                           ;util.h: 17: writeEEPROM_ext(12, 20);
  6041                           
  6042                           ; BSR set to: 0
  6043  0031E4  0E14               	movlw	20
  6044  0031E6  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  6045  0031E8  0E0C               	movlw	12
  6046  0031EA  ECF9  F038         	call	_writeEEPROM_ext
  6047  0031EE                     l639:
  6048  0031EE  FFFF               	dw	65535	; assembler added errata NOP
  6049                           
  6050                           ;util.h: 18: }
  6051                           ;util.h: 20: sp_jockey = readEEPROM_ext(0);
  6052  0031F0  0E00               	movlw	0
  6053  0031F2  EC6C  F039         	call	_readEEPROM_ext
  6054  0031F6  0100               	movlb	0	; () banked
  6055  0031F8  6FE4               	movwf	_sp_jockey& (0+255),b
  6056                           
  6057                           ;util.h: 21: sp_principal = readEEPROM_ext(1);
  6058  0031FA  0E01               	movlw	1
  6059  0031FC  EC6C  F039         	call	_readEEPROM_ext
  6060  003200  0100               	movlb	0	; () banked
  6061  003202  6FE3               	movwf	_sp_principal& (0+255),b
  6062                           
  6063                           ;util.h: 22: sp_estacionaria = readEEPROM_ext(2);
  6064  003204  0E02               	movlw	2
  6065  003206  EC6C  F039         	call	_readEEPROM_ext
  6066  00320A  0100               	movlb	0	; () banked
  6067  00320C  6FE2               	movwf	_sp_estacionaria& (0+255),b
  6068                           
  6069                           ;util.h: 23: horimetro = readEEPROM16_ext(8);
  6070  00320E  0E08               	movlw	8
  6071  003210  EC68  F037         	call	_readEEPROM16_ext
  6072  003214  C08E  F103         	movff	?_readEEPROM16_ext,_horimetro
  6073  003218  C08F  F104         	movff	?_readEEPROM16_ext+1,_horimetro+1
  6074                           
  6075                           ;util.h: 24: sp_pressao_rede = readEEPROM_ext(4);
  6076  00321C  0E04               	movlw	4
  6077  00321E  EC6C  F039         	call	_readEEPROM_ext
  6078  003222  0100               	movlb	0	; () banked
  6079  003224  6FE5               	movwf	_sp_pressao_rede& (0+255),b
  6080                           
  6081                           ;util.h: 25: intervalo_teste_dia = readEEPROM_ext(6);
  6082  003226  0E06               	movlw	6
  6083  003228  EC6C  F039         	call	_readEEPROM_ext
  6084  00322C  0100               	movlb	0	; () banked
  6085  00322E  6FE9               	movwf	_intervalo_teste_dia& (0+255),b
  6086                           
  6087                           ;util.h: 26: tempo_limite_estacionaria = readEEPROM_ext(7);
  6088  003230  0E07               	movlw	7
  6089  003232  EC6C  F039         	call	_readEEPROM_ext
  6090  003236  0100               	movlb	0	; () banked
  6091  003238  6FE6               	movwf	_tempo_limite_estacionaria& (0+255),b
  6092                           
  6093                           ;util.h: 27: dias_restante_teste = readEEPROM_ext(10);
  6094  00323A  0E0A               	movlw	10
  6095  00323C  EC6C  F039         	call	_readEEPROM_ext
  6096  003240  0100               	movlb	0	; () banked
  6097  003242  6FE8               	movwf	_dias_restante_teste& (0+255),b
  6098                           
  6099                           ;util.h: 28: horario_de_teste = readEEPROM_ext(11);
  6100  003244  0E0B               	movlw	11
  6101  003246  EC6C  F039         	call	_readEEPROM_ext
  6102  00324A  0100               	movlb	0	; () banked
  6103  00324C  6FE7               	movwf	_horario_de_teste& (0+255),b
  6104                           
  6105                           ;util.h: 29: tempo_limite_teste_estacionaria = readEEPROM_ext(13);
  6106  00324E  0E0D               	movlw	13
  6107  003250  EC6C  F039         	call	_readEEPROM_ext
  6108  003254  6E67               	movwf	_tempo_limite_teste_estacionaria,c
  6109                           
  6110                           ;util.h: 31: habilitaTesteAutomatico = readEEPROM_ext(15);
  6111  003256  0E0F               	movlw	15
  6112  003258  EC6C  F039         	call	_readEEPROM_ext
  6113  00325C  6E6F               	movwf	_habilitaTesteAutomatico,c
  6114                           
  6115                           ;util.h: 33: for (i = 0; i < 11; i++) {
  6116  00325E  0E00               	movlw	0
  6117  003260  0100               	movlb	0	; () banked
  6118  003262  6F95               	movwf	lerParametros@i& (0+255),b
  6119  003264                     l7081:
  6120  003264  FFFF               	dw	65535	; assembler added errata NOP
  6121                           
  6122                           ; BSR set to: 0
  6123  003266  0E0A               	movlw	10
  6124  003268  6595               	cpfsgt	lerParametros@i& (0+255),b
  6125  00326A  D001               	goto	l642
  6126  00326C  D011               	goto	u8010
  6127  00326E                     l642:
  6128  00326E  FFFF               	dw	65535	; assembler added errata NOP
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;util.h: 34: tel1[i] = readEEPROM_ext(20 + i);
  6132                           
  6133                           ; BSR set to: 0
  6134  003270  5195               	movf	lerParametros@i& (0+255),w,b
  6135  003272  0D01               	mullw	1
  6136  003274  0EB5               	movlw	low _tel1
  6137  003276  24F3               	addwf	prodl,w,c
  6138  003278  6ED9               	movwf	fsr2l,c
  6139  00327A  0E01               	movlw	high _tel1
  6140  00327C  20F4               	addwfc	prodh,w,c
  6141  00327E  6EDA               	movwf	fsr2h,c
  6142  003280  5195               	movf	lerParametros@i& (0+255),w,b
  6143  003282  0F14               	addlw	20
  6144  003284  EC6C  F039         	call	_readEEPROM_ext
  6145  003288  6EDF               	movwf	indf2,c
  6146  00328A  0100               	movlb	0	; () banked
  6147  00328C  2B95               	incf	lerParametros@i& (0+255),f,b
  6148  00328E  D7EA               	goto	l7081
  6149  003290                     u8010:
  6150  003290  FFFF               	dw	65535	; assembler added errata NOP
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;util.h: 35: }
  6154                           ;util.h: 36: for (i = 0; i < 11; i++) {
  6155                           
  6156                           ; BSR set to: 0
  6157  003292  0E00               	movlw	0
  6158  003294  6F95               	movwf	lerParametros@i& (0+255),b
  6159  003296                     l7093:
  6160  003296  FFFF               	dw	65535	; assembler added errata NOP
  6161                           
  6162                           ; BSR set to: 0
  6163  003298  0E0A               	movlw	10
  6164  00329A  6595               	cpfsgt	lerParametros@i& (0+255),b
  6165  00329C  D001               	goto	l644
  6166  00329E  D011               	goto	u8030
  6167  0032A0                     l644:
  6168  0032A0  FFFF               	dw	65535	; assembler added errata NOP
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;util.h: 37: tel2[i] = readEEPROM_ext(40 + i);
  6172                           
  6173                           ; BSR set to: 0
  6174  0032A2  5195               	movf	lerParametros@i& (0+255),w,b
  6175  0032A4  0D01               	mullw	1
  6176  0032A6  0EA9               	movlw	low _tel2
  6177  0032A8  24F3               	addwf	prodl,w,c
  6178  0032AA  6ED9               	movwf	fsr2l,c
  6179  0032AC  0E01               	movlw	high _tel2
  6180  0032AE  20F4               	addwfc	prodh,w,c
  6181  0032B0  6EDA               	movwf	fsr2h,c
  6182  0032B2  5195               	movf	lerParametros@i& (0+255),w,b
  6183  0032B4  0F28               	addlw	40
  6184  0032B6  EC6C  F039         	call	_readEEPROM_ext
  6185  0032BA  6EDF               	movwf	indf2,c
  6186  0032BC  0100               	movlb	0	; () banked
  6187  0032BE  2B95               	incf	lerParametros@i& (0+255),f,b
  6188  0032C0  D7EA               	goto	l7093
  6189  0032C2                     u8030:
  6190  0032C2  FFFF               	dw	65535	; assembler added errata NOP
  6191                           
  6192                           ; BSR set to: 0
  6193                           
  6194                           ; BSR set to: 0
  6195  0032C4  0012               	return		;funcret
  6196  0032C6  FFFF               	dw	65535	; errata NOP
  6197  0032C8                     __end_of_lerParametros:
  6198                           	opt stack 0
  6199                           tblptru	equ	0xFF8
  6200                           tblptrh	equ	0xFF7
  6201                           tblptrl	equ	0xFF6
  6202                           tablat	equ	0xFF5
  6203                           prodh	equ	0xFF4
  6204                           prodl	equ	0xFF3
  6205                           postinc0	equ	0xFEE
  6206                           wreg	equ	0xFE8
  6207                           postdec1	equ	0xFE5
  6208                           fsr1l	equ	0xFE1
  6209                           indf2	equ	0xFDF
  6210                           fsr2h	equ	0xFDA
  6211                           fsr2l	equ	0xFD9
  6212                           status	equ	0xFD8
  6213                           
  6214 ;; *************** function _readEEPROM16_ext *****************
  6215 ;; Defined at:
  6216 ;;		line 48 in file "eeprom.h"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;  adress          1    wreg     unsigned char 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  adress          1   19[BANK0 ] unsigned char 
  6221 ;;  data            2   17[BANK0 ] unsigned int 
  6222 ;; Return value:  Size  Location     Type
  6223 ;;                  2   14[BANK0 ] unsigned int 
  6224 ;; Registers used:
  6225 ;;		wreg, status,2, status,0, cstack
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6231 ;;      Params:         0       2       0       0       0       0       0
  6232 ;;      Locals:         0       3       0       0       0       0       0
  6233 ;;      Temps:          0       1       0       0       0       0       0
  6234 ;;      Totals:         0       6       0       0       0       0       0
  6235 ;;Total ram usage:        6 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; Hardware stack levels required when called:    9
  6238 ;; This function calls:
  6239 ;;		_readEEPROM_ext
  6240 ;; This function is called by:
  6241 ;;		_lerParametros
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245                           	psect	text11
  6246  006ED0                     __ptext11:
  6247                           	opt stack 0
  6248  006ED0                     _readEEPROM16_ext:
  6249                           	opt stack 0
  6250  006ED0  FFFF               	dw	65535	; assembler added errata NOP
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;incstack = 0
  6254                           ;readEEPROM16_ext@adress stored from wreg
  6255  006ED2  0100               	movlb	0	; () banked
  6256  006ED4  6F93               	movwf	readEEPROM16_ext@adress& (0+255),b
  6257                           
  6258                           ;eeprom.h: 49: unsigned int data;
  6259                           ;eeprom.h: 50: data = readEEPROM_ext(adress + 1);
  6260  006ED6  0100               	movlb	0	; () banked
  6261  006ED8  2993               	incf	readEEPROM16_ext@adress& (0+255),w,b
  6262  006EDA  EC6C  F039         	call	_readEEPROM_ext
  6263  006EDE  0100               	movlb	0	; () banked
  6264  006EE0  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  6265  006EE2  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  6266  006EE4  6F91               	movwf	readEEPROM16_ext@data& (0+255),b
  6267  006EE6  6B92               	clrf	(readEEPROM16_ext@data+1)& (0+255),b
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;eeprom.h: 51: data <<= 8;
  6271  006EE8  5191               	movf	readEEPROM16_ext@data& (0+255),w,b
  6272  006EEA  6F92               	movwf	(readEEPROM16_ext@data+1)& (0+255),b
  6273  006EEC  6B91               	clrf	readEEPROM16_ext@data& (0+255),b
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;eeprom.h: 52: data |= readEEPROM_ext(adress);
  6277  006EEE  5193               	movf	readEEPROM16_ext@adress& (0+255),w,b
  6278  006EF0  EC6C  F039         	call	_readEEPROM_ext
  6279  006EF4  0100               	movlb	0	; () banked
  6280  006EF6  6F90               	movwf	??_readEEPROM16_ext& (0+255),b
  6281  006EF8  5190               	movf	??_readEEPROM16_ext& (0+255),w,b
  6282  006EFA  1391               	iorwf	readEEPROM16_ext@data& (0+255),f,b
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;eeprom.h: 53: return data;
  6286  006EFC  C091  F08E         	movff	readEEPROM16_ext@data,?_readEEPROM16_ext
  6287  006F00  C092  F08F         	movff	readEEPROM16_ext@data+1,?_readEEPROM16_ext+1
  6288                           
  6289                           ; BSR set to: 0
  6290                           
  6291                           ; BSR set to: 0
  6292  006F04  0012               	return		;funcret
  6293  006F06  FFFF               	dw	65535	; errata NOP
  6294  006F08                     __end_of_readEEPROM16_ext:
  6295                           	opt stack 0
  6296                           tblptru	equ	0xFF8
  6297                           tblptrh	equ	0xFF7
  6298                           tblptrl	equ	0xFF6
  6299                           tablat	equ	0xFF5
  6300                           prodh	equ	0xFF4
  6301                           prodl	equ	0xFF3
  6302                           postinc0	equ	0xFEE
  6303                           wreg	equ	0xFE8
  6304                           postdec1	equ	0xFE5
  6305                           fsr1l	equ	0xFE1
  6306                           indf2	equ	0xFDF
  6307                           fsr2h	equ	0xFDA
  6308                           fsr2l	equ	0xFD9
  6309                           status	equ	0xFD8
  6310                           
  6311 ;; *************** function _informacoes *****************
  6312 ;; Defined at:
  6313 ;;		line 7 in file "tela_INFORMACOES.h"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;		None
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;		None
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  1    wreg      void 
  6320 ;; Registers used:
  6321 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6327 ;;      Params:         0       0       0       0       0       0       0
  6328 ;;      Locals:         0       0       0       0       0       0       0
  6329 ;;      Temps:          0       0       0       0       0       0       0
  6330 ;;      Totals:         0       0       0       0       0       0       0
  6331 ;;Total ram usage:        0 bytes
  6332 ;; Hardware stack levels used:    1
  6333 ;; Hardware stack levels required when called:    9
  6334 ;; This function calls:
  6335 ;;		_btPress
  6336 ;;		_sprintf
  6337 ;; This function is called by:
  6338 ;;		_main
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           	psect	text12
  6343  00751A                     __ptext12:
  6344                           	opt stack 0
  6345  00751A                     _informacoes:
  6346                           	opt stack 0
  6347  00751A  FFFF               	dw	65535	; assembler added errata NOP
  6348                           
  6349                           ;tela_INFORMACOES.h: 8: sprintf(line1, "TECHNOW");
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;incstack = 0
  6353  00751C  0E80               	movlw	low _line1
  6354  00751E  0100               	movlb	0	; () banked
  6355  007520  6FA1               	movwf	sprintf@wh& (0+255),b
  6356  007522  0E01               	movlw	high _line1
  6357  007524  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6358  007526  0E9B               	movlw	low STR_90
  6359  007528  6FA3               	movwf	sprintf@f& (0+255),b
  6360  00752A  0E7F               	movlw	high STR_90
  6361  00752C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6362  00752E  ECDC  F01F         	call	_sprintf	;wreg free
  6363                           
  6364                           ;tela_INFORMACOES.h: 9: sprintf(line2, "Sistemas embarcados");
  6365  007532  0E6B               	movlw	low _line2
  6366  007534  0100               	movlb	0	; () banked
  6367  007536  6FA1               	movwf	sprintf@wh& (0+255),b
  6368  007538  0E01               	movlw	high _line2
  6369  00753A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6370  00753C  0ECF               	movlw	low STR_91
  6371  00753E  6FA3               	movwf	sprintf@f& (0+255),b
  6372  007540  0E7C               	movlw	high STR_91
  6373  007542  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6374  007544  ECDC  F01F         	call	_sprintf	;wreg free
  6375                           
  6376                           ;tela_INFORMACOES.h: 10: sprintf(line3, "   48 99906-5651");
  6377  007548  0E56               	movlw	low _line3
  6378  00754A  0100               	movlb	0	; () banked
  6379  00754C  6FA1               	movwf	sprintf@wh& (0+255),b
  6380  00754E  0E01               	movlw	high _line3
  6381  007550  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6382  007552  0EAE               	movlw	low STR_92
  6383  007554  6FA3               	movwf	sprintf@f& (0+255),b
  6384  007556  0E7D               	movlw	high STR_92
  6385  007558  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6386  00755A  ECDC  F01F         	call	_sprintf	;wreg free
  6387                           
  6388                           ;tela_INFORMACOES.h: 11: sprintf(line4, "versao - %s", "Jun 01 2020");
  6389  00755E  0E41               	movlw	low _line4
  6390  007560  0100               	movlb	0	; () banked
  6391  007562  6FA1               	movwf	sprintf@wh& (0+255),b
  6392  007564  0E01               	movlw	high _line4
  6393  007566  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6394  007568  0E14               	movlw	low STR_93
  6395  00756A  6FA3               	movwf	sprintf@f& (0+255),b
  6396  00756C  0E7F               	movlw	high STR_93
  6397  00756E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6398  007570  0ED8               	movlw	low STR_15
  6399  007572  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6400  007574  0E7E               	movlw	high STR_15
  6401  007576  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  6402  007578  ECDC  F01F         	call	_sprintf	;wreg free
  6403                           
  6404                           ;tela_INFORMACOES.h: 12: if (btPress(1)) {
  6405  00757C  0E01               	movlw	1
  6406  00757E  EC55  F03A         	call	_btPress
  6407  007582  0900               	iorlw	0
  6408  007584  A4D8               	btfss	status,2,c
  6409                           
  6410                           ;tela_INFORMACOES.h: 13: menu_posi = _menu_posi;
  6411  007586  C0DF  F0E0         	movff	__menu_posi,_menu_posi
  6412  00758A  0012               	return		;funcret
  6413  00758C  FFFF               	dw	65535	; errata NOP
  6414  00758E                     __end_of_informacoes:
  6415                           	opt stack 0
  6416                           tblptru	equ	0xFF8
  6417                           tblptrh	equ	0xFF7
  6418                           tblptrl	equ	0xFF6
  6419                           tablat	equ	0xFF5
  6420                           prodh	equ	0xFF4
  6421                           prodl	equ	0xFF3
  6422                           postinc0	equ	0xFEE
  6423                           wreg	equ	0xFE8
  6424                           postdec1	equ	0xFE5
  6425                           fsr1l	equ	0xFE1
  6426                           indf2	equ	0xFDF
  6427                           fsr2h	equ	0xFDA
  6428                           fsr2l	equ	0xFD9
  6429                           status	equ	0xFD8
  6430                           
  6431 ;; *************** function _getSinalSIM800L *****************
  6432 ;; Defined at:
  6433 ;;		line 13 in file "comunicacao.h"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;		None
  6436 ;; Auto vars:     Size  Location     Type
  6437 ;;  sinal           2   72[BANK0 ] int 
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  1    wreg      void 
  6440 ;; Registers used:
  6441 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6447 ;;      Params:         0       0       0       0       0       0       0
  6448 ;;      Locals:         0       2       0       0       0       0       0
  6449 ;;      Temps:          0       2       0       0       0       0       0
  6450 ;;      Totals:         0       4       0       0       0       0       0
  6451 ;;Total ram usage:        4 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:   10
  6454 ;; This function calls:
  6455 ;;		_aguardaBuffer
  6456 ;;		_atoi
  6457 ;;		_delay
  6458 ;;		_getSerial
  6459 ;;		_limparBuffer
  6460 ;;		_printf
  6461 ;;		_writeChar
  6462 ;; This function is called by:
  6463 ;;		_main
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           	psect	text13
  6468  002A32                     __ptext13:
  6469                           	opt stack 0
  6470  002A32                     _getSinalSIM800L:
  6471                           	opt stack 0
  6472  002A32  FFFF               	dw	65535	; assembler added errata NOP
  6473                           
  6474                           ;comunicacao.h: 14: if (!timerVerificarSinal) {
  6475                           
  6476                           ;incstack = 0
  6477  002A34  0100               	movlb	0	; () banked
  6478  002A36  51FF               	movf	_timerVerificarSinal& (0+255),w,b
  6479  002A38  A4D8               	btfss	status,2,c
  6480  002A3A  D0DE               	goto	l310
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;comunicacao.h: 15: if (!gsmOcupado) {
  6484  002A3C  51F4               	movf	_gsmOcupado& (0+255),w,b
  6485  002A3E  B4D8               	btfsc	status,2,c
  6486  002A40  D0CA               	goto	l308
  6487  002A42  D0DA               	goto	l310
  6488  002A44  FFFF               	dw	65535	; assembler added errata NOP
  6489                           
  6490                           ; BSR set to: 0
  6491                           ;comunicacao.h: 18: limparBuffer();
  6492                           
  6493                           ; BSR set to: 0
  6494  002A46  EC16  F037         	call	_limparBuffer	;wreg free
  6495                           
  6496                           ;comunicacao.h: 19: printf("AT+CSQ\r\n");
  6497  002A4A  0E89               	movlw	low STR_3
  6498  002A4C  0100               	movlb	0	; () banked
  6499  002A4E  6FA1               	movwf	printf@f& (0+255),b
  6500  002A50  0E7F               	movlw	high STR_3
  6501  002A52  6FA2               	movwf	(printf@f+1)& (0+255),b
  6502  002A54  EC17  F038         	call	_printf	;wreg free
  6503                           
  6504                           ;comunicacao.h: 20: timerEtapaComunicacao = 5;
  6505  002A58  0E05               	movlw	5
  6506  002A5A  0100               	movlb	0	; () banked
  6507  002A5C  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;comunicacao.h: 21: etapaComunicacao = 1;
  6511  002A5E  0E00               	movlw	0
  6512  002A60  6E4D               	movwf	_etapaComunicacao+1,c
  6513  002A62  0E01               	movlw	1
  6514  002A64  6E4C               	movwf	_etapaComunicacao,c
  6515                           
  6516                           ; BSR set to: 0
  6517                           ;comunicacao.h: 22: telefoneSelecionado = 0;
  6518  002A66  0E00               	movlw	0
  6519  002A68  6FF8               	movwf	_telefoneSelecionado& (0+255),b
  6520                           
  6521                           ;comunicacao.h: 23: break;
  6522  002A6A  D0C6               	goto	l310
  6523  002A6C  FFFF               	dw	65535	; assembler added errata NOP
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;comunicacao.h: 25: if (!timerEtapaComunicacao) {
  6527                           
  6528                           ; BSR set to: 0
  6529  002A6E  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
  6530  002A70  A4D8               	btfss	status,2,c
  6531  002A72  D03C               	goto	l316
  6532                           
  6533                           ; BSR set to: 0
  6534                           ;comunicacao.h: 26: printf("AT\r\n");
  6535  002A74  0EDE               	movlw	low STR_4
  6536  002A76  6FA1               	movwf	printf@f& (0+255),b
  6537  002A78  0E7F               	movlw	high STR_4
  6538  002A7A  6FA2               	movwf	(printf@f+1)& (0+255),b
  6539  002A7C  EC17  F038         	call	_printf	;wreg free
  6540                           
  6541                           ;comunicacao.h: 27: delay(100);
  6542  002A80  0E00               	movlw	0
  6543  002A82  0100               	movlb	0	; () banked
  6544  002A84  6F81               	movwf	(delay@x+1)& (0+255),b
  6545  002A86  0E64               	movlw	100
  6546  002A88  6F80               	movwf	delay@x& (0+255),b
  6547  002A8A  ECFB  F036         	call	_delay	;wreg free
  6548                           
  6549                           ;comunicacao.h: 28: if (aguardaBuffer("OK")) {
  6550  002A8E  0EFA               	movlw	low STR_5
  6551  002A90  0100               	movlb	0	; () banked
  6552  002A92  6F93               	movwf	aguardaBuffer@str& (0+255),b
  6553  002A94  0E7F               	movlw	high STR_5
  6554  002A96  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  6555  002A98  ECF9  F037         	call	_aguardaBuffer	;wreg free
  6556  002A9C  0900               	iorlw	0
  6557  002A9E  B4D8               	btfsc	status,2,c
  6558  002AA0  D00D               	goto	l313
  6559                           
  6560                           ;comunicacao.h: 29: etapaComunicacao = 0;
  6561  002AA2  0E00               	movlw	0
  6562  002AA4  6E4D               	movwf	_etapaComunicacao+1,c
  6563  002AA6  0E00               	movlw	0
  6564  002AA8  6E4C               	movwf	_etapaComunicacao,c
  6565                           
  6566                           ;comunicacao.h: 30: tentativasVerificarGSM = 0;
  6567  002AAA  0E00               	movlw	0
  6568  002AAC  6E74               	movwf	_tentativasVerificarGSM,c
  6569                           
  6570                           ;comunicacao.h: 32: if (codigoErro == 2) {
  6571  002AAE  0E02               	movlw	2
  6572  002AB0  0100               	movlb	0	; () banked
  6573  002AB2  19F3               	xorwf	_codigoErro& (0+255),w,b
  6574  002AB4  A4D8               	btfss	status,2,c
  6575  002AB6  D01A               	goto	l316
  6576                           
  6577                           ; BSR set to: 0
  6578                           ;comunicacao.h: 33: codigoErro = 0;
  6579  002AB8  0E00               	movlw	0
  6580  002ABA  D016               	goto	L10
  6581  002ABC                     l313:
  6582  002ABC  FFFF               	dw	65535	; assembler added errata NOP
  6583                           
  6584                           ;comunicacao.h: 37: etapaComunicacao = 0;
  6585                           
  6586                           ; BSR set to: 0
  6587  002ABE  0E00               	movlw	0
  6588  002AC0  6E4D               	movwf	_etapaComunicacao+1,c
  6589  002AC2  0E00               	movlw	0
  6590  002AC4  6E4C               	movwf	_etapaComunicacao,c
  6591                           
  6592                           ;comunicacao.h: 38: writeChar(0x1A);
  6593  002AC6  0E1A               	movlw	26
  6594  002AC8  0100               	movlb	0	; () banked
  6595  002ACA  6F80               	movwf	writeChar@hex& (0+255),b
  6596  002ACC  0E00               	movlw	0
  6597  002ACE  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  6598  002AD0  ECB8  F035         	call	_writeChar	;wreg free
  6599                           
  6600                           ;comunicacao.h: 39: tentativasVerificarGSM++;
  6601  002AD4  2A74               	incf	_tentativasVerificarGSM,f,c
  6602                           
  6603                           ;comunicacao.h: 41: if (tentativasVerificarGSM >= 3) {
  6604  002AD6  0E02               	movlw	2
  6605  002AD8  6474               	cpfsgt	_tentativasVerificarGSM,c
  6606  002ADA  D008               	goto	l316
  6607                           
  6608                           ;comunicacao.h: 42: tentativasVerificarGSM = 0;
  6609  002ADC  0E00               	movlw	0
  6610  002ADE  6E74               	movwf	_tentativasVerificarGSM,c
  6611                           
  6612                           ;comunicacao.h: 43: intensidadeSinal = 'x';
  6613  002AE0  0E78               	movlw	120
  6614  002AE2  6E7D               	movwf	_intensidadeSinal,c
  6615                           
  6616                           ;comunicacao.h: 44: codigoErro = 2;
  6617  002AE4  0E02               	movlw	2
  6618  002AE6  0100               	movlb	0	; () banked
  6619  002AE8                     L10:
  6620  002AE8  FFFF               	dw	65535	; assembler added errata NOP
  6621  002AEA  6FF3               	movwf	_codigoErro& (0+255),b
  6622  002AEC                     l316:
  6623  002AEC  FFFF               	dw	65535	; assembler added errata NOP
  6624                           
  6625                           ;comunicacao.h: 45: }
  6626                           ;comunicacao.h: 46: }
  6627                           ;comunicacao.h: 47: }
  6628                           ;comunicacao.h: 48: if (aguardaBuffer("+CSQ: ")) {
  6629                           
  6630                           ; BSR set to: 0
  6631                           
  6632                           ; BSR set to: 0
  6633                           
  6634                           ; BSR set to: 0
  6635  002AEE  0EB1               	movlw	low STR_6
  6636  002AF0  0100               	movlb	0	; () banked
  6637  002AF2  6F93               	movwf	aguardaBuffer@str& (0+255),b
  6638  002AF4  0E7F               	movlw	high STR_6
  6639  002AF6  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  6640  002AF8  ECF9  F037         	call	_aguardaBuffer	;wreg free
  6641  002AFC  0900               	iorlw	0
  6642  002AFE  B4D8               	btfsc	status,2,c
  6643  002B00  D07B               	goto	l310
  6644                           
  6645                           ;comunicacao.h: 49: int sinal = atoi(getSerial("+CSQ: ", ','));
  6646  002B02  0EB1               	movlw	low STR_6
  6647  002B04  0100               	movlb	0	; () banked
  6648  002B06  6FB5               	movwf	getSerial@str& (0+255),b
  6649  002B08  0E7F               	movlw	high STR_6
  6650  002B0A  6FB6               	movwf	(getSerial@str+1)& (0+255),b
  6651  002B0C  0E2C               	movlw	44
  6652  002B0E  6FB7               	movwf	getSerial@end& (0+255),b
  6653  002B10  EC64  F019         	call	_getSerial	;wreg free
  6654  002B14  C0B5  F0BF         	movff	?_getSerial,atoi@s
  6655  002B18  C0B6  F0C0         	movff	?_getSerial+1,atoi@s+1
  6656  002B1C  EC80  F01B         	call	_atoi	;wreg free
  6657  002B20  C0BF  F0C8         	movff	?_atoi,getSinalSIM800L@sinal
  6658  002B24  C0C0  F0C9         	movff	?_atoi+1,getSinalSIM800L@sinal+1
  6659                           
  6660                           ;comunicacao.h: 50: if (sinal < 8) {
  6661  002B28  0100               	movlb	0	; () banked
  6662  002B2A  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6663  002B2C  D006               	goto	u7080
  6664  002B2E  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6665  002B30  E108               	bnz	l6593
  6666  002B32  0E08               	movlw	8
  6667  002B34  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6668  002B36  B0D8               	btfsc	status,0,c
  6669  002B38  D003               	goto	l318
  6670  002B3A                     u7080:
  6671  002B3A  FFFF               	dw	65535	; assembler added errata NOP
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;comunicacao.h: 51: intensidadeSinal = ' ';
  6675  002B3C  0E20               	movlw	32
  6676  002B3E  D03B               	goto	L13
  6677  002B40                     l318:
  6678  002B40  FFFF               	dw	65535	; assembler added errata NOP
  6679  002B42                     l6593:
  6680                           
  6681                           ; BSR set to: 0
  6682  002B42  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6683  002B44  D011               	goto	l320
  6684  002B46  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6685  002B48  E104               	bnz	u7090
  6686  002B4A  0E08               	movlw	8
  6687  002B4C  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6688  002B4E  A0D8               	btfss	status,0,c
  6689  002B50  D00B               	goto	l320
  6690  002B52                     u7090:
  6691                           
  6692                           ; BSR set to: 0
  6693  002B52  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6694  002B54  D006               	goto	u7100
  6695  002B56  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6696  002B58  E108               	bnz	l6599
  6697  002B5A  0E0C               	movlw	12
  6698  002B5C  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6699  002B5E  B0D8               	btfsc	status,0,c
  6700  002B60  D003               	goto	l320
  6701  002B62                     u7100:
  6702  002B62  FFFF               	dw	65535	; assembler added errata NOP
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;comunicacao.h: 53: intensidadeSinal = 0x02;
  6706  002B64  0E02               	movlw	2
  6707  002B66  D027               	goto	L13
  6708  002B68                     l320:
  6709  002B68  FFFF               	dw	65535	; assembler added errata NOP
  6710  002B6A                     l6599:
  6711                           
  6712                           ; BSR set to: 0
  6713  002B6A  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6714  002B6C  D011               	goto	l322
  6715  002B6E  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6716  002B70  E104               	bnz	u7110
  6717  002B72  0E0C               	movlw	12
  6718  002B74  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6719  002B76  A0D8               	btfss	status,0,c
  6720  002B78  D00B               	goto	l322
  6721  002B7A                     u7110:
  6722                           
  6723                           ; BSR set to: 0
  6724  002B7A  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6725  002B7C  D006               	goto	u7120
  6726  002B7E  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6727  002B80  E108               	bnz	l6605
  6728  002B82  0E11               	movlw	17
  6729  002B84  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6730  002B86  B0D8               	btfsc	status,0,c
  6731  002B88  D003               	goto	l322
  6732  002B8A                     u7120:
  6733  002B8A  FFFF               	dw	65535	; assembler added errata NOP
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;comunicacao.h: 55: intensidadeSinal = 0x03;
  6737  002B8C  0E03               	movlw	3
  6738  002B8E  D013               	goto	L13
  6739  002B90                     l322:
  6740  002B90  FFFF               	dw	65535	; assembler added errata NOP
  6741  002B92                     l6605:
  6742                           
  6743                           ; BSR set to: 0
  6744  002B92  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6745  002B94  D012               	goto	l324
  6746  002B96  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6747  002B98  E104               	bnz	u7130
  6748  002B9A  0E11               	movlw	17
  6749  002B9C  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6750  002B9E  A0D8               	btfss	status,0,c
  6751  002BA0  D00C               	goto	l324
  6752  002BA2                     u7130:
  6753                           
  6754                           ; BSR set to: 0
  6755  002BA2  BFC9               	btfsc	(getSinalSIM800L@sinal+1)& (0+255),7,b
  6756  002BA4  D006               	goto	u7140
  6757  002BA6  51C9               	movf	(getSinalSIM800L@sinal+1)& (0+255),w,b
  6758  002BA8  E109               	bnz	l319
  6759  002BAA  0E1F               	movlw	31
  6760  002BAC  5DC8               	subwf	getSinalSIM800L@sinal& (0+255),w,b
  6761  002BAE  B0D8               	btfsc	status,0,c
  6762  002BB0  D004               	goto	l324
  6763  002BB2                     u7140:
  6764  002BB2  FFFF               	dw	65535	; assembler added errata NOP
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;comunicacao.h: 57: intensidadeSinal = 0x04;
  6768  002BB4  0E04               	movlw	4
  6769  002BB6                     L13:
  6770  002BB6  FFFF               	dw	65535	; assembler added errata NOP
  6771  002BB8  6E7D               	movwf	_intensidadeSinal,c
  6772  002BBA                     l324:
  6773  002BBA  FFFF               	dw	65535	; assembler added errata NOP
  6774  002BBC                     l319:
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;comunicacao.h: 58: }
  6778                           ;comunicacao.h: 59: etapaComunicacao = 0;
  6779  002BBC  0E00               	movlw	0
  6780  002BBE  6E4D               	movwf	_etapaComunicacao+1,c
  6781  002BC0  0E00               	movlw	0
  6782  002BC2  6E4C               	movwf	_etapaComunicacao,c
  6783                           
  6784                           ;comunicacao.h: 60: timerVerificarSinal = 5;
  6785  002BC4  0E05               	movlw	5
  6786  002BC6  6FFF               	movwf	_timerVerificarSinal& (0+255),b
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;comunicacao.h: 61: }
  6790                           ;comunicacao.h: 62: break;
  6791  002BC8  D017               	goto	l310
  6792  002BCA  FFFF               	dw	65535	; assembler added errata NOP
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;comunicacao.h: 64: etapaComunicacao = 0;
  6796                           
  6797                           ; BSR set to: 0
  6798  002BCC  0E00               	movlw	0
  6799  002BCE  6E4D               	movwf	_etapaComunicacao+1,c
  6800  002BD0  0E00               	movlw	0
  6801  002BD2  6E4C               	movwf	_etapaComunicacao,c
  6802                           
  6803                           ;comunicacao.h: 65: }
  6804  002BD4  D011               	goto	l310
  6805  002BD6                     l308:
  6806  002BD6  FFFF               	dw	65535	; assembler added errata NOP
  6807                           
  6808                           ; BSR set to: 0
  6809                           
  6810                           ; BSR set to: 0
  6811  002BD8  C04C  F0C6         	movff	_etapaComunicacao,??_getSinalSIM800L
  6812  002BDC  C04D  F0C7         	movff	_etapaComunicacao+1,??_getSinalSIM800L+1
  6813                           
  6814                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6815                           ; Switch size 1, requested type "space"
  6816                           ; Number of cases is 1, Range of values is 0 to 0
  6817                           ; switch strategies available:
  6818                           ; Name         Instructions Cycles
  6819                           ; simple_byte            4     3 (average)
  6820                           ;	Chosen strategy is simple_byte
  6821  002BE0  51C7               	movf	(??_getSinalSIM800L+1)& (0+255),w,b
  6822  002BE2  0A00               	xorlw	0	; case 0
  6823  002BE4  A4D8               	btfss	status,2,c
  6824  002BE6  D7F1               	goto	l325
  6825                           
  6826                           ; BSR set to: 0
  6827                           ; Switch size 1, requested type "space"
  6828                           ; Number of cases is 2, Range of values is 0 to 1
  6829                           ; switch strategies available:
  6830                           ; Name         Instructions Cycles
  6831                           ; simple_byte            7     4 (average)
  6832                           ;	Chosen strategy is simple_byte
  6833  002BE8  51C6               	movf	??_getSinalSIM800L& (0+255),w,b
  6834  002BEA  0A00               	xorlw	0	; case 0
  6835  002BEC  B4D8               	btfsc	status,2,c
  6836  002BEE  D72A               	goto	l309
  6837  002BF0  0A01               	xorlw	1	; case 1
  6838  002BF2  B4D8               	btfsc	status,2,c
  6839  002BF4  D73B               	goto	l311
  6840  002BF6  D7E9               	goto	l325
  6841  002BF8                     l310:
  6842  002BF8  FFFF               	dw	65535	; assembler added errata NOP
  6843                           
  6844                           ; BSR set to: 0
  6845                           
  6846                           ; BSR set to: 0
  6847                           
  6848                           ; BSR set to: 0
  6849  002BFA  0012               	return		;funcret
  6850  002BFC  FFFF               	dw	65535	; errata NOP
  6851  002BFE                     __end_of_getSinalSIM800L:
  6852                           	opt stack 0
  6853                           tblptru	equ	0xFF8
  6854                           tblptrh	equ	0xFF7
  6855                           tblptrl	equ	0xFF6
  6856                           tablat	equ	0xFF5
  6857                           prodh	equ	0xFF4
  6858                           prodl	equ	0xFF3
  6859                           postinc0	equ	0xFEE
  6860                           wreg	equ	0xFE8
  6861                           postdec1	equ	0xFE5
  6862                           fsr1l	equ	0xFE1
  6863                           indf2	equ	0xFDF
  6864                           fsr2h	equ	0xFDA
  6865                           fsr2l	equ	0xFD9
  6866                           status	equ	0xFD8
  6867                           
  6868 ;; *************** function _getSerial *****************
  6869 ;; Defined at:
  6870 ;;		line 40 in file "serial.h"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;  str             2   53[BANK0 ] PTR unsigned char 
  6873 ;;		 -> STR_7(7), 
  6874 ;;  end             1   55[BANK0 ] unsigned char 
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;  i               1   60[BANK0 ] unsigned char 
  6877 ;;  ret             2   61[BANK0 ] PTR unsigned char 
  6878 ;;		 -> NULL(0), bufferSerial(60), 
  6879 ;;  length          2   58[BANK0 ] unsigned int 
  6880 ;; Return value:  Size  Location     Type
  6881 ;;                  2   53[BANK0 ] PTR unsigned char 
  6882 ;; Registers used:
  6883 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6884 ;; Tracked objects:
  6885 ;;		On entry : 0/0
  6886 ;;		On exit  : 0/0
  6887 ;;		Unchanged: 0/0
  6888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6889 ;;      Params:         0       3       0       0       0       0       0
  6890 ;;      Locals:         0       5       0       0       0       0       0
  6891 ;;      Temps:          0       2       0       0       0       0       0
  6892 ;;      Totals:         0      10       0       0       0       0       0
  6893 ;;Total ram usage:       10 bytes
  6894 ;; Hardware stack levels used:    1
  6895 ;; Hardware stack levels required when called:    9
  6896 ;; This function calls:
  6897 ;;		_memset
  6898 ;;		_sprintf
  6899 ;;		_strlen
  6900 ;;		_strstr
  6901 ;; This function is called by:
  6902 ;;		_getSinalSIM800L
  6903 ;; This function uses a non-reentrant model
  6904 ;;
  6905                           
  6906                           	psect	text14
  6907  0032C8                     __ptext14:
  6908                           	opt stack 0
  6909  0032C8                     _getSerial:
  6910                           	opt stack 0
  6911  0032C8  FFFF               	dw	65535	; assembler added errata NOP
  6912                           
  6913                           ;serial.h: 41: memset(bufferAUX, 0, sizeof (bufferAUX));
  6914                           
  6915                           ;incstack = 0
  6916  0032CA  0E95               	movlw	low _bufferAUX
  6917  0032CC  0100               	movlb	0	; () banked
  6918  0032CE  6F80               	movwf	memset@p1& (0+255),b
  6919  0032D0  0E01               	movlw	high _bufferAUX
  6920  0032D2  6F81               	movwf	(memset@p1+1)& (0+255),b
  6921  0032D4  0E00               	movlw	0
  6922  0032D6  6F83               	movwf	(memset@c+1)& (0+255),b
  6923  0032D8  0E00               	movlw	0
  6924  0032DA  6F82               	movwf	memset@c& (0+255),b
  6925  0032DC  0E00               	movlw	0
  6926  0032DE  6F85               	movwf	(memset@n+1)& (0+255),b
  6927  0032E0  0E14               	movlw	20
  6928  0032E2  6F84               	movwf	memset@n& (0+255),b
  6929  0032E4  EC84  F037         	call	_memset	;wreg free
  6930                           
  6931                           ;serial.h: 42: unsigned int length = strlen(str);
  6932  0032E8  C0B5  F080         	movff	getSerial@str,strlen@s
  6933  0032EC  C0B6  F081         	movff	getSerial@str+1,strlen@s+1
  6934  0032F0  ECC2  F039         	call	_strlen	;wreg free
  6935  0032F4  C080  F0BA         	movff	?_strlen,getSerial@length
  6936  0032F8  C081  F0BB         	movff	?_strlen+1,getSerial@length+1
  6937                           
  6938                           ;serial.h: 43: char* ret;
  6939                           ;serial.h: 44: ret = strstr(bufferSerial, str);
  6940  0032FC  0E05               	movlw	low _bufferSerial
  6941  0032FE  0100               	movlb	0	; () banked
  6942  003300  6F8F               	movwf	strstr@s1& (0+255),b
  6943  003302  0E01               	movlw	high _bufferSerial
  6944  003304  6F90               	movwf	(strstr@s1+1)& (0+255),b
  6945  003306  C0B5  F091         	movff	getSerial@str,strstr@s2
  6946  00330A  C0B6  F092         	movff	getSerial@str+1,strstr@s2+1
  6947  00330E  ECB3  F03C         	call	_strstr	;wreg free
  6948  003312  C08F  F0BD         	movff	?_strstr,getSerial@ret
  6949  003316  C090  F0BE         	movff	?_strstr+1,getSerial@ret+1
  6950                           
  6951                           ;serial.h: 45: if (ret) {
  6952  00331A  0100               	movlb	0	; () banked
  6953  00331C  51BD               	movf	getSerial@ret& (0+255),w,b
  6954  00331E  11BE               	iorwf	(getSerial@ret+1)& (0+255),w,b
  6955  003320  B4D8               	btfsc	status,2,c
  6956  003322  D058               	goto	u5790
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;serial.h: 46: unsigned char i = 0;
  6960  003324  0E00               	movlw	0
  6961  003326  6FBC               	movwf	getSerial@i& (0+255),b
  6962                           
  6963                           ; BSR set to: 0
  6964                           ;serial.h: 47: for (i = length; i < strlen(ret); i++) {
  6965  003328  C0BA  F0BC         	movff	getSerial@length,getSerial@i
  6966  00332C  D042               	goto	l273
  6967  00332E  FFFF               	dw	65535	; assembler added errata NOP
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;serial.h: 48: if (ret[i] == end) {
  6971                           
  6972                           ; BSR set to: 0
  6973  003330  51BC               	movf	getSerial@i& (0+255),w,b
  6974  003332  0D01               	mullw	1
  6975  003334  50F3               	movf	prodl,w,c
  6976  003336  25BD               	addwf	getSerial@ret& (0+255),w,b
  6977  003338  6ED9               	movwf	fsr2l,c
  6978  00333A  50F4               	movf	prodh,w,c
  6979  00333C  21BE               	addwfc	(getSerial@ret+1)& (0+255),w,b
  6980  00333E  6EDA               	movwf	fsr2h,c
  6981  003340  51B7               	movf	getSerial@end& (0+255),w,b
  6982  003342  18DE               	xorwf	postinc2,w,c
  6983  003344  A4D8               	btfss	status,2,c
  6984  003346  D017               	goto	l275
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;serial.h: 49: sprintf(bufferAUX, "%s%c", bufferAUX, '\0');
  6988  003348  0E95               	movlw	low _bufferAUX
  6989  00334A  6FA1               	movwf	sprintf@wh& (0+255),b
  6990  00334C  0E01               	movlw	high _bufferAUX
  6991  00334E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  6992  003350  0EE8               	movlw	low STR_1
  6993  003352  6FA3               	movwf	sprintf@f& (0+255),b
  6994  003354  0E7F               	movlw	high STR_1
  6995  003356  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  6996  003358  0E95               	movlw	low _bufferAUX
  6997  00335A  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  6998  00335C  0E01               	movlw	high _bufferAUX
  6999  00335E  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  7000  003360  0E00               	movlw	0
  7001  003362  6FA8               	movwf	(?_sprintf+7)& (0+255),b
  7002  003364  0E00               	movlw	0
  7003  003366  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  7004  003368  ECDC  F01F         	call	_sprintf	;wreg free
  7005                           
  7006                           ;serial.h: 50: return bufferAUX;
  7007  00336C  0E95               	movlw	low _bufferAUX
  7008  00336E  0100               	movlb	0	; () banked
  7009  003370  6FB5               	movwf	?_getSerial& (0+255),b
  7010  003372  0E01               	movlw	high _bufferAUX
  7011  003374  D033               	goto	L14
  7012  003376                     l275:
  7013  003376  FFFF               	dw	65535	; assembler added errata NOP
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;serial.h: 51: }
  7017                           ;serial.h: 52: sprintf(bufferAUX, "%s%c", bufferAUX, ret[i]);
  7018                           
  7019                           ; BSR set to: 0
  7020  003378  0E95               	movlw	low _bufferAUX
  7021  00337A  6FA1               	movwf	sprintf@wh& (0+255),b
  7022  00337C  0E01               	movlw	high _bufferAUX
  7023  00337E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7024  003380  0EE8               	movlw	low STR_1
  7025  003382  6FA3               	movwf	sprintf@f& (0+255),b
  7026  003384  0E7F               	movlw	high STR_1
  7027  003386  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7028  003388  0E95               	movlw	low _bufferAUX
  7029  00338A  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  7030  00338C  0E01               	movlw	high _bufferAUX
  7031  00338E  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  7032  003390  51BC               	movf	getSerial@i& (0+255),w,b
  7033  003392  0D01               	mullw	1
  7034  003394  50F3               	movf	prodl,w,c
  7035  003396  25BD               	addwf	getSerial@ret& (0+255),w,b
  7036  003398  6ED9               	movwf	fsr2l,c
  7037  00339A  50F4               	movf	prodh,w,c
  7038  00339C  21BE               	addwfc	(getSerial@ret+1)& (0+255),w,b
  7039  00339E  6EDA               	movwf	fsr2h,c
  7040  0033A0  50DF               	movf	indf2,w,c
  7041  0033A2  6FB8               	movwf	??_getSerial& (0+255),b
  7042  0033A4  51B8               	movf	??_getSerial& (0+255),w,b
  7043  0033A6  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  7044  0033A8  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  7045  0033AA  ECDC  F01F         	call	_sprintf	;wreg free
  7046  0033AE  0100               	movlb	0	; () banked
  7047  0033B0  2BBC               	incf	getSerial@i& (0+255),f,b
  7048  0033B2                     l273:
  7049  0033B2  FFFF               	dw	65535	; assembler added errata NOP
  7050                           
  7051                           ; BSR set to: 0
  7052                           
  7053                           ; BSR set to: 0
  7054  0033B4  C0BD  F080         	movff	getSerial@ret,strlen@s
  7055  0033B8  C0BE  F081         	movff	getSerial@ret+1,strlen@s+1
  7056  0033BC  ECC2  F039         	call	_strlen	;wreg free
  7057  0033C0  0100               	movlb	0	; () banked
  7058  0033C2  51BC               	movf	getSerial@i& (0+255),w,b
  7059  0033C4  6FB8               	movwf	??_getSerial& (0+255),b
  7060  0033C6  6BB9               	clrf	(??_getSerial+1)& (0+255),b
  7061  0033C8  5180               	movf	?_strlen& (0+255),w,b
  7062  0033CA  5DB8               	subwf	??_getSerial& (0+255),w,b
  7063  0033CC  5181               	movf	(?_strlen+1)& (0+255),w,b
  7064  0033CE  59B9               	subwfb	(??_getSerial+1)& (0+255),w,b
  7065  0033D0  A0D8               	btfss	status,0,c
  7066  0033D2  D7AD               	goto	l274
  7067  0033D4                     u5790:
  7068  0033D4  FFFF               	dw	65535	; assembler added errata NOP
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;serial.h: 53: }
  7072                           ;serial.h: 54: }
  7073                           ;serial.h: 55: return 0;
  7074                           
  7075                           ; BSR set to: 0
  7076                           
  7077                           ; BSR set to: 0
  7078  0033D6  0E00               	movlw	0
  7079  0033D8  6FB5               	movwf	?_getSerial& (0+255),b
  7080  0033DA  0E00               	movlw	0
  7081  0033DC                     L14:
  7082  0033DC  FFFF               	dw	65535	; assembler added errata NOP
  7083  0033DE  6FB6               	movwf	(?_getSerial+1)& (0+255),b
  7084                           
  7085                           ; BSR set to: 0
  7086                           
  7087                           ; BSR set to: 0
  7088  0033E0  0012               	return		;funcret
  7089  0033E2  FFFF               	dw	65535	; errata NOP
  7090  0033E4                     __end_of_getSerial:
  7091                           	opt stack 0
  7092                           tblptru	equ	0xFF8
  7093                           tblptrh	equ	0xFF7
  7094                           tblptrl	equ	0xFF6
  7095                           tablat	equ	0xFF5
  7096                           prodh	equ	0xFF4
  7097                           prodl	equ	0xFF3
  7098                           postinc0	equ	0xFEE
  7099                           wreg	equ	0xFE8
  7100                           postdec1	equ	0xFE5
  7101                           fsr1l	equ	0xFE1
  7102                           indf2	equ	0xFDF
  7103                           postinc2	equ	0xFDE
  7104                           fsr2h	equ	0xFDA
  7105                           fsr2l	equ	0xFD9
  7106                           status	equ	0xFD8
  7107                           
  7108 ;; *************** function _atoi *****************
  7109 ;; Defined at:
  7110 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;  s               2   63[BANK0 ] PTR const unsigned char 
  7113 ;;		 -> bufferAUX(20), NULL(0), 
  7114 ;; Auto vars:     Size  Location     Type
  7115 ;;  a               2   68[BANK0 ] int 
  7116 ;;  sign            1   67[BANK0 ] unsigned char 
  7117 ;; Return value:  Size  Location     Type
  7118 ;;                  2   63[BANK0 ] int 
  7119 ;; Registers used:
  7120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/0
  7123 ;;		On exit  : 0/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7126 ;;      Params:         0       2       0       0       0       0       0
  7127 ;;      Locals:         0       3       0       0       0       0       0
  7128 ;;      Temps:          0       2       0       0       0       0       0
  7129 ;;      Totals:         0       7       0       0       0       0       0
  7130 ;;Total ram usage:        7 bytes
  7131 ;; Hardware stack levels used:    1
  7132 ;; Hardware stack levels required when called:    7
  7133 ;; This function calls:
  7134 ;;		___wmul
  7135 ;;		_isdigit
  7136 ;; This function is called by:
  7137 ;;		_getSinalSIM800L
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           	psect	text15
  7142  003700                     __ptext15:
  7143                           	opt stack 0
  7144  003700                     _atoi:
  7145                           	opt stack 0
  7146  003700  FFFF               	dw	65535	; assembler added errata NOP
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;incstack = 0
  7150  003702  D004               	goto	l1309
  7151  003704  FFFF               	dw	65535	; assembler added errata NOP
  7152  003706  0100               	movlb	0	; () banked
  7153  003708  4BBF               	infsnz	atoi@s& (0+255),f,b
  7154  00370A  2BC0               	incf	(atoi@s+1)& (0+255),f,b
  7155  00370C                     l1309:
  7156  00370C  FFFF               	dw	65535	; assembler added errata NOP
  7157                           
  7158                           ; BSR set to: 0
  7159  00370E  C0BF  FFD9         	movff	atoi@s,fsr2l
  7160  003712  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7161  003716  0E20               	movlw	32
  7162  003718  18DE               	xorwf	postinc2,w,c
  7163  00371A  B4D8               	btfsc	status,2,c
  7164  00371C  D7F3               	goto	l1310
  7165  00371E  C0BF  FFD9         	movff	atoi@s,fsr2l
  7166  003722  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7167  003726  0E09               	movlw	9
  7168  003728  18DE               	xorwf	postinc2,w,c
  7169  00372A  B4D8               	btfsc	status,2,c
  7170  00372C  D7EB               	goto	l1310
  7171  00372E  0E00               	movlw	0
  7172  003730  0100               	movlb	0	; () banked
  7173  003732  6FC5               	movwf	(atoi@a+1)& (0+255),b
  7174  003734  0E00               	movlw	0
  7175  003736  6FC4               	movwf	atoi@a& (0+255),b
  7176  003738  0E00               	movlw	0
  7177  00373A  6FC3               	movwf	atoi@sign& (0+255),b
  7178                           
  7179                           ; BSR set to: 0
  7180  00373C  C0BF  FFD9         	movff	atoi@s,fsr2l
  7181  003740  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7182  003744  0E2D               	movlw	45
  7183  003746  18DE               	xorwf	postinc2,w,c
  7184  003748  A4D8               	btfss	status,2,c
  7185  00374A  D002               	goto	l1312
  7186                           
  7187                           ; BSR set to: 0
  7188  00374C  2BC3               	incf	atoi@sign& (0+255),f,b
  7189  00374E  D028               	goto	l5673
  7190  003750                     l1312:
  7191  003750  FFFF               	dw	65535	; assembler added errata NOP
  7192                           
  7193                           ; BSR set to: 0
  7194                           
  7195                           ; BSR set to: 0
  7196  003752  C0BF  FFD9         	movff	atoi@s,fsr2l
  7197  003756  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7198  00375A  0E2B               	movlw	43
  7199  00375C  18DE               	xorwf	postinc2,w,c
  7200  00375E  A4D8               	btfss	status,2,c
  7201  003760  D022               	goto	l1315
  7202  003762  D01E               	goto	l5673
  7203  003764  FFFF               	dw	65535	; assembler added errata NOP
  7204                           
  7205                           ; BSR set to: 0
  7206  003766  C0C4  F080         	movff	atoi@a,___wmul@multiplier
  7207  00376A  C0C5  F081         	movff	atoi@a+1,___wmul@multiplier+1
  7208  00376E  0E00               	movlw	0
  7209  003770  0100               	movlb	0	; () banked
  7210  003772  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7211  003774  0E0A               	movlw	10
  7212  003776  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7213  003778  EC66  F036         	call	___wmul	;wreg free
  7214  00377C  C0BF  FFD9         	movff	atoi@s,fsr2l
  7215  003780  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7216  003784  50DF               	movf	indf2,w,c
  7217  003786  0100               	movlb	0	; () banked
  7218  003788  6FC1               	movwf	??_atoi& (0+255),b
  7219  00378A  6BC2               	clrf	(??_atoi+1)& (0+255),b
  7220  00378C  5180               	movf	?___wmul& (0+255),w,b
  7221  00378E  27C1               	addwf	??_atoi& (0+255),f,b
  7222  003790  5181               	movf	(?___wmul+1)& (0+255),w,b
  7223  003792  23C2               	addwfc	(??_atoi+1)& (0+255),f,b
  7224  003794  0ED0               	movlw	208
  7225  003796  25C1               	addwf	??_atoi& (0+255),w,b
  7226  003798  6FC4               	movwf	atoi@a& (0+255),b
  7227  00379A  0EFF               	movlw	255
  7228  00379C  21C2               	addwfc	(??_atoi+1)& (0+255),w,b
  7229  00379E  6FC5               	movwf	(atoi@a+1)& (0+255),b
  7230  0037A0                     l5673:
  7231  0037A0  FFFF               	dw	65535	; assembler added errata NOP
  7232                           
  7233                           ; BSR set to: 0
  7234  0037A2  4BBF               	infsnz	atoi@s& (0+255),f,b
  7235  0037A4  2BC0               	incf	(atoi@s+1)& (0+255),f,b
  7236  0037A6                     l1315:
  7237  0037A6  FFFF               	dw	65535	; assembler added errata NOP
  7238                           
  7239                           ; BSR set to: 0
  7240                           
  7241                           ; BSR set to: 0
  7242  0037A8  C0BF  FFD9         	movff	atoi@s,fsr2l
  7243  0037AC  C0C0  FFDA         	movff	atoi@s+1,fsr2h
  7244  0037B0  50DF               	movf	indf2,w,c
  7245  0037B2  EC3C  F036         	call	_isdigit
  7246  0037B6  B0D8               	btfsc	status,0,c
  7247  0037B8  D7D5               	goto	l1316
  7248  0037BA  0100               	movlb	0	; () banked
  7249  0037BC  51C3               	movf	atoi@sign& (0+255),w,b
  7250  0037BE  B4D8               	btfsc	status,2,c
  7251  0037C0  D00D               	goto	l1318
  7252                           
  7253                           ; BSR set to: 0
  7254  0037C2  C0C4  F0C1         	movff	atoi@a,??_atoi
  7255  0037C6  C0C5  F0C2         	movff	atoi@a+1,??_atoi+1
  7256  0037CA  1FC1               	comf	??_atoi& (0+255),f,b
  7257  0037CC  1FC2               	comf	(??_atoi+1)& (0+255),f,b
  7258  0037CE  4BC1               	infsnz	??_atoi& (0+255),f,b
  7259  0037D0  2BC2               	incf	(??_atoi+1)& (0+255),f,b
  7260  0037D2  C0C1  F0BF         	movff	??_atoi,?_atoi
  7261  0037D6  C0C2  F0C0         	movff	??_atoi+1,?_atoi+1
  7262  0037DA  D005               	goto	l1319
  7263  0037DC                     l1318:
  7264  0037DC  FFFF               	dw	65535	; assembler added errata NOP
  7265                           
  7266                           ; BSR set to: 0
  7267  0037DE  C0C4  F0BF         	movff	atoi@a,?_atoi
  7268  0037E2  C0C5  F0C0         	movff	atoi@a+1,?_atoi+1
  7269  0037E6                     l1319:
  7270  0037E6  FFFF               	dw	65535	; assembler added errata NOP
  7271                           
  7272                           ; BSR set to: 0
  7273  0037E8  0012               	return		;funcret
  7274  0037EA  FFFF               	dw	65535	; errata NOP
  7275  0037EC                     __end_of_atoi:
  7276                           	opt stack 0
  7277                           tblptru	equ	0xFF8
  7278                           tblptrh	equ	0xFF7
  7279                           tblptrl	equ	0xFF6
  7280                           tablat	equ	0xFF5
  7281                           prodh	equ	0xFF4
  7282                           prodl	equ	0xFF3
  7283                           postinc0	equ	0xFEE
  7284                           wreg	equ	0xFE8
  7285                           postdec1	equ	0xFE5
  7286                           fsr1l	equ	0xFE1
  7287                           indf2	equ	0xFDF
  7288                           postinc2	equ	0xFDE
  7289                           fsr2h	equ	0xFDA
  7290                           fsr2l	equ	0xFD9
  7291                           status	equ	0xFD8
  7292                           
  7293 ;; *************** function _getDS1307TimeDate *****************
  7294 ;; Defined at:
  7295 ;;		line 52 in file "ds1307.h"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;  ptrToUserVal    2   12[BANK0 ] PTR struct .
  7298 ;;		 -> rtc(7), 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;		None
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  1    wreg      void 
  7303 ;; Registers used:
  7304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7310 ;;      Params:         0       2       0       0       0       0       0
  7311 ;;      Locals:         0       0       0       0       0       0       0
  7312 ;;      Temps:          0       0       0       0       0       0       0
  7313 ;;      Totals:         0       2       0       0       0       0       0
  7314 ;;Total ram usage:        2 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; Hardware stack levels required when called:    8
  7317 ;; This function calls:
  7318 ;;		_BCDtoDEC
  7319 ;;		_I2C_Read
  7320 ;;		_I2C_Restart
  7321 ;;		_I2C_Start
  7322 ;;		_I2C_Stop
  7323 ;;		_I2C_Write
  7324 ;; This function is called by:
  7325 ;;		_main
  7326 ;; This function uses a non-reentrant model
  7327 ;;
  7328                           
  7329                           	psect	text16
  7330  003070                     __ptext16:
  7331                           	opt stack 0
  7332  003070                     _getDS1307TimeDate:
  7333                           	opt stack 0
  7334  003070  FFFF               	dw	65535	; assembler added errata NOP
  7335                           
  7336                           ;ds1307.h: 54: I2C_Start();
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;incstack = 0
  7340  003072  EC98  F035         	call	_I2C_Start	;wreg free
  7341                           
  7342                           ;ds1307.h: 55: I2C_Write(0xD0);
  7343  003076  0E00               	movlw	0
  7344  003078  0100               	movlb	0	; () banked
  7345  00307A  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7346  00307C  0ED0               	movlw	208
  7347  00307E  6F8A               	movwf	I2C_Write@d& (0+255),b
  7348  003080  ECB1  F035         	call	_I2C_Write	;wreg free
  7349                           
  7350                           ;ds1307.h: 56: I2C_Write(0x00);
  7351  003084  0E00               	movlw	0
  7352  003086  0100               	movlb	0	; () banked
  7353  003088  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7354  00308A  0E00               	movlw	0
  7355  00308C  6F8A               	movwf	I2C_Write@d& (0+255),b
  7356  00308E  ECB1  F035         	call	_I2C_Write	;wreg free
  7357                           
  7358                           ;ds1307.h: 57: I2C_Restart();
  7359  003092  ECA4  F035         	call	_I2C_Restart	;wreg free
  7360                           
  7361                           ;ds1307.h: 58: I2C_Write(0xD1);
  7362  003096  0E00               	movlw	0
  7363  003098  0100               	movlb	0	; () banked
  7364  00309A  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
  7365  00309C  0ED1               	movlw	209
  7366  00309E  6F8A               	movwf	I2C_Write@d& (0+255),b
  7367  0030A0  ECB1  F035         	call	_I2C_Write	;wreg free
  7368                           
  7369                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
  7370  0030A4  0100               	movlb	0	; () banked
  7371  0030A6  EE20 F001          	lfsr	2,1
  7372  0030AA  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7373  0030AC  26D9               	addwf	fsr2l,f,c
  7374  0030AE  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7375  0030B0  22DA               	addwfc	fsr2h,f,c
  7376  0030B2  0E00               	movlw	0
  7377  0030B4  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7378  0030B6  0E01               	movlw	1
  7379  0030B8  6F81               	movwf	I2C_Read@a& (0+255),b
  7380  0030BA  ECA1  F037         	call	_I2C_Read	;wreg free
  7381  0030BE  0100               	movlb	0	; () banked
  7382  0030C0  5181               	movf	?_I2C_Read& (0+255),w,b
  7383  0030C2  ECF6  F035         	call	_BCDtoDEC
  7384  0030C6  6EDF               	movwf	indf2,c
  7385                           
  7386                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
  7387  0030C8  0100               	movlb	0	; () banked
  7388  0030CA  EE20 F002          	lfsr	2,2
  7389  0030CE  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7390  0030D0  26D9               	addwf	fsr2l,f,c
  7391  0030D2  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7392  0030D4  22DA               	addwfc	fsr2h,f,c
  7393  0030D6  0E00               	movlw	0
  7394  0030D8  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7395  0030DA  0E01               	movlw	1
  7396  0030DC  6F81               	movwf	I2C_Read@a& (0+255),b
  7397  0030DE  ECA1  F037         	call	_I2C_Read	;wreg free
  7398  0030E2  0100               	movlb	0	; () banked
  7399  0030E4  5181               	movf	?_I2C_Read& (0+255),w,b
  7400  0030E6  ECF6  F035         	call	_BCDtoDEC
  7401  0030EA  6EDF               	movwf	indf2,c
  7402                           
  7403                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
  7404  0030EC  0100               	movlb	0	; () banked
  7405  0030EE  EE20 F003          	lfsr	2,3
  7406  0030F2  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7407  0030F4  26D9               	addwf	fsr2l,f,c
  7408  0030F6  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7409  0030F8  22DA               	addwfc	fsr2h,f,c
  7410  0030FA  0E00               	movlw	0
  7411  0030FC  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7412  0030FE  0E01               	movlw	1
  7413  003100  6F81               	movwf	I2C_Read@a& (0+255),b
  7414  003102  ECA1  F037         	call	_I2C_Read	;wreg free
  7415  003106  0100               	movlb	0	; () banked
  7416  003108  5181               	movf	?_I2C_Read& (0+255),w,b
  7417  00310A  ECF6  F035         	call	_BCDtoDEC
  7418  00310E  6EDF               	movwf	indf2,c
  7419                           
  7420                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
  7421  003110  0E00               	movlw	0
  7422  003112  0100               	movlb	0	; () banked
  7423  003114  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7424  003116  0E01               	movlw	1
  7425  003118  6F81               	movwf	I2C_Read@a& (0+255),b
  7426  00311A  ECA1  F037         	call	_I2C_Read	;wreg free
  7427  00311E  0100               	movlb	0	; () banked
  7428  003120  5181               	movf	?_I2C_Read& (0+255),w,b
  7429  003122  ECF6  F035         	call	_BCDtoDEC
  7430  003126  C08C  FFD9         	movff	getDS1307TimeDate@ptrToUserVal,fsr2l
  7431  00312A  C08D  FFDA         	movff	getDS1307TimeDate@ptrToUserVal+1,fsr2h
  7432  00312E  6EDF               	movwf	indf2,c
  7433                           
  7434                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
  7435  003130  0100               	movlb	0	; () banked
  7436  003132  EE20 F004          	lfsr	2,4
  7437  003136  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7438  003138  26D9               	addwf	fsr2l,f,c
  7439  00313A  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7440  00313C  22DA               	addwfc	fsr2h,f,c
  7441  00313E  0E00               	movlw	0
  7442  003140  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7443  003142  0E01               	movlw	1
  7444  003144  6F81               	movwf	I2C_Read@a& (0+255),b
  7445  003146  ECA1  F037         	call	_I2C_Read	;wreg free
  7446  00314A  0100               	movlb	0	; () banked
  7447  00314C  5181               	movf	?_I2C_Read& (0+255),w,b
  7448  00314E  ECF6  F035         	call	_BCDtoDEC
  7449  003152  6EDF               	movwf	indf2,c
  7450                           
  7451                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
  7452  003154  0100               	movlb	0	; () banked
  7453  003156  EE20 F005          	lfsr	2,5
  7454  00315A  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7455  00315C  26D9               	addwf	fsr2l,f,c
  7456  00315E  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7457  003160  22DA               	addwfc	fsr2h,f,c
  7458  003162  0E00               	movlw	0
  7459  003164  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7460  003166  0E01               	movlw	1
  7461  003168  6F81               	movwf	I2C_Read@a& (0+255),b
  7462  00316A  ECA1  F037         	call	_I2C_Read	;wreg free
  7463  00316E  0100               	movlb	0	; () banked
  7464  003170  5181               	movf	?_I2C_Read& (0+255),w,b
  7465  003172  ECF6  F035         	call	_BCDtoDEC
  7466  003176  6EDF               	movwf	indf2,c
  7467                           
  7468                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
  7469  003178  0100               	movlb	0	; () banked
  7470  00317A  EE20 F006          	lfsr	2,6
  7471  00317E  518C               	movf	getDS1307TimeDate@ptrToUserVal& (0+255),w,b
  7472  003180  26D9               	addwf	fsr2l,f,c
  7473  003182  518D               	movf	(getDS1307TimeDate@ptrToUserVal+1)& (0+255),w,b
  7474  003184  22DA               	addwfc	fsr2h,f,c
  7475  003186  0E00               	movlw	0
  7476  003188  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
  7477  00318A  0E00               	movlw	0
  7478  00318C  6F81               	movwf	I2C_Read@a& (0+255),b
  7479  00318E  ECA1  F037         	call	_I2C_Read	;wreg free
  7480  003192  0100               	movlb	0	; () banked
  7481  003194  5181               	movf	?_I2C_Read& (0+255),w,b
  7482  003196  ECF6  F035         	call	_BCDtoDEC
  7483  00319A  6EDF               	movwf	indf2,c
  7484                           
  7485                           ;ds1307.h: 66: I2C_Stop();
  7486  00319C  EC9E  F035         	call	_I2C_Stop	;wreg free
  7487  0031A0  0012               	return		;funcret
  7488  0031A2  FFFF               	dw	65535	; errata NOP
  7489  0031A4                     __end_of_getDS1307TimeDate:
  7490                           	opt stack 0
  7491                           tblptru	equ	0xFF8
  7492                           tblptrh	equ	0xFF7
  7493                           tblptrl	equ	0xFF6
  7494                           tablat	equ	0xFF5
  7495                           prodh	equ	0xFF4
  7496                           prodl	equ	0xFF3
  7497                           postinc0	equ	0xFEE
  7498                           wreg	equ	0xFE8
  7499                           postdec1	equ	0xFE5
  7500                           fsr1l	equ	0xFE1
  7501                           indf2	equ	0xFDF
  7502                           postinc2	equ	0xFDE
  7503                           fsr2h	equ	0xFDA
  7504                           fsr2l	equ	0xFD9
  7505                           status	equ	0xFD8
  7506                           
  7507 ;; *************** function _BCDtoDEC *****************
  7508 ;; Defined at:
  7509 ;;		line 34 in file "function.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;  val             1    wreg     unsigned char 
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;  val             1    0[BANK0 ] unsigned char 
  7514 ;; Return value:  Size  Location     Type
  7515 ;;                  1    wreg      unsigned char 
  7516 ;; Registers used:
  7517 ;;		wreg, status,2, status,0, prodl, prodh
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7523 ;;      Params:         0       0       0       0       0       0       0
  7524 ;;      Locals:         0       1       0       0       0       0       0
  7525 ;;      Temps:          0       0       0       0       0       0       0
  7526 ;;      Totals:         0       1       0       0       0       0       0
  7527 ;;Total ram usage:        1 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; Hardware stack levels required when called:    6
  7530 ;; This function calls:
  7531 ;;		Nothing
  7532 ;; This function is called by:
  7533 ;;		_getDS1307TimeDate
  7534 ;;		_getDS1307Time
  7535 ;; This function uses a non-reentrant model
  7536 ;;
  7537                           
  7538                           	psect	text17
  7539  006BEC                     __ptext17:
  7540                           	opt stack 0
  7541  006BEC                     _BCDtoDEC:
  7542                           	opt stack 0
  7543  006BEC  FFFF               	dw	65535	; assembler added errata NOP
  7544                           
  7545                           ;incstack = 0
  7546                           ;BCDtoDEC@val stored from wreg
  7547  006BEE  0100               	movlb	0	; () banked
  7548  006BF0  6F80               	movwf	BCDtoDEC@val& (0+255),b
  7549                           
  7550                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
  7551  006BF2  0100               	movlb	0	; () banked
  7552  006BF4  3980               	swapf	BCDtoDEC@val& (0+255),w,b
  7553  006BF6  0B0F               	andlw	15
  7554  006BF8  0B0F               	andlw	15
  7555  006BFA  0D0A               	mullw	10
  7556  006BFC  5180               	movf	BCDtoDEC@val& (0+255),w,b
  7557  006BFE  0B0F               	andlw	15
  7558  006C00  24F3               	addwf	prodl,w,c
  7559                           
  7560                           ; BSR set to: 0
  7561                           
  7562                           ; BSR set to: 0
  7563  006C02  0012               	return		;funcret
  7564  006C04  FFFF               	dw	65535	; errata NOP
  7565  006C06                     __end_of_BCDtoDEC:
  7566                           	opt stack 0
  7567                           tblptru	equ	0xFF8
  7568                           tblptrh	equ	0xFF7
  7569                           tblptrl	equ	0xFF6
  7570                           tablat	equ	0xFF5
  7571                           prodh	equ	0xFF4
  7572                           prodl	equ	0xFF3
  7573                           postinc0	equ	0xFEE
  7574                           wreg	equ	0xFE8
  7575                           postdec1	equ	0xFE5
  7576                           fsr1l	equ	0xFE1
  7577                           indf2	equ	0xFDF
  7578                           postinc2	equ	0xFDE
  7579                           fsr2h	equ	0xFDA
  7580                           fsr2l	equ	0xFD9
  7581                           status	equ	0xFD8
  7582                           
  7583 ;; *************** function _dataLoger *****************
  7584 ;; Defined at:
  7585 ;;		line 12 in file "tela_DATALOGER.h"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;		None
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;  logs            1   64[BANK0 ] unsigned char 
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  1    wreg      void 
  7592 ;; Registers used:
  7593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7594 ;; Tracked objects:
  7595 ;;		On entry : 0/0
  7596 ;;		On exit  : 0/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7599 ;;      Params:         0       0       0       0       0       0       0
  7600 ;;      Locals:         0       7       0       0       0       0       0
  7601 ;;      Temps:          0       5       0       0       0       0       0
  7602 ;;      Totals:         0      12       0       0       0       0       0
  7603 ;;Total ram usage:       12 bytes
  7604 ;; Hardware stack levels used:    1
  7605 ;; Hardware stack levels required when called:    9
  7606 ;; This function calls:
  7607 ;;		___awdiv
  7608 ;;		_btPress
  7609 ;;		_readEEPROM_ext
  7610 ;;		_sprintf
  7611 ;; This function is called by:
  7612 ;;		_main
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text18
  7617  001E10                     __ptext18:
  7618                           	opt stack 0
  7619  001E10                     _dataLoger:
  7620                           	opt stack 0
  7621  001E10  FFFF               	dw	65535	; assembler added errata NOP
  7622                           
  7623                           ;tela_DATALOGER.h: 13: sprintf(line1, "Data: %02d/%02d/%02d %02d:%02d", dtl_dia, dtl_mes
      +                          , dtl_ano, dtl_hora, dtl_min);
  7624                           
  7625                           ; BSR set to: 0
  7626                           ;incstack = 0
  7627  001E12  0E80               	movlw	low _line1
  7628  001E14  0100               	movlb	0	; () banked
  7629  001E16  6FA1               	movwf	sprintf@wh& (0+255),b
  7630  001E18  0E01               	movlw	high _line1
  7631  001E1A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7632  001E1C  0EF8               	movlw	low STR_79
  7633  001E1E  6FA3               	movwf	sprintf@f& (0+255),b
  7634  001E20  0E7B               	movlw	high STR_79
  7635  001E22  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7636  001E24  C058  F0A5         	movff	_dtl_dia,?_sprintf+4
  7637  001E28  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7638  001E2A  C057  F0A7         	movff	_dtl_mes,?_sprintf+6
  7639  001E2E  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  7640  001E30  C056  F0A9         	movff	_dtl_ano,?_sprintf+8
  7641  001E34  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  7642  001E36  C055  F0AB         	movff	_dtl_hora,?_sprintf+10
  7643  001E3A  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  7644  001E3C  C054  F0AD         	movff	_dtl_min,?_sprintf+12
  7645  001E40  6BAE               	clrf	(?_sprintf+13)& (0+255),b
  7646  001E42  ECDC  F01F         	call	_sprintf	;wreg free
  7647                           
  7648                           ;tela_DATALOGER.h: 14: sprintf(line2, "Jokey: %s", dtl_jockey == 1 ? "OK" : "ERRO");
  7649  001E46  0453               	decf	_dtl_jockey,w,c
  7650  001E48  B4D8               	btfsc	status,2,c
  7651  001E4A  D005               	goto	l818
  7652  001E4C  0EE3               	movlw	low STR_50
  7653  001E4E  0100               	movlb	0	; () banked
  7654  001E50  6FBA               	movwf	_dataLoger$1450& (0+255),b
  7655  001E52  0E7F               	movlw	high STR_50
  7656  001E54  D005               	goto	L15
  7657  001E56                     l818:
  7658  001E56  FFFF               	dw	65535	; assembler added errata NOP
  7659                           
  7660                           ; BSR set to: 0
  7661  001E58  0EFA               	movlw	low STR_5
  7662  001E5A  0100               	movlb	0	; () banked
  7663  001E5C  6FBA               	movwf	_dataLoger$1450& (0+255),b
  7664  001E5E  0E7F               	movlw	high STR_5
  7665  001E60                     L15:
  7666  001E60  FFFF               	dw	65535	; assembler added errata NOP
  7667  001E62  6FBB               	movwf	(_dataLoger$1450+1)& (0+255),b
  7668                           
  7669                           ; BSR set to: 0
  7670                           
  7671                           ; BSR set to: 0
  7672  001E64  0E6B               	movlw	low _line2
  7673  001E66  6FA1               	movwf	sprintf@wh& (0+255),b
  7674  001E68  0E01               	movlw	high _line2
  7675  001E6A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7676  001E6C  0E7F               	movlw	low STR_80
  7677  001E6E  6FA3               	movwf	sprintf@f& (0+255),b
  7678  001E70  0E7F               	movlw	high STR_80
  7679  001E72  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7680  001E74  C0BA  F0A5         	movff	_dataLoger$1450,?_sprintf+4
  7681  001E78  C0BB  F0A6         	movff	_dataLoger$1450+1,?_sprintf+5
  7682  001E7C  ECDC  F01F         	call	_sprintf	;wreg free
  7683                           
  7684                           ;tela_DATALOGER.h: 15: sprintf(&line2[14], "#%02d/%02d", (dtl_posi_visualizar + 1), tota
      +                          lLogs);
  7685  001E80  0E79               	movlw	low (_line2+14)
  7686  001E82  0100               	movlb	0	; () banked
  7687  001E84  6FA1               	movwf	sprintf@wh& (0+255),b
  7688  001E86  0E01               	movlw	high (_line2+14)
  7689  001E88  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7690  001E8A  0E2B               	movlw	low STR_83
  7691  001E8C  6FA3               	movwf	sprintf@f& (0+255),b
  7692  001E8E  0E7F               	movlw	high STR_83
  7693  001E90  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7694  001E92  0E01               	movlw	1
  7695  001E94  244E               	addwf	_dtl_posi_visualizar,w,c
  7696  001E96  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  7697  001E98  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  7698  001E9A  0E00               	movlw	0
  7699  001E9C  23A6               	addwfc	(?_sprintf+5)& (0+255),f,b
  7700  001E9E  C04F  F0A7         	movff	_totalLogs,?_sprintf+6
  7701  001EA2  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  7702  001EA4  ECDC  F01F         	call	_sprintf	;wreg free
  7703                           
  7704                           ;tela_DATALOGER.h: 16: sprintf(line3, "Principal: %s", dtl_principal == 1 ? "OK" : "ERRO
      +                          ");
  7705  001EA8  0452               	decf	_dtl_principal,w,c
  7706  001EAA  B4D8               	btfsc	status,2,c
  7707  001EAC  D005               	goto	l822
  7708  001EAE  0EE3               	movlw	low STR_50
  7709  001EB0  0100               	movlb	0	; () banked
  7710  001EB2  6FBC               	movwf	_dataLoger$1456& (0+255),b
  7711  001EB4  0E7F               	movlw	high STR_50
  7712  001EB6  D005               	goto	L16
  7713  001EB8                     l822:
  7714  001EB8  FFFF               	dw	65535	; assembler added errata NOP
  7715                           
  7716                           ; BSR set to: 0
  7717  001EBA  0EFA               	movlw	low STR_5
  7718  001EBC  0100               	movlb	0	; () banked
  7719  001EBE  6FBC               	movwf	_dataLoger$1456& (0+255),b
  7720  001EC0  0E7F               	movlw	high STR_5
  7721  001EC2                     L16:
  7722  001EC2  FFFF               	dw	65535	; assembler added errata NOP
  7723  001EC4  6FBD               	movwf	(_dataLoger$1456+1)& (0+255),b
  7724                           
  7725                           ; BSR set to: 0
  7726                           
  7727                           ; BSR set to: 0
  7728  001EC6  0E56               	movlw	low _line3
  7729  001EC8  6FA1               	movwf	sprintf@wh& (0+255),b
  7730  001ECA  0E01               	movlw	high _line3
  7731  001ECC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7732  001ECE  0E96               	movlw	low STR_84
  7733  001ED0  6FA3               	movwf	sprintf@f& (0+255),b
  7734  001ED2  0E7E               	movlw	high STR_84
  7735  001ED4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7736  001ED6  C0BC  F0A5         	movff	_dataLoger$1456,?_sprintf+4
  7737  001EDA  C0BD  F0A6         	movff	_dataLoger$1456+1,?_sprintf+5
  7738  001EDE  ECDC  F01F         	call	_sprintf	;wreg free
  7739                           
  7740                           ;tela_DATALOGER.h: 17: sprintf(line4, "Combustao: %s", dtl_estacionaria == 1 ? "OK" : "E
      +                          RRO");
  7741  001EE2  0451               	decf	_dtl_estacionaria,w,c
  7742  001EE4  B4D8               	btfsc	status,2,c
  7743  001EE6  D005               	goto	l826
  7744  001EE8  0EE3               	movlw	low STR_50
  7745  001EEA  0100               	movlb	0	; () banked
  7746  001EEC  6FBE               	movwf	_dataLoger$1461& (0+255),b
  7747  001EEE  0E7F               	movlw	high STR_50
  7748  001EF0  D005               	goto	L17
  7749  001EF2                     l826:
  7750  001EF2  FFFF               	dw	65535	; assembler added errata NOP
  7751                           
  7752                           ; BSR set to: 0
  7753  001EF4  0EFA               	movlw	low STR_5
  7754  001EF6  0100               	movlb	0	; () banked
  7755  001EF8  6FBE               	movwf	_dataLoger$1461& (0+255),b
  7756  001EFA  0E7F               	movlw	high STR_5
  7757  001EFC                     L17:
  7758  001EFC  FFFF               	dw	65535	; assembler added errata NOP
  7759  001EFE  6FBF               	movwf	(_dataLoger$1461+1)& (0+255),b
  7760                           
  7761                           ; BSR set to: 0
  7762                           
  7763                           ; BSR set to: 0
  7764  001F00  0E41               	movlw	low _line4
  7765  001F02  6FA1               	movwf	sprintf@wh& (0+255),b
  7766  001F04  0E01               	movlw	high _line4
  7767  001F06  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  7768  001F08  0EA4               	movlw	low STR_87
  7769  001F0A  6FA3               	movwf	sprintf@f& (0+255),b
  7770  001F0C  0E7E               	movlw	high STR_87
  7771  001F0E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  7772  001F10  C0BE  F0A5         	movff	_dataLoger$1461,?_sprintf+4
  7773  001F14  C0BF  F0A6         	movff	_dataLoger$1461+1,?_sprintf+5
  7774  001F18  ECDC  F01F         	call	_sprintf	;wreg free
  7775                           
  7776                           ;tela_DATALOGER.h: 19: if (btPress(1)) {
  7777  001F1C  0E01               	movlw	1
  7778  001F1E  EC55  F03A         	call	_btPress
  7779  001F22  0900               	iorlw	0
  7780  001F24  B4D8               	btfsc	status,2,c
  7781  001F26  D005               	goto	l829
  7782                           
  7783                           ;tela_DATALOGER.h: 20: option_posi = 0;
  7784  001F28  0E00               	movlw	0
  7785  001F2A  0100               	movlb	0	; () banked
  7786  001F2C  6FE1               	movwf	_option_posi& (0+255),b
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;tela_DATALOGER.h: 21: menu_posi = _menu_posi;
  7790  001F2E  C0DF  F0E0         	movff	__menu_posi,_menu_posi
  7791  001F32                     l829:
  7792  001F32  FFFF               	dw	65535	; assembler added errata NOP
  7793                           
  7794                           ;tela_DATALOGER.h: 22: }
  7795                           ;tela_DATALOGER.h: 27: if (btPress(2)) {
  7796                           
  7797                           ; BSR set to: 0
  7798  001F34  0E02               	movlw	2
  7799  001F36  EC55  F03A         	call	_btPress
  7800  001F3A  0900               	iorlw	0
  7801  001F3C  B4D8               	btfsc	status,2,c
  7802  001F3E  D00B               	goto	l830
  7803                           
  7804                           ;tela_DATALOGER.h: 28: dtl_posicao -= 8;
  7805  001F40  0E08               	movlw	8
  7806  001F42  0100               	movlb	0	; () banked
  7807  001F44  5FFB               	subwf	_dtl_posicao& (0+255),f,b
  7808                           
  7809                           ;tela_DATALOGER.h: 29: if (dtl_posicao < 60) {
  7810  001F46  0E3C               	movlw	60
  7811  001F48  61FB               	cpfslt	_dtl_posicao& (0+255),b
  7812  001F4A  D002               	goto	l831
  7813                           
  7814                           ; BSR set to: 0
  7815                           ;tela_DATALOGER.h: 30: dtl_posicao = 60;
  7816  001F4C  0E3C               	movlw	60
  7817  001F4E  6FFB               	movwf	_dtl_posicao& (0+255),b
  7818  001F50                     l831:
  7819  001F50  FFFF               	dw	65535	; assembler added errata NOP
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;tela_DATALOGER.h: 31: }
  7823                           ;tela_DATALOGER.h: 32: dtl_carregar_log = 1;
  7824  001F52  0E01               	movlw	1
  7825  001F54  6E50               	movwf	_dtl_carregar_log,c
  7826  001F56                     l830:
  7827  001F56  FFFF               	dw	65535	; assembler added errata NOP
  7828                           
  7829                           ;tela_DATALOGER.h: 33: }
  7830                           ;tela_DATALOGER.h: 34: if (btPress(3)) {
  7831                           
  7832                           ; BSR set to: 0
  7833  001F58  0E03               	movlw	3
  7834  001F5A  EC55  F03A         	call	_btPress
  7835  001F5E  0900               	iorlw	0
  7836  001F60  B4D8               	btfsc	status,2,c
  7837  001F62  D019               	goto	l832
  7838                           
  7839                           ;tela_DATALOGER.h: 35: if ((dtl_posi_visualizar + 1) >= totalLogs) {
  7840  001F64  504F               	movf	_totalLogs,w,c
  7841  001F66  0100               	movlb	0	; () banked
  7842  001F68  6FB5               	movwf	??_dataLoger& (0+255),b
  7843  001F6A  6BB6               	clrf	(??_dataLoger+1)& (0+255),b
  7844  001F6C  504E               	movf	_dtl_posi_visualizar,w,c
  7845  001F6E  6FB7               	movwf	(??_dataLoger+2)& (0+255),b
  7846  001F70  6BB8               	clrf	(??_dataLoger+3)& (0+255),b
  7847  001F72  0E01               	movlw	1
  7848  001F74  27B7               	addwf	(??_dataLoger+2)& (0+255),f,b
  7849  001F76  0E00               	movlw	0
  7850  001F78  23B8               	addwfc	(??_dataLoger+3)& (0+255),f,b
  7851  001F7A  51B5               	movf	??_dataLoger& (0+255),w,b
  7852  001F7C  5DB7               	subwf	(??_dataLoger+2)& (0+255),w,b
  7853  001F7E  51B8               	movf	(??_dataLoger+3)& (0+255),w,b
  7854  001F80  0A80               	xorlw	128
  7855  001F82  6FB9               	movwf	(??_dataLoger+4)& (0+255),b
  7856  001F84  51B6               	movf	(??_dataLoger+1)& (0+255),w,b
  7857  001F86  0A80               	xorlw	128
  7858  001F88  59B9               	subwfb	(??_dataLoger+4)& (0+255),w,b
  7859  001F8A  B0D8               	btfsc	status,0,c
  7860  001F8C  D05A               	goto	l835
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;tela_DATALOGER.h: 37: }
  7864                           ;tela_DATALOGER.h: 38: dtl_posicao += 8;
  7865                           
  7866                           ; BSR set to: 0
  7867                           
  7868                           ; BSR set to: 0
  7869                           ;tela_DATALOGER.h: 36: return;
  7870  001F8E  0E08               	movlw	8
  7871  001F90  27FB               	addwf	_dtl_posicao& (0+255),f,b
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;tela_DATALOGER.h: 39: dtl_carregar_log = 1;
  7875  001F92  0E01               	movlw	1
  7876  001F94  6E50               	movwf	_dtl_carregar_log,c
  7877  001F96                     l832:
  7878  001F96  FFFF               	dw	65535	; assembler added errata NOP
  7879                           
  7880                           ;tela_DATALOGER.h: 40: }
  7881                           ;tela_DATALOGER.h: 42: if (dtl_carregar_log == 1) {
  7882                           
  7883                           ; BSR set to: 0
  7884  001F98  0450               	decf	_dtl_carregar_log,w,c
  7885  001F9A  A4D8               	btfss	status,2,c
  7886  001F9C  D052               	goto	l835
  7887                           
  7888                           ;tela_DATALOGER.h: 43: char logs = readEEPROM_ext(14);
  7889  001F9E  0E0E               	movlw	14
  7890  001FA0  EC6C  F039         	call	_readEEPROM_ext
  7891  001FA4  0100               	movlb	0	; () banked
  7892  001FA6  6FC0               	movwf	dataLoger@logs& (0+255),b
  7893                           
  7894                           ;tela_DATALOGER.h: 44: totalLogs = (logs - 60) / 8;
  7895  001FA8  0EC4               	movlw	196
  7896  001FAA  25C0               	addwf	dataLoger@logs& (0+255),w,b
  7897  001FAC  6F80               	movwf	___awdiv@dividend& (0+255),b
  7898  001FAE  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  7899  001FB0  0EFF               	movlw	255
  7900  001FB2  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  7901  001FB4  0E00               	movlw	0
  7902  001FB6  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7903  001FB8  0E08               	movlw	8
  7904  001FBA  6F82               	movwf	___awdiv@divisor& (0+255),b
  7905  001FBC  EC8F  F01F         	call	___awdiv	;wreg free
  7906  001FC0  0100               	movlb	0	; () banked
  7907  001FC2  5180               	movf	?___awdiv& (0+255),w,b
  7908  001FC4  6E4F               	movwf	_totalLogs,c
  7909                           
  7910                           ;tela_DATALOGER.h: 46: dtl_posi_visualizar = (dtl_posicao - 60) / 8;
  7911  001FC6  0EC4               	movlw	196
  7912  001FC8  25FB               	addwf	_dtl_posicao& (0+255),w,b
  7913  001FCA  6F80               	movwf	___awdiv@dividend& (0+255),b
  7914  001FCC  6B81               	clrf	(___awdiv@dividend+1)& (0+255),b
  7915  001FCE  0EFF               	movlw	255
  7916  001FD0  2381               	addwfc	(___awdiv@dividend+1)& (0+255),f,b
  7917  001FD2  0E00               	movlw	0
  7918  001FD4  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  7919  001FD6  0E08               	movlw	8
  7920  001FD8  6F82               	movwf	___awdiv@divisor& (0+255),b
  7921  001FDA  EC8F  F01F         	call	___awdiv	;wreg free
  7922  001FDE  0100               	movlb	0	; () banked
  7923  001FE0  5180               	movf	?___awdiv& (0+255),w,b
  7924  001FE2  6E4E               	movwf	_dtl_posi_visualizar,c
  7925                           
  7926                           ;tela_DATALOGER.h: 48: dtl_dia = readEEPROM_ext(dtl_posicao);
  7927  001FE4  51FB               	movf	_dtl_posicao& (0+255),w,b
  7928  001FE6  EC6C  F039         	call	_readEEPROM_ext
  7929  001FEA  6E58               	movwf	_dtl_dia,c
  7930                           
  7931                           ;tela_DATALOGER.h: 49: dtl_mes = readEEPROM_ext((dtl_posicao + 1));
  7932  001FEC  0100               	movlb	0	; () banked
  7933  001FEE  29FB               	incf	_dtl_posicao& (0+255),w,b
  7934  001FF0  EC6C  F039         	call	_readEEPROM_ext
  7935  001FF4  6E57               	movwf	_dtl_mes,c
  7936                           
  7937                           ;tela_DATALOGER.h: 50: dtl_ano = readEEPROM_ext((dtl_posicao + 2));
  7938  001FF6  0100               	movlb	0	; () banked
  7939  001FF8  51FB               	movf	_dtl_posicao& (0+255),w,b
  7940  001FFA  0F02               	addlw	2
  7941  001FFC  EC6C  F039         	call	_readEEPROM_ext
  7942  002000  6E56               	movwf	_dtl_ano,c
  7943                           
  7944                           ;tela_DATALOGER.h: 51: dtl_hora = readEEPROM_ext((dtl_posicao + 3));
  7945  002002  0100               	movlb	0	; () banked
  7946  002004  51FB               	movf	_dtl_posicao& (0+255),w,b
  7947  002006  0F03               	addlw	3
  7948  002008  EC6C  F039         	call	_readEEPROM_ext
  7949  00200C  6E55               	movwf	_dtl_hora,c
  7950                           
  7951                           ;tela_DATALOGER.h: 52: dtl_min = readEEPROM_ext((dtl_posicao + 4));
  7952  00200E  0100               	movlb	0	; () banked
  7953  002010  51FB               	movf	_dtl_posicao& (0+255),w,b
  7954  002012  0F04               	addlw	4
  7955  002014  EC6C  F039         	call	_readEEPROM_ext
  7956  002018  6E54               	movwf	_dtl_min,c
  7957                           
  7958                           ;tela_DATALOGER.h: 53: dtl_jockey = readEEPROM_ext((dtl_posicao + 5));
  7959  00201A  0100               	movlb	0	; () banked
  7960  00201C  51FB               	movf	_dtl_posicao& (0+255),w,b
  7961  00201E  0F05               	addlw	5
  7962  002020  EC6C  F039         	call	_readEEPROM_ext
  7963  002024  6E53               	movwf	_dtl_jockey,c
  7964                           
  7965                           ;tela_DATALOGER.h: 54: dtl_principal = readEEPROM_ext((dtl_posicao + 6));
  7966  002026  0100               	movlb	0	; () banked
  7967  002028  51FB               	movf	_dtl_posicao& (0+255),w,b
  7968  00202A  0F06               	addlw	6
  7969  00202C  EC6C  F039         	call	_readEEPROM_ext
  7970  002030  6E52               	movwf	_dtl_principal,c
  7971                           
  7972                           ;tela_DATALOGER.h: 55: dtl_estacionaria = readEEPROM_ext((dtl_posicao + 7));
  7973  002032  0100               	movlb	0	; () banked
  7974  002034  51FB               	movf	_dtl_posicao& (0+255),w,b
  7975  002036  0F07               	addlw	7
  7976  002038  EC6C  F039         	call	_readEEPROM_ext
  7977  00203C  6E51               	movwf	_dtl_estacionaria,c
  7978                           
  7979                           ;tela_DATALOGER.h: 56: dtl_carregar_log = 0;
  7980  00203E  0E00               	movlw	0
  7981  002040  6E50               	movwf	_dtl_carregar_log,c
  7982  002042                     l835:
  7983  002042  FFFF               	dw	65535	; assembler added errata NOP
  7984  002044  0012               	return		;funcret
  7985  002046  FFFF               	dw	65535	; errata NOP
  7986  002048                     __end_of_dataLoger:
  7987                           	opt stack 0
  7988                           tblptru	equ	0xFF8
  7989                           tblptrh	equ	0xFF7
  7990                           tblptrl	equ	0xFF6
  7991                           tablat	equ	0xFF5
  7992                           prodh	equ	0xFF4
  7993                           prodl	equ	0xFF3
  7994                           postinc0	equ	0xFEE
  7995                           wreg	equ	0xFE8
  7996                           postdec1	equ	0xFE5
  7997                           fsr1l	equ	0xFE1
  7998                           indf2	equ	0xFDF
  7999                           postinc2	equ	0xFDE
  8000                           fsr2h	equ	0xFDA
  8001                           fsr2l	equ	0xFD9
  8002                           status	equ	0xFD8
  8003                           
  8004 ;; *************** function _criarCaracteresCGRAM *****************
  8005 ;; Defined at:
  8006 ;;		line 152 in file "lcd.h"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;		None
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;  character      48    7[BANK0 ] const unsigned char [8][
  8011 ;;  i               1   59[BANK0 ] unsigned char 
  8012 ;;  j               1   58[BANK0 ] unsigned char 
  8013 ;;  k               1   57[BANK0 ] unsigned char 
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      void 
  8016 ;; Registers used:
  8017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8023 ;;      Params:         0       0       0       0       0       0       0
  8024 ;;      Locals:         0      53       0       0       0       0       0
  8025 ;;      Temps:          0       3       0       0       0       0       0
  8026 ;;      Totals:         0      56       0       0       0       0       0
  8027 ;;Total ram usage:       56 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    8
  8030 ;; This function calls:
  8031 ;;		_Lcd_Cmd
  8032 ;;		_Lcd_Write_Char
  8033 ;; This function is called by:
  8034 ;;		_main
  8035 ;; This function uses a non-reentrant model
  8036 ;;
  8037                           
  8038                           	psect	text19
  8039  003B70                     __ptext19:
  8040                           	opt stack 0
  8041  003B70                     _criarCaracteresCGRAM:
  8042                           	opt stack 0
  8043  003B70  FFFF               	dw	65535	; assembler added errata NOP
  8044                           
  8045                           ;lcd.h: 153: const char character[6][8] = {
  8046                           ;lcd.h: 154: 0x00, 0x1F, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04,
  8047                           ;lcd.h: 155: 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10,
  8048                           ;lcd.h: 156: 0x00, 0x00, 0x00, 0x04, 0x04, 0x14, 0x14, 0x14,
  8049                           ;lcd.h: 157: 0x00, 0x01, 0x01, 0x05, 0x05, 0x15, 0x15, 0x15,
  8050                           ;lcd.h: 158: 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04,
  8051                           ;lcd.h: 159: };
  8052                           
  8053                           ;incstack = 0
  8054  003B72  0E99               	movlw	low criarCaracteresCGRAM@F2962
  8055  003B74  6EF6               	movwf	tblptrl,c
  8056  003B76                     	if	1	;There is more than 1 active tblptr byte
  8057  003B76  0E7A               	movlw	high criarCaracteresCGRAM@F2962
  8058  003B78  6EF7               	movwf	tblptrh,c
  8059  003B7A                     	endif
  8060  003B7A                     	if	0	;There are less than 3 active tblptr bytes
  8061  003B7A                     	endif
  8062  003B7A  EE20  F087         	lfsr	2,criarCaracteresCGRAM@character
  8063  003B7E  0E2F               	movlw	47
  8064  003B80                     u8060:
  8065  003B80  0009               	tblrd		*+
  8066  003B82  FFFF               	dw	65535	; errata NOP
  8067  003B84  CFF5 FFDE          	movff	tablat,postinc2
  8068  003B88  06E8               	decf	wreg,f,c
  8069  003B8A  E2FA               	bc	u8060
  8070                           
  8071                           ;lcd.h: 160: Lcd_Cmd(0b0100);
  8072  003B8C  0E04               	movlw	4
  8073  003B8E  EC50  F036         	call	_Lcd_Cmd
  8074                           
  8075                           ;lcd.h: 161: Lcd_Cmd(0b0000);
  8076  003B92  0E00               	movlw	0
  8077  003B94  EC50  F036         	call	_Lcd_Cmd
  8078                           
  8079                           ;lcd.h: 162: _delay((unsigned long)((100)*(8000000/4000000.0)));
  8080  003B98  0E32               	movlw	50
  8081  003B9A                     u9387:
  8082  003B9A  FFFF               	dw	65535	; errata NOP
  8083  003B9C  2EE8               	decfsz	wreg,f,c
  8084  003B9E  D7FD               	bra	u9387
  8085                           
  8086                           ;lcd.h: 163: char i = 0, j = 0, k = 0;
  8087  003BA0  0E00               	movlw	0
  8088  003BA2  0100               	movlb	0	; () banked
  8089  003BA4  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  8090                           
  8091                           ; BSR set to: 0
  8092  003BA6  0E00               	movlw	0
  8093  003BA8  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  8094                           
  8095                           ; BSR set to: 0
  8096  003BAA  0E00               	movlw	0
  8097  003BAC  6FB9               	movwf	criarCaracteresCGRAM@k& (0+255),b
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;lcd.h: 164: for (i = 0; i < 5; i++) {
  8101  003BAE  0E00               	movlw	0
  8102  003BB0  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  8103  003BB2                     l7175:
  8104  003BB2  FFFF               	dw	65535	; assembler added errata NOP
  8105                           
  8106                           ; BSR set to: 0
  8107  003BB4  0E04               	movlw	4
  8108  003BB6  65BB               	cpfsgt	criarCaracteresCGRAM@i& (0+255),b
  8109  003BB8  D001               	goto	l694
  8110  003BBA  D03A               	goto	u8120
  8111  003BBC                     l694:
  8112  003BBC  FFFF               	dw	65535	; assembler added errata NOP
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;lcd.h: 165: if (k == 1) i = 0;
  8116                           
  8117                           ; BSR set to: 0
  8118  003BBE  05B9               	decf	criarCaracteresCGRAM@k& (0+255),w,b
  8119  003BC0  A4D8               	btfss	status,2,c
  8120  003BC2  D002               	goto	l696
  8121                           
  8122                           ; BSR set to: 0
  8123  003BC4  0E00               	movlw	0
  8124  003BC6  6FBB               	movwf	criarCaracteresCGRAM@i& (0+255),b
  8125  003BC8                     l696:
  8126  003BC8  FFFF               	dw	65535	; assembler added errata NOP
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;lcd.h: 166: for (j = 0; j < 8; j++) {
  8130  003BCA  0E00               	movlw	0
  8131  003BCC  6FBA               	movwf	criarCaracteresCGRAM@j& (0+255),b
  8132  003BCE                     l7183:
  8133  003BCE  FFFF               	dw	65535	; assembler added errata NOP
  8134                           
  8135                           ; BSR set to: 0
  8136  003BD0  0E07               	movlw	7
  8137  003BD2  65BA               	cpfsgt	criarCaracteresCGRAM@j& (0+255),b
  8138  003BD4  D001               	goto	l697
  8139  003BD6  D028               	goto	u8110
  8140  003BD8                     l697:
  8141  003BD8  FFFF               	dw	65535	; assembler added errata NOP
  8142                           
  8143                           ; BSR set to: 0
  8144                           ;lcd.h: 167: Lcd_Write_Char((k) ? character[i][j] : 0);
  8145                           
  8146                           ; BSR set to: 0
  8147  003BDA  51B9               	movf	criarCaracteresCGRAM@k& (0+255),w,b
  8148  003BDC  A4D8               	btfss	status,2,c
  8149  003BDE  D005               	goto	l700
  8150                           
  8151                           ; BSR set to: 0
  8152  003BE0  0E00               	movlw	0
  8153  003BE2  6FB8               	movwf	(_criarCaracteresCGRAM$1387+1)& (0+255),b
  8154  003BE4  0E00               	movlw	0
  8155  003BE6  6FB7               	movwf	_criarCaracteresCGRAM$1387& (0+255),b
  8156  003BE8  D018               	goto	l702
  8157  003BEA                     l700:
  8158  003BEA  FFFF               	dw	65535	; assembler added errata NOP
  8159                           
  8160                           ; BSR set to: 0
  8161                           
  8162                           ; BSR set to: 0
  8163  003BEC  51BB               	movf	criarCaracteresCGRAM@i& (0+255),w,b
  8164  003BEE  0D08               	mullw	8
  8165  003BF0  0E87               	movlw	low criarCaracteresCGRAM@character
  8166  003BF2  6F84               	movwf	??_criarCaracteresCGRAM& (0+255),b
  8167  003BF4  0E00               	movlw	high criarCaracteresCGRAM@character
  8168  003BF6  6F85               	movwf	(??_criarCaracteresCGRAM+1)& (0+255),b
  8169  003BF8  50F3               	movf	prodl,w,c
  8170  003BFA  2784               	addwf	??_criarCaracteresCGRAM& (0+255),f,b
  8171  003BFC  50F4               	movf	prodh,w,c
  8172  003BFE  2385               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),f,b
  8173  003C00  51BA               	movf	criarCaracteresCGRAM@j& (0+255),w,b
  8174  003C02  0D01               	mullw	1
  8175  003C04  50F3               	movf	prodl,w,c
  8176  003C06  2584               	addwf	??_criarCaracteresCGRAM& (0+255),w,b
  8177  003C08  6ED9               	movwf	fsr2l,c
  8178  003C0A  50F4               	movf	prodh,w,c
  8179  003C0C  2185               	addwfc	(??_criarCaracteresCGRAM+1)& (0+255),w,b
  8180  003C0E  6EDA               	movwf	fsr2h,c
  8181  003C10  50DF               	movf	indf2,w,c
  8182  003C12  6F86               	movwf	(??_criarCaracteresCGRAM+2)& (0+255),b
  8183  003C14  5186               	movf	(??_criarCaracteresCGRAM+2)& (0+255),w,b
  8184  003C16  6FB7               	movwf	_criarCaracteresCGRAM$1387& (0+255),b
  8185  003C18  6BB8               	clrf	(_criarCaracteresCGRAM$1387+1)& (0+255),b
  8186  003C1A                     l702:
  8187  003C1A  FFFF               	dw	65535	; assembler added errata NOP
  8188                           
  8189                           ; BSR set to: 0
  8190                           
  8191                           ; BSR set to: 0
  8192  003C1C  51B7               	movf	_criarCaracteresCGRAM$1387& (0+255),w,b
  8193  003C1E  EC74  F038         	call	_Lcd_Write_Char
  8194  003C22  0100               	movlb	0	; () banked
  8195  003C24  2BBA               	incf	criarCaracteresCGRAM@j& (0+255),f,b
  8196  003C26  D7D3               	goto	l7183
  8197  003C28                     u8110:
  8198  003C28  FFFF               	dw	65535	; assembler added errata NOP
  8199                           
  8200                           ; BSR set to: 0
  8201                           ;lcd.h: 168: }
  8202                           ;lcd.h: 169: k++;
  8203                           
  8204                           ; BSR set to: 0
  8205  003C2A  2BB9               	incf	criarCaracteresCGRAM@k& (0+255),f,b
  8206  003C2C  2BBB               	incf	criarCaracteresCGRAM@i& (0+255),f,b
  8207  003C2E  D7C1               	goto	l7175
  8208  003C30                     u8120:
  8209  003C30  FFFF               	dw	65535	; assembler added errata NOP
  8210                           
  8211                           ; BSR set to: 0
  8212                           
  8213                           ; BSR set to: 0
  8214  003C32  0012               	return		;funcret
  8215  003C34  FFFF               	dw	65535	; errata NOP
  8216  003C36                     __end_of_criarCaracteresCGRAM:
  8217                           	opt stack 0
  8218                           tblptru	equ	0xFF8
  8219                           tblptrh	equ	0xFF7
  8220                           tblptrl	equ	0xFF6
  8221                           tablat	equ	0xFF5
  8222                           prodh	equ	0xFF4
  8223                           prodl	equ	0xFF3
  8224                           postinc0	equ	0xFEE
  8225                           wreg	equ	0xFE8
  8226                           postdec1	equ	0xFE5
  8227                           fsr1l	equ	0xFE1
  8228                           indf2	equ	0xFDF
  8229                           postinc2	equ	0xFDE
  8230                           fsr2h	equ	0xFDA
  8231                           fsr2l	equ	0xFD9
  8232                           status	equ	0xFD8
  8233                           
  8234 ;; *************** function _configurarEstacionaria *****************
  8235 ;; Defined at:
  8236 ;;		line 7 in file "tela_ESTACIONARIA.h"
  8237 ;; Parameters:    Size  Location     Type
  8238 ;;		None
  8239 ;; Auto vars:     Size  Location     Type
  8240 ;;		None
  8241 ;; Return value:  Size  Location     Type
  8242 ;;                  1    wreg      void 
  8243 ;; Registers used:
  8244 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8245 ;; Tracked objects:
  8246 ;;		On entry : 0/0
  8247 ;;		On exit  : 0/0
  8248 ;;		Unchanged: 0/0
  8249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8250 ;;      Params:         0       0       0       0       0       0       0
  8251 ;;      Locals:         0       0       0       0       0       0       0
  8252 ;;      Temps:          0       0       0       0       0       0       0
  8253 ;;      Totals:         0       0       0       0       0       0       0
  8254 ;;Total ram usage:        0 bytes
  8255 ;; Hardware stack levels used:    1
  8256 ;; Hardware stack levels required when called:    9
  8257 ;; This function calls:
  8258 ;;		_blink
  8259 ;;		_btPress
  8260 ;;		_sprintf
  8261 ;;		_writeEEPROM_ext
  8262 ;; This function is called by:
  8263 ;;		_main
  8264 ;; This function uses a non-reentrant model
  8265 ;;
  8266                           
  8267                           	psect	text20
  8268  002DBE                     __ptext20:
  8269                           	opt stack 0
  8270  002DBE                     _configurarEstacionaria:
  8271                           	opt stack 0
  8272  002DBE  FFFF               	dw	65535	; assembler added errata NOP
  8273                           
  8274                           ;tela_ESTACIONARIA.h: 9: sprintf(line1, "Configuracao tempo");
  8275                           
  8276                           ; BSR set to: 0
  8277                           ;incstack = 0
  8278  002DC0  0E80               	movlw	low _line1
  8279  002DC2  0100               	movlb	0	; () banked
  8280  002DC4  6FA1               	movwf	sprintf@wh& (0+255),b
  8281  002DC6  0E01               	movlw	high _line1
  8282  002DC8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8283  002DCA  0E1D               	movlw	low STR_100
  8284  002DCC  6FA3               	movwf	sprintf@f& (0+255),b
  8285  002DCE  0E7D               	movlw	high STR_100
  8286  002DD0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8287  002DD2  ECDC  F01F         	call	_sprintf	;wreg free
  8288                           
  8289                           ;tela_ESTACIONARIA.h: 10: sprintf(line2, "Max. PARTIDA:");
  8290  002DD6  0E6B               	movlw	low _line2
  8291  002DD8  0100               	movlb	0	; () banked
  8292  002DDA  6FA1               	movwf	sprintf@wh& (0+255),b
  8293  002DDC  0E01               	movlw	high _line2
  8294  002DDE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8295  002DE0  0E88               	movlw	low STR_101
  8296  002DE2  6FA3               	movwf	sprintf@f& (0+255),b
  8297  002DE4  0E7E               	movlw	high STR_101
  8298  002DE6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8299  002DE8  ECDC  F01F         	call	_sprintf	;wreg free
  8300                           
  8301                           ;tela_ESTACIONARIA.h: 11: sprintf(&line2[16], "%3ds", tempo_limite_estacionaria);
  8302  002DEC  0E7B               	movlw	low (_line2+16)
  8303  002DEE  0100               	movlb	0	; () banked
  8304  002DF0  6FA1               	movwf	sprintf@wh& (0+255),b
  8305  002DF2  0E01               	movlw	high (_line2+16)
  8306  002DF4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8307  002DF6  0EED               	movlw	low STR_102
  8308  002DF8  6FA3               	movwf	sprintf@f& (0+255),b
  8309  002DFA  0E7F               	movlw	high STR_102
  8310  002DFC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8311  002DFE  C0E6  F0A5         	movff	_tempo_limite_estacionaria,?_sprintf+4
  8312  002E02  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  8313  002E04  ECDC  F01F         	call	_sprintf	;wreg free
  8314                           
  8315                           ;tela_ESTACIONARIA.h: 12: sprintf(line3, "Max. TESTE:");
  8316  002E08  0E56               	movlw	low _line3
  8317  002E0A  0100               	movlb	0	; () banked
  8318  002E0C  6FA1               	movwf	sprintf@wh& (0+255),b
  8319  002E0E  0E01               	movlw	high _line3
  8320  002E10  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8321  002E12  0EE4               	movlw	low STR_103
  8322  002E14  6FA3               	movwf	sprintf@f& (0+255),b
  8323  002E16  0E7E               	movlw	high STR_103
  8324  002E18  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8325  002E1A  ECDC  F01F         	call	_sprintf	;wreg free
  8326                           
  8327                           ;tela_ESTACIONARIA.h: 13: sprintf(&line3[16], "%3ds", tempo_limite_teste_estacionaria);
  8328  002E1E  0E66               	movlw	low (_line3+16)
  8329  002E20  0100               	movlb	0	; () banked
  8330  002E22  6FA1               	movwf	sprintf@wh& (0+255),b
  8331  002E24  0E01               	movlw	high (_line3+16)
  8332  002E26  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8333  002E28  0EED               	movlw	low STR_102
  8334  002E2A  6FA3               	movwf	sprintf@f& (0+255),b
  8335  002E2C  0E7F               	movlw	high STR_102
  8336  002E2E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8337  002E30  C067  F0A5         	movff	_tempo_limite_teste_estacionaria,?_sprintf+4
  8338  002E34  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  8339  002E36  ECDC  F01F         	call	_sprintf	;wreg free
  8340                           
  8341                           ;tela_ESTACIONARIA.h: 14: sprintf(line4, "horimetro:%5d min", horimetro);
  8342  002E3A  0E41               	movlw	low _line4
  8343  002E3C  0100               	movlb	0	; () banked
  8344  002E3E  6FA1               	movwf	sprintf@wh& (0+255),b
  8345  002E40  0E01               	movlw	high _line4
  8346  002E42  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8347  002E44  0E79               	movlw	low STR_105
  8348  002E46  6FA3               	movwf	sprintf@f& (0+255),b
  8349  002E48  0E7D               	movlw	high STR_105
  8350  002E4A  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8351  002E4C  C103  F0A5         	movff	_horimetro,?_sprintf+4
  8352  002E50  C104  F0A6         	movff	_horimetro+1,?_sprintf+5
  8353  002E54  ECDC  F01F         	call	_sprintf	;wreg free
  8354                           
  8355                           ;tela_ESTACIONARIA.h: 16: if (btPress(4)) {
  8356  002E58  0E04               	movlw	4
  8357  002E5A  EC55  F03A         	call	_btPress
  8358  002E5E  0900               	iorlw	0
  8359  002E60  B4D8               	btfsc	status,2,c
  8360  002E62  D002               	goto	l885
  8361                           
  8362                           ;tela_ESTACIONARIA.h: 17: option_posi++;
  8363  002E64  0100               	movlb	0	; () banked
  8364  002E66  2BE1               	incf	_option_posi& (0+255),f,b
  8365  002E68                     l885:
  8366  002E68  FFFF               	dw	65535	; assembler added errata NOP
  8367                           
  8368                           ;tela_ESTACIONARIA.h: 18: }
  8369                           ;tela_ESTACIONARIA.h: 19: if (btPress(1)) {
  8370                           
  8371                           ; BSR set to: 0
  8372  002E6A  0E01               	movlw	1
  8373  002E6C  EC55  F03A         	call	_btPress
  8374  002E70  0900               	iorlw	0
  8375  002E72  B4D8               	btfsc	status,2,c
  8376  002E74  D04B               	goto	l887
  8377                           
  8378                           ;tela_ESTACIONARIA.h: 20: writeEEPROM_ext(7, tempo_limite_estacionaria);
  8379  002E76  C0E6  F08C         	movff	_tempo_limite_estacionaria,writeEEPROM_ext@data
  8380  002E7A  0E07               	movlw	7
  8381  002E7C  ECF9  F038         	call	_writeEEPROM_ext
  8382                           
  8383                           ;tela_ESTACIONARIA.h: 21: writeEEPROM_ext(13, tempo_limite_teste_estacionaria);
  8384  002E80  C067  F08C         	movff	_tempo_limite_teste_estacionaria,writeEEPROM_ext@data
  8385  002E84  0E0D               	movlw	13
  8386  002E86  ECF9  F038         	call	_writeEEPROM_ext
  8387                           
  8388                           ;tela_ESTACIONARIA.h: 22: option_posi = 0;
  8389  002E8A  0E00               	movlw	0
  8390  002E8C  0100               	movlb	0	; () banked
  8391  002E8E  6FE1               	movwf	_option_posi& (0+255),b
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;tela_ESTACIONARIA.h: 23: menu_posi = _menu_posi;
  8395  002E90  C0DF  F0E0         	movff	__menu_posi,_menu_posi
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;tela_ESTACIONARIA.h: 24: }
  8399                           ;tela_ESTACIONARIA.h: 25: switch (option_posi) {
  8400  002E94  D03B               	goto	l887
  8401  002E96  FFFF               	dw	65535	; assembler added errata NOP
  8402                           
  8403                           ; BSR set to: 0
  8404                           ;tela_ESTACIONARIA.h: 27: blink(line2, 16,20 );
  8405                           
  8406                           ; BSR set to: 0
  8407  002E98  0E6B               	movlw	low _line2
  8408  002E9A  6F80               	movwf	blink@line& (0+255),b
  8409  002E9C  0E01               	movlw	high _line2
  8410  002E9E  6F81               	movwf	(blink@line+1)& (0+255),b
  8411  002EA0  0E10               	movlw	16
  8412  002EA2  6F82               	movwf	blink@start& (0+255),b
  8413  002EA4  0E14               	movlw	20
  8414  002EA6  6F83               	movwf	blink@end& (0+255),b
  8415  002EA8  EC35  F038         	call	_blink	;wreg free
  8416                           
  8417                           ;tela_ESTACIONARIA.h: 28: if (btPress(3)) {
  8418  002EAC  0E03               	movlw	3
  8419  002EAE  EC55  F03A         	call	_btPress
  8420  002EB2  0900               	iorlw	0
  8421  002EB4  B4D8               	btfsc	status,2,c
  8422  002EB6  D002               	goto	l889
  8423                           
  8424                           ;tela_ESTACIONARIA.h: 29: tempo_limite_estacionaria++;
  8425  002EB8  0100               	movlb	0	; () banked
  8426  002EBA  2BE6               	incf	_tempo_limite_estacionaria& (0+255),f,b
  8427  002EBC                     l889:
  8428  002EBC  FFFF               	dw	65535	; assembler added errata NOP
  8429                           
  8430                           ;tela_ESTACIONARIA.h: 30: }
  8431                           ;tela_ESTACIONARIA.h: 31: if (btPress(2)) {
  8432                           
  8433                           ; BSR set to: 0
  8434  002EBE  0E02               	movlw	2
  8435  002EC0  EC55  F03A         	call	_btPress
  8436  002EC4  0900               	iorlw	0
  8437  002EC6  B4D8               	btfsc	status,2,c
  8438  002EC8  D02B               	goto	l891
  8439                           
  8440                           ;tela_ESTACIONARIA.h: 32: tempo_limite_estacionaria--;
  8441  002ECA  0100               	movlb	0	; () banked
  8442  002ECC  07E6               	decf	_tempo_limite_estacionaria& (0+255),f,b
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;tela_ESTACIONARIA.h: 33: }
  8446                           ;tela_ESTACIONARIA.h: 34: break;
  8447  002ECE  D028               	goto	l891
  8448  002ED0  FFFF               	dw	65535	; assembler added errata NOP
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;tela_ESTACIONARIA.h: 36: blink(line3, 16,20 );
  8452                           
  8453                           ; BSR set to: 0
  8454  002ED2  0E56               	movlw	low _line3
  8455  002ED4  6F80               	movwf	blink@line& (0+255),b
  8456  002ED6  0E01               	movlw	high _line3
  8457  002ED8  6F81               	movwf	(blink@line+1)& (0+255),b
  8458  002EDA  0E10               	movlw	16
  8459  002EDC  6F82               	movwf	blink@start& (0+255),b
  8460  002EDE  0E14               	movlw	20
  8461  002EE0  6F83               	movwf	blink@end& (0+255),b
  8462  002EE2  EC35  F038         	call	_blink	;wreg free
  8463                           
  8464                           ;tela_ESTACIONARIA.h: 37: if (btPress(3)) {
  8465  002EE6  0E03               	movlw	3
  8466  002EE8  EC55  F03A         	call	_btPress
  8467  002EEC  0900               	iorlw	0
  8468  002EEE  A4D8               	btfss	status,2,c
  8469                           
  8470                           ;tela_ESTACIONARIA.h: 38: tempo_limite_teste_estacionaria++;
  8471  002EF0  2A67               	incf	_tempo_limite_teste_estacionaria,f,c
  8472                           
  8473                           ;tela_ESTACIONARIA.h: 39: }
  8474                           ;tela_ESTACIONARIA.h: 40: if (btPress(2)) {
  8475  002EF2  0E02               	movlw	2
  8476  002EF4  EC55  F03A         	call	_btPress
  8477  002EF8  0900               	iorlw	0
  8478  002EFA  B4D8               	btfsc	status,2,c
  8479  002EFC  D011               	goto	l891
  8480                           
  8481                           ;tela_ESTACIONARIA.h: 41: tempo_limite_teste_estacionaria--;
  8482  002EFE  0667               	decf	_tempo_limite_teste_estacionaria,f,c
  8483                           
  8484                           ;tela_ESTACIONARIA.h: 42: }
  8485                           ;tela_ESTACIONARIA.h: 43: break;
  8486  002F00  D00F               	goto	l891
  8487  002F02  FFFF               	dw	65535	; assembler added errata NOP
  8488  002F04  0E00               	movlw	0
  8489  002F06  0100               	movlb	0	; () banked
  8490  002F08  6FE1               	movwf	_option_posi& (0+255),b
  8491                           
  8492                           ; BSR set to: 0
  8493                           ;tela_ESTACIONARIA.h: 46: }
  8494                           
  8495                           ;tela_ESTACIONARIA.h: 45: break;
  8496  002F0A  D00A               	goto	l891
  8497  002F0C                     l887:
  8498  002F0C  FFFF               	dw	65535	; assembler added errata NOP
  8499                           
  8500                           ; BSR set to: 0
  8501  002F0E  0100               	movlb	0	; () banked
  8502  002F10  51E1               	movf	_option_posi& (0+255),w,b
  8503                           
  8504                           ; Switch size 1, requested type "space"
  8505                           ; Number of cases is 2, Range of values is 0 to 1
  8506                           ; switch strategies available:
  8507                           ; Name         Instructions Cycles
  8508                           ; simple_byte            7     4 (average)
  8509                           ;	Chosen strategy is simple_byte
  8510  002F12  0A00               	xorlw	0	; case 0
  8511  002F14  B4D8               	btfsc	status,2,c
  8512  002F16  D7BF               	goto	l888
  8513  002F18  0A01               	xorlw	1	; case 1
  8514  002F1A  B4D8               	btfsc	status,2,c
  8515  002F1C  D7D9               	goto	l892
  8516  002F1E  D7F1               	goto	l895
  8517  002F20                     l891:
  8518  002F20  FFFF               	dw	65535	; assembler added errata NOP
  8519                           
  8520                           ; BSR set to: 0
  8521  002F22  0012               	return		;funcret
  8522  002F24  FFFF               	dw	65535	; errata NOP
  8523  002F26                     __end_of_configurarEstacionaria:
  8524                           	opt stack 0
  8525                           tblptru	equ	0xFF8
  8526                           tblptrh	equ	0xFF7
  8527                           tblptrl	equ	0xFF6
  8528                           tablat	equ	0xFF5
  8529                           prodh	equ	0xFF4
  8530                           prodl	equ	0xFF3
  8531                           postinc0	equ	0xFEE
  8532                           wreg	equ	0xFE8
  8533                           postdec1	equ	0xFE5
  8534                           fsr1l	equ	0xFE1
  8535                           indf2	equ	0xFDF
  8536                           postinc2	equ	0xFDE
  8537                           fsr2h	equ	0xFDA
  8538                           fsr2l	equ	0xFD9
  8539                           status	equ	0xFD8
  8540                           
  8541 ;; *************** function _configuraTelefones *****************
  8542 ;; Defined at:
  8543 ;;		line 9 in file "tela_TELEFONES.h"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;		None
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;  i               1   67[BANK0 ] unsigned char 
  8548 ;; Return value:  Size  Location     Type
  8549 ;;                  1    wreg      void 
  8550 ;; Registers used:
  8551 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8557 ;;      Params:         0       0       0       0       0       0       0
  8558 ;;      Locals:         0       3       0       0       0       0       0
  8559 ;;      Temps:          0       2       0       0       0       0       0
  8560 ;;      Totals:         0       5       0       0       0       0       0
  8561 ;;Total ram usage:        5 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; Hardware stack levels required when called:   10
  8564 ;; This function calls:
  8565 ;;		_blink
  8566 ;;		_btPress
  8567 ;;		_comunicarTeste
  8568 ;;		_sprintf
  8569 ;;		_writeEEPROM_ext
  8570 ;; This function is called by:
  8571 ;;		_main
  8572 ;; This function uses a non-reentrant model
  8573 ;;
  8574                           
  8575                           	psect	text21
  8576  00129A                     __ptext21:
  8577                           	opt stack 0
  8578  00129A                     _configuraTelefones:
  8579                           	opt stack 0
  8580  00129A  FFFF               	dw	65535	; assembler added errata NOP
  8581                           
  8582                           ;tela_TELEFONES.h: 10: sprintf(&line1[1], "T1: %s", tel1);
  8583                           
  8584                           ;incstack = 0
  8585  00129C  0E81               	movlw	low (_line1+1)
  8586  00129E  0100               	movlb	0	; () banked
  8587  0012A0  6FA1               	movwf	sprintf@wh& (0+255),b
  8588  0012A2  0E01               	movlw	high (_line1+1)
  8589  0012A4  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8590  0012A6  0EB8               	movlw	low STR_95
  8591  0012A8  6FA3               	movwf	sprintf@f& (0+255),b
  8592  0012AA  0E7F               	movlw	high STR_95
  8593  0012AC  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8594  0012AE  0EB5               	movlw	low _tel1
  8595  0012B0  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8596  0012B2  0E01               	movlw	high _tel1
  8597  0012B4  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8598  0012B6  ECDC  F01F         	call	_sprintf	;wreg free
  8599                           
  8600                           ;tela_TELEFONES.h: 11: sprintf(&line2[1], "T2: %s", tel2);
  8601  0012BA  0E6C               	movlw	low (_line2+1)
  8602  0012BC  0100               	movlb	0	; () banked
  8603  0012BE  6FA1               	movwf	sprintf@wh& (0+255),b
  8604  0012C0  0E01               	movlw	high (_line2+1)
  8605  0012C2  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8606  0012C4  0EBF               	movlw	low STR_96
  8607  0012C6  6FA3               	movwf	sprintf@f& (0+255),b
  8608  0012C8  0E7F               	movlw	high STR_96
  8609  0012CA  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8610  0012CC  0EA9               	movlw	low _tel2
  8611  0012CE  6FA5               	movwf	(?_sprintf+4)& (0+255),b
  8612  0012D0  0E01               	movlw	high _tel2
  8613  0012D2  6FA6               	movwf	(?_sprintf+5)& (0+255),b
  8614  0012D4  ECDC  F01F         	call	_sprintf	;wreg free
  8615                           
  8616                           ;tela_TELEFONES.h: 12: sprintf(&line3[1], "%s", gsmOcupado ? " aguarde... " : "Enviar sm
      +                          s teste");
  8617  0012D8  0100               	movlb	0	; () banked
  8618  0012DA  51F4               	movf	_gsmOcupado& (0+255),w,b
  8619  0012DC  A4D8               	btfss	status,2,c
  8620  0012DE  D004               	goto	l843
  8621                           
  8622                           ; BSR set to: 0
  8623  0012E0  0ED0               	movlw	low STR_99
  8624  0012E2  6FC1               	movwf	_configuraTelefones$1476& (0+255),b
  8625  0012E4  0E7D               	movlw	high STR_99
  8626  0012E6  D004               	goto	L18
  8627  0012E8                     l843:
  8628  0012E8  FFFF               	dw	65535	; assembler added errata NOP
  8629                           
  8630                           ; BSR set to: 0
  8631                           
  8632                           ; BSR set to: 0
  8633  0012EA  0EB2               	movlw	low STR_98
  8634  0012EC  6FC1               	movwf	_configuraTelefones$1476& (0+255),b
  8635  0012EE  0E7E               	movlw	high STR_98
  8636  0012F0                     L18:
  8637  0012F0  FFFF               	dw	65535	; assembler added errata NOP
  8638  0012F2  6FC2               	movwf	(_configuraTelefones$1476+1)& (0+255),b
  8639                           
  8640                           ; BSR set to: 0
  8641                           
  8642                           ; BSR set to: 0
  8643  0012F4  0E57               	movlw	low (_line3+1)
  8644  0012F6  6FA1               	movwf	sprintf@wh& (0+255),b
  8645  0012F8  0E01               	movlw	high (_line3+1)
  8646  0012FA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  8647  0012FC  0E1D               	movlw	low (STR_93+9)
  8648  0012FE  6FA3               	movwf	sprintf@f& (0+255),b
  8649  001300  0E7F               	movlw	high (STR_93+9)
  8650  001302  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  8651  001304  C0C1  F0A5         	movff	_configuraTelefones$1476,?_sprintf+4
  8652  001308  C0C2  F0A6         	movff	_configuraTelefones$1476+1,?_sprintf+5
  8653  00130C  ECDC  F01F         	call	_sprintf	;wreg free
  8654                           
  8655                           ;tela_TELEFONES.h: 14: if (ajust_tel == 0) {
  8656  001310  0100               	movlb	0	; () banked
  8657  001312  51DD               	movf	_ajust_tel& (0+255),w,b
  8658  001314  A4D8               	btfss	status,2,c
  8659  001316  D050               	goto	l851
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;tela_TELEFONES.h: 15: if (btPress(3)) {
  8663  001318  0E03               	movlw	3
  8664  00131A  EC55  F03A         	call	_btPress
  8665  00131E  0900               	iorlw	0
  8666  001320  B4D8               	btfsc	status,2,c
  8667  001322  D003               	goto	l847
  8668                           
  8669                           ;tela_TELEFONES.h: 16: option_posi--;
  8670  001324  0100               	movlb	0	; () banked
  8671  001326  07E1               	decf	_option_posi& (0+255),f,b
  8672                           
  8673                           ;tela_TELEFONES.h: 17: } else if (btPress(2)) {
  8674  001328  D047               	goto	l851
  8675  00132A                     l847:
  8676  00132A  FFFF               	dw	65535	; assembler added errata NOP
  8677                           
  8678                           ; BSR set to: 0
  8679  00132C  0E02               	movlw	2
  8680  00132E  EC55  F03A         	call	_btPress
  8681  001332  0900               	iorlw	0
  8682  001334  B4D8               	btfsc	status,2,c
  8683  001336  D003               	goto	l849
  8684                           
  8685                           ;tela_TELEFONES.h: 18: option_posi++;
  8686  001338  0100               	movlb	0	; () banked
  8687  00133A  2BE1               	incf	_option_posi& (0+255),f,b
  8688                           
  8689                           ;tela_TELEFONES.h: 19: } else if (btPress(1)) {
  8690  00133C  D03D               	goto	l851
  8691  00133E                     l849:
  8692  00133E  FFFF               	dw	65535	; assembler added errata NOP
  8693                           
  8694                           ; BSR set to: 0
  8695  001340  0E01               	movlw	1
  8696  001342  EC55  F03A         	call	_btPress
  8697  001346  0900               	iorlw	0
  8698  001348  B4D8               	btfsc	status,2,c
  8699  00134A  D036               	goto	l851
  8700                           
  8701                           ;tela_TELEFONES.h: 20: gsmOcupado = 0;
  8702  00134C  0E00               	movlw	0
  8703  00134E  0100               	movlb	0	; () banked
  8704  001350  6FF4               	movwf	_gsmOcupado& (0+255),b
  8705                           
  8706                           ;tela_TELEFONES.h: 21: option_posi = 0;
  8707  001352  0E00               	movlw	0
  8708  001354  6FE1               	movwf	_option_posi& (0+255),b
  8709                           
  8710                           ;tela_TELEFONES.h: 22: tel_posi = 0;
  8711  001356  0E00               	movlw	0
  8712  001358  6FDE               	movwf	_tel_posi& (0+255),b
  8713                           
  8714                           ;tela_TELEFONES.h: 23: ajust_tel = 0;
  8715  00135A  0E00               	movlw	0
  8716  00135C  6FDD               	movwf	_ajust_tel& (0+255),b
  8717                           
  8718                           ;tela_TELEFONES.h: 24: char i = 0;
  8719  00135E  0E00               	movlw	0
  8720  001360  6FC3               	movwf	configuraTelefones@i& (0+255),b
  8721                           
  8722                           ;tela_TELEFONES.h: 25: for (i = 0; i < 11; i++) {
  8723  001362  0E00               	movlw	0
  8724  001364  6FC3               	movwf	configuraTelefones@i& (0+255),b
  8725  001366                     l7515:
  8726  001366  FFFF               	dw	65535	; assembler added errata NOP
  8727                           
  8728                           ; BSR set to: 0
  8729  001368  0E0A               	movlw	10
  8730  00136A  65C3               	cpfsgt	configuraTelefones@i& (0+255),b
  8731  00136C  D001               	goto	l852
  8732  00136E  D021               	goto	u8650
  8733  001370                     l852:
  8734  001370  FFFF               	dw	65535	; assembler added errata NOP
  8735                           
  8736                           ; BSR set to: 0
  8737                           ;tela_TELEFONES.h: 26: writeEEPROM_ext((20 + i), tel1[i]);
  8738                           
  8739                           ; BSR set to: 0
  8740  001372  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8741  001374  0D01               	mullw	1
  8742  001376  0EB5               	movlw	low _tel1
  8743  001378  24F3               	addwf	prodl,w,c
  8744  00137A  6ED9               	movwf	fsr2l,c
  8745  00137C  0E01               	movlw	high _tel1
  8746  00137E  20F4               	addwfc	prodh,w,c
  8747  001380  6EDA               	movwf	fsr2h,c
  8748  001382  50DF               	movf	indf2,w,c
  8749  001384  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8750  001386  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8751  001388  0F14               	addlw	20
  8752  00138A  ECF9  F038         	call	_writeEEPROM_ext
  8753                           
  8754                           ;tela_TELEFONES.h: 27: writeEEPROM_ext((40 + i), tel2[i]);
  8755  00138E  0100               	movlb	0	; () banked
  8756  001390  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8757  001392  0D01               	mullw	1
  8758  001394  0EA9               	movlw	low _tel2
  8759  001396  24F3               	addwf	prodl,w,c
  8760  001398  6ED9               	movwf	fsr2l,c
  8761  00139A  0E01               	movlw	high _tel2
  8762  00139C  20F4               	addwfc	prodh,w,c
  8763  00139E  6EDA               	movwf	fsr2h,c
  8764  0013A0  50DF               	movf	indf2,w,c
  8765  0013A2  6F8C               	movwf	writeEEPROM_ext@data& (0+255),b
  8766  0013A4  51C3               	movf	configuraTelefones@i& (0+255),w,b
  8767  0013A6  0F28               	addlw	40
  8768  0013A8  ECF9  F038         	call	_writeEEPROM_ext
  8769  0013AC  0100               	movlb	0	; () banked
  8770  0013AE  2BC3               	incf	configuraTelefones@i& (0+255),f,b
  8771  0013B0  D7DA               	goto	l7515
  8772  0013B2                     u8650:
  8773  0013B2  FFFF               	dw	65535	; assembler added errata NOP
  8774                           
  8775                           ; BSR set to: 0
  8776                           ;tela_TELEFONES.h: 28: }
  8777                           ;tela_TELEFONES.h: 29: menu_posi = _menu_posi;
  8778  0013B4  C0DF  F0E0         	movff	__menu_posi,_menu_posi
  8779  0013B8                     l851:
  8780  0013B8  FFFF               	dw	65535	; assembler added errata NOP
  8781                           
  8782                           ;tela_TELEFONES.h: 30: }
  8783                           ;tela_TELEFONES.h: 31: }
  8784                           ;tela_TELEFONES.h: 32: if (ajust_tel == 1) {
  8785                           
  8786                           ; BSR set to: 0
  8787                           
  8788                           ; BSR set to: 0
  8789                           
  8790                           ; BSR set to: 0
  8791                           
  8792                           ; BSR set to: 0
  8793  0013BA  0100               	movlb	0	; () banked
  8794  0013BC  05DD               	decf	_ajust_tel& (0+255),w,b
  8795  0013BE  A4D8               	btfss	status,2,c
  8796  0013C0  D11A               	goto	l858
  8797                           
  8798                           ; BSR set to: 0
  8799                           ;tela_TELEFONES.h: 33: if (btPress(4)) {
  8800  0013C2  0E04               	movlw	4
  8801  0013C4  EC55  F03A         	call	_btPress
  8802  0013C8  0900               	iorlw	0
  8803  0013CA  B4D8               	btfsc	status,2,c
  8804  0013CC  D003               	goto	l855
  8805                           
  8806                           ;tela_TELEFONES.h: 34: tel_posi++;
  8807  0013CE  0100               	movlb	0	; () banked
  8808  0013D0  2BDE               	incf	_tel_posi& (0+255),f,b
  8809                           
  8810                           ;tela_TELEFONES.h: 35: } else if (btPress(1)) {
  8811  0013D2  D111               	goto	l858
  8812  0013D4                     l855:
  8813  0013D4  FFFF               	dw	65535	; assembler added errata NOP
  8814                           
  8815                           ; BSR set to: 0
  8816  0013D6  0E01               	movlw	1
  8817  0013D8  EC55  F03A         	call	_btPress
  8818  0013DC  0900               	iorlw	0
  8819  0013DE  B4D8               	btfsc	status,2,c
  8820  0013E0  D10A               	goto	l858
  8821                           
  8822                           ;tela_TELEFONES.h: 36: tel_posi = 0;
  8823  0013E2  0E00               	movlw	0
  8824  0013E4  0100               	movlb	0	; () banked
  8825  0013E6  6FDE               	movwf	_tel_posi& (0+255),b
  8826                           
  8827                           ;tela_TELEFONES.h: 37: ajust_tel = 0;
  8828  0013E8  0E00               	movlw	0
  8829  0013EA  6FDD               	movwf	_ajust_tel& (0+255),b
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;tela_TELEFONES.h: 38: }
  8833                           ;tela_TELEFONES.h: 39: }
  8834                           ;tela_TELEFONES.h: 41: switch (option_posi) {
  8835                           
  8836                           ; BSR set to: 0
  8837                           
  8838                           ; BSR set to: 0
  8839  0013EC  D104               	goto	l858
  8840  0013EE  FFFF               	dw	65535	; assembler added errata NOP
  8841                           
  8842                           ; BSR set to: 0
  8843                           ;tela_TELEFONES.h: 43: line1[0] = '>';
  8844                           
  8845                           ; BSR set to: 0
  8846  0013F0  0E3E               	movlw	62
  8847  0013F2  0101               	movlb	1	; () banked
  8848  0013F4  6F80               	movwf	_line1& (0+255),b
  8849                           
  8850                           ; BSR set to: 1
  8851                           ;tela_TELEFONES.h: 44: if (btPress(4)) {
  8852  0013F6  0E04               	movlw	4
  8853  0013F8  EC55  F03A         	call	_btPress
  8854  0013FC  0900               	iorlw	0
  8855  0013FE  B4D8               	btfsc	status,2,c
  8856  001400  D003               	goto	l860
  8857                           
  8858                           ;tela_TELEFONES.h: 45: ajust_tel = 1;
  8859  001402  0E01               	movlw	1
  8860  001404  0100               	movlb	0	; () banked
  8861  001406  6FDD               	movwf	_ajust_tel& (0+255),b
  8862  001408                     l860:
  8863  001408  FFFF               	dw	65535	; assembler added errata NOP
  8864                           
  8865                           ;tela_TELEFONES.h: 46: }
  8866                           ;tela_TELEFONES.h: 47: if (ajust_tel) {
  8867  00140A  0100               	movlb	0	; () banked
  8868  00140C  51DD               	movf	_ajust_tel& (0+255),w,b
  8869  00140E  B4D8               	btfsc	status,2,c
  8870  001410  D0FF               	goto	l868
  8871                           
  8872                           ; BSR set to: 0
  8873                           ;tela_TELEFONES.h: 48: blink(line1, (tel_posi + 6), (tel_posi + 6));
  8874  001412  0E80               	movlw	low _line1
  8875  001414  6F80               	movwf	blink@line& (0+255),b
  8876  001416  0E01               	movlw	high _line1
  8877  001418  6F81               	movwf	(blink@line+1)& (0+255),b
  8878  00141A  51DE               	movf	_tel_posi& (0+255),w,b
  8879  00141C  0F06               	addlw	6
  8880  00141E  6F82               	movwf	blink@start& (0+255),b
  8881  001420  51DE               	movf	_tel_posi& (0+255),w,b
  8882  001422  0F06               	addlw	6
  8883  001424  6F83               	movwf	blink@end& (0+255),b
  8884  001426  EC35  F038         	call	_blink	;wreg free
  8885                           
  8886                           ;tela_TELEFONES.h: 49: if ((tel_posi + 2) > sizeof (tel1)) {
  8887  00142A  0100               	movlb	0	; () banked
  8888  00142C  51DE               	movf	_tel_posi& (0+255),w,b
  8889  00142E  6FBF               	movwf	??_configuraTelefones& (0+255),b
  8890  001430  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
  8891  001432  0E02               	movlw	2
  8892  001434  27BF               	addwf	??_configuraTelefones& (0+255),f,b
  8893  001436  0E00               	movlw	0
  8894  001438  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  8895  00143A  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
  8896  00143C  E104               	bnz	u8710
  8897  00143E  0E0D               	movlw	13
  8898  001440  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
  8899  001442  A0D8               	btfss	status,0,c
  8900  001444  D004               	goto	l862
  8901  001446                     u8710:
  8902                           
  8903                           ; BSR set to: 0
  8904                           ;tela_TELEFONES.h: 50: tel_posi = 0;
  8905  001446  0E00               	movlw	0
  8906  001448  6FDE               	movwf	_tel_posi& (0+255),b
  8907                           
  8908                           ;tela_TELEFONES.h: 51: ajust_tel = 0;
  8909  00144A  0E00               	movlw	0
  8910  00144C  6FDD               	movwf	_ajust_tel& (0+255),b
  8911  00144E                     l862:
  8912  00144E  FFFF               	dw	65535	; assembler added errata NOP
  8913                           
  8914                           ; BSR set to: 0
  8915                           ;tela_TELEFONES.h: 52: }
  8916                           ;tela_TELEFONES.h: 53: if (btPress(3)) {
  8917                           
  8918                           ; BSR set to: 0
  8919  001450  0E03               	movlw	3
  8920  001452  EC55  F03A         	call	_btPress
  8921  001456  0900               	iorlw	0
  8922  001458  B4D8               	btfsc	status,2,c
  8923  00145A  D00A               	goto	l863
  8924                           
  8925                           ;tela_TELEFONES.h: 54: tel1[tel_posi]++;
  8926  00145C  0100               	movlb	0	; () banked
  8927  00145E  51DE               	movf	_tel_posi& (0+255),w,b
  8928  001460  0D01               	mullw	1
  8929  001462  0EB5               	movlw	low _tel1
  8930  001464  24F3               	addwf	prodl,w,c
  8931  001466  6ED9               	movwf	fsr2l,c
  8932  001468  0E01               	movlw	high _tel1
  8933  00146A  20F4               	addwfc	prodh,w,c
  8934  00146C  6EDA               	movwf	fsr2h,c
  8935  00146E  2ADF               	incf	indf2,f,c
  8936  001470                     l863:
  8937  001470  FFFF               	dw	65535	; assembler added errata NOP
  8938                           
  8939                           ;tela_TELEFONES.h: 55: }
  8940                           ;tela_TELEFONES.h: 56: if (btPress(2)) {
  8941                           
  8942                           ; BSR set to: 0
  8943  001472  0E02               	movlw	2
  8944  001474  EC55  F03A         	call	_btPress
  8945  001478  0900               	iorlw	0
  8946  00147A  B4D8               	btfsc	status,2,c
  8947  00147C  D00A               	goto	l864
  8948                           
  8949                           ;tela_TELEFONES.h: 57: tel1[tel_posi]--;
  8950  00147E  0100               	movlb	0	; () banked
  8951  001480  51DE               	movf	_tel_posi& (0+255),w,b
  8952  001482  0D01               	mullw	1
  8953  001484  0EB5               	movlw	low _tel1
  8954  001486  24F3               	addwf	prodl,w,c
  8955  001488  6ED9               	movwf	fsr2l,c
  8956  00148A  0E01               	movlw	high _tel1
  8957  00148C  20F4               	addwfc	prodh,w,c
  8958  00148E  6EDA               	movwf	fsr2h,c
  8959  001490  06DF               	decf	indf2,f,c
  8960  001492                     l864:
  8961  001492  FFFF               	dw	65535	; assembler added errata NOP
  8962                           
  8963                           ;tela_TELEFONES.h: 58: }
  8964                           ;tela_TELEFONES.h: 59: if ((tel1[tel_posi] > 57) | (tel1[tel_posi] < 48)) {
  8965  001494  0100               	movlb	0	; () banked
  8966  001496  51DE               	movf	_tel_posi& (0+255),w,b
  8967  001498  0D01               	mullw	1
  8968  00149A  0EB5               	movlw	low _tel1
  8969  00149C  24F3               	addwf	prodl,w,c
  8970  00149E  6ED9               	movwf	fsr2l,c
  8971  0014A0  0E01               	movlw	high _tel1
  8972  0014A2  20F4               	addwfc	prodh,w,c
  8973  0014A4  6EDA               	movwf	fsr2h,c
  8974  0014A6  0E3A               	movlw	58
  8975  0014A8  60DF               	cpfslt	indf2,c
  8976  0014AA  D00B               	goto	u8750
  8977                           
  8978                           ; BSR set to: 0
  8979  0014AC  51DE               	movf	_tel_posi& (0+255),w,b
  8980  0014AE  0D01               	mullw	1
  8981  0014B0  0EB5               	movlw	low _tel1
  8982  0014B2  24F3               	addwf	prodl,w,c
  8983  0014B4  6ED9               	movwf	fsr2l,c
  8984  0014B6  0E01               	movlw	high _tel1
  8985  0014B8  20F4               	addwfc	prodh,w,c
  8986  0014BA  6EDA               	movwf	fsr2h,c
  8987  0014BC  0E30               	movlw	48
  8988  0014BE  60DF               	cpfslt	indf2,c
  8989  0014C0  D0A7               	goto	l868
  8990  0014C2                     u8750:
  8991  0014C2  FFFF               	dw	65535	; assembler added errata NOP
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;tela_TELEFONES.h: 60: tel1[tel_posi] = 48;
  8995                           
  8996                           ; BSR set to: 0
  8997  0014C4  51DE               	movf	_tel_posi& (0+255),w,b
  8998  0014C6  0D01               	mullw	1
  8999  0014C8  0EB5               	movlw	low _tel1
  9000  0014CA  24F3               	addwf	prodl,w,c
  9001  0014CC  6ED9               	movwf	fsr2l,c
  9002  0014CE  0E01               	movlw	high _tel1
  9003  0014D0  D071               	goto	L19
  9004  0014D2  FFFF               	dw	65535	; assembler added errata NOP
  9005                           
  9006                           ; BSR set to: 0
  9007                           ;tela_TELEFONES.h: 65: line2[0] = '>';
  9008                           
  9009                           ; BSR set to: 0
  9010  0014D4  0E3E               	movlw	62
  9011  0014D6  0101               	movlb	1	; () banked
  9012  0014D8  6F6B               	movwf	_line2& (0+255),b
  9013                           
  9014                           ; BSR set to: 1
  9015                           ;tela_TELEFONES.h: 66: if (btPress(4)) {
  9016  0014DA  0E04               	movlw	4
  9017  0014DC  EC55  F03A         	call	_btPress
  9018  0014E0  0900               	iorlw	0
  9019  0014E2  B4D8               	btfsc	status,2,c
  9020  0014E4  D003               	goto	l870
  9021                           
  9022                           ;tela_TELEFONES.h: 67: ajust_tel = 1;
  9023  0014E6  0E01               	movlw	1
  9024  0014E8  0100               	movlb	0	; () banked
  9025  0014EA  6FDD               	movwf	_ajust_tel& (0+255),b
  9026  0014EC                     l870:
  9027  0014EC  FFFF               	dw	65535	; assembler added errata NOP
  9028                           
  9029                           ;tela_TELEFONES.h: 68: }
  9030                           ;tela_TELEFONES.h: 69: if (ajust_tel) {
  9031  0014EE  0100               	movlb	0	; () banked
  9032  0014F0  51DD               	movf	_ajust_tel& (0+255),w,b
  9033  0014F2  B4D8               	btfsc	status,2,c
  9034  0014F4  D08D               	goto	l868
  9035                           
  9036                           ; BSR set to: 0
  9037                           ;tela_TELEFONES.h: 70: blink(line2, (tel_posi + 6), (tel_posi + 6));
  9038  0014F6  0E6B               	movlw	low _line2
  9039  0014F8  6F80               	movwf	blink@line& (0+255),b
  9040  0014FA  0E01               	movlw	high _line2
  9041  0014FC  6F81               	movwf	(blink@line+1)& (0+255),b
  9042  0014FE  51DE               	movf	_tel_posi& (0+255),w,b
  9043  001500  0F06               	addlw	6
  9044  001502  6F82               	movwf	blink@start& (0+255),b
  9045  001504  51DE               	movf	_tel_posi& (0+255),w,b
  9046  001506  0F06               	addlw	6
  9047  001508  6F83               	movwf	blink@end& (0+255),b
  9048  00150A  EC35  F038         	call	_blink	;wreg free
  9049                           
  9050                           ;tela_TELEFONES.h: 71: if ((tel_posi + 2) > sizeof (tel2)) {
  9051  00150E  0100               	movlb	0	; () banked
  9052  001510  51DE               	movf	_tel_posi& (0+255),w,b
  9053  001512  6FBF               	movwf	??_configuraTelefones& (0+255),b
  9054  001514  6BC0               	clrf	(??_configuraTelefones+1)& (0+255),b
  9055  001516  0E02               	movlw	2
  9056  001518  27BF               	addwf	??_configuraTelefones& (0+255),f,b
  9057  00151A  0E00               	movlw	0
  9058  00151C  23C0               	addwfc	(??_configuraTelefones+1)& (0+255),f,b
  9059  00151E  51C0               	movf	(??_configuraTelefones+1)& (0+255),w,b
  9060  001520  E104               	bnz	u8780
  9061  001522  0E0D               	movlw	13
  9062  001524  5DBF               	subwf	??_configuraTelefones& (0+255),w,b
  9063  001526  A0D8               	btfss	status,0,c
  9064  001528  D004               	goto	l872
  9065  00152A                     u8780:
  9066                           
  9067                           ; BSR set to: 0
  9068                           ;tela_TELEFONES.h: 72: tel_posi = 0;
  9069  00152A  0E00               	movlw	0
  9070  00152C  6FDE               	movwf	_tel_posi& (0+255),b
  9071                           
  9072                           ;tela_TELEFONES.h: 73: ajust_tel = 0;
  9073  00152E  0E00               	movlw	0
  9074  001530  6FDD               	movwf	_ajust_tel& (0+255),b
  9075  001532                     l872:
  9076  001532  FFFF               	dw	65535	; assembler added errata NOP
  9077                           
  9078                           ; BSR set to: 0
  9079                           ;tela_TELEFONES.h: 74: }
  9080                           ;tela_TELEFONES.h: 75: if (btPress(3)) {
  9081                           
  9082                           ; BSR set to: 0
  9083  001534  0E03               	movlw	3
  9084  001536  EC55  F03A         	call	_btPress
  9085  00153A  0900               	iorlw	0
  9086  00153C  B4D8               	btfsc	status,2,c
  9087  00153E  D00A               	goto	l873
  9088                           
  9089                           ;tela_TELEFONES.h: 76: tel2[tel_posi]++;
  9090  001540  0100               	movlb	0	; () banked
  9091  001542  51DE               	movf	_tel_posi& (0+255),w,b
  9092  001544  0D01               	mullw	1
  9093  001546  0EA9               	movlw	low _tel2
  9094  001548  24F3               	addwf	prodl,w,c
  9095  00154A  6ED9               	movwf	fsr2l,c
  9096  00154C  0E01               	movlw	high _tel2
  9097  00154E  20F4               	addwfc	prodh,w,c
  9098  001550  6EDA               	movwf	fsr2h,c
  9099  001552  2ADF               	incf	indf2,f,c
  9100  001554                     l873:
  9101  001554  FFFF               	dw	65535	; assembler added errata NOP
  9102                           
  9103                           ;tela_TELEFONES.h: 77: }
  9104                           ;tela_TELEFONES.h: 78: if (btPress(2)) {
  9105                           
  9106                           ; BSR set to: 0
  9107  001556  0E02               	movlw	2
  9108  001558  EC55  F03A         	call	_btPress
  9109  00155C  0900               	iorlw	0
  9110  00155E  B4D8               	btfsc	status,2,c
  9111  001560  D00A               	goto	l874
  9112                           
  9113                           ;tela_TELEFONES.h: 79: tel2[tel_posi]--;
  9114  001562  0100               	movlb	0	; () banked
  9115  001564  51DE               	movf	_tel_posi& (0+255),w,b
  9116  001566  0D01               	mullw	1
  9117  001568  0EA9               	movlw	low _tel2
  9118  00156A  24F3               	addwf	prodl,w,c
  9119  00156C  6ED9               	movwf	fsr2l,c
  9120  00156E  0E01               	movlw	high _tel2
  9121  001570  20F4               	addwfc	prodh,w,c
  9122  001572  6EDA               	movwf	fsr2h,c
  9123  001574  06DF               	decf	indf2,f,c
  9124  001576                     l874:
  9125  001576  FFFF               	dw	65535	; assembler added errata NOP
  9126                           
  9127                           ;tela_TELEFONES.h: 80: }
  9128                           ;tela_TELEFONES.h: 81: if ((tel2[tel_posi] > 57) | (tel2[tel_posi] < 48)) {
  9129  001578  0100               	movlb	0	; () banked
  9130  00157A  51DE               	movf	_tel_posi& (0+255),w,b
  9131  00157C  0D01               	mullw	1
  9132  00157E  0EA9               	movlw	low _tel2
  9133  001580  24F3               	addwf	prodl,w,c
  9134  001582  6ED9               	movwf	fsr2l,c
  9135  001584  0E01               	movlw	high _tel2
  9136  001586  20F4               	addwfc	prodh,w,c
  9137  001588  6EDA               	movwf	fsr2h,c
  9138  00158A  0E3A               	movlw	58
  9139  00158C  60DF               	cpfslt	indf2,c
  9140  00158E  D00B               	goto	u8820
  9141                           
  9142                           ; BSR set to: 0
  9143  001590  51DE               	movf	_tel_posi& (0+255),w,b
  9144  001592  0D01               	mullw	1
  9145  001594  0EA9               	movlw	low _tel2
  9146  001596  24F3               	addwf	prodl,w,c
  9147  001598  6ED9               	movwf	fsr2l,c
  9148  00159A  0E01               	movlw	high _tel2
  9149  00159C  20F4               	addwfc	prodh,w,c
  9150  00159E  6EDA               	movwf	fsr2h,c
  9151  0015A0  0E30               	movlw	48
  9152  0015A2  60DF               	cpfslt	indf2,c
  9153  0015A4  D035               	goto	l868
  9154  0015A6                     u8820:
  9155  0015A6  FFFF               	dw	65535	; assembler added errata NOP
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;tela_TELEFONES.h: 82: tel2[tel_posi] = 48;
  9159                           
  9160                           ; BSR set to: 0
  9161  0015A8  51DE               	movf	_tel_posi& (0+255),w,b
  9162  0015AA  0D01               	mullw	1
  9163  0015AC  0EA9               	movlw	low _tel2
  9164  0015AE  24F3               	addwf	prodl,w,c
  9165  0015B0  6ED9               	movwf	fsr2l,c
  9166  0015B2  0E01               	movlw	high _tel2
  9167  0015B4                     L19:
  9168  0015B4  FFFF               	dw	65535	; assembler added errata NOP
  9169  0015B6  20F4               	addwfc	prodh,w,c
  9170  0015B8  6EDA               	movwf	fsr2h,c
  9171  0015BA  0E30               	movlw	48
  9172  0015BC  6EDF               	movwf	indf2,c
  9173                           
  9174                           ; BSR set to: 0
  9175                           ;tela_TELEFONES.h: 83: }
  9176                           ;tela_TELEFONES.h: 84: }
  9177                           ;tela_TELEFONES.h: 85: break;
  9178                           
  9179                           ; BSR set to: 0
  9180  0015BE  D028               	goto	l868
  9181  0015C0  FFFF               	dw	65535	; assembler added errata NOP
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;tela_TELEFONES.h: 87: line3[0] = '>';
  9185                           
  9186                           ; BSR set to: 0
  9187  0015C2  0E3E               	movlw	62
  9188  0015C4  0101               	movlb	1	; () banked
  9189  0015C6  6F56               	movwf	_line3& (0+255),b
  9190                           
  9191                           ; BSR set to: 1
  9192                           ;tela_TELEFONES.h: 88: if (btPress(4) && intensidadeSinal != 'x' && !gsmOcupado) {
  9193  0015C8  0E04               	movlw	4
  9194  0015CA  EC55  F03A         	call	_btPress
  9195  0015CE  0900               	iorlw	0
  9196  0015D0  B4D8               	btfsc	status,2,c
  9197  0015D2  D01E               	goto	l868
  9198  0015D4  0E78               	movlw	120
  9199  0015D6  187D               	xorwf	_intensidadeSinal,w,c
  9200  0015D8  B4D8               	btfsc	status,2,c
  9201  0015DA  D01A               	goto	l868
  9202  0015DC  0100               	movlb	0	; () banked
  9203  0015DE  51F4               	movf	_gsmOcupado& (0+255),w,b
  9204  0015E0  A4D8               	btfss	status,2,c
  9205  0015E2  D016               	goto	l868
  9206                           
  9207                           ; BSR set to: 0
  9208                           ;tela_TELEFONES.h: 89: gsmOcupado = 1;
  9209  0015E4  0E01               	movlw	1
  9210  0015E6  6FF4               	movwf	_gsmOcupado& (0+255),b
  9211                           
  9212                           ;tela_TELEFONES.h: 90: telefoneSelecionado = 0;
  9213  0015E8  0E00               	movlw	0
  9214  0015EA  6FF8               	movwf	_telefoneSelecionado& (0+255),b
  9215                           
  9216                           ; BSR set to: 0
  9217                           ;tela_TELEFONES.h: 91: }
  9218                           ;tela_TELEFONES.h: 92: break;
  9219  0015EC  D011               	goto	l868
  9220  0015EE  FFFF               	dw	65535	; assembler added errata NOP
  9221                           
  9222                           ; BSR set to: 0
  9223                           
  9224                           ; BSR set to: 0
  9225  0015F0  0E00               	movlw	0
  9226  0015F2  6FE1               	movwf	_option_posi& (0+255),b
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;tela_TELEFONES.h: 96: }
  9230                           
  9231                           ;tela_TELEFONES.h: 95: break;
  9232  0015F4  D00D               	goto	l868
  9233  0015F6                     l858:
  9234  0015F6  FFFF               	dw	65535	; assembler added errata NOP
  9235                           
  9236                           ; BSR set to: 0
  9237  0015F8  0100               	movlb	0	; () banked
  9238  0015FA  51E1               	movf	_option_posi& (0+255),w,b
  9239                           
  9240                           ; Switch size 1, requested type "space"
  9241                           ; Number of cases is 3, Range of values is 0 to 2
  9242                           ; switch strategies available:
  9243                           ; Name         Instructions Cycles
  9244                           ; simple_byte           10     6 (average)
  9245                           ;	Chosen strategy is simple_byte
  9246  0015FC  0A00               	xorlw	0	; case 0
  9247  0015FE  B4D8               	btfsc	status,2,c
  9248  001600  D6F6               	goto	l859
  9249  001602  0A01               	xorlw	1	; case 1
  9250  001604  B4D8               	btfsc	status,2,c
  9251  001606  D765               	goto	l869
  9252  001608  0A03               	xorlw	3	; case 2
  9253  00160A  B4D8               	btfsc	status,2,c
  9254  00160C  D7D9               	goto	l878
  9255  00160E  D7EF               	goto	l880
  9256  001610                     l868:
  9257  001610  FFFF               	dw	65535	; assembler added errata NOP
  9258                           
  9259                           ;tela_TELEFONES.h: 97: if (gsmOcupado) {
  9260                           
  9261                           ; BSR set to: 0
  9262  001612  0100               	movlb	0	; () banked
  9263  001614  51F4               	movf	_gsmOcupado& (0+255),w,b
  9264  001616  A4D8               	btfss	status,2,c
  9265                           
  9266                           ; BSR set to: 0
  9267                           ;tela_TELEFONES.h: 98: comunicarTeste();
  9268  001618  EC58  F012         	call	_comunicarTeste	;wreg free
  9269  00161C  0012               	return		;funcret
  9270  00161E  FFFF               	dw	65535	; errata NOP
  9271  001620                     __end_of_configuraTelefones:
  9272                           	opt stack 0
  9273                           tblptru	equ	0xFF8
  9274                           tblptrh	equ	0xFF7
  9275                           tblptrl	equ	0xFF6
  9276                           tablat	equ	0xFF5
  9277                           prodh	equ	0xFF4
  9278                           prodl	equ	0xFF3
  9279                           postinc0	equ	0xFEE
  9280                           wreg	equ	0xFE8
  9281                           postdec1	equ	0xFE5
  9282                           fsr1l	equ	0xFE1
  9283                           indf2	equ	0xFDF
  9284                           postinc2	equ	0xFDE
  9285                           fsr2h	equ	0xFDA
  9286                           fsr2l	equ	0xFD9
  9287                           status	equ	0xFD8
  9288                           
  9289 ;; *************** function _comunicarTeste *****************
  9290 ;; Defined at:
  9291 ;;		line 70 in file "comunicacao.h"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;		None
  9294 ;; Auto vars:     Size  Location     Type
  9295 ;;		None
  9296 ;; Return value:  Size  Location     Type
  9297 ;;                  1    wreg      void 
  9298 ;; Registers used:
  9299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9300 ;; Tracked objects:
  9301 ;;		On entry : 0/0
  9302 ;;		On exit  : 0/0
  9303 ;;		Unchanged: 0/0
  9304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9305 ;;      Params:         0       0       0       0       0       0       0
  9306 ;;      Locals:         0       2       0       0       0       0       0
  9307 ;;      Temps:          0       2       0       0       0       0       0
  9308 ;;      Totals:         0       4       0       0       0       0       0
  9309 ;;Total ram usage:        4 bytes
  9310 ;; Hardware stack levels used:    1
  9311 ;; Hardware stack levels required when called:    9
  9312 ;; This function calls:
  9313 ;;		_aguardaBuffer
  9314 ;;		_delay
  9315 ;;		_limparBuffer
  9316 ;;		_printf
  9317 ;;		_writeChar
  9318 ;; This function is called by:
  9319 ;;		_configuraTelefones
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           	psect	text22
  9324  0024B0                     __ptext22:
  9325                           	opt stack 0
  9326  0024B0                     _comunicarTeste:
  9327                           	opt stack 0
  9328  0024B0  FFFF               	dw	65535	; assembler added errata NOP
  9329                           
  9330                           ;comunicacao.h: 71: switch (etapaComunicacao) {
  9331                           
  9332                           ;incstack = 0
  9333  0024B2  D0D1               	goto	l329
  9334  0024B4  FFFF               	dw	65535	; assembler added errata NOP
  9335                           
  9336                           ;comunicacao.h: 73: limparBuffer();
  9337  0024B6  EC16  F037         	call	_limparBuffer	;wreg free
  9338                           
  9339                           ;comunicacao.h: 74: printf("AT\r\n");
  9340  0024BA  0EDE               	movlw	low STR_4
  9341  0024BC  0100               	movlb	0	; () banked
  9342  0024BE  6FA1               	movwf	printf@f& (0+255),b
  9343  0024C0  0E7F               	movlw	high STR_4
  9344  0024C2  6FA2               	movwf	(printf@f+1)& (0+255),b
  9345  0024C4  EC17  F038         	call	_printf	;wreg free
  9346                           
  9347                           ;comunicacao.h: 75: etapaComunicacao++;
  9348  0024C8  4A4C               	infsnz	_etapaComunicacao,f,c
  9349  0024CA  2A4D               	incf	_etapaComunicacao+1,f,c
  9350                           
  9351                           ;comunicacao.h: 76: timerEtapaComunicacao = 5;
  9352  0024CC  0E05               	movlw	5
  9353  0024CE  0100               	movlb	0	; () banked
  9354  0024D0  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
  9355                           
  9356                           ;comunicacao.h: 77: break;
  9357  0024D2  D0DC               	goto	l331
  9358  0024D4  FFFF               	dw	65535	; assembler added errata NOP
  9359                           
  9360                           ; BSR set to: 0
  9361                           ;comunicacao.h: 79: if (aguardaBuffer("OK")) {
  9362                           
  9363                           ; BSR set to: 0
  9364  0024D6  0EFA               	movlw	low STR_5
  9365  0024D8  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9366  0024DA  0E7F               	movlw	high STR_5
  9367  0024DC  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9368  0024DE  ECF9  F037         	call	_aguardaBuffer	;wreg free
  9369  0024E2  0900               	iorlw	0
  9370  0024E4  B4D8               	btfsc	status,2,c
  9371  0024E6  D00E               	goto	l333
  9372                           
  9373                           ;comunicacao.h: 80: limparBuffer();
  9374  0024E8  EC16  F037         	call	_limparBuffer	;wreg free
  9375                           
  9376                           ;comunicacao.h: 81: printf("AT+CMGF=1\r\n");
  9377  0024EC  0ECC               	movlw	low STR_10
  9378  0024EE  0100               	movlb	0	; () banked
  9379  0024F0  6FA1               	movwf	printf@f& (0+255),b
  9380  0024F2  0E7E               	movlw	high STR_10
  9381  0024F4  6FA2               	movwf	(printf@f+1)& (0+255),b
  9382  0024F6  EC17  F038         	call	_printf	;wreg free
  9383                           
  9384                           ;comunicacao.h: 82: etapaComunicacao++;
  9385  0024FA  4A4C               	infsnz	_etapaComunicacao,f,c
  9386  0024FC  2A4D               	incf	_etapaComunicacao+1,f,c
  9387                           
  9388                           ;comunicacao.h: 83: timerEtapaComunicacao = 5;
  9389  0024FE  0E05               	movlw	5
  9390  002500  0100               	movlb	0	; () banked
  9391  002502  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
  9392  002504                     l333:
  9393  002504  FFFF               	dw	65535	; assembler added errata NOP
  9394                           
  9395                           ;comunicacao.h: 84: }
  9396                           ;comunicacao.h: 85: if (!timerEtapaComunicacao) {
  9397                           
  9398                           ; BSR set to: 0
  9399  002506  0100               	movlb	0	; () banked
  9400  002508  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
  9401  00250A  A4D8               	btfss	status,2,c
  9402  00250C  D0BF               	goto	l331
  9403                           
  9404                           ; BSR set to: 0
  9405                           ;comunicacao.h: 86: etapaComunicacao = 0;
  9406  00250E  0E00               	movlw	0
  9407  002510  6E4D               	movwf	_etapaComunicacao+1,c
  9408  002512  0E00               	movlw	0
  9409  002514  6E4C               	movwf	_etapaComunicacao,c
  9410                           
  9411                           ; BSR set to: 0
  9412                           ;comunicacao.h: 87: writeChar(0x1A);
  9413  002516  0E1A               	movlw	26
  9414  002518  6F80               	movwf	writeChar@hex& (0+255),b
  9415  00251A  0E00               	movlw	0
  9416  00251C  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  9417  00251E  ECB8  F035         	call	_writeChar	;wreg free
  9418                           
  9419                           ;comunicacao.h: 88: }
  9420                           ;comunicacao.h: 89: break;
  9421  002522  D0B4               	goto	l331
  9422  002524  FFFF               	dw	65535	; assembler added errata NOP
  9423                           
  9424                           ;comunicacao.h: 91: if (aguardaBuffer("OK")) {
  9425  002526  0EFA               	movlw	low STR_5
  9426  002528  0100               	movlb	0	; () banked
  9427  00252A  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9428  00252C  0E7F               	movlw	high STR_5
  9429  00252E  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9430  002530  ECF9  F037         	call	_aguardaBuffer	;wreg free
  9431  002534  0900               	iorlw	0
  9432  002536  B4D8               	btfsc	status,2,c
  9433  002538  D083               	goto	L48
  9434                           
  9435                           ;comunicacao.h: 92: limparBuffer();
  9436  00253A  EC16  F037         	call	_limparBuffer	;wreg free
  9437                           
  9438                           ;comunicacao.h: 93: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : te
      +                          l2);
  9439  00253E  0100               	movlb	0	; () banked
  9440  002540  51F8               	movf	_telefoneSelecionado& (0+255),w,b
  9441  002542  B4D8               	btfsc	status,2,c
  9442  002544  D004               	goto	l338
  9443                           
  9444                           ; BSR set to: 0
  9445  002546  0EA9               	movlw	low _tel2
  9446  002548  6FBD               	movwf	_comunicarTeste$1196& (0+255),b
  9447  00254A  0E01               	movlw	high _tel2
  9448  00254C  D004               	goto	L20
  9449  00254E                     l338:
  9450  00254E  FFFF               	dw	65535	; assembler added errata NOP
  9451                           
  9452                           ; BSR set to: 0
  9453                           
  9454                           ; BSR set to: 0
  9455  002550  0EB5               	movlw	low _tel1
  9456  002552  6FBD               	movwf	_comunicarTeste$1196& (0+255),b
  9457  002554  0E01               	movlw	high _tel1
  9458  002556                     L20:
  9459  002556  FFFF               	dw	65535	; assembler added errata NOP
  9460  002558  6FBE               	movwf	(_comunicarTeste$1196+1)& (0+255),b
  9461                           
  9462                           ; BSR set to: 0
  9463                           
  9464                           ; BSR set to: 0
  9465  00255A  0E43               	movlw	low STR_12
  9466  00255C  6FA1               	movwf	printf@f& (0+255),b
  9467  00255E  0E7D               	movlw	high STR_12
  9468  002560  6FA2               	movwf	(printf@f+1)& (0+255),b
  9469  002562  C0BD  F0A3         	movff	_comunicarTeste$1196,?_printf+2
  9470  002566  C0BE  F0A4         	movff	_comunicarTeste$1196+1,?_printf+3
  9471  00256A  EC17  F038         	call	_printf	;wreg free
  9472                           
  9473                           ;comunicacao.h: 94: timerEtapaComunicacao = 5;
  9474  00256E  0E05               	movlw	5
  9475  002570  0100               	movlb	0	; () banked
  9476  002572  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
  9477                           
  9478                           ; BSR set to: 0
  9479                           ;comunicacao.h: 95: etapaComunicacao++;
  9480  002574  4A4C               	infsnz	_etapaComunicacao,f,c
  9481  002576  2A4D               	incf	_etapaComunicacao+1,f,c
  9482                           
  9483                           ;comunicacao.h: 96: break;
  9484  002578  D089               	goto	l331
  9485  00257A  FFFF               	dw	65535	; assembler added errata NOP
  9486                           
  9487                           ; BSR set to: 0
  9488                           ;comunicacao.h: 103: if (aguardaBuffer(">")) {
  9489                           
  9490                           ; BSR set to: 0
  9491  00257C  0EFD               	movlw	low STR_13
  9492  00257E  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9493  002580  0E7F               	movlw	high STR_13
  9494  002582  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9495  002584  ECF9  F037         	call	_aguardaBuffer	;wreg free
  9496  002588  0900               	iorlw	0
  9497  00258A  B4D8               	btfsc	status,2,c
  9498  00258C  D059               	goto	L48
  9499                           
  9500                           ;comunicacao.h: 104: limparBuffer();
  9501  00258E  EC16  F037         	call	_limparBuffer	;wreg free
  9502                           
  9503                           ;comunicacao.h: 105: printf("TECHNOW Sistemas embarcados\r\n\r\nTeste manual de comunica
      +                          cao.\r\nData: %02d/%02d/%02d %02d:%02d:%02d\r\n\r\n\r\nVersao do sistema: %s\r\n",
  9504                           ;comunicacao.h: 106: _dia, _mes, _ano, _hor, _min, _sec, "Jun 01 2020");
  9505  002592  0ED3               	movlw	low STR_14
  9506  002594  0100               	movlb	0	; () banked
  9507  002596  6FA1               	movwf	printf@f& (0+255),b
  9508  002598  0E7A               	movlw	high STR_14
  9509  00259A  6FA2               	movwf	(printf@f+1)& (0+255),b
  9510  00259C  C0EC  F0A3         	movff	__dia,?_printf+2
  9511  0025A0  6BA4               	clrf	(?_printf+3)& (0+255),b
  9512  0025A2  C0EB  F0A5         	movff	__mes,?_printf+4
  9513  0025A6  6BA6               	clrf	(?_printf+5)& (0+255),b
  9514  0025A8  C0EA  F0A7         	movff	__ano,?_printf+6
  9515  0025AC  6BA8               	clrf	(?_printf+7)& (0+255),b
  9516  0025AE  C0ED  F0A9         	movff	__hor,?_printf+8
  9517  0025B2  6BAA               	clrf	(?_printf+9)& (0+255),b
  9518  0025B4  C0EE  F0AB         	movff	__min,?_printf+10
  9519  0025B8  6BAC               	clrf	(?_printf+11)& (0+255),b
  9520  0025BA  C0EF  F0AD         	movff	__sec,?_printf+12
  9521  0025BE  6BAE               	clrf	(?_printf+13)& (0+255),b
  9522  0025C0  0ED8               	movlw	low STR_15
  9523  0025C2  6FAF               	movwf	(?_printf+14)& (0+255),b
  9524  0025C4  0E7E               	movlw	high STR_15
  9525  0025C6  6FB0               	movwf	(?_printf+15)& (0+255),b
  9526  0025C8  EC17  F038         	call	_printf	;wreg free
  9527                           
  9528                           ;comunicacao.h: 107: delay(1000);
  9529  0025CC  0E03               	movlw	3
  9530  0025CE  0100               	movlb	0	; () banked
  9531  0025D0  6F81               	movwf	(delay@x+1)& (0+255),b
  9532  0025D2  0EE8               	movlw	232
  9533  0025D4  6F80               	movwf	delay@x& (0+255),b
  9534  0025D6  ECFB  F036         	call	_delay	;wreg free
  9535                           
  9536                           ;comunicacao.h: 108: writeChar(0x1A);
  9537  0025DA  0E1A               	movlw	26
  9538  0025DC  0100               	movlb	0	; () banked
  9539  0025DE  6F80               	movwf	writeChar@hex& (0+255),b
  9540  0025E0  0E00               	movlw	0
  9541  0025E2  6F81               	movwf	(writeChar@hex+1)& (0+255),b
  9542  0025E4  ECB8  F035         	call	_writeChar	;wreg free
  9543                           
  9544                           ;comunicacao.h: 109: etapaComunicacao++;
  9545  0025E8  4A4C               	infsnz	_etapaComunicacao,f,c
  9546  0025EA  2A4D               	incf	_etapaComunicacao+1,f,c
  9547                           
  9548                           ;comunicacao.h: 110: timerEtapaComunicacao = 30;
  9549  0025EC  0E1E               	movlw	30
  9550  0025EE  0100               	movlb	0	; () banked
  9551  0025F0  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
  9552                           
  9553                           ; BSR set to: 0
  9554  0025F2  D026               	goto	L48
  9555  0025F4  FFFF               	dw	65535	; assembler added errata NOP
  9556                           
  9557                           ; BSR set to: 0
  9558                           ;comunicacao.h: 117: if (aguardaBuffer("OK")) {
  9559                           
  9560                           ; BSR set to: 0
  9561  0025F6  0EFA               	movlw	low STR_5
  9562  0025F8  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9563  0025FA  0E7F               	movlw	high STR_5
  9564  0025FC  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9565  0025FE  ECF9  F037         	call	_aguardaBuffer	;wreg free
  9566  002602  0900               	iorlw	0
  9567  002604  B4D8               	btfsc	status,2,c
  9568  002606  D011               	goto	l346
  9569                           
  9570                           ;comunicacao.h: 118: if (telefoneSelecionado == 0) {
  9571  002608  0100               	movlb	0	; () banked
  9572  00260A  51F8               	movf	_telefoneSelecionado& (0+255),w,b
  9573  00260C  A4D8               	btfss	status,2,c
  9574  00260E  D003               	goto	l347
  9575                           
  9576                           ; BSR set to: 0
  9577                           ;comunicacao.h: 119: telefoneSelecionado = 1;
  9578  002610  0E01               	movlw	1
  9579  002612  6FF8               	movwf	_telefoneSelecionado& (0+255),b
  9580                           
  9581                           ;comunicacao.h: 120: } else {
  9582  002614  D005               	goto	l348
  9583  002616                     l347:
  9584  002616  FFFF               	dw	65535	; assembler added errata NOP
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;comunicacao.h: 121: telefoneSelecionado = 0;
  9588                           
  9589                           ; BSR set to: 0
  9590  002618  0E00               	movlw	0
  9591  00261A  6FF8               	movwf	_telefoneSelecionado& (0+255),b
  9592                           
  9593                           ;comunicacao.h: 122: gsmOcupado = 0;
  9594  00261C  0E00               	movlw	0
  9595  00261E  6FF4               	movwf	_gsmOcupado& (0+255),b
  9596  002620                     l348:
  9597  002620  FFFF               	dw	65535	; assembler added errata NOP
  9598                           
  9599                           ; BSR set to: 0
  9600                           ;comunicacao.h: 123: }
  9601                           ;comunicacao.h: 124: etapaComunicacao = 0;
  9602  002622  0E00               	movlw	0
  9603  002624  6E4D               	movwf	_etapaComunicacao+1,c
  9604  002626  0E00               	movlw	0
  9605  002628  6E4C               	movwf	_etapaComunicacao,c
  9606  00262A                     l346:
  9607  00262A  FFFF               	dw	65535	; assembler added errata NOP
  9608                           
  9609                           ;comunicacao.h: 125: }
  9610                           ;comunicacao.h: 126: if (aguardaBuffer("ERROR") || !timerEtapaComunicacao) {
  9611                           
  9612                           ; BSR set to: 0
  9613  00262C  0ED8               	movlw	low STR_17
  9614  00262E  0100               	movlb	0	; () banked
  9615  002630  6F93               	movwf	aguardaBuffer@str& (0+255),b
  9616  002632  0E7F               	movlw	high STR_17
  9617  002634  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
  9618  002636  ECF9  F037         	call	_aguardaBuffer	;wreg free
  9619  00263A  0900               	iorlw	0
  9620  00263C  A4D8               	btfss	status,2,c
  9621  00263E  D005               	goto	u6020
  9622  002640                     L48:
  9623  002640  FFFF               	dw	65535	; assembler added errata NOP
  9624  002642  0100               	movlb	0	; () banked
  9625  002644  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
  9626  002646  A4D8               	btfss	status,2,c
  9627  002648  D021               	goto	l331
  9628  00264A                     u6020:
  9629  00264A  FFFF               	dw	65535	; assembler added errata NOP
  9630                           
  9631                           ;comunicacao.h: 131: etapaComunicacao = 0;
  9632                           
  9633                           ;comunicacao.h: 130: default:
  9634                           
  9635                           ;comunicacao.h: 128: }
  9636                           ;comunicacao.h: 129: break;
  9637                           
  9638                           ;comunicacao.h: 127: etapaComunicacao = 0;
  9639                           
  9640                           ; BSR set to: 0
  9641  00264C  0E00               	movlw	0
  9642  00264E  6E4D               	movwf	_etapaComunicacao+1,c
  9643  002650  0E00               	movlw	0
  9644  002652  6E4C               	movwf	_etapaComunicacao,c
  9645                           
  9646                           ;comunicacao.h: 134: }
  9647                           
  9648                           ;comunicacao.h: 132: break;
  9649  002654  D01B               	goto	l331
  9650  002656                     l329:
  9651  002656  FFFF               	dw	65535	; assembler added errata NOP
  9652  002658  C04C  F0BB         	movff	_etapaComunicacao,??_comunicarTeste
  9653  00265C  C04D  F0BC         	movff	_etapaComunicacao+1,??_comunicarTeste+1
  9654                           
  9655                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9656                           ; Switch size 1, requested type "space"
  9657                           ; Number of cases is 1, Range of values is 0 to 0
  9658                           ; switch strategies available:
  9659                           ; Name         Instructions Cycles
  9660                           ; simple_byte            4     3 (average)
  9661                           ;	Chosen strategy is simple_byte
  9662  002660  0100               	movlb	0	; () banked
  9663  002662  51BC               	movf	(??_comunicarTeste+1)& (0+255),w,b
  9664  002664  0A00               	xorlw	0	; case 0
  9665  002666  A4D8               	btfss	status,2,c
  9666  002668  D7F0               	goto	u6020
  9667                           
  9668                           ; BSR set to: 0
  9669                           ; Switch size 1, requested type "space"
  9670                           ; Number of cases is 5, Range of values is 0 to 4
  9671                           ; switch strategies available:
  9672                           ; Name         Instructions Cycles
  9673                           ; simple_byte           16     9 (average)
  9674                           ;	Chosen strategy is simple_byte
  9675  00266A  51BB               	movf	??_comunicarTeste& (0+255),w,b
  9676  00266C  0A00               	xorlw	0	; case 0
  9677  00266E  B4D8               	btfsc	status,2,c
  9678  002670  D721               	goto	l330
  9679  002672  0A01               	xorlw	1	; case 1
  9680  002674  B4D8               	btfsc	status,2,c
  9681  002676  D72E               	goto	l332
  9682  002678  0A03               	xorlw	3	; case 2
  9683  00267A  B4D8               	btfsc	status,2,c
  9684  00267C  D753               	goto	l335
  9685  00267E  0A01               	xorlw	1	; case 3
  9686  002680  B4D8               	btfsc	status,2,c
  9687  002682  D77B               	goto	l342
  9688  002684  0A07               	xorlw	7	; case 4
  9689  002686  B4D8               	btfsc	status,2,c
  9690  002688  D7B5               	goto	l345
  9691  00268A  D7DF               	goto	u6020
  9692  00268C                     l331:
  9693  00268C  FFFF               	dw	65535	; assembler added errata NOP
  9694                           
  9695                           ; BSR set to: 0
  9696  00268E  0012               	return		;funcret
  9697  002690  FFFF               	dw	65535	; errata NOP
  9698  002692                     __end_of_comunicarTeste:
  9699                           	opt stack 0
  9700                           tblptru	equ	0xFF8
  9701                           tblptrh	equ	0xFF7
  9702                           tblptrl	equ	0xFF6
  9703                           tablat	equ	0xFF5
  9704                           prodh	equ	0xFF4
  9705                           prodl	equ	0xFF3
  9706                           postinc0	equ	0xFEE
  9707                           wreg	equ	0xFE8
  9708                           postdec1	equ	0xFE5
  9709                           fsr1l	equ	0xFE1
  9710                           indf2	equ	0xFDF
  9711                           postinc2	equ	0xFDE
  9712                           fsr2h	equ	0xFDA
  9713                           fsr2l	equ	0xFD9
  9714                           status	equ	0xFD8
  9715                           
  9716 ;; *************** function _configuraRegistradores *****************
  9717 ;; Defined at:
  9718 ;;		line 7 in file "registradores.h"
  9719 ;; Parameters:    Size  Location     Type
  9720 ;;		None
  9721 ;; Auto vars:     Size  Location     Type
  9722 ;;		None
  9723 ;; Return value:  Size  Location     Type
  9724 ;;                  1    wreg      void 
  9725 ;; Registers used:
  9726 ;;		wreg, status,2
  9727 ;; Tracked objects:
  9728 ;;		On entry : 0/0
  9729 ;;		On exit  : 0/0
  9730 ;;		Unchanged: 0/0
  9731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9732 ;;      Params:         0       0       0       0       0       0       0
  9733 ;;      Locals:         0       0       0       0       0       0       0
  9734 ;;      Temps:          0       0       0       0       0       0       0
  9735 ;;      Totals:         0       0       0       0       0       0       0
  9736 ;;Total ram usage:        0 bytes
  9737 ;; Hardware stack levels used:    1
  9738 ;; Hardware stack levels required when called:    6
  9739 ;; This function calls:
  9740 ;;		Nothing
  9741 ;; This function is called by:
  9742 ;;		_main
  9743 ;; This function uses a non-reentrant model
  9744 ;;
  9745                           
  9746                           	psect	text23
  9747  00732E                     __ptext23:
  9748                           	opt stack 0
  9749  00732E                     _configuraRegistradores:
  9750                           	opt stack 0
  9751  00732E  FFFF               	dw	65535	; assembler added errata NOP
  9752                           
  9753                           ;registradores.h: 9: ADCON0 = 0b10000001;
  9754                           
  9755                           ;incstack = 0
  9756  007330  0E81               	movlw	129
  9757  007332  6EC2               	movwf	4034,c	;volatile
  9758                           
  9759                           ;registradores.h: 10: ADCON1 = 0b11001110;
  9760  007334  0ECE               	movlw	206
  9761  007336  6EC1               	movwf	4033,c	;volatile
  9762                           
  9763                           ;registradores.h: 11: TRISAbits.RA0 = 1;
  9764  007338  8092               	bsf	3986,0,c	;volatile
  9765                           
  9766                           ;registradores.h: 12: PORTAbits.AN0 = 0;
  9767  00733A  9080               	bcf	3968,0,c	;volatile
  9768                           
  9769                           ;registradores.h: 15: T0CON = 0x81;
  9770  00733C  0E81               	movlw	129
  9771  00733E  6ED5               	movwf	4053,c	;volatile
  9772                           
  9773                           ;registradores.h: 16: INTCON = 0xE4;
  9774  007340  0EE4               	movlw	228
  9775  007342  6EF2               	movwf	intcon,c	;volatile
  9776                           
  9777                           ;registradores.h: 19: TRISDbits.RD5 = 0;
  9778  007344  9A95               	bcf	3989,5,c	;volatile
  9779                           
  9780                           ;registradores.h: 20: TRISDbits.RD4 = 0;
  9781  007346  9895               	bcf	3989,4,c	;volatile
  9782                           
  9783                           ;registradores.h: 21: TRISDbits.RD3 = 0;
  9784  007348  9695               	bcf	3989,3,c	;volatile
  9785                           
  9786                           ;registradores.h: 22: TRISDbits.RD2 = 0;
  9787  00734A  9495               	bcf	3989,2,c	;volatile
  9788                           
  9789                           ;registradores.h: 23: TRISDbits.RD1 = 0;
  9790  00734C  9295               	bcf	3989,1,c	;volatile
  9791                           
  9792                           ;registradores.h: 24: TRISDbits.RD0 = 0;
  9793  00734E  9095               	bcf	3989,0,c	;volatile
  9794                           
  9795                           ;registradores.h: 27: TRISCbits.TRISC6 = 0;
  9796  007350  9C94               	bcf	3988,6,c	;volatile
  9797                           
  9798                           ;registradores.h: 28: TRISCbits.TRISC7 = 1;
  9799  007352  8E94               	bsf	3988,7,c	;volatile
  9800                           
  9801                           ;registradores.h: 29: TXSTAbits.TXEN = 1;
  9802  007354  8AAC               	bsf	4012,5,c	;volatile
  9803                           
  9804                           ;registradores.h: 30: TXSTAbits.BRGH = 1;
  9805  007356  84AC               	bsf	4012,2,c	;volatile
  9806                           
  9807                           ;registradores.h: 31: TXSTAbits.SYNC = 0;
  9808  007358  98AC               	bcf	4012,4,c	;volatile
  9809                           
  9810                           ;registradores.h: 32: RCSTAbits.SPEN = 1;
  9811  00735A  8EAB               	bsf	4011,7,c	;volatile
  9812                           
  9813                           ;registradores.h: 33: RCSTAbits.CREN = 1;
  9814  00735C  88AB               	bsf	4011,4,c	;volatile
  9815                           
  9816                           ;registradores.h: 36: SPBRG = 25;
  9817  00735E  0E19               	movlw	25
  9818  007360  6EAF               	movwf	4015,c	;volatile
  9819                           
  9820                           ;registradores.h: 37: INTCONbits.GIE = 1;
  9821  007362  8EF2               	bsf	intcon,7,c	;volatile
  9822                           
  9823                           ;registradores.h: 38: INTCONbits.PEIE = 1;
  9824  007364  8CF2               	bsf	intcon,6,c	;volatile
  9825                           
  9826                           ;registradores.h: 39: PIR1bits.RCIF = 0;
  9827  007366  9A9E               	bcf	3998,5,c	;volatile
  9828                           
  9829                           ;registradores.h: 40: PIE1bits.RCIE = 1;
  9830  007368  8A9D               	bsf	3997,5,c	;volatile
  9831                           
  9832                           ;registradores.h: 43: INTCONbits.RBIE = 0;
  9833  00736A  96F2               	bcf	intcon,3,c	;volatile
  9834                           
  9835                           ;registradores.h: 44: TRISAbits.RA2 = 1;
  9836  00736C  8492               	bsf	3986,2,c	;volatile
  9837                           
  9838                           ;registradores.h: 45: TRISAbits.RA5 = 1;
  9839  00736E  8A92               	bsf	3986,5,c	;volatile
  9840                           
  9841                           ;registradores.h: 46: TRISCbits.RC0 = 1;
  9842  007370  8094               	bsf	3988,0,c	;volatile
  9843                           
  9844                           ;registradores.h: 49: TRISBbits.RB2 = 1;
  9845  007372  8493               	bsf	3987,2,c	;volatile
  9846                           
  9847                           ;registradores.h: 50: TRISBbits.RB3 = 1;
  9848  007374  8693               	bsf	3987,3,c	;volatile
  9849                           
  9850                           ;registradores.h: 51: TRISBbits.RB4 = 1;
  9851  007376  8893               	bsf	3987,4,c	;volatile
  9852                           
  9853                           ;registradores.h: 52: TRISBbits.RB5 = 1;
  9854  007378  8A93               	bsf	3987,5,c	;volatile
  9855                           
  9856                           ;registradores.h: 55: TRISEbits.RE0 = 0;
  9857  00737A  9096               	bcf	3990,0,c	;volatile
  9858                           
  9859                           ;registradores.h: 56: TRISEbits.RE1 = 0;
  9860  00737C  9296               	bcf	3990,1,c	;volatile
  9861                           
  9862                           ;registradores.h: 57: TRISEbits.RE2 = 0;
  9863  00737E  9496               	bcf	3990,2,c	;volatile
  9864  007380  0012               	return		;funcret
  9865  007382  FFFF               	dw	65535	; errata NOP
  9866  007384                     __end_of_configuraRegistradores:
  9867                           	opt stack 0
  9868                           tblptru	equ	0xFF8
  9869                           tblptrh	equ	0xFF7
  9870                           tblptrl	equ	0xFF6
  9871                           tablat	equ	0xFF5
  9872                           prodh	equ	0xFF4
  9873                           prodl	equ	0xFF3
  9874                           intcon	equ	0xFF2
  9875                           postinc0	equ	0xFEE
  9876                           wreg	equ	0xFE8
  9877                           postdec1	equ	0xFE5
  9878                           fsr1l	equ	0xFE1
  9879                           indf2	equ	0xFDF
  9880                           postinc2	equ	0xFDE
  9881                           fsr2h	equ	0xFDA
  9882                           fsr2l	equ	0xFD9
  9883                           status	equ	0xFD8
  9884                           
  9885 ;; *************** function _atualizarLCD *****************
  9886 ;; Defined at:
  9887 ;;		line 132 in file "lcd.h"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;  line1           2    8[BANK0 ] PTR unsigned char 
  9890 ;;		 -> line1(21), 
  9891 ;;  line2           2   10[BANK0 ] PTR unsigned char 
  9892 ;;		 -> line2(21), 
  9893 ;;  line3           2   12[BANK0 ] PTR unsigned char 
  9894 ;;		 -> line3(21), 
  9895 ;;  line4           2   14[BANK0 ] PTR unsigned char 
  9896 ;;		 -> line4(21), 
  9897 ;; Auto vars:     Size  Location     Type
  9898 ;;  i               1   16[BANK0 ] unsigned char 
  9899 ;; Return value:  Size  Location     Type
  9900 ;;                  1    wreg      void 
  9901 ;; Registers used:
  9902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9903 ;; Tracked objects:
  9904 ;;		On entry : 0/0
  9905 ;;		On exit  : 0/0
  9906 ;;		Unchanged: 0/0
  9907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9908 ;;      Params:         0       8       0       0       0       0       0
  9909 ;;      Locals:         0       1       0       0       0       0       0
  9910 ;;      Temps:          0       0       0       0       0       0       0
  9911 ;;      Totals:         0       9       0       0       0       0       0
  9912 ;;Total ram usage:        9 bytes
  9913 ;; Hardware stack levels used:    1
  9914 ;; Hardware stack levels required when called:    9
  9915 ;; This function calls:
  9916 ;;		_Lcd_Set_Cursor
  9917 ;;		_Lcd_Write_String
  9918 ;; This function is called by:
  9919 ;;		_main
  9920 ;; This function uses a non-reentrant model
  9921 ;;
  9922                           
  9923                           	psect	text24
  9924  003A9E                     __ptext24:
  9925                           	opt stack 0
  9926  003A9E                     _atualizarLCD:
  9927                           	opt stack 0
  9928  003A9E  FFFF               	dw	65535	; assembler added errata NOP
  9929                           
  9930                           ;lcd.h: 134: Lcd_Set_Cursor(1, 1);
  9931                           
  9932                           ;incstack = 0
  9933  003AA0  0E01               	movlw	1
  9934  003AA2  0100               	movlb	0	; () banked
  9935  003AA4  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9936  003AA6  0E01               	movlw	1
  9937  003AA8  EC1B  F01E         	call	_Lcd_Set_Cursor
  9938                           
  9939                           ;lcd.h: 135: Lcd_Write_String(line1);
  9940  003AAC  C088  F084         	movff	atualizarLCD@line1,Lcd_Write_String@a
  9941  003AB0  C089  F085         	movff	atualizarLCD@line1+1,Lcd_Write_String@a+1
  9942  003AB4  ECBE  F037         	call	_Lcd_Write_String	;wreg free
  9943                           
  9944                           ;lcd.h: 136: Lcd_Set_Cursor(2, 1);
  9945  003AB8  0E01               	movlw	1
  9946  003ABA  0100               	movlb	0	; () banked
  9947  003ABC  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9948  003ABE  0E02               	movlw	2
  9949  003AC0  EC1B  F01E         	call	_Lcd_Set_Cursor
  9950                           
  9951                           ;lcd.h: 137: Lcd_Write_String(line2);
  9952  003AC4  C08A  F084         	movff	atualizarLCD@line2,Lcd_Write_String@a
  9953  003AC8  C08B  F085         	movff	atualizarLCD@line2+1,Lcd_Write_String@a+1
  9954  003ACC  ECBE  F037         	call	_Lcd_Write_String	;wreg free
  9955                           
  9956                           ;lcd.h: 138: Lcd_Set_Cursor(3, 0);
  9957  003AD0  0E00               	movlw	0
  9958  003AD2  0100               	movlb	0	; () banked
  9959  003AD4  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9960  003AD6  0E03               	movlw	3
  9961  003AD8  EC1B  F01E         	call	_Lcd_Set_Cursor
  9962                           
  9963                           ;lcd.h: 139: Lcd_Write_String(line3);
  9964  003ADC  C08C  F084         	movff	atualizarLCD@line3,Lcd_Write_String@a
  9965  003AE0  C08D  F085         	movff	atualizarLCD@line3+1,Lcd_Write_String@a+1
  9966  003AE4  ECBE  F037         	call	_Lcd_Write_String	;wreg free
  9967                           
  9968                           ;lcd.h: 140: Lcd_Set_Cursor(4, 0);
  9969  003AE8  0E00               	movlw	0
  9970  003AEA  0100               	movlb	0	; () banked
  9971  003AEC  6F83               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9972  003AEE  0E04               	movlw	4
  9973  003AF0  EC1B  F01E         	call	_Lcd_Set_Cursor
  9974                           
  9975                           ;lcd.h: 141: Lcd_Write_String(line4);
  9976  003AF4  C08E  F084         	movff	atualizarLCD@line4,Lcd_Write_String@a
  9977  003AF8  C08F  F085         	movff	atualizarLCD@line4+1,Lcd_Write_String@a+1
  9978  003AFC  ECBE  F037         	call	_Lcd_Write_String	;wreg free
  9979                           
  9980                           ;lcd.h: 143: char i = 0;
  9981  003B00  0E00               	movlw	0
  9982  003B02  0100               	movlb	0	; () banked
  9983  003B04  6F90               	movwf	atualizarLCD@i& (0+255),b
  9984                           
  9985                           ; BSR set to: 0
  9986                           ;lcd.h: 144: for (i = 0; i < 20; i++) {
  9987  003B06  0E00               	movlw	0
  9988  003B08  6F90               	movwf	atualizarLCD@i& (0+255),b
  9989  003B0A                     l7149:
  9990  003B0A  FFFF               	dw	65535	; assembler added errata NOP
  9991                           
  9992                           ; BSR set to: 0
  9993  003B0C  0E13               	movlw	19
  9994  003B0E  6590               	cpfsgt	atualizarLCD@i& (0+255),b
  9995  003B10  D001               	goto	l687
  9996  003B12  D02B               	goto	u8050
  9997  003B14                     l687:
  9998  003B14  FFFF               	dw	65535	; assembler added errata NOP
  9999                           
 10000                           ; BSR set to: 0
 10001                           ;lcd.h: 145: line1[i] = ' ';
 10002                           
 10003                           ; BSR set to: 0
 10004  003B16  5190               	movf	atualizarLCD@i& (0+255),w,b
 10005  003B18  0D01               	mullw	1
 10006  003B1A  50F3               	movf	prodl,w,c
 10007  003B1C  2588               	addwf	atualizarLCD@line1& (0+255),w,b
 10008  003B1E  6ED9               	movwf	fsr2l,c
 10009  003B20  50F4               	movf	prodh,w,c
 10010  003B22  2189               	addwfc	(atualizarLCD@line1+1)& (0+255),w,b
 10011  003B24  6EDA               	movwf	fsr2h,c
 10012  003B26  0E20               	movlw	32
 10013  003B28  6EDF               	movwf	indf2,c
 10014                           
 10015                           ;lcd.h: 146: line2[i] = ' ';
 10016  003B2A  5190               	movf	atualizarLCD@i& (0+255),w,b
 10017  003B2C  0D01               	mullw	1
 10018  003B2E  50F3               	movf	prodl,w,c
 10019  003B30  258A               	addwf	atualizarLCD@line2& (0+255),w,b
 10020  003B32  6ED9               	movwf	fsr2l,c
 10021  003B34  50F4               	movf	prodh,w,c
 10022  003B36  218B               	addwfc	(atualizarLCD@line2+1)& (0+255),w,b
 10023  003B38  6EDA               	movwf	fsr2h,c
 10024  003B3A  0E20               	movlw	32
 10025  003B3C  6EDF               	movwf	indf2,c
 10026                           
 10027                           ;lcd.h: 147: line3[i] = ' ';
 10028  003B3E  5190               	movf	atualizarLCD@i& (0+255),w,b
 10029  003B40  0D01               	mullw	1
 10030  003B42  50F3               	movf	prodl,w,c
 10031  003B44  258C               	addwf	atualizarLCD@line3& (0+255),w,b
 10032  003B46  6ED9               	movwf	fsr2l,c
 10033  003B48  50F4               	movf	prodh,w,c
 10034  003B4A  218D               	addwfc	(atualizarLCD@line3+1)& (0+255),w,b
 10035  003B4C  6EDA               	movwf	fsr2h,c
 10036  003B4E  0E20               	movlw	32
 10037  003B50  6EDF               	movwf	indf2,c
 10038                           
 10039                           ;lcd.h: 148: line4[i] = ' ';
 10040  003B52  5190               	movf	atualizarLCD@i& (0+255),w,b
 10041  003B54  0D01               	mullw	1
 10042  003B56  50F3               	movf	prodl,w,c
 10043  003B58  258E               	addwf	atualizarLCD@line4& (0+255),w,b
 10044  003B5A  6ED9               	movwf	fsr2l,c
 10045  003B5C  50F4               	movf	prodh,w,c
 10046  003B5E  218F               	addwfc	(atualizarLCD@line4+1)& (0+255),w,b
 10047  003B60  6EDA               	movwf	fsr2h,c
 10048  003B62  0E20               	movlw	32
 10049  003B64  6EDF               	movwf	indf2,c
 10050                           
 10051                           ; BSR set to: 0
 10052  003B66  2B90               	incf	atualizarLCD@i& (0+255),f,b
 10053  003B68  D7D0               	goto	l7149
 10054  003B6A                     u8050:
 10055  003B6A  FFFF               	dw	65535	; assembler added errata NOP
 10056                           
 10057                           ; BSR set to: 0
 10058                           
 10059                           ; BSR set to: 0
 10060  003B6C  0012               	return		;funcret
 10061  003B6E  FFFF               	dw	65535	; errata NOP
 10062  003B70                     __end_of_atualizarLCD:
 10063                           	opt stack 0
 10064                           tblptru	equ	0xFF8
 10065                           tblptrh	equ	0xFF7
 10066                           tblptrl	equ	0xFF6
 10067                           tablat	equ	0xFF5
 10068                           prodh	equ	0xFF4
 10069                           prodl	equ	0xFF3
 10070                           intcon	equ	0xFF2
 10071                           postinc0	equ	0xFEE
 10072                           wreg	equ	0xFE8
 10073                           postdec1	equ	0xFE5
 10074                           fsr1l	equ	0xFE1
 10075                           indf2	equ	0xFDF
 10076                           postinc2	equ	0xFDE
 10077                           fsr2h	equ	0xFDA
 10078                           fsr2l	equ	0xFD9
 10079                           status	equ	0xFD8
 10080                           
 10081 ;; *************** function _Lcd_Write_String *****************
 10082 ;; Defined at:
 10083 ;;		line 123 in file "lcd.h"
 10084 ;; Parameters:    Size  Location     Type
 10085 ;;  a               2    4[BANK0 ] PTR unsigned char 
 10086 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
 10087 ;; Auto vars:     Size  Location     Type
 10088 ;;  i               1    6[BANK0 ] unsigned char 
 10089 ;; Return value:  Size  Location     Type
 10090 ;;                  1    wreg      void 
 10091 ;; Registers used:
 10092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10093 ;; Tracked objects:
 10094 ;;		On entry : 0/0
 10095 ;;		On exit  : 0/0
 10096 ;;		Unchanged: 0/0
 10097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10098 ;;      Params:         0       2       0       0       0       0       0
 10099 ;;      Locals:         0       1       0       0       0       0       0
 10100 ;;      Temps:          0       0       0       0       0       0       0
 10101 ;;      Totals:         0       3       0       0       0       0       0
 10102 ;;Total ram usage:        3 bytes
 10103 ;; Hardware stack levels used:    1
 10104 ;; Hardware stack levels required when called:    8
 10105 ;; This function calls:
 10106 ;;		_Lcd_Write_Char
 10107 ;; This function is called by:
 10108 ;;		_atualizarLCD
 10109 ;; This function uses a non-reentrant model
 10110 ;;
 10111                           
 10112                           	psect	text25
 10113  006F7C                     __ptext25:
 10114                           	opt stack 0
 10115  006F7C                     _Lcd_Write_String:
 10116                           	opt stack 0
 10117  006F7C  FFFF               	dw	65535	; assembler added errata NOP
 10118                           
 10119                           ;lcd.h: 124: unsigned char i = 0;
 10120                           
 10121                           ; BSR set to: 0
 10122                           ;incstack = 0
 10123  006F7E  0E00               	movlw	0
 10124  006F80  0100               	movlb	0	; () banked
 10125  006F82  6F86               	movwf	Lcd_Write_String@i& (0+255),b
 10126                           
 10127                           ;lcd.h: 126: for (i = 0; i < 20; i++) {
 10128  006F84  0E00               	movlw	0
 10129  006F86  6F86               	movwf	Lcd_Write_String@i& (0+255),b
 10130  006F88                     l6125:
 10131  006F88  FFFF               	dw	65535	; assembler added errata NOP
 10132                           
 10133                           ; BSR set to: 0
 10134  006F8A  0E13               	movlw	19
 10135  006F8C  6586               	cpfsgt	Lcd_Write_String@i& (0+255),b
 10136  006F8E  D001               	goto	l682
 10137  006F90  D00F               	goto	u6460
 10138  006F92                     l682:
 10139  006F92  FFFF               	dw	65535	; assembler added errata NOP
 10140                           
 10141                           ; BSR set to: 0
 10142                           ;lcd.h: 127: Lcd_Write_Char(a[i]);
 10143                           
 10144                           ; BSR set to: 0
 10145  006F94  5186               	movf	Lcd_Write_String@i& (0+255),w,b
 10146  006F96  0D01               	mullw	1
 10147  006F98  50F3               	movf	prodl,w,c
 10148  006F9A  2584               	addwf	Lcd_Write_String@a& (0+255),w,b
 10149  006F9C  6ED9               	movwf	fsr2l,c
 10150  006F9E  50F4               	movf	prodh,w,c
 10151  006FA0  2185               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
 10152  006FA2  6EDA               	movwf	fsr2h,c
 10153  006FA4  50DF               	movf	indf2,w,c
 10154  006FA6  EC74  F038         	call	_Lcd_Write_Char
 10155  006FAA  0100               	movlb	0	; () banked
 10156  006FAC  2B86               	incf	Lcd_Write_String@i& (0+255),f,b
 10157  006FAE  D7EC               	goto	l6125
 10158  006FB0                     u6460:
 10159  006FB0  FFFF               	dw	65535	; assembler added errata NOP
 10160                           
 10161                           ; BSR set to: 0
 10162                           
 10163                           ; BSR set to: 0
 10164  006FB2  0012               	return		;funcret
 10165  006FB4  FFFF               	dw	65535	; errata NOP
 10166  006FB6                     __end_of_Lcd_Write_String:
 10167                           	opt stack 0
 10168                           tblptru	equ	0xFF8
 10169                           tblptrh	equ	0xFF7
 10170                           tblptrl	equ	0xFF6
 10171                           tablat	equ	0xFF5
 10172                           prodh	equ	0xFF4
 10173                           prodl	equ	0xFF3
 10174                           intcon	equ	0xFF2
 10175                           postinc0	equ	0xFEE
 10176                           wreg	equ	0xFE8
 10177                           postdec1	equ	0xFE5
 10178                           fsr1l	equ	0xFE1
 10179                           indf2	equ	0xFDF
 10180                           postinc2	equ	0xFDE
 10181                           fsr2h	equ	0xFDA
 10182                           fsr2l	equ	0xFD9
 10183                           status	equ	0xFD8
 10184                           
 10185 ;; *************** function _Lcd_Write_Char *****************
 10186 ;; Defined at:
 10187 ;;		line 108 in file "lcd.h"
 10188 ;; Parameters:    Size  Location     Type
 10189 ;;  a               1    wreg     unsigned char 
 10190 ;; Auto vars:     Size  Location     Type
 10191 ;;  a               1    3[BANK0 ] unsigned char 
 10192 ;;  y               1    2[BANK0 ] unsigned char 
 10193 ;;  tempp           1    1[BANK0 ] unsigned char 
 10194 ;; Return value:  Size  Location     Type
 10195 ;;                  1    wreg      void 
 10196 ;; Registers used:
 10197 ;;		wreg, status,2, status,0, cstack
 10198 ;; Tracked objects:
 10199 ;;		On entry : 0/0
 10200 ;;		On exit  : 0/0
 10201 ;;		Unchanged: 0/0
 10202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10203 ;;      Params:         0       0       0       0       0       0       0
 10204 ;;      Locals:         0       3       0       0       0       0       0
 10205 ;;      Temps:          0       0       0       0       0       0       0
 10206 ;;      Totals:         0       3       0       0       0       0       0
 10207 ;;Total ram usage:        3 bytes
 10208 ;; Hardware stack levels used:    1
 10209 ;; Hardware stack levels required when called:    7
 10210 ;; This function calls:
 10211 ;;		_Lcd_Port
 10212 ;; This function is called by:
 10213 ;;		_Lcd_Write_String
 10214 ;;		_criarCaracteresCGRAM
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           	psect	text26
 10219  0070E8                     __ptext26:
 10220                           	opt stack 0
 10221  0070E8                     _Lcd_Write_Char:
 10222                           	opt stack 0
 10223  0070E8  FFFF               	dw	65535	; assembler added errata NOP
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;incstack = 0
 10227                           ;Lcd_Write_Char@a stored from wreg
 10228  0070EA  0100               	movlb	0	; () banked
 10229  0070EC  6F83               	movwf	Lcd_Write_Char@a& (0+255),b
 10230                           
 10231                           ;lcd.h: 109: char tempp, y;
 10232                           ;lcd.h: 110: tempp = a & 0x0F;
 10233  0070EE  0100               	movlb	0	; () banked
 10234  0070F0  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 10235  0070F2  0B0F               	andlw	15
 10236  0070F4  6F81               	movwf	Lcd_Write_Char@tempp& (0+255),b
 10237                           
 10238                           ;lcd.h: 111: y = a & 0xF0;
 10239  0070F6  5183               	movf	Lcd_Write_Char@a& (0+255),w,b
 10240  0070F8  0BF0               	andlw	240
 10241  0070FA  6F82               	movwf	Lcd_Write_Char@y& (0+255),b
 10242                           
 10243                           ; BSR set to: 0
 10244                           ;lcd.h: 112: PORTDbits.RD1 = 1;
 10245  0070FC  8283               	bsf	3971,1,c	;volatile
 10246                           
 10247                           ; BSR set to: 0
 10248                           ;lcd.h: 113: Lcd_Port(y >> 4);
 10249  0070FE  3982               	swapf	Lcd_Write_Char@y& (0+255),w,b
 10250  007100  0B0F               	andlw	15
 10251  007102  ECD7  F038         	call	_Lcd_Port
 10252                           
 10253                           ;lcd.h: 114: PORTDbits.RD0 = 1;
 10254  007106  8083               	bsf	3971,0,c	;volatile
 10255                           
 10256                           ;lcd.h: 115: _delay((unsigned long)((150)*(8000000/4000000.0)));
 10257  007108  0E4B               	movlw	75
 10258  00710A                     u9397:
 10259  00710A  FFFF               	dw	65535	; errata NOP
 10260  00710C  2EE8               	decfsz	wreg,f,c
 10261  00710E  D7FD               	bra	u9397
 10262                           
 10263                           ;lcd.h: 116: PORTDbits.RD0 = 0;
 10264  007110  9083               	bcf	3971,0,c	;volatile
 10265                           
 10266                           ;lcd.h: 117: Lcd_Port(tempp);
 10267  007112  0100               	movlb	0	; () banked
 10268  007114  5181               	movf	Lcd_Write_Char@tempp& (0+255),w,b
 10269  007116  ECD7  F038         	call	_Lcd_Port
 10270                           
 10271                           ;lcd.h: 118: PORTDbits.RD0 = 1;
 10272  00711A  8083               	bsf	3971,0,c	;volatile
 10273                           
 10274                           ;lcd.h: 119: _delay((unsigned long)((150)*(8000000/4000000.0)));
 10275  00711C  0E4B               	movlw	75
 10276  00711E                     u9407:
 10277  00711E  FFFF               	dw	65535	; errata NOP
 10278  007120  2EE8               	decfsz	wreg,f,c
 10279  007122  D7FD               	bra	u9407
 10280                           
 10281                           ;lcd.h: 120: PORTDbits.RD0 = 0;
 10282  007124  9083               	bcf	3971,0,c	;volatile
 10283  007126  0012               	return		;funcret
 10284  007128  FFFF               	dw	65535	; errata NOP
 10285  00712A                     __end_of_Lcd_Write_Char:
 10286                           	opt stack 0
 10287                           tblptru	equ	0xFF8
 10288                           tblptrh	equ	0xFF7
 10289                           tblptrl	equ	0xFF6
 10290                           tablat	equ	0xFF5
 10291                           prodh	equ	0xFF4
 10292                           prodl	equ	0xFF3
 10293                           intcon	equ	0xFF2
 10294                           postinc0	equ	0xFEE
 10295                           wreg	equ	0xFE8
 10296                           postdec1	equ	0xFE5
 10297                           fsr1l	equ	0xFE1
 10298                           indf2	equ	0xFDF
 10299                           postinc2	equ	0xFDE
 10300                           fsr2h	equ	0xFDA
 10301                           fsr2l	equ	0xFD9
 10302                           status	equ	0xFD8
 10303                           
 10304 ;; *************** function _Lcd_Set_Cursor *****************
 10305 ;; Defined at:
 10306 ;;		line 73 in file "lcd.h"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;  a               1    wreg     unsigned char 
 10309 ;;  b               1    3[BANK0 ] unsigned char 
 10310 ;; Auto vars:     Size  Location     Type
 10311 ;;  a               1    4[BANK0 ] unsigned char 
 10312 ;;  temp            1    7[BANK0 ] unsigned char 
 10313 ;;  y               1    6[BANK0 ] unsigned char 
 10314 ;;  z               1    5[BANK0 ] unsigned char 
 10315 ;; Return value:  Size  Location     Type
 10316 ;;                  1    wreg      void 
 10317 ;; Registers used:
 10318 ;;		wreg, status,2, status,0, cstack
 10319 ;; Tracked objects:
 10320 ;;		On entry : 0/0
 10321 ;;		On exit  : 0/0
 10322 ;;		Unchanged: 0/0
 10323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10324 ;;      Params:         0       1       0       0       0       0       0
 10325 ;;      Locals:         0       4       0       0       0       0       0
 10326 ;;      Temps:          0       0       0       0       0       0       0
 10327 ;;      Totals:         0       5       0       0       0       0       0
 10328 ;;Total ram usage:        5 bytes
 10329 ;; Hardware stack levels used:    1
 10330 ;; Hardware stack levels required when called:    8
 10331 ;; This function calls:
 10332 ;;		_Lcd_Cmd
 10333 ;; This function is called by:
 10334 ;;		_atualizarLCD
 10335 ;; This function uses a non-reentrant model
 10336 ;;
 10337                           
 10338                           	psect	text27
 10339  003C36                     __ptext27:
 10340                           	opt stack 0
 10341  003C36                     _Lcd_Set_Cursor:
 10342                           	opt stack 0
 10343  003C36  FFFF               	dw	65535	; assembler added errata NOP
 10344                           
 10345                           ;incstack = 0
 10346                           ;Lcd_Set_Cursor@a stored from wreg
 10347  003C38  0100               	movlb	0	; () banked
 10348  003C3A  6F84               	movwf	Lcd_Set_Cursor@a& (0+255),b
 10349                           
 10350                           ;lcd.h: 74: char temp, z, y;
 10351                           ;lcd.h: 75: switch (a) {
 10352  003C3C  D04C               	goto	l669
 10353  003C3E  FFFF               	dw	65535	; assembler added errata NOP
 10354                           
 10355                           ;lcd.h: 77: temp = 0x80 + b - 1;
 10356  003C40  0100               	movlb	0	; () banked
 10357  003C42  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10358  003C44  0F7F               	addlw	127
 10359  003C46  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10360                           
 10361                           ;lcd.h: 78: z = temp >> 4;
 10362  003C48  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10363  003C4A  0B0F               	andlw	15
 10364  003C4C  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10365                           
 10366                           ;lcd.h: 79: y = temp & 0x0F;
 10367  003C4E  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10368  003C50  0B0F               	andlw	15
 10369  003C52  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10370                           
 10371                           ; BSR set to: 0
 10372                           ;lcd.h: 80: Lcd_Cmd(z);
 10373  003C54  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10374  003C56  EC50  F036         	call	_Lcd_Cmd
 10375                           
 10376                           ;lcd.h: 81: Lcd_Cmd(y);
 10377  003C5A  0100               	movlb	0	; () banked
 10378  003C5C  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10379  003C5E  EC50  F036         	call	_Lcd_Cmd
 10380                           
 10381                           ;lcd.h: 82: break;
 10382  003C62  D048               	goto	l671
 10383  003C64  FFFF               	dw	65535	; assembler added errata NOP
 10384                           
 10385                           ;lcd.h: 84: temp = 0xC0 + b - 1;
 10386  003C66  0100               	movlb	0	; () banked
 10387  003C68  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10388  003C6A  0FBF               	addlw	191
 10389  003C6C  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10390                           
 10391                           ;lcd.h: 85: z = temp >> 4;
 10392  003C6E  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10393  003C70  0B0F               	andlw	15
 10394  003C72  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10395                           
 10396                           ;lcd.h: 86: y = temp & 0x0F;
 10397  003C74  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10398  003C76  0B0F               	andlw	15
 10399  003C78  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10400                           
 10401                           ; BSR set to: 0
 10402                           ;lcd.h: 87: Lcd_Cmd(z);
 10403  003C7A  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10404  003C7C  EC50  F036         	call	_Lcd_Cmd
 10405                           
 10406                           ;lcd.h: 88: Lcd_Cmd(y);
 10407  003C80  0100               	movlb	0	; () banked
 10408  003C82  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10409  003C84  EC50  F036         	call	_Lcd_Cmd
 10410                           
 10411                           ;lcd.h: 89: break;
 10412  003C88  D035               	goto	l671
 10413  003C8A  FFFF               	dw	65535	; assembler added errata NOP
 10414                           
 10415                           ;lcd.h: 91: temp = 0x94 + b;
 10416  003C8C  0100               	movlb	0	; () banked
 10417  003C8E  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10418  003C90  0F94               	addlw	148
 10419  003C92  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10420                           
 10421                           ;lcd.h: 92: z = temp >> 4;
 10422  003C94  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10423  003C96  0B0F               	andlw	15
 10424  003C98  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10425                           
 10426                           ;lcd.h: 93: y = temp & 0x0F;
 10427  003C9A  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10428  003C9C  0B0F               	andlw	15
 10429  003C9E  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10430                           
 10431                           ; BSR set to: 0
 10432                           ;lcd.h: 94: Lcd_Cmd(z);
 10433  003CA0  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10434  003CA2  EC50  F036         	call	_Lcd_Cmd
 10435                           
 10436                           ;lcd.h: 95: Lcd_Cmd(y);
 10437  003CA6  0100               	movlb	0	; () banked
 10438  003CA8  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10439  003CAA  EC50  F036         	call	_Lcd_Cmd
 10440                           
 10441                           ;lcd.h: 96: break;
 10442  003CAE  D022               	goto	l671
 10443  003CB0  FFFF               	dw	65535	; assembler added errata NOP
 10444                           
 10445                           ;lcd.h: 98: temp = 0xD4 + b;
 10446  003CB2  0100               	movlb	0	; () banked
 10447  003CB4  5183               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 10448  003CB6  0FD4               	addlw	212
 10449  003CB8  6F87               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 10450                           
 10451                           ;lcd.h: 99: z = temp >> 4;
 10452  003CBA  3987               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 10453  003CBC  0B0F               	andlw	15
 10454  003CBE  6F85               	movwf	Lcd_Set_Cursor@z& (0+255),b
 10455                           
 10456                           ;lcd.h: 100: y = temp & 0x0F;
 10457  003CC0  5187               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 10458  003CC2  0B0F               	andlw	15
 10459  003CC4  6F86               	movwf	Lcd_Set_Cursor@y& (0+255),b
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;lcd.h: 101: Lcd_Cmd(z);
 10463  003CC6  5185               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 10464  003CC8  EC50  F036         	call	_Lcd_Cmd
 10465                           
 10466                           ;lcd.h: 102: Lcd_Cmd(y);
 10467  003CCC  0100               	movlb	0	; () banked
 10468  003CCE  5186               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 10469  003CD0  EC50  F036         	call	_Lcd_Cmd
 10470                           
 10471                           ;lcd.h: 105: }
 10472                           
 10473                           ;lcd.h: 104: default:return;
 10474                           
 10475                           ;lcd.h: 103: break;
 10476  003CD4  D00F               	goto	l671
 10477  003CD6                     l669:
 10478  003CD6  FFFF               	dw	65535	; assembler added errata NOP
 10479  003CD8  0100               	movlb	0	; () banked
 10480  003CDA  5184               	movf	Lcd_Set_Cursor@a& (0+255),w,b
 10481                           
 10482                           ; Switch size 1, requested type "space"
 10483                           ; Number of cases is 4, Range of values is 1 to 4
 10484                           ; switch strategies available:
 10485                           ; Name         Instructions Cycles
 10486                           ; simple_byte           13     7 (average)
 10487                           ;	Chosen strategy is simple_byte
 10488  003CDC  0A01               	xorlw	1	; case 1
 10489  003CDE  B4D8               	btfsc	status,2,c
 10490  003CE0  D7AE               	goto	l670
 10491  003CE2  0A03               	xorlw	3	; case 2
 10492  003CE4  B4D8               	btfsc	status,2,c
 10493  003CE6  D7BE               	goto	l672
 10494  003CE8  0A01               	xorlw	1	; case 3
 10495  003CEA  B4D8               	btfsc	status,2,c
 10496  003CEC  D7CE               	goto	l673
 10497  003CEE  0A07               	xorlw	7	; case 4
 10498  003CF0  B4D8               	btfsc	status,2,c
 10499  003CF2  D7DE               	goto	l674
 10500  003CF4                     l671:
 10501  003CF4  FFFF               	dw	65535	; assembler added errata NOP
 10502                           
 10503                           ; BSR set to: 0
 10504  003CF6  0012               	return		;funcret
 10505  003CF8  FFFF               	dw	65535	; errata NOP
 10506  003CFA                     __end_of_Lcd_Set_Cursor:
 10507                           	opt stack 0
 10508                           tblptru	equ	0xFF8
 10509                           tblptrh	equ	0xFF7
 10510                           tblptrl	equ	0xFF6
 10511                           tablat	equ	0xFF5
 10512                           prodh	equ	0xFF4
 10513                           prodl	equ	0xFF3
 10514                           intcon	equ	0xFF2
 10515                           postinc0	equ	0xFEE
 10516                           wreg	equ	0xFE8
 10517                           postdec1	equ	0xFE5
 10518                           fsr1l	equ	0xFE1
 10519                           indf2	equ	0xFDF
 10520                           postinc2	equ	0xFDE
 10521                           fsr2h	equ	0xFDA
 10522                           fsr2l	equ	0xFD9
 10523                           status	equ	0xFD8
 10524                           
 10525 ;; *************** function _ajusteSP_Bombas *****************
 10526 ;; Defined at:
 10527 ;;		line 7 in file "tela_CONFIG_PRESSAO.h"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;		None
 10530 ;; Auto vars:     Size  Location     Type
 10531 ;;		None
 10532 ;; Return value:  Size  Location     Type
 10533 ;;                  1    wreg      void 
 10534 ;; Registers used:
 10535 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10536 ;; Tracked objects:
 10537 ;;		On entry : 0/0
 10538 ;;		On exit  : 0/0
 10539 ;;		Unchanged: 0/0
 10540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10541 ;;      Params:         0       0       0       0       0       0       0
 10542 ;;      Locals:         0       2       0       0       0       0       0
 10543 ;;      Temps:          0       0       0       0       0       0       0
 10544 ;;      Totals:         0       2       0       0       0       0       0
 10545 ;;Total ram usage:        2 bytes
 10546 ;; Hardware stack levels used:    1
 10547 ;; Hardware stack levels required when called:   10
 10548 ;; This function calls:
 10549 ;;		_blink
 10550 ;;		_btPress
 10551 ;;		_intToFloatStr
 10552 ;;		_sprintf
 10553 ;;		_writeEEPROM_ext
 10554 ;; This function is called by:
 10555 ;;		_main
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           	psect	text28
 10560  001976                     __ptext28:
 10561                           	opt stack 0
 10562  001976                     _ajusteSP_Bombas:
 10563                           	opt stack 0
 10564  001976  FFFF               	dw	65535	; assembler added errata NOP
 10565                           
 10566                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10567                           
 10568                           ;incstack = 0
 10569  001978  0100               	movlb	0	; () banked
 10570  00197A  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 10571  00197C  EC1F  F03C         	call	_intToFloatStr
 10572  001980  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2383
 10573  001984  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2383+1
 10574                           
 10575                           ;tela_CONFIG_PRESSAO.h: 9: sprintf(line1, "GERAL : %s", intToFloatStr(sp_pressao_rede));
 10576  001988  0E80               	movlw	low _line1
 10577  00198A  0100               	movlb	0	; () banked
 10578  00198C  6FA1               	movwf	sprintf@wh& (0+255),b
 10579  00198E  0E01               	movlw	high _line1
 10580  001990  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10581  001992  0E36               	movlw	low STR_106
 10582  001994  6FA3               	movwf	sprintf@f& (0+255),b
 10583  001996  0E7F               	movlw	high STR_106
 10584  001998  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10585  00199A  C0C2  F0A5         	movff	_ajusteSP_Bombas$2383,?_sprintf+4
 10586  00199E  C0C3  F0A6         	movff	_ajusteSP_Bombas$2383+1,?_sprintf+5
 10587  0019A2  ECDC  F01F         	call	_sprintf	;wreg free
 10588                           
 10589                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10590  0019A6  0100               	movlb	0	; () banked
 10591  0019A8  51E4               	movf	_sp_jockey& (0+255),w,b
 10592  0019AA  EC1F  F03C         	call	_intToFloatStr
 10593  0019AE  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2383
 10594  0019B2  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2383+1
 10595                           
 10596                           ;tela_CONFIG_PRESSAO.h: 10: sprintf(line2, "JOKEY : %s", intToFloatStr(sp_jockey));
 10597  0019B6  0E6B               	movlw	low _line2
 10598  0019B8  0100               	movlb	0	; () banked
 10599  0019BA  6FA1               	movwf	sprintf@wh& (0+255),b
 10600  0019BC  0E01               	movlw	high _line2
 10601  0019BE  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10602  0019C0  0E41               	movlw	low STR_48
 10603  0019C2  6FA3               	movwf	sprintf@f& (0+255),b
 10604  0019C4  0E7F               	movlw	high STR_48
 10605  0019C6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10606  0019C8  C0C2  F0A5         	movff	_ajusteSP_Bombas$2383,?_sprintf+4
 10607  0019CC  C0C3  F0A6         	movff	_ajusteSP_Bombas$2383+1,?_sprintf+5
 10608  0019D0  ECDC  F01F         	call	_sprintf	;wreg free
 10609                           
 10610                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10611  0019D4  0100               	movlb	0	; () banked
 10612  0019D6  51E3               	movf	_sp_principal& (0+255),w,b
 10613  0019D8  EC1F  F03C         	call	_intToFloatStr
 10614  0019DC  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2383
 10615  0019E0  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2383+1
 10616                           
 10617                           ;tela_CONFIG_PRESSAO.h: 11: sprintf(line3, "PRINCIPAL : %s", intToFloatStr(sp_principal)
      +                          );
 10618  0019E4  0E56               	movlw	low _line3
 10619  0019E6  0100               	movlb	0	; () banked
 10620  0019E8  6FA1               	movwf	sprintf@wh& (0+255),b
 10621  0019EA  0E01               	movlw	high _line3
 10622  0019EC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10623  0019EE  0E3E               	movlw	low STR_51
 10624  0019F0  6FA3               	movwf	sprintf@f& (0+255),b
 10625  0019F2  0E7E               	movlw	high STR_51
 10626  0019F4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10627  0019F6  C0C2  F0A5         	movff	_ajusteSP_Bombas$2383,?_sprintf+4
 10628  0019FA  C0C3  F0A6         	movff	_ajusteSP_Bombas$2383+1,?_sprintf+5
 10629  0019FE  ECDC  F01F         	call	_sprintf	;wreg free
 10630                           
 10631                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10632  001A02  0100               	movlb	0	; () banked
 10633  001A04  51E2               	movf	_sp_estacionaria& (0+255),w,b
 10634  001A06  EC1F  F03C         	call	_intToFloatStr
 10635  001A0A  C0B5  F0C2         	movff	?_intToFloatStr,_ajusteSP_Bombas$2383
 10636  001A0E  C0B6  F0C3         	movff	?_intToFloatStr+1,_ajusteSP_Bombas$2383+1
 10637                           
 10638                           ;tela_CONFIG_PRESSAO.h: 12: sprintf(line4, "COMBUSTAO : %s", intToFloatStr(sp_estacionar
      +                          ia));
 10639  001A12  0E41               	movlw	low _line4
 10640  001A14  0100               	movlb	0	; () banked
 10641  001A16  6FA1               	movwf	sprintf@wh& (0+255),b
 10642  001A18  0E01               	movlw	high _line4
 10643  001A1A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 10644  001A1C  0E4D               	movlw	low STR_54
 10645  001A1E  6FA3               	movwf	sprintf@f& (0+255),b
 10646  001A20  0E7E               	movlw	high STR_54
 10647  001A22  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 10648  001A24  C0C2  F0A5         	movff	_ajusteSP_Bombas$2383,?_sprintf+4
 10649  001A28  C0C3  F0A6         	movff	_ajusteSP_Bombas$2383+1,?_sprintf+5
 10650  001A2C  ECDC  F01F         	call	_sprintf	;wreg free
 10651                           
 10652                           ;tela_CONFIG_PRESSAO.h: 14: if (btPress(1)) {
 10653  001A30  0E01               	movlw	1
 10654  001A32  EC55  F03A         	call	_btPress
 10655  001A36  0900               	iorlw	0
 10656  001A38  B4D8               	btfsc	status,2,c
 10657  001A3A  D019               	goto	l899
 10658                           
 10659                           ;tela_CONFIG_PRESSAO.h: 15: writeEEPROM_ext(0, sp_jockey);
 10660  001A3C  C0E4  F08C         	movff	_sp_jockey,writeEEPROM_ext@data
 10661  001A40  0E00               	movlw	0
 10662  001A42  ECF9  F038         	call	_writeEEPROM_ext
 10663                           
 10664                           ;tela_CONFIG_PRESSAO.h: 16: writeEEPROM_ext(1, sp_principal);
 10665  001A46  C0E3  F08C         	movff	_sp_principal,writeEEPROM_ext@data
 10666  001A4A  0E01               	movlw	1
 10667  001A4C  ECF9  F038         	call	_writeEEPROM_ext
 10668                           
 10669                           ;tela_CONFIG_PRESSAO.h: 17: writeEEPROM_ext(2, sp_estacionaria);
 10670  001A50  C0E2  F08C         	movff	_sp_estacionaria,writeEEPROM_ext@data
 10671  001A54  0E02               	movlw	2
 10672  001A56  ECF9  F038         	call	_writeEEPROM_ext
 10673                           
 10674                           ;tela_CONFIG_PRESSAO.h: 18: writeEEPROM_ext(4, sp_pressao_rede);
 10675  001A5A  C0E5  F08C         	movff	_sp_pressao_rede,writeEEPROM_ext@data
 10676  001A5E  0E04               	movlw	4
 10677  001A60  ECF9  F038         	call	_writeEEPROM_ext
 10678                           
 10679                           ;tela_CONFIG_PRESSAO.h: 19: option_posi = 0;
 10680  001A64  0E00               	movlw	0
 10681  001A66  0100               	movlb	0	; () banked
 10682  001A68  6FE1               	movwf	_option_posi& (0+255),b
 10683                           
 10684                           ; BSR set to: 0
 10685                           ;tela_CONFIG_PRESSAO.h: 20: menu_posi = _menu_posi;
 10686  001A6A  C0DF  F0E0         	movff	__menu_posi,_menu_posi
 10687  001A6E                     l899:
 10688  001A6E  FFFF               	dw	65535	; assembler added errata NOP
 10689                           
 10690                           ;tela_CONFIG_PRESSAO.h: 21: }
 10691                           ;tela_CONFIG_PRESSAO.h: 23: if (btPress(4)) {
 10692                           
 10693                           ; BSR set to: 0
 10694  001A70  0E04               	movlw	4
 10695  001A72  EC55  F03A         	call	_btPress
 10696  001A76  0900               	iorlw	0
 10697  001A78  B4D8               	btfsc	status,2,c
 10698  001A7A  D097               	goto	l901
 10699                           
 10700                           ;tela_CONFIG_PRESSAO.h: 24: option_posi++;
 10701  001A7C  0100               	movlb	0	; () banked
 10702  001A7E  2BE1               	incf	_option_posi& (0+255),f,b
 10703                           
 10704                           ; BSR set to: 0
 10705                           ;tela_CONFIG_PRESSAO.h: 25: }
 10706                           ;tela_CONFIG_PRESSAO.h: 27: switch (option_posi) {
 10707  001A80  D094               	goto	l901
 10708  001A82  FFFF               	dw	65535	; assembler added errata NOP
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;tela_CONFIG_PRESSAO.h: 29: blink(line1, 8, 15);
 10712                           
 10713                           ; BSR set to: 0
 10714  001A84  0E80               	movlw	low _line1
 10715  001A86  6F80               	movwf	blink@line& (0+255),b
 10716  001A88  0E01               	movlw	high _line1
 10717  001A8A  6F81               	movwf	(blink@line+1)& (0+255),b
 10718  001A8C  0E08               	movlw	8
 10719  001A8E  6F82               	movwf	blink@start& (0+255),b
 10720  001A90  0E0F               	movlw	15
 10721  001A92  6F83               	movwf	blink@end& (0+255),b
 10722  001A94  EC35  F038         	call	_blink	;wreg free
 10723                           
 10724                           ;tela_CONFIG_PRESSAO.h: 30: if (btPress(3)) {
 10725  001A98  0E03               	movlw	3
 10726  001A9A  EC55  F03A         	call	_btPress
 10727  001A9E  0900               	iorlw	0
 10728  001AA0  B4D8               	btfsc	status,2,c
 10729  001AA2  D002               	goto	l903
 10730                           
 10731                           ;tela_CONFIG_PRESSAO.h: 31: sp_pressao_rede++;
 10732  001AA4  0100               	movlb	0	; () banked
 10733  001AA6  2BE5               	incf	_sp_pressao_rede& (0+255),f,b
 10734  001AA8                     l903:
 10735  001AA8  FFFF               	dw	65535	; assembler added errata NOP
 10736                           
 10737                           ;tela_CONFIG_PRESSAO.h: 32: }
 10738                           ;tela_CONFIG_PRESSAO.h: 33: if (btPress(2)) {
 10739                           
 10740                           ; BSR set to: 0
 10741  001AAA  0E02               	movlw	2
 10742  001AAC  EC55  F03A         	call	_btPress
 10743  001AB0  0900               	iorlw	0
 10744  001AB2  B4D8               	btfsc	status,2,c
 10745  001AB4  D002               	goto	l904
 10746                           
 10747                           ;tela_CONFIG_PRESSAO.h: 34: sp_pressao_rede--;
 10748  001AB6  0100               	movlb	0	; () banked
 10749  001AB8  07E5               	decf	_sp_pressao_rede& (0+255),f,b
 10750  001ABA                     l904:
 10751  001ABA  FFFF               	dw	65535	; assembler added errata NOP
 10752                           
 10753                           ;tela_CONFIG_PRESSAO.h: 35: }
 10754                           ;tela_CONFIG_PRESSAO.h: 36: if (sp_pressao_rede > 99) {
 10755                           
 10756                           ; BSR set to: 0
 10757  001ABC  0E63               	movlw	99
 10758  001ABE  0100               	movlb	0	; () banked
 10759  001AC0  65E5               	cpfsgt	_sp_pressao_rede& (0+255),b
 10760  001AC2  D083               	goto	l906
 10761                           
 10762                           ; BSR set to: 0
 10763                           ;tela_CONFIG_PRESSAO.h: 37: sp_pressao_rede = 0;
 10764  001AC4  0E00               	movlw	0
 10765  001AC6  6FE5               	movwf	_sp_pressao_rede& (0+255),b
 10766                           
 10767                           ; BSR set to: 0
 10768                           ;tela_CONFIG_PRESSAO.h: 38: }
 10769                           ;tela_CONFIG_PRESSAO.h: 39: break;
 10770  001AC8  D080               	goto	l906
 10771  001ACA  FFFF               	dw	65535	; assembler added errata NOP
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;tela_CONFIG_PRESSAO.h: 41: blink(line2, 8, 15);
 10775                           
 10776                           ; BSR set to: 0
 10777  001ACC  0E6B               	movlw	low _line2
 10778  001ACE  6F80               	movwf	blink@line& (0+255),b
 10779  001AD0  0E01               	movlw	high _line2
 10780  001AD2  6F81               	movwf	(blink@line+1)& (0+255),b
 10781  001AD4  0E08               	movlw	8
 10782  001AD6  6F82               	movwf	blink@start& (0+255),b
 10783  001AD8  0E0F               	movlw	15
 10784  001ADA  6F83               	movwf	blink@end& (0+255),b
 10785  001ADC  EC35  F038         	call	_blink	;wreg free
 10786                           
 10787                           ;tela_CONFIG_PRESSAO.h: 42: if (btPress(3)) {
 10788  001AE0  0E03               	movlw	3
 10789  001AE2  EC55  F03A         	call	_btPress
 10790  001AE6  0900               	iorlw	0
 10791  001AE8  B4D8               	btfsc	status,2,c
 10792  001AEA  D002               	goto	l908
 10793                           
 10794                           ;tela_CONFIG_PRESSAO.h: 43: sp_jockey++;
 10795  001AEC  0100               	movlb	0	; () banked
 10796  001AEE  2BE4               	incf	_sp_jockey& (0+255),f,b
 10797  001AF0                     l908:
 10798  001AF0  FFFF               	dw	65535	; assembler added errata NOP
 10799                           
 10800                           ;tela_CONFIG_PRESSAO.h: 44: }
 10801                           ;tela_CONFIG_PRESSAO.h: 45: if (btPress(2)) {
 10802                           
 10803                           ; BSR set to: 0
 10804  001AF2  0E02               	movlw	2
 10805  001AF4  EC55  F03A         	call	_btPress
 10806  001AF8  0900               	iorlw	0
 10807  001AFA  B4D8               	btfsc	status,2,c
 10808  001AFC  D002               	goto	l909
 10809                           
 10810                           ;tela_CONFIG_PRESSAO.h: 46: sp_jockey--;
 10811  001AFE  0100               	movlb	0	; () banked
 10812  001B00  07E4               	decf	_sp_jockey& (0+255),f,b
 10813  001B02                     l909:
 10814  001B02  FFFF               	dw	65535	; assembler added errata NOP
 10815                           
 10816                           ;tela_CONFIG_PRESSAO.h: 47: }
 10817                           ;tela_CONFIG_PRESSAO.h: 48: if (sp_jockey > 99) {
 10818                           
 10819                           ; BSR set to: 0
 10820  001B04  0E63               	movlw	99
 10821  001B06  0100               	movlb	0	; () banked
 10822  001B08  65E4               	cpfsgt	_sp_jockey& (0+255),b
 10823  001B0A  D05F               	goto	l906
 10824                           
 10825                           ; BSR set to: 0
 10826                           ;tela_CONFIG_PRESSAO.h: 49: sp_jockey = 0;
 10827  001B0C  0E00               	movlw	0
 10828  001B0E  6FE4               	movwf	_sp_jockey& (0+255),b
 10829                           
 10830                           ; BSR set to: 0
 10831                           ;tela_CONFIG_PRESSAO.h: 50: }
 10832                           ;tela_CONFIG_PRESSAO.h: 51: break;
 10833  001B10  D05C               	goto	l906
 10834  001B12  FFFF               	dw	65535	; assembler added errata NOP
 10835                           
 10836                           ; BSR set to: 0
 10837                           ;tela_CONFIG_PRESSAO.h: 53: blink(line3, 12, 18);
 10838                           
 10839                           ; BSR set to: 0
 10840  001B14  0E56               	movlw	low _line3
 10841  001B16  6F80               	movwf	blink@line& (0+255),b
 10842  001B18  0E01               	movlw	high _line3
 10843  001B1A  6F81               	movwf	(blink@line+1)& (0+255),b
 10844  001B1C  0E0C               	movlw	12
 10845  001B1E  6F82               	movwf	blink@start& (0+255),b
 10846  001B20  0E12               	movlw	18
 10847  001B22  6F83               	movwf	blink@end& (0+255),b
 10848  001B24  EC35  F038         	call	_blink	;wreg free
 10849                           
 10850                           ;tela_CONFIG_PRESSAO.h: 54: if (btPress(3)) {
 10851  001B28  0E03               	movlw	3
 10852  001B2A  EC55  F03A         	call	_btPress
 10853  001B2E  0900               	iorlw	0
 10854  001B30  B4D8               	btfsc	status,2,c
 10855  001B32  D002               	goto	l912
 10856                           
 10857                           ;tela_CONFIG_PRESSAO.h: 55: sp_principal++;
 10858  001B34  0100               	movlb	0	; () banked
 10859  001B36  2BE3               	incf	_sp_principal& (0+255),f,b
 10860  001B38                     l912:
 10861  001B38  FFFF               	dw	65535	; assembler added errata NOP
 10862                           
 10863                           ;tela_CONFIG_PRESSAO.h: 56: }
 10864                           ;tela_CONFIG_PRESSAO.h: 57: if (btPress(2)) {
 10865                           
 10866                           ; BSR set to: 0
 10867  001B3A  0E02               	movlw	2
 10868  001B3C  EC55  F03A         	call	_btPress
 10869  001B40  0900               	iorlw	0
 10870  001B42  B4D8               	btfsc	status,2,c
 10871  001B44  D002               	goto	l913
 10872                           
 10873                           ;tela_CONFIG_PRESSAO.h: 58: sp_principal--;
 10874  001B46  0100               	movlb	0	; () banked
 10875  001B48  07E3               	decf	_sp_principal& (0+255),f,b
 10876  001B4A                     l913:
 10877  001B4A  FFFF               	dw	65535	; assembler added errata NOP
 10878                           
 10879                           ;tela_CONFIG_PRESSAO.h: 59: }
 10880                           ;tela_CONFIG_PRESSAO.h: 60: if (sp_principal > 99) {
 10881                           
 10882                           ; BSR set to: 0
 10883  001B4C  0E63               	movlw	99
 10884  001B4E  0100               	movlb	0	; () banked
 10885  001B50  65E3               	cpfsgt	_sp_principal& (0+255),b
 10886  001B52  D03B               	goto	l906
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;tela_CONFIG_PRESSAO.h: 61: sp_principal = 0;
 10890  001B54  0E00               	movlw	0
 10891  001B56  6FE3               	movwf	_sp_principal& (0+255),b
 10892                           
 10893                           ; BSR set to: 0
 10894                           ;tela_CONFIG_PRESSAO.h: 62: }
 10895                           ;tela_CONFIG_PRESSAO.h: 63: break;
 10896  001B58  D038               	goto	l906
 10897  001B5A  FFFF               	dw	65535	; assembler added errata NOP
 10898                           
 10899                           ; BSR set to: 0
 10900                           ;tela_CONFIG_PRESSAO.h: 65: blink(line4, 12, 18);
 10901                           
 10902                           ; BSR set to: 0
 10903  001B5C  0E41               	movlw	low _line4
 10904  001B5E  6F80               	movwf	blink@line& (0+255),b
 10905  001B60  0E01               	movlw	high _line4
 10906  001B62  6F81               	movwf	(blink@line+1)& (0+255),b
 10907  001B64  0E0C               	movlw	12
 10908  001B66  6F82               	movwf	blink@start& (0+255),b
 10909  001B68  0E12               	movlw	18
 10910  001B6A  6F83               	movwf	blink@end& (0+255),b
 10911  001B6C  EC35  F038         	call	_blink	;wreg free
 10912                           
 10913                           ;tela_CONFIG_PRESSAO.h: 66: if (btPress(3)) {
 10914  001B70  0E03               	movlw	3
 10915  001B72  EC55  F03A         	call	_btPress
 10916  001B76  0900               	iorlw	0
 10917  001B78  B4D8               	btfsc	status,2,c
 10918  001B7A  D002               	goto	l916
 10919                           
 10920                           ;tela_CONFIG_PRESSAO.h: 67: sp_estacionaria++;
 10921  001B7C  0100               	movlb	0	; () banked
 10922  001B7E  2BE2               	incf	_sp_estacionaria& (0+255),f,b
 10923  001B80                     l916:
 10924  001B80  FFFF               	dw	65535	; assembler added errata NOP
 10925                           
 10926                           ;tela_CONFIG_PRESSAO.h: 68: }
 10927                           ;tela_CONFIG_PRESSAO.h: 69: if (btPress(2)) {
 10928                           
 10929                           ; BSR set to: 0
 10930  001B82  0E02               	movlw	2
 10931  001B84  EC55  F03A         	call	_btPress
 10932  001B88  0900               	iorlw	0
 10933  001B8A  B4D8               	btfsc	status,2,c
 10934  001B8C  D002               	goto	l917
 10935                           
 10936                           ;tela_CONFIG_PRESSAO.h: 70: sp_estacionaria--;
 10937  001B8E  0100               	movlb	0	; () banked
 10938  001B90  07E2               	decf	_sp_estacionaria& (0+255),f,b
 10939  001B92                     l917:
 10940  001B92  FFFF               	dw	65535	; assembler added errata NOP
 10941                           
 10942                           ;tela_CONFIG_PRESSAO.h: 71: }
 10943                           ;tela_CONFIG_PRESSAO.h: 72: if (sp_estacionaria > 99) {
 10944                           
 10945                           ; BSR set to: 0
 10946  001B94  0E63               	movlw	99
 10947  001B96  0100               	movlb	0	; () banked
 10948  001B98  65E2               	cpfsgt	_sp_estacionaria& (0+255),b
 10949  001B9A  D017               	goto	l906
 10950                           
 10951                           ; BSR set to: 0
 10952                           ;tela_CONFIG_PRESSAO.h: 73: sp_estacionaria = 0;
 10953  001B9C  0E00               	movlw	0
 10954  001B9E  6FE2               	movwf	_sp_estacionaria& (0+255),b
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;tela_CONFIG_PRESSAO.h: 74: }
 10958                           ;tela_CONFIG_PRESSAO.h: 75: break;
 10959  001BA0  D014               	goto	l906
 10960  001BA2  FFFF               	dw	65535	; assembler added errata NOP
 10961                           
 10962                           ; BSR set to: 0
 10963                           
 10964                           ; BSR set to: 0
 10965  001BA4  0E00               	movlw	0
 10966  001BA6  6FE1               	movwf	_option_posi& (0+255),b
 10967                           
 10968                           ; BSR set to: 0
 10969                           ;tela_CONFIG_PRESSAO.h: 78: }
 10970                           
 10971                           ;tela_CONFIG_PRESSAO.h: 77: break;
 10972  001BA8  D010               	goto	l906
 10973  001BAA                     l901:
 10974  001BAA  FFFF               	dw	65535	; assembler added errata NOP
 10975                           
 10976                           ; BSR set to: 0
 10977  001BAC  0100               	movlb	0	; () banked
 10978  001BAE  51E1               	movf	_option_posi& (0+255),w,b
 10979                           
 10980                           ; Switch size 1, requested type "space"
 10981                           ; Number of cases is 4, Range of values is 0 to 3
 10982                           ; switch strategies available:
 10983                           ; Name         Instructions Cycles
 10984                           ; simple_byte           13     7 (average)
 10985                           ;	Chosen strategy is simple_byte
 10986  001BB0  0A00               	xorlw	0	; case 0
 10987  001BB2  B4D8               	btfsc	status,2,c
 10988  001BB4  D766               	goto	l902
 10989  001BB6  0A01               	xorlw	1	; case 1
 10990  001BB8  B4D8               	btfsc	status,2,c
 10991  001BBA  D787               	goto	l907
 10992  001BBC  0A03               	xorlw	3	; case 2
 10993  001BBE  B4D8               	btfsc	status,2,c
 10994  001BC0  D7A8               	goto	l911
 10995  001BC2  0A01               	xorlw	1	; case 3
 10996  001BC4  B4D8               	btfsc	status,2,c
 10997  001BC6  D7C9               	goto	l915
 10998  001BC8  D7EC               	goto	l919
 10999  001BCA                     l906:
 11000  001BCA  FFFF               	dw	65535	; assembler added errata NOP
 11001                           
 11002                           ; BSR set to: 0
 11003                           
 11004                           ; BSR set to: 0
 11005  001BCC  0012               	return		;funcret
 11006  001BCE  FFFF               	dw	65535	; errata NOP
 11007  001BD0                     __end_of_ajusteSP_Bombas:
 11008                           	opt stack 0
 11009                           tblptru	equ	0xFF8
 11010                           tblptrh	equ	0xFF7
 11011                           tblptrl	equ	0xFF6
 11012                           tablat	equ	0xFF5
 11013                           prodh	equ	0xFF4
 11014                           prodl	equ	0xFF3
 11015                           intcon	equ	0xFF2
 11016                           postinc0	equ	0xFEE
 11017                           wreg	equ	0xFE8
 11018                           postdec1	equ	0xFE5
 11019                           fsr1l	equ	0xFE1
 11020                           indf2	equ	0xFDF
 11021                           postinc2	equ	0xFDE
 11022                           fsr2h	equ	0xFDA
 11023                           fsr2l	equ	0xFD9
 11024                           status	equ	0xFD8
 11025                           
 11026 ;; *************** function _blink *****************
 11027 ;; Defined at:
 11028 ;;		line 173 in file "lcd.h"
 11029 ;; Parameters:    Size  Location     Type
 11030 ;;  line            2    0[BANK0 ] PTR unsigned char 
 11031 ;;		 -> line3(21), line2(21), line1(21), line4(21), 
 11032 ;;  start           1    2[BANK0 ] unsigned char 
 11033 ;;  end             1    3[BANK0 ] unsigned char 
 11034 ;; Auto vars:     Size  Location     Type
 11035 ;;  i               1    4[BANK0 ] unsigned char 
 11036 ;; Return value:  Size  Location     Type
 11037 ;;                  1    wreg      void 
 11038 ;; Registers used:
 11039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11040 ;; Tracked objects:
 11041 ;;		On entry : 0/0
 11042 ;;		On exit  : 0/0
 11043 ;;		Unchanged: 0/0
 11044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11045 ;;      Params:         0       4       0       0       0       0       0
 11046 ;;      Locals:         0       1       0       0       0       0       0
 11047 ;;      Temps:          0       0       0       0       0       0       0
 11048 ;;      Totals:         0       5       0       0       0       0       0
 11049 ;;Total ram usage:        5 bytes
 11050 ;; Hardware stack levels used:    1
 11051 ;; Hardware stack levels required when called:    6
 11052 ;; This function calls:
 11053 ;;		Nothing
 11054 ;; This function is called by:
 11055 ;;		_telaPrincipal
 11056 ;;		_tela_ajusteRTC
 11057 ;;		_tela_testeBombas
 11058 ;;		_configuraTelefones
 11059 ;;		_configurarEstacionaria
 11060 ;;		_ajusteSP_Bombas
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           	psect	text29
 11065  00706A                     __ptext29:
 11066                           	opt stack 0
 11067  00706A                     _blink:
 11068                           	opt stack 0
 11069  00706A  FFFF               	dw	65535	; assembler added errata NOP
 11070                           
 11071                           ;lcd.h: 174: if (blinkk) {
 11072                           
 11073                           ; BSR set to: 0
 11074                           ;incstack = 0
 11075  00706C  5063               	movf	_blinkk,w,c
 11076  00706E  B4D8               	btfsc	status,2,c
 11077  007070  D018               	goto	u6480
 11078                           
 11079                           ;lcd.h: 175: char i = 0;
 11080  007072  0E00               	movlw	0
 11081  007074  0100               	movlb	0	; () banked
 11082  007076  6F84               	movwf	blink@i& (0+255),b
 11083                           
 11084                           ; BSR set to: 0
 11085                           ;lcd.h: 176: for (i = (--start); i < end; i++) {
 11086  007078  0782               	decf	blink@start& (0+255),f,b
 11087  00707A  C082  F084         	movff	blink@start,blink@i
 11088  00707E  D00C               	goto	l707
 11089  007080  FFFF               	dw	65535	; assembler added errata NOP
 11090                           
 11091                           ; BSR set to: 0
 11092                           ;lcd.h: 177: line[i] = ' ';
 11093                           
 11094                           ; BSR set to: 0
 11095  007082  5184               	movf	blink@i& (0+255),w,b
 11096  007084  0D01               	mullw	1
 11097  007086  50F3               	movf	prodl,w,c
 11098  007088  2580               	addwf	blink@line& (0+255),w,b
 11099  00708A  6ED9               	movwf	fsr2l,c
 11100  00708C  50F4               	movf	prodh,w,c
 11101  00708E  2181               	addwfc	(blink@line+1)& (0+255),w,b
 11102  007090  6EDA               	movwf	fsr2h,c
 11103  007092  0E20               	movlw	32
 11104  007094  6EDF               	movwf	indf2,c
 11105                           
 11106                           ; BSR set to: 0
 11107  007096  2B84               	incf	blink@i& (0+255),f,b
 11108  007098                     l707:
 11109  007098  FFFF               	dw	65535	; assembler added errata NOP
 11110                           
 11111                           ; BSR set to: 0
 11112                           
 11113                           ; BSR set to: 0
 11114  00709A  5183               	movf	blink@end& (0+255),w,b
 11115  00709C  5D84               	subwf	blink@i& (0+255),w,b
 11116  00709E  A0D8               	btfss	status,0,c
 11117  0070A0  D7EF               	goto	l708
 11118  0070A2                     u6480:
 11119  0070A2  FFFF               	dw	65535	; assembler added errata NOP
 11120                           
 11121                           ; BSR set to: 0
 11122                           
 11123                           ; BSR set to: 0
 11124  0070A4  0012               	return		;funcret
 11125  0070A6  FFFF               	dw	65535	; errata NOP
 11126  0070A8                     __end_of_blink:
 11127                           	opt stack 0
 11128                           tblptru	equ	0xFF8
 11129                           tblptrh	equ	0xFF7
 11130                           tblptrl	equ	0xFF6
 11131                           tablat	equ	0xFF5
 11132                           prodh	equ	0xFF4
 11133                           prodl	equ	0xFF3
 11134                           intcon	equ	0xFF2
 11135                           postinc0	equ	0xFEE
 11136                           wreg	equ	0xFE8
 11137                           postdec1	equ	0xFE5
 11138                           fsr1l	equ	0xFE1
 11139                           indf2	equ	0xFDF
 11140                           postinc2	equ	0xFDE
 11141                           fsr2h	equ	0xFDA
 11142                           fsr2l	equ	0xFD9
 11143                           status	equ	0xFD8
 11144                           
 11145 ;; *************** function _acaoTesteBombas *****************
 11146 ;; Defined at:
 11147 ;;		line 147 in file "controle.h"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;		None
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;  i               1   90[BANK0 ] unsigned char 
 11152 ;;  intervalo       1   89[BANK0 ] unsigned char 
 11153 ;; Return value:  Size  Location     Type
 11154 ;;                  1    wreg      void 
 11155 ;; Registers used:
 11156 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11157 ;; Tracked objects:
 11158 ;;		On entry : 0/0
 11159 ;;		On exit  : 0/0
 11160 ;;		Unchanged: 0/0
 11161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11162 ;;      Params:         0       0       0       0       0       0       0
 11163 ;;      Locals:         0      14       0       0       0       0       0
 11164 ;;      Temps:          0       5       0       0       0       0       0
 11165 ;;      Totals:         0      19       0       0       0       0       0
 11166 ;;Total ram usage:       19 bytes
 11167 ;; Hardware stack levels used:    1
 11168 ;; Hardware stack levels required when called:   10
 11169 ;; This function calls:
 11170 ;;		_btPress
 11171 ;;		_clearShiftREG
 11172 ;;		_drenarPressao
 11173 ;;		_enviaSMS
 11174 ;;		_intToFloatStr
 11175 ;;		_partidaBombaEstacionaria
 11176 ;;		_readEEPROM_ext
 11177 ;;		_salvarLOG
 11178 ;;		_sprintf
 11179 ;;		_writeEEPROM_ext
 11180 ;; This function is called by:
 11181 ;;		_main
 11182 ;; This function uses a non-reentrant model
 11183 ;;
 11184                           
 11185                           	psect	text30
 11186  00091A                     __ptext30:
 11187                           	opt stack 0
 11188  00091A                     _acaoTesteBombas:
 11189                           	opt stack 0
 11190  00091A  FFFF               	dw	65535	; assembler added errata NOP
 11191                           
 11192                           ;controle.h: 148: if (btPress(1)) {
 11193                           
 11194                           ;incstack = 0
 11195  00091C  0E01               	movlw	1
 11196  00091E  EC55  F03A         	call	_btPress
 11197  000922  0900               	iorlw	0
 11198  000924  B4D8               	btfsc	status,2,c
 11199  000926  D033               	goto	u7540
 11200                           
 11201                           ;controle.h: 149: executandoTeste = 0;
 11202  000928  0E00               	movlw	0
 11203  00092A  0100               	movlb	0	; () banked
 11204  00092C  6FF1               	movwf	_executandoTeste& (0+255),b
 11205                           
 11206                           ;controle.h: 150: gsmOcupado = 0;
 11207  00092E  0E00               	movlw	0
 11208  000930  6FF4               	movwf	_gsmOcupado& (0+255),b
 11209                           
 11210                           ;controle.h: 151: etapaTesteBombas = 0;
 11211  000932  0E00               	movlw	0
 11212  000934  6E6E               	movwf	_etapaTesteBombas,c
 11213                           
 11214                           ; BSR set to: 0
 11215                           ;controle.h: 152: unsigned char intervalo = readEEPROM_ext(6);
 11216  000936  0E06               	movlw	6
 11217  000938  EC6C  F039         	call	_readEEPROM_ext
 11218  00093C  0100               	movlb	0	; () banked
 11219  00093E  6FD9               	movwf	acaoTesteBombas@intervalo& (0+255),b
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;controle.h: 153: intervalo_teste_dia = intervalo > 0 ? intervalo : 1;
 11223  000940  51D9               	movf	acaoTesteBombas@intervalo& (0+255),w,b
 11224  000942  A4D8               	btfss	status,2,c
 11225  000944  D005               	goto	l538
 11226                           
 11227                           ; BSR set to: 0
 11228  000946  0E00               	movlw	0
 11229  000948  6FD0               	movwf	(_acaoTesteBombas$1298+1)& (0+255),b
 11230  00094A  0E01               	movlw	1
 11231  00094C  6FCF               	movwf	_acaoTesteBombas$1298& (0+255),b
 11232  00094E  D004               	goto	l540
 11233  000950                     l538:
 11234  000950  FFFF               	dw	65535	; assembler added errata NOP
 11235                           
 11236                           ; BSR set to: 0
 11237  000952  C0D9  F0CF         	movff	acaoTesteBombas@intervalo,_acaoTesteBombas$1298
 11238  000956  6BD0               	clrf	(_acaoTesteBombas$1298+1)& (0+255),b
 11239  000958                     l540:
 11240  000958  FFFF               	dw	65535	; assembler added errata NOP
 11241                           
 11242                           ; BSR set to: 0
 11243  00095A  C0CF  F0E9         	movff	_acaoTesteBombas$1298,_intervalo_teste_dia
 11244                           
 11245                           ;controle.h: 154: menu_posi = _menu_posi;
 11246  00095E  C0DF  F0E0         	movff	__menu_posi,_menu_posi
 11247                           
 11248                           ; BSR set to: 0
 11249                           ;controle.h: 155: char i = 0;
 11250  000962  0E00               	movlw	0
 11251  000964  6FDA               	movwf	acaoTesteBombas@i& (0+255),b
 11252                           
 11253                           ;controle.h: 156: for (i = 0; i < 8; i++) {
 11254  000966  0E00               	movlw	0
 11255  000968  6FDA               	movwf	acaoTesteBombas@i& (0+255),b
 11256  00096A                     l6773:
 11257  00096A  FFFF               	dw	65535	; assembler added errata NOP
 11258                           
 11259                           ; BSR set to: 0
 11260  00096C  0E07               	movlw	7
 11261  00096E  65DA               	cpfsgt	acaoTesteBombas@i& (0+255),b
 11262  000970  D001               	goto	l541
 11263  000972  D00D               	goto	u7540
 11264  000974                     l541:
 11265  000974  FFFF               	dw	65535	; assembler added errata NOP
 11266                           
 11267                           ; BSR set to: 0
 11268                           ;controle.h: 157: shift[i] = 0;
 11269                           
 11270                           ; BSR set to: 0
 11271  000976  51DA               	movf	acaoTesteBombas@i& (0+255),w,b
 11272  000978  0D01               	mullw	1
 11273  00097A  0E44               	movlw	low _shift
 11274  00097C  24F3               	addwf	prodl,w,c
 11275  00097E  6ED9               	movwf	fsr2l,c
 11276  000980  0E00               	movlw	high _shift
 11277  000982  20F4               	addwfc	prodh,w,c
 11278  000984  6EDA               	movwf	fsr2h,c
 11279  000986  0E00               	movlw	0
 11280  000988  6EDF               	movwf	indf2,c
 11281                           
 11282                           ; BSR set to: 0
 11283  00098A  2BDA               	incf	acaoTesteBombas@i& (0+255),f,b
 11284  00098C  D7EE               	goto	l6773
 11285  00098E                     u7540:
 11286  00098E  FFFF               	dw	65535	; assembler added errata NOP
 11287                           
 11288                           ;controle.h: 158: }
 11289                           ;controle.h: 159: }
 11290                           ;controle.h: 161: if (etapaTesteBombas < 10) {
 11291                           
 11292                           ; BSR set to: 0
 11293                           
 11294                           ; BSR set to: 0
 11295  000990  0E0A               	movlw	10
 11296  000992  606E               	cpfslt	_etapaTesteBombas,c
 11297  000994  D216               	goto	l544
 11298                           
 11299                           ;controle.h: 162: sprintf(&line1[3], "Aguarde... %ds", timerTesteBombas);
 11300  000996  0E83               	movlw	low (_line1+3)
 11301  000998  0100               	movlb	0	; () banked
 11302  00099A  6FA1               	movwf	sprintf@wh& (0+255),b
 11303  00099C  0E01               	movlw	high (_line1+3)
 11304  00099E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11305  0009A0  0E5C               	movlw	low STR_39
 11306  0009A2  6FA3               	movwf	sprintf@f& (0+255),b
 11307  0009A4  0E7E               	movlw	high STR_39
 11308  0009A6  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11309  0009A8  C0DB  F0A5         	movff	_timerTesteBombas,?_sprintf+4
 11310  0009AC  C0DC  F0A6         	movff	_timerTesteBombas+1,?_sprintf+5
 11311  0009B0  ECDC  F01F         	call	_sprintf	;wreg free
 11312                           
 11313                           ;controle.h: 163: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 11314  0009B4  0100               	movlb	0	; () banked
 11315  0009B6  51F9               	movf	_pressao& (0+255),w,b
 11316  0009B8  EC1F  F03C         	call	_intToFloatStr
 11317  0009BC  C0B5  F0CD         	movff	?_intToFloatStr,_acaoTesteBombas$2381
 11318  0009C0  C0B6  F0CE         	movff	?_intToFloatStr+1,_acaoTesteBombas$2381+1
 11319                           
 11320                           ;controle.h: 163: sprintf(&line2[2], "Pressao %s BAR", intToFloatStr(pressao));
 11321  0009C4  0E6D               	movlw	low (_line2+2)
 11322  0009C6  0100               	movlb	0	; () banked
 11323  0009C8  6FA1               	movwf	sprintf@wh& (0+255),b
 11324  0009CA  0E01               	movlw	high (_line2+2)
 11325  0009CC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11326  0009CE  0E11               	movlw	low STR_40
 11327  0009D0  6FA3               	movwf	sprintf@f& (0+255),b
 11328  0009D2  0E7E               	movlw	high STR_40
 11329  0009D4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11330  0009D6  C0CD  F0A5         	movff	_acaoTesteBombas$2381,?_sprintf+4
 11331  0009DA  C0CE  F0A6         	movff	_acaoTesteBombas$2381+1,?_sprintf+5
 11332  0009DE  ECDC  F01F         	call	_sprintf	;wreg free
 11333                           
 11334                           ;controle.h: 164: }
 11335                           ;controle.h: 166: switch (etapaTesteBombas) {
 11336  0009E2  D1EF               	goto	l544
 11337  0009E4  FFFF               	dw	65535	; assembler added errata NOP
 11338                           
 11339                           ;controle.h: 168: dias_restante_teste = 0;
 11340  0009E6  0E00               	movlw	0
 11341  0009E8  0100               	movlb	0	; () banked
 11342  0009EA  6FE8               	movwf	_dias_restante_teste& (0+255),b
 11343                           
 11344                           ; BSR set to: 0
 11345                           ;controle.h: 169: writeEEPROM_ext(10, dias_restante_teste);
 11346  0009EC  C0E8  F08C         	movff	_dias_restante_teste,writeEEPROM_ext@data
 11347  0009F0  0E0A               	movlw	10
 11348  0009F2  ECF9  F038         	call	_writeEEPROM_ext
 11349                           
 11350                           ;controle.h: 170: shift[2] = 1;
 11351  0009F6  0E01               	movlw	1
 11352  0009F8  6E46               	movwf	_shift+2,c
 11353                           
 11354                           ;controle.h: 171: timerTesteBombas = 30;
 11355  0009FA  0E00               	movlw	0
 11356  0009FC  0100               	movlb	0	; () banked
 11357  0009FE  6FDC               	movwf	(_timerTesteBombas+1)& (0+255),b
 11358  000A00  0E1E               	movlw	30
 11359  000A02  6FDB               	movwf	_timerTesteBombas& (0+255),b
 11360                           
 11361                           ; BSR set to: 0
 11362                           ;controle.h: 172: etapaTesteBombas = 1;
 11363  000A04  0E01               	movlw	1
 11364  000A06  6E6E               	movwf	_etapaTesteBombas,c
 11365  000A08  D026               	goto	L21
 11366  000A0A  FFFF               	dw	65535	; assembler added errata NOP
 11367                           
 11368                           ;controle.h: 176: drenarPressao();
 11369                           
 11370                           ; BSR set to: 0
 11371  000A0C  ECC6  F036         	call	_drenarPressao	;wreg free
 11372                           
 11373                           ;controle.h: 177: if (pressao <= (sp_pressao_rede - 10)) {
 11374  000A10  0EF6               	movlw	246
 11375  000A12  0100               	movlb	0	; () banked
 11376  000A14  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11377  000A16  0EFF               	movlw	255
 11378  000A18  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11379  000A1A  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 11380  000A1C  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11381  000A1E  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11382  000A20  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11383  000A22  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11384  000A24  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11385  000A26  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11386  000A28  51F9               	movf	_pressao& (0+255),w,b
 11387  000A2A  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11388  000A2C  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11389  000A2E  0A80               	xorlw	128
 11390  000A30  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11391  000A32  51FA               	movf	(_pressao+1)& (0+255),w,b
 11392  000A34  0A80               	xorlw	128
 11393  000A36  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11394  000A38  A0D8               	btfss	status,0,c
 11395  000A3A  D1ED               	goto	l597
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;controle.h: 178: shift[2] = 0;
 11399  000A3C  0E00               	movlw	0
 11400  000A3E  6E46               	movwf	_shift+2,c
 11401                           
 11402                           ;controle.h: 179: if (timerIntervaloLigarBomba == 0) {
 11403  000A40  51F5               	movf	_timerIntervaloLigarBomba& (0+255),w,b
 11404  000A42  A4D8               	btfss	status,2,c
 11405  000A44  D1E8               	goto	l597
 11406                           
 11407                           ; BSR set to: 0
 11408                           ;controle.h: 180: shift[6] = 1;
 11409  000A46  0E01               	movlw	1
 11410  000A48  6E4A               	movwf	_shift+6,c
 11411                           
 11412                           ;controle.h: 181: etapaTesteBombas = 2;
 11413  000A4A  0E02               	movlw	2
 11414  000A4C  6E6E               	movwf	_etapaTesteBombas,c
 11415                           
 11416                           ;controle.h: 182: timerTesteBombas = 50;
 11417  000A4E  0E00               	movlw	0
 11418  000A50  6FDC               	movwf	(_timerTesteBombas+1)& (0+255),b
 11419  000A52  0E32               	movlw	50
 11420  000A54  6FDB               	movwf	_timerTesteBombas& (0+255),b
 11421  000A56                     L21:
 11422  000A56  FFFF               	dw	65535	; assembler added errata NOP
 11423                           
 11424                           ;controle.h: 183: timerIntervaloLigarBomba = 5;
 11425  000A58  0E05               	movlw	5
 11426  000A5A  D02C               	goto	L22
 11427  000A5C  FFFF               	dw	65535	; assembler added errata NOP
 11428                           
 11429                           ;controle.h: 188: sprintf(line4, "Bomba Jockey...");
 11430                           
 11431                           ; BSR set to: 0
 11432  000A5E  0E41               	movlw	low _line4
 11433  000A60  0100               	movlb	0	; () banked
 11434  000A62  6FA1               	movwf	sprintf@wh& (0+255),b
 11435  000A64  0E01               	movlw	high _line4
 11436  000A66  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11437  000A68  0EF1               	movlw	low STR_41
 11438  000A6A  6FA3               	movwf	sprintf@f& (0+255),b
 11439  000A6C  0E7D               	movlw	high STR_41
 11440  000A6E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11441  000A70  ECDC  F01F         	call	_sprintf	;wreg free
 11442                           
 11443                           ;controle.h: 189: if (pressao >= sp_pressao_rede) {
 11444  000A74  0100               	movlb	0	; () banked
 11445  000A76  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 11446  000A78  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11447  000A7A  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11448  000A7C  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11449  000A7E  5DF9               	subwf	_pressao& (0+255),w,b
 11450  000A80  51FA               	movf	(_pressao+1)& (0+255),w,b
 11451  000A82  0A80               	xorlw	128
 11452  000A84  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11453  000A86  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11454  000A88  0A80               	xorlw	128
 11455  000A8A  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11456  000A8C  A0D8               	btfss	status,0,c
 11457  000A8E  D006               	goto	l551
 11458                           
 11459                           ; BSR set to: 0
 11460                           ;controle.h: 190: shift[6] = 0;
 11461  000A90  0E00               	movlw	0
 11462  000A92  6E4A               	movwf	_shift+6,c
 11463                           
 11464                           ;controle.h: 191: status_jockey = 1;
 11465  000A94  0E01               	movlw	1
 11466  000A96  6FFE               	movwf	_status_jockey& (0+255),b
 11467                           
 11468                           ;controle.h: 192: etapaTesteBombas = 3;
 11469  000A98  0E03               	movlw	3
 11470  000A9A  6E6E               	movwf	_etapaTesteBombas,c
 11471  000A9C                     l551:
 11472  000A9C  FFFF               	dw	65535	; assembler added errata NOP
 11473                           
 11474                           ; BSR set to: 0
 11475                           ;controle.h: 193: }
 11476                           ;controle.h: 194: if (!timerTesteBombas) {
 11477                           
 11478                           ; BSR set to: 0
 11479  000A9E  51DB               	movf	_timerTesteBombas& (0+255),w,b
 11480  000AA0  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11481  000AA2  A4D8               	btfss	status,2,c
 11482  000AA4  D1B8               	goto	l597
 11483                           
 11484                           ; BSR set to: 0
 11485                           ;controle.h: 195: status_jockey = 0;
 11486  000AA6  0E00               	movlw	0
 11487  000AA8  6FFE               	movwf	_status_jockey& (0+255),b
 11488                           
 11489                           ;controle.h: 196: etapaTesteBombas = 3;
 11490  000AAA  0E03               	movlw	3
 11491  000AAC  D054               	goto	L32
 11492  000AAE  FFFF               	dw	65535	; assembler added errata NOP
 11493                           
 11494                           ;controle.h: 201: etapaTesteBombas = 4;
 11495                           
 11496                           ; BSR set to: 0
 11497  000AB0  0E04               	movlw	4
 11498  000AB2  D059               	goto	L24
 11499  000AB4                     L22:
 11500  000AB4  FFFF               	dw	65535	; assembler added errata NOP
 11501  000AB6  6FF5               	movwf	_timerIntervaloLigarBomba& (0+255),b
 11502                           
 11503                           ; BSR set to: 0
 11504                           ;controle.h: 204: return;
 11505  000AB8  D1AE               	goto	l597
 11506  000ABA  FFFF               	dw	65535	; assembler added errata NOP
 11507                           
 11508                           ;controle.h: 206: drenarPressao();
 11509                           
 11510                           ; BSR set to: 0
 11511  000ABC  ECC6  F036         	call	_drenarPressao	;wreg free
 11512                           
 11513                           ;controle.h: 207: if (pressao <= (sp_pressao_rede - 10)) {
 11514  000AC0  0EF6               	movlw	246
 11515  000AC2  0100               	movlb	0	; () banked
 11516  000AC4  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11517  000AC6  0EFF               	movlw	255
 11518  000AC8  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11519  000ACA  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 11520  000ACC  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11521  000ACE  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11522  000AD0  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11523  000AD2  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11524  000AD4  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11525  000AD6  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11526  000AD8  51F9               	movf	_pressao& (0+255),w,b
 11527  000ADA  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11528  000ADC  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11529  000ADE  0A80               	xorlw	128
 11530  000AE0  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11531  000AE2  51FA               	movf	(_pressao+1)& (0+255),w,b
 11532  000AE4  0A80               	xorlw	128
 11533  000AE6  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11534  000AE8  A0D8               	btfss	status,0,c
 11535  000AEA  D195               	goto	l597
 11536                           
 11537                           ; BSR set to: 0
 11538                           ;controle.h: 208: shift[2] = 0;
 11539  000AEC  0E00               	movlw	0
 11540  000AEE  6E46               	movwf	_shift+2,c
 11541                           
 11542                           ;controle.h: 209: if (timerIntervaloLigarBomba == 0) {
 11543  000AF0  51F5               	movf	_timerIntervaloLigarBomba& (0+255),w,b
 11544  000AF2  A4D8               	btfss	status,2,c
 11545  000AF4  D190               	goto	l597
 11546                           
 11547                           ; BSR set to: 0
 11548                           ;controle.h: 210: shift[5] = 1;
 11549  000AF6  0E01               	movlw	1
 11550  000AF8  6E49               	movwf	_shift+5,c
 11551                           
 11552                           ;controle.h: 211: etapaTesteBombas = 5;
 11553  000AFA  0E05               	movlw	5
 11554  000AFC  6E6E               	movwf	_etapaTesteBombas,c
 11555                           
 11556                           ;controle.h: 212: timerTesteBombas = 50;
 11557  000AFE  0E00               	movlw	0
 11558  000B00  6FDC               	movwf	(_timerTesteBombas+1)& (0+255),b
 11559  000B02  0E32               	movlw	50
 11560  000B04  D0CB               	goto	L26
 11561  000B06  FFFF               	dw	65535	; assembler added errata NOP
 11562                           
 11563                           ;controle.h: 217: sprintf(line4, "Bomba Principal...");
 11564                           
 11565                           ; BSR set to: 0
 11566  000B08  0E41               	movlw	low _line4
 11567  000B0A  0100               	movlb	0	; () banked
 11568  000B0C  6FA1               	movwf	sprintf@wh& (0+255),b
 11569  000B0E  0E01               	movlw	high _line4
 11570  000B10  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11571  000B12  0EF7               	movlw	low STR_42
 11572  000B14  6FA3               	movwf	sprintf@f& (0+255),b
 11573  000B16  0E7C               	movlw	high STR_42
 11574  000B18  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11575  000B1A  ECDC  F01F         	call	_sprintf	;wreg free
 11576                           
 11577                           ;controle.h: 218: if (pressao >= sp_pressao_rede) {
 11578  000B1E  0100               	movlb	0	; () banked
 11579  000B20  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 11580  000B22  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11581  000B24  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11582  000B26  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11583  000B28  5DF9               	subwf	_pressao& (0+255),w,b
 11584  000B2A  51FA               	movf	(_pressao+1)& (0+255),w,b
 11585  000B2C  0A80               	xorlw	128
 11586  000B2E  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11587  000B30  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11588  000B32  0A80               	xorlw	128
 11589  000B34  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11590  000B36  A0D8               	btfss	status,0,c
 11591  000B38  D006               	goto	l558
 11592                           
 11593                           ; BSR set to: 0
 11594                           ;controle.h: 219: shift[5] = 0;
 11595  000B3A  0E00               	movlw	0
 11596  000B3C  6E49               	movwf	_shift+5,c
 11597                           
 11598                           ;controle.h: 220: status_principal = 1;
 11599  000B3E  0E01               	movlw	1
 11600  000B40  6FFD               	movwf	_status_principal& (0+255),b
 11601                           
 11602                           ;controle.h: 221: etapaTesteBombas = 6;
 11603  000B42  0E06               	movlw	6
 11604  000B44  6E6E               	movwf	_etapaTesteBombas,c
 11605  000B46                     l558:
 11606  000B46  FFFF               	dw	65535	; assembler added errata NOP
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;controle.h: 222: }
 11610                           ;controle.h: 223: if (!timerTesteBombas) {
 11611                           
 11612                           ; BSR set to: 0
 11613  000B48  51DB               	movf	_timerTesteBombas& (0+255),w,b
 11614  000B4A  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11615  000B4C  A4D8               	btfss	status,2,c
 11616  000B4E  D163               	goto	l597
 11617                           
 11618                           ; BSR set to: 0
 11619                           ;controle.h: 224: status_principal = 0;
 11620  000B50  0E00               	movlw	0
 11621  000B52  6FFD               	movwf	_status_principal& (0+255),b
 11622                           
 11623                           ;controle.h: 225: etapaTesteBombas = 6;
 11624  000B54  0E06               	movlw	6
 11625  000B56                     L32:
 11626  000B56  FFFF               	dw	65535	; assembler added errata NOP
 11627  000B58  6E6E               	movwf	_etapaTesteBombas,c
 11628                           
 11629                           ;controle.h: 226: timerTesteBombas = 30;
 11630  000B5A  0E00               	movlw	0
 11631  000B5C  6FDC               	movwf	(_timerTesteBombas+1)& (0+255),b
 11632  000B5E  0E1E               	movlw	30
 11633  000B60  D09D               	goto	L26
 11634  000B62  FFFF               	dw	65535	; assembler added errata NOP
 11635                           
 11636                           ;controle.h: 230: etapaTesteBombas = 7;
 11637                           
 11638                           ; BSR set to: 0
 11639  000B64  0E07               	movlw	7
 11640  000B66                     L24:
 11641  000B66  FFFF               	dw	65535	; assembler added errata NOP
 11642  000B68  6E6E               	movwf	_etapaTesteBombas,c
 11643                           
 11644                           ;controle.h: 231: shift[2] = 1;
 11645  000B6A  0E01               	movlw	1
 11646  000B6C  6E46               	movwf	_shift+2,c
 11647                           
 11648                           ;controle.h: 232: timerIntervaloLigarBomba = 5;
 11649  000B6E  0E05               	movlw	5
 11650  000B70  0100               	movlb	0	; () banked
 11651  000B72  D7A0               	goto	L22
 11652  000B74  FFFF               	dw	65535	; assembler added errata NOP
 11653                           
 11654                           ;controle.h: 235: drenarPressao();
 11655                           
 11656                           ; BSR set to: 0
 11657  000B76  ECC6  F036         	call	_drenarPressao	;wreg free
 11658                           
 11659                           ;controle.h: 236: if (pressao <= (sp_pressao_rede - 10)) {
 11660  000B7A  0EF6               	movlw	246
 11661  000B7C  0100               	movlb	0	; () banked
 11662  000B7E  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11663  000B80  0EFF               	movlw	255
 11664  000B82  6FC9               	movwf	(??_acaoTesteBombas+1)& (0+255),b
 11665  000B84  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 11666  000B86  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11667  000B88  6BCB               	clrf	(??_acaoTesteBombas+3)& (0+255),b
 11668  000B8A  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11669  000B8C  27CA               	addwf	(??_acaoTesteBombas+2)& (0+255),f,b
 11670  000B8E  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11671  000B90  23CB               	addwfc	(??_acaoTesteBombas+3)& (0+255),f,b
 11672  000B92  51F9               	movf	_pressao& (0+255),w,b
 11673  000B94  5DCA               	subwf	(??_acaoTesteBombas+2)& (0+255),w,b
 11674  000B96  51CB               	movf	(??_acaoTesteBombas+3)& (0+255),w,b
 11675  000B98  0A80               	xorlw	128
 11676  000B9A  6FCC               	movwf	(??_acaoTesteBombas+4)& (0+255),b
 11677  000B9C  51FA               	movf	(_pressao+1)& (0+255),w,b
 11678  000B9E  0A80               	xorlw	128
 11679  000BA0  59CC               	subwfb	(??_acaoTesteBombas+4)& (0+255),w,b
 11680  000BA2  A0D8               	btfss	status,0,c
 11681  000BA4  D138               	goto	l597
 11682                           
 11683                           ; BSR set to: 0
 11684                           ;controle.h: 237: shift[2] = 0;
 11685  000BA6  0E00               	movlw	0
 11686  000BA8  6E46               	movwf	_shift+2,c
 11687                           
 11688                           ;controle.h: 238: if (timerIntervaloLigarBomba == 0) {
 11689  000BAA  51F5               	movf	_timerIntervaloLigarBomba& (0+255),w,b
 11690  000BAC  A4D8               	btfss	status,2,c
 11691  000BAE  D133               	goto	l597
 11692                           
 11693                           ; BSR set to: 0
 11694                           ;controle.h: 239: etapaTesteBombas = 8;
 11695  000BB0  0E08               	movlw	8
 11696  000BB2  6E6E               	movwf	_etapaTesteBombas,c
 11697                           
 11698                           ; BSR set to: 0
 11699                           ;controle.h: 240: timerTesteBombas = tempo_limite_estacionaria;
 11700  000BB4  C0E6  F0DB         	movff	_tempo_limite_estacionaria,_timerTesteBombas
 11701  000BB8  6BDC               	clrf	(_timerTesteBombas+1)& (0+255),b
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;controle.h: 241: }
 11705                           ;controle.h: 242: }
 11706                           ;controle.h: 243: return;
 11707                           
 11708                           ; BSR set to: 0
 11709                           
 11710                           ; BSR set to: 0
 11711  000BBA  D12D               	goto	l597
 11712  000BBC  FFFF               	dw	65535	; assembler added errata NOP
 11713                           
 11714                           ;controle.h: 245: sprintf(line4, "Bomba Combustao...");
 11715                           
 11716                           ; BSR set to: 0
 11717  000BBE  0E41               	movlw	low _line4
 11718  000BC0  0100               	movlb	0	; () banked
 11719  000BC2  6FA1               	movwf	sprintf@wh& (0+255),b
 11720  000BC4  0E01               	movlw	high _line4
 11721  000BC6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11722  000BC8  0E0A               	movlw	low STR_43
 11723  000BCA  6FA3               	movwf	sprintf@f& (0+255),b
 11724  000BCC  0E7D               	movlw	high STR_43
 11725  000BCE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11726  000BD0  ECDC  F01F         	call	_sprintf	;wreg free
 11727                           
 11728                           ;controle.h: 246: partidaBombaEstacionaria(1);
 11729  000BD4  0E01               	movlw	1
 11730  000BD6  ECDD  F01C         	call	_partidaBombaEstacionaria
 11731                           
 11732                           ;controle.h: 248: if (flagEstacionariaLigada || pressao >= sp_pressao_rede) {
 11733  000BDA  0100               	movlb	0	; () banked
 11734  000BDC  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 11735  000BDE  A4D8               	btfss	status,2,c
 11736  000BE0  D00D               	goto	u7670
 11737                           
 11738                           ; BSR set to: 0
 11739  000BE2  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 11740  000BE4  6FC8               	movwf	??_acaoTesteBombas& (0+255),b
 11741  000BE6  6BC9               	clrf	(??_acaoTesteBombas+1)& (0+255),b
 11742  000BE8  51C8               	movf	??_acaoTesteBombas& (0+255),w,b
 11743  000BEA  5DF9               	subwf	_pressao& (0+255),w,b
 11744  000BEC  51FA               	movf	(_pressao+1)& (0+255),w,b
 11745  000BEE  0A80               	xorlw	128
 11746  000BF0  6FCA               	movwf	(??_acaoTesteBombas+2)& (0+255),b
 11747  000BF2  51C9               	movf	(??_acaoTesteBombas+1)& (0+255),w,b
 11748  000BF4  0A80               	xorlw	128
 11749  000BF6  59CA               	subwfb	(??_acaoTesteBombas+2)& (0+255),w,b
 11750  000BF8  A0D8               	btfss	status,0,c
 11751  000BFA  D008               	goto	l565
 11752  000BFC                     u7670:
 11753  000BFC  FFFF               	dw	65535	; assembler added errata NOP
 11754                           
 11755                           ; BSR set to: 0
 11756                           ;controle.h: 249: status_estacionaria = 1;
 11757                           
 11758                           ; BSR set to: 0
 11759  000BFE  0E01               	movlw	1
 11760  000C00  6FFC               	movwf	_status_estacionaria& (0+255),b
 11761                           
 11762                           ; BSR set to: 0
 11763                           ;controle.h: 250: timerTesteBombas = tempo_limite_teste_estacionaria;
 11764  000C02  C067  F0DB         	movff	_tempo_limite_teste_estacionaria,_timerTesteBombas
 11765  000C06  6BDC               	clrf	(_timerTesteBombas+1)& (0+255),b
 11766                           
 11767                           ;controle.h: 251: etapaTesteBombas = 9;
 11768  000C08  0E09               	movlw	9
 11769  000C0A  6E6E               	movwf	_etapaTesteBombas,c
 11770  000C0C                     l565:
 11771  000C0C  FFFF               	dw	65535	; assembler added errata NOP
 11772                           
 11773                           ; BSR set to: 0
 11774                           ;controle.h: 252: }
 11775                           ;controle.h: 253: if (status_estacionaria == 0 || !timerTesteBombas) {
 11776  000C0E  51FC               	movf	_status_estacionaria& (0+255),w,b
 11777  000C10  B4D8               	btfsc	status,2,c
 11778  000C12  D004               	goto	u7690
 11779                           
 11780                           ; BSR set to: 0
 11781  000C14  51DB               	movf	_timerTesteBombas& (0+255),w,b
 11782  000C16  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11783  000C18  A4D8               	btfss	status,2,c
 11784  000C1A  D0FD               	goto	l597
 11785  000C1C                     u7690:
 11786  000C1C  FFFF               	dw	65535	; assembler added errata NOP
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;controle.h: 254: etapaTesteBombas = 10;
 11790                           
 11791                           ; BSR set to: 0
 11792  000C1E  0E0A               	movlw	10
 11793  000C20  6E6E               	movwf	_etapaTesteBombas,c
 11794                           
 11795                           ;controle.h: 255: status_estacionaria = 0;
 11796  000C22  0E00               	movlw	0
 11797  000C24  6FFC               	movwf	_status_estacionaria& (0+255),b
 11798                           
 11799                           ; BSR set to: 0
 11800                           ;controle.h: 256: }
 11801                           ;controle.h: 257: return;
 11802                           
 11803                           ; BSR set to: 0
 11804  000C26  D0F7               	goto	l597
 11805  000C28                     l571:
 11806  000C28  FFFF               	dw	65535	; assembler added errata NOP
 11807                           
 11808                           ;controle.h: 259: sprintf(line4, "Bomba %s", !PORTAbits.RA5 ? "Ligada..." : "Religando..
      +                          .");
 11809  000C2A  AA80               	btfss	3968,5,c	;volatile
 11810  000C2C  D005               	goto	l573
 11811  000C2E  0EBF               	movlw	low STR_46
 11812  000C30  0100               	movlb	0	; () banked
 11813  000C32  6FD1               	movwf	_acaoTesteBombas$1310& (0+255),b
 11814  000C34  0E7E               	movlw	high STR_46
 11815  000C36  D005               	goto	L27
 11816  000C38                     l573:
 11817  000C38  FFFF               	dw	65535	; assembler added errata NOP
 11818                           
 11819                           ; BSR set to: 0
 11820  000C3A  0E57               	movlw	low STR_45
 11821  000C3C  0100               	movlb	0	; () banked
 11822  000C3E  6FD1               	movwf	_acaoTesteBombas$1310& (0+255),b
 11823  000C40  0E7F               	movlw	high STR_45
 11824  000C42                     L27:
 11825  000C42  FFFF               	dw	65535	; assembler added errata NOP
 11826  000C44  6FD2               	movwf	(_acaoTesteBombas$1310+1)& (0+255),b
 11827                           
 11828                           ; BSR set to: 0
 11829                           
 11830                           ; BSR set to: 0
 11831  000C46  0E41               	movlw	low _line4
 11832  000C48  6FA1               	movwf	sprintf@wh& (0+255),b
 11833  000C4A  0E01               	movlw	high _line4
 11834  000C4C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11835  000C4E  0E92               	movlw	low STR_44
 11836  000C50  6FA3               	movwf	sprintf@f& (0+255),b
 11837  000C52  0E7F               	movlw	high STR_44
 11838  000C54  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11839  000C56  C0D1  F0A5         	movff	_acaoTesteBombas$1310,?_sprintf+4
 11840  000C5A  C0D2  F0A6         	movff	_acaoTesteBombas$1310+1,?_sprintf+5
 11841  000C5E  ECDC  F01F         	call	_sprintf	;wreg free
 11842                           
 11843                           ;controle.h: 260: partidaBombaEstacionaria(1);
 11844  000C62  0E01               	movlw	1
 11845  000C64  ECDD  F01C         	call	_partidaBombaEstacionaria
 11846                           
 11847                           ;controle.h: 261: if (!timerTesteBombas || status_estacionaria == 0) {
 11848  000C68  0100               	movlb	0	; () banked
 11849  000C6A  51DB               	movf	_timerTesteBombas& (0+255),w,b
 11850  000C6C  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 11851  000C6E  B4D8               	btfsc	status,2,c
 11852  000C70  D003               	goto	u7720
 11853                           
 11854                           ; BSR set to: 0
 11855  000C72  51FC               	movf	_status_estacionaria& (0+255),w,b
 11856  000C74  A4D8               	btfss	status,2,c
 11857  000C76  D0CF               	goto	l597
 11858  000C78                     u7720:
 11859  000C78  FFFF               	dw	65535	; assembler added errata NOP
 11860                           
 11861                           ; BSR set to: 0
 11862                           ;controle.h: 262: etapaTesteBombas = 10;
 11863                           
 11864                           ; BSR set to: 0
 11865  000C7A  0E0A               	movlw	10
 11866  000C7C  6E6E               	movwf	_etapaTesteBombas,c
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;controle.h: 263: }
 11870                           ;controle.h: 264: return;
 11871                           
 11872                           ; BSR set to: 0
 11873  000C7E  D0CB               	goto	l597
 11874  000C80  FFFF               	dw	65535	; assembler added errata NOP
 11875                           
 11876                           ;controle.h: 266: salvarLOG();
 11877                           
 11878                           ; BSR set to: 0
 11879  000C82  EC7D  F01E         	call	_salvarLOG	;wreg free
 11880                           
 11881                           ;controle.h: 267: partidaBombaEstacionaria(2);
 11882  000C86  0E02               	movlw	2
 11883  000C88  ECDD  F01C         	call	_partidaBombaEstacionaria
 11884                           
 11885                           ;controle.h: 268: clearShiftREG();
 11886  000C8C  EC31  F037         	call	_clearShiftREG	;wreg free
 11887                           
 11888                           ;controle.h: 269: etapaTesteBombas = 11;
 11889  000C90  0E0B               	movlw	11
 11890  000C92  6E6E               	movwf	_etapaTesteBombas,c
 11891                           
 11892                           ;controle.h: 270: timerTesteBombas = 10;
 11893  000C94  0E00               	movlw	0
 11894  000C96  0100               	movlb	0	; () banked
 11895  000C98  6FDC               	movwf	(_timerTesteBombas+1)& (0+255),b
 11896  000C9A  0E0A               	movlw	10
 11897  000C9C                     L26:
 11898  000C9C  FFFF               	dw	65535	; assembler added errata NOP
 11899  000C9E  6FDB               	movwf	_timerTesteBombas& (0+255),b
 11900                           
 11901                           ; BSR set to: 0
 11902                           ;controle.h: 271: return;
 11903  000CA0  D0BA               	goto	l597
 11904  000CA2  FFFF               	dw	65535	; assembler added errata NOP
 11905                           
 11906                           ;controle.h: 273: sprintf(&line1[2], "Teste Concluido!");
 11907                           
 11908                           ; BSR set to: 0
 11909  000CA4  0E82               	movlw	low (_line1+2)
 11910  000CA6  0100               	movlb	0	; () banked
 11911  000CA8  6FA1               	movwf	sprintf@wh& (0+255),b
 11912  000CAA  0E01               	movlw	high (_line1+2)
 11913  000CAC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11914  000CAE  0E9D               	movlw	low STR_47
 11915  000CB0  6FA3               	movwf	sprintf@f& (0+255),b
 11916  000CB2  0E7D               	movlw	high STR_47
 11917  000CB4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11918  000CB6  ECDC  F01F         	call	_sprintf	;wreg free
 11919                           
 11920                           ;controle.h: 274: sprintf(line2, "JOKEY : %s", status_jockey == 1 ? "OK" : "ERRO");
 11921  000CBA  0100               	movlb	0	; () banked
 11922  000CBC  05FE               	decf	_status_jockey& (0+255),w,b
 11923  000CBE  B4D8               	btfsc	status,2,c
 11924  000CC0  D004               	goto	l582
 11925                           
 11926                           ; BSR set to: 0
 11927  000CC2  0EE3               	movlw	low STR_50
 11928  000CC4  6FD3               	movwf	_acaoTesteBombas$1318& (0+255),b
 11929  000CC6  0E7F               	movlw	high STR_50
 11930  000CC8  D004               	goto	L28
 11931  000CCA                     l582:
 11932  000CCA  FFFF               	dw	65535	; assembler added errata NOP
 11933                           
 11934                           ; BSR set to: 0
 11935                           
 11936                           ; BSR set to: 0
 11937  000CCC  0EFA               	movlw	low STR_5
 11938  000CCE  6FD3               	movwf	_acaoTesteBombas$1318& (0+255),b
 11939  000CD0  0E7F               	movlw	high STR_5
 11940  000CD2                     L28:
 11941  000CD2  FFFF               	dw	65535	; assembler added errata NOP
 11942  000CD4  6FD4               	movwf	(_acaoTesteBombas$1318+1)& (0+255),b
 11943                           
 11944                           ; BSR set to: 0
 11945                           
 11946                           ; BSR set to: 0
 11947  000CD6  0E6B               	movlw	low _line2
 11948  000CD8  6FA1               	movwf	sprintf@wh& (0+255),b
 11949  000CDA  0E01               	movlw	high _line2
 11950  000CDC  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11951  000CDE  0E41               	movlw	low STR_48
 11952  000CE0  6FA3               	movwf	sprintf@f& (0+255),b
 11953  000CE2  0E7F               	movlw	high STR_48
 11954  000CE4  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11955  000CE6  C0D3  F0A5         	movff	_acaoTesteBombas$1318,?_sprintf+4
 11956  000CEA  C0D4  F0A6         	movff	_acaoTesteBombas$1318+1,?_sprintf+5
 11957  000CEE  ECDC  F01F         	call	_sprintf	;wreg free
 11958                           
 11959                           ;controle.h: 275: sprintf(line3, "PRINCIPAL : %s", status_principal == 1 ? "OK" : "ERRO"
      +                          );
 11960  000CF2  0100               	movlb	0	; () banked
 11961  000CF4  05FD               	decf	_status_principal& (0+255),w,b
 11962  000CF6  B4D8               	btfsc	status,2,c
 11963  000CF8  D004               	goto	l586
 11964                           
 11965                           ; BSR set to: 0
 11966  000CFA  0EE3               	movlw	low STR_50
 11967  000CFC  6FD5               	movwf	_acaoTesteBombas$1323& (0+255),b
 11968  000CFE  0E7F               	movlw	high STR_50
 11969  000D00  D004               	goto	L29
 11970  000D02                     l586:
 11971  000D02  FFFF               	dw	65535	; assembler added errata NOP
 11972                           
 11973                           ; BSR set to: 0
 11974                           
 11975                           ; BSR set to: 0
 11976  000D04  0EFA               	movlw	low STR_5
 11977  000D06  6FD5               	movwf	_acaoTesteBombas$1323& (0+255),b
 11978  000D08  0E7F               	movlw	high STR_5
 11979  000D0A                     L29:
 11980  000D0A  FFFF               	dw	65535	; assembler added errata NOP
 11981  000D0C  6FD6               	movwf	(_acaoTesteBombas$1323+1)& (0+255),b
 11982                           
 11983                           ; BSR set to: 0
 11984                           
 11985                           ; BSR set to: 0
 11986  000D0E  0E56               	movlw	low _line3
 11987  000D10  6FA1               	movwf	sprintf@wh& (0+255),b
 11988  000D12  0E01               	movlw	high _line3
 11989  000D14  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 11990  000D16  0E3E               	movlw	low STR_51
 11991  000D18  6FA3               	movwf	sprintf@f& (0+255),b
 11992  000D1A  0E7E               	movlw	high STR_51
 11993  000D1C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 11994  000D1E  C0D5  F0A5         	movff	_acaoTesteBombas$1323,?_sprintf+4
 11995  000D22  C0D6  F0A6         	movff	_acaoTesteBombas$1323+1,?_sprintf+5
 11996  000D26  ECDC  F01F         	call	_sprintf	;wreg free
 11997                           
 11998                           ;controle.h: 276: sprintf(line4, "COMBUSTAO : %s", status_estacionaria == 1 ? "OK" : "ER
      +                          RO");
 11999  000D2A  0100               	movlb	0	; () banked
 12000  000D2C  05FC               	decf	_status_estacionaria& (0+255),w,b
 12001  000D2E  B4D8               	btfsc	status,2,c
 12002  000D30  D004               	goto	l590
 12003                           
 12004                           ; BSR set to: 0
 12005  000D32  0EE3               	movlw	low STR_50
 12006  000D34  6FD7               	movwf	_acaoTesteBombas$1328& (0+255),b
 12007  000D36  0E7F               	movlw	high STR_50
 12008  000D38  D004               	goto	L30
 12009  000D3A                     l590:
 12010  000D3A  FFFF               	dw	65535	; assembler added errata NOP
 12011                           
 12012                           ; BSR set to: 0
 12013                           
 12014                           ; BSR set to: 0
 12015  000D3C  0EFA               	movlw	low STR_5
 12016  000D3E  6FD7               	movwf	_acaoTesteBombas$1328& (0+255),b
 12017  000D40  0E7F               	movlw	high STR_5
 12018  000D42                     L30:
 12019  000D42  FFFF               	dw	65535	; assembler added errata NOP
 12020  000D44  6FD8               	movwf	(_acaoTesteBombas$1328+1)& (0+255),b
 12021                           
 12022                           ; BSR set to: 0
 12023                           
 12024                           ; BSR set to: 0
 12025  000D46  0E41               	movlw	low _line4
 12026  000D48  6FA1               	movwf	sprintf@wh& (0+255),b
 12027  000D4A  0E01               	movlw	high _line4
 12028  000D4C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12029  000D4E  0E4D               	movlw	low STR_54
 12030  000D50  6FA3               	movwf	sprintf@f& (0+255),b
 12031  000D52  0E7E               	movlw	high STR_54
 12032  000D54  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12033  000D56  C0D7  F0A5         	movff	_acaoTesteBombas$1328,?_sprintf+4
 12034  000D5A  C0D8  F0A6         	movff	_acaoTesteBombas$1328+1,?_sprintf+5
 12035  000D5E  ECDC  F01F         	call	_sprintf	;wreg free
 12036                           
 12037                           ;controle.h: 277: if (!timerTesteBombas) {
 12038  000D62  0100               	movlb	0	; () banked
 12039  000D64  51DB               	movf	_timerTesteBombas& (0+255),w,b
 12040  000D66  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 12041  000D68  A4D8               	btfss	status,2,c
 12042  000D6A  D055               	goto	l597
 12043                           
 12044                           ; BSR set to: 0
 12045                           ;controle.h: 278: etapaTesteBombas = 12;
 12046  000D6C  0E0C               	movlw	12
 12047  000D6E  6E6E               	movwf	_etapaTesteBombas,c
 12048                           
 12049                           ;controle.h: 279: timerTesteBombas = 120;
 12050  000D70  0E00               	movlw	0
 12051  000D72  6FDC               	movwf	(_timerTesteBombas+1)& (0+255),b
 12052  000D74  0E78               	movlw	120
 12053  000D76  6FDB               	movwf	_timerTesteBombas& (0+255),b
 12054                           
 12055                           ;controle.h: 280: timerReenvioSMS = 0;
 12056  000D78  0E00               	movlw	0
 12057  000D7A  6FF7               	movwf	_timerReenvioSMS& (0+255),b
 12058                           
 12059                           ;controle.h: 281: gsmOcupado = 1;
 12060  000D7C  0E01               	movlw	1
 12061  000D7E  D017               	goto	L31
 12062  000D80  FFFF               	dw	65535	; assembler added errata NOP
 12063                           
 12064                           ;controle.h: 285: sprintf(&line4[2], "enviando SMS...");
 12065                           
 12066                           ; BSR set to: 0
 12067  000D82  0E43               	movlw	low (_line4+2)
 12068  000D84  0100               	movlb	0	; () banked
 12069  000D86  6FA1               	movwf	sprintf@wh& (0+255),b
 12070  000D88  0E01               	movlw	high (_line4+2)
 12071  000D8A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12072  000D8C  0EE1               	movlw	low STR_57
 12073  000D8E  6FA3               	movwf	sprintf@f& (0+255),b
 12074  000D90  0E7D               	movlw	high STR_57
 12075  000D92  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12076  000D94  ECDC  F01F         	call	_sprintf	;wreg free
 12077                           
 12078                           ;controle.h: 286: enviaSMS(2);
 12079  000D98  0E02               	movlw	2
 12080  000D9A  EC10  F00B         	call	_enviaSMS
 12081                           
 12082                           ;controle.h: 287: if (!timerTesteBombas) {
 12083  000D9E  0100               	movlb	0	; () banked
 12084  000DA0  51DB               	movf	_timerTesteBombas& (0+255),w,b
 12085  000DA2  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 12086  000DA4  A4D8               	btfss	status,2,c
 12087  000DA6  D037               	goto	l597
 12088                           
 12089                           ; BSR set to: 0
 12090                           ;controle.h: 288: menu_posi = 0;
 12091  000DA8  0E00               	movlw	0
 12092  000DAA  6FE0               	movwf	_menu_posi& (0+255),b
 12093                           
 12094                           ;controle.h: 289: gsmOcupado = 0;
 12095  000DAC  0E00               	movlw	0
 12096  000DAE                     L31:
 12097  000DAE  FFFF               	dw	65535	; assembler added errata NOP
 12098  000DB0  6FF4               	movwf	_gsmOcupado& (0+255),b
 12099                           
 12100                           ; BSR set to: 0
 12101                           ;controle.h: 290: }
 12102                           ;controle.h: 291: return;
 12103                           
 12104                           ; BSR set to: 0
 12105  000DB2  D031               	goto	l597
 12106  000DB4  FFFF               	dw	65535	; assembler added errata NOP
 12107                           
 12108                           ;controle.h: 293: etapaTesteBombas = 0;
 12109                           
 12110                           ; BSR set to: 0
 12111  000DB6  0E00               	movlw	0
 12112  000DB8  6E6E               	movwf	_etapaTesteBombas,c
 12113                           
 12114                           ;controle.h: 294: menu_posi = 0;
 12115  000DBA  0E00               	movlw	0
 12116  000DBC  0100               	movlb	0	; () banked
 12117  000DBE  6FE0               	movwf	_menu_posi& (0+255),b
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;controle.h: 296: }
 12121                           
 12122                           ; BSR set to: 0
 12123                           ;controle.h: 295: return;
 12124  000DC0  D02A               	goto	l597
 12125  000DC2                     l544:
 12126  000DC2  FFFF               	dw	65535	; assembler added errata NOP
 12127                           
 12128                           ; BSR set to: 0
 12129  000DC4  506E               	movf	_etapaTesteBombas,w,c
 12130                           
 12131                           ; Switch size 1, requested type "space"
 12132                           ; Number of cases is 13, Range of values is 0 to 12
 12133                           ; switch strategies available:
 12134                           ; Name         Instructions Cycles
 12135                           ; simple_byte           40    21 (average)
 12136                           ;	Chosen strategy is simple_byte
 12137  000DC6  0A00               	xorlw	0	; case 0
 12138  000DC8  B4D8               	btfsc	status,2,c
 12139  000DCA  D60C               	goto	l545
 12140  000DCC  0A01               	xorlw	1	; case 1
 12141  000DCE  B4D8               	btfsc	status,2,c
 12142  000DD0  D61C               	goto	l547
 12143  000DD2  0A03               	xorlw	3	; case 2
 12144  000DD4  B4D8               	btfsc	status,2,c
 12145  000DD6  D642               	goto	l550
 12146  000DD8  0A01               	xorlw	1	; case 3
 12147  000DDA  B4D8               	btfsc	status,2,c
 12148  000DDC  D668               	goto	l553
 12149  000DDE  0A07               	xorlw	7	; case 4
 12150  000DE0  B4D8               	btfsc	status,2,c
 12151  000DE2  D66B               	goto	l554
 12152  000DE4  0A01               	xorlw	1	; case 5
 12153  000DE6  B4D8               	btfsc	status,2,c
 12154  000DE8  D68E               	goto	l557
 12155  000DEA  0A03               	xorlw	3	; case 6
 12156  000DEC  B4D8               	btfsc	status,2,c
 12157  000DEE  D6B9               	goto	l560
 12158  000DF0  0A01               	xorlw	1	; case 7
 12159  000DF2  B4D8               	btfsc	status,2,c
 12160  000DF4  D6BF               	goto	l561
 12161  000DF6  0A0F               	xorlw	15	; case 8
 12162  000DF8  B4D8               	btfsc	status,2,c
 12163  000DFA  D6E0               	goto	l564
 12164  000DFC  0A01               	xorlw	1	; case 9
 12165  000DFE  B4D8               	btfsc	status,2,c
 12166  000E00  D713               	goto	l571
 12167  000E02  0A03               	xorlw	3	; case 10
 12168  000E04  B4D8               	btfsc	status,2,c
 12169  000E06  D73C               	goto	l579
 12170  000E08  0A01               	xorlw	1	; case 11
 12171  000E0A  B4D8               	btfsc	status,2,c
 12172  000E0C  D74A               	goto	l580
 12173  000E0E  0A07               	xorlw	7	; case 12
 12174  000E10  B4D8               	btfsc	status,2,c
 12175  000E12  D7B6               	goto	l594
 12176  000E14  D7CF               	goto	l596
 12177  000E16                     l597:
 12178  000E16  FFFF               	dw	65535	; assembler added errata NOP
 12179  000E18  0012               	return		;funcret
 12180  000E1A  FFFF               	dw	65535	; errata NOP
 12181  000E1C                     __end_of_acaoTesteBombas:
 12182                           	opt stack 0
 12183                           tblptru	equ	0xFF8
 12184                           tblptrh	equ	0xFF7
 12185                           tblptrl	equ	0xFF6
 12186                           tablat	equ	0xFF5
 12187                           prodh	equ	0xFF4
 12188                           prodl	equ	0xFF3
 12189                           intcon	equ	0xFF2
 12190                           postinc0	equ	0xFEE
 12191                           wreg	equ	0xFE8
 12192                           postdec1	equ	0xFE5
 12193                           fsr1l	equ	0xFE1
 12194                           indf2	equ	0xFDF
 12195                           postinc2	equ	0xFDE
 12196                           fsr2h	equ	0xFDA
 12197                           fsr2l	equ	0xFD9
 12198                           status	equ	0xFD8
 12199                           
 12200 ;; *************** function _salvarLOG *****************
 12201 ;; Defined at:
 12202 ;;		line 9 in file "logs.h"
 12203 ;; Parameters:    Size  Location     Type
 12204 ;;		None
 12205 ;; Auto vars:     Size  Location     Type
 12206 ;;  ultimoLogSal    2   15[BANK0 ] unsigned int 
 12207 ;; Return value:  Size  Location     Type
 12208 ;;                  1    wreg      void 
 12209 ;; Registers used:
 12210 ;;		wreg, status,2, status,0, cstack
 12211 ;; Tracked objects:
 12212 ;;		On entry : 0/0
 12213 ;;		On exit  : 0/0
 12214 ;;		Unchanged: 0/0
 12215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12216 ;;      Params:         0       0       0       0       0       0       0
 12217 ;;      Locals:         0       2       0       0       0       0       0
 12218 ;;      Temps:          0       1       0       0       0       0       0
 12219 ;;      Totals:         0       3       0       0       0       0       0
 12220 ;;Total ram usage:        3 bytes
 12221 ;; Hardware stack levels used:    1
 12222 ;; Hardware stack levels required when called:    9
 12223 ;; This function calls:
 12224 ;;		_readEEPROM_ext
 12225 ;;		_writeEEPROM_ext
 12226 ;; This function is called by:
 12227 ;;		_acaoTesteBombas
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           	psect	text31
 12232  003CFA                     __ptext31:
 12233                           	opt stack 0
 12234  003CFA                     _salvarLOG:
 12235                           	opt stack 0
 12236  003CFA  FFFF               	dw	65535	; assembler added errata NOP
 12237                           
 12238                           ;logs.h: 10: unsigned int ultimoLogSalvo = readEEPROM_ext(14);
 12239                           
 12240                           ;incstack = 0
 12241  003CFC  0E0E               	movlw	14
 12242  003CFE  EC6C  F039         	call	_readEEPROM_ext
 12243  003D02  0100               	movlb	0	; () banked
 12244  003D04  6F8E               	movwf	??_salvarLOG& (0+255),b
 12245  003D06  518E               	movf	??_salvarLOG& (0+255),w,b
 12246  003D08  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 12247  003D0A  6B90               	clrf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 12248                           
 12249                           ; BSR set to: 0
 12250                           ;logs.h: 11: if (ultimoLogSalvo < 60 || ultimoLogSalvo > 250) {
 12251  003D0C  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 12252  003D0E  E104               	bnz	u6240
 12253  003D10  0E3C               	movlw	60
 12254  003D12  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12255  003D14  A0D8               	btfss	status,0,c
 12256  003D16  D006               	goto	u6250
 12257  003D18                     u6240:
 12258                           
 12259                           ; BSR set to: 0
 12260  003D18  5190               	movf	(salvarLOG@ultimoLogSalvo+1)& (0+255),w,b
 12261  003D1A  E105               	bnz	l5939
 12262  003D1C  0EFB               	movlw	251
 12263  003D1E  5D8F               	subwf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12264  003D20  A0D8               	btfss	status,0,c
 12265  003D22  D005               	goto	l421
 12266  003D24                     u6250:
 12267  003D24  FFFF               	dw	65535	; assembler added errata NOP
 12268  003D26                     l5939:
 12269                           
 12270                           ; BSR set to: 0
 12271                           ;logs.h: 12: ultimoLogSalvo = 60;
 12272  003D26  0E00               	movlw	0
 12273  003D28  6F90               	movwf	(salvarLOG@ultimoLogSalvo+1)& (0+255),b
 12274  003D2A  0E3C               	movlw	60
 12275  003D2C  6F8F               	movwf	salvarLOG@ultimoLogSalvo& (0+255),b
 12276  003D2E                     l421:
 12277  003D2E  FFFF               	dw	65535	; assembler added errata NOP
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;logs.h: 13: }
 12281                           ;logs.h: 14: writeEEPROM_ext(ultimoLogSalvo, _dia);
 12282                           
 12283                           ; BSR set to: 0
 12284  003D30  C0EC  F08C         	movff	__dia,writeEEPROM_ext@data
 12285  003D34  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12286  003D36  ECF9  F038         	call	_writeEEPROM_ext
 12287                           
 12288                           ;logs.h: 15: writeEEPROM_ext(++ultimoLogSalvo, _mes);
 12289  003D3A  C0EB  F08C         	movff	__mes,writeEEPROM_ext@data
 12290  003D3E  0100               	movlb	0	; () banked
 12291  003D40  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12292  003D42  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12293  003D44  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12294  003D46  ECF9  F038         	call	_writeEEPROM_ext
 12295                           
 12296                           ;logs.h: 16: writeEEPROM_ext(++ultimoLogSalvo, _ano);
 12297  003D4A  C0EA  F08C         	movff	__ano,writeEEPROM_ext@data
 12298  003D4E  0100               	movlb	0	; () banked
 12299  003D50  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12300  003D52  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12301  003D54  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12302  003D56  ECF9  F038         	call	_writeEEPROM_ext
 12303                           
 12304                           ;logs.h: 17: writeEEPROM_ext(++ultimoLogSalvo, _hor);
 12305  003D5A  C0ED  F08C         	movff	__hor,writeEEPROM_ext@data
 12306  003D5E  0100               	movlb	0	; () banked
 12307  003D60  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12308  003D62  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12309  003D64  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12310  003D66  ECF9  F038         	call	_writeEEPROM_ext
 12311                           
 12312                           ;logs.h: 18: writeEEPROM_ext(++ultimoLogSalvo, _min);
 12313  003D6A  C0EE  F08C         	movff	__min,writeEEPROM_ext@data
 12314  003D6E  0100               	movlb	0	; () banked
 12315  003D70  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12316  003D72  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12317  003D74  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12318  003D76  ECF9  F038         	call	_writeEEPROM_ext
 12319                           
 12320                           ;logs.h: 19: writeEEPROM_ext(++ultimoLogSalvo, status_jockey);
 12321  003D7A  C0FE  F08C         	movff	_status_jockey,writeEEPROM_ext@data
 12322  003D7E  0100               	movlb	0	; () banked
 12323  003D80  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12324  003D82  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12325  003D84  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12326  003D86  ECF9  F038         	call	_writeEEPROM_ext
 12327                           
 12328                           ;logs.h: 20: writeEEPROM_ext(++ultimoLogSalvo, status_principal);
 12329  003D8A  C0FD  F08C         	movff	_status_principal,writeEEPROM_ext@data
 12330  003D8E  0100               	movlb	0	; () banked
 12331  003D90  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12332  003D92  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12333  003D94  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12334  003D96  ECF9  F038         	call	_writeEEPROM_ext
 12335                           
 12336                           ;logs.h: 21: writeEEPROM_ext(++ultimoLogSalvo, status_estacionaria);
 12337  003D9A  C0FC  F08C         	movff	_status_estacionaria,writeEEPROM_ext@data
 12338  003D9E  0100               	movlb	0	; () banked
 12339  003DA0  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12340  003DA2  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12341  003DA4  518F               	movf	salvarLOG@ultimoLogSalvo& (0+255),w,b
 12342  003DA6  ECF9  F038         	call	_writeEEPROM_ext
 12343                           
 12344                           ;logs.h: 23: writeEEPROM_ext(14, ++ultimoLogSalvo);
 12345  003DAA  0100               	movlb	0	; () banked
 12346  003DAC  4B8F               	infsnz	salvarLOG@ultimoLogSalvo& (0+255),f,b
 12347  003DAE  2B90               	incf	(salvarLOG@ultimoLogSalvo+1)& (0+255),f,b
 12348  003DB0  C08F  F08C         	movff	salvarLOG@ultimoLogSalvo,writeEEPROM_ext@data
 12349  003DB4  0E0E               	movlw	14
 12350  003DB6  ECF9  F038         	call	_writeEEPROM_ext
 12351  003DBA  0012               	return		;funcret
 12352  003DBC  FFFF               	dw	65535	; errata NOP
 12353  003DBE                     __end_of_salvarLOG:
 12354                           	opt stack 0
 12355                           tblptru	equ	0xFF8
 12356                           tblptrh	equ	0xFF7
 12357                           tblptrl	equ	0xFF6
 12358                           tablat	equ	0xFF5
 12359                           prodh	equ	0xFF4
 12360                           prodl	equ	0xFF3
 12361                           intcon	equ	0xFF2
 12362                           postinc0	equ	0xFEE
 12363                           wreg	equ	0xFE8
 12364                           postdec1	equ	0xFE5
 12365                           fsr1l	equ	0xFE1
 12366                           indf2	equ	0xFDF
 12367                           postinc2	equ	0xFDE
 12368                           fsr2h	equ	0xFDA
 12369                           fsr2l	equ	0xFD9
 12370                           status	equ	0xFD8
 12371                           
 12372 ;; *************** function _writeEEPROM_ext *****************
 12373 ;; Defined at:
 12374 ;;		line 13 in file "eeprom.h"
 12375 ;; Parameters:    Size  Location     Type
 12376 ;;  adress          1    wreg     unsigned char 
 12377 ;;  data            1   12[BANK0 ] unsigned char 
 12378 ;; Auto vars:     Size  Location     Type
 12379 ;;  adress          1   13[BANK0 ] unsigned char 
 12380 ;; Return value:  Size  Location     Type
 12381 ;;                  1    wreg      void 
 12382 ;; Registers used:
 12383 ;;		wreg, status,2, status,0, cstack
 12384 ;; Tracked objects:
 12385 ;;		On entry : 0/0
 12386 ;;		On exit  : 0/0
 12387 ;;		Unchanged: 0/0
 12388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12389 ;;      Params:         0       1       0       0       0       0       0
 12390 ;;      Locals:         0       1       0       0       0       0       0
 12391 ;;      Temps:          0       0       0       0       0       0       0
 12392 ;;      Totals:         0       2       0       0       0       0       0
 12393 ;;Total ram usage:        2 bytes
 12394 ;; Hardware stack levels used:    1
 12395 ;; Hardware stack levels required when called:    8
 12396 ;; This function calls:
 12397 ;;		_I2C_Start
 12398 ;;		_I2C_Stop
 12399 ;;		_I2C_Write
 12400 ;;		_delay
 12401 ;; This function is called by:
 12402 ;;		_salvarLOG
 12403 ;;		_verificarIntervaloTesteBombas
 12404 ;;		_acaoTesteBombas
 12405 ;;		_lerParametros
 12406 ;;		_tela_testeBombas
 12407 ;;		_configuraTelefones
 12408 ;;		_configurarEstacionaria
 12409 ;;		_ajusteSP_Bombas
 12410 ;;		_apagarLOGS
 12411 ;; This function uses a non-reentrant model
 12412 ;;
 12413                           
 12414                           	psect	text32
 12415  0071F2                     __ptext32:
 12416                           	opt stack 0
 12417  0071F2                     _writeEEPROM_ext:
 12418                           	opt stack 0
 12419  0071F2  FFFF               	dw	65535	; assembler added errata NOP
 12420                           
 12421                           ;incstack = 0
 12422                           ;writeEEPROM_ext@adress stored from wreg
 12423  0071F4  0100               	movlb	0	; () banked
 12424  0071F6  6F8D               	movwf	writeEEPROM_ext@adress& (0+255),b
 12425                           
 12426                           ;eeprom.h: 15: I2C_Start();
 12427  0071F8  EC98  F035         	call	_I2C_Start	;wreg free
 12428                           
 12429                           ;eeprom.h: 16: I2C_Write(0xA0);
 12430  0071FC  0E00               	movlw	0
 12431  0071FE  0100               	movlb	0	; () banked
 12432  007200  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12433  007202  0EA0               	movlw	160
 12434  007204  6F8A               	movwf	I2C_Write@d& (0+255),b
 12435  007206  ECB1  F035         	call	_I2C_Write	;wreg free
 12436                           
 12437                           ;eeprom.h: 18: I2C_Write(adress);
 12438  00720A  C08D  F08A         	movff	writeEEPROM_ext@adress,I2C_Write@d
 12439  00720E  0100               	movlb	0	; () banked
 12440  007210  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12441  007212  ECB1  F035         	call	_I2C_Write	;wreg free
 12442                           
 12443                           ;eeprom.h: 19: I2C_Write(data);
 12444  007216  C08C  F08A         	movff	writeEEPROM_ext@data,I2C_Write@d
 12445  00721A  0100               	movlb	0	; () banked
 12446  00721C  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12447  00721E  ECB1  F035         	call	_I2C_Write	;wreg free
 12448                           
 12449                           ;eeprom.h: 20: I2C_Stop();
 12450  007222  EC9E  F035         	call	_I2C_Stop	;wreg free
 12451                           
 12452                           ;eeprom.h: 21: delay(15);
 12453  007226  0E00               	movlw	0
 12454  007228  0100               	movlb	0	; () banked
 12455  00722A  6F81               	movwf	(delay@x+1)& (0+255),b
 12456  00722C  0E0F               	movlw	15
 12457  00722E  6F80               	movwf	delay@x& (0+255),b
 12458  007230  ECFB  F036         	call	_delay	;wreg free
 12459  007234  0012               	return		;funcret
 12460  007236  FFFF               	dw	65535	; errata NOP
 12461  007238                     __end_of_writeEEPROM_ext:
 12462                           	opt stack 0
 12463                           tblptru	equ	0xFF8
 12464                           tblptrh	equ	0xFF7
 12465                           tblptrl	equ	0xFF6
 12466                           tablat	equ	0xFF5
 12467                           prodh	equ	0xFF4
 12468                           prodl	equ	0xFF3
 12469                           intcon	equ	0xFF2
 12470                           postinc0	equ	0xFEE
 12471                           wreg	equ	0xFE8
 12472                           postdec1	equ	0xFE5
 12473                           fsr1l	equ	0xFE1
 12474                           indf2	equ	0xFDF
 12475                           postinc2	equ	0xFDE
 12476                           fsr2h	equ	0xFDA
 12477                           fsr2l	equ	0xFD9
 12478                           status	equ	0xFD8
 12479                           
 12480 ;; *************** function _readEEPROM_ext *****************
 12481 ;; Defined at:
 12482 ;;		line 26 in file "eeprom.h"
 12483 ;; Parameters:    Size  Location     Type
 12484 ;;  adress          1    wreg     unsigned char 
 12485 ;; Auto vars:     Size  Location     Type
 12486 ;;  adress          1   12[BANK0 ] unsigned char 
 12487 ;;  data            1   13[BANK0 ] unsigned char 
 12488 ;; Return value:  Size  Location     Type
 12489 ;;                  1    wreg      unsigned char 
 12490 ;; Registers used:
 12491 ;;		wreg, status,2, status,0, cstack
 12492 ;; Tracked objects:
 12493 ;;		On entry : 0/0
 12494 ;;		On exit  : 0/0
 12495 ;;		Unchanged: 0/0
 12496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12497 ;;      Params:         0       0       0       0       0       0       0
 12498 ;;      Locals:         0       2       0       0       0       0       0
 12499 ;;      Temps:          0       0       0       0       0       0       0
 12500 ;;      Totals:         0       2       0       0       0       0       0
 12501 ;;Total ram usage:        2 bytes
 12502 ;; Hardware stack levels used:    1
 12503 ;; Hardware stack levels required when called:    8
 12504 ;; This function calls:
 12505 ;;		_I2C_Read
 12506 ;;		_I2C_Restart
 12507 ;;		_I2C_Start
 12508 ;;		_I2C_Stop
 12509 ;;		_I2C_Write
 12510 ;; This function is called by:
 12511 ;;		_readEEPROM16_ext
 12512 ;;		_salvarLOG
 12513 ;;		_acaoTesteBombas
 12514 ;;		_lerParametros
 12515 ;;		_dataLoger
 12516 ;; This function uses a non-reentrant model
 12517 ;;
 12518                           
 12519                           	psect	text33
 12520  0072D8                     __ptext33:
 12521                           	opt stack 0
 12522  0072D8                     _readEEPROM_ext:
 12523                           	opt stack 0
 12524  0072D8  FFFF               	dw	65535	; assembler added errata NOP
 12525                           
 12526                           ;incstack = 0
 12527                           ;readEEPROM_ext@adress stored from wreg
 12528  0072DA  0100               	movlb	0	; () banked
 12529  0072DC  6F8C               	movwf	readEEPROM_ext@adress& (0+255),b
 12530                           
 12531                           ;eeprom.h: 27: I2C_Start();
 12532  0072DE  EC98  F035         	call	_I2C_Start	;wreg free
 12533                           
 12534                           ;eeprom.h: 28: I2C_Write(0xA0);
 12535  0072E2  0E00               	movlw	0
 12536  0072E4  0100               	movlb	0	; () banked
 12537  0072E6  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12538  0072E8  0EA0               	movlw	160
 12539  0072EA  6F8A               	movwf	I2C_Write@d& (0+255),b
 12540  0072EC  ECB1  F035         	call	_I2C_Write	;wreg free
 12541                           
 12542                           ;eeprom.h: 30: I2C_Write(adress);
 12543  0072F0  C08C  F08A         	movff	readEEPROM_ext@adress,I2C_Write@d
 12544  0072F4  0100               	movlb	0	; () banked
 12545  0072F6  6B8B               	clrf	(I2C_Write@d+1)& (0+255),b
 12546  0072F8  ECB1  F035         	call	_I2C_Write	;wreg free
 12547                           
 12548                           ;eeprom.h: 31: I2C_Restart();
 12549  0072FC  ECA4  F035         	call	_I2C_Restart	;wreg free
 12550                           
 12551                           ;eeprom.h: 32: I2C_Write(0xA1);
 12552  007300  0E00               	movlw	0
 12553  007302  0100               	movlb	0	; () banked
 12554  007304  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 12555  007306  0EA1               	movlw	161
 12556  007308  6F8A               	movwf	I2C_Write@d& (0+255),b
 12557  00730A  ECB1  F035         	call	_I2C_Write	;wreg free
 12558                           
 12559                           ;eeprom.h: 33: unsigned char data = I2C_Read(0);
 12560  00730E  0E00               	movlw	0
 12561  007310  0100               	movlb	0	; () banked
 12562  007312  6F82               	movwf	(I2C_Read@a+1)& (0+255),b
 12563  007314  0E00               	movlw	0
 12564  007316  6F81               	movwf	I2C_Read@a& (0+255),b
 12565  007318  ECA1  F037         	call	_I2C_Read	;wreg free
 12566  00731C  0100               	movlb	0	; () banked
 12567  00731E  5181               	movf	?_I2C_Read& (0+255),w,b
 12568  007320  6F8D               	movwf	readEEPROM_ext@data& (0+255),b
 12569                           
 12570                           ;eeprom.h: 34: I2C_Stop();
 12571  007322  EC9E  F035         	call	_I2C_Stop	;wreg free
 12572                           
 12573                           ;eeprom.h: 35: return data;
 12574  007326  0100               	movlb	0	; () banked
 12575  007328  518D               	movf	readEEPROM_ext@data& (0+255),w,b
 12576                           
 12577                           ; BSR set to: 0
 12578                           
 12579                           ; BSR set to: 0
 12580  00732A  0012               	return		;funcret
 12581  00732C  FFFF               	dw	65535	; errata NOP
 12582  00732E                     __end_of_readEEPROM_ext:
 12583                           	opt stack 0
 12584                           tblptru	equ	0xFF8
 12585                           tblptrh	equ	0xFF7
 12586                           tblptrl	equ	0xFF6
 12587                           tablat	equ	0xFF5
 12588                           prodh	equ	0xFF4
 12589                           prodl	equ	0xFF3
 12590                           intcon	equ	0xFF2
 12591                           postinc0	equ	0xFEE
 12592                           wreg	equ	0xFE8
 12593                           postdec1	equ	0xFE5
 12594                           fsr1l	equ	0xFE1
 12595                           indf2	equ	0xFDF
 12596                           postinc2	equ	0xFDE
 12597                           fsr2h	equ	0xFDA
 12598                           fsr2l	equ	0xFD9
 12599                           status	equ	0xFD8
 12600                           
 12601 ;; *************** function _I2C_Restart *****************
 12602 ;; Defined at:
 12603 ;;		line 31 in file "I2C.c"
 12604 ;; Parameters:    Size  Location     Type
 12605 ;;		None
 12606 ;; Auto vars:     Size  Location     Type
 12607 ;;		None
 12608 ;; Return value:  Size  Location     Type
 12609 ;;                  1    wreg      void 
 12610 ;; Registers used:
 12611 ;;		wreg, status,2, status,0, cstack
 12612 ;; Tracked objects:
 12613 ;;		On entry : 0/0
 12614 ;;		On exit  : 0/0
 12615 ;;		Unchanged: 0/0
 12616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12617 ;;      Params:         0       0       0       0       0       0       0
 12618 ;;      Locals:         0       0       0       0       0       0       0
 12619 ;;      Temps:          0       0       0       0       0       0       0
 12620 ;;      Totals:         0       0       0       0       0       0       0
 12621 ;;Total ram usage:        0 bytes
 12622 ;; Hardware stack levels used:    1
 12623 ;; Hardware stack levels required when called:    7
 12624 ;; This function calls:
 12625 ;;		_I2C_Wait
 12626 ;; This function is called by:
 12627 ;;		_getDS1307TimeDate
 12628 ;;		_readEEPROM_ext
 12629 ;;		_getDS1307Time
 12630 ;; This function uses a non-reentrant model
 12631 ;;
 12632                           
 12633                           	psect	text34
 12634  006B48                     __ptext34:
 12635                           	opt stack 0
 12636  006B48                     _I2C_Restart:
 12637                           	opt stack 0
 12638  006B48  FFFF               	dw	65535	; assembler added errata NOP
 12639                           
 12640                           ;I2C.c: 32: I2C_Wait();
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;incstack = 0
 12644  006B4A  ECE9  F035         	call	_I2C_Wait	;wreg free
 12645                           
 12646                           ;I2C.c: 33: RSEN = 1;
 12647  006B4E  82C5               	bsf	4037,1,c	;volatile
 12648  006B50  0012               	return		;funcret
 12649  006B52  FFFF               	dw	65535	; errata NOP
 12650  006B54                     __end_of_I2C_Restart:
 12651                           	opt stack 0
 12652                           tblptru	equ	0xFF8
 12653                           tblptrh	equ	0xFF7
 12654                           tblptrl	equ	0xFF6
 12655                           tablat	equ	0xFF5
 12656                           prodh	equ	0xFF4
 12657                           prodl	equ	0xFF3
 12658                           intcon	equ	0xFF2
 12659                           postinc0	equ	0xFEE
 12660                           wreg	equ	0xFE8
 12661                           postdec1	equ	0xFE5
 12662                           fsr1l	equ	0xFE1
 12663                           indf2	equ	0xFDF
 12664                           postinc2	equ	0xFDE
 12665                           fsr2h	equ	0xFDA
 12666                           fsr2l	equ	0xFD9
 12667                           status	equ	0xFD8
 12668                           
 12669 ;; *************** function _I2C_Read *****************
 12670 ;; Defined at:
 12671 ;;		line 47 in file "I2C.c"
 12672 ;; Parameters:    Size  Location     Type
 12673 ;;  a               2    1[BANK0 ] unsigned short 
 12674 ;; Auto vars:     Size  Location     Type
 12675 ;;  temp            2    3[BANK0 ] unsigned short 
 12676 ;; Return value:  Size  Location     Type
 12677 ;;                  2    1[BANK0 ] unsigned short 
 12678 ;; Registers used:
 12679 ;;		wreg, status,2, status,0, cstack
 12680 ;; Tracked objects:
 12681 ;;		On entry : 0/0
 12682 ;;		On exit  : 0/0
 12683 ;;		Unchanged: 0/0
 12684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12685 ;;      Params:         0       2       0       0       0       0       0
 12686 ;;      Locals:         0       2       0       0       0       0       0
 12687 ;;      Temps:          0       0       0       0       0       0       0
 12688 ;;      Totals:         0       4       0       0       0       0       0
 12689 ;;Total ram usage:        4 bytes
 12690 ;; Hardware stack levels used:    1
 12691 ;; Hardware stack levels required when called:    7
 12692 ;; This function calls:
 12693 ;;		_I2C_Wait
 12694 ;; This function is called by:
 12695 ;;		_getDS1307TimeDate
 12696 ;;		_readEEPROM_ext
 12697 ;;		_getDS1307Time
 12698 ;; This function uses a non-reentrant model
 12699 ;;
 12700                           
 12701                           	psect	text35
 12702  006F42                     __ptext35:
 12703                           	opt stack 0
 12704  006F42                     _I2C_Read:
 12705                           	opt stack 0
 12706  006F42  FFFF               	dw	65535	; assembler added errata NOP
 12707                           
 12708                           ;I2C.c: 48: unsigned short temp;
 12709                           ;I2C.c: 49: I2C_Wait();
 12710                           
 12711                           ;incstack = 0
 12712  006F44  ECE9  F035         	call	_I2C_Wait	;wreg free
 12713                           
 12714                           ;I2C.c: 50: RCEN = 1;
 12715  006F48  86C5               	bsf	4037,3,c	;volatile
 12716                           
 12717                           ;I2C.c: 51: I2C_Wait();
 12718  006F4A  ECE9  F035         	call	_I2C_Wait	;wreg free
 12719                           
 12720                           ;I2C.c: 52: temp = SSPBUF;
 12721  006F4E  CFC9 F083          	movff	4041,I2C_Read@temp	;volatile
 12722  006F52  0100               	movlb	0	; () banked
 12723  006F54  6B84               	clrf	(I2C_Read@temp+1)& (0+255),b
 12724                           
 12725                           ;I2C.c: 53: I2C_Wait();
 12726  006F56  ECE9  F035         	call	_I2C_Wait	;wreg free
 12727                           
 12728                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 12729  006F5A  0100               	movlb	0	; () banked
 12730  006F5C  5181               	movf	I2C_Read@a& (0+255),w,b
 12731  006F5E  1182               	iorwf	(I2C_Read@a+1)& (0+255),w,b
 12732  006F60  A4D8               	btfss	status,2,c
 12733  006F62  D002               	goto	u4940
 12734  006F64  8AC5               	bsf	4037,5,c	;volatile
 12735  006F66  D002               	goto	u4955
 12736  006F68                     u4940:
 12737  006F68  FFFF               	dw	65535	; assembler added errata NOP
 12738  006F6A  9AC5               	bcf	4037,5,c	;volatile
 12739  006F6C                     u4955:
 12740  006F6C  FFFF               	dw	65535	; assembler added errata NOP
 12741                           
 12742                           ;I2C.c: 55: ACKEN = 1;
 12743  006F6E  88C5               	bsf	4037,4,c	;volatile
 12744                           
 12745                           ;I2C.c: 56: return temp;
 12746  006F70  C083  F081         	movff	I2C_Read@temp,?_I2C_Read
 12747  006F74  C084  F082         	movff	I2C_Read@temp+1,?_I2C_Read+1
 12748  006F78  0012               	return		;funcret
 12749  006F7A  FFFF               	dw	65535	; errata NOP
 12750  006F7C                     __end_of_I2C_Read:
 12751                           	opt stack 0
 12752                           tblptru	equ	0xFF8
 12753                           tblptrh	equ	0xFF7
 12754                           tblptrl	equ	0xFF6
 12755                           tablat	equ	0xFF5
 12756                           prodh	equ	0xFF4
 12757                           prodl	equ	0xFF3
 12758                           intcon	equ	0xFF2
 12759                           postinc0	equ	0xFEE
 12760                           wreg	equ	0xFE8
 12761                           postdec1	equ	0xFE5
 12762                           fsr1l	equ	0xFE1
 12763                           indf2	equ	0xFDF
 12764                           postinc2	equ	0xFDE
 12765                           fsr2h	equ	0xFDA
 12766                           fsr2l	equ	0xFD9
 12767                           status	equ	0xFD8
 12768                           
 12769 ;; *************** function _intToFloatStr *****************
 12770 ;; Defined at:
 12771 ;;		line 48 in file "function.c"
 12772 ;; Parameters:    Size  Location     Type
 12773 ;;  valor           1    wreg     unsigned char 
 12774 ;; Auto vars:     Size  Location     Type
 12775 ;;  valor           1   63[BANK0 ] unsigned char 
 12776 ;;  conv            4   59[BANK0 ] unsigned char [4]
 12777 ;;  end             4   55[BANK0 ] unsigned char [4]
 12778 ;;  pr              2   64[BANK0 ] int 
 12779 ;; Return value:  Size  Location     Type
 12780 ;;                  2   53[BANK0 ] PTR unsigned char 
 12781 ;; Registers used:
 12782 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12783 ;; Tracked objects:
 12784 ;;		On entry : 0/0
 12785 ;;		On exit  : 0/0
 12786 ;;		Unchanged: 0/0
 12787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12788 ;;      Params:         0       2       0       0       0       0       0
 12789 ;;      Locals:         0      11       0       0       0       0       0
 12790 ;;      Temps:          0       0       0       0       0       0       0
 12791 ;;      Totals:         0      13       0       0       0       0       0
 12792 ;;Total ram usage:       13 bytes
 12793 ;; Hardware stack levels used:    1
 12794 ;; Hardware stack levels required when called:    9
 12795 ;; This function calls:
 12796 ;;		___awdiv
 12797 ;;		___awmod
 12798 ;;		_sprintf
 12799 ;; This function is called by:
 12800 ;;		_acaoTesteBombas
 12801 ;;		_telaPrincipal
 12802 ;;		_ajusteSP_Bombas
 12803 ;; This function uses a non-reentrant model
 12804 ;;
 12805                           
 12806                           	psect	text36
 12807  00783E                     __ptext36:
 12808                           	opt stack 0
 12809  00783E                     _intToFloatStr:
 12810                           	opt stack 0
 12811  00783E  FFFF               	dw	65535	; assembler added errata NOP
 12812                           
 12813                           ;incstack = 0
 12814                           ;intToFloatStr@valor stored from wreg
 12815  007840  0100               	movlb	0	; () banked
 12816  007842  6FBF               	movwf	intToFloatStr@valor& (0+255),b
 12817                           
 12818                           ;function.c: 49: int pr = valor >= 99 ? 0 : valor;
 12819  007844  0E63               	movlw	99
 12820  007846  0100               	movlb	0	; () banked
 12821  007848  61BF               	cpfslt	intToFloatStr@valor& (0+255),b
 12822  00784A  D004               	goto	l1057
 12823                           
 12824                           ; BSR set to: 0
 12825  00784C  C0BF  F0C0         	movff	intToFloatStr@valor,intToFloatStr@pr
 12826  007850  6BC1               	clrf	(intToFloatStr@pr+1)& (0+255),b
 12827  007852  D005               	goto	l1059
 12828  007854                     l1057:
 12829  007854  FFFF               	dw	65535	; assembler added errata NOP
 12830                           
 12831                           ; BSR set to: 0
 12832                           
 12833                           ; BSR set to: 0
 12834  007856  0E00               	movlw	0
 12835  007858  6FC1               	movwf	(intToFloatStr@pr+1)& (0+255),b
 12836  00785A  0E00               	movlw	0
 12837  00785C  6FC0               	movwf	intToFloatStr@pr& (0+255),b
 12838  00785E                     l1059:
 12839  00785E  FFFF               	dw	65535	; assembler added errata NOP
 12840                           
 12841                           ; BSR set to: 0
 12842                           ;function.c: 50: unsigned char conv[4] = {' ', ' ', ' ', ' '};
 12843                           
 12844                           ; BSR set to: 0
 12845  007860  C1C1  F0BB         	movff	intToFloatStr@F2544,intToFloatStr@conv
 12846  007864  C1C2  F0BC         	movff	intToFloatStr@F2544+1,intToFloatStr@conv+1
 12847  007868  C1C3  F0BD         	movff	intToFloatStr@F2544+2,intToFloatStr@conv+2
 12848  00786C  C1C4  F0BE         	movff	intToFloatStr@F2544+3,intToFloatStr@conv+3
 12849                           
 12850                           ; BSR set to: 0
 12851                           ;function.c: 51: conv[0] = (char) ((pr / 10) + 48);
 12852  007870  C0C0  F080         	movff	intToFloatStr@pr,___awdiv@dividend
 12853  007874  C0C1  F081         	movff	intToFloatStr@pr+1,___awdiv@dividend+1
 12854  007878  0E00               	movlw	0
 12855  00787A  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
 12856  00787C  0E0A               	movlw	10
 12857  00787E  6F82               	movwf	___awdiv@divisor& (0+255),b
 12858  007880  EC8F  F01F         	call	___awdiv	;wreg free
 12859  007884  0100               	movlb	0	; () banked
 12860  007886  5180               	movf	?___awdiv& (0+255),w,b
 12861  007888  0F30               	addlw	48
 12862  00788A  6FBB               	movwf	intToFloatStr@conv& (0+255),b
 12863                           
 12864                           ; BSR set to: 0
 12865                           ;function.c: 52: conv[1] = (char) '.';
 12866  00788C  0E2E               	movlw	46
 12867  00788E  6FBC               	movwf	(intToFloatStr@conv+1)& (0+255),b
 12868                           
 12869                           ;function.c: 53: conv[2] = (char) ((pr % 10) + 48);
 12870  007890  C0C0  F080         	movff	intToFloatStr@pr,___awmod@dividend
 12871  007894  C0C1  F081         	movff	intToFloatStr@pr+1,___awmod@dividend+1
 12872  007898  0E00               	movlw	0
 12873  00789A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
 12874  00789C  0E0A               	movlw	10
 12875  00789E  6F82               	movwf	___awmod@divisor& (0+255),b
 12876  0078A0  EC0A  F03B         	call	___awmod	;wreg free
 12877  0078A4  0100               	movlb	0	; () banked
 12878  0078A6  5180               	movf	?___awmod& (0+255),w,b
 12879  0078A8  0F30               	addlw	48
 12880  0078AA  6FBD               	movwf	(intToFloatStr@conv+2)& (0+255),b
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;function.c: 54: conv[3] = '\0';
 12884  0078AC  0E00               	movlw	0
 12885  0078AE  6FBE               	movwf	(intToFloatStr@conv+3)& (0+255),b
 12886                           
 12887                           ; BSR set to: 0
 12888                           ;function.c: 55: char end[4];
 12889                           ;function.c: 56: sprintf(end , conv);
 12890  0078B0  0EB7               	movlw	low intToFloatStr@end
 12891  0078B2  6FA1               	movwf	sprintf@wh& (0+255),b
 12892  0078B4  0E00               	movlw	high intToFloatStr@end
 12893  0078B6  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 12894  0078B8  0EBB               	movlw	low intToFloatStr@conv
 12895  0078BA  6FA3               	movwf	sprintf@f& (0+255),b
 12896  0078BC  0E00               	movlw	high intToFloatStr@conv
 12897  0078BE  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 12898  0078C0  ECDC  F01F         	call	_sprintf	;wreg free
 12899                           
 12900                           ;function.c: 57: return end;
 12901  0078C4  0EB7               	movlw	low intToFloatStr@end
 12902  0078C6  0100               	movlb	0	; () banked
 12903  0078C8  6FB5               	movwf	?_intToFloatStr& (0+255),b
 12904  0078CA  0E00               	movlw	high intToFloatStr@end
 12905  0078CC  6FB6               	movwf	(?_intToFloatStr+1)& (0+255),b
 12906                           
 12907                           ; BSR set to: 0
 12908                           
 12909                           ; BSR set to: 0
 12910  0078CE  0012               	return		;funcret
 12911  0078D0  FFFF               	dw	65535	; errata NOP
 12912  0078D2                     __end_of_intToFloatStr:
 12913                           	opt stack 0
 12914                           tblptru	equ	0xFF8
 12915                           tblptrh	equ	0xFF7
 12916                           tblptrl	equ	0xFF6
 12917                           tablat	equ	0xFF5
 12918                           prodh	equ	0xFF4
 12919                           prodl	equ	0xFF3
 12920                           intcon	equ	0xFF2
 12921                           postinc0	equ	0xFEE
 12922                           wreg	equ	0xFE8
 12923                           postdec1	equ	0xFE5
 12924                           fsr1l	equ	0xFE1
 12925                           indf2	equ	0xFDF
 12926                           postinc2	equ	0xFDE
 12927                           fsr2h	equ	0xFDA
 12928                           fsr2l	equ	0xFD9
 12929                           status	equ	0xFD8
 12930                           
 12931 ;; *************** function ___awmod *****************
 12932 ;; Defined at:
 12933 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 12934 ;; Parameters:    Size  Location     Type
 12935 ;;  dividend        2    0[BANK0 ] int 
 12936 ;;  divisor         2    2[BANK0 ] int 
 12937 ;; Auto vars:     Size  Location     Type
 12938 ;;  sign            1    5[BANK0 ] unsigned char 
 12939 ;;  counter         1    4[BANK0 ] unsigned char 
 12940 ;; Return value:  Size  Location     Type
 12941 ;;                  2    0[BANK0 ] int 
 12942 ;; Registers used:
 12943 ;;		wreg, status,2, status,0
 12944 ;; Tracked objects:
 12945 ;;		On entry : 0/0
 12946 ;;		On exit  : 0/0
 12947 ;;		Unchanged: 0/0
 12948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12949 ;;      Params:         0       4       0       0       0       0       0
 12950 ;;      Locals:         0       2       0       0       0       0       0
 12951 ;;      Temps:          0       0       0       0       0       0       0
 12952 ;;      Totals:         0       6       0       0       0       0       0
 12953 ;;Total ram usage:        6 bytes
 12954 ;; Hardware stack levels used:    1
 12955 ;; Hardware stack levels required when called:    6
 12956 ;; This function calls:
 12957 ;;		Nothing
 12958 ;; This function is called by:
 12959 ;;		_DECtoBCD
 12960 ;;		_intToFloatStr
 12961 ;;		_DECtoHEX
 12962 ;; This function uses a non-reentrant model
 12963 ;;
 12964                           
 12965                           	psect	text37
 12966  007614                     __ptext37:
 12967                           	opt stack 0
 12968  007614                     ___awmod:
 12969                           	opt stack 0
 12970  007614  FFFF               	dw	65535	; assembler added errata NOP
 12971                           
 12972                           ; BSR set to: 0
 12973                           ;incstack = 0
 12974  007616  0E00               	movlw	0
 12975  007618  0100               	movlb	0	; () banked
 12976  00761A  6F85               	movwf	___awmod@sign& (0+255),b
 12977                           
 12978                           ; BSR set to: 0
 12979  00761C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 12980  00761E  D006               	goto	l1341
 12981                           
 12982                           ; BSR set to: 0
 12983  007620  6D80               	negf	___awmod@dividend& (0+255),b
 12984  007622  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 12985  007624  B0D8               	btfsc	status,0,c
 12986  007626  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 12987                           
 12988                           ; BSR set to: 0
 12989  007628  0E01               	movlw	1
 12990  00762A  6F85               	movwf	___awmod@sign& (0+255),b
 12991  00762C                     l1341:
 12992  00762C  FFFF               	dw	65535	; assembler added errata NOP
 12993                           
 12994                           ; BSR set to: 0
 12995                           
 12996                           ; BSR set to: 0
 12997  00762E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12998  007630  D004               	goto	l1342
 12999                           
 13000                           ; BSR set to: 0
 13001  007632  6D82               	negf	___awmod@divisor& (0+255),b
 13002  007634  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 13003  007636  B0D8               	btfsc	status,0,c
 13004  007638  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 13005  00763A                     l1342:
 13006  00763A  FFFF               	dw	65535	; assembler added errata NOP
 13007                           
 13008                           ; BSR set to: 0
 13009                           
 13010                           ; BSR set to: 0
 13011  00763C  5182               	movf	___awmod@divisor& (0+255),w,b
 13012  00763E  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 13013  007640  B4D8               	btfsc	status,2,c
 13014  007642  D01C               	goto	l1349
 13015                           
 13016                           ; BSR set to: 0
 13017  007644  0E01               	movlw	1
 13018  007646  6F84               	movwf	___awmod@counter& (0+255),b
 13019  007648  D005               	goto	l1344
 13020  00764A  FFFF               	dw	65535	; assembler added errata NOP
 13021                           
 13022                           ; BSR set to: 0
 13023                           
 13024                           ; BSR set to: 0
 13025  00764C  90D8               	bcf	status,0,c
 13026  00764E  3782               	rlcf	___awmod@divisor& (0+255),f,b
 13027  007650  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 13028  007652  2B84               	incf	___awmod@counter& (0+255),f,b
 13029  007654                     l1344:
 13030  007654  FFFF               	dw	65535	; assembler added errata NOP
 13031                           
 13032                           ; BSR set to: 0
 13033                           
 13034                           ; BSR set to: 0
 13035  007656  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 13036  007658  D7F8               	goto	l1345
 13037  00765A                     u5580:
 13038  00765A  FFFF               	dw	65535	; assembler added errata NOP
 13039                           
 13040                           ; BSR set to: 0
 13041                           
 13042                           ; BSR set to: 0
 13043                           
 13044                           ; BSR set to: 0
 13045  00765C  5182               	movf	___awmod@divisor& (0+255),w,b
 13046  00765E  5D80               	subwf	___awmod@dividend& (0+255),w,b
 13047  007660  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 13048  007662  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 13049  007664  A0D8               	btfss	status,0,c
 13050  007666  D004               	goto	l1348
 13051                           
 13052                           ; BSR set to: 0
 13053  007668  5182               	movf	___awmod@divisor& (0+255),w,b
 13054  00766A  5F80               	subwf	___awmod@dividend& (0+255),f,b
 13055  00766C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 13056  00766E  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 13057  007670                     l1348:
 13058  007670  FFFF               	dw	65535	; assembler added errata NOP
 13059                           
 13060                           ; BSR set to: 0
 13061                           
 13062                           ; BSR set to: 0
 13063  007672  90D8               	bcf	status,0,c
 13064  007674  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 13065  007676  3382               	rrcf	___awmod@divisor& (0+255),f,b
 13066                           
 13067                           ; BSR set to: 0
 13068  007678  2F84               	decfsz	___awmod@counter& (0+255),f,b
 13069  00767A  D7EF               	goto	u5580
 13070  00767C                     l1349:
 13071  00767C  FFFF               	dw	65535	; assembler added errata NOP
 13072                           
 13073                           ; BSR set to: 0
 13074                           
 13075                           ; BSR set to: 0
 13076                           
 13077                           ; BSR set to: 0
 13078  00767E  5185               	movf	___awmod@sign& (0+255),w,b
 13079  007680  B4D8               	btfsc	status,2,c
 13080  007682  D004               	goto	l1350
 13081                           
 13082                           ; BSR set to: 0
 13083  007684  6D80               	negf	___awmod@dividend& (0+255),b
 13084  007686  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 13085  007688  B0D8               	btfsc	status,0,c
 13086  00768A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 13087  00768C                     l1350:
 13088  00768C  FFFF               	dw	65535	; assembler added errata NOP
 13089                           
 13090                           ; BSR set to: 0
 13091                           
 13092                           ; BSR set to: 0
 13093  00768E  C080  F080         	movff	___awmod@dividend,?___awmod
 13094  007692  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 13095                           
 13096                           ; BSR set to: 0
 13097                           
 13098                           ; BSR set to: 0
 13099  007696  0012               	return		;funcret
 13100  007698  FFFF               	dw	65535	; errata NOP
 13101  00769A                     __end_of___awmod:
 13102                           	opt stack 0
 13103                           tblptru	equ	0xFF8
 13104                           tblptrh	equ	0xFF7
 13105                           tblptrl	equ	0xFF6
 13106                           tablat	equ	0xFF5
 13107                           prodh	equ	0xFF4
 13108                           prodl	equ	0xFF3
 13109                           intcon	equ	0xFF2
 13110                           postinc0	equ	0xFEE
 13111                           wreg	equ	0xFE8
 13112                           postdec1	equ	0xFE5
 13113                           fsr1l	equ	0xFE1
 13114                           indf2	equ	0xFDF
 13115                           postinc2	equ	0xFDE
 13116                           fsr2h	equ	0xFDA
 13117                           fsr2l	equ	0xFD9
 13118                           status	equ	0xFD8
 13119                           
 13120 ;; *************** function ___awdiv *****************
 13121 ;; Defined at:
 13122 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 13123 ;; Parameters:    Size  Location     Type
 13124 ;;  dividend        2    0[BANK0 ] int 
 13125 ;;  divisor         2    2[BANK0 ] int 
 13126 ;; Auto vars:     Size  Location     Type
 13127 ;;  quotient        2    6[BANK0 ] int 
 13128 ;;  sign            1    5[BANK0 ] unsigned char 
 13129 ;;  counter         1    4[BANK0 ] unsigned char 
 13130 ;; Return value:  Size  Location     Type
 13131 ;;                  2    0[BANK0 ] int 
 13132 ;; Registers used:
 13133 ;;		wreg, status,2, status,0
 13134 ;; Tracked objects:
 13135 ;;		On entry : 0/0
 13136 ;;		On exit  : 0/0
 13137 ;;		Unchanged: 0/0
 13138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13139 ;;      Params:         0       4       0       0       0       0       0
 13140 ;;      Locals:         0       4       0       0       0       0       0
 13141 ;;      Temps:          0       0       0       0       0       0       0
 13142 ;;      Totals:         0       8       0       0       0       0       0
 13143 ;;Total ram usage:        8 bytes
 13144 ;; Hardware stack levels used:    1
 13145 ;; Hardware stack levels required when called:    6
 13146 ;; This function calls:
 13147 ;;		Nothing
 13148 ;; This function is called by:
 13149 ;;		_dataLoger
 13150 ;;		_DECtoBCD
 13151 ;;		_intToFloatStr
 13152 ;;		_DECtoHEX
 13153 ;; This function uses a non-reentrant model
 13154 ;;
 13155                           
 13156                           	psect	text38
 13157  003F1E                     __ptext38:
 13158                           	opt stack 0
 13159  003F1E                     ___awdiv:
 13160                           	opt stack 0
 13161  003F1E  FFFF               	dw	65535	; assembler added errata NOP
 13162                           
 13163                           ; BSR set to: 0
 13164                           ;incstack = 0
 13165  003F20  0E00               	movlw	0
 13166  003F22  0100               	movlb	0	; () banked
 13167  003F24  6F85               	movwf	___awdiv@sign& (0+255),b
 13168                           
 13169                           ; BSR set to: 0
 13170  003F26  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 13171  003F28  D006               	goto	l1328
 13172                           
 13173                           ; BSR set to: 0
 13174  003F2A  6D82               	negf	___awdiv@divisor& (0+255),b
 13175  003F2C  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
 13176  003F2E  B0D8               	btfsc	status,0,c
 13177  003F30  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
 13178                           
 13179                           ; BSR set to: 0
 13180  003F32  0E01               	movlw	1
 13181  003F34  6F85               	movwf	___awdiv@sign& (0+255),b
 13182  003F36                     l1328:
 13183  003F36  FFFF               	dw	65535	; assembler added errata NOP
 13184                           
 13185                           ; BSR set to: 0
 13186                           
 13187                           ; BSR set to: 0
 13188  003F38  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 13189  003F3A  D006               	goto	l1329
 13190                           
 13191                           ; BSR set to: 0
 13192  003F3C  6D80               	negf	___awdiv@dividend& (0+255),b
 13193  003F3E  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
 13194  003F40  B0D8               	btfsc	status,0,c
 13195  003F42  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
 13196                           
 13197                           ; BSR set to: 0
 13198  003F44  0E01               	movlw	1
 13199  003F46  1B85               	xorwf	___awdiv@sign& (0+255),f,b
 13200  003F48                     l1329:
 13201  003F48  FFFF               	dw	65535	; assembler added errata NOP
 13202                           
 13203                           ; BSR set to: 0
 13204                           
 13205                           ; BSR set to: 0
 13206  003F4A  0E00               	movlw	0
 13207  003F4C  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
 13208  003F4E  0E00               	movlw	0
 13209  003F50  6F86               	movwf	___awdiv@quotient& (0+255),b
 13210                           
 13211                           ; BSR set to: 0
 13212  003F52  5182               	movf	___awdiv@divisor& (0+255),w,b
 13213  003F54  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 13214  003F56  B4D8               	btfsc	status,2,c
 13215  003F58  D020               	goto	l1336
 13216                           
 13217                           ; BSR set to: 0
 13218  003F5A  0E01               	movlw	1
 13219  003F5C  6F84               	movwf	___awdiv@counter& (0+255),b
 13220  003F5E  D005               	goto	l1331
 13221  003F60  FFFF               	dw	65535	; assembler added errata NOP
 13222                           
 13223                           ; BSR set to: 0
 13224                           
 13225                           ; BSR set to: 0
 13226  003F62  90D8               	bcf	status,0,c
 13227  003F64  3782               	rlcf	___awdiv@divisor& (0+255),f,b
 13228  003F66  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 13229  003F68  2B84               	incf	___awdiv@counter& (0+255),f,b
 13230  003F6A                     l1331:
 13231  003F6A  FFFF               	dw	65535	; assembler added errata NOP
 13232                           
 13233                           ; BSR set to: 0
 13234                           
 13235                           ; BSR set to: 0
 13236  003F6C  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 13237  003F6E  D7F8               	goto	l1332
 13238  003F70                     u5520:
 13239  003F70  FFFF               	dw	65535	; assembler added errata NOP
 13240                           
 13241                           ; BSR set to: 0
 13242                           
 13243                           ; BSR set to: 0
 13244                           
 13245                           ; BSR set to: 0
 13246  003F72  90D8               	bcf	status,0,c
 13247  003F74  3786               	rlcf	___awdiv@quotient& (0+255),f,b
 13248  003F76  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 13249                           
 13250                           ; BSR set to: 0
 13251  003F78  5182               	movf	___awdiv@divisor& (0+255),w,b
 13252  003F7A  5D80               	subwf	___awdiv@dividend& (0+255),w,b
 13253  003F7C  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 13254  003F7E  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 13255  003F80  A0D8               	btfss	status,0,c
 13256  003F82  D005               	goto	l1335
 13257                           
 13258                           ; BSR set to: 0
 13259  003F84  5182               	movf	___awdiv@divisor& (0+255),w,b
 13260  003F86  5F80               	subwf	___awdiv@dividend& (0+255),f,b
 13261  003F88  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
 13262  003F8A  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 13263                           
 13264                           ; BSR set to: 0
 13265  003F8C  8186               	bsf	___awdiv@quotient& (0+255),0,b
 13266  003F8E                     l1335:
 13267  003F8E  FFFF               	dw	65535	; assembler added errata NOP
 13268                           
 13269                           ; BSR set to: 0
 13270                           
 13271                           ; BSR set to: 0
 13272  003F90  90D8               	bcf	status,0,c
 13273  003F92  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 13274  003F94  3382               	rrcf	___awdiv@divisor& (0+255),f,b
 13275                           
 13276                           ; BSR set to: 0
 13277  003F96  2F84               	decfsz	___awdiv@counter& (0+255),f,b
 13278  003F98  D7EB               	goto	u5520
 13279  003F9A                     l1336:
 13280  003F9A  FFFF               	dw	65535	; assembler added errata NOP
 13281                           
 13282                           ; BSR set to: 0
 13283                           
 13284                           ; BSR set to: 0
 13285                           
 13286                           ; BSR set to: 0
 13287  003F9C  5185               	movf	___awdiv@sign& (0+255),w,b
 13288  003F9E  B4D8               	btfsc	status,2,c
 13289  003FA0  D004               	goto	l1337
 13290                           
 13291                           ; BSR set to: 0
 13292  003FA2  6D86               	negf	___awdiv@quotient& (0+255),b
 13293  003FA4  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
 13294  003FA6  B0D8               	btfsc	status,0,c
 13295  003FA8  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
 13296  003FAA                     l1337:
 13297  003FAA  FFFF               	dw	65535	; assembler added errata NOP
 13298                           
 13299                           ; BSR set to: 0
 13300                           
 13301                           ; BSR set to: 0
 13302  003FAC  C086  F080         	movff	___awdiv@quotient,?___awdiv
 13303  003FB0  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
 13304                           
 13305                           ; BSR set to: 0
 13306                           
 13307                           ; BSR set to: 0
 13308  003FB4  0012               	return		;funcret
 13309  003FB6  FFFF               	dw	65535	; errata NOP
 13310  003FB8                     __end_of___awdiv:
 13311                           	opt stack 0
 13312                           tblptru	equ	0xFF8
 13313                           tblptrh	equ	0xFF7
 13314                           tblptrl	equ	0xFF6
 13315                           tablat	equ	0xFF5
 13316                           prodh	equ	0xFF4
 13317                           prodl	equ	0xFF3
 13318                           intcon	equ	0xFF2
 13319                           postinc0	equ	0xFEE
 13320                           wreg	equ	0xFE8
 13321                           postdec1	equ	0xFE5
 13322                           fsr1l	equ	0xFE1
 13323                           indf2	equ	0xFDF
 13324                           postinc2	equ	0xFDE
 13325                           fsr2h	equ	0xFDA
 13326                           fsr2l	equ	0xFD9
 13327                           status	equ	0xFD8
 13328                           
 13329 ;; *************** function _drenarPressao *****************
 13330 ;; Defined at:
 13331 ;;		line 138 in file "controle.h"
 13332 ;; Parameters:    Size  Location     Type
 13333 ;;		None
 13334 ;; Auto vars:     Size  Location     Type
 13335 ;;		None
 13336 ;; Return value:  Size  Location     Type
 13337 ;;                  1    wreg      void 
 13338 ;; Registers used:
 13339 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13340 ;; Tracked objects:
 13341 ;;		On entry : 0/0
 13342 ;;		On exit  : 0/0
 13343 ;;		Unchanged: 0/0
 13344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13345 ;;      Params:         0       0       0       0       0       0       0
 13346 ;;      Locals:         0       0       0       0       0       0       0
 13347 ;;      Temps:          0       0       0       0       0       0       0
 13348 ;;      Totals:         0       0       0       0       0       0       0
 13349 ;;Total ram usage:        0 bytes
 13350 ;; Hardware stack levels used:    1
 13351 ;; Hardware stack levels required when called:    9
 13352 ;; This function calls:
 13353 ;;		_sprintf
 13354 ;; This function is called by:
 13355 ;;		_acaoTesteBombas
 13356 ;; This function uses a non-reentrant model
 13357 ;;
 13358                           
 13359                           	psect	text39
 13360  006D8C                     __ptext39:
 13361                           	opt stack 0
 13362  006D8C                     _drenarPressao:
 13363                           	opt stack 0
 13364  006D8C  FFFF               	dw	65535	; assembler added errata NOP
 13365                           
 13366                           ;controle.h: 139: sprintf(line4, "Despressurizando...");
 13367                           
 13368                           ; BSR set to: 0
 13369                           ;incstack = 0
 13370  006D8E  0E41               	movlw	low _line4
 13371  006D90  0100               	movlb	0	; () banked
 13372  006D92  6FA1               	movwf	sprintf@wh& (0+255),b
 13373  006D94  0E01               	movlw	high _line4
 13374  006D96  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
 13375  006D98  0E6B               	movlw	low STR_38
 13376  006D9A  6FA3               	movwf	sprintf@f& (0+255),b
 13377  006D9C  0E7C               	movlw	high STR_38
 13378  006D9E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
 13379  006DA0  ECDC  F01F         	call	_sprintf	;wreg free
 13380                           
 13381                           ;controle.h: 140: if (!timerTesteBombas) {
 13382  006DA4  0100               	movlb	0	; () banked
 13383  006DA6  51DB               	movf	_timerTesteBombas& (0+255),w,b
 13384  006DA8  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 13385  006DAA  A4D8               	btfss	status,2,c
 13386  006DAC  D006               	goto	l532
 13387                           
 13388                           ; BSR set to: 0
 13389                           ;controle.h: 141: executandoTeste = 0;
 13390  006DAE  0E00               	movlw	0
 13391  006DB0  6FF1               	movwf	_executandoTeste& (0+255),b
 13392                           
 13393                           ;controle.h: 142: codigoErro = 3;
 13394  006DB2  0E03               	movlw	3
 13395  006DB4  6FF3               	movwf	_codigoErro& (0+255),b
 13396                           
 13397                           ;controle.h: 143: menu_posi = 0;
 13398  006DB6  0E00               	movlw	0
 13399  006DB8  6FE0               	movwf	_menu_posi& (0+255),b
 13400  006DBA                     l532:
 13401  006DBA  FFFF               	dw	65535	; assembler added errata NOP
 13402                           
 13403                           ; BSR set to: 0
 13404                           
 13405                           ; BSR set to: 0
 13406  006DBC  0012               	return		;funcret
 13407  006DBE  FFFF               	dw	65535	; errata NOP
 13408  006DC0                     __end_of_drenarPressao:
 13409                           	opt stack 0
 13410                           tblptru	equ	0xFF8
 13411                           tblptrh	equ	0xFF7
 13412                           tblptrl	equ	0xFF6
 13413                           tablat	equ	0xFF5
 13414                           prodh	equ	0xFF4
 13415                           prodl	equ	0xFF3
 13416                           intcon	equ	0xFF2
 13417                           postinc0	equ	0xFEE
 13418                           wreg	equ	0xFE8
 13419                           postdec1	equ	0xFE5
 13420                           fsr1l	equ	0xFE1
 13421                           indf2	equ	0xFDF
 13422                           postinc2	equ	0xFDE
 13423                           fsr2h	equ	0xFDA
 13424                           fsr2l	equ	0xFD9
 13425                           status	equ	0xFD8
 13426                           
 13427 ;; *************** function _sprintf *****************
 13428 ;; Defined at:
 13429 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
 13430 ;; Parameters:    Size  Location     Type
 13431 ;;  wh              2   33[BANK0 ] PTR unsigned char 
 13432 ;;		 -> intToFloatStr@end(4), line3(21), line2(21), line1(21), 
 13433 ;;		 -> line4(21), bufferAUX(20), 
 13434 ;;  f               2   35[BANK0 ] PTR const unsigned char 
 13435 ;;		 -> intToFloatStr@conv(4), STR_122(15), STR_121(12), STR_120(10), 
 13436 ;;		 -> STR_119(18), STR_118(10), STR_117(18), STR_116(16), 
 13437 ;;		 -> STR_115(10), STR_113(3), STR_112(14), STR_111(20), 
 13438 ;;		 -> STR_110(8), STR_109(15), STR_108(15), STR_107(11), 
 13439 ;;		 -> STR_106(11), STR_105(18), STR_104(5), STR_103(12), 
 13440 ;;		 -> STR_102(5), STR_101(14), STR_100(19), STR_97(3), 
 13441 ;;		 -> STR_96(7), STR_95(7), STR_93(12), STR_92(17), 
 13442 ;;		 -> STR_91(20), STR_90(8), STR_87(14), STR_84(14), 
 13443 ;;		 -> STR_83(11), STR_80(10), STR_79(31), STR_76(11), 
 13444 ;;		 -> STR_75(20), STR_74(20), STR_73(21), STR_72(15), 
 13445 ;;		 -> STR_71(6), STR_70(15), STR_69(6), STR_68(20), 
 13446 ;;		 -> STR_67(15), STR_66(19), STR_65(20), STR_64(21), 
 13447 ;;		 -> STR_63(21), STR_62(18), STR_61(20), STR_60(12), 
 13448 ;;		 -> STR_59(17), STR_58(21), STR_57(16), STR_54(15), 
 13449 ;;		 -> STR_51(15), STR_48(11), STR_47(17), STR_44(9), 
 13450 ;;		 -> STR_43(19), STR_42(19), STR_41(16), STR_40(15), 
 13451 ;;		 -> STR_39(15), STR_38(20), STR_2(5), STR_1(5), 
 13452 ;; Auto vars:     Size  Location     Type
 13453 ;;  pb              4   49[BANK0 ] struct __prbuf
 13454 ;;  ap              2   47[BANK0 ] PTR void [1]
 13455 ;;		 -> ?_sprintf(2), ?_printf(2), 
 13456 ;; Return value:  Size  Location     Type
 13457 ;;                  2   33[BANK0 ] int 
 13458 ;; Registers used:
 13459 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13460 ;; Tracked objects:
 13461 ;;		On entry : 0/0
 13462 ;;		On exit  : 0/0
 13463 ;;		Unchanged: 0/0
 13464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13465 ;;      Params:         0      14       0       0       0       0       0
 13466 ;;      Locals:         0       6       0       0       0       0       0
 13467 ;;      Temps:          0       0       0       0       0       0       0
 13468 ;;      Totals:         0      20       0       0       0       0       0
 13469 ;;Total ram usage:       20 bytes
 13470 ;; Hardware stack levels used:    1
 13471 ;; Hardware stack levels required when called:    8
 13472 ;; This function calls:
 13473 ;;		__doprnt
 13474 ;; This function is called by:
 13475 ;;		_getSerial
 13476 ;;		_drenarPressao
 13477 ;;		_acaoTesteBombas
 13478 ;;		_telaPrincipal
 13479 ;;		_tela_ajusteRTC
 13480 ;;		_tela_testeBombas
 13481 ;;		_dataLoger
 13482 ;;		_informacoes
 13483 ;;		_configuraTelefones
 13484 ;;		_configurarEstacionaria
 13485 ;;		_ajusteSP_Bombas
 13486 ;;		_main
 13487 ;;		_intToFloatStr
 13488 ;; This function uses a non-reentrant model
 13489 ;;
 13490                           
 13491                           	psect	text40
 13492  003FB8                     __ptext40:
 13493                           	opt stack 0
 13494  003FB8                     _sprintf:
 13495                           	opt stack 0
 13496  003FB8  FFFF               	dw	65535	; assembler added errata NOP
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;incstack = 0
 13500  003FBA  C0A1  F0B1         	movff	sprintf@wh,sprintf@pb
 13501  003FBE  C0A2  F0B2         	movff	sprintf@wh+1,sprintf@pb+1
 13502  003FC2  0E00               	movlw	0
 13503  003FC4  0100               	movlb	0	; () banked
 13504  003FC6  6FB3               	movwf	(sprintf@pb+2)& (0+255),b
 13505  003FC8  0E00               	movlw	0
 13506  003FCA  6FB4               	movwf	(sprintf@pb+3)& (0+255),b
 13507  003FCC  0EA5               	movlw	low (?_sprintf+4)
 13508  003FCE  6FAF               	movwf	sprintf@ap& (0+255),b
 13509  003FD0  0E00               	movlw	high (?_sprintf+4)
 13510  003FD2  6FB0               	movwf	(sprintf@ap+1)& (0+255),b
 13511                           
 13512                           ; BSR set to: 0
 13513  003FD4  0EB1               	movlw	low sprintf@pb
 13514  003FD6  6F8C               	movwf	__doprnt@pb& (0+255),b
 13515  003FD8  0E00               	movlw	high sprintf@pb
 13516  003FDA  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 13517  003FDC  C0A3  F08E         	movff	sprintf@f,__doprnt@f
 13518  003FE0  C0A4  F08F         	movff	sprintf@f+1,__doprnt@f+1
 13519  003FE4  0EAF               	movlw	low sprintf@ap
 13520  003FE6  6F90               	movwf	__doprnt@ap& (0+255),b
 13521  003FE8  0E00               	movlw	high sprintf@ap
 13522  003FEA  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 13523  003FEC  EC8E  F000         	call	__doprnt	;wreg free
 13524  003FF0  C0B1  FFD9         	movff	sprintf@pb,fsr2l
 13525  003FF4  C0B2  FFDA         	movff	sprintf@pb+1,fsr2h
 13526  003FF8  0E00               	movlw	0
 13527  003FFA  6EDF               	movwf	indf2,c
 13528                           
 13529                           ;	Return value of _sprintf is never used
 13530  003FFC  0012               	return		;funcret
 13531  003FFE  FFFF               	dw	65535	; errata NOP
 13532  004000                     __end_of_sprintf:
 13533                           	opt stack 0
 13534                           tblptru	equ	0xFF8
 13535                           tblptrh	equ	0xFF7
 13536                           tblptrl	equ	0xFF6
 13537                           tablat	equ	0xFF5
 13538                           prodh	equ	0xFF4
 13539                           prodl	equ	0xFF3
 13540                           intcon	equ	0xFF2
 13541                           postinc0	equ	0xFEE
 13542                           wreg	equ	0xFE8
 13543                           postdec1	equ	0xFE5
 13544                           fsr1l	equ	0xFE1
 13545                           indf2	equ	0xFDF
 13546                           postinc2	equ	0xFDE
 13547                           fsr2h	equ	0xFDA
 13548                           fsr2l	equ	0xFD9
 13549                           status	equ	0xFD8
 13550                           
 13551 ;; *************** function _clearShiftREG *****************
 13552 ;; Defined at:
 13553 ;;		line 31 in file "shift595.h"
 13554 ;; Parameters:    Size  Location     Type
 13555 ;;		None
 13556 ;; Auto vars:     Size  Location     Type
 13557 ;;  i               1    0[BANK0 ] unsigned char 
 13558 ;; Return value:  Size  Location     Type
 13559 ;;                  1    wreg      void 
 13560 ;; Registers used:
 13561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13562 ;; Tracked objects:
 13563 ;;		On entry : 0/0
 13564 ;;		On exit  : 0/0
 13565 ;;		Unchanged: 0/0
 13566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13567 ;;      Params:         0       0       0       0       0       0       0
 13568 ;;      Locals:         0       1       0       0       0       0       0
 13569 ;;      Temps:          0       0       0       0       0       0       0
 13570 ;;      Totals:         0       1       0       0       0       0       0
 13571 ;;Total ram usage:        1 bytes
 13572 ;; Hardware stack levels used:    1
 13573 ;; Hardware stack levels required when called:    6
 13574 ;; This function calls:
 13575 ;;		Nothing
 13576 ;; This function is called by:
 13577 ;;		_acaoTesteBombas
 13578 ;;		_resetParametros
 13579 ;;		_telaPrincipal
 13580 ;; This function uses a non-reentrant model
 13581 ;;
 13582                           
 13583                           	psect	text41
 13584  006E62                     __ptext41:
 13585                           	opt stack 0
 13586  006E62                     _clearShiftREG:
 13587                           	opt stack 0
 13588  006E62  FFFF               	dw	65535	; assembler added errata NOP
 13589                           
 13590                           ;shift595.h: 32: char i = 0;
 13591                           
 13592                           ;incstack = 0
 13593  006E64  0E00               	movlw	0
 13594  006E66  0100               	movlb	0	; () banked
 13595  006E68  6F80               	movwf	clearShiftREG@i& (0+255),b
 13596                           
 13597                           ;shift595.h: 33: for (i = 0; i < 8; i++) {
 13598  006E6A  0E00               	movlw	0
 13599  006E6C  6F80               	movwf	clearShiftREG@i& (0+255),b
 13600  006E6E                     l5469:
 13601  006E6E  FFFF               	dw	65535	; assembler added errata NOP
 13602                           
 13603                           ; BSR set to: 0
 13604  006E70  0E07               	movlw	7
 13605  006E72  6580               	cpfsgt	clearShiftREG@i& (0+255),b
 13606  006E74  D001               	goto	l436
 13607  006E76  D00D               	goto	u5650
 13608  006E78                     l436:
 13609  006E78  FFFF               	dw	65535	; assembler added errata NOP
 13610                           
 13611                           ; BSR set to: 0
 13612                           ;shift595.h: 34: shift[i] = 0;
 13613                           
 13614                           ; BSR set to: 0
 13615  006E7A  5180               	movf	clearShiftREG@i& (0+255),w,b
 13616  006E7C  0D01               	mullw	1
 13617  006E7E  0E44               	movlw	low _shift
 13618  006E80  24F3               	addwf	prodl,w,c
 13619  006E82  6ED9               	movwf	fsr2l,c
 13620  006E84  0E00               	movlw	high _shift
 13621  006E86  20F4               	addwfc	prodh,w,c
 13622  006E88  6EDA               	movwf	fsr2h,c
 13623  006E8A  0E00               	movlw	0
 13624  006E8C  6EDF               	movwf	indf2,c
 13625                           
 13626                           ; BSR set to: 0
 13627  006E8E  2B80               	incf	clearShiftREG@i& (0+255),f,b
 13628  006E90  D7EE               	goto	l5469
 13629  006E92                     u5650:
 13630  006E92  FFFF               	dw	65535	; assembler added errata NOP
 13631                           
 13632                           ; BSR set to: 0
 13633                           
 13634                           ; BSR set to: 0
 13635  006E94  0012               	return		;funcret
 13636  006E96  FFFF               	dw	65535	; errata NOP
 13637  006E98                     __end_of_clearShiftREG:
 13638                           	opt stack 0
 13639                           tblptru	equ	0xFF8
 13640                           tblptrh	equ	0xFF7
 13641                           tblptrl	equ	0xFF6
 13642                           tablat	equ	0xFF5
 13643                           prodh	equ	0xFF4
 13644                           prodl	equ	0xFF3
 13645                           intcon	equ	0xFF2
 13646                           postinc0	equ	0xFEE
 13647                           wreg	equ	0xFE8
 13648                           postdec1	equ	0xFE5
 13649                           fsr1l	equ	0xFE1
 13650                           indf2	equ	0xFDF
 13651                           postinc2	equ	0xFDE
 13652                           fsr2h	equ	0xFDA
 13653                           fsr2l	equ	0xFD9
 13654                           status	equ	0xFD8
 13655                           
 13656 ;; *************** function _btPress *****************
 13657 ;; Defined at:
 13658 ;;		line 53 in file "teclado.h"
 13659 ;; Parameters:    Size  Location     Type
 13660 ;;  bt              1    wreg     unsigned char 
 13661 ;; Auto vars:     Size  Location     Type
 13662 ;;  bt              1    0[BANK0 ] unsigned char 
 13663 ;; Return value:  Size  Location     Type
 13664 ;;                  1    wreg      unsigned char 
 13665 ;; Registers used:
 13666 ;;		wreg, status,2, status,0
 13667 ;; Tracked objects:
 13668 ;;		On entry : 0/0
 13669 ;;		On exit  : 0/0
 13670 ;;		Unchanged: 0/0
 13671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13672 ;;      Params:         0       0       0       0       0       0       0
 13673 ;;      Locals:         0       1       0       0       0       0       0
 13674 ;;      Temps:          0       0       0       0       0       0       0
 13675 ;;      Totals:         0       1       0       0       0       0       0
 13676 ;;Total ram usage:        1 bytes
 13677 ;; Hardware stack levels used:    1
 13678 ;; Hardware stack levels required when called:    6
 13679 ;; This function calls:
 13680 ;;		Nothing
 13681 ;; This function is called by:
 13682 ;;		_acaoTesteBombas
 13683 ;;		_telaPrincipal
 13684 ;;		_tela_ajusteRTC
 13685 ;;		_tela_testeBombas
 13686 ;;		_dataLoger
 13687 ;;		_informacoes
 13688 ;;		_configuraTelefones
 13689 ;;		_configurarEstacionaria
 13690 ;;		_ajusteSP_Bombas
 13691 ;;		_main
 13692 ;; This function uses a non-reentrant model
 13693 ;;
 13694                           
 13695                           	psect	text42
 13696  0074AA                     __ptext42:
 13697                           	opt stack 0
 13698  0074AA                     _btPress:
 13699                           	opt stack 0
 13700  0074AA  FFFF               	dw	65535	; assembler added errata NOP
 13701                           
 13702                           ; BSR set to: 0
 13703                           ;incstack = 0
 13704                           ;btPress@bt stored from wreg
 13705  0074AC  0100               	movlb	0	; () banked
 13706  0074AE  6F80               	movwf	btPress@bt& (0+255),b
 13707                           
 13708                           ;teclado.h: 54: switch (bt) {
 13709  0074B0  D021               	goto	l479
 13710  0074B2  FFFF               	dw	65535	; assembler added errata NOP
 13711  0074B4  505F               	movf	__b_esc,w,c
 13712  0074B6  B4D8               	btfsc	status,2,c
 13713  0074B8  D01A               	goto	l488
 13714                           
 13715                           ;teclado.h: 56: _b_esc = 0;
 13716  0074BA  0E00               	movlw	0
 13717  0074BC  6E5F               	movwf	__b_esc,c
 13718  0074BE  D014               	goto	l6001
 13719  0074C0  FFFF               	dw	65535	; assembler added errata NOP
 13720                           
 13721                           ;teclado.h: 61: if (_b_mais) {
 13722  0074C2  505B               	movf	__b_mais,w,c
 13723  0074C4  B4D8               	btfsc	status,2,c
 13724  0074C6  D013               	goto	l488
 13725                           
 13726                           ;teclado.h: 62: _b_mais = 0;
 13727  0074C8  0E00               	movlw	0
 13728  0074CA  6E5B               	movwf	__b_mais,c
 13729  0074CC  D00D               	goto	l6001
 13730  0074CE  FFFF               	dw	65535	; assembler added errata NOP
 13731  0074D0  505D               	movf	__b_menos,w,c
 13732  0074D2  B4D8               	btfsc	status,2,c
 13733  0074D4  D00C               	goto	l488
 13734                           
 13735                           ;teclado.h: 67: _b_menos = 0;
 13736  0074D6  0E00               	movlw	0
 13737  0074D8  6E5D               	movwf	__b_menos,c
 13738  0074DA  D006               	goto	l6001
 13739  0074DC  FFFF               	dw	65535	; assembler added errata NOP
 13740  0074DE  5059               	movf	__b_ok,w,c
 13741  0074E0  B4D8               	btfsc	status,2,c
 13742  0074E2  D005               	goto	l488
 13743                           
 13744                           ;teclado.h: 72: _b_ok = 0;
 13745  0074E4  0E00               	movlw	0
 13746  0074E6  6E59               	movwf	__b_ok,c
 13747  0074E8                     l6001:
 13748  0074E8  FFFF               	dw	65535	; assembler added errata NOP
 13749                           
 13750                           ;teclado.h: 73: return 1;
 13751  0074EA  0E01               	movlw	1
 13752  0074EC  D013               	goto	l490
 13753  0074EE                     l488:
 13754  0074EE  FFFF               	dw	65535	; assembler added errata NOP
 13755                           
 13756                           ;teclado.h: 76: default: return 0;
 13757                           
 13758                           ;teclado.h: 74: }
 13759                           ;teclado.h: 75: return 0;
 13760  0074F0  0E00               	movlw	0
 13761                           
 13762                           ;teclado.h: 77: }
 13763  0074F2  D010               	goto	l490
 13764  0074F4                     l479:
 13765  0074F4  FFFF               	dw	65535	; assembler added errata NOP
 13766  0074F6  0100               	movlb	0	; () banked
 13767  0074F8  5180               	movf	btPress@bt& (0+255),w,b
 13768                           
 13769                           ; Switch size 1, requested type "space"
 13770                           ; Number of cases is 4, Range of values is 1 to 4
 13771                           ; switch strategies available:
 13772                           ; Name         Instructions Cycles
 13773                           ; simple_byte           13     7 (average)
 13774                           ;	Chosen strategy is simple_byte
 13775  0074FA  0A01               	xorlw	1	; case 1
 13776  0074FC  B4D8               	btfsc	status,2,c
 13777  0074FE  D7D9               	goto	l480
 13778  007500  0A03               	xorlw	3	; case 2
 13779  007502  B4D8               	btfsc	status,2,c
 13780  007504  D7E4               	goto	l485
 13781  007506  0A01               	xorlw	1	; case 3
 13782  007508  B4D8               	btfsc	status,2,c
 13783  00750A  D7DA               	goto	l483
 13784  00750C  0A07               	xorlw	7	; case 4
 13785  00750E  B4D8               	btfsc	status,2,c
 13786  007510  D7E5               	goto	l487
 13787  007512  D7ED               	goto	l488
 13788  007514                     l490:
 13789  007514  FFFF               	dw	65535	; assembler added errata NOP
 13790                           
 13791                           ; BSR set to: 0
 13792  007516  0012               	return		;funcret
 13793  007518  FFFF               	dw	65535	; errata NOP
 13794  00751A                     __end_of_btPress:
 13795                           	opt stack 0
 13796                           tblptru	equ	0xFF8
 13797                           tblptrh	equ	0xFF7
 13798                           tblptrl	equ	0xFF6
 13799                           tablat	equ	0xFF5
 13800                           prodh	equ	0xFF4
 13801                           prodl	equ	0xFF3
 13802                           intcon	equ	0xFF2
 13803                           postinc0	equ	0xFEE
 13804                           wreg	equ	0xFE8
 13805                           postdec1	equ	0xFE5
 13806                           fsr1l	equ	0xFE1
 13807                           indf2	equ	0xFDF
 13808                           postinc2	equ	0xFDE
 13809                           fsr2h	equ	0xFDA
 13810                           fsr2l	equ	0xFD9
 13811                           status	equ	0xFD8
 13812                           
 13813 ;; *************** function _acaoBombas *****************
 13814 ;; Defined at:
 13815 ;;		line 18 in file "controle.h"
 13816 ;; Parameters:    Size  Location     Type
 13817 ;;		None
 13818 ;; Auto vars:     Size  Location     Type
 13819 ;;		None
 13820 ;; Return value:  Size  Location     Type
 13821 ;;                  1    wreg      void 
 13822 ;; Registers used:
 13823 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13824 ;; Tracked objects:
 13825 ;;		On entry : 0/0
 13826 ;;		On exit  : 0/0
 13827 ;;		Unchanged: 0/0
 13828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13829 ;;      Params:         0       0       0       0       0       0       0
 13830 ;;      Locals:         0       0       0       0       0       0       0
 13831 ;;      Temps:          0       3       0       0       0       0       0
 13832 ;;      Totals:         0       3       0       0       0       0       0
 13833 ;;Total ram usage:        3 bytes
 13834 ;; Hardware stack levels used:    1
 13835 ;; Hardware stack levels required when called:   10
 13836 ;; This function calls:
 13837 ;;		_enviaSMS
 13838 ;;		_partidaBombaEstacionaria
 13839 ;; This function is called by:
 13840 ;;		_main
 13841 ;; This function uses a non-reentrant model
 13842 ;;
 13843                           
 13844                           	psect	text43
 13845  002F26                     __ptext43:
 13846                           	opt stack 0
 13847  002F26                     _acaoBombas:
 13848                           	opt stack 0
 13849  002F26  FFFF               	dw	65535	; assembler added errata NOP
 13850                           
 13851                           ;controle.h: 19: if (executandoTeste) {
 13852                           
 13853                           ;incstack = 0
 13854  002F28  0100               	movlb	0	; () banked
 13855  002F2A  51F1               	movf	_executandoTeste& (0+255),w,b
 13856  002F2C  A4D8               	btfss	status,2,c
 13857  002F2E  D09D               	goto	l507
 13858                           
 13859                           ; BSR set to: 0
 13860                           ;controle.h: 21: }
 13861                           ;controle.h: 23: if (pressao >= sp_pressao_rede && !ocorrendoIncendio) {
 13862                           
 13863                           ; BSR set to: 0
 13864                           
 13865                           ; BSR set to: 0
 13866                           ;controle.h: 20: return;
 13867  002F30  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 13868  002F32  6FC8               	movwf	??_acaoBombas& (0+255),b
 13869  002F34  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13870  002F36  51C8               	movf	??_acaoBombas& (0+255),w,b
 13871  002F38  5DF9               	subwf	_pressao& (0+255),w,b
 13872  002F3A  51FA               	movf	(_pressao+1)& (0+255),w,b
 13873  002F3C  0A80               	xorlw	128
 13874  002F3E  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13875  002F40  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13876  002F42  0A80               	xorlw	128
 13877  002F44  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13878  002F46  A0D8               	btfss	status,0,c
 13879  002F48  D00B               	goto	l495
 13880                           
 13881                           ; BSR set to: 0
 13882  002F4A  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13883  002F4C  A4D8               	btfss	status,2,c
 13884  002F4E  D008               	goto	l495
 13885                           
 13886                           ; BSR set to: 0
 13887                           ;controle.h: 24: shift[6] = 0;
 13888  002F50  0E00               	movlw	0
 13889  002F52  6E4A               	movwf	_shift+6,c
 13890                           
 13891                           ;controle.h: 25: shift[5] = 0;
 13892  002F54  0E00               	movlw	0
 13893  002F56  6E49               	movwf	_shift+5,c
 13894                           
 13895                           ; BSR set to: 0
 13896                           ;controle.h: 26: partidaBombaEstacionaria(0);
 13897  002F58  0E00               	movlw	0
 13898  002F5A  ECDD  F01C         	call	_partidaBombaEstacionaria
 13899                           
 13900                           ;controle.h: 27: return;
 13901  002F5E  D085               	goto	l507
 13902  002F60                     l495:
 13903  002F60  FFFF               	dw	65535	; assembler added errata NOP
 13904                           
 13905                           ;controle.h: 28: }
 13906                           ;controle.h: 30: shift[2] = 0;
 13907  002F62  0E00               	movlw	0
 13908  002F64  6E46               	movwf	_shift+2,c
 13909                           
 13910                           ;controle.h: 31: if (pressao <= sp_jockey && timerIntervaloLigarBomba == 0) {
 13911  002F66  0100               	movlb	0	; () banked
 13912  002F68  51E4               	movf	_sp_jockey& (0+255),w,b
 13913  002F6A  6FC8               	movwf	??_acaoBombas& (0+255),b
 13914  002F6C  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13915  002F6E  51F9               	movf	_pressao& (0+255),w,b
 13916  002F70  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13917  002F72  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13918  002F74  0A80               	xorlw	128
 13919  002F76  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13920  002F78  51FA               	movf	(_pressao+1)& (0+255),w,b
 13921  002F7A  0A80               	xorlw	128
 13922  002F7C  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13923  002F7E  A0D8               	btfss	status,0,c
 13924  002F80  D00B               	goto	l496
 13925                           
 13926                           ; BSR set to: 0
 13927  002F82  51F5               	movf	_timerIntervaloLigarBomba& (0+255),w,b
 13928  002F84  A4D8               	btfss	status,2,c
 13929  002F86  D008               	goto	l496
 13930                           
 13931                           ; BSR set to: 0
 13932                           ;controle.h: 32: if (shift[6] == 0) {
 13933  002F88  504A               	movf	_shift+6,w,c
 13934  002F8A  A4D8               	btfss	status,2,c
 13935  002F8C  D002               	goto	l497
 13936                           
 13937                           ; BSR set to: 0
 13938                           ;controle.h: 33: timerIntervaloLigarBomba = 5;
 13939  002F8E  0E05               	movlw	5
 13940  002F90  6FF5               	movwf	_timerIntervaloLigarBomba& (0+255),b
 13941  002F92                     l497:
 13942  002F92  FFFF               	dw	65535	; assembler added errata NOP
 13943                           
 13944                           ; BSR set to: 0
 13945                           ;controle.h: 34: }
 13946                           ;controle.h: 35: shift[6] = 1;
 13947  002F94  0E01               	movlw	1
 13948  002F96  D012               	goto	L33
 13949  002F98                     l496:
 13950  002F98  FFFF               	dw	65535	; assembler added errata NOP
 13951                           
 13952                           ; BSR set to: 0
 13953                           
 13954                           ; BSR set to: 0
 13955  002F9A  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 13956  002F9C  6FC8               	movwf	??_acaoBombas& (0+255),b
 13957  002F9E  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13958  002FA0  51C8               	movf	??_acaoBombas& (0+255),w,b
 13959  002FA2  5DF9               	subwf	_pressao& (0+255),w,b
 13960  002FA4  51FA               	movf	(_pressao+1)& (0+255),w,b
 13961  002FA6  0A80               	xorlw	128
 13962  002FA8  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13963  002FAA  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13964  002FAC  0A80               	xorlw	128
 13965  002FAE  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 13966  002FB0  A0D8               	btfss	status,0,c
 13967  002FB2  D006               	goto	l499
 13968                           
 13969                           ; BSR set to: 0
 13970  002FB4  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 13971  002FB6  A4D8               	btfss	status,2,c
 13972  002FB8  D003               	goto	l499
 13973                           
 13974                           ; BSR set to: 0
 13975                           ;controle.h: 37: shift[6] = 0;
 13976  002FBA  0E00               	movlw	0
 13977  002FBC                     L33:
 13978  002FBC  FFFF               	dw	65535	; assembler added errata NOP
 13979  002FBE  6E4A               	movwf	_shift+6,c
 13980  002FC0                     l499:
 13981  002FC0  FFFF               	dw	65535	; assembler added errata NOP
 13982                           
 13983                           ; BSR set to: 0
 13984                           ;controle.h: 38: }
 13985                           ;controle.h: 40: if (pressao <= sp_principal) {
 13986                           
 13987                           ; BSR set to: 0
 13988                           
 13989                           ; BSR set to: 0
 13990  002FC2  51E3               	movf	_sp_principal& (0+255),w,b
 13991  002FC4  6FC8               	movwf	??_acaoBombas& (0+255),b
 13992  002FC6  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 13993  002FC8  51F9               	movf	_pressao& (0+255),w,b
 13994  002FCA  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 13995  002FCC  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 13996  002FCE  0A80               	xorlw	128
 13997  002FD0  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 13998  002FD2  51FA               	movf	(_pressao+1)& (0+255),w,b
 13999  002FD4  0A80               	xorlw	128
 14000  002FD6  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 14001  002FD8  A0D8               	btfss	status,0,c
 14002  002FDA  D00E               	goto	l500
 14003                           
 14004                           ; BSR set to: 0
 14005                           ;controle.h: 41: ocorrendoIncendio = 1;
 14006  002FDC  0E01               	movlw	1
 14007  002FDE  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
 14008                           
 14009                           ;controle.h: 42: if (timerIntervaloLigarBomba == 0) {
 14010  002FE0  51F5               	movf	_timerIntervaloLigarBomba& (0+255),w,b
 14011  002FE2  A4D8               	btfss	status,2,c
 14012  002FE4  D01F               	goto	l504
 14013                           
 14014                           ; BSR set to: 0
 14015                           ;controle.h: 43: if (shift[5] == 0) {
 14016  002FE6  5049               	movf	_shift+5,w,c
 14017  002FE8  A4D8               	btfss	status,2,c
 14018  002FEA  D002               	goto	l502
 14019                           
 14020                           ; BSR set to: 0
 14021                           ;controle.h: 44: timerIntervaloLigarBomba = 5;
 14022  002FEC  0E05               	movlw	5
 14023  002FEE  6FF5               	movwf	_timerIntervaloLigarBomba& (0+255),b
 14024  002FF0                     l502:
 14025  002FF0  FFFF               	dw	65535	; assembler added errata NOP
 14026                           
 14027                           ; BSR set to: 0
 14028                           ;controle.h: 45: }
 14029                           ;controle.h: 46: shift[5] = 1;
 14030  002FF2  0E01               	movlw	1
 14031  002FF4  6E49               	movwf	_shift+5,c
 14032                           
 14033                           ; BSR set to: 0
 14034                           ;controle.h: 47: }
 14035                           ;controle.h: 51: } else if (pressao >= sp_pressao_rede && !ocorrendoIncendio) {
 14036  002FF6  D016               	goto	l504
 14037  002FF8                     l500:
 14038  002FF8  FFFF               	dw	65535	; assembler added errata NOP
 14039                           
 14040                           ; BSR set to: 0
 14041                           
 14042                           ; BSR set to: 0
 14043  002FFA  51E5               	movf	_sp_pressao_rede& (0+255),w,b
 14044  002FFC  6FC8               	movwf	??_acaoBombas& (0+255),b
 14045  002FFE  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 14046  003000  51C8               	movf	??_acaoBombas& (0+255),w,b
 14047  003002  5DF9               	subwf	_pressao& (0+255),w,b
 14048  003004  51FA               	movf	(_pressao+1)& (0+255),w,b
 14049  003006  0A80               	xorlw	128
 14050  003008  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 14051  00300A  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 14052  00300C  0A80               	xorlw	128
 14053  00300E  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 14054  003010  A0D8               	btfss	status,0,c
 14055  003012  D008               	goto	l504
 14056                           
 14057                           ; BSR set to: 0
 14058  003014  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 14059  003016  A4D8               	btfss	status,2,c
 14060  003018  D005               	goto	l504
 14061                           
 14062                           ; BSR set to: 0
 14063                           ;controle.h: 52: shift[5] = 0;
 14064  00301A  0E00               	movlw	0
 14065  00301C  6E49               	movwf	_shift+5,c
 14066                           
 14067                           ; BSR set to: 0
 14068                           ;controle.h: 53: partidaBombaEstacionaria(0);
 14069  00301E  0E00               	movlw	0
 14070  003020  ECDD  F01C         	call	_partidaBombaEstacionaria
 14071  003024                     l504:
 14072  003024  FFFF               	dw	65535	; assembler added errata NOP
 14073                           
 14074                           ;controle.h: 54: }
 14075                           ;controle.h: 56: if (pressao <= sp_estacionaria) {
 14076  003026  0100               	movlb	0	; () banked
 14077  003028  51E2               	movf	_sp_estacionaria& (0+255),w,b
 14078  00302A  6FC8               	movwf	??_acaoBombas& (0+255),b
 14079  00302C  6BC9               	clrf	(??_acaoBombas+1)& (0+255),b
 14080  00302E  51F9               	movf	_pressao& (0+255),w,b
 14081  003030  5DC8               	subwf	??_acaoBombas& (0+255),w,b
 14082  003032  51C9               	movf	(??_acaoBombas+1)& (0+255),w,b
 14083  003034  0A80               	xorlw	128
 14084  003036  6FCA               	movwf	(??_acaoBombas+2)& (0+255),b
 14085  003038  51FA               	movf	(_pressao+1)& (0+255),w,b
 14086  00303A  0A80               	xorlw	128
 14087  00303C  59CA               	subwfb	(??_acaoBombas+2)& (0+255),w,b
 14088  00303E  A0D8               	btfss	status,0,c
 14089  003040  D008               	goto	l506
 14090                           
 14091                           ; BSR set to: 0
 14092                           ;controle.h: 57: ocorrendoIncendio = 1;
 14093  003042  0E01               	movlw	1
 14094  003044  6FF2               	movwf	_ocorrendoIncendio& (0+255),b
 14095                           
 14096                           ;controle.h: 58: if (timerIntervaloLigarBomba == 0) {
 14097  003046  51F5               	movf	_timerIntervaloLigarBomba& (0+255),w,b
 14098  003048  A4D8               	btfss	status,2,c
 14099  00304A  D003               	goto	l506
 14100                           
 14101                           ; BSR set to: 0
 14102                           ;controle.h: 59: partidaBombaEstacionaria(1);
 14103  00304C  0E01               	movlw	1
 14104  00304E  ECDD  F01C         	call	_partidaBombaEstacionaria
 14105  003052                     l506:
 14106  003052  FFFF               	dw	65535	; assembler added errata NOP
 14107                           
 14108                           ;controle.h: 60: }
 14109                           ;controle.h: 61: }
 14110                           ;controle.h: 63: if (ocorrendoIncendio) {
 14111  003054  0100               	movlb	0	; () banked
 14112  003056  51F2               	movf	_ocorrendoIncendio& (0+255),w,b
 14113  003058  B4D8               	btfsc	status,2,c
 14114  00305A  D007               	goto	l507
 14115                           
 14116                           ; BSR set to: 0
 14117                           ;controle.h: 64: gsmOcupado = 1;
 14118  00305C  0E01               	movlw	1
 14119  00305E  6FF4               	movwf	_gsmOcupado& (0+255),b
 14120                           
 14121                           ; BSR set to: 0
 14122                           ;controle.h: 65: enviaSMS(1);
 14123  003060  0E01               	movlw	1
 14124  003062  EC10  F00B         	call	_enviaSMS
 14125                           
 14126                           ;controle.h: 66: shift[1] = 1;
 14127  003066  0E01               	movlw	1
 14128  003068  6E45               	movwf	_shift+1,c
 14129  00306A                     l507:
 14130  00306A  FFFF               	dw	65535	; assembler added errata NOP
 14131  00306C  0012               	return		;funcret
 14132  00306E  FFFF               	dw	65535	; errata NOP
 14133  003070                     __end_of_acaoBombas:
 14134                           	opt stack 0
 14135                           tblptru	equ	0xFF8
 14136                           tblptrh	equ	0xFF7
 14137                           tblptrl	equ	0xFF6
 14138                           tablat	equ	0xFF5
 14139                           prodh	equ	0xFF4
 14140                           prodl	equ	0xFF3
 14141                           intcon	equ	0xFF2
 14142                           postinc0	equ	0xFEE
 14143                           wreg	equ	0xFE8
 14144                           postdec1	equ	0xFE5
 14145                           fsr1l	equ	0xFE1
 14146                           indf2	equ	0xFDF
 14147                           postinc2	equ	0xFDE
 14148                           fsr2h	equ	0xFDA
 14149                           fsr2l	equ	0xFD9
 14150                           status	equ	0xFD8
 14151                           
 14152 ;; *************** function _partidaBombaEstacionaria *****************
 14153 ;; Defined at:
 14154 ;;		line 70 in file "controle.h"
 14155 ;; Parameters:    Size  Location     Type
 14156 ;;  acao            1    wreg     unsigned char 
 14157 ;; Auto vars:     Size  Location     Type
 14158 ;;  acao            1    3[BANK0 ] unsigned char 
 14159 ;; Return value:  Size  Location     Type
 14160 ;;                  1    wreg      void 
 14161 ;; Registers used:
 14162 ;;		wreg, status,2, status,0, cstack
 14163 ;; Tracked objects:
 14164 ;;		On entry : 0/0
 14165 ;;		On exit  : 0/0
 14166 ;;		Unchanged: 0/0
 14167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14168 ;;      Params:         0       0       0       0       0       0       0
 14169 ;;      Locals:         0       1       0       0       0       0       0
 14170 ;;      Temps:          0       0       0       0       0       0       0
 14171 ;;      Totals:         0       1       0       0       0       0       0
 14172 ;;Total ram usage:        1 bytes
 14173 ;; Hardware stack levels used:    1
 14174 ;; Hardware stack levels required when called:    7
 14175 ;; This function calls:
 14176 ;;		_delay
 14177 ;; This function is called by:
 14178 ;;		_acaoBombas
 14179 ;;		_acaoTesteBombas
 14180 ;; This function uses a non-reentrant model
 14181 ;;
 14182                           
 14183                           	psect	text44
 14184  0039BA                     __ptext44:
 14185                           	opt stack 0
 14186  0039BA                     _partidaBombaEstacionaria:
 14187                           	opt stack 0
 14188  0039BA  FFFF               	dw	65535	; assembler added errata NOP
 14189                           
 14190                           ;incstack = 0
 14191                           ;partidaBombaEstacionaria@acao stored from wreg
 14192  0039BC  0100               	movlb	0	; () banked
 14193  0039BE  6F83               	movwf	partidaBombaEstacionaria@acao& (0+255),b
 14194                           
 14195                           ;controle.h: 71: if (acao == 1 && !flagEstacionariaLigada) {
 14196  0039C0  0100               	movlb	0	; () banked
 14197  0039C2  0583               	decf	partidaBombaEstacionaria@acao& (0+255),w,b
 14198  0039C4  A4D8               	btfss	status,2,c
 14199  0039C6  D01A               	goto	l512
 14200                           
 14201                           ; BSR set to: 0
 14202  0039C8  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 14203  0039CA  A4D8               	btfss	status,2,c
 14204  0039CC  D017               	goto	l512
 14205                           
 14206                           ; BSR set to: 0
 14207                           ;controle.h: 72: if (_sec_partida != _sec) {
 14208  0039CE  51EF               	movf	__sec& (0+255),w,b
 14209  0039D0  186C               	xorwf	__sec_partida,w,c
 14210  0039D2  B4D8               	btfsc	status,2,c
 14211  0039D4  D013               	goto	l512
 14212                           
 14213                           ; BSR set to: 0
 14214                           ;controle.h: 73: _sec_partida = _sec;
 14215  0039D6  C0EF  F06C         	movff	__sec,__sec_partida
 14216                           
 14217                           ; BSR set to: 0
 14218                           ;controle.h: 74: tempo_limite_partida++;
 14219  0039DA  2A68               	incf	_tempo_limite_partida,f,c
 14220                           
 14221                           ;controle.h: 75: tempo_partida++;
 14222  0039DC  2A69               	incf	_tempo_partida,f,c
 14223                           
 14224                           ; BSR set to: 0
 14225                           ;controle.h: 76: if (!PORTAbits.RA5) {
 14226  0039DE  BA80               	btfsc	3968,5,c	;volatile
 14227  0039E0  D00D               	goto	l512
 14228                           
 14229                           ; BSR set to: 0
 14230                           ;controle.h: 77: delay(700);
 14231  0039E2  0E02               	movlw	2
 14232  0039E4  6F81               	movwf	(delay@x+1)& (0+255),b
 14233  0039E6  0EBC               	movlw	188
 14234  0039E8  6F80               	movwf	delay@x& (0+255),b
 14235  0039EA  ECFB  F036         	call	_delay	;wreg free
 14236                           
 14237                           ;controle.h: 78: flagEstacionariaLigada = 1;
 14238  0039EE  0E01               	movlw	1
 14239  0039F0  0100               	movlb	0	; () banked
 14240  0039F2  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14241                           
 14242                           ; BSR set to: 0
 14243                           ;controle.h: 79: tempo_partida = 0;
 14244  0039F4  0E00               	movlw	0
 14245  0039F6  6E69               	movwf	_tempo_partida,c
 14246                           
 14247                           ; BSR set to: 0
 14248                           ;controle.h: 80: shift[4] = 0;
 14249  0039F8  0E00               	movlw	0
 14250  0039FA  6E48               	movwf	_shift+4,c
 14251  0039FC                     l512:
 14252  0039FC  FFFF               	dw	65535	; assembler added errata NOP
 14253                           
 14254                           ; BSR set to: 0
 14255                           ;controle.h: 81: }
 14256                           ;controle.h: 82: }
 14257                           ;controle.h: 83: }
 14258                           ;controle.h: 84: if (!flagEstacionariaLigada && status_estacionaria == 1) {
 14259                           
 14260                           ; BSR set to: 0
 14261                           
 14262                           ; BSR set to: 0
 14263                           
 14264                           ; BSR set to: 0
 14265  0039FE  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 14266  003A00  A4D8               	btfss	status,2,c
 14267  003A02  D015               	goto	l517
 14268                           
 14269                           ; BSR set to: 0
 14270  003A04  05FC               	decf	_status_estacionaria& (0+255),w,b
 14271  003A06  A4D8               	btfss	status,2,c
 14272  003A08  D012               	goto	l517
 14273                           
 14274                           ; BSR set to: 0
 14275                           ;controle.h: 85: shift[3] = 1;
 14276  003A0A  0E01               	movlw	1
 14277  003A0C  6E47               	movwf	_shift+3,c
 14278                           
 14279                           ; BSR set to: 0
 14280                           ;controle.h: 86: if (tempo_partida <= 7) {
 14281  003A0E  0E08               	movlw	8
 14282  003A10  6069               	cpfslt	_tempo_partida,c
 14283  003A12  D002               	goto	l514
 14284                           
 14285                           ; BSR set to: 0
 14286                           ;controle.h: 87: shift[4] = 1;
 14287  003A14  0E01               	movlw	1
 14288  003A16  D005               	goto	L34
 14289  003A18                     l514:
 14290  003A18  FFFF               	dw	65535	; assembler added errata NOP
 14291                           
 14292                           ; BSR set to: 0
 14293                           
 14294                           ; BSR set to: 0
 14295  003A1A  0E10               	movlw	16
 14296  003A1C  6069               	cpfslt	_tempo_partida,c
 14297  003A1E  D004               	goto	l516
 14298                           
 14299                           ; BSR set to: 0
 14300                           ;controle.h: 89: shift[4] = 0;
 14301  003A20  0E00               	movlw	0
 14302  003A22                     L34:
 14303  003A22  FFFF               	dw	65535	; assembler added errata NOP
 14304  003A24  6E48               	movwf	_shift+4,c
 14305                           
 14306                           ;controle.h: 90: } else {
 14307  003A26  D003               	goto	l517
 14308  003A28                     l516:
 14309  003A28  FFFF               	dw	65535	; assembler added errata NOP
 14310                           
 14311                           ; BSR set to: 0
 14312                           ;controle.h: 91: tempo_partida = 0;
 14313                           
 14314                           ; BSR set to: 0
 14315  003A2A  0E00               	movlw	0
 14316  003A2C  6E69               	movwf	_tempo_partida,c
 14317  003A2E                     l517:
 14318  003A2E  FFFF               	dw	65535	; assembler added errata NOP
 14319                           
 14320                           ; BSR set to: 0
 14321                           ;controle.h: 92: }
 14322                           ;controle.h: 93: }
 14323                           ;controle.h: 94: if (tempo_limite_partida > tempo_limite_estacionaria) {
 14324                           
 14325                           ; BSR set to: 0
 14326                           
 14327                           ; BSR set to: 0
 14328                           
 14329                           ; BSR set to: 0
 14330  003A30  5068               	movf	_tempo_limite_partida,w,c
 14331  003A32  5DE6               	subwf	_tempo_limite_estacionaria& (0+255),w,b
 14332  003A34  B0D8               	btfsc	status,0,c
 14333  003A36  D00A               	goto	l518
 14334                           
 14335                           ; BSR set to: 0
 14336                           ;controle.h: 95: tempo_limite_partida = 0;
 14337  003A38  0E00               	movlw	0
 14338  003A3A  6E68               	movwf	_tempo_limite_partida,c
 14339                           
 14340                           ;controle.h: 96: status_estacionaria = 0;
 14341  003A3C  0E00               	movlw	0
 14342  003A3E  6FFC               	movwf	_status_estacionaria& (0+255),b
 14343                           
 14344                           ;controle.h: 97: flagEstacionariaLigada = 0;
 14345  003A40  0E00               	movlw	0
 14346  003A42  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14347                           
 14348                           ;controle.h: 98: shift[3] = 0;
 14349  003A44  0E00               	movlw	0
 14350  003A46  6E47               	movwf	_shift+3,c
 14351                           
 14352                           ;controle.h: 99: shift[4] = 0;
 14353  003A48  0E00               	movlw	0
 14354  003A4A  6E48               	movwf	_shift+4,c
 14355  003A4C                     l518:
 14356  003A4C  FFFF               	dw	65535	; assembler added errata NOP
 14357                           
 14358                           ; BSR set to: 0
 14359                           ;controle.h: 100: }
 14360                           ;controle.h: 103: if (acao == 0) {
 14361  003A4E  5183               	movf	partidaBombaEstacionaria@acao& (0+255),w,b
 14362  003A50  A4D8               	btfss	status,2,c
 14363  003A52  D00A               	goto	l519
 14364                           
 14365                           ; BSR set to: 0
 14366                           ;controle.h: 104: flagEstacionariaLigada = 0;
 14367  003A54  0E00               	movlw	0
 14368  003A56  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14369                           
 14370                           ;controle.h: 105: shift[4] = 0;
 14371  003A58  0E00               	movlw	0
 14372  003A5A  6E48               	movwf	_shift+4,c
 14373                           
 14374                           ;controle.h: 106: shift[3] = 0;
 14375  003A5C  0E00               	movlw	0
 14376  003A5E  6E47               	movwf	_shift+3,c
 14377                           
 14378                           ;controle.h: 107: tempo_partida = 0;
 14379  003A60  0E00               	movlw	0
 14380  003A62  6E69               	movwf	_tempo_partida,c
 14381                           
 14382                           ;controle.h: 108: tempo_limite_partida = 0;
 14383  003A64  0E00               	movlw	0
 14384  003A66  6E68               	movwf	_tempo_limite_partida,c
 14385  003A68                     l519:
 14386  003A68  FFFF               	dw	65535	; assembler added errata NOP
 14387                           
 14388                           ; BSR set to: 0
 14389                           ;controle.h: 109: }
 14390                           ;controle.h: 111: if (status_estacionaria == 0) {
 14391  003A6A  51FC               	movf	_status_estacionaria& (0+255),w,b
 14392  003A6C  A4D8               	btfss	status,2,c
 14393  003A6E  D006               	goto	l520
 14394                           
 14395                           ; BSR set to: 0
 14396                           ;controle.h: 112: shift[3] = 0;
 14397  003A70  0E00               	movlw	0
 14398  003A72  6E47               	movwf	_shift+3,c
 14399                           
 14400                           ;controle.h: 113: shift[4] = 0;
 14401  003A74  0E00               	movlw	0
 14402  003A76  6E48               	movwf	_shift+4,c
 14403                           
 14404                           ;controle.h: 114: tempo_partida = 0;
 14405  003A78  0E00               	movlw	0
 14406  003A7A  6E69               	movwf	_tempo_partida,c
 14407  003A7C                     l520:
 14408  003A7C  FFFF               	dw	65535	; assembler added errata NOP
 14409                           
 14410                           ; BSR set to: 0
 14411                           ;controle.h: 115: }
 14412                           ;controle.h: 116: if (flagEstacionariaLigada) {
 14413  003A7E  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 14414  003A80  B4D8               	btfsc	status,2,c
 14415  003A82  D00A               	goto	l523
 14416                           
 14417                           ; BSR set to: 0
 14418                           ;controle.h: 117: if (!PORTAbits.RA5) {
 14419  003A84  BA80               	btfsc	3968,5,c	;volatile
 14420  003A86  D005               	goto	l522
 14421                           
 14422                           ; BSR set to: 0
 14423                           ;controle.h: 118: shift[4] = 0;
 14424  003A88  0E00               	movlw	0
 14425  003A8A  6E48               	movwf	_shift+4,c
 14426                           
 14427                           ;controle.h: 119: tempo_limite_partida = 0;
 14428  003A8C  0E00               	movlw	0
 14429  003A8E  6E68               	movwf	_tempo_limite_partida,c
 14430                           
 14431                           ;controle.h: 120: } else {
 14432  003A90  D003               	goto	l523
 14433  003A92                     l522:
 14434  003A92  FFFF               	dw	65535	; assembler added errata NOP
 14435                           
 14436                           ; BSR set to: 0
 14437                           ;controle.h: 121: flagEstacionariaLigada = 0;
 14438                           
 14439                           ; BSR set to: 0
 14440  003A94  0E00               	movlw	0
 14441  003A96  6FF0               	movwf	_flagEstacionariaLigada& (0+255),b
 14442  003A98                     l523:
 14443  003A98  FFFF               	dw	65535	; assembler added errata NOP
 14444                           
 14445                           ; BSR set to: 0
 14446                           
 14447                           ; BSR set to: 0
 14448                           
 14449                           ; BSR set to: 0
 14450  003A9A  0012               	return		;funcret
 14451  003A9C  FFFF               	dw	65535	; errata NOP
 14452  003A9E                     __end_of_partidaBombaEstacionaria:
 14453                           	opt stack 0
 14454                           tblptru	equ	0xFF8
 14455                           tblptrh	equ	0xFF7
 14456                           tblptrl	equ	0xFF6
 14457                           tablat	equ	0xFF5
 14458                           prodh	equ	0xFF4
 14459                           prodl	equ	0xFF3
 14460                           intcon	equ	0xFF2
 14461                           postinc0	equ	0xFEE
 14462                           wreg	equ	0xFE8
 14463                           postdec1	equ	0xFE5
 14464                           fsr1l	equ	0xFE1
 14465                           indf2	equ	0xFDF
 14466                           postinc2	equ	0xFDE
 14467                           fsr2h	equ	0xFDA
 14468                           fsr2l	equ	0xFD9
 14469                           status	equ	0xFD8
 14470                           
 14471 ;; *************** function _enviaSMS *****************
 14472 ;; Defined at:
 14473 ;;		line 137 in file "comunicacao.h"
 14474 ;; Parameters:    Size  Location     Type
 14475 ;;  tipo            1    wreg     unsigned char 
 14476 ;; Auto vars:     Size  Location     Type
 14477 ;;  tipo            1   71[BANK0 ] unsigned char 
 14478 ;; Return value:  Size  Location     Type
 14479 ;;                  1    wreg      void 
 14480 ;; Registers used:
 14481 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14482 ;; Tracked objects:
 14483 ;;		On entry : 0/0
 14484 ;;		On exit  : 0/0
 14485 ;;		Unchanged: 0/0
 14486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14487 ;;      Params:         0       0       0       0       0       0       0
 14488 ;;      Locals:         0      11       0       0       0       0       0
 14489 ;;      Temps:          0       2       0       0       0       0       0
 14490 ;;      Totals:         0      13       0       0       0       0       0
 14491 ;;Total ram usage:       13 bytes
 14492 ;; Hardware stack levels used:    1
 14493 ;; Hardware stack levels required when called:    9
 14494 ;; This function calls:
 14495 ;;		_aguardaBuffer
 14496 ;;		_delay
 14497 ;;		_limparBuffer
 14498 ;;		_printf
 14499 ;;		_writeChar
 14500 ;; This function is called by:
 14501 ;;		_acaoBombas
 14502 ;;		_acaoTesteBombas
 14503 ;; This function uses a non-reentrant model
 14504 ;;
 14505                           
 14506                           	psect	text45
 14507  001620                     __ptext45:
 14508                           	opt stack 0
 14509  001620                     _enviaSMS:
 14510                           	opt stack 0
 14511  001620  FFFF               	dw	65535	; assembler added errata NOP
 14512                           
 14513                           ; BSR set to: 0
 14514                           ;incstack = 0
 14515                           ;enviaSMS@tipo stored from wreg
 14516  001622  0100               	movlb	0	; () banked
 14517  001624  6FC7               	movwf	enviaSMS@tipo& (0+255),b
 14518                           
 14519                           ;comunicacao.h: 138: if (timerReenvioSMS) {
 14520  001626  0100               	movlb	0	; () banked
 14521  001628  51F7               	movf	_timerReenvioSMS& (0+255),w,b
 14522  00162A  B4D8               	btfsc	status,2,c
 14523  00162C  D003               	goto	l356
 14524                           
 14525                           ; BSR set to: 0
 14526                           ;comunicacao.h: 139: gsmOcupado = 0;
 14527  00162E  0E00               	movlw	0
 14528  001630  6FF4               	movwf	_gsmOcupado& (0+255),b
 14529                           
 14530                           ; BSR set to: 0
 14531                           ;comunicacao.h: 140: return;
 14532  001632  D19E               	goto	l360
 14533  001634                     l356:
 14534  001634  FFFF               	dw	65535	; assembler added errata NOP
 14535                           
 14536                           ; BSR set to: 0
 14537                           ;comunicacao.h: 141: };
 14538                           ;comunicacao.h: 142: gsmOcupado = 1;
 14539                           
 14540                           ; BSR set to: 0
 14541  001636  0E01               	movlw	1
 14542  001638  6FF4               	movwf	_gsmOcupado& (0+255),b
 14543                           
 14544                           ;comunicacao.h: 144: switch (etapaComunicacao) {
 14545  00163A  D17A               	goto	l358
 14546  00163C  FFFF               	dw	65535	; assembler added errata NOP
 14547                           
 14548                           ; BSR set to: 0
 14549                           ;comunicacao.h: 146: limparBuffer();
 14550                           
 14551                           ; BSR set to: 0
 14552  00163E  EC16  F037         	call	_limparBuffer	;wreg free
 14553                           
 14554                           ;comunicacao.h: 147: printf("AT\r\n");
 14555  001642  0EDE               	movlw	low STR_4
 14556  001644  0100               	movlb	0	; () banked
 14557  001646  6FA1               	movwf	printf@f& (0+255),b
 14558  001648  0E7F               	movlw	high STR_4
 14559  00164A  6FA2               	movwf	(printf@f+1)& (0+255),b
 14560  00164C  EC17  F038         	call	_printf	;wreg free
 14561                           
 14562                           ;comunicacao.h: 148: etapaComunicacao++;
 14563  001650  4A4C               	infsnz	_etapaComunicacao,f,c
 14564  001652  2A4D               	incf	_etapaComunicacao+1,f,c
 14565                           
 14566                           ;comunicacao.h: 149: timerEtapaComunicacao = 6;
 14567  001654  0E06               	movlw	6
 14568  001656  0100               	movlb	0	; () banked
 14569  001658  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
 14570                           
 14571                           ;comunicacao.h: 150: break;
 14572  00165A  D18A               	goto	l360
 14573  00165C  FFFF               	dw	65535	; assembler added errata NOP
 14574                           
 14575                           ; BSR set to: 0
 14576                           ;comunicacao.h: 152: if (aguardaBuffer("OK")) {
 14577                           
 14578                           ; BSR set to: 0
 14579  00165E  0EFA               	movlw	low STR_5
 14580  001660  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14581  001662  0E7F               	movlw	high STR_5
 14582  001664  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14583  001666  ECF9  F037         	call	_aguardaBuffer	;wreg free
 14584  00166A  0900               	iorlw	0
 14585  00166C  B4D8               	btfsc	status,2,c
 14586  00166E  D00E               	goto	l362
 14587                           
 14588                           ;comunicacao.h: 153: limparBuffer();
 14589  001670  EC16  F037         	call	_limparBuffer	;wreg free
 14590                           
 14591                           ;comunicacao.h: 154: printf("AT+CMGF=1\r\n");
 14592  001674  0ECC               	movlw	low STR_10
 14593  001676  0100               	movlb	0	; () banked
 14594  001678  6FA1               	movwf	printf@f& (0+255),b
 14595  00167A  0E7E               	movlw	high STR_10
 14596  00167C  6FA2               	movwf	(printf@f+1)& (0+255),b
 14597  00167E  EC17  F038         	call	_printf	;wreg free
 14598                           
 14599                           ;comunicacao.h: 155: etapaComunicacao++;
 14600  001682  4A4C               	infsnz	_etapaComunicacao,f,c
 14601  001684  2A4D               	incf	_etapaComunicacao+1,f,c
 14602                           
 14603                           ;comunicacao.h: 156: timerEtapaComunicacao = 6;
 14604  001686  0E06               	movlw	6
 14605  001688  0100               	movlb	0	; () banked
 14606  00168A  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
 14607  00168C                     l362:
 14608  00168C  FFFF               	dw	65535	; assembler added errata NOP
 14609                           
 14610                           ;comunicacao.h: 157: }
 14611                           ;comunicacao.h: 158: if (!timerEtapaComunicacao) {
 14612                           
 14613                           ; BSR set to: 0
 14614  00168E  0100               	movlb	0	; () banked
 14615  001690  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
 14616  001692  A4D8               	btfss	status,2,c
 14617  001694  D16D               	goto	l360
 14618                           
 14619                           ; BSR set to: 0
 14620                           ;comunicacao.h: 159: writeChar(0x1A);
 14621  001696  0E1A               	movlw	26
 14622  001698  6F80               	movwf	writeChar@hex& (0+255),b
 14623  00169A  0E00               	movlw	0
 14624  00169C  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 14625  00169E  ECB8  F035         	call	_writeChar	;wreg free
 14626                           
 14627                           ;comunicacao.h: 160: delay(15);
 14628  0016A2  0E00               	movlw	0
 14629  0016A4  0100               	movlb	0	; () banked
 14630  0016A6  6F81               	movwf	(delay@x+1)& (0+255),b
 14631  0016A8  0E0F               	movlw	15
 14632  0016AA  6F80               	movwf	delay@x& (0+255),b
 14633  0016AC  ECFB  F036         	call	_delay	;wreg free
 14634                           
 14635                           ;comunicacao.h: 161: printf("ATH0\r\n");
 14636  0016B0  0EAA               	movlw	low STR_21
 14637  0016B2  0100               	movlb	0	; () banked
 14638  0016B4  6FA1               	movwf	printf@f& (0+255),b
 14639  0016B6  0E7F               	movlw	high STR_21
 14640  0016B8  6FA2               	movwf	(printf@f+1)& (0+255),b
 14641  0016BA  EC17  F038         	call	_printf	;wreg free
 14642  0016BE  D132               	goto	l406
 14643  0016C0  FFFF               	dw	65535	; assembler added errata NOP
 14644                           
 14645                           ;comunicacao.h: 166: if (aguardaBuffer("OK")) {
 14646  0016C2  0EFA               	movlw	low STR_5
 14647  0016C4  0100               	movlb	0	; () banked
 14648  0016C6  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14649  0016C8  0E7F               	movlw	high STR_5
 14650  0016CA  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14651  0016CC  ECF9  F037         	call	_aguardaBuffer	;wreg free
 14652  0016D0  0900               	iorlw	0
 14653  0016D2  B4D8               	btfsc	status,2,c
 14654  0016D4  D0A4               	goto	l372
 14655                           
 14656                           ;comunicacao.h: 167: limparBuffer();
 14657  0016D6  EC16  F037         	call	_limparBuffer	;wreg free
 14658                           
 14659                           ;comunicacao.h: 168: printf("AT+CMGS=\"+55%s\"\r\n", telefoneSelecionado == 0 ? tel1 : t
      +                          el2);
 14660  0016DA  0100               	movlb	0	; () banked
 14661  0016DC  51F8               	movf	_telefoneSelecionado& (0+255),w,b
 14662  0016DE  B4D8               	btfsc	status,2,c
 14663  0016E0  D004               	goto	l367
 14664                           
 14665                           ; BSR set to: 0
 14666  0016E2  0EA9               	movlw	low _tel2
 14667  0016E4  6FBD               	movwf	_enviaSMS$1211& (0+255),b
 14668  0016E6  0E01               	movlw	high _tel2
 14669  0016E8  D004               	goto	L37
 14670  0016EA                     l367:
 14671  0016EA  FFFF               	dw	65535	; assembler added errata NOP
 14672                           
 14673                           ; BSR set to: 0
 14674                           
 14675                           ; BSR set to: 0
 14676  0016EC  0EB5               	movlw	low _tel1
 14677  0016EE  6FBD               	movwf	_enviaSMS$1211& (0+255),b
 14678  0016F0  0E01               	movlw	high _tel1
 14679  0016F2                     L37:
 14680  0016F2  FFFF               	dw	65535	; assembler added errata NOP
 14681  0016F4  6FBE               	movwf	(_enviaSMS$1211+1)& (0+255),b
 14682                           
 14683                           ; BSR set to: 0
 14684                           
 14685                           ; BSR set to: 0
 14686  0016F6  0E43               	movlw	low STR_12
 14687  0016F8  6FA1               	movwf	printf@f& (0+255),b
 14688  0016FA  0E7D               	movlw	high STR_12
 14689  0016FC  6FA2               	movwf	(printf@f+1)& (0+255),b
 14690  0016FE  C0BD  F0A3         	movff	_enviaSMS$1211,?_printf+2
 14691  001702  C0BE  F0A4         	movff	_enviaSMS$1211+1,?_printf+3
 14692  001706  EC17  F038         	call	_printf	;wreg free
 14693                           
 14694                           ;comunicacao.h: 169: timerEtapaComunicacao = 8;
 14695  00170A  0E08               	movlw	8
 14696  00170C  FFFF               	dw	65535	; assembler added errata NOP
 14697  00170E  0100               	movlb	0	; () banked
 14698  001710  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
 14699                           
 14700                           ; BSR set to: 0
 14701                           ;comunicacao.h: 170: etapaComunicacao++;
 14702  001712  4A4C               	infsnz	_etapaComunicacao,f,c
 14703  001714  2A4D               	incf	_etapaComunicacao+1,f,c
 14704                           
 14705                           ; BSR set to: 0
 14706  001716  D083               	goto	l372
 14707  001718  FFFF               	dw	65535	; assembler added errata NOP
 14708                           
 14709                           ; BSR set to: 0
 14710                           ;comunicacao.h: 178: if (aguardaBuffer(">")) {
 14711                           
 14712                           ; BSR set to: 0
 14713  00171A  0EFD               	movlw	low STR_13
 14714  00171C  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14715  00171E  0E7F               	movlw	high STR_13
 14716  001720  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14717  001722  ECF9  F037         	call	_aguardaBuffer	;wreg free
 14718  001726  0900               	iorlw	0
 14719  001728  B4D8               	btfsc	status,2,c
 14720  00172A  D079               	goto	l372
 14721                           
 14722                           ;comunicacao.h: 179: limparBuffer();
 14723  00172C  EC16  F037         	call	_limparBuffer	;wreg free
 14724                           
 14725                           ;comunicacao.h: 180: if (tipo == 1) {
 14726  001730  0100               	movlb	0	; () banked
 14727  001732  05C7               	decf	enviaSMS@tipo& (0+255),w,b
 14728  001734  A4D8               	btfss	status,2,c
 14729  001736  D018               	goto	l373
 14730                           
 14731                           ; BSR set to: 0
 14732                           ;comunicacao.h: 181: printf("DISPARO ALARME DE INCENDIO\r\nEM %02d:%02d:%02d %02d/%02d/%
      +                          02d\r\n", _hor, _min, _sec, _dia, _mes, _ano);
 14733  001738  0EB9               	movlw	low STR_25
 14734  00173A  6FA1               	movwf	printf@f& (0+255),b
 14735  00173C  0E7B               	movlw	high STR_25
 14736  00173E  6FA2               	movwf	(printf@f+1)& (0+255),b
 14737  001740  C0ED  F0A3         	movff	__hor,?_printf+2
 14738  001744  6BA4               	clrf	(?_printf+3)& (0+255),b
 14739  001746  C0EE  F0A5         	movff	__min,?_printf+4
 14740  00174A  6BA6               	clrf	(?_printf+5)& (0+255),b
 14741  00174C  C0EF  F0A7         	movff	__sec,?_printf+6
 14742  001750  6BA8               	clrf	(?_printf+7)& (0+255),b
 14743  001752  C0EC  F0A9         	movff	__dia,?_printf+8
 14744  001756  6BAA               	clrf	(?_printf+9)& (0+255),b
 14745  001758  C0EB  F0AB         	movff	__mes,?_printf+10
 14746  00175C  6BAC               	clrf	(?_printf+11)& (0+255),b
 14747  00175E  C0EA  F0AD         	movff	__ano,?_printf+12
 14748  001762  6BAE               	clrf	(?_printf+13)& (0+255),b
 14749  001764  EC17  F038         	call	_printf	;wreg free
 14750  001768                     l373:
 14751  001768  FFFF               	dw	65535	; assembler added errata NOP
 14752                           
 14753                           ;comunicacao.h: 182: }
 14754                           ;comunicacao.h: 183: if (tipo == 2) {
 14755  00176A  0E02               	movlw	2
 14756  00176C  0100               	movlb	0	; () banked
 14757  00176E  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 14758  001770  A4D8               	btfss	status,2,c
 14759  001772  D04B               	goto	l374
 14760                           
 14761                           ; BSR set to: 0
 14762                           ;comunicacao.h: 184: printf("TESTE DE BOMBAS REALIZADO\r\nEM %02d:%02d:%02d %02d/%02d/%0
      +                          2d\r\nJOCKEY: %s\r\nPRINCIPAL: %s\r\nCOMBUSTAO: %s\r\n",
 14763                           ;comunicacao.h: 185: _hor, _min, _sec, _dia, _mes, _ano, status_jockey == 1 ? "OK" : "FA
      +                          LHA", status_principal == 1 ? "OK" : "FALHA", status_estacionaria == 1 ? "OK" : "FALHA")
      +                          ;
 14764  001774  05FC               	decf	_status_estacionaria& (0+255),w,b
 14765  001776  B4D8               	btfsc	status,2,c
 14766  001778  D004               	goto	l376
 14767                           
 14768                           ; BSR set to: 0
 14769  00177A  0ED2               	movlw	low STR_28
 14770  00177C  6FBF               	movwf	_enviaSMS$1224& (0+255),b
 14771  00177E  0E7F               	movlw	high STR_28
 14772  001780  D004               	goto	L35
 14773  001782                     l376:
 14774  001782  FFFF               	dw	65535	; assembler added errata NOP
 14775                           
 14776                           ; BSR set to: 0
 14777                           
 14778                           ; BSR set to: 0
 14779  001784  0EFA               	movlw	low STR_5
 14780  001786  6FBF               	movwf	_enviaSMS$1224& (0+255),b
 14781  001788  0E7F               	movlw	high STR_5
 14782  00178A                     L35:
 14783  00178A  FFFF               	dw	65535	; assembler added errata NOP
 14784  00178C  6FC0               	movwf	(_enviaSMS$1224+1)& (0+255),b
 14785                           
 14786                           ; BSR set to: 0
 14787  00178E  05FD               	decf	_status_principal& (0+255),w,b
 14788  001790  B4D8               	btfsc	status,2,c
 14789  001792  D004               	goto	l380
 14790                           
 14791                           ; BSR set to: 0
 14792  001794  0ED2               	movlw	low STR_28
 14793  001796  6FC1               	movwf	_enviaSMS$1225& (0+255),b
 14794  001798  0E7F               	movlw	high STR_28
 14795  00179A  D004               	goto	L36
 14796  00179C                     l380:
 14797  00179C  FFFF               	dw	65535	; assembler added errata NOP
 14798                           
 14799                           ; BSR set to: 0
 14800                           
 14801                           ; BSR set to: 0
 14802  00179E  0EFA               	movlw	low STR_5
 14803  0017A0  6FC1               	movwf	_enviaSMS$1225& (0+255),b
 14804  0017A2  0E7F               	movlw	high STR_5
 14805  0017A4                     L36:
 14806  0017A4  FFFF               	dw	65535	; assembler added errata NOP
 14807  0017A6  6FC2               	movwf	(_enviaSMS$1225+1)& (0+255),b
 14808                           
 14809                           ; BSR set to: 0
 14810  0017A8  05FE               	decf	_status_jockey& (0+255),w,b
 14811  0017AA  B4D8               	btfsc	status,2,c
 14812  0017AC  D004               	goto	l384
 14813                           
 14814                           ; BSR set to: 0
 14815  0017AE  0ED2               	movlw	low STR_28
 14816  0017B0  6FC3               	movwf	_enviaSMS$1226& (0+255),b
 14817  0017B2  0E7F               	movlw	high STR_28
 14818  0017B4  D004               	goto	L38
 14819  0017B6                     l384:
 14820  0017B6  FFFF               	dw	65535	; assembler added errata NOP
 14821                           
 14822                           ; BSR set to: 0
 14823                           
 14824                           ; BSR set to: 0
 14825  0017B8  0EFA               	movlw	low STR_5
 14826  0017BA  6FC3               	movwf	_enviaSMS$1226& (0+255),b
 14827  0017BC  0E7F               	movlw	high STR_5
 14828  0017BE                     L38:
 14829  0017BE  FFFF               	dw	65535	; assembler added errata NOP
 14830  0017C0  6FC4               	movwf	(_enviaSMS$1226+1)& (0+255),b
 14831                           
 14832                           ; BSR set to: 0
 14833                           
 14834                           ; BSR set to: 0
 14835  0017C2  0E51               	movlw	low STR_26
 14836  0017C4  6FA1               	movwf	printf@f& (0+255),b
 14837  0017C6  0E7B               	movlw	high STR_26
 14838  0017C8  6FA2               	movwf	(printf@f+1)& (0+255),b
 14839  0017CA  C0ED  F0A3         	movff	__hor,?_printf+2
 14840  0017CE  6BA4               	clrf	(?_printf+3)& (0+255),b
 14841  0017D0  C0EE  F0A5         	movff	__min,?_printf+4
 14842  0017D4  6BA6               	clrf	(?_printf+5)& (0+255),b
 14843  0017D6  C0EF  F0A7         	movff	__sec,?_printf+6
 14844  0017DA  6BA8               	clrf	(?_printf+7)& (0+255),b
 14845  0017DC  C0EC  F0A9         	movff	__dia,?_printf+8
 14846  0017E0  6BAA               	clrf	(?_printf+9)& (0+255),b
 14847  0017E2  C0EB  F0AB         	movff	__mes,?_printf+10
 14848  0017E6  6BAC               	clrf	(?_printf+11)& (0+255),b
 14849  0017E8  C0EA  F0AD         	movff	__ano,?_printf+12
 14850  0017EC  6BAE               	clrf	(?_printf+13)& (0+255),b
 14851  0017EE  C0C3  F0AF         	movff	_enviaSMS$1226,?_printf+14
 14852  0017F2  C0C4  F0B0         	movff	_enviaSMS$1226+1,?_printf+15
 14853  0017F6  C0C1  F0B1         	movff	_enviaSMS$1225,?_printf+16
 14854  0017FA  C0C2  F0B2         	movff	_enviaSMS$1225+1,?_printf+17
 14855  0017FE  C0BF  F0B3         	movff	_enviaSMS$1224,?_printf+18
 14856  001802  C0C0  F0B4         	movff	_enviaSMS$1224+1,?_printf+19
 14857  001806  EC17  F038         	call	_printf	;wreg free
 14858  00180A                     l374:
 14859  00180A  FFFF               	dw	65535	; assembler added errata NOP
 14860                           
 14861                           ;comunicacao.h: 186: }
 14862                           ;comunicacao.h: 187: writeChar(0x1A);
 14863  00180C  0E1A               	movlw	26
 14864  00180E  0100               	movlb	0	; () banked
 14865  001810  6F80               	movwf	writeChar@hex& (0+255),b
 14866  001812  0E00               	movlw	0
 14867  001814  6F81               	movwf	(writeChar@hex+1)& (0+255),b
 14868  001816  ECB8  F035         	call	_writeChar	;wreg free
 14869                           
 14870                           ;comunicacao.h: 188: timerEtapaComunicacao = 30;
 14871  00181A  0E1E               	movlw	30
 14872  00181C  D777               	goto	L40
 14873  00181E                     l372:
 14874  00181E  FFFF               	dw	65535	; assembler added errata NOP
 14875                           
 14876                           ;comunicacao.h: 190: }
 14877                           ;comunicacao.h: 191: if (!timerEtapaComunicacao) {
 14878                           
 14879                           ; BSR set to: 0
 14880  001820  0100               	movlb	0	; () banked
 14881  001822  FFFF               	dw	65535	; assembler added errata NOP
 14882  001824  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
 14883  001826  A4D8               	btfss	status,2,c
 14884  001828  D0A3               	goto	l360
 14885  00182A  D07C               	goto	l406
 14886  00182C  FFFF               	dw	65535	; assembler added errata NOP
 14887                           
 14888                           ; BSR set to: 0
 14889                           ;comunicacao.h: 196: if (aguardaBuffer("ERROR") | aguardaBuffer("OK")) {
 14890                           
 14891                           ; BSR set to: 0
 14892  00182E  0EFA               	movlw	low STR_5
 14893  001830  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14894  001832  0E7F               	movlw	high STR_5
 14895  001834  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14896  001836  ECF9  F037         	call	_aguardaBuffer	;wreg free
 14897  00183A  0100               	movlb	0	; () banked
 14898  00183C  6FBB               	movwf	??_enviaSMS& (0+255),b
 14899  00183E  0ED8               	movlw	low STR_17
 14900  001840  6F93               	movwf	aguardaBuffer@str& (0+255),b
 14901  001842  0E7F               	movlw	high STR_17
 14902  001844  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 14903  001846  ECF9  F037         	call	_aguardaBuffer	;wreg free
 14904  00184A  0100               	movlb	0	; () banked
 14905  00184C  11BB               	iorwf	??_enviaSMS& (0+255),w,b
 14906  00184E  0900               	iorlw	0
 14907  001850  B4D8               	btfsc	status,2,c
 14908  001852  D7E7               	goto	L42
 14909                           
 14910                           ; BSR set to: 0
 14911                           ;comunicacao.h: 197: if (tipo == 2) {
 14912  001854  0E02               	movlw	2
 14913  001856  19C7               	xorwf	enviaSMS@tipo& (0+255),w,b
 14914  001858  A4D8               	btfss	status,2,c
 14915  00185A  D012               	goto	l390
 14916                           
 14917                           ; BSR set to: 0
 14918                           ;comunicacao.h: 198: if (telefoneSelecionado == 0) {
 14919  00185C  51F8               	movf	_telefoneSelecionado& (0+255),w,b
 14920  00185E  A4D8               	btfss	status,2,c
 14921  001860  D007               	goto	l391
 14922                           
 14923                           ; BSR set to: 0
 14924                           ;comunicacao.h: 199: telefoneSelecionado = 1;
 14925  001862  0E01               	movlw	1
 14926  001864  6FF8               	movwf	_telefoneSelecionado& (0+255),b
 14927                           
 14928                           ;comunicacao.h: 200: etapaComunicacao = 0;
 14929  001866  0E00               	movlw	0
 14930  001868  6E4D               	movwf	_etapaComunicacao+1,c
 14931  00186A  0E00               	movlw	0
 14932  00186C  6E4C               	movwf	_etapaComunicacao,c
 14933                           
 14934                           ;comunicacao.h: 201: } else {
 14935  00186E  D7D9               	goto	L42
 14936  001870                     l391:
 14937  001870  FFFF               	dw	65535	; assembler added errata NOP
 14938                           
 14939                           ; BSR set to: 0
 14940                           ;comunicacao.h: 202: telefoneSelecionado = 0;
 14941                           
 14942                           ; BSR set to: 0
 14943  001872  0E00               	movlw	0
 14944  001874  6FF8               	movwf	_telefoneSelecionado& (0+255),b
 14945                           
 14946                           ;comunicacao.h: 203: gsmOcupado = 0;
 14947  001876  0E00               	movlw	0
 14948  001878  6FF4               	movwf	_gsmOcupado& (0+255),b
 14949                           
 14950                           ;comunicacao.h: 204: menu_posi = 0;
 14951  00187A  0E00               	movlw	0
 14952  00187C  6FE0               	movwf	_menu_posi& (0+255),b
 14953                           
 14954                           ; BSR set to: 0
 14955                           ;comunicacao.h: 205: }
 14956                           ;comunicacao.h: 206: } else {
 14957  00187E  D7D1               	goto	L42
 14958  001880                     l390:
 14959  001880  FFFF               	dw	65535	; assembler added errata NOP
 14960                           
 14961                           ; BSR set to: 0
 14962                           ;comunicacao.h: 207: etapaComunicacao++;
 14963                           
 14964                           ; BSR set to: 0
 14965  001882  4A4C               	infsnz	_etapaComunicacao,f,c
 14966  001884  2A4D               	incf	_etapaComunicacao+1,f,c
 14967                           
 14968                           ; BSR set to: 0
 14969                           
 14970                           ; BSR set to: 0
 14971  001886  D7CD               	goto	L42
 14972  001888  FFFF               	dw	65535	; assembler added errata NOP
 14973                           
 14974                           ; BSR set to: 0
 14975                           ;comunicacao.h: 215: limparBuffer();
 14976                           
 14977                           ; BSR set to: 0
 14978  00188A  EC16  F037         	call	_limparBuffer	;wreg free
 14979                           
 14980                           ;comunicacao.h: 216: printf("ATD 0%s;\r\n", telefoneSelecionado == 0 ? tel1 : tel2);
 14981  00188E  0100               	movlb	0	; () banked
 14982  001890  51F8               	movf	_telefoneSelecionado& (0+255),w,b
 14983  001892  B4D8               	btfsc	status,2,c
 14984  001894  D004               	goto	l397
 14985                           
 14986                           ; BSR set to: 0
 14987  001896  0EA9               	movlw	low _tel2
 14988  001898  6FC5               	movwf	_enviaSMS$1231& (0+255),b
 14989  00189A  0E01               	movlw	high _tel2
 14990  00189C  D004               	goto	L39
 14991  00189E                     l397:
 14992  00189E  FFFF               	dw	65535	; assembler added errata NOP
 14993                           
 14994                           ; BSR set to: 0
 14995                           
 14996                           ; BSR set to: 0
 14997  0018A0  0EB5               	movlw	low _tel1
 14998  0018A2  6FC5               	movwf	_enviaSMS$1231& (0+255),b
 14999  0018A4  0E01               	movlw	high _tel1
 15000  0018A6                     L39:
 15001  0018A6  FFFF               	dw	65535	; assembler added errata NOP
 15002  0018A8  6FC6               	movwf	(_enviaSMS$1231+1)& (0+255),b
 15003                           
 15004                           ; BSR set to: 0
 15005                           
 15006                           ; BSR set to: 0
 15007  0018AA  0E20               	movlw	low STR_35
 15008  0018AC  6FA1               	movwf	printf@f& (0+255),b
 15009  0018AE  0E7F               	movlw	high STR_35
 15010  0018B0  6FA2               	movwf	(printf@f+1)& (0+255),b
 15011  0018B2  C0C5  F0A3         	movff	_enviaSMS$1231,?_printf+2
 15012  0018B6  C0C6  F0A4         	movff	_enviaSMS$1231+1,?_printf+3
 15013  0018BA  EC17  F038         	call	_printf	;wreg free
 15014                           
 15015                           ;comunicacao.h: 217: timerEtapaComunicacao = 35;
 15016  0018BE  0E23               	movlw	35
 15017  0018C0  0100               	movlb	0	; () banked
 15018  0018C2  6FF6               	movwf	_timerEtapaComunicacao& (0+255),b
 15019                           
 15020                           ; BSR set to: 0
 15021                           ;comunicacao.h: 218: etapaComunicacao++;
 15022  0018C4  4A4C               	infsnz	_etapaComunicacao,f,c
 15023  0018C6  2A4D               	incf	_etapaComunicacao+1,f,c
 15024                           
 15025                           ;comunicacao.h: 219: break;
 15026  0018C8  D053               	goto	l360
 15027  0018CA  FFFF               	dw	65535	; assembler added errata NOP
 15028                           
 15029                           ; BSR set to: 0
 15030                           ;comunicacao.h: 221: if (aguardaBuffer("NO DIALTONE") || !timerEtapaComunicacao) {
 15031                           
 15032                           ; BSR set to: 0
 15033  0018CC  0EF0               	movlw	low STR_36
 15034  0018CE  6F93               	movwf	aguardaBuffer@str& (0+255),b
 15035  0018D0  0E7E               	movlw	high STR_36
 15036  0018D2  6F94               	movwf	(aguardaBuffer@str+1)& (0+255),b
 15037  0018D4  ECF9  F037         	call	_aguardaBuffer	;wreg free
 15038  0018D8  0900               	iorlw	0
 15039  0018DA  A4D8               	btfss	status,2,c
 15040  0018DC  D004               	goto	u6220
 15041  0018DE  0100               	movlb	0	; () banked
 15042  0018E0  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
 15043  0018E2  A4D8               	btfss	status,2,c
 15044  0018E4  D045               	goto	l360
 15045  0018E6                     u6220:
 15046  0018E6  FFFF               	dw	65535	; assembler added errata NOP
 15047                           
 15048                           ;comunicacao.h: 222: limparBuffer();
 15049                           
 15050                           ; BSR set to: 0
 15051  0018E8  EC16  F037         	call	_limparBuffer	;wreg free
 15052                           
 15053                           ;comunicacao.h: 223: printf("ATH0\r\n");
 15054  0018EC  0EAA               	movlw	low STR_21
 15055  0018EE  0100               	movlb	0	; () banked
 15056  0018F0  6FA1               	movwf	printf@f& (0+255),b
 15057  0018F2  0E7F               	movlw	high STR_21
 15058  0018F4  6FA2               	movwf	(printf@f+1)& (0+255),b
 15059  0018F6  EC17  F038         	call	_printf	;wreg free
 15060                           
 15061                           ;comunicacao.h: 224: delay(550);
 15062  0018FA  0E02               	movlw	2
 15063  0018FC  0100               	movlb	0	; () banked
 15064  0018FE  6F81               	movwf	(delay@x+1)& (0+255),b
 15065  001900  0E26               	movlw	38
 15066  001902  6F80               	movwf	delay@x& (0+255),b
 15067  001904  ECFB  F036         	call	_delay	;wreg free
 15068                           
 15069                           ;comunicacao.h: 225: if (telefoneSelecionado == 0) {
 15070  001908  0100               	movlb	0	; () banked
 15071  00190A  51F8               	movf	_telefoneSelecionado& (0+255),w,b
 15072  00190C  A4D8               	btfss	status,2,c
 15073  00190E  D003               	goto	l404
 15074                           
 15075                           ; BSR set to: 0
 15076                           ;comunicacao.h: 226: telefoneSelecionado = 1;
 15077  001910  0E01               	movlw	1
 15078  001912  6FF8               	movwf	_telefoneSelecionado& (0+255),b
 15079                           
 15080                           ;comunicacao.h: 227: } else {
 15081  001914  D007               	goto	l406
 15082  001916                     l404:
 15083  001916  FFFF               	dw	65535	; assembler added errata NOP
 15084                           
 15085                           ; BSR set to: 0
 15086                           ;comunicacao.h: 228: telefoneSelecionado = 0;
 15087                           
 15088                           ; BSR set to: 0
 15089  001918  0E00               	movlw	0
 15090  00191A  6FF8               	movwf	_telefoneSelecionado& (0+255),b
 15091                           
 15092                           ;comunicacao.h: 229: gsmOcupado = 0;
 15093  00191C  0E00               	movlw	0
 15094  00191E  6FF4               	movwf	_gsmOcupado& (0+255),b
 15095                           
 15096                           ;comunicacao.h: 230: timerReenvioSMS = 100;
 15097  001920  0E64               	movlw	100
 15098  001922  6FF7               	movwf	_timerReenvioSMS& (0+255),b
 15099  001924                     l406:
 15100  001924  FFFF               	dw	65535	; assembler added errata NOP
 15101                           
 15102                           ; BSR set to: 0
 15103                           
 15104                           ; BSR set to: 0
 15105  001926  0E00               	movlw	0
 15106  001928  6E4D               	movwf	_etapaComunicacao+1,c
 15107  00192A  0E00               	movlw	0
 15108  00192C  6E4C               	movwf	_etapaComunicacao,c
 15109                           
 15110                           ; BSR set to: 0
 15111                           ;comunicacao.h: 238: }
 15112                           
 15113                           ;comunicacao.h: 237: break;
 15114  00192E  D020               	goto	l360
 15115  001930                     l358:
 15116  001930  FFFF               	dw	65535	; assembler added errata NOP
 15117                           
 15118                           ; BSR set to: 0
 15119                           
 15120                           ; BSR set to: 0
 15121  001932  C04C  F0BB         	movff	_etapaComunicacao,??_enviaSMS
 15122  001936  C04D  F0BC         	movff	_etapaComunicacao+1,??_enviaSMS+1
 15123                           
 15124                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15125                           ; Switch size 1, requested type "space"
 15126                           ; Number of cases is 1, Range of values is 0 to 0
 15127                           ; switch strategies available:
 15128                           ; Name         Instructions Cycles
 15129                           ; simple_byte            4     3 (average)
 15130                           ;	Chosen strategy is simple_byte
 15131  00193A  51BC               	movf	(??_enviaSMS+1)& (0+255),w,b
 15132  00193C  0A00               	xorlw	0	; case 0
 15133  00193E  A4D8               	btfss	status,2,c
 15134  001940  D7F1               	goto	l406
 15135                           
 15136                           ; BSR set to: 0
 15137                           ; Switch size 1, requested type "space"
 15138                           ; Number of cases is 7, Range of values is 0 to 6
 15139                           ; switch strategies available:
 15140                           ; Name         Instructions Cycles
 15141                           ; simple_byte           22    12 (average)
 15142                           ;	Chosen strategy is simple_byte
 15143  001942  51BB               	movf	??_enviaSMS& (0+255),w,b
 15144  001944  0A00               	xorlw	0	; case 0
 15145  001946  B4D8               	btfsc	status,2,c
 15146  001948  D679               	goto	l359
 15147  00194A  0A01               	xorlw	1	; case 1
 15148  00194C  B4D8               	btfsc	status,2,c
 15149  00194E  D686               	goto	l361
 15150  001950  0A03               	xorlw	3	; case 2
 15151  001952  B4D8               	btfsc	status,2,c
 15152  001954  D6B5               	goto	l364
 15153  001956  0A01               	xorlw	1	; case 3
 15154  001958  B4D8               	btfsc	status,2,c
 15155  00195A  D6DE               	goto	l371
 15156  00195C  0A07               	xorlw	7	; case 4
 15157  00195E  B4D8               	btfsc	status,2,c
 15158  001960  D765               	goto	l388
 15159  001962  0A01               	xorlw	1	; case 5
 15160  001964  B4D8               	btfsc	status,2,c
 15161  001966  D790               	goto	l395
 15162  001968  0A03               	xorlw	3	; case 6
 15163  00196A  B4D8               	btfsc	status,2,c
 15164  00196C  D7AE               	goto	l400
 15165  00196E  D7DA               	goto	l406
 15166  001970                     l360:
 15167  001970  FFFF               	dw	65535	; assembler added errata NOP
 15168                           
 15169                           ; BSR set to: 0
 15170  001972  0012               	return		;funcret
 15171  001974  FFFF               	dw	65535	; errata NOP
 15172  001976                     __end_of_enviaSMS:
 15173                           	opt stack 0
 15174                           tblptru	equ	0xFF8
 15175                           tblptrh	equ	0xFF7
 15176                           tblptrl	equ	0xFF6
 15177                           tablat	equ	0xFF5
 15178                           prodh	equ	0xFF4
 15179                           prodl	equ	0xFF3
 15180                           intcon	equ	0xFF2
 15181                           postinc0	equ	0xFEE
 15182                           wreg	equ	0xFE8
 15183                           postdec1	equ	0xFE5
 15184                           fsr1l	equ	0xFE1
 15185                           indf2	equ	0xFDF
 15186                           postinc2	equ	0xFDE
 15187                           fsr2h	equ	0xFDA
 15188                           fsr2l	equ	0xFD9
 15189                           status	equ	0xFD8
 15190                           
 15191 ;; *************** function _writeChar *****************
 15192 ;; Defined at:
 15193 ;;		line 21 in file "serial.h"
 15194 ;; Parameters:    Size  Location     Type
 15195 ;;  hex             2    0[BANK0 ] PTR unsigned char 
 15196 ;;		 -> RAM(1535), 
 15197 ;; Auto vars:     Size  Location     Type
 15198 ;;		None
 15199 ;; Return value:  Size  Location     Type
 15200 ;;                  1    wreg      void 
 15201 ;; Registers used:
 15202 ;;		None
 15203 ;; Tracked objects:
 15204 ;;		On entry : 0/0
 15205 ;;		On exit  : 0/0
 15206 ;;		Unchanged: 0/0
 15207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15208 ;;      Params:         0       2       0       0       0       0       0
 15209 ;;      Locals:         0       0       0       0       0       0       0
 15210 ;;      Temps:          0       0       0       0       0       0       0
 15211 ;;      Totals:         0       2       0       0       0       0       0
 15212 ;;Total ram usage:        2 bytes
 15213 ;; Hardware stack levels used:    1
 15214 ;; Hardware stack levels required when called:    6
 15215 ;; This function calls:
 15216 ;;		Nothing
 15217 ;; This function is called by:
 15218 ;;		_getSinalSIM800L
 15219 ;;		_comunicarTeste
 15220 ;;		_enviaSMS
 15221 ;; This function uses a non-reentrant model
 15222 ;;
 15223                           
 15224                           	psect	text46
 15225  006B70                     __ptext46:
 15226                           	opt stack 0
 15227  006B70                     _writeChar:
 15228                           	opt stack 0
 15229  006B70  FFFF               	dw	65535	; assembler added errata NOP
 15230                           
 15231                           ;serial.h: 22: while (!TXSTAbits.TRMT);
 15232                           
 15233                           ;incstack = 0
 15234  006B72  A2AC               	btfss	4012,1,c	;volatile
 15235  006B74  D7FD               	goto	_writeChar
 15236                           
 15237                           ;serial.h: 23: TXREG = hex;
 15238  006B76  C080  FFAD         	movff	writeChar@hex,4013	;volatile
 15239  006B7A  0012               	return		;funcret
 15240  006B7C  FFFF               	dw	65535	; errata NOP
 15241  006B7E                     __end_of_writeChar:
 15242                           	opt stack 0
 15243                           tblptru	equ	0xFF8
 15244                           tblptrh	equ	0xFF7
 15245                           tblptrl	equ	0xFF6
 15246                           tablat	equ	0xFF5
 15247                           prodh	equ	0xFF4
 15248                           prodl	equ	0xFF3
 15249                           intcon	equ	0xFF2
 15250                           postinc0	equ	0xFEE
 15251                           wreg	equ	0xFE8
 15252                           postdec1	equ	0xFE5
 15253                           fsr1l	equ	0xFE1
 15254                           indf2	equ	0xFDF
 15255                           postinc2	equ	0xFDE
 15256                           fsr2h	equ	0xFDA
 15257                           fsr2l	equ	0xFD9
 15258                           status	equ	0xFD8
 15259                           
 15260 ;; *************** function _printf *****************
 15261 ;; Defined at:
 15262 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
 15263 ;; Parameters:    Size  Location     Type
 15264 ;;  f               2   33[BANK0 ] PTR const unsigned char 
 15265 ;;		 -> STR_37(7), STR_35(11), STR_26(104), STR_25(63), 
 15266 ;;		 -> STR_23(18), STR_21(7), STR_20(12), STR_18(5), 
 15267 ;;		 -> STR_14(126), STR_12(18), STR_10(12), STR_8(5), 
 15268 ;;		 -> STR_4(5), STR_3(9), 
 15269 ;; Auto vars:     Size  Location     Type
 15270 ;;  pb              4   55[BANK0 ] struct __prbuf
 15271 ;;  ap              2   53[BANK0 ] PTR void [1]
 15272 ;;		 -> ?_sprintf(2), ?_printf(2), 
 15273 ;; Return value:  Size  Location     Type
 15274 ;;                  2   33[BANK0 ] int 
 15275 ;; Registers used:
 15276 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15277 ;; Tracked objects:
 15278 ;;		On entry : 0/0
 15279 ;;		On exit  : 0/0
 15280 ;;		Unchanged: 0/0
 15281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15282 ;;      Params:         0      20       0       0       0       0       0
 15283 ;;      Locals:         0       6       0       0       0       0       0
 15284 ;;      Temps:          0       0       0       0       0       0       0
 15285 ;;      Totals:         0      26       0       0       0       0       0
 15286 ;;Total ram usage:       26 bytes
 15287 ;; Hardware stack levels used:    1
 15288 ;; Hardware stack levels required when called:    8
 15289 ;; This function calls:
 15290 ;;		__doprnt
 15291 ;; This function is called by:
 15292 ;;		_getSinalSIM800L
 15293 ;;		_comunicarTeste
 15294 ;;		_enviaSMS
 15295 ;; This function uses a non-reentrant model
 15296 ;;
 15297                           
 15298                           	psect	text47
 15299  00702E                     __ptext47:
 15300                           	opt stack 0
 15301  00702E                     _printf:
 15302                           	opt stack 0
 15303  00702E  FFFF               	dw	65535	; assembler added errata NOP
 15304                           
 15305                           ;incstack = 0
 15306  007030  0E00               	movlw	0
 15307  007032  0100               	movlb	0	; () banked
 15308  007034  6FB7               	movwf	printf@pb& (0+255),b
 15309  007036  0E00               	movlw	0
 15310  007038  6FB8               	movwf	(printf@pb+1)& (0+255),b
 15311  00703A  0E90               	movlw	low _putch
 15312  00703C  6FB9               	movwf	(printf@pb+2)& (0+255),b
 15313  00703E  0E6B               	movlw	high _putch
 15314  007040  6FBA               	movwf	(printf@pb+3)& (0+255),b
 15315  007042  0EA3               	movlw	low (?_printf+2)
 15316  007044  6FB5               	movwf	printf@ap& (0+255),b
 15317  007046  0E00               	movlw	high (?_printf+2)
 15318  007048  6FB6               	movwf	(printf@ap+1)& (0+255),b
 15319                           
 15320                           ; BSR set to: 0
 15321                           ;	Return value of _printf is never used
 15322  00704A  0EB7               	movlw	low printf@pb
 15323  00704C  6F8C               	movwf	__doprnt@pb& (0+255),b
 15324  00704E  0E00               	movlw	high printf@pb
 15325  007050  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
 15326  007052  C0A1  F08E         	movff	printf@f,__doprnt@f
 15327  007056  C0A2  F08F         	movff	printf@f+1,__doprnt@f+1
 15328  00705A  0EB5               	movlw	low printf@ap
 15329  00705C  6F90               	movwf	__doprnt@ap& (0+255),b
 15330  00705E  0E00               	movlw	high printf@ap
 15331  007060  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
 15332  007062  EC8E  F000         	call	__doprnt	;wreg free
 15333  007066  0012               	return		;funcret
 15334  007068  FFFF               	dw	65535	; errata NOP
 15335  00706A                     __end_of_printf:
 15336                           	opt stack 0
 15337                           tblptru	equ	0xFF8
 15338                           tblptrh	equ	0xFF7
 15339                           tblptrl	equ	0xFF6
 15340                           tablat	equ	0xFF5
 15341                           prodh	equ	0xFF4
 15342                           prodl	equ	0xFF3
 15343                           intcon	equ	0xFF2
 15344                           postinc0	equ	0xFEE
 15345                           wreg	equ	0xFE8
 15346                           postdec1	equ	0xFE5
 15347                           fsr1l	equ	0xFE1
 15348                           indf2	equ	0xFDF
 15349                           postinc2	equ	0xFDE
 15350                           fsr2h	equ	0xFDA
 15351                           fsr2l	equ	0xFD9
 15352                           status	equ	0xFD8
 15353                           
 15354 ;; *************** function __doprnt *****************
 15355 ;; Defined at:
 15356 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 15357 ;; Parameters:    Size  Location     Type
 15358 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
 15359 ;;		 -> sprintf@pb(4), printf@pb(4), 
 15360 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15361 ;;		 -> intToFloatStr@conv(4), STR_122(15), STR_121(12), STR_120(10), 
 15362 ;;		 -> STR_119(18), STR_118(10), STR_117(18), STR_116(16), 
 15363 ;;		 -> STR_115(10), STR_113(3), STR_112(14), STR_111(20), 
 15364 ;;		 -> STR_110(8), STR_109(15), STR_108(15), STR_107(11), 
 15365 ;;		 -> STR_106(11), STR_105(18), STR_104(5), STR_103(12), 
 15366 ;;		 -> STR_102(5), STR_101(14), STR_100(19), STR_97(3), 
 15367 ;;		 -> STR_96(7), STR_95(7), STR_93(12), STR_92(17), 
 15368 ;;		 -> STR_91(20), STR_90(8), STR_87(14), STR_84(14), 
 15369 ;;		 -> STR_83(11), STR_80(10), STR_79(31), STR_76(11), 
 15370 ;;		 -> STR_75(20), STR_74(20), STR_73(21), STR_72(15), 
 15371 ;;		 -> STR_71(6), STR_70(15), STR_69(6), STR_68(20), 
 15372 ;;		 -> STR_67(15), STR_66(19), STR_65(20), STR_64(21), 
 15373 ;;		 -> STR_63(21), STR_62(18), STR_61(20), STR_60(12), 
 15374 ;;		 -> STR_59(17), STR_58(21), STR_57(16), STR_54(15), 
 15375 ;;		 -> STR_51(15), STR_48(11), STR_47(17), STR_44(9), 
 15376 ;;		 -> STR_43(19), STR_42(19), STR_41(16), STR_40(15), 
 15377 ;;		 -> STR_39(15), STR_38(20), STR_37(7), STR_35(11), 
 15378 ;;		 -> STR_26(104), STR_25(63), STR_23(18), STR_21(7), 
 15379 ;;		 -> STR_20(12), STR_18(5), STR_14(126), STR_12(18), 
 15380 ;;		 -> STR_10(12), STR_8(5), STR_4(5), STR_3(9), 
 15381 ;;		 -> STR_2(5), STR_1(5), 
 15382 ;;  ap              2   16[BANK0 ] PTR PTR void 
 15383 ;;		 -> sprintf@ap(2), printf@ap(2), 
 15384 ;; Auto vars:     Size  Location     Type
 15385 ;;  tmpval          4    0        struct .
 15386 ;;  width           2   30[BANK0 ] int 
 15387 ;;  cp              2   28[BANK0 ] PTR const unsigned char 
 15388 ;;		 -> ?_sprintf(2), ?_printf(2), STR_123(7), _doprnt@c(1), 
 15389 ;;		 -> intToFloatStr@end(4), STR_114(12), STR_99(17), STR_98(13), 
 15390 ;;		 -> STR_94(12), STR_89(5), STR_88(3), STR_86(5), 
 15391 ;;		 -> STR_85(3), STR_82(5), STR_81(3), STR_78(4), 
 15392 ;;		 -> STR_77(4), STR_56(5), STR_55(3), STR_53(5), 
 15393 ;;		 -> STR_52(3), line3(21), STR_50(5), STR_49(3), 
 15394 ;;		 -> STR_46(13), STR_45(10), line2(21), line1(21), 
 15395 ;;		 -> line4(21), STR_32(6), STR_31(3), STR_30(6), 
 15396 ;;		 -> STR_29(3), STR_28(6), STR_27(3), STR_15(12), 
 15397 ;;		 -> tel2(12), tel1(12), bufferAUX(20), NULL(0), 
 15398 ;;  len             2   25[BANK0 ] unsigned int 
 15399 ;;  val             2   23[BANK0 ] unsigned int 
 15400 ;;  c               1   32[BANK0 ] char 
 15401 ;;  flag            1   27[BANK0 ] unsigned char 
 15402 ;;  prec            1   22[BANK0 ] char 
 15403 ;; Return value:  Size  Location     Type
 15404 ;;                  2   12[BANK0 ] int 
 15405 ;; Registers used:
 15406 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15407 ;; Tracked objects:
 15408 ;;		On entry : 0/0
 15409 ;;		On exit  : 0/0
 15410 ;;		Unchanged: 0/0
 15411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15412 ;;      Params:         0       6       0       0       0       0       0
 15413 ;;      Locals:         0      11       0       0       0       0       0
 15414 ;;      Temps:          0       4       0       0       0       0       0
 15415 ;;      Totals:         0      21       0       0       0       0       0
 15416 ;;Total ram usage:       21 bytes
 15417 ;; Hardware stack levels used:    1
 15418 ;; Hardware stack levels required when called:    7
 15419 ;; This function calls:
 15420 ;;		Absolute function
 15421 ;;		___lwdiv
 15422 ;;		___lwmod
 15423 ;;		___wmul
 15424 ;;		_isdigit
 15425 ;;		_putch
 15426 ;; This function is called by:
 15427 ;;		_printf
 15428 ;;		_sprintf
 15429 ;; This function uses a non-reentrant model
 15430 ;;
 15431                           
 15432                           	psect	text48
 15433  00011C                     __ptext48:
 15434                           	opt stack 0
 15435  00011C                     __doprnt:
 15436                           	opt stack 0
 15437  00011C  FFFF               	dw	65535	; assembler added errata NOP
 15438                           
 15439                           ;doprnt.c: 499: signed char c;
 15440                           ;doprnt.c: 501: int width;
 15441                           ;doprnt.c: 506: signed char prec;
 15442                           ;doprnt.c: 508: unsigned char flag;
 15443                           ;doprnt.c: 523: union {
 15444                           ;doprnt.c: 524: unsigned long vd;
 15445                           ;doprnt.c: 525: double integ;
 15446                           ;doprnt.c: 526: } tmpval;
 15447                           ;doprnt.c: 528: unsigned int val;
 15448                           ;doprnt.c: 529: unsigned len;
 15449                           ;doprnt.c: 530: const char * cp;
 15450                           ;doprnt.c: 536: while(c = *f++) {
 15451                           
 15452                           ;incstack = 0
 15453  00011E  D3D7               	goto	u5460
 15454  000120  FFFF               	dw	65535	; assembler added errata NOP
 15455                           
 15456                           ;doprnt.c: 538: if(c != '%')
 15457  000122  0E25               	movlw	37
 15458  000124  0100               	movlb	0	; () banked
 15459  000126  19A0               	xorwf	__doprnt@c& (0+255),w,b
 15460  000128  B4D8               	btfsc	status,2,c
 15461  00012A  D037               	goto	l1076
 15462                           
 15463                           ; BSR set to: 0
 15464                           ;doprnt.c: 540: {
 15465                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 15466  00012C  EE20 F002          	lfsr	2,2
 15467  000130  518C               	movf	__doprnt@pb& (0+255),w,b
 15468  000132  26D9               	addwf	fsr2l,f,c
 15469  000134  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15470  000136  22DA               	addwfc	fsr2h,f,c
 15471  000138  50DE               	movf	postinc2,w,c
 15472  00013A  10DE               	iorwf	postinc2,w,c
 15473  00013C  B4D8               	btfsc	status,2,c
 15474  00013E  D016               	goto	l1077
 15475                           
 15476                           ; BSR set to: 0
 15477  000140  EE20 F002          	lfsr	2,2
 15478  000144  518C               	movf	__doprnt@pb& (0+255),w,b
 15479  000146  26D9               	addwf	fsr2l,f,c
 15480  000148  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15481  00014A  22DA               	addwfc	fsr2h,f,c
 15482  00014C  D801               	call	u5028
 15483  00014E  D3BF               	goto	u5460
 15484  000150                     u5028:
 15485  000150  FFFF               	dw	65535	; assembler added errata NOP
 15486  000152  0005               	push	
 15487  000154  6EFA               	movwf	pclath,c
 15488  000156  50DE               	movf	postinc2,w,c
 15489  000158  6EFD               	movwf	tosl,c
 15490  00015A  50DE               	movf	postinc2,w,c
 15491  00015C  6EFE               	movwf	tosh,c
 15492  00015E  50F8               	movf	tblptru,w,c
 15493  000160  6EFF               	movwf	tosu,c
 15494  000162  50FA               	movf	pclath,w,c
 15495  000164  51A0               	movf	__doprnt@c& (0+255),w,b
 15496  000166  0012               	return		;indir
 15497  000168  FFFF               	dw	65535	; errata NOP
 15498  00016A  D3B1               	goto	u5460
 15499  00016C                     l1077:
 15500  00016C  FFFF               	dw	65535	; assembler added errata NOP
 15501  00016E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15502  000172  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15503  000176  CFDE F092          	movff	postinc2,??__doprnt
 15504  00017A  CFDD F093          	movff	postdec2,??__doprnt+1
 15505  00017E  C092  FFD9         	movff	??__doprnt,fsr2l
 15506  000182  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15507  000186  C0A0  FFDF         	movff	__doprnt@c,indf2
 15508  00018A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15509  00018E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15510  000192  2ADE               	incf	postinc2,f,c
 15511  000194  0E00               	movlw	0
 15512  000196  22DD               	addwfc	postdec2,f,c
 15513                           
 15514                           ;doprnt.c: 542: continue;
 15515  000198  D39A               	goto	u5460
 15516  00019A                     l1076:
 15517  00019A  FFFF               	dw	65535	; assembler added errata NOP
 15518                           
 15519                           ;doprnt.c: 543: }
 15520                           ;doprnt.c: 546: width = 0;
 15521  00019C  0E00               	movlw	0
 15522  00019E  0100               	movlb	0	; () banked
 15523  0001A0  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15524  0001A2  0E00               	movlw	0
 15525  0001A4  6F9E               	movwf	__doprnt@width& (0+255),b
 15526                           
 15527                           ;doprnt.c: 548: flag = 0;
 15528  0001A6  0E00               	movlw	0
 15529  0001A8  6F9B               	movwf	__doprnt@flag& (0+255),b
 15530                           
 15531                           ; BSR set to: 0
 15532                           ;doprnt.c: 551: switch(*f) {
 15533                           
 15534                           ;doprnt.c: 550: for(;;) {
 15535  0001AA  D005               	goto	l1080
 15536  0001AC  FFFF               	dw	65535	; assembler added errata NOP
 15537                           
 15538                           ;doprnt.c: 580: flag |= 0x04;
 15539                           
 15540                           ; BSR set to: 0
 15541  0001AE  0100               	movlb	0	; () banked
 15542  0001B0  859B               	bsf	__doprnt@flag& (0+255),2,b
 15543                           
 15544                           ;doprnt.c: 581: f++;
 15545  0001B2  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15546  0001B4  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15547  0001B6                     l1080:
 15548  0001B6  FFFF               	dw	65535	; assembler added errata NOP
 15549                           
 15550                           ; BSR set to: 0
 15551  0001B8  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15552  0001BC  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15553  0001C0  6AF8               	clrf	tblptru,c
 15554  0001C2  0E05               	movlw	(high __ramtop+-1)
 15555  0001C4  64F7               	cpfsgt	tblptrh,c
 15556  0001C6  D004               	bra	u5037
 15557  0001C8  0008               	tblrd		*
 15558  0001CA  FFFF               	dw	65535	; errata NOP
 15559  0001CC  50F5               	movf	tablat,w,c
 15560  0001CE  D005               	bra	u5030
 15561  0001D0                     u5037:
 15562  0001D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 15563  0001D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 15564  0001D8  50EF               	movf	indf0,w,c
 15565  0001DA                     u5030:
 15566                           
 15567                           ; Switch size 1, requested type "space"
 15568                           ; Number of cases is 1, Range of values is 48 to 48
 15569                           ; switch strategies available:
 15570                           ; Name         Instructions Cycles
 15571                           ; simple_byte            4     3 (average)
 15572                           ;	Chosen strategy is simple_byte
 15573  0001DA  0A30               	xorlw	48	; case 48
 15574  0001DC  B4D8               	btfsc	status,2,c
 15575  0001DE  D7E6               	goto	l1081
 15576                           
 15577                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15578                           
 15579                           ;doprnt.c: 586: }
 15580                           
 15581                           ;doprnt.c: 585: break;
 15582  0001E0  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15583  0001E4  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15584  0001E8  6AF8               	clrf	tblptru,c
 15585  0001EA  0E05               	movlw	(high __ramtop+-1)
 15586  0001EC  64F7               	cpfsgt	tblptrh,c
 15587  0001EE  D004               	bra	u5047
 15588  0001F0  0008               	tblrd		*
 15589  0001F2  FFFF               	dw	65535	; errata NOP
 15590  0001F4  50F5               	movf	tablat,w,c
 15591  0001F6  D005               	bra	u5040
 15592  0001F8                     u5047:
 15593  0001F8  CFF6 FFE9          	movff	tblptrl,fsr0l
 15594  0001FC  CFF7 FFEA          	movff	tblptrh,fsr0h
 15595  000200  50EF               	movf	indf0,w,c
 15596  000202                     u5040:
 15597  000202  EC3C  F036         	call	_isdigit
 15598  000206  A0D8               	btfss	status,0,c
 15599  000208  D16B               	goto	l1088
 15600                           
 15601                           ;doprnt.c: 598: width = 0;
 15602  00020A  0E00               	movlw	0
 15603  00020C  0100               	movlb	0	; () banked
 15604  00020E  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15605  000210  0E00               	movlw	0
 15606  000212  6F9E               	movwf	__doprnt@width& (0+255),b
 15607  000214  FFFF               	dw	65535	; assembler added errata NOP
 15608                           
 15609                           ;doprnt.c: 600: width *= 10;
 15610                           
 15611                           ; BSR set to: 0
 15612  000216  C09E  F080         	movff	__doprnt@width,___wmul@multiplier
 15613  00021A  C09F  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
 15614  00021E  0E00               	movlw	0
 15615  000220  0100               	movlb	0	; () banked
 15616  000222  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15617  000224  0E0A               	movlw	10
 15618  000226  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15619  000228  EC66  F036         	call	___wmul	;wreg free
 15620  00022C  C080  F09E         	movff	?___wmul,__doprnt@width
 15621  000230  C081  F09F         	movff	?___wmul+1,__doprnt@width+1
 15622                           
 15623                           ;doprnt.c: 601: width += *f++ - '0';
 15624  000234  0ED0               	movlw	208
 15625  000236  0100               	movlb	0	; () banked
 15626  000238  6F92               	movwf	??__doprnt& (0+255),b
 15627  00023A  0EFF               	movlw	255
 15628  00023C  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15629  00023E  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15630  000242  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15631  000246  6AF8               	clrf	tblptru,c
 15632  000248  0E05               	movlw	(high __ramtop+-1)
 15633  00024A  64F7               	cpfsgt	tblptrh,c
 15634  00024C  D004               	bra	u5067
 15635  00024E  0008               	tblrd		*
 15636  000250  FFFF               	dw	65535	; errata NOP
 15637  000252  50F5               	movf	tablat,w,c
 15638  000254  D005               	bra	u5060
 15639  000256                     u5067:
 15640  000256  CFF6 FFE9          	movff	tblptrl,fsr0l
 15641  00025A  CFF7 FFEA          	movff	tblptrh,fsr0h
 15642  00025E  50EF               	movf	indf0,w,c
 15643  000260                     u5060:
 15644  000260  0100               	movlb	0	; () banked
 15645  000262  6F94               	movwf	(??__doprnt+2)& (0+255),b
 15646  000264  6B95               	clrf	(??__doprnt+3)& (0+255),b
 15647  000266  5192               	movf	??__doprnt& (0+255),w,b
 15648  000268  2794               	addwf	(??__doprnt+2)& (0+255),f,b
 15649  00026A  5193               	movf	(??__doprnt+1)& (0+255),w,b
 15650  00026C  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
 15651  00026E  5194               	movf	(??__doprnt+2)& (0+255),w,b
 15652  000270  279E               	addwf	__doprnt@width& (0+255),f,b
 15653  000272  5195               	movf	(??__doprnt+3)& (0+255),w,b
 15654  000274  239F               	addwfc	(__doprnt@width+1)& (0+255),f,b
 15655                           
 15656                           ; BSR set to: 0
 15657  000276  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 15658  000278  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 15659                           
 15660                           ; BSR set to: 0
 15661                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15662  00027A  C08E  FFF6         	movff	__doprnt@f,tblptrl
 15663  00027E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 15664  000282  6AF8               	clrf	tblptru,c
 15665  000284  0E05               	movlw	(high __ramtop+-1)
 15666  000286  64F7               	cpfsgt	tblptrh,c
 15667  000288  D004               	bra	u5077
 15668  00028A  0008               	tblrd		*
 15669  00028C  FFFF               	dw	65535	; errata NOP
 15670  00028E  50F5               	movf	tablat,w,c
 15671  000290  D005               	bra	u5070
 15672  000292                     u5077:
 15673  000292  CFF6 FFE9          	movff	tblptrl,fsr0l
 15674  000296  CFF7 FFEA          	movff	tblptrh,fsr0h
 15675  00029A  50EF               	movf	indf0,w,c
 15676  00029C                     u5070:
 15677  00029C  EC3C  F036         	call	_isdigit
 15678  0002A0  A0D8               	btfss	status,0,c
 15679  0002A2  D11E               	goto	l1088
 15680  0002A4  D7B7               	goto	l1086
 15681  0002A6  FFFF               	dw	65535	; assembler added errata NOP
 15682                           
 15683                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15684  0002A8  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15685  0002AC  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15686  0002B0  CFDF F092          	movff	indf2,??__doprnt
 15687  0002B4  0E02               	movlw	2
 15688  0002B6  26DE               	addwf	postinc2,f,c
 15689  0002B8  CFDF F093          	movff	indf2,??__doprnt+1
 15690  0002BC  0E00               	movlw	0
 15691  0002BE  22DD               	addwfc	postdec2,f,c
 15692  0002C0  C092  FFD9         	movff	??__doprnt,fsr2l
 15693  0002C4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15694  0002C8  CFDE F09C          	movff	postinc2,__doprnt@cp
 15695  0002CC  CFDD F09D          	movff	postdec2,__doprnt@cp+1
 15696                           
 15697                           ;doprnt.c: 740: if(!cp)
 15698  0002D0  0100               	movlb	0	; () banked
 15699  0002D2  519C               	movf	__doprnt@cp& (0+255),w,b
 15700  0002D4  119D               	iorwf	(__doprnt@cp+1)& (0+255),w,b
 15701  0002D6  A4D8               	btfss	status,2,c
 15702  0002D8  D004               	goto	l1095
 15703                           
 15704                           ; BSR set to: 0
 15705                           ;doprnt.c: 741: cp = "(null)";
 15706  0002DA  0EA3               	movlw	low STR_123
 15707  0002DC  6F9C               	movwf	__doprnt@cp& (0+255),b
 15708  0002DE  0E7F               	movlw	high STR_123
 15709  0002E0  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 15710  0002E2                     l1095:
 15711  0002E2  FFFF               	dw	65535	; assembler added errata NOP
 15712                           
 15713                           ; BSR set to: 0
 15714                           ;doprnt.c: 745: len = 0;
 15715                           
 15716                           ; BSR set to: 0
 15717  0002E4  0E00               	movlw	0
 15718  0002E6  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 15719  0002E8  0E00               	movlw	0
 15720  0002EA  6F99               	movwf	__doprnt@len& (0+255),b
 15721                           
 15722                           ;doprnt.c: 746: while(cp[len])
 15723  0002EC  D004               	goto	l1096
 15724  0002EE  FFFF               	dw	65535	; assembler added errata NOP
 15725                           
 15726                           ;doprnt.c: 747: len++;
 15727                           
 15728                           ; BSR set to: 0
 15729  0002F0  0100               	movlb	0	; () banked
 15730  0002F2  4B99               	infsnz	__doprnt@len& (0+255),f,b
 15731  0002F4  2B9A               	incf	(__doprnt@len+1)& (0+255),f,b
 15732  0002F6                     l1096:
 15733  0002F6  FFFF               	dw	65535	; assembler added errata NOP
 15734                           
 15735                           ; BSR set to: 0
 15736                           
 15737                           ; BSR set to: 0
 15738  0002F8  5199               	movf	__doprnt@len& (0+255),w,b
 15739  0002FA  259C               	addwf	__doprnt@cp& (0+255),w,b
 15740  0002FC  6F92               	movwf	??__doprnt& (0+255),b
 15741  0002FE  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 15742  000300  219D               	addwfc	(__doprnt@cp+1)& (0+255),w,b
 15743  000302  6F93               	movwf	(??__doprnt+1)& (0+255),b
 15744  000304  C092  FFF6         	movff	??__doprnt,tblptrl
 15745  000308  C093  FFF7         	movff	??__doprnt+1,tblptrh
 15746  00030C  6AF8               	clrf	tblptru,c
 15747  00030E  0E05               	movlw	(high __ramtop+-1)
 15748  000310  64F7               	cpfsgt	tblptrh,c
 15749  000312  D004               	bra	u5107
 15750  000314  0008               	tblrd		*
 15751  000316  FFFF               	dw	65535	; errata NOP
 15752  000318  50F5               	movf	tablat,w,c
 15753  00031A  D005               	bra	u5100
 15754  00031C                     u5107:
 15755  00031C  CFF6 FFE9          	movff	tblptrl,fsr0l
 15756  000320  CFF7 FFEA          	movff	tblptrh,fsr0h
 15757  000324  50EF               	movf	indf0,w,c
 15758  000326                     u5100:
 15759  000326  0900               	iorlw	0
 15760  000328  A4D8               	btfss	status,2,c
 15761  00032A  D7E1               	goto	l1097
 15762  00032C                     u5110:
 15763  00032C  FFFF               	dw	65535	; assembler added errata NOP
 15764                           
 15765                           ;doprnt.c: 757: if(width > len)
 15766                           
 15767                           ;doprnt.c: 750: dostring:
 15768  00032E  0100               	movlb	0	; () banked
 15769  000330  519E               	movf	__doprnt@width& (0+255),w,b
 15770  000332  5D99               	subwf	__doprnt@len& (0+255),w,b
 15771  000334  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 15772  000336  599A               	subwfb	(__doprnt@len+1)& (0+255),w,b
 15773  000338  B0D8               	btfsc	status,0,c
 15774  00033A  D005               	goto	l1100
 15775                           
 15776                           ; BSR set to: 0
 15777                           ;doprnt.c: 758: width -= len;
 15778  00033C  5199               	movf	__doprnt@len& (0+255),w,b
 15779  00033E  5F9E               	subwf	__doprnt@width& (0+255),f,b
 15780  000340  519A               	movf	(__doprnt@len+1)& (0+255),w,b
 15781  000342  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 15782  000344  D03D               	goto	l1105
 15783  000346                     l1100:
 15784  000346  FFFF               	dw	65535	; assembler added errata NOP
 15785                           
 15786                           ; BSR set to: 0
 15787                           ;doprnt.c: 759: else
 15788                           ;doprnt.c: 760: width = 0;
 15789                           
 15790                           ; BSR set to: 0
 15791  000348  0E00               	movlw	0
 15792  00034A  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 15793  00034C  0E00               	movlw	0
 15794  00034E  6F9E               	movwf	__doprnt@width& (0+255),b
 15795                           
 15796                           ; BSR set to: 0
 15797                           ;doprnt.c: 764: while(width--)
 15798  000350  D037               	goto	l1105
 15799  000352  FFFF               	dw	65535	; assembler added errata NOP
 15800  000354                     l5187:
 15801                           
 15802                           ; BSR set to: 0
 15803                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 15804  000354  EE20 F002          	lfsr	2,2
 15805  000358  518C               	movf	__doprnt@pb& (0+255),w,b
 15806  00035A  26D9               	addwf	fsr2l,f,c
 15807  00035C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15808  00035E  22DA               	addwfc	fsr2h,f,c
 15809  000360  50DE               	movf	postinc2,w,c
 15810  000362  10DE               	iorwf	postinc2,w,c
 15811  000364  B4D8               	btfsc	status,2,c
 15812  000366  D016               	goto	l1104
 15813                           
 15814                           ; BSR set to: 0
 15815  000368  EE20 F002          	lfsr	2,2
 15816  00036C  518C               	movf	__doprnt@pb& (0+255),w,b
 15817  00036E  26D9               	addwf	fsr2l,f,c
 15818  000370  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15819  000372  22DA               	addwfc	fsr2h,f,c
 15820  000374  D801               	call	u5148
 15821  000376  D024               	goto	l1105
 15822  000378                     u5148:
 15823  000378  FFFF               	dw	65535	; assembler added errata NOP
 15824  00037A  0005               	push	
 15825  00037C  6EFA               	movwf	pclath,c
 15826  00037E  50DE               	movf	postinc2,w,c
 15827  000380  6EFD               	movwf	tosl,c
 15828  000382  50DE               	movf	postinc2,w,c
 15829  000384  6EFE               	movwf	tosh,c
 15830  000386  50F8               	movf	tblptru,w,c
 15831  000388  6EFF               	movwf	tosu,c
 15832  00038A  50FA               	movf	pclath,w,c
 15833  00038C  0E20               	movlw	32
 15834  00038E  0012               	return		;indir
 15835  000390  FFFF               	dw	65535	; errata NOP
 15836  000392  D016               	goto	l1105
 15837  000394                     l1104:
 15838  000394  FFFF               	dw	65535	; assembler added errata NOP
 15839  000396  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15840  00039A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15841  00039E  CFDE F092          	movff	postinc2,??__doprnt
 15842  0003A2  CFDD F093          	movff	postdec2,??__doprnt+1
 15843  0003A6  C092  FFD9         	movff	??__doprnt,fsr2l
 15844  0003AA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15845  0003AE  0E20               	movlw	32
 15846  0003B0  6EDF               	movwf	indf2,c
 15847  0003B2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15848  0003B6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15849  0003BA  2ADE               	incf	postinc2,f,c
 15850  0003BC  0E00               	movlw	0
 15851  0003BE  22DD               	addwfc	postdec2,f,c
 15852  0003C0                     l1105:
 15853  0003C0  FFFF               	dw	65535	; assembler added errata NOP
 15854  0003C2  0100               	movlb	0	; () banked
 15855  0003C4  079E               	decf	__doprnt@width& (0+255),f,b
 15856  0003C6  A0D8               	btfss	status,0,c
 15857  0003C8  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 15858  0003CA  299E               	incf	__doprnt@width& (0+255),w,b
 15859  0003CC  E1C3               	bnz	l5187
 15860  0003CE  299F               	incf	(__doprnt@width+1)& (0+255),w,b
 15861  0003D0  B4D8               	btfsc	status,2,c
 15862  0003D2  D05F               	goto	l1110
 15863  0003D4  D7BE               	goto	l1103
 15864  0003D6  FFFF               	dw	65535	; assembler added errata NOP
 15865  0003D8                     l5197:
 15866                           
 15867                           ; BSR set to: 0
 15868                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 15869  0003D8  EE20 F002          	lfsr	2,2
 15870  0003DC  518C               	movf	__doprnt@pb& (0+255),w,b
 15871  0003DE  26D9               	addwf	fsr2l,f,c
 15872  0003E0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15873  0003E2  22DA               	addwfc	fsr2h,f,c
 15874  0003E4  50DE               	movf	postinc2,w,c
 15875  0003E6  10DE               	iorwf	postinc2,w,c
 15876  0003E8  B4D8               	btfsc	status,2,c
 15877  0003EA  D02A               	goto	l1109
 15878                           
 15879                           ; BSR set to: 0
 15880  0003EC  EE20 F002          	lfsr	2,2
 15881  0003F0  518C               	movf	__doprnt@pb& (0+255),w,b
 15882  0003F2  26D9               	addwf	fsr2l,f,c
 15883  0003F4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 15884  0003F6  22DA               	addwfc	fsr2h,f,c
 15885  0003F8  D801               	call	u5178
 15886  0003FA  D01D               	goto	u5179
 15887  0003FC                     u5178:
 15888  0003FC  FFFF               	dw	65535	; assembler added errata NOP
 15889  0003FE  0005               	push	
 15890  000400  6EFA               	movwf	pclath,c
 15891  000402  50DE               	movf	postinc2,w,c
 15892  000404  6EFD               	movwf	tosl,c
 15893  000406  50DE               	movf	postinc2,w,c
 15894  000408  6EFE               	movwf	tosh,c
 15895  00040A  50F8               	movf	tblptru,w,c
 15896  00040C  6EFF               	movwf	tosu,c
 15897  00040E  50FA               	movf	pclath,w,c
 15898  000410  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 15899  000414  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 15900  000418  6AF8               	clrf	tblptru,c
 15901  00041A  0E05               	movlw	(high __ramtop+-1)
 15902  00041C  64F7               	cpfsgt	tblptrh,c
 15903  00041E  D004               	bra	u5187
 15904  000420  0008               	tblrd		*
 15905  000422  FFFF               	dw	65535	; errata NOP
 15906  000424  50F5               	movf	tablat,w,c
 15907  000426  D005               	bra	u5180
 15908  000428                     u5187:
 15909  000428  CFF6 FFE9          	movff	tblptrl,fsr0l
 15910  00042C  CFF7 FFEA          	movff	tblptrh,fsr0h
 15911  000430  50EF               	movf	indf0,w,c
 15912  000432                     u5180:
 15913  000432  0012               	return		;indir
 15914  000434  FFFF               	dw	65535	; errata NOP
 15915  000436                     u5179:
 15916  000436  FFFF               	dw	65535	; assembler added errata NOP
 15917  000438  0100               	movlb	0	; () banked
 15918  00043A  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 15919  00043C  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 15920  00043E  D029               	goto	l1110
 15921  000440                     l1109:
 15922  000440  FFFF               	dw	65535	; assembler added errata NOP
 15923                           
 15924                           ; BSR set to: 0
 15925                           
 15926                           ; BSR set to: 0
 15927  000442  C09C  FFF6         	movff	__doprnt@cp,tblptrl
 15928  000446  C09D  FFF7         	movff	__doprnt@cp+1,tblptrh
 15929  00044A  6AF8               	clrf	tblptru,c
 15930  00044C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15931  000450  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15932  000454  CFDE F092          	movff	postinc2,??__doprnt
 15933  000458  CFDD F093          	movff	postdec2,??__doprnt+1
 15934  00045C  C092  FFD9         	movff	??__doprnt,fsr2l
 15935  000460  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15936  000464  0E05               	movlw	(high __ramtop+-1)
 15937  000466  64F7               	cpfsgt	tblptrh,c
 15938  000468  D004               	bra	u5197
 15939  00046A  0008               	tblrd		*
 15940  00046C  FFFF               	dw	65535	; errata NOP
 15941  00046E  50F5               	movf	tablat,w,c
 15942  000470  D005               	bra	u5190
 15943  000472                     u5197:
 15944  000472  CFF6 FFE9          	movff	tblptrl,fsr0l
 15945  000476  CFF7 FFEA          	movff	tblptrh,fsr0h
 15946  00047A  50EF               	movf	indf0,w,c
 15947  00047C                     u5190:
 15948  00047C  6EDF               	movwf	indf2,c
 15949  00047E  0100               	movlb	0	; () banked
 15950  000480  4B9C               	infsnz	__doprnt@cp& (0+255),f,b
 15951  000482  2B9D               	incf	(__doprnt@cp+1)& (0+255),f,b
 15952                           
 15953                           ; BSR set to: 0
 15954  000484  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 15955  000488  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 15956  00048C  2ADE               	incf	postinc2,f,c
 15957  00048E  0E00               	movlw	0
 15958  000490  22DD               	addwfc	postdec2,f,c
 15959  000492                     l1110:
 15960  000492  FFFF               	dw	65535	; assembler added errata NOP
 15961                           
 15962                           ; BSR set to: 0
 15963                           
 15964                           ; BSR set to: 0
 15965                           
 15966                           ; BSR set to: 0
 15967  000494  0799               	decf	__doprnt@len& (0+255),f,b
 15968  000496  A0D8               	btfss	status,0,c
 15969  000498  079A               	decf	(__doprnt@len+1)& (0+255),f,b
 15970  00049A  2999               	incf	__doprnt@len& (0+255),w,b
 15971  00049C  E19D               	bnz	l5197
 15972  00049E  299A               	incf	(__doprnt@len+1)& (0+255),w,b
 15973  0004A0  B4D8               	btfsc	status,2,c
 15974  0004A2  D215               	goto	u5460
 15975  0004A4  D798               	goto	l1108
 15976  0004A6  FFFF               	dw	65535	; assembler added errata NOP
 15977                           
 15978                           ; BSR set to: 0
 15979                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 15980                           
 15981                           ; BSR set to: 0
 15982  0004A8  C090  FFD9         	movff	__doprnt@ap,fsr2l
 15983  0004AC  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 15984  0004B0  CFDF F092          	movff	indf2,??__doprnt
 15985  0004B4  0E02               	movlw	2
 15986  0004B6  26DE               	addwf	postinc2,f,c
 15987  0004B8  CFDF F093          	movff	indf2,??__doprnt+1
 15988  0004BC  0E00               	movlw	0
 15989  0004BE  22DD               	addwfc	postdec2,f,c
 15990  0004C0  C092  FFD9         	movff	??__doprnt,fsr2l
 15991  0004C4  C093  FFDA         	movff	??__doprnt+1,fsr2h
 15992  0004C8  50DF               	movf	indf2,w,c
 15993  0004CA  6FA0               	movwf	__doprnt@c& (0+255),b
 15994  0004CC  FFFF               	dw	65535	; assembler added errata NOP
 15995                           
 15996                           ; BSR set to: 0
 15997                           ;doprnt.c: 805: cp = (char *)&c;
 15998                           
 15999                           ; BSR set to: 0
 16000  0004CE  0EA0               	movlw	low __doprnt@c
 16001  0004D0  6F9C               	movwf	__doprnt@cp& (0+255),b
 16002  0004D2  0E00               	movlw	high __doprnt@c
 16003  0004D4  6F9D               	movwf	(__doprnt@cp+1)& (0+255),b
 16004                           
 16005                           ; BSR set to: 0
 16006                           ;doprnt.c: 806: len = 1;
 16007  0004D6  0E00               	movlw	0
 16008  0004D8  6F9A               	movwf	(__doprnt@len+1)& (0+255),b
 16009  0004DA  0E01               	movlw	1
 16010  0004DC  6F99               	movwf	__doprnt@len& (0+255),b
 16011                           
 16012                           ;doprnt.c: 807: goto dostring;
 16013  0004DE  D726               	goto	u5110
 16014  0004E0                     l1088:
 16015  0004E0  FFFF               	dw	65535	; assembler added errata NOP
 16016                           
 16017                           ; BSR set to: 0
 16018  0004E2  0100               	movlb	0	; () banked
 16019  0004E4  518E               	movf	__doprnt@f& (0+255),w,b
 16020  0004E6  6F92               	movwf	??__doprnt& (0+255),b
 16021  0004E8  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 16022  0004EA  6F93               	movwf	(??__doprnt+1)& (0+255),b
 16023  0004EC  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 16024  0004EE  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 16025  0004F0  C092  FFF6         	movff	??__doprnt,tblptrl
 16026  0004F4  C093  FFF7         	movff	??__doprnt+1,tblptrh
 16027  0004F8  6AF8               	clrf	tblptru,c
 16028  0004FA  0E05               	movlw	(high __ramtop+-1)
 16029  0004FC  64F7               	cpfsgt	tblptrh,c
 16030  0004FE  D004               	bra	u5217
 16031  000500  0008               	tblrd		*
 16032  000502  FFFF               	dw	65535	; errata NOP
 16033  000504  50F5               	movf	tablat,w,c
 16034  000506  D005               	bra	u5210
 16035  000508                     u5217:
 16036  000508  CFF6 FFE9          	movff	tblptrl,fsr0l
 16037  00050C  CFF7 FFEA          	movff	tblptrh,fsr0h
 16038  000510  50EF               	movf	indf0,w,c
 16039  000512                     u5210:
 16040  000512  0100               	movlb	0	; () banked
 16041  000514  6FA0               	movwf	__doprnt@c& (0+255),b
 16042  000516  51A0               	movf	__doprnt@c& (0+255),w,b
 16043                           
 16044                           ; Switch size 1, requested type "space"
 16045                           ; Number of cases is 5, Range of values is 0 to 115
 16046                           ; switch strategies available:
 16047                           ; Name         Instructions Cycles
 16048                           ; simple_byte           16     9 (average)
 16049                           ;	Chosen strategy is simple_byte
 16050  000518  0A00               	xorlw	0	; case 0
 16051  00051A  B4D8               	btfsc	status,2,c
 16052  00051C  D1F6               	goto	u5480
 16053  00051E  0A63               	xorlw	99	; case 99
 16054  000520  B4D8               	btfsc	status,2,c
 16055  000522  D7C1               	goto	l1112
 16056  000524  0A07               	xorlw	7	; case 100
 16057  000526  B4D8               	btfsc	status,2,c
 16058  000528  D007               	goto	l1093
 16059  00052A  0A0D               	xorlw	13	; case 105
 16060  00052C  B4D8               	btfsc	status,2,c
 16061  00052E  D004               	goto	l1093
 16062  000530  0A1A               	xorlw	26	; case 115
 16063  000532  B4D8               	btfsc	status,2,c
 16064  000534  D6B8               	goto	l1094
 16065  000536  D7CA               	goto	l1113
 16066  000538                     l1093:
 16067  000538  FFFF               	dw	65535	; assembler added errata NOP
 16068                           
 16069                           ;doprnt.c: 1253: {
 16070                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16071                           
 16072                           ; BSR set to: 0
 16073  00053A  C090  FFD9         	movff	__doprnt@ap,fsr2l
 16074  00053E  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
 16075  000542  CFDF F092          	movff	indf2,??__doprnt
 16076  000546  0E02               	movlw	2
 16077  000548  26DE               	addwf	postinc2,f,c
 16078  00054A  CFDF F093          	movff	indf2,??__doprnt+1
 16079  00054E  0E00               	movlw	0
 16080  000550  22DD               	addwfc	postdec2,f,c
 16081  000552  C092  FFD9         	movff	??__doprnt,fsr2l
 16082  000556  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16083  00055A  CFDE F097          	movff	postinc2,__doprnt@val
 16084  00055E  CFDD F098          	movff	postdec2,__doprnt@val+1
 16085                           
 16086                           ;doprnt.c: 1261: if((int)val < 0) {
 16087  000562  0100               	movlb	0	; () banked
 16088  000564  AF98               	btfss	(__doprnt@val+1)& (0+255),7,b
 16089  000566  D006               	goto	l1114
 16090                           
 16091                           ; BSR set to: 0
 16092                           ;doprnt.c: 1262: flag |= 0x03;
 16093  000568  0E03               	movlw	3
 16094  00056A  139B               	iorwf	__doprnt@flag& (0+255),f,b
 16095                           
 16096                           ; BSR set to: 0
 16097                           ;doprnt.c: 1263: val = -val;
 16098  00056C  6D97               	negf	__doprnt@val& (0+255),b
 16099  00056E  1F98               	comf	(__doprnt@val+1)& (0+255),f,b
 16100  000570  B0D8               	btfsc	status,0,c
 16101  000572  2B98               	incf	(__doprnt@val+1)& (0+255),f,b
 16102  000574                     l1114:
 16103  000574  FFFF               	dw	65535	; assembler added errata NOP
 16104                           
 16105                           ; BSR set to: 0
 16106                           ;doprnt.c: 1264: }
 16107                           ;doprnt.c: 1266: }
 16108                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16109                           
 16110                           ; BSR set to: 0
 16111  000576  0E01               	movlw	1
 16112  000578  6FA0               	movwf	__doprnt@c& (0+255),b
 16113  00057A                     l5231:
 16114  00057A  FFFF               	dw	65535	; assembler added errata NOP
 16115                           
 16116                           ; BSR set to: 0
 16117  00057C  0E05               	movlw	5
 16118  00057E  19A0               	xorwf	__doprnt@c& (0+255),w,b
 16119  000580  B4D8               	btfsc	status,2,c
 16120  000582  D014               	goto	u5250
 16121                           
 16122                           ; BSR set to: 0
 16123                           ;doprnt.c: 1306: if(val < dpowers[c])
 16124                           
 16125                           ; BSR set to: 0
 16126                           
 16127                           ; BSR set to: 0
 16128  000584  51A0               	movf	__doprnt@c& (0+255),w,b
 16129  000586  0D02               	mullw	2
 16130  000588  0EC9               	movlw	low _dpowers
 16131  00058A  24F3               	addwf	prodl,w,c
 16132  00058C  6EF6               	movwf	tblptrl,c
 16133  00058E  0E7A               	movlw	high _dpowers
 16134  000590  20F4               	addwfc	prodh,w,c
 16135  000592  6EF7               	movwf	tblptrh,c
 16136  000594                     	if	0	;There are less than 3 active tblptr bytes
 16137  000594                     	endif
 16138  000594  0009               	tblrd		*+
 16139  000596  FFFF               	dw	65535	; errata NOP
 16140  000598  50F5               	movf	tablat,w,c
 16141  00059A  5D97               	subwf	__doprnt@val& (0+255),w,b
 16142  00059C  0009               	tblrd		*+
 16143  00059E  FFFF               	dw	65535	; errata NOP
 16144  0005A0  50F5               	movf	tablat,w,c
 16145  0005A2  5998               	subwfb	(__doprnt@val+1)& (0+255),w,b
 16146  0005A4  A0D8               	btfss	status,0,c
 16147  0005A6  D002               	goto	u5250
 16148                           
 16149                           ; BSR set to: 0
 16150                           
 16151                           ; BSR set to: 0
 16152                           
 16153                           ; BSR set to: 0
 16154                           ;doprnt.c: 1307: break;
 16155  0005A8  2BA0               	incf	__doprnt@c& (0+255),f,b
 16156  0005AA  D7E7               	goto	l5231
 16157  0005AC                     u5250:
 16158  0005AC  FFFF               	dw	65535	; assembler added errata NOP
 16159                           
 16160                           ; BSR set to: 0
 16161                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16162                           
 16163                           ; BSR set to: 0
 16164  0005AE  519E               	movf	__doprnt@width& (0+255),w,b
 16165  0005B0  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 16166  0005B2  B4D8               	btfsc	status,2,c
 16167  0005B4  D009               	goto	l1118
 16168                           
 16169                           ; BSR set to: 0
 16170  0005B6  C09B  F092         	movff	__doprnt@flag,??__doprnt
 16171  0005BA  0E03               	movlw	3
 16172  0005BC  1792               	andwf	??__doprnt& (0+255),f,b
 16173  0005BE  B4D8               	btfsc	status,2,c
 16174  0005C0  D003               	goto	l1118
 16175                           
 16176                           ; BSR set to: 0
 16177                           ;doprnt.c: 1346: width--;
 16178  0005C2  079E               	decf	__doprnt@width& (0+255),f,b
 16179  0005C4  A0D8               	btfss	status,0,c
 16180  0005C6  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 16181  0005C8                     l1118:
 16182  0005C8  FFFF               	dw	65535	; assembler added errata NOP
 16183                           
 16184                           ; BSR set to: 0
 16185                           ;doprnt.c: 1381: if(width > c)
 16186                           
 16187                           ; BSR set to: 0
 16188  0005CA  0E80               	movlw	128
 16189  0005CC  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 16190  0005CE  0E7F               	movlw	127
 16191  0005D0  6F92               	movwf	??__doprnt& (0+255),b
 16192  0005D2  519E               	movf	__doprnt@width& (0+255),w,b
 16193  0005D4  5DA0               	subwf	__doprnt@c& (0+255),w,b
 16194  0005D6  519F               	movf	(__doprnt@width+1)& (0+255),w,b
 16195  0005D8  0A80               	xorlw	128
 16196  0005DA  5992               	subwfb	??__doprnt& (0+255),w,b
 16197  0005DC  B0D8               	btfsc	status,0,c
 16198  0005DE  D007               	goto	l1119
 16199                           
 16200                           ; BSR set to: 0
 16201                           ;doprnt.c: 1382: width -= c;
 16202  0005E0  51A0               	movf	__doprnt@c& (0+255),w,b
 16203  0005E2  5F9E               	subwf	__doprnt@width& (0+255),f,b
 16204  0005E4  0E00               	movlw	0
 16205  0005E6  BFA0               	btfsc	__doprnt@c& (0+255),7,b
 16206  0005E8  0EFF               	movlw	255
 16207  0005EA  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
 16208  0005EC  D005               	goto	l1120
 16209  0005EE                     l1119:
 16210  0005EE  FFFF               	dw	65535	; assembler added errata NOP
 16211                           
 16212                           ; BSR set to: 0
 16213                           ;doprnt.c: 1383: else
 16214                           ;doprnt.c: 1384: width = 0;
 16215                           
 16216                           ; BSR set to: 0
 16217  0005F0  0E00               	movlw	0
 16218  0005F2  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
 16219  0005F4  0E00               	movlw	0
 16220  0005F6  6F9E               	movwf	__doprnt@width& (0+255),b
 16221  0005F8                     l1120:
 16222  0005F8  FFFF               	dw	65535	; assembler added errata NOP
 16223                           
 16224                           ; BSR set to: 0
 16225                           ;doprnt.c: 1387: if(flag & 0x04) {
 16226                           
 16227                           ; BSR set to: 0
 16228  0005FA  A59B               	btfss	__doprnt@flag& (0+255),2,b
 16229  0005FC  D07F               	goto	l1121
 16230                           
 16231                           ; BSR set to: 0
 16232                           ;doprnt.c: 1392: if(flag & 0x03)
 16233  0005FE  C09B  F092         	movff	__doprnt@flag,??__doprnt
 16234  000602  0E03               	movlw	3
 16235  000604  1792               	andwf	??__doprnt& (0+255),f,b
 16236  000606  B4D8               	btfsc	status,2,c
 16237  000608  D036               	goto	l1124
 16238                           
 16239                           ; BSR set to: 0
 16240                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 16241  00060A  EE20 F002          	lfsr	2,2
 16242  00060E  518C               	movf	__doprnt@pb& (0+255),w,b
 16243  000610  26D9               	addwf	fsr2l,f,c
 16244  000612  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16245  000614  22DA               	addwfc	fsr2h,f,c
 16246  000616  50DE               	movf	postinc2,w,c
 16247  000618  10DE               	iorwf	postinc2,w,c
 16248  00061A  B4D8               	btfsc	status,2,c
 16249  00061C  D016               	goto	l1123
 16250                           
 16251                           ; BSR set to: 0
 16252  00061E  EE20 F002          	lfsr	2,2
 16253  000622  518C               	movf	__doprnt@pb& (0+255),w,b
 16254  000624  26D9               	addwf	fsr2l,f,c
 16255  000626  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16256  000628  22DA               	addwfc	fsr2h,f,c
 16257  00062A  D801               	call	u5328
 16258  00062C  D024               	goto	l1124
 16259  00062E                     u5328:
 16260  00062E  FFFF               	dw	65535	; assembler added errata NOP
 16261  000630  0005               	push	
 16262  000632  6EFA               	movwf	pclath,c
 16263  000634  50DE               	movf	postinc2,w,c
 16264  000636  6EFD               	movwf	tosl,c
 16265  000638  50DE               	movf	postinc2,w,c
 16266  00063A  6EFE               	movwf	tosh,c
 16267  00063C  50F8               	movf	tblptru,w,c
 16268  00063E  6EFF               	movwf	tosu,c
 16269  000640  50FA               	movf	pclath,w,c
 16270  000642  0E2D               	movlw	45
 16271  000644  0012               	return		;indir
 16272  000646  FFFF               	dw	65535	; errata NOP
 16273  000648  D016               	goto	l1124
 16274  00064A                     l1123:
 16275  00064A  FFFF               	dw	65535	; assembler added errata NOP
 16276  00064C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16277  000650  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16278  000654  CFDE F092          	movff	postinc2,??__doprnt
 16279  000658  CFDD F093          	movff	postdec2,??__doprnt+1
 16280  00065C  C092  FFD9         	movff	??__doprnt,fsr2l
 16281  000660  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16282  000664  0E2D               	movlw	45
 16283  000666  6EDF               	movwf	indf2,c
 16284  000668  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16285  00066C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16286  000670  2ADE               	incf	postinc2,f,c
 16287  000672  0E00               	movlw	0
 16288  000674  22DD               	addwfc	postdec2,f,c
 16289  000676                     l1124:
 16290  000676  FFFF               	dw	65535	; assembler added errata NOP
 16291                           
 16292                           ;doprnt.c: 1415: if(width)
 16293  000678  0100               	movlb	0	; () banked
 16294  00067A  FFFF               	dw	65535	; assembler added errata NOP
 16295  00067C  519E               	movf	__doprnt@width& (0+255),w,b
 16296  00067E  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 16297  000680  B4D8               	btfsc	status,2,c
 16298  000682  D0BE               	goto	l1138
 16299                           
 16300                           ; BSR set to: 0
 16301                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 16302                           
 16303                           ; BSR set to: 0
 16304                           
 16305                           ;doprnt.c: 1416: do
 16306  000684  EE20 F002          	lfsr	2,2
 16307  000688  518C               	movf	__doprnt@pb& (0+255),w,b
 16308  00068A  26D9               	addwf	fsr2l,f,c
 16309  00068C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16310  00068E  22DA               	addwfc	fsr2h,f,c
 16311  000690  50DE               	movf	postinc2,w,c
 16312  000692  10DE               	iorwf	postinc2,w,c
 16313  000694  B4D8               	btfsc	status,2,c
 16314  000696  D016               	goto	l1127
 16315                           
 16316                           ; BSR set to: 0
 16317  000698  EE20 F002          	lfsr	2,2
 16318  00069C  518C               	movf	__doprnt@pb& (0+255),w,b
 16319  00069E  26D9               	addwf	fsr2l,f,c
 16320  0006A0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16321  0006A2  22DA               	addwfc	fsr2h,f,c
 16322  0006A4  D801               	call	u5358
 16323  0006A6  D024               	goto	l1128
 16324  0006A8                     u5358:
 16325  0006A8  FFFF               	dw	65535	; assembler added errata NOP
 16326  0006AA  0005               	push	
 16327  0006AC  6EFA               	movwf	pclath,c
 16328  0006AE  50DE               	movf	postinc2,w,c
 16329  0006B0  6EFD               	movwf	tosl,c
 16330  0006B2  50DE               	movf	postinc2,w,c
 16331  0006B4  6EFE               	movwf	tosh,c
 16332  0006B6  50F8               	movf	tblptru,w,c
 16333  0006B8  6EFF               	movwf	tosu,c
 16334  0006BA  50FA               	movf	pclath,w,c
 16335  0006BC  0E30               	movlw	48
 16336  0006BE  0012               	return		;indir
 16337  0006C0  FFFF               	dw	65535	; errata NOP
 16338  0006C2  D016               	goto	l1128
 16339  0006C4                     l1127:
 16340  0006C4  FFFF               	dw	65535	; assembler added errata NOP
 16341  0006C6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16342  0006CA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16343  0006CE  CFDE F092          	movff	postinc2,??__doprnt
 16344  0006D2  CFDD F093          	movff	postdec2,??__doprnt+1
 16345  0006D6  C092  FFD9         	movff	??__doprnt,fsr2l
 16346  0006DA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16347  0006DE  0E30               	movlw	48
 16348  0006E0  6EDF               	movwf	indf2,c
 16349  0006E2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16350  0006E6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16351  0006EA  2ADE               	incf	postinc2,f,c
 16352  0006EC  0E00               	movlw	0
 16353  0006EE  22DD               	addwfc	postdec2,f,c
 16354  0006F0                     l1128:
 16355  0006F0  FFFF               	dw	65535	; assembler added errata NOP
 16356                           
 16357                           ;doprnt.c: 1418: while(--width);
 16358  0006F2  0100               	movlb	0	; () banked
 16359  0006F4  079E               	decf	__doprnt@width& (0+255),f,b
 16360  0006F6  A0D8               	btfss	status,0,c
 16361  0006F8  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 16362  0006FA  D7BF               	goto	L49
 16363  0006FC                     l1121:
 16364  0006FC  FFFF               	dw	65535	; assembler added errata NOP
 16365                           
 16366                           ; BSR set to: 0
 16367                           ;doprnt.c: 1422: {
 16368                           ;doprnt.c: 1424: if(width
 16369                           ;doprnt.c: 1428: )
 16370                           
 16371                           ; BSR set to: 0
 16372  0006FE  519E               	movf	__doprnt@width& (0+255),w,b
 16373  000700  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 16374  000702  B4D8               	btfsc	status,2,c
 16375  000704  D040               	goto	u5400
 16376  000706                     u5370:
 16377  000706  FFFF               	dw	65535	; assembler added errata NOP
 16378                           
 16379                           ; BSR set to: 0
 16380                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 16381                           
 16382                           ; BSR set to: 0
 16383                           
 16384                           ;doprnt.c: 1429: do
 16385  000708  EE20 F002          	lfsr	2,2
 16386  00070C  518C               	movf	__doprnt@pb& (0+255),w,b
 16387  00070E  26D9               	addwf	fsr2l,f,c
 16388  000710  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16389  000712  22DA               	addwfc	fsr2h,f,c
 16390  000714  50DE               	movf	postinc2,w,c
 16391  000716  10DE               	iorwf	postinc2,w,c
 16392  000718  B4D8               	btfsc	status,2,c
 16393  00071A  D016               	goto	l1133
 16394                           
 16395                           ; BSR set to: 0
 16396  00071C  EE20 F002          	lfsr	2,2
 16397  000720  518C               	movf	__doprnt@pb& (0+255),w,b
 16398  000722  26D9               	addwf	fsr2l,f,c
 16399  000724  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16400  000726  22DA               	addwfc	fsr2h,f,c
 16401  000728  D801               	call	u5398
 16402  00072A  D024               	goto	l1134
 16403  00072C                     u5398:
 16404  00072C  FFFF               	dw	65535	; assembler added errata NOP
 16405  00072E  0005               	push	
 16406  000730  6EFA               	movwf	pclath,c
 16407  000732  50DE               	movf	postinc2,w,c
 16408  000734  6EFD               	movwf	tosl,c
 16409  000736  50DE               	movf	postinc2,w,c
 16410  000738  6EFE               	movwf	tosh,c
 16411  00073A  50F8               	movf	tblptru,w,c
 16412  00073C  6EFF               	movwf	tosu,c
 16413  00073E  50FA               	movf	pclath,w,c
 16414  000740  0E20               	movlw	32
 16415  000742  0012               	return		;indir
 16416  000744  FFFF               	dw	65535	; errata NOP
 16417  000746  D016               	goto	l1134
 16418  000748                     l1133:
 16419  000748  FFFF               	dw	65535	; assembler added errata NOP
 16420  00074A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16421  00074E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16422  000752  CFDE F092          	movff	postinc2,??__doprnt
 16423  000756  CFDD F093          	movff	postdec2,??__doprnt+1
 16424  00075A  C092  FFD9         	movff	??__doprnt,fsr2l
 16425  00075E  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16426  000762  0E20               	movlw	32
 16427  000764  6EDF               	movwf	indf2,c
 16428  000766  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16429  00076A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16430  00076E  2ADE               	incf	postinc2,f,c
 16431  000770  0E00               	movlw	0
 16432  000772  22DD               	addwfc	postdec2,f,c
 16433  000774                     l1134:
 16434  000774  FFFF               	dw	65535	; assembler added errata NOP
 16435                           
 16436                           ;doprnt.c: 1431: while(--width);
 16437  000776  0100               	movlb	0	; () banked
 16438  000778  079E               	decf	__doprnt@width& (0+255),f,b
 16439  00077A  A0D8               	btfss	status,0,c
 16440  00077C  079F               	decf	(__doprnt@width+1)& (0+255),f,b
 16441  00077E  519E               	movf	__doprnt@width& (0+255),w,b
 16442  000780  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
 16443  000782  A4D8               	btfss	status,2,c
 16444  000784  D7C0               	goto	u5370
 16445  000786                     u5400:
 16446  000786  FFFF               	dw	65535	; assembler added errata NOP
 16447                           
 16448                           ; BSR set to: 0
 16449                           ;doprnt.c: 1438: if(flag & 0x03)
 16450                           
 16451                           ; BSR set to: 0
 16452                           
 16453                           ; BSR set to: 0
 16454  000788  C09B  F092         	movff	__doprnt@flag,??__doprnt
 16455  00078C  0E03               	movlw	3
 16456  00078E  1792               	andwf	??__doprnt& (0+255),f,b
 16457  000790  B4D8               	btfsc	status,2,c
 16458  000792  D036               	goto	l1138
 16459                           
 16460                           ; BSR set to: 0
 16461                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 16462  000794  EE20 F002          	lfsr	2,2
 16463  000798  518C               	movf	__doprnt@pb& (0+255),w,b
 16464  00079A  26D9               	addwf	fsr2l,f,c
 16465  00079C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16466  00079E  22DA               	addwfc	fsr2h,f,c
 16467  0007A0  50DE               	movf	postinc2,w,c
 16468  0007A2  10DE               	iorwf	postinc2,w,c
 16469  0007A4  B4D8               	btfsc	status,2,c
 16470  0007A6  D016               	goto	l1137
 16471                           
 16472                           ; BSR set to: 0
 16473  0007A8  EE20 F002          	lfsr	2,2
 16474  0007AC  518C               	movf	__doprnt@pb& (0+255),w,b
 16475  0007AE  26D9               	addwf	fsr2l,f,c
 16476  0007B0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16477  0007B2  22DA               	addwfc	fsr2h,f,c
 16478  0007B4  D801               	call	u5438
 16479  0007B6  D024               	goto	l1138
 16480  0007B8                     u5438:
 16481  0007B8  FFFF               	dw	65535	; assembler added errata NOP
 16482  0007BA  0005               	push	
 16483  0007BC  6EFA               	movwf	pclath,c
 16484  0007BE  50DE               	movf	postinc2,w,c
 16485  0007C0  6EFD               	movwf	tosl,c
 16486  0007C2  50DE               	movf	postinc2,w,c
 16487  0007C4  6EFE               	movwf	tosh,c
 16488  0007C6  50F8               	movf	tblptru,w,c
 16489  0007C8  6EFF               	movwf	tosu,c
 16490  0007CA  50FA               	movf	pclath,w,c
 16491  0007CC  0E2D               	movlw	45
 16492  0007CE  0012               	return		;indir
 16493  0007D0  FFFF               	dw	65535	; errata NOP
 16494  0007D2  D016               	goto	l1138
 16495  0007D4                     l1137:
 16496  0007D4  FFFF               	dw	65535	; assembler added errata NOP
 16497  0007D6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16498  0007DA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16499  0007DE  CFDE F092          	movff	postinc2,??__doprnt
 16500  0007E2  CFDD F093          	movff	postdec2,??__doprnt+1
 16501  0007E6  C092  FFD9         	movff	??__doprnt,fsr2l
 16502  0007EA  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16503  0007EE  0E2D               	movlw	45
 16504  0007F0  6EDF               	movwf	indf2,c
 16505  0007F2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16506  0007F6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16507  0007FA  2ADE               	incf	postinc2,f,c
 16508  0007FC  0E00               	movlw	0
 16509  0007FE  22DD               	addwfc	postdec2,f,c
 16510  000800                     l1138:
 16511  000800  FFFF               	dw	65535	; assembler added errata NOP
 16512                           
 16513                           ;doprnt.c: 1469: }
 16514                           ;doprnt.c: 1472: prec = c;
 16515  000802  C0A0  F096         	movff	__doprnt@c,__doprnt@prec
 16516                           
 16517                           ;doprnt.c: 1474: while(prec--) {
 16518  000806  D05D               	goto	l1142
 16519  000808  FFFF               	dw	65535	; assembler added errata NOP
 16520                           
 16521                           ;doprnt.c: 1478: {
 16522                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16523  00080A  0100               	movlb	0	; () banked
 16524  00080C  5196               	movf	__doprnt@prec& (0+255),w,b
 16525  00080E  0D02               	mullw	2
 16526  000810  0EC9               	movlw	low _dpowers
 16527  000812  24F3               	addwf	prodl,w,c
 16528  000814  6EF6               	movwf	tblptrl,c
 16529  000816  0E7A               	movlw	high _dpowers
 16530  000818  20F4               	addwfc	prodh,w,c
 16531  00081A  6EF7               	movwf	tblptrh,c
 16532  00081C                     	if	0	;There are less than 3 active tblptr bytes
 16533  00081C                     	endif
 16534  00081C  0009               	tblrd		*+
 16535  00081E  FFFF               	dw	65535	; errata NOP
 16536  000820  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16537  000824  000A               	tblrd		*-
 16538  000826  FFFF               	dw	65535	; errata NOP
 16539  000828  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16540  00082C  C097  F080         	movff	__doprnt@val,___lwdiv@dividend
 16541  000830  C098  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
 16542  000834  ECF2  F039         	call	___lwdiv
 16543  000838  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16544  00083C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16545  000840  0E00               	movlw	0
 16546  000842  0100               	movlb	0	; () banked
 16547  000844  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16548  000846  0E0A               	movlw	10
 16549  000848  6F89               	movwf	___lwmod@divisor& (0+255),b
 16550  00084A  EC43  F039         	call	___lwmod	;wreg free
 16551  00084E  0100               	movlb	0	; () banked
 16552  000850  5187               	movf	?___lwmod& (0+255),w,b
 16553  000852  0F30               	addlw	48
 16554  000854  6FA0               	movwf	__doprnt@c& (0+255),b
 16555                           
 16556                           ; BSR set to: 0
 16557                           ;doprnt.c: 1523: }
 16558                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 16559  000856  EE20 F002          	lfsr	2,2
 16560  00085A  518C               	movf	__doprnt@pb& (0+255),w,b
 16561  00085C  26D9               	addwf	fsr2l,f,c
 16562  00085E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16563  000860  22DA               	addwfc	fsr2h,f,c
 16564  000862  50DE               	movf	postinc2,w,c
 16565  000864  10DE               	iorwf	postinc2,w,c
 16566  000866  B4D8               	btfsc	status,2,c
 16567  000868  D016               	goto	l1141
 16568                           
 16569                           ; BSR set to: 0
 16570  00086A  EE20 F002          	lfsr	2,2
 16571  00086E  518C               	movf	__doprnt@pb& (0+255),w,b
 16572  000870  26D9               	addwf	fsr2l,f,c
 16573  000872  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 16574  000874  22DA               	addwfc	fsr2h,f,c
 16575  000876  D801               	call	u5458
 16576  000878  D024               	goto	l1142
 16577  00087A                     u5458:
 16578  00087A  FFFF               	dw	65535	; assembler added errata NOP
 16579  00087C  0005               	push	
 16580  00087E  6EFA               	movwf	pclath,c
 16581  000880  50DE               	movf	postinc2,w,c
 16582  000882  6EFD               	movwf	tosl,c
 16583  000884  50DE               	movf	postinc2,w,c
 16584  000886  6EFE               	movwf	tosh,c
 16585  000888  50F8               	movf	tblptru,w,c
 16586  00088A  6EFF               	movwf	tosu,c
 16587  00088C  50FA               	movf	pclath,w,c
 16588  00088E  51A0               	movf	__doprnt@c& (0+255),w,b
 16589  000890  0012               	return		;indir
 16590  000892  FFFF               	dw	65535	; errata NOP
 16591  000894  D016               	goto	l1142
 16592  000896                     l1141:
 16593  000896  FFFF               	dw	65535	; assembler added errata NOP
 16594  000898  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16595  00089C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16596  0008A0  CFDE F092          	movff	postinc2,??__doprnt
 16597  0008A4  CFDD F093          	movff	postdec2,??__doprnt+1
 16598  0008A8  C092  FFD9         	movff	??__doprnt,fsr2l
 16599  0008AC  C093  FFDA         	movff	??__doprnt+1,fsr2h
 16600  0008B0  C0A0  FFDF         	movff	__doprnt@c,indf2
 16601  0008B4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 16602  0008B8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 16603  0008BC  2ADE               	incf	postinc2,f,c
 16604  0008BE  0E00               	movlw	0
 16605  0008C0  22DD               	addwfc	postdec2,f,c
 16606  0008C2                     l1142:
 16607  0008C2  FFFF               	dw	65535	; assembler added errata NOP
 16608  0008C4  0100               	movlb	0	; () banked
 16609  0008C6  0796               	decf	__doprnt@prec& (0+255),f,b
 16610  0008C8  2996               	incf	__doprnt@prec& (0+255),w,b
 16611  0008CA  A4D8               	btfss	status,2,c
 16612  0008CC  D79D               	goto	l1140
 16613  0008CE                     u5460:
 16614  0008CE  FFFF               	dw	65535	; assembler added errata NOP
 16615                           
 16616                           ; BSR set to: 0
 16617                           
 16618                           ; BSR set to: 0
 16619  0008D0  0100               	movlb	0	; () banked
 16620  0008D2  518E               	movf	__doprnt@f& (0+255),w,b
 16621  0008D4  6F92               	movwf	??__doprnt& (0+255),b
 16622  0008D6  518F               	movf	(__doprnt@f+1)& (0+255),w,b
 16623  0008D8  6F93               	movwf	(??__doprnt+1)& (0+255),b
 16624  0008DA  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 16625  0008DC  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 16626  0008DE  C092  FFF6         	movff	??__doprnt,tblptrl
 16627  0008E2  C093  FFF7         	movff	??__doprnt+1,tblptrh
 16628  0008E6  6AF8               	clrf	tblptru,c
 16629  0008E8  0E05               	movlw	(high __ramtop+-1)
 16630  0008EA  64F7               	cpfsgt	tblptrh,c
 16631  0008EC  D004               	bra	u5477
 16632  0008EE  0008               	tblrd		*
 16633  0008F0  FFFF               	dw	65535	; errata NOP
 16634  0008F2  50F5               	movf	tablat,w,c
 16635  0008F4  D005               	bra	u5470
 16636  0008F6                     u5477:
 16637  0008F6  CFF6 FFE9          	movff	tblptrl,fsr0l
 16638  0008FA  CFF7 FFEA          	movff	tblptrh,fsr0h
 16639  0008FE  50EF               	movf	indf0,w,c
 16640  000900                     u5470:
 16641  000900  0100               	movlb	0	; () banked
 16642  000902  6FA0               	movwf	__doprnt@c& (0+255),b
 16643  000904  51A0               	movf	__doprnt@c& (0+255),w,b
 16644  000906  A4D8               	btfss	status,2,c
 16645  000908  D40B               	goto	l1075
 16646  00090A                     u5480:
 16647  00090A  FFFF               	dw	65535	; assembler added errata NOP
 16648                           
 16649                           ;doprnt.c: 1540: return 0;
 16650                           
 16651                           ; BSR set to: 0
 16652                           
 16653                           ;doprnt.c: 1525: }
 16654                           ;doprnt.c: 1533: }
 16655                           ;doprnt.c: 1535: alldone:
 16656                           
 16657                           ; BSR set to: 0
 16658  00090C  0E00               	movlw	0
 16659  00090E  0100               	movlb	0	; () banked
 16660  000910  6F8D               	movwf	(?__doprnt+1)& (0+255),b
 16661  000912  0E00               	movlw	0
 16662  000914  6F8C               	movwf	?__doprnt& (0+255),b
 16663                           
 16664                           ; BSR set to: 0
 16665                           
 16666                           ; BSR set to: 0
 16667  000916  0012               	return		;funcret
 16668  000918  FFFF               	dw	65535	; errata NOP
 16669  00091A                     __end_of__doprnt:
 16670                           	opt stack 0
 16671                           tosu	equ	0xFFF
 16672                           tosh	equ	0xFFE
 16673                           tosl	equ	0xFFD
 16674                           pclath	equ	0xFFA
 16675                           tblptru	equ	0xFF8
 16676                           tblptrh	equ	0xFF7
 16677                           tblptrl	equ	0xFF6
 16678                           tablat	equ	0xFF5
 16679                           prodh	equ	0xFF4
 16680                           prodl	equ	0xFF3
 16681                           intcon	equ	0xFF2
 16682                           indf0	equ	0xFEF
 16683                           postinc0	equ	0xFEE
 16684                           fsr0h	equ	0xFEA
 16685                           fsr0l	equ	0xFE9
 16686                           wreg	equ	0xFE8
 16687                           postdec1	equ	0xFE5
 16688                           fsr1l	equ	0xFE1
 16689                           indf2	equ	0xFDF
 16690                           postinc2	equ	0xFDE
 16691                           postdec2	equ	0xFDD
 16692                           fsr2h	equ	0xFDA
 16693                           fsr2l	equ	0xFD9
 16694                           status	equ	0xFD8
 16695                           
 16696 ;; *************** function _putch *****************
 16697 ;; Defined at:
 16698 ;;		line 16 in file "serial.h"
 16699 ;; Parameters:    Size  Location     Type
 16700 ;;  c               1    wreg     unsigned char 
 16701 ;; Auto vars:     Size  Location     Type
 16702 ;;  c               1    0[BANK0 ] unsigned char 
 16703 ;; Return value:  Size  Location     Type
 16704 ;;                  1    wreg      void 
 16705 ;; Registers used:
 16706 ;;		wreg
 16707 ;; Tracked objects:
 16708 ;;		On entry : 0/0
 16709 ;;		On exit  : 0/0
 16710 ;;		Unchanged: 0/0
 16711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16712 ;;      Params:         0       0       0       0       0       0       0
 16713 ;;      Locals:         0       1       0       0       0       0       0
 16714 ;;      Temps:          0       0       0       0       0       0       0
 16715 ;;      Totals:         0       1       0       0       0       0       0
 16716 ;;Total ram usage:        1 bytes
 16717 ;; Hardware stack levels used:    1
 16718 ;; Hardware stack levels required when called:    6
 16719 ;; This function calls:
 16720 ;;		Nothing
 16721 ;; This function is called by:
 16722 ;;		_printf
 16723 ;;		__doprnt
 16724 ;; This function uses a non-reentrant model
 16725 ;;
 16726                           
 16727                           	psect	text49
 16728  006B90                     __ptext49:
 16729                           	opt stack 0
 16730  006B90                     _putch:
 16731                           	opt stack 0
 16732  006B90  FFFF               	dw	65535	; assembler added errata NOP
 16733                           
 16734                           ; BSR set to: 0
 16735                           ;incstack = 0
 16736                           ;putch@c stored from wreg
 16737  006B92  0100               	movlb	0	; () banked
 16738  006B94  6F80               	movwf	putch@c& (0+255),b
 16739  006B96  FFFF               	dw	65535	; assembler added errata NOP
 16740                           
 16741                           ;serial.h: 17: while (!TXSTAbits.TRMT);
 16742  006B98  A2AC               	btfss	4012,1,c	;volatile
 16743  006B9A  D7FD               	goto	l4951
 16744                           
 16745                           ;serial.h: 18: TXREG = c;
 16746  006B9C  C080  FFAD         	movff	putch@c,4013	;volatile
 16747  006BA0  0012               	return		;funcret
 16748  006BA2  FFFF               	dw	65535	; errata NOP
 16749  006BA4                     __end_of_putch:
 16750                           	opt stack 0
 16751                           tosu	equ	0xFFF
 16752                           tosh	equ	0xFFE
 16753                           tosl	equ	0xFFD
 16754                           pclath	equ	0xFFA
 16755                           tblptru	equ	0xFF8
 16756                           tblptrh	equ	0xFF7
 16757                           tblptrl	equ	0xFF6
 16758                           tablat	equ	0xFF5
 16759                           prodh	equ	0xFF4
 16760                           prodl	equ	0xFF3
 16761                           intcon	equ	0xFF2
 16762                           indf0	equ	0xFEF
 16763                           postinc0	equ	0xFEE
 16764                           fsr0h	equ	0xFEA
 16765                           fsr0l	equ	0xFE9
 16766                           wreg	equ	0xFE8
 16767                           postdec1	equ	0xFE5
 16768                           fsr1l	equ	0xFE1
 16769                           indf2	equ	0xFDF
 16770                           postinc2	equ	0xFDE
 16771                           postdec2	equ	0xFDD
 16772                           fsr2h	equ	0xFDA
 16773                           fsr2l	equ	0xFD9
 16774                           status	equ	0xFD8
 16775                           
 16776 ;; *************** function _isdigit *****************
 16777 ;; Defined at:
 16778 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 16779 ;; Parameters:    Size  Location     Type
 16780 ;;  c               1    wreg     unsigned char 
 16781 ;; Auto vars:     Size  Location     Type
 16782 ;;  c               1    2[BANK0 ] unsigned char 
 16783 ;; Return value:  Size  Location     Type
 16784 ;;		None               void
 16785 ;; Registers used:
 16786 ;;		wreg, status,2, status,0
 16787 ;; Tracked objects:
 16788 ;;		On entry : 0/0
 16789 ;;		On exit  : 0/0
 16790 ;;		Unchanged: 0/0
 16791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16792 ;;      Params:         0       0       0       0       0       0       0
 16793 ;;      Locals:         0       2       0       0       0       0       0
 16794 ;;      Temps:          0       1       0       0       0       0       0
 16795 ;;      Totals:         0       3       0       0       0       0       0
 16796 ;;Total ram usage:        3 bytes
 16797 ;; Hardware stack levels used:    1
 16798 ;; Hardware stack levels required when called:    6
 16799 ;; This function calls:
 16800 ;;		Nothing
 16801 ;; This function is called by:
 16802 ;;		__doprnt
 16803 ;;		_atoi
 16804 ;; This function uses a non-reentrant model
 16805 ;;
 16806                           
 16807                           	psect	text50
 16808  006C78                     __ptext50:
 16809                           	opt stack 0
 16810  006C78                     _isdigit:
 16811                           	opt stack 0
 16812  006C78  FFFF               	dw	65535	; assembler added errata NOP
 16813                           
 16814                           ;incstack = 0
 16815                           ;isdigit@c stored from wreg
 16816  006C7A  0100               	movlb	0	; () banked
 16817  006C7C  6F82               	movwf	isdigit@c& (0+255),b
 16818  006C7E  0E00               	movlw	0
 16819  006C80  0100               	movlb	0	; () banked
 16820  006C82  6F81               	movwf	_isdigit$1874& (0+255),b
 16821                           
 16822                           ; BSR set to: 0
 16823  006C84  0E3A               	movlw	58
 16824  006C86  6182               	cpfslt	isdigit@c& (0+255),b
 16825  006C88  D005               	goto	l1490
 16826                           
 16827                           ; BSR set to: 0
 16828  006C8A  0E2F               	movlw	47
 16829  006C8C  6582               	cpfsgt	isdigit@c& (0+255),b
 16830  006C8E  D002               	goto	l1490
 16831                           
 16832                           ; BSR set to: 0
 16833  006C90  0E01               	movlw	1
 16834  006C92  6F81               	movwf	_isdigit$1874& (0+255),b
 16835  006C94                     l1490:
 16836  006C94  FFFF               	dw	65535	; assembler added errata NOP
 16837                           
 16838                           ; BSR set to: 0
 16839                           
 16840                           ; BSR set to: 0
 16841  006C96  C081  F080         	movff	_isdigit$1874,??_isdigit
 16842  006C9A  3180               	rrcf	??_isdigit& (0+255),w,b
 16843                           
 16844                           ; BSR set to: 0
 16845                           
 16846                           ; BSR set to: 0
 16847  006C9C  0012               	return		;funcret
 16848  006C9E  FFFF               	dw	65535	; errata NOP
 16849  006CA0                     __end_of_isdigit:
 16850                           	opt stack 0
 16851                           tosu	equ	0xFFF
 16852                           tosh	equ	0xFFE
 16853                           tosl	equ	0xFFD
 16854                           pclath	equ	0xFFA
 16855                           tblptru	equ	0xFF8
 16856                           tblptrh	equ	0xFF7
 16857                           tblptrl	equ	0xFF6
 16858                           tablat	equ	0xFF5
 16859                           prodh	equ	0xFF4
 16860                           prodl	equ	0xFF3
 16861                           intcon	equ	0xFF2
 16862                           indf0	equ	0xFEF
 16863                           postinc0	equ	0xFEE
 16864                           fsr0h	equ	0xFEA
 16865                           fsr0l	equ	0xFE9
 16866                           wreg	equ	0xFE8
 16867                           postdec1	equ	0xFE5
 16868                           fsr1l	equ	0xFE1
 16869                           indf2	equ	0xFDF
 16870                           postinc2	equ	0xFDE
 16871                           postdec2	equ	0xFDD
 16872                           fsr2h	equ	0xFDA
 16873                           fsr2l	equ	0xFD9
 16874                           status	equ	0xFD8
 16875                           
 16876 ;; *************** function ___wmul *****************
 16877 ;; Defined at:
 16878 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16879 ;; Parameters:    Size  Location     Type
 16880 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16881 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16882 ;; Auto vars:     Size  Location     Type
 16883 ;;  product         2    4[BANK0 ] unsigned int 
 16884 ;; Return value:  Size  Location     Type
 16885 ;;                  2    0[BANK0 ] unsigned int 
 16886 ;; Registers used:
 16887 ;;		wreg, status,2, status,0, prodl, prodh
 16888 ;; Tracked objects:
 16889 ;;		On entry : 0/0
 16890 ;;		On exit  : 0/0
 16891 ;;		Unchanged: 0/0
 16892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16893 ;;      Params:         0       4       0       0       0       0       0
 16894 ;;      Locals:         0       2       0       0       0       0       0
 16895 ;;      Temps:          0       0       0       0       0       0       0
 16896 ;;      Totals:         0       6       0       0       0       0       0
 16897 ;;Total ram usage:        6 bytes
 16898 ;; Hardware stack levels used:    1
 16899 ;; Hardware stack levels required when called:    6
 16900 ;; This function calls:
 16901 ;;		Nothing
 16902 ;; This function is called by:
 16903 ;;		__doprnt
 16904 ;;		_atoi
 16905 ;; This function uses a non-reentrant model
 16906 ;;
 16907                           
 16908                           	psect	text51
 16909  006CCC                     __ptext51:
 16910                           	opt stack 0
 16911  006CCC                     ___wmul:
 16912                           	opt stack 0
 16913  006CCC  FFFF               	dw	65535	; assembler added errata NOP
 16914                           
 16915                           ; BSR set to: 0
 16916                           ;incstack = 0
 16917  006CCE  0100               	movlb	0	; () banked
 16918  006CD0  5180               	movf	___wmul@multiplier& (0+255),w,b
 16919  006CD2  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16920  006CD4  CFF3 F084          	movff	prodl,___wmul@product
 16921  006CD8  CFF4 F085          	movff	prodh,___wmul@product+1
 16922  006CDC  5180               	movf	___wmul@multiplier& (0+255),w,b
 16923  006CDE  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16924  006CE0  50F3               	movf	prodl,w,c
 16925  006CE2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16926  006CE4  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16927  006CE6  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16928  006CE8  50F3               	movf	prodl,w,c
 16929  006CEA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16930                           
 16931                           ; BSR set to: 0
 16932  006CEC  C084  F080         	movff	___wmul@product,?___wmul
 16933  006CF0  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16934                           
 16935                           ; BSR set to: 0
 16936                           
 16937                           ; BSR set to: 0
 16938  006CF4  0012               	return		;funcret
 16939  006CF6  FFFF               	dw	65535	; errata NOP
 16940  006CF8                     __end_of___wmul:
 16941                           	opt stack 0
 16942                           tosu	equ	0xFFF
 16943                           tosh	equ	0xFFE
 16944                           tosl	equ	0xFFD
 16945                           pclath	equ	0xFFA
 16946                           tblptru	equ	0xFF8
 16947                           tblptrh	equ	0xFF7
 16948                           tblptrl	equ	0xFF6
 16949                           tablat	equ	0xFF5
 16950                           prodh	equ	0xFF4
 16951                           prodl	equ	0xFF3
 16952                           intcon	equ	0xFF2
 16953                           indf0	equ	0xFEF
 16954                           postinc0	equ	0xFEE
 16955                           fsr0h	equ	0xFEA
 16956                           fsr0l	equ	0xFE9
 16957                           wreg	equ	0xFE8
 16958                           postdec1	equ	0xFE5
 16959                           fsr1l	equ	0xFE1
 16960                           indf2	equ	0xFDF
 16961                           postinc2	equ	0xFDE
 16962                           postdec2	equ	0xFDD
 16963                           fsr2h	equ	0xFDA
 16964                           fsr2l	equ	0xFD9
 16965                           status	equ	0xFD8
 16966                           
 16967 ;; *************** function ___lwmod *****************
 16968 ;; Defined at:
 16969 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 16970 ;; Parameters:    Size  Location     Type
 16971 ;;  dividend        2    7[BANK0 ] unsigned int 
 16972 ;;  divisor         2    9[BANK0 ] unsigned int 
 16973 ;; Auto vars:     Size  Location     Type
 16974 ;;  counter         1   11[BANK0 ] unsigned char 
 16975 ;; Return value:  Size  Location     Type
 16976 ;;                  2    7[BANK0 ] unsigned int 
 16977 ;; Registers used:
 16978 ;;		wreg, status,2, status,0
 16979 ;; Tracked objects:
 16980 ;;		On entry : 0/0
 16981 ;;		On exit  : 0/0
 16982 ;;		Unchanged: 0/0
 16983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16984 ;;      Params:         0       4       0       0       0       0       0
 16985 ;;      Locals:         0       1       0       0       0       0       0
 16986 ;;      Temps:          0       0       0       0       0       0       0
 16987 ;;      Totals:         0       5       0       0       0       0       0
 16988 ;;Total ram usage:        5 bytes
 16989 ;; Hardware stack levels used:    1
 16990 ;; Hardware stack levels required when called:    6
 16991 ;; This function calls:
 16992 ;;		Nothing
 16993 ;; This function is called by:
 16994 ;;		__doprnt
 16995 ;; This function uses a non-reentrant model
 16996 ;;
 16997                           
 16998                           	psect	text52
 16999  007286                     __ptext52:
 17000                           	opt stack 0
 17001  007286                     ___lwmod:
 17002                           	opt stack 0
 17003  007286  FFFF               	dw	65535	; assembler added errata NOP
 17004                           
 17005                           ; BSR set to: 0
 17006                           ;incstack = 0
 17007  007288  0100               	movlb	0	; () banked
 17008  00728A  5189               	movf	___lwmod@divisor& (0+255),w,b
 17009  00728C  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 17010  00728E  B4D8               	btfsc	status,2,c
 17011  007290  D01C               	goto	l1584
 17012                           
 17013                           ; BSR set to: 0
 17014  007292  0E01               	movlw	1
 17015  007294  6F8B               	movwf	___lwmod@counter& (0+255),b
 17016  007296  D005               	goto	l1579
 17017  007298  FFFF               	dw	65535	; assembler added errata NOP
 17018                           
 17019                           ; BSR set to: 0
 17020                           
 17021                           ; BSR set to: 0
 17022  00729A  90D8               	bcf	status,0,c
 17023  00729C  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 17024  00729E  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 17025  0072A0  2B8B               	incf	___lwmod@counter& (0+255),f,b
 17026  0072A2                     l1579:
 17027  0072A2  FFFF               	dw	65535	; assembler added errata NOP
 17028                           
 17029                           ; BSR set to: 0
 17030                           
 17031                           ; BSR set to: 0
 17032  0072A4  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 17033  0072A6  D7F8               	goto	l1580
 17034  0072A8                     u4800:
 17035  0072A8  FFFF               	dw	65535	; assembler added errata NOP
 17036                           
 17037                           ; BSR set to: 0
 17038                           
 17039                           ; BSR set to: 0
 17040                           
 17041                           ; BSR set to: 0
 17042  0072AA  5189               	movf	___lwmod@divisor& (0+255),w,b
 17043  0072AC  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 17044  0072AE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17045  0072B0  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 17046  0072B2  A0D8               	btfss	status,0,c
 17047  0072B4  D004               	goto	l1583
 17048                           
 17049                           ; BSR set to: 0
 17050  0072B6  5189               	movf	___lwmod@divisor& (0+255),w,b
 17051  0072B8  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 17052  0072BA  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17053  0072BC  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 17054  0072BE                     l1583:
 17055  0072BE  FFFF               	dw	65535	; assembler added errata NOP
 17056                           
 17057                           ; BSR set to: 0
 17058                           
 17059                           ; BSR set to: 0
 17060  0072C0  90D8               	bcf	status,0,c
 17061  0072C2  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 17062  0072C4  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 17063                           
 17064                           ; BSR set to: 0
 17065  0072C6  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 17066  0072C8  D7EF               	goto	u4800
 17067  0072CA                     l1584:
 17068  0072CA  FFFF               	dw	65535	; assembler added errata NOP
 17069                           
 17070                           ; BSR set to: 0
 17071                           
 17072                           ; BSR set to: 0
 17073  0072CC  C087  F087         	movff	___lwmod@dividend,?___lwmod
 17074  0072D0  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 17075                           
 17076                           ; BSR set to: 0
 17077  0072D4  0012               	return		;funcret
 17078  0072D6  FFFF               	dw	65535	; errata NOP
 17079  0072D8                     __end_of___lwmod:
 17080                           	opt stack 0
 17081                           tosu	equ	0xFFF
 17082                           tosh	equ	0xFFE
 17083                           tosl	equ	0xFFD
 17084                           pclath	equ	0xFFA
 17085                           tblptru	equ	0xFF8
 17086                           tblptrh	equ	0xFF7
 17087                           tblptrl	equ	0xFF6
 17088                           tablat	equ	0xFF5
 17089                           prodh	equ	0xFF4
 17090                           prodl	equ	0xFF3
 17091                           intcon	equ	0xFF2
 17092                           indf0	equ	0xFEF
 17093                           postinc0	equ	0xFEE
 17094                           fsr0h	equ	0xFEA
 17095                           fsr0l	equ	0xFE9
 17096                           wreg	equ	0xFE8
 17097                           postdec1	equ	0xFE5
 17098                           fsr1l	equ	0xFE1
 17099                           indf2	equ	0xFDF
 17100                           postinc2	equ	0xFDE
 17101                           postdec2	equ	0xFDD
 17102                           fsr2h	equ	0xFDA
 17103                           fsr2l	equ	0xFD9
 17104                           status	equ	0xFD8
 17105                           
 17106 ;; *************** function ___lwdiv *****************
 17107 ;; Defined at:
 17108 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 17109 ;; Parameters:    Size  Location     Type
 17110 ;;  dividend        2    0[BANK0 ] unsigned int 
 17111 ;;  divisor         2    2[BANK0 ] unsigned int 
 17112 ;; Auto vars:     Size  Location     Type
 17113 ;;  quotient        2    4[BANK0 ] unsigned int 
 17114 ;;  counter         1    6[BANK0 ] unsigned char 
 17115 ;; Return value:  Size  Location     Type
 17116 ;;                  2    0[BANK0 ] unsigned int 
 17117 ;; Registers used:
 17118 ;;		wreg, status,2, status,0
 17119 ;; Tracked objects:
 17120 ;;		On entry : 0/0
 17121 ;;		On exit  : 0/0
 17122 ;;		Unchanged: 0/0
 17123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17124 ;;      Params:         0       4       0       0       0       0       0
 17125 ;;      Locals:         0       3       0       0       0       0       0
 17126 ;;      Temps:          0       0       0       0       0       0       0
 17127 ;;      Totals:         0       7       0       0       0       0       0
 17128 ;;Total ram usage:        7 bytes
 17129 ;; Hardware stack levels used:    1
 17130 ;; Hardware stack levels required when called:    6
 17131 ;; This function calls:
 17132 ;;		Nothing
 17133 ;; This function is called by:
 17134 ;;		__doprnt
 17135 ;; This function uses a non-reentrant model
 17136 ;;
 17137                           
 17138                           	psect	text53
 17139  0073E4                     __ptext53:
 17140                           	opt stack 0
 17141  0073E4                     ___lwdiv:
 17142                           	opt stack 0
 17143  0073E4  FFFF               	dw	65535	; assembler added errata NOP
 17144                           
 17145                           ; BSR set to: 0
 17146                           ;incstack = 0
 17147  0073E6  0E00               	movlw	0
 17148  0073E8  0100               	movlb	0	; () banked
 17149  0073EA  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17150  0073EC  0E00               	movlw	0
 17151  0073EE  6F84               	movwf	___lwdiv@quotient& (0+255),b
 17152                           
 17153                           ; BSR set to: 0
 17154  0073F0  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17155  0073F2  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17156  0073F4  B4D8               	btfsc	status,2,c
 17157  0073F6  D020               	goto	l1574
 17158                           
 17159                           ; BSR set to: 0
 17160  0073F8  0E01               	movlw	1
 17161  0073FA  6F86               	movwf	___lwdiv@counter& (0+255),b
 17162  0073FC  D005               	goto	l1569
 17163  0073FE  FFFF               	dw	65535	; assembler added errata NOP
 17164                           
 17165                           ; BSR set to: 0
 17166                           
 17167                           ; BSR set to: 0
 17168  007400  90D8               	bcf	status,0,c
 17169  007402  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 17170  007404  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17171  007406  2B86               	incf	___lwdiv@counter& (0+255),f,b
 17172  007408                     l1569:
 17173  007408  FFFF               	dw	65535	; assembler added errata NOP
 17174                           
 17175                           ; BSR set to: 0
 17176                           
 17177                           ; BSR set to: 0
 17178  00740A  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 17179  00740C  D7F8               	goto	l1570
 17180  00740E                     u4770:
 17181  00740E  FFFF               	dw	65535	; assembler added errata NOP
 17182                           
 17183                           ; BSR set to: 0
 17184                           
 17185                           ; BSR set to: 0
 17186                           
 17187                           ; BSR set to: 0
 17188  007410  90D8               	bcf	status,0,c
 17189  007412  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 17190  007414  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17191                           
 17192                           ; BSR set to: 0
 17193  007416  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17194  007418  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 17195  00741A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17196  00741C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17197  00741E  A0D8               	btfss	status,0,c
 17198  007420  D005               	goto	l1573
 17199                           
 17200                           ; BSR set to: 0
 17201  007422  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17202  007424  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 17203  007426  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17204  007428  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17205                           
 17206                           ; BSR set to: 0
 17207  00742A  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 17208  00742C                     l1573:
 17209  00742C  FFFF               	dw	65535	; assembler added errata NOP
 17210                           
 17211                           ; BSR set to: 0
 17212                           
 17213                           ; BSR set to: 0
 17214  00742E  90D8               	bcf	status,0,c
 17215  007430  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17216  007432  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 17217                           
 17218                           ; BSR set to: 0
 17219  007434  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 17220  007436  D7EB               	goto	u4770
 17221  007438                     l1574:
 17222  007438  FFFF               	dw	65535	; assembler added errata NOP
 17223                           
 17224                           ; BSR set to: 0
 17225                           
 17226                           ; BSR set to: 0
 17227  00743A  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 17228  00743E  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17229                           
 17230                           ; BSR set to: 0
 17231  007442  0012               	return		;funcret
 17232  007444  FFFF               	dw	65535	; errata NOP
 17233  007446                     __end_of___lwdiv:
 17234                           	opt stack 0
 17235                           tosu	equ	0xFFF
 17236                           tosh	equ	0xFFE
 17237                           tosl	equ	0xFFD
 17238                           pclath	equ	0xFFA
 17239                           tblptru	equ	0xFF8
 17240                           tblptrh	equ	0xFF7
 17241                           tblptrl	equ	0xFF6
 17242                           tablat	equ	0xFF5
 17243                           prodh	equ	0xFF4
 17244                           prodl	equ	0xFF3
 17245                           intcon	equ	0xFF2
 17246                           indf0	equ	0xFEF
 17247                           postinc0	equ	0xFEE
 17248                           fsr0h	equ	0xFEA
 17249                           fsr0l	equ	0xFE9
 17250                           wreg	equ	0xFE8
 17251                           postdec1	equ	0xFE5
 17252                           fsr1l	equ	0xFE1
 17253                           indf2	equ	0xFDF
 17254                           postinc2	equ	0xFDE
 17255                           postdec2	equ	0xFDD
 17256                           fsr2h	equ	0xFDA
 17257                           fsr2l	equ	0xFD9
 17258                           status	equ	0xFD8
 17259                           
 17260 ;; *************** function _limparBuffer *****************
 17261 ;; Defined at:
 17262 ;;		line 34 in file "serial.h"
 17263 ;; Parameters:    Size  Location     Type
 17264 ;;		None
 17265 ;; Auto vars:     Size  Location     Type
 17266 ;;		None
 17267 ;; Return value:  Size  Location     Type
 17268 ;;                  1    wreg      void 
 17269 ;; Registers used:
 17270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17271 ;; Tracked objects:
 17272 ;;		On entry : 0/0
 17273 ;;		On exit  : 0/0
 17274 ;;		Unchanged: 0/0
 17275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17276 ;;      Params:         0       0       0       0       0       0       0
 17277 ;;      Locals:         0       0       0       0       0       0       0
 17278 ;;      Temps:          0       0       0       0       0       0       0
 17279 ;;      Totals:         0       0       0       0       0       0       0
 17280 ;;Total ram usage:        0 bytes
 17281 ;; Hardware stack levels used:    1
 17282 ;; Hardware stack levels required when called:    7
 17283 ;; This function calls:
 17284 ;;		_delay
 17285 ;;		_memset
 17286 ;; This function is called by:
 17287 ;;		_getSinalSIM800L
 17288 ;;		_comunicarTeste
 17289 ;;		_enviaSMS
 17290 ;; This function uses a non-reentrant model
 17291 ;;
 17292                           
 17293                           	psect	text54
 17294  006E2C                     __ptext54:
 17295                           	opt stack 0
 17296  006E2C                     _limparBuffer:
 17297                           	opt stack 0
 17298  006E2C  FFFF               	dw	65535	; assembler added errata NOP
 17299                           
 17300                           ;serial.h: 35: cbf = 0;
 17301                           
 17302                           ; BSR set to: 0
 17303                           ;incstack = 0
 17304  006E2E  0E00               	movlw	0
 17305  006E30  6E62               	movwf	_cbf,c
 17306                           
 17307                           ;serial.h: 36: memset(bufferSerial, 0, sizeof (bufferSerial));
 17308  006E32  0E05               	movlw	low _bufferSerial
 17309  006E34  0100               	movlb	0	; () banked
 17310  006E36  6F80               	movwf	memset@p1& (0+255),b
 17311  006E38  0E01               	movlw	high _bufferSerial
 17312  006E3A  6F81               	movwf	(memset@p1+1)& (0+255),b
 17313  006E3C  0E00               	movlw	0
 17314  006E3E  6F83               	movwf	(memset@c+1)& (0+255),b
 17315  006E40  0E00               	movlw	0
 17316  006E42  6F82               	movwf	memset@c& (0+255),b
 17317  006E44  0E00               	movlw	0
 17318  006E46  6F85               	movwf	(memset@n+1)& (0+255),b
 17319  006E48  0E3C               	movlw	60
 17320  006E4A  6F84               	movwf	memset@n& (0+255),b
 17321  006E4C  EC84  F037         	call	_memset
 17322                           
 17323                           ;serial.h: 37: delay(150);
 17324  006E50  0E00               	movlw	0
 17325  006E52  0100               	movlb	0	; () banked
 17326  006E54  6F81               	movwf	(delay@x+1)& (0+255),b
 17327  006E56  0E96               	movlw	150
 17328  006E58  6F80               	movwf	delay@x& (0+255),b
 17329  006E5A  ECFB  F036         	call	_delay	;wreg free
 17330  006E5E  0012               	return		;funcret
 17331  006E60  FFFF               	dw	65535	; errata NOP
 17332  006E62                     __end_of_limparBuffer:
 17333                           	opt stack 0
 17334                           tosu	equ	0xFFF
 17335                           tosh	equ	0xFFE
 17336                           tosl	equ	0xFFD
 17337                           pclath	equ	0xFFA
 17338                           tblptru	equ	0xFF8
 17339                           tblptrh	equ	0xFF7
 17340                           tblptrl	equ	0xFF6
 17341                           tablat	equ	0xFF5
 17342                           prodh	equ	0xFF4
 17343                           prodl	equ	0xFF3
 17344                           intcon	equ	0xFF2
 17345                           indf0	equ	0xFEF
 17346                           postinc0	equ	0xFEE
 17347                           fsr0h	equ	0xFEA
 17348                           fsr0l	equ	0xFE9
 17349                           wreg	equ	0xFE8
 17350                           postdec1	equ	0xFE5
 17351                           fsr1l	equ	0xFE1
 17352                           indf2	equ	0xFDF
 17353                           postinc2	equ	0xFDE
 17354                           postdec2	equ	0xFDD
 17355                           fsr2h	equ	0xFDA
 17356                           fsr2l	equ	0xFD9
 17357                           status	equ	0xFD8
 17358                           
 17359 ;; *************** function _memset *****************
 17360 ;; Defined at:
 17361 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 17362 ;; Parameters:    Size  Location     Type
 17363 ;;  p1              2    0[BANK0 ] PTR void 
 17364 ;;		 -> bufferAUX(20), bufferSerial(60), 
 17365 ;;  c               2    2[BANK0 ] int 
 17366 ;;  n               2    4[BANK0 ] unsigned int 
 17367 ;; Auto vars:     Size  Location     Type
 17368 ;;  p               2    6[BANK0 ] PTR unsigned char 
 17369 ;;		 -> bufferAUX(20), bufferSerial(60), 
 17370 ;; Return value:  Size  Location     Type
 17371 ;;                  2    0[BANK0 ] PTR void 
 17372 ;; Registers used:
 17373 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17374 ;; Tracked objects:
 17375 ;;		On entry : 0/0
 17376 ;;		On exit  : 0/0
 17377 ;;		Unchanged: 0/0
 17378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17379 ;;      Params:         0       6       0       0       0       0       0
 17380 ;;      Locals:         0       2       0       0       0       0       0
 17381 ;;      Temps:          0       0       0       0       0       0       0
 17382 ;;      Totals:         0       8       0       0       0       0       0
 17383 ;;Total ram usage:        8 bytes
 17384 ;; Hardware stack levels used:    1
 17385 ;; Hardware stack levels required when called:    6
 17386 ;; This function calls:
 17387 ;;		Nothing
 17388 ;; This function is called by:
 17389 ;;		_limparBuffer
 17390 ;;		_getSerial
 17391 ;; This function uses a non-reentrant model
 17392 ;;
 17393                           
 17394                           	psect	text55
 17395  006F08                     __ptext55:
 17396                           	opt stack 0
 17397  006F08                     _memset:
 17398                           	opt stack 0
 17399  006F08  FFFF               	dw	65535	; assembler added errata NOP
 17400                           
 17401                           ;incstack = 0
 17402  006F0A  C080  F086         	movff	memset@p1,memset@p
 17403  006F0E  C081  F087         	movff	memset@p1+1,memset@p+1
 17404  006F12  D00A               	goto	l1593
 17405  006F14  FFFF               	dw	65535	; assembler added errata NOP
 17406  006F16                     l5085:
 17407  006F16  C086  FFD9         	movff	memset@p,fsr2l
 17408  006F1A  C087  FFDA         	movff	memset@p+1,fsr2h
 17409  006F1E  C082  FFDF         	movff	memset@c,indf2
 17410  006F22  0100               	movlb	0	; () banked
 17411  006F24  4B86               	infsnz	memset@p& (0+255),f,b
 17412  006F26  2B87               	incf	(memset@p+1)& (0+255),f,b
 17413  006F28                     l1593:
 17414  006F28  FFFF               	dw	65535	; assembler added errata NOP
 17415                           
 17416                           ; BSR set to: 0
 17417  006F2A  0100               	movlb	0	; () banked
 17418  006F2C  0784               	decf	memset@n& (0+255),f,b
 17419  006F2E  A0D8               	btfss	status,0,c
 17420  006F30  0785               	decf	(memset@n+1)& (0+255),f,b
 17421  006F32  2984               	incf	memset@n& (0+255),w,b
 17422  006F34  E1F0               	bnz	l5085
 17423  006F36  2985               	incf	(memset@n+1)& (0+255),w,b
 17424  006F38  B4D8               	btfsc	status,2,c
 17425                           
 17426                           ; BSR set to: 0
 17427                           
 17428                           ; BSR set to: 0
 17429                           ;	Return value of _memset is never used
 17430  006F3A  0012               	return		;funcret
 17431  006F3C  FFFF               	dw	65535	; assembler added errata NOP
 17432  006F3E  D7EA               	goto	l1594
 17433  006F40  FFFF               	dw	65535	; errata NOP
 17434  006F42                     __end_of_memset:
 17435                           	opt stack 0
 17436                           tosu	equ	0xFFF
 17437                           tosh	equ	0xFFE
 17438                           tosl	equ	0xFFD
 17439                           pclath	equ	0xFFA
 17440                           tblptru	equ	0xFF8
 17441                           tblptrh	equ	0xFF7
 17442                           tblptrl	equ	0xFF6
 17443                           tablat	equ	0xFF5
 17444                           prodh	equ	0xFF4
 17445                           prodl	equ	0xFF3
 17446                           intcon	equ	0xFF2
 17447                           indf0	equ	0xFEF
 17448                           postinc0	equ	0xFEE
 17449                           fsr0h	equ	0xFEA
 17450                           fsr0l	equ	0xFE9
 17451                           wreg	equ	0xFE8
 17452                           postdec1	equ	0xFE5
 17453                           fsr1l	equ	0xFE1
 17454                           indf2	equ	0xFDF
 17455                           postinc2	equ	0xFDE
 17456                           postdec2	equ	0xFDD
 17457                           fsr2h	equ	0xFDA
 17458                           fsr2l	equ	0xFD9
 17459                           status	equ	0xFD8
 17460                           
 17461 ;; *************** function _aguardaBuffer *****************
 17462 ;; Defined at:
 17463 ;;		line 26 in file "serial.h"
 17464 ;; Parameters:    Size  Location     Type
 17465 ;;  str             2   19[BANK0 ] PTR unsigned char 
 17466 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 17467 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 17468 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_6(7), 
 17469 ;;		 -> STR_5(3), 
 17470 ;; Auto vars:     Size  Location     Type
 17471 ;;		None
 17472 ;; Return value:  Size  Location     Type
 17473 ;;                  1    wreg      unsigned char 
 17474 ;; Registers used:
 17475 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17476 ;; Tracked objects:
 17477 ;;		On entry : 0/0
 17478 ;;		On exit  : 0/0
 17479 ;;		Unchanged: 0/0
 17480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17481 ;;      Params:         0       2       0       0       0       0       0
 17482 ;;      Locals:         0       0       0       0       0       0       0
 17483 ;;      Temps:          0       0       0       0       0       0       0
 17484 ;;      Totals:         0       2       0       0       0       0       0
 17485 ;;Total ram usage:        2 bytes
 17486 ;; Hardware stack levels used:    1
 17487 ;; Hardware stack levels required when called:    8
 17488 ;; This function calls:
 17489 ;;		_delay
 17490 ;;		_strstr
 17491 ;; This function is called by:
 17492 ;;		_getSinalSIM800L
 17493 ;;		_comunicarTeste
 17494 ;;		_enviaSMS
 17495 ;; This function uses a non-reentrant model
 17496 ;;
 17497                           
 17498                           	psect	text56
 17499  006FF2                     __ptext56:
 17500                           	opt stack 0
 17501  006FF2                     _aguardaBuffer:
 17502                           	opt stack 0
 17503  006FF2  FFFF               	dw	65535	; assembler added errata NOP
 17504                           
 17505                           ;serial.h: 27: if (strstr(bufferSerial, str) != (0)) {
 17506                           
 17507                           ; BSR set to: 0
 17508                           ;incstack = 0
 17509  006FF4  0E05               	movlw	low _bufferSerial
 17510  006FF6  0100               	movlb	0	; () banked
 17511  006FF8  6F8F               	movwf	strstr@s1& (0+255),b
 17512  006FFA  0E01               	movlw	high _bufferSerial
 17513  006FFC  6F90               	movwf	(strstr@s1+1)& (0+255),b
 17514  006FFE  C093  F091         	movff	aguardaBuffer@str,strstr@s2
 17515  007002  C094  F092         	movff	aguardaBuffer@str+1,strstr@s2+1
 17516  007006  ECB3  F03C         	call	_strstr	;wreg free
 17517  00700A  0100               	movlb	0	; () banked
 17518  00700C  518F               	movf	?_strstr& (0+255),w,b
 17519  00700E  1190               	iorwf	(?_strstr+1)& (0+255),w,b
 17520  007010  B4D8               	btfsc	status,2,c
 17521  007012  D008               	goto	l265
 17522                           
 17523                           ; BSR set to: 0
 17524                           ;serial.h: 28: delay(150);
 17525  007014  0E00               	movlw	0
 17526  007016  6F81               	movwf	(delay@x+1)& (0+255),b
 17527  007018  0E96               	movlw	150
 17528  00701A  6F80               	movwf	delay@x& (0+255),b
 17529  00701C  ECFB  F036         	call	_delay	;wreg free
 17530                           
 17531                           ;serial.h: 29: return 1;
 17532  007020  0E01               	movlw	1
 17533  007022  D002               	goto	l5431
 17534  007024                     l265:
 17535  007024  FFFF               	dw	65535	; assembler added errata NOP
 17536                           
 17537                           ;serial.h: 30: }
 17538                           ;serial.h: 31: return 0;
 17539  007026  0E00               	movlw	0
 17540  007028                     l5431:
 17541  007028  FFFF               	dw	65535	; assembler added errata NOP
 17542  00702A  0012               	return		;funcret
 17543  00702C  FFFF               	dw	65535	; errata NOP
 17544  00702E                     __end_of_aguardaBuffer:
 17545                           	opt stack 0
 17546                           tosu	equ	0xFFF
 17547                           tosh	equ	0xFFE
 17548                           tosl	equ	0xFFD
 17549                           pclath	equ	0xFFA
 17550                           tblptru	equ	0xFF8
 17551                           tblptrh	equ	0xFF7
 17552                           tblptrl	equ	0xFF6
 17553                           tablat	equ	0xFF5
 17554                           prodh	equ	0xFF4
 17555                           prodl	equ	0xFF3
 17556                           intcon	equ	0xFF2
 17557                           indf0	equ	0xFEF
 17558                           postinc0	equ	0xFEE
 17559                           fsr0h	equ	0xFEA
 17560                           fsr0l	equ	0xFE9
 17561                           wreg	equ	0xFE8
 17562                           postdec1	equ	0xFE5
 17563                           fsr1l	equ	0xFE1
 17564                           indf2	equ	0xFDF
 17565                           postinc2	equ	0xFDE
 17566                           postdec2	equ	0xFDD
 17567                           fsr2h	equ	0xFDA
 17568                           fsr2l	equ	0xFD9
 17569                           status	equ	0xFD8
 17570                           
 17571 ;; *************** function _strstr *****************
 17572 ;; Defined at:
 17573 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strstr.c"
 17574 ;; Parameters:    Size  Location     Type
 17575 ;;  s1              2   15[BANK0 ] PTR const unsigned char 
 17576 ;;		 -> NULL(0), bufferSerial(60), 
 17577 ;;  s2              2   17[BANK0 ] PTR const unsigned char 
 17578 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 17579 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 17580 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 17581 ;;		 -> STR_6(7), STR_5(3), 
 17582 ;; Auto vars:     Size  Location     Type
 17583 ;;		None
 17584 ;; Return value:  Size  Location     Type
 17585 ;;                  2   15[BANK0 ] PTR unsigned char 
 17586 ;; Registers used:
 17587 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17588 ;; Tracked objects:
 17589 ;;		On entry : 0/0
 17590 ;;		On exit  : 0/0
 17591 ;;		Unchanged: 0/0
 17592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17593 ;;      Params:         0       4       0       0       0       0       0
 17594 ;;      Locals:         0       0       0       0       0       0       0
 17595 ;;      Temps:          0       0       0       0       0       0       0
 17596 ;;      Totals:         0       4       0       0       0       0       0
 17597 ;;Total ram usage:        4 bytes
 17598 ;; Hardware stack levels used:    1
 17599 ;; Hardware stack levels required when called:    7
 17600 ;; This function calls:
 17601 ;;		_strchr
 17602 ;;		_strlen
 17603 ;;		_strncmp
 17604 ;; This function is called by:
 17605 ;;		_aguardaBuffer
 17606 ;;		_getSerial
 17607 ;; This function uses a non-reentrant model
 17608 ;;
 17609                           
 17610                           	psect	text57
 17611  007966                     __ptext57:
 17612                           	opt stack 0
 17613  007966                     _strstr:
 17614                           	opt stack 0
 17615  007966  FFFF               	dw	65535	; assembler added errata NOP
 17616                           
 17617                           ;incstack = 0
 17618  007968  D035               	goto	l1747
 17619  00796A  FFFF               	dw	65535	; assembler added errata NOP
 17620  00796C  C08F  F086         	movff	strstr@s1,strncmp@s1
 17621  007970  C090  F087         	movff	strstr@s1+1,strncmp@s1+1
 17622  007974  C091  F088         	movff	strstr@s2,strncmp@s2
 17623  007978  C092  F089         	movff	strstr@s2+1,strncmp@s2+1
 17624  00797C  C091  F080         	movff	strstr@s2,strlen@s
 17625  007980  C092  F081         	movff	strstr@s2+1,strlen@s+1
 17626  007984  ECC2  F039         	call	_strlen	;wreg free
 17627  007988  C080  F08A         	movff	?_strlen,strncmp@len
 17628  00798C  C081  F08B         	movff	?_strlen+1,strncmp@len+1
 17629  007990  ECFF  F03C         	call	_strncmp	;wreg free
 17630  007994  0100               	movlb	0	; () banked
 17631  007996  5186               	movf	?_strncmp& (0+255),w,b
 17632  007998  1187               	iorwf	(?_strncmp+1)& (0+255),w,b
 17633  00799A  A4D8               	btfss	status,2,c
 17634  00799C  D005               	goto	l1749
 17635                           
 17636                           ; BSR set to: 0
 17637  00799E  C08F  F08F         	movff	strstr@s1,?_strstr
 17638  0079A2  C090  F090         	movff	strstr@s1+1,?_strstr+1
 17639                           
 17640                           ; BSR set to: 0
 17641  0079A6  D028               	goto	l5075
 17642  0079A8                     l1749:
 17643  0079A8  FFFF               	dw	65535	; assembler added errata NOP
 17644                           
 17645                           ; BSR set to: 0
 17646                           
 17647                           ; BSR set to: 0
 17648  0079AA  0E01               	movlw	1
 17649  0079AC  258F               	addwf	strstr@s1& (0+255),w,b
 17650  0079AE  6F80               	movwf	strchr@ptr& (0+255),b
 17651  0079B0  0E00               	movlw	0
 17652  0079B2  2190               	addwfc	(strstr@s1+1)& (0+255),w,b
 17653  0079B4  6F81               	movwf	(strchr@ptr+1)& (0+255),b
 17654  0079B6  C091  FFF6         	movff	strstr@s2,tblptrl
 17655  0079BA  C092  FFF7         	movff	strstr@s2+1,tblptrh
 17656  0079BE                     	if	0	;tblptru may be non-zero
 17657  0079BE                     	endif
 17658  0079BE                     	if	0	;tblptru may be non-zero
 17659  0079BE                     	endif
 17660  0079BE  0008               	tblrd		*
 17661  0079C0  FFFF               	dw	65535	; errata NOP
 17662  0079C2  50F5               	movf	tablat,w,c
 17663  0079C4  6F82               	movwf	strchr@chr& (0+255),b
 17664  0079C6  6B83               	clrf	(strchr@chr+1)& (0+255),b
 17665  0079C8  EC54  F038         	call	_strchr	;wreg free
 17666  0079CC  C080  F08F         	movff	?_strchr,strstr@s1
 17667  0079D0  C081  F090         	movff	?_strchr+1,strstr@s1+1
 17668  0079D4                     l1747:
 17669  0079D4  FFFF               	dw	65535	; assembler added errata NOP
 17670  0079D6  0100               	movlb	0	; () banked
 17671  0079D8  518F               	movf	strstr@s1& (0+255),w,b
 17672  0079DA  1190               	iorwf	(strstr@s1+1)& (0+255),w,b
 17673  0079DC  B4D8               	btfsc	status,2,c
 17674  0079DE  D007               	goto	u4910
 17675                           
 17676                           ; BSR set to: 0
 17677  0079E0  C08F  FFD9         	movff	strstr@s1,fsr2l
 17678  0079E4  C090  FFDA         	movff	strstr@s1+1,fsr2h
 17679  0079E8  50DF               	movf	indf2,w,c
 17680  0079EA  A4D8               	btfss	status,2,c
 17681  0079EC  D7BE               	goto	l1748
 17682  0079EE                     u4910:
 17683  0079EE  FFFF               	dw	65535	; assembler added errata NOP
 17684                           
 17685                           ; BSR set to: 0
 17686                           
 17687                           ; BSR set to: 0
 17688                           
 17689                           ; BSR set to: 0
 17690  0079F0  0E00               	movlw	0
 17691  0079F2  6F8F               	movwf	?_strstr& (0+255),b
 17692  0079F4  0E00               	movlw	0
 17693  0079F6  6F90               	movwf	(?_strstr+1)& (0+255),b
 17694  0079F8                     l5075:
 17695  0079F8  FFFF               	dw	65535	; assembler added errata NOP
 17696                           
 17697                           ; BSR set to: 0
 17698                           
 17699                           ; BSR set to: 0
 17700  0079FA  0012               	return		;funcret
 17701  0079FC  FFFF               	dw	65535	; errata NOP
 17702  0079FE                     __end_of_strstr:
 17703                           	opt stack 0
 17704                           tosu	equ	0xFFF
 17705                           tosh	equ	0xFFE
 17706                           tosl	equ	0xFFD
 17707                           pclath	equ	0xFFA
 17708                           tblptru	equ	0xFF8
 17709                           tblptrh	equ	0xFF7
 17710                           tblptrl	equ	0xFF6
 17711                           tablat	equ	0xFF5
 17712                           prodh	equ	0xFF4
 17713                           prodl	equ	0xFF3
 17714                           intcon	equ	0xFF2
 17715                           indf0	equ	0xFEF
 17716                           postinc0	equ	0xFEE
 17717                           fsr0h	equ	0xFEA
 17718                           fsr0l	equ	0xFE9
 17719                           wreg	equ	0xFE8
 17720                           postdec1	equ	0xFE5
 17721                           fsr1l	equ	0xFE1
 17722                           indf2	equ	0xFDF
 17723                           postinc2	equ	0xFDE
 17724                           postdec2	equ	0xFDD
 17725                           fsr2h	equ	0xFDA
 17726                           fsr2l	equ	0xFD9
 17727                           status	equ	0xFD8
 17728                           
 17729 ;; *************** function _strncmp *****************
 17730 ;; Defined at:
 17731 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncmp.c"
 17732 ;; Parameters:    Size  Location     Type
 17733 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 17734 ;;		 -> NULL(0), bufferSerial(60), 
 17735 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 17736 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 17737 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 17738 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 17739 ;;		 -> STR_6(7), STR_5(3), 
 17740 ;;  len             2   10[BANK0 ] unsigned int 
 17741 ;; Auto vars:     Size  Location     Type
 17742 ;;		None
 17743 ;; Return value:  Size  Location     Type
 17744 ;;                  2    6[BANK0 ] int 
 17745 ;; Registers used:
 17746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17747 ;; Tracked objects:
 17748 ;;		On entry : 0/0
 17749 ;;		On exit  : 0/0
 17750 ;;		Unchanged: 0/0
 17751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17752 ;;      Params:         0       6       0       0       0       0       0
 17753 ;;      Locals:         0       0       0       0       0       0       0
 17754 ;;      Temps:          0       3       0       0       0       0       0
 17755 ;;      Totals:         0       9       0       0       0       0       0
 17756 ;;Total ram usage:        9 bytes
 17757 ;; Hardware stack levels used:    1
 17758 ;; Hardware stack levels required when called:    6
 17759 ;; This function calls:
 17760 ;;		Nothing
 17761 ;; This function is called by:
 17762 ;;		_strstr
 17763 ;; This function uses a non-reentrant model
 17764 ;;
 17765                           
 17766                           	psect	text58
 17767  0079FE                     __ptext58:
 17768                           	opt stack 0
 17769  0079FE                     _strncmp:
 17770                           	opt stack 0
 17771  0079FE  FFFF               	dw	65535	; assembler added errata NOP
 17772                           
 17773                           ; BSR set to: 0
 17774                           ;incstack = 0
 17775  007A00  D03A               	goto	l1781
 17776  007A02  FFFF               	dw	65535	; assembler added errata NOP
 17777  007A04                     l5027:
 17778  007A04  C086  FFD9         	movff	strncmp@s1,fsr2l
 17779  007A08  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17780  007A0C  50DF               	movf	indf2,w,c
 17781  007A0E  B4D8               	btfsc	status,2,c
 17782  007A10  D011               	goto	u4830
 17783  007A12  C086  FFD9         	movff	strncmp@s1,fsr2l
 17784  007A16  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17785  007A1A  50DF               	movf	indf2,w,c
 17786  007A1C  0100               	movlb	0	; () banked
 17787  007A1E  6F8C               	movwf	??_strncmp& (0+255),b
 17788  007A20  C088  FFF6         	movff	strncmp@s2,tblptrl
 17789  007A24  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 17790  007A28                     	if	0	;tblptru may be non-zero
 17791  007A28                     	endif
 17792  007A28                     	if	0	;tblptru may be non-zero
 17793  007A28                     	endif
 17794  007A28  0008               	tblrd		*
 17795  007A2A  FFFF               	dw	65535	; errata NOP
 17796  007A2C  50F5               	movf	tablat,w,c
 17797  007A2E  198C               	xorwf	??_strncmp& (0+255),w,b
 17798  007A30  B4D8               	btfsc	status,2,c
 17799  007A32  D01C               	goto	l1783
 17800  007A34                     u4830:
 17801  007A34  FFFF               	dw	65535	; assembler added errata NOP
 17802                           
 17803                           ; BSR set to: 0
 17804  007A36  C088  FFF6         	movff	strncmp@s2,tblptrl
 17805  007A3A  C089  FFF7         	movff	strncmp@s2+1,tblptrh
 17806  007A3E                     	if	0	;tblptru may be non-zero
 17807  007A3E                     	endif
 17808  007A3E                     	if	0	;tblptru may be non-zero
 17809  007A3E                     	endif
 17810  007A3E  0008               	tblrd		*
 17811  007A40  FFFF               	dw	65535	; errata NOP
 17812  007A42  50F5               	movf	tablat,w,c
 17813  007A44  0100               	movlb	0	; () banked
 17814  007A46  6F8C               	movwf	??_strncmp& (0+255),b
 17815  007A48  6B8D               	clrf	(??_strncmp+1)& (0+255),b
 17816  007A4A  1F8C               	comf	??_strncmp& (0+255),f,b
 17817  007A4C  1F8D               	comf	(??_strncmp+1)& (0+255),f,b
 17818  007A4E  4B8C               	infsnz	??_strncmp& (0+255),f,b
 17819  007A50  2B8D               	incf	(??_strncmp+1)& (0+255),f,b
 17820  007A52  C086  FFD9         	movff	strncmp@s1,fsr2l
 17821  007A56  C087  FFDA         	movff	strncmp@s1+1,fsr2h
 17822  007A5A  50DF               	movf	indf2,w,c
 17823  007A5C  6F8E               	movwf	(??_strncmp+2)& (0+255),b
 17824  007A5E  518E               	movf	(??_strncmp+2)& (0+255),w,b
 17825  007A60  258C               	addwf	??_strncmp& (0+255),w,b
 17826  007A62  6F86               	movwf	?_strncmp& (0+255),b
 17827  007A64  0E00               	movlw	0
 17828  007A66  218D               	addwfc	(??_strncmp+1)& (0+255),w,b
 17829  007A68  6F87               	movwf	(?_strncmp+1)& (0+255),b
 17830                           
 17831                           ; BSR set to: 0
 17832  007A6A  D013               	goto	l5041
 17833  007A6C                     l1783:
 17834  007A6C  FFFF               	dw	65535	; assembler added errata NOP
 17835                           
 17836                           ; BSR set to: 0
 17837                           
 17838                           ; BSR set to: 0
 17839  007A6E  4B86               	infsnz	strncmp@s1& (0+255),f,b
 17840  007A70  2B87               	incf	(strncmp@s1+1)& (0+255),f,b
 17841  007A72  4B88               	infsnz	strncmp@s2& (0+255),f,b
 17842  007A74  2B89               	incf	(strncmp@s2+1)& (0+255),f,b
 17843  007A76                     l1781:
 17844  007A76  FFFF               	dw	65535	; assembler added errata NOP
 17845                           
 17846                           ; BSR set to: 0
 17847  007A78  0100               	movlb	0	; () banked
 17848  007A7A  078A               	decf	strncmp@len& (0+255),f,b
 17849  007A7C  A0D8               	btfss	status,0,c
 17850  007A7E  078B               	decf	(strncmp@len+1)& (0+255),f,b
 17851  007A80  298A               	incf	strncmp@len& (0+255),w,b
 17852  007A82  E1C0               	bnz	l5027
 17853  007A84  298B               	incf	(strncmp@len+1)& (0+255),w,b
 17854  007A86  A4D8               	btfss	status,2,c
 17855  007A88  D7BC               	goto	l1782
 17856                           
 17857                           ; BSR set to: 0
 17858                           
 17859                           ; BSR set to: 0
 17860  007A8A  0E00               	movlw	0
 17861  007A8C  6F87               	movwf	(?_strncmp+1)& (0+255),b
 17862  007A8E  0E00               	movlw	0
 17863  007A90  6F86               	movwf	?_strncmp& (0+255),b
 17864  007A92                     l5041:
 17865  007A92  FFFF               	dw	65535	; assembler added errata NOP
 17866                           
 17867                           ; BSR set to: 0
 17868                           
 17869                           ; BSR set to: 0
 17870  007A94  0012               	return		;funcret
 17871  007A96  FFFF               	dw	65535	; errata NOP
 17872  007A98                     __end_of_strncmp:
 17873                           	opt stack 0
 17874                           tosu	equ	0xFFF
 17875                           tosh	equ	0xFFE
 17876                           tosl	equ	0xFFD
 17877                           pclath	equ	0xFFA
 17878                           tblptru	equ	0xFF8
 17879                           tblptrh	equ	0xFF7
 17880                           tblptrl	equ	0xFF6
 17881                           tablat	equ	0xFF5
 17882                           prodh	equ	0xFF4
 17883                           prodl	equ	0xFF3
 17884                           intcon	equ	0xFF2
 17885                           indf0	equ	0xFEF
 17886                           postinc0	equ	0xFEE
 17887                           fsr0h	equ	0xFEA
 17888                           fsr0l	equ	0xFE9
 17889                           wreg	equ	0xFE8
 17890                           postdec1	equ	0xFE5
 17891                           fsr1l	equ	0xFE1
 17892                           indf2	equ	0xFDF
 17893                           postinc2	equ	0xFDE
 17894                           postdec2	equ	0xFDD
 17895                           fsr2h	equ	0xFDA
 17896                           fsr2l	equ	0xFD9
 17897                           status	equ	0xFD8
 17898                           
 17899 ;; *************** function _strlen *****************
 17900 ;; Defined at:
 17901 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
 17902 ;; Parameters:    Size  Location     Type
 17903 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 17904 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 17905 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 17906 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 17907 ;;		 -> STR_6(7), STR_5(3), NULL(0), bufferSerial(60), 
 17908 ;; Auto vars:     Size  Location     Type
 17909 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 17910 ;;		 -> STR_36(12), STR_34(3), STR_33(6), STR_24(2), 
 17911 ;;		 -> STR_22(3), STR_19(3), STR_17(6), STR_16(3), 
 17912 ;;		 -> STR_13(2), STR_11(3), STR_9(3), STR_7(7), 
 17913 ;;		 -> STR_6(7), STR_5(3), NULL(0), bufferSerial(60), 
 17914 ;; Return value:  Size  Location     Type
 17915 ;;                  2    0[BANK0 ] unsigned int 
 17916 ;; Registers used:
 17917 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 17918 ;; Tracked objects:
 17919 ;;		On entry : 0/0
 17920 ;;		On exit  : 0/0
 17921 ;;		Unchanged: 0/0
 17922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17923 ;;      Params:         0       2       0       0       0       0       0
 17924 ;;      Locals:         0       2       0       0       0       0       0
 17925 ;;      Temps:          0       2       0       0       0       0       0
 17926 ;;      Totals:         0       6       0       0       0       0       0
 17927 ;;Total ram usage:        6 bytes
 17928 ;; Hardware stack levels used:    1
 17929 ;; Hardware stack levels required when called:    6
 17930 ;; This function calls:
 17931 ;;		Nothing
 17932 ;; This function is called by:
 17933 ;;		_getSerial
 17934 ;;		_strstr
 17935 ;; This function uses a non-reentrant model
 17936 ;;
 17937                           
 17938                           	psect	text59
 17939  007384                     __ptext59:
 17940                           	opt stack 0
 17941  007384                     _strlen:
 17942                           	opt stack 0
 17943  007384  FFFF               	dw	65535	; assembler added errata NOP
 17944                           
 17945                           ; BSR set to: 0
 17946                           ;incstack = 0
 17947  007386  C080  F084         	movff	strlen@s,strlen@cp
 17948  00738A  C081  F085         	movff	strlen@s+1,strlen@cp+1
 17949  00738E  D004               	goto	l1735
 17950  007390  FFFF               	dw	65535	; assembler added errata NOP
 17951  007392  0100               	movlb	0	; () banked
 17952  007394  4B84               	infsnz	strlen@cp& (0+255),f,b
 17953  007396  2B85               	incf	(strlen@cp+1)& (0+255),f,b
 17954  007398                     l1735:
 17955  007398  FFFF               	dw	65535	; assembler added errata NOP
 17956                           
 17957                           ; BSR set to: 0
 17958  00739A  C084  FFF6         	movff	strlen@cp,tblptrl
 17959  00739E  C085  FFF7         	movff	strlen@cp+1,tblptrh
 17960  0073A2  6AF8               	clrf	tblptru,c
 17961  0073A4  0E05               	movlw	(high __ramtop+-1)
 17962  0073A6  64F7               	cpfsgt	tblptrh,c
 17963  0073A8  D004               	bra	u4707
 17964  0073AA  0008               	tblrd		*
 17965  0073AC  FFFF               	dw	65535	; errata NOP
 17966  0073AE  50F5               	movf	tablat,w,c
 17967  0073B0  D005               	bra	u4700
 17968  0073B2                     u4707:
 17969  0073B2  CFF6 FFE9          	movff	tblptrl,fsr0l
 17970  0073B6  CFF7 FFEA          	movff	tblptrh,fsr0h
 17971  0073BA  50EF               	movf	indf0,w,c
 17972  0073BC                     u4700:
 17973  0073BC  0900               	iorlw	0
 17974  0073BE  A4D8               	btfss	status,2,c
 17975  0073C0  D7E7               	goto	l1736
 17976  0073C2  C080  F082         	movff	strlen@s,??_strlen
 17977  0073C6  C081  F083         	movff	strlen@s+1,??_strlen+1
 17978  0073CA  0100               	movlb	0	; () banked
 17979  0073CC  1F82               	comf	??_strlen& (0+255),f,b
 17980  0073CE  1F83               	comf	(??_strlen+1)& (0+255),f,b
 17981  0073D0  4B82               	infsnz	??_strlen& (0+255),f,b
 17982  0073D2  2B83               	incf	(??_strlen+1)& (0+255),f,b
 17983  0073D4  5184               	movf	strlen@cp& (0+255),w,b
 17984  0073D6  2582               	addwf	??_strlen& (0+255),w,b
 17985  0073D8  6F80               	movwf	?_strlen& (0+255),b
 17986  0073DA  5185               	movf	(strlen@cp+1)& (0+255),w,b
 17987  0073DC  2183               	addwfc	(??_strlen+1)& (0+255),w,b
 17988  0073DE  6F81               	movwf	(?_strlen+1)& (0+255),b
 17989                           
 17990                           ; BSR set to: 0
 17991                           
 17992                           ; BSR set to: 0
 17993  0073E0  0012               	return		;funcret
 17994  0073E2  FFFF               	dw	65535	; errata NOP
 17995  0073E4                     __end_of_strlen:
 17996                           	opt stack 0
 17997                           tosu	equ	0xFFF
 17998                           tosh	equ	0xFFE
 17999                           tosl	equ	0xFFD
 18000                           pclath	equ	0xFFA
 18001                           tblptru	equ	0xFF8
 18002                           tblptrh	equ	0xFF7
 18003                           tblptrl	equ	0xFF6
 18004                           tablat	equ	0xFF5
 18005                           prodh	equ	0xFF4
 18006                           prodl	equ	0xFF3
 18007                           intcon	equ	0xFF2
 18008                           indf0	equ	0xFEF
 18009                           postinc0	equ	0xFEE
 18010                           fsr0h	equ	0xFEA
 18011                           fsr0l	equ	0xFE9
 18012                           wreg	equ	0xFE8
 18013                           postdec1	equ	0xFE5
 18014                           fsr1l	equ	0xFE1
 18015                           indf2	equ	0xFDF
 18016                           postinc2	equ	0xFDE
 18017                           postdec2	equ	0xFDD
 18018                           fsr2h	equ	0xFDA
 18019                           fsr2l	equ	0xFD9
 18020                           status	equ	0xFD8
 18021                           
 18022 ;; *************** function _strchr *****************
 18023 ;; Defined at:
 18024 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
 18025 ;; Parameters:    Size  Location     Type
 18026 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 18027 ;;		 -> NULL(0), bufferSerial(60), 
 18028 ;;  chr             2    2[BANK0 ] int 
 18029 ;; Auto vars:     Size  Location     Type
 18030 ;;		None
 18031 ;; Return value:  Size  Location     Type
 18032 ;;                  2    0[BANK0 ] PTR unsigned char 
 18033 ;; Registers used:
 18034 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18035 ;; Tracked objects:
 18036 ;;		On entry : 0/0
 18037 ;;		On exit  : 0/0
 18038 ;;		Unchanged: 0/0
 18039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18040 ;;      Params:         0       4       0       0       0       0       0
 18041 ;;      Locals:         0       0       0       0       0       0       0
 18042 ;;      Temps:          0       1       0       0       0       0       0
 18043 ;;      Totals:         0       5       0       0       0       0       0
 18044 ;;Total ram usage:        5 bytes
 18045 ;; Hardware stack levels used:    1
 18046 ;; Hardware stack levels required when called:    6
 18047 ;; This function calls:
 18048 ;;		Nothing
 18049 ;; This function is called by:
 18050 ;;		_strstr
 18051 ;; This function uses a non-reentrant model
 18052 ;;
 18053                           
 18054                           	psect	text60
 18055  0070A8                     __ptext60:
 18056                           	opt stack 0
 18057  0070A8                     _strchr:
 18058                           	opt stack 0
 18059  0070A8  FFFF               	dw	65535	; assembler added errata NOP
 18060                           
 18061                           ; BSR set to: 0
 18062                           ;incstack = 0
 18063  0070AA  C080  FFD9         	movff	strchr@ptr,fsr2l
 18064  0070AE  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 18065  0070B2  0100               	movlb	0	; () banked
 18066  0070B4  5182               	movf	strchr@chr& (0+255),w,b
 18067  0070B6  18DE               	xorwf	postinc2,w,c
 18068  0070B8  A4D8               	btfss	status,2,c
 18069  0070BA  D005               	goto	l1776
 18070                           
 18071                           ; BSR set to: 0
 18072  0070BC  C080  F080         	movff	strchr@ptr,?_strchr
 18073  0070C0  C081  F081         	movff	strchr@ptr+1,?_strchr+1
 18074                           
 18075                           ; BSR set to: 0
 18076  0070C4  D00E               	goto	l5053
 18077  0070C6                     l1776:
 18078  0070C6  FFFF               	dw	65535	; assembler added errata NOP
 18079                           
 18080                           ; BSR set to: 0
 18081                           
 18082                           ; BSR set to: 0
 18083  0070C8  C080  FFD9         	movff	strchr@ptr,fsr2l
 18084  0070CC  C081  FFDA         	movff	strchr@ptr+1,fsr2h
 18085  0070D0  4B80               	infsnz	strchr@ptr& (0+255),f,b
 18086  0070D2  2B81               	incf	(strchr@ptr+1)& (0+255),f,b
 18087  0070D4  50DF               	movf	indf2,w,c
 18088  0070D6  A4D8               	btfss	status,2,c
 18089  0070D8  D7E7               	goto	_strchr
 18090                           
 18091                           ; BSR set to: 0
 18092                           
 18093                           ; BSR set to: 0
 18094  0070DA  0E00               	movlw	0
 18095  0070DC  6F80               	movwf	?_strchr& (0+255),b
 18096  0070DE  0E00               	movlw	0
 18097  0070E0  6F81               	movwf	(?_strchr+1)& (0+255),b
 18098  0070E2                     l5053:
 18099  0070E2  FFFF               	dw	65535	; assembler added errata NOP
 18100                           
 18101                           ; BSR set to: 0
 18102                           
 18103                           ; BSR set to: 0
 18104  0070E4  0012               	return		;funcret
 18105  0070E6  FFFF               	dw	65535	; errata NOP
 18106  0070E8                     __end_of_strchr:
 18107                           	opt stack 0
 18108                           tosu	equ	0xFFF
 18109                           tosh	equ	0xFFE
 18110                           tosl	equ	0xFFD
 18111                           pclath	equ	0xFFA
 18112                           tblptru	equ	0xFF8
 18113                           tblptrh	equ	0xFF7
 18114                           tblptrl	equ	0xFF6
 18115                           tablat	equ	0xFF5
 18116                           prodh	equ	0xFF4
 18117                           prodl	equ	0xFF3
 18118                           intcon	equ	0xFF2
 18119                           indf0	equ	0xFEF
 18120                           postinc0	equ	0xFEE
 18121                           fsr0h	equ	0xFEA
 18122                           fsr0l	equ	0xFE9
 18123                           wreg	equ	0xFE8
 18124                           postdec1	equ	0xFE5
 18125                           fsr1l	equ	0xFE1
 18126                           indf2	equ	0xFDF
 18127                           postinc2	equ	0xFDE
 18128                           postdec2	equ	0xFDD
 18129                           fsr2h	equ	0xFDA
 18130                           fsr2l	equ	0xFD9
 18131                           status	equ	0xFD8
 18132                           
 18133 ;; *************** function _delay *****************
 18134 ;; Defined at:
 18135 ;;		line 16 in file "function.c"
 18136 ;; Parameters:    Size  Location     Type
 18137 ;;  x               2    0[BANK0 ] int 
 18138 ;; Auto vars:     Size  Location     Type
 18139 ;;		None
 18140 ;; Return value:  Size  Location     Type
 18141 ;;                  1    wreg      void 
 18142 ;; Registers used:
 18143 ;;		wreg, status,2, status,0
 18144 ;; Tracked objects:
 18145 ;;		On entry : 0/0
 18146 ;;		On exit  : 0/0
 18147 ;;		Unchanged: 0/0
 18148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18149 ;;      Params:         0       2       0       0       0       0       0
 18150 ;;      Locals:         0       0       0       0       0       0       0
 18151 ;;      Temps:          0       1       0       0       0       0       0
 18152 ;;      Totals:         0       3       0       0       0       0       0
 18153 ;;Total ram usage:        3 bytes
 18154 ;; Hardware stack levels used:    1
 18155 ;; Hardware stack levels required when called:    6
 18156 ;; This function calls:
 18157 ;;		Nothing
 18158 ;; This function is called by:
 18159 ;;		_aguardaBuffer
 18160 ;;		_limparBuffer
 18161 ;;		_getSinalSIM800L
 18162 ;;		_comunicarTeste
 18163 ;;		_enviaSMS
 18164 ;;		_writeEEPROM_ext
 18165 ;;		_partidaBombaEstacionaria
 18166 ;;		_main
 18167 ;; This function uses a non-reentrant model
 18168 ;;
 18169                           
 18170                           	psect	text61
 18171  006DF6                     __ptext61:
 18172                           	opt stack 0
 18173  006DF6                     _delay:
 18174                           	opt stack 0
 18175  006DF6  FFFF               	dw	65535	; assembler added errata NOP
 18176                           
 18177                           ;function.c: 17: while (x--) {
 18178                           
 18179                           ; BSR set to: 0
 18180                           ;incstack = 0
 18181  006DF8  D00C               	goto	l1041
 18182  006DFA  FFFF               	dw	65535	; assembler added errata NOP
 18183  006DFC                     l5079:
 18184                           
 18185                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 18186  006DFC  0E02               	movlw	2
 18187  006DFE  0100               	movlb	0	; () banked
 18188  006E00  6F82               	movwf	??_delay& (0+255),b
 18189  006E02  0EF2               	movlw	242
 18190  006E04                     u9417:
 18191  006E04  FFFF               	dw	65535	; errata NOP
 18192  006E06  2EE8               	decfsz	wreg,f,c
 18193  006E08  D7FD               	bra	u9417
 18194  006E0A  2F82               	decfsz	??_delay& (0+255),f,b
 18195  006E0C  D7FB               	bra	u9417
 18196  006E0E  F000               	nop	
 18197  006E10  0004               	clrwdt		;# 
 18198  006E12                     l1041:
 18199  006E12  FFFF               	dw	65535	; assembler added errata NOP
 18200  006E14  0100               	movlb	0	; () banked
 18201  006E16  0780               	decf	delay@x& (0+255),f,b
 18202  006E18  A0D8               	btfss	status,0,c
 18203  006E1A  0781               	decf	(delay@x+1)& (0+255),f,b
 18204  006E1C  2980               	incf	delay@x& (0+255),w,b
 18205  006E1E  E1EE               	bnz	l5079
 18206  006E20  2981               	incf	(delay@x+1)& (0+255),w,b
 18207  006E22  B4D8               	btfsc	status,2,c
 18208                           
 18209                           ; BSR set to: 0
 18210                           
 18211                           ; BSR set to: 0
 18212  006E24  0012               	return		;funcret
 18213  006E26  FFFF               	dw	65535	; assembler added errata NOP
 18214  006E28  D7E8               	goto	l1042
 18215  006E2A  FFFF               	dw	65535	; errata NOP
 18216  006E2C                     __end_of_delay:
 18217                           	opt stack 0
 18218                           tosu	equ	0xFFF
 18219                           tosh	equ	0xFFE
 18220                           tosl	equ	0xFFD
 18221                           pclath	equ	0xFFA
 18222                           tblptru	equ	0xFF8
 18223                           tblptrh	equ	0xFF7
 18224                           tblptrl	equ	0xFF6
 18225                           tablat	equ	0xFF5
 18226                           prodh	equ	0xFF4
 18227                           prodl	equ	0xFF3
 18228                           intcon	equ	0xFF2
 18229                           indf0	equ	0xFEF
 18230                           postinc0	equ	0xFEE
 18231                           fsr0h	equ	0xFEA
 18232                           fsr0l	equ	0xFE9
 18233                           wreg	equ	0xFE8
 18234                           postdec1	equ	0xFE5
 18235                           fsr1l	equ	0xFE1
 18236                           indf2	equ	0xFDF
 18237                           postinc2	equ	0xFDE
 18238                           postdec2	equ	0xFDD
 18239                           fsr2h	equ	0xFDA
 18240                           fsr2l	equ	0xFD9
 18241                           status	equ	0xFD8
 18242                           
 18243 ;; *************** function _RTC_Init *****************
 18244 ;; Defined at:
 18245 ;;		line 98 in file "ds1307.h"
 18246 ;; Parameters:    Size  Location     Type
 18247 ;;		None
 18248 ;; Auto vars:     Size  Location     Type
 18249 ;;		None
 18250 ;; Return value:  Size  Location     Type
 18251 ;;                  1    wreg      void 
 18252 ;; Registers used:
 18253 ;;		wreg, status,2, status,0, cstack
 18254 ;; Tracked objects:
 18255 ;;		On entry : 0/0
 18256 ;;		On exit  : 0/0
 18257 ;;		Unchanged: 0/0
 18258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18259 ;;      Params:         0       0       0       0       0       0       0
 18260 ;;      Locals:         0       0       0       0       0       0       0
 18261 ;;      Temps:          0       0       0       0       0       0       0
 18262 ;;      Totals:         0       0       0       0       0       0       0
 18263 ;;Total ram usage:        0 bytes
 18264 ;; Hardware stack levels used:    1
 18265 ;; Hardware stack levels required when called:    8
 18266 ;; This function calls:
 18267 ;;		_I2C_Start
 18268 ;;		_I2C_Stop
 18269 ;;		_I2C_Write
 18270 ;; This function is called by:
 18271 ;;		_main
 18272 ;; This function uses a non-reentrant model
 18273 ;;
 18274                           
 18275                           	psect	text62
 18276  006E98                     __ptext62:
 18277                           	opt stack 0
 18278  006E98                     _RTC_Init:
 18279                           	opt stack 0
 18280  006E98  FFFF               	dw	65535	; assembler added errata NOP
 18281                           
 18282                           ;ds1307.h: 100: I2C_Start();
 18283                           
 18284                           ; BSR set to: 0
 18285                           ;incstack = 0
 18286  006E9A  EC98  F035         	call	_I2C_Start	;wreg free
 18287                           
 18288                           ;ds1307.h: 101: I2C_Write(0xD0);
 18289  006E9E  0E00               	movlw	0
 18290  006EA0  0100               	movlb	0	; () banked
 18291  006EA2  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 18292  006EA4  0ED0               	movlw	208
 18293  006EA6  6F8A               	movwf	I2C_Write@d& (0+255),b
 18294  006EA8  ECB1  F035         	call	_I2C_Write	;wreg free
 18295                           
 18296                           ;ds1307.h: 102: I2C_Write(0x07);
 18297  006EAC  0E00               	movlw	0
 18298  006EAE  0100               	movlb	0	; () banked
 18299  006EB0  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 18300  006EB2  0E07               	movlw	7
 18301  006EB4  6F8A               	movwf	I2C_Write@d& (0+255),b
 18302  006EB6  ECB1  F035         	call	_I2C_Write	;wreg free
 18303                           
 18304                           ;ds1307.h: 103: I2C_Write(0x00);
 18305  006EBA  0E00               	movlw	0
 18306  006EBC  0100               	movlb	0	; () banked
 18307  006EBE  6F8B               	movwf	(I2C_Write@d+1)& (0+255),b
 18308  006EC0  0E00               	movlw	0
 18309  006EC2  6F8A               	movwf	I2C_Write@d& (0+255),b
 18310  006EC4  ECB1  F035         	call	_I2C_Write	;wreg free
 18311                           
 18312                           ;ds1307.h: 104: I2C_Stop();
 18313  006EC8  EC9E  F035         	call	_I2C_Stop	;wreg free
 18314  006ECC  0012               	return		;funcret
 18315  006ECE  FFFF               	dw	65535	; errata NOP
 18316  006ED0                     __end_of_RTC_Init:
 18317                           	opt stack 0
 18318                           tosu	equ	0xFFF
 18319                           tosh	equ	0xFFE
 18320                           tosl	equ	0xFFD
 18321                           pclath	equ	0xFFA
 18322                           tblptru	equ	0xFF8
 18323                           tblptrh	equ	0xFF7
 18324                           tblptrl	equ	0xFF6
 18325                           tablat	equ	0xFF5
 18326                           prodh	equ	0xFF4
 18327                           prodl	equ	0xFF3
 18328                           intcon	equ	0xFF2
 18329                           indf0	equ	0xFEF
 18330                           postinc0	equ	0xFEE
 18331                           fsr0h	equ	0xFEA
 18332                           fsr0l	equ	0xFE9
 18333                           wreg	equ	0xFE8
 18334                           postdec1	equ	0xFE5
 18335                           fsr1l	equ	0xFE1
 18336                           indf2	equ	0xFDF
 18337                           postinc2	equ	0xFDE
 18338                           postdec2	equ	0xFDD
 18339                           fsr2h	equ	0xFDA
 18340                           fsr2l	equ	0xFD9
 18341                           status	equ	0xFD8
 18342                           
 18343 ;; *************** function _I2C_Write *****************
 18344 ;; Defined at:
 18345 ;;		line 42 in file "I2C.c"
 18346 ;; Parameters:    Size  Location     Type
 18347 ;;  d               2   10[BANK0 ] unsigned int 
 18348 ;; Auto vars:     Size  Location     Type
 18349 ;;		None
 18350 ;; Return value:  Size  Location     Type
 18351 ;;                  1    wreg      void 
 18352 ;; Registers used:
 18353 ;;		wreg, status,2, status,0, cstack
 18354 ;; Tracked objects:
 18355 ;;		On entry : 0/0
 18356 ;;		On exit  : 0/0
 18357 ;;		Unchanged: 0/0
 18358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18359 ;;      Params:         0       2       0       0       0       0       0
 18360 ;;      Locals:         0       0       0       0       0       0       0
 18361 ;;      Temps:          0       0       0       0       0       0       0
 18362 ;;      Totals:         0       2       0       0       0       0       0
 18363 ;;Total ram usage:        2 bytes
 18364 ;; Hardware stack levels used:    1
 18365 ;; Hardware stack levels required when called:    7
 18366 ;; This function calls:
 18367 ;;		_I2C_Wait
 18368 ;; This function is called by:
 18369 ;;		_setDS1307TimeDate
 18370 ;;		_getDS1307TimeDate
 18371 ;;		_RTC_Init
 18372 ;;		_writeEEPROM_ext
 18373 ;;		_readEEPROM_ext
 18374 ;;		_getDS1307Time
 18375 ;;		_setDS1307Time
 18376 ;; This function uses a non-reentrant model
 18377 ;;
 18378                           
 18379                           	psect	text63
 18380  006B62                     __ptext63:
 18381                           	opt stack 0
 18382  006B62                     _I2C_Write:
 18383                           	opt stack 0
 18384  006B62  FFFF               	dw	65535	; assembler added errata NOP
 18385                           
 18386                           ;I2C.c: 43: I2C_Wait();
 18387                           
 18388                           ;incstack = 0
 18389  006B64  ECE9  F035         	call	_I2C_Wait	;wreg free
 18390                           
 18391                           ;I2C.c: 44: SSPBUF = d;
 18392  006B68  C08A  FFC9         	movff	I2C_Write@d,4041	;volatile
 18393  006B6C  0012               	return		;funcret
 18394  006B6E  FFFF               	dw	65535	; errata NOP
 18395  006B70                     __end_of_I2C_Write:
 18396                           	opt stack 0
 18397                           tosu	equ	0xFFF
 18398                           tosh	equ	0xFFE
 18399                           tosl	equ	0xFFD
 18400                           pclath	equ	0xFFA
 18401                           tblptru	equ	0xFF8
 18402                           tblptrh	equ	0xFF7
 18403                           tblptrl	equ	0xFF6
 18404                           tablat	equ	0xFF5
 18405                           prodh	equ	0xFF4
 18406                           prodl	equ	0xFF3
 18407                           intcon	equ	0xFF2
 18408                           indf0	equ	0xFEF
 18409                           postinc0	equ	0xFEE
 18410                           fsr0h	equ	0xFEA
 18411                           fsr0l	equ	0xFE9
 18412                           wreg	equ	0xFE8
 18413                           postdec1	equ	0xFE5
 18414                           fsr1l	equ	0xFE1
 18415                           indf2	equ	0xFDF
 18416                           postinc2	equ	0xFDE
 18417                           postdec2	equ	0xFDD
 18418                           fsr2h	equ	0xFDA
 18419                           fsr2l	equ	0xFD9
 18420                           status	equ	0xFD8
 18421                           
 18422 ;; *************** function _I2C_Stop *****************
 18423 ;; Defined at:
 18424 ;;		line 36 in file "I2C.c"
 18425 ;; Parameters:    Size  Location     Type
 18426 ;;		None
 18427 ;; Auto vars:     Size  Location     Type
 18428 ;;		None
 18429 ;; Return value:  Size  Location     Type
 18430 ;;                  1    wreg      void 
 18431 ;; Registers used:
 18432 ;;		wreg, status,2, status,0, cstack
 18433 ;; Tracked objects:
 18434 ;;		On entry : 0/0
 18435 ;;		On exit  : 0/0
 18436 ;;		Unchanged: 0/0
 18437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18438 ;;      Params:         0       0       0       0       0       0       0
 18439 ;;      Locals:         0       0       0       0       0       0       0
 18440 ;;      Temps:          0       0       0       0       0       0       0
 18441 ;;      Totals:         0       0       0       0       0       0       0
 18442 ;;Total ram usage:        0 bytes
 18443 ;; Hardware stack levels used:    1
 18444 ;; Hardware stack levels required when called:    7
 18445 ;; This function calls:
 18446 ;;		_I2C_Wait
 18447 ;; This function is called by:
 18448 ;;		_setDS1307TimeDate
 18449 ;;		_getDS1307TimeDate
 18450 ;;		_RTC_Init
 18451 ;;		_writeEEPROM_ext
 18452 ;;		_readEEPROM_ext
 18453 ;;		_getDS1307Time
 18454 ;;		_setDS1307Time
 18455 ;; This function uses a non-reentrant model
 18456 ;;
 18457                           
 18458                           	psect	text64
 18459  006B3C                     __ptext64:
 18460                           	opt stack 0
 18461  006B3C                     _I2C_Stop:
 18462                           	opt stack 0
 18463  006B3C  FFFF               	dw	65535	; assembler added errata NOP
 18464                           
 18465                           ;I2C.c: 37: I2C_Wait();
 18466                           
 18467                           ;incstack = 0
 18468  006B3E  ECE9  F035         	call	_I2C_Wait	;wreg free
 18469                           
 18470                           ;I2C.c: 38: PEN = 1;
 18471  006B42  84C5               	bsf	4037,2,c	;volatile
 18472  006B44  0012               	return		;funcret
 18473  006B46  FFFF               	dw	65535	; errata NOP
 18474  006B48                     __end_of_I2C_Stop:
 18475                           	opt stack 0
 18476                           tosu	equ	0xFFF
 18477                           tosh	equ	0xFFE
 18478                           tosl	equ	0xFFD
 18479                           pclath	equ	0xFFA
 18480                           tblptru	equ	0xFF8
 18481                           tblptrh	equ	0xFF7
 18482                           tblptrl	equ	0xFF6
 18483                           tablat	equ	0xFF5
 18484                           prodh	equ	0xFF4
 18485                           prodl	equ	0xFF3
 18486                           intcon	equ	0xFF2
 18487                           indf0	equ	0xFEF
 18488                           postinc0	equ	0xFEE
 18489                           fsr0h	equ	0xFEA
 18490                           fsr0l	equ	0xFE9
 18491                           wreg	equ	0xFE8
 18492                           postdec1	equ	0xFE5
 18493                           fsr1l	equ	0xFE1
 18494                           indf2	equ	0xFDF
 18495                           postinc2	equ	0xFDE
 18496                           postdec2	equ	0xFDD
 18497                           fsr2h	equ	0xFDA
 18498                           fsr2l	equ	0xFD9
 18499                           status	equ	0xFD8
 18500                           
 18501 ;; *************** function _I2C_Start *****************
 18502 ;; Defined at:
 18503 ;;		line 26 in file "I2C.c"
 18504 ;; Parameters:    Size  Location     Type
 18505 ;;		None
 18506 ;; Auto vars:     Size  Location     Type
 18507 ;;		None
 18508 ;; Return value:  Size  Location     Type
 18509 ;;                  1    wreg      void 
 18510 ;; Registers used:
 18511 ;;		wreg, status,2, status,0, cstack
 18512 ;; Tracked objects:
 18513 ;;		On entry : 0/0
 18514 ;;		On exit  : 0/0
 18515 ;;		Unchanged: 0/0
 18516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18517 ;;      Params:         0       0       0       0       0       0       0
 18518 ;;      Locals:         0       0       0       0       0       0       0
 18519 ;;      Temps:          0       0       0       0       0       0       0
 18520 ;;      Totals:         0       0       0       0       0       0       0
 18521 ;;Total ram usage:        0 bytes
 18522 ;; Hardware stack levels used:    1
 18523 ;; Hardware stack levels required when called:    7
 18524 ;; This function calls:
 18525 ;;		_I2C_Wait
 18526 ;; This function is called by:
 18527 ;;		_setDS1307TimeDate
 18528 ;;		_getDS1307TimeDate
 18529 ;;		_RTC_Init
 18530 ;;		_writeEEPROM_ext
 18531 ;;		_readEEPROM_ext
 18532 ;;		_getDS1307Time
 18533 ;;		_setDS1307Time
 18534 ;; This function uses a non-reentrant model
 18535 ;;
 18536                           
 18537                           	psect	text65
 18538  006B30                     __ptext65:
 18539                           	opt stack 0
 18540  006B30                     _I2C_Start:
 18541                           	opt stack 0
 18542  006B30  FFFF               	dw	65535	; assembler added errata NOP
 18543                           
 18544                           ;I2C.c: 27: I2C_Wait();
 18545                           
 18546                           ;incstack = 0
 18547  006B32  ECE9  F035         	call	_I2C_Wait	;wreg free
 18548                           
 18549                           ;I2C.c: 28: SEN = 1;
 18550  006B36  80C5               	bsf	4037,0,c	;volatile
 18551  006B38  0012               	return		;funcret
 18552  006B3A  FFFF               	dw	65535	; errata NOP
 18553  006B3C                     __end_of_I2C_Start:
 18554                           	opt stack 0
 18555                           tosu	equ	0xFFF
 18556                           tosh	equ	0xFFE
 18557                           tosl	equ	0xFFD
 18558                           pclath	equ	0xFFA
 18559                           tblptru	equ	0xFF8
 18560                           tblptrh	equ	0xFF7
 18561                           tblptrl	equ	0xFF6
 18562                           tablat	equ	0xFF5
 18563                           prodh	equ	0xFF4
 18564                           prodl	equ	0xFF3
 18565                           intcon	equ	0xFF2
 18566                           indf0	equ	0xFEF
 18567                           postinc0	equ	0xFEE
 18568                           fsr0h	equ	0xFEA
 18569                           fsr0l	equ	0xFE9
 18570                           wreg	equ	0xFE8
 18571                           postdec1	equ	0xFE5
 18572                           fsr1l	equ	0xFE1
 18573                           indf2	equ	0xFDF
 18574                           postinc2	equ	0xFDE
 18575                           postdec2	equ	0xFDD
 18576                           fsr2h	equ	0xFDA
 18577                           fsr2l	equ	0xFD9
 18578                           status	equ	0xFD8
 18579                           
 18580 ;; *************** function _I2C_Wait *****************
 18581 ;; Defined at:
 18582 ;;		line 22 in file "I2C.c"
 18583 ;; Parameters:    Size  Location     Type
 18584 ;;		None
 18585 ;; Auto vars:     Size  Location     Type
 18586 ;;		None
 18587 ;; Return value:  Size  Location     Type
 18588 ;;                  1    wreg      void 
 18589 ;; Registers used:
 18590 ;;		wreg, status,2, status,0
 18591 ;; Tracked objects:
 18592 ;;		On entry : 0/0
 18593 ;;		On exit  : 0/0
 18594 ;;		Unchanged: 0/0
 18595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18596 ;;      Params:         0       0       0       0       0       0       0
 18597 ;;      Locals:         0       0       0       0       0       0       0
 18598 ;;      Temps:          0       1       0       0       0       0       0
 18599 ;;      Totals:         0       1       0       0       0       0       0
 18600 ;;Total ram usage:        1 bytes
 18601 ;; Hardware stack levels used:    1
 18602 ;; Hardware stack levels required when called:    6
 18603 ;; This function calls:
 18604 ;;		Nothing
 18605 ;; This function is called by:
 18606 ;;		_I2C_Start
 18607 ;;		_I2C_Restart
 18608 ;;		_I2C_Stop
 18609 ;;		_I2C_Write
 18610 ;;		_I2C_Read
 18611 ;; This function uses a non-reentrant model
 18612 ;;
 18613                           
 18614                           	psect	text66
 18615  006BD2                     __ptext66:
 18616                           	opt stack 0
 18617  006BD2                     _I2C_Wait:
 18618                           	opt stack 0
 18619  006BD2  FFFF               	dw	65535	; assembler added errata NOP
 18620                           
 18621                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 18622                           
 18623                           ;incstack = 0
 18624  006BD4  B4C7               	btfsc	4039,2,c	;volatile
 18625  006BD6  D7FD               	goto	_I2C_Wait
 18626  006BD8  CFC5 F080          	movff	4037,??_I2C_Wait	;volatile
 18627  006BDC  0E1F               	movlw	31
 18628  006BDE  0100               	movlb	0	; () banked
 18629  006BE0  1780               	andwf	??_I2C_Wait& (0+255),f,b
 18630  006BE2  B4D8               	btfsc	status,2,c
 18631                           
 18632                           ; BSR set to: 0
 18633                           
 18634                           ; BSR set to: 0
 18635  006BE4  0012               	return		;funcret
 18636  006BE6  FFFF               	dw	65535	; assembler added errata NOP
 18637  006BE8  D7F4               	goto	_I2C_Wait
 18638  006BEA  FFFF               	dw	65535	; errata NOP
 18639  006BEC                     __end_of_I2C_Wait:
 18640                           	opt stack 0
 18641                           tosu	equ	0xFFF
 18642                           tosh	equ	0xFFE
 18643                           tosl	equ	0xFFD
 18644                           pclath	equ	0xFFA
 18645                           tblptru	equ	0xFF8
 18646                           tblptrh	equ	0xFF7
 18647                           tblptrl	equ	0xFF6
 18648                           tablat	equ	0xFF5
 18649                           prodh	equ	0xFF4
 18650                           prodl	equ	0xFF3
 18651                           intcon	equ	0xFF2
 18652                           indf0	equ	0xFEF
 18653                           postinc0	equ	0xFEE
 18654                           fsr0h	equ	0xFEA
 18655                           fsr0l	equ	0xFE9
 18656                           wreg	equ	0xFE8
 18657                           postdec1	equ	0xFE5
 18658                           fsr1l	equ	0xFE1
 18659                           indf2	equ	0xFDF
 18660                           postinc2	equ	0xFDE
 18661                           postdec2	equ	0xFDD
 18662                           fsr2h	equ	0xFDA
 18663                           fsr2l	equ	0xFD9
 18664                           status	equ	0xFD8
 18665                           
 18666 ;; *************** function _Lcd_Init *****************
 18667 ;; Defined at:
 18668 ;;		line 12 in file "lcd.h"
 18669 ;; Parameters:    Size  Location     Type
 18670 ;;		None
 18671 ;; Auto vars:     Size  Location     Type
 18672 ;;		None
 18673 ;; Return value:  Size  Location     Type
 18674 ;;                  1    wreg      void 
 18675 ;; Registers used:
 18676 ;;		wreg, status,2, cstack
 18677 ;; Tracked objects:
 18678 ;;		On entry : 0/0
 18679 ;;		On exit  : 0/0
 18680 ;;		Unchanged: 0/0
 18681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18682 ;;      Params:         0       0       0       0       0       0       0
 18683 ;;      Locals:         0       0       0       0       0       0       0
 18684 ;;      Temps:          0       1       0       0       0       0       0
 18685 ;;      Totals:         0       1       0       0       0       0       0
 18686 ;;Total ram usage:        1 bytes
 18687 ;; Hardware stack levels used:    1
 18688 ;; Hardware stack levels required when called:    8
 18689 ;; This function calls:
 18690 ;;		_Lcd_Cmd
 18691 ;;		_Lcd_Port
 18692 ;; This function is called by:
 18693 ;;		_main
 18694 ;; This function uses a non-reentrant model
 18695 ;;
 18696                           
 18697                           	psect	text67
 18698  00769A                     __ptext67:
 18699                           	opt stack 0
 18700  00769A                     _Lcd_Init:
 18701                           	opt stack 0
 18702  00769A  FFFF               	dw	65535	; assembler added errata NOP
 18703                           
 18704                           ;lcd.h: 21: Lcd_Port(0x00);
 18705                           
 18706                           ; BSR set to: 0
 18707                           ;incstack = 0
 18708  00769C  0E00               	movlw	0
 18709  00769E  ECD7  F038         	call	_Lcd_Port
 18710                           
 18711                           ;lcd.h: 22: _delay((unsigned long)((30)*(8000000/4000.0)));
 18712  0076A2  0E3B               	movlw	59
 18713  0076A4  0100               	movlb	0	; () banked
 18714  0076A6  6F83               	movwf	??_Lcd_Init& (0+255),b
 18715  0076A8  0E79               	movlw	121
 18716  0076AA                     u9427:
 18717  0076AA  FFFF               	dw	65535	; errata NOP
 18718  0076AC  2EE8               	decfsz	wreg,f,c
 18719  0076AE  D7FD               	bra	u9427
 18720  0076B0  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18721  0076B2  D7FB               	bra	u9427
 18722  0076B4  D000               	nop2	
 18723  0076B6  F000               	nop	
 18724                           
 18725                           ;lcd.h: 23: Lcd_Cmd(0x03);
 18726  0076B8  0E03               	movlw	3
 18727  0076BA  EC50  F036         	call	_Lcd_Cmd
 18728                           
 18729                           ;lcd.h: 24: _delay((unsigned long)((15)*(8000000/4000.0)));
 18730  0076BE  0E1E               	movlw	30
 18731  0076C0  0100               	movlb	0	; () banked
 18732  0076C2  6F83               	movwf	??_Lcd_Init& (0+255),b
 18733  0076C4  0E3C               	movlw	60
 18734  0076C6                     u9437:
 18735  0076C6  FFFF               	dw	65535	; errata NOP
 18736  0076C8  2EE8               	decfsz	wreg,f,c
 18737  0076CA  D7FD               	bra	u9437
 18738  0076CC  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18739  0076CE  D7FB               	bra	u9437
 18740  0076D0  F000               	nop	
 18741                           
 18742                           ;lcd.h: 25: Lcd_Cmd(0x03);
 18743  0076D2  0E03               	movlw	3
 18744  0076D4  EC50  F036         	call	_Lcd_Cmd
 18745                           
 18746                           ;lcd.h: 26: _delay((unsigned long)((20)*(8000000/4000.0)));
 18747  0076D8  0E27               	movlw	39
 18748  0076DA  0100               	movlb	0	; () banked
 18749  0076DC  6F83               	movwf	??_Lcd_Init& (0+255),b
 18750  0076DE  0EFB               	movlw	251
 18751  0076E0                     u9447:
 18752  0076E0  FFFF               	dw	65535	; errata NOP
 18753  0076E2  2EE8               	decfsz	wreg,f,c
 18754  0076E4  D7FD               	bra	u9447
 18755  0076E6  2F83               	decfsz	??_Lcd_Init& (0+255),f,b
 18756  0076E8  D7FB               	bra	u9447
 18757  0076EA  D000               	nop2	
 18758  0076EC  F000               	nop	
 18759                           
 18760                           ;lcd.h: 27: Lcd_Cmd(0x03);
 18761  0076EE  0E03               	movlw	3
 18762  0076F0  EC50  F036         	call	_Lcd_Cmd
 18763                           
 18764                           ;lcd.h: 29: Lcd_Cmd(0x02);
 18765  0076F4  0E02               	movlw	2
 18766  0076F6  EC50  F036         	call	_Lcd_Cmd
 18767                           
 18768                           ;lcd.h: 30: Lcd_Cmd(0x02);
 18769  0076FA  0E02               	movlw	2
 18770  0076FC  EC50  F036         	call	_Lcd_Cmd
 18771                           
 18772                           ;lcd.h: 31: Lcd_Cmd(0x08);
 18773  007700  0E08               	movlw	8
 18774  007702  EC50  F036         	call	_Lcd_Cmd
 18775                           
 18776                           ;lcd.h: 32: Lcd_Cmd(0x00);
 18777  007706  0E00               	movlw	0
 18778  007708  EC50  F036         	call	_Lcd_Cmd
 18779                           
 18780                           ;lcd.h: 33: Lcd_Cmd(0x0C);
 18781  00770C  0E0C               	movlw	12
 18782  00770E  EC50  F036         	call	_Lcd_Cmd
 18783                           
 18784                           ;lcd.h: 34: Lcd_Cmd(0x00);
 18785  007712  0E00               	movlw	0
 18786  007714  EC50  F036         	call	_Lcd_Cmd
 18787                           
 18788                           ;lcd.h: 35: Lcd_Cmd(0x06);
 18789  007718  0E06               	movlw	6
 18790  00771A  EC50  F036         	call	_Lcd_Cmd
 18791  00771E  0012               	return		;funcret
 18792  007720  FFFF               	dw	65535	; errata NOP
 18793  007722                     __end_of_Lcd_Init:
 18794                           	opt stack 0
 18795                           tosu	equ	0xFFF
 18796                           tosh	equ	0xFFE
 18797                           tosl	equ	0xFFD
 18798                           pclath	equ	0xFFA
 18799                           tblptru	equ	0xFF8
 18800                           tblptrh	equ	0xFF7
 18801                           tblptrl	equ	0xFF6
 18802                           tablat	equ	0xFF5
 18803                           prodh	equ	0xFF4
 18804                           prodl	equ	0xFF3
 18805                           intcon	equ	0xFF2
 18806                           indf0	equ	0xFEF
 18807                           postinc0	equ	0xFEE
 18808                           fsr0h	equ	0xFEA
 18809                           fsr0l	equ	0xFE9
 18810                           wreg	equ	0xFE8
 18811                           postdec1	equ	0xFE5
 18812                           fsr1l	equ	0xFE1
 18813                           indf2	equ	0xFDF
 18814                           postinc2	equ	0xFDE
 18815                           postdec2	equ	0xFDD
 18816                           fsr2h	equ	0xFDA
 18817                           fsr2l	equ	0xFD9
 18818                           status	equ	0xFD8
 18819                           
 18820 ;; *************** function _Lcd_Clear *****************
 18821 ;; Defined at:
 18822 ;;		line 68 in file "lcd.h"
 18823 ;; Parameters:    Size  Location     Type
 18824 ;;		None
 18825 ;; Auto vars:     Size  Location     Type
 18826 ;;		None
 18827 ;; Return value:  Size  Location     Type
 18828 ;;                  1    wreg      void 
 18829 ;; Registers used:
 18830 ;;		wreg, status,2, cstack
 18831 ;; Tracked objects:
 18832 ;;		On entry : 0/0
 18833 ;;		On exit  : 0/0
 18834 ;;		Unchanged: 0/0
 18835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18836 ;;      Params:         0       0       0       0       0       0       0
 18837 ;;      Locals:         0       0       0       0       0       0       0
 18838 ;;      Temps:          0       0       0       0       0       0       0
 18839 ;;      Totals:         0       0       0       0       0       0       0
 18840 ;;Total ram usage:        0 bytes
 18841 ;; Hardware stack levels used:    1
 18842 ;; Hardware stack levels required when called:    8
 18843 ;; This function calls:
 18844 ;;		_Lcd_Cmd
 18845 ;; This function is called by:
 18846 ;;		_main
 18847 ;; This function uses a non-reentrant model
 18848 ;;
 18849                           
 18850                           	psect	text68
 18851  006B7E                     __ptext68:
 18852                           	opt stack 0
 18853  006B7E                     _Lcd_Clear:
 18854                           	opt stack 0
 18855  006B7E  FFFF               	dw	65535	; assembler added errata NOP
 18856                           
 18857                           ;lcd.h: 69: Lcd_Cmd(0);
 18858                           
 18859                           ;incstack = 0
 18860  006B80  0E00               	movlw	0
 18861  006B82  EC50  F036         	call	_Lcd_Cmd
 18862                           
 18863                           ;lcd.h: 70: Lcd_Cmd(1);
 18864  006B86  0E01               	movlw	1
 18865  006B88  EC50  F036         	call	_Lcd_Cmd
 18866  006B8C  0012               	return		;funcret
 18867  006B8E  FFFF               	dw	65535	; errata NOP
 18868  006B90                     __end_of_Lcd_Clear:
 18869                           	opt stack 0
 18870                           tosu	equ	0xFFF
 18871                           tosh	equ	0xFFE
 18872                           tosl	equ	0xFFD
 18873                           pclath	equ	0xFFA
 18874                           tblptru	equ	0xFF8
 18875                           tblptrh	equ	0xFF7
 18876                           tblptrl	equ	0xFF6
 18877                           tablat	equ	0xFF5
 18878                           prodh	equ	0xFF4
 18879                           prodl	equ	0xFF3
 18880                           intcon	equ	0xFF2
 18881                           indf0	equ	0xFEF
 18882                           postinc0	equ	0xFEE
 18883                           fsr0h	equ	0xFEA
 18884                           fsr0l	equ	0xFE9
 18885                           wreg	equ	0xFE8
 18886                           postdec1	equ	0xFE5
 18887                           fsr1l	equ	0xFE1
 18888                           indf2	equ	0xFDF
 18889                           postinc2	equ	0xFDE
 18890                           postdec2	equ	0xFDD
 18891                           fsr2h	equ	0xFDA
 18892                           fsr2l	equ	0xFD9
 18893                           status	equ	0xFD8
 18894                           
 18895 ;; *************** function _Lcd_Cmd *****************
 18896 ;; Defined at:
 18897 ;;		line 60 in file "lcd.h"
 18898 ;; Parameters:    Size  Location     Type
 18899 ;;  a               1    wreg     unsigned char 
 18900 ;; Auto vars:     Size  Location     Type
 18901 ;;  a               1    2[BANK0 ] unsigned char 
 18902 ;; Return value:  Size  Location     Type
 18903 ;;                  1    wreg      void 
 18904 ;; Registers used:
 18905 ;;		wreg, status,2, cstack
 18906 ;; Tracked objects:
 18907 ;;		On entry : 0/0
 18908 ;;		On exit  : 0/0
 18909 ;;		Unchanged: 0/0
 18910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18911 ;;      Params:         0       0       0       0       0       0       0
 18912 ;;      Locals:         0       1       0       0       0       0       0
 18913 ;;      Temps:          0       1       0       0       0       0       0
 18914 ;;      Totals:         0       2       0       0       0       0       0
 18915 ;;Total ram usage:        2 bytes
 18916 ;; Hardware stack levels used:    1
 18917 ;; Hardware stack levels required when called:    7
 18918 ;; This function calls:
 18919 ;;		_Lcd_Port
 18920 ;; This function is called by:
 18921 ;;		_Lcd_Init
 18922 ;;		_Lcd_Clear
 18923 ;;		_Lcd_Set_Cursor
 18924 ;;		_criarCaracteresCGRAM
 18925 ;; This function uses a non-reentrant model
 18926 ;;
 18927                           
 18928                           	psect	text69
 18929  006CA0                     __ptext69:
 18930                           	opt stack 0
 18931  006CA0                     _Lcd_Cmd:
 18932                           	opt stack 0
 18933  006CA0  FFFF               	dw	65535	; assembler added errata NOP
 18934                           
 18935                           ;incstack = 0
 18936                           ;Lcd_Cmd@a stored from wreg
 18937  006CA2  0100               	movlb	0	; () banked
 18938  006CA4  6F82               	movwf	Lcd_Cmd@a& (0+255),b
 18939                           
 18940                           ;lcd.h: 61: PORTDbits.RD1 = 0;
 18941  006CA6  9283               	bcf	3971,1,c	;volatile
 18942                           
 18943                           ;lcd.h: 62: Lcd_Port(a);
 18944  006CA8  0100               	movlb	0	; () banked
 18945  006CAA  5182               	movf	Lcd_Cmd@a& (0+255),w,b
 18946  006CAC  ECD7  F038         	call	_Lcd_Port
 18947                           
 18948                           ;lcd.h: 63: PORTDbits.RD0 = 1;
 18949  006CB0  8083               	bsf	3971,0,c	;volatile
 18950                           
 18951                           ;lcd.h: 64: _delay((unsigned long)((15)*(8000000/4000.0)));
 18952  006CB2  0E1E               	movlw	30
 18953  006CB4  0100               	movlb	0	; () banked
 18954  006CB6  6F81               	movwf	??_Lcd_Cmd& (0+255),b
 18955  006CB8  0E3C               	movlw	60
 18956  006CBA                     u9457:
 18957  006CBA  FFFF               	dw	65535	; errata NOP
 18958  006CBC  2EE8               	decfsz	wreg,f,c
 18959  006CBE  D7FD               	bra	u9457
 18960  006CC0  2F81               	decfsz	??_Lcd_Cmd& (0+255),f,b
 18961  006CC2  D7FB               	bra	u9457
 18962  006CC4  F000               	nop	
 18963                           
 18964                           ;lcd.h: 65: PORTDbits.RD0 = 0;
 18965  006CC6  9083               	bcf	3971,0,c	;volatile
 18966  006CC8  0012               	return		;funcret
 18967  006CCA  FFFF               	dw	65535	; errata NOP
 18968  006CCC                     __end_of_Lcd_Cmd:
 18969                           	opt stack 0
 18970                           tosu	equ	0xFFF
 18971                           tosh	equ	0xFFE
 18972                           tosl	equ	0xFFD
 18973                           pclath	equ	0xFFA
 18974                           tblptru	equ	0xFF8
 18975                           tblptrh	equ	0xFF7
 18976                           tblptrl	equ	0xFF6
 18977                           tablat	equ	0xFF5
 18978                           prodh	equ	0xFF4
 18979                           prodl	equ	0xFF3
 18980                           intcon	equ	0xFF2
 18981                           indf0	equ	0xFEF
 18982                           postinc0	equ	0xFEE
 18983                           fsr0h	equ	0xFEA
 18984                           fsr0l	equ	0xFE9
 18985                           wreg	equ	0xFE8
 18986                           postdec1	equ	0xFE5
 18987                           fsr1l	equ	0xFE1
 18988                           indf2	equ	0xFDF
 18989                           postinc2	equ	0xFDE
 18990                           postdec2	equ	0xFDD
 18991                           fsr2h	equ	0xFDA
 18992                           fsr2l	equ	0xFD9
 18993                           status	equ	0xFD8
 18994                           
 18995 ;; *************** function _Lcd_Port *****************
 18996 ;; Defined at:
 18997 ;;		line 38 in file "lcd.h"
 18998 ;; Parameters:    Size  Location     Type
 18999 ;;  a               1    wreg     unsigned char 
 19000 ;; Auto vars:     Size  Location     Type
 19001 ;;  a               1    0[BANK0 ] unsigned char 
 19002 ;; Return value:  Size  Location     Type
 19003 ;;                  1    wreg      void 
 19004 ;; Registers used:
 19005 ;;		wreg
 19006 ;; Tracked objects:
 19007 ;;		On entry : 0/0
 19008 ;;		On exit  : 0/0
 19009 ;;		Unchanged: 0/0
 19010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19011 ;;      Params:         0       0       0       0       0       0       0
 19012 ;;      Locals:         0       1       0       0       0       0       0
 19013 ;;      Temps:          0       0       0       0       0       0       0
 19014 ;;      Totals:         0       1       0       0       0       0       0
 19015 ;;Total ram usage:        1 bytes
 19016 ;; Hardware stack levels used:    1
 19017 ;; Hardware stack levels required when called:    6
 19018 ;; This function calls:
 19019 ;;		Nothing
 19020 ;; This function is called by:
 19021 ;;		_Lcd_Init
 19022 ;;		_Lcd_Cmd
 19023 ;;		_Lcd_Write_Char
 19024 ;; This function uses a non-reentrant model
 19025 ;;
 19026                           
 19027                           	psect	text70
 19028  0071AE                     __ptext70:
 19029                           	opt stack 0
 19030  0071AE                     _Lcd_Port:
 19031                           	opt stack 0
 19032  0071AE  FFFF               	dw	65535	; assembler added errata NOP
 19033                           
 19034                           ;incstack = 0
 19035                           ;Lcd_Port@a stored from wreg
 19036  0071B0  0100               	movlb	0	; () banked
 19037  0071B2  6F80               	movwf	Lcd_Port@a& (0+255),b
 19038                           
 19039                           ;lcd.h: 39: if (a & 1)
 19040  0071B4  0100               	movlb	0	; () banked
 19041  0071B6  A180               	btfss	Lcd_Port@a& (0+255),0,b
 19042  0071B8  D002               	goto	l652
 19043                           
 19044                           ; BSR set to: 0
 19045                           ;lcd.h: 40: PORTDbits.RD2 = 1;
 19046  0071BA  8483               	bsf	3971,2,c	;volatile
 19047  0071BC  D002               	goto	l653
 19048  0071BE                     l652:
 19049  0071BE  FFFF               	dw	65535	; assembler added errata NOP
 19050                           
 19051                           ; BSR set to: 0
 19052                           ;lcd.h: 41: else
 19053                           ;lcd.h: 42: PORTDbits.RD2 = 0;
 19054  0071C0  9483               	bcf	3971,2,c	;volatile
 19055  0071C2                     l653:
 19056  0071C2  FFFF               	dw	65535	; assembler added errata NOP
 19057                           
 19058                           ; BSR set to: 0
 19059                           ;lcd.h: 44: if (a & 2)
 19060                           
 19061                           ; BSR set to: 0
 19062  0071C4  A380               	btfss	Lcd_Port@a& (0+255),1,b
 19063  0071C6  D002               	goto	l654
 19064                           
 19065                           ; BSR set to: 0
 19066                           ;lcd.h: 45: PORTDbits.RD3 = 1;
 19067  0071C8  8683               	bsf	3971,3,c	;volatile
 19068  0071CA  D002               	goto	l655
 19069  0071CC                     l654:
 19070  0071CC  FFFF               	dw	65535	; assembler added errata NOP
 19071                           
 19072                           ; BSR set to: 0
 19073                           ;lcd.h: 46: else
 19074                           ;lcd.h: 47: PORTDbits.RD3 = 0;
 19075  0071CE  9683               	bcf	3971,3,c	;volatile
 19076  0071D0                     l655:
 19077  0071D0  FFFF               	dw	65535	; assembler added errata NOP
 19078                           
 19079                           ; BSR set to: 0
 19080                           ;lcd.h: 49: if (a & 4)
 19081                           
 19082                           ; BSR set to: 0
 19083  0071D2  A580               	btfss	Lcd_Port@a& (0+255),2,b
 19084  0071D4  D002               	goto	l656
 19085                           
 19086                           ; BSR set to: 0
 19087                           ;lcd.h: 50: PORTDbits.RD4 = 1;
 19088  0071D6  8883               	bsf	3971,4,c	;volatile
 19089  0071D8  D002               	goto	l657
 19090  0071DA                     l656:
 19091  0071DA  FFFF               	dw	65535	; assembler added errata NOP
 19092                           
 19093                           ; BSR set to: 0
 19094                           ;lcd.h: 51: else
 19095                           ;lcd.h: 52: PORTDbits.RD4 = 0;
 19096  0071DC  9883               	bcf	3971,4,c	;volatile
 19097  0071DE                     l657:
 19098  0071DE  FFFF               	dw	65535	; assembler added errata NOP
 19099                           
 19100                           ; BSR set to: 0
 19101                           ;lcd.h: 54: if (a & 8)
 19102                           
 19103                           ; BSR set to: 0
 19104  0071E0  A780               	btfss	Lcd_Port@a& (0+255),3,b
 19105  0071E2  D002               	goto	l658
 19106                           
 19107                           ; BSR set to: 0
 19108                           ;lcd.h: 55: PORTDbits.RD5 = 1;
 19109  0071E4  8A83               	bsf	3971,5,c	;volatile
 19110  0071E6  D002               	goto	l659
 19111  0071E8                     l658:
 19112  0071E8  FFFF               	dw	65535	; assembler added errata NOP
 19113                           
 19114                           ; BSR set to: 0
 19115                           ;lcd.h: 56: else
 19116                           ;lcd.h: 57: PORTDbits.RD5 = 0;
 19117  0071EA  9A83               	bcf	3971,5,c	;volatile
 19118  0071EC                     l659:
 19119  0071EC  FFFF               	dw	65535	; assembler added errata NOP
 19120                           
 19121                           ; BSR set to: 0
 19122                           
 19123                           ; BSR set to: 0
 19124  0071EE  0012               	return		;funcret
 19125  0071F0  FFFF               	dw	65535	; errata NOP
 19126  0071F2                     __end_of_Lcd_Port:
 19127                           	opt stack 0
 19128                           tosu	equ	0xFFF
 19129                           tosh	equ	0xFFE
 19130                           tosl	equ	0xFFD
 19131                           pclath	equ	0xFFA
 19132                           tblptru	equ	0xFF8
 19133                           tblptrh	equ	0xFF7
 19134                           tblptrl	equ	0xFF6
 19135                           tablat	equ	0xFF5
 19136                           prodh	equ	0xFF4
 19137                           prodl	equ	0xFF3
 19138                           intcon	equ	0xFF2
 19139                           indf0	equ	0xFEF
 19140                           postinc0	equ	0xFEE
 19141                           fsr0h	equ	0xFEA
 19142                           fsr0l	equ	0xFE9
 19143                           wreg	equ	0xFE8
 19144                           postdec1	equ	0xFE5
 19145                           fsr1l	equ	0xFE1
 19146                           indf2	equ	0xFDF
 19147                           postinc2	equ	0xFDE
 19148                           postdec2	equ	0xFDD
 19149                           fsr2h	equ	0xFDA
 19150                           fsr2l	equ	0xFD9
 19151                           status	equ	0xFD8
 19152                           
 19153 ;; *************** function _I2C_Master_Init *****************
 19154 ;; Defined at:
 19155 ;;		line 13 in file "I2C.c"
 19156 ;; Parameters:    Size  Location     Type
 19157 ;;  c               4   13[BANK0 ] const unsigned long 
 19158 ;; Auto vars:     Size  Location     Type
 19159 ;;		None
 19160 ;; Return value:  Size  Location     Type
 19161 ;;                  1    wreg      void 
 19162 ;; Registers used:
 19163 ;;		wreg, status,2, status,0, cstack
 19164 ;; Tracked objects:
 19165 ;;		On entry : 0/0
 19166 ;;		On exit  : 0/0
 19167 ;;		Unchanged: 0/0
 19168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19169 ;;      Params:         0       4       0       0       0       0       0
 19170 ;;      Locals:         0       0       0       0       0       0       0
 19171 ;;      Temps:          0       4       0       0       0       0       0
 19172 ;;      Totals:         0       8       0       0       0       0       0
 19173 ;;Total ram usage:        8 bytes
 19174 ;; Hardware stack levels used:    1
 19175 ;; Hardware stack levels required when called:    7
 19176 ;; This function calls:
 19177 ;;		___lldiv
 19178 ;; This function is called by:
 19179 ;;		_main
 19180 ;; This function uses a non-reentrant model
 19181 ;;
 19182                           
 19183                           	psect	text71
 19184  007446                     __ptext71:
 19185                           	opt stack 0
 19186  007446                     _I2C_Master_Init:
 19187                           	opt stack 0
 19188  007446  FFFF               	dw	65535	; assembler added errata NOP
 19189                           
 19190                           ;I2C.c: 14: SSPCON1 = 0b00101000;
 19191                           
 19192                           ; BSR set to: 0
 19193                           ;incstack = 0
 19194  007448  0E28               	movlw	40
 19195  00744A  6EC6               	movwf	4038,c	;volatile
 19196                           
 19197                           ;I2C.c: 15: SSPCON2 = 0;
 19198  00744C  0E00               	movlw	0
 19199  00744E  6EC5               	movwf	4037,c	;volatile
 19200                           
 19201                           ;I2C.c: 16: SSPADD = (8000000 / (4 * c)) - 1;
 19202  007450  0E00               	movlw	0
 19203  007452  0100               	movlb	0	; () banked
 19204  007454  6F80               	movwf	___lldiv@dividend& (0+255),b
 19205  007456  0E12               	movlw	18
 19206  007458  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 19207  00745A  0E7A               	movlw	122
 19208  00745C  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 19209  00745E  0E00               	movlw	0
 19210  007460  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 19211  007462  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 19212  007466  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 19213  00746A  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 19214  00746E  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 19215  007472  0E02               	movlw	2
 19216  007474                     u9075:
 19217  007474  FFFF               	dw	65535	; assembler added errata NOP
 19218  007476  90D8               	bcf	status,0,c
 19219  007478  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 19220  00747A  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 19221  00747C  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 19222  00747E  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 19223  007480  2EE8               	decfsz	wreg,f,c
 19224  007482  D7F8               	goto	u9075
 19225  007484  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 19226  007488  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 19227  00748C  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 19228  007490  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 19229  007494  ECD6  F03B         	call	___lldiv	;wreg free
 19230  007498  0100               	movlb	0	; () banked
 19231  00749A  0580               	decf	?___lldiv& (0+255),w,b
 19232  00749C  6EC8               	movwf	4040,c	;volatile
 19233                           
 19234                           ; BSR set to: 0
 19235                           ;I2C.c: 17: SSPSTAT = 0;
 19236  00749E  0E00               	movlw	0
 19237  0074A0  6EC7               	movwf	4039,c	;volatile
 19238                           
 19239                           ; BSR set to: 0
 19240                           ;I2C.c: 18: TRISCbits.RC3 = 1;
 19241  0074A2  8694               	bsf	3988,3,c	;volatile
 19242                           
 19243                           ; BSR set to: 0
 19244                           ;I2C.c: 19: TRISCbits.RC4 = 1;
 19245  0074A4  8894               	bsf	3988,4,c	;volatile
 19246                           
 19247                           ; BSR set to: 0
 19248  0074A6  0012               	return		;funcret
 19249  0074A8  FFFF               	dw	65535	; errata NOP
 19250  0074AA                     __end_of_I2C_Master_Init:
 19251                           	opt stack 0
 19252                           tosu	equ	0xFFF
 19253                           tosh	equ	0xFFE
 19254                           tosl	equ	0xFFD
 19255                           pclath	equ	0xFFA
 19256                           tblptru	equ	0xFF8
 19257                           tblptrh	equ	0xFF7
 19258                           tblptrl	equ	0xFF6
 19259                           tablat	equ	0xFF5
 19260                           prodh	equ	0xFF4
 19261                           prodl	equ	0xFF3
 19262                           intcon	equ	0xFF2
 19263                           indf0	equ	0xFEF
 19264                           postinc0	equ	0xFEE
 19265                           fsr0h	equ	0xFEA
 19266                           fsr0l	equ	0xFE9
 19267                           wreg	equ	0xFE8
 19268                           postdec1	equ	0xFE5
 19269                           fsr1l	equ	0xFE1
 19270                           indf2	equ	0xFDF
 19271                           postinc2	equ	0xFDE
 19272                           postdec2	equ	0xFDD
 19273                           fsr2h	equ	0xFDA
 19274                           fsr2l	equ	0xFD9
 19275                           status	equ	0xFD8
 19276                           
 19277 ;; *************** function ___lldiv *****************
 19278 ;; Defined at:
 19279 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 19280 ;; Parameters:    Size  Location     Type
 19281 ;;  dividend        4    0[BANK0 ] unsigned long 
 19282 ;;  divisor         4    4[BANK0 ] unsigned long 
 19283 ;; Auto vars:     Size  Location     Type
 19284 ;;  quotient        4    8[BANK0 ] unsigned long 
 19285 ;;  counter         1   12[BANK0 ] unsigned char 
 19286 ;; Return value:  Size  Location     Type
 19287 ;;                  4    0[BANK0 ] unsigned long 
 19288 ;; Registers used:
 19289 ;;		wreg, status,2, status,0
 19290 ;; Tracked objects:
 19291 ;;		On entry : 0/0
 19292 ;;		On exit  : 0/0
 19293 ;;		Unchanged: 0/0
 19294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19295 ;;      Params:         0       8       0       0       0       0       0
 19296 ;;      Locals:         0       5       0       0       0       0       0
 19297 ;;      Temps:          0       0       0       0       0       0       0
 19298 ;;      Totals:         0      13       0       0       0       0       0
 19299 ;;Total ram usage:       13 bytes
 19300 ;; Hardware stack levels used:    1
 19301 ;; Hardware stack levels required when called:    6
 19302 ;; This function calls:
 19303 ;;		Nothing
 19304 ;; This function is called by:
 19305 ;;		_I2C_Master_Init
 19306 ;; This function uses a non-reentrant model
 19307 ;;
 19308                           
 19309                           	psect	text72
 19310  0077AC                     __ptext72:
 19311                           	opt stack 0
 19312  0077AC                     ___lldiv:
 19313                           	opt stack 0
 19314  0077AC  FFFF               	dw	65535	; assembler added errata NOP
 19315                           
 19316                           ; BSR set to: 0
 19317                           ;incstack = 0
 19318  0077AE  0E00               	movlw	0
 19319  0077B0  0100               	movlb	0	; () banked
 19320  0077B2  6F88               	movwf	___lldiv@quotient& (0+255),b
 19321  0077B4  0E00               	movlw	0
 19322  0077B6  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 19323  0077B8  0E00               	movlw	0
 19324  0077BA  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 19325  0077BC  0E00               	movlw	0
 19326  0077BE  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 19327                           
 19328                           ; BSR set to: 0
 19329  0077C0  5184               	movf	___lldiv@divisor& (0+255),w,b
 19330  0077C2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 19331  0077C4  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 19332  0077C6  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 19333  0077C8  B4D8               	btfsc	status,2,c
 19334  0077CA  D02E               	goto	l1521
 19335                           
 19336                           ; BSR set to: 0
 19337  0077CC  0E01               	movlw	1
 19338  0077CE  6F8C               	movwf	___lldiv@counter& (0+255),b
 19339  0077D0  D007               	goto	l1516
 19340  0077D2  FFFF               	dw	65535	; assembler added errata NOP
 19341                           
 19342                           ; BSR set to: 0
 19343                           
 19344                           ; BSR set to: 0
 19345  0077D4  90D8               	bcf	status,0,c
 19346  0077D6  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 19347  0077D8  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 19348  0077DA  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 19349  0077DC  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 19350  0077DE  2B8C               	incf	___lldiv@counter& (0+255),f,b
 19351  0077E0                     l1516:
 19352  0077E0  FFFF               	dw	65535	; assembler added errata NOP
 19353                           
 19354                           ; BSR set to: 0
 19355                           
 19356                           ; BSR set to: 0
 19357  0077E2  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 19358  0077E4  D7F6               	goto	l1517
 19359  0077E6                     u6930:
 19360  0077E6  FFFF               	dw	65535	; assembler added errata NOP
 19361                           
 19362                           ; BSR set to: 0
 19363                           
 19364                           ; BSR set to: 0
 19365                           
 19366                           ; BSR set to: 0
 19367  0077E8  90D8               	bcf	status,0,c
 19368  0077EA  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 19369  0077EC  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 19370  0077EE  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 19371  0077F0  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 19372                           
 19373                           ; BSR set to: 0
 19374  0077F2  5184               	movf	___lldiv@divisor& (0+255),w,b
 19375  0077F4  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 19376  0077F6  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19377  0077F8  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 19378  0077FA  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19379  0077FC  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 19380  0077FE  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19381  007800  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 19382  007802  A0D8               	btfss	status,0,c
 19383  007804  D009               	goto	l1520
 19384                           
 19385                           ; BSR set to: 0
 19386  007806  5184               	movf	___lldiv@divisor& (0+255),w,b
 19387  007808  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 19388  00780A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19389  00780C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 19390  00780E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19391  007810  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 19392  007812  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19393  007814  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 19394                           
 19395                           ; BSR set to: 0
 19396  007816  8188               	bsf	___lldiv@quotient& (0+255),0,b
 19397  007818                     l1520:
 19398  007818  FFFF               	dw	65535	; assembler added errata NOP
 19399                           
 19400                           ; BSR set to: 0
 19401                           
 19402                           ; BSR set to: 0
 19403  00781A  90D8               	bcf	status,0,c
 19404  00781C  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 19405  00781E  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 19406  007820  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 19407  007822  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 19408                           
 19409                           ; BSR set to: 0
 19410  007824  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 19411  007826  D7DF               	goto	u6930
 19412  007828                     l1521:
 19413  007828  FFFF               	dw	65535	; assembler added errata NOP
 19414                           
 19415                           ; BSR set to: 0
 19416                           
 19417                           ; BSR set to: 0
 19418  00782A  C088  F080         	movff	___lldiv@quotient,?___lldiv
 19419  00782E  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 19420  007832  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 19421  007836  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 19422                           
 19423                           ; BSR set to: 0
 19424  00783A  0012               	return		;funcret
 19425  00783C  FFFF               	dw	65535	; errata NOP
 19426  00783E                     __end_of___lldiv:
 19427                           	opt stack 0
 19428                           tosu	equ	0xFFF
 19429                           tosh	equ	0xFFE
 19430                           tosl	equ	0xFFD
 19431                           pclath	equ	0xFFA
 19432                           tblptru	equ	0xFF8
 19433                           tblptrh	equ	0xFF7
 19434                           tblptrl	equ	0xFF6
 19435                           tablat	equ	0xFF5
 19436                           prodh	equ	0xFF4
 19437                           prodl	equ	0xFF3
 19438                           intcon	equ	0xFF2
 19439                           indf0	equ	0xFEF
 19440                           postinc0	equ	0xFEE
 19441                           fsr0h	equ	0xFEA
 19442                           fsr0l	equ	0xFE9
 19443                           wreg	equ	0xFE8
 19444                           postdec1	equ	0xFE5
 19445                           fsr1l	equ	0xFE1
 19446                           indf2	equ	0xFDF
 19447                           postinc2	equ	0xFDE
 19448                           postdec2	equ	0xFDD
 19449                           fsr2h	equ	0xFDA
 19450                           fsr2l	equ	0xFD9
 19451                           status	equ	0xFD8
 19452                           
 19453 ;; *************** function _TIMER *****************
 19454 ;; Defined at:
 19455 ;;		line 30 in file "Main.c"
 19456 ;; Parameters:    Size  Location     Type
 19457 ;;		None
 19458 ;; Auto vars:     Size  Location     Type
 19459 ;;  c               1   66[COMRAM] unsigned char 
 19460 ;; Return value:  Size  Location     Type
 19461 ;;                  1    wreg      void 
 19462 ;; Registers used:
 19463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19464 ;; Tracked objects:
 19465 ;;		On entry : 0/0
 19466 ;;		On exit  : 0/0
 19467 ;;		Unchanged: 0/0
 19468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19469 ;;      Params:         0       0       0       0       0       0       0
 19470 ;;      Locals:         1       0       0       0       0       0       0
 19471 ;;      Temps:         18       0       0       0       0       0       0
 19472 ;;      Totals:        19       0       0       0       0       0       0
 19473 ;;Total ram usage:       19 bytes
 19474 ;; Hardware stack levels used:    1
 19475 ;; Hardware stack levels required when called:    5
 19476 ;; This function calls:
 19477 ;;		_lerTransdutor
 19478 ;;		_readButtons
 19479 ;;		_timer
 19480 ;; This function is called by:
 19481 ;;		Interrupt level 2
 19482 ;; This function uses a non-reentrant model
 19483 ;;
 19484                           
 19485                           	psect	intcode
 19486  000008                     __pintcode:
 19487                           	opt stack 0
 19488  000008                     _TIMER:
 19489                           	opt stack 0
 19490  000008  FFFF               	dw	65535	; assembler added errata NOP
 19491                           
 19492                           ; BSR set to: 0
 19493                           ;incstack = 0
 19494  00000A  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19495  00000C  CFFA F031          	movff	pclath,??_TIMER
 19496  000010  CFFB F032          	movff	pclatu,??_TIMER+1
 19497  000014  CFE9 F033          	movff	fsr0l,??_TIMER+2
 19498  000018  CFEA F034          	movff	fsr0h,??_TIMER+3
 19499  00001C  CFE1 F035          	movff	fsr1l,??_TIMER+4
 19500  000020  CFE2 F036          	movff	fsr1h,??_TIMER+5
 19501  000024  CFD9 F037          	movff	fsr2l,??_TIMER+6
 19502  000028  CFDA F038          	movff	fsr2h,??_TIMER+7
 19503  00002C  CFF3 F039          	movff	prodl,??_TIMER+8
 19504  000030  CFF4 F03A          	movff	prodh,??_TIMER+9
 19505  000034  CFF6 F03B          	movff	tblptrl,??_TIMER+10
 19506  000038  CFF7 F03C          	movff	tblptrh,??_TIMER+11
 19507  00003C  CFF8 F03D          	movff	tblptru,??_TIMER+12
 19508  000040  CFF5 F03E          	movff	tablat,??_TIMER+13
 19509  000044  C07E  F03F         	movff	btemp,??_TIMER+14
 19510  000048  C07F  F040         	movff	btemp+1,??_TIMER+15
 19511  00004C  C080  F041         	movff	btemp+2,??_TIMER+16
 19512  000050  C081  F042         	movff	btemp+3,??_TIMER+17
 19513                           
 19514                           ;Main.c: 31: if (TMR0IF) {
 19515  000054  A4F2               	btfss	intcon,2,c	;volatile
 19516  000056  D01A               	goto	i2l928
 19517                           
 19518                           ;Main.c: 32: TMR0IF = 0x00;
 19519  000058  94F2               	bcf	intcon,2,c	;volatile
 19520                           
 19521                           ;Main.c: 33: TMR0H = 0x3C;
 19522  00005A  0E3C               	movlw	60
 19523  00005C  6ED7               	movwf	4055,c	;volatile
 19524                           
 19525                           ;Main.c: 34: TMR0L = 0xB0;
 19526  00005E  0EB0               	movlw	176
 19527  000060  6ED6               	movwf	4054,c	;volatile
 19528                           
 19529                           ;Main.c: 36: base_sec++;
 19530  000062  2A6D               	incf	_base_sec,f,c
 19531                           
 19532                           ;Main.c: 38: if (base_sec == 5) {
 19533  000064  0E05               	movlw	5
 19534  000066  186D               	xorwf	_base_sec,w,c
 19535  000068  B4D8               	btfsc	status,2,c
 19536                           
 19537                           ;Main.c: 39: blinkk = ~blinkk;
 19538  00006A  1E63               	comf	_blinkk,f,c
 19539                           
 19540                           ;Main.c: 40: }
 19541                           ;Main.c: 42: lerTransdutor();
 19542  00006C  ECE8  F00D         	call	_lerTransdutor	;wreg free
 19543                           
 19544                           ;Main.c: 43: readButtons();
 19545  000070  ECC7  F03A         	call	_readButtons	;wreg free
 19546                           
 19547                           ;Main.c: 45: if (base_sec > 9) {
 19548  000074  0E09               	movlw	9
 19549  000076  646D               	cpfsgt	_base_sec,c
 19550  000078  D009               	goto	i2l928
 19551                           
 19552                           ;Main.c: 46: base_sec = 0;
 19553  00007A  0E00               	movlw	0
 19554  00007C  6E6D               	movwf	_base_sec,c
 19555                           
 19556                           ;Main.c: 47: blinkk = ~blinkk;
 19557  00007E  1E63               	comf	_blinkk,f,c
 19558                           
 19559                           ;Main.c: 48: timer();
 19560  000080  ECFF  F015         	call	_timer	;wreg free
 19561                           
 19562                           ;Main.c: 49: if (RCSTAbits.OERR) {
 19563  000084  A2AB               	btfss	4011,1,c	;volatile
 19564  000086  D002               	goto	i2l928
 19565                           
 19566                           ;Main.c: 50: RCSTAbits.CREN = 0;
 19567  000088  98AB               	bcf	4011,4,c	;volatile
 19568                           
 19569                           ;Main.c: 51: RCSTAbits.CREN = 1;
 19570  00008A  88AB               	bsf	4011,4,c	;volatile
 19571  00008C                     i2l928:
 19572  00008C  FFFF               	dw	65535	; assembler added errata NOP
 19573                           
 19574                           ;Main.c: 52: }
 19575                           ;Main.c: 53: }
 19576                           ;Main.c: 54: }
 19577                           ;Main.c: 55: if (RCIF) {
 19578  00008E  AA9E               	btfss	3998,5,c	;volatile
 19579  000090  D01B               	goto	i2l931
 19580                           
 19581                           ;Main.c: 56: char c = RCREG;
 19582  000092  CFAE F043          	movff	4014,TIMER@c	;volatile
 19583                           
 19584                           ;Main.c: 57: if (c != '\n' && c != '\r') {
 19585  000096  0E0A               	movlw	10
 19586  000098  1843               	xorwf	TIMER@c,w,c
 19587  00009A  B4D8               	btfsc	status,2,c
 19588  00009C  D00F               	goto	i2l930
 19589  00009E  0E0D               	movlw	13
 19590  0000A0  1843               	xorwf	TIMER@c,w,c
 19591  0000A2  B4D8               	btfsc	status,2,c
 19592  0000A4  D00B               	goto	i2l930
 19593                           
 19594                           ;Main.c: 58: bufferSerial[cbf++] = c;
 19595  0000A6  5062               	movf	_cbf,w,c
 19596  0000A8  0D01               	mullw	1
 19597  0000AA  0E05               	movlw	low _bufferSerial
 19598  0000AC  24F3               	addwf	prodl,w,c
 19599  0000AE  6ED9               	movwf	fsr2l,c
 19600  0000B0  0E01               	movlw	high _bufferSerial
 19601  0000B2  20F4               	addwfc	prodh,w,c
 19602  0000B4  6EDA               	movwf	fsr2h,c
 19603  0000B6  C043  FFDF         	movff	TIMER@c,indf2
 19604  0000BA  2A62               	incf	_cbf,f,c
 19605  0000BC                     i2l930:
 19606  0000BC  FFFF               	dw	65535	; assembler added errata NOP
 19607                           
 19608                           ;Main.c: 59: }
 19609                           ;Main.c: 60: if (cbf >= 60) cbf = 0;
 19610  0000BE  0E3B               	movlw	59
 19611  0000C0  6462               	cpfsgt	_cbf,c
 19612  0000C2  D002               	goto	i2l931
 19613  0000C4  0E00               	movlw	0
 19614  0000C6  6E62               	movwf	_cbf,c
 19615  0000C8                     i2l931:
 19616  0000C8  FFFF               	dw	65535	; assembler added errata NOP
 19617  0000CA  C042  F081         	movff	??_TIMER+17,btemp+3
 19618  0000CE  C041  F080         	movff	??_TIMER+16,btemp+2
 19619  0000D2  C040  F07F         	movff	??_TIMER+15,btemp+1
 19620  0000D6  C03F  F07E         	movff	??_TIMER+14,btemp
 19621  0000DA  C03E  FFF5         	movff	??_TIMER+13,tablat
 19622  0000DE  C03D  FFF8         	movff	??_TIMER+12,tblptru
 19623  0000E2  C03C  FFF7         	movff	??_TIMER+11,tblptrh
 19624  0000E6  C03B  FFF6         	movff	??_TIMER+10,tblptrl
 19625  0000EA  C03A  FFF4         	movff	??_TIMER+9,prodh
 19626  0000EE  C039  FFF3         	movff	??_TIMER+8,prodl
 19627  0000F2  C038  FFDA         	movff	??_TIMER+7,fsr2h
 19628  0000F6  C037  FFD9         	movff	??_TIMER+6,fsr2l
 19629  0000FA  C036  FFE2         	movff	??_TIMER+5,fsr1h
 19630  0000FE  C035  FFE1         	movff	??_TIMER+4,fsr1l
 19631  000102  C034  FFEA         	movff	??_TIMER+3,fsr0h
 19632  000106  C033  FFE9         	movff	??_TIMER+2,fsr0l
 19633  00010A  C032  FFFB         	movff	??_TIMER+1,pclatu
 19634  00010E  C031  FFFA         	movff	??_TIMER,pclath
 19635  000112  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19636  000114  0011               	retfie		f
 19637  000116  FFFF               	dw	65535	; errata NOP
 19638  000118                     __end_of_TIMER:
 19639                           	opt stack 0
 19640                           tosu	equ	0xFFF
 19641                           tosh	equ	0xFFE
 19642                           tosl	equ	0xFFD
 19643                           pclatu	equ	0xFFB
 19644                           pclath	equ	0xFFA
 19645                           tblptru	equ	0xFF8
 19646                           tblptrh	equ	0xFF7
 19647                           tblptrl	equ	0xFF6
 19648                           tablat	equ	0xFF5
 19649                           prodh	equ	0xFF4
 19650                           prodl	equ	0xFF3
 19651                           intcon	equ	0xFF2
 19652                           indf0	equ	0xFEF
 19653                           postinc0	equ	0xFEE
 19654                           fsr0h	equ	0xFEA
 19655                           fsr0l	equ	0xFE9
 19656                           wreg	equ	0xFE8
 19657                           postdec1	equ	0xFE5
 19658                           fsr1h	equ	0xFE2
 19659                           fsr1l	equ	0xFE1
 19660                           indf2	equ	0xFDF
 19661                           postinc2	equ	0xFDE
 19662                           postdec2	equ	0xFDD
 19663                           fsr2h	equ	0xFDA
 19664                           fsr2l	equ	0xFD9
 19665                           status	equ	0xFD8
 19666                           
 19667 ;; *************** function _timer *****************
 19668 ;; Defined at:
 19669 ;;		line 9 in file "temporizador.h"
 19670 ;; Parameters:    Size  Location     Type
 19671 ;;		None
 19672 ;; Auto vars:     Size  Location     Type
 19673 ;;		None
 19674 ;; Return value:  Size  Location     Type
 19675 ;;                  1    wreg      void 
 19676 ;; Registers used:
 19677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19678 ;; Tracked objects:
 19679 ;;		On entry : 0/0
 19680 ;;		On exit  : 0/0
 19681 ;;		Unchanged: 0/0
 19682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19683 ;;      Params:         0       0       0       0       0       0       0
 19684 ;;      Locals:        12       0       0       0       0       0       0
 19685 ;;      Temps:          0       0       0       0       0       0       0
 19686 ;;      Totals:        12       0       0       0       0       0       0
 19687 ;;Total ram usage:       12 bytes
 19688 ;; Hardware stack levels used:    1
 19689 ;; Hardware stack levels required when called:    4
 19690 ;; This function calls:
 19691 ;;		_writeEEPROM16_ext
 19692 ;;		i2_RTC_Init
 19693 ;;		i2_getDS1307TimeDate
 19694 ;;		i2_writeEEPROM_ext
 19695 ;; This function is called by:
 19696 ;;		_TIMER
 19697 ;; This function uses a non-reentrant model
 19698 ;;
 19699                           
 19700                           	psect	text74
 19701  002BFE                     __ptext74:
 19702                           	opt stack 0
 19703  002BFE                     _timer:
 19704                           	opt stack 0
 19705  002BFE  FFFF               	dw	65535	; assembler added errata NOP
 19706                           
 19707                           ;temporizador.h: 11: timerVerificarSinal = (timerVerificarSinal <= 0 ? 0 : --timerVerifi
      +                          carSinal);
 19708                           
 19709                           ;incstack = 0
 19710  002C00  0100               	movlb	0	; () banked
 19711  002C02  51FF               	movf	_timerVerificarSinal& (0+255),w,b
 19712  002C04  B4D8               	btfsc	status,2,c
 19713  002C06  D005               	goto	i2l601
 19714                           
 19715                           ; BSR set to: 0
 19716  002C08  07FF               	decf	_timerVerificarSinal& (0+255),f,b
 19717  002C0A  C0FF  F009         	movff	_timerVerificarSinal,_timer$1331
 19718  002C0E  6A0A               	clrf	_timer$1331+1,c
 19719  002C10  D005               	goto	i2l603
 19720  002C12                     i2l601:
 19721  002C12  FFFF               	dw	65535	; assembler added errata NOP
 19722                           
 19723                           ; BSR set to: 0
 19724                           
 19725                           ; BSR set to: 0
 19726  002C14  0E00               	movlw	0
 19727  002C16  6E0A               	movwf	_timer$1331+1,c
 19728  002C18  0E00               	movlw	0
 19729  002C1A  6E09               	movwf	_timer$1331,c
 19730  002C1C                     i2l603:
 19731  002C1C  FFFF               	dw	65535	; assembler added errata NOP
 19732                           
 19733                           ; BSR set to: 0
 19734                           
 19735                           ; BSR set to: 0
 19736  002C1E  C009  F0FF         	movff	_timer$1331,_timerVerificarSinal
 19737                           
 19738                           ;temporizador.h: 12: timerEtapaComunicacao = (timerEtapaComunicacao <= 0 ? 0 : --timerEt
      +                          apaComunicacao);
 19739  002C22  51F6               	movf	_timerEtapaComunicacao& (0+255),w,b
 19740  002C24  B4D8               	btfsc	status,2,c
 19741  002C26  D005               	goto	i2l605
 19742                           
 19743                           ; BSR set to: 0
 19744  002C28  07F6               	decf	_timerEtapaComunicacao& (0+255),f,b
 19745  002C2A  C0F6  F00B         	movff	_timerEtapaComunicacao,_timer$1332
 19746  002C2E  6A0C               	clrf	_timer$1332+1,c
 19747  002C30  D005               	goto	i2l607
 19748  002C32                     i2l605:
 19749  002C32  FFFF               	dw	65535	; assembler added errata NOP
 19750                           
 19751                           ; BSR set to: 0
 19752                           
 19753                           ; BSR set to: 0
 19754  002C34  0E00               	movlw	0
 19755  002C36  6E0C               	movwf	_timer$1332+1,c
 19756  002C38  0E00               	movlw	0
 19757  002C3A  6E0B               	movwf	_timer$1332,c
 19758  002C3C                     i2l607:
 19759  002C3C  FFFF               	dw	65535	; assembler added errata NOP
 19760                           
 19761                           ; BSR set to: 0
 19762                           
 19763                           ; BSR set to: 0
 19764  002C3E  C00B  F0F6         	movff	_timer$1332,_timerEtapaComunicacao
 19765                           
 19766                           ; BSR set to: 0
 19767                           ;temporizador.h: 13: timerTesteBombas = (timerTesteBombas <= 0 ? 0 : --timerTesteBombas)
      +                          ;
 19768  002C42  51DB               	movf	_timerTesteBombas& (0+255),w,b
 19769  002C44  11DC               	iorwf	(_timerTesteBombas+1)& (0+255),w,b
 19770  002C46  B4D8               	btfsc	status,2,c
 19771  002C48  D008               	goto	i2l609
 19772                           
 19773                           ; BSR set to: 0
 19774  002C4A  07DB               	decf	_timerTesteBombas& (0+255),f,b
 19775  002C4C  A0D8               	btfss	status,0,c
 19776  002C4E  07DC               	decf	(_timerTesteBombas+1)& (0+255),f,b
 19777  002C50  C0DB  F0DB         	movff	_timerTesteBombas,_timerTesteBombas
 19778  002C54  C0DC  F0DC         	movff	_timerTesteBombas+1,_timerTesteBombas+1
 19779  002C58  D005               	goto	i2l611
 19780  002C5A                     i2l609:
 19781  002C5A  FFFF               	dw	65535	; assembler added errata NOP
 19782                           
 19783                           ; BSR set to: 0
 19784                           
 19785                           ; BSR set to: 0
 19786  002C5C  0E00               	movlw	0
 19787  002C5E  6FDC               	movwf	(_timerTesteBombas+1)& (0+255),b
 19788  002C60  0E00               	movlw	0
 19789  002C62  6FDB               	movwf	_timerTesteBombas& (0+255),b
 19790  002C64                     i2l611:
 19791  002C64  FFFF               	dw	65535	; assembler added errata NOP
 19792                           
 19793                           ; BSR set to: 0
 19794                           ;temporizador.h: 14: timerReenvioSMS = (timerReenvioSMS <= 0 ? 0 : --timerReenvioSMS);
 19795  002C66  51F7               	movf	_timerReenvioSMS& (0+255),w,b
 19796  002C68  B4D8               	btfsc	status,2,c
 19797  002C6A  D005               	goto	i2l613
 19798                           
 19799                           ; BSR set to: 0
 19800  002C6C  07F7               	decf	_timerReenvioSMS& (0+255),f,b
 19801  002C6E  C0F7  F00D         	movff	_timerReenvioSMS,_timer$1333
 19802  002C72  6A0E               	clrf	_timer$1333+1,c
 19803  002C74  D005               	goto	i2l615
 19804  002C76                     i2l613:
 19805  002C76  FFFF               	dw	65535	; assembler added errata NOP
 19806                           
 19807                           ; BSR set to: 0
 19808                           
 19809                           ; BSR set to: 0
 19810  002C78  0E00               	movlw	0
 19811  002C7A  6E0E               	movwf	_timer$1333+1,c
 19812  002C7C  0E00               	movlw	0
 19813  002C7E  6E0D               	movwf	_timer$1333,c
 19814  002C80                     i2l615:
 19815  002C80  FFFF               	dw	65535	; assembler added errata NOP
 19816                           
 19817                           ; BSR set to: 0
 19818                           
 19819                           ; BSR set to: 0
 19820  002C82  C00D  F0F7         	movff	_timer$1333,_timerReenvioSMS
 19821                           
 19822                           ;temporizador.h: 15: timerTrocarTextoLcd = (timerTrocarTextoLcd <= 0 ? 0 : --timerTrocar
      +                          TextoLcd);
 19823  002C86  5073               	movf	_timerTrocarTextoLcd,w,c
 19824  002C88  B4D8               	btfsc	status,2,c
 19825  002C8A  D005               	goto	i2l617
 19826                           
 19827                           ; BSR set to: 0
 19828  002C8C  0673               	decf	_timerTrocarTextoLcd,f,c
 19829  002C8E  C073  F00F         	movff	_timerTrocarTextoLcd,_timer$1334
 19830  002C92  6A10               	clrf	_timer$1334+1,c
 19831  002C94  D005               	goto	i2l619
 19832  002C96                     i2l617:
 19833  002C96  FFFF               	dw	65535	; assembler added errata NOP
 19834                           
 19835                           ; BSR set to: 0
 19836                           
 19837                           ; BSR set to: 0
 19838  002C98  0E00               	movlw	0
 19839  002C9A  6E10               	movwf	_timer$1334+1,c
 19840  002C9C  0E00               	movlw	0
 19841  002C9E  6E0F               	movwf	_timer$1334,c
 19842  002CA0                     i2l619:
 19843  002CA0  FFFF               	dw	65535	; assembler added errata NOP
 19844                           
 19845                           ; BSR set to: 0
 19846                           
 19847                           ; BSR set to: 0
 19848  002CA2  C00F  F073         	movff	_timer$1334,_timerTrocarTextoLcd
 19849                           
 19850                           ;temporizador.h: 16: timerIntervaloLigarBomba = (timerIntervaloLigarBomba <= 0 ? 0 : --t
      +                          imerIntervaloLigarBomba);
 19851  002CA6  51F5               	movf	_timerIntervaloLigarBomba& (0+255),w,b
 19852  002CA8  B4D8               	btfsc	status,2,c
 19853  002CAA  D005               	goto	i2l621
 19854                           
 19855                           ; BSR set to: 0
 19856  002CAC  07F5               	decf	_timerIntervaloLigarBomba& (0+255),f,b
 19857  002CAE  C0F5  F011         	movff	_timerIntervaloLigarBomba,_timer$1335
 19858  002CB2  6A12               	clrf	_timer$1335+1,c
 19859  002CB4  D005               	goto	i2l623
 19860  002CB6                     i2l621:
 19861  002CB6  FFFF               	dw	65535	; assembler added errata NOP
 19862                           
 19863                           ; BSR set to: 0
 19864                           
 19865                           ; BSR set to: 0
 19866  002CB8  0E00               	movlw	0
 19867  002CBA  6E12               	movwf	_timer$1335+1,c
 19868  002CBC  0E00               	movlw	0
 19869  002CBE  6E11               	movwf	_timer$1335,c
 19870  002CC0                     i2l623:
 19871  002CC0  FFFF               	dw	65535	; assembler added errata NOP
 19872                           
 19873                           ; BSR set to: 0
 19874                           
 19875                           ; BSR set to: 0
 19876  002CC2  C011  F0F5         	movff	_timer$1335,_timerIntervaloLigarBomba
 19877                           
 19878                           ;temporizador.h: 17: timerAtualizacaoLCD = (timerAtualizacaoLCD <= 0 ? 0 : --timerAtuali
      +                          zacaoLCD);
 19879  002CC6  507C               	movf	_timerAtualizacaoLCD,w,c
 19880  002CC8  B4D8               	btfsc	status,2,c
 19881  002CCA  D005               	goto	i2l625
 19882                           
 19883                           ; BSR set to: 0
 19884  002CCC  067C               	decf	_timerAtualizacaoLCD,f,c
 19885  002CCE  C07C  F013         	movff	_timerAtualizacaoLCD,_timer$1336
 19886  002CD2  6A14               	clrf	_timer$1336+1,c
 19887  002CD4  D005               	goto	i2l627
 19888  002CD6                     i2l625:
 19889  002CD6  FFFF               	dw	65535	; assembler added errata NOP
 19890                           
 19891                           ; BSR set to: 0
 19892                           
 19893                           ; BSR set to: 0
 19894  002CD8  0E00               	movlw	0
 19895  002CDA  6E14               	movwf	_timer$1336+1,c
 19896  002CDC  0E00               	movlw	0
 19897  002CDE  6E13               	movwf	_timer$1336,c
 19898  002CE0                     i2l627:
 19899  002CE0  FFFF               	dw	65535	; assembler added errata NOP
 19900                           
 19901                           ; BSR set to: 0
 19902                           
 19903                           ; BSR set to: 0
 19904  002CE2  C013  F07C         	movff	_timer$1336,_timerAtualizacaoLCD
 19905                           
 19906                           ;temporizador.h: 19: if(!timerTrocarTextoLcd){
 19907  002CE6  5073               	movf	_timerTrocarTextoLcd,w,c
 19908  002CE8  A4D8               	btfss	status,2,c
 19909  002CEA  D00B               	goto	i2l628
 19910                           
 19911                           ; BSR set to: 0
 19912                           ;temporizador.h: 20: timerTrocarTextoLcd = 2;
 19913  002CEC  0E02               	movlw	2
 19914  002CEE  6E73               	movwf	_timerTrocarTextoLcd,c
 19915                           
 19916                           ;temporizador.h: 21: flagTexto = !flagTexto;
 19917  002CF0  5072               	movf	_flagTexto,w,c
 19918  002CF2  A4D8               	btfss	status,2,c
 19919  002CF4  D002               	goto	i2u786_40
 19920  002CF6  0E01               	movlw	1
 19921  002CF8  D002               	goto	i2u787_40
 19922  002CFA                     i2u786_40:
 19923  002CFA  FFFF               	dw	65535	; assembler added errata NOP
 19924  002CFC  0E00               	movlw	0
 19925  002CFE                     i2u787_40:
 19926  002CFE  FFFF               	dw	65535	; assembler added errata NOP
 19927  002D00  6E72               	movwf	_flagTexto,c
 19928  002D02                     i2l628:
 19929  002D02  FFFF               	dw	65535	; assembler added errata NOP
 19930                           
 19931                           ; BSR set to: 0
 19932                           ;temporizador.h: 22: }
 19933                           ;temporizador.h: 24: if (ajst_rtc) {
 19934  002D04  5064               	movf	_ajst_rtc,w,c
 19935  002D06  A4D8               	btfss	status,2,c
 19936  002D08  D057               	goto	i2l634
 19937                           
 19938                           ; BSR set to: 0
 19939                           ;temporizador.h: 26: }
 19940                           ;temporizador.h: 27: _sec++;
 19941                           
 19942                           ; BSR set to: 0
 19943                           
 19944                           ; BSR set to: 0
 19945                           ;temporizador.h: 25: return;
 19946  002D0A  2BEF               	incf	__sec& (0+255),f,b
 19947                           
 19948                           ; BSR set to: 0
 19949                           ;temporizador.h: 28: if (_sec > 59) {
 19950  002D0C  0E3B               	movlw	59
 19951  002D0E  65EF               	cpfsgt	__sec& (0+255),b
 19952  002D10  D014               	goto	i2l633
 19953                           
 19954                           ; BSR set to: 0
 19955                           ;temporizador.h: 29: _sec = 0;
 19956  002D12  0E00               	movlw	0
 19957  002D14  6FEF               	movwf	__sec& (0+255),b
 19958                           
 19959                           ; BSR set to: 0
 19960                           ;temporizador.h: 30: _min++;
 19961  002D16  2BEE               	incf	__min& (0+255),f,b
 19962                           
 19963                           ; BSR set to: 0
 19964                           ;temporizador.h: 31: if (_min > 59) {
 19965  002D18  0E3B               	movlw	59
 19966  002D1A  65EE               	cpfsgt	__min& (0+255),b
 19967  002D1C  D00E               	goto	i2l633
 19968                           
 19969                           ; BSR set to: 0
 19970                           ;temporizador.h: 32: _min = 0;
 19971  002D1E  0E00               	movlw	0
 19972  002D20  6FEE               	movwf	__min& (0+255),b
 19973                           
 19974                           ; BSR set to: 0
 19975                           ;temporizador.h: 33: _hor++;
 19976  002D22  2BED               	incf	__hor& (0+255),f,b
 19977                           
 19978                           ; BSR set to: 0
 19979                           ;temporizador.h: 34: if (_hor > 23) {
 19980  002D24  0E17               	movlw	23
 19981  002D26  65ED               	cpfsgt	__hor& (0+255),b
 19982  002D28  D008               	goto	i2l633
 19983                           
 19984                           ; BSR set to: 0
 19985                           ;temporizador.h: 35: _hor = 0;
 19986  002D2A  0E00               	movlw	0
 19987  002D2C  6FED               	movwf	__hor& (0+255),b
 19988                           
 19989                           ; BSR set to: 0
 19990                           ;temporizador.h: 36: dias_restante_teste++;
 19991  002D2E  2BE8               	incf	_dias_restante_teste& (0+255),f,b
 19992                           
 19993                           ; BSR set to: 0
 19994                           ;temporizador.h: 37: writeEEPROM_ext(10, dias_restante_teste);
 19995  002D30  C0E8  F004         	movff	_dias_restante_teste,i2writeEEPROM_ext@data
 19996  002D34  0E0A               	movlw	10
 19997  002D36  ECDB  F037         	call	i2_writeEEPROM_ext
 19998  002D3A                     i2l633:
 19999  002D3A  FFFF               	dw	65535	; assembler added errata NOP
 20000                           
 20001                           ;temporizador.h: 38: }
 20002                           ;temporizador.h: 39: }
 20003                           ;temporizador.h: 40: }
 20004                           ;temporizador.h: 42: if (rtc.min != _min) {
 20005  002D3C  0100               	movlb	0	; () banked
 20006  002D3E  51EE               	movf	__min& (0+255),w,b
 20007  002D40  1877               	xorwf	_rtc+2,w,c
 20008  002D42  B4D8               	btfsc	status,2,c
 20009  002D44  D039               	goto	i2l634
 20010                           
 20011                           ; BSR set to: 0
 20012                           ;temporizador.h: 44: if (flagEstacionariaLigada) {
 20013  002D46  51F0               	movf	_flagEstacionariaLigada& (0+255),w,b
 20014  002D48  B4D8               	btfsc	status,2,c
 20015  002D4A  D00A               	goto	i2l635
 20016                           
 20017                           ; BSR set to: 0
 20018                           ;temporizador.h: 45: horimetro++;
 20019  002D4C  0101               	movlb	1	; () banked
 20020  002D4E  4B03               	infsnz	_horimetro& (0+255),f,b
 20021  002D50  2B04               	incf	(_horimetro+1)& (0+255),f,b
 20022                           
 20023                           ; BSR set to: 1
 20024                           ;temporizador.h: 46: writeEEPROM16_ext(8, horimetro);
 20025  002D52  C103  F006         	movff	_horimetro,writeEEPROM16_ext@data
 20026  002D56  C104  F007         	movff	_horimetro+1,writeEEPROM16_ext@data+1
 20027  002D5A  0E08               	movlw	8
 20028  002D5C  EC03  F036         	call	_writeEEPROM16_ext
 20029  002D60                     i2l635:
 20030  002D60  FFFF               	dw	65535	; assembler added errata NOP
 20031                           
 20032                           ;temporizador.h: 47: }
 20033                           ;temporizador.h: 48: getDS1307TimeDate(&rtc);
 20034  002D62  0E75               	movlw	low _rtc
 20035  002D64  6E06               	movwf	i2getDS1307TimeDate@ptrToUserVal,c
 20036  002D66  0E00               	movlw	high _rtc
 20037  002D68  6E07               	movwf	i2getDS1307TimeDate@ptrToUserVal+1,c
 20038  002D6A  EC7B  F01A         	call	i2_getDS1307TimeDate	;wreg free
 20039                           
 20040                           ;temporizador.h: 49: if ((rtc.sec > 60) && (rtc.min > 60) && (rtc.hour > 24)) {
 20041  002D6E  0E3C               	movlw	60
 20042  002D70  6476               	cpfsgt	_rtc+1,c
 20043  002D72  D015               	goto	i2l636
 20044  002D74  0E3C               	movlw	60
 20045  002D76  6477               	cpfsgt	_rtc+2,c
 20046  002D78  D012               	goto	i2l636
 20047  002D7A  0E18               	movlw	24
 20048  002D7C  6478               	cpfsgt	_rtc+3,c
 20049  002D7E  D00F               	goto	i2l636
 20050                           
 20051                           ;temporizador.h: 51: RTC_Init();
 20052  002D80  ECAD  F036         	call	i2_RTC_Init	;wreg free
 20053                           
 20054                           ;temporizador.h: 52: rtc.sec = _sec;
 20055  002D84  C0EF  F076         	movff	__sec,_rtc+1
 20056                           
 20057                           ;temporizador.h: 53: rtc.min = _min;
 20058  002D88  C0EE  F077         	movff	__min,_rtc+2
 20059                           
 20060                           ;temporizador.h: 54: rtc.hour = _hor;
 20061  002D8C  C0ED  F078         	movff	__hor,_rtc+3
 20062                           
 20063                           ;temporizador.h: 55: rtc.date = _dia;
 20064  002D90  C0EC  F079         	movff	__dia,_rtc+4
 20065                           
 20066                           ;temporizador.h: 56: rtc.month = _mes;
 20067  002D94  C0EB  F07A         	movff	__mes,_rtc+5
 20068                           
 20069                           ;temporizador.h: 57: rtc.year = _ano;
 20070  002D98  C0EA  F07B         	movff	__ano,_rtc+6
 20071                           
 20072                           ;temporizador.h: 58: return;
 20073  002D9C  D00D               	goto	i2l634
 20074  002D9E                     i2l636:
 20075  002D9E  FFFF               	dw	65535	; assembler added errata NOP
 20076                           
 20077                           ;temporizador.h: 59: }
 20078                           ;temporizador.h: 60: _sec = rtc.sec;
 20079  002DA0  C076  F0EF         	movff	_rtc+1,__sec
 20080                           
 20081                           ;temporizador.h: 61: _min = rtc.min;
 20082  002DA4  C077  F0EE         	movff	_rtc+2,__min
 20083                           
 20084                           ;temporizador.h: 62: _hor = rtc.hour;
 20085  002DA8  C078  F0ED         	movff	_rtc+3,__hor
 20086                           
 20087                           ;temporizador.h: 63: _dia = rtc.date;
 20088  002DAC  C079  F0EC         	movff	_rtc+4,__dia
 20089                           
 20090                           ;temporizador.h: 64: _mes = rtc.month;
 20091  002DB0  C07A  F0EB         	movff	_rtc+5,__mes
 20092                           
 20093                           ;temporizador.h: 65: _ano = rtc.year;
 20094  002DB4  C07B  F0EA         	movff	_rtc+6,__ano
 20095  002DB8                     i2l634:
 20096  002DB8  FFFF               	dw	65535	; assembler added errata NOP
 20097  002DBA  0012               	return		;funcret
 20098  002DBC  FFFF               	dw	65535	; errata NOP
 20099  002DBE                     __end_of_timer:
 20100                           	opt stack 0
 20101                           tosu	equ	0xFFF
 20102                           tosh	equ	0xFFE
 20103                           tosl	equ	0xFFD
 20104                           pclatu	equ	0xFFB
 20105                           pclath	equ	0xFFA
 20106                           tblptru	equ	0xFF8
 20107                           tblptrh	equ	0xFF7
 20108                           tblptrl	equ	0xFF6
 20109                           tablat	equ	0xFF5
 20110                           prodh	equ	0xFF4
 20111                           prodl	equ	0xFF3
 20112                           intcon	equ	0xFF2
 20113                           indf0	equ	0xFEF
 20114                           postinc0	equ	0xFEE
 20115                           fsr0h	equ	0xFEA
 20116                           fsr0l	equ	0xFE9
 20117                           wreg	equ	0xFE8
 20118                           postdec1	equ	0xFE5
 20119                           fsr1h	equ	0xFE2
 20120                           fsr1l	equ	0xFE1
 20121                           indf2	equ	0xFDF
 20122                           postinc2	equ	0xFDE
 20123                           postdec2	equ	0xFDD
 20124                           fsr2h	equ	0xFDA
 20125                           fsr2l	equ	0xFD9
 20126                           status	equ	0xFD8
 20127                           
 20128 ;; *************** function i2_getDS1307TimeDate *****************
 20129 ;; Defined at:
 20130 ;;		line 52 in file "ds1307.h"
 20131 ;; Parameters:    Size  Location     Type
 20132 ;;  ptrToUserVal    2    5[COMRAM] PTR struct .
 20133 ;;		 -> rtc(7), 
 20134 ;; Auto vars:     Size  Location     Type
 20135 ;;		None
 20136 ;; Return value:  Size  Location     Type
 20137 ;;                  1    wreg      void 
 20138 ;; Registers used:
 20139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20140 ;; Tracked objects:
 20141 ;;		On entry : 0/0
 20142 ;;		On exit  : 0/0
 20143 ;;		Unchanged: 0/0
 20144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20145 ;;      Params:         2       0       0       0       0       0       0
 20146 ;;      Locals:         0       0       0       0       0       0       0
 20147 ;;      Temps:          0       0       0       0       0       0       0
 20148 ;;      Totals:         2       0       0       0       0       0       0
 20149 ;;Total ram usage:        2 bytes
 20150 ;; Hardware stack levels used:    1
 20151 ;; Hardware stack levels required when called:    2
 20152 ;; This function calls:
 20153 ;;		i2_BCDtoDEC
 20154 ;;		i2_I2C_Read
 20155 ;;		i2_I2C_Restart
 20156 ;;		i2_I2C_Start
 20157 ;;		i2_I2C_Stop
 20158 ;;		i2_I2C_Write
 20159 ;; This function is called by:
 20160 ;;		_timer
 20161 ;; This function uses a non-reentrant model
 20162 ;;
 20163                           
 20164                           	psect	text75
 20165  0034F6                     __ptext75:
 20166                           	opt stack 0
 20167  0034F6                     i2_getDS1307TimeDate:
 20168                           	opt stack 0
 20169  0034F6  FFFF               	dw	65535	; assembler added errata NOP
 20170                           
 20171                           ;ds1307.h: 54: I2C_Start();
 20172                           
 20173                           ;incstack = 0
 20174  0034F8  EC86  F035         	call	i2_I2C_Start	;wreg free
 20175                           
 20176                           ;ds1307.h: 55: I2C_Write(0xD0);
 20177  0034FC  0E00               	movlw	0
 20178  0034FE  6E03               	movwf	i2I2C_Write@d+1,c
 20179  003500  0ED0               	movlw	208
 20180  003502  6E02               	movwf	i2I2C_Write@d,c
 20181  003504  ECAA  F035         	call	i2_I2C_Write	;wreg free
 20182                           
 20183                           ;ds1307.h: 56: I2C_Write(0x00);
 20184  003508  0E00               	movlw	0
 20185  00350A  6E03               	movwf	i2I2C_Write@d+1,c
 20186  00350C  0E00               	movlw	0
 20187  00350E  6E02               	movwf	i2I2C_Write@d,c
 20188  003510  ECAA  F035         	call	i2_I2C_Write	;wreg free
 20189                           
 20190                           ;ds1307.h: 57: I2C_Restart();
 20191  003514  EC92  F035         	call	i2_I2C_Restart	;wreg free
 20192                           
 20193                           ;ds1307.h: 58: I2C_Write(0xD1);
 20194  003518  0E00               	movlw	0
 20195  00351A  6E03               	movwf	i2I2C_Write@d+1,c
 20196  00351C  0ED1               	movlw	209
 20197  00351E  6E02               	movwf	i2I2C_Write@d,c
 20198  003520  ECAA  F035         	call	i2_I2C_Write	;wreg free
 20199                           
 20200                           ;ds1307.h: 59: ptrToUserVal->sec = BCDtoDEC(I2C_Read(1));
 20201  003524  EE20 F001          	lfsr	2,1
 20202  003528  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 20203  00352A  26D9               	addwf	fsr2l,f,c
 20204  00352C  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 20205  00352E  22DA               	addwfc	fsr2h,f,c
 20206  003530  0E00               	movlw	0
 20207  003532  6E03               	movwf	i2I2C_Read@a+1,c
 20208  003534  0E01               	movlw	1
 20209  003536  6E02               	movwf	i2I2C_Read@a,c
 20210  003538  ECE0  F036         	call	i2_I2C_Read	;wreg free
 20211  00353C  5002               	movf	?i2_I2C_Read,w,c
 20212  00353E  ECD2  F035         	call	i2_BCDtoDEC
 20213  003542  6EDF               	movwf	indf2,c
 20214                           
 20215                           ;ds1307.h: 60: ptrToUserVal-> min = BCDtoDEC(I2C_Read(1));
 20216  003544  EE20 F002          	lfsr	2,2
 20217  003548  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 20218  00354A  26D9               	addwf	fsr2l,f,c
 20219  00354C  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 20220  00354E  22DA               	addwfc	fsr2h,f,c
 20221  003550  0E00               	movlw	0
 20222  003552  6E03               	movwf	i2I2C_Read@a+1,c
 20223  003554  0E01               	movlw	1
 20224  003556  6E02               	movwf	i2I2C_Read@a,c
 20225  003558  ECE0  F036         	call	i2_I2C_Read	;wreg free
 20226  00355C  5002               	movf	?i2_I2C_Read,w,c
 20227  00355E  ECD2  F035         	call	i2_BCDtoDEC
 20228  003562  6EDF               	movwf	indf2,c
 20229                           
 20230                           ;ds1307.h: 61: ptrToUserVal-> hour = BCDtoDEC(I2C_Read(1));
 20231  003564  EE20 F003          	lfsr	2,3
 20232  003568  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 20233  00356A  26D9               	addwf	fsr2l,f,c
 20234  00356C  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 20235  00356E  22DA               	addwfc	fsr2h,f,c
 20236  003570  0E00               	movlw	0
 20237  003572  6E03               	movwf	i2I2C_Read@a+1,c
 20238  003574  0E01               	movlw	1
 20239  003576  6E02               	movwf	i2I2C_Read@a,c
 20240  003578  ECE0  F036         	call	i2_I2C_Read	;wreg free
 20241  00357C  5002               	movf	?i2_I2C_Read,w,c
 20242  00357E  ECD2  F035         	call	i2_BCDtoDEC
 20243  003582  6EDF               	movwf	indf2,c
 20244                           
 20245                           ;ds1307.h: 62: ptrToUserVal-> day = BCDtoDEC(I2C_Read(1));
 20246  003584  0E00               	movlw	0
 20247  003586  6E03               	movwf	i2I2C_Read@a+1,c
 20248  003588  0E01               	movlw	1
 20249  00358A  6E02               	movwf	i2I2C_Read@a,c
 20250  00358C  ECE0  F036         	call	i2_I2C_Read	;wreg free
 20251  003590  5002               	movf	?i2_I2C_Read,w,c
 20252  003592  ECD2  F035         	call	i2_BCDtoDEC
 20253  003596  C006  FFD9         	movff	i2getDS1307TimeDate@ptrToUserVal,fsr2l
 20254  00359A  C007  FFDA         	movff	i2getDS1307TimeDate@ptrToUserVal+1,fsr2h
 20255  00359E  6EDF               	movwf	indf2,c
 20256                           
 20257                           ;ds1307.h: 63: ptrToUserVal-> date = BCDtoDEC(I2C_Read(1));
 20258  0035A0  EE20 F004          	lfsr	2,4
 20259  0035A4  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 20260  0035A6  26D9               	addwf	fsr2l,f,c
 20261  0035A8  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 20262  0035AA  22DA               	addwfc	fsr2h,f,c
 20263  0035AC  0E00               	movlw	0
 20264  0035AE  6E03               	movwf	i2I2C_Read@a+1,c
 20265  0035B0  0E01               	movlw	1
 20266  0035B2  6E02               	movwf	i2I2C_Read@a,c
 20267  0035B4  ECE0  F036         	call	i2_I2C_Read	;wreg free
 20268  0035B8  5002               	movf	?i2_I2C_Read,w,c
 20269  0035BA  ECD2  F035         	call	i2_BCDtoDEC
 20270  0035BE  6EDF               	movwf	indf2,c
 20271                           
 20272                           ;ds1307.h: 64: ptrToUserVal-> month = BCDtoDEC(I2C_Read(1));
 20273  0035C0  EE20 F005          	lfsr	2,5
 20274  0035C4  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 20275  0035C6  26D9               	addwf	fsr2l,f,c
 20276  0035C8  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 20277  0035CA  22DA               	addwfc	fsr2h,f,c
 20278  0035CC  0E00               	movlw	0
 20279  0035CE  6E03               	movwf	i2I2C_Read@a+1,c
 20280  0035D0  0E01               	movlw	1
 20281  0035D2  6E02               	movwf	i2I2C_Read@a,c
 20282  0035D4  ECE0  F036         	call	i2_I2C_Read	;wreg free
 20283  0035D8  5002               	movf	?i2_I2C_Read,w,c
 20284  0035DA  ECD2  F035         	call	i2_BCDtoDEC
 20285  0035DE  6EDF               	movwf	indf2,c
 20286                           
 20287                           ;ds1307.h: 65: ptrToUserVal-> year = BCDtoDEC(I2C_Read(0));
 20288  0035E0  EE20 F006          	lfsr	2,6
 20289  0035E4  5006               	movf	i2getDS1307TimeDate@ptrToUserVal,w,c
 20290  0035E6  26D9               	addwf	fsr2l,f,c
 20291  0035E8  5007               	movf	i2getDS1307TimeDate@ptrToUserVal+1,w,c
 20292  0035EA  22DA               	addwfc	fsr2h,f,c
 20293  0035EC  0E00               	movlw	0
 20294  0035EE  6E03               	movwf	i2I2C_Read@a+1,c
 20295  0035F0  0E00               	movlw	0
 20296  0035F2  6E02               	movwf	i2I2C_Read@a,c
 20297  0035F4  ECE0  F036         	call	i2_I2C_Read	;wreg free
 20298  0035F8  5002               	movf	?i2_I2C_Read,w,c
 20299  0035FA  ECD2  F035         	call	i2_BCDtoDEC
 20300  0035FE  6EDF               	movwf	indf2,c
 20301                           
 20302                           ;ds1307.h: 66: I2C_Stop();
 20303  003600  EC8C  F035         	call	i2_I2C_Stop	;wreg free
 20304  003604  0012               	return		;funcret
 20305  003606  FFFF               	dw	65535	; errata NOP
 20306  003608                     __end_ofi2_getDS1307TimeDate:
 20307                           	opt stack 0
 20308                           tosu	equ	0xFFF
 20309                           tosh	equ	0xFFE
 20310                           tosl	equ	0xFFD
 20311                           pclatu	equ	0xFFB
 20312                           pclath	equ	0xFFA
 20313                           tblptru	equ	0xFF8
 20314                           tblptrh	equ	0xFF7
 20315                           tblptrl	equ	0xFF6
 20316                           tablat	equ	0xFF5
 20317                           prodh	equ	0xFF4
 20318                           prodl	equ	0xFF3
 20319                           intcon	equ	0xFF2
 20320                           indf0	equ	0xFEF
 20321                           postinc0	equ	0xFEE
 20322                           fsr0h	equ	0xFEA
 20323                           fsr0l	equ	0xFE9
 20324                           wreg	equ	0xFE8
 20325                           postdec1	equ	0xFE5
 20326                           fsr1h	equ	0xFE2
 20327                           fsr1l	equ	0xFE1
 20328                           indf2	equ	0xFDF
 20329                           postinc2	equ	0xFDE
 20330                           postdec2	equ	0xFDD
 20331                           fsr2h	equ	0xFDA
 20332                           fsr2l	equ	0xFD9
 20333                           status	equ	0xFD8
 20334                           
 20335 ;; *************** function i2_I2C_Restart *****************
 20336 ;; Defined at:
 20337 ;;		line 31 in file "I2C.c"
 20338 ;; Parameters:    Size  Location     Type
 20339 ;;		None
 20340 ;; Auto vars:     Size  Location     Type
 20341 ;;		None
 20342 ;; Return value:  Size  Location     Type
 20343 ;;                  1    wreg      void 
 20344 ;; Registers used:
 20345 ;;		wreg, status,2, status,0, cstack
 20346 ;; Tracked objects:
 20347 ;;		On entry : 0/0
 20348 ;;		On exit  : 0/0
 20349 ;;		Unchanged: 0/0
 20350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20351 ;;      Params:         0       0       0       0       0       0       0
 20352 ;;      Locals:         0       0       0       0       0       0       0
 20353 ;;      Temps:          0       0       0       0       0       0       0
 20354 ;;      Totals:         0       0       0       0       0       0       0
 20355 ;;Total ram usage:        0 bytes
 20356 ;; Hardware stack levels used:    1
 20357 ;; Hardware stack levels required when called:    1
 20358 ;; This function calls:
 20359 ;;		i2_I2C_Wait
 20360 ;; This function is called by:
 20361 ;;		i2_getDS1307TimeDate
 20362 ;; This function uses a non-reentrant model
 20363 ;;
 20364                           
 20365                           	psect	text76
 20366  006B24                     __ptext76:
 20367                           	opt stack 0
 20368  006B24                     i2_I2C_Restart:
 20369                           	opt stack 0
 20370  006B24  FFFF               	dw	65535	; assembler added errata NOP
 20371                           
 20372                           ;I2C.c: 32: I2C_Wait();
 20373                           
 20374                           ;incstack = 0
 20375  006B26  ECDD  F035         	call	i2_I2C_Wait	;wreg free
 20376                           
 20377                           ;I2C.c: 33: RSEN = 1;
 20378  006B2A  82C5               	bsf	4037,1,c	;volatile
 20379  006B2C  0012               	return		;funcret
 20380  006B2E  FFFF               	dw	65535	; errata NOP
 20381  006B30                     __end_ofi2_I2C_Restart:
 20382                           	opt stack 0
 20383                           tosu	equ	0xFFF
 20384                           tosh	equ	0xFFE
 20385                           tosl	equ	0xFFD
 20386                           pclatu	equ	0xFFB
 20387                           pclath	equ	0xFFA
 20388                           tblptru	equ	0xFF8
 20389                           tblptrh	equ	0xFF7
 20390                           tblptrl	equ	0xFF6
 20391                           tablat	equ	0xFF5
 20392                           prodh	equ	0xFF4
 20393                           prodl	equ	0xFF3
 20394                           intcon	equ	0xFF2
 20395                           indf0	equ	0xFEF
 20396                           postinc0	equ	0xFEE
 20397                           fsr0h	equ	0xFEA
 20398                           fsr0l	equ	0xFE9
 20399                           wreg	equ	0xFE8
 20400                           postdec1	equ	0xFE5
 20401                           fsr1h	equ	0xFE2
 20402                           fsr1l	equ	0xFE1
 20403                           indf2	equ	0xFDF
 20404                           postinc2	equ	0xFDE
 20405                           postdec2	equ	0xFDD
 20406                           fsr2h	equ	0xFDA
 20407                           fsr2l	equ	0xFD9
 20408                           status	equ	0xFD8
 20409                           
 20410 ;; *************** function i2_I2C_Read *****************
 20411 ;; Defined at:
 20412 ;;		line 47 in file "I2C.c"
 20413 ;; Parameters:    Size  Location     Type
 20414 ;;  a               2    1[COMRAM] unsigned short 
 20415 ;; Auto vars:     Size  Location     Type
 20416 ;;  I2C_Read        2    3[COMRAM] unsigned short 
 20417 ;; Return value:  Size  Location     Type
 20418 ;;                  2    1[COMRAM] unsigned short 
 20419 ;; Registers used:
 20420 ;;		wreg, status,2, status,0, cstack
 20421 ;; Tracked objects:
 20422 ;;		On entry : 0/0
 20423 ;;		On exit  : 0/0
 20424 ;;		Unchanged: 0/0
 20425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20426 ;;      Params:         2       0       0       0       0       0       0
 20427 ;;      Locals:         2       0       0       0       0       0       0
 20428 ;;      Temps:          0       0       0       0       0       0       0
 20429 ;;      Totals:         4       0       0       0       0       0       0
 20430 ;;Total ram usage:        4 bytes
 20431 ;; Hardware stack levels used:    1
 20432 ;; Hardware stack levels required when called:    1
 20433 ;; This function calls:
 20434 ;;		i2_I2C_Wait
 20435 ;; This function is called by:
 20436 ;;		i2_getDS1307TimeDate
 20437 ;; This function uses a non-reentrant model
 20438 ;;
 20439                           
 20440                           	psect	text77
 20441  006DC0                     __ptext77:
 20442                           	opt stack 0
 20443  006DC0                     i2_I2C_Read:
 20444                           	opt stack 0
 20445  006DC0  FFFF               	dw	65535	; assembler added errata NOP
 20446                           
 20447                           ;I2C.c: 48: unsigned short temp;
 20448                           ;I2C.c: 49: I2C_Wait();
 20449                           
 20450                           ;incstack = 0
 20451  006DC2  ECDD  F035         	call	i2_I2C_Wait	;wreg free
 20452                           
 20453                           ;I2C.c: 50: RCEN = 1;
 20454  006DC6  86C5               	bsf	4037,3,c	;volatile
 20455                           
 20456                           ;I2C.c: 51: I2C_Wait();
 20457  006DC8  ECDD  F035         	call	i2_I2C_Wait	;wreg free
 20458                           
 20459                           ;I2C.c: 52: temp = SSPBUF;
 20460  006DCC  CFC9 F004          	movff	4041,i2I2C_Read@temp	;volatile
 20461  006DD0  6A05               	clrf	i2I2C_Read@temp+1,c
 20462                           
 20463                           ;I2C.c: 53: I2C_Wait();
 20464  006DD2  ECDD  F035         	call	i2_I2C_Wait	;wreg free
 20465                           
 20466                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 20467  006DD6  5002               	movf	i2I2C_Read@a,w,c
 20468  006DD8  1003               	iorwf	i2I2C_Read@a+1,w,c
 20469  006DDA  A4D8               	btfss	status,2,c
 20470  006DDC  D002               	goto	i2u574_40
 20471  006DDE  8AC5               	bsf	4037,5,c	;volatile
 20472  006DE0  D002               	goto	i2u575_45
 20473  006DE2                     i2u574_40:
 20474  006DE2  FFFF               	dw	65535	; assembler added errata NOP
 20475  006DE4  9AC5               	bcf	4037,5,c	;volatile
 20476  006DE6                     i2u575_45:
 20477  006DE6  FFFF               	dw	65535	; assembler added errata NOP
 20478                           
 20479                           ;I2C.c: 55: ACKEN = 1;
 20480  006DE8  88C5               	bsf	4037,4,c	;volatile
 20481                           
 20482                           ;I2C.c: 56: return temp;
 20483  006DEA  C004  F002         	movff	i2I2C_Read@temp,?i2_I2C_Read
 20484  006DEE  C005  F003         	movff	i2I2C_Read@temp+1,?i2_I2C_Read+1
 20485  006DF2  0012               	return		;funcret
 20486  006DF4  FFFF               	dw	65535	; errata NOP
 20487  006DF6                     __end_ofi2_I2C_Read:
 20488                           	opt stack 0
 20489                           tosu	equ	0xFFF
 20490                           tosh	equ	0xFFE
 20491                           tosl	equ	0xFFD
 20492                           pclatu	equ	0xFFB
 20493                           pclath	equ	0xFFA
 20494                           tblptru	equ	0xFF8
 20495                           tblptrh	equ	0xFF7
 20496                           tblptrl	equ	0xFF6
 20497                           tablat	equ	0xFF5
 20498                           prodh	equ	0xFF4
 20499                           prodl	equ	0xFF3
 20500                           intcon	equ	0xFF2
 20501                           indf0	equ	0xFEF
 20502                           postinc0	equ	0xFEE
 20503                           fsr0h	equ	0xFEA
 20504                           fsr0l	equ	0xFE9
 20505                           wreg	equ	0xFE8
 20506                           postdec1	equ	0xFE5
 20507                           fsr1h	equ	0xFE2
 20508                           fsr1l	equ	0xFE1
 20509                           indf2	equ	0xFDF
 20510                           postinc2	equ	0xFDE
 20511                           postdec2	equ	0xFDD
 20512                           fsr2h	equ	0xFDA
 20513                           fsr2l	equ	0xFD9
 20514                           status	equ	0xFD8
 20515                           
 20516 ;; *************** function i2_BCDtoDEC *****************
 20517 ;; Defined at:
 20518 ;;		line 34 in file "function.c"
 20519 ;; Parameters:    Size  Location     Type
 20520 ;;  val             1    wreg     unsigned char 
 20521 ;; Auto vars:     Size  Location     Type
 20522 ;;  val             1    0[COMRAM] unsigned char 
 20523 ;; Return value:  Size  Location     Type
 20524 ;;                  1    wreg      unsigned char 
 20525 ;; Registers used:
 20526 ;;		wreg, status,2, status,0, prodl, prodh
 20527 ;; Tracked objects:
 20528 ;;		On entry : 0/0
 20529 ;;		On exit  : 0/0
 20530 ;;		Unchanged: 0/0
 20531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20532 ;;      Params:         0       0       0       0       0       0       0
 20533 ;;      Locals:         1       0       0       0       0       0       0
 20534 ;;      Temps:          0       0       0       0       0       0       0
 20535 ;;      Totals:         1       0       0       0       0       0       0
 20536 ;;Total ram usage:        1 bytes
 20537 ;; Hardware stack levels used:    1
 20538 ;; This function calls:
 20539 ;;		Nothing
 20540 ;; This function is called by:
 20541 ;;		i2_getDS1307TimeDate
 20542 ;; This function uses a non-reentrant model
 20543 ;;
 20544                           
 20545                           	psect	text78
 20546  006BA4                     __ptext78:
 20547                           	opt stack 0
 20548  006BA4                     i2_BCDtoDEC:
 20549                           	opt stack 0
 20550  006BA4  FFFF               	dw	65535	; assembler added errata NOP
 20551                           
 20552                           ;incstack = 0
 20553                           ;i2BCDtoDEC@val stored from wreg
 20554  006BA6  6E01               	movwf	i2BCDtoDEC@val,c
 20555                           
 20556                           ;function.c: 35: return (val & 0x0F) + ((val & 0xF0) >> 4)*10;
 20557  006BA8  3801               	swapf	i2BCDtoDEC@val,w,c
 20558  006BAA  0B0F               	andlw	15
 20559  006BAC  0B0F               	andlw	15
 20560  006BAE  0D0A               	mullw	10
 20561  006BB0  5001               	movf	i2BCDtoDEC@val,w,c
 20562  006BB2  0B0F               	andlw	15
 20563  006BB4  24F3               	addwf	prodl,w,c
 20564  006BB6  0012               	return		;funcret
 20565  006BB8  FFFF               	dw	65535	; errata NOP
 20566  006BBA                     __end_ofi2_BCDtoDEC:
 20567                           	opt stack 0
 20568                           tosu	equ	0xFFF
 20569                           tosh	equ	0xFFE
 20570                           tosl	equ	0xFFD
 20571                           pclatu	equ	0xFFB
 20572                           pclath	equ	0xFFA
 20573                           tblptru	equ	0xFF8
 20574                           tblptrh	equ	0xFF7
 20575                           tblptrl	equ	0xFF6
 20576                           tablat	equ	0xFF5
 20577                           prodh	equ	0xFF4
 20578                           prodl	equ	0xFF3
 20579                           intcon	equ	0xFF2
 20580                           indf0	equ	0xFEF
 20581                           postinc0	equ	0xFEE
 20582                           fsr0h	equ	0xFEA
 20583                           fsr0l	equ	0xFE9
 20584                           wreg	equ	0xFE8
 20585                           postdec1	equ	0xFE5
 20586                           fsr1h	equ	0xFE2
 20587                           fsr1l	equ	0xFE1
 20588                           indf2	equ	0xFDF
 20589                           postinc2	equ	0xFDE
 20590                           postdec2	equ	0xFDD
 20591                           fsr2h	equ	0xFDA
 20592                           fsr2l	equ	0xFD9
 20593                           status	equ	0xFD8
 20594                           
 20595 ;; *************** function i2_RTC_Init *****************
 20596 ;; Defined at:
 20597 ;;		line 98 in file "ds1307.h"
 20598 ;; Parameters:    Size  Location     Type
 20599 ;;		None
 20600 ;; Auto vars:     Size  Location     Type
 20601 ;;		None
 20602 ;; Return value:  Size  Location     Type
 20603 ;;                  1    wreg      void 
 20604 ;; Registers used:
 20605 ;;		wreg, status,2, status,0, cstack
 20606 ;; Tracked objects:
 20607 ;;		On entry : 0/0
 20608 ;;		On exit  : 0/0
 20609 ;;		Unchanged: 0/0
 20610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20611 ;;      Params:         0       0       0       0       0       0       0
 20612 ;;      Locals:         0       0       0       0       0       0       0
 20613 ;;      Temps:          0       0       0       0       0       0       0
 20614 ;;      Totals:         0       0       0       0       0       0       0
 20615 ;;Total ram usage:        0 bytes
 20616 ;; Hardware stack levels used:    1
 20617 ;; Hardware stack levels required when called:    2
 20618 ;; This function calls:
 20619 ;;		i2_I2C_Start
 20620 ;;		i2_I2C_Stop
 20621 ;;		i2_I2C_Write
 20622 ;; This function is called by:
 20623 ;;		_timer
 20624 ;; This function uses a non-reentrant model
 20625 ;;
 20626                           
 20627                           	psect	text79
 20628  006D5A                     __ptext79:
 20629                           	opt stack 0
 20630  006D5A                     i2_RTC_Init:
 20631                           	opt stack 0
 20632  006D5A  FFFF               	dw	65535	; assembler added errata NOP
 20633                           
 20634                           ;ds1307.h: 100: I2C_Start();
 20635                           
 20636                           ;incstack = 0
 20637  006D5C  EC86  F035         	call	i2_I2C_Start	;wreg free
 20638                           
 20639                           ;ds1307.h: 101: I2C_Write(0xD0);
 20640  006D60  0E00               	movlw	0
 20641  006D62  6E03               	movwf	i2I2C_Write@d+1,c
 20642  006D64  0ED0               	movlw	208
 20643  006D66  6E02               	movwf	i2I2C_Write@d,c
 20644  006D68  ECAA  F035         	call	i2_I2C_Write	;wreg free
 20645                           
 20646                           ;ds1307.h: 102: I2C_Write(0x07);
 20647  006D6C  0E00               	movlw	0
 20648  006D6E  6E03               	movwf	i2I2C_Write@d+1,c
 20649  006D70  0E07               	movlw	7
 20650  006D72  6E02               	movwf	i2I2C_Write@d,c
 20651  006D74  ECAA  F035         	call	i2_I2C_Write	;wreg free
 20652                           
 20653                           ;ds1307.h: 103: I2C_Write(0x00);
 20654  006D78  0E00               	movlw	0
 20655  006D7A  6E03               	movwf	i2I2C_Write@d+1,c
 20656  006D7C  0E00               	movlw	0
 20657  006D7E  6E02               	movwf	i2I2C_Write@d,c
 20658  006D80  ECAA  F035         	call	i2_I2C_Write	;wreg free
 20659                           
 20660                           ;ds1307.h: 104: I2C_Stop();
 20661  006D84  EC8C  F035         	call	i2_I2C_Stop	;wreg free
 20662  006D88  0012               	return		;funcret
 20663  006D8A  FFFF               	dw	65535	; errata NOP
 20664  006D8C                     __end_ofi2_RTC_Init:
 20665                           	opt stack 0
 20666                           tosu	equ	0xFFF
 20667                           tosh	equ	0xFFE
 20668                           tosl	equ	0xFFD
 20669                           pclatu	equ	0xFFB
 20670                           pclath	equ	0xFFA
 20671                           tblptru	equ	0xFF8
 20672                           tblptrh	equ	0xFF7
 20673                           tblptrl	equ	0xFF6
 20674                           tablat	equ	0xFF5
 20675                           prodh	equ	0xFF4
 20676                           prodl	equ	0xFF3
 20677                           intcon	equ	0xFF2
 20678                           indf0	equ	0xFEF
 20679                           postinc0	equ	0xFEE
 20680                           fsr0h	equ	0xFEA
 20681                           fsr0l	equ	0xFE9
 20682                           wreg	equ	0xFE8
 20683                           postdec1	equ	0xFE5
 20684                           fsr1h	equ	0xFE2
 20685                           fsr1l	equ	0xFE1
 20686                           indf2	equ	0xFDF
 20687                           postinc2	equ	0xFDE
 20688                           postdec2	equ	0xFDD
 20689                           fsr2h	equ	0xFDA
 20690                           fsr2l	equ	0xFD9
 20691                           status	equ	0xFD8
 20692                           
 20693 ;; *************** function _writeEEPROM16_ext *****************
 20694 ;; Defined at:
 20695 ;;		line 40 in file "eeprom.h"
 20696 ;; Parameters:    Size  Location     Type
 20697 ;;  adress          1    wreg     unsigned char 
 20698 ;;  data            2    5[COMRAM] unsigned int 
 20699 ;; Auto vars:     Size  Location     Type
 20700 ;;  adress          1    7[COMRAM] unsigned char 
 20701 ;; Return value:  Size  Location     Type
 20702 ;;                  1    wreg      void 
 20703 ;; Registers used:
 20704 ;;		wreg, status,2, status,0, cstack
 20705 ;; Tracked objects:
 20706 ;;		On entry : 0/0
 20707 ;;		On exit  : 0/0
 20708 ;;		Unchanged: 0/0
 20709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20710 ;;      Params:         2       0       0       0       0       0       0
 20711 ;;      Locals:         1       0       0       0       0       0       0
 20712 ;;      Temps:          0       0       0       0       0       0       0
 20713 ;;      Totals:         3       0       0       0       0       0       0
 20714 ;;Total ram usage:        3 bytes
 20715 ;; Hardware stack levels used:    1
 20716 ;; Hardware stack levels required when called:    3
 20717 ;; This function calls:
 20718 ;;		i2_writeEEPROM_ext
 20719 ;; This function is called by:
 20720 ;;		_timer
 20721 ;; This function uses a non-reentrant model
 20722 ;;
 20723                           
 20724                           	psect	text80
 20725  006C06                     __ptext80:
 20726                           	opt stack 0
 20727  006C06                     _writeEEPROM16_ext:
 20728                           	opt stack 0
 20729  006C06  FFFF               	dw	65535	; assembler added errata NOP
 20730                           
 20731                           ;incstack = 0
 20732                           ;writeEEPROM16_ext@adress stored from wreg
 20733  006C08  6E08               	movwf	writeEEPROM16_ext@adress,c
 20734                           
 20735                           ;eeprom.h: 41: writeEEPROM_ext(adress, data);
 20736  006C0A  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 20737  006C0E  5008               	movf	writeEEPROM16_ext@adress,w,c
 20738  006C10  ECDB  F037         	call	i2_writeEEPROM_ext
 20739                           
 20740                           ;eeprom.h: 42: data>> = 8;
 20741  006C14  5007               	movf	writeEEPROM16_ext@data+1,w,c
 20742  006C16  6E06               	movwf	writeEEPROM16_ext@data,c
 20743  006C18  6A07               	clrf	writeEEPROM16_ext@data+1,c
 20744                           
 20745                           ;eeprom.h: 43: writeEEPROM_ext(adress + 1, data);
 20746  006C1A  C006  F004         	movff	writeEEPROM16_ext@data,i2writeEEPROM_ext@data
 20747  006C1E  2808               	incf	writeEEPROM16_ext@adress,w,c
 20748  006C20  ECDB  F037         	call	i2_writeEEPROM_ext
 20749  006C24  0012               	return		;funcret
 20750  006C26  FFFF               	dw	65535	; errata NOP
 20751  006C28                     __end_of_writeEEPROM16_ext:
 20752                           	opt stack 0
 20753                           tosu	equ	0xFFF
 20754                           tosh	equ	0xFFE
 20755                           tosl	equ	0xFFD
 20756                           pclatu	equ	0xFFB
 20757                           pclath	equ	0xFFA
 20758                           tblptru	equ	0xFF8
 20759                           tblptrh	equ	0xFF7
 20760                           tblptrl	equ	0xFF6
 20761                           tablat	equ	0xFF5
 20762                           prodh	equ	0xFF4
 20763                           prodl	equ	0xFF3
 20764                           intcon	equ	0xFF2
 20765                           indf0	equ	0xFEF
 20766                           postinc0	equ	0xFEE
 20767                           fsr0h	equ	0xFEA
 20768                           fsr0l	equ	0xFE9
 20769                           wreg	equ	0xFE8
 20770                           postdec1	equ	0xFE5
 20771                           fsr1h	equ	0xFE2
 20772                           fsr1l	equ	0xFE1
 20773                           indf2	equ	0xFDF
 20774                           postinc2	equ	0xFDE
 20775                           postdec2	equ	0xFDD
 20776                           fsr2h	equ	0xFDA
 20777                           fsr2l	equ	0xFD9
 20778                           status	equ	0xFD8
 20779                           
 20780 ;; *************** function i2_writeEEPROM_ext *****************
 20781 ;; Defined at:
 20782 ;;		line 13 in file "eeprom.h"
 20783 ;; Parameters:    Size  Location     Type
 20784 ;;  adress          1    wreg     unsigned char 
 20785 ;;  data            1    3[COMRAM] unsigned char 
 20786 ;; Auto vars:     Size  Location     Type
 20787 ;;  adress          1    4[COMRAM] unsigned char 
 20788 ;; Return value:  Size  Location     Type
 20789 ;;                  1    wreg      void 
 20790 ;; Registers used:
 20791 ;;		wreg, status,2, status,0, cstack
 20792 ;; Tracked objects:
 20793 ;;		On entry : 0/0
 20794 ;;		On exit  : 0/0
 20795 ;;		Unchanged: 0/0
 20796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20797 ;;      Params:         1       0       0       0       0       0       0
 20798 ;;      Locals:         1       0       0       0       0       0       0
 20799 ;;      Temps:          0       0       0       0       0       0       0
 20800 ;;      Totals:         2       0       0       0       0       0       0
 20801 ;;Total ram usage:        2 bytes
 20802 ;; Hardware stack levels used:    1
 20803 ;; Hardware stack levels required when called:    2
 20804 ;; This function calls:
 20805 ;;		i2_I2C_Start
 20806 ;;		i2_I2C_Stop
 20807 ;;		i2_I2C_Write
 20808 ;;		i2_delay
 20809 ;; This function is called by:
 20810 ;;		_writeEEPROM16_ext
 20811 ;;		_timer
 20812 ;; This function uses a non-reentrant model
 20813 ;;
 20814                           
 20815                           	psect	text81
 20816  006FB6                     __ptext81:
 20817                           	opt stack 0
 20818  006FB6                     i2_writeEEPROM_ext:
 20819                           	opt stack 0
 20820  006FB6  FFFF               	dw	65535	; assembler added errata NOP
 20821                           
 20822                           ;incstack = 0
 20823                           ;i2writeEEPROM_ext@adress stored from wreg
 20824  006FB8  6E05               	movwf	i2writeEEPROM_ext@adress,c
 20825                           
 20826                           ;eeprom.h: 15: I2C_Start();
 20827  006FBA  EC86  F035         	call	i2_I2C_Start	;wreg free
 20828                           
 20829                           ;eeprom.h: 16: I2C_Write(0xA0);
 20830  006FBE  0E00               	movlw	0
 20831  006FC0  6E03               	movwf	i2I2C_Write@d+1,c
 20832  006FC2  0EA0               	movlw	160
 20833  006FC4  6E02               	movwf	i2I2C_Write@d,c
 20834  006FC6  ECAA  F035         	call	i2_I2C_Write	;wreg free
 20835                           
 20836                           ;eeprom.h: 18: I2C_Write(adress);
 20837  006FCA  C005  F002         	movff	i2writeEEPROM_ext@adress,i2I2C_Write@d
 20838  006FCE  6A03               	clrf	i2I2C_Write@d+1,c
 20839  006FD0  ECAA  F035         	call	i2_I2C_Write	;wreg free
 20840                           
 20841                           ;eeprom.h: 19: I2C_Write(data);
 20842  006FD4  C004  F002         	movff	i2writeEEPROM_ext@data,i2I2C_Write@d
 20843  006FD8  6A03               	clrf	i2I2C_Write@d+1,c
 20844  006FDA  ECAA  F035         	call	i2_I2C_Write	;wreg free
 20845                           
 20846                           ;eeprom.h: 20: I2C_Stop();
 20847  006FDE  EC8C  F035         	call	i2_I2C_Stop	;wreg free
 20848                           
 20849                           ;eeprom.h: 21: delay(15);
 20850  006FE2  0E00               	movlw	0
 20851  006FE4  6E02               	movwf	i2delay@x+1,c
 20852  006FE6  0E0F               	movlw	15
 20853  006FE8  6E01               	movwf	i2delay@x,c
 20854  006FEA  EC94  F036         	call	i2_delay	;wreg free
 20855  006FEE  0012               	return		;funcret
 20856  006FF0  FFFF               	dw	65535	; errata NOP
 20857  006FF2                     __end_ofi2_writeEEPROM_ext:
 20858                           	opt stack 0
 20859                           tosu	equ	0xFFF
 20860                           tosh	equ	0xFFE
 20861                           tosl	equ	0xFFD
 20862                           pclatu	equ	0xFFB
 20863                           pclath	equ	0xFFA
 20864                           tblptru	equ	0xFF8
 20865                           tblptrh	equ	0xFF7
 20866                           tblptrl	equ	0xFF6
 20867                           tablat	equ	0xFF5
 20868                           prodh	equ	0xFF4
 20869                           prodl	equ	0xFF3
 20870                           intcon	equ	0xFF2
 20871                           indf0	equ	0xFEF
 20872                           postinc0	equ	0xFEE
 20873                           fsr0h	equ	0xFEA
 20874                           fsr0l	equ	0xFE9
 20875                           wreg	equ	0xFE8
 20876                           postdec1	equ	0xFE5
 20877                           fsr1h	equ	0xFE2
 20878                           fsr1l	equ	0xFE1
 20879                           indf2	equ	0xFDF
 20880                           postinc2	equ	0xFDE
 20881                           postdec2	equ	0xFDD
 20882                           fsr2h	equ	0xFDA
 20883                           fsr2l	equ	0xFD9
 20884                           status	equ	0xFD8
 20885                           
 20886 ;; *************** function i2_delay *****************
 20887 ;; Defined at:
 20888 ;;		line 16 in file "function.c"
 20889 ;; Parameters:    Size  Location     Type
 20890 ;;  x               2    0[COMRAM] int 
 20891 ;; Auto vars:     Size  Location     Type
 20892 ;;		None
 20893 ;; Return value:  Size  Location     Type
 20894 ;;                  1    wreg      void 
 20895 ;; Registers used:
 20896 ;;		wreg, status,2, status,0
 20897 ;; Tracked objects:
 20898 ;;		On entry : 0/0
 20899 ;;		On exit  : 0/0
 20900 ;;		Unchanged: 0/0
 20901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20902 ;;      Params:         2       0       0       0       0       0       0
 20903 ;;      Locals:         0       0       0       0       0       0       0
 20904 ;;      Temps:          1       0       0       0       0       0       0
 20905 ;;      Totals:         3       0       0       0       0       0       0
 20906 ;;Total ram usage:        3 bytes
 20907 ;; Hardware stack levels used:    1
 20908 ;; This function calls:
 20909 ;;		Nothing
 20910 ;; This function is called by:
 20911 ;;		i2_writeEEPROM_ext
 20912 ;; This function uses a non-reentrant model
 20913 ;;
 20914                           
 20915                           	psect	text82
 20916  006D28                     __ptext82:
 20917                           	opt stack 0
 20918  006D28                     i2_delay:
 20919                           	opt stack 0
 20920  006D28  FFFF               	dw	65535	; assembler added errata NOP
 20921                           
 20922                           ;function.c: 17: while (x--) {
 20923                           
 20924                           ;incstack = 0
 20925  006D2A  D00B               	goto	i2l1041
 20926  006D2C  FFFF               	dw	65535	; assembler added errata NOP
 20927  006D2E                     i2l5415:
 20928                           
 20929                           ;function.c: 18: _delay((unsigned long)((1000)*(8000000/4000000.0)));
 20930  006D2E  0E02               	movlw	2
 20931  006D30  6E03               	movwf	??i2_delay& (0+255),c
 20932  006D32  0EF2               	movlw	242
 20933  006D34                     i2u946_47:
 20934  006D34  FFFF               	dw	65535	; errata NOP
 20935  006D36  2EE8               	decfsz	wreg,f,c
 20936  006D38  D7FD               	bra	i2u946_47
 20937  006D3A  2E03               	decfsz	??i2_delay& (0+255),f,c
 20938  006D3C  D7FB               	bra	i2u946_47
 20939  006D3E  D000               	nop2	
 20940  006D40  0004               	clrwdt		;# 
 20941  006D42                     i2l1041:
 20942  006D42  FFFF               	dw	65535	; assembler added errata NOP
 20943  006D44  0601               	decf	i2delay@x,f,c
 20944  006D46  A0D8               	btfss	status,0,c
 20945  006D48  0602               	decf	i2delay@x+1,f,c
 20946  006D4A  2801               	incf	i2delay@x,w,c
 20947  006D4C  E1F0               	bnz	i2l5415
 20948  006D4E  2802               	incf	i2delay@x+1,w,c
 20949  006D50  B4D8               	btfsc	status,2,c
 20950  006D52  0012               	return		;funcret
 20951  006D54  FFFF               	dw	65535	; assembler added errata NOP
 20952  006D56  D7EA               	goto	i2l1042
 20953  006D58  FFFF               	dw	65535	; errata NOP
 20954  006D5A                     __end_ofi2_delay:
 20955                           	opt stack 0
 20956                           tosu	equ	0xFFF
 20957                           tosh	equ	0xFFE
 20958                           tosl	equ	0xFFD
 20959                           pclatu	equ	0xFFB
 20960                           pclath	equ	0xFFA
 20961                           tblptru	equ	0xFF8
 20962                           tblptrh	equ	0xFF7
 20963                           tblptrl	equ	0xFF6
 20964                           tablat	equ	0xFF5
 20965                           prodh	equ	0xFF4
 20966                           prodl	equ	0xFF3
 20967                           intcon	equ	0xFF2
 20968                           indf0	equ	0xFEF
 20969                           postinc0	equ	0xFEE
 20970                           fsr0h	equ	0xFEA
 20971                           fsr0l	equ	0xFE9
 20972                           wreg	equ	0xFE8
 20973                           postdec1	equ	0xFE5
 20974                           fsr1h	equ	0xFE2
 20975                           fsr1l	equ	0xFE1
 20976                           indf2	equ	0xFDF
 20977                           postinc2	equ	0xFDE
 20978                           postdec2	equ	0xFDD
 20979                           fsr2h	equ	0xFDA
 20980                           fsr2l	equ	0xFD9
 20981                           status	equ	0xFD8
 20982                           
 20983 ;; *************** function i2_I2C_Write *****************
 20984 ;; Defined at:
 20985 ;;		line 42 in file "I2C.c"
 20986 ;; Parameters:    Size  Location     Type
 20987 ;;  d               2    1[COMRAM] unsigned int 
 20988 ;; Auto vars:     Size  Location     Type
 20989 ;;		None
 20990 ;; Return value:  Size  Location     Type
 20991 ;;                  1    wreg      void 
 20992 ;; Registers used:
 20993 ;;		wreg, status,2, status,0, cstack
 20994 ;; Tracked objects:
 20995 ;;		On entry : 0/0
 20996 ;;		On exit  : 0/0
 20997 ;;		Unchanged: 0/0
 20998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20999 ;;      Params:         2       0       0       0       0       0       0
 21000 ;;      Locals:         0       0       0       0       0       0       0
 21001 ;;      Temps:          0       0       0       0       0       0       0
 21002 ;;      Totals:         2       0       0       0       0       0       0
 21003 ;;Total ram usage:        2 bytes
 21004 ;; Hardware stack levels used:    1
 21005 ;; Hardware stack levels required when called:    1
 21006 ;; This function calls:
 21007 ;;		i2_I2C_Wait
 21008 ;; This function is called by:
 21009 ;;		i2_getDS1307TimeDate
 21010 ;;		i2_RTC_Init
 21011 ;;		i2_writeEEPROM_ext
 21012 ;; This function uses a non-reentrant model
 21013 ;;
 21014                           
 21015                           	psect	text83
 21016  006B54                     __ptext83:
 21017                           	opt stack 0
 21018  006B54                     i2_I2C_Write:
 21019                           	opt stack 0
 21020  006B54  FFFF               	dw	65535	; assembler added errata NOP
 21021                           
 21022                           ;I2C.c: 43: I2C_Wait();
 21023                           
 21024                           ;incstack = 0
 21025  006B56  ECDD  F035         	call	i2_I2C_Wait	;wreg free
 21026                           
 21027                           ;I2C.c: 44: SSPBUF = d;
 21028  006B5A  C002  FFC9         	movff	i2I2C_Write@d,4041	;volatile
 21029  006B5E  0012               	return		;funcret
 21030  006B60  FFFF               	dw	65535	; errata NOP
 21031  006B62                     __end_ofi2_I2C_Write:
 21032                           	opt stack 0
 21033                           tosu	equ	0xFFF
 21034                           tosh	equ	0xFFE
 21035                           tosl	equ	0xFFD
 21036                           pclatu	equ	0xFFB
 21037                           pclath	equ	0xFFA
 21038                           tblptru	equ	0xFF8
 21039                           tblptrh	equ	0xFF7
 21040                           tblptrl	equ	0xFF6
 21041                           tablat	equ	0xFF5
 21042                           prodh	equ	0xFF4
 21043                           prodl	equ	0xFF3
 21044                           intcon	equ	0xFF2
 21045                           indf0	equ	0xFEF
 21046                           postinc0	equ	0xFEE
 21047                           fsr0h	equ	0xFEA
 21048                           fsr0l	equ	0xFE9
 21049                           wreg	equ	0xFE8
 21050                           postdec1	equ	0xFE5
 21051                           fsr1h	equ	0xFE2
 21052                           fsr1l	equ	0xFE1
 21053                           indf2	equ	0xFDF
 21054                           postinc2	equ	0xFDE
 21055                           postdec2	equ	0xFDD
 21056                           fsr2h	equ	0xFDA
 21057                           fsr2l	equ	0xFD9
 21058                           status	equ	0xFD8
 21059                           
 21060 ;; *************** function i2_I2C_Stop *****************
 21061 ;; Defined at:
 21062 ;;		line 36 in file "I2C.c"
 21063 ;; Parameters:    Size  Location     Type
 21064 ;;		None
 21065 ;; Auto vars:     Size  Location     Type
 21066 ;;		None
 21067 ;; Return value:  Size  Location     Type
 21068 ;;                  1    wreg      void 
 21069 ;; Registers used:
 21070 ;;		wreg, status,2, status,0, cstack
 21071 ;; Tracked objects:
 21072 ;;		On entry : 0/0
 21073 ;;		On exit  : 0/0
 21074 ;;		Unchanged: 0/0
 21075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21076 ;;      Params:         0       0       0       0       0       0       0
 21077 ;;      Locals:         0       0       0       0       0       0       0
 21078 ;;      Temps:          0       0       0       0       0       0       0
 21079 ;;      Totals:         0       0       0       0       0       0       0
 21080 ;;Total ram usage:        0 bytes
 21081 ;; Hardware stack levels used:    1
 21082 ;; Hardware stack levels required when called:    1
 21083 ;; This function calls:
 21084 ;;		i2_I2C_Wait
 21085 ;; This function is called by:
 21086 ;;		i2_getDS1307TimeDate
 21087 ;;		i2_RTC_Init
 21088 ;;		i2_writeEEPROM_ext
 21089 ;; This function uses a non-reentrant model
 21090 ;;
 21091                           
 21092                           	psect	text84
 21093  006B18                     __ptext84:
 21094                           	opt stack 0
 21095  006B18                     i2_I2C_Stop:
 21096                           	opt stack 0
 21097  006B18  FFFF               	dw	65535	; assembler added errata NOP
 21098                           
 21099                           ;I2C.c: 37: I2C_Wait();
 21100                           
 21101                           ;incstack = 0
 21102  006B1A  ECDD  F035         	call	i2_I2C_Wait	;wreg free
 21103                           
 21104                           ;I2C.c: 38: PEN = 1;
 21105  006B1E  84C5               	bsf	4037,2,c	;volatile
 21106  006B20  0012               	return		;funcret
 21107  006B22  FFFF               	dw	65535	; errata NOP
 21108  006B24                     __end_ofi2_I2C_Stop:
 21109                           	opt stack 0
 21110                           tosu	equ	0xFFF
 21111                           tosh	equ	0xFFE
 21112                           tosl	equ	0xFFD
 21113                           pclatu	equ	0xFFB
 21114                           pclath	equ	0xFFA
 21115                           tblptru	equ	0xFF8
 21116                           tblptrh	equ	0xFF7
 21117                           tblptrl	equ	0xFF6
 21118                           tablat	equ	0xFF5
 21119                           prodh	equ	0xFF4
 21120                           prodl	equ	0xFF3
 21121                           intcon	equ	0xFF2
 21122                           indf0	equ	0xFEF
 21123                           postinc0	equ	0xFEE
 21124                           fsr0h	equ	0xFEA
 21125                           fsr0l	equ	0xFE9
 21126                           wreg	equ	0xFE8
 21127                           postdec1	equ	0xFE5
 21128                           fsr1h	equ	0xFE2
 21129                           fsr1l	equ	0xFE1
 21130                           indf2	equ	0xFDF
 21131                           postinc2	equ	0xFDE
 21132                           postdec2	equ	0xFDD
 21133                           fsr2h	equ	0xFDA
 21134                           fsr2l	equ	0xFD9
 21135                           status	equ	0xFD8
 21136                           
 21137 ;; *************** function i2_I2C_Start *****************
 21138 ;; Defined at:
 21139 ;;		line 26 in file "I2C.c"
 21140 ;; Parameters:    Size  Location     Type
 21141 ;;		None
 21142 ;; Auto vars:     Size  Location     Type
 21143 ;;		None
 21144 ;; Return value:  Size  Location     Type
 21145 ;;                  1    wreg      void 
 21146 ;; Registers used:
 21147 ;;		wreg, status,2, status,0, cstack
 21148 ;; Tracked objects:
 21149 ;;		On entry : 0/0
 21150 ;;		On exit  : 0/0
 21151 ;;		Unchanged: 0/0
 21152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21153 ;;      Params:         0       0       0       0       0       0       0
 21154 ;;      Locals:         0       0       0       0       0       0       0
 21155 ;;      Temps:          0       0       0       0       0       0       0
 21156 ;;      Totals:         0       0       0       0       0       0       0
 21157 ;;Total ram usage:        0 bytes
 21158 ;; Hardware stack levels used:    1
 21159 ;; Hardware stack levels required when called:    1
 21160 ;; This function calls:
 21161 ;;		i2_I2C_Wait
 21162 ;; This function is called by:
 21163 ;;		i2_getDS1307TimeDate
 21164 ;;		i2_RTC_Init
 21165 ;;		i2_writeEEPROM_ext
 21166 ;; This function uses a non-reentrant model
 21167 ;;
 21168                           
 21169                           	psect	text85
 21170  006B0C                     __ptext85:
 21171                           	opt stack 0
 21172  006B0C                     i2_I2C_Start:
 21173                           	opt stack 0
 21174  006B0C  FFFF               	dw	65535	; assembler added errata NOP
 21175                           
 21176                           ;I2C.c: 27: I2C_Wait();
 21177                           
 21178                           ;incstack = 0
 21179  006B0E  ECDD  F035         	call	i2_I2C_Wait	;wreg free
 21180                           
 21181                           ;I2C.c: 28: SEN = 1;
 21182  006B12  80C5               	bsf	4037,0,c	;volatile
 21183  006B14  0012               	return		;funcret
 21184  006B16  FFFF               	dw	65535	; errata NOP
 21185  006B18                     __end_ofi2_I2C_Start:
 21186                           	opt stack 0
 21187                           tosu	equ	0xFFF
 21188                           tosh	equ	0xFFE
 21189                           tosl	equ	0xFFD
 21190                           pclatu	equ	0xFFB
 21191                           pclath	equ	0xFFA
 21192                           tblptru	equ	0xFF8
 21193                           tblptrh	equ	0xFF7
 21194                           tblptrl	equ	0xFF6
 21195                           tablat	equ	0xFF5
 21196                           prodh	equ	0xFF4
 21197                           prodl	equ	0xFF3
 21198                           intcon	equ	0xFF2
 21199                           indf0	equ	0xFEF
 21200                           postinc0	equ	0xFEE
 21201                           fsr0h	equ	0xFEA
 21202                           fsr0l	equ	0xFE9
 21203                           wreg	equ	0xFE8
 21204                           postdec1	equ	0xFE5
 21205                           fsr1h	equ	0xFE2
 21206                           fsr1l	equ	0xFE1
 21207                           indf2	equ	0xFDF
 21208                           postinc2	equ	0xFDE
 21209                           postdec2	equ	0xFDD
 21210                           fsr2h	equ	0xFDA
 21211                           fsr2l	equ	0xFD9
 21212                           status	equ	0xFD8
 21213                           
 21214 ;; *************** function i2_I2C_Wait *****************
 21215 ;; Defined at:
 21216 ;;		line 22 in file "I2C.c"
 21217 ;; Parameters:    Size  Location     Type
 21218 ;;		None
 21219 ;; Auto vars:     Size  Location     Type
 21220 ;;		None
 21221 ;; Return value:  Size  Location     Type
 21222 ;;                  1    wreg      void 
 21223 ;; Registers used:
 21224 ;;		wreg, status,2, status,0
 21225 ;; Tracked objects:
 21226 ;;		On entry : 0/0
 21227 ;;		On exit  : 0/0
 21228 ;;		Unchanged: 0/0
 21229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21230 ;;      Params:         0       0       0       0       0       0       0
 21231 ;;      Locals:         0       0       0       0       0       0       0
 21232 ;;      Temps:          1       0       0       0       0       0       0
 21233 ;;      Totals:         1       0       0       0       0       0       0
 21234 ;;Total ram usage:        1 bytes
 21235 ;; Hardware stack levels used:    1
 21236 ;; This function calls:
 21237 ;;		Nothing
 21238 ;; This function is called by:
 21239 ;;		i2_I2C_Start
 21240 ;;		i2_I2C_Restart
 21241 ;;		i2_I2C_Stop
 21242 ;;		i2_I2C_Write
 21243 ;;		i2_I2C_Read
 21244 ;; This function uses a non-reentrant model
 21245 ;;
 21246                           
 21247                           	psect	text86
 21248  006BBA                     __ptext86:
 21249                           	opt stack 0
 21250  006BBA                     i2_I2C_Wait:
 21251                           	opt stack 0
 21252  006BBA  FFFF               	dw	65535	; assembler added errata NOP
 21253                           
 21254                           ;I2C.c: 23: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 21255                           
 21256                           ;incstack = 0
 21257  006BBC  B4C7               	btfsc	4039,2,c	;volatile
 21258  006BBE  D7FD               	goto	i2_I2C_Wait
 21259  006BC0  CFC5 F001          	movff	4037,??i2_I2C_Wait	;volatile
 21260  006BC4  0E1F               	movlw	31
 21261  006BC6  1601               	andwf	??i2_I2C_Wait,f,c
 21262  006BC8  B4D8               	btfsc	status,2,c
 21263  006BCA  0012               	return		;funcret
 21264  006BCC  FFFF               	dw	65535	; assembler added errata NOP
 21265  006BCE  D7F5               	goto	i2_I2C_Wait
 21266  006BD0  FFFF               	dw	65535	; errata NOP
 21267  006BD2                     __end_ofi2_I2C_Wait:
 21268                           	opt stack 0
 21269                           tosu	equ	0xFFF
 21270                           tosh	equ	0xFFE
 21271                           tosl	equ	0xFFD
 21272                           pclatu	equ	0xFFB
 21273                           pclath	equ	0xFFA
 21274                           tblptru	equ	0xFF8
 21275                           tblptrh	equ	0xFF7
 21276                           tblptrl	equ	0xFF6
 21277                           tablat	equ	0xFF5
 21278                           prodh	equ	0xFF4
 21279                           prodl	equ	0xFF3
 21280                           intcon	equ	0xFF2
 21281                           indf0	equ	0xFEF
 21282                           postinc0	equ	0xFEE
 21283                           fsr0h	equ	0xFEA
 21284                           fsr0l	equ	0xFE9
 21285                           wreg	equ	0xFE8
 21286                           postdec1	equ	0xFE5
 21287                           fsr1h	equ	0xFE2
 21288                           fsr1l	equ	0xFE1
 21289                           indf2	equ	0xFDF
 21290                           postinc2	equ	0xFDE
 21291                           postdec2	equ	0xFDD
 21292                           fsr2h	equ	0xFDA
 21293                           fsr2l	equ	0xFD9
 21294                           status	equ	0xFD8
 21295                           
 21296 ;; *************** function _readButtons *****************
 21297 ;; Defined at:
 21298 ;;		line 23 in file "teclado.h"
 21299 ;; Parameters:    Size  Location     Type
 21300 ;;		None
 21301 ;; Auto vars:     Size  Location     Type
 21302 ;;		None
 21303 ;; Return value:  Size  Location     Type
 21304 ;;                  1    wreg      void 
 21305 ;; Registers used:
 21306 ;;		wreg, status,2
 21307 ;; Tracked objects:
 21308 ;;		On entry : 0/0
 21309 ;;		On exit  : 0/0
 21310 ;;		Unchanged: 0/0
 21311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21312 ;;      Params:         0       0       0       0       0       0       0
 21313 ;;      Locals:         0       0       0       0       0       0       0
 21314 ;;      Temps:          0       0       0       0       0       0       0
 21315 ;;      Totals:         0       0       0       0       0       0       0
 21316 ;;Total ram usage:        0 bytes
 21317 ;; Hardware stack levels used:    1
 21318 ;; This function calls:
 21319 ;;		Nothing
 21320 ;; This function is called by:
 21321 ;;		_TIMER
 21322 ;; This function uses a non-reentrant model
 21323 ;;
 21324                           
 21325                           	psect	text87
 21326  00758E                     __ptext87:
 21327                           	opt stack 0
 21328  00758E                     _readButtons:
 21329                           	opt stack 0
 21330  00758E  FFFF               	dw	65535	; assembler added errata NOP
 21331                           
 21332                           ;teclado.h: 24: if (!PORTBbits.RB2) {
 21333                           
 21334                           ;incstack = 0
 21335  007590  B481               	btfsc	3969,2,c	;volatile
 21336  007592  D002               	goto	i2l464
 21337                           
 21338                           ;teclado.h: 25: flag_b_esc = 1;
 21339  007594  0E01               	movlw	1
 21340  007596  D009               	goto	L43
 21341  007598                     i2l464:
 21342  007598  FFFF               	dw	65535	; assembler added errata NOP
 21343  00759A  A481               	btfss	3969,2,c	;volatile
 21344  00759C  D008               	goto	i2l466
 21345  00759E  5060               	movf	_flag_b_esc,w,c
 21346  0075A0  B4D8               	btfsc	status,2,c
 21347  0075A2  D005               	goto	i2l466
 21348                           
 21349                           ;teclado.h: 27: _b_esc = 1;
 21350  0075A4  0E01               	movlw	1
 21351  0075A6  6E5F               	movwf	__b_esc,c
 21352                           
 21353                           ;teclado.h: 28: flag_b_esc = 0;
 21354  0075A8  0E00               	movlw	0
 21355  0075AA                     L43:
 21356  0075AA  FFFF               	dw	65535	; assembler added errata NOP
 21357  0075AC  6E60               	movwf	_flag_b_esc,c
 21358  0075AE                     i2l466:
 21359  0075AE  FFFF               	dw	65535	; assembler added errata NOP
 21360                           
 21361                           ;teclado.h: 29: }
 21362                           ;teclado.h: 31: if (!PORTBbits.RB4) {
 21363  0075B0  B881               	btfsc	3969,4,c	;volatile
 21364  0075B2  D002               	goto	i2l467
 21365                           
 21366                           ;teclado.h: 32: flag_b_menos = 1;
 21367  0075B4  0E01               	movlw	1
 21368  0075B6  D009               	goto	L44
 21369  0075B8                     i2l467:
 21370  0075B8  FFFF               	dw	65535	; assembler added errata NOP
 21371  0075BA  A881               	btfss	3969,4,c	;volatile
 21372  0075BC  D008               	goto	i2l469
 21373  0075BE  505E               	movf	_flag_b_menos,w,c
 21374  0075C0  B4D8               	btfsc	status,2,c
 21375  0075C2  D005               	goto	i2l469
 21376                           
 21377                           ;teclado.h: 34: _b_menos = 1;
 21378  0075C4  0E01               	movlw	1
 21379  0075C6  6E5D               	movwf	__b_menos,c
 21380                           
 21381                           ;teclado.h: 35: flag_b_menos = 0;
 21382  0075C8  0E00               	movlw	0
 21383  0075CA                     L44:
 21384  0075CA  FFFF               	dw	65535	; assembler added errata NOP
 21385  0075CC  6E5E               	movwf	_flag_b_menos,c
 21386  0075CE                     i2l469:
 21387  0075CE  FFFF               	dw	65535	; assembler added errata NOP
 21388                           
 21389                           ;teclado.h: 36: }
 21390                           ;teclado.h: 38: if (!PORTBbits.RB5) {
 21391  0075D0  BA81               	btfsc	3969,5,c	;volatile
 21392  0075D2  D002               	goto	i2l470
 21393                           
 21394                           ;teclado.h: 39: flag_b_mais = 1;
 21395  0075D4  0E01               	movlw	1
 21396  0075D6  D009               	goto	L45
 21397  0075D8                     i2l470:
 21398  0075D8  FFFF               	dw	65535	; assembler added errata NOP
 21399  0075DA  AA81               	btfss	3969,5,c	;volatile
 21400  0075DC  D008               	goto	i2l472
 21401  0075DE  505C               	movf	_flag_b_mais,w,c
 21402  0075E0  B4D8               	btfsc	status,2,c
 21403  0075E2  D005               	goto	i2l472
 21404                           
 21405                           ;teclado.h: 41: _b_mais = 1;
 21406  0075E4  0E01               	movlw	1
 21407  0075E6  6E5B               	movwf	__b_mais,c
 21408                           
 21409                           ;teclado.h: 42: flag_b_mais = 0;
 21410  0075E8  0E00               	movlw	0
 21411  0075EA                     L45:
 21412  0075EA  FFFF               	dw	65535	; assembler added errata NOP
 21413  0075EC  6E5C               	movwf	_flag_b_mais,c
 21414  0075EE                     i2l472:
 21415  0075EE  FFFF               	dw	65535	; assembler added errata NOP
 21416                           
 21417                           ;teclado.h: 43: }
 21418                           ;teclado.h: 45: if (!PORTBbits.RB3) {
 21419  0075F0  B681               	btfsc	3969,3,c	;volatile
 21420  0075F2  D002               	goto	i2l473
 21421                           
 21422                           ;teclado.h: 46: flag_b_ok = 1;
 21423  0075F4  0E01               	movlw	1
 21424  0075F6  D009               	goto	L46
 21425  0075F8                     i2l473:
 21426  0075F8  FFFF               	dw	65535	; assembler added errata NOP
 21427  0075FA  A681               	btfss	3969,3,c	;volatile
 21428  0075FC  D008               	goto	i2l475
 21429  0075FE  505A               	movf	_flag_b_ok,w,c
 21430  007600  B4D8               	btfsc	status,2,c
 21431  007602  D005               	goto	i2l475
 21432                           
 21433                           ;teclado.h: 48: _b_ok = 1;
 21434  007604  0E01               	movlw	1
 21435  007606  6E59               	movwf	__b_ok,c
 21436                           
 21437                           ;teclado.h: 49: flag_b_ok = 0;
 21438  007608  0E00               	movlw	0
 21439  00760A                     L46:
 21440  00760A  FFFF               	dw	65535	; assembler added errata NOP
 21441  00760C  6E5A               	movwf	_flag_b_ok,c
 21442  00760E                     i2l475:
 21443  00760E  FFFF               	dw	65535	; assembler added errata NOP
 21444  007610  0012               	return		;funcret
 21445  007612  FFFF               	dw	65535	; errata NOP
 21446  007614                     __end_of_readButtons:
 21447                           	opt stack 0
 21448                           tosu	equ	0xFFF
 21449                           tosh	equ	0xFFE
 21450                           tosl	equ	0xFFD
 21451                           pclatu	equ	0xFFB
 21452                           pclath	equ	0xFFA
 21453                           tblptru	equ	0xFF8
 21454                           tblptrh	equ	0xFF7
 21455                           tblptrl	equ	0xFF6
 21456                           tablat	equ	0xFF5
 21457                           prodh	equ	0xFF4
 21458                           prodl	equ	0xFF3
 21459                           intcon	equ	0xFF2
 21460                           indf0	equ	0xFEF
 21461                           postinc0	equ	0xFEE
 21462                           fsr0h	equ	0xFEA
 21463                           fsr0l	equ	0xFE9
 21464                           wreg	equ	0xFE8
 21465                           postdec1	equ	0xFE5
 21466                           fsr1h	equ	0xFE2
 21467                           fsr1l	equ	0xFE1
 21468                           indf2	equ	0xFDF
 21469                           postinc2	equ	0xFDE
 21470                           postdec2	equ	0xFDD
 21471                           fsr2h	equ	0xFDA
 21472                           fsr2l	equ	0xFD9
 21473                           status	equ	0xFD8
 21474                           
 21475 ;; *************** function _lerTransdutor *****************
 21476 ;; Defined at:
 21477 ;;		line 8 in file "transdutor.h"
 21478 ;; Parameters:    Size  Location     Type
 21479 ;;		None
 21480 ;; Auto vars:     Size  Location     Type
 21481 ;;  tensao          3   45[COMRAM] float 
 21482 ;;  _pressao        3   42[COMRAM] float 
 21483 ;;  i               1   41[COMRAM] unsigned char 
 21484 ;; Return value:  Size  Location     Type
 21485 ;;                  1    wreg      void 
 21486 ;; Registers used:
 21487 ;;		wreg, status,2, status,0, cstack
 21488 ;; Tracked objects:
 21489 ;;		On entry : 0/0
 21490 ;;		On exit  : 0/0
 21491 ;;		Unchanged: 0/0
 21492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21493 ;;      Params:         0       0       0       0       0       0       0
 21494 ;;      Locals:         7       0       0       0       0       0       0
 21495 ;;      Temps:          0       0       0       0       0       0       0
 21496 ;;      Totals:         7       0       0       0       0       0       0
 21497 ;;Total ram usage:        7 bytes
 21498 ;; Hardware stack levels used:    1
 21499 ;; Hardware stack levels required when called:    2
 21500 ;; This function calls:
 21501 ;;		___ftadd
 21502 ;;		___ftdiv
 21503 ;;		___ftge
 21504 ;;		___ftmul
 21505 ;;		___fttol
 21506 ;;		___lwtoft
 21507 ;;		_readADC
 21508 ;; This function is called by:
 21509 ;;		_TIMER
 21510 ;; This function uses a non-reentrant model
 21511 ;;
 21512                           
 21513                           	psect	text88
 21514  001BD0                     __ptext88:
 21515                           	opt stack 0
 21516  001BD0                     _lerTransdutor:
 21517                           	opt stack 0
 21518  001BD0  FFFF               	dw	65535	; assembler added errata NOP
 21519                           
 21520                           ;transdutor.h: 9: char i = 0;
 21521                           
 21522                           ;incstack = 0
 21523  001BD2  0E00               	movlw	0
 21524  001BD4  6E2A               	movwf	lerTransdutor@i,c
 21525                           
 21526                           ;transdutor.h: 10: float tensao = 0, _pressao = 0;
 21527  001BD6  0E00               	movlw	0
 21528  001BD8  6E2E               	movwf	lerTransdutor@tensao,c
 21529  001BDA  0E00               	movlw	0
 21530  001BDC  6E2F               	movwf	lerTransdutor@tensao+1,c
 21531  001BDE  0E00               	movlw	0
 21532  001BE0  6E30               	movwf	lerTransdutor@tensao+2,c
 21533  001BE2  0E00               	movlw	0
 21534  001BE4  6E2B               	movwf	lerTransdutor@_pressao,c
 21535  001BE6  0E00               	movlw	0
 21536  001BE8  6E2C               	movwf	lerTransdutor@_pressao+1,c
 21537  001BEA  0E00               	movlw	0
 21538  001BEC  6E2D               	movwf	lerTransdutor@_pressao+2,c
 21539                           
 21540                           ;transdutor.h: 11: for (i = 0; i < 9; i++) {
 21541  001BEE  0E00               	movlw	0
 21542  001BF0  6E2A               	movwf	lerTransdutor@i,c
 21543  001BF2                     i2l6489:
 21544  001BF2  FFFF               	dw	65535	; assembler added errata NOP
 21545  001BF4  0E08               	movlw	8
 21546  001BF6  642A               	cpfsgt	lerTransdutor@i,c
 21547  001BF8  D001               	goto	i2l236
 21548  001BFA  D02D               	goto	i2u696_40
 21549  001BFC                     i2l236:
 21550  001BFC  FFFF               	dw	65535	; assembler added errata NOP
 21551                           
 21552                           ;transdutor.h: 12: tensao += readADC()*0.004887586;
 21553  001BFE  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 21554  001C02  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 21555  001C06  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 21556  001C0A  0E28               	movlw	40
 21557  001C0C  6E0F               	movwf	___ftmul@f2,c
 21558  001C0E  0EA0               	movlw	160
 21559  001C10  6E10               	movwf	___ftmul@f2+1,c
 21560  001C12  0E3B               	movlw	59
 21561  001C14  6E11               	movwf	___ftmul@f2+2,c
 21562  001C16  EC28  F036         	call	_readADC	;wreg free
 21563  001C1A  C001  F009         	movff	?_readADC,___lwtoft@c
 21564  001C1E  C002  F00A         	movff	?_readADC+1,___lwtoft@c+1
 21565  001C22  EC14  F036         	call	___lwtoft	;wreg free
 21566  001C26  C009  F00C         	movff	?___lwtoft,___ftmul@f1
 21567  001C2A  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
 21568  001C2E  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
 21569  001C32  EC04  F01B         	call	___ftmul	;wreg free
 21570  001C36  C00C  F01E         	movff	?___ftmul,___ftadd@f2
 21571  001C3A  C00D  F01F         	movff	?___ftmul+1,___ftadd@f2+1
 21572  001C3E  C00E  F020         	movff	?___ftmul+2,___ftadd@f2+2
 21573  001C42  EC31  F014         	call	___ftadd	;wreg free
 21574  001C46  C01B  F02E         	movff	?___ftadd,lerTransdutor@tensao
 21575  001C4A  C01C  F02F         	movff	?___ftadd+1,lerTransdutor@tensao+1
 21576  001C4E  C01D  F030         	movff	?___ftadd+2,lerTransdutor@tensao+2
 21577  001C52  2A2A               	incf	lerTransdutor@i,f,c
 21578  001C54  D7CE               	goto	i2l6489
 21579  001C56                     i2u696_40:
 21580  001C56  FFFF               	dw	65535	; assembler added errata NOP
 21581                           
 21582                           ;transdutor.h: 13: }
 21583                           ;transdutor.h: 14: tensao = tensao / 10;
 21584  001C58  C02E  F01B         	movff	lerTransdutor@tensao,___ftdiv@f1
 21585  001C5C  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftdiv@f1+1
 21586  001C60  C030  F01D         	movff	lerTransdutor@tensao+2,___ftdiv@f1+2
 21587  001C64  0E00               	movlw	0
 21588  001C66  6E1E               	movwf	___ftdiv@f2,c
 21589  001C68  0E20               	movlw	32
 21590  001C6A  6E1F               	movwf	___ftdiv@f2+1,c
 21591  001C6C  0E41               	movlw	65
 21592  001C6E  6E20               	movwf	___ftdiv@f2+2,c
 21593  001C70  EC6A  F01C         	call	___ftdiv	;wreg free
 21594  001C74  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 21595  001C78  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 21596  001C7C  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 21597                           
 21598                           ;transdutor.h: 15: _tensao += (float) tensao;
 21599  001C80  C100  F01B         	movff	__tensao,___ftadd@f1
 21600  001C84  C101  F01C         	movff	__tensao+1,___ftadd@f1+1
 21601  001C88  C102  F01D         	movff	__tensao+2,___ftadd@f1+2
 21602  001C8C  C02E  F01E         	movff	lerTransdutor@tensao,___ftadd@f2
 21603  001C90  C02F  F01F         	movff	lerTransdutor@tensao+1,___ftadd@f2+1
 21604  001C94  C030  F020         	movff	lerTransdutor@tensao+2,___ftadd@f2+2
 21605  001C98  EC31  F014         	call	___ftadd	;wreg free
 21606  001C9C  C01B  F100         	movff	?___ftadd,__tensao
 21607  001CA0  C01C  F101         	movff	?___ftadd+1,__tensao+1
 21608  001CA4  C01D  F102         	movff	?___ftadd+2,__tensao+2
 21609                           
 21610                           ;transdutor.h: 16: qtd_leitura++;
 21611  001CA8  2A6A               	incf	_qtd_leitura,f,c
 21612                           
 21613                           ;transdutor.h: 18: if (tensao < 0.3) {
 21614  001CAA  C02E  F001         	movff	lerTransdutor@tensao,___ftge@ff1
 21615  001CAE  C02F  F002         	movff	lerTransdutor@tensao+1,___ftge@ff1+1
 21616  001CB2  C030  F003         	movff	lerTransdutor@tensao+2,___ftge@ff1+2
 21617  001CB6  0E9A               	movlw	154
 21618  001CB8  6E04               	movwf	___ftge@ff2,c
 21619  001CBA  0E99               	movlw	153
 21620  001CBC  6E05               	movwf	___ftge@ff2+1,c
 21621  001CBE  0E3E               	movlw	62
 21622  001CC0  6E06               	movwf	___ftge@ff2+2,c
 21623  001CC2  EC41  F01F         	call	___ftge	;wreg free
 21624  001CC6  B0D8               	btfsc	status,0,c
 21625  001CC8  D008               	goto	i2l238
 21626                           
 21627                           ;transdutor.h: 19: pressao = -10;
 21628  001CCA  0EFF               	movlw	255
 21629  001CCC  0100               	movlb	0	; () banked
 21630  001CCE  6FFA               	movwf	(_pressao+1)& (0+255),b
 21631  001CD0  0EF6               	movlw	246
 21632  001CD2  6FF9               	movwf	_pressao& (0+255),b
 21633                           
 21634                           ;transdutor.h: 20: flagErroTransdutor = 1;
 21635  001CD4  0E01               	movlw	1
 21636  001CD6  6E71               	movwf	_flagErroTransdutor,c
 21637  001CD8  D018               	goto	L47
 21638  001CDA                     i2l238:
 21639  001CDA  FFFF               	dw	65535	; assembler added errata NOP
 21640                           
 21641                           ; BSR set to: 0
 21642  001CDC  0E00               	movlw	0
 21643  001CDE  6E01               	movwf	___ftge@ff1,c
 21644  001CE0  0E90               	movlw	144
 21645  001CE2  6E02               	movwf	___ftge@ff1+1,c
 21646  001CE4  0E40               	movlw	64
 21647  001CE6  6E03               	movwf	___ftge@ff1+2,c
 21648  001CE8  C02E  F004         	movff	lerTransdutor@tensao,___ftge@ff2
 21649  001CEC  C02F  F005         	movff	lerTransdutor@tensao+1,___ftge@ff2+1
 21650  001CF0  C030  F006         	movff	lerTransdutor@tensao+2,___ftge@ff2+2
 21651  001CF4  EC41  F01F         	call	___ftge	;wreg free
 21652  001CF8  B0D8               	btfsc	status,0,c
 21653  001CFA  D00B               	goto	i2l240
 21654                           
 21655                           ;transdutor.h: 23: flagErroTransdutor = 1;
 21656  001CFC  0E01               	movlw	1
 21657  001CFE  6E71               	movwf	_flagErroTransdutor,c
 21658                           
 21659                           ;transdutor.h: 24: pressao = 99;
 21660  001D00  0E00               	movlw	0
 21661  001D02  0100               	movlb	0	; () banked
 21662  001D04  6FFA               	movwf	(_pressao+1)& (0+255),b
 21663  001D06  0E63               	movlw	99
 21664  001D08  6FF9               	movwf	_pressao& (0+255),b
 21665  001D0A                     L47:
 21666  001D0A  FFFF               	dw	65535	; assembler added errata NOP
 21667                           
 21668                           ;transdutor.h: 25: timerIntervaloLigarBomba = 5;
 21669  001D0C  0E05               	movlw	5
 21670  001D0E  6FF5               	movwf	_timerIntervaloLigarBomba& (0+255),b
 21671                           
 21672                           ;transdutor.h: 26: } else if (qtd_leitura >= 6) {
 21673  001D10  D07C               	goto	i2l242
 21674  001D12                     i2l240:
 21675  001D12  FFFF               	dw	65535	; assembler added errata NOP
 21676                           
 21677                           ; BSR set to: 0
 21678  001D14  0E05               	movlw	5
 21679  001D16  646A               	cpfsgt	_qtd_leitura,c
 21680  001D18  D078               	goto	i2l242
 21681                           
 21682                           ;transdutor.h: 27: flagErroTransdutor = 0;
 21683  001D1A  0E00               	movlw	0
 21684  001D1C  6E71               	movwf	_flagErroTransdutor,c
 21685                           
 21686                           ;transdutor.h: 28: qtd_leitura = 0;
 21687  001D1E  0E00               	movlw	0
 21688  001D20  6E6A               	movwf	_qtd_leitura,c
 21689                           
 21690                           ;transdutor.h: 29: tensao = (float) (_tensao / 6);
 21691  001D22  C100  F01B         	movff	__tensao,___ftdiv@f1
 21692  001D26  C101  F01C         	movff	__tensao+1,___ftdiv@f1+1
 21693  001D2A  C102  F01D         	movff	__tensao+2,___ftdiv@f1+2
 21694  001D2E  0E00               	movlw	0
 21695  001D30  6E1E               	movwf	___ftdiv@f2,c
 21696  001D32  0EC0               	movlw	192
 21697  001D34  6E1F               	movwf	___ftdiv@f2+1,c
 21698  001D36  0E40               	movlw	64
 21699  001D38  6E20               	movwf	___ftdiv@f2+2,c
 21700  001D3A  EC6A  F01C         	call	___ftdiv	;wreg free
 21701  001D3E  C01B  F02E         	movff	?___ftdiv,lerTransdutor@tensao
 21702  001D42  C01C  F02F         	movff	?___ftdiv+1,lerTransdutor@tensao+1
 21703  001D46  C01D  F030         	movff	?___ftdiv+2,lerTransdutor@tensao+2
 21704                           
 21705                           ;transdutor.h: 30: _tensao = 0;
 21706  001D4A  0E00               	movlw	0
 21707  001D4C  0101               	movlb	1	; () banked
 21708  001D4E  6F00               	movwf	__tensao& (0+255),b
 21709  001D50  0E00               	movlw	0
 21710  001D52  6F01               	movwf	(__tensao+1)& (0+255),b
 21711  001D54  0E00               	movlw	0
 21712  001D56  6F02               	movwf	(__tensao+2)& (0+255),b
 21713                           
 21714                           ;transdutor.h: 31: _pressao = tensao - 0.5;
 21715  001D58  C02E  F01B         	movff	lerTransdutor@tensao,___ftadd@f1
 21716  001D5C  C02F  F01C         	movff	lerTransdutor@tensao+1,___ftadd@f1+1
 21717  001D60  C030  F01D         	movff	lerTransdutor@tensao+2,___ftadd@f1+2
 21718  001D64  0E00               	movlw	0
 21719  001D66  6E1E               	movwf	___ftadd@f2,c
 21720  001D68  0E00               	movlw	0
 21721  001D6A  6E1F               	movwf	___ftadd@f2+1,c
 21722  001D6C  0EBF               	movlw	191
 21723  001D6E  6E20               	movwf	___ftadd@f2+2,c
 21724  001D70  EC31  F014         	call	___ftadd	;wreg free
 21725  001D74  C01B  F02B         	movff	?___ftadd,lerTransdutor@_pressao
 21726  001D78  C01C  F02C         	movff	?___ftadd+1,lerTransdutor@_pressao+1
 21727  001D7C  C01D  F02D         	movff	?___ftadd+2,lerTransdutor@_pressao+2
 21728                           
 21729                           ;transdutor.h: 32: _pressao = _pressao * 10 / 4;
 21730  001D80  0E00               	movlw	0
 21731  001D82  6E0F               	movwf	___ftmul@f2,c
 21732  001D84  0E20               	movlw	32
 21733  001D86  6E10               	movwf	___ftmul@f2+1,c
 21734  001D88  0E41               	movlw	65
 21735  001D8A  6E11               	movwf	___ftmul@f2+2,c
 21736  001D8C  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 21737  001D90  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 21738  001D94  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 21739  001D98  EC04  F01B         	call	___ftmul	;wreg free
 21740  001D9C  C00C  F01B         	movff	?___ftmul,___ftdiv@f1
 21741  001DA0  C00D  F01C         	movff	?___ftmul+1,___ftdiv@f1+1
 21742  001DA4  C00E  F01D         	movff	?___ftmul+2,___ftdiv@f1+2
 21743  001DA8  0E00               	movlw	0
 21744  001DAA  6E1E               	movwf	___ftdiv@f2,c
 21745  001DAC  0E80               	movlw	128
 21746  001DAE  6E1F               	movwf	___ftdiv@f2+1,c
 21747  001DB0  0E40               	movlw	64
 21748  001DB2  6E20               	movwf	___ftdiv@f2+2,c
 21749  001DB4  EC6A  F01C         	call	___ftdiv	;wreg free
 21750  001DB8  C01B  F02B         	movff	?___ftdiv,lerTransdutor@_pressao
 21751  001DBC  C01C  F02C         	movff	?___ftdiv+1,lerTransdutor@_pressao+1
 21752  001DC0  C01D  F02D         	movff	?___ftdiv+2,lerTransdutor@_pressao+2
 21753                           
 21754                           ;transdutor.h: 33: if (_pressao < 0) {
 21755  001DC4  AE2D               	btfss	lerTransdutor@_pressao+2,7,c
 21756  001DC6  D006               	goto	i2l243
 21757                           
 21758                           ;transdutor.h: 34: _pressao = 0;
 21759  001DC8  0E00               	movlw	0
 21760  001DCA  6E2B               	movwf	lerTransdutor@_pressao,c
 21761  001DCC  0E00               	movlw	0
 21762  001DCE  6E2C               	movwf	lerTransdutor@_pressao+1,c
 21763  001DD0  0E00               	movlw	0
 21764  001DD2  6E2D               	movwf	lerTransdutor@_pressao+2,c
 21765  001DD4                     i2l243:
 21766  001DD4  FFFF               	dw	65535	; assembler added errata NOP
 21767                           
 21768                           ;transdutor.h: 35: }
 21769                           ;transdutor.h: 36: pressao = _pressao * 10;
 21770  001DD6  0E00               	movlw	0
 21771  001DD8  6E0F               	movwf	___ftmul@f2,c
 21772  001DDA  0E20               	movlw	32
 21773  001DDC  6E10               	movwf	___ftmul@f2+1,c
 21774  001DDE  0E41               	movlw	65
 21775  001DE0  6E11               	movwf	___ftmul@f2+2,c
 21776  001DE2  C02B  F00C         	movff	lerTransdutor@_pressao,___ftmul@f1
 21777  001DE6  C02C  F00D         	movff	lerTransdutor@_pressao+1,___ftmul@f1+1
 21778  001DEA  C02D  F00E         	movff	lerTransdutor@_pressao+2,___ftmul@f1+2
 21779  001DEE  EC04  F01B         	call	___ftmul	;wreg free
 21780  001DF2  C00C  F01B         	movff	?___ftmul,___fttol@f1
 21781  001DF6  C00D  F01C         	movff	?___ftmul+1,___fttol@f1+1
 21782  001DFA  C00E  F01D         	movff	?___ftmul+2,___fttol@f1+2
 21783  001DFE  ECF6  F01B         	call	___fttol	;wreg free
 21784  001E02  C01B  F0F9         	movff	?___fttol,_pressao
 21785  001E06  C01C  F0FA         	movff	?___fttol+1,_pressao+1
 21786  001E0A                     i2l242:
 21787  001E0A  FFFF               	dw	65535	; assembler added errata NOP
 21788  001E0C  0012               	return		;funcret
 21789  001E0E  FFFF               	dw	65535	; errata NOP
 21790  001E10                     __end_of_lerTransdutor:
 21791                           	opt stack 0
 21792                           tosu	equ	0xFFF
 21793                           tosh	equ	0xFFE
 21794                           tosl	equ	0xFFD
 21795                           pclatu	equ	0xFFB
 21796                           pclath	equ	0xFFA
 21797                           tblptru	equ	0xFF8
 21798                           tblptrh	equ	0xFF7
 21799                           tblptrl	equ	0xFF6
 21800                           tablat	equ	0xFF5
 21801                           prodh	equ	0xFF4
 21802                           prodl	equ	0xFF3
 21803                           intcon	equ	0xFF2
 21804                           indf0	equ	0xFEF
 21805                           postinc0	equ	0xFEE
 21806                           fsr0h	equ	0xFEA
 21807                           fsr0l	equ	0xFE9
 21808                           wreg	equ	0xFE8
 21809                           postdec1	equ	0xFE5
 21810                           fsr1h	equ	0xFE2
 21811                           fsr1l	equ	0xFE1
 21812                           indf2	equ	0xFDF
 21813                           postinc2	equ	0xFDE
 21814                           postdec2	equ	0xFDD
 21815                           fsr2h	equ	0xFDA
 21816                           fsr2l	equ	0xFD9
 21817                           status	equ	0xFD8
 21818                           
 21819 ;; *************** function _readADC *****************
 21820 ;; Defined at:
 21821 ;;		line 8 in file "adc.h"
 21822 ;; Parameters:    Size  Location     Type
 21823 ;;		None
 21824 ;; Auto vars:     Size  Location     Type
 21825 ;;		None
 21826 ;; Return value:  Size  Location     Type
 21827 ;;                  2    0[COMRAM] unsigned int 
 21828 ;; Registers used:
 21829 ;;		wreg, status,2, status,0
 21830 ;; Tracked objects:
 21831 ;;		On entry : 0/0
 21832 ;;		On exit  : 0/0
 21833 ;;		Unchanged: 0/0
 21834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21835 ;;      Params:         2       0       0       0       0       0       0
 21836 ;;      Locals:         0       0       0       0       0       0       0
 21837 ;;      Temps:          2       0       0       0       0       0       0
 21838 ;;      Totals:         4       0       0       0       0       0       0
 21839 ;;Total ram usage:        4 bytes
 21840 ;; Hardware stack levels used:    1
 21841 ;; This function calls:
 21842 ;;		Nothing
 21843 ;; This function is called by:
 21844 ;;		_lerTransdutor
 21845 ;; This function uses a non-reentrant model
 21846 ;;
 21847                           
 21848                           	psect	text89
 21849  006C50                     __ptext89:
 21850                           	opt stack 0
 21851  006C50                     _readADC:
 21852                           	opt stack 0
 21853  006C50  FFFF               	dw	65535	; assembler added errata NOP
 21854                           
 21855                           ;adc.h: 9: ADCON0bits.GO = 1;
 21856                           
 21857                           ;incstack = 0
 21858  006C52  84C2               	bsf	4034,2,c	;volatile
 21859                           
 21860                           ;adc.h: 10: _delay((unsigned long)((50)*(8000000/4000000.0)));
 21861  006C54  0E19               	movlw	25
 21862  006C56                     i2u947_47:
 21863  006C56  FFFF               	dw	65535	; errata NOP
 21864  006C58  2EE8               	decfsz	wreg,f,c
 21865  006C5A  D7FD               	bra	i2u947_47
 21866  006C5C  FFFF               	dw	65535	; assembler added errata NOP
 21867  006C5E  A4C2               	btfss	4034,2,c	;volatile
 21868  006C60  D7FD               	goto	i2l231
 21869                           
 21870                           ;adc.h: 12: }
 21871                           ;adc.h: 13: return((ADRESH<<8)+ ADRESL);
 21872  006C62  50C4               	movf	4036,w,c	;volatile
 21873  006C64  6E04               	movwf	(??_readADC+1)& (0+255),c
 21874  006C66  6A03               	clrf	??_readADC& (0+255),c
 21875  006C68  50C3               	movf	4035,w,c	;volatile
 21876  006C6A  2403               	addwf	??_readADC,w,c
 21877  006C6C  6E01               	movwf	?_readADC,c
 21878  006C6E  0E00               	movlw	0
 21879  006C70  2004               	addwfc	??_readADC+1,w,c
 21880  006C72  6E02               	movwf	?_readADC+1,c
 21881  006C74  0012               	return		;funcret
 21882  006C76  FFFF               	dw	65535	; errata NOP
 21883  006C78                     __end_of_readADC:
 21884                           	opt stack 0
 21885                           tosu	equ	0xFFF
 21886                           tosh	equ	0xFFE
 21887                           tosl	equ	0xFFD
 21888                           pclatu	equ	0xFFB
 21889                           pclath	equ	0xFFA
 21890                           tblptru	equ	0xFF8
 21891                           tblptrh	equ	0xFF7
 21892                           tblptrl	equ	0xFF6
 21893                           tablat	equ	0xFF5
 21894                           prodh	equ	0xFF4
 21895                           prodl	equ	0xFF3
 21896                           intcon	equ	0xFF2
 21897                           indf0	equ	0xFEF
 21898                           postinc0	equ	0xFEE
 21899                           fsr0h	equ	0xFEA
 21900                           fsr0l	equ	0xFE9
 21901                           wreg	equ	0xFE8
 21902                           postdec1	equ	0xFE5
 21903                           fsr1h	equ	0xFE2
 21904                           fsr1l	equ	0xFE1
 21905                           indf2	equ	0xFDF
 21906                           postinc2	equ	0xFDE
 21907                           postdec2	equ	0xFDD
 21908                           fsr2h	equ	0xFDA
 21909                           fsr2l	equ	0xFD9
 21910                           status	equ	0xFD8
 21911                           
 21912 ;; *************** function ___lwtoft *****************
 21913 ;; Defined at:
 21914 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 21915 ;; Parameters:    Size  Location     Type
 21916 ;;  c               2    8[COMRAM] unsigned int 
 21917 ;; Auto vars:     Size  Location     Type
 21918 ;;		None
 21919 ;; Return value:  Size  Location     Type
 21920 ;;                  3    8[COMRAM] float 
 21921 ;; Registers used:
 21922 ;;		wreg, status,2, status,0, cstack
 21923 ;; Tracked objects:
 21924 ;;		On entry : 0/0
 21925 ;;		On exit  : 0/0
 21926 ;;		Unchanged: 0/0
 21927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21928 ;;      Params:         3       0       0       0       0       0       0
 21929 ;;      Locals:         0       0       0       0       0       0       0
 21930 ;;      Temps:          0       0       0       0       0       0       0
 21931 ;;      Totals:         3       0       0       0       0       0       0
 21932 ;;Total ram usage:        3 bytes
 21933 ;; Hardware stack levels used:    1
 21934 ;; Hardware stack levels required when called:    1
 21935 ;; This function calls:
 21936 ;;		___ftpack
 21937 ;; This function is called by:
 21938 ;;		_lerTransdutor
 21939 ;; This function uses a non-reentrant model
 21940 ;;
 21941                           
 21942                           	psect	text90
 21943  006C28                     __ptext90:
 21944                           	opt stack 0
 21945  006C28                     ___lwtoft:
 21946                           	opt stack 0
 21947  006C28  FFFF               	dw	65535	; assembler added errata NOP
 21948                           
 21949                           ;incstack = 0
 21950  006C2A  C009  F001         	movff	___lwtoft@c,___ftpack@arg
 21951  006C2E  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 21952  006C32  6A03               	clrf	___ftpack@arg+2,c
 21953  006C34  0E8E               	movlw	142
 21954  006C36  6E04               	movwf	___ftpack@exp,c
 21955  006C38  0E00               	movlw	0
 21956  006C3A  6E05               	movwf	___ftpack@sign,c
 21957  006C3C  ECDF  F01E         	call	___ftpack	;wreg free
 21958  006C40  C001  F009         	movff	?___ftpack,?___lwtoft
 21959  006C44  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
 21960  006C48  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
 21961  006C4C  0012               	return		;funcret
 21962  006C4E  FFFF               	dw	65535	; errata NOP
 21963  006C50                     __end_of___lwtoft:
 21964                           	opt stack 0
 21965                           tosu	equ	0xFFF
 21966                           tosh	equ	0xFFE
 21967                           tosl	equ	0xFFD
 21968                           pclatu	equ	0xFFB
 21969                           pclath	equ	0xFFA
 21970                           tblptru	equ	0xFF8
 21971                           tblptrh	equ	0xFF7
 21972                           tblptrl	equ	0xFF6
 21973                           tablat	equ	0xFF5
 21974                           prodh	equ	0xFF4
 21975                           prodl	equ	0xFF3
 21976                           intcon	equ	0xFF2
 21977                           indf0	equ	0xFEF
 21978                           postinc0	equ	0xFEE
 21979                           fsr0h	equ	0xFEA
 21980                           fsr0l	equ	0xFE9
 21981                           wreg	equ	0xFE8
 21982                           postdec1	equ	0xFE5
 21983                           fsr1h	equ	0xFE2
 21984                           fsr1l	equ	0xFE1
 21985                           indf2	equ	0xFDF
 21986                           postinc2	equ	0xFDE
 21987                           postdec2	equ	0xFDD
 21988                           fsr2h	equ	0xFDA
 21989                           fsr2l	equ	0xFD9
 21990                           status	equ	0xFD8
 21991                           
 21992 ;; *************** function ___fttol *****************
 21993 ;; Defined at:
 21994 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 21995 ;; Parameters:    Size  Location     Type
 21996 ;;  f1              3   26[COMRAM] float 
 21997 ;; Auto vars:     Size  Location     Type
 21998 ;;  lval            4   36[COMRAM] unsigned long 
 21999 ;;  exp1            1   40[COMRAM] unsigned char 
 22000 ;;  sign1           1   35[COMRAM] unsigned char 
 22001 ;; Return value:  Size  Location     Type
 22002 ;;                  4   26[COMRAM] long 
 22003 ;; Registers used:
 22004 ;;		wreg, status,2, status,0
 22005 ;; Tracked objects:
 22006 ;;		On entry : 0/0
 22007 ;;		On exit  : 0/0
 22008 ;;		Unchanged: 0/0
 22009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22010 ;;      Params:         4       0       0       0       0       0       0
 22011 ;;      Locals:         6       0       0       0       0       0       0
 22012 ;;      Temps:          5       0       0       0       0       0       0
 22013 ;;      Totals:        15       0       0       0       0       0       0
 22014 ;;Total ram usage:       15 bytes
 22015 ;; Hardware stack levels used:    1
 22016 ;; This function calls:
 22017 ;;		Nothing
 22018 ;; This function is called by:
 22019 ;;		_lerTransdutor
 22020 ;; This function uses a non-reentrant model
 22021 ;;
 22022                           
 22023                           	psect	text91
 22024  0037EC                     __ptext91:
 22025                           	opt stack 0
 22026  0037EC                     ___fttol:
 22027                           	opt stack 0
 22028  0037EC  FFFF               	dw	65535	; assembler added errata NOP
 22029                           
 22030                           ;incstack = 0
 22031  0037EE  C01D  F01F         	movff	___fttol@f1+2,??___fttol
 22032  0037F2  6A20               	clrf	(??___fttol+1)& (0+255),c
 22033  0037F4  6A21               	clrf	(??___fttol+2)& (0+255),c
 22034  0037F6  341C               	rlcf	___fttol@f1+1,w,c
 22035  0037F8  361F               	rlcf	??___fttol& (0+255),f,c
 22036  0037FA  E301               	bnc	u684_41
 22037  0037FC  8020               	bsf	(??___fttol+1)& (0+255),0,c
 22038  0037FE                     u684_41:
 22039  0037FE  501F               	movf	??___fttol,w,c
 22040  003800  6E29               	movwf	___fttol@exp1,c
 22041  003802  5029               	movf	___fttol@exp1,w,c
 22042  003804  B4D8               	btfsc	status,2,c
 22043  003806  D039               	goto	i2u689_40
 22044  003808  0E17               	movlw	23
 22045  00380A  6E1F               	movwf	??___fttol& (0+255),c
 22046  00380C  C01B  F020         	movff	___fttol@f1,??___fttol+1
 22047  003810  C01C  F021         	movff	___fttol@f1+1,??___fttol+2
 22048  003814  C01D  F022         	movff	___fttol@f1+2,??___fttol+3
 22049  003818  281F               	incf	??___fttol,w,c
 22050  00381A  6E23               	movwf	(??___fttol+4)& (0+255),c
 22051  00381C  D005               	goto	i2u686_40
 22052  00381E                     i2u686_45:
 22053  00381E  FFFF               	dw	65535	; assembler added errata NOP
 22054  003820  90D8               	bcf	status,0,c
 22055  003822  3222               	rrcf	??___fttol+3,f,c
 22056  003824  3221               	rrcf	??___fttol+2,f,c
 22057  003826  3220               	rrcf	??___fttol+1,f,c
 22058  003828                     i2u686_40:
 22059  003828  FFFF               	dw	65535	; assembler added errata NOP
 22060  00382A  2E23               	decfsz	(??___fttol+4)& (0+255),f,c
 22061  00382C  D7F8               	goto	i2u686_45
 22062  00382E  5020               	movf	??___fttol+1,w,c
 22063  003830  6E24               	movwf	___fttol@sign1,c
 22064  003832  8E1C               	bsf	___fttol@f1+1,7,c
 22065  003834  0EFF               	movlw	255
 22066  003836  161B               	andwf	___fttol@f1,f,c
 22067  003838  0EFF               	movlw	255
 22068  00383A  161C               	andwf	___fttol@f1+1,f,c
 22069  00383C  0E00               	movlw	0
 22070  00383E  161D               	andwf	___fttol@f1+2,f,c
 22071  003840  501B               	movf	___fttol@f1,w,c
 22072  003842  6E25               	movwf	___fttol@lval,c
 22073  003844  501C               	movf	___fttol@f1+1,w,c
 22074  003846  6E26               	movwf	___fttol@lval+1,c
 22075  003848  501D               	movf	___fttol@f1+2,w,c
 22076  00384A  6E27               	movwf	___fttol@lval+2,c
 22077  00384C  6A28               	clrf	___fttol@lval+3,c
 22078  00384E  0E8E               	movlw	142
 22079  003850  5E29               	subwf	___fttol@exp1,f,c
 22080  003852  AE29               	btfss	___fttol@exp1,7,c
 22081  003854  D00E               	goto	i2l1477
 22082  003856  5029               	movf	___fttol@exp1,w,c
 22083  003858  0A80               	xorlw	128
 22084  00385A  0F8F               	addlw	143
 22085  00385C  A0D8               	btfss	status,0,c
 22086  00385E  D00D               	goto	i2u689_40
 22087  003860  FFFF               	dw	65535	; assembler added errata NOP
 22088  003862  90D8               	bcf	status,0,c
 22089  003864  3228               	rrcf	___fttol@lval+3,f,c
 22090  003866  3227               	rrcf	___fttol@lval+2,f,c
 22091  003868  3226               	rrcf	___fttol@lval+1,f,c
 22092  00386A  3225               	rrcf	___fttol@lval,f,c
 22093  00386C  3E29               	incfsz	___fttol@exp1,f,c
 22094  00386E  D7F8               	goto	i2l1478
 22095  003870  D019               	goto	i2u690_40
 22096  003872                     i2l1477:
 22097  003872  FFFF               	dw	65535	; assembler added errata NOP
 22098  003874  0E17               	movlw	23
 22099  003876  6429               	cpfsgt	___fttol@exp1,c
 22100  003878  D011               	goto	i2l1483
 22101  00387A                     i2u689_40:
 22102  00387A  FFFF               	dw	65535	; assembler added errata NOP
 22103  00387C  0E00               	movlw	0
 22104  00387E  6E1B               	movwf	?___fttol,c
 22105  003880  0E00               	movlw	0
 22106  003882  6E1C               	movwf	?___fttol+1,c
 22107  003884  0E00               	movlw	0
 22108  003886  6E1D               	movwf	?___fttol+2,c
 22109  003888  0E00               	movlw	0
 22110  00388A  6E1E               	movwf	?___fttol+3,c
 22111  00388C  D020               	goto	i2l6377
 22112  00388E  FFFF               	dw	65535	; assembler added errata NOP
 22113  003890  90D8               	bcf	status,0,c
 22114  003892  3625               	rlcf	___fttol@lval,f,c
 22115  003894  3626               	rlcf	___fttol@lval+1,f,c
 22116  003896  3627               	rlcf	___fttol@lval+2,f,c
 22117  003898  3628               	rlcf	___fttol@lval+3,f,c
 22118  00389A  0629               	decf	___fttol@exp1,f,c
 22119  00389C                     i2l1483:
 22120  00389C  FFFF               	dw	65535	; assembler added errata NOP
 22121  00389E  5029               	movf	___fttol@exp1,w,c
 22122  0038A0  A4D8               	btfss	status,2,c
 22123  0038A2  D7F5               	goto	i2l1484
 22124  0038A4                     i2u690_40:
 22125  0038A4  FFFF               	dw	65535	; assembler added errata NOP
 22126  0038A6  5024               	movf	___fttol@sign1,w,c
 22127  0038A8  B4D8               	btfsc	status,2,c
 22128  0038AA  D008               	goto	i2l1486
 22129  0038AC  1E28               	comf	___fttol@lval+3,f,c
 22130  0038AE  1E27               	comf	___fttol@lval+2,f,c
 22131  0038B0  1E26               	comf	___fttol@lval+1,f,c
 22132  0038B2  6C25               	negf	___fttol@lval,c
 22133  0038B4  0E00               	movlw	0
 22134  0038B6  2226               	addwfc	___fttol@lval+1,f,c
 22135  0038B8  2227               	addwfc	___fttol@lval+2,f,c
 22136  0038BA  2228               	addwfc	___fttol@lval+3,f,c
 22137  0038BC                     i2l1486:
 22138  0038BC  FFFF               	dw	65535	; assembler added errata NOP
 22139  0038BE  C025  F01B         	movff	___fttol@lval,?___fttol
 22140  0038C2  C026  F01C         	movff	___fttol@lval+1,?___fttol+1
 22141  0038C6  C027  F01D         	movff	___fttol@lval+2,?___fttol+2
 22142  0038CA  C028  F01E         	movff	___fttol@lval+3,?___fttol+3
 22143  0038CE                     i2l6377:
 22144  0038CE  FFFF               	dw	65535	; assembler added errata NOP
 22145  0038D0  0012               	return		;funcret
 22146  0038D2  FFFF               	dw	65535	; errata NOP
 22147  0038D4                     __end_of___fttol:
 22148                           	opt stack 0
 22149                           tosu	equ	0xFFF
 22150                           tosh	equ	0xFFE
 22151                           tosl	equ	0xFFD
 22152                           pclatu	equ	0xFFB
 22153                           pclath	equ	0xFFA
 22154                           tblptru	equ	0xFF8
 22155                           tblptrh	equ	0xFF7
 22156                           tblptrl	equ	0xFF6
 22157                           tablat	equ	0xFF5
 22158                           prodh	equ	0xFF4
 22159                           prodl	equ	0xFF3
 22160                           intcon	equ	0xFF2
 22161                           indf0	equ	0xFEF
 22162                           postinc0	equ	0xFEE
 22163                           fsr0h	equ	0xFEA
 22164                           fsr0l	equ	0xFE9
 22165                           wreg	equ	0xFE8
 22166                           postdec1	equ	0xFE5
 22167                           fsr1h	equ	0xFE2
 22168                           fsr1l	equ	0xFE1
 22169                           indf2	equ	0xFDF
 22170                           postinc2	equ	0xFDE
 22171                           postdec2	equ	0xFDD
 22172                           fsr2h	equ	0xFDA
 22173                           fsr2l	equ	0xFD9
 22174                           status	equ	0xFD8
 22175                           
 22176 ;; *************** function ___ftmul *****************
 22177 ;; Defined at:
 22178 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 22179 ;; Parameters:    Size  Location     Type
 22180 ;;  f1              3   11[COMRAM] float 
 22181 ;;  f2              3   14[COMRAM] float 
 22182 ;; Auto vars:     Size  Location     Type
 22183 ;;  f3_as_produc    3   21[COMRAM] unsigned um
 22184 ;;  sign            1   25[COMRAM] unsigned char 
 22185 ;;  cntr            1   24[COMRAM] unsigned char 
 22186 ;;  exp             1   20[COMRAM] unsigned char 
 22187 ;; Return value:  Size  Location     Type
 22188 ;;                  3   11[COMRAM] float 
 22189 ;; Registers used:
 22190 ;;		wreg, status,2, status,0, cstack
 22191 ;; Tracked objects:
 22192 ;;		On entry : 0/0
 22193 ;;		On exit  : 0/0
 22194 ;;		Unchanged: 0/0
 22195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22196 ;;      Params:         6       0       0       0       0       0       0
 22197 ;;      Locals:         6       0       0       0       0       0       0
 22198 ;;      Temps:          3       0       0       0       0       0       0
 22199 ;;      Totals:        15       0       0       0       0       0       0
 22200 ;;Total ram usage:       15 bytes
 22201 ;; Hardware stack levels used:    1
 22202 ;; Hardware stack levels required when called:    1
 22203 ;; This function calls:
 22204 ;;		___ftpack
 22205 ;; This function is called by:
 22206 ;;		_lerTransdutor
 22207 ;;		_map
 22208 ;; This function uses a non-reentrant model
 22209 ;;
 22210                           
 22211                           	psect	text92
 22212  003608                     __ptext92:
 22213                           	opt stack 0
 22214  003608                     ___ftmul:
 22215                           	opt stack 0
 22216  003608  FFFF               	dw	65535	; assembler added errata NOP
 22217                           
 22218                           ;incstack = 0
 22219  00360A  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
 22220  00360E  6A13               	clrf	(??___ftmul+1)& (0+255),c
 22221  003610  6A14               	clrf	(??___ftmul+2)& (0+255),c
 22222  003612  340D               	rlcf	___ftmul@f1+1,w,c
 22223  003614  3612               	rlcf	??___ftmul& (0+255),f,c
 22224  003616  E301               	bnc	u675_41
 22225  003618  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 22226  00361A                     u675_41:
 22227  00361A  5012               	movf	??___ftmul,w,c
 22228  00361C  6E15               	movwf	___ftmul@exp,c
 22229  00361E  5015               	movf	___ftmul@exp,w,c
 22230  003620  B4D8               	btfsc	status,2,c
 22231  003622  D00D               	goto	i2u678_40
 22232  003624  C011  F012         	movff	___ftmul@f2+2,??___ftmul
 22233  003628  6A13               	clrf	(??___ftmul+1)& (0+255),c
 22234  00362A  6A14               	clrf	(??___ftmul+2)& (0+255),c
 22235  00362C  3410               	rlcf	___ftmul@f2+1,w,c
 22236  00362E  3612               	rlcf	??___ftmul& (0+255),f,c
 22237  003630  E301               	bnc	u677_41
 22238  003632  8013               	bsf	(??___ftmul+1)& (0+255),0,c
 22239  003634                     u677_41:
 22240  003634  5012               	movf	??___ftmul,w,c
 22241  003636  6E1A               	movwf	___ftmul@sign,c
 22242  003638  501A               	movf	___ftmul@sign,w,c
 22243  00363A  A4D8               	btfss	status,2,c
 22244  00363C  D008               	goto	i2l1456
 22245  00363E                     i2u678_40:
 22246  00363E  FFFF               	dw	65535	; assembler added errata NOP
 22247  003640  0E00               	movlw	0
 22248  003642  6E0C               	movwf	?___ftmul,c
 22249  003644  0E00               	movlw	0
 22250  003646  6E0D               	movwf	?___ftmul+1,c
 22251  003648  0E00               	movlw	0
 22252  00364A  6E0E               	movwf	?___ftmul+2,c
 22253  00364C  D056               	goto	i2l6313
 22254  00364E                     i2l1456:
 22255  00364E  FFFF               	dw	65535	; assembler added errata NOP
 22256  003650  501A               	movf	___ftmul@sign,w,c
 22257  003652  0F7B               	addlw	123
 22258  003654  2615               	addwf	___ftmul@exp,f,c
 22259  003656  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
 22260  00365A  5011               	movf	___ftmul@f2+2,w,c
 22261  00365C  1A1A               	xorwf	___ftmul@sign,f,c
 22262  00365E  0E80               	movlw	128
 22263  003660  161A               	andwf	___ftmul@sign,f,c
 22264  003662  8E0D               	bsf	___ftmul@f1+1,7,c
 22265  003664  8E10               	bsf	___ftmul@f2+1,7,c
 22266  003666  0EFF               	movlw	255
 22267  003668  160F               	andwf	___ftmul@f2,f,c
 22268  00366A  0EFF               	movlw	255
 22269  00366C  1610               	andwf	___ftmul@f2+1,f,c
 22270  00366E  0E00               	movlw	0
 22271  003670  1611               	andwf	___ftmul@f2+2,f,c
 22272  003672  0E00               	movlw	0
 22273  003674  6E16               	movwf	___ftmul@f3_as_product,c
 22274  003676  0E00               	movlw	0
 22275  003678  6E17               	movwf	___ftmul@f3_as_product+1,c
 22276  00367A  0E00               	movlw	0
 22277  00367C  6E18               	movwf	___ftmul@f3_as_product+2,c
 22278  00367E  0E07               	movlw	7
 22279  003680  6E19               	movwf	___ftmul@cntr,c
 22280  003682  FFFF               	dw	65535	; assembler added errata NOP
 22281  003684  A00C               	btfss	___ftmul@f1,0,c
 22282  003686  D006               	goto	i2l1458
 22283  003688  500F               	movf	___ftmul@f2,w,c
 22284  00368A  2616               	addwf	___ftmul@f3_as_product,f,c
 22285  00368C  5010               	movf	___ftmul@f2+1,w,c
 22286  00368E  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 22287  003690  5011               	movf	___ftmul@f2+2,w,c
 22288  003692  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 22289  003694                     i2l1458:
 22290  003694  FFFF               	dw	65535	; assembler added errata NOP
 22291  003696  90D8               	bcf	status,0,c
 22292  003698  320E               	rrcf	___ftmul@f1+2,f,c
 22293  00369A  320D               	rrcf	___ftmul@f1+1,f,c
 22294  00369C  320C               	rrcf	___ftmul@f1,f,c
 22295  00369E  90D8               	bcf	status,0,c
 22296  0036A0  360F               	rlcf	___ftmul@f2,f,c
 22297  0036A2  3610               	rlcf	___ftmul@f2+1,f,c
 22298  0036A4  3611               	rlcf	___ftmul@f2+2,f,c
 22299  0036A6  2E19               	decfsz	___ftmul@cntr,f,c
 22300  0036A8  D7EC               	goto	i2l1457
 22301  0036AA  0E09               	movlw	9
 22302  0036AC  6E19               	movwf	___ftmul@cntr,c
 22303  0036AE  FFFF               	dw	65535	; assembler added errata NOP
 22304  0036B0  A00C               	btfss	___ftmul@f1,0,c
 22305  0036B2  D006               	goto	i2l1461
 22306  0036B4  500F               	movf	___ftmul@f2,w,c
 22307  0036B6  2616               	addwf	___ftmul@f3_as_product,f,c
 22308  0036B8  5010               	movf	___ftmul@f2+1,w,c
 22309  0036BA  2217               	addwfc	___ftmul@f3_as_product+1,f,c
 22310  0036BC  5011               	movf	___ftmul@f2+2,w,c
 22311  0036BE  2218               	addwfc	___ftmul@f3_as_product+2,f,c
 22312  0036C0                     i2l1461:
 22313  0036C0  FFFF               	dw	65535	; assembler added errata NOP
 22314  0036C2  90D8               	bcf	status,0,c
 22315  0036C4  320E               	rrcf	___ftmul@f1+2,f,c
 22316  0036C6  320D               	rrcf	___ftmul@f1+1,f,c
 22317  0036C8  320C               	rrcf	___ftmul@f1,f,c
 22318  0036CA  90D8               	bcf	status,0,c
 22319  0036CC  3218               	rrcf	___ftmul@f3_as_product+2,f,c
 22320  0036CE  3217               	rrcf	___ftmul@f3_as_product+1,f,c
 22321  0036D0  3216               	rrcf	___ftmul@f3_as_product,f,c
 22322  0036D2  2E19               	decfsz	___ftmul@cntr,f,c
 22323  0036D4  D7EC               	goto	i2l1460
 22324  0036D6  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 22325  0036DA  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 22326  0036DE  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 22327  0036E2  C015  F004         	movff	___ftmul@exp,___ftpack@exp
 22328  0036E6  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
 22329  0036EA  ECDF  F01E         	call	___ftpack	;wreg free
 22330  0036EE  C001  F00C         	movff	?___ftpack,?___ftmul
 22331  0036F2  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
 22332  0036F6  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
 22333  0036FA                     i2l6313:
 22334  0036FA  FFFF               	dw	65535	; assembler added errata NOP
 22335  0036FC  0012               	return		;funcret
 22336  0036FE  FFFF               	dw	65535	; errata NOP
 22337  003700                     __end_of___ftmul:
 22338                           	opt stack 0
 22339                           tosu	equ	0xFFF
 22340                           tosh	equ	0xFFE
 22341                           tosl	equ	0xFFD
 22342                           pclatu	equ	0xFFB
 22343                           pclath	equ	0xFFA
 22344                           tblptru	equ	0xFF8
 22345                           tblptrh	equ	0xFF7
 22346                           tblptrl	equ	0xFF6
 22347                           tablat	equ	0xFF5
 22348                           prodh	equ	0xFF4
 22349                           prodl	equ	0xFF3
 22350                           intcon	equ	0xFF2
 22351                           indf0	equ	0xFEF
 22352                           postinc0	equ	0xFEE
 22353                           fsr0h	equ	0xFEA
 22354                           fsr0l	equ	0xFE9
 22355                           wreg	equ	0xFE8
 22356                           postdec1	equ	0xFE5
 22357                           fsr1h	equ	0xFE2
 22358                           fsr1l	equ	0xFE1
 22359                           indf2	equ	0xFDF
 22360                           postinc2	equ	0xFDE
 22361                           postdec2	equ	0xFDD
 22362                           fsr2h	equ	0xFDA
 22363                           fsr2l	equ	0xFD9
 22364                           status	equ	0xFD8
 22365                           
 22366 ;; *************** function ___ftge *****************
 22367 ;; Defined at:
 22368 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 22369 ;; Parameters:    Size  Location     Type
 22370 ;;  ff1             3    0[COMRAM] float 
 22371 ;;  ff2             3    3[COMRAM] float 
 22372 ;; Auto vars:     Size  Location     Type
 22373 ;;		None
 22374 ;; Return value:  Size  Location     Type
 22375 ;;		None               void
 22376 ;; Registers used:
 22377 ;;		wreg, status,2, status,0
 22378 ;; Tracked objects:
 22379 ;;		On entry : 0/0
 22380 ;;		On exit  : 0/0
 22381 ;;		Unchanged: 0/0
 22382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22383 ;;      Params:         6       0       0       0       0       0       0
 22384 ;;      Locals:         0       0       0       0       0       0       0
 22385 ;;      Temps:          3       0       0       0       0       0       0
 22386 ;;      Totals:         9       0       0       0       0       0       0
 22387 ;;Total ram usage:        9 bytes
 22388 ;; Hardware stack levels used:    1
 22389 ;; This function calls:
 22390 ;;		Nothing
 22391 ;; This function is called by:
 22392 ;;		_lerTransdutor
 22393 ;; This function uses a non-reentrant model
 22394 ;;
 22395                           
 22396                           	psect	text93
 22397  003E82                     __ptext93:
 22398                           	opt stack 0
 22399  003E82                     ___ftge:
 22400                           	opt stack 0
 22401  003E82  FFFF               	dw	65535	; assembler added errata NOP
 22402                           
 22403                           ;incstack = 0
 22404  003E84  AE03               	btfss	___ftge@ff1+2,7,c
 22405  003E86  D016               	goto	i2l1447
 22406  003E88  C001  F007         	movff	___ftge@ff1,??___ftge
 22407  003E8C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 22408  003E90  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 22409  003E94  1E07               	comf	??___ftge,f,c
 22410  003E96  1E08               	comf	??___ftge+1,f,c
 22411  003E98  1E09               	comf	??___ftge+2,f,c
 22412  003E9A  2A07               	incf	??___ftge,f,c
 22413  003E9C  0E00               	movlw	0
 22414  003E9E  2208               	addwfc	??___ftge+1,f,c
 22415  003EA0  2209               	addwfc	??___ftge+2,f,c
 22416  003EA2  0E00               	movlw	0
 22417  003EA4  2407               	addwf	??___ftge,w,c
 22418  003EA6  6E01               	movwf	___ftge@ff1,c
 22419  003EA8  0E00               	movlw	0
 22420  003EAA  2008               	addwfc	??___ftge+1,w,c
 22421  003EAC  6E02               	movwf	___ftge@ff1+1,c
 22422  003EAE  0E80               	movlw	128
 22423  003EB0  2009               	addwfc	??___ftge+2,w,c
 22424  003EB2  6E03               	movwf	___ftge@ff1+2,c
 22425  003EB4                     i2l1447:
 22426  003EB4  FFFF               	dw	65535	; assembler added errata NOP
 22427  003EB6  AE06               	btfss	___ftge@ff2+2,7,c
 22428  003EB8  D016               	goto	i2l1448
 22429  003EBA  C004  F007         	movff	___ftge@ff2,??___ftge
 22430  003EBE  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 22431  003EC2  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 22432  003EC6  1E07               	comf	??___ftge,f,c
 22433  003EC8  1E08               	comf	??___ftge+1,f,c
 22434  003ECA  1E09               	comf	??___ftge+2,f,c
 22435  003ECC  2A07               	incf	??___ftge,f,c
 22436  003ECE  0E00               	movlw	0
 22437  003ED0  2208               	addwfc	??___ftge+1,f,c
 22438  003ED2  2209               	addwfc	??___ftge+2,f,c
 22439  003ED4  0E00               	movlw	0
 22440  003ED6  2407               	addwf	??___ftge,w,c
 22441  003ED8  6E04               	movwf	___ftge@ff2,c
 22442  003EDA  0E00               	movlw	0
 22443  003EDC  2008               	addwfc	??___ftge+1,w,c
 22444  003EDE  6E05               	movwf	___ftge@ff2+1,c
 22445  003EE0  0E80               	movlw	128
 22446  003EE2  2009               	addwfc	??___ftge+2,w,c
 22447  003EE4  6E06               	movwf	___ftge@ff2+2,c
 22448  003EE6                     i2l1448:
 22449  003EE6  FFFF               	dw	65535	; assembler added errata NOP
 22450  003EE8  0E00               	movlw	0
 22451  003EEA  1A01               	xorwf	___ftge@ff1,f,c
 22452  003EEC  0E00               	movlw	0
 22453  003EEE  1A02               	xorwf	___ftge@ff1+1,f,c
 22454  003EF0  0E80               	movlw	128
 22455  003EF2  1A03               	xorwf	___ftge@ff1+2,f,c
 22456  003EF4  0E00               	movlw	0
 22457  003EF6  1A04               	xorwf	___ftge@ff2,f,c
 22458  003EF8  0E00               	movlw	0
 22459  003EFA  1A05               	xorwf	___ftge@ff2+1,f,c
 22460  003EFC  0E80               	movlw	128
 22461  003EFE  1A06               	xorwf	___ftge@ff2+2,f,c
 22462  003F00  5004               	movf	___ftge@ff2,w,c
 22463  003F02  5C01               	subwf	___ftge@ff1,w,c
 22464  003F04  5005               	movf	___ftge@ff2+1,w,c
 22465  003F06  5802               	subwfb	___ftge@ff1+1,w,c
 22466  003F08  5006               	movf	___ftge@ff2+2,w,c
 22467  003F0A  5803               	subwfb	___ftge@ff1+2,w,c
 22468  003F0C  B0D8               	btfsc	status,0,c
 22469  003F0E  D002               	goto	i2l4947
 22470  003F10  90D8               	bcf	status,0,c
 22471  003F12  D002               	goto	i2l4949
 22472  003F14                     i2l4947:
 22473  003F14  FFFF               	dw	65535	; assembler added errata NOP
 22474  003F16  80D8               	bsf	status,0,c
 22475  003F18                     i2l4949:
 22476  003F18  FFFF               	dw	65535	; assembler added errata NOP
 22477  003F1A  0012               	return		;funcret
 22478  003F1C  FFFF               	dw	65535	; errata NOP
 22479  003F1E                     __end_of___ftge:
 22480                           	opt stack 0
 22481                           tosu	equ	0xFFF
 22482                           tosh	equ	0xFFE
 22483                           tosl	equ	0xFFD
 22484                           pclatu	equ	0xFFB
 22485                           pclath	equ	0xFFA
 22486                           tblptru	equ	0xFF8
 22487                           tblptrh	equ	0xFF7
 22488                           tblptrl	equ	0xFF6
 22489                           tablat	equ	0xFF5
 22490                           prodh	equ	0xFF4
 22491                           prodl	equ	0xFF3
 22492                           intcon	equ	0xFF2
 22493                           indf0	equ	0xFEF
 22494                           postinc0	equ	0xFEE
 22495                           fsr0h	equ	0xFEA
 22496                           fsr0l	equ	0xFE9
 22497                           wreg	equ	0xFE8
 22498                           postdec1	equ	0xFE5
 22499                           fsr1h	equ	0xFE2
 22500                           fsr1l	equ	0xFE1
 22501                           indf2	equ	0xFDF
 22502                           postinc2	equ	0xFDE
 22503                           postdec2	equ	0xFDD
 22504                           fsr2h	equ	0xFDA
 22505                           fsr2l	equ	0xFD9
 22506                           status	equ	0xFD8
 22507                           
 22508 ;; *************** function ___ftdiv *****************
 22509 ;; Defined at:
 22510 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 22511 ;; Parameters:    Size  Location     Type
 22512 ;;  f1              3   26[COMRAM] float 
 22513 ;;  f2              3   29[COMRAM] float 
 22514 ;; Auto vars:     Size  Location     Type
 22515 ;;  f3              3   36[COMRAM] float 
 22516 ;;  sign            1   40[COMRAM] unsigned char 
 22517 ;;  exp             1   39[COMRAM] unsigned char 
 22518 ;;  cntr            1   35[COMRAM] unsigned char 
 22519 ;; Return value:  Size  Location     Type
 22520 ;;                  3   26[COMRAM] float 
 22521 ;; Registers used:
 22522 ;;		wreg, status,2, status,0, cstack
 22523 ;; Tracked objects:
 22524 ;;		On entry : 0/0
 22525 ;;		On exit  : 0/0
 22526 ;;		Unchanged: 0/0
 22527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22528 ;;      Params:         6       0       0       0       0       0       0
 22529 ;;      Locals:         6       0       0       0       0       0       0
 22530 ;;      Temps:          3       0       0       0       0       0       0
 22531 ;;      Totals:        15       0       0       0       0       0       0
 22532 ;;Total ram usage:       15 bytes
 22533 ;; Hardware stack levels used:    1
 22534 ;; Hardware stack levels required when called:    1
 22535 ;; This function calls:
 22536 ;;		___ftpack
 22537 ;; This function is called by:
 22538 ;;		_lerTransdutor
 22539 ;;		_map
 22540 ;; This function uses a non-reentrant model
 22541 ;;
 22542                           
 22543                           	psect	text94
 22544  0038D4                     __ptext94:
 22545                           	opt stack 0
 22546  0038D4                     ___ftdiv:
 22547                           	opt stack 0
 22548  0038D4  FFFF               	dw	65535	; assembler added errata NOP
 22549                           
 22550                           ;incstack = 0
 22551  0038D6  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
 22552  0038DA  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 22553  0038DC  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 22554  0038DE  341C               	rlcf	___ftdiv@f1+1,w,c
 22555  0038E0  3621               	rlcf	??___ftdiv& (0+255),f,c
 22556  0038E2  E301               	bnc	u670_41
 22557  0038E4  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 22558  0038E6                     u670_41:
 22559  0038E6  5021               	movf	??___ftdiv,w,c
 22560  0038E8  6E28               	movwf	___ftdiv@exp,c
 22561  0038EA  5028               	movf	___ftdiv@exp,w,c
 22562  0038EC  B4D8               	btfsc	status,2,c
 22563  0038EE  D00D               	goto	i2u673_40
 22564  0038F0  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
 22565  0038F4  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 22566  0038F6  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 22567  0038F8  341F               	rlcf	___ftdiv@f2+1,w,c
 22568  0038FA  3621               	rlcf	??___ftdiv& (0+255),f,c
 22569  0038FC  E301               	bnc	u672_41
 22570  0038FE  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 22571  003900                     u672_41:
 22572  003900  5021               	movf	??___ftdiv,w,c
 22573  003902  6E29               	movwf	___ftdiv@sign,c
 22574  003904  5029               	movf	___ftdiv@sign,w,c
 22575  003906  A4D8               	btfss	status,2,c
 22576  003908  D008               	goto	i2l1441
 22577  00390A                     i2u673_40:
 22578  00390A  FFFF               	dw	65535	; assembler added errata NOP
 22579  00390C  0E00               	movlw	0
 22580  00390E  6E1B               	movwf	?___ftdiv,c
 22581  003910  0E00               	movlw	0
 22582  003912  6E1C               	movwf	?___ftdiv+1,c
 22583  003914  0E00               	movlw	0
 22584  003916  6E1D               	movwf	?___ftdiv+2,c
 22585  003918  D04D               	goto	i2l6265
 22586  00391A                     i2l1441:
 22587  00391A  FFFF               	dw	65535	; assembler added errata NOP
 22588  00391C  0E00               	movlw	0
 22589  00391E  6E25               	movwf	___ftdiv@f3,c
 22590  003920  0E00               	movlw	0
 22591  003922  6E26               	movwf	___ftdiv@f3+1,c
 22592  003924  0E00               	movlw	0
 22593  003926  6E27               	movwf	___ftdiv@f3+2,c
 22594  003928  5029               	movf	___ftdiv@sign,w,c
 22595  00392A  0F89               	addlw	137
 22596  00392C  5E28               	subwf	___ftdiv@exp,f,c
 22597  00392E  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
 22598  003932  5020               	movf	___ftdiv@f2+2,w,c
 22599  003934  1A29               	xorwf	___ftdiv@sign,f,c
 22600  003936  0E80               	movlw	128
 22601  003938  1629               	andwf	___ftdiv@sign,f,c
 22602  00393A  8E1C               	bsf	___ftdiv@f1+1,7,c
 22603  00393C  0EFF               	movlw	255
 22604  00393E  161B               	andwf	___ftdiv@f1,f,c
 22605  003940  0EFF               	movlw	255
 22606  003942  161C               	andwf	___ftdiv@f1+1,f,c
 22607  003944  0E00               	movlw	0
 22608  003946  161D               	andwf	___ftdiv@f1+2,f,c
 22609  003948  8E1F               	bsf	___ftdiv@f2+1,7,c
 22610  00394A  0EFF               	movlw	255
 22611  00394C  161E               	andwf	___ftdiv@f2,f,c
 22612  00394E  0EFF               	movlw	255
 22613  003950  161F               	andwf	___ftdiv@f2+1,f,c
 22614  003952  0E00               	movlw	0
 22615  003954  1620               	andwf	___ftdiv@f2+2,f,c
 22616  003956  0E18               	movlw	24
 22617  003958  6E24               	movwf	___ftdiv@cntr,c
 22618  00395A  FFFF               	dw	65535	; assembler added errata NOP
 22619  00395C  90D8               	bcf	status,0,c
 22620  00395E  3625               	rlcf	___ftdiv@f3,f,c
 22621  003960  3626               	rlcf	___ftdiv@f3+1,f,c
 22622  003962  3627               	rlcf	___ftdiv@f3+2,f,c
 22623  003964  501E               	movf	___ftdiv@f2,w,c
 22624  003966  5C1B               	subwf	___ftdiv@f1,w,c
 22625  003968  501F               	movf	___ftdiv@f2+1,w,c
 22626  00396A  581C               	subwfb	___ftdiv@f1+1,w,c
 22627  00396C  5020               	movf	___ftdiv@f2+2,w,c
 22628  00396E  581D               	subwfb	___ftdiv@f1+2,w,c
 22629  003970  A0D8               	btfss	status,0,c
 22630  003972  D007               	goto	i2l1443
 22631  003974  501E               	movf	___ftdiv@f2,w,c
 22632  003976  5E1B               	subwf	___ftdiv@f1,f,c
 22633  003978  501F               	movf	___ftdiv@f2+1,w,c
 22634  00397A  5A1C               	subwfb	___ftdiv@f1+1,f,c
 22635  00397C  5020               	movf	___ftdiv@f2+2,w,c
 22636  00397E  5A1D               	subwfb	___ftdiv@f1+2,f,c
 22637  003980  8025               	bsf	___ftdiv@f3,0,c
 22638  003982                     i2l1443:
 22639  003982  FFFF               	dw	65535	; assembler added errata NOP
 22640  003984  90D8               	bcf	status,0,c
 22641  003986  361B               	rlcf	___ftdiv@f1,f,c
 22642  003988  361C               	rlcf	___ftdiv@f1+1,f,c
 22643  00398A  361D               	rlcf	___ftdiv@f1+2,f,c
 22644  00398C  2E24               	decfsz	___ftdiv@cntr,f,c
 22645  00398E  D7E5               	goto	i2l1442
 22646  003990  C025  F001         	movff	___ftdiv@f3,___ftpack@arg
 22647  003994  C026  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 22648  003998  C027  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 22649  00399C  C028  F004         	movff	___ftdiv@exp,___ftpack@exp
 22650  0039A0  C029  F005         	movff	___ftdiv@sign,___ftpack@sign
 22651  0039A4  ECDF  F01E         	call	___ftpack	;wreg free
 22652  0039A8  C001  F01B         	movff	?___ftpack,?___ftdiv
 22653  0039AC  C002  F01C         	movff	?___ftpack+1,?___ftdiv+1
 22654  0039B0  C003  F01D         	movff	?___ftpack+2,?___ftdiv+2
 22655  0039B4                     i2l6265:
 22656  0039B4  FFFF               	dw	65535	; assembler added errata NOP
 22657  0039B6  0012               	return		;funcret
 22658  0039B8  FFFF               	dw	65535	; errata NOP
 22659  0039BA                     __end_of___ftdiv:
 22660                           	opt stack 0
 22661                           tosu	equ	0xFFF
 22662                           tosh	equ	0xFFE
 22663                           tosl	equ	0xFFD
 22664                           pclatu	equ	0xFFB
 22665                           pclath	equ	0xFFA
 22666                           tblptru	equ	0xFF8
 22667                           tblptrh	equ	0xFF7
 22668                           tblptrl	equ	0xFF6
 22669                           tablat	equ	0xFF5
 22670                           prodh	equ	0xFF4
 22671                           prodl	equ	0xFF3
 22672                           intcon	equ	0xFF2
 22673                           indf0	equ	0xFEF
 22674                           postinc0	equ	0xFEE
 22675                           fsr0h	equ	0xFEA
 22676                           fsr0l	equ	0xFE9
 22677                           wreg	equ	0xFE8
 22678                           postdec1	equ	0xFE5
 22679                           fsr1h	equ	0xFE2
 22680                           fsr1l	equ	0xFE1
 22681                           indf2	equ	0xFDF
 22682                           postinc2	equ	0xFDE
 22683                           postdec2	equ	0xFDD
 22684                           fsr2h	equ	0xFDA
 22685                           fsr2l	equ	0xFD9
 22686                           status	equ	0xFD8
 22687                           
 22688 ;; *************** function ___ftadd *****************
 22689 ;; Defined at:
 22690 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 22691 ;; Parameters:    Size  Location     Type
 22692 ;;  f1              3   26[COMRAM] float 
 22693 ;;  f2              3   29[COMRAM] float 
 22694 ;; Auto vars:     Size  Location     Type
 22695 ;;  exp1            1   37[COMRAM] unsigned char 
 22696 ;;  exp2            1   36[COMRAM] unsigned char 
 22697 ;;  sign            1   35[COMRAM] unsigned char 
 22698 ;; Return value:  Size  Location     Type
 22699 ;;                  3   26[COMRAM] float 
 22700 ;; Registers used:
 22701 ;;		wreg, status,2, status,0, cstack
 22702 ;; Tracked objects:
 22703 ;;		On entry : 0/0
 22704 ;;		On exit  : 0/0
 22705 ;;		Unchanged: 0/0
 22706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22707 ;;      Params:         6       0       0       0       0       0       0
 22708 ;;      Locals:         3       0       0       0       0       0       0
 22709 ;;      Temps:          3       0       0       0       0       0       0
 22710 ;;      Totals:        12       0       0       0       0       0       0
 22711 ;;Total ram usage:       12 bytes
 22712 ;; Hardware stack levels used:    1
 22713 ;; Hardware stack levels required when called:    1
 22714 ;; This function calls:
 22715 ;;		___ftpack
 22716 ;; This function is called by:
 22717 ;;		_lerTransdutor
 22718 ;;		_map
 22719 ;; This function uses a non-reentrant model
 22720 ;;
 22721                           
 22722                           	psect	text95
 22723  002862                     __ptext95:
 22724                           	opt stack 0
 22725  002862                     ___ftadd:
 22726                           	opt stack 0
 22727  002862  FFFF               	dw	65535	; assembler added errata NOP
 22728                           
 22729                           ;incstack = 0
 22730  002864  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
 22731  002868  6A22               	clrf	(??___ftadd+1)& (0+255),c
 22732  00286A  6A23               	clrf	(??___ftadd+2)& (0+255),c
 22733  00286C  341C               	rlcf	___ftadd@f1+1,w,c
 22734  00286E  3621               	rlcf	??___ftadd& (0+255),f,c
 22735  002870  E301               	bnc	u649_41
 22736  002872  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 22737  002874                     u649_41:
 22738  002874  5021               	movf	??___ftadd,w,c
 22739  002876  6E26               	movwf	___ftadd@exp1,c
 22740  002878  C020  F021         	movff	___ftadd@f2+2,??___ftadd
 22741  00287C  6A22               	clrf	(??___ftadd+1)& (0+255),c
 22742  00287E  6A23               	clrf	(??___ftadd+2)& (0+255),c
 22743  002880  341F               	rlcf	___ftadd@f2+1,w,c
 22744  002882  3621               	rlcf	??___ftadd& (0+255),f,c
 22745  002884  E301               	bnc	u650_41
 22746  002886  8022               	bsf	(??___ftadd+1)& (0+255),0,c
 22747  002888                     u650_41:
 22748  002888  5021               	movf	??___ftadd,w,c
 22749  00288A  6E25               	movwf	___ftadd@exp2,c
 22750  00288C  5026               	movf	___ftadd@exp1,w,c
 22751  00288E  B4D8               	btfsc	status,2,c
 22752  002890  D00B               	goto	i2u653_40
 22753  002892  5025               	movf	___ftadd@exp2,w,c
 22754  002894  5C26               	subwf	___ftadd@exp1,w,c
 22755  002896  B0D8               	btfsc	status,0,c
 22756  002898  D00F               	goto	i2l1406
 22757  00289A  5026               	movf	___ftadd@exp1,w,c
 22758  00289C  0800               	sublw	0
 22759  00289E  2425               	addwf	___ftadd@exp2,w,c
 22760  0028A0  6E21               	movwf	??___ftadd& (0+255),c
 22761  0028A2  0E18               	movlw	24
 22762  0028A4  6421               	cpfsgt	??___ftadd,c
 22763  0028A6  D008               	goto	i2l1406
 22764  0028A8                     i2u653_40:
 22765  0028A8  FFFF               	dw	65535	; assembler added errata NOP
 22766  0028AA  C01E  F01B         	movff	___ftadd@f2,?___ftadd
 22767  0028AE  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
 22768  0028B2  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
 22769  0028B6  D0BA               	goto	i2l6219
 22770  0028B8                     i2l1406:
 22771  0028B8  FFFF               	dw	65535	; assembler added errata NOP
 22772  0028BA  5025               	movf	___ftadd@exp2,w,c
 22773  0028BC  B4D8               	btfsc	status,2,c
 22774  0028BE  D00B               	goto	i2u656_40
 22775  0028C0  5026               	movf	___ftadd@exp1,w,c
 22776  0028C2  5C25               	subwf	___ftadd@exp2,w,c
 22777  0028C4  B0D8               	btfsc	status,0,c
 22778  0028C6  D00F               	goto	i2l1410
 22779  0028C8  5025               	movf	___ftadd@exp2,w,c
 22780  0028CA  0800               	sublw	0
 22781  0028CC  2426               	addwf	___ftadd@exp1,w,c
 22782  0028CE  6E21               	movwf	??___ftadd& (0+255),c
 22783  0028D0  0E18               	movlw	24
 22784  0028D2  6421               	cpfsgt	??___ftadd,c
 22785  0028D4  D008               	goto	i2l1410
 22786  0028D6                     i2u656_40:
 22787  0028D6  FFFF               	dw	65535	; assembler added errata NOP
 22788  0028D8  C01B  F01B         	movff	___ftadd@f1,?___ftadd
 22789  0028DC  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
 22790  0028E0  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
 22791  0028E4  D0A3               	goto	i2l6219
 22792  0028E6                     i2l1410:
 22793  0028E6  FFFF               	dw	65535	; assembler added errata NOP
 22794  0028E8  0E06               	movlw	6
 22795  0028EA  6E24               	movwf	___ftadd@sign,c
 22796  0028EC  BE1D               	btfsc	___ftadd@f1+2,7,c
 22797  0028EE  8E24               	bsf	___ftadd@sign,7,c
 22798  0028F0  BE20               	btfsc	___ftadd@f2+2,7,c
 22799  0028F2  8C24               	bsf	___ftadd@sign,6,c
 22800  0028F4  8E1C               	bsf	___ftadd@f1+1,7,c
 22801  0028F6  0EFF               	movlw	255
 22802  0028F8  161B               	andwf	___ftadd@f1,f,c
 22803  0028FA  0EFF               	movlw	255
 22804  0028FC  161C               	andwf	___ftadd@f1+1,f,c
 22805  0028FE  0E00               	movlw	0
 22806  002900  161D               	andwf	___ftadd@f1+2,f,c
 22807  002902  8E1F               	bsf	___ftadd@f2+1,7,c
 22808  002904  0EFF               	movlw	255
 22809  002906  161E               	andwf	___ftadd@f2,f,c
 22810  002908  0EFF               	movlw	255
 22811  00290A  161F               	andwf	___ftadd@f2+1,f,c
 22812  00290C  0E00               	movlw	0
 22813  00290E  1620               	andwf	___ftadd@f2+2,f,c
 22814  002910  5025               	movf	___ftadd@exp2,w,c
 22815  002912  5C26               	subwf	___ftadd@exp1,w,c
 22816  002914  B0D8               	btfsc	status,0,c
 22817  002916  D01E               	goto	i2l1415
 22818  002918                     i2u659_40:
 22819  002918  FFFF               	dw	65535	; assembler added errata NOP
 22820  00291A  90D8               	bcf	status,0,c
 22821  00291C  361E               	rlcf	___ftadd@f2,f,c
 22822  00291E  361F               	rlcf	___ftadd@f2+1,f,c
 22823  002920  3620               	rlcf	___ftadd@f2+2,f,c
 22824  002922  0625               	decf	___ftadd@exp2,f,c
 22825  002924  5026               	movf	___ftadd@exp1,w,c
 22826  002926  1825               	xorwf	___ftadd@exp2,w,c
 22827  002928  B4D8               	btfsc	status,2,c
 22828  00292A  D00E               	goto	i2l1420
 22829  00292C  0624               	decf	___ftadd@sign,f,c
 22830  00292E  C024  F021         	movff	___ftadd@sign,??___ftadd
 22831  002932  0E07               	movlw	7
 22832  002934  1621               	andwf	??___ftadd,f,c
 22833  002936  B4D8               	btfsc	status,2,c
 22834  002938  D007               	goto	i2l1420
 22835  00293A  D7EE               	goto	i2u659_40
 22836  00293C  FFFF               	dw	65535	; assembler added errata NOP
 22837  00293E  90D8               	bcf	status,0,c
 22838  002940  321D               	rrcf	___ftadd@f1+2,f,c
 22839  002942  321C               	rrcf	___ftadd@f1+1,f,c
 22840  002944  321B               	rrcf	___ftadd@f1,f,c
 22841  002946  2A26               	incf	___ftadd@exp1,f,c
 22842  002948                     i2l1420:
 22843  002948  FFFF               	dw	65535	; assembler added errata NOP
 22844  00294A  5025               	movf	___ftadd@exp2,w,c
 22845  00294C  1826               	xorwf	___ftadd@exp1,w,c
 22846  00294E  B4D8               	btfsc	status,2,c
 22847  002950  D023               	goto	i2u666_40
 22848  002952  D7F4               	goto	i2l1421
 22849  002954                     i2l1415:
 22850  002954  FFFF               	dw	65535	; assembler added errata NOP
 22851  002956  5026               	movf	___ftadd@exp1,w,c
 22852  002958  5C25               	subwf	___ftadd@exp2,w,c
 22853  00295A  B0D8               	btfsc	status,0,c
 22854  00295C  D01D               	goto	i2u666_40
 22855  00295E                     i2u663_40:
 22856  00295E  FFFF               	dw	65535	; assembler added errata NOP
 22857  002960  90D8               	bcf	status,0,c
 22858  002962  361B               	rlcf	___ftadd@f1,f,c
 22859  002964  361C               	rlcf	___ftadd@f1+1,f,c
 22860  002966  361D               	rlcf	___ftadd@f1+2,f,c
 22861  002968  0626               	decf	___ftadd@exp1,f,c
 22862  00296A  5026               	movf	___ftadd@exp1,w,c
 22863  00296C  1825               	xorwf	___ftadd@exp2,w,c
 22864  00296E  B4D8               	btfsc	status,2,c
 22865  002970  D00E               	goto	i2l1429
 22866  002972  0624               	decf	___ftadd@sign,f,c
 22867  002974  C024  F021         	movff	___ftadd@sign,??___ftadd
 22868  002978  0E07               	movlw	7
 22869  00297A  1621               	andwf	??___ftadd,f,c
 22870  00297C  B4D8               	btfsc	status,2,c
 22871  00297E  D007               	goto	i2l1429
 22872  002980  D7EE               	goto	i2u663_40
 22873  002982  FFFF               	dw	65535	; assembler added errata NOP
 22874  002984  90D8               	bcf	status,0,c
 22875  002986  3220               	rrcf	___ftadd@f2+2,f,c
 22876  002988  321F               	rrcf	___ftadd@f2+1,f,c
 22877  00298A  321E               	rrcf	___ftadd@f2,f,c
 22878  00298C  2A25               	incf	___ftadd@exp2,f,c
 22879  00298E                     i2l1429:
 22880  00298E  FFFF               	dw	65535	; assembler added errata NOP
 22881  002990  5025               	movf	___ftadd@exp2,w,c
 22882  002992  1826               	xorwf	___ftadd@exp1,w,c
 22883  002994  A4D8               	btfss	status,2,c
 22884  002996  D7F5               	goto	i2l1430
 22885  002998                     i2u666_40:
 22886  002998  FFFF               	dw	65535	; assembler added errata NOP
 22887  00299A  AE24               	btfss	___ftadd@sign,7,c
 22888  00299C  D00C               	goto	i2l1432
 22889  00299E  0EFF               	movlw	255
 22890  0029A0  1A1B               	xorwf	___ftadd@f1,f,c
 22891  0029A2  0EFF               	movlw	255
 22892  0029A4  1A1C               	xorwf	___ftadd@f1+1,f,c
 22893  0029A6  0EFF               	movlw	255
 22894  0029A8  1A1D               	xorwf	___ftadd@f1+2,f,c
 22895  0029AA  0E01               	movlw	1
 22896  0029AC  261B               	addwf	___ftadd@f1,f,c
 22897  0029AE  0E00               	movlw	0
 22898  0029B0  221C               	addwfc	___ftadd@f1+1,f,c
 22899  0029B2  0E00               	movlw	0
 22900  0029B4  221D               	addwfc	___ftadd@f1+2,f,c
 22901  0029B6                     i2l1432:
 22902  0029B6  FFFF               	dw	65535	; assembler added errata NOP
 22903  0029B8  AC24               	btfss	___ftadd@sign,6,c
 22904  0029BA  D00C               	goto	i2l1433
 22905  0029BC  0EFF               	movlw	255
 22906  0029BE  1A1E               	xorwf	___ftadd@f2,f,c
 22907  0029C0  0EFF               	movlw	255
 22908  0029C2  1A1F               	xorwf	___ftadd@f2+1,f,c
 22909  0029C4  0EFF               	movlw	255
 22910  0029C6  1A20               	xorwf	___ftadd@f2+2,f,c
 22911  0029C8  0E01               	movlw	1
 22912  0029CA  261E               	addwf	___ftadd@f2,f,c
 22913  0029CC  0E00               	movlw	0
 22914  0029CE  221F               	addwfc	___ftadd@f2+1,f,c
 22915  0029D0  0E00               	movlw	0
 22916  0029D2  2220               	addwfc	___ftadd@f2+2,f,c
 22917  0029D4                     i2l1433:
 22918  0029D4  FFFF               	dw	65535	; assembler added errata NOP
 22919  0029D6  0E00               	movlw	0
 22920  0029D8  6E24               	movwf	___ftadd@sign,c
 22921  0029DA  501B               	movf	___ftadd@f1,w,c
 22922  0029DC  261E               	addwf	___ftadd@f2,f,c
 22923  0029DE  501C               	movf	___ftadd@f1+1,w,c
 22924  0029E0  221F               	addwfc	___ftadd@f2+1,f,c
 22925  0029E2  501D               	movf	___ftadd@f1+2,w,c
 22926  0029E4  2220               	addwfc	___ftadd@f2+2,f,c
 22927  0029E6  AE20               	btfss	___ftadd@f2+2,7,c
 22928  0029E8  D00E               	goto	i2l1434
 22929  0029EA  0EFF               	movlw	255
 22930  0029EC  1A1E               	xorwf	___ftadd@f2,f,c
 22931  0029EE  0EFF               	movlw	255
 22932  0029F0  1A1F               	xorwf	___ftadd@f2+1,f,c
 22933  0029F2  0EFF               	movlw	255
 22934  0029F4  1A20               	xorwf	___ftadd@f2+2,f,c
 22935  0029F6  0E01               	movlw	1
 22936  0029F8  261E               	addwf	___ftadd@f2,f,c
 22937  0029FA  0E00               	movlw	0
 22938  0029FC  221F               	addwfc	___ftadd@f2+1,f,c
 22939  0029FE  0E00               	movlw	0
 22940  002A00  2220               	addwfc	___ftadd@f2+2,f,c
 22941  002A02  0E01               	movlw	1
 22942  002A04  6E24               	movwf	___ftadd@sign,c
 22943  002A06                     i2l1434:
 22944  002A06  FFFF               	dw	65535	; assembler added errata NOP
 22945  002A08  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
 22946  002A0C  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 22947  002A10  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 22948  002A14  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
 22949  002A18  C024  F005         	movff	___ftadd@sign,___ftpack@sign
 22950  002A1C  ECDF  F01E         	call	___ftpack	;wreg free
 22951  002A20  C001  F01B         	movff	?___ftpack,?___ftadd
 22952  002A24  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
 22953  002A28  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
 22954  002A2C                     i2l6219:
 22955  002A2C  FFFF               	dw	65535	; assembler added errata NOP
 22956  002A2E  0012               	return		;funcret
 22957  002A30  FFFF               	dw	65535	; errata NOP
 22958  002A32                     __end_of___ftadd:
 22959                           	opt stack 0
 22960                           tosu	equ	0xFFF
 22961                           tosh	equ	0xFFE
 22962                           tosl	equ	0xFFD
 22963                           pclatu	equ	0xFFB
 22964                           pclath	equ	0xFFA
 22965                           tblptru	equ	0xFF8
 22966                           tblptrh	equ	0xFF7
 22967                           tblptrl	equ	0xFF6
 22968                           tablat	equ	0xFF5
 22969                           prodh	equ	0xFF4
 22970                           prodl	equ	0xFF3
 22971                           intcon	equ	0xFF2
 22972                           indf0	equ	0xFEF
 22973                           postinc0	equ	0xFEE
 22974                           fsr0h	equ	0xFEA
 22975                           fsr0l	equ	0xFE9
 22976                           wreg	equ	0xFE8
 22977                           postdec1	equ	0xFE5
 22978                           fsr1h	equ	0xFE2
 22979                           fsr1l	equ	0xFE1
 22980                           indf2	equ	0xFDF
 22981                           postinc2	equ	0xFDE
 22982                           postdec2	equ	0xFDD
 22983                           fsr2h	equ	0xFDA
 22984                           fsr2l	equ	0xFD9
 22985                           status	equ	0xFD8
 22986                           
 22987 ;; *************** function ___ftpack *****************
 22988 ;; Defined at:
 22989 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 22990 ;; Parameters:    Size  Location     Type
 22991 ;;  arg             3    0[COMRAM] unsigned um
 22992 ;;  exp             1    3[COMRAM] unsigned char 
 22993 ;;  sign            1    4[COMRAM] unsigned char 
 22994 ;; Auto vars:     Size  Location     Type
 22995 ;;		None
 22996 ;; Return value:  Size  Location     Type
 22997 ;;                  3    0[COMRAM] float 
 22998 ;; Registers used:
 22999 ;;		wreg, status,2, status,0
 23000 ;; Tracked objects:
 23001 ;;		On entry : 0/0
 23002 ;;		On exit  : 0/0
 23003 ;;		Unchanged: 0/0
 23004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23005 ;;      Params:         5       0       0       0       0       0       0
 23006 ;;      Locals:         0       0       0       0       0       0       0
 23007 ;;      Temps:          3       0       0       0       0       0       0
 23008 ;;      Totals:         8       0       0       0       0       0       0
 23009 ;;Total ram usage:        8 bytes
 23010 ;; Hardware stack levels used:    1
 23011 ;; This function calls:
 23012 ;;		Nothing
 23013 ;; This function is called by:
 23014 ;;		___ftadd
 23015 ;;		___ftdiv
 23016 ;;		___ftmul
 23017 ;;		___lwtoft
 23018 ;; This function uses a non-reentrant model
 23019 ;;
 23020                           
 23021                           	psect	text96
 23022  003DBE                     __ptext96:
 23023                           	opt stack 0
 23024  003DBE                     ___ftpack:
 23025                           	opt stack 0
 23026  003DBE  FFFF               	dw	65535	; assembler added errata NOP
 23027                           
 23028                           ;incstack = 0
 23029  003DC0  5004               	movf	___ftpack@exp,w,c
 23030  003DC2  B4D8               	btfsc	status,2,c
 23031  003DC4  D005               	goto	i2u567_40
 23032  003DC6  5001               	movf	___ftpack@arg,w,c
 23033  003DC8  1002               	iorwf	___ftpack@arg+1,w,c
 23034  003DCA  1003               	iorwf	___ftpack@arg+2,w,c
 23035  003DCC  A4D8               	btfss	status,2,c
 23036  003DCE  D00E               	goto	i2l1375
 23037  003DD0                     i2u567_40:
 23038  003DD0  FFFF               	dw	65535	; assembler added errata NOP
 23039  003DD2  0E00               	movlw	0
 23040  003DD4  6E01               	movwf	?___ftpack,c
 23041  003DD6  0E00               	movlw	0
 23042  003DD8  6E02               	movwf	?___ftpack+1,c
 23043  003DDA  0E00               	movlw	0
 23044  003DDC  6E03               	movwf	?___ftpack+2,c
 23045  003DDE  D04E               	goto	i2l5543
 23046  003DE0  FFFF               	dw	65535	; assembler added errata NOP
 23047  003DE2  2A04               	incf	___ftpack@exp,f,c
 23048  003DE4  90D8               	bcf	status,0,c
 23049  003DE6  3203               	rrcf	___ftpack@arg+2,f,c
 23050  003DE8  3202               	rrcf	___ftpack@arg+1,f,c
 23051  003DEA  3201               	rrcf	___ftpack@arg,f,c
 23052  003DEC                     i2l1375:
 23053  003DEC  FFFF               	dw	65535	; assembler added errata NOP
 23054  003DEE  0E00               	movlw	0
 23055  003DF0  1401               	andwf	___ftpack@arg,w,c
 23056  003DF2  6E06               	movwf	??___ftpack& (0+255),c
 23057  003DF4  0E00               	movlw	0
 23058  003DF6  1402               	andwf	___ftpack@arg+1,w,c
 23059  003DF8  6E07               	movwf	(??___ftpack+1)& (0+255),c
 23060  003DFA  0EFE               	movlw	254
 23061  003DFC  1403               	andwf	___ftpack@arg+2,w,c
 23062  003DFE  6E08               	movwf	(??___ftpack+2)& (0+255),c
 23063  003E00  5006               	movf	??___ftpack,w,c
 23064  003E02  1007               	iorwf	??___ftpack+1,w,c
 23065  003E04  1008               	iorwf	??___ftpack+2,w,c
 23066  003E06  B4D8               	btfsc	status,2,c
 23067  003E08  D00D               	goto	i2l1378
 23068  003E0A  D7EA               	goto	i2l1376
 23069  003E0C  FFFF               	dw	65535	; assembler added errata NOP
 23070  003E0E  2A04               	incf	___ftpack@exp,f,c
 23071  003E10  0E01               	movlw	1
 23072  003E12  2601               	addwf	___ftpack@arg,f,c
 23073  003E14  0E00               	movlw	0
 23074  003E16  2202               	addwfc	___ftpack@arg+1,f,c
 23075  003E18  0E00               	movlw	0
 23076  003E1A  2203               	addwfc	___ftpack@arg+2,f,c
 23077  003E1C  90D8               	bcf	status,0,c
 23078  003E1E  3203               	rrcf	___ftpack@arg+2,f,c
 23079  003E20  3202               	rrcf	___ftpack@arg+1,f,c
 23080  003E22  3201               	rrcf	___ftpack@arg,f,c
 23081  003E24                     i2l1378:
 23082  003E24  FFFF               	dw	65535	; assembler added errata NOP
 23083  003E26  0E00               	movlw	0
 23084  003E28  1401               	andwf	___ftpack@arg,w,c
 23085  003E2A  6E06               	movwf	??___ftpack& (0+255),c
 23086  003E2C  0E00               	movlw	0
 23087  003E2E  1402               	andwf	___ftpack@arg+1,w,c
 23088  003E30  6E07               	movwf	(??___ftpack+1)& (0+255),c
 23089  003E32  0EFF               	movlw	255
 23090  003E34  1403               	andwf	___ftpack@arg+2,w,c
 23091  003E36  6E08               	movwf	(??___ftpack+2)& (0+255),c
 23092  003E38  5006               	movf	??___ftpack,w,c
 23093  003E3A  1007               	iorwf	??___ftpack+1,w,c
 23094  003E3C  1008               	iorwf	??___ftpack+2,w,c
 23095  003E3E  B4D8               	btfsc	status,2,c
 23096  003E40  D007               	goto	i2l1381
 23097  003E42  D7E4               	goto	i2l1379
 23098  003E44  FFFF               	dw	65535	; assembler added errata NOP
 23099  003E46  0604               	decf	___ftpack@exp,f,c
 23100  003E48  90D8               	bcf	status,0,c
 23101  003E4A  3601               	rlcf	___ftpack@arg,f,c
 23102  003E4C  3602               	rlcf	___ftpack@arg+1,f,c
 23103  003E4E  3603               	rlcf	___ftpack@arg+2,f,c
 23104  003E50                     i2l1381:
 23105  003E50  FFFF               	dw	65535	; assembler added errata NOP
 23106  003E52  BE02               	btfsc	___ftpack@arg+1,7,c
 23107  003E54  D003               	goto	i2u571_40
 23108  003E56  0E02               	movlw	2
 23109  003E58  6004               	cpfslt	___ftpack@exp,c
 23110  003E5A  D7F4               	goto	i2l1382
 23111  003E5C                     i2u571_40:
 23112  003E5C  FFFF               	dw	65535	; assembler added errata NOP
 23113  003E5E  A004               	btfss	___ftpack@exp,0,c
 23114  003E60  9E02               	bcf	___ftpack@arg+1,7,c
 23115  003E62  90D8               	bcf	status,0,c
 23116  003E64  3204               	rrcf	___ftpack@exp,f,c
 23117  003E66  5004               	movf	___ftpack@exp,w,c
 23118  003E68  1203               	iorwf	___ftpack@arg+2,f,c
 23119  003E6A  5005               	movf	___ftpack@sign,w,c
 23120  003E6C  A4D8               	btfss	status,2,c
 23121  003E6E  8E03               	bsf	___ftpack@arg+2,7,c
 23122  003E70  C001  F001         	movff	___ftpack@arg,?___ftpack
 23123  003E74  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 23124  003E78  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 23125  003E7C                     i2l5543:
 23126  003E7C  FFFF               	dw	65535	; assembler added errata NOP
 23127  003E7E  0012               	return		;funcret
 23128  003E80  FFFF               	dw	65535	; errata NOP
 23129  003E82                     __end_of___ftpack:
 23130                           	opt stack 0
 23131                           tosu	equ	0xFFF
 23132                           tosh	equ	0xFFE
 23133                           tosl	equ	0xFFD
 23134                           pclatu	equ	0xFFB
 23135                           pclath	equ	0xFFA
 23136                           tblptru	equ	0xFF8
 23137                           tblptrh	equ	0xFF7
 23138                           tblptrl	equ	0xFF6
 23139                           tablat	equ	0xFF5
 23140                           prodh	equ	0xFF4
 23141                           prodl	equ	0xFF3
 23142                           intcon	equ	0xFF2
 23143                           indf0	equ	0xFEF
 23144                           postinc0	equ	0xFEE
 23145                           fsr0h	equ	0xFEA
 23146                           fsr0l	equ	0xFE9
 23147                           wreg	equ	0xFE8
 23148                           postdec1	equ	0xFE5
 23149                           fsr1h	equ	0xFE2
 23150                           fsr1l	equ	0xFE1
 23151                           indf2	equ	0xFDF
 23152                           postinc2	equ	0xFDE
 23153                           postdec2	equ	0xFDD
 23154                           fsr2h	equ	0xFDA
 23155                           fsr2l	equ	0xFD9
 23156                           status	equ	0xFD8
 23157                           tosu	equ	0xFFF
 23158                           tosh	equ	0xFFE
 23159                           tosl	equ	0xFFD
 23160                           pclatu	equ	0xFFB
 23161                           pclath	equ	0xFFA
 23162                           tblptru	equ	0xFF8
 23163                           tblptrh	equ	0xFF7
 23164                           tblptrl	equ	0xFF6
 23165                           tablat	equ	0xFF5
 23166                           prodh	equ	0xFF4
 23167                           prodl	equ	0xFF3
 23168                           intcon	equ	0xFF2
 23169                           indf0	equ	0xFEF
 23170                           postinc0	equ	0xFEE
 23171                           fsr0h	equ	0xFEA
 23172                           fsr0l	equ	0xFE9
 23173                           wreg	equ	0xFE8
 23174                           postdec1	equ	0xFE5
 23175                           fsr1h	equ	0xFE2
 23176                           fsr1l	equ	0xFE1
 23177                           indf2	equ	0xFDF
 23178                           postinc2	equ	0xFDE
 23179                           postdec2	equ	0xFDD
 23180                           fsr2h	equ	0xFDA
 23181                           fsr2l	equ	0xFD9
 23182                           status	equ	0xFD8
 23183                           
 23184                           	psect	text97
 23185  000000                     __ptext97:
 23186                           	opt stack 0
 23187                           tosu	equ	0xFFF
 23188                           tosh	equ	0xFFE
 23189                           tosl	equ	0xFFD
 23190                           pclatu	equ	0xFFB
 23191                           pclath	equ	0xFFA
 23192                           tblptru	equ	0xFF8
 23193                           tblptrh	equ	0xFF7
 23194                           tblptrl	equ	0xFF6
 23195                           tablat	equ	0xFF5
 23196                           prodh	equ	0xFF4
 23197                           prodl	equ	0xFF3
 23198                           intcon	equ	0xFF2
 23199                           indf0	equ	0xFEF
 23200                           postinc0	equ	0xFEE
 23201                           fsr0h	equ	0xFEA
 23202                           fsr0l	equ	0xFE9
 23203                           wreg	equ	0xFE8
 23204                           postdec1	equ	0xFE5
 23205                           fsr1h	equ	0xFE2
 23206                           fsr1l	equ	0xFE1
 23207                           indf2	equ	0xFDF
 23208                           postinc2	equ	0xFDE
 23209                           postdec2	equ	0xFDD
 23210                           fsr2h	equ	0xFDA
 23211                           fsr2l	equ	0xFD9
 23212                           status	equ	0xFD8
 23213                           
 23214                           	psect	rparam
 23215  0000                     tosu	equ	0xFFF
 23216                           tosh	equ	0xFFE
 23217                           tosl	equ	0xFFD
 23218                           pclatu	equ	0xFFB
 23219                           pclath	equ	0xFFA
 23220                           tblptru	equ	0xFF8
 23221                           tblptrh	equ	0xFF7
 23222                           tblptrl	equ	0xFF6
 23223                           tablat	equ	0xFF5
 23224                           prodh	equ	0xFF4
 23225                           prodl	equ	0xFF3
 23226                           intcon	equ	0xFF2
 23227                           indf0	equ	0xFEF
 23228                           postinc0	equ	0xFEE
 23229                           fsr0h	equ	0xFEA
 23230                           fsr0l	equ	0xFE9
 23231                           wreg	equ	0xFE8
 23232                           postdec1	equ	0xFE5
 23233                           fsr1h	equ	0xFE2
 23234                           fsr1l	equ	0xFE1
 23235                           indf2	equ	0xFDF
 23236                           postinc2	equ	0xFDE
 23237                           postdec2	equ	0xFDD
 23238                           fsr2h	equ	0xFDA
 23239                           fsr2l	equ	0xFD9
 23240                           status	equ	0xFD8
 23241                           
 23242                           	psect	temp
 23243  00007E                     btemp:
 23244                           	opt stack 0
 23245  00007E                     	ds	1
 23246  0000                     int$flags	set	btemp
 23247  0000                     wtemp6	set	btemp+1
 23248                           tosu	equ	0xFFF
 23249                           tosh	equ	0xFFE
 23250                           tosl	equ	0xFFD
 23251                           pclatu	equ	0xFFB
 23252                           pclath	equ	0xFFA
 23253                           tblptru	equ	0xFF8
 23254                           tblptrh	equ	0xFF7
 23255                           tblptrl	equ	0xFF6
 23256                           tablat	equ	0xFF5
 23257                           prodh	equ	0xFF4
 23258                           prodl	equ	0xFF3
 23259                           intcon	equ	0xFF2
 23260                           indf0	equ	0xFEF
 23261                           postinc0	equ	0xFEE
 23262                           fsr0h	equ	0xFEA
 23263                           fsr0l	equ	0xFE9
 23264                           wreg	equ	0xFE8
 23265                           postdec1	equ	0xFE5
 23266                           fsr1h	equ	0xFE2
 23267                           fsr1l	equ	0xFE1
 23268                           indf2	equ	0xFDF
 23269                           postinc2	equ	0xFDE
 23270                           postdec2	equ	0xFDD
 23271                           fsr2h	equ	0xFDA
 23272                           fsr2l	equ	0xFD9
 23273                           status	equ	0xFD8


Data Sizes:
    Strings     1324
    Constant    58
    Data        13
    BSS         279
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     67     125
    BANK0           128     91     128
    BANK1           256      0     197
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ajusteSP_Bombas$2383	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    telaPrincipal$2382	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    acaoTesteBombas$2381	PTR const unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), NULL(NULL[0]), bufferSerial(BANK1[60]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 31
		 -> intToFloatStr@conv(BANK0[4]), STR_122(CODE[15]), STR_121(CODE[12]), STR_120(CODE[10]), 
		 -> STR_119(CODE[18]), STR_118(CODE[10]), STR_117(CODE[18]), STR_116(CODE[16]), 
		 -> STR_115(CODE[10]), STR_113(CODE[3]), STR_112(CODE[14]), STR_111(CODE[20]), 
		 -> STR_110(CODE[8]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[11]), 
		 -> STR_106(CODE[11]), STR_105(CODE[18]), STR_104(CODE[5]), STR_103(CODE[12]), 
		 -> STR_102(CODE[5]), STR_101(CODE[14]), STR_100(CODE[19]), STR_97(CODE[3]), 
		 -> STR_96(CODE[7]), STR_95(CODE[7]), STR_93(CODE[12]), STR_92(CODE[17]), 
		 -> STR_91(CODE[20]), STR_90(CODE[8]), STR_87(CODE[14]), STR_84(CODE[14]), 
		 -> STR_83(CODE[11]), STR_80(CODE[10]), STR_79(CODE[31]), STR_76(CODE[11]), 
		 -> STR_75(CODE[20]), STR_74(CODE[20]), STR_73(CODE[21]), STR_72(CODE[15]), 
		 -> STR_71(CODE[6]), STR_70(CODE[15]), STR_69(CODE[6]), STR_68(CODE[20]), 
		 -> STR_67(CODE[15]), STR_66(CODE[19]), STR_65(CODE[20]), STR_64(CODE[21]), 
		 -> STR_63(CODE[21]), STR_62(CODE[18]), STR_61(CODE[20]), STR_60(CODE[12]), 
		 -> STR_59(CODE[17]), STR_58(CODE[21]), STR_57(CODE[16]), STR_54(CODE[15]), 
		 -> STR_51(CODE[15]), STR_48(CODE[11]), STR_47(CODE[17]), STR_44(CODE[9]), 
		 -> STR_43(CODE[19]), STR_42(CODE[19]), STR_41(CODE[16]), STR_40(CODE[15]), 
		 -> STR_39(CODE[15]), STR_38(CODE[20]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 126
		 -> STR_37(CODE[7]), STR_35(CODE[11]), STR_26(CODE[104]), STR_25(CODE[63]), 
		 -> STR_23(CODE[18]), STR_21(CODE[7]), STR_20(CODE[12]), STR_18(CODE[5]), 
		 -> STR_14(CODE[126]), STR_12(CODE[18]), STR_10(CODE[12]), STR_8(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    memset@p	PTR unsigned char  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), STR_123(CODE[7]), _doprnt@c(BANK0[1]), 
		 -> intToFloatStr@end(BANK0[4]), STR_114(CODE[12]), STR_99(CODE[17]), STR_98(CODE[13]), 
		 -> STR_94(CODE[12]), STR_89(CODE[5]), STR_88(CODE[3]), STR_86(CODE[5]), 
		 -> STR_85(CODE[3]), STR_82(CODE[5]), STR_81(CODE[3]), STR_78(CODE[4]), 
		 -> STR_77(CODE[4]), STR_56(CODE[5]), STR_55(CODE[3]), STR_53(CODE[5]), 
		 -> STR_52(CODE[3]), line3(BANK1[21]), STR_50(CODE[5]), STR_49(CODE[3]), 
		 -> STR_46(CODE[13]), STR_45(CODE[10]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), STR_32(CODE[6]), STR_31(CODE[3]), STR_30(CODE[6]), 
		 -> STR_29(CODE[3]), STR_28(CODE[6]), STR_27(CODE[3]), STR_15(CODE[12]), 
		 -> tel2(BANK1[12]), tel1(BANK1[12]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 126
		 -> intToFloatStr@conv(BANK0[4]), STR_122(CODE[15]), STR_121(CODE[12]), STR_120(CODE[10]), 
		 -> STR_119(CODE[18]), STR_118(CODE[10]), STR_117(CODE[18]), STR_116(CODE[16]), 
		 -> STR_115(CODE[10]), STR_113(CODE[3]), STR_112(CODE[14]), STR_111(CODE[20]), 
		 -> STR_110(CODE[8]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[11]), 
		 -> STR_106(CODE[11]), STR_105(CODE[18]), STR_104(CODE[5]), STR_103(CODE[12]), 
		 -> STR_102(CODE[5]), STR_101(CODE[14]), STR_100(CODE[19]), STR_97(CODE[3]), 
		 -> STR_96(CODE[7]), STR_95(CODE[7]), STR_93(CODE[12]), STR_92(CODE[17]), 
		 -> STR_91(CODE[20]), STR_90(CODE[8]), STR_87(CODE[14]), STR_84(CODE[14]), 
		 -> STR_83(CODE[11]), STR_80(CODE[10]), STR_79(CODE[31]), STR_76(CODE[11]), 
		 -> STR_75(CODE[20]), STR_74(CODE[20]), STR_73(CODE[21]), STR_72(CODE[15]), 
		 -> STR_71(CODE[6]), STR_70(CODE[15]), STR_69(CODE[6]), STR_68(CODE[20]), 
		 -> STR_67(CODE[15]), STR_66(CODE[19]), STR_65(CODE[20]), STR_64(CODE[21]), 
		 -> STR_63(CODE[21]), STR_62(CODE[18]), STR_61(CODE[20]), STR_60(CODE[12]), 
		 -> STR_59(CODE[17]), STR_58(CODE[21]), STR_57(CODE[16]), STR_54(CODE[15]), 
		 -> STR_51(CODE[15]), STR_48(CODE[11]), STR_47(CODE[17]), STR_44(CODE[9]), 
		 -> STR_43(CODE[19]), STR_42(CODE[19]), STR_41(CODE[16]), STR_40(CODE[15]), 
		 -> STR_39(CODE[15]), STR_38(CODE[20]), STR_37(CODE[7]), STR_35(CODE[11]), 
		 -> STR_26(CODE[104]), STR_25(CODE[63]), STR_23(CODE[18]), STR_21(CODE[7]), 
		 -> STR_20(CODE[12]), STR_18(CODE[5]), STR_14(CODE[126]), STR_12(CODE[18]), 
		 -> STR_10(CODE[12]), STR_8(CODE[5]), STR_4(CODE[5]), STR_3(CODE[9]), 
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 

    S1612__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1612__prbuf$ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 21
		 -> intToFloatStr@end(BANK0[4]), line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), 
		 -> line4(BANK1[21]), bufferAUX(BANK1[20]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    configuraTelefones$1476	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_99(CODE[17]), STR_98(CODE[13]), 

    dataLoger$1461	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_89(CODE[5]), STR_88(CODE[3]), 

    dataLoger$1456	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_86(CODE[5]), STR_85(CODE[3]), 

    dataLoger$1450	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_82(CODE[5]), STR_81(CODE[3]), 

    tela_testeBombas$1431	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_78(CODE[4]), STR_77(CODE[4]), 

    blink@line	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    atualizarLCD@line4	PTR unsigned char  size(2) Largest target is 21
		 -> line4(BANK1[21]), 

    atualizarLCD@line3	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), 

    atualizarLCD@line2	PTR unsigned char  size(2) Largest target is 21
		 -> line2(BANK1[21]), 

    atualizarLCD@line1	PTR unsigned char  size(2) Largest target is 21
		 -> line1(BANK1[21]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 21
		 -> line3(BANK1[21]), line2(BANK1[21]), line1(BANK1[21]), line4(BANK1[21]), 

    acaoTesteBombas$1328	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_56(CODE[5]), STR_55(CODE[3]), 

    acaoTesteBombas$1323	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_53(CODE[5]), STR_52(CODE[3]), 

    acaoTesteBombas$1318	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_50(CODE[5]), STR_49(CODE[3]), 

    acaoTesteBombas$1310	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_46(CODE[13]), STR_45(CODE[10]), 

    sp__intToFloatStr	PTR unsigned char  size(2) Largest target is 4
		 -> intToFloatStr@end(BANK0[4]), 

    enviaSMS$1231	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    enviaSMS$1226	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_28(CODE[6]), STR_27(CODE[3]), 

    enviaSMS$1225	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_30(CODE[6]), STR_29(CODE[3]), 

    enviaSMS$1224	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_32(CODE[6]), STR_31(CODE[3]), 

    enviaSMS$1211	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    comunicarTeste$1196	PTR unsigned char  size(2) Largest target is 12
		 -> tel2(BANK1[12]), tel1(BANK1[12]), 

    getDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    setDS1307TimeDate@ptrToUserVal	PTR struct . size(2) Largest target is 7
		 -> rtc(COMRAM[7]), 

    sp__getSerial	PTR unsigned char  size(2) Largest target is 20
		 -> bufferAUX(BANK1[20]), NULL(NULL[0]), 

    getSerial@ret	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    getSerial@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_7(CODE[7]), 

    sp__memset	PTR void  size(2) Largest target is 60
		 -> bufferAUX(BANK1[20]), bufferSerial(BANK1[60]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 60
		 -> NULL(NULL[0]), bufferSerial(BANK1[60]), 

    aguardaBuffer@str	PTR unsigned char  size(2) Largest target is 12
		 -> STR_36(CODE[12]), STR_34(CODE[3]), STR_33(CODE[6]), STR_24(CODE[2]), 
		 -> STR_22(CODE[3]), STR_19(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), 
		 -> STR_13(CODE[2]), STR_11(CODE[3]), STR_9(CODE[3]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), 

    writeChar@hex	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TIMER in COMRAM

    _TIMER->_lerTransdutor
    _timer->_writeEEPROM16_ext
    i2_getDS1307TimeDate->i2_I2C_Read
    i2_I2C_Restart->i2_I2C_Wait
    i2_I2C_Read->i2_I2C_Wait
    i2_RTC_Init->i2_I2C_Write
    _writeEEPROM16_ext->i2_writeEEPROM_ext
    i2_writeEEPROM_ext->i2_I2C_Write
    i2_writeEEPROM_ext->i2_delay
    i2_I2C_Write->i2_I2C_Wait
    i2_I2C_Stop->i2_I2C_Wait
    i2_I2C_Start->i2_I2C_Wait
    _lerTransdutor->___ftdiv
    _lerTransdutor->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftmul

Critical Paths under _main in BANK0

    _main->_acaoTesteBombas
    _verificarIntervaloTesteBombas->_writeEEPROM_ext
    _tela_testeBombas->_sprintf
    _tela_ajusteRTC->_sprintf
    _setDS1307TimeDate->_I2C_Write
    _DECtoBCD->___awdiv
    _telaPrincipal->_intToFloatStr
    _resetParametros->_clearShiftREG
    _lerParametros->_readEEPROM16_ext
    _readEEPROM16_ext->_readEEPROM_ext
    _informacoes->_sprintf
    _getSinalSIM800L->_atoi
    _getSerial->_sprintf
    _atoi->_getSerial
    _getDS1307TimeDate->_I2C_Write
    _dataLoger->_sprintf
    _criarCaracteresCGRAM->_Lcd_Write_Char
    _configurarEstacionaria->_sprintf
    _configuraTelefones->_comunicarTeste
    _comunicarTeste->_printf
    _atualizarLCD->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _ajusteSP_Bombas->_intToFloatStr
    _acaoTesteBombas->_enviaSMS
    _salvarLOG->_readEEPROM_ext
    _salvarLOG->_writeEEPROM_ext
    _writeEEPROM_ext->_I2C_Write
    _readEEPROM_ext->_I2C_Write
    _I2C_Restart->_I2C_Wait
    _I2C_Read->_I2C_Wait
    _intToFloatStr->_sprintf
    _drenarPressao->_sprintf
    _sprintf->__doprnt
    _acaoBombas->_enviaSMS
    _partidaBombaEstacionaria->_delay
    _enviaSMS->_printf
    _printf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _limparBuffer->_memset
    _aguardaBuffer->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _RTC_Init->_I2C_Write
    _I2C_Write->_DECtoBCD
    _I2C_Stop->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _I2C_Master_Init->___lldiv

Critical Paths under _TIMER in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TIMER in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TIMER in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TIMER in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TIMER in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TIMER in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  365934
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                           _RTC_Init
                         _acaoBombas
                    _acaoTesteBombas
                    _ajusteSP_Bombas
                       _atualizarLCD
                            _btPress
             _configuraRegistradores
                 _configuraTelefones
             _configurarEstacionaria
               _criarCaracteresCGRAM
                          _dataLoger
                              _delay
                  _getDS1307TimeDate
                    _getSinalSIM800L
                        _informacoes
                      _lerParametros
                        _setShiftREG
                            _sprintf
                      _telaPrincipal
                     _tela_ajusteRTC
                   _tela_testeBombas
      _verificarIntervaloTesteBombas
 ---------------------------------------------------------------------------------
 (1) _verificarIntervaloTesteBombas                        0     0      0    5330
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_testeBombas                                     4     4      0   23551
                                             53 BANK0      4     4      0
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _tela_ajusteRTC                                       0     0      0   22555
                              _blink
                            _btPress
                  _setDS1307TimeDate
                            _sprintf
                          _validaRTC
 ---------------------------------------------------------------------------------
 (2) _validaRTC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setDS1307TimeDate                                    3     1      2    4358
                                             12 BANK0      3     1      2
                           _DECtoBCD
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DECtoBCD                                             2     2      0    1902
                                              8 BANK0      2     2      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _telaPrincipal                                        2     2      0   34386
                                             66 BANK0      2     2      0
                              _blink
                            _btPress
                      _clearShiftREG
                      _intToFloatStr
                    _resetParametros
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _resetParametros                                      0     0      0      69
                      _clearShiftREG
 ---------------------------------------------------------------------------------
 (1) _setShiftREG                                          3     3      0     159
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lerParametros                                        2     2      0   11976
                                             20 BANK0      2     2      0
                   _readEEPROM16_ext
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _readEEPROM16_ext                                     6     4      2    3221
                                             14 BANK0      6     4      2
                     _readEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _informacoes                                          0     0      0   13980
                            _btPress
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _getSinalSIM800L                                      4     4      0   28415
                                             70 BANK0      4     4      0
                      _aguardaBuffer
                               _atoi
                              _delay
                          _getSerial
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _getSerial                                           10     7      3   16628
                                             53 BANK0     10     7      3
                             _memset
                            _sprintf
                             _strlen
                             _strstr
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     835
                                             63 BANK0      7     5      2
                             ___wmul
                          _getSerial (ARG)
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _getDS1307TimeDate                                    2     0      2    3431
                                             12 BANK0      2     0      2
                           _BCDtoDEC
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _BCDtoDEC                                             1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _dataLoger                                           12    12      0   18287
                                             53 BANK0     12    12      0
                            ___awdiv
                            _btPress
                     _readEEPROM_ext
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _criarCaracteresCGRAM                                56    56      0     521
                                              4 BANK0     56    56      0
                            _Lcd_Cmd
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _configurarEstacionaria                               0     0      0   23527
                              _blink
                            _btPress
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (1) _configuraTelefones                                   5     5      0   34507
                                             63 BANK0      5     5      0
                              _blink
                            _btPress
                     _comunicarTeste
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _comunicarTeste                                       4     4      0   10821
                                             59 BANK0      4     4      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (1) _configuraRegistradores                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _atualizarLCD                                         9     1      8    2380
                                              8 BANK0      9     1      8
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     3     1      2     573
                                              4 BANK0      3     1      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     888
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _ajusteSP_Bombas                                      2     2      0   39647
                                             66 BANK0      2     2      0
                              _blink
                            _btPress
                      _intToFloatStr
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _blink                                                5     1      4    4217
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _acaoTesteBombas                                     19    19      0   73461
                                             72 BANK0     19    19      0
                            _btPress
                      _clearShiftREG
                      _drenarPressao
                           _enviaSMS
                      _intToFloatStr
           _partidaBombaEstacionaria
                     _readEEPROM_ext
                          _salvarLOG
                            _sprintf
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _salvarLOG                                            3     3      0    8726
                                             14 BANK0      3     3      0
                     _readEEPROM_ext
                    _writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM_ext                                      2     1      1    5330
                                             12 BANK0      2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                              _delay
 ---------------------------------------------------------------------------------
 (2) _readEEPROM_ext                                       2     2      0    3152
                                             12 BANK0      2     2      0
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Restart                                          0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             4     2      2     881
                                              1 BANK0      4     2      2
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (2) _intToFloatStr                                       13    11      2   16028
                                             53 BANK0     13    11      2
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     752
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1060
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _drenarPressao                                        0     0      0   13958
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             20     6     14   13958
                                             33 BANK0     20     6     14
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) _clearShiftREG                                        1     1      0      69
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _btPress                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _acaoBombas                                           3     3      0   11961
                                             72 BANK0      3     3      0
                           _enviaSMS
           _partidaBombaEstacionaria
 ---------------------------------------------------------------------------------
 (2) _partidaBombaEstacionaria                             1     1      0     978
                                              3 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _enviaSMS                                            13    13      0   10983
                                             59 BANK0     13    13      0
                      _aguardaBuffer
                              _delay
                       _limparBuffer
                             _printf
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeChar                                            2     0      2     402
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              26     6     20    4630
                                             33 BANK0     26     6     20
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             25    19      6    3428
                                             12 BANK0     21    15      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _limparBuffer                                         0     0      0    1486
                              _delay
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     552
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _aguardaBuffer                                        2     0      2    3345
                                             19 BANK0      2     0      2
                              _delay
                             _strstr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    1401
                                             15 BANK0      4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     362
                                              6 BANK0      9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               5     1      4     240
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _delay                                                3     1      2     934
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0    2226
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            2     0      2    2226
                                             10 BANK0      2     0      2
                           _DECtoBCD (ARG)
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Wait                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _TIMER                                               19    19      0   17404
                                             48 COMRAM    19    19      0
                      _lerTransdutor
                        _readButtons
                              _timer
 ---------------------------------------------------------------------------------
 (7) _timer                                               12    12      0    2124
                                              8 COMRAM    12    12      0
                  _writeEEPROM16_ext
                         i2_RTC_Init
                i2_getDS1307TimeDate
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (8) i2_getDS1307TimeDate                                  2     0      2     707
                                              5 COMRAM     2     0      2
                         i2_BCDtoDEC
                         i2_I2C_Read
                      i2_I2C_Restart
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Restart                                        0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Read                                           4     2      2     227
                                              1 COMRAM     4     2      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_BCDtoDEC                                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_RTC_Init                                           0     0      0     256
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
 ---------------------------------------------------------------------------------
 (8) _writeEEPROM16_ext                                    3     1      2     591
                                              5 COMRAM     3     1      2
                  i2_writeEEPROM_ext
 ---------------------------------------------------------------------------------
 (8) i2_writeEEPROM_ext                                    2     1      1     426
                                              3 COMRAM     2     1      1
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
                            i2_delay
 ---------------------------------------------------------------------------------
 (9) i2_delay                                              3     1      2      48
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Write                                          2     0      2     256
                                              1 COMRAM     2     0      2
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Stop                                           0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Start                                          0     0      0       0
                         i2_I2C_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Wait                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _readButtons                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _lerTransdutor                                        7     7      0   15213
                                             41 COMRAM     7     7      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
                            _readADC
 ---------------------------------------------------------------------------------
 (8) _readADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) ___lwtoft                                             3     0      3    2564
                                              8 COMRAM     3     0      3
                           ___ftpack
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     328
                                             26 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    3526
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             15     9      6    3480
                                             26 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    4622
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _RTC_Init
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _acaoBombas
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _partidaBombaEstacionaria
       _delay
   _acaoTesteBombas
     _btPress
     _clearShiftREG
     _drenarPressao
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _enviaSMS
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _partidaBombaEstacionaria
       _delay
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _salvarLOG
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
       _writeEEPROM_ext
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
         _delay
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _ajusteSP_Bombas
     _blink
     _btPress
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _atualizarLCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _btPress
   _configuraRegistradores
   _configuraTelefones
     _blink
     _btPress
     _comunicarTeste
       _aguardaBuffer
         _delay
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _delay
       _limparBuffer
         _delay
         _memset
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _writeChar
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _configurarEstacionaria
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _criarCaracteresCGRAM
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _dataLoger
     ___awdiv
     _btPress
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _delay
   _getDS1307TimeDate
     _BCDtoDEC
     _I2C_Read
       _I2C_Wait
     _I2C_Restart
       _I2C_Wait
     _I2C_Start
       _I2C_Wait
     _I2C_Stop
       _I2C_Wait
     _I2C_Write
       _DECtoBCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Wait (ARG)
   _getSinalSIM800L
     _aguardaBuffer
       _delay
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _atoi
       ___wmul
       _getSerial (ARG)
         _memset
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
         _strlen
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _isdigit (ARG)
     _delay
     _getSerial
       _memset
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
       _strlen
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _limparBuffer
       _delay
       _memset
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeChar
   _informacoes
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _lerParametros
     _readEEPROM16_ext
       _readEEPROM_ext
         _I2C_Read
           _I2C_Wait
         _I2C_Restart
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_Write
           _DECtoBCD (ARG)
             ___awdiv
             ___awmod
           _I2C_Wait (ARG)
     _readEEPROM_ext
       _I2C_Read
         _I2C_Wait
       _I2C_Restart
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _setShiftREG
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       ___wmul *
       _isdigit *
       _putch *
   _telaPrincipal
     _blink
     _btPress
     _clearShiftREG
     _intToFloatStr
       ___awdiv
       ___awmod
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _resetParametros
       _clearShiftREG
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _tela_ajusteRTC
     _blink
     _btPress
     _setDS1307TimeDate
       _DECtoBCD
         ___awdiv
         ___awmod
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _validaRTC
   _tela_testeBombas
     _blink
     _btPress
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay
   _verificarIntervaloTesteBombas
     _writeEEPROM_ext
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _DECtoBCD (ARG)
           ___awdiv
           ___awmod
         _I2C_Wait (ARG)
       _delay

 _TIMER (ROOT)
   _lerTransdutor
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           _readADC (ARG)
         _readADC (ARG)
     ___lwtoft
       ___ftpack
       _readADC (ARG)
     _readADC
   _readButtons
   _timer
     _writeEEPROM16_ext
       i2_writeEEPROM_ext
         i2_I2C_Start
           i2_I2C_Wait
         i2_I2C_Stop
           i2_I2C_Wait
         i2_I2C_Write
           i2_I2C_Wait
         i2_delay
     i2_RTC_Init
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_getDS1307TimeDate
       i2_BCDtoDEC
       i2_I2C_Read
         i2_I2C_Wait
       i2_I2C_Restart
         i2_I2C_Wait
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
     i2_writeEEPROM_ext
       i2_I2C_Start
         i2_I2C_Wait
       i2_I2C_Stop
         i2_I2C_Wait
       i2_I2C_Write
         i2_I2C_Wait
       i2_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C5       7       77.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5B      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     43      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C2      15        0.0%
DATA                 0      0     1C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 01 21:45:54 2020

                                                 __size_of_readEEPROM_ext 0056  
                                                             __CFG_CP0$ON 000000  
                                                             __CFG_CP1$ON 000000  
                                                             __CFG_CP2$ON 000000  
                                                             __CFG_CP3$ON 000000  
                                                      __size_of_I2C_Start 000C  
                                                      __size_of_I2C_Write 000E  
                                                __end_of_readEEPROM16_ext 6F08  
                                                             __CFG_CPD$ON 000000  
                                                            ___awdiv@sign 0085  
                                                             __CFG_BOR$ON 000000  
                                                     ___wmul@multiplicand 0082  
                                          __end_of_configurarEstacionaria 2F26  
                                        __end_of_partidaBombaEstacionaria 3A9E  
                                                             __CFG_OSC$HS 000000  
                                                            ___ftadd@exp1 0026  
                                                            ___ftadd@exp2 0025  
                                                            ___ftadd@sign 0024  
                                                             __CFG_WDT$ON 000000  
                                                                     l300 7268  
                                                                     l301 7274  
                                                                     l310 2BF8  
                                                                     l302 7280  
                                                                     l311 2A6C  
                                                                     l400 18CA  
                                                                     l320 2B68  
                                                                     l313 2ABC  
                                                                     l330 24B4  
                                                                     l322 2B90  
                                                                     l331 268C  
                                                                     l404 1916  
                                                                     l500 2FF8  
                                                                     l332 24D4  
                                                                     l308 2BD6  
                                                                     l324 2BBA  
                                                                     l316 2AEC  
                                                                     l421 3D2E  
                                                                     l333 2504  
                                                                     l325 2BCA  
                                                                     l309 2A44  
                                                                     l406 1924  
                                                                     l502 2FF0  
                                                                     l342 257A  
                                                                     l318 2B40  
                                                                     l335 2524  
                                                                     l319 2BBC  
                                                                     l360 1970  
                                                                     l520 3A7C  
                                                                     l512 39FC  
                                                                     l504 3024  
                                                                     l265 7024  
                                                                     l361 165C  
                                                                     l329 2656  
                                                                     l345 25F4  
                                                                     l273 33B2  
                                                                     l441 78EE  
                                                                     l362 168C  
                                                                     l522 3A92  
                                                                     l514 3A18  
                                                                     l506 3052  
                                                                     l346 262A  
                                                                     l338 254E  
                                                                     l274 332E  
                                                                     l371 1718  
                                                                     l523 3A98  
                                                                     l507 306A  
                                                                     l347 2616  
                                                                     l275 3376  
                                                                     l443 790A  
                                                                     l372 181E  
                                                                     l380 179C  
                                                                     l364 16C0  
                                                                     l356 1634  
                                                                     l516 3A28  
                                                                     l436 6E78  
                                                                     l532 6DBA  
                                                                     l540 0958  
                                                                     l348 2620  
                                                                     l700 3BEA  
                                                                     l444 7960  
                                                                     l373 1768  
                                                                     l517 3A2E  
                                                                     l541 0974  
                                                                     l358 1930  
                                                                     l390 1880  
                                                                     l374 180A  
                                                                     l518 3A4C  
                                                                     l550 0A5C  
                                                                     l702 3C1A  
                                                                     l391 1870  
                                                                     l367 16EA  
                                                                     l359 163C  
                                                                     l519 3A68  
                                                                     l551 0A9C  
                                                                     l384 17B6  
                                                                     l376 1782  
                                                                     l480 74B2  
                                                                     l544 0DC2  
                                                                     l560 0B62  
                                                                     l640 31D0  
                                                                     l720 22F2  
                                                                     l528 71A8  
                                                                     l561 0B74  
                                                                     l553 0AAE  
                                                                     l545 09E4  
                                                                     l721 230C  
                                                                     l297 7244  
                                                                     l490 7514  
                                                                     l554 0ABA  
                                                                     l538 0950  
                                                                     l642 326E  
                                                                     l730 2432  
                                                                     l722 2326  
                                                                     l298 7250  
                                                                     l395 1888  
                                                                     l483 74C0  
                                                                     l571 0C28  
                                                                     l547 0A0A  
                                                                     l707 7098  
                                                                     l731 2442  
                                                                     l723 2340  
                                                                     l299 725C  
                                                                     l652 71BE  
                                                                     l388 182C  
                                                                     l580 0CA2  
                                                                     l564 0BBC  
                                                                     l708 7080  
                                                                     l644 32A0  
                                                                     l732 245A  
                                                                     l724 23A8  
                                                                     l716 2360  
                                                                     l653 71C2  
                                                                     l397 189E  
                                                                     l485 74CE  
                                                                     l573 0C38  
                                                                     l565 0C0C  
                                                                     l557 0B06  
                                                                     l901 1BAA  
                                                                     l725 23D6  
                                                                     l717 22BE  
                                                                     l654 71CC  
                                                                     l590 0D3A  
                                                                     l582 0CCA  
                                                                     l558 0B46  
                                                                     l902 1A82  
                                                                     l670 3C3E  
                                                                     l830 1F56  
                                                                     l822 1EB8  
                                                                     l734 2482  
                                                                     l726 2406  
                                                                     l718 238A  
                                                                     l750 213A  
                                                                     l655 71D0  
                                                                     l495 2F60  
                                                                     l479 74F4  
                                                                     l487 74DC  
                                                                     l911 1B12  
                                                                     l903 1AA8  
                                                                     l671 3CF4  
                                                                     l831 1F50  
                                                                     l639 31EE  
                                                                     l735 2490  
                                                                     l719 22D8  
                                                                     l743 20DA  
                                                                     l656 71DA  
                                                                     l496 2F98  
                                                                     l488 74EE  
                                                                     l912 1B38  
                                                                     l904 1ABA  
                                                                     l672 3C64  
                                                                     l832 1F96  
                                                                     l657 71DE  
                                                                     l497 2F92  
                                                                     l913 1B4A  
                                                                     l673 3C8A  
                                                                     l737 249C  
                                                                     l745 2248  
                                                                     l753 216E  
                                                                     l658 71E8  
                                                                     l594 0D80  
                                                                     l586 0D02  
                                                                     l906 1BCA  
                                                                     l674 3CB0  
                                                                     l682 6F92  
                                                                     l826 1EF2  
                                                                     l818 1E56  
                                                                     l762 220A  
                                                                     l746 2108  
                                                                     l770 270C  
                                                                     l659 71EC  
                                                                     l499 2FC0  
                                                                     l579 0C80  
                                                                     l915 1B5A  
                                                                     l907 1ACA  
                                                                     l851 13B8  
                                                                     l843 12E8  
                                                                     l835 2042  
                                                                     l739 24AA  
                                                                     l596 0DB4  
                                                                     l916 1B80  
                                                                     l908 1AF0  
                                                                     l860 1408  
                                                                     l852 1370  
                                                                     l756 21A2  
                                                                     l780 27B2  
                                                                     l940 0F3C  
                                                                     l597 0E16  
                                                                     l917 1B92  
                                                                     l909 1B02  
                                                                     l669 3CD6  
                                                                     l829 1F32  
                                                                     l749 2274  
                                                                     l765 223E  
                                                                     l781 27D8  
                                                                     l773 2764  
                                                                     l941 1090  
                                                                     l870 14EC  
                                                                     l862 144E  
                                                                     l694 3BBC  
                                                                     l782 27EA  
                                                                     l950 102C  
                                                                     l942 0F44  
                                                                     l919 1BA2  
                                                                     l687 3B14  
                                                                     l863 1470  
                                                                     l855 13D4  
                                                                     l847 132A  
                                                                     l759 21D6  
                                                                     l775 2842  
                                                                     l951 1034  
                                                                     l943 0FA0  
                                                                     l880 15EE  
                                                                     l872 1532  
                                                                     l864 1492  
                                                                     l696 3BC8  
                                                                     l776 2778  
                                                                     l960 10C4  
                                                                     l952 103C  
                                                                     l944 0FFC  
                                                                     l873 1554  
                                                                     l849 133E  
                                                                     l697 3BD8  
                                                                     l785 27F6  
                                                                     l777 279E  
                                                                     l945 1004  
                                                                     l937 0F18  
                                                                     l858 15F6  
                                                                     l874 1576  
                                                                     l786 27FE  
                                                                     l970 116E  
                                                                     l962 10E4  
                                                                     l946 100C  
                                                                     l938 0F2C  
                                                                     l859 13EE  
                                                                     l891 2F20  
                                                                     l779 285C  
                                                                     l787 2824  
                                                                     l939 1046  
                                                                     l947 1014  
                                                                     l868 1610  
                                                                     l892 2ED0  
                                                                     l980 1248  
                                                                     l956 11D2  
                                                                     l972 1194  
                                                                     l964 1104  
                                                                     l948 101C  
                                                                     l869 14D2  
                                                                     l885 2E68  
                                                                     l789 2838  
                                                                     l981 125C  
                                                                     l957 10A4  
                                                                     l949 1024  
                                                                     l878 15C0  
                                                                     l982 126C  
                                                                     l966 1124  
                                                                     l887 2F0C  
                                                                     l895 2F02  
                                                                     l959 1208  
                                                                     l975 11C4  
                                                                     l888 2E96  
                                                                     l976 121A  
                                                                     l968 1144  
                                                                     l889 2EBC  
                                                                     l978 122C  
                                                                     l899 1A6E  
                                                            __CFG_CPB$OFF 000000  
                                                                     _PEN 007E2A  
                                                                     _SEN 007E28  
                                                                     _cbf 0062  
                                                                     _rtc 0075  
                                                             ?i2_I2C_Read 0002  
                                                            __CFG_BORV$20 000000  
                                                            ___awmod@sign 0085  
                                                             ?i2_I2C_Wait 0001  
                                                             ?i2_I2C_Stop 0001  
                                                                     prod 000FF3  
                                                                     tosl 000FFD  
                                                                     wreg 000FE8  
                                                    __size_of_I2C_Restart 000C  
                                                             ?i2_BCDtoDEC 0001  
                                                __size_of_ajusteSP_Bombas 025A  
                                                            __CFG_LVP$OFF 000000  
                                                            ___ftdiv@cntr 0024  
                                                 _flagMudancaEstadoSaidas 0070  
                                                            ___ftdiv@sign 0029  
                                                                    l1100 0346  
                                                                    l1110 0492  
                                                                    l1103 0352  
                                                                    l1120 05F8  
                                                                    l1112 04A6  
                                                                    l1104 0394  
                                                                    l1041 6E12  
                                                                    l1121 06FC  
                                                                    l1113 04CC  
                                                                    l1105 03C0  
                                                                    l1042 6DFA  
                                                                    l1114 0574  
                                                                    l1123 064A  
                                                                    l1140 0808  
                                                                    l1124 0676  
                                                                    l1108 03D6  
                                                                    l1141 0896  
                                                                    l1133 0748  
                                                                    l1109 0440  
                                                                    l1142 08C2  
                                                                    l1134 0774  
                                                                    l1118 05C8  
                                                                    l1310 3704  
                                                                    l1127 06C4  
                                                                    l1119 05EE  
                                                                    l1128 06F0  
                                                                    l1080 01B6  
                                                                    l1312 3750  
                                                                    l1137 07D4  
                                                                    l1081 01AC  
                                                                    l1057 7854  
                                                                    l1138 0800  
                                                                    l1075 0120  
                                                                    l1331 3F6A  
                                                                    l1059 785E  
                                                                    l1315 37A6  
                                                                    l1076 019A  
                                                                    l1332 3F60  
                                                                    l1316 3764  
                                                                    l1093 0538  
                                                                    l1077 016C  
                                                                    l1341 762C  
                                                                    l1309 370C  
                                                                    l1094 02A6  
                                                                    l1086 0214  
                                                                    l1350 768C  
                                                                    l1342 763A  
                                                                    l1318 37DC  
                                                                    l1095 02E2  
                                                                    l1335 3F8E  
                                                                    l1319 37E6  
                                                                    l1520 7818  
                                                                    l1088 04E0  
                                                                    l1096 02F6  
                                                                    l1336 3F9A  
                                                                    l1328 3F36  
                                                                    l1344 7654  
                                                                    l1521 7828  
                                                                    l1097 02EE  
                                                                    l1337 3FAA  
                                                                    l1329 3F48  
                                                                    l1345 764A  
                                                                    l1516 77E0  
                                                                    l1348 7670  
                                                                    l1517 77D2  
                                                                    l1349 767C  
                                                                    l1570 73FE  
                                                                    l1490 6C94  
                                                                    l1580 7298  
                                                                    l1573 742C  
                                                                    l1574 7438  
                                                                    l1735 7398  
                                                                    l1583 72BE  
                                                                    l1736 7390  
                                                                    l1584 72CA  
                                                                    l5041 7A92  
                                                                    l1593 6F28  
                                                                    l1569 7408  
                                                                    l6001 74E8  
                                                                    l1594 6F14  
                                                                    l5027 7A04  
                                                                    l1747 79D4  
                                                                    l1579 72A2  
                                                                    l1748 796A  
                                                                    l5053 70E2  
                                                                    l1781 7A76  
                                                                    l1749 79A8  
                                                                    l1782 7A02  
                                                                    l1783 7A6C  
                                                                    l5231 057A  
                                                                    l1776 70C6  
                                                                    l5075 79F8  
                                                                    l5085 6F16  
                                                                    l6125 6F88  
                                                                    l5079 6DFC  
                                                                    l5431 7028  
                                                                    l5187 0354  
                                                                    l5197 03D8  
                                                                    l7081 3264  
                                                                    l7067 31C6  
                                                                    l5469 6E6E  
                                                                    l7149 3B0A  
                                                                    l6605 2B92  
                                                                    l7093 3296  
                                                                    l7229 2358  
                                                                    l4951 6B96  
                                                                    l7183 3BCE  
                                                                    l7175 3BB2  
                                                                    l5673 37A0  
                                                                    l6625 78E4  
                                                                    l7515 1366  
                                                                    l6593 2B42  
                                                                    l5939 3D26  
                                                                    l6773 096A  
                                                                    l6599 2B6A  
                                                                    STR_1 7FE8  
                                                                    STR_2 7FE8  
                                                                    STR_3 7F89  
                                                                    STR_4 7FDE  
                                                                    STR_5 7FFA  
                                                                    STR_6 7FB1  
                                                                    STR_7 7FB1  
                                                                    STR_8 7FDE  
                                                                    STR_9 7FFA  
                                                                    u5100 0326  
                                                                    u5110 032C  
                                                                    u5030 01DA  
                                                                    u5040 0202  
                                                                    u5210 0512  
                                                                    u5107 031C  
                                                                    u5060 0260  
                                                                    u5028 0150  
                                                                    u6020 264A  
                                                                    u5037 01D0  
                                                                    u5070 029C  
                                                                    u5047 01F8  
                                                                    u5400 0786  
                                                                    u5217 0508  
                                                                    u5250 05AC  
                                                                    u5067 0256  
                                                                    u4700 73BC  
                                                                    u5180 0432  
                                                                    u5148 0378  
                                                                    u6220 18E6  
                                                                    u7100 2B62  
                                                                    u5077 0292  
                                                                    u5190 047C  
                                                                    u7110 2B7A  
                                                                    u4800 72A8  
                                                                    u5328 062E  
                                                                    u5520 3F70  
                                                                    u6240 3D18  
                                                                    u7120 2B8A  
                                                                    u5370 0706  
                                                                    u5178 03FC  
                                                                    u6250 3D24  
                                                                    u7130 2BA2  
                                                                    u8010 3290  
                                                                    u4707 73B2  
                                                                    u5187 0428  
                                                                    u5179 0436  
                                                                    u5460 08CE  
                                                                    u7140 2BB2  
                                                                    _RCIF 007CF5  
                                                                    _RCEN 007E2B  
                                                                    u5197 0472  
                                                                    u4830 7A34  
                                                                    u4910 79EE  
                                                                    u5470 0900  
                                                                    u5438 07B8  
                                                                    u5358 06A8  
                                                                    u8110 3C28  
                                                                    u8030 32C2  
                                                                    u5480 090A  
                                                                    u8120 3C30  
                                                                    u7080 2B3A  
                                                                    u4770 740E  
                                                                    u5458 087A  
                                                                    u5650 6E92  
                                                                    u8050 3B6A  
                                                                    u7090 2B52  
                                                                    u7170 794C  
                                                                    u5580 765A  
                                                                    u4940 6F68  
                                                                    u6460 6FB0  
                                                                    u8060 3B80  
                                                                    u5477 08F6  
                                                                    u5398 072C  
                                                                    u6480 70A2  
                                                                    u8160 2416  
                                                                    u4955 6F6C  
                                                                    u7540 098E  
                                                                    u5790 33D4  
                                                                    u7720 0C78  
                                                                    u6930 77E6  
                                                                    u9075 7474  
                                                                    u7670 0BFC  
                                                                    u8710 1446  
                                                                    u9407 711E  
                                                                    u9417 6E04  
                                                                    u7690 0C1C  
                                                                    u8650 13B2  
                                                                    u9427 76AA  
                                                                    u8820 15A6  
                                                                    u9437 76C6  
                                                                    u8750 14C2  
                                                                    u9447 76E0  
                                                                    u9457 6CBA  
                                                                    u9377 7938  
                                                                    u9387 3B9A  
                                                                    u8780 152A  
                                                                    u9397 710A  
                                                                    u7990 31E2  
                                                                    _RSEN 007E29  
                                                            __CFG_WRT0$ON 000000  
                                                           _enviaSMS$1211 00BD  
                                                           _enviaSMS$1231 00C5  
                                                            __CFG_WRT1$ON 000000  
                                                           _enviaSMS$1224 00BF  
                                                           _enviaSMS$1225 00C1  
                                                           _enviaSMS$1226 00C3  
                                                            __CFG_WRT2$ON 000000  
                                                            __CFG_WRT3$ON 000000  
                                                   writeEEPROM16_ext@data 0006  
                                                            __CFG_STVR$ON 000000  
                                                                    __dia 00EC  
                                                                    __ano 00EA  
                                                                    __hor 00ED  
                                                                    __mes 00EB  
                                                                    __min 00EE  
                                                       ?_Lcd_Write_String 0084  
                                                                    __sec 00EF  
                                                          ?_drenarPressao 0001  
                                                           __CFG_EBTRB$ON 000000  
                                                                    _atoi 3700  
                                                                    _main 0E1C  
                                             __end_ofi2_getDS1307TimeDate 3608  
                                                                    _tel1 01B5  
                                                                    _tel2 01A9  
                                                            ___ftpack@arg 0001  
                                                            ___ftpack@exp 0004  
                                                        __end_of_I2C_Read 6F7C  
                                              __end_of_configuraTelefones 1620  
                                                                    fsr0h 000FEA  
                                                                    fsr1h 000FE2  
                                                                    indf0 000FEF  
                                                                    fsr2h 000FDA  
                                                                    fsr0l 000FE9  
                                                                    indf2 000FDF  
                                                                    fsr1l 000FE1  
                                                                    fsr2l 000FD9  
                                                                    btemp 007E  
                                                        __end_of_I2C_Wait 6BEC  
                                                        __end_of_I2C_Stop 6B48  
                                                 __size_of_tela_ajusteRTC 0236  
                                                        _etapaComunicacao 004C  
                                                            ?i2_I2C_Start 0001  
                                                                    prodh 000FF4  
                                                                    prodl 000FF3  
                                                            ?i2_I2C_Write 0002  
                                                         __end_ofi2_delay 6D5A  
                                                                    start 0118  
                                                      ??_Lcd_Write_String 0086  
                                                  __size_of_lerTransdutor 0240  
                                            partidaBombaEstacionaria@acao 0083  
                                                        __end_of_BCDtoDEC 6C06  
                                                         __end_of_Lcd_Cmd 6CCC  
                                                  __size_ofi2_I2C_Restart 000C  
                                                          clearShiftREG@i 0080  
                                                           ?_atualizarLCD 0088  
                                                            ___ftmul@cntr 0019  
                                                            ___param_bank 000000  
                                                            ___ftmul@sign 001A  
                                                        __end_of_DECtoBCD 716C  
                                               __size_of_tela_testeBombas 01D0  
                                                     _timerVerificarSinal 00FF  
                                                           _lerParametros 31A4  
                                                            ___fttol@exp1 0029  
                                                         _executandoTeste 00F1  
                                                            ___fttol@lval 0025  
                                                        ?_I2C_Master_Init 008D  
                                                            ?_readButtons 0001  
                                                           __CFG_OSCS$OFF 000000  
                                                 _configuraTelefones$1476 00C1  
                                                             ?i2_RTC_Init 0001  
                                                                   ?_atoi 00BF  
                                                                   ?_main 0001  
                                                                   _ACKEN 007E2C  
                                                                   _ACKDT 007E2D  
                                                         __end_of___awdiv 3FB8  
                                                         __end_of___ftadd 2A32  
                                                                   STR_10 7ECC  
                                                                   STR_11 7FFA  
                                                                   STR_20 7ECC  
                                                                   STR_12 7D43  
                                                                   STR_13 7FFD  
                                                                   STR_21 7FAA  
                                                                   STR_30 7FD2  
                                                                   STR_22 7FFA  
                                                                   STR_14 7AD3  
                                                                   STR_23 7D43  
                                                                   STR_31 7FFA  
                                                                   STR_15 7ED8  
                                                                   STR_24 7FFD  
                                                                   STR_32 7FD2  
                                                                   STR_16 7FFA  
                                                                   STR_40 7E11  
                                                                   STR_33 7FD8  
                                                                   STR_17 7FD8  
                                                                   STR_41 7DF1  
                                                                   STR_25 7BB9  
                                                                   STR_18 7FDE  
                                                                   STR_34 7FFA  
                                                                   STR_50 7FE3  
                                                                   STR_42 7CF7  
                                                                   STR_26 7B51  
                                                                   STR_27 7FFA  
                                                                   STR_19 7FFA  
                                                                   STR_35 7F20  
                                                                   STR_51 7E3E  
                                                                   STR_43 7D0A  
                                                                   STR_52 7FFA  
                                                                   STR_28 7FD2  
                                                                   STR_44 7F92  
                                                                   STR_60 7EFC  
                                                                   STR_36 7EF0  
                                                         __end_of___awmod 769A  
                                                                   STR_37 7FAA  
                                                                   STR_29 7FFA  
                                                                   STR_53 7FE3  
                                                                   STR_45 7F57  
                                                                   STR_61 7C93  
                                                                   STR_46 7EBF  
                                                                   STR_54 7E4D  
                                                                   STR_70 7E20  
                                                                   STR_62 7D8B  
                                                                   STR_38 7C6B  
                                                                   STR_55 7FFA  
                                                                   STR_71 7FC6  
                                                                   STR_39 7E5C  
                                                                   STR_47 7D9D  
                                                                   STR_63 7C2C  
                                                                   STR_56 7FE3  
                                                                   STR_80 7F7F  
                                                                   STR_48 7F41  
                                                                   STR_72 7E2F  
                                                                   STR_64 7C41  
                                                                   STR_81 7FFA  
                                                                   STR_49 7FFA  
                                                                   STR_57 7DE1  
                                                                   STR_65 7C7F  
                                                                   STR_73 7C56  
                                                                   STR_82 7FE3  
                                                                   STR_90 7F9B  
                                                                   STR_66 7D30  
                                                                   STR_74 7CA7  
                                                                   STR_58 7C17  
                                                                   STR_67 7E11  
                                                                   STR_83 7F2B  
                                                                   STR_59 7DBF  
                                                                   STR_91 7CCF  
                                                                   STR_75 7CBB  
                                                                   STR_76 7F4C  
                                                                   STR_84 7E96  
                                                                   STR_92 7DAE  
                                                                   STR_68 7CE3  
                                                                   STR_85 7FFA  
                                                                   STR_77 7FF6  
                                                                   STR_69 7FCC  
                                                                   STR_93 7F14  
                                                                   STR_94 7ED8  
                                                                   STR_86 7FE3  
                                                                   STR_78 7FF2  
                                                                   STR_95 7FB8  
                                                                   STR_87 7EA4  
                                                                   STR_79 7BF8  
                                                                   STR_88 7FFA  
                                                                   STR_96 7FBF  
                                                                   STR_89 7FE3  
                                                                   STR_97 7F1D  
                                                                   STR_98 7EB2  
                                                                   STR_99 7DD0  
                                                         __end_of___ftdiv 39BA  
                                                            ?_informacoes 0001  
                                                         __end_of___lldiv 783E  
                                                         __end_of___ftmul 3700  
                                                                   _T0CON 000FD5  
                                                         ___awdiv@divisor 0082  
                                                         __end_of___fttol 38D4  
                                                         __end_of___lwdiv 7446  
                                                         __end_of___lwmod 72D8  
                                                                   i2l231 6C5C  
                                                                   i2l240 1D12  
                                                                   i2l242 1E0A  
                                                                   i2l243 1DD4  
                                                                   i2l236 1BFC  
                                                                   i2l238 1CDA  
                                                                   i2l601 2C12  
                                                                   i2l611 2C64  
                                                                   i2l603 2C1C  
                                                                   i2l621 2CB6  
                                                                   i2l613 2C76  
                                                                   i2l605 2C32  
                                                                   i2l470 75D8  
                                                                   i2l623 2CC0  
                                                                   i2l615 2C80  
                                                                   i2l607 2C3C  
                                                                   i2l472 75EE  
                                                                   i2l464 7598  
                                                                   i2l473 75F8  
                                                                   i2l633 2D3A  
                                                                   i2l625 2CD6  
                                                                   i2l617 2C96  
                                                                   i2l609 2C5A  
                                                                   i2l466 75AE  
                                                                   i2l634 2DB8  
                                                                   i2l475 760E  
                                                                   i2l467 75B8  
                                                                   i2l635 2D60  
                                                                   i2l627 2CE0  
                                                                   i2l619 2CA0  
                                                                   i2l636 2D9E  
                                                                   i2l628 2D02  
                                                                   i2l469 75CE  
                                                                   i2l930 00BC  
                                                                   i2l931 00C8  
                                                                   i2l928 008C  
                                                         ___awdiv@counter 0084  
                                                                   _RCREG 000FAE  
                                                                   _TMR0H 000FD7  
                                                                   _TIMER 0008  
                                                                   _TMR0L 000FD6  
                                                                   _SPBRG 000FAF  
                                                         __end_of__doprnt 091A  
                                                 __size_of_Lcd_Set_Cursor 00C4  
                                                                   _TXREG 000FAD  
                                                         _writeEEPROM_ext 71F2  
                                                           __CFG_PWRT$OFF 000000  
                                                         __end_of_btPress 751A  
                                                          __CFG_EBTR0$OFF 000000  
                                                          __CFG_EBTR1$OFF 000000  
                                                          __CFG_EBTR2$OFF 000000  
                                                          __CFG_EBTR3$OFF 000000  
                                                           __CFG_WRTB$OFF 000000  
                                                                   __b_ok 0059  
                                                           __CFG_WRTC$OFF 000000  
                                                           __CFG_WRTD$OFF 000000  
                                                         __end_of_readADC 6C78  
                                                                   _delay 6DF6  
                                                                   _blink 706A  
                                                         __end_of_dpowers 7AD3  
                                                                   _line1 0180  
                                                                   _line2 016B  
                                                                   _line3 0156  
                                                                   _line4 0141  
                                                         __end_of_isdigit 6CA0  
                                                  ??_criarCaracteresCGRAM 0084  
                                                                   _shift 0044  
                                                           ___ftpack@sign 0005  
                                                                   _timer 2BFE  
                                                                   atoi@a 00C4  
                                                        __end_of_RTC_Init 6ED0  
                                                                   atoi@s 00BF  
                                                                   _putch 6B90  
                                                       __end_of_I2C_Start 6B3C  
                                                  _flagEstacionariaLigada 00F0  
                                                       __end_of_I2C_Write 6B70  
                                                                   pclath 000FFA  
                                                                   tablat 000FF5  
                                                  __size_of_intToFloatStr 0094  
                                                                   status 000FD8  
                                                   __end_of_telaPrincipal 24B0  
                                                                   wtemp6 007F  
                                                         __end_of_sprintf 4000  
                                                          _comunicarTeste 24B0  
                                                         __end_of_strncmp 7A98  
                                                   i2writeEEPROM_ext@data 0004  
                                                        __end_of_Lcd_Init 7722  
                                                          ??_atualizarLCD 0090  
                                              __size_of_getDS1307TimeDate 0134  
                                              __size_of_setDS1307TimeDate 0112  
                                                        __end_of_Lcd_Port 71F2  
                                                     __size_ofi2_I2C_Read 0036  
                                                  _tentativasVerificarGSM 0074  
                                                     __size_ofi2_I2C_Wait 0018  
                                                         __initialization 7722  
                                                           _dtl_principal 0052  
                                                     __size_ofi2_I2C_Stop 000C  
                                                          ?_lerParametros 0001  
                                                            __end_of_atoi 37EC  
                                                            __end_of_main 129A  
                                                   __end_of_aguardaBuffer 702E  
                                                     __size_ofi2_BCDtoDEC 0016  
                                                                  ??_atoi 00C1  
                                                                  ??_main 00DB  
                                                           ___fttol@sign1 0024  
                                                            i2I2C_Write@d 0002  
                                                           _status_jockey 00FE  
                                      lerParametros@verifica_memoria_nova 0094  
                                                      __size_of_Lcd_Clear 0012  
                                                           __activetblptr 000002  
                                                                  ?_TIMER 0001  
                                                           _lerTransdutor 1BD0  
                                                   __end_of_clearShiftREG 6E98  
                                                           i2_I2C_Restart 6B24  
                                                    _tempo_limite_partida 0068  
                                                               I2C_Read@a 0081  
                                                                  TIMER@c 0043  
                                                            ?_setShiftREG 0001  
                                                         __CFG_CCP2MUX$ON 000000  
                                                      readEEPROM_ext@data 008D  
                                                                  ?_delay 0080  
                                                                  ?_blink 0080  
                                                                  _ADCON0 000FC2  
                                                                  _ADCON1 000FC1  
                                                                  STR_100 7D1D  
                                                                  STR_101 7E88  
                                                                  STR_110 7F9B  
                                                                  STR_102 7FED  
                                                                  STR_111 7CCF  
                                                                  STR_103 7EE4  
                                                                  STR_104 7FED  
                                                                  STR_120 7F6B  
                                                                  STR_112 7E7A  
                                                                  STR_113 7F1D  
                                                                  STR_121 7F08  
                                                                  STR_105 7D79  
                                                                  STR_114 7ED8  
                                                                  STR_106 7F36  
                                                                  STR_122 7E6B  
                                                                  _ADRESH 000FC4  
                                                                  STR_107 7F41  
                                                                  STR_123 7FA3  
                                                                  STR_115 7F61  
                                                                  STR_108 7E3E  
                                                                  STR_116 7E01  
                                                                  STR_109 7E4D  
                                                                  STR_117 7D55  
                                                                  STR_118 7F75  
                                                                  _ADRESL 000FC3  
                                                                  STR_119 7D67  
                                                        ___awdiv@dividend 0080  
                                                                  ?_timer 0001  
                                                                  ?_putch 0001  
                                                        __end_of___ftpack 3E82  
                                                          lerTransdutor@i 002A  
                                                         ??_drenarPressao 00B5  
                                                               ??i2_delay 0003  
                                                  __end_of_comunicarTeste 2692  
                                                                  i2l1041 6D42  
                                                                  i2l1042 6D2C  
                                                                  i2l1410 28E6  
                                                                  i2l1420 2948  
                                                                  i2l1421 293C  
                                                                  i2l1430 2982  
                                                                  i2l1406 28B8  
                                                                  i2l1415 2954  
                                                                  i2l1432 29B6  
                                                                  i2l1433 29D4  
                                                                  i2l1441 391A  
                                                                  i2l1434 2A06  
                                                                  i2l1442 395A  
                                                                  i2l1443 3982  
                                                                  i2l1460 36AE  
                                                                  i2l1381 3E50  
                                                                  i2l1429 298E  
                                                                  i2l1461 36C0  
                                                                  i2l1382 3E44  
                                                                  i2l1375 3DEC  
                                                                  i2l1447 3EB4  
                                                                  i2l1376 3DE0  
                                                                  i2l1448 3EE6  
                                                                  i2l1456 364E  
                                                                  i2l1457 3682  
                                                                  i2l1378 3E24  
                                                                  i2l1458 3694  
                                                                  i2l1379 3E0C  
                                                                  i2l1483 389C  
                                                                  i2l1484 388E  
                                                                  i2l1477 3872  
                                                                  i2l1486 38BC  
                                                                  i2l1478 3860  
                                                                  i2l5415 6D2E  
                                                                  i2l6313 36FA  
                                                                  i2l6219 2A2C  
                                                                  i2l5543 3E7C  
                                                                  _INTCON 000FF2  
                                                                  i2l6265 39B4  
                                                                  i2l6377 38CE  
                                                                  i2l4947 3F14  
                                                                  i2l4949 3F18  
                                                                  i2l6489 1BF2  
                                                        __end_of___lwtoft 6C50  
                                                                  u650_41 2888  
                                                                  u670_41 38E6  
                                                                  u672_41 3900  
                                                               ??_Lcd_Cmd 0081  
                                                                  u649_41 2874  
                                                                  u675_41 361A  
                                                                  u684_41 37FE  
                                                                  _TMR0IF 007F92  
                                                                  u677_41 3634  
                                                          __CFG_WDTPS$128 000000  
                                       __size_of_partidaBombaEstacionaria 00E4  
                                                 __size_of_Lcd_Write_Char 0042  
                                                                  _SSPADD 000FC8  
                                                                  _SSPBUF 000FC9  
                                               ?_partidaBombaEstacionaria 0001  
                                                     __size_ofi2_RTC_Init 0032  
                                                       ??_ajusteSP_Bombas 00C2  
                                                 writeEEPROM16_ext@adress 0008  
                                                     _dias_restante_teste 00E8  
                                                ??_configuraRegistradores 0080  
                                                                  __b_esc 005F  
                                                                  ___ftge 3E82  
                                                          _readEEPROM_ext 72D8  
                                                                  ___wmul 6CCC  
                                                        __end_of_enviaSMS 1976  
                                                               ??___awdiv 0084  
                                                            enviaSMS@tipo 00C7  
                                                               ??___ftadd 0021  
                                                               ??___awmod 0084  
                                                               ??___ftdiv 0021  
                                                         _getSinalSIM800L 2A32  
                                                               ??___lldiv 0088  
                                                               ??___ftmul 0012  
                                                               ??___fttol 001F  
                                                                  _blinkk 0063  
                                                               ??___lwdiv 0084  
                                                               ??___lwmod 008B  
                                                 _habilitaTesteAutomatico 006F  
                                   __end_of_verificarIntervaloTesteBombas 71AE  
                                  __size_of_verificarIntervaloTesteBombas 0042  
                                           _verificarIntervaloTesteBombas 716C  
                                                 __end_of_writeEEPROM_ext 7238  
                                                           ?_limparBuffer 0001  
                                                               ??__doprnt 0092  
                                                                  _memset 6F08  
                                                                  delay@x 0080  
                                                                  clear_0 7780  
                                                                  clear_1 778C  
                                                                  clear_2 7798  
                                                        ___awdiv@quotient 0086  
                                                                  blink@i 0084  
                                                         ___awmod@divisor 0082  
                                                               ??_btPress 0080  
                                                           _intToFloatStr 783E  
                                                            __doprnt@flag 009B  
                                                         ___awmod@counter 0084  
                                           setDS1307TimeDate@ptrToUserVal 008C  
                                                                  _printf 702E  
                                                            __doprnt@prec 0096  
                                                                  _strchr 70A8  
                                                                  _strlen 7384  
                                                                  _strstr 7966  
                                                          ?_lerTransdutor 0001  
                                                   ___ftmul@f3_as_product 0016  
                                                           dataLoger@logs 00C0  
                                                               ??_readADC 0003  
                                                            __pdataCOMRAM 007C  
                                                               ??_isdigit 0080  
                                                          ?i2_I2C_Restart 0001  
                                                               ?_I2C_Read 0081  
                                                               ?_I2C_Wait 0001  
                                                               ?_I2C_Stop 0001  
                                                            __mediumconst 7A98  
                                                                  tblptrh 000FF7  
                                                                  tblptrl 000FF6  
                                                                  tblptru 000FF8  
                                                                  putch@c 0080  
                                                               ?_BCDtoDEC 0001  
                                                               ??_sprintf 00AF  
                                                               ??_strncmp 008C  
                                                               ?_DECtoBCD 0001  
                                                         Lcd_Set_Cursor@a 0084  
                                                         Lcd_Set_Cursor@b 0083  
                                                         Lcd_Set_Cursor@y 0086  
                                                         Lcd_Set_Cursor@z 0085  
                                                         ?_comunicarTeste 0001  
                                                              __accesstop 0080  
                                                 __end_of__initialization 779E  
                                                              ___ftadd@f1 001B  
                                                              ___ftadd@f2 001E  
                                                          _tela_ajusteRTC 2048  
                                                              ___ftge@ff1 0001  
                                                              ___ftge@ff2 0004  
                                                       __end_of_Lcd_Clear 6B90  
                                                        _etapaTesteBombas 006E  
                                                           ___rparam_used 000001  
                                                              ___ftdiv@f1 001B  
                                                              ___ftdiv@f2 001E  
                                                              ___ftdiv@f3 0025  
                                                         ??_lerParametros 0094  
                                                           __end_of_TIMER 0118  
                                                              _acaoBombas 2F26  
                                                  __end_of_readEEPROM_ext 732E  
                                                     _telefoneSelecionado 00F8  
                                                              ___ftmul@f1 000C  
                                                              ___ftmul@f2 000F  
                                                    __size_ofi2_I2C_Start 000C  
                                                              ___fttol@f1 001B  
                                                    __size_ofi2_I2C_Write 000E  
                                                        _tela_testeBombas 2692  
                                                          __pcstackCOMRAM 0001  
                                                        _status_principal 00FD  
                                                            __pidataBANK0 6B05  
                                                            __pidataBANK1 6B01  
                                                      __size_of_dataLoger 0238  
                                                           __end_of_delay 6E2C  
                                                           __end_of_blink 70A8  
                                                          ??_limparBuffer 0088  
                                                __size_of_acaoTesteBombas 0502  
                                                           __end_of_timer 2DBE  
                                                           __end_of_putch 6BA4  
                                                          ?_intToFloatStr 00B5  
                                                       ?_readEEPROM16_ext 008E  
                                                               ?_RTC_Init 0001  
                                                       intToFloatStr@conv 00BB  
                                                              ___lwtoft@c 0009  
                                                          _tela_menu_posi 0065  
                                                      ??_readEEPROM16_ext 0090  
                                                    __size_of_readButtons 0086  
                                                          _Lcd_Set_Cursor 3C36  
                                                                 ??_TIMER 0031  
                                                            ??i2_I2C_Read 0004  
                                                              ??_I2C_Read 0083  
                                                            ??i2_I2C_Wait 0001  
                                                      __size_of_getSerial 011C  
                                                              ??_I2C_Wait 0080  
                                                            ??i2_I2C_Stop 0002  
                                                              ??_I2C_Stop 0081  
                                                    __size_of_informacoes 0074  
                                                            __sec_partida 006C  
                                                     _timerAtualizacaoLCD 007C  
                                                    __end_of_atualizarLCD 3B70  
                                                            ??i2_BCDtoDEC 0001  
                                                               ?_Lcd_Init 0001  
                                                              ??_BCDtoDEC 0080  
                                                                 ??_delay 0082  
                                                               ?_Lcd_Port 0001  
                                                              __doprnt@ap 0090  
                                                                 ??_blink 0084  
                                                              __doprnt@cp 009C  
                                                              __doprnt@pb 008C  
                                                   writeEEPROM_ext@adress 008D  
                                                              ??_DECtoBCD 0088  
                                                                 ??_timer 0009  
                                                                 ??_putch 0080  
                                                              __pbssBANK0 00DB  
                                                              __pbssBANK1 0100  
                                                  __end_of_tela_ajusteRTC 227E  
                                                              __menu_posi 00DF  
                                                 __end_of_getSinalSIM800L 2BFE  
                                                     writeEEPROM_ext@data 008C  
                                                         ?_readEEPROM_ext 0001  
                                                __size_of_resetParametros 0030  
                                                      __end_ofi2_I2C_Read 6DF6  
                                                            I2C_Read@temp 0083  
                                                      __end_ofi2_I2C_Wait 6BD2  
                                                                 ?___ftge 0001  
                                                      __end_ofi2_I2C_Stop 6B24  
                                         __size_of_configuraRegistradores 0056  
                                                                 ?___wmul 0080  
                                                       _writeEEPROM16_ext 6C06  
                                                      __size_of_salvarLOG 00C4  
                                                      __end_ofi2_BCDtoDEC 6BBA  
                                                              _flag_b_esc 0060  
                                                              _codigoErro 00F3  
                                                                 ?_memset 0080  
                                                      _configuraTelefones 129A  
                                                        ?_writeEEPROM_ext 008C  
                                                      __size_of_validaRTC 004E  
                                                            ??i2_RTC_Init 0004  
                                                         ??_lerTransdutor 002A  
                                                              ??_RTC_Init 008C  
                                               __size_of_Lcd_Write_String 003A  
                                                      ?_writeEEPROM16_ext 0006  
                                                               ?___ftpack 0001  
                                                  __end_of_Lcd_Set_Cursor 3CFA  
                                           criarCaracteresCGRAM@character 0087  
                                                              I2C_Write@d 008A  
                                                                 ?_printf 00A1  
                                                         ??i2_I2C_Restart 0002  
                                                                 ?_strchr 0080  
                                                                 ?_strlen 0080  
                                                               ?___lwtoft 0009  
                                                                 ?_strstr 008F  
                                                           ??_I2C_Restart 0081  
                                          ?_verificarIntervaloTesteBombas 0001  
                                                     ?_configuraTelefones 0001  
                                                     ??_writeEEPROM16_ext 0008  
                                                              ??_Lcd_Init 0083  
                                                              ??_Lcd_Port 0080  
                                                                 _SSPCON1 000FC6  
                                                                 _SSPCON2 000FC5  
                                                       __end_of_dataLoger 2048  
                                                                 _SSPSTAT 000FC7  
                                                    __size_of_setShiftREG 0094  
                                                                 i2_delay 6D28  
                                                               ?_enviaSMS 0001  
                                                         ?_tela_ajusteRTC 0001  
                                                            _flag_b_menos 005E  
                                                          _Lcd_Write_Char 70E8  
                                                                 _Lcd_Cmd 6CA0  
                                                              _dtl_jockey 0053  
                                                      __size_of_writeChar 000E  
                                                      __end_ofi2_RTC_Init 6D8C  
                                                               _I2C_Start 6B30  
                                                              _gsmOcupado 00F4  
                                                               _I2C_Write 6B62  
                                                         _timerReenvioSMS 00F7  
                                                    ??_configuraTelefones 00BF  
                                                             ?_acaoBombas 0001  
                                                       __end_of_getSerial 33E4  
                                                                 __Hparam 0000  
                                                                 __Lparam 0000  
                                               __end_of_writeEEPROM16_ext 6C28  
                                                         _sp_estacionaria 00E2  
                                            __size_ofi2_getDS1307TimeDate 0112  
                                                         __size_of___ftge 009C  
                                                                 __b_mais 005B  
                                                         ??_intToFloatStr 00B7  
                                                                 ___awdiv 3F1E  
                                                                 ___ftadd 2862  
                                                                 ___awmod 7614  
                                                                 ___ftdiv 38D4  
                                                                 ___lldiv 77AC  
                                                         __size_of___wmul 002C  
                                                                 ___ftmul 3608  
                                                                 ___fttol 37EC  
                                                                 ___lwdiv 73E4  
                                                                 ___lwmod 7286  
                                                           atualizarLCD@i 0090  
                                                                 __doprnt 011C  
                                                                 __pcinit 7722  
                                                              ??___ftpack 0006  
                                                         __size_of_memset 003A  
                                                                 _btPress 74AA  
                                                                 __ramtop 0600  
                                                         ?_Lcd_Set_Cursor 0083  
                                                                 __tensao 0100  
                                                                 __ptext0 0E1C  
                                                                 __ptext1 716C  
                                                                 __ptext2 2692  
                                                                 __ptext3 2048  
                                                                 __ptext4 7238  
                                                                 __ptext5 33E4  
                                                                 __ptext6 712A  
                                                                 __ptext7 227E  
                                                                 __ptext8 6CF8  
                                                                 __ptext9 78D2  
                                               criarCaracteresCGRAM@F2962 7A99  
                                                         __size_of_printf 003C  
                                                              ??___lwtoft 000C  
                                                                 _dtl_dia 0058  
                                                                 _dtl_ano 0056  
                                                         __size_of_strchr 0040  
                                                                 _readADC 6C50  
                                                         __size_of_strlen 0060  
                                                                 _dtl_mes 0057  
                                                                 _dtl_min 0054  
                                                           i2BCDtoDEC@val 0001  
                                                         __size_of_strstr 0098  
                                                                 _dpowers 7AC9  
                                                    readEEPROM16_ext@data 0091  
                                                                 _isdigit 6C78  
                                                       ??_acaoTesteBombas 00C8  
                                                        ___awmod@dividend 0080  
                                                         _ajusteSP_Bombas 1976  
                                                __size_of_I2C_Master_Init 0064  
                                                        _dtl_carregar_log 0050  
                                                  _configuraRegistradores 732E  
                                                                 _pressao 00F9  
                                                                 _sprintf 3FB8  
                                                           __doprnt@width 009E  
                                                     __end_of_I2C_Restart 6B54  
                                                  __end_of_Lcd_Write_Char 712A  
                                                                 _strncmp 79FE  
                                                    end_of_initialization 779E  
                                                       __end_of_salvarLOG 3DBE  
                                                              ??_enviaSMS 00BB  
                                                    __end_of_limparBuffer 6E62  
                                           __size_of_criarCaracteresCGRAM 00C6  
                                                       __end_of_validaRTC 7286  
                                                                 memset@c 0082  
                                                                 memset@n 0084  
                                                                 memset@p 0086  
                                                           __Lmediumconst 7A98  
                                                     _timerTrocarTextoLcd 0073  
                                                              _timer$1331 0009  
                                                              _timer$1332 000B  
                                                              _timer$1333 000D  
                                                              _timer$1334 000F  
                                                              _timer$1335 0011  
                                                              _timer$1336 0013  
                                                              blink@start 0082  
                                                              ?_I2C_Start 0001  
                                                              ?_I2C_Write 008A  
                                                            writeChar@hex 0080  
                                                            _bufferSerial 0105  
                                                        ?_getSinalSIM800L 0001  
                                                    _acaoTesteBombas$1310 00D1  
                                                    _acaoTesteBombas$1323 00D5  
                                                    _acaoTesteBombas$1318 00D3  
                                                    _acaoTesteBombas$1328 00D7  
                                                    _acaoTesteBombas$1298 00CF  
                                                    _acaoTesteBombas$2381 00CD  
                                                         ___lldiv@divisor 0084  
                                                         ___lldiv@counter 008C  
                                                ??_configurarEstacionaria 00B5  
                                                               _RCSTAbits 000FAB  
                                                                 printf@f 00A1  
                                                        I2C_Master_Init@c 008D  
                                                                 postdec1 000FE5  
                                                                 postdec2 000FDD  
                                                                 postinc0 000FEE  
                                                                 postinc2 000FDE  
                                                               Lcd_Port@a 0080  
                                                                 strlen@s 0080  
                                                       ??_resetParametros 0081  
                                                              getSerial@i 00BC  
                                                               _PORTAbits 000F80  
                                                               _PORTBbits 000F81  
                                                               _PORTCbits 000F82  
                                                               _PORTDbits 000F83  
                                                   __size_of_atualizarLCD 00D2  
                                                               _PORTEbits 000F84  
                                                       __end_of_writeChar 6B7E  
                                                  __size_of_telaPrincipal 0232  
                                                               _TRISAbits 000F92  
                                                               _TRISBbits 000F93  
                                                               _TRISCbits 000F94  
                                                        ??_comunicarTeste 00BB  
                                                               _TRISDbits 000F95  
                                                               _TRISEbits 000F96  
                                                 i2writeEEPROM_ext@adress 0005  
                                                     __size_of_acaoBombas 014A  
                                                __end_of_tela_testeBombas 2862  
                                                       __size_of_I2C_Read 003A  
                                                       __size_of_I2C_Wait 001A  
                                                       __size_of_I2C_Stop 000C  
                                                         ?_Lcd_Write_Char 0001  
                                                       Lcd_Write_String@a 0084  
                                                       Lcd_Write_String@i 0086  
                                                  __size_of_aguardaBuffer 003C  
                                                       __size_of_BCDtoDEC 001A  
                                                _timerIntervaloLigarBomba 00F5  
                                                   __end_of_drenarPressao 6DC0  
                                                       __size_of_DECtoBCD 0042  
                                                             ___ftdiv@exp 0028  
                                                               _TXSTAbits 000FAC  
                                              __size_of_writeEEPROM16_ext 0022  
                                                  __size_of_clearShiftREG 0036  
                                                        _intensidadeSinal 007D  
                                                             ___ftmul@exp 0015  
                                                         getSerial@length 00BA  
                                                            _atualizarLCD 3A9E  
                                                               _Lcd_Clear 6B7E  
                                                          __end_of___ftge 3F1E  
                                                          i2I2C_Read@temp 0004  
                                                          __end_of___wmul 6CF8  
                                                      intToFloatStr@F2544 01C1  
                                                        _Lcd_Write_String 6F7C  
                                                           __pidataCOMRAM 0006  
                                                 __end_of_ajusteSP_Bombas 1BD0  
                                                          __end_of_memset 6F42  
                                                 salvarLOG@ultimoLogSalvo 008F  
                                                          __end_of_printf 706A  
                                                       __size_of_RTC_Init 0038  
                                                             _I2C_Restart 6B48  
                                                          __end_of_strchr 70E8  
                                                          __end_of_strlen 73E4  
                                                          __end_of_strstr 79FE  
                                                      _flagErroTransdutor 0071  
                                                     start_initialization 7722  
                                                             i2I2C_Read@a 0002  
                                                acaoTesteBombas@intervalo 00D9  
                                                   _tela_testeBombas$1431 00B7  
                                                      intToFloatStr@valor 00BF  
                                                _partidaBombaEstacionaria 39BA  
                                               __size_of_readEEPROM16_ext 0038  
                                                       __size_of_Lcd_Init 0088  
                                                       __size_of_Lcd_Port 0044  
                                                        ??_readEEPROM_ext 008C  
                                                       ??_I2C_Master_Init 0091  
                                                       atualizarLCD@line1 0088  
                                                       atualizarLCD@line2 008A  
                                                       atualizarLCD@line3 008C  
                                                       atualizarLCD@line4 008E  
                                                           ??i2_I2C_Start 0002  
                                                             ??_I2C_Start 0081  
                                                           ??i2_I2C_Write 0004  
                                                           _telaPrincipal 227E  
                                                             ??_I2C_Write 008C  
                                                   __end_of_lerParametros 32C8  
                                                              ?_Lcd_Clear 0001  
                                                                ??___ftge 0007  
                                         __size_of_configurarEstacionaria 0168  
                                                                ??___wmul 0084  
                                                             __doprnt@len 0099  
                                                             __doprnt@val 0097  
                                                             __pdataBANK0 00F9  
                                                             __pdataBANK1 01C1  
                                                           _aguardaBuffer 6FF2  
                                                           ??_readButtons 0001  
                                                         Lcd_Write_Char@a 0083  
                                                                ??_memset 0086  
                                                         Lcd_Write_Char@y 0082  
                                                                ??_printf 00B5  
                                                           ??_informacoes 00B5  
                                                                ??_strchr 0084  
                                                                ??_strlen 0082  
                                                                ??_strstr 0093  
                                                       __size_of___ftpack 00C4  
                                                             __pbssCOMRAM 0044  
                                                       __size_of___lwtoft 0028  
                                                           _clearShiftREG 6E62  
                                                           __pcstackBANK0 0080  
                                                   __size_of_limparBuffer 0036  
                                                        ??_tela_ajusteRTC 00B5  
                                                   lerTransdutor@_pressao 002B  
                                                     i2_getDS1307TimeDate 34F6  
                                                            _isdigit$1874 0081  
                                                        intToFloatStr@end 00B7  
                                                                ?i2_delay 0001  
                                                                ?_Lcd_Cmd 0001  
                                                               __doprnt@c 00A0  
                                                               __doprnt@f 008E  
                                         ??_verificarIntervaloTesteBombas 008E  
                                                          ?_telaPrincipal 0001  
                                                               _dataLoger 1E10  
                                                       __size_of_enviaSMS 0356  
                                                            ??_acaoBombas 00C8  
                                                        ___lwdiv@dividend 0080  
                                                     lerTransdutor@tensao 002E  
                                                        ??_Lcd_Set_Cursor 0084  
                                                               __pintcode 0008  
                                                    ?i2_getDS1307TimeDate 0006  
                                                           __pmediumconst 7A98  
                                                         _acaoTesteBombas 091A  
                                                               _flagTexto 0072  
                                                               _flag_b_ok 005A  
                                                     configuraTelefones@i 00C3  
                                                                ?___awdiv 0080  
                                                                ?___ftadd 001B  
                                                                ?___awmod 0080  
                                                          ?_aguardaBuffer 0093  
                                                                ?___ftdiv 001B  
                                                     __end_ofi2_I2C_Start 6B18  
                                                                ?___lldiv 0080  
                                                                ?___ftmul 000C  
                                                                ?___fttol 001B  
                                                     __end_ofi2_I2C_Write 6B62  
                                                               _getSerial 32C8  
                                                   _timerEtapaComunicacao 00F6  
                                                                ?___lwdiv 0080  
                                                                ?___lwmod 0087  
                                                                ?__doprnt 008C  
                                                               _bufferAUX 0195  
                                                               _ajust_tel 00DD  
                                                            _limparBuffer 6E2C  
                                                    readEEPROM_ext@adress 008C  
                                                                ?_btPress 0001  
                                                        ?_ajusteSP_Bombas 0001  
                                                   __end_of_lerTransdutor 1E10  
                                                                ?_readADC 0001  
                                                             _flag_b_mais 005C  
                                                 ?_configuraRegistradores 0001  
                                                   __end_ofi2_I2C_Restart 6B30  
                                                          __size_of_TIMER 0110  
                                                                ?_isdigit 0001  
                                                                _I2C_Read 6F42  
                                                          ?_clearShiftREG 0001  
                                                                _I2C_Wait 6BD2  
                                                                _I2C_Stop 6B3C  
                                                     __end_of_readButtons 7614  
                                                           ??_setShiftREG 0080  
                                                __size_of_writeEEPROM_ext 0046  
                                                  _configurarEstacionaria 2DBE  
                                                  readEEPROM16_ext@adress 0093  
                                                                _BCDtoDEC 6BEC  
                                                      __end_of_acaoBombas 3070  
                                                     __end_of_informacoes 758E  
                                                        ___lwdiv@quotient 0084  
                                                          __size_of_delay 0036  
                                                          __size_of_blink 003E  
                                                                ?_sprintf 00A1  
                                                                ?_strncmp 0086  
                                                                _DECtoBCD 712A  
                                                          __size_of_timer 01C0  
                                                          __size_of_putch 0014  
                                                               _menu_posi 00E0  
                                                               _horimetro 0103  
                                       __end_ofcriarCaracteresCGRAM@F2962 7AC9  
                                                          ___wmul@product 0084  
                                                               btPress@bt 0080  
                                                              ?_dataLoger 0001  
                                                               _salvarLOG 3CFA  
                                                                _PIE1bits 000F9D  
                                                               blink@line 0080  
                                                         _sp_pressao_rede 00E5  
                                                               _validaRTC 7238  
                                                         _resetParametros 6CF8  
                                                        _horario_de_teste 00E7  
                                             __size_of_configuraTelefones 0386  
                                                                Lcd_Cmd@a 0082  
                                                                _PIR1bits 000F9E  
                                                                i2u571_40 3E5C  
                                                                i2u653_40 28A8  
                                                                i2u574_40 6DE2  
                                                                i2u567_40 3DD0  
                                                                i2u663_40 295E  
                                                                i2u575_45 6DE6  
                                                                i2u656_40 28D6  
                                                                i2u673_40 390A  
                                                                i2u666_40 2998  
                                                                i2u690_40 38A4  
                                                   ??i2_getDS1307TimeDate 0008  
                                                                i2u659_40 2918  
                                                                i2u678_40 363E  
                                                                i2u686_40 3828  
                                                                i2u686_45 381E  
                                                                i2u696_40 1C56  
                                                                i2u689_40 387A  
                                                                i2u786_40 2CFA  
                                                                i2u946_47 6D34  
                                                                i2u787_40 2CFE  
                                                                i2u947_47 6C56  
                                                             ??_Lcd_Clear 0083  
                                                               _sp_jockey 00E4  
                                                     _dtl_posi_visualizar 004E  
                                                              ?_getSerial 00B5  
                                                            setShiftREG@i 0082  
                                            __end_of_criarCaracteresCGRAM 3C36  
                                                   __end_of_intToFloatStr 78D2  
                                                                _RTC_Init 6E98  
                                          __end_of_configuraRegistradores 7384  
                                                              _ADCON0bits 000FC2  
                                                       ___wmul@multiplier 0080  
                                                               _totalLogs 004F  
                                                        _dtl_estacionaria 0051  
                                                        ??_Lcd_Write_Char 0081  
                                                                i2delay@x 0001  
                                               _tempo_limite_estacionaria 00E6  
                                                                _Lcd_Init 769A  
                                                       i2_writeEEPROM_ext 6FB6  
                                                               _writeChar 6B70  
                                                                _Lcd_Port 71AE  
                                                       ?_tela_testeBombas 0001  
                                                               copy_data0 7736  
                                                               copy_data1 7756  
                                                        _readEEPROM16_ext 6ED0  
                                                      ?i2_writeEEPROM_ext 0004  
                                                         ??_telaPrincipal 00C2  
                                                      ??_tela_testeBombas 00B5  
                                                __end_of_Lcd_Write_String 6FB6  
                                                             _dtl_posicao 00FB  
                                                        __size_ofi2_delay 0032  
                                                     __end_of_setShiftREG 7966  
                                                 __end_of_acaoTesteBombas 0E1C  
                                                        __size_of_Lcd_Cmd 002C  
                                                              ?_salvarLOG 0001  
                                                             i2_I2C_Start 6B0C  
                                                             i2_I2C_Write 6B54  
                                                     ??i2_writeEEPROM_ext 0005  
                                                     _intervalo_teste_dia 00E9  
                                                              ?_validaRTC 0001  
                                                                __Hrparam 0000  
                                                         ??_aguardaBuffer 0095  
                                                                __Lrparam 0000  
                                                   criarCaracteresCGRAM@i 00BB  
                                                   criarCaracteresCGRAM@j 00BA  
                                                   criarCaracteresCGRAM@k 00B9  
                                                        __size_of___awdiv 009A  
                                                        __size_of___ftadd 01D0  
                                                        __size_of___awmod 0086  
                                                        __size_of___ftdiv 00E6  
                                                __size_of_getSinalSIM800L 01CC  
                                                        __size_of___lldiv 0092  
                                                        __size_of___ftmul 00F8  
                                                        __size_of___fttol 00E8  
                                                                __b_menos 005D  
                                                        __size_of___lwdiv 0062  
                                                        __size_of___lwmod 0052  
                                                             _readButtons 758E  
                                                                ___ftpack 3DBE  
                                                        __size_of__doprnt 07FE  
                                                             BCDtoDEC@val 0080  
                                                     Lcd_Write_Char@tempp 0081  
                                                         ??_clearShiftREG 0080  
                                                        __size_of_btPress 0070  
                                              ??_partidaBombaEstacionaria 0083  
                                                         intToFloatStr@pr 00C0  
                                                                ___lwtoft 6C28  
                                                             _informacoes 751A  
                                                    _ajusteSP_Bombas$2383 00C2  
                                                            ?_I2C_Restart 0001  
                                                                _base_sec 006D  
                                                         _I2C_Master_Init 7446  
                                                        __size_of_readADC 0028  
                                               __end_ofi2_writeEEPROM_ext 6FF2  
                                                          lerParametros@i 0095  
                                                                __sec_aux 006B  
                                                           _tempo_partida 0069  
                                                        __size_of_isdigit 0028  
                                                         ___lwdiv@divisor 0082  
                                                       setShiftREG@estado 0081  
                                                         ___lwdiv@counter 0086  
                                                              ?_writeChar 0080  
                                                                __ptext10 31A4  
                                                                __ptext11 6ED0  
                                                                __ptext20 2DBE  
                                                                __ptext12 751A  
                                                                __ptext21 129A  
                                                                __ptext13 2A32  
                                                                __ptext30 091A  
                                                                __ptext22 24B0  
                                                                __ptext14 32C8  
                                                                __ptext31 3CFA  
                                                                __ptext23 732E  
                                                                __ptext15 3700  
                                                                __ptext40 3FB8  
                                                                __ptext32 71F2  
                                                                __ptext24 3A9E  
                                                                __ptext16 3070  
                                                                __ptext41 6E62  
                                                                __ptext33 72D8  
                                                                __ptext25 6F7C  
                                                                __ptext17 6BEC  
                                                                __ptext50 6C78  
                                                                __ptext42 74AA  
                                                                __ptext34 6B48  
                                                                __ptext26 70E8  
                                                                __ptext18 1E10  
                                                                __ptext51 6CCC  
                                                                __ptext43 2F26  
                                                                __ptext35 6F42  
                                                                __ptext27 3C36  
                                                                __ptext19 3B70  
                                                                __ptext60 70A8  
                                                                __ptext52 7286  
                                                                __ptext44 39BA  
                                                                __ptext36 783E  
                                                                __ptext28 1976  
                                                                __ptext61 6DF6  
                                                                __ptext53 73E4  
                                                                __ptext45 1620  
                                                                __ptext37 7614  
                                                                __ptext29 706A  
                                                                __ptext70 71AE  
                                                                __ptext62 6E98  
                                                                __ptext54 6E2C  
                                                                __ptext46 6B70  
                                                                __ptext38 3F1E  
                                                                __ptext71 7446  
                                                                __ptext63 6B62  
                                                                __ptext55 6F08  
                                                                __ptext47 702E  
                                                                __ptext39 6D8C  
                                                                __ptext80 6C06  
                                                                __ptext72 77AC  
                                                                __ptext64 6B3C  
                                                                __ptext56 6FF2  
                                                                __ptext48 011C  
                                                                __ptext81 6FB6  
                                                                __ptext65 6B30  
                                                                __ptext57 7966  
                                                                __ptext49 6B90  
                                                                __ptext90 6C28  
                                                                __ptext82 6D28  
                                                                __ptext74 2BFE  
                                                                __ptext66 6BD2  
                                                                __ptext58 79FE  
                                                                __ptext91 37EC  
                                                                __ptext83 6B54  
                                                                __ptext75 34F6  
                                                                __ptext67 769A  
                                                                __ptext59 7384  
                                                                __ptext92 3608  
                                                                __ptext84 6B18  
                                                                __ptext76 6B24  
                                                                __ptext68 6B7E  
                                                                __ptext93 3E82  
                                                                __ptext85 6B0C  
                                                                __ptext77 6DC0  
                                                                __ptext69 6CA0  
                                                                __ptext94 38D4  
                                                                __ptext86 6BBA  
                                                                __ptext78 6BA4  
                                                                __ptext95 2862  
                                                                __ptext87 758E  
                                                                __ptext79 6D5A  
                                                                __ptext96 3DBE  
                                                                __ptext88 1BD0  
                                                                __ptext97 0000  
                                                                __ptext89 6C50  
                                                                _ajst_rtc 0064  
                                                        __size_of_sprintf 0048  
                                                        acaoTesteBombas@i 00DA  
                                                    getSinalSIM800L@sinal 00C8  
                                                 __end_of_resetParametros 6D28  
                                                                _enviaSMS 1620  
                                                                _dtl_hora 0055  
                                                        __size_of_strncmp 009A  
                                                     _comunicarTeste$1196 00BD  
                                                       ??_writeEEPROM_ext 008D  
                                                           __size_of_atoi 00EC  
                                                           __size_of_main 047E  
                                                             ??_dataLoger 00B5  
                                                     _status_estacionaria 00FC  
                                                              strncmp@len 008A  
                                                        _timerTesteBombas 00DB  
                                                                blink@end 0083  
                                                                _tel_posi 00DE  
                                               _criarCaracteresCGRAM$1387 00B7  
                                                                int$flags 007E  
                                                                atoi@sign 00C3  
                                                             ??_getSerial 00B8  
                                                      _telaPrincipal$2382 00C2  
                                                  __size_of_drenarPressao 0034  
                                                              _INTCONbits 000FF2  
                                                              i2_I2C_Read 6DC0  
                                                              i2_I2C_Wait 6BBA  
                                                              i2_I2C_Stop 6B18  
                                                             _setShiftREG 78D2  
                                                                isdigit@c 0082  
                                                                memset@p1 0080  
                                                              i2_BCDtoDEC 6BA4  
                                                             DECtoBCD@res 0089  
                                                             DECtoBCD@val 0088  
                                                                intlevel2 6AFE  
                                                               sprintf@ap 00AF  
                                                               sprintf@pb 00B1  
                                                               sprintf@wh 00A1  
                                                       _ocorrendoIncendio 00F2  
                                                    _criarCaracteresCGRAM 3B70  
                                                               strchr@chr 0082  
                                                        ___lwmod@dividend 0087  
                                                               strchr@ptr 0080  
                                                        ___lldiv@dividend 0080  
                                         i2getDS1307TimeDate@ptrToUserVal 0006  
                                           getDS1307TimeDate@ptrToUserVal 008C  
                                                             ??_salvarLOG 008E  
                                                        ?_acaoTesteBombas 0001  
                                                 __size_of_comunicarTeste 01E2  
                                                             ??_validaRTC 0080  
                                                               strncmp@s1 0086  
                                                               strncmp@s2 0088  
                                                          _dataLoger$1450 00BA  
                                                          _dataLoger$1461 00BE  
                                                          _dataLoger$1456 00BC  
                                                        aguardaBuffer@str 0093  
                                                       _getDS1307TimeDate 3070  
                                                       _setDS1307TimeDate 33E4  
                                                                printf@ap 00B5  
                                                                printf@pb 00B7  
                                                            getSerial@end 00B7  
                                                            getSerial@ret 00BD  
                                                            getSerial@str 00B5  
                                                 __end_of_I2C_Master_Init 74AA  
                                                      ?_getDS1307TimeDate 008C  
                                                      ?_setDS1307TimeDate 008C  
                                                      Lcd_Set_Cursor@temp 0087  
                                                              i2_RTC_Init 6D5A  
                                                           __ultimoEstado 0061  
                                                                sprintf@f 00A3  
                                                 ?_configurarEstacionaria 0001  
                                                        ___lldiv@quotient 0088  
                                                             _qtd_leitura 006A  
                                                         ___lwmod@divisor 0089  
                                              __size_ofi2_writeEEPROM_ext 003C  
                                                                strlen@cp 0084  
                                                         ___lwmod@counter 008B  
                                                     ??_getDS1307TimeDate 008E  
                                                     ??_setDS1307TimeDate 008E  
                                                       ??_getSinalSIM800L 00C6  
                                                            _sp_principal 00E3  
                                                                strstr@s1 008F  
                                                                strstr@s2 0091  
                                                             ??_writeChar 0082  
                                                  __size_of_lerParametros 0124  
                                                   ?_criarCaracteresCGRAM 0001  
                                                        ?_resetParametros 0001  
                                                           _sub_menu_posi 0066  
                                                             _option_posi 00E1  
                                                           _drenarPressao 6D8C  
                                         _tempo_limite_teste_estacionaria 0067  
                                               __end_of_getDS1307TimeDate 31A4  
                                               __end_of_setDS1307TimeDate 34F6  
